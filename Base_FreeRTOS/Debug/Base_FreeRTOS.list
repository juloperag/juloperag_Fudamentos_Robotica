
Base_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005840  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  080059e0  080059e0  000159e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b74  08005b74  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005b74  08005b74  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b74  08005b74  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b74  08005b74  00015b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b78  08005b78  00015b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014458  20000078  08005bf4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144d0  08005bf4  000244d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cacc  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ebd  00000000  00000000  0002cb74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0002ea38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  0002f548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000125e9  00000000  00000000  0002ff50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce24  00000000  00000000  00042539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064abb  00000000  00000000  0004f35d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b3e18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033fc  00000000  00000000  000b3e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080059c8 	.word	0x080059c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080059c8 	.word	0x080059c8

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012ee8 	.word	0x20012ee8

08000274 <main>:
void vTaskTwo( void * pvParameters );
//Le indicamos al sistema que hay una funcion para inicio de la comunicacion del SEGGER por UART
extern void SEGGER_UART_init(uint32_t);

int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b088      	sub	sp, #32
 8000278:	af02      	add	r7, sp, #8
	//Activamos la unidad de punto flotante (FPU)
	SCB->CPACR    |= (0xF << 20);
 800027a:	4b27      	ldr	r3, [pc, #156]	; (8000318 <main+0xa4>)
 800027c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000280:	4a25      	ldr	r2, [pc, #148]	; (8000318 <main+0xa4>)
 8000282:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000286:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Activamos del contador de Ticks
	DWT->CTRL    |= (1 << 0);
 800028a:	4b24      	ldr	r3, [pc, #144]	; (800031c <main+0xa8>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a23      	ldr	r2, [pc, #140]	; (800031c <main+0xa8>)
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6013      	str	r3, [r2, #0]

	//---------------------Inicio de uso funciones para el funcionamiento del SEGGER----------------------
	//Necesaria para el SEGGER
	vInitPrioGroupValue();
 8000296:	f002 f98f 	bl	80025b8 <vInitPrioGroupValue>
	//Configuramos el puerto Serial para trabajar  con el SEGGER
	SEGGER_UART_init(500000);
 800029a:	4821      	ldr	r0, [pc, #132]	; (8000320 <main+0xac>)
 800029c:	f002 ff18 	bl	80030d0 <SEGGER_UART_init>
	/* Primero configuramos */
	SEGGER_SYSVIEW_Conf();
 80002a0:	f002 fd40 	bl	8002d24 <SEGGER_SYSVIEW_Conf>
	//SEGGER_SYSVIEW_Start();

	//-----------------------Fin de uso Funciones para el funcionamiento del SEGGER----------------------

	BaseType_t xReturned;
	TaskHandle_t xHandleTask1 = NULL;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60bb      	str	r3, [r7, #8]
	TaskHandle_t xHandleTask2 = NULL;
 80002a8:	2300      	movs	r3, #0
 80002aa:	607b      	str	r3, [r7, #4]

	//Configuracion tarea 1
	xReturned = xTaskCreate(
 80002ac:	f107 0308 	add.w	r3, r7, #8
 80002b0:	9301      	str	r3, [sp, #4]
 80002b2:	2302      	movs	r3, #2
 80002b4:	9300      	str	r3, [sp, #0]
 80002b6:	4b1b      	ldr	r3, [pc, #108]	; (8000324 <main+0xb0>)
 80002b8:	22c8      	movs	r2, #200	; 0xc8
 80002ba:	491b      	ldr	r1, [pc, #108]	; (8000328 <main+0xb4>)
 80002bc:	481b      	ldr	r0, [pc, #108]	; (800032c <main+0xb8>)
 80002be:	f000 febb 	bl	8001038 <xTaskCreate>
 80002c2:	6178      	str	r0, [r7, #20]
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						"Hola Mundo desde la tarea-1",    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask1);      /* Used to pass out the created task's handle. */

	configASSERT(xReturned == pdPASS);
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d00a      	beq.n	80002e0 <main+0x6c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002ce:	f383 8811 	msr	BASEPRI, r3
 80002d2:	f3bf 8f6f 	isb	sy
 80002d6:	f3bf 8f4f 	dsb	sy
 80002da:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002dc:	bf00      	nop
 80002de:	e7fe      	b.n	80002de <main+0x6a>

	//configuracion tarea 2
	xReturned = xTaskCreate(
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	2302      	movs	r3, #2
 80002e6:	9300      	str	r3, [sp, #0]
 80002e8:	4b11      	ldr	r3, [pc, #68]	; (8000330 <main+0xbc>)
 80002ea:	22c8      	movs	r2, #200	; 0xc8
 80002ec:	4911      	ldr	r1, [pc, #68]	; (8000334 <main+0xc0>)
 80002ee:	4812      	ldr	r0, [pc, #72]	; (8000338 <main+0xc4>)
 80002f0:	f000 fea2 	bl	8001038 <xTaskCreate>
 80002f4:	6178      	str	r0, [r7, #20]
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						"Hola Mundo desde la tarea-2",    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask2);      /* Used to pass out the created task's handle. */

	configASSERT(xReturned == pdPASS);
 80002f6:	697b      	ldr	r3, [r7, #20]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d00a      	beq.n	8000312 <main+0x9e>
        __asm volatile
 80002fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000300:	f383 8811 	msr	BASEPRI, r3
 8000304:	f3bf 8f6f 	isb	sy
 8000308:	f3bf 8f4f 	dsb	sy
 800030c:	60fb      	str	r3, [r7, #12]
    }
 800030e:	bf00      	nop
 8000310:	e7fe      	b.n	8000310 <main+0x9c>

	/* Start the created tasks running. */
	vTaskStartScheduler();
 8000312:	f000 ffe7 	bl	80012e4 <vTaskStartScheduler>

	while(1)
 8000316:	e7fe      	b.n	8000316 <main+0xa2>
 8000318:	e000ed00 	.word	0xe000ed00
 800031c:	e0001000 	.word	0xe0001000
 8000320:	0007a120 	.word	0x0007a120
 8000324:	080059e0 	.word	0x080059e0
 8000328:	080059fc 	.word	0x080059fc
 800032c:	0800033d 	.word	0x0800033d
 8000330:	08005a04 	.word	0x08005a04
 8000334:	08005a20 	.word	0x08005a20
 8000338:	08000361 	.word	0x08000361

0800033c <vTaskOne>:
	}
}

/* Funcion que gobierna a la tarea 1*/
void vTaskOne( void * pvParameters )
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n",(char *) pvParameters);
 8000344:	6878      	ldr	r0, [r7, #4]
 8000346:	f004 feb3 	bl	80050b0 <puts>
		//Funcion para que la tarea suelte el procesador
		taskYIELD();
 800034a:	4b04      	ldr	r3, [pc, #16]	; (800035c <vTaskOne+0x20>)
 800034c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	f3bf 8f4f 	dsb	sy
 8000356:	f3bf 8f6f 	isb	sy
		printf("%s\n",(char *) pvParameters);
 800035a:	e7f3      	b.n	8000344 <vTaskOne+0x8>
 800035c:	e000ed04 	.word	0xe000ed04

08000360 <vTaskTwo>:
	}
}

/* Funcion que gobierna a la tarea 2*/
void vTaskTwo( void * pvParameters )
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	while(1)
	{
		while(1)
		{
			printf("%s\n",(char *) pvParameters);
 8000368:	6878      	ldr	r0, [r7, #4]
 800036a:	f004 fea1 	bl	80050b0 <puts>
			//Funcion para que la tarea suelte el procesador
			taskYIELD();
 800036e:	4b04      	ldr	r3, [pc, #16]	; (8000380 <vTaskTwo+0x20>)
 8000370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	f3bf 8f4f 	dsb	sy
 800037a:	f3bf 8f6f 	isb	sy
			printf("%s\n",(char *) pvParameters);
 800037e:	e7f3      	b.n	8000368 <vTaskTwo+0x8>
 8000380:	e000ed04 	.word	0xe000ed04

08000384 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af00      	add	r7, sp, #0
 800038a:	60f8      	str	r0, [r7, #12]
 800038c:	60b9      	str	r1, [r7, #8]
 800038e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000390:	2300      	movs	r3, #0
 8000392:	617b      	str	r3, [r7, #20]
 8000394:	e00a      	b.n	80003ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000396:	f3af 8000 	nop.w
 800039a:	4601      	mov	r1, r0
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	1c5a      	adds	r2, r3, #1
 80003a0:	60ba      	str	r2, [r7, #8]
 80003a2:	b2ca      	uxtb	r2, r1
 80003a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a6:	697b      	ldr	r3, [r7, #20]
 80003a8:	3301      	adds	r3, #1
 80003aa:	617b      	str	r3, [r7, #20]
 80003ac:	697a      	ldr	r2, [r7, #20]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	dbf0      	blt.n	8000396 <_read+0x12>
	}

return len;
 80003b4:	687b      	ldr	r3, [r7, #4]
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3718      	adds	r7, #24
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <_close>:
	}
	return len;
}

int _close(int file)
{
 80003be:	b480      	push	{r7}
 80003c0:	b083      	sub	sp, #12
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
	return -1;
 80003c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr

080003d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003d6:	b480      	push	{r7}
 80003d8:	b083      	sub	sp, #12
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
 80003de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003e6:	605a      	str	r2, [r3, #4]
	return 0;
 80003e8:	2300      	movs	r3, #0
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr

080003f6 <_isatty>:

int _isatty(int file)
{
 80003f6:	b480      	push	{r7}
 80003f8:	b083      	sub	sp, #12
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
	return 1;
 80003fe:	2301      	movs	r3, #1
}
 8000400:	4618      	mov	r0, r3
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr

0800040c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
 8000412:	60f8      	str	r0, [r7, #12]
 8000414:	60b9      	str	r1, [r7, #8]
 8000416:	607a      	str	r2, [r7, #4]
	return 0;
 8000418:	2300      	movs	r3, #0
}
 800041a:	4618      	mov	r0, r3
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
	...

08000428 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000428:	480d      	ldr	r0, [pc, #52]	; (8000460 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800042a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800042c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000430:	480c      	ldr	r0, [pc, #48]	; (8000464 <LoopForever+0x6>)
  ldr r1, =_edata
 8000432:	490d      	ldr	r1, [pc, #52]	; (8000468 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000434:	4a0d      	ldr	r2, [pc, #52]	; (800046c <LoopForever+0xe>)
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000438:	e002      	b.n	8000440 <LoopCopyDataInit>

0800043a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800043a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800043c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800043e:	3304      	adds	r3, #4

08000440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000444:	d3f9      	bcc.n	800043a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000446:	4a0a      	ldr	r2, [pc, #40]	; (8000470 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000448:	4c0a      	ldr	r4, [pc, #40]	; (8000474 <LoopForever+0x16>)
  movs r3, #0
 800044a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800044c:	e001      	b.n	8000452 <LoopFillZerobss>

0800044e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800044e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000450:	3204      	adds	r2, #4

08000452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000454:	d3fb      	bcc.n	800044e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000456:	f004 fd73 	bl	8004f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800045a:	f7ff ff0b 	bl	8000274 <main>

0800045e <LoopForever>:

LoopForever:
    b LoopForever
 800045e:	e7fe      	b.n	800045e <LoopForever>
  ldr   r0, =_estack
 8000460:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000468:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800046c:	08005b7c 	.word	0x08005b7c
  ldr r2, =_sbss
 8000470:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000474:	200144d0 	.word	0x200144d0

08000478 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000478:	e7fe      	b.n	8000478 <ADC_IRQHandler>

0800047a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800047a:	b480      	push	{r7}
 800047c:	b083      	sub	sp, #12
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	f103 0208 	add.w	r2, r3, #8
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	f04f 32ff 	mov.w	r2, #4294967295
 8000492:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	f103 0208 	add.w	r2, r3, #8
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	f103 0208 	add.w	r2, r3, #8
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr

080004ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80004ba:	b480      	push	{r7}
 80004bc:	b083      	sub	sp, #12
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	2200      	movs	r2, #0
 80004c6:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80004c8:	bf00      	nop
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	68fa      	ldr	r2, [r7, #12]
 80004e8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	689a      	ldr	r2, [r3, #8]
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	683a      	ldr	r2, [r7, #0]
 80004f8:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	683a      	ldr	r2, [r7, #0]
 80004fe:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	1c5a      	adds	r2, r3, #1
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	601a      	str	r2, [r3, #0]
}
 8000510:	bf00      	nop
 8000512:	3714      	adds	r7, #20
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000532:	d103      	bne.n	800053c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	691b      	ldr	r3, [r3, #16]
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	e00c      	b.n	8000556 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	3308      	adds	r3, #8
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	e002      	b.n	800054a <vListInsert+0x2e>
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	68ba      	ldr	r2, [r7, #8]
 8000552:	429a      	cmp	r2, r3
 8000554:	d2f6      	bcs.n	8000544 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	685a      	ldr	r2, [r3, #4]
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	683a      	ldr	r2, [r7, #0]
 8000564:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	68fa      	ldr	r2, [r7, #12]
 800056a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	1c5a      	adds	r2, r3, #1
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	601a      	str	r2, [r3, #0]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800058e:	b480      	push	{r7}
 8000590:	b085      	sub	sp, #20
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	691b      	ldr	r3, [r3, #16]
 800059a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	6892      	ldr	r2, [r2, #8]
 80005a4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	6852      	ldr	r2, [r2, #4]
 80005ae:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d103      	bne.n	80005c2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	689a      	ldr	r2, [r3, #8]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	1e5a      	subs	r2, r3, #1
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	681b      	ldr	r3, [r3, #0]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
 80005ea:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d10a      	bne.n	800060c <xQueueGenericReset+0x2a>
        __asm volatile
 80005f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005fa:	f383 8811 	msr	BASEPRI, r3
 80005fe:	f3bf 8f6f 	isb	sy
 8000602:	f3bf 8f4f 	dsb	sy
 8000606:	60bb      	str	r3, [r7, #8]
    }
 8000608:	bf00      	nop
 800060a:	e7fe      	b.n	800060a <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800060c:	f002 f852 	bl	80026b4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000618:	68f9      	ldr	r1, [r7, #12]
 800061a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800061c:	fb01 f303 	mul.w	r3, r1, r3
 8000620:	441a      	add	r2, r3
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2200      	movs	r2, #0
 800062a:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800063c:	3b01      	subs	r3, #1
 800063e:	68f9      	ldr	r1, [r7, #12]
 8000640:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000642:	fb01 f303 	mul.w	r3, r1, r3
 8000646:	441a      	add	r2, r3
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	22ff      	movs	r2, #255	; 0xff
 8000650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	22ff      	movs	r2, #255	; 0xff
 8000658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d109      	bne.n	8000676 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	691b      	ldr	r3, [r3, #16]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d00f      	beq.n	800068a <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	3310      	adds	r3, #16
 800066e:	4618      	mov	r0, r3
 8000670:	f001 f8b2 	bl	80017d8 <xTaskRemoveFromEventList>
 8000674:	e009      	b.n	800068a <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	3310      	adds	r3, #16
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fefd 	bl	800047a <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	3324      	adds	r3, #36	; 0x24
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fef8 	bl	800047a <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800068a:	f002 f843 	bl	8002714 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800068e:	2301      	movs	r3, #1
}
 8000690:	4618      	mov	r0, r3
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000698:	b580      	push	{r7, lr}
 800069a:	b08c      	sub	sp, #48	; 0x30
 800069c:	af02      	add	r7, sp, #8
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	4613      	mov	r3, r2
 80006a4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d10a      	bne.n	80006c2 <xQueueGenericCreate+0x2a>
        __asm volatile
 80006ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006b0:	f383 8811 	msr	BASEPRI, r3
 80006b4:	f3bf 8f6f 	isb	sy
 80006b8:	f3bf 8f4f 	dsb	sy
 80006bc:	61bb      	str	r3, [r7, #24]
    }
 80006be:	bf00      	nop
 80006c0:	e7fe      	b.n	80006c0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	68ba      	ldr	r2, [r7, #8]
 80006c6:	fb02 f303 	mul.w	r3, r2, r3
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d006      	beq.n	80006e0 <xQueueGenericCreate+0x48>
 80006d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d101      	bne.n	80006e4 <xQueueGenericCreate+0x4c>
 80006e0:	2301      	movs	r3, #1
 80006e2:	e000      	b.n	80006e6 <xQueueGenericCreate+0x4e>
 80006e4:	2300      	movs	r3, #0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d10a      	bne.n	8000700 <xQueueGenericCreate+0x68>
        __asm volatile
 80006ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ee:	f383 8811 	msr	BASEPRI, r3
 80006f2:	f3bf 8f6f 	isb	sy
 80006f6:	f3bf 8f4f 	dsb	sy
 80006fa:	617b      	str	r3, [r7, #20]
    }
 80006fc:	bf00      	nop
 80006fe:	e7fe      	b.n	80006fe <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000702:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000706:	d90a      	bls.n	800071e <xQueueGenericCreate+0x86>
        __asm volatile
 8000708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070c:	f383 8811 	msr	BASEPRI, r3
 8000710:	f3bf 8f6f 	isb	sy
 8000714:	f3bf 8f4f 	dsb	sy
 8000718:	613b      	str	r3, [r7, #16]
    }
 800071a:	bf00      	nop
 800071c:	e7fe      	b.n	800071c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800071e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000720:	3350      	adds	r3, #80	; 0x50
 8000722:	4618      	mov	r0, r3
 8000724:	f002 f8f2 	bl	800290c <pvPortMalloc>
 8000728:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800072a:	6a3b      	ldr	r3, [r7, #32]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d00d      	beq.n	800074c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000730:	6a3b      	ldr	r3, [r7, #32]
 8000732:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	3350      	adds	r3, #80	; 0x50
 8000738:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800073a:	79fa      	ldrb	r2, [r7, #7]
 800073c:	6a3b      	ldr	r3, [r7, #32]
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	4613      	mov	r3, r2
 8000742:	69fa      	ldr	r2, [r7, #28]
 8000744:	68b9      	ldr	r1, [r7, #8]
 8000746:	68f8      	ldr	r0, [r7, #12]
 8000748:	f000 f805 	bl	8000756 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800074c:	6a3b      	ldr	r3, [r7, #32]
    }
 800074e:	4618      	mov	r0, r3
 8000750:	3728      	adds	r7, #40	; 0x28
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b084      	sub	sp, #16
 800075a:	af00      	add	r7, sp, #0
 800075c:	60f8      	str	r0, [r7, #12]
 800075e:	60b9      	str	r1, [r7, #8]
 8000760:	607a      	str	r2, [r7, #4]
 8000762:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d103      	bne.n	8000772 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800076a:	69bb      	ldr	r3, [r7, #24]
 800076c:	69ba      	ldr	r2, [r7, #24]
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	e002      	b.n	8000778 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	68ba      	ldr	r2, [r7, #8]
 8000782:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000784:	2101      	movs	r1, #1
 8000786:	69b8      	ldr	r0, [r7, #24]
 8000788:	f7ff ff2b 	bl	80005e2 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	78fa      	ldrb	r2, [r7, #3]
 8000790:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8000794:	78fb      	ldrb	r3, [r7, #3]
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	68f9      	ldr	r1, [r7, #12]
 800079a:	2073      	movs	r0, #115	; 0x73
 800079c:	f003 fcba 	bl	8004114 <SEGGER_SYSVIEW_RecordU32x3>
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b090      	sub	sp, #64	; 0x40
 80007ac:	af02      	add	r7, sp, #8
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
 80007b4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80007b6:	2300      	movs	r3, #0
 80007b8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80007be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d10a      	bne.n	80007da <xQueueGenericSend+0x32>
        __asm volatile
 80007c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007c8:	f383 8811 	msr	BASEPRI, r3
 80007cc:	f3bf 8f6f 	isb	sy
 80007d0:	f3bf 8f4f 	dsb	sy
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80007d6:	bf00      	nop
 80007d8:	e7fe      	b.n	80007d8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d103      	bne.n	80007e8 <xQueueGenericSend+0x40>
 80007e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d101      	bne.n	80007ec <xQueueGenericSend+0x44>
 80007e8:	2301      	movs	r3, #1
 80007ea:	e000      	b.n	80007ee <xQueueGenericSend+0x46>
 80007ec:	2300      	movs	r3, #0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d10a      	bne.n	8000808 <xQueueGenericSend+0x60>
        __asm volatile
 80007f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007f6:	f383 8811 	msr	BASEPRI, r3
 80007fa:	f3bf 8f6f 	isb	sy
 80007fe:	f3bf 8f4f 	dsb	sy
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000804:	bf00      	nop
 8000806:	e7fe      	b.n	8000806 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	2b02      	cmp	r3, #2
 800080c:	d103      	bne.n	8000816 <xQueueGenericSend+0x6e>
 800080e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000812:	2b01      	cmp	r3, #1
 8000814:	d101      	bne.n	800081a <xQueueGenericSend+0x72>
 8000816:	2301      	movs	r3, #1
 8000818:	e000      	b.n	800081c <xQueueGenericSend+0x74>
 800081a:	2300      	movs	r3, #0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d10a      	bne.n	8000836 <xQueueGenericSend+0x8e>
        __asm volatile
 8000820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000824:	f383 8811 	msr	BASEPRI, r3
 8000828:	f3bf 8f6f 	isb	sy
 800082c:	f3bf 8f4f 	dsb	sy
 8000830:	623b      	str	r3, [r7, #32]
    }
 8000832:	bf00      	nop
 8000834:	e7fe      	b.n	8000834 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000836:	f001 f969 	bl	8001b0c <xTaskGetSchedulerState>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d102      	bne.n	8000846 <xQueueGenericSend+0x9e>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d101      	bne.n	800084a <xQueueGenericSend+0xa2>
 8000846:	2301      	movs	r3, #1
 8000848:	e000      	b.n	800084c <xQueueGenericSend+0xa4>
 800084a:	2300      	movs	r3, #0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d10a      	bne.n	8000866 <xQueueGenericSend+0xbe>
        __asm volatile
 8000850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000854:	f383 8811 	msr	BASEPRI, r3
 8000858:	f3bf 8f6f 	isb	sy
 800085c:	f3bf 8f4f 	dsb	sy
 8000860:	61fb      	str	r3, [r7, #28]
    }
 8000862:	bf00      	nop
 8000864:	e7fe      	b.n	8000864 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000866:	f001 ff25 	bl	80026b4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800086a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800086c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800086e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000872:	429a      	cmp	r2, r3
 8000874:	d302      	bcc.n	800087c <xQueueGenericSend+0xd4>
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	2b02      	cmp	r3, #2
 800087a:	d11f      	bne.n	80008bc <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 800087c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800087e:	4618      	mov	r0, r3
 8000880:	f004 f9d6 	bl	8004c30 <SEGGER_SYSVIEW_ShrinkId>
 8000884:	68ba      	ldr	r2, [r7, #8]
 8000886:	6879      	ldr	r1, [r7, #4]
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	460b      	mov	r3, r1
 800088e:	4601      	mov	r1, r0
 8000890:	205a      	movs	r0, #90	; 0x5a
 8000892:	f003 fcb5 	bl	8004200 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000896:	683a      	ldr	r2, [r7, #0]
 8000898:	68b9      	ldr	r1, [r7, #8]
 800089a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800089c:	f000 fa56 	bl	8000d4c <prvCopyDataToQueue>
 80008a0:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80008a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d004      	beq.n	80008b4 <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80008aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008ac:	3324      	adds	r3, #36	; 0x24
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 ff92 	bl	80017d8 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80008b4:	f001 ff2e 	bl	8002714 <vPortExitCritical>
                return pdPASS;
 80008b8:	2301      	movs	r3, #1
 80008ba:	e07d      	b.n	80009b8 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d110      	bne.n	80008e4 <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80008c2:	f001 ff27 	bl	8002714 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80008c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008c8:	4618      	mov	r0, r3
 80008ca:	f004 f9b1 	bl	8004c30 <SEGGER_SYSVIEW_ShrinkId>
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	6879      	ldr	r1, [r7, #4]
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	460b      	mov	r3, r1
 80008d8:	4601      	mov	r1, r0
 80008da:	205a      	movs	r0, #90	; 0x5a
 80008dc:	f003 fc90 	bl	8004200 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	e069      	b.n	80009b8 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 80008e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d106      	bne.n	80008f8 <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 ffd8 	bl	80018a4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80008f4:	2301      	movs	r3, #1
 80008f6:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80008f8:	f001 ff0c 	bl	8002714 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80008fc:	f000 fd54 	bl	80013a8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000900:	f001 fed8 	bl	80026b4 <vPortEnterCritical>
 8000904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000906:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800090a:	b25b      	sxtb	r3, r3
 800090c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000910:	d103      	bne.n	800091a <xQueueGenericSend+0x172>
 8000912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000914:	2200      	movs	r2, #0
 8000916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800091a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800091c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000920:	b25b      	sxtb	r3, r3
 8000922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000926:	d103      	bne.n	8000930 <xQueueGenericSend+0x188>
 8000928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800092a:	2200      	movs	r2, #0
 800092c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000930:	f001 fef0 	bl	8002714 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000934:	1d3a      	adds	r2, r7, #4
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4611      	mov	r1, r2
 800093c:	4618      	mov	r0, r3
 800093e:	f000 ffc7 	bl	80018d0 <xTaskCheckForTimeOut>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d124      	bne.n	8000992 <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800094a:	f000 faf7 	bl	8000f3c <prvIsQueueFull>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d018      	beq.n	8000986 <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000956:	3310      	adds	r3, #16
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	4611      	mov	r1, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f000 fee9 	bl	8001734 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000962:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000964:	f000 fa82 	bl	8000e6c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000968:	f000 fd2c 	bl	80013c4 <xTaskResumeAll>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	f47f af79 	bne.w	8000866 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <xQueueGenericSend+0x218>)
 8000976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	f3bf 8f4f 	dsb	sy
 8000980:	f3bf 8f6f 	isb	sy
 8000984:	e76f      	b.n	8000866 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000986:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000988:	f000 fa70 	bl	8000e6c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800098c:	f000 fd1a 	bl	80013c4 <xTaskResumeAll>
 8000990:	e769      	b.n	8000866 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000992:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000994:	f000 fa6a 	bl	8000e6c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000998:	f000 fd14 	bl	80013c4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800099c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800099e:	4618      	mov	r0, r3
 80009a0:	f004 f946 	bl	8004c30 <SEGGER_SYSVIEW_ShrinkId>
 80009a4:	68ba      	ldr	r2, [r7, #8]
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	460b      	mov	r3, r1
 80009ae:	4601      	mov	r1, r0
 80009b0:	205a      	movs	r0, #90	; 0x5a
 80009b2:	f003 fc25 	bl	8004200 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80009b6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3738      	adds	r7, #56	; 0x38
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	e000ed04 	.word	0xe000ed04

080009c4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b090      	sub	sp, #64	; 0x40
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80009d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d10a      	bne.n	80009f2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80009dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009e0:	f383 8811 	msr	BASEPRI, r3
 80009e4:	f3bf 8f6f 	isb	sy
 80009e8:	f3bf 8f4f 	dsb	sy
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80009ee:	bf00      	nop
 80009f0:	e7fe      	b.n	80009f0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d103      	bne.n	8000a00 <xQueueGenericSendFromISR+0x3c>
 80009f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d101      	bne.n	8000a04 <xQueueGenericSendFromISR+0x40>
 8000a00:	2301      	movs	r3, #1
 8000a02:	e000      	b.n	8000a06 <xQueueGenericSendFromISR+0x42>
 8000a04:	2300      	movs	r3, #0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d10a      	bne.n	8000a20 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8000a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a0e:	f383 8811 	msr	BASEPRI, r3
 8000a12:	f3bf 8f6f 	isb	sy
 8000a16:	f3bf 8f4f 	dsb	sy
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000a1c:	bf00      	nop
 8000a1e:	e7fe      	b.n	8000a1e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d103      	bne.n	8000a2e <xQueueGenericSendFromISR+0x6a>
 8000a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d101      	bne.n	8000a32 <xQueueGenericSendFromISR+0x6e>
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e000      	b.n	8000a34 <xQueueGenericSendFromISR+0x70>
 8000a32:	2300      	movs	r3, #0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d10a      	bne.n	8000a4e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8000a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a3c:	f383 8811 	msr	BASEPRI, r3
 8000a40:	f3bf 8f6f 	isb	sy
 8000a44:	f3bf 8f4f 	dsb	sy
 8000a48:	623b      	str	r3, [r7, #32]
    }
 8000a4a:	bf00      	nop
 8000a4c:	e7fe      	b.n	8000a4c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000a4e:	f001 ff1d 	bl	800288c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000a52:	f3ef 8211 	mrs	r2, BASEPRI
 8000a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a5a:	f383 8811 	msr	BASEPRI, r3
 8000a5e:	f3bf 8f6f 	isb	sy
 8000a62:	f3bf 8f4f 	dsb	sy
 8000a66:	61fa      	str	r2, [r7, #28]
 8000a68:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000a6a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000a6c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d302      	bcc.n	8000a80 <xQueueGenericSendFromISR+0xbc>
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d148      	bne.n	8000b12 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a92:	4618      	mov	r0, r3
 8000a94:	f004 f8cc 	bl	8004c30 <SEGGER_SYSVIEW_ShrinkId>
 8000a98:	4601      	mov	r1, r0
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	2060      	movs	r0, #96	; 0x60
 8000aa0:	f003 fade 	bl	8004060 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000aa4:	683a      	ldr	r2, [r7, #0]
 8000aa6:	68b9      	ldr	r1, [r7, #8]
 8000aa8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000aaa:	f000 f94f 	bl	8000d4c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000aae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab6:	d112      	bne.n	8000ade <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d025      	beq.n	8000b0c <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ac2:	3324      	adds	r3, #36	; 0x24
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 fe87 	bl	80017d8 <xTaskRemoveFromEventList>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d01d      	beq.n	8000b0c <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d01a      	beq.n	8000b0c <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2201      	movs	r2, #1
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	e016      	b.n	8000b0c <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000ade:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000ae2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ae4:	d10a      	bne.n	8000afc <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8000ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aea:	f383 8811 	msr	BASEPRI, r3
 8000aee:	f3bf 8f6f 	isb	sy
 8000af2:	f3bf 8f4f 	dsb	sy
 8000af6:	617b      	str	r3, [r7, #20]
    }
 8000af8:	bf00      	nop
 8000afa:	e7fe      	b.n	8000afa <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000afc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b00:	3301      	adds	r3, #1
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	b25a      	sxtb	r2, r3
 8000b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000b10:	e00b      	b.n	8000b2a <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b14:	4618      	mov	r0, r3
 8000b16:	f004 f88b 	bl	8004c30 <SEGGER_SYSVIEW_ShrinkId>
 8000b1a:	4601      	mov	r1, r0
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	2060      	movs	r0, #96	; 0x60
 8000b22:	f003 fa9d 	bl	8004060 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b2c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000b34:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3740      	adds	r7, #64	; 0x40
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b08f      	sub	sp, #60	; 0x3c
 8000b44:	af02      	add	r7, sp, #8
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d10a      	bne.n	8000b70 <xQueueReceive+0x30>
        __asm volatile
 8000b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b5e:	f383 8811 	msr	BASEPRI, r3
 8000b62:	f3bf 8f6f 	isb	sy
 8000b66:	f3bf 8f4f 	dsb	sy
 8000b6a:	623b      	str	r3, [r7, #32]
    }
 8000b6c:	bf00      	nop
 8000b6e:	e7fe      	b.n	8000b6e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d103      	bne.n	8000b7e <xQueueReceive+0x3e>
 8000b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d101      	bne.n	8000b82 <xQueueReceive+0x42>
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e000      	b.n	8000b84 <xQueueReceive+0x44>
 8000b82:	2300      	movs	r3, #0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d10a      	bne.n	8000b9e <xQueueReceive+0x5e>
        __asm volatile
 8000b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b8c:	f383 8811 	msr	BASEPRI, r3
 8000b90:	f3bf 8f6f 	isb	sy
 8000b94:	f3bf 8f4f 	dsb	sy
 8000b98:	61fb      	str	r3, [r7, #28]
    }
 8000b9a:	bf00      	nop
 8000b9c:	e7fe      	b.n	8000b9c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000b9e:	f000 ffb5 	bl	8001b0c <xTaskGetSchedulerState>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d102      	bne.n	8000bae <xQueueReceive+0x6e>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d101      	bne.n	8000bb2 <xQueueReceive+0x72>
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e000      	b.n	8000bb4 <xQueueReceive+0x74>
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d10a      	bne.n	8000bce <xQueueReceive+0x8e>
        __asm volatile
 8000bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bbc:	f383 8811 	msr	BASEPRI, r3
 8000bc0:	f3bf 8f6f 	isb	sy
 8000bc4:	f3bf 8f4f 	dsb	sy
 8000bc8:	61bb      	str	r3, [r7, #24]
    }
 8000bca:	bf00      	nop
 8000bcc:	e7fe      	b.n	8000bcc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000bce:	f001 fd71 	bl	80026b4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d024      	beq.n	8000c28 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000bde:	68b9      	ldr	r1, [r7, #8]
 8000be0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000be2:	f000 f91d 	bl	8000e20 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be8:	4618      	mov	r0, r3
 8000bea:	f004 f821 	bl	8004c30 <SEGGER_SYSVIEW_ShrinkId>
 8000bee:	4604      	mov	r4, r0
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f004 f81d 	bl	8004c30 <SEGGER_SYSVIEW_ShrinkId>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	9100      	str	r1, [sp, #0]
 8000bfe:	4621      	mov	r1, r4
 8000c00:	205c      	movs	r0, #92	; 0x5c
 8000c02:	f003 fafd 	bl	8004200 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	1e5a      	subs	r2, r3, #1
 8000c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c0c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c10:	691b      	ldr	r3, [r3, #16]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d004      	beq.n	8000c20 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c18:	3310      	adds	r3, #16
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 fddc 	bl	80017d8 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000c20:	f001 fd78 	bl	8002714 <vPortExitCritical>
                return pdPASS;
 8000c24:	2301      	movs	r3, #1
 8000c26:	e08a      	b.n	8000d3e <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d113      	bne.n	8000c56 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000c2e:	f001 fd71 	bl	8002714 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c34:	4618      	mov	r0, r3
 8000c36:	f003 fffb 	bl	8004c30 <SEGGER_SYSVIEW_ShrinkId>
 8000c3a:	4604      	mov	r4, r0
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f003 fff7 	bl	8004c30 <SEGGER_SYSVIEW_ShrinkId>
 8000c42:	4602      	mov	r2, r0
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2101      	movs	r1, #1
 8000c48:	9100      	str	r1, [sp, #0]
 8000c4a:	4621      	mov	r1, r4
 8000c4c:	205c      	movs	r0, #92	; 0x5c
 8000c4e:	f003 fad7 	bl	8004200 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e073      	b.n	8000d3e <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d106      	bne.n	8000c6a <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 fe1f 	bl	80018a4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000c66:	2301      	movs	r3, #1
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000c6a:	f001 fd53 	bl	8002714 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000c6e:	f000 fb9b 	bl	80013a8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000c72:	f001 fd1f 	bl	80026b4 <vPortEnterCritical>
 8000c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c7c:	b25b      	sxtb	r3, r3
 8000c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c82:	d103      	bne.n	8000c8c <xQueueReceive+0x14c>
 8000c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c92:	b25b      	sxtb	r3, r3
 8000c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c98:	d103      	bne.n	8000ca2 <xQueueReceive+0x162>
 8000c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000ca2:	f001 fd37 	bl	8002714 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ca6:	1d3a      	adds	r2, r7, #4
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fe0e 	bl	80018d0 <xTaskCheckForTimeOut>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d124      	bne.n	8000d04 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000cbc:	f000 f928 	bl	8000f10 <prvIsQueueEmpty>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d018      	beq.n	8000cf8 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc8:	3324      	adds	r3, #36	; 0x24
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 fd30 	bl	8001734 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000cd6:	f000 f8c9 	bl	8000e6c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000cda:	f000 fb73 	bl	80013c4 <xTaskResumeAll>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	f47f af74 	bne.w	8000bce <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <xQueueReceive+0x208>)
 8000ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	f3bf 8f4f 	dsb	sy
 8000cf2:	f3bf 8f6f 	isb	sy
 8000cf6:	e76a      	b.n	8000bce <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000cfa:	f000 f8b7 	bl	8000e6c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000cfe:	f000 fb61 	bl	80013c4 <xTaskResumeAll>
 8000d02:	e764      	b.n	8000bce <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d06:	f000 f8b1 	bl	8000e6c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000d0a:	f000 fb5b 	bl	80013c4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d10:	f000 f8fe 	bl	8000f10 <prvIsQueueEmpty>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f43f af59 	beq.w	8000bce <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f003 ff86 	bl	8004c30 <SEGGER_SYSVIEW_ShrinkId>
 8000d24:	4604      	mov	r4, r0
 8000d26:	2000      	movs	r0, #0
 8000d28:	f003 ff82 	bl	8004c30 <SEGGER_SYSVIEW_ShrinkId>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2101      	movs	r1, #1
 8000d32:	9100      	str	r1, [sp, #0]
 8000d34:	4621      	mov	r1, r4
 8000d36:	205c      	movs	r0, #92	; 0x5c
 8000d38:	f003 fa62 	bl	8004200 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000d3c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3734      	adds	r7, #52	; 0x34
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd90      	pop	{r4, r7, pc}
 8000d46:	bf00      	nop
 8000d48:	e000ed04 	.word	0xe000ed04

08000d4c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d60:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10d      	bne.n	8000d86 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 fee6 	bl	8001b48 <xTaskPriorityDisinherit>
 8000d7c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	e043      	b.n	8000e0e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d119      	bne.n	8000dc0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	6858      	ldr	r0, [r3, #4]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	461a      	mov	r2, r3
 8000d96:	68b9      	ldr	r1, [r7, #8]
 8000d98:	f004 f906 	bl	8004fa8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	441a      	add	r2, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d32b      	bcc.n	8000e0e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	e026      	b.n	8000e0e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	68d8      	ldr	r0, [r3, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	461a      	mov	r2, r3
 8000dca:	68b9      	ldr	r1, [r7, #8]
 8000dcc:	f004 f8ec 	bl	8004fa8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	68da      	ldr	r2, [r3, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	425b      	negs	r3, r3
 8000dda:	441a      	add	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	68da      	ldr	r2, [r3, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d207      	bcs.n	8000dfc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	425b      	negs	r3, r3
 8000df6:	441a      	add	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d105      	bne.n	8000e0e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d002      	beq.n	8000e0e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	1c5a      	adds	r2, r3, #1
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000e16:	697b      	ldr	r3, [r7, #20]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d018      	beq.n	8000e64 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68da      	ldr	r2, [r3, #12]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	441a      	add	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d303      	bcc.n	8000e54 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	68d9      	ldr	r1, [r3, #12]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	6838      	ldr	r0, [r7, #0]
 8000e60:	f004 f8a2 	bl	8004fa8 <memcpy>
    }
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000e74:	f001 fc1e 	bl	80026b4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e7e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000e80:	e011      	b.n	8000ea6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d012      	beq.n	8000eb0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3324      	adds	r3, #36	; 0x24
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 fca2 	bl	80017d8 <xTaskRemoveFromEventList>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000e9a:	f000 fd7f 	bl	800199c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	dce9      	bgt.n	8000e82 <prvUnlockQueue+0x16>
 8000eae:	e000      	b.n	8000eb2 <prvUnlockQueue+0x46>
                        break;
 8000eb0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	22ff      	movs	r2, #255	; 0xff
 8000eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000eba:	f001 fc2b 	bl	8002714 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000ebe:	f001 fbf9 	bl	80026b4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ec8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000eca:	e011      	b.n	8000ef0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	691b      	ldr	r3, [r3, #16]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d012      	beq.n	8000efa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3310      	adds	r3, #16
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 fc7d 	bl	80017d8 <xTaskRemoveFromEventList>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000ee4:	f000 fd5a 	bl	800199c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000ee8:	7bbb      	ldrb	r3, [r7, #14]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000ef0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	dce9      	bgt.n	8000ecc <prvUnlockQueue+0x60>
 8000ef8:	e000      	b.n	8000efc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000efa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	22ff      	movs	r2, #255	; 0xff
 8000f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000f04:	f001 fc06 	bl	8002714 <vPortExitCritical>
}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000f18:	f001 fbcc 	bl	80026b4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000f24:	2301      	movs	r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	e001      	b.n	8000f2e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000f2e:	f001 fbf1 	bl	8002714 <vPortExitCritical>

    return xReturn;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000f44:	f001 fbb6 	bl	80026b4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d102      	bne.n	8000f5a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000f54:	2301      	movs	r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	e001      	b.n	8000f5e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000f5e:	f001 fbd9 	bl	8002714 <vPortExitCritical>

    return xReturn;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	e01e      	b.n	8000fba <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8000f7c:	4a13      	ldr	r2, [pc, #76]	; (8000fcc <vQueueAddToRegistry+0x60>)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d115      	bne.n	8000fb4 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8000f88:	4910      	ldr	r1, [pc, #64]	; (8000fcc <vQueueAddToRegistry+0x60>)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8000f92:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <vQueueAddToRegistry+0x60>)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	4413      	add	r3, r2
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f003 fe45 	bl	8004c30 <SEGGER_SYSVIEW_ShrinkId>
 8000fa6:	4601      	mov	r1, r0
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	2071      	movs	r0, #113	; 0x71
 8000fae:	f003 f857 	bl	8004060 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8000fb2:	e006      	b.n	8000fc2 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b07      	cmp	r3, #7
 8000fbe:	d9dd      	bls.n	8000f7c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000094 	.word	0x20000094

08000fd0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000fe0:	f001 fb68 	bl	80026b4 <vPortEnterCritical>
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000fea:	b25b      	sxtb	r3, r3
 8000fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff0:	d103      	bne.n	8000ffa <vQueueWaitForMessageRestricted+0x2a>
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001000:	b25b      	sxtb	r3, r3
 8001002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001006:	d103      	bne.n	8001010 <vQueueWaitForMessageRestricted+0x40>
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001010:	f001 fb80 	bl	8002714 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001018:	2b00      	cmp	r3, #0
 800101a:	d106      	bne.n	800102a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3324      	adds	r3, #36	; 0x24
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	68b9      	ldr	r1, [r7, #8]
 8001024:	4618      	mov	r0, r3
 8001026:	f000 fba9 	bl	800177c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800102a:	6978      	ldr	r0, [r7, #20]
 800102c:	f7ff ff1e 	bl	8000e6c <prvUnlockQueue>
    }
 8001030:	bf00      	nop
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001038:	b580      	push	{r7, lr}
 800103a:	b08c      	sub	sp, #48	; 0x30
 800103c:	af04      	add	r7, sp, #16
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	4613      	mov	r3, r2
 8001046:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4618      	mov	r0, r3
 800104e:	f001 fc5d 	bl	800290c <pvPortMalloc>
 8001052:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00e      	beq.n	8001078 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800105a:	2058      	movs	r0, #88	; 0x58
 800105c:	f001 fc56 	bl	800290c <pvPortMalloc>
 8001060:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	631a      	str	r2, [r3, #48]	; 0x30
 800106e:	e005      	b.n	800107c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001070:	6978      	ldr	r0, [r7, #20]
 8001072:	f001 fd2b 	bl	8002acc <vPortFree>
 8001076:	e001      	b.n	800107c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d013      	beq.n	80010aa <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001082:	88fa      	ldrh	r2, [r7, #6]
 8001084:	2300      	movs	r3, #0
 8001086:	9303      	str	r3, [sp, #12]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	9302      	str	r3, [sp, #8]
 800108c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	68b9      	ldr	r1, [r7, #8]
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f000 f80e 	bl	80010ba <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800109e:	69f8      	ldr	r0, [r7, #28]
 80010a0:	f000 f8a2 	bl	80011e8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80010a4:	2301      	movs	r3, #1
 80010a6:	61bb      	str	r3, [r7, #24]
 80010a8:	e002      	b.n	80010b0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80010b0:	69bb      	ldr	r3, [r7, #24]
    }
 80010b2:	4618      	mov	r0, r3
 80010b4:	3720      	adds	r7, #32
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b088      	sub	sp, #32
 80010be:	af00      	add	r7, sp, #0
 80010c0:	60f8      	str	r0, [r7, #12]
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80010c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	461a      	mov	r2, r3
 80010d2:	21a5      	movs	r1, #165	; 0xa5
 80010d4:	f003 ff76 	bl	8004fc4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80010d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010e2:	3b01      	subs	r3, #1
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	f023 0307 	bic.w	r3, r3, #7
 80010f0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00a      	beq.n	8001112 <prvInitialiseNewTask+0x58>
        __asm volatile
 80010fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001100:	f383 8811 	msr	BASEPRI, r3
 8001104:	f3bf 8f6f 	isb	sy
 8001108:	f3bf 8f4f 	dsb	sy
 800110c:	617b      	str	r3, [r7, #20]
    }
 800110e:	bf00      	nop
 8001110:	e7fe      	b.n	8001110 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d01f      	beq.n	8001158 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	e012      	b.n	8001144 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	4413      	add	r3, r2
 8001124:	7819      	ldrb	r1, [r3, #0]
 8001126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	4413      	add	r3, r2
 800112c:	3334      	adds	r3, #52	; 0x34
 800112e:	460a      	mov	r2, r1
 8001130:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	4413      	add	r3, r2
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d006      	beq.n	800114c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3301      	adds	r3, #1
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	2b09      	cmp	r3, #9
 8001148:	d9e9      	bls.n	800111e <prvInitialiseNewTask+0x64>
 800114a:	e000      	b.n	800114e <prvInitialiseNewTask+0x94>
            {
                break;
 800114c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800114e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001150:	2200      	movs	r2, #0
 8001152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001156:	e003      	b.n	8001160 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001162:	2b04      	cmp	r3, #4
 8001164:	d901      	bls.n	800116a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001166:	2304      	movs	r3, #4
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800116a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800116c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001174:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001178:	2200      	movs	r2, #0
 800117a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800117c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117e:	3304      	adds	r3, #4
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f99a 	bl	80004ba <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001188:	3318      	adds	r3, #24
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f995 	bl	80004ba <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001194:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001198:	f1c3 0205 	rsb	r2, r3, #5
 800119c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800119e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80011a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80011a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a8:	3350      	adds	r3, #80	; 0x50
 80011aa:	2204      	movs	r2, #4
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 ff08 	bl	8004fc4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80011b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b6:	3354      	adds	r3, #84	; 0x54
 80011b8:	2201      	movs	r2, #1
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f003 ff01 	bl	8004fc4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	68f9      	ldr	r1, [r7, #12]
 80011c6:	69b8      	ldr	r0, [r7, #24]
 80011c8:	f001 f8c8 	bl	800235c <pxPortInitialiseStack>
 80011cc:	4602      	mov	r2, r0
 80011ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80011d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d002      	beq.n	80011de <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80011d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011dc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80011de:	bf00      	nop
 80011e0:	3720      	adds	r7, #32
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af02      	add	r7, sp, #8
 80011ee:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80011f0:	f001 fa60 	bl	80026b4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80011f4:	4b35      	ldr	r3, [pc, #212]	; (80012cc <prvAddNewTaskToReadyList+0xe4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	4a34      	ldr	r2, [pc, #208]	; (80012cc <prvAddNewTaskToReadyList+0xe4>)
 80011fc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80011fe:	4b34      	ldr	r3, [pc, #208]	; (80012d0 <prvAddNewTaskToReadyList+0xe8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d109      	bne.n	800121a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001206:	4a32      	ldr	r2, [pc, #200]	; (80012d0 <prvAddNewTaskToReadyList+0xe8>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800120c:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <prvAddNewTaskToReadyList+0xe4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d110      	bne.n	8001236 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001214:	f000 fbe0 	bl	80019d8 <prvInitialiseTaskLists>
 8001218:	e00d      	b.n	8001236 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800121a:	4b2e      	ldr	r3, [pc, #184]	; (80012d4 <prvAddNewTaskToReadyList+0xec>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d109      	bne.n	8001236 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001222:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <prvAddNewTaskToReadyList+0xe8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122c:	429a      	cmp	r2, r3
 800122e:	d802      	bhi.n	8001236 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001230:	4a27      	ldr	r2, [pc, #156]	; (80012d0 <prvAddNewTaskToReadyList+0xe8>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <prvAddNewTaskToReadyList+0xf0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	4a26      	ldr	r2, [pc, #152]	; (80012d8 <prvAddNewTaskToReadyList+0xf0>)
 800123e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001240:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <prvAddNewTaskToReadyList+0xf0>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d016      	beq.n	800127c <prvAddNewTaskToReadyList+0x94>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4618      	mov	r0, r3
 8001252:	f003 fbc7 	bl	80049e4 <SEGGER_SYSVIEW_OnTaskCreate>
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	461d      	mov	r5, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	461c      	mov	r4, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	1ae3      	subs	r3, r4, r3
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	462b      	mov	r3, r5
 8001278:	f001 fdf6 	bl	8002e68 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4618      	mov	r0, r3
 8001280:	f003 fc34 	bl	8004aec <SEGGER_SYSVIEW_OnTaskStartReady>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001288:	2201      	movs	r2, #1
 800128a:	409a      	lsls	r2, r3
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <prvAddNewTaskToReadyList+0xf4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4313      	orrs	r3, r2
 8001292:	4a12      	ldr	r2, [pc, #72]	; (80012dc <prvAddNewTaskToReadyList+0xf4>)
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <prvAddNewTaskToReadyList+0xf8>)
 80012a4:	441a      	add	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3304      	adds	r3, #4
 80012aa:	4619      	mov	r1, r3
 80012ac:	4610      	mov	r0, r2
 80012ae:	f7ff f911 	bl	80004d4 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80012b2:	f001 fa2f 	bl	8002714 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80012b6:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <prvAddNewTaskToReadyList+0xec>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <prvAddNewTaskToReadyList+0xe8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bdb0      	pop	{r4, r5, r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200001ac 	.word	0x200001ac
 80012d0:	200000d4 	.word	0x200000d4
 80012d4:	200001b8 	.word	0x200001b8
 80012d8:	200001c8 	.word	0x200001c8
 80012dc:	200001b4 	.word	0x200001b4
 80012e0:	200000d8 	.word	0x200000d8

080012e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80012ea:	4b27      	ldr	r3, [pc, #156]	; (8001388 <vTaskStartScheduler+0xa4>)
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	2300      	movs	r3, #0
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2300      	movs	r3, #0
 80012f4:	2282      	movs	r2, #130	; 0x82
 80012f6:	4925      	ldr	r1, [pc, #148]	; (800138c <vTaskStartScheduler+0xa8>)
 80012f8:	4825      	ldr	r0, [pc, #148]	; (8001390 <vTaskStartScheduler+0xac>)
 80012fa:	f7ff fe9d 	bl	8001038 <xTaskCreate>
 80012fe:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d102      	bne.n	800130c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001306:	f000 fd17 	bl	8001d38 <xTimerCreateTimerTask>
 800130a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d124      	bne.n	800135c <vTaskStartScheduler+0x78>
        __asm volatile
 8001312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001316:	f383 8811 	msr	BASEPRI, r3
 800131a:	f3bf 8f6f 	isb	sy
 800131e:	f3bf 8f4f 	dsb	sy
 8001322:	60bb      	str	r3, [r7, #8]
    }
 8001324:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001326:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <vTaskStartScheduler+0xb0>)
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <vTaskStartScheduler+0xb4>)
 8001330:	2201      	movs	r2, #1
 8001332:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <vTaskStartScheduler+0xb8>)
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <vTaskStartScheduler+0xbc>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <vTaskStartScheduler+0xa4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d102      	bne.n	800134c <vTaskStartScheduler+0x68>
 8001346:	f003 fb31 	bl	80049ac <SEGGER_SYSVIEW_OnIdle>
 800134a:	e004      	b.n	8001356 <vTaskStartScheduler+0x72>
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <vTaskStartScheduler+0xbc>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f003 fb89 	bl	8004a68 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001356:	f001 f88d 	bl	8002474 <xPortStartScheduler>
 800135a:	e00e      	b.n	800137a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001362:	d10a      	bne.n	800137a <vTaskStartScheduler+0x96>
        __asm volatile
 8001364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001368:	f383 8811 	msr	BASEPRI, r3
 800136c:	f3bf 8f6f 	isb	sy
 8001370:	f3bf 8f4f 	dsb	sy
 8001374:	607b      	str	r3, [r7, #4]
    }
 8001376:	bf00      	nop
 8001378:	e7fe      	b.n	8001378 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <vTaskStartScheduler+0xc0>)
 800137c:	681b      	ldr	r3, [r3, #0]
}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200001d0 	.word	0x200001d0
 800138c:	08005a28 	.word	0x08005a28
 8001390:	080019b5 	.word	0x080019b5
 8001394:	200001cc 	.word	0x200001cc
 8001398:	200001b8 	.word	0x200001b8
 800139c:	200001b0 	.word	0x200001b0
 80013a0:	200000d4 	.word	0x200000d4
 80013a4:	20000004 	.word	0x20000004

080013a8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <vTaskSuspendAll+0x18>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	4a03      	ldr	r2, [pc, #12]	; (80013c0 <vTaskSuspendAll+0x18>)
 80013b4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	200001d4 	.word	0x200001d4

080013c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80013d2:	4b3d      	ldr	r3, [pc, #244]	; (80014c8 <xTaskResumeAll+0x104>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10a      	bne.n	80013f0 <xTaskResumeAll+0x2c>
        __asm volatile
 80013da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013de:	f383 8811 	msr	BASEPRI, r3
 80013e2:	f3bf 8f6f 	isb	sy
 80013e6:	f3bf 8f4f 	dsb	sy
 80013ea:	603b      	str	r3, [r7, #0]
    }
 80013ec:	bf00      	nop
 80013ee:	e7fe      	b.n	80013ee <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80013f0:	f001 f960 	bl	80026b4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80013f4:	4b34      	ldr	r3, [pc, #208]	; (80014c8 <xTaskResumeAll+0x104>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	4a33      	ldr	r2, [pc, #204]	; (80014c8 <xTaskResumeAll+0x104>)
 80013fc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80013fe:	4b32      	ldr	r3, [pc, #200]	; (80014c8 <xTaskResumeAll+0x104>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d159      	bne.n	80014ba <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001406:	4b31      	ldr	r3, [pc, #196]	; (80014cc <xTaskResumeAll+0x108>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d055      	beq.n	80014ba <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800140e:	e032      	b.n	8001476 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001410:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <xTaskResumeAll+0x10c>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	3318      	adds	r3, #24
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f8b6 	bl	800058e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3304      	adds	r3, #4
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f8b1 	bl	800058e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4618      	mov	r0, r3
 8001430:	f003 fb5c 	bl	8004aec <SEGGER_SYSVIEW_OnTaskStartReady>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001438:	2201      	movs	r2, #1
 800143a:	409a      	lsls	r2, r3
 800143c:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <xTaskResumeAll+0x110>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4313      	orrs	r3, r2
 8001442:	4a24      	ldr	r2, [pc, #144]	; (80014d4 <xTaskResumeAll+0x110>)
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4a21      	ldr	r2, [pc, #132]	; (80014d8 <xTaskResumeAll+0x114>)
 8001454:	441a      	add	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	3304      	adds	r3, #4
 800145a:	4619      	mov	r1, r3
 800145c:	4610      	mov	r0, r2
 800145e:	f7ff f839 	bl	80004d4 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <xTaskResumeAll+0x118>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146c:	429a      	cmp	r2, r3
 800146e:	d302      	bcc.n	8001476 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <xTaskResumeAll+0x11c>)
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <xTaskResumeAll+0x10c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1c8      	bne.n	8001410 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001484:	f000 fb26 	bl	8001ad4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <xTaskResumeAll+0x120>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d010      	beq.n	80014b6 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001494:	f000 f84a 	bl	800152c <xTaskIncrementTick>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d002      	beq.n	80014a4 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <xTaskResumeAll+0x11c>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f1      	bne.n	8001494 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <xTaskResumeAll+0x120>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <xTaskResumeAll+0x11c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80014ba:	f001 f92b 	bl	8002714 <vPortExitCritical>

    return xAlreadyYielded;
 80014be:	687b      	ldr	r3, [r7, #4]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	200001d4 	.word	0x200001d4
 80014cc:	200001ac 	.word	0x200001ac
 80014d0:	2000016c 	.word	0x2000016c
 80014d4:	200001b4 	.word	0x200001b4
 80014d8:	200000d8 	.word	0x200000d8
 80014dc:	200000d4 	.word	0x200000d4
 80014e0:	200001c0 	.word	0x200001c0
 80014e4:	200001bc 	.word	0x200001bc

080014e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80014ee:	4b05      	ldr	r3, [pc, #20]	; (8001504 <xTaskGetTickCount+0x1c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80014f4:	687b      	ldr	r3, [r7, #4]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	200001b0 	.word	0x200001b0

08001508 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800150e:	f001 f9bd 	bl	800288c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <xTaskGetTickCountFromISR+0x20>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800151c:	683b      	ldr	r3, [r7, #0]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200001b0 	.word	0x200001b0

0800152c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001536:	4b41      	ldr	r3, [pc, #260]	; (800163c <xTaskIncrementTick+0x110>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d173      	bne.n	8001626 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800153e:	4b40      	ldr	r3, [pc, #256]	; (8001640 <xTaskIncrementTick+0x114>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001546:	4a3e      	ldr	r2, [pc, #248]	; (8001640 <xTaskIncrementTick+0x114>)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d120      	bne.n	8001594 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8001552:	4b3c      	ldr	r3, [pc, #240]	; (8001644 <xTaskIncrementTick+0x118>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00a      	beq.n	8001572 <xTaskIncrementTick+0x46>
        __asm volatile
 800155c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001560:	f383 8811 	msr	BASEPRI, r3
 8001564:	f3bf 8f6f 	isb	sy
 8001568:	f3bf 8f4f 	dsb	sy
 800156c:	603b      	str	r3, [r7, #0]
    }
 800156e:	bf00      	nop
 8001570:	e7fe      	b.n	8001570 <xTaskIncrementTick+0x44>
 8001572:	4b34      	ldr	r3, [pc, #208]	; (8001644 <xTaskIncrementTick+0x118>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	4b33      	ldr	r3, [pc, #204]	; (8001648 <xTaskIncrementTick+0x11c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a31      	ldr	r2, [pc, #196]	; (8001644 <xTaskIncrementTick+0x118>)
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	4a31      	ldr	r2, [pc, #196]	; (8001648 <xTaskIncrementTick+0x11c>)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	4b31      	ldr	r3, [pc, #196]	; (800164c <xTaskIncrementTick+0x120>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	3301      	adds	r3, #1
 800158c:	4a2f      	ldr	r2, [pc, #188]	; (800164c <xTaskIncrementTick+0x120>)
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	f000 faa0 	bl	8001ad4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001594:	4b2e      	ldr	r3, [pc, #184]	; (8001650 <xTaskIncrementTick+0x124>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	429a      	cmp	r2, r3
 800159c:	d348      	bcc.n	8001630 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <xTaskIncrementTick+0x118>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d104      	bne.n	80015b2 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80015a8:	4b29      	ldr	r3, [pc, #164]	; (8001650 <xTaskIncrementTick+0x124>)
 80015aa:	f04f 32ff 	mov.w	r2, #4294967295
 80015ae:	601a      	str	r2, [r3, #0]
                    break;
 80015b0:	e03e      	b.n	8001630 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015b2:	4b24      	ldr	r3, [pc, #144]	; (8001644 <xTaskIncrementTick+0x118>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d203      	bcs.n	80015d2 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80015ca:	4a21      	ldr	r2, [pc, #132]	; (8001650 <xTaskIncrementTick+0x124>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80015d0:	e02e      	b.n	8001630 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	3304      	adds	r3, #4
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ffd9 	bl	800058e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d004      	beq.n	80015ee <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	3318      	adds	r3, #24
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ffd0 	bl	800058e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f003 fa7b 	bl	8004aec <SEGGER_SYSVIEW_OnTaskStartReady>
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fa:	2201      	movs	r2, #1
 80015fc:	409a      	lsls	r2, r3
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <xTaskIncrementTick+0x128>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4313      	orrs	r3, r2
 8001604:	4a13      	ldr	r2, [pc, #76]	; (8001654 <xTaskIncrementTick+0x128>)
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4a10      	ldr	r2, [pc, #64]	; (8001658 <xTaskIncrementTick+0x12c>)
 8001616:	441a      	add	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	3304      	adds	r3, #4
 800161c:	4619      	mov	r1, r3
 800161e:	4610      	mov	r0, r2
 8001620:	f7fe ff58 	bl	80004d4 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001624:	e7bb      	b.n	800159e <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001626:	4b0d      	ldr	r3, [pc, #52]	; (800165c <xTaskIncrementTick+0x130>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	3301      	adds	r3, #1
 800162c:	4a0b      	ldr	r2, [pc, #44]	; (800165c <xTaskIncrementTick+0x130>)
 800162e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001630:	697b      	ldr	r3, [r7, #20]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200001d4 	.word	0x200001d4
 8001640:	200001b0 	.word	0x200001b0
 8001644:	20000164 	.word	0x20000164
 8001648:	20000168 	.word	0x20000168
 800164c:	200001c4 	.word	0x200001c4
 8001650:	200001cc 	.word	0x200001cc
 8001654:	200001b4 	.word	0x200001b4
 8001658:	200000d8 	.word	0x200000d8
 800165c:	200001bc 	.word	0x200001bc

08001660 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001666:	4b2d      	ldr	r3, [pc, #180]	; (800171c <vTaskSwitchContext+0xbc>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800166e:	4b2c      	ldr	r3, [pc, #176]	; (8001720 <vTaskSwitchContext+0xc0>)
 8001670:	2201      	movs	r2, #1
 8001672:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001674:	e04d      	b.n	8001712 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8001676:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <vTaskSwitchContext+0xc0>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800167c:	4b29      	ldr	r3, [pc, #164]	; (8001724 <vTaskSwitchContext+0xc4>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	fab3 f383 	clz	r3, r3
 8001688:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800168a:	7afb      	ldrb	r3, [r7, #11]
 800168c:	f1c3 031f 	rsb	r3, r3, #31
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	4925      	ldr	r1, [pc, #148]	; (8001728 <vTaskSwitchContext+0xc8>)
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	4613      	mov	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	440b      	add	r3, r1
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10a      	bne.n	80016bc <vTaskSwitchContext+0x5c>
        __asm volatile
 80016a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016aa:	f383 8811 	msr	BASEPRI, r3
 80016ae:	f3bf 8f6f 	isb	sy
 80016b2:	f3bf 8f4f 	dsb	sy
 80016b6:	607b      	str	r3, [r7, #4]
    }
 80016b8:	bf00      	nop
 80016ba:	e7fe      	b.n	80016ba <vTaskSwitchContext+0x5a>
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4a18      	ldr	r2, [pc, #96]	; (8001728 <vTaskSwitchContext+0xc8>)
 80016c8:	4413      	add	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	3308      	adds	r3, #8
 80016de:	429a      	cmp	r2, r3
 80016e0:	d104      	bne.n	80016ec <vTaskSwitchContext+0x8c>
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	4a0e      	ldr	r2, [pc, #56]	; (800172c <vTaskSwitchContext+0xcc>)
 80016f4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <vTaskSwitchContext+0xcc>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <vTaskSwitchContext+0xd0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d102      	bne.n	8001708 <vTaskSwitchContext+0xa8>
 8001702:	f003 f953 	bl	80049ac <SEGGER_SYSVIEW_OnIdle>
}
 8001706:	e004      	b.n	8001712 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <vTaskSwitchContext+0xcc>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f003 f9ab 	bl	8004a68 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001712:	bf00      	nop
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200001d4 	.word	0x200001d4
 8001720:	200001c0 	.word	0x200001c0
 8001724:	200001b4 	.word	0x200001b4
 8001728:	200000d8 	.word	0x200000d8
 800172c:	200000d4 	.word	0x200000d4
 8001730:	200001d0 	.word	0x200001d0

08001734 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10a      	bne.n	800175a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001748:	f383 8811 	msr	BASEPRI, r3
 800174c:	f3bf 8f6f 	isb	sy
 8001750:	f3bf 8f4f 	dsb	sy
 8001754:	60fb      	str	r3, [r7, #12]
    }
 8001756:	bf00      	nop
 8001758:	e7fe      	b.n	8001758 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <vTaskPlaceOnEventList+0x44>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	3318      	adds	r3, #24
 8001760:	4619      	mov	r1, r3
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7fe feda 	bl	800051c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001768:	2101      	movs	r1, #1
 800176a:	6838      	ldr	r0, [r7, #0]
 800176c:	f000 fa6c 	bl	8001c48 <prvAddCurrentTaskToDelayedList>
}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200000d4 	.word	0x200000d4

0800177c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10a      	bne.n	80017a4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800178e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001792:	f383 8811 	msr	BASEPRI, r3
 8001796:	f3bf 8f6f 	isb	sy
 800179a:	f3bf 8f4f 	dsb	sy
 800179e:	617b      	str	r3, [r7, #20]
    }
 80017a0:	bf00      	nop
 80017a2:	e7fe      	b.n	80017a2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <vTaskPlaceOnEventListRestricted+0x58>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3318      	adds	r3, #24
 80017aa:	4619      	mov	r1, r3
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f7fe fe91 	bl	80004d4 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d002      	beq.n	80017be <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80017b8:	f04f 33ff 	mov.w	r3, #4294967295
 80017bc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80017be:	2024      	movs	r0, #36	; 0x24
 80017c0:	f002 fbf4 	bl	8003fac <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	68b8      	ldr	r0, [r7, #8]
 80017c8:	f000 fa3e 	bl	8001c48 <prvAddCurrentTaskToDelayedList>
    }
 80017cc:	bf00      	nop
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	200000d4 	.word	0x200000d4

080017d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10a      	bne.n	8001804 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80017ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017f2:	f383 8811 	msr	BASEPRI, r3
 80017f6:	f3bf 8f6f 	isb	sy
 80017fa:	f3bf 8f4f 	dsb	sy
 80017fe:	60fb      	str	r3, [r7, #12]
    }
 8001800:	bf00      	nop
 8001802:	e7fe      	b.n	8001802 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	3318      	adds	r3, #24
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fec0 	bl	800058e <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800180e:	4b1f      	ldr	r3, [pc, #124]	; (800188c <xTaskRemoveFromEventList+0xb4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d120      	bne.n	8001858 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	3304      	adds	r3, #4
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe feb7 	bl	800058e <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4618      	mov	r0, r3
 8001824:	f003 f962 	bl	8004aec <SEGGER_SYSVIEW_OnTaskStartReady>
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	2201      	movs	r2, #1
 800182e:	409a      	lsls	r2, r3
 8001830:	4b17      	ldr	r3, [pc, #92]	; (8001890 <xTaskRemoveFromEventList+0xb8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4313      	orrs	r3, r2
 8001836:	4a16      	ldr	r2, [pc, #88]	; (8001890 <xTaskRemoveFromEventList+0xb8>)
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4a13      	ldr	r2, [pc, #76]	; (8001894 <xTaskRemoveFromEventList+0xbc>)
 8001848:	441a      	add	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	3304      	adds	r3, #4
 800184e:	4619      	mov	r1, r3
 8001850:	4610      	mov	r0, r2
 8001852:	f7fe fe3f 	bl	80004d4 <vListInsertEnd>
 8001856:	e005      	b.n	8001864 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	3318      	adds	r3, #24
 800185c:	4619      	mov	r1, r3
 800185e:	480e      	ldr	r0, [pc, #56]	; (8001898 <xTaskRemoveFromEventList+0xc0>)
 8001860:	f7fe fe38 	bl	80004d4 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <xTaskRemoveFromEventList+0xc4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	429a      	cmp	r2, r3
 8001870:	d905      	bls.n	800187e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001872:	2301      	movs	r3, #1
 8001874:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001876:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <xTaskRemoveFromEventList+0xc8>)
 8001878:	2201      	movs	r2, #1
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	e001      	b.n	8001882 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001882:	697b      	ldr	r3, [r7, #20]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200001d4 	.word	0x200001d4
 8001890:	200001b4 	.word	0x200001b4
 8001894:	200000d8 	.word	0x200000d8
 8001898:	2000016c 	.word	0x2000016c
 800189c:	200000d4 	.word	0x200000d4
 80018a0:	200001c0 	.word	0x200001c0

080018a4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <vTaskInternalSetTimeOutState+0x24>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <vTaskInternalSetTimeOutState+0x28>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	605a      	str	r2, [r3, #4]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	200001c4 	.word	0x200001c4
 80018cc:	200001b0 	.word	0x200001b0

080018d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10a      	bne.n	80018f6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80018e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018e4:	f383 8811 	msr	BASEPRI, r3
 80018e8:	f3bf 8f6f 	isb	sy
 80018ec:	f3bf 8f4f 	dsb	sy
 80018f0:	613b      	str	r3, [r7, #16]
    }
 80018f2:	bf00      	nop
 80018f4:	e7fe      	b.n	80018f4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10a      	bne.n	8001912 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80018fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001900:	f383 8811 	msr	BASEPRI, r3
 8001904:	f3bf 8f6f 	isb	sy
 8001908:	f3bf 8f4f 	dsb	sy
 800190c:	60fb      	str	r3, [r7, #12]
    }
 800190e:	bf00      	nop
 8001910:	e7fe      	b.n	8001910 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001912:	f000 fecf 	bl	80026b4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001916:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <xTaskCheckForTimeOut+0xc4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800192e:	d102      	bne.n	8001936 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	e026      	b.n	8001984 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <xTaskCheckForTimeOut+0xc8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d00a      	beq.n	8001958 <xTaskCheckForTimeOut+0x88>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	429a      	cmp	r2, r3
 800194a:	d305      	bcc.n	8001958 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800194c:	2301      	movs	r3, #1
 800194e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	e015      	b.n	8001984 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	429a      	cmp	r2, r3
 8001960:	d20b      	bcs.n	800197a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	1ad2      	subs	r2, r2, r3
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ff98 	bl	80018a4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]
 8001978:	e004      	b.n	8001984 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001980:	2301      	movs	r3, #1
 8001982:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001984:	f000 fec6 	bl	8002714 <vPortExitCritical>

    return xReturn;
 8001988:	69fb      	ldr	r3, [r7, #28]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3720      	adds	r7, #32
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200001b0 	.word	0x200001b0
 8001998:	200001c4 	.word	0x200001c4

0800199c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <vTaskMissedYield+0x14>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	200001c0 	.word	0x200001c0

080019b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80019bc:	f000 f84c 	bl	8001a58 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <prvIdleTask+0x20>)
 80019c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	f3bf 8f4f 	dsb	sy
 80019cc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80019d0:	e7f4      	b.n	80019bc <prvIdleTask+0x8>
 80019d2:	bf00      	nop
 80019d4:	e000ed04 	.word	0xe000ed04

080019d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	e00c      	b.n	80019fe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <prvInitialiseTaskLists+0x60>)
 80019f0:	4413      	add	r3, r2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fd41 	bl	800047a <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3301      	adds	r3, #1
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d9ef      	bls.n	80019e4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001a04:	480d      	ldr	r0, [pc, #52]	; (8001a3c <prvInitialiseTaskLists+0x64>)
 8001a06:	f7fe fd38 	bl	800047a <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001a0a:	480d      	ldr	r0, [pc, #52]	; (8001a40 <prvInitialiseTaskLists+0x68>)
 8001a0c:	f7fe fd35 	bl	800047a <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001a10:	480c      	ldr	r0, [pc, #48]	; (8001a44 <prvInitialiseTaskLists+0x6c>)
 8001a12:	f7fe fd32 	bl	800047a <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001a16:	480c      	ldr	r0, [pc, #48]	; (8001a48 <prvInitialiseTaskLists+0x70>)
 8001a18:	f7fe fd2f 	bl	800047a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001a1c:	480b      	ldr	r0, [pc, #44]	; (8001a4c <prvInitialiseTaskLists+0x74>)
 8001a1e:	f7fe fd2c 	bl	800047a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <prvInitialiseTaskLists+0x78>)
 8001a24:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <prvInitialiseTaskLists+0x64>)
 8001a26:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <prvInitialiseTaskLists+0x7c>)
 8001a2a:	4a05      	ldr	r2, [pc, #20]	; (8001a40 <prvInitialiseTaskLists+0x68>)
 8001a2c:	601a      	str	r2, [r3, #0]
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200000d8 	.word	0x200000d8
 8001a3c:	2000013c 	.word	0x2000013c
 8001a40:	20000150 	.word	0x20000150
 8001a44:	2000016c 	.word	0x2000016c
 8001a48:	20000180 	.word	0x20000180
 8001a4c:	20000198 	.word	0x20000198
 8001a50:	20000164 	.word	0x20000164
 8001a54:	20000168 	.word	0x20000168

08001a58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a5e:	e019      	b.n	8001a94 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001a60:	f000 fe28 	bl	80026b4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a64:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <prvCheckTasksWaitingTermination+0x50>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3304      	adds	r3, #4
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fd8c 	bl	800058e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <prvCheckTasksWaitingTermination+0x54>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <prvCheckTasksWaitingTermination+0x54>)
 8001a7e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <prvCheckTasksWaitingTermination+0x58>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <prvCheckTasksWaitingTermination+0x58>)
 8001a88:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001a8a:	f000 fe43 	bl	8002714 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f810 	bl	8001ab4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <prvCheckTasksWaitingTermination+0x58>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1e1      	bne.n	8001a60 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000180 	.word	0x20000180
 8001aac:	200001ac 	.word	0x200001ac
 8001ab0:	20000194 	.word	0x20000194

08001ab4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f001 f803 	bl	8002acc <vPortFree>
                vPortFree( pxTCB );
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f001 f800 	bl	8002acc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <prvResetNextTaskUnblockTime+0x30>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d104      	bne.n	8001aec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <prvResetNextTaskUnblockTime+0x34>)
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001aea:	e005      	b.n	8001af8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <prvResetNextTaskUnblockTime+0x30>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <prvResetNextTaskUnblockTime+0x34>)
 8001af6:	6013      	str	r3, [r2, #0]
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000164 	.word	0x20000164
 8001b08:	200001cc 	.word	0x200001cc

08001b0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <xTaskGetSchedulerState+0x34>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d102      	bne.n	8001b20 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	e008      	b.n	8001b32 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <xTaskGetSchedulerState+0x38>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d102      	bne.n	8001b2e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	e001      	b.n	8001b32 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001b32:	687b      	ldr	r3, [r7, #4]
    }
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	200001b8 	.word	0x200001b8
 8001b44:	200001d4 	.word	0x200001d4

08001b48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d068      	beq.n	8001c30 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001b5e:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <xTaskPriorityDisinherit+0xf4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d00a      	beq.n	8001b7e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8001b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b6c:	f383 8811 	msr	BASEPRI, r3
 8001b70:	f3bf 8f6f 	isb	sy
 8001b74:	f3bf 8f4f 	dsb	sy
 8001b78:	60fb      	str	r3, [r7, #12]
    }
 8001b7a:	bf00      	nop
 8001b7c:	e7fe      	b.n	8001b7c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10a      	bne.n	8001b9c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8001b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b8a:	f383 8811 	msr	BASEPRI, r3
 8001b8e:	f3bf 8f6f 	isb	sy
 8001b92:	f3bf 8f4f 	dsb	sy
 8001b96:	60bb      	str	r3, [r7, #8]
    }
 8001b98:	bf00      	nop
 8001b9a:	e7fe      	b.n	8001b9a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba0:	1e5a      	subs	r2, r3, #1
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d03e      	beq.n	8001c30 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d13a      	bne.n	8001c30 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fce5 	bl	800058e <uxListRemove>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10a      	bne.n	8001be0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bce:	2201      	movs	r2, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43da      	mvns	r2, r3
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <xTaskPriorityDisinherit+0xf8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	4a18      	ldr	r2, [pc, #96]	; (8001c40 <xTaskPriorityDisinherit+0xf8>)
 8001bde:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4619      	mov	r1, r3
 8001be4:	204a      	movs	r0, #74	; 0x4a
 8001be6:	f002 f9ff 	bl	8003fe8 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf6:	f1c3 0205 	rsb	r2, r3, #5
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c02:	2201      	movs	r2, #1
 8001c04:	409a      	lsls	r2, r3
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <xTaskPriorityDisinherit+0xf8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	4a0c      	ldr	r2, [pc, #48]	; (8001c40 <xTaskPriorityDisinherit+0xf8>)
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <xTaskPriorityDisinherit+0xfc>)
 8001c1e:	441a      	add	r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	3304      	adds	r3, #4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4610      	mov	r0, r2
 8001c28:	f7fe fc54 	bl	80004d4 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001c30:	697b      	ldr	r3, [r7, #20]
    }
 8001c32:	4618      	mov	r0, r3
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200000d4 	.word	0x200000d4
 8001c40:	200001b4 	.word	0x200001b4
 8001c44:	200000d8 	.word	0x200000d8

08001c48 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001c52:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <prvAddCurrentTaskToDelayedList+0xd4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c58:	4b31      	ldr	r3, [pc, #196]	; (8001d20 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc95 	bl	800058e <uxListRemove>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10b      	bne.n	8001c82 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	2201      	movs	r2, #1
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43da      	mvns	r2, r3
 8001c78:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	4a29      	ldr	r2, [pc, #164]	; (8001d24 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001c80:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c88:	d110      	bne.n	8001cac <prvAddCurrentTaskToDelayedList+0x64>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00d      	beq.n	8001cac <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001c90:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	211b      	movs	r1, #27
 8001c96:	4618      	mov	r0, r3
 8001c98:	f002 ff6a 	bl	8004b70 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c9c:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4820      	ldr	r0, [pc, #128]	; (8001d28 <prvAddCurrentTaskToDelayedList+0xe0>)
 8001ca6:	f7fe fc15 	bl	80004d4 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001caa:	e032      	b.n	8001d12 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d20f      	bcs.n	8001ce4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2104      	movs	r1, #4
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f002 ff50 	bl	8004b70 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001cd0:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <prvAddCurrentTaskToDelayedList+0xe4>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4610      	mov	r0, r2
 8001cde:	f7fe fc1d 	bl	800051c <vListInsert>
}
 8001ce2:	e016      	b.n	8001d12 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2104      	movs	r1, #4
 8001cea:	4618      	mov	r0, r3
 8001cec:	f002 ff40 	bl	8004b70 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	f7fe fc0d 	bl	800051c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001d02:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <prvAddCurrentTaskToDelayedList+0xec>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d202      	bcs.n	8001d12 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8001d0c:	4a09      	ldr	r2, [pc, #36]	; (8001d34 <prvAddCurrentTaskToDelayedList+0xec>)
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	6013      	str	r3, [r2, #0]
}
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200001b0 	.word	0x200001b0
 8001d20:	200000d4 	.word	0x200000d4
 8001d24:	200001b4 	.word	0x200001b4
 8001d28:	20000198 	.word	0x20000198
 8001d2c:	20000168 	.word	0x20000168
 8001d30:	20000164 	.word	0x20000164
 8001d34:	200001cc 	.word	0x200001cc

08001d38 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001d42:	f000 fad5 	bl	80022f0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <xTimerCreateTimerTask+0x54>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <xTimerCreateTimerTask+0x58>)
 8001d50:	9301      	str	r3, [sp, #4]
 8001d52:	2302      	movs	r3, #2
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2300      	movs	r3, #0
 8001d58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d5c:	490d      	ldr	r1, [pc, #52]	; (8001d94 <xTimerCreateTimerTask+0x5c>)
 8001d5e:	480e      	ldr	r0, [pc, #56]	; (8001d98 <xTimerCreateTimerTask+0x60>)
 8001d60:	f7ff f96a 	bl	8001038 <xTaskCreate>
 8001d64:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10a      	bne.n	8001d82 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8001d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d70:	f383 8811 	msr	BASEPRI, r3
 8001d74:	f3bf 8f6f 	isb	sy
 8001d78:	f3bf 8f4f 	dsb	sy
 8001d7c:	603b      	str	r3, [r7, #0]
    }
 8001d7e:	bf00      	nop
 8001d80:	e7fe      	b.n	8001d80 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8001d82:	687b      	ldr	r3, [r7, #4]
    }
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000208 	.word	0x20000208
 8001d90:	2000020c 	.word	0x2000020c
 8001d94:	08005a30 	.word	0x08005a30
 8001d98:	08001ed1 	.word	0x08001ed1

08001d9c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10a      	bne.n	8001dca <xTimerGenericCommand+0x2e>
        __asm volatile
 8001db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db8:	f383 8811 	msr	BASEPRI, r3
 8001dbc:	f3bf 8f6f 	isb	sy
 8001dc0:	f3bf 8f4f 	dsb	sy
 8001dc4:	623b      	str	r3, [r7, #32]
    }
 8001dc6:	bf00      	nop
 8001dc8:	e7fe      	b.n	8001dc8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8001dca:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <xTimerGenericCommand+0x98>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d02a      	beq.n	8001e28 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b05      	cmp	r3, #5
 8001de2:	dc18      	bgt.n	8001e16 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001de4:	f7ff fe92 	bl	8001b0c <xTaskGetSchedulerState>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d109      	bne.n	8001e02 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <xTimerGenericCommand+0x98>)
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	f107 0114 	add.w	r1, r7, #20
 8001df6:	2300      	movs	r3, #0
 8001df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dfa:	f7fe fcd5 	bl	80007a8 <xQueueGenericSend>
 8001dfe:	6278      	str	r0, [r7, #36]	; 0x24
 8001e00:	e012      	b.n	8001e28 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001e02:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <xTimerGenericCommand+0x98>)
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	f107 0114 	add.w	r1, r7, #20
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f7fe fccb 	bl	80007a8 <xQueueGenericSend>
 8001e12:	6278      	str	r0, [r7, #36]	; 0x24
 8001e14:	e008      	b.n	8001e28 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <xTimerGenericCommand+0x98>)
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	f107 0114 	add.w	r1, r7, #20
 8001e1e:	2300      	movs	r3, #0
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	f7fe fdcf 	bl	80009c4 <xQueueGenericSendFromISR>
 8001e26:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3728      	adds	r7, #40	; 0x28
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000208 	.word	0x20000208

08001e38 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af02      	add	r7, sp, #8
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e42:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <prvProcessExpiredTimer+0x94>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	3304      	adds	r3, #4
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fb9c 	bl	800058e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d022      	beq.n	8001eaa <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	699a      	ldr	r2, [r3, #24]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	18d1      	adds	r1, r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	6978      	ldr	r0, [r7, #20]
 8001e72:	f000 f8d1 	bl	8002018 <prvInsertTimerInActiveList>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d01f      	beq.n	8001ebc <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	2300      	movs	r3, #0
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	2100      	movs	r1, #0
 8001e86:	6978      	ldr	r0, [r7, #20]
 8001e88:	f7ff ff88 	bl	8001d9c <xTimerGenericCommand>
 8001e8c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d113      	bne.n	8001ebc <prvProcessExpiredTimer+0x84>
        __asm volatile
 8001e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e98:	f383 8811 	msr	BASEPRI, r3
 8001e9c:	f3bf 8f6f 	isb	sy
 8001ea0:	f3bf 8f4f 	dsb	sy
 8001ea4:	60fb      	str	r3, [r7, #12]
    }
 8001ea6:	bf00      	nop
 8001ea8:	e7fe      	b.n	8001ea8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	6978      	ldr	r0, [r7, #20]
 8001ec2:	4798      	blx	r3
    }
 8001ec4:	bf00      	nop
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000200 	.word	0x20000200

08001ed0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001ed8:	f107 0308 	add.w	r3, r7, #8
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 f857 	bl	8001f90 <prvGetNextExpireTime>
 8001ee2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 f803 	bl	8001ef4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001eee:	f000 f8d5 	bl	800209c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001ef2:	e7f1      	b.n	8001ed8 <prvTimerTask+0x8>

08001ef4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001efe:	f7ff fa53 	bl	80013a8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001f02:	f107 0308 	add.w	r3, r7, #8
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 f866 	bl	8001fd8 <prvSampleTimeNow>
 8001f0c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d130      	bne.n	8001f76 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10a      	bne.n	8001f30 <prvProcessTimerOrBlockTask+0x3c>
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d806      	bhi.n	8001f30 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001f22:	f7ff fa4f 	bl	80013c4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001f26:	68f9      	ldr	r1, [r7, #12]
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ff85 	bl	8001e38 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001f2e:	e024      	b.n	8001f7a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d008      	beq.n	8001f48 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <prvProcessTimerOrBlockTask+0x90>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <prvProcessTimerOrBlockTask+0x50>
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <prvProcessTimerOrBlockTask+0x52>
 8001f44:	2300      	movs	r3, #0
 8001f46:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001f48:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <prvProcessTimerOrBlockTask+0x94>)
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	4619      	mov	r1, r3
 8001f56:	f7ff f83b 	bl	8000fd0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001f5a:	f7ff fa33 	bl	80013c4 <xTaskResumeAll>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10a      	bne.n	8001f7a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <prvProcessTimerOrBlockTask+0x98>)
 8001f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	f3bf 8f4f 	dsb	sy
 8001f70:	f3bf 8f6f 	isb	sy
    }
 8001f74:	e001      	b.n	8001f7a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001f76:	f7ff fa25 	bl	80013c4 <xTaskResumeAll>
    }
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000204 	.word	0x20000204
 8001f88:	20000208 	.word	0x20000208
 8001f8c:	e000ed04 	.word	0xe000ed04

08001f90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001f98:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <prvGetNextExpireTime+0x44>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <prvGetNextExpireTime+0x16>
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	e000      	b.n	8001fa8 <prvGetNextExpireTime+0x18>
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d105      	bne.n	8001fc0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001fb4:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <prvGetNextExpireTime+0x44>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	e001      	b.n	8001fc4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
    }
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000200 	.word	0x20000200

08001fd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8001fe0:	f7ff fa82 	bl	80014e8 <xTaskGetTickCount>
 8001fe4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <prvSampleTimeNow+0x3c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d205      	bcs.n	8001ffc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001ff0:	f000 f91a 	bl	8002228 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	e002      	b.n	8002002 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002002:	4a04      	ldr	r2, [pc, #16]	; (8002014 <prvSampleTimeNow+0x3c>)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002008:	68fb      	ldr	r3, [r7, #12]
    }
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000210 	.word	0x20000210

08002018 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	429a      	cmp	r2, r3
 800203c:	d812      	bhi.n	8002064 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	1ad2      	subs	r2, r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	429a      	cmp	r2, r3
 800204a:	d302      	bcc.n	8002052 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800204c:	2301      	movs	r3, #1
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	e01b      	b.n	800208a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <prvInsertTimerInActiveList+0x7c>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3304      	adds	r3, #4
 800205a:	4619      	mov	r1, r3
 800205c:	4610      	mov	r0, r2
 800205e:	f7fe fa5d 	bl	800051c <vListInsert>
 8002062:	e012      	b.n	800208a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d206      	bcs.n	800207a <prvInsertTimerInActiveList+0x62>
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d302      	bcc.n	800207a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002074:	2301      	movs	r3, #1
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	e007      	b.n	800208a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <prvInsertTimerInActiveList+0x80>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	3304      	adds	r3, #4
 8002082:	4619      	mov	r1, r3
 8002084:	4610      	mov	r0, r2
 8002086:	f7fe fa49 	bl	800051c <vListInsert>
            }
        }

        return xProcessTimerNow;
 800208a:	697b      	ldr	r3, [r7, #20]
    }
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000204 	.word	0x20000204
 8002098:	20000200 	.word	0x20000200

0800209c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800209c:	b580      	push	{r7, lr}
 800209e:	b08c      	sub	sp, #48	; 0x30
 80020a0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80020a2:	e0ae      	b.n	8002202 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f2c0 80aa 	blt.w	8002200 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d004      	beq.n	80020c2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	3304      	adds	r3, #4
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fa66 	bl	800058e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff87 	bl	8001fd8 <prvSampleTimeNow>
 80020ca:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2b09      	cmp	r3, #9
 80020d0:	f200 8097 	bhi.w	8002202 <prvProcessReceivedCommands+0x166>
 80020d4:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <prvProcessReceivedCommands+0x40>)
 80020d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020da:	bf00      	nop
 80020dc:	08002105 	.word	0x08002105
 80020e0:	08002105 	.word	0x08002105
 80020e4:	08002105 	.word	0x08002105
 80020e8:	08002179 	.word	0x08002179
 80020ec:	0800218d 	.word	0x0800218d
 80020f0:	080021d7 	.word	0x080021d7
 80020f4:	08002105 	.word	0x08002105
 80020f8:	08002105 	.word	0x08002105
 80020fc:	08002179 	.word	0x08002179
 8002100:	0800218d 	.word	0x0800218d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	b2da      	uxtb	r2, r3
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	18d1      	adds	r1, r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6a3a      	ldr	r2, [r7, #32]
 8002122:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002124:	f7ff ff78 	bl	8002018 <prvInsertTimerInActiveList>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d069      	beq.n	8002202 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002134:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d05e      	beq.n	8002202 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	441a      	add	r2, r3
 800214c:	2300      	movs	r3, #0
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2300      	movs	r3, #0
 8002152:	2100      	movs	r1, #0
 8002154:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002156:	f7ff fe21 	bl	8001d9c <xTimerGenericCommand>
 800215a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d14f      	bne.n	8002202 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8002162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002166:	f383 8811 	msr	BASEPRI, r3
 800216a:	f3bf 8f6f 	isb	sy
 800216e:	f3bf 8f4f 	dsb	sy
 8002172:	61bb      	str	r3, [r7, #24]
    }
 8002174:	bf00      	nop
 8002176:	e7fe      	b.n	8002176 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800217e:	f023 0301 	bic.w	r3, r3, #1
 8002182:	b2da      	uxtb	r2, r3
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800218a:	e03a      	b.n	8002202 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	b2da      	uxtb	r2, r3
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10a      	bne.n	80021c2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80021ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b0:	f383 8811 	msr	BASEPRI, r3
 80021b4:	f3bf 8f6f 	isb	sy
 80021b8:	f3bf 8f4f 	dsb	sy
 80021bc:	617b      	str	r3, [r7, #20]
    }
 80021be:	bf00      	nop
 80021c0:	e7fe      	b.n	80021c0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	699a      	ldr	r2, [r3, #24]
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	18d1      	adds	r1, r2, r3
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	6a3a      	ldr	r2, [r7, #32]
 80021ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021d0:	f7ff ff22 	bl	8002018 <prvInsertTimerInActiveList>
                        break;
 80021d4:	e015      	b.n	8002202 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d103      	bne.n	80021ec <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80021e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021e6:	f000 fc71 	bl	8002acc <vPortFree>
 80021ea:	e00a      	b.n	8002202 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021f2:	f023 0301 	bic.w	r3, r3, #1
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80021fe:	e000      	b.n	8002202 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002200:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002202:	4b08      	ldr	r3, [pc, #32]	; (8002224 <prvProcessReceivedCommands+0x188>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f107 0108 	add.w	r1, r7, #8
 800220a:	2200      	movs	r2, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe fc97 	bl	8000b40 <xQueueReceive>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	f47f af45 	bne.w	80020a4 <prvProcessReceivedCommands+0x8>
        }
    }
 800221a:	bf00      	nop
 800221c:	bf00      	nop
 800221e:	3728      	adds	r7, #40	; 0x28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000208 	.word	0x20000208

08002228 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800222e:	e048      	b.n	80022c2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002230:	4b2d      	ldr	r3, [pc, #180]	; (80022e8 <prvSwitchTimerLists+0xc0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800223a:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <prvSwitchTimerLists+0xc0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	3304      	adds	r3, #4
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe f9a0 	bl	800058e <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d02e      	beq.n	80022c2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4413      	add	r3, r2
 800226c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	429a      	cmp	r2, r3
 8002274:	d90e      	bls.n	8002294 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002282:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <prvSwitchTimerLists+0xc0>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	3304      	adds	r3, #4
 800228a:	4619      	mov	r1, r3
 800228c:	4610      	mov	r0, r2
 800228e:	f7fe f945 	bl	800051c <vListInsert>
 8002292:	e016      	b.n	80022c2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002294:	2300      	movs	r3, #0
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	2300      	movs	r3, #0
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	2100      	movs	r1, #0
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f7ff fd7c 	bl	8001d9c <xTimerGenericCommand>
 80022a4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10a      	bne.n	80022c2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80022ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b0:	f383 8811 	msr	BASEPRI, r3
 80022b4:	f3bf 8f6f 	isb	sy
 80022b8:	f3bf 8f4f 	dsb	sy
 80022bc:	603b      	str	r3, [r7, #0]
    }
 80022be:	bf00      	nop
 80022c0:	e7fe      	b.n	80022c0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <prvSwitchTimerLists+0xc0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1b1      	bne.n	8002230 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <prvSwitchTimerLists+0xc0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <prvSwitchTimerLists+0xc4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <prvSwitchTimerLists+0xc0>)
 80022d8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80022da:	4a04      	ldr	r2, [pc, #16]	; (80022ec <prvSwitchTimerLists+0xc4>)
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	6013      	str	r3, [r2, #0]
    }
 80022e0:	bf00      	nop
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000200 	.word	0x20000200
 80022ec:	20000204 	.word	0x20000204

080022f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80022f4:	f000 f9de 	bl	80026b4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <prvCheckForValidListAndQueue+0x54>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d11d      	bne.n	800233c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002300:	4811      	ldr	r0, [pc, #68]	; (8002348 <prvCheckForValidListAndQueue+0x58>)
 8002302:	f7fe f8ba 	bl	800047a <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002306:	4811      	ldr	r0, [pc, #68]	; (800234c <prvCheckForValidListAndQueue+0x5c>)
 8002308:	f7fe f8b7 	bl	800047a <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800230c:	4b10      	ldr	r3, [pc, #64]	; (8002350 <prvCheckForValidListAndQueue+0x60>)
 800230e:	4a0e      	ldr	r2, [pc, #56]	; (8002348 <prvCheckForValidListAndQueue+0x58>)
 8002310:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002312:	4b10      	ldr	r3, [pc, #64]	; (8002354 <prvCheckForValidListAndQueue+0x64>)
 8002314:	4a0d      	ldr	r2, [pc, #52]	; (800234c <prvCheckForValidListAndQueue+0x5c>)
 8002316:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002318:	2200      	movs	r2, #0
 800231a:	210c      	movs	r1, #12
 800231c:	200a      	movs	r0, #10
 800231e:	f7fe f9bb 	bl	8000698 <xQueueGenericCreate>
 8002322:	4603      	mov	r3, r0
 8002324:	4a07      	ldr	r2, [pc, #28]	; (8002344 <prvCheckForValidListAndQueue+0x54>)
 8002326:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <prvCheckForValidListAndQueue+0x54>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <prvCheckForValidListAndQueue+0x54>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4908      	ldr	r1, [pc, #32]	; (8002358 <prvCheckForValidListAndQueue+0x68>)
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe fe18 	bl	8000f6c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800233c:	f000 f9ea 	bl	8002714 <vPortExitCritical>
    }
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000208 	.word	0x20000208
 8002348:	200001d8 	.word	0x200001d8
 800234c:	200001ec 	.word	0x200001ec
 8002350:	20000200 	.word	0x20000200
 8002354:	20000204 	.word	0x20000204
 8002358:	08005a38 	.word	0x08005a38

0800235c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3b04      	subs	r3, #4
 800236c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002374:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3b04      	subs	r3, #4
 800237a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f023 0201 	bic.w	r2, r3, #1
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	3b04      	subs	r3, #4
 800238a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800238c:	4a0c      	ldr	r2, [pc, #48]	; (80023c0 <pxPortInitialiseStack+0x64>)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	3b14      	subs	r3, #20
 8002396:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	3b04      	subs	r3, #4
 80023a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f06f 0202 	mvn.w	r2, #2
 80023aa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	3b20      	subs	r3, #32
 80023b0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80023b2:	68fb      	ldr	r3, [r7, #12]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	080023c5 	.word	0x080023c5

080023c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80023ce:	4b12      	ldr	r3, [pc, #72]	; (8002418 <prvTaskExitError+0x54>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d6:	d00a      	beq.n	80023ee <prvTaskExitError+0x2a>
        __asm volatile
 80023d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023dc:	f383 8811 	msr	BASEPRI, r3
 80023e0:	f3bf 8f6f 	isb	sy
 80023e4:	f3bf 8f4f 	dsb	sy
 80023e8:	60fb      	str	r3, [r7, #12]
    }
 80023ea:	bf00      	nop
 80023ec:	e7fe      	b.n	80023ec <prvTaskExitError+0x28>
        __asm volatile
 80023ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f2:	f383 8811 	msr	BASEPRI, r3
 80023f6:	f3bf 8f6f 	isb	sy
 80023fa:	f3bf 8f4f 	dsb	sy
 80023fe:	60bb      	str	r3, [r7, #8]
    }
 8002400:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002402:	bf00      	nop
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0fc      	beq.n	8002404 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800240a:	bf00      	nop
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	20000008 	.word	0x20000008
 800241c:	00000000 	.word	0x00000000

08002420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002420:	4b07      	ldr	r3, [pc, #28]	; (8002440 <pxCurrentTCBConst2>)
 8002422:	6819      	ldr	r1, [r3, #0]
 8002424:	6808      	ldr	r0, [r1, #0]
 8002426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800242a:	f380 8809 	msr	PSP, r0
 800242e:	f3bf 8f6f 	isb	sy
 8002432:	f04f 0000 	mov.w	r0, #0
 8002436:	f380 8811 	msr	BASEPRI, r0
 800243a:	4770      	bx	lr
 800243c:	f3af 8000 	nop.w

08002440 <pxCurrentTCBConst2>:
 8002440:	200000d4 	.word	0x200000d4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop

08002448 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002448:	4808      	ldr	r0, [pc, #32]	; (800246c <prvPortStartFirstTask+0x24>)
 800244a:	6800      	ldr	r0, [r0, #0]
 800244c:	6800      	ldr	r0, [r0, #0]
 800244e:	f380 8808 	msr	MSP, r0
 8002452:	f04f 0000 	mov.w	r0, #0
 8002456:	f380 8814 	msr	CONTROL, r0
 800245a:	b662      	cpsie	i
 800245c:	b661      	cpsie	f
 800245e:	f3bf 8f4f 	dsb	sy
 8002462:	f3bf 8f6f 	isb	sy
 8002466:	df00      	svc	0
 8002468:	bf00      	nop
 800246a:	0000      	.short	0x0000
 800246c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop

08002474 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800247a:	4b46      	ldr	r3, [pc, #280]	; (8002594 <xPortStartScheduler+0x120>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a46      	ldr	r2, [pc, #280]	; (8002598 <xPortStartScheduler+0x124>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d10a      	bne.n	800249a <xPortStartScheduler+0x26>
        __asm volatile
 8002484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002488:	f383 8811 	msr	BASEPRI, r3
 800248c:	f3bf 8f6f 	isb	sy
 8002490:	f3bf 8f4f 	dsb	sy
 8002494:	613b      	str	r3, [r7, #16]
    }
 8002496:	bf00      	nop
 8002498:	e7fe      	b.n	8002498 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800249a:	4b3e      	ldr	r3, [pc, #248]	; (8002594 <xPortStartScheduler+0x120>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a3f      	ldr	r2, [pc, #252]	; (800259c <xPortStartScheduler+0x128>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d10a      	bne.n	80024ba <xPortStartScheduler+0x46>
        __asm volatile
 80024a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a8:	f383 8811 	msr	BASEPRI, r3
 80024ac:	f3bf 8f6f 	isb	sy
 80024b0:	f3bf 8f4f 	dsb	sy
 80024b4:	60fb      	str	r3, [r7, #12]
    }
 80024b6:	bf00      	nop
 80024b8:	e7fe      	b.n	80024b8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80024ba:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <xPortStartScheduler+0x12c>)
 80024bc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	22ff      	movs	r2, #255	; 0xff
 80024ca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4b31      	ldr	r3, [pc, #196]	; (80025a4 <xPortStartScheduler+0x130>)
 80024e0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80024e2:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <xPortStartScheduler+0x134>)
 80024e4:	2207      	movs	r2, #7
 80024e6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80024e8:	e009      	b.n	80024fe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80024ea:	4b2f      	ldr	r3, [pc, #188]	; (80025a8 <xPortStartScheduler+0x134>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	4a2d      	ldr	r2, [pc, #180]	; (80025a8 <xPortStartScheduler+0x134>)
 80024f2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80024fe:	78fb      	ldrb	r3, [r7, #3]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002506:	2b80      	cmp	r3, #128	; 0x80
 8002508:	d0ef      	beq.n	80024ea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800250a:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <xPortStartScheduler+0x134>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f1c3 0307 	rsb	r3, r3, #7
 8002512:	2b04      	cmp	r3, #4
 8002514:	d00a      	beq.n	800252c <xPortStartScheduler+0xb8>
        __asm volatile
 8002516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251a:	f383 8811 	msr	BASEPRI, r3
 800251e:	f3bf 8f6f 	isb	sy
 8002522:	f3bf 8f4f 	dsb	sy
 8002526:	60bb      	str	r3, [r7, #8]
    }
 8002528:	bf00      	nop
 800252a:	e7fe      	b.n	800252a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800252c:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <xPortStartScheduler+0x134>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	021b      	lsls	r3, r3, #8
 8002532:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <xPortStartScheduler+0x134>)
 8002534:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002536:	4b1c      	ldr	r3, [pc, #112]	; (80025a8 <xPortStartScheduler+0x134>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800253e:	4a1a      	ldr	r2, [pc, #104]	; (80025a8 <xPortStartScheduler+0x134>)
 8002540:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800254a:	4b18      	ldr	r3, [pc, #96]	; (80025ac <xPortStartScheduler+0x138>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a17      	ldr	r2, [pc, #92]	; (80025ac <xPortStartScheduler+0x138>)
 8002550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002554:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <xPortStartScheduler+0x138>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a14      	ldr	r2, [pc, #80]	; (80025ac <xPortStartScheduler+0x138>)
 800255c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002560:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002562:	f000 f963 	bl	800282c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002566:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <xPortStartScheduler+0x13c>)
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800256c:	f000 f982 	bl	8002874 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002570:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <xPortStartScheduler+0x140>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a0f      	ldr	r2, [pc, #60]	; (80025b4 <xPortStartScheduler+0x140>)
 8002576:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800257a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800257c:	f7ff ff64 	bl	8002448 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002580:	f7ff f86e 	bl	8001660 <vTaskSwitchContext>
    prvTaskExitError();
 8002584:	f7ff ff1e 	bl	80023c4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	e000ed00 	.word	0xe000ed00
 8002598:	410fc271 	.word	0x410fc271
 800259c:	410fc270 	.word	0x410fc270
 80025a0:	e000e400 	.word	0xe000e400
 80025a4:	20000214 	.word	0x20000214
 80025a8:	20000218 	.word	0x20000218
 80025ac:	e000ed20 	.word	0xe000ed20
 80025b0:	20000008 	.word	0x20000008
 80025b4:	e000ef34 	.word	0xe000ef34

080025b8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80025be:	4b37      	ldr	r3, [pc, #220]	; (800269c <vInitPrioGroupValue+0xe4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a37      	ldr	r2, [pc, #220]	; (80026a0 <vInitPrioGroupValue+0xe8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d10a      	bne.n	80025de <vInitPrioGroupValue+0x26>
        __asm volatile
 80025c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025cc:	f383 8811 	msr	BASEPRI, r3
 80025d0:	f3bf 8f6f 	isb	sy
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	613b      	str	r3, [r7, #16]
    }
 80025da:	bf00      	nop
 80025dc:	e7fe      	b.n	80025dc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80025de:	4b2f      	ldr	r3, [pc, #188]	; (800269c <vInitPrioGroupValue+0xe4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a30      	ldr	r2, [pc, #192]	; (80026a4 <vInitPrioGroupValue+0xec>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d10a      	bne.n	80025fe <vInitPrioGroupValue+0x46>
        __asm volatile
 80025e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ec:	f383 8811 	msr	BASEPRI, r3
 80025f0:	f3bf 8f6f 	isb	sy
 80025f4:	f3bf 8f4f 	dsb	sy
 80025f8:	60fb      	str	r3, [r7, #12]
    }
 80025fa:	bf00      	nop
 80025fc:	e7fe      	b.n	80025fc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80025fe:	4b2a      	ldr	r3, [pc, #168]	; (80026a8 <vInitPrioGroupValue+0xf0>)
 8002600:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	22ff      	movs	r2, #255	; 0xff
 800260e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4b22      	ldr	r3, [pc, #136]	; (80026ac <vInitPrioGroupValue+0xf4>)
 8002624:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002626:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <vInitPrioGroupValue+0xf8>)
 8002628:	2207      	movs	r2, #7
 800262a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800262c:	e009      	b.n	8002642 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <vInitPrioGroupValue+0xf8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	3b01      	subs	r3, #1
 8002634:	4a1e      	ldr	r2, [pc, #120]	; (80026b0 <vInitPrioGroupValue+0xf8>)
 8002636:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	b2db      	uxtb	r3, r3
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	b2db      	uxtb	r3, r3
 8002640:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002642:	78fb      	ldrb	r3, [r7, #3]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264a:	2b80      	cmp	r3, #128	; 0x80
 800264c:	d0ef      	beq.n	800262e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800264e:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <vInitPrioGroupValue+0xf8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f1c3 0307 	rsb	r3, r3, #7
 8002656:	2b04      	cmp	r3, #4
 8002658:	d00a      	beq.n	8002670 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800265a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265e:	f383 8811 	msr	BASEPRI, r3
 8002662:	f3bf 8f6f 	isb	sy
 8002666:	f3bf 8f4f 	dsb	sy
 800266a:	60bb      	str	r3, [r7, #8]
    }
 800266c:	bf00      	nop
 800266e:	e7fe      	b.n	800266e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002670:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <vInitPrioGroupValue+0xf8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	021b      	lsls	r3, r3, #8
 8002676:	4a0e      	ldr	r2, [pc, #56]	; (80026b0 <vInitPrioGroupValue+0xf8>)
 8002678:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <vInitPrioGroupValue+0xf8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002682:	4a0b      	ldr	r2, [pc, #44]	; (80026b0 <vInitPrioGroupValue+0xf8>)
 8002684:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	b2da      	uxtb	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800268e:	bf00      	nop
 8002690:	371c      	adds	r7, #28
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000ed00 	.word	0xe000ed00
 80026a0:	410fc271 	.word	0x410fc271
 80026a4:	410fc270 	.word	0x410fc270
 80026a8:	e000e400 	.word	0xe000e400
 80026ac:	20000214 	.word	0x20000214
 80026b0:	20000218 	.word	0x20000218

080026b4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
        __asm volatile
 80026ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026be:	f383 8811 	msr	BASEPRI, r3
 80026c2:	f3bf 8f6f 	isb	sy
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	607b      	str	r3, [r7, #4]
    }
 80026cc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80026ce:	4b0f      	ldr	r3, [pc, #60]	; (800270c <vPortEnterCritical+0x58>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	3301      	adds	r3, #1
 80026d4:	4a0d      	ldr	r2, [pc, #52]	; (800270c <vPortEnterCritical+0x58>)
 80026d6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <vPortEnterCritical+0x58>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d10f      	bne.n	8002700 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <vPortEnterCritical+0x5c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <vPortEnterCritical+0x4c>
        __asm volatile
 80026ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ee:	f383 8811 	msr	BASEPRI, r3
 80026f2:	f3bf 8f6f 	isb	sy
 80026f6:	f3bf 8f4f 	dsb	sy
 80026fa:	603b      	str	r3, [r7, #0]
    }
 80026fc:	bf00      	nop
 80026fe:	e7fe      	b.n	80026fe <vPortEnterCritical+0x4a>
    }
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	20000008 	.word	0x20000008
 8002710:	e000ed04 	.word	0xe000ed04

08002714 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <vPortExitCritical+0x50>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10a      	bne.n	8002738 <vPortExitCritical+0x24>
        __asm volatile
 8002722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002726:	f383 8811 	msr	BASEPRI, r3
 800272a:	f3bf 8f6f 	isb	sy
 800272e:	f3bf 8f4f 	dsb	sy
 8002732:	607b      	str	r3, [r7, #4]
    }
 8002734:	bf00      	nop
 8002736:	e7fe      	b.n	8002736 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002738:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <vPortExitCritical+0x50>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	3b01      	subs	r3, #1
 800273e:	4a09      	ldr	r2, [pc, #36]	; (8002764 <vPortExitCritical+0x50>)
 8002740:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <vPortExitCritical+0x50>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d105      	bne.n	8002756 <vPortExitCritical+0x42>
 800274a:	2300      	movs	r3, #0
 800274c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	f383 8811 	msr	BASEPRI, r3
    }
 8002754:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20000008 	.word	0x20000008
	...

08002770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002770:	f3ef 8009 	mrs	r0, PSP
 8002774:	f3bf 8f6f 	isb	sy
 8002778:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <pxCurrentTCBConst>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	f01e 0f10 	tst.w	lr, #16
 8002780:	bf08      	it	eq
 8002782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800278a:	6010      	str	r0, [r2, #0]
 800278c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002790:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002794:	f380 8811 	msr	BASEPRI, r0
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	f3bf 8f6f 	isb	sy
 80027a0:	f7fe ff5e 	bl	8001660 <vTaskSwitchContext>
 80027a4:	f04f 0000 	mov.w	r0, #0
 80027a8:	f380 8811 	msr	BASEPRI, r0
 80027ac:	bc09      	pop	{r0, r3}
 80027ae:	6819      	ldr	r1, [r3, #0]
 80027b0:	6808      	ldr	r0, [r1, #0]
 80027b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027b6:	f01e 0f10 	tst.w	lr, #16
 80027ba:	bf08      	it	eq
 80027bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80027c0:	f380 8809 	msr	PSP, r0
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	f3af 8000 	nop.w

080027d0 <pxCurrentTCBConst>:
 80027d0:	200000d4 	.word	0x200000d4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop

080027d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
        __asm volatile
 80027de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e2:	f383 8811 	msr	BASEPRI, r3
 80027e6:	f3bf 8f6f 	isb	sy
 80027ea:	f3bf 8f4f 	dsb	sy
 80027ee:	607b      	str	r3, [r7, #4]
    }
 80027f0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80027f2:	f002 f861 	bl	80048b8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80027f6:	f7fe fe99 	bl	800152c <xTaskIncrementTick>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d006      	beq.n	800280e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002800:	f002 f8b8 	bl	8004974 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <SysTick_Handler+0x50>)
 8002806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	e001      	b.n	8002812 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800280e:	f002 f895 	bl	800493c <SEGGER_SYSVIEW_RecordExitISR>
 8002812:	2300      	movs	r3, #0
 8002814:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	f383 8811 	msr	BASEPRI, r3
    }
 800281c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	e000ed04 	.word	0xe000ed04

0800282c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <vPortSetupTimerInterrupt+0x34>)
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002836:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <vPortSetupTimerInterrupt+0x38>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800283c:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <vPortSetupTimerInterrupt+0x3c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0a      	ldr	r2, [pc, #40]	; (800286c <vPortSetupTimerInterrupt+0x40>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	099b      	lsrs	r3, r3, #6
 8002848:	4a09      	ldr	r2, [pc, #36]	; (8002870 <vPortSetupTimerInterrupt+0x44>)
 800284a:	3b01      	subs	r3, #1
 800284c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800284e:	4b04      	ldr	r3, [pc, #16]	; (8002860 <vPortSetupTimerInterrupt+0x34>)
 8002850:	2207      	movs	r2, #7
 8002852:	601a      	str	r2, [r3, #0]
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e000e010 	.word	0xe000e010
 8002864:	e000e018 	.word	0xe000e018
 8002868:	20000000 	.word	0x20000000
 800286c:	10624dd3 	.word	0x10624dd3
 8002870:	e000e014 	.word	0xe000e014

08002874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002884 <vPortEnableVFP+0x10>
 8002878:	6801      	ldr	r1, [r0, #0]
 800287a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800287e:	6001      	str	r1, [r0, #0]
 8002880:	4770      	bx	lr
 8002882:	0000      	.short	0x0000
 8002884:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop

0800288c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002892:	f3ef 8305 	mrs	r3, IPSR
 8002896:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b0f      	cmp	r3, #15
 800289c:	d914      	bls.n	80028c8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800289e:	4a17      	ldr	r2, [pc, #92]	; (80028fc <vPortValidateInterruptPriority+0x70>)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4413      	add	r3, r2
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80028a8:	4b15      	ldr	r3, [pc, #84]	; (8002900 <vPortValidateInterruptPriority+0x74>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	7afa      	ldrb	r2, [r7, #11]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d20a      	bcs.n	80028c8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80028b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b6:	f383 8811 	msr	BASEPRI, r3
 80028ba:	f3bf 8f6f 	isb	sy
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	607b      	str	r3, [r7, #4]
    }
 80028c4:	bf00      	nop
 80028c6:	e7fe      	b.n	80028c6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80028c8:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <vPortValidateInterruptPriority+0x78>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028d0:	4b0d      	ldr	r3, [pc, #52]	; (8002908 <vPortValidateInterruptPriority+0x7c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d90a      	bls.n	80028ee <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80028d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028dc:	f383 8811 	msr	BASEPRI, r3
 80028e0:	f3bf 8f6f 	isb	sy
 80028e4:	f3bf 8f4f 	dsb	sy
 80028e8:	603b      	str	r3, [r7, #0]
    }
 80028ea:	bf00      	nop
 80028ec:	e7fe      	b.n	80028ec <vPortValidateInterruptPriority+0x60>
    }
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000e3f0 	.word	0xe000e3f0
 8002900:	20000214 	.word	0x20000214
 8002904:	e000ed0c 	.word	0xe000ed0c
 8002908:	20000218 	.word	0x20000218

0800290c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08a      	sub	sp, #40	; 0x28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002914:	2300      	movs	r3, #0
 8002916:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002918:	f7fe fd46 	bl	80013a8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800291c:	4b65      	ldr	r3, [pc, #404]	; (8002ab4 <pvPortMalloc+0x1a8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002924:	f000 f934 	bl	8002b90 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002928:	4b63      	ldr	r3, [pc, #396]	; (8002ab8 <pvPortMalloc+0x1ac>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4013      	ands	r3, r2
 8002930:	2b00      	cmp	r3, #0
 8002932:	f040 80a7 	bne.w	8002a84 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d02d      	beq.n	8002998 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800293c:	2208      	movs	r2, #8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	429a      	cmp	r2, r3
 8002946:	d227      	bcs.n	8002998 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002948:	2208      	movs	r2, #8
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	2b00      	cmp	r3, #0
 8002958:	d021      	beq.n	800299e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f023 0307 	bic.w	r3, r3, #7
 8002960:	3308      	adds	r3, #8
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	429a      	cmp	r2, r3
 8002966:	d214      	bcs.n	8002992 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f023 0307 	bic.w	r3, r3, #7
 800296e:	3308      	adds	r3, #8
 8002970:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	2b00      	cmp	r3, #0
 800297a:	d010      	beq.n	800299e <pvPortMalloc+0x92>
        __asm volatile
 800297c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002980:	f383 8811 	msr	BASEPRI, r3
 8002984:	f3bf 8f6f 	isb	sy
 8002988:	f3bf 8f4f 	dsb	sy
 800298c:	617b      	str	r3, [r7, #20]
    }
 800298e:	bf00      	nop
 8002990:	e7fe      	b.n	8002990 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002996:	e002      	b.n	800299e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	607b      	str	r3, [r7, #4]
 800299c:	e000      	b.n	80029a0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800299e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d06e      	beq.n	8002a84 <pvPortMalloc+0x178>
 80029a6:	4b45      	ldr	r3, [pc, #276]	; (8002abc <pvPortMalloc+0x1b0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d869      	bhi.n	8002a84 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80029b0:	4b43      	ldr	r3, [pc, #268]	; (8002ac0 <pvPortMalloc+0x1b4>)
 80029b2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80029b4:	4b42      	ldr	r3, [pc, #264]	; (8002ac0 <pvPortMalloc+0x1b4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029ba:	e004      	b.n	80029c6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d903      	bls.n	80029d8 <pvPortMalloc+0xcc>
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f1      	bne.n	80029bc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80029d8:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <pvPortMalloc+0x1a8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029de:	429a      	cmp	r2, r3
 80029e0:	d050      	beq.n	8002a84 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2208      	movs	r2, #8
 80029e8:	4413      	add	r3, r2
 80029ea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	1ad2      	subs	r2, r2, r3
 80029fc:	2308      	movs	r3, #8
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d91f      	bls.n	8002a44 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <pvPortMalloc+0x120>
        __asm volatile
 8002a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1a:	f383 8811 	msr	BASEPRI, r3
 8002a1e:	f3bf 8f6f 	isb	sy
 8002a22:	f3bf 8f4f 	dsb	sy
 8002a26:	613b      	str	r3, [r7, #16]
    }
 8002a28:	bf00      	nop
 8002a2a:	e7fe      	b.n	8002a2a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	1ad2      	subs	r2, r2, r3
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002a3e:	69b8      	ldr	r0, [r7, #24]
 8002a40:	f000 f908 	bl	8002c54 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a44:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <pvPortMalloc+0x1b0>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	4a1b      	ldr	r2, [pc, #108]	; (8002abc <pvPortMalloc+0x1b0>)
 8002a50:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a52:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <pvPortMalloc+0x1b0>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <pvPortMalloc+0x1b8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d203      	bcs.n	8002a66 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002a5e:	4b17      	ldr	r3, [pc, #92]	; (8002abc <pvPortMalloc+0x1b0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <pvPortMalloc+0x1b8>)
 8002a64:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <pvPortMalloc+0x1ac>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002a7a:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <pvPortMalloc+0x1bc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	4a11      	ldr	r2, [pc, #68]	; (8002ac8 <pvPortMalloc+0x1bc>)
 8002a82:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002a84:	f7fe fc9e 	bl	80013c4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <pvPortMalloc+0x19c>
        __asm volatile
 8002a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	60fb      	str	r3, [r7, #12]
    }
 8002aa4:	bf00      	nop
 8002aa6:	e7fe      	b.n	8002aa6 <pvPortMalloc+0x19a>
    return pvReturn;
 8002aa8:	69fb      	ldr	r3, [r7, #28]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3728      	adds	r7, #40	; 0x28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20012e24 	.word	0x20012e24
 8002ab8:	20012e38 	.word	0x20012e38
 8002abc:	20012e28 	.word	0x20012e28
 8002ac0:	20012e1c 	.word	0x20012e1c
 8002ac4:	20012e2c 	.word	0x20012e2c
 8002ac8:	20012e30 	.word	0x20012e30

08002acc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d04d      	beq.n	8002b7a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002ade:	2308      	movs	r3, #8
 8002ae0:	425b      	negs	r3, r3
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <vPortFree+0xb8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10a      	bne.n	8002b10 <vPortFree+0x44>
        __asm volatile
 8002afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afe:	f383 8811 	msr	BASEPRI, r3
 8002b02:	f3bf 8f6f 	isb	sy
 8002b06:	f3bf 8f4f 	dsb	sy
 8002b0a:	60fb      	str	r3, [r7, #12]
    }
 8002b0c:	bf00      	nop
 8002b0e:	e7fe      	b.n	8002b0e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <vPortFree+0x62>
        __asm volatile
 8002b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1c:	f383 8811 	msr	BASEPRI, r3
 8002b20:	f3bf 8f6f 	isb	sy
 8002b24:	f3bf 8f4f 	dsb	sy
 8002b28:	60bb      	str	r3, [r7, #8]
    }
 8002b2a:	bf00      	nop
 8002b2c:	e7fe      	b.n	8002b2c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <vPortFree+0xb8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01e      	beq.n	8002b7a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d11a      	bne.n	8002b7a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <vPortFree+0xb8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	401a      	ands	r2, r3
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002b54:	f7fe fc28 	bl	80013a8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <vPortFree+0xbc>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4413      	add	r3, r2
 8002b62:	4a09      	ldr	r2, [pc, #36]	; (8002b88 <vPortFree+0xbc>)
 8002b64:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b66:	6938      	ldr	r0, [r7, #16]
 8002b68:	f000 f874 	bl	8002c54 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002b6c:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <vPortFree+0xc0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	3301      	adds	r3, #1
 8002b72:	4a06      	ldr	r2, [pc, #24]	; (8002b8c <vPortFree+0xc0>)
 8002b74:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002b76:	f7fe fc25 	bl	80013c4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002b7a:	bf00      	nop
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20012e38 	.word	0x20012e38
 8002b88:	20012e28 	.word	0x20012e28
 8002b8c:	20012e34 	.word	0x20012e34

08002b90 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002b96:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002b9a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002b9c:	4b27      	ldr	r3, [pc, #156]	; (8002c3c <prvHeapInit+0xac>)
 8002b9e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00c      	beq.n	8002bc4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3307      	adds	r3, #7
 8002bae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0307 	bic.w	r3, r3, #7
 8002bb6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	4a1f      	ldr	r2, [pc, #124]	; (8002c3c <prvHeapInit+0xac>)
 8002bc0:	4413      	add	r3, r2
 8002bc2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002bc8:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <prvHeapInit+0xb0>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002bce:	4b1c      	ldr	r3, [pc, #112]	; (8002c40 <prvHeapInit+0xb0>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	4413      	add	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002bdc:	2208      	movs	r2, #8
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f023 0307 	bic.w	r3, r3, #7
 8002bea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4a15      	ldr	r2, [pc, #84]	; (8002c44 <prvHeapInit+0xb4>)
 8002bf0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002bf2:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <prvHeapInit+0xb4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002bfa:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <prvHeapInit+0xb4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	1ad2      	subs	r2, r2, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <prvHeapInit+0xb4>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <prvHeapInit+0xb8>)
 8002c1e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	4a09      	ldr	r2, [pc, #36]	; (8002c4c <prvHeapInit+0xbc>)
 8002c26:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <prvHeapInit+0xc0>)
 8002c2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c2e:	601a      	str	r2, [r3, #0]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	2000021c 	.word	0x2000021c
 8002c40:	20012e1c 	.word	0x20012e1c
 8002c44:	20012e24 	.word	0x20012e24
 8002c48:	20012e2c 	.word	0x20012e2c
 8002c4c:	20012e28 	.word	0x20012e28
 8002c50:	20012e38 	.word	0x20012e38

08002c54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002c5c:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <prvInsertBlockIntoFreeList+0xac>)
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	e002      	b.n	8002c68 <prvInsertBlockIntoFreeList+0x14>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d8f7      	bhi.n	8002c62 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d108      	bne.n	8002c96 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	441a      	add	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	441a      	add	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d118      	bne.n	8002cdc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <prvInsertBlockIntoFreeList+0xb0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d00d      	beq.n	8002cd2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	441a      	add	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	e008      	b.n	8002ce4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <prvInsertBlockIntoFreeList+0xb0>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	e003      	b.n	8002ce4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d002      	beq.n	8002cf2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	20012e1c 	.word	0x20012e1c
 8002d04:	20012e24 	.word	0x20012e24

08002d08 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002d0c:	4803      	ldr	r0, [pc, #12]	; (8002d1c <_cbSendSystemDesc+0x14>)
 8002d0e:	f001 fd7d 	bl	800480c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002d12:	4803      	ldr	r0, [pc, #12]	; (8002d20 <_cbSendSystemDesc+0x18>)
 8002d14:	f001 fd7a 	bl	800480c <SEGGER_SYSVIEW_SendSysDesc>
}
 8002d18:	bf00      	nop
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	08005a40 	.word	0x08005a40
 8002d20:	08005a70 	.word	0x08005a70

08002d24 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <SEGGER_SYSVIEW_Conf+0x20>)
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <SEGGER_SYSVIEW_Conf+0x20>)
 8002d2e:	6819      	ldr	r1, [r3, #0]
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <SEGGER_SYSVIEW_Conf+0x24>)
 8002d32:	4a06      	ldr	r2, [pc, #24]	; (8002d4c <SEGGER_SYSVIEW_Conf+0x28>)
 8002d34:	f001 f8e6 	bl	8003f04 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002d38:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002d3c:	f001 f926 	bl	8003f8c <SEGGER_SYSVIEW_SetRAMBase>
}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000000 	.word	0x20000000
 8002d48:	08002d09 	.word	0x08002d09
 8002d4c:	08005af8 	.word	0x08005af8

08002d50 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002d56:	2300      	movs	r3, #0
 8002d58:	607b      	str	r3, [r7, #4]
 8002d5a:	e033      	b.n	8002dc4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002d5c:	491e      	ldr	r1, [pc, #120]	; (8002dd8 <_cbSendTaskList+0x88>)
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	6818      	ldr	r0, [r3, #0]
 8002d6c:	491a      	ldr	r1, [pc, #104]	; (8002dd8 <_cbSendTaskList+0x88>)
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	6819      	ldr	r1, [r3, #0]
 8002d7e:	4c16      	ldr	r4, [pc, #88]	; (8002dd8 <_cbSendTaskList+0x88>)
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4423      	add	r3, r4
 8002d8c:	3308      	adds	r3, #8
 8002d8e:	681c      	ldr	r4, [r3, #0]
 8002d90:	4d11      	ldr	r5, [pc, #68]	; (8002dd8 <_cbSendTaskList+0x88>)
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	442b      	add	r3, r5
 8002d9e:	330c      	adds	r3, #12
 8002da0:	681d      	ldr	r5, [r3, #0]
 8002da2:	4e0d      	ldr	r6, [pc, #52]	; (8002dd8 <_cbSendTaskList+0x88>)
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4433      	add	r3, r6
 8002db0:	3310      	adds	r3, #16
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	462b      	mov	r3, r5
 8002db8:	4622      	mov	r2, r4
 8002dba:	f000 f8bd 	bl	8002f38 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	607b      	str	r3, [r7, #4]
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <_cbSendTaskList+0x8c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d3c6      	bcc.n	8002d5c <_cbSendTaskList+0xc>
  }
}
 8002dce:	bf00      	nop
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dd8:	20012e3c 	.word	0x20012e3c
 8002ddc:	20012edc 	.word	0x20012edc

08002de0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002de8:	f7fe fb8e 	bl	8001508 <xTaskGetTickCountFromISR>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2200      	movs	r2, #0
 8002df0:	469a      	mov	sl, r3
 8002df2:	4693      	mov	fp, r2
 8002df4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002df8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	f04f 0a00 	mov.w	sl, #0
 8002e04:	f04f 0b00 	mov.w	fp, #0
 8002e08:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8002e0c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8002e10:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8002e14:	4652      	mov	r2, sl
 8002e16:	465b      	mov	r3, fp
 8002e18:	1a14      	subs	r4, r2, r0
 8002e1a:	eb63 0501 	sbc.w	r5, r3, r1
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	00ab      	lsls	r3, r5, #2
 8002e28:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002e2c:	00a2      	lsls	r2, r4, #2
 8002e2e:	4614      	mov	r4, r2
 8002e30:	461d      	mov	r5, r3
 8002e32:	eb14 0800 	adds.w	r8, r4, r0
 8002e36:	eb45 0901 	adc.w	r9, r5, r1
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e4e:	4690      	mov	r8, r2
 8002e50:	4699      	mov	r9, r3
 8002e52:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8002e56:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002e68 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002e76:	2205      	movs	r2, #5
 8002e78:	492b      	ldr	r1, [pc, #172]	; (8002f28 <SYSVIEW_AddTask+0xc0>)
 8002e7a:	68b8      	ldr	r0, [r7, #8]
 8002e7c:	f002 f884 	bl	8004f88 <memcmp>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d04b      	beq.n	8002f1e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002e86:	4b29      	ldr	r3, [pc, #164]	; (8002f2c <SYSVIEW_AddTask+0xc4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b07      	cmp	r3, #7
 8002e8c:	d903      	bls.n	8002e96 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002e8e:	4828      	ldr	r0, [pc, #160]	; (8002f30 <SYSVIEW_AddTask+0xc8>)
 8002e90:	f001 ffba 	bl	8004e08 <SEGGER_SYSVIEW_Warn>
    return;
 8002e94:	e044      	b.n	8002f20 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002e96:	4b25      	ldr	r3, [pc, #148]	; (8002f2c <SYSVIEW_AddTask+0xc4>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4926      	ldr	r1, [pc, #152]	; (8002f34 <SYSVIEW_AddTask+0xcc>)
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002eaa:	4b20      	ldr	r3, [pc, #128]	; (8002f2c <SYSVIEW_AddTask+0xc4>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	4921      	ldr	r1, [pc, #132]	; (8002f34 <SYSVIEW_AddTask+0xcc>)
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	3304      	adds	r3, #4
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002ec0:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <SYSVIEW_AddTask+0xc4>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	491b      	ldr	r1, [pc, #108]	; (8002f34 <SYSVIEW_AddTask+0xcc>)
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	440b      	add	r3, r1
 8002ed0:	3308      	adds	r3, #8
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002ed6:	4b15      	ldr	r3, [pc, #84]	; (8002f2c <SYSVIEW_AddTask+0xc4>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	4916      	ldr	r1, [pc, #88]	; (8002f34 <SYSVIEW_AddTask+0xcc>)
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	330c      	adds	r3, #12
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002eec:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <SYSVIEW_AddTask+0xc4>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	4910      	ldr	r1, [pc, #64]	; (8002f34 <SYSVIEW_AddTask+0xcc>)
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	3310      	adds	r3, #16
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <SYSVIEW_AddTask+0xc4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3301      	adds	r3, #1
 8002f08:	4a08      	ldr	r2, [pc, #32]	; (8002f2c <SYSVIEW_AddTask+0xc4>)
 8002f0a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f80e 	bl	8002f38 <SYSVIEW_SendTaskInfo>
 8002f1c:	e000      	b.n	8002f20 <SYSVIEW_AddTask+0xb8>
    return;
 8002f1e:	bf00      	nop

}
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	08005a80 	.word	0x08005a80
 8002f2c:	20012edc 	.word	0x20012edc
 8002f30:	08005a88 	.word	0x08005a88
 8002f34:	20012e3c 	.word	0x20012e3c

08002f38 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	; 0x28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002f46:	f107 0314 	add.w	r3, r7, #20
 8002f4a:	2214      	movs	r2, #20
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f002 f838 	bl	8004fc4 <memset>
  TaskInfo.TaskID     = TaskID;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002f68:	f107 0314 	add.w	r3, r7, #20
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f001 fb55 	bl	800461c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002f72:	bf00      	nop
 8002f74:	3728      	adds	r7, #40	; 0x28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	db0b      	blt.n	8002fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	f003 021f 	and.w	r2, r3, #31
 8002f94:	4907      	ldr	r1, [pc, #28]	; (8002fb4 <__NVIC_EnableIRQ+0x38>)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	e000e100 	.word	0xe000e100

08002fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	6039      	str	r1, [r7, #0]
 8002fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	db0a      	blt.n	8002fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	490c      	ldr	r1, [pc, #48]	; (8003004 <__NVIC_SetPriority+0x4c>)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	0112      	lsls	r2, r2, #4
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	440b      	add	r3, r1
 8002fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fe0:	e00a      	b.n	8002ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	4908      	ldr	r1, [pc, #32]	; (8003008 <__NVIC_SetPriority+0x50>)
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	3b04      	subs	r3, #4
 8002ff0:	0112      	lsls	r2, r2, #4
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	761a      	strb	r2, [r3, #24]
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	e000e100 	.word	0xe000e100
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003012:	f001 ff55 	bl	8004ec0 <SEGGER_SYSVIEW_IsStarted>
 8003016:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800301e:	f001 f981 	bl	8004324 <SEGGER_SYSVIEW_Start>
  }
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003036:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <_cbOnUARTRx+0x3c>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b03      	cmp	r3, #3
 800303c:	d806      	bhi.n	800304c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <_cbOnUARTRx+0x3c>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	3301      	adds	r3, #1
 8003044:	b2da      	uxtb	r2, r3
 8003046:	4b08      	ldr	r3, [pc, #32]	; (8003068 <_cbOnUARTRx+0x3c>)
 8003048:	701a      	strb	r2, [r3, #0]
    goto Done;
 800304a:	e009      	b.n	8003060 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800304c:	f7ff ffde 	bl	800300c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <_cbOnUARTRx+0x3c>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	4618      	mov	r0, r3
 8003056:	1dfb      	adds	r3, r7, #7
 8003058:	2201      	movs	r2, #1
 800305a:	4619      	mov	r1, r3
 800305c:	f000 fbea 	bl	8003834 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003060:	bf00      	nop
}
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	2000000c 	.word	0x2000000c

0800306c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003074:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <_cbOnUARTTx+0x5c>)
 8003076:	785b      	ldrb	r3, [r3, #1]
 8003078:	2b03      	cmp	r3, #3
 800307a:	d80f      	bhi.n	800309c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800307c:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <_cbOnUARTTx+0x5c>)
 800307e:	785b      	ldrb	r3, [r3, #1]
 8003080:	461a      	mov	r2, r3
 8003082:	4b12      	ldr	r3, [pc, #72]	; (80030cc <_cbOnUARTTx+0x60>)
 8003084:	5c9a      	ldrb	r2, [r3, r2]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800308a:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <_cbOnUARTTx+0x5c>)
 800308c:	785b      	ldrb	r3, [r3, #1]
 800308e:	3301      	adds	r3, #1
 8003090:	b2da      	uxtb	r2, r3
 8003092:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <_cbOnUARTTx+0x5c>)
 8003094:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003096:	2301      	movs	r3, #1
 8003098:	60fb      	str	r3, [r7, #12]
    goto Done;
 800309a:	e00f      	b.n	80030bc <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800309c:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <_cbOnUARTTx+0x5c>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 fa19 	bl	80034dc <SEGGER_RTT_ReadUpBufferNoLock>
 80030aa:	4603      	mov	r3, r0
 80030ac:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	da02      	bge.n	80030ba <_cbOnUARTTx+0x4e>
    r = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	e000      	b.n	80030bc <_cbOnUARTTx+0x50>
  }
Done:
 80030ba:	bf00      	nop
  return r;
 80030bc:	68fb      	ldr	r3, [r7, #12]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	2000000c 	.word	0x2000000c
 80030cc:	08005b00 	.word	0x08005b00

080030d0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80030d8:	4a04      	ldr	r2, [pc, #16]	; (80030ec <SEGGER_UART_init+0x1c>)
 80030da:	4905      	ldr	r1, [pc, #20]	; (80030f0 <SEGGER_UART_init+0x20>)
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f863 	bl	80031a8 <HIF_UART_Init>
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	0800302d 	.word	0x0800302d
 80030f0:	0800306d 	.word	0x0800306d

080030f4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80030fa:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <USART2_IRQHandler+0x80>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b00      	cmp	r3, #0
 8003108:	d011      	beq.n	800312e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800310a:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <USART2_IRQHandler+0x84>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f003 030b 	and.w	r3, r3, #11
 8003118:	2b00      	cmp	r3, #0
 800311a:	d108      	bne.n	800312e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800311c:	4b17      	ldr	r3, [pc, #92]	; (800317c <USART2_IRQHandler+0x88>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d004      	beq.n	800312e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003124:	4b15      	ldr	r3, [pc, #84]	; (800317c <USART2_IRQHandler+0x88>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	79fa      	ldrb	r2, [r7, #7]
 800312a:	4610      	mov	r0, r2
 800312c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01a      	beq.n	800316e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003138:	4b11      	ldr	r3, [pc, #68]	; (8003180 <USART2_IRQHandler+0x8c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d015      	beq.n	800316c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003140:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <USART2_IRQHandler+0x8c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	1dfa      	adds	r2, r7, #7
 8003146:	4610      	mov	r0, r2
 8003148:	4798      	blx	r3
 800314a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d106      	bne.n	8003160 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003152:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <USART2_IRQHandler+0x90>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a0b      	ldr	r2, [pc, #44]	; (8003184 <USART2_IRQHandler+0x90>)
 8003158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	e006      	b.n	800316e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003160:	4b04      	ldr	r3, [pc, #16]	; (8003174 <USART2_IRQHandler+0x80>)
 8003162:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003164:	79fa      	ldrb	r2, [r7, #7]
 8003166:	4b04      	ldr	r3, [pc, #16]	; (8003178 <USART2_IRQHandler+0x84>)
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	e000      	b.n	800316e <USART2_IRQHandler+0x7a>
      return;
 800316c:	bf00      	nop
    }
  }
}
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40004400 	.word	0x40004400
 8003178:	40004404 	.word	0x40004404
 800317c:	20012ee0 	.word	0x20012ee0
 8003180:	20012ee4 	.word	0x20012ee4
 8003184:	4000440c 	.word	0x4000440c

08003188 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800318c:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a04      	ldr	r2, [pc, #16]	; (80031a4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003196:	6013      	str	r3, [r2, #0]
}
 8003198:	bf00      	nop
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	4000440c 	.word	0x4000440c

080031a8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80031b4:	4b2e      	ldr	r3, [pc, #184]	; (8003270 <HIF_UART_Init+0xc8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a2d      	ldr	r2, [pc, #180]	; (8003270 <HIF_UART_Init+0xc8>)
 80031ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031be:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80031c0:	4b2c      	ldr	r3, [pc, #176]	; (8003274 <HIF_UART_Init+0xcc>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a2b      	ldr	r2, [pc, #172]	; (8003274 <HIF_UART_Init+0xcc>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80031cc:	4b2a      	ldr	r3, [pc, #168]	; (8003278 <HIF_UART_Init+0xd0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031d8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80031e0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80031e2:	4a25      	ldr	r2, [pc, #148]	; (8003278 <HIF_UART_Init+0xd0>)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80031e8:	4b24      	ldr	r3, [pc, #144]	; (800327c <HIF_UART_Init+0xd4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031f4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80031fc:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80031fe:	4a1f      	ldr	r2, [pc, #124]	; (800327c <HIF_UART_Init+0xd4>)
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003204:	4b1e      	ldr	r3, [pc, #120]	; (8003280 <HIF_UART_Init+0xd8>)
 8003206:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800320a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800320c:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <HIF_UART_Init+0xdc>)
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003212:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <HIF_UART_Init+0xe0>)
 8003214:	2280      	movs	r2, #128	; 0x80
 8003216:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800321e:	4a1b      	ldr	r2, [pc, #108]	; (800328c <HIF_UART_Init+0xe4>)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	fbb2 f3f3 	udiv	r3, r2, r3
 8003226:	3301      	adds	r3, #1
 8003228:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	085b      	lsrs	r3, r3, #1
 800322e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003236:	d302      	bcc.n	800323e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003238:	f640 73ff 	movw	r3, #4095	; 0xfff
 800323c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d004      	beq.n	800324e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	4a11      	ldr	r2, [pc, #68]	; (8003290 <HIF_UART_Init+0xe8>)
 800324a:	b29b      	uxth	r3, r3
 800324c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800324e:	4a11      	ldr	r2, [pc, #68]	; (8003294 <HIF_UART_Init+0xec>)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003254:	4a10      	ldr	r2, [pc, #64]	; (8003298 <HIF_UART_Init+0xf0>)
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800325a:	2106      	movs	r1, #6
 800325c:	2026      	movs	r0, #38	; 0x26
 800325e:	f7ff feab 	bl	8002fb8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003262:	2026      	movs	r0, #38	; 0x26
 8003264:	f7ff fe8a 	bl	8002f7c <__NVIC_EnableIRQ>
}
 8003268:	bf00      	nop
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40023840 	.word	0x40023840
 8003274:	40023830 	.word	0x40023830
 8003278:	40020020 	.word	0x40020020
 800327c:	40020000 	.word	0x40020000
 8003280:	4000440c 	.word	0x4000440c
 8003284:	40004410 	.word	0x40004410
 8003288:	40004414 	.word	0x40004414
 800328c:	05f5e100 	.word	0x05f5e100
 8003290:	40004408 	.word	0x40004408
 8003294:	20012ee0 	.word	0x20012ee0
 8003298:	20012ee4 	.word	0x20012ee4

0800329c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80032a2:	4b24      	ldr	r3, [pc, #144]	; (8003334 <_DoInit+0x98>)
 80032a4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2203      	movs	r2, #3
 80032aa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2203      	movs	r2, #3
 80032b0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a20      	ldr	r2, [pc, #128]	; (8003338 <_DoInit+0x9c>)
 80032b6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a20      	ldr	r2, [pc, #128]	; (800333c <_DoInit+0xa0>)
 80032bc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032c4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a17      	ldr	r2, [pc, #92]	; (8003338 <_DoInit+0x9c>)
 80032dc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a17      	ldr	r2, [pc, #92]	; (8003340 <_DoInit+0xa4>)
 80032e2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2210      	movs	r2, #16
 80032e8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3307      	adds	r3, #7
 8003300:	4a10      	ldr	r2, [pc, #64]	; (8003344 <_DoInit+0xa8>)
 8003302:	6810      	ldr	r0, [r2, #0]
 8003304:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003306:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a0e      	ldr	r2, [pc, #56]	; (8003348 <_DoInit+0xac>)
 800330e:	6810      	ldr	r0, [r2, #0]
 8003310:	6018      	str	r0, [r3, #0]
 8003312:	8891      	ldrh	r1, [r2, #4]
 8003314:	7992      	ldrb	r2, [r2, #6]
 8003316:	8099      	strh	r1, [r3, #4]
 8003318:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800331a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003324:	f3bf 8f5f 	dmb	sy
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	20012ee8 	.word	0x20012ee8
 8003338:	08005ad8 	.word	0x08005ad8
 800333c:	20012f90 	.word	0x20012f90
 8003340:	20013390 	.word	0x20013390
 8003344:	08005ae4 	.word	0x08005ae4
 8003348:	08005ae8 	.word	0x08005ae8

0800334c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800334c:	b580      	push	{r7, lr}
 800334e:	b08a      	sub	sp, #40	; 0x28
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003358:	2300      	movs	r3, #0
 800335a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	429a      	cmp	r2, r3
 800336e:	d905      	bls.n	800337c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	3b01      	subs	r3, #1
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
 800337a:	e007      	b.n	800338c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	69b9      	ldr	r1, [r7, #24]
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	1acb      	subs	r3, r1, r3
 8003386:	4413      	add	r3, r2
 8003388:	3b01      	subs	r3, #1
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003396:	4293      	cmp	r3, r2
 8003398:	bf28      	it	cs
 800339a:	4613      	movcs	r3, r2
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800339e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4293      	cmp	r3, r2
 80033a4:	bf28      	it	cs
 80033a6:	4613      	movcs	r3, r2
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	4413      	add	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80033b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b6:	68b9      	ldr	r1, [r7, #8]
 80033b8:	6978      	ldr	r0, [r7, #20]
 80033ba:	f001 fdf5 	bl	8004fa8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80033be:	6a3a      	ldr	r2, [r7, #32]
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	4413      	add	r3, r2
 80033c4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	4413      	add	r3, r2
 80033cc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	4413      	add	r3, r2
 80033dc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d101      	bne.n	80033ec <_WriteBlocking+0xa0>
      WrOff = 0u;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80033ec:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1b2      	bne.n	8003362 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80033fc:	6a3b      	ldr	r3, [r7, #32]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3728      	adds	r7, #40	; 0x28
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003406:	b580      	push	{r7, lr}
 8003408:	b088      	sub	sp, #32
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	429a      	cmp	r2, r3
 8003428:	d911      	bls.n	800344e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	4413      	add	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	6938      	ldr	r0, [r7, #16]
 800343a:	f001 fdb5 	bl	8004fa8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800343e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	441a      	add	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800344c:	e01f      	b.n	800348e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	4413      	add	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	68b9      	ldr	r1, [r7, #8]
 8003460:	6938      	ldr	r0, [r7, #16]
 8003462:	f001 fda1 	bl	8004fa8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	4413      	add	r3, r2
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4619      	mov	r1, r3
 800347e:	6938      	ldr	r0, [r7, #16]
 8003480:	f001 fd92 	bl	8004fa8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003484:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	60da      	str	r2, [r3, #12]
}
 800348e:	bf00      	nop
 8003490:	3720      	adds	r7, #32
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003496:	b480      	push	{r7}
 8003498:	b087      	sub	sp, #28
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d808      	bhi.n	80034c4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad2      	subs	r2, r2, r3
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4413      	add	r3, r2
 80034be:	3b01      	subs	r3, #1
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	e004      	b.n	80034ce <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80034ce:	697b      	ldr	r3, [r7, #20]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08c      	sub	sp, #48	; 0x30
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80034e8:	4b3e      	ldr	r3, [pc, #248]	; (80035e4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80034ea:	623b      	str	r3, [r7, #32]
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80034f6:	f7ff fed1 	bl	800329c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	4613      	mov	r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4413      	add	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4a37      	ldr	r2, [pc, #220]	; (80035e4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003508:	4413      	add	r3, r2
 800350a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800351c:	2300      	movs	r3, #0
 800351e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	429a      	cmp	r2, r3
 8003526:	d92b      	bls.n	8003580 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4293      	cmp	r3, r2
 8003538:	bf28      	it	cs
 800353a:	4613      	movcs	r3, r2
 800353c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	4413      	add	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	6939      	ldr	r1, [r7, #16]
 800354c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800354e:	f001 fd2b 	bl	8004fa8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	4413      	add	r3, r2
 8003558:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800355a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	4413      	add	r3, r2
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800356a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	4413      	add	r3, r2
 8003570:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003578:	429a      	cmp	r2, r3
 800357a:	d101      	bne.n	8003580 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800357c:	2300      	movs	r3, #0
 800357e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4293      	cmp	r3, r2
 800358e:	bf28      	it	cs
 8003590:	4613      	movcs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d019      	beq.n	80035ce <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a0:	4413      	add	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	6939      	ldr	r1, [r7, #16]
 80035a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035aa:	f001 fcfd 	bl	8004fa8 <memcpy>
    NumBytesRead += NumBytesRem;
 80035ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	4413      	add	r3, r2
 80035b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80035b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	4413      	add	r3, r2
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80035c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	4413      	add	r3, r2
 80035cc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80035ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035d8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80035da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3730      	adds	r7, #48	; 0x30
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20012ee8 	.word	0x20012ee8

080035e8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08c      	sub	sp, #48	; 0x30
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80035f4:	4b3e      	ldr	r3, [pc, #248]	; (80036f0 <SEGGER_RTT_ReadNoLock+0x108>)
 80035f6:	623b      	str	r3, [r7, #32]
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <SEGGER_RTT_ReadNoLock+0x1e>
 8003602:	f7ff fe4b 	bl	800329c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4613      	mov	r3, r2
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	4413      	add	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	3360      	adds	r3, #96	; 0x60
 8003612:	4a37      	ldr	r2, [pc, #220]	; (80036f0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003614:	4413      	add	r3, r2
 8003616:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003628:	2300      	movs	r3, #0
 800362a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800362c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	429a      	cmp	r2, r3
 8003632:	d92b      	bls.n	800368c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4293      	cmp	r3, r2
 8003644:	bf28      	it	cs
 8003646:	4613      	movcs	r3, r2
 8003648:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	4413      	add	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	6939      	ldr	r1, [r7, #16]
 8003658:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800365a:	f001 fca5 	bl	8004fa8 <memcpy>
    NumBytesRead += NumBytesRem;
 800365e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	4413      	add	r3, r2
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	4413      	add	r3, r2
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	4413      	add	r3, r2
 800367c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003684:	429a      	cmp	r2, r3
 8003686:	d101      	bne.n	800368c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003688:	2300      	movs	r3, #0
 800368a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4293      	cmp	r3, r2
 800369a:	bf28      	it	cs
 800369c:	4613      	movcs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d019      	beq.n	80036da <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ac:	4413      	add	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	6939      	ldr	r1, [r7, #16]
 80036b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036b6:	f001 fc77 	bl	8004fa8 <memcpy>
    NumBytesRead += NumBytesRem;
 80036ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	4413      	add	r3, r2
 80036c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80036c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	4413      	add	r3, r2
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80036d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	4413      	add	r3, r2
 80036d8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80036da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036e4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80036e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3730      	adds	r7, #48	; 0x30
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20012ee8 	.word	0x20012ee8

080036f4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4613      	mov	r3, r2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	4413      	add	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	3360      	adds	r3, #96	; 0x60
 8003710:	4a1f      	ldr	r2, [pc, #124]	; (8003790 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003712:	4413      	add	r3, r2
 8003714:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d029      	beq.n	8003772 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800371e:	2b02      	cmp	r3, #2
 8003720:	d82e      	bhi.n	8003780 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003726:	2b01      	cmp	r3, #1
 8003728:	d013      	beq.n	8003752 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800372a:	e029      	b.n	8003780 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800372c:	6978      	ldr	r0, [r7, #20]
 800372e:	f7ff feb2 	bl	8003496 <_GetAvailWriteSpace>
 8003732:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	d202      	bcs.n	8003742 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800373c:	2300      	movs	r3, #0
 800373e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003740:	e021      	b.n	8003786 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	69b9      	ldr	r1, [r7, #24]
 800374a:	6978      	ldr	r0, [r7, #20]
 800374c:	f7ff fe5b 	bl	8003406 <_WriteNoCheck>
    break;
 8003750:	e019      	b.n	8003786 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003752:	6978      	ldr	r0, [r7, #20]
 8003754:	f7ff fe9f 	bl	8003496 <_GetAvailWriteSpace>
 8003758:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4293      	cmp	r3, r2
 8003760:	bf28      	it	cs
 8003762:	4613      	movcs	r3, r2
 8003764:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003766:	69fa      	ldr	r2, [r7, #28]
 8003768:	69b9      	ldr	r1, [r7, #24]
 800376a:	6978      	ldr	r0, [r7, #20]
 800376c:	f7ff fe4b 	bl	8003406 <_WriteNoCheck>
    break;
 8003770:	e009      	b.n	8003786 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	69b9      	ldr	r1, [r7, #24]
 8003776:	6978      	ldr	r0, [r7, #20]
 8003778:	f7ff fde8 	bl	800334c <_WriteBlocking>
 800377c:	61f8      	str	r0, [r7, #28]
    break;
 800377e:	e002      	b.n	8003786 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003780:	2300      	movs	r3, #0
 8003782:	61fb      	str	r3, [r7, #28]
    break;
 8003784:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003786:	69fb      	ldr	r3, [r7, #28]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3720      	adds	r7, #32
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20012ee8 	.word	0x20012ee8

08003794 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	4613      	mov	r3, r2
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	4413      	add	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	4a1f      	ldr	r2, [pc, #124]	; (8003830 <SEGGER_RTT_WriteNoLock+0x9c>)
 80037b2:	4413      	add	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d029      	beq.n	8003812 <SEGGER_RTT_WriteNoLock+0x7e>
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d82e      	bhi.n	8003820 <SEGGER_RTT_WriteNoLock+0x8c>
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <SEGGER_RTT_WriteNoLock+0x38>
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d013      	beq.n	80037f2 <SEGGER_RTT_WriteNoLock+0x5e>
 80037ca:	e029      	b.n	8003820 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80037cc:	6978      	ldr	r0, [r7, #20]
 80037ce:	f7ff fe62 	bl	8003496 <_GetAvailWriteSpace>
 80037d2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d202      	bcs.n	80037e2 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80037dc:	2300      	movs	r3, #0
 80037de:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80037e0:	e021      	b.n	8003826 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	69b9      	ldr	r1, [r7, #24]
 80037ea:	6978      	ldr	r0, [r7, #20]
 80037ec:	f7ff fe0b 	bl	8003406 <_WriteNoCheck>
    break;
 80037f0:	e019      	b.n	8003826 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80037f2:	6978      	ldr	r0, [r7, #20]
 80037f4:	f7ff fe4f 	bl	8003496 <_GetAvailWriteSpace>
 80037f8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4293      	cmp	r3, r2
 8003800:	bf28      	it	cs
 8003802:	4613      	movcs	r3, r2
 8003804:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003806:	69fa      	ldr	r2, [r7, #28]
 8003808:	69b9      	ldr	r1, [r7, #24]
 800380a:	6978      	ldr	r0, [r7, #20]
 800380c:	f7ff fdfb 	bl	8003406 <_WriteNoCheck>
    break;
 8003810:	e009      	b.n	8003826 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	69b9      	ldr	r1, [r7, #24]
 8003816:	6978      	ldr	r0, [r7, #20]
 8003818:	f7ff fd98 	bl	800334c <_WriteBlocking>
 800381c:	61f8      	str	r0, [r7, #28]
    break;
 800381e:	e002      	b.n	8003826 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8003820:	2300      	movs	r3, #0
 8003822:	61fb      	str	r3, [r7, #28]
    break;
 8003824:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003826:	69fb      	ldr	r3, [r7, #28]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3720      	adds	r7, #32
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20012ee8 	.word	0x20012ee8

08003834 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003840:	4b0e      	ldr	r3, [pc, #56]	; (800387c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003842:	61fb      	str	r3, [r7, #28]
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800384e:	f7ff fd25 	bl	800329c <_DoInit>
  SEGGER_RTT_LOCK();
 8003852:	f3ef 8311 	mrs	r3, BASEPRI
 8003856:	f04f 0120 	mov.w	r1, #32
 800385a:	f381 8811 	msr	BASEPRI, r1
 800385e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f7ff ff45 	bl	80036f4 <SEGGER_RTT_WriteDownBufferNoLock>
 800386a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003872:	697b      	ldr	r3, [r7, #20]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3720      	adds	r7, #32
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	20012ee8 	.word	0x20012ee8

08003880 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800388c:	4b0e      	ldr	r3, [pc, #56]	; (80038c8 <SEGGER_RTT_Write+0x48>)
 800388e:	61fb      	str	r3, [r7, #28]
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <SEGGER_RTT_Write+0x1e>
 800389a:	f7ff fcff 	bl	800329c <_DoInit>
  SEGGER_RTT_LOCK();
 800389e:	f3ef 8311 	mrs	r3, BASEPRI
 80038a2:	f04f 0120 	mov.w	r1, #32
 80038a6:	f381 8811 	msr	BASEPRI, r1
 80038aa:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	68b9      	ldr	r1, [r7, #8]
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f7ff ff6f 	bl	8003794 <SEGGER_RTT_WriteNoLock>
 80038b6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80038be:	697b      	ldr	r3, [r7, #20]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3720      	adds	r7, #32
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20012ee8 	.word	0x20012ee8

080038cc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80038da:	4b3d      	ldr	r3, [pc, #244]	; (80039d0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <SEGGER_RTT_AllocUpBuffer+0x20>
 80038e8:	f7ff fcd8 	bl	800329c <_DoInit>
  SEGGER_RTT_LOCK();
 80038ec:	f3ef 8311 	mrs	r3, BASEPRI
 80038f0:	f04f 0120 	mov.w	r1, #32
 80038f4:	f381 8811 	msr	BASEPRI, r1
 80038f8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80038fa:	4b35      	ldr	r3, [pc, #212]	; (80039d0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80038fc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003902:	6939      	ldr	r1, [r7, #16]
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	4613      	mov	r3, r2
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	4413      	add	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	440b      	add	r3, r1
 8003912:	3304      	adds	r3, #4
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d008      	beq.n	800392c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	3301      	adds	r3, #1
 800391e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	69fa      	ldr	r2, [r7, #28]
 8003926:	429a      	cmp	r2, r3
 8003928:	dbeb      	blt.n	8003902 <SEGGER_RTT_AllocUpBuffer+0x36>
 800392a:	e000      	b.n	800392e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800392c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	429a      	cmp	r2, r3
 8003936:	da3f      	bge.n	80039b8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003938:	6939      	ldr	r1, [r7, #16]
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	4613      	mov	r3, r2
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	4413      	add	r3, r2
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	440b      	add	r3, r1
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800394c:	6939      	ldr	r1, [r7, #16]
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	4613      	mov	r3, r2
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	4413      	add	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	440b      	add	r3, r1
 800395c:	3304      	adds	r3, #4
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003962:	6939      	ldr	r1, [r7, #16]
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	4613      	mov	r3, r2
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	4413      	add	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	440b      	add	r3, r1
 8003970:	3320      	adds	r3, #32
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003976:	6939      	ldr	r1, [r7, #16]
 8003978:	69fa      	ldr	r2, [r7, #28]
 800397a:	4613      	mov	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	4413      	add	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	440b      	add	r3, r1
 8003984:	3328      	adds	r3, #40	; 0x28
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800398a:	6939      	ldr	r1, [r7, #16]
 800398c:	69fa      	ldr	r2, [r7, #28]
 800398e:	4613      	mov	r3, r2
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4413      	add	r3, r2
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	440b      	add	r3, r1
 8003998:	3324      	adds	r3, #36	; 0x24
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800399e:	6939      	ldr	r1, [r7, #16]
 80039a0:	69fa      	ldr	r2, [r7, #28]
 80039a2:	4613      	mov	r3, r2
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	4413      	add	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	440b      	add	r3, r1
 80039ac:	332c      	adds	r3, #44	; 0x2c
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80039b2:	f3bf 8f5f 	dmb	sy
 80039b6:	e002      	b.n	80039be <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80039b8:	f04f 33ff 	mov.w	r3, #4294967295
 80039bc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80039c4:	69fb      	ldr	r3, [r7, #28]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3720      	adds	r7, #32
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20012ee8 	.word	0x20012ee8

080039d4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80039e2:	4b33      	ldr	r3, [pc, #204]	; (8003ab0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80039f0:	f7ff fc54 	bl	800329c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80039f4:	4b2e      	ldr	r3, [pc, #184]	; (8003ab0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80039f6:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	461a      	mov	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d24d      	bcs.n	8003aa0 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003a04:	f3ef 8311 	mrs	r3, BASEPRI
 8003a08:	f04f 0120 	mov.w	r1, #32
 8003a0c:	f381 8811 	msr	BASEPRI, r1
 8003a10:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d031      	beq.n	8003a7c <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003a18:	6979      	ldr	r1, [r7, #20]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	4413      	add	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	440b      	add	r3, r1
 8003a26:	3360      	adds	r3, #96	; 0x60
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003a2c:	6979      	ldr	r1, [r7, #20]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4613      	mov	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4413      	add	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	440b      	add	r3, r1
 8003a3a:	3364      	adds	r3, #100	; 0x64
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003a40:	6979      	ldr	r1, [r7, #20]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4613      	mov	r3, r2
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	4413      	add	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	440b      	add	r3, r1
 8003a4e:	3368      	adds	r3, #104	; 0x68
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003a54:	6979      	ldr	r1, [r7, #20]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	4413      	add	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	440b      	add	r3, r1
 8003a62:	3370      	adds	r3, #112	; 0x70
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003a68:	6979      	ldr	r1, [r7, #20]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	4413      	add	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	440b      	add	r3, r1
 8003a76:	336c      	adds	r3, #108	; 0x6c
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003a7c:	6979      	ldr	r1, [r7, #20]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4613      	mov	r3, r2
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	4413      	add	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	440b      	add	r3, r1
 8003a8a:	3374      	adds	r3, #116	; 0x74
 8003a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a8e:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a90:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61fb      	str	r3, [r7, #28]
 8003a9e:	e002      	b.n	8003aa6 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa4:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003aa6:	69fb      	ldr	r3, [r7, #28]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3720      	adds	r7, #32
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20012ee8 	.word	0x20012ee8

08003ab4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003ac4:	e002      	b.n	8003acc <_EncodeStr+0x18>
    Len++;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f6      	bne.n	8003ac6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d901      	bls.n	8003ae4 <_EncodeStr+0x30>
    Len = Limit;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	2bfe      	cmp	r3, #254	; 0xfe
 8003ae8:	d806      	bhi.n	8003af8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	60fa      	str	r2, [r7, #12]
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	701a      	strb	r2, [r3, #0]
 8003af6:	e011      	b.n	8003b1c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	60fa      	str	r2, [r7, #12]
 8003afe:	22ff      	movs	r2, #255	; 0xff
 8003b00:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	60fa      	str	r2, [r7, #12]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	0a19      	lsrs	r1, r3, #8
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	60fa      	str	r2, [r7, #12]
 8003b18:	b2ca      	uxtb	r2, r1
 8003b1a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003b20:	e00a      	b.n	8003b38 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	1c53      	adds	r3, r2, #1
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	1c59      	adds	r1, r3, #1
 8003b2c:	60f9      	str	r1, [r7, #12]
 8003b2e:	7812      	ldrb	r2, [r2, #0]
 8003b30:	701a      	strb	r2, [r3, #0]
    n++;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	3301      	adds	r3, #1
 8003b36:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d3f0      	bcc.n	8003b22 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003b40:	68fb      	ldr	r3, [r7, #12]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3304      	adds	r3, #4
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
	...

08003b68 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003b6e:	4b36      	ldr	r3, [pc, #216]	; (8003c48 <_HandleIncomingPacket+0xe0>)
 8003b70:	7e1b      	ldrb	r3, [r3, #24]
 8003b72:	4618      	mov	r0, r3
 8003b74:	1cfb      	adds	r3, r7, #3
 8003b76:	2201      	movs	r2, #1
 8003b78:	4619      	mov	r1, r3
 8003b7a:	f7ff fd35 	bl	80035e8 <SEGGER_RTT_ReadNoLock>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	dd54      	ble.n	8003c32 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	2b80      	cmp	r3, #128	; 0x80
 8003b8c:	d032      	beq.n	8003bf4 <_HandleIncomingPacket+0x8c>
 8003b8e:	2b80      	cmp	r3, #128	; 0x80
 8003b90:	dc42      	bgt.n	8003c18 <_HandleIncomingPacket+0xb0>
 8003b92:	2b07      	cmp	r3, #7
 8003b94:	dc16      	bgt.n	8003bc4 <_HandleIncomingPacket+0x5c>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	dd3e      	ble.n	8003c18 <_HandleIncomingPacket+0xb0>
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	2b06      	cmp	r3, #6
 8003b9e:	d83b      	bhi.n	8003c18 <_HandleIncomingPacket+0xb0>
 8003ba0:	a201      	add	r2, pc, #4	; (adr r2, 8003ba8 <_HandleIncomingPacket+0x40>)
 8003ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba6:	bf00      	nop
 8003ba8:	08003bcb 	.word	0x08003bcb
 8003bac:	08003bd1 	.word	0x08003bd1
 8003bb0:	08003bd7 	.word	0x08003bd7
 8003bb4:	08003bdd 	.word	0x08003bdd
 8003bb8:	08003be3 	.word	0x08003be3
 8003bbc:	08003be9 	.word	0x08003be9
 8003bc0:	08003bef 	.word	0x08003bef
 8003bc4:	2b7f      	cmp	r3, #127	; 0x7f
 8003bc6:	d036      	beq.n	8003c36 <_HandleIncomingPacket+0xce>
 8003bc8:	e026      	b.n	8003c18 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003bca:	f000 fbab 	bl	8004324 <SEGGER_SYSVIEW_Start>
      break;
 8003bce:	e037      	b.n	8003c40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003bd0:	f000 fc64 	bl	800449c <SEGGER_SYSVIEW_Stop>
      break;
 8003bd4:	e034      	b.n	8003c40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003bd6:	f000 fe3d 	bl	8004854 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003bda:	e031      	b.n	8003c40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003bdc:	f000 fe02 	bl	80047e4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003be0:	e02e      	b.n	8003c40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003be2:	f000 fc81 	bl	80044e8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003be6:	e02b      	b.n	8003c40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003be8:	f001 f8d0 	bl	8004d8c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003bec:	e028      	b.n	8003c40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003bee:	f001 f8af 	bl	8004d50 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003bf2:	e025      	b.n	8003c40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003bf4:	4b14      	ldr	r3, [pc, #80]	; (8003c48 <_HandleIncomingPacket+0xe0>)
 8003bf6:	7e1b      	ldrb	r3, [r3, #24]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	1cfb      	adds	r3, r7, #3
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	4619      	mov	r1, r3
 8003c00:	f7ff fcf2 	bl	80035e8 <SEGGER_RTT_ReadNoLock>
 8003c04:	4603      	mov	r3, r0
 8003c06:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	dd15      	ble.n	8003c3a <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003c0e:	78fb      	ldrb	r3, [r7, #3]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f001 f81d 	bl	8004c50 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003c16:	e010      	b.n	8003c3a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	b25b      	sxtb	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	da0e      	bge.n	8003c3e <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003c20:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <_HandleIncomingPacket+0xe0>)
 8003c22:	7e1b      	ldrb	r3, [r3, #24]
 8003c24:	4618      	mov	r0, r3
 8003c26:	1cfb      	adds	r3, r7, #3
 8003c28:	2201      	movs	r2, #1
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	f7ff fcdc 	bl	80035e8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003c30:	e005      	b.n	8003c3e <_HandleIncomingPacket+0xd6>
    }
  }
 8003c32:	bf00      	nop
 8003c34:	e004      	b.n	8003c40 <_HandleIncomingPacket+0xd8>
      break;
 8003c36:	bf00      	nop
 8003c38:	e002      	b.n	8003c40 <_HandleIncomingPacket+0xd8>
      break;
 8003c3a:	bf00      	nop
 8003c3c:	e000      	b.n	8003c40 <_HandleIncomingPacket+0xd8>
      break;
 8003c3e:	bf00      	nop
}
 8003c40:	bf00      	nop
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	200143a8 	.word	0x200143a8

08003c4c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08c      	sub	sp, #48	; 0x30
 8003c50:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003c52:	2301      	movs	r3, #1
 8003c54:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003c56:	1d3b      	adds	r3, r7, #4
 8003c58:	3301      	adds	r3, #1
 8003c5a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c60:	4b32      	ldr	r3, [pc, #200]	; (8003d2c <_TrySendOverflowPacket+0xe0>)
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c66:	e00b      	b.n	8003c80 <_TrySendOverflowPacket+0x34>
 8003c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6e:	1c59      	adds	r1, r3, #1
 8003c70:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003c72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	701a      	strb	r2, [r3, #0]
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	09db      	lsrs	r3, r3, #7
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c82:	2b7f      	cmp	r3, #127	; 0x7f
 8003c84:	d8f0      	bhi.n	8003c68 <_TrySendOverflowPacket+0x1c>
 8003c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c94:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003c96:	4b26      	ldr	r3, [pc, #152]	; (8003d30 <_TrySendOverflowPacket+0xe4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003c9c:	4b23      	ldr	r3, [pc, #140]	; (8003d2c <_TrySendOverflowPacket+0xe0>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	623b      	str	r3, [r7, #32]
 8003cae:	e00b      	b.n	8003cc8 <_TrySendOverflowPacket+0x7c>
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	1c59      	adds	r1, r3, #1
 8003cb8:	6279      	str	r1, [r7, #36]	; 0x24
 8003cba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	09db      	lsrs	r3, r3, #7
 8003cc6:	623b      	str	r3, [r7, #32]
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	2b7f      	cmp	r3, #127	; 0x7f
 8003ccc:	d8f0      	bhi.n	8003cb0 <_TrySendOverflowPacket+0x64>
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	627a      	str	r2, [r7, #36]	; 0x24
 8003cd4:	6a3a      	ldr	r2, [r7, #32]
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003cde:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <_TrySendOverflowPacket+0xe0>)
 8003ce0:	785b      	ldrb	r3, [r3, #1]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	1d3b      	adds	r3, r7, #4
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	461a      	mov	r2, r3
 8003cec:	1d3b      	adds	r3, r7, #4
 8003cee:	4619      	mov	r1, r3
 8003cf0:	f7fc fa76 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8003cf8:	f7ff fa46 	bl	8003188 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003d02:	4a0a      	ldr	r2, [pc, #40]	; (8003d2c <_TrySendOverflowPacket+0xe0>)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003d08:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <_TrySendOverflowPacket+0xe0>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <_TrySendOverflowPacket+0xe0>)
 8003d12:	701a      	strb	r2, [r3, #0]
 8003d14:	e004      	b.n	8003d20 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003d16:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <_TrySendOverflowPacket+0xe0>)
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	4a03      	ldr	r2, [pc, #12]	; (8003d2c <_TrySendOverflowPacket+0xe0>)
 8003d1e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003d20:	693b      	ldr	r3, [r7, #16]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3730      	adds	r7, #48	; 0x30
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	200143a8 	.word	0x200143a8
 8003d30:	e0001004 	.word	0xe0001004

08003d34 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	; 0x28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003d40:	4b6d      	ldr	r3, [pc, #436]	; (8003ef8 <_SendPacket+0x1c4>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d010      	beq.n	8003d6a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003d48:	4b6b      	ldr	r3, [pc, #428]	; (8003ef8 <_SendPacket+0x1c4>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80a5 	beq.w	8003e9c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003d52:	4b69      	ldr	r3, [pc, #420]	; (8003ef8 <_SendPacket+0x1c4>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d109      	bne.n	8003d6e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003d5a:	f7ff ff77 	bl	8003c4c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003d5e:	4b66      	ldr	r3, [pc, #408]	; (8003ef8 <_SendPacket+0x1c4>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	f040 809c 	bne.w	8003ea0 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8003d68:	e001      	b.n	8003d6e <_SendPacket+0x3a>
    goto Send;
 8003d6a:	bf00      	nop
 8003d6c:	e000      	b.n	8003d70 <_SendPacket+0x3c>
Send:
 8003d6e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b1f      	cmp	r3, #31
 8003d74:	d809      	bhi.n	8003d8a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003d76:	4b60      	ldr	r3, [pc, #384]	; (8003ef8 <_SendPacket+0x1c4>)
 8003d78:	69da      	ldr	r2, [r3, #28]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f040 808d 	bne.w	8003ea4 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b17      	cmp	r3, #23
 8003d8e:	d807      	bhi.n	8003da0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	701a      	strb	r2, [r3, #0]
 8003d9e:	e03d      	b.n	8003e1c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	2b7f      	cmp	r3, #127	; 0x7f
 8003dac:	d912      	bls.n	8003dd4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	09da      	lsrs	r2, r3, #7
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	3a01      	subs	r2, #1
 8003dc6:	60fa      	str	r2, [r7, #12]
 8003dc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	e006      	b.n	8003de2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b7f      	cmp	r3, #127	; 0x7f
 8003de6:	d912      	bls.n	8003e0e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	09da      	lsrs	r2, r3, #7
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	3a01      	subs	r2, #1
 8003e00:	60fa      	str	r2, [r7, #12]
 8003e02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	701a      	strb	r2, [r3, #0]
 8003e0c:	e006      	b.n	8003e1c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003e1c:	4b37      	ldr	r3, [pc, #220]	; (8003efc <_SendPacket+0x1c8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003e22:	4b35      	ldr	r3, [pc, #212]	; (8003ef8 <_SendPacket+0x1c4>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	623b      	str	r3, [r7, #32]
 8003e34:	e00b      	b.n	8003e4e <_SendPacket+0x11a>
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	1c59      	adds	r1, r3, #1
 8003e3e:	6279      	str	r1, [r7, #36]	; 0x24
 8003e40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	701a      	strb	r2, [r3, #0]
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	09db      	lsrs	r3, r3, #7
 8003e4c:	623b      	str	r3, [r7, #32]
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	2b7f      	cmp	r3, #127	; 0x7f
 8003e52:	d8f0      	bhi.n	8003e36 <_SendPacket+0x102>
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	627a      	str	r2, [r7, #36]	; 0x24
 8003e5a:	6a3a      	ldr	r2, [r7, #32]
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	701a      	strb	r2, [r3, #0]
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003e64:	4b24      	ldr	r3, [pc, #144]	; (8003ef8 <_SendPacket+0x1c4>)
 8003e66:	785b      	ldrb	r3, [r3, #1]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	461a      	mov	r2, r3
 8003e72:	68f9      	ldr	r1, [r7, #12]
 8003e74:	f7fc f9b4 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8003e7c:	f7ff f984 	bl	8003188 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003e86:	4a1c      	ldr	r2, [pc, #112]	; (8003ef8 <_SendPacket+0x1c4>)
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	60d3      	str	r3, [r2, #12]
 8003e8c:	e00b      	b.n	8003ea6 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003e8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <_SendPacket+0x1c4>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	3301      	adds	r3, #1
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	4b18      	ldr	r3, [pc, #96]	; (8003ef8 <_SendPacket+0x1c4>)
 8003e98:	701a      	strb	r2, [r3, #0]
 8003e9a:	e004      	b.n	8003ea6 <_SendPacket+0x172>
    goto SendDone;
 8003e9c:	bf00      	nop
 8003e9e:	e002      	b.n	8003ea6 <_SendPacket+0x172>
      goto SendDone;
 8003ea0:	bf00      	nop
 8003ea2:	e000      	b.n	8003ea6 <_SendPacket+0x172>
      goto SendDone;
 8003ea4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003ea6:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <_SendPacket+0x1c4>)
 8003ea8:	7e1b      	ldrb	r3, [r3, #24]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4a14      	ldr	r2, [pc, #80]	; (8003f00 <_SendPacket+0x1cc>)
 8003eae:	460b      	mov	r3, r1
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	440b      	add	r3, r1
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	336c      	adds	r3, #108	; 0x6c
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b0e      	ldr	r3, [pc, #56]	; (8003ef8 <_SendPacket+0x1c4>)
 8003ebe:	7e1b      	ldrb	r3, [r3, #24]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	490f      	ldr	r1, [pc, #60]	; (8003f00 <_SendPacket+0x1cc>)
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	4403      	add	r3, r0
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	440b      	add	r3, r1
 8003ece:	3370      	adds	r3, #112	; 0x70
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d00b      	beq.n	8003eee <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003ed6:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <_SendPacket+0x1c4>)
 8003ed8:	789b      	ldrb	r3, [r3, #2]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d107      	bne.n	8003eee <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003ede:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <_SendPacket+0x1c4>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003ee4:	f7ff fe40 	bl	8003b68 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003ee8:	4b03      	ldr	r3, [pc, #12]	; (8003ef8 <_SendPacket+0x1c4>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003eee:	bf00      	nop
 8003ef0:	3728      	adds	r7, #40	; 0x28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	200143a8 	.word	0x200143a8
 8003efc:	e0001004 	.word	0xe0001004
 8003f00:	20012ee8 	.word	0x20012ee8

08003f04 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af02      	add	r7, sp, #8
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003f12:	2300      	movs	r3, #0
 8003f14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f18:	4917      	ldr	r1, [pc, #92]	; (8003f78 <SEGGER_SYSVIEW_Init+0x74>)
 8003f1a:	4818      	ldr	r0, [pc, #96]	; (8003f7c <SEGGER_SYSVIEW_Init+0x78>)
 8003f1c:	f7ff fcd6 	bl	80038cc <SEGGER_RTT_AllocUpBuffer>
 8003f20:	4603      	mov	r3, r0
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	4b16      	ldr	r3, [pc, #88]	; (8003f80 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f26:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003f28:	4b15      	ldr	r3, [pc, #84]	; (8003f80 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f2a:	785a      	ldrb	r2, [r3, #1]
 8003f2c:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f2e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003f30:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f32:	7e1b      	ldrb	r3, [r3, #24]
 8003f34:	4618      	mov	r0, r3
 8003f36:	2300      	movs	r3, #0
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	2308      	movs	r3, #8
 8003f3c:	4a11      	ldr	r2, [pc, #68]	; (8003f84 <SEGGER_SYSVIEW_Init+0x80>)
 8003f3e:	490f      	ldr	r1, [pc, #60]	; (8003f7c <SEGGER_SYSVIEW_Init+0x78>)
 8003f40:	f7ff fd48 	bl	80039d4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003f44:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003f4a:	4b0f      	ldr	r3, [pc, #60]	; (8003f88 <SEGGER_SYSVIEW_Init+0x84>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a0c      	ldr	r2, [pc, #48]	; (8003f80 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f50:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003f52:	4a0b      	ldr	r2, [pc, #44]	; (8003f80 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003f58:	4a09      	ldr	r2, [pc, #36]	; (8003f80 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003f5e:	4a08      	ldr	r2, [pc, #32]	; (8003f80 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003f64:	4a06      	ldr	r2, [pc, #24]	; (8003f80 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003f6a:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003f70:	bf00      	nop
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	200133a0 	.word	0x200133a0
 8003f7c:	08005af0 	.word	0x08005af0
 8003f80:	200143a8 	.word	0x200143a8
 8003f84:	200143a0 	.word	0x200143a0
 8003f88:	e0001004 	.word	0xe0001004

08003f8c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003f94:	4a04      	ldr	r2, [pc, #16]	; (8003fa8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6113      	str	r3, [r2, #16]
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	200143a8 	.word	0x200143a8

08003fac <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003fb4:	f3ef 8311 	mrs	r3, BASEPRI
 8003fb8:	f04f 0120 	mov.w	r1, #32
 8003fbc:	f381 8811 	msr	BASEPRI, r1
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	4808      	ldr	r0, [pc, #32]	; (8003fe4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003fc4:	f7ff fdc3 	bl	8003b4e <_PreparePacket>
 8003fc8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	68b9      	ldr	r1, [r7, #8]
 8003fce:	68b8      	ldr	r0, [r7, #8]
 8003fd0:	f7ff feb0 	bl	8003d34 <_SendPacket>
  RECORD_END();
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f383 8811 	msr	BASEPRI, r3
}
 8003fda:	bf00      	nop
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	200143d8 	.word	0x200143d8

08003fe8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003ff2:	f3ef 8311 	mrs	r3, BASEPRI
 8003ff6:	f04f 0120 	mov.w	r1, #32
 8003ffa:	f381 8811 	msr	BASEPRI, r1
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	4816      	ldr	r0, [pc, #88]	; (800405c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004002:	f7ff fda4 	bl	8003b4e <_PreparePacket>
 8004006:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	61fb      	str	r3, [r7, #28]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	61bb      	str	r3, [r7, #24]
 8004014:	e00b      	b.n	800402e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	b2da      	uxtb	r2, r3
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	1c59      	adds	r1, r3, #1
 800401e:	61f9      	str	r1, [r7, #28]
 8004020:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004024:	b2d2      	uxtb	r2, r2
 8004026:	701a      	strb	r2, [r3, #0]
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	09db      	lsrs	r3, r3, #7
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b7f      	cmp	r3, #127	; 0x7f
 8004032:	d8f0      	bhi.n	8004016 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	61fa      	str	r2, [r7, #28]
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	701a      	strb	r2, [r3, #0]
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	68f9      	ldr	r1, [r7, #12]
 8004048:	6938      	ldr	r0, [r7, #16]
 800404a:	f7ff fe73 	bl	8003d34 <_SendPacket>
  RECORD_END();
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f383 8811 	msr	BASEPRI, r3
}
 8004054:	bf00      	nop
 8004056:	3720      	adds	r7, #32
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	200143d8 	.word	0x200143d8

08004060 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004060:	b580      	push	{r7, lr}
 8004062:	b08c      	sub	sp, #48	; 0x30
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800406c:	f3ef 8311 	mrs	r3, BASEPRI
 8004070:	f04f 0120 	mov.w	r1, #32
 8004074:	f381 8811 	msr	BASEPRI, r1
 8004078:	61fb      	str	r3, [r7, #28]
 800407a:	4825      	ldr	r0, [pc, #148]	; (8004110 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800407c:	f7ff fd67 	bl	8003b4e <_PreparePacket>
 8004080:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	62bb      	str	r3, [r7, #40]	; 0x28
 800408e:	e00b      	b.n	80040a8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004092:	b2da      	uxtb	r2, r3
 8004094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004096:	1c59      	adds	r1, r3, #1
 8004098:	62f9      	str	r1, [r7, #44]	; 0x2c
 800409a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]
 80040a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a4:	09db      	lsrs	r3, r3, #7
 80040a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	2b7f      	cmp	r3, #127	; 0x7f
 80040ac:	d8f0      	bhi.n	8004090 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80040ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]
 80040ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040bc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	623b      	str	r3, [r7, #32]
 80040c6:	e00b      	b.n	80040e0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80040c8:	6a3b      	ldr	r3, [r7, #32]
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	1c59      	adds	r1, r3, #1
 80040d0:	6279      	str	r1, [r7, #36]	; 0x24
 80040d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	09db      	lsrs	r3, r3, #7
 80040de:	623b      	str	r3, [r7, #32]
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	2b7f      	cmp	r3, #127	; 0x7f
 80040e4:	d8f0      	bhi.n	80040c8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	627a      	str	r2, [r7, #36]	; 0x24
 80040ec:	6a3a      	ldr	r2, [r7, #32]
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	701a      	strb	r2, [r3, #0]
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	6979      	ldr	r1, [r7, #20]
 80040fa:	69b8      	ldr	r0, [r7, #24]
 80040fc:	f7ff fe1a 	bl	8003d34 <_SendPacket>
  RECORD_END();
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	f383 8811 	msr	BASEPRI, r3
}
 8004106:	bf00      	nop
 8004108:	3730      	adds	r7, #48	; 0x30
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	200143d8 	.word	0x200143d8

08004114 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004114:	b580      	push	{r7, lr}
 8004116:	b08e      	sub	sp, #56	; 0x38
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004122:	f3ef 8311 	mrs	r3, BASEPRI
 8004126:	f04f 0120 	mov.w	r1, #32
 800412a:	f381 8811 	msr	BASEPRI, r1
 800412e:	61fb      	str	r3, [r7, #28]
 8004130:	4832      	ldr	r0, [pc, #200]	; (80041fc <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004132:	f7ff fd0c 	bl	8003b4e <_PreparePacket>
 8004136:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	637b      	str	r3, [r7, #52]	; 0x34
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	633b      	str	r3, [r7, #48]	; 0x30
 8004144:	e00b      	b.n	800415e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	b2da      	uxtb	r2, r3
 800414a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800414c:	1c59      	adds	r1, r3, #1
 800414e:	6379      	str	r1, [r7, #52]	; 0x34
 8004150:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	701a      	strb	r2, [r3, #0]
 8004158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415a:	09db      	lsrs	r3, r3, #7
 800415c:	633b      	str	r3, [r7, #48]	; 0x30
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	2b7f      	cmp	r3, #127	; 0x7f
 8004162:	d8f0      	bhi.n	8004146 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	637a      	str	r2, [r7, #52]	; 0x34
 800416a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	701a      	strb	r2, [r3, #0]
 8004170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004172:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	62bb      	str	r3, [r7, #40]	; 0x28
 800417c:	e00b      	b.n	8004196 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004180:	b2da      	uxtb	r2, r3
 8004182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004184:	1c59      	adds	r1, r3, #1
 8004186:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004188:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	701a      	strb	r2, [r3, #0]
 8004190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004192:	09db      	lsrs	r3, r3, #7
 8004194:	62bb      	str	r3, [r7, #40]	; 0x28
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	2b7f      	cmp	r3, #127	; 0x7f
 800419a:	d8f0      	bhi.n	800417e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800419c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	701a      	strb	r2, [r3, #0]
 80041a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	623b      	str	r3, [r7, #32]
 80041b4:	e00b      	b.n	80041ce <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	1c59      	adds	r1, r3, #1
 80041be:	6279      	str	r1, [r7, #36]	; 0x24
 80041c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	701a      	strb	r2, [r3, #0]
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	09db      	lsrs	r3, r3, #7
 80041cc:	623b      	str	r3, [r7, #32]
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	2b7f      	cmp	r3, #127	; 0x7f
 80041d2:	d8f0      	bhi.n	80041b6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	627a      	str	r2, [r7, #36]	; 0x24
 80041da:	6a3a      	ldr	r2, [r7, #32]
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	701a      	strb	r2, [r3, #0]
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	6979      	ldr	r1, [r7, #20]
 80041e8:	69b8      	ldr	r0, [r7, #24]
 80041ea:	f7ff fda3 	bl	8003d34 <_SendPacket>
  RECORD_END();
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	f383 8811 	msr	BASEPRI, r3
}
 80041f4:	bf00      	nop
 80041f6:	3738      	adds	r7, #56	; 0x38
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	200143d8 	.word	0x200143d8

08004200 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004200:	b580      	push	{r7, lr}
 8004202:	b090      	sub	sp, #64	; 0x40
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800420e:	f3ef 8311 	mrs	r3, BASEPRI
 8004212:	f04f 0120 	mov.w	r1, #32
 8004216:	f381 8811 	msr	BASEPRI, r1
 800421a:	61fb      	str	r3, [r7, #28]
 800421c:	4840      	ldr	r0, [pc, #256]	; (8004320 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800421e:	f7ff fc96 	bl	8003b4e <_PreparePacket>
 8004222:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004230:	e00b      	b.n	800424a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004234:	b2da      	uxtb	r2, r3
 8004236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004238:	1c59      	adds	r1, r3, #1
 800423a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800423c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	701a      	strb	r2, [r3, #0]
 8004244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004246:	09db      	lsrs	r3, r3, #7
 8004248:	63bb      	str	r3, [r7, #56]	; 0x38
 800424a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424c:	2b7f      	cmp	r3, #127	; 0x7f
 800424e:	d8f0      	bhi.n	8004232 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004256:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	701a      	strb	r2, [r3, #0]
 800425c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	637b      	str	r3, [r7, #52]	; 0x34
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	633b      	str	r3, [r7, #48]	; 0x30
 8004268:	e00b      	b.n	8004282 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426c:	b2da      	uxtb	r2, r3
 800426e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004270:	1c59      	adds	r1, r3, #1
 8004272:	6379      	str	r1, [r7, #52]	; 0x34
 8004274:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	701a      	strb	r2, [r3, #0]
 800427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427e:	09db      	lsrs	r3, r3, #7
 8004280:	633b      	str	r3, [r7, #48]	; 0x30
 8004282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004284:	2b7f      	cmp	r3, #127	; 0x7f
 8004286:	d8f0      	bhi.n	800426a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	637a      	str	r2, [r7, #52]	; 0x34
 800428e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	701a      	strb	r2, [r3, #0]
 8004294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004296:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	62bb      	str	r3, [r7, #40]	; 0x28
 80042a0:	e00b      	b.n	80042ba <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80042a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a8:	1c59      	adds	r1, r3, #1
 80042aa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80042ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	701a      	strb	r2, [r3, #0]
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	09db      	lsrs	r3, r3, #7
 80042b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042bc:	2b7f      	cmp	r3, #127	; 0x7f
 80042be:	d8f0      	bhi.n	80042a2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80042c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	701a      	strb	r2, [r3, #0]
 80042cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
 80042d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042d6:	623b      	str	r3, [r7, #32]
 80042d8:	e00b      	b.n	80042f2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	1c59      	adds	r1, r3, #1
 80042e2:	6279      	str	r1, [r7, #36]	; 0x24
 80042e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	701a      	strb	r2, [r3, #0]
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	09db      	lsrs	r3, r3, #7
 80042f0:	623b      	str	r3, [r7, #32]
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	2b7f      	cmp	r3, #127	; 0x7f
 80042f6:	d8f0      	bhi.n	80042da <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	627a      	str	r2, [r7, #36]	; 0x24
 80042fe:	6a3a      	ldr	r2, [r7, #32]
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	701a      	strb	r2, [r3, #0]
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	6979      	ldr	r1, [r7, #20]
 800430c:	69b8      	ldr	r0, [r7, #24]
 800430e:	f7ff fd11 	bl	8003d34 <_SendPacket>
  RECORD_END();
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	f383 8811 	msr	BASEPRI, r3
}
 8004318:	bf00      	nop
 800431a:	3740      	adds	r7, #64	; 0x40
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	200143d8 	.word	0x200143d8

08004324 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004324:	b580      	push	{r7, lr}
 8004326:	b08c      	sub	sp, #48	; 0x30
 8004328:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800432a:	4b59      	ldr	r3, [pc, #356]	; (8004490 <SEGGER_SYSVIEW_Start+0x16c>)
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004330:	f3ef 8311 	mrs	r3, BASEPRI
 8004334:	f04f 0120 	mov.w	r1, #32
 8004338:	f381 8811 	msr	BASEPRI, r1
 800433c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800433e:	4b54      	ldr	r3, [pc, #336]	; (8004490 <SEGGER_SYSVIEW_Start+0x16c>)
 8004340:	785b      	ldrb	r3, [r3, #1]
 8004342:	220a      	movs	r2, #10
 8004344:	4953      	ldr	r1, [pc, #332]	; (8004494 <SEGGER_SYSVIEW_Start+0x170>)
 8004346:	4618      	mov	r0, r3
 8004348:	f7fb ff4a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004352:	f7fe ff19 	bl	8003188 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004356:	200a      	movs	r0, #10
 8004358:	f7ff fe28 	bl	8003fac <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800435c:	f3ef 8311 	mrs	r3, BASEPRI
 8004360:	f04f 0120 	mov.w	r1, #32
 8004364:	f381 8811 	msr	BASEPRI, r1
 8004368:	60bb      	str	r3, [r7, #8]
 800436a:	484b      	ldr	r0, [pc, #300]	; (8004498 <SEGGER_SYSVIEW_Start+0x174>)
 800436c:	f7ff fbef 	bl	8003b4e <_PreparePacket>
 8004370:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800437a:	4b45      	ldr	r3, [pc, #276]	; (8004490 <SEGGER_SYSVIEW_Start+0x16c>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004380:	e00b      	b.n	800439a <SEGGER_SYSVIEW_Start+0x76>
 8004382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004384:	b2da      	uxtb	r2, r3
 8004386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004388:	1c59      	adds	r1, r3, #1
 800438a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800438c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	701a      	strb	r2, [r3, #0]
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	09db      	lsrs	r3, r3, #7
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28
 800439a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439c:	2b7f      	cmp	r3, #127	; 0x7f
 800439e:	d8f0      	bhi.n	8004382 <SEGGER_SYSVIEW_Start+0x5e>
 80043a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	701a      	strb	r2, [r3, #0]
 80043ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ae:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
 80043b4:	4b36      	ldr	r3, [pc, #216]	; (8004490 <SEGGER_SYSVIEW_Start+0x16c>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	623b      	str	r3, [r7, #32]
 80043ba:	e00b      	b.n	80043d4 <SEGGER_SYSVIEW_Start+0xb0>
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	1c59      	adds	r1, r3, #1
 80043c4:	6279      	str	r1, [r7, #36]	; 0x24
 80043c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	701a      	strb	r2, [r3, #0]
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	09db      	lsrs	r3, r3, #7
 80043d2:	623b      	str	r3, [r7, #32]
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	2b7f      	cmp	r3, #127	; 0x7f
 80043d8:	d8f0      	bhi.n	80043bc <SEGGER_SYSVIEW_Start+0x98>
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	627a      	str	r2, [r7, #36]	; 0x24
 80043e0:	6a3a      	ldr	r2, [r7, #32]
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	701a      	strb	r2, [r3, #0]
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	4b28      	ldr	r3, [pc, #160]	; (8004490 <SEGGER_SYSVIEW_Start+0x16c>)
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	61bb      	str	r3, [r7, #24]
 80043f4:	e00b      	b.n	800440e <SEGGER_SYSVIEW_Start+0xea>
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	1c59      	adds	r1, r3, #1
 80043fe:	61f9      	str	r1, [r7, #28]
 8004400:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	701a      	strb	r2, [r3, #0]
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	09db      	lsrs	r3, r3, #7
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	2b7f      	cmp	r3, #127	; 0x7f
 8004412:	d8f0      	bhi.n	80043f6 <SEGGER_SYSVIEW_Start+0xd2>
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	61fa      	str	r2, [r7, #28]
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	701a      	strb	r2, [r3, #0]
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	2300      	movs	r3, #0
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	e00b      	b.n	8004446 <SEGGER_SYSVIEW_Start+0x122>
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	b2da      	uxtb	r2, r3
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	1c59      	adds	r1, r3, #1
 8004436:	6179      	str	r1, [r7, #20]
 8004438:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	701a      	strb	r2, [r3, #0]
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	09db      	lsrs	r3, r3, #7
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	2b7f      	cmp	r3, #127	; 0x7f
 800444a:	d8f0      	bhi.n	800442e <SEGGER_SYSVIEW_Start+0x10a>
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	617a      	str	r2, [r7, #20]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	701a      	strb	r2, [r3, #0]
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800445c:	2218      	movs	r2, #24
 800445e:	6839      	ldr	r1, [r7, #0]
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7ff fc67 	bl	8003d34 <_SendPacket>
      RECORD_END();
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800446c:	4b08      	ldr	r3, [pc, #32]	; (8004490 <SEGGER_SYSVIEW_Start+0x16c>)
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004474:	4b06      	ldr	r3, [pc, #24]	; (8004490 <SEGGER_SYSVIEW_Start+0x16c>)
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800447a:	f000 f9eb 	bl	8004854 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800447e:	f000 f9b1 	bl	80047e4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004482:	f000 fc83 	bl	8004d8c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004486:	bf00      	nop
 8004488:	3730      	adds	r7, #48	; 0x30
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	200143a8 	.word	0x200143a8
 8004494:	08005b04 	.word	0x08005b04
 8004498:	200143d8 	.word	0x200143d8

0800449c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80044a2:	f3ef 8311 	mrs	r3, BASEPRI
 80044a6:	f04f 0120 	mov.w	r1, #32
 80044aa:	f381 8811 	msr	BASEPRI, r1
 80044ae:	607b      	str	r3, [r7, #4]
 80044b0:	480b      	ldr	r0, [pc, #44]	; (80044e0 <SEGGER_SYSVIEW_Stop+0x44>)
 80044b2:	f7ff fb4c 	bl	8003b4e <_PreparePacket>
 80044b6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80044b8:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <SEGGER_SYSVIEW_Stop+0x48>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d007      	beq.n	80044d0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80044c0:	220b      	movs	r2, #11
 80044c2:	6839      	ldr	r1, [r7, #0]
 80044c4:	6838      	ldr	r0, [r7, #0]
 80044c6:	f7ff fc35 	bl	8003d34 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <SEGGER_SYSVIEW_Stop+0x48>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f383 8811 	msr	BASEPRI, r3
}
 80044d6:	bf00      	nop
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	200143d8 	.word	0x200143d8
 80044e4:	200143a8 	.word	0x200143a8

080044e8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08c      	sub	sp, #48	; 0x30
 80044ec:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80044ee:	f3ef 8311 	mrs	r3, BASEPRI
 80044f2:	f04f 0120 	mov.w	r1, #32
 80044f6:	f381 8811 	msr	BASEPRI, r1
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	4845      	ldr	r0, [pc, #276]	; (8004614 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80044fe:	f7ff fb26 	bl	8003b4e <_PreparePacket>
 8004502:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800450c:	4b42      	ldr	r3, [pc, #264]	; (8004618 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	62bb      	str	r3, [r7, #40]	; 0x28
 8004512:	e00b      	b.n	800452c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004516:	b2da      	uxtb	r2, r3
 8004518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451a:	1c59      	adds	r1, r3, #1
 800451c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800451e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	701a      	strb	r2, [r3, #0]
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004528:	09db      	lsrs	r3, r3, #7
 800452a:	62bb      	str	r3, [r7, #40]	; 0x28
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	2b7f      	cmp	r3, #127	; 0x7f
 8004530:	d8f0      	bhi.n	8004514 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	701a      	strb	r2, [r3, #0]
 800453e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004540:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
 8004546:	4b34      	ldr	r3, [pc, #208]	; (8004618 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	623b      	str	r3, [r7, #32]
 800454c:	e00b      	b.n	8004566 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	1c59      	adds	r1, r3, #1
 8004556:	6279      	str	r1, [r7, #36]	; 0x24
 8004558:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	09db      	lsrs	r3, r3, #7
 8004564:	623b      	str	r3, [r7, #32]
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	2b7f      	cmp	r3, #127	; 0x7f
 800456a:	d8f0      	bhi.n	800454e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	627a      	str	r2, [r7, #36]	; 0x24
 8004572:	6a3a      	ldr	r2, [r7, #32]
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	701a      	strb	r2, [r3, #0]
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	61fb      	str	r3, [r7, #28]
 8004580:	4b25      	ldr	r3, [pc, #148]	; (8004618 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	61bb      	str	r3, [r7, #24]
 8004586:	e00b      	b.n	80045a0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	b2da      	uxtb	r2, r3
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	1c59      	adds	r1, r3, #1
 8004590:	61f9      	str	r1, [r7, #28]
 8004592:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	09db      	lsrs	r3, r3, #7
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2b7f      	cmp	r3, #127	; 0x7f
 80045a4:	d8f0      	bhi.n	8004588 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	61fa      	str	r2, [r7, #28]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	701a      	strb	r2, [r3, #0]
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	2300      	movs	r3, #0
 80045bc:	613b      	str	r3, [r7, #16]
 80045be:	e00b      	b.n	80045d8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	1c59      	adds	r1, r3, #1
 80045c8:	6179      	str	r1, [r7, #20]
 80045ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	701a      	strb	r2, [r3, #0]
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	09db      	lsrs	r3, r3, #7
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b7f      	cmp	r3, #127	; 0x7f
 80045dc:	d8f0      	bhi.n	80045c0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	617a      	str	r2, [r7, #20]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80045ee:	2218      	movs	r2, #24
 80045f0:	6879      	ldr	r1, [r7, #4]
 80045f2:	68b8      	ldr	r0, [r7, #8]
 80045f4:	f7ff fb9e 	bl	8003d34 <_SendPacket>
  RECORD_END();
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80045fe:	4b06      	ldr	r3, [pc, #24]	; (8004618 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004606:	4b04      	ldr	r3, [pc, #16]	; (8004618 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	4798      	blx	r3
  }
}
 800460c:	bf00      	nop
 800460e:	3730      	adds	r7, #48	; 0x30
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	200143d8 	.word	0x200143d8
 8004618:	200143a8 	.word	0x200143a8

0800461c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800461c:	b580      	push	{r7, lr}
 800461e:	b092      	sub	sp, #72	; 0x48
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004624:	f3ef 8311 	mrs	r3, BASEPRI
 8004628:	f04f 0120 	mov.w	r1, #32
 800462c:	f381 8811 	msr	BASEPRI, r1
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	486a      	ldr	r0, [pc, #424]	; (80047dc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004634:	f7ff fa8b 	bl	8003b4e <_PreparePacket>
 8004638:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	647b      	str	r3, [r7, #68]	; 0x44
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	4b66      	ldr	r3, [pc, #408]	; (80047e0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	643b      	str	r3, [r7, #64]	; 0x40
 800464e:	e00b      	b.n	8004668 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004652:	b2da      	uxtb	r2, r3
 8004654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004656:	1c59      	adds	r1, r3, #1
 8004658:	6479      	str	r1, [r7, #68]	; 0x44
 800465a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004664:	09db      	lsrs	r3, r3, #7
 8004666:	643b      	str	r3, [r7, #64]	; 0x40
 8004668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800466a:	2b7f      	cmp	r3, #127	; 0x7f
 800466c:	d8f0      	bhi.n	8004650 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800466e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	647a      	str	r2, [r7, #68]	; 0x44
 8004674:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	701a      	strb	r2, [r3, #0]
 800467a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800467c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	63bb      	str	r3, [r7, #56]	; 0x38
 8004688:	e00b      	b.n	80046a2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800468a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468c:	b2da      	uxtb	r2, r3
 800468e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004690:	1c59      	adds	r1, r3, #1
 8004692:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004694:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	701a      	strb	r2, [r3, #0]
 800469c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469e:	09db      	lsrs	r3, r3, #7
 80046a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80046a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a4:	2b7f      	cmp	r3, #127	; 0x7f
 80046a6:	d8f0      	bhi.n	800468a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80046a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80046ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	701a      	strb	r2, [r3, #0]
 80046b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2220      	movs	r2, #32
 80046be:	4619      	mov	r1, r3
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f7ff f9f7 	bl	8003ab4 <_EncodeStr>
 80046c6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80046c8:	2209      	movs	r2, #9
 80046ca:	68f9      	ldr	r1, [r7, #12]
 80046cc:	6938      	ldr	r0, [r7, #16]
 80046ce:	f7ff fb31 	bl	8003d34 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	637b      	str	r3, [r7, #52]	; 0x34
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	4b40      	ldr	r3, [pc, #256]	; (80047e0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	633b      	str	r3, [r7, #48]	; 0x30
 80046e6:	e00b      	b.n	8004700 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80046e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ee:	1c59      	adds	r1, r3, #1
 80046f0:	6379      	str	r1, [r7, #52]	; 0x34
 80046f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	09db      	lsrs	r3, r3, #7
 80046fe:	633b      	str	r3, [r7, #48]	; 0x30
 8004700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004702:	2b7f      	cmp	r3, #127	; 0x7f
 8004704:	d8f0      	bhi.n	80046e8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	637a      	str	r2, [r7, #52]	; 0x34
 800470c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	701a      	strb	r2, [r3, #0]
 8004712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004714:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004720:	e00b      	b.n	800473a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004724:	b2da      	uxtb	r2, r3
 8004726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004728:	1c59      	adds	r1, r3, #1
 800472a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800472c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	09db      	lsrs	r3, r3, #7
 8004738:	62bb      	str	r3, [r7, #40]	; 0x28
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	2b7f      	cmp	r3, #127	; 0x7f
 800473e:	d8f0      	bhi.n	8004722 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	701a      	strb	r2, [r3, #0]
 800474c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	623b      	str	r3, [r7, #32]
 800475a:	e00b      	b.n	8004774 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	b2da      	uxtb	r2, r3
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	1c59      	adds	r1, r3, #1
 8004764:	6279      	str	r1, [r7, #36]	; 0x24
 8004766:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	701a      	strb	r2, [r3, #0]
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	09db      	lsrs	r3, r3, #7
 8004772:	623b      	str	r3, [r7, #32]
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	2b7f      	cmp	r3, #127	; 0x7f
 8004778:	d8f0      	bhi.n	800475c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	1c5a      	adds	r2, r3, #1
 800477e:	627a      	str	r2, [r7, #36]	; 0x24
 8004780:	6a3a      	ldr	r2, [r7, #32]
 8004782:	b2d2      	uxtb	r2, r2
 8004784:	701a      	strb	r2, [r3, #0]
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	61fb      	str	r3, [r7, #28]
 800478e:	2300      	movs	r3, #0
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	e00b      	b.n	80047ac <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	b2da      	uxtb	r2, r3
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	1c59      	adds	r1, r3, #1
 800479c:	61f9      	str	r1, [r7, #28]
 800479e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	701a      	strb	r2, [r3, #0]
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	09db      	lsrs	r3, r3, #7
 80047aa:	61bb      	str	r3, [r7, #24]
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b7f      	cmp	r3, #127	; 0x7f
 80047b0:	d8f0      	bhi.n	8004794 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	61fa      	str	r2, [r7, #28]
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80047c2:	2215      	movs	r2, #21
 80047c4:	68f9      	ldr	r1, [r7, #12]
 80047c6:	6938      	ldr	r0, [r7, #16]
 80047c8:	f7ff fab4 	bl	8003d34 <_SendPacket>
  RECORD_END();
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f383 8811 	msr	BASEPRI, r3
}
 80047d2:	bf00      	nop
 80047d4:	3748      	adds	r7, #72	; 0x48
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	200143d8 	.word	0x200143d8
 80047e0:	200143a8 	.word	0x200143a8

080047e4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80047e8:	4b07      	ldr	r3, [pc, #28]	; (8004808 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80047f0:	4b05      	ldr	r3, [pc, #20]	; (8004808 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80047fa:	4b03      	ldr	r3, [pc, #12]	; (8004808 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	4798      	blx	r3
  }
}
 8004802:	bf00      	nop
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	200143a8 	.word	0x200143a8

0800480c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004814:	f3ef 8311 	mrs	r3, BASEPRI
 8004818:	f04f 0120 	mov.w	r1, #32
 800481c:	f381 8811 	msr	BASEPRI, r1
 8004820:	617b      	str	r3, [r7, #20]
 8004822:	480b      	ldr	r0, [pc, #44]	; (8004850 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004824:	f7ff f993 	bl	8003b4e <_PreparePacket>
 8004828:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800482a:	2280      	movs	r2, #128	; 0x80
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	6938      	ldr	r0, [r7, #16]
 8004830:	f7ff f940 	bl	8003ab4 <_EncodeStr>
 8004834:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004836:	220e      	movs	r2, #14
 8004838:	68f9      	ldr	r1, [r7, #12]
 800483a:	6938      	ldr	r0, [r7, #16]
 800483c:	f7ff fa7a 	bl	8003d34 <_SendPacket>
  RECORD_END();
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f383 8811 	msr	BASEPRI, r3
}
 8004846:	bf00      	nop
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	200143d8 	.word	0x200143d8

08004854 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004854:	b590      	push	{r4, r7, lr}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800485a:	4b15      	ldr	r3, [pc, #84]	; (80048b0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d01a      	beq.n	8004898 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004862:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d015      	beq.n	8004898 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800486c:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4798      	blx	r3
 8004874:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004878:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800487a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	f04f 0300 	mov.w	r3, #0
 8004886:	000a      	movs	r2, r1
 8004888:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800488a:	4613      	mov	r3, r2
 800488c:	461a      	mov	r2, r3
 800488e:	4621      	mov	r1, r4
 8004890:	200d      	movs	r0, #13
 8004892:	f7ff fbe5 	bl	8004060 <SEGGER_SYSVIEW_RecordU32x2>
 8004896:	e006      	b.n	80048a6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004898:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4619      	mov	r1, r3
 800489e:	200c      	movs	r0, #12
 80048a0:	f7ff fba2 	bl	8003fe8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd90      	pop	{r4, r7, pc}
 80048ae:	bf00      	nop
 80048b0:	200143a8 	.word	0x200143a8
 80048b4:	e0001004 	.word	0xe0001004

080048b8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80048be:	f3ef 8311 	mrs	r3, BASEPRI
 80048c2:	f04f 0120 	mov.w	r1, #32
 80048c6:	f381 8811 	msr	BASEPRI, r1
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	4819      	ldr	r0, [pc, #100]	; (8004934 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80048ce:	f7ff f93e 	bl	8003b4e <_PreparePacket>
 80048d2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80048d8:	4b17      	ldr	r3, [pc, #92]	; (8004938 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	e00b      	b.n	8004904 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	1c59      	adds	r1, r3, #1
 80048f4:	6179      	str	r1, [r7, #20]
 80048f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	09db      	lsrs	r3, r3, #7
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	2b7f      	cmp	r3, #127	; 0x7f
 8004908:	d8f0      	bhi.n	80048ec <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	617a      	str	r2, [r7, #20]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800491a:	2202      	movs	r2, #2
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	68b8      	ldr	r0, [r7, #8]
 8004920:	f7ff fa08 	bl	8003d34 <_SendPacket>
  RECORD_END();
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f383 8811 	msr	BASEPRI, r3
}
 800492a:	bf00      	nop
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	200143d8 	.word	0x200143d8
 8004938:	e000ed04 	.word	0xe000ed04

0800493c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004942:	f3ef 8311 	mrs	r3, BASEPRI
 8004946:	f04f 0120 	mov.w	r1, #32
 800494a:	f381 8811 	msr	BASEPRI, r1
 800494e:	607b      	str	r3, [r7, #4]
 8004950:	4807      	ldr	r0, [pc, #28]	; (8004970 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004952:	f7ff f8fc 	bl	8003b4e <_PreparePacket>
 8004956:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004958:	2203      	movs	r2, #3
 800495a:	6839      	ldr	r1, [r7, #0]
 800495c:	6838      	ldr	r0, [r7, #0]
 800495e:	f7ff f9e9 	bl	8003d34 <_SendPacket>
  RECORD_END();
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f383 8811 	msr	BASEPRI, r3
}
 8004968:	bf00      	nop
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	200143d8 	.word	0x200143d8

08004974 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800497a:	f3ef 8311 	mrs	r3, BASEPRI
 800497e:	f04f 0120 	mov.w	r1, #32
 8004982:	f381 8811 	msr	BASEPRI, r1
 8004986:	607b      	str	r3, [r7, #4]
 8004988:	4807      	ldr	r0, [pc, #28]	; (80049a8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800498a:	f7ff f8e0 	bl	8003b4e <_PreparePacket>
 800498e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004990:	2212      	movs	r2, #18
 8004992:	6839      	ldr	r1, [r7, #0]
 8004994:	6838      	ldr	r0, [r7, #0]
 8004996:	f7ff f9cd 	bl	8003d34 <_SendPacket>
  RECORD_END();
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f383 8811 	msr	BASEPRI, r3
}
 80049a0:	bf00      	nop
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	200143d8 	.word	0x200143d8

080049ac <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80049b2:	f3ef 8311 	mrs	r3, BASEPRI
 80049b6:	f04f 0120 	mov.w	r1, #32
 80049ba:	f381 8811 	msr	BASEPRI, r1
 80049be:	607b      	str	r3, [r7, #4]
 80049c0:	4807      	ldr	r0, [pc, #28]	; (80049e0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80049c2:	f7ff f8c4 	bl	8003b4e <_PreparePacket>
 80049c6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80049c8:	2211      	movs	r2, #17
 80049ca:	6839      	ldr	r1, [r7, #0]
 80049cc:	6838      	ldr	r0, [r7, #0]
 80049ce:	f7ff f9b1 	bl	8003d34 <_SendPacket>
  RECORD_END();
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f383 8811 	msr	BASEPRI, r3
}
 80049d8:	bf00      	nop
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	200143d8 	.word	0x200143d8

080049e4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80049ec:	f3ef 8311 	mrs	r3, BASEPRI
 80049f0:	f04f 0120 	mov.w	r1, #32
 80049f4:	f381 8811 	msr	BASEPRI, r1
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	4819      	ldr	r0, [pc, #100]	; (8004a60 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80049fc:	f7ff f8a7 	bl	8003b4e <_PreparePacket>
 8004a00:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004a06:	4b17      	ldr	r3, [pc, #92]	; (8004a64 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	61fb      	str	r3, [r7, #28]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	e00b      	b.n	8004a32 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	1c59      	adds	r1, r3, #1
 8004a22:	61f9      	str	r1, [r7, #28]
 8004a24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	701a      	strb	r2, [r3, #0]
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	09db      	lsrs	r3, r3, #7
 8004a30:	61bb      	str	r3, [r7, #24]
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	2b7f      	cmp	r3, #127	; 0x7f
 8004a36:	d8f0      	bhi.n	8004a1a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	61fa      	str	r2, [r7, #28]
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	701a      	strb	r2, [r3, #0]
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004a48:	2208      	movs	r2, #8
 8004a4a:	68f9      	ldr	r1, [r7, #12]
 8004a4c:	6938      	ldr	r0, [r7, #16]
 8004a4e:	f7ff f971 	bl	8003d34 <_SendPacket>
  RECORD_END();
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f383 8811 	msr	BASEPRI, r3
}
 8004a58:	bf00      	nop
 8004a5a:	3720      	adds	r7, #32
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	200143d8 	.word	0x200143d8
 8004a64:	200143a8 	.word	0x200143a8

08004a68 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004a70:	f3ef 8311 	mrs	r3, BASEPRI
 8004a74:	f04f 0120 	mov.w	r1, #32
 8004a78:	f381 8811 	msr	BASEPRI, r1
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	4819      	ldr	r0, [pc, #100]	; (8004ae4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004a80:	f7ff f865 	bl	8003b4e <_PreparePacket>
 8004a84:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004a8a:	4b17      	ldr	r3, [pc, #92]	; (8004ae8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	61bb      	str	r3, [r7, #24]
 8004a9c:	e00b      	b.n	8004ab6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	1c59      	adds	r1, r3, #1
 8004aa6:	61f9      	str	r1, [r7, #28]
 8004aa8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	701a      	strb	r2, [r3, #0]
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	09db      	lsrs	r3, r3, #7
 8004ab4:	61bb      	str	r3, [r7, #24]
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	2b7f      	cmp	r3, #127	; 0x7f
 8004aba:	d8f0      	bhi.n	8004a9e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	61fa      	str	r2, [r7, #28]
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	701a      	strb	r2, [r3, #0]
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004acc:	2204      	movs	r2, #4
 8004ace:	68f9      	ldr	r1, [r7, #12]
 8004ad0:	6938      	ldr	r0, [r7, #16]
 8004ad2:	f7ff f92f 	bl	8003d34 <_SendPacket>
  RECORD_END();
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f383 8811 	msr	BASEPRI, r3
}
 8004adc:	bf00      	nop
 8004ade:	3720      	adds	r7, #32
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	200143d8 	.word	0x200143d8
 8004ae8:	200143a8 	.word	0x200143a8

08004aec <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004af4:	f3ef 8311 	mrs	r3, BASEPRI
 8004af8:	f04f 0120 	mov.w	r1, #32
 8004afc:	f381 8811 	msr	BASEPRI, r1
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	4819      	ldr	r0, [pc, #100]	; (8004b68 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004b04:	f7ff f823 	bl	8003b4e <_PreparePacket>
 8004b08:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004b0e:	4b17      	ldr	r3, [pc, #92]	; (8004b6c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	61fb      	str	r3, [r7, #28]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	61bb      	str	r3, [r7, #24]
 8004b20:	e00b      	b.n	8004b3a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	1c59      	adds	r1, r3, #1
 8004b2a:	61f9      	str	r1, [r7, #28]
 8004b2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	701a      	strb	r2, [r3, #0]
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	09db      	lsrs	r3, r3, #7
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b3e:	d8f0      	bhi.n	8004b22 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	61fa      	str	r2, [r7, #28]
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	701a      	strb	r2, [r3, #0]
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004b50:	2206      	movs	r2, #6
 8004b52:	68f9      	ldr	r1, [r7, #12]
 8004b54:	6938      	ldr	r0, [r7, #16]
 8004b56:	f7ff f8ed 	bl	8003d34 <_SendPacket>
  RECORD_END();
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f383 8811 	msr	BASEPRI, r3
}
 8004b60:	bf00      	nop
 8004b62:	3720      	adds	r7, #32
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	200143d8 	.word	0x200143d8
 8004b6c:	200143a8 	.word	0x200143a8

08004b70 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08a      	sub	sp, #40	; 0x28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004b7a:	f3ef 8311 	mrs	r3, BASEPRI
 8004b7e:	f04f 0120 	mov.w	r1, #32
 8004b82:	f381 8811 	msr	BASEPRI, r1
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	4827      	ldr	r0, [pc, #156]	; (8004c28 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004b8a:	f7fe ffe0 	bl	8003b4e <_PreparePacket>
 8004b8e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004b94:	4b25      	ldr	r3, [pc, #148]	; (8004c2c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	623b      	str	r3, [r7, #32]
 8004ba6:	e00b      	b.n	8004bc0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	1c59      	adds	r1, r3, #1
 8004bb0:	6279      	str	r1, [r7, #36]	; 0x24
 8004bb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	09db      	lsrs	r3, r3, #7
 8004bbe:	623b      	str	r3, [r7, #32]
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	2b7f      	cmp	r3, #127	; 0x7f
 8004bc4:	d8f0      	bhi.n	8004ba8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	627a      	str	r2, [r7, #36]	; 0x24
 8004bcc:	6a3a      	ldr	r2, [r7, #32]
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	701a      	strb	r2, [r3, #0]
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	61fb      	str	r3, [r7, #28]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	61bb      	str	r3, [r7, #24]
 8004bde:	e00b      	b.n	8004bf8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	1c59      	adds	r1, r3, #1
 8004be8:	61f9      	str	r1, [r7, #28]
 8004bea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	701a      	strb	r2, [r3, #0]
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	09db      	lsrs	r3, r3, #7
 8004bf6:	61bb      	str	r3, [r7, #24]
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	2b7f      	cmp	r3, #127	; 0x7f
 8004bfc:	d8f0      	bhi.n	8004be0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	61fa      	str	r2, [r7, #28]
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004c0e:	2207      	movs	r2, #7
 8004c10:	68f9      	ldr	r1, [r7, #12]
 8004c12:	6938      	ldr	r0, [r7, #16]
 8004c14:	f7ff f88e 	bl	8003d34 <_SendPacket>
  RECORD_END();
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f383 8811 	msr	BASEPRI, r3
}
 8004c1e:	bf00      	nop
 8004c20:	3728      	adds	r7, #40	; 0x28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	200143d8 	.word	0x200143d8
 8004c2c:	200143a8 	.word	0x200143a8

08004c30 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004c38:	4b04      	ldr	r3, [pc, #16]	; (8004c4c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	1ad3      	subs	r3, r2, r3
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	200143a8 	.word	0x200143a8

08004c50 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08c      	sub	sp, #48	; 0x30
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	4603      	mov	r3, r0
 8004c58:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004c5a:	4b3b      	ldr	r3, [pc, #236]	; (8004d48 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d06d      	beq.n	8004d3e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004c62:	4b39      	ldr	r3, [pc, #228]	; (8004d48 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004c68:	2300      	movs	r3, #0
 8004c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c6c:	e008      	b.n	8004c80 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d007      	beq.n	8004c8a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c80:	79fb      	ldrb	r3, [r7, #7]
 8004c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d3f2      	bcc.n	8004c6e <SEGGER_SYSVIEW_SendModule+0x1e>
 8004c88:	e000      	b.n	8004c8c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004c8a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d055      	beq.n	8004d3e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c92:	f3ef 8311 	mrs	r3, BASEPRI
 8004c96:	f04f 0120 	mov.w	r1, #32
 8004c9a:	f381 8811 	msr	BASEPRI, r1
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	482a      	ldr	r0, [pc, #168]	; (8004d4c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004ca2:	f7fe ff54 	bl	8003b4e <_PreparePacket>
 8004ca6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	623b      	str	r3, [r7, #32]
 8004cb4:	e00b      	b.n	8004cce <SEGGER_SYSVIEW_SendModule+0x7e>
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	1c59      	adds	r1, r3, #1
 8004cbe:	6279      	str	r1, [r7, #36]	; 0x24
 8004cc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cc4:	b2d2      	uxtb	r2, r2
 8004cc6:	701a      	strb	r2, [r3, #0]
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	09db      	lsrs	r3, r3, #7
 8004ccc:	623b      	str	r3, [r7, #32]
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	2b7f      	cmp	r3, #127	; 0x7f
 8004cd2:	d8f0      	bhi.n	8004cb6 <SEGGER_SYSVIEW_SendModule+0x66>
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	627a      	str	r2, [r7, #36]	; 0x24
 8004cda:	6a3a      	ldr	r2, [r7, #32]
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	701a      	strb	r2, [r3, #0]
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	61fb      	str	r3, [r7, #28]
 8004ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	61bb      	str	r3, [r7, #24]
 8004cee:	e00b      	b.n	8004d08 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	1c59      	adds	r1, r3, #1
 8004cf8:	61f9      	str	r1, [r7, #28]
 8004cfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	09db      	lsrs	r3, r3, #7
 8004d06:	61bb      	str	r3, [r7, #24]
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d0c:	d8f0      	bhi.n	8004cf0 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	61fa      	str	r2, [r7, #28]
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2280      	movs	r2, #128	; 0x80
 8004d24:	4619      	mov	r1, r3
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f7fe fec4 	bl	8003ab4 <_EncodeStr>
 8004d2c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004d2e:	2216      	movs	r2, #22
 8004d30:	68f9      	ldr	r1, [r7, #12]
 8004d32:	6938      	ldr	r0, [r7, #16]
 8004d34:	f7fe fffe 	bl	8003d34 <_SendPacket>
      RECORD_END();
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004d3e:	bf00      	nop
 8004d40:	3730      	adds	r7, #48	; 0x30
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	200143d0 	.word	0x200143d0
 8004d4c:	200143d8 	.word	0x200143d8

08004d50 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004d56:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00f      	beq.n	8004d7e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004d5e:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f2      	bne.n	8004d64 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	200143d0 	.word	0x200143d0

08004d8c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004d92:	f3ef 8311 	mrs	r3, BASEPRI
 8004d96:	f04f 0120 	mov.w	r1, #32
 8004d9a:	f381 8811 	msr	BASEPRI, r1
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	4817      	ldr	r0, [pc, #92]	; (8004e00 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004da2:	f7fe fed4 	bl	8003b4e <_PreparePacket>
 8004da6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	4b14      	ldr	r3, [pc, #80]	; (8004e04 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	613b      	str	r3, [r7, #16]
 8004db6:	e00b      	b.n	8004dd0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	1c59      	adds	r1, r3, #1
 8004dc0:	6179      	str	r1, [r7, #20]
 8004dc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	701a      	strb	r2, [r3, #0]
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	09db      	lsrs	r3, r3, #7
 8004dce:	613b      	str	r3, [r7, #16]
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	2b7f      	cmp	r3, #127	; 0x7f
 8004dd4:	d8f0      	bhi.n	8004db8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	617a      	str	r2, [r7, #20]
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004de6:	221b      	movs	r2, #27
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	68b8      	ldr	r0, [r7, #8]
 8004dec:	f7fe ffa2 	bl	8003d34 <_SendPacket>
  RECORD_END();
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f383 8811 	msr	BASEPRI, r3
}
 8004df6:	bf00      	nop
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	200143d8 	.word	0x200143d8
 8004e04:	200143d4 	.word	0x200143d4

08004e08 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08a      	sub	sp, #40	; 0x28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e10:	f3ef 8311 	mrs	r3, BASEPRI
 8004e14:	f04f 0120 	mov.w	r1, #32
 8004e18:	f381 8811 	msr	BASEPRI, r1
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	4827      	ldr	r0, [pc, #156]	; (8004ebc <SEGGER_SYSVIEW_Warn+0xb4>)
 8004e20:	f7fe fe95 	bl	8003b4e <_PreparePacket>
 8004e24:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e26:	2280      	movs	r2, #128	; 0x80
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	6938      	ldr	r0, [r7, #16]
 8004e2c:	f7fe fe42 	bl	8003ab4 <_EncodeStr>
 8004e30:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	627b      	str	r3, [r7, #36]	; 0x24
 8004e36:	2301      	movs	r3, #1
 8004e38:	623b      	str	r3, [r7, #32]
 8004e3a:	e00b      	b.n	8004e54 <SEGGER_SYSVIEW_Warn+0x4c>
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	1c59      	adds	r1, r3, #1
 8004e44:	6279      	str	r1, [r7, #36]	; 0x24
 8004e46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	701a      	strb	r2, [r3, #0]
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	09db      	lsrs	r3, r3, #7
 8004e52:	623b      	str	r3, [r7, #32]
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	2b7f      	cmp	r3, #127	; 0x7f
 8004e58:	d8f0      	bhi.n	8004e3c <SEGGER_SYSVIEW_Warn+0x34>
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	627a      	str	r2, [r7, #36]	; 0x24
 8004e60:	6a3a      	ldr	r2, [r7, #32]
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	61fb      	str	r3, [r7, #28]
 8004e6e:	2300      	movs	r3, #0
 8004e70:	61bb      	str	r3, [r7, #24]
 8004e72:	e00b      	b.n	8004e8c <SEGGER_SYSVIEW_Warn+0x84>
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	1c59      	adds	r1, r3, #1
 8004e7c:	61f9      	str	r1, [r7, #28]
 8004e7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e82:	b2d2      	uxtb	r2, r2
 8004e84:	701a      	strb	r2, [r3, #0]
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	09db      	lsrs	r3, r3, #7
 8004e8a:	61bb      	str	r3, [r7, #24]
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e90:	d8f0      	bhi.n	8004e74 <SEGGER_SYSVIEW_Warn+0x6c>
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	61fa      	str	r2, [r7, #28]
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	701a      	strb	r2, [r3, #0]
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004ea2:	221a      	movs	r2, #26
 8004ea4:	68f9      	ldr	r1, [r7, #12]
 8004ea6:	6938      	ldr	r0, [r7, #16]
 8004ea8:	f7fe ff44 	bl	8003d34 <_SendPacket>
  RECORD_END();
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f383 8811 	msr	BASEPRI, r3
}
 8004eb2:	bf00      	nop
 8004eb4:	3728      	adds	r7, #40	; 0x28
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	200143d8 	.word	0x200143d8

08004ec0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004ec4:	4b13      	ldr	r3, [pc, #76]	; (8004f14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004ec6:	7e1b      	ldrb	r3, [r3, #24]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4a13      	ldr	r2, [pc, #76]	; (8004f18 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004ecc:	460b      	mov	r3, r1
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	440b      	add	r3, r1
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	336c      	adds	r3, #108	; 0x6c
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	4b0e      	ldr	r3, [pc, #56]	; (8004f14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004edc:	7e1b      	ldrb	r3, [r3, #24]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	490d      	ldr	r1, [pc, #52]	; (8004f18 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	4403      	add	r3, r0
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	440b      	add	r3, r1
 8004eec:	3370      	adds	r3, #112	; 0x70
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d00b      	beq.n	8004f0c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004ef4:	4b07      	ldr	r3, [pc, #28]	; (8004f14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004ef6:	789b      	ldrb	r3, [r3, #2]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d107      	bne.n	8004f0c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004efc:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004efe:	2201      	movs	r2, #1
 8004f00:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004f02:	f7fe fe31 	bl	8003b68 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004f06:	4b03      	ldr	r3, [pc, #12]	; (8004f14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8004f0c:	4b01      	ldr	r3, [pc, #4]	; (8004f14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	200143a8 	.word	0x200143a8
 8004f18:	20012ee8 	.word	0x20012ee8

08004f1c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
 8004f28:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	2000      	movs	r0, #0
 8004f30:	f7fe fca6 	bl	8003880 <SEGGER_RTT_Write>
  return len;
 8004f34:	683b      	ldr	r3, [r7, #0]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <__libc_init_array>:
 8004f40:	b570      	push	{r4, r5, r6, lr}
 8004f42:	4d0d      	ldr	r5, [pc, #52]	; (8004f78 <__libc_init_array+0x38>)
 8004f44:	4c0d      	ldr	r4, [pc, #52]	; (8004f7c <__libc_init_array+0x3c>)
 8004f46:	1b64      	subs	r4, r4, r5
 8004f48:	10a4      	asrs	r4, r4, #2
 8004f4a:	2600      	movs	r6, #0
 8004f4c:	42a6      	cmp	r6, r4
 8004f4e:	d109      	bne.n	8004f64 <__libc_init_array+0x24>
 8004f50:	4d0b      	ldr	r5, [pc, #44]	; (8004f80 <__libc_init_array+0x40>)
 8004f52:	4c0c      	ldr	r4, [pc, #48]	; (8004f84 <__libc_init_array+0x44>)
 8004f54:	f000 fd38 	bl	80059c8 <_init>
 8004f58:	1b64      	subs	r4, r4, r5
 8004f5a:	10a4      	asrs	r4, r4, #2
 8004f5c:	2600      	movs	r6, #0
 8004f5e:	42a6      	cmp	r6, r4
 8004f60:	d105      	bne.n	8004f6e <__libc_init_array+0x2e>
 8004f62:	bd70      	pop	{r4, r5, r6, pc}
 8004f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f68:	4798      	blx	r3
 8004f6a:	3601      	adds	r6, #1
 8004f6c:	e7ee      	b.n	8004f4c <__libc_init_array+0xc>
 8004f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f72:	4798      	blx	r3
 8004f74:	3601      	adds	r6, #1
 8004f76:	e7f2      	b.n	8004f5e <__libc_init_array+0x1e>
 8004f78:	08005b74 	.word	0x08005b74
 8004f7c:	08005b74 	.word	0x08005b74
 8004f80:	08005b74 	.word	0x08005b74
 8004f84:	08005b78 	.word	0x08005b78

08004f88 <memcmp>:
 8004f88:	b510      	push	{r4, lr}
 8004f8a:	3901      	subs	r1, #1
 8004f8c:	4402      	add	r2, r0
 8004f8e:	4290      	cmp	r0, r2
 8004f90:	d101      	bne.n	8004f96 <memcmp+0xe>
 8004f92:	2000      	movs	r0, #0
 8004f94:	e005      	b.n	8004fa2 <memcmp+0x1a>
 8004f96:	7803      	ldrb	r3, [r0, #0]
 8004f98:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004f9c:	42a3      	cmp	r3, r4
 8004f9e:	d001      	beq.n	8004fa4 <memcmp+0x1c>
 8004fa0:	1b18      	subs	r0, r3, r4
 8004fa2:	bd10      	pop	{r4, pc}
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	e7f2      	b.n	8004f8e <memcmp+0x6>

08004fa8 <memcpy>:
 8004fa8:	440a      	add	r2, r1
 8004faa:	4291      	cmp	r1, r2
 8004fac:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fb0:	d100      	bne.n	8004fb4 <memcpy+0xc>
 8004fb2:	4770      	bx	lr
 8004fb4:	b510      	push	{r4, lr}
 8004fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fbe:	4291      	cmp	r1, r2
 8004fc0:	d1f9      	bne.n	8004fb6 <memcpy+0xe>
 8004fc2:	bd10      	pop	{r4, pc}

08004fc4 <memset>:
 8004fc4:	4402      	add	r2, r0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d100      	bne.n	8004fce <memset+0xa>
 8004fcc:	4770      	bx	lr
 8004fce:	f803 1b01 	strb.w	r1, [r3], #1
 8004fd2:	e7f9      	b.n	8004fc8 <memset+0x4>

08004fd4 <_puts_r>:
 8004fd4:	b570      	push	{r4, r5, r6, lr}
 8004fd6:	460e      	mov	r6, r1
 8004fd8:	4605      	mov	r5, r0
 8004fda:	b118      	cbz	r0, 8004fe4 <_puts_r+0x10>
 8004fdc:	6983      	ldr	r3, [r0, #24]
 8004fde:	b90b      	cbnz	r3, 8004fe4 <_puts_r+0x10>
 8004fe0:	f000 fa48 	bl	8005474 <__sinit>
 8004fe4:	69ab      	ldr	r3, [r5, #24]
 8004fe6:	68ac      	ldr	r4, [r5, #8]
 8004fe8:	b913      	cbnz	r3, 8004ff0 <_puts_r+0x1c>
 8004fea:	4628      	mov	r0, r5
 8004fec:	f000 fa42 	bl	8005474 <__sinit>
 8004ff0:	4b2c      	ldr	r3, [pc, #176]	; (80050a4 <_puts_r+0xd0>)
 8004ff2:	429c      	cmp	r4, r3
 8004ff4:	d120      	bne.n	8005038 <_puts_r+0x64>
 8004ff6:	686c      	ldr	r4, [r5, #4]
 8004ff8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ffa:	07db      	lsls	r3, r3, #31
 8004ffc:	d405      	bmi.n	800500a <_puts_r+0x36>
 8004ffe:	89a3      	ldrh	r3, [r4, #12]
 8005000:	0598      	lsls	r0, r3, #22
 8005002:	d402      	bmi.n	800500a <_puts_r+0x36>
 8005004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005006:	f000 fad3 	bl	80055b0 <__retarget_lock_acquire_recursive>
 800500a:	89a3      	ldrh	r3, [r4, #12]
 800500c:	0719      	lsls	r1, r3, #28
 800500e:	d51d      	bpl.n	800504c <_puts_r+0x78>
 8005010:	6923      	ldr	r3, [r4, #16]
 8005012:	b1db      	cbz	r3, 800504c <_puts_r+0x78>
 8005014:	3e01      	subs	r6, #1
 8005016:	68a3      	ldr	r3, [r4, #8]
 8005018:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800501c:	3b01      	subs	r3, #1
 800501e:	60a3      	str	r3, [r4, #8]
 8005020:	bb39      	cbnz	r1, 8005072 <_puts_r+0x9e>
 8005022:	2b00      	cmp	r3, #0
 8005024:	da38      	bge.n	8005098 <_puts_r+0xc4>
 8005026:	4622      	mov	r2, r4
 8005028:	210a      	movs	r1, #10
 800502a:	4628      	mov	r0, r5
 800502c:	f000 f848 	bl	80050c0 <__swbuf_r>
 8005030:	3001      	adds	r0, #1
 8005032:	d011      	beq.n	8005058 <_puts_r+0x84>
 8005034:	250a      	movs	r5, #10
 8005036:	e011      	b.n	800505c <_puts_r+0x88>
 8005038:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <_puts_r+0xd4>)
 800503a:	429c      	cmp	r4, r3
 800503c:	d101      	bne.n	8005042 <_puts_r+0x6e>
 800503e:	68ac      	ldr	r4, [r5, #8]
 8005040:	e7da      	b.n	8004ff8 <_puts_r+0x24>
 8005042:	4b1a      	ldr	r3, [pc, #104]	; (80050ac <_puts_r+0xd8>)
 8005044:	429c      	cmp	r4, r3
 8005046:	bf08      	it	eq
 8005048:	68ec      	ldreq	r4, [r5, #12]
 800504a:	e7d5      	b.n	8004ff8 <_puts_r+0x24>
 800504c:	4621      	mov	r1, r4
 800504e:	4628      	mov	r0, r5
 8005050:	f000 f888 	bl	8005164 <__swsetup_r>
 8005054:	2800      	cmp	r0, #0
 8005056:	d0dd      	beq.n	8005014 <_puts_r+0x40>
 8005058:	f04f 35ff 	mov.w	r5, #4294967295
 800505c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800505e:	07da      	lsls	r2, r3, #31
 8005060:	d405      	bmi.n	800506e <_puts_r+0x9a>
 8005062:	89a3      	ldrh	r3, [r4, #12]
 8005064:	059b      	lsls	r3, r3, #22
 8005066:	d402      	bmi.n	800506e <_puts_r+0x9a>
 8005068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800506a:	f000 faa2 	bl	80055b2 <__retarget_lock_release_recursive>
 800506e:	4628      	mov	r0, r5
 8005070:	bd70      	pop	{r4, r5, r6, pc}
 8005072:	2b00      	cmp	r3, #0
 8005074:	da04      	bge.n	8005080 <_puts_r+0xac>
 8005076:	69a2      	ldr	r2, [r4, #24]
 8005078:	429a      	cmp	r2, r3
 800507a:	dc06      	bgt.n	800508a <_puts_r+0xb6>
 800507c:	290a      	cmp	r1, #10
 800507e:	d004      	beq.n	800508a <_puts_r+0xb6>
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	6022      	str	r2, [r4, #0]
 8005086:	7019      	strb	r1, [r3, #0]
 8005088:	e7c5      	b.n	8005016 <_puts_r+0x42>
 800508a:	4622      	mov	r2, r4
 800508c:	4628      	mov	r0, r5
 800508e:	f000 f817 	bl	80050c0 <__swbuf_r>
 8005092:	3001      	adds	r0, #1
 8005094:	d1bf      	bne.n	8005016 <_puts_r+0x42>
 8005096:	e7df      	b.n	8005058 <_puts_r+0x84>
 8005098:	6823      	ldr	r3, [r4, #0]
 800509a:	250a      	movs	r5, #10
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	6022      	str	r2, [r4, #0]
 80050a0:	701d      	strb	r5, [r3, #0]
 80050a2:	e7db      	b.n	800505c <_puts_r+0x88>
 80050a4:	08005b34 	.word	0x08005b34
 80050a8:	08005b54 	.word	0x08005b54
 80050ac:	08005b14 	.word	0x08005b14

080050b0 <puts>:
 80050b0:	4b02      	ldr	r3, [pc, #8]	; (80050bc <puts+0xc>)
 80050b2:	4601      	mov	r1, r0
 80050b4:	6818      	ldr	r0, [r3, #0]
 80050b6:	f7ff bf8d 	b.w	8004fd4 <_puts_r>
 80050ba:	bf00      	nop
 80050bc:	20000014 	.word	0x20000014

080050c0 <__swbuf_r>:
 80050c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c2:	460e      	mov	r6, r1
 80050c4:	4614      	mov	r4, r2
 80050c6:	4605      	mov	r5, r0
 80050c8:	b118      	cbz	r0, 80050d2 <__swbuf_r+0x12>
 80050ca:	6983      	ldr	r3, [r0, #24]
 80050cc:	b90b      	cbnz	r3, 80050d2 <__swbuf_r+0x12>
 80050ce:	f000 f9d1 	bl	8005474 <__sinit>
 80050d2:	4b21      	ldr	r3, [pc, #132]	; (8005158 <__swbuf_r+0x98>)
 80050d4:	429c      	cmp	r4, r3
 80050d6:	d12b      	bne.n	8005130 <__swbuf_r+0x70>
 80050d8:	686c      	ldr	r4, [r5, #4]
 80050da:	69a3      	ldr	r3, [r4, #24]
 80050dc:	60a3      	str	r3, [r4, #8]
 80050de:	89a3      	ldrh	r3, [r4, #12]
 80050e0:	071a      	lsls	r2, r3, #28
 80050e2:	d52f      	bpl.n	8005144 <__swbuf_r+0x84>
 80050e4:	6923      	ldr	r3, [r4, #16]
 80050e6:	b36b      	cbz	r3, 8005144 <__swbuf_r+0x84>
 80050e8:	6923      	ldr	r3, [r4, #16]
 80050ea:	6820      	ldr	r0, [r4, #0]
 80050ec:	1ac0      	subs	r0, r0, r3
 80050ee:	6963      	ldr	r3, [r4, #20]
 80050f0:	b2f6      	uxtb	r6, r6
 80050f2:	4283      	cmp	r3, r0
 80050f4:	4637      	mov	r7, r6
 80050f6:	dc04      	bgt.n	8005102 <__swbuf_r+0x42>
 80050f8:	4621      	mov	r1, r4
 80050fa:	4628      	mov	r0, r5
 80050fc:	f000 f926 	bl	800534c <_fflush_r>
 8005100:	bb30      	cbnz	r0, 8005150 <__swbuf_r+0x90>
 8005102:	68a3      	ldr	r3, [r4, #8]
 8005104:	3b01      	subs	r3, #1
 8005106:	60a3      	str	r3, [r4, #8]
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	1c5a      	adds	r2, r3, #1
 800510c:	6022      	str	r2, [r4, #0]
 800510e:	701e      	strb	r6, [r3, #0]
 8005110:	6963      	ldr	r3, [r4, #20]
 8005112:	3001      	adds	r0, #1
 8005114:	4283      	cmp	r3, r0
 8005116:	d004      	beq.n	8005122 <__swbuf_r+0x62>
 8005118:	89a3      	ldrh	r3, [r4, #12]
 800511a:	07db      	lsls	r3, r3, #31
 800511c:	d506      	bpl.n	800512c <__swbuf_r+0x6c>
 800511e:	2e0a      	cmp	r6, #10
 8005120:	d104      	bne.n	800512c <__swbuf_r+0x6c>
 8005122:	4621      	mov	r1, r4
 8005124:	4628      	mov	r0, r5
 8005126:	f000 f911 	bl	800534c <_fflush_r>
 800512a:	b988      	cbnz	r0, 8005150 <__swbuf_r+0x90>
 800512c:	4638      	mov	r0, r7
 800512e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005130:	4b0a      	ldr	r3, [pc, #40]	; (800515c <__swbuf_r+0x9c>)
 8005132:	429c      	cmp	r4, r3
 8005134:	d101      	bne.n	800513a <__swbuf_r+0x7a>
 8005136:	68ac      	ldr	r4, [r5, #8]
 8005138:	e7cf      	b.n	80050da <__swbuf_r+0x1a>
 800513a:	4b09      	ldr	r3, [pc, #36]	; (8005160 <__swbuf_r+0xa0>)
 800513c:	429c      	cmp	r4, r3
 800513e:	bf08      	it	eq
 8005140:	68ec      	ldreq	r4, [r5, #12]
 8005142:	e7ca      	b.n	80050da <__swbuf_r+0x1a>
 8005144:	4621      	mov	r1, r4
 8005146:	4628      	mov	r0, r5
 8005148:	f000 f80c 	bl	8005164 <__swsetup_r>
 800514c:	2800      	cmp	r0, #0
 800514e:	d0cb      	beq.n	80050e8 <__swbuf_r+0x28>
 8005150:	f04f 37ff 	mov.w	r7, #4294967295
 8005154:	e7ea      	b.n	800512c <__swbuf_r+0x6c>
 8005156:	bf00      	nop
 8005158:	08005b34 	.word	0x08005b34
 800515c:	08005b54 	.word	0x08005b54
 8005160:	08005b14 	.word	0x08005b14

08005164 <__swsetup_r>:
 8005164:	4b32      	ldr	r3, [pc, #200]	; (8005230 <__swsetup_r+0xcc>)
 8005166:	b570      	push	{r4, r5, r6, lr}
 8005168:	681d      	ldr	r5, [r3, #0]
 800516a:	4606      	mov	r6, r0
 800516c:	460c      	mov	r4, r1
 800516e:	b125      	cbz	r5, 800517a <__swsetup_r+0x16>
 8005170:	69ab      	ldr	r3, [r5, #24]
 8005172:	b913      	cbnz	r3, 800517a <__swsetup_r+0x16>
 8005174:	4628      	mov	r0, r5
 8005176:	f000 f97d 	bl	8005474 <__sinit>
 800517a:	4b2e      	ldr	r3, [pc, #184]	; (8005234 <__swsetup_r+0xd0>)
 800517c:	429c      	cmp	r4, r3
 800517e:	d10f      	bne.n	80051a0 <__swsetup_r+0x3c>
 8005180:	686c      	ldr	r4, [r5, #4]
 8005182:	89a3      	ldrh	r3, [r4, #12]
 8005184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005188:	0719      	lsls	r1, r3, #28
 800518a:	d42c      	bmi.n	80051e6 <__swsetup_r+0x82>
 800518c:	06dd      	lsls	r5, r3, #27
 800518e:	d411      	bmi.n	80051b4 <__swsetup_r+0x50>
 8005190:	2309      	movs	r3, #9
 8005192:	6033      	str	r3, [r6, #0]
 8005194:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005198:	81a3      	strh	r3, [r4, #12]
 800519a:	f04f 30ff 	mov.w	r0, #4294967295
 800519e:	e03e      	b.n	800521e <__swsetup_r+0xba>
 80051a0:	4b25      	ldr	r3, [pc, #148]	; (8005238 <__swsetup_r+0xd4>)
 80051a2:	429c      	cmp	r4, r3
 80051a4:	d101      	bne.n	80051aa <__swsetup_r+0x46>
 80051a6:	68ac      	ldr	r4, [r5, #8]
 80051a8:	e7eb      	b.n	8005182 <__swsetup_r+0x1e>
 80051aa:	4b24      	ldr	r3, [pc, #144]	; (800523c <__swsetup_r+0xd8>)
 80051ac:	429c      	cmp	r4, r3
 80051ae:	bf08      	it	eq
 80051b0:	68ec      	ldreq	r4, [r5, #12]
 80051b2:	e7e6      	b.n	8005182 <__swsetup_r+0x1e>
 80051b4:	0758      	lsls	r0, r3, #29
 80051b6:	d512      	bpl.n	80051de <__swsetup_r+0x7a>
 80051b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051ba:	b141      	cbz	r1, 80051ce <__swsetup_r+0x6a>
 80051bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051c0:	4299      	cmp	r1, r3
 80051c2:	d002      	beq.n	80051ca <__swsetup_r+0x66>
 80051c4:	4630      	mov	r0, r6
 80051c6:	f000 fa5b 	bl	8005680 <_free_r>
 80051ca:	2300      	movs	r3, #0
 80051cc:	6363      	str	r3, [r4, #52]	; 0x34
 80051ce:	89a3      	ldrh	r3, [r4, #12]
 80051d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051d4:	81a3      	strh	r3, [r4, #12]
 80051d6:	2300      	movs	r3, #0
 80051d8:	6063      	str	r3, [r4, #4]
 80051da:	6923      	ldr	r3, [r4, #16]
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	89a3      	ldrh	r3, [r4, #12]
 80051e0:	f043 0308 	orr.w	r3, r3, #8
 80051e4:	81a3      	strh	r3, [r4, #12]
 80051e6:	6923      	ldr	r3, [r4, #16]
 80051e8:	b94b      	cbnz	r3, 80051fe <__swsetup_r+0x9a>
 80051ea:	89a3      	ldrh	r3, [r4, #12]
 80051ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80051f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051f4:	d003      	beq.n	80051fe <__swsetup_r+0x9a>
 80051f6:	4621      	mov	r1, r4
 80051f8:	4630      	mov	r0, r6
 80051fa:	f000 fa01 	bl	8005600 <__smakebuf_r>
 80051fe:	89a0      	ldrh	r0, [r4, #12]
 8005200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005204:	f010 0301 	ands.w	r3, r0, #1
 8005208:	d00a      	beq.n	8005220 <__swsetup_r+0xbc>
 800520a:	2300      	movs	r3, #0
 800520c:	60a3      	str	r3, [r4, #8]
 800520e:	6963      	ldr	r3, [r4, #20]
 8005210:	425b      	negs	r3, r3
 8005212:	61a3      	str	r3, [r4, #24]
 8005214:	6923      	ldr	r3, [r4, #16]
 8005216:	b943      	cbnz	r3, 800522a <__swsetup_r+0xc6>
 8005218:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800521c:	d1ba      	bne.n	8005194 <__swsetup_r+0x30>
 800521e:	bd70      	pop	{r4, r5, r6, pc}
 8005220:	0781      	lsls	r1, r0, #30
 8005222:	bf58      	it	pl
 8005224:	6963      	ldrpl	r3, [r4, #20]
 8005226:	60a3      	str	r3, [r4, #8]
 8005228:	e7f4      	b.n	8005214 <__swsetup_r+0xb0>
 800522a:	2000      	movs	r0, #0
 800522c:	e7f7      	b.n	800521e <__swsetup_r+0xba>
 800522e:	bf00      	nop
 8005230:	20000014 	.word	0x20000014
 8005234:	08005b34 	.word	0x08005b34
 8005238:	08005b54 	.word	0x08005b54
 800523c:	08005b14 	.word	0x08005b14

08005240 <__sflush_r>:
 8005240:	898a      	ldrh	r2, [r1, #12]
 8005242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005246:	4605      	mov	r5, r0
 8005248:	0710      	lsls	r0, r2, #28
 800524a:	460c      	mov	r4, r1
 800524c:	d458      	bmi.n	8005300 <__sflush_r+0xc0>
 800524e:	684b      	ldr	r3, [r1, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	dc05      	bgt.n	8005260 <__sflush_r+0x20>
 8005254:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005256:	2b00      	cmp	r3, #0
 8005258:	dc02      	bgt.n	8005260 <__sflush_r+0x20>
 800525a:	2000      	movs	r0, #0
 800525c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005262:	2e00      	cmp	r6, #0
 8005264:	d0f9      	beq.n	800525a <__sflush_r+0x1a>
 8005266:	2300      	movs	r3, #0
 8005268:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800526c:	682f      	ldr	r7, [r5, #0]
 800526e:	602b      	str	r3, [r5, #0]
 8005270:	d032      	beq.n	80052d8 <__sflush_r+0x98>
 8005272:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005274:	89a3      	ldrh	r3, [r4, #12]
 8005276:	075a      	lsls	r2, r3, #29
 8005278:	d505      	bpl.n	8005286 <__sflush_r+0x46>
 800527a:	6863      	ldr	r3, [r4, #4]
 800527c:	1ac0      	subs	r0, r0, r3
 800527e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005280:	b10b      	cbz	r3, 8005286 <__sflush_r+0x46>
 8005282:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005284:	1ac0      	subs	r0, r0, r3
 8005286:	2300      	movs	r3, #0
 8005288:	4602      	mov	r2, r0
 800528a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800528c:	6a21      	ldr	r1, [r4, #32]
 800528e:	4628      	mov	r0, r5
 8005290:	47b0      	blx	r6
 8005292:	1c43      	adds	r3, r0, #1
 8005294:	89a3      	ldrh	r3, [r4, #12]
 8005296:	d106      	bne.n	80052a6 <__sflush_r+0x66>
 8005298:	6829      	ldr	r1, [r5, #0]
 800529a:	291d      	cmp	r1, #29
 800529c:	d82c      	bhi.n	80052f8 <__sflush_r+0xb8>
 800529e:	4a2a      	ldr	r2, [pc, #168]	; (8005348 <__sflush_r+0x108>)
 80052a0:	40ca      	lsrs	r2, r1
 80052a2:	07d6      	lsls	r6, r2, #31
 80052a4:	d528      	bpl.n	80052f8 <__sflush_r+0xb8>
 80052a6:	2200      	movs	r2, #0
 80052a8:	6062      	str	r2, [r4, #4]
 80052aa:	04d9      	lsls	r1, r3, #19
 80052ac:	6922      	ldr	r2, [r4, #16]
 80052ae:	6022      	str	r2, [r4, #0]
 80052b0:	d504      	bpl.n	80052bc <__sflush_r+0x7c>
 80052b2:	1c42      	adds	r2, r0, #1
 80052b4:	d101      	bne.n	80052ba <__sflush_r+0x7a>
 80052b6:	682b      	ldr	r3, [r5, #0]
 80052b8:	b903      	cbnz	r3, 80052bc <__sflush_r+0x7c>
 80052ba:	6560      	str	r0, [r4, #84]	; 0x54
 80052bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052be:	602f      	str	r7, [r5, #0]
 80052c0:	2900      	cmp	r1, #0
 80052c2:	d0ca      	beq.n	800525a <__sflush_r+0x1a>
 80052c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052c8:	4299      	cmp	r1, r3
 80052ca:	d002      	beq.n	80052d2 <__sflush_r+0x92>
 80052cc:	4628      	mov	r0, r5
 80052ce:	f000 f9d7 	bl	8005680 <_free_r>
 80052d2:	2000      	movs	r0, #0
 80052d4:	6360      	str	r0, [r4, #52]	; 0x34
 80052d6:	e7c1      	b.n	800525c <__sflush_r+0x1c>
 80052d8:	6a21      	ldr	r1, [r4, #32]
 80052da:	2301      	movs	r3, #1
 80052dc:	4628      	mov	r0, r5
 80052de:	47b0      	blx	r6
 80052e0:	1c41      	adds	r1, r0, #1
 80052e2:	d1c7      	bne.n	8005274 <__sflush_r+0x34>
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0c4      	beq.n	8005274 <__sflush_r+0x34>
 80052ea:	2b1d      	cmp	r3, #29
 80052ec:	d001      	beq.n	80052f2 <__sflush_r+0xb2>
 80052ee:	2b16      	cmp	r3, #22
 80052f0:	d101      	bne.n	80052f6 <__sflush_r+0xb6>
 80052f2:	602f      	str	r7, [r5, #0]
 80052f4:	e7b1      	b.n	800525a <__sflush_r+0x1a>
 80052f6:	89a3      	ldrh	r3, [r4, #12]
 80052f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052fc:	81a3      	strh	r3, [r4, #12]
 80052fe:	e7ad      	b.n	800525c <__sflush_r+0x1c>
 8005300:	690f      	ldr	r7, [r1, #16]
 8005302:	2f00      	cmp	r7, #0
 8005304:	d0a9      	beq.n	800525a <__sflush_r+0x1a>
 8005306:	0793      	lsls	r3, r2, #30
 8005308:	680e      	ldr	r6, [r1, #0]
 800530a:	bf08      	it	eq
 800530c:	694b      	ldreq	r3, [r1, #20]
 800530e:	600f      	str	r7, [r1, #0]
 8005310:	bf18      	it	ne
 8005312:	2300      	movne	r3, #0
 8005314:	eba6 0807 	sub.w	r8, r6, r7
 8005318:	608b      	str	r3, [r1, #8]
 800531a:	f1b8 0f00 	cmp.w	r8, #0
 800531e:	dd9c      	ble.n	800525a <__sflush_r+0x1a>
 8005320:	6a21      	ldr	r1, [r4, #32]
 8005322:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005324:	4643      	mov	r3, r8
 8005326:	463a      	mov	r2, r7
 8005328:	4628      	mov	r0, r5
 800532a:	47b0      	blx	r6
 800532c:	2800      	cmp	r0, #0
 800532e:	dc06      	bgt.n	800533e <__sflush_r+0xfe>
 8005330:	89a3      	ldrh	r3, [r4, #12]
 8005332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005336:	81a3      	strh	r3, [r4, #12]
 8005338:	f04f 30ff 	mov.w	r0, #4294967295
 800533c:	e78e      	b.n	800525c <__sflush_r+0x1c>
 800533e:	4407      	add	r7, r0
 8005340:	eba8 0800 	sub.w	r8, r8, r0
 8005344:	e7e9      	b.n	800531a <__sflush_r+0xda>
 8005346:	bf00      	nop
 8005348:	20400001 	.word	0x20400001

0800534c <_fflush_r>:
 800534c:	b538      	push	{r3, r4, r5, lr}
 800534e:	690b      	ldr	r3, [r1, #16]
 8005350:	4605      	mov	r5, r0
 8005352:	460c      	mov	r4, r1
 8005354:	b913      	cbnz	r3, 800535c <_fflush_r+0x10>
 8005356:	2500      	movs	r5, #0
 8005358:	4628      	mov	r0, r5
 800535a:	bd38      	pop	{r3, r4, r5, pc}
 800535c:	b118      	cbz	r0, 8005366 <_fflush_r+0x1a>
 800535e:	6983      	ldr	r3, [r0, #24]
 8005360:	b90b      	cbnz	r3, 8005366 <_fflush_r+0x1a>
 8005362:	f000 f887 	bl	8005474 <__sinit>
 8005366:	4b14      	ldr	r3, [pc, #80]	; (80053b8 <_fflush_r+0x6c>)
 8005368:	429c      	cmp	r4, r3
 800536a:	d11b      	bne.n	80053a4 <_fflush_r+0x58>
 800536c:	686c      	ldr	r4, [r5, #4]
 800536e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0ef      	beq.n	8005356 <_fflush_r+0xa>
 8005376:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005378:	07d0      	lsls	r0, r2, #31
 800537a:	d404      	bmi.n	8005386 <_fflush_r+0x3a>
 800537c:	0599      	lsls	r1, r3, #22
 800537e:	d402      	bmi.n	8005386 <_fflush_r+0x3a>
 8005380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005382:	f000 f915 	bl	80055b0 <__retarget_lock_acquire_recursive>
 8005386:	4628      	mov	r0, r5
 8005388:	4621      	mov	r1, r4
 800538a:	f7ff ff59 	bl	8005240 <__sflush_r>
 800538e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005390:	07da      	lsls	r2, r3, #31
 8005392:	4605      	mov	r5, r0
 8005394:	d4e0      	bmi.n	8005358 <_fflush_r+0xc>
 8005396:	89a3      	ldrh	r3, [r4, #12]
 8005398:	059b      	lsls	r3, r3, #22
 800539a:	d4dd      	bmi.n	8005358 <_fflush_r+0xc>
 800539c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800539e:	f000 f908 	bl	80055b2 <__retarget_lock_release_recursive>
 80053a2:	e7d9      	b.n	8005358 <_fflush_r+0xc>
 80053a4:	4b05      	ldr	r3, [pc, #20]	; (80053bc <_fflush_r+0x70>)
 80053a6:	429c      	cmp	r4, r3
 80053a8:	d101      	bne.n	80053ae <_fflush_r+0x62>
 80053aa:	68ac      	ldr	r4, [r5, #8]
 80053ac:	e7df      	b.n	800536e <_fflush_r+0x22>
 80053ae:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <_fflush_r+0x74>)
 80053b0:	429c      	cmp	r4, r3
 80053b2:	bf08      	it	eq
 80053b4:	68ec      	ldreq	r4, [r5, #12]
 80053b6:	e7da      	b.n	800536e <_fflush_r+0x22>
 80053b8:	08005b34 	.word	0x08005b34
 80053bc:	08005b54 	.word	0x08005b54
 80053c0:	08005b14 	.word	0x08005b14

080053c4 <std>:
 80053c4:	2300      	movs	r3, #0
 80053c6:	b510      	push	{r4, lr}
 80053c8:	4604      	mov	r4, r0
 80053ca:	e9c0 3300 	strd	r3, r3, [r0]
 80053ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053d2:	6083      	str	r3, [r0, #8]
 80053d4:	8181      	strh	r1, [r0, #12]
 80053d6:	6643      	str	r3, [r0, #100]	; 0x64
 80053d8:	81c2      	strh	r2, [r0, #14]
 80053da:	6183      	str	r3, [r0, #24]
 80053dc:	4619      	mov	r1, r3
 80053de:	2208      	movs	r2, #8
 80053e0:	305c      	adds	r0, #92	; 0x5c
 80053e2:	f7ff fdef 	bl	8004fc4 <memset>
 80053e6:	4b05      	ldr	r3, [pc, #20]	; (80053fc <std+0x38>)
 80053e8:	6263      	str	r3, [r4, #36]	; 0x24
 80053ea:	4b05      	ldr	r3, [pc, #20]	; (8005400 <std+0x3c>)
 80053ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80053ee:	4b05      	ldr	r3, [pc, #20]	; (8005404 <std+0x40>)
 80053f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053f2:	4b05      	ldr	r3, [pc, #20]	; (8005408 <std+0x44>)
 80053f4:	6224      	str	r4, [r4, #32]
 80053f6:	6323      	str	r3, [r4, #48]	; 0x30
 80053f8:	bd10      	pop	{r4, pc}
 80053fa:	bf00      	nop
 80053fc:	08005861 	.word	0x08005861
 8005400:	08005883 	.word	0x08005883
 8005404:	080058bb 	.word	0x080058bb
 8005408:	080058df 	.word	0x080058df

0800540c <_cleanup_r>:
 800540c:	4901      	ldr	r1, [pc, #4]	; (8005414 <_cleanup_r+0x8>)
 800540e:	f000 b8af 	b.w	8005570 <_fwalk_reent>
 8005412:	bf00      	nop
 8005414:	0800534d 	.word	0x0800534d

08005418 <__sfmoreglue>:
 8005418:	b570      	push	{r4, r5, r6, lr}
 800541a:	2268      	movs	r2, #104	; 0x68
 800541c:	1e4d      	subs	r5, r1, #1
 800541e:	4355      	muls	r5, r2
 8005420:	460e      	mov	r6, r1
 8005422:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005426:	f000 f997 	bl	8005758 <_malloc_r>
 800542a:	4604      	mov	r4, r0
 800542c:	b140      	cbz	r0, 8005440 <__sfmoreglue+0x28>
 800542e:	2100      	movs	r1, #0
 8005430:	e9c0 1600 	strd	r1, r6, [r0]
 8005434:	300c      	adds	r0, #12
 8005436:	60a0      	str	r0, [r4, #8]
 8005438:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800543c:	f7ff fdc2 	bl	8004fc4 <memset>
 8005440:	4620      	mov	r0, r4
 8005442:	bd70      	pop	{r4, r5, r6, pc}

08005444 <__sfp_lock_acquire>:
 8005444:	4801      	ldr	r0, [pc, #4]	; (800544c <__sfp_lock_acquire+0x8>)
 8005446:	f000 b8b3 	b.w	80055b0 <__retarget_lock_acquire_recursive>
 800544a:	bf00      	nop
 800544c:	200144bc 	.word	0x200144bc

08005450 <__sfp_lock_release>:
 8005450:	4801      	ldr	r0, [pc, #4]	; (8005458 <__sfp_lock_release+0x8>)
 8005452:	f000 b8ae 	b.w	80055b2 <__retarget_lock_release_recursive>
 8005456:	bf00      	nop
 8005458:	200144bc 	.word	0x200144bc

0800545c <__sinit_lock_acquire>:
 800545c:	4801      	ldr	r0, [pc, #4]	; (8005464 <__sinit_lock_acquire+0x8>)
 800545e:	f000 b8a7 	b.w	80055b0 <__retarget_lock_acquire_recursive>
 8005462:	bf00      	nop
 8005464:	200144bd 	.word	0x200144bd

08005468 <__sinit_lock_release>:
 8005468:	4801      	ldr	r0, [pc, #4]	; (8005470 <__sinit_lock_release+0x8>)
 800546a:	f000 b8a2 	b.w	80055b2 <__retarget_lock_release_recursive>
 800546e:	bf00      	nop
 8005470:	200144bd 	.word	0x200144bd

08005474 <__sinit>:
 8005474:	b510      	push	{r4, lr}
 8005476:	4604      	mov	r4, r0
 8005478:	f7ff fff0 	bl	800545c <__sinit_lock_acquire>
 800547c:	69a3      	ldr	r3, [r4, #24]
 800547e:	b11b      	cbz	r3, 8005488 <__sinit+0x14>
 8005480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005484:	f7ff bff0 	b.w	8005468 <__sinit_lock_release>
 8005488:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800548c:	6523      	str	r3, [r4, #80]	; 0x50
 800548e:	4b13      	ldr	r3, [pc, #76]	; (80054dc <__sinit+0x68>)
 8005490:	4a13      	ldr	r2, [pc, #76]	; (80054e0 <__sinit+0x6c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	62a2      	str	r2, [r4, #40]	; 0x28
 8005496:	42a3      	cmp	r3, r4
 8005498:	bf04      	itt	eq
 800549a:	2301      	moveq	r3, #1
 800549c:	61a3      	streq	r3, [r4, #24]
 800549e:	4620      	mov	r0, r4
 80054a0:	f000 f820 	bl	80054e4 <__sfp>
 80054a4:	6060      	str	r0, [r4, #4]
 80054a6:	4620      	mov	r0, r4
 80054a8:	f000 f81c 	bl	80054e4 <__sfp>
 80054ac:	60a0      	str	r0, [r4, #8]
 80054ae:	4620      	mov	r0, r4
 80054b0:	f000 f818 	bl	80054e4 <__sfp>
 80054b4:	2200      	movs	r2, #0
 80054b6:	60e0      	str	r0, [r4, #12]
 80054b8:	2104      	movs	r1, #4
 80054ba:	6860      	ldr	r0, [r4, #4]
 80054bc:	f7ff ff82 	bl	80053c4 <std>
 80054c0:	68a0      	ldr	r0, [r4, #8]
 80054c2:	2201      	movs	r2, #1
 80054c4:	2109      	movs	r1, #9
 80054c6:	f7ff ff7d 	bl	80053c4 <std>
 80054ca:	68e0      	ldr	r0, [r4, #12]
 80054cc:	2202      	movs	r2, #2
 80054ce:	2112      	movs	r1, #18
 80054d0:	f7ff ff78 	bl	80053c4 <std>
 80054d4:	2301      	movs	r3, #1
 80054d6:	61a3      	str	r3, [r4, #24]
 80054d8:	e7d2      	b.n	8005480 <__sinit+0xc>
 80054da:	bf00      	nop
 80054dc:	08005b10 	.word	0x08005b10
 80054e0:	0800540d 	.word	0x0800540d

080054e4 <__sfp>:
 80054e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e6:	4607      	mov	r7, r0
 80054e8:	f7ff ffac 	bl	8005444 <__sfp_lock_acquire>
 80054ec:	4b1e      	ldr	r3, [pc, #120]	; (8005568 <__sfp+0x84>)
 80054ee:	681e      	ldr	r6, [r3, #0]
 80054f0:	69b3      	ldr	r3, [r6, #24]
 80054f2:	b913      	cbnz	r3, 80054fa <__sfp+0x16>
 80054f4:	4630      	mov	r0, r6
 80054f6:	f7ff ffbd 	bl	8005474 <__sinit>
 80054fa:	3648      	adds	r6, #72	; 0x48
 80054fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005500:	3b01      	subs	r3, #1
 8005502:	d503      	bpl.n	800550c <__sfp+0x28>
 8005504:	6833      	ldr	r3, [r6, #0]
 8005506:	b30b      	cbz	r3, 800554c <__sfp+0x68>
 8005508:	6836      	ldr	r6, [r6, #0]
 800550a:	e7f7      	b.n	80054fc <__sfp+0x18>
 800550c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005510:	b9d5      	cbnz	r5, 8005548 <__sfp+0x64>
 8005512:	4b16      	ldr	r3, [pc, #88]	; (800556c <__sfp+0x88>)
 8005514:	60e3      	str	r3, [r4, #12]
 8005516:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800551a:	6665      	str	r5, [r4, #100]	; 0x64
 800551c:	f000 f847 	bl	80055ae <__retarget_lock_init_recursive>
 8005520:	f7ff ff96 	bl	8005450 <__sfp_lock_release>
 8005524:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005528:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800552c:	6025      	str	r5, [r4, #0]
 800552e:	61a5      	str	r5, [r4, #24]
 8005530:	2208      	movs	r2, #8
 8005532:	4629      	mov	r1, r5
 8005534:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005538:	f7ff fd44 	bl	8004fc4 <memset>
 800553c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005540:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005544:	4620      	mov	r0, r4
 8005546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005548:	3468      	adds	r4, #104	; 0x68
 800554a:	e7d9      	b.n	8005500 <__sfp+0x1c>
 800554c:	2104      	movs	r1, #4
 800554e:	4638      	mov	r0, r7
 8005550:	f7ff ff62 	bl	8005418 <__sfmoreglue>
 8005554:	4604      	mov	r4, r0
 8005556:	6030      	str	r0, [r6, #0]
 8005558:	2800      	cmp	r0, #0
 800555a:	d1d5      	bne.n	8005508 <__sfp+0x24>
 800555c:	f7ff ff78 	bl	8005450 <__sfp_lock_release>
 8005560:	230c      	movs	r3, #12
 8005562:	603b      	str	r3, [r7, #0]
 8005564:	e7ee      	b.n	8005544 <__sfp+0x60>
 8005566:	bf00      	nop
 8005568:	08005b10 	.word	0x08005b10
 800556c:	ffff0001 	.word	0xffff0001

08005570 <_fwalk_reent>:
 8005570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005574:	4606      	mov	r6, r0
 8005576:	4688      	mov	r8, r1
 8005578:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800557c:	2700      	movs	r7, #0
 800557e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005582:	f1b9 0901 	subs.w	r9, r9, #1
 8005586:	d505      	bpl.n	8005594 <_fwalk_reent+0x24>
 8005588:	6824      	ldr	r4, [r4, #0]
 800558a:	2c00      	cmp	r4, #0
 800558c:	d1f7      	bne.n	800557e <_fwalk_reent+0xe>
 800558e:	4638      	mov	r0, r7
 8005590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005594:	89ab      	ldrh	r3, [r5, #12]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d907      	bls.n	80055aa <_fwalk_reent+0x3a>
 800559a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800559e:	3301      	adds	r3, #1
 80055a0:	d003      	beq.n	80055aa <_fwalk_reent+0x3a>
 80055a2:	4629      	mov	r1, r5
 80055a4:	4630      	mov	r0, r6
 80055a6:	47c0      	blx	r8
 80055a8:	4307      	orrs	r7, r0
 80055aa:	3568      	adds	r5, #104	; 0x68
 80055ac:	e7e9      	b.n	8005582 <_fwalk_reent+0x12>

080055ae <__retarget_lock_init_recursive>:
 80055ae:	4770      	bx	lr

080055b0 <__retarget_lock_acquire_recursive>:
 80055b0:	4770      	bx	lr

080055b2 <__retarget_lock_release_recursive>:
 80055b2:	4770      	bx	lr

080055b4 <__swhatbuf_r>:
 80055b4:	b570      	push	{r4, r5, r6, lr}
 80055b6:	460e      	mov	r6, r1
 80055b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055bc:	2900      	cmp	r1, #0
 80055be:	b096      	sub	sp, #88	; 0x58
 80055c0:	4614      	mov	r4, r2
 80055c2:	461d      	mov	r5, r3
 80055c4:	da08      	bge.n	80055d8 <__swhatbuf_r+0x24>
 80055c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	602a      	str	r2, [r5, #0]
 80055ce:	061a      	lsls	r2, r3, #24
 80055d0:	d410      	bmi.n	80055f4 <__swhatbuf_r+0x40>
 80055d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055d6:	e00e      	b.n	80055f6 <__swhatbuf_r+0x42>
 80055d8:	466a      	mov	r2, sp
 80055da:	f000 f995 	bl	8005908 <_fstat_r>
 80055de:	2800      	cmp	r0, #0
 80055e0:	dbf1      	blt.n	80055c6 <__swhatbuf_r+0x12>
 80055e2:	9a01      	ldr	r2, [sp, #4]
 80055e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80055e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80055ec:	425a      	negs	r2, r3
 80055ee:	415a      	adcs	r2, r3
 80055f0:	602a      	str	r2, [r5, #0]
 80055f2:	e7ee      	b.n	80055d2 <__swhatbuf_r+0x1e>
 80055f4:	2340      	movs	r3, #64	; 0x40
 80055f6:	2000      	movs	r0, #0
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	b016      	add	sp, #88	; 0x58
 80055fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08005600 <__smakebuf_r>:
 8005600:	898b      	ldrh	r3, [r1, #12]
 8005602:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005604:	079d      	lsls	r5, r3, #30
 8005606:	4606      	mov	r6, r0
 8005608:	460c      	mov	r4, r1
 800560a:	d507      	bpl.n	800561c <__smakebuf_r+0x1c>
 800560c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	6123      	str	r3, [r4, #16]
 8005614:	2301      	movs	r3, #1
 8005616:	6163      	str	r3, [r4, #20]
 8005618:	b002      	add	sp, #8
 800561a:	bd70      	pop	{r4, r5, r6, pc}
 800561c:	ab01      	add	r3, sp, #4
 800561e:	466a      	mov	r2, sp
 8005620:	f7ff ffc8 	bl	80055b4 <__swhatbuf_r>
 8005624:	9900      	ldr	r1, [sp, #0]
 8005626:	4605      	mov	r5, r0
 8005628:	4630      	mov	r0, r6
 800562a:	f000 f895 	bl	8005758 <_malloc_r>
 800562e:	b948      	cbnz	r0, 8005644 <__smakebuf_r+0x44>
 8005630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005634:	059a      	lsls	r2, r3, #22
 8005636:	d4ef      	bmi.n	8005618 <__smakebuf_r+0x18>
 8005638:	f023 0303 	bic.w	r3, r3, #3
 800563c:	f043 0302 	orr.w	r3, r3, #2
 8005640:	81a3      	strh	r3, [r4, #12]
 8005642:	e7e3      	b.n	800560c <__smakebuf_r+0xc>
 8005644:	4b0d      	ldr	r3, [pc, #52]	; (800567c <__smakebuf_r+0x7c>)
 8005646:	62b3      	str	r3, [r6, #40]	; 0x28
 8005648:	89a3      	ldrh	r3, [r4, #12]
 800564a:	6020      	str	r0, [r4, #0]
 800564c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005650:	81a3      	strh	r3, [r4, #12]
 8005652:	9b00      	ldr	r3, [sp, #0]
 8005654:	6163      	str	r3, [r4, #20]
 8005656:	9b01      	ldr	r3, [sp, #4]
 8005658:	6120      	str	r0, [r4, #16]
 800565a:	b15b      	cbz	r3, 8005674 <__smakebuf_r+0x74>
 800565c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005660:	4630      	mov	r0, r6
 8005662:	f000 f963 	bl	800592c <_isatty_r>
 8005666:	b128      	cbz	r0, 8005674 <__smakebuf_r+0x74>
 8005668:	89a3      	ldrh	r3, [r4, #12]
 800566a:	f023 0303 	bic.w	r3, r3, #3
 800566e:	f043 0301 	orr.w	r3, r3, #1
 8005672:	81a3      	strh	r3, [r4, #12]
 8005674:	89a0      	ldrh	r0, [r4, #12]
 8005676:	4305      	orrs	r5, r0
 8005678:	81a5      	strh	r5, [r4, #12]
 800567a:	e7cd      	b.n	8005618 <__smakebuf_r+0x18>
 800567c:	0800540d 	.word	0x0800540d

08005680 <_free_r>:
 8005680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005682:	2900      	cmp	r1, #0
 8005684:	d044      	beq.n	8005710 <_free_r+0x90>
 8005686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800568a:	9001      	str	r0, [sp, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	f1a1 0404 	sub.w	r4, r1, #4
 8005692:	bfb8      	it	lt
 8005694:	18e4      	addlt	r4, r4, r3
 8005696:	f000 f96b 	bl	8005970 <__malloc_lock>
 800569a:	4a1e      	ldr	r2, [pc, #120]	; (8005714 <_free_r+0x94>)
 800569c:	9801      	ldr	r0, [sp, #4]
 800569e:	6813      	ldr	r3, [r2, #0]
 80056a0:	b933      	cbnz	r3, 80056b0 <_free_r+0x30>
 80056a2:	6063      	str	r3, [r4, #4]
 80056a4:	6014      	str	r4, [r2, #0]
 80056a6:	b003      	add	sp, #12
 80056a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056ac:	f000 b966 	b.w	800597c <__malloc_unlock>
 80056b0:	42a3      	cmp	r3, r4
 80056b2:	d908      	bls.n	80056c6 <_free_r+0x46>
 80056b4:	6825      	ldr	r5, [r4, #0]
 80056b6:	1961      	adds	r1, r4, r5
 80056b8:	428b      	cmp	r3, r1
 80056ba:	bf01      	itttt	eq
 80056bc:	6819      	ldreq	r1, [r3, #0]
 80056be:	685b      	ldreq	r3, [r3, #4]
 80056c0:	1949      	addeq	r1, r1, r5
 80056c2:	6021      	streq	r1, [r4, #0]
 80056c4:	e7ed      	b.n	80056a2 <_free_r+0x22>
 80056c6:	461a      	mov	r2, r3
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	b10b      	cbz	r3, 80056d0 <_free_r+0x50>
 80056cc:	42a3      	cmp	r3, r4
 80056ce:	d9fa      	bls.n	80056c6 <_free_r+0x46>
 80056d0:	6811      	ldr	r1, [r2, #0]
 80056d2:	1855      	adds	r5, r2, r1
 80056d4:	42a5      	cmp	r5, r4
 80056d6:	d10b      	bne.n	80056f0 <_free_r+0x70>
 80056d8:	6824      	ldr	r4, [r4, #0]
 80056da:	4421      	add	r1, r4
 80056dc:	1854      	adds	r4, r2, r1
 80056de:	42a3      	cmp	r3, r4
 80056e0:	6011      	str	r1, [r2, #0]
 80056e2:	d1e0      	bne.n	80056a6 <_free_r+0x26>
 80056e4:	681c      	ldr	r4, [r3, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	6053      	str	r3, [r2, #4]
 80056ea:	4421      	add	r1, r4
 80056ec:	6011      	str	r1, [r2, #0]
 80056ee:	e7da      	b.n	80056a6 <_free_r+0x26>
 80056f0:	d902      	bls.n	80056f8 <_free_r+0x78>
 80056f2:	230c      	movs	r3, #12
 80056f4:	6003      	str	r3, [r0, #0]
 80056f6:	e7d6      	b.n	80056a6 <_free_r+0x26>
 80056f8:	6825      	ldr	r5, [r4, #0]
 80056fa:	1961      	adds	r1, r4, r5
 80056fc:	428b      	cmp	r3, r1
 80056fe:	bf04      	itt	eq
 8005700:	6819      	ldreq	r1, [r3, #0]
 8005702:	685b      	ldreq	r3, [r3, #4]
 8005704:	6063      	str	r3, [r4, #4]
 8005706:	bf04      	itt	eq
 8005708:	1949      	addeq	r1, r1, r5
 800570a:	6021      	streq	r1, [r4, #0]
 800570c:	6054      	str	r4, [r2, #4]
 800570e:	e7ca      	b.n	80056a6 <_free_r+0x26>
 8005710:	b003      	add	sp, #12
 8005712:	bd30      	pop	{r4, r5, pc}
 8005714:	200144c0 	.word	0x200144c0

08005718 <sbrk_aligned>:
 8005718:	b570      	push	{r4, r5, r6, lr}
 800571a:	4e0e      	ldr	r6, [pc, #56]	; (8005754 <sbrk_aligned+0x3c>)
 800571c:	460c      	mov	r4, r1
 800571e:	6831      	ldr	r1, [r6, #0]
 8005720:	4605      	mov	r5, r0
 8005722:	b911      	cbnz	r1, 800572a <sbrk_aligned+0x12>
 8005724:	f000 f88c 	bl	8005840 <_sbrk_r>
 8005728:	6030      	str	r0, [r6, #0]
 800572a:	4621      	mov	r1, r4
 800572c:	4628      	mov	r0, r5
 800572e:	f000 f887 	bl	8005840 <_sbrk_r>
 8005732:	1c43      	adds	r3, r0, #1
 8005734:	d00a      	beq.n	800574c <sbrk_aligned+0x34>
 8005736:	1cc4      	adds	r4, r0, #3
 8005738:	f024 0403 	bic.w	r4, r4, #3
 800573c:	42a0      	cmp	r0, r4
 800573e:	d007      	beq.n	8005750 <sbrk_aligned+0x38>
 8005740:	1a21      	subs	r1, r4, r0
 8005742:	4628      	mov	r0, r5
 8005744:	f000 f87c 	bl	8005840 <_sbrk_r>
 8005748:	3001      	adds	r0, #1
 800574a:	d101      	bne.n	8005750 <sbrk_aligned+0x38>
 800574c:	f04f 34ff 	mov.w	r4, #4294967295
 8005750:	4620      	mov	r0, r4
 8005752:	bd70      	pop	{r4, r5, r6, pc}
 8005754:	200144c4 	.word	0x200144c4

08005758 <_malloc_r>:
 8005758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800575c:	1ccd      	adds	r5, r1, #3
 800575e:	f025 0503 	bic.w	r5, r5, #3
 8005762:	3508      	adds	r5, #8
 8005764:	2d0c      	cmp	r5, #12
 8005766:	bf38      	it	cc
 8005768:	250c      	movcc	r5, #12
 800576a:	2d00      	cmp	r5, #0
 800576c:	4607      	mov	r7, r0
 800576e:	db01      	blt.n	8005774 <_malloc_r+0x1c>
 8005770:	42a9      	cmp	r1, r5
 8005772:	d905      	bls.n	8005780 <_malloc_r+0x28>
 8005774:	230c      	movs	r3, #12
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	2600      	movs	r6, #0
 800577a:	4630      	mov	r0, r6
 800577c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005780:	4e2e      	ldr	r6, [pc, #184]	; (800583c <_malloc_r+0xe4>)
 8005782:	f000 f8f5 	bl	8005970 <__malloc_lock>
 8005786:	6833      	ldr	r3, [r6, #0]
 8005788:	461c      	mov	r4, r3
 800578a:	bb34      	cbnz	r4, 80057da <_malloc_r+0x82>
 800578c:	4629      	mov	r1, r5
 800578e:	4638      	mov	r0, r7
 8005790:	f7ff ffc2 	bl	8005718 <sbrk_aligned>
 8005794:	1c43      	adds	r3, r0, #1
 8005796:	4604      	mov	r4, r0
 8005798:	d14d      	bne.n	8005836 <_malloc_r+0xde>
 800579a:	6834      	ldr	r4, [r6, #0]
 800579c:	4626      	mov	r6, r4
 800579e:	2e00      	cmp	r6, #0
 80057a0:	d140      	bne.n	8005824 <_malloc_r+0xcc>
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	4631      	mov	r1, r6
 80057a6:	4638      	mov	r0, r7
 80057a8:	eb04 0803 	add.w	r8, r4, r3
 80057ac:	f000 f848 	bl	8005840 <_sbrk_r>
 80057b0:	4580      	cmp	r8, r0
 80057b2:	d13a      	bne.n	800582a <_malloc_r+0xd2>
 80057b4:	6821      	ldr	r1, [r4, #0]
 80057b6:	3503      	adds	r5, #3
 80057b8:	1a6d      	subs	r5, r5, r1
 80057ba:	f025 0503 	bic.w	r5, r5, #3
 80057be:	3508      	adds	r5, #8
 80057c0:	2d0c      	cmp	r5, #12
 80057c2:	bf38      	it	cc
 80057c4:	250c      	movcc	r5, #12
 80057c6:	4629      	mov	r1, r5
 80057c8:	4638      	mov	r0, r7
 80057ca:	f7ff ffa5 	bl	8005718 <sbrk_aligned>
 80057ce:	3001      	adds	r0, #1
 80057d0:	d02b      	beq.n	800582a <_malloc_r+0xd2>
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	442b      	add	r3, r5
 80057d6:	6023      	str	r3, [r4, #0]
 80057d8:	e00e      	b.n	80057f8 <_malloc_r+0xa0>
 80057da:	6822      	ldr	r2, [r4, #0]
 80057dc:	1b52      	subs	r2, r2, r5
 80057de:	d41e      	bmi.n	800581e <_malloc_r+0xc6>
 80057e0:	2a0b      	cmp	r2, #11
 80057e2:	d916      	bls.n	8005812 <_malloc_r+0xba>
 80057e4:	1961      	adds	r1, r4, r5
 80057e6:	42a3      	cmp	r3, r4
 80057e8:	6025      	str	r5, [r4, #0]
 80057ea:	bf18      	it	ne
 80057ec:	6059      	strne	r1, [r3, #4]
 80057ee:	6863      	ldr	r3, [r4, #4]
 80057f0:	bf08      	it	eq
 80057f2:	6031      	streq	r1, [r6, #0]
 80057f4:	5162      	str	r2, [r4, r5]
 80057f6:	604b      	str	r3, [r1, #4]
 80057f8:	4638      	mov	r0, r7
 80057fa:	f104 060b 	add.w	r6, r4, #11
 80057fe:	f000 f8bd 	bl	800597c <__malloc_unlock>
 8005802:	f026 0607 	bic.w	r6, r6, #7
 8005806:	1d23      	adds	r3, r4, #4
 8005808:	1af2      	subs	r2, r6, r3
 800580a:	d0b6      	beq.n	800577a <_malloc_r+0x22>
 800580c:	1b9b      	subs	r3, r3, r6
 800580e:	50a3      	str	r3, [r4, r2]
 8005810:	e7b3      	b.n	800577a <_malloc_r+0x22>
 8005812:	6862      	ldr	r2, [r4, #4]
 8005814:	42a3      	cmp	r3, r4
 8005816:	bf0c      	ite	eq
 8005818:	6032      	streq	r2, [r6, #0]
 800581a:	605a      	strne	r2, [r3, #4]
 800581c:	e7ec      	b.n	80057f8 <_malloc_r+0xa0>
 800581e:	4623      	mov	r3, r4
 8005820:	6864      	ldr	r4, [r4, #4]
 8005822:	e7b2      	b.n	800578a <_malloc_r+0x32>
 8005824:	4634      	mov	r4, r6
 8005826:	6876      	ldr	r6, [r6, #4]
 8005828:	e7b9      	b.n	800579e <_malloc_r+0x46>
 800582a:	230c      	movs	r3, #12
 800582c:	603b      	str	r3, [r7, #0]
 800582e:	4638      	mov	r0, r7
 8005830:	f000 f8a4 	bl	800597c <__malloc_unlock>
 8005834:	e7a1      	b.n	800577a <_malloc_r+0x22>
 8005836:	6025      	str	r5, [r4, #0]
 8005838:	e7de      	b.n	80057f8 <_malloc_r+0xa0>
 800583a:	bf00      	nop
 800583c:	200144c0 	.word	0x200144c0

08005840 <_sbrk_r>:
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	4d06      	ldr	r5, [pc, #24]	; (800585c <_sbrk_r+0x1c>)
 8005844:	2300      	movs	r3, #0
 8005846:	4604      	mov	r4, r0
 8005848:	4608      	mov	r0, r1
 800584a:	602b      	str	r3, [r5, #0]
 800584c:	f000 f8ae 	bl	80059ac <_sbrk>
 8005850:	1c43      	adds	r3, r0, #1
 8005852:	d102      	bne.n	800585a <_sbrk_r+0x1a>
 8005854:	682b      	ldr	r3, [r5, #0]
 8005856:	b103      	cbz	r3, 800585a <_sbrk_r+0x1a>
 8005858:	6023      	str	r3, [r4, #0]
 800585a:	bd38      	pop	{r3, r4, r5, pc}
 800585c:	200144c8 	.word	0x200144c8

08005860 <__sread>:
 8005860:	b510      	push	{r4, lr}
 8005862:	460c      	mov	r4, r1
 8005864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005868:	f000 f88e 	bl	8005988 <_read_r>
 800586c:	2800      	cmp	r0, #0
 800586e:	bfab      	itete	ge
 8005870:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005872:	89a3      	ldrhlt	r3, [r4, #12]
 8005874:	181b      	addge	r3, r3, r0
 8005876:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800587a:	bfac      	ite	ge
 800587c:	6563      	strge	r3, [r4, #84]	; 0x54
 800587e:	81a3      	strhlt	r3, [r4, #12]
 8005880:	bd10      	pop	{r4, pc}

08005882 <__swrite>:
 8005882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005886:	461f      	mov	r7, r3
 8005888:	898b      	ldrh	r3, [r1, #12]
 800588a:	05db      	lsls	r3, r3, #23
 800588c:	4605      	mov	r5, r0
 800588e:	460c      	mov	r4, r1
 8005890:	4616      	mov	r6, r2
 8005892:	d505      	bpl.n	80058a0 <__swrite+0x1e>
 8005894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005898:	2302      	movs	r3, #2
 800589a:	2200      	movs	r2, #0
 800589c:	f000 f856 	bl	800594c <_lseek_r>
 80058a0:	89a3      	ldrh	r3, [r4, #12]
 80058a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058aa:	81a3      	strh	r3, [r4, #12]
 80058ac:	4632      	mov	r2, r6
 80058ae:	463b      	mov	r3, r7
 80058b0:	4628      	mov	r0, r5
 80058b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058b6:	f7ff bb31 	b.w	8004f1c <_write_r>

080058ba <__sseek>:
 80058ba:	b510      	push	{r4, lr}
 80058bc:	460c      	mov	r4, r1
 80058be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c2:	f000 f843 	bl	800594c <_lseek_r>
 80058c6:	1c43      	adds	r3, r0, #1
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	bf15      	itete	ne
 80058cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80058ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058d6:	81a3      	strheq	r3, [r4, #12]
 80058d8:	bf18      	it	ne
 80058da:	81a3      	strhne	r3, [r4, #12]
 80058dc:	bd10      	pop	{r4, pc}

080058de <__sclose>:
 80058de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058e2:	f000 b801 	b.w	80058e8 <_close_r>
	...

080058e8 <_close_r>:
 80058e8:	b538      	push	{r3, r4, r5, lr}
 80058ea:	4d06      	ldr	r5, [pc, #24]	; (8005904 <_close_r+0x1c>)
 80058ec:	2300      	movs	r3, #0
 80058ee:	4604      	mov	r4, r0
 80058f0:	4608      	mov	r0, r1
 80058f2:	602b      	str	r3, [r5, #0]
 80058f4:	f7fa fd63 	bl	80003be <_close>
 80058f8:	1c43      	adds	r3, r0, #1
 80058fa:	d102      	bne.n	8005902 <_close_r+0x1a>
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	b103      	cbz	r3, 8005902 <_close_r+0x1a>
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	bd38      	pop	{r3, r4, r5, pc}
 8005904:	200144c8 	.word	0x200144c8

08005908 <_fstat_r>:
 8005908:	b538      	push	{r3, r4, r5, lr}
 800590a:	4d07      	ldr	r5, [pc, #28]	; (8005928 <_fstat_r+0x20>)
 800590c:	2300      	movs	r3, #0
 800590e:	4604      	mov	r4, r0
 8005910:	4608      	mov	r0, r1
 8005912:	4611      	mov	r1, r2
 8005914:	602b      	str	r3, [r5, #0]
 8005916:	f7fa fd5e 	bl	80003d6 <_fstat>
 800591a:	1c43      	adds	r3, r0, #1
 800591c:	d102      	bne.n	8005924 <_fstat_r+0x1c>
 800591e:	682b      	ldr	r3, [r5, #0]
 8005920:	b103      	cbz	r3, 8005924 <_fstat_r+0x1c>
 8005922:	6023      	str	r3, [r4, #0]
 8005924:	bd38      	pop	{r3, r4, r5, pc}
 8005926:	bf00      	nop
 8005928:	200144c8 	.word	0x200144c8

0800592c <_isatty_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	4d06      	ldr	r5, [pc, #24]	; (8005948 <_isatty_r+0x1c>)
 8005930:	2300      	movs	r3, #0
 8005932:	4604      	mov	r4, r0
 8005934:	4608      	mov	r0, r1
 8005936:	602b      	str	r3, [r5, #0]
 8005938:	f7fa fd5d 	bl	80003f6 <_isatty>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d102      	bne.n	8005946 <_isatty_r+0x1a>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	b103      	cbz	r3, 8005946 <_isatty_r+0x1a>
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	200144c8 	.word	0x200144c8

0800594c <_lseek_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4d07      	ldr	r5, [pc, #28]	; (800596c <_lseek_r+0x20>)
 8005950:	4604      	mov	r4, r0
 8005952:	4608      	mov	r0, r1
 8005954:	4611      	mov	r1, r2
 8005956:	2200      	movs	r2, #0
 8005958:	602a      	str	r2, [r5, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	f7fa fd56 	bl	800040c <_lseek>
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	d102      	bne.n	800596a <_lseek_r+0x1e>
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	b103      	cbz	r3, 800596a <_lseek_r+0x1e>
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	200144c8 	.word	0x200144c8

08005970 <__malloc_lock>:
 8005970:	4801      	ldr	r0, [pc, #4]	; (8005978 <__malloc_lock+0x8>)
 8005972:	f7ff be1d 	b.w	80055b0 <__retarget_lock_acquire_recursive>
 8005976:	bf00      	nop
 8005978:	200144bb 	.word	0x200144bb

0800597c <__malloc_unlock>:
 800597c:	4801      	ldr	r0, [pc, #4]	; (8005984 <__malloc_unlock+0x8>)
 800597e:	f7ff be18 	b.w	80055b2 <__retarget_lock_release_recursive>
 8005982:	bf00      	nop
 8005984:	200144bb 	.word	0x200144bb

08005988 <_read_r>:
 8005988:	b538      	push	{r3, r4, r5, lr}
 800598a:	4d07      	ldr	r5, [pc, #28]	; (80059a8 <_read_r+0x20>)
 800598c:	4604      	mov	r4, r0
 800598e:	4608      	mov	r0, r1
 8005990:	4611      	mov	r1, r2
 8005992:	2200      	movs	r2, #0
 8005994:	602a      	str	r2, [r5, #0]
 8005996:	461a      	mov	r2, r3
 8005998:	f7fa fcf4 	bl	8000384 <_read>
 800599c:	1c43      	adds	r3, r0, #1
 800599e:	d102      	bne.n	80059a6 <_read_r+0x1e>
 80059a0:	682b      	ldr	r3, [r5, #0]
 80059a2:	b103      	cbz	r3, 80059a6 <_read_r+0x1e>
 80059a4:	6023      	str	r3, [r4, #0]
 80059a6:	bd38      	pop	{r3, r4, r5, pc}
 80059a8:	200144c8 	.word	0x200144c8

080059ac <_sbrk>:
 80059ac:	4a04      	ldr	r2, [pc, #16]	; (80059c0 <_sbrk+0x14>)
 80059ae:	6811      	ldr	r1, [r2, #0]
 80059b0:	4603      	mov	r3, r0
 80059b2:	b909      	cbnz	r1, 80059b8 <_sbrk+0xc>
 80059b4:	4903      	ldr	r1, [pc, #12]	; (80059c4 <_sbrk+0x18>)
 80059b6:	6011      	str	r1, [r2, #0]
 80059b8:	6810      	ldr	r0, [r2, #0]
 80059ba:	4403      	add	r3, r0
 80059bc:	6013      	str	r3, [r2, #0]
 80059be:	4770      	bx	lr
 80059c0:	200144cc 	.word	0x200144cc
 80059c4:	200144d0 	.word	0x200144d0

080059c8 <_init>:
 80059c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ca:	bf00      	nop
 80059cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ce:	bc08      	pop	{r3}
 80059d0:	469e      	mov	lr, r3
 80059d2:	4770      	bx	lr

080059d4 <_fini>:
 80059d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d6:	bf00      	nop
 80059d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059da:	bc08      	pop	{r3}
 80059dc:	469e      	mov	lr, r3
 80059de:	4770      	bx	lr
