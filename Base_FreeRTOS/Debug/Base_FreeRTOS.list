
Base_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080030a8  080030a8  000130a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800316c  0800316c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800316c  0800316c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800316c  0800316c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800316c  0800316c  0001316c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003170  08003170  00013170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012dd4  20000070  080031e4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012e44  080031e4  00022e44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000647a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011fe  00000000  00000000  0002651a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000638  00000000  00000000  00027718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b0  00000000  00000000  00027d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f8e  00000000  00000000  00028300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006ca5  00000000  00000000  0002c28e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00012532  00000000  00000000  00032f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00045465  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fc0  00000000  00000000  000454b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003090 	.word	0x08003090

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003090 	.word	0x08003090

080001e0 <main>:
//Cabeceras de las funciones del programa
void vTaskOne( void * pvParameters );
void vTaskTwo( void * pvParameters );

int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b088      	sub	sp, #32
 80001e4:	af02      	add	r7, sp, #8
	BaseType_t xReturned;
	TaskHandle_t xHandleTask1 = NULL;
 80001e6:	2300      	movs	r3, #0
 80001e8:	60bb      	str	r3, [r7, #8]
	TaskHandle_t xHandleTask2 = NULL;
 80001ea:	2300      	movs	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]

	//Configuracion tarea 1
	xReturned = xTaskCreate(
 80001ee:	f107 0308 	add.w	r3, r7, #8
 80001f2:	9301      	str	r3, [sp, #4]
 80001f4:	2302      	movs	r3, #2
 80001f6:	9300      	str	r3, [sp, #0]
 80001f8:	4b18      	ldr	r3, [pc, #96]	; (800025c <main+0x7c>)
 80001fa:	22c8      	movs	r2, #200	; 0xc8
 80001fc:	4918      	ldr	r1, [pc, #96]	; (8000260 <main+0x80>)
 80001fe:	4819      	ldr	r0, [pc, #100]	; (8000264 <main+0x84>)
 8000200:	f000 fc82 	bl	8000b08 <xTaskCreate>
 8000204:	6178      	str	r0, [r7, #20]
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						"Hola Mundo desde la tarea-1",    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask1);      /* Used to pass out the created task's handle. */

	configASSERT(xReturned == pdPASS);
 8000206:	697b      	ldr	r3, [r7, #20]
 8000208:	2b01      	cmp	r3, #1
 800020a:	d00a      	beq.n	8000222 <main+0x42>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800020c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000210:	f383 8811 	msr	BASEPRI, r3
 8000214:	f3bf 8f6f 	isb	sy
 8000218:	f3bf 8f4f 	dsb	sy
 800021c:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800021e:	bf00      	nop
 8000220:	e7fe      	b.n	8000220 <main+0x40>

	//configuracion tarea 2
	xReturned = xTaskCreate(
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	9301      	str	r3, [sp, #4]
 8000226:	2302      	movs	r3, #2
 8000228:	9300      	str	r3, [sp, #0]
 800022a:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <main+0x88>)
 800022c:	22c8      	movs	r2, #200	; 0xc8
 800022e:	490f      	ldr	r1, [pc, #60]	; (800026c <main+0x8c>)
 8000230:	480f      	ldr	r0, [pc, #60]	; (8000270 <main+0x90>)
 8000232:	f000 fc69 	bl	8000b08 <xTaskCreate>
 8000236:	6178      	str	r0, [r7, #20]
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						"Hola Mundo desde la tarea-2",    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask2);      /* Used to pass out the created task's handle. */

	configASSERT(xReturned == pdPASS);
 8000238:	697b      	ldr	r3, [r7, #20]
 800023a:	2b01      	cmp	r3, #1
 800023c:	d00a      	beq.n	8000254 <main+0x74>
        __asm volatile
 800023e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000242:	f383 8811 	msr	BASEPRI, r3
 8000246:	f3bf 8f6f 	isb	sy
 800024a:	f3bf 8f4f 	dsb	sy
 800024e:	60fb      	str	r3, [r7, #12]
    }
 8000250:	bf00      	nop
 8000252:	e7fe      	b.n	8000252 <main+0x72>

	/* Start the created tasks running. */
	vTaskStartScheduler();
 8000254:	f000 fdb4 	bl	8000dc0 <vTaskStartScheduler>

	while(1)
 8000258:	e7fe      	b.n	8000258 <main+0x78>
 800025a:	bf00      	nop
 800025c:	080030a8 	.word	0x080030a8
 8000260:	080030c4 	.word	0x080030c4
 8000264:	08000275 	.word	0x08000275
 8000268:	080030cc 	.word	0x080030cc
 800026c:	080030e8 	.word	0x080030e8
 8000270:	08000299 	.word	0x08000299

08000274 <vTaskOne>:
	}
}

/* Funcion que gobierna a la tarea 1*/
void vTaskOne( void * pvParameters )
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n",(char *) pvParameters);
 800027c:	6878      	ldr	r0, [r7, #4]
 800027e:	f002 fa69 	bl	8002754 <puts>
		taskYIELD();
 8000282:	4b04      	ldr	r3, [pc, #16]	; (8000294 <vTaskOne+0x20>)
 8000284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	f3bf 8f4f 	dsb	sy
 800028e:	f3bf 8f6f 	isb	sy
		printf("%s\n",(char *) pvParameters);
 8000292:	e7f3      	b.n	800027c <vTaskOne+0x8>
 8000294:	e000ed04 	.word	0xe000ed04

08000298 <vTaskTwo>:
	}
}

/* Funcion que gobierna a la tarea 2*/
void vTaskTwo( void * pvParameters )
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		while(1)
		{
			printf("%s\n",(char *) pvParameters);
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f002 fa57 	bl	8002754 <puts>
			taskYIELD();
 80002a6:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <vTaskTwo+0x20>)
 80002a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	f3bf 8f4f 	dsb	sy
 80002b2:	f3bf 8f6f 	isb	sy
			printf("%s\n",(char *) pvParameters);
 80002b6:	e7f3      	b.n	80002a0 <vTaskTwo+0x8>
 80002b8:	e000ed04 	.word	0xe000ed04

080002bc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <ITM_SendChar+0x48>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4a0e      	ldr	r2, [pc, #56]	; (8000304 <ITM_SendChar+0x48>)
 80002cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002d0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80002d2:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <ITM_SendChar+0x4c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a0c      	ldr	r2, [pc, #48]	; (8000308 <ITM_SendChar+0x4c>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80002de:	bf00      	nop
 80002e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f003 0301 	and.w	r3, r3, #1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d0f8      	beq.n	80002e0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80002ee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	6013      	str	r3, [r2, #0]
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	e000edfc 	.word	0xe000edfc
 8000308:	e0000e00 	.word	0xe0000e00

0800030c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b086      	sub	sp, #24
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000318:	2300      	movs	r3, #0
 800031a:	617b      	str	r3, [r7, #20]
 800031c:	e00a      	b.n	8000334 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800031e:	f3af 8000 	nop.w
 8000322:	4601      	mov	r1, r0
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1c5a      	adds	r2, r3, #1
 8000328:	60ba      	str	r2, [r7, #8]
 800032a:	b2ca      	uxtb	r2, r1
 800032c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800032e:	697b      	ldr	r3, [r7, #20]
 8000330:	3301      	adds	r3, #1
 8000332:	617b      	str	r3, [r7, #20]
 8000334:	697a      	ldr	r2, [r7, #20]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	429a      	cmp	r2, r3
 800033a:	dbf0      	blt.n	800031e <_read+0x12>
	}

return len;
 800033c:	687b      	ldr	r3, [r7, #4]
}
 800033e:	4618      	mov	r0, r3
 8000340:	3718      	adds	r7, #24
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}

08000346 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000346:	b580      	push	{r7, lr}
 8000348:	b086      	sub	sp, #24
 800034a:	af00      	add	r7, sp, #0
 800034c:	60f8      	str	r0, [r7, #12]
 800034e:	60b9      	str	r1, [r7, #8]
 8000350:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000352:	2300      	movs	r3, #0
 8000354:	617b      	str	r3, [r7, #20]
 8000356:	e009      	b.n	800036c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	1c5a      	adds	r2, r3, #1
 800035c:	60ba      	str	r2, [r7, #8]
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff ffab 	bl	80002bc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000366:	697b      	ldr	r3, [r7, #20]
 8000368:	3301      	adds	r3, #1
 800036a:	617b      	str	r3, [r7, #20]
 800036c:	697a      	ldr	r2, [r7, #20]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	429a      	cmp	r2, r3
 8000372:	dbf1      	blt.n	8000358 <_write+0x12>
	}
	return len;
 8000374:	687b      	ldr	r3, [r7, #4]
}
 8000376:	4618      	mov	r0, r3
 8000378:	3718      	adds	r7, #24
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}

0800037e <_close>:

int _close(int file)
{
 800037e:	b480      	push	{r7}
 8000380:	b083      	sub	sp, #12
 8000382:	af00      	add	r7, sp, #0
 8000384:	6078      	str	r0, [r7, #4]
	return -1;
 8000386:	f04f 33ff 	mov.w	r3, #4294967295
}
 800038a:	4618      	mov	r0, r3
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000396:	b480      	push	{r7}
 8000398:	b083      	sub	sp, #12
 800039a:	af00      	add	r7, sp, #0
 800039c:	6078      	str	r0, [r7, #4]
 800039e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003a6:	605a      	str	r2, [r3, #4]
	return 0;
 80003a8:	2300      	movs	r3, #0
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr

080003b6 <_isatty>:

int _isatty(int file)
{
 80003b6:	b480      	push	{r7}
 80003b8:	b083      	sub	sp, #12
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
	return 1;
 80003be:	2301      	movs	r3, #1
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	607a      	str	r2, [r7, #4]
	return 0;
 80003d8:	2300      	movs	r3, #0
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3714      	adds	r7, #20
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
	...

080003e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003e8:	480d      	ldr	r0, [pc, #52]	; (8000420 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f0:	480c      	ldr	r0, [pc, #48]	; (8000424 <LoopForever+0x6>)
  ldr r1, =_edata
 80003f2:	490d      	ldr	r1, [pc, #52]	; (8000428 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003f4:	4a0d      	ldr	r2, [pc, #52]	; (800042c <LoopForever+0xe>)
  movs r3, #0
 80003f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f8:	e002      	b.n	8000400 <LoopCopyDataInit>

080003fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003fe:	3304      	adds	r3, #4

08000400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000404:	d3f9      	bcc.n	80003fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000406:	4a0a      	ldr	r2, [pc, #40]	; (8000430 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000408:	4c0a      	ldr	r4, [pc, #40]	; (8000434 <LoopForever+0x16>)
  movs r3, #0
 800040a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800040c:	e001      	b.n	8000412 <LoopFillZerobss>

0800040e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800040e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000410:	3204      	adds	r2, #4

08000412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000414:	d3fb      	bcc.n	800040e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000416:	f002 f8f5 	bl	8002604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800041a:	f7ff fee1 	bl	80001e0 <main>

0800041e <LoopForever>:

LoopForever:
    b LoopForever
 800041e:	e7fe      	b.n	800041e <LoopForever>
  ldr   r0, =_estack
 8000420:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000428:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800042c:	08003174 	.word	0x08003174
  ldr r2, =_sbss
 8000430:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000434:	20012e44 	.word	0x20012e44

08000438 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000438:	e7fe      	b.n	8000438 <ADC_IRQHandler>

0800043a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800043a:	b480      	push	{r7}
 800043c:	b083      	sub	sp, #12
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	f103 0208 	add.w	r2, r3, #8
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f04f 32ff 	mov.w	r2, #4294967295
 8000452:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	f103 0208 	add.w	r2, r3, #8
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	f103 0208 	add.w	r2, r3, #8
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800047a:	b480      	push	{r7}
 800047c:	b083      	sub	sp, #12
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	2200      	movs	r2, #0
 8000486:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000488:	bf00      	nop
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr

08000494 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004aa:	d103      	bne.n	80004b4 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	691b      	ldr	r3, [r3, #16]
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	e00c      	b.n	80004ce <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	3308      	adds	r3, #8
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	e002      	b.n	80004c2 <vListInsert+0x2e>
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	60fb      	str	r3, [r7, #12]
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	68ba      	ldr	r2, [r7, #8]
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d2f6      	bcs.n	80004bc <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	685a      	ldr	r2, [r3, #4]
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	683a      	ldr	r2, [r7, #0]
 80004dc:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	683a      	ldr	r2, [r7, #0]
 80004e8:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	1c5a      	adds	r2, r3, #1
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	601a      	str	r2, [r3, #0]
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000506:	b480      	push	{r7}
 8000508:	b085      	sub	sp, #20
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	691b      	ldr	r3, [r3, #16]
 8000512:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	6892      	ldr	r2, [r2, #8]
 800051c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	6852      	ldr	r2, [r2, #4]
 8000526:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	429a      	cmp	r2, r3
 8000530:	d103      	bne.n	800053a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	689a      	ldr	r2, [r3, #8]
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	1e5a      	subs	r2, r3, #1
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	681b      	ldr	r3, [r3, #0]
}
 800054e:	4618      	mov	r0, r3
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b086      	sub	sp, #24
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000564:	2301      	movs	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800056c:	693b      	ldr	r3, [r7, #16]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d10a      	bne.n	8000588 <xQueueGenericReset+0x2e>
        __asm volatile
 8000572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000576:	f383 8811 	msr	BASEPRI, r3
 800057a:	f3bf 8f6f 	isb	sy
 800057e:	f3bf 8f4f 	dsb	sy
 8000582:	60fb      	str	r3, [r7, #12]
    }
 8000584:	bf00      	nop
 8000586:	e7fe      	b.n	8000586 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d052      	beq.n	8000634 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 800058e:	693b      	ldr	r3, [r7, #16]
 8000590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000592:	2b00      	cmp	r3, #0
 8000594:	d04e      	beq.n	8000634 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000596:	693b      	ldr	r3, [r7, #16]
 8000598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800059a:	693b      	ldr	r3, [r7, #16]
 800059c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800059e:	2100      	movs	r1, #0
 80005a0:	fba3 2302 	umull	r2, r3, r3, r2
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d000      	beq.n	80005aa <xQueueGenericReset+0x50>
 80005a8:	2101      	movs	r1, #1
 80005aa:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d141      	bne.n	8000634 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 80005b0:	f001 fd7a 	bl	80020a8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80005b4:	693b      	ldr	r3, [r7, #16]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	693b      	ldr	r3, [r7, #16]
 80005ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005bc:	6939      	ldr	r1, [r7, #16]
 80005be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80005c0:	fb01 f303 	mul.w	r3, r1, r3
 80005c4:	441a      	add	r2, r3
 80005c6:	693b      	ldr	r3, [r7, #16]
 80005c8:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80005ca:	693b      	ldr	r3, [r7, #16]
 80005cc:	2200      	movs	r2, #0
 80005ce:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80005d0:	693b      	ldr	r3, [r7, #16]
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	693b      	ldr	r3, [r7, #16]
 80005d6:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80005d8:	693b      	ldr	r3, [r7, #16]
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	693b      	ldr	r3, [r7, #16]
 80005de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005e0:	3b01      	subs	r3, #1
 80005e2:	6939      	ldr	r1, [r7, #16]
 80005e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80005e6:	fb01 f303 	mul.w	r3, r1, r3
 80005ea:	441a      	add	r2, r3
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	22ff      	movs	r2, #255	; 0xff
 80005f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	22ff      	movs	r2, #255	; 0xff
 80005fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d109      	bne.n	800061a <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	691b      	ldr	r3, [r3, #16]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d00f      	beq.n	800062e <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800060e:	693b      	ldr	r3, [r7, #16]
 8000610:	3310      	adds	r3, #16
 8000612:	4618      	mov	r0, r3
 8000614:	f000 feec 	bl	80013f0 <xTaskRemoveFromEventList>
 8000618:	e009      	b.n	800062e <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	3310      	adds	r3, #16
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ff0b 	bl	800043a <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	3324      	adds	r3, #36	; 0x24
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ff06 	bl	800043a <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800062e:	f001 fd6b 	bl	8002108 <vPortExitCritical>
 8000632:	e001      	b.n	8000638 <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d10a      	bne.n	8000654 <xQueueGenericReset+0xfa>
        __asm volatile
 800063e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000642:	f383 8811 	msr	BASEPRI, r3
 8000646:	f3bf 8f6f 	isb	sy
 800064a:	f3bf 8f4f 	dsb	sy
 800064e:	60bb      	str	r3, [r7, #8]
    }
 8000650:	bf00      	nop
 8000652:	e7fe      	b.n	8000652 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000654:	697b      	ldr	r3, [r7, #20]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800065e:	b580      	push	{r7, lr}
 8000660:	b08a      	sub	sp, #40	; 0x28
 8000662:	af02      	add	r7, sp, #8
 8000664:	60f8      	str	r0, [r7, #12]
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	4613      	mov	r3, r2
 800066a:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d02e      	beq.n	80006d4 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000676:	2100      	movs	r1, #0
 8000678:	68ba      	ldr	r2, [r7, #8]
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	fba3 2302 	umull	r2, r3, r3, r2
 8000680:	2b00      	cmp	r3, #0
 8000682:	d000      	beq.n	8000686 <xQueueGenericCreate+0x28>
 8000684:	2101      	movs	r1, #1
 8000686:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000688:	2b00      	cmp	r3, #0
 800068a:	d123      	bne.n	80006d4 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000694:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000698:	d81c      	bhi.n	80006d4 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	68ba      	ldr	r2, [r7, #8]
 800069e:	fb02 f303 	mul.w	r3, r2, r3
 80006a2:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	3350      	adds	r3, #80	; 0x50
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 fddf 	bl	800226c <pvPortMalloc>
 80006ae:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d01c      	beq.n	80006f0 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	3350      	adds	r3, #80	; 0x50
 80006be:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80006c0:	79fa      	ldrb	r2, [r7, #7]
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	4613      	mov	r3, r2
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	68b9      	ldr	r1, [r7, #8]
 80006cc:	68f8      	ldr	r0, [r7, #12]
 80006ce:	f000 f814 	bl	80006fa <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80006d2:	e00d      	b.n	80006f0 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d10a      	bne.n	80006f0 <xQueueGenericCreate+0x92>
        __asm volatile
 80006da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006de:	f383 8811 	msr	BASEPRI, r3
 80006e2:	f3bf 8f6f 	isb	sy
 80006e6:	f3bf 8f4f 	dsb	sy
 80006ea:	613b      	str	r3, [r7, #16]
    }
 80006ec:	bf00      	nop
 80006ee:	e7fe      	b.n	80006ee <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80006f0:	69fb      	ldr	r3, [r7, #28]
    }
 80006f2:	4618      	mov	r0, r3
 80006f4:	3720      	adds	r7, #32
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b084      	sub	sp, #16
 80006fe:	af00      	add	r7, sp, #0
 8000700:	60f8      	str	r0, [r7, #12]
 8000702:	60b9      	str	r1, [r7, #8]
 8000704:	607a      	str	r2, [r7, #4]
 8000706:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d103      	bne.n	8000716 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800070e:	69bb      	ldr	r3, [r7, #24]
 8000710:	69ba      	ldr	r2, [r7, #24]
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	e002      	b.n	800071c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000722:	69bb      	ldr	r3, [r7, #24]
 8000724:	68ba      	ldr	r2, [r7, #8]
 8000726:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000728:	2101      	movs	r1, #1
 800072a:	69b8      	ldr	r0, [r7, #24]
 800072c:	f7ff ff15 	bl	800055a <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	78fa      	ldrb	r2, [r7, #3]
 8000734:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000738:	bf00      	nop
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08c      	sub	sp, #48	; 0x30
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800074c:	2300      	movs	r3, #0
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000756:	2b00      	cmp	r3, #0
 8000758:	d10a      	bne.n	8000770 <xQueueReceive+0x30>
        __asm volatile
 800075a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800075e:	f383 8811 	msr	BASEPRI, r3
 8000762:	f3bf 8f6f 	isb	sy
 8000766:	f3bf 8f4f 	dsb	sy
 800076a:	623b      	str	r3, [r7, #32]
    }
 800076c:	bf00      	nop
 800076e:	e7fe      	b.n	800076e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d103      	bne.n	800077e <xQueueReceive+0x3e>
 8000776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	2b00      	cmp	r3, #0
 800077c:	d101      	bne.n	8000782 <xQueueReceive+0x42>
 800077e:	2301      	movs	r3, #1
 8000780:	e000      	b.n	8000784 <xQueueReceive+0x44>
 8000782:	2300      	movs	r3, #0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d10a      	bne.n	800079e <xQueueReceive+0x5e>
        __asm volatile
 8000788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800078c:	f383 8811 	msr	BASEPRI, r3
 8000790:	f3bf 8f6f 	isb	sy
 8000794:	f3bf 8f4f 	dsb	sy
 8000798:	61fb      	str	r3, [r7, #28]
    }
 800079a:	bf00      	nop
 800079c:	e7fe      	b.n	800079c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800079e:	f001 f831 	bl	8001804 <xTaskGetSchedulerState>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d102      	bne.n	80007ae <xQueueReceive+0x6e>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d101      	bne.n	80007b2 <xQueueReceive+0x72>
 80007ae:	2301      	movs	r3, #1
 80007b0:	e000      	b.n	80007b4 <xQueueReceive+0x74>
 80007b2:	2300      	movs	r3, #0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d10a      	bne.n	80007ce <xQueueReceive+0x8e>
        __asm volatile
 80007b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007bc:	f383 8811 	msr	BASEPRI, r3
 80007c0:	f3bf 8f6f 	isb	sy
 80007c4:	f3bf 8f4f 	dsb	sy
 80007c8:	61bb      	str	r3, [r7, #24]
    }
 80007ca:	bf00      	nop
 80007cc:	e7fe      	b.n	80007cc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80007ce:	f001 fc6b 	bl	80020a8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80007d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80007d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d014      	beq.n	8000808 <xQueueReceive+0xc8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80007de:	68b9      	ldr	r1, [r7, #8]
 80007e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80007e2:	f000 f881 	bl	80008e8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80007e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e8:	1e5a      	subs	r2, r3, #1
 80007ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ec:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d004      	beq.n	8000800 <xQueueReceive+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80007f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007f8:	3310      	adds	r3, #16
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 fdf8 	bl	80013f0 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000800:	f001 fc82 	bl	8002108 <vPortExitCritical>
                return pdPASS;
 8000804:	2301      	movs	r3, #1
 8000806:	e069      	b.n	80008dc <xQueueReceive+0x19c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d103      	bne.n	8000816 <xQueueReceive+0xd6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800080e:	f001 fc7b 	bl	8002108 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000812:	2300      	movs	r3, #0
 8000814:	e062      	b.n	80008dc <xQueueReceive+0x19c>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000818:	2b00      	cmp	r3, #0
 800081a:	d106      	bne.n	800082a <xQueueReceive+0xea>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	4618      	mov	r0, r3
 8000822:	f000 febb 	bl	800159c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000826:	2301      	movs	r3, #1
 8000828:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800082a:	f001 fc6d 	bl	8002108 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800082e:	f000 fb19 	bl	8000e64 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000832:	f001 fc39 	bl	80020a8 <vPortEnterCritical>
 8000836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000838:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800083c:	b25b      	sxtb	r3, r3
 800083e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000842:	d103      	bne.n	800084c <xQueueReceive+0x10c>
 8000844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000846:	2200      	movs	r2, #0
 8000848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800084c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800084e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000852:	b25b      	sxtb	r3, r3
 8000854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000858:	d103      	bne.n	8000862 <xQueueReceive+0x122>
 800085a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800085c:	2200      	movs	r2, #0
 800085e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000862:	f001 fc51 	bl	8002108 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000866:	1d3a      	adds	r2, r7, #4
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	4611      	mov	r1, r2
 800086e:	4618      	mov	r0, r3
 8000870:	f000 feaa 	bl	80015c8 <xTaskCheckForTimeOut>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d123      	bne.n	80008c2 <xQueueReceive+0x182>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800087a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800087c:	f000 f8ac 	bl	80009d8 <prvIsQueueEmpty>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d017      	beq.n	80008b6 <xQueueReceive+0x176>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000888:	3324      	adds	r3, #36	; 0x24
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	4611      	mov	r1, r2
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fd44 	bl	800131c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000896:	f000 f84d 	bl	8000934 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800089a:	f000 faf1 	bl	8000e80 <xTaskResumeAll>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d194      	bne.n	80007ce <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <xQueueReceive+0x1a4>)
 80008a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	f3bf 8f4f 	dsb	sy
 80008b0:	f3bf 8f6f 	isb	sy
 80008b4:	e78b      	b.n	80007ce <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80008b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80008b8:	f000 f83c 	bl	8000934 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80008bc:	f000 fae0 	bl	8000e80 <xTaskResumeAll>
 80008c0:	e785      	b.n	80007ce <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80008c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80008c4:	f000 f836 	bl	8000934 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80008c8:	f000 fada 	bl	8000e80 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80008cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80008ce:	f000 f883 	bl	80009d8 <prvIsQueueEmpty>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	f43f af7a 	beq.w	80007ce <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80008da:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3730      	adds	r7, #48	; 0x30
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	e000ed04 	.word	0xe000ed04

080008e8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d018      	beq.n	800092c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	68da      	ldr	r2, [r3, #12]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	441a      	add	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	68da      	ldr	r2, [r3, #12]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	429a      	cmp	r2, r3
 8000912:	d303      	bcc.n	800091c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	68d9      	ldr	r1, [r3, #12]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	461a      	mov	r2, r3
 8000926:	6838      	ldr	r0, [r7, #0]
 8000928:	f001 fe90 	bl	800264c <memcpy>
    }
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800093c:	f001 fbb4 	bl	80020a8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000946:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000948:	e011      	b.n	800096e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094e:	2b00      	cmp	r3, #0
 8000950:	d012      	beq.n	8000978 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3324      	adds	r3, #36	; 0x24
 8000956:	4618      	mov	r0, r3
 8000958:	f000 fd4a 	bl	80013f0 <xTaskRemoveFromEventList>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000962:	f000 fe97 	bl	8001694 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	3b01      	subs	r3, #1
 800096a:	b2db      	uxtb	r3, r3
 800096c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800096e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000972:	2b00      	cmp	r3, #0
 8000974:	dce9      	bgt.n	800094a <prvUnlockQueue+0x16>
 8000976:	e000      	b.n	800097a <prvUnlockQueue+0x46>
                    break;
 8000978:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	22ff      	movs	r2, #255	; 0xff
 800097e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000982:	f001 fbc1 	bl	8002108 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000986:	f001 fb8f 	bl	80020a8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000990:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000992:	e011      	b.n	80009b8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	691b      	ldr	r3, [r3, #16]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d012      	beq.n	80009c2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3310      	adds	r3, #16
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 fd25 	bl	80013f0 <xTaskRemoveFromEventList>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80009ac:	f000 fe72 	bl	8001694 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80009b0:	7bbb      	ldrb	r3, [r7, #14]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80009b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	dce9      	bgt.n	8000994 <prvUnlockQueue+0x60>
 80009c0:	e000      	b.n	80009c4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80009c2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	22ff      	movs	r2, #255	; 0xff
 80009c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80009cc:	f001 fb9c 	bl	8002108 <vPortExitCritical>
}
 80009d0:	bf00      	nop
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80009e0:	f001 fb62 	bl	80020a8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d102      	bne.n	80009f2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80009ec:	2301      	movs	r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	e001      	b.n	80009f6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80009f6:	f001 fb87 	bl	8002108 <vPortExitCritical>

    return xReturn;
 80009fa:	68fb      	ldr	r3, [r7, #12]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000a04:	b480      	push	{r7}
 8000a06:	b087      	sub	sp, #28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d10a      	bne.n	8000a2e <vQueueAddToRegistry+0x2a>
        __asm volatile
 8000a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a1c:	f383 8811 	msr	BASEPRI, r3
 8000a20:	f3bf 8f6f 	isb	sy
 8000a24:	f3bf 8f4f 	dsb	sy
 8000a28:	60fb      	str	r3, [r7, #12]
    }
 8000a2a:	bf00      	nop
 8000a2c:	e7fe      	b.n	8000a2c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d024      	beq.n	8000a7e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	e01e      	b.n	8000a78 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000a3a:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <vQueueAddToRegistry+0x98>)
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	4413      	add	r3, r2
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d105      	bne.n	8000a56 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <vQueueAddToRegistry+0x98>)
 8000a50:	4413      	add	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
                    break;
 8000a54:	e013      	b.n	8000a7e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d10a      	bne.n	8000a72 <vQueueAddToRegistry+0x6e>
 8000a5c:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <vQueueAddToRegistry+0x98>)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d104      	bne.n	8000a72 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <vQueueAddToRegistry+0x98>)
 8000a6e:	4413      	add	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	3301      	adds	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	2b07      	cmp	r3, #7
 8000a7c:	d9dd      	bls.n	8000a3a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d005      	beq.n	8000a90 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	683a      	ldr	r2, [r7, #0]
 8000a88:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8000a90:	bf00      	nop
 8000a92:	371c      	adds	r7, #28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	2000008c 	.word	0x2000008c

08000aa0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000ab0:	f001 fafa 	bl	80020a8 <vPortEnterCritical>
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000aba:	b25b      	sxtb	r3, r3
 8000abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac0:	d103      	bne.n	8000aca <vQueueWaitForMessageRestricted+0x2a>
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ad0:	b25b      	sxtb	r3, r3
 8000ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad6:	d103      	bne.n	8000ae0 <vQueueWaitForMessageRestricted+0x40>
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	2200      	movs	r2, #0
 8000adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000ae0:	f001 fb12 	bl	8002108 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d106      	bne.n	8000afa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	3324      	adds	r3, #36	; 0x24
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	68b9      	ldr	r1, [r7, #8]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 fc35 	bl	8001364 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000afa:	6978      	ldr	r0, [r7, #20]
 8000afc:	f7ff ff1a 	bl	8000934 <prvUnlockQueue>
    }
 8000b00:	bf00      	nop
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	; 0x30
 8000b0c:	af04      	add	r7, sp, #16
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	4613      	mov	r3, r2
 8000b16:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000b18:	88fb      	ldrh	r3, [r7, #6]
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f001 fba5 	bl	800226c <pvPortMalloc>
 8000b22:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d013      	beq.n	8000b52 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000b2a:	2058      	movs	r0, #88	; 0x58
 8000b2c:	f001 fb9e 	bl	800226c <pvPortMalloc>
 8000b30:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d008      	beq.n	8000b4a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000b38:	2258      	movs	r2, #88	; 0x58
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	69f8      	ldr	r0, [r7, #28]
 8000b3e:	f001 fd93 	bl	8002668 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	631a      	str	r2, [r3, #48]	; 0x30
 8000b48:	e005      	b.n	8000b56 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000b4a:	6978      	ldr	r0, [r7, #20]
 8000b4c:	f001 fc48 	bl	80023e0 <vPortFree>
 8000b50:	e001      	b.n	8000b56 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d013      	beq.n	8000b84 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000b5c:	88fa      	ldrh	r2, [r7, #6]
 8000b5e:	2300      	movs	r3, #0
 8000b60:	9303      	str	r3, [sp, #12]
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	9302      	str	r3, [sp, #8]
 8000b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b68:	9301      	str	r3, [sp, #4]
 8000b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	68f8      	ldr	r0, [r7, #12]
 8000b74:	f000 f80e 	bl	8000b94 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000b78:	69f8      	ldr	r0, [r7, #28]
 8000b7a:	f000 f899 	bl	8000cb0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	61bb      	str	r3, [r7, #24]
 8000b82:	e002      	b.n	8000b8a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000b84:	f04f 33ff 	mov.w	r3, #4294967295
 8000b88:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000b8a:	69bb      	ldr	r3, [r7, #24]
    }
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3720      	adds	r7, #32
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
 8000ba0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	461a      	mov	r2, r3
 8000bac:	21a5      	movs	r1, #165	; 0xa5
 8000bae:	f001 fd5b 	bl	8002668 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	4413      	add	r3, r2
 8000bc2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	f023 0307 	bic.w	r3, r3, #7
 8000bca:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00a      	beq.n	8000bec <prvInitialiseNewTask+0x58>
        __asm volatile
 8000bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bda:	f383 8811 	msr	BASEPRI, r3
 8000bde:	f3bf 8f6f 	isb	sy
 8000be2:	f3bf 8f4f 	dsb	sy
 8000be6:	617b      	str	r3, [r7, #20]
    }
 8000be8:	bf00      	nop
 8000bea:	e7fe      	b.n	8000bea <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d01e      	beq.n	8000c30 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
 8000bf6:	e012      	b.n	8000c1e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	7819      	ldrb	r1, [r3, #0]
 8000c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	4413      	add	r3, r2
 8000c06:	3334      	adds	r3, #52	; 0x34
 8000c08:	460a      	mov	r2, r1
 8000c0a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000c0c:	68ba      	ldr	r2, [r7, #8]
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	4413      	add	r3, r2
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d006      	beq.n	8000c26 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	61fb      	str	r3, [r7, #28]
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	2b09      	cmp	r3, #9
 8000c22:	d9e9      	bls.n	8000bf8 <prvInitialiseNewTask+0x64>
 8000c24:	e000      	b.n	8000c28 <prvInitialiseNewTask+0x94>
            {
                break;
 8000c26:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	d90a      	bls.n	8000c4c <prvInitialiseNewTask+0xb8>
        __asm volatile
 8000c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c3a:	f383 8811 	msr	BASEPRI, r3
 8000c3e:	f3bf 8f6f 	isb	sy
 8000c42:	f3bf 8f4f 	dsb	sy
 8000c46:	613b      	str	r3, [r7, #16]
    }
 8000c48:	bf00      	nop
 8000c4a:	e7fe      	b.n	8000c4a <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	d901      	bls.n	8000c56 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000c52:	2304      	movs	r3, #4
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c5a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c60:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c64:	3304      	adds	r3, #4
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fc07 	bl	800047a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c6e:	3318      	adds	r3, #24
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fc02 	bl	800047a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c7a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c7e:	f1c3 0205 	rsb	r2, r3, #5
 8000c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c84:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c8a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000c8c:	683a      	ldr	r2, [r7, #0]
 8000c8e:	68f9      	ldr	r1, [r7, #12]
 8000c90:	69b8      	ldr	r0, [r7, #24]
 8000c92:	f001 f8d9 	bl	8001e48 <pxPortInitialiseStack>
 8000c96:	4602      	mov	r2, r0
 8000c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c9a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d002      	beq.n	8000ca8 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ca6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ca8:	bf00      	nop
 8000caa:	3720      	adds	r7, #32
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000cb8:	f001 f9f6 	bl	80020a8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000cbc:	4b3a      	ldr	r3, [pc, #232]	; (8000da8 <prvAddNewTaskToReadyList+0xf8>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	4a39      	ldr	r2, [pc, #228]	; (8000da8 <prvAddNewTaskToReadyList+0xf8>)
 8000cc4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000cc6:	4b39      	ldr	r3, [pc, #228]	; (8000dac <prvAddNewTaskToReadyList+0xfc>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d109      	bne.n	8000ce2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000cce:	4a37      	ldr	r2, [pc, #220]	; (8000dac <prvAddNewTaskToReadyList+0xfc>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000cd4:	4b34      	ldr	r3, [pc, #208]	; (8000da8 <prvAddNewTaskToReadyList+0xf8>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d110      	bne.n	8000cfe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000cdc:	f000 fcf8 	bl	80016d0 <prvInitialiseTaskLists>
 8000ce0:	e00d      	b.n	8000cfe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000ce2:	4b33      	ldr	r3, [pc, #204]	; (8000db0 <prvAddNewTaskToReadyList+0x100>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d109      	bne.n	8000cfe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000cea:	4b30      	ldr	r3, [pc, #192]	; (8000dac <prvAddNewTaskToReadyList+0xfc>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d802      	bhi.n	8000cfe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000cf8:	4a2c      	ldr	r2, [pc, #176]	; (8000dac <prvAddNewTaskToReadyList+0xfc>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000cfe:	4b2d      	ldr	r3, [pc, #180]	; (8000db4 <prvAddNewTaskToReadyList+0x104>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	3301      	adds	r3, #1
 8000d04:	4a2b      	ldr	r2, [pc, #172]	; (8000db4 <prvAddNewTaskToReadyList+0x104>)
 8000d06:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000d08:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <prvAddNewTaskToReadyList+0x104>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d14:	2201      	movs	r2, #1
 8000d16:	409a      	lsls	r2, r3
 8000d18:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <prvAddNewTaskToReadyList+0x108>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	4a26      	ldr	r2, [pc, #152]	; (8000db8 <prvAddNewTaskToReadyList+0x108>)
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d26:	4925      	ldr	r1, [pc, #148]	; (8000dbc <prvAddNewTaskToReadyList+0x10c>)
 8000d28:	4613      	mov	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	440b      	add	r3, r1
 8000d32:	3304      	adds	r3, #4
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	689a      	ldr	r2, [r3, #8]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	3204      	adds	r2, #4
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	1d1a      	adds	r2, r3, #4
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4413      	add	r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	4a15      	ldr	r2, [pc, #84]	; (8000dbc <prvAddNewTaskToReadyList+0x10c>)
 8000d66:	441a      	add	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	615a      	str	r2, [r3, #20]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d70:	4912      	ldr	r1, [pc, #72]	; (8000dbc <prvAddNewTaskToReadyList+0x10c>)
 8000d72:	4613      	mov	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4413      	add	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	1c59      	adds	r1, r3, #1
 8000d80:	480e      	ldr	r0, [pc, #56]	; (8000dbc <prvAddNewTaskToReadyList+0x10c>)
 8000d82:	4613      	mov	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	4403      	add	r3, r0
 8000d8c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000d8e:	f001 f9bb 	bl	8002108 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <prvAddNewTaskToReadyList+0x100>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <prvAddNewTaskToReadyList+0xee>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <prvAddNewTaskToReadyList+0xfc>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200001a4 	.word	0x200001a4
 8000dac:	200000cc 	.word	0x200000cc
 8000db0:	200001b0 	.word	0x200001b0
 8000db4:	200001c0 	.word	0x200001c0
 8000db8:	200001ac 	.word	0x200001ac
 8000dbc:	200000d0 	.word	0x200000d0

08000dc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000dc6:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <vTaskStartScheduler+0x88>)
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	2300      	movs	r3, #0
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	2282      	movs	r2, #130	; 0x82
 8000dd2:	491e      	ldr	r1, [pc, #120]	; (8000e4c <vTaskStartScheduler+0x8c>)
 8000dd4:	481e      	ldr	r0, [pc, #120]	; (8000e50 <vTaskStartScheduler+0x90>)
 8000dd6:	f7ff fe97 	bl	8000b08 <xTaskCreate>
 8000dda:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d102      	bne.n	8000de8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8000de2:	f000 fdad 	bl	8001940 <xTimerCreateTimerTask>
 8000de6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d116      	bne.n	8000e1c <vTaskStartScheduler+0x5c>
        __asm volatile
 8000dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000df2:	f383 8811 	msr	BASEPRI, r3
 8000df6:	f3bf 8f6f 	isb	sy
 8000dfa:	f3bf 8f4f 	dsb	sy
 8000dfe:	60bb      	str	r3, [r7, #8]
    }
 8000e00:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <vTaskStartScheduler+0x94>)
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <vTaskStartScheduler+0x98>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <vTaskStartScheduler+0x9c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000e16:	f001 f8a5 	bl	8001f64 <xPortStartScheduler>
 8000e1a:	e00e      	b.n	8000e3a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e22:	d10a      	bne.n	8000e3a <vTaskStartScheduler+0x7a>
        __asm volatile
 8000e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e28:	f383 8811 	msr	BASEPRI, r3
 8000e2c:	f3bf 8f6f 	isb	sy
 8000e30:	f3bf 8f4f 	dsb	sy
 8000e34:	607b      	str	r3, [r7, #4]
    }
 8000e36:	bf00      	nop
 8000e38:	e7fe      	b.n	8000e38 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <vTaskStartScheduler+0xa0>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200001c8 	.word	0x200001c8
 8000e4c:	080030f0 	.word	0x080030f0
 8000e50:	080016ad 	.word	0x080016ad
 8000e54:	200001c4 	.word	0x200001c4
 8000e58:	200001b0 	.word	0x200001b0
 8000e5c:	200001a8 	.word	0x200001a8
 8000e60:	20000004 	.word	0x20000004

08000e64 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <vTaskSuspendAll+0x18>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	4a03      	ldr	r2, [pc, #12]	; (8000e7c <vTaskSuspendAll+0x18>)
 8000e70:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	200001cc 	.word	0x200001cc

08000e80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000e8e:	4b6b      	ldr	r3, [pc, #428]	; (800103c <xTaskResumeAll+0x1bc>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d10a      	bne.n	8000eac <xTaskResumeAll+0x2c>
        __asm volatile
 8000e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e9a:	f383 8811 	msr	BASEPRI, r3
 8000e9e:	f3bf 8f6f 	isb	sy
 8000ea2:	f3bf 8f4f 	dsb	sy
 8000ea6:	607b      	str	r3, [r7, #4]
    }
 8000ea8:	bf00      	nop
 8000eaa:	e7fe      	b.n	8000eaa <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000eac:	f001 f8fc 	bl	80020a8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000eb0:	4b62      	ldr	r3, [pc, #392]	; (800103c <xTaskResumeAll+0x1bc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	4a61      	ldr	r2, [pc, #388]	; (800103c <xTaskResumeAll+0x1bc>)
 8000eb8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000eba:	4b60      	ldr	r3, [pc, #384]	; (800103c <xTaskResumeAll+0x1bc>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f040 80b4 	bne.w	800102c <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000ec4:	4b5e      	ldr	r3, [pc, #376]	; (8001040 <xTaskResumeAll+0x1c0>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 80af 	beq.w	800102c <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000ece:	e08a      	b.n	8000fe6 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ed0:	4b5c      	ldr	r3, [pc, #368]	; (8001044 <xTaskResumeAll+0x1c4>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	69fa      	ldr	r2, [r7, #28]
 8000ee4:	6a12      	ldr	r2, [r2, #32]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	69fa      	ldr	r2, [r7, #28]
 8000eee:	69d2      	ldr	r2, [r2, #28]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3318      	adds	r3, #24
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d103      	bne.n	8000f06 <xTaskResumeAll+0x86>
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	6a1a      	ldr	r2, [r3, #32]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	1e5a      	subs	r2, r3, #1
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	69fa      	ldr	r2, [r7, #28]
 8000f22:	68d2      	ldr	r2, [r2, #12]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	69fa      	ldr	r2, [r7, #28]
 8000f2c:	6892      	ldr	r2, [r2, #8]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	685a      	ldr	r2, [r3, #4]
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	3304      	adds	r3, #4
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d103      	bne.n	8000f44 <xTaskResumeAll+0xc4>
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	1e5a      	subs	r2, r3, #1
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f58:	2201      	movs	r2, #1
 8000f5a:	409a      	lsls	r2, r3
 8000f5c:	4b3a      	ldr	r3, [pc, #232]	; (8001048 <xTaskResumeAll+0x1c8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	4a39      	ldr	r2, [pc, #228]	; (8001048 <xTaskResumeAll+0x1c8>)
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f6a:	4938      	ldr	r1, [pc, #224]	; (800104c <xTaskResumeAll+0x1cc>)
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	4413      	add	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	440b      	add	r3, r1
 8000f76:	3304      	adds	r3, #4
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	3204      	adds	r2, #4
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	1d1a      	adds	r2, r3, #4
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4a28      	ldr	r2, [pc, #160]	; (800104c <xTaskResumeAll+0x1cc>)
 8000faa:	441a      	add	r2, r3
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	615a      	str	r2, [r3, #20]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb4:	4925      	ldr	r1, [pc, #148]	; (800104c <xTaskResumeAll+0x1cc>)
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	1c59      	adds	r1, r3, #1
 8000fc4:	4821      	ldr	r0, [pc, #132]	; (800104c <xTaskResumeAll+0x1cc>)
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4403      	add	r3, r0
 8000fd0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fd6:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <xTaskResumeAll+0x1d0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d302      	bcc.n	8000fe6 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <xTaskResumeAll+0x1d4>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <xTaskResumeAll+0x1c4>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f47f af70 	bne.w	8000ed0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000ff6:	f000 fbe9 	bl	80017cc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <xTaskResumeAll+0x1d8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d010      	beq.n	8001028 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001006:	f000 f839 	bl	800107c <xTaskIncrementTick>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d002      	beq.n	8001016 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <xTaskResumeAll+0x1d4>)
 8001012:	2201      	movs	r2, #1
 8001014:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	3b01      	subs	r3, #1
 800101a:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f1      	bne.n	8001006 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <xTaskResumeAll+0x1d8>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <xTaskResumeAll+0x1d4>)
 800102a:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800102c:	f001 f86c 	bl	8002108 <vPortExitCritical>

    return xAlreadyYielded;
 8001030:	697b      	ldr	r3, [r7, #20]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3720      	adds	r7, #32
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200001cc 	.word	0x200001cc
 8001040:	200001a4 	.word	0x200001a4
 8001044:	20000164 	.word	0x20000164
 8001048:	200001ac 	.word	0x200001ac
 800104c:	200000d0 	.word	0x200000d0
 8001050:	200000cc 	.word	0x200000cc
 8001054:	200001b8 	.word	0x200001b8
 8001058:	200001b4 	.word	0x200001b4

0800105c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <xTaskGetTickCount+0x1c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001068:	687b      	ldr	r3, [r7, #4]
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	200001a8 	.word	0x200001a8

0800107c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001086:	4b6e      	ldr	r3, [pc, #440]	; (8001240 <xTaskIncrementTick+0x1c4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	f040 80cd 	bne.w	800122a <xTaskIncrementTick+0x1ae>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001090:	4b6c      	ldr	r3, [pc, #432]	; (8001244 <xTaskIncrementTick+0x1c8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001098:	4a6a      	ldr	r2, [pc, #424]	; (8001244 <xTaskIncrementTick+0x1c8>)
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800109e:	6a3b      	ldr	r3, [r7, #32]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d120      	bne.n	80010e6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80010a4:	4b68      	ldr	r3, [pc, #416]	; (8001248 <xTaskIncrementTick+0x1cc>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00a      	beq.n	80010c4 <xTaskIncrementTick+0x48>
        __asm volatile
 80010ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010b2:	f383 8811 	msr	BASEPRI, r3
 80010b6:	f3bf 8f6f 	isb	sy
 80010ba:	f3bf 8f4f 	dsb	sy
 80010be:	607b      	str	r3, [r7, #4]
    }
 80010c0:	bf00      	nop
 80010c2:	e7fe      	b.n	80010c2 <xTaskIncrementTick+0x46>
 80010c4:	4b60      	ldr	r3, [pc, #384]	; (8001248 <xTaskIncrementTick+0x1cc>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	4b60      	ldr	r3, [pc, #384]	; (800124c <xTaskIncrementTick+0x1d0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a5e      	ldr	r2, [pc, #376]	; (8001248 <xTaskIncrementTick+0x1cc>)
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	4a5e      	ldr	r2, [pc, #376]	; (800124c <xTaskIncrementTick+0x1d0>)
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4b5d      	ldr	r3, [pc, #372]	; (8001250 <xTaskIncrementTick+0x1d4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	4a5c      	ldr	r2, [pc, #368]	; (8001250 <xTaskIncrementTick+0x1d4>)
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	f000 fb73 	bl	80017cc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80010e6:	4b5b      	ldr	r3, [pc, #364]	; (8001254 <xTaskIncrementTick+0x1d8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	6a3a      	ldr	r2, [r7, #32]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	f0c0 80a1 	bcc.w	8001234 <xTaskIncrementTick+0x1b8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80010f2:	4b55      	ldr	r3, [pc, #340]	; (8001248 <xTaskIncrementTick+0x1cc>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d104      	bne.n	8001106 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80010fc:	4b55      	ldr	r3, [pc, #340]	; (8001254 <xTaskIncrementTick+0x1d8>)
 80010fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001102:	601a      	str	r2, [r3, #0]
                    break;
 8001104:	e096      	b.n	8001234 <xTaskIncrementTick+0x1b8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001106:	4b50      	ldr	r3, [pc, #320]	; (8001248 <xTaskIncrementTick+0x1cc>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001116:	6a3a      	ldr	r2, [r7, #32]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	429a      	cmp	r2, r3
 800111c:	d203      	bcs.n	8001126 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800111e:	4a4d      	ldr	r2, [pc, #308]	; (8001254 <xTaskIncrementTick+0x1d8>)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001124:	e086      	b.n	8001234 <xTaskIncrementTick+0x1b8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	68d2      	ldr	r2, [r2, #12]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	6892      	ldr	r2, [r2, #8]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	3304      	adds	r3, #4
 8001148:	429a      	cmp	r2, r3
 800114a:	d103      	bne.n	8001154 <xTaskIncrementTick+0xd8>
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	68da      	ldr	r2, [r3, #12]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	1e5a      	subs	r2, r3, #1
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001168:	2b00      	cmp	r3, #0
 800116a:	d01e      	beq.n	80011aa <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	6a12      	ldr	r2, [r2, #32]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	69d2      	ldr	r2, [r2, #28]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	3318      	adds	r3, #24
 800118e:	429a      	cmp	r2, r3
 8001190:	d103      	bne.n	800119a <xTaskIncrementTick+0x11e>
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	6a1a      	ldr	r2, [r3, #32]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	2200      	movs	r2, #0
 800119e:	629a      	str	r2, [r3, #40]	; 0x28
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	1e5a      	subs	r2, r3, #1
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ae:	2201      	movs	r2, #1
 80011b0:	409a      	lsls	r2, r3
 80011b2:	4b29      	ldr	r3, [pc, #164]	; (8001258 <xTaskIncrementTick+0x1dc>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	4a27      	ldr	r2, [pc, #156]	; (8001258 <xTaskIncrementTick+0x1dc>)
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011c0:	4926      	ldr	r1, [pc, #152]	; (800125c <xTaskIncrementTick+0x1e0>)
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	440b      	add	r3, r1
 80011cc:	3304      	adds	r3, #4
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	3204      	adds	r2, #4
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	1d1a      	adds	r2, r3, #4
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4a17      	ldr	r2, [pc, #92]	; (800125c <xTaskIncrementTick+0x1e0>)
 8001200:	441a      	add	r2, r3
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	615a      	str	r2, [r3, #20]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800120a:	4914      	ldr	r1, [pc, #80]	; (800125c <xTaskIncrementTick+0x1e0>)
 800120c:	4613      	mov	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	1c59      	adds	r1, r3, #1
 800121a:	4810      	ldr	r0, [pc, #64]	; (800125c <xTaskIncrementTick+0x1e0>)
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4403      	add	r3, r0
 8001226:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001228:	e763      	b.n	80010f2 <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <xTaskIncrementTick+0x1e4>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	3301      	adds	r3, #1
 8001230:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <xTaskIncrementTick+0x1e4>)
 8001232:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001236:	4618      	mov	r0, r3
 8001238:	3728      	adds	r7, #40	; 0x28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200001cc 	.word	0x200001cc
 8001244:	200001a8 	.word	0x200001a8
 8001248:	2000015c 	.word	0x2000015c
 800124c:	20000160 	.word	0x20000160
 8001250:	200001bc 	.word	0x200001bc
 8001254:	200001c4 	.word	0x200001c4
 8001258:	200001ac 	.word	0x200001ac
 800125c:	200000d0 	.word	0x200000d0
 8001260:	200001b4 	.word	0x200001b4

08001264 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001264:	b480      	push	{r7}
 8001266:	b087      	sub	sp, #28
 8001268:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800126a:	4b27      	ldr	r3, [pc, #156]	; (8001308 <vTaskSwitchContext+0xa4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001272:	4b26      	ldr	r3, [pc, #152]	; (800130c <vTaskSwitchContext+0xa8>)
 8001274:	2201      	movs	r2, #1
 8001276:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001278:	e03f      	b.n	80012fa <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800127a:	4b24      	ldr	r3, [pc, #144]	; (800130c <vTaskSwitchContext+0xa8>)
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001280:	4b23      	ldr	r3, [pc, #140]	; (8001310 <vTaskSwitchContext+0xac>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	fab3 f383 	clz	r3, r3
 800128c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800128e:	7afb      	ldrb	r3, [r7, #11]
 8001290:	f1c3 031f 	rsb	r3, r3, #31
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	491f      	ldr	r1, [pc, #124]	; (8001314 <vTaskSwitchContext+0xb0>)
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	440b      	add	r3, r1
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10a      	bne.n	80012c0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80012aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ae:	f383 8811 	msr	BASEPRI, r3
 80012b2:	f3bf 8f6f 	isb	sy
 80012b6:	f3bf 8f4f 	dsb	sy
 80012ba:	607b      	str	r3, [r7, #4]
    }
 80012bc:	bf00      	nop
 80012be:	e7fe      	b.n	80012be <vTaskSwitchContext+0x5a>
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <vTaskSwitchContext+0xb0>)
 80012cc:	4413      	add	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	3308      	adds	r3, #8
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d104      	bne.n	80012f0 <vTaskSwitchContext+0x8c>
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	4a08      	ldr	r2, [pc, #32]	; (8001318 <vTaskSwitchContext+0xb4>)
 80012f8:	6013      	str	r3, [r2, #0]
}
 80012fa:	bf00      	nop
 80012fc:	371c      	adds	r7, #28
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	200001cc 	.word	0x200001cc
 800130c:	200001b8 	.word	0x200001b8
 8001310:	200001ac 	.word	0x200001ac
 8001314:	200000d0 	.word	0x200000d0
 8001318:	200000cc 	.word	0x200000cc

0800131c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10a      	bne.n	8001342 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800132c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001330:	f383 8811 	msr	BASEPRI, r3
 8001334:	f3bf 8f6f 	isb	sy
 8001338:	f3bf 8f4f 	dsb	sy
 800133c:	60fb      	str	r3, [r7, #12]
    }
 800133e:	bf00      	nop
 8001340:	e7fe      	b.n	8001340 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <vTaskPlaceOnEventList+0x44>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	3318      	adds	r3, #24
 8001348:	4619      	mov	r1, r3
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff f8a2 	bl	8000494 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001350:	2101      	movs	r1, #1
 8001352:	6838      	ldr	r0, [r7, #0]
 8001354:	f000 fa74 	bl	8001840 <prvAddCurrentTaskToDelayedList>
}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200000cc 	.word	0x200000cc

08001364 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10a      	bne.n	800138c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8001376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800137a:	f383 8811 	msr	BASEPRI, r3
 800137e:	f3bf 8f6f 	isb	sy
 8001382:	f3bf 8f4f 	dsb	sy
 8001386:	613b      	str	r3, [r7, #16]
    }
 8001388:	bf00      	nop
 800138a:	e7fe      	b.n	800138a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <vTaskPlaceOnEventListRestricted+0x88>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	61da      	str	r2, [r3, #28]
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <vTaskPlaceOnEventListRestricted+0x88>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	6892      	ldr	r2, [r2, #8]
 80013a2:	621a      	str	r2, [r3, #32]
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <vTaskPlaceOnEventListRestricted+0x88>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	3218      	adds	r2, #24
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <vTaskPlaceOnEventListRestricted+0x88>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f103 0218 	add.w	r2, r3, #24
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <vTaskPlaceOnEventListRestricted+0x88>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	629a      	str	r2, [r3, #40]	; 0x28
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	1c5a      	adds	r2, r3, #1
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d002      	beq.n	80013da <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
 80013d8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	68b8      	ldr	r0, [r7, #8]
 80013de:	f000 fa2f 	bl	8001840 <prvAddCurrentTaskToDelayedList>
    }
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200000cc 	.word	0x200000cc

080013f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80013f0:	b480      	push	{r7}
 80013f2:	b08b      	sub	sp, #44	; 0x2c
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10a      	bne.n	800141c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8001406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800140a:	f383 8811 	msr	BASEPRI, r3
 800140e:	f3bf 8f6f 	isb	sy
 8001412:	f3bf 8f4f 	dsb	sy
 8001416:	60fb      	str	r3, [r7, #12]
    }
 8001418:	bf00      	nop
 800141a:	e7fe      	b.n	800141a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800141c:	6a3b      	ldr	r3, [r7, #32]
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	6a3a      	ldr	r2, [r7, #32]
 8001428:	6a12      	ldr	r2, [r2, #32]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	6a3b      	ldr	r3, [r7, #32]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	6a3a      	ldr	r2, [r7, #32]
 8001432:	69d2      	ldr	r2, [r2, #28]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	3318      	adds	r3, #24
 800143e:	429a      	cmp	r2, r3
 8001440:	d103      	bne.n	800144a <xTaskRemoveFromEventList+0x5a>
 8001442:	6a3b      	ldr	r3, [r7, #32]
 8001444:	6a1a      	ldr	r2, [r3, #32]
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	6a3b      	ldr	r3, [r7, #32]
 800144c:	2200      	movs	r2, #0
 800144e:	629a      	str	r2, [r3, #40]	; 0x28
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	1e5a      	subs	r2, r3, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800145a:	4b4a      	ldr	r3, [pc, #296]	; (8001584 <xTaskRemoveFromEventList+0x194>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d15e      	bne.n	8001520 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001462:	6a3b      	ldr	r3, [r7, #32]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	6a3b      	ldr	r3, [r7, #32]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	6a3a      	ldr	r2, [r7, #32]
 800146e:	68d2      	ldr	r2, [r2, #12]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	6a3b      	ldr	r3, [r7, #32]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	6a3a      	ldr	r2, [r7, #32]
 8001478:	6892      	ldr	r2, [r2, #8]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	3304      	adds	r3, #4
 8001484:	429a      	cmp	r2, r3
 8001486:	d103      	bne.n	8001490 <xTaskRemoveFromEventList+0xa0>
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	68da      	ldr	r2, [r3, #12]
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	2200      	movs	r2, #0
 8001494:	615a      	str	r2, [r3, #20]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	1e5a      	subs	r2, r3, #1
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	2201      	movs	r2, #1
 80014a6:	409a      	lsls	r2, r3
 80014a8:	4b37      	ldr	r3, [pc, #220]	; (8001588 <xTaskRemoveFromEventList+0x198>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	4a36      	ldr	r2, [pc, #216]	; (8001588 <xTaskRemoveFromEventList+0x198>)
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b6:	4935      	ldr	r1, [pc, #212]	; (800158c <xTaskRemoveFromEventList+0x19c>)
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	3304      	adds	r3, #4
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	6a3b      	ldr	r3, [r7, #32]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	6a3a      	ldr	r2, [r7, #32]
 80014dc:	3204      	adds	r2, #4
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	1d1a      	adds	r2, r3, #4
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	6a3b      	ldr	r3, [r7, #32]
 80014ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4a25      	ldr	r2, [pc, #148]	; (800158c <xTaskRemoveFromEventList+0x19c>)
 80014f6:	441a      	add	r2, r3
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	615a      	str	r2, [r3, #20]
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001500:	4922      	ldr	r1, [pc, #136]	; (800158c <xTaskRemoveFromEventList+0x19c>)
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	440b      	add	r3, r1
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	1c59      	adds	r1, r3, #1
 8001510:	481e      	ldr	r0, [pc, #120]	; (800158c <xTaskRemoveFromEventList+0x19c>)
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4403      	add	r3, r0
 800151c:	6019      	str	r1, [r3, #0]
 800151e:	e01b      	b.n	8001558 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <xTaskRemoveFromEventList+0x1a0>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	61bb      	str	r3, [r7, #24]
 8001526:	6a3b      	ldr	r3, [r7, #32]
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	61da      	str	r2, [r3, #28]
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	621a      	str	r2, [r3, #32]
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	6a3a      	ldr	r2, [r7, #32]
 800153a:	3218      	adds	r2, #24
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	6a3b      	ldr	r3, [r7, #32]
 8001540:	f103 0218 	add.w	r2, r3, #24
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	4a11      	ldr	r2, [pc, #68]	; (8001590 <xTaskRemoveFromEventList+0x1a0>)
 800154c:	629a      	str	r2, [r3, #40]	; 0x28
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <xTaskRemoveFromEventList+0x1a0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	3301      	adds	r3, #1
 8001554:	4a0e      	ldr	r2, [pc, #56]	; (8001590 <xTaskRemoveFromEventList+0x1a0>)
 8001556:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001558:	6a3b      	ldr	r3, [r7, #32]
 800155a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800155c:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <xTaskRemoveFromEventList+0x1a4>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001562:	429a      	cmp	r2, r3
 8001564:	d905      	bls.n	8001572 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001566:	2301      	movs	r3, #1
 8001568:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <xTaskRemoveFromEventList+0x1a8>)
 800156c:	2201      	movs	r2, #1
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	e001      	b.n	8001576 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001578:	4618      	mov	r0, r3
 800157a:	372c      	adds	r7, #44	; 0x2c
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	200001cc 	.word	0x200001cc
 8001588:	200001ac 	.word	0x200001ac
 800158c:	200000d0 	.word	0x200000d0
 8001590:	20000164 	.word	0x20000164
 8001594:	200000cc 	.word	0x200000cc
 8001598:	200001b8 	.word	0x200001b8

0800159c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <vTaskInternalSetTimeOutState+0x24>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <vTaskInternalSetTimeOutState+0x28>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	605a      	str	r2, [r3, #4]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	200001bc 	.word	0x200001bc
 80015c4:	200001a8 	.word	0x200001a8

080015c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10a      	bne.n	80015ee <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80015d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015dc:	f383 8811 	msr	BASEPRI, r3
 80015e0:	f3bf 8f6f 	isb	sy
 80015e4:	f3bf 8f4f 	dsb	sy
 80015e8:	613b      	str	r3, [r7, #16]
    }
 80015ea:	bf00      	nop
 80015ec:	e7fe      	b.n	80015ec <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d10a      	bne.n	800160a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80015f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015f8:	f383 8811 	msr	BASEPRI, r3
 80015fc:	f3bf 8f6f 	isb	sy
 8001600:	f3bf 8f4f 	dsb	sy
 8001604:	60fb      	str	r3, [r7, #12]
    }
 8001606:	bf00      	nop
 8001608:	e7fe      	b.n	8001608 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800160a:	f000 fd4d 	bl	80020a8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800160e:	4b1f      	ldr	r3, [pc, #124]	; (800168c <xTaskCheckForTimeOut+0xc4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001626:	d102      	bne.n	800162e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
 800162c:	e026      	b.n	800167c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <xTaskCheckForTimeOut+0xc8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d00a      	beq.n	8001650 <xTaskCheckForTimeOut+0x88>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	429a      	cmp	r2, r3
 8001642:	d305      	bcc.n	8001650 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001644:	2301      	movs	r3, #1
 8001646:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	e015      	b.n	800167c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	429a      	cmp	r2, r3
 8001658:	d20b      	bcs.n	8001672 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	1ad2      	subs	r2, r2, r3
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ff98 	bl	800159c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	e004      	b.n	800167c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001678:	2301      	movs	r3, #1
 800167a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800167c:	f000 fd44 	bl	8002108 <vPortExitCritical>

    return xReturn;
 8001680:	69fb      	ldr	r3, [r7, #28]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3720      	adds	r7, #32
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200001a8 	.word	0x200001a8
 8001690:	200001bc 	.word	0x200001bc

08001694 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <vTaskMissedYield+0x14>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	200001b8 	.word	0x200001b8

080016ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80016b4:	f000 f84c 	bl	8001750 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <prvIdleTask+0x20>)
 80016ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	f3bf 8f4f 	dsb	sy
 80016c4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80016c8:	e7f4      	b.n	80016b4 <prvIdleTask+0x8>
 80016ca:	bf00      	nop
 80016cc:	e000ed04 	.word	0xe000ed04

080016d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	e00c      	b.n	80016f6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <prvInitialiseTaskLists+0x60>)
 80016e8:	4413      	add	r3, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe fea5 	bl	800043a <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3301      	adds	r3, #1
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d9ef      	bls.n	80016dc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80016fc:	480d      	ldr	r0, [pc, #52]	; (8001734 <prvInitialiseTaskLists+0x64>)
 80016fe:	f7fe fe9c 	bl	800043a <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001702:	480d      	ldr	r0, [pc, #52]	; (8001738 <prvInitialiseTaskLists+0x68>)
 8001704:	f7fe fe99 	bl	800043a <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <prvInitialiseTaskLists+0x6c>)
 800170a:	f7fe fe96 	bl	800043a <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800170e:	480c      	ldr	r0, [pc, #48]	; (8001740 <prvInitialiseTaskLists+0x70>)
 8001710:	f7fe fe93 	bl	800043a <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001714:	480b      	ldr	r0, [pc, #44]	; (8001744 <prvInitialiseTaskLists+0x74>)
 8001716:	f7fe fe90 	bl	800043a <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <prvInitialiseTaskLists+0x78>)
 800171c:	4a05      	ldr	r2, [pc, #20]	; (8001734 <prvInitialiseTaskLists+0x64>)
 800171e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001720:	4b0a      	ldr	r3, [pc, #40]	; (800174c <prvInitialiseTaskLists+0x7c>)
 8001722:	4a05      	ldr	r2, [pc, #20]	; (8001738 <prvInitialiseTaskLists+0x68>)
 8001724:	601a      	str	r2, [r3, #0]
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200000d0 	.word	0x200000d0
 8001734:	20000134 	.word	0x20000134
 8001738:	20000148 	.word	0x20000148
 800173c:	20000164 	.word	0x20000164
 8001740:	20000178 	.word	0x20000178
 8001744:	20000190 	.word	0x20000190
 8001748:	2000015c 	.word	0x2000015c
 800174c:	20000160 	.word	0x20000160

08001750 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001756:	e019      	b.n	800178c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8001758:	f000 fca6 	bl	80020a8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800175c:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <prvCheckTasksWaitingTermination+0x50>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3304      	adds	r3, #4
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe fecc 	bl	8000506 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <prvCheckTasksWaitingTermination+0x54>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	3b01      	subs	r3, #1
 8001774:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <prvCheckTasksWaitingTermination+0x54>)
 8001776:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <prvCheckTasksWaitingTermination+0x58>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3b01      	subs	r3, #1
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <prvCheckTasksWaitingTermination+0x58>)
 8001780:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001782:	f000 fcc1 	bl	8002108 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f810 	bl	80017ac <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <prvCheckTasksWaitingTermination+0x58>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1e1      	bne.n	8001758 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000178 	.word	0x20000178
 80017a4:	200001a4 	.word	0x200001a4
 80017a8:	2000018c 	.word	0x2000018c

080017ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 fe11 	bl	80023e0 <vPortFree>
            vPortFree( pxTCB );
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 fe0e 	bl	80023e0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017d0:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <prvResetNextTaskUnblockTime+0x30>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d104      	bne.n	80017e4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <prvResetNextTaskUnblockTime+0x34>)
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295
 80017e0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80017e2:	e005      	b.n	80017f0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <prvResetNextTaskUnblockTime+0x30>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a04      	ldr	r2, [pc, #16]	; (8001800 <prvResetNextTaskUnblockTime+0x34>)
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	2000015c 	.word	0x2000015c
 8001800:	200001c4 	.word	0x200001c4

08001804 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <xTaskGetSchedulerState+0x34>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d102      	bne.n	8001818 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001812:	2301      	movs	r3, #1
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	e008      	b.n	800182a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <xTaskGetSchedulerState+0x38>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001820:	2302      	movs	r3, #2
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	e001      	b.n	800182a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800182a:	687b      	ldr	r3, [r7, #4]
    }
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	200001b0 	.word	0x200001b0
 800183c:	200001cc 	.word	0x200001cc

08001840 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800184a:	4b36      	ldr	r3, [pc, #216]	; (8001924 <prvAddCurrentTaskToDelayedList+0xe4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001850:	4b35      	ldr	r3, [pc, #212]	; (8001928 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	3304      	adds	r3, #4
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe55 	bl	8000506 <uxListRemove>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10b      	bne.n	800187a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001862:	4b31      	ldr	r3, [pc, #196]	; (8001928 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	2201      	movs	r2, #1
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43da      	mvns	r2, r3
 8001870:	4b2e      	ldr	r3, [pc, #184]	; (800192c <prvAddCurrentTaskToDelayedList+0xec>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4013      	ands	r3, r2
 8001876:	4a2d      	ldr	r2, [pc, #180]	; (800192c <prvAddCurrentTaskToDelayedList+0xec>)
 8001878:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001880:	d124      	bne.n	80018cc <prvAddCurrentTaskToDelayedList+0x8c>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d021      	beq.n	80018cc <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001888:	4b29      	ldr	r3, [pc, #164]	; (8001930 <prvAddCurrentTaskToDelayedList+0xf0>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	4b26      	ldr	r3, [pc, #152]	; (8001928 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	4b24      	ldr	r3, [pc, #144]	; (8001928 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	6892      	ldr	r2, [r2, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	4b21      	ldr	r3, [pc, #132]	; (8001928 <prvAddCurrentTaskToDelayedList+0xe8>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	3204      	adds	r2, #4
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <prvAddCurrentTaskToDelayedList+0xe8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	1d1a      	adds	r2, r3, #4
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <prvAddCurrentTaskToDelayedList+0xe8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a1d      	ldr	r2, [pc, #116]	; (8001930 <prvAddCurrentTaskToDelayedList+0xf0>)
 80018bc:	615a      	str	r2, [r3, #20]
 80018be:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <prvAddCurrentTaskToDelayedList+0xf0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	3301      	adds	r3, #1
 80018c4:	4a1a      	ldr	r2, [pc, #104]	; (8001930 <prvAddCurrentTaskToDelayedList+0xf0>)
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80018ca:	e026      	b.n	800191a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <prvAddCurrentTaskToDelayedList+0xe8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d209      	bcs.n	80018f8 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <prvAddCurrentTaskToDelayedList+0xf4>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <prvAddCurrentTaskToDelayedList+0xe8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	3304      	adds	r3, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4610      	mov	r0, r2
 80018f2:	f7fe fdcf 	bl	8000494 <vListInsert>
}
 80018f6:	e010      	b.n	800191a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <prvAddCurrentTaskToDelayedList+0xf8>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <prvAddCurrentTaskToDelayedList+0xe8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	3304      	adds	r3, #4
 8001902:	4619      	mov	r1, r3
 8001904:	4610      	mov	r0, r2
 8001906:	f7fe fdc5 	bl	8000494 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <prvAddCurrentTaskToDelayedList+0xfc>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	429a      	cmp	r2, r3
 8001912:	d202      	bcs.n	800191a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001914:	4a09      	ldr	r2, [pc, #36]	; (800193c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6013      	str	r3, [r2, #0]
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200001a8 	.word	0x200001a8
 8001928:	200000cc 	.word	0x200000cc
 800192c:	200001ac 	.word	0x200001ac
 8001930:	20000190 	.word	0x20000190
 8001934:	20000160 	.word	0x20000160
 8001938:	2000015c 	.word	0x2000015c
 800193c:	200001c4 	.word	0x200001c4

08001940 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800194a:	f000 fa47 	bl	8001ddc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <xTimerCreateTimerTask+0x54>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00b      	beq.n	800196e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <xTimerCreateTimerTask+0x58>)
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	2302      	movs	r3, #2
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	2300      	movs	r3, #0
 8001960:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001964:	490d      	ldr	r1, [pc, #52]	; (800199c <xTimerCreateTimerTask+0x5c>)
 8001966:	480e      	ldr	r0, [pc, #56]	; (80019a0 <xTimerCreateTimerTask+0x60>)
 8001968:	f7ff f8ce 	bl	8000b08 <xTaskCreate>
 800196c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d10a      	bne.n	800198a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8001974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001978:	f383 8811 	msr	BASEPRI, r3
 800197c:	f3bf 8f6f 	isb	sy
 8001980:	f3bf 8f4f 	dsb	sy
 8001984:	603b      	str	r3, [r7, #0]
    }
 8001986:	bf00      	nop
 8001988:	e7fe      	b.n	8001988 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800198a:	687b      	ldr	r3, [r7, #4]
    }
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000200 	.word	0x20000200
 8001998:	20000204 	.word	0x20000204
 800199c:	080030f8 	.word	0x080030f8
 80019a0:	08001a49 	.word	0x08001a49

080019a4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80019b0:	e008      	b.n	80019c4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	4413      	add	r3, r2
 80019ba:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	699a      	ldr	r2, [r3, #24]
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	18d1      	adds	r1, r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f000 f8dd 	bl	8001b90 <prvInsertTimerInActiveList>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1ea      	bne.n	80019b2 <prvReloadTimer+0xe>
        }
    }
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019f2:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <prvProcessExpiredTimer+0x5c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3304      	adds	r3, #4
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fd80 	bl	8000506 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f7ff ffc3 	bl	80019a4 <prvReloadTimer>
 8001a1e:	e008      	b.n	8001a32 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a26:	f023 0301 	bic.w	r3, r3, #1
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	4798      	blx	r3
    }
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200001f8 	.word	0x200001f8

08001a48 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001a50:	f107 0308 	add.w	r3, r7, #8
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 f857 	bl	8001b08 <prvGetNextExpireTime>
 8001a5a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f000 f803 	bl	8001a6c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001a66:	f000 f8d5 	bl	8001c14 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001a6a:	e7f1      	b.n	8001a50 <prvTimerTask+0x8>

08001a6c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001a76:	f7ff f9f5 	bl	8000e64 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001a7a:	f107 0308 	add.w	r3, r7, #8
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 f866 	bl	8001b50 <prvSampleTimeNow>
 8001a84:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d130      	bne.n	8001aee <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10a      	bne.n	8001aa8 <prvProcessTimerOrBlockTask+0x3c>
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d806      	bhi.n	8001aa8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001a9a:	f7ff f9f1 	bl	8000e80 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001a9e:	68f9      	ldr	r1, [r7, #12]
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ffa1 	bl	80019e8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001aa6:	e024      	b.n	8001af2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d008      	beq.n	8001ac0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001aae:	4b13      	ldr	r3, [pc, #76]	; (8001afc <prvProcessTimerOrBlockTask+0x90>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <prvProcessTimerOrBlockTask+0x50>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <prvProcessTimerOrBlockTask+0x52>
 8001abc:	2300      	movs	r3, #0
 8001abe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <prvProcessTimerOrBlockTask+0x94>)
 8001ac2:	6818      	ldr	r0, [r3, #0]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7fe ffe7 	bl	8000aa0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001ad2:	f7ff f9d5 	bl	8000e80 <xTaskResumeAll>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10a      	bne.n	8001af2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <prvProcessTimerOrBlockTask+0x98>)
 8001ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	f3bf 8f4f 	dsb	sy
 8001ae8:	f3bf 8f6f 	isb	sy
    }
 8001aec:	e001      	b.n	8001af2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001aee:	f7ff f9c7 	bl	8000e80 <xTaskResumeAll>
    }
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200001fc 	.word	0x200001fc
 8001b00:	20000200 	.word	0x20000200
 8001b04:	e000ed04 	.word	0xe000ed04

08001b08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001b10:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <prvGetNextExpireTime+0x44>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <prvGetNextExpireTime+0x16>
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	e000      	b.n	8001b20 <prvGetNextExpireTime+0x18>
 8001b1e:	2200      	movs	r2, #0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d105      	bne.n	8001b38 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <prvGetNextExpireTime+0x44>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	e001      	b.n	8001b3c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    }
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	200001f8 	.word	0x200001f8

08001b50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8001b58:	f7ff fa80 	bl	800105c <xTaskGetTickCount>
 8001b5c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <prvSampleTimeNow+0x3c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d205      	bcs.n	8001b74 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001b68:	f000 f912 	bl	8001d90 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e002      	b.n	8001b7a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001b7a:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <prvSampleTimeNow+0x3c>)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001b80:	68fb      	ldr	r3, [r7, #12]
    }
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000208 	.word	0x20000208

08001b90 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d812      	bhi.n	8001bdc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	1ad2      	subs	r2, r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d302      	bcc.n	8001bca <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	e01b      	b.n	8001c02 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <prvInsertTimerInActiveList+0x7c>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	f7fe fc5d 	bl	8000494 <vListInsert>
 8001bda:	e012      	b.n	8001c02 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d206      	bcs.n	8001bf2 <prvInsertTimerInActiveList+0x62>
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d302      	bcc.n	8001bf2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001bec:	2301      	movs	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	e007      	b.n	8001c02 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001bf2:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <prvInsertTimerInActiveList+0x80>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	f7fe fc49 	bl	8000494 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001c02:	697b      	ldr	r3, [r7, #20]
    }
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	200001fc 	.word	0x200001fc
 8001c10:	200001f8 	.word	0x200001f8

08001c14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001c1a:	e0a6      	b.n	8001d6a <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f2c0 80a2 	blt.w	8001d68 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d004      	beq.n	8001c3a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	3304      	adds	r3, #4
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fc66 	bl	8000506 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff87 	bl	8001b50 <prvSampleTimeNow>
 8001c42:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	f200 808e 	bhi.w	8001d6a <prvProcessReceivedCommands+0x156>
 8001c4e:	a201      	add	r2, pc, #4	; (adr r2, 8001c54 <prvProcessReceivedCommands+0x40>)
 8001c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c54:	08001c79 	.word	0x08001c79
 8001c58:	08001c79 	.word	0x08001c79
 8001c5c:	08001ce1 	.word	0x08001ce1
 8001c60:	08001cf5 	.word	0x08001cf5
 8001c64:	08001d3f 	.word	0x08001d3f
 8001c68:	08001c79 	.word	0x08001c79
 8001c6c:	08001c79 	.word	0x08001c79
 8001c70:	08001ce1 	.word	0x08001ce1
 8001c74:	08001cf5 	.word	0x08001cf5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	18d1      	adds	r1, r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	69f8      	ldr	r0, [r7, #28]
 8001c98:	f7ff ff7a 	bl	8001b90 <prvInsertTimerInActiveList>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d063      	beq.n	8001d6a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d009      	beq.n	8001cc4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	69f8      	ldr	r0, [r7, #28]
 8001cbe:	f7ff fe71 	bl	80019a4 <prvReloadTimer>
 8001cc2:	e008      	b.n	8001cd6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cca:	f023 0301 	bic.w	r3, r3, #1
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	69f8      	ldr	r0, [r7, #28]
 8001cdc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8001cde:	e044      	b.n	8001d6a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ce6:	f023 0301 	bic.w	r3, r3, #1
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8001cf2:	e03a      	b.n	8001d6a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10a      	bne.n	8001d2a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8001d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d18:	f383 8811 	msr	BASEPRI, r3
 8001d1c:	f3bf 8f6f 	isb	sy
 8001d20:	f3bf 8f4f 	dsb	sy
 8001d24:	617b      	str	r3, [r7, #20]
    }
 8001d26:	bf00      	nop
 8001d28:	e7fe      	b.n	8001d28 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	699a      	ldr	r2, [r3, #24]
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	18d1      	adds	r1, r2, r3
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	69f8      	ldr	r0, [r7, #28]
 8001d38:	f7ff ff2a 	bl	8001b90 <prvInsertTimerInActiveList>
                        break;
 8001d3c:	e015      	b.n	8001d6a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d103      	bne.n	8001d54 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8001d4c:	69f8      	ldr	r0, [r7, #28]
 8001d4e:	f000 fb47 	bl	80023e0 <vPortFree>
 8001d52:	e00a      	b.n	8001d6a <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d5a:	f023 0301 	bic.w	r3, r3, #1
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8001d66:	e000      	b.n	8001d6a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8001d68:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <prvProcessReceivedCommands+0x178>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f107 0108 	add.w	r1, r7, #8
 8001d72:	2200      	movs	r2, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fce3 	bl	8000740 <xQueueReceive>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f47f af4d 	bne.w	8001c1c <prvProcessReceivedCommands+0x8>
        }
    }
 8001d82:	bf00      	nop
 8001d84:	bf00      	nop
 8001d86:	3720      	adds	r7, #32
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000200 	.word	0x20000200

08001d90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001d96:	e009      	b.n	8001dac <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001d98:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <prvSwitchTimerLists+0x44>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8001da2:	f04f 31ff 	mov.w	r1, #4294967295
 8001da6:	6838      	ldr	r0, [r7, #0]
 8001da8:	f7ff fe1e 	bl	80019e8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <prvSwitchTimerLists+0x44>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8001db6:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <prvSwitchTimerLists+0x44>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <prvSwitchTimerLists+0x48>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <prvSwitchTimerLists+0x44>)
 8001dc2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8001dc4:	4a04      	ldr	r2, [pc, #16]	; (8001dd8 <prvSwitchTimerLists+0x48>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6013      	str	r3, [r2, #0]
    }
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200001f8 	.word	0x200001f8
 8001dd8:	200001fc 	.word	0x200001fc

08001ddc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001de0:	f000 f962 	bl	80020a8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <prvCheckForValidListAndQueue+0x54>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d11d      	bne.n	8001e28 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8001dec:	4811      	ldr	r0, [pc, #68]	; (8001e34 <prvCheckForValidListAndQueue+0x58>)
 8001dee:	f7fe fb24 	bl	800043a <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8001df2:	4811      	ldr	r0, [pc, #68]	; (8001e38 <prvCheckForValidListAndQueue+0x5c>)
 8001df4:	f7fe fb21 	bl	800043a <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8001df8:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <prvCheckForValidListAndQueue+0x60>)
 8001dfa:	4a0e      	ldr	r2, [pc, #56]	; (8001e34 <prvCheckForValidListAndQueue+0x58>)
 8001dfc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <prvCheckForValidListAndQueue+0x64>)
 8001e00:	4a0d      	ldr	r2, [pc, #52]	; (8001e38 <prvCheckForValidListAndQueue+0x5c>)
 8001e02:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8001e04:	2200      	movs	r2, #0
 8001e06:	210c      	movs	r1, #12
 8001e08:	200a      	movs	r0, #10
 8001e0a:	f7fe fc28 	bl	800065e <xQueueGenericCreate>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <prvCheckForValidListAndQueue+0x54>)
 8001e12:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <prvCheckForValidListAndQueue+0x54>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <prvCheckForValidListAndQueue+0x54>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4908      	ldr	r1, [pc, #32]	; (8001e44 <prvCheckForValidListAndQueue+0x68>)
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fdee 	bl	8000a04 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001e28:	f000 f96e 	bl	8002108 <vPortExitCritical>
    }
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000200 	.word	0x20000200
 8001e34:	200001d0 	.word	0x200001d0
 8001e38:	200001e4 	.word	0x200001e4
 8001e3c:	200001f8 	.word	0x200001f8
 8001e40:	200001fc 	.word	0x200001fc
 8001e44:	08003100 	.word	0x08003100

08001e48 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	3b04      	subs	r3, #4
 8001e58:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e60:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	3b04      	subs	r3, #4
 8001e66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f023 0201 	bic.w	r2, r3, #1
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	3b04      	subs	r3, #4
 8001e76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001e78:	4a0c      	ldr	r2, [pc, #48]	; (8001eac <pxPortInitialiseStack+0x64>)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3b14      	subs	r3, #20
 8001e82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	3b04      	subs	r3, #4
 8001e8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f06f 0202 	mvn.w	r2, #2
 8001e96:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	3b20      	subs	r3, #32
 8001e9c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	08001eb1 	.word	0x08001eb1

08001eb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <prvTaskExitError+0x54>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec2:	d00a      	beq.n	8001eda <prvTaskExitError+0x2a>
        __asm volatile
 8001ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec8:	f383 8811 	msr	BASEPRI, r3
 8001ecc:	f3bf 8f6f 	isb	sy
 8001ed0:	f3bf 8f4f 	dsb	sy
 8001ed4:	60fb      	str	r3, [r7, #12]
    }
 8001ed6:	bf00      	nop
 8001ed8:	e7fe      	b.n	8001ed8 <prvTaskExitError+0x28>
        __asm volatile
 8001eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ede:	f383 8811 	msr	BASEPRI, r3
 8001ee2:	f3bf 8f6f 	isb	sy
 8001ee6:	f3bf 8f4f 	dsb	sy
 8001eea:	60bb      	str	r3, [r7, #8]
    }
 8001eec:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001eee:	bf00      	nop
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0fc      	beq.n	8001ef0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001ef6:	bf00      	nop
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	20000008 	.word	0x20000008
	...

08001f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001f10:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <pxCurrentTCBConst2>)
 8001f12:	6819      	ldr	r1, [r3, #0]
 8001f14:	6808      	ldr	r0, [r1, #0]
 8001f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f1a:	f380 8809 	msr	PSP, r0
 8001f1e:	f3bf 8f6f 	isb	sy
 8001f22:	f04f 0000 	mov.w	r0, #0
 8001f26:	f380 8811 	msr	BASEPRI, r0
 8001f2a:	4770      	bx	lr
 8001f2c:	f3af 8000 	nop.w

08001f30 <pxCurrentTCBConst2>:
 8001f30:	200000cc 	.word	0x200000cc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop

08001f38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001f38:	4808      	ldr	r0, [pc, #32]	; (8001f5c <prvPortStartFirstTask+0x24>)
 8001f3a:	6800      	ldr	r0, [r0, #0]
 8001f3c:	6800      	ldr	r0, [r0, #0]
 8001f3e:	f380 8808 	msr	MSP, r0
 8001f42:	f04f 0000 	mov.w	r0, #0
 8001f46:	f380 8814 	msr	CONTROL, r0
 8001f4a:	b662      	cpsie	i
 8001f4c:	b661      	cpsie	f
 8001f4e:	f3bf 8f4f 	dsb	sy
 8001f52:	f3bf 8f6f 	isb	sy
 8001f56:	df00      	svc	0
 8001f58:	bf00      	nop
 8001f5a:	0000      	.short	0x0000
 8001f5c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop

08001f64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001f6a:	4b46      	ldr	r3, [pc, #280]	; (8002084 <xPortStartScheduler+0x120>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a46      	ldr	r2, [pc, #280]	; (8002088 <xPortStartScheduler+0x124>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d10a      	bne.n	8001f8a <xPortStartScheduler+0x26>
        __asm volatile
 8001f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f78:	f383 8811 	msr	BASEPRI, r3
 8001f7c:	f3bf 8f6f 	isb	sy
 8001f80:	f3bf 8f4f 	dsb	sy
 8001f84:	613b      	str	r3, [r7, #16]
    }
 8001f86:	bf00      	nop
 8001f88:	e7fe      	b.n	8001f88 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001f8a:	4b3e      	ldr	r3, [pc, #248]	; (8002084 <xPortStartScheduler+0x120>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a3f      	ldr	r2, [pc, #252]	; (800208c <xPortStartScheduler+0x128>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d10a      	bne.n	8001faa <xPortStartScheduler+0x46>
        __asm volatile
 8001f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f98:	f383 8811 	msr	BASEPRI, r3
 8001f9c:	f3bf 8f6f 	isb	sy
 8001fa0:	f3bf 8f4f 	dsb	sy
 8001fa4:	60fb      	str	r3, [r7, #12]
    }
 8001fa6:	bf00      	nop
 8001fa8:	e7fe      	b.n	8001fa8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001faa:	4b39      	ldr	r3, [pc, #228]	; (8002090 <xPortStartScheduler+0x12c>)
 8001fac:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	22ff      	movs	r2, #255	; 0xff
 8001fba:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4b31      	ldr	r3, [pc, #196]	; (8002094 <xPortStartScheduler+0x130>)
 8001fd0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001fd2:	4b31      	ldr	r3, [pc, #196]	; (8002098 <xPortStartScheduler+0x134>)
 8001fd4:	2207      	movs	r2, #7
 8001fd6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001fd8:	e009      	b.n	8001fee <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8001fda:	4b2f      	ldr	r3, [pc, #188]	; (8002098 <xPortStartScheduler+0x134>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	4a2d      	ldr	r2, [pc, #180]	; (8002098 <xPortStartScheduler+0x134>)
 8001fe2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff6:	2b80      	cmp	r3, #128	; 0x80
 8001ff8:	d0ef      	beq.n	8001fda <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001ffa:	4b27      	ldr	r3, [pc, #156]	; (8002098 <xPortStartScheduler+0x134>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f1c3 0307 	rsb	r3, r3, #7
 8002002:	2b04      	cmp	r3, #4
 8002004:	d00a      	beq.n	800201c <xPortStartScheduler+0xb8>
        __asm volatile
 8002006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200a:	f383 8811 	msr	BASEPRI, r3
 800200e:	f3bf 8f6f 	isb	sy
 8002012:	f3bf 8f4f 	dsb	sy
 8002016:	60bb      	str	r3, [r7, #8]
    }
 8002018:	bf00      	nop
 800201a:	e7fe      	b.n	800201a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800201c:	4b1e      	ldr	r3, [pc, #120]	; (8002098 <xPortStartScheduler+0x134>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	021b      	lsls	r3, r3, #8
 8002022:	4a1d      	ldr	r2, [pc, #116]	; (8002098 <xPortStartScheduler+0x134>)
 8002024:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002026:	4b1c      	ldr	r3, [pc, #112]	; (8002098 <xPortStartScheduler+0x134>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800202e:	4a1a      	ldr	r2, [pc, #104]	; (8002098 <xPortStartScheduler+0x134>)
 8002030:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	b2da      	uxtb	r2, r3
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800203a:	4b18      	ldr	r3, [pc, #96]	; (800209c <xPortStartScheduler+0x138>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a17      	ldr	r2, [pc, #92]	; (800209c <xPortStartScheduler+0x138>)
 8002040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002044:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <xPortStartScheduler+0x138>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a14      	ldr	r2, [pc, #80]	; (800209c <xPortStartScheduler+0x138>)
 800204c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002050:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002052:	f000 f8db 	bl	800220c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <xPortStartScheduler+0x13c>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800205c:	f000 f8fa 	bl	8002254 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002060:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <xPortStartScheduler+0x140>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0f      	ldr	r2, [pc, #60]	; (80020a4 <xPortStartScheduler+0x140>)
 8002066:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800206a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800206c:	f7ff ff64 	bl	8001f38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002070:	f7ff f8f8 	bl	8001264 <vTaskSwitchContext>
    prvTaskExitError();
 8002074:	f7ff ff1c 	bl	8001eb0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	e000ed00 	.word	0xe000ed00
 8002088:	410fc271 	.word	0x410fc271
 800208c:	410fc270 	.word	0x410fc270
 8002090:	e000e400 	.word	0xe000e400
 8002094:	2000020c 	.word	0x2000020c
 8002098:	20000210 	.word	0x20000210
 800209c:	e000ed20 	.word	0xe000ed20
 80020a0:	20000008 	.word	0x20000008
 80020a4:	e000ef34 	.word	0xe000ef34

080020a8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
        __asm volatile
 80020ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b2:	f383 8811 	msr	BASEPRI, r3
 80020b6:	f3bf 8f6f 	isb	sy
 80020ba:	f3bf 8f4f 	dsb	sy
 80020be:	607b      	str	r3, [r7, #4]
    }
 80020c0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <vPortEnterCritical+0x58>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3301      	adds	r3, #1
 80020c8:	4a0d      	ldr	r2, [pc, #52]	; (8002100 <vPortEnterCritical+0x58>)
 80020ca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <vPortEnterCritical+0x58>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d10f      	bne.n	80020f4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <vPortEnterCritical+0x5c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00a      	beq.n	80020f4 <vPortEnterCritical+0x4c>
        __asm volatile
 80020de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e2:	f383 8811 	msr	BASEPRI, r3
 80020e6:	f3bf 8f6f 	isb	sy
 80020ea:	f3bf 8f4f 	dsb	sy
 80020ee:	603b      	str	r3, [r7, #0]
    }
 80020f0:	bf00      	nop
 80020f2:	e7fe      	b.n	80020f2 <vPortEnterCritical+0x4a>
    }
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	20000008 	.word	0x20000008
 8002104:	e000ed04 	.word	0xe000ed04

08002108 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800210e:	4b12      	ldr	r3, [pc, #72]	; (8002158 <vPortExitCritical+0x50>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10a      	bne.n	800212c <vPortExitCritical+0x24>
        __asm volatile
 8002116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211a:	f383 8811 	msr	BASEPRI, r3
 800211e:	f3bf 8f6f 	isb	sy
 8002122:	f3bf 8f4f 	dsb	sy
 8002126:	607b      	str	r3, [r7, #4]
    }
 8002128:	bf00      	nop
 800212a:	e7fe      	b.n	800212a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800212c:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <vPortExitCritical+0x50>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	3b01      	subs	r3, #1
 8002132:	4a09      	ldr	r2, [pc, #36]	; (8002158 <vPortExitCritical+0x50>)
 8002134:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <vPortExitCritical+0x50>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d105      	bne.n	800214a <vPortExitCritical+0x42>
 800213e:	2300      	movs	r3, #0
 8002140:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002148:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20000008 	.word	0x20000008
 800215c:	00000000 	.word	0x00000000

08002160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002160:	f3ef 8009 	mrs	r0, PSP
 8002164:	f3bf 8f6f 	isb	sy
 8002168:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <pxCurrentTCBConst>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	f01e 0f10 	tst.w	lr, #16
 8002170:	bf08      	it	eq
 8002172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800217a:	6010      	str	r0, [r2, #0]
 800217c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002184:	f380 8811 	msr	BASEPRI, r0
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	f3bf 8f6f 	isb	sy
 8002190:	f7ff f868 	bl	8001264 <vTaskSwitchContext>
 8002194:	f04f 0000 	mov.w	r0, #0
 8002198:	f380 8811 	msr	BASEPRI, r0
 800219c:	bc09      	pop	{r0, r3}
 800219e:	6819      	ldr	r1, [r3, #0]
 80021a0:	6808      	ldr	r0, [r1, #0]
 80021a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021a6:	f01e 0f10 	tst.w	lr, #16
 80021aa:	bf08      	it	eq
 80021ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80021b0:	f380 8809 	msr	PSP, r0
 80021b4:	f3bf 8f6f 	isb	sy
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	f3af 8000 	nop.w

080021c0 <pxCurrentTCBConst>:
 80021c0:	200000cc 	.word	0x200000cc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop

080021c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
        __asm volatile
 80021ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d2:	f383 8811 	msr	BASEPRI, r3
 80021d6:	f3bf 8f6f 	isb	sy
 80021da:	f3bf 8f4f 	dsb	sy
 80021de:	607b      	str	r3, [r7, #4]
    }
 80021e0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80021e2:	f7fe ff4b 	bl	800107c <xTaskIncrementTick>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <SysTick_Handler+0x40>)
 80021ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	2300      	movs	r3, #0
 80021f6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	f383 8811 	msr	BASEPRI, r3
    }
 80021fe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	e000ed04 	.word	0xe000ed04

0800220c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <vPortSetupTimerInterrupt+0x34>)
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <vPortSetupTimerInterrupt+0x38>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800221c:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <vPortSetupTimerInterrupt+0x3c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0a      	ldr	r2, [pc, #40]	; (800224c <vPortSetupTimerInterrupt+0x40>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	099b      	lsrs	r3, r3, #6
 8002228:	4a09      	ldr	r2, [pc, #36]	; (8002250 <vPortSetupTimerInterrupt+0x44>)
 800222a:	3b01      	subs	r3, #1
 800222c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800222e:	4b04      	ldr	r3, [pc, #16]	; (8002240 <vPortSetupTimerInterrupt+0x34>)
 8002230:	2207      	movs	r2, #7
 8002232:	601a      	str	r2, [r3, #0]
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	e000e010 	.word	0xe000e010
 8002244:	e000e018 	.word	0xe000e018
 8002248:	20000000 	.word	0x20000000
 800224c:	10624dd3 	.word	0x10624dd3
 8002250:	e000e014 	.word	0xe000e014

08002254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002264 <vPortEnableVFP+0x10>
 8002258:	6801      	ldr	r1, [r0, #0]
 800225a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800225e:	6001      	str	r1, [r0, #0]
 8002260:	4770      	bx	lr
 8002262:	0000      	.short	0x0000
 8002264:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop

0800226c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002278:	f7fe fdf4 	bl	8000e64 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800227c:	4b53      	ldr	r3, [pc, #332]	; (80023cc <pvPortMalloc+0x160>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002284:	f000 f908 	bl	8002498 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d012      	beq.n	80022b4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800228e:	2208      	movs	r2, #8
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	3308      	adds	r3, #8
 800229a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	43db      	mvns	r3, r3
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d804      	bhi.n	80022b0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	4413      	add	r3, r2
 80022ac:	607b      	str	r3, [r7, #4]
 80022ae:	e001      	b.n	80022b4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	db70      	blt.n	800239c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d06d      	beq.n	800239c <pvPortMalloc+0x130>
 80022c0:	4b43      	ldr	r3, [pc, #268]	; (80023d0 <pvPortMalloc+0x164>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d868      	bhi.n	800239c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80022ca:	4b42      	ldr	r3, [pc, #264]	; (80023d4 <pvPortMalloc+0x168>)
 80022cc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80022ce:	4b41      	ldr	r3, [pc, #260]	; (80023d4 <pvPortMalloc+0x168>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80022d4:	e004      	b.n	80022e0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d903      	bls.n	80022f2 <pvPortMalloc+0x86>
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f1      	bne.n	80022d6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80022f2:	4b36      	ldr	r3, [pc, #216]	; (80023cc <pvPortMalloc+0x160>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d04f      	beq.n	800239c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2208      	movs	r2, #8
 8002302:	4413      	add	r3, r2
 8002304:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	1ad2      	subs	r2, r2, r3
 8002316:	2308      	movs	r3, #8
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	429a      	cmp	r2, r3
 800231c:	d91f      	bls.n	800235e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800231e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4413      	add	r3, r2
 8002324:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <pvPortMalloc+0xda>
        __asm volatile
 8002330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002334:	f383 8811 	msr	BASEPRI, r3
 8002338:	f3bf 8f6f 	isb	sy
 800233c:	f3bf 8f4f 	dsb	sy
 8002340:	613b      	str	r3, [r7, #16]
    }
 8002342:	bf00      	nop
 8002344:	e7fe      	b.n	8002344 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	1ad2      	subs	r2, r2, r3
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002358:	6978      	ldr	r0, [r7, #20]
 800235a:	f000 f8f9 	bl	8002550 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800235e:	4b1c      	ldr	r3, [pc, #112]	; (80023d0 <pvPortMalloc+0x164>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	4a19      	ldr	r2, [pc, #100]	; (80023d0 <pvPortMalloc+0x164>)
 800236a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800236c:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <pvPortMalloc+0x164>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <pvPortMalloc+0x16c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d203      	bcs.n	8002380 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002378:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <pvPortMalloc+0x164>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a16      	ldr	r2, [pc, #88]	; (80023d8 <pvPortMalloc+0x16c>)
 800237e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002392:	4b12      	ldr	r3, [pc, #72]	; (80023dc <pvPortMalloc+0x170>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	3301      	adds	r3, #1
 8002398:	4a10      	ldr	r2, [pc, #64]	; (80023dc <pvPortMalloc+0x170>)
 800239a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800239c:	f7fe fd70 	bl	8000e80 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <pvPortMalloc+0x154>
        __asm volatile
 80023aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ae:	f383 8811 	msr	BASEPRI, r3
 80023b2:	f3bf 8f6f 	isb	sy
 80023b6:	f3bf 8f4f 	dsb	sy
 80023ba:	60fb      	str	r3, [r7, #12]
    }
 80023bc:	bf00      	nop
 80023be:	e7fe      	b.n	80023be <pvPortMalloc+0x152>
    return pvReturn;
 80023c0:	69fb      	ldr	r3, [r7, #28]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3728      	adds	r7, #40	; 0x28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20012e1c 	.word	0x20012e1c
 80023d0:	20012e20 	.word	0x20012e20
 80023d4:	20012e14 	.word	0x20012e14
 80023d8:	20012e24 	.word	0x20012e24
 80023dc:	20012e28 	.word	0x20012e28

080023e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d049      	beq.n	8002486 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80023f2:	2308      	movs	r3, #8
 80023f4:	425b      	negs	r3, r3
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4413      	add	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	db0a      	blt.n	800241e <vPortFree+0x3e>
        __asm volatile
 8002408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800240c:	f383 8811 	msr	BASEPRI, r3
 8002410:	f3bf 8f6f 	isb	sy
 8002414:	f3bf 8f4f 	dsb	sy
 8002418:	60fb      	str	r3, [r7, #12]
    }
 800241a:	bf00      	nop
 800241c:	e7fe      	b.n	800241c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <vPortFree+0x5c>
        __asm volatile
 8002426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242a:	f383 8811 	msr	BASEPRI, r3
 800242e:	f3bf 8f6f 	isb	sy
 8002432:	f3bf 8f4f 	dsb	sy
 8002436:	60bb      	str	r3, [r7, #8]
    }
 8002438:	bf00      	nop
 800243a:	e7fe      	b.n	800243a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	0fdb      	lsrs	r3, r3, #31
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d01c      	beq.n	8002486 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d118      	bne.n	8002486 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002460:	f7fe fd00 	bl	8000e64 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	4b09      	ldr	r3, [pc, #36]	; (8002490 <vPortFree+0xb0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4413      	add	r3, r2
 800246e:	4a08      	ldr	r2, [pc, #32]	; (8002490 <vPortFree+0xb0>)
 8002470:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002472:	6938      	ldr	r0, [r7, #16]
 8002474:	f000 f86c 	bl	8002550 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <vPortFree+0xb4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3301      	adds	r3, #1
 800247e:	4a05      	ldr	r2, [pc, #20]	; (8002494 <vPortFree+0xb4>)
 8002480:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002482:	f7fe fcfd 	bl	8000e80 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002486:	bf00      	nop
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20012e20 	.word	0x20012e20
 8002494:	20012e2c 	.word	0x20012e2c

08002498 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800249e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80024a2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80024a4:	4b25      	ldr	r3, [pc, #148]	; (800253c <prvHeapInit+0xa4>)
 80024a6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00c      	beq.n	80024cc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	3307      	adds	r3, #7
 80024b6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f023 0307 	bic.w	r3, r3, #7
 80024be:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	4a1d      	ldr	r2, [pc, #116]	; (800253c <prvHeapInit+0xa4>)
 80024c8:	4413      	add	r3, r2
 80024ca:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80024d0:	4a1b      	ldr	r2, [pc, #108]	; (8002540 <prvHeapInit+0xa8>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80024d6:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <prvHeapInit+0xa8>)
 80024d8:	2200      	movs	r2, #0
 80024da:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	4413      	add	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80024e4:	2208      	movs	r2, #8
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f023 0307 	bic.w	r3, r3, #7
 80024f2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4a13      	ldr	r2, [pc, #76]	; (8002544 <prvHeapInit+0xac>)
 80024f8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <prvHeapInit+0xac>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2200      	movs	r2, #0
 8002500:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002502:	4b10      	ldr	r3, [pc, #64]	; (8002544 <prvHeapInit+0xac>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	1ad2      	subs	r2, r2, r3
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002518:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <prvHeapInit+0xac>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	4a08      	ldr	r2, [pc, #32]	; (8002548 <prvHeapInit+0xb0>)
 8002526:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4a07      	ldr	r2, [pc, #28]	; (800254c <prvHeapInit+0xb4>)
 800252e:	6013      	str	r3, [r2, #0]
}
 8002530:	bf00      	nop
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	20000214 	.word	0x20000214
 8002540:	20012e14 	.word	0x20012e14
 8002544:	20012e1c 	.word	0x20012e1c
 8002548:	20012e24 	.word	0x20012e24
 800254c:	20012e20 	.word	0x20012e20

08002550 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002558:	4b28      	ldr	r3, [pc, #160]	; (80025fc <prvInsertBlockIntoFreeList+0xac>)
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	e002      	b.n	8002564 <prvInsertBlockIntoFreeList+0x14>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	429a      	cmp	r2, r3
 800256c:	d8f7      	bhi.n	800255e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	4413      	add	r3, r2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	429a      	cmp	r2, r3
 800257e:	d108      	bne.n	8002592 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	441a      	add	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	441a      	add	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d118      	bne.n	80025d8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	4b15      	ldr	r3, [pc, #84]	; (8002600 <prvInsertBlockIntoFreeList+0xb0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d00d      	beq.n	80025ce <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	441a      	add	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	e008      	b.n	80025e0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80025ce:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <prvInsertBlockIntoFreeList+0xb0>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	e003      	b.n	80025e0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d002      	beq.n	80025ee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20012e14 	.word	0x20012e14
 8002600:	20012e1c 	.word	0x20012e1c

08002604 <__libc_init_array>:
 8002604:	b570      	push	{r4, r5, r6, lr}
 8002606:	4d0d      	ldr	r5, [pc, #52]	; (800263c <__libc_init_array+0x38>)
 8002608:	4c0d      	ldr	r4, [pc, #52]	; (8002640 <__libc_init_array+0x3c>)
 800260a:	1b64      	subs	r4, r4, r5
 800260c:	10a4      	asrs	r4, r4, #2
 800260e:	2600      	movs	r6, #0
 8002610:	42a6      	cmp	r6, r4
 8002612:	d109      	bne.n	8002628 <__libc_init_array+0x24>
 8002614:	4d0b      	ldr	r5, [pc, #44]	; (8002644 <__libc_init_array+0x40>)
 8002616:	4c0c      	ldr	r4, [pc, #48]	; (8002648 <__libc_init_array+0x44>)
 8002618:	f000 fd3a 	bl	8003090 <_init>
 800261c:	1b64      	subs	r4, r4, r5
 800261e:	10a4      	asrs	r4, r4, #2
 8002620:	2600      	movs	r6, #0
 8002622:	42a6      	cmp	r6, r4
 8002624:	d105      	bne.n	8002632 <__libc_init_array+0x2e>
 8002626:	bd70      	pop	{r4, r5, r6, pc}
 8002628:	f855 3b04 	ldr.w	r3, [r5], #4
 800262c:	4798      	blx	r3
 800262e:	3601      	adds	r6, #1
 8002630:	e7ee      	b.n	8002610 <__libc_init_array+0xc>
 8002632:	f855 3b04 	ldr.w	r3, [r5], #4
 8002636:	4798      	blx	r3
 8002638:	3601      	adds	r6, #1
 800263a:	e7f2      	b.n	8002622 <__libc_init_array+0x1e>
 800263c:	0800316c 	.word	0x0800316c
 8002640:	0800316c 	.word	0x0800316c
 8002644:	0800316c 	.word	0x0800316c
 8002648:	08003170 	.word	0x08003170

0800264c <memcpy>:
 800264c:	440a      	add	r2, r1
 800264e:	4291      	cmp	r1, r2
 8002650:	f100 33ff 	add.w	r3, r0, #4294967295
 8002654:	d100      	bne.n	8002658 <memcpy+0xc>
 8002656:	4770      	bx	lr
 8002658:	b510      	push	{r4, lr}
 800265a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800265e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002662:	4291      	cmp	r1, r2
 8002664:	d1f9      	bne.n	800265a <memcpy+0xe>
 8002666:	bd10      	pop	{r4, pc}

08002668 <memset>:
 8002668:	4402      	add	r2, r0
 800266a:	4603      	mov	r3, r0
 800266c:	4293      	cmp	r3, r2
 800266e:	d100      	bne.n	8002672 <memset+0xa>
 8002670:	4770      	bx	lr
 8002672:	f803 1b01 	strb.w	r1, [r3], #1
 8002676:	e7f9      	b.n	800266c <memset+0x4>

08002678 <_puts_r>:
 8002678:	b570      	push	{r4, r5, r6, lr}
 800267a:	460e      	mov	r6, r1
 800267c:	4605      	mov	r5, r0
 800267e:	b118      	cbz	r0, 8002688 <_puts_r+0x10>
 8002680:	6983      	ldr	r3, [r0, #24]
 8002682:	b90b      	cbnz	r3, 8002688 <_puts_r+0x10>
 8002684:	f000 fa48 	bl	8002b18 <__sinit>
 8002688:	69ab      	ldr	r3, [r5, #24]
 800268a:	68ac      	ldr	r4, [r5, #8]
 800268c:	b913      	cbnz	r3, 8002694 <_puts_r+0x1c>
 800268e:	4628      	mov	r0, r5
 8002690:	f000 fa42 	bl	8002b18 <__sinit>
 8002694:	4b2c      	ldr	r3, [pc, #176]	; (8002748 <_puts_r+0xd0>)
 8002696:	429c      	cmp	r4, r3
 8002698:	d120      	bne.n	80026dc <_puts_r+0x64>
 800269a:	686c      	ldr	r4, [r5, #4]
 800269c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800269e:	07db      	lsls	r3, r3, #31
 80026a0:	d405      	bmi.n	80026ae <_puts_r+0x36>
 80026a2:	89a3      	ldrh	r3, [r4, #12]
 80026a4:	0598      	lsls	r0, r3, #22
 80026a6:	d402      	bmi.n	80026ae <_puts_r+0x36>
 80026a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026aa:	f000 fad3 	bl	8002c54 <__retarget_lock_acquire_recursive>
 80026ae:	89a3      	ldrh	r3, [r4, #12]
 80026b0:	0719      	lsls	r1, r3, #28
 80026b2:	d51d      	bpl.n	80026f0 <_puts_r+0x78>
 80026b4:	6923      	ldr	r3, [r4, #16]
 80026b6:	b1db      	cbz	r3, 80026f0 <_puts_r+0x78>
 80026b8:	3e01      	subs	r6, #1
 80026ba:	68a3      	ldr	r3, [r4, #8]
 80026bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80026c0:	3b01      	subs	r3, #1
 80026c2:	60a3      	str	r3, [r4, #8]
 80026c4:	bb39      	cbnz	r1, 8002716 <_puts_r+0x9e>
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	da38      	bge.n	800273c <_puts_r+0xc4>
 80026ca:	4622      	mov	r2, r4
 80026cc:	210a      	movs	r1, #10
 80026ce:	4628      	mov	r0, r5
 80026d0:	f000 f848 	bl	8002764 <__swbuf_r>
 80026d4:	3001      	adds	r0, #1
 80026d6:	d011      	beq.n	80026fc <_puts_r+0x84>
 80026d8:	250a      	movs	r5, #10
 80026da:	e011      	b.n	8002700 <_puts_r+0x88>
 80026dc:	4b1b      	ldr	r3, [pc, #108]	; (800274c <_puts_r+0xd4>)
 80026de:	429c      	cmp	r4, r3
 80026e0:	d101      	bne.n	80026e6 <_puts_r+0x6e>
 80026e2:	68ac      	ldr	r4, [r5, #8]
 80026e4:	e7da      	b.n	800269c <_puts_r+0x24>
 80026e6:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <_puts_r+0xd8>)
 80026e8:	429c      	cmp	r4, r3
 80026ea:	bf08      	it	eq
 80026ec:	68ec      	ldreq	r4, [r5, #12]
 80026ee:	e7d5      	b.n	800269c <_puts_r+0x24>
 80026f0:	4621      	mov	r1, r4
 80026f2:	4628      	mov	r0, r5
 80026f4:	f000 f888 	bl	8002808 <__swsetup_r>
 80026f8:	2800      	cmp	r0, #0
 80026fa:	d0dd      	beq.n	80026b8 <_puts_r+0x40>
 80026fc:	f04f 35ff 	mov.w	r5, #4294967295
 8002700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002702:	07da      	lsls	r2, r3, #31
 8002704:	d405      	bmi.n	8002712 <_puts_r+0x9a>
 8002706:	89a3      	ldrh	r3, [r4, #12]
 8002708:	059b      	lsls	r3, r3, #22
 800270a:	d402      	bmi.n	8002712 <_puts_r+0x9a>
 800270c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800270e:	f000 faa2 	bl	8002c56 <__retarget_lock_release_recursive>
 8002712:	4628      	mov	r0, r5
 8002714:	bd70      	pop	{r4, r5, r6, pc}
 8002716:	2b00      	cmp	r3, #0
 8002718:	da04      	bge.n	8002724 <_puts_r+0xac>
 800271a:	69a2      	ldr	r2, [r4, #24]
 800271c:	429a      	cmp	r2, r3
 800271e:	dc06      	bgt.n	800272e <_puts_r+0xb6>
 8002720:	290a      	cmp	r1, #10
 8002722:	d004      	beq.n	800272e <_puts_r+0xb6>
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	6022      	str	r2, [r4, #0]
 800272a:	7019      	strb	r1, [r3, #0]
 800272c:	e7c5      	b.n	80026ba <_puts_r+0x42>
 800272e:	4622      	mov	r2, r4
 8002730:	4628      	mov	r0, r5
 8002732:	f000 f817 	bl	8002764 <__swbuf_r>
 8002736:	3001      	adds	r0, #1
 8002738:	d1bf      	bne.n	80026ba <_puts_r+0x42>
 800273a:	e7df      	b.n	80026fc <_puts_r+0x84>
 800273c:	6823      	ldr	r3, [r4, #0]
 800273e:	250a      	movs	r5, #10
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	6022      	str	r2, [r4, #0]
 8002744:	701d      	strb	r5, [r3, #0]
 8002746:	e7db      	b.n	8002700 <_puts_r+0x88>
 8002748:	0800312c 	.word	0x0800312c
 800274c:	0800314c 	.word	0x0800314c
 8002750:	0800310c 	.word	0x0800310c

08002754 <puts>:
 8002754:	4b02      	ldr	r3, [pc, #8]	; (8002760 <puts+0xc>)
 8002756:	4601      	mov	r1, r0
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	f7ff bf8d 	b.w	8002678 <_puts_r>
 800275e:	bf00      	nop
 8002760:	2000000c 	.word	0x2000000c

08002764 <__swbuf_r>:
 8002764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002766:	460e      	mov	r6, r1
 8002768:	4614      	mov	r4, r2
 800276a:	4605      	mov	r5, r0
 800276c:	b118      	cbz	r0, 8002776 <__swbuf_r+0x12>
 800276e:	6983      	ldr	r3, [r0, #24]
 8002770:	b90b      	cbnz	r3, 8002776 <__swbuf_r+0x12>
 8002772:	f000 f9d1 	bl	8002b18 <__sinit>
 8002776:	4b21      	ldr	r3, [pc, #132]	; (80027fc <__swbuf_r+0x98>)
 8002778:	429c      	cmp	r4, r3
 800277a:	d12b      	bne.n	80027d4 <__swbuf_r+0x70>
 800277c:	686c      	ldr	r4, [r5, #4]
 800277e:	69a3      	ldr	r3, [r4, #24]
 8002780:	60a3      	str	r3, [r4, #8]
 8002782:	89a3      	ldrh	r3, [r4, #12]
 8002784:	071a      	lsls	r2, r3, #28
 8002786:	d52f      	bpl.n	80027e8 <__swbuf_r+0x84>
 8002788:	6923      	ldr	r3, [r4, #16]
 800278a:	b36b      	cbz	r3, 80027e8 <__swbuf_r+0x84>
 800278c:	6923      	ldr	r3, [r4, #16]
 800278e:	6820      	ldr	r0, [r4, #0]
 8002790:	1ac0      	subs	r0, r0, r3
 8002792:	6963      	ldr	r3, [r4, #20]
 8002794:	b2f6      	uxtb	r6, r6
 8002796:	4283      	cmp	r3, r0
 8002798:	4637      	mov	r7, r6
 800279a:	dc04      	bgt.n	80027a6 <__swbuf_r+0x42>
 800279c:	4621      	mov	r1, r4
 800279e:	4628      	mov	r0, r5
 80027a0:	f000 f926 	bl	80029f0 <_fflush_r>
 80027a4:	bb30      	cbnz	r0, 80027f4 <__swbuf_r+0x90>
 80027a6:	68a3      	ldr	r3, [r4, #8]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	60a3      	str	r3, [r4, #8]
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	6022      	str	r2, [r4, #0]
 80027b2:	701e      	strb	r6, [r3, #0]
 80027b4:	6963      	ldr	r3, [r4, #20]
 80027b6:	3001      	adds	r0, #1
 80027b8:	4283      	cmp	r3, r0
 80027ba:	d004      	beq.n	80027c6 <__swbuf_r+0x62>
 80027bc:	89a3      	ldrh	r3, [r4, #12]
 80027be:	07db      	lsls	r3, r3, #31
 80027c0:	d506      	bpl.n	80027d0 <__swbuf_r+0x6c>
 80027c2:	2e0a      	cmp	r6, #10
 80027c4:	d104      	bne.n	80027d0 <__swbuf_r+0x6c>
 80027c6:	4621      	mov	r1, r4
 80027c8:	4628      	mov	r0, r5
 80027ca:	f000 f911 	bl	80029f0 <_fflush_r>
 80027ce:	b988      	cbnz	r0, 80027f4 <__swbuf_r+0x90>
 80027d0:	4638      	mov	r0, r7
 80027d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027d4:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <__swbuf_r+0x9c>)
 80027d6:	429c      	cmp	r4, r3
 80027d8:	d101      	bne.n	80027de <__swbuf_r+0x7a>
 80027da:	68ac      	ldr	r4, [r5, #8]
 80027dc:	e7cf      	b.n	800277e <__swbuf_r+0x1a>
 80027de:	4b09      	ldr	r3, [pc, #36]	; (8002804 <__swbuf_r+0xa0>)
 80027e0:	429c      	cmp	r4, r3
 80027e2:	bf08      	it	eq
 80027e4:	68ec      	ldreq	r4, [r5, #12]
 80027e6:	e7ca      	b.n	800277e <__swbuf_r+0x1a>
 80027e8:	4621      	mov	r1, r4
 80027ea:	4628      	mov	r0, r5
 80027ec:	f000 f80c 	bl	8002808 <__swsetup_r>
 80027f0:	2800      	cmp	r0, #0
 80027f2:	d0cb      	beq.n	800278c <__swbuf_r+0x28>
 80027f4:	f04f 37ff 	mov.w	r7, #4294967295
 80027f8:	e7ea      	b.n	80027d0 <__swbuf_r+0x6c>
 80027fa:	bf00      	nop
 80027fc:	0800312c 	.word	0x0800312c
 8002800:	0800314c 	.word	0x0800314c
 8002804:	0800310c 	.word	0x0800310c

08002808 <__swsetup_r>:
 8002808:	4b32      	ldr	r3, [pc, #200]	; (80028d4 <__swsetup_r+0xcc>)
 800280a:	b570      	push	{r4, r5, r6, lr}
 800280c:	681d      	ldr	r5, [r3, #0]
 800280e:	4606      	mov	r6, r0
 8002810:	460c      	mov	r4, r1
 8002812:	b125      	cbz	r5, 800281e <__swsetup_r+0x16>
 8002814:	69ab      	ldr	r3, [r5, #24]
 8002816:	b913      	cbnz	r3, 800281e <__swsetup_r+0x16>
 8002818:	4628      	mov	r0, r5
 800281a:	f000 f97d 	bl	8002b18 <__sinit>
 800281e:	4b2e      	ldr	r3, [pc, #184]	; (80028d8 <__swsetup_r+0xd0>)
 8002820:	429c      	cmp	r4, r3
 8002822:	d10f      	bne.n	8002844 <__swsetup_r+0x3c>
 8002824:	686c      	ldr	r4, [r5, #4]
 8002826:	89a3      	ldrh	r3, [r4, #12]
 8002828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800282c:	0719      	lsls	r1, r3, #28
 800282e:	d42c      	bmi.n	800288a <__swsetup_r+0x82>
 8002830:	06dd      	lsls	r5, r3, #27
 8002832:	d411      	bmi.n	8002858 <__swsetup_r+0x50>
 8002834:	2309      	movs	r3, #9
 8002836:	6033      	str	r3, [r6, #0]
 8002838:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800283c:	81a3      	strh	r3, [r4, #12]
 800283e:	f04f 30ff 	mov.w	r0, #4294967295
 8002842:	e03e      	b.n	80028c2 <__swsetup_r+0xba>
 8002844:	4b25      	ldr	r3, [pc, #148]	; (80028dc <__swsetup_r+0xd4>)
 8002846:	429c      	cmp	r4, r3
 8002848:	d101      	bne.n	800284e <__swsetup_r+0x46>
 800284a:	68ac      	ldr	r4, [r5, #8]
 800284c:	e7eb      	b.n	8002826 <__swsetup_r+0x1e>
 800284e:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <__swsetup_r+0xd8>)
 8002850:	429c      	cmp	r4, r3
 8002852:	bf08      	it	eq
 8002854:	68ec      	ldreq	r4, [r5, #12]
 8002856:	e7e6      	b.n	8002826 <__swsetup_r+0x1e>
 8002858:	0758      	lsls	r0, r3, #29
 800285a:	d512      	bpl.n	8002882 <__swsetup_r+0x7a>
 800285c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800285e:	b141      	cbz	r1, 8002872 <__swsetup_r+0x6a>
 8002860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002864:	4299      	cmp	r1, r3
 8002866:	d002      	beq.n	800286e <__swsetup_r+0x66>
 8002868:	4630      	mov	r0, r6
 800286a:	f000 fa5b 	bl	8002d24 <_free_r>
 800286e:	2300      	movs	r3, #0
 8002870:	6363      	str	r3, [r4, #52]	; 0x34
 8002872:	89a3      	ldrh	r3, [r4, #12]
 8002874:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002878:	81a3      	strh	r3, [r4, #12]
 800287a:	2300      	movs	r3, #0
 800287c:	6063      	str	r3, [r4, #4]
 800287e:	6923      	ldr	r3, [r4, #16]
 8002880:	6023      	str	r3, [r4, #0]
 8002882:	89a3      	ldrh	r3, [r4, #12]
 8002884:	f043 0308 	orr.w	r3, r3, #8
 8002888:	81a3      	strh	r3, [r4, #12]
 800288a:	6923      	ldr	r3, [r4, #16]
 800288c:	b94b      	cbnz	r3, 80028a2 <__swsetup_r+0x9a>
 800288e:	89a3      	ldrh	r3, [r4, #12]
 8002890:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002898:	d003      	beq.n	80028a2 <__swsetup_r+0x9a>
 800289a:	4621      	mov	r1, r4
 800289c:	4630      	mov	r0, r6
 800289e:	f000 fa01 	bl	8002ca4 <__smakebuf_r>
 80028a2:	89a0      	ldrh	r0, [r4, #12]
 80028a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80028a8:	f010 0301 	ands.w	r3, r0, #1
 80028ac:	d00a      	beq.n	80028c4 <__swsetup_r+0xbc>
 80028ae:	2300      	movs	r3, #0
 80028b0:	60a3      	str	r3, [r4, #8]
 80028b2:	6963      	ldr	r3, [r4, #20]
 80028b4:	425b      	negs	r3, r3
 80028b6:	61a3      	str	r3, [r4, #24]
 80028b8:	6923      	ldr	r3, [r4, #16]
 80028ba:	b943      	cbnz	r3, 80028ce <__swsetup_r+0xc6>
 80028bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80028c0:	d1ba      	bne.n	8002838 <__swsetup_r+0x30>
 80028c2:	bd70      	pop	{r4, r5, r6, pc}
 80028c4:	0781      	lsls	r1, r0, #30
 80028c6:	bf58      	it	pl
 80028c8:	6963      	ldrpl	r3, [r4, #20]
 80028ca:	60a3      	str	r3, [r4, #8]
 80028cc:	e7f4      	b.n	80028b8 <__swsetup_r+0xb0>
 80028ce:	2000      	movs	r0, #0
 80028d0:	e7f7      	b.n	80028c2 <__swsetup_r+0xba>
 80028d2:	bf00      	nop
 80028d4:	2000000c 	.word	0x2000000c
 80028d8:	0800312c 	.word	0x0800312c
 80028dc:	0800314c 	.word	0x0800314c
 80028e0:	0800310c 	.word	0x0800310c

080028e4 <__sflush_r>:
 80028e4:	898a      	ldrh	r2, [r1, #12]
 80028e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028ea:	4605      	mov	r5, r0
 80028ec:	0710      	lsls	r0, r2, #28
 80028ee:	460c      	mov	r4, r1
 80028f0:	d458      	bmi.n	80029a4 <__sflush_r+0xc0>
 80028f2:	684b      	ldr	r3, [r1, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	dc05      	bgt.n	8002904 <__sflush_r+0x20>
 80028f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	dc02      	bgt.n	8002904 <__sflush_r+0x20>
 80028fe:	2000      	movs	r0, #0
 8002900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002906:	2e00      	cmp	r6, #0
 8002908:	d0f9      	beq.n	80028fe <__sflush_r+0x1a>
 800290a:	2300      	movs	r3, #0
 800290c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002910:	682f      	ldr	r7, [r5, #0]
 8002912:	602b      	str	r3, [r5, #0]
 8002914:	d032      	beq.n	800297c <__sflush_r+0x98>
 8002916:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002918:	89a3      	ldrh	r3, [r4, #12]
 800291a:	075a      	lsls	r2, r3, #29
 800291c:	d505      	bpl.n	800292a <__sflush_r+0x46>
 800291e:	6863      	ldr	r3, [r4, #4]
 8002920:	1ac0      	subs	r0, r0, r3
 8002922:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002924:	b10b      	cbz	r3, 800292a <__sflush_r+0x46>
 8002926:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002928:	1ac0      	subs	r0, r0, r3
 800292a:	2300      	movs	r3, #0
 800292c:	4602      	mov	r2, r0
 800292e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002930:	6a21      	ldr	r1, [r4, #32]
 8002932:	4628      	mov	r0, r5
 8002934:	47b0      	blx	r6
 8002936:	1c43      	adds	r3, r0, #1
 8002938:	89a3      	ldrh	r3, [r4, #12]
 800293a:	d106      	bne.n	800294a <__sflush_r+0x66>
 800293c:	6829      	ldr	r1, [r5, #0]
 800293e:	291d      	cmp	r1, #29
 8002940:	d82c      	bhi.n	800299c <__sflush_r+0xb8>
 8002942:	4a2a      	ldr	r2, [pc, #168]	; (80029ec <__sflush_r+0x108>)
 8002944:	40ca      	lsrs	r2, r1
 8002946:	07d6      	lsls	r6, r2, #31
 8002948:	d528      	bpl.n	800299c <__sflush_r+0xb8>
 800294a:	2200      	movs	r2, #0
 800294c:	6062      	str	r2, [r4, #4]
 800294e:	04d9      	lsls	r1, r3, #19
 8002950:	6922      	ldr	r2, [r4, #16]
 8002952:	6022      	str	r2, [r4, #0]
 8002954:	d504      	bpl.n	8002960 <__sflush_r+0x7c>
 8002956:	1c42      	adds	r2, r0, #1
 8002958:	d101      	bne.n	800295e <__sflush_r+0x7a>
 800295a:	682b      	ldr	r3, [r5, #0]
 800295c:	b903      	cbnz	r3, 8002960 <__sflush_r+0x7c>
 800295e:	6560      	str	r0, [r4, #84]	; 0x54
 8002960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002962:	602f      	str	r7, [r5, #0]
 8002964:	2900      	cmp	r1, #0
 8002966:	d0ca      	beq.n	80028fe <__sflush_r+0x1a>
 8002968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800296c:	4299      	cmp	r1, r3
 800296e:	d002      	beq.n	8002976 <__sflush_r+0x92>
 8002970:	4628      	mov	r0, r5
 8002972:	f000 f9d7 	bl	8002d24 <_free_r>
 8002976:	2000      	movs	r0, #0
 8002978:	6360      	str	r0, [r4, #52]	; 0x34
 800297a:	e7c1      	b.n	8002900 <__sflush_r+0x1c>
 800297c:	6a21      	ldr	r1, [r4, #32]
 800297e:	2301      	movs	r3, #1
 8002980:	4628      	mov	r0, r5
 8002982:	47b0      	blx	r6
 8002984:	1c41      	adds	r1, r0, #1
 8002986:	d1c7      	bne.n	8002918 <__sflush_r+0x34>
 8002988:	682b      	ldr	r3, [r5, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0c4      	beq.n	8002918 <__sflush_r+0x34>
 800298e:	2b1d      	cmp	r3, #29
 8002990:	d001      	beq.n	8002996 <__sflush_r+0xb2>
 8002992:	2b16      	cmp	r3, #22
 8002994:	d101      	bne.n	800299a <__sflush_r+0xb6>
 8002996:	602f      	str	r7, [r5, #0]
 8002998:	e7b1      	b.n	80028fe <__sflush_r+0x1a>
 800299a:	89a3      	ldrh	r3, [r4, #12]
 800299c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029a0:	81a3      	strh	r3, [r4, #12]
 80029a2:	e7ad      	b.n	8002900 <__sflush_r+0x1c>
 80029a4:	690f      	ldr	r7, [r1, #16]
 80029a6:	2f00      	cmp	r7, #0
 80029a8:	d0a9      	beq.n	80028fe <__sflush_r+0x1a>
 80029aa:	0793      	lsls	r3, r2, #30
 80029ac:	680e      	ldr	r6, [r1, #0]
 80029ae:	bf08      	it	eq
 80029b0:	694b      	ldreq	r3, [r1, #20]
 80029b2:	600f      	str	r7, [r1, #0]
 80029b4:	bf18      	it	ne
 80029b6:	2300      	movne	r3, #0
 80029b8:	eba6 0807 	sub.w	r8, r6, r7
 80029bc:	608b      	str	r3, [r1, #8]
 80029be:	f1b8 0f00 	cmp.w	r8, #0
 80029c2:	dd9c      	ble.n	80028fe <__sflush_r+0x1a>
 80029c4:	6a21      	ldr	r1, [r4, #32]
 80029c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80029c8:	4643      	mov	r3, r8
 80029ca:	463a      	mov	r2, r7
 80029cc:	4628      	mov	r0, r5
 80029ce:	47b0      	blx	r6
 80029d0:	2800      	cmp	r0, #0
 80029d2:	dc06      	bgt.n	80029e2 <__sflush_r+0xfe>
 80029d4:	89a3      	ldrh	r3, [r4, #12]
 80029d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029da:	81a3      	strh	r3, [r4, #12]
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295
 80029e0:	e78e      	b.n	8002900 <__sflush_r+0x1c>
 80029e2:	4407      	add	r7, r0
 80029e4:	eba8 0800 	sub.w	r8, r8, r0
 80029e8:	e7e9      	b.n	80029be <__sflush_r+0xda>
 80029ea:	bf00      	nop
 80029ec:	20400001 	.word	0x20400001

080029f0 <_fflush_r>:
 80029f0:	b538      	push	{r3, r4, r5, lr}
 80029f2:	690b      	ldr	r3, [r1, #16]
 80029f4:	4605      	mov	r5, r0
 80029f6:	460c      	mov	r4, r1
 80029f8:	b913      	cbnz	r3, 8002a00 <_fflush_r+0x10>
 80029fa:	2500      	movs	r5, #0
 80029fc:	4628      	mov	r0, r5
 80029fe:	bd38      	pop	{r3, r4, r5, pc}
 8002a00:	b118      	cbz	r0, 8002a0a <_fflush_r+0x1a>
 8002a02:	6983      	ldr	r3, [r0, #24]
 8002a04:	b90b      	cbnz	r3, 8002a0a <_fflush_r+0x1a>
 8002a06:	f000 f887 	bl	8002b18 <__sinit>
 8002a0a:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <_fflush_r+0x6c>)
 8002a0c:	429c      	cmp	r4, r3
 8002a0e:	d11b      	bne.n	8002a48 <_fflush_r+0x58>
 8002a10:	686c      	ldr	r4, [r5, #4]
 8002a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0ef      	beq.n	80029fa <_fflush_r+0xa>
 8002a1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a1c:	07d0      	lsls	r0, r2, #31
 8002a1e:	d404      	bmi.n	8002a2a <_fflush_r+0x3a>
 8002a20:	0599      	lsls	r1, r3, #22
 8002a22:	d402      	bmi.n	8002a2a <_fflush_r+0x3a>
 8002a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a26:	f000 f915 	bl	8002c54 <__retarget_lock_acquire_recursive>
 8002a2a:	4628      	mov	r0, r5
 8002a2c:	4621      	mov	r1, r4
 8002a2e:	f7ff ff59 	bl	80028e4 <__sflush_r>
 8002a32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a34:	07da      	lsls	r2, r3, #31
 8002a36:	4605      	mov	r5, r0
 8002a38:	d4e0      	bmi.n	80029fc <_fflush_r+0xc>
 8002a3a:	89a3      	ldrh	r3, [r4, #12]
 8002a3c:	059b      	lsls	r3, r3, #22
 8002a3e:	d4dd      	bmi.n	80029fc <_fflush_r+0xc>
 8002a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a42:	f000 f908 	bl	8002c56 <__retarget_lock_release_recursive>
 8002a46:	e7d9      	b.n	80029fc <_fflush_r+0xc>
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <_fflush_r+0x70>)
 8002a4a:	429c      	cmp	r4, r3
 8002a4c:	d101      	bne.n	8002a52 <_fflush_r+0x62>
 8002a4e:	68ac      	ldr	r4, [r5, #8]
 8002a50:	e7df      	b.n	8002a12 <_fflush_r+0x22>
 8002a52:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <_fflush_r+0x74>)
 8002a54:	429c      	cmp	r4, r3
 8002a56:	bf08      	it	eq
 8002a58:	68ec      	ldreq	r4, [r5, #12]
 8002a5a:	e7da      	b.n	8002a12 <_fflush_r+0x22>
 8002a5c:	0800312c 	.word	0x0800312c
 8002a60:	0800314c 	.word	0x0800314c
 8002a64:	0800310c 	.word	0x0800310c

08002a68 <std>:
 8002a68:	2300      	movs	r3, #0
 8002a6a:	b510      	push	{r4, lr}
 8002a6c:	4604      	mov	r4, r0
 8002a6e:	e9c0 3300 	strd	r3, r3, [r0]
 8002a72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a76:	6083      	str	r3, [r0, #8]
 8002a78:	8181      	strh	r1, [r0, #12]
 8002a7a:	6643      	str	r3, [r0, #100]	; 0x64
 8002a7c:	81c2      	strh	r2, [r0, #14]
 8002a7e:	6183      	str	r3, [r0, #24]
 8002a80:	4619      	mov	r1, r3
 8002a82:	2208      	movs	r2, #8
 8002a84:	305c      	adds	r0, #92	; 0x5c
 8002a86:	f7ff fdef 	bl	8002668 <memset>
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <std+0x38>)
 8002a8c:	6263      	str	r3, [r4, #36]	; 0x24
 8002a8e:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <std+0x3c>)
 8002a90:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a92:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <std+0x40>)
 8002a94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a96:	4b05      	ldr	r3, [pc, #20]	; (8002aac <std+0x44>)
 8002a98:	6224      	str	r4, [r4, #32]
 8002a9a:	6323      	str	r3, [r4, #48]	; 0x30
 8002a9c:	bd10      	pop	{r4, pc}
 8002a9e:	bf00      	nop
 8002aa0:	08002f05 	.word	0x08002f05
 8002aa4:	08002f27 	.word	0x08002f27
 8002aa8:	08002f5f 	.word	0x08002f5f
 8002aac:	08002f83 	.word	0x08002f83

08002ab0 <_cleanup_r>:
 8002ab0:	4901      	ldr	r1, [pc, #4]	; (8002ab8 <_cleanup_r+0x8>)
 8002ab2:	f000 b8af 	b.w	8002c14 <_fwalk_reent>
 8002ab6:	bf00      	nop
 8002ab8:	080029f1 	.word	0x080029f1

08002abc <__sfmoreglue>:
 8002abc:	b570      	push	{r4, r5, r6, lr}
 8002abe:	2268      	movs	r2, #104	; 0x68
 8002ac0:	1e4d      	subs	r5, r1, #1
 8002ac2:	4355      	muls	r5, r2
 8002ac4:	460e      	mov	r6, r1
 8002ac6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002aca:	f000 f997 	bl	8002dfc <_malloc_r>
 8002ace:	4604      	mov	r4, r0
 8002ad0:	b140      	cbz	r0, 8002ae4 <__sfmoreglue+0x28>
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	e9c0 1600 	strd	r1, r6, [r0]
 8002ad8:	300c      	adds	r0, #12
 8002ada:	60a0      	str	r0, [r4, #8]
 8002adc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ae0:	f7ff fdc2 	bl	8002668 <memset>
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	bd70      	pop	{r4, r5, r6, pc}

08002ae8 <__sfp_lock_acquire>:
 8002ae8:	4801      	ldr	r0, [pc, #4]	; (8002af0 <__sfp_lock_acquire+0x8>)
 8002aea:	f000 b8b3 	b.w	8002c54 <__retarget_lock_acquire_recursive>
 8002aee:	bf00      	nop
 8002af0:	20012e31 	.word	0x20012e31

08002af4 <__sfp_lock_release>:
 8002af4:	4801      	ldr	r0, [pc, #4]	; (8002afc <__sfp_lock_release+0x8>)
 8002af6:	f000 b8ae 	b.w	8002c56 <__retarget_lock_release_recursive>
 8002afa:	bf00      	nop
 8002afc:	20012e31 	.word	0x20012e31

08002b00 <__sinit_lock_acquire>:
 8002b00:	4801      	ldr	r0, [pc, #4]	; (8002b08 <__sinit_lock_acquire+0x8>)
 8002b02:	f000 b8a7 	b.w	8002c54 <__retarget_lock_acquire_recursive>
 8002b06:	bf00      	nop
 8002b08:	20012e32 	.word	0x20012e32

08002b0c <__sinit_lock_release>:
 8002b0c:	4801      	ldr	r0, [pc, #4]	; (8002b14 <__sinit_lock_release+0x8>)
 8002b0e:	f000 b8a2 	b.w	8002c56 <__retarget_lock_release_recursive>
 8002b12:	bf00      	nop
 8002b14:	20012e32 	.word	0x20012e32

08002b18 <__sinit>:
 8002b18:	b510      	push	{r4, lr}
 8002b1a:	4604      	mov	r4, r0
 8002b1c:	f7ff fff0 	bl	8002b00 <__sinit_lock_acquire>
 8002b20:	69a3      	ldr	r3, [r4, #24]
 8002b22:	b11b      	cbz	r3, 8002b2c <__sinit+0x14>
 8002b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b28:	f7ff bff0 	b.w	8002b0c <__sinit_lock_release>
 8002b2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002b30:	6523      	str	r3, [r4, #80]	; 0x50
 8002b32:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <__sinit+0x68>)
 8002b34:	4a13      	ldr	r2, [pc, #76]	; (8002b84 <__sinit+0x6c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	62a2      	str	r2, [r4, #40]	; 0x28
 8002b3a:	42a3      	cmp	r3, r4
 8002b3c:	bf04      	itt	eq
 8002b3e:	2301      	moveq	r3, #1
 8002b40:	61a3      	streq	r3, [r4, #24]
 8002b42:	4620      	mov	r0, r4
 8002b44:	f000 f820 	bl	8002b88 <__sfp>
 8002b48:	6060      	str	r0, [r4, #4]
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	f000 f81c 	bl	8002b88 <__sfp>
 8002b50:	60a0      	str	r0, [r4, #8]
 8002b52:	4620      	mov	r0, r4
 8002b54:	f000 f818 	bl	8002b88 <__sfp>
 8002b58:	2200      	movs	r2, #0
 8002b5a:	60e0      	str	r0, [r4, #12]
 8002b5c:	2104      	movs	r1, #4
 8002b5e:	6860      	ldr	r0, [r4, #4]
 8002b60:	f7ff ff82 	bl	8002a68 <std>
 8002b64:	68a0      	ldr	r0, [r4, #8]
 8002b66:	2201      	movs	r2, #1
 8002b68:	2109      	movs	r1, #9
 8002b6a:	f7ff ff7d 	bl	8002a68 <std>
 8002b6e:	68e0      	ldr	r0, [r4, #12]
 8002b70:	2202      	movs	r2, #2
 8002b72:	2112      	movs	r1, #18
 8002b74:	f7ff ff78 	bl	8002a68 <std>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	61a3      	str	r3, [r4, #24]
 8002b7c:	e7d2      	b.n	8002b24 <__sinit+0xc>
 8002b7e:	bf00      	nop
 8002b80:	08003108 	.word	0x08003108
 8002b84:	08002ab1 	.word	0x08002ab1

08002b88 <__sfp>:
 8002b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8a:	4607      	mov	r7, r0
 8002b8c:	f7ff ffac 	bl	8002ae8 <__sfp_lock_acquire>
 8002b90:	4b1e      	ldr	r3, [pc, #120]	; (8002c0c <__sfp+0x84>)
 8002b92:	681e      	ldr	r6, [r3, #0]
 8002b94:	69b3      	ldr	r3, [r6, #24]
 8002b96:	b913      	cbnz	r3, 8002b9e <__sfp+0x16>
 8002b98:	4630      	mov	r0, r6
 8002b9a:	f7ff ffbd 	bl	8002b18 <__sinit>
 8002b9e:	3648      	adds	r6, #72	; 0x48
 8002ba0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	d503      	bpl.n	8002bb0 <__sfp+0x28>
 8002ba8:	6833      	ldr	r3, [r6, #0]
 8002baa:	b30b      	cbz	r3, 8002bf0 <__sfp+0x68>
 8002bac:	6836      	ldr	r6, [r6, #0]
 8002bae:	e7f7      	b.n	8002ba0 <__sfp+0x18>
 8002bb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002bb4:	b9d5      	cbnz	r5, 8002bec <__sfp+0x64>
 8002bb6:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <__sfp+0x88>)
 8002bb8:	60e3      	str	r3, [r4, #12]
 8002bba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002bbe:	6665      	str	r5, [r4, #100]	; 0x64
 8002bc0:	f000 f847 	bl	8002c52 <__retarget_lock_init_recursive>
 8002bc4:	f7ff ff96 	bl	8002af4 <__sfp_lock_release>
 8002bc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002bcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002bd0:	6025      	str	r5, [r4, #0]
 8002bd2:	61a5      	str	r5, [r4, #24]
 8002bd4:	2208      	movs	r2, #8
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002bdc:	f7ff fd44 	bl	8002668 <memset>
 8002be0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002be4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002be8:	4620      	mov	r0, r4
 8002bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bec:	3468      	adds	r4, #104	; 0x68
 8002bee:	e7d9      	b.n	8002ba4 <__sfp+0x1c>
 8002bf0:	2104      	movs	r1, #4
 8002bf2:	4638      	mov	r0, r7
 8002bf4:	f7ff ff62 	bl	8002abc <__sfmoreglue>
 8002bf8:	4604      	mov	r4, r0
 8002bfa:	6030      	str	r0, [r6, #0]
 8002bfc:	2800      	cmp	r0, #0
 8002bfe:	d1d5      	bne.n	8002bac <__sfp+0x24>
 8002c00:	f7ff ff78 	bl	8002af4 <__sfp_lock_release>
 8002c04:	230c      	movs	r3, #12
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	e7ee      	b.n	8002be8 <__sfp+0x60>
 8002c0a:	bf00      	nop
 8002c0c:	08003108 	.word	0x08003108
 8002c10:	ffff0001 	.word	0xffff0001

08002c14 <_fwalk_reent>:
 8002c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c18:	4606      	mov	r6, r0
 8002c1a:	4688      	mov	r8, r1
 8002c1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002c20:	2700      	movs	r7, #0
 8002c22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c26:	f1b9 0901 	subs.w	r9, r9, #1
 8002c2a:	d505      	bpl.n	8002c38 <_fwalk_reent+0x24>
 8002c2c:	6824      	ldr	r4, [r4, #0]
 8002c2e:	2c00      	cmp	r4, #0
 8002c30:	d1f7      	bne.n	8002c22 <_fwalk_reent+0xe>
 8002c32:	4638      	mov	r0, r7
 8002c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c38:	89ab      	ldrh	r3, [r5, #12]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d907      	bls.n	8002c4e <_fwalk_reent+0x3a>
 8002c3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c42:	3301      	adds	r3, #1
 8002c44:	d003      	beq.n	8002c4e <_fwalk_reent+0x3a>
 8002c46:	4629      	mov	r1, r5
 8002c48:	4630      	mov	r0, r6
 8002c4a:	47c0      	blx	r8
 8002c4c:	4307      	orrs	r7, r0
 8002c4e:	3568      	adds	r5, #104	; 0x68
 8002c50:	e7e9      	b.n	8002c26 <_fwalk_reent+0x12>

08002c52 <__retarget_lock_init_recursive>:
 8002c52:	4770      	bx	lr

08002c54 <__retarget_lock_acquire_recursive>:
 8002c54:	4770      	bx	lr

08002c56 <__retarget_lock_release_recursive>:
 8002c56:	4770      	bx	lr

08002c58 <__swhatbuf_r>:
 8002c58:	b570      	push	{r4, r5, r6, lr}
 8002c5a:	460e      	mov	r6, r1
 8002c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c60:	2900      	cmp	r1, #0
 8002c62:	b096      	sub	sp, #88	; 0x58
 8002c64:	4614      	mov	r4, r2
 8002c66:	461d      	mov	r5, r3
 8002c68:	da08      	bge.n	8002c7c <__swhatbuf_r+0x24>
 8002c6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	602a      	str	r2, [r5, #0]
 8002c72:	061a      	lsls	r2, r3, #24
 8002c74:	d410      	bmi.n	8002c98 <__swhatbuf_r+0x40>
 8002c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c7a:	e00e      	b.n	8002c9a <__swhatbuf_r+0x42>
 8002c7c:	466a      	mov	r2, sp
 8002c7e:	f000 f9a7 	bl	8002fd0 <_fstat_r>
 8002c82:	2800      	cmp	r0, #0
 8002c84:	dbf1      	blt.n	8002c6a <__swhatbuf_r+0x12>
 8002c86:	9a01      	ldr	r2, [sp, #4]
 8002c88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002c8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002c90:	425a      	negs	r2, r3
 8002c92:	415a      	adcs	r2, r3
 8002c94:	602a      	str	r2, [r5, #0]
 8002c96:	e7ee      	b.n	8002c76 <__swhatbuf_r+0x1e>
 8002c98:	2340      	movs	r3, #64	; 0x40
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	6023      	str	r3, [r4, #0]
 8002c9e:	b016      	add	sp, #88	; 0x58
 8002ca0:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ca4 <__smakebuf_r>:
 8002ca4:	898b      	ldrh	r3, [r1, #12]
 8002ca6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ca8:	079d      	lsls	r5, r3, #30
 8002caa:	4606      	mov	r6, r0
 8002cac:	460c      	mov	r4, r1
 8002cae:	d507      	bpl.n	8002cc0 <__smakebuf_r+0x1c>
 8002cb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002cb4:	6023      	str	r3, [r4, #0]
 8002cb6:	6123      	str	r3, [r4, #16]
 8002cb8:	2301      	movs	r3, #1
 8002cba:	6163      	str	r3, [r4, #20]
 8002cbc:	b002      	add	sp, #8
 8002cbe:	bd70      	pop	{r4, r5, r6, pc}
 8002cc0:	ab01      	add	r3, sp, #4
 8002cc2:	466a      	mov	r2, sp
 8002cc4:	f7ff ffc8 	bl	8002c58 <__swhatbuf_r>
 8002cc8:	9900      	ldr	r1, [sp, #0]
 8002cca:	4605      	mov	r5, r0
 8002ccc:	4630      	mov	r0, r6
 8002cce:	f000 f895 	bl	8002dfc <_malloc_r>
 8002cd2:	b948      	cbnz	r0, 8002ce8 <__smakebuf_r+0x44>
 8002cd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cd8:	059a      	lsls	r2, r3, #22
 8002cda:	d4ef      	bmi.n	8002cbc <__smakebuf_r+0x18>
 8002cdc:	f023 0303 	bic.w	r3, r3, #3
 8002ce0:	f043 0302 	orr.w	r3, r3, #2
 8002ce4:	81a3      	strh	r3, [r4, #12]
 8002ce6:	e7e3      	b.n	8002cb0 <__smakebuf_r+0xc>
 8002ce8:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <__smakebuf_r+0x7c>)
 8002cea:	62b3      	str	r3, [r6, #40]	; 0x28
 8002cec:	89a3      	ldrh	r3, [r4, #12]
 8002cee:	6020      	str	r0, [r4, #0]
 8002cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cf4:	81a3      	strh	r3, [r4, #12]
 8002cf6:	9b00      	ldr	r3, [sp, #0]
 8002cf8:	6163      	str	r3, [r4, #20]
 8002cfa:	9b01      	ldr	r3, [sp, #4]
 8002cfc:	6120      	str	r0, [r4, #16]
 8002cfe:	b15b      	cbz	r3, 8002d18 <__smakebuf_r+0x74>
 8002d00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d04:	4630      	mov	r0, r6
 8002d06:	f000 f975 	bl	8002ff4 <_isatty_r>
 8002d0a:	b128      	cbz	r0, 8002d18 <__smakebuf_r+0x74>
 8002d0c:	89a3      	ldrh	r3, [r4, #12]
 8002d0e:	f023 0303 	bic.w	r3, r3, #3
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	81a3      	strh	r3, [r4, #12]
 8002d18:	89a0      	ldrh	r0, [r4, #12]
 8002d1a:	4305      	orrs	r5, r0
 8002d1c:	81a5      	strh	r5, [r4, #12]
 8002d1e:	e7cd      	b.n	8002cbc <__smakebuf_r+0x18>
 8002d20:	08002ab1 	.word	0x08002ab1

08002d24 <_free_r>:
 8002d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d26:	2900      	cmp	r1, #0
 8002d28:	d044      	beq.n	8002db4 <_free_r+0x90>
 8002d2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d2e:	9001      	str	r0, [sp, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f1a1 0404 	sub.w	r4, r1, #4
 8002d36:	bfb8      	it	lt
 8002d38:	18e4      	addlt	r4, r4, r3
 8002d3a:	f000 f97d 	bl	8003038 <__malloc_lock>
 8002d3e:	4a1e      	ldr	r2, [pc, #120]	; (8002db8 <_free_r+0x94>)
 8002d40:	9801      	ldr	r0, [sp, #4]
 8002d42:	6813      	ldr	r3, [r2, #0]
 8002d44:	b933      	cbnz	r3, 8002d54 <_free_r+0x30>
 8002d46:	6063      	str	r3, [r4, #4]
 8002d48:	6014      	str	r4, [r2, #0]
 8002d4a:	b003      	add	sp, #12
 8002d4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d50:	f000 b978 	b.w	8003044 <__malloc_unlock>
 8002d54:	42a3      	cmp	r3, r4
 8002d56:	d908      	bls.n	8002d6a <_free_r+0x46>
 8002d58:	6825      	ldr	r5, [r4, #0]
 8002d5a:	1961      	adds	r1, r4, r5
 8002d5c:	428b      	cmp	r3, r1
 8002d5e:	bf01      	itttt	eq
 8002d60:	6819      	ldreq	r1, [r3, #0]
 8002d62:	685b      	ldreq	r3, [r3, #4]
 8002d64:	1949      	addeq	r1, r1, r5
 8002d66:	6021      	streq	r1, [r4, #0]
 8002d68:	e7ed      	b.n	8002d46 <_free_r+0x22>
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	b10b      	cbz	r3, 8002d74 <_free_r+0x50>
 8002d70:	42a3      	cmp	r3, r4
 8002d72:	d9fa      	bls.n	8002d6a <_free_r+0x46>
 8002d74:	6811      	ldr	r1, [r2, #0]
 8002d76:	1855      	adds	r5, r2, r1
 8002d78:	42a5      	cmp	r5, r4
 8002d7a:	d10b      	bne.n	8002d94 <_free_r+0x70>
 8002d7c:	6824      	ldr	r4, [r4, #0]
 8002d7e:	4421      	add	r1, r4
 8002d80:	1854      	adds	r4, r2, r1
 8002d82:	42a3      	cmp	r3, r4
 8002d84:	6011      	str	r1, [r2, #0]
 8002d86:	d1e0      	bne.n	8002d4a <_free_r+0x26>
 8002d88:	681c      	ldr	r4, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	6053      	str	r3, [r2, #4]
 8002d8e:	4421      	add	r1, r4
 8002d90:	6011      	str	r1, [r2, #0]
 8002d92:	e7da      	b.n	8002d4a <_free_r+0x26>
 8002d94:	d902      	bls.n	8002d9c <_free_r+0x78>
 8002d96:	230c      	movs	r3, #12
 8002d98:	6003      	str	r3, [r0, #0]
 8002d9a:	e7d6      	b.n	8002d4a <_free_r+0x26>
 8002d9c:	6825      	ldr	r5, [r4, #0]
 8002d9e:	1961      	adds	r1, r4, r5
 8002da0:	428b      	cmp	r3, r1
 8002da2:	bf04      	itt	eq
 8002da4:	6819      	ldreq	r1, [r3, #0]
 8002da6:	685b      	ldreq	r3, [r3, #4]
 8002da8:	6063      	str	r3, [r4, #4]
 8002daa:	bf04      	itt	eq
 8002dac:	1949      	addeq	r1, r1, r5
 8002dae:	6021      	streq	r1, [r4, #0]
 8002db0:	6054      	str	r4, [r2, #4]
 8002db2:	e7ca      	b.n	8002d4a <_free_r+0x26>
 8002db4:	b003      	add	sp, #12
 8002db6:	bd30      	pop	{r4, r5, pc}
 8002db8:	20012e34 	.word	0x20012e34

08002dbc <sbrk_aligned>:
 8002dbc:	b570      	push	{r4, r5, r6, lr}
 8002dbe:	4e0e      	ldr	r6, [pc, #56]	; (8002df8 <sbrk_aligned+0x3c>)
 8002dc0:	460c      	mov	r4, r1
 8002dc2:	6831      	ldr	r1, [r6, #0]
 8002dc4:	4605      	mov	r5, r0
 8002dc6:	b911      	cbnz	r1, 8002dce <sbrk_aligned+0x12>
 8002dc8:	f000 f88c 	bl	8002ee4 <_sbrk_r>
 8002dcc:	6030      	str	r0, [r6, #0]
 8002dce:	4621      	mov	r1, r4
 8002dd0:	4628      	mov	r0, r5
 8002dd2:	f000 f887 	bl	8002ee4 <_sbrk_r>
 8002dd6:	1c43      	adds	r3, r0, #1
 8002dd8:	d00a      	beq.n	8002df0 <sbrk_aligned+0x34>
 8002dda:	1cc4      	adds	r4, r0, #3
 8002ddc:	f024 0403 	bic.w	r4, r4, #3
 8002de0:	42a0      	cmp	r0, r4
 8002de2:	d007      	beq.n	8002df4 <sbrk_aligned+0x38>
 8002de4:	1a21      	subs	r1, r4, r0
 8002de6:	4628      	mov	r0, r5
 8002de8:	f000 f87c 	bl	8002ee4 <_sbrk_r>
 8002dec:	3001      	adds	r0, #1
 8002dee:	d101      	bne.n	8002df4 <sbrk_aligned+0x38>
 8002df0:	f04f 34ff 	mov.w	r4, #4294967295
 8002df4:	4620      	mov	r0, r4
 8002df6:	bd70      	pop	{r4, r5, r6, pc}
 8002df8:	20012e38 	.word	0x20012e38

08002dfc <_malloc_r>:
 8002dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e00:	1ccd      	adds	r5, r1, #3
 8002e02:	f025 0503 	bic.w	r5, r5, #3
 8002e06:	3508      	adds	r5, #8
 8002e08:	2d0c      	cmp	r5, #12
 8002e0a:	bf38      	it	cc
 8002e0c:	250c      	movcc	r5, #12
 8002e0e:	2d00      	cmp	r5, #0
 8002e10:	4607      	mov	r7, r0
 8002e12:	db01      	blt.n	8002e18 <_malloc_r+0x1c>
 8002e14:	42a9      	cmp	r1, r5
 8002e16:	d905      	bls.n	8002e24 <_malloc_r+0x28>
 8002e18:	230c      	movs	r3, #12
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	2600      	movs	r6, #0
 8002e1e:	4630      	mov	r0, r6
 8002e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e24:	4e2e      	ldr	r6, [pc, #184]	; (8002ee0 <_malloc_r+0xe4>)
 8002e26:	f000 f907 	bl	8003038 <__malloc_lock>
 8002e2a:	6833      	ldr	r3, [r6, #0]
 8002e2c:	461c      	mov	r4, r3
 8002e2e:	bb34      	cbnz	r4, 8002e7e <_malloc_r+0x82>
 8002e30:	4629      	mov	r1, r5
 8002e32:	4638      	mov	r0, r7
 8002e34:	f7ff ffc2 	bl	8002dbc <sbrk_aligned>
 8002e38:	1c43      	adds	r3, r0, #1
 8002e3a:	4604      	mov	r4, r0
 8002e3c:	d14d      	bne.n	8002eda <_malloc_r+0xde>
 8002e3e:	6834      	ldr	r4, [r6, #0]
 8002e40:	4626      	mov	r6, r4
 8002e42:	2e00      	cmp	r6, #0
 8002e44:	d140      	bne.n	8002ec8 <_malloc_r+0xcc>
 8002e46:	6823      	ldr	r3, [r4, #0]
 8002e48:	4631      	mov	r1, r6
 8002e4a:	4638      	mov	r0, r7
 8002e4c:	eb04 0803 	add.w	r8, r4, r3
 8002e50:	f000 f848 	bl	8002ee4 <_sbrk_r>
 8002e54:	4580      	cmp	r8, r0
 8002e56:	d13a      	bne.n	8002ece <_malloc_r+0xd2>
 8002e58:	6821      	ldr	r1, [r4, #0]
 8002e5a:	3503      	adds	r5, #3
 8002e5c:	1a6d      	subs	r5, r5, r1
 8002e5e:	f025 0503 	bic.w	r5, r5, #3
 8002e62:	3508      	adds	r5, #8
 8002e64:	2d0c      	cmp	r5, #12
 8002e66:	bf38      	it	cc
 8002e68:	250c      	movcc	r5, #12
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	4638      	mov	r0, r7
 8002e6e:	f7ff ffa5 	bl	8002dbc <sbrk_aligned>
 8002e72:	3001      	adds	r0, #1
 8002e74:	d02b      	beq.n	8002ece <_malloc_r+0xd2>
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	442b      	add	r3, r5
 8002e7a:	6023      	str	r3, [r4, #0]
 8002e7c:	e00e      	b.n	8002e9c <_malloc_r+0xa0>
 8002e7e:	6822      	ldr	r2, [r4, #0]
 8002e80:	1b52      	subs	r2, r2, r5
 8002e82:	d41e      	bmi.n	8002ec2 <_malloc_r+0xc6>
 8002e84:	2a0b      	cmp	r2, #11
 8002e86:	d916      	bls.n	8002eb6 <_malloc_r+0xba>
 8002e88:	1961      	adds	r1, r4, r5
 8002e8a:	42a3      	cmp	r3, r4
 8002e8c:	6025      	str	r5, [r4, #0]
 8002e8e:	bf18      	it	ne
 8002e90:	6059      	strne	r1, [r3, #4]
 8002e92:	6863      	ldr	r3, [r4, #4]
 8002e94:	bf08      	it	eq
 8002e96:	6031      	streq	r1, [r6, #0]
 8002e98:	5162      	str	r2, [r4, r5]
 8002e9a:	604b      	str	r3, [r1, #4]
 8002e9c:	4638      	mov	r0, r7
 8002e9e:	f104 060b 	add.w	r6, r4, #11
 8002ea2:	f000 f8cf 	bl	8003044 <__malloc_unlock>
 8002ea6:	f026 0607 	bic.w	r6, r6, #7
 8002eaa:	1d23      	adds	r3, r4, #4
 8002eac:	1af2      	subs	r2, r6, r3
 8002eae:	d0b6      	beq.n	8002e1e <_malloc_r+0x22>
 8002eb0:	1b9b      	subs	r3, r3, r6
 8002eb2:	50a3      	str	r3, [r4, r2]
 8002eb4:	e7b3      	b.n	8002e1e <_malloc_r+0x22>
 8002eb6:	6862      	ldr	r2, [r4, #4]
 8002eb8:	42a3      	cmp	r3, r4
 8002eba:	bf0c      	ite	eq
 8002ebc:	6032      	streq	r2, [r6, #0]
 8002ebe:	605a      	strne	r2, [r3, #4]
 8002ec0:	e7ec      	b.n	8002e9c <_malloc_r+0xa0>
 8002ec2:	4623      	mov	r3, r4
 8002ec4:	6864      	ldr	r4, [r4, #4]
 8002ec6:	e7b2      	b.n	8002e2e <_malloc_r+0x32>
 8002ec8:	4634      	mov	r4, r6
 8002eca:	6876      	ldr	r6, [r6, #4]
 8002ecc:	e7b9      	b.n	8002e42 <_malloc_r+0x46>
 8002ece:	230c      	movs	r3, #12
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	4638      	mov	r0, r7
 8002ed4:	f000 f8b6 	bl	8003044 <__malloc_unlock>
 8002ed8:	e7a1      	b.n	8002e1e <_malloc_r+0x22>
 8002eda:	6025      	str	r5, [r4, #0]
 8002edc:	e7de      	b.n	8002e9c <_malloc_r+0xa0>
 8002ede:	bf00      	nop
 8002ee0:	20012e34 	.word	0x20012e34

08002ee4 <_sbrk_r>:
 8002ee4:	b538      	push	{r3, r4, r5, lr}
 8002ee6:	4d06      	ldr	r5, [pc, #24]	; (8002f00 <_sbrk_r+0x1c>)
 8002ee8:	2300      	movs	r3, #0
 8002eea:	4604      	mov	r4, r0
 8002eec:	4608      	mov	r0, r1
 8002eee:	602b      	str	r3, [r5, #0]
 8002ef0:	f000 f8c0 	bl	8003074 <_sbrk>
 8002ef4:	1c43      	adds	r3, r0, #1
 8002ef6:	d102      	bne.n	8002efe <_sbrk_r+0x1a>
 8002ef8:	682b      	ldr	r3, [r5, #0]
 8002efa:	b103      	cbz	r3, 8002efe <_sbrk_r+0x1a>
 8002efc:	6023      	str	r3, [r4, #0]
 8002efe:	bd38      	pop	{r3, r4, r5, pc}
 8002f00:	20012e3c 	.word	0x20012e3c

08002f04 <__sread>:
 8002f04:	b510      	push	{r4, lr}
 8002f06:	460c      	mov	r4, r1
 8002f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f0c:	f000 f8a0 	bl	8003050 <_read_r>
 8002f10:	2800      	cmp	r0, #0
 8002f12:	bfab      	itete	ge
 8002f14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002f16:	89a3      	ldrhlt	r3, [r4, #12]
 8002f18:	181b      	addge	r3, r3, r0
 8002f1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002f1e:	bfac      	ite	ge
 8002f20:	6563      	strge	r3, [r4, #84]	; 0x54
 8002f22:	81a3      	strhlt	r3, [r4, #12]
 8002f24:	bd10      	pop	{r4, pc}

08002f26 <__swrite>:
 8002f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f2a:	461f      	mov	r7, r3
 8002f2c:	898b      	ldrh	r3, [r1, #12]
 8002f2e:	05db      	lsls	r3, r3, #23
 8002f30:	4605      	mov	r5, r0
 8002f32:	460c      	mov	r4, r1
 8002f34:	4616      	mov	r6, r2
 8002f36:	d505      	bpl.n	8002f44 <__swrite+0x1e>
 8002f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f000 f868 	bl	8003014 <_lseek_r>
 8002f44:	89a3      	ldrh	r3, [r4, #12]
 8002f46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f4e:	81a3      	strh	r3, [r4, #12]
 8002f50:	4632      	mov	r2, r6
 8002f52:	463b      	mov	r3, r7
 8002f54:	4628      	mov	r0, r5
 8002f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f5a:	f000 b817 	b.w	8002f8c <_write_r>

08002f5e <__sseek>:
 8002f5e:	b510      	push	{r4, lr}
 8002f60:	460c      	mov	r4, r1
 8002f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f66:	f000 f855 	bl	8003014 <_lseek_r>
 8002f6a:	1c43      	adds	r3, r0, #1
 8002f6c:	89a3      	ldrh	r3, [r4, #12]
 8002f6e:	bf15      	itete	ne
 8002f70:	6560      	strne	r0, [r4, #84]	; 0x54
 8002f72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002f76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f7a:	81a3      	strheq	r3, [r4, #12]
 8002f7c:	bf18      	it	ne
 8002f7e:	81a3      	strhne	r3, [r4, #12]
 8002f80:	bd10      	pop	{r4, pc}

08002f82 <__sclose>:
 8002f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f86:	f000 b813 	b.w	8002fb0 <_close_r>
	...

08002f8c <_write_r>:
 8002f8c:	b538      	push	{r3, r4, r5, lr}
 8002f8e:	4d07      	ldr	r5, [pc, #28]	; (8002fac <_write_r+0x20>)
 8002f90:	4604      	mov	r4, r0
 8002f92:	4608      	mov	r0, r1
 8002f94:	4611      	mov	r1, r2
 8002f96:	2200      	movs	r2, #0
 8002f98:	602a      	str	r2, [r5, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f7fd f9d3 	bl	8000346 <_write>
 8002fa0:	1c43      	adds	r3, r0, #1
 8002fa2:	d102      	bne.n	8002faa <_write_r+0x1e>
 8002fa4:	682b      	ldr	r3, [r5, #0]
 8002fa6:	b103      	cbz	r3, 8002faa <_write_r+0x1e>
 8002fa8:	6023      	str	r3, [r4, #0]
 8002faa:	bd38      	pop	{r3, r4, r5, pc}
 8002fac:	20012e3c 	.word	0x20012e3c

08002fb0 <_close_r>:
 8002fb0:	b538      	push	{r3, r4, r5, lr}
 8002fb2:	4d06      	ldr	r5, [pc, #24]	; (8002fcc <_close_r+0x1c>)
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	4604      	mov	r4, r0
 8002fb8:	4608      	mov	r0, r1
 8002fba:	602b      	str	r3, [r5, #0]
 8002fbc:	f7fd f9df 	bl	800037e <_close>
 8002fc0:	1c43      	adds	r3, r0, #1
 8002fc2:	d102      	bne.n	8002fca <_close_r+0x1a>
 8002fc4:	682b      	ldr	r3, [r5, #0]
 8002fc6:	b103      	cbz	r3, 8002fca <_close_r+0x1a>
 8002fc8:	6023      	str	r3, [r4, #0]
 8002fca:	bd38      	pop	{r3, r4, r5, pc}
 8002fcc:	20012e3c 	.word	0x20012e3c

08002fd0 <_fstat_r>:
 8002fd0:	b538      	push	{r3, r4, r5, lr}
 8002fd2:	4d07      	ldr	r5, [pc, #28]	; (8002ff0 <_fstat_r+0x20>)
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	4604      	mov	r4, r0
 8002fd8:	4608      	mov	r0, r1
 8002fda:	4611      	mov	r1, r2
 8002fdc:	602b      	str	r3, [r5, #0]
 8002fde:	f7fd f9da 	bl	8000396 <_fstat>
 8002fe2:	1c43      	adds	r3, r0, #1
 8002fe4:	d102      	bne.n	8002fec <_fstat_r+0x1c>
 8002fe6:	682b      	ldr	r3, [r5, #0]
 8002fe8:	b103      	cbz	r3, 8002fec <_fstat_r+0x1c>
 8002fea:	6023      	str	r3, [r4, #0]
 8002fec:	bd38      	pop	{r3, r4, r5, pc}
 8002fee:	bf00      	nop
 8002ff0:	20012e3c 	.word	0x20012e3c

08002ff4 <_isatty_r>:
 8002ff4:	b538      	push	{r3, r4, r5, lr}
 8002ff6:	4d06      	ldr	r5, [pc, #24]	; (8003010 <_isatty_r+0x1c>)
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	4604      	mov	r4, r0
 8002ffc:	4608      	mov	r0, r1
 8002ffe:	602b      	str	r3, [r5, #0]
 8003000:	f7fd f9d9 	bl	80003b6 <_isatty>
 8003004:	1c43      	adds	r3, r0, #1
 8003006:	d102      	bne.n	800300e <_isatty_r+0x1a>
 8003008:	682b      	ldr	r3, [r5, #0]
 800300a:	b103      	cbz	r3, 800300e <_isatty_r+0x1a>
 800300c:	6023      	str	r3, [r4, #0]
 800300e:	bd38      	pop	{r3, r4, r5, pc}
 8003010:	20012e3c 	.word	0x20012e3c

08003014 <_lseek_r>:
 8003014:	b538      	push	{r3, r4, r5, lr}
 8003016:	4d07      	ldr	r5, [pc, #28]	; (8003034 <_lseek_r+0x20>)
 8003018:	4604      	mov	r4, r0
 800301a:	4608      	mov	r0, r1
 800301c:	4611      	mov	r1, r2
 800301e:	2200      	movs	r2, #0
 8003020:	602a      	str	r2, [r5, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	f7fd f9d2 	bl	80003cc <_lseek>
 8003028:	1c43      	adds	r3, r0, #1
 800302a:	d102      	bne.n	8003032 <_lseek_r+0x1e>
 800302c:	682b      	ldr	r3, [r5, #0]
 800302e:	b103      	cbz	r3, 8003032 <_lseek_r+0x1e>
 8003030:	6023      	str	r3, [r4, #0]
 8003032:	bd38      	pop	{r3, r4, r5, pc}
 8003034:	20012e3c 	.word	0x20012e3c

08003038 <__malloc_lock>:
 8003038:	4801      	ldr	r0, [pc, #4]	; (8003040 <__malloc_lock+0x8>)
 800303a:	f7ff be0b 	b.w	8002c54 <__retarget_lock_acquire_recursive>
 800303e:	bf00      	nop
 8003040:	20012e30 	.word	0x20012e30

08003044 <__malloc_unlock>:
 8003044:	4801      	ldr	r0, [pc, #4]	; (800304c <__malloc_unlock+0x8>)
 8003046:	f7ff be06 	b.w	8002c56 <__retarget_lock_release_recursive>
 800304a:	bf00      	nop
 800304c:	20012e30 	.word	0x20012e30

08003050 <_read_r>:
 8003050:	b538      	push	{r3, r4, r5, lr}
 8003052:	4d07      	ldr	r5, [pc, #28]	; (8003070 <_read_r+0x20>)
 8003054:	4604      	mov	r4, r0
 8003056:	4608      	mov	r0, r1
 8003058:	4611      	mov	r1, r2
 800305a:	2200      	movs	r2, #0
 800305c:	602a      	str	r2, [r5, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	f7fd f954 	bl	800030c <_read>
 8003064:	1c43      	adds	r3, r0, #1
 8003066:	d102      	bne.n	800306e <_read_r+0x1e>
 8003068:	682b      	ldr	r3, [r5, #0]
 800306a:	b103      	cbz	r3, 800306e <_read_r+0x1e>
 800306c:	6023      	str	r3, [r4, #0]
 800306e:	bd38      	pop	{r3, r4, r5, pc}
 8003070:	20012e3c 	.word	0x20012e3c

08003074 <_sbrk>:
 8003074:	4a04      	ldr	r2, [pc, #16]	; (8003088 <_sbrk+0x14>)
 8003076:	6811      	ldr	r1, [r2, #0]
 8003078:	4603      	mov	r3, r0
 800307a:	b909      	cbnz	r1, 8003080 <_sbrk+0xc>
 800307c:	4903      	ldr	r1, [pc, #12]	; (800308c <_sbrk+0x18>)
 800307e:	6011      	str	r1, [r2, #0]
 8003080:	6810      	ldr	r0, [r2, #0]
 8003082:	4403      	add	r3, r0
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	4770      	bx	lr
 8003088:	20012e40 	.word	0x20012e40
 800308c:	20012e48 	.word	0x20012e48

08003090 <_init>:
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	bf00      	nop
 8003094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003096:	bc08      	pop	{r3}
 8003098:	469e      	mov	lr, r3
 800309a:	4770      	bx	lr

0800309c <_fini>:
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309e:	bf00      	nop
 80030a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a2:	bc08      	pop	{r3}
 80030a4:	469e      	mov	lr, r3
 80030a6:	4770      	bx	lr
