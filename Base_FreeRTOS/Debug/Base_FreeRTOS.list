
Base_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08005460  08005460  00015460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055f0  080055f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080055f0  080055f0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055f0  080055f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055f0  080055f0  000155f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055f4  080055f4  000155f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080055f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014450  20000070  08005668  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144c0  08005668  000244c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c22e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c1a  00000000  00000000  0002c2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002dee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002e990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000121ea  00000000  00000000  0002f340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c3da  00000000  00000000  0004152a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063898  00000000  00000000  0004d904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b119c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003284  00000000  00000000  000b11ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005448 	.word	0x08005448

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005448 	.word	0x08005448

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012ed8 	.word	0x20012ed8

08000274 <main>:
//Cabeceras de las funciones del programa
void vTaskOne( void * pvParameters );
void vTaskTwo( void * pvParameters );

int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b088      	sub	sp, #32
 8000278:	af02      	add	r7, sp, #8
	//Activamos la unidad de punto flotante (FPU)
	SCB->CPACR    |= (0xF << 20);
 800027a:	4b27      	ldr	r3, [pc, #156]	; (8000318 <main+0xa4>)
 800027c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000280:	4a25      	ldr	r2, [pc, #148]	; (8000318 <main+0xa4>)
 8000282:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000286:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Activamos del contador de Ticks
	DWT->CTRL    |= (1 << 0);
 800028a:	4b24      	ldr	r3, [pc, #144]	; (800031c <main+0xa8>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a23      	ldr	r2, [pc, #140]	; (800031c <main+0xa8>)
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6013      	str	r3, [r2, #0]

	//---------------------Inicio de uso funciones para el funcionamiento del SEGGER----------------------
	//Necesaria para el SEGGER
	vInitPrioGroupValue();
 8000296:	f002 f98f 	bl	80025b8 <vInitPrioGroupValue>
	/* Primero configuramos */
	SEGGER_SYSVIEW_Conf();
 800029a:	f002 fd43 	bl	8002d24 <SEGGER_SYSVIEW_Conf>
	/* Despues activamos el sistema */
	SEGGER_SYSVIEW_Start();
 800029e:	f003 fdb1 	bl	8003e04 <SEGGER_SYSVIEW_Start>
	//-----------------------Fin de uso Funciones para el funcionamiento del SEGGER----------------------

	BaseType_t xReturned;
	TaskHandle_t xHandleTask1 = NULL;
 80002a2:	2300      	movs	r3, #0
 80002a4:	60bb      	str	r3, [r7, #8]
	TaskHandle_t xHandleTask2 = NULL;
 80002a6:	2300      	movs	r3, #0
 80002a8:	607b      	str	r3, [r7, #4]

	//Configuracion tarea 1
	xReturned = xTaskCreate(
 80002aa:	f107 0308 	add.w	r3, r7, #8
 80002ae:	9301      	str	r3, [sp, #4]
 80002b0:	2302      	movs	r3, #2
 80002b2:	9300      	str	r3, [sp, #0]
 80002b4:	4b1a      	ldr	r3, [pc, #104]	; (8000320 <main+0xac>)
 80002b6:	22c8      	movs	r2, #200	; 0xc8
 80002b8:	491a      	ldr	r1, [pc, #104]	; (8000324 <main+0xb0>)
 80002ba:	481b      	ldr	r0, [pc, #108]	; (8000328 <main+0xb4>)
 80002bc:	f000 feba 	bl	8001034 <xTaskCreate>
 80002c0:	6178      	str	r0, [r7, #20]
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						"Hola Mundo desde la tarea-1",    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask1);      /* Used to pass out the created task's handle. */

	configASSERT(xReturned == pdPASS);
 80002c2:	697b      	ldr	r3, [r7, #20]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d00a      	beq.n	80002de <main+0x6a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002cc:	f383 8811 	msr	BASEPRI, r3
 80002d0:	f3bf 8f6f 	isb	sy
 80002d4:	f3bf 8f4f 	dsb	sy
 80002d8:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002da:	bf00      	nop
 80002dc:	e7fe      	b.n	80002dc <main+0x68>

	//configuracion tarea 2
	xReturned = xTaskCreate(
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	9301      	str	r3, [sp, #4]
 80002e2:	2302      	movs	r3, #2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	4b11      	ldr	r3, [pc, #68]	; (800032c <main+0xb8>)
 80002e8:	22c8      	movs	r2, #200	; 0xc8
 80002ea:	4911      	ldr	r1, [pc, #68]	; (8000330 <main+0xbc>)
 80002ec:	4811      	ldr	r0, [pc, #68]	; (8000334 <main+0xc0>)
 80002ee:	f000 fea1 	bl	8001034 <xTaskCreate>
 80002f2:	6178      	str	r0, [r7, #20]
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						"Hola Mundo desde la tarea-2",    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask2);      /* Used to pass out the created task's handle. */

	configASSERT(xReturned == pdPASS);
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d00a      	beq.n	8000310 <main+0x9c>
        __asm volatile
 80002fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002fe:	f383 8811 	msr	BASEPRI, r3
 8000302:	f3bf 8f6f 	isb	sy
 8000306:	f3bf 8f4f 	dsb	sy
 800030a:	60fb      	str	r3, [r7, #12]
    }
 800030c:	bf00      	nop
 800030e:	e7fe      	b.n	800030e <main+0x9a>

	/* Start the created tasks running. */
	vTaskStartScheduler();
 8000310:	f000 ffe6 	bl	80012e0 <vTaskStartScheduler>

	while(1)
 8000314:	e7fe      	b.n	8000314 <main+0xa0>
 8000316:	bf00      	nop
 8000318:	e000ed00 	.word	0xe000ed00
 800031c:	e0001000 	.word	0xe0001000
 8000320:	08005460 	.word	0x08005460
 8000324:	0800547c 	.word	0x0800547c
 8000328:	08000339 	.word	0x08000339
 800032c:	08005484 	.word	0x08005484
 8000330:	080054a0 	.word	0x080054a0
 8000334:	0800035d 	.word	0x0800035d

08000338 <vTaskOne>:
	}
}

/* Funcion que gobierna a la tarea 1*/
void vTaskOne( void * pvParameters )
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n",(char *) pvParameters);
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f004 fbf5 	bl	8004b30 <puts>
		//Funcion para que la tarea suelte el procesador
		taskYIELD();
 8000346:	4b04      	ldr	r3, [pc, #16]	; (8000358 <vTaskOne+0x20>)
 8000348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	f3bf 8f4f 	dsb	sy
 8000352:	f3bf 8f6f 	isb	sy
		printf("%s\n",(char *) pvParameters);
 8000356:	e7f3      	b.n	8000340 <vTaskOne+0x8>
 8000358:	e000ed04 	.word	0xe000ed04

0800035c <vTaskTwo>:
	}
}

/* Funcion que gobierna a la tarea 2*/
void vTaskTwo( void * pvParameters )
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	while(1)
	{
		while(1)
		{
			printf("%s\n",(char *) pvParameters);
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f004 fbe3 	bl	8004b30 <puts>
			//Funcion para que la tarea suelte el procesador
			taskYIELD();
 800036a:	4b04      	ldr	r3, [pc, #16]	; (800037c <vTaskTwo+0x20>)
 800036c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	f3bf 8f4f 	dsb	sy
 8000376:	f3bf 8f6f 	isb	sy
			printf("%s\n",(char *) pvParameters);
 800037a:	e7f3      	b.n	8000364 <vTaskTwo+0x8>
 800037c:	e000ed04 	.word	0xe000ed04

08000380 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
 8000386:	60f8      	str	r0, [r7, #12]
 8000388:	60b9      	str	r1, [r7, #8]
 800038a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]
 8000390:	e00a      	b.n	80003a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000392:	f3af 8000 	nop.w
 8000396:	4601      	mov	r1, r0
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	1c5a      	adds	r2, r3, #1
 800039c:	60ba      	str	r2, [r7, #8]
 800039e:	b2ca      	uxtb	r2, r1
 80003a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	3301      	adds	r3, #1
 80003a6:	617b      	str	r3, [r7, #20]
 80003a8:	697a      	ldr	r2, [r7, #20]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	dbf0      	blt.n	8000392 <_read+0x12>
	}

return len;
 80003b0:	687b      	ldr	r3, [r7, #4]
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3718      	adds	r7, #24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80003ba:	b480      	push	{r7}
 80003bc:	b083      	sub	sp, #12
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
	return -1;
 80003c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003e2:	605a      	str	r2, [r3, #4]
	return 0;
 80003e4:	2300      	movs	r3, #0
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr

080003f2 <_isatty>:

int _isatty(int file)
{
 80003f2:	b480      	push	{r7}
 80003f4:	b083      	sub	sp, #12
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	6078      	str	r0, [r7, #4]
	return 1;
 80003fa:	2301      	movs	r3, #1
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
 800040e:	60f8      	str	r0, [r7, #12]
 8000410:	60b9      	str	r1, [r7, #8]
 8000412:	607a      	str	r2, [r7, #4]
	return 0;
 8000414:	2300      	movs	r3, #0
}
 8000416:	4618      	mov	r0, r3
 8000418:	3714      	adds	r7, #20
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
	...

08000424 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000424:	480d      	ldr	r0, [pc, #52]	; (800045c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000426:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000428:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800042c:	480c      	ldr	r0, [pc, #48]	; (8000460 <LoopForever+0x6>)
  ldr r1, =_edata
 800042e:	490d      	ldr	r1, [pc, #52]	; (8000464 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000430:	4a0d      	ldr	r2, [pc, #52]	; (8000468 <LoopForever+0xe>)
  movs r3, #0
 8000432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000434:	e002      	b.n	800043c <LoopCopyDataInit>

08000436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800043a:	3304      	adds	r3, #4

0800043c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800043c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800043e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000440:	d3f9      	bcc.n	8000436 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000442:	4a0a      	ldr	r2, [pc, #40]	; (800046c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000444:	4c0a      	ldr	r4, [pc, #40]	; (8000470 <LoopForever+0x16>)
  movs r3, #0
 8000446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000448:	e001      	b.n	800044e <LoopFillZerobss>

0800044a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800044a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800044c:	3204      	adds	r2, #4

0800044e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800044e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000450:	d3fb      	bcc.n	800044a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000452:	f004 fab5 	bl	80049c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000456:	f7ff ff0d 	bl	8000274 <main>

0800045a <LoopForever>:

LoopForever:
    b LoopForever
 800045a:	e7fe      	b.n	800045a <LoopForever>
  ldr   r0, =_estack
 800045c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000464:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000468:	080055f8 	.word	0x080055f8
  ldr r2, =_sbss
 800046c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000470:	200144c0 	.word	0x200144c0

08000474 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000474:	e7fe      	b.n	8000474 <ADC_IRQHandler>

08000476 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000476:	b480      	push	{r7}
 8000478:	b083      	sub	sp, #12
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	f103 0208 	add.w	r2, r3, #8
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f04f 32ff 	mov.w	r2, #4294967295
 800048e:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f103 0208 	add.w	r2, r3, #8
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	f103 0208 	add.w	r2, r3, #8
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr

080004b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80004b6:	b480      	push	{r7}
 80004b8:	b083      	sub	sp, #12
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2200      	movs	r2, #0
 80004c2:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr

080004d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	689a      	ldr	r2, [r3, #8]
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	689b      	ldr	r3, [r3, #8]
 80004f2:	683a      	ldr	r2, [r7, #0]
 80004f4:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	683a      	ldr	r2, [r7, #0]
 80004fa:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	1c5a      	adds	r2, r3, #1
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	601a      	str	r2, [r3, #0]
}
 800050c:	bf00      	nop
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800052e:	d103      	bne.n	8000538 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	691b      	ldr	r3, [r3, #16]
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	e00c      	b.n	8000552 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	3308      	adds	r3, #8
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	e002      	b.n	8000546 <vListInsert+0x2e>
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	68ba      	ldr	r2, [r7, #8]
 800054e:	429a      	cmp	r2, r3
 8000550:	d2f6      	bcs.n	8000540 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	685a      	ldr	r2, [r3, #4]
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	683a      	ldr	r2, [r7, #0]
 8000560:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	68fa      	ldr	r2, [r7, #12]
 8000566:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	683a      	ldr	r2, [r7, #0]
 800056c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	1c5a      	adds	r2, r3, #1
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	601a      	str	r2, [r3, #0]
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr

0800058a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800058a:	b480      	push	{r7}
 800058c:	b085      	sub	sp, #20
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	691b      	ldr	r3, [r3, #16]
 8000596:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	6892      	ldr	r2, [r2, #8]
 80005a0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	6852      	ldr	r2, [r2, #4]
 80005aa:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d103      	bne.n	80005be <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	689a      	ldr	r2, [r3, #8]
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	1e5a      	subs	r2, r3, #1
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	681b      	ldr	r3, [r3, #0]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	b084      	sub	sp, #16
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d10a      	bne.n	8000608 <xQueueGenericReset+0x2a>
        __asm volatile
 80005f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f6:	f383 8811 	msr	BASEPRI, r3
 80005fa:	f3bf 8f6f 	isb	sy
 80005fe:	f3bf 8f4f 	dsb	sy
 8000602:	60bb      	str	r3, [r7, #8]
    }
 8000604:	bf00      	nop
 8000606:	e7fe      	b.n	8000606 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8000608:	f002 f854 	bl	80026b4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000614:	68f9      	ldr	r1, [r7, #12]
 8000616:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000618:	fb01 f303 	mul.w	r3, r1, r3
 800061c:	441a      	add	r2, r3
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	2200      	movs	r2, #0
 8000626:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000638:	3b01      	subs	r3, #1
 800063a:	68f9      	ldr	r1, [r7, #12]
 800063c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800063e:	fb01 f303 	mul.w	r3, r1, r3
 8000642:	441a      	add	r2, r3
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	22ff      	movs	r2, #255	; 0xff
 800064c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	22ff      	movs	r2, #255	; 0xff
 8000654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d109      	bne.n	8000672 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	691b      	ldr	r3, [r3, #16]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d00f      	beq.n	8000686 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	3310      	adds	r3, #16
 800066a:	4618      	mov	r0, r3
 800066c:	f001 f8b2 	bl	80017d4 <xTaskRemoveFromEventList>
 8000670:	e009      	b.n	8000686 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3310      	adds	r3, #16
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff fefd 	bl	8000476 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3324      	adds	r3, #36	; 0x24
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff fef8 	bl	8000476 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8000686:	f002 f845 	bl	8002714 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000694:	b580      	push	{r7, lr}
 8000696:	b08c      	sub	sp, #48	; 0x30
 8000698:	af02      	add	r7, sp, #8
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	4613      	mov	r3, r2
 80006a0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d10a      	bne.n	80006be <xQueueGenericCreate+0x2a>
        __asm volatile
 80006a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ac:	f383 8811 	msr	BASEPRI, r3
 80006b0:	f3bf 8f6f 	isb	sy
 80006b4:	f3bf 8f4f 	dsb	sy
 80006b8:	61bb      	str	r3, [r7, #24]
    }
 80006ba:	bf00      	nop
 80006bc:	e7fe      	b.n	80006bc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	68ba      	ldr	r2, [r7, #8]
 80006c2:	fb02 f303 	mul.w	r3, r2, r3
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d006      	beq.n	80006dc <xQueueGenericCreate+0x48>
 80006ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d101      	bne.n	80006e0 <xQueueGenericCreate+0x4c>
 80006dc:	2301      	movs	r3, #1
 80006de:	e000      	b.n	80006e2 <xQueueGenericCreate+0x4e>
 80006e0:	2300      	movs	r3, #0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d10a      	bne.n	80006fc <xQueueGenericCreate+0x68>
        __asm volatile
 80006e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ea:	f383 8811 	msr	BASEPRI, r3
 80006ee:	f3bf 8f6f 	isb	sy
 80006f2:	f3bf 8f4f 	dsb	sy
 80006f6:	617b      	str	r3, [r7, #20]
    }
 80006f8:	bf00      	nop
 80006fa:	e7fe      	b.n	80006fa <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80006fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fe:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000702:	d90a      	bls.n	800071a <xQueueGenericCreate+0x86>
        __asm volatile
 8000704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000708:	f383 8811 	msr	BASEPRI, r3
 800070c:	f3bf 8f6f 	isb	sy
 8000710:	f3bf 8f4f 	dsb	sy
 8000714:	613b      	str	r3, [r7, #16]
    }
 8000716:	bf00      	nop
 8000718:	e7fe      	b.n	8000718 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800071a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071c:	3350      	adds	r3, #80	; 0x50
 800071e:	4618      	mov	r0, r3
 8000720:	f002 f8f4 	bl	800290c <pvPortMalloc>
 8000724:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000726:	6a3b      	ldr	r3, [r7, #32]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d00d      	beq.n	8000748 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800072c:	6a3b      	ldr	r3, [r7, #32]
 800072e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	3350      	adds	r3, #80	; 0x50
 8000734:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000736:	79fa      	ldrb	r2, [r7, #7]
 8000738:	6a3b      	ldr	r3, [r7, #32]
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	4613      	mov	r3, r2
 800073e:	69fa      	ldr	r2, [r7, #28]
 8000740:	68b9      	ldr	r1, [r7, #8]
 8000742:	68f8      	ldr	r0, [r7, #12]
 8000744:	f000 f805 	bl	8000752 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000748:	6a3b      	ldr	r3, [r7, #32]
    }
 800074a:	4618      	mov	r0, r3
 800074c:	3728      	adds	r7, #40	; 0x28
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b084      	sub	sp, #16
 8000756:	af00      	add	r7, sp, #0
 8000758:	60f8      	str	r0, [r7, #12]
 800075a:	60b9      	str	r1, [r7, #8]
 800075c:	607a      	str	r2, [r7, #4]
 800075e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d103      	bne.n	800076e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	69ba      	ldr	r2, [r7, #24]
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	e002      	b.n	8000774 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800076e:	69bb      	ldr	r3, [r7, #24]
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	68fa      	ldr	r2, [r7, #12]
 8000778:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	68ba      	ldr	r2, [r7, #8]
 800077e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000780:	2101      	movs	r1, #1
 8000782:	69b8      	ldr	r0, [r7, #24]
 8000784:	f7ff ff2b 	bl	80005de <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	78fa      	ldrb	r2, [r7, #3]
 800078c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	68ba      	ldr	r2, [r7, #8]
 8000794:	68f9      	ldr	r1, [r7, #12]
 8000796:	2073      	movs	r0, #115	; 0x73
 8000798:	f003 fa2c 	bl	8003bf4 <SEGGER_SYSVIEW_RecordU32x3>
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b090      	sub	sp, #64	; 0x40
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
 80007b0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80007b2:	2300      	movs	r3, #0
 80007b4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80007ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d10a      	bne.n	80007d6 <xQueueGenericSend+0x32>
        __asm volatile
 80007c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007c4:	f383 8811 	msr	BASEPRI, r3
 80007c8:	f3bf 8f6f 	isb	sy
 80007cc:	f3bf 8f4f 	dsb	sy
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80007d2:	bf00      	nop
 80007d4:	e7fe      	b.n	80007d4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d103      	bne.n	80007e4 <xQueueGenericSend+0x40>
 80007dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d101      	bne.n	80007e8 <xQueueGenericSend+0x44>
 80007e4:	2301      	movs	r3, #1
 80007e6:	e000      	b.n	80007ea <xQueueGenericSend+0x46>
 80007e8:	2300      	movs	r3, #0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d10a      	bne.n	8000804 <xQueueGenericSend+0x60>
        __asm volatile
 80007ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007f2:	f383 8811 	msr	BASEPRI, r3
 80007f6:	f3bf 8f6f 	isb	sy
 80007fa:	f3bf 8f4f 	dsb	sy
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000800:	bf00      	nop
 8000802:	e7fe      	b.n	8000802 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	2b02      	cmp	r3, #2
 8000808:	d103      	bne.n	8000812 <xQueueGenericSend+0x6e>
 800080a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800080c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800080e:	2b01      	cmp	r3, #1
 8000810:	d101      	bne.n	8000816 <xQueueGenericSend+0x72>
 8000812:	2301      	movs	r3, #1
 8000814:	e000      	b.n	8000818 <xQueueGenericSend+0x74>
 8000816:	2300      	movs	r3, #0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d10a      	bne.n	8000832 <xQueueGenericSend+0x8e>
        __asm volatile
 800081c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000820:	f383 8811 	msr	BASEPRI, r3
 8000824:	f3bf 8f6f 	isb	sy
 8000828:	f3bf 8f4f 	dsb	sy
 800082c:	623b      	str	r3, [r7, #32]
    }
 800082e:	bf00      	nop
 8000830:	e7fe      	b.n	8000830 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000832:	f001 f969 	bl	8001b08 <xTaskGetSchedulerState>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d102      	bne.n	8000842 <xQueueGenericSend+0x9e>
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d101      	bne.n	8000846 <xQueueGenericSend+0xa2>
 8000842:	2301      	movs	r3, #1
 8000844:	e000      	b.n	8000848 <xQueueGenericSend+0xa4>
 8000846:	2300      	movs	r3, #0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d10a      	bne.n	8000862 <xQueueGenericSend+0xbe>
        __asm volatile
 800084c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000850:	f383 8811 	msr	BASEPRI, r3
 8000854:	f3bf 8f6f 	isb	sy
 8000858:	f3bf 8f4f 	dsb	sy
 800085c:	61fb      	str	r3, [r7, #28]
    }
 800085e:	bf00      	nop
 8000860:	e7fe      	b.n	8000860 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000862:	f001 ff27 	bl	80026b4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800086a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800086c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800086e:	429a      	cmp	r2, r3
 8000870:	d302      	bcc.n	8000878 <xQueueGenericSend+0xd4>
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d11f      	bne.n	80008b8 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 8000878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800087a:	4618      	mov	r0, r3
 800087c:	f003 ff46 	bl	800470c <SEGGER_SYSVIEW_ShrinkId>
 8000880:	68ba      	ldr	r2, [r7, #8]
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	460b      	mov	r3, r1
 800088a:	4601      	mov	r1, r0
 800088c:	205a      	movs	r0, #90	; 0x5a
 800088e:	f003 fa27 	bl	8003ce0 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000892:	683a      	ldr	r2, [r7, #0]
 8000894:	68b9      	ldr	r1, [r7, #8]
 8000896:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000898:	f000 fa56 	bl	8000d48 <prvCopyDataToQueue>
 800089c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800089e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d004      	beq.n	80008b0 <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80008a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008a8:	3324      	adds	r3, #36	; 0x24
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 ff92 	bl	80017d4 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80008b0:	f001 ff30 	bl	8002714 <vPortExitCritical>
                return pdPASS;
 80008b4:	2301      	movs	r3, #1
 80008b6:	e07d      	b.n	80009b4 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d110      	bne.n	80008e0 <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80008be:	f001 ff29 	bl	8002714 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80008c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008c4:	4618      	mov	r0, r3
 80008c6:	f003 ff21 	bl	800470c <SEGGER_SYSVIEW_ShrinkId>
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	6879      	ldr	r1, [r7, #4]
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	460b      	mov	r3, r1
 80008d4:	4601      	mov	r1, r0
 80008d6:	205a      	movs	r0, #90	; 0x5a
 80008d8:	f003 fa02 	bl	8003ce0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	e069      	b.n	80009b4 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 80008e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d106      	bne.n	80008f4 <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 ffd8 	bl	80018a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80008f0:	2301      	movs	r3, #1
 80008f2:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80008f4:	f001 ff0e 	bl	8002714 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80008f8:	f000 fd54 	bl	80013a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80008fc:	f001 feda 	bl	80026b4 <vPortEnterCritical>
 8000900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000902:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000906:	b25b      	sxtb	r3, r3
 8000908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800090c:	d103      	bne.n	8000916 <xQueueGenericSend+0x172>
 800090e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000910:	2200      	movs	r2, #0
 8000912:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000918:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800091c:	b25b      	sxtb	r3, r3
 800091e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000922:	d103      	bne.n	800092c <xQueueGenericSend+0x188>
 8000924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000926:	2200      	movs	r2, #0
 8000928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800092c:	f001 fef2 	bl	8002714 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000930:	1d3a      	adds	r2, r7, #4
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4611      	mov	r1, r2
 8000938:	4618      	mov	r0, r3
 800093a:	f000 ffc7 	bl	80018cc <xTaskCheckForTimeOut>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d124      	bne.n	800098e <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000946:	f000 faf7 	bl	8000f38 <prvIsQueueFull>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d018      	beq.n	8000982 <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000952:	3310      	adds	r3, #16
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f000 fee9 	bl	8001730 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800095e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000960:	f000 fa82 	bl	8000e68 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000964:	f000 fd2c 	bl	80013c0 <xTaskResumeAll>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	f47f af79 	bne.w	8000862 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <xQueueGenericSend+0x218>)
 8000972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	f3bf 8f4f 	dsb	sy
 800097c:	f3bf 8f6f 	isb	sy
 8000980:	e76f      	b.n	8000862 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000982:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000984:	f000 fa70 	bl	8000e68 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000988:	f000 fd1a 	bl	80013c0 <xTaskResumeAll>
 800098c:	e769      	b.n	8000862 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800098e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000990:	f000 fa6a 	bl	8000e68 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000994:	f000 fd14 	bl	80013c0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800099a:	4618      	mov	r0, r3
 800099c:	f003 feb6 	bl	800470c <SEGGER_SYSVIEW_ShrinkId>
 80009a0:	68ba      	ldr	r2, [r7, #8]
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	460b      	mov	r3, r1
 80009aa:	4601      	mov	r1, r0
 80009ac:	205a      	movs	r0, #90	; 0x5a
 80009ae:	f003 f997 	bl	8003ce0 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80009b2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3738      	adds	r7, #56	; 0x38
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	e000ed04 	.word	0xe000ed04

080009c0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b090      	sub	sp, #64	; 0x40
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80009d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d10a      	bne.n	80009ee <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80009d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009dc:	f383 8811 	msr	BASEPRI, r3
 80009e0:	f3bf 8f6f 	isb	sy
 80009e4:	f3bf 8f4f 	dsb	sy
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80009ea:	bf00      	nop
 80009ec:	e7fe      	b.n	80009ec <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d103      	bne.n	80009fc <xQueueGenericSendFromISR+0x3c>
 80009f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d101      	bne.n	8000a00 <xQueueGenericSendFromISR+0x40>
 80009fc:	2301      	movs	r3, #1
 80009fe:	e000      	b.n	8000a02 <xQueueGenericSendFromISR+0x42>
 8000a00:	2300      	movs	r3, #0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d10a      	bne.n	8000a1c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8000a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a0a:	f383 8811 	msr	BASEPRI, r3
 8000a0e:	f3bf 8f6f 	isb	sy
 8000a12:	f3bf 8f4f 	dsb	sy
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000a18:	bf00      	nop
 8000a1a:	e7fe      	b.n	8000a1a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d103      	bne.n	8000a2a <xQueueGenericSendFromISR+0x6a>
 8000a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d101      	bne.n	8000a2e <xQueueGenericSendFromISR+0x6e>
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e000      	b.n	8000a30 <xQueueGenericSendFromISR+0x70>
 8000a2e:	2300      	movs	r3, #0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d10a      	bne.n	8000a4a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8000a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a38:	f383 8811 	msr	BASEPRI, r3
 8000a3c:	f3bf 8f6f 	isb	sy
 8000a40:	f3bf 8f4f 	dsb	sy
 8000a44:	623b      	str	r3, [r7, #32]
    }
 8000a46:	bf00      	nop
 8000a48:	e7fe      	b.n	8000a48 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000a4a:	f001 ff1f 	bl	800288c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000a4e:	f3ef 8211 	mrs	r2, BASEPRI
 8000a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a56:	f383 8811 	msr	BASEPRI, r3
 8000a5a:	f3bf 8f6f 	isb	sy
 8000a5e:	f3bf 8f4f 	dsb	sy
 8000a62:	61fa      	str	r2, [r7, #28]
 8000a64:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000a66:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000a68:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d302      	bcc.n	8000a7c <xQueueGenericSendFromISR+0xbc>
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d148      	bne.n	8000b0e <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f003 fe3c 	bl	800470c <SEGGER_SYSVIEW_ShrinkId>
 8000a94:	4601      	mov	r1, r0
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	2060      	movs	r0, #96	; 0x60
 8000a9c:	f003 f850 	bl	8003b40 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	68b9      	ldr	r1, [r7, #8]
 8000aa4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000aa6:	f000 f94f 	bl	8000d48 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000aaa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab2:	d112      	bne.n	8000ada <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d025      	beq.n	8000b08 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000abe:	3324      	adds	r3, #36	; 0x24
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 fe87 	bl	80017d4 <xTaskRemoveFromEventList>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d01d      	beq.n	8000b08 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d01a      	beq.n	8000b08 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	e016      	b.n	8000b08 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000ada:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000ade:	2b7f      	cmp	r3, #127	; 0x7f
 8000ae0:	d10a      	bne.n	8000af8 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8000ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ae6:	f383 8811 	msr	BASEPRI, r3
 8000aea:	f3bf 8f6f 	isb	sy
 8000aee:	f3bf 8f4f 	dsb	sy
 8000af2:	617b      	str	r3, [r7, #20]
    }
 8000af4:	bf00      	nop
 8000af6:	e7fe      	b.n	8000af6 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000af8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000afc:	3301      	adds	r3, #1
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	b25a      	sxtb	r2, r3
 8000b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000b0c:	e00b      	b.n	8000b26 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b10:	4618      	mov	r0, r3
 8000b12:	f003 fdfb 	bl	800470c <SEGGER_SYSVIEW_ShrinkId>
 8000b16:	4601      	mov	r1, r0
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	2060      	movs	r0, #96	; 0x60
 8000b1e:	f003 f80f 	bl	8003b40 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b28:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000b30:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3740      	adds	r7, #64	; 0x40
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b08f      	sub	sp, #60	; 0x3c
 8000b40:	af02      	add	r7, sp, #8
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d10a      	bne.n	8000b6c <xQueueReceive+0x30>
        __asm volatile
 8000b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b5a:	f383 8811 	msr	BASEPRI, r3
 8000b5e:	f3bf 8f6f 	isb	sy
 8000b62:	f3bf 8f4f 	dsb	sy
 8000b66:	623b      	str	r3, [r7, #32]
    }
 8000b68:	bf00      	nop
 8000b6a:	e7fe      	b.n	8000b6a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d103      	bne.n	8000b7a <xQueueReceive+0x3e>
 8000b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d101      	bne.n	8000b7e <xQueueReceive+0x42>
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e000      	b.n	8000b80 <xQueueReceive+0x44>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d10a      	bne.n	8000b9a <xQueueReceive+0x5e>
        __asm volatile
 8000b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b88:	f383 8811 	msr	BASEPRI, r3
 8000b8c:	f3bf 8f6f 	isb	sy
 8000b90:	f3bf 8f4f 	dsb	sy
 8000b94:	61fb      	str	r3, [r7, #28]
    }
 8000b96:	bf00      	nop
 8000b98:	e7fe      	b.n	8000b98 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000b9a:	f000 ffb5 	bl	8001b08 <xTaskGetSchedulerState>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d102      	bne.n	8000baa <xQueueReceive+0x6e>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d101      	bne.n	8000bae <xQueueReceive+0x72>
 8000baa:	2301      	movs	r3, #1
 8000bac:	e000      	b.n	8000bb0 <xQueueReceive+0x74>
 8000bae:	2300      	movs	r3, #0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d10a      	bne.n	8000bca <xQueueReceive+0x8e>
        __asm volatile
 8000bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bb8:	f383 8811 	msr	BASEPRI, r3
 8000bbc:	f3bf 8f6f 	isb	sy
 8000bc0:	f3bf 8f4f 	dsb	sy
 8000bc4:	61bb      	str	r3, [r7, #24]
    }
 8000bc6:	bf00      	nop
 8000bc8:	e7fe      	b.n	8000bc8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000bca:	f001 fd73 	bl	80026b4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d024      	beq.n	8000c24 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000bda:	68b9      	ldr	r1, [r7, #8]
 8000bdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000bde:	f000 f91d 	bl	8000e1c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be4:	4618      	mov	r0, r3
 8000be6:	f003 fd91 	bl	800470c <SEGGER_SYSVIEW_ShrinkId>
 8000bea:	4604      	mov	r4, r0
 8000bec:	2000      	movs	r0, #0
 8000bee:	f003 fd8d 	bl	800470c <SEGGER_SYSVIEW_ShrinkId>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	9100      	str	r1, [sp, #0]
 8000bfa:	4621      	mov	r1, r4
 8000bfc:	205c      	movs	r0, #92	; 0x5c
 8000bfe:	f003 f86f 	bl	8003ce0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c04:	1e5a      	subs	r2, r3, #1
 8000c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c08:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c0c:	691b      	ldr	r3, [r3, #16]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d004      	beq.n	8000c1c <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c14:	3310      	adds	r3, #16
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 fddc 	bl	80017d4 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000c1c:	f001 fd7a 	bl	8002714 <vPortExitCritical>
                return pdPASS;
 8000c20:	2301      	movs	r3, #1
 8000c22:	e08a      	b.n	8000d3a <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d113      	bne.n	8000c52 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000c2a:	f001 fd73 	bl	8002714 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c30:	4618      	mov	r0, r3
 8000c32:	f003 fd6b 	bl	800470c <SEGGER_SYSVIEW_ShrinkId>
 8000c36:	4604      	mov	r4, r0
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f003 fd67 	bl	800470c <SEGGER_SYSVIEW_ShrinkId>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2101      	movs	r1, #1
 8000c44:	9100      	str	r1, [sp, #0]
 8000c46:	4621      	mov	r1, r4
 8000c48:	205c      	movs	r0, #92	; 0x5c
 8000c4a:	f003 f849 	bl	8003ce0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e073      	b.n	8000d3a <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d106      	bne.n	8000c66 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 fe1f 	bl	80018a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000c62:	2301      	movs	r3, #1
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000c66:	f001 fd55 	bl	8002714 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000c6a:	f000 fb9b 	bl	80013a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000c6e:	f001 fd21 	bl	80026b4 <vPortEnterCritical>
 8000c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c78:	b25b      	sxtb	r3, r3
 8000c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c7e:	d103      	bne.n	8000c88 <xQueueReceive+0x14c>
 8000c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c8e:	b25b      	sxtb	r3, r3
 8000c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c94:	d103      	bne.n	8000c9e <xQueueReceive+0x162>
 8000c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000c9e:	f001 fd39 	bl	8002714 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ca2:	1d3a      	adds	r2, r7, #4
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 fe0e 	bl	80018cc <xTaskCheckForTimeOut>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d124      	bne.n	8000d00 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000cb8:	f000 f928 	bl	8000f0c <prvIsQueueEmpty>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d018      	beq.n	8000cf4 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc4:	3324      	adds	r3, #36	; 0x24
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 fd30 	bl	8001730 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000cd2:	f000 f8c9 	bl	8000e68 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000cd6:	f000 fb73 	bl	80013c0 <xTaskResumeAll>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	f47f af74 	bne.w	8000bca <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <xQueueReceive+0x208>)
 8000ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	f3bf 8f4f 	dsb	sy
 8000cee:	f3bf 8f6f 	isb	sy
 8000cf2:	e76a      	b.n	8000bca <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000cf6:	f000 f8b7 	bl	8000e68 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000cfa:	f000 fb61 	bl	80013c0 <xTaskResumeAll>
 8000cfe:	e764      	b.n	8000bca <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d02:	f000 f8b1 	bl	8000e68 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000d06:	f000 fb5b 	bl	80013c0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d0c:	f000 f8fe 	bl	8000f0c <prvIsQueueEmpty>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f43f af59 	beq.w	8000bca <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f003 fcf6 	bl	800470c <SEGGER_SYSVIEW_ShrinkId>
 8000d20:	4604      	mov	r4, r0
 8000d22:	2000      	movs	r0, #0
 8000d24:	f003 fcf2 	bl	800470c <SEGGER_SYSVIEW_ShrinkId>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	9100      	str	r1, [sp, #0]
 8000d30:	4621      	mov	r1, r4
 8000d32:	205c      	movs	r0, #92	; 0x5c
 8000d34:	f002 ffd4 	bl	8003ce0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000d38:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3734      	adds	r7, #52	; 0x34
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd90      	pop	{r4, r7, pc}
 8000d42:	bf00      	nop
 8000d44:	e000ed04 	.word	0xe000ed04

08000d48 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d5c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d10d      	bne.n	8000d82 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d14d      	bne.n	8000e0a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 fee6 	bl	8001b44 <xTaskPriorityDisinherit>
 8000d78:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	e043      	b.n	8000e0a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d119      	bne.n	8000dbc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	6858      	ldr	r0, [r3, #4]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	461a      	mov	r2, r3
 8000d92:	68b9      	ldr	r1, [r7, #8]
 8000d94:	f003 fe48 	bl	8004a28 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	441a      	add	r2, r3
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d32b      	bcc.n	8000e0a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	e026      	b.n	8000e0a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	68d8      	ldr	r0, [r3, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	68b9      	ldr	r1, [r7, #8]
 8000dc8:	f003 fe2e 	bl	8004a28 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	425b      	negs	r3, r3
 8000dd6:	441a      	add	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d207      	bcs.n	8000df8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	425b      	negs	r3, r3
 8000df2:	441a      	add	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d105      	bne.n	8000e0a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d002      	beq.n	8000e0a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	1c5a      	adds	r2, r3, #1
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000e12:	697b      	ldr	r3, [r7, #20]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d018      	beq.n	8000e60 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68da      	ldr	r2, [r3, #12]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	441a      	add	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d303      	bcc.n	8000e50 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68d9      	ldr	r1, [r3, #12]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	461a      	mov	r2, r3
 8000e5a:	6838      	ldr	r0, [r7, #0]
 8000e5c:	f003 fde4 	bl	8004a28 <memcpy>
    }
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000e70:	f001 fc20 	bl	80026b4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e7a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000e7c:	e011      	b.n	8000ea2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d012      	beq.n	8000eac <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3324      	adds	r3, #36	; 0x24
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fca2 	bl	80017d4 <xTaskRemoveFromEventList>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000e96:	f000 fd7f 	bl	8001998 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	dce9      	bgt.n	8000e7e <prvUnlockQueue+0x16>
 8000eaa:	e000      	b.n	8000eae <prvUnlockQueue+0x46>
                        break;
 8000eac:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	22ff      	movs	r2, #255	; 0xff
 8000eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000eb6:	f001 fc2d 	bl	8002714 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000eba:	f001 fbfb 	bl	80026b4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ec4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000ec6:	e011      	b.n	8000eec <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	691b      	ldr	r3, [r3, #16]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d012      	beq.n	8000ef6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3310      	adds	r3, #16
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 fc7d 	bl	80017d4 <xTaskRemoveFromEventList>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000ee0:	f000 fd5a 	bl	8001998 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000ee4:	7bbb      	ldrb	r3, [r7, #14]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000eec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	dce9      	bgt.n	8000ec8 <prvUnlockQueue+0x60>
 8000ef4:	e000      	b.n	8000ef8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000ef6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	22ff      	movs	r2, #255	; 0xff
 8000efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000f00:	f001 fc08 	bl	8002714 <vPortExitCritical>
}
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000f14:	f001 fbce 	bl	80026b4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000f20:	2301      	movs	r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	e001      	b.n	8000f2a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000f2a:	f001 fbf3 	bl	8002714 <vPortExitCritical>

    return xReturn;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000f40:	f001 fbb8 	bl	80026b4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d102      	bne.n	8000f56 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000f50:	2301      	movs	r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	e001      	b.n	8000f5a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000f5a:	f001 fbdb 	bl	8002714 <vPortExitCritical>

    return xReturn;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	e01e      	b.n	8000fb6 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8000f78:	4a13      	ldr	r2, [pc, #76]	; (8000fc8 <vQueueAddToRegistry+0x60>)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d115      	bne.n	8000fb0 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8000f84:	4910      	ldr	r1, [pc, #64]	; (8000fc8 <vQueueAddToRegistry+0x60>)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <vQueueAddToRegistry+0x60>)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	4413      	add	r3, r2
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f003 fbb5 	bl	800470c <SEGGER_SYSVIEW_ShrinkId>
 8000fa2:	4601      	mov	r1, r0
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	2071      	movs	r0, #113	; 0x71
 8000faa:	f002 fdc9 	bl	8003b40 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8000fae:	e006      	b.n	8000fbe <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2b07      	cmp	r3, #7
 8000fba:	d9dd      	bls.n	8000f78 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000008c 	.word	0x2000008c

08000fcc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000fdc:	f001 fb6a 	bl	80026b4 <vPortEnterCritical>
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000fe6:	b25b      	sxtb	r3, r3
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fec:	d103      	bne.n	8000ff6 <vQueueWaitForMessageRestricted+0x2a>
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001002:	d103      	bne.n	800100c <vQueueWaitForMessageRestricted+0x40>
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800100c:	f001 fb82 	bl	8002714 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001014:	2b00      	cmp	r3, #0
 8001016:	d106      	bne.n	8001026 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3324      	adds	r3, #36	; 0x24
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	68b9      	ldr	r1, [r7, #8]
 8001020:	4618      	mov	r0, r3
 8001022:	f000 fba9 	bl	8001778 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001026:	6978      	ldr	r0, [r7, #20]
 8001028:	f7ff ff1e 	bl	8000e68 <prvUnlockQueue>
    }
 800102c:	bf00      	nop
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	; 0x30
 8001038:	af04      	add	r7, sp, #16
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	4613      	mov	r3, r2
 8001042:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4618      	mov	r0, r3
 800104a:	f001 fc5f 	bl	800290c <pvPortMalloc>
 800104e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00e      	beq.n	8001074 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001056:	2058      	movs	r0, #88	; 0x58
 8001058:	f001 fc58 	bl	800290c <pvPortMalloc>
 800105c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	631a      	str	r2, [r3, #48]	; 0x30
 800106a:	e005      	b.n	8001078 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800106c:	6978      	ldr	r0, [r7, #20]
 800106e:	f001 fd2d 	bl	8002acc <vPortFree>
 8001072:	e001      	b.n	8001078 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d013      	beq.n	80010a6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800107e:	88fa      	ldrh	r2, [r7, #6]
 8001080:	2300      	movs	r3, #0
 8001082:	9303      	str	r3, [sp, #12]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	9302      	str	r3, [sp, #8]
 8001088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	68b9      	ldr	r1, [r7, #8]
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f000 f80e 	bl	80010b6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800109a:	69f8      	ldr	r0, [r7, #28]
 800109c:	f000 f8a2 	bl	80011e4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80010a0:	2301      	movs	r3, #1
 80010a2:	61bb      	str	r3, [r7, #24]
 80010a4:	e002      	b.n	80010ac <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80010ac:	69bb      	ldr	r3, [r7, #24]
    }
 80010ae:	4618      	mov	r0, r3
 80010b0:	3720      	adds	r7, #32
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b088      	sub	sp, #32
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80010c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	461a      	mov	r2, r3
 80010ce:	21a5      	movs	r1, #165	; 0xa5
 80010d0:	f003 fcb8 	bl	8004a44 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80010d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010de:	3b01      	subs	r3, #1
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	f023 0307 	bic.w	r3, r3, #7
 80010ec:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d00a      	beq.n	800110e <prvInitialiseNewTask+0x58>
        __asm volatile
 80010f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010fc:	f383 8811 	msr	BASEPRI, r3
 8001100:	f3bf 8f6f 	isb	sy
 8001104:	f3bf 8f4f 	dsb	sy
 8001108:	617b      	str	r3, [r7, #20]
    }
 800110a:	bf00      	nop
 800110c:	e7fe      	b.n	800110c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d01f      	beq.n	8001154 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	e012      	b.n	8001140 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	4413      	add	r3, r2
 8001120:	7819      	ldrb	r1, [r3, #0]
 8001122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	4413      	add	r3, r2
 8001128:	3334      	adds	r3, #52	; 0x34
 800112a:	460a      	mov	r2, r1
 800112c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	4413      	add	r3, r2
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d006      	beq.n	8001148 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3301      	adds	r3, #1
 800113e:	61fb      	str	r3, [r7, #28]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	2b09      	cmp	r3, #9
 8001144:	d9e9      	bls.n	800111a <prvInitialiseNewTask+0x64>
 8001146:	e000      	b.n	800114a <prvInitialiseNewTask+0x94>
            {
                break;
 8001148:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800114a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800114c:	2200      	movs	r2, #0
 800114e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001152:	e003      	b.n	800115c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800115c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115e:	2b04      	cmp	r3, #4
 8001160:	d901      	bls.n	8001166 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001162:	2304      	movs	r3, #4
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800116a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800116c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800116e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001170:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001174:	2200      	movs	r2, #0
 8001176:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117a:	3304      	adds	r3, #4
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f99a 	bl	80004b6 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001184:	3318      	adds	r3, #24
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f995 	bl	80004b6 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800118c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800118e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001190:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001194:	f1c3 0205 	rsb	r2, r3, #5
 8001198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800119a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800119c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800119e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80011a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a4:	3350      	adds	r3, #80	; 0x50
 80011a6:	2204      	movs	r2, #4
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f003 fc4a 	bl	8004a44 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80011b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b2:	3354      	adds	r3, #84	; 0x54
 80011b4:	2201      	movs	r2, #1
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f003 fc43 	bl	8004a44 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	68f9      	ldr	r1, [r7, #12]
 80011c2:	69b8      	ldr	r0, [r7, #24]
 80011c4:	f001 f8c8 	bl	8002358 <pxPortInitialiseStack>
 80011c8:	4602      	mov	r2, r0
 80011ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011cc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80011ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80011d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011d8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80011da:	bf00      	nop
 80011dc:	3720      	adds	r7, #32
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80011e4:	b5b0      	push	{r4, r5, r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80011ec:	f001 fa62 	bl	80026b4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80011f0:	4b35      	ldr	r3, [pc, #212]	; (80012c8 <prvAddNewTaskToReadyList+0xe4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	4a34      	ldr	r2, [pc, #208]	; (80012c8 <prvAddNewTaskToReadyList+0xe4>)
 80011f8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80011fa:	4b34      	ldr	r3, [pc, #208]	; (80012cc <prvAddNewTaskToReadyList+0xe8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d109      	bne.n	8001216 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001202:	4a32      	ldr	r2, [pc, #200]	; (80012cc <prvAddNewTaskToReadyList+0xe8>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001208:	4b2f      	ldr	r3, [pc, #188]	; (80012c8 <prvAddNewTaskToReadyList+0xe4>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d110      	bne.n	8001232 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001210:	f000 fbe0 	bl	80019d4 <prvInitialiseTaskLists>
 8001214:	e00d      	b.n	8001232 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001216:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <prvAddNewTaskToReadyList+0xec>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d109      	bne.n	8001232 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <prvAddNewTaskToReadyList+0xe8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001228:	429a      	cmp	r2, r3
 800122a:	d802      	bhi.n	8001232 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800122c:	4a27      	ldr	r2, [pc, #156]	; (80012cc <prvAddNewTaskToReadyList+0xe8>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001232:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <prvAddNewTaskToReadyList+0xf0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	4a26      	ldr	r2, [pc, #152]	; (80012d4 <prvAddNewTaskToReadyList+0xf0>)
 800123a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800123c:	4b25      	ldr	r3, [pc, #148]	; (80012d4 <prvAddNewTaskToReadyList+0xf0>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d016      	beq.n	8001278 <prvAddNewTaskToReadyList+0x94>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4618      	mov	r0, r3
 800124e:	f003 f937 	bl	80044c0 <SEGGER_SYSVIEW_OnTaskCreate>
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	461d      	mov	r5, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	461c      	mov	r4, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	1ae3      	subs	r3, r4, r3
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	462b      	mov	r3, r5
 8001274:	f001 fdf8 	bl	8002e68 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4618      	mov	r0, r3
 800127c:	f003 f9a4 	bl	80045c8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001284:	2201      	movs	r2, #1
 8001286:	409a      	lsls	r2, r3
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <prvAddNewTaskToReadyList+0xf4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4313      	orrs	r3, r2
 800128e:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <prvAddNewTaskToReadyList+0xf4>)
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001296:	4613      	mov	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <prvAddNewTaskToReadyList+0xf8>)
 80012a0:	441a      	add	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3304      	adds	r3, #4
 80012a6:	4619      	mov	r1, r3
 80012a8:	4610      	mov	r0, r2
 80012aa:	f7ff f911 	bl	80004d0 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80012ae:	f001 fa31 	bl	8002714 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80012b2:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <prvAddNewTaskToReadyList+0xec>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80012ba:	4b04      	ldr	r3, [pc, #16]	; (80012cc <prvAddNewTaskToReadyList+0xe8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bdb0      	pop	{r4, r5, r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200001a4 	.word	0x200001a4
 80012cc:	200000cc 	.word	0x200000cc
 80012d0:	200001b0 	.word	0x200001b0
 80012d4:	200001c0 	.word	0x200001c0
 80012d8:	200001ac 	.word	0x200001ac
 80012dc:	200000d0 	.word	0x200000d0

080012e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80012e6:	4b27      	ldr	r3, [pc, #156]	; (8001384 <vTaskStartScheduler+0xa4>)
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	2300      	movs	r3, #0
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2300      	movs	r3, #0
 80012f0:	2282      	movs	r2, #130	; 0x82
 80012f2:	4925      	ldr	r1, [pc, #148]	; (8001388 <vTaskStartScheduler+0xa8>)
 80012f4:	4825      	ldr	r0, [pc, #148]	; (800138c <vTaskStartScheduler+0xac>)
 80012f6:	f7ff fe9d 	bl	8001034 <xTaskCreate>
 80012fa:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d102      	bne.n	8001308 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001302:	f000 fd17 	bl	8001d34 <xTimerCreateTimerTask>
 8001306:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d124      	bne.n	8001358 <vTaskStartScheduler+0x78>
        __asm volatile
 800130e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001312:	f383 8811 	msr	BASEPRI, r3
 8001316:	f3bf 8f6f 	isb	sy
 800131a:	f3bf 8f4f 	dsb	sy
 800131e:	60bb      	str	r3, [r7, #8]
    }
 8001320:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001322:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <vTaskStartScheduler+0xb0>)
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <vTaskStartScheduler+0xb4>)
 800132c:	2201      	movs	r2, #1
 800132e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <vTaskStartScheduler+0xb8>)
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <vTaskStartScheduler+0xbc>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <vTaskStartScheduler+0xa4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d102      	bne.n	8001348 <vTaskStartScheduler+0x68>
 8001342:	f003 f8a1 	bl	8004488 <SEGGER_SYSVIEW_OnIdle>
 8001346:	e004      	b.n	8001352 <vTaskStartScheduler+0x72>
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <vTaskStartScheduler+0xbc>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f003 f8f9 	bl	8004544 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001352:	f001 f88f 	bl	8002474 <xPortStartScheduler>
 8001356:	e00e      	b.n	8001376 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135e:	d10a      	bne.n	8001376 <vTaskStartScheduler+0x96>
        __asm volatile
 8001360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001364:	f383 8811 	msr	BASEPRI, r3
 8001368:	f3bf 8f6f 	isb	sy
 800136c:	f3bf 8f4f 	dsb	sy
 8001370:	607b      	str	r3, [r7, #4]
    }
 8001372:	bf00      	nop
 8001374:	e7fe      	b.n	8001374 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <vTaskStartScheduler+0xc0>)
 8001378:	681b      	ldr	r3, [r3, #0]
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200001c8 	.word	0x200001c8
 8001388:	080054a8 	.word	0x080054a8
 800138c:	080019b1 	.word	0x080019b1
 8001390:	200001c4 	.word	0x200001c4
 8001394:	200001b0 	.word	0x200001b0
 8001398:	200001a8 	.word	0x200001a8
 800139c:	200000cc 	.word	0x200000cc
 80013a0:	20000004 	.word	0x20000004

080013a4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <vTaskSuspendAll+0x18>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	4a03      	ldr	r2, [pc, #12]	; (80013bc <vTaskSuspendAll+0x18>)
 80013b0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	200001cc 	.word	0x200001cc

080013c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80013ce:	4b3d      	ldr	r3, [pc, #244]	; (80014c4 <xTaskResumeAll+0x104>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10a      	bne.n	80013ec <xTaskResumeAll+0x2c>
        __asm volatile
 80013d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013da:	f383 8811 	msr	BASEPRI, r3
 80013de:	f3bf 8f6f 	isb	sy
 80013e2:	f3bf 8f4f 	dsb	sy
 80013e6:	603b      	str	r3, [r7, #0]
    }
 80013e8:	bf00      	nop
 80013ea:	e7fe      	b.n	80013ea <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80013ec:	f001 f962 	bl	80026b4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80013f0:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <xTaskResumeAll+0x104>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	4a33      	ldr	r2, [pc, #204]	; (80014c4 <xTaskResumeAll+0x104>)
 80013f8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80013fa:	4b32      	ldr	r3, [pc, #200]	; (80014c4 <xTaskResumeAll+0x104>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d159      	bne.n	80014b6 <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001402:	4b31      	ldr	r3, [pc, #196]	; (80014c8 <xTaskResumeAll+0x108>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d055      	beq.n	80014b6 <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800140a:	e032      	b.n	8001472 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800140c:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <xTaskResumeAll+0x10c>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	3318      	adds	r3, #24
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f8b6 	bl	800058a <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	3304      	adds	r3, #4
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f8b1 	bl	800058a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4618      	mov	r0, r3
 800142c:	f003 f8cc 	bl	80045c8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001434:	2201      	movs	r2, #1
 8001436:	409a      	lsls	r2, r3
 8001438:	4b25      	ldr	r3, [pc, #148]	; (80014d0 <xTaskResumeAll+0x110>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4313      	orrs	r3, r2
 800143e:	4a24      	ldr	r2, [pc, #144]	; (80014d0 <xTaskResumeAll+0x110>)
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <xTaskResumeAll+0x114>)
 8001450:	441a      	add	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	3304      	adds	r3, #4
 8001456:	4619      	mov	r1, r3
 8001458:	4610      	mov	r0, r2
 800145a:	f7ff f839 	bl	80004d0 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <xTaskResumeAll+0x118>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	429a      	cmp	r2, r3
 800146a:	d302      	bcc.n	8001472 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <xTaskResumeAll+0x11c>)
 800146e:	2201      	movs	r2, #1
 8001470:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <xTaskResumeAll+0x10c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1c8      	bne.n	800140c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001480:	f000 fb26 	bl	8001ad0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <xTaskResumeAll+0x120>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d010      	beq.n	80014b2 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001490:	f000 f84a 	bl	8001528 <xTaskIncrementTick>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d002      	beq.n	80014a0 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <xTaskResumeAll+0x11c>)
 800149c:	2201      	movs	r2, #1
 800149e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f1      	bne.n	8001490 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <xTaskResumeAll+0x120>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80014b2:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <xTaskResumeAll+0x11c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80014b6:	f001 f92d 	bl	8002714 <vPortExitCritical>

    return xAlreadyYielded;
 80014ba:	687b      	ldr	r3, [r7, #4]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200001cc 	.word	0x200001cc
 80014c8:	200001a4 	.word	0x200001a4
 80014cc:	20000164 	.word	0x20000164
 80014d0:	200001ac 	.word	0x200001ac
 80014d4:	200000d0 	.word	0x200000d0
 80014d8:	200000cc 	.word	0x200000cc
 80014dc:	200001b8 	.word	0x200001b8
 80014e0:	200001b4 	.word	0x200001b4

080014e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <xTaskGetTickCount+0x1c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80014f0:	687b      	ldr	r3, [r7, #4]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	200001a8 	.word	0x200001a8

08001504 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800150a:	f001 f9bf 	bl	800288c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001512:	4b04      	ldr	r3, [pc, #16]	; (8001524 <xTaskGetTickCountFromISR+0x20>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001518:	683b      	ldr	r3, [r7, #0]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200001a8 	.word	0x200001a8

08001528 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <xTaskIncrementTick+0x110>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d173      	bne.n	8001622 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800153a:	4b40      	ldr	r3, [pc, #256]	; (800163c <xTaskIncrementTick+0x114>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	3301      	adds	r3, #1
 8001540:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001542:	4a3e      	ldr	r2, [pc, #248]	; (800163c <xTaskIncrementTick+0x114>)
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d120      	bne.n	8001590 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800154e:	4b3c      	ldr	r3, [pc, #240]	; (8001640 <xTaskIncrementTick+0x118>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00a      	beq.n	800156e <xTaskIncrementTick+0x46>
        __asm volatile
 8001558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800155c:	f383 8811 	msr	BASEPRI, r3
 8001560:	f3bf 8f6f 	isb	sy
 8001564:	f3bf 8f4f 	dsb	sy
 8001568:	603b      	str	r3, [r7, #0]
    }
 800156a:	bf00      	nop
 800156c:	e7fe      	b.n	800156c <xTaskIncrementTick+0x44>
 800156e:	4b34      	ldr	r3, [pc, #208]	; (8001640 <xTaskIncrementTick+0x118>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	4b33      	ldr	r3, [pc, #204]	; (8001644 <xTaskIncrementTick+0x11c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a31      	ldr	r2, [pc, #196]	; (8001640 <xTaskIncrementTick+0x118>)
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4a31      	ldr	r2, [pc, #196]	; (8001644 <xTaskIncrementTick+0x11c>)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	4b31      	ldr	r3, [pc, #196]	; (8001648 <xTaskIncrementTick+0x120>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	3301      	adds	r3, #1
 8001588:	4a2f      	ldr	r2, [pc, #188]	; (8001648 <xTaskIncrementTick+0x120>)
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	f000 faa0 	bl	8001ad0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001590:	4b2e      	ldr	r3, [pc, #184]	; (800164c <xTaskIncrementTick+0x124>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	429a      	cmp	r2, r3
 8001598:	d348      	bcc.n	800162c <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800159a:	4b29      	ldr	r3, [pc, #164]	; (8001640 <xTaskIncrementTick+0x118>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d104      	bne.n	80015ae <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80015a4:	4b29      	ldr	r3, [pc, #164]	; (800164c <xTaskIncrementTick+0x124>)
 80015a6:	f04f 32ff 	mov.w	r2, #4294967295
 80015aa:	601a      	str	r2, [r3, #0]
                    break;
 80015ac:	e03e      	b.n	800162c <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015ae:	4b24      	ldr	r3, [pc, #144]	; (8001640 <xTaskIncrementTick+0x118>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d203      	bcs.n	80015ce <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80015c6:	4a21      	ldr	r2, [pc, #132]	; (800164c <xTaskIncrementTick+0x124>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80015cc:	e02e      	b.n	800162c <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	3304      	adds	r3, #4
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ffd9 	bl	800058a <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d004      	beq.n	80015ea <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	3318      	adds	r3, #24
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ffd0 	bl	800058a <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f002 ffeb 	bl	80045c8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f6:	2201      	movs	r2, #1
 80015f8:	409a      	lsls	r2, r3
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <xTaskIncrementTick+0x128>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4313      	orrs	r3, r2
 8001600:	4a13      	ldr	r2, [pc, #76]	; (8001650 <xTaskIncrementTick+0x128>)
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4a10      	ldr	r2, [pc, #64]	; (8001654 <xTaskIncrementTick+0x12c>)
 8001612:	441a      	add	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	3304      	adds	r3, #4
 8001618:	4619      	mov	r1, r3
 800161a:	4610      	mov	r0, r2
 800161c:	f7fe ff58 	bl	80004d0 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001620:	e7bb      	b.n	800159a <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <xTaskIncrementTick+0x130>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3301      	adds	r3, #1
 8001628:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <xTaskIncrementTick+0x130>)
 800162a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800162c:	697b      	ldr	r3, [r7, #20]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200001cc 	.word	0x200001cc
 800163c:	200001a8 	.word	0x200001a8
 8001640:	2000015c 	.word	0x2000015c
 8001644:	20000160 	.word	0x20000160
 8001648:	200001bc 	.word	0x200001bc
 800164c:	200001c4 	.word	0x200001c4
 8001650:	200001ac 	.word	0x200001ac
 8001654:	200000d0 	.word	0x200000d0
 8001658:	200001b4 	.word	0x200001b4

0800165c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001662:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <vTaskSwitchContext+0xbc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800166a:	4b2c      	ldr	r3, [pc, #176]	; (800171c <vTaskSwitchContext+0xc0>)
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001670:	e04d      	b.n	800170e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8001672:	4b2a      	ldr	r3, [pc, #168]	; (800171c <vTaskSwitchContext+0xc0>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001678:	4b29      	ldr	r3, [pc, #164]	; (8001720 <vTaskSwitchContext+0xc4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	fab3 f383 	clz	r3, r3
 8001684:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001686:	7afb      	ldrb	r3, [r7, #11]
 8001688:	f1c3 031f 	rsb	r3, r3, #31
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	4925      	ldr	r1, [pc, #148]	; (8001724 <vTaskSwitchContext+0xc8>)
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10a      	bne.n	80016b8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80016a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016a6:	f383 8811 	msr	BASEPRI, r3
 80016aa:	f3bf 8f6f 	isb	sy
 80016ae:	f3bf 8f4f 	dsb	sy
 80016b2:	607b      	str	r3, [r7, #4]
    }
 80016b4:	bf00      	nop
 80016b6:	e7fe      	b.n	80016b6 <vTaskSwitchContext+0x5a>
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4a18      	ldr	r2, [pc, #96]	; (8001724 <vTaskSwitchContext+0xc8>)
 80016c4:	4413      	add	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	3308      	adds	r3, #8
 80016da:	429a      	cmp	r2, r3
 80016dc:	d104      	bne.n	80016e8 <vTaskSwitchContext+0x8c>
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <vTaskSwitchContext+0xcc>)
 80016f0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <vTaskSwitchContext+0xcc>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <vTaskSwitchContext+0xd0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d102      	bne.n	8001704 <vTaskSwitchContext+0xa8>
 80016fe:	f002 fec3 	bl	8004488 <SEGGER_SYSVIEW_OnIdle>
}
 8001702:	e004      	b.n	800170e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <vTaskSwitchContext+0xcc>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f002 ff1b 	bl	8004544 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200001cc 	.word	0x200001cc
 800171c:	200001b8 	.word	0x200001b8
 8001720:	200001ac 	.word	0x200001ac
 8001724:	200000d0 	.word	0x200000d0
 8001728:	200000cc 	.word	0x200000cc
 800172c:	200001c8 	.word	0x200001c8

08001730 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d10a      	bne.n	8001756 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001744:	f383 8811 	msr	BASEPRI, r3
 8001748:	f3bf 8f6f 	isb	sy
 800174c:	f3bf 8f4f 	dsb	sy
 8001750:	60fb      	str	r3, [r7, #12]
    }
 8001752:	bf00      	nop
 8001754:	e7fe      	b.n	8001754 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <vTaskPlaceOnEventList+0x44>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	3318      	adds	r3, #24
 800175c:	4619      	mov	r1, r3
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7fe feda 	bl	8000518 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001764:	2101      	movs	r1, #1
 8001766:	6838      	ldr	r0, [r7, #0]
 8001768:	f000 fa6c 	bl	8001c44 <prvAddCurrentTaskToDelayedList>
}
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200000cc 	.word	0x200000cc

08001778 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10a      	bne.n	80017a0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800178a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800178e:	f383 8811 	msr	BASEPRI, r3
 8001792:	f3bf 8f6f 	isb	sy
 8001796:	f3bf 8f4f 	dsb	sy
 800179a:	617b      	str	r3, [r7, #20]
    }
 800179c:	bf00      	nop
 800179e:	e7fe      	b.n	800179e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <vTaskPlaceOnEventListRestricted+0x58>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	3318      	adds	r3, #24
 80017a6:	4619      	mov	r1, r3
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f7fe fe91 	bl	80004d0 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80017b4:	f04f 33ff 	mov.w	r3, #4294967295
 80017b8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80017ba:	2024      	movs	r0, #36	; 0x24
 80017bc:	f002 f966 	bl	8003a8c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	68b8      	ldr	r0, [r7, #8]
 80017c4:	f000 fa3e 	bl	8001c44 <prvAddCurrentTaskToDelayedList>
    }
 80017c8:	bf00      	nop
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	200000cc 	.word	0x200000cc

080017d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10a      	bne.n	8001800 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80017ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ee:	f383 8811 	msr	BASEPRI, r3
 80017f2:	f3bf 8f6f 	isb	sy
 80017f6:	f3bf 8f4f 	dsb	sy
 80017fa:	60fb      	str	r3, [r7, #12]
    }
 80017fc:	bf00      	nop
 80017fe:	e7fe      	b.n	80017fe <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	3318      	adds	r3, #24
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fec0 	bl	800058a <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800180a:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <xTaskRemoveFromEventList+0xb4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d120      	bne.n	8001854 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	3304      	adds	r3, #4
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe feb7 	bl	800058a <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4618      	mov	r0, r3
 8001820:	f002 fed2 	bl	80045c8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	2201      	movs	r2, #1
 800182a:	409a      	lsls	r2, r3
 800182c:	4b17      	ldr	r3, [pc, #92]	; (800188c <xTaskRemoveFromEventList+0xb8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4313      	orrs	r3, r2
 8001832:	4a16      	ldr	r2, [pc, #88]	; (800188c <xTaskRemoveFromEventList+0xb8>)
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4a13      	ldr	r2, [pc, #76]	; (8001890 <xTaskRemoveFromEventList+0xbc>)
 8001844:	441a      	add	r2, r3
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	3304      	adds	r3, #4
 800184a:	4619      	mov	r1, r3
 800184c:	4610      	mov	r0, r2
 800184e:	f7fe fe3f 	bl	80004d0 <vListInsertEnd>
 8001852:	e005      	b.n	8001860 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	3318      	adds	r3, #24
 8001858:	4619      	mov	r1, r3
 800185a:	480e      	ldr	r0, [pc, #56]	; (8001894 <xTaskRemoveFromEventList+0xc0>)
 800185c:	f7fe fe38 	bl	80004d0 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <xTaskRemoveFromEventList+0xc4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186a:	429a      	cmp	r2, r3
 800186c:	d905      	bls.n	800187a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800186e:	2301      	movs	r3, #1
 8001870:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <xTaskRemoveFromEventList+0xc8>)
 8001874:	2201      	movs	r2, #1
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	e001      	b.n	800187e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800187e:	697b      	ldr	r3, [r7, #20]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200001cc 	.word	0x200001cc
 800188c:	200001ac 	.word	0x200001ac
 8001890:	200000d0 	.word	0x200000d0
 8001894:	20000164 	.word	0x20000164
 8001898:	200000cc 	.word	0x200000cc
 800189c:	200001b8 	.word	0x200001b8

080018a0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <vTaskInternalSetTimeOutState+0x24>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <vTaskInternalSetTimeOutState+0x28>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	605a      	str	r2, [r3, #4]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	200001bc 	.word	0x200001bc
 80018c8:	200001a8 	.word	0x200001a8

080018cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10a      	bne.n	80018f2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80018dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018e0:	f383 8811 	msr	BASEPRI, r3
 80018e4:	f3bf 8f6f 	isb	sy
 80018e8:	f3bf 8f4f 	dsb	sy
 80018ec:	613b      	str	r3, [r7, #16]
    }
 80018ee:	bf00      	nop
 80018f0:	e7fe      	b.n	80018f0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10a      	bne.n	800190e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80018f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018fc:	f383 8811 	msr	BASEPRI, r3
 8001900:	f3bf 8f6f 	isb	sy
 8001904:	f3bf 8f4f 	dsb	sy
 8001908:	60fb      	str	r3, [r7, #12]
    }
 800190a:	bf00      	nop
 800190c:	e7fe      	b.n	800190c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800190e:	f000 fed1 	bl	80026b4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001912:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <xTaskCheckForTimeOut+0xc4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800192a:	d102      	bne.n	8001932 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
 8001930:	e026      	b.n	8001980 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	4b17      	ldr	r3, [pc, #92]	; (8001994 <xTaskCheckForTimeOut+0xc8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d00a      	beq.n	8001954 <xTaskCheckForTimeOut+0x88>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	429a      	cmp	r2, r3
 8001946:	d305      	bcc.n	8001954 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001948:	2301      	movs	r3, #1
 800194a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	e015      	b.n	8001980 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	429a      	cmp	r2, r3
 800195c:	d20b      	bcs.n	8001976 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	1ad2      	subs	r2, r2, r3
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ff98 	bl	80018a0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
 8001974:	e004      	b.n	8001980 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800197c:	2301      	movs	r3, #1
 800197e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001980:	f000 fec8 	bl	8002714 <vPortExitCritical>

    return xReturn;
 8001984:	69fb      	ldr	r3, [r7, #28]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200001a8 	.word	0x200001a8
 8001994:	200001bc 	.word	0x200001bc

08001998 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <vTaskMissedYield+0x14>)
 800199e:	2201      	movs	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	200001b8 	.word	0x200001b8

080019b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80019b8:	f000 f84c 	bl	8001a54 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <prvIdleTask+0x20>)
 80019be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	f3bf 8f4f 	dsb	sy
 80019c8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80019cc:	e7f4      	b.n	80019b8 <prvIdleTask+0x8>
 80019ce:	bf00      	nop
 80019d0:	e000ed04 	.word	0xe000ed04

080019d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	e00c      	b.n	80019fa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <prvInitialiseTaskLists+0x60>)
 80019ec:	4413      	add	r3, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fd41 	bl	8000476 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3301      	adds	r3, #1
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d9ef      	bls.n	80019e0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001a00:	480d      	ldr	r0, [pc, #52]	; (8001a38 <prvInitialiseTaskLists+0x64>)
 8001a02:	f7fe fd38 	bl	8000476 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001a06:	480d      	ldr	r0, [pc, #52]	; (8001a3c <prvInitialiseTaskLists+0x68>)
 8001a08:	f7fe fd35 	bl	8000476 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001a0c:	480c      	ldr	r0, [pc, #48]	; (8001a40 <prvInitialiseTaskLists+0x6c>)
 8001a0e:	f7fe fd32 	bl	8000476 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001a12:	480c      	ldr	r0, [pc, #48]	; (8001a44 <prvInitialiseTaskLists+0x70>)
 8001a14:	f7fe fd2f 	bl	8000476 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001a18:	480b      	ldr	r0, [pc, #44]	; (8001a48 <prvInitialiseTaskLists+0x74>)
 8001a1a:	f7fe fd2c 	bl	8000476 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <prvInitialiseTaskLists+0x78>)
 8001a20:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <prvInitialiseTaskLists+0x64>)
 8001a22:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <prvInitialiseTaskLists+0x7c>)
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <prvInitialiseTaskLists+0x68>)
 8001a28:	601a      	str	r2, [r3, #0]
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200000d0 	.word	0x200000d0
 8001a38:	20000134 	.word	0x20000134
 8001a3c:	20000148 	.word	0x20000148
 8001a40:	20000164 	.word	0x20000164
 8001a44:	20000178 	.word	0x20000178
 8001a48:	20000190 	.word	0x20000190
 8001a4c:	2000015c 	.word	0x2000015c
 8001a50:	20000160 	.word	0x20000160

08001a54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a5a:	e019      	b.n	8001a90 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001a5c:	f000 fe2a 	bl	80026b4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a60:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <prvCheckTasksWaitingTermination+0x50>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fd8c 	bl	800058a <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <prvCheckTasksWaitingTermination+0x54>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <prvCheckTasksWaitingTermination+0x54>)
 8001a7a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <prvCheckTasksWaitingTermination+0x58>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <prvCheckTasksWaitingTermination+0x58>)
 8001a84:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001a86:	f000 fe45 	bl	8002714 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f810 	bl	8001ab0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <prvCheckTasksWaitingTermination+0x58>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1e1      	bne.n	8001a5c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000178 	.word	0x20000178
 8001aa8:	200001a4 	.word	0x200001a4
 8001aac:	2000018c 	.word	0x2000018c

08001ab0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	4618      	mov	r0, r3
 8001abe:	f001 f805 	bl	8002acc <vPortFree>
                vPortFree( pxTCB );
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f001 f802 	bl	8002acc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ad4:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <prvResetNextTaskUnblockTime+0x30>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d104      	bne.n	8001ae8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <prvResetNextTaskUnblockTime+0x34>)
 8001ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001ae6:	e005      	b.n	8001af4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <prvResetNextTaskUnblockTime+0x30>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <prvResetNextTaskUnblockTime+0x34>)
 8001af2:	6013      	str	r3, [r2, #0]
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	2000015c 	.word	0x2000015c
 8001b04:	200001c4 	.word	0x200001c4

08001b08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <xTaskGetSchedulerState+0x34>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d102      	bne.n	8001b1c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001b16:	2301      	movs	r3, #1
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	e008      	b.n	8001b2e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <xTaskGetSchedulerState+0x38>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001b24:	2302      	movs	r3, #2
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	e001      	b.n	8001b2e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001b2e:	687b      	ldr	r3, [r7, #4]
    }
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	200001b0 	.word	0x200001b0
 8001b40:	200001cc 	.word	0x200001cc

08001b44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d068      	beq.n	8001c2c <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001b5a:	4b37      	ldr	r3, [pc, #220]	; (8001c38 <xTaskPriorityDisinherit+0xf4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d00a      	beq.n	8001b7a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8001b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b68:	f383 8811 	msr	BASEPRI, r3
 8001b6c:	f3bf 8f6f 	isb	sy
 8001b70:	f3bf 8f4f 	dsb	sy
 8001b74:	60fb      	str	r3, [r7, #12]
    }
 8001b76:	bf00      	nop
 8001b78:	e7fe      	b.n	8001b78 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10a      	bne.n	8001b98 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8001b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b86:	f383 8811 	msr	BASEPRI, r3
 8001b8a:	f3bf 8f6f 	isb	sy
 8001b8e:	f3bf 8f4f 	dsb	sy
 8001b92:	60bb      	str	r3, [r7, #8]
    }
 8001b94:	bf00      	nop
 8001b96:	e7fe      	b.n	8001b96 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9c:	1e5a      	subs	r2, r3, #1
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d03e      	beq.n	8001c2c <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d13a      	bne.n	8001c2c <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fce5 	bl	800058a <uxListRemove>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10a      	bne.n	8001bdc <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	2201      	movs	r2, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43da      	mvns	r2, r3
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <xTaskPriorityDisinherit+0xf8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	4a18      	ldr	r2, [pc, #96]	; (8001c3c <xTaskPriorityDisinherit+0xf8>)
 8001bda:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4619      	mov	r1, r3
 8001be0:	204a      	movs	r0, #74	; 0x4a
 8001be2:	f001 ff71 	bl	8003ac8 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf2:	f1c3 0205 	rsb	r2, r3, #5
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	2201      	movs	r2, #1
 8001c00:	409a      	lsls	r2, r3
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <xTaskPriorityDisinherit+0xf8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	4a0c      	ldr	r2, [pc, #48]	; (8001c3c <xTaskPriorityDisinherit+0xf8>)
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4a09      	ldr	r2, [pc, #36]	; (8001c40 <xTaskPriorityDisinherit+0xfc>)
 8001c1a:	441a      	add	r2, r3
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	3304      	adds	r3, #4
 8001c20:	4619      	mov	r1, r3
 8001c22:	4610      	mov	r0, r2
 8001c24:	f7fe fc54 	bl	80004d0 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001c2c:	697b      	ldr	r3, [r7, #20]
    }
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200000cc 	.word	0x200000cc
 8001c3c:	200001ac 	.word	0x200001ac
 8001c40:	200000d0 	.word	0x200000d0

08001c44 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001c4e:	4b32      	ldr	r3, [pc, #200]	; (8001d18 <prvAddCurrentTaskToDelayedList+0xd4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c54:	4b31      	ldr	r3, [pc, #196]	; (8001d1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fc95 	bl	800058a <uxListRemove>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10b      	bne.n	8001c7e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001c66:	4b2d      	ldr	r3, [pc, #180]	; (8001d1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43da      	mvns	r2, r3
 8001c74:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	4a29      	ldr	r2, [pc, #164]	; (8001d20 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001c7c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c84:	d110      	bne.n	8001ca8 <prvAddCurrentTaskToDelayedList+0x64>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00d      	beq.n	8001ca8 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001c8c:	4b23      	ldr	r3, [pc, #140]	; (8001d1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	211b      	movs	r1, #27
 8001c92:	4618      	mov	r0, r3
 8001c94:	f002 fcda 	bl	800464c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c98:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4820      	ldr	r0, [pc, #128]	; (8001d24 <prvAddCurrentTaskToDelayedList+0xe0>)
 8001ca2:	f7fe fc15 	bl	80004d0 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001ca6:	e032      	b.n	8001d0e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d20f      	bcs.n	8001ce0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001cc0:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f002 fcc0 	bl	800464c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ccc:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4610      	mov	r0, r2
 8001cda:	f7fe fc1d 	bl	8000518 <vListInsert>
}
 8001cde:	e016      	b.n	8001d0e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8001ce0:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2104      	movs	r1, #4
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f002 fcb0 	bl	800464c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	f7fe fc0d 	bl	8000518 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <prvAddCurrentTaskToDelayedList+0xec>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d202      	bcs.n	8001d0e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8001d08:	4a09      	ldr	r2, [pc, #36]	; (8001d30 <prvAddCurrentTaskToDelayedList+0xec>)
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	6013      	str	r3, [r2, #0]
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200001a8 	.word	0x200001a8
 8001d1c:	200000cc 	.word	0x200000cc
 8001d20:	200001ac 	.word	0x200001ac
 8001d24:	20000190 	.word	0x20000190
 8001d28:	20000160 	.word	0x20000160
 8001d2c:	2000015c 	.word	0x2000015c
 8001d30:	200001c4 	.word	0x200001c4

08001d34 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001d3e:	f000 fad5 	bl	80022ec <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <xTimerCreateTimerTask+0x54>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00b      	beq.n	8001d62 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <xTimerCreateTimerTask+0x58>)
 8001d4c:	9301      	str	r3, [sp, #4]
 8001d4e:	2302      	movs	r3, #2
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2300      	movs	r3, #0
 8001d54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d58:	490d      	ldr	r1, [pc, #52]	; (8001d90 <xTimerCreateTimerTask+0x5c>)
 8001d5a:	480e      	ldr	r0, [pc, #56]	; (8001d94 <xTimerCreateTimerTask+0x60>)
 8001d5c:	f7ff f96a 	bl	8001034 <xTaskCreate>
 8001d60:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10a      	bne.n	8001d7e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8001d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d6c:	f383 8811 	msr	BASEPRI, r3
 8001d70:	f3bf 8f6f 	isb	sy
 8001d74:	f3bf 8f4f 	dsb	sy
 8001d78:	603b      	str	r3, [r7, #0]
    }
 8001d7a:	bf00      	nop
 8001d7c:	e7fe      	b.n	8001d7c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8001d7e:	687b      	ldr	r3, [r7, #4]
    }
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000200 	.word	0x20000200
 8001d8c:	20000204 	.word	0x20000204
 8001d90:	080054b0 	.word	0x080054b0
 8001d94:	08001ecd 	.word	0x08001ecd

08001d98 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	; 0x28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10a      	bne.n	8001dc6 <xTimerGenericCommand+0x2e>
        __asm volatile
 8001db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db4:	f383 8811 	msr	BASEPRI, r3
 8001db8:	f3bf 8f6f 	isb	sy
 8001dbc:	f3bf 8f4f 	dsb	sy
 8001dc0:	623b      	str	r3, [r7, #32]
    }
 8001dc2:	bf00      	nop
 8001dc4:	e7fe      	b.n	8001dc4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <xTimerGenericCommand+0x98>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d02a      	beq.n	8001e24 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b05      	cmp	r3, #5
 8001dde:	dc18      	bgt.n	8001e12 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001de0:	f7ff fe92 	bl	8001b08 <xTaskGetSchedulerState>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d109      	bne.n	8001dfe <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <xTimerGenericCommand+0x98>)
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	f107 0114 	add.w	r1, r7, #20
 8001df2:	2300      	movs	r3, #0
 8001df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001df6:	f7fe fcd5 	bl	80007a4 <xQueueGenericSend>
 8001dfa:	6278      	str	r0, [r7, #36]	; 0x24
 8001dfc:	e012      	b.n	8001e24 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <xTimerGenericCommand+0x98>)
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	f107 0114 	add.w	r1, r7, #20
 8001e06:	2300      	movs	r3, #0
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f7fe fccb 	bl	80007a4 <xQueueGenericSend>
 8001e0e:	6278      	str	r0, [r7, #36]	; 0x24
 8001e10:	e008      	b.n	8001e24 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <xTimerGenericCommand+0x98>)
 8001e14:	6818      	ldr	r0, [r3, #0]
 8001e16:	f107 0114 	add.w	r1, r7, #20
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	f7fe fdcf 	bl	80009c0 <xQueueGenericSendFromISR>
 8001e22:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001e26:	4618      	mov	r0, r3
 8001e28:	3728      	adds	r7, #40	; 0x28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000200 	.word	0x20000200

08001e34 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e3e:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <prvProcessExpiredTimer+0x94>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe fb9c 	bl	800058a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d022      	beq.n	8001ea6 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	699a      	ldr	r2, [r3, #24]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	18d1      	adds	r1, r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	6978      	ldr	r0, [r7, #20]
 8001e6e:	f000 f8d1 	bl	8002014 <prvInsertTimerInActiveList>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d01f      	beq.n	8001eb8 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001e78:	2300      	movs	r3, #0
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	2100      	movs	r1, #0
 8001e82:	6978      	ldr	r0, [r7, #20]
 8001e84:	f7ff ff88 	bl	8001d98 <xTimerGenericCommand>
 8001e88:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d113      	bne.n	8001eb8 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8001e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e94:	f383 8811 	msr	BASEPRI, r3
 8001e98:	f3bf 8f6f 	isb	sy
 8001e9c:	f3bf 8f4f 	dsb	sy
 8001ea0:	60fb      	str	r3, [r7, #12]
    }
 8001ea2:	bf00      	nop
 8001ea4:	e7fe      	b.n	8001ea4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001eac:	f023 0301 	bic.w	r3, r3, #1
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	6978      	ldr	r0, [r7, #20]
 8001ebe:	4798      	blx	r3
    }
 8001ec0:	bf00      	nop
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	200001f8 	.word	0x200001f8

08001ecc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001ed4:	f107 0308 	add.w	r3, r7, #8
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 f857 	bl	8001f8c <prvGetNextExpireTime>
 8001ede:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 f803 	bl	8001ef0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001eea:	f000 f8d5 	bl	8002098 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001eee:	e7f1      	b.n	8001ed4 <prvTimerTask+0x8>

08001ef0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001efa:	f7ff fa53 	bl	80013a4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001efe:	f107 0308 	add.w	r3, r7, #8
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 f866 	bl	8001fd4 <prvSampleTimeNow>
 8001f08:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d130      	bne.n	8001f72 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10a      	bne.n	8001f2c <prvProcessTimerOrBlockTask+0x3c>
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d806      	bhi.n	8001f2c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001f1e:	f7ff fa4f 	bl	80013c0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001f22:	68f9      	ldr	r1, [r7, #12]
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ff85 	bl	8001e34 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001f2a:	e024      	b.n	8001f76 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d008      	beq.n	8001f44 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001f32:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <prvProcessTimerOrBlockTask+0x90>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <prvProcessTimerOrBlockTask+0x50>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <prvProcessTimerOrBlockTask+0x52>
 8001f40:	2300      	movs	r3, #0
 8001f42:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <prvProcessTimerOrBlockTask+0x94>)
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	f7ff f83b 	bl	8000fcc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001f56:	f7ff fa33 	bl	80013c0 <xTaskResumeAll>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10a      	bne.n	8001f76 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001f60:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <prvProcessTimerOrBlockTask+0x98>)
 8001f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	f3bf 8f4f 	dsb	sy
 8001f6c:	f3bf 8f6f 	isb	sy
    }
 8001f70:	e001      	b.n	8001f76 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001f72:	f7ff fa25 	bl	80013c0 <xTaskResumeAll>
    }
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200001fc 	.word	0x200001fc
 8001f84:	20000200 	.word	0x20000200
 8001f88:	e000ed04 	.word	0xe000ed04

08001f8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001f94:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <prvGetNextExpireTime+0x44>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <prvGetNextExpireTime+0x16>
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	e000      	b.n	8001fa4 <prvGetNextExpireTime+0x18>
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d105      	bne.n	8001fbc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <prvGetNextExpireTime+0x44>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	e001      	b.n	8001fc0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    }
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	200001f8 	.word	0x200001f8

08001fd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8001fdc:	f7ff fa82 	bl	80014e4 <xTaskGetTickCount>
 8001fe0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <prvSampleTimeNow+0x3c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d205      	bcs.n	8001ff8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001fec:	f000 f91a 	bl	8002224 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	e002      	b.n	8001ffe <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001ffe:	4a04      	ldr	r2, [pc, #16]	; (8002010 <prvSampleTimeNow+0x3c>)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002004:	68fb      	ldr	r3, [r7, #12]
    }
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000208 	.word	0x20000208

08002014 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	429a      	cmp	r2, r3
 8002038:	d812      	bhi.n	8002060 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	1ad2      	subs	r2, r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	429a      	cmp	r2, r3
 8002046:	d302      	bcc.n	800204e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002048:	2301      	movs	r3, #1
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	e01b      	b.n	8002086 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <prvInsertTimerInActiveList+0x7c>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	3304      	adds	r3, #4
 8002056:	4619      	mov	r1, r3
 8002058:	4610      	mov	r0, r2
 800205a:	f7fe fa5d 	bl	8000518 <vListInsert>
 800205e:	e012      	b.n	8002086 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d206      	bcs.n	8002076 <prvInsertTimerInActiveList+0x62>
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d302      	bcc.n	8002076 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002070:	2301      	movs	r3, #1
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	e007      	b.n	8002086 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002076:	4b07      	ldr	r3, [pc, #28]	; (8002094 <prvInsertTimerInActiveList+0x80>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3304      	adds	r3, #4
 800207e:	4619      	mov	r1, r3
 8002080:	4610      	mov	r0, r2
 8002082:	f7fe fa49 	bl	8000518 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002086:	697b      	ldr	r3, [r7, #20]
    }
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	200001fc 	.word	0x200001fc
 8002094:	200001f8 	.word	0x200001f8

08002098 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002098:	b580      	push	{r7, lr}
 800209a:	b08c      	sub	sp, #48	; 0x30
 800209c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800209e:	e0ae      	b.n	80021fe <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f2c0 80aa 	blt.w	80021fc <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d004      	beq.n	80020be <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	3304      	adds	r3, #4
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fa66 	bl	800058a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff87 	bl	8001fd4 <prvSampleTimeNow>
 80020c6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b09      	cmp	r3, #9
 80020cc:	f200 8097 	bhi.w	80021fe <prvProcessReceivedCommands+0x166>
 80020d0:	a201      	add	r2, pc, #4	; (adr r2, 80020d8 <prvProcessReceivedCommands+0x40>)
 80020d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d6:	bf00      	nop
 80020d8:	08002101 	.word	0x08002101
 80020dc:	08002101 	.word	0x08002101
 80020e0:	08002101 	.word	0x08002101
 80020e4:	08002175 	.word	0x08002175
 80020e8:	08002189 	.word	0x08002189
 80020ec:	080021d3 	.word	0x080021d3
 80020f0:	08002101 	.word	0x08002101
 80020f4:	08002101 	.word	0x08002101
 80020f8:	08002175 	.word	0x08002175
 80020fc:	08002189 	.word	0x08002189
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	b2da      	uxtb	r2, r3
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	18d1      	adds	r1, r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a3a      	ldr	r2, [r7, #32]
 800211e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002120:	f7ff ff78 	bl	8002014 <prvInsertTimerInActiveList>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d069      	beq.n	80021fe <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002130:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d05e      	beq.n	80021fe <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	441a      	add	r2, r3
 8002148:	2300      	movs	r3, #0
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	2300      	movs	r3, #0
 800214e:	2100      	movs	r1, #0
 8002150:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002152:	f7ff fe21 	bl	8001d98 <xTimerGenericCommand>
 8002156:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d14f      	bne.n	80021fe <prvProcessReceivedCommands+0x166>
        __asm volatile
 800215e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002162:	f383 8811 	msr	BASEPRI, r3
 8002166:	f3bf 8f6f 	isb	sy
 800216a:	f3bf 8f4f 	dsb	sy
 800216e:	61bb      	str	r3, [r7, #24]
    }
 8002170:	bf00      	nop
 8002172:	e7fe      	b.n	8002172 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800217a:	f023 0301 	bic.w	r3, r3, #1
 800217e:	b2da      	uxtb	r2, r3
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002186:	e03a      	b.n	80021fe <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	b2da      	uxtb	r2, r3
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10a      	bne.n	80021be <prvProcessReceivedCommands+0x126>
        __asm volatile
 80021a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ac:	f383 8811 	msr	BASEPRI, r3
 80021b0:	f3bf 8f6f 	isb	sy
 80021b4:	f3bf 8f4f 	dsb	sy
 80021b8:	617b      	str	r3, [r7, #20]
    }
 80021ba:	bf00      	nop
 80021bc:	e7fe      	b.n	80021bc <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	699a      	ldr	r2, [r3, #24]
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	18d1      	adds	r1, r2, r3
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	6a3a      	ldr	r2, [r7, #32]
 80021ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021cc:	f7ff ff22 	bl	8002014 <prvInsertTimerInActiveList>
                        break;
 80021d0:	e015      	b.n	80021fe <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d103      	bne.n	80021e8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80021e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021e2:	f000 fc73 	bl	8002acc <vPortFree>
 80021e6:	e00a      	b.n	80021fe <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021ee:	f023 0301 	bic.w	r3, r3, #1
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80021fa:	e000      	b.n	80021fe <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80021fc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80021fe:	4b08      	ldr	r3, [pc, #32]	; (8002220 <prvProcessReceivedCommands+0x188>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f107 0108 	add.w	r1, r7, #8
 8002206:	2200      	movs	r2, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe fc97 	bl	8000b3c <xQueueReceive>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	f47f af45 	bne.w	80020a0 <prvProcessReceivedCommands+0x8>
        }
    }
 8002216:	bf00      	nop
 8002218:	bf00      	nop
 800221a:	3728      	adds	r7, #40	; 0x28
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000200 	.word	0x20000200

08002224 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800222a:	e048      	b.n	80022be <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800222c:	4b2d      	ldr	r3, [pc, #180]	; (80022e4 <prvSwitchTimerLists+0xc0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002236:	4b2b      	ldr	r3, [pc, #172]	; (80022e4 <prvSwitchTimerLists+0xc0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	3304      	adds	r3, #4
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe f9a0 	bl	800058a <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d02e      	beq.n	80022be <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4413      	add	r3, r2
 8002268:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	429a      	cmp	r2, r3
 8002270:	d90e      	bls.n	8002290 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800227e:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <prvSwitchTimerLists+0xc0>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	3304      	adds	r3, #4
 8002286:	4619      	mov	r1, r3
 8002288:	4610      	mov	r0, r2
 800228a:	f7fe f945 	bl	8000518 <vListInsert>
 800228e:	e016      	b.n	80022be <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002290:	2300      	movs	r3, #0
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	2300      	movs	r3, #0
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	2100      	movs	r1, #0
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f7ff fd7c 	bl	8001d98 <xTimerGenericCommand>
 80022a0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10a      	bne.n	80022be <prvSwitchTimerLists+0x9a>
        __asm volatile
 80022a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ac:	f383 8811 	msr	BASEPRI, r3
 80022b0:	f3bf 8f6f 	isb	sy
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	603b      	str	r3, [r7, #0]
    }
 80022ba:	bf00      	nop
 80022bc:	e7fe      	b.n	80022bc <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <prvSwitchTimerLists+0xc0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1b1      	bne.n	800222c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <prvSwitchTimerLists+0xc0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <prvSwitchTimerLists+0xc4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <prvSwitchTimerLists+0xc0>)
 80022d4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80022d6:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <prvSwitchTimerLists+0xc4>)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	6013      	str	r3, [r2, #0]
    }
 80022dc:	bf00      	nop
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	200001f8 	.word	0x200001f8
 80022e8:	200001fc 	.word	0x200001fc

080022ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80022f0:	f000 f9e0 	bl	80026b4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <prvCheckForValidListAndQueue+0x54>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d11d      	bne.n	8002338 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80022fc:	4811      	ldr	r0, [pc, #68]	; (8002344 <prvCheckForValidListAndQueue+0x58>)
 80022fe:	f7fe f8ba 	bl	8000476 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002302:	4811      	ldr	r0, [pc, #68]	; (8002348 <prvCheckForValidListAndQueue+0x5c>)
 8002304:	f7fe f8b7 	bl	8000476 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002308:	4b10      	ldr	r3, [pc, #64]	; (800234c <prvCheckForValidListAndQueue+0x60>)
 800230a:	4a0e      	ldr	r2, [pc, #56]	; (8002344 <prvCheckForValidListAndQueue+0x58>)
 800230c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <prvCheckForValidListAndQueue+0x64>)
 8002310:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <prvCheckForValidListAndQueue+0x5c>)
 8002312:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002314:	2200      	movs	r2, #0
 8002316:	210c      	movs	r1, #12
 8002318:	200a      	movs	r0, #10
 800231a:	f7fe f9bb 	bl	8000694 <xQueueGenericCreate>
 800231e:	4603      	mov	r3, r0
 8002320:	4a07      	ldr	r2, [pc, #28]	; (8002340 <prvCheckForValidListAndQueue+0x54>)
 8002322:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <prvCheckForValidListAndQueue+0x54>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800232c:	4b04      	ldr	r3, [pc, #16]	; (8002340 <prvCheckForValidListAndQueue+0x54>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4908      	ldr	r1, [pc, #32]	; (8002354 <prvCheckForValidListAndQueue+0x68>)
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe fe18 	bl	8000f68 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002338:	f000 f9ec 	bl	8002714 <vPortExitCritical>
    }
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000200 	.word	0x20000200
 8002344:	200001d0 	.word	0x200001d0
 8002348:	200001e4 	.word	0x200001e4
 800234c:	200001f8 	.word	0x200001f8
 8002350:	200001fc 	.word	0x200001fc
 8002354:	080054b8 	.word	0x080054b8

08002358 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	3b04      	subs	r3, #4
 8002368:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002370:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	3b04      	subs	r3, #4
 8002376:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f023 0201 	bic.w	r2, r3, #1
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3b04      	subs	r3, #4
 8002386:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002388:	4a0c      	ldr	r2, [pc, #48]	; (80023bc <pxPortInitialiseStack+0x64>)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	3b14      	subs	r3, #20
 8002392:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	3b04      	subs	r3, #4
 800239e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f06f 0202 	mvn.w	r2, #2
 80023a6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3b20      	subs	r3, #32
 80023ac:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80023ae:	68fb      	ldr	r3, [r7, #12]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	080023c1 	.word	0x080023c1

080023c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <prvTaskExitError+0x54>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d2:	d00a      	beq.n	80023ea <prvTaskExitError+0x2a>
        __asm volatile
 80023d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d8:	f383 8811 	msr	BASEPRI, r3
 80023dc:	f3bf 8f6f 	isb	sy
 80023e0:	f3bf 8f4f 	dsb	sy
 80023e4:	60fb      	str	r3, [r7, #12]
    }
 80023e6:	bf00      	nop
 80023e8:	e7fe      	b.n	80023e8 <prvTaskExitError+0x28>
        __asm volatile
 80023ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ee:	f383 8811 	msr	BASEPRI, r3
 80023f2:	f3bf 8f6f 	isb	sy
 80023f6:	f3bf 8f4f 	dsb	sy
 80023fa:	60bb      	str	r3, [r7, #8]
    }
 80023fc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80023fe:	bf00      	nop
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0fc      	beq.n	8002400 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002406:	bf00      	nop
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	20000008 	.word	0x20000008
	...

08002420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002420:	4b07      	ldr	r3, [pc, #28]	; (8002440 <pxCurrentTCBConst2>)
 8002422:	6819      	ldr	r1, [r3, #0]
 8002424:	6808      	ldr	r0, [r1, #0]
 8002426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800242a:	f380 8809 	msr	PSP, r0
 800242e:	f3bf 8f6f 	isb	sy
 8002432:	f04f 0000 	mov.w	r0, #0
 8002436:	f380 8811 	msr	BASEPRI, r0
 800243a:	4770      	bx	lr
 800243c:	f3af 8000 	nop.w

08002440 <pxCurrentTCBConst2>:
 8002440:	200000cc 	.word	0x200000cc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop

08002448 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002448:	4808      	ldr	r0, [pc, #32]	; (800246c <prvPortStartFirstTask+0x24>)
 800244a:	6800      	ldr	r0, [r0, #0]
 800244c:	6800      	ldr	r0, [r0, #0]
 800244e:	f380 8808 	msr	MSP, r0
 8002452:	f04f 0000 	mov.w	r0, #0
 8002456:	f380 8814 	msr	CONTROL, r0
 800245a:	b662      	cpsie	i
 800245c:	b661      	cpsie	f
 800245e:	f3bf 8f4f 	dsb	sy
 8002462:	f3bf 8f6f 	isb	sy
 8002466:	df00      	svc	0
 8002468:	bf00      	nop
 800246a:	0000      	.short	0x0000
 800246c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop

08002474 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800247a:	4b46      	ldr	r3, [pc, #280]	; (8002594 <xPortStartScheduler+0x120>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a46      	ldr	r2, [pc, #280]	; (8002598 <xPortStartScheduler+0x124>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d10a      	bne.n	800249a <xPortStartScheduler+0x26>
        __asm volatile
 8002484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002488:	f383 8811 	msr	BASEPRI, r3
 800248c:	f3bf 8f6f 	isb	sy
 8002490:	f3bf 8f4f 	dsb	sy
 8002494:	613b      	str	r3, [r7, #16]
    }
 8002496:	bf00      	nop
 8002498:	e7fe      	b.n	8002498 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800249a:	4b3e      	ldr	r3, [pc, #248]	; (8002594 <xPortStartScheduler+0x120>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a3f      	ldr	r2, [pc, #252]	; (800259c <xPortStartScheduler+0x128>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d10a      	bne.n	80024ba <xPortStartScheduler+0x46>
        __asm volatile
 80024a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a8:	f383 8811 	msr	BASEPRI, r3
 80024ac:	f3bf 8f6f 	isb	sy
 80024b0:	f3bf 8f4f 	dsb	sy
 80024b4:	60fb      	str	r3, [r7, #12]
    }
 80024b6:	bf00      	nop
 80024b8:	e7fe      	b.n	80024b8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80024ba:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <xPortStartScheduler+0x12c>)
 80024bc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	22ff      	movs	r2, #255	; 0xff
 80024ca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4b31      	ldr	r3, [pc, #196]	; (80025a4 <xPortStartScheduler+0x130>)
 80024e0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80024e2:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <xPortStartScheduler+0x134>)
 80024e4:	2207      	movs	r2, #7
 80024e6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80024e8:	e009      	b.n	80024fe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80024ea:	4b2f      	ldr	r3, [pc, #188]	; (80025a8 <xPortStartScheduler+0x134>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	4a2d      	ldr	r2, [pc, #180]	; (80025a8 <xPortStartScheduler+0x134>)
 80024f2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80024fe:	78fb      	ldrb	r3, [r7, #3]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002506:	2b80      	cmp	r3, #128	; 0x80
 8002508:	d0ef      	beq.n	80024ea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800250a:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <xPortStartScheduler+0x134>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f1c3 0307 	rsb	r3, r3, #7
 8002512:	2b04      	cmp	r3, #4
 8002514:	d00a      	beq.n	800252c <xPortStartScheduler+0xb8>
        __asm volatile
 8002516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251a:	f383 8811 	msr	BASEPRI, r3
 800251e:	f3bf 8f6f 	isb	sy
 8002522:	f3bf 8f4f 	dsb	sy
 8002526:	60bb      	str	r3, [r7, #8]
    }
 8002528:	bf00      	nop
 800252a:	e7fe      	b.n	800252a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800252c:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <xPortStartScheduler+0x134>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	021b      	lsls	r3, r3, #8
 8002532:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <xPortStartScheduler+0x134>)
 8002534:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002536:	4b1c      	ldr	r3, [pc, #112]	; (80025a8 <xPortStartScheduler+0x134>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800253e:	4a1a      	ldr	r2, [pc, #104]	; (80025a8 <xPortStartScheduler+0x134>)
 8002540:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800254a:	4b18      	ldr	r3, [pc, #96]	; (80025ac <xPortStartScheduler+0x138>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a17      	ldr	r2, [pc, #92]	; (80025ac <xPortStartScheduler+0x138>)
 8002550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002554:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <xPortStartScheduler+0x138>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a14      	ldr	r2, [pc, #80]	; (80025ac <xPortStartScheduler+0x138>)
 800255c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002560:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002562:	f000 f963 	bl	800282c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002566:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <xPortStartScheduler+0x13c>)
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800256c:	f000 f982 	bl	8002874 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002570:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <xPortStartScheduler+0x140>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a0f      	ldr	r2, [pc, #60]	; (80025b4 <xPortStartScheduler+0x140>)
 8002576:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800257a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800257c:	f7ff ff64 	bl	8002448 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002580:	f7ff f86c 	bl	800165c <vTaskSwitchContext>
    prvTaskExitError();
 8002584:	f7ff ff1c 	bl	80023c0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	e000ed00 	.word	0xe000ed00
 8002598:	410fc271 	.word	0x410fc271
 800259c:	410fc270 	.word	0x410fc270
 80025a0:	e000e400 	.word	0xe000e400
 80025a4:	2000020c 	.word	0x2000020c
 80025a8:	20000210 	.word	0x20000210
 80025ac:	e000ed20 	.word	0xe000ed20
 80025b0:	20000008 	.word	0x20000008
 80025b4:	e000ef34 	.word	0xe000ef34

080025b8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80025be:	4b37      	ldr	r3, [pc, #220]	; (800269c <vInitPrioGroupValue+0xe4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a37      	ldr	r2, [pc, #220]	; (80026a0 <vInitPrioGroupValue+0xe8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d10a      	bne.n	80025de <vInitPrioGroupValue+0x26>
        __asm volatile
 80025c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025cc:	f383 8811 	msr	BASEPRI, r3
 80025d0:	f3bf 8f6f 	isb	sy
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	613b      	str	r3, [r7, #16]
    }
 80025da:	bf00      	nop
 80025dc:	e7fe      	b.n	80025dc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80025de:	4b2f      	ldr	r3, [pc, #188]	; (800269c <vInitPrioGroupValue+0xe4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a30      	ldr	r2, [pc, #192]	; (80026a4 <vInitPrioGroupValue+0xec>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d10a      	bne.n	80025fe <vInitPrioGroupValue+0x46>
        __asm volatile
 80025e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ec:	f383 8811 	msr	BASEPRI, r3
 80025f0:	f3bf 8f6f 	isb	sy
 80025f4:	f3bf 8f4f 	dsb	sy
 80025f8:	60fb      	str	r3, [r7, #12]
    }
 80025fa:	bf00      	nop
 80025fc:	e7fe      	b.n	80025fc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80025fe:	4b2a      	ldr	r3, [pc, #168]	; (80026a8 <vInitPrioGroupValue+0xf0>)
 8002600:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	22ff      	movs	r2, #255	; 0xff
 800260e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4b22      	ldr	r3, [pc, #136]	; (80026ac <vInitPrioGroupValue+0xf4>)
 8002624:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002626:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <vInitPrioGroupValue+0xf8>)
 8002628:	2207      	movs	r2, #7
 800262a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800262c:	e009      	b.n	8002642 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <vInitPrioGroupValue+0xf8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	3b01      	subs	r3, #1
 8002634:	4a1e      	ldr	r2, [pc, #120]	; (80026b0 <vInitPrioGroupValue+0xf8>)
 8002636:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	b2db      	uxtb	r3, r3
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	b2db      	uxtb	r3, r3
 8002640:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002642:	78fb      	ldrb	r3, [r7, #3]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264a:	2b80      	cmp	r3, #128	; 0x80
 800264c:	d0ef      	beq.n	800262e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800264e:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <vInitPrioGroupValue+0xf8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f1c3 0307 	rsb	r3, r3, #7
 8002656:	2b04      	cmp	r3, #4
 8002658:	d00a      	beq.n	8002670 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800265a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265e:	f383 8811 	msr	BASEPRI, r3
 8002662:	f3bf 8f6f 	isb	sy
 8002666:	f3bf 8f4f 	dsb	sy
 800266a:	60bb      	str	r3, [r7, #8]
    }
 800266c:	bf00      	nop
 800266e:	e7fe      	b.n	800266e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002670:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <vInitPrioGroupValue+0xf8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	021b      	lsls	r3, r3, #8
 8002676:	4a0e      	ldr	r2, [pc, #56]	; (80026b0 <vInitPrioGroupValue+0xf8>)
 8002678:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <vInitPrioGroupValue+0xf8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002682:	4a0b      	ldr	r2, [pc, #44]	; (80026b0 <vInitPrioGroupValue+0xf8>)
 8002684:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	b2da      	uxtb	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800268e:	bf00      	nop
 8002690:	371c      	adds	r7, #28
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000ed00 	.word	0xe000ed00
 80026a0:	410fc271 	.word	0x410fc271
 80026a4:	410fc270 	.word	0x410fc270
 80026a8:	e000e400 	.word	0xe000e400
 80026ac:	2000020c 	.word	0x2000020c
 80026b0:	20000210 	.word	0x20000210

080026b4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
        __asm volatile
 80026ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026be:	f383 8811 	msr	BASEPRI, r3
 80026c2:	f3bf 8f6f 	isb	sy
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	607b      	str	r3, [r7, #4]
    }
 80026cc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80026ce:	4b0f      	ldr	r3, [pc, #60]	; (800270c <vPortEnterCritical+0x58>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	3301      	adds	r3, #1
 80026d4:	4a0d      	ldr	r2, [pc, #52]	; (800270c <vPortEnterCritical+0x58>)
 80026d6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <vPortEnterCritical+0x58>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d10f      	bne.n	8002700 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <vPortEnterCritical+0x5c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <vPortEnterCritical+0x4c>
        __asm volatile
 80026ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ee:	f383 8811 	msr	BASEPRI, r3
 80026f2:	f3bf 8f6f 	isb	sy
 80026f6:	f3bf 8f4f 	dsb	sy
 80026fa:	603b      	str	r3, [r7, #0]
    }
 80026fc:	bf00      	nop
 80026fe:	e7fe      	b.n	80026fe <vPortEnterCritical+0x4a>
    }
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	20000008 	.word	0x20000008
 8002710:	e000ed04 	.word	0xe000ed04

08002714 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <vPortExitCritical+0x50>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10a      	bne.n	8002738 <vPortExitCritical+0x24>
        __asm volatile
 8002722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002726:	f383 8811 	msr	BASEPRI, r3
 800272a:	f3bf 8f6f 	isb	sy
 800272e:	f3bf 8f4f 	dsb	sy
 8002732:	607b      	str	r3, [r7, #4]
    }
 8002734:	bf00      	nop
 8002736:	e7fe      	b.n	8002736 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002738:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <vPortExitCritical+0x50>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	3b01      	subs	r3, #1
 800273e:	4a09      	ldr	r2, [pc, #36]	; (8002764 <vPortExitCritical+0x50>)
 8002740:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <vPortExitCritical+0x50>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d105      	bne.n	8002756 <vPortExitCritical+0x42>
 800274a:	2300      	movs	r3, #0
 800274c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	f383 8811 	msr	BASEPRI, r3
    }
 8002754:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20000008 	.word	0x20000008
	...

08002770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002770:	f3ef 8009 	mrs	r0, PSP
 8002774:	f3bf 8f6f 	isb	sy
 8002778:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <pxCurrentTCBConst>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	f01e 0f10 	tst.w	lr, #16
 8002780:	bf08      	it	eq
 8002782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800278a:	6010      	str	r0, [r2, #0]
 800278c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002790:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002794:	f380 8811 	msr	BASEPRI, r0
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	f3bf 8f6f 	isb	sy
 80027a0:	f7fe ff5c 	bl	800165c <vTaskSwitchContext>
 80027a4:	f04f 0000 	mov.w	r0, #0
 80027a8:	f380 8811 	msr	BASEPRI, r0
 80027ac:	bc09      	pop	{r0, r3}
 80027ae:	6819      	ldr	r1, [r3, #0]
 80027b0:	6808      	ldr	r0, [r1, #0]
 80027b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027b6:	f01e 0f10 	tst.w	lr, #16
 80027ba:	bf08      	it	eq
 80027bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80027c0:	f380 8809 	msr	PSP, r0
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	f3af 8000 	nop.w

080027d0 <pxCurrentTCBConst>:
 80027d0:	200000cc 	.word	0x200000cc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop

080027d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
        __asm volatile
 80027de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e2:	f383 8811 	msr	BASEPRI, r3
 80027e6:	f3bf 8f6f 	isb	sy
 80027ea:	f3bf 8f4f 	dsb	sy
 80027ee:	607b      	str	r3, [r7, #4]
    }
 80027f0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80027f2:	f001 fdcf 	bl	8004394 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80027f6:	f7fe fe97 	bl	8001528 <xTaskIncrementTick>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d006      	beq.n	800280e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002800:	f001 fe26 	bl	8004450 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <SysTick_Handler+0x50>)
 8002806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	e001      	b.n	8002812 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800280e:	f001 fe03 	bl	8004418 <SEGGER_SYSVIEW_RecordExitISR>
 8002812:	2300      	movs	r3, #0
 8002814:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	f383 8811 	msr	BASEPRI, r3
    }
 800281c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	e000ed04 	.word	0xe000ed04

0800282c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <vPortSetupTimerInterrupt+0x34>)
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002836:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <vPortSetupTimerInterrupt+0x38>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800283c:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <vPortSetupTimerInterrupt+0x3c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0a      	ldr	r2, [pc, #40]	; (800286c <vPortSetupTimerInterrupt+0x40>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	099b      	lsrs	r3, r3, #6
 8002848:	4a09      	ldr	r2, [pc, #36]	; (8002870 <vPortSetupTimerInterrupt+0x44>)
 800284a:	3b01      	subs	r3, #1
 800284c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800284e:	4b04      	ldr	r3, [pc, #16]	; (8002860 <vPortSetupTimerInterrupt+0x34>)
 8002850:	2207      	movs	r2, #7
 8002852:	601a      	str	r2, [r3, #0]
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e000e010 	.word	0xe000e010
 8002864:	e000e018 	.word	0xe000e018
 8002868:	20000000 	.word	0x20000000
 800286c:	10624dd3 	.word	0x10624dd3
 8002870:	e000e014 	.word	0xe000e014

08002874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002884 <vPortEnableVFP+0x10>
 8002878:	6801      	ldr	r1, [r0, #0]
 800287a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800287e:	6001      	str	r1, [r0, #0]
 8002880:	4770      	bx	lr
 8002882:	0000      	.short	0x0000
 8002884:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop

0800288c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002892:	f3ef 8305 	mrs	r3, IPSR
 8002896:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b0f      	cmp	r3, #15
 800289c:	d914      	bls.n	80028c8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800289e:	4a17      	ldr	r2, [pc, #92]	; (80028fc <vPortValidateInterruptPriority+0x70>)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4413      	add	r3, r2
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80028a8:	4b15      	ldr	r3, [pc, #84]	; (8002900 <vPortValidateInterruptPriority+0x74>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	7afa      	ldrb	r2, [r7, #11]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d20a      	bcs.n	80028c8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80028b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b6:	f383 8811 	msr	BASEPRI, r3
 80028ba:	f3bf 8f6f 	isb	sy
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	607b      	str	r3, [r7, #4]
    }
 80028c4:	bf00      	nop
 80028c6:	e7fe      	b.n	80028c6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80028c8:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <vPortValidateInterruptPriority+0x78>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028d0:	4b0d      	ldr	r3, [pc, #52]	; (8002908 <vPortValidateInterruptPriority+0x7c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d90a      	bls.n	80028ee <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80028d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028dc:	f383 8811 	msr	BASEPRI, r3
 80028e0:	f3bf 8f6f 	isb	sy
 80028e4:	f3bf 8f4f 	dsb	sy
 80028e8:	603b      	str	r3, [r7, #0]
    }
 80028ea:	bf00      	nop
 80028ec:	e7fe      	b.n	80028ec <vPortValidateInterruptPriority+0x60>
    }
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000e3f0 	.word	0xe000e3f0
 8002900:	2000020c 	.word	0x2000020c
 8002904:	e000ed0c 	.word	0xe000ed0c
 8002908:	20000210 	.word	0x20000210

0800290c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08a      	sub	sp, #40	; 0x28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002914:	2300      	movs	r3, #0
 8002916:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002918:	f7fe fd44 	bl	80013a4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800291c:	4b65      	ldr	r3, [pc, #404]	; (8002ab4 <pvPortMalloc+0x1a8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002924:	f000 f934 	bl	8002b90 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002928:	4b63      	ldr	r3, [pc, #396]	; (8002ab8 <pvPortMalloc+0x1ac>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4013      	ands	r3, r2
 8002930:	2b00      	cmp	r3, #0
 8002932:	f040 80a7 	bne.w	8002a84 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d02d      	beq.n	8002998 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800293c:	2208      	movs	r2, #8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	429a      	cmp	r2, r3
 8002946:	d227      	bcs.n	8002998 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002948:	2208      	movs	r2, #8
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	2b00      	cmp	r3, #0
 8002958:	d021      	beq.n	800299e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f023 0307 	bic.w	r3, r3, #7
 8002960:	3308      	adds	r3, #8
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	429a      	cmp	r2, r3
 8002966:	d214      	bcs.n	8002992 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f023 0307 	bic.w	r3, r3, #7
 800296e:	3308      	adds	r3, #8
 8002970:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	2b00      	cmp	r3, #0
 800297a:	d010      	beq.n	800299e <pvPortMalloc+0x92>
        __asm volatile
 800297c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002980:	f383 8811 	msr	BASEPRI, r3
 8002984:	f3bf 8f6f 	isb	sy
 8002988:	f3bf 8f4f 	dsb	sy
 800298c:	617b      	str	r3, [r7, #20]
    }
 800298e:	bf00      	nop
 8002990:	e7fe      	b.n	8002990 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002996:	e002      	b.n	800299e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	607b      	str	r3, [r7, #4]
 800299c:	e000      	b.n	80029a0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800299e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d06e      	beq.n	8002a84 <pvPortMalloc+0x178>
 80029a6:	4b45      	ldr	r3, [pc, #276]	; (8002abc <pvPortMalloc+0x1b0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d869      	bhi.n	8002a84 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80029b0:	4b43      	ldr	r3, [pc, #268]	; (8002ac0 <pvPortMalloc+0x1b4>)
 80029b2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80029b4:	4b42      	ldr	r3, [pc, #264]	; (8002ac0 <pvPortMalloc+0x1b4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029ba:	e004      	b.n	80029c6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d903      	bls.n	80029d8 <pvPortMalloc+0xcc>
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f1      	bne.n	80029bc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80029d8:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <pvPortMalloc+0x1a8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029de:	429a      	cmp	r2, r3
 80029e0:	d050      	beq.n	8002a84 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2208      	movs	r2, #8
 80029e8:	4413      	add	r3, r2
 80029ea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	1ad2      	subs	r2, r2, r3
 80029fc:	2308      	movs	r3, #8
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d91f      	bls.n	8002a44 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <pvPortMalloc+0x120>
        __asm volatile
 8002a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1a:	f383 8811 	msr	BASEPRI, r3
 8002a1e:	f3bf 8f6f 	isb	sy
 8002a22:	f3bf 8f4f 	dsb	sy
 8002a26:	613b      	str	r3, [r7, #16]
    }
 8002a28:	bf00      	nop
 8002a2a:	e7fe      	b.n	8002a2a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	1ad2      	subs	r2, r2, r3
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002a3e:	69b8      	ldr	r0, [r7, #24]
 8002a40:	f000 f908 	bl	8002c54 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a44:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <pvPortMalloc+0x1b0>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	4a1b      	ldr	r2, [pc, #108]	; (8002abc <pvPortMalloc+0x1b0>)
 8002a50:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a52:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <pvPortMalloc+0x1b0>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <pvPortMalloc+0x1b8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d203      	bcs.n	8002a66 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002a5e:	4b17      	ldr	r3, [pc, #92]	; (8002abc <pvPortMalloc+0x1b0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <pvPortMalloc+0x1b8>)
 8002a64:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <pvPortMalloc+0x1ac>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002a7a:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <pvPortMalloc+0x1bc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	4a11      	ldr	r2, [pc, #68]	; (8002ac8 <pvPortMalloc+0x1bc>)
 8002a82:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002a84:	f7fe fc9c 	bl	80013c0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <pvPortMalloc+0x19c>
        __asm volatile
 8002a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	60fb      	str	r3, [r7, #12]
    }
 8002aa4:	bf00      	nop
 8002aa6:	e7fe      	b.n	8002aa6 <pvPortMalloc+0x19a>
    return pvReturn;
 8002aa8:	69fb      	ldr	r3, [r7, #28]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3728      	adds	r7, #40	; 0x28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20012e1c 	.word	0x20012e1c
 8002ab8:	20012e30 	.word	0x20012e30
 8002abc:	20012e20 	.word	0x20012e20
 8002ac0:	20012e14 	.word	0x20012e14
 8002ac4:	20012e24 	.word	0x20012e24
 8002ac8:	20012e28 	.word	0x20012e28

08002acc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d04d      	beq.n	8002b7a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002ade:	2308      	movs	r3, #8
 8002ae0:	425b      	negs	r3, r3
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <vPortFree+0xb8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10a      	bne.n	8002b10 <vPortFree+0x44>
        __asm volatile
 8002afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afe:	f383 8811 	msr	BASEPRI, r3
 8002b02:	f3bf 8f6f 	isb	sy
 8002b06:	f3bf 8f4f 	dsb	sy
 8002b0a:	60fb      	str	r3, [r7, #12]
    }
 8002b0c:	bf00      	nop
 8002b0e:	e7fe      	b.n	8002b0e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <vPortFree+0x62>
        __asm volatile
 8002b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1c:	f383 8811 	msr	BASEPRI, r3
 8002b20:	f3bf 8f6f 	isb	sy
 8002b24:	f3bf 8f4f 	dsb	sy
 8002b28:	60bb      	str	r3, [r7, #8]
    }
 8002b2a:	bf00      	nop
 8002b2c:	e7fe      	b.n	8002b2c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <vPortFree+0xb8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01e      	beq.n	8002b7a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d11a      	bne.n	8002b7a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <vPortFree+0xb8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	401a      	ands	r2, r3
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002b54:	f7fe fc26 	bl	80013a4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <vPortFree+0xbc>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4413      	add	r3, r2
 8002b62:	4a09      	ldr	r2, [pc, #36]	; (8002b88 <vPortFree+0xbc>)
 8002b64:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b66:	6938      	ldr	r0, [r7, #16]
 8002b68:	f000 f874 	bl	8002c54 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002b6c:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <vPortFree+0xc0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	3301      	adds	r3, #1
 8002b72:	4a06      	ldr	r2, [pc, #24]	; (8002b8c <vPortFree+0xc0>)
 8002b74:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002b76:	f7fe fc23 	bl	80013c0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002b7a:	bf00      	nop
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20012e30 	.word	0x20012e30
 8002b88:	20012e20 	.word	0x20012e20
 8002b8c:	20012e2c 	.word	0x20012e2c

08002b90 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002b96:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002b9a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002b9c:	4b27      	ldr	r3, [pc, #156]	; (8002c3c <prvHeapInit+0xac>)
 8002b9e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00c      	beq.n	8002bc4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3307      	adds	r3, #7
 8002bae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0307 	bic.w	r3, r3, #7
 8002bb6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	4a1f      	ldr	r2, [pc, #124]	; (8002c3c <prvHeapInit+0xac>)
 8002bc0:	4413      	add	r3, r2
 8002bc2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002bc8:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <prvHeapInit+0xb0>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002bce:	4b1c      	ldr	r3, [pc, #112]	; (8002c40 <prvHeapInit+0xb0>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	4413      	add	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002bdc:	2208      	movs	r2, #8
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f023 0307 	bic.w	r3, r3, #7
 8002bea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4a15      	ldr	r2, [pc, #84]	; (8002c44 <prvHeapInit+0xb4>)
 8002bf0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002bf2:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <prvHeapInit+0xb4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002bfa:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <prvHeapInit+0xb4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	1ad2      	subs	r2, r2, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <prvHeapInit+0xb4>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <prvHeapInit+0xb8>)
 8002c1e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	4a09      	ldr	r2, [pc, #36]	; (8002c4c <prvHeapInit+0xbc>)
 8002c26:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <prvHeapInit+0xc0>)
 8002c2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c2e:	601a      	str	r2, [r3, #0]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	20000214 	.word	0x20000214
 8002c40:	20012e14 	.word	0x20012e14
 8002c44:	20012e1c 	.word	0x20012e1c
 8002c48:	20012e24 	.word	0x20012e24
 8002c4c:	20012e20 	.word	0x20012e20
 8002c50:	20012e30 	.word	0x20012e30

08002c54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002c5c:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <prvInsertBlockIntoFreeList+0xac>)
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	e002      	b.n	8002c68 <prvInsertBlockIntoFreeList+0x14>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d8f7      	bhi.n	8002c62 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d108      	bne.n	8002c96 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	441a      	add	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	441a      	add	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d118      	bne.n	8002cdc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <prvInsertBlockIntoFreeList+0xb0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d00d      	beq.n	8002cd2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	441a      	add	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	e008      	b.n	8002ce4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <prvInsertBlockIntoFreeList+0xb0>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	e003      	b.n	8002ce4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d002      	beq.n	8002cf2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	20012e14 	.word	0x20012e14
 8002d04:	20012e1c 	.word	0x20012e1c

08002d08 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002d0c:	4803      	ldr	r0, [pc, #12]	; (8002d1c <_cbSendSystemDesc+0x14>)
 8002d0e:	f001 faeb 	bl	80042e8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002d12:	4803      	ldr	r0, [pc, #12]	; (8002d20 <_cbSendSystemDesc+0x18>)
 8002d14:	f001 fae8 	bl	80042e8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8002d18:	bf00      	nop
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	080054c0 	.word	0x080054c0
 8002d20:	080054f0 	.word	0x080054f0

08002d24 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <SEGGER_SYSVIEW_Conf+0x20>)
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <SEGGER_SYSVIEW_Conf+0x20>)
 8002d2e:	6819      	ldr	r1, [r3, #0]
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <SEGGER_SYSVIEW_Conf+0x24>)
 8002d32:	4a06      	ldr	r2, [pc, #24]	; (8002d4c <SEGGER_SYSVIEW_Conf+0x28>)
 8002d34:	f000 fe56 	bl	80039e4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002d38:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002d3c:	f000 fe96 	bl	8003a6c <SEGGER_SYSVIEW_SetRAMBase>
}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000000 	.word	0x20000000
 8002d48:	08002d09 	.word	0x08002d09
 8002d4c:	08005578 	.word	0x08005578

08002d50 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002d56:	2300      	movs	r3, #0
 8002d58:	607b      	str	r3, [r7, #4]
 8002d5a:	e033      	b.n	8002dc4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002d5c:	491e      	ldr	r1, [pc, #120]	; (8002dd8 <_cbSendTaskList+0x88>)
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	6818      	ldr	r0, [r3, #0]
 8002d6c:	491a      	ldr	r1, [pc, #104]	; (8002dd8 <_cbSendTaskList+0x88>)
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	6819      	ldr	r1, [r3, #0]
 8002d7e:	4c16      	ldr	r4, [pc, #88]	; (8002dd8 <_cbSendTaskList+0x88>)
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4423      	add	r3, r4
 8002d8c:	3308      	adds	r3, #8
 8002d8e:	681c      	ldr	r4, [r3, #0]
 8002d90:	4d11      	ldr	r5, [pc, #68]	; (8002dd8 <_cbSendTaskList+0x88>)
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	442b      	add	r3, r5
 8002d9e:	330c      	adds	r3, #12
 8002da0:	681d      	ldr	r5, [r3, #0]
 8002da2:	4e0d      	ldr	r6, [pc, #52]	; (8002dd8 <_cbSendTaskList+0x88>)
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4433      	add	r3, r6
 8002db0:	3310      	adds	r3, #16
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	462b      	mov	r3, r5
 8002db8:	4622      	mov	r2, r4
 8002dba:	f000 f8bd 	bl	8002f38 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	607b      	str	r3, [r7, #4]
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <_cbSendTaskList+0x8c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d3c6      	bcc.n	8002d5c <_cbSendTaskList+0xc>
  }
}
 8002dce:	bf00      	nop
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dd8:	20012e34 	.word	0x20012e34
 8002ddc:	20012ed4 	.word	0x20012ed4

08002de0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002de8:	f7fe fb8c 	bl	8001504 <xTaskGetTickCountFromISR>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2200      	movs	r2, #0
 8002df0:	469a      	mov	sl, r3
 8002df2:	4693      	mov	fp, r2
 8002df4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002df8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	f04f 0a00 	mov.w	sl, #0
 8002e04:	f04f 0b00 	mov.w	fp, #0
 8002e08:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8002e0c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8002e10:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8002e14:	4652      	mov	r2, sl
 8002e16:	465b      	mov	r3, fp
 8002e18:	1a14      	subs	r4, r2, r0
 8002e1a:	eb63 0501 	sbc.w	r5, r3, r1
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	00ab      	lsls	r3, r5, #2
 8002e28:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002e2c:	00a2      	lsls	r2, r4, #2
 8002e2e:	4614      	mov	r4, r2
 8002e30:	461d      	mov	r5, r3
 8002e32:	eb14 0800 	adds.w	r8, r4, r0
 8002e36:	eb45 0901 	adc.w	r9, r5, r1
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e4e:	4690      	mov	r8, r2
 8002e50:	4699      	mov	r9, r3
 8002e52:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8002e56:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002e68 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002e76:	2205      	movs	r2, #5
 8002e78:	492b      	ldr	r1, [pc, #172]	; (8002f28 <SYSVIEW_AddTask+0xc0>)
 8002e7a:	68b8      	ldr	r0, [r7, #8]
 8002e7c:	f001 fdc4 	bl	8004a08 <memcmp>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d04b      	beq.n	8002f1e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002e86:	4b29      	ldr	r3, [pc, #164]	; (8002f2c <SYSVIEW_AddTask+0xc4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b07      	cmp	r3, #7
 8002e8c:	d903      	bls.n	8002e96 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002e8e:	4828      	ldr	r0, [pc, #160]	; (8002f30 <SYSVIEW_AddTask+0xc8>)
 8002e90:	f001 fd28 	bl	80048e4 <SEGGER_SYSVIEW_Warn>
    return;
 8002e94:	e044      	b.n	8002f20 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002e96:	4b25      	ldr	r3, [pc, #148]	; (8002f2c <SYSVIEW_AddTask+0xc4>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4926      	ldr	r1, [pc, #152]	; (8002f34 <SYSVIEW_AddTask+0xcc>)
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002eaa:	4b20      	ldr	r3, [pc, #128]	; (8002f2c <SYSVIEW_AddTask+0xc4>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	4921      	ldr	r1, [pc, #132]	; (8002f34 <SYSVIEW_AddTask+0xcc>)
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	3304      	adds	r3, #4
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002ec0:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <SYSVIEW_AddTask+0xc4>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	491b      	ldr	r1, [pc, #108]	; (8002f34 <SYSVIEW_AddTask+0xcc>)
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	440b      	add	r3, r1
 8002ed0:	3308      	adds	r3, #8
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002ed6:	4b15      	ldr	r3, [pc, #84]	; (8002f2c <SYSVIEW_AddTask+0xc4>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	4916      	ldr	r1, [pc, #88]	; (8002f34 <SYSVIEW_AddTask+0xcc>)
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	330c      	adds	r3, #12
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002eec:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <SYSVIEW_AddTask+0xc4>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	4910      	ldr	r1, [pc, #64]	; (8002f34 <SYSVIEW_AddTask+0xcc>)
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	3310      	adds	r3, #16
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <SYSVIEW_AddTask+0xc4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3301      	adds	r3, #1
 8002f08:	4a08      	ldr	r2, [pc, #32]	; (8002f2c <SYSVIEW_AddTask+0xc4>)
 8002f0a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f80e 	bl	8002f38 <SYSVIEW_SendTaskInfo>
 8002f1c:	e000      	b.n	8002f20 <SYSVIEW_AddTask+0xb8>
    return;
 8002f1e:	bf00      	nop

}
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	08005500 	.word	0x08005500
 8002f2c:	20012ed4 	.word	0x20012ed4
 8002f30:	08005508 	.word	0x08005508
 8002f34:	20012e34 	.word	0x20012e34

08002f38 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	; 0x28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002f46:	f107 0314 	add.w	r3, r7, #20
 8002f4a:	2214      	movs	r2, #20
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f001 fd78 	bl	8004a44 <memset>
  TaskInfo.TaskID     = TaskID;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002f68:	f107 0314 	add.w	r3, r7, #20
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f001 f8c3 	bl	80040f8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002f72:	bf00      	nop
 8002f74:	3728      	adds	r7, #40	; 0x28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002f82:	4b24      	ldr	r3, [pc, #144]	; (8003014 <_DoInit+0x98>)
 8002f84:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2203      	movs	r2, #3
 8002f8a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2203      	movs	r2, #3
 8002f90:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a20      	ldr	r2, [pc, #128]	; (8003018 <_DoInit+0x9c>)
 8002f96:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a20      	ldr	r2, [pc, #128]	; (800301c <_DoInit+0xa0>)
 8002f9c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fa4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a17      	ldr	r2, [pc, #92]	; (8003018 <_DoInit+0x9c>)
 8002fbc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a17      	ldr	r2, [pc, #92]	; (8003020 <_DoInit+0xa4>)
 8002fc2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2210      	movs	r2, #16
 8002fc8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3307      	adds	r3, #7
 8002fe0:	4a10      	ldr	r2, [pc, #64]	; (8003024 <_DoInit+0xa8>)
 8002fe2:	6810      	ldr	r0, [r2, #0]
 8002fe4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002fe6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a0e      	ldr	r2, [pc, #56]	; (8003028 <_DoInit+0xac>)
 8002fee:	6810      	ldr	r0, [r2, #0]
 8002ff0:	6018      	str	r0, [r3, #0]
 8002ff2:	8891      	ldrh	r1, [r2, #4]
 8002ff4:	7992      	ldrb	r2, [r2, #6]
 8002ff6:	8099      	strh	r1, [r3, #4]
 8002ff8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002ffa:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2220      	movs	r2, #32
 8003002:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003004:	f3bf 8f5f 	dmb	sy
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	20012ed8 	.word	0x20012ed8
 8003018:	08005558 	.word	0x08005558
 800301c:	20012f80 	.word	0x20012f80
 8003020:	20013380 	.word	0x20013380
 8003024:	08005564 	.word	0x08005564
 8003028:	08005568 	.word	0x08005568

0800302c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800302c:	b580      	push	{r7, lr}
 800302e:	b08a      	sub	sp, #40	; 0x28
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003038:	2300      	movs	r3, #0
 800303a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	429a      	cmp	r2, r3
 800304e:	d905      	bls.n	800305c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	3b01      	subs	r3, #1
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
 800305a:	e007      	b.n	800306c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	69b9      	ldr	r1, [r7, #24]
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	1acb      	subs	r3, r1, r3
 8003066:	4413      	add	r3, r2
 8003068:	3b01      	subs	r3, #1
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003076:	4293      	cmp	r3, r2
 8003078:	bf28      	it	cs
 800307a:	4613      	movcs	r3, r2
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800307e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4293      	cmp	r3, r2
 8003084:	bf28      	it	cs
 8003086:	4613      	movcs	r3, r2
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	4413      	add	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003096:	68b9      	ldr	r1, [r7, #8]
 8003098:	6978      	ldr	r0, [r7, #20]
 800309a:	f001 fcc5 	bl	8004a28 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800309e:	6a3a      	ldr	r2, [r7, #32]
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	4413      	add	r3, r2
 80030a4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	4413      	add	r3, r2
 80030ac:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80030b6:	69fa      	ldr	r2, [r7, #28]
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	4413      	add	r3, r2
 80030bc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	69fa      	ldr	r2, [r7, #28]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d101      	bne.n	80030cc <_WriteBlocking+0xa0>
      WrOff = 0u;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80030cc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	69fa      	ldr	r2, [r7, #28]
 80030d4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1b2      	bne.n	8003042 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80030dc:	6a3b      	ldr	r3, [r7, #32]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3728      	adds	r7, #40	; 0x28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b088      	sub	sp, #32
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	429a      	cmp	r2, r3
 8003108:	d911      	bls.n	800312e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	4413      	add	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	68b9      	ldr	r1, [r7, #8]
 8003118:	6938      	ldr	r0, [r7, #16]
 800311a:	f001 fc85 	bl	8004a28 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800311e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	441a      	add	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800312c:	e01f      	b.n	800316e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	4413      	add	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	6938      	ldr	r0, [r7, #16]
 8003142:	f001 fc71 	bl	8004a28 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	4413      	add	r3, r2
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4619      	mov	r1, r3
 800315e:	6938      	ldr	r0, [r7, #16]
 8003160:	f001 fc62 	bl	8004a28 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003164:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	60da      	str	r2, [r3, #12]
}
 800316e:	bf00      	nop
 8003170:	3720      	adds	r7, #32
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003176:	b480      	push	{r7}
 8003178:	b087      	sub	sp, #28
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	429a      	cmp	r2, r3
 8003190:	d808      	bhi.n	80031a4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1ad2      	subs	r2, r2, r3
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	4413      	add	r3, r2
 800319e:	3b01      	subs	r3, #1
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	e004      	b.n	80031ae <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	617b      	str	r3, [r7, #20]
  }
  return r;
 80031ae:	697b      	ldr	r3, [r7, #20]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	371c      	adds	r7, #28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08c      	sub	sp, #48	; 0x30
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80031c8:	4b3e      	ldr	r3, [pc, #248]	; (80032c4 <SEGGER_RTT_ReadNoLock+0x108>)
 80031ca:	623b      	str	r3, [r7, #32]
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <SEGGER_RTT_ReadNoLock+0x1e>
 80031d6:	f7ff fed1 	bl	8002f7c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4613      	mov	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4413      	add	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	3360      	adds	r3, #96	; 0x60
 80031e6:	4a37      	ldr	r2, [pc, #220]	; (80032c4 <SEGGER_RTT_ReadNoLock+0x108>)
 80031e8:	4413      	add	r3, r2
 80031ea:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80031fc:	2300      	movs	r3, #0
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	429a      	cmp	r2, r3
 8003206:	d92b      	bls.n	8003260 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4293      	cmp	r3, r2
 8003218:	bf28      	it	cs
 800321a:	4613      	movcs	r3, r2
 800321c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	4413      	add	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	6939      	ldr	r1, [r7, #16]
 800322c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800322e:	f001 fbfb 	bl	8004a28 <memcpy>
    NumBytesRead += NumBytesRem;
 8003232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	4413      	add	r3, r2
 8003238:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800323a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	4413      	add	r3, r2
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800324a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	4413      	add	r3, r2
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003258:	429a      	cmp	r2, r3
 800325a:	d101      	bne.n	8003260 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800325c:	2300      	movs	r3, #0
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4293      	cmp	r3, r2
 800326e:	bf28      	it	cs
 8003270:	4613      	movcs	r3, r2
 8003272:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d019      	beq.n	80032ae <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003280:	4413      	add	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	6939      	ldr	r1, [r7, #16]
 8003288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800328a:	f001 fbcd 	bl	8004a28 <memcpy>
    NumBytesRead += NumBytesRem;
 800328e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	4413      	add	r3, r2
 8003294:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	4413      	add	r3, r2
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80032a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	4413      	add	r3, r2
 80032ac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80032ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032b8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80032ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3730      	adds	r7, #48	; 0x30
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	20012ed8 	.word	0x20012ed8

080032c8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	4613      	mov	r3, r2
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	4413      	add	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	4a1f      	ldr	r2, [pc, #124]	; (8003364 <SEGGER_RTT_WriteNoLock+0x9c>)
 80032e6:	4413      	add	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d029      	beq.n	8003346 <SEGGER_RTT_WriteNoLock+0x7e>
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d82e      	bhi.n	8003354 <SEGGER_RTT_WriteNoLock+0x8c>
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <SEGGER_RTT_WriteNoLock+0x38>
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d013      	beq.n	8003326 <SEGGER_RTT_WriteNoLock+0x5e>
 80032fe:	e029      	b.n	8003354 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003300:	6978      	ldr	r0, [r7, #20]
 8003302:	f7ff ff38 	bl	8003176 <_GetAvailWriteSpace>
 8003306:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	429a      	cmp	r2, r3
 800330e:	d202      	bcs.n	8003316 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8003310:	2300      	movs	r3, #0
 8003312:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003314:	e021      	b.n	800335a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	69b9      	ldr	r1, [r7, #24]
 800331e:	6978      	ldr	r0, [r7, #20]
 8003320:	f7ff fee1 	bl	80030e6 <_WriteNoCheck>
    break;
 8003324:	e019      	b.n	800335a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003326:	6978      	ldr	r0, [r7, #20]
 8003328:	f7ff ff25 	bl	8003176 <_GetAvailWriteSpace>
 800332c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4293      	cmp	r3, r2
 8003334:	bf28      	it	cs
 8003336:	4613      	movcs	r3, r2
 8003338:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	69b9      	ldr	r1, [r7, #24]
 800333e:	6978      	ldr	r0, [r7, #20]
 8003340:	f7ff fed1 	bl	80030e6 <_WriteNoCheck>
    break;
 8003344:	e009      	b.n	800335a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	69b9      	ldr	r1, [r7, #24]
 800334a:	6978      	ldr	r0, [r7, #20]
 800334c:	f7ff fe6e 	bl	800302c <_WriteBlocking>
 8003350:	61f8      	str	r0, [r7, #28]
    break;
 8003352:	e002      	b.n	800335a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]
    break;
 8003358:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800335a:	69fb      	ldr	r3, [r7, #28]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3720      	adds	r7, #32
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	20012ed8 	.word	0x20012ed8

08003368 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003374:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <SEGGER_RTT_Write+0x48>)
 8003376:	61fb      	str	r3, [r7, #28]
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <SEGGER_RTT_Write+0x1e>
 8003382:	f7ff fdfb 	bl	8002f7c <_DoInit>
  SEGGER_RTT_LOCK();
 8003386:	f3ef 8311 	mrs	r3, BASEPRI
 800338a:	f04f 0120 	mov.w	r1, #32
 800338e:	f381 8811 	msr	BASEPRI, r1
 8003392:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	68b9      	ldr	r1, [r7, #8]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f7ff ff95 	bl	80032c8 <SEGGER_RTT_WriteNoLock>
 800339e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80033a6:	697b      	ldr	r3, [r7, #20]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3720      	adds	r7, #32
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20012ed8 	.word	0x20012ed8

080033b4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b088      	sub	sp, #32
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80033c2:	4b3d      	ldr	r3, [pc, #244]	; (80034b8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80033c4:	61bb      	str	r3, [r7, #24]
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80033d0:	f7ff fdd4 	bl	8002f7c <_DoInit>
  SEGGER_RTT_LOCK();
 80033d4:	f3ef 8311 	mrs	r3, BASEPRI
 80033d8:	f04f 0120 	mov.w	r1, #32
 80033dc:	f381 8811 	msr	BASEPRI, r1
 80033e0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80033e2:	4b35      	ldr	r3, [pc, #212]	; (80034b8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80033e4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80033ea:	6939      	ldr	r1, [r7, #16]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	4613      	mov	r3, r2
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	4413      	add	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	440b      	add	r3, r1
 80033fa:	3304      	adds	r3, #4
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d008      	beq.n	8003414 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3301      	adds	r3, #1
 8003406:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	429a      	cmp	r2, r3
 8003410:	dbeb      	blt.n	80033ea <SEGGER_RTT_AllocUpBuffer+0x36>
 8003412:	e000      	b.n	8003416 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003414:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	69fa      	ldr	r2, [r7, #28]
 800341c:	429a      	cmp	r2, r3
 800341e:	da3f      	bge.n	80034a0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003420:	6939      	ldr	r1, [r7, #16]
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	4613      	mov	r3, r2
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	4413      	add	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	440b      	add	r3, r1
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003434:	6939      	ldr	r1, [r7, #16]
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	4613      	mov	r3, r2
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	4413      	add	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	440b      	add	r3, r1
 8003444:	3304      	adds	r3, #4
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800344a:	6939      	ldr	r1, [r7, #16]
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	4613      	mov	r3, r2
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4413      	add	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	440b      	add	r3, r1
 8003458:	3320      	adds	r3, #32
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800345e:	6939      	ldr	r1, [r7, #16]
 8003460:	69fa      	ldr	r2, [r7, #28]
 8003462:	4613      	mov	r3, r2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	4413      	add	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	440b      	add	r3, r1
 800346c:	3328      	adds	r3, #40	; 0x28
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003472:	6939      	ldr	r1, [r7, #16]
 8003474:	69fa      	ldr	r2, [r7, #28]
 8003476:	4613      	mov	r3, r2
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	4413      	add	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	440b      	add	r3, r1
 8003480:	3324      	adds	r3, #36	; 0x24
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003486:	6939      	ldr	r1, [r7, #16]
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	4613      	mov	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	4413      	add	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	440b      	add	r3, r1
 8003494:	332c      	adds	r3, #44	; 0x2c
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800349a:	f3bf 8f5f 	dmb	sy
 800349e:	e002      	b.n	80034a6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80034a0:	f04f 33ff 	mov.w	r3, #4294967295
 80034a4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80034ac:	69fb      	ldr	r3, [r7, #28]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3720      	adds	r7, #32
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20012ed8 	.word	0x20012ed8

080034bc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b088      	sub	sp, #32
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80034ca:	4b33      	ldr	r3, [pc, #204]	; (8003598 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80034cc:	61bb      	str	r3, [r7, #24]
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80034d8:	f7ff fd50 	bl	8002f7c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80034dc:	4b2e      	ldr	r3, [pc, #184]	; (8003598 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80034de:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	461a      	mov	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d24d      	bcs.n	8003588 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80034ec:	f3ef 8311 	mrs	r3, BASEPRI
 80034f0:	f04f 0120 	mov.w	r1, #32
 80034f4:	f381 8811 	msr	BASEPRI, r1
 80034f8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d031      	beq.n	8003564 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003500:	6979      	ldr	r1, [r7, #20]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4613      	mov	r3, r2
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	4413      	add	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	440b      	add	r3, r1
 800350e:	3360      	adds	r3, #96	; 0x60
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003514:	6979      	ldr	r1, [r7, #20]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4613      	mov	r3, r2
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	4413      	add	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	440b      	add	r3, r1
 8003522:	3364      	adds	r3, #100	; 0x64
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003528:	6979      	ldr	r1, [r7, #20]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4613      	mov	r3, r2
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	4413      	add	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	440b      	add	r3, r1
 8003536:	3368      	adds	r3, #104	; 0x68
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800353c:	6979      	ldr	r1, [r7, #20]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4613      	mov	r3, r2
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	4413      	add	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	440b      	add	r3, r1
 800354a:	3370      	adds	r3, #112	; 0x70
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003550:	6979      	ldr	r1, [r7, #20]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4613      	mov	r3, r2
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	4413      	add	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	440b      	add	r3, r1
 800355e:	336c      	adds	r3, #108	; 0x6c
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003564:	6979      	ldr	r1, [r7, #20]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4613      	mov	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	440b      	add	r3, r1
 8003572:	3374      	adds	r3, #116	; 0x74
 8003574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003576:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003578:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003582:	2300      	movs	r3, #0
 8003584:	61fb      	str	r3, [r7, #28]
 8003586:	e002      	b.n	800358e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003588:	f04f 33ff 	mov.w	r3, #4294967295
 800358c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800358e:	69fb      	ldr	r3, [r7, #28]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3720      	adds	r7, #32
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	20012ed8 	.word	0x20012ed8

0800359c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80035ac:	e002      	b.n	80035b4 <_EncodeStr+0x18>
    Len++;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	3301      	adds	r3, #1
 80035b2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4413      	add	r3, r2
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1f6      	bne.n	80035ae <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d901      	bls.n	80035cc <_EncodeStr+0x30>
    Len = Limit;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	2bfe      	cmp	r3, #254	; 0xfe
 80035d0:	d806      	bhi.n	80035e0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	60fa      	str	r2, [r7, #12]
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	701a      	strb	r2, [r3, #0]
 80035de:	e011      	b.n	8003604 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	60fa      	str	r2, [r7, #12]
 80035e6:	22ff      	movs	r2, #255	; 0xff
 80035e8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	60fa      	str	r2, [r7, #12]
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	0a19      	lsrs	r1, r3, #8
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	60fa      	str	r2, [r7, #12]
 8003600:	b2ca      	uxtb	r2, r1
 8003602:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003608:	e00a      	b.n	8003620 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	1c53      	adds	r3, r2, #1
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	1c59      	adds	r1, r3, #1
 8003614:	60f9      	str	r1, [r7, #12]
 8003616:	7812      	ldrb	r2, [r2, #0]
 8003618:	701a      	strb	r2, [r3, #0]
    n++;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	3301      	adds	r3, #1
 800361e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	429a      	cmp	r2, r3
 8003626:	d3f0      	bcc.n	800360a <_EncodeStr+0x6e>
  }
  return pPayload;
 8003628:	68fb      	ldr	r3, [r7, #12]
}
 800362a:	4618      	mov	r0, r3
 800362c:	371c      	adds	r7, #28
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3304      	adds	r3, #4
}
 8003642:	4618      	mov	r0, r3
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
	...

08003650 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003656:	4b36      	ldr	r3, [pc, #216]	; (8003730 <_HandleIncomingPacket+0xe0>)
 8003658:	7e1b      	ldrb	r3, [r3, #24]
 800365a:	4618      	mov	r0, r3
 800365c:	1cfb      	adds	r3, r7, #3
 800365e:	2201      	movs	r2, #1
 8003660:	4619      	mov	r1, r3
 8003662:	f7ff fdab 	bl	80031bc <SEGGER_RTT_ReadNoLock>
 8003666:	4603      	mov	r3, r0
 8003668:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	dd54      	ble.n	800371a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	2b80      	cmp	r3, #128	; 0x80
 8003674:	d032      	beq.n	80036dc <_HandleIncomingPacket+0x8c>
 8003676:	2b80      	cmp	r3, #128	; 0x80
 8003678:	dc42      	bgt.n	8003700 <_HandleIncomingPacket+0xb0>
 800367a:	2b07      	cmp	r3, #7
 800367c:	dc16      	bgt.n	80036ac <_HandleIncomingPacket+0x5c>
 800367e:	2b00      	cmp	r3, #0
 8003680:	dd3e      	ble.n	8003700 <_HandleIncomingPacket+0xb0>
 8003682:	3b01      	subs	r3, #1
 8003684:	2b06      	cmp	r3, #6
 8003686:	d83b      	bhi.n	8003700 <_HandleIncomingPacket+0xb0>
 8003688:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <_HandleIncomingPacket+0x40>)
 800368a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368e:	bf00      	nop
 8003690:	080036b3 	.word	0x080036b3
 8003694:	080036b9 	.word	0x080036b9
 8003698:	080036bf 	.word	0x080036bf
 800369c:	080036c5 	.word	0x080036c5
 80036a0:	080036cb 	.word	0x080036cb
 80036a4:	080036d1 	.word	0x080036d1
 80036a8:	080036d7 	.word	0x080036d7
 80036ac:	2b7f      	cmp	r3, #127	; 0x7f
 80036ae:	d036      	beq.n	800371e <_HandleIncomingPacket+0xce>
 80036b0:	e026      	b.n	8003700 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80036b2:	f000 fba7 	bl	8003e04 <SEGGER_SYSVIEW_Start>
      break;
 80036b6:	e037      	b.n	8003728 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80036b8:	f000 fc5e 	bl	8003f78 <SEGGER_SYSVIEW_Stop>
      break;
 80036bc:	e034      	b.n	8003728 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80036be:	f000 fe37 	bl	8004330 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80036c2:	e031      	b.n	8003728 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80036c4:	f000 fdfc 	bl	80042c0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80036c8:	e02e      	b.n	8003728 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80036ca:	f000 fc7b 	bl	8003fc4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80036ce:	e02b      	b.n	8003728 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80036d0:	f001 f8ca 	bl	8004868 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80036d4:	e028      	b.n	8003728 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80036d6:	f001 f8a9 	bl	800482c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80036da:	e025      	b.n	8003728 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80036dc:	4b14      	ldr	r3, [pc, #80]	; (8003730 <_HandleIncomingPacket+0xe0>)
 80036de:	7e1b      	ldrb	r3, [r3, #24]
 80036e0:	4618      	mov	r0, r3
 80036e2:	1cfb      	adds	r3, r7, #3
 80036e4:	2201      	movs	r2, #1
 80036e6:	4619      	mov	r1, r3
 80036e8:	f7ff fd68 	bl	80031bc <SEGGER_RTT_ReadNoLock>
 80036ec:	4603      	mov	r3, r0
 80036ee:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	dd15      	ble.n	8003722 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80036f6:	78fb      	ldrb	r3, [r7, #3]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f001 f817 	bl	800472c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80036fe:	e010      	b.n	8003722 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	b25b      	sxtb	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	da0e      	bge.n	8003726 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003708:	4b09      	ldr	r3, [pc, #36]	; (8003730 <_HandleIncomingPacket+0xe0>)
 800370a:	7e1b      	ldrb	r3, [r3, #24]
 800370c:	4618      	mov	r0, r3
 800370e:	1cfb      	adds	r3, r7, #3
 8003710:	2201      	movs	r2, #1
 8003712:	4619      	mov	r1, r3
 8003714:	f7ff fd52 	bl	80031bc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003718:	e005      	b.n	8003726 <_HandleIncomingPacket+0xd6>
    }
  }
 800371a:	bf00      	nop
 800371c:	e004      	b.n	8003728 <_HandleIncomingPacket+0xd8>
      break;
 800371e:	bf00      	nop
 8003720:	e002      	b.n	8003728 <_HandleIncomingPacket+0xd8>
      break;
 8003722:	bf00      	nop
 8003724:	e000      	b.n	8003728 <_HandleIncomingPacket+0xd8>
      break;
 8003726:	bf00      	nop
}
 8003728:	bf00      	nop
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20014398 	.word	0x20014398

08003734 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003734:	b580      	push	{r7, lr}
 8003736:	b08c      	sub	sp, #48	; 0x30
 8003738:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800373a:	2301      	movs	r3, #1
 800373c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800373e:	1d3b      	adds	r3, r7, #4
 8003740:	3301      	adds	r3, #1
 8003742:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003748:	4b31      	ldr	r3, [pc, #196]	; (8003810 <_TrySendOverflowPacket+0xdc>)
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	62bb      	str	r3, [r7, #40]	; 0x28
 800374e:	e00b      	b.n	8003768 <_TrySendOverflowPacket+0x34>
 8003750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003752:	b2da      	uxtb	r2, r3
 8003754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003756:	1c59      	adds	r1, r3, #1
 8003758:	62f9      	str	r1, [r7, #44]	; 0x2c
 800375a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	09db      	lsrs	r3, r3, #7
 8003766:	62bb      	str	r3, [r7, #40]	; 0x28
 8003768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376a:	2b7f      	cmp	r3, #127	; 0x7f
 800376c:	d8f0      	bhi.n	8003750 <_TrySendOverflowPacket+0x1c>
 800376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]
 800377a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800377e:	4b25      	ldr	r3, [pc, #148]	; (8003814 <_TrySendOverflowPacket+0xe0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003784:	4b22      	ldr	r3, [pc, #136]	; (8003810 <_TrySendOverflowPacket+0xdc>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	623b      	str	r3, [r7, #32]
 8003796:	e00b      	b.n	80037b0 <_TrySendOverflowPacket+0x7c>
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	b2da      	uxtb	r2, r3
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	1c59      	adds	r1, r3, #1
 80037a0:	6279      	str	r1, [r7, #36]	; 0x24
 80037a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	701a      	strb	r2, [r3, #0]
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	09db      	lsrs	r3, r3, #7
 80037ae:	623b      	str	r3, [r7, #32]
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	2b7f      	cmp	r3, #127	; 0x7f
 80037b4:	d8f0      	bhi.n	8003798 <_TrySendOverflowPacket+0x64>
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	627a      	str	r2, [r7, #36]	; 0x24
 80037bc:	6a3a      	ldr	r2, [r7, #32]
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80037c6:	4b12      	ldr	r3, [pc, #72]	; (8003810 <_TrySendOverflowPacket+0xdc>)
 80037c8:	785b      	ldrb	r3, [r3, #1]
 80037ca:	4618      	mov	r0, r3
 80037cc:	1d3b      	adds	r3, r7, #4
 80037ce:	69fa      	ldr	r2, [r7, #28]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	461a      	mov	r2, r3
 80037d4:	1d3b      	adds	r3, r7, #4
 80037d6:	4619      	mov	r1, r3
 80037d8:	f7fc fd02 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80037dc:	4603      	mov	r3, r0
 80037de:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80037e6:	4a0a      	ldr	r2, [pc, #40]	; (8003810 <_TrySendOverflowPacket+0xdc>)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80037ec:	4b08      	ldr	r3, [pc, #32]	; (8003810 <_TrySendOverflowPacket+0xdc>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <_TrySendOverflowPacket+0xdc>)
 80037f6:	701a      	strb	r2, [r3, #0]
 80037f8:	e004      	b.n	8003804 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80037fa:	4b05      	ldr	r3, [pc, #20]	; (8003810 <_TrySendOverflowPacket+0xdc>)
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	3301      	adds	r3, #1
 8003800:	4a03      	ldr	r2, [pc, #12]	; (8003810 <_TrySendOverflowPacket+0xdc>)
 8003802:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003804:	693b      	ldr	r3, [r7, #16]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3730      	adds	r7, #48	; 0x30
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20014398 	.word	0x20014398
 8003814:	e0001004 	.word	0xe0001004

08003818 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	; 0x28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003824:	4b6c      	ldr	r3, [pc, #432]	; (80039d8 <_SendPacket+0x1c0>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d010      	beq.n	800384e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800382c:	4b6a      	ldr	r3, [pc, #424]	; (80039d8 <_SendPacket+0x1c0>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80a3 	beq.w	800397c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003836:	4b68      	ldr	r3, [pc, #416]	; (80039d8 <_SendPacket+0x1c0>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d109      	bne.n	8003852 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800383e:	f7ff ff79 	bl	8003734 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003842:	4b65      	ldr	r3, [pc, #404]	; (80039d8 <_SendPacket+0x1c0>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b01      	cmp	r3, #1
 8003848:	f040 809a 	bne.w	8003980 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800384c:	e001      	b.n	8003852 <_SendPacket+0x3a>
    goto Send;
 800384e:	bf00      	nop
 8003850:	e000      	b.n	8003854 <_SendPacket+0x3c>
Send:
 8003852:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b1f      	cmp	r3, #31
 8003858:	d809      	bhi.n	800386e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800385a:	4b5f      	ldr	r3, [pc, #380]	; (80039d8 <_SendPacket+0x1c0>)
 800385c:	69da      	ldr	r2, [r3, #28]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	fa22 f303 	lsr.w	r3, r2, r3
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	f040 808b 	bne.w	8003984 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b17      	cmp	r3, #23
 8003872:	d807      	bhi.n	8003884 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3b01      	subs	r3, #1
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	b2da      	uxtb	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	701a      	strb	r2, [r3, #0]
 8003882:	e03d      	b.n	8003900 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	2b7f      	cmp	r3, #127	; 0x7f
 8003890:	d912      	bls.n	80038b8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	09da      	lsrs	r2, r3, #7
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3b01      	subs	r3, #1
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	3a01      	subs	r2, #1
 80038aa:	60fa      	str	r2, [r7, #12]
 80038ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	701a      	strb	r2, [r3, #0]
 80038b6:	e006      	b.n	80038c6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b7f      	cmp	r3, #127	; 0x7f
 80038ca:	d912      	bls.n	80038f2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	09da      	lsrs	r2, r3, #7
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	3a01      	subs	r2, #1
 80038e4:	60fa      	str	r2, [r7, #12]
 80038e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	701a      	strb	r2, [r3, #0]
 80038f0:	e006      	b.n	8003900 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	3b01      	subs	r3, #1
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003900:	4b36      	ldr	r3, [pc, #216]	; (80039dc <_SendPacket+0x1c4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003906:	4b34      	ldr	r3, [pc, #208]	; (80039d8 <_SendPacket+0x1c0>)
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	627b      	str	r3, [r7, #36]	; 0x24
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	623b      	str	r3, [r7, #32]
 8003918:	e00b      	b.n	8003932 <_SendPacket+0x11a>
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	b2da      	uxtb	r2, r3
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	1c59      	adds	r1, r3, #1
 8003922:	6279      	str	r1, [r7, #36]	; 0x24
 8003924:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	701a      	strb	r2, [r3, #0]
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	09db      	lsrs	r3, r3, #7
 8003930:	623b      	str	r3, [r7, #32]
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	2b7f      	cmp	r3, #127	; 0x7f
 8003936:	d8f0      	bhi.n	800391a <_SendPacket+0x102>
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	627a      	str	r2, [r7, #36]	; 0x24
 800393e:	6a3a      	ldr	r2, [r7, #32]
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	701a      	strb	r2, [r3, #0]
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003948:	4b23      	ldr	r3, [pc, #140]	; (80039d8 <_SendPacket+0x1c0>)
 800394a:	785b      	ldrb	r3, [r3, #1]
 800394c:	4618      	mov	r0, r3
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	461a      	mov	r2, r3
 8003956:	68f9      	ldr	r1, [r7, #12]
 8003958:	f7fc fc42 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800395c:	4603      	mov	r3, r0
 800395e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003966:	4a1c      	ldr	r2, [pc, #112]	; (80039d8 <_SendPacket+0x1c0>)
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	60d3      	str	r3, [r2, #12]
 800396c:	e00b      	b.n	8003986 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800396e:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <_SendPacket+0x1c0>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	3301      	adds	r3, #1
 8003974:	b2da      	uxtb	r2, r3
 8003976:	4b18      	ldr	r3, [pc, #96]	; (80039d8 <_SendPacket+0x1c0>)
 8003978:	701a      	strb	r2, [r3, #0]
 800397a:	e004      	b.n	8003986 <_SendPacket+0x16e>
    goto SendDone;
 800397c:	bf00      	nop
 800397e:	e002      	b.n	8003986 <_SendPacket+0x16e>
      goto SendDone;
 8003980:	bf00      	nop
 8003982:	e000      	b.n	8003986 <_SendPacket+0x16e>
      goto SendDone;
 8003984:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003986:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <_SendPacket+0x1c0>)
 8003988:	7e1b      	ldrb	r3, [r3, #24]
 800398a:	4619      	mov	r1, r3
 800398c:	4a14      	ldr	r2, [pc, #80]	; (80039e0 <_SendPacket+0x1c8>)
 800398e:	460b      	mov	r3, r1
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	440b      	add	r3, r1
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	4413      	add	r3, r2
 8003998:	336c      	adds	r3, #108	; 0x6c
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <_SendPacket+0x1c0>)
 800399e:	7e1b      	ldrb	r3, [r3, #24]
 80039a0:	4618      	mov	r0, r3
 80039a2:	490f      	ldr	r1, [pc, #60]	; (80039e0 <_SendPacket+0x1c8>)
 80039a4:	4603      	mov	r3, r0
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	4403      	add	r3, r0
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	440b      	add	r3, r1
 80039ae:	3370      	adds	r3, #112	; 0x70
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d00b      	beq.n	80039ce <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80039b6:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <_SendPacket+0x1c0>)
 80039b8:	789b      	ldrb	r3, [r3, #2]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d107      	bne.n	80039ce <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <_SendPacket+0x1c0>)
 80039c0:	2201      	movs	r2, #1
 80039c2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80039c4:	f7ff fe44 	bl	8003650 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80039c8:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <_SendPacket+0x1c0>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80039ce:	bf00      	nop
 80039d0:	3728      	adds	r7, #40	; 0x28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20014398 	.word	0x20014398
 80039dc:	e0001004 	.word	0xe0001004
 80039e0:	20012ed8 	.word	0x20012ed8

080039e4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
 80039f0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80039f2:	2300      	movs	r3, #0
 80039f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039f8:	4917      	ldr	r1, [pc, #92]	; (8003a58 <SEGGER_SYSVIEW_Init+0x74>)
 80039fa:	4818      	ldr	r0, [pc, #96]	; (8003a5c <SEGGER_SYSVIEW_Init+0x78>)
 80039fc:	f7ff fcda 	bl	80033b4 <SEGGER_RTT_AllocUpBuffer>
 8003a00:	4603      	mov	r3, r0
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	4b16      	ldr	r3, [pc, #88]	; (8003a60 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a06:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003a08:	4b15      	ldr	r3, [pc, #84]	; (8003a60 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a0a:	785a      	ldrb	r2, [r3, #1]
 8003a0c:	4b14      	ldr	r3, [pc, #80]	; (8003a60 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a0e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003a10:	4b13      	ldr	r3, [pc, #76]	; (8003a60 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a12:	7e1b      	ldrb	r3, [r3, #24]
 8003a14:	4618      	mov	r0, r3
 8003a16:	2300      	movs	r3, #0
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	4a11      	ldr	r2, [pc, #68]	; (8003a64 <SEGGER_SYSVIEW_Init+0x80>)
 8003a1e:	490f      	ldr	r1, [pc, #60]	; (8003a5c <SEGGER_SYSVIEW_Init+0x78>)
 8003a20:	f7ff fd4c 	bl	80034bc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003a24:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003a2a:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <SEGGER_SYSVIEW_Init+0x84>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a0c      	ldr	r2, [pc, #48]	; (8003a60 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a30:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003a32:	4a0b      	ldr	r2, [pc, #44]	; (8003a60 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003a38:	4a09      	ldr	r2, [pc, #36]	; (8003a60 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003a3e:	4a08      	ldr	r2, [pc, #32]	; (8003a60 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003a44:	4a06      	ldr	r2, [pc, #24]	; (8003a60 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003a4a:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003a50:	bf00      	nop
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20013390 	.word	0x20013390
 8003a5c:	08005570 	.word	0x08005570
 8003a60:	20014398 	.word	0x20014398
 8003a64:	20014390 	.word	0x20014390
 8003a68:	e0001004 	.word	0xe0001004

08003a6c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003a74:	4a04      	ldr	r2, [pc, #16]	; (8003a88 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6113      	str	r3, [r2, #16]
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20014398 	.word	0x20014398

08003a8c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003a94:	f3ef 8311 	mrs	r3, BASEPRI
 8003a98:	f04f 0120 	mov.w	r1, #32
 8003a9c:	f381 8811 	msr	BASEPRI, r1
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	4808      	ldr	r0, [pc, #32]	; (8003ac4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003aa4:	f7ff fdc7 	bl	8003636 <_PreparePacket>
 8003aa8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	68b9      	ldr	r1, [r7, #8]
 8003aae:	68b8      	ldr	r0, [r7, #8]
 8003ab0:	f7ff feb2 	bl	8003818 <_SendPacket>
  RECORD_END();
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f383 8811 	msr	BASEPRI, r3
}
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	200143c8 	.word	0x200143c8

08003ac8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003ad2:	f3ef 8311 	mrs	r3, BASEPRI
 8003ad6:	f04f 0120 	mov.w	r1, #32
 8003ada:	f381 8811 	msr	BASEPRI, r1
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	4816      	ldr	r0, [pc, #88]	; (8003b3c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003ae2:	f7ff fda8 	bl	8003636 <_PreparePacket>
 8003ae6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	61bb      	str	r3, [r7, #24]
 8003af4:	e00b      	b.n	8003b0e <SEGGER_SYSVIEW_RecordU32+0x46>
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	1c59      	adds	r1, r3, #1
 8003afe:	61f9      	str	r1, [r7, #28]
 8003b00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	701a      	strb	r2, [r3, #0]
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	09db      	lsrs	r3, r3, #7
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	2b7f      	cmp	r3, #127	; 0x7f
 8003b12:	d8f0      	bhi.n	8003af6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	61fa      	str	r2, [r7, #28]
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	701a      	strb	r2, [r3, #0]
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	68f9      	ldr	r1, [r7, #12]
 8003b28:	6938      	ldr	r0, [r7, #16]
 8003b2a:	f7ff fe75 	bl	8003818 <_SendPacket>
  RECORD_END();
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f383 8811 	msr	BASEPRI, r3
}
 8003b34:	bf00      	nop
 8003b36:	3720      	adds	r7, #32
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	200143c8 	.word	0x200143c8

08003b40 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08c      	sub	sp, #48	; 0x30
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003b4c:	f3ef 8311 	mrs	r3, BASEPRI
 8003b50:	f04f 0120 	mov.w	r1, #32
 8003b54:	f381 8811 	msr	BASEPRI, r1
 8003b58:	61fb      	str	r3, [r7, #28]
 8003b5a:	4825      	ldr	r0, [pc, #148]	; (8003bf0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003b5c:	f7ff fd6b 	bl	8003636 <_PreparePacket>
 8003b60:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b6e:	e00b      	b.n	8003b88 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b76:	1c59      	adds	r1, r3, #1
 8003b78:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003b7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b84:	09db      	lsrs	r3, r3, #7
 8003b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8a:	2b7f      	cmp	r3, #127	; 0x7f
 8003b8c:	d8f0      	bhi.n	8003b70 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	701a      	strb	r2, [r3, #0]
 8003b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	623b      	str	r3, [r7, #32]
 8003ba6:	e00b      	b.n	8003bc0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	1c59      	adds	r1, r3, #1
 8003bb0:	6279      	str	r1, [r7, #36]	; 0x24
 8003bb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	701a      	strb	r2, [r3, #0]
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	09db      	lsrs	r3, r3, #7
 8003bbe:	623b      	str	r3, [r7, #32]
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	2b7f      	cmp	r3, #127	; 0x7f
 8003bc4:	d8f0      	bhi.n	8003ba8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	627a      	str	r2, [r7, #36]	; 0x24
 8003bcc:	6a3a      	ldr	r2, [r7, #32]
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	701a      	strb	r2, [r3, #0]
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	6979      	ldr	r1, [r7, #20]
 8003bda:	69b8      	ldr	r0, [r7, #24]
 8003bdc:	f7ff fe1c 	bl	8003818 <_SendPacket>
  RECORD_END();
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f383 8811 	msr	BASEPRI, r3
}
 8003be6:	bf00      	nop
 8003be8:	3730      	adds	r7, #48	; 0x30
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	200143c8 	.word	0x200143c8

08003bf4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08e      	sub	sp, #56	; 0x38
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8003c02:	f3ef 8311 	mrs	r3, BASEPRI
 8003c06:	f04f 0120 	mov.w	r1, #32
 8003c0a:	f381 8811 	msr	BASEPRI, r1
 8003c0e:	61fb      	str	r3, [r7, #28]
 8003c10:	4832      	ldr	r0, [pc, #200]	; (8003cdc <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8003c12:	f7ff fd10 	bl	8003636 <_PreparePacket>
 8003c16:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	633b      	str	r3, [r7, #48]	; 0x30
 8003c24:	e00b      	b.n	8003c3e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c2c:	1c59      	adds	r1, r3, #1
 8003c2e:	6379      	str	r1, [r7, #52]	; 0x34
 8003c30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	701a      	strb	r2, [r3, #0]
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	09db      	lsrs	r3, r3, #7
 8003c3c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	2b7f      	cmp	r3, #127	; 0x7f
 8003c42:	d8f0      	bhi.n	8003c26 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8003c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	637a      	str	r2, [r7, #52]	; 0x34
 8003c4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	701a      	strb	r2, [r3, #0]
 8003c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c52:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c5c:	e00b      	b.n	8003c76 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c64:	1c59      	adds	r1, r3, #1
 8003c66:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003c68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	701a      	strb	r2, [r3, #0]
 8003c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c72:	09db      	lsrs	r3, r3, #7
 8003c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	2b7f      	cmp	r3, #127	; 0x7f
 8003c7a:	d8f0      	bhi.n	8003c5e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8003c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	701a      	strb	r2, [r3, #0]
 8003c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	623b      	str	r3, [r7, #32]
 8003c94:	e00b      	b.n	8003cae <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	1c59      	adds	r1, r3, #1
 8003c9e:	6279      	str	r1, [r7, #36]	; 0x24
 8003ca0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	701a      	strb	r2, [r3, #0]
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	09db      	lsrs	r3, r3, #7
 8003cac:	623b      	str	r3, [r7, #32]
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	2b7f      	cmp	r3, #127	; 0x7f
 8003cb2:	d8f0      	bhi.n	8003c96 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	627a      	str	r2, [r7, #36]	; 0x24
 8003cba:	6a3a      	ldr	r2, [r7, #32]
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	701a      	strb	r2, [r3, #0]
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	6979      	ldr	r1, [r7, #20]
 8003cc8:	69b8      	ldr	r0, [r7, #24]
 8003cca:	f7ff fda5 	bl	8003818 <_SendPacket>
  RECORD_END();
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	f383 8811 	msr	BASEPRI, r3
}
 8003cd4:	bf00      	nop
 8003cd6:	3738      	adds	r7, #56	; 0x38
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	200143c8 	.word	0x200143c8

08003ce0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b090      	sub	sp, #64	; 0x40
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003cee:	f3ef 8311 	mrs	r3, BASEPRI
 8003cf2:	f04f 0120 	mov.w	r1, #32
 8003cf6:	f381 8811 	msr	BASEPRI, r1
 8003cfa:	61fb      	str	r3, [r7, #28]
 8003cfc:	4840      	ldr	r0, [pc, #256]	; (8003e00 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003cfe:	f7ff fc9a 	bl	8003636 <_PreparePacket>
 8003d02:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d10:	e00b      	b.n	8003d2a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8003d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d18:	1c59      	adds	r1, r3, #1
 8003d1a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003d1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	701a      	strb	r2, [r3, #0]
 8003d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d26:	09db      	lsrs	r3, r3, #7
 8003d28:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8003d2e:	d8f0      	bhi.n	8003d12 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	637b      	str	r3, [r7, #52]	; 0x34
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	633b      	str	r3, [r7, #48]	; 0x30
 8003d48:	e00b      	b.n	8003d62 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d50:	1c59      	adds	r1, r3, #1
 8003d52:	6379      	str	r1, [r7, #52]	; 0x34
 8003d54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5e:	09db      	lsrs	r3, r3, #7
 8003d60:	633b      	str	r3, [r7, #48]	; 0x30
 8003d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d64:	2b7f      	cmp	r3, #127	; 0x7f
 8003d66:	d8f0      	bhi.n	8003d4a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	637a      	str	r2, [r7, #52]	; 0x34
 8003d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d70:	b2d2      	uxtb	r2, r2
 8003d72:	701a      	strb	r2, [r3, #0]
 8003d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d76:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d80:	e00b      	b.n	8003d9a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d88:	1c59      	adds	r1, r3, #1
 8003d8a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003d8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	701a      	strb	r2, [r3, #0]
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	09db      	lsrs	r3, r3, #7
 8003d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8003d9e:	d8f0      	bhi.n	8003d82 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	701a      	strb	r2, [r3, #0]
 8003dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
 8003db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db6:	623b      	str	r3, [r7, #32]
 8003db8:	e00b      	b.n	8003dd2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	1c59      	adds	r1, r3, #1
 8003dc2:	6279      	str	r1, [r7, #36]	; 0x24
 8003dc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	701a      	strb	r2, [r3, #0]
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	09db      	lsrs	r3, r3, #7
 8003dd0:	623b      	str	r3, [r7, #32]
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	2b7f      	cmp	r3, #127	; 0x7f
 8003dd6:	d8f0      	bhi.n	8003dba <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	627a      	str	r2, [r7, #36]	; 0x24
 8003dde:	6a3a      	ldr	r2, [r7, #32]
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	701a      	strb	r2, [r3, #0]
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	6979      	ldr	r1, [r7, #20]
 8003dec:	69b8      	ldr	r0, [r7, #24]
 8003dee:	f7ff fd13 	bl	8003818 <_SendPacket>
  RECORD_END();
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	f383 8811 	msr	BASEPRI, r3
}
 8003df8:	bf00      	nop
 8003dfa:	3740      	adds	r7, #64	; 0x40
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	200143c8 	.word	0x200143c8

08003e04 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08c      	sub	sp, #48	; 0x30
 8003e08:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003e0a:	4b58      	ldr	r3, [pc, #352]	; (8003f6c <SEGGER_SYSVIEW_Start+0x168>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003e10:	f3ef 8311 	mrs	r3, BASEPRI
 8003e14:	f04f 0120 	mov.w	r1, #32
 8003e18:	f381 8811 	msr	BASEPRI, r1
 8003e1c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003e1e:	4b53      	ldr	r3, [pc, #332]	; (8003f6c <SEGGER_SYSVIEW_Start+0x168>)
 8003e20:	785b      	ldrb	r3, [r3, #1]
 8003e22:	220a      	movs	r2, #10
 8003e24:	4952      	ldr	r1, [pc, #328]	; (8003f70 <SEGGER_SYSVIEW_Start+0x16c>)
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fc f9da 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003e32:	200a      	movs	r0, #10
 8003e34:	f7ff fe2a 	bl	8003a8c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003e38:	f3ef 8311 	mrs	r3, BASEPRI
 8003e3c:	f04f 0120 	mov.w	r1, #32
 8003e40:	f381 8811 	msr	BASEPRI, r1
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	484b      	ldr	r0, [pc, #300]	; (8003f74 <SEGGER_SYSVIEW_Start+0x170>)
 8003e48:	f7ff fbf5 	bl	8003636 <_PreparePacket>
 8003e4c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e56:	4b45      	ldr	r3, [pc, #276]	; (8003f6c <SEGGER_SYSVIEW_Start+0x168>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e5c:	e00b      	b.n	8003e76 <SEGGER_SYSVIEW_Start+0x72>
 8003e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e64:	1c59      	adds	r1, r3, #1
 8003e66:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003e68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	701a      	strb	r2, [r3, #0]
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	09db      	lsrs	r3, r3, #7
 8003e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	2b7f      	cmp	r3, #127	; 0x7f
 8003e7a:	d8f0      	bhi.n	8003e5e <SEGGER_SYSVIEW_Start+0x5a>
 8003e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	701a      	strb	r2, [r3, #0]
 8003e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e90:	4b36      	ldr	r3, [pc, #216]	; (8003f6c <SEGGER_SYSVIEW_Start+0x168>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	623b      	str	r3, [r7, #32]
 8003e96:	e00b      	b.n	8003eb0 <SEGGER_SYSVIEW_Start+0xac>
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	1c59      	adds	r1, r3, #1
 8003ea0:	6279      	str	r1, [r7, #36]	; 0x24
 8003ea2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	09db      	lsrs	r3, r3, #7
 8003eae:	623b      	str	r3, [r7, #32]
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	2b7f      	cmp	r3, #127	; 0x7f
 8003eb4:	d8f0      	bhi.n	8003e98 <SEGGER_SYSVIEW_Start+0x94>
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	627a      	str	r2, [r7, #36]	; 0x24
 8003ebc:	6a3a      	ldr	r2, [r7, #32]
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	4b28      	ldr	r3, [pc, #160]	; (8003f6c <SEGGER_SYSVIEW_Start+0x168>)
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	61bb      	str	r3, [r7, #24]
 8003ed0:	e00b      	b.n	8003eea <SEGGER_SYSVIEW_Start+0xe6>
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	1c59      	adds	r1, r3, #1
 8003eda:	61f9      	str	r1, [r7, #28]
 8003edc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	09db      	lsrs	r3, r3, #7
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	2b7f      	cmp	r3, #127	; 0x7f
 8003eee:	d8f0      	bhi.n	8003ed2 <SEGGER_SYSVIEW_Start+0xce>
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	61fa      	str	r2, [r7, #28]
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	701a      	strb	r2, [r3, #0]
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	2300      	movs	r3, #0
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	e00b      	b.n	8003f22 <SEGGER_SYSVIEW_Start+0x11e>
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	1c59      	adds	r1, r3, #1
 8003f12:	6179      	str	r1, [r7, #20]
 8003f14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	701a      	strb	r2, [r3, #0]
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	09db      	lsrs	r3, r3, #7
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2b7f      	cmp	r3, #127	; 0x7f
 8003f26:	d8f0      	bhi.n	8003f0a <SEGGER_SYSVIEW_Start+0x106>
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	617a      	str	r2, [r7, #20]
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	701a      	strb	r2, [r3, #0]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003f38:	2218      	movs	r2, #24
 8003f3a:	6839      	ldr	r1, [r7, #0]
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff fc6b 	bl	8003818 <_SendPacket>
      RECORD_END();
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003f48:	4b08      	ldr	r3, [pc, #32]	; (8003f6c <SEGGER_SYSVIEW_Start+0x168>)
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003f50:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <SEGGER_SYSVIEW_Start+0x168>)
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003f56:	f000 f9eb 	bl	8004330 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003f5a:	f000 f9b1 	bl	80042c0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003f5e:	f000 fc83 	bl	8004868 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003f62:	bf00      	nop
 8003f64:	3730      	adds	r7, #48	; 0x30
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	20014398 	.word	0x20014398
 8003f70:	08005580 	.word	0x08005580
 8003f74:	200143c8 	.word	0x200143c8

08003f78 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003f7e:	f3ef 8311 	mrs	r3, BASEPRI
 8003f82:	f04f 0120 	mov.w	r1, #32
 8003f86:	f381 8811 	msr	BASEPRI, r1
 8003f8a:	607b      	str	r3, [r7, #4]
 8003f8c:	480b      	ldr	r0, [pc, #44]	; (8003fbc <SEGGER_SYSVIEW_Stop+0x44>)
 8003f8e:	f7ff fb52 	bl	8003636 <_PreparePacket>
 8003f92:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003f94:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <SEGGER_SYSVIEW_Stop+0x48>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d007      	beq.n	8003fac <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003f9c:	220b      	movs	r2, #11
 8003f9e:	6839      	ldr	r1, [r7, #0]
 8003fa0:	6838      	ldr	r0, [r7, #0]
 8003fa2:	f7ff fc39 	bl	8003818 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003fa6:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <SEGGER_SYSVIEW_Stop+0x48>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f383 8811 	msr	BASEPRI, r3
}
 8003fb2:	bf00      	nop
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	200143c8 	.word	0x200143c8
 8003fc0:	20014398 	.word	0x20014398

08003fc4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08c      	sub	sp, #48	; 0x30
 8003fc8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003fca:	f3ef 8311 	mrs	r3, BASEPRI
 8003fce:	f04f 0120 	mov.w	r1, #32
 8003fd2:	f381 8811 	msr	BASEPRI, r1
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	4845      	ldr	r0, [pc, #276]	; (80040f0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003fda:	f7ff fb2c 	bl	8003636 <_PreparePacket>
 8003fde:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fe8:	4b42      	ldr	r3, [pc, #264]	; (80040f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fee:	e00b      	b.n	8004008 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff6:	1c59      	adds	r1, r3, #1
 8003ff8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003ffa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	701a      	strb	r2, [r3, #0]
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	09db      	lsrs	r3, r3, #7
 8004006:	62bb      	str	r3, [r7, #40]	; 0x28
 8004008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400a:	2b7f      	cmp	r3, #127	; 0x7f
 800400c:	d8f0      	bhi.n	8003ff0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800400e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004016:	b2d2      	uxtb	r2, r2
 8004018:	701a      	strb	r2, [r3, #0]
 800401a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
 8004022:	4b34      	ldr	r3, [pc, #208]	; (80040f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	623b      	str	r3, [r7, #32]
 8004028:	e00b      	b.n	8004042 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	b2da      	uxtb	r2, r3
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	1c59      	adds	r1, r3, #1
 8004032:	6279      	str	r1, [r7, #36]	; 0x24
 8004034:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	701a      	strb	r2, [r3, #0]
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	09db      	lsrs	r3, r3, #7
 8004040:	623b      	str	r3, [r7, #32]
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	2b7f      	cmp	r3, #127	; 0x7f
 8004046:	d8f0      	bhi.n	800402a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	627a      	str	r2, [r7, #36]	; 0x24
 800404e:	6a3a      	ldr	r2, [r7, #32]
 8004050:	b2d2      	uxtb	r2, r2
 8004052:	701a      	strb	r2, [r3, #0]
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	61fb      	str	r3, [r7, #28]
 800405c:	4b25      	ldr	r3, [pc, #148]	; (80040f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	61bb      	str	r3, [r7, #24]
 8004062:	e00b      	b.n	800407c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	b2da      	uxtb	r2, r3
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	1c59      	adds	r1, r3, #1
 800406c:	61f9      	str	r1, [r7, #28]
 800406e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	09db      	lsrs	r3, r3, #7
 800407a:	61bb      	str	r3, [r7, #24]
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	2b7f      	cmp	r3, #127	; 0x7f
 8004080:	d8f0      	bhi.n	8004064 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	61fa      	str	r2, [r7, #28]
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	2300      	movs	r3, #0
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	e00b      	b.n	80040b4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	1c59      	adds	r1, r3, #1
 80040a4:	6179      	str	r1, [r7, #20]
 80040a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	09db      	lsrs	r3, r3, #7
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	2b7f      	cmp	r3, #127	; 0x7f
 80040b8:	d8f0      	bhi.n	800409c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	617a      	str	r2, [r7, #20]
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	701a      	strb	r2, [r3, #0]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80040ca:	2218      	movs	r2, #24
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	68b8      	ldr	r0, [r7, #8]
 80040d0:	f7ff fba2 	bl	8003818 <_SendPacket>
  RECORD_END();
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80040da:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80040e2:	4b04      	ldr	r3, [pc, #16]	; (80040f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	4798      	blx	r3
  }
}
 80040e8:	bf00      	nop
 80040ea:	3730      	adds	r7, #48	; 0x30
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	200143c8 	.word	0x200143c8
 80040f4:	20014398 	.word	0x20014398

080040f8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b092      	sub	sp, #72	; 0x48
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004100:	f3ef 8311 	mrs	r3, BASEPRI
 8004104:	f04f 0120 	mov.w	r1, #32
 8004108:	f381 8811 	msr	BASEPRI, r1
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	486a      	ldr	r0, [pc, #424]	; (80042b8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004110:	f7ff fa91 	bl	8003636 <_PreparePacket>
 8004114:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	647b      	str	r3, [r7, #68]	; 0x44
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	4b66      	ldr	r3, [pc, #408]	; (80042bc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	643b      	str	r3, [r7, #64]	; 0x40
 800412a:	e00b      	b.n	8004144 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800412c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800412e:	b2da      	uxtb	r2, r3
 8004130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004132:	1c59      	adds	r1, r3, #1
 8004134:	6479      	str	r1, [r7, #68]	; 0x44
 8004136:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800413a:	b2d2      	uxtb	r2, r2
 800413c:	701a      	strb	r2, [r3, #0]
 800413e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004140:	09db      	lsrs	r3, r3, #7
 8004142:	643b      	str	r3, [r7, #64]	; 0x40
 8004144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004146:	2b7f      	cmp	r3, #127	; 0x7f
 8004148:	d8f0      	bhi.n	800412c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800414a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	647a      	str	r2, [r7, #68]	; 0x44
 8004150:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	701a      	strb	r2, [r3, #0]
 8004156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004158:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	63bb      	str	r3, [r7, #56]	; 0x38
 8004164:	e00b      	b.n	800417e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004168:	b2da      	uxtb	r2, r3
 800416a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800416c:	1c59      	adds	r1, r3, #1
 800416e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004170:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	701a      	strb	r2, [r3, #0]
 8004178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417a:	09db      	lsrs	r3, r3, #7
 800417c:	63bb      	str	r3, [r7, #56]	; 0x38
 800417e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004180:	2b7f      	cmp	r3, #127	; 0x7f
 8004182:	d8f0      	bhi.n	8004166 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	63fa      	str	r2, [r7, #60]	; 0x3c
 800418a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	701a      	strb	r2, [r3, #0]
 8004190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004192:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	2220      	movs	r2, #32
 800419a:	4619      	mov	r1, r3
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f7ff f9fd 	bl	800359c <_EncodeStr>
 80041a2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80041a4:	2209      	movs	r2, #9
 80041a6:	68f9      	ldr	r1, [r7, #12]
 80041a8:	6938      	ldr	r0, [r7, #16]
 80041aa:	f7ff fb35 	bl	8003818 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	637b      	str	r3, [r7, #52]	; 0x34
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	4b40      	ldr	r3, [pc, #256]	; (80042bc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	633b      	str	r3, [r7, #48]	; 0x30
 80041c2:	e00b      	b.n	80041dc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80041c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ca:	1c59      	adds	r1, r3, #1
 80041cc:	6379      	str	r1, [r7, #52]	; 0x34
 80041ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	701a      	strb	r2, [r3, #0]
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	09db      	lsrs	r3, r3, #7
 80041da:	633b      	str	r3, [r7, #48]	; 0x30
 80041dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041de:	2b7f      	cmp	r3, #127	; 0x7f
 80041e0:	d8f0      	bhi.n	80041c4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80041e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	637a      	str	r2, [r7, #52]	; 0x34
 80041e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80041fc:	e00b      	b.n	8004216 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80041fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004200:	b2da      	uxtb	r2, r3
 8004202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004204:	1c59      	adds	r1, r3, #1
 8004206:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004208:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	701a      	strb	r2, [r3, #0]
 8004210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004212:	09db      	lsrs	r3, r3, #7
 8004214:	62bb      	str	r3, [r7, #40]	; 0x28
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	2b7f      	cmp	r3, #127	; 0x7f
 800421a:	d8f0      	bhi.n	80041fe <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800421c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	701a      	strb	r2, [r3, #0]
 8004228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	627b      	str	r3, [r7, #36]	; 0x24
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	623b      	str	r3, [r7, #32]
 8004236:	e00b      	b.n	8004250 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	b2da      	uxtb	r2, r3
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	1c59      	adds	r1, r3, #1
 8004240:	6279      	str	r1, [r7, #36]	; 0x24
 8004242:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	701a      	strb	r2, [r3, #0]
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	09db      	lsrs	r3, r3, #7
 800424e:	623b      	str	r3, [r7, #32]
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	2b7f      	cmp	r3, #127	; 0x7f
 8004254:	d8f0      	bhi.n	8004238 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	627a      	str	r2, [r7, #36]	; 0x24
 800425c:	6a3a      	ldr	r2, [r7, #32]
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	701a      	strb	r2, [r3, #0]
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	61fb      	str	r3, [r7, #28]
 800426a:	2300      	movs	r3, #0
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	e00b      	b.n	8004288 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	b2da      	uxtb	r2, r3
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	1c59      	adds	r1, r3, #1
 8004278:	61f9      	str	r1, [r7, #28]
 800427a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	09db      	lsrs	r3, r3, #7
 8004286:	61bb      	str	r3, [r7, #24]
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	2b7f      	cmp	r3, #127	; 0x7f
 800428c:	d8f0      	bhi.n	8004270 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	61fa      	str	r2, [r7, #28]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	701a      	strb	r2, [r3, #0]
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800429e:	2215      	movs	r2, #21
 80042a0:	68f9      	ldr	r1, [r7, #12]
 80042a2:	6938      	ldr	r0, [r7, #16]
 80042a4:	f7ff fab8 	bl	8003818 <_SendPacket>
  RECORD_END();
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f383 8811 	msr	BASEPRI, r3
}
 80042ae:	bf00      	nop
 80042b0:	3748      	adds	r7, #72	; 0x48
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	200143c8 	.word	0x200143c8
 80042bc:	20014398 	.word	0x20014398

080042c0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80042c4:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80042d6:	4b03      	ldr	r3, [pc, #12]	; (80042e4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4798      	blx	r3
  }
}
 80042de:	bf00      	nop
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20014398 	.word	0x20014398

080042e8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80042f0:	f3ef 8311 	mrs	r3, BASEPRI
 80042f4:	f04f 0120 	mov.w	r1, #32
 80042f8:	f381 8811 	msr	BASEPRI, r1
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	480b      	ldr	r0, [pc, #44]	; (800432c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004300:	f7ff f999 	bl	8003636 <_PreparePacket>
 8004304:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004306:	2280      	movs	r2, #128	; 0x80
 8004308:	6879      	ldr	r1, [r7, #4]
 800430a:	6938      	ldr	r0, [r7, #16]
 800430c:	f7ff f946 	bl	800359c <_EncodeStr>
 8004310:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004312:	220e      	movs	r2, #14
 8004314:	68f9      	ldr	r1, [r7, #12]
 8004316:	6938      	ldr	r0, [r7, #16]
 8004318:	f7ff fa7e 	bl	8003818 <_SendPacket>
  RECORD_END();
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f383 8811 	msr	BASEPRI, r3
}
 8004322:	bf00      	nop
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	200143c8 	.word	0x200143c8

08004330 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004330:	b590      	push	{r4, r7, lr}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004336:	4b15      	ldr	r3, [pc, #84]	; (800438c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d01a      	beq.n	8004374 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800433e:	4b13      	ldr	r3, [pc, #76]	; (800438c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d015      	beq.n	8004374 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004348:	4b10      	ldr	r3, [pc, #64]	; (800438c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4798      	blx	r3
 8004350:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004354:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004356:	e9d7 0100 	ldrd	r0, r1, [r7]
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	000a      	movs	r2, r1
 8004364:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004366:	4613      	mov	r3, r2
 8004368:	461a      	mov	r2, r3
 800436a:	4621      	mov	r1, r4
 800436c:	200d      	movs	r0, #13
 800436e:	f7ff fbe7 	bl	8003b40 <SEGGER_SYSVIEW_RecordU32x2>
 8004372:	e006      	b.n	8004382 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004374:	4b06      	ldr	r3, [pc, #24]	; (8004390 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4619      	mov	r1, r3
 800437a:	200c      	movs	r0, #12
 800437c:	f7ff fba4 	bl	8003ac8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004380:	bf00      	nop
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	bd90      	pop	{r4, r7, pc}
 800438a:	bf00      	nop
 800438c:	20014398 	.word	0x20014398
 8004390:	e0001004 	.word	0xe0001004

08004394 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800439a:	f3ef 8311 	mrs	r3, BASEPRI
 800439e:	f04f 0120 	mov.w	r1, #32
 80043a2:	f381 8811 	msr	BASEPRI, r1
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	4819      	ldr	r0, [pc, #100]	; (8004410 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80043aa:	f7ff f944 	bl	8003636 <_PreparePacket>
 80043ae:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80043b4:	4b17      	ldr	r3, [pc, #92]	; (8004414 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043bc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	e00b      	b.n	80043e0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	1c59      	adds	r1, r3, #1
 80043d0:	6179      	str	r1, [r7, #20]
 80043d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	09db      	lsrs	r3, r3, #7
 80043de:	613b      	str	r3, [r7, #16]
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	2b7f      	cmp	r3, #127	; 0x7f
 80043e4:	d8f0      	bhi.n	80043c8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	617a      	str	r2, [r7, #20]
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80043f6:	2202      	movs	r2, #2
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	68b8      	ldr	r0, [r7, #8]
 80043fc:	f7ff fa0c 	bl	8003818 <_SendPacket>
  RECORD_END();
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f383 8811 	msr	BASEPRI, r3
}
 8004406:	bf00      	nop
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	200143c8 	.word	0x200143c8
 8004414:	e000ed04 	.word	0xe000ed04

08004418 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800441e:	f3ef 8311 	mrs	r3, BASEPRI
 8004422:	f04f 0120 	mov.w	r1, #32
 8004426:	f381 8811 	msr	BASEPRI, r1
 800442a:	607b      	str	r3, [r7, #4]
 800442c:	4807      	ldr	r0, [pc, #28]	; (800444c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800442e:	f7ff f902 	bl	8003636 <_PreparePacket>
 8004432:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004434:	2203      	movs	r2, #3
 8004436:	6839      	ldr	r1, [r7, #0]
 8004438:	6838      	ldr	r0, [r7, #0]
 800443a:	f7ff f9ed 	bl	8003818 <_SendPacket>
  RECORD_END();
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f383 8811 	msr	BASEPRI, r3
}
 8004444:	bf00      	nop
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	200143c8 	.word	0x200143c8

08004450 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004456:	f3ef 8311 	mrs	r3, BASEPRI
 800445a:	f04f 0120 	mov.w	r1, #32
 800445e:	f381 8811 	msr	BASEPRI, r1
 8004462:	607b      	str	r3, [r7, #4]
 8004464:	4807      	ldr	r0, [pc, #28]	; (8004484 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004466:	f7ff f8e6 	bl	8003636 <_PreparePacket>
 800446a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800446c:	2212      	movs	r2, #18
 800446e:	6839      	ldr	r1, [r7, #0]
 8004470:	6838      	ldr	r0, [r7, #0]
 8004472:	f7ff f9d1 	bl	8003818 <_SendPacket>
  RECORD_END();
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f383 8811 	msr	BASEPRI, r3
}
 800447c:	bf00      	nop
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	200143c8 	.word	0x200143c8

08004488 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800448e:	f3ef 8311 	mrs	r3, BASEPRI
 8004492:	f04f 0120 	mov.w	r1, #32
 8004496:	f381 8811 	msr	BASEPRI, r1
 800449a:	607b      	str	r3, [r7, #4]
 800449c:	4807      	ldr	r0, [pc, #28]	; (80044bc <SEGGER_SYSVIEW_OnIdle+0x34>)
 800449e:	f7ff f8ca 	bl	8003636 <_PreparePacket>
 80044a2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80044a4:	2211      	movs	r2, #17
 80044a6:	6839      	ldr	r1, [r7, #0]
 80044a8:	6838      	ldr	r0, [r7, #0]
 80044aa:	f7ff f9b5 	bl	8003818 <_SendPacket>
  RECORD_END();
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f383 8811 	msr	BASEPRI, r3
}
 80044b4:	bf00      	nop
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	200143c8 	.word	0x200143c8

080044c0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80044c8:	f3ef 8311 	mrs	r3, BASEPRI
 80044cc:	f04f 0120 	mov.w	r1, #32
 80044d0:	f381 8811 	msr	BASEPRI, r1
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	4819      	ldr	r0, [pc, #100]	; (800453c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80044d8:	f7ff f8ad 	bl	8003636 <_PreparePacket>
 80044dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80044e2:	4b17      	ldr	r3, [pc, #92]	; (8004540 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	61bb      	str	r3, [r7, #24]
 80044f4:	e00b      	b.n	800450e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	1c59      	adds	r1, r3, #1
 80044fe:	61f9      	str	r1, [r7, #28]
 8004500:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	701a      	strb	r2, [r3, #0]
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	09db      	lsrs	r3, r3, #7
 800450c:	61bb      	str	r3, [r7, #24]
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	2b7f      	cmp	r3, #127	; 0x7f
 8004512:	d8f0      	bhi.n	80044f6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	61fa      	str	r2, [r7, #28]
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	701a      	strb	r2, [r3, #0]
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004524:	2208      	movs	r2, #8
 8004526:	68f9      	ldr	r1, [r7, #12]
 8004528:	6938      	ldr	r0, [r7, #16]
 800452a:	f7ff f975 	bl	8003818 <_SendPacket>
  RECORD_END();
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f383 8811 	msr	BASEPRI, r3
}
 8004534:	bf00      	nop
 8004536:	3720      	adds	r7, #32
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	200143c8 	.word	0x200143c8
 8004540:	20014398 	.word	0x20014398

08004544 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004544:	b580      	push	{r7, lr}
 8004546:	b088      	sub	sp, #32
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800454c:	f3ef 8311 	mrs	r3, BASEPRI
 8004550:	f04f 0120 	mov.w	r1, #32
 8004554:	f381 8811 	msr	BASEPRI, r1
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	4819      	ldr	r0, [pc, #100]	; (80045c0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800455c:	f7ff f86b 	bl	8003636 <_PreparePacket>
 8004560:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004566:	4b17      	ldr	r3, [pc, #92]	; (80045c4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	61fb      	str	r3, [r7, #28]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	61bb      	str	r3, [r7, #24]
 8004578:	e00b      	b.n	8004592 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	b2da      	uxtb	r2, r3
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	1c59      	adds	r1, r3, #1
 8004582:	61f9      	str	r1, [r7, #28]
 8004584:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	701a      	strb	r2, [r3, #0]
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	09db      	lsrs	r3, r3, #7
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	2b7f      	cmp	r3, #127	; 0x7f
 8004596:	d8f0      	bhi.n	800457a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	61fa      	str	r2, [r7, #28]
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	701a      	strb	r2, [r3, #0]
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80045a8:	2204      	movs	r2, #4
 80045aa:	68f9      	ldr	r1, [r7, #12]
 80045ac:	6938      	ldr	r0, [r7, #16]
 80045ae:	f7ff f933 	bl	8003818 <_SendPacket>
  RECORD_END();
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f383 8811 	msr	BASEPRI, r3
}
 80045b8:	bf00      	nop
 80045ba:	3720      	adds	r7, #32
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	200143c8 	.word	0x200143c8
 80045c4:	20014398 	.word	0x20014398

080045c8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80045d0:	f3ef 8311 	mrs	r3, BASEPRI
 80045d4:	f04f 0120 	mov.w	r1, #32
 80045d8:	f381 8811 	msr	BASEPRI, r1
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	4819      	ldr	r0, [pc, #100]	; (8004644 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80045e0:	f7ff f829 	bl	8003636 <_PreparePacket>
 80045e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80045ea:	4b17      	ldr	r3, [pc, #92]	; (8004648 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	61fb      	str	r3, [r7, #28]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	61bb      	str	r3, [r7, #24]
 80045fc:	e00b      	b.n	8004616 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	b2da      	uxtb	r2, r3
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	1c59      	adds	r1, r3, #1
 8004606:	61f9      	str	r1, [r7, #28]
 8004608:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	701a      	strb	r2, [r3, #0]
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	09db      	lsrs	r3, r3, #7
 8004614:	61bb      	str	r3, [r7, #24]
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	2b7f      	cmp	r3, #127	; 0x7f
 800461a:	d8f0      	bhi.n	80045fe <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	61fa      	str	r2, [r7, #28]
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	701a      	strb	r2, [r3, #0]
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800462c:	2206      	movs	r2, #6
 800462e:	68f9      	ldr	r1, [r7, #12]
 8004630:	6938      	ldr	r0, [r7, #16]
 8004632:	f7ff f8f1 	bl	8003818 <_SendPacket>
  RECORD_END();
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f383 8811 	msr	BASEPRI, r3
}
 800463c:	bf00      	nop
 800463e:	3720      	adds	r7, #32
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	200143c8 	.word	0x200143c8
 8004648:	20014398 	.word	0x20014398

0800464c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800464c:	b580      	push	{r7, lr}
 800464e:	b08a      	sub	sp, #40	; 0x28
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004656:	f3ef 8311 	mrs	r3, BASEPRI
 800465a:	f04f 0120 	mov.w	r1, #32
 800465e:	f381 8811 	msr	BASEPRI, r1
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	4827      	ldr	r0, [pc, #156]	; (8004704 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004666:	f7fe ffe6 	bl	8003636 <_PreparePacket>
 800466a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004670:	4b25      	ldr	r3, [pc, #148]	; (8004708 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	623b      	str	r3, [r7, #32]
 8004682:	e00b      	b.n	800469c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	b2da      	uxtb	r2, r3
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	1c59      	adds	r1, r3, #1
 800468c:	6279      	str	r1, [r7, #36]	; 0x24
 800468e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	09db      	lsrs	r3, r3, #7
 800469a:	623b      	str	r3, [r7, #32]
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	2b7f      	cmp	r3, #127	; 0x7f
 80046a0:	d8f0      	bhi.n	8004684 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	627a      	str	r2, [r7, #36]	; 0x24
 80046a8:	6a3a      	ldr	r2, [r7, #32]
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	701a      	strb	r2, [r3, #0]
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	61fb      	str	r3, [r7, #28]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	61bb      	str	r3, [r7, #24]
 80046ba:	e00b      	b.n	80046d4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	1c59      	adds	r1, r3, #1
 80046c4:	61f9      	str	r1, [r7, #28]
 80046c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	701a      	strb	r2, [r3, #0]
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	09db      	lsrs	r3, r3, #7
 80046d2:	61bb      	str	r3, [r7, #24]
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	2b7f      	cmp	r3, #127	; 0x7f
 80046d8:	d8f0      	bhi.n	80046bc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	61fa      	str	r2, [r7, #28]
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80046ea:	2207      	movs	r2, #7
 80046ec:	68f9      	ldr	r1, [r7, #12]
 80046ee:	6938      	ldr	r0, [r7, #16]
 80046f0:	f7ff f892 	bl	8003818 <_SendPacket>
  RECORD_END();
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f383 8811 	msr	BASEPRI, r3
}
 80046fa:	bf00      	nop
 80046fc:	3728      	adds	r7, #40	; 0x28
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	200143c8 	.word	0x200143c8
 8004708:	20014398 	.word	0x20014398

0800470c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004714:	4b04      	ldr	r3, [pc, #16]	; (8004728 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	1ad3      	subs	r3, r2, r3
}
 800471c:	4618      	mov	r0, r3
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	20014398 	.word	0x20014398

0800472c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800472c:	b580      	push	{r7, lr}
 800472e:	b08c      	sub	sp, #48	; 0x30
 8004730:	af00      	add	r7, sp, #0
 8004732:	4603      	mov	r3, r0
 8004734:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004736:	4b3b      	ldr	r3, [pc, #236]	; (8004824 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d06d      	beq.n	800481a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800473e:	4b39      	ldr	r3, [pc, #228]	; (8004824 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004744:	2300      	movs	r3, #0
 8004746:	62bb      	str	r3, [r7, #40]	; 0x28
 8004748:	e008      	b.n	800475c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800474a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004752:	2b00      	cmp	r3, #0
 8004754:	d007      	beq.n	8004766 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	3301      	adds	r3, #1
 800475a:	62bb      	str	r3, [r7, #40]	; 0x28
 800475c:	79fb      	ldrb	r3, [r7, #7]
 800475e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004760:	429a      	cmp	r2, r3
 8004762:	d3f2      	bcc.n	800474a <SEGGER_SYSVIEW_SendModule+0x1e>
 8004764:	e000      	b.n	8004768 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004766:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476a:	2b00      	cmp	r3, #0
 800476c:	d055      	beq.n	800481a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800476e:	f3ef 8311 	mrs	r3, BASEPRI
 8004772:	f04f 0120 	mov.w	r1, #32
 8004776:	f381 8811 	msr	BASEPRI, r1
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	482a      	ldr	r0, [pc, #168]	; (8004828 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800477e:	f7fe ff5a 	bl	8003636 <_PreparePacket>
 8004782:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
 800478c:	79fb      	ldrb	r3, [r7, #7]
 800478e:	623b      	str	r3, [r7, #32]
 8004790:	e00b      	b.n	80047aa <SEGGER_SYSVIEW_SendModule+0x7e>
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	b2da      	uxtb	r2, r3
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	1c59      	adds	r1, r3, #1
 800479a:	6279      	str	r1, [r7, #36]	; 0x24
 800479c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	701a      	strb	r2, [r3, #0]
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	09db      	lsrs	r3, r3, #7
 80047a8:	623b      	str	r3, [r7, #32]
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	2b7f      	cmp	r3, #127	; 0x7f
 80047ae:	d8f0      	bhi.n	8004792 <SEGGER_SYSVIEW_SendModule+0x66>
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	627a      	str	r2, [r7, #36]	; 0x24
 80047b6:	6a3a      	ldr	r2, [r7, #32]
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	701a      	strb	r2, [r3, #0]
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	61fb      	str	r3, [r7, #28]
 80047c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	61bb      	str	r3, [r7, #24]
 80047ca:	e00b      	b.n	80047e4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	1c59      	adds	r1, r3, #1
 80047d4:	61f9      	str	r1, [r7, #28]
 80047d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	09db      	lsrs	r3, r3, #7
 80047e2:	61bb      	str	r3, [r7, #24]
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	2b7f      	cmp	r3, #127	; 0x7f
 80047e8:	d8f0      	bhi.n	80047cc <SEGGER_SYSVIEW_SendModule+0xa0>
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	61fa      	str	r2, [r7, #28]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80047fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2280      	movs	r2, #128	; 0x80
 8004800:	4619      	mov	r1, r3
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f7fe feca 	bl	800359c <_EncodeStr>
 8004808:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800480a:	2216      	movs	r2, #22
 800480c:	68f9      	ldr	r1, [r7, #12]
 800480e:	6938      	ldr	r0, [r7, #16]
 8004810:	f7ff f802 	bl	8003818 <_SendPacket>
      RECORD_END();
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800481a:	bf00      	nop
 800481c:	3730      	adds	r7, #48	; 0x30
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	200143c0 	.word	0x200143c0
 8004828:	200143c8 	.word	0x200143c8

0800482c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004832:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00f      	beq.n	800485a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800483a:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1f2      	bne.n	8004840 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	200143c0 	.word	0x200143c0

08004868 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800486e:	f3ef 8311 	mrs	r3, BASEPRI
 8004872:	f04f 0120 	mov.w	r1, #32
 8004876:	f381 8811 	msr	BASEPRI, r1
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	4817      	ldr	r0, [pc, #92]	; (80048dc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800487e:	f7fe feda 	bl	8003636 <_PreparePacket>
 8004882:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	4b14      	ldr	r3, [pc, #80]	; (80048e0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	e00b      	b.n	80048ac <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	b2da      	uxtb	r2, r3
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	1c59      	adds	r1, r3, #1
 800489c:	6179      	str	r1, [r7, #20]
 800489e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	09db      	lsrs	r3, r3, #7
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	2b7f      	cmp	r3, #127	; 0x7f
 80048b0:	d8f0      	bhi.n	8004894 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	617a      	str	r2, [r7, #20]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80048c2:	221b      	movs	r2, #27
 80048c4:	6879      	ldr	r1, [r7, #4]
 80048c6:	68b8      	ldr	r0, [r7, #8]
 80048c8:	f7fe ffa6 	bl	8003818 <_SendPacket>
  RECORD_END();
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f383 8811 	msr	BASEPRI, r3
}
 80048d2:	bf00      	nop
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	200143c8 	.word	0x200143c8
 80048e0:	200143c4 	.word	0x200143c4

080048e4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08a      	sub	sp, #40	; 0x28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80048ec:	f3ef 8311 	mrs	r3, BASEPRI
 80048f0:	f04f 0120 	mov.w	r1, #32
 80048f4:	f381 8811 	msr	BASEPRI, r1
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	4827      	ldr	r0, [pc, #156]	; (8004998 <SEGGER_SYSVIEW_Warn+0xb4>)
 80048fc:	f7fe fe9b 	bl	8003636 <_PreparePacket>
 8004900:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004902:	2280      	movs	r2, #128	; 0x80
 8004904:	6879      	ldr	r1, [r7, #4]
 8004906:	6938      	ldr	r0, [r7, #16]
 8004908:	f7fe fe48 	bl	800359c <_EncodeStr>
 800490c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
 8004912:	2301      	movs	r3, #1
 8004914:	623b      	str	r3, [r7, #32]
 8004916:	e00b      	b.n	8004930 <SEGGER_SYSVIEW_Warn+0x4c>
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	b2da      	uxtb	r2, r3
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	1c59      	adds	r1, r3, #1
 8004920:	6279      	str	r1, [r7, #36]	; 0x24
 8004922:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	701a      	strb	r2, [r3, #0]
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	09db      	lsrs	r3, r3, #7
 800492e:	623b      	str	r3, [r7, #32]
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	2b7f      	cmp	r3, #127	; 0x7f
 8004934:	d8f0      	bhi.n	8004918 <SEGGER_SYSVIEW_Warn+0x34>
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	627a      	str	r2, [r7, #36]	; 0x24
 800493c:	6a3a      	ldr	r2, [r7, #32]
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	701a      	strb	r2, [r3, #0]
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	61fb      	str	r3, [r7, #28]
 800494a:	2300      	movs	r3, #0
 800494c:	61bb      	str	r3, [r7, #24]
 800494e:	e00b      	b.n	8004968 <SEGGER_SYSVIEW_Warn+0x84>
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	b2da      	uxtb	r2, r3
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	1c59      	adds	r1, r3, #1
 8004958:	61f9      	str	r1, [r7, #28]
 800495a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	09db      	lsrs	r3, r3, #7
 8004966:	61bb      	str	r3, [r7, #24]
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	2b7f      	cmp	r3, #127	; 0x7f
 800496c:	d8f0      	bhi.n	8004950 <SEGGER_SYSVIEW_Warn+0x6c>
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	61fa      	str	r2, [r7, #28]
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	701a      	strb	r2, [r3, #0]
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800497e:	221a      	movs	r2, #26
 8004980:	68f9      	ldr	r1, [r7, #12]
 8004982:	6938      	ldr	r0, [r7, #16]
 8004984:	f7fe ff48 	bl	8003818 <_SendPacket>
  RECORD_END();
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f383 8811 	msr	BASEPRI, r3
}
 800498e:	bf00      	nop
 8004990:	3728      	adds	r7, #40	; 0x28
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	200143c8 	.word	0x200143c8

0800499c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
 80049a8:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	2000      	movs	r0, #0
 80049b0:	f7fe fcda 	bl	8003368 <SEGGER_RTT_Write>
  return len;
 80049b4:	683b      	ldr	r3, [r7, #0]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <__libc_init_array>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	4d0d      	ldr	r5, [pc, #52]	; (80049f8 <__libc_init_array+0x38>)
 80049c4:	4c0d      	ldr	r4, [pc, #52]	; (80049fc <__libc_init_array+0x3c>)
 80049c6:	1b64      	subs	r4, r4, r5
 80049c8:	10a4      	asrs	r4, r4, #2
 80049ca:	2600      	movs	r6, #0
 80049cc:	42a6      	cmp	r6, r4
 80049ce:	d109      	bne.n	80049e4 <__libc_init_array+0x24>
 80049d0:	4d0b      	ldr	r5, [pc, #44]	; (8004a00 <__libc_init_array+0x40>)
 80049d2:	4c0c      	ldr	r4, [pc, #48]	; (8004a04 <__libc_init_array+0x44>)
 80049d4:	f000 fd38 	bl	8005448 <_init>
 80049d8:	1b64      	subs	r4, r4, r5
 80049da:	10a4      	asrs	r4, r4, #2
 80049dc:	2600      	movs	r6, #0
 80049de:	42a6      	cmp	r6, r4
 80049e0:	d105      	bne.n	80049ee <__libc_init_array+0x2e>
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
 80049e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e8:	4798      	blx	r3
 80049ea:	3601      	adds	r6, #1
 80049ec:	e7ee      	b.n	80049cc <__libc_init_array+0xc>
 80049ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f2:	4798      	blx	r3
 80049f4:	3601      	adds	r6, #1
 80049f6:	e7f2      	b.n	80049de <__libc_init_array+0x1e>
 80049f8:	080055f0 	.word	0x080055f0
 80049fc:	080055f0 	.word	0x080055f0
 8004a00:	080055f0 	.word	0x080055f0
 8004a04:	080055f4 	.word	0x080055f4

08004a08 <memcmp>:
 8004a08:	b510      	push	{r4, lr}
 8004a0a:	3901      	subs	r1, #1
 8004a0c:	4402      	add	r2, r0
 8004a0e:	4290      	cmp	r0, r2
 8004a10:	d101      	bne.n	8004a16 <memcmp+0xe>
 8004a12:	2000      	movs	r0, #0
 8004a14:	e005      	b.n	8004a22 <memcmp+0x1a>
 8004a16:	7803      	ldrb	r3, [r0, #0]
 8004a18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004a1c:	42a3      	cmp	r3, r4
 8004a1e:	d001      	beq.n	8004a24 <memcmp+0x1c>
 8004a20:	1b18      	subs	r0, r3, r4
 8004a22:	bd10      	pop	{r4, pc}
 8004a24:	3001      	adds	r0, #1
 8004a26:	e7f2      	b.n	8004a0e <memcmp+0x6>

08004a28 <memcpy>:
 8004a28:	440a      	add	r2, r1
 8004a2a:	4291      	cmp	r1, r2
 8004a2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a30:	d100      	bne.n	8004a34 <memcpy+0xc>
 8004a32:	4770      	bx	lr
 8004a34:	b510      	push	{r4, lr}
 8004a36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a3e:	4291      	cmp	r1, r2
 8004a40:	d1f9      	bne.n	8004a36 <memcpy+0xe>
 8004a42:	bd10      	pop	{r4, pc}

08004a44 <memset>:
 8004a44:	4402      	add	r2, r0
 8004a46:	4603      	mov	r3, r0
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d100      	bne.n	8004a4e <memset+0xa>
 8004a4c:	4770      	bx	lr
 8004a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a52:	e7f9      	b.n	8004a48 <memset+0x4>

08004a54 <_puts_r>:
 8004a54:	b570      	push	{r4, r5, r6, lr}
 8004a56:	460e      	mov	r6, r1
 8004a58:	4605      	mov	r5, r0
 8004a5a:	b118      	cbz	r0, 8004a64 <_puts_r+0x10>
 8004a5c:	6983      	ldr	r3, [r0, #24]
 8004a5e:	b90b      	cbnz	r3, 8004a64 <_puts_r+0x10>
 8004a60:	f000 fa48 	bl	8004ef4 <__sinit>
 8004a64:	69ab      	ldr	r3, [r5, #24]
 8004a66:	68ac      	ldr	r4, [r5, #8]
 8004a68:	b913      	cbnz	r3, 8004a70 <_puts_r+0x1c>
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	f000 fa42 	bl	8004ef4 <__sinit>
 8004a70:	4b2c      	ldr	r3, [pc, #176]	; (8004b24 <_puts_r+0xd0>)
 8004a72:	429c      	cmp	r4, r3
 8004a74:	d120      	bne.n	8004ab8 <_puts_r+0x64>
 8004a76:	686c      	ldr	r4, [r5, #4]
 8004a78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a7a:	07db      	lsls	r3, r3, #31
 8004a7c:	d405      	bmi.n	8004a8a <_puts_r+0x36>
 8004a7e:	89a3      	ldrh	r3, [r4, #12]
 8004a80:	0598      	lsls	r0, r3, #22
 8004a82:	d402      	bmi.n	8004a8a <_puts_r+0x36>
 8004a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a86:	f000 fad3 	bl	8005030 <__retarget_lock_acquire_recursive>
 8004a8a:	89a3      	ldrh	r3, [r4, #12]
 8004a8c:	0719      	lsls	r1, r3, #28
 8004a8e:	d51d      	bpl.n	8004acc <_puts_r+0x78>
 8004a90:	6923      	ldr	r3, [r4, #16]
 8004a92:	b1db      	cbz	r3, 8004acc <_puts_r+0x78>
 8004a94:	3e01      	subs	r6, #1
 8004a96:	68a3      	ldr	r3, [r4, #8]
 8004a98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	60a3      	str	r3, [r4, #8]
 8004aa0:	bb39      	cbnz	r1, 8004af2 <_puts_r+0x9e>
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	da38      	bge.n	8004b18 <_puts_r+0xc4>
 8004aa6:	4622      	mov	r2, r4
 8004aa8:	210a      	movs	r1, #10
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f000 f848 	bl	8004b40 <__swbuf_r>
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	d011      	beq.n	8004ad8 <_puts_r+0x84>
 8004ab4:	250a      	movs	r5, #10
 8004ab6:	e011      	b.n	8004adc <_puts_r+0x88>
 8004ab8:	4b1b      	ldr	r3, [pc, #108]	; (8004b28 <_puts_r+0xd4>)
 8004aba:	429c      	cmp	r4, r3
 8004abc:	d101      	bne.n	8004ac2 <_puts_r+0x6e>
 8004abe:	68ac      	ldr	r4, [r5, #8]
 8004ac0:	e7da      	b.n	8004a78 <_puts_r+0x24>
 8004ac2:	4b1a      	ldr	r3, [pc, #104]	; (8004b2c <_puts_r+0xd8>)
 8004ac4:	429c      	cmp	r4, r3
 8004ac6:	bf08      	it	eq
 8004ac8:	68ec      	ldreq	r4, [r5, #12]
 8004aca:	e7d5      	b.n	8004a78 <_puts_r+0x24>
 8004acc:	4621      	mov	r1, r4
 8004ace:	4628      	mov	r0, r5
 8004ad0:	f000 f888 	bl	8004be4 <__swsetup_r>
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	d0dd      	beq.n	8004a94 <_puts_r+0x40>
 8004ad8:	f04f 35ff 	mov.w	r5, #4294967295
 8004adc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ade:	07da      	lsls	r2, r3, #31
 8004ae0:	d405      	bmi.n	8004aee <_puts_r+0x9a>
 8004ae2:	89a3      	ldrh	r3, [r4, #12]
 8004ae4:	059b      	lsls	r3, r3, #22
 8004ae6:	d402      	bmi.n	8004aee <_puts_r+0x9a>
 8004ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aea:	f000 faa2 	bl	8005032 <__retarget_lock_release_recursive>
 8004aee:	4628      	mov	r0, r5
 8004af0:	bd70      	pop	{r4, r5, r6, pc}
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	da04      	bge.n	8004b00 <_puts_r+0xac>
 8004af6:	69a2      	ldr	r2, [r4, #24]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	dc06      	bgt.n	8004b0a <_puts_r+0xb6>
 8004afc:	290a      	cmp	r1, #10
 8004afe:	d004      	beq.n	8004b0a <_puts_r+0xb6>
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	6022      	str	r2, [r4, #0]
 8004b06:	7019      	strb	r1, [r3, #0]
 8004b08:	e7c5      	b.n	8004a96 <_puts_r+0x42>
 8004b0a:	4622      	mov	r2, r4
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	f000 f817 	bl	8004b40 <__swbuf_r>
 8004b12:	3001      	adds	r0, #1
 8004b14:	d1bf      	bne.n	8004a96 <_puts_r+0x42>
 8004b16:	e7df      	b.n	8004ad8 <_puts_r+0x84>
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	250a      	movs	r5, #10
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	6022      	str	r2, [r4, #0]
 8004b20:	701d      	strb	r5, [r3, #0]
 8004b22:	e7db      	b.n	8004adc <_puts_r+0x88>
 8004b24:	080055b0 	.word	0x080055b0
 8004b28:	080055d0 	.word	0x080055d0
 8004b2c:	08005590 	.word	0x08005590

08004b30 <puts>:
 8004b30:	4b02      	ldr	r3, [pc, #8]	; (8004b3c <puts+0xc>)
 8004b32:	4601      	mov	r1, r0
 8004b34:	6818      	ldr	r0, [r3, #0]
 8004b36:	f7ff bf8d 	b.w	8004a54 <_puts_r>
 8004b3a:	bf00      	nop
 8004b3c:	2000000c 	.word	0x2000000c

08004b40 <__swbuf_r>:
 8004b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b42:	460e      	mov	r6, r1
 8004b44:	4614      	mov	r4, r2
 8004b46:	4605      	mov	r5, r0
 8004b48:	b118      	cbz	r0, 8004b52 <__swbuf_r+0x12>
 8004b4a:	6983      	ldr	r3, [r0, #24]
 8004b4c:	b90b      	cbnz	r3, 8004b52 <__swbuf_r+0x12>
 8004b4e:	f000 f9d1 	bl	8004ef4 <__sinit>
 8004b52:	4b21      	ldr	r3, [pc, #132]	; (8004bd8 <__swbuf_r+0x98>)
 8004b54:	429c      	cmp	r4, r3
 8004b56:	d12b      	bne.n	8004bb0 <__swbuf_r+0x70>
 8004b58:	686c      	ldr	r4, [r5, #4]
 8004b5a:	69a3      	ldr	r3, [r4, #24]
 8004b5c:	60a3      	str	r3, [r4, #8]
 8004b5e:	89a3      	ldrh	r3, [r4, #12]
 8004b60:	071a      	lsls	r2, r3, #28
 8004b62:	d52f      	bpl.n	8004bc4 <__swbuf_r+0x84>
 8004b64:	6923      	ldr	r3, [r4, #16]
 8004b66:	b36b      	cbz	r3, 8004bc4 <__swbuf_r+0x84>
 8004b68:	6923      	ldr	r3, [r4, #16]
 8004b6a:	6820      	ldr	r0, [r4, #0]
 8004b6c:	1ac0      	subs	r0, r0, r3
 8004b6e:	6963      	ldr	r3, [r4, #20]
 8004b70:	b2f6      	uxtb	r6, r6
 8004b72:	4283      	cmp	r3, r0
 8004b74:	4637      	mov	r7, r6
 8004b76:	dc04      	bgt.n	8004b82 <__swbuf_r+0x42>
 8004b78:	4621      	mov	r1, r4
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	f000 f926 	bl	8004dcc <_fflush_r>
 8004b80:	bb30      	cbnz	r0, 8004bd0 <__swbuf_r+0x90>
 8004b82:	68a3      	ldr	r3, [r4, #8]
 8004b84:	3b01      	subs	r3, #1
 8004b86:	60a3      	str	r3, [r4, #8]
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	6022      	str	r2, [r4, #0]
 8004b8e:	701e      	strb	r6, [r3, #0]
 8004b90:	6963      	ldr	r3, [r4, #20]
 8004b92:	3001      	adds	r0, #1
 8004b94:	4283      	cmp	r3, r0
 8004b96:	d004      	beq.n	8004ba2 <__swbuf_r+0x62>
 8004b98:	89a3      	ldrh	r3, [r4, #12]
 8004b9a:	07db      	lsls	r3, r3, #31
 8004b9c:	d506      	bpl.n	8004bac <__swbuf_r+0x6c>
 8004b9e:	2e0a      	cmp	r6, #10
 8004ba0:	d104      	bne.n	8004bac <__swbuf_r+0x6c>
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	f000 f911 	bl	8004dcc <_fflush_r>
 8004baa:	b988      	cbnz	r0, 8004bd0 <__swbuf_r+0x90>
 8004bac:	4638      	mov	r0, r7
 8004bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bb0:	4b0a      	ldr	r3, [pc, #40]	; (8004bdc <__swbuf_r+0x9c>)
 8004bb2:	429c      	cmp	r4, r3
 8004bb4:	d101      	bne.n	8004bba <__swbuf_r+0x7a>
 8004bb6:	68ac      	ldr	r4, [r5, #8]
 8004bb8:	e7cf      	b.n	8004b5a <__swbuf_r+0x1a>
 8004bba:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <__swbuf_r+0xa0>)
 8004bbc:	429c      	cmp	r4, r3
 8004bbe:	bf08      	it	eq
 8004bc0:	68ec      	ldreq	r4, [r5, #12]
 8004bc2:	e7ca      	b.n	8004b5a <__swbuf_r+0x1a>
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	f000 f80c 	bl	8004be4 <__swsetup_r>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	d0cb      	beq.n	8004b68 <__swbuf_r+0x28>
 8004bd0:	f04f 37ff 	mov.w	r7, #4294967295
 8004bd4:	e7ea      	b.n	8004bac <__swbuf_r+0x6c>
 8004bd6:	bf00      	nop
 8004bd8:	080055b0 	.word	0x080055b0
 8004bdc:	080055d0 	.word	0x080055d0
 8004be0:	08005590 	.word	0x08005590

08004be4 <__swsetup_r>:
 8004be4:	4b32      	ldr	r3, [pc, #200]	; (8004cb0 <__swsetup_r+0xcc>)
 8004be6:	b570      	push	{r4, r5, r6, lr}
 8004be8:	681d      	ldr	r5, [r3, #0]
 8004bea:	4606      	mov	r6, r0
 8004bec:	460c      	mov	r4, r1
 8004bee:	b125      	cbz	r5, 8004bfa <__swsetup_r+0x16>
 8004bf0:	69ab      	ldr	r3, [r5, #24]
 8004bf2:	b913      	cbnz	r3, 8004bfa <__swsetup_r+0x16>
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	f000 f97d 	bl	8004ef4 <__sinit>
 8004bfa:	4b2e      	ldr	r3, [pc, #184]	; (8004cb4 <__swsetup_r+0xd0>)
 8004bfc:	429c      	cmp	r4, r3
 8004bfe:	d10f      	bne.n	8004c20 <__swsetup_r+0x3c>
 8004c00:	686c      	ldr	r4, [r5, #4]
 8004c02:	89a3      	ldrh	r3, [r4, #12]
 8004c04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c08:	0719      	lsls	r1, r3, #28
 8004c0a:	d42c      	bmi.n	8004c66 <__swsetup_r+0x82>
 8004c0c:	06dd      	lsls	r5, r3, #27
 8004c0e:	d411      	bmi.n	8004c34 <__swsetup_r+0x50>
 8004c10:	2309      	movs	r3, #9
 8004c12:	6033      	str	r3, [r6, #0]
 8004c14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c18:	81a3      	strh	r3, [r4, #12]
 8004c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1e:	e03e      	b.n	8004c9e <__swsetup_r+0xba>
 8004c20:	4b25      	ldr	r3, [pc, #148]	; (8004cb8 <__swsetup_r+0xd4>)
 8004c22:	429c      	cmp	r4, r3
 8004c24:	d101      	bne.n	8004c2a <__swsetup_r+0x46>
 8004c26:	68ac      	ldr	r4, [r5, #8]
 8004c28:	e7eb      	b.n	8004c02 <__swsetup_r+0x1e>
 8004c2a:	4b24      	ldr	r3, [pc, #144]	; (8004cbc <__swsetup_r+0xd8>)
 8004c2c:	429c      	cmp	r4, r3
 8004c2e:	bf08      	it	eq
 8004c30:	68ec      	ldreq	r4, [r5, #12]
 8004c32:	e7e6      	b.n	8004c02 <__swsetup_r+0x1e>
 8004c34:	0758      	lsls	r0, r3, #29
 8004c36:	d512      	bpl.n	8004c5e <__swsetup_r+0x7a>
 8004c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c3a:	b141      	cbz	r1, 8004c4e <__swsetup_r+0x6a>
 8004c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c40:	4299      	cmp	r1, r3
 8004c42:	d002      	beq.n	8004c4a <__swsetup_r+0x66>
 8004c44:	4630      	mov	r0, r6
 8004c46:	f000 fa5b 	bl	8005100 <_free_r>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	6363      	str	r3, [r4, #52]	; 0x34
 8004c4e:	89a3      	ldrh	r3, [r4, #12]
 8004c50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c54:	81a3      	strh	r3, [r4, #12]
 8004c56:	2300      	movs	r3, #0
 8004c58:	6063      	str	r3, [r4, #4]
 8004c5a:	6923      	ldr	r3, [r4, #16]
 8004c5c:	6023      	str	r3, [r4, #0]
 8004c5e:	89a3      	ldrh	r3, [r4, #12]
 8004c60:	f043 0308 	orr.w	r3, r3, #8
 8004c64:	81a3      	strh	r3, [r4, #12]
 8004c66:	6923      	ldr	r3, [r4, #16]
 8004c68:	b94b      	cbnz	r3, 8004c7e <__swsetup_r+0x9a>
 8004c6a:	89a3      	ldrh	r3, [r4, #12]
 8004c6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c74:	d003      	beq.n	8004c7e <__swsetup_r+0x9a>
 8004c76:	4621      	mov	r1, r4
 8004c78:	4630      	mov	r0, r6
 8004c7a:	f000 fa01 	bl	8005080 <__smakebuf_r>
 8004c7e:	89a0      	ldrh	r0, [r4, #12]
 8004c80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c84:	f010 0301 	ands.w	r3, r0, #1
 8004c88:	d00a      	beq.n	8004ca0 <__swsetup_r+0xbc>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60a3      	str	r3, [r4, #8]
 8004c8e:	6963      	ldr	r3, [r4, #20]
 8004c90:	425b      	negs	r3, r3
 8004c92:	61a3      	str	r3, [r4, #24]
 8004c94:	6923      	ldr	r3, [r4, #16]
 8004c96:	b943      	cbnz	r3, 8004caa <__swsetup_r+0xc6>
 8004c98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c9c:	d1ba      	bne.n	8004c14 <__swsetup_r+0x30>
 8004c9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ca0:	0781      	lsls	r1, r0, #30
 8004ca2:	bf58      	it	pl
 8004ca4:	6963      	ldrpl	r3, [r4, #20]
 8004ca6:	60a3      	str	r3, [r4, #8]
 8004ca8:	e7f4      	b.n	8004c94 <__swsetup_r+0xb0>
 8004caa:	2000      	movs	r0, #0
 8004cac:	e7f7      	b.n	8004c9e <__swsetup_r+0xba>
 8004cae:	bf00      	nop
 8004cb0:	2000000c 	.word	0x2000000c
 8004cb4:	080055b0 	.word	0x080055b0
 8004cb8:	080055d0 	.word	0x080055d0
 8004cbc:	08005590 	.word	0x08005590

08004cc0 <__sflush_r>:
 8004cc0:	898a      	ldrh	r2, [r1, #12]
 8004cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc6:	4605      	mov	r5, r0
 8004cc8:	0710      	lsls	r0, r2, #28
 8004cca:	460c      	mov	r4, r1
 8004ccc:	d458      	bmi.n	8004d80 <__sflush_r+0xc0>
 8004cce:	684b      	ldr	r3, [r1, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	dc05      	bgt.n	8004ce0 <__sflush_r+0x20>
 8004cd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	dc02      	bgt.n	8004ce0 <__sflush_r+0x20>
 8004cda:	2000      	movs	r0, #0
 8004cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ce0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ce2:	2e00      	cmp	r6, #0
 8004ce4:	d0f9      	beq.n	8004cda <__sflush_r+0x1a>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004cec:	682f      	ldr	r7, [r5, #0]
 8004cee:	602b      	str	r3, [r5, #0]
 8004cf0:	d032      	beq.n	8004d58 <__sflush_r+0x98>
 8004cf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cf4:	89a3      	ldrh	r3, [r4, #12]
 8004cf6:	075a      	lsls	r2, r3, #29
 8004cf8:	d505      	bpl.n	8004d06 <__sflush_r+0x46>
 8004cfa:	6863      	ldr	r3, [r4, #4]
 8004cfc:	1ac0      	subs	r0, r0, r3
 8004cfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d00:	b10b      	cbz	r3, 8004d06 <__sflush_r+0x46>
 8004d02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d04:	1ac0      	subs	r0, r0, r3
 8004d06:	2300      	movs	r3, #0
 8004d08:	4602      	mov	r2, r0
 8004d0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d0c:	6a21      	ldr	r1, [r4, #32]
 8004d0e:	4628      	mov	r0, r5
 8004d10:	47b0      	blx	r6
 8004d12:	1c43      	adds	r3, r0, #1
 8004d14:	89a3      	ldrh	r3, [r4, #12]
 8004d16:	d106      	bne.n	8004d26 <__sflush_r+0x66>
 8004d18:	6829      	ldr	r1, [r5, #0]
 8004d1a:	291d      	cmp	r1, #29
 8004d1c:	d82c      	bhi.n	8004d78 <__sflush_r+0xb8>
 8004d1e:	4a2a      	ldr	r2, [pc, #168]	; (8004dc8 <__sflush_r+0x108>)
 8004d20:	40ca      	lsrs	r2, r1
 8004d22:	07d6      	lsls	r6, r2, #31
 8004d24:	d528      	bpl.n	8004d78 <__sflush_r+0xb8>
 8004d26:	2200      	movs	r2, #0
 8004d28:	6062      	str	r2, [r4, #4]
 8004d2a:	04d9      	lsls	r1, r3, #19
 8004d2c:	6922      	ldr	r2, [r4, #16]
 8004d2e:	6022      	str	r2, [r4, #0]
 8004d30:	d504      	bpl.n	8004d3c <__sflush_r+0x7c>
 8004d32:	1c42      	adds	r2, r0, #1
 8004d34:	d101      	bne.n	8004d3a <__sflush_r+0x7a>
 8004d36:	682b      	ldr	r3, [r5, #0]
 8004d38:	b903      	cbnz	r3, 8004d3c <__sflush_r+0x7c>
 8004d3a:	6560      	str	r0, [r4, #84]	; 0x54
 8004d3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d3e:	602f      	str	r7, [r5, #0]
 8004d40:	2900      	cmp	r1, #0
 8004d42:	d0ca      	beq.n	8004cda <__sflush_r+0x1a>
 8004d44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d48:	4299      	cmp	r1, r3
 8004d4a:	d002      	beq.n	8004d52 <__sflush_r+0x92>
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	f000 f9d7 	bl	8005100 <_free_r>
 8004d52:	2000      	movs	r0, #0
 8004d54:	6360      	str	r0, [r4, #52]	; 0x34
 8004d56:	e7c1      	b.n	8004cdc <__sflush_r+0x1c>
 8004d58:	6a21      	ldr	r1, [r4, #32]
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	47b0      	blx	r6
 8004d60:	1c41      	adds	r1, r0, #1
 8004d62:	d1c7      	bne.n	8004cf4 <__sflush_r+0x34>
 8004d64:	682b      	ldr	r3, [r5, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0c4      	beq.n	8004cf4 <__sflush_r+0x34>
 8004d6a:	2b1d      	cmp	r3, #29
 8004d6c:	d001      	beq.n	8004d72 <__sflush_r+0xb2>
 8004d6e:	2b16      	cmp	r3, #22
 8004d70:	d101      	bne.n	8004d76 <__sflush_r+0xb6>
 8004d72:	602f      	str	r7, [r5, #0]
 8004d74:	e7b1      	b.n	8004cda <__sflush_r+0x1a>
 8004d76:	89a3      	ldrh	r3, [r4, #12]
 8004d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d7c:	81a3      	strh	r3, [r4, #12]
 8004d7e:	e7ad      	b.n	8004cdc <__sflush_r+0x1c>
 8004d80:	690f      	ldr	r7, [r1, #16]
 8004d82:	2f00      	cmp	r7, #0
 8004d84:	d0a9      	beq.n	8004cda <__sflush_r+0x1a>
 8004d86:	0793      	lsls	r3, r2, #30
 8004d88:	680e      	ldr	r6, [r1, #0]
 8004d8a:	bf08      	it	eq
 8004d8c:	694b      	ldreq	r3, [r1, #20]
 8004d8e:	600f      	str	r7, [r1, #0]
 8004d90:	bf18      	it	ne
 8004d92:	2300      	movne	r3, #0
 8004d94:	eba6 0807 	sub.w	r8, r6, r7
 8004d98:	608b      	str	r3, [r1, #8]
 8004d9a:	f1b8 0f00 	cmp.w	r8, #0
 8004d9e:	dd9c      	ble.n	8004cda <__sflush_r+0x1a>
 8004da0:	6a21      	ldr	r1, [r4, #32]
 8004da2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004da4:	4643      	mov	r3, r8
 8004da6:	463a      	mov	r2, r7
 8004da8:	4628      	mov	r0, r5
 8004daa:	47b0      	blx	r6
 8004dac:	2800      	cmp	r0, #0
 8004dae:	dc06      	bgt.n	8004dbe <__sflush_r+0xfe>
 8004db0:	89a3      	ldrh	r3, [r4, #12]
 8004db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004db6:	81a3      	strh	r3, [r4, #12]
 8004db8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbc:	e78e      	b.n	8004cdc <__sflush_r+0x1c>
 8004dbe:	4407      	add	r7, r0
 8004dc0:	eba8 0800 	sub.w	r8, r8, r0
 8004dc4:	e7e9      	b.n	8004d9a <__sflush_r+0xda>
 8004dc6:	bf00      	nop
 8004dc8:	20400001 	.word	0x20400001

08004dcc <_fflush_r>:
 8004dcc:	b538      	push	{r3, r4, r5, lr}
 8004dce:	690b      	ldr	r3, [r1, #16]
 8004dd0:	4605      	mov	r5, r0
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	b913      	cbnz	r3, 8004ddc <_fflush_r+0x10>
 8004dd6:	2500      	movs	r5, #0
 8004dd8:	4628      	mov	r0, r5
 8004dda:	bd38      	pop	{r3, r4, r5, pc}
 8004ddc:	b118      	cbz	r0, 8004de6 <_fflush_r+0x1a>
 8004dde:	6983      	ldr	r3, [r0, #24]
 8004de0:	b90b      	cbnz	r3, 8004de6 <_fflush_r+0x1a>
 8004de2:	f000 f887 	bl	8004ef4 <__sinit>
 8004de6:	4b14      	ldr	r3, [pc, #80]	; (8004e38 <_fflush_r+0x6c>)
 8004de8:	429c      	cmp	r4, r3
 8004dea:	d11b      	bne.n	8004e24 <_fflush_r+0x58>
 8004dec:	686c      	ldr	r4, [r5, #4]
 8004dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0ef      	beq.n	8004dd6 <_fflush_r+0xa>
 8004df6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004df8:	07d0      	lsls	r0, r2, #31
 8004dfa:	d404      	bmi.n	8004e06 <_fflush_r+0x3a>
 8004dfc:	0599      	lsls	r1, r3, #22
 8004dfe:	d402      	bmi.n	8004e06 <_fflush_r+0x3a>
 8004e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e02:	f000 f915 	bl	8005030 <__retarget_lock_acquire_recursive>
 8004e06:	4628      	mov	r0, r5
 8004e08:	4621      	mov	r1, r4
 8004e0a:	f7ff ff59 	bl	8004cc0 <__sflush_r>
 8004e0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e10:	07da      	lsls	r2, r3, #31
 8004e12:	4605      	mov	r5, r0
 8004e14:	d4e0      	bmi.n	8004dd8 <_fflush_r+0xc>
 8004e16:	89a3      	ldrh	r3, [r4, #12]
 8004e18:	059b      	lsls	r3, r3, #22
 8004e1a:	d4dd      	bmi.n	8004dd8 <_fflush_r+0xc>
 8004e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e1e:	f000 f908 	bl	8005032 <__retarget_lock_release_recursive>
 8004e22:	e7d9      	b.n	8004dd8 <_fflush_r+0xc>
 8004e24:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <_fflush_r+0x70>)
 8004e26:	429c      	cmp	r4, r3
 8004e28:	d101      	bne.n	8004e2e <_fflush_r+0x62>
 8004e2a:	68ac      	ldr	r4, [r5, #8]
 8004e2c:	e7df      	b.n	8004dee <_fflush_r+0x22>
 8004e2e:	4b04      	ldr	r3, [pc, #16]	; (8004e40 <_fflush_r+0x74>)
 8004e30:	429c      	cmp	r4, r3
 8004e32:	bf08      	it	eq
 8004e34:	68ec      	ldreq	r4, [r5, #12]
 8004e36:	e7da      	b.n	8004dee <_fflush_r+0x22>
 8004e38:	080055b0 	.word	0x080055b0
 8004e3c:	080055d0 	.word	0x080055d0
 8004e40:	08005590 	.word	0x08005590

08004e44 <std>:
 8004e44:	2300      	movs	r3, #0
 8004e46:	b510      	push	{r4, lr}
 8004e48:	4604      	mov	r4, r0
 8004e4a:	e9c0 3300 	strd	r3, r3, [r0]
 8004e4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e52:	6083      	str	r3, [r0, #8]
 8004e54:	8181      	strh	r1, [r0, #12]
 8004e56:	6643      	str	r3, [r0, #100]	; 0x64
 8004e58:	81c2      	strh	r2, [r0, #14]
 8004e5a:	6183      	str	r3, [r0, #24]
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	2208      	movs	r2, #8
 8004e60:	305c      	adds	r0, #92	; 0x5c
 8004e62:	f7ff fdef 	bl	8004a44 <memset>
 8004e66:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <std+0x38>)
 8004e68:	6263      	str	r3, [r4, #36]	; 0x24
 8004e6a:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <std+0x3c>)
 8004e6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e6e:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <std+0x40>)
 8004e70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e72:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <std+0x44>)
 8004e74:	6224      	str	r4, [r4, #32]
 8004e76:	6323      	str	r3, [r4, #48]	; 0x30
 8004e78:	bd10      	pop	{r4, pc}
 8004e7a:	bf00      	nop
 8004e7c:	080052e1 	.word	0x080052e1
 8004e80:	08005303 	.word	0x08005303
 8004e84:	0800533b 	.word	0x0800533b
 8004e88:	0800535f 	.word	0x0800535f

08004e8c <_cleanup_r>:
 8004e8c:	4901      	ldr	r1, [pc, #4]	; (8004e94 <_cleanup_r+0x8>)
 8004e8e:	f000 b8af 	b.w	8004ff0 <_fwalk_reent>
 8004e92:	bf00      	nop
 8004e94:	08004dcd 	.word	0x08004dcd

08004e98 <__sfmoreglue>:
 8004e98:	b570      	push	{r4, r5, r6, lr}
 8004e9a:	2268      	movs	r2, #104	; 0x68
 8004e9c:	1e4d      	subs	r5, r1, #1
 8004e9e:	4355      	muls	r5, r2
 8004ea0:	460e      	mov	r6, r1
 8004ea2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ea6:	f000 f997 	bl	80051d8 <_malloc_r>
 8004eaa:	4604      	mov	r4, r0
 8004eac:	b140      	cbz	r0, 8004ec0 <__sfmoreglue+0x28>
 8004eae:	2100      	movs	r1, #0
 8004eb0:	e9c0 1600 	strd	r1, r6, [r0]
 8004eb4:	300c      	adds	r0, #12
 8004eb6:	60a0      	str	r0, [r4, #8]
 8004eb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ebc:	f7ff fdc2 	bl	8004a44 <memset>
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	bd70      	pop	{r4, r5, r6, pc}

08004ec4 <__sfp_lock_acquire>:
 8004ec4:	4801      	ldr	r0, [pc, #4]	; (8004ecc <__sfp_lock_acquire+0x8>)
 8004ec6:	f000 b8b3 	b.w	8005030 <__retarget_lock_acquire_recursive>
 8004eca:	bf00      	nop
 8004ecc:	200144ac 	.word	0x200144ac

08004ed0 <__sfp_lock_release>:
 8004ed0:	4801      	ldr	r0, [pc, #4]	; (8004ed8 <__sfp_lock_release+0x8>)
 8004ed2:	f000 b8ae 	b.w	8005032 <__retarget_lock_release_recursive>
 8004ed6:	bf00      	nop
 8004ed8:	200144ac 	.word	0x200144ac

08004edc <__sinit_lock_acquire>:
 8004edc:	4801      	ldr	r0, [pc, #4]	; (8004ee4 <__sinit_lock_acquire+0x8>)
 8004ede:	f000 b8a7 	b.w	8005030 <__retarget_lock_acquire_recursive>
 8004ee2:	bf00      	nop
 8004ee4:	200144ad 	.word	0x200144ad

08004ee8 <__sinit_lock_release>:
 8004ee8:	4801      	ldr	r0, [pc, #4]	; (8004ef0 <__sinit_lock_release+0x8>)
 8004eea:	f000 b8a2 	b.w	8005032 <__retarget_lock_release_recursive>
 8004eee:	bf00      	nop
 8004ef0:	200144ad 	.word	0x200144ad

08004ef4 <__sinit>:
 8004ef4:	b510      	push	{r4, lr}
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	f7ff fff0 	bl	8004edc <__sinit_lock_acquire>
 8004efc:	69a3      	ldr	r3, [r4, #24]
 8004efe:	b11b      	cbz	r3, 8004f08 <__sinit+0x14>
 8004f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f04:	f7ff bff0 	b.w	8004ee8 <__sinit_lock_release>
 8004f08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004f0c:	6523      	str	r3, [r4, #80]	; 0x50
 8004f0e:	4b13      	ldr	r3, [pc, #76]	; (8004f5c <__sinit+0x68>)
 8004f10:	4a13      	ldr	r2, [pc, #76]	; (8004f60 <__sinit+0x6c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f16:	42a3      	cmp	r3, r4
 8004f18:	bf04      	itt	eq
 8004f1a:	2301      	moveq	r3, #1
 8004f1c:	61a3      	streq	r3, [r4, #24]
 8004f1e:	4620      	mov	r0, r4
 8004f20:	f000 f820 	bl	8004f64 <__sfp>
 8004f24:	6060      	str	r0, [r4, #4]
 8004f26:	4620      	mov	r0, r4
 8004f28:	f000 f81c 	bl	8004f64 <__sfp>
 8004f2c:	60a0      	str	r0, [r4, #8]
 8004f2e:	4620      	mov	r0, r4
 8004f30:	f000 f818 	bl	8004f64 <__sfp>
 8004f34:	2200      	movs	r2, #0
 8004f36:	60e0      	str	r0, [r4, #12]
 8004f38:	2104      	movs	r1, #4
 8004f3a:	6860      	ldr	r0, [r4, #4]
 8004f3c:	f7ff ff82 	bl	8004e44 <std>
 8004f40:	68a0      	ldr	r0, [r4, #8]
 8004f42:	2201      	movs	r2, #1
 8004f44:	2109      	movs	r1, #9
 8004f46:	f7ff ff7d 	bl	8004e44 <std>
 8004f4a:	68e0      	ldr	r0, [r4, #12]
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	2112      	movs	r1, #18
 8004f50:	f7ff ff78 	bl	8004e44 <std>
 8004f54:	2301      	movs	r3, #1
 8004f56:	61a3      	str	r3, [r4, #24]
 8004f58:	e7d2      	b.n	8004f00 <__sinit+0xc>
 8004f5a:	bf00      	nop
 8004f5c:	0800558c 	.word	0x0800558c
 8004f60:	08004e8d 	.word	0x08004e8d

08004f64 <__sfp>:
 8004f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f66:	4607      	mov	r7, r0
 8004f68:	f7ff ffac 	bl	8004ec4 <__sfp_lock_acquire>
 8004f6c:	4b1e      	ldr	r3, [pc, #120]	; (8004fe8 <__sfp+0x84>)
 8004f6e:	681e      	ldr	r6, [r3, #0]
 8004f70:	69b3      	ldr	r3, [r6, #24]
 8004f72:	b913      	cbnz	r3, 8004f7a <__sfp+0x16>
 8004f74:	4630      	mov	r0, r6
 8004f76:	f7ff ffbd 	bl	8004ef4 <__sinit>
 8004f7a:	3648      	adds	r6, #72	; 0x48
 8004f7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f80:	3b01      	subs	r3, #1
 8004f82:	d503      	bpl.n	8004f8c <__sfp+0x28>
 8004f84:	6833      	ldr	r3, [r6, #0]
 8004f86:	b30b      	cbz	r3, 8004fcc <__sfp+0x68>
 8004f88:	6836      	ldr	r6, [r6, #0]
 8004f8a:	e7f7      	b.n	8004f7c <__sfp+0x18>
 8004f8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f90:	b9d5      	cbnz	r5, 8004fc8 <__sfp+0x64>
 8004f92:	4b16      	ldr	r3, [pc, #88]	; (8004fec <__sfp+0x88>)
 8004f94:	60e3      	str	r3, [r4, #12]
 8004f96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f9a:	6665      	str	r5, [r4, #100]	; 0x64
 8004f9c:	f000 f847 	bl	800502e <__retarget_lock_init_recursive>
 8004fa0:	f7ff ff96 	bl	8004ed0 <__sfp_lock_release>
 8004fa4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004fa8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004fac:	6025      	str	r5, [r4, #0]
 8004fae:	61a5      	str	r5, [r4, #24]
 8004fb0:	2208      	movs	r2, #8
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004fb8:	f7ff fd44 	bl	8004a44 <memset>
 8004fbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004fc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fc8:	3468      	adds	r4, #104	; 0x68
 8004fca:	e7d9      	b.n	8004f80 <__sfp+0x1c>
 8004fcc:	2104      	movs	r1, #4
 8004fce:	4638      	mov	r0, r7
 8004fd0:	f7ff ff62 	bl	8004e98 <__sfmoreglue>
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	6030      	str	r0, [r6, #0]
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	d1d5      	bne.n	8004f88 <__sfp+0x24>
 8004fdc:	f7ff ff78 	bl	8004ed0 <__sfp_lock_release>
 8004fe0:	230c      	movs	r3, #12
 8004fe2:	603b      	str	r3, [r7, #0]
 8004fe4:	e7ee      	b.n	8004fc4 <__sfp+0x60>
 8004fe6:	bf00      	nop
 8004fe8:	0800558c 	.word	0x0800558c
 8004fec:	ffff0001 	.word	0xffff0001

08004ff0 <_fwalk_reent>:
 8004ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ff4:	4606      	mov	r6, r0
 8004ff6:	4688      	mov	r8, r1
 8004ff8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ffc:	2700      	movs	r7, #0
 8004ffe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005002:	f1b9 0901 	subs.w	r9, r9, #1
 8005006:	d505      	bpl.n	8005014 <_fwalk_reent+0x24>
 8005008:	6824      	ldr	r4, [r4, #0]
 800500a:	2c00      	cmp	r4, #0
 800500c:	d1f7      	bne.n	8004ffe <_fwalk_reent+0xe>
 800500e:	4638      	mov	r0, r7
 8005010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005014:	89ab      	ldrh	r3, [r5, #12]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d907      	bls.n	800502a <_fwalk_reent+0x3a>
 800501a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800501e:	3301      	adds	r3, #1
 8005020:	d003      	beq.n	800502a <_fwalk_reent+0x3a>
 8005022:	4629      	mov	r1, r5
 8005024:	4630      	mov	r0, r6
 8005026:	47c0      	blx	r8
 8005028:	4307      	orrs	r7, r0
 800502a:	3568      	adds	r5, #104	; 0x68
 800502c:	e7e9      	b.n	8005002 <_fwalk_reent+0x12>

0800502e <__retarget_lock_init_recursive>:
 800502e:	4770      	bx	lr

08005030 <__retarget_lock_acquire_recursive>:
 8005030:	4770      	bx	lr

08005032 <__retarget_lock_release_recursive>:
 8005032:	4770      	bx	lr

08005034 <__swhatbuf_r>:
 8005034:	b570      	push	{r4, r5, r6, lr}
 8005036:	460e      	mov	r6, r1
 8005038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800503c:	2900      	cmp	r1, #0
 800503e:	b096      	sub	sp, #88	; 0x58
 8005040:	4614      	mov	r4, r2
 8005042:	461d      	mov	r5, r3
 8005044:	da08      	bge.n	8005058 <__swhatbuf_r+0x24>
 8005046:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	602a      	str	r2, [r5, #0]
 800504e:	061a      	lsls	r2, r3, #24
 8005050:	d410      	bmi.n	8005074 <__swhatbuf_r+0x40>
 8005052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005056:	e00e      	b.n	8005076 <__swhatbuf_r+0x42>
 8005058:	466a      	mov	r2, sp
 800505a:	f000 f995 	bl	8005388 <_fstat_r>
 800505e:	2800      	cmp	r0, #0
 8005060:	dbf1      	blt.n	8005046 <__swhatbuf_r+0x12>
 8005062:	9a01      	ldr	r2, [sp, #4]
 8005064:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005068:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800506c:	425a      	negs	r2, r3
 800506e:	415a      	adcs	r2, r3
 8005070:	602a      	str	r2, [r5, #0]
 8005072:	e7ee      	b.n	8005052 <__swhatbuf_r+0x1e>
 8005074:	2340      	movs	r3, #64	; 0x40
 8005076:	2000      	movs	r0, #0
 8005078:	6023      	str	r3, [r4, #0]
 800507a:	b016      	add	sp, #88	; 0x58
 800507c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005080 <__smakebuf_r>:
 8005080:	898b      	ldrh	r3, [r1, #12]
 8005082:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005084:	079d      	lsls	r5, r3, #30
 8005086:	4606      	mov	r6, r0
 8005088:	460c      	mov	r4, r1
 800508a:	d507      	bpl.n	800509c <__smakebuf_r+0x1c>
 800508c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005090:	6023      	str	r3, [r4, #0]
 8005092:	6123      	str	r3, [r4, #16]
 8005094:	2301      	movs	r3, #1
 8005096:	6163      	str	r3, [r4, #20]
 8005098:	b002      	add	sp, #8
 800509a:	bd70      	pop	{r4, r5, r6, pc}
 800509c:	ab01      	add	r3, sp, #4
 800509e:	466a      	mov	r2, sp
 80050a0:	f7ff ffc8 	bl	8005034 <__swhatbuf_r>
 80050a4:	9900      	ldr	r1, [sp, #0]
 80050a6:	4605      	mov	r5, r0
 80050a8:	4630      	mov	r0, r6
 80050aa:	f000 f895 	bl	80051d8 <_malloc_r>
 80050ae:	b948      	cbnz	r0, 80050c4 <__smakebuf_r+0x44>
 80050b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050b4:	059a      	lsls	r2, r3, #22
 80050b6:	d4ef      	bmi.n	8005098 <__smakebuf_r+0x18>
 80050b8:	f023 0303 	bic.w	r3, r3, #3
 80050bc:	f043 0302 	orr.w	r3, r3, #2
 80050c0:	81a3      	strh	r3, [r4, #12]
 80050c2:	e7e3      	b.n	800508c <__smakebuf_r+0xc>
 80050c4:	4b0d      	ldr	r3, [pc, #52]	; (80050fc <__smakebuf_r+0x7c>)
 80050c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80050c8:	89a3      	ldrh	r3, [r4, #12]
 80050ca:	6020      	str	r0, [r4, #0]
 80050cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d0:	81a3      	strh	r3, [r4, #12]
 80050d2:	9b00      	ldr	r3, [sp, #0]
 80050d4:	6163      	str	r3, [r4, #20]
 80050d6:	9b01      	ldr	r3, [sp, #4]
 80050d8:	6120      	str	r0, [r4, #16]
 80050da:	b15b      	cbz	r3, 80050f4 <__smakebuf_r+0x74>
 80050dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050e0:	4630      	mov	r0, r6
 80050e2:	f000 f963 	bl	80053ac <_isatty_r>
 80050e6:	b128      	cbz	r0, 80050f4 <__smakebuf_r+0x74>
 80050e8:	89a3      	ldrh	r3, [r4, #12]
 80050ea:	f023 0303 	bic.w	r3, r3, #3
 80050ee:	f043 0301 	orr.w	r3, r3, #1
 80050f2:	81a3      	strh	r3, [r4, #12]
 80050f4:	89a0      	ldrh	r0, [r4, #12]
 80050f6:	4305      	orrs	r5, r0
 80050f8:	81a5      	strh	r5, [r4, #12]
 80050fa:	e7cd      	b.n	8005098 <__smakebuf_r+0x18>
 80050fc:	08004e8d 	.word	0x08004e8d

08005100 <_free_r>:
 8005100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005102:	2900      	cmp	r1, #0
 8005104:	d044      	beq.n	8005190 <_free_r+0x90>
 8005106:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800510a:	9001      	str	r0, [sp, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	f1a1 0404 	sub.w	r4, r1, #4
 8005112:	bfb8      	it	lt
 8005114:	18e4      	addlt	r4, r4, r3
 8005116:	f000 f96b 	bl	80053f0 <__malloc_lock>
 800511a:	4a1e      	ldr	r2, [pc, #120]	; (8005194 <_free_r+0x94>)
 800511c:	9801      	ldr	r0, [sp, #4]
 800511e:	6813      	ldr	r3, [r2, #0]
 8005120:	b933      	cbnz	r3, 8005130 <_free_r+0x30>
 8005122:	6063      	str	r3, [r4, #4]
 8005124:	6014      	str	r4, [r2, #0]
 8005126:	b003      	add	sp, #12
 8005128:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800512c:	f000 b966 	b.w	80053fc <__malloc_unlock>
 8005130:	42a3      	cmp	r3, r4
 8005132:	d908      	bls.n	8005146 <_free_r+0x46>
 8005134:	6825      	ldr	r5, [r4, #0]
 8005136:	1961      	adds	r1, r4, r5
 8005138:	428b      	cmp	r3, r1
 800513a:	bf01      	itttt	eq
 800513c:	6819      	ldreq	r1, [r3, #0]
 800513e:	685b      	ldreq	r3, [r3, #4]
 8005140:	1949      	addeq	r1, r1, r5
 8005142:	6021      	streq	r1, [r4, #0]
 8005144:	e7ed      	b.n	8005122 <_free_r+0x22>
 8005146:	461a      	mov	r2, r3
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	b10b      	cbz	r3, 8005150 <_free_r+0x50>
 800514c:	42a3      	cmp	r3, r4
 800514e:	d9fa      	bls.n	8005146 <_free_r+0x46>
 8005150:	6811      	ldr	r1, [r2, #0]
 8005152:	1855      	adds	r5, r2, r1
 8005154:	42a5      	cmp	r5, r4
 8005156:	d10b      	bne.n	8005170 <_free_r+0x70>
 8005158:	6824      	ldr	r4, [r4, #0]
 800515a:	4421      	add	r1, r4
 800515c:	1854      	adds	r4, r2, r1
 800515e:	42a3      	cmp	r3, r4
 8005160:	6011      	str	r1, [r2, #0]
 8005162:	d1e0      	bne.n	8005126 <_free_r+0x26>
 8005164:	681c      	ldr	r4, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	6053      	str	r3, [r2, #4]
 800516a:	4421      	add	r1, r4
 800516c:	6011      	str	r1, [r2, #0]
 800516e:	e7da      	b.n	8005126 <_free_r+0x26>
 8005170:	d902      	bls.n	8005178 <_free_r+0x78>
 8005172:	230c      	movs	r3, #12
 8005174:	6003      	str	r3, [r0, #0]
 8005176:	e7d6      	b.n	8005126 <_free_r+0x26>
 8005178:	6825      	ldr	r5, [r4, #0]
 800517a:	1961      	adds	r1, r4, r5
 800517c:	428b      	cmp	r3, r1
 800517e:	bf04      	itt	eq
 8005180:	6819      	ldreq	r1, [r3, #0]
 8005182:	685b      	ldreq	r3, [r3, #4]
 8005184:	6063      	str	r3, [r4, #4]
 8005186:	bf04      	itt	eq
 8005188:	1949      	addeq	r1, r1, r5
 800518a:	6021      	streq	r1, [r4, #0]
 800518c:	6054      	str	r4, [r2, #4]
 800518e:	e7ca      	b.n	8005126 <_free_r+0x26>
 8005190:	b003      	add	sp, #12
 8005192:	bd30      	pop	{r4, r5, pc}
 8005194:	200144b0 	.word	0x200144b0

08005198 <sbrk_aligned>:
 8005198:	b570      	push	{r4, r5, r6, lr}
 800519a:	4e0e      	ldr	r6, [pc, #56]	; (80051d4 <sbrk_aligned+0x3c>)
 800519c:	460c      	mov	r4, r1
 800519e:	6831      	ldr	r1, [r6, #0]
 80051a0:	4605      	mov	r5, r0
 80051a2:	b911      	cbnz	r1, 80051aa <sbrk_aligned+0x12>
 80051a4:	f000 f88c 	bl	80052c0 <_sbrk_r>
 80051a8:	6030      	str	r0, [r6, #0]
 80051aa:	4621      	mov	r1, r4
 80051ac:	4628      	mov	r0, r5
 80051ae:	f000 f887 	bl	80052c0 <_sbrk_r>
 80051b2:	1c43      	adds	r3, r0, #1
 80051b4:	d00a      	beq.n	80051cc <sbrk_aligned+0x34>
 80051b6:	1cc4      	adds	r4, r0, #3
 80051b8:	f024 0403 	bic.w	r4, r4, #3
 80051bc:	42a0      	cmp	r0, r4
 80051be:	d007      	beq.n	80051d0 <sbrk_aligned+0x38>
 80051c0:	1a21      	subs	r1, r4, r0
 80051c2:	4628      	mov	r0, r5
 80051c4:	f000 f87c 	bl	80052c0 <_sbrk_r>
 80051c8:	3001      	adds	r0, #1
 80051ca:	d101      	bne.n	80051d0 <sbrk_aligned+0x38>
 80051cc:	f04f 34ff 	mov.w	r4, #4294967295
 80051d0:	4620      	mov	r0, r4
 80051d2:	bd70      	pop	{r4, r5, r6, pc}
 80051d4:	200144b4 	.word	0x200144b4

080051d8 <_malloc_r>:
 80051d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051dc:	1ccd      	adds	r5, r1, #3
 80051de:	f025 0503 	bic.w	r5, r5, #3
 80051e2:	3508      	adds	r5, #8
 80051e4:	2d0c      	cmp	r5, #12
 80051e6:	bf38      	it	cc
 80051e8:	250c      	movcc	r5, #12
 80051ea:	2d00      	cmp	r5, #0
 80051ec:	4607      	mov	r7, r0
 80051ee:	db01      	blt.n	80051f4 <_malloc_r+0x1c>
 80051f0:	42a9      	cmp	r1, r5
 80051f2:	d905      	bls.n	8005200 <_malloc_r+0x28>
 80051f4:	230c      	movs	r3, #12
 80051f6:	603b      	str	r3, [r7, #0]
 80051f8:	2600      	movs	r6, #0
 80051fa:	4630      	mov	r0, r6
 80051fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005200:	4e2e      	ldr	r6, [pc, #184]	; (80052bc <_malloc_r+0xe4>)
 8005202:	f000 f8f5 	bl	80053f0 <__malloc_lock>
 8005206:	6833      	ldr	r3, [r6, #0]
 8005208:	461c      	mov	r4, r3
 800520a:	bb34      	cbnz	r4, 800525a <_malloc_r+0x82>
 800520c:	4629      	mov	r1, r5
 800520e:	4638      	mov	r0, r7
 8005210:	f7ff ffc2 	bl	8005198 <sbrk_aligned>
 8005214:	1c43      	adds	r3, r0, #1
 8005216:	4604      	mov	r4, r0
 8005218:	d14d      	bne.n	80052b6 <_malloc_r+0xde>
 800521a:	6834      	ldr	r4, [r6, #0]
 800521c:	4626      	mov	r6, r4
 800521e:	2e00      	cmp	r6, #0
 8005220:	d140      	bne.n	80052a4 <_malloc_r+0xcc>
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	4631      	mov	r1, r6
 8005226:	4638      	mov	r0, r7
 8005228:	eb04 0803 	add.w	r8, r4, r3
 800522c:	f000 f848 	bl	80052c0 <_sbrk_r>
 8005230:	4580      	cmp	r8, r0
 8005232:	d13a      	bne.n	80052aa <_malloc_r+0xd2>
 8005234:	6821      	ldr	r1, [r4, #0]
 8005236:	3503      	adds	r5, #3
 8005238:	1a6d      	subs	r5, r5, r1
 800523a:	f025 0503 	bic.w	r5, r5, #3
 800523e:	3508      	adds	r5, #8
 8005240:	2d0c      	cmp	r5, #12
 8005242:	bf38      	it	cc
 8005244:	250c      	movcc	r5, #12
 8005246:	4629      	mov	r1, r5
 8005248:	4638      	mov	r0, r7
 800524a:	f7ff ffa5 	bl	8005198 <sbrk_aligned>
 800524e:	3001      	adds	r0, #1
 8005250:	d02b      	beq.n	80052aa <_malloc_r+0xd2>
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	442b      	add	r3, r5
 8005256:	6023      	str	r3, [r4, #0]
 8005258:	e00e      	b.n	8005278 <_malloc_r+0xa0>
 800525a:	6822      	ldr	r2, [r4, #0]
 800525c:	1b52      	subs	r2, r2, r5
 800525e:	d41e      	bmi.n	800529e <_malloc_r+0xc6>
 8005260:	2a0b      	cmp	r2, #11
 8005262:	d916      	bls.n	8005292 <_malloc_r+0xba>
 8005264:	1961      	adds	r1, r4, r5
 8005266:	42a3      	cmp	r3, r4
 8005268:	6025      	str	r5, [r4, #0]
 800526a:	bf18      	it	ne
 800526c:	6059      	strne	r1, [r3, #4]
 800526e:	6863      	ldr	r3, [r4, #4]
 8005270:	bf08      	it	eq
 8005272:	6031      	streq	r1, [r6, #0]
 8005274:	5162      	str	r2, [r4, r5]
 8005276:	604b      	str	r3, [r1, #4]
 8005278:	4638      	mov	r0, r7
 800527a:	f104 060b 	add.w	r6, r4, #11
 800527e:	f000 f8bd 	bl	80053fc <__malloc_unlock>
 8005282:	f026 0607 	bic.w	r6, r6, #7
 8005286:	1d23      	adds	r3, r4, #4
 8005288:	1af2      	subs	r2, r6, r3
 800528a:	d0b6      	beq.n	80051fa <_malloc_r+0x22>
 800528c:	1b9b      	subs	r3, r3, r6
 800528e:	50a3      	str	r3, [r4, r2]
 8005290:	e7b3      	b.n	80051fa <_malloc_r+0x22>
 8005292:	6862      	ldr	r2, [r4, #4]
 8005294:	42a3      	cmp	r3, r4
 8005296:	bf0c      	ite	eq
 8005298:	6032      	streq	r2, [r6, #0]
 800529a:	605a      	strne	r2, [r3, #4]
 800529c:	e7ec      	b.n	8005278 <_malloc_r+0xa0>
 800529e:	4623      	mov	r3, r4
 80052a0:	6864      	ldr	r4, [r4, #4]
 80052a2:	e7b2      	b.n	800520a <_malloc_r+0x32>
 80052a4:	4634      	mov	r4, r6
 80052a6:	6876      	ldr	r6, [r6, #4]
 80052a8:	e7b9      	b.n	800521e <_malloc_r+0x46>
 80052aa:	230c      	movs	r3, #12
 80052ac:	603b      	str	r3, [r7, #0]
 80052ae:	4638      	mov	r0, r7
 80052b0:	f000 f8a4 	bl	80053fc <__malloc_unlock>
 80052b4:	e7a1      	b.n	80051fa <_malloc_r+0x22>
 80052b6:	6025      	str	r5, [r4, #0]
 80052b8:	e7de      	b.n	8005278 <_malloc_r+0xa0>
 80052ba:	bf00      	nop
 80052bc:	200144b0 	.word	0x200144b0

080052c0 <_sbrk_r>:
 80052c0:	b538      	push	{r3, r4, r5, lr}
 80052c2:	4d06      	ldr	r5, [pc, #24]	; (80052dc <_sbrk_r+0x1c>)
 80052c4:	2300      	movs	r3, #0
 80052c6:	4604      	mov	r4, r0
 80052c8:	4608      	mov	r0, r1
 80052ca:	602b      	str	r3, [r5, #0]
 80052cc:	f000 f8ae 	bl	800542c <_sbrk>
 80052d0:	1c43      	adds	r3, r0, #1
 80052d2:	d102      	bne.n	80052da <_sbrk_r+0x1a>
 80052d4:	682b      	ldr	r3, [r5, #0]
 80052d6:	b103      	cbz	r3, 80052da <_sbrk_r+0x1a>
 80052d8:	6023      	str	r3, [r4, #0]
 80052da:	bd38      	pop	{r3, r4, r5, pc}
 80052dc:	200144b8 	.word	0x200144b8

080052e0 <__sread>:
 80052e0:	b510      	push	{r4, lr}
 80052e2:	460c      	mov	r4, r1
 80052e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e8:	f000 f88e 	bl	8005408 <_read_r>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	bfab      	itete	ge
 80052f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052f2:	89a3      	ldrhlt	r3, [r4, #12]
 80052f4:	181b      	addge	r3, r3, r0
 80052f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052fa:	bfac      	ite	ge
 80052fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80052fe:	81a3      	strhlt	r3, [r4, #12]
 8005300:	bd10      	pop	{r4, pc}

08005302 <__swrite>:
 8005302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005306:	461f      	mov	r7, r3
 8005308:	898b      	ldrh	r3, [r1, #12]
 800530a:	05db      	lsls	r3, r3, #23
 800530c:	4605      	mov	r5, r0
 800530e:	460c      	mov	r4, r1
 8005310:	4616      	mov	r6, r2
 8005312:	d505      	bpl.n	8005320 <__swrite+0x1e>
 8005314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005318:	2302      	movs	r3, #2
 800531a:	2200      	movs	r2, #0
 800531c:	f000 f856 	bl	80053cc <_lseek_r>
 8005320:	89a3      	ldrh	r3, [r4, #12]
 8005322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005326:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800532a:	81a3      	strh	r3, [r4, #12]
 800532c:	4632      	mov	r2, r6
 800532e:	463b      	mov	r3, r7
 8005330:	4628      	mov	r0, r5
 8005332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005336:	f7ff bb31 	b.w	800499c <_write_r>

0800533a <__sseek>:
 800533a:	b510      	push	{r4, lr}
 800533c:	460c      	mov	r4, r1
 800533e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005342:	f000 f843 	bl	80053cc <_lseek_r>
 8005346:	1c43      	adds	r3, r0, #1
 8005348:	89a3      	ldrh	r3, [r4, #12]
 800534a:	bf15      	itete	ne
 800534c:	6560      	strne	r0, [r4, #84]	; 0x54
 800534e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005352:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005356:	81a3      	strheq	r3, [r4, #12]
 8005358:	bf18      	it	ne
 800535a:	81a3      	strhne	r3, [r4, #12]
 800535c:	bd10      	pop	{r4, pc}

0800535e <__sclose>:
 800535e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005362:	f000 b801 	b.w	8005368 <_close_r>
	...

08005368 <_close_r>:
 8005368:	b538      	push	{r3, r4, r5, lr}
 800536a:	4d06      	ldr	r5, [pc, #24]	; (8005384 <_close_r+0x1c>)
 800536c:	2300      	movs	r3, #0
 800536e:	4604      	mov	r4, r0
 8005370:	4608      	mov	r0, r1
 8005372:	602b      	str	r3, [r5, #0]
 8005374:	f7fb f821 	bl	80003ba <_close>
 8005378:	1c43      	adds	r3, r0, #1
 800537a:	d102      	bne.n	8005382 <_close_r+0x1a>
 800537c:	682b      	ldr	r3, [r5, #0]
 800537e:	b103      	cbz	r3, 8005382 <_close_r+0x1a>
 8005380:	6023      	str	r3, [r4, #0]
 8005382:	bd38      	pop	{r3, r4, r5, pc}
 8005384:	200144b8 	.word	0x200144b8

08005388 <_fstat_r>:
 8005388:	b538      	push	{r3, r4, r5, lr}
 800538a:	4d07      	ldr	r5, [pc, #28]	; (80053a8 <_fstat_r+0x20>)
 800538c:	2300      	movs	r3, #0
 800538e:	4604      	mov	r4, r0
 8005390:	4608      	mov	r0, r1
 8005392:	4611      	mov	r1, r2
 8005394:	602b      	str	r3, [r5, #0]
 8005396:	f7fb f81c 	bl	80003d2 <_fstat>
 800539a:	1c43      	adds	r3, r0, #1
 800539c:	d102      	bne.n	80053a4 <_fstat_r+0x1c>
 800539e:	682b      	ldr	r3, [r5, #0]
 80053a0:	b103      	cbz	r3, 80053a4 <_fstat_r+0x1c>
 80053a2:	6023      	str	r3, [r4, #0]
 80053a4:	bd38      	pop	{r3, r4, r5, pc}
 80053a6:	bf00      	nop
 80053a8:	200144b8 	.word	0x200144b8

080053ac <_isatty_r>:
 80053ac:	b538      	push	{r3, r4, r5, lr}
 80053ae:	4d06      	ldr	r5, [pc, #24]	; (80053c8 <_isatty_r+0x1c>)
 80053b0:	2300      	movs	r3, #0
 80053b2:	4604      	mov	r4, r0
 80053b4:	4608      	mov	r0, r1
 80053b6:	602b      	str	r3, [r5, #0]
 80053b8:	f7fb f81b 	bl	80003f2 <_isatty>
 80053bc:	1c43      	adds	r3, r0, #1
 80053be:	d102      	bne.n	80053c6 <_isatty_r+0x1a>
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	b103      	cbz	r3, 80053c6 <_isatty_r+0x1a>
 80053c4:	6023      	str	r3, [r4, #0]
 80053c6:	bd38      	pop	{r3, r4, r5, pc}
 80053c8:	200144b8 	.word	0x200144b8

080053cc <_lseek_r>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	4d07      	ldr	r5, [pc, #28]	; (80053ec <_lseek_r+0x20>)
 80053d0:	4604      	mov	r4, r0
 80053d2:	4608      	mov	r0, r1
 80053d4:	4611      	mov	r1, r2
 80053d6:	2200      	movs	r2, #0
 80053d8:	602a      	str	r2, [r5, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	f7fb f814 	bl	8000408 <_lseek>
 80053e0:	1c43      	adds	r3, r0, #1
 80053e2:	d102      	bne.n	80053ea <_lseek_r+0x1e>
 80053e4:	682b      	ldr	r3, [r5, #0]
 80053e6:	b103      	cbz	r3, 80053ea <_lseek_r+0x1e>
 80053e8:	6023      	str	r3, [r4, #0]
 80053ea:	bd38      	pop	{r3, r4, r5, pc}
 80053ec:	200144b8 	.word	0x200144b8

080053f0 <__malloc_lock>:
 80053f0:	4801      	ldr	r0, [pc, #4]	; (80053f8 <__malloc_lock+0x8>)
 80053f2:	f7ff be1d 	b.w	8005030 <__retarget_lock_acquire_recursive>
 80053f6:	bf00      	nop
 80053f8:	200144ab 	.word	0x200144ab

080053fc <__malloc_unlock>:
 80053fc:	4801      	ldr	r0, [pc, #4]	; (8005404 <__malloc_unlock+0x8>)
 80053fe:	f7ff be18 	b.w	8005032 <__retarget_lock_release_recursive>
 8005402:	bf00      	nop
 8005404:	200144ab 	.word	0x200144ab

08005408 <_read_r>:
 8005408:	b538      	push	{r3, r4, r5, lr}
 800540a:	4d07      	ldr	r5, [pc, #28]	; (8005428 <_read_r+0x20>)
 800540c:	4604      	mov	r4, r0
 800540e:	4608      	mov	r0, r1
 8005410:	4611      	mov	r1, r2
 8005412:	2200      	movs	r2, #0
 8005414:	602a      	str	r2, [r5, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	f7fa ffb2 	bl	8000380 <_read>
 800541c:	1c43      	adds	r3, r0, #1
 800541e:	d102      	bne.n	8005426 <_read_r+0x1e>
 8005420:	682b      	ldr	r3, [r5, #0]
 8005422:	b103      	cbz	r3, 8005426 <_read_r+0x1e>
 8005424:	6023      	str	r3, [r4, #0]
 8005426:	bd38      	pop	{r3, r4, r5, pc}
 8005428:	200144b8 	.word	0x200144b8

0800542c <_sbrk>:
 800542c:	4a04      	ldr	r2, [pc, #16]	; (8005440 <_sbrk+0x14>)
 800542e:	6811      	ldr	r1, [r2, #0]
 8005430:	4603      	mov	r3, r0
 8005432:	b909      	cbnz	r1, 8005438 <_sbrk+0xc>
 8005434:	4903      	ldr	r1, [pc, #12]	; (8005444 <_sbrk+0x18>)
 8005436:	6011      	str	r1, [r2, #0]
 8005438:	6810      	ldr	r0, [r2, #0]
 800543a:	4403      	add	r3, r0
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	4770      	bx	lr
 8005440:	200144bc 	.word	0x200144bc
 8005444:	200144c0 	.word	0x200144c0

08005448 <_init>:
 8005448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544a:	bf00      	nop
 800544c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800544e:	bc08      	pop	{r3}
 8005450:	469e      	mov	lr, r3
 8005452:	4770      	bx	lr

08005454 <_fini>:
 8005454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005456:	bf00      	nop
 8005458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800545a:	bc08      	pop	{r3}
 800545c:	469e      	mov	lr, r3
 800545e:	4770      	bx	lr
