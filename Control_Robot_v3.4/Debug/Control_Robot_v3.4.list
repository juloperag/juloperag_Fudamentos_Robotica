
Control_Robot_v3.4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b99c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a90  0800bb40  0800bb40  0001bb40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5d0  0800c5d0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5d0  0800c5d0  0001c5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5d8  0800c5d8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5d8  0800c5d8  0001c5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5dc  0800c5dc  0001c5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c5e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b2c  200001e4  0800c7c4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d10  0800c7c4  00020d10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005020  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000117d  00000000  00000000  00025234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000478  00000000  00000000  000263b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003d0  00000000  00000000  00026830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010f8e  00000000  00000000  00026c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006a74  00000000  00000000  00037b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058859  00000000  00000000  0003e602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00096e5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b38  00000000  00000000  00096eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bb24 	.word	0x0800bb24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800bb24 	.word	0x0800bb24

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9dd 	b.w	8001094 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f86b 	bl	8000dc4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f85e 	bl	8000dc4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f84d 	bl	8000dc4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f83f 	bl	8000dc4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff fed3 	bl	8000b0c <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc49 	bl	8000628 <__aeabi_dmul>
 8000d96:	f7ff ff1f 	bl	8000bd8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbca 	bl	8000534 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc40 	bl	8000628 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa82 	bl	80002b8 <__aeabi_dsub>
 8000db4:	f7ff ff10 	bl	8000bd8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <updateDuttyMotor>:
#include <MotorDriver.h>


//Funcion para actualizar el dutty del pwm
void updateDuttyMotor(Motor_Handler_t *ptrMotorHandler,  float newValue)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	ed87 0a00 	vstr	s0, [r7]
		//Guardar valor del dutty
		ptrMotorHandler->configMotor.dutty = newValue;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	639a      	str	r2, [r3, #56]	; 0x38
		//Actualizamos el valor del dutty
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80010b4:	eeb0 0a67 	vmov.f32	s0, s15
 80010b8:	4610      	mov	r0, r2
 80010ba:	f003 fc8b 	bl	80049d4 <updateDuttyCyclePercentageFloat>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <updateDirMotor>:
		updateFrequencyTimer(ptrBTimerHandler, *(ptrMotorHandler->configMotor.frecuency));
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
}

void updateDirMotor(Motor_Handler_t *ptrMotorHandler)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
		//Cambiar el valor de la direccion
		ptrMotorHandler->configMotor.dir = (~ptrMotorHandler->configMotor.dir)&(0x01);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bf0c      	ite	eq
 80010dc:	2301      	moveq	r3, #1
 80010de:	2300      	movne	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	461a      	mov	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		//Cambiamos la direccion del motor
		GPIO_writePin(ptrMotorHandler->phandlerGPIOIN, ptrMotorHandler->configMotor.dir&SET);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	4619      	mov	r1, r3
 80010fc:	4610      	mov	r0, r2
 80010fe:	f003 f841 	bl	8004184 <GPIO_writePin>
		statusPolarityPWM(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dir&SET);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4619      	mov	r1, r3
 8001114:	4610      	mov	r0, r2
 8001116:	f003 fb97 	bl	8004848 <statusPolarityPWM>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <main>:
uint8_t commandComplete = 1;           //Bandera que indica si el comando esta completo
uint8_t counterRecepcion = 0;          //Variable para la posicion del arrelgo
char bufferRecepcion[64] = {0};        //Arreglo que almacena el comando ingresado

int main(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	//-----------------------Configuracion inicial del sistema---------------------------------
	//Incrementamos la velocidad de reloj del sistema

	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 800112a:	2364      	movs	r3, #100	; 0x64
 800112c:	71fb      	strb	r3, [r7, #7]
	configPLL(clock);
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	4618      	mov	r0, r3
 8001132:	f003 f869 	bl	8004208 <configPLL>
	//Realizamos la configuracuion inicial
	int_Hardware();
 8001136:	f000 f84d 	bl	80011d4 <int_Hardware>
	//Activamos el SysTick
	//config_SysTick_us();
	//Activamos el punto flotante por medio del registro especifico
	SCB->CPACR |= 0xF <<20;
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <main+0x7c>)
 800113c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001140:	4a17      	ldr	r2, [pc, #92]	; (80011a0 <main+0x7c>)
 8001142:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001146:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Definimos la configuracion inicail del MCO1
	int_MCO2();
 800114a:	f000 f9d1 	bl	80014f0 <int_MCO2>

	//-----------------------Configuracion inicial de los Motores---------------------------------
	//Cargar configuracion de los motores
	GPIO_writePin (&handler_GPIO_MotorR_IN, SET);
 800114e:	2101      	movs	r1, #1
 8001150:	4814      	ldr	r0, [pc, #80]	; (80011a4 <main+0x80>)
 8001152:	f003 f817 	bl	8004184 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_IN, SET);
 8001156:	2101      	movs	r1, #1
 8001158:	4813      	ldr	r0, [pc, #76]	; (80011a8 <main+0x84>)
 800115a:	f003 f813 	bl	8004184 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorR_EN, SET);
 800115e:	2101      	movs	r1, #1
 8001160:	4812      	ldr	r0, [pc, #72]	; (80011ac <main+0x88>)
 8001162:	f003 f80f 	bl	8004184 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_EN, SET);
 8001166:	2101      	movs	r1, #1
 8001168:	4811      	ldr	r0, [pc, #68]	; (80011b0 <main+0x8c>)
 800116a:	f003 f80b 	bl	8004184 <GPIO_writePin>
	int_Config_Motor();
 800116e:	f000 f9c9 	bl	8001504 <int_Config_Motor>
	//Definimos el motor derecho para ser ejecutado
	handler_Motor_Execute = &handler_Motor_R;
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <main+0x90>)
 8001174:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <main+0x94>)
 8001176:	601a      	str	r2, [r3, #0]
	//Calculo inicial de parametro
	cm_L = ((PI*DL)/(100*Ce));  //[mm/cuentas]
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <main+0x98>)
 800117a:	4a11      	ldr	r2, [pc, #68]	; (80011c0 <main+0x9c>)
 800117c:	601a      	str	r2, [r3, #0]
	cm_R =	((PI*DR)/(100*Ce));  //[mm/cuentas]
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <main+0xa0>)
 8001180:	4a11      	ldr	r2, [pc, #68]	; (80011c8 <main+0xa4>)
 8001182:	601a      	str	r2, [r3, #0]

	while(1)
	{
		///Verificamos para ejecuta el comando ingresando
		if(commandComplete==1)
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <main+0xa8>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d106      	bne.n	800119a <main+0x76>
		{
			runCommand(bufferRecepcion);
 800118c:	4810      	ldr	r0, [pc, #64]	; (80011d0 <main+0xac>)
 800118e:	f000 fe83 	bl	8001e98 <runCommand>
			//Reniciamos la variable
			commandComplete=0;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <main+0xa8>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	e7f4      	b.n	8001184 <main+0x60>
		}
		else
		{
			__NOP();
 800119a:	bf00      	nop
		if(commandComplete==1)
 800119c:	e7f2      	b.n	8001184 <main+0x60>
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00
 80011a4:	200002c0 	.word	0x200002c0
 80011a8:	2000033c 	.word	0x2000033c
 80011ac:	200002cc 	.word	0x200002cc
 80011b0:	20000348 	.word	0x20000348
 80011b4:	20000440 	.word	0x20000440
 80011b8:	200002e4 	.word	0x200002e4
 80011bc:	2000042c 	.word	0x2000042c
 80011c0:	40105fa7 	.word	0x40105fa7
 80011c4:	20000430 	.word	0x20000430
 80011c8:	400facee 	.word	0x400facee
 80011cc:	2000000c 	.word	0x2000000c
 80011d0:	20000460 	.word	0x20000460

080011d4 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af02      	add	r7, sp, #8
	//-------------------------PIN_MCO2--------------------------------
	//---------------PIN: PC9----------------
	//------------AF0: MCO_2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MCO2.pGPIOx = GPIOC;
 80011da:	4bab      	ldr	r3, [pc, #684]	; (8001488 <int_Hardware+0x2b4>)
 80011dc:	4aab      	ldr	r2, [pc, #684]	; (800148c <int_Hardware+0x2b8>)
 80011de:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MCO2.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 80011e0:	4ba9      	ldr	r3, [pc, #676]	; (8001488 <int_Hardware+0x2b4>)
 80011e2:	2209      	movs	r2, #9
 80011e4:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MCO2, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80011e6:	2300      	movs	r3, #0
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	2300      	movs	r3, #0
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2301      	movs	r3, #1
 80011f0:	2200      	movs	r2, #0
 80011f2:	2102      	movs	r1, #2
 80011f4:	48a4      	ldr	r0, [pc, #656]	; (8001488 <int_Hardware+0x2b4>)
 80011f6:	f002 fe79 	bl	8003eec <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MCO2);
 80011fa:	48a3      	ldr	r0, [pc, #652]	; (8001488 <int_Hardware+0x2b4>)
 80011fc:	f002 fe98 	bl	8003f30 <GPIO_Config>
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 8001200:	4ba3      	ldr	r3, [pc, #652]	; (8001490 <int_Hardware+0x2bc>)
 8001202:	4aa4      	ldr	r2, [pc, #656]	; (8001494 <int_Hardware+0x2c0>)
 8001204:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 8001206:	4ba2      	ldr	r3, [pc, #648]	; (8001490 <int_Hardware+0x2bc>)
 8001208:	2205      	movs	r2, #5
 800120a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800120c:	2300      	movs	r3, #0
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	2300      	movs	r3, #0
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2301      	movs	r3, #1
 8001216:	2200      	movs	r2, #0
 8001218:	2101      	movs	r1, #1
 800121a:	489d      	ldr	r0, [pc, #628]	; (8001490 <int_Hardware+0x2bc>)
 800121c:	f002 fe66 	bl	8003eec <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 8001220:	489b      	ldr	r0, [pc, #620]	; (8001490 <int_Hardware+0x2bc>)
 8001222:	f002 fe85 	bl	8003f30 <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA9----------------
	//------------AF7: USART1_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 8001226:	4b9c      	ldr	r3, [pc, #624]	; (8001498 <int_Hardware+0x2c4>)
 8001228:	4a9a      	ldr	r2, [pc, #616]	; (8001494 <int_Hardware+0x2c0>)
 800122a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 800122c:	4b9a      	ldr	r3, [pc, #616]	; (8001498 <int_Hardware+0x2c4>)
 800122e:	2202      	movs	r2, #2
 8001230:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001232:	2307      	movs	r3, #7
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	2300      	movs	r3, #0
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	2200      	movs	r2, #0
 800123e:	2102      	movs	r1, #2
 8001240:	4895      	ldr	r0, [pc, #596]	; (8001498 <int_Hardware+0x2c4>)
 8001242:	f002 fe53 	bl	8003eec <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 8001246:	4894      	ldr	r0, [pc, #592]	; (8001498 <int_Hardware+0x2c4>)
 8001248:	f002 fe72 	bl	8003f30 <GPIO_Config>

	//---------------PIN: PA10----------------
	//------------AF7: USART1_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 800124c:	4b93      	ldr	r3, [pc, #588]	; (800149c <int_Hardware+0x2c8>)
 800124e:	4a91      	ldr	r2, [pc, #580]	; (8001494 <int_Hardware+0x2c0>)
 8001250:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utiliza
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3; 						//PIN_x, 0-15
 8001252:	4b92      	ldr	r3, [pc, #584]	; (800149c <int_Hardware+0x2c8>)
 8001254:	2203      	movs	r2, #3
 8001256:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001258:	2307      	movs	r3, #7
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	2300      	movs	r3, #0
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2301      	movs	r3, #1
 8001262:	2200      	movs	r2, #0
 8001264:	2102      	movs	r1, #2
 8001266:	488d      	ldr	r0, [pc, #564]	; (800149c <int_Hardware+0x2c8>)
 8001268:	f002 fe40 	bl	8003eec <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 800126c:	488b      	ldr	r0, [pc, #556]	; (800149c <int_Hardware+0x2c8>)
 800126e:	f002 fe5f 	bl	8003f30 <GPIO_Config>
	//---------------------------Motor Derecho--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA0----------------
	//------------AF2: TIM5_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR.pGPIOx = GPIOA;
 8001272:	4b8b      	ldr	r3, [pc, #556]	; (80014a0 <int_Hardware+0x2cc>)
 8001274:	4a87      	ldr	r2, [pc, #540]	; (8001494 <int_Hardware+0x2c0>)
 8001276:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR.GPIO_PinConfig.GPIO_PinNumber = PIN_0; 						//PIN_x, 0-15
 8001278:	4b89      	ldr	r3, [pc, #548]	; (80014a0 <int_Hardware+0x2cc>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 800127e:	2302      	movs	r3, #2
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	2300      	movs	r3, #0
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2301      	movs	r3, #1
 8001288:	2200      	movs	r2, #0
 800128a:	2102      	movs	r1, #2
 800128c:	4884      	ldr	r0, [pc, #528]	; (80014a0 <int_Hardware+0x2cc>)
 800128e:	f002 fe2d 	bl	8003eec <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR);
 8001292:	4883      	ldr	r0, [pc, #524]	; (80014a0 <int_Hardware+0x2cc>)
 8001294:	f002 fe4c 	bl	8003f30 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PC12----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_IN.pGPIOx = GPIOC;
 8001298:	4b82      	ldr	r3, [pc, #520]	; (80014a4 <int_Hardware+0x2d0>)
 800129a:	4a7c      	ldr	r2, [pc, #496]	; (800148c <int_Hardware+0x2b8>)
 800129c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_12; 						//PIN_x, 0-15
 800129e:	4b81      	ldr	r3, [pc, #516]	; (80014a4 <int_Hardware+0x2d0>)
 80012a0:	220c      	movs	r2, #12
 80012a2:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80012a4:	2300      	movs	r3, #0
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	2300      	movs	r3, #0
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	2200      	movs	r2, #0
 80012b0:	2101      	movs	r1, #1
 80012b2:	487c      	ldr	r0, [pc, #496]	; (80014a4 <int_Hardware+0x2d0>)
 80012b4:	f002 fe1a 	bl	8003eec <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_IN);
 80012b8:	487a      	ldr	r0, [pc, #488]	; (80014a4 <int_Hardware+0x2d0>)
 80012ba:	f002 fe39 	bl	8003f30 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC10----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_EN.pGPIOx = GPIOC;
 80012be:	4b7a      	ldr	r3, [pc, #488]	; (80014a8 <int_Hardware+0x2d4>)
 80012c0:	4a72      	ldr	r2, [pc, #456]	; (800148c <int_Hardware+0x2b8>)
 80012c2:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 80012c4:	4b78      	ldr	r3, [pc, #480]	; (80014a8 <int_Hardware+0x2d4>)
 80012c6:	220a      	movs	r2, #10
 80012c8:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80012ca:	2300      	movs	r3, #0
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	2300      	movs	r3, #0
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	2200      	movs	r2, #0
 80012d6:	2101      	movs	r1, #1
 80012d8:	4873      	ldr	r0, [pc, #460]	; (80014a8 <int_Hardware+0x2d4>)
 80012da:	f002 fe07 	bl	8003eec <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_EN);
 80012de:	4872      	ldr	r0, [pc, #456]	; (80014a8 <int_Hardware+0x2d4>)
 80012e0:	f002 fe26 	bl	8003f30 <GPIO_Config>
	//---------------------------Motor Izquierdo--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA1----------------
	//------------AF2: TIM5_CH2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL.pGPIOx = GPIOA;
 80012e4:	4b71      	ldr	r3, [pc, #452]	; (80014ac <int_Hardware+0x2d8>)
 80012e6:	4a6b      	ldr	r2, [pc, #428]	; (8001494 <int_Hardware+0x2c0>)
 80012e8:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL.GPIO_PinConfig.GPIO_PinNumber = PIN_1; 						//PIN_x, 0-15
 80012ea:	4b70      	ldr	r3, [pc, #448]	; (80014ac <int_Hardware+0x2d8>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 80012f0:	2302      	movs	r3, #2
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	2300      	movs	r3, #0
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	2200      	movs	r2, #0
 80012fc:	2102      	movs	r1, #2
 80012fe:	486b      	ldr	r0, [pc, #428]	; (80014ac <int_Hardware+0x2d8>)
 8001300:	f002 fdf4 	bl	8003eec <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL);
 8001304:	4869      	ldr	r0, [pc, #420]	; (80014ac <int_Hardware+0x2d8>)
 8001306:	f002 fe13 	bl	8003f30 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PD2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_IN.pGPIOx = GPIOD;
 800130a:	4b69      	ldr	r3, [pc, #420]	; (80014b0 <int_Hardware+0x2dc>)
 800130c:	4a69      	ldr	r2, [pc, #420]	; (80014b4 <int_Hardware+0x2e0>)
 800130e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 8001310:	4b67      	ldr	r3, [pc, #412]	; (80014b0 <int_Hardware+0x2dc>)
 8001312:	2202      	movs	r2, #2
 8001314:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001316:	2300      	movs	r3, #0
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	2300      	movs	r3, #0
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	2200      	movs	r2, #0
 8001322:	2101      	movs	r1, #1
 8001324:	4862      	ldr	r0, [pc, #392]	; (80014b0 <int_Hardware+0x2dc>)
 8001326:	f002 fde1 	bl	8003eec <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_IN);
 800132a:	4861      	ldr	r0, [pc, #388]	; (80014b0 <int_Hardware+0x2dc>)
 800132c:	f002 fe00 	bl	8003f30 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC11----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_EN.pGPIOx = GPIOC;
 8001330:	4b61      	ldr	r3, [pc, #388]	; (80014b8 <int_Hardware+0x2e4>)
 8001332:	4a56      	ldr	r2, [pc, #344]	; (800148c <int_Hardware+0x2b8>)
 8001334:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_11; 						//PIN_x, 0-15
 8001336:	4b60      	ldr	r3, [pc, #384]	; (80014b8 <int_Hardware+0x2e4>)
 8001338:	220b      	movs	r2, #11
 800133a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800133c:	2300      	movs	r3, #0
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	2300      	movs	r3, #0
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	2200      	movs	r2, #0
 8001348:	2101      	movs	r1, #1
 800134a:	485b      	ldr	r0, [pc, #364]	; (80014b8 <int_Hardware+0x2e4>)
 800134c:	f002 fdce 	bl	8003eec <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_EN);
 8001350:	4859      	ldr	r0, [pc, #356]	; (80014b8 <int_Hardware+0x2e4>)
 8001352:	f002 fded 	bl	8003f30 <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART1----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART2;
 8001356:	4b59      	ldr	r3, [pc, #356]	; (80014bc <int_Hardware+0x2e8>)
 8001358:	4a59      	ldr	r2, [pc, #356]	; (80014c0 <int_Hardware+0x2ec>)
 800135a:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 800135c:	4b57      	ldr	r3, [pc, #348]	; (80014bc <int_Hardware+0x2e8>)
 800135e:	2202      	movs	r2, #2
 8001360:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_19200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 8001362:	4b56      	ldr	r3, [pc, #344]	; (80014bc <int_Hardware+0x2e8>)
 8001364:	2201      	movs	r2, #1
 8001366:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 8001368:	4b54      	ldr	r3, [pc, #336]	; (80014bc <int_Hardware+0x2e8>)
 800136a:	2200      	movs	r2, #0
 800136c:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 800136e:	4b53      	ldr	r3, [pc, #332]	; (80014bc <int_Hardware+0x2e8>)
 8001370:	2200      	movs	r2, #0
 8001372:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 8001374:	4b51      	ldr	r3, [pc, #324]	; (80014bc <int_Hardware+0x2e8>)
 8001376:	2201      	movs	r2, #1
 8001378:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_ENABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 800137a:	4b50      	ldr	r3, [pc, #320]	; (80014bc <int_Hardware+0x2e8>)
 800137c:	2201      	movs	r2, #1
 800137e:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 8001380:	484e      	ldr	r0, [pc, #312]	; (80014bc <int_Hardware+0x2e8>)
 8001382:	f003 fb6b 	bl	8004a5c <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 8001386:	4b4f      	ldr	r3, [pc, #316]	; (80014c4 <int_Hardware+0x2f0>)
 8001388:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800138c:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 800138e:	4b4d      	ldr	r3, [pc, #308]	; (80014c4 <int_Hardware+0x2f0>)
 8001390:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001394:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8001396:	4b4b      	ldr	r3, [pc, #300]	; (80014c4 <int_Hardware+0x2f0>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 800139c:	4b49      	ldr	r3, [pc, #292]	; (80014c4 <int_Hardware+0x2f0>)
 800139e:	22fa      	movs	r2, #250	; 0xfa
 80013a0:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <int_Hardware+0x2f0>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 80013a8:	4846      	ldr	r0, [pc, #280]	; (80014c4 <int_Hardware+0x2f0>)
 80013aa:	f001 fb7b 	bl	8002aa4 <BasicTimer_Config>

	//---------------TIM3----------------
	//Definimos el TIMx a usar
	handler_TIMER_Count.ptrTIMx = TIM3;
 80013ae:	4b46      	ldr	r3, [pc, #280]	; (80014c8 <int_Hardware+0x2f4>)
 80013b0:	4a46      	ldr	r2, [pc, #280]	; (80014cc <int_Hardware+0x2f8>)
 80013b2:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Count.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80013b4:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <int_Hardware+0x2f4>)
 80013b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ba:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Count.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80013bc:	4b42      	ldr	r3, [pc, #264]	; (80014c8 <int_Hardware+0x2f4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Count.TIMx_Config.TIMX_period = 2000;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80013c2:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <int_Hardware+0x2f4>)
 80013c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013c8:	605a      	str	r2, [r3, #4]
	handler_TIMER_Count.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80013ca:	4b3f      	ldr	r3, [pc, #252]	; (80014c8 <int_Hardware+0x2f4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Count);
 80013d0:	483d      	ldr	r0, [pc, #244]	; (80014c8 <int_Hardware+0x2f4>)
 80013d2:	f001 fb67 	bl	8002aa4 <BasicTimer_Config>

	//---------------TIM5----------------
	//Definimos el TIMx a usar
	handler_TIMER_Motor.ptrTIMx = TIM5;
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <int_Hardware+0x2fc>)
 80013d8:	4a3e      	ldr	r2, [pc, #248]	; (80014d4 <int_Hardware+0x300>)
 80013da:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Motor.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_10us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80013dc:	4b3c      	ldr	r3, [pc, #240]	; (80014d0 <int_Hardware+0x2fc>)
 80013de:	220a      	movs	r2, #10
 80013e0:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Motor.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <int_Hardware+0x2fc>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Motor.TIMx_Config.TIMX_period = 100;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80013e8:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <int_Hardware+0x2fc>)
 80013ea:	2264      	movs	r2, #100	; 0x64
 80013ec:	605a      	str	r2, [r3, #4]
	handler_TIMER_Motor.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <int_Hardware+0x2fc>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Motor);
 80013f4:	4836      	ldr	r0, [pc, #216]	; (80014d0 <int_Hardware+0x2fc>)
 80013f6:	f001 fb55 	bl	8002aa4 <BasicTimer_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoR.pGPIOx = GPIOC;
 80013fa:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <int_Hardware+0x304>)
 80013fc:	4a23      	ldr	r2, [pc, #140]	; (800148c <int_Hardware+0x2b8>)
 80013fe:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoR.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8001400:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <int_Hardware+0x304>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoR.pGPIOHandler = &handler_GPIO_FotoR;
 8001406:	4b35      	ldr	r3, [pc, #212]	; (80014dc <int_Hardware+0x308>)
 8001408:	4a33      	ldr	r2, [pc, #204]	; (80014d8 <int_Hardware+0x304>)
 800140a:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoR.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 800140c:	4b33      	ldr	r3, [pc, #204]	; (80014dc <int_Hardware+0x308>)
 800140e:	2202      	movs	r2, #2
 8001410:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoR);
 8001412:	4832      	ldr	r0, [pc, #200]	; (80014dc <int_Hardware+0x308>)
 8001414:	f001 fcca 	bl	8002dac <extInt_Config>

	//---------------PIN: PC3----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoL.pGPIOx = GPIOC;
 8001418:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <int_Hardware+0x30c>)
 800141a:	4a1c      	ldr	r2, [pc, #112]	; (800148c <int_Hardware+0x2b8>)
 800141c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoL.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 800141e:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <int_Hardware+0x30c>)
 8001420:	2203      	movs	r2, #3
 8001422:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoL.pGPIOHandler = &handler_GPIO_FotoL;
 8001424:	4b2f      	ldr	r3, [pc, #188]	; (80014e4 <int_Hardware+0x310>)
 8001426:	4a2e      	ldr	r2, [pc, #184]	; (80014e0 <int_Hardware+0x30c>)
 8001428:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoL.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 800142a:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <int_Hardware+0x310>)
 800142c:	2202      	movs	r2, #2
 800142e:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoL);
 8001430:	482c      	ldr	r0, [pc, #176]	; (80014e4 <int_Hardware+0x310>)
 8001432:	f001 fcbb 	bl	8002dac <extInt_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM5_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorR.ptrTIMx = TIM5;
 8001436:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <int_Hardware+0x314>)
 8001438:	4a26      	ldr	r2, [pc, #152]	; (80014d4 <int_Hardware+0x300>)
 800143a:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorR.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <int_Hardware+0x314>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorR.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8001442:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <int_Hardware+0x314>)
 8001444:	220a      	movs	r2, #10
 8001446:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorR.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 8001448:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <int_Hardware+0x314>)
 800144a:	2201      	movs	r2, #1
 800144c:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorR);
 800144e:	4826      	ldr	r0, [pc, #152]	; (80014e8 <int_Hardware+0x314>)
 8001450:	f003 f808 	bl	8004464 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorR, CHANNEL_ENABLE);
 8001454:	2101      	movs	r1, #1
 8001456:	4824      	ldr	r0, [pc, #144]	; (80014e8 <int_Hardware+0x314>)
 8001458:	f003 f964 	bl	8004724 <statusInOutPWM>

	//---------------TIM5_Channel_2----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorL.ptrTIMx = TIM5;
 800145c:	4b23      	ldr	r3, [pc, #140]	; (80014ec <int_Hardware+0x318>)
 800145e:	4a1d      	ldr	r2, [pc, #116]	; (80014d4 <int_Hardware+0x300>)
 8001460:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorL.config.channel = PWM_CHANNEL_2;     //PWM_CHANNEL_x x->1,2,3,4
 8001462:	4b22      	ldr	r3, [pc, #136]	; (80014ec <int_Hardware+0x318>)
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorL.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8001468:	4b20      	ldr	r3, [pc, #128]	; (80014ec <int_Hardware+0x318>)
 800146a:	220a      	movs	r2, #10
 800146c:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorL.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <int_Hardware+0x318>)
 8001470:	2201      	movs	r2, #1
 8001472:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorL);
 8001474:	481d      	ldr	r0, [pc, #116]	; (80014ec <int_Hardware+0x318>)
 8001476:	f002 fff5 	bl	8004464 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorL, CHANNEL_ENABLE);
 800147a:	2101      	movs	r1, #1
 800147c:	481b      	ldr	r0, [pc, #108]	; (80014ec <int_Hardware+0x318>)
 800147e:	f003 f951 	bl	8004724 <statusInOutPWM>

	//---------------------Fin de Configuracion PWM_Channelx-----------------------


}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	2000021c 	.word	0x2000021c
 800148c:	40020800 	.word	0x40020800
 8001490:	20000200 	.word	0x20000200
 8001494:	40020000 	.word	0x40020000
 8001498:	20000250 	.word	0x20000250
 800149c:	2000025c 	.word	0x2000025c
 80014a0:	200002b4 	.word	0x200002b4
 80014a4:	200002c0 	.word	0x200002c0
 80014a8:	200002cc 	.word	0x200002cc
 80014ac:	20000330 	.word	0x20000330
 80014b0:	2000033c 	.word	0x2000033c
 80014b4:	40020c00 	.word	0x40020c00
 80014b8:	20000348 	.word	0x20000348
 80014bc:	20000268 	.word	0x20000268
 80014c0:	40004400 	.word	0x40004400
 80014c4:	2000020c 	.word	0x2000020c
 80014c8:	200003bc 	.word	0x200003bc
 80014cc:	40000400 	.word	0x40000400
 80014d0:	200003ac 	.word	0x200003ac
 80014d4:	40000c00 	.word	0x40000c00
 80014d8:	20000228 	.word	0x20000228
 80014dc:	20000234 	.word	0x20000234
 80014e0:	2000023c 	.word	0x2000023c
 80014e4:	20000248 	.word	0x20000248
 80014e8:	200002d8 	.word	0x200002d8
 80014ec:	20000354 	.word	0x20000354

080014f0 <int_MCO2>:

//-----------------------------Inicio configuracion MCO1------------------------------------------

//Funcion para la configuracion inicial del MCO1
void int_MCO2(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	//Configuracion inicial del MCO2
	configMCO2(0);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f002 ff39 	bl	800436c <configMCO2>
	configMCO2PRE(4);
 80014fa:	2004      	movs	r0, #4
 80014fc:	f002 ff52 	bl	80043a4 <configMCO2PRE>
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <int_Config_Motor>:
//------------------------------Fin configuracion MCO1------------------------------------------


//------------------------------Inicio configuracion de lso motores------------------------------------------
void int_Config_Motor(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	handler_Motor_R.configMotor.dutty =  20;
 800150a:	4b47      	ldr	r3, [pc, #284]	; (8001628 <int_Config_Motor+0x124>)
 800150c:	4a47      	ldr	r2, [pc, #284]	; (800162c <int_Config_Motor+0x128>)
 800150e:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_R.configMotor.frecuency = &value_period;
 8001510:	4b45      	ldr	r3, [pc, #276]	; (8001628 <int_Config_Motor+0x124>)
 8001512:	4a47      	ldr	r2, [pc, #284]	; (8001630 <int_Config_Motor+0x12c>)
 8001514:	635a      	str	r2, [r3, #52]	; 0x34
	handler_Motor_R.configMotor.dir = SET;
 8001516:	4b44      	ldr	r3, [pc, #272]	; (8001628 <int_Config_Motor+0x124>)
 8001518:	2201      	movs	r2, #1
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	//handler de los perifericos
	handler_Motor_R.phandlerGPIOEN = &handler_GPIO_MotorR_EN;
 800151e:	4b42      	ldr	r3, [pc, #264]	; (8001628 <int_Config_Motor+0x124>)
 8001520:	4a44      	ldr	r2, [pc, #272]	; (8001634 <int_Config_Motor+0x130>)
 8001522:	645a      	str	r2, [r3, #68]	; 0x44
	handler_Motor_R.phandlerGPIOIN = &handler_GPIO_MotorR_IN;
 8001524:	4b40      	ldr	r3, [pc, #256]	; (8001628 <int_Config_Motor+0x124>)
 8001526:	4a44      	ldr	r2, [pc, #272]	; (8001638 <int_Config_Motor+0x134>)
 8001528:	641a      	str	r2, [r3, #64]	; 0x40
	handler_Motor_R.phandlerPWM = &handler_PWM_MotorR;
 800152a:	4b3f      	ldr	r3, [pc, #252]	; (8001628 <int_Config_Motor+0x124>)
 800152c:	4a43      	ldr	r2, [pc, #268]	; (800163c <int_Config_Motor+0x138>)
 800152e:	649a      	str	r2, [r3, #72]	; 0x48
	//definicion de parametros
	handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_1 = handler_Motor_R.parametersMotor.parametersPID.e_2 = 0;
 8001530:	4b3d      	ldr	r3, [pc, #244]	; (8001628 <int_Config_Motor+0x124>)
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
 8001538:	4b3b      	ldr	r3, [pc, #236]	; (8001628 <int_Config_Motor+0x124>)
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	4a3a      	ldr	r2, [pc, #232]	; (8001628 <int_Config_Motor+0x124>)
 800153e:	60d3      	str	r3, [r2, #12]
 8001540:	4b39      	ldr	r3, [pc, #228]	; (8001628 <int_Config_Motor+0x124>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	4a38      	ldr	r2, [pc, #224]	; (8001628 <int_Config_Motor+0x124>)
 8001546:	6093      	str	r3, [r2, #8]
	handler_Motor_R.parametersMotor.parametersPID.u = handler_Motor_R.parametersMotor.parametersPID.u_1 = 0;
 8001548:	4b37      	ldr	r3, [pc, #220]	; (8001628 <int_Config_Motor+0x124>)
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	4b35      	ldr	r3, [pc, #212]	; (8001628 <int_Config_Motor+0x124>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	4a34      	ldr	r2, [pc, #208]	; (8001628 <int_Config_Motor+0x124>)
 8001556:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	float theta=25+Ts/2;
 8001558:	4b39      	ldr	r3, [pc, #228]	; (8001640 <int_Config_Motor+0x13c>)
 800155a:	ed93 7a00 	vldr	s14, [r3]
 800155e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001562:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001566:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800156a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800156e:	edc7 7a01 	vstr	s15, [r7, #4]
	constains_calculator(&handler_Motor_R.parametersMotor.parametersPID, 2.2, 50, theta);   //k,tau,theta
 8001572:	ed97 1a01 	vldr	s2, [r7, #4]
 8001576:	eddf 0a33 	vldr	s1, [pc, #204]	; 8001644 <int_Config_Motor+0x140>
 800157a:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8001648 <int_Config_Motor+0x144>
 800157e:	482a      	ldr	r0, [pc, #168]	; (8001628 <int_Config_Motor+0x124>)
 8001580:	f001 f892 	bl	80026a8 <constains_calculator>

	//---------------Motor Izquierdo----------------
	//Parametro de la señal del dutty
	handler_Motor_L.configMotor.dutty =  20;
 8001584:	4b31      	ldr	r3, [pc, #196]	; (800164c <int_Config_Motor+0x148>)
 8001586:	4a29      	ldr	r2, [pc, #164]	; (800162c <int_Config_Motor+0x128>)
 8001588:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_L.configMotor.frecuency = &value_period;
 800158a:	4b30      	ldr	r3, [pc, #192]	; (800164c <int_Config_Motor+0x148>)
 800158c:	4a28      	ldr	r2, [pc, #160]	; (8001630 <int_Config_Motor+0x12c>)
 800158e:	635a      	str	r2, [r3, #52]	; 0x34
	handler_Motor_L.configMotor.dir = SET;
 8001590:	4b2e      	ldr	r3, [pc, #184]	; (800164c <int_Config_Motor+0x148>)
 8001592:	2201      	movs	r2, #1
 8001594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	//handler de los perifericos
	handler_Motor_L.phandlerGPIOEN = &handler_GPIO_MotorL_EN;
 8001598:	4b2c      	ldr	r3, [pc, #176]	; (800164c <int_Config_Motor+0x148>)
 800159a:	4a2d      	ldr	r2, [pc, #180]	; (8001650 <int_Config_Motor+0x14c>)
 800159c:	645a      	str	r2, [r3, #68]	; 0x44
	handler_Motor_L.phandlerGPIOIN = &handler_GPIO_MotorL_IN;
 800159e:	4b2b      	ldr	r3, [pc, #172]	; (800164c <int_Config_Motor+0x148>)
 80015a0:	4a2c      	ldr	r2, [pc, #176]	; (8001654 <int_Config_Motor+0x150>)
 80015a2:	641a      	str	r2, [r3, #64]	; 0x40
	handler_Motor_L.phandlerPWM = &handler_PWM_MotorL;
 80015a4:	4b29      	ldr	r3, [pc, #164]	; (800164c <int_Config_Motor+0x148>)
 80015a6:	4a2c      	ldr	r2, [pc, #176]	; (8001658 <int_Config_Motor+0x154>)
 80015a8:	649a      	str	r2, [r3, #72]	; 0x48
	//definicion de parametros
	handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_1 = handler_Motor_L.parametersMotor.parametersPID.e_2 = 0;
 80015aa:	4b28      	ldr	r3, [pc, #160]	; (800164c <int_Config_Motor+0x148>)
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
 80015b2:	4b26      	ldr	r3, [pc, #152]	; (800164c <int_Config_Motor+0x148>)
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	4a25      	ldr	r2, [pc, #148]	; (800164c <int_Config_Motor+0x148>)
 80015b8:	60d3      	str	r3, [r2, #12]
 80015ba:	4b24      	ldr	r3, [pc, #144]	; (800164c <int_Config_Motor+0x148>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	4a23      	ldr	r2, [pc, #140]	; (800164c <int_Config_Motor+0x148>)
 80015c0:	6093      	str	r3, [r2, #8]
	handler_Motor_L.parametersMotor.parametersPID.u = handler_Motor_L.parametersMotor.parametersPID.u_1 = 0;
 80015c2:	4b22      	ldr	r3, [pc, #136]	; (800164c <int_Config_Motor+0x148>)
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <int_Config_Motor+0x148>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	4a1f      	ldr	r2, [pc, #124]	; (800164c <int_Config_Motor+0x148>)
 80015d0:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	constains_calculator(&handler_Motor_L.parametersMotor.parametersPID, 2.2, 50, theta);   //k,tau,theta
 80015d2:	ed97 1a01 	vldr	s2, [r7, #4]
 80015d6:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8001644 <int_Config_Motor+0x140>
 80015da:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8001648 <int_Config_Motor+0x144>
 80015de:	481b      	ldr	r0, [pc, #108]	; (800164c <int_Config_Motor+0x148>)
 80015e0:	f001 f862 	bl	80026a8 <constains_calculator>

	//---------------PID del la distancia-----------------
	//definicion de parametros
	parameter_PID_distance.e = parameter_PID_distance.e_1 = parameter_PID_distance.e_2 = 0;
 80015e4:	4b1d      	ldr	r3, [pc, #116]	; (800165c <int_Config_Motor+0x158>)
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <int_Config_Motor+0x158>)
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	4a1a      	ldr	r2, [pc, #104]	; (800165c <int_Config_Motor+0x158>)
 80015f2:	60d3      	str	r3, [r2, #12]
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <int_Config_Motor+0x158>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4a18      	ldr	r2, [pc, #96]	; (800165c <int_Config_Motor+0x158>)
 80015fa:	6093      	str	r3, [r2, #8]
	parameter_PID_distance.u = parameter_PID_distance.u_1 = 0;
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <int_Config_Motor+0x158>)
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <int_Config_Motor+0x158>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	4a14      	ldr	r2, [pc, #80]	; (800165c <int_Config_Motor+0x158>)
 800160a:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	constains_calculator(&parameter_PID_distance, 2.2, 50, theta);   //k,tau,theta
 800160c:	ed97 1a01 	vldr	s2, [r7, #4]
 8001610:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8001644 <int_Config_Motor+0x140>
 8001614:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001648 <int_Config_Motor+0x144>
 8001618:	4810      	ldr	r0, [pc, #64]	; (800165c <int_Config_Motor+0x158>)
 800161a:	f001 f845 	bl	80026a8 <constains_calculator>

};
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200002e4 	.word	0x200002e4
 800162c:	41a00000 	.word	0x41a00000
 8001630:	20000002 	.word	0x20000002
 8001634:	200002cc 	.word	0x200002cc
 8001638:	200002c0 	.word	0x200002c0
 800163c:	200002d8 	.word	0x200002d8
 8001640:	20000004 	.word	0x20000004
 8001644:	42480000 	.word	0x42480000
 8001648:	400ccccd 	.word	0x400ccccd
 800164c:	20000360 	.word	0x20000360
 8001650:	20000348 	.word	0x20000348
 8001654:	2000033c 	.word	0x2000033c
 8001658:	20000354 	.word	0x20000354
 800165c:	200003cc 	.word	0x200003cc

08001660 <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <BasicTimer2_Callback+0x10>)
 8001666:	f002 fdb8 	bl	80041da <GPIOxTooglePin>
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000200 	.word	0x20000200
 8001674:	00000000 	.word	0x00000000

08001678 <BasicTimer3_Callback>:

//-------------------------study--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer3_Callback(void)
{
 8001678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800167c:	ed2d 8b02 	vpush	{d8}
 8001680:	b085      	sub	sp, #20
 8001682:	af04      	add	r7, sp, #16
	if(flag_motor==1)
 8001684:	4bc6      	ldr	r3, [pc, #792]	; (80019a0 <BasicTimer3_Callback+0x328>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	f040 8276 	bne.w	8001b7a <BasicTimer3_Callback+0x502>
	{
		//Calculamos la velocidad
		handler_Motor_L.parametersMotor.distance = (cm_L*handler_Motor_L.parametersMotor.count);                   //[mm]
 800168e:	4bc5      	ldr	r3, [pc, #788]	; (80019a4 <BasicTimer3_Callback+0x32c>)
 8001690:	8c1b      	ldrh	r3, [r3, #32]
 8001692:	ee07 3a90 	vmov	s15, r3
 8001696:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800169a:	4bc3      	ldr	r3, [pc, #780]	; (80019a8 <BasicTimer3_Callback+0x330>)
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a4:	4bbf      	ldr	r3, [pc, #764]	; (80019a4 <BasicTimer3_Callback+0x32c>)
 80016a6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		handler_Motor_R.parametersMotor.distance = (cm_R*handler_Motor_R.parametersMotor.count);				   //[mm]
 80016aa:	4bc0      	ldr	r3, [pc, #768]	; (80019ac <BasicTimer3_Callback+0x334>)
 80016ac:	8c1b      	ldrh	r3, [r3, #32]
 80016ae:	ee07 3a90 	vmov	s15, r3
 80016b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b6:	4bbe      	ldr	r3, [pc, #760]	; (80019b0 <BasicTimer3_Callback+0x338>)
 80016b8:	edd3 7a00 	vldr	s15, [r3]
 80016bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c0:	4bba      	ldr	r3, [pc, #744]	; (80019ac <BasicTimer3_Callback+0x334>)
 80016c2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/periodo_TIMER_Count;   //[m/s]
 80016c6:	4bb7      	ldr	r3, [pc, #732]	; (80019a4 <BasicTimer3_Callback+0x32c>)
 80016c8:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80016cc:	4bb9      	ldr	r3, [pc, #740]	; (80019b4 <BasicTimer3_Callback+0x33c>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016dc:	4bb1      	ldr	r3, [pc, #708]	; (80019a4 <BasicTimer3_Callback+0x32c>)
 80016de:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/periodo_TIMER_Count;   //[m/s]
 80016e2:	4bb2      	ldr	r3, [pc, #712]	; (80019ac <BasicTimer3_Callback+0x334>)
 80016e4:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80016e8:	4bb2      	ldr	r3, [pc, #712]	; (80019b4 <BasicTimer3_Callback+0x33c>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	ee07 3a90 	vmov	s15, r3
 80016f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f8:	4bac      	ldr	r3, [pc, #688]	; (80019ac <BasicTimer3_Callback+0x334>)
 80016fa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		//Convertirmos los valores de velocidad a porcentaje
		//porVel_L = 600*(handler_Motor_L.parametersMotor.velocity) - 36.53;
		//porVel_R = 600*(handler_Motor_R.parametersMotor.velocity) - 36.53;
		//Calculo odometria
		//se acumula valores
		flag_count_odometry++;
 80016fe:	4bae      	ldr	r3, [pc, #696]	; (80019b8 <BasicTimer3_Callback+0x340>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	3301      	adds	r3, #1
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4bac      	ldr	r3, [pc, #688]	; (80019b8 <BasicTimer3_Callback+0x340>)
 8001708:	701a      	strb	r2, [r3, #0]
		delta_distance_L += handler_Motor_L.parametersMotor.distance;
 800170a:	4ba6      	ldr	r3, [pc, #664]	; (80019a4 <BasicTimer3_Callback+0x32c>)
 800170c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001710:	4baa      	ldr	r3, [pc, #680]	; (80019bc <BasicTimer3_Callback+0x344>)
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171a:	4ba8      	ldr	r3, [pc, #672]	; (80019bc <BasicTimer3_Callback+0x344>)
 800171c:	edc3 7a00 	vstr	s15, [r3]
		delta_distance_R += handler_Motor_R.parametersMotor.distance;
 8001720:	4ba2      	ldr	r3, [pc, #648]	; (80019ac <BasicTimer3_Callback+0x334>)
 8001722:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001726:	4ba6      	ldr	r3, [pc, #664]	; (80019c0 <BasicTimer3_Callback+0x348>)
 8001728:	edd3 7a00 	vldr	s15, [r3]
 800172c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001730:	4ba3      	ldr	r3, [pc, #652]	; (80019c0 <BasicTimer3_Callback+0x348>)
 8001732:	edc3 7a00 	vstr	s15, [r3]
		//Se aplica la odometria
		if(flag_count_odometry>0)
 8001736:	4ba0      	ldr	r3, [pc, #640]	; (80019b8 <BasicTimer3_Callback+0x340>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 817e 	beq.w	8001a3c <BasicTimer3_Callback+0x3c4>
		{
			distance_c = (delta_distance_L+delta_distance_R)/2;  	   //[mm]
 8001740:	4b9e      	ldr	r3, [pc, #632]	; (80019bc <BasicTimer3_Callback+0x344>)
 8001742:	ed93 7a00 	vldr	s14, [r3]
 8001746:	4b9e      	ldr	r3, [pc, #632]	; (80019c0 <BasicTimer3_Callback+0x348>)
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001750:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001754:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001758:	4b9a      	ldr	r3, [pc, #616]	; (80019c4 <BasicTimer3_Callback+0x34c>)
 800175a:	edc3 7a00 	vstr	s15, [r3]
			velocity_c = (handler_Motor_R.parametersMotor.velocity+handler_Motor_L.parametersMotor.velocity)/2;        //[m/s]
 800175e:	4b93      	ldr	r3, [pc, #588]	; (80019ac <BasicTimer3_Callback+0x334>)
 8001760:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001764:	4b8f      	ldr	r3, [pc, #572]	; (80019a4 <BasicTimer3_Callback+0x32c>)
 8001766:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800176a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800176e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001772:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001776:	4b94      	ldr	r3, [pc, #592]	; (80019c8 <BasicTimer3_Callback+0x350>)
 8001778:	edc3 7a00 	vstr	s15, [r3]
			w_angular_c = ((handler_Motor_R.parametersMotor.velocity-handler_Motor_L.parametersMotor.velocity)*100000)/b; //[rad/s]
 800177c:	4b8b      	ldr	r3, [pc, #556]	; (80019ac <BasicTimer3_Callback+0x334>)
 800177e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001782:	4b88      	ldr	r3, [pc, #544]	; (80019a4 <BasicTimer3_Callback+0x32c>)
 8001784:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800178c:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80019cc <BasicTimer3_Callback+0x354>
 8001790:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001794:	eddf 6a8e 	vldr	s13, [pc, #568]	; 80019d0 <BasicTimer3_Callback+0x358>
 8001798:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800179c:	4b8d      	ldr	r3, [pc, #564]	; (80019d4 <BasicTimer3_Callback+0x35c>)
 800179e:	edc3 7a00 	vstr	s15, [r3]
			parameter_Posicion_Robot.xr_position = parameter_Posicion_Robot.xr_position + (distance_c*(cos(parameter_Posicion_Robot.phi_relativo)));        //[mm]
 80017a2:	4b8d      	ldr	r3, [pc, #564]	; (80019d8 <BasicTimer3_Callback+0x360>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fee6 	bl	8000578 <__aeabi_f2d>
 80017ac:	4604      	mov	r4, r0
 80017ae:	460d      	mov	r5, r1
 80017b0:	4b84      	ldr	r3, [pc, #528]	; (80019c4 <BasicTimer3_Callback+0x34c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fedf 	bl	8000578 <__aeabi_f2d>
 80017ba:	4680      	mov	r8, r0
 80017bc:	4689      	mov	r9, r1
 80017be:	4b86      	ldr	r3, [pc, #536]	; (80019d8 <BasicTimer3_Callback+0x360>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fed8 	bl	8000578 <__aeabi_f2d>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	ec43 2b10 	vmov	d0, r2, r3
 80017d0:	f008 fe96 	bl	800a500 <cos>
 80017d4:	ec53 2b10 	vmov	r2, r3, d0
 80017d8:	4640      	mov	r0, r8
 80017da:	4649      	mov	r1, r9
 80017dc:	f7fe ff24 	bl	8000628 <__aeabi_dmul>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4620      	mov	r0, r4
 80017e6:	4629      	mov	r1, r5
 80017e8:	f7fe fd68 	bl	80002bc <__adddf3>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f7ff fa10 	bl	8000c18 <__aeabi_d2f>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4a77      	ldr	r2, [pc, #476]	; (80019d8 <BasicTimer3_Callback+0x360>)
 80017fc:	6053      	str	r3, [r2, #4]
			parameter_Posicion_Robot.yr_position  = parameter_Posicion_Robot.yr_position  + (distance_c*(sin(parameter_Posicion_Robot.phi_relativo)));        //[mm]
 80017fe:	4b76      	ldr	r3, [pc, #472]	; (80019d8 <BasicTimer3_Callback+0x360>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe feb8 	bl	8000578 <__aeabi_f2d>
 8001808:	4604      	mov	r4, r0
 800180a:	460d      	mov	r5, r1
 800180c:	4b6d      	ldr	r3, [pc, #436]	; (80019c4 <BasicTimer3_Callback+0x34c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe feb1 	bl	8000578 <__aeabi_f2d>
 8001816:	4680      	mov	r8, r0
 8001818:	4689      	mov	r9, r1
 800181a:	4b6f      	ldr	r3, [pc, #444]	; (80019d8 <BasicTimer3_Callback+0x360>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe feaa 	bl	8000578 <__aeabi_f2d>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	ec43 2b10 	vmov	d0, r2, r3
 800182c:	f008 febc 	bl	800a5a8 <sin>
 8001830:	ec53 2b10 	vmov	r2, r3, d0
 8001834:	4640      	mov	r0, r8
 8001836:	4649      	mov	r1, r9
 8001838:	f7fe fef6 	bl	8000628 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4620      	mov	r0, r4
 8001842:	4629      	mov	r1, r5
 8001844:	f7fe fd3a 	bl	80002bc <__adddf3>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f7ff f9e2 	bl	8000c18 <__aeabi_d2f>
 8001854:	4603      	mov	r3, r0
 8001856:	4a60      	ldr	r2, [pc, #384]	; (80019d8 <BasicTimer3_Callback+0x360>)
 8001858:	6093      	str	r3, [r2, #8]
			parameter_Posicion_Robot.phi_relativo = parameter_Posicion_Robot.phi_relativo + ((delta_distance_R-delta_distance_L)*100)/b;   //[rad]
 800185a:	4b5f      	ldr	r3, [pc, #380]	; (80019d8 <BasicTimer3_Callback+0x360>)
 800185c:	ed93 7a00 	vldr	s14, [r3]
 8001860:	4b57      	ldr	r3, [pc, #348]	; (80019c0 <BasicTimer3_Callback+0x348>)
 8001862:	edd3 6a00 	vldr	s13, [r3]
 8001866:	4b55      	ldr	r3, [pc, #340]	; (80019bc <BasicTimer3_Callback+0x344>)
 8001868:	edd3 7a00 	vldr	s15, [r3]
 800186c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001870:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80019dc <BasicTimer3_Callback+0x364>
 8001874:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001878:	ed9f 6a55 	vldr	s12, [pc, #340]	; 80019d0 <BasicTimer3_Callback+0x358>
 800187c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001884:	4b54      	ldr	r3, [pc, #336]	; (80019d8 <BasicTimer3_Callback+0x360>)
 8001886:	edc3 7a00 	vstr	s15, [r3]
			parameter_Posicion_Robot.phi_relativo = atan2(sin(parameter_Posicion_Robot.phi_relativo),cos(parameter_Posicion_Robot.phi_relativo));
 800188a:	4b53      	ldr	r3, [pc, #332]	; (80019d8 <BasicTimer3_Callback+0x360>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fe72 	bl	8000578 <__aeabi_f2d>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	ec43 2b10 	vmov	d0, r2, r3
 800189c:	f008 fe84 	bl	800a5a8 <sin>
 80018a0:	eeb0 8a40 	vmov.f32	s16, s0
 80018a4:	eef0 8a60 	vmov.f32	s17, s1
 80018a8:	4b4b      	ldr	r3, [pc, #300]	; (80019d8 <BasicTimer3_Callback+0x360>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fe63 	bl	8000578 <__aeabi_f2d>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	ec43 2b10 	vmov	d0, r2, r3
 80018ba:	f008 fe21 	bl	800a500 <cos>
 80018be:	eeb0 7a40 	vmov.f32	s14, s0
 80018c2:	eef0 7a60 	vmov.f32	s15, s1
 80018c6:	eeb0 1a47 	vmov.f32	s2, s14
 80018ca:	eef0 1a67 	vmov.f32	s3, s15
 80018ce:	eeb0 0a48 	vmov.f32	s0, s16
 80018d2:	eef0 0a68 	vmov.f32	s1, s17
 80018d6:	f008 febf 	bl	800a658 <atan2>
 80018da:	ec53 2b10 	vmov	r2, r3, d0
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff f999 	bl	8000c18 <__aeabi_d2f>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4a3b      	ldr	r2, [pc, #236]	; (80019d8 <BasicTimer3_Callback+0x360>)
 80018ea:	6013      	str	r3, [r2, #0]
			//Paso de c.relativa a c.globales
			parameter_Posicion_Robot.xg_position = parameter_Posicion_Robot.xg_position_inicial + parameter_Posicion_Robot.xr_position*cos_cal + parameter_Posicion_Robot.xr_position*sin_cal;
 80018ec:	4b3a      	ldr	r3, [pc, #232]	; (80019d8 <BasicTimer3_Callback+0x360>)
 80018ee:	ed93 7a03 	vldr	s14, [r3, #12]
 80018f2:	4b39      	ldr	r3, [pc, #228]	; (80019d8 <BasicTimer3_Callback+0x360>)
 80018f4:	edd3 6a01 	vldr	s13, [r3, #4]
 80018f8:	4b39      	ldr	r3, [pc, #228]	; (80019e0 <BasicTimer3_Callback+0x368>)
 80018fa:	edd3 7a00 	vldr	s15, [r3]
 80018fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001902:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001906:	4b34      	ldr	r3, [pc, #208]	; (80019d8 <BasicTimer3_Callback+0x360>)
 8001908:	edd3 6a01 	vldr	s13, [r3, #4]
 800190c:	4b35      	ldr	r3, [pc, #212]	; (80019e4 <BasicTimer3_Callback+0x36c>)
 800190e:	edd3 7a00 	vldr	s15, [r3]
 8001912:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191a:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <BasicTimer3_Callback+0x360>)
 800191c:	edc3 7a05 	vstr	s15, [r3, #20]
			parameter_Posicion_Robot.yg_position = parameter_Posicion_Robot.yg_position_inicial - parameter_Posicion_Robot.xr_position*sin_cal + parameter_Posicion_Robot.yr_position*cos_cal;
 8001920:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <BasicTimer3_Callback+0x360>)
 8001922:	ed93 7a04 	vldr	s14, [r3, #16]
 8001926:	4b2c      	ldr	r3, [pc, #176]	; (80019d8 <BasicTimer3_Callback+0x360>)
 8001928:	edd3 6a01 	vldr	s13, [r3, #4]
 800192c:	4b2d      	ldr	r3, [pc, #180]	; (80019e4 <BasicTimer3_Callback+0x36c>)
 800192e:	edd3 7a00 	vldr	s15, [r3]
 8001932:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001936:	ee37 7a67 	vsub.f32	s14, s14, s15
 800193a:	4b27      	ldr	r3, [pc, #156]	; (80019d8 <BasicTimer3_Callback+0x360>)
 800193c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001940:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <BasicTimer3_Callback+0x368>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800194a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800194e:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <BasicTimer3_Callback+0x360>)
 8001950:	edc3 7a06 	vstr	s15, [r3, #24]
			//Convertimos el valor y imprimemos
			sprintf(bufferMsg,"%#.4f\t%#.4f\n", parameter_Posicion_Robot.xg_position , parameter_Posicion_Robot.yg_position);
 8001954:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <BasicTimer3_Callback+0x360>)
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fe0d 	bl	8000578 <__aeabi_f2d>
 800195e:	4604      	mov	r4, r0
 8001960:	460d      	mov	r5, r1
 8001962:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <BasicTimer3_Callback+0x360>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fe06 	bl	8000578 <__aeabi_f2d>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	e9cd 2300 	strd	r2, r3, [sp]
 8001974:	4622      	mov	r2, r4
 8001976:	462b      	mov	r3, r5
 8001978:	491b      	ldr	r1, [pc, #108]	; (80019e8 <BasicTimer3_Callback+0x370>)
 800197a:	481c      	ldr	r0, [pc, #112]	; (80019ec <BasicTimer3_Callback+0x374>)
 800197c:	f004 fb94 	bl	80060a8 <siprintf>
			writeMsgForTXE(&handler_USART_USB, bufferMsg);
 8001980:	491a      	ldr	r1, [pc, #104]	; (80019ec <BasicTimer3_Callback+0x374>)
 8001982:	481b      	ldr	r0, [pc, #108]	; (80019f0 <BasicTimer3_Callback+0x378>)
 8001984:	f003 fad6 	bl	8004f34 <writeMsgForTXE>
			//Restablecemos valores
			flag_count_odometry = 0;
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <BasicTimer3_Callback+0x340>)
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
			delta_distance_L = 0;
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <BasicTimer3_Callback+0x344>)
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
			delta_distance_R = 0;
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <BasicTimer3_Callback+0x348>)
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	e029      	b.n	80019f4 <BasicTimer3_Callback+0x37c>
 80019a0:	20000444 	.word	0x20000444
 80019a4:	20000360 	.word	0x20000360
 80019a8:	2000042c 	.word	0x2000042c
 80019ac:	200002e4 	.word	0x200002e4
 80019b0:	20000430 	.word	0x20000430
 80019b4:	20000008 	.word	0x20000008
 80019b8:	20000420 	.word	0x20000420
 80019bc:	20000424 	.word	0x20000424
 80019c0:	20000428 	.word	0x20000428
 80019c4:	20000434 	.word	0x20000434
 80019c8:	20000438 	.word	0x20000438
 80019cc:	47c35000 	.word	0x47c35000
 80019d0:	4622f800 	.word	0x4622f800
 80019d4:	2000043c 	.word	0x2000043c
 80019d8:	200003f4 	.word	0x200003f4
 80019dc:	42c80000 	.word	0x42c80000
 80019e0:	20000414 	.word	0x20000414
 80019e4:	20000418 	.word	0x20000418
 80019e8:	0800bb40 	.word	0x0800bb40
 80019ec:	20000274 	.word	0x20000274
 80019f0:	20000268 	.word	0x20000268
			//calculo a la distancia de la recta
			distance_punto_recta = (parameter_Posicion_Robot.xr_position - parameter_Posicion_Robot.yr_position)/R2;
 80019f4:	4ba4      	ldr	r3, [pc, #656]	; (8001c88 <BasicTimer3_Callback+0x610>)
 80019f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80019fa:	4ba3      	ldr	r3, [pc, #652]	; (8001c88 <BasicTimer3_Callback+0x610>)
 80019fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a04:	ee17 0a90 	vmov	r0, s15
 8001a08:	f7fe fdb6 	bl	8000578 <__aeabi_f2d>
 8001a0c:	a398      	add	r3, pc, #608	; (adr r3, 8001c70 <BasicTimer3_Callback+0x5f8>)
 8001a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a12:	f7fe ff33 	bl	800087c <__aeabi_ddiv>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7ff f8fb 	bl	8000c18 <__aeabi_d2f>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4a99      	ldr	r2, [pc, #612]	; (8001c8c <BasicTimer3_Callback+0x614>)
 8001a26:	6013      	str	r3, [r2, #0]
			//correction_velocity_c = distance_punto_recta *0.04;
			//correction_velocity_c = (distance_punto_recta/1000);
			//correction_dutty_c = 10*(correction_velocity_c);
			//apliacamos el PID
			PID(&parameter_PID_distance, distance_punto_recta, 0);
 8001a28:	4b98      	ldr	r3, [pc, #608]	; (8001c8c <BasicTimer3_Callback+0x614>)
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	eddf 0a98 	vldr	s1, [pc, #608]	; 8001c90 <BasicTimer3_Callback+0x618>
 8001a32:	eeb0 0a67 	vmov.f32	s0, s15
 8001a36:	4897      	ldr	r0, [pc, #604]	; (8001c94 <BasicTimer3_Callback+0x61c>)
 8001a38:	f000 fd14 	bl	8002464 <PID>
			//Correction velocidad angular
			//correction_dutty_c = parameter_PID_distance.u ;
			//correction_velocity_c = parameter_PID_distance.u*(((w_angular_c)*b)/20000);
		}
		//Reiniciamos el numero de conteos
		handler_Motor_R.parametersMotor.count = 0;
 8001a3c:	4b96      	ldr	r3, [pc, #600]	; (8001c98 <BasicTimer3_Callback+0x620>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	841a      	strh	r2, [r3, #32]
		handler_Motor_L.parametersMotor.count = 0;
 8001a42:	4b96      	ldr	r3, [pc, #600]	; (8001c9c <BasicTimer3_Callback+0x624>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	841a      	strh	r2, [r3, #32]
		//Correccion del dutty
		//Conversion ley de control->velocidad->valor dutty
		porVel_L = (0.9234*(32) - 3) - 0.1*parameter_PID_distance.u ;
 8001a48:	4b92      	ldr	r3, [pc, #584]	; (8001c94 <BasicTimer3_Callback+0x61c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fd93 	bl	8000578 <__aeabi_f2d>
 8001a52:	a389      	add	r3, pc, #548	; (adr r3, 8001c78 <BasicTimer3_Callback+0x600>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	f7fe fde6 	bl	8000628 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	a187      	add	r1, pc, #540	; (adr r1, 8001c80 <BasicTimer3_Callback+0x608>)
 8001a62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a66:	f7fe fc27 	bl	80002b8 <__aeabi_dsub>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff f8d1 	bl	8000c18 <__aeabi_d2f>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4a89      	ldr	r2, [pc, #548]	; (8001ca0 <BasicTimer3_Callback+0x628>)
 8001a7a:	6013      	str	r3, [r2, #0]
		porVel_R = 32 + 0.1*parameter_PID_distance.u ;
 8001a7c:	4b85      	ldr	r3, [pc, #532]	; (8001c94 <BasicTimer3_Callback+0x61c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd79 	bl	8000578 <__aeabi_f2d>
 8001a86:	a37c      	add	r3, pc, #496	; (adr r3, 8001c78 <BasicTimer3_Callback+0x600>)
 8001a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8c:	f7fe fdcc 	bl	8000628 <__aeabi_dmul>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4610      	mov	r0, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	4b81      	ldr	r3, [pc, #516]	; (8001ca4 <BasicTimer3_Callback+0x62c>)
 8001a9e:	f7fe fc0d 	bl	80002bc <__adddf3>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f7ff f8b5 	bl	8000c18 <__aeabi_d2f>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4a7d      	ldr	r2, [pc, #500]	; (8001ca8 <BasicTimer3_Callback+0x630>)
 8001ab2:	6013      	str	r3, [r2, #0]
	    //Saturo el porcentaje de dutty en un tope maximo y minimo
	    if (porVel_R >= 100.0)
 8001ab4:	4b7c      	ldr	r3, [pc, #496]	; (8001ca8 <BasicTimer3_Callback+0x630>)
 8001ab6:	edd3 7a00 	vldr	s15, [r3]
 8001aba:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8001cac <BasicTimer3_Callback+0x634>
 8001abe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac6:	db03      	blt.n	8001ad0 <BasicTimer3_Callback+0x458>
	    {
	    	porVel_R = 100.0;
 8001ac8:	4b77      	ldr	r3, [pc, #476]	; (8001ca8 <BasicTimer3_Callback+0x630>)
 8001aca:	4a79      	ldr	r2, [pc, #484]	; (8001cb0 <BasicTimer3_Callback+0x638>)
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	e01a      	b.n	8001b06 <BasicTimer3_Callback+0x48e>
	    }
	    else if(porVel_R <= duttyInicial-5)
 8001ad0:	4b78      	ldr	r3, [pc, #480]	; (8001cb4 <BasicTimer3_Callback+0x63c>)
 8001ad2:	edd3 7a00 	vldr	s15, [r3]
 8001ad6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001ada:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001ade:	4b72      	ldr	r3, [pc, #456]	; (8001ca8 <BasicTimer3_Callback+0x630>)
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aec:	db0a      	blt.n	8001b04 <BasicTimer3_Callback+0x48c>
	    {
	    	porVel_R = duttyInicial-5;
 8001aee:	4b71      	ldr	r3, [pc, #452]	; (8001cb4 <BasicTimer3_Callback+0x63c>)
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001af8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001afc:	4b6a      	ldr	r3, [pc, #424]	; (8001ca8 <BasicTimer3_Callback+0x630>)
 8001afe:	edc3 7a00 	vstr	s15, [r3]
 8001b02:	e000      	b.n	8001b06 <BasicTimer3_Callback+0x48e>
	    }
	    else
	    {
	    	__NOP();
 8001b04:	bf00      	nop
	    }

	    //Actualizamoe el valor del dutty
	    updateDuttyMotor(&handler_Motor_R , porVel_R);
 8001b06:	4b68      	ldr	r3, [pc, #416]	; (8001ca8 <BasicTimer3_Callback+0x630>)
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b10:	4861      	ldr	r0, [pc, #388]	; (8001c98 <BasicTimer3_Callback+0x620>)
 8001b12:	f7ff fac1 	bl	8001098 <updateDuttyMotor>
	    //Saturo el porcentaje de dutty en un tope maximo y minimo
	    if (porVel_L >= 100.0)
 8001b16:	4b62      	ldr	r3, [pc, #392]	; (8001ca0 <BasicTimer3_Callback+0x628>)
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001cac <BasicTimer3_Callback+0x634>
 8001b20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b28:	db03      	blt.n	8001b32 <BasicTimer3_Callback+0x4ba>
	    {
	    	porVel_L = 100.0;
 8001b2a:	4b5d      	ldr	r3, [pc, #372]	; (8001ca0 <BasicTimer3_Callback+0x628>)
 8001b2c:	4a60      	ldr	r2, [pc, #384]	; (8001cb0 <BasicTimer3_Callback+0x638>)
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	e01a      	b.n	8001b68 <BasicTimer3_Callback+0x4f0>
	    }
	    else if(porVel_L <= duttyInicial-5)
 8001b32:	4b60      	ldr	r3, [pc, #384]	; (8001cb4 <BasicTimer3_Callback+0x63c>)
 8001b34:	edd3 7a00 	vldr	s15, [r3]
 8001b38:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001b3c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001b40:	4b57      	ldr	r3, [pc, #348]	; (8001ca0 <BasicTimer3_Callback+0x628>)
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4e:	db0a      	blt.n	8001b66 <BasicTimer3_Callback+0x4ee>
	    {
	    	porVel_L = duttyInicial-5;
 8001b50:	4b58      	ldr	r3, [pc, #352]	; (8001cb4 <BasicTimer3_Callback+0x63c>)
 8001b52:	edd3 7a00 	vldr	s15, [r3]
 8001b56:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001b5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b5e:	4b50      	ldr	r3, [pc, #320]	; (8001ca0 <BasicTimer3_Callback+0x628>)
 8001b60:	edc3 7a00 	vstr	s15, [r3]
 8001b64:	e000      	b.n	8001b68 <BasicTimer3_Callback+0x4f0>
	    }
	    else
	    {
	    	__NOP();
 8001b66:	bf00      	nop
	    }

	    //Actualizamoe el valor del dutty
	    updateDuttyMotor(&handler_Motor_L, porVel_L);
 8001b68:	4b4d      	ldr	r3, [pc, #308]	; (8001ca0 <BasicTimer3_Callback+0x628>)
 8001b6a:	edd3 7a00 	vldr	s15, [r3]
 8001b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b72:	484a      	ldr	r0, [pc, #296]	; (8001c9c <BasicTimer3_Callback+0x624>)
 8001b74:	f7ff fa90 	bl	8001098 <updateDuttyMotor>
		//Reiniciamos el numero de conteos
		handler_Motor_R.parametersMotor.count = 0;
		handler_Motor_L.parametersMotor.count = 0;
	}

}
 8001b78:	e070      	b.n	8001c5c <BasicTimer3_Callback+0x5e4>
	else if(flag_motor==3)
 8001b7a:	4b4f      	ldr	r3, [pc, #316]	; (8001cb8 <BasicTimer3_Callback+0x640>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d120      	bne.n	8001bc4 <BasicTimer3_Callback+0x54c>
		count_time = count_time + periodo_TIMER_Count;       //Tiempo en ms
 8001b82:	4b4e      	ldr	r3, [pc, #312]	; (8001cbc <BasicTimer3_Callback+0x644>)
 8001b84:	881a      	ldrh	r2, [r3, #0]
 8001b86:	4b4e      	ldr	r3, [pc, #312]	; (8001cc0 <BasicTimer3_Callback+0x648>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	4b4b      	ldr	r3, [pc, #300]	; (8001cbc <BasicTimer3_Callback+0x644>)
 8001b90:	801a      	strh	r2, [r3, #0]
		sprintf(bufferMsg,"%u\t%u\t%u\n", count_time,(handler_Motor_R.parametersMotor.count), (handler_Motor_L.parametersMotor.count));
 8001b92:	4b4a      	ldr	r3, [pc, #296]	; (8001cbc <BasicTimer3_Callback+0x644>)
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	4b3f      	ldr	r3, [pc, #252]	; (8001c98 <BasicTimer3_Callback+0x620>)
 8001b9a:	8c1b      	ldrh	r3, [r3, #32]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4b3f      	ldr	r3, [pc, #252]	; (8001c9c <BasicTimer3_Callback+0x624>)
 8001ba0:	8c1b      	ldrh	r3, [r3, #32]
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4947      	ldr	r1, [pc, #284]	; (8001cc4 <BasicTimer3_Callback+0x64c>)
 8001ba8:	4847      	ldr	r0, [pc, #284]	; (8001cc8 <BasicTimer3_Callback+0x650>)
 8001baa:	f004 fa7d 	bl	80060a8 <siprintf>
		writeMsgForTXE(&handler_USART_USB, bufferMsg);
 8001bae:	4946      	ldr	r1, [pc, #280]	; (8001cc8 <BasicTimer3_Callback+0x650>)
 8001bb0:	4846      	ldr	r0, [pc, #280]	; (8001ccc <BasicTimer3_Callback+0x654>)
 8001bb2:	f003 f9bf 	bl	8004f34 <writeMsgForTXE>
		handler_Motor_R.parametersMotor.count = 0;
 8001bb6:	4b38      	ldr	r3, [pc, #224]	; (8001c98 <BasicTimer3_Callback+0x620>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	841a      	strh	r2, [r3, #32]
		handler_Motor_L.parametersMotor.count = 0;
 8001bbc:	4b37      	ldr	r3, [pc, #220]	; (8001c9c <BasicTimer3_Callback+0x624>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	841a      	strh	r2, [r3, #32]
}
 8001bc2:	e04b      	b.n	8001c5c <BasicTimer3_Callback+0x5e4>
	else if(flag_motor==4)
 8001bc4:	4b3c      	ldr	r3, [pc, #240]	; (8001cb8 <BasicTimer3_Callback+0x640>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d147      	bne.n	8001c5c <BasicTimer3_Callback+0x5e4>
		handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/periodo_TIMER_Count;   //[m/s]
 8001bcc:	4b33      	ldr	r3, [pc, #204]	; (8001c9c <BasicTimer3_Callback+0x624>)
 8001bce:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001bd2:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <BasicTimer3_Callback+0x648>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	ee07 3a90 	vmov	s15, r3
 8001bda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001be2:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <BasicTimer3_Callback+0x624>)
 8001be4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/periodo_TIMER_Count;   //[m/s]
 8001be8:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <BasicTimer3_Callback+0x620>)
 8001bea:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001bee:	4b34      	ldr	r3, [pc, #208]	; (8001cc0 <BasicTimer3_Callback+0x648>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	ee07 3a90 	vmov	s15, r3
 8001bf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bfe:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <BasicTimer3_Callback+0x620>)
 8001c00:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		count_time = count_time + periodo_TIMER_Count;       //Tiempo en ms
 8001c04:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <BasicTimer3_Callback+0x644>)
 8001c06:	881a      	ldrh	r2, [r3, #0]
 8001c08:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <BasicTimer3_Callback+0x648>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <BasicTimer3_Callback+0x644>)
 8001c12:	801a      	strh	r2, [r3, #0]
		sprintf(bufferMsg,"%u\t%#.4f\t%#.4f\n", count_time, handler_Motor_L.parametersMotor.velocity , handler_Motor_R.parametersMotor.velocity);
 8001c14:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <BasicTimer3_Callback+0x644>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	461e      	mov	r6, r3
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <BasicTimer3_Callback+0x624>)
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fcaa 	bl	8000578 <__aeabi_f2d>
 8001c24:	4604      	mov	r4, r0
 8001c26:	460d      	mov	r5, r1
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <BasicTimer3_Callback+0x620>)
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fca3 	bl	8000578 <__aeabi_f2d>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c3a:	e9cd 4500 	strd	r4, r5, [sp]
 8001c3e:	4632      	mov	r2, r6
 8001c40:	4923      	ldr	r1, [pc, #140]	; (8001cd0 <BasicTimer3_Callback+0x658>)
 8001c42:	4821      	ldr	r0, [pc, #132]	; (8001cc8 <BasicTimer3_Callback+0x650>)
 8001c44:	f004 fa30 	bl	80060a8 <siprintf>
		writeMsgForTXE(&handler_USART_USB, bufferMsg);
 8001c48:	491f      	ldr	r1, [pc, #124]	; (8001cc8 <BasicTimer3_Callback+0x650>)
 8001c4a:	4820      	ldr	r0, [pc, #128]	; (8001ccc <BasicTimer3_Callback+0x654>)
 8001c4c:	f003 f972 	bl	8004f34 <writeMsgForTXE>
		handler_Motor_R.parametersMotor.count = 0;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <BasicTimer3_Callback+0x620>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	841a      	strh	r2, [r3, #32]
		handler_Motor_L.parametersMotor.count = 0;
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <BasicTimer3_Callback+0x624>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	841a      	strh	r2, [r3, #32]
}
 8001c5c:	bf00      	nop
 8001c5e:	3704      	adds	r7, #4
 8001c60:	46bd      	mov	sp, r7
 8001c62:	ecbd 8b02 	vpop	{d8}
 8001c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c6a:	bf00      	nop
 8001c6c:	f3af 8000 	nop.w
 8001c70:	667f055a 	.word	0x667f055a
 8001c74:	3ff6a09e 	.word	0x3ff6a09e
 8001c78:	9999999a 	.word	0x9999999a
 8001c7c:	3fb99999 	.word	0x3fb99999
 8001c80:	28240b78 	.word	0x28240b78
 8001c84:	403a8c7e 	.word	0x403a8c7e
 8001c88:	200003f4 	.word	0x200003f4
 8001c8c:	20000458 	.word	0x20000458
 8001c90:	00000000 	.word	0x00000000
 8001c94:	200003cc 	.word	0x200003cc
 8001c98:	200002e4 	.word	0x200002e4
 8001c9c:	20000360 	.word	0x20000360
 8001ca0:	2000044c 	.word	0x2000044c
 8001ca4:	40400000 	.word	0x40400000
 8001ca8:	20000450 	.word	0x20000450
 8001cac:	42c80000 	.word	0x42c80000
 8001cb0:	42c80000 	.word	0x42c80000
 8001cb4:	20000454 	.word	0x20000454
 8001cb8:	20000444 	.word	0x20000444
 8001cbc:	20000446 	.word	0x20000446
 8001cc0:	20000008 	.word	0x20000008
 8001cc4:	0800bb50 	.word	0x0800bb50
 8001cc8:	20000274 	.word	0x20000274
 8001ccc:	20000268 	.word	0x20000268
 8001cd0:	0800bb5c 	.word	0x0800bb5c

08001cd4 <BasicUSART2_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART2_Callback(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
	//Guardamos el caracter recibido
	charRead = getRxData();
 8001cd8:	f003 f96a 	bl	8004fb0 <getRxData>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4b02      	ldr	r3, [pc, #8]	; (8001cec <BasicUSART2_Callback+0x18>)
 8001ce2:	701a      	strb	r2, [r3, #0]
	//Funcion que almacena los caracteres del comando recibido
	recepcionCommand();
 8001ce4:	f000 f8a8 	bl	8001e38 <recepcionCommand>
}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000000 	.word	0x20000000

08001cf0 <callback_extInt1>:


//-------------------------Fotocompuerta--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el EXTI13 y EXTI13
void callback_extInt1(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	handler_Motor_R.parametersMotor.count++;
 8001cf4:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <callback_extInt1+0x88>)
 8001cf6:	8c1b      	ldrh	r3, [r3, #32]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <callback_extInt1+0x88>)
 8001cfe:	841a      	strh	r2, [r3, #32]
	handler_Motor_R.parametersMotor.countCotinuous++;
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <callback_extInt1+0x88>)
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	3301      	adds	r3, #1
 8001d06:	4a1c      	ldr	r2, [pc, #112]	; (8001d78 <callback_extInt1+0x88>)
 8001d08:	6253      	str	r3, [r2, #36]	; 0x24
	//calculo del tiempo entre interrupcion
//	uint64_t timeNow = getTicksUs();
//	handler_Motor_R.parametersMotor.timeCount = timeNow-timeBackR;
//	timeBackR = timeNow;
	//Verificamos que la bandera este arriba
	if(flag_motor==2 && flag_turn==1 && (limit_count_turn)<(handler_Motor_R.parametersMotor.count))
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <callback_extInt1+0x8c>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d112      	bne.n	8001d38 <callback_extInt1+0x48>
 8001d12:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <callback_extInt1+0x90>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d10e      	bne.n	8001d38 <callback_extInt1+0x48>
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <callback_extInt1+0x88>)
 8001d1c:	8c1a      	ldrh	r2, [r3, #32]
 8001d1e:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <callback_extInt1+0x94>)
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d908      	bls.n	8001d38 <callback_extInt1+0x48>
	{
		//Desactivamos los motores
		status_motor(RESET);
 8001d26:	2000      	movs	r0, #0
 8001d28:	f000 fbf0 	bl	800250c <status_motor>
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8001d2c:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <callback_extInt1+0x98>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff f9c8 	bl	80010c6 <updateDirMotor>
	{
		//Desactivamos los motores
		status_motor(RESET);
	}

}
 8001d36:	e01d      	b.n	8001d74 <callback_extInt1+0x84>
	else if(flag_motor==1 && distance<(cm_R*handler_Motor_R.parametersMotor.countCotinuous))
 8001d38:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <callback_extInt1+0x8c>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d119      	bne.n	8001d74 <callback_extInt1+0x84>
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <callback_extInt1+0x9c>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	ee07 3a90 	vmov	s15, r3
 8001d48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <callback_extInt1+0x88>)
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	ee07 3a90 	vmov	s15, r3
 8001d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d58:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <callback_extInt1+0xa0>)
 8001d5a:	edd3 7a00 	vldr	s15, [r3]
 8001d5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6a:	d400      	bmi.n	8001d6e <callback_extInt1+0x7e>
}
 8001d6c:	e002      	b.n	8001d74 <callback_extInt1+0x84>
		status_motor(RESET);
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f000 fbcc 	bl	800250c <status_motor>
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	200002e4 	.word	0x200002e4
 8001d7c:	20000444 	.word	0x20000444
 8001d80:	20000445 	.word	0x20000445
 8001d84:	20000448 	.word	0x20000448
 8001d88:	20000440 	.word	0x20000440
 8001d8c:	2000044a 	.word	0x2000044a
 8001d90:	20000430 	.word	0x20000430

08001d94 <callback_extInt3>:
void callback_extInt3(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
	handler_Motor_L.parametersMotor.count++;
 8001d98:	4b20      	ldr	r3, [pc, #128]	; (8001e1c <callback_extInt3+0x88>)
 8001d9a:	8c1b      	ldrh	r3, [r3, #32]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <callback_extInt3+0x88>)
 8001da2:	841a      	strh	r2, [r3, #32]
	handler_Motor_L.parametersMotor.countCotinuous++;
 8001da4:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <callback_extInt3+0x88>)
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	3301      	adds	r3, #1
 8001daa:	4a1c      	ldr	r2, [pc, #112]	; (8001e1c <callback_extInt3+0x88>)
 8001dac:	6253      	str	r3, [r2, #36]	; 0x24
	//calculo del tiempo entre interrupcion
//	uint64_t timeNow = getTicksUs();
//	handler_Motor_L.parametersMotor.timeCount = timeNow-timeBackL;
//	timeBackL = timeNow;
	//Verificamos que la bandera este arriba
	if(flag_motor==2 && flag_turn==2 && (limit_count_turn)<(handler_Motor_L.parametersMotor.count))
 8001dae:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <callback_extInt3+0x8c>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d112      	bne.n	8001ddc <callback_extInt3+0x48>
 8001db6:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <callback_extInt3+0x90>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d10e      	bne.n	8001ddc <callback_extInt3+0x48>
 8001dbe:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <callback_extInt3+0x88>)
 8001dc0:	8c1a      	ldrh	r2, [r3, #32]
 8001dc2:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <callback_extInt3+0x94>)
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d908      	bls.n	8001ddc <callback_extInt3+0x48>
	{
		//Desactivamos los motores
		status_motor(RESET);
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f000 fb9e 	bl	800250c <status_motor>
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8001dd0:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <callback_extInt3+0x98>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff f976 	bl	80010c6 <updateDirMotor>
	else if(flag_motor==1 && distance<(cm_L*handler_Motor_L.parametersMotor.countCotinuous))
	{
		//Desactivamos los motores
		status_motor(RESET);
	}
}
 8001dda:	e01d      	b.n	8001e18 <callback_extInt3+0x84>
	else if(flag_motor==1 && distance<(cm_L*handler_Motor_L.parametersMotor.countCotinuous))
 8001ddc:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <callback_extInt3+0x8c>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d119      	bne.n	8001e18 <callback_extInt3+0x84>
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <callback_extInt3+0x9c>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	ee07 3a90 	vmov	s15, r3
 8001dec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001df0:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <callback_extInt3+0x88>)
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	ee07 3a90 	vmov	s15, r3
 8001df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <callback_extInt3+0xa0>)
 8001dfe:	edd3 7a00 	vldr	s15, [r3]
 8001e02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0e:	d400      	bmi.n	8001e12 <callback_extInt3+0x7e>
}
 8001e10:	e002      	b.n	8001e18 <callback_extInt3+0x84>
		status_motor(RESET);
 8001e12:	2000      	movs	r0, #0
 8001e14:	f000 fb7a 	bl	800250c <status_motor>
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000360 	.word	0x20000360
 8001e20:	20000444 	.word	0x20000444
 8001e24:	20000445 	.word	0x20000445
 8001e28:	20000448 	.word	0x20000448
 8001e2c:	20000440 	.word	0x20000440
 8001e30:	2000044a 	.word	0x2000044a
 8001e34:	2000042c 	.word	0x2000042c

08001e38 <recepcionCommand>:

//----------------------------Inicio de la definicion de las funciones de los comandos----------------------------------------

//Funcion que recibe los caracteres del comando recibido
void recepcionCommand(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
	if(charRead == '@')
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <recepcionCommand+0x4c>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b40      	cmp	r3, #64	; 0x40
 8001e42:	d10c      	bne.n	8001e5e <recepcionCommand+0x26>
	{
		//Almacenamos el elemento nulo
		bufferRecepcion[counterRecepcion] = '\0';
 8001e44:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <recepcionCommand+0x50>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <recepcionCommand+0x54>)
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	5499      	strb	r1, [r3, r2]
		//Establecemos la bandera como alta
		commandComplete = 1;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <recepcionCommand+0x58>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	701a      	strb	r2, [r3, #0]
		//Reiniciamos la variable
		counterRecepcion = 0;
 8001e56:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <recepcionCommand+0x50>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
		//Aumentamos en uno la posicion del arreglo
		counterRecepcion++;
		//Reiniciamos la variable
	}

}
 8001e5c:	e00c      	b.n	8001e78 <recepcionCommand+0x40>
		bufferRecepcion[counterRecepcion] = charRead;
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <recepcionCommand+0x50>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <recepcionCommand+0x4c>)
 8001e66:	7819      	ldrb	r1, [r3, #0]
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <recepcionCommand+0x54>)
 8001e6a:	5499      	strb	r1, [r3, r2]
		counterRecepcion++;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <recepcionCommand+0x50>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	3301      	adds	r3, #1
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <recepcionCommand+0x50>)
 8001e76:	701a      	strb	r2, [r3, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000000 	.word	0x20000000
 8001e88:	2000045c 	.word	0x2000045c
 8001e8c:	20000460 	.word	0x20000460
 8001e90:	2000000c 	.word	0x2000000c
 8001e94:	00000000 	.word	0x00000000

08001e98 <runCommand>:

//Funcion que ejecuta el comando ingresando
void runCommand(char *prtcommand)
{
 8001e98:	b590      	push	{r4, r7, lr}
 8001e9a:	b09d      	sub	sp, #116	; 0x74
 8001e9c:	af04      	add	r7, sp, #16
 8001e9e:	6078      	str	r0, [r7, #4]
	//Variables para almacenar los elmentos que entrega el comando luego de ser divididos por la funcion sscanf
	char cmd[64]= {0};
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]
 8001ea4:	f107 0320 	add.w	r3, r7, #32
 8001ea8:	223c      	movs	r2, #60	; 0x3c
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f003 fa73 	bl	8005398 <memset>
	int firtsParameter = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
	int secondParameter = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
	int thirdParameter = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
	int forthParameter = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
	//char bufferMsg[64]= {0};

	//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
	sscanf(prtcommand, "%s %u %u %u %u", cmd, &firtsParameter, &secondParameter, &thirdParameter, &forthParameter);
 8001ec2:	f107 0118 	add.w	r1, r7, #24
 8001ec6:	f107 021c 	add.w	r2, r7, #28
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	9302      	str	r3, [sp, #8]
 8001ed0:	f107 0310 	add.w	r3, r7, #16
 8001ed4:	9301      	str	r3, [sp, #4]
 8001ed6:	f107 0314 	add.w	r3, r7, #20
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	460b      	mov	r3, r1
 8001ede:	49b0      	ldr	r1, [pc, #704]	; (80021a0 <runCommand+0x308>)
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f004 f901 	bl	80060e8 <siscanf>

	//Imprime lista que muestra los comandos que tiene el dispositivo
	if(strcmp(cmd, "help")==0)
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	49ae      	ldr	r1, [pc, #696]	; (80021a4 <runCommand+0x30c>)
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe f977 	bl	80001e0 <strcmp>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d128      	bne.n	8001f4a <runCommand+0xb2>
	{
		writeMsgForTXE(&handler_USART_USB, "Help Menu: \n");
 8001ef8:	49ab      	ldr	r1, [pc, #684]	; (80021a8 <runCommand+0x310>)
 8001efa:	48ac      	ldr	r0, [pc, #688]	; (80021ac <runCommand+0x314>)
 8001efc:	f003 f81a 	bl	8004f34 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "1) help  ---Imprime lista de comandos. \n");
 8001f00:	49ab      	ldr	r1, [pc, #684]	; (80021b0 <runCommand+0x318>)
 8001f02:	48aa      	ldr	r0, [pc, #680]	; (80021ac <runCommand+0x314>)
 8001f04:	f003 f816 	bl	8004f34 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "2) frequency # --- Cambiar el valor de la frecuenencia de las pruebas, [HZ] \n");
 8001f08:	49aa      	ldr	r1, [pc, #680]	; (80021b4 <runCommand+0x31c>)
 8001f0a:	48a8      	ldr	r0, [pc, #672]	; (80021ac <runCommand+0x314>)
 8001f0c:	f003 f812 	bl	8004f34 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "3) line # # #---Inicia Linea recta, #: dist [mm], #: dutty inicial , #: dutty estable \n");
 8001f10:	49a9      	ldr	r1, [pc, #676]	; (80021b8 <runCommand+0x320>)
 8001f12:	48a6      	ldr	r0, [pc, #664]	; (80021ac <runCommand+0x314>)
 8001f14:	f003 f80e 	bl	8004f34 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "4) turn # # # # ---Iniciamos el giro del robot #: ang #:dir #:dutty_R \n");
 8001f18:	49a8      	ldr	r1, [pc, #672]	; (80021bc <runCommand+0x324>)
 8001f1a:	48a4      	ldr	r0, [pc, #656]	; (80021ac <runCommand+0x314>)
 8001f1c:	f003 f80a 	bl	8004f34 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "5) start # # # # ---Inicia movimiento, #: perTC [ms], #: dutty_L, #dutty_R, #: freqTP [Hz] \n");
 8001f20:	49a7      	ldr	r1, [pc, #668]	; (80021c0 <runCommand+0x328>)
 8001f22:	48a2      	ldr	r0, [pc, #648]	; (80021ac <runCommand+0x314>)
 8001f24:	f003 f806 	bl	8004f34 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "6) reaction # # # ---Inicia Curva de reaccion,#: perTC [ms], #: dutty_L y dutty_R, #: freqTP [Hz] \n");
 8001f28:	49a6      	ldr	r1, [pc, #664]	; (80021c4 <runCommand+0x32c>)
 8001f2a:	48a0      	ldr	r0, [pc, #640]	; (80021ac <runCommand+0x314>)
 8001f2c:	f003 f802 	bl	8004f34 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "7) stop ---Para el estudio en medio de la ejecucion \n");
 8001f30:	49a5      	ldr	r1, [pc, #660]	; (80021c8 <runCommand+0x330>)
 8001f32:	489e      	ldr	r0, [pc, #632]	; (80021ac <runCommand+0x314>)
 8001f34:	f002 fffe 	bl	8004f34 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "0) const # # # ---Constantes del PID #: L,k,tau \n");
 8001f38:	49a4      	ldr	r1, [pc, #656]	; (80021cc <runCommand+0x334>)
 8001f3a:	489c      	ldr	r0, [pc, #624]	; (80021ac <runCommand+0x314>)
 8001f3c:	f002 fffa 	bl	8004f34 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "0) equation # #  ---Constantes de la ecuacion lineal #: m,b  591.91-->59191 \n");
 8001f40:	49a3      	ldr	r1, [pc, #652]	; (80021d0 <runCommand+0x338>)
 8001f42:	489a      	ldr	r0, [pc, #616]	; (80021ac <runCommand+0x314>)
 8001f44:	f002 fff6 	bl	8004f34 <writeMsgForTXE>
		//Se imprime que el comando no fue valido
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
	}


}
 8001f48:	e25d      	b.n	8002406 <runCommand+0x56e>
	else if (strcmp(cmd, "frequency") == 0)
 8001f4a:	f107 031c 	add.w	r3, r7, #28
 8001f4e:	49a1      	ldr	r1, [pc, #644]	; (80021d4 <runCommand+0x33c>)
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe f945 	bl	80001e0 <strcmp>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d107      	bne.n	8001f6c <runCommand+0xd4>
		frequency_PWM_Motor = 100000/firtsParameter;
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	4a9e      	ldr	r2, [pc, #632]	; (80021d8 <runCommand+0x340>)
 8001f60:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	4b9d      	ldr	r3, [pc, #628]	; (80021dc <runCommand+0x344>)
 8001f68:	801a      	strh	r2, [r3, #0]
}
 8001f6a:	e24c      	b.n	8002406 <runCommand+0x56e>
	else if (strcmp(cmd, "line") == 0)
 8001f6c:	f107 031c 	add.w	r3, r7, #28
 8001f70:	499b      	ldr	r1, [pc, #620]	; (80021e0 <runCommand+0x348>)
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe f934 	bl	80001e0 <strcmp>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f040 80c6 	bne.w	800210c <runCommand+0x274>
		parameter_Posicion_Robot.xg_position_inicial = parameter_Posicion_Robot.xg_position;
 8001f80:	4b98      	ldr	r3, [pc, #608]	; (80021e4 <runCommand+0x34c>)
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	4a97      	ldr	r2, [pc, #604]	; (80021e4 <runCommand+0x34c>)
 8001f86:	60d3      	str	r3, [r2, #12]
		parameter_Posicion_Robot.yg_position_inicial = parameter_Posicion_Robot.yg_position;
 8001f88:	4b96      	ldr	r3, [pc, #600]	; (80021e4 <runCommand+0x34c>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	4a95      	ldr	r2, [pc, #596]	; (80021e4 <runCommand+0x34c>)
 8001f8e:	6113      	str	r3, [r2, #16]
		parameter_Posicion_Robot.ang_Giro += turn;
 8001f90:	4b94      	ldr	r3, [pc, #592]	; (80021e4 <runCommand+0x34c>)
 8001f92:	ed93 7a07 	vldr	s14, [r3, #28]
 8001f96:	4b94      	ldr	r3, [pc, #592]	; (80021e8 <runCommand+0x350>)
 8001f98:	edd3 7a00 	vldr	s15, [r3]
 8001f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa0:	4b90      	ldr	r3, [pc, #576]	; (80021e4 <runCommand+0x34c>)
 8001fa2:	edc3 7a07 	vstr	s15, [r3, #28]
		parameter_Posicion_Robot.xr_position = 0;
 8001fa6:	4b8f      	ldr	r3, [pc, #572]	; (80021e4 <runCommand+0x34c>)
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	605a      	str	r2, [r3, #4]
		parameter_Posicion_Robot.yr_position = 0;
 8001fae:	4b8d      	ldr	r3, [pc, #564]	; (80021e4 <runCommand+0x34c>)
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
		parameter_Posicion_Robot.phi_relativo = (PI/4);
 8001fb6:	4b8b      	ldr	r3, [pc, #556]	; (80021e4 <runCommand+0x34c>)
 8001fb8:	4a8c      	ldr	r2, [pc, #560]	; (80021ec <runCommand+0x354>)
 8001fba:	601a      	str	r2, [r3, #0]
		cos_cal = cos((PI/4)+parameter_Posicion_Robot.ang_Giro);
 8001fbc:	4b89      	ldr	r3, [pc, #548]	; (80021e4 <runCommand+0x34c>)
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fad9 	bl	8000578 <__aeabi_f2d>
 8001fc6:	a372      	add	r3, pc, #456	; (adr r3, 8002190 <runCommand+0x2f8>)
 8001fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fcc:	f7fe f976 	bl	80002bc <__adddf3>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	ec43 2b17 	vmov	d7, r2, r3
 8001fd8:	eeb0 0a47 	vmov.f32	s0, s14
 8001fdc:	eef0 0a67 	vmov.f32	s1, s15
 8001fe0:	f008 fa8e 	bl	800a500 <cos>
 8001fe4:	ec53 2b10 	vmov	r2, r3, d0
 8001fe8:	4610      	mov	r0, r2
 8001fea:	4619      	mov	r1, r3
 8001fec:	f7fe fe14 	bl	8000c18 <__aeabi_d2f>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4a7f      	ldr	r2, [pc, #508]	; (80021f0 <runCommand+0x358>)
 8001ff4:	6013      	str	r3, [r2, #0]
		sin_cal = sin((PI/4)+parameter_Posicion_Robot.ang_Giro);
 8001ff6:	4b7b      	ldr	r3, [pc, #492]	; (80021e4 <runCommand+0x34c>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fabc 	bl	8000578 <__aeabi_f2d>
 8002000:	a363      	add	r3, pc, #396	; (adr r3, 8002190 <runCommand+0x2f8>)
 8002002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002006:	f7fe f959 	bl	80002bc <__adddf3>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	ec43 2b17 	vmov	d7, r2, r3
 8002012:	eeb0 0a47 	vmov.f32	s0, s14
 8002016:	eef0 0a67 	vmov.f32	s1, s15
 800201a:	f008 fac5 	bl	800a5a8 <sin>
 800201e:	ec53 2b10 	vmov	r2, r3, d0
 8002022:	4610      	mov	r0, r2
 8002024:	4619      	mov	r1, r3
 8002026:	f7fe fdf7 	bl	8000c18 <__aeabi_d2f>
 800202a:	4603      	mov	r3, r0
 800202c:	4a71      	ldr	r2, [pc, #452]	; (80021f4 <runCommand+0x35c>)
 800202e:	6013      	str	r3, [r2, #0]
		periodo_TIMER_Count = Ts;
 8002030:	4b71      	ldr	r3, [pc, #452]	; (80021f8 <runCommand+0x360>)
 8002032:	edd3 7a00 	vldr	s15, [r3]
 8002036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800203a:	ee17 3a90 	vmov	r3, s15
 800203e:	b29a      	uxth	r2, r3
 8002040:	4b6e      	ldr	r3, [pc, #440]	; (80021fc <runCommand+0x364>)
 8002042:	801a      	strh	r2, [r3, #0]
		distance = firtsParameter;
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	b29a      	uxth	r2, r3
 8002048:	4b6d      	ldr	r3, [pc, #436]	; (8002200 <runCommand+0x368>)
 800204a:	801a      	strh	r2, [r3, #0]
		duttyInicial = secondParameter;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002056:	4b6b      	ldr	r3, [pc, #428]	; (8002204 <runCommand+0x36c>)
 8002058:	edc3 7a00 	vstr	s15, [r3]
		setpoint_dutty = thirdParameter;
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	ee07 3a90 	vmov	s15, r3
 8002062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002066:	4b68      	ldr	r3, [pc, #416]	; (8002208 <runCommand+0x370>)
 8002068:	edc3 7a00 	vstr	s15, [r3]
		setpoint_phi = 0;
 800206c:	4b67      	ldr	r3, [pc, #412]	; (800220c <runCommand+0x374>)
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
		handler_Motor_L.parametersMotor.parametersPID.u_1 = handler_Motor_R.parametersMotor.parametersPID.u_1 = duttyInicial;
 8002074:	4b63      	ldr	r3, [pc, #396]	; (8002204 <runCommand+0x36c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a65      	ldr	r2, [pc, #404]	; (8002210 <runCommand+0x378>)
 800207a:	6053      	str	r3, [r2, #4]
 800207c:	4b64      	ldr	r3, [pc, #400]	; (8002210 <runCommand+0x378>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4a64      	ldr	r2, [pc, #400]	; (8002214 <runCommand+0x37c>)
 8002082:	6053      	str	r3, [r2, #4]
		handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_1 = handler_Motor_L.parametersMotor.parametersPID.e_2 = 0;
 8002084:	4b63      	ldr	r3, [pc, #396]	; (8002214 <runCommand+0x37c>)
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
 800208c:	4b61      	ldr	r3, [pc, #388]	; (8002214 <runCommand+0x37c>)
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	4a60      	ldr	r2, [pc, #384]	; (8002214 <runCommand+0x37c>)
 8002092:	60d3      	str	r3, [r2, #12]
 8002094:	4b5f      	ldr	r3, [pc, #380]	; (8002214 <runCommand+0x37c>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4a5e      	ldr	r2, [pc, #376]	; (8002214 <runCommand+0x37c>)
 800209a:	6093      	str	r3, [r2, #8]
		handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_1 = handler_Motor_R.parametersMotor.parametersPID.e_2 = 0;
 800209c:	4b5c      	ldr	r3, [pc, #368]	; (8002210 <runCommand+0x378>)
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
 80020a4:	4b5a      	ldr	r3, [pc, #360]	; (8002210 <runCommand+0x378>)
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	4a59      	ldr	r2, [pc, #356]	; (8002210 <runCommand+0x378>)
 80020aa:	60d3      	str	r3, [r2, #12]
 80020ac:	4b58      	ldr	r3, [pc, #352]	; (8002210 <runCommand+0x378>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a57      	ldr	r2, [pc, #348]	; (8002210 <runCommand+0x378>)
 80020b2:	6093      	str	r3, [r2, #8]
		config_motor(1, periodo_TIMER_Count,  0.9234*(duttyInicial)-3, duttyInicial, frequency_PWM_Motor);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 80020b4:	4b51      	ldr	r3, [pc, #324]	; (80021fc <runCommand+0x364>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	461c      	mov	r4, r3
 80020ba:	4b52      	ldr	r3, [pc, #328]	; (8002204 <runCommand+0x36c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fa5a 	bl	8000578 <__aeabi_f2d>
 80020c4:	a334      	add	r3, pc, #208	; (adr r3, 8002198 <runCommand+0x300>)
 80020c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ca:	f7fe faad 	bl	8000628 <__aeabi_dmul>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4610      	mov	r0, r2
 80020d4:	4619      	mov	r1, r3
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	4b4f      	ldr	r3, [pc, #316]	; (8002218 <runCommand+0x380>)
 80020dc:	f7fe f8ec 	bl	80002b8 <__aeabi_dsub>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	f7fe fd96 	bl	8000c18 <__aeabi_d2f>
 80020ec:	4601      	mov	r1, r0
 80020ee:	4b45      	ldr	r3, [pc, #276]	; (8002204 <runCommand+0x36c>)
 80020f0:	edd3 7a00 	vldr	s15, [r3]
 80020f4:	4b39      	ldr	r3, [pc, #228]	; (80021dc <runCommand+0x344>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	eef0 0a67 	vmov.f32	s1, s15
 80020fe:	ee00 1a10 	vmov	s0, r1
 8002102:	4621      	mov	r1, r4
 8002104:	2001      	movs	r0, #1
 8002106:	f000 fa7d 	bl	8002604 <config_motor>
}
 800210a:	e17c      	b.n	8002406 <runCommand+0x56e>
	else if (strcmp(cmd, "const") == 0)
 800210c:	f107 031c 	add.w	r3, r7, #28
 8002110:	4942      	ldr	r1, [pc, #264]	; (800221c <runCommand+0x384>)
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe f864 	bl	80001e0 <strcmp>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	f040 8080 	bne.w	8002220 <runCommand+0x388>
			float theta=firtsParameter+Ts/2;
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	ee07 3a90 	vmov	s15, r3
 8002126:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800212a:	4b33      	ldr	r3, [pc, #204]	; (80021f8 <runCommand+0x360>)
 800212c:	edd3 6a00 	vldr	s13, [r3]
 8002130:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002134:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800213c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
			constains_calculator(&handler_Motor_L.parametersMotor.parametersPID, secondParameter, thirdParameter, theta);   //k,tau,theta
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	ee07 3a90 	vmov	s15, r3
 8002146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	ee07 3a10 	vmov	s14, r3
 8002150:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002154:	ed97 1a17 	vldr	s2, [r7, #92]	; 0x5c
 8002158:	eef0 0a47 	vmov.f32	s1, s14
 800215c:	eeb0 0a67 	vmov.f32	s0, s15
 8002160:	482c      	ldr	r0, [pc, #176]	; (8002214 <runCommand+0x37c>)
 8002162:	f000 faa1 	bl	80026a8 <constains_calculator>
			constains_calculator(&handler_Motor_R.parametersMotor.parametersPID, secondParameter, thirdParameter, theta);   //k,tau,theta
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	ee07 3a90 	vmov	s15, r3
 800216c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	ee07 3a10 	vmov	s14, r3
 8002176:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800217a:	ed97 1a17 	vldr	s2, [r7, #92]	; 0x5c
 800217e:	eef0 0a47 	vmov.f32	s1, s14
 8002182:	eeb0 0a67 	vmov.f32	s0, s15
 8002186:	4822      	ldr	r0, [pc, #136]	; (8002210 <runCommand+0x378>)
 8002188:	f000 fa8e 	bl	80026a8 <constains_calculator>
}
 800218c:	e13b      	b.n	8002406 <runCommand+0x56e>
 800218e:	bf00      	nop
 8002190:	54442d18 	.word	0x54442d18
 8002194:	3fe921fb 	.word	0x3fe921fb
 8002198:	28240b78 	.word	0x28240b78
 800219c:	3fed8c7e 	.word	0x3fed8c7e
 80021a0:	0800bb6c 	.word	0x0800bb6c
 80021a4:	0800bb7c 	.word	0x0800bb7c
 80021a8:	0800bb84 	.word	0x0800bb84
 80021ac:	20000268 	.word	0x20000268
 80021b0:	0800bb94 	.word	0x0800bb94
 80021b4:	0800bbc0 	.word	0x0800bbc0
 80021b8:	0800bc10 	.word	0x0800bc10
 80021bc:	0800bc68 	.word	0x0800bc68
 80021c0:	0800bcb0 	.word	0x0800bcb0
 80021c4:	0800bd10 	.word	0x0800bd10
 80021c8:	0800bd74 	.word	0x0800bd74
 80021cc:	0800bdac 	.word	0x0800bdac
 80021d0:	0800bde0 	.word	0x0800bde0
 80021d4:	0800be30 	.word	0x0800be30
 80021d8:	000186a0 	.word	0x000186a0
 80021dc:	2000000a 	.word	0x2000000a
 80021e0:	0800be3c 	.word	0x0800be3c
 80021e4:	200003f4 	.word	0x200003f4
 80021e8:	2000041c 	.word	0x2000041c
 80021ec:	3f490fdb 	.word	0x3f490fdb
 80021f0:	20000414 	.word	0x20000414
 80021f4:	20000418 	.word	0x20000418
 80021f8:	20000004 	.word	0x20000004
 80021fc:	20000008 	.word	0x20000008
 8002200:	2000044a 	.word	0x2000044a
 8002204:	20000454 	.word	0x20000454
 8002208:	200003f0 	.word	0x200003f0
 800220c:	200003ec 	.word	0x200003ec
 8002210:	200002e4 	.word	0x200002e4
 8002214:	20000360 	.word	0x20000360
 8002218:	40080000 	.word	0x40080000
 800221c:	0800be44 	.word	0x0800be44
	else if (strcmp(cmd, "equation") == 0)
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	497c      	ldr	r1, [pc, #496]	; (8002418 <runCommand+0x580>)
 8002226:	4618      	mov	r0, r3
 8002228:	f7fd ffda 	bl	80001e0 <strcmp>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 80e9 	beq.w	8002406 <runCommand+0x56e>
	else if (strcmp(cmd, "turn") == 0)
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	4978      	ldr	r1, [pc, #480]	; (800241c <runCommand+0x584>)
 800223a:	4618      	mov	r0, r3
 800223c:	f7fd ffd0 	bl	80001e0 <strcmp>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d162      	bne.n	800230c <runCommand+0x474>
		flag_turn = secondParameter;
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4b75      	ldr	r3, [pc, #468]	; (8002420 <runCommand+0x588>)
 800224c:	701a      	strb	r2, [r3, #0]
		if(flag_turn==1)
 800224e:	4b74      	ldr	r3, [pc, #464]	; (8002420 <runCommand+0x588>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d114      	bne.n	8002280 <runCommand+0x3e8>
			limit_count_turn = (b/DR)*((Ce*firtsParameter)/(2*180));
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	4a72      	ldr	r2, [pc, #456]	; (8002424 <runCommand+0x58c>)
 800225a:	fb82 1203 	smull	r1, r2, r2, r3
 800225e:	1052      	asrs	r2, r2, #1
 8002260:	17db      	asrs	r3, r3, #31
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	b29b      	uxth	r3, r3
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	b29a      	uxth	r2, r3
 800226a:	4b6f      	ldr	r3, [pc, #444]	; (8002428 <runCommand+0x590>)
 800226c:	801a      	strh	r2, [r3, #0]
			handler_Motor_Execute = &handler_Motor_R;
 800226e:	4b6f      	ldr	r3, [pc, #444]	; (800242c <runCommand+0x594>)
 8002270:	4a6f      	ldr	r2, [pc, #444]	; (8002430 <runCommand+0x598>)
 8002272:	601a      	str	r2, [r3, #0]
			updateDirMotor(handler_Motor_Execute);
 8002274:	4b6d      	ldr	r3, [pc, #436]	; (800242c <runCommand+0x594>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe ff24 	bl	80010c6 <updateDirMotor>
 800227e:	e013      	b.n	80022a8 <runCommand+0x410>
			limit_count_turn = (b/DL)*((Ce*firtsParameter)/(2*180));
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	4a68      	ldr	r2, [pc, #416]	; (8002424 <runCommand+0x58c>)
 8002284:	fb82 1203 	smull	r1, r2, r2, r3
 8002288:	1052      	asrs	r2, r2, #1
 800228a:	17db      	asrs	r3, r3, #31
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	b29b      	uxth	r3, r3
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	4b64      	ldr	r3, [pc, #400]	; (8002428 <runCommand+0x590>)
 8002296:	801a      	strh	r2, [r3, #0]
			handler_Motor_Execute = &handler_Motor_L;
 8002298:	4b64      	ldr	r3, [pc, #400]	; (800242c <runCommand+0x594>)
 800229a:	4a66      	ldr	r2, [pc, #408]	; (8002434 <runCommand+0x59c>)
 800229c:	601a      	str	r2, [r3, #0]
			updateDirMotor(handler_Motor_Execute);
 800229e:	4b63      	ldr	r3, [pc, #396]	; (800242c <runCommand+0x594>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe ff0f 	bl	80010c6 <updateDirMotor>
		config_motor(2, periodo_TIMER_Count, 0.9234*((float) thirdParameter)-3, thirdParameter, frequency_PWM_Motor);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 80022a8:	4b63      	ldr	r3, [pc, #396]	; (8002438 <runCommand+0x5a0>)
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	461c      	mov	r4, r3
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	ee07 3a90 	vmov	s15, r3
 80022b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b8:	ee17 0a90 	vmov	r0, s15
 80022bc:	f7fe f95c 	bl	8000578 <__aeabi_f2d>
 80022c0:	a353      	add	r3, pc, #332	; (adr r3, 8002410 <runCommand+0x578>)
 80022c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c6:	f7fe f9af 	bl	8000628 <__aeabi_dmul>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4610      	mov	r0, r2
 80022d0:	4619      	mov	r1, r3
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	4b59      	ldr	r3, [pc, #356]	; (800243c <runCommand+0x5a4>)
 80022d8:	f7fd ffee 	bl	80002b8 <__aeabi_dsub>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4610      	mov	r0, r2
 80022e2:	4619      	mov	r1, r3
 80022e4:	f7fe fc98 	bl	8000c18 <__aeabi_d2f>
 80022e8:	4601      	mov	r1, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	ee07 3a90 	vmov	s15, r3
 80022f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022f4:	4b52      	ldr	r3, [pc, #328]	; (8002440 <runCommand+0x5a8>)
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	eef0 0a67 	vmov.f32	s1, s15
 80022fe:	ee00 1a10 	vmov	s0, r1
 8002302:	4621      	mov	r1, r4
 8002304:	2002      	movs	r0, #2
 8002306:	f000 f97d 	bl	8002604 <config_motor>
}
 800230a:	e07c      	b.n	8002406 <runCommand+0x56e>
	else if (strcmp(cmd, "start") == 0)
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	494c      	ldr	r1, [pc, #304]	; (8002444 <runCommand+0x5ac>)
 8002312:	4618      	mov	r0, r3
 8002314:	f7fd ff64 	bl	80001e0 <strcmp>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d12a      	bne.n	8002374 <runCommand+0x4dc>
		periodo_TIMER_Count = firtsParameter;
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	b29a      	uxth	r2, r3
 8002322:	4b45      	ldr	r3, [pc, #276]	; (8002438 <runCommand+0x5a0>)
 8002324:	801a      	strh	r2, [r3, #0]
		config_motor(3, periodo_TIMER_Count,  (secondParameter/100), (thirdParameter/100), forthParameter);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8002326:	4b44      	ldr	r3, [pc, #272]	; (8002438 <runCommand+0x5a0>)
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	4619      	mov	r1, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	4a46      	ldr	r2, [pc, #280]	; (8002448 <runCommand+0x5b0>)
 8002330:	fb82 0203 	smull	r0, r2, r2, r3
 8002334:	1152      	asrs	r2, r2, #5
 8002336:	17db      	asrs	r3, r3, #31
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	ee07 3a90 	vmov	s15, r3
 800233e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4a40      	ldr	r2, [pc, #256]	; (8002448 <runCommand+0x5b0>)
 8002346:	fb82 0203 	smull	r0, r2, r2, r3
 800234a:	1152      	asrs	r2, r2, #5
 800234c:	17db      	asrs	r3, r3, #31
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	ee07 3a10 	vmov	s14, r3
 8002354:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	461a      	mov	r2, r3
 800235c:	eef0 0a47 	vmov.f32	s1, s14
 8002360:	eeb0 0a67 	vmov.f32	s0, s15
 8002364:	2003      	movs	r0, #3
 8002366:	f000 f94d 	bl	8002604 <config_motor>
		writeMsgForTXE(&handler_USART_USB, "Inicio conteo... \n");
 800236a:	4938      	ldr	r1, [pc, #224]	; (800244c <runCommand+0x5b4>)
 800236c:	4838      	ldr	r0, [pc, #224]	; (8002450 <runCommand+0x5b8>)
 800236e:	f002 fde1 	bl	8004f34 <writeMsgForTXE>
}
 8002372:	e048      	b.n	8002406 <runCommand+0x56e>
	else if (strcmp(cmd, "reaction") == 0)
 8002374:	f107 031c 	add.w	r3, r7, #28
 8002378:	4936      	ldr	r1, [pc, #216]	; (8002454 <runCommand+0x5bc>)
 800237a:	4618      	mov	r0, r3
 800237c:	f7fd ff30 	bl	80001e0 <strcmp>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d12a      	bne.n	80023dc <runCommand+0x544>
		periodo_TIMER_Count = firtsParameter;
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	b29a      	uxth	r2, r3
 800238a:	4b2b      	ldr	r3, [pc, #172]	; (8002438 <runCommand+0x5a0>)
 800238c:	801a      	strh	r2, [r3, #0]
		config_motor(4, periodo_TIMER_Count, (secondParameter/100), (secondParameter/100), thirdParameter);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 800238e:	4b2a      	ldr	r3, [pc, #168]	; (8002438 <runCommand+0x5a0>)
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	4619      	mov	r1, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	4a2c      	ldr	r2, [pc, #176]	; (8002448 <runCommand+0x5b0>)
 8002398:	fb82 0203 	smull	r0, r2, r2, r3
 800239c:	1152      	asrs	r2, r2, #5
 800239e:	17db      	asrs	r3, r3, #31
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	ee07 3a90 	vmov	s15, r3
 80023a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	4a26      	ldr	r2, [pc, #152]	; (8002448 <runCommand+0x5b0>)
 80023ae:	fb82 0203 	smull	r0, r2, r2, r3
 80023b2:	1152      	asrs	r2, r2, #5
 80023b4:	17db      	asrs	r3, r3, #31
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	ee07 3a10 	vmov	s14, r3
 80023bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	461a      	mov	r2, r3
 80023c4:	eef0 0a47 	vmov.f32	s1, s14
 80023c8:	eeb0 0a67 	vmov.f32	s0, s15
 80023cc:	2004      	movs	r0, #4
 80023ce:	f000 f919 	bl	8002604 <config_motor>
		writeMsgForTXE(&handler_USART_USB, "Inicio conteo... \n");
 80023d2:	491e      	ldr	r1, [pc, #120]	; (800244c <runCommand+0x5b4>)
 80023d4:	481e      	ldr	r0, [pc, #120]	; (8002450 <runCommand+0x5b8>)
 80023d6:	f002 fdad 	bl	8004f34 <writeMsgForTXE>
}
 80023da:	e014      	b.n	8002406 <runCommand+0x56e>
	else if (strcmp(cmd, "stop") == 0)
 80023dc:	f107 031c 	add.w	r3, r7, #28
 80023e0:	491d      	ldr	r1, [pc, #116]	; (8002458 <runCommand+0x5c0>)
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fd fefc 	bl	80001e0 <strcmp>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d107      	bne.n	80023fe <runCommand+0x566>
		status_motor(RESET);
 80023ee:	2000      	movs	r0, #0
 80023f0:	f000 f88c 	bl	800250c <status_motor>
		writeMsgForTXE(&handler_USART_USB, "Estudio finalizado \n");
 80023f4:	4919      	ldr	r1, [pc, #100]	; (800245c <runCommand+0x5c4>)
 80023f6:	4816      	ldr	r0, [pc, #88]	; (8002450 <runCommand+0x5b8>)
 80023f8:	f002 fd9c 	bl	8004f34 <writeMsgForTXE>
}
 80023fc:	e003      	b.n	8002406 <runCommand+0x56e>
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
 80023fe:	4918      	ldr	r1, [pc, #96]	; (8002460 <runCommand+0x5c8>)
 8002400:	4813      	ldr	r0, [pc, #76]	; (8002450 <runCommand+0x5b8>)
 8002402:	f002 fd97 	bl	8004f34 <writeMsgForTXE>
}
 8002406:	bf00      	nop
 8002408:	3764      	adds	r7, #100	; 0x64
 800240a:	46bd      	mov	sp, r7
 800240c:	bd90      	pop	{r4, r7, pc}
 800240e:	bf00      	nop
 8002410:	28240b78 	.word	0x28240b78
 8002414:	3fed8c7e 	.word	0x3fed8c7e
 8002418:	0800be4c 	.word	0x0800be4c
 800241c:	0800be58 	.word	0x0800be58
 8002420:	20000445 	.word	0x20000445
 8002424:	66666667 	.word	0x66666667
 8002428:	20000448 	.word	0x20000448
 800242c:	20000440 	.word	0x20000440
 8002430:	200002e4 	.word	0x200002e4
 8002434:	20000360 	.word	0x20000360
 8002438:	20000008 	.word	0x20000008
 800243c:	40080000 	.word	0x40080000
 8002440:	2000000a 	.word	0x2000000a
 8002444:	0800be60 	.word	0x0800be60
 8002448:	51eb851f 	.word	0x51eb851f
 800244c:	0800be68 	.word	0x0800be68
 8002450:	20000268 	.word	0x20000268
 8002454:	0800be7c 	.word	0x0800be7c
 8002458:	0800be88 	.word	0x0800be88
 800245c:	0800be90 	.word	0x0800be90
 8002460:	0800bea8 	.word	0x0800bea8

08002464 <PID>:
//----------------------------Inicio de la definicion de las funciones-----------------------------------------


//--------------------PID----------------------
void PID(Parameters_PID_t *ptrPIDHandler, float setpoint, float measure)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002470:	edc7 0a01 	vstr	s1, [r7, #4]
	//Calculo del error
	ptrPIDHandler->e = setpoint-measure;
 8002474:	ed97 7a02 	vldr	s14, [r7, #8]
 8002478:	edd7 7a01 	vldr	s15, [r7, #4]
 800247c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	edc3 7a02 	vstr	s15, [r3, #8]
    // Controle PID
	float p0 =  ptrPIDHandler->q0*ptrPIDHandler->e;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	ed93 7a05 	vldr	s14, [r3, #20]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002496:	edc7 7a07 	vstr	s15, [r7, #28]
	float p1 =  ptrPIDHandler->q1*ptrPIDHandler->e_1;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	ed93 7a06 	vldr	s14, [r3, #24]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80024a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024aa:	edc7 7a06 	vstr	s15, [r7, #24]
	float p2 =  ptrPIDHandler->q2*ptrPIDHandler->e_2;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	ed93 7a07 	vldr	s14, [r3, #28]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80024ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024be:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->u = ptrPIDHandler->u_1 + p0 + p1 + p2;        //Ley del controlador PID discreto
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80024c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80024cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80024d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80024dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	edc3 7a00 	vstr	s15, [r3]

     //Retorno a los valores reales
	ptrPIDHandler->e_2 = ptrPIDHandler->e_1;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	611a      	str	r2, [r3, #16]
	ptrPIDHandler->e_1 = ptrPIDHandler->e;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	60da      	str	r2, [r3, #12]
	ptrPIDHandler->u_1 = ptrPIDHandler->u;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	605a      	str	r2, [r3, #4]
}
 80024fe:	bf00      	nop
 8002500:	3724      	adds	r7, #36	; 0x24
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <status_motor>:
    //Actualizamoe el valor del dutty
    updateDuttyMotor(ptrMotorHandler, port_dutty);
}

void status_motor(uint8_t status)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
	if(status == 1)
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d138      	bne.n	800258e <status_motor+0x82>
	{
		//Activamos el motor
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_ENABLE);
 800251c:	4b35      	ldr	r3, [pc, #212]	; (80025f4 <status_motor+0xe8>)
 800251e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002520:	2101      	movs	r1, #1
 8002522:	4618      	mov	r0, r3
 8002524:	f002 f8fe 	bl	8004724 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_ENABLE);
 8002528:	4b33      	ldr	r3, [pc, #204]	; (80025f8 <status_motor+0xec>)
 800252a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252c:	2101      	movs	r1, #1
 800252e:	4618      	mov	r0, r3
 8002530:	f002 f8f8 	bl	8004724 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&SET);
 8002534:	4b2f      	ldr	r3, [pc, #188]	; (80025f4 <status_motor+0xe8>)
 8002536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002538:	4b2e      	ldr	r3, [pc, #184]	; (80025f4 <status_motor+0xe8>)
 800253a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	b2db      	uxtb	r3, r3
 8002544:	4619      	mov	r1, r3
 8002546:	4610      	mov	r0, r2
 8002548:	f001 fe1c 	bl	8004184 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&SET);
 800254c:	4b2a      	ldr	r3, [pc, #168]	; (80025f8 <status_motor+0xec>)
 800254e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002550:	4b29      	ldr	r3, [pc, #164]	; (80025f8 <status_motor+0xec>)
 8002552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	b2db      	uxtb	r3, r3
 800255c:	4619      	mov	r1, r3
 800255e:	4610      	mov	r0, r2
 8002560:	f001 fe10 	bl	8004184 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, RESET);
 8002564:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <status_motor+0xe8>)
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	2100      	movs	r1, #0
 800256a:	4618      	mov	r0, r3
 800256c:	f001 fe0a 	bl	8004184 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, RESET);
 8002570:	4b21      	ldr	r3, [pc, #132]	; (80025f8 <status_motor+0xec>)
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f001 fe04 	bl	8004184 <GPIO_writePin>
		//Activamos la interrupcion
		if(flag_motor!=2)
 800257c:	4b1f      	ldr	r3, [pc, #124]	; (80025fc <status_motor+0xf0>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d033      	beq.n	80025ec <status_motor+0xe0>
		{
			statusiInterruptionTimer(&handler_TIMER_Count, INTERRUPTION_ENABLE);
 8002584:	2101      	movs	r1, #1
 8002586:	481e      	ldr	r0, [pc, #120]	; (8002600 <status_motor+0xf4>)
 8002588:	f000 fbba 	bl	8002d00 <statusiInterruptionTimer>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
		//Reiniciamos Bandera
		flag_motor = 0;
	}
}
 800258c:	e02e      	b.n	80025ec <status_motor+0xe0>
		if(flag_motor!=2)
 800258e:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <status_motor+0xf0>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d003      	beq.n	800259e <status_motor+0x92>
			statusiInterruptionTimer(&handler_TIMER_Count, INTERRUPTION_DISABLE);
 8002596:	2100      	movs	r1, #0
 8002598:	4819      	ldr	r0, [pc, #100]	; (8002600 <status_motor+0xf4>)
 800259a:	f000 fbb1 	bl	8002d00 <statusiInterruptionTimer>
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_DISABLE);
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <status_motor+0xe8>)
 80025a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a2:	2100      	movs	r1, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f002 f8bd 	bl	8004724 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_DISABLE);
 80025aa:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <status_motor+0xec>)
 80025ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ae:	2100      	movs	r1, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f002 f8b7 	bl	8004724 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&RESET);
 80025b6:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <status_motor+0xe8>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f001 fde1 	bl	8004184 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&RESET);
 80025c2:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <status_motor+0xec>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f001 fddb 	bl	8004184 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <status_motor+0xe8>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	2101      	movs	r1, #1
 80025d4:	4618      	mov	r0, r3
 80025d6:	f001 fdd5 	bl	8004184 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <status_motor+0xec>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	2101      	movs	r1, #1
 80025e0:	4618      	mov	r0, r3
 80025e2:	f001 fdcf 	bl	8004184 <GPIO_writePin>
		flag_motor = 0;
 80025e6:	4b05      	ldr	r3, [pc, #20]	; (80025fc <status_motor+0xf0>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20000360 	.word	0x20000360
 80025f8:	200002e4 	.word	0x200002e4
 80025fc:	20000444 	.word	0x20000444
 8002600:	200003bc 	.word	0x200003bc

08002604 <config_motor>:

//Funcion para al configuracion de los motores
void config_motor(uint8_t status, int firth, float second, float third, int forth)  //Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	6139      	str	r1, [r7, #16]
 800260e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002612:	edc7 0a02 	vstr	s1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
 8002618:	75fb      	strb	r3, [r7, #23]
	//Actualizacion de la frecuencia del timer
	updateFrequencyTimer(&handler_TIMER_Count, firth);
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	b29b      	uxth	r3, r3
 800261e:	4619      	mov	r1, r3
 8002620:	4819      	ldr	r0, [pc, #100]	; (8002688 <config_motor+0x84>)
 8002622:	f000 fb8d 	bl	8002d40 <updateFrequencyTimer>
	//Establecer valores
	handler_Motor_R.parametersMotor.count = 0;
 8002626:	4b19      	ldr	r3, [pc, #100]	; (800268c <config_motor+0x88>)
 8002628:	2200      	movs	r2, #0
 800262a:	841a      	strh	r2, [r3, #32]
	handler_Motor_L.parametersMotor.count = 0;
 800262c:	4b18      	ldr	r3, [pc, #96]	; (8002690 <config_motor+0x8c>)
 800262e:	2200      	movs	r2, #0
 8002630:	841a      	strh	r2, [r3, #32]
	handler_Motor_R.parametersMotor.countCotinuous = 0;
 8002632:	4b16      	ldr	r3, [pc, #88]	; (800268c <config_motor+0x88>)
 8002634:	2200      	movs	r2, #0
 8002636:	625a      	str	r2, [r3, #36]	; 0x24
	handler_Motor_L.parametersMotor.countCotinuous = 0;
 8002638:	4b15      	ldr	r3, [pc, #84]	; (8002690 <config_motor+0x8c>)
 800263a:	2200      	movs	r2, #0
 800263c:	625a      	str	r2, [r3, #36]	; 0x24
	//Establecemos valroes iniciales
	//timeBackR = timeBackL = getTicksUs();
	count_time = 0;
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <config_motor+0x90>)
 8002640:	2200      	movs	r2, #0
 8002642:	801a      	strh	r2, [r3, #0]
	//Actualizamos el valor del dutty y frecuencia
	value_period = 100000/forth;
 8002644:	4a14      	ldr	r2, [pc, #80]	; (8002698 <config_motor+0x94>)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	fb92 f3f3 	sdiv	r3, r2, r3
 800264c:	b29a      	uxth	r2, r3
 800264e:	4b13      	ldr	r3, [pc, #76]	; (800269c <config_motor+0x98>)
 8002650:	801a      	strh	r2, [r3, #0]
	updateFrequencyTimer(&handler_TIMER_Motor, value_period);
 8002652:	4b12      	ldr	r3, [pc, #72]	; (800269c <config_motor+0x98>)
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	4619      	mov	r1, r3
 8002658:	4811      	ldr	r0, [pc, #68]	; (80026a0 <config_motor+0x9c>)
 800265a:	f000 fb71 	bl	8002d40 <updateFrequencyTimer>
	updateDuttyMotor(&handler_Motor_R, third);
 800265e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002662:	480a      	ldr	r0, [pc, #40]	; (800268c <config_motor+0x88>)
 8002664:	f7fe fd18 	bl	8001098 <updateDuttyMotor>
	updateDuttyMotor(&handler_Motor_L, second);
 8002668:	ed97 0a03 	vldr	s0, [r7, #12]
 800266c:	4808      	ldr	r0, [pc, #32]	; (8002690 <config_motor+0x8c>)
 800266e:	f7fe fd13 	bl	8001098 <updateDuttyMotor>
	//Cambio valor bandera
	flag_motor=status;
 8002672:	4a0c      	ldr	r2, [pc, #48]	; (80026a4 <config_motor+0xa0>)
 8002674:	7dfb      	ldrb	r3, [r7, #23]
 8002676:	7013      	strb	r3, [r2, #0]
	//Iniciamos el study
	status_motor(SET);
 8002678:	2001      	movs	r0, #1
 800267a:	f7ff ff47 	bl	800250c <status_motor>
}
 800267e:	bf00      	nop
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	200003bc 	.word	0x200003bc
 800268c:	200002e4 	.word	0x200002e4
 8002690:	20000360 	.word	0x20000360
 8002694:	20000446 	.word	0x20000446
 8002698:	000186a0 	.word	0x000186a0
 800269c:	20000002 	.word	0x20000002
 80026a0:	200003ac 	.word	0x200003ac
 80026a4:	20000444 	.word	0x20000444

080026a8 <constains_calculator>:


void constains_calculator(Parameters_PID_t *ptrPIDHandler,float k, float tau, float theta)   //k,tau,theta
{
 80026a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026ac:	b088      	sub	sp, #32
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	60f8      	str	r0, [r7, #12]
 80026b2:	ed87 0a02 	vstr	s0, [r7, #8]
 80026b6:	edc7 0a01 	vstr	s1, [r7, #4]
 80026ba:	ed87 1a00 	vstr	s2, [r7]
	   //Calculo de constantes de porcentaje, integracion y derivacion por metodo de Ziegler y Nichols
	   float kp=(1.2*tau)/(k*theta);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7fd ff5a 	bl	8000578 <__aeabi_f2d>
 80026c4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80026c8:	4b6d      	ldr	r3, [pc, #436]	; (8002880 <constains_calculator+0x1d8>)
 80026ca:	f7fd ffad 	bl	8000628 <__aeabi_dmul>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4614      	mov	r4, r2
 80026d4:	461d      	mov	r5, r3
 80026d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80026da:	edd7 7a00 	vldr	s15, [r7]
 80026de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e2:	ee17 0a90 	vmov	r0, s15
 80026e6:	f7fd ff47 	bl	8000578 <__aeabi_f2d>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4620      	mov	r0, r4
 80026f0:	4629      	mov	r1, r5
 80026f2:	f7fe f8c3 	bl	800087c <__aeabi_ddiv>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4610      	mov	r0, r2
 80026fc:	4619      	mov	r1, r3
 80026fe:	f7fe fa8b 	bl	8000c18 <__aeabi_d2f>
 8002702:	4603      	mov	r3, r0
 8002704:	61fb      	str	r3, [r7, #28]
	   float ti=2.0*theta;
 8002706:	edd7 7a00 	vldr	s15, [r7]
 800270a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800270e:	edc7 7a06 	vstr	s15, [r7, #24]
	   float td=0.5*theta;
 8002712:	edd7 7a00 	vldr	s15, [r7]
 8002716:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800271a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800271e:	edc7 7a05 	vstr	s15, [r7, #20]
	   //Calculo do controle PID digital
	   ptrPIDHandler->q0 = kp*(1+Ts/(2.0*ti)+td/Ts);
 8002722:	69f8      	ldr	r0, [r7, #28]
 8002724:	f7fd ff28 	bl	8000578 <__aeabi_f2d>
 8002728:	4604      	mov	r4, r0
 800272a:	460d      	mov	r5, r1
 800272c:	4b55      	ldr	r3, [pc, #340]	; (8002884 <constains_calculator+0x1dc>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7fd ff21 	bl	8000578 <__aeabi_f2d>
 8002736:	4680      	mov	r8, r0
 8002738:	4689      	mov	r9, r1
 800273a:	69b8      	ldr	r0, [r7, #24]
 800273c:	f7fd ff1c 	bl	8000578 <__aeabi_f2d>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	f7fd fdba 	bl	80002bc <__adddf3>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4640      	mov	r0, r8
 800274e:	4649      	mov	r1, r9
 8002750:	f7fe f894 	bl	800087c <__aeabi_ddiv>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	4b49      	ldr	r3, [pc, #292]	; (8002888 <constains_calculator+0x1e0>)
 8002762:	f7fd fdab 	bl	80002bc <__adddf3>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4690      	mov	r8, r2
 800276c:	4699      	mov	r9, r3
 800276e:	4b45      	ldr	r3, [pc, #276]	; (8002884 <constains_calculator+0x1dc>)
 8002770:	edd3 7a00 	vldr	s15, [r3]
 8002774:	ed97 7a05 	vldr	s14, [r7, #20]
 8002778:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800277c:	ee16 0a90 	vmov	r0, s13
 8002780:	f7fd fefa 	bl	8000578 <__aeabi_f2d>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4640      	mov	r0, r8
 800278a:	4649      	mov	r1, r9
 800278c:	f7fd fd96 	bl	80002bc <__adddf3>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4620      	mov	r0, r4
 8002796:	4629      	mov	r1, r5
 8002798:	f7fd ff46 	bl	8000628 <__aeabi_dmul>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4610      	mov	r0, r2
 80027a2:	4619      	mov	r1, r3
 80027a4:	f7fe fa38 	bl	8000c18 <__aeabi_d2f>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	615a      	str	r2, [r3, #20]
	   ptrPIDHandler->q1 = -kp*(1-Ts/(2.0*ti)+(2.0*td)/Ts);
 80027ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80027b2:	eef1 7a67 	vneg.f32	s15, s15
 80027b6:	ee17 3a90 	vmov	r3, s15
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fd fedc 	bl	8000578 <__aeabi_f2d>
 80027c0:	4604      	mov	r4, r0
 80027c2:	460d      	mov	r5, r1
 80027c4:	4b2f      	ldr	r3, [pc, #188]	; (8002884 <constains_calculator+0x1dc>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fd fed5 	bl	8000578 <__aeabi_f2d>
 80027ce:	4680      	mov	r8, r0
 80027d0:	4689      	mov	r9, r1
 80027d2:	69b8      	ldr	r0, [r7, #24]
 80027d4:	f7fd fed0 	bl	8000578 <__aeabi_f2d>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	f7fd fd6e 	bl	80002bc <__adddf3>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4640      	mov	r0, r8
 80027e6:	4649      	mov	r1, r9
 80027e8:	f7fe f848 	bl	800087c <__aeabi_ddiv>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	f04f 0000 	mov.w	r0, #0
 80027f4:	4924      	ldr	r1, [pc, #144]	; (8002888 <constains_calculator+0x1e0>)
 80027f6:	f7fd fd5f 	bl	80002b8 <__aeabi_dsub>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4690      	mov	r8, r2
 8002800:	4699      	mov	r9, r3
 8002802:	6978      	ldr	r0, [r7, #20]
 8002804:	f7fd feb8 	bl	8000578 <__aeabi_f2d>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	f7fd fd56 	bl	80002bc <__adddf3>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4692      	mov	sl, r2
 8002816:	469b      	mov	fp, r3
 8002818:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <constains_calculator+0x1dc>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7fd feab 	bl	8000578 <__aeabi_f2d>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4650      	mov	r0, sl
 8002828:	4659      	mov	r1, fp
 800282a:	f7fe f827 	bl	800087c <__aeabi_ddiv>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4640      	mov	r0, r8
 8002834:	4649      	mov	r1, r9
 8002836:	f7fd fd41 	bl	80002bc <__adddf3>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4620      	mov	r0, r4
 8002840:	4629      	mov	r1, r5
 8002842:	f7fd fef1 	bl	8000628 <__aeabi_dmul>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4610      	mov	r0, r2
 800284c:	4619      	mov	r1, r3
 800284e:	f7fe f9e3 	bl	8000c18 <__aeabi_d2f>
 8002852:	4602      	mov	r2, r0
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	619a      	str	r2, [r3, #24]
	   ptrPIDHandler->q2 = (kp*td)/Ts;
 8002858:	ed97 7a07 	vldr	s14, [r7, #28]
 800285c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002860:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002864:	4b07      	ldr	r3, [pc, #28]	; (8002884 <constains_calculator+0x1dc>)
 8002866:	ed93 7a00 	vldr	s14, [r3]
 800286a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8002874:	bf00      	nop
 8002876:	3720      	adds	r7, #32
 8002878:	46bd      	mov	sp, r7
 800287a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800287e:	bf00      	nop
 8002880:	3ff33333 	.word	0x3ff33333
 8002884:	20000004 	.word	0x20000004
 8002888:	3ff00000 	.word	0x3ff00000

0800288c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800288c:	480d      	ldr	r0, [pc, #52]	; (80028c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800288e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002890:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002894:	480c      	ldr	r0, [pc, #48]	; (80028c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002896:	490d      	ldr	r1, [pc, #52]	; (80028cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002898:	4a0d      	ldr	r2, [pc, #52]	; (80028d0 <LoopForever+0xe>)
  movs r3, #0
 800289a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800289c:	e002      	b.n	80028a4 <LoopCopyDataInit>

0800289e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800289e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028a2:	3304      	adds	r3, #4

080028a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028a8:	d3f9      	bcc.n	800289e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028aa:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028ac:	4c0a      	ldr	r4, [pc, #40]	; (80028d8 <LoopForever+0x16>)
  movs r3, #0
 80028ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028b0:	e001      	b.n	80028b6 <LoopFillZerobss>

080028b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028b4:	3204      	adds	r2, #4

080028b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028b8:	d3fb      	bcc.n	80028b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80028ba:	f002 fd49 	bl	8005350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028be:	f7fe fc31 	bl	8001124 <main>

080028c2 <LoopForever>:

LoopForever:
    b LoopForever
 80028c2:	e7fe      	b.n	80028c2 <LoopForever>
  ldr   r0, =_estack
 80028c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028cc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80028d0:	0800c5e0 	.word	0x0800c5e0
  ldr r2, =_sbss
 80028d4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80028d8:	20000d10 	.word	0x20000d10

080028dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028dc:	e7fe      	b.n	80028dc <ADC_IRQHandler>

080028de <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
	return 1;
 80028e2:	2301      	movs	r3, #1
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <_kill>:

int _kill(int pid, int sig)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028f8:	f002 fd24 	bl	8005344 <__errno>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2216      	movs	r2, #22
 8002900:	601a      	str	r2, [r3, #0]
	return -1;
 8002902:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <_exit>:

void _exit (int status)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002916:	f04f 31ff 	mov.w	r1, #4294967295
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff ffe7 	bl	80028ee <_kill>
	while (1) {}		/* Make sure we hang here */
 8002920:	e7fe      	b.n	8002920 <_exit+0x12>

08002922 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b086      	sub	sp, #24
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	e00a      	b.n	800294a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002934:	f3af 8000 	nop.w
 8002938:	4601      	mov	r1, r0
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	60ba      	str	r2, [r7, #8]
 8002940:	b2ca      	uxtb	r2, r1
 8002942:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	3301      	adds	r3, #1
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	429a      	cmp	r2, r3
 8002950:	dbf0      	blt.n	8002934 <_read+0x12>
	}

return len;
 8002952:	687b      	ldr	r3, [r7, #4]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	e009      	b.n	8002982 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	60ba      	str	r2, [r7, #8]
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	3301      	adds	r3, #1
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	429a      	cmp	r2, r3
 8002988:	dbf1      	blt.n	800296e <_write+0x12>
	}
	return len;
 800298a:	687b      	ldr	r3, [r7, #4]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <_close>:

int _close(int file)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
	return -1;
 800299c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029bc:	605a      	str	r2, [r3, #4]
	return 0;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <_isatty>:

int _isatty(int file)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
	return 1;
 80029d4:	2301      	movs	r3, #1
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b085      	sub	sp, #20
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
	return 0;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a04:	4a14      	ldr	r2, [pc, #80]	; (8002a58 <_sbrk+0x5c>)
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <_sbrk+0x60>)
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a10:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <_sbrk+0x64>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d102      	bne.n	8002a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a18:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <_sbrk+0x64>)
 8002a1a:	4a12      	ldr	r2, [pc, #72]	; (8002a64 <_sbrk+0x68>)
 8002a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a1e:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <_sbrk+0x64>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d207      	bcs.n	8002a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a2c:	f002 fc8a 	bl	8005344 <__errno>
 8002a30:	4603      	mov	r3, r0
 8002a32:	220c      	movs	r2, #12
 8002a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a36:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3a:	e009      	b.n	8002a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <_sbrk+0x64>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a42:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <_sbrk+0x64>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	4a05      	ldr	r2, [pc, #20]	; (8002a60 <_sbrk+0x64>)
 8002a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20020000 	.word	0x20020000
 8002a5c:	00000400 	.word	0x00000400
 8002a60:	200004a0 	.word	0x200004a0
 8002a64:	20000d10 	.word	0x20000d10

08002a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	db0b      	blt.n	8002a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	f003 021f 	and.w	r2, r3, #31
 8002a80:	4907      	ldr	r1, [pc, #28]	; (8002aa0 <__NVIC_EnableIRQ+0x38>)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	2001      	movs	r0, #1
 8002a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	e000e100 	.word	0xe000e100

08002aa4 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab4:	d10a      	bne.n	8002acc <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002ab6:	4b62      	ldr	r3, [pc, #392]	; (8002c40 <BasicTimer_Config+0x19c>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a61      	ldr	r2, [pc, #388]	; (8002c40 <BasicTimer_Config+0x19c>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	4a5f      	ldr	r2, [pc, #380]	; (8002c44 <BasicTimer_Config+0x1a0>)
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e02e      	b.n	8002b2a <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4a5d      	ldr	r2, [pc, #372]	; (8002c48 <BasicTimer_Config+0x1a4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d10a      	bne.n	8002aec <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002ad6:	4b5a      	ldr	r3, [pc, #360]	; (8002c40 <BasicTimer_Config+0x19c>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	4a59      	ldr	r2, [pc, #356]	; (8002c40 <BasicTimer_Config+0x19c>)
 8002adc:	f043 0302 	orr.w	r3, r3, #2
 8002ae0:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	4a59      	ldr	r2, [pc, #356]	; (8002c4c <BasicTimer_Config+0x1a8>)
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	e01e      	b.n	8002b2a <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4a57      	ldr	r2, [pc, #348]	; (8002c50 <BasicTimer_Config+0x1ac>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d10a      	bne.n	8002b0c <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002af6:	4b52      	ldr	r3, [pc, #328]	; (8002c40 <BasicTimer_Config+0x19c>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	4a51      	ldr	r2, [pc, #324]	; (8002c40 <BasicTimer_Config+0x19c>)
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	4a53      	ldr	r2, [pc, #332]	; (8002c54 <BasicTimer_Config+0x1b0>)
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	e00e      	b.n	8002b2a <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4a51      	ldr	r2, [pc, #324]	; (8002c58 <BasicTimer_Config+0x1b4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d109      	bne.n	8002b2a <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8002b16:	4b4a      	ldr	r3, [pc, #296]	; (8002c40 <BasicTimer_Config+0x19c>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	4a49      	ldr	r2, [pc, #292]	; (8002c40 <BasicTimer_Config+0x19c>)
 8002b1c:	f043 0308 	orr.w	r3, r3, #8
 8002b20:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	4a4d      	ldr	r2, [pc, #308]	; (8002c5c <BasicTimer_Config+0x1b8>)
 8002b28:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 8002b2a:	f001 fbeb 	bl	8004304 <getConfigPLL>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8002b32:	f001 fc03 	bl	800433c <getClockAPB1>
 8002b36:	4603      	mov	r3, r0
 8002b38:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 8002b3a:	7bbb      	ldrb	r3, [r7, #14]
 8002b3c:	2b31      	cmp	r3, #49	; 0x31
 8002b3e:	d903      	bls.n	8002b48 <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
 8002b46:	e000      	b.n	8002b4a <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 8002b48:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	8852      	ldrh	r2, [r2, #2]
 8002b50:	fb02 f303 	mul.w	r3, r2, r3
 8002b54:	1e5a      	subs	r2, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d112      	bne.n	8002b8a <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f022 0210 	bic.w	r2, r2, #16
 8002b72:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	3201      	adds	r2, #1
 8002b7e:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24
 8002b88:	e018      	b.n	8002bbc <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f022 0210 	bic.w	r2, r2, #16
 8002b98:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f042 0210 	orr.w	r2, r2, #16
 8002ba8:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6852      	ldr	r2, [r2, #4]
 8002bba:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bbc:	b672      	cpsid	i
}
 8002bbe:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc8:	d103      	bne.n	8002bd2 <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8002bca:	201c      	movs	r0, #28
 8002bcc:	f7ff ff4c 	bl	8002a68 <__NVIC_EnableIRQ>
 8002bd0:	e019      	b.n	8002c06 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	4a1c      	ldr	r2, [pc, #112]	; (8002c48 <BasicTimer_Config+0x1a4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d103      	bne.n	8002be4 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8002bdc:	201d      	movs	r0, #29
 8002bde:	f7ff ff43 	bl	8002a68 <__NVIC_EnableIRQ>
 8002be2:	e010      	b.n	8002c06 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4a19      	ldr	r2, [pc, #100]	; (8002c50 <BasicTimer_Config+0x1ac>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d103      	bne.n	8002bf6 <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8002bee:	201e      	movs	r0, #30
 8002bf0:	f7ff ff3a 	bl	8002a68 <__NVIC_EnableIRQ>
 8002bf4:	e007      	b.n	8002c06 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	4a17      	ldr	r2, [pc, #92]	; (8002c58 <BasicTimer_Config+0x1b4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d102      	bne.n	8002c06 <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8002c00:	2032      	movs	r0, #50	; 0x32
 8002c02:	f7ff ff31 	bl	8002a68 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8002c06:	b662      	cpsie	i
}
 8002c08:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	7a1b      	ldrb	r3, [r3, #8]
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f875 	bl	8002d00 <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f022 0201 	bic.w	r2, r2, #1
 8002c24:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f042 0201 	orr.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
}
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800
 8002c44:	200004a4 	.word	0x200004a4
 8002c48:	40000400 	.word	0x40000400
 8002c4c:	200004a8 	.word	0x200004a8
 8002c50:	40000800 	.word	0x40000800
 8002c54:	200004ac 	.word	0x200004ac
 8002c58:	40000c00 	.word	0x40000c00
 8002c5c:	200004b0 	.word	0x200004b0

08002c60 <BasicTimer4_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
	__NOP();
 8002c64:	bf00      	nop
}
 8002c66:	bf00      	nop
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
	__NOP();
 8002c74:	bf00      	nop
}
 8002c76:	bf00      	nop
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <TIM2_IRQHandler+0x1c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <TIM2_IRQHandler+0x1c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0201 	bic.w	r2, r2, #1
 8002c92:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 8002c94:	f7fe fce4 	bl	8001660 <BasicTimer2_Callback>

}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	200004a4 	.word	0x200004a4

08002ca0 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 8002ca4:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <TIM3_IRQHandler+0x1c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691a      	ldr	r2, [r3, #16]
 8002caa:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <TIM3_IRQHandler+0x1c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0201 	bic.w	r2, r2, #1
 8002cb2:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 8002cb4:	f7fe fce0 	bl	8001678 <BasicTimer3_Callback>

}
 8002cb8:	bf00      	nop
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	200004a8 	.word	0x200004a8

08002cc0 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <TIM4_IRQHandler+0x1c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <TIM4_IRQHandler+0x1c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 8002cd4:	f7ff ffc4 	bl	8002c60 <BasicTimer4_Callback>

}
 8002cd8:	bf00      	nop
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	200004ac 	.word	0x200004ac

08002ce0 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <TIM5_IRQHandler+0x1c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <TIM5_IRQHandler+0x1c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 8002cf4:	f7ff ffbc 	bl	8002c70 <BasicTimer5_Callback>

}
 8002cf8:	bf00      	nop
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	200004b0 	.word	0x200004b0

08002d00 <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d108      	bne.n	8002d24 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 8002d22:	e007      	b.n	8002d34 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	60da      	str	r2, [r3, #12]
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <updateFrequencyTimer>:


//Actualizamos la frecuencia del TIMER
void updateFrequencyTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint16_t newPer)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	807b      	strh	r3, [r7, #2]
	//Establecemos el nuevo valor del periodo en la configuracion del PWM
	ptrBTimerHandler->TIMx_Config.TIMX_period = newPer;
 8002d4c:	887a      	ldrh	r2, [r7, #2]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	605a      	str	r2, [r3, #4]
	//Reiniamos el contador
	ptrBTimerHandler->ptrTIMx->CNT = 0;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24
	/*Cargamos el valor del ARR el cual es e limite de incrementos del TIMER
	 */
	ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6852      	ldr	r2, [r2, #4]
 8002d62:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <__NVIC_EnableIRQ>:
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	db0b      	blt.n	8002d9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	f003 021f 	and.w	r2, r3, #31
 8002d88:	4907      	ldr	r1, [pc, #28]	; (8002da8 <__NVIC_EnableIRQ+0x38>)
 8002d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	2001      	movs	r0, #1
 8002d92:	fa00 f202 	lsl.w	r2, r0, r2
 8002d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	e000e100 	.word	0xe000e100

08002dac <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6818      	ldr	r0, [r3, #0]
 8002db8:	2300      	movs	r3, #0
 8002dba:	9301      	str	r3, [sp, #4]
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	f001 f891 	bl	8003eec <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f001 f8ae 	bl	8003f30 <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002dd4:	4b97      	ldr	r3, [pc, #604]	; (8003034 <extInt_Config+0x288>)
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd8:	4a96      	ldr	r2, [pc, #600]	; (8003034 <extInt_Config+0x288>)
 8002dda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dde:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b0f      	cmp	r3, #15
 8002de8:	f200 85cf 	bhi.w	800398a <extInt_Config+0xbde>
 8002dec:	a201      	add	r2, pc, #4	; (adr r2, 8002df4 <extInt_Config+0x48>)
 8002dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df2:	bf00      	nop
 8002df4:	08002e35 	.word	0x08002e35
 8002df8:	08002eeb 	.word	0x08002eeb
 8002dfc:	08002fa1 	.word	0x08002fa1
 8002e00:	08003077 	.word	0x08003077
 8002e04:	0800312d 	.word	0x0800312d
 8002e08:	080031db 	.word	0x080031db
 8002e0c:	080032a1 	.word	0x080032a1
 8002e10:	08003349 	.word	0x08003349
 8002e14:	080033f1 	.word	0x080033f1
 8002e18:	08003499 	.word	0x08003499
 8002e1c:	0800355f 	.word	0x0800355f
 8002e20:	08003607 	.word	0x08003607
 8002e24:	080036af 	.word	0x080036af
 8002e28:	08003775 	.word	0x08003775
 8002e2c:	0800381d 	.word	0x0800381d
 8002e30:	080038c5 	.word	0x080038c5
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 8002e34:	4b80      	ldr	r3, [pc, #512]	; (8003038 <extInt_Config+0x28c>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4a7f      	ldr	r2, [pc, #508]	; (8003038 <extInt_Config+0x28c>)
 8002e3a:	f023 030f 	bic.w	r3, r3, #15
 8002e3e:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	4a7d      	ldr	r2, [pc, #500]	; (800303c <extInt_Config+0x290>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d105      	bne.n	8002e58 <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8002e4c:	4b7a      	ldr	r3, [pc, #488]	; (8003038 <extInt_Config+0x28c>)
 8002e4e:	4a7a      	ldr	r2, [pc, #488]	; (8003038 <extInt_Config+0x28c>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002e54:	f000 bd9b 	b.w	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	4a78      	ldr	r2, [pc, #480]	; (8003040 <extInt_Config+0x294>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d107      	bne.n	8002e74 <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8002e64:	4b74      	ldr	r3, [pc, #464]	; (8003038 <extInt_Config+0x28c>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	4a73      	ldr	r2, [pc, #460]	; (8003038 <extInt_Config+0x28c>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6093      	str	r3, [r2, #8]
		break;
 8002e70:	f000 bd8d 	b.w	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	4a72      	ldr	r2, [pc, #456]	; (8003044 <extInt_Config+0x298>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d107      	bne.n	8002e90 <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8002e80:	4b6d      	ldr	r3, [pc, #436]	; (8003038 <extInt_Config+0x28c>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	4a6c      	ldr	r2, [pc, #432]	; (8003038 <extInt_Config+0x28c>)
 8002e86:	f043 0302 	orr.w	r3, r3, #2
 8002e8a:	6093      	str	r3, [r2, #8]
		break;
 8002e8c:	f000 bd7f 	b.w	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	4a6c      	ldr	r2, [pc, #432]	; (8003048 <extInt_Config+0x29c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d107      	bne.n	8002eac <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8002e9c:	4b66      	ldr	r3, [pc, #408]	; (8003038 <extInt_Config+0x28c>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a65      	ldr	r2, [pc, #404]	; (8003038 <extInt_Config+0x28c>)
 8002ea2:	f043 0303 	orr.w	r3, r3, #3
 8002ea6:	6093      	str	r3, [r2, #8]
		break;
 8002ea8:	f000 bd71 	b.w	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	4a66      	ldr	r2, [pc, #408]	; (800304c <extInt_Config+0x2a0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d107      	bne.n	8002ec8 <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8002eb8:	4b5f      	ldr	r3, [pc, #380]	; (8003038 <extInt_Config+0x28c>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	4a5e      	ldr	r2, [pc, #376]	; (8003038 <extInt_Config+0x28c>)
 8002ebe:	f043 0304 	orr.w	r3, r3, #4
 8002ec2:	6093      	str	r3, [r2, #8]
		break;
 8002ec4:	f000 bd63 	b.w	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	4a60      	ldr	r2, [pc, #384]	; (8003050 <extInt_Config+0x2a4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d107      	bne.n	8002ee4 <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8002ed4:	4b58      	ldr	r3, [pc, #352]	; (8003038 <extInt_Config+0x28c>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4a57      	ldr	r2, [pc, #348]	; (8003038 <extInt_Config+0x28c>)
 8002eda:	f043 0307 	orr.w	r3, r3, #7
 8002ede:	6093      	str	r3, [r2, #8]
		break;
 8002ee0:	f000 bd55 	b.w	800398e <extInt_Config+0xbe2>
			__NOP();
 8002ee4:	bf00      	nop
		break;
 8002ee6:	f000 bd52 	b.w	800398e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 8002eea:	4b53      	ldr	r3, [pc, #332]	; (8003038 <extInt_Config+0x28c>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	4a52      	ldr	r2, [pc, #328]	; (8003038 <extInt_Config+0x28c>)
 8002ef0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ef4:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4a4f      	ldr	r2, [pc, #316]	; (800303c <extInt_Config+0x290>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d105      	bne.n	8002f0e <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8002f02:	4b4d      	ldr	r3, [pc, #308]	; (8003038 <extInt_Config+0x28c>)
 8002f04:	4a4c      	ldr	r2, [pc, #304]	; (8003038 <extInt_Config+0x28c>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002f0a:	f000 bd40 	b.w	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	4a4a      	ldr	r2, [pc, #296]	; (8003040 <extInt_Config+0x294>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d107      	bne.n	8002f2a <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8002f1a:	4b47      	ldr	r3, [pc, #284]	; (8003038 <extInt_Config+0x28c>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	4a46      	ldr	r2, [pc, #280]	; (8003038 <extInt_Config+0x28c>)
 8002f20:	f043 0310 	orr.w	r3, r3, #16
 8002f24:	6093      	str	r3, [r2, #8]
		break;
 8002f26:	f000 bd32 	b.w	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	4a44      	ldr	r2, [pc, #272]	; (8003044 <extInt_Config+0x298>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d107      	bne.n	8002f46 <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8002f36:	4b40      	ldr	r3, [pc, #256]	; (8003038 <extInt_Config+0x28c>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	4a3f      	ldr	r2, [pc, #252]	; (8003038 <extInt_Config+0x28c>)
 8002f3c:	f043 0320 	orr.w	r3, r3, #32
 8002f40:	6093      	str	r3, [r2, #8]
		break;
 8002f42:	f000 bd24 	b.w	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	4a3e      	ldr	r2, [pc, #248]	; (8003048 <extInt_Config+0x29c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d107      	bne.n	8002f62 <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8002f52:	4b39      	ldr	r3, [pc, #228]	; (8003038 <extInt_Config+0x28c>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	4a38      	ldr	r2, [pc, #224]	; (8003038 <extInt_Config+0x28c>)
 8002f58:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002f5c:	6093      	str	r3, [r2, #8]
		break;
 8002f5e:	f000 bd16 	b.w	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	4a38      	ldr	r2, [pc, #224]	; (800304c <extInt_Config+0x2a0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d107      	bne.n	8002f7e <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8002f6e:	4b32      	ldr	r3, [pc, #200]	; (8003038 <extInt_Config+0x28c>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	4a31      	ldr	r2, [pc, #196]	; (8003038 <extInt_Config+0x28c>)
 8002f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f78:	6093      	str	r3, [r2, #8]
		break;
 8002f7a:	f000 bd08 	b.w	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	4a32      	ldr	r2, [pc, #200]	; (8003050 <extInt_Config+0x2a4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d107      	bne.n	8002f9a <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8002f8a:	4b2b      	ldr	r3, [pc, #172]	; (8003038 <extInt_Config+0x28c>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	4a2a      	ldr	r2, [pc, #168]	; (8003038 <extInt_Config+0x28c>)
 8002f90:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002f94:	6093      	str	r3, [r2, #8]
		break;
 8002f96:	f000 bcfa 	b.w	800398e <extInt_Config+0xbe2>
			__NOP();
 8002f9a:	bf00      	nop
		break;
 8002f9c:	f000 bcf7 	b.w	800398e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 8002fa0:	4b25      	ldr	r3, [pc, #148]	; (8003038 <extInt_Config+0x28c>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	4a24      	ldr	r2, [pc, #144]	; (8003038 <extInt_Config+0x28c>)
 8002fa6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002faa:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	4a22      	ldr	r2, [pc, #136]	; (800303c <extInt_Config+0x290>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d105      	bne.n	8002fc4 <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8002fb8:	4b1f      	ldr	r3, [pc, #124]	; (8003038 <extInt_Config+0x28c>)
 8002fba:	4a1f      	ldr	r2, [pc, #124]	; (8003038 <extInt_Config+0x28c>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002fc0:	f000 bce5 	b.w	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	4a1d      	ldr	r2, [pc, #116]	; (8003040 <extInt_Config+0x294>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d107      	bne.n	8002fe0 <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8002fd0:	4b19      	ldr	r3, [pc, #100]	; (8003038 <extInt_Config+0x28c>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	4a18      	ldr	r2, [pc, #96]	; (8003038 <extInt_Config+0x28c>)
 8002fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fda:	6093      	str	r3, [r2, #8]
		break;
 8002fdc:	f000 bcd7 	b.w	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	4a17      	ldr	r2, [pc, #92]	; (8003044 <extInt_Config+0x298>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d107      	bne.n	8002ffc <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8002fec:	4b12      	ldr	r3, [pc, #72]	; (8003038 <extInt_Config+0x28c>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	4a11      	ldr	r2, [pc, #68]	; (8003038 <extInt_Config+0x28c>)
 8002ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ff6:	6093      	str	r3, [r2, #8]
		break;
 8002ff8:	f000 bcc9 	b.w	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	4a11      	ldr	r2, [pc, #68]	; (8003048 <extInt_Config+0x29c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d107      	bne.n	8003018 <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8003008:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <extInt_Config+0x28c>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <extInt_Config+0x28c>)
 800300e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003012:	6093      	str	r3, [r2, #8]
		break;
 8003014:	f000 bcbb 	b.w	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	4a0b      	ldr	r2, [pc, #44]	; (800304c <extInt_Config+0x2a0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d117      	bne.n	8003054 <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8003024:	4b04      	ldr	r3, [pc, #16]	; (8003038 <extInt_Config+0x28c>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	4a03      	ldr	r2, [pc, #12]	; (8003038 <extInt_Config+0x28c>)
 800302a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800302e:	6093      	str	r3, [r2, #8]
		break;
 8003030:	f000 bcad 	b.w	800398e <extInt_Config+0xbe2>
 8003034:	40023800 	.word	0x40023800
 8003038:	40013800 	.word	0x40013800
 800303c:	40020000 	.word	0x40020000
 8003040:	40020400 	.word	0x40020400
 8003044:	40020800 	.word	0x40020800
 8003048:	40020c00 	.word	0x40020c00
 800304c:	40021000 	.word	0x40021000
 8003050:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	4a8a      	ldr	r2, [pc, #552]	; (8003284 <extInt_Config+0x4d8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d107      	bne.n	8003070 <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8003060:	4b89      	ldr	r3, [pc, #548]	; (8003288 <extInt_Config+0x4dc>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	4a88      	ldr	r2, [pc, #544]	; (8003288 <extInt_Config+0x4dc>)
 8003066:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800306a:	6093      	str	r3, [r2, #8]
		break;
 800306c:	f000 bc8f 	b.w	800398e <extInt_Config+0xbe2>
			__NOP();
 8003070:	bf00      	nop
		break;
 8003072:	f000 bc8c 	b.w	800398e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 8003076:	4b84      	ldr	r3, [pc, #528]	; (8003288 <extInt_Config+0x4dc>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	4a83      	ldr	r2, [pc, #524]	; (8003288 <extInt_Config+0x4dc>)
 800307c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003080:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	4a80      	ldr	r2, [pc, #512]	; (800328c <extInt_Config+0x4e0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d105      	bne.n	800309a <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 800308e:	4b7e      	ldr	r3, [pc, #504]	; (8003288 <extInt_Config+0x4dc>)
 8003090:	4a7d      	ldr	r2, [pc, #500]	; (8003288 <extInt_Config+0x4dc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8003096:	f000 bc7a 	b.w	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	4a7b      	ldr	r2, [pc, #492]	; (8003290 <extInt_Config+0x4e4>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d107      	bne.n	80030b6 <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 80030a6:	4b78      	ldr	r3, [pc, #480]	; (8003288 <extInt_Config+0x4dc>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	4a77      	ldr	r2, [pc, #476]	; (8003288 <extInt_Config+0x4dc>)
 80030ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030b0:	6093      	str	r3, [r2, #8]
		break;
 80030b2:	f000 bc6c 	b.w	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4a75      	ldr	r2, [pc, #468]	; (8003294 <extInt_Config+0x4e8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d107      	bne.n	80030d2 <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 80030c2:	4b71      	ldr	r3, [pc, #452]	; (8003288 <extInt_Config+0x4dc>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	4a70      	ldr	r2, [pc, #448]	; (8003288 <extInt_Config+0x4dc>)
 80030c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030cc:	6093      	str	r3, [r2, #8]
		break;
 80030ce:	f000 bc5e 	b.w	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	4a6f      	ldr	r2, [pc, #444]	; (8003298 <extInt_Config+0x4ec>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d107      	bne.n	80030ee <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 80030de:	4b6a      	ldr	r3, [pc, #424]	; (8003288 <extInt_Config+0x4dc>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	4a69      	ldr	r2, [pc, #420]	; (8003288 <extInt_Config+0x4dc>)
 80030e4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80030e8:	6093      	str	r3, [r2, #8]
		break;
 80030ea:	f000 bc50 	b.w	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4a69      	ldr	r2, [pc, #420]	; (800329c <extInt_Config+0x4f0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d107      	bne.n	800310a <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 80030fa:	4b63      	ldr	r3, [pc, #396]	; (8003288 <extInt_Config+0x4dc>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	4a62      	ldr	r2, [pc, #392]	; (8003288 <extInt_Config+0x4dc>)
 8003100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003104:	6093      	str	r3, [r2, #8]
		break;
 8003106:	f000 bc42 	b.w	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4a5c      	ldr	r2, [pc, #368]	; (8003284 <extInt_Config+0x4d8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d107      	bne.n	8003126 <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8003116:	4b5c      	ldr	r3, [pc, #368]	; (8003288 <extInt_Config+0x4dc>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	4a5b      	ldr	r2, [pc, #364]	; (8003288 <extInt_Config+0x4dc>)
 800311c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003120:	6093      	str	r3, [r2, #8]
		break;
 8003122:	f000 bc34 	b.w	800398e <extInt_Config+0xbe2>
			__NOP();
 8003126:	bf00      	nop
		break;
 8003128:	f000 bc31 	b.w	800398e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 800312c:	4b56      	ldr	r3, [pc, #344]	; (8003288 <extInt_Config+0x4dc>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4a55      	ldr	r2, [pc, #340]	; (8003288 <extInt_Config+0x4dc>)
 8003132:	f023 030f 	bic.w	r3, r3, #15
 8003136:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	4a53      	ldr	r2, [pc, #332]	; (800328c <extInt_Config+0x4e0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d105      	bne.n	8003150 <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8003144:	4b50      	ldr	r3, [pc, #320]	; (8003288 <extInt_Config+0x4dc>)
 8003146:	4a50      	ldr	r2, [pc, #320]	; (8003288 <extInt_Config+0x4dc>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 800314c:	f000 bc1f 	b.w	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	4a4e      	ldr	r2, [pc, #312]	; (8003290 <extInt_Config+0x4e4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d107      	bne.n	800316c <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 800315c:	4b4a      	ldr	r3, [pc, #296]	; (8003288 <extInt_Config+0x4dc>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4a49      	ldr	r2, [pc, #292]	; (8003288 <extInt_Config+0x4dc>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	60d3      	str	r3, [r2, #12]
		break;
 8003168:	f000 bc11 	b.w	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	4a48      	ldr	r2, [pc, #288]	; (8003294 <extInt_Config+0x4e8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d107      	bne.n	8003188 <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8003178:	4b43      	ldr	r3, [pc, #268]	; (8003288 <extInt_Config+0x4dc>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4a42      	ldr	r2, [pc, #264]	; (8003288 <extInt_Config+0x4dc>)
 800317e:	f043 0302 	orr.w	r3, r3, #2
 8003182:	60d3      	str	r3, [r2, #12]
		break;
 8003184:	f000 bc03 	b.w	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	4a42      	ldr	r2, [pc, #264]	; (8003298 <extInt_Config+0x4ec>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d106      	bne.n	80031a2 <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8003194:	4b3c      	ldr	r3, [pc, #240]	; (8003288 <extInt_Config+0x4dc>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4a3b      	ldr	r2, [pc, #236]	; (8003288 <extInt_Config+0x4dc>)
 800319a:	f043 0303 	orr.w	r3, r3, #3
 800319e:	60d3      	str	r3, [r2, #12]
		break;
 80031a0:	e3f5      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4a3c      	ldr	r2, [pc, #240]	; (800329c <extInt_Config+0x4f0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d106      	bne.n	80031bc <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 80031ae:	4b36      	ldr	r3, [pc, #216]	; (8003288 <extInt_Config+0x4dc>)
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	4a35      	ldr	r2, [pc, #212]	; (8003288 <extInt_Config+0x4dc>)
 80031b4:	f043 0304 	orr.w	r3, r3, #4
 80031b8:	60d3      	str	r3, [r2, #12]
		break;
 80031ba:	e3e8      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	4a30      	ldr	r2, [pc, #192]	; (8003284 <extInt_Config+0x4d8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d106      	bne.n	80031d6 <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 80031c8:	4b2f      	ldr	r3, [pc, #188]	; (8003288 <extInt_Config+0x4dc>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4a2e      	ldr	r2, [pc, #184]	; (8003288 <extInt_Config+0x4dc>)
 80031ce:	f043 0307 	orr.w	r3, r3, #7
 80031d2:	60d3      	str	r3, [r2, #12]
		break;
 80031d4:	e3db      	b.n	800398e <extInt_Config+0xbe2>
			__NOP();
 80031d6:	bf00      	nop
		break;
 80031d8:	e3d9      	b.n	800398e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 80031da:	4b2b      	ldr	r3, [pc, #172]	; (8003288 <extInt_Config+0x4dc>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	4a2a      	ldr	r2, [pc, #168]	; (8003288 <extInt_Config+0x4dc>)
 80031e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031e4:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a27      	ldr	r2, [pc, #156]	; (800328c <extInt_Config+0x4e0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d104      	bne.n	80031fc <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 80031f2:	4b25      	ldr	r3, [pc, #148]	; (8003288 <extInt_Config+0x4dc>)
 80031f4:	4a24      	ldr	r2, [pc, #144]	; (8003288 <extInt_Config+0x4dc>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80031fa:	e3c8      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	4a23      	ldr	r2, [pc, #140]	; (8003290 <extInt_Config+0x4e4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d106      	bne.n	8003216 <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8003208:	4b1f      	ldr	r3, [pc, #124]	; (8003288 <extInt_Config+0x4dc>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	4a1e      	ldr	r2, [pc, #120]	; (8003288 <extInt_Config+0x4dc>)
 800320e:	f043 0310 	orr.w	r3, r3, #16
 8003212:	60d3      	str	r3, [r2, #12]
		break;
 8003214:	e3bb      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	4a1d      	ldr	r2, [pc, #116]	; (8003294 <extInt_Config+0x4e8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d106      	bne.n	8003230 <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8003222:	4b19      	ldr	r3, [pc, #100]	; (8003288 <extInt_Config+0x4dc>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	4a18      	ldr	r2, [pc, #96]	; (8003288 <extInt_Config+0x4dc>)
 8003228:	f043 0320 	orr.w	r3, r3, #32
 800322c:	60d3      	str	r3, [r2, #12]
		break;
 800322e:	e3ae      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	4a18      	ldr	r2, [pc, #96]	; (8003298 <extInt_Config+0x4ec>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d106      	bne.n	800324a <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 800323c:	4b12      	ldr	r3, [pc, #72]	; (8003288 <extInt_Config+0x4dc>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4a11      	ldr	r2, [pc, #68]	; (8003288 <extInt_Config+0x4dc>)
 8003242:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003246:	60d3      	str	r3, [r2, #12]
		break;
 8003248:	e3a1      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a12      	ldr	r2, [pc, #72]	; (800329c <extInt_Config+0x4f0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d106      	bne.n	8003264 <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8003256:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <extInt_Config+0x4dc>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	4a0b      	ldr	r2, [pc, #44]	; (8003288 <extInt_Config+0x4dc>)
 800325c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003260:	60d3      	str	r3, [r2, #12]
		break;
 8003262:	e394      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	4a06      	ldr	r2, [pc, #24]	; (8003284 <extInt_Config+0x4d8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d106      	bne.n	800327e <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8003270:	4b05      	ldr	r3, [pc, #20]	; (8003288 <extInt_Config+0x4dc>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4a04      	ldr	r2, [pc, #16]	; (8003288 <extInt_Config+0x4dc>)
 8003276:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800327a:	60d3      	str	r3, [r2, #12]
		break;
 800327c:	e387      	b.n	800398e <extInt_Config+0xbe2>
			__NOP();
 800327e:	bf00      	nop
		break;
 8003280:	e385      	b.n	800398e <extInt_Config+0xbe2>
 8003282:	bf00      	nop
 8003284:	40021c00 	.word	0x40021c00
 8003288:	40013800 	.word	0x40013800
 800328c:	40020000 	.word	0x40020000
 8003290:	40020400 	.word	0x40020400
 8003294:	40020800 	.word	0x40020800
 8003298:	40020c00 	.word	0x40020c00
 800329c:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 80032a0:	4b86      	ldr	r3, [pc, #536]	; (80034bc <extInt_Config+0x710>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	4a85      	ldr	r2, [pc, #532]	; (80034bc <extInt_Config+0x710>)
 80032a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032aa:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	4a83      	ldr	r2, [pc, #524]	; (80034c0 <extInt_Config+0x714>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d104      	bne.n	80032c2 <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 80032b8:	4b80      	ldr	r3, [pc, #512]	; (80034bc <extInt_Config+0x710>)
 80032ba:	4a80      	ldr	r2, [pc, #512]	; (80034bc <extInt_Config+0x710>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80032c0:	e365      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	4a7e      	ldr	r2, [pc, #504]	; (80034c4 <extInt_Config+0x718>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d106      	bne.n	80032dc <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 80032ce:	4b7b      	ldr	r3, [pc, #492]	; (80034bc <extInt_Config+0x710>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	4a7a      	ldr	r2, [pc, #488]	; (80034bc <extInt_Config+0x710>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d8:	60d3      	str	r3, [r2, #12]
		break;
 80032da:	e358      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	4a79      	ldr	r2, [pc, #484]	; (80034c8 <extInt_Config+0x71c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d106      	bne.n	80032f6 <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 80032e8:	4b74      	ldr	r3, [pc, #464]	; (80034bc <extInt_Config+0x710>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4a73      	ldr	r2, [pc, #460]	; (80034bc <extInt_Config+0x710>)
 80032ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032f2:	60d3      	str	r3, [r2, #12]
		break;
 80032f4:	e34b      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	4a73      	ldr	r2, [pc, #460]	; (80034cc <extInt_Config+0x720>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d106      	bne.n	8003310 <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8003302:	4b6e      	ldr	r3, [pc, #440]	; (80034bc <extInt_Config+0x710>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	4a6d      	ldr	r2, [pc, #436]	; (80034bc <extInt_Config+0x710>)
 8003308:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800330c:	60d3      	str	r3, [r2, #12]
		break;
 800330e:	e33e      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	4a6e      	ldr	r2, [pc, #440]	; (80034d0 <extInt_Config+0x724>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d106      	bne.n	800332a <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 800331c:	4b67      	ldr	r3, [pc, #412]	; (80034bc <extInt_Config+0x710>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4a66      	ldr	r2, [pc, #408]	; (80034bc <extInt_Config+0x710>)
 8003322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003326:	60d3      	str	r3, [r2, #12]
		break;
 8003328:	e331      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	4a68      	ldr	r2, [pc, #416]	; (80034d4 <extInt_Config+0x728>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d106      	bne.n	8003344 <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8003336:	4b61      	ldr	r3, [pc, #388]	; (80034bc <extInt_Config+0x710>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	4a60      	ldr	r2, [pc, #384]	; (80034bc <extInt_Config+0x710>)
 800333c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003340:	60d3      	str	r3, [r2, #12]
		break;
 8003342:	e324      	b.n	800398e <extInt_Config+0xbe2>
			__NOP();
 8003344:	bf00      	nop
		break;
 8003346:	e322      	b.n	800398e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 8003348:	4b5c      	ldr	r3, [pc, #368]	; (80034bc <extInt_Config+0x710>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4a5b      	ldr	r2, [pc, #364]	; (80034bc <extInt_Config+0x710>)
 800334e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003352:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	4a59      	ldr	r2, [pc, #356]	; (80034c0 <extInt_Config+0x714>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d104      	bne.n	800336a <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8003360:	4b56      	ldr	r3, [pc, #344]	; (80034bc <extInt_Config+0x710>)
 8003362:	4a56      	ldr	r2, [pc, #344]	; (80034bc <extInt_Config+0x710>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8003368:	e311      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	4a54      	ldr	r2, [pc, #336]	; (80034c4 <extInt_Config+0x718>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d106      	bne.n	8003384 <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8003376:	4b51      	ldr	r3, [pc, #324]	; (80034bc <extInt_Config+0x710>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	4a50      	ldr	r2, [pc, #320]	; (80034bc <extInt_Config+0x710>)
 800337c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003380:	60d3      	str	r3, [r2, #12]
		break;
 8003382:	e304      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	4a4f      	ldr	r2, [pc, #316]	; (80034c8 <extInt_Config+0x71c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d106      	bne.n	800339e <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8003390:	4b4a      	ldr	r3, [pc, #296]	; (80034bc <extInt_Config+0x710>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	4a49      	ldr	r2, [pc, #292]	; (80034bc <extInt_Config+0x710>)
 8003396:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800339a:	60d3      	str	r3, [r2, #12]
		break;
 800339c:	e2f7      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	4a49      	ldr	r2, [pc, #292]	; (80034cc <extInt_Config+0x720>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d106      	bne.n	80033b8 <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 80033aa:	4b44      	ldr	r3, [pc, #272]	; (80034bc <extInt_Config+0x710>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	4a43      	ldr	r2, [pc, #268]	; (80034bc <extInt_Config+0x710>)
 80033b0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80033b4:	60d3      	str	r3, [r2, #12]
		break;
 80033b6:	e2ea      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	4a44      	ldr	r2, [pc, #272]	; (80034d0 <extInt_Config+0x724>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d106      	bne.n	80033d2 <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 80033c4:	4b3d      	ldr	r3, [pc, #244]	; (80034bc <extInt_Config+0x710>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4a3c      	ldr	r2, [pc, #240]	; (80034bc <extInt_Config+0x710>)
 80033ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ce:	60d3      	str	r3, [r2, #12]
		break;
 80033d0:	e2dd      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	4a3e      	ldr	r2, [pc, #248]	; (80034d4 <extInt_Config+0x728>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d106      	bne.n	80033ec <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 80033de:	4b37      	ldr	r3, [pc, #220]	; (80034bc <extInt_Config+0x710>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	4a36      	ldr	r2, [pc, #216]	; (80034bc <extInt_Config+0x710>)
 80033e4:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80033e8:	60d3      	str	r3, [r2, #12]
		break;
 80033ea:	e2d0      	b.n	800398e <extInt_Config+0xbe2>
			__NOP();
 80033ec:	bf00      	nop
		break;
 80033ee:	e2ce      	b.n	800398e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 80033f0:	4b32      	ldr	r3, [pc, #200]	; (80034bc <extInt_Config+0x710>)
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	4a31      	ldr	r2, [pc, #196]	; (80034bc <extInt_Config+0x710>)
 80033f6:	f023 030f 	bic.w	r3, r3, #15
 80033fa:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	4a2f      	ldr	r2, [pc, #188]	; (80034c0 <extInt_Config+0x714>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d104      	bne.n	8003412 <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8003408:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <extInt_Config+0x710>)
 800340a:	4a2c      	ldr	r2, [pc, #176]	; (80034bc <extInt_Config+0x710>)
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8003410:	e2bd      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4a2a      	ldr	r2, [pc, #168]	; (80034c4 <extInt_Config+0x718>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d106      	bne.n	800342c <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 800341e:	4b27      	ldr	r3, [pc, #156]	; (80034bc <extInt_Config+0x710>)
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	4a26      	ldr	r2, [pc, #152]	; (80034bc <extInt_Config+0x710>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	6113      	str	r3, [r2, #16]
		break;
 800342a:	e2b0      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	4a25      	ldr	r2, [pc, #148]	; (80034c8 <extInt_Config+0x71c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d106      	bne.n	8003446 <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8003438:	4b20      	ldr	r3, [pc, #128]	; (80034bc <extInt_Config+0x710>)
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	4a1f      	ldr	r2, [pc, #124]	; (80034bc <extInt_Config+0x710>)
 800343e:	f043 0302 	orr.w	r3, r3, #2
 8003442:	6113      	str	r3, [r2, #16]
		break;
 8003444:	e2a3      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4a1f      	ldr	r2, [pc, #124]	; (80034cc <extInt_Config+0x720>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d106      	bne.n	8003460 <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8003452:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <extInt_Config+0x710>)
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	4a19      	ldr	r2, [pc, #100]	; (80034bc <extInt_Config+0x710>)
 8003458:	f043 0303 	orr.w	r3, r3, #3
 800345c:	6113      	str	r3, [r2, #16]
		break;
 800345e:	e296      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	4a1a      	ldr	r2, [pc, #104]	; (80034d0 <extInt_Config+0x724>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d106      	bne.n	800347a <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 800346c:	4b13      	ldr	r3, [pc, #76]	; (80034bc <extInt_Config+0x710>)
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	4a12      	ldr	r2, [pc, #72]	; (80034bc <extInt_Config+0x710>)
 8003472:	f043 0304 	orr.w	r3, r3, #4
 8003476:	6113      	str	r3, [r2, #16]
		break;
 8003478:	e289      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	4a14      	ldr	r2, [pc, #80]	; (80034d4 <extInt_Config+0x728>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d106      	bne.n	8003494 <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8003486:	4b0d      	ldr	r3, [pc, #52]	; (80034bc <extInt_Config+0x710>)
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	4a0c      	ldr	r2, [pc, #48]	; (80034bc <extInt_Config+0x710>)
 800348c:	f043 0307 	orr.w	r3, r3, #7
 8003490:	6113      	str	r3, [r2, #16]
		break;
 8003492:	e27c      	b.n	800398e <extInt_Config+0xbe2>
			__NOP();
 8003494:	bf00      	nop
		break;
 8003496:	e27a      	b.n	800398e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 8003498:	4b08      	ldr	r3, [pc, #32]	; (80034bc <extInt_Config+0x710>)
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	4a07      	ldr	r2, [pc, #28]	; (80034bc <extInt_Config+0x710>)
 800349e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034a2:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	4a05      	ldr	r2, [pc, #20]	; (80034c0 <extInt_Config+0x714>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d113      	bne.n	80034d8 <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 80034b0:	4b02      	ldr	r3, [pc, #8]	; (80034bc <extInt_Config+0x710>)
 80034b2:	4a02      	ldr	r2, [pc, #8]	; (80034bc <extInt_Config+0x710>)
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80034b8:	e269      	b.n	800398e <extInt_Config+0xbe2>
 80034ba:	bf00      	nop
 80034bc:	40013800 	.word	0x40013800
 80034c0:	40020000 	.word	0x40020000
 80034c4:	40020400 	.word	0x40020400
 80034c8:	40020800 	.word	0x40020800
 80034cc:	40020c00 	.word	0x40020c00
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	4a83      	ldr	r2, [pc, #524]	; (80036ec <extInt_Config+0x940>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d106      	bne.n	80034f2 <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 80034e4:	4b82      	ldr	r3, [pc, #520]	; (80036f0 <extInt_Config+0x944>)
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	4a81      	ldr	r2, [pc, #516]	; (80036f0 <extInt_Config+0x944>)
 80034ea:	f043 0310 	orr.w	r3, r3, #16
 80034ee:	6113      	str	r3, [r2, #16]
		break;
 80034f0:	e24d      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	4a7e      	ldr	r2, [pc, #504]	; (80036f4 <extInt_Config+0x948>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d106      	bne.n	800350c <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 80034fe:	4b7c      	ldr	r3, [pc, #496]	; (80036f0 <extInt_Config+0x944>)
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	4a7b      	ldr	r2, [pc, #492]	; (80036f0 <extInt_Config+0x944>)
 8003504:	f043 0320 	orr.w	r3, r3, #32
 8003508:	6113      	str	r3, [r2, #16]
		break;
 800350a:	e240      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	4a79      	ldr	r2, [pc, #484]	; (80036f8 <extInt_Config+0x94c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d106      	bne.n	8003526 <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8003518:	4b75      	ldr	r3, [pc, #468]	; (80036f0 <extInt_Config+0x944>)
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	4a74      	ldr	r2, [pc, #464]	; (80036f0 <extInt_Config+0x944>)
 800351e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003522:	6113      	str	r3, [r2, #16]
		break;
 8003524:	e233      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	4a73      	ldr	r2, [pc, #460]	; (80036fc <extInt_Config+0x950>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d106      	bne.n	8003540 <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8003532:	4b6f      	ldr	r3, [pc, #444]	; (80036f0 <extInt_Config+0x944>)
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	4a6e      	ldr	r2, [pc, #440]	; (80036f0 <extInt_Config+0x944>)
 8003538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800353c:	6113      	str	r3, [r2, #16]
		break;
 800353e:	e226      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	4a6e      	ldr	r2, [pc, #440]	; (8003700 <extInt_Config+0x954>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d106      	bne.n	800355a <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 800354c:	4b68      	ldr	r3, [pc, #416]	; (80036f0 <extInt_Config+0x944>)
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	4a67      	ldr	r2, [pc, #412]	; (80036f0 <extInt_Config+0x944>)
 8003552:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003556:	6113      	str	r3, [r2, #16]
		break;
 8003558:	e219      	b.n	800398e <extInt_Config+0xbe2>
			__NOP();
 800355a:	bf00      	nop
		break;
 800355c:	e217      	b.n	800398e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 800355e:	4b64      	ldr	r3, [pc, #400]	; (80036f0 <extInt_Config+0x944>)
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	4a63      	ldr	r2, [pc, #396]	; (80036f0 <extInt_Config+0x944>)
 8003564:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003568:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4a64      	ldr	r2, [pc, #400]	; (8003704 <extInt_Config+0x958>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d104      	bne.n	8003580 <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8003576:	4b5e      	ldr	r3, [pc, #376]	; (80036f0 <extInt_Config+0x944>)
 8003578:	4a5d      	ldr	r2, [pc, #372]	; (80036f0 <extInt_Config+0x944>)
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 800357e:	e206      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	4a59      	ldr	r2, [pc, #356]	; (80036ec <extInt_Config+0x940>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d106      	bne.n	800359a <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 800358c:	4b58      	ldr	r3, [pc, #352]	; (80036f0 <extInt_Config+0x944>)
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	4a57      	ldr	r2, [pc, #348]	; (80036f0 <extInt_Config+0x944>)
 8003592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003596:	6113      	str	r3, [r2, #16]
		break;
 8003598:	e1f9      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	4a54      	ldr	r2, [pc, #336]	; (80036f4 <extInt_Config+0x948>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d106      	bne.n	80035b4 <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 80035a6:	4b52      	ldr	r3, [pc, #328]	; (80036f0 <extInt_Config+0x944>)
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	4a51      	ldr	r2, [pc, #324]	; (80036f0 <extInt_Config+0x944>)
 80035ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035b0:	6113      	str	r3, [r2, #16]
		break;
 80035b2:	e1ec      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	4a4f      	ldr	r2, [pc, #316]	; (80036f8 <extInt_Config+0x94c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d106      	bne.n	80035ce <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 80035c0:	4b4b      	ldr	r3, [pc, #300]	; (80036f0 <extInt_Config+0x944>)
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	4a4a      	ldr	r2, [pc, #296]	; (80036f0 <extInt_Config+0x944>)
 80035c6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80035ca:	6113      	str	r3, [r2, #16]
		break;
 80035cc:	e1df      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	4a49      	ldr	r2, [pc, #292]	; (80036fc <extInt_Config+0x950>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d106      	bne.n	80035e8 <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 80035da:	4b45      	ldr	r3, [pc, #276]	; (80036f0 <extInt_Config+0x944>)
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	4a44      	ldr	r2, [pc, #272]	; (80036f0 <extInt_Config+0x944>)
 80035e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035e4:	6113      	str	r3, [r2, #16]
		break;
 80035e6:	e1d2      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	4a44      	ldr	r2, [pc, #272]	; (8003700 <extInt_Config+0x954>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d106      	bne.n	8003602 <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 80035f4:	4b3e      	ldr	r3, [pc, #248]	; (80036f0 <extInt_Config+0x944>)
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	4a3d      	ldr	r2, [pc, #244]	; (80036f0 <extInt_Config+0x944>)
 80035fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035fe:	6113      	str	r3, [r2, #16]
		break;
 8003600:	e1c5      	b.n	800398e <extInt_Config+0xbe2>
			__NOP();
 8003602:	bf00      	nop
		break;
 8003604:	e1c3      	b.n	800398e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 8003606:	4b3a      	ldr	r3, [pc, #232]	; (80036f0 <extInt_Config+0x944>)
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	4a39      	ldr	r2, [pc, #228]	; (80036f0 <extInt_Config+0x944>)
 800360c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003610:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4a3a      	ldr	r2, [pc, #232]	; (8003704 <extInt_Config+0x958>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d104      	bne.n	8003628 <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 800361e:	4b34      	ldr	r3, [pc, #208]	; (80036f0 <extInt_Config+0x944>)
 8003620:	4a33      	ldr	r2, [pc, #204]	; (80036f0 <extInt_Config+0x944>)
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8003626:	e1b2      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	4a2f      	ldr	r2, [pc, #188]	; (80036ec <extInt_Config+0x940>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d106      	bne.n	8003642 <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8003634:	4b2e      	ldr	r3, [pc, #184]	; (80036f0 <extInt_Config+0x944>)
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	4a2d      	ldr	r2, [pc, #180]	; (80036f0 <extInt_Config+0x944>)
 800363a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800363e:	6113      	str	r3, [r2, #16]
		break;
 8003640:	e1a5      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	4a2a      	ldr	r2, [pc, #168]	; (80036f4 <extInt_Config+0x948>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d106      	bne.n	800365c <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 800364e:	4b28      	ldr	r3, [pc, #160]	; (80036f0 <extInt_Config+0x944>)
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	4a27      	ldr	r2, [pc, #156]	; (80036f0 <extInt_Config+0x944>)
 8003654:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003658:	6113      	str	r3, [r2, #16]
		break;
 800365a:	e198      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	4a25      	ldr	r2, [pc, #148]	; (80036f8 <extInt_Config+0x94c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d106      	bne.n	8003676 <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8003668:	4b21      	ldr	r3, [pc, #132]	; (80036f0 <extInt_Config+0x944>)
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	4a20      	ldr	r2, [pc, #128]	; (80036f0 <extInt_Config+0x944>)
 800366e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003672:	6113      	str	r3, [r2, #16]
		break;
 8003674:	e18b      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	4a1f      	ldr	r2, [pc, #124]	; (80036fc <extInt_Config+0x950>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d106      	bne.n	8003690 <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8003682:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <extInt_Config+0x944>)
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	4a1a      	ldr	r2, [pc, #104]	; (80036f0 <extInt_Config+0x944>)
 8003688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800368c:	6113      	str	r3, [r2, #16]
		break;
 800368e:	e17e      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	4a1a      	ldr	r2, [pc, #104]	; (8003700 <extInt_Config+0x954>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d106      	bne.n	80036aa <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 800369c:	4b14      	ldr	r3, [pc, #80]	; (80036f0 <extInt_Config+0x944>)
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	4a13      	ldr	r2, [pc, #76]	; (80036f0 <extInt_Config+0x944>)
 80036a2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80036a6:	6113      	str	r3, [r2, #16]
		break;
 80036a8:	e171      	b.n	800398e <extInt_Config+0xbe2>
			__NOP();
 80036aa:	bf00      	nop
		break;
 80036ac:	e16f      	b.n	800398e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 80036ae:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <extInt_Config+0x944>)
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	4a0f      	ldr	r2, [pc, #60]	; (80036f0 <extInt_Config+0x944>)
 80036b4:	f023 030f 	bic.w	r3, r3, #15
 80036b8:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	4a10      	ldr	r2, [pc, #64]	; (8003704 <extInt_Config+0x958>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d104      	bne.n	80036d0 <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 80036c6:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <extInt_Config+0x944>)
 80036c8:	4a09      	ldr	r2, [pc, #36]	; (80036f0 <extInt_Config+0x944>)
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 80036ce:	e15e      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	4a05      	ldr	r2, [pc, #20]	; (80036ec <extInt_Config+0x940>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d115      	bne.n	8003708 <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 80036dc:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <extInt_Config+0x944>)
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	4a03      	ldr	r2, [pc, #12]	; (80036f0 <extInt_Config+0x944>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	6153      	str	r3, [r2, #20]
		break;
 80036e8:	e151      	b.n	800398e <extInt_Config+0xbe2>
 80036ea:	bf00      	nop
 80036ec:	40020400 	.word	0x40020400
 80036f0:	40013800 	.word	0x40013800
 80036f4:	40020800 	.word	0x40020800
 80036f8:	40020c00 	.word	0x40020c00
 80036fc:	40021000 	.word	0x40021000
 8003700:	40021c00 	.word	0x40021c00
 8003704:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	4a83      	ldr	r2, [pc, #524]	; (800391c <extInt_Config+0xb70>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d106      	bne.n	8003722 <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8003714:	4b82      	ldr	r3, [pc, #520]	; (8003920 <extInt_Config+0xb74>)
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	4a81      	ldr	r2, [pc, #516]	; (8003920 <extInt_Config+0xb74>)
 800371a:	f043 0302 	orr.w	r3, r3, #2
 800371e:	6153      	str	r3, [r2, #20]
		break;
 8003720:	e135      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4a7e      	ldr	r2, [pc, #504]	; (8003924 <extInt_Config+0xb78>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d106      	bne.n	800373c <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 800372e:	4b7c      	ldr	r3, [pc, #496]	; (8003920 <extInt_Config+0xb74>)
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	4a7b      	ldr	r2, [pc, #492]	; (8003920 <extInt_Config+0xb74>)
 8003734:	f043 0303 	orr.w	r3, r3, #3
 8003738:	6153      	str	r3, [r2, #20]
		break;
 800373a:	e128      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	4a79      	ldr	r2, [pc, #484]	; (8003928 <extInt_Config+0xb7c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d106      	bne.n	8003756 <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8003748:	4b75      	ldr	r3, [pc, #468]	; (8003920 <extInt_Config+0xb74>)
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	4a74      	ldr	r2, [pc, #464]	; (8003920 <extInt_Config+0xb74>)
 800374e:	f043 0304 	orr.w	r3, r3, #4
 8003752:	6153      	str	r3, [r2, #20]
		break;
 8003754:	e11b      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	4a73      	ldr	r2, [pc, #460]	; (800392c <extInt_Config+0xb80>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d106      	bne.n	8003770 <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8003762:	4b6f      	ldr	r3, [pc, #444]	; (8003920 <extInt_Config+0xb74>)
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	4a6e      	ldr	r2, [pc, #440]	; (8003920 <extInt_Config+0xb74>)
 8003768:	f043 0307 	orr.w	r3, r3, #7
 800376c:	6153      	str	r3, [r2, #20]
		break;
 800376e:	e10e      	b.n	800398e <extInt_Config+0xbe2>
			__NOP();
 8003770:	bf00      	nop
		break;
 8003772:	e10c      	b.n	800398e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 8003774:	4b6a      	ldr	r3, [pc, #424]	; (8003920 <extInt_Config+0xb74>)
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	4a69      	ldr	r2, [pc, #420]	; (8003920 <extInt_Config+0xb74>)
 800377a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800377e:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	4a6a      	ldr	r2, [pc, #424]	; (8003930 <extInt_Config+0xb84>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d104      	bne.n	8003796 <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 800378c:	4b64      	ldr	r3, [pc, #400]	; (8003920 <extInt_Config+0xb74>)
 800378e:	4a64      	ldr	r2, [pc, #400]	; (8003920 <extInt_Config+0xb74>)
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8003794:	e0fb      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	4a65      	ldr	r2, [pc, #404]	; (8003934 <extInt_Config+0xb88>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d106      	bne.n	80037b0 <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 80037a2:	4b5f      	ldr	r3, [pc, #380]	; (8003920 <extInt_Config+0xb74>)
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	4a5e      	ldr	r2, [pc, #376]	; (8003920 <extInt_Config+0xb74>)
 80037a8:	f043 0310 	orr.w	r3, r3, #16
 80037ac:	6153      	str	r3, [r2, #20]
		break;
 80037ae:	e0ee      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	4a59      	ldr	r2, [pc, #356]	; (800391c <extInt_Config+0xb70>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d106      	bne.n	80037ca <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 80037bc:	4b58      	ldr	r3, [pc, #352]	; (8003920 <extInt_Config+0xb74>)
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	4a57      	ldr	r2, [pc, #348]	; (8003920 <extInt_Config+0xb74>)
 80037c2:	f043 0320 	orr.w	r3, r3, #32
 80037c6:	6153      	str	r3, [r2, #20]
		break;
 80037c8:	e0e1      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	4a54      	ldr	r2, [pc, #336]	; (8003924 <extInt_Config+0xb78>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d106      	bne.n	80037e4 <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 80037d6:	4b52      	ldr	r3, [pc, #328]	; (8003920 <extInt_Config+0xb74>)
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	4a51      	ldr	r2, [pc, #324]	; (8003920 <extInt_Config+0xb74>)
 80037dc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80037e0:	6153      	str	r3, [r2, #20]
		break;
 80037e2:	e0d4      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	4a4f      	ldr	r2, [pc, #316]	; (8003928 <extInt_Config+0xb7c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d106      	bne.n	80037fe <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 80037f0:	4b4b      	ldr	r3, [pc, #300]	; (8003920 <extInt_Config+0xb74>)
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	4a4a      	ldr	r2, [pc, #296]	; (8003920 <extInt_Config+0xb74>)
 80037f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037fa:	6153      	str	r3, [r2, #20]
		break;
 80037fc:	e0c7      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	4a49      	ldr	r2, [pc, #292]	; (800392c <extInt_Config+0xb80>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d106      	bne.n	8003818 <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 800380a:	4b45      	ldr	r3, [pc, #276]	; (8003920 <extInt_Config+0xb74>)
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	4a44      	ldr	r2, [pc, #272]	; (8003920 <extInt_Config+0xb74>)
 8003810:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003814:	6153      	str	r3, [r2, #20]
		break;
 8003816:	e0ba      	b.n	800398e <extInt_Config+0xbe2>
			__NOP();
 8003818:	bf00      	nop
		break;
 800381a:	e0b8      	b.n	800398e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 800381c:	4b40      	ldr	r3, [pc, #256]	; (8003920 <extInt_Config+0xb74>)
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	4a3f      	ldr	r2, [pc, #252]	; (8003920 <extInt_Config+0xb74>)
 8003822:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003826:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	4a40      	ldr	r2, [pc, #256]	; (8003930 <extInt_Config+0xb84>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d104      	bne.n	800383e <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8003834:	4b3a      	ldr	r3, [pc, #232]	; (8003920 <extInt_Config+0xb74>)
 8003836:	4a3a      	ldr	r2, [pc, #232]	; (8003920 <extInt_Config+0xb74>)
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 800383c:	e0a7      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4a3b      	ldr	r2, [pc, #236]	; (8003934 <extInt_Config+0xb88>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d106      	bne.n	8003858 <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 800384a:	4b35      	ldr	r3, [pc, #212]	; (8003920 <extInt_Config+0xb74>)
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	4a34      	ldr	r2, [pc, #208]	; (8003920 <extInt_Config+0xb74>)
 8003850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003854:	6153      	str	r3, [r2, #20]
		break;
 8003856:	e09a      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	4a2f      	ldr	r2, [pc, #188]	; (800391c <extInt_Config+0xb70>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d106      	bne.n	8003872 <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8003864:	4b2e      	ldr	r3, [pc, #184]	; (8003920 <extInt_Config+0xb74>)
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	4a2d      	ldr	r2, [pc, #180]	; (8003920 <extInt_Config+0xb74>)
 800386a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800386e:	6153      	str	r3, [r2, #20]
		break;
 8003870:	e08d      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	4a2a      	ldr	r2, [pc, #168]	; (8003924 <extInt_Config+0xb78>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d106      	bne.n	800388c <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 800387e:	4b28      	ldr	r3, [pc, #160]	; (8003920 <extInt_Config+0xb74>)
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	4a27      	ldr	r2, [pc, #156]	; (8003920 <extInt_Config+0xb74>)
 8003884:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003888:	6153      	str	r3, [r2, #20]
		break;
 800388a:	e080      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	4a25      	ldr	r2, [pc, #148]	; (8003928 <extInt_Config+0xb7c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d106      	bne.n	80038a6 <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8003898:	4b21      	ldr	r3, [pc, #132]	; (8003920 <extInt_Config+0xb74>)
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	4a20      	ldr	r2, [pc, #128]	; (8003920 <extInt_Config+0xb74>)
 800389e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038a2:	6153      	str	r3, [r2, #20]
		break;
 80038a4:	e073      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4a1f      	ldr	r2, [pc, #124]	; (800392c <extInt_Config+0xb80>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d106      	bne.n	80038c0 <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 80038b2:	4b1b      	ldr	r3, [pc, #108]	; (8003920 <extInt_Config+0xb74>)
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	4a1a      	ldr	r2, [pc, #104]	; (8003920 <extInt_Config+0xb74>)
 80038b8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038bc:	6153      	str	r3, [r2, #20]
		break;
 80038be:	e066      	b.n	800398e <extInt_Config+0xbe2>
			__NOP();
 80038c0:	bf00      	nop
		break;
 80038c2:	e064      	b.n	800398e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 80038c4:	4b16      	ldr	r3, [pc, #88]	; (8003920 <extInt_Config+0xb74>)
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	4a15      	ldr	r2, [pc, #84]	; (8003920 <extInt_Config+0xb74>)
 80038ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038ce:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	4a16      	ldr	r2, [pc, #88]	; (8003930 <extInt_Config+0xb84>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d104      	bne.n	80038e6 <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 80038dc:	4b10      	ldr	r3, [pc, #64]	; (8003920 <extInt_Config+0xb74>)
 80038de:	4a10      	ldr	r2, [pc, #64]	; (8003920 <extInt_Config+0xb74>)
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 80038e4:	e053      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4a11      	ldr	r2, [pc, #68]	; (8003934 <extInt_Config+0xb88>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d106      	bne.n	8003900 <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 80038f2:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <extInt_Config+0xb74>)
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	4a0a      	ldr	r2, [pc, #40]	; (8003920 <extInt_Config+0xb74>)
 80038f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038fc:	6153      	str	r3, [r2, #20]
		break;
 80038fe:	e046      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	4a05      	ldr	r2, [pc, #20]	; (800391c <extInt_Config+0xb70>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d115      	bne.n	8003938 <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 800390c:	4b04      	ldr	r3, [pc, #16]	; (8003920 <extInt_Config+0xb74>)
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	4a03      	ldr	r2, [pc, #12]	; (8003920 <extInt_Config+0xb74>)
 8003912:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003916:	6153      	str	r3, [r2, #20]
		break;
 8003918:	e039      	b.n	800398e <extInt_Config+0xbe2>
 800391a:	bf00      	nop
 800391c:	40020800 	.word	0x40020800
 8003920:	40013800 	.word	0x40013800
 8003924:	40020c00 	.word	0x40020c00
 8003928:	40021000 	.word	0x40021000
 800392c:	40021c00 	.word	0x40021c00
 8003930:	40020000 	.word	0x40020000
 8003934:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	4a9d      	ldr	r2, [pc, #628]	; (8003bb4 <extInt_Config+0xe08>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d106      	bne.n	8003952 <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8003944:	4b9c      	ldr	r3, [pc, #624]	; (8003bb8 <extInt_Config+0xe0c>)
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	4a9b      	ldr	r2, [pc, #620]	; (8003bb8 <extInt_Config+0xe0c>)
 800394a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800394e:	6153      	str	r3, [r2, #20]
		break;
 8003950:	e01d      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	4a98      	ldr	r2, [pc, #608]	; (8003bbc <extInt_Config+0xe10>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d106      	bne.n	800396c <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 800395e:	4b96      	ldr	r3, [pc, #600]	; (8003bb8 <extInt_Config+0xe0c>)
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	4a95      	ldr	r2, [pc, #596]	; (8003bb8 <extInt_Config+0xe0c>)
 8003964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003968:	6153      	str	r3, [r2, #20]
		break;
 800396a:	e010      	b.n	800398e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	4a93      	ldr	r2, [pc, #588]	; (8003bc0 <extInt_Config+0xe14>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d106      	bne.n	8003986 <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8003978:	4b8f      	ldr	r3, [pc, #572]	; (8003bb8 <extInt_Config+0xe0c>)
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	4a8e      	ldr	r2, [pc, #568]	; (8003bb8 <extInt_Config+0xe0c>)
 800397e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003982:	6153      	str	r3, [r2, #20]
		break;
 8003984:	e003      	b.n	800398e <extInt_Config+0xbe2>
			__NOP();
 8003986:	bf00      	nop
		break;
 8003988:	e001      	b.n	800398e <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 800398a:	bf00      	nop
		break;
 800398c:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	791b      	ldrb	r3, [r3, #4]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d126      	bne.n	80039e4 <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003996:	4b8b      	ldr	r3, [pc, #556]	; (8003bc4 <extInt_Config+0xe18>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6812      	ldr	r2, [r2, #0]
 800399e:	7812      	ldrb	r2, [r2, #0]
 80039a0:	4611      	mov	r1, r2
 80039a2:	2201      	movs	r2, #1
 80039a4:	408a      	lsls	r2, r1
 80039a6:	43d2      	mvns	r2, r2
 80039a8:	4611      	mov	r1, r2
 80039aa:	4a86      	ldr	r2, [pc, #536]	; (8003bc4 <extInt_Config+0xe18>)
 80039ac:	400b      	ands	r3, r1
 80039ae:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80039b0:	4b84      	ldr	r3, [pc, #528]	; (8003bc4 <extInt_Config+0xe18>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6812      	ldr	r2, [r2, #0]
 80039b8:	7812      	ldrb	r2, [r2, #0]
 80039ba:	4611      	mov	r1, r2
 80039bc:	2201      	movs	r2, #1
 80039be:	408a      	lsls	r2, r1
 80039c0:	43d2      	mvns	r2, r2
 80039c2:	4611      	mov	r1, r2
 80039c4:	4a7f      	ldr	r2, [pc, #508]	; (8003bc4 <extInt_Config+0xe18>)
 80039c6:	400b      	ands	r3, r1
 80039c8:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80039ca:	4b7e      	ldr	r3, [pc, #504]	; (8003bc4 <extInt_Config+0xe18>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6812      	ldr	r2, [r2, #0]
 80039d2:	7812      	ldrb	r2, [r2, #0]
 80039d4:	4611      	mov	r1, r2
 80039d6:	2201      	movs	r2, #1
 80039d8:	408a      	lsls	r2, r1
 80039da:	4611      	mov	r1, r2
 80039dc:	4a79      	ldr	r2, [pc, #484]	; (8003bc4 <extInt_Config+0xe18>)
 80039de:	430b      	orrs	r3, r1
 80039e0:	6093      	str	r3, [r2, #8]
 80039e2:	e05c      	b.n	8003a9e <extInt_Config+0xcf2>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	791b      	ldrb	r3, [r3, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d126      	bne.n	8003a3a <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80039ec:	4b75      	ldr	r3, [pc, #468]	; (8003bc4 <extInt_Config+0xe18>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	7812      	ldrb	r2, [r2, #0]
 80039f6:	4611      	mov	r1, r2
 80039f8:	2201      	movs	r2, #1
 80039fa:	408a      	lsls	r2, r1
 80039fc:	43d2      	mvns	r2, r2
 80039fe:	4611      	mov	r1, r2
 8003a00:	4a70      	ldr	r2, [pc, #448]	; (8003bc4 <extInt_Config+0xe18>)
 8003a02:	400b      	ands	r3, r1
 8003a04:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003a06:	4b6f      	ldr	r3, [pc, #444]	; (8003bc4 <extInt_Config+0xe18>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6812      	ldr	r2, [r2, #0]
 8003a0e:	7812      	ldrb	r2, [r2, #0]
 8003a10:	4611      	mov	r1, r2
 8003a12:	2201      	movs	r2, #1
 8003a14:	408a      	lsls	r2, r1
 8003a16:	43d2      	mvns	r2, r2
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4a6a      	ldr	r2, [pc, #424]	; (8003bc4 <extInt_Config+0xe18>)
 8003a1c:	400b      	ands	r3, r1
 8003a1e:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003a20:	4b68      	ldr	r3, [pc, #416]	; (8003bc4 <extInt_Config+0xe18>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6812      	ldr	r2, [r2, #0]
 8003a28:	7812      	ldrb	r2, [r2, #0]
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	408a      	lsls	r2, r1
 8003a30:	4611      	mov	r1, r2
 8003a32:	4a64      	ldr	r2, [pc, #400]	; (8003bc4 <extInt_Config+0xe18>)
 8003a34:	430b      	orrs	r3, r1
 8003a36:	60d3      	str	r3, [r2, #12]
 8003a38:	e031      	b.n	8003a9e <extInt_Config+0xcf2>

	}
	else
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003a3a:	4b62      	ldr	r3, [pc, #392]	; (8003bc4 <extInt_Config+0xe18>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	7812      	ldrb	r2, [r2, #0]
 8003a44:	4611      	mov	r1, r2
 8003a46:	2201      	movs	r2, #1
 8003a48:	408a      	lsls	r2, r1
 8003a4a:	43d2      	mvns	r2, r2
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	4a5d      	ldr	r2, [pc, #372]	; (8003bc4 <extInt_Config+0xe18>)
 8003a50:	400b      	ands	r3, r1
 8003a52:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003a54:	4b5b      	ldr	r3, [pc, #364]	; (8003bc4 <extInt_Config+0xe18>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	7812      	ldrb	r2, [r2, #0]
 8003a5e:	4611      	mov	r1, r2
 8003a60:	2201      	movs	r2, #1
 8003a62:	408a      	lsls	r2, r1
 8003a64:	43d2      	mvns	r2, r2
 8003a66:	4611      	mov	r1, r2
 8003a68:	4a56      	ldr	r2, [pc, #344]	; (8003bc4 <extInt_Config+0xe18>)
 8003a6a:	400b      	ands	r3, r1
 8003a6c:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003a6e:	4b55      	ldr	r3, [pc, #340]	; (8003bc4 <extInt_Config+0xe18>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6812      	ldr	r2, [r2, #0]
 8003a76:	7812      	ldrb	r2, [r2, #0]
 8003a78:	4611      	mov	r1, r2
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	408a      	lsls	r2, r1
 8003a7e:	4611      	mov	r1, r2
 8003a80:	4a50      	ldr	r2, [pc, #320]	; (8003bc4 <extInt_Config+0xe18>)
 8003a82:	430b      	orrs	r3, r1
 8003a84:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003a86:	4b4f      	ldr	r3, [pc, #316]	; (8003bc4 <extInt_Config+0xe18>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6812      	ldr	r2, [r2, #0]
 8003a8e:	7812      	ldrb	r2, [r2, #0]
 8003a90:	4611      	mov	r1, r2
 8003a92:	2201      	movs	r2, #1
 8003a94:	408a      	lsls	r2, r1
 8003a96:	4611      	mov	r1, r2
 8003a98:	4a4a      	ldr	r2, [pc, #296]	; (8003bc4 <extInt_Config+0xe18>)
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	6093      	str	r3, [r2, #8]
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003a9e:	4b49      	ldr	r3, [pc, #292]	; (8003bc4 <extInt_Config+0xe18>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6812      	ldr	r2, [r2, #0]
 8003aa6:	7812      	ldrb	r2, [r2, #0]
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	2201      	movs	r2, #1
 8003aac:	408a      	lsls	r2, r1
 8003aae:	43d2      	mvns	r2, r2
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	4a44      	ldr	r2, [pc, #272]	; (8003bc4 <extInt_Config+0xe18>)
 8003ab4:	400b      	ands	r3, r1
 8003ab6:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003ab8:	4b42      	ldr	r3, [pc, #264]	; (8003bc4 <extInt_Config+0xe18>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	7812      	ldrb	r2, [r2, #0]
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	408a      	lsls	r2, r1
 8003ac8:	4611      	mov	r1, r2
 8003aca:	4a3e      	ldr	r2, [pc, #248]	; (8003bc4 <extInt_Config+0xe18>)
 8003acc:	430b      	orrs	r3, r1
 8003ace:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ad0:	b672      	cpsid	i
}
 8003ad2:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b0f      	cmp	r3, #15
 8003adc:	d862      	bhi.n	8003ba4 <extInt_Config+0xdf8>
 8003ade:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <extInt_Config+0xd38>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003b25 	.word	0x08003b25
 8003ae8:	08003b2d 	.word	0x08003b2d
 8003aec:	08003b35 	.word	0x08003b35
 8003af0:	08003b3d 	.word	0x08003b3d
 8003af4:	08003b45 	.word	0x08003b45
 8003af8:	08003b4d 	.word	0x08003b4d
 8003afc:	08003b55 	.word	0x08003b55
 8003b00:	08003b5d 	.word	0x08003b5d
 8003b04:	08003b65 	.word	0x08003b65
 8003b08:	08003b6d 	.word	0x08003b6d
 8003b0c:	08003b75 	.word	0x08003b75
 8003b10:	08003b7d 	.word	0x08003b7d
 8003b14:	08003b85 	.word	0x08003b85
 8003b18:	08003b8d 	.word	0x08003b8d
 8003b1c:	08003b95 	.word	0x08003b95
 8003b20:	08003b9d 	.word	0x08003b9d
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 8003b24:	2006      	movs	r0, #6
 8003b26:	f7ff f923 	bl	8002d70 <__NVIC_EnableIRQ>
		break;
 8003b2a:	e03c      	b.n	8003ba6 <extInt_Config+0xdfa>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 8003b2c:	2007      	movs	r0, #7
 8003b2e:	f7ff f91f 	bl	8002d70 <__NVIC_EnableIRQ>
		break;
 8003b32:	e038      	b.n	8003ba6 <extInt_Config+0xdfa>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 8003b34:	2008      	movs	r0, #8
 8003b36:	f7ff f91b 	bl	8002d70 <__NVIC_EnableIRQ>
		break;
 8003b3a:	e034      	b.n	8003ba6 <extInt_Config+0xdfa>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 8003b3c:	2009      	movs	r0, #9
 8003b3e:	f7ff f917 	bl	8002d70 <__NVIC_EnableIRQ>
		break;
 8003b42:	e030      	b.n	8003ba6 <extInt_Config+0xdfa>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 8003b44:	200a      	movs	r0, #10
 8003b46:	f7ff f913 	bl	8002d70 <__NVIC_EnableIRQ>
		break;
 8003b4a:	e02c      	b.n	8003ba6 <extInt_Config+0xdfa>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003b4c:	2017      	movs	r0, #23
 8003b4e:	f7ff f90f 	bl	8002d70 <__NVIC_EnableIRQ>
		break;
 8003b52:	e028      	b.n	8003ba6 <extInt_Config+0xdfa>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003b54:	2017      	movs	r0, #23
 8003b56:	f7ff f90b 	bl	8002d70 <__NVIC_EnableIRQ>
		break;
 8003b5a:	e024      	b.n	8003ba6 <extInt_Config+0xdfa>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003b5c:	2017      	movs	r0, #23
 8003b5e:	f7ff f907 	bl	8002d70 <__NVIC_EnableIRQ>
		break;
 8003b62:	e020      	b.n	8003ba6 <extInt_Config+0xdfa>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003b64:	2017      	movs	r0, #23
 8003b66:	f7ff f903 	bl	8002d70 <__NVIC_EnableIRQ>
		break;
 8003b6a:	e01c      	b.n	8003ba6 <extInt_Config+0xdfa>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003b6c:	2017      	movs	r0, #23
 8003b6e:	f7ff f8ff 	bl	8002d70 <__NVIC_EnableIRQ>
		break;
 8003b72:	e018      	b.n	8003ba6 <extInt_Config+0xdfa>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003b74:	2028      	movs	r0, #40	; 0x28
 8003b76:	f7ff f8fb 	bl	8002d70 <__NVIC_EnableIRQ>
		break;
 8003b7a:	e014      	b.n	8003ba6 <extInt_Config+0xdfa>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003b7c:	2028      	movs	r0, #40	; 0x28
 8003b7e:	f7ff f8f7 	bl	8002d70 <__NVIC_EnableIRQ>
		break;
 8003b82:	e010      	b.n	8003ba6 <extInt_Config+0xdfa>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003b84:	2028      	movs	r0, #40	; 0x28
 8003b86:	f7ff f8f3 	bl	8002d70 <__NVIC_EnableIRQ>
		break;
 8003b8a:	e00c      	b.n	8003ba6 <extInt_Config+0xdfa>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003b8c:	2028      	movs	r0, #40	; 0x28
 8003b8e:	f7ff f8ef 	bl	8002d70 <__NVIC_EnableIRQ>
		break;
 8003b92:	e008      	b.n	8003ba6 <extInt_Config+0xdfa>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003b94:	2028      	movs	r0, #40	; 0x28
 8003b96:	f7ff f8eb 	bl	8002d70 <__NVIC_EnableIRQ>
		break;
 8003b9a:	e004      	b.n	8003ba6 <extInt_Config+0xdfa>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003b9c:	2028      	movs	r0, #40	; 0x28
 8003b9e:	f7ff f8e7 	bl	8002d70 <__NVIC_EnableIRQ>
		break;
 8003ba2:	e000      	b.n	8003ba6 <extInt_Config+0xdfa>
	}

	default: {
		break;
 8003ba4:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8003ba6:	b662      	cpsie	i
}
 8003ba8:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40020c00 	.word	0x40020c00
 8003bb8:	40013800 	.word	0x40013800
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40021c00 	.word	0x40021c00
 8003bc4:	40013c00 	.word	0x40013c00

08003bc8 <callback_extInt0>:



//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
	__NOP();
 8003bcc:	bf00      	nop
}
 8003bce:	bf00      	nop
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt2(void){
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
	__NOP();
 8003bdc:	bf00      	nop
}
 8003bde:	bf00      	nop
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt4(void){
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
	__NOP();
 8003bec:	bf00      	nop
}
 8003bee:	bf00      	nop
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
	__NOP();
 8003bfc:	bf00      	nop
}
 8003bfe:	bf00      	nop
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
	__NOP();
 8003c0c:	bf00      	nop
}
 8003c0e:	bf00      	nop
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
	__NOP();
 8003c1c:	bf00      	nop
}
 8003c1e:	bf00      	nop
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
	__NOP();
 8003c2c:	bf00      	nop
}
 8003c2e:	bf00      	nop
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
	__NOP();
 8003c3c:	bf00      	nop
}
 8003c3e:	bf00      	nop
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
	__NOP();
 8003c4c:	bf00      	nop
}
 8003c4e:	bf00      	nop
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
	__NOP();
 8003c5c:	bf00      	nop
}
 8003c5e:	bf00      	nop
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
	__NOP();
 8003c6c:	bf00      	nop
}
 8003c6e:	bf00      	nop
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <callback_extInt13>:

__attribute__ ((weak)) void callback_extInt13(void){
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
	__NOP();
 8003c7c:	bf00      	nop
}
 8003c7e:	bf00      	nop
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt14(void){
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
	__NOP();
 8003c8c:	bf00      	nop
}
 8003c8e:	bf00      	nop
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
	__NOP();
 8003c9c:	bf00      	nop
}
 8003c9e:	bf00      	nop
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 8003cac:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <EXTI0_IRQHandler+0x28>)
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <EXTI0_IRQHandler+0x28>)
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	4a04      	ldr	r2, [pc, #16]	; (8003cd0 <EXTI0_IRQHandler+0x28>)
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 8003cc4:	f7ff ff80 	bl	8003bc8 <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 8003cc8:	e000      	b.n	8003ccc <EXTI0_IRQHandler+0x24>
		__NOP();
 8003cca:	bf00      	nop
}
 8003ccc:	bf00      	nop
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40013c00 	.word	0x40013c00

08003cd4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 8003cd8:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <EXTI1_IRQHandler+0x28>)
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <EXTI1_IRQHandler+0x28>)
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	4a04      	ldr	r2, [pc, #16]	; (8003cfc <EXTI1_IRQHandler+0x28>)
 8003cea:	f043 0302 	orr.w	r3, r3, #2
 8003cee:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 8003cf0:	f7fd fffe 	bl	8001cf0 <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 8003cf4:	e000      	b.n	8003cf8 <EXTI1_IRQHandler+0x24>
		__NOP();
 8003cf6:	bf00      	nop
}
 8003cf8:	bf00      	nop
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40013c00 	.word	0x40013c00

08003d00 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 8003d04:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <EXTI2_IRQHandler+0x28>)
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d008      	beq.n	8003d22 <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <EXTI2_IRQHandler+0x28>)
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	4a04      	ldr	r2, [pc, #16]	; (8003d28 <EXTI2_IRQHandler+0x28>)
 8003d16:	f043 0304 	orr.w	r3, r3, #4
 8003d1a:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 8003d1c:	f7ff ff5c 	bl	8003bd8 <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 8003d20:	e000      	b.n	8003d24 <EXTI2_IRQHandler+0x24>
		__NOP();
 8003d22:	bf00      	nop
}
 8003d24:	bf00      	nop
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40013c00 	.word	0x40013c00

08003d2c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 8003d30:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <EXTI3_IRQHandler+0x28>)
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <EXTI3_IRQHandler+0x28>)
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	4a04      	ldr	r2, [pc, #16]	; (8003d54 <EXTI3_IRQHandler+0x28>)
 8003d42:	f043 0308 	orr.w	r3, r3, #8
 8003d46:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 8003d48:	f7fe f824 	bl	8001d94 <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 8003d4c:	e000      	b.n	8003d50 <EXTI3_IRQHandler+0x24>
		__NOP();
 8003d4e:	bf00      	nop
}
 8003d50:	bf00      	nop
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40013c00 	.word	0x40013c00

08003d58 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 8003d5c:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <EXTI4_IRQHandler+0x28>)
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	f003 0310 	and.w	r3, r3, #16
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <EXTI4_IRQHandler+0x28>)
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	4a04      	ldr	r2, [pc, #16]	; (8003d80 <EXTI4_IRQHandler+0x28>)
 8003d6e:	f043 0310 	orr.w	r3, r3, #16
 8003d72:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 8003d74:	f7ff ff38 	bl	8003be8 <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 8003d78:	e000      	b.n	8003d7c <EXTI4_IRQHandler+0x24>
		__NOP();
 8003d7a:	bf00      	nop
}
 8003d7c:	bf00      	nop
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40013c00 	.word	0x40013c00

08003d84 <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 8003d88:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <EXTI9_5_IRQHandler+0xa0>)
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 8003d94:	4b23      	ldr	r3, [pc, #140]	; (8003e24 <EXTI9_5_IRQHandler+0xa0>)
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	4a22      	ldr	r2, [pc, #136]	; (8003e24 <EXTI9_5_IRQHandler+0xa0>)
 8003d9a:	f043 0320 	orr.w	r3, r3, #32
 8003d9e:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 8003da0:	f7ff ff2a 	bl	8003bf8 <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 8003da4:	e03c      	b.n	8003e20 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 8003da6:	4b1f      	ldr	r3, [pc, #124]	; (8003e24 <EXTI9_5_IRQHandler+0xa0>)
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d008      	beq.n	8003dc4 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 8003db2:	4b1c      	ldr	r3, [pc, #112]	; (8003e24 <EXTI9_5_IRQHandler+0xa0>)
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	4a1b      	ldr	r2, [pc, #108]	; (8003e24 <EXTI9_5_IRQHandler+0xa0>)
 8003db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dbc:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 8003dbe:	f7ff ff23 	bl	8003c08 <callback_extInt6>
}
 8003dc2:	e02d      	b.n	8003e20 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 8003dc4:	4b17      	ldr	r3, [pc, #92]	; (8003e24 <EXTI9_5_IRQHandler+0xa0>)
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 8003dd0:	4b14      	ldr	r3, [pc, #80]	; (8003e24 <EXTI9_5_IRQHandler+0xa0>)
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	4a13      	ldr	r2, [pc, #76]	; (8003e24 <EXTI9_5_IRQHandler+0xa0>)
 8003dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dda:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 8003ddc:	f7ff ff1c 	bl	8003c18 <callback_extInt7>
}
 8003de0:	e01e      	b.n	8003e20 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 8003de2:	4b10      	ldr	r3, [pc, #64]	; (8003e24 <EXTI9_5_IRQHandler+0xa0>)
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d008      	beq.n	8003e00 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 8003dee:	4b0d      	ldr	r3, [pc, #52]	; (8003e24 <EXTI9_5_IRQHandler+0xa0>)
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	4a0c      	ldr	r2, [pc, #48]	; (8003e24 <EXTI9_5_IRQHandler+0xa0>)
 8003df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df8:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 8003dfa:	f7ff ff15 	bl	8003c28 <callback_extInt8>
}
 8003dfe:	e00f      	b.n	8003e20 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 8003e00:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <EXTI9_5_IRQHandler+0xa0>)
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <EXTI9_5_IRQHandler+0xa0>)
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	4a04      	ldr	r2, [pc, #16]	; (8003e24 <EXTI9_5_IRQHandler+0xa0>)
 8003e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e16:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 8003e18:	f7ff ff0e 	bl	8003c38 <callback_extInt9>
}
 8003e1c:	e000      	b.n	8003e20 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 8003e1e:	bf00      	nop
}
 8003e20:	bf00      	nop
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40013c00 	.word	0x40013c00

08003e28 <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 8003e2c:	4b2e      	ldr	r3, [pc, #184]	; (8003ee8 <EXTI15_10_IRQHandler+0xc0>)
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 8003e38:	4b2b      	ldr	r3, [pc, #172]	; (8003ee8 <EXTI15_10_IRQHandler+0xc0>)
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	4a2a      	ldr	r2, [pc, #168]	; (8003ee8 <EXTI15_10_IRQHandler+0xc0>)
 8003e3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e42:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 8003e44:	f7ff ff00 	bl	8003c48 <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 8003e48:	e04b      	b.n	8003ee2 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 8003e4a:	4b27      	ldr	r3, [pc, #156]	; (8003ee8 <EXTI15_10_IRQHandler+0xc0>)
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d008      	beq.n	8003e68 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 8003e56:	4b24      	ldr	r3, [pc, #144]	; (8003ee8 <EXTI15_10_IRQHandler+0xc0>)
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	4a23      	ldr	r2, [pc, #140]	; (8003ee8 <EXTI15_10_IRQHandler+0xc0>)
 8003e5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e60:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 8003e62:	f7ff fef9 	bl	8003c58 <callback_extInt11>
}
 8003e66:	e03c      	b.n	8003ee2 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 8003e68:	4b1f      	ldr	r3, [pc, #124]	; (8003ee8 <EXTI15_10_IRQHandler+0xc0>)
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 8003e74:	4b1c      	ldr	r3, [pc, #112]	; (8003ee8 <EXTI15_10_IRQHandler+0xc0>)
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	4a1b      	ldr	r2, [pc, #108]	; (8003ee8 <EXTI15_10_IRQHandler+0xc0>)
 8003e7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e7e:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 8003e80:	f7ff fef2 	bl	8003c68 <callback_extInt12>
}
 8003e84:	e02d      	b.n	8003ee2 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 8003e86:	4b18      	ldr	r3, [pc, #96]	; (8003ee8 <EXTI15_10_IRQHandler+0xc0>)
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d008      	beq.n	8003ea4 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 8003e92:	4b15      	ldr	r3, [pc, #84]	; (8003ee8 <EXTI15_10_IRQHandler+0xc0>)
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	4a14      	ldr	r2, [pc, #80]	; (8003ee8 <EXTI15_10_IRQHandler+0xc0>)
 8003e98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e9c:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 8003e9e:	f7ff feeb 	bl	8003c78 <callback_extInt13>
}
 8003ea2:	e01e      	b.n	8003ee2 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 8003ea4:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <EXTI15_10_IRQHandler+0xc0>)
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d008      	beq.n	8003ec2 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 8003eb0:	4b0d      	ldr	r3, [pc, #52]	; (8003ee8 <EXTI15_10_IRQHandler+0xc0>)
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	4a0c      	ldr	r2, [pc, #48]	; (8003ee8 <EXTI15_10_IRQHandler+0xc0>)
 8003eb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eba:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 8003ebc:	f7ff fee4 	bl	8003c88 <callback_extInt14>
}
 8003ec0:	e00f      	b.n	8003ee2 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 8003ec2:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <EXTI15_10_IRQHandler+0xc0>)
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d008      	beq.n	8003ee0 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 8003ece:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <EXTI15_10_IRQHandler+0xc0>)
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	4a05      	ldr	r2, [pc, #20]	; (8003ee8 <EXTI15_10_IRQHandler+0xc0>)
 8003ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ed8:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 8003eda:	f7ff fedd 	bl	8003c98 <callback_extInt15>
}
 8003ede:	e000      	b.n	8003ee2 <EXTI15_10_IRQHandler+0xba>
		__NOP();
 8003ee0:	bf00      	nop
}
 8003ee2:	bf00      	nop
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40013c00 	.word	0x40013c00

08003eec <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	4608      	mov	r0, r1
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4603      	mov	r3, r0
 8003efc:	70fb      	strb	r3, [r7, #3]
 8003efe:	460b      	mov	r3, r1
 8003f00:	70bb      	strb	r3, [r7, #2]
 8003f02:	4613      	mov	r3, r2
 8003f04:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	78fa      	ldrb	r2, [r7, #3]
 8003f0a:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	78ba      	ldrb	r2, [r7, #2]
 8003f10:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	787a      	ldrb	r2, [r7, #1]
 8003f16:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	7c3a      	ldrb	r2, [r7, #16]
 8003f1c:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	7d3a      	ldrb	r2, [r7, #20]
 8003f22:	715a      	strb	r2, [r3, #5]
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	4a88      	ldr	r2, [pc, #544]	; (8004168 <GPIO_Config+0x238>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d106      	bne.n	8003f58 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 8003f4a:	4b88      	ldr	r3, [pc, #544]	; (800416c <GPIO_Config+0x23c>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	4a87      	ldr	r2, [pc, #540]	; (800416c <GPIO_Config+0x23c>)
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	6313      	str	r3, [r2, #48]	; 0x30
 8003f56:	e03a      	b.n	8003fce <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	4a84      	ldr	r2, [pc, #528]	; (8004170 <GPIO_Config+0x240>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d106      	bne.n	8003f70 <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 8003f62:	4b82      	ldr	r3, [pc, #520]	; (800416c <GPIO_Config+0x23c>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	4a81      	ldr	r2, [pc, #516]	; (800416c <GPIO_Config+0x23c>)
 8003f68:	f043 0302 	orr.w	r3, r3, #2
 8003f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f6e:	e02e      	b.n	8003fce <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	4a7f      	ldr	r2, [pc, #508]	; (8004174 <GPIO_Config+0x244>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d106      	bne.n	8003f88 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 8003f7a:	4b7c      	ldr	r3, [pc, #496]	; (800416c <GPIO_Config+0x23c>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	4a7b      	ldr	r2, [pc, #492]	; (800416c <GPIO_Config+0x23c>)
 8003f80:	f043 0304 	orr.w	r3, r3, #4
 8003f84:	6313      	str	r3, [r2, #48]	; 0x30
 8003f86:	e022      	b.n	8003fce <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4a7a      	ldr	r2, [pc, #488]	; (8004178 <GPIO_Config+0x248>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d106      	bne.n	8003fa0 <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 8003f92:	4b76      	ldr	r3, [pc, #472]	; (800416c <GPIO_Config+0x23c>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	4a75      	ldr	r2, [pc, #468]	; (800416c <GPIO_Config+0x23c>)
 8003f98:	f043 0308 	orr.w	r3, r3, #8
 8003f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f9e:	e016      	b.n	8003fce <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	4a75      	ldr	r2, [pc, #468]	; (800417c <GPIO_Config+0x24c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d106      	bne.n	8003fb8 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 8003faa:	4b70      	ldr	r3, [pc, #448]	; (800416c <GPIO_Config+0x23c>)
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	4a6f      	ldr	r2, [pc, #444]	; (800416c <GPIO_Config+0x23c>)
 8003fb0:	f043 0310 	orr.w	r3, r3, #16
 8003fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fb6:	e00a      	b.n	8003fce <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	4a70      	ldr	r2, [pc, #448]	; (8004180 <GPIO_Config+0x250>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d105      	bne.n	8003fce <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 8003fc2:	4b6a      	ldr	r3, [pc, #424]	; (800416c <GPIO_Config+0x23c>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	4a69      	ldr	r2, [pc, #420]	; (800416c <GPIO_Config+0x23c>)
 8003fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fcc:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	785b      	ldrb	r3, [r3, #1]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	2103      	movs	r1, #3
 8003fee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	400a      	ands	r2, r1
 8003ffc:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	6819      	ldr	r1, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	430a      	orrs	r2, r1
 800400c:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	789b      	ldrb	r3, [r3, #2]
 8004012:	461a      	mov	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	4619      	mov	r1, r3
 800402a:	2301      	movs	r3, #1
 800402c:	408b      	lsls	r3, r1
 800402e:	43db      	mvns	r3, r3
 8004030:	4619      	mov	r1, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	400a      	ands	r2, r1
 8004038:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	6859      	ldr	r1, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	78db      	ldrb	r3, [r3, #3]
 800404e:	461a      	mov	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	689a      	ldr	r2, [r3, #8]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	2103      	movs	r1, #3
 800406a:	fa01 f303 	lsl.w	r3, r1, r3
 800406e:	43db      	mvns	r3, r3
 8004070:	4619      	mov	r1, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	400a      	ands	r2, r1
 8004078:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	6899      	ldr	r1, [r3, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	430a      	orrs	r2, r1
 8004088:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	791b      	ldrb	r3, [r3, #4]
 800408e:	461a      	mov	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	2103      	movs	r1, #3
 80040aa:	fa01 f303 	lsl.w	r3, r1, r3
 80040ae:	43db      	mvns	r3, r3
 80040b0:	4619      	mov	r1, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	400a      	ands	r2, r1
 80040b8:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	68d9      	ldr	r1, [r3, #12]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	785b      	ldrb	r3, [r3, #1]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d143      	bne.n	800415a <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b07      	cmp	r3, #7
 80040d8:	d81f      	bhi.n	800411a <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	6a1a      	ldr	r2, [r3, #32]
 80040e8:	210f      	movs	r1, #15
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	fa01 f303 	lsl.w	r3, r1, r3
 80040f0:	43db      	mvns	r3, r3
 80040f2:	4619      	mov	r1, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	400a      	ands	r2, r1
 80040fa:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	6a1a      	ldr	r2, [r3, #32]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	795b      	ldrb	r3, [r3, #5]
 8004106:	4619      	mov	r1, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	fa01 f303 	lsl.w	r3, r1, r3
 800410e:	4619      	mov	r1, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	430a      	orrs	r2, r1
 8004116:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8004118:	e01f      	b.n	800415a <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	3b08      	subs	r3, #8
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800412a:	210f      	movs	r1, #15
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	fa01 f303 	lsl.w	r3, r1, r3
 8004132:	43db      	mvns	r3, r3
 8004134:	4619      	mov	r1, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	400a      	ands	r2, r1
 800413c:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	795b      	ldrb	r3, [r3, #5]
 8004148:	4619      	mov	r1, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	fa01 f303 	lsl.w	r3, r1, r3
 8004150:	4619      	mov	r1, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	430a      	orrs	r2, r1
 8004158:	625a      	str	r2, [r3, #36]	; 0x24
}
 800415a:	bf00      	nop
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	40020000 	.word	0x40020000
 800416c:	40023800 	.word	0x40023800
 8004170:	40020400 	.word	0x40020400
 8004174:	40020800 	.word	0x40020800
 8004178:	40020c00 	.word	0x40020c00
 800417c:	40021000 	.word	0x40021000
 8004180:	40021c00 	.word	0x40021c00

08004184 <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 8004190:	78fb      	ldrb	r3, [r7, #3]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d10d      	bne.n	80041b2 <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	699a      	ldr	r2, [r3, #24]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	4619      	mov	r1, r3
 80041a2:	2301      	movs	r3, #1
 80041a4:	408b      	lsls	r3, r1
 80041a6:	4619      	mov	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 80041b0:	e00d      	b.n	80041ce <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	699a      	ldr	r2, [r3, #24]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	3310      	adds	r3, #16
 80041be:	2101      	movs	r1, #1
 80041c0:	fa01 f303 	lsl.w	r3, r1, r3
 80041c4:	4619      	mov	r1, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	619a      	str	r2, [r3, #24]
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	695a      	ldr	r2, [r3, #20]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	4619      	mov	r1, r3
 80041ee:	2301      	movs	r3, #1
 80041f0:	408b      	lsls	r3, r1
 80041f2:	4619      	mov	r1, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	404a      	eors	r2, r1
 80041fa:	615a      	str	r2, [r3, #20]
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 8004212:	4a39      	ldr	r2, [pc, #228]	; (80042f8 <configPLL+0xf0>)
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	2b31      	cmp	r3, #49	; 0x31
 800421c:	d804      	bhi.n	8004228 <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 800421e:	4b37      	ldr	r3, [pc, #220]	; (80042fc <configPLL+0xf4>)
 8004220:	4a36      	ldr	r2, [pc, #216]	; (80042fc <configPLL+0xf4>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	6093      	str	r3, [r2, #8]
 8004226:	e005      	b.n	8004234 <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004228:	4b34      	ldr	r3, [pc, #208]	; (80042fc <configPLL+0xf4>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	4a33      	ldr	r2, [pc, #204]	; (80042fc <configPLL+0xf4>)
 800422e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8004232:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 8004234:	4b31      	ldr	r3, [pc, #196]	; (80042fc <configPLL+0xf4>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	4a30      	ldr	r2, [pc, #192]	; (80042fc <configPLL+0xf4>)
 800423a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800423e:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 8004240:	4b2e      	ldr	r3, [pc, #184]	; (80042fc <configPLL+0xf4>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	4a2d      	ldr	r2, [pc, #180]	; (80042fc <configPLL+0xf4>)
 8004246:	f043 0312 	orr.w	r3, r3, #18
 800424a:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 800424c:	4b2b      	ldr	r3, [pc, #172]	; (80042fc <configPLL+0xf4>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	79fa      	ldrb	r2, [r7, #7]
 8004252:	0092      	lsls	r2, r2, #2
 8004254:	3a0e      	subs	r2, #14
 8004256:	0192      	lsls	r2, r2, #6
 8004258:	4611      	mov	r1, r2
 800425a:	4a28      	ldr	r2, [pc, #160]	; (80042fc <configPLL+0xf4>)
 800425c:	430b      	orrs	r3, r1
 800425e:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 8004260:	4b26      	ldr	r3, [pc, #152]	; (80042fc <configPLL+0xf4>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	4a25      	ldr	r2, [pc, #148]	; (80042fc <configPLL+0xf4>)
 8004266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426a:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 800426c:	4b23      	ldr	r3, [pc, #140]	; (80042fc <configPLL+0xf4>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a22      	ldr	r2, [pc, #136]	; (80042fc <configPLL+0xf4>)
 8004272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004276:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8004278:	e000      	b.n	800427c <configPLL+0x74>
	{
		__NOP();
 800427a:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 800427c:	4b1f      	ldr	r3, [pc, #124]	; (80042fc <configPLL+0xf4>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0f8      	beq.n	800427a <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	2b5a      	cmp	r3, #90	; 0x5a
 800428c:	d909      	bls.n	80042a2 <configPLL+0x9a>
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	2b64      	cmp	r3, #100	; 0x64
 8004292:	d806      	bhi.n	80042a2 <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8004294:	4b1a      	ldr	r3, [pc, #104]	; (8004300 <configPLL+0xf8>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a19      	ldr	r2, [pc, #100]	; (8004300 <configPLL+0xf8>)
 800429a:	f043 0303 	orr.w	r3, r3, #3
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	e01d      	b.n	80042de <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	2b40      	cmp	r3, #64	; 0x40
 80042a6:	d909      	bls.n	80042bc <configPLL+0xb4>
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	2b5a      	cmp	r3, #90	; 0x5a
 80042ac:	d806      	bhi.n	80042bc <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 80042ae:	4b14      	ldr	r3, [pc, #80]	; (8004300 <configPLL+0xf8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a13      	ldr	r2, [pc, #76]	; (8004300 <configPLL+0xf8>)
 80042b4:	f043 0302 	orr.w	r3, r3, #2
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	e010      	b.n	80042de <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 80042bc:	79fb      	ldrb	r3, [r7, #7]
 80042be:	2b1e      	cmp	r3, #30
 80042c0:	d909      	bls.n	80042d6 <configPLL+0xce>
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	2b40      	cmp	r3, #64	; 0x40
 80042c6:	d806      	bhi.n	80042d6 <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 80042c8:	4b0d      	ldr	r3, [pc, #52]	; (8004300 <configPLL+0xf8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a0c      	ldr	r2, [pc, #48]	; (8004300 <configPLL+0xf8>)
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	6013      	str	r3, [r2, #0]
 80042d4:	e003      	b.n	80042de <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 80042d6:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <configPLL+0xf8>)
 80042d8:	4a09      	ldr	r2, [pc, #36]	; (8004300 <configPLL+0xf8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 80042de:	4b07      	ldr	r3, [pc, #28]	; (80042fc <configPLL+0xf4>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	4a06      	ldr	r2, [pc, #24]	; (80042fc <configPLL+0xf4>)
 80042e4:	f043 0302 	orr.w	r3, r3, #2
 80042e8:	6093      	str	r3, [r2, #8]

}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	200004b4 	.word	0x200004b4
 80042fc:	40023800 	.word	0x40023800
 8004300:	40023c00 	.word	0x40023c00

08004304 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 800430a:	2300      	movs	r3, #0
 800430c:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 800430e:	4b09      	ldr	r3, [pc, #36]	; (8004334 <getConfigPLL+0x30>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d103      	bne.n	8004322 <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 800431a:	4b07      	ldr	r3, [pc, #28]	; (8004338 <getConfigPLL+0x34>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	71fb      	strb	r3, [r7, #7]
 8004320:	e001      	b.n	8004326 <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 8004322:	2310      	movs	r3, #16
 8004324:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 8004326:	79fb      	ldrb	r3, [r7, #7]
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	40023800 	.word	0x40023800
 8004338:	200004b4 	.word	0x200004b4

0800433c <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 8004342:	f7ff ffdf 	bl	8004304 <getConfigPLL>
 8004346:	4603      	mov	r3, r0
 8004348:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 800434a:	2300      	movs	r3, #0
 800434c:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 800434e:	79bb      	ldrb	r3, [r7, #6]
 8004350:	2b31      	cmp	r3, #49	; 0x31
 8004352:	d802      	bhi.n	800435a <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 8004354:	79bb      	ldrb	r3, [r7, #6]
 8004356:	71fb      	strb	r3, [r7, #7]
 8004358:	e002      	b.n	8004360 <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 800435a:	79bb      	ldrb	r3, [r7, #6]
 800435c:	089b      	lsrs	r3, r3, #2
 800435e:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 8004360:	79fb      	ldrb	r3, [r7, #7]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <configMCO2>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2(uint8_t value)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0b11<<RCC_CFGR_MCO2_Pos);
 8004376:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <configMCO2+0x34>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	4a09      	ldr	r2, [pc, #36]	; (80043a0 <configMCO2+0x34>)
 800437c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004380:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (value<<RCC_CFGR_MCO2_Pos);
 8004382:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <configMCO2+0x34>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	79fa      	ldrb	r2, [r7, #7]
 8004388:	0792      	lsls	r2, r2, #30
 800438a:	4611      	mov	r1, r2
 800438c:	4a04      	ldr	r2, [pc, #16]	; (80043a0 <configMCO2+0x34>)
 800438e:	430b      	orrs	r3, r1
 8004390:	6093      	str	r3, [r2, #8]
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40023800 	.word	0x40023800

080043a4 <configMCO2PRE>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2PRE(uint8_t value)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	71fb      	strb	r3, [r7, #7]
	//Selecionamos el prescaler de acuerdo al valor definido
	switch (value){
 80043ae:	79fb      	ldrb	r3, [r7, #7]
 80043b0:	3b01      	subs	r3, #1
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d84b      	bhi.n	800444e <configMCO2PRE+0xaa>
 80043b6:	a201      	add	r2, pc, #4	; (adr r2, 80043bc <configMCO2PRE+0x18>)
 80043b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043bc:	080043d1 	.word	0x080043d1
 80043c0:	080043e7 	.word	0x080043e7
 80043c4:	08004401 	.word	0x08004401
 80043c8:	0800441b 	.word	0x0800441b
 80043cc:	08004435 	.word	0x08004435
		case 1:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80043d0:	4b23      	ldr	r3, [pc, #140]	; (8004460 <configMCO2PRE+0xbc>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	4a22      	ldr	r2, [pc, #136]	; (8004460 <configMCO2PRE+0xbc>)
 80043d6:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80043da:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b000<<RCC_CFGR_MCO2PRE_Pos);
 80043dc:	4b20      	ldr	r3, [pc, #128]	; (8004460 <configMCO2PRE+0xbc>)
 80043de:	4a20      	ldr	r2, [pc, #128]	; (8004460 <configMCO2PRE+0xbc>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	6093      	str	r3, [r2, #8]
			break;
 80043e4:	e035      	b.n	8004452 <configMCO2PRE+0xae>
		}
		case 2:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80043e6:	4b1e      	ldr	r3, [pc, #120]	; (8004460 <configMCO2PRE+0xbc>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	4a1d      	ldr	r2, [pc, #116]	; (8004460 <configMCO2PRE+0xbc>)
 80043ec:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80043f0:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100<<RCC_CFGR_MCO2PRE_Pos);
 80043f2:	4b1b      	ldr	r3, [pc, #108]	; (8004460 <configMCO2PRE+0xbc>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	4a1a      	ldr	r2, [pc, #104]	; (8004460 <configMCO2PRE+0xbc>)
 80043f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043fc:	6093      	str	r3, [r2, #8]
			break;
 80043fe:	e028      	b.n	8004452 <configMCO2PRE+0xae>
		}
		case 3:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8004400:	4b17      	ldr	r3, [pc, #92]	; (8004460 <configMCO2PRE+0xbc>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	4a16      	ldr	r2, [pc, #88]	; (8004460 <configMCO2PRE+0xbc>)
 8004406:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 800440a:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b101<<RCC_CFGR_MCO2PRE_Pos);
 800440c:	4b14      	ldr	r3, [pc, #80]	; (8004460 <configMCO2PRE+0xbc>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	4a13      	ldr	r2, [pc, #76]	; (8004460 <configMCO2PRE+0xbc>)
 8004412:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
 8004416:	6093      	str	r3, [r2, #8]
			break;
 8004418:	e01b      	b.n	8004452 <configMCO2PRE+0xae>
		}
		case 4:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 800441a:	4b11      	ldr	r3, [pc, #68]	; (8004460 <configMCO2PRE+0xbc>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	4a10      	ldr	r2, [pc, #64]	; (8004460 <configMCO2PRE+0xbc>)
 8004420:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8004424:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b110<<RCC_CFGR_MCO2PRE_Pos);
 8004426:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <configMCO2PRE+0xbc>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	4a0d      	ldr	r2, [pc, #52]	; (8004460 <configMCO2PRE+0xbc>)
 800442c:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8004430:	6093      	str	r3, [r2, #8]
			break;
 8004432:	e00e      	b.n	8004452 <configMCO2PRE+0xae>
		}
		case 5:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8004434:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <configMCO2PRE+0xbc>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	4a09      	ldr	r2, [pc, #36]	; (8004460 <configMCO2PRE+0xbc>)
 800443a:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 800443e:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b111<<RCC_CFGR_MCO2PRE_Pos);
 8004440:	4b07      	ldr	r3, [pc, #28]	; (8004460 <configMCO2PRE+0xbc>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	4a06      	ldr	r2, [pc, #24]	; (8004460 <configMCO2PRE+0xbc>)
 8004446:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800444a:	6093      	str	r3, [r2, #8]
			break;
 800444c:	e001      	b.n	8004452 <configMCO2PRE+0xae>
		}
		default:
		{
			__NOP();
 800444e:	bf00      	nop
			break;
 8004450:	bf00      	nop
		}
	}

}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40023800 	.word	0x40023800

08004464 <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004474:	d106      	bne.n	8004484 <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8004476:	4b81      	ldr	r3, [pc, #516]	; (800467c <pwm_Config+0x218>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	4a80      	ldr	r2, [pc, #512]	; (800467c <pwm_Config+0x218>)
 800447c:	f043 0301 	orr.w	r3, r3, #1
 8004480:	6413      	str	r3, [r2, #64]	; 0x40
 8004482:	e024      	b.n	80044ce <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	4a7d      	ldr	r2, [pc, #500]	; (8004680 <pwm_Config+0x21c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d106      	bne.n	800449c <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800448e:	4b7b      	ldr	r3, [pc, #492]	; (800467c <pwm_Config+0x218>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	4a7a      	ldr	r2, [pc, #488]	; (800467c <pwm_Config+0x218>)
 8004494:	f043 0302 	orr.w	r3, r3, #2
 8004498:	6413      	str	r3, [r2, #64]	; 0x40
 800449a:	e018      	b.n	80044ce <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	4a78      	ldr	r2, [pc, #480]	; (8004684 <pwm_Config+0x220>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d106      	bne.n	80044b4 <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80044a6:	4b75      	ldr	r3, [pc, #468]	; (800467c <pwm_Config+0x218>)
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	4a74      	ldr	r2, [pc, #464]	; (800467c <pwm_Config+0x218>)
 80044ac:	f043 0304 	orr.w	r3, r3, #4
 80044b0:	6413      	str	r3, [r2, #64]	; 0x40
 80044b2:	e00c      	b.n	80044ce <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	4a73      	ldr	r2, [pc, #460]	; (8004688 <pwm_Config+0x224>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d106      	bne.n	80044cc <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80044be:	4b6f      	ldr	r3, [pc, #444]	; (800467c <pwm_Config+0x218>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	4a6e      	ldr	r2, [pc, #440]	; (800467c <pwm_Config+0x218>)
 80044c4:	f043 0308 	orr.w	r3, r3, #8
 80044c8:	6413      	str	r3, [r2, #64]	; 0x40
 80044ca:	e000      	b.n	80044ce <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 80044cc:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fa4c 	bl	800496c <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b03      	cmp	r3, #3
 80044da:	f200 8118 	bhi.w	800470e <pwm_Config+0x2aa>
 80044de:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <pwm_Config+0x80>)
 80044e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e4:	080044f5 	.word	0x080044f5
 80044e8:	08004577 	.word	0x08004577
 80044ec:	080045f9 	.word	0x080045f9
 80044f0:	0800468d 	.word	0x0800468d
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f022 0203 	bic.w	r2, r2, #3
 8004502:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	699a      	ldr	r2, [r3, #24]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004512:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004522:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f022 0208 	bic.w	r2, r2, #8
 8004532:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	699a      	ldr	r2, [r3, #24]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f042 0208 	orr.w	r2, r2, #8
 8004542:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f022 0204 	bic.w	r2, r2, #4
 8004552:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	699a      	ldr	r2, [r3, #24]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f042 0204 	orr.w	r2, r2, #4
 8004562:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004572:	619a      	str	r2, [r3, #24]

		break;
 8004574:	e0cc      	b.n	8004710 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	699a      	ldr	r2, [r3, #24]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f022 0203 	bic.w	r2, r2, #3
 8004584:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	699a      	ldr	r2, [r3, #24]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004594:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	699a      	ldr	r2, [r3, #24]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80045a4:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	699a      	ldr	r2, [r3, #24]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045b4:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	699a      	ldr	r2, [r3, #24]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045c4:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	699a      	ldr	r2, [r3, #24]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d4:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	699a      	ldr	r2, [r3, #24]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045e4:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	699a      	ldr	r2, [r3, #24]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045f4:	619a      	str	r2, [r3, #24]

		break;
 80045f6:	e08b      	b.n	8004710 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	69da      	ldr	r2, [r3, #28]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f022 0203 	bic.w	r2, r2, #3
 8004606:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	69da      	ldr	r2, [r3, #28]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004616:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	69da      	ldr	r2, [r3, #28]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004626:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	69da      	ldr	r2, [r3, #28]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f022 0208 	bic.w	r2, r2, #8
 8004636:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	69da      	ldr	r2, [r3, #28]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f042 0208 	orr.w	r2, r2, #8
 8004646:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	69da      	ldr	r2, [r3, #28]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f022 0204 	bic.w	r2, r2, #4
 8004656:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	69da      	ldr	r2, [r3, #28]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f042 0204 	orr.w	r2, r2, #4
 8004666:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	69da      	ldr	r2, [r3, #28]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004676:	61da      	str	r2, [r3, #28]

		break;
 8004678:	e04a      	b.n	8004710 <pwm_Config+0x2ac>
 800467a:	bf00      	nop
 800467c:	40023800 	.word	0x40023800
 8004680:	40000400 	.word	0x40000400
 8004684:	40000800 	.word	0x40000800
 8004688:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	69da      	ldr	r2, [r3, #28]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800469a:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	69da      	ldr	r2, [r3, #28]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80046aa:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	69da      	ldr	r2, [r3, #28]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80046ba:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	69da      	ldr	r2, [r3, #28]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046ca:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	69da      	ldr	r2, [r3, #28]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046da:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	69da      	ldr	r2, [r3, #28]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ea:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	69da      	ldr	r2, [r3, #28]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046fa:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	69da      	ldr	r2, [r3, #28]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800470a:	61da      	str	r2, [r3, #28]

		break;
 800470c:	e000      	b.n	8004710 <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 800470e:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	791b      	ldrb	r3, [r3, #4]
 8004714:	4619      	mov	r1, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f896 	bl	8004848 <statusPolarityPWM>

}
 800471c:	bf00      	nop
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b03      	cmp	r3, #3
 8004736:	d87f      	bhi.n	8004838 <statusInOutPWM+0x114>
 8004738:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <statusInOutPWM+0x1c>)
 800473a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473e:	bf00      	nop
 8004740:	08004751 	.word	0x08004751
 8004744:	0800478b 	.word	0x0800478b
 8004748:	080047c5 	.word	0x080047c5
 800474c:	080047ff 	.word	0x080047ff
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d110      	bne.n	8004778 <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	6a1a      	ldr	r2, [r3, #32]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f022 0201 	bic.w	r2, r2, #1
 8004764:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	6a1a      	ldr	r2, [r3, #32]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f042 0201 	orr.w	r2, r2, #1
 8004774:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 8004776:	e060      	b.n	800483a <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	6a1a      	ldr	r2, [r3, #32]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f022 0201 	bic.w	r2, r2, #1
 8004786:	621a      	str	r2, [r3, #32]
		break;
 8004788:	e057      	b.n	800483a <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 800478a:	78fb      	ldrb	r3, [r7, #3]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d110      	bne.n	80047b2 <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	6a1a      	ldr	r2, [r3, #32]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f022 0210 	bic.w	r2, r2, #16
 800479e:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	6a1a      	ldr	r2, [r3, #32]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f042 0210 	orr.w	r2, r2, #16
 80047ae:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 80047b0:	e043      	b.n	800483a <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	6a1a      	ldr	r2, [r3, #32]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f022 0210 	bic.w	r2, r2, #16
 80047c0:	621a      	str	r2, [r3, #32]
		break;
 80047c2:	e03a      	b.n	800483a <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d110      	bne.n	80047ec <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	6a1a      	ldr	r2, [r3, #32]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047d8:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	6a1a      	ldr	r2, [r3, #32]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047e8:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 80047ea:	e026      	b.n	800483a <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	6a1a      	ldr	r2, [r3, #32]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047fa:	621a      	str	r2, [r3, #32]
		break;
 80047fc:	e01d      	b.n	800483a <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 80047fe:	78fb      	ldrb	r3, [r7, #3]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d110      	bne.n	8004826 <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	6a1a      	ldr	r2, [r3, #32]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004812:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	6a1a      	ldr	r2, [r3, #32]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004822:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 8004824:	e009      	b.n	800483a <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	6a1a      	ldr	r2, [r3, #32]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004834:	621a      	str	r2, [r3, #32]
		break;
 8004836:	e000      	b.n	800483a <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 8004838:	bf00      	nop
	}
	}
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop

08004848 <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	460b      	mov	r3, r1
 8004852:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b03      	cmp	r3, #3
 800485a:	d87f      	bhi.n	800495c <statusPolarityPWM+0x114>
 800485c:	a201      	add	r2, pc, #4	; (adr r2, 8004864 <statusPolarityPWM+0x1c>)
 800485e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004862:	bf00      	nop
 8004864:	08004875 	.word	0x08004875
 8004868:	080048af 	.word	0x080048af
 800486c:	080048e9 	.word	0x080048e9
 8004870:	08004923 	.word	0x08004923
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 8004874:	78fb      	ldrb	r3, [r7, #3]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d110      	bne.n	800489c <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	6a1a      	ldr	r2, [r3, #32]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f022 0202 	bic.w	r2, r2, #2
 8004888:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	6a1a      	ldr	r2, [r3, #32]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f042 0202 	orr.w	r2, r2, #2
 8004898:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 800489a:	e060      	b.n	800495e <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	6a1a      	ldr	r2, [r3, #32]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f022 0202 	bic.w	r2, r2, #2
 80048aa:	621a      	str	r2, [r3, #32]
		break;
 80048ac:	e057      	b.n	800495e <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 80048ae:	78fb      	ldrb	r3, [r7, #3]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d110      	bne.n	80048d6 <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	6a1a      	ldr	r2, [r3, #32]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f022 0220 	bic.w	r2, r2, #32
 80048c2:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	6a1a      	ldr	r2, [r3, #32]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f042 0220 	orr.w	r2, r2, #32
 80048d2:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 80048d4:	e043      	b.n	800495e <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	6a1a      	ldr	r2, [r3, #32]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f022 0220 	bic.w	r2, r2, #32
 80048e4:	621a      	str	r2, [r3, #32]
		break;
 80048e6:	e03a      	b.n	800495e <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 80048e8:	78fb      	ldrb	r3, [r7, #3]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d110      	bne.n	8004910 <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	6a1a      	ldr	r2, [r3, #32]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048fc:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	6a1a      	ldr	r2, [r3, #32]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800490c:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 800490e:	e026      	b.n	800495e <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	6a1a      	ldr	r2, [r3, #32]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800491e:	621a      	str	r2, [r3, #32]
		break;
 8004920:	e01d      	b.n	800495e <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 8004922:	78fb      	ldrb	r3, [r7, #3]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d110      	bne.n	800494a <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	6a1a      	ldr	r2, [r3, #32]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004936:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	6a1a      	ldr	r2, [r3, #32]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004946:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 8004948:	e009      	b.n	800495e <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	6a1a      	ldr	r2, [r3, #32]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004958:	621a      	str	r2, [r3, #32]
		break;
 800495a:	e000      	b.n	800495e <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 800495c:	bf00      	nop
	}
	}

}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop

0800496c <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	2b03      	cmp	r3, #3
 800497a:	d823      	bhi.n	80049c4 <setDuttyCycle+0x58>
 800497c:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <setDuttyCycle+0x18>)
 800497e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004982:	bf00      	nop
 8004984:	08004995 	.word	0x08004995
 8004988:	080049a1 	.word	0x080049a1
 800498c:	080049ad 	.word	0x080049ad
 8004990:	080049b9 	.word	0x080049b9
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	885a      	ldrh	r2, [r3, #2]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800499e:	e012      	b.n	80049c6 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	885a      	ldrh	r2, [r3, #2]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80049aa:	e00c      	b.n	80049c6 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	885a      	ldrh	r2, [r3, #2]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80049b6:	e006      	b.n	80049c6 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	885a      	ldrh	r2, [r3, #2]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80049c2:	e000      	b.n	80049c6 <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 80049c4:	bf00      	nop
	}
	}

}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop

080049d4 <updateDuttyCyclePercentageFloat>:
	setDuttyCycle(prtPwmHandler);
}

//Actualizacion del Dutty con porcentaje decimal
void updateDuttyCyclePercentageFloat(PWM_Handler_t *prtPwmHandler, float newDuttyPercentage)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	ed87 0a00 	vstr	s0, [r7]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = (uint16_t) ((prtPwmHandler->ptrTIMx->ARR)/100)*(newDuttyPercentage);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	4a0d      	ldr	r2, [pc, #52]	; (8004a1c <updateDuttyCyclePercentageFloat+0x48>)
 80049e8:	fba2 2303 	umull	r2, r3, r2, r3
 80049ec:	095b      	lsrs	r3, r3, #5
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	ee07 3a90 	vmov	s15, r3
 80049f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049f8:	edd7 7a00 	vldr	s15, [r7]
 80049fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a04:	ee17 3a90 	vmov	r3, s15
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff ffac 	bl	800496c <setDuttyCycle>
}
 8004a14:	bf00      	nop
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	51eb851f 	.word	0x51eb851f

08004a20 <__NVIC_EnableIRQ>:
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	db0b      	blt.n	8004a4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	f003 021f 	and.w	r2, r3, #31
 8004a38:	4907      	ldr	r1, [pc, #28]	; (8004a58 <__NVIC_EnableIRQ+0x38>)
 8004a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	2001      	movs	r0, #1
 8004a42:	fa00 f202 	lsl.w	r2, r0, r2
 8004a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	e000e100 	.word	0xe000e100

08004a5c <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	4a8f      	ldr	r2, [pc, #572]	; (8004ca8 <USART_Config+0x24c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d107      	bne.n	8004a7e <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 8004a6e:	4b8f      	ldr	r3, [pc, #572]	; (8004cac <USART_Config+0x250>)
 8004a70:	2210      	movs	r2, #16
 8004a72:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	4a8d      	ldr	r2, [pc, #564]	; (8004cb0 <USART_Config+0x254>)
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	e019      	b.n	8004ab2 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	4a8c      	ldr	r2, [pc, #560]	; (8004cb4 <USART_Config+0x258>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d108      	bne.n	8004a9a <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 8004a88:	4b88      	ldr	r3, [pc, #544]	; (8004cac <USART_Config+0x250>)
 8004a8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a8e:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	4a88      	ldr	r2, [pc, #544]	; (8004cb8 <USART_Config+0x25c>)
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	e00b      	b.n	8004ab2 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	4a87      	ldr	r2, [pc, #540]	; (8004cbc <USART_Config+0x260>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d106      	bne.n	8004ab2 <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 8004aa4:	4b81      	ldr	r3, [pc, #516]	; (8004cac <USART_Config+0x250>)
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	4a84      	ldr	r2, [pc, #528]	; (8004cc0 <USART_Config+0x264>)
 8004ab0:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	789b      	ldrb	r3, [r3, #2]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d03d      	beq.n	8004b46 <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ae8:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004af8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b08:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	789b      	ldrb	r3, [r3, #2]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d110      	bne.n	8004b34 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b20:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b30:	60da      	str	r2, [r3, #12]
 8004b32:	e018      	b.n	8004b66 <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b42:	60da      	str	r2, [r3, #12]
 8004b44:	e00f      	b.n	8004b66 <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b54:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b64:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	78db      	ldrb	r3, [r3, #3]
 8004b6a:	2b03      	cmp	r3, #3
 8004b6c:	d84c      	bhi.n	8004c08 <USART_Config+0x1ac>
 8004b6e:	a201      	add	r2, pc, #4	; (adr r2, 8004b74 <USART_Config+0x118>)
 8004b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b74:	08004b85 	.word	0x08004b85
 8004b78:	08004ba3 	.word	0x08004ba3
 8004b7c:	08004bc5 	.word	0x08004bc5
 8004b80:	08004be7 	.word	0x08004be7
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	691a      	ldr	r2, [r3, #16]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004b92:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	6912      	ldr	r2, [r2, #16]
 8004b9e:	611a      	str	r2, [r3, #16]
		break;
 8004ba0:	e041      	b.n	8004c26 <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004bb0:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bc0:	611a      	str	r2, [r3, #16]
		break;
 8004bc2:	e030      	b.n	8004c26 <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	691a      	ldr	r2, [r3, #16]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004bd2:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	691a      	ldr	r2, [r3, #16]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004be2:	611a      	str	r2, [r3, #16]
		break;
 8004be4:	e01f      	b.n	8004c26 <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004bf4:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004c04:	611a      	str	r2, [r3, #16]
		break;
 8004c06:	e00e      	b.n	8004c26 <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	691a      	ldr	r2, [r3, #16]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004c16:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	6912      	ldr	r2, [r2, #16]
 8004c22:	611a      	str	r2, [r3, #16]
		break;
 8004c24:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 8004c26:	2300      	movs	r3, #0
 8004c28:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	4a21      	ldr	r2, [pc, #132]	; (8004cb4 <USART_Config+0x258>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d104      	bne.n	8004c3e <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8004c34:	f7ff fb82 	bl	800433c <getClockAPB1>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	73fb      	strb	r3, [r7, #15]
 8004c3c:	e003      	b.n	8004c46 <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 8004c3e:	f7ff fb61 	bl	8004304 <getConfigPLL>
 8004c42:	4603      	mov	r3, r0
 8004c44:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	785b      	ldrb	r3, [r3, #1]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10b      	bne.n	8004c66 <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 f91f 	bl	8004e98 <getValueBaudRate>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	609a      	str	r2, [r3, #8]
 8004c64:	e02f      	b.n	8004cc6 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	785b      	ldrb	r3, [r3, #1]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d10b      	bne.n	8004c86 <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 f90f 	bl	8004e98 <getValueBaudRate>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	609a      	str	r2, [r3, #8]
 8004c84:	e01f      	b.n	8004cc6 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	785b      	ldrb	r3, [r3, #1]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d11a      	bne.n	8004cc4 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
 8004c90:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 f8ff 	bl	8004e98 <getValueBaudRate>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	609a      	str	r2, [r3, #8]
 8004ca4:	e00f      	b.n	8004cc6 <USART_Config+0x26a>
 8004ca6:	bf00      	nop
 8004ca8:	40011000 	.word	0x40011000
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	200004b8 	.word	0x200004b8
 8004cb4:	40004400 	.word	0x40004400
 8004cb8:	200004bc 	.word	0x200004bc
 8004cbc:	40011400 	.word	0x40011400
 8004cc0:	200004c0 	.word	0x200004c0
	}
	else
	{
		__NOP();
 8004cc4:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d866      	bhi.n	8004d9c <USART_Config+0x340>
 8004cce:	a201      	add	r2, pc, #4	; (adr r2, 8004cd4 <USART_Config+0x278>)
 8004cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd4:	08004ce5 	.word	0x08004ce5
 8004cd8:	08004d07 	.word	0x08004d07
 8004cdc:	08004d29 	.word	0x08004d29
 8004ce0:	08004d6b 	.word	0x08004d6b
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f022 0208 	bic.w	r2, r2, #8
 8004cf2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f042 0208 	orr.w	r2, r2, #8
 8004d02:	60da      	str	r2, [r3, #12]

		break;
 8004d04:	e063      	b.n	8004dce <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f022 0204 	bic.w	r2, r2, #4
 8004d14:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f042 0204 	orr.w	r2, r2, #4
 8004d24:	60da      	str	r2, [r3, #12]

		break;
 8004d26:	e052      	b.n	8004dce <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f022 0208 	bic.w	r2, r2, #8
 8004d36:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f042 0208 	orr.w	r2, r2, #8
 8004d46:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f022 0204 	bic.w	r2, r2, #4
 8004d56:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f042 0204 	orr.w	r2, r2, #4
 8004d66:	60da      	str	r2, [r3, #12]


		break;
 8004d68:	e031      	b.n	8004dce <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	68da      	ldr	r2, [r3, #12]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d78:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	68da      	ldr	r2, [r3, #12]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f022 0208 	bic.w	r2, r2, #8
 8004d88:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f022 0204 	bic.w	r2, r2, #4
 8004d98:	60da      	str	r2, [r3, #12]
		break;
 8004d9a:	e018      	b.n	8004dce <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004daa:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f022 0208 	bic.w	r2, r2, #8
 8004dba:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f022 0204 	bic.w	r2, r2, #4
 8004dca:	60da      	str	r2, [r3, #12]
		break;
 8004dcc:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8004dce:	b672      	cpsid	i
}
 8004dd0:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	791b      	ldrb	r3, [r3, #4]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d110      	bne.n	8004dfc <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f022 0220 	bic.w	r2, r2, #32
 8004de8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f042 0220 	orr.w	r2, r2, #32
 8004df8:	60da      	str	r2, [r3, #12]
 8004dfa:	e007      	b.n	8004e0c <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f022 0220 	bic.w	r2, r2, #32
 8004e0a:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	791b      	ldrb	r3, [r3, #4]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d003      	beq.n	8004e1c <USART_Config+0x3c0>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	795b      	ldrb	r3, [r3, #5]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d11a      	bne.n	8004e52 <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	4a1a      	ldr	r2, [pc, #104]	; (8004e8c <USART_Config+0x430>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d103      	bne.n	8004e2e <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 8004e26:	2025      	movs	r0, #37	; 0x25
 8004e28:	f7ff fdfa 	bl	8004a20 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004e2c:	e013      	b.n	8004e56 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	4a17      	ldr	r2, [pc, #92]	; (8004e90 <USART_Config+0x434>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d103      	bne.n	8004e40 <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 8004e38:	2026      	movs	r0, #38	; 0x26
 8004e3a:	f7ff fdf1 	bl	8004a20 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004e3e:	e00a      	b.n	8004e56 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	4a13      	ldr	r2, [pc, #76]	; (8004e94 <USART_Config+0x438>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d105      	bne.n	8004e56 <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 8004e4a:	2047      	movs	r0, #71	; 0x47
 8004e4c:	f7ff fde8 	bl	8004a20 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004e50:	e001      	b.n	8004e56 <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 8004e52:	bf00      	nop
 8004e54:	e000      	b.n	8004e58 <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004e56:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8004e58:	b662      	cpsie	i
}
 8004e5a:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b03      	cmp	r3, #3
 8004e62:	d00f      	beq.n	8004e84 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e72:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e82:	60da      	str	r2, [r3, #12]
	}
}
 8004e84:	bf00      	nop
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40011000 	.word	0x40011000
 8004e90:	40004400 	.word	0x40004400
 8004e94:	40011400 	.word	0x40011400

08004e98 <getValueBaudRate>:

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 8004e98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e9c:	b086      	sub	sp, #24
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6039      	str	r1, [r7, #0]
 8004ea2:	4601      	mov	r1, r0
 8004ea4:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 8004ea6:	79f9      	ldrb	r1, [r7, #7]
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	460a      	mov	r2, r1
 8004eac:	4603      	mov	r3, r0
 8004eae:	491f      	ldr	r1, [pc, #124]	; (8004f2c <getValueBaudRate+0x94>)
 8004eb0:	fb01 f003 	mul.w	r0, r1, r3
 8004eb4:	2102      	movs	r1, #2
 8004eb6:	fb02 f101 	mul.w	r1, r2, r1
 8004eba:	4401      	add	r1, r0
 8004ebc:	481b      	ldr	r0, [pc, #108]	; (8004f2c <getValueBaudRate+0x94>)
 8004ebe:	fba2 4500 	umull	r4, r5, r2, r0
 8004ec2:	194b      	adds	r3, r1, r5
 8004ec4:	461d      	mov	r5, r3
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	2200      	movs	r2, #0
 8004ecc:	4698      	mov	r8, r3
 8004ece:	4691      	mov	r9, r2
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	f7fb feee 	bl	8000cb8 <__aeabi_ldivmod>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	4a12      	ldr	r2, [pc, #72]	; (8004f30 <getValueBaudRate+0x98>)
 8004ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eec:	0b5b      	lsrs	r3, r3, #13
 8004eee:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f242 7210 	movw	r2, #10000	; 0x2710
 8004ef6:	fb02 f303 	mul.w	r3, r2, r3
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8004f06:	4a0a      	ldr	r2, [pc, #40]	; (8004f30 <getValueBaudRate+0x98>)
 8004f08:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0c:	0a5b      	lsrs	r3, r3, #9
 8004f0e:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	7afb      	ldrb	r3, [r7, #11]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	813b      	strh	r3, [r7, #8]

    return value;
 8004f20:	893b      	ldrh	r3, [r7, #8]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f2c:	540be400 	.word	0x540be400
 8004f30:	d1b71759 	.word	0xd1b71759

08004f34 <writeMsgForTXE>:
	}
}

//Funcion para escribir un string
void writeMsgForTXE(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
	if (posChar == 0 && inLineTxe == 0)
 8004f3e:	4b16      	ldr	r3, [pc, #88]	; (8004f98 <writeMsgForTXE+0x64>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d111      	bne.n	8004f6a <writeMsgForTXE+0x36>
 8004f46:	4b15      	ldr	r3, [pc, #84]	; (8004f9c <writeMsgForTXE+0x68>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10d      	bne.n	8004f6a <writeMsgForTXE+0x36>
	{
		//Guardamos el string que se desea enviar en un arreglo
		sprintf(bufferMsgForTXE, MsgtoSend);
 8004f4e:	6839      	ldr	r1, [r7, #0]
 8004f50:	4813      	ldr	r0, [pc, #76]	; (8004fa0 <writeMsgForTXE+0x6c>)
 8004f52:	f001 f8a9 	bl	80060a8 <siprintf>
		//cambiamos el tipo
		typeWriteTXE = 1;
 8004f56:	4b13      	ldr	r3, [pc, #76]	; (8004fa4 <writeMsgForTXE+0x70>)
 8004f58:	2201      	movs	r2, #1
 8004f5a:	701a      	strb	r2, [r3, #0]
		//Activo la interrupcion
		interruptionTX(ptrUsartHandlerString->ptrUSARTx, USART_TX_INTERRUP_ENABLE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	2101      	movs	r1, #1
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 f830 	bl	8004fc8 <interruptionTX>
 8004f68:	e012      	b.n	8004f90 <writeMsgForTXE+0x5c>
	}
	else
	{
		sprintf(bufferMsgForTXE_inLine[inLine], MsgtoSend);
 8004f6a:	4b0f      	ldr	r3, [pc, #60]	; (8004fa8 <writeMsgForTXE+0x74>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	2364      	movs	r3, #100	; 0x64
 8004f72:	fb02 f303 	mul.w	r3, r2, r3
 8004f76:	4a0d      	ldr	r2, [pc, #52]	; (8004fac <writeMsgForTXE+0x78>)
 8004f78:	4413      	add	r3, r2
 8004f7a:	6839      	ldr	r1, [r7, #0]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f001 f893 	bl	80060a8 <siprintf>
		inLine++;
 8004f82:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <writeMsgForTXE+0x74>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	3301      	adds	r3, #1
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	4b07      	ldr	r3, [pc, #28]	; (8004fa8 <writeMsgForTXE+0x74>)
 8004f8c:	701a      	strb	r2, [r3, #0]
	}
}
 8004f8e:	bf00      	nop
 8004f90:	bf00      	nop
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	20000cfe 	.word	0x20000cfe
 8004f9c:	20000cfd 	.word	0x20000cfd
 8004fa0:	200004c8 	.word	0x200004c8
 8004fa4:	20000cff 	.word	0x20000cff
 8004fa8:	20000cfc 	.word	0x20000cfc
 8004fac:	2000052c 	.word	0x2000052c

08004fb0 <getRxData>:

//Funcion para leer un char
uint8_t getRxData(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
	return auxRxData;
 8004fb4:	4b03      	ldr	r3, [pc, #12]	; (8004fc4 <getRxData+0x14>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	200004c4 	.word	0x200004c4

08004fc8 <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d10c      	bne.n	8004ff4 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 8004ff2:	e005      	b.n	8005000 <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	60da      	str	r2, [r3, #12]
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <BasicUSART1_Callback>:


//Definimos las funciones para cuando se genera una interrupcion del USART1-2 y 6
__attribute__((weak)) void BasicUSART1_Callback()
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
	__NOP();
 8005010:	bf00      	nop
}
 8005012:	bf00      	nop
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <BasicUSART6_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART6_Callback()
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
	__NOP();
 8005020:	bf00      	nop
}
 8005022:	bf00      	nop
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 8005030:	4b37      	ldr	r3, [pc, #220]	; (8005110 <USART1_IRQHandler+0xe4>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	2b00      	cmp	r3, #0
 800503c:	d008      	beq.n	8005050 <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 800503e:	4b34      	ldr	r3, [pc, #208]	; (8005110 <USART1_IRQHandler+0xe4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	b2da      	uxtb	r2, r3
 8005046:	4b33      	ldr	r3, [pc, #204]	; (8005114 <USART1_IRQHandler+0xe8>)
 8005048:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 800504a:	f7ff ffdf 	bl	800500c <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 800504e:	e05d      	b.n	800510c <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 8005050:	4b2f      	ldr	r3, [pc, #188]	; (8005110 <USART1_IRQHandler+0xe4>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505a:	2b00      	cmp	r3, #0
 800505c:	d055      	beq.n	800510a <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800505e:	4b2e      	ldr	r3, [pc, #184]	; (8005118 <USART1_IRQHandler+0xec>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10b      	bne.n	800507e <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 8005066:	4b2d      	ldr	r3, [pc, #180]	; (800511c <USART1_IRQHandler+0xf0>)
 8005068:	781a      	ldrb	r2, [r3, #0]
 800506a:	4b29      	ldr	r3, [pc, #164]	; (8005110 <USART1_IRQHandler+0xe4>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8005070:	4b27      	ldr	r3, [pc, #156]	; (8005110 <USART1_IRQHandler+0xe4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2100      	movs	r1, #0
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff ffa6 	bl	8004fc8 <interruptionTX>
}
 800507c:	e046      	b.n	800510c <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800507e:	4b26      	ldr	r3, [pc, #152]	; (8005118 <USART1_IRQHandler+0xec>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d142      	bne.n	800510c <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8005086:	4b26      	ldr	r3, [pc, #152]	; (8005120 <USART1_IRQHandler+0xf4>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	4b25      	ldr	r3, [pc, #148]	; (8005124 <USART1_IRQHandler+0xf8>)
 800508e:	5c9b      	ldrb	r3, [r3, r2]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00e      	beq.n	80050b2 <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 8005094:	4b22      	ldr	r3, [pc, #136]	; (8005120 <USART1_IRQHandler+0xf4>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	461a      	mov	r2, r3
 800509a:	4b22      	ldr	r3, [pc, #136]	; (8005124 <USART1_IRQHandler+0xf8>)
 800509c:	5c9a      	ldrb	r2, [r3, r2]
 800509e:	4b1c      	ldr	r3, [pc, #112]	; (8005110 <USART1_IRQHandler+0xe4>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	605a      	str	r2, [r3, #4]
				posChar++;
 80050a4:	4b1e      	ldr	r3, [pc, #120]	; (8005120 <USART1_IRQHandler+0xf4>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	3301      	adds	r3, #1
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	4b1c      	ldr	r3, [pc, #112]	; (8005120 <USART1_IRQHandler+0xf4>)
 80050ae:	701a      	strb	r2, [r3, #0]
}
 80050b0:	e02c      	b.n	800510c <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 80050b2:	4b1d      	ldr	r3, [pc, #116]	; (8005128 <USART1_IRQHandler+0xfc>)
 80050b4:	781a      	ldrb	r2, [r3, #0]
 80050b6:	4b1d      	ldr	r3, [pc, #116]	; (800512c <USART1_IRQHandler+0x100>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d215      	bcs.n	80050ea <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80050be:	4b1a      	ldr	r3, [pc, #104]	; (8005128 <USART1_IRQHandler+0xfc>)
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	461a      	mov	r2, r3
 80050c4:	2364      	movs	r3, #100	; 0x64
 80050c6:	fb02 f303 	mul.w	r3, r2, r3
 80050ca:	4a19      	ldr	r2, [pc, #100]	; (8005130 <USART1_IRQHandler+0x104>)
 80050cc:	4413      	add	r3, r2
 80050ce:	4619      	mov	r1, r3
 80050d0:	4814      	ldr	r0, [pc, #80]	; (8005124 <USART1_IRQHandler+0xf8>)
 80050d2:	f000 ffe9 	bl	80060a8 <siprintf>
					posChar = 0;
 80050d6:	4b12      	ldr	r3, [pc, #72]	; (8005120 <USART1_IRQHandler+0xf4>)
 80050d8:	2200      	movs	r2, #0
 80050da:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 80050dc:	4b12      	ldr	r3, [pc, #72]	; (8005128 <USART1_IRQHandler+0xfc>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	3301      	adds	r3, #1
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	4b10      	ldr	r3, [pc, #64]	; (8005128 <USART1_IRQHandler+0xfc>)
 80050e6:	701a      	strb	r2, [r3, #0]
}
 80050e8:	e010      	b.n	800510c <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 80050ea:	4b09      	ldr	r3, [pc, #36]	; (8005110 <USART1_IRQHandler+0xe4>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2100      	movs	r1, #0
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff ff69 	bl	8004fc8 <interruptionTX>
					posChar = 0;
 80050f6:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <USART1_IRQHandler+0xf4>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 80050fc:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <USART1_IRQHandler+0xfc>)
 80050fe:	2200      	movs	r2, #0
 8005100:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8005102:	4b0a      	ldr	r3, [pc, #40]	; (800512c <USART1_IRQHandler+0x100>)
 8005104:	2200      	movs	r2, #0
 8005106:	701a      	strb	r2, [r3, #0]
}
 8005108:	e000      	b.n	800510c <USART1_IRQHandler+0xe0>
		__NOP();
 800510a:	bf00      	nop
}
 800510c:	bf00      	nop
 800510e:	bd80      	pop	{r7, pc}
 8005110:	200004b8 	.word	0x200004b8
 8005114:	200004c4 	.word	0x200004c4
 8005118:	20000cff 	.word	0x20000cff
 800511c:	200004c5 	.word	0x200004c5
 8005120:	20000cfe 	.word	0x20000cfe
 8005124:	200004c8 	.word	0x200004c8
 8005128:	20000cfd 	.word	0x20000cfd
 800512c:	20000cfc 	.word	0x20000cfc
 8005130:	2000052c 	.word	0x2000052c

08005134 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 8005138:	4b37      	ldr	r3, [pc, #220]	; (8005218 <USART2_IRQHandler+0xe4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0320 	and.w	r3, r3, #32
 8005142:	2b00      	cmp	r3, #0
 8005144:	d008      	beq.n	8005158 <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 8005146:	4b34      	ldr	r3, [pc, #208]	; (8005218 <USART2_IRQHandler+0xe4>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	b2da      	uxtb	r2, r3
 800514e:	4b33      	ldr	r3, [pc, #204]	; (800521c <USART2_IRQHandler+0xe8>)
 8005150:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 8005152:	f7fc fdbf 	bl	8001cd4 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 8005156:	e05d      	b.n	8005214 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 8005158:	4b2f      	ldr	r3, [pc, #188]	; (8005218 <USART2_IRQHandler+0xe4>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005162:	2b00      	cmp	r3, #0
 8005164:	d055      	beq.n	8005212 <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8005166:	4b2e      	ldr	r3, [pc, #184]	; (8005220 <USART2_IRQHandler+0xec>)
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10b      	bne.n	8005186 <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 800516e:	4b2d      	ldr	r3, [pc, #180]	; (8005224 <USART2_IRQHandler+0xf0>)
 8005170:	781a      	ldrb	r2, [r3, #0]
 8005172:	4b29      	ldr	r3, [pc, #164]	; (8005218 <USART2_IRQHandler+0xe4>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8005178:	4b27      	ldr	r3, [pc, #156]	; (8005218 <USART2_IRQHandler+0xe4>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2100      	movs	r1, #0
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff ff22 	bl	8004fc8 <interruptionTX>
}
 8005184:	e046      	b.n	8005214 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8005186:	4b26      	ldr	r3, [pc, #152]	; (8005220 <USART2_IRQHandler+0xec>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d142      	bne.n	8005214 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 800518e:	4b26      	ldr	r3, [pc, #152]	; (8005228 <USART2_IRQHandler+0xf4>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	461a      	mov	r2, r3
 8005194:	4b25      	ldr	r3, [pc, #148]	; (800522c <USART2_IRQHandler+0xf8>)
 8005196:	5c9b      	ldrb	r3, [r3, r2]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00e      	beq.n	80051ba <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 800519c:	4b22      	ldr	r3, [pc, #136]	; (8005228 <USART2_IRQHandler+0xf4>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	461a      	mov	r2, r3
 80051a2:	4b22      	ldr	r3, [pc, #136]	; (800522c <USART2_IRQHandler+0xf8>)
 80051a4:	5c9a      	ldrb	r2, [r3, r2]
 80051a6:	4b1c      	ldr	r3, [pc, #112]	; (8005218 <USART2_IRQHandler+0xe4>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	605a      	str	r2, [r3, #4]
				posChar++;
 80051ac:	4b1e      	ldr	r3, [pc, #120]	; (8005228 <USART2_IRQHandler+0xf4>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	3301      	adds	r3, #1
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	4b1c      	ldr	r3, [pc, #112]	; (8005228 <USART2_IRQHandler+0xf4>)
 80051b6:	701a      	strb	r2, [r3, #0]
}
 80051b8:	e02c      	b.n	8005214 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 80051ba:	4b1d      	ldr	r3, [pc, #116]	; (8005230 <USART2_IRQHandler+0xfc>)
 80051bc:	781a      	ldrb	r2, [r3, #0]
 80051be:	4b1d      	ldr	r3, [pc, #116]	; (8005234 <USART2_IRQHandler+0x100>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d215      	bcs.n	80051f2 <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80051c6:	4b1a      	ldr	r3, [pc, #104]	; (8005230 <USART2_IRQHandler+0xfc>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	2364      	movs	r3, #100	; 0x64
 80051ce:	fb02 f303 	mul.w	r3, r2, r3
 80051d2:	4a19      	ldr	r2, [pc, #100]	; (8005238 <USART2_IRQHandler+0x104>)
 80051d4:	4413      	add	r3, r2
 80051d6:	4619      	mov	r1, r3
 80051d8:	4814      	ldr	r0, [pc, #80]	; (800522c <USART2_IRQHandler+0xf8>)
 80051da:	f000 ff65 	bl	80060a8 <siprintf>
					posChar = 0;
 80051de:	4b12      	ldr	r3, [pc, #72]	; (8005228 <USART2_IRQHandler+0xf4>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 80051e4:	4b12      	ldr	r3, [pc, #72]	; (8005230 <USART2_IRQHandler+0xfc>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	3301      	adds	r3, #1
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	4b10      	ldr	r3, [pc, #64]	; (8005230 <USART2_IRQHandler+0xfc>)
 80051ee:	701a      	strb	r2, [r3, #0]
}
 80051f0:	e010      	b.n	8005214 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 80051f2:	4b09      	ldr	r3, [pc, #36]	; (8005218 <USART2_IRQHandler+0xe4>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2100      	movs	r1, #0
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff fee5 	bl	8004fc8 <interruptionTX>
					posChar = 0;
 80051fe:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <USART2_IRQHandler+0xf4>)
 8005200:	2200      	movs	r2, #0
 8005202:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8005204:	4b0a      	ldr	r3, [pc, #40]	; (8005230 <USART2_IRQHandler+0xfc>)
 8005206:	2200      	movs	r2, #0
 8005208:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800520a:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <USART2_IRQHandler+0x100>)
 800520c:	2200      	movs	r2, #0
 800520e:	701a      	strb	r2, [r3, #0]
}
 8005210:	e000      	b.n	8005214 <USART2_IRQHandler+0xe0>
		__NOP();
 8005212:	bf00      	nop
}
 8005214:	bf00      	nop
 8005216:	bd80      	pop	{r7, pc}
 8005218:	200004bc 	.word	0x200004bc
 800521c:	200004c4 	.word	0x200004c4
 8005220:	20000cff 	.word	0x20000cff
 8005224:	200004c5 	.word	0x200004c5
 8005228:	20000cfe 	.word	0x20000cfe
 800522c:	200004c8 	.word	0x200004c8
 8005230:	20000cfd 	.word	0x20000cfd
 8005234:	20000cfc 	.word	0x20000cfc
 8005238:	2000052c 	.word	0x2000052c

0800523c <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 8005240:	4b37      	ldr	r3, [pc, #220]	; (8005320 <USART6_IRQHandler+0xe4>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b00      	cmp	r3, #0
 800524c:	d008      	beq.n	8005260 <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 800524e:	4b34      	ldr	r3, [pc, #208]	; (8005320 <USART6_IRQHandler+0xe4>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	b2da      	uxtb	r2, r3
 8005256:	4b33      	ldr	r3, [pc, #204]	; (8005324 <USART6_IRQHandler+0xe8>)
 8005258:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 800525a:	f7ff fedf 	bl	800501c <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 800525e:	e05d      	b.n	800531c <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 8005260:	4b2f      	ldr	r3, [pc, #188]	; (8005320 <USART6_IRQHandler+0xe4>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526a:	2b00      	cmp	r3, #0
 800526c:	d055      	beq.n	800531a <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800526e:	4b2e      	ldr	r3, [pc, #184]	; (8005328 <USART6_IRQHandler+0xec>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10b      	bne.n	800528e <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 8005276:	4b2d      	ldr	r3, [pc, #180]	; (800532c <USART6_IRQHandler+0xf0>)
 8005278:	781a      	ldrb	r2, [r3, #0]
 800527a:	4b29      	ldr	r3, [pc, #164]	; (8005320 <USART6_IRQHandler+0xe4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8005280:	4b27      	ldr	r3, [pc, #156]	; (8005320 <USART6_IRQHandler+0xe4>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2100      	movs	r1, #0
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff fe9e 	bl	8004fc8 <interruptionTX>
}
 800528c:	e046      	b.n	800531c <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800528e:	4b26      	ldr	r3, [pc, #152]	; (8005328 <USART6_IRQHandler+0xec>)
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d142      	bne.n	800531c <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8005296:	4b26      	ldr	r3, [pc, #152]	; (8005330 <USART6_IRQHandler+0xf4>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	4b25      	ldr	r3, [pc, #148]	; (8005334 <USART6_IRQHandler+0xf8>)
 800529e:	5c9b      	ldrb	r3, [r3, r2]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00e      	beq.n	80052c2 <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 80052a4:	4b22      	ldr	r3, [pc, #136]	; (8005330 <USART6_IRQHandler+0xf4>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	461a      	mov	r2, r3
 80052aa:	4b22      	ldr	r3, [pc, #136]	; (8005334 <USART6_IRQHandler+0xf8>)
 80052ac:	5c9a      	ldrb	r2, [r3, r2]
 80052ae:	4b1c      	ldr	r3, [pc, #112]	; (8005320 <USART6_IRQHandler+0xe4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	605a      	str	r2, [r3, #4]
				posChar++;
 80052b4:	4b1e      	ldr	r3, [pc, #120]	; (8005330 <USART6_IRQHandler+0xf4>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	3301      	adds	r3, #1
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	4b1c      	ldr	r3, [pc, #112]	; (8005330 <USART6_IRQHandler+0xf4>)
 80052be:	701a      	strb	r2, [r3, #0]
}
 80052c0:	e02c      	b.n	800531c <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 80052c2:	4b1d      	ldr	r3, [pc, #116]	; (8005338 <USART6_IRQHandler+0xfc>)
 80052c4:	781a      	ldrb	r2, [r3, #0]
 80052c6:	4b1d      	ldr	r3, [pc, #116]	; (800533c <USART6_IRQHandler+0x100>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d215      	bcs.n	80052fa <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80052ce:	4b1a      	ldr	r3, [pc, #104]	; (8005338 <USART6_IRQHandler+0xfc>)
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	2364      	movs	r3, #100	; 0x64
 80052d6:	fb02 f303 	mul.w	r3, r2, r3
 80052da:	4a19      	ldr	r2, [pc, #100]	; (8005340 <USART6_IRQHandler+0x104>)
 80052dc:	4413      	add	r3, r2
 80052de:	4619      	mov	r1, r3
 80052e0:	4814      	ldr	r0, [pc, #80]	; (8005334 <USART6_IRQHandler+0xf8>)
 80052e2:	f000 fee1 	bl	80060a8 <siprintf>
					posChar = 0;
 80052e6:	4b12      	ldr	r3, [pc, #72]	; (8005330 <USART6_IRQHandler+0xf4>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 80052ec:	4b12      	ldr	r3, [pc, #72]	; (8005338 <USART6_IRQHandler+0xfc>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	3301      	adds	r3, #1
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	4b10      	ldr	r3, [pc, #64]	; (8005338 <USART6_IRQHandler+0xfc>)
 80052f6:	701a      	strb	r2, [r3, #0]
}
 80052f8:	e010      	b.n	800531c <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 80052fa:	4b09      	ldr	r3, [pc, #36]	; (8005320 <USART6_IRQHandler+0xe4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2100      	movs	r1, #0
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff fe61 	bl	8004fc8 <interruptionTX>
					posChar = 0;
 8005306:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <USART6_IRQHandler+0xf4>)
 8005308:	2200      	movs	r2, #0
 800530a:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 800530c:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <USART6_IRQHandler+0xfc>)
 800530e:	2200      	movs	r2, #0
 8005310:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8005312:	4b0a      	ldr	r3, [pc, #40]	; (800533c <USART6_IRQHandler+0x100>)
 8005314:	2200      	movs	r2, #0
 8005316:	701a      	strb	r2, [r3, #0]
}
 8005318:	e000      	b.n	800531c <USART6_IRQHandler+0xe0>
		__NOP();
 800531a:	bf00      	nop
}
 800531c:	bf00      	nop
 800531e:	bd80      	pop	{r7, pc}
 8005320:	200004c0 	.word	0x200004c0
 8005324:	200004c4 	.word	0x200004c4
 8005328:	20000cff 	.word	0x20000cff
 800532c:	200004c5 	.word	0x200004c5
 8005330:	20000cfe 	.word	0x20000cfe
 8005334:	200004c8 	.word	0x200004c8
 8005338:	20000cfd 	.word	0x20000cfd
 800533c:	20000cfc 	.word	0x20000cfc
 8005340:	2000052c 	.word	0x2000052c

08005344 <__errno>:
 8005344:	4b01      	ldr	r3, [pc, #4]	; (800534c <__errno+0x8>)
 8005346:	6818      	ldr	r0, [r3, #0]
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20000010 	.word	0x20000010

08005350 <__libc_init_array>:
 8005350:	b570      	push	{r4, r5, r6, lr}
 8005352:	4d0d      	ldr	r5, [pc, #52]	; (8005388 <__libc_init_array+0x38>)
 8005354:	4c0d      	ldr	r4, [pc, #52]	; (800538c <__libc_init_array+0x3c>)
 8005356:	1b64      	subs	r4, r4, r5
 8005358:	10a4      	asrs	r4, r4, #2
 800535a:	2600      	movs	r6, #0
 800535c:	42a6      	cmp	r6, r4
 800535e:	d109      	bne.n	8005374 <__libc_init_array+0x24>
 8005360:	4d0b      	ldr	r5, [pc, #44]	; (8005390 <__libc_init_array+0x40>)
 8005362:	4c0c      	ldr	r4, [pc, #48]	; (8005394 <__libc_init_array+0x44>)
 8005364:	f006 fbde 	bl	800bb24 <_init>
 8005368:	1b64      	subs	r4, r4, r5
 800536a:	10a4      	asrs	r4, r4, #2
 800536c:	2600      	movs	r6, #0
 800536e:	42a6      	cmp	r6, r4
 8005370:	d105      	bne.n	800537e <__libc_init_array+0x2e>
 8005372:	bd70      	pop	{r4, r5, r6, pc}
 8005374:	f855 3b04 	ldr.w	r3, [r5], #4
 8005378:	4798      	blx	r3
 800537a:	3601      	adds	r6, #1
 800537c:	e7ee      	b.n	800535c <__libc_init_array+0xc>
 800537e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005382:	4798      	blx	r3
 8005384:	3601      	adds	r6, #1
 8005386:	e7f2      	b.n	800536e <__libc_init_array+0x1e>
 8005388:	0800c5d8 	.word	0x0800c5d8
 800538c:	0800c5d8 	.word	0x0800c5d8
 8005390:	0800c5d8 	.word	0x0800c5d8
 8005394:	0800c5dc 	.word	0x0800c5dc

08005398 <memset>:
 8005398:	4402      	add	r2, r0
 800539a:	4603      	mov	r3, r0
 800539c:	4293      	cmp	r3, r2
 800539e:	d100      	bne.n	80053a2 <memset+0xa>
 80053a0:	4770      	bx	lr
 80053a2:	f803 1b01 	strb.w	r1, [r3], #1
 80053a6:	e7f9      	b.n	800539c <memset+0x4>

080053a8 <__cvt>:
 80053a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053ac:	ec55 4b10 	vmov	r4, r5, d0
 80053b0:	2d00      	cmp	r5, #0
 80053b2:	460e      	mov	r6, r1
 80053b4:	4619      	mov	r1, r3
 80053b6:	462b      	mov	r3, r5
 80053b8:	bfbb      	ittet	lt
 80053ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80053be:	461d      	movlt	r5, r3
 80053c0:	2300      	movge	r3, #0
 80053c2:	232d      	movlt	r3, #45	; 0x2d
 80053c4:	700b      	strb	r3, [r1, #0]
 80053c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80053cc:	4691      	mov	r9, r2
 80053ce:	f023 0820 	bic.w	r8, r3, #32
 80053d2:	bfbc      	itt	lt
 80053d4:	4622      	movlt	r2, r4
 80053d6:	4614      	movlt	r4, r2
 80053d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80053dc:	d005      	beq.n	80053ea <__cvt+0x42>
 80053de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80053e2:	d100      	bne.n	80053e6 <__cvt+0x3e>
 80053e4:	3601      	adds	r6, #1
 80053e6:	2102      	movs	r1, #2
 80053e8:	e000      	b.n	80053ec <__cvt+0x44>
 80053ea:	2103      	movs	r1, #3
 80053ec:	ab03      	add	r3, sp, #12
 80053ee:	9301      	str	r3, [sp, #4]
 80053f0:	ab02      	add	r3, sp, #8
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	ec45 4b10 	vmov	d0, r4, r5
 80053f8:	4653      	mov	r3, sl
 80053fa:	4632      	mov	r2, r6
 80053fc:	f001 fe44 	bl	8007088 <_dtoa_r>
 8005400:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005404:	4607      	mov	r7, r0
 8005406:	d102      	bne.n	800540e <__cvt+0x66>
 8005408:	f019 0f01 	tst.w	r9, #1
 800540c:	d022      	beq.n	8005454 <__cvt+0xac>
 800540e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005412:	eb07 0906 	add.w	r9, r7, r6
 8005416:	d110      	bne.n	800543a <__cvt+0x92>
 8005418:	783b      	ldrb	r3, [r7, #0]
 800541a:	2b30      	cmp	r3, #48	; 0x30
 800541c:	d10a      	bne.n	8005434 <__cvt+0x8c>
 800541e:	2200      	movs	r2, #0
 8005420:	2300      	movs	r3, #0
 8005422:	4620      	mov	r0, r4
 8005424:	4629      	mov	r1, r5
 8005426:	f7fb fb67 	bl	8000af8 <__aeabi_dcmpeq>
 800542a:	b918      	cbnz	r0, 8005434 <__cvt+0x8c>
 800542c:	f1c6 0601 	rsb	r6, r6, #1
 8005430:	f8ca 6000 	str.w	r6, [sl]
 8005434:	f8da 3000 	ldr.w	r3, [sl]
 8005438:	4499      	add	r9, r3
 800543a:	2200      	movs	r2, #0
 800543c:	2300      	movs	r3, #0
 800543e:	4620      	mov	r0, r4
 8005440:	4629      	mov	r1, r5
 8005442:	f7fb fb59 	bl	8000af8 <__aeabi_dcmpeq>
 8005446:	b108      	cbz	r0, 800544c <__cvt+0xa4>
 8005448:	f8cd 900c 	str.w	r9, [sp, #12]
 800544c:	2230      	movs	r2, #48	; 0x30
 800544e:	9b03      	ldr	r3, [sp, #12]
 8005450:	454b      	cmp	r3, r9
 8005452:	d307      	bcc.n	8005464 <__cvt+0xbc>
 8005454:	9b03      	ldr	r3, [sp, #12]
 8005456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005458:	1bdb      	subs	r3, r3, r7
 800545a:	4638      	mov	r0, r7
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	b004      	add	sp, #16
 8005460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005464:	1c59      	adds	r1, r3, #1
 8005466:	9103      	str	r1, [sp, #12]
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	e7f0      	b.n	800544e <__cvt+0xa6>

0800546c <__exponent>:
 800546c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800546e:	4603      	mov	r3, r0
 8005470:	2900      	cmp	r1, #0
 8005472:	bfb8      	it	lt
 8005474:	4249      	neglt	r1, r1
 8005476:	f803 2b02 	strb.w	r2, [r3], #2
 800547a:	bfb4      	ite	lt
 800547c:	222d      	movlt	r2, #45	; 0x2d
 800547e:	222b      	movge	r2, #43	; 0x2b
 8005480:	2909      	cmp	r1, #9
 8005482:	7042      	strb	r2, [r0, #1]
 8005484:	dd2a      	ble.n	80054dc <__exponent+0x70>
 8005486:	f10d 0407 	add.w	r4, sp, #7
 800548a:	46a4      	mov	ip, r4
 800548c:	270a      	movs	r7, #10
 800548e:	46a6      	mov	lr, r4
 8005490:	460a      	mov	r2, r1
 8005492:	fb91 f6f7 	sdiv	r6, r1, r7
 8005496:	fb07 1516 	mls	r5, r7, r6, r1
 800549a:	3530      	adds	r5, #48	; 0x30
 800549c:	2a63      	cmp	r2, #99	; 0x63
 800549e:	f104 34ff 	add.w	r4, r4, #4294967295
 80054a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80054a6:	4631      	mov	r1, r6
 80054a8:	dcf1      	bgt.n	800548e <__exponent+0x22>
 80054aa:	3130      	adds	r1, #48	; 0x30
 80054ac:	f1ae 0502 	sub.w	r5, lr, #2
 80054b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80054b4:	1c44      	adds	r4, r0, #1
 80054b6:	4629      	mov	r1, r5
 80054b8:	4561      	cmp	r1, ip
 80054ba:	d30a      	bcc.n	80054d2 <__exponent+0x66>
 80054bc:	f10d 0209 	add.w	r2, sp, #9
 80054c0:	eba2 020e 	sub.w	r2, r2, lr
 80054c4:	4565      	cmp	r5, ip
 80054c6:	bf88      	it	hi
 80054c8:	2200      	movhi	r2, #0
 80054ca:	4413      	add	r3, r2
 80054cc:	1a18      	subs	r0, r3, r0
 80054ce:	b003      	add	sp, #12
 80054d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80054da:	e7ed      	b.n	80054b8 <__exponent+0x4c>
 80054dc:	2330      	movs	r3, #48	; 0x30
 80054de:	3130      	adds	r1, #48	; 0x30
 80054e0:	7083      	strb	r3, [r0, #2]
 80054e2:	70c1      	strb	r1, [r0, #3]
 80054e4:	1d03      	adds	r3, r0, #4
 80054e6:	e7f1      	b.n	80054cc <__exponent+0x60>

080054e8 <_printf_float>:
 80054e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ec:	ed2d 8b02 	vpush	{d8}
 80054f0:	b08d      	sub	sp, #52	; 0x34
 80054f2:	460c      	mov	r4, r1
 80054f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80054f8:	4616      	mov	r6, r2
 80054fa:	461f      	mov	r7, r3
 80054fc:	4605      	mov	r5, r0
 80054fe:	f002 ff21 	bl	8008344 <_localeconv_r>
 8005502:	f8d0 a000 	ldr.w	sl, [r0]
 8005506:	4650      	mov	r0, sl
 8005508:	f7fa fe74 	bl	80001f4 <strlen>
 800550c:	2300      	movs	r3, #0
 800550e:	930a      	str	r3, [sp, #40]	; 0x28
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	9305      	str	r3, [sp, #20]
 8005514:	f8d8 3000 	ldr.w	r3, [r8]
 8005518:	f894 b018 	ldrb.w	fp, [r4, #24]
 800551c:	3307      	adds	r3, #7
 800551e:	f023 0307 	bic.w	r3, r3, #7
 8005522:	f103 0208 	add.w	r2, r3, #8
 8005526:	f8c8 2000 	str.w	r2, [r8]
 800552a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005532:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005536:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800553a:	9307      	str	r3, [sp, #28]
 800553c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005540:	ee08 0a10 	vmov	s16, r0
 8005544:	4b9f      	ldr	r3, [pc, #636]	; (80057c4 <_printf_float+0x2dc>)
 8005546:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800554a:	f04f 32ff 	mov.w	r2, #4294967295
 800554e:	f7fb fb05 	bl	8000b5c <__aeabi_dcmpun>
 8005552:	bb88      	cbnz	r0, 80055b8 <_printf_float+0xd0>
 8005554:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005558:	4b9a      	ldr	r3, [pc, #616]	; (80057c4 <_printf_float+0x2dc>)
 800555a:	f04f 32ff 	mov.w	r2, #4294967295
 800555e:	f7fb fadf 	bl	8000b20 <__aeabi_dcmple>
 8005562:	bb48      	cbnz	r0, 80055b8 <_printf_float+0xd0>
 8005564:	2200      	movs	r2, #0
 8005566:	2300      	movs	r3, #0
 8005568:	4640      	mov	r0, r8
 800556a:	4649      	mov	r1, r9
 800556c:	f7fb face 	bl	8000b0c <__aeabi_dcmplt>
 8005570:	b110      	cbz	r0, 8005578 <_printf_float+0x90>
 8005572:	232d      	movs	r3, #45	; 0x2d
 8005574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005578:	4b93      	ldr	r3, [pc, #588]	; (80057c8 <_printf_float+0x2e0>)
 800557a:	4894      	ldr	r0, [pc, #592]	; (80057cc <_printf_float+0x2e4>)
 800557c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005580:	bf94      	ite	ls
 8005582:	4698      	movls	r8, r3
 8005584:	4680      	movhi	r8, r0
 8005586:	2303      	movs	r3, #3
 8005588:	6123      	str	r3, [r4, #16]
 800558a:	9b05      	ldr	r3, [sp, #20]
 800558c:	f023 0204 	bic.w	r2, r3, #4
 8005590:	6022      	str	r2, [r4, #0]
 8005592:	f04f 0900 	mov.w	r9, #0
 8005596:	9700      	str	r7, [sp, #0]
 8005598:	4633      	mov	r3, r6
 800559a:	aa0b      	add	r2, sp, #44	; 0x2c
 800559c:	4621      	mov	r1, r4
 800559e:	4628      	mov	r0, r5
 80055a0:	f000 f9d8 	bl	8005954 <_printf_common>
 80055a4:	3001      	adds	r0, #1
 80055a6:	f040 8090 	bne.w	80056ca <_printf_float+0x1e2>
 80055aa:	f04f 30ff 	mov.w	r0, #4294967295
 80055ae:	b00d      	add	sp, #52	; 0x34
 80055b0:	ecbd 8b02 	vpop	{d8}
 80055b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b8:	4642      	mov	r2, r8
 80055ba:	464b      	mov	r3, r9
 80055bc:	4640      	mov	r0, r8
 80055be:	4649      	mov	r1, r9
 80055c0:	f7fb facc 	bl	8000b5c <__aeabi_dcmpun>
 80055c4:	b140      	cbz	r0, 80055d8 <_printf_float+0xf0>
 80055c6:	464b      	mov	r3, r9
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	bfbc      	itt	lt
 80055cc:	232d      	movlt	r3, #45	; 0x2d
 80055ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80055d2:	487f      	ldr	r0, [pc, #508]	; (80057d0 <_printf_float+0x2e8>)
 80055d4:	4b7f      	ldr	r3, [pc, #508]	; (80057d4 <_printf_float+0x2ec>)
 80055d6:	e7d1      	b.n	800557c <_printf_float+0x94>
 80055d8:	6863      	ldr	r3, [r4, #4]
 80055da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80055de:	9206      	str	r2, [sp, #24]
 80055e0:	1c5a      	adds	r2, r3, #1
 80055e2:	d13f      	bne.n	8005664 <_printf_float+0x17c>
 80055e4:	2306      	movs	r3, #6
 80055e6:	6063      	str	r3, [r4, #4]
 80055e8:	9b05      	ldr	r3, [sp, #20]
 80055ea:	6861      	ldr	r1, [r4, #4]
 80055ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80055f0:	2300      	movs	r3, #0
 80055f2:	9303      	str	r3, [sp, #12]
 80055f4:	ab0a      	add	r3, sp, #40	; 0x28
 80055f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80055fa:	ab09      	add	r3, sp, #36	; 0x24
 80055fc:	ec49 8b10 	vmov	d0, r8, r9
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	6022      	str	r2, [r4, #0]
 8005604:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005608:	4628      	mov	r0, r5
 800560a:	f7ff fecd 	bl	80053a8 <__cvt>
 800560e:	9b06      	ldr	r3, [sp, #24]
 8005610:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005612:	2b47      	cmp	r3, #71	; 0x47
 8005614:	4680      	mov	r8, r0
 8005616:	d108      	bne.n	800562a <_printf_float+0x142>
 8005618:	1cc8      	adds	r0, r1, #3
 800561a:	db02      	blt.n	8005622 <_printf_float+0x13a>
 800561c:	6863      	ldr	r3, [r4, #4]
 800561e:	4299      	cmp	r1, r3
 8005620:	dd41      	ble.n	80056a6 <_printf_float+0x1be>
 8005622:	f1ab 0b02 	sub.w	fp, fp, #2
 8005626:	fa5f fb8b 	uxtb.w	fp, fp
 800562a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800562e:	d820      	bhi.n	8005672 <_printf_float+0x18a>
 8005630:	3901      	subs	r1, #1
 8005632:	465a      	mov	r2, fp
 8005634:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005638:	9109      	str	r1, [sp, #36]	; 0x24
 800563a:	f7ff ff17 	bl	800546c <__exponent>
 800563e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005640:	1813      	adds	r3, r2, r0
 8005642:	2a01      	cmp	r2, #1
 8005644:	4681      	mov	r9, r0
 8005646:	6123      	str	r3, [r4, #16]
 8005648:	dc02      	bgt.n	8005650 <_printf_float+0x168>
 800564a:	6822      	ldr	r2, [r4, #0]
 800564c:	07d2      	lsls	r2, r2, #31
 800564e:	d501      	bpl.n	8005654 <_printf_float+0x16c>
 8005650:	3301      	adds	r3, #1
 8005652:	6123      	str	r3, [r4, #16]
 8005654:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005658:	2b00      	cmp	r3, #0
 800565a:	d09c      	beq.n	8005596 <_printf_float+0xae>
 800565c:	232d      	movs	r3, #45	; 0x2d
 800565e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005662:	e798      	b.n	8005596 <_printf_float+0xae>
 8005664:	9a06      	ldr	r2, [sp, #24]
 8005666:	2a47      	cmp	r2, #71	; 0x47
 8005668:	d1be      	bne.n	80055e8 <_printf_float+0x100>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1bc      	bne.n	80055e8 <_printf_float+0x100>
 800566e:	2301      	movs	r3, #1
 8005670:	e7b9      	b.n	80055e6 <_printf_float+0xfe>
 8005672:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005676:	d118      	bne.n	80056aa <_printf_float+0x1c2>
 8005678:	2900      	cmp	r1, #0
 800567a:	6863      	ldr	r3, [r4, #4]
 800567c:	dd0b      	ble.n	8005696 <_printf_float+0x1ae>
 800567e:	6121      	str	r1, [r4, #16]
 8005680:	b913      	cbnz	r3, 8005688 <_printf_float+0x1a0>
 8005682:	6822      	ldr	r2, [r4, #0]
 8005684:	07d0      	lsls	r0, r2, #31
 8005686:	d502      	bpl.n	800568e <_printf_float+0x1a6>
 8005688:	3301      	adds	r3, #1
 800568a:	440b      	add	r3, r1
 800568c:	6123      	str	r3, [r4, #16]
 800568e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005690:	f04f 0900 	mov.w	r9, #0
 8005694:	e7de      	b.n	8005654 <_printf_float+0x16c>
 8005696:	b913      	cbnz	r3, 800569e <_printf_float+0x1b6>
 8005698:	6822      	ldr	r2, [r4, #0]
 800569a:	07d2      	lsls	r2, r2, #31
 800569c:	d501      	bpl.n	80056a2 <_printf_float+0x1ba>
 800569e:	3302      	adds	r3, #2
 80056a0:	e7f4      	b.n	800568c <_printf_float+0x1a4>
 80056a2:	2301      	movs	r3, #1
 80056a4:	e7f2      	b.n	800568c <_printf_float+0x1a4>
 80056a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80056aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ac:	4299      	cmp	r1, r3
 80056ae:	db05      	blt.n	80056bc <_printf_float+0x1d4>
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	6121      	str	r1, [r4, #16]
 80056b4:	07d8      	lsls	r0, r3, #31
 80056b6:	d5ea      	bpl.n	800568e <_printf_float+0x1a6>
 80056b8:	1c4b      	adds	r3, r1, #1
 80056ba:	e7e7      	b.n	800568c <_printf_float+0x1a4>
 80056bc:	2900      	cmp	r1, #0
 80056be:	bfd4      	ite	le
 80056c0:	f1c1 0202 	rsble	r2, r1, #2
 80056c4:	2201      	movgt	r2, #1
 80056c6:	4413      	add	r3, r2
 80056c8:	e7e0      	b.n	800568c <_printf_float+0x1a4>
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	055a      	lsls	r2, r3, #21
 80056ce:	d407      	bmi.n	80056e0 <_printf_float+0x1f8>
 80056d0:	6923      	ldr	r3, [r4, #16]
 80056d2:	4642      	mov	r2, r8
 80056d4:	4631      	mov	r1, r6
 80056d6:	4628      	mov	r0, r5
 80056d8:	47b8      	blx	r7
 80056da:	3001      	adds	r0, #1
 80056dc:	d12c      	bne.n	8005738 <_printf_float+0x250>
 80056de:	e764      	b.n	80055aa <_printf_float+0xc2>
 80056e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056e4:	f240 80e0 	bls.w	80058a8 <_printf_float+0x3c0>
 80056e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056ec:	2200      	movs	r2, #0
 80056ee:	2300      	movs	r3, #0
 80056f0:	f7fb fa02 	bl	8000af8 <__aeabi_dcmpeq>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d034      	beq.n	8005762 <_printf_float+0x27a>
 80056f8:	4a37      	ldr	r2, [pc, #220]	; (80057d8 <_printf_float+0x2f0>)
 80056fa:	2301      	movs	r3, #1
 80056fc:	4631      	mov	r1, r6
 80056fe:	4628      	mov	r0, r5
 8005700:	47b8      	blx	r7
 8005702:	3001      	adds	r0, #1
 8005704:	f43f af51 	beq.w	80055aa <_printf_float+0xc2>
 8005708:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800570c:	429a      	cmp	r2, r3
 800570e:	db02      	blt.n	8005716 <_printf_float+0x22e>
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	07d8      	lsls	r0, r3, #31
 8005714:	d510      	bpl.n	8005738 <_printf_float+0x250>
 8005716:	ee18 3a10 	vmov	r3, s16
 800571a:	4652      	mov	r2, sl
 800571c:	4631      	mov	r1, r6
 800571e:	4628      	mov	r0, r5
 8005720:	47b8      	blx	r7
 8005722:	3001      	adds	r0, #1
 8005724:	f43f af41 	beq.w	80055aa <_printf_float+0xc2>
 8005728:	f04f 0800 	mov.w	r8, #0
 800572c:	f104 091a 	add.w	r9, r4, #26
 8005730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005732:	3b01      	subs	r3, #1
 8005734:	4543      	cmp	r3, r8
 8005736:	dc09      	bgt.n	800574c <_printf_float+0x264>
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	079b      	lsls	r3, r3, #30
 800573c:	f100 8105 	bmi.w	800594a <_printf_float+0x462>
 8005740:	68e0      	ldr	r0, [r4, #12]
 8005742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005744:	4298      	cmp	r0, r3
 8005746:	bfb8      	it	lt
 8005748:	4618      	movlt	r0, r3
 800574a:	e730      	b.n	80055ae <_printf_float+0xc6>
 800574c:	2301      	movs	r3, #1
 800574e:	464a      	mov	r2, r9
 8005750:	4631      	mov	r1, r6
 8005752:	4628      	mov	r0, r5
 8005754:	47b8      	blx	r7
 8005756:	3001      	adds	r0, #1
 8005758:	f43f af27 	beq.w	80055aa <_printf_float+0xc2>
 800575c:	f108 0801 	add.w	r8, r8, #1
 8005760:	e7e6      	b.n	8005730 <_printf_float+0x248>
 8005762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005764:	2b00      	cmp	r3, #0
 8005766:	dc39      	bgt.n	80057dc <_printf_float+0x2f4>
 8005768:	4a1b      	ldr	r2, [pc, #108]	; (80057d8 <_printf_float+0x2f0>)
 800576a:	2301      	movs	r3, #1
 800576c:	4631      	mov	r1, r6
 800576e:	4628      	mov	r0, r5
 8005770:	47b8      	blx	r7
 8005772:	3001      	adds	r0, #1
 8005774:	f43f af19 	beq.w	80055aa <_printf_float+0xc2>
 8005778:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800577c:	4313      	orrs	r3, r2
 800577e:	d102      	bne.n	8005786 <_printf_float+0x29e>
 8005780:	6823      	ldr	r3, [r4, #0]
 8005782:	07d9      	lsls	r1, r3, #31
 8005784:	d5d8      	bpl.n	8005738 <_printf_float+0x250>
 8005786:	ee18 3a10 	vmov	r3, s16
 800578a:	4652      	mov	r2, sl
 800578c:	4631      	mov	r1, r6
 800578e:	4628      	mov	r0, r5
 8005790:	47b8      	blx	r7
 8005792:	3001      	adds	r0, #1
 8005794:	f43f af09 	beq.w	80055aa <_printf_float+0xc2>
 8005798:	f04f 0900 	mov.w	r9, #0
 800579c:	f104 0a1a 	add.w	sl, r4, #26
 80057a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057a2:	425b      	negs	r3, r3
 80057a4:	454b      	cmp	r3, r9
 80057a6:	dc01      	bgt.n	80057ac <_printf_float+0x2c4>
 80057a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057aa:	e792      	b.n	80056d2 <_printf_float+0x1ea>
 80057ac:	2301      	movs	r3, #1
 80057ae:	4652      	mov	r2, sl
 80057b0:	4631      	mov	r1, r6
 80057b2:	4628      	mov	r0, r5
 80057b4:	47b8      	blx	r7
 80057b6:	3001      	adds	r0, #1
 80057b8:	f43f aef7 	beq.w	80055aa <_printf_float+0xc2>
 80057bc:	f109 0901 	add.w	r9, r9, #1
 80057c0:	e7ee      	b.n	80057a0 <_printf_float+0x2b8>
 80057c2:	bf00      	nop
 80057c4:	7fefffff 	.word	0x7fefffff
 80057c8:	0800bed0 	.word	0x0800bed0
 80057cc:	0800bed4 	.word	0x0800bed4
 80057d0:	0800bedc 	.word	0x0800bedc
 80057d4:	0800bed8 	.word	0x0800bed8
 80057d8:	0800c2d1 	.word	0x0800c2d1
 80057dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057e0:	429a      	cmp	r2, r3
 80057e2:	bfa8      	it	ge
 80057e4:	461a      	movge	r2, r3
 80057e6:	2a00      	cmp	r2, #0
 80057e8:	4691      	mov	r9, r2
 80057ea:	dc37      	bgt.n	800585c <_printf_float+0x374>
 80057ec:	f04f 0b00 	mov.w	fp, #0
 80057f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057f4:	f104 021a 	add.w	r2, r4, #26
 80057f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057fa:	9305      	str	r3, [sp, #20]
 80057fc:	eba3 0309 	sub.w	r3, r3, r9
 8005800:	455b      	cmp	r3, fp
 8005802:	dc33      	bgt.n	800586c <_printf_float+0x384>
 8005804:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005808:	429a      	cmp	r2, r3
 800580a:	db3b      	blt.n	8005884 <_printf_float+0x39c>
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	07da      	lsls	r2, r3, #31
 8005810:	d438      	bmi.n	8005884 <_printf_float+0x39c>
 8005812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005814:	9a05      	ldr	r2, [sp, #20]
 8005816:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005818:	1a9a      	subs	r2, r3, r2
 800581a:	eba3 0901 	sub.w	r9, r3, r1
 800581e:	4591      	cmp	r9, r2
 8005820:	bfa8      	it	ge
 8005822:	4691      	movge	r9, r2
 8005824:	f1b9 0f00 	cmp.w	r9, #0
 8005828:	dc35      	bgt.n	8005896 <_printf_float+0x3ae>
 800582a:	f04f 0800 	mov.w	r8, #0
 800582e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005832:	f104 0a1a 	add.w	sl, r4, #26
 8005836:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800583a:	1a9b      	subs	r3, r3, r2
 800583c:	eba3 0309 	sub.w	r3, r3, r9
 8005840:	4543      	cmp	r3, r8
 8005842:	f77f af79 	ble.w	8005738 <_printf_float+0x250>
 8005846:	2301      	movs	r3, #1
 8005848:	4652      	mov	r2, sl
 800584a:	4631      	mov	r1, r6
 800584c:	4628      	mov	r0, r5
 800584e:	47b8      	blx	r7
 8005850:	3001      	adds	r0, #1
 8005852:	f43f aeaa 	beq.w	80055aa <_printf_float+0xc2>
 8005856:	f108 0801 	add.w	r8, r8, #1
 800585a:	e7ec      	b.n	8005836 <_printf_float+0x34e>
 800585c:	4613      	mov	r3, r2
 800585e:	4631      	mov	r1, r6
 8005860:	4642      	mov	r2, r8
 8005862:	4628      	mov	r0, r5
 8005864:	47b8      	blx	r7
 8005866:	3001      	adds	r0, #1
 8005868:	d1c0      	bne.n	80057ec <_printf_float+0x304>
 800586a:	e69e      	b.n	80055aa <_printf_float+0xc2>
 800586c:	2301      	movs	r3, #1
 800586e:	4631      	mov	r1, r6
 8005870:	4628      	mov	r0, r5
 8005872:	9205      	str	r2, [sp, #20]
 8005874:	47b8      	blx	r7
 8005876:	3001      	adds	r0, #1
 8005878:	f43f ae97 	beq.w	80055aa <_printf_float+0xc2>
 800587c:	9a05      	ldr	r2, [sp, #20]
 800587e:	f10b 0b01 	add.w	fp, fp, #1
 8005882:	e7b9      	b.n	80057f8 <_printf_float+0x310>
 8005884:	ee18 3a10 	vmov	r3, s16
 8005888:	4652      	mov	r2, sl
 800588a:	4631      	mov	r1, r6
 800588c:	4628      	mov	r0, r5
 800588e:	47b8      	blx	r7
 8005890:	3001      	adds	r0, #1
 8005892:	d1be      	bne.n	8005812 <_printf_float+0x32a>
 8005894:	e689      	b.n	80055aa <_printf_float+0xc2>
 8005896:	9a05      	ldr	r2, [sp, #20]
 8005898:	464b      	mov	r3, r9
 800589a:	4442      	add	r2, r8
 800589c:	4631      	mov	r1, r6
 800589e:	4628      	mov	r0, r5
 80058a0:	47b8      	blx	r7
 80058a2:	3001      	adds	r0, #1
 80058a4:	d1c1      	bne.n	800582a <_printf_float+0x342>
 80058a6:	e680      	b.n	80055aa <_printf_float+0xc2>
 80058a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058aa:	2a01      	cmp	r2, #1
 80058ac:	dc01      	bgt.n	80058b2 <_printf_float+0x3ca>
 80058ae:	07db      	lsls	r3, r3, #31
 80058b0:	d538      	bpl.n	8005924 <_printf_float+0x43c>
 80058b2:	2301      	movs	r3, #1
 80058b4:	4642      	mov	r2, r8
 80058b6:	4631      	mov	r1, r6
 80058b8:	4628      	mov	r0, r5
 80058ba:	47b8      	blx	r7
 80058bc:	3001      	adds	r0, #1
 80058be:	f43f ae74 	beq.w	80055aa <_printf_float+0xc2>
 80058c2:	ee18 3a10 	vmov	r3, s16
 80058c6:	4652      	mov	r2, sl
 80058c8:	4631      	mov	r1, r6
 80058ca:	4628      	mov	r0, r5
 80058cc:	47b8      	blx	r7
 80058ce:	3001      	adds	r0, #1
 80058d0:	f43f ae6b 	beq.w	80055aa <_printf_float+0xc2>
 80058d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058d8:	2200      	movs	r2, #0
 80058da:	2300      	movs	r3, #0
 80058dc:	f7fb f90c 	bl	8000af8 <__aeabi_dcmpeq>
 80058e0:	b9d8      	cbnz	r0, 800591a <_printf_float+0x432>
 80058e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e4:	f108 0201 	add.w	r2, r8, #1
 80058e8:	3b01      	subs	r3, #1
 80058ea:	4631      	mov	r1, r6
 80058ec:	4628      	mov	r0, r5
 80058ee:	47b8      	blx	r7
 80058f0:	3001      	adds	r0, #1
 80058f2:	d10e      	bne.n	8005912 <_printf_float+0x42a>
 80058f4:	e659      	b.n	80055aa <_printf_float+0xc2>
 80058f6:	2301      	movs	r3, #1
 80058f8:	4652      	mov	r2, sl
 80058fa:	4631      	mov	r1, r6
 80058fc:	4628      	mov	r0, r5
 80058fe:	47b8      	blx	r7
 8005900:	3001      	adds	r0, #1
 8005902:	f43f ae52 	beq.w	80055aa <_printf_float+0xc2>
 8005906:	f108 0801 	add.w	r8, r8, #1
 800590a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800590c:	3b01      	subs	r3, #1
 800590e:	4543      	cmp	r3, r8
 8005910:	dcf1      	bgt.n	80058f6 <_printf_float+0x40e>
 8005912:	464b      	mov	r3, r9
 8005914:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005918:	e6dc      	b.n	80056d4 <_printf_float+0x1ec>
 800591a:	f04f 0800 	mov.w	r8, #0
 800591e:	f104 0a1a 	add.w	sl, r4, #26
 8005922:	e7f2      	b.n	800590a <_printf_float+0x422>
 8005924:	2301      	movs	r3, #1
 8005926:	4642      	mov	r2, r8
 8005928:	e7df      	b.n	80058ea <_printf_float+0x402>
 800592a:	2301      	movs	r3, #1
 800592c:	464a      	mov	r2, r9
 800592e:	4631      	mov	r1, r6
 8005930:	4628      	mov	r0, r5
 8005932:	47b8      	blx	r7
 8005934:	3001      	adds	r0, #1
 8005936:	f43f ae38 	beq.w	80055aa <_printf_float+0xc2>
 800593a:	f108 0801 	add.w	r8, r8, #1
 800593e:	68e3      	ldr	r3, [r4, #12]
 8005940:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005942:	1a5b      	subs	r3, r3, r1
 8005944:	4543      	cmp	r3, r8
 8005946:	dcf0      	bgt.n	800592a <_printf_float+0x442>
 8005948:	e6fa      	b.n	8005740 <_printf_float+0x258>
 800594a:	f04f 0800 	mov.w	r8, #0
 800594e:	f104 0919 	add.w	r9, r4, #25
 8005952:	e7f4      	b.n	800593e <_printf_float+0x456>

08005954 <_printf_common>:
 8005954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005958:	4616      	mov	r6, r2
 800595a:	4699      	mov	r9, r3
 800595c:	688a      	ldr	r2, [r1, #8]
 800595e:	690b      	ldr	r3, [r1, #16]
 8005960:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005964:	4293      	cmp	r3, r2
 8005966:	bfb8      	it	lt
 8005968:	4613      	movlt	r3, r2
 800596a:	6033      	str	r3, [r6, #0]
 800596c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005970:	4607      	mov	r7, r0
 8005972:	460c      	mov	r4, r1
 8005974:	b10a      	cbz	r2, 800597a <_printf_common+0x26>
 8005976:	3301      	adds	r3, #1
 8005978:	6033      	str	r3, [r6, #0]
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	0699      	lsls	r1, r3, #26
 800597e:	bf42      	ittt	mi
 8005980:	6833      	ldrmi	r3, [r6, #0]
 8005982:	3302      	addmi	r3, #2
 8005984:	6033      	strmi	r3, [r6, #0]
 8005986:	6825      	ldr	r5, [r4, #0]
 8005988:	f015 0506 	ands.w	r5, r5, #6
 800598c:	d106      	bne.n	800599c <_printf_common+0x48>
 800598e:	f104 0a19 	add.w	sl, r4, #25
 8005992:	68e3      	ldr	r3, [r4, #12]
 8005994:	6832      	ldr	r2, [r6, #0]
 8005996:	1a9b      	subs	r3, r3, r2
 8005998:	42ab      	cmp	r3, r5
 800599a:	dc26      	bgt.n	80059ea <_printf_common+0x96>
 800599c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059a0:	1e13      	subs	r3, r2, #0
 80059a2:	6822      	ldr	r2, [r4, #0]
 80059a4:	bf18      	it	ne
 80059a6:	2301      	movne	r3, #1
 80059a8:	0692      	lsls	r2, r2, #26
 80059aa:	d42b      	bmi.n	8005a04 <_printf_common+0xb0>
 80059ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059b0:	4649      	mov	r1, r9
 80059b2:	4638      	mov	r0, r7
 80059b4:	47c0      	blx	r8
 80059b6:	3001      	adds	r0, #1
 80059b8:	d01e      	beq.n	80059f8 <_printf_common+0xa4>
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	68e5      	ldr	r5, [r4, #12]
 80059be:	6832      	ldr	r2, [r6, #0]
 80059c0:	f003 0306 	and.w	r3, r3, #6
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	bf08      	it	eq
 80059c8:	1aad      	subeq	r5, r5, r2
 80059ca:	68a3      	ldr	r3, [r4, #8]
 80059cc:	6922      	ldr	r2, [r4, #16]
 80059ce:	bf0c      	ite	eq
 80059d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059d4:	2500      	movne	r5, #0
 80059d6:	4293      	cmp	r3, r2
 80059d8:	bfc4      	itt	gt
 80059da:	1a9b      	subgt	r3, r3, r2
 80059dc:	18ed      	addgt	r5, r5, r3
 80059de:	2600      	movs	r6, #0
 80059e0:	341a      	adds	r4, #26
 80059e2:	42b5      	cmp	r5, r6
 80059e4:	d11a      	bne.n	8005a1c <_printf_common+0xc8>
 80059e6:	2000      	movs	r0, #0
 80059e8:	e008      	b.n	80059fc <_printf_common+0xa8>
 80059ea:	2301      	movs	r3, #1
 80059ec:	4652      	mov	r2, sl
 80059ee:	4649      	mov	r1, r9
 80059f0:	4638      	mov	r0, r7
 80059f2:	47c0      	blx	r8
 80059f4:	3001      	adds	r0, #1
 80059f6:	d103      	bne.n	8005a00 <_printf_common+0xac>
 80059f8:	f04f 30ff 	mov.w	r0, #4294967295
 80059fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a00:	3501      	adds	r5, #1
 8005a02:	e7c6      	b.n	8005992 <_printf_common+0x3e>
 8005a04:	18e1      	adds	r1, r4, r3
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	2030      	movs	r0, #48	; 0x30
 8005a0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a0e:	4422      	add	r2, r4
 8005a10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a18:	3302      	adds	r3, #2
 8005a1a:	e7c7      	b.n	80059ac <_printf_common+0x58>
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	4622      	mov	r2, r4
 8005a20:	4649      	mov	r1, r9
 8005a22:	4638      	mov	r0, r7
 8005a24:	47c0      	blx	r8
 8005a26:	3001      	adds	r0, #1
 8005a28:	d0e6      	beq.n	80059f8 <_printf_common+0xa4>
 8005a2a:	3601      	adds	r6, #1
 8005a2c:	e7d9      	b.n	80059e2 <_printf_common+0x8e>
	...

08005a30 <_printf_i>:
 8005a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a34:	7e0f      	ldrb	r7, [r1, #24]
 8005a36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a38:	2f78      	cmp	r7, #120	; 0x78
 8005a3a:	4691      	mov	r9, r2
 8005a3c:	4680      	mov	r8, r0
 8005a3e:	460c      	mov	r4, r1
 8005a40:	469a      	mov	sl, r3
 8005a42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a46:	d807      	bhi.n	8005a58 <_printf_i+0x28>
 8005a48:	2f62      	cmp	r7, #98	; 0x62
 8005a4a:	d80a      	bhi.n	8005a62 <_printf_i+0x32>
 8005a4c:	2f00      	cmp	r7, #0
 8005a4e:	f000 80d8 	beq.w	8005c02 <_printf_i+0x1d2>
 8005a52:	2f58      	cmp	r7, #88	; 0x58
 8005a54:	f000 80a3 	beq.w	8005b9e <_printf_i+0x16e>
 8005a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a60:	e03a      	b.n	8005ad8 <_printf_i+0xa8>
 8005a62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a66:	2b15      	cmp	r3, #21
 8005a68:	d8f6      	bhi.n	8005a58 <_printf_i+0x28>
 8005a6a:	a101      	add	r1, pc, #4	; (adr r1, 8005a70 <_printf_i+0x40>)
 8005a6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a70:	08005ac9 	.word	0x08005ac9
 8005a74:	08005add 	.word	0x08005add
 8005a78:	08005a59 	.word	0x08005a59
 8005a7c:	08005a59 	.word	0x08005a59
 8005a80:	08005a59 	.word	0x08005a59
 8005a84:	08005a59 	.word	0x08005a59
 8005a88:	08005add 	.word	0x08005add
 8005a8c:	08005a59 	.word	0x08005a59
 8005a90:	08005a59 	.word	0x08005a59
 8005a94:	08005a59 	.word	0x08005a59
 8005a98:	08005a59 	.word	0x08005a59
 8005a9c:	08005be9 	.word	0x08005be9
 8005aa0:	08005b0d 	.word	0x08005b0d
 8005aa4:	08005bcb 	.word	0x08005bcb
 8005aa8:	08005a59 	.word	0x08005a59
 8005aac:	08005a59 	.word	0x08005a59
 8005ab0:	08005c0b 	.word	0x08005c0b
 8005ab4:	08005a59 	.word	0x08005a59
 8005ab8:	08005b0d 	.word	0x08005b0d
 8005abc:	08005a59 	.word	0x08005a59
 8005ac0:	08005a59 	.word	0x08005a59
 8005ac4:	08005bd3 	.word	0x08005bd3
 8005ac8:	682b      	ldr	r3, [r5, #0]
 8005aca:	1d1a      	adds	r2, r3, #4
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	602a      	str	r2, [r5, #0]
 8005ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ad4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e0a3      	b.n	8005c24 <_printf_i+0x1f4>
 8005adc:	6820      	ldr	r0, [r4, #0]
 8005ade:	6829      	ldr	r1, [r5, #0]
 8005ae0:	0606      	lsls	r6, r0, #24
 8005ae2:	f101 0304 	add.w	r3, r1, #4
 8005ae6:	d50a      	bpl.n	8005afe <_printf_i+0xce>
 8005ae8:	680e      	ldr	r6, [r1, #0]
 8005aea:	602b      	str	r3, [r5, #0]
 8005aec:	2e00      	cmp	r6, #0
 8005aee:	da03      	bge.n	8005af8 <_printf_i+0xc8>
 8005af0:	232d      	movs	r3, #45	; 0x2d
 8005af2:	4276      	negs	r6, r6
 8005af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005af8:	485e      	ldr	r0, [pc, #376]	; (8005c74 <_printf_i+0x244>)
 8005afa:	230a      	movs	r3, #10
 8005afc:	e019      	b.n	8005b32 <_printf_i+0x102>
 8005afe:	680e      	ldr	r6, [r1, #0]
 8005b00:	602b      	str	r3, [r5, #0]
 8005b02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b06:	bf18      	it	ne
 8005b08:	b236      	sxthne	r6, r6
 8005b0a:	e7ef      	b.n	8005aec <_printf_i+0xbc>
 8005b0c:	682b      	ldr	r3, [r5, #0]
 8005b0e:	6820      	ldr	r0, [r4, #0]
 8005b10:	1d19      	adds	r1, r3, #4
 8005b12:	6029      	str	r1, [r5, #0]
 8005b14:	0601      	lsls	r1, r0, #24
 8005b16:	d501      	bpl.n	8005b1c <_printf_i+0xec>
 8005b18:	681e      	ldr	r6, [r3, #0]
 8005b1a:	e002      	b.n	8005b22 <_printf_i+0xf2>
 8005b1c:	0646      	lsls	r6, r0, #25
 8005b1e:	d5fb      	bpl.n	8005b18 <_printf_i+0xe8>
 8005b20:	881e      	ldrh	r6, [r3, #0]
 8005b22:	4854      	ldr	r0, [pc, #336]	; (8005c74 <_printf_i+0x244>)
 8005b24:	2f6f      	cmp	r7, #111	; 0x6f
 8005b26:	bf0c      	ite	eq
 8005b28:	2308      	moveq	r3, #8
 8005b2a:	230a      	movne	r3, #10
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b32:	6865      	ldr	r5, [r4, #4]
 8005b34:	60a5      	str	r5, [r4, #8]
 8005b36:	2d00      	cmp	r5, #0
 8005b38:	bfa2      	ittt	ge
 8005b3a:	6821      	ldrge	r1, [r4, #0]
 8005b3c:	f021 0104 	bicge.w	r1, r1, #4
 8005b40:	6021      	strge	r1, [r4, #0]
 8005b42:	b90e      	cbnz	r6, 8005b48 <_printf_i+0x118>
 8005b44:	2d00      	cmp	r5, #0
 8005b46:	d04d      	beq.n	8005be4 <_printf_i+0x1b4>
 8005b48:	4615      	mov	r5, r2
 8005b4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b4e:	fb03 6711 	mls	r7, r3, r1, r6
 8005b52:	5dc7      	ldrb	r7, [r0, r7]
 8005b54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b58:	4637      	mov	r7, r6
 8005b5a:	42bb      	cmp	r3, r7
 8005b5c:	460e      	mov	r6, r1
 8005b5e:	d9f4      	bls.n	8005b4a <_printf_i+0x11a>
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d10b      	bne.n	8005b7c <_printf_i+0x14c>
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	07de      	lsls	r6, r3, #31
 8005b68:	d508      	bpl.n	8005b7c <_printf_i+0x14c>
 8005b6a:	6923      	ldr	r3, [r4, #16]
 8005b6c:	6861      	ldr	r1, [r4, #4]
 8005b6e:	4299      	cmp	r1, r3
 8005b70:	bfde      	ittt	le
 8005b72:	2330      	movle	r3, #48	; 0x30
 8005b74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b7c:	1b52      	subs	r2, r2, r5
 8005b7e:	6122      	str	r2, [r4, #16]
 8005b80:	f8cd a000 	str.w	sl, [sp]
 8005b84:	464b      	mov	r3, r9
 8005b86:	aa03      	add	r2, sp, #12
 8005b88:	4621      	mov	r1, r4
 8005b8a:	4640      	mov	r0, r8
 8005b8c:	f7ff fee2 	bl	8005954 <_printf_common>
 8005b90:	3001      	adds	r0, #1
 8005b92:	d14c      	bne.n	8005c2e <_printf_i+0x1fe>
 8005b94:	f04f 30ff 	mov.w	r0, #4294967295
 8005b98:	b004      	add	sp, #16
 8005b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b9e:	4835      	ldr	r0, [pc, #212]	; (8005c74 <_printf_i+0x244>)
 8005ba0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ba4:	6829      	ldr	r1, [r5, #0]
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005bac:	6029      	str	r1, [r5, #0]
 8005bae:	061d      	lsls	r5, r3, #24
 8005bb0:	d514      	bpl.n	8005bdc <_printf_i+0x1ac>
 8005bb2:	07df      	lsls	r7, r3, #31
 8005bb4:	bf44      	itt	mi
 8005bb6:	f043 0320 	orrmi.w	r3, r3, #32
 8005bba:	6023      	strmi	r3, [r4, #0]
 8005bbc:	b91e      	cbnz	r6, 8005bc6 <_printf_i+0x196>
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	f023 0320 	bic.w	r3, r3, #32
 8005bc4:	6023      	str	r3, [r4, #0]
 8005bc6:	2310      	movs	r3, #16
 8005bc8:	e7b0      	b.n	8005b2c <_printf_i+0xfc>
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	f043 0320 	orr.w	r3, r3, #32
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	2378      	movs	r3, #120	; 0x78
 8005bd4:	4828      	ldr	r0, [pc, #160]	; (8005c78 <_printf_i+0x248>)
 8005bd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005bda:	e7e3      	b.n	8005ba4 <_printf_i+0x174>
 8005bdc:	0659      	lsls	r1, r3, #25
 8005bde:	bf48      	it	mi
 8005be0:	b2b6      	uxthmi	r6, r6
 8005be2:	e7e6      	b.n	8005bb2 <_printf_i+0x182>
 8005be4:	4615      	mov	r5, r2
 8005be6:	e7bb      	b.n	8005b60 <_printf_i+0x130>
 8005be8:	682b      	ldr	r3, [r5, #0]
 8005bea:	6826      	ldr	r6, [r4, #0]
 8005bec:	6961      	ldr	r1, [r4, #20]
 8005bee:	1d18      	adds	r0, r3, #4
 8005bf0:	6028      	str	r0, [r5, #0]
 8005bf2:	0635      	lsls	r5, r6, #24
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	d501      	bpl.n	8005bfc <_printf_i+0x1cc>
 8005bf8:	6019      	str	r1, [r3, #0]
 8005bfa:	e002      	b.n	8005c02 <_printf_i+0x1d2>
 8005bfc:	0670      	lsls	r0, r6, #25
 8005bfe:	d5fb      	bpl.n	8005bf8 <_printf_i+0x1c8>
 8005c00:	8019      	strh	r1, [r3, #0]
 8005c02:	2300      	movs	r3, #0
 8005c04:	6123      	str	r3, [r4, #16]
 8005c06:	4615      	mov	r5, r2
 8005c08:	e7ba      	b.n	8005b80 <_printf_i+0x150>
 8005c0a:	682b      	ldr	r3, [r5, #0]
 8005c0c:	1d1a      	adds	r2, r3, #4
 8005c0e:	602a      	str	r2, [r5, #0]
 8005c10:	681d      	ldr	r5, [r3, #0]
 8005c12:	6862      	ldr	r2, [r4, #4]
 8005c14:	2100      	movs	r1, #0
 8005c16:	4628      	mov	r0, r5
 8005c18:	f7fa fafa 	bl	8000210 <memchr>
 8005c1c:	b108      	cbz	r0, 8005c22 <_printf_i+0x1f2>
 8005c1e:	1b40      	subs	r0, r0, r5
 8005c20:	6060      	str	r0, [r4, #4]
 8005c22:	6863      	ldr	r3, [r4, #4]
 8005c24:	6123      	str	r3, [r4, #16]
 8005c26:	2300      	movs	r3, #0
 8005c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c2c:	e7a8      	b.n	8005b80 <_printf_i+0x150>
 8005c2e:	6923      	ldr	r3, [r4, #16]
 8005c30:	462a      	mov	r2, r5
 8005c32:	4649      	mov	r1, r9
 8005c34:	4640      	mov	r0, r8
 8005c36:	47d0      	blx	sl
 8005c38:	3001      	adds	r0, #1
 8005c3a:	d0ab      	beq.n	8005b94 <_printf_i+0x164>
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	079b      	lsls	r3, r3, #30
 8005c40:	d413      	bmi.n	8005c6a <_printf_i+0x23a>
 8005c42:	68e0      	ldr	r0, [r4, #12]
 8005c44:	9b03      	ldr	r3, [sp, #12]
 8005c46:	4298      	cmp	r0, r3
 8005c48:	bfb8      	it	lt
 8005c4a:	4618      	movlt	r0, r3
 8005c4c:	e7a4      	b.n	8005b98 <_printf_i+0x168>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	4632      	mov	r2, r6
 8005c52:	4649      	mov	r1, r9
 8005c54:	4640      	mov	r0, r8
 8005c56:	47d0      	blx	sl
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d09b      	beq.n	8005b94 <_printf_i+0x164>
 8005c5c:	3501      	adds	r5, #1
 8005c5e:	68e3      	ldr	r3, [r4, #12]
 8005c60:	9903      	ldr	r1, [sp, #12]
 8005c62:	1a5b      	subs	r3, r3, r1
 8005c64:	42ab      	cmp	r3, r5
 8005c66:	dcf2      	bgt.n	8005c4e <_printf_i+0x21e>
 8005c68:	e7eb      	b.n	8005c42 <_printf_i+0x212>
 8005c6a:	2500      	movs	r5, #0
 8005c6c:	f104 0619 	add.w	r6, r4, #25
 8005c70:	e7f5      	b.n	8005c5e <_printf_i+0x22e>
 8005c72:	bf00      	nop
 8005c74:	0800bee0 	.word	0x0800bee0
 8005c78:	0800bef1 	.word	0x0800bef1

08005c7c <_scanf_float>:
 8005c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c80:	b087      	sub	sp, #28
 8005c82:	4617      	mov	r7, r2
 8005c84:	9303      	str	r3, [sp, #12]
 8005c86:	688b      	ldr	r3, [r1, #8]
 8005c88:	1e5a      	subs	r2, r3, #1
 8005c8a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005c8e:	bf83      	ittte	hi
 8005c90:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005c94:	195b      	addhi	r3, r3, r5
 8005c96:	9302      	strhi	r3, [sp, #8]
 8005c98:	2300      	movls	r3, #0
 8005c9a:	bf86      	itte	hi
 8005c9c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005ca0:	608b      	strhi	r3, [r1, #8]
 8005ca2:	9302      	strls	r3, [sp, #8]
 8005ca4:	680b      	ldr	r3, [r1, #0]
 8005ca6:	468b      	mov	fp, r1
 8005ca8:	2500      	movs	r5, #0
 8005caa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005cae:	f84b 3b1c 	str.w	r3, [fp], #28
 8005cb2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005cb6:	4680      	mov	r8, r0
 8005cb8:	460c      	mov	r4, r1
 8005cba:	465e      	mov	r6, fp
 8005cbc:	46aa      	mov	sl, r5
 8005cbe:	46a9      	mov	r9, r5
 8005cc0:	9501      	str	r5, [sp, #4]
 8005cc2:	68a2      	ldr	r2, [r4, #8]
 8005cc4:	b152      	cbz	r2, 8005cdc <_scanf_float+0x60>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b4e      	cmp	r3, #78	; 0x4e
 8005ccc:	d864      	bhi.n	8005d98 <_scanf_float+0x11c>
 8005cce:	2b40      	cmp	r3, #64	; 0x40
 8005cd0:	d83c      	bhi.n	8005d4c <_scanf_float+0xd0>
 8005cd2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005cd6:	b2c8      	uxtb	r0, r1
 8005cd8:	280e      	cmp	r0, #14
 8005cda:	d93a      	bls.n	8005d52 <_scanf_float+0xd6>
 8005cdc:	f1b9 0f00 	cmp.w	r9, #0
 8005ce0:	d003      	beq.n	8005cea <_scanf_float+0x6e>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ce8:	6023      	str	r3, [r4, #0]
 8005cea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cee:	f1ba 0f01 	cmp.w	sl, #1
 8005cf2:	f200 8113 	bhi.w	8005f1c <_scanf_float+0x2a0>
 8005cf6:	455e      	cmp	r6, fp
 8005cf8:	f200 8105 	bhi.w	8005f06 <_scanf_float+0x28a>
 8005cfc:	2501      	movs	r5, #1
 8005cfe:	4628      	mov	r0, r5
 8005d00:	b007      	add	sp, #28
 8005d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d06:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005d0a:	2a0d      	cmp	r2, #13
 8005d0c:	d8e6      	bhi.n	8005cdc <_scanf_float+0x60>
 8005d0e:	a101      	add	r1, pc, #4	; (adr r1, 8005d14 <_scanf_float+0x98>)
 8005d10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005d14:	08005e53 	.word	0x08005e53
 8005d18:	08005cdd 	.word	0x08005cdd
 8005d1c:	08005cdd 	.word	0x08005cdd
 8005d20:	08005cdd 	.word	0x08005cdd
 8005d24:	08005eb3 	.word	0x08005eb3
 8005d28:	08005e8b 	.word	0x08005e8b
 8005d2c:	08005cdd 	.word	0x08005cdd
 8005d30:	08005cdd 	.word	0x08005cdd
 8005d34:	08005e61 	.word	0x08005e61
 8005d38:	08005cdd 	.word	0x08005cdd
 8005d3c:	08005cdd 	.word	0x08005cdd
 8005d40:	08005cdd 	.word	0x08005cdd
 8005d44:	08005cdd 	.word	0x08005cdd
 8005d48:	08005e19 	.word	0x08005e19
 8005d4c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005d50:	e7db      	b.n	8005d0a <_scanf_float+0x8e>
 8005d52:	290e      	cmp	r1, #14
 8005d54:	d8c2      	bhi.n	8005cdc <_scanf_float+0x60>
 8005d56:	a001      	add	r0, pc, #4	; (adr r0, 8005d5c <_scanf_float+0xe0>)
 8005d58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005d5c:	08005e0b 	.word	0x08005e0b
 8005d60:	08005cdd 	.word	0x08005cdd
 8005d64:	08005e0b 	.word	0x08005e0b
 8005d68:	08005e9f 	.word	0x08005e9f
 8005d6c:	08005cdd 	.word	0x08005cdd
 8005d70:	08005db9 	.word	0x08005db9
 8005d74:	08005df5 	.word	0x08005df5
 8005d78:	08005df5 	.word	0x08005df5
 8005d7c:	08005df5 	.word	0x08005df5
 8005d80:	08005df5 	.word	0x08005df5
 8005d84:	08005df5 	.word	0x08005df5
 8005d88:	08005df5 	.word	0x08005df5
 8005d8c:	08005df5 	.word	0x08005df5
 8005d90:	08005df5 	.word	0x08005df5
 8005d94:	08005df5 	.word	0x08005df5
 8005d98:	2b6e      	cmp	r3, #110	; 0x6e
 8005d9a:	d809      	bhi.n	8005db0 <_scanf_float+0x134>
 8005d9c:	2b60      	cmp	r3, #96	; 0x60
 8005d9e:	d8b2      	bhi.n	8005d06 <_scanf_float+0x8a>
 8005da0:	2b54      	cmp	r3, #84	; 0x54
 8005da2:	d077      	beq.n	8005e94 <_scanf_float+0x218>
 8005da4:	2b59      	cmp	r3, #89	; 0x59
 8005da6:	d199      	bne.n	8005cdc <_scanf_float+0x60>
 8005da8:	2d07      	cmp	r5, #7
 8005daa:	d197      	bne.n	8005cdc <_scanf_float+0x60>
 8005dac:	2508      	movs	r5, #8
 8005dae:	e029      	b.n	8005e04 <_scanf_float+0x188>
 8005db0:	2b74      	cmp	r3, #116	; 0x74
 8005db2:	d06f      	beq.n	8005e94 <_scanf_float+0x218>
 8005db4:	2b79      	cmp	r3, #121	; 0x79
 8005db6:	e7f6      	b.n	8005da6 <_scanf_float+0x12a>
 8005db8:	6821      	ldr	r1, [r4, #0]
 8005dba:	05c8      	lsls	r0, r1, #23
 8005dbc:	d51a      	bpl.n	8005df4 <_scanf_float+0x178>
 8005dbe:	9b02      	ldr	r3, [sp, #8]
 8005dc0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005dc4:	6021      	str	r1, [r4, #0]
 8005dc6:	f109 0901 	add.w	r9, r9, #1
 8005dca:	b11b      	cbz	r3, 8005dd4 <_scanf_float+0x158>
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	3201      	adds	r2, #1
 8005dd0:	9302      	str	r3, [sp, #8]
 8005dd2:	60a2      	str	r2, [r4, #8]
 8005dd4:	68a3      	ldr	r3, [r4, #8]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	60a3      	str	r3, [r4, #8]
 8005dda:	6923      	ldr	r3, [r4, #16]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	6123      	str	r3, [r4, #16]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3b01      	subs	r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	607b      	str	r3, [r7, #4]
 8005de8:	f340 8084 	ble.w	8005ef4 <_scanf_float+0x278>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	3301      	adds	r3, #1
 8005df0:	603b      	str	r3, [r7, #0]
 8005df2:	e766      	b.n	8005cc2 <_scanf_float+0x46>
 8005df4:	eb1a 0f05 	cmn.w	sl, r5
 8005df8:	f47f af70 	bne.w	8005cdc <_scanf_float+0x60>
 8005dfc:	6822      	ldr	r2, [r4, #0]
 8005dfe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005e02:	6022      	str	r2, [r4, #0]
 8005e04:	f806 3b01 	strb.w	r3, [r6], #1
 8005e08:	e7e4      	b.n	8005dd4 <_scanf_float+0x158>
 8005e0a:	6822      	ldr	r2, [r4, #0]
 8005e0c:	0610      	lsls	r0, r2, #24
 8005e0e:	f57f af65 	bpl.w	8005cdc <_scanf_float+0x60>
 8005e12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e16:	e7f4      	b.n	8005e02 <_scanf_float+0x186>
 8005e18:	f1ba 0f00 	cmp.w	sl, #0
 8005e1c:	d10e      	bne.n	8005e3c <_scanf_float+0x1c0>
 8005e1e:	f1b9 0f00 	cmp.w	r9, #0
 8005e22:	d10e      	bne.n	8005e42 <_scanf_float+0x1c6>
 8005e24:	6822      	ldr	r2, [r4, #0]
 8005e26:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005e2a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005e2e:	d108      	bne.n	8005e42 <_scanf_float+0x1c6>
 8005e30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e34:	6022      	str	r2, [r4, #0]
 8005e36:	f04f 0a01 	mov.w	sl, #1
 8005e3a:	e7e3      	b.n	8005e04 <_scanf_float+0x188>
 8005e3c:	f1ba 0f02 	cmp.w	sl, #2
 8005e40:	d055      	beq.n	8005eee <_scanf_float+0x272>
 8005e42:	2d01      	cmp	r5, #1
 8005e44:	d002      	beq.n	8005e4c <_scanf_float+0x1d0>
 8005e46:	2d04      	cmp	r5, #4
 8005e48:	f47f af48 	bne.w	8005cdc <_scanf_float+0x60>
 8005e4c:	3501      	adds	r5, #1
 8005e4e:	b2ed      	uxtb	r5, r5
 8005e50:	e7d8      	b.n	8005e04 <_scanf_float+0x188>
 8005e52:	f1ba 0f01 	cmp.w	sl, #1
 8005e56:	f47f af41 	bne.w	8005cdc <_scanf_float+0x60>
 8005e5a:	f04f 0a02 	mov.w	sl, #2
 8005e5e:	e7d1      	b.n	8005e04 <_scanf_float+0x188>
 8005e60:	b97d      	cbnz	r5, 8005e82 <_scanf_float+0x206>
 8005e62:	f1b9 0f00 	cmp.w	r9, #0
 8005e66:	f47f af3c 	bne.w	8005ce2 <_scanf_float+0x66>
 8005e6a:	6822      	ldr	r2, [r4, #0]
 8005e6c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005e70:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005e74:	f47f af39 	bne.w	8005cea <_scanf_float+0x6e>
 8005e78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e7c:	6022      	str	r2, [r4, #0]
 8005e7e:	2501      	movs	r5, #1
 8005e80:	e7c0      	b.n	8005e04 <_scanf_float+0x188>
 8005e82:	2d03      	cmp	r5, #3
 8005e84:	d0e2      	beq.n	8005e4c <_scanf_float+0x1d0>
 8005e86:	2d05      	cmp	r5, #5
 8005e88:	e7de      	b.n	8005e48 <_scanf_float+0x1cc>
 8005e8a:	2d02      	cmp	r5, #2
 8005e8c:	f47f af26 	bne.w	8005cdc <_scanf_float+0x60>
 8005e90:	2503      	movs	r5, #3
 8005e92:	e7b7      	b.n	8005e04 <_scanf_float+0x188>
 8005e94:	2d06      	cmp	r5, #6
 8005e96:	f47f af21 	bne.w	8005cdc <_scanf_float+0x60>
 8005e9a:	2507      	movs	r5, #7
 8005e9c:	e7b2      	b.n	8005e04 <_scanf_float+0x188>
 8005e9e:	6822      	ldr	r2, [r4, #0]
 8005ea0:	0591      	lsls	r1, r2, #22
 8005ea2:	f57f af1b 	bpl.w	8005cdc <_scanf_float+0x60>
 8005ea6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005eaa:	6022      	str	r2, [r4, #0]
 8005eac:	f8cd 9004 	str.w	r9, [sp, #4]
 8005eb0:	e7a8      	b.n	8005e04 <_scanf_float+0x188>
 8005eb2:	6822      	ldr	r2, [r4, #0]
 8005eb4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005eb8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005ebc:	d006      	beq.n	8005ecc <_scanf_float+0x250>
 8005ebe:	0550      	lsls	r0, r2, #21
 8005ec0:	f57f af0c 	bpl.w	8005cdc <_scanf_float+0x60>
 8005ec4:	f1b9 0f00 	cmp.w	r9, #0
 8005ec8:	f43f af0f 	beq.w	8005cea <_scanf_float+0x6e>
 8005ecc:	0591      	lsls	r1, r2, #22
 8005ece:	bf58      	it	pl
 8005ed0:	9901      	ldrpl	r1, [sp, #4]
 8005ed2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ed6:	bf58      	it	pl
 8005ed8:	eba9 0101 	subpl.w	r1, r9, r1
 8005edc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005ee0:	bf58      	it	pl
 8005ee2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005ee6:	6022      	str	r2, [r4, #0]
 8005ee8:	f04f 0900 	mov.w	r9, #0
 8005eec:	e78a      	b.n	8005e04 <_scanf_float+0x188>
 8005eee:	f04f 0a03 	mov.w	sl, #3
 8005ef2:	e787      	b.n	8005e04 <_scanf_float+0x188>
 8005ef4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005ef8:	4639      	mov	r1, r7
 8005efa:	4640      	mov	r0, r8
 8005efc:	4798      	blx	r3
 8005efe:	2800      	cmp	r0, #0
 8005f00:	f43f aedf 	beq.w	8005cc2 <_scanf_float+0x46>
 8005f04:	e6ea      	b.n	8005cdc <_scanf_float+0x60>
 8005f06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f0e:	463a      	mov	r2, r7
 8005f10:	4640      	mov	r0, r8
 8005f12:	4798      	blx	r3
 8005f14:	6923      	ldr	r3, [r4, #16]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	6123      	str	r3, [r4, #16]
 8005f1a:	e6ec      	b.n	8005cf6 <_scanf_float+0x7a>
 8005f1c:	1e6b      	subs	r3, r5, #1
 8005f1e:	2b06      	cmp	r3, #6
 8005f20:	d825      	bhi.n	8005f6e <_scanf_float+0x2f2>
 8005f22:	2d02      	cmp	r5, #2
 8005f24:	d836      	bhi.n	8005f94 <_scanf_float+0x318>
 8005f26:	455e      	cmp	r6, fp
 8005f28:	f67f aee8 	bls.w	8005cfc <_scanf_float+0x80>
 8005f2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f30:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f34:	463a      	mov	r2, r7
 8005f36:	4640      	mov	r0, r8
 8005f38:	4798      	blx	r3
 8005f3a:	6923      	ldr	r3, [r4, #16]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	6123      	str	r3, [r4, #16]
 8005f40:	e7f1      	b.n	8005f26 <_scanf_float+0x2aa>
 8005f42:	9802      	ldr	r0, [sp, #8]
 8005f44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f48:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005f4c:	9002      	str	r0, [sp, #8]
 8005f4e:	463a      	mov	r2, r7
 8005f50:	4640      	mov	r0, r8
 8005f52:	4798      	blx	r3
 8005f54:	6923      	ldr	r3, [r4, #16]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	6123      	str	r3, [r4, #16]
 8005f5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f5e:	fa5f fa8a 	uxtb.w	sl, sl
 8005f62:	f1ba 0f02 	cmp.w	sl, #2
 8005f66:	d1ec      	bne.n	8005f42 <_scanf_float+0x2c6>
 8005f68:	3d03      	subs	r5, #3
 8005f6a:	b2ed      	uxtb	r5, r5
 8005f6c:	1b76      	subs	r6, r6, r5
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	05da      	lsls	r2, r3, #23
 8005f72:	d52f      	bpl.n	8005fd4 <_scanf_float+0x358>
 8005f74:	055b      	lsls	r3, r3, #21
 8005f76:	d510      	bpl.n	8005f9a <_scanf_float+0x31e>
 8005f78:	455e      	cmp	r6, fp
 8005f7a:	f67f aebf 	bls.w	8005cfc <_scanf_float+0x80>
 8005f7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f86:	463a      	mov	r2, r7
 8005f88:	4640      	mov	r0, r8
 8005f8a:	4798      	blx	r3
 8005f8c:	6923      	ldr	r3, [r4, #16]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	6123      	str	r3, [r4, #16]
 8005f92:	e7f1      	b.n	8005f78 <_scanf_float+0x2fc>
 8005f94:	46aa      	mov	sl, r5
 8005f96:	9602      	str	r6, [sp, #8]
 8005f98:	e7df      	b.n	8005f5a <_scanf_float+0x2de>
 8005f9a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005f9e:	6923      	ldr	r3, [r4, #16]
 8005fa0:	2965      	cmp	r1, #101	; 0x65
 8005fa2:	f103 33ff 	add.w	r3, r3, #4294967295
 8005fa6:	f106 35ff 	add.w	r5, r6, #4294967295
 8005faa:	6123      	str	r3, [r4, #16]
 8005fac:	d00c      	beq.n	8005fc8 <_scanf_float+0x34c>
 8005fae:	2945      	cmp	r1, #69	; 0x45
 8005fb0:	d00a      	beq.n	8005fc8 <_scanf_float+0x34c>
 8005fb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fb6:	463a      	mov	r2, r7
 8005fb8:	4640      	mov	r0, r8
 8005fba:	4798      	blx	r3
 8005fbc:	6923      	ldr	r3, [r4, #16]
 8005fbe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	1eb5      	subs	r5, r6, #2
 8005fc6:	6123      	str	r3, [r4, #16]
 8005fc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fcc:	463a      	mov	r2, r7
 8005fce:	4640      	mov	r0, r8
 8005fd0:	4798      	blx	r3
 8005fd2:	462e      	mov	r6, r5
 8005fd4:	6825      	ldr	r5, [r4, #0]
 8005fd6:	f015 0510 	ands.w	r5, r5, #16
 8005fda:	d159      	bne.n	8006090 <_scanf_float+0x414>
 8005fdc:	7035      	strb	r5, [r6, #0]
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe8:	d11b      	bne.n	8006022 <_scanf_float+0x3a6>
 8005fea:	9b01      	ldr	r3, [sp, #4]
 8005fec:	454b      	cmp	r3, r9
 8005fee:	eba3 0209 	sub.w	r2, r3, r9
 8005ff2:	d123      	bne.n	800603c <_scanf_float+0x3c0>
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	4659      	mov	r1, fp
 8005ff8:	4640      	mov	r0, r8
 8005ffa:	f000 ff0b 	bl	8006e14 <_strtod_r>
 8005ffe:	6822      	ldr	r2, [r4, #0]
 8006000:	9b03      	ldr	r3, [sp, #12]
 8006002:	f012 0f02 	tst.w	r2, #2
 8006006:	ec57 6b10 	vmov	r6, r7, d0
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	d021      	beq.n	8006052 <_scanf_float+0x3d6>
 800600e:	9903      	ldr	r1, [sp, #12]
 8006010:	1d1a      	adds	r2, r3, #4
 8006012:	600a      	str	r2, [r1, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	e9c3 6700 	strd	r6, r7, [r3]
 800601a:	68e3      	ldr	r3, [r4, #12]
 800601c:	3301      	adds	r3, #1
 800601e:	60e3      	str	r3, [r4, #12]
 8006020:	e66d      	b.n	8005cfe <_scanf_float+0x82>
 8006022:	9b04      	ldr	r3, [sp, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0e5      	beq.n	8005ff4 <_scanf_float+0x378>
 8006028:	9905      	ldr	r1, [sp, #20]
 800602a:	230a      	movs	r3, #10
 800602c:	462a      	mov	r2, r5
 800602e:	3101      	adds	r1, #1
 8006030:	4640      	mov	r0, r8
 8006032:	f000 ff77 	bl	8006f24 <_strtol_r>
 8006036:	9b04      	ldr	r3, [sp, #16]
 8006038:	9e05      	ldr	r6, [sp, #20]
 800603a:	1ac2      	subs	r2, r0, r3
 800603c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006040:	429e      	cmp	r6, r3
 8006042:	bf28      	it	cs
 8006044:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006048:	4912      	ldr	r1, [pc, #72]	; (8006094 <_scanf_float+0x418>)
 800604a:	4630      	mov	r0, r6
 800604c:	f000 f82c 	bl	80060a8 <siprintf>
 8006050:	e7d0      	b.n	8005ff4 <_scanf_float+0x378>
 8006052:	9903      	ldr	r1, [sp, #12]
 8006054:	f012 0f04 	tst.w	r2, #4
 8006058:	f103 0204 	add.w	r2, r3, #4
 800605c:	600a      	str	r2, [r1, #0]
 800605e:	d1d9      	bne.n	8006014 <_scanf_float+0x398>
 8006060:	f8d3 8000 	ldr.w	r8, [r3]
 8006064:	ee10 2a10 	vmov	r2, s0
 8006068:	ee10 0a10 	vmov	r0, s0
 800606c:	463b      	mov	r3, r7
 800606e:	4639      	mov	r1, r7
 8006070:	f7fa fd74 	bl	8000b5c <__aeabi_dcmpun>
 8006074:	b128      	cbz	r0, 8006082 <_scanf_float+0x406>
 8006076:	4808      	ldr	r0, [pc, #32]	; (8006098 <_scanf_float+0x41c>)
 8006078:	f000 f810 	bl	800609c <nanf>
 800607c:	ed88 0a00 	vstr	s0, [r8]
 8006080:	e7cb      	b.n	800601a <_scanf_float+0x39e>
 8006082:	4630      	mov	r0, r6
 8006084:	4639      	mov	r1, r7
 8006086:	f7fa fdc7 	bl	8000c18 <__aeabi_d2f>
 800608a:	f8c8 0000 	str.w	r0, [r8]
 800608e:	e7c4      	b.n	800601a <_scanf_float+0x39e>
 8006090:	2500      	movs	r5, #0
 8006092:	e634      	b.n	8005cfe <_scanf_float+0x82>
 8006094:	0800bf02 	.word	0x0800bf02
 8006098:	0800c323 	.word	0x0800c323

0800609c <nanf>:
 800609c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80060a4 <nanf+0x8>
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	7fc00000 	.word	0x7fc00000

080060a8 <siprintf>:
 80060a8:	b40e      	push	{r1, r2, r3}
 80060aa:	b500      	push	{lr}
 80060ac:	b09c      	sub	sp, #112	; 0x70
 80060ae:	ab1d      	add	r3, sp, #116	; 0x74
 80060b0:	9002      	str	r0, [sp, #8]
 80060b2:	9006      	str	r0, [sp, #24]
 80060b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060b8:	4809      	ldr	r0, [pc, #36]	; (80060e0 <siprintf+0x38>)
 80060ba:	9107      	str	r1, [sp, #28]
 80060bc:	9104      	str	r1, [sp, #16]
 80060be:	4909      	ldr	r1, [pc, #36]	; (80060e4 <siprintf+0x3c>)
 80060c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80060c4:	9105      	str	r1, [sp, #20]
 80060c6:	6800      	ldr	r0, [r0, #0]
 80060c8:	9301      	str	r3, [sp, #4]
 80060ca:	a902      	add	r1, sp, #8
 80060cc:	f002 ff8c 	bl	8008fe8 <_svfiprintf_r>
 80060d0:	9b02      	ldr	r3, [sp, #8]
 80060d2:	2200      	movs	r2, #0
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	b01c      	add	sp, #112	; 0x70
 80060d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80060dc:	b003      	add	sp, #12
 80060de:	4770      	bx	lr
 80060e0:	20000010 	.word	0x20000010
 80060e4:	ffff0208 	.word	0xffff0208

080060e8 <siscanf>:
 80060e8:	b40e      	push	{r1, r2, r3}
 80060ea:	b510      	push	{r4, lr}
 80060ec:	b09f      	sub	sp, #124	; 0x7c
 80060ee:	ac21      	add	r4, sp, #132	; 0x84
 80060f0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80060f4:	f854 2b04 	ldr.w	r2, [r4], #4
 80060f8:	9201      	str	r2, [sp, #4]
 80060fa:	f8ad 101c 	strh.w	r1, [sp, #28]
 80060fe:	9004      	str	r0, [sp, #16]
 8006100:	9008      	str	r0, [sp, #32]
 8006102:	f7fa f877 	bl	80001f4 <strlen>
 8006106:	4b0c      	ldr	r3, [pc, #48]	; (8006138 <siscanf+0x50>)
 8006108:	9005      	str	r0, [sp, #20]
 800610a:	9009      	str	r0, [sp, #36]	; 0x24
 800610c:	930d      	str	r3, [sp, #52]	; 0x34
 800610e:	480b      	ldr	r0, [pc, #44]	; (800613c <siscanf+0x54>)
 8006110:	9a01      	ldr	r2, [sp, #4]
 8006112:	6800      	ldr	r0, [r0, #0]
 8006114:	9403      	str	r4, [sp, #12]
 8006116:	2300      	movs	r3, #0
 8006118:	9311      	str	r3, [sp, #68]	; 0x44
 800611a:	9316      	str	r3, [sp, #88]	; 0x58
 800611c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006120:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006124:	a904      	add	r1, sp, #16
 8006126:	4623      	mov	r3, r4
 8006128:	f003 f8b8 	bl	800929c <__ssvfiscanf_r>
 800612c:	b01f      	add	sp, #124	; 0x7c
 800612e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006132:	b003      	add	sp, #12
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	08006163 	.word	0x08006163
 800613c:	20000010 	.word	0x20000010

08006140 <__sread>:
 8006140:	b510      	push	{r4, lr}
 8006142:	460c      	mov	r4, r1
 8006144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006148:	f003 fb72 	bl	8009830 <_read_r>
 800614c:	2800      	cmp	r0, #0
 800614e:	bfab      	itete	ge
 8006150:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006152:	89a3      	ldrhlt	r3, [r4, #12]
 8006154:	181b      	addge	r3, r3, r0
 8006156:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800615a:	bfac      	ite	ge
 800615c:	6563      	strge	r3, [r4, #84]	; 0x54
 800615e:	81a3      	strhlt	r3, [r4, #12]
 8006160:	bd10      	pop	{r4, pc}

08006162 <__seofread>:
 8006162:	2000      	movs	r0, #0
 8006164:	4770      	bx	lr

08006166 <__swrite>:
 8006166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800616a:	461f      	mov	r7, r3
 800616c:	898b      	ldrh	r3, [r1, #12]
 800616e:	05db      	lsls	r3, r3, #23
 8006170:	4605      	mov	r5, r0
 8006172:	460c      	mov	r4, r1
 8006174:	4616      	mov	r6, r2
 8006176:	d505      	bpl.n	8006184 <__swrite+0x1e>
 8006178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800617c:	2302      	movs	r3, #2
 800617e:	2200      	movs	r2, #0
 8006180:	f002 f8e4 	bl	800834c <_lseek_r>
 8006184:	89a3      	ldrh	r3, [r4, #12]
 8006186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800618a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800618e:	81a3      	strh	r3, [r4, #12]
 8006190:	4632      	mov	r2, r6
 8006192:	463b      	mov	r3, r7
 8006194:	4628      	mov	r0, r5
 8006196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800619a:	f000 bec5 	b.w	8006f28 <_write_r>

0800619e <__sseek>:
 800619e:	b510      	push	{r4, lr}
 80061a0:	460c      	mov	r4, r1
 80061a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061a6:	f002 f8d1 	bl	800834c <_lseek_r>
 80061aa:	1c43      	adds	r3, r0, #1
 80061ac:	89a3      	ldrh	r3, [r4, #12]
 80061ae:	bf15      	itete	ne
 80061b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80061b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061ba:	81a3      	strheq	r3, [r4, #12]
 80061bc:	bf18      	it	ne
 80061be:	81a3      	strhne	r3, [r4, #12]
 80061c0:	bd10      	pop	{r4, pc}

080061c2 <__sclose>:
 80061c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c6:	f000 bec1 	b.w	8006f4c <_close_r>

080061ca <sulp>:
 80061ca:	b570      	push	{r4, r5, r6, lr}
 80061cc:	4604      	mov	r4, r0
 80061ce:	460d      	mov	r5, r1
 80061d0:	ec45 4b10 	vmov	d0, r4, r5
 80061d4:	4616      	mov	r6, r2
 80061d6:	f002 fc65 	bl	8008aa4 <__ulp>
 80061da:	ec51 0b10 	vmov	r0, r1, d0
 80061de:	b17e      	cbz	r6, 8006200 <sulp+0x36>
 80061e0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80061e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	dd09      	ble.n	8006200 <sulp+0x36>
 80061ec:	051b      	lsls	r3, r3, #20
 80061ee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80061f2:	2400      	movs	r4, #0
 80061f4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80061f8:	4622      	mov	r2, r4
 80061fa:	462b      	mov	r3, r5
 80061fc:	f7fa fa14 	bl	8000628 <__aeabi_dmul>
 8006200:	bd70      	pop	{r4, r5, r6, pc}
 8006202:	0000      	movs	r0, r0
 8006204:	0000      	movs	r0, r0
	...

08006208 <_strtod_l>:
 8006208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800620c:	ed2d 8b02 	vpush	{d8}
 8006210:	b09d      	sub	sp, #116	; 0x74
 8006212:	461f      	mov	r7, r3
 8006214:	2300      	movs	r3, #0
 8006216:	9318      	str	r3, [sp, #96]	; 0x60
 8006218:	4ba2      	ldr	r3, [pc, #648]	; (80064a4 <_strtod_l+0x29c>)
 800621a:	9213      	str	r2, [sp, #76]	; 0x4c
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	9305      	str	r3, [sp, #20]
 8006220:	4604      	mov	r4, r0
 8006222:	4618      	mov	r0, r3
 8006224:	4688      	mov	r8, r1
 8006226:	f7f9 ffe5 	bl	80001f4 <strlen>
 800622a:	f04f 0a00 	mov.w	sl, #0
 800622e:	4605      	mov	r5, r0
 8006230:	f04f 0b00 	mov.w	fp, #0
 8006234:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006238:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800623a:	781a      	ldrb	r2, [r3, #0]
 800623c:	2a2b      	cmp	r2, #43	; 0x2b
 800623e:	d04e      	beq.n	80062de <_strtod_l+0xd6>
 8006240:	d83b      	bhi.n	80062ba <_strtod_l+0xb2>
 8006242:	2a0d      	cmp	r2, #13
 8006244:	d834      	bhi.n	80062b0 <_strtod_l+0xa8>
 8006246:	2a08      	cmp	r2, #8
 8006248:	d834      	bhi.n	80062b4 <_strtod_l+0xac>
 800624a:	2a00      	cmp	r2, #0
 800624c:	d03e      	beq.n	80062cc <_strtod_l+0xc4>
 800624e:	2300      	movs	r3, #0
 8006250:	930a      	str	r3, [sp, #40]	; 0x28
 8006252:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006254:	7833      	ldrb	r3, [r6, #0]
 8006256:	2b30      	cmp	r3, #48	; 0x30
 8006258:	f040 80b0 	bne.w	80063bc <_strtod_l+0x1b4>
 800625c:	7873      	ldrb	r3, [r6, #1]
 800625e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006262:	2b58      	cmp	r3, #88	; 0x58
 8006264:	d168      	bne.n	8006338 <_strtod_l+0x130>
 8006266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006268:	9301      	str	r3, [sp, #4]
 800626a:	ab18      	add	r3, sp, #96	; 0x60
 800626c:	9702      	str	r7, [sp, #8]
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	4a8d      	ldr	r2, [pc, #564]	; (80064a8 <_strtod_l+0x2a0>)
 8006272:	ab19      	add	r3, sp, #100	; 0x64
 8006274:	a917      	add	r1, sp, #92	; 0x5c
 8006276:	4620      	mov	r0, r4
 8006278:	f001 fd5c 	bl	8007d34 <__gethex>
 800627c:	f010 0707 	ands.w	r7, r0, #7
 8006280:	4605      	mov	r5, r0
 8006282:	d005      	beq.n	8006290 <_strtod_l+0x88>
 8006284:	2f06      	cmp	r7, #6
 8006286:	d12c      	bne.n	80062e2 <_strtod_l+0xda>
 8006288:	3601      	adds	r6, #1
 800628a:	2300      	movs	r3, #0
 800628c:	9617      	str	r6, [sp, #92]	; 0x5c
 800628e:	930a      	str	r3, [sp, #40]	; 0x28
 8006290:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006292:	2b00      	cmp	r3, #0
 8006294:	f040 8590 	bne.w	8006db8 <_strtod_l+0xbb0>
 8006298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800629a:	b1eb      	cbz	r3, 80062d8 <_strtod_l+0xd0>
 800629c:	4652      	mov	r2, sl
 800629e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80062a2:	ec43 2b10 	vmov	d0, r2, r3
 80062a6:	b01d      	add	sp, #116	; 0x74
 80062a8:	ecbd 8b02 	vpop	{d8}
 80062ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b0:	2a20      	cmp	r2, #32
 80062b2:	d1cc      	bne.n	800624e <_strtod_l+0x46>
 80062b4:	3301      	adds	r3, #1
 80062b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80062b8:	e7be      	b.n	8006238 <_strtod_l+0x30>
 80062ba:	2a2d      	cmp	r2, #45	; 0x2d
 80062bc:	d1c7      	bne.n	800624e <_strtod_l+0x46>
 80062be:	2201      	movs	r2, #1
 80062c0:	920a      	str	r2, [sp, #40]	; 0x28
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80062c6:	785b      	ldrb	r3, [r3, #1]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1c2      	bne.n	8006252 <_strtod_l+0x4a>
 80062cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80062ce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f040 856e 	bne.w	8006db4 <_strtod_l+0xbac>
 80062d8:	4652      	mov	r2, sl
 80062da:	465b      	mov	r3, fp
 80062dc:	e7e1      	b.n	80062a2 <_strtod_l+0x9a>
 80062de:	2200      	movs	r2, #0
 80062e0:	e7ee      	b.n	80062c0 <_strtod_l+0xb8>
 80062e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80062e4:	b13a      	cbz	r2, 80062f6 <_strtod_l+0xee>
 80062e6:	2135      	movs	r1, #53	; 0x35
 80062e8:	a81a      	add	r0, sp, #104	; 0x68
 80062ea:	f002 fce6 	bl	8008cba <__copybits>
 80062ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80062f0:	4620      	mov	r0, r4
 80062f2:	f002 f8a5 	bl	8008440 <_Bfree>
 80062f6:	3f01      	subs	r7, #1
 80062f8:	2f04      	cmp	r7, #4
 80062fa:	d806      	bhi.n	800630a <_strtod_l+0x102>
 80062fc:	e8df f007 	tbb	[pc, r7]
 8006300:	1714030a 	.word	0x1714030a
 8006304:	0a          	.byte	0x0a
 8006305:	00          	.byte	0x00
 8006306:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800630a:	0728      	lsls	r0, r5, #28
 800630c:	d5c0      	bpl.n	8006290 <_strtod_l+0x88>
 800630e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006312:	e7bd      	b.n	8006290 <_strtod_l+0x88>
 8006314:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006318:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800631a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800631e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006322:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006326:	e7f0      	b.n	800630a <_strtod_l+0x102>
 8006328:	f8df b180 	ldr.w	fp, [pc, #384]	; 80064ac <_strtod_l+0x2a4>
 800632c:	e7ed      	b.n	800630a <_strtod_l+0x102>
 800632e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006332:	f04f 3aff 	mov.w	sl, #4294967295
 8006336:	e7e8      	b.n	800630a <_strtod_l+0x102>
 8006338:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	9217      	str	r2, [sp, #92]	; 0x5c
 800633e:	785b      	ldrb	r3, [r3, #1]
 8006340:	2b30      	cmp	r3, #48	; 0x30
 8006342:	d0f9      	beq.n	8006338 <_strtod_l+0x130>
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0a3      	beq.n	8006290 <_strtod_l+0x88>
 8006348:	2301      	movs	r3, #1
 800634a:	f04f 0900 	mov.w	r9, #0
 800634e:	9304      	str	r3, [sp, #16]
 8006350:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006352:	9308      	str	r3, [sp, #32]
 8006354:	f8cd 901c 	str.w	r9, [sp, #28]
 8006358:	464f      	mov	r7, r9
 800635a:	220a      	movs	r2, #10
 800635c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800635e:	7806      	ldrb	r6, [r0, #0]
 8006360:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006364:	b2d9      	uxtb	r1, r3
 8006366:	2909      	cmp	r1, #9
 8006368:	d92a      	bls.n	80063c0 <_strtod_l+0x1b8>
 800636a:	9905      	ldr	r1, [sp, #20]
 800636c:	462a      	mov	r2, r5
 800636e:	f003 fac3 	bl	80098f8 <strncmp>
 8006372:	b398      	cbz	r0, 80063dc <_strtod_l+0x1d4>
 8006374:	2000      	movs	r0, #0
 8006376:	4632      	mov	r2, r6
 8006378:	463d      	mov	r5, r7
 800637a:	9005      	str	r0, [sp, #20]
 800637c:	4603      	mov	r3, r0
 800637e:	2a65      	cmp	r2, #101	; 0x65
 8006380:	d001      	beq.n	8006386 <_strtod_l+0x17e>
 8006382:	2a45      	cmp	r2, #69	; 0x45
 8006384:	d118      	bne.n	80063b8 <_strtod_l+0x1b0>
 8006386:	b91d      	cbnz	r5, 8006390 <_strtod_l+0x188>
 8006388:	9a04      	ldr	r2, [sp, #16]
 800638a:	4302      	orrs	r2, r0
 800638c:	d09e      	beq.n	80062cc <_strtod_l+0xc4>
 800638e:	2500      	movs	r5, #0
 8006390:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006394:	f108 0201 	add.w	r2, r8, #1
 8006398:	9217      	str	r2, [sp, #92]	; 0x5c
 800639a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800639e:	2a2b      	cmp	r2, #43	; 0x2b
 80063a0:	d075      	beq.n	800648e <_strtod_l+0x286>
 80063a2:	2a2d      	cmp	r2, #45	; 0x2d
 80063a4:	d07b      	beq.n	800649e <_strtod_l+0x296>
 80063a6:	f04f 0c00 	mov.w	ip, #0
 80063aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80063ae:	2909      	cmp	r1, #9
 80063b0:	f240 8082 	bls.w	80064b8 <_strtod_l+0x2b0>
 80063b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80063b8:	2600      	movs	r6, #0
 80063ba:	e09d      	b.n	80064f8 <_strtod_l+0x2f0>
 80063bc:	2300      	movs	r3, #0
 80063be:	e7c4      	b.n	800634a <_strtod_l+0x142>
 80063c0:	2f08      	cmp	r7, #8
 80063c2:	bfd8      	it	le
 80063c4:	9907      	ldrle	r1, [sp, #28]
 80063c6:	f100 0001 	add.w	r0, r0, #1
 80063ca:	bfda      	itte	le
 80063cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80063d0:	9307      	strle	r3, [sp, #28]
 80063d2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80063d6:	3701      	adds	r7, #1
 80063d8:	9017      	str	r0, [sp, #92]	; 0x5c
 80063da:	e7bf      	b.n	800635c <_strtod_l+0x154>
 80063dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063de:	195a      	adds	r2, r3, r5
 80063e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80063e2:	5d5a      	ldrb	r2, [r3, r5]
 80063e4:	2f00      	cmp	r7, #0
 80063e6:	d037      	beq.n	8006458 <_strtod_l+0x250>
 80063e8:	9005      	str	r0, [sp, #20]
 80063ea:	463d      	mov	r5, r7
 80063ec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80063f0:	2b09      	cmp	r3, #9
 80063f2:	d912      	bls.n	800641a <_strtod_l+0x212>
 80063f4:	2301      	movs	r3, #1
 80063f6:	e7c2      	b.n	800637e <_strtod_l+0x176>
 80063f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80063fe:	785a      	ldrb	r2, [r3, #1]
 8006400:	3001      	adds	r0, #1
 8006402:	2a30      	cmp	r2, #48	; 0x30
 8006404:	d0f8      	beq.n	80063f8 <_strtod_l+0x1f0>
 8006406:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800640a:	2b08      	cmp	r3, #8
 800640c:	f200 84d9 	bhi.w	8006dc2 <_strtod_l+0xbba>
 8006410:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006412:	9005      	str	r0, [sp, #20]
 8006414:	2000      	movs	r0, #0
 8006416:	9308      	str	r3, [sp, #32]
 8006418:	4605      	mov	r5, r0
 800641a:	3a30      	subs	r2, #48	; 0x30
 800641c:	f100 0301 	add.w	r3, r0, #1
 8006420:	d014      	beq.n	800644c <_strtod_l+0x244>
 8006422:	9905      	ldr	r1, [sp, #20]
 8006424:	4419      	add	r1, r3
 8006426:	9105      	str	r1, [sp, #20]
 8006428:	462b      	mov	r3, r5
 800642a:	eb00 0e05 	add.w	lr, r0, r5
 800642e:	210a      	movs	r1, #10
 8006430:	4573      	cmp	r3, lr
 8006432:	d113      	bne.n	800645c <_strtod_l+0x254>
 8006434:	182b      	adds	r3, r5, r0
 8006436:	2b08      	cmp	r3, #8
 8006438:	f105 0501 	add.w	r5, r5, #1
 800643c:	4405      	add	r5, r0
 800643e:	dc1c      	bgt.n	800647a <_strtod_l+0x272>
 8006440:	9907      	ldr	r1, [sp, #28]
 8006442:	230a      	movs	r3, #10
 8006444:	fb03 2301 	mla	r3, r3, r1, r2
 8006448:	9307      	str	r3, [sp, #28]
 800644a:	2300      	movs	r3, #0
 800644c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800644e:	1c51      	adds	r1, r2, #1
 8006450:	9117      	str	r1, [sp, #92]	; 0x5c
 8006452:	7852      	ldrb	r2, [r2, #1]
 8006454:	4618      	mov	r0, r3
 8006456:	e7c9      	b.n	80063ec <_strtod_l+0x1e4>
 8006458:	4638      	mov	r0, r7
 800645a:	e7d2      	b.n	8006402 <_strtod_l+0x1fa>
 800645c:	2b08      	cmp	r3, #8
 800645e:	dc04      	bgt.n	800646a <_strtod_l+0x262>
 8006460:	9e07      	ldr	r6, [sp, #28]
 8006462:	434e      	muls	r6, r1
 8006464:	9607      	str	r6, [sp, #28]
 8006466:	3301      	adds	r3, #1
 8006468:	e7e2      	b.n	8006430 <_strtod_l+0x228>
 800646a:	f103 0c01 	add.w	ip, r3, #1
 800646e:	f1bc 0f10 	cmp.w	ip, #16
 8006472:	bfd8      	it	le
 8006474:	fb01 f909 	mulle.w	r9, r1, r9
 8006478:	e7f5      	b.n	8006466 <_strtod_l+0x25e>
 800647a:	2d10      	cmp	r5, #16
 800647c:	bfdc      	itt	le
 800647e:	230a      	movle	r3, #10
 8006480:	fb03 2909 	mlale	r9, r3, r9, r2
 8006484:	e7e1      	b.n	800644a <_strtod_l+0x242>
 8006486:	2300      	movs	r3, #0
 8006488:	9305      	str	r3, [sp, #20]
 800648a:	2301      	movs	r3, #1
 800648c:	e77c      	b.n	8006388 <_strtod_l+0x180>
 800648e:	f04f 0c00 	mov.w	ip, #0
 8006492:	f108 0202 	add.w	r2, r8, #2
 8006496:	9217      	str	r2, [sp, #92]	; 0x5c
 8006498:	f898 2002 	ldrb.w	r2, [r8, #2]
 800649c:	e785      	b.n	80063aa <_strtod_l+0x1a2>
 800649e:	f04f 0c01 	mov.w	ip, #1
 80064a2:	e7f6      	b.n	8006492 <_strtod_l+0x28a>
 80064a4:	0800c150 	.word	0x0800c150
 80064a8:	0800bf08 	.word	0x0800bf08
 80064ac:	7ff00000 	.word	0x7ff00000
 80064b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80064b2:	1c51      	adds	r1, r2, #1
 80064b4:	9117      	str	r1, [sp, #92]	; 0x5c
 80064b6:	7852      	ldrb	r2, [r2, #1]
 80064b8:	2a30      	cmp	r2, #48	; 0x30
 80064ba:	d0f9      	beq.n	80064b0 <_strtod_l+0x2a8>
 80064bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80064c0:	2908      	cmp	r1, #8
 80064c2:	f63f af79 	bhi.w	80063b8 <_strtod_l+0x1b0>
 80064c6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80064ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80064cc:	9206      	str	r2, [sp, #24]
 80064ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80064d0:	1c51      	adds	r1, r2, #1
 80064d2:	9117      	str	r1, [sp, #92]	; 0x5c
 80064d4:	7852      	ldrb	r2, [r2, #1]
 80064d6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80064da:	2e09      	cmp	r6, #9
 80064dc:	d937      	bls.n	800654e <_strtod_l+0x346>
 80064de:	9e06      	ldr	r6, [sp, #24]
 80064e0:	1b89      	subs	r1, r1, r6
 80064e2:	2908      	cmp	r1, #8
 80064e4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80064e8:	dc02      	bgt.n	80064f0 <_strtod_l+0x2e8>
 80064ea:	4576      	cmp	r6, lr
 80064ec:	bfa8      	it	ge
 80064ee:	4676      	movge	r6, lr
 80064f0:	f1bc 0f00 	cmp.w	ip, #0
 80064f4:	d000      	beq.n	80064f8 <_strtod_l+0x2f0>
 80064f6:	4276      	negs	r6, r6
 80064f8:	2d00      	cmp	r5, #0
 80064fa:	d14d      	bne.n	8006598 <_strtod_l+0x390>
 80064fc:	9904      	ldr	r1, [sp, #16]
 80064fe:	4301      	orrs	r1, r0
 8006500:	f47f aec6 	bne.w	8006290 <_strtod_l+0x88>
 8006504:	2b00      	cmp	r3, #0
 8006506:	f47f aee1 	bne.w	80062cc <_strtod_l+0xc4>
 800650a:	2a69      	cmp	r2, #105	; 0x69
 800650c:	d027      	beq.n	800655e <_strtod_l+0x356>
 800650e:	dc24      	bgt.n	800655a <_strtod_l+0x352>
 8006510:	2a49      	cmp	r2, #73	; 0x49
 8006512:	d024      	beq.n	800655e <_strtod_l+0x356>
 8006514:	2a4e      	cmp	r2, #78	; 0x4e
 8006516:	f47f aed9 	bne.w	80062cc <_strtod_l+0xc4>
 800651a:	499f      	ldr	r1, [pc, #636]	; (8006798 <_strtod_l+0x590>)
 800651c:	a817      	add	r0, sp, #92	; 0x5c
 800651e:	f001 fe61 	bl	80081e4 <__match>
 8006522:	2800      	cmp	r0, #0
 8006524:	f43f aed2 	beq.w	80062cc <_strtod_l+0xc4>
 8006528:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	2b28      	cmp	r3, #40	; 0x28
 800652e:	d12d      	bne.n	800658c <_strtod_l+0x384>
 8006530:	499a      	ldr	r1, [pc, #616]	; (800679c <_strtod_l+0x594>)
 8006532:	aa1a      	add	r2, sp, #104	; 0x68
 8006534:	a817      	add	r0, sp, #92	; 0x5c
 8006536:	f001 fe69 	bl	800820c <__hexnan>
 800653a:	2805      	cmp	r0, #5
 800653c:	d126      	bne.n	800658c <_strtod_l+0x384>
 800653e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006540:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006544:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006548:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800654c:	e6a0      	b.n	8006290 <_strtod_l+0x88>
 800654e:	210a      	movs	r1, #10
 8006550:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006554:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006558:	e7b9      	b.n	80064ce <_strtod_l+0x2c6>
 800655a:	2a6e      	cmp	r2, #110	; 0x6e
 800655c:	e7db      	b.n	8006516 <_strtod_l+0x30e>
 800655e:	4990      	ldr	r1, [pc, #576]	; (80067a0 <_strtod_l+0x598>)
 8006560:	a817      	add	r0, sp, #92	; 0x5c
 8006562:	f001 fe3f 	bl	80081e4 <__match>
 8006566:	2800      	cmp	r0, #0
 8006568:	f43f aeb0 	beq.w	80062cc <_strtod_l+0xc4>
 800656c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800656e:	498d      	ldr	r1, [pc, #564]	; (80067a4 <_strtod_l+0x59c>)
 8006570:	3b01      	subs	r3, #1
 8006572:	a817      	add	r0, sp, #92	; 0x5c
 8006574:	9317      	str	r3, [sp, #92]	; 0x5c
 8006576:	f001 fe35 	bl	80081e4 <__match>
 800657a:	b910      	cbnz	r0, 8006582 <_strtod_l+0x37a>
 800657c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800657e:	3301      	adds	r3, #1
 8006580:	9317      	str	r3, [sp, #92]	; 0x5c
 8006582:	f8df b230 	ldr.w	fp, [pc, #560]	; 80067b4 <_strtod_l+0x5ac>
 8006586:	f04f 0a00 	mov.w	sl, #0
 800658a:	e681      	b.n	8006290 <_strtod_l+0x88>
 800658c:	4886      	ldr	r0, [pc, #536]	; (80067a8 <_strtod_l+0x5a0>)
 800658e:	f003 f963 	bl	8009858 <nan>
 8006592:	ec5b ab10 	vmov	sl, fp, d0
 8006596:	e67b      	b.n	8006290 <_strtod_l+0x88>
 8006598:	9b05      	ldr	r3, [sp, #20]
 800659a:	9807      	ldr	r0, [sp, #28]
 800659c:	1af3      	subs	r3, r6, r3
 800659e:	2f00      	cmp	r7, #0
 80065a0:	bf08      	it	eq
 80065a2:	462f      	moveq	r7, r5
 80065a4:	2d10      	cmp	r5, #16
 80065a6:	9306      	str	r3, [sp, #24]
 80065a8:	46a8      	mov	r8, r5
 80065aa:	bfa8      	it	ge
 80065ac:	f04f 0810 	movge.w	r8, #16
 80065b0:	f7f9 ffc0 	bl	8000534 <__aeabi_ui2d>
 80065b4:	2d09      	cmp	r5, #9
 80065b6:	4682      	mov	sl, r0
 80065b8:	468b      	mov	fp, r1
 80065ba:	dd13      	ble.n	80065e4 <_strtod_l+0x3dc>
 80065bc:	4b7b      	ldr	r3, [pc, #492]	; (80067ac <_strtod_l+0x5a4>)
 80065be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80065c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80065c6:	f7fa f82f 	bl	8000628 <__aeabi_dmul>
 80065ca:	4682      	mov	sl, r0
 80065cc:	4648      	mov	r0, r9
 80065ce:	468b      	mov	fp, r1
 80065d0:	f7f9 ffb0 	bl	8000534 <__aeabi_ui2d>
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	4650      	mov	r0, sl
 80065da:	4659      	mov	r1, fp
 80065dc:	f7f9 fe6e 	bl	80002bc <__adddf3>
 80065e0:	4682      	mov	sl, r0
 80065e2:	468b      	mov	fp, r1
 80065e4:	2d0f      	cmp	r5, #15
 80065e6:	dc38      	bgt.n	800665a <_strtod_l+0x452>
 80065e8:	9b06      	ldr	r3, [sp, #24]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f43f ae50 	beq.w	8006290 <_strtod_l+0x88>
 80065f0:	dd24      	ble.n	800663c <_strtod_l+0x434>
 80065f2:	2b16      	cmp	r3, #22
 80065f4:	dc0b      	bgt.n	800660e <_strtod_l+0x406>
 80065f6:	496d      	ldr	r1, [pc, #436]	; (80067ac <_strtod_l+0x5a4>)
 80065f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80065fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006600:	4652      	mov	r2, sl
 8006602:	465b      	mov	r3, fp
 8006604:	f7fa f810 	bl	8000628 <__aeabi_dmul>
 8006608:	4682      	mov	sl, r0
 800660a:	468b      	mov	fp, r1
 800660c:	e640      	b.n	8006290 <_strtod_l+0x88>
 800660e:	9a06      	ldr	r2, [sp, #24]
 8006610:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006614:	4293      	cmp	r3, r2
 8006616:	db20      	blt.n	800665a <_strtod_l+0x452>
 8006618:	4c64      	ldr	r4, [pc, #400]	; (80067ac <_strtod_l+0x5a4>)
 800661a:	f1c5 050f 	rsb	r5, r5, #15
 800661e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006622:	4652      	mov	r2, sl
 8006624:	465b      	mov	r3, fp
 8006626:	e9d1 0100 	ldrd	r0, r1, [r1]
 800662a:	f7f9 fffd 	bl	8000628 <__aeabi_dmul>
 800662e:	9b06      	ldr	r3, [sp, #24]
 8006630:	1b5d      	subs	r5, r3, r5
 8006632:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006636:	e9d4 2300 	ldrd	r2, r3, [r4]
 800663a:	e7e3      	b.n	8006604 <_strtod_l+0x3fc>
 800663c:	9b06      	ldr	r3, [sp, #24]
 800663e:	3316      	adds	r3, #22
 8006640:	db0b      	blt.n	800665a <_strtod_l+0x452>
 8006642:	9b05      	ldr	r3, [sp, #20]
 8006644:	1b9e      	subs	r6, r3, r6
 8006646:	4b59      	ldr	r3, [pc, #356]	; (80067ac <_strtod_l+0x5a4>)
 8006648:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800664c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006650:	4650      	mov	r0, sl
 8006652:	4659      	mov	r1, fp
 8006654:	f7fa f912 	bl	800087c <__aeabi_ddiv>
 8006658:	e7d6      	b.n	8006608 <_strtod_l+0x400>
 800665a:	9b06      	ldr	r3, [sp, #24]
 800665c:	eba5 0808 	sub.w	r8, r5, r8
 8006660:	4498      	add	r8, r3
 8006662:	f1b8 0f00 	cmp.w	r8, #0
 8006666:	dd74      	ble.n	8006752 <_strtod_l+0x54a>
 8006668:	f018 030f 	ands.w	r3, r8, #15
 800666c:	d00a      	beq.n	8006684 <_strtod_l+0x47c>
 800666e:	494f      	ldr	r1, [pc, #316]	; (80067ac <_strtod_l+0x5a4>)
 8006670:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006674:	4652      	mov	r2, sl
 8006676:	465b      	mov	r3, fp
 8006678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800667c:	f7f9 ffd4 	bl	8000628 <__aeabi_dmul>
 8006680:	4682      	mov	sl, r0
 8006682:	468b      	mov	fp, r1
 8006684:	f038 080f 	bics.w	r8, r8, #15
 8006688:	d04f      	beq.n	800672a <_strtod_l+0x522>
 800668a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800668e:	dd22      	ble.n	80066d6 <_strtod_l+0x4ce>
 8006690:	2500      	movs	r5, #0
 8006692:	462e      	mov	r6, r5
 8006694:	9507      	str	r5, [sp, #28]
 8006696:	9505      	str	r5, [sp, #20]
 8006698:	2322      	movs	r3, #34	; 0x22
 800669a:	f8df b118 	ldr.w	fp, [pc, #280]	; 80067b4 <_strtod_l+0x5ac>
 800669e:	6023      	str	r3, [r4, #0]
 80066a0:	f04f 0a00 	mov.w	sl, #0
 80066a4:	9b07      	ldr	r3, [sp, #28]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f43f adf2 	beq.w	8006290 <_strtod_l+0x88>
 80066ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 80066ae:	4620      	mov	r0, r4
 80066b0:	f001 fec6 	bl	8008440 <_Bfree>
 80066b4:	9905      	ldr	r1, [sp, #20]
 80066b6:	4620      	mov	r0, r4
 80066b8:	f001 fec2 	bl	8008440 <_Bfree>
 80066bc:	4631      	mov	r1, r6
 80066be:	4620      	mov	r0, r4
 80066c0:	f001 febe 	bl	8008440 <_Bfree>
 80066c4:	9907      	ldr	r1, [sp, #28]
 80066c6:	4620      	mov	r0, r4
 80066c8:	f001 feba 	bl	8008440 <_Bfree>
 80066cc:	4629      	mov	r1, r5
 80066ce:	4620      	mov	r0, r4
 80066d0:	f001 feb6 	bl	8008440 <_Bfree>
 80066d4:	e5dc      	b.n	8006290 <_strtod_l+0x88>
 80066d6:	4b36      	ldr	r3, [pc, #216]	; (80067b0 <_strtod_l+0x5a8>)
 80066d8:	9304      	str	r3, [sp, #16]
 80066da:	2300      	movs	r3, #0
 80066dc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80066e0:	4650      	mov	r0, sl
 80066e2:	4659      	mov	r1, fp
 80066e4:	4699      	mov	r9, r3
 80066e6:	f1b8 0f01 	cmp.w	r8, #1
 80066ea:	dc21      	bgt.n	8006730 <_strtod_l+0x528>
 80066ec:	b10b      	cbz	r3, 80066f2 <_strtod_l+0x4ea>
 80066ee:	4682      	mov	sl, r0
 80066f0:	468b      	mov	fp, r1
 80066f2:	4b2f      	ldr	r3, [pc, #188]	; (80067b0 <_strtod_l+0x5a8>)
 80066f4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80066f8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80066fc:	4652      	mov	r2, sl
 80066fe:	465b      	mov	r3, fp
 8006700:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006704:	f7f9 ff90 	bl	8000628 <__aeabi_dmul>
 8006708:	4b2a      	ldr	r3, [pc, #168]	; (80067b4 <_strtod_l+0x5ac>)
 800670a:	460a      	mov	r2, r1
 800670c:	400b      	ands	r3, r1
 800670e:	492a      	ldr	r1, [pc, #168]	; (80067b8 <_strtod_l+0x5b0>)
 8006710:	428b      	cmp	r3, r1
 8006712:	4682      	mov	sl, r0
 8006714:	d8bc      	bhi.n	8006690 <_strtod_l+0x488>
 8006716:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800671a:	428b      	cmp	r3, r1
 800671c:	bf86      	itte	hi
 800671e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80067bc <_strtod_l+0x5b4>
 8006722:	f04f 3aff 	movhi.w	sl, #4294967295
 8006726:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800672a:	2300      	movs	r3, #0
 800672c:	9304      	str	r3, [sp, #16]
 800672e:	e084      	b.n	800683a <_strtod_l+0x632>
 8006730:	f018 0f01 	tst.w	r8, #1
 8006734:	d005      	beq.n	8006742 <_strtod_l+0x53a>
 8006736:	9b04      	ldr	r3, [sp, #16]
 8006738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673c:	f7f9 ff74 	bl	8000628 <__aeabi_dmul>
 8006740:	2301      	movs	r3, #1
 8006742:	9a04      	ldr	r2, [sp, #16]
 8006744:	3208      	adds	r2, #8
 8006746:	f109 0901 	add.w	r9, r9, #1
 800674a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800674e:	9204      	str	r2, [sp, #16]
 8006750:	e7c9      	b.n	80066e6 <_strtod_l+0x4de>
 8006752:	d0ea      	beq.n	800672a <_strtod_l+0x522>
 8006754:	f1c8 0800 	rsb	r8, r8, #0
 8006758:	f018 020f 	ands.w	r2, r8, #15
 800675c:	d00a      	beq.n	8006774 <_strtod_l+0x56c>
 800675e:	4b13      	ldr	r3, [pc, #76]	; (80067ac <_strtod_l+0x5a4>)
 8006760:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006764:	4650      	mov	r0, sl
 8006766:	4659      	mov	r1, fp
 8006768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676c:	f7fa f886 	bl	800087c <__aeabi_ddiv>
 8006770:	4682      	mov	sl, r0
 8006772:	468b      	mov	fp, r1
 8006774:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006778:	d0d7      	beq.n	800672a <_strtod_l+0x522>
 800677a:	f1b8 0f1f 	cmp.w	r8, #31
 800677e:	dd1f      	ble.n	80067c0 <_strtod_l+0x5b8>
 8006780:	2500      	movs	r5, #0
 8006782:	462e      	mov	r6, r5
 8006784:	9507      	str	r5, [sp, #28]
 8006786:	9505      	str	r5, [sp, #20]
 8006788:	2322      	movs	r3, #34	; 0x22
 800678a:	f04f 0a00 	mov.w	sl, #0
 800678e:	f04f 0b00 	mov.w	fp, #0
 8006792:	6023      	str	r3, [r4, #0]
 8006794:	e786      	b.n	80066a4 <_strtod_l+0x49c>
 8006796:	bf00      	nop
 8006798:	0800bedd 	.word	0x0800bedd
 800679c:	0800bf1c 	.word	0x0800bf1c
 80067a0:	0800bed5 	.word	0x0800bed5
 80067a4:	0800c05c 	.word	0x0800c05c
 80067a8:	0800c323 	.word	0x0800c323
 80067ac:	0800c1e8 	.word	0x0800c1e8
 80067b0:	0800c1c0 	.word	0x0800c1c0
 80067b4:	7ff00000 	.word	0x7ff00000
 80067b8:	7ca00000 	.word	0x7ca00000
 80067bc:	7fefffff 	.word	0x7fefffff
 80067c0:	f018 0310 	ands.w	r3, r8, #16
 80067c4:	bf18      	it	ne
 80067c6:	236a      	movne	r3, #106	; 0x6a
 80067c8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006b78 <_strtod_l+0x970>
 80067cc:	9304      	str	r3, [sp, #16]
 80067ce:	4650      	mov	r0, sl
 80067d0:	4659      	mov	r1, fp
 80067d2:	2300      	movs	r3, #0
 80067d4:	f018 0f01 	tst.w	r8, #1
 80067d8:	d004      	beq.n	80067e4 <_strtod_l+0x5dc>
 80067da:	e9d9 2300 	ldrd	r2, r3, [r9]
 80067de:	f7f9 ff23 	bl	8000628 <__aeabi_dmul>
 80067e2:	2301      	movs	r3, #1
 80067e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80067e8:	f109 0908 	add.w	r9, r9, #8
 80067ec:	d1f2      	bne.n	80067d4 <_strtod_l+0x5cc>
 80067ee:	b10b      	cbz	r3, 80067f4 <_strtod_l+0x5ec>
 80067f0:	4682      	mov	sl, r0
 80067f2:	468b      	mov	fp, r1
 80067f4:	9b04      	ldr	r3, [sp, #16]
 80067f6:	b1c3      	cbz	r3, 800682a <_strtod_l+0x622>
 80067f8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80067fc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006800:	2b00      	cmp	r3, #0
 8006802:	4659      	mov	r1, fp
 8006804:	dd11      	ble.n	800682a <_strtod_l+0x622>
 8006806:	2b1f      	cmp	r3, #31
 8006808:	f340 8124 	ble.w	8006a54 <_strtod_l+0x84c>
 800680c:	2b34      	cmp	r3, #52	; 0x34
 800680e:	bfde      	ittt	le
 8006810:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006814:	f04f 33ff 	movle.w	r3, #4294967295
 8006818:	fa03 f202 	lslle.w	r2, r3, r2
 800681c:	f04f 0a00 	mov.w	sl, #0
 8006820:	bfcc      	ite	gt
 8006822:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006826:	ea02 0b01 	andle.w	fp, r2, r1
 800682a:	2200      	movs	r2, #0
 800682c:	2300      	movs	r3, #0
 800682e:	4650      	mov	r0, sl
 8006830:	4659      	mov	r1, fp
 8006832:	f7fa f961 	bl	8000af8 <__aeabi_dcmpeq>
 8006836:	2800      	cmp	r0, #0
 8006838:	d1a2      	bne.n	8006780 <_strtod_l+0x578>
 800683a:	9b07      	ldr	r3, [sp, #28]
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	9908      	ldr	r1, [sp, #32]
 8006840:	462b      	mov	r3, r5
 8006842:	463a      	mov	r2, r7
 8006844:	4620      	mov	r0, r4
 8006846:	f001 fe63 	bl	8008510 <__s2b>
 800684a:	9007      	str	r0, [sp, #28]
 800684c:	2800      	cmp	r0, #0
 800684e:	f43f af1f 	beq.w	8006690 <_strtod_l+0x488>
 8006852:	9b05      	ldr	r3, [sp, #20]
 8006854:	1b9e      	subs	r6, r3, r6
 8006856:	9b06      	ldr	r3, [sp, #24]
 8006858:	2b00      	cmp	r3, #0
 800685a:	bfb4      	ite	lt
 800685c:	4633      	movlt	r3, r6
 800685e:	2300      	movge	r3, #0
 8006860:	930c      	str	r3, [sp, #48]	; 0x30
 8006862:	9b06      	ldr	r3, [sp, #24]
 8006864:	2500      	movs	r5, #0
 8006866:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800686a:	9312      	str	r3, [sp, #72]	; 0x48
 800686c:	462e      	mov	r6, r5
 800686e:	9b07      	ldr	r3, [sp, #28]
 8006870:	4620      	mov	r0, r4
 8006872:	6859      	ldr	r1, [r3, #4]
 8006874:	f001 fda4 	bl	80083c0 <_Balloc>
 8006878:	9005      	str	r0, [sp, #20]
 800687a:	2800      	cmp	r0, #0
 800687c:	f43f af0c 	beq.w	8006698 <_strtod_l+0x490>
 8006880:	9b07      	ldr	r3, [sp, #28]
 8006882:	691a      	ldr	r2, [r3, #16]
 8006884:	3202      	adds	r2, #2
 8006886:	f103 010c 	add.w	r1, r3, #12
 800688a:	0092      	lsls	r2, r2, #2
 800688c:	300c      	adds	r0, #12
 800688e:	f001 fd89 	bl	80083a4 <memcpy>
 8006892:	ec4b ab10 	vmov	d0, sl, fp
 8006896:	aa1a      	add	r2, sp, #104	; 0x68
 8006898:	a919      	add	r1, sp, #100	; 0x64
 800689a:	4620      	mov	r0, r4
 800689c:	f002 f97e 	bl	8008b9c <__d2b>
 80068a0:	ec4b ab18 	vmov	d8, sl, fp
 80068a4:	9018      	str	r0, [sp, #96]	; 0x60
 80068a6:	2800      	cmp	r0, #0
 80068a8:	f43f aef6 	beq.w	8006698 <_strtod_l+0x490>
 80068ac:	2101      	movs	r1, #1
 80068ae:	4620      	mov	r0, r4
 80068b0:	f001 fec8 	bl	8008644 <__i2b>
 80068b4:	4606      	mov	r6, r0
 80068b6:	2800      	cmp	r0, #0
 80068b8:	f43f aeee 	beq.w	8006698 <_strtod_l+0x490>
 80068bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068be:	9904      	ldr	r1, [sp, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	bfab      	itete	ge
 80068c4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80068c6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80068c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80068ca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80068ce:	bfac      	ite	ge
 80068d0:	eb03 0902 	addge.w	r9, r3, r2
 80068d4:	1ad7      	sublt	r7, r2, r3
 80068d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80068d8:	eba3 0801 	sub.w	r8, r3, r1
 80068dc:	4490      	add	r8, r2
 80068de:	4ba1      	ldr	r3, [pc, #644]	; (8006b64 <_strtod_l+0x95c>)
 80068e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80068e4:	4598      	cmp	r8, r3
 80068e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80068ea:	f280 80c7 	bge.w	8006a7c <_strtod_l+0x874>
 80068ee:	eba3 0308 	sub.w	r3, r3, r8
 80068f2:	2b1f      	cmp	r3, #31
 80068f4:	eba2 0203 	sub.w	r2, r2, r3
 80068f8:	f04f 0101 	mov.w	r1, #1
 80068fc:	f300 80b1 	bgt.w	8006a62 <_strtod_l+0x85a>
 8006900:	fa01 f303 	lsl.w	r3, r1, r3
 8006904:	930d      	str	r3, [sp, #52]	; 0x34
 8006906:	2300      	movs	r3, #0
 8006908:	9308      	str	r3, [sp, #32]
 800690a:	eb09 0802 	add.w	r8, r9, r2
 800690e:	9b04      	ldr	r3, [sp, #16]
 8006910:	45c1      	cmp	r9, r8
 8006912:	4417      	add	r7, r2
 8006914:	441f      	add	r7, r3
 8006916:	464b      	mov	r3, r9
 8006918:	bfa8      	it	ge
 800691a:	4643      	movge	r3, r8
 800691c:	42bb      	cmp	r3, r7
 800691e:	bfa8      	it	ge
 8006920:	463b      	movge	r3, r7
 8006922:	2b00      	cmp	r3, #0
 8006924:	bfc2      	ittt	gt
 8006926:	eba8 0803 	subgt.w	r8, r8, r3
 800692a:	1aff      	subgt	r7, r7, r3
 800692c:	eba9 0903 	subgt.w	r9, r9, r3
 8006930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006932:	2b00      	cmp	r3, #0
 8006934:	dd17      	ble.n	8006966 <_strtod_l+0x75e>
 8006936:	4631      	mov	r1, r6
 8006938:	461a      	mov	r2, r3
 800693a:	4620      	mov	r0, r4
 800693c:	f001 ff42 	bl	80087c4 <__pow5mult>
 8006940:	4606      	mov	r6, r0
 8006942:	2800      	cmp	r0, #0
 8006944:	f43f aea8 	beq.w	8006698 <_strtod_l+0x490>
 8006948:	4601      	mov	r1, r0
 800694a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800694c:	4620      	mov	r0, r4
 800694e:	f001 fe8f 	bl	8008670 <__multiply>
 8006952:	900b      	str	r0, [sp, #44]	; 0x2c
 8006954:	2800      	cmp	r0, #0
 8006956:	f43f ae9f 	beq.w	8006698 <_strtod_l+0x490>
 800695a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800695c:	4620      	mov	r0, r4
 800695e:	f001 fd6f 	bl	8008440 <_Bfree>
 8006962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006964:	9318      	str	r3, [sp, #96]	; 0x60
 8006966:	f1b8 0f00 	cmp.w	r8, #0
 800696a:	f300 808c 	bgt.w	8006a86 <_strtod_l+0x87e>
 800696e:	9b06      	ldr	r3, [sp, #24]
 8006970:	2b00      	cmp	r3, #0
 8006972:	dd08      	ble.n	8006986 <_strtod_l+0x77e>
 8006974:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006976:	9905      	ldr	r1, [sp, #20]
 8006978:	4620      	mov	r0, r4
 800697a:	f001 ff23 	bl	80087c4 <__pow5mult>
 800697e:	9005      	str	r0, [sp, #20]
 8006980:	2800      	cmp	r0, #0
 8006982:	f43f ae89 	beq.w	8006698 <_strtod_l+0x490>
 8006986:	2f00      	cmp	r7, #0
 8006988:	dd08      	ble.n	800699c <_strtod_l+0x794>
 800698a:	9905      	ldr	r1, [sp, #20]
 800698c:	463a      	mov	r2, r7
 800698e:	4620      	mov	r0, r4
 8006990:	f001 ff72 	bl	8008878 <__lshift>
 8006994:	9005      	str	r0, [sp, #20]
 8006996:	2800      	cmp	r0, #0
 8006998:	f43f ae7e 	beq.w	8006698 <_strtod_l+0x490>
 800699c:	f1b9 0f00 	cmp.w	r9, #0
 80069a0:	dd08      	ble.n	80069b4 <_strtod_l+0x7ac>
 80069a2:	4631      	mov	r1, r6
 80069a4:	464a      	mov	r2, r9
 80069a6:	4620      	mov	r0, r4
 80069a8:	f001 ff66 	bl	8008878 <__lshift>
 80069ac:	4606      	mov	r6, r0
 80069ae:	2800      	cmp	r0, #0
 80069b0:	f43f ae72 	beq.w	8006698 <_strtod_l+0x490>
 80069b4:	9a05      	ldr	r2, [sp, #20]
 80069b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80069b8:	4620      	mov	r0, r4
 80069ba:	f001 ffe9 	bl	8008990 <__mdiff>
 80069be:	4605      	mov	r5, r0
 80069c0:	2800      	cmp	r0, #0
 80069c2:	f43f ae69 	beq.w	8006698 <_strtod_l+0x490>
 80069c6:	68c3      	ldr	r3, [r0, #12]
 80069c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80069ca:	2300      	movs	r3, #0
 80069cc:	60c3      	str	r3, [r0, #12]
 80069ce:	4631      	mov	r1, r6
 80069d0:	f001 ffc2 	bl	8008958 <__mcmp>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	da60      	bge.n	8006a9a <_strtod_l+0x892>
 80069d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069da:	ea53 030a 	orrs.w	r3, r3, sl
 80069de:	f040 8082 	bne.w	8006ae6 <_strtod_l+0x8de>
 80069e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d17d      	bne.n	8006ae6 <_strtod_l+0x8de>
 80069ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80069ee:	0d1b      	lsrs	r3, r3, #20
 80069f0:	051b      	lsls	r3, r3, #20
 80069f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80069f6:	d976      	bls.n	8006ae6 <_strtod_l+0x8de>
 80069f8:	696b      	ldr	r3, [r5, #20]
 80069fa:	b913      	cbnz	r3, 8006a02 <_strtod_l+0x7fa>
 80069fc:	692b      	ldr	r3, [r5, #16]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	dd71      	ble.n	8006ae6 <_strtod_l+0x8de>
 8006a02:	4629      	mov	r1, r5
 8006a04:	2201      	movs	r2, #1
 8006a06:	4620      	mov	r0, r4
 8006a08:	f001 ff36 	bl	8008878 <__lshift>
 8006a0c:	4631      	mov	r1, r6
 8006a0e:	4605      	mov	r5, r0
 8006a10:	f001 ffa2 	bl	8008958 <__mcmp>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	dd66      	ble.n	8006ae6 <_strtod_l+0x8de>
 8006a18:	9904      	ldr	r1, [sp, #16]
 8006a1a:	4a53      	ldr	r2, [pc, #332]	; (8006b68 <_strtod_l+0x960>)
 8006a1c:	465b      	mov	r3, fp
 8006a1e:	2900      	cmp	r1, #0
 8006a20:	f000 8081 	beq.w	8006b26 <_strtod_l+0x91e>
 8006a24:	ea02 010b 	and.w	r1, r2, fp
 8006a28:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006a2c:	dc7b      	bgt.n	8006b26 <_strtod_l+0x91e>
 8006a2e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006a32:	f77f aea9 	ble.w	8006788 <_strtod_l+0x580>
 8006a36:	4b4d      	ldr	r3, [pc, #308]	; (8006b6c <_strtod_l+0x964>)
 8006a38:	4650      	mov	r0, sl
 8006a3a:	4659      	mov	r1, fp
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f7f9 fdf3 	bl	8000628 <__aeabi_dmul>
 8006a42:	460b      	mov	r3, r1
 8006a44:	4303      	orrs	r3, r0
 8006a46:	bf08      	it	eq
 8006a48:	2322      	moveq	r3, #34	; 0x22
 8006a4a:	4682      	mov	sl, r0
 8006a4c:	468b      	mov	fp, r1
 8006a4e:	bf08      	it	eq
 8006a50:	6023      	streq	r3, [r4, #0]
 8006a52:	e62b      	b.n	80066ac <_strtod_l+0x4a4>
 8006a54:	f04f 32ff 	mov.w	r2, #4294967295
 8006a58:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5c:	ea03 0a0a 	and.w	sl, r3, sl
 8006a60:	e6e3      	b.n	800682a <_strtod_l+0x622>
 8006a62:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006a66:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006a6a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006a6e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006a72:	fa01 f308 	lsl.w	r3, r1, r8
 8006a76:	9308      	str	r3, [sp, #32]
 8006a78:	910d      	str	r1, [sp, #52]	; 0x34
 8006a7a:	e746      	b.n	800690a <_strtod_l+0x702>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	9308      	str	r3, [sp, #32]
 8006a80:	2301      	movs	r3, #1
 8006a82:	930d      	str	r3, [sp, #52]	; 0x34
 8006a84:	e741      	b.n	800690a <_strtod_l+0x702>
 8006a86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006a88:	4642      	mov	r2, r8
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f001 fef4 	bl	8008878 <__lshift>
 8006a90:	9018      	str	r0, [sp, #96]	; 0x60
 8006a92:	2800      	cmp	r0, #0
 8006a94:	f47f af6b 	bne.w	800696e <_strtod_l+0x766>
 8006a98:	e5fe      	b.n	8006698 <_strtod_l+0x490>
 8006a9a:	465f      	mov	r7, fp
 8006a9c:	d16e      	bne.n	8006b7c <_strtod_l+0x974>
 8006a9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006aa0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006aa4:	b342      	cbz	r2, 8006af8 <_strtod_l+0x8f0>
 8006aa6:	4a32      	ldr	r2, [pc, #200]	; (8006b70 <_strtod_l+0x968>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d128      	bne.n	8006afe <_strtod_l+0x8f6>
 8006aac:	9b04      	ldr	r3, [sp, #16]
 8006aae:	4651      	mov	r1, sl
 8006ab0:	b1eb      	cbz	r3, 8006aee <_strtod_l+0x8e6>
 8006ab2:	4b2d      	ldr	r3, [pc, #180]	; (8006b68 <_strtod_l+0x960>)
 8006ab4:	403b      	ands	r3, r7
 8006ab6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006aba:	f04f 32ff 	mov.w	r2, #4294967295
 8006abe:	d819      	bhi.n	8006af4 <_strtod_l+0x8ec>
 8006ac0:	0d1b      	lsrs	r3, r3, #20
 8006ac2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aca:	4299      	cmp	r1, r3
 8006acc:	d117      	bne.n	8006afe <_strtod_l+0x8f6>
 8006ace:	4b29      	ldr	r3, [pc, #164]	; (8006b74 <_strtod_l+0x96c>)
 8006ad0:	429f      	cmp	r7, r3
 8006ad2:	d102      	bne.n	8006ada <_strtod_l+0x8d2>
 8006ad4:	3101      	adds	r1, #1
 8006ad6:	f43f addf 	beq.w	8006698 <_strtod_l+0x490>
 8006ada:	4b23      	ldr	r3, [pc, #140]	; (8006b68 <_strtod_l+0x960>)
 8006adc:	403b      	ands	r3, r7
 8006ade:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006ae2:	f04f 0a00 	mov.w	sl, #0
 8006ae6:	9b04      	ldr	r3, [sp, #16]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1a4      	bne.n	8006a36 <_strtod_l+0x82e>
 8006aec:	e5de      	b.n	80066ac <_strtod_l+0x4a4>
 8006aee:	f04f 33ff 	mov.w	r3, #4294967295
 8006af2:	e7ea      	b.n	8006aca <_strtod_l+0x8c2>
 8006af4:	4613      	mov	r3, r2
 8006af6:	e7e8      	b.n	8006aca <_strtod_l+0x8c2>
 8006af8:	ea53 030a 	orrs.w	r3, r3, sl
 8006afc:	d08c      	beq.n	8006a18 <_strtod_l+0x810>
 8006afe:	9b08      	ldr	r3, [sp, #32]
 8006b00:	b1db      	cbz	r3, 8006b3a <_strtod_l+0x932>
 8006b02:	423b      	tst	r3, r7
 8006b04:	d0ef      	beq.n	8006ae6 <_strtod_l+0x8de>
 8006b06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b08:	9a04      	ldr	r2, [sp, #16]
 8006b0a:	4650      	mov	r0, sl
 8006b0c:	4659      	mov	r1, fp
 8006b0e:	b1c3      	cbz	r3, 8006b42 <_strtod_l+0x93a>
 8006b10:	f7ff fb5b 	bl	80061ca <sulp>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	ec51 0b18 	vmov	r0, r1, d8
 8006b1c:	f7f9 fbce 	bl	80002bc <__adddf3>
 8006b20:	4682      	mov	sl, r0
 8006b22:	468b      	mov	fp, r1
 8006b24:	e7df      	b.n	8006ae6 <_strtod_l+0x8de>
 8006b26:	4013      	ands	r3, r2
 8006b28:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006b2c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006b30:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006b34:	f04f 3aff 	mov.w	sl, #4294967295
 8006b38:	e7d5      	b.n	8006ae6 <_strtod_l+0x8de>
 8006b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b3c:	ea13 0f0a 	tst.w	r3, sl
 8006b40:	e7e0      	b.n	8006b04 <_strtod_l+0x8fc>
 8006b42:	f7ff fb42 	bl	80061ca <sulp>
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	ec51 0b18 	vmov	r0, r1, d8
 8006b4e:	f7f9 fbb3 	bl	80002b8 <__aeabi_dsub>
 8006b52:	2200      	movs	r2, #0
 8006b54:	2300      	movs	r3, #0
 8006b56:	4682      	mov	sl, r0
 8006b58:	468b      	mov	fp, r1
 8006b5a:	f7f9 ffcd 	bl	8000af8 <__aeabi_dcmpeq>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	d0c1      	beq.n	8006ae6 <_strtod_l+0x8de>
 8006b62:	e611      	b.n	8006788 <_strtod_l+0x580>
 8006b64:	fffffc02 	.word	0xfffffc02
 8006b68:	7ff00000 	.word	0x7ff00000
 8006b6c:	39500000 	.word	0x39500000
 8006b70:	000fffff 	.word	0x000fffff
 8006b74:	7fefffff 	.word	0x7fefffff
 8006b78:	0800bf30 	.word	0x0800bf30
 8006b7c:	4631      	mov	r1, r6
 8006b7e:	4628      	mov	r0, r5
 8006b80:	f002 f868 	bl	8008c54 <__ratio>
 8006b84:	ec59 8b10 	vmov	r8, r9, d0
 8006b88:	ee10 0a10 	vmov	r0, s0
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b92:	4649      	mov	r1, r9
 8006b94:	f7f9 ffc4 	bl	8000b20 <__aeabi_dcmple>
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	d07a      	beq.n	8006c92 <_strtod_l+0xa8a>
 8006b9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d04a      	beq.n	8006c38 <_strtod_l+0xa30>
 8006ba2:	4b95      	ldr	r3, [pc, #596]	; (8006df8 <_strtod_l+0xbf0>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006baa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006df8 <_strtod_l+0xbf0>
 8006bae:	f04f 0800 	mov.w	r8, #0
 8006bb2:	4b92      	ldr	r3, [pc, #584]	; (8006dfc <_strtod_l+0xbf4>)
 8006bb4:	403b      	ands	r3, r7
 8006bb6:	930d      	str	r3, [sp, #52]	; 0x34
 8006bb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006bba:	4b91      	ldr	r3, [pc, #580]	; (8006e00 <_strtod_l+0xbf8>)
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	f040 80b0 	bne.w	8006d22 <_strtod_l+0xb1a>
 8006bc2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006bc6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006bca:	ec4b ab10 	vmov	d0, sl, fp
 8006bce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006bd2:	f001 ff67 	bl	8008aa4 <__ulp>
 8006bd6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006bda:	ec53 2b10 	vmov	r2, r3, d0
 8006bde:	f7f9 fd23 	bl	8000628 <__aeabi_dmul>
 8006be2:	4652      	mov	r2, sl
 8006be4:	465b      	mov	r3, fp
 8006be6:	f7f9 fb69 	bl	80002bc <__adddf3>
 8006bea:	460b      	mov	r3, r1
 8006bec:	4983      	ldr	r1, [pc, #524]	; (8006dfc <_strtod_l+0xbf4>)
 8006bee:	4a85      	ldr	r2, [pc, #532]	; (8006e04 <_strtod_l+0xbfc>)
 8006bf0:	4019      	ands	r1, r3
 8006bf2:	4291      	cmp	r1, r2
 8006bf4:	4682      	mov	sl, r0
 8006bf6:	d960      	bls.n	8006cba <_strtod_l+0xab2>
 8006bf8:	ee18 3a90 	vmov	r3, s17
 8006bfc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d104      	bne.n	8006c0e <_strtod_l+0xa06>
 8006c04:	ee18 3a10 	vmov	r3, s16
 8006c08:	3301      	adds	r3, #1
 8006c0a:	f43f ad45 	beq.w	8006698 <_strtod_l+0x490>
 8006c0e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006e10 <_strtod_l+0xc08>
 8006c12:	f04f 3aff 	mov.w	sl, #4294967295
 8006c16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f001 fc11 	bl	8008440 <_Bfree>
 8006c1e:	9905      	ldr	r1, [sp, #20]
 8006c20:	4620      	mov	r0, r4
 8006c22:	f001 fc0d 	bl	8008440 <_Bfree>
 8006c26:	4631      	mov	r1, r6
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f001 fc09 	bl	8008440 <_Bfree>
 8006c2e:	4629      	mov	r1, r5
 8006c30:	4620      	mov	r0, r4
 8006c32:	f001 fc05 	bl	8008440 <_Bfree>
 8006c36:	e61a      	b.n	800686e <_strtod_l+0x666>
 8006c38:	f1ba 0f00 	cmp.w	sl, #0
 8006c3c:	d11b      	bne.n	8006c76 <_strtod_l+0xa6e>
 8006c3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c42:	b9f3      	cbnz	r3, 8006c82 <_strtod_l+0xa7a>
 8006c44:	4b6c      	ldr	r3, [pc, #432]	; (8006df8 <_strtod_l+0xbf0>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	4640      	mov	r0, r8
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	f7f9 ff5e 	bl	8000b0c <__aeabi_dcmplt>
 8006c50:	b9d0      	cbnz	r0, 8006c88 <_strtod_l+0xa80>
 8006c52:	4640      	mov	r0, r8
 8006c54:	4649      	mov	r1, r9
 8006c56:	4b6c      	ldr	r3, [pc, #432]	; (8006e08 <_strtod_l+0xc00>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f7f9 fce5 	bl	8000628 <__aeabi_dmul>
 8006c5e:	4680      	mov	r8, r0
 8006c60:	4689      	mov	r9, r1
 8006c62:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006c66:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006c6a:	9315      	str	r3, [sp, #84]	; 0x54
 8006c6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006c70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006c74:	e79d      	b.n	8006bb2 <_strtod_l+0x9aa>
 8006c76:	f1ba 0f01 	cmp.w	sl, #1
 8006c7a:	d102      	bne.n	8006c82 <_strtod_l+0xa7a>
 8006c7c:	2f00      	cmp	r7, #0
 8006c7e:	f43f ad83 	beq.w	8006788 <_strtod_l+0x580>
 8006c82:	4b62      	ldr	r3, [pc, #392]	; (8006e0c <_strtod_l+0xc04>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	e78e      	b.n	8006ba6 <_strtod_l+0x99e>
 8006c88:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006e08 <_strtod_l+0xc00>
 8006c8c:	f04f 0800 	mov.w	r8, #0
 8006c90:	e7e7      	b.n	8006c62 <_strtod_l+0xa5a>
 8006c92:	4b5d      	ldr	r3, [pc, #372]	; (8006e08 <_strtod_l+0xc00>)
 8006c94:	4640      	mov	r0, r8
 8006c96:	4649      	mov	r1, r9
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f7f9 fcc5 	bl	8000628 <__aeabi_dmul>
 8006c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ca0:	4680      	mov	r8, r0
 8006ca2:	4689      	mov	r9, r1
 8006ca4:	b933      	cbnz	r3, 8006cb4 <_strtod_l+0xaac>
 8006ca6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006caa:	900e      	str	r0, [sp, #56]	; 0x38
 8006cac:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006cb2:	e7dd      	b.n	8006c70 <_strtod_l+0xa68>
 8006cb4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006cb8:	e7f9      	b.n	8006cae <_strtod_l+0xaa6>
 8006cba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006cbe:	9b04      	ldr	r3, [sp, #16]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1a8      	bne.n	8006c16 <_strtod_l+0xa0e>
 8006cc4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006cc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006cca:	0d1b      	lsrs	r3, r3, #20
 8006ccc:	051b      	lsls	r3, r3, #20
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d1a1      	bne.n	8006c16 <_strtod_l+0xa0e>
 8006cd2:	4640      	mov	r0, r8
 8006cd4:	4649      	mov	r1, r9
 8006cd6:	f7fa f83f 	bl	8000d58 <__aeabi_d2lz>
 8006cda:	f7f9 fc77 	bl	80005cc <__aeabi_l2d>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	4640      	mov	r0, r8
 8006ce4:	4649      	mov	r1, r9
 8006ce6:	f7f9 fae7 	bl	80002b8 <__aeabi_dsub>
 8006cea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006cf0:	ea43 030a 	orr.w	r3, r3, sl
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	4680      	mov	r8, r0
 8006cf8:	4689      	mov	r9, r1
 8006cfa:	d055      	beq.n	8006da8 <_strtod_l+0xba0>
 8006cfc:	a336      	add	r3, pc, #216	; (adr r3, 8006dd8 <_strtod_l+0xbd0>)
 8006cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d02:	f7f9 ff03 	bl	8000b0c <__aeabi_dcmplt>
 8006d06:	2800      	cmp	r0, #0
 8006d08:	f47f acd0 	bne.w	80066ac <_strtod_l+0x4a4>
 8006d0c:	a334      	add	r3, pc, #208	; (adr r3, 8006de0 <_strtod_l+0xbd8>)
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	4640      	mov	r0, r8
 8006d14:	4649      	mov	r1, r9
 8006d16:	f7f9 ff17 	bl	8000b48 <__aeabi_dcmpgt>
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	f43f af7b 	beq.w	8006c16 <_strtod_l+0xa0e>
 8006d20:	e4c4      	b.n	80066ac <_strtod_l+0x4a4>
 8006d22:	9b04      	ldr	r3, [sp, #16]
 8006d24:	b333      	cbz	r3, 8006d74 <_strtod_l+0xb6c>
 8006d26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d28:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006d2c:	d822      	bhi.n	8006d74 <_strtod_l+0xb6c>
 8006d2e:	a32e      	add	r3, pc, #184	; (adr r3, 8006de8 <_strtod_l+0xbe0>)
 8006d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d34:	4640      	mov	r0, r8
 8006d36:	4649      	mov	r1, r9
 8006d38:	f7f9 fef2 	bl	8000b20 <__aeabi_dcmple>
 8006d3c:	b1a0      	cbz	r0, 8006d68 <_strtod_l+0xb60>
 8006d3e:	4649      	mov	r1, r9
 8006d40:	4640      	mov	r0, r8
 8006d42:	f7f9 ff49 	bl	8000bd8 <__aeabi_d2uiz>
 8006d46:	2801      	cmp	r0, #1
 8006d48:	bf38      	it	cc
 8006d4a:	2001      	movcc	r0, #1
 8006d4c:	f7f9 fbf2 	bl	8000534 <__aeabi_ui2d>
 8006d50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d52:	4680      	mov	r8, r0
 8006d54:	4689      	mov	r9, r1
 8006d56:	bb23      	cbnz	r3, 8006da2 <_strtod_l+0xb9a>
 8006d58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d5c:	9010      	str	r0, [sp, #64]	; 0x40
 8006d5e:	9311      	str	r3, [sp, #68]	; 0x44
 8006d60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d64:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d6c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006d70:	1a9b      	subs	r3, r3, r2
 8006d72:	9309      	str	r3, [sp, #36]	; 0x24
 8006d74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006d78:	eeb0 0a48 	vmov.f32	s0, s16
 8006d7c:	eef0 0a68 	vmov.f32	s1, s17
 8006d80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006d84:	f001 fe8e 	bl	8008aa4 <__ulp>
 8006d88:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006d8c:	ec53 2b10 	vmov	r2, r3, d0
 8006d90:	f7f9 fc4a 	bl	8000628 <__aeabi_dmul>
 8006d94:	ec53 2b18 	vmov	r2, r3, d8
 8006d98:	f7f9 fa90 	bl	80002bc <__adddf3>
 8006d9c:	4682      	mov	sl, r0
 8006d9e:	468b      	mov	fp, r1
 8006da0:	e78d      	b.n	8006cbe <_strtod_l+0xab6>
 8006da2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006da6:	e7db      	b.n	8006d60 <_strtod_l+0xb58>
 8006da8:	a311      	add	r3, pc, #68	; (adr r3, 8006df0 <_strtod_l+0xbe8>)
 8006daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dae:	f7f9 fead 	bl	8000b0c <__aeabi_dcmplt>
 8006db2:	e7b2      	b.n	8006d1a <_strtod_l+0xb12>
 8006db4:	2300      	movs	r3, #0
 8006db6:	930a      	str	r3, [sp, #40]	; 0x28
 8006db8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006dba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	f7ff ba6b 	b.w	8006298 <_strtod_l+0x90>
 8006dc2:	2a65      	cmp	r2, #101	; 0x65
 8006dc4:	f43f ab5f 	beq.w	8006486 <_strtod_l+0x27e>
 8006dc8:	2a45      	cmp	r2, #69	; 0x45
 8006dca:	f43f ab5c 	beq.w	8006486 <_strtod_l+0x27e>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	f7ff bb94 	b.w	80064fc <_strtod_l+0x2f4>
 8006dd4:	f3af 8000 	nop.w
 8006dd8:	94a03595 	.word	0x94a03595
 8006ddc:	3fdfffff 	.word	0x3fdfffff
 8006de0:	35afe535 	.word	0x35afe535
 8006de4:	3fe00000 	.word	0x3fe00000
 8006de8:	ffc00000 	.word	0xffc00000
 8006dec:	41dfffff 	.word	0x41dfffff
 8006df0:	94a03595 	.word	0x94a03595
 8006df4:	3fcfffff 	.word	0x3fcfffff
 8006df8:	3ff00000 	.word	0x3ff00000
 8006dfc:	7ff00000 	.word	0x7ff00000
 8006e00:	7fe00000 	.word	0x7fe00000
 8006e04:	7c9fffff 	.word	0x7c9fffff
 8006e08:	3fe00000 	.word	0x3fe00000
 8006e0c:	bff00000 	.word	0xbff00000
 8006e10:	7fefffff 	.word	0x7fefffff

08006e14 <_strtod_r>:
 8006e14:	4b01      	ldr	r3, [pc, #4]	; (8006e1c <_strtod_r+0x8>)
 8006e16:	f7ff b9f7 	b.w	8006208 <_strtod_l>
 8006e1a:	bf00      	nop
 8006e1c:	20000078 	.word	0x20000078

08006e20 <_strtol_l.constprop.0>:
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e26:	d001      	beq.n	8006e2c <_strtol_l.constprop.0+0xc>
 8006e28:	2b24      	cmp	r3, #36	; 0x24
 8006e2a:	d906      	bls.n	8006e3a <_strtol_l.constprop.0+0x1a>
 8006e2c:	f7fe fa8a 	bl	8005344 <__errno>
 8006e30:	2316      	movs	r3, #22
 8006e32:	6003      	str	r3, [r0, #0]
 8006e34:	2000      	movs	r0, #0
 8006e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e3a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006f20 <_strtol_l.constprop.0+0x100>
 8006e3e:	460d      	mov	r5, r1
 8006e40:	462e      	mov	r6, r5
 8006e42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e46:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006e4a:	f017 0708 	ands.w	r7, r7, #8
 8006e4e:	d1f7      	bne.n	8006e40 <_strtol_l.constprop.0+0x20>
 8006e50:	2c2d      	cmp	r4, #45	; 0x2d
 8006e52:	d132      	bne.n	8006eba <_strtol_l.constprop.0+0x9a>
 8006e54:	782c      	ldrb	r4, [r5, #0]
 8006e56:	2701      	movs	r7, #1
 8006e58:	1cb5      	adds	r5, r6, #2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d05b      	beq.n	8006f16 <_strtol_l.constprop.0+0xf6>
 8006e5e:	2b10      	cmp	r3, #16
 8006e60:	d109      	bne.n	8006e76 <_strtol_l.constprop.0+0x56>
 8006e62:	2c30      	cmp	r4, #48	; 0x30
 8006e64:	d107      	bne.n	8006e76 <_strtol_l.constprop.0+0x56>
 8006e66:	782c      	ldrb	r4, [r5, #0]
 8006e68:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006e6c:	2c58      	cmp	r4, #88	; 0x58
 8006e6e:	d14d      	bne.n	8006f0c <_strtol_l.constprop.0+0xec>
 8006e70:	786c      	ldrb	r4, [r5, #1]
 8006e72:	2310      	movs	r3, #16
 8006e74:	3502      	adds	r5, #2
 8006e76:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006e7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e7e:	f04f 0c00 	mov.w	ip, #0
 8006e82:	fbb8 f9f3 	udiv	r9, r8, r3
 8006e86:	4666      	mov	r6, ip
 8006e88:	fb03 8a19 	mls	sl, r3, r9, r8
 8006e8c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006e90:	f1be 0f09 	cmp.w	lr, #9
 8006e94:	d816      	bhi.n	8006ec4 <_strtol_l.constprop.0+0xa4>
 8006e96:	4674      	mov	r4, lr
 8006e98:	42a3      	cmp	r3, r4
 8006e9a:	dd24      	ble.n	8006ee6 <_strtol_l.constprop.0+0xc6>
 8006e9c:	f1bc 0f00 	cmp.w	ip, #0
 8006ea0:	db1e      	blt.n	8006ee0 <_strtol_l.constprop.0+0xc0>
 8006ea2:	45b1      	cmp	r9, r6
 8006ea4:	d31c      	bcc.n	8006ee0 <_strtol_l.constprop.0+0xc0>
 8006ea6:	d101      	bne.n	8006eac <_strtol_l.constprop.0+0x8c>
 8006ea8:	45a2      	cmp	sl, r4
 8006eaa:	db19      	blt.n	8006ee0 <_strtol_l.constprop.0+0xc0>
 8006eac:	fb06 4603 	mla	r6, r6, r3, r4
 8006eb0:	f04f 0c01 	mov.w	ip, #1
 8006eb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006eb8:	e7e8      	b.n	8006e8c <_strtol_l.constprop.0+0x6c>
 8006eba:	2c2b      	cmp	r4, #43	; 0x2b
 8006ebc:	bf04      	itt	eq
 8006ebe:	782c      	ldrbeq	r4, [r5, #0]
 8006ec0:	1cb5      	addeq	r5, r6, #2
 8006ec2:	e7ca      	b.n	8006e5a <_strtol_l.constprop.0+0x3a>
 8006ec4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006ec8:	f1be 0f19 	cmp.w	lr, #25
 8006ecc:	d801      	bhi.n	8006ed2 <_strtol_l.constprop.0+0xb2>
 8006ece:	3c37      	subs	r4, #55	; 0x37
 8006ed0:	e7e2      	b.n	8006e98 <_strtol_l.constprop.0+0x78>
 8006ed2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006ed6:	f1be 0f19 	cmp.w	lr, #25
 8006eda:	d804      	bhi.n	8006ee6 <_strtol_l.constprop.0+0xc6>
 8006edc:	3c57      	subs	r4, #87	; 0x57
 8006ede:	e7db      	b.n	8006e98 <_strtol_l.constprop.0+0x78>
 8006ee0:	f04f 3cff 	mov.w	ip, #4294967295
 8006ee4:	e7e6      	b.n	8006eb4 <_strtol_l.constprop.0+0x94>
 8006ee6:	f1bc 0f00 	cmp.w	ip, #0
 8006eea:	da05      	bge.n	8006ef8 <_strtol_l.constprop.0+0xd8>
 8006eec:	2322      	movs	r3, #34	; 0x22
 8006eee:	6003      	str	r3, [r0, #0]
 8006ef0:	4646      	mov	r6, r8
 8006ef2:	b942      	cbnz	r2, 8006f06 <_strtol_l.constprop.0+0xe6>
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	e79e      	b.n	8006e36 <_strtol_l.constprop.0+0x16>
 8006ef8:	b107      	cbz	r7, 8006efc <_strtol_l.constprop.0+0xdc>
 8006efa:	4276      	negs	r6, r6
 8006efc:	2a00      	cmp	r2, #0
 8006efe:	d0f9      	beq.n	8006ef4 <_strtol_l.constprop.0+0xd4>
 8006f00:	f1bc 0f00 	cmp.w	ip, #0
 8006f04:	d000      	beq.n	8006f08 <_strtol_l.constprop.0+0xe8>
 8006f06:	1e69      	subs	r1, r5, #1
 8006f08:	6011      	str	r1, [r2, #0]
 8006f0a:	e7f3      	b.n	8006ef4 <_strtol_l.constprop.0+0xd4>
 8006f0c:	2430      	movs	r4, #48	; 0x30
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1b1      	bne.n	8006e76 <_strtol_l.constprop.0+0x56>
 8006f12:	2308      	movs	r3, #8
 8006f14:	e7af      	b.n	8006e76 <_strtol_l.constprop.0+0x56>
 8006f16:	2c30      	cmp	r4, #48	; 0x30
 8006f18:	d0a5      	beq.n	8006e66 <_strtol_l.constprop.0+0x46>
 8006f1a:	230a      	movs	r3, #10
 8006f1c:	e7ab      	b.n	8006e76 <_strtol_l.constprop.0+0x56>
 8006f1e:	bf00      	nop
 8006f20:	0800bf59 	.word	0x0800bf59

08006f24 <_strtol_r>:
 8006f24:	f7ff bf7c 	b.w	8006e20 <_strtol_l.constprop.0>

08006f28 <_write_r>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	4d07      	ldr	r5, [pc, #28]	; (8006f48 <_write_r+0x20>)
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	4608      	mov	r0, r1
 8006f30:	4611      	mov	r1, r2
 8006f32:	2200      	movs	r2, #0
 8006f34:	602a      	str	r2, [r5, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	f7fb fd10 	bl	800295c <_write>
 8006f3c:	1c43      	adds	r3, r0, #1
 8006f3e:	d102      	bne.n	8006f46 <_write_r+0x1e>
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	b103      	cbz	r3, 8006f46 <_write_r+0x1e>
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	bd38      	pop	{r3, r4, r5, pc}
 8006f48:	20000d08 	.word	0x20000d08

08006f4c <_close_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	4d06      	ldr	r5, [pc, #24]	; (8006f68 <_close_r+0x1c>)
 8006f50:	2300      	movs	r3, #0
 8006f52:	4604      	mov	r4, r0
 8006f54:	4608      	mov	r0, r1
 8006f56:	602b      	str	r3, [r5, #0]
 8006f58:	f7fb fd1c 	bl	8002994 <_close>
 8006f5c:	1c43      	adds	r3, r0, #1
 8006f5e:	d102      	bne.n	8006f66 <_close_r+0x1a>
 8006f60:	682b      	ldr	r3, [r5, #0]
 8006f62:	b103      	cbz	r3, 8006f66 <_close_r+0x1a>
 8006f64:	6023      	str	r3, [r4, #0]
 8006f66:	bd38      	pop	{r3, r4, r5, pc}
 8006f68:	20000d08 	.word	0x20000d08

08006f6c <quorem>:
 8006f6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f70:	6903      	ldr	r3, [r0, #16]
 8006f72:	690c      	ldr	r4, [r1, #16]
 8006f74:	42a3      	cmp	r3, r4
 8006f76:	4607      	mov	r7, r0
 8006f78:	f2c0 8081 	blt.w	800707e <quorem+0x112>
 8006f7c:	3c01      	subs	r4, #1
 8006f7e:	f101 0814 	add.w	r8, r1, #20
 8006f82:	f100 0514 	add.w	r5, r0, #20
 8006f86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f8a:	9301      	str	r3, [sp, #4]
 8006f8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f94:	3301      	adds	r3, #1
 8006f96:	429a      	cmp	r2, r3
 8006f98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006fa0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006fa4:	d331      	bcc.n	800700a <quorem+0x9e>
 8006fa6:	f04f 0e00 	mov.w	lr, #0
 8006faa:	4640      	mov	r0, r8
 8006fac:	46ac      	mov	ip, r5
 8006fae:	46f2      	mov	sl, lr
 8006fb0:	f850 2b04 	ldr.w	r2, [r0], #4
 8006fb4:	b293      	uxth	r3, r2
 8006fb6:	fb06 e303 	mla	r3, r6, r3, lr
 8006fba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	ebaa 0303 	sub.w	r3, sl, r3
 8006fc4:	f8dc a000 	ldr.w	sl, [ip]
 8006fc8:	0c12      	lsrs	r2, r2, #16
 8006fca:	fa13 f38a 	uxtah	r3, r3, sl
 8006fce:	fb06 e202 	mla	r2, r6, r2, lr
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	9b00      	ldr	r3, [sp, #0]
 8006fd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006fda:	b292      	uxth	r2, r2
 8006fdc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006fe0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fe4:	f8bd 3000 	ldrh.w	r3, [sp]
 8006fe8:	4581      	cmp	r9, r0
 8006fea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fee:	f84c 3b04 	str.w	r3, [ip], #4
 8006ff2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006ff6:	d2db      	bcs.n	8006fb0 <quorem+0x44>
 8006ff8:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ffc:	b92b      	cbnz	r3, 800700a <quorem+0x9e>
 8006ffe:	9b01      	ldr	r3, [sp, #4]
 8007000:	3b04      	subs	r3, #4
 8007002:	429d      	cmp	r5, r3
 8007004:	461a      	mov	r2, r3
 8007006:	d32e      	bcc.n	8007066 <quorem+0xfa>
 8007008:	613c      	str	r4, [r7, #16]
 800700a:	4638      	mov	r0, r7
 800700c:	f001 fca4 	bl	8008958 <__mcmp>
 8007010:	2800      	cmp	r0, #0
 8007012:	db24      	blt.n	800705e <quorem+0xf2>
 8007014:	3601      	adds	r6, #1
 8007016:	4628      	mov	r0, r5
 8007018:	f04f 0c00 	mov.w	ip, #0
 800701c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007020:	f8d0 e000 	ldr.w	lr, [r0]
 8007024:	b293      	uxth	r3, r2
 8007026:	ebac 0303 	sub.w	r3, ip, r3
 800702a:	0c12      	lsrs	r2, r2, #16
 800702c:	fa13 f38e 	uxtah	r3, r3, lr
 8007030:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007034:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007038:	b29b      	uxth	r3, r3
 800703a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800703e:	45c1      	cmp	r9, r8
 8007040:	f840 3b04 	str.w	r3, [r0], #4
 8007044:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007048:	d2e8      	bcs.n	800701c <quorem+0xb0>
 800704a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800704e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007052:	b922      	cbnz	r2, 800705e <quorem+0xf2>
 8007054:	3b04      	subs	r3, #4
 8007056:	429d      	cmp	r5, r3
 8007058:	461a      	mov	r2, r3
 800705a:	d30a      	bcc.n	8007072 <quorem+0x106>
 800705c:	613c      	str	r4, [r7, #16]
 800705e:	4630      	mov	r0, r6
 8007060:	b003      	add	sp, #12
 8007062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007066:	6812      	ldr	r2, [r2, #0]
 8007068:	3b04      	subs	r3, #4
 800706a:	2a00      	cmp	r2, #0
 800706c:	d1cc      	bne.n	8007008 <quorem+0x9c>
 800706e:	3c01      	subs	r4, #1
 8007070:	e7c7      	b.n	8007002 <quorem+0x96>
 8007072:	6812      	ldr	r2, [r2, #0]
 8007074:	3b04      	subs	r3, #4
 8007076:	2a00      	cmp	r2, #0
 8007078:	d1f0      	bne.n	800705c <quorem+0xf0>
 800707a:	3c01      	subs	r4, #1
 800707c:	e7eb      	b.n	8007056 <quorem+0xea>
 800707e:	2000      	movs	r0, #0
 8007080:	e7ee      	b.n	8007060 <quorem+0xf4>
 8007082:	0000      	movs	r0, r0
 8007084:	0000      	movs	r0, r0
	...

08007088 <_dtoa_r>:
 8007088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708c:	ed2d 8b04 	vpush	{d8-d9}
 8007090:	ec57 6b10 	vmov	r6, r7, d0
 8007094:	b093      	sub	sp, #76	; 0x4c
 8007096:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007098:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800709c:	9106      	str	r1, [sp, #24]
 800709e:	ee10 aa10 	vmov	sl, s0
 80070a2:	4604      	mov	r4, r0
 80070a4:	9209      	str	r2, [sp, #36]	; 0x24
 80070a6:	930c      	str	r3, [sp, #48]	; 0x30
 80070a8:	46bb      	mov	fp, r7
 80070aa:	b975      	cbnz	r5, 80070ca <_dtoa_r+0x42>
 80070ac:	2010      	movs	r0, #16
 80070ae:	f001 f95f 	bl	8008370 <malloc>
 80070b2:	4602      	mov	r2, r0
 80070b4:	6260      	str	r0, [r4, #36]	; 0x24
 80070b6:	b920      	cbnz	r0, 80070c2 <_dtoa_r+0x3a>
 80070b8:	4ba7      	ldr	r3, [pc, #668]	; (8007358 <_dtoa_r+0x2d0>)
 80070ba:	21ea      	movs	r1, #234	; 0xea
 80070bc:	48a7      	ldr	r0, [pc, #668]	; (800735c <_dtoa_r+0x2d4>)
 80070be:	f002 fceb 	bl	8009a98 <__assert_func>
 80070c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80070c6:	6005      	str	r5, [r0, #0]
 80070c8:	60c5      	str	r5, [r0, #12]
 80070ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070cc:	6819      	ldr	r1, [r3, #0]
 80070ce:	b151      	cbz	r1, 80070e6 <_dtoa_r+0x5e>
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	604a      	str	r2, [r1, #4]
 80070d4:	2301      	movs	r3, #1
 80070d6:	4093      	lsls	r3, r2
 80070d8:	608b      	str	r3, [r1, #8]
 80070da:	4620      	mov	r0, r4
 80070dc:	f001 f9b0 	bl	8008440 <_Bfree>
 80070e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070e2:	2200      	movs	r2, #0
 80070e4:	601a      	str	r2, [r3, #0]
 80070e6:	1e3b      	subs	r3, r7, #0
 80070e8:	bfaa      	itet	ge
 80070ea:	2300      	movge	r3, #0
 80070ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80070f0:	f8c8 3000 	strge.w	r3, [r8]
 80070f4:	4b9a      	ldr	r3, [pc, #616]	; (8007360 <_dtoa_r+0x2d8>)
 80070f6:	bfbc      	itt	lt
 80070f8:	2201      	movlt	r2, #1
 80070fa:	f8c8 2000 	strlt.w	r2, [r8]
 80070fe:	ea33 030b 	bics.w	r3, r3, fp
 8007102:	d11b      	bne.n	800713c <_dtoa_r+0xb4>
 8007104:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007106:	f242 730f 	movw	r3, #9999	; 0x270f
 800710a:	6013      	str	r3, [r2, #0]
 800710c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007110:	4333      	orrs	r3, r6
 8007112:	f000 8592 	beq.w	8007c3a <_dtoa_r+0xbb2>
 8007116:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007118:	b963      	cbnz	r3, 8007134 <_dtoa_r+0xac>
 800711a:	4b92      	ldr	r3, [pc, #584]	; (8007364 <_dtoa_r+0x2dc>)
 800711c:	e022      	b.n	8007164 <_dtoa_r+0xdc>
 800711e:	4b92      	ldr	r3, [pc, #584]	; (8007368 <_dtoa_r+0x2e0>)
 8007120:	9301      	str	r3, [sp, #4]
 8007122:	3308      	adds	r3, #8
 8007124:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007126:	6013      	str	r3, [r2, #0]
 8007128:	9801      	ldr	r0, [sp, #4]
 800712a:	b013      	add	sp, #76	; 0x4c
 800712c:	ecbd 8b04 	vpop	{d8-d9}
 8007130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007134:	4b8b      	ldr	r3, [pc, #556]	; (8007364 <_dtoa_r+0x2dc>)
 8007136:	9301      	str	r3, [sp, #4]
 8007138:	3303      	adds	r3, #3
 800713a:	e7f3      	b.n	8007124 <_dtoa_r+0x9c>
 800713c:	2200      	movs	r2, #0
 800713e:	2300      	movs	r3, #0
 8007140:	4650      	mov	r0, sl
 8007142:	4659      	mov	r1, fp
 8007144:	f7f9 fcd8 	bl	8000af8 <__aeabi_dcmpeq>
 8007148:	ec4b ab19 	vmov	d9, sl, fp
 800714c:	4680      	mov	r8, r0
 800714e:	b158      	cbz	r0, 8007168 <_dtoa_r+0xe0>
 8007150:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007152:	2301      	movs	r3, #1
 8007154:	6013      	str	r3, [r2, #0]
 8007156:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 856b 	beq.w	8007c34 <_dtoa_r+0xbac>
 800715e:	4883      	ldr	r0, [pc, #524]	; (800736c <_dtoa_r+0x2e4>)
 8007160:	6018      	str	r0, [r3, #0]
 8007162:	1e43      	subs	r3, r0, #1
 8007164:	9301      	str	r3, [sp, #4]
 8007166:	e7df      	b.n	8007128 <_dtoa_r+0xa0>
 8007168:	ec4b ab10 	vmov	d0, sl, fp
 800716c:	aa10      	add	r2, sp, #64	; 0x40
 800716e:	a911      	add	r1, sp, #68	; 0x44
 8007170:	4620      	mov	r0, r4
 8007172:	f001 fd13 	bl	8008b9c <__d2b>
 8007176:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800717a:	ee08 0a10 	vmov	s16, r0
 800717e:	2d00      	cmp	r5, #0
 8007180:	f000 8084 	beq.w	800728c <_dtoa_r+0x204>
 8007184:	ee19 3a90 	vmov	r3, s19
 8007188:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800718c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007190:	4656      	mov	r6, sl
 8007192:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007196:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800719a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800719e:	4b74      	ldr	r3, [pc, #464]	; (8007370 <_dtoa_r+0x2e8>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	4630      	mov	r0, r6
 80071a4:	4639      	mov	r1, r7
 80071a6:	f7f9 f887 	bl	80002b8 <__aeabi_dsub>
 80071aa:	a365      	add	r3, pc, #404	; (adr r3, 8007340 <_dtoa_r+0x2b8>)
 80071ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b0:	f7f9 fa3a 	bl	8000628 <__aeabi_dmul>
 80071b4:	a364      	add	r3, pc, #400	; (adr r3, 8007348 <_dtoa_r+0x2c0>)
 80071b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ba:	f7f9 f87f 	bl	80002bc <__adddf3>
 80071be:	4606      	mov	r6, r0
 80071c0:	4628      	mov	r0, r5
 80071c2:	460f      	mov	r7, r1
 80071c4:	f7f9 f9c6 	bl	8000554 <__aeabi_i2d>
 80071c8:	a361      	add	r3, pc, #388	; (adr r3, 8007350 <_dtoa_r+0x2c8>)
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	f7f9 fa2b 	bl	8000628 <__aeabi_dmul>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4630      	mov	r0, r6
 80071d8:	4639      	mov	r1, r7
 80071da:	f7f9 f86f 	bl	80002bc <__adddf3>
 80071de:	4606      	mov	r6, r0
 80071e0:	460f      	mov	r7, r1
 80071e2:	f7f9 fcd1 	bl	8000b88 <__aeabi_d2iz>
 80071e6:	2200      	movs	r2, #0
 80071e8:	9000      	str	r0, [sp, #0]
 80071ea:	2300      	movs	r3, #0
 80071ec:	4630      	mov	r0, r6
 80071ee:	4639      	mov	r1, r7
 80071f0:	f7f9 fc8c 	bl	8000b0c <__aeabi_dcmplt>
 80071f4:	b150      	cbz	r0, 800720c <_dtoa_r+0x184>
 80071f6:	9800      	ldr	r0, [sp, #0]
 80071f8:	f7f9 f9ac 	bl	8000554 <__aeabi_i2d>
 80071fc:	4632      	mov	r2, r6
 80071fe:	463b      	mov	r3, r7
 8007200:	f7f9 fc7a 	bl	8000af8 <__aeabi_dcmpeq>
 8007204:	b910      	cbnz	r0, 800720c <_dtoa_r+0x184>
 8007206:	9b00      	ldr	r3, [sp, #0]
 8007208:	3b01      	subs	r3, #1
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	9b00      	ldr	r3, [sp, #0]
 800720e:	2b16      	cmp	r3, #22
 8007210:	d85a      	bhi.n	80072c8 <_dtoa_r+0x240>
 8007212:	9a00      	ldr	r2, [sp, #0]
 8007214:	4b57      	ldr	r3, [pc, #348]	; (8007374 <_dtoa_r+0x2ec>)
 8007216:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800721a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721e:	ec51 0b19 	vmov	r0, r1, d9
 8007222:	f7f9 fc73 	bl	8000b0c <__aeabi_dcmplt>
 8007226:	2800      	cmp	r0, #0
 8007228:	d050      	beq.n	80072cc <_dtoa_r+0x244>
 800722a:	9b00      	ldr	r3, [sp, #0]
 800722c:	3b01      	subs	r3, #1
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	2300      	movs	r3, #0
 8007232:	930b      	str	r3, [sp, #44]	; 0x2c
 8007234:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007236:	1b5d      	subs	r5, r3, r5
 8007238:	1e6b      	subs	r3, r5, #1
 800723a:	9305      	str	r3, [sp, #20]
 800723c:	bf45      	ittet	mi
 800723e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007242:	9304      	strmi	r3, [sp, #16]
 8007244:	2300      	movpl	r3, #0
 8007246:	2300      	movmi	r3, #0
 8007248:	bf4c      	ite	mi
 800724a:	9305      	strmi	r3, [sp, #20]
 800724c:	9304      	strpl	r3, [sp, #16]
 800724e:	9b00      	ldr	r3, [sp, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	db3d      	blt.n	80072d0 <_dtoa_r+0x248>
 8007254:	9b05      	ldr	r3, [sp, #20]
 8007256:	9a00      	ldr	r2, [sp, #0]
 8007258:	920a      	str	r2, [sp, #40]	; 0x28
 800725a:	4413      	add	r3, r2
 800725c:	9305      	str	r3, [sp, #20]
 800725e:	2300      	movs	r3, #0
 8007260:	9307      	str	r3, [sp, #28]
 8007262:	9b06      	ldr	r3, [sp, #24]
 8007264:	2b09      	cmp	r3, #9
 8007266:	f200 8089 	bhi.w	800737c <_dtoa_r+0x2f4>
 800726a:	2b05      	cmp	r3, #5
 800726c:	bfc4      	itt	gt
 800726e:	3b04      	subgt	r3, #4
 8007270:	9306      	strgt	r3, [sp, #24]
 8007272:	9b06      	ldr	r3, [sp, #24]
 8007274:	f1a3 0302 	sub.w	r3, r3, #2
 8007278:	bfcc      	ite	gt
 800727a:	2500      	movgt	r5, #0
 800727c:	2501      	movle	r5, #1
 800727e:	2b03      	cmp	r3, #3
 8007280:	f200 8087 	bhi.w	8007392 <_dtoa_r+0x30a>
 8007284:	e8df f003 	tbb	[pc, r3]
 8007288:	59383a2d 	.word	0x59383a2d
 800728c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007290:	441d      	add	r5, r3
 8007292:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007296:	2b20      	cmp	r3, #32
 8007298:	bfc1      	itttt	gt
 800729a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800729e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80072a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80072a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80072aa:	bfda      	itte	le
 80072ac:	f1c3 0320 	rsble	r3, r3, #32
 80072b0:	fa06 f003 	lslle.w	r0, r6, r3
 80072b4:	4318      	orrgt	r0, r3
 80072b6:	f7f9 f93d 	bl	8000534 <__aeabi_ui2d>
 80072ba:	2301      	movs	r3, #1
 80072bc:	4606      	mov	r6, r0
 80072be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80072c2:	3d01      	subs	r5, #1
 80072c4:	930e      	str	r3, [sp, #56]	; 0x38
 80072c6:	e76a      	b.n	800719e <_dtoa_r+0x116>
 80072c8:	2301      	movs	r3, #1
 80072ca:	e7b2      	b.n	8007232 <_dtoa_r+0x1aa>
 80072cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80072ce:	e7b1      	b.n	8007234 <_dtoa_r+0x1ac>
 80072d0:	9b04      	ldr	r3, [sp, #16]
 80072d2:	9a00      	ldr	r2, [sp, #0]
 80072d4:	1a9b      	subs	r3, r3, r2
 80072d6:	9304      	str	r3, [sp, #16]
 80072d8:	4253      	negs	r3, r2
 80072da:	9307      	str	r3, [sp, #28]
 80072dc:	2300      	movs	r3, #0
 80072de:	930a      	str	r3, [sp, #40]	; 0x28
 80072e0:	e7bf      	b.n	8007262 <_dtoa_r+0x1da>
 80072e2:	2300      	movs	r3, #0
 80072e4:	9308      	str	r3, [sp, #32]
 80072e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	dc55      	bgt.n	8007398 <_dtoa_r+0x310>
 80072ec:	2301      	movs	r3, #1
 80072ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80072f2:	461a      	mov	r2, r3
 80072f4:	9209      	str	r2, [sp, #36]	; 0x24
 80072f6:	e00c      	b.n	8007312 <_dtoa_r+0x28a>
 80072f8:	2301      	movs	r3, #1
 80072fa:	e7f3      	b.n	80072e4 <_dtoa_r+0x25c>
 80072fc:	2300      	movs	r3, #0
 80072fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007300:	9308      	str	r3, [sp, #32]
 8007302:	9b00      	ldr	r3, [sp, #0]
 8007304:	4413      	add	r3, r2
 8007306:	9302      	str	r3, [sp, #8]
 8007308:	3301      	adds	r3, #1
 800730a:	2b01      	cmp	r3, #1
 800730c:	9303      	str	r3, [sp, #12]
 800730e:	bfb8      	it	lt
 8007310:	2301      	movlt	r3, #1
 8007312:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007314:	2200      	movs	r2, #0
 8007316:	6042      	str	r2, [r0, #4]
 8007318:	2204      	movs	r2, #4
 800731a:	f102 0614 	add.w	r6, r2, #20
 800731e:	429e      	cmp	r6, r3
 8007320:	6841      	ldr	r1, [r0, #4]
 8007322:	d93d      	bls.n	80073a0 <_dtoa_r+0x318>
 8007324:	4620      	mov	r0, r4
 8007326:	f001 f84b 	bl	80083c0 <_Balloc>
 800732a:	9001      	str	r0, [sp, #4]
 800732c:	2800      	cmp	r0, #0
 800732e:	d13b      	bne.n	80073a8 <_dtoa_r+0x320>
 8007330:	4b11      	ldr	r3, [pc, #68]	; (8007378 <_dtoa_r+0x2f0>)
 8007332:	4602      	mov	r2, r0
 8007334:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007338:	e6c0      	b.n	80070bc <_dtoa_r+0x34>
 800733a:	2301      	movs	r3, #1
 800733c:	e7df      	b.n	80072fe <_dtoa_r+0x276>
 800733e:	bf00      	nop
 8007340:	636f4361 	.word	0x636f4361
 8007344:	3fd287a7 	.word	0x3fd287a7
 8007348:	8b60c8b3 	.word	0x8b60c8b3
 800734c:	3fc68a28 	.word	0x3fc68a28
 8007350:	509f79fb 	.word	0x509f79fb
 8007354:	3fd34413 	.word	0x3fd34413
 8007358:	0800c066 	.word	0x0800c066
 800735c:	0800c07d 	.word	0x0800c07d
 8007360:	7ff00000 	.word	0x7ff00000
 8007364:	0800c062 	.word	0x0800c062
 8007368:	0800c059 	.word	0x0800c059
 800736c:	0800c2d2 	.word	0x0800c2d2
 8007370:	3ff80000 	.word	0x3ff80000
 8007374:	0800c1e8 	.word	0x0800c1e8
 8007378:	0800c0d8 	.word	0x0800c0d8
 800737c:	2501      	movs	r5, #1
 800737e:	2300      	movs	r3, #0
 8007380:	9306      	str	r3, [sp, #24]
 8007382:	9508      	str	r5, [sp, #32]
 8007384:	f04f 33ff 	mov.w	r3, #4294967295
 8007388:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800738c:	2200      	movs	r2, #0
 800738e:	2312      	movs	r3, #18
 8007390:	e7b0      	b.n	80072f4 <_dtoa_r+0x26c>
 8007392:	2301      	movs	r3, #1
 8007394:	9308      	str	r3, [sp, #32]
 8007396:	e7f5      	b.n	8007384 <_dtoa_r+0x2fc>
 8007398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800739a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800739e:	e7b8      	b.n	8007312 <_dtoa_r+0x28a>
 80073a0:	3101      	adds	r1, #1
 80073a2:	6041      	str	r1, [r0, #4]
 80073a4:	0052      	lsls	r2, r2, #1
 80073a6:	e7b8      	b.n	800731a <_dtoa_r+0x292>
 80073a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073aa:	9a01      	ldr	r2, [sp, #4]
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	9b03      	ldr	r3, [sp, #12]
 80073b0:	2b0e      	cmp	r3, #14
 80073b2:	f200 809d 	bhi.w	80074f0 <_dtoa_r+0x468>
 80073b6:	2d00      	cmp	r5, #0
 80073b8:	f000 809a 	beq.w	80074f0 <_dtoa_r+0x468>
 80073bc:	9b00      	ldr	r3, [sp, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	dd32      	ble.n	8007428 <_dtoa_r+0x3a0>
 80073c2:	4ab7      	ldr	r2, [pc, #732]	; (80076a0 <_dtoa_r+0x618>)
 80073c4:	f003 030f 	and.w	r3, r3, #15
 80073c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80073cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80073d0:	9b00      	ldr	r3, [sp, #0]
 80073d2:	05d8      	lsls	r0, r3, #23
 80073d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80073d8:	d516      	bpl.n	8007408 <_dtoa_r+0x380>
 80073da:	4bb2      	ldr	r3, [pc, #712]	; (80076a4 <_dtoa_r+0x61c>)
 80073dc:	ec51 0b19 	vmov	r0, r1, d9
 80073e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073e4:	f7f9 fa4a 	bl	800087c <__aeabi_ddiv>
 80073e8:	f007 070f 	and.w	r7, r7, #15
 80073ec:	4682      	mov	sl, r0
 80073ee:	468b      	mov	fp, r1
 80073f0:	2503      	movs	r5, #3
 80073f2:	4eac      	ldr	r6, [pc, #688]	; (80076a4 <_dtoa_r+0x61c>)
 80073f4:	b957      	cbnz	r7, 800740c <_dtoa_r+0x384>
 80073f6:	4642      	mov	r2, r8
 80073f8:	464b      	mov	r3, r9
 80073fa:	4650      	mov	r0, sl
 80073fc:	4659      	mov	r1, fp
 80073fe:	f7f9 fa3d 	bl	800087c <__aeabi_ddiv>
 8007402:	4682      	mov	sl, r0
 8007404:	468b      	mov	fp, r1
 8007406:	e028      	b.n	800745a <_dtoa_r+0x3d2>
 8007408:	2502      	movs	r5, #2
 800740a:	e7f2      	b.n	80073f2 <_dtoa_r+0x36a>
 800740c:	07f9      	lsls	r1, r7, #31
 800740e:	d508      	bpl.n	8007422 <_dtoa_r+0x39a>
 8007410:	4640      	mov	r0, r8
 8007412:	4649      	mov	r1, r9
 8007414:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007418:	f7f9 f906 	bl	8000628 <__aeabi_dmul>
 800741c:	3501      	adds	r5, #1
 800741e:	4680      	mov	r8, r0
 8007420:	4689      	mov	r9, r1
 8007422:	107f      	asrs	r7, r7, #1
 8007424:	3608      	adds	r6, #8
 8007426:	e7e5      	b.n	80073f4 <_dtoa_r+0x36c>
 8007428:	f000 809b 	beq.w	8007562 <_dtoa_r+0x4da>
 800742c:	9b00      	ldr	r3, [sp, #0]
 800742e:	4f9d      	ldr	r7, [pc, #628]	; (80076a4 <_dtoa_r+0x61c>)
 8007430:	425e      	negs	r6, r3
 8007432:	4b9b      	ldr	r3, [pc, #620]	; (80076a0 <_dtoa_r+0x618>)
 8007434:	f006 020f 	and.w	r2, r6, #15
 8007438:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007440:	ec51 0b19 	vmov	r0, r1, d9
 8007444:	f7f9 f8f0 	bl	8000628 <__aeabi_dmul>
 8007448:	1136      	asrs	r6, r6, #4
 800744a:	4682      	mov	sl, r0
 800744c:	468b      	mov	fp, r1
 800744e:	2300      	movs	r3, #0
 8007450:	2502      	movs	r5, #2
 8007452:	2e00      	cmp	r6, #0
 8007454:	d17a      	bne.n	800754c <_dtoa_r+0x4c4>
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1d3      	bne.n	8007402 <_dtoa_r+0x37a>
 800745a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 8082 	beq.w	8007566 <_dtoa_r+0x4de>
 8007462:	4b91      	ldr	r3, [pc, #580]	; (80076a8 <_dtoa_r+0x620>)
 8007464:	2200      	movs	r2, #0
 8007466:	4650      	mov	r0, sl
 8007468:	4659      	mov	r1, fp
 800746a:	f7f9 fb4f 	bl	8000b0c <__aeabi_dcmplt>
 800746e:	2800      	cmp	r0, #0
 8007470:	d079      	beq.n	8007566 <_dtoa_r+0x4de>
 8007472:	9b03      	ldr	r3, [sp, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d076      	beq.n	8007566 <_dtoa_r+0x4de>
 8007478:	9b02      	ldr	r3, [sp, #8]
 800747a:	2b00      	cmp	r3, #0
 800747c:	dd36      	ble.n	80074ec <_dtoa_r+0x464>
 800747e:	9b00      	ldr	r3, [sp, #0]
 8007480:	4650      	mov	r0, sl
 8007482:	4659      	mov	r1, fp
 8007484:	1e5f      	subs	r7, r3, #1
 8007486:	2200      	movs	r2, #0
 8007488:	4b88      	ldr	r3, [pc, #544]	; (80076ac <_dtoa_r+0x624>)
 800748a:	f7f9 f8cd 	bl	8000628 <__aeabi_dmul>
 800748e:	9e02      	ldr	r6, [sp, #8]
 8007490:	4682      	mov	sl, r0
 8007492:	468b      	mov	fp, r1
 8007494:	3501      	adds	r5, #1
 8007496:	4628      	mov	r0, r5
 8007498:	f7f9 f85c 	bl	8000554 <__aeabi_i2d>
 800749c:	4652      	mov	r2, sl
 800749e:	465b      	mov	r3, fp
 80074a0:	f7f9 f8c2 	bl	8000628 <__aeabi_dmul>
 80074a4:	4b82      	ldr	r3, [pc, #520]	; (80076b0 <_dtoa_r+0x628>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	f7f8 ff08 	bl	80002bc <__adddf3>
 80074ac:	46d0      	mov	r8, sl
 80074ae:	46d9      	mov	r9, fp
 80074b0:	4682      	mov	sl, r0
 80074b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80074b6:	2e00      	cmp	r6, #0
 80074b8:	d158      	bne.n	800756c <_dtoa_r+0x4e4>
 80074ba:	4b7e      	ldr	r3, [pc, #504]	; (80076b4 <_dtoa_r+0x62c>)
 80074bc:	2200      	movs	r2, #0
 80074be:	4640      	mov	r0, r8
 80074c0:	4649      	mov	r1, r9
 80074c2:	f7f8 fef9 	bl	80002b8 <__aeabi_dsub>
 80074c6:	4652      	mov	r2, sl
 80074c8:	465b      	mov	r3, fp
 80074ca:	4680      	mov	r8, r0
 80074cc:	4689      	mov	r9, r1
 80074ce:	f7f9 fb3b 	bl	8000b48 <__aeabi_dcmpgt>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	f040 8295 	bne.w	8007a02 <_dtoa_r+0x97a>
 80074d8:	4652      	mov	r2, sl
 80074da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80074de:	4640      	mov	r0, r8
 80074e0:	4649      	mov	r1, r9
 80074e2:	f7f9 fb13 	bl	8000b0c <__aeabi_dcmplt>
 80074e6:	2800      	cmp	r0, #0
 80074e8:	f040 8289 	bne.w	80079fe <_dtoa_r+0x976>
 80074ec:	ec5b ab19 	vmov	sl, fp, d9
 80074f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f2c0 8148 	blt.w	8007788 <_dtoa_r+0x700>
 80074f8:	9a00      	ldr	r2, [sp, #0]
 80074fa:	2a0e      	cmp	r2, #14
 80074fc:	f300 8144 	bgt.w	8007788 <_dtoa_r+0x700>
 8007500:	4b67      	ldr	r3, [pc, #412]	; (80076a0 <_dtoa_r+0x618>)
 8007502:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007506:	e9d3 8900 	ldrd	r8, r9, [r3]
 800750a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800750c:	2b00      	cmp	r3, #0
 800750e:	f280 80d5 	bge.w	80076bc <_dtoa_r+0x634>
 8007512:	9b03      	ldr	r3, [sp, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	f300 80d1 	bgt.w	80076bc <_dtoa_r+0x634>
 800751a:	f040 826f 	bne.w	80079fc <_dtoa_r+0x974>
 800751e:	4b65      	ldr	r3, [pc, #404]	; (80076b4 <_dtoa_r+0x62c>)
 8007520:	2200      	movs	r2, #0
 8007522:	4640      	mov	r0, r8
 8007524:	4649      	mov	r1, r9
 8007526:	f7f9 f87f 	bl	8000628 <__aeabi_dmul>
 800752a:	4652      	mov	r2, sl
 800752c:	465b      	mov	r3, fp
 800752e:	f7f9 fb01 	bl	8000b34 <__aeabi_dcmpge>
 8007532:	9e03      	ldr	r6, [sp, #12]
 8007534:	4637      	mov	r7, r6
 8007536:	2800      	cmp	r0, #0
 8007538:	f040 8245 	bne.w	80079c6 <_dtoa_r+0x93e>
 800753c:	9d01      	ldr	r5, [sp, #4]
 800753e:	2331      	movs	r3, #49	; 0x31
 8007540:	f805 3b01 	strb.w	r3, [r5], #1
 8007544:	9b00      	ldr	r3, [sp, #0]
 8007546:	3301      	adds	r3, #1
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	e240      	b.n	80079ce <_dtoa_r+0x946>
 800754c:	07f2      	lsls	r2, r6, #31
 800754e:	d505      	bpl.n	800755c <_dtoa_r+0x4d4>
 8007550:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007554:	f7f9 f868 	bl	8000628 <__aeabi_dmul>
 8007558:	3501      	adds	r5, #1
 800755a:	2301      	movs	r3, #1
 800755c:	1076      	asrs	r6, r6, #1
 800755e:	3708      	adds	r7, #8
 8007560:	e777      	b.n	8007452 <_dtoa_r+0x3ca>
 8007562:	2502      	movs	r5, #2
 8007564:	e779      	b.n	800745a <_dtoa_r+0x3d2>
 8007566:	9f00      	ldr	r7, [sp, #0]
 8007568:	9e03      	ldr	r6, [sp, #12]
 800756a:	e794      	b.n	8007496 <_dtoa_r+0x40e>
 800756c:	9901      	ldr	r1, [sp, #4]
 800756e:	4b4c      	ldr	r3, [pc, #304]	; (80076a0 <_dtoa_r+0x618>)
 8007570:	4431      	add	r1, r6
 8007572:	910d      	str	r1, [sp, #52]	; 0x34
 8007574:	9908      	ldr	r1, [sp, #32]
 8007576:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800757a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800757e:	2900      	cmp	r1, #0
 8007580:	d043      	beq.n	800760a <_dtoa_r+0x582>
 8007582:	494d      	ldr	r1, [pc, #308]	; (80076b8 <_dtoa_r+0x630>)
 8007584:	2000      	movs	r0, #0
 8007586:	f7f9 f979 	bl	800087c <__aeabi_ddiv>
 800758a:	4652      	mov	r2, sl
 800758c:	465b      	mov	r3, fp
 800758e:	f7f8 fe93 	bl	80002b8 <__aeabi_dsub>
 8007592:	9d01      	ldr	r5, [sp, #4]
 8007594:	4682      	mov	sl, r0
 8007596:	468b      	mov	fp, r1
 8007598:	4649      	mov	r1, r9
 800759a:	4640      	mov	r0, r8
 800759c:	f7f9 faf4 	bl	8000b88 <__aeabi_d2iz>
 80075a0:	4606      	mov	r6, r0
 80075a2:	f7f8 ffd7 	bl	8000554 <__aeabi_i2d>
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	4640      	mov	r0, r8
 80075ac:	4649      	mov	r1, r9
 80075ae:	f7f8 fe83 	bl	80002b8 <__aeabi_dsub>
 80075b2:	3630      	adds	r6, #48	; 0x30
 80075b4:	f805 6b01 	strb.w	r6, [r5], #1
 80075b8:	4652      	mov	r2, sl
 80075ba:	465b      	mov	r3, fp
 80075bc:	4680      	mov	r8, r0
 80075be:	4689      	mov	r9, r1
 80075c0:	f7f9 faa4 	bl	8000b0c <__aeabi_dcmplt>
 80075c4:	2800      	cmp	r0, #0
 80075c6:	d163      	bne.n	8007690 <_dtoa_r+0x608>
 80075c8:	4642      	mov	r2, r8
 80075ca:	464b      	mov	r3, r9
 80075cc:	4936      	ldr	r1, [pc, #216]	; (80076a8 <_dtoa_r+0x620>)
 80075ce:	2000      	movs	r0, #0
 80075d0:	f7f8 fe72 	bl	80002b8 <__aeabi_dsub>
 80075d4:	4652      	mov	r2, sl
 80075d6:	465b      	mov	r3, fp
 80075d8:	f7f9 fa98 	bl	8000b0c <__aeabi_dcmplt>
 80075dc:	2800      	cmp	r0, #0
 80075de:	f040 80b5 	bne.w	800774c <_dtoa_r+0x6c4>
 80075e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075e4:	429d      	cmp	r5, r3
 80075e6:	d081      	beq.n	80074ec <_dtoa_r+0x464>
 80075e8:	4b30      	ldr	r3, [pc, #192]	; (80076ac <_dtoa_r+0x624>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	4650      	mov	r0, sl
 80075ee:	4659      	mov	r1, fp
 80075f0:	f7f9 f81a 	bl	8000628 <__aeabi_dmul>
 80075f4:	4b2d      	ldr	r3, [pc, #180]	; (80076ac <_dtoa_r+0x624>)
 80075f6:	4682      	mov	sl, r0
 80075f8:	468b      	mov	fp, r1
 80075fa:	4640      	mov	r0, r8
 80075fc:	4649      	mov	r1, r9
 80075fe:	2200      	movs	r2, #0
 8007600:	f7f9 f812 	bl	8000628 <__aeabi_dmul>
 8007604:	4680      	mov	r8, r0
 8007606:	4689      	mov	r9, r1
 8007608:	e7c6      	b.n	8007598 <_dtoa_r+0x510>
 800760a:	4650      	mov	r0, sl
 800760c:	4659      	mov	r1, fp
 800760e:	f7f9 f80b 	bl	8000628 <__aeabi_dmul>
 8007612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007614:	9d01      	ldr	r5, [sp, #4]
 8007616:	930f      	str	r3, [sp, #60]	; 0x3c
 8007618:	4682      	mov	sl, r0
 800761a:	468b      	mov	fp, r1
 800761c:	4649      	mov	r1, r9
 800761e:	4640      	mov	r0, r8
 8007620:	f7f9 fab2 	bl	8000b88 <__aeabi_d2iz>
 8007624:	4606      	mov	r6, r0
 8007626:	f7f8 ff95 	bl	8000554 <__aeabi_i2d>
 800762a:	3630      	adds	r6, #48	; 0x30
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	4640      	mov	r0, r8
 8007632:	4649      	mov	r1, r9
 8007634:	f7f8 fe40 	bl	80002b8 <__aeabi_dsub>
 8007638:	f805 6b01 	strb.w	r6, [r5], #1
 800763c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800763e:	429d      	cmp	r5, r3
 8007640:	4680      	mov	r8, r0
 8007642:	4689      	mov	r9, r1
 8007644:	f04f 0200 	mov.w	r2, #0
 8007648:	d124      	bne.n	8007694 <_dtoa_r+0x60c>
 800764a:	4b1b      	ldr	r3, [pc, #108]	; (80076b8 <_dtoa_r+0x630>)
 800764c:	4650      	mov	r0, sl
 800764e:	4659      	mov	r1, fp
 8007650:	f7f8 fe34 	bl	80002bc <__adddf3>
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	4640      	mov	r0, r8
 800765a:	4649      	mov	r1, r9
 800765c:	f7f9 fa74 	bl	8000b48 <__aeabi_dcmpgt>
 8007660:	2800      	cmp	r0, #0
 8007662:	d173      	bne.n	800774c <_dtoa_r+0x6c4>
 8007664:	4652      	mov	r2, sl
 8007666:	465b      	mov	r3, fp
 8007668:	4913      	ldr	r1, [pc, #76]	; (80076b8 <_dtoa_r+0x630>)
 800766a:	2000      	movs	r0, #0
 800766c:	f7f8 fe24 	bl	80002b8 <__aeabi_dsub>
 8007670:	4602      	mov	r2, r0
 8007672:	460b      	mov	r3, r1
 8007674:	4640      	mov	r0, r8
 8007676:	4649      	mov	r1, r9
 8007678:	f7f9 fa48 	bl	8000b0c <__aeabi_dcmplt>
 800767c:	2800      	cmp	r0, #0
 800767e:	f43f af35 	beq.w	80074ec <_dtoa_r+0x464>
 8007682:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007684:	1e6b      	subs	r3, r5, #1
 8007686:	930f      	str	r3, [sp, #60]	; 0x3c
 8007688:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800768c:	2b30      	cmp	r3, #48	; 0x30
 800768e:	d0f8      	beq.n	8007682 <_dtoa_r+0x5fa>
 8007690:	9700      	str	r7, [sp, #0]
 8007692:	e049      	b.n	8007728 <_dtoa_r+0x6a0>
 8007694:	4b05      	ldr	r3, [pc, #20]	; (80076ac <_dtoa_r+0x624>)
 8007696:	f7f8 ffc7 	bl	8000628 <__aeabi_dmul>
 800769a:	4680      	mov	r8, r0
 800769c:	4689      	mov	r9, r1
 800769e:	e7bd      	b.n	800761c <_dtoa_r+0x594>
 80076a0:	0800c1e8 	.word	0x0800c1e8
 80076a4:	0800c1c0 	.word	0x0800c1c0
 80076a8:	3ff00000 	.word	0x3ff00000
 80076ac:	40240000 	.word	0x40240000
 80076b0:	401c0000 	.word	0x401c0000
 80076b4:	40140000 	.word	0x40140000
 80076b8:	3fe00000 	.word	0x3fe00000
 80076bc:	9d01      	ldr	r5, [sp, #4]
 80076be:	4656      	mov	r6, sl
 80076c0:	465f      	mov	r7, fp
 80076c2:	4642      	mov	r2, r8
 80076c4:	464b      	mov	r3, r9
 80076c6:	4630      	mov	r0, r6
 80076c8:	4639      	mov	r1, r7
 80076ca:	f7f9 f8d7 	bl	800087c <__aeabi_ddiv>
 80076ce:	f7f9 fa5b 	bl	8000b88 <__aeabi_d2iz>
 80076d2:	4682      	mov	sl, r0
 80076d4:	f7f8 ff3e 	bl	8000554 <__aeabi_i2d>
 80076d8:	4642      	mov	r2, r8
 80076da:	464b      	mov	r3, r9
 80076dc:	f7f8 ffa4 	bl	8000628 <__aeabi_dmul>
 80076e0:	4602      	mov	r2, r0
 80076e2:	460b      	mov	r3, r1
 80076e4:	4630      	mov	r0, r6
 80076e6:	4639      	mov	r1, r7
 80076e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80076ec:	f7f8 fde4 	bl	80002b8 <__aeabi_dsub>
 80076f0:	f805 6b01 	strb.w	r6, [r5], #1
 80076f4:	9e01      	ldr	r6, [sp, #4]
 80076f6:	9f03      	ldr	r7, [sp, #12]
 80076f8:	1bae      	subs	r6, r5, r6
 80076fa:	42b7      	cmp	r7, r6
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	d135      	bne.n	800776e <_dtoa_r+0x6e6>
 8007702:	f7f8 fddb 	bl	80002bc <__adddf3>
 8007706:	4642      	mov	r2, r8
 8007708:	464b      	mov	r3, r9
 800770a:	4606      	mov	r6, r0
 800770c:	460f      	mov	r7, r1
 800770e:	f7f9 fa1b 	bl	8000b48 <__aeabi_dcmpgt>
 8007712:	b9d0      	cbnz	r0, 800774a <_dtoa_r+0x6c2>
 8007714:	4642      	mov	r2, r8
 8007716:	464b      	mov	r3, r9
 8007718:	4630      	mov	r0, r6
 800771a:	4639      	mov	r1, r7
 800771c:	f7f9 f9ec 	bl	8000af8 <__aeabi_dcmpeq>
 8007720:	b110      	cbz	r0, 8007728 <_dtoa_r+0x6a0>
 8007722:	f01a 0f01 	tst.w	sl, #1
 8007726:	d110      	bne.n	800774a <_dtoa_r+0x6c2>
 8007728:	4620      	mov	r0, r4
 800772a:	ee18 1a10 	vmov	r1, s16
 800772e:	f000 fe87 	bl	8008440 <_Bfree>
 8007732:	2300      	movs	r3, #0
 8007734:	9800      	ldr	r0, [sp, #0]
 8007736:	702b      	strb	r3, [r5, #0]
 8007738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800773a:	3001      	adds	r0, #1
 800773c:	6018      	str	r0, [r3, #0]
 800773e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007740:	2b00      	cmp	r3, #0
 8007742:	f43f acf1 	beq.w	8007128 <_dtoa_r+0xa0>
 8007746:	601d      	str	r5, [r3, #0]
 8007748:	e4ee      	b.n	8007128 <_dtoa_r+0xa0>
 800774a:	9f00      	ldr	r7, [sp, #0]
 800774c:	462b      	mov	r3, r5
 800774e:	461d      	mov	r5, r3
 8007750:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007754:	2a39      	cmp	r2, #57	; 0x39
 8007756:	d106      	bne.n	8007766 <_dtoa_r+0x6de>
 8007758:	9a01      	ldr	r2, [sp, #4]
 800775a:	429a      	cmp	r2, r3
 800775c:	d1f7      	bne.n	800774e <_dtoa_r+0x6c6>
 800775e:	9901      	ldr	r1, [sp, #4]
 8007760:	2230      	movs	r2, #48	; 0x30
 8007762:	3701      	adds	r7, #1
 8007764:	700a      	strb	r2, [r1, #0]
 8007766:	781a      	ldrb	r2, [r3, #0]
 8007768:	3201      	adds	r2, #1
 800776a:	701a      	strb	r2, [r3, #0]
 800776c:	e790      	b.n	8007690 <_dtoa_r+0x608>
 800776e:	4ba6      	ldr	r3, [pc, #664]	; (8007a08 <_dtoa_r+0x980>)
 8007770:	2200      	movs	r2, #0
 8007772:	f7f8 ff59 	bl	8000628 <__aeabi_dmul>
 8007776:	2200      	movs	r2, #0
 8007778:	2300      	movs	r3, #0
 800777a:	4606      	mov	r6, r0
 800777c:	460f      	mov	r7, r1
 800777e:	f7f9 f9bb 	bl	8000af8 <__aeabi_dcmpeq>
 8007782:	2800      	cmp	r0, #0
 8007784:	d09d      	beq.n	80076c2 <_dtoa_r+0x63a>
 8007786:	e7cf      	b.n	8007728 <_dtoa_r+0x6a0>
 8007788:	9a08      	ldr	r2, [sp, #32]
 800778a:	2a00      	cmp	r2, #0
 800778c:	f000 80d7 	beq.w	800793e <_dtoa_r+0x8b6>
 8007790:	9a06      	ldr	r2, [sp, #24]
 8007792:	2a01      	cmp	r2, #1
 8007794:	f300 80ba 	bgt.w	800790c <_dtoa_r+0x884>
 8007798:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800779a:	2a00      	cmp	r2, #0
 800779c:	f000 80b2 	beq.w	8007904 <_dtoa_r+0x87c>
 80077a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80077a4:	9e07      	ldr	r6, [sp, #28]
 80077a6:	9d04      	ldr	r5, [sp, #16]
 80077a8:	9a04      	ldr	r2, [sp, #16]
 80077aa:	441a      	add	r2, r3
 80077ac:	9204      	str	r2, [sp, #16]
 80077ae:	9a05      	ldr	r2, [sp, #20]
 80077b0:	2101      	movs	r1, #1
 80077b2:	441a      	add	r2, r3
 80077b4:	4620      	mov	r0, r4
 80077b6:	9205      	str	r2, [sp, #20]
 80077b8:	f000 ff44 	bl	8008644 <__i2b>
 80077bc:	4607      	mov	r7, r0
 80077be:	2d00      	cmp	r5, #0
 80077c0:	dd0c      	ble.n	80077dc <_dtoa_r+0x754>
 80077c2:	9b05      	ldr	r3, [sp, #20]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	dd09      	ble.n	80077dc <_dtoa_r+0x754>
 80077c8:	42ab      	cmp	r3, r5
 80077ca:	9a04      	ldr	r2, [sp, #16]
 80077cc:	bfa8      	it	ge
 80077ce:	462b      	movge	r3, r5
 80077d0:	1ad2      	subs	r2, r2, r3
 80077d2:	9204      	str	r2, [sp, #16]
 80077d4:	9a05      	ldr	r2, [sp, #20]
 80077d6:	1aed      	subs	r5, r5, r3
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	9305      	str	r3, [sp, #20]
 80077dc:	9b07      	ldr	r3, [sp, #28]
 80077de:	b31b      	cbz	r3, 8007828 <_dtoa_r+0x7a0>
 80077e0:	9b08      	ldr	r3, [sp, #32]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 80af 	beq.w	8007946 <_dtoa_r+0x8be>
 80077e8:	2e00      	cmp	r6, #0
 80077ea:	dd13      	ble.n	8007814 <_dtoa_r+0x78c>
 80077ec:	4639      	mov	r1, r7
 80077ee:	4632      	mov	r2, r6
 80077f0:	4620      	mov	r0, r4
 80077f2:	f000 ffe7 	bl	80087c4 <__pow5mult>
 80077f6:	ee18 2a10 	vmov	r2, s16
 80077fa:	4601      	mov	r1, r0
 80077fc:	4607      	mov	r7, r0
 80077fe:	4620      	mov	r0, r4
 8007800:	f000 ff36 	bl	8008670 <__multiply>
 8007804:	ee18 1a10 	vmov	r1, s16
 8007808:	4680      	mov	r8, r0
 800780a:	4620      	mov	r0, r4
 800780c:	f000 fe18 	bl	8008440 <_Bfree>
 8007810:	ee08 8a10 	vmov	s16, r8
 8007814:	9b07      	ldr	r3, [sp, #28]
 8007816:	1b9a      	subs	r2, r3, r6
 8007818:	d006      	beq.n	8007828 <_dtoa_r+0x7a0>
 800781a:	ee18 1a10 	vmov	r1, s16
 800781e:	4620      	mov	r0, r4
 8007820:	f000 ffd0 	bl	80087c4 <__pow5mult>
 8007824:	ee08 0a10 	vmov	s16, r0
 8007828:	2101      	movs	r1, #1
 800782a:	4620      	mov	r0, r4
 800782c:	f000 ff0a 	bl	8008644 <__i2b>
 8007830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007832:	2b00      	cmp	r3, #0
 8007834:	4606      	mov	r6, r0
 8007836:	f340 8088 	ble.w	800794a <_dtoa_r+0x8c2>
 800783a:	461a      	mov	r2, r3
 800783c:	4601      	mov	r1, r0
 800783e:	4620      	mov	r0, r4
 8007840:	f000 ffc0 	bl	80087c4 <__pow5mult>
 8007844:	9b06      	ldr	r3, [sp, #24]
 8007846:	2b01      	cmp	r3, #1
 8007848:	4606      	mov	r6, r0
 800784a:	f340 8081 	ble.w	8007950 <_dtoa_r+0x8c8>
 800784e:	f04f 0800 	mov.w	r8, #0
 8007852:	6933      	ldr	r3, [r6, #16]
 8007854:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007858:	6918      	ldr	r0, [r3, #16]
 800785a:	f000 fea3 	bl	80085a4 <__hi0bits>
 800785e:	f1c0 0020 	rsb	r0, r0, #32
 8007862:	9b05      	ldr	r3, [sp, #20]
 8007864:	4418      	add	r0, r3
 8007866:	f010 001f 	ands.w	r0, r0, #31
 800786a:	f000 8092 	beq.w	8007992 <_dtoa_r+0x90a>
 800786e:	f1c0 0320 	rsb	r3, r0, #32
 8007872:	2b04      	cmp	r3, #4
 8007874:	f340 808a 	ble.w	800798c <_dtoa_r+0x904>
 8007878:	f1c0 001c 	rsb	r0, r0, #28
 800787c:	9b04      	ldr	r3, [sp, #16]
 800787e:	4403      	add	r3, r0
 8007880:	9304      	str	r3, [sp, #16]
 8007882:	9b05      	ldr	r3, [sp, #20]
 8007884:	4403      	add	r3, r0
 8007886:	4405      	add	r5, r0
 8007888:	9305      	str	r3, [sp, #20]
 800788a:	9b04      	ldr	r3, [sp, #16]
 800788c:	2b00      	cmp	r3, #0
 800788e:	dd07      	ble.n	80078a0 <_dtoa_r+0x818>
 8007890:	ee18 1a10 	vmov	r1, s16
 8007894:	461a      	mov	r2, r3
 8007896:	4620      	mov	r0, r4
 8007898:	f000 ffee 	bl	8008878 <__lshift>
 800789c:	ee08 0a10 	vmov	s16, r0
 80078a0:	9b05      	ldr	r3, [sp, #20]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	dd05      	ble.n	80078b2 <_dtoa_r+0x82a>
 80078a6:	4631      	mov	r1, r6
 80078a8:	461a      	mov	r2, r3
 80078aa:	4620      	mov	r0, r4
 80078ac:	f000 ffe4 	bl	8008878 <__lshift>
 80078b0:	4606      	mov	r6, r0
 80078b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d06e      	beq.n	8007996 <_dtoa_r+0x90e>
 80078b8:	ee18 0a10 	vmov	r0, s16
 80078bc:	4631      	mov	r1, r6
 80078be:	f001 f84b 	bl	8008958 <__mcmp>
 80078c2:	2800      	cmp	r0, #0
 80078c4:	da67      	bge.n	8007996 <_dtoa_r+0x90e>
 80078c6:	9b00      	ldr	r3, [sp, #0]
 80078c8:	3b01      	subs	r3, #1
 80078ca:	ee18 1a10 	vmov	r1, s16
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	220a      	movs	r2, #10
 80078d2:	2300      	movs	r3, #0
 80078d4:	4620      	mov	r0, r4
 80078d6:	f000 fdd5 	bl	8008484 <__multadd>
 80078da:	9b08      	ldr	r3, [sp, #32]
 80078dc:	ee08 0a10 	vmov	s16, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f000 81b1 	beq.w	8007c48 <_dtoa_r+0xbc0>
 80078e6:	2300      	movs	r3, #0
 80078e8:	4639      	mov	r1, r7
 80078ea:	220a      	movs	r2, #10
 80078ec:	4620      	mov	r0, r4
 80078ee:	f000 fdc9 	bl	8008484 <__multadd>
 80078f2:	9b02      	ldr	r3, [sp, #8]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	4607      	mov	r7, r0
 80078f8:	f300 808e 	bgt.w	8007a18 <_dtoa_r+0x990>
 80078fc:	9b06      	ldr	r3, [sp, #24]
 80078fe:	2b02      	cmp	r3, #2
 8007900:	dc51      	bgt.n	80079a6 <_dtoa_r+0x91e>
 8007902:	e089      	b.n	8007a18 <_dtoa_r+0x990>
 8007904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007906:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800790a:	e74b      	b.n	80077a4 <_dtoa_r+0x71c>
 800790c:	9b03      	ldr	r3, [sp, #12]
 800790e:	1e5e      	subs	r6, r3, #1
 8007910:	9b07      	ldr	r3, [sp, #28]
 8007912:	42b3      	cmp	r3, r6
 8007914:	bfbf      	itttt	lt
 8007916:	9b07      	ldrlt	r3, [sp, #28]
 8007918:	9607      	strlt	r6, [sp, #28]
 800791a:	1af2      	sublt	r2, r6, r3
 800791c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800791e:	bfb6      	itet	lt
 8007920:	189b      	addlt	r3, r3, r2
 8007922:	1b9e      	subge	r6, r3, r6
 8007924:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007926:	9b03      	ldr	r3, [sp, #12]
 8007928:	bfb8      	it	lt
 800792a:	2600      	movlt	r6, #0
 800792c:	2b00      	cmp	r3, #0
 800792e:	bfb7      	itett	lt
 8007930:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007934:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007938:	1a9d      	sublt	r5, r3, r2
 800793a:	2300      	movlt	r3, #0
 800793c:	e734      	b.n	80077a8 <_dtoa_r+0x720>
 800793e:	9e07      	ldr	r6, [sp, #28]
 8007940:	9d04      	ldr	r5, [sp, #16]
 8007942:	9f08      	ldr	r7, [sp, #32]
 8007944:	e73b      	b.n	80077be <_dtoa_r+0x736>
 8007946:	9a07      	ldr	r2, [sp, #28]
 8007948:	e767      	b.n	800781a <_dtoa_r+0x792>
 800794a:	9b06      	ldr	r3, [sp, #24]
 800794c:	2b01      	cmp	r3, #1
 800794e:	dc18      	bgt.n	8007982 <_dtoa_r+0x8fa>
 8007950:	f1ba 0f00 	cmp.w	sl, #0
 8007954:	d115      	bne.n	8007982 <_dtoa_r+0x8fa>
 8007956:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800795a:	b993      	cbnz	r3, 8007982 <_dtoa_r+0x8fa>
 800795c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007960:	0d1b      	lsrs	r3, r3, #20
 8007962:	051b      	lsls	r3, r3, #20
 8007964:	b183      	cbz	r3, 8007988 <_dtoa_r+0x900>
 8007966:	9b04      	ldr	r3, [sp, #16]
 8007968:	3301      	adds	r3, #1
 800796a:	9304      	str	r3, [sp, #16]
 800796c:	9b05      	ldr	r3, [sp, #20]
 800796e:	3301      	adds	r3, #1
 8007970:	9305      	str	r3, [sp, #20]
 8007972:	f04f 0801 	mov.w	r8, #1
 8007976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007978:	2b00      	cmp	r3, #0
 800797a:	f47f af6a 	bne.w	8007852 <_dtoa_r+0x7ca>
 800797e:	2001      	movs	r0, #1
 8007980:	e76f      	b.n	8007862 <_dtoa_r+0x7da>
 8007982:	f04f 0800 	mov.w	r8, #0
 8007986:	e7f6      	b.n	8007976 <_dtoa_r+0x8ee>
 8007988:	4698      	mov	r8, r3
 800798a:	e7f4      	b.n	8007976 <_dtoa_r+0x8ee>
 800798c:	f43f af7d 	beq.w	800788a <_dtoa_r+0x802>
 8007990:	4618      	mov	r0, r3
 8007992:	301c      	adds	r0, #28
 8007994:	e772      	b.n	800787c <_dtoa_r+0x7f4>
 8007996:	9b03      	ldr	r3, [sp, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	dc37      	bgt.n	8007a0c <_dtoa_r+0x984>
 800799c:	9b06      	ldr	r3, [sp, #24]
 800799e:	2b02      	cmp	r3, #2
 80079a0:	dd34      	ble.n	8007a0c <_dtoa_r+0x984>
 80079a2:	9b03      	ldr	r3, [sp, #12]
 80079a4:	9302      	str	r3, [sp, #8]
 80079a6:	9b02      	ldr	r3, [sp, #8]
 80079a8:	b96b      	cbnz	r3, 80079c6 <_dtoa_r+0x93e>
 80079aa:	4631      	mov	r1, r6
 80079ac:	2205      	movs	r2, #5
 80079ae:	4620      	mov	r0, r4
 80079b0:	f000 fd68 	bl	8008484 <__multadd>
 80079b4:	4601      	mov	r1, r0
 80079b6:	4606      	mov	r6, r0
 80079b8:	ee18 0a10 	vmov	r0, s16
 80079bc:	f000 ffcc 	bl	8008958 <__mcmp>
 80079c0:	2800      	cmp	r0, #0
 80079c2:	f73f adbb 	bgt.w	800753c <_dtoa_r+0x4b4>
 80079c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c8:	9d01      	ldr	r5, [sp, #4]
 80079ca:	43db      	mvns	r3, r3
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	f04f 0800 	mov.w	r8, #0
 80079d2:	4631      	mov	r1, r6
 80079d4:	4620      	mov	r0, r4
 80079d6:	f000 fd33 	bl	8008440 <_Bfree>
 80079da:	2f00      	cmp	r7, #0
 80079dc:	f43f aea4 	beq.w	8007728 <_dtoa_r+0x6a0>
 80079e0:	f1b8 0f00 	cmp.w	r8, #0
 80079e4:	d005      	beq.n	80079f2 <_dtoa_r+0x96a>
 80079e6:	45b8      	cmp	r8, r7
 80079e8:	d003      	beq.n	80079f2 <_dtoa_r+0x96a>
 80079ea:	4641      	mov	r1, r8
 80079ec:	4620      	mov	r0, r4
 80079ee:	f000 fd27 	bl	8008440 <_Bfree>
 80079f2:	4639      	mov	r1, r7
 80079f4:	4620      	mov	r0, r4
 80079f6:	f000 fd23 	bl	8008440 <_Bfree>
 80079fa:	e695      	b.n	8007728 <_dtoa_r+0x6a0>
 80079fc:	2600      	movs	r6, #0
 80079fe:	4637      	mov	r7, r6
 8007a00:	e7e1      	b.n	80079c6 <_dtoa_r+0x93e>
 8007a02:	9700      	str	r7, [sp, #0]
 8007a04:	4637      	mov	r7, r6
 8007a06:	e599      	b.n	800753c <_dtoa_r+0x4b4>
 8007a08:	40240000 	.word	0x40240000
 8007a0c:	9b08      	ldr	r3, [sp, #32]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 80ca 	beq.w	8007ba8 <_dtoa_r+0xb20>
 8007a14:	9b03      	ldr	r3, [sp, #12]
 8007a16:	9302      	str	r3, [sp, #8]
 8007a18:	2d00      	cmp	r5, #0
 8007a1a:	dd05      	ble.n	8007a28 <_dtoa_r+0x9a0>
 8007a1c:	4639      	mov	r1, r7
 8007a1e:	462a      	mov	r2, r5
 8007a20:	4620      	mov	r0, r4
 8007a22:	f000 ff29 	bl	8008878 <__lshift>
 8007a26:	4607      	mov	r7, r0
 8007a28:	f1b8 0f00 	cmp.w	r8, #0
 8007a2c:	d05b      	beq.n	8007ae6 <_dtoa_r+0xa5e>
 8007a2e:	6879      	ldr	r1, [r7, #4]
 8007a30:	4620      	mov	r0, r4
 8007a32:	f000 fcc5 	bl	80083c0 <_Balloc>
 8007a36:	4605      	mov	r5, r0
 8007a38:	b928      	cbnz	r0, 8007a46 <_dtoa_r+0x9be>
 8007a3a:	4b87      	ldr	r3, [pc, #540]	; (8007c58 <_dtoa_r+0xbd0>)
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007a42:	f7ff bb3b 	b.w	80070bc <_dtoa_r+0x34>
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	3202      	adds	r2, #2
 8007a4a:	0092      	lsls	r2, r2, #2
 8007a4c:	f107 010c 	add.w	r1, r7, #12
 8007a50:	300c      	adds	r0, #12
 8007a52:	f000 fca7 	bl	80083a4 <memcpy>
 8007a56:	2201      	movs	r2, #1
 8007a58:	4629      	mov	r1, r5
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 ff0c 	bl	8008878 <__lshift>
 8007a60:	9b01      	ldr	r3, [sp, #4]
 8007a62:	f103 0901 	add.w	r9, r3, #1
 8007a66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	9305      	str	r3, [sp, #20]
 8007a6e:	f00a 0301 	and.w	r3, sl, #1
 8007a72:	46b8      	mov	r8, r7
 8007a74:	9304      	str	r3, [sp, #16]
 8007a76:	4607      	mov	r7, r0
 8007a78:	4631      	mov	r1, r6
 8007a7a:	ee18 0a10 	vmov	r0, s16
 8007a7e:	f7ff fa75 	bl	8006f6c <quorem>
 8007a82:	4641      	mov	r1, r8
 8007a84:	9002      	str	r0, [sp, #8]
 8007a86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a8a:	ee18 0a10 	vmov	r0, s16
 8007a8e:	f000 ff63 	bl	8008958 <__mcmp>
 8007a92:	463a      	mov	r2, r7
 8007a94:	9003      	str	r0, [sp, #12]
 8007a96:	4631      	mov	r1, r6
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f000 ff79 	bl	8008990 <__mdiff>
 8007a9e:	68c2      	ldr	r2, [r0, #12]
 8007aa0:	f109 3bff 	add.w	fp, r9, #4294967295
 8007aa4:	4605      	mov	r5, r0
 8007aa6:	bb02      	cbnz	r2, 8007aea <_dtoa_r+0xa62>
 8007aa8:	4601      	mov	r1, r0
 8007aaa:	ee18 0a10 	vmov	r0, s16
 8007aae:	f000 ff53 	bl	8008958 <__mcmp>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	4629      	mov	r1, r5
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	9207      	str	r2, [sp, #28]
 8007aba:	f000 fcc1 	bl	8008440 <_Bfree>
 8007abe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007ac2:	ea43 0102 	orr.w	r1, r3, r2
 8007ac6:	9b04      	ldr	r3, [sp, #16]
 8007ac8:	430b      	orrs	r3, r1
 8007aca:	464d      	mov	r5, r9
 8007acc:	d10f      	bne.n	8007aee <_dtoa_r+0xa66>
 8007ace:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ad2:	d02a      	beq.n	8007b2a <_dtoa_r+0xaa2>
 8007ad4:	9b03      	ldr	r3, [sp, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	dd02      	ble.n	8007ae0 <_dtoa_r+0xa58>
 8007ada:	9b02      	ldr	r3, [sp, #8]
 8007adc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007ae0:	f88b a000 	strb.w	sl, [fp]
 8007ae4:	e775      	b.n	80079d2 <_dtoa_r+0x94a>
 8007ae6:	4638      	mov	r0, r7
 8007ae8:	e7ba      	b.n	8007a60 <_dtoa_r+0x9d8>
 8007aea:	2201      	movs	r2, #1
 8007aec:	e7e2      	b.n	8007ab4 <_dtoa_r+0xa2c>
 8007aee:	9b03      	ldr	r3, [sp, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	db04      	blt.n	8007afe <_dtoa_r+0xa76>
 8007af4:	9906      	ldr	r1, [sp, #24]
 8007af6:	430b      	orrs	r3, r1
 8007af8:	9904      	ldr	r1, [sp, #16]
 8007afa:	430b      	orrs	r3, r1
 8007afc:	d122      	bne.n	8007b44 <_dtoa_r+0xabc>
 8007afe:	2a00      	cmp	r2, #0
 8007b00:	ddee      	ble.n	8007ae0 <_dtoa_r+0xa58>
 8007b02:	ee18 1a10 	vmov	r1, s16
 8007b06:	2201      	movs	r2, #1
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f000 feb5 	bl	8008878 <__lshift>
 8007b0e:	4631      	mov	r1, r6
 8007b10:	ee08 0a10 	vmov	s16, r0
 8007b14:	f000 ff20 	bl	8008958 <__mcmp>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	dc03      	bgt.n	8007b24 <_dtoa_r+0xa9c>
 8007b1c:	d1e0      	bne.n	8007ae0 <_dtoa_r+0xa58>
 8007b1e:	f01a 0f01 	tst.w	sl, #1
 8007b22:	d0dd      	beq.n	8007ae0 <_dtoa_r+0xa58>
 8007b24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007b28:	d1d7      	bne.n	8007ada <_dtoa_r+0xa52>
 8007b2a:	2339      	movs	r3, #57	; 0x39
 8007b2c:	f88b 3000 	strb.w	r3, [fp]
 8007b30:	462b      	mov	r3, r5
 8007b32:	461d      	mov	r5, r3
 8007b34:	3b01      	subs	r3, #1
 8007b36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007b3a:	2a39      	cmp	r2, #57	; 0x39
 8007b3c:	d071      	beq.n	8007c22 <_dtoa_r+0xb9a>
 8007b3e:	3201      	adds	r2, #1
 8007b40:	701a      	strb	r2, [r3, #0]
 8007b42:	e746      	b.n	80079d2 <_dtoa_r+0x94a>
 8007b44:	2a00      	cmp	r2, #0
 8007b46:	dd07      	ble.n	8007b58 <_dtoa_r+0xad0>
 8007b48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007b4c:	d0ed      	beq.n	8007b2a <_dtoa_r+0xaa2>
 8007b4e:	f10a 0301 	add.w	r3, sl, #1
 8007b52:	f88b 3000 	strb.w	r3, [fp]
 8007b56:	e73c      	b.n	80079d2 <_dtoa_r+0x94a>
 8007b58:	9b05      	ldr	r3, [sp, #20]
 8007b5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007b5e:	4599      	cmp	r9, r3
 8007b60:	d047      	beq.n	8007bf2 <_dtoa_r+0xb6a>
 8007b62:	ee18 1a10 	vmov	r1, s16
 8007b66:	2300      	movs	r3, #0
 8007b68:	220a      	movs	r2, #10
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f000 fc8a 	bl	8008484 <__multadd>
 8007b70:	45b8      	cmp	r8, r7
 8007b72:	ee08 0a10 	vmov	s16, r0
 8007b76:	f04f 0300 	mov.w	r3, #0
 8007b7a:	f04f 020a 	mov.w	r2, #10
 8007b7e:	4641      	mov	r1, r8
 8007b80:	4620      	mov	r0, r4
 8007b82:	d106      	bne.n	8007b92 <_dtoa_r+0xb0a>
 8007b84:	f000 fc7e 	bl	8008484 <__multadd>
 8007b88:	4680      	mov	r8, r0
 8007b8a:	4607      	mov	r7, r0
 8007b8c:	f109 0901 	add.w	r9, r9, #1
 8007b90:	e772      	b.n	8007a78 <_dtoa_r+0x9f0>
 8007b92:	f000 fc77 	bl	8008484 <__multadd>
 8007b96:	4639      	mov	r1, r7
 8007b98:	4680      	mov	r8, r0
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	220a      	movs	r2, #10
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f000 fc70 	bl	8008484 <__multadd>
 8007ba4:	4607      	mov	r7, r0
 8007ba6:	e7f1      	b.n	8007b8c <_dtoa_r+0xb04>
 8007ba8:	9b03      	ldr	r3, [sp, #12]
 8007baa:	9302      	str	r3, [sp, #8]
 8007bac:	9d01      	ldr	r5, [sp, #4]
 8007bae:	ee18 0a10 	vmov	r0, s16
 8007bb2:	4631      	mov	r1, r6
 8007bb4:	f7ff f9da 	bl	8006f6c <quorem>
 8007bb8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007bbc:	9b01      	ldr	r3, [sp, #4]
 8007bbe:	f805 ab01 	strb.w	sl, [r5], #1
 8007bc2:	1aea      	subs	r2, r5, r3
 8007bc4:	9b02      	ldr	r3, [sp, #8]
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	dd09      	ble.n	8007bde <_dtoa_r+0xb56>
 8007bca:	ee18 1a10 	vmov	r1, s16
 8007bce:	2300      	movs	r3, #0
 8007bd0:	220a      	movs	r2, #10
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f000 fc56 	bl	8008484 <__multadd>
 8007bd8:	ee08 0a10 	vmov	s16, r0
 8007bdc:	e7e7      	b.n	8007bae <_dtoa_r+0xb26>
 8007bde:	9b02      	ldr	r3, [sp, #8]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	bfc8      	it	gt
 8007be4:	461d      	movgt	r5, r3
 8007be6:	9b01      	ldr	r3, [sp, #4]
 8007be8:	bfd8      	it	le
 8007bea:	2501      	movle	r5, #1
 8007bec:	441d      	add	r5, r3
 8007bee:	f04f 0800 	mov.w	r8, #0
 8007bf2:	ee18 1a10 	vmov	r1, s16
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f000 fe3d 	bl	8008878 <__lshift>
 8007bfe:	4631      	mov	r1, r6
 8007c00:	ee08 0a10 	vmov	s16, r0
 8007c04:	f000 fea8 	bl	8008958 <__mcmp>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	dc91      	bgt.n	8007b30 <_dtoa_r+0xaa8>
 8007c0c:	d102      	bne.n	8007c14 <_dtoa_r+0xb8c>
 8007c0e:	f01a 0f01 	tst.w	sl, #1
 8007c12:	d18d      	bne.n	8007b30 <_dtoa_r+0xaa8>
 8007c14:	462b      	mov	r3, r5
 8007c16:	461d      	mov	r5, r3
 8007c18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c1c:	2a30      	cmp	r2, #48	; 0x30
 8007c1e:	d0fa      	beq.n	8007c16 <_dtoa_r+0xb8e>
 8007c20:	e6d7      	b.n	80079d2 <_dtoa_r+0x94a>
 8007c22:	9a01      	ldr	r2, [sp, #4]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d184      	bne.n	8007b32 <_dtoa_r+0xaaa>
 8007c28:	9b00      	ldr	r3, [sp, #0]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	2331      	movs	r3, #49	; 0x31
 8007c30:	7013      	strb	r3, [r2, #0]
 8007c32:	e6ce      	b.n	80079d2 <_dtoa_r+0x94a>
 8007c34:	4b09      	ldr	r3, [pc, #36]	; (8007c5c <_dtoa_r+0xbd4>)
 8007c36:	f7ff ba95 	b.w	8007164 <_dtoa_r+0xdc>
 8007c3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f47f aa6e 	bne.w	800711e <_dtoa_r+0x96>
 8007c42:	4b07      	ldr	r3, [pc, #28]	; (8007c60 <_dtoa_r+0xbd8>)
 8007c44:	f7ff ba8e 	b.w	8007164 <_dtoa_r+0xdc>
 8007c48:	9b02      	ldr	r3, [sp, #8]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	dcae      	bgt.n	8007bac <_dtoa_r+0xb24>
 8007c4e:	9b06      	ldr	r3, [sp, #24]
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	f73f aea8 	bgt.w	80079a6 <_dtoa_r+0x91e>
 8007c56:	e7a9      	b.n	8007bac <_dtoa_r+0xb24>
 8007c58:	0800c0d8 	.word	0x0800c0d8
 8007c5c:	0800c2d1 	.word	0x0800c2d1
 8007c60:	0800c059 	.word	0x0800c059

08007c64 <rshift>:
 8007c64:	6903      	ldr	r3, [r0, #16]
 8007c66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007c6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007c72:	f100 0414 	add.w	r4, r0, #20
 8007c76:	dd45      	ble.n	8007d04 <rshift+0xa0>
 8007c78:	f011 011f 	ands.w	r1, r1, #31
 8007c7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007c80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007c84:	d10c      	bne.n	8007ca0 <rshift+0x3c>
 8007c86:	f100 0710 	add.w	r7, r0, #16
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	42b1      	cmp	r1, r6
 8007c8e:	d334      	bcc.n	8007cfa <rshift+0x96>
 8007c90:	1a9b      	subs	r3, r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	1eea      	subs	r2, r5, #3
 8007c96:	4296      	cmp	r6, r2
 8007c98:	bf38      	it	cc
 8007c9a:	2300      	movcc	r3, #0
 8007c9c:	4423      	add	r3, r4
 8007c9e:	e015      	b.n	8007ccc <rshift+0x68>
 8007ca0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007ca4:	f1c1 0820 	rsb	r8, r1, #32
 8007ca8:	40cf      	lsrs	r7, r1
 8007caa:	f105 0e04 	add.w	lr, r5, #4
 8007cae:	46a1      	mov	r9, r4
 8007cb0:	4576      	cmp	r6, lr
 8007cb2:	46f4      	mov	ip, lr
 8007cb4:	d815      	bhi.n	8007ce2 <rshift+0x7e>
 8007cb6:	1a9a      	subs	r2, r3, r2
 8007cb8:	0092      	lsls	r2, r2, #2
 8007cba:	3a04      	subs	r2, #4
 8007cbc:	3501      	adds	r5, #1
 8007cbe:	42ae      	cmp	r6, r5
 8007cc0:	bf38      	it	cc
 8007cc2:	2200      	movcc	r2, #0
 8007cc4:	18a3      	adds	r3, r4, r2
 8007cc6:	50a7      	str	r7, [r4, r2]
 8007cc8:	b107      	cbz	r7, 8007ccc <rshift+0x68>
 8007cca:	3304      	adds	r3, #4
 8007ccc:	1b1a      	subs	r2, r3, r4
 8007cce:	42a3      	cmp	r3, r4
 8007cd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007cd4:	bf08      	it	eq
 8007cd6:	2300      	moveq	r3, #0
 8007cd8:	6102      	str	r2, [r0, #16]
 8007cda:	bf08      	it	eq
 8007cdc:	6143      	streq	r3, [r0, #20]
 8007cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ce2:	f8dc c000 	ldr.w	ip, [ip]
 8007ce6:	fa0c fc08 	lsl.w	ip, ip, r8
 8007cea:	ea4c 0707 	orr.w	r7, ip, r7
 8007cee:	f849 7b04 	str.w	r7, [r9], #4
 8007cf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007cf6:	40cf      	lsrs	r7, r1
 8007cf8:	e7da      	b.n	8007cb0 <rshift+0x4c>
 8007cfa:	f851 cb04 	ldr.w	ip, [r1], #4
 8007cfe:	f847 cf04 	str.w	ip, [r7, #4]!
 8007d02:	e7c3      	b.n	8007c8c <rshift+0x28>
 8007d04:	4623      	mov	r3, r4
 8007d06:	e7e1      	b.n	8007ccc <rshift+0x68>

08007d08 <__hexdig_fun>:
 8007d08:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007d0c:	2b09      	cmp	r3, #9
 8007d0e:	d802      	bhi.n	8007d16 <__hexdig_fun+0xe>
 8007d10:	3820      	subs	r0, #32
 8007d12:	b2c0      	uxtb	r0, r0
 8007d14:	4770      	bx	lr
 8007d16:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007d1a:	2b05      	cmp	r3, #5
 8007d1c:	d801      	bhi.n	8007d22 <__hexdig_fun+0x1a>
 8007d1e:	3847      	subs	r0, #71	; 0x47
 8007d20:	e7f7      	b.n	8007d12 <__hexdig_fun+0xa>
 8007d22:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007d26:	2b05      	cmp	r3, #5
 8007d28:	d801      	bhi.n	8007d2e <__hexdig_fun+0x26>
 8007d2a:	3827      	subs	r0, #39	; 0x27
 8007d2c:	e7f1      	b.n	8007d12 <__hexdig_fun+0xa>
 8007d2e:	2000      	movs	r0, #0
 8007d30:	4770      	bx	lr
	...

08007d34 <__gethex>:
 8007d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d38:	ed2d 8b02 	vpush	{d8}
 8007d3c:	b089      	sub	sp, #36	; 0x24
 8007d3e:	ee08 0a10 	vmov	s16, r0
 8007d42:	9304      	str	r3, [sp, #16]
 8007d44:	4bb4      	ldr	r3, [pc, #720]	; (8008018 <__gethex+0x2e4>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	9301      	str	r3, [sp, #4]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	468b      	mov	fp, r1
 8007d4e:	4690      	mov	r8, r2
 8007d50:	f7f8 fa50 	bl	80001f4 <strlen>
 8007d54:	9b01      	ldr	r3, [sp, #4]
 8007d56:	f8db 2000 	ldr.w	r2, [fp]
 8007d5a:	4403      	add	r3, r0
 8007d5c:	4682      	mov	sl, r0
 8007d5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007d62:	9305      	str	r3, [sp, #20]
 8007d64:	1c93      	adds	r3, r2, #2
 8007d66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007d6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007d6e:	32fe      	adds	r2, #254	; 0xfe
 8007d70:	18d1      	adds	r1, r2, r3
 8007d72:	461f      	mov	r7, r3
 8007d74:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007d78:	9100      	str	r1, [sp, #0]
 8007d7a:	2830      	cmp	r0, #48	; 0x30
 8007d7c:	d0f8      	beq.n	8007d70 <__gethex+0x3c>
 8007d7e:	f7ff ffc3 	bl	8007d08 <__hexdig_fun>
 8007d82:	4604      	mov	r4, r0
 8007d84:	2800      	cmp	r0, #0
 8007d86:	d13a      	bne.n	8007dfe <__gethex+0xca>
 8007d88:	9901      	ldr	r1, [sp, #4]
 8007d8a:	4652      	mov	r2, sl
 8007d8c:	4638      	mov	r0, r7
 8007d8e:	f001 fdb3 	bl	80098f8 <strncmp>
 8007d92:	4605      	mov	r5, r0
 8007d94:	2800      	cmp	r0, #0
 8007d96:	d168      	bne.n	8007e6a <__gethex+0x136>
 8007d98:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007d9c:	eb07 060a 	add.w	r6, r7, sl
 8007da0:	f7ff ffb2 	bl	8007d08 <__hexdig_fun>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d062      	beq.n	8007e6e <__gethex+0x13a>
 8007da8:	4633      	mov	r3, r6
 8007daa:	7818      	ldrb	r0, [r3, #0]
 8007dac:	2830      	cmp	r0, #48	; 0x30
 8007dae:	461f      	mov	r7, r3
 8007db0:	f103 0301 	add.w	r3, r3, #1
 8007db4:	d0f9      	beq.n	8007daa <__gethex+0x76>
 8007db6:	f7ff ffa7 	bl	8007d08 <__hexdig_fun>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	fab0 f480 	clz	r4, r0
 8007dc0:	0964      	lsrs	r4, r4, #5
 8007dc2:	4635      	mov	r5, r6
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	463a      	mov	r2, r7
 8007dc8:	4616      	mov	r6, r2
 8007dca:	3201      	adds	r2, #1
 8007dcc:	7830      	ldrb	r0, [r6, #0]
 8007dce:	f7ff ff9b 	bl	8007d08 <__hexdig_fun>
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	d1f8      	bne.n	8007dc8 <__gethex+0x94>
 8007dd6:	9901      	ldr	r1, [sp, #4]
 8007dd8:	4652      	mov	r2, sl
 8007dda:	4630      	mov	r0, r6
 8007ddc:	f001 fd8c 	bl	80098f8 <strncmp>
 8007de0:	b980      	cbnz	r0, 8007e04 <__gethex+0xd0>
 8007de2:	b94d      	cbnz	r5, 8007df8 <__gethex+0xc4>
 8007de4:	eb06 050a 	add.w	r5, r6, sl
 8007de8:	462a      	mov	r2, r5
 8007dea:	4616      	mov	r6, r2
 8007dec:	3201      	adds	r2, #1
 8007dee:	7830      	ldrb	r0, [r6, #0]
 8007df0:	f7ff ff8a 	bl	8007d08 <__hexdig_fun>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	d1f8      	bne.n	8007dea <__gethex+0xb6>
 8007df8:	1bad      	subs	r5, r5, r6
 8007dfa:	00ad      	lsls	r5, r5, #2
 8007dfc:	e004      	b.n	8007e08 <__gethex+0xd4>
 8007dfe:	2400      	movs	r4, #0
 8007e00:	4625      	mov	r5, r4
 8007e02:	e7e0      	b.n	8007dc6 <__gethex+0x92>
 8007e04:	2d00      	cmp	r5, #0
 8007e06:	d1f7      	bne.n	8007df8 <__gethex+0xc4>
 8007e08:	7833      	ldrb	r3, [r6, #0]
 8007e0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007e0e:	2b50      	cmp	r3, #80	; 0x50
 8007e10:	d13b      	bne.n	8007e8a <__gethex+0x156>
 8007e12:	7873      	ldrb	r3, [r6, #1]
 8007e14:	2b2b      	cmp	r3, #43	; 0x2b
 8007e16:	d02c      	beq.n	8007e72 <__gethex+0x13e>
 8007e18:	2b2d      	cmp	r3, #45	; 0x2d
 8007e1a:	d02e      	beq.n	8007e7a <__gethex+0x146>
 8007e1c:	1c71      	adds	r1, r6, #1
 8007e1e:	f04f 0900 	mov.w	r9, #0
 8007e22:	7808      	ldrb	r0, [r1, #0]
 8007e24:	f7ff ff70 	bl	8007d08 <__hexdig_fun>
 8007e28:	1e43      	subs	r3, r0, #1
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b18      	cmp	r3, #24
 8007e2e:	d82c      	bhi.n	8007e8a <__gethex+0x156>
 8007e30:	f1a0 0210 	sub.w	r2, r0, #16
 8007e34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007e38:	f7ff ff66 	bl	8007d08 <__hexdig_fun>
 8007e3c:	1e43      	subs	r3, r0, #1
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	2b18      	cmp	r3, #24
 8007e42:	d91d      	bls.n	8007e80 <__gethex+0x14c>
 8007e44:	f1b9 0f00 	cmp.w	r9, #0
 8007e48:	d000      	beq.n	8007e4c <__gethex+0x118>
 8007e4a:	4252      	negs	r2, r2
 8007e4c:	4415      	add	r5, r2
 8007e4e:	f8cb 1000 	str.w	r1, [fp]
 8007e52:	b1e4      	cbz	r4, 8007e8e <__gethex+0x15a>
 8007e54:	9b00      	ldr	r3, [sp, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	bf14      	ite	ne
 8007e5a:	2700      	movne	r7, #0
 8007e5c:	2706      	moveq	r7, #6
 8007e5e:	4638      	mov	r0, r7
 8007e60:	b009      	add	sp, #36	; 0x24
 8007e62:	ecbd 8b02 	vpop	{d8}
 8007e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e6a:	463e      	mov	r6, r7
 8007e6c:	4625      	mov	r5, r4
 8007e6e:	2401      	movs	r4, #1
 8007e70:	e7ca      	b.n	8007e08 <__gethex+0xd4>
 8007e72:	f04f 0900 	mov.w	r9, #0
 8007e76:	1cb1      	adds	r1, r6, #2
 8007e78:	e7d3      	b.n	8007e22 <__gethex+0xee>
 8007e7a:	f04f 0901 	mov.w	r9, #1
 8007e7e:	e7fa      	b.n	8007e76 <__gethex+0x142>
 8007e80:	230a      	movs	r3, #10
 8007e82:	fb03 0202 	mla	r2, r3, r2, r0
 8007e86:	3a10      	subs	r2, #16
 8007e88:	e7d4      	b.n	8007e34 <__gethex+0x100>
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	e7df      	b.n	8007e4e <__gethex+0x11a>
 8007e8e:	1bf3      	subs	r3, r6, r7
 8007e90:	3b01      	subs	r3, #1
 8007e92:	4621      	mov	r1, r4
 8007e94:	2b07      	cmp	r3, #7
 8007e96:	dc0b      	bgt.n	8007eb0 <__gethex+0x17c>
 8007e98:	ee18 0a10 	vmov	r0, s16
 8007e9c:	f000 fa90 	bl	80083c0 <_Balloc>
 8007ea0:	4604      	mov	r4, r0
 8007ea2:	b940      	cbnz	r0, 8007eb6 <__gethex+0x182>
 8007ea4:	4b5d      	ldr	r3, [pc, #372]	; (800801c <__gethex+0x2e8>)
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	21de      	movs	r1, #222	; 0xde
 8007eaa:	485d      	ldr	r0, [pc, #372]	; (8008020 <__gethex+0x2ec>)
 8007eac:	f001 fdf4 	bl	8009a98 <__assert_func>
 8007eb0:	3101      	adds	r1, #1
 8007eb2:	105b      	asrs	r3, r3, #1
 8007eb4:	e7ee      	b.n	8007e94 <__gethex+0x160>
 8007eb6:	f100 0914 	add.w	r9, r0, #20
 8007eba:	f04f 0b00 	mov.w	fp, #0
 8007ebe:	f1ca 0301 	rsb	r3, sl, #1
 8007ec2:	f8cd 9008 	str.w	r9, [sp, #8]
 8007ec6:	f8cd b000 	str.w	fp, [sp]
 8007eca:	9306      	str	r3, [sp, #24]
 8007ecc:	42b7      	cmp	r7, r6
 8007ece:	d340      	bcc.n	8007f52 <__gethex+0x21e>
 8007ed0:	9802      	ldr	r0, [sp, #8]
 8007ed2:	9b00      	ldr	r3, [sp, #0]
 8007ed4:	f840 3b04 	str.w	r3, [r0], #4
 8007ed8:	eba0 0009 	sub.w	r0, r0, r9
 8007edc:	1080      	asrs	r0, r0, #2
 8007ede:	0146      	lsls	r6, r0, #5
 8007ee0:	6120      	str	r0, [r4, #16]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 fb5e 	bl	80085a4 <__hi0bits>
 8007ee8:	1a30      	subs	r0, r6, r0
 8007eea:	f8d8 6000 	ldr.w	r6, [r8]
 8007eee:	42b0      	cmp	r0, r6
 8007ef0:	dd63      	ble.n	8007fba <__gethex+0x286>
 8007ef2:	1b87      	subs	r7, r0, r6
 8007ef4:	4639      	mov	r1, r7
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f000 ff02 	bl	8008d00 <__any_on>
 8007efc:	4682      	mov	sl, r0
 8007efe:	b1a8      	cbz	r0, 8007f2c <__gethex+0x1f8>
 8007f00:	1e7b      	subs	r3, r7, #1
 8007f02:	1159      	asrs	r1, r3, #5
 8007f04:	f003 021f 	and.w	r2, r3, #31
 8007f08:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007f0c:	f04f 0a01 	mov.w	sl, #1
 8007f10:	fa0a f202 	lsl.w	r2, sl, r2
 8007f14:	420a      	tst	r2, r1
 8007f16:	d009      	beq.n	8007f2c <__gethex+0x1f8>
 8007f18:	4553      	cmp	r3, sl
 8007f1a:	dd05      	ble.n	8007f28 <__gethex+0x1f4>
 8007f1c:	1eb9      	subs	r1, r7, #2
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f000 feee 	bl	8008d00 <__any_on>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	d145      	bne.n	8007fb4 <__gethex+0x280>
 8007f28:	f04f 0a02 	mov.w	sl, #2
 8007f2c:	4639      	mov	r1, r7
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f7ff fe98 	bl	8007c64 <rshift>
 8007f34:	443d      	add	r5, r7
 8007f36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f3a:	42ab      	cmp	r3, r5
 8007f3c:	da4c      	bge.n	8007fd8 <__gethex+0x2a4>
 8007f3e:	ee18 0a10 	vmov	r0, s16
 8007f42:	4621      	mov	r1, r4
 8007f44:	f000 fa7c 	bl	8008440 <_Bfree>
 8007f48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	6013      	str	r3, [r2, #0]
 8007f4e:	27a3      	movs	r7, #163	; 0xa3
 8007f50:	e785      	b.n	8007e5e <__gethex+0x12a>
 8007f52:	1e73      	subs	r3, r6, #1
 8007f54:	9a05      	ldr	r2, [sp, #20]
 8007f56:	9303      	str	r3, [sp, #12]
 8007f58:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d019      	beq.n	8007f94 <__gethex+0x260>
 8007f60:	f1bb 0f20 	cmp.w	fp, #32
 8007f64:	d107      	bne.n	8007f76 <__gethex+0x242>
 8007f66:	9b02      	ldr	r3, [sp, #8]
 8007f68:	9a00      	ldr	r2, [sp, #0]
 8007f6a:	f843 2b04 	str.w	r2, [r3], #4
 8007f6e:	9302      	str	r3, [sp, #8]
 8007f70:	2300      	movs	r3, #0
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	469b      	mov	fp, r3
 8007f76:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007f7a:	f7ff fec5 	bl	8007d08 <__hexdig_fun>
 8007f7e:	9b00      	ldr	r3, [sp, #0]
 8007f80:	f000 000f 	and.w	r0, r0, #15
 8007f84:	fa00 f00b 	lsl.w	r0, r0, fp
 8007f88:	4303      	orrs	r3, r0
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	f10b 0b04 	add.w	fp, fp, #4
 8007f90:	9b03      	ldr	r3, [sp, #12]
 8007f92:	e00d      	b.n	8007fb0 <__gethex+0x27c>
 8007f94:	9b03      	ldr	r3, [sp, #12]
 8007f96:	9a06      	ldr	r2, [sp, #24]
 8007f98:	4413      	add	r3, r2
 8007f9a:	42bb      	cmp	r3, r7
 8007f9c:	d3e0      	bcc.n	8007f60 <__gethex+0x22c>
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	9901      	ldr	r1, [sp, #4]
 8007fa2:	9307      	str	r3, [sp, #28]
 8007fa4:	4652      	mov	r2, sl
 8007fa6:	f001 fca7 	bl	80098f8 <strncmp>
 8007faa:	9b07      	ldr	r3, [sp, #28]
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d1d7      	bne.n	8007f60 <__gethex+0x22c>
 8007fb0:	461e      	mov	r6, r3
 8007fb2:	e78b      	b.n	8007ecc <__gethex+0x198>
 8007fb4:	f04f 0a03 	mov.w	sl, #3
 8007fb8:	e7b8      	b.n	8007f2c <__gethex+0x1f8>
 8007fba:	da0a      	bge.n	8007fd2 <__gethex+0x29e>
 8007fbc:	1a37      	subs	r7, r6, r0
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	ee18 0a10 	vmov	r0, s16
 8007fc4:	463a      	mov	r2, r7
 8007fc6:	f000 fc57 	bl	8008878 <__lshift>
 8007fca:	1bed      	subs	r5, r5, r7
 8007fcc:	4604      	mov	r4, r0
 8007fce:	f100 0914 	add.w	r9, r0, #20
 8007fd2:	f04f 0a00 	mov.w	sl, #0
 8007fd6:	e7ae      	b.n	8007f36 <__gethex+0x202>
 8007fd8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007fdc:	42a8      	cmp	r0, r5
 8007fde:	dd72      	ble.n	80080c6 <__gethex+0x392>
 8007fe0:	1b45      	subs	r5, r0, r5
 8007fe2:	42ae      	cmp	r6, r5
 8007fe4:	dc36      	bgt.n	8008054 <__gethex+0x320>
 8007fe6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d02a      	beq.n	8008044 <__gethex+0x310>
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d02c      	beq.n	800804c <__gethex+0x318>
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d11c      	bne.n	8008030 <__gethex+0x2fc>
 8007ff6:	42ae      	cmp	r6, r5
 8007ff8:	d11a      	bne.n	8008030 <__gethex+0x2fc>
 8007ffa:	2e01      	cmp	r6, #1
 8007ffc:	d112      	bne.n	8008024 <__gethex+0x2f0>
 8007ffe:	9a04      	ldr	r2, [sp, #16]
 8008000:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008004:	6013      	str	r3, [r2, #0]
 8008006:	2301      	movs	r3, #1
 8008008:	6123      	str	r3, [r4, #16]
 800800a:	f8c9 3000 	str.w	r3, [r9]
 800800e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008010:	2762      	movs	r7, #98	; 0x62
 8008012:	601c      	str	r4, [r3, #0]
 8008014:	e723      	b.n	8007e5e <__gethex+0x12a>
 8008016:	bf00      	nop
 8008018:	0800c150 	.word	0x0800c150
 800801c:	0800c0d8 	.word	0x0800c0d8
 8008020:	0800c0e9 	.word	0x0800c0e9
 8008024:	1e71      	subs	r1, r6, #1
 8008026:	4620      	mov	r0, r4
 8008028:	f000 fe6a 	bl	8008d00 <__any_on>
 800802c:	2800      	cmp	r0, #0
 800802e:	d1e6      	bne.n	8007ffe <__gethex+0x2ca>
 8008030:	ee18 0a10 	vmov	r0, s16
 8008034:	4621      	mov	r1, r4
 8008036:	f000 fa03 	bl	8008440 <_Bfree>
 800803a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800803c:	2300      	movs	r3, #0
 800803e:	6013      	str	r3, [r2, #0]
 8008040:	2750      	movs	r7, #80	; 0x50
 8008042:	e70c      	b.n	8007e5e <__gethex+0x12a>
 8008044:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1f2      	bne.n	8008030 <__gethex+0x2fc>
 800804a:	e7d8      	b.n	8007ffe <__gethex+0x2ca>
 800804c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1d5      	bne.n	8007ffe <__gethex+0x2ca>
 8008052:	e7ed      	b.n	8008030 <__gethex+0x2fc>
 8008054:	1e6f      	subs	r7, r5, #1
 8008056:	f1ba 0f00 	cmp.w	sl, #0
 800805a:	d131      	bne.n	80080c0 <__gethex+0x38c>
 800805c:	b127      	cbz	r7, 8008068 <__gethex+0x334>
 800805e:	4639      	mov	r1, r7
 8008060:	4620      	mov	r0, r4
 8008062:	f000 fe4d 	bl	8008d00 <__any_on>
 8008066:	4682      	mov	sl, r0
 8008068:	117b      	asrs	r3, r7, #5
 800806a:	2101      	movs	r1, #1
 800806c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008070:	f007 071f 	and.w	r7, r7, #31
 8008074:	fa01 f707 	lsl.w	r7, r1, r7
 8008078:	421f      	tst	r7, r3
 800807a:	4629      	mov	r1, r5
 800807c:	4620      	mov	r0, r4
 800807e:	bf18      	it	ne
 8008080:	f04a 0a02 	orrne.w	sl, sl, #2
 8008084:	1b76      	subs	r6, r6, r5
 8008086:	f7ff fded 	bl	8007c64 <rshift>
 800808a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800808e:	2702      	movs	r7, #2
 8008090:	f1ba 0f00 	cmp.w	sl, #0
 8008094:	d048      	beq.n	8008128 <__gethex+0x3f4>
 8008096:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800809a:	2b02      	cmp	r3, #2
 800809c:	d015      	beq.n	80080ca <__gethex+0x396>
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d017      	beq.n	80080d2 <__gethex+0x39e>
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d109      	bne.n	80080ba <__gethex+0x386>
 80080a6:	f01a 0f02 	tst.w	sl, #2
 80080aa:	d006      	beq.n	80080ba <__gethex+0x386>
 80080ac:	f8d9 0000 	ldr.w	r0, [r9]
 80080b0:	ea4a 0a00 	orr.w	sl, sl, r0
 80080b4:	f01a 0f01 	tst.w	sl, #1
 80080b8:	d10e      	bne.n	80080d8 <__gethex+0x3a4>
 80080ba:	f047 0710 	orr.w	r7, r7, #16
 80080be:	e033      	b.n	8008128 <__gethex+0x3f4>
 80080c0:	f04f 0a01 	mov.w	sl, #1
 80080c4:	e7d0      	b.n	8008068 <__gethex+0x334>
 80080c6:	2701      	movs	r7, #1
 80080c8:	e7e2      	b.n	8008090 <__gethex+0x35c>
 80080ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080cc:	f1c3 0301 	rsb	r3, r3, #1
 80080d0:	9315      	str	r3, [sp, #84]	; 0x54
 80080d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d0f0      	beq.n	80080ba <__gethex+0x386>
 80080d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80080dc:	f104 0314 	add.w	r3, r4, #20
 80080e0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80080e4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80080e8:	f04f 0c00 	mov.w	ip, #0
 80080ec:	4618      	mov	r0, r3
 80080ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80080f2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80080f6:	d01c      	beq.n	8008132 <__gethex+0x3fe>
 80080f8:	3201      	adds	r2, #1
 80080fa:	6002      	str	r2, [r0, #0]
 80080fc:	2f02      	cmp	r7, #2
 80080fe:	f104 0314 	add.w	r3, r4, #20
 8008102:	d13f      	bne.n	8008184 <__gethex+0x450>
 8008104:	f8d8 2000 	ldr.w	r2, [r8]
 8008108:	3a01      	subs	r2, #1
 800810a:	42b2      	cmp	r2, r6
 800810c:	d10a      	bne.n	8008124 <__gethex+0x3f0>
 800810e:	1171      	asrs	r1, r6, #5
 8008110:	2201      	movs	r2, #1
 8008112:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008116:	f006 061f 	and.w	r6, r6, #31
 800811a:	fa02 f606 	lsl.w	r6, r2, r6
 800811e:	421e      	tst	r6, r3
 8008120:	bf18      	it	ne
 8008122:	4617      	movne	r7, r2
 8008124:	f047 0720 	orr.w	r7, r7, #32
 8008128:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800812a:	601c      	str	r4, [r3, #0]
 800812c:	9b04      	ldr	r3, [sp, #16]
 800812e:	601d      	str	r5, [r3, #0]
 8008130:	e695      	b.n	8007e5e <__gethex+0x12a>
 8008132:	4299      	cmp	r1, r3
 8008134:	f843 cc04 	str.w	ip, [r3, #-4]
 8008138:	d8d8      	bhi.n	80080ec <__gethex+0x3b8>
 800813a:	68a3      	ldr	r3, [r4, #8]
 800813c:	459b      	cmp	fp, r3
 800813e:	db19      	blt.n	8008174 <__gethex+0x440>
 8008140:	6861      	ldr	r1, [r4, #4]
 8008142:	ee18 0a10 	vmov	r0, s16
 8008146:	3101      	adds	r1, #1
 8008148:	f000 f93a 	bl	80083c0 <_Balloc>
 800814c:	4681      	mov	r9, r0
 800814e:	b918      	cbnz	r0, 8008158 <__gethex+0x424>
 8008150:	4b1a      	ldr	r3, [pc, #104]	; (80081bc <__gethex+0x488>)
 8008152:	4602      	mov	r2, r0
 8008154:	2184      	movs	r1, #132	; 0x84
 8008156:	e6a8      	b.n	8007eaa <__gethex+0x176>
 8008158:	6922      	ldr	r2, [r4, #16]
 800815a:	3202      	adds	r2, #2
 800815c:	f104 010c 	add.w	r1, r4, #12
 8008160:	0092      	lsls	r2, r2, #2
 8008162:	300c      	adds	r0, #12
 8008164:	f000 f91e 	bl	80083a4 <memcpy>
 8008168:	4621      	mov	r1, r4
 800816a:	ee18 0a10 	vmov	r0, s16
 800816e:	f000 f967 	bl	8008440 <_Bfree>
 8008172:	464c      	mov	r4, r9
 8008174:	6923      	ldr	r3, [r4, #16]
 8008176:	1c5a      	adds	r2, r3, #1
 8008178:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800817c:	6122      	str	r2, [r4, #16]
 800817e:	2201      	movs	r2, #1
 8008180:	615a      	str	r2, [r3, #20]
 8008182:	e7bb      	b.n	80080fc <__gethex+0x3c8>
 8008184:	6922      	ldr	r2, [r4, #16]
 8008186:	455a      	cmp	r2, fp
 8008188:	dd0b      	ble.n	80081a2 <__gethex+0x46e>
 800818a:	2101      	movs	r1, #1
 800818c:	4620      	mov	r0, r4
 800818e:	f7ff fd69 	bl	8007c64 <rshift>
 8008192:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008196:	3501      	adds	r5, #1
 8008198:	42ab      	cmp	r3, r5
 800819a:	f6ff aed0 	blt.w	8007f3e <__gethex+0x20a>
 800819e:	2701      	movs	r7, #1
 80081a0:	e7c0      	b.n	8008124 <__gethex+0x3f0>
 80081a2:	f016 061f 	ands.w	r6, r6, #31
 80081a6:	d0fa      	beq.n	800819e <__gethex+0x46a>
 80081a8:	4453      	add	r3, sl
 80081aa:	f1c6 0620 	rsb	r6, r6, #32
 80081ae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80081b2:	f000 f9f7 	bl	80085a4 <__hi0bits>
 80081b6:	42b0      	cmp	r0, r6
 80081b8:	dbe7      	blt.n	800818a <__gethex+0x456>
 80081ba:	e7f0      	b.n	800819e <__gethex+0x46a>
 80081bc:	0800c0d8 	.word	0x0800c0d8

080081c0 <L_shift>:
 80081c0:	f1c2 0208 	rsb	r2, r2, #8
 80081c4:	0092      	lsls	r2, r2, #2
 80081c6:	b570      	push	{r4, r5, r6, lr}
 80081c8:	f1c2 0620 	rsb	r6, r2, #32
 80081cc:	6843      	ldr	r3, [r0, #4]
 80081ce:	6804      	ldr	r4, [r0, #0]
 80081d0:	fa03 f506 	lsl.w	r5, r3, r6
 80081d4:	432c      	orrs	r4, r5
 80081d6:	40d3      	lsrs	r3, r2
 80081d8:	6004      	str	r4, [r0, #0]
 80081da:	f840 3f04 	str.w	r3, [r0, #4]!
 80081de:	4288      	cmp	r0, r1
 80081e0:	d3f4      	bcc.n	80081cc <L_shift+0xc>
 80081e2:	bd70      	pop	{r4, r5, r6, pc}

080081e4 <__match>:
 80081e4:	b530      	push	{r4, r5, lr}
 80081e6:	6803      	ldr	r3, [r0, #0]
 80081e8:	3301      	adds	r3, #1
 80081ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081ee:	b914      	cbnz	r4, 80081f6 <__match+0x12>
 80081f0:	6003      	str	r3, [r0, #0]
 80081f2:	2001      	movs	r0, #1
 80081f4:	bd30      	pop	{r4, r5, pc}
 80081f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80081fe:	2d19      	cmp	r5, #25
 8008200:	bf98      	it	ls
 8008202:	3220      	addls	r2, #32
 8008204:	42a2      	cmp	r2, r4
 8008206:	d0f0      	beq.n	80081ea <__match+0x6>
 8008208:	2000      	movs	r0, #0
 800820a:	e7f3      	b.n	80081f4 <__match+0x10>

0800820c <__hexnan>:
 800820c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008210:	680b      	ldr	r3, [r1, #0]
 8008212:	115e      	asrs	r6, r3, #5
 8008214:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008218:	f013 031f 	ands.w	r3, r3, #31
 800821c:	b087      	sub	sp, #28
 800821e:	bf18      	it	ne
 8008220:	3604      	addne	r6, #4
 8008222:	2500      	movs	r5, #0
 8008224:	1f37      	subs	r7, r6, #4
 8008226:	4690      	mov	r8, r2
 8008228:	6802      	ldr	r2, [r0, #0]
 800822a:	9301      	str	r3, [sp, #4]
 800822c:	4682      	mov	sl, r0
 800822e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008232:	46b9      	mov	r9, r7
 8008234:	463c      	mov	r4, r7
 8008236:	9502      	str	r5, [sp, #8]
 8008238:	46ab      	mov	fp, r5
 800823a:	7851      	ldrb	r1, [r2, #1]
 800823c:	1c53      	adds	r3, r2, #1
 800823e:	9303      	str	r3, [sp, #12]
 8008240:	b341      	cbz	r1, 8008294 <__hexnan+0x88>
 8008242:	4608      	mov	r0, r1
 8008244:	9205      	str	r2, [sp, #20]
 8008246:	9104      	str	r1, [sp, #16]
 8008248:	f7ff fd5e 	bl	8007d08 <__hexdig_fun>
 800824c:	2800      	cmp	r0, #0
 800824e:	d14f      	bne.n	80082f0 <__hexnan+0xe4>
 8008250:	9904      	ldr	r1, [sp, #16]
 8008252:	9a05      	ldr	r2, [sp, #20]
 8008254:	2920      	cmp	r1, #32
 8008256:	d818      	bhi.n	800828a <__hexnan+0x7e>
 8008258:	9b02      	ldr	r3, [sp, #8]
 800825a:	459b      	cmp	fp, r3
 800825c:	dd13      	ble.n	8008286 <__hexnan+0x7a>
 800825e:	454c      	cmp	r4, r9
 8008260:	d206      	bcs.n	8008270 <__hexnan+0x64>
 8008262:	2d07      	cmp	r5, #7
 8008264:	dc04      	bgt.n	8008270 <__hexnan+0x64>
 8008266:	462a      	mov	r2, r5
 8008268:	4649      	mov	r1, r9
 800826a:	4620      	mov	r0, r4
 800826c:	f7ff ffa8 	bl	80081c0 <L_shift>
 8008270:	4544      	cmp	r4, r8
 8008272:	d950      	bls.n	8008316 <__hexnan+0x10a>
 8008274:	2300      	movs	r3, #0
 8008276:	f1a4 0904 	sub.w	r9, r4, #4
 800827a:	f844 3c04 	str.w	r3, [r4, #-4]
 800827e:	f8cd b008 	str.w	fp, [sp, #8]
 8008282:	464c      	mov	r4, r9
 8008284:	461d      	mov	r5, r3
 8008286:	9a03      	ldr	r2, [sp, #12]
 8008288:	e7d7      	b.n	800823a <__hexnan+0x2e>
 800828a:	2929      	cmp	r1, #41	; 0x29
 800828c:	d156      	bne.n	800833c <__hexnan+0x130>
 800828e:	3202      	adds	r2, #2
 8008290:	f8ca 2000 	str.w	r2, [sl]
 8008294:	f1bb 0f00 	cmp.w	fp, #0
 8008298:	d050      	beq.n	800833c <__hexnan+0x130>
 800829a:	454c      	cmp	r4, r9
 800829c:	d206      	bcs.n	80082ac <__hexnan+0xa0>
 800829e:	2d07      	cmp	r5, #7
 80082a0:	dc04      	bgt.n	80082ac <__hexnan+0xa0>
 80082a2:	462a      	mov	r2, r5
 80082a4:	4649      	mov	r1, r9
 80082a6:	4620      	mov	r0, r4
 80082a8:	f7ff ff8a 	bl	80081c0 <L_shift>
 80082ac:	4544      	cmp	r4, r8
 80082ae:	d934      	bls.n	800831a <__hexnan+0x10e>
 80082b0:	f1a8 0204 	sub.w	r2, r8, #4
 80082b4:	4623      	mov	r3, r4
 80082b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80082ba:	f842 1f04 	str.w	r1, [r2, #4]!
 80082be:	429f      	cmp	r7, r3
 80082c0:	d2f9      	bcs.n	80082b6 <__hexnan+0xaa>
 80082c2:	1b3b      	subs	r3, r7, r4
 80082c4:	f023 0303 	bic.w	r3, r3, #3
 80082c8:	3304      	adds	r3, #4
 80082ca:	3401      	adds	r4, #1
 80082cc:	3e03      	subs	r6, #3
 80082ce:	42b4      	cmp	r4, r6
 80082d0:	bf88      	it	hi
 80082d2:	2304      	movhi	r3, #4
 80082d4:	4443      	add	r3, r8
 80082d6:	2200      	movs	r2, #0
 80082d8:	f843 2b04 	str.w	r2, [r3], #4
 80082dc:	429f      	cmp	r7, r3
 80082de:	d2fb      	bcs.n	80082d8 <__hexnan+0xcc>
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	b91b      	cbnz	r3, 80082ec <__hexnan+0xe0>
 80082e4:	4547      	cmp	r7, r8
 80082e6:	d127      	bne.n	8008338 <__hexnan+0x12c>
 80082e8:	2301      	movs	r3, #1
 80082ea:	603b      	str	r3, [r7, #0]
 80082ec:	2005      	movs	r0, #5
 80082ee:	e026      	b.n	800833e <__hexnan+0x132>
 80082f0:	3501      	adds	r5, #1
 80082f2:	2d08      	cmp	r5, #8
 80082f4:	f10b 0b01 	add.w	fp, fp, #1
 80082f8:	dd06      	ble.n	8008308 <__hexnan+0xfc>
 80082fa:	4544      	cmp	r4, r8
 80082fc:	d9c3      	bls.n	8008286 <__hexnan+0x7a>
 80082fe:	2300      	movs	r3, #0
 8008300:	f844 3c04 	str.w	r3, [r4, #-4]
 8008304:	2501      	movs	r5, #1
 8008306:	3c04      	subs	r4, #4
 8008308:	6822      	ldr	r2, [r4, #0]
 800830a:	f000 000f 	and.w	r0, r0, #15
 800830e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008312:	6022      	str	r2, [r4, #0]
 8008314:	e7b7      	b.n	8008286 <__hexnan+0x7a>
 8008316:	2508      	movs	r5, #8
 8008318:	e7b5      	b.n	8008286 <__hexnan+0x7a>
 800831a:	9b01      	ldr	r3, [sp, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d0df      	beq.n	80082e0 <__hexnan+0xd4>
 8008320:	f04f 32ff 	mov.w	r2, #4294967295
 8008324:	f1c3 0320 	rsb	r3, r3, #32
 8008328:	fa22 f303 	lsr.w	r3, r2, r3
 800832c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008330:	401a      	ands	r2, r3
 8008332:	f846 2c04 	str.w	r2, [r6, #-4]
 8008336:	e7d3      	b.n	80082e0 <__hexnan+0xd4>
 8008338:	3f04      	subs	r7, #4
 800833a:	e7d1      	b.n	80082e0 <__hexnan+0xd4>
 800833c:	2004      	movs	r0, #4
 800833e:	b007      	add	sp, #28
 8008340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008344 <_localeconv_r>:
 8008344:	4800      	ldr	r0, [pc, #0]	; (8008348 <_localeconv_r+0x4>)
 8008346:	4770      	bx	lr
 8008348:	20000168 	.word	0x20000168

0800834c <_lseek_r>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	4d07      	ldr	r5, [pc, #28]	; (800836c <_lseek_r+0x20>)
 8008350:	4604      	mov	r4, r0
 8008352:	4608      	mov	r0, r1
 8008354:	4611      	mov	r1, r2
 8008356:	2200      	movs	r2, #0
 8008358:	602a      	str	r2, [r5, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	f7fa fb41 	bl	80029e2 <_lseek>
 8008360:	1c43      	adds	r3, r0, #1
 8008362:	d102      	bne.n	800836a <_lseek_r+0x1e>
 8008364:	682b      	ldr	r3, [r5, #0]
 8008366:	b103      	cbz	r3, 800836a <_lseek_r+0x1e>
 8008368:	6023      	str	r3, [r4, #0]
 800836a:	bd38      	pop	{r3, r4, r5, pc}
 800836c:	20000d08 	.word	0x20000d08

08008370 <malloc>:
 8008370:	4b02      	ldr	r3, [pc, #8]	; (800837c <malloc+0xc>)
 8008372:	4601      	mov	r1, r0
 8008374:	6818      	ldr	r0, [r3, #0]
 8008376:	f000 bd67 	b.w	8008e48 <_malloc_r>
 800837a:	bf00      	nop
 800837c:	20000010 	.word	0x20000010

08008380 <__ascii_mbtowc>:
 8008380:	b082      	sub	sp, #8
 8008382:	b901      	cbnz	r1, 8008386 <__ascii_mbtowc+0x6>
 8008384:	a901      	add	r1, sp, #4
 8008386:	b142      	cbz	r2, 800839a <__ascii_mbtowc+0x1a>
 8008388:	b14b      	cbz	r3, 800839e <__ascii_mbtowc+0x1e>
 800838a:	7813      	ldrb	r3, [r2, #0]
 800838c:	600b      	str	r3, [r1, #0]
 800838e:	7812      	ldrb	r2, [r2, #0]
 8008390:	1e10      	subs	r0, r2, #0
 8008392:	bf18      	it	ne
 8008394:	2001      	movne	r0, #1
 8008396:	b002      	add	sp, #8
 8008398:	4770      	bx	lr
 800839a:	4610      	mov	r0, r2
 800839c:	e7fb      	b.n	8008396 <__ascii_mbtowc+0x16>
 800839e:	f06f 0001 	mvn.w	r0, #1
 80083a2:	e7f8      	b.n	8008396 <__ascii_mbtowc+0x16>

080083a4 <memcpy>:
 80083a4:	440a      	add	r2, r1
 80083a6:	4291      	cmp	r1, r2
 80083a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80083ac:	d100      	bne.n	80083b0 <memcpy+0xc>
 80083ae:	4770      	bx	lr
 80083b0:	b510      	push	{r4, lr}
 80083b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083ba:	4291      	cmp	r1, r2
 80083bc:	d1f9      	bne.n	80083b2 <memcpy+0xe>
 80083be:	bd10      	pop	{r4, pc}

080083c0 <_Balloc>:
 80083c0:	b570      	push	{r4, r5, r6, lr}
 80083c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80083c4:	4604      	mov	r4, r0
 80083c6:	460d      	mov	r5, r1
 80083c8:	b976      	cbnz	r6, 80083e8 <_Balloc+0x28>
 80083ca:	2010      	movs	r0, #16
 80083cc:	f7ff ffd0 	bl	8008370 <malloc>
 80083d0:	4602      	mov	r2, r0
 80083d2:	6260      	str	r0, [r4, #36]	; 0x24
 80083d4:	b920      	cbnz	r0, 80083e0 <_Balloc+0x20>
 80083d6:	4b18      	ldr	r3, [pc, #96]	; (8008438 <_Balloc+0x78>)
 80083d8:	4818      	ldr	r0, [pc, #96]	; (800843c <_Balloc+0x7c>)
 80083da:	2166      	movs	r1, #102	; 0x66
 80083dc:	f001 fb5c 	bl	8009a98 <__assert_func>
 80083e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083e4:	6006      	str	r6, [r0, #0]
 80083e6:	60c6      	str	r6, [r0, #12]
 80083e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80083ea:	68f3      	ldr	r3, [r6, #12]
 80083ec:	b183      	cbz	r3, 8008410 <_Balloc+0x50>
 80083ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083f6:	b9b8      	cbnz	r0, 8008428 <_Balloc+0x68>
 80083f8:	2101      	movs	r1, #1
 80083fa:	fa01 f605 	lsl.w	r6, r1, r5
 80083fe:	1d72      	adds	r2, r6, #5
 8008400:	0092      	lsls	r2, r2, #2
 8008402:	4620      	mov	r0, r4
 8008404:	f000 fc9d 	bl	8008d42 <_calloc_r>
 8008408:	b160      	cbz	r0, 8008424 <_Balloc+0x64>
 800840a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800840e:	e00e      	b.n	800842e <_Balloc+0x6e>
 8008410:	2221      	movs	r2, #33	; 0x21
 8008412:	2104      	movs	r1, #4
 8008414:	4620      	mov	r0, r4
 8008416:	f000 fc94 	bl	8008d42 <_calloc_r>
 800841a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800841c:	60f0      	str	r0, [r6, #12]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1e4      	bne.n	80083ee <_Balloc+0x2e>
 8008424:	2000      	movs	r0, #0
 8008426:	bd70      	pop	{r4, r5, r6, pc}
 8008428:	6802      	ldr	r2, [r0, #0]
 800842a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800842e:	2300      	movs	r3, #0
 8008430:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008434:	e7f7      	b.n	8008426 <_Balloc+0x66>
 8008436:	bf00      	nop
 8008438:	0800c066 	.word	0x0800c066
 800843c:	0800c164 	.word	0x0800c164

08008440 <_Bfree>:
 8008440:	b570      	push	{r4, r5, r6, lr}
 8008442:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008444:	4605      	mov	r5, r0
 8008446:	460c      	mov	r4, r1
 8008448:	b976      	cbnz	r6, 8008468 <_Bfree+0x28>
 800844a:	2010      	movs	r0, #16
 800844c:	f7ff ff90 	bl	8008370 <malloc>
 8008450:	4602      	mov	r2, r0
 8008452:	6268      	str	r0, [r5, #36]	; 0x24
 8008454:	b920      	cbnz	r0, 8008460 <_Bfree+0x20>
 8008456:	4b09      	ldr	r3, [pc, #36]	; (800847c <_Bfree+0x3c>)
 8008458:	4809      	ldr	r0, [pc, #36]	; (8008480 <_Bfree+0x40>)
 800845a:	218a      	movs	r1, #138	; 0x8a
 800845c:	f001 fb1c 	bl	8009a98 <__assert_func>
 8008460:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008464:	6006      	str	r6, [r0, #0]
 8008466:	60c6      	str	r6, [r0, #12]
 8008468:	b13c      	cbz	r4, 800847a <_Bfree+0x3a>
 800846a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800846c:	6862      	ldr	r2, [r4, #4]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008474:	6021      	str	r1, [r4, #0]
 8008476:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800847a:	bd70      	pop	{r4, r5, r6, pc}
 800847c:	0800c066 	.word	0x0800c066
 8008480:	0800c164 	.word	0x0800c164

08008484 <__multadd>:
 8008484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008488:	690d      	ldr	r5, [r1, #16]
 800848a:	4607      	mov	r7, r0
 800848c:	460c      	mov	r4, r1
 800848e:	461e      	mov	r6, r3
 8008490:	f101 0c14 	add.w	ip, r1, #20
 8008494:	2000      	movs	r0, #0
 8008496:	f8dc 3000 	ldr.w	r3, [ip]
 800849a:	b299      	uxth	r1, r3
 800849c:	fb02 6101 	mla	r1, r2, r1, r6
 80084a0:	0c1e      	lsrs	r6, r3, #16
 80084a2:	0c0b      	lsrs	r3, r1, #16
 80084a4:	fb02 3306 	mla	r3, r2, r6, r3
 80084a8:	b289      	uxth	r1, r1
 80084aa:	3001      	adds	r0, #1
 80084ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80084b0:	4285      	cmp	r5, r0
 80084b2:	f84c 1b04 	str.w	r1, [ip], #4
 80084b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80084ba:	dcec      	bgt.n	8008496 <__multadd+0x12>
 80084bc:	b30e      	cbz	r6, 8008502 <__multadd+0x7e>
 80084be:	68a3      	ldr	r3, [r4, #8]
 80084c0:	42ab      	cmp	r3, r5
 80084c2:	dc19      	bgt.n	80084f8 <__multadd+0x74>
 80084c4:	6861      	ldr	r1, [r4, #4]
 80084c6:	4638      	mov	r0, r7
 80084c8:	3101      	adds	r1, #1
 80084ca:	f7ff ff79 	bl	80083c0 <_Balloc>
 80084ce:	4680      	mov	r8, r0
 80084d0:	b928      	cbnz	r0, 80084de <__multadd+0x5a>
 80084d2:	4602      	mov	r2, r0
 80084d4:	4b0c      	ldr	r3, [pc, #48]	; (8008508 <__multadd+0x84>)
 80084d6:	480d      	ldr	r0, [pc, #52]	; (800850c <__multadd+0x88>)
 80084d8:	21b5      	movs	r1, #181	; 0xb5
 80084da:	f001 fadd 	bl	8009a98 <__assert_func>
 80084de:	6922      	ldr	r2, [r4, #16]
 80084e0:	3202      	adds	r2, #2
 80084e2:	f104 010c 	add.w	r1, r4, #12
 80084e6:	0092      	lsls	r2, r2, #2
 80084e8:	300c      	adds	r0, #12
 80084ea:	f7ff ff5b 	bl	80083a4 <memcpy>
 80084ee:	4621      	mov	r1, r4
 80084f0:	4638      	mov	r0, r7
 80084f2:	f7ff ffa5 	bl	8008440 <_Bfree>
 80084f6:	4644      	mov	r4, r8
 80084f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084fc:	3501      	adds	r5, #1
 80084fe:	615e      	str	r6, [r3, #20]
 8008500:	6125      	str	r5, [r4, #16]
 8008502:	4620      	mov	r0, r4
 8008504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008508:	0800c0d8 	.word	0x0800c0d8
 800850c:	0800c164 	.word	0x0800c164

08008510 <__s2b>:
 8008510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008514:	460c      	mov	r4, r1
 8008516:	4615      	mov	r5, r2
 8008518:	461f      	mov	r7, r3
 800851a:	2209      	movs	r2, #9
 800851c:	3308      	adds	r3, #8
 800851e:	4606      	mov	r6, r0
 8008520:	fb93 f3f2 	sdiv	r3, r3, r2
 8008524:	2100      	movs	r1, #0
 8008526:	2201      	movs	r2, #1
 8008528:	429a      	cmp	r2, r3
 800852a:	db09      	blt.n	8008540 <__s2b+0x30>
 800852c:	4630      	mov	r0, r6
 800852e:	f7ff ff47 	bl	80083c0 <_Balloc>
 8008532:	b940      	cbnz	r0, 8008546 <__s2b+0x36>
 8008534:	4602      	mov	r2, r0
 8008536:	4b19      	ldr	r3, [pc, #100]	; (800859c <__s2b+0x8c>)
 8008538:	4819      	ldr	r0, [pc, #100]	; (80085a0 <__s2b+0x90>)
 800853a:	21ce      	movs	r1, #206	; 0xce
 800853c:	f001 faac 	bl	8009a98 <__assert_func>
 8008540:	0052      	lsls	r2, r2, #1
 8008542:	3101      	adds	r1, #1
 8008544:	e7f0      	b.n	8008528 <__s2b+0x18>
 8008546:	9b08      	ldr	r3, [sp, #32]
 8008548:	6143      	str	r3, [r0, #20]
 800854a:	2d09      	cmp	r5, #9
 800854c:	f04f 0301 	mov.w	r3, #1
 8008550:	6103      	str	r3, [r0, #16]
 8008552:	dd16      	ble.n	8008582 <__s2b+0x72>
 8008554:	f104 0909 	add.w	r9, r4, #9
 8008558:	46c8      	mov	r8, r9
 800855a:	442c      	add	r4, r5
 800855c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008560:	4601      	mov	r1, r0
 8008562:	3b30      	subs	r3, #48	; 0x30
 8008564:	220a      	movs	r2, #10
 8008566:	4630      	mov	r0, r6
 8008568:	f7ff ff8c 	bl	8008484 <__multadd>
 800856c:	45a0      	cmp	r8, r4
 800856e:	d1f5      	bne.n	800855c <__s2b+0x4c>
 8008570:	f1a5 0408 	sub.w	r4, r5, #8
 8008574:	444c      	add	r4, r9
 8008576:	1b2d      	subs	r5, r5, r4
 8008578:	1963      	adds	r3, r4, r5
 800857a:	42bb      	cmp	r3, r7
 800857c:	db04      	blt.n	8008588 <__s2b+0x78>
 800857e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008582:	340a      	adds	r4, #10
 8008584:	2509      	movs	r5, #9
 8008586:	e7f6      	b.n	8008576 <__s2b+0x66>
 8008588:	f814 3b01 	ldrb.w	r3, [r4], #1
 800858c:	4601      	mov	r1, r0
 800858e:	3b30      	subs	r3, #48	; 0x30
 8008590:	220a      	movs	r2, #10
 8008592:	4630      	mov	r0, r6
 8008594:	f7ff ff76 	bl	8008484 <__multadd>
 8008598:	e7ee      	b.n	8008578 <__s2b+0x68>
 800859a:	bf00      	nop
 800859c:	0800c0d8 	.word	0x0800c0d8
 80085a0:	0800c164 	.word	0x0800c164

080085a4 <__hi0bits>:
 80085a4:	0c03      	lsrs	r3, r0, #16
 80085a6:	041b      	lsls	r3, r3, #16
 80085a8:	b9d3      	cbnz	r3, 80085e0 <__hi0bits+0x3c>
 80085aa:	0400      	lsls	r0, r0, #16
 80085ac:	2310      	movs	r3, #16
 80085ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80085b2:	bf04      	itt	eq
 80085b4:	0200      	lsleq	r0, r0, #8
 80085b6:	3308      	addeq	r3, #8
 80085b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80085bc:	bf04      	itt	eq
 80085be:	0100      	lsleq	r0, r0, #4
 80085c0:	3304      	addeq	r3, #4
 80085c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80085c6:	bf04      	itt	eq
 80085c8:	0080      	lsleq	r0, r0, #2
 80085ca:	3302      	addeq	r3, #2
 80085cc:	2800      	cmp	r0, #0
 80085ce:	db05      	blt.n	80085dc <__hi0bits+0x38>
 80085d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80085d4:	f103 0301 	add.w	r3, r3, #1
 80085d8:	bf08      	it	eq
 80085da:	2320      	moveq	r3, #32
 80085dc:	4618      	mov	r0, r3
 80085de:	4770      	bx	lr
 80085e0:	2300      	movs	r3, #0
 80085e2:	e7e4      	b.n	80085ae <__hi0bits+0xa>

080085e4 <__lo0bits>:
 80085e4:	6803      	ldr	r3, [r0, #0]
 80085e6:	f013 0207 	ands.w	r2, r3, #7
 80085ea:	4601      	mov	r1, r0
 80085ec:	d00b      	beq.n	8008606 <__lo0bits+0x22>
 80085ee:	07da      	lsls	r2, r3, #31
 80085f0:	d423      	bmi.n	800863a <__lo0bits+0x56>
 80085f2:	0798      	lsls	r0, r3, #30
 80085f4:	bf49      	itett	mi
 80085f6:	085b      	lsrmi	r3, r3, #1
 80085f8:	089b      	lsrpl	r3, r3, #2
 80085fa:	2001      	movmi	r0, #1
 80085fc:	600b      	strmi	r3, [r1, #0]
 80085fe:	bf5c      	itt	pl
 8008600:	600b      	strpl	r3, [r1, #0]
 8008602:	2002      	movpl	r0, #2
 8008604:	4770      	bx	lr
 8008606:	b298      	uxth	r0, r3
 8008608:	b9a8      	cbnz	r0, 8008636 <__lo0bits+0x52>
 800860a:	0c1b      	lsrs	r3, r3, #16
 800860c:	2010      	movs	r0, #16
 800860e:	b2da      	uxtb	r2, r3
 8008610:	b90a      	cbnz	r2, 8008616 <__lo0bits+0x32>
 8008612:	3008      	adds	r0, #8
 8008614:	0a1b      	lsrs	r3, r3, #8
 8008616:	071a      	lsls	r2, r3, #28
 8008618:	bf04      	itt	eq
 800861a:	091b      	lsreq	r3, r3, #4
 800861c:	3004      	addeq	r0, #4
 800861e:	079a      	lsls	r2, r3, #30
 8008620:	bf04      	itt	eq
 8008622:	089b      	lsreq	r3, r3, #2
 8008624:	3002      	addeq	r0, #2
 8008626:	07da      	lsls	r2, r3, #31
 8008628:	d403      	bmi.n	8008632 <__lo0bits+0x4e>
 800862a:	085b      	lsrs	r3, r3, #1
 800862c:	f100 0001 	add.w	r0, r0, #1
 8008630:	d005      	beq.n	800863e <__lo0bits+0x5a>
 8008632:	600b      	str	r3, [r1, #0]
 8008634:	4770      	bx	lr
 8008636:	4610      	mov	r0, r2
 8008638:	e7e9      	b.n	800860e <__lo0bits+0x2a>
 800863a:	2000      	movs	r0, #0
 800863c:	4770      	bx	lr
 800863e:	2020      	movs	r0, #32
 8008640:	4770      	bx	lr
	...

08008644 <__i2b>:
 8008644:	b510      	push	{r4, lr}
 8008646:	460c      	mov	r4, r1
 8008648:	2101      	movs	r1, #1
 800864a:	f7ff feb9 	bl	80083c0 <_Balloc>
 800864e:	4602      	mov	r2, r0
 8008650:	b928      	cbnz	r0, 800865e <__i2b+0x1a>
 8008652:	4b05      	ldr	r3, [pc, #20]	; (8008668 <__i2b+0x24>)
 8008654:	4805      	ldr	r0, [pc, #20]	; (800866c <__i2b+0x28>)
 8008656:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800865a:	f001 fa1d 	bl	8009a98 <__assert_func>
 800865e:	2301      	movs	r3, #1
 8008660:	6144      	str	r4, [r0, #20]
 8008662:	6103      	str	r3, [r0, #16]
 8008664:	bd10      	pop	{r4, pc}
 8008666:	bf00      	nop
 8008668:	0800c0d8 	.word	0x0800c0d8
 800866c:	0800c164 	.word	0x0800c164

08008670 <__multiply>:
 8008670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008674:	4691      	mov	r9, r2
 8008676:	690a      	ldr	r2, [r1, #16]
 8008678:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800867c:	429a      	cmp	r2, r3
 800867e:	bfb8      	it	lt
 8008680:	460b      	movlt	r3, r1
 8008682:	460c      	mov	r4, r1
 8008684:	bfbc      	itt	lt
 8008686:	464c      	movlt	r4, r9
 8008688:	4699      	movlt	r9, r3
 800868a:	6927      	ldr	r7, [r4, #16]
 800868c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008690:	68a3      	ldr	r3, [r4, #8]
 8008692:	6861      	ldr	r1, [r4, #4]
 8008694:	eb07 060a 	add.w	r6, r7, sl
 8008698:	42b3      	cmp	r3, r6
 800869a:	b085      	sub	sp, #20
 800869c:	bfb8      	it	lt
 800869e:	3101      	addlt	r1, #1
 80086a0:	f7ff fe8e 	bl	80083c0 <_Balloc>
 80086a4:	b930      	cbnz	r0, 80086b4 <__multiply+0x44>
 80086a6:	4602      	mov	r2, r0
 80086a8:	4b44      	ldr	r3, [pc, #272]	; (80087bc <__multiply+0x14c>)
 80086aa:	4845      	ldr	r0, [pc, #276]	; (80087c0 <__multiply+0x150>)
 80086ac:	f240 115d 	movw	r1, #349	; 0x15d
 80086b0:	f001 f9f2 	bl	8009a98 <__assert_func>
 80086b4:	f100 0514 	add.w	r5, r0, #20
 80086b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086bc:	462b      	mov	r3, r5
 80086be:	2200      	movs	r2, #0
 80086c0:	4543      	cmp	r3, r8
 80086c2:	d321      	bcc.n	8008708 <__multiply+0x98>
 80086c4:	f104 0314 	add.w	r3, r4, #20
 80086c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80086cc:	f109 0314 	add.w	r3, r9, #20
 80086d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80086d4:	9202      	str	r2, [sp, #8]
 80086d6:	1b3a      	subs	r2, r7, r4
 80086d8:	3a15      	subs	r2, #21
 80086da:	f022 0203 	bic.w	r2, r2, #3
 80086de:	3204      	adds	r2, #4
 80086e0:	f104 0115 	add.w	r1, r4, #21
 80086e4:	428f      	cmp	r7, r1
 80086e6:	bf38      	it	cc
 80086e8:	2204      	movcc	r2, #4
 80086ea:	9201      	str	r2, [sp, #4]
 80086ec:	9a02      	ldr	r2, [sp, #8]
 80086ee:	9303      	str	r3, [sp, #12]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d80c      	bhi.n	800870e <__multiply+0x9e>
 80086f4:	2e00      	cmp	r6, #0
 80086f6:	dd03      	ble.n	8008700 <__multiply+0x90>
 80086f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d05a      	beq.n	80087b6 <__multiply+0x146>
 8008700:	6106      	str	r6, [r0, #16]
 8008702:	b005      	add	sp, #20
 8008704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008708:	f843 2b04 	str.w	r2, [r3], #4
 800870c:	e7d8      	b.n	80086c0 <__multiply+0x50>
 800870e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008712:	f1ba 0f00 	cmp.w	sl, #0
 8008716:	d024      	beq.n	8008762 <__multiply+0xf2>
 8008718:	f104 0e14 	add.w	lr, r4, #20
 800871c:	46a9      	mov	r9, r5
 800871e:	f04f 0c00 	mov.w	ip, #0
 8008722:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008726:	f8d9 1000 	ldr.w	r1, [r9]
 800872a:	fa1f fb82 	uxth.w	fp, r2
 800872e:	b289      	uxth	r1, r1
 8008730:	fb0a 110b 	mla	r1, sl, fp, r1
 8008734:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008738:	f8d9 2000 	ldr.w	r2, [r9]
 800873c:	4461      	add	r1, ip
 800873e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008742:	fb0a c20b 	mla	r2, sl, fp, ip
 8008746:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800874a:	b289      	uxth	r1, r1
 800874c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008750:	4577      	cmp	r7, lr
 8008752:	f849 1b04 	str.w	r1, [r9], #4
 8008756:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800875a:	d8e2      	bhi.n	8008722 <__multiply+0xb2>
 800875c:	9a01      	ldr	r2, [sp, #4]
 800875e:	f845 c002 	str.w	ip, [r5, r2]
 8008762:	9a03      	ldr	r2, [sp, #12]
 8008764:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008768:	3304      	adds	r3, #4
 800876a:	f1b9 0f00 	cmp.w	r9, #0
 800876e:	d020      	beq.n	80087b2 <__multiply+0x142>
 8008770:	6829      	ldr	r1, [r5, #0]
 8008772:	f104 0c14 	add.w	ip, r4, #20
 8008776:	46ae      	mov	lr, r5
 8008778:	f04f 0a00 	mov.w	sl, #0
 800877c:	f8bc b000 	ldrh.w	fp, [ip]
 8008780:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008784:	fb09 220b 	mla	r2, r9, fp, r2
 8008788:	4492      	add	sl, r2
 800878a:	b289      	uxth	r1, r1
 800878c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008790:	f84e 1b04 	str.w	r1, [lr], #4
 8008794:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008798:	f8be 1000 	ldrh.w	r1, [lr]
 800879c:	0c12      	lsrs	r2, r2, #16
 800879e:	fb09 1102 	mla	r1, r9, r2, r1
 80087a2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80087a6:	4567      	cmp	r7, ip
 80087a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80087ac:	d8e6      	bhi.n	800877c <__multiply+0x10c>
 80087ae:	9a01      	ldr	r2, [sp, #4]
 80087b0:	50a9      	str	r1, [r5, r2]
 80087b2:	3504      	adds	r5, #4
 80087b4:	e79a      	b.n	80086ec <__multiply+0x7c>
 80087b6:	3e01      	subs	r6, #1
 80087b8:	e79c      	b.n	80086f4 <__multiply+0x84>
 80087ba:	bf00      	nop
 80087bc:	0800c0d8 	.word	0x0800c0d8
 80087c0:	0800c164 	.word	0x0800c164

080087c4 <__pow5mult>:
 80087c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087c8:	4615      	mov	r5, r2
 80087ca:	f012 0203 	ands.w	r2, r2, #3
 80087ce:	4606      	mov	r6, r0
 80087d0:	460f      	mov	r7, r1
 80087d2:	d007      	beq.n	80087e4 <__pow5mult+0x20>
 80087d4:	4c25      	ldr	r4, [pc, #148]	; (800886c <__pow5mult+0xa8>)
 80087d6:	3a01      	subs	r2, #1
 80087d8:	2300      	movs	r3, #0
 80087da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087de:	f7ff fe51 	bl	8008484 <__multadd>
 80087e2:	4607      	mov	r7, r0
 80087e4:	10ad      	asrs	r5, r5, #2
 80087e6:	d03d      	beq.n	8008864 <__pow5mult+0xa0>
 80087e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80087ea:	b97c      	cbnz	r4, 800880c <__pow5mult+0x48>
 80087ec:	2010      	movs	r0, #16
 80087ee:	f7ff fdbf 	bl	8008370 <malloc>
 80087f2:	4602      	mov	r2, r0
 80087f4:	6270      	str	r0, [r6, #36]	; 0x24
 80087f6:	b928      	cbnz	r0, 8008804 <__pow5mult+0x40>
 80087f8:	4b1d      	ldr	r3, [pc, #116]	; (8008870 <__pow5mult+0xac>)
 80087fa:	481e      	ldr	r0, [pc, #120]	; (8008874 <__pow5mult+0xb0>)
 80087fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008800:	f001 f94a 	bl	8009a98 <__assert_func>
 8008804:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008808:	6004      	str	r4, [r0, #0]
 800880a:	60c4      	str	r4, [r0, #12]
 800880c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008810:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008814:	b94c      	cbnz	r4, 800882a <__pow5mult+0x66>
 8008816:	f240 2171 	movw	r1, #625	; 0x271
 800881a:	4630      	mov	r0, r6
 800881c:	f7ff ff12 	bl	8008644 <__i2b>
 8008820:	2300      	movs	r3, #0
 8008822:	f8c8 0008 	str.w	r0, [r8, #8]
 8008826:	4604      	mov	r4, r0
 8008828:	6003      	str	r3, [r0, #0]
 800882a:	f04f 0900 	mov.w	r9, #0
 800882e:	07eb      	lsls	r3, r5, #31
 8008830:	d50a      	bpl.n	8008848 <__pow5mult+0x84>
 8008832:	4639      	mov	r1, r7
 8008834:	4622      	mov	r2, r4
 8008836:	4630      	mov	r0, r6
 8008838:	f7ff ff1a 	bl	8008670 <__multiply>
 800883c:	4639      	mov	r1, r7
 800883e:	4680      	mov	r8, r0
 8008840:	4630      	mov	r0, r6
 8008842:	f7ff fdfd 	bl	8008440 <_Bfree>
 8008846:	4647      	mov	r7, r8
 8008848:	106d      	asrs	r5, r5, #1
 800884a:	d00b      	beq.n	8008864 <__pow5mult+0xa0>
 800884c:	6820      	ldr	r0, [r4, #0]
 800884e:	b938      	cbnz	r0, 8008860 <__pow5mult+0x9c>
 8008850:	4622      	mov	r2, r4
 8008852:	4621      	mov	r1, r4
 8008854:	4630      	mov	r0, r6
 8008856:	f7ff ff0b 	bl	8008670 <__multiply>
 800885a:	6020      	str	r0, [r4, #0]
 800885c:	f8c0 9000 	str.w	r9, [r0]
 8008860:	4604      	mov	r4, r0
 8008862:	e7e4      	b.n	800882e <__pow5mult+0x6a>
 8008864:	4638      	mov	r0, r7
 8008866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800886a:	bf00      	nop
 800886c:	0800c2b0 	.word	0x0800c2b0
 8008870:	0800c066 	.word	0x0800c066
 8008874:	0800c164 	.word	0x0800c164

08008878 <__lshift>:
 8008878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800887c:	460c      	mov	r4, r1
 800887e:	6849      	ldr	r1, [r1, #4]
 8008880:	6923      	ldr	r3, [r4, #16]
 8008882:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008886:	68a3      	ldr	r3, [r4, #8]
 8008888:	4607      	mov	r7, r0
 800888a:	4691      	mov	r9, r2
 800888c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008890:	f108 0601 	add.w	r6, r8, #1
 8008894:	42b3      	cmp	r3, r6
 8008896:	db0b      	blt.n	80088b0 <__lshift+0x38>
 8008898:	4638      	mov	r0, r7
 800889a:	f7ff fd91 	bl	80083c0 <_Balloc>
 800889e:	4605      	mov	r5, r0
 80088a0:	b948      	cbnz	r0, 80088b6 <__lshift+0x3e>
 80088a2:	4602      	mov	r2, r0
 80088a4:	4b2a      	ldr	r3, [pc, #168]	; (8008950 <__lshift+0xd8>)
 80088a6:	482b      	ldr	r0, [pc, #172]	; (8008954 <__lshift+0xdc>)
 80088a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80088ac:	f001 f8f4 	bl	8009a98 <__assert_func>
 80088b0:	3101      	adds	r1, #1
 80088b2:	005b      	lsls	r3, r3, #1
 80088b4:	e7ee      	b.n	8008894 <__lshift+0x1c>
 80088b6:	2300      	movs	r3, #0
 80088b8:	f100 0114 	add.w	r1, r0, #20
 80088bc:	f100 0210 	add.w	r2, r0, #16
 80088c0:	4618      	mov	r0, r3
 80088c2:	4553      	cmp	r3, sl
 80088c4:	db37      	blt.n	8008936 <__lshift+0xbe>
 80088c6:	6920      	ldr	r0, [r4, #16]
 80088c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088cc:	f104 0314 	add.w	r3, r4, #20
 80088d0:	f019 091f 	ands.w	r9, r9, #31
 80088d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80088dc:	d02f      	beq.n	800893e <__lshift+0xc6>
 80088de:	f1c9 0e20 	rsb	lr, r9, #32
 80088e2:	468a      	mov	sl, r1
 80088e4:	f04f 0c00 	mov.w	ip, #0
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	fa02 f209 	lsl.w	r2, r2, r9
 80088ee:	ea42 020c 	orr.w	r2, r2, ip
 80088f2:	f84a 2b04 	str.w	r2, [sl], #4
 80088f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80088fa:	4298      	cmp	r0, r3
 80088fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008900:	d8f2      	bhi.n	80088e8 <__lshift+0x70>
 8008902:	1b03      	subs	r3, r0, r4
 8008904:	3b15      	subs	r3, #21
 8008906:	f023 0303 	bic.w	r3, r3, #3
 800890a:	3304      	adds	r3, #4
 800890c:	f104 0215 	add.w	r2, r4, #21
 8008910:	4290      	cmp	r0, r2
 8008912:	bf38      	it	cc
 8008914:	2304      	movcc	r3, #4
 8008916:	f841 c003 	str.w	ip, [r1, r3]
 800891a:	f1bc 0f00 	cmp.w	ip, #0
 800891e:	d001      	beq.n	8008924 <__lshift+0xac>
 8008920:	f108 0602 	add.w	r6, r8, #2
 8008924:	3e01      	subs	r6, #1
 8008926:	4638      	mov	r0, r7
 8008928:	612e      	str	r6, [r5, #16]
 800892a:	4621      	mov	r1, r4
 800892c:	f7ff fd88 	bl	8008440 <_Bfree>
 8008930:	4628      	mov	r0, r5
 8008932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008936:	f842 0f04 	str.w	r0, [r2, #4]!
 800893a:	3301      	adds	r3, #1
 800893c:	e7c1      	b.n	80088c2 <__lshift+0x4a>
 800893e:	3904      	subs	r1, #4
 8008940:	f853 2b04 	ldr.w	r2, [r3], #4
 8008944:	f841 2f04 	str.w	r2, [r1, #4]!
 8008948:	4298      	cmp	r0, r3
 800894a:	d8f9      	bhi.n	8008940 <__lshift+0xc8>
 800894c:	e7ea      	b.n	8008924 <__lshift+0xac>
 800894e:	bf00      	nop
 8008950:	0800c0d8 	.word	0x0800c0d8
 8008954:	0800c164 	.word	0x0800c164

08008958 <__mcmp>:
 8008958:	b530      	push	{r4, r5, lr}
 800895a:	6902      	ldr	r2, [r0, #16]
 800895c:	690c      	ldr	r4, [r1, #16]
 800895e:	1b12      	subs	r2, r2, r4
 8008960:	d10e      	bne.n	8008980 <__mcmp+0x28>
 8008962:	f100 0314 	add.w	r3, r0, #20
 8008966:	3114      	adds	r1, #20
 8008968:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800896c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008970:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008974:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008978:	42a5      	cmp	r5, r4
 800897a:	d003      	beq.n	8008984 <__mcmp+0x2c>
 800897c:	d305      	bcc.n	800898a <__mcmp+0x32>
 800897e:	2201      	movs	r2, #1
 8008980:	4610      	mov	r0, r2
 8008982:	bd30      	pop	{r4, r5, pc}
 8008984:	4283      	cmp	r3, r0
 8008986:	d3f3      	bcc.n	8008970 <__mcmp+0x18>
 8008988:	e7fa      	b.n	8008980 <__mcmp+0x28>
 800898a:	f04f 32ff 	mov.w	r2, #4294967295
 800898e:	e7f7      	b.n	8008980 <__mcmp+0x28>

08008990 <__mdiff>:
 8008990:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008994:	460c      	mov	r4, r1
 8008996:	4606      	mov	r6, r0
 8008998:	4611      	mov	r1, r2
 800899a:	4620      	mov	r0, r4
 800899c:	4690      	mov	r8, r2
 800899e:	f7ff ffdb 	bl	8008958 <__mcmp>
 80089a2:	1e05      	subs	r5, r0, #0
 80089a4:	d110      	bne.n	80089c8 <__mdiff+0x38>
 80089a6:	4629      	mov	r1, r5
 80089a8:	4630      	mov	r0, r6
 80089aa:	f7ff fd09 	bl	80083c0 <_Balloc>
 80089ae:	b930      	cbnz	r0, 80089be <__mdiff+0x2e>
 80089b0:	4b3a      	ldr	r3, [pc, #232]	; (8008a9c <__mdiff+0x10c>)
 80089b2:	4602      	mov	r2, r0
 80089b4:	f240 2132 	movw	r1, #562	; 0x232
 80089b8:	4839      	ldr	r0, [pc, #228]	; (8008aa0 <__mdiff+0x110>)
 80089ba:	f001 f86d 	bl	8009a98 <__assert_func>
 80089be:	2301      	movs	r3, #1
 80089c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80089c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c8:	bfa4      	itt	ge
 80089ca:	4643      	movge	r3, r8
 80089cc:	46a0      	movge	r8, r4
 80089ce:	4630      	mov	r0, r6
 80089d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80089d4:	bfa6      	itte	ge
 80089d6:	461c      	movge	r4, r3
 80089d8:	2500      	movge	r5, #0
 80089da:	2501      	movlt	r5, #1
 80089dc:	f7ff fcf0 	bl	80083c0 <_Balloc>
 80089e0:	b920      	cbnz	r0, 80089ec <__mdiff+0x5c>
 80089e2:	4b2e      	ldr	r3, [pc, #184]	; (8008a9c <__mdiff+0x10c>)
 80089e4:	4602      	mov	r2, r0
 80089e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80089ea:	e7e5      	b.n	80089b8 <__mdiff+0x28>
 80089ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80089f0:	6926      	ldr	r6, [r4, #16]
 80089f2:	60c5      	str	r5, [r0, #12]
 80089f4:	f104 0914 	add.w	r9, r4, #20
 80089f8:	f108 0514 	add.w	r5, r8, #20
 80089fc:	f100 0e14 	add.w	lr, r0, #20
 8008a00:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008a04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a08:	f108 0210 	add.w	r2, r8, #16
 8008a0c:	46f2      	mov	sl, lr
 8008a0e:	2100      	movs	r1, #0
 8008a10:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a18:	fa1f f883 	uxth.w	r8, r3
 8008a1c:	fa11 f18b 	uxtah	r1, r1, fp
 8008a20:	0c1b      	lsrs	r3, r3, #16
 8008a22:	eba1 0808 	sub.w	r8, r1, r8
 8008a26:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a2a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008a2e:	fa1f f888 	uxth.w	r8, r8
 8008a32:	1419      	asrs	r1, r3, #16
 8008a34:	454e      	cmp	r6, r9
 8008a36:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008a3a:	f84a 3b04 	str.w	r3, [sl], #4
 8008a3e:	d8e7      	bhi.n	8008a10 <__mdiff+0x80>
 8008a40:	1b33      	subs	r3, r6, r4
 8008a42:	3b15      	subs	r3, #21
 8008a44:	f023 0303 	bic.w	r3, r3, #3
 8008a48:	3304      	adds	r3, #4
 8008a4a:	3415      	adds	r4, #21
 8008a4c:	42a6      	cmp	r6, r4
 8008a4e:	bf38      	it	cc
 8008a50:	2304      	movcc	r3, #4
 8008a52:	441d      	add	r5, r3
 8008a54:	4473      	add	r3, lr
 8008a56:	469e      	mov	lr, r3
 8008a58:	462e      	mov	r6, r5
 8008a5a:	4566      	cmp	r6, ip
 8008a5c:	d30e      	bcc.n	8008a7c <__mdiff+0xec>
 8008a5e:	f10c 0203 	add.w	r2, ip, #3
 8008a62:	1b52      	subs	r2, r2, r5
 8008a64:	f022 0203 	bic.w	r2, r2, #3
 8008a68:	3d03      	subs	r5, #3
 8008a6a:	45ac      	cmp	ip, r5
 8008a6c:	bf38      	it	cc
 8008a6e:	2200      	movcc	r2, #0
 8008a70:	441a      	add	r2, r3
 8008a72:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008a76:	b17b      	cbz	r3, 8008a98 <__mdiff+0x108>
 8008a78:	6107      	str	r7, [r0, #16]
 8008a7a:	e7a3      	b.n	80089c4 <__mdiff+0x34>
 8008a7c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008a80:	fa11 f288 	uxtah	r2, r1, r8
 8008a84:	1414      	asrs	r4, r2, #16
 8008a86:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008a8a:	b292      	uxth	r2, r2
 8008a8c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008a90:	f84e 2b04 	str.w	r2, [lr], #4
 8008a94:	1421      	asrs	r1, r4, #16
 8008a96:	e7e0      	b.n	8008a5a <__mdiff+0xca>
 8008a98:	3f01      	subs	r7, #1
 8008a9a:	e7ea      	b.n	8008a72 <__mdiff+0xe2>
 8008a9c:	0800c0d8 	.word	0x0800c0d8
 8008aa0:	0800c164 	.word	0x0800c164

08008aa4 <__ulp>:
 8008aa4:	b082      	sub	sp, #8
 8008aa6:	ed8d 0b00 	vstr	d0, [sp]
 8008aaa:	9b01      	ldr	r3, [sp, #4]
 8008aac:	4912      	ldr	r1, [pc, #72]	; (8008af8 <__ulp+0x54>)
 8008aae:	4019      	ands	r1, r3
 8008ab0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008ab4:	2900      	cmp	r1, #0
 8008ab6:	dd05      	ble.n	8008ac4 <__ulp+0x20>
 8008ab8:	2200      	movs	r2, #0
 8008aba:	460b      	mov	r3, r1
 8008abc:	ec43 2b10 	vmov	d0, r2, r3
 8008ac0:	b002      	add	sp, #8
 8008ac2:	4770      	bx	lr
 8008ac4:	4249      	negs	r1, r1
 8008ac6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008aca:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008ace:	f04f 0200 	mov.w	r2, #0
 8008ad2:	f04f 0300 	mov.w	r3, #0
 8008ad6:	da04      	bge.n	8008ae2 <__ulp+0x3e>
 8008ad8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008adc:	fa41 f300 	asr.w	r3, r1, r0
 8008ae0:	e7ec      	b.n	8008abc <__ulp+0x18>
 8008ae2:	f1a0 0114 	sub.w	r1, r0, #20
 8008ae6:	291e      	cmp	r1, #30
 8008ae8:	bfda      	itte	le
 8008aea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008aee:	fa20 f101 	lsrle.w	r1, r0, r1
 8008af2:	2101      	movgt	r1, #1
 8008af4:	460a      	mov	r2, r1
 8008af6:	e7e1      	b.n	8008abc <__ulp+0x18>
 8008af8:	7ff00000 	.word	0x7ff00000

08008afc <__b2d>:
 8008afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afe:	6905      	ldr	r5, [r0, #16]
 8008b00:	f100 0714 	add.w	r7, r0, #20
 8008b04:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008b08:	1f2e      	subs	r6, r5, #4
 8008b0a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f7ff fd48 	bl	80085a4 <__hi0bits>
 8008b14:	f1c0 0320 	rsb	r3, r0, #32
 8008b18:	280a      	cmp	r0, #10
 8008b1a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008b98 <__b2d+0x9c>
 8008b1e:	600b      	str	r3, [r1, #0]
 8008b20:	dc14      	bgt.n	8008b4c <__b2d+0x50>
 8008b22:	f1c0 0e0b 	rsb	lr, r0, #11
 8008b26:	fa24 f10e 	lsr.w	r1, r4, lr
 8008b2a:	42b7      	cmp	r7, r6
 8008b2c:	ea41 030c 	orr.w	r3, r1, ip
 8008b30:	bf34      	ite	cc
 8008b32:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008b36:	2100      	movcs	r1, #0
 8008b38:	3015      	adds	r0, #21
 8008b3a:	fa04 f000 	lsl.w	r0, r4, r0
 8008b3e:	fa21 f10e 	lsr.w	r1, r1, lr
 8008b42:	ea40 0201 	orr.w	r2, r0, r1
 8008b46:	ec43 2b10 	vmov	d0, r2, r3
 8008b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b4c:	42b7      	cmp	r7, r6
 8008b4e:	bf3a      	itte	cc
 8008b50:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008b54:	f1a5 0608 	subcc.w	r6, r5, #8
 8008b58:	2100      	movcs	r1, #0
 8008b5a:	380b      	subs	r0, #11
 8008b5c:	d017      	beq.n	8008b8e <__b2d+0x92>
 8008b5e:	f1c0 0c20 	rsb	ip, r0, #32
 8008b62:	fa04 f500 	lsl.w	r5, r4, r0
 8008b66:	42be      	cmp	r6, r7
 8008b68:	fa21 f40c 	lsr.w	r4, r1, ip
 8008b6c:	ea45 0504 	orr.w	r5, r5, r4
 8008b70:	bf8c      	ite	hi
 8008b72:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008b76:	2400      	movls	r4, #0
 8008b78:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008b7c:	fa01 f000 	lsl.w	r0, r1, r0
 8008b80:	fa24 f40c 	lsr.w	r4, r4, ip
 8008b84:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008b88:	ea40 0204 	orr.w	r2, r0, r4
 8008b8c:	e7db      	b.n	8008b46 <__b2d+0x4a>
 8008b8e:	ea44 030c 	orr.w	r3, r4, ip
 8008b92:	460a      	mov	r2, r1
 8008b94:	e7d7      	b.n	8008b46 <__b2d+0x4a>
 8008b96:	bf00      	nop
 8008b98:	3ff00000 	.word	0x3ff00000

08008b9c <__d2b>:
 8008b9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ba0:	4689      	mov	r9, r1
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	ec57 6b10 	vmov	r6, r7, d0
 8008ba8:	4690      	mov	r8, r2
 8008baa:	f7ff fc09 	bl	80083c0 <_Balloc>
 8008bae:	4604      	mov	r4, r0
 8008bb0:	b930      	cbnz	r0, 8008bc0 <__d2b+0x24>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	4b25      	ldr	r3, [pc, #148]	; (8008c4c <__d2b+0xb0>)
 8008bb6:	4826      	ldr	r0, [pc, #152]	; (8008c50 <__d2b+0xb4>)
 8008bb8:	f240 310a 	movw	r1, #778	; 0x30a
 8008bbc:	f000 ff6c 	bl	8009a98 <__assert_func>
 8008bc0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008bc4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008bc8:	bb35      	cbnz	r5, 8008c18 <__d2b+0x7c>
 8008bca:	2e00      	cmp	r6, #0
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	d028      	beq.n	8008c22 <__d2b+0x86>
 8008bd0:	4668      	mov	r0, sp
 8008bd2:	9600      	str	r6, [sp, #0]
 8008bd4:	f7ff fd06 	bl	80085e4 <__lo0bits>
 8008bd8:	9900      	ldr	r1, [sp, #0]
 8008bda:	b300      	cbz	r0, 8008c1e <__d2b+0x82>
 8008bdc:	9a01      	ldr	r2, [sp, #4]
 8008bde:	f1c0 0320 	rsb	r3, r0, #32
 8008be2:	fa02 f303 	lsl.w	r3, r2, r3
 8008be6:	430b      	orrs	r3, r1
 8008be8:	40c2      	lsrs	r2, r0
 8008bea:	6163      	str	r3, [r4, #20]
 8008bec:	9201      	str	r2, [sp, #4]
 8008bee:	9b01      	ldr	r3, [sp, #4]
 8008bf0:	61a3      	str	r3, [r4, #24]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	bf14      	ite	ne
 8008bf6:	2202      	movne	r2, #2
 8008bf8:	2201      	moveq	r2, #1
 8008bfa:	6122      	str	r2, [r4, #16]
 8008bfc:	b1d5      	cbz	r5, 8008c34 <__d2b+0x98>
 8008bfe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c02:	4405      	add	r5, r0
 8008c04:	f8c9 5000 	str.w	r5, [r9]
 8008c08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c0c:	f8c8 0000 	str.w	r0, [r8]
 8008c10:	4620      	mov	r0, r4
 8008c12:	b003      	add	sp, #12
 8008c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c1c:	e7d5      	b.n	8008bca <__d2b+0x2e>
 8008c1e:	6161      	str	r1, [r4, #20]
 8008c20:	e7e5      	b.n	8008bee <__d2b+0x52>
 8008c22:	a801      	add	r0, sp, #4
 8008c24:	f7ff fcde 	bl	80085e4 <__lo0bits>
 8008c28:	9b01      	ldr	r3, [sp, #4]
 8008c2a:	6163      	str	r3, [r4, #20]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	6122      	str	r2, [r4, #16]
 8008c30:	3020      	adds	r0, #32
 8008c32:	e7e3      	b.n	8008bfc <__d2b+0x60>
 8008c34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c3c:	f8c9 0000 	str.w	r0, [r9]
 8008c40:	6918      	ldr	r0, [r3, #16]
 8008c42:	f7ff fcaf 	bl	80085a4 <__hi0bits>
 8008c46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c4a:	e7df      	b.n	8008c0c <__d2b+0x70>
 8008c4c:	0800c0d8 	.word	0x0800c0d8
 8008c50:	0800c164 	.word	0x0800c164

08008c54 <__ratio>:
 8008c54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c58:	4688      	mov	r8, r1
 8008c5a:	4669      	mov	r1, sp
 8008c5c:	4681      	mov	r9, r0
 8008c5e:	f7ff ff4d 	bl	8008afc <__b2d>
 8008c62:	a901      	add	r1, sp, #4
 8008c64:	4640      	mov	r0, r8
 8008c66:	ec55 4b10 	vmov	r4, r5, d0
 8008c6a:	f7ff ff47 	bl	8008afc <__b2d>
 8008c6e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c72:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008c76:	eba3 0c02 	sub.w	ip, r3, r2
 8008c7a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008c7e:	1a9b      	subs	r3, r3, r2
 8008c80:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008c84:	ec51 0b10 	vmov	r0, r1, d0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	bfd6      	itet	le
 8008c8c:	460a      	movle	r2, r1
 8008c8e:	462a      	movgt	r2, r5
 8008c90:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008c94:	468b      	mov	fp, r1
 8008c96:	462f      	mov	r7, r5
 8008c98:	bfd4      	ite	le
 8008c9a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008c9e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	ee10 2a10 	vmov	r2, s0
 8008ca8:	465b      	mov	r3, fp
 8008caa:	4639      	mov	r1, r7
 8008cac:	f7f7 fde6 	bl	800087c <__aeabi_ddiv>
 8008cb0:	ec41 0b10 	vmov	d0, r0, r1
 8008cb4:	b003      	add	sp, #12
 8008cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008cba <__copybits>:
 8008cba:	3901      	subs	r1, #1
 8008cbc:	b570      	push	{r4, r5, r6, lr}
 8008cbe:	1149      	asrs	r1, r1, #5
 8008cc0:	6914      	ldr	r4, [r2, #16]
 8008cc2:	3101      	adds	r1, #1
 8008cc4:	f102 0314 	add.w	r3, r2, #20
 8008cc8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ccc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008cd0:	1f05      	subs	r5, r0, #4
 8008cd2:	42a3      	cmp	r3, r4
 8008cd4:	d30c      	bcc.n	8008cf0 <__copybits+0x36>
 8008cd6:	1aa3      	subs	r3, r4, r2
 8008cd8:	3b11      	subs	r3, #17
 8008cda:	f023 0303 	bic.w	r3, r3, #3
 8008cde:	3211      	adds	r2, #17
 8008ce0:	42a2      	cmp	r2, r4
 8008ce2:	bf88      	it	hi
 8008ce4:	2300      	movhi	r3, #0
 8008ce6:	4418      	add	r0, r3
 8008ce8:	2300      	movs	r3, #0
 8008cea:	4288      	cmp	r0, r1
 8008cec:	d305      	bcc.n	8008cfa <__copybits+0x40>
 8008cee:	bd70      	pop	{r4, r5, r6, pc}
 8008cf0:	f853 6b04 	ldr.w	r6, [r3], #4
 8008cf4:	f845 6f04 	str.w	r6, [r5, #4]!
 8008cf8:	e7eb      	b.n	8008cd2 <__copybits+0x18>
 8008cfa:	f840 3b04 	str.w	r3, [r0], #4
 8008cfe:	e7f4      	b.n	8008cea <__copybits+0x30>

08008d00 <__any_on>:
 8008d00:	f100 0214 	add.w	r2, r0, #20
 8008d04:	6900      	ldr	r0, [r0, #16]
 8008d06:	114b      	asrs	r3, r1, #5
 8008d08:	4298      	cmp	r0, r3
 8008d0a:	b510      	push	{r4, lr}
 8008d0c:	db11      	blt.n	8008d32 <__any_on+0x32>
 8008d0e:	dd0a      	ble.n	8008d26 <__any_on+0x26>
 8008d10:	f011 011f 	ands.w	r1, r1, #31
 8008d14:	d007      	beq.n	8008d26 <__any_on+0x26>
 8008d16:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008d1a:	fa24 f001 	lsr.w	r0, r4, r1
 8008d1e:	fa00 f101 	lsl.w	r1, r0, r1
 8008d22:	428c      	cmp	r4, r1
 8008d24:	d10b      	bne.n	8008d3e <__any_on+0x3e>
 8008d26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d803      	bhi.n	8008d36 <__any_on+0x36>
 8008d2e:	2000      	movs	r0, #0
 8008d30:	bd10      	pop	{r4, pc}
 8008d32:	4603      	mov	r3, r0
 8008d34:	e7f7      	b.n	8008d26 <__any_on+0x26>
 8008d36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d3a:	2900      	cmp	r1, #0
 8008d3c:	d0f5      	beq.n	8008d2a <__any_on+0x2a>
 8008d3e:	2001      	movs	r0, #1
 8008d40:	e7f6      	b.n	8008d30 <__any_on+0x30>

08008d42 <_calloc_r>:
 8008d42:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d44:	fba1 2402 	umull	r2, r4, r1, r2
 8008d48:	b94c      	cbnz	r4, 8008d5e <_calloc_r+0x1c>
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	9201      	str	r2, [sp, #4]
 8008d4e:	f000 f87b 	bl	8008e48 <_malloc_r>
 8008d52:	9a01      	ldr	r2, [sp, #4]
 8008d54:	4605      	mov	r5, r0
 8008d56:	b930      	cbnz	r0, 8008d66 <_calloc_r+0x24>
 8008d58:	4628      	mov	r0, r5
 8008d5a:	b003      	add	sp, #12
 8008d5c:	bd30      	pop	{r4, r5, pc}
 8008d5e:	220c      	movs	r2, #12
 8008d60:	6002      	str	r2, [r0, #0]
 8008d62:	2500      	movs	r5, #0
 8008d64:	e7f8      	b.n	8008d58 <_calloc_r+0x16>
 8008d66:	4621      	mov	r1, r4
 8008d68:	f7fc fb16 	bl	8005398 <memset>
 8008d6c:	e7f4      	b.n	8008d58 <_calloc_r+0x16>
	...

08008d70 <_free_r>:
 8008d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d72:	2900      	cmp	r1, #0
 8008d74:	d044      	beq.n	8008e00 <_free_r+0x90>
 8008d76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d7a:	9001      	str	r0, [sp, #4]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f1a1 0404 	sub.w	r4, r1, #4
 8008d82:	bfb8      	it	lt
 8008d84:	18e4      	addlt	r4, r4, r3
 8008d86:	f001 f88b 	bl	8009ea0 <__malloc_lock>
 8008d8a:	4a1e      	ldr	r2, [pc, #120]	; (8008e04 <_free_r+0x94>)
 8008d8c:	9801      	ldr	r0, [sp, #4]
 8008d8e:	6813      	ldr	r3, [r2, #0]
 8008d90:	b933      	cbnz	r3, 8008da0 <_free_r+0x30>
 8008d92:	6063      	str	r3, [r4, #4]
 8008d94:	6014      	str	r4, [r2, #0]
 8008d96:	b003      	add	sp, #12
 8008d98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d9c:	f001 b886 	b.w	8009eac <__malloc_unlock>
 8008da0:	42a3      	cmp	r3, r4
 8008da2:	d908      	bls.n	8008db6 <_free_r+0x46>
 8008da4:	6825      	ldr	r5, [r4, #0]
 8008da6:	1961      	adds	r1, r4, r5
 8008da8:	428b      	cmp	r3, r1
 8008daa:	bf01      	itttt	eq
 8008dac:	6819      	ldreq	r1, [r3, #0]
 8008dae:	685b      	ldreq	r3, [r3, #4]
 8008db0:	1949      	addeq	r1, r1, r5
 8008db2:	6021      	streq	r1, [r4, #0]
 8008db4:	e7ed      	b.n	8008d92 <_free_r+0x22>
 8008db6:	461a      	mov	r2, r3
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	b10b      	cbz	r3, 8008dc0 <_free_r+0x50>
 8008dbc:	42a3      	cmp	r3, r4
 8008dbe:	d9fa      	bls.n	8008db6 <_free_r+0x46>
 8008dc0:	6811      	ldr	r1, [r2, #0]
 8008dc2:	1855      	adds	r5, r2, r1
 8008dc4:	42a5      	cmp	r5, r4
 8008dc6:	d10b      	bne.n	8008de0 <_free_r+0x70>
 8008dc8:	6824      	ldr	r4, [r4, #0]
 8008dca:	4421      	add	r1, r4
 8008dcc:	1854      	adds	r4, r2, r1
 8008dce:	42a3      	cmp	r3, r4
 8008dd0:	6011      	str	r1, [r2, #0]
 8008dd2:	d1e0      	bne.n	8008d96 <_free_r+0x26>
 8008dd4:	681c      	ldr	r4, [r3, #0]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	6053      	str	r3, [r2, #4]
 8008dda:	4421      	add	r1, r4
 8008ddc:	6011      	str	r1, [r2, #0]
 8008dde:	e7da      	b.n	8008d96 <_free_r+0x26>
 8008de0:	d902      	bls.n	8008de8 <_free_r+0x78>
 8008de2:	230c      	movs	r3, #12
 8008de4:	6003      	str	r3, [r0, #0]
 8008de6:	e7d6      	b.n	8008d96 <_free_r+0x26>
 8008de8:	6825      	ldr	r5, [r4, #0]
 8008dea:	1961      	adds	r1, r4, r5
 8008dec:	428b      	cmp	r3, r1
 8008dee:	bf04      	itt	eq
 8008df0:	6819      	ldreq	r1, [r3, #0]
 8008df2:	685b      	ldreq	r3, [r3, #4]
 8008df4:	6063      	str	r3, [r4, #4]
 8008df6:	bf04      	itt	eq
 8008df8:	1949      	addeq	r1, r1, r5
 8008dfa:	6021      	streq	r1, [r4, #0]
 8008dfc:	6054      	str	r4, [r2, #4]
 8008dfe:	e7ca      	b.n	8008d96 <_free_r+0x26>
 8008e00:	b003      	add	sp, #12
 8008e02:	bd30      	pop	{r4, r5, pc}
 8008e04:	20000d00 	.word	0x20000d00

08008e08 <sbrk_aligned>:
 8008e08:	b570      	push	{r4, r5, r6, lr}
 8008e0a:	4e0e      	ldr	r6, [pc, #56]	; (8008e44 <sbrk_aligned+0x3c>)
 8008e0c:	460c      	mov	r4, r1
 8008e0e:	6831      	ldr	r1, [r6, #0]
 8008e10:	4605      	mov	r5, r0
 8008e12:	b911      	cbnz	r1, 8008e1a <sbrk_aligned+0x12>
 8008e14:	f000 fd28 	bl	8009868 <_sbrk_r>
 8008e18:	6030      	str	r0, [r6, #0]
 8008e1a:	4621      	mov	r1, r4
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	f000 fd23 	bl	8009868 <_sbrk_r>
 8008e22:	1c43      	adds	r3, r0, #1
 8008e24:	d00a      	beq.n	8008e3c <sbrk_aligned+0x34>
 8008e26:	1cc4      	adds	r4, r0, #3
 8008e28:	f024 0403 	bic.w	r4, r4, #3
 8008e2c:	42a0      	cmp	r0, r4
 8008e2e:	d007      	beq.n	8008e40 <sbrk_aligned+0x38>
 8008e30:	1a21      	subs	r1, r4, r0
 8008e32:	4628      	mov	r0, r5
 8008e34:	f000 fd18 	bl	8009868 <_sbrk_r>
 8008e38:	3001      	adds	r0, #1
 8008e3a:	d101      	bne.n	8008e40 <sbrk_aligned+0x38>
 8008e3c:	f04f 34ff 	mov.w	r4, #4294967295
 8008e40:	4620      	mov	r0, r4
 8008e42:	bd70      	pop	{r4, r5, r6, pc}
 8008e44:	20000d04 	.word	0x20000d04

08008e48 <_malloc_r>:
 8008e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e4c:	1ccd      	adds	r5, r1, #3
 8008e4e:	f025 0503 	bic.w	r5, r5, #3
 8008e52:	3508      	adds	r5, #8
 8008e54:	2d0c      	cmp	r5, #12
 8008e56:	bf38      	it	cc
 8008e58:	250c      	movcc	r5, #12
 8008e5a:	2d00      	cmp	r5, #0
 8008e5c:	4607      	mov	r7, r0
 8008e5e:	db01      	blt.n	8008e64 <_malloc_r+0x1c>
 8008e60:	42a9      	cmp	r1, r5
 8008e62:	d905      	bls.n	8008e70 <_malloc_r+0x28>
 8008e64:	230c      	movs	r3, #12
 8008e66:	603b      	str	r3, [r7, #0]
 8008e68:	2600      	movs	r6, #0
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e70:	4e2e      	ldr	r6, [pc, #184]	; (8008f2c <_malloc_r+0xe4>)
 8008e72:	f001 f815 	bl	8009ea0 <__malloc_lock>
 8008e76:	6833      	ldr	r3, [r6, #0]
 8008e78:	461c      	mov	r4, r3
 8008e7a:	bb34      	cbnz	r4, 8008eca <_malloc_r+0x82>
 8008e7c:	4629      	mov	r1, r5
 8008e7e:	4638      	mov	r0, r7
 8008e80:	f7ff ffc2 	bl	8008e08 <sbrk_aligned>
 8008e84:	1c43      	adds	r3, r0, #1
 8008e86:	4604      	mov	r4, r0
 8008e88:	d14d      	bne.n	8008f26 <_malloc_r+0xde>
 8008e8a:	6834      	ldr	r4, [r6, #0]
 8008e8c:	4626      	mov	r6, r4
 8008e8e:	2e00      	cmp	r6, #0
 8008e90:	d140      	bne.n	8008f14 <_malloc_r+0xcc>
 8008e92:	6823      	ldr	r3, [r4, #0]
 8008e94:	4631      	mov	r1, r6
 8008e96:	4638      	mov	r0, r7
 8008e98:	eb04 0803 	add.w	r8, r4, r3
 8008e9c:	f000 fce4 	bl	8009868 <_sbrk_r>
 8008ea0:	4580      	cmp	r8, r0
 8008ea2:	d13a      	bne.n	8008f1a <_malloc_r+0xd2>
 8008ea4:	6821      	ldr	r1, [r4, #0]
 8008ea6:	3503      	adds	r5, #3
 8008ea8:	1a6d      	subs	r5, r5, r1
 8008eaa:	f025 0503 	bic.w	r5, r5, #3
 8008eae:	3508      	adds	r5, #8
 8008eb0:	2d0c      	cmp	r5, #12
 8008eb2:	bf38      	it	cc
 8008eb4:	250c      	movcc	r5, #12
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	4638      	mov	r0, r7
 8008eba:	f7ff ffa5 	bl	8008e08 <sbrk_aligned>
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	d02b      	beq.n	8008f1a <_malloc_r+0xd2>
 8008ec2:	6823      	ldr	r3, [r4, #0]
 8008ec4:	442b      	add	r3, r5
 8008ec6:	6023      	str	r3, [r4, #0]
 8008ec8:	e00e      	b.n	8008ee8 <_malloc_r+0xa0>
 8008eca:	6822      	ldr	r2, [r4, #0]
 8008ecc:	1b52      	subs	r2, r2, r5
 8008ece:	d41e      	bmi.n	8008f0e <_malloc_r+0xc6>
 8008ed0:	2a0b      	cmp	r2, #11
 8008ed2:	d916      	bls.n	8008f02 <_malloc_r+0xba>
 8008ed4:	1961      	adds	r1, r4, r5
 8008ed6:	42a3      	cmp	r3, r4
 8008ed8:	6025      	str	r5, [r4, #0]
 8008eda:	bf18      	it	ne
 8008edc:	6059      	strne	r1, [r3, #4]
 8008ede:	6863      	ldr	r3, [r4, #4]
 8008ee0:	bf08      	it	eq
 8008ee2:	6031      	streq	r1, [r6, #0]
 8008ee4:	5162      	str	r2, [r4, r5]
 8008ee6:	604b      	str	r3, [r1, #4]
 8008ee8:	4638      	mov	r0, r7
 8008eea:	f104 060b 	add.w	r6, r4, #11
 8008eee:	f000 ffdd 	bl	8009eac <__malloc_unlock>
 8008ef2:	f026 0607 	bic.w	r6, r6, #7
 8008ef6:	1d23      	adds	r3, r4, #4
 8008ef8:	1af2      	subs	r2, r6, r3
 8008efa:	d0b6      	beq.n	8008e6a <_malloc_r+0x22>
 8008efc:	1b9b      	subs	r3, r3, r6
 8008efe:	50a3      	str	r3, [r4, r2]
 8008f00:	e7b3      	b.n	8008e6a <_malloc_r+0x22>
 8008f02:	6862      	ldr	r2, [r4, #4]
 8008f04:	42a3      	cmp	r3, r4
 8008f06:	bf0c      	ite	eq
 8008f08:	6032      	streq	r2, [r6, #0]
 8008f0a:	605a      	strne	r2, [r3, #4]
 8008f0c:	e7ec      	b.n	8008ee8 <_malloc_r+0xa0>
 8008f0e:	4623      	mov	r3, r4
 8008f10:	6864      	ldr	r4, [r4, #4]
 8008f12:	e7b2      	b.n	8008e7a <_malloc_r+0x32>
 8008f14:	4634      	mov	r4, r6
 8008f16:	6876      	ldr	r6, [r6, #4]
 8008f18:	e7b9      	b.n	8008e8e <_malloc_r+0x46>
 8008f1a:	230c      	movs	r3, #12
 8008f1c:	603b      	str	r3, [r7, #0]
 8008f1e:	4638      	mov	r0, r7
 8008f20:	f000 ffc4 	bl	8009eac <__malloc_unlock>
 8008f24:	e7a1      	b.n	8008e6a <_malloc_r+0x22>
 8008f26:	6025      	str	r5, [r4, #0]
 8008f28:	e7de      	b.n	8008ee8 <_malloc_r+0xa0>
 8008f2a:	bf00      	nop
 8008f2c:	20000d00 	.word	0x20000d00

08008f30 <__ssputs_r>:
 8008f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f34:	688e      	ldr	r6, [r1, #8]
 8008f36:	429e      	cmp	r6, r3
 8008f38:	4682      	mov	sl, r0
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	4690      	mov	r8, r2
 8008f3e:	461f      	mov	r7, r3
 8008f40:	d838      	bhi.n	8008fb4 <__ssputs_r+0x84>
 8008f42:	898a      	ldrh	r2, [r1, #12]
 8008f44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f48:	d032      	beq.n	8008fb0 <__ssputs_r+0x80>
 8008f4a:	6825      	ldr	r5, [r4, #0]
 8008f4c:	6909      	ldr	r1, [r1, #16]
 8008f4e:	eba5 0901 	sub.w	r9, r5, r1
 8008f52:	6965      	ldr	r5, [r4, #20]
 8008f54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	444b      	add	r3, r9
 8008f60:	106d      	asrs	r5, r5, #1
 8008f62:	429d      	cmp	r5, r3
 8008f64:	bf38      	it	cc
 8008f66:	461d      	movcc	r5, r3
 8008f68:	0553      	lsls	r3, r2, #21
 8008f6a:	d531      	bpl.n	8008fd0 <__ssputs_r+0xa0>
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	f7ff ff6b 	bl	8008e48 <_malloc_r>
 8008f72:	4606      	mov	r6, r0
 8008f74:	b950      	cbnz	r0, 8008f8c <__ssputs_r+0x5c>
 8008f76:	230c      	movs	r3, #12
 8008f78:	f8ca 3000 	str.w	r3, [sl]
 8008f7c:	89a3      	ldrh	r3, [r4, #12]
 8008f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f82:	81a3      	strh	r3, [r4, #12]
 8008f84:	f04f 30ff 	mov.w	r0, #4294967295
 8008f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f8c:	6921      	ldr	r1, [r4, #16]
 8008f8e:	464a      	mov	r2, r9
 8008f90:	f7ff fa08 	bl	80083a4 <memcpy>
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f9e:	81a3      	strh	r3, [r4, #12]
 8008fa0:	6126      	str	r6, [r4, #16]
 8008fa2:	6165      	str	r5, [r4, #20]
 8008fa4:	444e      	add	r6, r9
 8008fa6:	eba5 0509 	sub.w	r5, r5, r9
 8008faa:	6026      	str	r6, [r4, #0]
 8008fac:	60a5      	str	r5, [r4, #8]
 8008fae:	463e      	mov	r6, r7
 8008fb0:	42be      	cmp	r6, r7
 8008fb2:	d900      	bls.n	8008fb6 <__ssputs_r+0x86>
 8008fb4:	463e      	mov	r6, r7
 8008fb6:	6820      	ldr	r0, [r4, #0]
 8008fb8:	4632      	mov	r2, r6
 8008fba:	4641      	mov	r1, r8
 8008fbc:	f000 ff56 	bl	8009e6c <memmove>
 8008fc0:	68a3      	ldr	r3, [r4, #8]
 8008fc2:	1b9b      	subs	r3, r3, r6
 8008fc4:	60a3      	str	r3, [r4, #8]
 8008fc6:	6823      	ldr	r3, [r4, #0]
 8008fc8:	4433      	add	r3, r6
 8008fca:	6023      	str	r3, [r4, #0]
 8008fcc:	2000      	movs	r0, #0
 8008fce:	e7db      	b.n	8008f88 <__ssputs_r+0x58>
 8008fd0:	462a      	mov	r2, r5
 8008fd2:	f000 ff71 	bl	8009eb8 <_realloc_r>
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d1e1      	bne.n	8008fa0 <__ssputs_r+0x70>
 8008fdc:	6921      	ldr	r1, [r4, #16]
 8008fde:	4650      	mov	r0, sl
 8008fe0:	f7ff fec6 	bl	8008d70 <_free_r>
 8008fe4:	e7c7      	b.n	8008f76 <__ssputs_r+0x46>
	...

08008fe8 <_svfiprintf_r>:
 8008fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fec:	4698      	mov	r8, r3
 8008fee:	898b      	ldrh	r3, [r1, #12]
 8008ff0:	061b      	lsls	r3, r3, #24
 8008ff2:	b09d      	sub	sp, #116	; 0x74
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	460d      	mov	r5, r1
 8008ff8:	4614      	mov	r4, r2
 8008ffa:	d50e      	bpl.n	800901a <_svfiprintf_r+0x32>
 8008ffc:	690b      	ldr	r3, [r1, #16]
 8008ffe:	b963      	cbnz	r3, 800901a <_svfiprintf_r+0x32>
 8009000:	2140      	movs	r1, #64	; 0x40
 8009002:	f7ff ff21 	bl	8008e48 <_malloc_r>
 8009006:	6028      	str	r0, [r5, #0]
 8009008:	6128      	str	r0, [r5, #16]
 800900a:	b920      	cbnz	r0, 8009016 <_svfiprintf_r+0x2e>
 800900c:	230c      	movs	r3, #12
 800900e:	603b      	str	r3, [r7, #0]
 8009010:	f04f 30ff 	mov.w	r0, #4294967295
 8009014:	e0d1      	b.n	80091ba <_svfiprintf_r+0x1d2>
 8009016:	2340      	movs	r3, #64	; 0x40
 8009018:	616b      	str	r3, [r5, #20]
 800901a:	2300      	movs	r3, #0
 800901c:	9309      	str	r3, [sp, #36]	; 0x24
 800901e:	2320      	movs	r3, #32
 8009020:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009024:	f8cd 800c 	str.w	r8, [sp, #12]
 8009028:	2330      	movs	r3, #48	; 0x30
 800902a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80091d4 <_svfiprintf_r+0x1ec>
 800902e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009032:	f04f 0901 	mov.w	r9, #1
 8009036:	4623      	mov	r3, r4
 8009038:	469a      	mov	sl, r3
 800903a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800903e:	b10a      	cbz	r2, 8009044 <_svfiprintf_r+0x5c>
 8009040:	2a25      	cmp	r2, #37	; 0x25
 8009042:	d1f9      	bne.n	8009038 <_svfiprintf_r+0x50>
 8009044:	ebba 0b04 	subs.w	fp, sl, r4
 8009048:	d00b      	beq.n	8009062 <_svfiprintf_r+0x7a>
 800904a:	465b      	mov	r3, fp
 800904c:	4622      	mov	r2, r4
 800904e:	4629      	mov	r1, r5
 8009050:	4638      	mov	r0, r7
 8009052:	f7ff ff6d 	bl	8008f30 <__ssputs_r>
 8009056:	3001      	adds	r0, #1
 8009058:	f000 80aa 	beq.w	80091b0 <_svfiprintf_r+0x1c8>
 800905c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800905e:	445a      	add	r2, fp
 8009060:	9209      	str	r2, [sp, #36]	; 0x24
 8009062:	f89a 3000 	ldrb.w	r3, [sl]
 8009066:	2b00      	cmp	r3, #0
 8009068:	f000 80a2 	beq.w	80091b0 <_svfiprintf_r+0x1c8>
 800906c:	2300      	movs	r3, #0
 800906e:	f04f 32ff 	mov.w	r2, #4294967295
 8009072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009076:	f10a 0a01 	add.w	sl, sl, #1
 800907a:	9304      	str	r3, [sp, #16]
 800907c:	9307      	str	r3, [sp, #28]
 800907e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009082:	931a      	str	r3, [sp, #104]	; 0x68
 8009084:	4654      	mov	r4, sl
 8009086:	2205      	movs	r2, #5
 8009088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800908c:	4851      	ldr	r0, [pc, #324]	; (80091d4 <_svfiprintf_r+0x1ec>)
 800908e:	f7f7 f8bf 	bl	8000210 <memchr>
 8009092:	9a04      	ldr	r2, [sp, #16]
 8009094:	b9d8      	cbnz	r0, 80090ce <_svfiprintf_r+0xe6>
 8009096:	06d0      	lsls	r0, r2, #27
 8009098:	bf44      	itt	mi
 800909a:	2320      	movmi	r3, #32
 800909c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090a0:	0711      	lsls	r1, r2, #28
 80090a2:	bf44      	itt	mi
 80090a4:	232b      	movmi	r3, #43	; 0x2b
 80090a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090aa:	f89a 3000 	ldrb.w	r3, [sl]
 80090ae:	2b2a      	cmp	r3, #42	; 0x2a
 80090b0:	d015      	beq.n	80090de <_svfiprintf_r+0xf6>
 80090b2:	9a07      	ldr	r2, [sp, #28]
 80090b4:	4654      	mov	r4, sl
 80090b6:	2000      	movs	r0, #0
 80090b8:	f04f 0c0a 	mov.w	ip, #10
 80090bc:	4621      	mov	r1, r4
 80090be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090c2:	3b30      	subs	r3, #48	; 0x30
 80090c4:	2b09      	cmp	r3, #9
 80090c6:	d94e      	bls.n	8009166 <_svfiprintf_r+0x17e>
 80090c8:	b1b0      	cbz	r0, 80090f8 <_svfiprintf_r+0x110>
 80090ca:	9207      	str	r2, [sp, #28]
 80090cc:	e014      	b.n	80090f8 <_svfiprintf_r+0x110>
 80090ce:	eba0 0308 	sub.w	r3, r0, r8
 80090d2:	fa09 f303 	lsl.w	r3, r9, r3
 80090d6:	4313      	orrs	r3, r2
 80090d8:	9304      	str	r3, [sp, #16]
 80090da:	46a2      	mov	sl, r4
 80090dc:	e7d2      	b.n	8009084 <_svfiprintf_r+0x9c>
 80090de:	9b03      	ldr	r3, [sp, #12]
 80090e0:	1d19      	adds	r1, r3, #4
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	9103      	str	r1, [sp, #12]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	bfbb      	ittet	lt
 80090ea:	425b      	neglt	r3, r3
 80090ec:	f042 0202 	orrlt.w	r2, r2, #2
 80090f0:	9307      	strge	r3, [sp, #28]
 80090f2:	9307      	strlt	r3, [sp, #28]
 80090f4:	bfb8      	it	lt
 80090f6:	9204      	strlt	r2, [sp, #16]
 80090f8:	7823      	ldrb	r3, [r4, #0]
 80090fa:	2b2e      	cmp	r3, #46	; 0x2e
 80090fc:	d10c      	bne.n	8009118 <_svfiprintf_r+0x130>
 80090fe:	7863      	ldrb	r3, [r4, #1]
 8009100:	2b2a      	cmp	r3, #42	; 0x2a
 8009102:	d135      	bne.n	8009170 <_svfiprintf_r+0x188>
 8009104:	9b03      	ldr	r3, [sp, #12]
 8009106:	1d1a      	adds	r2, r3, #4
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	9203      	str	r2, [sp, #12]
 800910c:	2b00      	cmp	r3, #0
 800910e:	bfb8      	it	lt
 8009110:	f04f 33ff 	movlt.w	r3, #4294967295
 8009114:	3402      	adds	r4, #2
 8009116:	9305      	str	r3, [sp, #20]
 8009118:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80091e4 <_svfiprintf_r+0x1fc>
 800911c:	7821      	ldrb	r1, [r4, #0]
 800911e:	2203      	movs	r2, #3
 8009120:	4650      	mov	r0, sl
 8009122:	f7f7 f875 	bl	8000210 <memchr>
 8009126:	b140      	cbz	r0, 800913a <_svfiprintf_r+0x152>
 8009128:	2340      	movs	r3, #64	; 0x40
 800912a:	eba0 000a 	sub.w	r0, r0, sl
 800912e:	fa03 f000 	lsl.w	r0, r3, r0
 8009132:	9b04      	ldr	r3, [sp, #16]
 8009134:	4303      	orrs	r3, r0
 8009136:	3401      	adds	r4, #1
 8009138:	9304      	str	r3, [sp, #16]
 800913a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800913e:	4826      	ldr	r0, [pc, #152]	; (80091d8 <_svfiprintf_r+0x1f0>)
 8009140:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009144:	2206      	movs	r2, #6
 8009146:	f7f7 f863 	bl	8000210 <memchr>
 800914a:	2800      	cmp	r0, #0
 800914c:	d038      	beq.n	80091c0 <_svfiprintf_r+0x1d8>
 800914e:	4b23      	ldr	r3, [pc, #140]	; (80091dc <_svfiprintf_r+0x1f4>)
 8009150:	bb1b      	cbnz	r3, 800919a <_svfiprintf_r+0x1b2>
 8009152:	9b03      	ldr	r3, [sp, #12]
 8009154:	3307      	adds	r3, #7
 8009156:	f023 0307 	bic.w	r3, r3, #7
 800915a:	3308      	adds	r3, #8
 800915c:	9303      	str	r3, [sp, #12]
 800915e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009160:	4433      	add	r3, r6
 8009162:	9309      	str	r3, [sp, #36]	; 0x24
 8009164:	e767      	b.n	8009036 <_svfiprintf_r+0x4e>
 8009166:	fb0c 3202 	mla	r2, ip, r2, r3
 800916a:	460c      	mov	r4, r1
 800916c:	2001      	movs	r0, #1
 800916e:	e7a5      	b.n	80090bc <_svfiprintf_r+0xd4>
 8009170:	2300      	movs	r3, #0
 8009172:	3401      	adds	r4, #1
 8009174:	9305      	str	r3, [sp, #20]
 8009176:	4619      	mov	r1, r3
 8009178:	f04f 0c0a 	mov.w	ip, #10
 800917c:	4620      	mov	r0, r4
 800917e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009182:	3a30      	subs	r2, #48	; 0x30
 8009184:	2a09      	cmp	r2, #9
 8009186:	d903      	bls.n	8009190 <_svfiprintf_r+0x1a8>
 8009188:	2b00      	cmp	r3, #0
 800918a:	d0c5      	beq.n	8009118 <_svfiprintf_r+0x130>
 800918c:	9105      	str	r1, [sp, #20]
 800918e:	e7c3      	b.n	8009118 <_svfiprintf_r+0x130>
 8009190:	fb0c 2101 	mla	r1, ip, r1, r2
 8009194:	4604      	mov	r4, r0
 8009196:	2301      	movs	r3, #1
 8009198:	e7f0      	b.n	800917c <_svfiprintf_r+0x194>
 800919a:	ab03      	add	r3, sp, #12
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	462a      	mov	r2, r5
 80091a0:	4b0f      	ldr	r3, [pc, #60]	; (80091e0 <_svfiprintf_r+0x1f8>)
 80091a2:	a904      	add	r1, sp, #16
 80091a4:	4638      	mov	r0, r7
 80091a6:	f7fc f99f 	bl	80054e8 <_printf_float>
 80091aa:	1c42      	adds	r2, r0, #1
 80091ac:	4606      	mov	r6, r0
 80091ae:	d1d6      	bne.n	800915e <_svfiprintf_r+0x176>
 80091b0:	89ab      	ldrh	r3, [r5, #12]
 80091b2:	065b      	lsls	r3, r3, #25
 80091b4:	f53f af2c 	bmi.w	8009010 <_svfiprintf_r+0x28>
 80091b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091ba:	b01d      	add	sp, #116	; 0x74
 80091bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c0:	ab03      	add	r3, sp, #12
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	462a      	mov	r2, r5
 80091c6:	4b06      	ldr	r3, [pc, #24]	; (80091e0 <_svfiprintf_r+0x1f8>)
 80091c8:	a904      	add	r1, sp, #16
 80091ca:	4638      	mov	r0, r7
 80091cc:	f7fc fc30 	bl	8005a30 <_printf_i>
 80091d0:	e7eb      	b.n	80091aa <_svfiprintf_r+0x1c2>
 80091d2:	bf00      	nop
 80091d4:	0800c2bc 	.word	0x0800c2bc
 80091d8:	0800c2c6 	.word	0x0800c2c6
 80091dc:	080054e9 	.word	0x080054e9
 80091e0:	08008f31 	.word	0x08008f31
 80091e4:	0800c2c2 	.word	0x0800c2c2

080091e8 <_sungetc_r>:
 80091e8:	b538      	push	{r3, r4, r5, lr}
 80091ea:	1c4b      	adds	r3, r1, #1
 80091ec:	4614      	mov	r4, r2
 80091ee:	d103      	bne.n	80091f8 <_sungetc_r+0x10>
 80091f0:	f04f 35ff 	mov.w	r5, #4294967295
 80091f4:	4628      	mov	r0, r5
 80091f6:	bd38      	pop	{r3, r4, r5, pc}
 80091f8:	8993      	ldrh	r3, [r2, #12]
 80091fa:	f023 0320 	bic.w	r3, r3, #32
 80091fe:	8193      	strh	r3, [r2, #12]
 8009200:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009202:	6852      	ldr	r2, [r2, #4]
 8009204:	b2cd      	uxtb	r5, r1
 8009206:	b18b      	cbz	r3, 800922c <_sungetc_r+0x44>
 8009208:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800920a:	4293      	cmp	r3, r2
 800920c:	dd08      	ble.n	8009220 <_sungetc_r+0x38>
 800920e:	6823      	ldr	r3, [r4, #0]
 8009210:	1e5a      	subs	r2, r3, #1
 8009212:	6022      	str	r2, [r4, #0]
 8009214:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009218:	6863      	ldr	r3, [r4, #4]
 800921a:	3301      	adds	r3, #1
 800921c:	6063      	str	r3, [r4, #4]
 800921e:	e7e9      	b.n	80091f4 <_sungetc_r+0xc>
 8009220:	4621      	mov	r1, r4
 8009222:	f000 fbf1 	bl	8009a08 <__submore>
 8009226:	2800      	cmp	r0, #0
 8009228:	d0f1      	beq.n	800920e <_sungetc_r+0x26>
 800922a:	e7e1      	b.n	80091f0 <_sungetc_r+0x8>
 800922c:	6921      	ldr	r1, [r4, #16]
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	b151      	cbz	r1, 8009248 <_sungetc_r+0x60>
 8009232:	4299      	cmp	r1, r3
 8009234:	d208      	bcs.n	8009248 <_sungetc_r+0x60>
 8009236:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800923a:	42a9      	cmp	r1, r5
 800923c:	d104      	bne.n	8009248 <_sungetc_r+0x60>
 800923e:	3b01      	subs	r3, #1
 8009240:	3201      	adds	r2, #1
 8009242:	6023      	str	r3, [r4, #0]
 8009244:	6062      	str	r2, [r4, #4]
 8009246:	e7d5      	b.n	80091f4 <_sungetc_r+0xc>
 8009248:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800924c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009250:	6363      	str	r3, [r4, #52]	; 0x34
 8009252:	2303      	movs	r3, #3
 8009254:	63a3      	str	r3, [r4, #56]	; 0x38
 8009256:	4623      	mov	r3, r4
 8009258:	f803 5f46 	strb.w	r5, [r3, #70]!
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	2301      	movs	r3, #1
 8009260:	e7dc      	b.n	800921c <_sungetc_r+0x34>

08009262 <__ssrefill_r>:
 8009262:	b510      	push	{r4, lr}
 8009264:	460c      	mov	r4, r1
 8009266:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009268:	b169      	cbz	r1, 8009286 <__ssrefill_r+0x24>
 800926a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800926e:	4299      	cmp	r1, r3
 8009270:	d001      	beq.n	8009276 <__ssrefill_r+0x14>
 8009272:	f7ff fd7d 	bl	8008d70 <_free_r>
 8009276:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009278:	6063      	str	r3, [r4, #4]
 800927a:	2000      	movs	r0, #0
 800927c:	6360      	str	r0, [r4, #52]	; 0x34
 800927e:	b113      	cbz	r3, 8009286 <__ssrefill_r+0x24>
 8009280:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009282:	6023      	str	r3, [r4, #0]
 8009284:	bd10      	pop	{r4, pc}
 8009286:	6923      	ldr	r3, [r4, #16]
 8009288:	6023      	str	r3, [r4, #0]
 800928a:	2300      	movs	r3, #0
 800928c:	6063      	str	r3, [r4, #4]
 800928e:	89a3      	ldrh	r3, [r4, #12]
 8009290:	f043 0320 	orr.w	r3, r3, #32
 8009294:	81a3      	strh	r3, [r4, #12]
 8009296:	f04f 30ff 	mov.w	r0, #4294967295
 800929a:	e7f3      	b.n	8009284 <__ssrefill_r+0x22>

0800929c <__ssvfiscanf_r>:
 800929c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092a0:	460c      	mov	r4, r1
 80092a2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80092a6:	2100      	movs	r1, #0
 80092a8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80092ac:	49a6      	ldr	r1, [pc, #664]	; (8009548 <__ssvfiscanf_r+0x2ac>)
 80092ae:	91a0      	str	r1, [sp, #640]	; 0x280
 80092b0:	f10d 0804 	add.w	r8, sp, #4
 80092b4:	49a5      	ldr	r1, [pc, #660]	; (800954c <__ssvfiscanf_r+0x2b0>)
 80092b6:	4fa6      	ldr	r7, [pc, #664]	; (8009550 <__ssvfiscanf_r+0x2b4>)
 80092b8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009554 <__ssvfiscanf_r+0x2b8>
 80092bc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80092c0:	4606      	mov	r6, r0
 80092c2:	91a1      	str	r1, [sp, #644]	; 0x284
 80092c4:	9300      	str	r3, [sp, #0]
 80092c6:	7813      	ldrb	r3, [r2, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 815a 	beq.w	8009582 <__ssvfiscanf_r+0x2e6>
 80092ce:	5dd9      	ldrb	r1, [r3, r7]
 80092d0:	f011 0108 	ands.w	r1, r1, #8
 80092d4:	f102 0501 	add.w	r5, r2, #1
 80092d8:	d019      	beq.n	800930e <__ssvfiscanf_r+0x72>
 80092da:	6863      	ldr	r3, [r4, #4]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	dd0f      	ble.n	8009300 <__ssvfiscanf_r+0x64>
 80092e0:	6823      	ldr	r3, [r4, #0]
 80092e2:	781a      	ldrb	r2, [r3, #0]
 80092e4:	5cba      	ldrb	r2, [r7, r2]
 80092e6:	0712      	lsls	r2, r2, #28
 80092e8:	d401      	bmi.n	80092ee <__ssvfiscanf_r+0x52>
 80092ea:	462a      	mov	r2, r5
 80092ec:	e7eb      	b.n	80092c6 <__ssvfiscanf_r+0x2a>
 80092ee:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80092f0:	3201      	adds	r2, #1
 80092f2:	9245      	str	r2, [sp, #276]	; 0x114
 80092f4:	6862      	ldr	r2, [r4, #4]
 80092f6:	3301      	adds	r3, #1
 80092f8:	3a01      	subs	r2, #1
 80092fa:	6062      	str	r2, [r4, #4]
 80092fc:	6023      	str	r3, [r4, #0]
 80092fe:	e7ec      	b.n	80092da <__ssvfiscanf_r+0x3e>
 8009300:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009302:	4621      	mov	r1, r4
 8009304:	4630      	mov	r0, r6
 8009306:	4798      	blx	r3
 8009308:	2800      	cmp	r0, #0
 800930a:	d0e9      	beq.n	80092e0 <__ssvfiscanf_r+0x44>
 800930c:	e7ed      	b.n	80092ea <__ssvfiscanf_r+0x4e>
 800930e:	2b25      	cmp	r3, #37	; 0x25
 8009310:	d012      	beq.n	8009338 <__ssvfiscanf_r+0x9c>
 8009312:	469a      	mov	sl, r3
 8009314:	6863      	ldr	r3, [r4, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	f340 8091 	ble.w	800943e <__ssvfiscanf_r+0x1a2>
 800931c:	6822      	ldr	r2, [r4, #0]
 800931e:	7813      	ldrb	r3, [r2, #0]
 8009320:	4553      	cmp	r3, sl
 8009322:	f040 812e 	bne.w	8009582 <__ssvfiscanf_r+0x2e6>
 8009326:	6863      	ldr	r3, [r4, #4]
 8009328:	3b01      	subs	r3, #1
 800932a:	6063      	str	r3, [r4, #4]
 800932c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800932e:	3201      	adds	r2, #1
 8009330:	3301      	adds	r3, #1
 8009332:	6022      	str	r2, [r4, #0]
 8009334:	9345      	str	r3, [sp, #276]	; 0x114
 8009336:	e7d8      	b.n	80092ea <__ssvfiscanf_r+0x4e>
 8009338:	9141      	str	r1, [sp, #260]	; 0x104
 800933a:	9143      	str	r1, [sp, #268]	; 0x10c
 800933c:	7853      	ldrb	r3, [r2, #1]
 800933e:	2b2a      	cmp	r3, #42	; 0x2a
 8009340:	bf02      	ittt	eq
 8009342:	2310      	moveq	r3, #16
 8009344:	1c95      	addeq	r5, r2, #2
 8009346:	9341      	streq	r3, [sp, #260]	; 0x104
 8009348:	220a      	movs	r2, #10
 800934a:	46aa      	mov	sl, r5
 800934c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009350:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009354:	2b09      	cmp	r3, #9
 8009356:	d91d      	bls.n	8009394 <__ssvfiscanf_r+0xf8>
 8009358:	487e      	ldr	r0, [pc, #504]	; (8009554 <__ssvfiscanf_r+0x2b8>)
 800935a:	2203      	movs	r2, #3
 800935c:	f7f6 ff58 	bl	8000210 <memchr>
 8009360:	b140      	cbz	r0, 8009374 <__ssvfiscanf_r+0xd8>
 8009362:	2301      	movs	r3, #1
 8009364:	eba0 0009 	sub.w	r0, r0, r9
 8009368:	fa03 f000 	lsl.w	r0, r3, r0
 800936c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800936e:	4318      	orrs	r0, r3
 8009370:	9041      	str	r0, [sp, #260]	; 0x104
 8009372:	4655      	mov	r5, sl
 8009374:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009378:	2b78      	cmp	r3, #120	; 0x78
 800937a:	d806      	bhi.n	800938a <__ssvfiscanf_r+0xee>
 800937c:	2b57      	cmp	r3, #87	; 0x57
 800937e:	d810      	bhi.n	80093a2 <__ssvfiscanf_r+0x106>
 8009380:	2b25      	cmp	r3, #37	; 0x25
 8009382:	d0c6      	beq.n	8009312 <__ssvfiscanf_r+0x76>
 8009384:	d856      	bhi.n	8009434 <__ssvfiscanf_r+0x198>
 8009386:	2b00      	cmp	r3, #0
 8009388:	d064      	beq.n	8009454 <__ssvfiscanf_r+0x1b8>
 800938a:	2303      	movs	r3, #3
 800938c:	9347      	str	r3, [sp, #284]	; 0x11c
 800938e:	230a      	movs	r3, #10
 8009390:	9342      	str	r3, [sp, #264]	; 0x108
 8009392:	e071      	b.n	8009478 <__ssvfiscanf_r+0x1dc>
 8009394:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009396:	fb02 1103 	mla	r1, r2, r3, r1
 800939a:	3930      	subs	r1, #48	; 0x30
 800939c:	9143      	str	r1, [sp, #268]	; 0x10c
 800939e:	4655      	mov	r5, sl
 80093a0:	e7d3      	b.n	800934a <__ssvfiscanf_r+0xae>
 80093a2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80093a6:	2a20      	cmp	r2, #32
 80093a8:	d8ef      	bhi.n	800938a <__ssvfiscanf_r+0xee>
 80093aa:	a101      	add	r1, pc, #4	; (adr r1, 80093b0 <__ssvfiscanf_r+0x114>)
 80093ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80093b0:	08009463 	.word	0x08009463
 80093b4:	0800938b 	.word	0x0800938b
 80093b8:	0800938b 	.word	0x0800938b
 80093bc:	080094c1 	.word	0x080094c1
 80093c0:	0800938b 	.word	0x0800938b
 80093c4:	0800938b 	.word	0x0800938b
 80093c8:	0800938b 	.word	0x0800938b
 80093cc:	0800938b 	.word	0x0800938b
 80093d0:	0800938b 	.word	0x0800938b
 80093d4:	0800938b 	.word	0x0800938b
 80093d8:	0800938b 	.word	0x0800938b
 80093dc:	080094d7 	.word	0x080094d7
 80093e0:	080094ad 	.word	0x080094ad
 80093e4:	0800943b 	.word	0x0800943b
 80093e8:	0800943b 	.word	0x0800943b
 80093ec:	0800943b 	.word	0x0800943b
 80093f0:	0800938b 	.word	0x0800938b
 80093f4:	080094b1 	.word	0x080094b1
 80093f8:	0800938b 	.word	0x0800938b
 80093fc:	0800938b 	.word	0x0800938b
 8009400:	0800938b 	.word	0x0800938b
 8009404:	0800938b 	.word	0x0800938b
 8009408:	080094e7 	.word	0x080094e7
 800940c:	080094b9 	.word	0x080094b9
 8009410:	0800945b 	.word	0x0800945b
 8009414:	0800938b 	.word	0x0800938b
 8009418:	0800938b 	.word	0x0800938b
 800941c:	080094e3 	.word	0x080094e3
 8009420:	0800938b 	.word	0x0800938b
 8009424:	080094ad 	.word	0x080094ad
 8009428:	0800938b 	.word	0x0800938b
 800942c:	0800938b 	.word	0x0800938b
 8009430:	08009463 	.word	0x08009463
 8009434:	3b45      	subs	r3, #69	; 0x45
 8009436:	2b02      	cmp	r3, #2
 8009438:	d8a7      	bhi.n	800938a <__ssvfiscanf_r+0xee>
 800943a:	2305      	movs	r3, #5
 800943c:	e01b      	b.n	8009476 <__ssvfiscanf_r+0x1da>
 800943e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009440:	4621      	mov	r1, r4
 8009442:	4630      	mov	r0, r6
 8009444:	4798      	blx	r3
 8009446:	2800      	cmp	r0, #0
 8009448:	f43f af68 	beq.w	800931c <__ssvfiscanf_r+0x80>
 800944c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800944e:	2800      	cmp	r0, #0
 8009450:	f040 808d 	bne.w	800956e <__ssvfiscanf_r+0x2d2>
 8009454:	f04f 30ff 	mov.w	r0, #4294967295
 8009458:	e08f      	b.n	800957a <__ssvfiscanf_r+0x2de>
 800945a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800945c:	f042 0220 	orr.w	r2, r2, #32
 8009460:	9241      	str	r2, [sp, #260]	; 0x104
 8009462:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009468:	9241      	str	r2, [sp, #260]	; 0x104
 800946a:	2210      	movs	r2, #16
 800946c:	2b6f      	cmp	r3, #111	; 0x6f
 800946e:	9242      	str	r2, [sp, #264]	; 0x108
 8009470:	bf34      	ite	cc
 8009472:	2303      	movcc	r3, #3
 8009474:	2304      	movcs	r3, #4
 8009476:	9347      	str	r3, [sp, #284]	; 0x11c
 8009478:	6863      	ldr	r3, [r4, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	dd42      	ble.n	8009504 <__ssvfiscanf_r+0x268>
 800947e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009480:	0659      	lsls	r1, r3, #25
 8009482:	d404      	bmi.n	800948e <__ssvfiscanf_r+0x1f2>
 8009484:	6823      	ldr	r3, [r4, #0]
 8009486:	781a      	ldrb	r2, [r3, #0]
 8009488:	5cba      	ldrb	r2, [r7, r2]
 800948a:	0712      	lsls	r2, r2, #28
 800948c:	d441      	bmi.n	8009512 <__ssvfiscanf_r+0x276>
 800948e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009490:	2b02      	cmp	r3, #2
 8009492:	dc50      	bgt.n	8009536 <__ssvfiscanf_r+0x29a>
 8009494:	466b      	mov	r3, sp
 8009496:	4622      	mov	r2, r4
 8009498:	a941      	add	r1, sp, #260	; 0x104
 800949a:	4630      	mov	r0, r6
 800949c:	f000 f876 	bl	800958c <_scanf_chars>
 80094a0:	2801      	cmp	r0, #1
 80094a2:	d06e      	beq.n	8009582 <__ssvfiscanf_r+0x2e6>
 80094a4:	2802      	cmp	r0, #2
 80094a6:	f47f af20 	bne.w	80092ea <__ssvfiscanf_r+0x4e>
 80094aa:	e7cf      	b.n	800944c <__ssvfiscanf_r+0x1b0>
 80094ac:	220a      	movs	r2, #10
 80094ae:	e7dd      	b.n	800946c <__ssvfiscanf_r+0x1d0>
 80094b0:	2300      	movs	r3, #0
 80094b2:	9342      	str	r3, [sp, #264]	; 0x108
 80094b4:	2303      	movs	r3, #3
 80094b6:	e7de      	b.n	8009476 <__ssvfiscanf_r+0x1da>
 80094b8:	2308      	movs	r3, #8
 80094ba:	9342      	str	r3, [sp, #264]	; 0x108
 80094bc:	2304      	movs	r3, #4
 80094be:	e7da      	b.n	8009476 <__ssvfiscanf_r+0x1da>
 80094c0:	4629      	mov	r1, r5
 80094c2:	4640      	mov	r0, r8
 80094c4:	f000 f9e0 	bl	8009888 <__sccl>
 80094c8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80094ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ce:	9341      	str	r3, [sp, #260]	; 0x104
 80094d0:	4605      	mov	r5, r0
 80094d2:	2301      	movs	r3, #1
 80094d4:	e7cf      	b.n	8009476 <__ssvfiscanf_r+0x1da>
 80094d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80094d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094dc:	9341      	str	r3, [sp, #260]	; 0x104
 80094de:	2300      	movs	r3, #0
 80094e0:	e7c9      	b.n	8009476 <__ssvfiscanf_r+0x1da>
 80094e2:	2302      	movs	r3, #2
 80094e4:	e7c7      	b.n	8009476 <__ssvfiscanf_r+0x1da>
 80094e6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80094e8:	06c3      	lsls	r3, r0, #27
 80094ea:	f53f aefe 	bmi.w	80092ea <__ssvfiscanf_r+0x4e>
 80094ee:	9b00      	ldr	r3, [sp, #0]
 80094f0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80094f2:	1d19      	adds	r1, r3, #4
 80094f4:	9100      	str	r1, [sp, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f010 0f01 	tst.w	r0, #1
 80094fc:	bf14      	ite	ne
 80094fe:	801a      	strhne	r2, [r3, #0]
 8009500:	601a      	streq	r2, [r3, #0]
 8009502:	e6f2      	b.n	80092ea <__ssvfiscanf_r+0x4e>
 8009504:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009506:	4621      	mov	r1, r4
 8009508:	4630      	mov	r0, r6
 800950a:	4798      	blx	r3
 800950c:	2800      	cmp	r0, #0
 800950e:	d0b6      	beq.n	800947e <__ssvfiscanf_r+0x1e2>
 8009510:	e79c      	b.n	800944c <__ssvfiscanf_r+0x1b0>
 8009512:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009514:	3201      	adds	r2, #1
 8009516:	9245      	str	r2, [sp, #276]	; 0x114
 8009518:	6862      	ldr	r2, [r4, #4]
 800951a:	3a01      	subs	r2, #1
 800951c:	2a00      	cmp	r2, #0
 800951e:	6062      	str	r2, [r4, #4]
 8009520:	dd02      	ble.n	8009528 <__ssvfiscanf_r+0x28c>
 8009522:	3301      	adds	r3, #1
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	e7ad      	b.n	8009484 <__ssvfiscanf_r+0x1e8>
 8009528:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800952a:	4621      	mov	r1, r4
 800952c:	4630      	mov	r0, r6
 800952e:	4798      	blx	r3
 8009530:	2800      	cmp	r0, #0
 8009532:	d0a7      	beq.n	8009484 <__ssvfiscanf_r+0x1e8>
 8009534:	e78a      	b.n	800944c <__ssvfiscanf_r+0x1b0>
 8009536:	2b04      	cmp	r3, #4
 8009538:	dc0e      	bgt.n	8009558 <__ssvfiscanf_r+0x2bc>
 800953a:	466b      	mov	r3, sp
 800953c:	4622      	mov	r2, r4
 800953e:	a941      	add	r1, sp, #260	; 0x104
 8009540:	4630      	mov	r0, r6
 8009542:	f000 f87d 	bl	8009640 <_scanf_i>
 8009546:	e7ab      	b.n	80094a0 <__ssvfiscanf_r+0x204>
 8009548:	080091e9 	.word	0x080091e9
 800954c:	08009263 	.word	0x08009263
 8009550:	0800bf59 	.word	0x0800bf59
 8009554:	0800c2c2 	.word	0x0800c2c2
 8009558:	4b0b      	ldr	r3, [pc, #44]	; (8009588 <__ssvfiscanf_r+0x2ec>)
 800955a:	2b00      	cmp	r3, #0
 800955c:	f43f aec5 	beq.w	80092ea <__ssvfiscanf_r+0x4e>
 8009560:	466b      	mov	r3, sp
 8009562:	4622      	mov	r2, r4
 8009564:	a941      	add	r1, sp, #260	; 0x104
 8009566:	4630      	mov	r0, r6
 8009568:	f7fc fb88 	bl	8005c7c <_scanf_float>
 800956c:	e798      	b.n	80094a0 <__ssvfiscanf_r+0x204>
 800956e:	89a3      	ldrh	r3, [r4, #12]
 8009570:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009574:	bf18      	it	ne
 8009576:	f04f 30ff 	movne.w	r0, #4294967295
 800957a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800957e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009582:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009584:	e7f9      	b.n	800957a <__ssvfiscanf_r+0x2de>
 8009586:	bf00      	nop
 8009588:	08005c7d 	.word	0x08005c7d

0800958c <_scanf_chars>:
 800958c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009590:	4615      	mov	r5, r2
 8009592:	688a      	ldr	r2, [r1, #8]
 8009594:	4680      	mov	r8, r0
 8009596:	460c      	mov	r4, r1
 8009598:	b932      	cbnz	r2, 80095a8 <_scanf_chars+0x1c>
 800959a:	698a      	ldr	r2, [r1, #24]
 800959c:	2a00      	cmp	r2, #0
 800959e:	bf0c      	ite	eq
 80095a0:	2201      	moveq	r2, #1
 80095a2:	f04f 32ff 	movne.w	r2, #4294967295
 80095a6:	608a      	str	r2, [r1, #8]
 80095a8:	6822      	ldr	r2, [r4, #0]
 80095aa:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800963c <_scanf_chars+0xb0>
 80095ae:	06d1      	lsls	r1, r2, #27
 80095b0:	bf5f      	itttt	pl
 80095b2:	681a      	ldrpl	r2, [r3, #0]
 80095b4:	1d11      	addpl	r1, r2, #4
 80095b6:	6019      	strpl	r1, [r3, #0]
 80095b8:	6816      	ldrpl	r6, [r2, #0]
 80095ba:	2700      	movs	r7, #0
 80095bc:	69a0      	ldr	r0, [r4, #24]
 80095be:	b188      	cbz	r0, 80095e4 <_scanf_chars+0x58>
 80095c0:	2801      	cmp	r0, #1
 80095c2:	d107      	bne.n	80095d4 <_scanf_chars+0x48>
 80095c4:	682a      	ldr	r2, [r5, #0]
 80095c6:	7811      	ldrb	r1, [r2, #0]
 80095c8:	6962      	ldr	r2, [r4, #20]
 80095ca:	5c52      	ldrb	r2, [r2, r1]
 80095cc:	b952      	cbnz	r2, 80095e4 <_scanf_chars+0x58>
 80095ce:	2f00      	cmp	r7, #0
 80095d0:	d031      	beq.n	8009636 <_scanf_chars+0xaa>
 80095d2:	e022      	b.n	800961a <_scanf_chars+0x8e>
 80095d4:	2802      	cmp	r0, #2
 80095d6:	d120      	bne.n	800961a <_scanf_chars+0x8e>
 80095d8:	682b      	ldr	r3, [r5, #0]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	f813 3009 	ldrb.w	r3, [r3, r9]
 80095e0:	071b      	lsls	r3, r3, #28
 80095e2:	d41a      	bmi.n	800961a <_scanf_chars+0x8e>
 80095e4:	6823      	ldr	r3, [r4, #0]
 80095e6:	06da      	lsls	r2, r3, #27
 80095e8:	bf5e      	ittt	pl
 80095ea:	682b      	ldrpl	r3, [r5, #0]
 80095ec:	781b      	ldrbpl	r3, [r3, #0]
 80095ee:	f806 3b01 	strbpl.w	r3, [r6], #1
 80095f2:	682a      	ldr	r2, [r5, #0]
 80095f4:	686b      	ldr	r3, [r5, #4]
 80095f6:	3201      	adds	r2, #1
 80095f8:	602a      	str	r2, [r5, #0]
 80095fa:	68a2      	ldr	r2, [r4, #8]
 80095fc:	3b01      	subs	r3, #1
 80095fe:	3a01      	subs	r2, #1
 8009600:	606b      	str	r3, [r5, #4]
 8009602:	3701      	adds	r7, #1
 8009604:	60a2      	str	r2, [r4, #8]
 8009606:	b142      	cbz	r2, 800961a <_scanf_chars+0x8e>
 8009608:	2b00      	cmp	r3, #0
 800960a:	dcd7      	bgt.n	80095bc <_scanf_chars+0x30>
 800960c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009610:	4629      	mov	r1, r5
 8009612:	4640      	mov	r0, r8
 8009614:	4798      	blx	r3
 8009616:	2800      	cmp	r0, #0
 8009618:	d0d0      	beq.n	80095bc <_scanf_chars+0x30>
 800961a:	6823      	ldr	r3, [r4, #0]
 800961c:	f013 0310 	ands.w	r3, r3, #16
 8009620:	d105      	bne.n	800962e <_scanf_chars+0xa2>
 8009622:	68e2      	ldr	r2, [r4, #12]
 8009624:	3201      	adds	r2, #1
 8009626:	60e2      	str	r2, [r4, #12]
 8009628:	69a2      	ldr	r2, [r4, #24]
 800962a:	b102      	cbz	r2, 800962e <_scanf_chars+0xa2>
 800962c:	7033      	strb	r3, [r6, #0]
 800962e:	6923      	ldr	r3, [r4, #16]
 8009630:	443b      	add	r3, r7
 8009632:	6123      	str	r3, [r4, #16]
 8009634:	2000      	movs	r0, #0
 8009636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800963a:	bf00      	nop
 800963c:	0800bf59 	.word	0x0800bf59

08009640 <_scanf_i>:
 8009640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009644:	4698      	mov	r8, r3
 8009646:	4b76      	ldr	r3, [pc, #472]	; (8009820 <_scanf_i+0x1e0>)
 8009648:	460c      	mov	r4, r1
 800964a:	4682      	mov	sl, r0
 800964c:	4616      	mov	r6, r2
 800964e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009652:	b087      	sub	sp, #28
 8009654:	ab03      	add	r3, sp, #12
 8009656:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800965a:	4b72      	ldr	r3, [pc, #456]	; (8009824 <_scanf_i+0x1e4>)
 800965c:	69a1      	ldr	r1, [r4, #24]
 800965e:	4a72      	ldr	r2, [pc, #456]	; (8009828 <_scanf_i+0x1e8>)
 8009660:	2903      	cmp	r1, #3
 8009662:	bf18      	it	ne
 8009664:	461a      	movne	r2, r3
 8009666:	68a3      	ldr	r3, [r4, #8]
 8009668:	9201      	str	r2, [sp, #4]
 800966a:	1e5a      	subs	r2, r3, #1
 800966c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009670:	bf88      	it	hi
 8009672:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009676:	4627      	mov	r7, r4
 8009678:	bf82      	ittt	hi
 800967a:	eb03 0905 	addhi.w	r9, r3, r5
 800967e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009682:	60a3      	strhi	r3, [r4, #8]
 8009684:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009688:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800968c:	bf98      	it	ls
 800968e:	f04f 0900 	movls.w	r9, #0
 8009692:	6023      	str	r3, [r4, #0]
 8009694:	463d      	mov	r5, r7
 8009696:	f04f 0b00 	mov.w	fp, #0
 800969a:	6831      	ldr	r1, [r6, #0]
 800969c:	ab03      	add	r3, sp, #12
 800969e:	7809      	ldrb	r1, [r1, #0]
 80096a0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80096a4:	2202      	movs	r2, #2
 80096a6:	f7f6 fdb3 	bl	8000210 <memchr>
 80096aa:	b328      	cbz	r0, 80096f8 <_scanf_i+0xb8>
 80096ac:	f1bb 0f01 	cmp.w	fp, #1
 80096b0:	d159      	bne.n	8009766 <_scanf_i+0x126>
 80096b2:	6862      	ldr	r2, [r4, #4]
 80096b4:	b92a      	cbnz	r2, 80096c2 <_scanf_i+0x82>
 80096b6:	6822      	ldr	r2, [r4, #0]
 80096b8:	2308      	movs	r3, #8
 80096ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096be:	6063      	str	r3, [r4, #4]
 80096c0:	6022      	str	r2, [r4, #0]
 80096c2:	6822      	ldr	r2, [r4, #0]
 80096c4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80096c8:	6022      	str	r2, [r4, #0]
 80096ca:	68a2      	ldr	r2, [r4, #8]
 80096cc:	1e51      	subs	r1, r2, #1
 80096ce:	60a1      	str	r1, [r4, #8]
 80096d0:	b192      	cbz	r2, 80096f8 <_scanf_i+0xb8>
 80096d2:	6832      	ldr	r2, [r6, #0]
 80096d4:	1c51      	adds	r1, r2, #1
 80096d6:	6031      	str	r1, [r6, #0]
 80096d8:	7812      	ldrb	r2, [r2, #0]
 80096da:	f805 2b01 	strb.w	r2, [r5], #1
 80096de:	6872      	ldr	r2, [r6, #4]
 80096e0:	3a01      	subs	r2, #1
 80096e2:	2a00      	cmp	r2, #0
 80096e4:	6072      	str	r2, [r6, #4]
 80096e6:	dc07      	bgt.n	80096f8 <_scanf_i+0xb8>
 80096e8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80096ec:	4631      	mov	r1, r6
 80096ee:	4650      	mov	r0, sl
 80096f0:	4790      	blx	r2
 80096f2:	2800      	cmp	r0, #0
 80096f4:	f040 8085 	bne.w	8009802 <_scanf_i+0x1c2>
 80096f8:	f10b 0b01 	add.w	fp, fp, #1
 80096fc:	f1bb 0f03 	cmp.w	fp, #3
 8009700:	d1cb      	bne.n	800969a <_scanf_i+0x5a>
 8009702:	6863      	ldr	r3, [r4, #4]
 8009704:	b90b      	cbnz	r3, 800970a <_scanf_i+0xca>
 8009706:	230a      	movs	r3, #10
 8009708:	6063      	str	r3, [r4, #4]
 800970a:	6863      	ldr	r3, [r4, #4]
 800970c:	4947      	ldr	r1, [pc, #284]	; (800982c <_scanf_i+0x1ec>)
 800970e:	6960      	ldr	r0, [r4, #20]
 8009710:	1ac9      	subs	r1, r1, r3
 8009712:	f000 f8b9 	bl	8009888 <__sccl>
 8009716:	f04f 0b00 	mov.w	fp, #0
 800971a:	68a3      	ldr	r3, [r4, #8]
 800971c:	6822      	ldr	r2, [r4, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d03d      	beq.n	800979e <_scanf_i+0x15e>
 8009722:	6831      	ldr	r1, [r6, #0]
 8009724:	6960      	ldr	r0, [r4, #20]
 8009726:	f891 c000 	ldrb.w	ip, [r1]
 800972a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800972e:	2800      	cmp	r0, #0
 8009730:	d035      	beq.n	800979e <_scanf_i+0x15e>
 8009732:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009736:	d124      	bne.n	8009782 <_scanf_i+0x142>
 8009738:	0510      	lsls	r0, r2, #20
 800973a:	d522      	bpl.n	8009782 <_scanf_i+0x142>
 800973c:	f10b 0b01 	add.w	fp, fp, #1
 8009740:	f1b9 0f00 	cmp.w	r9, #0
 8009744:	d003      	beq.n	800974e <_scanf_i+0x10e>
 8009746:	3301      	adds	r3, #1
 8009748:	f109 39ff 	add.w	r9, r9, #4294967295
 800974c:	60a3      	str	r3, [r4, #8]
 800974e:	6873      	ldr	r3, [r6, #4]
 8009750:	3b01      	subs	r3, #1
 8009752:	2b00      	cmp	r3, #0
 8009754:	6073      	str	r3, [r6, #4]
 8009756:	dd1b      	ble.n	8009790 <_scanf_i+0x150>
 8009758:	6833      	ldr	r3, [r6, #0]
 800975a:	3301      	adds	r3, #1
 800975c:	6033      	str	r3, [r6, #0]
 800975e:	68a3      	ldr	r3, [r4, #8]
 8009760:	3b01      	subs	r3, #1
 8009762:	60a3      	str	r3, [r4, #8]
 8009764:	e7d9      	b.n	800971a <_scanf_i+0xda>
 8009766:	f1bb 0f02 	cmp.w	fp, #2
 800976a:	d1ae      	bne.n	80096ca <_scanf_i+0x8a>
 800976c:	6822      	ldr	r2, [r4, #0]
 800976e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009772:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009776:	d1bf      	bne.n	80096f8 <_scanf_i+0xb8>
 8009778:	2310      	movs	r3, #16
 800977a:	6063      	str	r3, [r4, #4]
 800977c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009780:	e7a2      	b.n	80096c8 <_scanf_i+0x88>
 8009782:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009786:	6022      	str	r2, [r4, #0]
 8009788:	780b      	ldrb	r3, [r1, #0]
 800978a:	f805 3b01 	strb.w	r3, [r5], #1
 800978e:	e7de      	b.n	800974e <_scanf_i+0x10e>
 8009790:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009794:	4631      	mov	r1, r6
 8009796:	4650      	mov	r0, sl
 8009798:	4798      	blx	r3
 800979a:	2800      	cmp	r0, #0
 800979c:	d0df      	beq.n	800975e <_scanf_i+0x11e>
 800979e:	6823      	ldr	r3, [r4, #0]
 80097a0:	05db      	lsls	r3, r3, #23
 80097a2:	d50d      	bpl.n	80097c0 <_scanf_i+0x180>
 80097a4:	42bd      	cmp	r5, r7
 80097a6:	d909      	bls.n	80097bc <_scanf_i+0x17c>
 80097a8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80097ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097b0:	4632      	mov	r2, r6
 80097b2:	4650      	mov	r0, sl
 80097b4:	4798      	blx	r3
 80097b6:	f105 39ff 	add.w	r9, r5, #4294967295
 80097ba:	464d      	mov	r5, r9
 80097bc:	42bd      	cmp	r5, r7
 80097be:	d02d      	beq.n	800981c <_scanf_i+0x1dc>
 80097c0:	6822      	ldr	r2, [r4, #0]
 80097c2:	f012 0210 	ands.w	r2, r2, #16
 80097c6:	d113      	bne.n	80097f0 <_scanf_i+0x1b0>
 80097c8:	702a      	strb	r2, [r5, #0]
 80097ca:	6863      	ldr	r3, [r4, #4]
 80097cc:	9e01      	ldr	r6, [sp, #4]
 80097ce:	4639      	mov	r1, r7
 80097d0:	4650      	mov	r0, sl
 80097d2:	47b0      	blx	r6
 80097d4:	6821      	ldr	r1, [r4, #0]
 80097d6:	f8d8 3000 	ldr.w	r3, [r8]
 80097da:	f011 0f20 	tst.w	r1, #32
 80097de:	d013      	beq.n	8009808 <_scanf_i+0x1c8>
 80097e0:	1d1a      	adds	r2, r3, #4
 80097e2:	f8c8 2000 	str.w	r2, [r8]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	6018      	str	r0, [r3, #0]
 80097ea:	68e3      	ldr	r3, [r4, #12]
 80097ec:	3301      	adds	r3, #1
 80097ee:	60e3      	str	r3, [r4, #12]
 80097f0:	1bed      	subs	r5, r5, r7
 80097f2:	44ab      	add	fp, r5
 80097f4:	6925      	ldr	r5, [r4, #16]
 80097f6:	445d      	add	r5, fp
 80097f8:	6125      	str	r5, [r4, #16]
 80097fa:	2000      	movs	r0, #0
 80097fc:	b007      	add	sp, #28
 80097fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009802:	f04f 0b00 	mov.w	fp, #0
 8009806:	e7ca      	b.n	800979e <_scanf_i+0x15e>
 8009808:	1d1a      	adds	r2, r3, #4
 800980a:	f8c8 2000 	str.w	r2, [r8]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f011 0f01 	tst.w	r1, #1
 8009814:	bf14      	ite	ne
 8009816:	8018      	strhne	r0, [r3, #0]
 8009818:	6018      	streq	r0, [r3, #0]
 800981a:	e7e6      	b.n	80097ea <_scanf_i+0x1aa>
 800981c:	2001      	movs	r0, #1
 800981e:	e7ed      	b.n	80097fc <_scanf_i+0x1bc>
 8009820:	0800bec0 	.word	0x0800bec0
 8009824:	08009a05 	.word	0x08009a05
 8009828:	08006f25 	.word	0x08006f25
 800982c:	0800c2e6 	.word	0x0800c2e6

08009830 <_read_r>:
 8009830:	b538      	push	{r3, r4, r5, lr}
 8009832:	4d07      	ldr	r5, [pc, #28]	; (8009850 <_read_r+0x20>)
 8009834:	4604      	mov	r4, r0
 8009836:	4608      	mov	r0, r1
 8009838:	4611      	mov	r1, r2
 800983a:	2200      	movs	r2, #0
 800983c:	602a      	str	r2, [r5, #0]
 800983e:	461a      	mov	r2, r3
 8009840:	f7f9 f86f 	bl	8002922 <_read>
 8009844:	1c43      	adds	r3, r0, #1
 8009846:	d102      	bne.n	800984e <_read_r+0x1e>
 8009848:	682b      	ldr	r3, [r5, #0]
 800984a:	b103      	cbz	r3, 800984e <_read_r+0x1e>
 800984c:	6023      	str	r3, [r4, #0]
 800984e:	bd38      	pop	{r3, r4, r5, pc}
 8009850:	20000d08 	.word	0x20000d08
 8009854:	00000000 	.word	0x00000000

08009858 <nan>:
 8009858:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009860 <nan+0x8>
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	00000000 	.word	0x00000000
 8009864:	7ff80000 	.word	0x7ff80000

08009868 <_sbrk_r>:
 8009868:	b538      	push	{r3, r4, r5, lr}
 800986a:	4d06      	ldr	r5, [pc, #24]	; (8009884 <_sbrk_r+0x1c>)
 800986c:	2300      	movs	r3, #0
 800986e:	4604      	mov	r4, r0
 8009870:	4608      	mov	r0, r1
 8009872:	602b      	str	r3, [r5, #0]
 8009874:	f7f9 f8c2 	bl	80029fc <_sbrk>
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	d102      	bne.n	8009882 <_sbrk_r+0x1a>
 800987c:	682b      	ldr	r3, [r5, #0]
 800987e:	b103      	cbz	r3, 8009882 <_sbrk_r+0x1a>
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	bd38      	pop	{r3, r4, r5, pc}
 8009884:	20000d08 	.word	0x20000d08

08009888 <__sccl>:
 8009888:	b570      	push	{r4, r5, r6, lr}
 800988a:	780b      	ldrb	r3, [r1, #0]
 800988c:	4604      	mov	r4, r0
 800988e:	2b5e      	cmp	r3, #94	; 0x5e
 8009890:	bf0b      	itete	eq
 8009892:	784b      	ldrbeq	r3, [r1, #1]
 8009894:	1c48      	addne	r0, r1, #1
 8009896:	1c88      	addeq	r0, r1, #2
 8009898:	2200      	movne	r2, #0
 800989a:	bf08      	it	eq
 800989c:	2201      	moveq	r2, #1
 800989e:	1e61      	subs	r1, r4, #1
 80098a0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80098a4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80098a8:	42a9      	cmp	r1, r5
 80098aa:	d1fb      	bne.n	80098a4 <__sccl+0x1c>
 80098ac:	b90b      	cbnz	r3, 80098b2 <__sccl+0x2a>
 80098ae:	3801      	subs	r0, #1
 80098b0:	bd70      	pop	{r4, r5, r6, pc}
 80098b2:	f082 0201 	eor.w	r2, r2, #1
 80098b6:	54e2      	strb	r2, [r4, r3]
 80098b8:	4605      	mov	r5, r0
 80098ba:	4628      	mov	r0, r5
 80098bc:	f810 1b01 	ldrb.w	r1, [r0], #1
 80098c0:	292d      	cmp	r1, #45	; 0x2d
 80098c2:	d006      	beq.n	80098d2 <__sccl+0x4a>
 80098c4:	295d      	cmp	r1, #93	; 0x5d
 80098c6:	d0f3      	beq.n	80098b0 <__sccl+0x28>
 80098c8:	b909      	cbnz	r1, 80098ce <__sccl+0x46>
 80098ca:	4628      	mov	r0, r5
 80098cc:	e7f0      	b.n	80098b0 <__sccl+0x28>
 80098ce:	460b      	mov	r3, r1
 80098d0:	e7f1      	b.n	80098b6 <__sccl+0x2e>
 80098d2:	786e      	ldrb	r6, [r5, #1]
 80098d4:	2e5d      	cmp	r6, #93	; 0x5d
 80098d6:	d0fa      	beq.n	80098ce <__sccl+0x46>
 80098d8:	42b3      	cmp	r3, r6
 80098da:	dcf8      	bgt.n	80098ce <__sccl+0x46>
 80098dc:	3502      	adds	r5, #2
 80098de:	4619      	mov	r1, r3
 80098e0:	3101      	adds	r1, #1
 80098e2:	428e      	cmp	r6, r1
 80098e4:	5462      	strb	r2, [r4, r1]
 80098e6:	dcfb      	bgt.n	80098e0 <__sccl+0x58>
 80098e8:	1af1      	subs	r1, r6, r3
 80098ea:	3901      	subs	r1, #1
 80098ec:	1c58      	adds	r0, r3, #1
 80098ee:	42b3      	cmp	r3, r6
 80098f0:	bfa8      	it	ge
 80098f2:	2100      	movge	r1, #0
 80098f4:	1843      	adds	r3, r0, r1
 80098f6:	e7e0      	b.n	80098ba <__sccl+0x32>

080098f8 <strncmp>:
 80098f8:	b510      	push	{r4, lr}
 80098fa:	b17a      	cbz	r2, 800991c <strncmp+0x24>
 80098fc:	4603      	mov	r3, r0
 80098fe:	3901      	subs	r1, #1
 8009900:	1884      	adds	r4, r0, r2
 8009902:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009906:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800990a:	4290      	cmp	r0, r2
 800990c:	d101      	bne.n	8009912 <strncmp+0x1a>
 800990e:	42a3      	cmp	r3, r4
 8009910:	d101      	bne.n	8009916 <strncmp+0x1e>
 8009912:	1a80      	subs	r0, r0, r2
 8009914:	bd10      	pop	{r4, pc}
 8009916:	2800      	cmp	r0, #0
 8009918:	d1f3      	bne.n	8009902 <strncmp+0xa>
 800991a:	e7fa      	b.n	8009912 <strncmp+0x1a>
 800991c:	4610      	mov	r0, r2
 800991e:	e7f9      	b.n	8009914 <strncmp+0x1c>

08009920 <_strtoul_l.constprop.0>:
 8009920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009924:	4f36      	ldr	r7, [pc, #216]	; (8009a00 <_strtoul_l.constprop.0+0xe0>)
 8009926:	4686      	mov	lr, r0
 8009928:	460d      	mov	r5, r1
 800992a:	4628      	mov	r0, r5
 800992c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009930:	5de6      	ldrb	r6, [r4, r7]
 8009932:	f016 0608 	ands.w	r6, r6, #8
 8009936:	d1f8      	bne.n	800992a <_strtoul_l.constprop.0+0xa>
 8009938:	2c2d      	cmp	r4, #45	; 0x2d
 800993a:	d12f      	bne.n	800999c <_strtoul_l.constprop.0+0x7c>
 800993c:	782c      	ldrb	r4, [r5, #0]
 800993e:	2601      	movs	r6, #1
 8009940:	1c85      	adds	r5, r0, #2
 8009942:	2b00      	cmp	r3, #0
 8009944:	d057      	beq.n	80099f6 <_strtoul_l.constprop.0+0xd6>
 8009946:	2b10      	cmp	r3, #16
 8009948:	d109      	bne.n	800995e <_strtoul_l.constprop.0+0x3e>
 800994a:	2c30      	cmp	r4, #48	; 0x30
 800994c:	d107      	bne.n	800995e <_strtoul_l.constprop.0+0x3e>
 800994e:	7828      	ldrb	r0, [r5, #0]
 8009950:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009954:	2858      	cmp	r0, #88	; 0x58
 8009956:	d149      	bne.n	80099ec <_strtoul_l.constprop.0+0xcc>
 8009958:	786c      	ldrb	r4, [r5, #1]
 800995a:	2310      	movs	r3, #16
 800995c:	3502      	adds	r5, #2
 800995e:	f04f 38ff 	mov.w	r8, #4294967295
 8009962:	2700      	movs	r7, #0
 8009964:	fbb8 f8f3 	udiv	r8, r8, r3
 8009968:	fb03 f908 	mul.w	r9, r3, r8
 800996c:	ea6f 0909 	mvn.w	r9, r9
 8009970:	4638      	mov	r0, r7
 8009972:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009976:	f1bc 0f09 	cmp.w	ip, #9
 800997a:	d814      	bhi.n	80099a6 <_strtoul_l.constprop.0+0x86>
 800997c:	4664      	mov	r4, ip
 800997e:	42a3      	cmp	r3, r4
 8009980:	dd22      	ble.n	80099c8 <_strtoul_l.constprop.0+0xa8>
 8009982:	2f00      	cmp	r7, #0
 8009984:	db1d      	blt.n	80099c2 <_strtoul_l.constprop.0+0xa2>
 8009986:	4580      	cmp	r8, r0
 8009988:	d31b      	bcc.n	80099c2 <_strtoul_l.constprop.0+0xa2>
 800998a:	d101      	bne.n	8009990 <_strtoul_l.constprop.0+0x70>
 800998c:	45a1      	cmp	r9, r4
 800998e:	db18      	blt.n	80099c2 <_strtoul_l.constprop.0+0xa2>
 8009990:	fb00 4003 	mla	r0, r0, r3, r4
 8009994:	2701      	movs	r7, #1
 8009996:	f815 4b01 	ldrb.w	r4, [r5], #1
 800999a:	e7ea      	b.n	8009972 <_strtoul_l.constprop.0+0x52>
 800999c:	2c2b      	cmp	r4, #43	; 0x2b
 800999e:	bf04      	itt	eq
 80099a0:	782c      	ldrbeq	r4, [r5, #0]
 80099a2:	1c85      	addeq	r5, r0, #2
 80099a4:	e7cd      	b.n	8009942 <_strtoul_l.constprop.0+0x22>
 80099a6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80099aa:	f1bc 0f19 	cmp.w	ip, #25
 80099ae:	d801      	bhi.n	80099b4 <_strtoul_l.constprop.0+0x94>
 80099b0:	3c37      	subs	r4, #55	; 0x37
 80099b2:	e7e4      	b.n	800997e <_strtoul_l.constprop.0+0x5e>
 80099b4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80099b8:	f1bc 0f19 	cmp.w	ip, #25
 80099bc:	d804      	bhi.n	80099c8 <_strtoul_l.constprop.0+0xa8>
 80099be:	3c57      	subs	r4, #87	; 0x57
 80099c0:	e7dd      	b.n	800997e <_strtoul_l.constprop.0+0x5e>
 80099c2:	f04f 37ff 	mov.w	r7, #4294967295
 80099c6:	e7e6      	b.n	8009996 <_strtoul_l.constprop.0+0x76>
 80099c8:	2f00      	cmp	r7, #0
 80099ca:	da07      	bge.n	80099dc <_strtoul_l.constprop.0+0xbc>
 80099cc:	2322      	movs	r3, #34	; 0x22
 80099ce:	f8ce 3000 	str.w	r3, [lr]
 80099d2:	f04f 30ff 	mov.w	r0, #4294967295
 80099d6:	b932      	cbnz	r2, 80099e6 <_strtoul_l.constprop.0+0xc6>
 80099d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099dc:	b106      	cbz	r6, 80099e0 <_strtoul_l.constprop.0+0xc0>
 80099de:	4240      	negs	r0, r0
 80099e0:	2a00      	cmp	r2, #0
 80099e2:	d0f9      	beq.n	80099d8 <_strtoul_l.constprop.0+0xb8>
 80099e4:	b107      	cbz	r7, 80099e8 <_strtoul_l.constprop.0+0xc8>
 80099e6:	1e69      	subs	r1, r5, #1
 80099e8:	6011      	str	r1, [r2, #0]
 80099ea:	e7f5      	b.n	80099d8 <_strtoul_l.constprop.0+0xb8>
 80099ec:	2430      	movs	r4, #48	; 0x30
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d1b5      	bne.n	800995e <_strtoul_l.constprop.0+0x3e>
 80099f2:	2308      	movs	r3, #8
 80099f4:	e7b3      	b.n	800995e <_strtoul_l.constprop.0+0x3e>
 80099f6:	2c30      	cmp	r4, #48	; 0x30
 80099f8:	d0a9      	beq.n	800994e <_strtoul_l.constprop.0+0x2e>
 80099fa:	230a      	movs	r3, #10
 80099fc:	e7af      	b.n	800995e <_strtoul_l.constprop.0+0x3e>
 80099fe:	bf00      	nop
 8009a00:	0800bf59 	.word	0x0800bf59

08009a04 <_strtoul_r>:
 8009a04:	f7ff bf8c 	b.w	8009920 <_strtoul_l.constprop.0>

08009a08 <__submore>:
 8009a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a0c:	460c      	mov	r4, r1
 8009a0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a14:	4299      	cmp	r1, r3
 8009a16:	d11d      	bne.n	8009a54 <__submore+0x4c>
 8009a18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009a1c:	f7ff fa14 	bl	8008e48 <_malloc_r>
 8009a20:	b918      	cbnz	r0, 8009a2a <__submore+0x22>
 8009a22:	f04f 30ff 	mov.w	r0, #4294967295
 8009a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a2e:	63a3      	str	r3, [r4, #56]	; 0x38
 8009a30:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009a34:	6360      	str	r0, [r4, #52]	; 0x34
 8009a36:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009a3a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009a3e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009a42:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009a46:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009a4a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009a4e:	6020      	str	r0, [r4, #0]
 8009a50:	2000      	movs	r0, #0
 8009a52:	e7e8      	b.n	8009a26 <__submore+0x1e>
 8009a54:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009a56:	0077      	lsls	r7, r6, #1
 8009a58:	463a      	mov	r2, r7
 8009a5a:	f000 fa2d 	bl	8009eb8 <_realloc_r>
 8009a5e:	4605      	mov	r5, r0
 8009a60:	2800      	cmp	r0, #0
 8009a62:	d0de      	beq.n	8009a22 <__submore+0x1a>
 8009a64:	eb00 0806 	add.w	r8, r0, r6
 8009a68:	4601      	mov	r1, r0
 8009a6a:	4632      	mov	r2, r6
 8009a6c:	4640      	mov	r0, r8
 8009a6e:	f7fe fc99 	bl	80083a4 <memcpy>
 8009a72:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009a76:	f8c4 8000 	str.w	r8, [r4]
 8009a7a:	e7e9      	b.n	8009a50 <__submore+0x48>

08009a7c <__ascii_wctomb>:
 8009a7c:	b149      	cbz	r1, 8009a92 <__ascii_wctomb+0x16>
 8009a7e:	2aff      	cmp	r2, #255	; 0xff
 8009a80:	bf85      	ittet	hi
 8009a82:	238a      	movhi	r3, #138	; 0x8a
 8009a84:	6003      	strhi	r3, [r0, #0]
 8009a86:	700a      	strbls	r2, [r1, #0]
 8009a88:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a8c:	bf98      	it	ls
 8009a8e:	2001      	movls	r0, #1
 8009a90:	4770      	bx	lr
 8009a92:	4608      	mov	r0, r1
 8009a94:	4770      	bx	lr
	...

08009a98 <__assert_func>:
 8009a98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a9a:	4614      	mov	r4, r2
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	4b09      	ldr	r3, [pc, #36]	; (8009ac4 <__assert_func+0x2c>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4605      	mov	r5, r0
 8009aa4:	68d8      	ldr	r0, [r3, #12]
 8009aa6:	b14c      	cbz	r4, 8009abc <__assert_func+0x24>
 8009aa8:	4b07      	ldr	r3, [pc, #28]	; (8009ac8 <__assert_func+0x30>)
 8009aaa:	9100      	str	r1, [sp, #0]
 8009aac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ab0:	4906      	ldr	r1, [pc, #24]	; (8009acc <__assert_func+0x34>)
 8009ab2:	462b      	mov	r3, r5
 8009ab4:	f000 f9a6 	bl	8009e04 <fiprintf>
 8009ab8:	f000 fc46 	bl	800a348 <abort>
 8009abc:	4b04      	ldr	r3, [pc, #16]	; (8009ad0 <__assert_func+0x38>)
 8009abe:	461c      	mov	r4, r3
 8009ac0:	e7f3      	b.n	8009aaa <__assert_func+0x12>
 8009ac2:	bf00      	nop
 8009ac4:	20000010 	.word	0x20000010
 8009ac8:	0800c2e8 	.word	0x0800c2e8
 8009acc:	0800c2f5 	.word	0x0800c2f5
 8009ad0:	0800c323 	.word	0x0800c323

08009ad4 <__sflush_r>:
 8009ad4:	898a      	ldrh	r2, [r1, #12]
 8009ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ada:	4605      	mov	r5, r0
 8009adc:	0710      	lsls	r0, r2, #28
 8009ade:	460c      	mov	r4, r1
 8009ae0:	d458      	bmi.n	8009b94 <__sflush_r+0xc0>
 8009ae2:	684b      	ldr	r3, [r1, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	dc05      	bgt.n	8009af4 <__sflush_r+0x20>
 8009ae8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	dc02      	bgt.n	8009af4 <__sflush_r+0x20>
 8009aee:	2000      	movs	r0, #0
 8009af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009af6:	2e00      	cmp	r6, #0
 8009af8:	d0f9      	beq.n	8009aee <__sflush_r+0x1a>
 8009afa:	2300      	movs	r3, #0
 8009afc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b00:	682f      	ldr	r7, [r5, #0]
 8009b02:	602b      	str	r3, [r5, #0]
 8009b04:	d032      	beq.n	8009b6c <__sflush_r+0x98>
 8009b06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b08:	89a3      	ldrh	r3, [r4, #12]
 8009b0a:	075a      	lsls	r2, r3, #29
 8009b0c:	d505      	bpl.n	8009b1a <__sflush_r+0x46>
 8009b0e:	6863      	ldr	r3, [r4, #4]
 8009b10:	1ac0      	subs	r0, r0, r3
 8009b12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b14:	b10b      	cbz	r3, 8009b1a <__sflush_r+0x46>
 8009b16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b18:	1ac0      	subs	r0, r0, r3
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b20:	6a21      	ldr	r1, [r4, #32]
 8009b22:	4628      	mov	r0, r5
 8009b24:	47b0      	blx	r6
 8009b26:	1c43      	adds	r3, r0, #1
 8009b28:	89a3      	ldrh	r3, [r4, #12]
 8009b2a:	d106      	bne.n	8009b3a <__sflush_r+0x66>
 8009b2c:	6829      	ldr	r1, [r5, #0]
 8009b2e:	291d      	cmp	r1, #29
 8009b30:	d82c      	bhi.n	8009b8c <__sflush_r+0xb8>
 8009b32:	4a2a      	ldr	r2, [pc, #168]	; (8009bdc <__sflush_r+0x108>)
 8009b34:	40ca      	lsrs	r2, r1
 8009b36:	07d6      	lsls	r6, r2, #31
 8009b38:	d528      	bpl.n	8009b8c <__sflush_r+0xb8>
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	6062      	str	r2, [r4, #4]
 8009b3e:	04d9      	lsls	r1, r3, #19
 8009b40:	6922      	ldr	r2, [r4, #16]
 8009b42:	6022      	str	r2, [r4, #0]
 8009b44:	d504      	bpl.n	8009b50 <__sflush_r+0x7c>
 8009b46:	1c42      	adds	r2, r0, #1
 8009b48:	d101      	bne.n	8009b4e <__sflush_r+0x7a>
 8009b4a:	682b      	ldr	r3, [r5, #0]
 8009b4c:	b903      	cbnz	r3, 8009b50 <__sflush_r+0x7c>
 8009b4e:	6560      	str	r0, [r4, #84]	; 0x54
 8009b50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b52:	602f      	str	r7, [r5, #0]
 8009b54:	2900      	cmp	r1, #0
 8009b56:	d0ca      	beq.n	8009aee <__sflush_r+0x1a>
 8009b58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b5c:	4299      	cmp	r1, r3
 8009b5e:	d002      	beq.n	8009b66 <__sflush_r+0x92>
 8009b60:	4628      	mov	r0, r5
 8009b62:	f7ff f905 	bl	8008d70 <_free_r>
 8009b66:	2000      	movs	r0, #0
 8009b68:	6360      	str	r0, [r4, #52]	; 0x34
 8009b6a:	e7c1      	b.n	8009af0 <__sflush_r+0x1c>
 8009b6c:	6a21      	ldr	r1, [r4, #32]
 8009b6e:	2301      	movs	r3, #1
 8009b70:	4628      	mov	r0, r5
 8009b72:	47b0      	blx	r6
 8009b74:	1c41      	adds	r1, r0, #1
 8009b76:	d1c7      	bne.n	8009b08 <__sflush_r+0x34>
 8009b78:	682b      	ldr	r3, [r5, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d0c4      	beq.n	8009b08 <__sflush_r+0x34>
 8009b7e:	2b1d      	cmp	r3, #29
 8009b80:	d001      	beq.n	8009b86 <__sflush_r+0xb2>
 8009b82:	2b16      	cmp	r3, #22
 8009b84:	d101      	bne.n	8009b8a <__sflush_r+0xb6>
 8009b86:	602f      	str	r7, [r5, #0]
 8009b88:	e7b1      	b.n	8009aee <__sflush_r+0x1a>
 8009b8a:	89a3      	ldrh	r3, [r4, #12]
 8009b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b90:	81a3      	strh	r3, [r4, #12]
 8009b92:	e7ad      	b.n	8009af0 <__sflush_r+0x1c>
 8009b94:	690f      	ldr	r7, [r1, #16]
 8009b96:	2f00      	cmp	r7, #0
 8009b98:	d0a9      	beq.n	8009aee <__sflush_r+0x1a>
 8009b9a:	0793      	lsls	r3, r2, #30
 8009b9c:	680e      	ldr	r6, [r1, #0]
 8009b9e:	bf08      	it	eq
 8009ba0:	694b      	ldreq	r3, [r1, #20]
 8009ba2:	600f      	str	r7, [r1, #0]
 8009ba4:	bf18      	it	ne
 8009ba6:	2300      	movne	r3, #0
 8009ba8:	eba6 0807 	sub.w	r8, r6, r7
 8009bac:	608b      	str	r3, [r1, #8]
 8009bae:	f1b8 0f00 	cmp.w	r8, #0
 8009bb2:	dd9c      	ble.n	8009aee <__sflush_r+0x1a>
 8009bb4:	6a21      	ldr	r1, [r4, #32]
 8009bb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009bb8:	4643      	mov	r3, r8
 8009bba:	463a      	mov	r2, r7
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	47b0      	blx	r6
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	dc06      	bgt.n	8009bd2 <__sflush_r+0xfe>
 8009bc4:	89a3      	ldrh	r3, [r4, #12]
 8009bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bca:	81a3      	strh	r3, [r4, #12]
 8009bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd0:	e78e      	b.n	8009af0 <__sflush_r+0x1c>
 8009bd2:	4407      	add	r7, r0
 8009bd4:	eba8 0800 	sub.w	r8, r8, r0
 8009bd8:	e7e9      	b.n	8009bae <__sflush_r+0xda>
 8009bda:	bf00      	nop
 8009bdc:	20400001 	.word	0x20400001

08009be0 <_fflush_r>:
 8009be0:	b538      	push	{r3, r4, r5, lr}
 8009be2:	690b      	ldr	r3, [r1, #16]
 8009be4:	4605      	mov	r5, r0
 8009be6:	460c      	mov	r4, r1
 8009be8:	b913      	cbnz	r3, 8009bf0 <_fflush_r+0x10>
 8009bea:	2500      	movs	r5, #0
 8009bec:	4628      	mov	r0, r5
 8009bee:	bd38      	pop	{r3, r4, r5, pc}
 8009bf0:	b118      	cbz	r0, 8009bfa <_fflush_r+0x1a>
 8009bf2:	6983      	ldr	r3, [r0, #24]
 8009bf4:	b90b      	cbnz	r3, 8009bfa <_fflush_r+0x1a>
 8009bf6:	f000 f887 	bl	8009d08 <__sinit>
 8009bfa:	4b14      	ldr	r3, [pc, #80]	; (8009c4c <_fflush_r+0x6c>)
 8009bfc:	429c      	cmp	r4, r3
 8009bfe:	d11b      	bne.n	8009c38 <_fflush_r+0x58>
 8009c00:	686c      	ldr	r4, [r5, #4]
 8009c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d0ef      	beq.n	8009bea <_fflush_r+0xa>
 8009c0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c0c:	07d0      	lsls	r0, r2, #31
 8009c0e:	d404      	bmi.n	8009c1a <_fflush_r+0x3a>
 8009c10:	0599      	lsls	r1, r3, #22
 8009c12:	d402      	bmi.n	8009c1a <_fflush_r+0x3a>
 8009c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c16:	f000 f927 	bl	8009e68 <__retarget_lock_acquire_recursive>
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	4621      	mov	r1, r4
 8009c1e:	f7ff ff59 	bl	8009ad4 <__sflush_r>
 8009c22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c24:	07da      	lsls	r2, r3, #31
 8009c26:	4605      	mov	r5, r0
 8009c28:	d4e0      	bmi.n	8009bec <_fflush_r+0xc>
 8009c2a:	89a3      	ldrh	r3, [r4, #12]
 8009c2c:	059b      	lsls	r3, r3, #22
 8009c2e:	d4dd      	bmi.n	8009bec <_fflush_r+0xc>
 8009c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c32:	f000 f91a 	bl	8009e6a <__retarget_lock_release_recursive>
 8009c36:	e7d9      	b.n	8009bec <_fflush_r+0xc>
 8009c38:	4b05      	ldr	r3, [pc, #20]	; (8009c50 <_fflush_r+0x70>)
 8009c3a:	429c      	cmp	r4, r3
 8009c3c:	d101      	bne.n	8009c42 <_fflush_r+0x62>
 8009c3e:	68ac      	ldr	r4, [r5, #8]
 8009c40:	e7df      	b.n	8009c02 <_fflush_r+0x22>
 8009c42:	4b04      	ldr	r3, [pc, #16]	; (8009c54 <_fflush_r+0x74>)
 8009c44:	429c      	cmp	r4, r3
 8009c46:	bf08      	it	eq
 8009c48:	68ec      	ldreq	r4, [r5, #12]
 8009c4a:	e7da      	b.n	8009c02 <_fflush_r+0x22>
 8009c4c:	0800c344 	.word	0x0800c344
 8009c50:	0800c364 	.word	0x0800c364
 8009c54:	0800c324 	.word	0x0800c324

08009c58 <std>:
 8009c58:	2300      	movs	r3, #0
 8009c5a:	b510      	push	{r4, lr}
 8009c5c:	4604      	mov	r4, r0
 8009c5e:	e9c0 3300 	strd	r3, r3, [r0]
 8009c62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c66:	6083      	str	r3, [r0, #8]
 8009c68:	8181      	strh	r1, [r0, #12]
 8009c6a:	6643      	str	r3, [r0, #100]	; 0x64
 8009c6c:	81c2      	strh	r2, [r0, #14]
 8009c6e:	6183      	str	r3, [r0, #24]
 8009c70:	4619      	mov	r1, r3
 8009c72:	2208      	movs	r2, #8
 8009c74:	305c      	adds	r0, #92	; 0x5c
 8009c76:	f7fb fb8f 	bl	8005398 <memset>
 8009c7a:	4b05      	ldr	r3, [pc, #20]	; (8009c90 <std+0x38>)
 8009c7c:	6263      	str	r3, [r4, #36]	; 0x24
 8009c7e:	4b05      	ldr	r3, [pc, #20]	; (8009c94 <std+0x3c>)
 8009c80:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c82:	4b05      	ldr	r3, [pc, #20]	; (8009c98 <std+0x40>)
 8009c84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c86:	4b05      	ldr	r3, [pc, #20]	; (8009c9c <std+0x44>)
 8009c88:	6224      	str	r4, [r4, #32]
 8009c8a:	6323      	str	r3, [r4, #48]	; 0x30
 8009c8c:	bd10      	pop	{r4, pc}
 8009c8e:	bf00      	nop
 8009c90:	08006141 	.word	0x08006141
 8009c94:	08006167 	.word	0x08006167
 8009c98:	0800619f 	.word	0x0800619f
 8009c9c:	080061c3 	.word	0x080061c3

08009ca0 <_cleanup_r>:
 8009ca0:	4901      	ldr	r1, [pc, #4]	; (8009ca8 <_cleanup_r+0x8>)
 8009ca2:	f000 b8c1 	b.w	8009e28 <_fwalk_reent>
 8009ca6:	bf00      	nop
 8009ca8:	08009be1 	.word	0x08009be1

08009cac <__sfmoreglue>:
 8009cac:	b570      	push	{r4, r5, r6, lr}
 8009cae:	2268      	movs	r2, #104	; 0x68
 8009cb0:	1e4d      	subs	r5, r1, #1
 8009cb2:	4355      	muls	r5, r2
 8009cb4:	460e      	mov	r6, r1
 8009cb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009cba:	f7ff f8c5 	bl	8008e48 <_malloc_r>
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	b140      	cbz	r0, 8009cd4 <__sfmoreglue+0x28>
 8009cc2:	2100      	movs	r1, #0
 8009cc4:	e9c0 1600 	strd	r1, r6, [r0]
 8009cc8:	300c      	adds	r0, #12
 8009cca:	60a0      	str	r0, [r4, #8]
 8009ccc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009cd0:	f7fb fb62 	bl	8005398 <memset>
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	bd70      	pop	{r4, r5, r6, pc}

08009cd8 <__sfp_lock_acquire>:
 8009cd8:	4801      	ldr	r0, [pc, #4]	; (8009ce0 <__sfp_lock_acquire+0x8>)
 8009cda:	f000 b8c5 	b.w	8009e68 <__retarget_lock_acquire_recursive>
 8009cde:	bf00      	nop
 8009ce0:	20000d0d 	.word	0x20000d0d

08009ce4 <__sfp_lock_release>:
 8009ce4:	4801      	ldr	r0, [pc, #4]	; (8009cec <__sfp_lock_release+0x8>)
 8009ce6:	f000 b8c0 	b.w	8009e6a <__retarget_lock_release_recursive>
 8009cea:	bf00      	nop
 8009cec:	20000d0d 	.word	0x20000d0d

08009cf0 <__sinit_lock_acquire>:
 8009cf0:	4801      	ldr	r0, [pc, #4]	; (8009cf8 <__sinit_lock_acquire+0x8>)
 8009cf2:	f000 b8b9 	b.w	8009e68 <__retarget_lock_acquire_recursive>
 8009cf6:	bf00      	nop
 8009cf8:	20000d0e 	.word	0x20000d0e

08009cfc <__sinit_lock_release>:
 8009cfc:	4801      	ldr	r0, [pc, #4]	; (8009d04 <__sinit_lock_release+0x8>)
 8009cfe:	f000 b8b4 	b.w	8009e6a <__retarget_lock_release_recursive>
 8009d02:	bf00      	nop
 8009d04:	20000d0e 	.word	0x20000d0e

08009d08 <__sinit>:
 8009d08:	b510      	push	{r4, lr}
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	f7ff fff0 	bl	8009cf0 <__sinit_lock_acquire>
 8009d10:	69a3      	ldr	r3, [r4, #24]
 8009d12:	b11b      	cbz	r3, 8009d1c <__sinit+0x14>
 8009d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d18:	f7ff bff0 	b.w	8009cfc <__sinit_lock_release>
 8009d1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009d20:	6523      	str	r3, [r4, #80]	; 0x50
 8009d22:	4b13      	ldr	r3, [pc, #76]	; (8009d70 <__sinit+0x68>)
 8009d24:	4a13      	ldr	r2, [pc, #76]	; (8009d74 <__sinit+0x6c>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d2a:	42a3      	cmp	r3, r4
 8009d2c:	bf04      	itt	eq
 8009d2e:	2301      	moveq	r3, #1
 8009d30:	61a3      	streq	r3, [r4, #24]
 8009d32:	4620      	mov	r0, r4
 8009d34:	f000 f820 	bl	8009d78 <__sfp>
 8009d38:	6060      	str	r0, [r4, #4]
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f000 f81c 	bl	8009d78 <__sfp>
 8009d40:	60a0      	str	r0, [r4, #8]
 8009d42:	4620      	mov	r0, r4
 8009d44:	f000 f818 	bl	8009d78 <__sfp>
 8009d48:	2200      	movs	r2, #0
 8009d4a:	60e0      	str	r0, [r4, #12]
 8009d4c:	2104      	movs	r1, #4
 8009d4e:	6860      	ldr	r0, [r4, #4]
 8009d50:	f7ff ff82 	bl	8009c58 <std>
 8009d54:	68a0      	ldr	r0, [r4, #8]
 8009d56:	2201      	movs	r2, #1
 8009d58:	2109      	movs	r1, #9
 8009d5a:	f7ff ff7d 	bl	8009c58 <std>
 8009d5e:	68e0      	ldr	r0, [r4, #12]
 8009d60:	2202      	movs	r2, #2
 8009d62:	2112      	movs	r1, #18
 8009d64:	f7ff ff78 	bl	8009c58 <std>
 8009d68:	2301      	movs	r3, #1
 8009d6a:	61a3      	str	r3, [r4, #24]
 8009d6c:	e7d2      	b.n	8009d14 <__sinit+0xc>
 8009d6e:	bf00      	nop
 8009d70:	0800becc 	.word	0x0800becc
 8009d74:	08009ca1 	.word	0x08009ca1

08009d78 <__sfp>:
 8009d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d7a:	4607      	mov	r7, r0
 8009d7c:	f7ff ffac 	bl	8009cd8 <__sfp_lock_acquire>
 8009d80:	4b1e      	ldr	r3, [pc, #120]	; (8009dfc <__sfp+0x84>)
 8009d82:	681e      	ldr	r6, [r3, #0]
 8009d84:	69b3      	ldr	r3, [r6, #24]
 8009d86:	b913      	cbnz	r3, 8009d8e <__sfp+0x16>
 8009d88:	4630      	mov	r0, r6
 8009d8a:	f7ff ffbd 	bl	8009d08 <__sinit>
 8009d8e:	3648      	adds	r6, #72	; 0x48
 8009d90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d94:	3b01      	subs	r3, #1
 8009d96:	d503      	bpl.n	8009da0 <__sfp+0x28>
 8009d98:	6833      	ldr	r3, [r6, #0]
 8009d9a:	b30b      	cbz	r3, 8009de0 <__sfp+0x68>
 8009d9c:	6836      	ldr	r6, [r6, #0]
 8009d9e:	e7f7      	b.n	8009d90 <__sfp+0x18>
 8009da0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009da4:	b9d5      	cbnz	r5, 8009ddc <__sfp+0x64>
 8009da6:	4b16      	ldr	r3, [pc, #88]	; (8009e00 <__sfp+0x88>)
 8009da8:	60e3      	str	r3, [r4, #12]
 8009daa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009dae:	6665      	str	r5, [r4, #100]	; 0x64
 8009db0:	f000 f859 	bl	8009e66 <__retarget_lock_init_recursive>
 8009db4:	f7ff ff96 	bl	8009ce4 <__sfp_lock_release>
 8009db8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009dbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009dc0:	6025      	str	r5, [r4, #0]
 8009dc2:	61a5      	str	r5, [r4, #24]
 8009dc4:	2208      	movs	r2, #8
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009dcc:	f7fb fae4 	bl	8005398 <memset>
 8009dd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009dd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009dd8:	4620      	mov	r0, r4
 8009dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ddc:	3468      	adds	r4, #104	; 0x68
 8009dde:	e7d9      	b.n	8009d94 <__sfp+0x1c>
 8009de0:	2104      	movs	r1, #4
 8009de2:	4638      	mov	r0, r7
 8009de4:	f7ff ff62 	bl	8009cac <__sfmoreglue>
 8009de8:	4604      	mov	r4, r0
 8009dea:	6030      	str	r0, [r6, #0]
 8009dec:	2800      	cmp	r0, #0
 8009dee:	d1d5      	bne.n	8009d9c <__sfp+0x24>
 8009df0:	f7ff ff78 	bl	8009ce4 <__sfp_lock_release>
 8009df4:	230c      	movs	r3, #12
 8009df6:	603b      	str	r3, [r7, #0]
 8009df8:	e7ee      	b.n	8009dd8 <__sfp+0x60>
 8009dfa:	bf00      	nop
 8009dfc:	0800becc 	.word	0x0800becc
 8009e00:	ffff0001 	.word	0xffff0001

08009e04 <fiprintf>:
 8009e04:	b40e      	push	{r1, r2, r3}
 8009e06:	b503      	push	{r0, r1, lr}
 8009e08:	4601      	mov	r1, r0
 8009e0a:	ab03      	add	r3, sp, #12
 8009e0c:	4805      	ldr	r0, [pc, #20]	; (8009e24 <fiprintf+0x20>)
 8009e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e12:	6800      	ldr	r0, [r0, #0]
 8009e14:	9301      	str	r3, [sp, #4]
 8009e16:	f000 f8a7 	bl	8009f68 <_vfiprintf_r>
 8009e1a:	b002      	add	sp, #8
 8009e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e20:	b003      	add	sp, #12
 8009e22:	4770      	bx	lr
 8009e24:	20000010 	.word	0x20000010

08009e28 <_fwalk_reent>:
 8009e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e2c:	4606      	mov	r6, r0
 8009e2e:	4688      	mov	r8, r1
 8009e30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e34:	2700      	movs	r7, #0
 8009e36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e3a:	f1b9 0901 	subs.w	r9, r9, #1
 8009e3e:	d505      	bpl.n	8009e4c <_fwalk_reent+0x24>
 8009e40:	6824      	ldr	r4, [r4, #0]
 8009e42:	2c00      	cmp	r4, #0
 8009e44:	d1f7      	bne.n	8009e36 <_fwalk_reent+0xe>
 8009e46:	4638      	mov	r0, r7
 8009e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e4c:	89ab      	ldrh	r3, [r5, #12]
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d907      	bls.n	8009e62 <_fwalk_reent+0x3a>
 8009e52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e56:	3301      	adds	r3, #1
 8009e58:	d003      	beq.n	8009e62 <_fwalk_reent+0x3a>
 8009e5a:	4629      	mov	r1, r5
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	47c0      	blx	r8
 8009e60:	4307      	orrs	r7, r0
 8009e62:	3568      	adds	r5, #104	; 0x68
 8009e64:	e7e9      	b.n	8009e3a <_fwalk_reent+0x12>

08009e66 <__retarget_lock_init_recursive>:
 8009e66:	4770      	bx	lr

08009e68 <__retarget_lock_acquire_recursive>:
 8009e68:	4770      	bx	lr

08009e6a <__retarget_lock_release_recursive>:
 8009e6a:	4770      	bx	lr

08009e6c <memmove>:
 8009e6c:	4288      	cmp	r0, r1
 8009e6e:	b510      	push	{r4, lr}
 8009e70:	eb01 0402 	add.w	r4, r1, r2
 8009e74:	d902      	bls.n	8009e7c <memmove+0x10>
 8009e76:	4284      	cmp	r4, r0
 8009e78:	4623      	mov	r3, r4
 8009e7a:	d807      	bhi.n	8009e8c <memmove+0x20>
 8009e7c:	1e43      	subs	r3, r0, #1
 8009e7e:	42a1      	cmp	r1, r4
 8009e80:	d008      	beq.n	8009e94 <memmove+0x28>
 8009e82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e8a:	e7f8      	b.n	8009e7e <memmove+0x12>
 8009e8c:	4402      	add	r2, r0
 8009e8e:	4601      	mov	r1, r0
 8009e90:	428a      	cmp	r2, r1
 8009e92:	d100      	bne.n	8009e96 <memmove+0x2a>
 8009e94:	bd10      	pop	{r4, pc}
 8009e96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e9e:	e7f7      	b.n	8009e90 <memmove+0x24>

08009ea0 <__malloc_lock>:
 8009ea0:	4801      	ldr	r0, [pc, #4]	; (8009ea8 <__malloc_lock+0x8>)
 8009ea2:	f7ff bfe1 	b.w	8009e68 <__retarget_lock_acquire_recursive>
 8009ea6:	bf00      	nop
 8009ea8:	20000d0c 	.word	0x20000d0c

08009eac <__malloc_unlock>:
 8009eac:	4801      	ldr	r0, [pc, #4]	; (8009eb4 <__malloc_unlock+0x8>)
 8009eae:	f7ff bfdc 	b.w	8009e6a <__retarget_lock_release_recursive>
 8009eb2:	bf00      	nop
 8009eb4:	20000d0c 	.word	0x20000d0c

08009eb8 <_realloc_r>:
 8009eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ebc:	4680      	mov	r8, r0
 8009ebe:	4614      	mov	r4, r2
 8009ec0:	460e      	mov	r6, r1
 8009ec2:	b921      	cbnz	r1, 8009ece <_realloc_r+0x16>
 8009ec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ec8:	4611      	mov	r1, r2
 8009eca:	f7fe bfbd 	b.w	8008e48 <_malloc_r>
 8009ece:	b92a      	cbnz	r2, 8009edc <_realloc_r+0x24>
 8009ed0:	f7fe ff4e 	bl	8008d70 <_free_r>
 8009ed4:	4625      	mov	r5, r4
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009edc:	f000 faa0 	bl	800a420 <_malloc_usable_size_r>
 8009ee0:	4284      	cmp	r4, r0
 8009ee2:	4607      	mov	r7, r0
 8009ee4:	d802      	bhi.n	8009eec <_realloc_r+0x34>
 8009ee6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009eea:	d812      	bhi.n	8009f12 <_realloc_r+0x5a>
 8009eec:	4621      	mov	r1, r4
 8009eee:	4640      	mov	r0, r8
 8009ef0:	f7fe ffaa 	bl	8008e48 <_malloc_r>
 8009ef4:	4605      	mov	r5, r0
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	d0ed      	beq.n	8009ed6 <_realloc_r+0x1e>
 8009efa:	42bc      	cmp	r4, r7
 8009efc:	4622      	mov	r2, r4
 8009efe:	4631      	mov	r1, r6
 8009f00:	bf28      	it	cs
 8009f02:	463a      	movcs	r2, r7
 8009f04:	f7fe fa4e 	bl	80083a4 <memcpy>
 8009f08:	4631      	mov	r1, r6
 8009f0a:	4640      	mov	r0, r8
 8009f0c:	f7fe ff30 	bl	8008d70 <_free_r>
 8009f10:	e7e1      	b.n	8009ed6 <_realloc_r+0x1e>
 8009f12:	4635      	mov	r5, r6
 8009f14:	e7df      	b.n	8009ed6 <_realloc_r+0x1e>

08009f16 <__sfputc_r>:
 8009f16:	6893      	ldr	r3, [r2, #8]
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	b410      	push	{r4}
 8009f1e:	6093      	str	r3, [r2, #8]
 8009f20:	da08      	bge.n	8009f34 <__sfputc_r+0x1e>
 8009f22:	6994      	ldr	r4, [r2, #24]
 8009f24:	42a3      	cmp	r3, r4
 8009f26:	db01      	blt.n	8009f2c <__sfputc_r+0x16>
 8009f28:	290a      	cmp	r1, #10
 8009f2a:	d103      	bne.n	8009f34 <__sfputc_r+0x1e>
 8009f2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f30:	f000 b94a 	b.w	800a1c8 <__swbuf_r>
 8009f34:	6813      	ldr	r3, [r2, #0]
 8009f36:	1c58      	adds	r0, r3, #1
 8009f38:	6010      	str	r0, [r2, #0]
 8009f3a:	7019      	strb	r1, [r3, #0]
 8009f3c:	4608      	mov	r0, r1
 8009f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <__sfputs_r>:
 8009f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f46:	4606      	mov	r6, r0
 8009f48:	460f      	mov	r7, r1
 8009f4a:	4614      	mov	r4, r2
 8009f4c:	18d5      	adds	r5, r2, r3
 8009f4e:	42ac      	cmp	r4, r5
 8009f50:	d101      	bne.n	8009f56 <__sfputs_r+0x12>
 8009f52:	2000      	movs	r0, #0
 8009f54:	e007      	b.n	8009f66 <__sfputs_r+0x22>
 8009f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f5a:	463a      	mov	r2, r7
 8009f5c:	4630      	mov	r0, r6
 8009f5e:	f7ff ffda 	bl	8009f16 <__sfputc_r>
 8009f62:	1c43      	adds	r3, r0, #1
 8009f64:	d1f3      	bne.n	8009f4e <__sfputs_r+0xa>
 8009f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f68 <_vfiprintf_r>:
 8009f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f6c:	460d      	mov	r5, r1
 8009f6e:	b09d      	sub	sp, #116	; 0x74
 8009f70:	4614      	mov	r4, r2
 8009f72:	4698      	mov	r8, r3
 8009f74:	4606      	mov	r6, r0
 8009f76:	b118      	cbz	r0, 8009f80 <_vfiprintf_r+0x18>
 8009f78:	6983      	ldr	r3, [r0, #24]
 8009f7a:	b90b      	cbnz	r3, 8009f80 <_vfiprintf_r+0x18>
 8009f7c:	f7ff fec4 	bl	8009d08 <__sinit>
 8009f80:	4b89      	ldr	r3, [pc, #548]	; (800a1a8 <_vfiprintf_r+0x240>)
 8009f82:	429d      	cmp	r5, r3
 8009f84:	d11b      	bne.n	8009fbe <_vfiprintf_r+0x56>
 8009f86:	6875      	ldr	r5, [r6, #4]
 8009f88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f8a:	07d9      	lsls	r1, r3, #31
 8009f8c:	d405      	bmi.n	8009f9a <_vfiprintf_r+0x32>
 8009f8e:	89ab      	ldrh	r3, [r5, #12]
 8009f90:	059a      	lsls	r2, r3, #22
 8009f92:	d402      	bmi.n	8009f9a <_vfiprintf_r+0x32>
 8009f94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f96:	f7ff ff67 	bl	8009e68 <__retarget_lock_acquire_recursive>
 8009f9a:	89ab      	ldrh	r3, [r5, #12]
 8009f9c:	071b      	lsls	r3, r3, #28
 8009f9e:	d501      	bpl.n	8009fa4 <_vfiprintf_r+0x3c>
 8009fa0:	692b      	ldr	r3, [r5, #16]
 8009fa2:	b9eb      	cbnz	r3, 8009fe0 <_vfiprintf_r+0x78>
 8009fa4:	4629      	mov	r1, r5
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	f000 f960 	bl	800a26c <__swsetup_r>
 8009fac:	b1c0      	cbz	r0, 8009fe0 <_vfiprintf_r+0x78>
 8009fae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fb0:	07dc      	lsls	r4, r3, #31
 8009fb2:	d50e      	bpl.n	8009fd2 <_vfiprintf_r+0x6a>
 8009fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb8:	b01d      	add	sp, #116	; 0x74
 8009fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fbe:	4b7b      	ldr	r3, [pc, #492]	; (800a1ac <_vfiprintf_r+0x244>)
 8009fc0:	429d      	cmp	r5, r3
 8009fc2:	d101      	bne.n	8009fc8 <_vfiprintf_r+0x60>
 8009fc4:	68b5      	ldr	r5, [r6, #8]
 8009fc6:	e7df      	b.n	8009f88 <_vfiprintf_r+0x20>
 8009fc8:	4b79      	ldr	r3, [pc, #484]	; (800a1b0 <_vfiprintf_r+0x248>)
 8009fca:	429d      	cmp	r5, r3
 8009fcc:	bf08      	it	eq
 8009fce:	68f5      	ldreq	r5, [r6, #12]
 8009fd0:	e7da      	b.n	8009f88 <_vfiprintf_r+0x20>
 8009fd2:	89ab      	ldrh	r3, [r5, #12]
 8009fd4:	0598      	lsls	r0, r3, #22
 8009fd6:	d4ed      	bmi.n	8009fb4 <_vfiprintf_r+0x4c>
 8009fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fda:	f7ff ff46 	bl	8009e6a <__retarget_lock_release_recursive>
 8009fde:	e7e9      	b.n	8009fb4 <_vfiprintf_r+0x4c>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8009fe4:	2320      	movs	r3, #32
 8009fe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fea:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fee:	2330      	movs	r3, #48	; 0x30
 8009ff0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a1b4 <_vfiprintf_r+0x24c>
 8009ff4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ff8:	f04f 0901 	mov.w	r9, #1
 8009ffc:	4623      	mov	r3, r4
 8009ffe:	469a      	mov	sl, r3
 800a000:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a004:	b10a      	cbz	r2, 800a00a <_vfiprintf_r+0xa2>
 800a006:	2a25      	cmp	r2, #37	; 0x25
 800a008:	d1f9      	bne.n	8009ffe <_vfiprintf_r+0x96>
 800a00a:	ebba 0b04 	subs.w	fp, sl, r4
 800a00e:	d00b      	beq.n	800a028 <_vfiprintf_r+0xc0>
 800a010:	465b      	mov	r3, fp
 800a012:	4622      	mov	r2, r4
 800a014:	4629      	mov	r1, r5
 800a016:	4630      	mov	r0, r6
 800a018:	f7ff ff94 	bl	8009f44 <__sfputs_r>
 800a01c:	3001      	adds	r0, #1
 800a01e:	f000 80aa 	beq.w	800a176 <_vfiprintf_r+0x20e>
 800a022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a024:	445a      	add	r2, fp
 800a026:	9209      	str	r2, [sp, #36]	; 0x24
 800a028:	f89a 3000 	ldrb.w	r3, [sl]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f000 80a2 	beq.w	800a176 <_vfiprintf_r+0x20e>
 800a032:	2300      	movs	r3, #0
 800a034:	f04f 32ff 	mov.w	r2, #4294967295
 800a038:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a03c:	f10a 0a01 	add.w	sl, sl, #1
 800a040:	9304      	str	r3, [sp, #16]
 800a042:	9307      	str	r3, [sp, #28]
 800a044:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a048:	931a      	str	r3, [sp, #104]	; 0x68
 800a04a:	4654      	mov	r4, sl
 800a04c:	2205      	movs	r2, #5
 800a04e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a052:	4858      	ldr	r0, [pc, #352]	; (800a1b4 <_vfiprintf_r+0x24c>)
 800a054:	f7f6 f8dc 	bl	8000210 <memchr>
 800a058:	9a04      	ldr	r2, [sp, #16]
 800a05a:	b9d8      	cbnz	r0, 800a094 <_vfiprintf_r+0x12c>
 800a05c:	06d1      	lsls	r1, r2, #27
 800a05e:	bf44      	itt	mi
 800a060:	2320      	movmi	r3, #32
 800a062:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a066:	0713      	lsls	r3, r2, #28
 800a068:	bf44      	itt	mi
 800a06a:	232b      	movmi	r3, #43	; 0x2b
 800a06c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a070:	f89a 3000 	ldrb.w	r3, [sl]
 800a074:	2b2a      	cmp	r3, #42	; 0x2a
 800a076:	d015      	beq.n	800a0a4 <_vfiprintf_r+0x13c>
 800a078:	9a07      	ldr	r2, [sp, #28]
 800a07a:	4654      	mov	r4, sl
 800a07c:	2000      	movs	r0, #0
 800a07e:	f04f 0c0a 	mov.w	ip, #10
 800a082:	4621      	mov	r1, r4
 800a084:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a088:	3b30      	subs	r3, #48	; 0x30
 800a08a:	2b09      	cmp	r3, #9
 800a08c:	d94e      	bls.n	800a12c <_vfiprintf_r+0x1c4>
 800a08e:	b1b0      	cbz	r0, 800a0be <_vfiprintf_r+0x156>
 800a090:	9207      	str	r2, [sp, #28]
 800a092:	e014      	b.n	800a0be <_vfiprintf_r+0x156>
 800a094:	eba0 0308 	sub.w	r3, r0, r8
 800a098:	fa09 f303 	lsl.w	r3, r9, r3
 800a09c:	4313      	orrs	r3, r2
 800a09e:	9304      	str	r3, [sp, #16]
 800a0a0:	46a2      	mov	sl, r4
 800a0a2:	e7d2      	b.n	800a04a <_vfiprintf_r+0xe2>
 800a0a4:	9b03      	ldr	r3, [sp, #12]
 800a0a6:	1d19      	adds	r1, r3, #4
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	9103      	str	r1, [sp, #12]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	bfbb      	ittet	lt
 800a0b0:	425b      	neglt	r3, r3
 800a0b2:	f042 0202 	orrlt.w	r2, r2, #2
 800a0b6:	9307      	strge	r3, [sp, #28]
 800a0b8:	9307      	strlt	r3, [sp, #28]
 800a0ba:	bfb8      	it	lt
 800a0bc:	9204      	strlt	r2, [sp, #16]
 800a0be:	7823      	ldrb	r3, [r4, #0]
 800a0c0:	2b2e      	cmp	r3, #46	; 0x2e
 800a0c2:	d10c      	bne.n	800a0de <_vfiprintf_r+0x176>
 800a0c4:	7863      	ldrb	r3, [r4, #1]
 800a0c6:	2b2a      	cmp	r3, #42	; 0x2a
 800a0c8:	d135      	bne.n	800a136 <_vfiprintf_r+0x1ce>
 800a0ca:	9b03      	ldr	r3, [sp, #12]
 800a0cc:	1d1a      	adds	r2, r3, #4
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	9203      	str	r2, [sp, #12]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	bfb8      	it	lt
 800a0d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0da:	3402      	adds	r4, #2
 800a0dc:	9305      	str	r3, [sp, #20]
 800a0de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a1c4 <_vfiprintf_r+0x25c>
 800a0e2:	7821      	ldrb	r1, [r4, #0]
 800a0e4:	2203      	movs	r2, #3
 800a0e6:	4650      	mov	r0, sl
 800a0e8:	f7f6 f892 	bl	8000210 <memchr>
 800a0ec:	b140      	cbz	r0, 800a100 <_vfiprintf_r+0x198>
 800a0ee:	2340      	movs	r3, #64	; 0x40
 800a0f0:	eba0 000a 	sub.w	r0, r0, sl
 800a0f4:	fa03 f000 	lsl.w	r0, r3, r0
 800a0f8:	9b04      	ldr	r3, [sp, #16]
 800a0fa:	4303      	orrs	r3, r0
 800a0fc:	3401      	adds	r4, #1
 800a0fe:	9304      	str	r3, [sp, #16]
 800a100:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a104:	482c      	ldr	r0, [pc, #176]	; (800a1b8 <_vfiprintf_r+0x250>)
 800a106:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a10a:	2206      	movs	r2, #6
 800a10c:	f7f6 f880 	bl	8000210 <memchr>
 800a110:	2800      	cmp	r0, #0
 800a112:	d03f      	beq.n	800a194 <_vfiprintf_r+0x22c>
 800a114:	4b29      	ldr	r3, [pc, #164]	; (800a1bc <_vfiprintf_r+0x254>)
 800a116:	bb1b      	cbnz	r3, 800a160 <_vfiprintf_r+0x1f8>
 800a118:	9b03      	ldr	r3, [sp, #12]
 800a11a:	3307      	adds	r3, #7
 800a11c:	f023 0307 	bic.w	r3, r3, #7
 800a120:	3308      	adds	r3, #8
 800a122:	9303      	str	r3, [sp, #12]
 800a124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a126:	443b      	add	r3, r7
 800a128:	9309      	str	r3, [sp, #36]	; 0x24
 800a12a:	e767      	b.n	8009ffc <_vfiprintf_r+0x94>
 800a12c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a130:	460c      	mov	r4, r1
 800a132:	2001      	movs	r0, #1
 800a134:	e7a5      	b.n	800a082 <_vfiprintf_r+0x11a>
 800a136:	2300      	movs	r3, #0
 800a138:	3401      	adds	r4, #1
 800a13a:	9305      	str	r3, [sp, #20]
 800a13c:	4619      	mov	r1, r3
 800a13e:	f04f 0c0a 	mov.w	ip, #10
 800a142:	4620      	mov	r0, r4
 800a144:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a148:	3a30      	subs	r2, #48	; 0x30
 800a14a:	2a09      	cmp	r2, #9
 800a14c:	d903      	bls.n	800a156 <_vfiprintf_r+0x1ee>
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d0c5      	beq.n	800a0de <_vfiprintf_r+0x176>
 800a152:	9105      	str	r1, [sp, #20]
 800a154:	e7c3      	b.n	800a0de <_vfiprintf_r+0x176>
 800a156:	fb0c 2101 	mla	r1, ip, r1, r2
 800a15a:	4604      	mov	r4, r0
 800a15c:	2301      	movs	r3, #1
 800a15e:	e7f0      	b.n	800a142 <_vfiprintf_r+0x1da>
 800a160:	ab03      	add	r3, sp, #12
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	462a      	mov	r2, r5
 800a166:	4b16      	ldr	r3, [pc, #88]	; (800a1c0 <_vfiprintf_r+0x258>)
 800a168:	a904      	add	r1, sp, #16
 800a16a:	4630      	mov	r0, r6
 800a16c:	f7fb f9bc 	bl	80054e8 <_printf_float>
 800a170:	4607      	mov	r7, r0
 800a172:	1c78      	adds	r0, r7, #1
 800a174:	d1d6      	bne.n	800a124 <_vfiprintf_r+0x1bc>
 800a176:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a178:	07d9      	lsls	r1, r3, #31
 800a17a:	d405      	bmi.n	800a188 <_vfiprintf_r+0x220>
 800a17c:	89ab      	ldrh	r3, [r5, #12]
 800a17e:	059a      	lsls	r2, r3, #22
 800a180:	d402      	bmi.n	800a188 <_vfiprintf_r+0x220>
 800a182:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a184:	f7ff fe71 	bl	8009e6a <__retarget_lock_release_recursive>
 800a188:	89ab      	ldrh	r3, [r5, #12]
 800a18a:	065b      	lsls	r3, r3, #25
 800a18c:	f53f af12 	bmi.w	8009fb4 <_vfiprintf_r+0x4c>
 800a190:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a192:	e711      	b.n	8009fb8 <_vfiprintf_r+0x50>
 800a194:	ab03      	add	r3, sp, #12
 800a196:	9300      	str	r3, [sp, #0]
 800a198:	462a      	mov	r2, r5
 800a19a:	4b09      	ldr	r3, [pc, #36]	; (800a1c0 <_vfiprintf_r+0x258>)
 800a19c:	a904      	add	r1, sp, #16
 800a19e:	4630      	mov	r0, r6
 800a1a0:	f7fb fc46 	bl	8005a30 <_printf_i>
 800a1a4:	e7e4      	b.n	800a170 <_vfiprintf_r+0x208>
 800a1a6:	bf00      	nop
 800a1a8:	0800c344 	.word	0x0800c344
 800a1ac:	0800c364 	.word	0x0800c364
 800a1b0:	0800c324 	.word	0x0800c324
 800a1b4:	0800c2bc 	.word	0x0800c2bc
 800a1b8:	0800c2c6 	.word	0x0800c2c6
 800a1bc:	080054e9 	.word	0x080054e9
 800a1c0:	08009f45 	.word	0x08009f45
 800a1c4:	0800c2c2 	.word	0x0800c2c2

0800a1c8 <__swbuf_r>:
 800a1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ca:	460e      	mov	r6, r1
 800a1cc:	4614      	mov	r4, r2
 800a1ce:	4605      	mov	r5, r0
 800a1d0:	b118      	cbz	r0, 800a1da <__swbuf_r+0x12>
 800a1d2:	6983      	ldr	r3, [r0, #24]
 800a1d4:	b90b      	cbnz	r3, 800a1da <__swbuf_r+0x12>
 800a1d6:	f7ff fd97 	bl	8009d08 <__sinit>
 800a1da:	4b21      	ldr	r3, [pc, #132]	; (800a260 <__swbuf_r+0x98>)
 800a1dc:	429c      	cmp	r4, r3
 800a1de:	d12b      	bne.n	800a238 <__swbuf_r+0x70>
 800a1e0:	686c      	ldr	r4, [r5, #4]
 800a1e2:	69a3      	ldr	r3, [r4, #24]
 800a1e4:	60a3      	str	r3, [r4, #8]
 800a1e6:	89a3      	ldrh	r3, [r4, #12]
 800a1e8:	071a      	lsls	r2, r3, #28
 800a1ea:	d52f      	bpl.n	800a24c <__swbuf_r+0x84>
 800a1ec:	6923      	ldr	r3, [r4, #16]
 800a1ee:	b36b      	cbz	r3, 800a24c <__swbuf_r+0x84>
 800a1f0:	6923      	ldr	r3, [r4, #16]
 800a1f2:	6820      	ldr	r0, [r4, #0]
 800a1f4:	1ac0      	subs	r0, r0, r3
 800a1f6:	6963      	ldr	r3, [r4, #20]
 800a1f8:	b2f6      	uxtb	r6, r6
 800a1fa:	4283      	cmp	r3, r0
 800a1fc:	4637      	mov	r7, r6
 800a1fe:	dc04      	bgt.n	800a20a <__swbuf_r+0x42>
 800a200:	4621      	mov	r1, r4
 800a202:	4628      	mov	r0, r5
 800a204:	f7ff fcec 	bl	8009be0 <_fflush_r>
 800a208:	bb30      	cbnz	r0, 800a258 <__swbuf_r+0x90>
 800a20a:	68a3      	ldr	r3, [r4, #8]
 800a20c:	3b01      	subs	r3, #1
 800a20e:	60a3      	str	r3, [r4, #8]
 800a210:	6823      	ldr	r3, [r4, #0]
 800a212:	1c5a      	adds	r2, r3, #1
 800a214:	6022      	str	r2, [r4, #0]
 800a216:	701e      	strb	r6, [r3, #0]
 800a218:	6963      	ldr	r3, [r4, #20]
 800a21a:	3001      	adds	r0, #1
 800a21c:	4283      	cmp	r3, r0
 800a21e:	d004      	beq.n	800a22a <__swbuf_r+0x62>
 800a220:	89a3      	ldrh	r3, [r4, #12]
 800a222:	07db      	lsls	r3, r3, #31
 800a224:	d506      	bpl.n	800a234 <__swbuf_r+0x6c>
 800a226:	2e0a      	cmp	r6, #10
 800a228:	d104      	bne.n	800a234 <__swbuf_r+0x6c>
 800a22a:	4621      	mov	r1, r4
 800a22c:	4628      	mov	r0, r5
 800a22e:	f7ff fcd7 	bl	8009be0 <_fflush_r>
 800a232:	b988      	cbnz	r0, 800a258 <__swbuf_r+0x90>
 800a234:	4638      	mov	r0, r7
 800a236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a238:	4b0a      	ldr	r3, [pc, #40]	; (800a264 <__swbuf_r+0x9c>)
 800a23a:	429c      	cmp	r4, r3
 800a23c:	d101      	bne.n	800a242 <__swbuf_r+0x7a>
 800a23e:	68ac      	ldr	r4, [r5, #8]
 800a240:	e7cf      	b.n	800a1e2 <__swbuf_r+0x1a>
 800a242:	4b09      	ldr	r3, [pc, #36]	; (800a268 <__swbuf_r+0xa0>)
 800a244:	429c      	cmp	r4, r3
 800a246:	bf08      	it	eq
 800a248:	68ec      	ldreq	r4, [r5, #12]
 800a24a:	e7ca      	b.n	800a1e2 <__swbuf_r+0x1a>
 800a24c:	4621      	mov	r1, r4
 800a24e:	4628      	mov	r0, r5
 800a250:	f000 f80c 	bl	800a26c <__swsetup_r>
 800a254:	2800      	cmp	r0, #0
 800a256:	d0cb      	beq.n	800a1f0 <__swbuf_r+0x28>
 800a258:	f04f 37ff 	mov.w	r7, #4294967295
 800a25c:	e7ea      	b.n	800a234 <__swbuf_r+0x6c>
 800a25e:	bf00      	nop
 800a260:	0800c344 	.word	0x0800c344
 800a264:	0800c364 	.word	0x0800c364
 800a268:	0800c324 	.word	0x0800c324

0800a26c <__swsetup_r>:
 800a26c:	4b32      	ldr	r3, [pc, #200]	; (800a338 <__swsetup_r+0xcc>)
 800a26e:	b570      	push	{r4, r5, r6, lr}
 800a270:	681d      	ldr	r5, [r3, #0]
 800a272:	4606      	mov	r6, r0
 800a274:	460c      	mov	r4, r1
 800a276:	b125      	cbz	r5, 800a282 <__swsetup_r+0x16>
 800a278:	69ab      	ldr	r3, [r5, #24]
 800a27a:	b913      	cbnz	r3, 800a282 <__swsetup_r+0x16>
 800a27c:	4628      	mov	r0, r5
 800a27e:	f7ff fd43 	bl	8009d08 <__sinit>
 800a282:	4b2e      	ldr	r3, [pc, #184]	; (800a33c <__swsetup_r+0xd0>)
 800a284:	429c      	cmp	r4, r3
 800a286:	d10f      	bne.n	800a2a8 <__swsetup_r+0x3c>
 800a288:	686c      	ldr	r4, [r5, #4]
 800a28a:	89a3      	ldrh	r3, [r4, #12]
 800a28c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a290:	0719      	lsls	r1, r3, #28
 800a292:	d42c      	bmi.n	800a2ee <__swsetup_r+0x82>
 800a294:	06dd      	lsls	r5, r3, #27
 800a296:	d411      	bmi.n	800a2bc <__swsetup_r+0x50>
 800a298:	2309      	movs	r3, #9
 800a29a:	6033      	str	r3, [r6, #0]
 800a29c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a2a0:	81a3      	strh	r3, [r4, #12]
 800a2a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a6:	e03e      	b.n	800a326 <__swsetup_r+0xba>
 800a2a8:	4b25      	ldr	r3, [pc, #148]	; (800a340 <__swsetup_r+0xd4>)
 800a2aa:	429c      	cmp	r4, r3
 800a2ac:	d101      	bne.n	800a2b2 <__swsetup_r+0x46>
 800a2ae:	68ac      	ldr	r4, [r5, #8]
 800a2b0:	e7eb      	b.n	800a28a <__swsetup_r+0x1e>
 800a2b2:	4b24      	ldr	r3, [pc, #144]	; (800a344 <__swsetup_r+0xd8>)
 800a2b4:	429c      	cmp	r4, r3
 800a2b6:	bf08      	it	eq
 800a2b8:	68ec      	ldreq	r4, [r5, #12]
 800a2ba:	e7e6      	b.n	800a28a <__swsetup_r+0x1e>
 800a2bc:	0758      	lsls	r0, r3, #29
 800a2be:	d512      	bpl.n	800a2e6 <__swsetup_r+0x7a>
 800a2c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2c2:	b141      	cbz	r1, 800a2d6 <__swsetup_r+0x6a>
 800a2c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2c8:	4299      	cmp	r1, r3
 800a2ca:	d002      	beq.n	800a2d2 <__swsetup_r+0x66>
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	f7fe fd4f 	bl	8008d70 <_free_r>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	6363      	str	r3, [r4, #52]	; 0x34
 800a2d6:	89a3      	ldrh	r3, [r4, #12]
 800a2d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2dc:	81a3      	strh	r3, [r4, #12]
 800a2de:	2300      	movs	r3, #0
 800a2e0:	6063      	str	r3, [r4, #4]
 800a2e2:	6923      	ldr	r3, [r4, #16]
 800a2e4:	6023      	str	r3, [r4, #0]
 800a2e6:	89a3      	ldrh	r3, [r4, #12]
 800a2e8:	f043 0308 	orr.w	r3, r3, #8
 800a2ec:	81a3      	strh	r3, [r4, #12]
 800a2ee:	6923      	ldr	r3, [r4, #16]
 800a2f0:	b94b      	cbnz	r3, 800a306 <__swsetup_r+0x9a>
 800a2f2:	89a3      	ldrh	r3, [r4, #12]
 800a2f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2fc:	d003      	beq.n	800a306 <__swsetup_r+0x9a>
 800a2fe:	4621      	mov	r1, r4
 800a300:	4630      	mov	r0, r6
 800a302:	f000 f84d 	bl	800a3a0 <__smakebuf_r>
 800a306:	89a0      	ldrh	r0, [r4, #12]
 800a308:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a30c:	f010 0301 	ands.w	r3, r0, #1
 800a310:	d00a      	beq.n	800a328 <__swsetup_r+0xbc>
 800a312:	2300      	movs	r3, #0
 800a314:	60a3      	str	r3, [r4, #8]
 800a316:	6963      	ldr	r3, [r4, #20]
 800a318:	425b      	negs	r3, r3
 800a31a:	61a3      	str	r3, [r4, #24]
 800a31c:	6923      	ldr	r3, [r4, #16]
 800a31e:	b943      	cbnz	r3, 800a332 <__swsetup_r+0xc6>
 800a320:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a324:	d1ba      	bne.n	800a29c <__swsetup_r+0x30>
 800a326:	bd70      	pop	{r4, r5, r6, pc}
 800a328:	0781      	lsls	r1, r0, #30
 800a32a:	bf58      	it	pl
 800a32c:	6963      	ldrpl	r3, [r4, #20]
 800a32e:	60a3      	str	r3, [r4, #8]
 800a330:	e7f4      	b.n	800a31c <__swsetup_r+0xb0>
 800a332:	2000      	movs	r0, #0
 800a334:	e7f7      	b.n	800a326 <__swsetup_r+0xba>
 800a336:	bf00      	nop
 800a338:	20000010 	.word	0x20000010
 800a33c:	0800c344 	.word	0x0800c344
 800a340:	0800c364 	.word	0x0800c364
 800a344:	0800c324 	.word	0x0800c324

0800a348 <abort>:
 800a348:	b508      	push	{r3, lr}
 800a34a:	2006      	movs	r0, #6
 800a34c:	f000 f898 	bl	800a480 <raise>
 800a350:	2001      	movs	r0, #1
 800a352:	f7f8 fadc 	bl	800290e <_exit>

0800a356 <__swhatbuf_r>:
 800a356:	b570      	push	{r4, r5, r6, lr}
 800a358:	460e      	mov	r6, r1
 800a35a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a35e:	2900      	cmp	r1, #0
 800a360:	b096      	sub	sp, #88	; 0x58
 800a362:	4614      	mov	r4, r2
 800a364:	461d      	mov	r5, r3
 800a366:	da08      	bge.n	800a37a <__swhatbuf_r+0x24>
 800a368:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	602a      	str	r2, [r5, #0]
 800a370:	061a      	lsls	r2, r3, #24
 800a372:	d410      	bmi.n	800a396 <__swhatbuf_r+0x40>
 800a374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a378:	e00e      	b.n	800a398 <__swhatbuf_r+0x42>
 800a37a:	466a      	mov	r2, sp
 800a37c:	f000 f89c 	bl	800a4b8 <_fstat_r>
 800a380:	2800      	cmp	r0, #0
 800a382:	dbf1      	blt.n	800a368 <__swhatbuf_r+0x12>
 800a384:	9a01      	ldr	r2, [sp, #4]
 800a386:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a38a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a38e:	425a      	negs	r2, r3
 800a390:	415a      	adcs	r2, r3
 800a392:	602a      	str	r2, [r5, #0]
 800a394:	e7ee      	b.n	800a374 <__swhatbuf_r+0x1e>
 800a396:	2340      	movs	r3, #64	; 0x40
 800a398:	2000      	movs	r0, #0
 800a39a:	6023      	str	r3, [r4, #0]
 800a39c:	b016      	add	sp, #88	; 0x58
 800a39e:	bd70      	pop	{r4, r5, r6, pc}

0800a3a0 <__smakebuf_r>:
 800a3a0:	898b      	ldrh	r3, [r1, #12]
 800a3a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3a4:	079d      	lsls	r5, r3, #30
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	460c      	mov	r4, r1
 800a3aa:	d507      	bpl.n	800a3bc <__smakebuf_r+0x1c>
 800a3ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	6123      	str	r3, [r4, #16]
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	6163      	str	r3, [r4, #20]
 800a3b8:	b002      	add	sp, #8
 800a3ba:	bd70      	pop	{r4, r5, r6, pc}
 800a3bc:	ab01      	add	r3, sp, #4
 800a3be:	466a      	mov	r2, sp
 800a3c0:	f7ff ffc9 	bl	800a356 <__swhatbuf_r>
 800a3c4:	9900      	ldr	r1, [sp, #0]
 800a3c6:	4605      	mov	r5, r0
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	f7fe fd3d 	bl	8008e48 <_malloc_r>
 800a3ce:	b948      	cbnz	r0, 800a3e4 <__smakebuf_r+0x44>
 800a3d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3d4:	059a      	lsls	r2, r3, #22
 800a3d6:	d4ef      	bmi.n	800a3b8 <__smakebuf_r+0x18>
 800a3d8:	f023 0303 	bic.w	r3, r3, #3
 800a3dc:	f043 0302 	orr.w	r3, r3, #2
 800a3e0:	81a3      	strh	r3, [r4, #12]
 800a3e2:	e7e3      	b.n	800a3ac <__smakebuf_r+0xc>
 800a3e4:	4b0d      	ldr	r3, [pc, #52]	; (800a41c <__smakebuf_r+0x7c>)
 800a3e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a3e8:	89a3      	ldrh	r3, [r4, #12]
 800a3ea:	6020      	str	r0, [r4, #0]
 800a3ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3f0:	81a3      	strh	r3, [r4, #12]
 800a3f2:	9b00      	ldr	r3, [sp, #0]
 800a3f4:	6163      	str	r3, [r4, #20]
 800a3f6:	9b01      	ldr	r3, [sp, #4]
 800a3f8:	6120      	str	r0, [r4, #16]
 800a3fa:	b15b      	cbz	r3, 800a414 <__smakebuf_r+0x74>
 800a3fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a400:	4630      	mov	r0, r6
 800a402:	f000 f86b 	bl	800a4dc <_isatty_r>
 800a406:	b128      	cbz	r0, 800a414 <__smakebuf_r+0x74>
 800a408:	89a3      	ldrh	r3, [r4, #12]
 800a40a:	f023 0303 	bic.w	r3, r3, #3
 800a40e:	f043 0301 	orr.w	r3, r3, #1
 800a412:	81a3      	strh	r3, [r4, #12]
 800a414:	89a0      	ldrh	r0, [r4, #12]
 800a416:	4305      	orrs	r5, r0
 800a418:	81a5      	strh	r5, [r4, #12]
 800a41a:	e7cd      	b.n	800a3b8 <__smakebuf_r+0x18>
 800a41c:	08009ca1 	.word	0x08009ca1

0800a420 <_malloc_usable_size_r>:
 800a420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a424:	1f18      	subs	r0, r3, #4
 800a426:	2b00      	cmp	r3, #0
 800a428:	bfbc      	itt	lt
 800a42a:	580b      	ldrlt	r3, [r1, r0]
 800a42c:	18c0      	addlt	r0, r0, r3
 800a42e:	4770      	bx	lr

0800a430 <_raise_r>:
 800a430:	291f      	cmp	r1, #31
 800a432:	b538      	push	{r3, r4, r5, lr}
 800a434:	4604      	mov	r4, r0
 800a436:	460d      	mov	r5, r1
 800a438:	d904      	bls.n	800a444 <_raise_r+0x14>
 800a43a:	2316      	movs	r3, #22
 800a43c:	6003      	str	r3, [r0, #0]
 800a43e:	f04f 30ff 	mov.w	r0, #4294967295
 800a442:	bd38      	pop	{r3, r4, r5, pc}
 800a444:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a446:	b112      	cbz	r2, 800a44e <_raise_r+0x1e>
 800a448:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a44c:	b94b      	cbnz	r3, 800a462 <_raise_r+0x32>
 800a44e:	4620      	mov	r0, r4
 800a450:	f000 f830 	bl	800a4b4 <_getpid_r>
 800a454:	462a      	mov	r2, r5
 800a456:	4601      	mov	r1, r0
 800a458:	4620      	mov	r0, r4
 800a45a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a45e:	f000 b817 	b.w	800a490 <_kill_r>
 800a462:	2b01      	cmp	r3, #1
 800a464:	d00a      	beq.n	800a47c <_raise_r+0x4c>
 800a466:	1c59      	adds	r1, r3, #1
 800a468:	d103      	bne.n	800a472 <_raise_r+0x42>
 800a46a:	2316      	movs	r3, #22
 800a46c:	6003      	str	r3, [r0, #0]
 800a46e:	2001      	movs	r0, #1
 800a470:	e7e7      	b.n	800a442 <_raise_r+0x12>
 800a472:	2400      	movs	r4, #0
 800a474:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a478:	4628      	mov	r0, r5
 800a47a:	4798      	blx	r3
 800a47c:	2000      	movs	r0, #0
 800a47e:	e7e0      	b.n	800a442 <_raise_r+0x12>

0800a480 <raise>:
 800a480:	4b02      	ldr	r3, [pc, #8]	; (800a48c <raise+0xc>)
 800a482:	4601      	mov	r1, r0
 800a484:	6818      	ldr	r0, [r3, #0]
 800a486:	f7ff bfd3 	b.w	800a430 <_raise_r>
 800a48a:	bf00      	nop
 800a48c:	20000010 	.word	0x20000010

0800a490 <_kill_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	4d07      	ldr	r5, [pc, #28]	; (800a4b0 <_kill_r+0x20>)
 800a494:	2300      	movs	r3, #0
 800a496:	4604      	mov	r4, r0
 800a498:	4608      	mov	r0, r1
 800a49a:	4611      	mov	r1, r2
 800a49c:	602b      	str	r3, [r5, #0]
 800a49e:	f7f8 fa26 	bl	80028ee <_kill>
 800a4a2:	1c43      	adds	r3, r0, #1
 800a4a4:	d102      	bne.n	800a4ac <_kill_r+0x1c>
 800a4a6:	682b      	ldr	r3, [r5, #0]
 800a4a8:	b103      	cbz	r3, 800a4ac <_kill_r+0x1c>
 800a4aa:	6023      	str	r3, [r4, #0]
 800a4ac:	bd38      	pop	{r3, r4, r5, pc}
 800a4ae:	bf00      	nop
 800a4b0:	20000d08 	.word	0x20000d08

0800a4b4 <_getpid_r>:
 800a4b4:	f7f8 ba13 	b.w	80028de <_getpid>

0800a4b8 <_fstat_r>:
 800a4b8:	b538      	push	{r3, r4, r5, lr}
 800a4ba:	4d07      	ldr	r5, [pc, #28]	; (800a4d8 <_fstat_r+0x20>)
 800a4bc:	2300      	movs	r3, #0
 800a4be:	4604      	mov	r4, r0
 800a4c0:	4608      	mov	r0, r1
 800a4c2:	4611      	mov	r1, r2
 800a4c4:	602b      	str	r3, [r5, #0]
 800a4c6:	f7f8 fa71 	bl	80029ac <_fstat>
 800a4ca:	1c43      	adds	r3, r0, #1
 800a4cc:	d102      	bne.n	800a4d4 <_fstat_r+0x1c>
 800a4ce:	682b      	ldr	r3, [r5, #0]
 800a4d0:	b103      	cbz	r3, 800a4d4 <_fstat_r+0x1c>
 800a4d2:	6023      	str	r3, [r4, #0]
 800a4d4:	bd38      	pop	{r3, r4, r5, pc}
 800a4d6:	bf00      	nop
 800a4d8:	20000d08 	.word	0x20000d08

0800a4dc <_isatty_r>:
 800a4dc:	b538      	push	{r3, r4, r5, lr}
 800a4de:	4d06      	ldr	r5, [pc, #24]	; (800a4f8 <_isatty_r+0x1c>)
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	4604      	mov	r4, r0
 800a4e4:	4608      	mov	r0, r1
 800a4e6:	602b      	str	r3, [r5, #0]
 800a4e8:	f7f8 fa70 	bl	80029cc <_isatty>
 800a4ec:	1c43      	adds	r3, r0, #1
 800a4ee:	d102      	bne.n	800a4f6 <_isatty_r+0x1a>
 800a4f0:	682b      	ldr	r3, [r5, #0]
 800a4f2:	b103      	cbz	r3, 800a4f6 <_isatty_r+0x1a>
 800a4f4:	6023      	str	r3, [r4, #0]
 800a4f6:	bd38      	pop	{r3, r4, r5, pc}
 800a4f8:	20000d08 	.word	0x20000d08
 800a4fc:	00000000 	.word	0x00000000

0800a500 <cos>:
 800a500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a502:	ec53 2b10 	vmov	r2, r3, d0
 800a506:	4826      	ldr	r0, [pc, #152]	; (800a5a0 <cos+0xa0>)
 800a508:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a50c:	4281      	cmp	r1, r0
 800a50e:	dc06      	bgt.n	800a51e <cos+0x1e>
 800a510:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a598 <cos+0x98>
 800a514:	b005      	add	sp, #20
 800a516:	f85d eb04 	ldr.w	lr, [sp], #4
 800a51a:	f000 bb79 	b.w	800ac10 <__kernel_cos>
 800a51e:	4821      	ldr	r0, [pc, #132]	; (800a5a4 <cos+0xa4>)
 800a520:	4281      	cmp	r1, r0
 800a522:	dd09      	ble.n	800a538 <cos+0x38>
 800a524:	ee10 0a10 	vmov	r0, s0
 800a528:	4619      	mov	r1, r3
 800a52a:	f7f5 fec5 	bl	80002b8 <__aeabi_dsub>
 800a52e:	ec41 0b10 	vmov	d0, r0, r1
 800a532:	b005      	add	sp, #20
 800a534:	f85d fb04 	ldr.w	pc, [sp], #4
 800a538:	4668      	mov	r0, sp
 800a53a:	f000 f95d 	bl	800a7f8 <__ieee754_rem_pio2>
 800a53e:	f000 0003 	and.w	r0, r0, #3
 800a542:	2801      	cmp	r0, #1
 800a544:	d00b      	beq.n	800a55e <cos+0x5e>
 800a546:	2802      	cmp	r0, #2
 800a548:	d016      	beq.n	800a578 <cos+0x78>
 800a54a:	b9e0      	cbnz	r0, 800a586 <cos+0x86>
 800a54c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a550:	ed9d 0b00 	vldr	d0, [sp]
 800a554:	f000 fb5c 	bl	800ac10 <__kernel_cos>
 800a558:	ec51 0b10 	vmov	r0, r1, d0
 800a55c:	e7e7      	b.n	800a52e <cos+0x2e>
 800a55e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a562:	ed9d 0b00 	vldr	d0, [sp]
 800a566:	f000 ff6b 	bl	800b440 <__kernel_sin>
 800a56a:	ec53 2b10 	vmov	r2, r3, d0
 800a56e:	ee10 0a10 	vmov	r0, s0
 800a572:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a576:	e7da      	b.n	800a52e <cos+0x2e>
 800a578:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a57c:	ed9d 0b00 	vldr	d0, [sp]
 800a580:	f000 fb46 	bl	800ac10 <__kernel_cos>
 800a584:	e7f1      	b.n	800a56a <cos+0x6a>
 800a586:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a58a:	ed9d 0b00 	vldr	d0, [sp]
 800a58e:	2001      	movs	r0, #1
 800a590:	f000 ff56 	bl	800b440 <__kernel_sin>
 800a594:	e7e0      	b.n	800a558 <cos+0x58>
 800a596:	bf00      	nop
	...
 800a5a0:	3fe921fb 	.word	0x3fe921fb
 800a5a4:	7fefffff 	.word	0x7fefffff

0800a5a8 <sin>:
 800a5a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5aa:	ec53 2b10 	vmov	r2, r3, d0
 800a5ae:	4828      	ldr	r0, [pc, #160]	; (800a650 <sin+0xa8>)
 800a5b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a5b4:	4281      	cmp	r1, r0
 800a5b6:	dc07      	bgt.n	800a5c8 <sin+0x20>
 800a5b8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a648 <sin+0xa0>
 800a5bc:	2000      	movs	r0, #0
 800a5be:	b005      	add	sp, #20
 800a5c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5c4:	f000 bf3c 	b.w	800b440 <__kernel_sin>
 800a5c8:	4822      	ldr	r0, [pc, #136]	; (800a654 <sin+0xac>)
 800a5ca:	4281      	cmp	r1, r0
 800a5cc:	dd09      	ble.n	800a5e2 <sin+0x3a>
 800a5ce:	ee10 0a10 	vmov	r0, s0
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	f7f5 fe70 	bl	80002b8 <__aeabi_dsub>
 800a5d8:	ec41 0b10 	vmov	d0, r0, r1
 800a5dc:	b005      	add	sp, #20
 800a5de:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5e2:	4668      	mov	r0, sp
 800a5e4:	f000 f908 	bl	800a7f8 <__ieee754_rem_pio2>
 800a5e8:	f000 0003 	and.w	r0, r0, #3
 800a5ec:	2801      	cmp	r0, #1
 800a5ee:	d00c      	beq.n	800a60a <sin+0x62>
 800a5f0:	2802      	cmp	r0, #2
 800a5f2:	d011      	beq.n	800a618 <sin+0x70>
 800a5f4:	b9f0      	cbnz	r0, 800a634 <sin+0x8c>
 800a5f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5fa:	ed9d 0b00 	vldr	d0, [sp]
 800a5fe:	2001      	movs	r0, #1
 800a600:	f000 ff1e 	bl	800b440 <__kernel_sin>
 800a604:	ec51 0b10 	vmov	r0, r1, d0
 800a608:	e7e6      	b.n	800a5d8 <sin+0x30>
 800a60a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a60e:	ed9d 0b00 	vldr	d0, [sp]
 800a612:	f000 fafd 	bl	800ac10 <__kernel_cos>
 800a616:	e7f5      	b.n	800a604 <sin+0x5c>
 800a618:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a61c:	ed9d 0b00 	vldr	d0, [sp]
 800a620:	2001      	movs	r0, #1
 800a622:	f000 ff0d 	bl	800b440 <__kernel_sin>
 800a626:	ec53 2b10 	vmov	r2, r3, d0
 800a62a:	ee10 0a10 	vmov	r0, s0
 800a62e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a632:	e7d1      	b.n	800a5d8 <sin+0x30>
 800a634:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a638:	ed9d 0b00 	vldr	d0, [sp]
 800a63c:	f000 fae8 	bl	800ac10 <__kernel_cos>
 800a640:	e7f1      	b.n	800a626 <sin+0x7e>
 800a642:	bf00      	nop
 800a644:	f3af 8000 	nop.w
	...
 800a650:	3fe921fb 	.word	0x3fe921fb
 800a654:	7fefffff 	.word	0x7fefffff

0800a658 <atan2>:
 800a658:	f000 b802 	b.w	800a660 <__ieee754_atan2>
 800a65c:	0000      	movs	r0, r0
	...

0800a660 <__ieee754_atan2>:
 800a660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a664:	ec57 6b11 	vmov	r6, r7, d1
 800a668:	4273      	negs	r3, r6
 800a66a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800a7f0 <__ieee754_atan2+0x190>
 800a66e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a672:	4333      	orrs	r3, r6
 800a674:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a678:	4573      	cmp	r3, lr
 800a67a:	ec51 0b10 	vmov	r0, r1, d0
 800a67e:	ee11 8a10 	vmov	r8, s2
 800a682:	d80a      	bhi.n	800a69a <__ieee754_atan2+0x3a>
 800a684:	4244      	negs	r4, r0
 800a686:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a68a:	4304      	orrs	r4, r0
 800a68c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a690:	4574      	cmp	r4, lr
 800a692:	ee10 9a10 	vmov	r9, s0
 800a696:	468c      	mov	ip, r1
 800a698:	d907      	bls.n	800a6aa <__ieee754_atan2+0x4a>
 800a69a:	4632      	mov	r2, r6
 800a69c:	463b      	mov	r3, r7
 800a69e:	f7f5 fe0d 	bl	80002bc <__adddf3>
 800a6a2:	ec41 0b10 	vmov	d0, r0, r1
 800a6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6aa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a6ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a6b2:	4334      	orrs	r4, r6
 800a6b4:	d103      	bne.n	800a6be <__ieee754_atan2+0x5e>
 800a6b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6ba:	f000 bf81 	b.w	800b5c0 <atan>
 800a6be:	17bc      	asrs	r4, r7, #30
 800a6c0:	f004 0402 	and.w	r4, r4, #2
 800a6c4:	ea53 0909 	orrs.w	r9, r3, r9
 800a6c8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a6cc:	d107      	bne.n	800a6de <__ieee754_atan2+0x7e>
 800a6ce:	2c02      	cmp	r4, #2
 800a6d0:	d060      	beq.n	800a794 <__ieee754_atan2+0x134>
 800a6d2:	2c03      	cmp	r4, #3
 800a6d4:	d1e5      	bne.n	800a6a2 <__ieee754_atan2+0x42>
 800a6d6:	a142      	add	r1, pc, #264	; (adr r1, 800a7e0 <__ieee754_atan2+0x180>)
 800a6d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6dc:	e7e1      	b.n	800a6a2 <__ieee754_atan2+0x42>
 800a6de:	ea52 0808 	orrs.w	r8, r2, r8
 800a6e2:	d106      	bne.n	800a6f2 <__ieee754_atan2+0x92>
 800a6e4:	f1bc 0f00 	cmp.w	ip, #0
 800a6e8:	da5f      	bge.n	800a7aa <__ieee754_atan2+0x14a>
 800a6ea:	a13f      	add	r1, pc, #252	; (adr r1, 800a7e8 <__ieee754_atan2+0x188>)
 800a6ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6f0:	e7d7      	b.n	800a6a2 <__ieee754_atan2+0x42>
 800a6f2:	4572      	cmp	r2, lr
 800a6f4:	d10f      	bne.n	800a716 <__ieee754_atan2+0xb6>
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	f104 34ff 	add.w	r4, r4, #4294967295
 800a6fc:	d107      	bne.n	800a70e <__ieee754_atan2+0xae>
 800a6fe:	2c02      	cmp	r4, #2
 800a700:	d84c      	bhi.n	800a79c <__ieee754_atan2+0x13c>
 800a702:	4b35      	ldr	r3, [pc, #212]	; (800a7d8 <__ieee754_atan2+0x178>)
 800a704:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a708:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a70c:	e7c9      	b.n	800a6a2 <__ieee754_atan2+0x42>
 800a70e:	2c02      	cmp	r4, #2
 800a710:	d848      	bhi.n	800a7a4 <__ieee754_atan2+0x144>
 800a712:	4b32      	ldr	r3, [pc, #200]	; (800a7dc <__ieee754_atan2+0x17c>)
 800a714:	e7f6      	b.n	800a704 <__ieee754_atan2+0xa4>
 800a716:	4573      	cmp	r3, lr
 800a718:	d0e4      	beq.n	800a6e4 <__ieee754_atan2+0x84>
 800a71a:	1a9b      	subs	r3, r3, r2
 800a71c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a720:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a724:	da1e      	bge.n	800a764 <__ieee754_atan2+0x104>
 800a726:	2f00      	cmp	r7, #0
 800a728:	da01      	bge.n	800a72e <__ieee754_atan2+0xce>
 800a72a:	323c      	adds	r2, #60	; 0x3c
 800a72c:	db1e      	blt.n	800a76c <__ieee754_atan2+0x10c>
 800a72e:	4632      	mov	r2, r6
 800a730:	463b      	mov	r3, r7
 800a732:	f7f6 f8a3 	bl	800087c <__aeabi_ddiv>
 800a736:	ec41 0b10 	vmov	d0, r0, r1
 800a73a:	f001 f8e1 	bl	800b900 <fabs>
 800a73e:	f000 ff3f 	bl	800b5c0 <atan>
 800a742:	ec51 0b10 	vmov	r0, r1, d0
 800a746:	2c01      	cmp	r4, #1
 800a748:	d013      	beq.n	800a772 <__ieee754_atan2+0x112>
 800a74a:	2c02      	cmp	r4, #2
 800a74c:	d015      	beq.n	800a77a <__ieee754_atan2+0x11a>
 800a74e:	2c00      	cmp	r4, #0
 800a750:	d0a7      	beq.n	800a6a2 <__ieee754_atan2+0x42>
 800a752:	a319      	add	r3, pc, #100	; (adr r3, 800a7b8 <__ieee754_atan2+0x158>)
 800a754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a758:	f7f5 fdae 	bl	80002b8 <__aeabi_dsub>
 800a75c:	a318      	add	r3, pc, #96	; (adr r3, 800a7c0 <__ieee754_atan2+0x160>)
 800a75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a762:	e014      	b.n	800a78e <__ieee754_atan2+0x12e>
 800a764:	a118      	add	r1, pc, #96	; (adr r1, 800a7c8 <__ieee754_atan2+0x168>)
 800a766:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a76a:	e7ec      	b.n	800a746 <__ieee754_atan2+0xe6>
 800a76c:	2000      	movs	r0, #0
 800a76e:	2100      	movs	r1, #0
 800a770:	e7e9      	b.n	800a746 <__ieee754_atan2+0xe6>
 800a772:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a776:	4619      	mov	r1, r3
 800a778:	e793      	b.n	800a6a2 <__ieee754_atan2+0x42>
 800a77a:	a30f      	add	r3, pc, #60	; (adr r3, 800a7b8 <__ieee754_atan2+0x158>)
 800a77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a780:	f7f5 fd9a 	bl	80002b8 <__aeabi_dsub>
 800a784:	4602      	mov	r2, r0
 800a786:	460b      	mov	r3, r1
 800a788:	a10d      	add	r1, pc, #52	; (adr r1, 800a7c0 <__ieee754_atan2+0x160>)
 800a78a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a78e:	f7f5 fd93 	bl	80002b8 <__aeabi_dsub>
 800a792:	e786      	b.n	800a6a2 <__ieee754_atan2+0x42>
 800a794:	a10a      	add	r1, pc, #40	; (adr r1, 800a7c0 <__ieee754_atan2+0x160>)
 800a796:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a79a:	e782      	b.n	800a6a2 <__ieee754_atan2+0x42>
 800a79c:	a10c      	add	r1, pc, #48	; (adr r1, 800a7d0 <__ieee754_atan2+0x170>)
 800a79e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7a2:	e77e      	b.n	800a6a2 <__ieee754_atan2+0x42>
 800a7a4:	2000      	movs	r0, #0
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	e77b      	b.n	800a6a2 <__ieee754_atan2+0x42>
 800a7aa:	a107      	add	r1, pc, #28	; (adr r1, 800a7c8 <__ieee754_atan2+0x168>)
 800a7ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7b0:	e777      	b.n	800a6a2 <__ieee754_atan2+0x42>
 800a7b2:	bf00      	nop
 800a7b4:	f3af 8000 	nop.w
 800a7b8:	33145c07 	.word	0x33145c07
 800a7bc:	3ca1a626 	.word	0x3ca1a626
 800a7c0:	54442d18 	.word	0x54442d18
 800a7c4:	400921fb 	.word	0x400921fb
 800a7c8:	54442d18 	.word	0x54442d18
 800a7cc:	3ff921fb 	.word	0x3ff921fb
 800a7d0:	54442d18 	.word	0x54442d18
 800a7d4:	3fe921fb 	.word	0x3fe921fb
 800a7d8:	0800c388 	.word	0x0800c388
 800a7dc:	0800c3a0 	.word	0x0800c3a0
 800a7e0:	54442d18 	.word	0x54442d18
 800a7e4:	c00921fb 	.word	0xc00921fb
 800a7e8:	54442d18 	.word	0x54442d18
 800a7ec:	bff921fb 	.word	0xbff921fb
 800a7f0:	7ff00000 	.word	0x7ff00000
 800a7f4:	00000000 	.word	0x00000000

0800a7f8 <__ieee754_rem_pio2>:
 800a7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7fc:	ed2d 8b02 	vpush	{d8}
 800a800:	ec55 4b10 	vmov	r4, r5, d0
 800a804:	4bca      	ldr	r3, [pc, #808]	; (800ab30 <__ieee754_rem_pio2+0x338>)
 800a806:	b08b      	sub	sp, #44	; 0x2c
 800a808:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a80c:	4598      	cmp	r8, r3
 800a80e:	4682      	mov	sl, r0
 800a810:	9502      	str	r5, [sp, #8]
 800a812:	dc08      	bgt.n	800a826 <__ieee754_rem_pio2+0x2e>
 800a814:	2200      	movs	r2, #0
 800a816:	2300      	movs	r3, #0
 800a818:	ed80 0b00 	vstr	d0, [r0]
 800a81c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a820:	f04f 0b00 	mov.w	fp, #0
 800a824:	e028      	b.n	800a878 <__ieee754_rem_pio2+0x80>
 800a826:	4bc3      	ldr	r3, [pc, #780]	; (800ab34 <__ieee754_rem_pio2+0x33c>)
 800a828:	4598      	cmp	r8, r3
 800a82a:	dc78      	bgt.n	800a91e <__ieee754_rem_pio2+0x126>
 800a82c:	9b02      	ldr	r3, [sp, #8]
 800a82e:	4ec2      	ldr	r6, [pc, #776]	; (800ab38 <__ieee754_rem_pio2+0x340>)
 800a830:	2b00      	cmp	r3, #0
 800a832:	ee10 0a10 	vmov	r0, s0
 800a836:	a3b0      	add	r3, pc, #704	; (adr r3, 800aaf8 <__ieee754_rem_pio2+0x300>)
 800a838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83c:	4629      	mov	r1, r5
 800a83e:	dd39      	ble.n	800a8b4 <__ieee754_rem_pio2+0xbc>
 800a840:	f7f5 fd3a 	bl	80002b8 <__aeabi_dsub>
 800a844:	45b0      	cmp	r8, r6
 800a846:	4604      	mov	r4, r0
 800a848:	460d      	mov	r5, r1
 800a84a:	d01b      	beq.n	800a884 <__ieee754_rem_pio2+0x8c>
 800a84c:	a3ac      	add	r3, pc, #688	; (adr r3, 800ab00 <__ieee754_rem_pio2+0x308>)
 800a84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a852:	f7f5 fd31 	bl	80002b8 <__aeabi_dsub>
 800a856:	4602      	mov	r2, r0
 800a858:	460b      	mov	r3, r1
 800a85a:	e9ca 2300 	strd	r2, r3, [sl]
 800a85e:	4620      	mov	r0, r4
 800a860:	4629      	mov	r1, r5
 800a862:	f7f5 fd29 	bl	80002b8 <__aeabi_dsub>
 800a866:	a3a6      	add	r3, pc, #664	; (adr r3, 800ab00 <__ieee754_rem_pio2+0x308>)
 800a868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86c:	f7f5 fd24 	bl	80002b8 <__aeabi_dsub>
 800a870:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a874:	f04f 0b01 	mov.w	fp, #1
 800a878:	4658      	mov	r0, fp
 800a87a:	b00b      	add	sp, #44	; 0x2c
 800a87c:	ecbd 8b02 	vpop	{d8}
 800a880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a884:	a3a0      	add	r3, pc, #640	; (adr r3, 800ab08 <__ieee754_rem_pio2+0x310>)
 800a886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88a:	f7f5 fd15 	bl	80002b8 <__aeabi_dsub>
 800a88e:	a3a0      	add	r3, pc, #640	; (adr r3, 800ab10 <__ieee754_rem_pio2+0x318>)
 800a890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a894:	4604      	mov	r4, r0
 800a896:	460d      	mov	r5, r1
 800a898:	f7f5 fd0e 	bl	80002b8 <__aeabi_dsub>
 800a89c:	4602      	mov	r2, r0
 800a89e:	460b      	mov	r3, r1
 800a8a0:	e9ca 2300 	strd	r2, r3, [sl]
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	f7f5 fd06 	bl	80002b8 <__aeabi_dsub>
 800a8ac:	a398      	add	r3, pc, #608	; (adr r3, 800ab10 <__ieee754_rem_pio2+0x318>)
 800a8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b2:	e7db      	b.n	800a86c <__ieee754_rem_pio2+0x74>
 800a8b4:	f7f5 fd02 	bl	80002bc <__adddf3>
 800a8b8:	45b0      	cmp	r8, r6
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	460d      	mov	r5, r1
 800a8be:	d016      	beq.n	800a8ee <__ieee754_rem_pio2+0xf6>
 800a8c0:	a38f      	add	r3, pc, #572	; (adr r3, 800ab00 <__ieee754_rem_pio2+0x308>)
 800a8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c6:	f7f5 fcf9 	bl	80002bc <__adddf3>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	e9ca 2300 	strd	r2, r3, [sl]
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	4629      	mov	r1, r5
 800a8d6:	f7f5 fcef 	bl	80002b8 <__aeabi_dsub>
 800a8da:	a389      	add	r3, pc, #548	; (adr r3, 800ab00 <__ieee754_rem_pio2+0x308>)
 800a8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e0:	f7f5 fcec 	bl	80002bc <__adddf3>
 800a8e4:	f04f 3bff 	mov.w	fp, #4294967295
 800a8e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a8ec:	e7c4      	b.n	800a878 <__ieee754_rem_pio2+0x80>
 800a8ee:	a386      	add	r3, pc, #536	; (adr r3, 800ab08 <__ieee754_rem_pio2+0x310>)
 800a8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f4:	f7f5 fce2 	bl	80002bc <__adddf3>
 800a8f8:	a385      	add	r3, pc, #532	; (adr r3, 800ab10 <__ieee754_rem_pio2+0x318>)
 800a8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fe:	4604      	mov	r4, r0
 800a900:	460d      	mov	r5, r1
 800a902:	f7f5 fcdb 	bl	80002bc <__adddf3>
 800a906:	4602      	mov	r2, r0
 800a908:	460b      	mov	r3, r1
 800a90a:	e9ca 2300 	strd	r2, r3, [sl]
 800a90e:	4620      	mov	r0, r4
 800a910:	4629      	mov	r1, r5
 800a912:	f7f5 fcd1 	bl	80002b8 <__aeabi_dsub>
 800a916:	a37e      	add	r3, pc, #504	; (adr r3, 800ab10 <__ieee754_rem_pio2+0x318>)
 800a918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91c:	e7e0      	b.n	800a8e0 <__ieee754_rem_pio2+0xe8>
 800a91e:	4b87      	ldr	r3, [pc, #540]	; (800ab3c <__ieee754_rem_pio2+0x344>)
 800a920:	4598      	cmp	r8, r3
 800a922:	f300 80d9 	bgt.w	800aad8 <__ieee754_rem_pio2+0x2e0>
 800a926:	f000 ffeb 	bl	800b900 <fabs>
 800a92a:	ec55 4b10 	vmov	r4, r5, d0
 800a92e:	ee10 0a10 	vmov	r0, s0
 800a932:	a379      	add	r3, pc, #484	; (adr r3, 800ab18 <__ieee754_rem_pio2+0x320>)
 800a934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a938:	4629      	mov	r1, r5
 800a93a:	f7f5 fe75 	bl	8000628 <__aeabi_dmul>
 800a93e:	4b80      	ldr	r3, [pc, #512]	; (800ab40 <__ieee754_rem_pio2+0x348>)
 800a940:	2200      	movs	r2, #0
 800a942:	f7f5 fcbb 	bl	80002bc <__adddf3>
 800a946:	f7f6 f91f 	bl	8000b88 <__aeabi_d2iz>
 800a94a:	4683      	mov	fp, r0
 800a94c:	f7f5 fe02 	bl	8000554 <__aeabi_i2d>
 800a950:	4602      	mov	r2, r0
 800a952:	460b      	mov	r3, r1
 800a954:	ec43 2b18 	vmov	d8, r2, r3
 800a958:	a367      	add	r3, pc, #412	; (adr r3, 800aaf8 <__ieee754_rem_pio2+0x300>)
 800a95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95e:	f7f5 fe63 	bl	8000628 <__aeabi_dmul>
 800a962:	4602      	mov	r2, r0
 800a964:	460b      	mov	r3, r1
 800a966:	4620      	mov	r0, r4
 800a968:	4629      	mov	r1, r5
 800a96a:	f7f5 fca5 	bl	80002b8 <__aeabi_dsub>
 800a96e:	a364      	add	r3, pc, #400	; (adr r3, 800ab00 <__ieee754_rem_pio2+0x308>)
 800a970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a974:	4606      	mov	r6, r0
 800a976:	460f      	mov	r7, r1
 800a978:	ec51 0b18 	vmov	r0, r1, d8
 800a97c:	f7f5 fe54 	bl	8000628 <__aeabi_dmul>
 800a980:	f1bb 0f1f 	cmp.w	fp, #31
 800a984:	4604      	mov	r4, r0
 800a986:	460d      	mov	r5, r1
 800a988:	dc0d      	bgt.n	800a9a6 <__ieee754_rem_pio2+0x1ae>
 800a98a:	4b6e      	ldr	r3, [pc, #440]	; (800ab44 <__ieee754_rem_pio2+0x34c>)
 800a98c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a994:	4543      	cmp	r3, r8
 800a996:	d006      	beq.n	800a9a6 <__ieee754_rem_pio2+0x1ae>
 800a998:	4622      	mov	r2, r4
 800a99a:	462b      	mov	r3, r5
 800a99c:	4630      	mov	r0, r6
 800a99e:	4639      	mov	r1, r7
 800a9a0:	f7f5 fc8a 	bl	80002b8 <__aeabi_dsub>
 800a9a4:	e00f      	b.n	800a9c6 <__ieee754_rem_pio2+0x1ce>
 800a9a6:	462b      	mov	r3, r5
 800a9a8:	4622      	mov	r2, r4
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	4639      	mov	r1, r7
 800a9ae:	f7f5 fc83 	bl	80002b8 <__aeabi_dsub>
 800a9b2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a9b6:	9303      	str	r3, [sp, #12]
 800a9b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a9bc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a9c0:	f1b8 0f10 	cmp.w	r8, #16
 800a9c4:	dc02      	bgt.n	800a9cc <__ieee754_rem_pio2+0x1d4>
 800a9c6:	e9ca 0100 	strd	r0, r1, [sl]
 800a9ca:	e039      	b.n	800aa40 <__ieee754_rem_pio2+0x248>
 800a9cc:	a34e      	add	r3, pc, #312	; (adr r3, 800ab08 <__ieee754_rem_pio2+0x310>)
 800a9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d2:	ec51 0b18 	vmov	r0, r1, d8
 800a9d6:	f7f5 fe27 	bl	8000628 <__aeabi_dmul>
 800a9da:	4604      	mov	r4, r0
 800a9dc:	460d      	mov	r5, r1
 800a9de:	4602      	mov	r2, r0
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	4639      	mov	r1, r7
 800a9e6:	f7f5 fc67 	bl	80002b8 <__aeabi_dsub>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	4680      	mov	r8, r0
 800a9f0:	4689      	mov	r9, r1
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	4639      	mov	r1, r7
 800a9f6:	f7f5 fc5f 	bl	80002b8 <__aeabi_dsub>
 800a9fa:	4622      	mov	r2, r4
 800a9fc:	462b      	mov	r3, r5
 800a9fe:	f7f5 fc5b 	bl	80002b8 <__aeabi_dsub>
 800aa02:	a343      	add	r3, pc, #268	; (adr r3, 800ab10 <__ieee754_rem_pio2+0x318>)
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	4604      	mov	r4, r0
 800aa0a:	460d      	mov	r5, r1
 800aa0c:	ec51 0b18 	vmov	r0, r1, d8
 800aa10:	f7f5 fe0a 	bl	8000628 <__aeabi_dmul>
 800aa14:	4622      	mov	r2, r4
 800aa16:	462b      	mov	r3, r5
 800aa18:	f7f5 fc4e 	bl	80002b8 <__aeabi_dsub>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	460b      	mov	r3, r1
 800aa20:	4604      	mov	r4, r0
 800aa22:	460d      	mov	r5, r1
 800aa24:	4640      	mov	r0, r8
 800aa26:	4649      	mov	r1, r9
 800aa28:	f7f5 fc46 	bl	80002b8 <__aeabi_dsub>
 800aa2c:	9a03      	ldr	r2, [sp, #12]
 800aa2e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aa32:	1ad3      	subs	r3, r2, r3
 800aa34:	2b31      	cmp	r3, #49	; 0x31
 800aa36:	dc24      	bgt.n	800aa82 <__ieee754_rem_pio2+0x28a>
 800aa38:	e9ca 0100 	strd	r0, r1, [sl]
 800aa3c:	4646      	mov	r6, r8
 800aa3e:	464f      	mov	r7, r9
 800aa40:	e9da 8900 	ldrd	r8, r9, [sl]
 800aa44:	4630      	mov	r0, r6
 800aa46:	4642      	mov	r2, r8
 800aa48:	464b      	mov	r3, r9
 800aa4a:	4639      	mov	r1, r7
 800aa4c:	f7f5 fc34 	bl	80002b8 <__aeabi_dsub>
 800aa50:	462b      	mov	r3, r5
 800aa52:	4622      	mov	r2, r4
 800aa54:	f7f5 fc30 	bl	80002b8 <__aeabi_dsub>
 800aa58:	9b02      	ldr	r3, [sp, #8]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aa60:	f6bf af0a 	bge.w	800a878 <__ieee754_rem_pio2+0x80>
 800aa64:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aa68:	f8ca 3004 	str.w	r3, [sl, #4]
 800aa6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa70:	f8ca 8000 	str.w	r8, [sl]
 800aa74:	f8ca 0008 	str.w	r0, [sl, #8]
 800aa78:	f8ca 300c 	str.w	r3, [sl, #12]
 800aa7c:	f1cb 0b00 	rsb	fp, fp, #0
 800aa80:	e6fa      	b.n	800a878 <__ieee754_rem_pio2+0x80>
 800aa82:	a327      	add	r3, pc, #156	; (adr r3, 800ab20 <__ieee754_rem_pio2+0x328>)
 800aa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa88:	ec51 0b18 	vmov	r0, r1, d8
 800aa8c:	f7f5 fdcc 	bl	8000628 <__aeabi_dmul>
 800aa90:	4604      	mov	r4, r0
 800aa92:	460d      	mov	r5, r1
 800aa94:	4602      	mov	r2, r0
 800aa96:	460b      	mov	r3, r1
 800aa98:	4640      	mov	r0, r8
 800aa9a:	4649      	mov	r1, r9
 800aa9c:	f7f5 fc0c 	bl	80002b8 <__aeabi_dsub>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	4606      	mov	r6, r0
 800aaa6:	460f      	mov	r7, r1
 800aaa8:	4640      	mov	r0, r8
 800aaaa:	4649      	mov	r1, r9
 800aaac:	f7f5 fc04 	bl	80002b8 <__aeabi_dsub>
 800aab0:	4622      	mov	r2, r4
 800aab2:	462b      	mov	r3, r5
 800aab4:	f7f5 fc00 	bl	80002b8 <__aeabi_dsub>
 800aab8:	a31b      	add	r3, pc, #108	; (adr r3, 800ab28 <__ieee754_rem_pio2+0x330>)
 800aaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabe:	4604      	mov	r4, r0
 800aac0:	460d      	mov	r5, r1
 800aac2:	ec51 0b18 	vmov	r0, r1, d8
 800aac6:	f7f5 fdaf 	bl	8000628 <__aeabi_dmul>
 800aaca:	4622      	mov	r2, r4
 800aacc:	462b      	mov	r3, r5
 800aace:	f7f5 fbf3 	bl	80002b8 <__aeabi_dsub>
 800aad2:	4604      	mov	r4, r0
 800aad4:	460d      	mov	r5, r1
 800aad6:	e75f      	b.n	800a998 <__ieee754_rem_pio2+0x1a0>
 800aad8:	4b1b      	ldr	r3, [pc, #108]	; (800ab48 <__ieee754_rem_pio2+0x350>)
 800aada:	4598      	cmp	r8, r3
 800aadc:	dd36      	ble.n	800ab4c <__ieee754_rem_pio2+0x354>
 800aade:	ee10 2a10 	vmov	r2, s0
 800aae2:	462b      	mov	r3, r5
 800aae4:	4620      	mov	r0, r4
 800aae6:	4629      	mov	r1, r5
 800aae8:	f7f5 fbe6 	bl	80002b8 <__aeabi_dsub>
 800aaec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aaf0:	e9ca 0100 	strd	r0, r1, [sl]
 800aaf4:	e694      	b.n	800a820 <__ieee754_rem_pio2+0x28>
 800aaf6:	bf00      	nop
 800aaf8:	54400000 	.word	0x54400000
 800aafc:	3ff921fb 	.word	0x3ff921fb
 800ab00:	1a626331 	.word	0x1a626331
 800ab04:	3dd0b461 	.word	0x3dd0b461
 800ab08:	1a600000 	.word	0x1a600000
 800ab0c:	3dd0b461 	.word	0x3dd0b461
 800ab10:	2e037073 	.word	0x2e037073
 800ab14:	3ba3198a 	.word	0x3ba3198a
 800ab18:	6dc9c883 	.word	0x6dc9c883
 800ab1c:	3fe45f30 	.word	0x3fe45f30
 800ab20:	2e000000 	.word	0x2e000000
 800ab24:	3ba3198a 	.word	0x3ba3198a
 800ab28:	252049c1 	.word	0x252049c1
 800ab2c:	397b839a 	.word	0x397b839a
 800ab30:	3fe921fb 	.word	0x3fe921fb
 800ab34:	4002d97b 	.word	0x4002d97b
 800ab38:	3ff921fb 	.word	0x3ff921fb
 800ab3c:	413921fb 	.word	0x413921fb
 800ab40:	3fe00000 	.word	0x3fe00000
 800ab44:	0800c3b8 	.word	0x0800c3b8
 800ab48:	7fefffff 	.word	0x7fefffff
 800ab4c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ab50:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ab54:	ee10 0a10 	vmov	r0, s0
 800ab58:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ab5c:	ee10 6a10 	vmov	r6, s0
 800ab60:	460f      	mov	r7, r1
 800ab62:	f7f6 f811 	bl	8000b88 <__aeabi_d2iz>
 800ab66:	f7f5 fcf5 	bl	8000554 <__aeabi_i2d>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	4630      	mov	r0, r6
 800ab70:	4639      	mov	r1, r7
 800ab72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab76:	f7f5 fb9f 	bl	80002b8 <__aeabi_dsub>
 800ab7a:	4b23      	ldr	r3, [pc, #140]	; (800ac08 <__ieee754_rem_pio2+0x410>)
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f7f5 fd53 	bl	8000628 <__aeabi_dmul>
 800ab82:	460f      	mov	r7, r1
 800ab84:	4606      	mov	r6, r0
 800ab86:	f7f5 ffff 	bl	8000b88 <__aeabi_d2iz>
 800ab8a:	f7f5 fce3 	bl	8000554 <__aeabi_i2d>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	460b      	mov	r3, r1
 800ab92:	4630      	mov	r0, r6
 800ab94:	4639      	mov	r1, r7
 800ab96:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ab9a:	f7f5 fb8d 	bl	80002b8 <__aeabi_dsub>
 800ab9e:	4b1a      	ldr	r3, [pc, #104]	; (800ac08 <__ieee754_rem_pio2+0x410>)
 800aba0:	2200      	movs	r2, #0
 800aba2:	f7f5 fd41 	bl	8000628 <__aeabi_dmul>
 800aba6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800abaa:	ad04      	add	r5, sp, #16
 800abac:	f04f 0803 	mov.w	r8, #3
 800abb0:	46a9      	mov	r9, r5
 800abb2:	2600      	movs	r6, #0
 800abb4:	2700      	movs	r7, #0
 800abb6:	4632      	mov	r2, r6
 800abb8:	463b      	mov	r3, r7
 800abba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800abbe:	46c3      	mov	fp, r8
 800abc0:	3d08      	subs	r5, #8
 800abc2:	f108 38ff 	add.w	r8, r8, #4294967295
 800abc6:	f7f5 ff97 	bl	8000af8 <__aeabi_dcmpeq>
 800abca:	2800      	cmp	r0, #0
 800abcc:	d1f3      	bne.n	800abb6 <__ieee754_rem_pio2+0x3be>
 800abce:	4b0f      	ldr	r3, [pc, #60]	; (800ac0c <__ieee754_rem_pio2+0x414>)
 800abd0:	9301      	str	r3, [sp, #4]
 800abd2:	2302      	movs	r3, #2
 800abd4:	9300      	str	r3, [sp, #0]
 800abd6:	4622      	mov	r2, r4
 800abd8:	465b      	mov	r3, fp
 800abda:	4651      	mov	r1, sl
 800abdc:	4648      	mov	r0, r9
 800abde:	f000 f8df 	bl	800ada0 <__kernel_rem_pio2>
 800abe2:	9b02      	ldr	r3, [sp, #8]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	4683      	mov	fp, r0
 800abe8:	f6bf ae46 	bge.w	800a878 <__ieee754_rem_pio2+0x80>
 800abec:	e9da 2100 	ldrd	r2, r1, [sl]
 800abf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abf4:	e9ca 2300 	strd	r2, r3, [sl]
 800abf8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800abfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac00:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ac04:	e73a      	b.n	800aa7c <__ieee754_rem_pio2+0x284>
 800ac06:	bf00      	nop
 800ac08:	41700000 	.word	0x41700000
 800ac0c:	0800c438 	.word	0x0800c438

0800ac10 <__kernel_cos>:
 800ac10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac14:	ec57 6b10 	vmov	r6, r7, d0
 800ac18:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ac1c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ac20:	ed8d 1b00 	vstr	d1, [sp]
 800ac24:	da07      	bge.n	800ac36 <__kernel_cos+0x26>
 800ac26:	ee10 0a10 	vmov	r0, s0
 800ac2a:	4639      	mov	r1, r7
 800ac2c:	f7f5 ffac 	bl	8000b88 <__aeabi_d2iz>
 800ac30:	2800      	cmp	r0, #0
 800ac32:	f000 8088 	beq.w	800ad46 <__kernel_cos+0x136>
 800ac36:	4632      	mov	r2, r6
 800ac38:	463b      	mov	r3, r7
 800ac3a:	4630      	mov	r0, r6
 800ac3c:	4639      	mov	r1, r7
 800ac3e:	f7f5 fcf3 	bl	8000628 <__aeabi_dmul>
 800ac42:	4b51      	ldr	r3, [pc, #324]	; (800ad88 <__kernel_cos+0x178>)
 800ac44:	2200      	movs	r2, #0
 800ac46:	4604      	mov	r4, r0
 800ac48:	460d      	mov	r5, r1
 800ac4a:	f7f5 fced 	bl	8000628 <__aeabi_dmul>
 800ac4e:	a340      	add	r3, pc, #256	; (adr r3, 800ad50 <__kernel_cos+0x140>)
 800ac50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac54:	4682      	mov	sl, r0
 800ac56:	468b      	mov	fp, r1
 800ac58:	4620      	mov	r0, r4
 800ac5a:	4629      	mov	r1, r5
 800ac5c:	f7f5 fce4 	bl	8000628 <__aeabi_dmul>
 800ac60:	a33d      	add	r3, pc, #244	; (adr r3, 800ad58 <__kernel_cos+0x148>)
 800ac62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac66:	f7f5 fb29 	bl	80002bc <__adddf3>
 800ac6a:	4622      	mov	r2, r4
 800ac6c:	462b      	mov	r3, r5
 800ac6e:	f7f5 fcdb 	bl	8000628 <__aeabi_dmul>
 800ac72:	a33b      	add	r3, pc, #236	; (adr r3, 800ad60 <__kernel_cos+0x150>)
 800ac74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac78:	f7f5 fb1e 	bl	80002b8 <__aeabi_dsub>
 800ac7c:	4622      	mov	r2, r4
 800ac7e:	462b      	mov	r3, r5
 800ac80:	f7f5 fcd2 	bl	8000628 <__aeabi_dmul>
 800ac84:	a338      	add	r3, pc, #224	; (adr r3, 800ad68 <__kernel_cos+0x158>)
 800ac86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8a:	f7f5 fb17 	bl	80002bc <__adddf3>
 800ac8e:	4622      	mov	r2, r4
 800ac90:	462b      	mov	r3, r5
 800ac92:	f7f5 fcc9 	bl	8000628 <__aeabi_dmul>
 800ac96:	a336      	add	r3, pc, #216	; (adr r3, 800ad70 <__kernel_cos+0x160>)
 800ac98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9c:	f7f5 fb0c 	bl	80002b8 <__aeabi_dsub>
 800aca0:	4622      	mov	r2, r4
 800aca2:	462b      	mov	r3, r5
 800aca4:	f7f5 fcc0 	bl	8000628 <__aeabi_dmul>
 800aca8:	a333      	add	r3, pc, #204	; (adr r3, 800ad78 <__kernel_cos+0x168>)
 800acaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acae:	f7f5 fb05 	bl	80002bc <__adddf3>
 800acb2:	4622      	mov	r2, r4
 800acb4:	462b      	mov	r3, r5
 800acb6:	f7f5 fcb7 	bl	8000628 <__aeabi_dmul>
 800acba:	4622      	mov	r2, r4
 800acbc:	462b      	mov	r3, r5
 800acbe:	f7f5 fcb3 	bl	8000628 <__aeabi_dmul>
 800acc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acc6:	4604      	mov	r4, r0
 800acc8:	460d      	mov	r5, r1
 800acca:	4630      	mov	r0, r6
 800accc:	4639      	mov	r1, r7
 800acce:	f7f5 fcab 	bl	8000628 <__aeabi_dmul>
 800acd2:	460b      	mov	r3, r1
 800acd4:	4602      	mov	r2, r0
 800acd6:	4629      	mov	r1, r5
 800acd8:	4620      	mov	r0, r4
 800acda:	f7f5 faed 	bl	80002b8 <__aeabi_dsub>
 800acde:	4b2b      	ldr	r3, [pc, #172]	; (800ad8c <__kernel_cos+0x17c>)
 800ace0:	4598      	cmp	r8, r3
 800ace2:	4606      	mov	r6, r0
 800ace4:	460f      	mov	r7, r1
 800ace6:	dc10      	bgt.n	800ad0a <__kernel_cos+0xfa>
 800ace8:	4602      	mov	r2, r0
 800acea:	460b      	mov	r3, r1
 800acec:	4650      	mov	r0, sl
 800acee:	4659      	mov	r1, fp
 800acf0:	f7f5 fae2 	bl	80002b8 <__aeabi_dsub>
 800acf4:	460b      	mov	r3, r1
 800acf6:	4926      	ldr	r1, [pc, #152]	; (800ad90 <__kernel_cos+0x180>)
 800acf8:	4602      	mov	r2, r0
 800acfa:	2000      	movs	r0, #0
 800acfc:	f7f5 fadc 	bl	80002b8 <__aeabi_dsub>
 800ad00:	ec41 0b10 	vmov	d0, r0, r1
 800ad04:	b003      	add	sp, #12
 800ad06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad0a:	4b22      	ldr	r3, [pc, #136]	; (800ad94 <__kernel_cos+0x184>)
 800ad0c:	4920      	ldr	r1, [pc, #128]	; (800ad90 <__kernel_cos+0x180>)
 800ad0e:	4598      	cmp	r8, r3
 800ad10:	bfcc      	ite	gt
 800ad12:	4d21      	ldrgt	r5, [pc, #132]	; (800ad98 <__kernel_cos+0x188>)
 800ad14:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ad18:	2400      	movs	r4, #0
 800ad1a:	4622      	mov	r2, r4
 800ad1c:	462b      	mov	r3, r5
 800ad1e:	2000      	movs	r0, #0
 800ad20:	f7f5 faca 	bl	80002b8 <__aeabi_dsub>
 800ad24:	4622      	mov	r2, r4
 800ad26:	4680      	mov	r8, r0
 800ad28:	4689      	mov	r9, r1
 800ad2a:	462b      	mov	r3, r5
 800ad2c:	4650      	mov	r0, sl
 800ad2e:	4659      	mov	r1, fp
 800ad30:	f7f5 fac2 	bl	80002b8 <__aeabi_dsub>
 800ad34:	4632      	mov	r2, r6
 800ad36:	463b      	mov	r3, r7
 800ad38:	f7f5 fabe 	bl	80002b8 <__aeabi_dsub>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	460b      	mov	r3, r1
 800ad40:	4640      	mov	r0, r8
 800ad42:	4649      	mov	r1, r9
 800ad44:	e7da      	b.n	800acfc <__kernel_cos+0xec>
 800ad46:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ad80 <__kernel_cos+0x170>
 800ad4a:	e7db      	b.n	800ad04 <__kernel_cos+0xf4>
 800ad4c:	f3af 8000 	nop.w
 800ad50:	be8838d4 	.word	0xbe8838d4
 800ad54:	bda8fae9 	.word	0xbda8fae9
 800ad58:	bdb4b1c4 	.word	0xbdb4b1c4
 800ad5c:	3e21ee9e 	.word	0x3e21ee9e
 800ad60:	809c52ad 	.word	0x809c52ad
 800ad64:	3e927e4f 	.word	0x3e927e4f
 800ad68:	19cb1590 	.word	0x19cb1590
 800ad6c:	3efa01a0 	.word	0x3efa01a0
 800ad70:	16c15177 	.word	0x16c15177
 800ad74:	3f56c16c 	.word	0x3f56c16c
 800ad78:	5555554c 	.word	0x5555554c
 800ad7c:	3fa55555 	.word	0x3fa55555
 800ad80:	00000000 	.word	0x00000000
 800ad84:	3ff00000 	.word	0x3ff00000
 800ad88:	3fe00000 	.word	0x3fe00000
 800ad8c:	3fd33332 	.word	0x3fd33332
 800ad90:	3ff00000 	.word	0x3ff00000
 800ad94:	3fe90000 	.word	0x3fe90000
 800ad98:	3fd20000 	.word	0x3fd20000
 800ad9c:	00000000 	.word	0x00000000

0800ada0 <__kernel_rem_pio2>:
 800ada0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada4:	ed2d 8b02 	vpush	{d8}
 800ada8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800adac:	f112 0f14 	cmn.w	r2, #20
 800adb0:	9308      	str	r3, [sp, #32]
 800adb2:	9101      	str	r1, [sp, #4]
 800adb4:	4bc4      	ldr	r3, [pc, #784]	; (800b0c8 <__kernel_rem_pio2+0x328>)
 800adb6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800adb8:	900b      	str	r0, [sp, #44]	; 0x2c
 800adba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800adbe:	9302      	str	r3, [sp, #8]
 800adc0:	9b08      	ldr	r3, [sp, #32]
 800adc2:	f103 33ff 	add.w	r3, r3, #4294967295
 800adc6:	bfa8      	it	ge
 800adc8:	1ed4      	subge	r4, r2, #3
 800adca:	9306      	str	r3, [sp, #24]
 800adcc:	bfb2      	itee	lt
 800adce:	2400      	movlt	r4, #0
 800add0:	2318      	movge	r3, #24
 800add2:	fb94 f4f3 	sdivge	r4, r4, r3
 800add6:	f06f 0317 	mvn.w	r3, #23
 800adda:	fb04 3303 	mla	r3, r4, r3, r3
 800adde:	eb03 0a02 	add.w	sl, r3, r2
 800ade2:	9b02      	ldr	r3, [sp, #8]
 800ade4:	9a06      	ldr	r2, [sp, #24]
 800ade6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800b0b8 <__kernel_rem_pio2+0x318>
 800adea:	eb03 0802 	add.w	r8, r3, r2
 800adee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800adf0:	1aa7      	subs	r7, r4, r2
 800adf2:	ae22      	add	r6, sp, #136	; 0x88
 800adf4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800adf8:	2500      	movs	r5, #0
 800adfa:	4545      	cmp	r5, r8
 800adfc:	dd13      	ble.n	800ae26 <__kernel_rem_pio2+0x86>
 800adfe:	9b08      	ldr	r3, [sp, #32]
 800ae00:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800b0b8 <__kernel_rem_pio2+0x318>
 800ae04:	aa22      	add	r2, sp, #136	; 0x88
 800ae06:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ae0a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ae0e:	f04f 0800 	mov.w	r8, #0
 800ae12:	9b02      	ldr	r3, [sp, #8]
 800ae14:	4598      	cmp	r8, r3
 800ae16:	dc2f      	bgt.n	800ae78 <__kernel_rem_pio2+0xd8>
 800ae18:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ae1c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800ae20:	462f      	mov	r7, r5
 800ae22:	2600      	movs	r6, #0
 800ae24:	e01b      	b.n	800ae5e <__kernel_rem_pio2+0xbe>
 800ae26:	42ef      	cmn	r7, r5
 800ae28:	d407      	bmi.n	800ae3a <__kernel_rem_pio2+0x9a>
 800ae2a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ae2e:	f7f5 fb91 	bl	8000554 <__aeabi_i2d>
 800ae32:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ae36:	3501      	adds	r5, #1
 800ae38:	e7df      	b.n	800adfa <__kernel_rem_pio2+0x5a>
 800ae3a:	ec51 0b18 	vmov	r0, r1, d8
 800ae3e:	e7f8      	b.n	800ae32 <__kernel_rem_pio2+0x92>
 800ae40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae44:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ae48:	f7f5 fbee 	bl	8000628 <__aeabi_dmul>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	460b      	mov	r3, r1
 800ae50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae54:	f7f5 fa32 	bl	80002bc <__adddf3>
 800ae58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae5c:	3601      	adds	r6, #1
 800ae5e:	9b06      	ldr	r3, [sp, #24]
 800ae60:	429e      	cmp	r6, r3
 800ae62:	f1a7 0708 	sub.w	r7, r7, #8
 800ae66:	ddeb      	ble.n	800ae40 <__kernel_rem_pio2+0xa0>
 800ae68:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ae6c:	f108 0801 	add.w	r8, r8, #1
 800ae70:	ecab 7b02 	vstmia	fp!, {d7}
 800ae74:	3508      	adds	r5, #8
 800ae76:	e7cc      	b.n	800ae12 <__kernel_rem_pio2+0x72>
 800ae78:	9b02      	ldr	r3, [sp, #8]
 800ae7a:	aa0e      	add	r2, sp, #56	; 0x38
 800ae7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae80:	930d      	str	r3, [sp, #52]	; 0x34
 800ae82:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ae84:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ae88:	9c02      	ldr	r4, [sp, #8]
 800ae8a:	930c      	str	r3, [sp, #48]	; 0x30
 800ae8c:	00e3      	lsls	r3, r4, #3
 800ae8e:	930a      	str	r3, [sp, #40]	; 0x28
 800ae90:	ab9a      	add	r3, sp, #616	; 0x268
 800ae92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae96:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ae9a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800ae9e:	ab72      	add	r3, sp, #456	; 0x1c8
 800aea0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800aea4:	46c3      	mov	fp, r8
 800aea6:	46a1      	mov	r9, r4
 800aea8:	f1b9 0f00 	cmp.w	r9, #0
 800aeac:	f1a5 0508 	sub.w	r5, r5, #8
 800aeb0:	dc77      	bgt.n	800afa2 <__kernel_rem_pio2+0x202>
 800aeb2:	ec47 6b10 	vmov	d0, r6, r7
 800aeb6:	4650      	mov	r0, sl
 800aeb8:	f000 fdae 	bl	800ba18 <scalbn>
 800aebc:	ec57 6b10 	vmov	r6, r7, d0
 800aec0:	2200      	movs	r2, #0
 800aec2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800aec6:	ee10 0a10 	vmov	r0, s0
 800aeca:	4639      	mov	r1, r7
 800aecc:	f7f5 fbac 	bl	8000628 <__aeabi_dmul>
 800aed0:	ec41 0b10 	vmov	d0, r0, r1
 800aed4:	f000 fd20 	bl	800b918 <floor>
 800aed8:	4b7c      	ldr	r3, [pc, #496]	; (800b0cc <__kernel_rem_pio2+0x32c>)
 800aeda:	ec51 0b10 	vmov	r0, r1, d0
 800aede:	2200      	movs	r2, #0
 800aee0:	f7f5 fba2 	bl	8000628 <__aeabi_dmul>
 800aee4:	4602      	mov	r2, r0
 800aee6:	460b      	mov	r3, r1
 800aee8:	4630      	mov	r0, r6
 800aeea:	4639      	mov	r1, r7
 800aeec:	f7f5 f9e4 	bl	80002b8 <__aeabi_dsub>
 800aef0:	460f      	mov	r7, r1
 800aef2:	4606      	mov	r6, r0
 800aef4:	f7f5 fe48 	bl	8000b88 <__aeabi_d2iz>
 800aef8:	9004      	str	r0, [sp, #16]
 800aefa:	f7f5 fb2b 	bl	8000554 <__aeabi_i2d>
 800aefe:	4602      	mov	r2, r0
 800af00:	460b      	mov	r3, r1
 800af02:	4630      	mov	r0, r6
 800af04:	4639      	mov	r1, r7
 800af06:	f7f5 f9d7 	bl	80002b8 <__aeabi_dsub>
 800af0a:	f1ba 0f00 	cmp.w	sl, #0
 800af0e:	4606      	mov	r6, r0
 800af10:	460f      	mov	r7, r1
 800af12:	dd6d      	ble.n	800aff0 <__kernel_rem_pio2+0x250>
 800af14:	1e62      	subs	r2, r4, #1
 800af16:	ab0e      	add	r3, sp, #56	; 0x38
 800af18:	9d04      	ldr	r5, [sp, #16]
 800af1a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800af1e:	f1ca 0118 	rsb	r1, sl, #24
 800af22:	fa40 f301 	asr.w	r3, r0, r1
 800af26:	441d      	add	r5, r3
 800af28:	408b      	lsls	r3, r1
 800af2a:	1ac0      	subs	r0, r0, r3
 800af2c:	ab0e      	add	r3, sp, #56	; 0x38
 800af2e:	9504      	str	r5, [sp, #16]
 800af30:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800af34:	f1ca 0317 	rsb	r3, sl, #23
 800af38:	fa40 fb03 	asr.w	fp, r0, r3
 800af3c:	f1bb 0f00 	cmp.w	fp, #0
 800af40:	dd65      	ble.n	800b00e <__kernel_rem_pio2+0x26e>
 800af42:	9b04      	ldr	r3, [sp, #16]
 800af44:	2200      	movs	r2, #0
 800af46:	3301      	adds	r3, #1
 800af48:	9304      	str	r3, [sp, #16]
 800af4a:	4615      	mov	r5, r2
 800af4c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800af50:	4294      	cmp	r4, r2
 800af52:	f300 809c 	bgt.w	800b08e <__kernel_rem_pio2+0x2ee>
 800af56:	f1ba 0f00 	cmp.w	sl, #0
 800af5a:	dd07      	ble.n	800af6c <__kernel_rem_pio2+0x1cc>
 800af5c:	f1ba 0f01 	cmp.w	sl, #1
 800af60:	f000 80c0 	beq.w	800b0e4 <__kernel_rem_pio2+0x344>
 800af64:	f1ba 0f02 	cmp.w	sl, #2
 800af68:	f000 80c6 	beq.w	800b0f8 <__kernel_rem_pio2+0x358>
 800af6c:	f1bb 0f02 	cmp.w	fp, #2
 800af70:	d14d      	bne.n	800b00e <__kernel_rem_pio2+0x26e>
 800af72:	4632      	mov	r2, r6
 800af74:	463b      	mov	r3, r7
 800af76:	4956      	ldr	r1, [pc, #344]	; (800b0d0 <__kernel_rem_pio2+0x330>)
 800af78:	2000      	movs	r0, #0
 800af7a:	f7f5 f99d 	bl	80002b8 <__aeabi_dsub>
 800af7e:	4606      	mov	r6, r0
 800af80:	460f      	mov	r7, r1
 800af82:	2d00      	cmp	r5, #0
 800af84:	d043      	beq.n	800b00e <__kernel_rem_pio2+0x26e>
 800af86:	4650      	mov	r0, sl
 800af88:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800b0c0 <__kernel_rem_pio2+0x320>
 800af8c:	f000 fd44 	bl	800ba18 <scalbn>
 800af90:	4630      	mov	r0, r6
 800af92:	4639      	mov	r1, r7
 800af94:	ec53 2b10 	vmov	r2, r3, d0
 800af98:	f7f5 f98e 	bl	80002b8 <__aeabi_dsub>
 800af9c:	4606      	mov	r6, r0
 800af9e:	460f      	mov	r7, r1
 800afa0:	e035      	b.n	800b00e <__kernel_rem_pio2+0x26e>
 800afa2:	4b4c      	ldr	r3, [pc, #304]	; (800b0d4 <__kernel_rem_pio2+0x334>)
 800afa4:	2200      	movs	r2, #0
 800afa6:	4630      	mov	r0, r6
 800afa8:	4639      	mov	r1, r7
 800afaa:	f7f5 fb3d 	bl	8000628 <__aeabi_dmul>
 800afae:	f7f5 fdeb 	bl	8000b88 <__aeabi_d2iz>
 800afb2:	f7f5 facf 	bl	8000554 <__aeabi_i2d>
 800afb6:	4602      	mov	r2, r0
 800afb8:	460b      	mov	r3, r1
 800afba:	ec43 2b18 	vmov	d8, r2, r3
 800afbe:	4b46      	ldr	r3, [pc, #280]	; (800b0d8 <__kernel_rem_pio2+0x338>)
 800afc0:	2200      	movs	r2, #0
 800afc2:	f7f5 fb31 	bl	8000628 <__aeabi_dmul>
 800afc6:	4602      	mov	r2, r0
 800afc8:	460b      	mov	r3, r1
 800afca:	4630      	mov	r0, r6
 800afcc:	4639      	mov	r1, r7
 800afce:	f7f5 f973 	bl	80002b8 <__aeabi_dsub>
 800afd2:	f7f5 fdd9 	bl	8000b88 <__aeabi_d2iz>
 800afd6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afda:	f84b 0b04 	str.w	r0, [fp], #4
 800afde:	ec51 0b18 	vmov	r0, r1, d8
 800afe2:	f7f5 f96b 	bl	80002bc <__adddf3>
 800afe6:	f109 39ff 	add.w	r9, r9, #4294967295
 800afea:	4606      	mov	r6, r0
 800afec:	460f      	mov	r7, r1
 800afee:	e75b      	b.n	800aea8 <__kernel_rem_pio2+0x108>
 800aff0:	d106      	bne.n	800b000 <__kernel_rem_pio2+0x260>
 800aff2:	1e63      	subs	r3, r4, #1
 800aff4:	aa0e      	add	r2, sp, #56	; 0x38
 800aff6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800affa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800affe:	e79d      	b.n	800af3c <__kernel_rem_pio2+0x19c>
 800b000:	4b36      	ldr	r3, [pc, #216]	; (800b0dc <__kernel_rem_pio2+0x33c>)
 800b002:	2200      	movs	r2, #0
 800b004:	f7f5 fd96 	bl	8000b34 <__aeabi_dcmpge>
 800b008:	2800      	cmp	r0, #0
 800b00a:	d13d      	bne.n	800b088 <__kernel_rem_pio2+0x2e8>
 800b00c:	4683      	mov	fp, r0
 800b00e:	2200      	movs	r2, #0
 800b010:	2300      	movs	r3, #0
 800b012:	4630      	mov	r0, r6
 800b014:	4639      	mov	r1, r7
 800b016:	f7f5 fd6f 	bl	8000af8 <__aeabi_dcmpeq>
 800b01a:	2800      	cmp	r0, #0
 800b01c:	f000 80c0 	beq.w	800b1a0 <__kernel_rem_pio2+0x400>
 800b020:	1e65      	subs	r5, r4, #1
 800b022:	462b      	mov	r3, r5
 800b024:	2200      	movs	r2, #0
 800b026:	9902      	ldr	r1, [sp, #8]
 800b028:	428b      	cmp	r3, r1
 800b02a:	da6c      	bge.n	800b106 <__kernel_rem_pio2+0x366>
 800b02c:	2a00      	cmp	r2, #0
 800b02e:	f000 8089 	beq.w	800b144 <__kernel_rem_pio2+0x3a4>
 800b032:	ab0e      	add	r3, sp, #56	; 0x38
 800b034:	f1aa 0a18 	sub.w	sl, sl, #24
 800b038:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	f000 80ad 	beq.w	800b19c <__kernel_rem_pio2+0x3fc>
 800b042:	4650      	mov	r0, sl
 800b044:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b0c0 <__kernel_rem_pio2+0x320>
 800b048:	f000 fce6 	bl	800ba18 <scalbn>
 800b04c:	ab9a      	add	r3, sp, #616	; 0x268
 800b04e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b052:	ec57 6b10 	vmov	r6, r7, d0
 800b056:	00ec      	lsls	r4, r5, #3
 800b058:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800b05c:	46aa      	mov	sl, r5
 800b05e:	f1ba 0f00 	cmp.w	sl, #0
 800b062:	f280 80d6 	bge.w	800b212 <__kernel_rem_pio2+0x472>
 800b066:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800b0b8 <__kernel_rem_pio2+0x318>
 800b06a:	462e      	mov	r6, r5
 800b06c:	2e00      	cmp	r6, #0
 800b06e:	f2c0 8104 	blt.w	800b27a <__kernel_rem_pio2+0x4da>
 800b072:	ab72      	add	r3, sp, #456	; 0x1c8
 800b074:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b078:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b0e0 <__kernel_rem_pio2+0x340>
 800b07c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b080:	f04f 0800 	mov.w	r8, #0
 800b084:	1baf      	subs	r7, r5, r6
 800b086:	e0ea      	b.n	800b25e <__kernel_rem_pio2+0x4be>
 800b088:	f04f 0b02 	mov.w	fp, #2
 800b08c:	e759      	b.n	800af42 <__kernel_rem_pio2+0x1a2>
 800b08e:	f8d8 3000 	ldr.w	r3, [r8]
 800b092:	b955      	cbnz	r5, 800b0aa <__kernel_rem_pio2+0x30a>
 800b094:	b123      	cbz	r3, 800b0a0 <__kernel_rem_pio2+0x300>
 800b096:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b09a:	f8c8 3000 	str.w	r3, [r8]
 800b09e:	2301      	movs	r3, #1
 800b0a0:	3201      	adds	r2, #1
 800b0a2:	f108 0804 	add.w	r8, r8, #4
 800b0a6:	461d      	mov	r5, r3
 800b0a8:	e752      	b.n	800af50 <__kernel_rem_pio2+0x1b0>
 800b0aa:	1acb      	subs	r3, r1, r3
 800b0ac:	f8c8 3000 	str.w	r3, [r8]
 800b0b0:	462b      	mov	r3, r5
 800b0b2:	e7f5      	b.n	800b0a0 <__kernel_rem_pio2+0x300>
 800b0b4:	f3af 8000 	nop.w
	...
 800b0c4:	3ff00000 	.word	0x3ff00000
 800b0c8:	0800c580 	.word	0x0800c580
 800b0cc:	40200000 	.word	0x40200000
 800b0d0:	3ff00000 	.word	0x3ff00000
 800b0d4:	3e700000 	.word	0x3e700000
 800b0d8:	41700000 	.word	0x41700000
 800b0dc:	3fe00000 	.word	0x3fe00000
 800b0e0:	0800c540 	.word	0x0800c540
 800b0e4:	1e62      	subs	r2, r4, #1
 800b0e6:	ab0e      	add	r3, sp, #56	; 0x38
 800b0e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b0f0:	a90e      	add	r1, sp, #56	; 0x38
 800b0f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b0f6:	e739      	b.n	800af6c <__kernel_rem_pio2+0x1cc>
 800b0f8:	1e62      	subs	r2, r4, #1
 800b0fa:	ab0e      	add	r3, sp, #56	; 0x38
 800b0fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b100:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b104:	e7f4      	b.n	800b0f0 <__kernel_rem_pio2+0x350>
 800b106:	a90e      	add	r1, sp, #56	; 0x38
 800b108:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b10c:	3b01      	subs	r3, #1
 800b10e:	430a      	orrs	r2, r1
 800b110:	e789      	b.n	800b026 <__kernel_rem_pio2+0x286>
 800b112:	3301      	adds	r3, #1
 800b114:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b118:	2900      	cmp	r1, #0
 800b11a:	d0fa      	beq.n	800b112 <__kernel_rem_pio2+0x372>
 800b11c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b11e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800b122:	446a      	add	r2, sp
 800b124:	3a98      	subs	r2, #152	; 0x98
 800b126:	920a      	str	r2, [sp, #40]	; 0x28
 800b128:	9a08      	ldr	r2, [sp, #32]
 800b12a:	18e3      	adds	r3, r4, r3
 800b12c:	18a5      	adds	r5, r4, r2
 800b12e:	aa22      	add	r2, sp, #136	; 0x88
 800b130:	f104 0801 	add.w	r8, r4, #1
 800b134:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b138:	9304      	str	r3, [sp, #16]
 800b13a:	9b04      	ldr	r3, [sp, #16]
 800b13c:	4543      	cmp	r3, r8
 800b13e:	da04      	bge.n	800b14a <__kernel_rem_pio2+0x3aa>
 800b140:	461c      	mov	r4, r3
 800b142:	e6a3      	b.n	800ae8c <__kernel_rem_pio2+0xec>
 800b144:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b146:	2301      	movs	r3, #1
 800b148:	e7e4      	b.n	800b114 <__kernel_rem_pio2+0x374>
 800b14a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b14c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b150:	f7f5 fa00 	bl	8000554 <__aeabi_i2d>
 800b154:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b15a:	46ab      	mov	fp, r5
 800b15c:	461c      	mov	r4, r3
 800b15e:	f04f 0900 	mov.w	r9, #0
 800b162:	2600      	movs	r6, #0
 800b164:	2700      	movs	r7, #0
 800b166:	9b06      	ldr	r3, [sp, #24]
 800b168:	4599      	cmp	r9, r3
 800b16a:	dd06      	ble.n	800b17a <__kernel_rem_pio2+0x3da>
 800b16c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b16e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b172:	f108 0801 	add.w	r8, r8, #1
 800b176:	930a      	str	r3, [sp, #40]	; 0x28
 800b178:	e7df      	b.n	800b13a <__kernel_rem_pio2+0x39a>
 800b17a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b17e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b182:	f7f5 fa51 	bl	8000628 <__aeabi_dmul>
 800b186:	4602      	mov	r2, r0
 800b188:	460b      	mov	r3, r1
 800b18a:	4630      	mov	r0, r6
 800b18c:	4639      	mov	r1, r7
 800b18e:	f7f5 f895 	bl	80002bc <__adddf3>
 800b192:	f109 0901 	add.w	r9, r9, #1
 800b196:	4606      	mov	r6, r0
 800b198:	460f      	mov	r7, r1
 800b19a:	e7e4      	b.n	800b166 <__kernel_rem_pio2+0x3c6>
 800b19c:	3d01      	subs	r5, #1
 800b19e:	e748      	b.n	800b032 <__kernel_rem_pio2+0x292>
 800b1a0:	ec47 6b10 	vmov	d0, r6, r7
 800b1a4:	f1ca 0000 	rsb	r0, sl, #0
 800b1a8:	f000 fc36 	bl	800ba18 <scalbn>
 800b1ac:	ec57 6b10 	vmov	r6, r7, d0
 800b1b0:	4ba0      	ldr	r3, [pc, #640]	; (800b434 <__kernel_rem_pio2+0x694>)
 800b1b2:	ee10 0a10 	vmov	r0, s0
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	4639      	mov	r1, r7
 800b1ba:	f7f5 fcbb 	bl	8000b34 <__aeabi_dcmpge>
 800b1be:	b1f8      	cbz	r0, 800b200 <__kernel_rem_pio2+0x460>
 800b1c0:	4b9d      	ldr	r3, [pc, #628]	; (800b438 <__kernel_rem_pio2+0x698>)
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	4639      	mov	r1, r7
 800b1c8:	f7f5 fa2e 	bl	8000628 <__aeabi_dmul>
 800b1cc:	f7f5 fcdc 	bl	8000b88 <__aeabi_d2iz>
 800b1d0:	4680      	mov	r8, r0
 800b1d2:	f7f5 f9bf 	bl	8000554 <__aeabi_i2d>
 800b1d6:	4b97      	ldr	r3, [pc, #604]	; (800b434 <__kernel_rem_pio2+0x694>)
 800b1d8:	2200      	movs	r2, #0
 800b1da:	f7f5 fa25 	bl	8000628 <__aeabi_dmul>
 800b1de:	460b      	mov	r3, r1
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	4639      	mov	r1, r7
 800b1e4:	4630      	mov	r0, r6
 800b1e6:	f7f5 f867 	bl	80002b8 <__aeabi_dsub>
 800b1ea:	f7f5 fccd 	bl	8000b88 <__aeabi_d2iz>
 800b1ee:	1c65      	adds	r5, r4, #1
 800b1f0:	ab0e      	add	r3, sp, #56	; 0x38
 800b1f2:	f10a 0a18 	add.w	sl, sl, #24
 800b1f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b1fa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b1fe:	e720      	b.n	800b042 <__kernel_rem_pio2+0x2a2>
 800b200:	4630      	mov	r0, r6
 800b202:	4639      	mov	r1, r7
 800b204:	f7f5 fcc0 	bl	8000b88 <__aeabi_d2iz>
 800b208:	ab0e      	add	r3, sp, #56	; 0x38
 800b20a:	4625      	mov	r5, r4
 800b20c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b210:	e717      	b.n	800b042 <__kernel_rem_pio2+0x2a2>
 800b212:	ab0e      	add	r3, sp, #56	; 0x38
 800b214:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b218:	f7f5 f99c 	bl	8000554 <__aeabi_i2d>
 800b21c:	4632      	mov	r2, r6
 800b21e:	463b      	mov	r3, r7
 800b220:	f7f5 fa02 	bl	8000628 <__aeabi_dmul>
 800b224:	4b84      	ldr	r3, [pc, #528]	; (800b438 <__kernel_rem_pio2+0x698>)
 800b226:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b22a:	2200      	movs	r2, #0
 800b22c:	4630      	mov	r0, r6
 800b22e:	4639      	mov	r1, r7
 800b230:	f7f5 f9fa 	bl	8000628 <__aeabi_dmul>
 800b234:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b238:	4606      	mov	r6, r0
 800b23a:	460f      	mov	r7, r1
 800b23c:	e70f      	b.n	800b05e <__kernel_rem_pio2+0x2be>
 800b23e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b242:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b246:	f7f5 f9ef 	bl	8000628 <__aeabi_dmul>
 800b24a:	4602      	mov	r2, r0
 800b24c:	460b      	mov	r3, r1
 800b24e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b252:	f7f5 f833 	bl	80002bc <__adddf3>
 800b256:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b25a:	f108 0801 	add.w	r8, r8, #1
 800b25e:	9b02      	ldr	r3, [sp, #8]
 800b260:	4598      	cmp	r8, r3
 800b262:	dc01      	bgt.n	800b268 <__kernel_rem_pio2+0x4c8>
 800b264:	45b8      	cmp	r8, r7
 800b266:	ddea      	ble.n	800b23e <__kernel_rem_pio2+0x49e>
 800b268:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b26c:	ab4a      	add	r3, sp, #296	; 0x128
 800b26e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b272:	ed87 7b00 	vstr	d7, [r7]
 800b276:	3e01      	subs	r6, #1
 800b278:	e6f8      	b.n	800b06c <__kernel_rem_pio2+0x2cc>
 800b27a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b27c:	2b02      	cmp	r3, #2
 800b27e:	dc0b      	bgt.n	800b298 <__kernel_rem_pio2+0x4f8>
 800b280:	2b00      	cmp	r3, #0
 800b282:	dc35      	bgt.n	800b2f0 <__kernel_rem_pio2+0x550>
 800b284:	d059      	beq.n	800b33a <__kernel_rem_pio2+0x59a>
 800b286:	9b04      	ldr	r3, [sp, #16]
 800b288:	f003 0007 	and.w	r0, r3, #7
 800b28c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b290:	ecbd 8b02 	vpop	{d8}
 800b294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b298:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b29a:	2b03      	cmp	r3, #3
 800b29c:	d1f3      	bne.n	800b286 <__kernel_rem_pio2+0x4e6>
 800b29e:	ab4a      	add	r3, sp, #296	; 0x128
 800b2a0:	4423      	add	r3, r4
 800b2a2:	9306      	str	r3, [sp, #24]
 800b2a4:	461c      	mov	r4, r3
 800b2a6:	469a      	mov	sl, r3
 800b2a8:	9502      	str	r5, [sp, #8]
 800b2aa:	9b02      	ldr	r3, [sp, #8]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	f1aa 0a08 	sub.w	sl, sl, #8
 800b2b2:	dc6b      	bgt.n	800b38c <__kernel_rem_pio2+0x5ec>
 800b2b4:	46aa      	mov	sl, r5
 800b2b6:	f1ba 0f01 	cmp.w	sl, #1
 800b2ba:	f1a4 0408 	sub.w	r4, r4, #8
 800b2be:	f300 8085 	bgt.w	800b3cc <__kernel_rem_pio2+0x62c>
 800b2c2:	9c06      	ldr	r4, [sp, #24]
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	3408      	adds	r4, #8
 800b2c8:	2100      	movs	r1, #0
 800b2ca:	2d01      	cmp	r5, #1
 800b2cc:	f300 809d 	bgt.w	800b40a <__kernel_rem_pio2+0x66a>
 800b2d0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b2d4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b2d8:	f1bb 0f00 	cmp.w	fp, #0
 800b2dc:	f040 809b 	bne.w	800b416 <__kernel_rem_pio2+0x676>
 800b2e0:	9b01      	ldr	r3, [sp, #4]
 800b2e2:	e9c3 5600 	strd	r5, r6, [r3]
 800b2e6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b2ea:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b2ee:	e7ca      	b.n	800b286 <__kernel_rem_pio2+0x4e6>
 800b2f0:	3408      	adds	r4, #8
 800b2f2:	ab4a      	add	r3, sp, #296	; 0x128
 800b2f4:	441c      	add	r4, r3
 800b2f6:	462e      	mov	r6, r5
 800b2f8:	2000      	movs	r0, #0
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	2e00      	cmp	r6, #0
 800b2fe:	da36      	bge.n	800b36e <__kernel_rem_pio2+0x5ce>
 800b300:	f1bb 0f00 	cmp.w	fp, #0
 800b304:	d039      	beq.n	800b37a <__kernel_rem_pio2+0x5da>
 800b306:	4602      	mov	r2, r0
 800b308:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b30c:	9c01      	ldr	r4, [sp, #4]
 800b30e:	e9c4 2300 	strd	r2, r3, [r4]
 800b312:	4602      	mov	r2, r0
 800b314:	460b      	mov	r3, r1
 800b316:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b31a:	f7f4 ffcd 	bl	80002b8 <__aeabi_dsub>
 800b31e:	ae4c      	add	r6, sp, #304	; 0x130
 800b320:	2401      	movs	r4, #1
 800b322:	42a5      	cmp	r5, r4
 800b324:	da2c      	bge.n	800b380 <__kernel_rem_pio2+0x5e0>
 800b326:	f1bb 0f00 	cmp.w	fp, #0
 800b32a:	d002      	beq.n	800b332 <__kernel_rem_pio2+0x592>
 800b32c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b330:	4619      	mov	r1, r3
 800b332:	9b01      	ldr	r3, [sp, #4]
 800b334:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b338:	e7a5      	b.n	800b286 <__kernel_rem_pio2+0x4e6>
 800b33a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b33e:	eb0d 0403 	add.w	r4, sp, r3
 800b342:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b346:	2000      	movs	r0, #0
 800b348:	2100      	movs	r1, #0
 800b34a:	2d00      	cmp	r5, #0
 800b34c:	da09      	bge.n	800b362 <__kernel_rem_pio2+0x5c2>
 800b34e:	f1bb 0f00 	cmp.w	fp, #0
 800b352:	d002      	beq.n	800b35a <__kernel_rem_pio2+0x5ba>
 800b354:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b358:	4619      	mov	r1, r3
 800b35a:	9b01      	ldr	r3, [sp, #4]
 800b35c:	e9c3 0100 	strd	r0, r1, [r3]
 800b360:	e791      	b.n	800b286 <__kernel_rem_pio2+0x4e6>
 800b362:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b366:	f7f4 ffa9 	bl	80002bc <__adddf3>
 800b36a:	3d01      	subs	r5, #1
 800b36c:	e7ed      	b.n	800b34a <__kernel_rem_pio2+0x5aa>
 800b36e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b372:	f7f4 ffa3 	bl	80002bc <__adddf3>
 800b376:	3e01      	subs	r6, #1
 800b378:	e7c0      	b.n	800b2fc <__kernel_rem_pio2+0x55c>
 800b37a:	4602      	mov	r2, r0
 800b37c:	460b      	mov	r3, r1
 800b37e:	e7c5      	b.n	800b30c <__kernel_rem_pio2+0x56c>
 800b380:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b384:	f7f4 ff9a 	bl	80002bc <__adddf3>
 800b388:	3401      	adds	r4, #1
 800b38a:	e7ca      	b.n	800b322 <__kernel_rem_pio2+0x582>
 800b38c:	e9da 8900 	ldrd	r8, r9, [sl]
 800b390:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b394:	9b02      	ldr	r3, [sp, #8]
 800b396:	3b01      	subs	r3, #1
 800b398:	9302      	str	r3, [sp, #8]
 800b39a:	4632      	mov	r2, r6
 800b39c:	463b      	mov	r3, r7
 800b39e:	4640      	mov	r0, r8
 800b3a0:	4649      	mov	r1, r9
 800b3a2:	f7f4 ff8b 	bl	80002bc <__adddf3>
 800b3a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	4640      	mov	r0, r8
 800b3b0:	4649      	mov	r1, r9
 800b3b2:	f7f4 ff81 	bl	80002b8 <__aeabi_dsub>
 800b3b6:	4632      	mov	r2, r6
 800b3b8:	463b      	mov	r3, r7
 800b3ba:	f7f4 ff7f 	bl	80002bc <__adddf3>
 800b3be:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b3c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b3c6:	ed8a 7b00 	vstr	d7, [sl]
 800b3ca:	e76e      	b.n	800b2aa <__kernel_rem_pio2+0x50a>
 800b3cc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b3d0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b3d4:	4640      	mov	r0, r8
 800b3d6:	4632      	mov	r2, r6
 800b3d8:	463b      	mov	r3, r7
 800b3da:	4649      	mov	r1, r9
 800b3dc:	f7f4 ff6e 	bl	80002bc <__adddf3>
 800b3e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	4640      	mov	r0, r8
 800b3ea:	4649      	mov	r1, r9
 800b3ec:	f7f4 ff64 	bl	80002b8 <__aeabi_dsub>
 800b3f0:	4632      	mov	r2, r6
 800b3f2:	463b      	mov	r3, r7
 800b3f4:	f7f4 ff62 	bl	80002bc <__adddf3>
 800b3f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b3fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b400:	ed84 7b00 	vstr	d7, [r4]
 800b404:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b408:	e755      	b.n	800b2b6 <__kernel_rem_pio2+0x516>
 800b40a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b40e:	f7f4 ff55 	bl	80002bc <__adddf3>
 800b412:	3d01      	subs	r5, #1
 800b414:	e759      	b.n	800b2ca <__kernel_rem_pio2+0x52a>
 800b416:	9b01      	ldr	r3, [sp, #4]
 800b418:	9a01      	ldr	r2, [sp, #4]
 800b41a:	601d      	str	r5, [r3, #0]
 800b41c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b420:	605c      	str	r4, [r3, #4]
 800b422:	609f      	str	r7, [r3, #8]
 800b424:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b428:	60d3      	str	r3, [r2, #12]
 800b42a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b42e:	6110      	str	r0, [r2, #16]
 800b430:	6153      	str	r3, [r2, #20]
 800b432:	e728      	b.n	800b286 <__kernel_rem_pio2+0x4e6>
 800b434:	41700000 	.word	0x41700000
 800b438:	3e700000 	.word	0x3e700000
 800b43c:	00000000 	.word	0x00000000

0800b440 <__kernel_sin>:
 800b440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b444:	ed2d 8b04 	vpush	{d8-d9}
 800b448:	eeb0 8a41 	vmov.f32	s16, s2
 800b44c:	eef0 8a61 	vmov.f32	s17, s3
 800b450:	ec55 4b10 	vmov	r4, r5, d0
 800b454:	b083      	sub	sp, #12
 800b456:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b45a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b45e:	9001      	str	r0, [sp, #4]
 800b460:	da06      	bge.n	800b470 <__kernel_sin+0x30>
 800b462:	ee10 0a10 	vmov	r0, s0
 800b466:	4629      	mov	r1, r5
 800b468:	f7f5 fb8e 	bl	8000b88 <__aeabi_d2iz>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	d051      	beq.n	800b514 <__kernel_sin+0xd4>
 800b470:	4622      	mov	r2, r4
 800b472:	462b      	mov	r3, r5
 800b474:	4620      	mov	r0, r4
 800b476:	4629      	mov	r1, r5
 800b478:	f7f5 f8d6 	bl	8000628 <__aeabi_dmul>
 800b47c:	4682      	mov	sl, r0
 800b47e:	468b      	mov	fp, r1
 800b480:	4602      	mov	r2, r0
 800b482:	460b      	mov	r3, r1
 800b484:	4620      	mov	r0, r4
 800b486:	4629      	mov	r1, r5
 800b488:	f7f5 f8ce 	bl	8000628 <__aeabi_dmul>
 800b48c:	a341      	add	r3, pc, #260	; (adr r3, 800b594 <__kernel_sin+0x154>)
 800b48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b492:	4680      	mov	r8, r0
 800b494:	4689      	mov	r9, r1
 800b496:	4650      	mov	r0, sl
 800b498:	4659      	mov	r1, fp
 800b49a:	f7f5 f8c5 	bl	8000628 <__aeabi_dmul>
 800b49e:	a33f      	add	r3, pc, #252	; (adr r3, 800b59c <__kernel_sin+0x15c>)
 800b4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a4:	f7f4 ff08 	bl	80002b8 <__aeabi_dsub>
 800b4a8:	4652      	mov	r2, sl
 800b4aa:	465b      	mov	r3, fp
 800b4ac:	f7f5 f8bc 	bl	8000628 <__aeabi_dmul>
 800b4b0:	a33c      	add	r3, pc, #240	; (adr r3, 800b5a4 <__kernel_sin+0x164>)
 800b4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b6:	f7f4 ff01 	bl	80002bc <__adddf3>
 800b4ba:	4652      	mov	r2, sl
 800b4bc:	465b      	mov	r3, fp
 800b4be:	f7f5 f8b3 	bl	8000628 <__aeabi_dmul>
 800b4c2:	a33a      	add	r3, pc, #232	; (adr r3, 800b5ac <__kernel_sin+0x16c>)
 800b4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c8:	f7f4 fef6 	bl	80002b8 <__aeabi_dsub>
 800b4cc:	4652      	mov	r2, sl
 800b4ce:	465b      	mov	r3, fp
 800b4d0:	f7f5 f8aa 	bl	8000628 <__aeabi_dmul>
 800b4d4:	a337      	add	r3, pc, #220	; (adr r3, 800b5b4 <__kernel_sin+0x174>)
 800b4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4da:	f7f4 feef 	bl	80002bc <__adddf3>
 800b4de:	9b01      	ldr	r3, [sp, #4]
 800b4e0:	4606      	mov	r6, r0
 800b4e2:	460f      	mov	r7, r1
 800b4e4:	b9eb      	cbnz	r3, 800b522 <__kernel_sin+0xe2>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	4650      	mov	r0, sl
 800b4ec:	4659      	mov	r1, fp
 800b4ee:	f7f5 f89b 	bl	8000628 <__aeabi_dmul>
 800b4f2:	a325      	add	r3, pc, #148	; (adr r3, 800b588 <__kernel_sin+0x148>)
 800b4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f8:	f7f4 fede 	bl	80002b8 <__aeabi_dsub>
 800b4fc:	4642      	mov	r2, r8
 800b4fe:	464b      	mov	r3, r9
 800b500:	f7f5 f892 	bl	8000628 <__aeabi_dmul>
 800b504:	4602      	mov	r2, r0
 800b506:	460b      	mov	r3, r1
 800b508:	4620      	mov	r0, r4
 800b50a:	4629      	mov	r1, r5
 800b50c:	f7f4 fed6 	bl	80002bc <__adddf3>
 800b510:	4604      	mov	r4, r0
 800b512:	460d      	mov	r5, r1
 800b514:	ec45 4b10 	vmov	d0, r4, r5
 800b518:	b003      	add	sp, #12
 800b51a:	ecbd 8b04 	vpop	{d8-d9}
 800b51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b522:	4b1b      	ldr	r3, [pc, #108]	; (800b590 <__kernel_sin+0x150>)
 800b524:	ec51 0b18 	vmov	r0, r1, d8
 800b528:	2200      	movs	r2, #0
 800b52a:	f7f5 f87d 	bl	8000628 <__aeabi_dmul>
 800b52e:	4632      	mov	r2, r6
 800b530:	ec41 0b19 	vmov	d9, r0, r1
 800b534:	463b      	mov	r3, r7
 800b536:	4640      	mov	r0, r8
 800b538:	4649      	mov	r1, r9
 800b53a:	f7f5 f875 	bl	8000628 <__aeabi_dmul>
 800b53e:	4602      	mov	r2, r0
 800b540:	460b      	mov	r3, r1
 800b542:	ec51 0b19 	vmov	r0, r1, d9
 800b546:	f7f4 feb7 	bl	80002b8 <__aeabi_dsub>
 800b54a:	4652      	mov	r2, sl
 800b54c:	465b      	mov	r3, fp
 800b54e:	f7f5 f86b 	bl	8000628 <__aeabi_dmul>
 800b552:	ec53 2b18 	vmov	r2, r3, d8
 800b556:	f7f4 feaf 	bl	80002b8 <__aeabi_dsub>
 800b55a:	a30b      	add	r3, pc, #44	; (adr r3, 800b588 <__kernel_sin+0x148>)
 800b55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b560:	4606      	mov	r6, r0
 800b562:	460f      	mov	r7, r1
 800b564:	4640      	mov	r0, r8
 800b566:	4649      	mov	r1, r9
 800b568:	f7f5 f85e 	bl	8000628 <__aeabi_dmul>
 800b56c:	4602      	mov	r2, r0
 800b56e:	460b      	mov	r3, r1
 800b570:	4630      	mov	r0, r6
 800b572:	4639      	mov	r1, r7
 800b574:	f7f4 fea2 	bl	80002bc <__adddf3>
 800b578:	4602      	mov	r2, r0
 800b57a:	460b      	mov	r3, r1
 800b57c:	4620      	mov	r0, r4
 800b57e:	4629      	mov	r1, r5
 800b580:	f7f4 fe9a 	bl	80002b8 <__aeabi_dsub>
 800b584:	e7c4      	b.n	800b510 <__kernel_sin+0xd0>
 800b586:	bf00      	nop
 800b588:	55555549 	.word	0x55555549
 800b58c:	3fc55555 	.word	0x3fc55555
 800b590:	3fe00000 	.word	0x3fe00000
 800b594:	5acfd57c 	.word	0x5acfd57c
 800b598:	3de5d93a 	.word	0x3de5d93a
 800b59c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b5a0:	3e5ae5e6 	.word	0x3e5ae5e6
 800b5a4:	57b1fe7d 	.word	0x57b1fe7d
 800b5a8:	3ec71de3 	.word	0x3ec71de3
 800b5ac:	19c161d5 	.word	0x19c161d5
 800b5b0:	3f2a01a0 	.word	0x3f2a01a0
 800b5b4:	1110f8a6 	.word	0x1110f8a6
 800b5b8:	3f811111 	.word	0x3f811111
 800b5bc:	00000000 	.word	0x00000000

0800b5c0 <atan>:
 800b5c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c4:	ec55 4b10 	vmov	r4, r5, d0
 800b5c8:	4bc3      	ldr	r3, [pc, #780]	; (800b8d8 <atan+0x318>)
 800b5ca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b5ce:	429e      	cmp	r6, r3
 800b5d0:	46ab      	mov	fp, r5
 800b5d2:	dd18      	ble.n	800b606 <atan+0x46>
 800b5d4:	4bc1      	ldr	r3, [pc, #772]	; (800b8dc <atan+0x31c>)
 800b5d6:	429e      	cmp	r6, r3
 800b5d8:	dc01      	bgt.n	800b5de <atan+0x1e>
 800b5da:	d109      	bne.n	800b5f0 <atan+0x30>
 800b5dc:	b144      	cbz	r4, 800b5f0 <atan+0x30>
 800b5de:	4622      	mov	r2, r4
 800b5e0:	462b      	mov	r3, r5
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	4629      	mov	r1, r5
 800b5e6:	f7f4 fe69 	bl	80002bc <__adddf3>
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	460d      	mov	r5, r1
 800b5ee:	e006      	b.n	800b5fe <atan+0x3e>
 800b5f0:	f1bb 0f00 	cmp.w	fp, #0
 800b5f4:	f300 8131 	bgt.w	800b85a <atan+0x29a>
 800b5f8:	a59b      	add	r5, pc, #620	; (adr r5, 800b868 <atan+0x2a8>)
 800b5fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b5fe:	ec45 4b10 	vmov	d0, r4, r5
 800b602:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b606:	4bb6      	ldr	r3, [pc, #728]	; (800b8e0 <atan+0x320>)
 800b608:	429e      	cmp	r6, r3
 800b60a:	dc14      	bgt.n	800b636 <atan+0x76>
 800b60c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b610:	429e      	cmp	r6, r3
 800b612:	dc0d      	bgt.n	800b630 <atan+0x70>
 800b614:	a396      	add	r3, pc, #600	; (adr r3, 800b870 <atan+0x2b0>)
 800b616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61a:	ee10 0a10 	vmov	r0, s0
 800b61e:	4629      	mov	r1, r5
 800b620:	f7f4 fe4c 	bl	80002bc <__adddf3>
 800b624:	4baf      	ldr	r3, [pc, #700]	; (800b8e4 <atan+0x324>)
 800b626:	2200      	movs	r2, #0
 800b628:	f7f5 fa8e 	bl	8000b48 <__aeabi_dcmpgt>
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d1e6      	bne.n	800b5fe <atan+0x3e>
 800b630:	f04f 3aff 	mov.w	sl, #4294967295
 800b634:	e02b      	b.n	800b68e <atan+0xce>
 800b636:	f000 f963 	bl	800b900 <fabs>
 800b63a:	4bab      	ldr	r3, [pc, #684]	; (800b8e8 <atan+0x328>)
 800b63c:	429e      	cmp	r6, r3
 800b63e:	ec55 4b10 	vmov	r4, r5, d0
 800b642:	f300 80bf 	bgt.w	800b7c4 <atan+0x204>
 800b646:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b64a:	429e      	cmp	r6, r3
 800b64c:	f300 80a0 	bgt.w	800b790 <atan+0x1d0>
 800b650:	ee10 2a10 	vmov	r2, s0
 800b654:	ee10 0a10 	vmov	r0, s0
 800b658:	462b      	mov	r3, r5
 800b65a:	4629      	mov	r1, r5
 800b65c:	f7f4 fe2e 	bl	80002bc <__adddf3>
 800b660:	4ba0      	ldr	r3, [pc, #640]	; (800b8e4 <atan+0x324>)
 800b662:	2200      	movs	r2, #0
 800b664:	f7f4 fe28 	bl	80002b8 <__aeabi_dsub>
 800b668:	2200      	movs	r2, #0
 800b66a:	4606      	mov	r6, r0
 800b66c:	460f      	mov	r7, r1
 800b66e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b672:	4620      	mov	r0, r4
 800b674:	4629      	mov	r1, r5
 800b676:	f7f4 fe21 	bl	80002bc <__adddf3>
 800b67a:	4602      	mov	r2, r0
 800b67c:	460b      	mov	r3, r1
 800b67e:	4630      	mov	r0, r6
 800b680:	4639      	mov	r1, r7
 800b682:	f7f5 f8fb 	bl	800087c <__aeabi_ddiv>
 800b686:	f04f 0a00 	mov.w	sl, #0
 800b68a:	4604      	mov	r4, r0
 800b68c:	460d      	mov	r5, r1
 800b68e:	4622      	mov	r2, r4
 800b690:	462b      	mov	r3, r5
 800b692:	4620      	mov	r0, r4
 800b694:	4629      	mov	r1, r5
 800b696:	f7f4 ffc7 	bl	8000628 <__aeabi_dmul>
 800b69a:	4602      	mov	r2, r0
 800b69c:	460b      	mov	r3, r1
 800b69e:	4680      	mov	r8, r0
 800b6a0:	4689      	mov	r9, r1
 800b6a2:	f7f4 ffc1 	bl	8000628 <__aeabi_dmul>
 800b6a6:	a374      	add	r3, pc, #464	; (adr r3, 800b878 <atan+0x2b8>)
 800b6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ac:	4606      	mov	r6, r0
 800b6ae:	460f      	mov	r7, r1
 800b6b0:	f7f4 ffba 	bl	8000628 <__aeabi_dmul>
 800b6b4:	a372      	add	r3, pc, #456	; (adr r3, 800b880 <atan+0x2c0>)
 800b6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ba:	f7f4 fdff 	bl	80002bc <__adddf3>
 800b6be:	4632      	mov	r2, r6
 800b6c0:	463b      	mov	r3, r7
 800b6c2:	f7f4 ffb1 	bl	8000628 <__aeabi_dmul>
 800b6c6:	a370      	add	r3, pc, #448	; (adr r3, 800b888 <atan+0x2c8>)
 800b6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6cc:	f7f4 fdf6 	bl	80002bc <__adddf3>
 800b6d0:	4632      	mov	r2, r6
 800b6d2:	463b      	mov	r3, r7
 800b6d4:	f7f4 ffa8 	bl	8000628 <__aeabi_dmul>
 800b6d8:	a36d      	add	r3, pc, #436	; (adr r3, 800b890 <atan+0x2d0>)
 800b6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6de:	f7f4 fded 	bl	80002bc <__adddf3>
 800b6e2:	4632      	mov	r2, r6
 800b6e4:	463b      	mov	r3, r7
 800b6e6:	f7f4 ff9f 	bl	8000628 <__aeabi_dmul>
 800b6ea:	a36b      	add	r3, pc, #428	; (adr r3, 800b898 <atan+0x2d8>)
 800b6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f0:	f7f4 fde4 	bl	80002bc <__adddf3>
 800b6f4:	4632      	mov	r2, r6
 800b6f6:	463b      	mov	r3, r7
 800b6f8:	f7f4 ff96 	bl	8000628 <__aeabi_dmul>
 800b6fc:	a368      	add	r3, pc, #416	; (adr r3, 800b8a0 <atan+0x2e0>)
 800b6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b702:	f7f4 fddb 	bl	80002bc <__adddf3>
 800b706:	4642      	mov	r2, r8
 800b708:	464b      	mov	r3, r9
 800b70a:	f7f4 ff8d 	bl	8000628 <__aeabi_dmul>
 800b70e:	a366      	add	r3, pc, #408	; (adr r3, 800b8a8 <atan+0x2e8>)
 800b710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b714:	4680      	mov	r8, r0
 800b716:	4689      	mov	r9, r1
 800b718:	4630      	mov	r0, r6
 800b71a:	4639      	mov	r1, r7
 800b71c:	f7f4 ff84 	bl	8000628 <__aeabi_dmul>
 800b720:	a363      	add	r3, pc, #396	; (adr r3, 800b8b0 <atan+0x2f0>)
 800b722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b726:	f7f4 fdc7 	bl	80002b8 <__aeabi_dsub>
 800b72a:	4632      	mov	r2, r6
 800b72c:	463b      	mov	r3, r7
 800b72e:	f7f4 ff7b 	bl	8000628 <__aeabi_dmul>
 800b732:	a361      	add	r3, pc, #388	; (adr r3, 800b8b8 <atan+0x2f8>)
 800b734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b738:	f7f4 fdbe 	bl	80002b8 <__aeabi_dsub>
 800b73c:	4632      	mov	r2, r6
 800b73e:	463b      	mov	r3, r7
 800b740:	f7f4 ff72 	bl	8000628 <__aeabi_dmul>
 800b744:	a35e      	add	r3, pc, #376	; (adr r3, 800b8c0 <atan+0x300>)
 800b746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74a:	f7f4 fdb5 	bl	80002b8 <__aeabi_dsub>
 800b74e:	4632      	mov	r2, r6
 800b750:	463b      	mov	r3, r7
 800b752:	f7f4 ff69 	bl	8000628 <__aeabi_dmul>
 800b756:	a35c      	add	r3, pc, #368	; (adr r3, 800b8c8 <atan+0x308>)
 800b758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75c:	f7f4 fdac 	bl	80002b8 <__aeabi_dsub>
 800b760:	4632      	mov	r2, r6
 800b762:	463b      	mov	r3, r7
 800b764:	f7f4 ff60 	bl	8000628 <__aeabi_dmul>
 800b768:	4602      	mov	r2, r0
 800b76a:	460b      	mov	r3, r1
 800b76c:	4640      	mov	r0, r8
 800b76e:	4649      	mov	r1, r9
 800b770:	f7f4 fda4 	bl	80002bc <__adddf3>
 800b774:	4622      	mov	r2, r4
 800b776:	462b      	mov	r3, r5
 800b778:	f7f4 ff56 	bl	8000628 <__aeabi_dmul>
 800b77c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b780:	4602      	mov	r2, r0
 800b782:	460b      	mov	r3, r1
 800b784:	d14b      	bne.n	800b81e <atan+0x25e>
 800b786:	4620      	mov	r0, r4
 800b788:	4629      	mov	r1, r5
 800b78a:	f7f4 fd95 	bl	80002b8 <__aeabi_dsub>
 800b78e:	e72c      	b.n	800b5ea <atan+0x2a>
 800b790:	ee10 0a10 	vmov	r0, s0
 800b794:	4b53      	ldr	r3, [pc, #332]	; (800b8e4 <atan+0x324>)
 800b796:	2200      	movs	r2, #0
 800b798:	4629      	mov	r1, r5
 800b79a:	f7f4 fd8d 	bl	80002b8 <__aeabi_dsub>
 800b79e:	4b51      	ldr	r3, [pc, #324]	; (800b8e4 <atan+0x324>)
 800b7a0:	4606      	mov	r6, r0
 800b7a2:	460f      	mov	r7, r1
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	f7f4 fd87 	bl	80002bc <__adddf3>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	4639      	mov	r1, r7
 800b7b6:	f7f5 f861 	bl	800087c <__aeabi_ddiv>
 800b7ba:	f04f 0a01 	mov.w	sl, #1
 800b7be:	4604      	mov	r4, r0
 800b7c0:	460d      	mov	r5, r1
 800b7c2:	e764      	b.n	800b68e <atan+0xce>
 800b7c4:	4b49      	ldr	r3, [pc, #292]	; (800b8ec <atan+0x32c>)
 800b7c6:	429e      	cmp	r6, r3
 800b7c8:	da1d      	bge.n	800b806 <atan+0x246>
 800b7ca:	ee10 0a10 	vmov	r0, s0
 800b7ce:	4b48      	ldr	r3, [pc, #288]	; (800b8f0 <atan+0x330>)
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	4629      	mov	r1, r5
 800b7d4:	f7f4 fd70 	bl	80002b8 <__aeabi_dsub>
 800b7d8:	4b45      	ldr	r3, [pc, #276]	; (800b8f0 <atan+0x330>)
 800b7da:	4606      	mov	r6, r0
 800b7dc:	460f      	mov	r7, r1
 800b7de:	2200      	movs	r2, #0
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	4629      	mov	r1, r5
 800b7e4:	f7f4 ff20 	bl	8000628 <__aeabi_dmul>
 800b7e8:	4b3e      	ldr	r3, [pc, #248]	; (800b8e4 <atan+0x324>)
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f7f4 fd66 	bl	80002bc <__adddf3>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	4639      	mov	r1, r7
 800b7f8:	f7f5 f840 	bl	800087c <__aeabi_ddiv>
 800b7fc:	f04f 0a02 	mov.w	sl, #2
 800b800:	4604      	mov	r4, r0
 800b802:	460d      	mov	r5, r1
 800b804:	e743      	b.n	800b68e <atan+0xce>
 800b806:	462b      	mov	r3, r5
 800b808:	ee10 2a10 	vmov	r2, s0
 800b80c:	4939      	ldr	r1, [pc, #228]	; (800b8f4 <atan+0x334>)
 800b80e:	2000      	movs	r0, #0
 800b810:	f7f5 f834 	bl	800087c <__aeabi_ddiv>
 800b814:	f04f 0a03 	mov.w	sl, #3
 800b818:	4604      	mov	r4, r0
 800b81a:	460d      	mov	r5, r1
 800b81c:	e737      	b.n	800b68e <atan+0xce>
 800b81e:	4b36      	ldr	r3, [pc, #216]	; (800b8f8 <atan+0x338>)
 800b820:	4e36      	ldr	r6, [pc, #216]	; (800b8fc <atan+0x33c>)
 800b822:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b826:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b82a:	e9da 2300 	ldrd	r2, r3, [sl]
 800b82e:	f7f4 fd43 	bl	80002b8 <__aeabi_dsub>
 800b832:	4622      	mov	r2, r4
 800b834:	462b      	mov	r3, r5
 800b836:	f7f4 fd3f 	bl	80002b8 <__aeabi_dsub>
 800b83a:	4602      	mov	r2, r0
 800b83c:	460b      	mov	r3, r1
 800b83e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b842:	f7f4 fd39 	bl	80002b8 <__aeabi_dsub>
 800b846:	f1bb 0f00 	cmp.w	fp, #0
 800b84a:	4604      	mov	r4, r0
 800b84c:	460d      	mov	r5, r1
 800b84e:	f6bf aed6 	bge.w	800b5fe <atan+0x3e>
 800b852:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b856:	461d      	mov	r5, r3
 800b858:	e6d1      	b.n	800b5fe <atan+0x3e>
 800b85a:	a51d      	add	r5, pc, #116	; (adr r5, 800b8d0 <atan+0x310>)
 800b85c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b860:	e6cd      	b.n	800b5fe <atan+0x3e>
 800b862:	bf00      	nop
 800b864:	f3af 8000 	nop.w
 800b868:	54442d18 	.word	0x54442d18
 800b86c:	bff921fb 	.word	0xbff921fb
 800b870:	8800759c 	.word	0x8800759c
 800b874:	7e37e43c 	.word	0x7e37e43c
 800b878:	e322da11 	.word	0xe322da11
 800b87c:	3f90ad3a 	.word	0x3f90ad3a
 800b880:	24760deb 	.word	0x24760deb
 800b884:	3fa97b4b 	.word	0x3fa97b4b
 800b888:	a0d03d51 	.word	0xa0d03d51
 800b88c:	3fb10d66 	.word	0x3fb10d66
 800b890:	c54c206e 	.word	0xc54c206e
 800b894:	3fb745cd 	.word	0x3fb745cd
 800b898:	920083ff 	.word	0x920083ff
 800b89c:	3fc24924 	.word	0x3fc24924
 800b8a0:	5555550d 	.word	0x5555550d
 800b8a4:	3fd55555 	.word	0x3fd55555
 800b8a8:	2c6a6c2f 	.word	0x2c6a6c2f
 800b8ac:	bfa2b444 	.word	0xbfa2b444
 800b8b0:	52defd9a 	.word	0x52defd9a
 800b8b4:	3fadde2d 	.word	0x3fadde2d
 800b8b8:	af749a6d 	.word	0xaf749a6d
 800b8bc:	3fb3b0f2 	.word	0x3fb3b0f2
 800b8c0:	fe231671 	.word	0xfe231671
 800b8c4:	3fbc71c6 	.word	0x3fbc71c6
 800b8c8:	9998ebc4 	.word	0x9998ebc4
 800b8cc:	3fc99999 	.word	0x3fc99999
 800b8d0:	54442d18 	.word	0x54442d18
 800b8d4:	3ff921fb 	.word	0x3ff921fb
 800b8d8:	440fffff 	.word	0x440fffff
 800b8dc:	7ff00000 	.word	0x7ff00000
 800b8e0:	3fdbffff 	.word	0x3fdbffff
 800b8e4:	3ff00000 	.word	0x3ff00000
 800b8e8:	3ff2ffff 	.word	0x3ff2ffff
 800b8ec:	40038000 	.word	0x40038000
 800b8f0:	3ff80000 	.word	0x3ff80000
 800b8f4:	bff00000 	.word	0xbff00000
 800b8f8:	0800c5b0 	.word	0x0800c5b0
 800b8fc:	0800c590 	.word	0x0800c590

0800b900 <fabs>:
 800b900:	ec51 0b10 	vmov	r0, r1, d0
 800b904:	ee10 2a10 	vmov	r2, s0
 800b908:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b90c:	ec43 2b10 	vmov	d0, r2, r3
 800b910:	4770      	bx	lr
 800b912:	0000      	movs	r0, r0
 800b914:	0000      	movs	r0, r0
	...

0800b918 <floor>:
 800b918:	ec51 0b10 	vmov	r0, r1, d0
 800b91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b920:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b924:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b928:	2e13      	cmp	r6, #19
 800b92a:	ee10 5a10 	vmov	r5, s0
 800b92e:	ee10 8a10 	vmov	r8, s0
 800b932:	460c      	mov	r4, r1
 800b934:	dc32      	bgt.n	800b99c <floor+0x84>
 800b936:	2e00      	cmp	r6, #0
 800b938:	da14      	bge.n	800b964 <floor+0x4c>
 800b93a:	a333      	add	r3, pc, #204	; (adr r3, 800ba08 <floor+0xf0>)
 800b93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b940:	f7f4 fcbc 	bl	80002bc <__adddf3>
 800b944:	2200      	movs	r2, #0
 800b946:	2300      	movs	r3, #0
 800b948:	f7f5 f8fe 	bl	8000b48 <__aeabi_dcmpgt>
 800b94c:	b138      	cbz	r0, 800b95e <floor+0x46>
 800b94e:	2c00      	cmp	r4, #0
 800b950:	da57      	bge.n	800ba02 <floor+0xea>
 800b952:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b956:	431d      	orrs	r5, r3
 800b958:	d001      	beq.n	800b95e <floor+0x46>
 800b95a:	4c2d      	ldr	r4, [pc, #180]	; (800ba10 <floor+0xf8>)
 800b95c:	2500      	movs	r5, #0
 800b95e:	4621      	mov	r1, r4
 800b960:	4628      	mov	r0, r5
 800b962:	e025      	b.n	800b9b0 <floor+0x98>
 800b964:	4f2b      	ldr	r7, [pc, #172]	; (800ba14 <floor+0xfc>)
 800b966:	4137      	asrs	r7, r6
 800b968:	ea01 0307 	and.w	r3, r1, r7
 800b96c:	4303      	orrs	r3, r0
 800b96e:	d01f      	beq.n	800b9b0 <floor+0x98>
 800b970:	a325      	add	r3, pc, #148	; (adr r3, 800ba08 <floor+0xf0>)
 800b972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b976:	f7f4 fca1 	bl	80002bc <__adddf3>
 800b97a:	2200      	movs	r2, #0
 800b97c:	2300      	movs	r3, #0
 800b97e:	f7f5 f8e3 	bl	8000b48 <__aeabi_dcmpgt>
 800b982:	2800      	cmp	r0, #0
 800b984:	d0eb      	beq.n	800b95e <floor+0x46>
 800b986:	2c00      	cmp	r4, #0
 800b988:	bfbe      	ittt	lt
 800b98a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b98e:	fa43 f606 	asrlt.w	r6, r3, r6
 800b992:	19a4      	addlt	r4, r4, r6
 800b994:	ea24 0407 	bic.w	r4, r4, r7
 800b998:	2500      	movs	r5, #0
 800b99a:	e7e0      	b.n	800b95e <floor+0x46>
 800b99c:	2e33      	cmp	r6, #51	; 0x33
 800b99e:	dd0b      	ble.n	800b9b8 <floor+0xa0>
 800b9a0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b9a4:	d104      	bne.n	800b9b0 <floor+0x98>
 800b9a6:	ee10 2a10 	vmov	r2, s0
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	f7f4 fc86 	bl	80002bc <__adddf3>
 800b9b0:	ec41 0b10 	vmov	d0, r0, r1
 800b9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9b8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b9bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c0:	fa23 f707 	lsr.w	r7, r3, r7
 800b9c4:	4207      	tst	r7, r0
 800b9c6:	d0f3      	beq.n	800b9b0 <floor+0x98>
 800b9c8:	a30f      	add	r3, pc, #60	; (adr r3, 800ba08 <floor+0xf0>)
 800b9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ce:	f7f4 fc75 	bl	80002bc <__adddf3>
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	f7f5 f8b7 	bl	8000b48 <__aeabi_dcmpgt>
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	d0bf      	beq.n	800b95e <floor+0x46>
 800b9de:	2c00      	cmp	r4, #0
 800b9e0:	da02      	bge.n	800b9e8 <floor+0xd0>
 800b9e2:	2e14      	cmp	r6, #20
 800b9e4:	d103      	bne.n	800b9ee <floor+0xd6>
 800b9e6:	3401      	adds	r4, #1
 800b9e8:	ea25 0507 	bic.w	r5, r5, r7
 800b9ec:	e7b7      	b.n	800b95e <floor+0x46>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b9f4:	fa03 f606 	lsl.w	r6, r3, r6
 800b9f8:	4435      	add	r5, r6
 800b9fa:	4545      	cmp	r5, r8
 800b9fc:	bf38      	it	cc
 800b9fe:	18e4      	addcc	r4, r4, r3
 800ba00:	e7f2      	b.n	800b9e8 <floor+0xd0>
 800ba02:	2500      	movs	r5, #0
 800ba04:	462c      	mov	r4, r5
 800ba06:	e7aa      	b.n	800b95e <floor+0x46>
 800ba08:	8800759c 	.word	0x8800759c
 800ba0c:	7e37e43c 	.word	0x7e37e43c
 800ba10:	bff00000 	.word	0xbff00000
 800ba14:	000fffff 	.word	0x000fffff

0800ba18 <scalbn>:
 800ba18:	b570      	push	{r4, r5, r6, lr}
 800ba1a:	ec55 4b10 	vmov	r4, r5, d0
 800ba1e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ba22:	4606      	mov	r6, r0
 800ba24:	462b      	mov	r3, r5
 800ba26:	b99a      	cbnz	r2, 800ba50 <scalbn+0x38>
 800ba28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ba2c:	4323      	orrs	r3, r4
 800ba2e:	d036      	beq.n	800ba9e <scalbn+0x86>
 800ba30:	4b39      	ldr	r3, [pc, #228]	; (800bb18 <scalbn+0x100>)
 800ba32:	4629      	mov	r1, r5
 800ba34:	ee10 0a10 	vmov	r0, s0
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f7f4 fdf5 	bl	8000628 <__aeabi_dmul>
 800ba3e:	4b37      	ldr	r3, [pc, #220]	; (800bb1c <scalbn+0x104>)
 800ba40:	429e      	cmp	r6, r3
 800ba42:	4604      	mov	r4, r0
 800ba44:	460d      	mov	r5, r1
 800ba46:	da10      	bge.n	800ba6a <scalbn+0x52>
 800ba48:	a32b      	add	r3, pc, #172	; (adr r3, 800baf8 <scalbn+0xe0>)
 800ba4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4e:	e03a      	b.n	800bac6 <scalbn+0xae>
 800ba50:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ba54:	428a      	cmp	r2, r1
 800ba56:	d10c      	bne.n	800ba72 <scalbn+0x5a>
 800ba58:	ee10 2a10 	vmov	r2, s0
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	4629      	mov	r1, r5
 800ba60:	f7f4 fc2c 	bl	80002bc <__adddf3>
 800ba64:	4604      	mov	r4, r0
 800ba66:	460d      	mov	r5, r1
 800ba68:	e019      	b.n	800ba9e <scalbn+0x86>
 800ba6a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ba6e:	460b      	mov	r3, r1
 800ba70:	3a36      	subs	r2, #54	; 0x36
 800ba72:	4432      	add	r2, r6
 800ba74:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ba78:	428a      	cmp	r2, r1
 800ba7a:	dd08      	ble.n	800ba8e <scalbn+0x76>
 800ba7c:	2d00      	cmp	r5, #0
 800ba7e:	a120      	add	r1, pc, #128	; (adr r1, 800bb00 <scalbn+0xe8>)
 800ba80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba84:	da1c      	bge.n	800bac0 <scalbn+0xa8>
 800ba86:	a120      	add	r1, pc, #128	; (adr r1, 800bb08 <scalbn+0xf0>)
 800ba88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba8c:	e018      	b.n	800bac0 <scalbn+0xa8>
 800ba8e:	2a00      	cmp	r2, #0
 800ba90:	dd08      	ble.n	800baa4 <scalbn+0x8c>
 800ba92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ba96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ba9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ba9e:	ec45 4b10 	vmov	d0, r4, r5
 800baa2:	bd70      	pop	{r4, r5, r6, pc}
 800baa4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800baa8:	da19      	bge.n	800bade <scalbn+0xc6>
 800baaa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800baae:	429e      	cmp	r6, r3
 800bab0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bab4:	dd0a      	ble.n	800bacc <scalbn+0xb4>
 800bab6:	a112      	add	r1, pc, #72	; (adr r1, 800bb00 <scalbn+0xe8>)
 800bab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1e2      	bne.n	800ba86 <scalbn+0x6e>
 800bac0:	a30f      	add	r3, pc, #60	; (adr r3, 800bb00 <scalbn+0xe8>)
 800bac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac6:	f7f4 fdaf 	bl	8000628 <__aeabi_dmul>
 800baca:	e7cb      	b.n	800ba64 <scalbn+0x4c>
 800bacc:	a10a      	add	r1, pc, #40	; (adr r1, 800baf8 <scalbn+0xe0>)
 800bace:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d0b8      	beq.n	800ba48 <scalbn+0x30>
 800bad6:	a10e      	add	r1, pc, #56	; (adr r1, 800bb10 <scalbn+0xf8>)
 800bad8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800badc:	e7b4      	b.n	800ba48 <scalbn+0x30>
 800bade:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bae2:	3236      	adds	r2, #54	; 0x36
 800bae4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bae8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800baec:	4620      	mov	r0, r4
 800baee:	4b0c      	ldr	r3, [pc, #48]	; (800bb20 <scalbn+0x108>)
 800baf0:	2200      	movs	r2, #0
 800baf2:	e7e8      	b.n	800bac6 <scalbn+0xae>
 800baf4:	f3af 8000 	nop.w
 800baf8:	c2f8f359 	.word	0xc2f8f359
 800bafc:	01a56e1f 	.word	0x01a56e1f
 800bb00:	8800759c 	.word	0x8800759c
 800bb04:	7e37e43c 	.word	0x7e37e43c
 800bb08:	8800759c 	.word	0x8800759c
 800bb0c:	fe37e43c 	.word	0xfe37e43c
 800bb10:	c2f8f359 	.word	0xc2f8f359
 800bb14:	81a56e1f 	.word	0x81a56e1f
 800bb18:	43500000 	.word	0x43500000
 800bb1c:	ffff3cb0 	.word	0xffff3cb0
 800bb20:	3c900000 	.word	0x3c900000

0800bb24 <_init>:
 800bb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb26:	bf00      	nop
 800bb28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb2a:	bc08      	pop	{r3}
 800bb2c:	469e      	mov	lr, r3
 800bb2e:	4770      	bx	lr

0800bb30 <_fini>:
 800bb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb32:	bf00      	nop
 800bb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb36:	bc08      	pop	{r3}
 800bb38:	469e      	mov	lr, r3
 800bb3a:	4770      	bx	lr
