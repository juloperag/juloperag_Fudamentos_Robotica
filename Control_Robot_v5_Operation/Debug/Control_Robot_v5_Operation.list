
Control_Robot_v5_Operation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e424  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f0  0800e5c8  0800e5c8  0001e5c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efb8  0800efb8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800efb8  0800efb8  0001efb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800efc0  0800efc0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800efc0  0800efc0  0001efc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800efc4  0800efc4  0001efc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800efc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fb0  200001e0  0800f1a8  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001190  0800f1a8  00021190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000742e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ee  00000000  00000000  0002763e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000650  00000000  00000000  00028e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000568  00000000  00000000  00029480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000116e1  00000000  00000000  000299e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008eb9  00000000  00000000  0003b0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000595c8  00000000  00000000  00043f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009d54a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035e4  00000000  00000000  0009d59c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e5ac 	.word	0x0800e5ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800e5ac 	.word	0x0800e5ac

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_frsub>:
 8000cb8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	e002      	b.n	8000cc4 <__addsf3>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_fsub>:
 8000cc0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cc4 <__addsf3>:
 8000cc4:	0042      	lsls	r2, r0, #1
 8000cc6:	bf1f      	itttt	ne
 8000cc8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ccc:	ea92 0f03 	teqne	r2, r3
 8000cd0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cd4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd8:	d06a      	beq.n	8000db0 <__addsf3+0xec>
 8000cda:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cde:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ce2:	bfc1      	itttt	gt
 8000ce4:	18d2      	addgt	r2, r2, r3
 8000ce6:	4041      	eorgt	r1, r0
 8000ce8:	4048      	eorgt	r0, r1
 8000cea:	4041      	eorgt	r1, r0
 8000cec:	bfb8      	it	lt
 8000cee:	425b      	neglt	r3, r3
 8000cf0:	2b19      	cmp	r3, #25
 8000cf2:	bf88      	it	hi
 8000cf4:	4770      	bxhi	lr
 8000cf6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cfa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4240      	negne	r0, r0
 8000d06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4249      	negne	r1, r1
 8000d16:	ea92 0f03 	teq	r2, r3
 8000d1a:	d03f      	beq.n	8000d9c <__addsf3+0xd8>
 8000d1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d20:	fa41 fc03 	asr.w	ip, r1, r3
 8000d24:	eb10 000c 	adds.w	r0, r0, ip
 8000d28:	f1c3 0320 	rsb	r3, r3, #32
 8000d2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__addsf3+0x78>
 8000d36:	4249      	negs	r1, r1
 8000d38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d40:	d313      	bcc.n	8000d6a <__addsf3+0xa6>
 8000d42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d46:	d306      	bcc.n	8000d56 <__addsf3+0x92>
 8000d48:	0840      	lsrs	r0, r0, #1
 8000d4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d4e:	f102 0201 	add.w	r2, r2, #1
 8000d52:	2afe      	cmp	r2, #254	; 0xfe
 8000d54:	d251      	bcs.n	8000dfa <__addsf3+0x136>
 8000d56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d5e:	bf08      	it	eq
 8000d60:	f020 0001 	biceq.w	r0, r0, #1
 8000d64:	ea40 0003 	orr.w	r0, r0, r3
 8000d68:	4770      	bx	lr
 8000d6a:	0049      	lsls	r1, r1, #1
 8000d6c:	eb40 0000 	adc.w	r0, r0, r0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	bf28      	it	cs
 8000d74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d78:	d2ed      	bcs.n	8000d56 <__addsf3+0x92>
 8000d7a:	fab0 fc80 	clz	ip, r0
 8000d7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d82:	ebb2 020c 	subs.w	r2, r2, ip
 8000d86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d8a:	bfaa      	itet	ge
 8000d8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d90:	4252      	neglt	r2, r2
 8000d92:	4318      	orrge	r0, r3
 8000d94:	bfbc      	itt	lt
 8000d96:	40d0      	lsrlt	r0, r2
 8000d98:	4318      	orrlt	r0, r3
 8000d9a:	4770      	bx	lr
 8000d9c:	f092 0f00 	teq	r2, #0
 8000da0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000da4:	bf06      	itte	eq
 8000da6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000daa:	3201      	addeq	r2, #1
 8000dac:	3b01      	subne	r3, #1
 8000dae:	e7b5      	b.n	8000d1c <__addsf3+0x58>
 8000db0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000db4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000db8:	bf18      	it	ne
 8000dba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dbe:	d021      	beq.n	8000e04 <__addsf3+0x140>
 8000dc0:	ea92 0f03 	teq	r2, r3
 8000dc4:	d004      	beq.n	8000dd0 <__addsf3+0x10c>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	bf08      	it	eq
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	4770      	bx	lr
 8000dd0:	ea90 0f01 	teq	r0, r1
 8000dd4:	bf1c      	itt	ne
 8000dd6:	2000      	movne	r0, #0
 8000dd8:	4770      	bxne	lr
 8000dda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dde:	d104      	bne.n	8000dea <__addsf3+0x126>
 8000de0:	0040      	lsls	r0, r0, #1
 8000de2:	bf28      	it	cs
 8000de4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000de8:	4770      	bx	lr
 8000dea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dee:	bf3c      	itt	cc
 8000df0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000df4:	4770      	bxcc	lr
 8000df6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	4770      	bx	lr
 8000e04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e08:	bf16      	itet	ne
 8000e0a:	4608      	movne	r0, r1
 8000e0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e10:	4601      	movne	r1, r0
 8000e12:	0242      	lsls	r2, r0, #9
 8000e14:	bf06      	itte	eq
 8000e16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e1a:	ea90 0f01 	teqeq	r0, r1
 8000e1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e22:	4770      	bx	lr

08000e24 <__aeabi_ui2f>:
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	e004      	b.n	8000e34 <__aeabi_i2f+0x8>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_i2f>:
 8000e2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e30:	bf48      	it	mi
 8000e32:	4240      	negmi	r0, r0
 8000e34:	ea5f 0c00 	movs.w	ip, r0
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e40:	4601      	mov	r1, r0
 8000e42:	f04f 0000 	mov.w	r0, #0
 8000e46:	e01c      	b.n	8000e82 <__aeabi_l2f+0x2a>

08000e48 <__aeabi_ul2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	e00a      	b.n	8000e6c <__aeabi_l2f+0x14>
 8000e56:	bf00      	nop

08000e58 <__aeabi_l2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e64:	d502      	bpl.n	8000e6c <__aeabi_l2f+0x14>
 8000e66:	4240      	negs	r0, r0
 8000e68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e6c:	ea5f 0c01 	movs.w	ip, r1
 8000e70:	bf02      	ittt	eq
 8000e72:	4684      	moveq	ip, r0
 8000e74:	4601      	moveq	r1, r0
 8000e76:	2000      	moveq	r0, #0
 8000e78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e7c:	bf08      	it	eq
 8000e7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e86:	fabc f28c 	clz	r2, ip
 8000e8a:	3a08      	subs	r2, #8
 8000e8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e90:	db10      	blt.n	8000eb4 <__aeabi_l2f+0x5c>
 8000e92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e96:	4463      	add	r3, ip
 8000e98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ea4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	f020 0001 	biceq.w	r0, r0, #1
 8000eb2:	4770      	bx	lr
 8000eb4:	f102 0220 	add.w	r2, r2, #32
 8000eb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ebc:	f1c2 0220 	rsb	r2, r2, #32
 8000ec0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ec4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ec8:	eb43 0002 	adc.w	r0, r3, r2
 8000ecc:	bf08      	it	eq
 8000ece:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_ldivmod>:
 8000ed4:	b97b      	cbnz	r3, 8000ef6 <__aeabi_ldivmod+0x22>
 8000ed6:	b972      	cbnz	r2, 8000ef6 <__aeabi_ldivmod+0x22>
 8000ed8:	2900      	cmp	r1, #0
 8000eda:	bfbe      	ittt	lt
 8000edc:	2000      	movlt	r0, #0
 8000ede:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ee2:	e006      	blt.n	8000ef2 <__aeabi_ldivmod+0x1e>
 8000ee4:	bf08      	it	eq
 8000ee6:	2800      	cmpeq	r0, #0
 8000ee8:	bf1c      	itt	ne
 8000eea:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000eee:	f04f 30ff 	movne.w	r0, #4294967295
 8000ef2:	f000 b9dd 	b.w	80012b0 <__aeabi_idiv0>
 8000ef6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000efa:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000efe:	2900      	cmp	r1, #0
 8000f00:	db09      	blt.n	8000f16 <__aeabi_ldivmod+0x42>
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db1a      	blt.n	8000f3c <__aeabi_ldivmod+0x68>
 8000f06:	f000 f86b 	bl	8000fe0 <__udivmoddi4>
 8000f0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f12:	b004      	add	sp, #16
 8000f14:	4770      	bx	lr
 8000f16:	4240      	negs	r0, r0
 8000f18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db1b      	blt.n	8000f58 <__aeabi_ldivmod+0x84>
 8000f20:	f000 f85e 	bl	8000fe0 <__udivmoddi4>
 8000f24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f2c:	b004      	add	sp, #16
 8000f2e:	4240      	negs	r0, r0
 8000f30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f34:	4252      	negs	r2, r2
 8000f36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f3a:	4770      	bx	lr
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f42:	f000 f84d 	bl	8000fe0 <__udivmoddi4>
 8000f46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f4e:	b004      	add	sp, #16
 8000f50:	4240      	negs	r0, r0
 8000f52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f56:	4770      	bx	lr
 8000f58:	4252      	negs	r2, r2
 8000f5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f5e:	f000 f83f 	bl	8000fe0 <__udivmoddi4>
 8000f62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f6a:	b004      	add	sp, #16
 8000f6c:	4252      	negs	r2, r2
 8000f6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f72:	4770      	bx	lr

08000f74 <__aeabi_d2lz>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	2200      	movs	r2, #0
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	460d      	mov	r5, r1
 8000f7e:	f7ff fdc5 	bl	8000b0c <__aeabi_dcmplt>
 8000f82:	b928      	cbnz	r0, 8000f90 <__aeabi_d2lz+0x1c>
 8000f84:	4620      	mov	r0, r4
 8000f86:	4629      	mov	r1, r5
 8000f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f8c:	f000 b80a 	b.w	8000fa4 <__aeabi_d2ulz>
 8000f90:	4620      	mov	r0, r4
 8000f92:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000f96:	f000 f805 	bl	8000fa4 <__aeabi_d2ulz>
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fa0:	bd38      	pop	{r3, r4, r5, pc}
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_d2ulz>:
 8000fa4:	b5d0      	push	{r4, r6, r7, lr}
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <__aeabi_d2ulz+0x34>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4606      	mov	r6, r0
 8000fac:	460f      	mov	r7, r1
 8000fae:	f7ff fb3b 	bl	8000628 <__aeabi_dmul>
 8000fb2:	f7ff fe11 	bl	8000bd8 <__aeabi_d2uiz>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	f7ff fabc 	bl	8000534 <__aeabi_ui2d>
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <__aeabi_d2ulz+0x38>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f7ff fb32 	bl	8000628 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4630      	mov	r0, r6
 8000fca:	4639      	mov	r1, r7
 8000fcc:	f7ff f974 	bl	80002b8 <__aeabi_dsub>
 8000fd0:	f7ff fe02 	bl	8000bd8 <__aeabi_d2uiz>
 8000fd4:	4621      	mov	r1, r4
 8000fd6:	bdd0      	pop	{r4, r6, r7, pc}
 8000fd8:	3df00000 	.word	0x3df00000
 8000fdc:	41f00000 	.word	0x41f00000

08000fe0 <__udivmoddi4>:
 8000fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fe4:	9d08      	ldr	r5, [sp, #32]
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	468e      	mov	lr, r1
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d14d      	bne.n	800108a <__udivmoddi4+0xaa>
 8000fee:	428a      	cmp	r2, r1
 8000ff0:	4694      	mov	ip, r2
 8000ff2:	d969      	bls.n	80010c8 <__udivmoddi4+0xe8>
 8000ff4:	fab2 f282 	clz	r2, r2
 8000ff8:	b152      	cbz	r2, 8001010 <__udivmoddi4+0x30>
 8000ffa:	fa01 f302 	lsl.w	r3, r1, r2
 8000ffe:	f1c2 0120 	rsb	r1, r2, #32
 8001002:	fa20 f101 	lsr.w	r1, r0, r1
 8001006:	fa0c fc02 	lsl.w	ip, ip, r2
 800100a:	ea41 0e03 	orr.w	lr, r1, r3
 800100e:	4094      	lsls	r4, r2
 8001010:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001014:	0c21      	lsrs	r1, r4, #16
 8001016:	fbbe f6f8 	udiv	r6, lr, r8
 800101a:	fa1f f78c 	uxth.w	r7, ip
 800101e:	fb08 e316 	mls	r3, r8, r6, lr
 8001022:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001026:	fb06 f107 	mul.w	r1, r6, r7
 800102a:	4299      	cmp	r1, r3
 800102c:	d90a      	bls.n	8001044 <__udivmoddi4+0x64>
 800102e:	eb1c 0303 	adds.w	r3, ip, r3
 8001032:	f106 30ff 	add.w	r0, r6, #4294967295
 8001036:	f080 811f 	bcs.w	8001278 <__udivmoddi4+0x298>
 800103a:	4299      	cmp	r1, r3
 800103c:	f240 811c 	bls.w	8001278 <__udivmoddi4+0x298>
 8001040:	3e02      	subs	r6, #2
 8001042:	4463      	add	r3, ip
 8001044:	1a5b      	subs	r3, r3, r1
 8001046:	b2a4      	uxth	r4, r4
 8001048:	fbb3 f0f8 	udiv	r0, r3, r8
 800104c:	fb08 3310 	mls	r3, r8, r0, r3
 8001050:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001054:	fb00 f707 	mul.w	r7, r0, r7
 8001058:	42a7      	cmp	r7, r4
 800105a:	d90a      	bls.n	8001072 <__udivmoddi4+0x92>
 800105c:	eb1c 0404 	adds.w	r4, ip, r4
 8001060:	f100 33ff 	add.w	r3, r0, #4294967295
 8001064:	f080 810a 	bcs.w	800127c <__udivmoddi4+0x29c>
 8001068:	42a7      	cmp	r7, r4
 800106a:	f240 8107 	bls.w	800127c <__udivmoddi4+0x29c>
 800106e:	4464      	add	r4, ip
 8001070:	3802      	subs	r0, #2
 8001072:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001076:	1be4      	subs	r4, r4, r7
 8001078:	2600      	movs	r6, #0
 800107a:	b11d      	cbz	r5, 8001084 <__udivmoddi4+0xa4>
 800107c:	40d4      	lsrs	r4, r2
 800107e:	2300      	movs	r3, #0
 8001080:	e9c5 4300 	strd	r4, r3, [r5]
 8001084:	4631      	mov	r1, r6
 8001086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800108a:	428b      	cmp	r3, r1
 800108c:	d909      	bls.n	80010a2 <__udivmoddi4+0xc2>
 800108e:	2d00      	cmp	r5, #0
 8001090:	f000 80ef 	beq.w	8001272 <__udivmoddi4+0x292>
 8001094:	2600      	movs	r6, #0
 8001096:	e9c5 0100 	strd	r0, r1, [r5]
 800109a:	4630      	mov	r0, r6
 800109c:	4631      	mov	r1, r6
 800109e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a2:	fab3 f683 	clz	r6, r3
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	d14a      	bne.n	8001140 <__udivmoddi4+0x160>
 80010aa:	428b      	cmp	r3, r1
 80010ac:	d302      	bcc.n	80010b4 <__udivmoddi4+0xd4>
 80010ae:	4282      	cmp	r2, r0
 80010b0:	f200 80f9 	bhi.w	80012a6 <__udivmoddi4+0x2c6>
 80010b4:	1a84      	subs	r4, r0, r2
 80010b6:	eb61 0303 	sbc.w	r3, r1, r3
 80010ba:	2001      	movs	r0, #1
 80010bc:	469e      	mov	lr, r3
 80010be:	2d00      	cmp	r5, #0
 80010c0:	d0e0      	beq.n	8001084 <__udivmoddi4+0xa4>
 80010c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80010c6:	e7dd      	b.n	8001084 <__udivmoddi4+0xa4>
 80010c8:	b902      	cbnz	r2, 80010cc <__udivmoddi4+0xec>
 80010ca:	deff      	udf	#255	; 0xff
 80010cc:	fab2 f282 	clz	r2, r2
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	f040 8092 	bne.w	80011fa <__udivmoddi4+0x21a>
 80010d6:	eba1 010c 	sub.w	r1, r1, ip
 80010da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010de:	fa1f fe8c 	uxth.w	lr, ip
 80010e2:	2601      	movs	r6, #1
 80010e4:	0c20      	lsrs	r0, r4, #16
 80010e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80010ea:	fb07 1113 	mls	r1, r7, r3, r1
 80010ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010f2:	fb0e f003 	mul.w	r0, lr, r3
 80010f6:	4288      	cmp	r0, r1
 80010f8:	d908      	bls.n	800110c <__udivmoddi4+0x12c>
 80010fa:	eb1c 0101 	adds.w	r1, ip, r1
 80010fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8001102:	d202      	bcs.n	800110a <__udivmoddi4+0x12a>
 8001104:	4288      	cmp	r0, r1
 8001106:	f200 80cb 	bhi.w	80012a0 <__udivmoddi4+0x2c0>
 800110a:	4643      	mov	r3, r8
 800110c:	1a09      	subs	r1, r1, r0
 800110e:	b2a4      	uxth	r4, r4
 8001110:	fbb1 f0f7 	udiv	r0, r1, r7
 8001114:	fb07 1110 	mls	r1, r7, r0, r1
 8001118:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800111c:	fb0e fe00 	mul.w	lr, lr, r0
 8001120:	45a6      	cmp	lr, r4
 8001122:	d908      	bls.n	8001136 <__udivmoddi4+0x156>
 8001124:	eb1c 0404 	adds.w	r4, ip, r4
 8001128:	f100 31ff 	add.w	r1, r0, #4294967295
 800112c:	d202      	bcs.n	8001134 <__udivmoddi4+0x154>
 800112e:	45a6      	cmp	lr, r4
 8001130:	f200 80bb 	bhi.w	80012aa <__udivmoddi4+0x2ca>
 8001134:	4608      	mov	r0, r1
 8001136:	eba4 040e 	sub.w	r4, r4, lr
 800113a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800113e:	e79c      	b.n	800107a <__udivmoddi4+0x9a>
 8001140:	f1c6 0720 	rsb	r7, r6, #32
 8001144:	40b3      	lsls	r3, r6
 8001146:	fa22 fc07 	lsr.w	ip, r2, r7
 800114a:	ea4c 0c03 	orr.w	ip, ip, r3
 800114e:	fa20 f407 	lsr.w	r4, r0, r7
 8001152:	fa01 f306 	lsl.w	r3, r1, r6
 8001156:	431c      	orrs	r4, r3
 8001158:	40f9      	lsrs	r1, r7
 800115a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800115e:	fa00 f306 	lsl.w	r3, r0, r6
 8001162:	fbb1 f8f9 	udiv	r8, r1, r9
 8001166:	0c20      	lsrs	r0, r4, #16
 8001168:	fa1f fe8c 	uxth.w	lr, ip
 800116c:	fb09 1118 	mls	r1, r9, r8, r1
 8001170:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001174:	fb08 f00e 	mul.w	r0, r8, lr
 8001178:	4288      	cmp	r0, r1
 800117a:	fa02 f206 	lsl.w	r2, r2, r6
 800117e:	d90b      	bls.n	8001198 <__udivmoddi4+0x1b8>
 8001180:	eb1c 0101 	adds.w	r1, ip, r1
 8001184:	f108 3aff 	add.w	sl, r8, #4294967295
 8001188:	f080 8088 	bcs.w	800129c <__udivmoddi4+0x2bc>
 800118c:	4288      	cmp	r0, r1
 800118e:	f240 8085 	bls.w	800129c <__udivmoddi4+0x2bc>
 8001192:	f1a8 0802 	sub.w	r8, r8, #2
 8001196:	4461      	add	r1, ip
 8001198:	1a09      	subs	r1, r1, r0
 800119a:	b2a4      	uxth	r4, r4
 800119c:	fbb1 f0f9 	udiv	r0, r1, r9
 80011a0:	fb09 1110 	mls	r1, r9, r0, r1
 80011a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80011a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80011ac:	458e      	cmp	lr, r1
 80011ae:	d908      	bls.n	80011c2 <__udivmoddi4+0x1e2>
 80011b0:	eb1c 0101 	adds.w	r1, ip, r1
 80011b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80011b8:	d26c      	bcs.n	8001294 <__udivmoddi4+0x2b4>
 80011ba:	458e      	cmp	lr, r1
 80011bc:	d96a      	bls.n	8001294 <__udivmoddi4+0x2b4>
 80011be:	3802      	subs	r0, #2
 80011c0:	4461      	add	r1, ip
 80011c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80011c6:	fba0 9402 	umull	r9, r4, r0, r2
 80011ca:	eba1 010e 	sub.w	r1, r1, lr
 80011ce:	42a1      	cmp	r1, r4
 80011d0:	46c8      	mov	r8, r9
 80011d2:	46a6      	mov	lr, r4
 80011d4:	d356      	bcc.n	8001284 <__udivmoddi4+0x2a4>
 80011d6:	d053      	beq.n	8001280 <__udivmoddi4+0x2a0>
 80011d8:	b15d      	cbz	r5, 80011f2 <__udivmoddi4+0x212>
 80011da:	ebb3 0208 	subs.w	r2, r3, r8
 80011de:	eb61 010e 	sbc.w	r1, r1, lr
 80011e2:	fa01 f707 	lsl.w	r7, r1, r7
 80011e6:	fa22 f306 	lsr.w	r3, r2, r6
 80011ea:	40f1      	lsrs	r1, r6
 80011ec:	431f      	orrs	r7, r3
 80011ee:	e9c5 7100 	strd	r7, r1, [r5]
 80011f2:	2600      	movs	r6, #0
 80011f4:	4631      	mov	r1, r6
 80011f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011fa:	f1c2 0320 	rsb	r3, r2, #32
 80011fe:	40d8      	lsrs	r0, r3
 8001200:	fa0c fc02 	lsl.w	ip, ip, r2
 8001204:	fa21 f303 	lsr.w	r3, r1, r3
 8001208:	4091      	lsls	r1, r2
 800120a:	4301      	orrs	r1, r0
 800120c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001210:	fa1f fe8c 	uxth.w	lr, ip
 8001214:	fbb3 f0f7 	udiv	r0, r3, r7
 8001218:	fb07 3610 	mls	r6, r7, r0, r3
 800121c:	0c0b      	lsrs	r3, r1, #16
 800121e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001222:	fb00 f60e 	mul.w	r6, r0, lr
 8001226:	429e      	cmp	r6, r3
 8001228:	fa04 f402 	lsl.w	r4, r4, r2
 800122c:	d908      	bls.n	8001240 <__udivmoddi4+0x260>
 800122e:	eb1c 0303 	adds.w	r3, ip, r3
 8001232:	f100 38ff 	add.w	r8, r0, #4294967295
 8001236:	d22f      	bcs.n	8001298 <__udivmoddi4+0x2b8>
 8001238:	429e      	cmp	r6, r3
 800123a:	d92d      	bls.n	8001298 <__udivmoddi4+0x2b8>
 800123c:	3802      	subs	r0, #2
 800123e:	4463      	add	r3, ip
 8001240:	1b9b      	subs	r3, r3, r6
 8001242:	b289      	uxth	r1, r1
 8001244:	fbb3 f6f7 	udiv	r6, r3, r7
 8001248:	fb07 3316 	mls	r3, r7, r6, r3
 800124c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001250:	fb06 f30e 	mul.w	r3, r6, lr
 8001254:	428b      	cmp	r3, r1
 8001256:	d908      	bls.n	800126a <__udivmoddi4+0x28a>
 8001258:	eb1c 0101 	adds.w	r1, ip, r1
 800125c:	f106 38ff 	add.w	r8, r6, #4294967295
 8001260:	d216      	bcs.n	8001290 <__udivmoddi4+0x2b0>
 8001262:	428b      	cmp	r3, r1
 8001264:	d914      	bls.n	8001290 <__udivmoddi4+0x2b0>
 8001266:	3e02      	subs	r6, #2
 8001268:	4461      	add	r1, ip
 800126a:	1ac9      	subs	r1, r1, r3
 800126c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001270:	e738      	b.n	80010e4 <__udivmoddi4+0x104>
 8001272:	462e      	mov	r6, r5
 8001274:	4628      	mov	r0, r5
 8001276:	e705      	b.n	8001084 <__udivmoddi4+0xa4>
 8001278:	4606      	mov	r6, r0
 800127a:	e6e3      	b.n	8001044 <__udivmoddi4+0x64>
 800127c:	4618      	mov	r0, r3
 800127e:	e6f8      	b.n	8001072 <__udivmoddi4+0x92>
 8001280:	454b      	cmp	r3, r9
 8001282:	d2a9      	bcs.n	80011d8 <__udivmoddi4+0x1f8>
 8001284:	ebb9 0802 	subs.w	r8, r9, r2
 8001288:	eb64 0e0c 	sbc.w	lr, r4, ip
 800128c:	3801      	subs	r0, #1
 800128e:	e7a3      	b.n	80011d8 <__udivmoddi4+0x1f8>
 8001290:	4646      	mov	r6, r8
 8001292:	e7ea      	b.n	800126a <__udivmoddi4+0x28a>
 8001294:	4620      	mov	r0, r4
 8001296:	e794      	b.n	80011c2 <__udivmoddi4+0x1e2>
 8001298:	4640      	mov	r0, r8
 800129a:	e7d1      	b.n	8001240 <__udivmoddi4+0x260>
 800129c:	46d0      	mov	r8, sl
 800129e:	e77b      	b.n	8001198 <__udivmoddi4+0x1b8>
 80012a0:	3b02      	subs	r3, #2
 80012a2:	4461      	add	r1, ip
 80012a4:	e732      	b.n	800110c <__udivmoddi4+0x12c>
 80012a6:	4630      	mov	r0, r6
 80012a8:	e709      	b.n	80010be <__udivmoddi4+0xde>
 80012aa:	4464      	add	r4, ip
 80012ac:	3802      	subs	r0, #2
 80012ae:	e742      	b.n	8001136 <__udivmoddi4+0x156>

080012b0 <__aeabi_idiv0>:
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop

080012b4 <configMPUAccel>:
//Importacio de librerias
#include "MPUAccel.h"
#include <SysTickDriver.h>

void configMPUAccel (MPUAccel_Handler_t *ptrMPUAccel){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	73bb      	strb	r3, [r7, #14]

	//------------Verificamos comunicacion con el MPU----------------
	while(!rdy){
 80012c4:	e004      	b.n	80012d0 <configMPUAccel+0x1c>

		rdy = WHOIAM(ptrMPUAccel);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 f84f 	bl	800136a <WHOIAM>
 80012cc:	4603      	mov	r3, r0
 80012ce:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0f7      	beq.n	80012c6 <configMPUAccel+0x12>
	}

	//------------------Reiniciamos el MPU--------------------------
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, PWR_MGMT_l, 0x00);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	216b      	movs	r1, #107	; 0x6b
 80012de:	4618      	mov	r0, r3
 80012e0:	f004 faad 	bl	800583e <i2c_WriteSingleRegister>
	//Pausa
	delay_ms(1);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f004 ff3f 	bl	8006168 <delay_ms>

	//---------------Configuracion Accel----------------------------
	byte =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_CONFIG);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	211c      	movs	r1, #28
 80012f0:	4618      	mov	r0, r3
 80012f2:	f004 fa73 	bl	80057dc <i2c_ReadSingleRegister>
 80012f6:	4603      	mov	r3, r0
 80012f8:	73bb      	strb	r3, [r7, #14]
	byte &= ~(0b00011000);
 80012fa:	7bbb      	ldrb	r3, [r7, #14]
 80012fc:	f023 0318 	bic.w	r3, r3, #24
 8001300:	73bb      	strb	r3, [r7, #14]
	//Pausa
	delay_ms(1);
 8001302:	2001      	movs	r0, #1
 8001304:	f004 ff30 	bl	8006168 <delay_ms>
	//Deacuerdo al valor predeterminado se carga una configuracion
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_CONFIG, (byte) | (ptrMPUAccel->fullScaleACCEL<<3));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6858      	ldr	r0, [r3, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	b25a      	sxtb	r2, r3
 8001314:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001318:	4313      	orrs	r3, r2
 800131a:	b25b      	sxtb	r3, r3
 800131c:	b2db      	uxtb	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	211c      	movs	r1, #28
 8001322:	f004 fa8c 	bl	800583e <i2c_WriteSingleRegister>

	//---------------Configuracion Giro----------------------------
	byte =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_CONFIG);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	211b      	movs	r1, #27
 800132c:	4618      	mov	r0, r3
 800132e:	f004 fa55 	bl	80057dc <i2c_ReadSingleRegister>
 8001332:	4603      	mov	r3, r0
 8001334:	73bb      	strb	r3, [r7, #14]
	byte &= ~(0b00011000);
 8001336:	7bbb      	ldrb	r3, [r7, #14]
 8001338:	f023 0318 	bic.w	r3, r3, #24
 800133c:	73bb      	strb	r3, [r7, #14]
	//Pausa
	delay_ms(1);
 800133e:	2001      	movs	r0, #1
 8001340:	f004 ff12 	bl	8006168 <delay_ms>
	//Deacuerdo al valor predeterminado se carga una configuracion
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_CONFIG, (byte) | (ptrMPUAccel->fullScaleACCEL <<3));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6858      	ldr	r0, [r3, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	b25a      	sxtb	r2, r3
 8001350:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001354:	4313      	orrs	r3, r2
 8001356:	b25b      	sxtb	r3, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	461a      	mov	r2, r3
 800135c:	211b      	movs	r1, #27
 800135e:	f004 fa6e 	bl	800583e <i2c_WriteSingleRegister>
}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <WHOIAM>:



//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Handler_t *ptrMPUAccel){
 800136a:	b580      	push	{r7, lr}
 800136c:	b084      	sub	sp, #16
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
	//Variables auxiliares
	uint8_t whoami = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	73bb      	strb	r3, [r7, #14]
	//leemos el registro WHO_AM_I correspondiente
	whoami =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, WHO_AM_I);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2175      	movs	r1, #117	; 0x75
 8001380:	4618      	mov	r0, r3
 8001382:	f004 fa2b 	bl	80057dc <i2c_ReadSingleRegister>
 8001386:	4603      	mov	r3, r0
 8001388:	73fb      	strb	r3, [r7, #15]
	//verificamos la transacción
	whoami &= ~(0b10000001);
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001390:	73fb      	strb	r3, [r7, #15]
	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	085b      	lsrs	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	bf14      	ite	ne
 800139c:	2301      	movne	r3, #1
 800139e:	2300      	moveq	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	73bb      	strb	r3, [r7, #14]

	return rdy;
 80013a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <readMPU>:


//Funcion para la lectura de dos registros que compone uno de los ejes de acelerometro o del giroscopio
float readMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementRead, int16_t offset)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
 80013bc:	4613      	mov	r3, r2
 80013be:	803b      	strh	r3, [r7, #0]
	//Variable para guardar la  direccion de los dos registros a leer
	uint8_t address_H = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	75fb      	strb	r3, [r7, #23]
	uint8_t address_L = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	75bb      	strb	r3, [r7, #22]
	//Creamos las variables donde almacenamos todos los datos
	uint16_t aux_H = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	81fb      	strh	r3, [r7, #14]
	uint16_t aux_L = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	81bb      	strh	r3, [r7, #12]
	int16_t   aux  = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	817b      	strh	r3, [r7, #10]
	float res  = 0;
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
	//Seleccionamos la direccion de los registros a Leer
	switch(elementRead)
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	2b05      	cmp	r3, #5
 80013de:	d82d      	bhi.n	800143c <readMPU+0x8c>
 80013e0:	a201      	add	r2, pc, #4	; (adr r2, 80013e8 <readMPU+0x38>)
 80013e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e6:	bf00      	nop
 80013e8:	08001401 	.word	0x08001401
 80013ec:	0800140b 	.word	0x0800140b
 80013f0:	08001415 	.word	0x08001415
 80013f4:	0800141f 	.word	0x0800141f
 80013f8:	08001429 	.word	0x08001429
 80013fc:	08001433 	.word	0x08001433
	{
		case READ_ACCEL_X:{address_H = ACCEL_XOUT_H, address_L = ACCEL_XOUT_L; break;}
 8001400:	233b      	movs	r3, #59	; 0x3b
 8001402:	75fb      	strb	r3, [r7, #23]
 8001404:	233c      	movs	r3, #60	; 0x3c
 8001406:	75bb      	strb	r3, [r7, #22]
 8001408:	e019      	b.n	800143e <readMPU+0x8e>
		case READ_ACCEL_Y:{address_H = ACCEL_YOUT_H, address_L = ACCEL_YOUT_L; break;}
 800140a:	233d      	movs	r3, #61	; 0x3d
 800140c:	75fb      	strb	r3, [r7, #23]
 800140e:	233e      	movs	r3, #62	; 0x3e
 8001410:	75bb      	strb	r3, [r7, #22]
 8001412:	e014      	b.n	800143e <readMPU+0x8e>
		case READ_ACCEL_Z:{address_H = ACCEL_ZOUT_H, address_L = ACCEL_ZOUT_L; break;}
 8001414:	233f      	movs	r3, #63	; 0x3f
 8001416:	75fb      	strb	r3, [r7, #23]
 8001418:	2340      	movs	r3, #64	; 0x40
 800141a:	75bb      	strb	r3, [r7, #22]
 800141c:	e00f      	b.n	800143e <readMPU+0x8e>
		case READ_GYRO_X:{address_H = GIRO_XOUT_H, address_L = GIRO_XOUT_L; break;}
 800141e:	2343      	movs	r3, #67	; 0x43
 8001420:	75fb      	strb	r3, [r7, #23]
 8001422:	2344      	movs	r3, #68	; 0x44
 8001424:	75bb      	strb	r3, [r7, #22]
 8001426:	e00a      	b.n	800143e <readMPU+0x8e>
		case READ_GYRO_Y:{address_H = GIRO_YOUT_H, address_L = GIRO_YOUT_L; break;}
 8001428:	2345      	movs	r3, #69	; 0x45
 800142a:	75fb      	strb	r3, [r7, #23]
 800142c:	2346      	movs	r3, #70	; 0x46
 800142e:	75bb      	strb	r3, [r7, #22]
 8001430:	e005      	b.n	800143e <readMPU+0x8e>
		case READ_GYRO_Z:{address_H = GIRO_ZOUT_H, address_L = GIRO_ZOUT_L; break;}
 8001432:	2347      	movs	r3, #71	; 0x47
 8001434:	75fb      	strb	r3, [r7, #23]
 8001436:	2348      	movs	r3, #72	; 0x48
 8001438:	75bb      	strb	r3, [r7, #22]
 800143a:	e000      	b.n	800143e <readMPU+0x8e>
		default:{ break; }
 800143c:	bf00      	nop
	}
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	aux_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_H);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	7dfa      	ldrb	r2, [r7, #23]
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f004 f9c8 	bl	80057dc <i2c_ReadSingleRegister>
 800144c:	4603      	mov	r3, r0
 800144e:	81fb      	strh	r3, [r7, #14]
	aux_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_L);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	7dba      	ldrb	r2, [r7, #22]
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f004 f9bf 	bl	80057dc <i2c_ReadSingleRegister>
 800145e:	4603      	mov	r3, r0
 8001460:	81bb      	strh	r3, [r7, #12]
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	aux = ((int16_t) ((aux_H << 8) | (aux_L))) - offset;
 8001462:	89fb      	ldrh	r3, [r7, #14]
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	b21a      	sxth	r2, r3
 8001468:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	b21b      	sxth	r3, r3
 8001470:	b29a      	uxth	r2, r3
 8001472:	883b      	ldrh	r3, [r7, #0]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	b29b      	uxth	r3, r3
 8001478:	817b      	strh	r3, [r7, #10]
	//Realizamos la conversion de los bytes al valor de magnitud fisica en el respectivo eje
	switch(elementRead)
 800147a:	78fb      	ldrb	r3, [r7, #3]
 800147c:	2b02      	cmp	r3, #2
 800147e:	dc02      	bgt.n	8001486 <readMPU+0xd6>
 8001480:	2b00      	cmp	r3, #0
 8001482:	da05      	bge.n	8001490 <readMPU+0xe0>
				case GYRO_2000 :{ res = aux/GYRO_2000_SENS; break;}
				default:{ break; }
			}
			break;
		}
		default:{ break; }
 8001484:	e0d6      	b.n	8001634 <readMPU+0x284>
 8001486:	3b03      	subs	r3, #3
	switch(elementRead)
 8001488:	2b02      	cmp	r3, #2
 800148a:	f200 80d3 	bhi.w	8001634 <readMPU+0x284>
 800148e:	e081      	b.n	8001594 <readMPU+0x1e4>
			switch (ptrMPUAccel->fullScaleACCEL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b03      	cmp	r3, #3
 8001496:	d87b      	bhi.n	8001590 <readMPU+0x1e0>
 8001498:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <readMPU+0xf0>)
 800149a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149e:	bf00      	nop
 80014a0:	080014b1 	.word	0x080014b1
 80014a4:	080014e9 	.word	0x080014e9
 80014a8:	08001521 	.word	0x08001521
 80014ac:	08001559 	.word	0x08001559
				case ACCEL_2G :{res = (aux*9.77)/ACCEL_2G_SENS; break;}
 80014b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f84d 	bl	8000554 <__aeabi_i2d>
 80014ba:	a363      	add	r3, pc, #396	; (adr r3, 8001648 <readMPU+0x298>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	f7ff f8b2 	bl	8000628 <__aeabi_dmul>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	4b5f      	ldr	r3, [pc, #380]	; (8001650 <readMPU+0x2a0>)
 80014d2:	f7ff f9d3 	bl	800087c <__aeabi_ddiv>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff fb9b 	bl	8000c18 <__aeabi_d2f>
 80014e2:	4603      	mov	r3, r0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	e054      	b.n	8001592 <readMPU+0x1e2>
				case ACCEL_4G :{res = (aux*9.77)/ACCEL_4G_SENS; break;}
 80014e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f831 	bl	8000554 <__aeabi_i2d>
 80014f2:	a355      	add	r3, pc, #340	; (adr r3, 8001648 <readMPU+0x298>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f896 	bl	8000628 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	4b52      	ldr	r3, [pc, #328]	; (8001654 <readMPU+0x2a4>)
 800150a:	f7ff f9b7 	bl	800087c <__aeabi_ddiv>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f7ff fb7f 	bl	8000c18 <__aeabi_d2f>
 800151a:	4603      	mov	r3, r0
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	e038      	b.n	8001592 <readMPU+0x1e2>
				case ACCEL_8G :{res = (aux*9.77)/ACCEL_8G_SENS; break;}
 8001520:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f815 	bl	8000554 <__aeabi_i2d>
 800152a:	a347      	add	r3, pc, #284	; (adr r3, 8001648 <readMPU+0x298>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7ff f87a 	bl	8000628 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	4b45      	ldr	r3, [pc, #276]	; (8001658 <readMPU+0x2a8>)
 8001542:	f7ff f99b 	bl	800087c <__aeabi_ddiv>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff fb63 	bl	8000c18 <__aeabi_d2f>
 8001552:	4603      	mov	r3, r0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	e01c      	b.n	8001592 <readMPU+0x1e2>
				case ACCEL_16G :{res = (aux*9.77)/ACCEL_16G_SENS; break;}
 8001558:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe fff9 	bl	8000554 <__aeabi_i2d>
 8001562:	a339      	add	r3, pc, #228	; (adr r3, 8001648 <readMPU+0x298>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7ff f85e 	bl	8000628 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	4b38      	ldr	r3, [pc, #224]	; (800165c <readMPU+0x2ac>)
 800157a:	f7ff f97f 	bl	800087c <__aeabi_ddiv>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	f7ff fb47 	bl	8000c18 <__aeabi_d2f>
 800158a:	4603      	mov	r3, r0
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	e000      	b.n	8001592 <readMPU+0x1e2>
				default:{ break; }
 8001590:	bf00      	nop
			break;
 8001592:	e050      	b.n	8001636 <readMPU+0x286>
			switch (ptrMPUAccel->fullScaleGYRO)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	785b      	ldrb	r3, [r3, #1]
 8001598:	2b03      	cmp	r3, #3
 800159a:	d849      	bhi.n	8001630 <readMPU+0x280>
 800159c:	a201      	add	r2, pc, #4	; (adr r2, 80015a4 <readMPU+0x1f4>)
 800159e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a2:	bf00      	nop
 80015a4:	080015b5 	.word	0x080015b5
 80015a8:	080015d5 	.word	0x080015d5
 80015ac:	080015f5 	.word	0x080015f5
 80015b0:	08001615 	.word	0x08001615
				case GYRO_250 :{ res = aux/GYRO_250_SENS; break;}
 80015b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015b8:	4a29      	ldr	r2, [pc, #164]	; (8001660 <readMPU+0x2b0>)
 80015ba:	fb82 1203 	smull	r1, r2, r2, r3
 80015be:	1152      	asrs	r2, r2, #5
 80015c0:	17db      	asrs	r3, r3, #31
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	ee07 3a90 	vmov	s15, r3
 80015ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ce:	edc7 7a04 	vstr	s15, [r7, #16]
 80015d2:	e02e      	b.n	8001632 <readMPU+0x282>
				case GYRO_500 :{ res = aux/GYRO_500_SENS; break;}
 80015d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015d8:	4a22      	ldr	r2, [pc, #136]	; (8001664 <readMPU+0x2b4>)
 80015da:	fb82 1203 	smull	r1, r2, r2, r3
 80015de:	1112      	asrs	r2, r2, #4
 80015e0:	17db      	asrs	r3, r3, #31
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ee:	edc7 7a04 	vstr	s15, [r7, #16]
 80015f2:	e01e      	b.n	8001632 <readMPU+0x282>
				case GYRO_1000 :{ res = aux/GYRO_1000_SENS; break;}
 80015f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015f8:	4a1a      	ldr	r2, [pc, #104]	; (8001664 <readMPU+0x2b4>)
 80015fa:	fb82 1203 	smull	r1, r2, r2, r3
 80015fe:	10d2      	asrs	r2, r2, #3
 8001600:	17db      	asrs	r3, r3, #31
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	b21b      	sxth	r3, r3
 8001606:	ee07 3a90 	vmov	s15, r3
 800160a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160e:	edc7 7a04 	vstr	s15, [r7, #16]
 8001612:	e00e      	b.n	8001632 <readMPU+0x282>
				case GYRO_2000 :{ res = aux/GYRO_2000_SENS; break;}
 8001614:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001618:	2b00      	cmp	r3, #0
 800161a:	da00      	bge.n	800161e <readMPU+0x26e>
 800161c:	330f      	adds	r3, #15
 800161e:	111b      	asrs	r3, r3, #4
 8001620:	b21b      	sxth	r3, r3
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162a:	edc7 7a04 	vstr	s15, [r7, #16]
 800162e:	e000      	b.n	8001632 <readMPU+0x282>
				default:{ break; }
 8001630:	bf00      	nop
			break;
 8001632:	e000      	b.n	8001636 <readMPU+0x286>
		default:{ break; }
 8001634:	bf00      	nop
	}
	//Retornamos valor
	return res;
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	ee07 3a90 	vmov	s15, r3
}
 800163c:	eeb0 0a67 	vmov.f32	s0, s15
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	70a3d70a 	.word	0x70a3d70a
 800164c:	40238a3d 	.word	0x40238a3d
 8001650:	40d00000 	.word	0x40d00000
 8001654:	40c00000 	.word	0x40c00000
 8001658:	40b00000 	.word	0x40b00000
 800165c:	40a00000 	.word	0x40a00000
 8001660:	3e88cb3d 	.word	0x3e88cb3d
 8001664:	3e0f83e1 	.word	0x3e0f83e1

08001668 <readCalibrationMPU>:

//Funcion para en el modo de calibracion para la lectura de dos registros que compone uno de los ejes de acelerometro o del giroscopio
int16_t readCalibrationMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementRead)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	70fb      	strb	r3, [r7, #3]
	//Variable para guardar la  direccion de los dos registros a leer
	uint8_t address_H = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]
	uint8_t address_L = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	73bb      	strb	r3, [r7, #14]
	//Creamos las variables donde almacenamos todos los datos
	uint16_t aux_H = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	81bb      	strh	r3, [r7, #12]
	uint16_t aux_L = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	817b      	strh	r3, [r7, #10]
	int16_t   aux  = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	813b      	strh	r3, [r7, #8]
	//Seleccionamos la direccion de los registros a Leer
	switch(elementRead)
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	2b05      	cmp	r3, #5
 800168c:	d82c      	bhi.n	80016e8 <readCalibrationMPU+0x80>
 800168e:	a201      	add	r2, pc, #4	; (adr r2, 8001694 <readCalibrationMPU+0x2c>)
 8001690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001694:	080016ad 	.word	0x080016ad
 8001698:	080016b7 	.word	0x080016b7
 800169c:	080016c1 	.word	0x080016c1
 80016a0:	080016cb 	.word	0x080016cb
 80016a4:	080016d5 	.word	0x080016d5
 80016a8:	080016df 	.word	0x080016df
	{
		case READ_ACCEL_X:{address_H = ACCEL_XOUT_H, address_L = ACCEL_XOUT_L; break;}
 80016ac:	233b      	movs	r3, #59	; 0x3b
 80016ae:	73fb      	strb	r3, [r7, #15]
 80016b0:	233c      	movs	r3, #60	; 0x3c
 80016b2:	73bb      	strb	r3, [r7, #14]
 80016b4:	e019      	b.n	80016ea <readCalibrationMPU+0x82>
		case READ_ACCEL_Y:{address_H = ACCEL_YOUT_H, address_L = ACCEL_YOUT_L; break;}
 80016b6:	233d      	movs	r3, #61	; 0x3d
 80016b8:	73fb      	strb	r3, [r7, #15]
 80016ba:	233e      	movs	r3, #62	; 0x3e
 80016bc:	73bb      	strb	r3, [r7, #14]
 80016be:	e014      	b.n	80016ea <readCalibrationMPU+0x82>
		case READ_ACCEL_Z:{address_H = ACCEL_ZOUT_H, address_L = ACCEL_ZOUT_L; break;}
 80016c0:	233f      	movs	r3, #63	; 0x3f
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	2340      	movs	r3, #64	; 0x40
 80016c6:	73bb      	strb	r3, [r7, #14]
 80016c8:	e00f      	b.n	80016ea <readCalibrationMPU+0x82>
		case READ_GYRO_X:{address_H = GIRO_XOUT_H, address_L = GIRO_XOUT_L; break;}
 80016ca:	2343      	movs	r3, #67	; 0x43
 80016cc:	73fb      	strb	r3, [r7, #15]
 80016ce:	2344      	movs	r3, #68	; 0x44
 80016d0:	73bb      	strb	r3, [r7, #14]
 80016d2:	e00a      	b.n	80016ea <readCalibrationMPU+0x82>
		case READ_GYRO_Y:{address_H = GIRO_YOUT_H, address_L = GIRO_YOUT_L; break;}
 80016d4:	2345      	movs	r3, #69	; 0x45
 80016d6:	73fb      	strb	r3, [r7, #15]
 80016d8:	2346      	movs	r3, #70	; 0x46
 80016da:	73bb      	strb	r3, [r7, #14]
 80016dc:	e005      	b.n	80016ea <readCalibrationMPU+0x82>
		case READ_GYRO_Z:{address_H = GIRO_ZOUT_H, address_L = GIRO_ZOUT_L; break;}
 80016de:	2347      	movs	r3, #71	; 0x47
 80016e0:	73fb      	strb	r3, [r7, #15]
 80016e2:	2348      	movs	r3, #72	; 0x48
 80016e4:	73bb      	strb	r3, [r7, #14]
 80016e6:	e000      	b.n	80016ea <readCalibrationMPU+0x82>
		default:{ break; }
 80016e8:	bf00      	nop
	}
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	aux_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_H);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	7bfa      	ldrb	r2, [r7, #15]
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f004 f872 	bl	80057dc <i2c_ReadSingleRegister>
 80016f8:	4603      	mov	r3, r0
 80016fa:	81bb      	strh	r3, [r7, #12]
	aux_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_L);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	7bba      	ldrb	r2, [r7, #14]
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f004 f869 	bl	80057dc <i2c_ReadSingleRegister>
 800170a:	4603      	mov	r3, r0
 800170c:	817b      	strh	r3, [r7, #10]
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	aux = (int16_t) ((aux_H << 8) | (aux_L));
 800170e:	89bb      	ldrh	r3, [r7, #12]
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	b21a      	sxth	r2, r3
 8001714:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001718:	4313      	orrs	r3, r2
 800171a:	813b      	strh	r3, [r7, #8]
	//Realizamos la conversion de los bytes al valor de magnitud fisica en el respectivo eje

	//Retornamos valor
	return aux;
 800171c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <calibrationMPU>:


//Funcion para la calibracion de las mediciones realizadas
float calibrationMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementCalibration)
{
 8001728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800172c:	b088      	sub	sp, #32
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	460b      	mov	r3, r1
 8001734:	70fb      	strb	r3, [r7, #3]
	//Variables la ejecucion de la calibracion
	int64_t aux_sum = 0;
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint16_t num_samples = 200;
 8001742:	23c8      	movs	r3, #200	; 0xc8
 8001744:	827b      	strh	r3, [r7, #18]
	float offset = 0;
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
	//Realizacion acumulacion de valores
	for (int i = 0; i < num_samples; i++)
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e017      	b.n	8001782 <calibrationMPU+0x5a>
	{
		//Lectura del registro respectivo y acumulacion
		aux_sum += readCalibrationMPU(ptrMPUAccel, elementCalibration);
 8001752:	78fb      	ldrb	r3, [r7, #3]
 8001754:	4619      	mov	r1, r3
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ff86 	bl	8001668 <readCalibrationMPU>
 800175c:	4603      	mov	r3, r0
 800175e:	b21b      	sxth	r3, r3
 8001760:	17da      	asrs	r2, r3, #31
 8001762:	461c      	mov	r4, r3
 8001764:	4615      	mov	r5, r2
 8001766:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800176a:	eb12 0804 	adds.w	r8, r2, r4
 800176e:	eb43 0905 	adc.w	r9, r3, r5
 8001772:	e9c7 8906 	strd	r8, r9, [r7, #24]
		//Pausa
		delay_ms(1);
 8001776:	2001      	movs	r0, #1
 8001778:	f004 fcf6 	bl	8006168 <delay_ms>
	for (int i = 0; i < num_samples; i++)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	3301      	adds	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	8a7b      	ldrh	r3, [r7, #18]
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	429a      	cmp	r2, r3
 8001788:	dbe3      	blt.n	8001752 <calibrationMPU+0x2a>
	}
	//Promedio del eje medido
	 offset = aux_sum/num_samples;
 800178a:	8a7b      	ldrh	r3, [r7, #18]
 800178c:	2200      	movs	r2, #0
 800178e:	469a      	mov	sl, r3
 8001790:	4693      	mov	fp, r2
 8001792:	4652      	mov	r2, sl
 8001794:	465b      	mov	r3, fp
 8001796:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800179a:	f7ff fb9b 	bl	8000ed4 <__aeabi_ldivmod>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	f7ff fb57 	bl	8000e58 <__aeabi_l2f>
 80017aa:	4603      	mov	r3, r0
 80017ac:	60fb      	str	r3, [r7, #12]
	//Retornar valor
	return offset;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	ee07 3a90 	vmov	s15, r3
}
 80017b4:	eeb0 0a67 	vmov.f32	s0, s15
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080017c0 <getAngle>:


//Funcion para calcular el nuevo angulo de uno de los ejes del girsocopio
float getAngle(MPUAccel_Handler_t *ptrMPUAccel, MPUTimerSample_t *timer, float ang_init, uint8_t axis, int16_t offset_Axis)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80017ce:	4611      	mov	r1, r2
 80017d0:	461a      	mov	r2, r3
 80017d2:	460b      	mov	r3, r1
 80017d4:	70fb      	strb	r3, [r7, #3]
 80017d6:	4613      	mov	r3, r2
 80017d8:	803b      	strh	r3, [r7, #0]
	//Lectura velocidad angular
	float w_Angular= readMPU(ptrMPUAccel, axis, offset_Axis);
 80017da:	f9b7 2000 	ldrsh.w	r2, [r7]
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	4619      	mov	r1, r3
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f7ff fde4 	bl	80013b0 <readMPU>
 80017e8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	//Calculo del tiempo trascurrido tras el ultima leida
	uint64_t time_now = getTicksMs();
 80017ec:	f004 fcae 	bl	800614c <getTicksMs>
 80017f0:	e9c7 0106 	strd	r0, r1, [r7, #24]
	timer->delta_timer =  time_now - timer->timer_prev;
 80017f4:	8b39      	ldrh	r1, [r7, #24]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	b293      	uxth	r3, r2
 80017fe:	1acb      	subs	r3, r1, r3
 8001800:	b29a      	uxth	r2, r3
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	811a      	strh	r2, [r3, #8]
	timer->timer_prev = time_now;
 8001806:	68b9      	ldr	r1, [r7, #8]
 8001808:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800180c:	e9c1 2300 	strd	r2, r3, [r1]
	//Calculo angulo
	float ang = ang_init + (w_Angular*timer->delta_timer)/1000;
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	891b      	ldrh	r3, [r3, #8]
 8001814:	ee07 3a90 	vmov	s15, r3
 8001818:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800181c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001820:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001824:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001848 <getAngle+0x88>
 8001828:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800182c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001834:	edc7 7a05 	vstr	s15, [r7, #20]

	return ang;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	ee07 3a90 	vmov	s15, r3
}
 800183e:	eeb0 0a67 	vmov.f32	s0, s15
 8001842:	3728      	adds	r7, #40	; 0x28
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	447a0000 	.word	0x447a0000

0800184c <updateDuttyMotor>:
#include <MotorDriver.h>


//Funcion para actualizar el dutty del pwm
void updateDuttyMotor(Motor_Handler_t *ptrMotorHandler,  float newValue)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	ed87 0a00 	vstr	s0, [r7]
		//Guardar valor del dutty
		ptrMotorHandler->configMotor.dutty = newValue;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	631a      	str	r2, [r3, #48]	; 0x30
		//Actualizamos el valor del dutty
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001868:	eeb0 0a67 	vmov.f32	s0, s15
 800186c:	4610      	mov	r0, r2
 800186e:	f004 fbef 	bl	8006050 <updateDuttyCyclePercentageFloat>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <updateDirMotor>:
		updateFrequencyTimer(ptrBTimerHandler, *(ptrMotorHandler->configMotor.frecuency));
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
}

void updateDirMotor(Motor_Handler_t *ptrMotorHandler)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
		//Cambiar el valor de la direccion
		ptrMotorHandler->configMotor.dir = (~ptrMotorHandler->configMotor.dir)&(0x01);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf0c      	ite	eq
 8001890:	2301      	moveq	r3, #1
 8001892:	2300      	movne	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	461a      	mov	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		//Cambiamos la direccion del motor
		GPIO_writePin(ptrMotorHandler->phandlerGPIOIN, ptrMotorHandler->configMotor.dir&SET);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	4619      	mov	r1, r3
 80018b0:	4610      	mov	r0, r2
 80018b2:	f003 fd9d 	bl	80053f0 <GPIO_writePin>
		statusPolarityPWM(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dir&SET);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	4619      	mov	r1, r3
 80018c8:	4610      	mov	r0, r2
 80018ca:	f004 fafb 	bl	8005ec4 <statusPolarityPWM>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <build_Operation>:
#include <math.h>


//-------------------------Funcion para la definicion de operaciones--------------------------
void build_Operation(Parameters_Operation_t *prtList, Parameter_build_t *prtbuild, double finishline_x, double finishline_y)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08c      	sub	sp, #48	; 0x30
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6178      	str	r0, [r7, #20]
 80018e0:	6139      	str	r1, [r7, #16]
 80018e2:	ed87 0b02 	vstr	d0, [r7, #8]
 80018e6:	ed87 1b00 	vstr	d1, [r7]
	//Definicion el vector director
	double delta[2] = {finishline_x - prtbuild->initline_x, finishline_y - prtbuild->initline_y};
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018f4:	f7fe fce0 	bl	80002b8 <__aeabi_dsub>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001906:	e9d7 0100 	ldrd	r0, r1, [r7]
 800190a:	f7fe fcd5 	bl	80002b8 <__aeabi_dsub>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	e9c7 2308 	strd	r2, r3, [r7, #32]
	//Calculo angululo entre vectores directores
	double grad_turn_res = calculed_ang_turn(prtbuild->delta_before, delta);
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	3310      	adds	r3, #16
 800191a:	f107 0218 	add.w	r2, r7, #24
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f000 fac9 	bl	8001eb8 <calculed_ang_turn>
 8001926:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	//condicional de cambio de angulo
	if(grad_turn_res == 0)
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001936:	f7ff f8df 	bl	8000af8 <__aeabi_dcmpeq>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00e      	beq.n	800195e <build_Operation+0x86>
	{
		//agregar operacion de linea recta
		 add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0);
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001946:	ed9f 2b28 	vldr	d2, [pc, #160]	; 80019e8 <build_Operation+0x110>
 800194a:	ed97 1b00 	vldr	d1, [r7]
 800194e:	ed97 0b02 	vldr	d0, [r7, #8]
 8001952:	2201      	movs	r2, #1
 8001954:	4619      	mov	r1, r3
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f000 f84a 	bl	80019f0 <add_Operation>
 800195c:	e02b      	b.n	80019b6 <build_Operation+0xde>
	}
	else
	{
		//Agregar operacion de rotacion
		prtbuild->number_operation++;
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001964:	3301      	adds	r3, #1
 8001966:	b2da      	uxtb	r2, r3
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		add_Operation(prtList, prtbuild->number_operation, TURN, 0, 0, grad_turn_res);
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001974:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001978:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80019e8 <build_Operation+0x110>
 800197c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80019e8 <build_Operation+0x110>
 8001980:	2202      	movs	r2, #2
 8001982:	4619      	mov	r1, r3
 8001984:	6978      	ldr	r0, [r7, #20]
 8001986:	f000 f833 	bl	80019f0 <add_Operation>
		//agregar operacion de linea recta
		prtbuild->number_operation++;
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001990:	3301      	adds	r3, #1
 8001992:	b2da      	uxtb	r2, r3
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0);
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80019a0:	ed9f 2b11 	vldr	d2, [pc, #68]	; 80019e8 <build_Operation+0x110>
 80019a4:	ed97 1b00 	vldr	d1, [r7]
 80019a8:	ed97 0b02 	vldr	d0, [r7, #8]
 80019ac:	2201      	movs	r2, #1
 80019ae:	4619      	mov	r1, r3
 80019b0:	6978      	ldr	r0, [r7, #20]
 80019b2:	f000 f81d 	bl	80019f0 <add_Operation>
	}
	//Se redefine los valores iniciales
	prtbuild->delta_before[0] = delta[0];
 80019b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019ba:	6939      	ldr	r1, [r7, #16]
 80019bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtbuild->delta_before[1] = delta[1];
 80019c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019c4:	6939      	ldr	r1, [r7, #16]
 80019c6:	e9c1 2306 	strd	r2, r3, [r1, #24]
	prtbuild->initline_x = finishline_x;
 80019ca:	6939      	ldr	r1, [r7, #16]
 80019cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019d0:	e9c1 2300 	strd	r2, r3, [r1]
	prtbuild->initline_y = finishline_y;
 80019d4:	6939      	ldr	r1, [r7, #16]
 80019d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019da:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80019de:	bf00      	nop
 80019e0:	3730      	adds	r7, #48	; 0x30
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
	...

080019f0 <add_Operation>:

void add_Operation(Parameters_Operation_t *prtList, uint8_t num_operation, uint8_t type_operation, double coor_x, double coor_y, double grad_turn)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	61f8      	str	r0, [r7, #28]
 80019f8:	460b      	mov	r3, r1
 80019fa:	ed87 0b04 	vstr	d0, [r7, #16]
 80019fe:	ed87 1b02 	vstr	d1, [r7, #8]
 8001a02:	ed87 2b00 	vstr	d2, [r7]
 8001a06:	76fb      	strb	r3, [r7, #27]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	76bb      	strb	r3, [r7, #26]
	prtList[num_operation].operacion = type_operation;
 8001a0c:	7efb      	ldrb	r3, [r7, #27]
 8001a0e:	015b      	lsls	r3, r3, #5
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	4413      	add	r3, r2
 8001a14:	7eba      	ldrb	r2, [r7, #26]
 8001a16:	701a      	strb	r2, [r3, #0]
	prtList[num_operation].x_destination = coor_x;
 8001a18:	7efb      	ldrb	r3, [r7, #27]
 8001a1a:	015b      	lsls	r3, r3, #5
 8001a1c:	69fa      	ldr	r2, [r7, #28]
 8001a1e:	18d1      	adds	r1, r2, r3
 8001a20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a24:	e9c1 2302 	strd	r2, r3, [r1, #8]
	prtList[num_operation].y_destination = coor_y;
 8001a28:	7efb      	ldrb	r3, [r7, #27]
 8001a2a:	015b      	lsls	r3, r3, #5
 8001a2c:	69fa      	ldr	r2, [r7, #28]
 8001a2e:	18d1      	adds	r1, r2, r3
 8001a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a34:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtList[num_operation].grad_Rotative = grad_turn;
 8001a38:	7efb      	ldrb	r3, [r7, #27]
 8001a3a:	015b      	lsls	r3, r3, #5
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	18d1      	adds	r1, r2, r3
 8001a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a44:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001a48:	bf00      	nop
 8001a4a:	3724      	adds	r7, #36	; 0x24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	0000      	movs	r0, r0
	...

08001a58 <change_position>:


//-----------------Funciones para definir los parametros de la poscion teorica--------------
void change_position(Parameters_Path_t *ptrParameterPath, int distance)
{
 8001a58:	b5b0      	push	{r4, r5, r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
	//Definimos la distancia
	 ptrParameterPath->line_Distance = distance;                  //[mm]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	641a      	str	r2, [r3, #64]	; 0x40
	//Calculamos la posicicion
	double pot_x = ptrParameterPath->line_Distance*cos((ptrParameterPath->rotative_Grad*M_PI)/180);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fd71 	bl	8000554 <__aeabi_i2d>
 8001a72:	4604      	mov	r4, r0
 8001a74:	460d      	mov	r5, r1
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fd6a 	bl	8000554 <__aeabi_i2d>
 8001a80:	a33b      	add	r3, pc, #236	; (adr r3, 8001b70 <change_position+0x118>)
 8001a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a86:	f7fe fdcf 	bl	8000628 <__aeabi_dmul>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4610      	mov	r0, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	4b38      	ldr	r3, [pc, #224]	; (8001b78 <change_position+0x120>)
 8001a98:	f7fe fef0 	bl	800087c <__aeabi_ddiv>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	ec43 2b17 	vmov	d7, r2, r3
 8001aa4:	eeb0 0a47 	vmov.f32	s0, s14
 8001aa8:	eef0 0a67 	vmov.f32	s1, s15
 8001aac:	f00a f920 	bl	800bcf0 <cos>
 8001ab0:	ec53 2b10 	vmov	r2, r3, d0
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	f7fe fdb6 	bl	8000628 <__aeabi_dmul>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double pot_y = ptrParameterPath->line_Distance*sin((ptrParameterPath->rotative_Grad*M_PI)/180);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fd43 	bl	8000554 <__aeabi_i2d>
 8001ace:	4604      	mov	r4, r0
 8001ad0:	460d      	mov	r5, r1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fd3c 	bl	8000554 <__aeabi_i2d>
 8001adc:	a324      	add	r3, pc, #144	; (adr r3, 8001b70 <change_position+0x118>)
 8001ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae2:	f7fe fda1 	bl	8000628 <__aeabi_dmul>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <change_position+0x120>)
 8001af4:	f7fe fec2 	bl	800087c <__aeabi_ddiv>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	ec43 2b17 	vmov	d7, r2, r3
 8001b00:	eeb0 0a47 	vmov.f32	s0, s14
 8001b04:	eef0 0a67 	vmov.f32	s1, s15
 8001b08:	f00a f946 	bl	800bd98 <sin>
 8001b0c:	ec53 2b10 	vmov	r2, r3, d0
 8001b10:	4620      	mov	r0, r4
 8001b12:	4629      	mov	r1, r5
 8001b14:	f7fe fd88 	bl	8000628 <__aeabi_dmul>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	//Guardamos la posicion del Goal como la posicion de Start
	ptrParameterPath->start_position_x = ptrParameterPath->goal_Position_x;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	ptrParameterPath->start_position_y = ptrParameterPath->goal_Position_y;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	//Definimos la nueva posicion de llegada
	ptrParameterPath->goal_Position_x += pot_x;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001b3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b42:	f7fe fbbb 	bl	80002bc <__adddf3>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrParameterPath->goal_Position_y += pot_y;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001b56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b5a:	f7fe fbaf 	bl	80002bc <__adddf3>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
}
 8001b68:	bf00      	nop
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b70:	54442d18 	.word	0x54442d18
 8001b74:	400921fb 	.word	0x400921fb
 8001b78:	40668000 	.word	0x40668000
 8001b7c:	00000000 	.word	0x00000000

08001b80 <change_coordinates_position>:

void change_coordinates_position(Parameters_Path_t *ptrParameterPath, double coor_x, double coor_y)
{
 8001b80:	b5b0      	push	{r4, r5, r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6178      	str	r0, [r7, #20]
 8001b88:	ed87 0b02 	vstr	d0, [r7, #8]
 8001b8c:	ed87 1b00 	vstr	d1, [r7]
	//Guardamos la posicion del Goal como la posicion de Start
	ptrParameterPath->start_position_x = ptrParameterPath->goal_Position_x;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001b96:	6979      	ldr	r1, [r7, #20]
 8001b98:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	ptrParameterPath->start_position_y = ptrParameterPath->goal_Position_y;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001ba2:	6979      	ldr	r1, [r7, #20]
 8001ba4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	//Definimos la nueva posicion de llegada
	ptrParameterPath->goal_Position_x = coor_x;
 8001ba8:	6979      	ldr	r1, [r7, #20]
 8001baa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bae:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrParameterPath->goal_Position_y = coor_y;
 8001bb2:	6979      	ldr	r1, [r7, #20]
 8001bb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bb8:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	//Definimos la distancia
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001bc8:	f7fe fb76 	bl	80002b8 <__aeabi_dsub>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	ec43 2b17 	vmov	d7, r2, r3
 8001bd4:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8001c50 <change_coordinates_position+0xd0>
 8001bd8:	eeb0 0a47 	vmov.f32	s0, s14
 8001bdc:	eef0 0a67 	vmov.f32	s1, s15
 8001be0:	f00a f968 	bl	800beb4 <pow>
 8001be4:	ec55 4b10 	vmov	r4, r5, d0
			pow(ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y,2));;                  //[mm]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001bf4:	f7fe fb60 	bl	80002b8 <__aeabi_dsub>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	ec43 2b17 	vmov	d7, r2, r3
 8001c00:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001c50 <change_coordinates_position+0xd0>
 8001c04:	eeb0 0a47 	vmov.f32	s0, s14
 8001c08:	eef0 0a67 	vmov.f32	s1, s15
 8001c0c:	f00a f952 	bl	800beb4 <pow>
 8001c10:	ec53 2b10 	vmov	r2, r3, d0
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 8001c14:	4620      	mov	r0, r4
 8001c16:	4629      	mov	r1, r5
 8001c18:	f7fe fb50 	bl	80002bc <__adddf3>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	ec43 2b17 	vmov	d7, r2, r3
 8001c24:	eeb0 0a47 	vmov.f32	s0, s14
 8001c28:	eef0 0a67 	vmov.f32	s1, s15
 8001c2c:	f00a f9b2 	bl	800bf94 <sqrt>
 8001c30:	ec53 2b10 	vmov	r2, r3, d0
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	f7fe ffa6 	bl	8000b88 <__aeabi_d2iz>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	641a      	str	r2, [r3, #64]	; 0x40

}
 8001c42:	bf00      	nop
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	f3af 8000 	nop.w
 8001c50:	00000000 	.word	0x00000000
 8001c54:	40000000 	.word	0x40000000

08001c58 <calculation_parameter_distance>:

//-------------Funcion para calcular los parametros del calculo de la distancia---------------
void calculation_parameter_distance(Parameters_Path_t  *ptrParameterPath)
{
 8001c58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c5c:	b08a      	sub	sp, #40	; 0x28
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6178      	str	r0, [r7, #20]
	//Calculo del vector director de la recta
	double a = ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x;
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001c6e:	f7fe fb23 	bl	80002b8 <__aeabi_dsub>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double b = ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001c86:	f7fe fb17 	bl	80002b8 <__aeabi_dsub>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//definicion de la magnitud de director
	ptrParameterPath->parametersStraight.magnitude_d = sqrt(pow(a,2)+pow(b,2));
 8001c92:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8001da0 <calculation_parameter_distance+0x148>
 8001c96:	ed97 0b08 	vldr	d0, [r7, #32]
 8001c9a:	f00a f90b 	bl	800beb4 <pow>
 8001c9e:	ec59 8b10 	vmov	r8, r9, d0
 8001ca2:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8001da0 <calculation_parameter_distance+0x148>
 8001ca6:	ed97 0b06 	vldr	d0, [r7, #24]
 8001caa:	f00a f903 	bl	800beb4 <pow>
 8001cae:	ec53 2b10 	vmov	r2, r3, d0
 8001cb2:	4640      	mov	r0, r8
 8001cb4:	4649      	mov	r1, r9
 8001cb6:	f7fe fb01 	bl	80002bc <__adddf3>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	ec43 2b17 	vmov	d7, r2, r3
 8001cc2:	eeb0 0a47 	vmov.f32	s0, s14
 8001cc6:	eef0 0a67 	vmov.f32	s1, s15
 8001cca:	f00a f963 	bl	800bf94 <sqrt>
 8001cce:	eeb0 7a40 	vmov.f32	s14, s0
 8001cd2:	eef0 7a60 	vmov.f32	s15, s1
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	ed83 7b00 	vstr	d7, [r3]
	//definicion de los parametros para el calculo de la magnitud de la proyeccion sobre la recta
	ptrParameterPath->parametersStraight.proy_A = a;
 8001cdc:	6979      	ldr	r1, [r7, #20]
 8001cde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ce2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrParameterPath->parametersStraight.proy_B = b;
 8001ce6:	6979      	ldr	r1, [r7, #20]
 8001ce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cec:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrParameterPath->parametersStraight.proy_C = -1*a*ptrParameterPath->start_position_x - b*ptrParameterPath->start_position_y;
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001d02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d06:	f7fe fc8f 	bl	8000628 <__aeabi_dmul>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4690      	mov	r8, r2
 8001d10:	4699      	mov	r9, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001d18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d1c:	f7fe fc84 	bl	8000628 <__aeabi_dmul>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4640      	mov	r0, r8
 8001d26:	4649      	mov	r1, r9
 8001d28:	f7fe fac6 	bl	80002b8 <__aeabi_dsub>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	6979      	ldr	r1, [r7, #20]
 8001d32:	e9c1 2306 	strd	r2, r3, [r1, #24]
	//definicion de los parametros para el calculo de la distancia del punto a la recta
	ptrParameterPath->parametersStraight.dis_point_A = b;
 8001d36:	6979      	ldr	r1, [r7, #20]
 8001d38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d3c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrParameterPath->parametersStraight.dis_point_B = -1*a;
 8001d40:	6a3c      	ldr	r4, [r7, #32]
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	ptrParameterPath->parametersStraight.dis_point_C = -1*b*ptrParameterPath->start_position_x + a*ptrParameterPath->start_position_y;
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	603b      	str	r3, [r7, #0]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001d60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d64:	f7fe fc60 	bl	8000628 <__aeabi_dmul>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4614      	mov	r4, r2
 8001d6e:	461d      	mov	r5, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001d76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d7a:	f7fe fc55 	bl	8000628 <__aeabi_dmul>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4620      	mov	r0, r4
 8001d84:	4629      	mov	r1, r5
 8001d86:	f7fe fa99 	bl	80002bc <__adddf3>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	6979      	ldr	r1, [r7, #20]
 8001d90:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8001d94:	bf00      	nop
 8001d96:	3728      	adds	r7, #40	; 0x28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d9e:	bf00      	nop
 8001da0:	00000000 	.word	0x00000000
 8001da4:	40000000 	.word	0x40000000

08001da8 <distance_to_straight_line>:

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double position_x, double position_y)
{
 8001da8:	b5b0      	push	{r4, r5, r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6178      	str	r0, [r7, #20]
 8001db0:	ed87 0b02 	vstr	d0, [r7, #8]
 8001db4:	ed87 1b00 	vstr	d1, [r7]
	//Calculo
	double distance = -1*((ptrParameterPath->parametersStraight.dis_point_A*position_x + ptrParameterPath->parametersStraight.dis_point_B*position_y
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001dbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001dc2:	f7fe fc31 	bl	8000628 <__aeabi_dmul>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4614      	mov	r4, r2
 8001dcc:	461d      	mov	r5, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dd8:	f7fe fc26 	bl	8000628 <__aeabi_dmul>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4620      	mov	r0, r4
 8001de2:	4629      	mov	r1, r5
 8001de4:	f7fe fa6a 	bl	80002bc <__adddf3>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
			+ ptrParameterPath->parametersStraight.dis_point_C)/ptrParameterPath->parametersStraight.magnitude_d);
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001df6:	f7fe fa61 	bl	80002bc <__adddf3>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4610      	mov	r0, r2
 8001e00:	4619      	mov	r1, r3
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e08:	f7fe fd38 	bl	800087c <__aeabi_ddiv>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->parametersStraight.dis_point_A*position_x + ptrParameterPath->parametersStraight.dis_point_B*position_y
 8001e10:	4611      	mov	r1, r2
 8001e12:	61b9      	str	r1, [r7, #24]
 8001e14:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e18:	61fb      	str	r3, [r7, #28]
	//Retornar
	return distance;
 8001e1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e1e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e22:	eeb0 0a47 	vmov.f32	s0, s14
 8001e26:	eef0 0a67 	vmov.f32	s1, s15
 8001e2a:	3720      	adds	r7, #32
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bdb0      	pop	{r4, r5, r7, pc}

08001e30 <distance_traveled>:

double distance_traveled(Parameters_Path_t  *ptrParameterPath, double position_x, double position_y)
{
 8001e30:	b5b0      	push	{r4, r5, r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6178      	str	r0, [r7, #20]
 8001e38:	ed87 0b02 	vstr	d0, [r7, #8]
 8001e3c:	ed87 1b00 	vstr	d1, [r7]
	//Calculo
	double distance_Tra = (ptrParameterPath->parametersStraight.proy_A*position_x + ptrParameterPath->parametersStraight.proy_B*position_y
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e4a:	f7fe fbed 	bl	8000628 <__aeabi_dmul>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4614      	mov	r4, r2
 8001e54:	461d      	mov	r5, r3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001e5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e60:	f7fe fbe2 	bl	8000628 <__aeabi_dmul>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4620      	mov	r0, r4
 8001e6a:	4629      	mov	r1, r5
 8001e6c:	f7fe fa26 	bl	80002bc <__adddf3>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
			+ ptrParameterPath->parametersStraight.proy_C)/ptrParameterPath->parametersStraight.magnitude_d;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001e7e:	f7fe fa1d 	bl	80002bc <__adddf3>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
	double distance_Tra = (ptrParameterPath->parametersStraight.proy_A*position_x + ptrParameterPath->parametersStraight.proy_B*position_y
 8001e90:	f7fe fcf4 	bl	800087c <__aeabi_ddiv>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Retornar
	return distance_Tra;
 8001e9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ea0:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ea4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ea8:	eef0 0a67 	vmov.f32	s1, s15
 8001eac:	3720      	adds	r7, #32
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb2:	0000      	movs	r0, r0
 8001eb4:	0000      	movs	r0, r0
	...

08001eb8 <calculed_ang_turn>:


//------------------------------Funciones auxiliares-----------------------------

double calculed_ang_turn(double vector_a[2], double vector_b[2])
{
 8001eb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ebc:	b08a      	sub	sp, #40	; 0x28
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	6039      	str	r1, [r7, #0]
    //Calculo de los diferentes elementos
    double dot = vector_a[0]*vector_b[1]-vector_b[0]*vector_b[1];
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	3308      	adds	r3, #8
 8001ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed2:	f7fe fba9 	bl	8000628 <__aeabi_dmul>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4690      	mov	r8, r2
 8001edc:	4699      	mov	r9, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	3308      	adds	r3, #8
 8001ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eec:	f7fe fb9c 	bl	8000628 <__aeabi_dmul>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4640      	mov	r0, r8
 8001ef6:	4649      	mov	r1, r9
 8001ef8:	f7fe f9de 	bl	80002b8 <__aeabi_dsub>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double magvector_a = sqrt(pow(vector_a[0],2)+pow(vector_a[1],2));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	ed93 7b00 	vldr	d7, [r3]
 8001f0a:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 8002088 <calculed_ang_turn+0x1d0>
 8001f0e:	eeb0 0a47 	vmov.f32	s0, s14
 8001f12:	eef0 0a67 	vmov.f32	s1, s15
 8001f16:	f009 ffcd 	bl	800beb4 <pow>
 8001f1a:	ec59 8b10 	vmov	r8, r9, d0
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3308      	adds	r3, #8
 8001f22:	ed93 7b00 	vldr	d7, [r3]
 8001f26:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8002088 <calculed_ang_turn+0x1d0>
 8001f2a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f2e:	eef0 0a67 	vmov.f32	s1, s15
 8001f32:	f009 ffbf 	bl	800beb4 <pow>
 8001f36:	ec53 2b10 	vmov	r2, r3, d0
 8001f3a:	4640      	mov	r0, r8
 8001f3c:	4649      	mov	r1, r9
 8001f3e:	f7fe f9bd 	bl	80002bc <__adddf3>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	ec43 2b17 	vmov	d7, r2, r3
 8001f4a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f4e:	eef0 0a67 	vmov.f32	s1, s15
 8001f52:	f00a f81f 	bl	800bf94 <sqrt>
 8001f56:	ed87 0b04 	vstr	d0, [r7, #16]
    double magvector_b = sqrt(pow(vector_b[0],2)+pow(vector_b[1],2));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	ed93 7b00 	vldr	d7, [r3]
 8001f60:	ed9f 1b49 	vldr	d1, [pc, #292]	; 8002088 <calculed_ang_turn+0x1d0>
 8001f64:	eeb0 0a47 	vmov.f32	s0, s14
 8001f68:	eef0 0a67 	vmov.f32	s1, s15
 8001f6c:	f009 ffa2 	bl	800beb4 <pow>
 8001f70:	ec59 8b10 	vmov	r8, r9, d0
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	3308      	adds	r3, #8
 8001f78:	ed93 7b00 	vldr	d7, [r3]
 8001f7c:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8002088 <calculed_ang_turn+0x1d0>
 8001f80:	eeb0 0a47 	vmov.f32	s0, s14
 8001f84:	eef0 0a67 	vmov.f32	s1, s15
 8001f88:	f009 ff94 	bl	800beb4 <pow>
 8001f8c:	ec53 2b10 	vmov	r2, r3, d0
 8001f90:	4640      	mov	r0, r8
 8001f92:	4649      	mov	r1, r9
 8001f94:	f7fe f992 	bl	80002bc <__adddf3>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	ec43 2b17 	vmov	d7, r2, r3
 8001fa0:	eeb0 0a47 	vmov.f32	s0, s14
 8001fa4:	eef0 0a67 	vmov.f32	s1, s15
 8001fa8:	f009 fff4 	bl	800bf94 <sqrt>
 8001fac:	ed87 0b02 	vstr	d0, [r7, #8]
    double ang_between_vector = acos((vector_a[0]*vector_b[0]+vector_a[1]*vector_b[1])/(magvector_b*magvector_a));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbc:	f7fe fb34 	bl	8000628 <__aeabi_dmul>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4690      	mov	r8, r2
 8001fc6:	4699      	mov	r9, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3308      	adds	r3, #8
 8001fcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	3308      	adds	r3, #8
 8001fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd8:	f7fe fb26 	bl	8000628 <__aeabi_dmul>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4640      	mov	r0, r8
 8001fe2:	4649      	mov	r1, r9
 8001fe4:	f7fe f96a 	bl	80002bc <__adddf3>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4690      	mov	r8, r2
 8001fee:	4699      	mov	r9, r3
 8001ff0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ff4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ff8:	f7fe fb16 	bl	8000628 <__aeabi_dmul>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4640      	mov	r0, r8
 8002002:	4649      	mov	r1, r9
 8002004:	f7fe fc3a 	bl	800087c <__aeabi_ddiv>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	ec43 2b17 	vmov	d7, r2, r3
 8002010:	eeb0 0a47 	vmov.f32	s0, s14
 8002014:	eef0 0a67 	vmov.f32	s1, s15
 8002018:	f009 ff16 	bl	800be48 <acos>
 800201c:	ed87 0b08 	vstr	d0, [r7, #32]
    //conversion a grados
    ang_between_vector = (ang_between_vector*180)/M_PI;
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	4b1c      	ldr	r3, [pc, #112]	; (8002098 <calculed_ang_turn+0x1e0>)
 8002026:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800202a:	f7fe fafd 	bl	8000628 <__aeabi_dmul>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	a316      	add	r3, pc, #88	; (adr r3, 8002090 <calculed_ang_turn+0x1d8>)
 8002038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203c:	f7fe fc1e 	bl	800087c <__aeabi_ddiv>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	e9c7 2308 	strd	r2, r3, [r7, #32]
    //agregamos la direccion de giro
    if(dot<0){ ang_between_vector = -ang_between_vector;}
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	f04f 0300 	mov.w	r3, #0
 8002050:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002054:	f7fe fd5a 	bl	8000b0c <__aeabi_dcmplt>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d005      	beq.n	800206a <calculed_ang_turn+0x1b2>
 800205e:	6a3c      	ldr	r4, [r7, #32]
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002066:	e9c7 4508 	strd	r4, r5, [r7, #32]
    //Retornar valor
    return ang_between_vector;
 800206a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800206e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002072:	eeb0 0a47 	vmov.f32	s0, s14
 8002076:	eef0 0a67 	vmov.f32	s1, s15
 800207a:	3728      	adds	r7, #40	; 0x28
 800207c:	46bd      	mov	sp, r7
 800207e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002082:	bf00      	nop
 8002084:	f3af 8000 	nop.w
 8002088:	00000000 	.word	0x00000000
 800208c:	40000000 	.word	0x40000000
 8002090:	54442d18 	.word	0x54442d18
 8002094:	400921fb 	.word	0x400921fb
 8002098:	40668000 	.word	0x40668000
 800209c:	00000000 	.word	0x00000000

080020a0 <main>:
uint8_t counterRecepcion = 0;                    //Variable para la posicion del arrelgo
char bufferRecepcion[64] = {0};                  //Arreglo que almacena el comando ingresado


int main(void)
{
 80020a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020a4:	b088      	sub	sp, #32
 80020a6:	af02      	add	r7, sp, #8
	//Definicion de variables
	float distance_recta = 0;
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
	float sampling_timer = 0;
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
	float distance_c = 0;
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]

	//-----------------------Configuracion inicial del sistema---------------------------------
	//Incrementamos la velocidad de reloj del sistema
	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 80020ba:	2364      	movs	r3, #100	; 0x64
 80020bc:	72fb      	strb	r3, [r7, #11]
	configPLL(clock);
 80020be:	7afb      	ldrb	r3, [r7, #11]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f003 fbdf 	bl	8005884 <configPLL>
	//Realizamos la configuracuion inicial
	int_Hardware();
 80020c6:	f000 faf7 	bl	80026b8 <int_Hardware>
	//Activamos el Systick
	config_SysTick_ms();
 80020ca:	f004 f805 	bl	80060d8 <config_SysTick_ms>
	//Activamos el punto flotante por medio del registro especifico
	SCB->CPACR |= 0xF <<20;
 80020ce:	4b68      	ldr	r3, [pc, #416]	; (8002270 <main+0x1d0>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d4:	4a66      	ldr	r2, [pc, #408]	; (8002270 <main+0x1d0>)
 80020d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Definimos la configuracion inicail del MCO1
	int_MCO2();
 80020de:	f000 fcb9 	bl	8002a54 <int_MCO2>

	//-----------------------Configuracion inicial de los Motores---------------------------------
	//Cargar configuracion de los motores
	GPIO_writePin (&handler_GPIO_MotorR_IN, SET);
 80020e2:	2101      	movs	r1, #1
 80020e4:	4863      	ldr	r0, [pc, #396]	; (8002274 <main+0x1d4>)
 80020e6:	f003 f983 	bl	80053f0 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_IN, SET);
 80020ea:	2101      	movs	r1, #1
 80020ec:	4862      	ldr	r0, [pc, #392]	; (8002278 <main+0x1d8>)
 80020ee:	f003 f97f 	bl	80053f0 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorR_EN, SET);
 80020f2:	2101      	movs	r1, #1
 80020f4:	4861      	ldr	r0, [pc, #388]	; (800227c <main+0x1dc>)
 80020f6:	f003 f97b 	bl	80053f0 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_EN, SET);
 80020fa:	2101      	movs	r1, #1
 80020fc:	4860      	ldr	r0, [pc, #384]	; (8002280 <main+0x1e0>)
 80020fe:	f003 f977 	bl	80053f0 <GPIO_writePin>
	int_Config_Motor();
 8002102:	f000 fcc5 	bl	8002a90 <int_Config_Motor>
	//Definimos el motor derecho para ser ejecutado
	handler_Motor_Execute = &handler_Motor_R;
 8002106:	4b5f      	ldr	r3, [pc, #380]	; (8002284 <main+0x1e4>)
 8002108:	4a5f      	ldr	r2, [pc, #380]	; (8002288 <main+0x1e8>)
 800210a:	601a      	str	r2, [r3, #0]
	//Calculo inicial de parametro
	cm_L = ((M_PI*DL)/(100*Ce));  //[mm/cuentas]
 800210c:	4b5f      	ldr	r3, [pc, #380]	; (800228c <main+0x1ec>)
 800210e:	4a60      	ldr	r2, [pc, #384]	; (8002290 <main+0x1f0>)
 8002110:	601a      	str	r2, [r3, #0]
	cm_R =	((M_PI*DR)/(100*Ce));  //[mm/cuentas]
 8002112:	4b60      	ldr	r3, [pc, #384]	; (8002294 <main+0x1f4>)
 8002114:	4a60      	ldr	r2, [pc, #384]	; (8002298 <main+0x1f8>)
 8002116:	601a      	str	r2, [r3, #0]
	//Calculamos el setpoint
	velSetPoint = (0.00169*duttySetPoint + 0.0619);
 8002118:	4b60      	ldr	r3, [pc, #384]	; (800229c <main+0x1fc>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fa19 	bl	8000554 <__aeabi_i2d>
 8002122:	a34f      	add	r3, pc, #316	; (adr r3, 8002260 <main+0x1c0>)
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	f7fe fa7e 	bl	8000628 <__aeabi_dmul>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	a34c      	add	r3, pc, #304	; (adr r3, 8002268 <main+0x1c8>)
 8002136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213a:	f7fe f8bf 	bl	80002bc <__adddf3>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	f7fe fd67 	bl	8000c18 <__aeabi_d2f>
 800214a:	4603      	mov	r3, r0
 800214c:	4a54      	ldr	r2, [pc, #336]	; (80022a0 <main+0x200>)
 800214e:	6013      	str	r3, [r2, #0]

	//--------------------------Configuramos inicia el MPU----------------------
	//Configuracion MPU
	int_MPU();
 8002150:	f000 fc8a 	bl	8002a68 <int_MPU>
	//Calibracion del eje Z del giroscopio
	gyro_offset = calibrationMPU(&handler_MPUAccel_MPU6050, CAL_GYRO_Z);
 8002154:	2105      	movs	r1, #5
 8002156:	4853      	ldr	r0, [pc, #332]	; (80022a4 <main+0x204>)
 8002158:	f7ff fae6 	bl	8001728 <calibrationMPU>
 800215c:	eef0 7a40 	vmov.f32	s15, s0
 8002160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002164:	ee17 3a90 	vmov	r3, s15
 8002168:	b21a      	sxth	r2, r3
 800216a:	4b4f      	ldr	r3, [pc, #316]	; (80022a8 <main+0x208>)
 800216c:	801a      	strh	r2, [r3, #0]


	while(1)
	{
		//--------------------Comandos-----------------------
		if(commandComplete==1)
 800216e:	4b4f      	ldr	r3, [pc, #316]	; (80022ac <main+0x20c>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d106      	bne.n	8002184 <main+0xe4>
		{
			runCommand(bufferRecepcion);
 8002176:	484e      	ldr	r0, [pc, #312]	; (80022b0 <main+0x210>)
 8002178:	f000 ff4e 	bl	8003018 <runCommand>
			//Reniciamos la variable
			commandComplete=0;
 800217c:	4b4b      	ldr	r3, [pc, #300]	; (80022ac <main+0x20c>)
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
 8002182:	e000      	b.n	8002186 <main+0xe6>
		}
		else
		{ __NOP(); }
 8002184:	bf00      	nop

		//------------------Accion de seleccion de operacion---------------------
		if(flag_multioperation == 1)
 8002186:	4b4b      	ldr	r3, [pc, #300]	; (80022b4 <main+0x214>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d161      	bne.n	8002252 <main+0x1b2>
		{
			//Verificamos el modo de operacion
			if(flag_mode == 0)
 800218e:	4b4a      	ldr	r3, [pc, #296]	; (80022b8 <main+0x218>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d15f      	bne.n	8002256 <main+0x1b6>
			{
				//Delay para espera la finalizacion del modo
				delay_ms(500);
 8002196:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800219a:	f003 ffe5 	bl	8006168 <delay_ms>
				//Ejecucion de operacion
				switch(list_operation[counting_operation].operacion)
 800219e:	4b47      	ldr	r3, [pc, #284]	; (80022bc <main+0x21c>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	4a47      	ldr	r2, [pc, #284]	; (80022c0 <main+0x220>)
 80021a4:	015b      	lsls	r3, r3, #5
 80021a6:	4413      	add	r3, r2
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d039      	beq.n	8002222 <main+0x182>
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	f300 808e 	bgt.w	80022d0 <main+0x230>
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <main+0x11e>
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d00b      	beq.n	80021d4 <main+0x134>
						turn_itself(list_operation[counting_operation].grad_Rotative);
						//Aumentamos valor del contador
						counting_operation ++;
						break;
					}
					default:{ break; }
 80021bc:	e088      	b.n	80022d0 <main+0x230>
						flag_multioperation = 0;
 80021be:	4b3d      	ldr	r3, [pc, #244]	; (80022b4 <main+0x214>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
						counting_operation = 0;
 80021c4:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <main+0x21c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
						writeMsgForTXE(&handler_USART_USB, "Operaciones finalizadas");
 80021ca:	493e      	ldr	r1, [pc, #248]	; (80022c4 <main+0x224>)
 80021cc:	483e      	ldr	r0, [pc, #248]	; (80022c8 <main+0x228>)
 80021ce:	f004 faab 	bl	8006728 <writeMsgForTXE>
						break;
 80021d2:	e07e      	b.n	80022d2 <main+0x232>
						change_coordinates_position(&parameter_Path_Robot, list_operation[counting_operation].x_destination, list_operation[counting_operation].y_destination);
 80021d4:	4b39      	ldr	r3, [pc, #228]	; (80022bc <main+0x21c>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	4a39      	ldr	r2, [pc, #228]	; (80022c0 <main+0x220>)
 80021da:	015b      	lsls	r3, r3, #5
 80021dc:	4413      	add	r3, r2
 80021de:	3308      	adds	r3, #8
 80021e0:	ed93 7b00 	vldr	d7, [r3]
 80021e4:	4b35      	ldr	r3, [pc, #212]	; (80022bc <main+0x21c>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	4a35      	ldr	r2, [pc, #212]	; (80022c0 <main+0x220>)
 80021ea:	015b      	lsls	r3, r3, #5
 80021ec:	4413      	add	r3, r2
 80021ee:	3310      	adds	r3, #16
 80021f0:	ed93 6b00 	vldr	d6, [r3]
 80021f4:	eeb0 1a46 	vmov.f32	s2, s12
 80021f8:	eef0 1a66 	vmov.f32	s3, s13
 80021fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002200:	eef0 0a67 	vmov.f32	s1, s15
 8002204:	4831      	ldr	r0, [pc, #196]	; (80022cc <main+0x22c>)
 8002206:	f7ff fcbb 	bl	8001b80 <change_coordinates_position>
						straight_line(duttySetPoint);
 800220a:	4b24      	ldr	r3, [pc, #144]	; (800229c <main+0x1fc>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f001 f85e 	bl	80032d0 <straight_line>
						counting_operation++;
 8002214:	4b29      	ldr	r3, [pc, #164]	; (80022bc <main+0x21c>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	3301      	adds	r3, #1
 800221a:	b2da      	uxtb	r2, r3
 800221c:	4b27      	ldr	r3, [pc, #156]	; (80022bc <main+0x21c>)
 800221e:	701a      	strb	r2, [r3, #0]
						break;
 8002220:	e057      	b.n	80022d2 <main+0x232>
						turn_itself(list_operation[counting_operation].grad_Rotative);
 8002222:	4b26      	ldr	r3, [pc, #152]	; (80022bc <main+0x21c>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	4a26      	ldr	r2, [pc, #152]	; (80022c0 <main+0x220>)
 8002228:	015b      	lsls	r3, r3, #5
 800222a:	4413      	add	r3, r2
 800222c:	3318      	adds	r3, #24
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	f7fe fca7 	bl	8000b88 <__aeabi_d2iz>
 800223a:	4603      	mov	r3, r0
 800223c:	b21b      	sxth	r3, r3
 800223e:	4618      	mov	r0, r3
 8002240:	f001 f94a 	bl	80034d8 <turn_itself>
						counting_operation ++;
 8002244:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <main+0x21c>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	3301      	adds	r3, #1
 800224a:	b2da      	uxtb	r2, r3
 800224c:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <main+0x21c>)
 800224e:	701a      	strb	r2, [r3, #0]
						break;
 8002250:	e03f      	b.n	80022d2 <main+0x232>
				}

			}
		}
		else{ __NOP(); }
 8002252:	bf00      	nop
 8002254:	e03d      	b.n	80022d2 <main+0x232>
			}
 8002256:	bf00      	nop
 8002258:	e03b      	b.n	80022d2 <main+0x232>
 800225a:	bf00      	nop
 800225c:	f3af 8000 	nop.w
 8002260:	aebc408e 	.word	0xaebc408e
 8002264:	3f5bb05f 	.word	0x3f5bb05f
 8002268:	573eab36 	.word	0x573eab36
 800226c:	3fafb15b 	.word	0x3fafb15b
 8002270:	e000ed00 	.word	0xe000ed00
 8002274:	200002e4 	.word	0x200002e4
 8002278:	20000358 	.word	0x20000358
 800227c:	200002f0 	.word	0x200002f0
 8002280:	20000364 	.word	0x20000364
 8002284:	200008a8 	.word	0x200008a8
 8002288:	20000308 	.word	0x20000308
 800228c:	200004d0 	.word	0x200004d0
 8002290:	40105fa7 	.word	0x40105fa7
 8002294:	200004d4 	.word	0x200004d4
 8002298:	400facee 	.word	0x400facee
 800229c:	20000008 	.word	0x20000008
 80022a0:	200008b8 	.word	0x200008b8
 80022a4:	2000026c 	.word	0x2000026c
 80022a8:	200003e0 	.word	0x200003e0
 80022ac:	20000009 	.word	0x20000009
 80022b0:	200008c8 	.word	0x200008c8
 80022b4:	200008ac 	.word	0x200008ac
 80022b8:	200008ae 	.word	0x200008ae
 80022bc:	200008af 	.word	0x200008af
 80022c0:	200004e8 	.word	0x200004e8
 80022c4:	0800e5c8 	.word	0x0800e5c8
 80022c8:	2000028c 	.word	0x2000028c
 80022cc:	20000400 	.word	0x20000400
					default:{ break; }
 80022d0:	bf00      	nop

		//------------------Accion especifica del modo---------------------
		if(flag_action == 1)
 80022d2:	4bb2      	ldr	r3, [pc, #712]	; (800259c <main+0x4fc>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	f040 8186 	bne.w	80025e8 <main+0x548>
		{
			//Verificamos el modo de operacion
			if(flag_mode == 1)
 80022dc:	4bb0      	ldr	r3, [pc, #704]	; (80025a0 <main+0x500>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	f040 8156 	bne.w	8002592 <main+0x4f2>
			{
				//Conversion de tiempo
				sampling_timer = ((float) time_accion/1000);
 80022e6:	4baf      	ldr	r3, [pc, #700]	; (80025a4 <main+0x504>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	ee07 3a90 	vmov	s15, r3
 80022ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022f2:	eddf 6aad 	vldr	s13, [pc, #692]	; 80025a8 <main+0x508>
 80022f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022fa:	edc7 7a04 	vstr	s15, [r7, #16]
				//Calculo odometria
				distance_c = (handler_Motor_R.parametersMotor.distance+handler_Motor_L.parametersMotor.distance)/2;  	//[mm]
 80022fe:	4bab      	ldr	r3, [pc, #684]	; (80025ac <main+0x50c>)
 8002300:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002304:	4baa      	ldr	r3, [pc, #680]	; (80025b0 <main+0x510>)
 8002306:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800230a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800230e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002312:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002316:	edc7 7a03 	vstr	s15, [r7, #12]
				parameter_Posicion_Robot.xr_position += distance_c*(cos(parameter_Posicion_Robot.phi_relativo));        //[mm]
 800231a:	4ba6      	ldr	r3, [pc, #664]	; (80025b4 <main+0x514>)
 800231c:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f7fe f929 	bl	8000578 <__aeabi_f2d>
 8002326:	e9c7 0100 	strd	r0, r1, [r7]
 800232a:	4ba2      	ldr	r3, [pc, #648]	; (80025b4 <main+0x514>)
 800232c:	ed93 7b02 	vldr	d7, [r3, #8]
 8002330:	eeb0 0a47 	vmov.f32	s0, s14
 8002334:	eef0 0a67 	vmov.f32	s1, s15
 8002338:	f009 fcda 	bl	800bcf0 <cos>
 800233c:	ec53 2b10 	vmov	r2, r3, d0
 8002340:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002344:	f7fe f970 	bl	8000628 <__aeabi_dmul>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4650      	mov	r0, sl
 800234e:	4659      	mov	r1, fp
 8002350:	f7fd ffb4 	bl	80002bc <__adddf3>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4996      	ldr	r1, [pc, #600]	; (80025b4 <main+0x514>)
 800235a:	e9c1 2306 	strd	r2, r3, [r1, #24]
				parameter_Posicion_Robot.yr_position += distance_c*(sin(parameter_Posicion_Robot.phi_relativo));       //[mm]
 800235e:	4b95      	ldr	r3, [pc, #596]	; (80025b4 <main+0x514>)
 8002360:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f7fe f907 	bl	8000578 <__aeabi_f2d>
 800236a:	e9c7 0100 	strd	r0, r1, [r7]
 800236e:	4b91      	ldr	r3, [pc, #580]	; (80025b4 <main+0x514>)
 8002370:	ed93 7b02 	vldr	d7, [r3, #8]
 8002374:	eeb0 0a47 	vmov.f32	s0, s14
 8002378:	eef0 0a67 	vmov.f32	s1, s15
 800237c:	f009 fd0c 	bl	800bd98 <sin>
 8002380:	ec53 2b10 	vmov	r2, r3, d0
 8002384:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002388:	f7fe f94e 	bl	8000628 <__aeabi_dmul>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4650      	mov	r0, sl
 8002392:	4659      	mov	r1, fp
 8002394:	f7fd ff92 	bl	80002bc <__adddf3>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4985      	ldr	r1, [pc, #532]	; (80025b4 <main+0x514>)
 800239e:	e9c1 2308 	strd	r2, r3, [r1, #32]
				//Paso de c.relativa a c.globales
				parameter_Posicion_Robot.xg_position = parameter_Posicion_Robot.xg_position_inicial + parameter_Posicion_Robot.xr_position*cos_cal - parameter_Posicion_Robot.yr_position*sin_cal;
 80023a2:	4b84      	ldr	r3, [pc, #528]	; (80025b4 <main+0x514>)
 80023a4:	e9d3 ab0a 	ldrd	sl, fp, [r3, #40]	; 0x28
 80023a8:	4b82      	ldr	r3, [pc, #520]	; (80025b4 <main+0x514>)
 80023aa:	ed93 7b06 	vldr	d7, [r3, #24]
 80023ae:	ed87 7b00 	vstr	d7, [r7]
 80023b2:	4b81      	ldr	r3, [pc, #516]	; (80025b8 <main+0x518>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe f8de 	bl	8000578 <__aeabi_f2d>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023c4:	f7fe f930 	bl	8000628 <__aeabi_dmul>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4650      	mov	r0, sl
 80023ce:	4659      	mov	r1, fp
 80023d0:	f7fd ff74 	bl	80002bc <__adddf3>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	e9c7 2300 	strd	r2, r3, [r7]
 80023dc:	4b75      	ldr	r3, [pc, #468]	; (80025b4 <main+0x514>)
 80023de:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 80023e2:	4b76      	ldr	r3, [pc, #472]	; (80025bc <main+0x51c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe f8c6 	bl	8000578 <__aeabi_f2d>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4650      	mov	r0, sl
 80023f2:	4659      	mov	r1, fp
 80023f4:	f7fe f918 	bl	8000628 <__aeabi_dmul>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002400:	f7fd ff5a 	bl	80002b8 <__aeabi_dsub>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	496a      	ldr	r1, [pc, #424]	; (80025b4 <main+0x514>)
 800240a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				parameter_Posicion_Robot.yg_position = parameter_Posicion_Robot.yg_position_inicial + parameter_Posicion_Robot.xr_position*sin_cal + parameter_Posicion_Robot.yr_position*cos_cal;
 800240e:	4b69      	ldr	r3, [pc, #420]	; (80025b4 <main+0x514>)
 8002410:	e9d3 ab0c 	ldrd	sl, fp, [r3, #48]	; 0x30
 8002414:	4b67      	ldr	r3, [pc, #412]	; (80025b4 <main+0x514>)
 8002416:	ed93 7b06 	vldr	d7, [r3, #24]
 800241a:	ed87 7b00 	vstr	d7, [r7]
 800241e:	4b67      	ldr	r3, [pc, #412]	; (80025bc <main+0x51c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe f8a8 	bl	8000578 <__aeabi_f2d>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002430:	f7fe f8fa 	bl	8000628 <__aeabi_dmul>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4650      	mov	r0, sl
 800243a:	4659      	mov	r1, fp
 800243c:	f7fd ff3e 	bl	80002bc <__adddf3>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	e9c7 2300 	strd	r2, r3, [r7]
 8002448:	4b5a      	ldr	r3, [pc, #360]	; (80025b4 <main+0x514>)
 800244a:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 800244e:	4b5a      	ldr	r3, [pc, #360]	; (80025b8 <main+0x518>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe f890 	bl	8000578 <__aeabi_f2d>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4650      	mov	r0, sl
 800245e:	4659      	mov	r1, fp
 8002460:	f7fe f8e2 	bl	8000628 <__aeabi_dmul>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	e9d7 0100 	ldrd	r0, r1, [r7]
 800246c:	f7fd ff26 	bl	80002bc <__adddf3>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	494f      	ldr	r1, [pc, #316]	; (80025b4 <main+0x514>)
 8002476:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
				//Convertimos el valor y imprimemos
				sprintf(bufferMsg,"&%#.4f\t%#.4f\n", parameter_Posicion_Robot.xg_position , parameter_Posicion_Robot.yg_position);
 800247a:	4b4e      	ldr	r3, [pc, #312]	; (80025b4 <main+0x514>)
 800247c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002480:	4b4c      	ldr	r3, [pc, #304]	; (80025b4 <main+0x514>)
 8002482:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002486:	e9cd 2300 	strd	r2, r3, [sp]
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	494c      	ldr	r1, [pc, #304]	; (80025c0 <main+0x520>)
 8002490:	484c      	ldr	r0, [pc, #304]	; (80025c4 <main+0x524>)
 8002492:	f005 fa03 	bl	800789c <siprintf>
				writeMsgForTXE(&handler_USART_USB, bufferMsg);
 8002496:	494b      	ldr	r1, [pc, #300]	; (80025c4 <main+0x524>)
 8002498:	484b      	ldr	r0, [pc, #300]	; (80025c8 <main+0x528>)
 800249a:	f004 f945 	bl	8006728 <writeMsgForTXE>
				//Control PID para la distancia
				distance_recta = (distance_to_straight_line(&parameter_Path_Robot, parameter_Posicion_Robot.xg_position, parameter_Posicion_Robot.yg_position))/1000;
 800249e:	4b45      	ldr	r3, [pc, #276]	; (80025b4 <main+0x514>)
 80024a0:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80024a4:	4b43      	ldr	r3, [pc, #268]	; (80025b4 <main+0x514>)
 80024a6:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80024aa:	eeb0 1a46 	vmov.f32	s2, s12
 80024ae:	eef0 1a66 	vmov.f32	s3, s13
 80024b2:	eeb0 0a47 	vmov.f32	s0, s14
 80024b6:	eef0 0a67 	vmov.f32	s1, s15
 80024ba:	4844      	ldr	r0, [pc, #272]	; (80025cc <main+0x52c>)
 80024bc:	f7ff fc74 	bl	8001da8 <distance_to_straight_line>
 80024c0:	ec51 0b10 	vmov	r0, r1, d0
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	4b41      	ldr	r3, [pc, #260]	; (80025d0 <main+0x530>)
 80024ca:	f7fe f9d7 	bl	800087c <__aeabi_ddiv>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	f7fe fb9f 	bl	8000c18 <__aeabi_d2f>
 80024da:	4603      	mov	r3, r0
 80024dc:	617b      	str	r3, [r7, #20]
				PID_simple(&parameter_PID_distace, sampling_timer, 0,  distance_recta);
 80024de:	ed97 1a05 	vldr	s2, [r7, #20]
 80024e2:	eddf 0a3c 	vldr	s1, [pc, #240]	; 80025d4 <main+0x534>
 80024e6:	ed97 0a04 	vldr	s0, [r7, #16]
 80024ea:	483b      	ldr	r0, [pc, #236]	; (80025d8 <main+0x538>)
 80024ec:	f001 f99f 	bl	800382e <PID_simple>
				//Aplicacndo correcion
				vel_Setpoint_L = velSetPoint - parameter_PID_distace.u;
 80024f0:	4b3a      	ldr	r3, [pc, #232]	; (80025dc <main+0x53c>)
 80024f2:	ed93 7a00 	vldr	s14, [r3]
 80024f6:	4b38      	ldr	r3, [pc, #224]	; (80025d8 <main+0x538>)
 80024f8:	edd3 7a00 	vldr	s15, [r3]
 80024fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002500:	4b37      	ldr	r3, [pc, #220]	; (80025e0 <main+0x540>)
 8002502:	edc3 7a00 	vstr	s15, [r3]
				vel_Setpoint_R = velSetPoint + parameter_PID_distace.u;
 8002506:	4b34      	ldr	r3, [pc, #208]	; (80025d8 <main+0x538>)
 8002508:	ed93 7a00 	vldr	s14, [r3]
 800250c:	4b33      	ldr	r3, [pc, #204]	; (80025dc <main+0x53c>)
 800250e:	edd3 7a00 	vldr	s15, [r3]
 8002512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002516:	4b33      	ldr	r3, [pc, #204]	; (80025e4 <main+0x544>)
 8002518:	edc3 7a00 	vstr	s15, [r3]
				//Aplicacion del PID
				PID_simple(&handler_Motor_L.parametersMotor.parametersPID, sampling_timer, vel_Setpoint_L,  handler_Motor_L.parametersMotor.velocity);
 800251c:	4b30      	ldr	r3, [pc, #192]	; (80025e0 <main+0x540>)
 800251e:	edd3 7a00 	vldr	s15, [r3]
 8002522:	4b23      	ldr	r3, [pc, #140]	; (80025b0 <main+0x510>)
 8002524:	ed93 7a08 	vldr	s14, [r3, #32]
 8002528:	eeb0 1a47 	vmov.f32	s2, s14
 800252c:	eef0 0a67 	vmov.f32	s1, s15
 8002530:	ed97 0a04 	vldr	s0, [r7, #16]
 8002534:	481e      	ldr	r0, [pc, #120]	; (80025b0 <main+0x510>)
 8002536:	f001 f97a 	bl	800382e <PID_simple>
				PID_simple(&handler_Motor_R.parametersMotor.parametersPID, sampling_timer, vel_Setpoint_R,  handler_Motor_R.parametersMotor.velocity);
 800253a:	4b2a      	ldr	r3, [pc, #168]	; (80025e4 <main+0x544>)
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <main+0x50c>)
 8002542:	ed93 7a08 	vldr	s14, [r3, #32]
 8002546:	eeb0 1a47 	vmov.f32	s2, s14
 800254a:	eef0 0a67 	vmov.f32	s1, s15
 800254e:	ed97 0a04 	vldr	s0, [r7, #16]
 8002552:	4816      	ldr	r0, [pc, #88]	; (80025ac <main+0x50c>)
 8002554:	f001 f96b 	bl	800382e <PID_simple>
				//Cambiamos valores
				handler_Motor_L.configMotor.new_dutty += handler_Motor_L.parametersMotor.parametersPID.u;
 8002558:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <main+0x510>)
 800255a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800255e:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <main+0x510>)
 8002560:	edd3 7a00 	vldr	s15, [r3]
 8002564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <main+0x510>)
 800256a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
				handler_Motor_R.configMotor.new_dutty += handler_Motor_R.parametersMotor.parametersPID.u;
 800256e:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <main+0x50c>)
 8002570:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002574:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <main+0x50c>)
 8002576:	edd3 7a00 	vldr	s15, [r3]
 800257a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <main+0x50c>)
 8002580:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
				//Correccion del dutty
				correction(&handler_Motor_L);
 8002584:	480a      	ldr	r0, [pc, #40]	; (80025b0 <main+0x510>)
 8002586:	f001 f9af 	bl	80038e8 <correction>
				correction(&handler_Motor_R);
 800258a:	4808      	ldr	r0, [pc, #32]	; (80025ac <main+0x50c>)
 800258c:	f001 f9ac 	bl	80038e8 <correction>
 8002590:	e000      	b.n	8002594 <main+0x4f4>
			}
			else{ __NOP(); }
 8002592:	bf00      	nop
			//Bajamos Bandera
			flag_action = 0;
 8002594:	4b01      	ldr	r3, [pc, #4]	; (800259c <main+0x4fc>)
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
 800259a:	e026      	b.n	80025ea <main+0x54a>
 800259c:	200008ad 	.word	0x200008ad
 80025a0:	200008ae 	.word	0x200008ae
 80025a4:	200008bc 	.word	0x200008bc
 80025a8:	447a0000 	.word	0x447a0000
 80025ac:	20000308 	.word	0x20000308
 80025b0:	2000037c 	.word	0x2000037c
 80025b4:	20000468 	.word	0x20000468
 80025b8:	200004c0 	.word	0x200004c0
 80025bc:	200004c4 	.word	0x200004c4
 80025c0:	0800e5e0 	.word	0x0800e5e0
 80025c4:	20000298 	.word	0x20000298
 80025c8:	2000028c 	.word	0x2000028c
 80025cc:	20000400 	.word	0x20000400
 80025d0:	408f4000 	.word	0x408f4000
 80025d4:	00000000 	.word	0x00000000
 80025d8:	200003e4 	.word	0x200003e4
 80025dc:	200008b8 	.word	0x200008b8
 80025e0:	200008b4 	.word	0x200008b4
 80025e4:	200008b0 	.word	0x200008b0
		}
		else{ __NOP(); }
 80025e8:	bf00      	nop


		//----------------Accion para finalizar modo------------------------
		//Verificamos las condiciones de parada
		if(flag_mode==1)
 80025ea:	4b2e      	ldr	r3, [pc, #184]	; (80026a4 <main+0x604>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d130      	bne.n	8002654 <main+0x5b4>
		{
			if(distance_traveled(&parameter_Path_Robot, parameter_Posicion_Robot.xg_position, parameter_Posicion_Robot.yg_position)>parameter_Path_Robot.line_Distance){
 80025f2:	4b2d      	ldr	r3, [pc, #180]	; (80026a8 <main+0x608>)
 80025f4:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80025f8:	4b2b      	ldr	r3, [pc, #172]	; (80026a8 <main+0x608>)
 80025fa:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80025fe:	eeb0 1a46 	vmov.f32	s2, s12
 8002602:	eef0 1a66 	vmov.f32	s3, s13
 8002606:	eeb0 0a47 	vmov.f32	s0, s14
 800260a:	eef0 0a67 	vmov.f32	s1, s15
 800260e:	4827      	ldr	r0, [pc, #156]	; (80026ac <main+0x60c>)
 8002610:	f7ff fc0e 	bl	8001e30 <distance_traveled>
 8002614:	ec5b ab10 	vmov	sl, fp, d0
 8002618:	4b24      	ldr	r3, [pc, #144]	; (80026ac <main+0x60c>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	4618      	mov	r0, r3
 800261e:	f7fd ff99 	bl	8000554 <__aeabi_i2d>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4650      	mov	r0, sl
 8002628:	4659      	mov	r1, fp
 800262a:	f7fe fa8d 	bl	8000b48 <__aeabi_dcmpgt>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d036      	beq.n	80026a2 <main+0x602>
				//desactivamos los motores
				status_motor(RESET);
 8002634:	2080      	movs	r0, #128	; 0x80
 8002636:	f001 f995 	bl	8003964 <status_motor>
				//Guardamos la posicion final
				parameter_Posicion_Robot.xg_position_inicial = parameter_Posicion_Robot.xg_position;
 800263a:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <main+0x608>)
 800263c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002640:	4919      	ldr	r1, [pc, #100]	; (80026a8 <main+0x608>)
 8002642:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
				parameter_Posicion_Robot.yg_position_inicial = parameter_Posicion_Robot.yg_position;
 8002646:	4b18      	ldr	r3, [pc, #96]	; (80026a8 <main+0x608>)
 8002648:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800264c:	4916      	ldr	r1, [pc, #88]	; (80026a8 <main+0x608>)
 800264e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8002652:	e58c      	b.n	800216e <main+0xce>
			}
		}
		else if(flag_mode==2)
 8002654:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <main+0x604>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d121      	bne.n	80026a0 <main+0x600>
		{
			if(fabs(ang_complementary) > fabs(parameter_Path_Robot.rotative_Grad_Relative)){
 800265c:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <main+0x610>)
 800265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002662:	4614      	mov	r4, r2
 8002664:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002668:	4b10      	ldr	r3, [pc, #64]	; (80026ac <main+0x60c>)
 800266a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266c:	4618      	mov	r0, r3
 800266e:	f7fd ff71 	bl	8000554 <__aeabi_i2d>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	4690      	mov	r8, r2
 8002678:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800267c:	4642      	mov	r2, r8
 800267e:	464b      	mov	r3, r9
 8002680:	4620      	mov	r0, r4
 8002682:	4629      	mov	r1, r5
 8002684:	f7fe fa60 	bl	8000b48 <__aeabi_dcmpgt>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <main+0x602>
				//Paramos los motores
				status_motor(RESET);
 800268e:	2080      	movs	r0, #128	; 0x80
 8002690:	f001 f968 	bl	8003964 <status_motor>
				updateDirMotor(handler_Motor_Execute);
 8002694:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <main+0x614>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff f8ee 	bl	800187a <updateDirMotor>
 800269e:	e566      	b.n	800216e <main+0xce>
			}
		}
		else{ __NOP(); }
 80026a0:	bf00      	nop
		if(commandComplete==1)
 80026a2:	e564      	b.n	800216e <main+0xce>
 80026a4:	200008ae 	.word	0x200008ae
 80026a8:	20000468 	.word	0x20000468
 80026ac:	20000400 	.word	0x20000400
 80026b0:	200004e0 	.word	0x200004e0
 80026b4:	200008a8 	.word	0x200008a8

080026b8 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af02      	add	r7, sp, #8
	//-------------------------PIN_MCO2--------------------------------
	//---------------PIN: PC9----------------
	//------------AF0: MCO_2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MCO2.pGPIOx = GPIOC;
 80026be:	4bae      	ldr	r3, [pc, #696]	; (8002978 <int_Hardware+0x2c0>)
 80026c0:	4aae      	ldr	r2, [pc, #696]	; (800297c <int_Hardware+0x2c4>)
 80026c2:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MCO2.GPIO_PinConfig.GPIO_PinNumber = PIN_8; 						//PIN_x, 0-15
 80026c4:	4bac      	ldr	r3, [pc, #688]	; (8002978 <int_Hardware+0x2c0>)
 80026c6:	2208      	movs	r2, #8
 80026c8:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MCO2, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80026ca:	2300      	movs	r3, #0
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	2300      	movs	r3, #0
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	2301      	movs	r3, #1
 80026d4:	2200      	movs	r2, #0
 80026d6:	2101      	movs	r1, #1
 80026d8:	48a7      	ldr	r0, [pc, #668]	; (8002978 <int_Hardware+0x2c0>)
 80026da:	f002 fd3d 	bl	8005158 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MCO2);
 80026de:	48a6      	ldr	r0, [pc, #664]	; (8002978 <int_Hardware+0x2c0>)
 80026e0:	f002 fd5c 	bl	800519c <GPIO_Config>
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 80026e4:	4ba6      	ldr	r3, [pc, #664]	; (8002980 <int_Hardware+0x2c8>)
 80026e6:	4aa7      	ldr	r2, [pc, #668]	; (8002984 <int_Hardware+0x2cc>)
 80026e8:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 80026ea:	4ba5      	ldr	r3, [pc, #660]	; (8002980 <int_Hardware+0x2c8>)
 80026ec:	2205      	movs	r2, #5
 80026ee:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80026f0:	2300      	movs	r3, #0
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	2300      	movs	r3, #0
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	2301      	movs	r3, #1
 80026fa:	2200      	movs	r2, #0
 80026fc:	2101      	movs	r1, #1
 80026fe:	48a0      	ldr	r0, [pc, #640]	; (8002980 <int_Hardware+0x2c8>)
 8002700:	f002 fd2a 	bl	8005158 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 8002704:	489e      	ldr	r0, [pc, #632]	; (8002980 <int_Hardware+0x2c8>)
 8002706:	f002 fd49 	bl	800519c <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA9----------------
	//------------AF7: USART1_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 800270a:	4b9f      	ldr	r3, [pc, #636]	; (8002988 <int_Hardware+0x2d0>)
 800270c:	4a9d      	ldr	r2, [pc, #628]	; (8002984 <int_Hardware+0x2cc>)
 800270e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 8002710:	4b9d      	ldr	r3, [pc, #628]	; (8002988 <int_Hardware+0x2d0>)
 8002712:	2209      	movs	r2, #9
 8002714:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8002716:	2307      	movs	r3, #7
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	2300      	movs	r3, #0
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	2301      	movs	r3, #1
 8002720:	2200      	movs	r2, #0
 8002722:	2102      	movs	r1, #2
 8002724:	4898      	ldr	r0, [pc, #608]	; (8002988 <int_Hardware+0x2d0>)
 8002726:	f002 fd17 	bl	8005158 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 800272a:	4897      	ldr	r0, [pc, #604]	; (8002988 <int_Hardware+0x2d0>)
 800272c:	f002 fd36 	bl	800519c <GPIO_Config>

	//---------------PIN: PA10----------------
	//------------AF7: USART1_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 8002730:	4b96      	ldr	r3, [pc, #600]	; (800298c <int_Hardware+0x2d4>)
 8002732:	4a94      	ldr	r2, [pc, #592]	; (8002984 <int_Hardware+0x2cc>)
 8002734:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utiliza
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 8002736:	4b95      	ldr	r3, [pc, #596]	; (800298c <int_Hardware+0x2d4>)
 8002738:	220a      	movs	r2, #10
 800273a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 800273c:	2307      	movs	r3, #7
 800273e:	9301      	str	r3, [sp, #4]
 8002740:	2300      	movs	r3, #0
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	2301      	movs	r3, #1
 8002746:	2200      	movs	r2, #0
 8002748:	2102      	movs	r1, #2
 800274a:	4890      	ldr	r0, [pc, #576]	; (800298c <int_Hardware+0x2d4>)
 800274c:	f002 fd04 	bl	8005158 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 8002750:	488e      	ldr	r0, [pc, #568]	; (800298c <int_Hardware+0x2d4>)
 8002752:	f002 fd23 	bl	800519c <GPIO_Config>
	//---------------------------Motor Derecho--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA0----------------
	//------------AF2: TIM5_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR.pGPIOx = GPIOA;
 8002756:	4b8e      	ldr	r3, [pc, #568]	; (8002990 <int_Hardware+0x2d8>)
 8002758:	4a8a      	ldr	r2, [pc, #552]	; (8002984 <int_Hardware+0x2cc>)
 800275a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR.GPIO_PinConfig.GPIO_PinNumber = PIN_0; 						//PIN_x, 0-15
 800275c:	4b8c      	ldr	r3, [pc, #560]	; (8002990 <int_Hardware+0x2d8>)
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 8002762:	2302      	movs	r3, #2
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	2300      	movs	r3, #0
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	2301      	movs	r3, #1
 800276c:	2200      	movs	r2, #0
 800276e:	2102      	movs	r1, #2
 8002770:	4887      	ldr	r0, [pc, #540]	; (8002990 <int_Hardware+0x2d8>)
 8002772:	f002 fcf1 	bl	8005158 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR);
 8002776:	4886      	ldr	r0, [pc, #536]	; (8002990 <int_Hardware+0x2d8>)
 8002778:	f002 fd10 	bl	800519c <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PC12----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_IN.pGPIOx = GPIOC;
 800277c:	4b85      	ldr	r3, [pc, #532]	; (8002994 <int_Hardware+0x2dc>)
 800277e:	4a7f      	ldr	r2, [pc, #508]	; (800297c <int_Hardware+0x2c4>)
 8002780:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_12; 						//PIN_x, 0-15
 8002782:	4b84      	ldr	r3, [pc, #528]	; (8002994 <int_Hardware+0x2dc>)
 8002784:	220c      	movs	r2, #12
 8002786:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8002788:	2300      	movs	r3, #0
 800278a:	9301      	str	r3, [sp, #4]
 800278c:	2300      	movs	r3, #0
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	2301      	movs	r3, #1
 8002792:	2200      	movs	r2, #0
 8002794:	2101      	movs	r1, #1
 8002796:	487f      	ldr	r0, [pc, #508]	; (8002994 <int_Hardware+0x2dc>)
 8002798:	f002 fcde 	bl	8005158 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_IN);
 800279c:	487d      	ldr	r0, [pc, #500]	; (8002994 <int_Hardware+0x2dc>)
 800279e:	f002 fcfd 	bl	800519c <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC10----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_EN.pGPIOx = GPIOC;
 80027a2:	4b7d      	ldr	r3, [pc, #500]	; (8002998 <int_Hardware+0x2e0>)
 80027a4:	4a75      	ldr	r2, [pc, #468]	; (800297c <int_Hardware+0x2c4>)
 80027a6:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 80027a8:	4b7b      	ldr	r3, [pc, #492]	; (8002998 <int_Hardware+0x2e0>)
 80027aa:	220a      	movs	r2, #10
 80027ac:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80027ae:	2300      	movs	r3, #0
 80027b0:	9301      	str	r3, [sp, #4]
 80027b2:	2300      	movs	r3, #0
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	2301      	movs	r3, #1
 80027b8:	2200      	movs	r2, #0
 80027ba:	2101      	movs	r1, #1
 80027bc:	4876      	ldr	r0, [pc, #472]	; (8002998 <int_Hardware+0x2e0>)
 80027be:	f002 fccb 	bl	8005158 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_EN);
 80027c2:	4875      	ldr	r0, [pc, #468]	; (8002998 <int_Hardware+0x2e0>)
 80027c4:	f002 fcea 	bl	800519c <GPIO_Config>
	//---------------------------Motor Izquierdo--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA1----------------
	//------------AF2: TIM5_CH2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL.pGPIOx = GPIOA;
 80027c8:	4b74      	ldr	r3, [pc, #464]	; (800299c <int_Hardware+0x2e4>)
 80027ca:	4a6e      	ldr	r2, [pc, #440]	; (8002984 <int_Hardware+0x2cc>)
 80027cc:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL.GPIO_PinConfig.GPIO_PinNumber = PIN_1; 						//PIN_x, 0-15
 80027ce:	4b73      	ldr	r3, [pc, #460]	; (800299c <int_Hardware+0x2e4>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 80027d4:	2302      	movs	r3, #2
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	2300      	movs	r3, #0
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	2301      	movs	r3, #1
 80027de:	2200      	movs	r2, #0
 80027e0:	2102      	movs	r1, #2
 80027e2:	486e      	ldr	r0, [pc, #440]	; (800299c <int_Hardware+0x2e4>)
 80027e4:	f002 fcb8 	bl	8005158 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL);
 80027e8:	486c      	ldr	r0, [pc, #432]	; (800299c <int_Hardware+0x2e4>)
 80027ea:	f002 fcd7 	bl	800519c <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PD2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_IN.pGPIOx = GPIOD;
 80027ee:	4b6c      	ldr	r3, [pc, #432]	; (80029a0 <int_Hardware+0x2e8>)
 80027f0:	4a6c      	ldr	r2, [pc, #432]	; (80029a4 <int_Hardware+0x2ec>)
 80027f2:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 80027f4:	4b6a      	ldr	r3, [pc, #424]	; (80029a0 <int_Hardware+0x2e8>)
 80027f6:	2202      	movs	r2, #2
 80027f8:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80027fa:	2300      	movs	r3, #0
 80027fc:	9301      	str	r3, [sp, #4]
 80027fe:	2300      	movs	r3, #0
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	2301      	movs	r3, #1
 8002804:	2200      	movs	r2, #0
 8002806:	2101      	movs	r1, #1
 8002808:	4865      	ldr	r0, [pc, #404]	; (80029a0 <int_Hardware+0x2e8>)
 800280a:	f002 fca5 	bl	8005158 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_IN);
 800280e:	4864      	ldr	r0, [pc, #400]	; (80029a0 <int_Hardware+0x2e8>)
 8002810:	f002 fcc4 	bl	800519c <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC11----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_EN.pGPIOx = GPIOC;
 8002814:	4b64      	ldr	r3, [pc, #400]	; (80029a8 <int_Hardware+0x2f0>)
 8002816:	4a59      	ldr	r2, [pc, #356]	; (800297c <int_Hardware+0x2c4>)
 8002818:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_11; 						//PIN_x, 0-15
 800281a:	4b63      	ldr	r3, [pc, #396]	; (80029a8 <int_Hardware+0x2f0>)
 800281c:	220b      	movs	r2, #11
 800281e:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8002820:	2300      	movs	r3, #0
 8002822:	9301      	str	r3, [sp, #4]
 8002824:	2300      	movs	r3, #0
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2301      	movs	r3, #1
 800282a:	2200      	movs	r2, #0
 800282c:	2101      	movs	r1, #1
 800282e:	485e      	ldr	r0, [pc, #376]	; (80029a8 <int_Hardware+0x2f0>)
 8002830:	f002 fc92 	bl	8005158 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_EN);
 8002834:	485c      	ldr	r0, [pc, #368]	; (80029a8 <int_Hardware+0x2f0>)
 8002836:	f002 fcb1 	bl	800519c <GPIO_Config>

	//---------------------------I2C--------------------------------
	//---------------PIN: PB8----------------
	//------------AF4: I2C1_SCL----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SCL_MPU6050.pGPIOx = GPIOB;
 800283a:	4b5c      	ldr	r3, [pc, #368]	; (80029ac <int_Hardware+0x2f4>)
 800283c:	4a5c      	ldr	r2, [pc, #368]	; (80029b0 <int_Hardware+0x2f8>)
 800283e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SCL_MPU6050.GPIO_PinConfig.GPIO_PinNumber = PIN_8; 						//PIN_x, 0-15
 8002840:	4b5a      	ldr	r3, [pc, #360]	; (80029ac <int_Hardware+0x2f4>)
 8002842:	2208      	movs	r2, #8
 8002844:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SCL_MPU6050, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 8002846:	2304      	movs	r3, #4
 8002848:	9301      	str	r3, [sp, #4]
 800284a:	2300      	movs	r3, #0
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	2302      	movs	r3, #2
 8002850:	2201      	movs	r2, #1
 8002852:	2102      	movs	r1, #2
 8002854:	4855      	ldr	r0, [pc, #340]	; (80029ac <int_Hardware+0x2f4>)
 8002856:	f002 fc7f 	bl	8005158 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SCL_MPU6050);
 800285a:	4854      	ldr	r0, [pc, #336]	; (80029ac <int_Hardware+0x2f4>)
 800285c:	f002 fc9e 	bl	800519c <GPIO_Config>

	//---------------PIN: PB9----------------
	//------------AF4: I2C1_SDA----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SDA_MPU6050.pGPIOx = GPIOB;
 8002860:	4b54      	ldr	r3, [pc, #336]	; (80029b4 <int_Hardware+0x2fc>)
 8002862:	4a53      	ldr	r2, [pc, #332]	; (80029b0 <int_Hardware+0x2f8>)
 8002864:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SDA_MPU6050.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 8002866:	4b53      	ldr	r3, [pc, #332]	; (80029b4 <int_Hardware+0x2fc>)
 8002868:	2209      	movs	r2, #9
 800286a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SDA_MPU6050, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 800286c:	2304      	movs	r3, #4
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	2300      	movs	r3, #0
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	2302      	movs	r3, #2
 8002876:	2201      	movs	r2, #1
 8002878:	2102      	movs	r1, #2
 800287a:	484e      	ldr	r0, [pc, #312]	; (80029b4 <int_Hardware+0x2fc>)
 800287c:	f002 fc6c 	bl	8005158 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SDA_MPU6050);
 8002880:	484c      	ldr	r0, [pc, #304]	; (80029b4 <int_Hardware+0x2fc>)
 8002882:	f002 fc8b 	bl	800519c <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART1----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART1;
 8002886:	4b4c      	ldr	r3, [pc, #304]	; (80029b8 <int_Hardware+0x300>)
 8002888:	4a4c      	ldr	r2, [pc, #304]	; (80029bc <int_Hardware+0x304>)
 800288a:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 800288c:	4b4a      	ldr	r3, [pc, #296]	; (80029b8 <int_Hardware+0x300>)
 800288e:	2202      	movs	r2, #2
 8002890:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_19200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 8002892:	4b49      	ldr	r3, [pc, #292]	; (80029b8 <int_Hardware+0x300>)
 8002894:	2201      	movs	r2, #1
 8002896:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 8002898:	4b47      	ldr	r3, [pc, #284]	; (80029b8 <int_Hardware+0x300>)
 800289a:	2200      	movs	r2, #0
 800289c:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 800289e:	4b46      	ldr	r3, [pc, #280]	; (80029b8 <int_Hardware+0x300>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 80028a4:	4b44      	ldr	r3, [pc, #272]	; (80029b8 <int_Hardware+0x300>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_ENABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 80028aa:	4b43      	ldr	r3, [pc, #268]	; (80029b8 <int_Hardware+0x300>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 80028b0:	4841      	ldr	r0, [pc, #260]	; (80029b8 <int_Hardware+0x300>)
 80028b2:	f003 fccd 	bl	8006250 <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 80028b6:	4b42      	ldr	r3, [pc, #264]	; (80029c0 <int_Hardware+0x308>)
 80028b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028bc:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80028be:	4b40      	ldr	r3, [pc, #256]	; (80029c0 <int_Hardware+0x308>)
 80028c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028c4:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80028c6:	4b3e      	ldr	r3, [pc, #248]	; (80029c0 <int_Hardware+0x308>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80028cc:	4b3c      	ldr	r3, [pc, #240]	; (80029c0 <int_Hardware+0x308>)
 80028ce:	22fa      	movs	r2, #250	; 0xfa
 80028d0:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80028d2:	4b3b      	ldr	r3, [pc, #236]	; (80029c0 <int_Hardware+0x308>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 80028d8:	4839      	ldr	r0, [pc, #228]	; (80029c0 <int_Hardware+0x308>)
 80028da:	f001 fa19 	bl	8003d10 <BasicTimer_Config>

	//---------------TIM3----------------
	//Definimos el TIMx a usar
	handler_TIMER_Sampling.ptrTIMx = TIM3;
 80028de:	4b39      	ldr	r3, [pc, #228]	; (80029c4 <int_Hardware+0x30c>)
 80028e0:	4a39      	ldr	r2, [pc, #228]	; (80029c8 <int_Hardware+0x310>)
 80028e2:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Sampling.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80028e4:	4b37      	ldr	r3, [pc, #220]	; (80029c4 <int_Hardware+0x30c>)
 80028e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028ea:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Sampling.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80028ec:	4b35      	ldr	r3, [pc, #212]	; (80029c4 <int_Hardware+0x30c>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Sampling.TIMx_Config.TIMX_period = 16;   //Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80028f2:	4b34      	ldr	r3, [pc, #208]	; (80029c4 <int_Hardware+0x30c>)
 80028f4:	2210      	movs	r2, #16
 80028f6:	605a      	str	r2, [r3, #4]
	handler_TIMER_Sampling.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80028f8:	4b32      	ldr	r3, [pc, #200]	; (80029c4 <int_Hardware+0x30c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Sampling);
 80028fe:	4831      	ldr	r0, [pc, #196]	; (80029c4 <int_Hardware+0x30c>)
 8002900:	f001 fa06 	bl	8003d10 <BasicTimer_Config>

	//---------------TIM5----------------
	//Definimos el TIMx a usar
	handler_TIMER_Motor.ptrTIMx = TIM5;
 8002904:	4b31      	ldr	r3, [pc, #196]	; (80029cc <int_Hardware+0x314>)
 8002906:	4a32      	ldr	r2, [pc, #200]	; (80029d0 <int_Hardware+0x318>)
 8002908:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Motor.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_10us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 800290a:	4b30      	ldr	r3, [pc, #192]	; (80029cc <int_Hardware+0x314>)
 800290c:	220a      	movs	r2, #10
 800290e:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Motor.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8002910:	4b2e      	ldr	r3, [pc, #184]	; (80029cc <int_Hardware+0x314>)
 8002912:	2200      	movs	r2, #0
 8002914:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Motor.TIMx_Config.TIMX_period = 100;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 8002916:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <int_Hardware+0x314>)
 8002918:	2264      	movs	r2, #100	; 0x64
 800291a:	605a      	str	r2, [r3, #4]
	handler_TIMER_Motor.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 800291c:	4b2b      	ldr	r3, [pc, #172]	; (80029cc <int_Hardware+0x314>)
 800291e:	2200      	movs	r2, #0
 8002920:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Motor);
 8002922:	482a      	ldr	r0, [pc, #168]	; (80029cc <int_Hardware+0x314>)
 8002924:	f001 f9f4 	bl	8003d10 <BasicTimer_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoR.pGPIOx = GPIOC;
 8002928:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <int_Hardware+0x31c>)
 800292a:	4a14      	ldr	r2, [pc, #80]	; (800297c <int_Hardware+0x2c4>)
 800292c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoR.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 800292e:	4b29      	ldr	r3, [pc, #164]	; (80029d4 <int_Hardware+0x31c>)
 8002930:	2201      	movs	r2, #1
 8002932:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoR.pGPIOHandler = &handler_GPIO_FotoR;
 8002934:	4b28      	ldr	r3, [pc, #160]	; (80029d8 <int_Hardware+0x320>)
 8002936:	4a27      	ldr	r2, [pc, #156]	; (80029d4 <int_Hardware+0x31c>)
 8002938:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoR.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 800293a:	4b27      	ldr	r3, [pc, #156]	; (80029d8 <int_Hardware+0x320>)
 800293c:	2202      	movs	r2, #2
 800293e:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoR);
 8002940:	4825      	ldr	r0, [pc, #148]	; (80029d8 <int_Hardware+0x320>)
 8002942:	f001 fb69 	bl	8004018 <extInt_Config>

	//---------------PIN: PC3----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoL.pGPIOx = GPIOC;
 8002946:	4b25      	ldr	r3, [pc, #148]	; (80029dc <int_Hardware+0x324>)
 8002948:	4a0c      	ldr	r2, [pc, #48]	; (800297c <int_Hardware+0x2c4>)
 800294a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoL.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 800294c:	4b23      	ldr	r3, [pc, #140]	; (80029dc <int_Hardware+0x324>)
 800294e:	2203      	movs	r2, #3
 8002950:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoL.pGPIOHandler = &handler_GPIO_FotoL;
 8002952:	4b23      	ldr	r3, [pc, #140]	; (80029e0 <int_Hardware+0x328>)
 8002954:	4a21      	ldr	r2, [pc, #132]	; (80029dc <int_Hardware+0x324>)
 8002956:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoL.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 8002958:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <int_Hardware+0x328>)
 800295a:	2202      	movs	r2, #2
 800295c:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoL);
 800295e:	4820      	ldr	r0, [pc, #128]	; (80029e0 <int_Hardware+0x328>)
 8002960:	f001 fb5a 	bl	8004018 <extInt_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM5_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorR.ptrTIMx = TIM5;
 8002964:	4b1f      	ldr	r3, [pc, #124]	; (80029e4 <int_Hardware+0x32c>)
 8002966:	4a1a      	ldr	r2, [pc, #104]	; (80029d0 <int_Hardware+0x318>)
 8002968:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorR.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 800296a:	4b1e      	ldr	r3, [pc, #120]	; (80029e4 <int_Hardware+0x32c>)
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorR.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8002970:	4b1c      	ldr	r3, [pc, #112]	; (80029e4 <int_Hardware+0x32c>)
 8002972:	220a      	movs	r2, #10
 8002974:	805a      	strh	r2, [r3, #2]
 8002976:	e037      	b.n	80029e8 <int_Hardware+0x330>
 8002978:	20000218 	.word	0x20000218
 800297c:	40020800 	.word	0x40020800
 8002980:	200001fc 	.word	0x200001fc
 8002984:	40020000 	.word	0x40020000
 8002988:	20000274 	.word	0x20000274
 800298c:	20000280 	.word	0x20000280
 8002990:	200002d8 	.word	0x200002d8
 8002994:	200002e4 	.word	0x200002e4
 8002998:	200002f0 	.word	0x200002f0
 800299c:	2000034c 	.word	0x2000034c
 80029a0:	20000358 	.word	0x20000358
 80029a4:	40020c00 	.word	0x40020c00
 80029a8:	20000364 	.word	0x20000364
 80029ac:	2000024c 	.word	0x2000024c
 80029b0:	40020400 	.word	0x40020400
 80029b4:	20000258 	.word	0x20000258
 80029b8:	2000028c 	.word	0x2000028c
 80029bc:	40011000 	.word	0x40011000
 80029c0:	20000208 	.word	0x20000208
 80029c4:	200003d0 	.word	0x200003d0
 80029c8:	40000400 	.word	0x40000400
 80029cc:	200003c0 	.word	0x200003c0
 80029d0:	40000c00 	.word	0x40000c00
 80029d4:	20000224 	.word	0x20000224
 80029d8:	20000230 	.word	0x20000230
 80029dc:	20000238 	.word	0x20000238
 80029e0:	20000244 	.word	0x20000244
 80029e4:	200002fc 	.word	0x200002fc
	handler_PWM_MotorR.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 80029e8:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <int_Hardware+0x388>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorR);
 80029ee:	4814      	ldr	r0, [pc, #80]	; (8002a40 <int_Hardware+0x388>)
 80029f0:	f003 f876 	bl	8005ae0 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorR, CHANNEL_ENABLE);
 80029f4:	2101      	movs	r1, #1
 80029f6:	4812      	ldr	r0, [pc, #72]	; (8002a40 <int_Hardware+0x388>)
 80029f8:	f003 f9d2 	bl	8005da0 <statusInOutPWM>

	//---------------TIM5_Channel_2----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorL.ptrTIMx = TIM5;
 80029fc:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <int_Hardware+0x38c>)
 80029fe:	4a12      	ldr	r2, [pc, #72]	; (8002a48 <int_Hardware+0x390>)
 8002a00:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorL.config.channel = PWM_CHANNEL_2;     //PWM_CHANNEL_x x->1,2,3,4
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <int_Hardware+0x38c>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorL.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8002a08:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <int_Hardware+0x38c>)
 8002a0a:	220a      	movs	r2, #10
 8002a0c:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorL.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <int_Hardware+0x38c>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorL);
 8002a14:	480b      	ldr	r0, [pc, #44]	; (8002a44 <int_Hardware+0x38c>)
 8002a16:	f003 f863 	bl	8005ae0 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorL, CHANNEL_ENABLE);
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	4809      	ldr	r0, [pc, #36]	; (8002a44 <int_Hardware+0x38c>)
 8002a1e:	f003 f9bf 	bl	8005da0 <statusInOutPWM>

	//-------------------Inicio de Configuracion I2Cx----------------------

	//---------------I2C1----------------
	//Definimos el I2Cx a usar
	handler_I2C_MPU6050.prtI2Cx = I2C1;
 8002a22:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <int_Hardware+0x394>)
 8002a24:	4a0a      	ldr	r2, [pc, #40]	; (8002a50 <int_Hardware+0x398>)
 8002a26:	601a      	str	r2, [r3, #0]
	//Definimos la configuracion para el I2C
	handler_I2C_MPU6050.modeI2C = I2C_MODE_FM;               //I2C_MODE_x  x->SM,FM
 8002a28:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <int_Hardware+0x394>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	715a      	strb	r2, [r3, #5]
	handler_I2C_MPU6050.slaveAddress = ADDRESS_DOWN;         //Direccion del Sclave
 8002a2e:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <int_Hardware+0x394>)
 8002a30:	2268      	movs	r2, #104	; 0x68
 8002a32:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	i2c_Config(&handler_I2C_MPU6050);
 8002a34:	4805      	ldr	r0, [pc, #20]	; (8002a4c <int_Hardware+0x394>)
 8002a36:	f002 fd1d 	bl	8005474 <i2c_Config>

	//---------------------Fin de Configuracion I2Cx----------------------

}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	200002fc 	.word	0x200002fc
 8002a44:	20000370 	.word	0x20000370
 8002a48:	40000c00 	.word	0x40000c00
 8002a4c:	20000264 	.word	0x20000264
 8002a50:	40005400 	.word	0x40005400

08002a54 <int_MCO2>:

//-----------------------------Inicio configuracion MCO1------------------------------------------

//Funcion para la configuracion inicial del MCO1
void int_MCO2(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
	//Configuracion inicial del MCO2
	configMCO2(0);
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f002 ffc5 	bl	80059e8 <configMCO2>
	configMCO2PRE(4);
 8002a5e:	2004      	movs	r0, #4
 8002a60:	f002 ffde 	bl	8005a20 <configMCO2PRE>
}
 8002a64:	bf00      	nop
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <int_MPU>:
//------------------------------Fin configuracion MCO1------------------------------------------

//------------------------------Inicio configuracion del MPU------------------------------------------
void int_MPU(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
	//Definimos la escala de las diferentes magnitudes fisicas
	handler_MPUAccel_MPU6050.fullScaleACCEL = ACCEL_2G;
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <int_MPU+0x20>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_MPU6050.fullScaleGYRO = GYRO_250;
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <int_MPU+0x20>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	705a      	strb	r2, [r3, #1]
	//Definimos el handler correspondiente al I2C
	handler_MPUAccel_MPU6050.ptrI2Chandler = &handler_I2C_MPU6050;
 8002a78:	4b03      	ldr	r3, [pc, #12]	; (8002a88 <int_MPU+0x20>)
 8002a7a:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <int_MPU+0x24>)
 8002a7c:	605a      	str	r2, [r3, #4]
	//Cargamos configuracion
	configMPUAccel(&handler_MPUAccel_MPU6050);
 8002a7e:	4802      	ldr	r0, [pc, #8]	; (8002a88 <int_MPU+0x20>)
 8002a80:	f7fe fc18 	bl	80012b4 <configMPUAccel>

}
 8002a84:	bf00      	nop
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	2000026c 	.word	0x2000026c
 8002a8c:	20000264 	.word	0x20000264

08002a90 <int_Config_Motor>:



//------------------------------Inicio configuracion de lso motores------------------------------------------
void int_Config_Motor(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	handler_Motor_R.configMotor.dutty =  28;
 8002a94:	4b3c      	ldr	r3, [pc, #240]	; (8002b88 <int_Config_Motor+0xf8>)
 8002a96:	4a3d      	ldr	r2, [pc, #244]	; (8002b8c <int_Config_Motor+0xfc>)
 8002a98:	631a      	str	r2, [r3, #48]	; 0x30
	handler_Motor_R.configMotor.frecuency = &value_period;
 8002a9a:	4b3b      	ldr	r3, [pc, #236]	; (8002b88 <int_Config_Motor+0xf8>)
 8002a9c:	4a3c      	ldr	r2, [pc, #240]	; (8002b90 <int_Config_Motor+0x100>)
 8002a9e:	629a      	str	r2, [r3, #40]	; 0x28
	handler_Motor_R.configMotor.dir = SET;
 8002aa0:	4b39      	ldr	r3, [pc, #228]	; (8002b88 <int_Config_Motor+0xf8>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	//handler de los perifericos
	handler_Motor_R.phandlerGPIOEN = &handler_GPIO_MotorR_EN;
 8002aa8:	4b37      	ldr	r3, [pc, #220]	; (8002b88 <int_Config_Motor+0xf8>)
 8002aaa:	4a3a      	ldr	r2, [pc, #232]	; (8002b94 <int_Config_Motor+0x104>)
 8002aac:	63da      	str	r2, [r3, #60]	; 0x3c
	handler_Motor_R.phandlerGPIOIN = &handler_GPIO_MotorR_IN;
 8002aae:	4b36      	ldr	r3, [pc, #216]	; (8002b88 <int_Config_Motor+0xf8>)
 8002ab0:	4a39      	ldr	r2, [pc, #228]	; (8002b98 <int_Config_Motor+0x108>)
 8002ab2:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_R.phandlerPWM = &handler_PWM_MotorR;
 8002ab4:	4b34      	ldr	r3, [pc, #208]	; (8002b88 <int_Config_Motor+0xf8>)
 8002ab6:	4a39      	ldr	r2, [pc, #228]	; (8002b9c <int_Config_Motor+0x10c>)
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40
	//definicion de parametros
	handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_prev = 0;
 8002aba:	4b33      	ldr	r3, [pc, #204]	; (8002b88 <int_Config_Motor+0xf8>)
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	60da      	str	r2, [r3, #12]
 8002ac2:	4b31      	ldr	r3, [pc, #196]	; (8002b88 <int_Config_Motor+0xf8>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	4a30      	ldr	r2, [pc, #192]	; (8002b88 <int_Config_Motor+0xf8>)
 8002ac8:	6053      	str	r3, [r2, #4]
	handler_Motor_R.parametersMotor.parametersPID.u =  handler_Motor_R.parametersMotor.parametersPID.e_intel = 0;
 8002aca:	4b2f      	ldr	r3, [pc, #188]	; (8002b88 <int_Config_Motor+0xf8>)
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
 8002ad2:	4b2d      	ldr	r3, [pc, #180]	; (8002b88 <int_Config_Motor+0xf8>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	4a2c      	ldr	r2, [pc, #176]	; (8002b88 <int_Config_Motor+0xf8>)
 8002ad8:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	handler_Motor_R.parametersMotor.parametersPID.kp = 250;
 8002ada:	4b2b      	ldr	r3, [pc, #172]	; (8002b88 <int_Config_Motor+0xf8>)
 8002adc:	4a30      	ldr	r2, [pc, #192]	; (8002ba0 <int_Config_Motor+0x110>)
 8002ade:	611a      	str	r2, [r3, #16]
	handler_Motor_R.parametersMotor.parametersPID.ki = 0;
 8002ae0:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <int_Config_Motor+0xf8>)
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	615a      	str	r2, [r3, #20]
	handler_Motor_R.parametersMotor.parametersPID.kd = 100;
 8002ae8:	4b27      	ldr	r3, [pc, #156]	; (8002b88 <int_Config_Motor+0xf8>)
 8002aea:	4a2e      	ldr	r2, [pc, #184]	; (8002ba4 <int_Config_Motor+0x114>)
 8002aec:	619a      	str	r2, [r3, #24]

	//---------------Motor Izquierdo----------------
	//Parametro de la señal del dutty
	handler_Motor_L.configMotor.dutty =  28;
 8002aee:	4b2e      	ldr	r3, [pc, #184]	; (8002ba8 <int_Config_Motor+0x118>)
 8002af0:	4a26      	ldr	r2, [pc, #152]	; (8002b8c <int_Config_Motor+0xfc>)
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30
	handler_Motor_L.configMotor.frecuency = &value_period;
 8002af4:	4b2c      	ldr	r3, [pc, #176]	; (8002ba8 <int_Config_Motor+0x118>)
 8002af6:	4a26      	ldr	r2, [pc, #152]	; (8002b90 <int_Config_Motor+0x100>)
 8002af8:	629a      	str	r2, [r3, #40]	; 0x28
	handler_Motor_L.configMotor.dir = SET;
 8002afa:	4b2b      	ldr	r3, [pc, #172]	; (8002ba8 <int_Config_Motor+0x118>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	//handler de los perifericos
	handler_Motor_L.phandlerGPIOEN = &handler_GPIO_MotorL_EN;
 8002b02:	4b29      	ldr	r3, [pc, #164]	; (8002ba8 <int_Config_Motor+0x118>)
 8002b04:	4a29      	ldr	r2, [pc, #164]	; (8002bac <int_Config_Motor+0x11c>)
 8002b06:	63da      	str	r2, [r3, #60]	; 0x3c
	handler_Motor_L.phandlerGPIOIN = &handler_GPIO_MotorL_IN;
 8002b08:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <int_Config_Motor+0x118>)
 8002b0a:	4a29      	ldr	r2, [pc, #164]	; (8002bb0 <int_Config_Motor+0x120>)
 8002b0c:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_L.phandlerPWM = &handler_PWM_MotorL;
 8002b0e:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <int_Config_Motor+0x118>)
 8002b10:	4a28      	ldr	r2, [pc, #160]	; (8002bb4 <int_Config_Motor+0x124>)
 8002b12:	641a      	str	r2, [r3, #64]	; 0x40
	//definicion de parametros
	handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_prev = 0;
 8002b14:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <int_Config_Motor+0x118>)
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	60da      	str	r2, [r3, #12]
 8002b1c:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <int_Config_Motor+0x118>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4a21      	ldr	r2, [pc, #132]	; (8002ba8 <int_Config_Motor+0x118>)
 8002b22:	6053      	str	r3, [r2, #4]
	handler_Motor_L.parametersMotor.parametersPID.u =  handler_Motor_L.parametersMotor.parametersPID.e_intel = 0;
 8002b24:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <int_Config_Motor+0x118>)
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <int_Config_Motor+0x118>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4a1d      	ldr	r2, [pc, #116]	; (8002ba8 <int_Config_Motor+0x118>)
 8002b32:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	handler_Motor_L.parametersMotor.parametersPID.kp = 250;
 8002b34:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <int_Config_Motor+0x118>)
 8002b36:	4a1a      	ldr	r2, [pc, #104]	; (8002ba0 <int_Config_Motor+0x110>)
 8002b38:	611a      	str	r2, [r3, #16]
	handler_Motor_L.parametersMotor.parametersPID.ki = 0;
 8002b3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ba8 <int_Config_Motor+0x118>)
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	615a      	str	r2, [r3, #20]
	handler_Motor_L.parametersMotor.parametersPID.kd = 100;
 8002b42:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <int_Config_Motor+0x118>)
 8002b44:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <int_Config_Motor+0x114>)
 8002b46:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	parameter_PID_distace.e = parameter_PID_distace.e_prev = 0;
 8002b48:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <int_Config_Motor+0x128>)
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	60da      	str	r2, [r3, #12]
 8002b50:	4b19      	ldr	r3, [pc, #100]	; (8002bb8 <int_Config_Motor+0x128>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a18      	ldr	r2, [pc, #96]	; (8002bb8 <int_Config_Motor+0x128>)
 8002b56:	6053      	str	r3, [r2, #4]
	parameter_PID_distace.u =  parameter_PID_distace.e_intel = 0;
 8002b58:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <int_Config_Motor+0x128>)
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <int_Config_Motor+0x128>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a14      	ldr	r2, [pc, #80]	; (8002bb8 <int_Config_Motor+0x128>)
 8002b66:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	parameter_PID_distace.kp = 1.0;
 8002b68:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <int_Config_Motor+0x128>)
 8002b6a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002b6e:	611a      	str	r2, [r3, #16]
	parameter_PID_distace.ki = 0.1;
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <int_Config_Motor+0x128>)
 8002b72:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <int_Config_Motor+0x12c>)
 8002b74:	615a      	str	r2, [r3, #20]
	parameter_PID_distace.kd = 0.8;
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <int_Config_Motor+0x128>)
 8002b78:	4a11      	ldr	r2, [pc, #68]	; (8002bc0 <int_Config_Motor+0x130>)
 8002b7a:	619a      	str	r2, [r3, #24]
};
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000308 	.word	0x20000308
 8002b8c:	41e00000 	.word	0x41e00000
 8002b90:	20000002 	.word	0x20000002
 8002b94:	200002f0 	.word	0x200002f0
 8002b98:	200002e4 	.word	0x200002e4
 8002b9c:	200002fc 	.word	0x200002fc
 8002ba0:	437a0000 	.word	0x437a0000
 8002ba4:	42c80000 	.word	0x42c80000
 8002ba8:	2000037c 	.word	0x2000037c
 8002bac:	20000364 	.word	0x20000364
 8002bb0:	20000358 	.word	0x20000358
 8002bb4:	20000370 	.word	0x20000370
 8002bb8:	200003e4 	.word	0x200003e4
 8002bbc:	3dcccccd 	.word	0x3dcccccd
 8002bc0:	3f4ccccd 	.word	0x3f4ccccd

08002bc4 <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <BasicTimer2_Callback+0x10>)
 8002bca:	f002 fc3c 	bl	8005446 <GPIOxTooglePin>
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	200001fc 	.word	0x200001fc

08002bd8 <BasicUSART1_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART1_Callback(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
	//Guardamos el caracter recibido
	charRead = getRxData();
 8002bdc:	f003 fde2 	bl	80067a4 <getRxData>
 8002be0:	4603      	mov	r3, r0
 8002be2:	461a      	mov	r2, r3
 8002be4:	4b02      	ldr	r3, [pc, #8]	; (8002bf0 <BasicUSART1_Callback+0x18>)
 8002be6:	701a      	strb	r2, [r3, #0]
	//Funcion que almacena los caracteres del comando recibido
	recepcionCommand();
 8002be8:	f000 f9e8 	bl	8002fbc <recepcionCommand>
}
 8002bec:	bf00      	nop
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000000 	.word	0x20000000
 8002bf4:	00000000 	.word	0x00000000

08002bf8 <BasicTimer3_Callback>:

//-------------------------study--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer3_Callback(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	ed2d 8b02 	vpush	{d8}
 8002bfe:	af00      	add	r7, sp, #0
	//----------------Accion a Realizar con el tiempo del TIMER--------------------
	//Leemos el angulo
	parameter_Posicion_Robot.grad_relativo = getAngle(&handler_MPUAccel_MPU6050, &sample_Gyro, parameter_Posicion_Robot.grad_relativo, READ_GYRO_Z, gyro_offset);
 8002c00:	4bb9      	ldr	r3, [pc, #740]	; (8002ee8 <BasicTimer3_Callback+0x2f0>)
 8002c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c06:	4610      	mov	r0, r2
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f7fe f805 	bl	8000c18 <__aeabi_d2f>
 8002c0e:	4601      	mov	r1, r0
 8002c10:	4bb6      	ldr	r3, [pc, #728]	; (8002eec <BasicTimer3_Callback+0x2f4>)
 8002c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c16:	2205      	movs	r2, #5
 8002c18:	ee00 1a10 	vmov	s0, r1
 8002c1c:	49b4      	ldr	r1, [pc, #720]	; (8002ef0 <BasicTimer3_Callback+0x2f8>)
 8002c1e:	48b5      	ldr	r0, [pc, #724]	; (8002ef4 <BasicTimer3_Callback+0x2fc>)
 8002c20:	f7fe fdce 	bl	80017c0 <getAngle>
 8002c24:	ee10 3a10 	vmov	r3, s0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fd fca5 	bl	8000578 <__aeabi_f2d>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	49ad      	ldr	r1, [pc, #692]	; (8002ee8 <BasicTimer3_Callback+0x2f0>)
 8002c34:	e9c1 2300 	strd	r2, r3, [r1]
	//Verificamos el modo
	if(flag_mode == 1)
 8002c38:	4baf      	ldr	r3, [pc, #700]	; (8002ef8 <BasicTimer3_Callback+0x300>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	f040 80cb 	bne.w	8002dd8 <BasicTimer3_Callback+0x1e0>
	{
		//Acumulamos los angulos
		sum_ang += parameter_Posicion_Robot.grad_relativo;
 8002c42:	4bae      	ldr	r3, [pc, #696]	; (8002efc <BasicTimer3_Callback+0x304>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd fc96 	bl	8000578 <__aeabi_f2d>
 8002c4c:	4ba6      	ldr	r3, [pc, #664]	; (8002ee8 <BasicTimer3_Callback+0x2f0>)
 8002c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c52:	f7fd fb33 	bl	80002bc <__adddf3>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f7fd ffdb 	bl	8000c18 <__aeabi_d2f>
 8002c62:	4603      	mov	r3, r0
 8002c64:	4aa5      	ldr	r2, [pc, #660]	; (8002efc <BasicTimer3_Callback+0x304>)
 8002c66:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += sample_Gyro.delta_timer;
 8002c68:	4ba1      	ldr	r3, [pc, #644]	; (8002ef0 <BasicTimer3_Callback+0x2f8>)
 8002c6a:	891a      	ldrh	r2, [r3, #8]
 8002c6c:	4ba4      	ldr	r3, [pc, #656]	; (8002f00 <BasicTimer3_Callback+0x308>)
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	4413      	add	r3, r2
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	4ba2      	ldr	r3, [pc, #648]	; (8002f00 <BasicTimer3_Callback+0x308>)
 8002c76:	801a      	strh	r2, [r3, #0]

		//----------------Accion a realizar con un tiempo especifico--------------------
		if(counting_action>=timeAction_TIMER_Sampling)
 8002c78:	4ba2      	ldr	r3, [pc, #648]	; (8002f04 <BasicTimer3_Callback+0x30c>)
 8002c7a:	881a      	ldrh	r2, [r3, #0]
 8002c7c:	4ba2      	ldr	r3, [pc, #648]	; (8002f08 <BasicTimer3_Callback+0x310>)
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	f0c0 80a2 	bcc.w	8002dca <BasicTimer3_Callback+0x1d2>
		{
			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 8002c86:	4b9e      	ldr	r3, [pc, #632]	; (8002f00 <BasicTimer3_Callback+0x308>)
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	4b9f      	ldr	r3, [pc, #636]	; (8002f0c <BasicTimer3_Callback+0x314>)
 8002c8e:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemis como el angulo relativo
			prom_ang = sum_ang/counting_action;
 8002c90:	4b9a      	ldr	r3, [pc, #616]	; (8002efc <BasicTimer3_Callback+0x304>)
 8002c92:	edd3 6a00 	vldr	s13, [r3]
 8002c96:	4b9b      	ldr	r3, [pc, #620]	; (8002f04 <BasicTimer3_Callback+0x30c>)
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	ee07 3a90 	vmov	s15, r3
 8002c9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ca6:	4b9a      	ldr	r3, [pc, #616]	; (8002f10 <BasicTimer3_Callback+0x318>)
 8002ca8:	edc3 7a00 	vstr	s15, [r3]
			parameter_Posicion_Robot.phi_relativo = (prom_ang*M_PI)/180;          //[rad]
 8002cac:	4b98      	ldr	r3, [pc, #608]	; (8002f10 <BasicTimer3_Callback+0x318>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fd fc61 	bl	8000578 <__aeabi_f2d>
 8002cb6:	a388      	add	r3, pc, #544	; (adr r3, 8002ed8 <BasicTimer3_Callback+0x2e0>)
 8002cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbc:	f7fd fcb4 	bl	8000628 <__aeabi_dmul>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	4b91      	ldr	r3, [pc, #580]	; (8002f14 <BasicTimer3_Callback+0x31c>)
 8002cce:	f7fd fdd5 	bl	800087c <__aeabi_ddiv>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4984      	ldr	r1, [pc, #528]	; (8002ee8 <BasicTimer3_Callback+0x2f0>)
 8002cd8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			parameter_Posicion_Robot.phi_relativo = atan2(sin(parameter_Posicion_Robot.phi_relativo),cos(parameter_Posicion_Robot.phi_relativo));
 8002cdc:	4b82      	ldr	r3, [pc, #520]	; (8002ee8 <BasicTimer3_Callback+0x2f0>)
 8002cde:	ed93 7b02 	vldr	d7, [r3, #8]
 8002ce2:	eeb0 0a47 	vmov.f32	s0, s14
 8002ce6:	eef0 0a67 	vmov.f32	s1, s15
 8002cea:	f009 f855 	bl	800bd98 <sin>
 8002cee:	eeb0 8a40 	vmov.f32	s16, s0
 8002cf2:	eef0 8a60 	vmov.f32	s17, s1
 8002cf6:	4b7c      	ldr	r3, [pc, #496]	; (8002ee8 <BasicTimer3_Callback+0x2f0>)
 8002cf8:	ed93 7b02 	vldr	d7, [r3, #8]
 8002cfc:	eeb0 0a47 	vmov.f32	s0, s14
 8002d00:	eef0 0a67 	vmov.f32	s1, s15
 8002d04:	f008 fff4 	bl	800bcf0 <cos>
 8002d08:	eeb0 7a40 	vmov.f32	s14, s0
 8002d0c:	eef0 7a60 	vmov.f32	s15, s1
 8002d10:	eeb0 1a47 	vmov.f32	s2, s14
 8002d14:	eef0 1a67 	vmov.f32	s3, s15
 8002d18:	eeb0 0a48 	vmov.f32	s0, s16
 8002d1c:	eef0 0a68 	vmov.f32	s1, s17
 8002d20:	f009 f8c6 	bl	800beb0 <atan2>
 8002d24:	eeb0 7a40 	vmov.f32	s14, s0
 8002d28:	eef0 7a60 	vmov.f32	s15, s1
 8002d2c:	4b6e      	ldr	r3, [pc, #440]	; (8002ee8 <BasicTimer3_Callback+0x2f0>)
 8002d2e:	ed83 7b02 	vstr	d7, [r3, #8]
			//Calculamos la velocidad
			handler_Motor_L.parametersMotor.distance = (cm_L*handler_Motor_L.parametersMotor.count);                   //[mm]
 8002d32:	4b79      	ldr	r3, [pc, #484]	; (8002f18 <BasicTimer3_Callback+0x320>)
 8002d34:	8b9b      	ldrh	r3, [r3, #28]
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d3e:	4b77      	ldr	r3, [pc, #476]	; (8002f1c <BasicTimer3_Callback+0x324>)
 8002d40:	edd3 7a00 	vldr	s15, [r3]
 8002d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d48:	4b73      	ldr	r3, [pc, #460]	; (8002f18 <BasicTimer3_Callback+0x320>)
 8002d4a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			handler_Motor_R.parametersMotor.distance = (cm_R*handler_Motor_R.parametersMotor.count);				   //[mm]
 8002d4e:	4b74      	ldr	r3, [pc, #464]	; (8002f20 <BasicTimer3_Callback+0x328>)
 8002d50:	8b9b      	ldrh	r3, [r3, #28]
 8002d52:	ee07 3a90 	vmov	s15, r3
 8002d56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d5a:	4b72      	ldr	r3, [pc, #456]	; (8002f24 <BasicTimer3_Callback+0x32c>)
 8002d5c:	edd3 7a00 	vldr	s15, [r3]
 8002d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d64:	4b6e      	ldr	r3, [pc, #440]	; (8002f20 <BasicTimer3_Callback+0x328>)
 8002d66:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/time_accion;      //[m/s]
 8002d6a:	4b6b      	ldr	r3, [pc, #428]	; (8002f18 <BasicTimer3_Callback+0x320>)
 8002d6c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002d70:	4b66      	ldr	r3, [pc, #408]	; (8002f0c <BasicTimer3_Callback+0x314>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	ee07 3a90 	vmov	s15, r3
 8002d78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d80:	4b65      	ldr	r3, [pc, #404]	; (8002f18 <BasicTimer3_Callback+0x320>)
 8002d82:	edc3 7a08 	vstr	s15, [r3, #32]
			handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/time_accion;      //[m/s]
 8002d86:	4b66      	ldr	r3, [pc, #408]	; (8002f20 <BasicTimer3_Callback+0x328>)
 8002d88:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002d8c:	4b5f      	ldr	r3, [pc, #380]	; (8002f0c <BasicTimer3_Callback+0x314>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	ee07 3a90 	vmov	s15, r3
 8002d94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d9c:	4b60      	ldr	r3, [pc, #384]	; (8002f20 <BasicTimer3_Callback+0x328>)
 8002d9e:	edc3 7a08 	vstr	s15, [r3, #32]
			//Reiniciamos el numero de conteos
			handler_Motor_R.parametersMotor.count = 0;
 8002da2:	4b5f      	ldr	r3, [pc, #380]	; (8002f20 <BasicTimer3_Callback+0x328>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	839a      	strh	r2, [r3, #28]
			handler_Motor_L.parametersMotor.count = 0;
 8002da8:	4b5b      	ldr	r3, [pc, #364]	; (8002f18 <BasicTimer3_Callback+0x320>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	839a      	strh	r2, [r3, #28]
			//Reiniciamos variable
			sum_ang = 0;
 8002dae:	4b53      	ldr	r3, [pc, #332]	; (8002efc <BasicTimer3_Callback+0x304>)
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
			//Reiniciamos tiempo
			time_accumulated = 0;
 8002db6:	4b52      	ldr	r3, [pc, #328]	; (8002f00 <BasicTimer3_Callback+0x308>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	801a      	strh	r2, [r3, #0]
			//Reiniciamos el contador de accion
			counting_action = 0;
 8002dbc:	4b51      	ldr	r3, [pc, #324]	; (8002f04 <BasicTimer3_Callback+0x30c>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	801a      	strh	r2, [r3, #0]
			//Levantamos bandera
			flag_action = 1;
 8002dc2:	4b59      	ldr	r3, [pc, #356]	; (8002f28 <BasicTimer3_Callback+0x330>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	701a      	strb	r2, [r3, #0]

		//Combinar ambos ángulos
		ang_complementary = parameter_Posicion_Robot.grad_relativo + ang_for_Displament_ICR;
	}
	else{  __NOP(); }
}
 8002dc8:	e0cb      	b.n	8002f62 <BasicTimer3_Callback+0x36a>
		else{ counting_action++; }
 8002dca:	4b4e      	ldr	r3, [pc, #312]	; (8002f04 <BasicTimer3_Callback+0x30c>)
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	4b4c      	ldr	r3, [pc, #304]	; (8002f04 <BasicTimer3_Callback+0x30c>)
 8002dd4:	801a      	strh	r2, [r3, #0]
}
 8002dd6:	e0c4      	b.n	8002f62 <BasicTimer3_Callback+0x36a>
	else if(flag_mode==2)
 8002dd8:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <BasicTimer3_Callback+0x300>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	f040 80bf 	bne.w	8002f60 <BasicTimer3_Callback+0x368>
		if(counting_action>=timeAction_TIMER_Sampling)
 8002de2:	4b48      	ldr	r3, [pc, #288]	; (8002f04 <BasicTimer3_Callback+0x30c>)
 8002de4:	881a      	ldrh	r2, [r3, #0]
 8002de6:	4b48      	ldr	r3, [pc, #288]	; (8002f08 <BasicTimer3_Callback+0x310>)
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	f0c0 80a4 	bcc.w	8002f38 <BasicTimer3_Callback+0x340>
			time_accion = time_accumulated;
 8002df0:	4b43      	ldr	r3, [pc, #268]	; (8002f00 <BasicTimer3_Callback+0x308>)
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	461a      	mov	r2, r3
 8002df6:	4b45      	ldr	r3, [pc, #276]	; (8002f0c <BasicTimer3_Callback+0x314>)
 8002df8:	601a      	str	r2, [r3, #0]
			handler_Motor_L.parametersMotor.distance = (cm_L*handler_Motor_L.parametersMotor.count);                   //[mm]
 8002dfa:	4b47      	ldr	r3, [pc, #284]	; (8002f18 <BasicTimer3_Callback+0x320>)
 8002dfc:	8b9b      	ldrh	r3, [r3, #28]
 8002dfe:	ee07 3a90 	vmov	s15, r3
 8002e02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e06:	4b45      	ldr	r3, [pc, #276]	; (8002f1c <BasicTimer3_Callback+0x324>)
 8002e08:	edd3 7a00 	vldr	s15, [r3]
 8002e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e10:	4b41      	ldr	r3, [pc, #260]	; (8002f18 <BasicTimer3_Callback+0x320>)
 8002e12:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			handler_Motor_R.parametersMotor.distance = (cm_R*handler_Motor_R.parametersMotor.count);				   //[mm]
 8002e16:	4b42      	ldr	r3, [pc, #264]	; (8002f20 <BasicTimer3_Callback+0x328>)
 8002e18:	8b9b      	ldrh	r3, [r3, #28]
 8002e1a:	ee07 3a90 	vmov	s15, r3
 8002e1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e22:	4b40      	ldr	r3, [pc, #256]	; (8002f24 <BasicTimer3_Callback+0x32c>)
 8002e24:	edd3 7a00 	vldr	s15, [r3]
 8002e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e2c:	4b3c      	ldr	r3, [pc, #240]	; (8002f20 <BasicTimer3_Callback+0x328>)
 8002e2e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/time_accion;      //[m/s]
 8002e32:	4b39      	ldr	r3, [pc, #228]	; (8002f18 <BasicTimer3_Callback+0x320>)
 8002e34:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002e38:	4b34      	ldr	r3, [pc, #208]	; (8002f0c <BasicTimer3_Callback+0x314>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	ee07 3a90 	vmov	s15, r3
 8002e40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e48:	4b33      	ldr	r3, [pc, #204]	; (8002f18 <BasicTimer3_Callback+0x320>)
 8002e4a:	edc3 7a08 	vstr	s15, [r3, #32]
			handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/time_accion;      //[m/s]
 8002e4e:	4b34      	ldr	r3, [pc, #208]	; (8002f20 <BasicTimer3_Callback+0x328>)
 8002e50:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002e54:	4b2d      	ldr	r3, [pc, #180]	; (8002f0c <BasicTimer3_Callback+0x314>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	ee07 3a90 	vmov	s15, r3
 8002e5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e64:	4b2e      	ldr	r3, [pc, #184]	; (8002f20 <BasicTimer3_Callback+0x328>)
 8002e66:	edc3 7a08 	vstr	s15, [r3, #32]
			handler_Motor_R.parametersMotor.count = 0;
 8002e6a:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <BasicTimer3_Callback+0x328>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	839a      	strh	r2, [r3, #28]
			handler_Motor_L.parametersMotor.count = 0;
 8002e70:	4b29      	ldr	r3, [pc, #164]	; (8002f18 <BasicTimer3_Callback+0x320>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	839a      	strh	r2, [r3, #28]
			ang_for_Displament_ICR += (((handler_Motor_R.parametersMotor.distance - handler_Motor_L.parametersMotor.distance)*100)
 8002e76:	4b2a      	ldr	r3, [pc, #168]	; (8002f20 <BasicTimer3_Callback+0x328>)
 8002e78:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002e7c:	4b26      	ldr	r3, [pc, #152]	; (8002f18 <BasicTimer3_Callback+0x320>)
 8002e7e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e86:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002f2c <BasicTimer3_Callback+0x334>
 8002e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
					/distanceBetweenWheels)*(180/M_PI); //[rad]
 8002e8e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002f30 <BasicTimer3_Callback+0x338>
 8002e92:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002e96:	ee16 0a90 	vmov	r0, s13
 8002e9a:	f7fd fb6d 	bl	8000578 <__aeabi_f2d>
 8002e9e:	a310      	add	r3, pc, #64	; (adr r3, 8002ee0 <BasicTimer3_Callback+0x2e8>)
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f7fd fbc0 	bl	8000628 <__aeabi_dmul>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
			ang_for_Displament_ICR += (((handler_Motor_R.parametersMotor.distance - handler_Motor_L.parametersMotor.distance)*100)
 8002eb0:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <BasicTimer3_Callback+0x33c>)
 8002eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb6:	f7fd fa01 	bl	80002bc <__adddf3>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	491d      	ldr	r1, [pc, #116]	; (8002f34 <BasicTimer3_Callback+0x33c>)
 8002ec0:	e9c1 2300 	strd	r2, r3, [r1]
			time_accumulated = 0;
 8002ec4:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <BasicTimer3_Callback+0x308>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	801a      	strh	r2, [r3, #0]
			counting_action = 0;
 8002eca:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <BasicTimer3_Callback+0x30c>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	801a      	strh	r2, [r3, #0]
 8002ed0:	e038      	b.n	8002f44 <BasicTimer3_Callback+0x34c>
 8002ed2:	bf00      	nop
 8002ed4:	f3af 8000 	nop.w
 8002ed8:	54442d18 	.word	0x54442d18
 8002edc:	400921fb 	.word	0x400921fb
 8002ee0:	1a63c1f8 	.word	0x1a63c1f8
 8002ee4:	404ca5dc 	.word	0x404ca5dc
 8002ee8:	20000468 	.word	0x20000468
 8002eec:	200003e0 	.word	0x200003e0
 8002ef0:	200004b0 	.word	0x200004b0
 8002ef4:	2000026c 	.word	0x2000026c
 8002ef8:	200008ae 	.word	0x200008ae
 8002efc:	200004c8 	.word	0x200004c8
 8002f00:	200008c0 	.word	0x200008c0
 8002f04:	200008c2 	.word	0x200008c2
 8002f08:	20000004 	.word	0x20000004
 8002f0c:	200008bc 	.word	0x200008bc
 8002f10:	200004cc 	.word	0x200004cc
 8002f14:	40668000 	.word	0x40668000
 8002f18:	2000037c 	.word	0x2000037c
 8002f1c:	200004d0 	.word	0x200004d0
 8002f20:	20000308 	.word	0x20000308
 8002f24:	200004d4 	.word	0x200004d4
 8002f28:	200008ad 	.word	0x200008ad
 8002f2c:	42c80000 	.word	0x42c80000
 8002f30:	4625a000 	.word	0x4625a000
 8002f34:	200004d8 	.word	0x200004d8
		else{counting_action++;}
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <BasicTimer3_Callback+0x374>)
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <BasicTimer3_Callback+0x374>)
 8002f42:	801a      	strh	r2, [r3, #0]
		ang_complementary = parameter_Posicion_Robot.grad_relativo + ang_for_Displament_ICR;
 8002f44:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <BasicTimer3_Callback+0x378>)
 8002f46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f4a:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <BasicTimer3_Callback+0x37c>)
 8002f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f50:	f7fd f9b4 	bl	80002bc <__adddf3>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4907      	ldr	r1, [pc, #28]	; (8002f78 <BasicTimer3_Callback+0x380>)
 8002f5a:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002f5e:	e000      	b.n	8002f62 <BasicTimer3_Callback+0x36a>
	else{  __NOP(); }
 8002f60:	bf00      	nop
}
 8002f62:	bf00      	nop
 8002f64:	46bd      	mov	sp, r7
 8002f66:	ecbd 8b02 	vpop	{d8}
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	200008c2 	.word	0x200008c2
 8002f70:	20000468 	.word	0x20000468
 8002f74:	200004d8 	.word	0x200004d8
 8002f78:	200004e0 	.word	0x200004e0

08002f7c <callback_extInt1>:

//-------------------------Fotocompuerta--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el EXTI13 y EXTI13
void callback_extInt1(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
	//Aumentamos valor en als cuentas
	handler_Motor_R.parametersMotor.count++;
 8002f80:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <callback_extInt1+0x1c>)
 8002f82:	8b9b      	ldrh	r3, [r3, #28]
 8002f84:	3301      	adds	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	4b03      	ldr	r3, [pc, #12]	; (8002f98 <callback_extInt1+0x1c>)
 8002f8a:	839a      	strh	r2, [r3, #28]
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	20000308 	.word	0x20000308

08002f9c <callback_extInt3>:
void callback_extInt3(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
	//Aumentamos valor en las cuentas
	handler_Motor_L.parametersMotor.count++;
 8002fa0:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <callback_extInt3+0x1c>)
 8002fa2:	8b9b      	ldrh	r3, [r3, #28]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	4b03      	ldr	r3, [pc, #12]	; (8002fb8 <callback_extInt3+0x1c>)
 8002faa:	839a      	strh	r2, [r3, #28]
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	2000037c 	.word	0x2000037c

08002fbc <recepcionCommand>:

//----------------------------Inicio de la definicion de las funciones de los comandos----------------------------------------

//Funcion que recibe los caracteres del comando recibido
void recepcionCommand(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
	if(charRead == '@')
 8002fc0:	4b11      	ldr	r3, [pc, #68]	; (8003008 <recepcionCommand+0x4c>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b40      	cmp	r3, #64	; 0x40
 8002fc6:	d10c      	bne.n	8002fe2 <recepcionCommand+0x26>
	{
		//Almacenamos el elemento nulo
		bufferRecepcion[counterRecepcion] = '\0';
 8002fc8:	4b10      	ldr	r3, [pc, #64]	; (800300c <recepcionCommand+0x50>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4b10      	ldr	r3, [pc, #64]	; (8003010 <recepcionCommand+0x54>)
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	5499      	strb	r1, [r3, r2]
		//Establecemos la bandera como alta
		commandComplete = 1;
 8002fd4:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <recepcionCommand+0x58>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]
		//Reiniciamos la variable
		counterRecepcion = 0;
 8002fda:	4b0c      	ldr	r3, [pc, #48]	; (800300c <recepcionCommand+0x50>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
		//Aumentamos en uno la posicion del arreglo
		counterRecepcion++;
		//Reiniciamos la variable
	}

}
 8002fe0:	e00c      	b.n	8002ffc <recepcionCommand+0x40>
		bufferRecepcion[counterRecepcion] = charRead;
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	; (800300c <recepcionCommand+0x50>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4b07      	ldr	r3, [pc, #28]	; (8003008 <recepcionCommand+0x4c>)
 8002fea:	7819      	ldrb	r1, [r3, #0]
 8002fec:	4b08      	ldr	r3, [pc, #32]	; (8003010 <recepcionCommand+0x54>)
 8002fee:	5499      	strb	r1, [r3, r2]
		counterRecepcion++;
 8002ff0:	4b06      	ldr	r3, [pc, #24]	; (800300c <recepcionCommand+0x50>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <recepcionCommand+0x50>)
 8002ffa:	701a      	strb	r2, [r3, #0]
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	20000000 	.word	0x20000000
 800300c:	200008c4 	.word	0x200008c4
 8003010:	200008c8 	.word	0x200008c8
 8003014:	20000009 	.word	0x20000009

08003018 <runCommand>:

//Funcion que ejecuta el comando ingresando
void runCommand(char *prtcommand)
{
 8003018:	b5b0      	push	{r4, r5, r7, lr}
 800301a:	b09a      	sub	sp, #104	; 0x68
 800301c:	af04      	add	r7, sp, #16
 800301e:	6078      	str	r0, [r7, #4]
	//Variables para almacenar los elmentos que entrega el comando luego de ser divididos por la funcion sscanf
	char cmd[64]= {0};
 8003020:	2300      	movs	r3, #0
 8003022:	61bb      	str	r3, [r7, #24]
 8003024:	f107 031c 	add.w	r3, r7, #28
 8003028:	223c      	movs	r2, #60	; 0x3c
 800302a:	2100      	movs	r1, #0
 800302c:	4618      	mov	r0, r3
 800302e:	f003 fdad 	bl	8006b8c <memset>
	int firtsParameter = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
	int secondParameter = 0;
 8003036:	2300      	movs	r3, #0
 8003038:	613b      	str	r3, [r7, #16]
	int thirdParameter = 0;
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
	int forthParameter = 0;
 800303e:	2300      	movs	r3, #0
 8003040:	60bb      	str	r3, [r7, #8]
	//char bufferMsg[64]= {0};

	//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
	sscanf(prtcommand, "%s %u %u %u %u", cmd, &firtsParameter, &secondParameter, &thirdParameter, &forthParameter);
 8003042:	f107 0114 	add.w	r1, r7, #20
 8003046:	f107 0218 	add.w	r2, r7, #24
 800304a:	f107 0308 	add.w	r3, r7, #8
 800304e:	9302      	str	r3, [sp, #8]
 8003050:	f107 030c 	add.w	r3, r7, #12
 8003054:	9301      	str	r3, [sp, #4]
 8003056:	f107 0310 	add.w	r3, r7, #16
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	460b      	mov	r3, r1
 800305e:	497e      	ldr	r1, [pc, #504]	; (8003258 <runCommand+0x240>)
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f004 fc3b 	bl	80078dc <siscanf>

	//Imprime lista que muestra los comandos que tiene el dispositivo
	if(strcmp(cmd, "help")==0)
 8003066:	f107 0318 	add.w	r3, r7, #24
 800306a:	497c      	ldr	r1, [pc, #496]	; (800325c <runCommand+0x244>)
 800306c:	4618      	mov	r0, r3
 800306e:	f7fd f8b7 	bl	80001e0 <strcmp>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d128      	bne.n	80030ca <runCommand+0xb2>
	{
		writeMsgForTXE(&handler_USART_USB, "Help Menu: \n");
 8003078:	4979      	ldr	r1, [pc, #484]	; (8003260 <runCommand+0x248>)
 800307a:	487a      	ldr	r0, [pc, #488]	; (8003264 <runCommand+0x24c>)
 800307c:	f003 fb54 	bl	8006728 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "1) help  ---Imprime lista de comandos. \n");
 8003080:	4979      	ldr	r1, [pc, #484]	; (8003268 <runCommand+0x250>)
 8003082:	4878      	ldr	r0, [pc, #480]	; (8003264 <runCommand+0x24c>)
 8003084:	f003 fb50 	bl	8006728 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "2) dutty # --- Cambiar el valor de dutty [%] \n");
 8003088:	4978      	ldr	r1, [pc, #480]	; (800326c <runCommand+0x254>)
 800308a:	4876      	ldr	r0, [pc, #472]	; (8003264 <runCommand+0x24c>)
 800308c:	f003 fb4c 	bl	8006728 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "3) frequency # --- Cambiar el valor de la frecuenencia del motor [HZ] \n");
 8003090:	4977      	ldr	r1, [pc, #476]	; (8003270 <runCommand+0x258>)
 8003092:	4874      	ldr	r0, [pc, #464]	; (8003264 <runCommand+0x24c>)
 8003094:	f003 fb48 	bl	8006728 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "4) line # ---Inicia Linea recta, #: dist [mm]  \n");
 8003098:	4976      	ldr	r1, [pc, #472]	; (8003274 <runCommand+0x25c>)
 800309a:	4872      	ldr	r0, [pc, #456]	; (8003264 <runCommand+0x24c>)
 800309c:	f003 fb44 	bl	8006728 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "5) turn # # ---Iniciamos el giro del robot #: ang [grados]# \n");
 80030a0:	4975      	ldr	r1, [pc, #468]	; (8003278 <runCommand+0x260>)
 80030a2:	4870      	ldr	r0, [pc, #448]	; (8003264 <runCommand+0x24c>)
 80030a4:	f003 fb40 	bl	8006728 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "6) square # # --- Ejecucion del cuadrado #: lado [mm], #: dir 0->L 1->R \n");
 80030a8:	4974      	ldr	r1, [pc, #464]	; (800327c <runCommand+0x264>)
 80030aa:	486e      	ldr	r0, [pc, #440]	; (8003264 <runCommand+0x24c>)
 80030ac:	f003 fb3c 	bl	8006728 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "7) stop --- Para la ejecucion de los motore \n");
 80030b0:	4973      	ldr	r1, [pc, #460]	; (8003280 <runCommand+0x268>)
 80030b2:	486c      	ldr	r0, [pc, #432]	; (8003264 <runCommand+0x24c>)
 80030b4:	f003 fb38 	bl	8006728 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "8) init --- Reinicia las coordenadas globales \n");
 80030b8:	4972      	ldr	r1, [pc, #456]	; (8003284 <runCommand+0x26c>)
 80030ba:	486a      	ldr	r0, [pc, #424]	; (8003264 <runCommand+0x24c>)
 80030bc:	f003 fb34 	bl	8006728 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "0) const #  ---alpha 1--> 0.01 \n");
 80030c0:	4971      	ldr	r1, [pc, #452]	; (8003288 <runCommand+0x270>)
 80030c2:	4868      	ldr	r0, [pc, #416]	; (8003264 <runCommand+0x24c>)
 80030c4:	f003 fb30 	bl	8006728 <writeMsgForTXE>
		//Se imprime que el comando no fue valido
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
	}


}
 80030c8:	e0b7      	b.n	800323a <runCommand+0x222>
	else if (strcmp(cmd, "dutty") == 0)
 80030ca:	f107 0318 	add.w	r3, r7, #24
 80030ce:	496f      	ldr	r1, [pc, #444]	; (800328c <runCommand+0x274>)
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fd f885 	bl	80001e0 <strcmp>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d120      	bne.n	800311e <runCommand+0x106>
		duttySetPoint= firtsParameter;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	4b6b      	ldr	r3, [pc, #428]	; (8003290 <runCommand+0x278>)
 80030e2:	701a      	strb	r2, [r3, #0]
		velSetPoint = (0.00169*duttySetPoint + 0.0619);
 80030e4:	4b6a      	ldr	r3, [pc, #424]	; (8003290 <runCommand+0x278>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fd fa33 	bl	8000554 <__aeabi_i2d>
 80030ee:	a356      	add	r3, pc, #344	; (adr r3, 8003248 <runCommand+0x230>)
 80030f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f4:	f7fd fa98 	bl	8000628 <__aeabi_dmul>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4610      	mov	r0, r2
 80030fe:	4619      	mov	r1, r3
 8003100:	a353      	add	r3, pc, #332	; (adr r3, 8003250 <runCommand+0x238>)
 8003102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003106:	f7fd f8d9 	bl	80002bc <__adddf3>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4610      	mov	r0, r2
 8003110:	4619      	mov	r1, r3
 8003112:	f7fd fd81 	bl	8000c18 <__aeabi_d2f>
 8003116:	4603      	mov	r3, r0
 8003118:	4a5e      	ldr	r2, [pc, #376]	; (8003294 <runCommand+0x27c>)
 800311a:	6013      	str	r3, [r2, #0]
}
 800311c:	e08d      	b.n	800323a <runCommand+0x222>
	else if (strcmp(cmd, "frequency") == 0)
 800311e:	f107 0318 	add.w	r3, r7, #24
 8003122:	495d      	ldr	r1, [pc, #372]	; (8003298 <runCommand+0x280>)
 8003124:	4618      	mov	r0, r3
 8003126:	f7fd f85b 	bl	80001e0 <strcmp>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d104      	bne.n	800313a <runCommand+0x122>
		frequency_PWM_Motor = firtsParameter;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	b29a      	uxth	r2, r3
 8003134:	4b59      	ldr	r3, [pc, #356]	; (800329c <runCommand+0x284>)
 8003136:	801a      	strh	r2, [r3, #0]
}
 8003138:	e07f      	b.n	800323a <runCommand+0x222>
	else if (strcmp(cmd, "line") == 0)
 800313a:	f107 0318 	add.w	r3, r7, #24
 800313e:	4958      	ldr	r1, [pc, #352]	; (80032a0 <runCommand+0x288>)
 8003140:	4618      	mov	r0, r3
 8003142:	f7fd f84d 	bl	80001e0 <strcmp>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10a      	bne.n	8003162 <runCommand+0x14a>
		change_position(&parameter_Path_Robot, firtsParameter);
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	4619      	mov	r1, r3
 8003150:	4854      	ldr	r0, [pc, #336]	; (80032a4 <runCommand+0x28c>)
 8003152:	f7fe fc81 	bl	8001a58 <change_position>
		straight_line(duttySetPoint);
 8003156:	4b4e      	ldr	r3, [pc, #312]	; (8003290 <runCommand+0x278>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f000 f8b8 	bl	80032d0 <straight_line>
}
 8003160:	e06b      	b.n	800323a <runCommand+0x222>
	else if (strcmp(cmd, "turn") == 0)
 8003162:	f107 0318 	add.w	r3, r7, #24
 8003166:	4950      	ldr	r1, [pc, #320]	; (80032a8 <runCommand+0x290>)
 8003168:	4618      	mov	r0, r3
 800316a:	f7fd f839 	bl	80001e0 <strcmp>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10b      	bne.n	800318c <runCommand+0x174>
		if(secondParameter==1){ firtsParameter = -1*firtsParameter;}
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d102      	bne.n	8003180 <runCommand+0x168>
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	425b      	negs	r3, r3
 800317e:	617b      	str	r3, [r7, #20]
		turn_itself(firtsParameter);    //a = [grados], b = Direccion giro, c = Porcentaje dutty
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	b21b      	sxth	r3, r3
 8003184:	4618      	mov	r0, r3
 8003186:	f000 f9a7 	bl	80034d8 <turn_itself>
}
 800318a:	e056      	b.n	800323a <runCommand+0x222>
	else if (strcmp(cmd, "square") == 0)
 800318c:	f107 0318 	add.w	r3, r7, #24
 8003190:	4946      	ldr	r1, [pc, #280]	; (80032ac <runCommand+0x294>)
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd f824 	bl	80001e0 <strcmp>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d11b      	bne.n	80031d6 <runCommand+0x1be>
		init_coordinates();
 800319e:	f000 fa07 	bl	80035b0 <init_coordinates>
		set_operation_square(list_operation, firtsParameter, secondParameter);
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fd f9d5 	bl	8000554 <__aeabi_i2d>
 80031aa:	4604      	mov	r4, r0
 80031ac:	460d      	mov	r5, r1
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd f9cf 	bl	8000554 <__aeabi_i2d>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	ec43 2b11 	vmov	d1, r2, r3
 80031be:	ec45 4b10 	vmov	d0, r4, r5
 80031c2:	483b      	ldr	r0, [pc, #236]	; (80032b0 <runCommand+0x298>)
 80031c4:	f000 fa76 	bl	80036b4 <set_operation_square>
		counting_operation = 0;
 80031c8:	4b3a      	ldr	r3, [pc, #232]	; (80032b4 <runCommand+0x29c>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]
		flag_multioperation = 1;
 80031ce:	4b3a      	ldr	r3, [pc, #232]	; (80032b8 <runCommand+0x2a0>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	701a      	strb	r2, [r3, #0]
}
 80031d4:	e031      	b.n	800323a <runCommand+0x222>
	else if (strcmp(cmd, "stop") == 0)
 80031d6:	f107 0318 	add.w	r3, r7, #24
 80031da:	4938      	ldr	r1, [pc, #224]	; (80032bc <runCommand+0x2a4>)
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fc ffff 	bl	80001e0 <strcmp>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10d      	bne.n	8003204 <runCommand+0x1ec>
		flag_multioperation = 0;
 80031e8:	4b33      	ldr	r3, [pc, #204]	; (80032b8 <runCommand+0x2a0>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	701a      	strb	r2, [r3, #0]
		counting_operation = 0;
 80031ee:	4b31      	ldr	r3, [pc, #196]	; (80032b4 <runCommand+0x29c>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	701a      	strb	r2, [r3, #0]
		status_motor(RESET);
 80031f4:	2080      	movs	r0, #128	; 0x80
 80031f6:	f000 fbb5 	bl	8003964 <status_motor>
		writeMsgForTXE(&handler_USART_USB, "Ejecucion Finalizada \n");
 80031fa:	4931      	ldr	r1, [pc, #196]	; (80032c0 <runCommand+0x2a8>)
 80031fc:	4819      	ldr	r0, [pc, #100]	; (8003264 <runCommand+0x24c>)
 80031fe:	f003 fa93 	bl	8006728 <writeMsgForTXE>
}
 8003202:	e01a      	b.n	800323a <runCommand+0x222>
	else if (strcmp(cmd, "init") == 0)
 8003204:	f107 0318 	add.w	r3, r7, #24
 8003208:	492e      	ldr	r1, [pc, #184]	; (80032c4 <runCommand+0x2ac>)
 800320a:	4618      	mov	r0, r3
 800320c:	f7fc ffe8 	bl	80001e0 <strcmp>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d102      	bne.n	800321c <runCommand+0x204>
		init_coordinates();
 8003216:	f000 f9cb 	bl	80035b0 <init_coordinates>
}
 800321a:	e00e      	b.n	800323a <runCommand+0x222>
	else if (strcmp(cmd, "const") == 0)
 800321c:	f107 0318 	add.w	r3, r7, #24
 8003220:	4929      	ldr	r1, [pc, #164]	; (80032c8 <runCommand+0x2b0>)
 8003222:	4618      	mov	r0, r3
 8003224:	f7fc ffdc 	bl	80001e0 <strcmp>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <runCommand+0x21a>
		__NOP();
 800322e:	bf00      	nop
}
 8003230:	e003      	b.n	800323a <runCommand+0x222>
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
 8003232:	4926      	ldr	r1, [pc, #152]	; (80032cc <runCommand+0x2b4>)
 8003234:	480b      	ldr	r0, [pc, #44]	; (8003264 <runCommand+0x24c>)
 8003236:	f003 fa77 	bl	8006728 <writeMsgForTXE>
}
 800323a:	bf00      	nop
 800323c:	3758      	adds	r7, #88	; 0x58
 800323e:	46bd      	mov	sp, r7
 8003240:	bdb0      	pop	{r4, r5, r7, pc}
 8003242:	bf00      	nop
 8003244:	f3af 8000 	nop.w
 8003248:	aebc408e 	.word	0xaebc408e
 800324c:	3f5bb05f 	.word	0x3f5bb05f
 8003250:	573eab36 	.word	0x573eab36
 8003254:	3fafb15b 	.word	0x3fafb15b
 8003258:	0800e5f0 	.word	0x0800e5f0
 800325c:	0800e600 	.word	0x0800e600
 8003260:	0800e608 	.word	0x0800e608
 8003264:	2000028c 	.word	0x2000028c
 8003268:	0800e618 	.word	0x0800e618
 800326c:	0800e644 	.word	0x0800e644
 8003270:	0800e674 	.word	0x0800e674
 8003274:	0800e6bc 	.word	0x0800e6bc
 8003278:	0800e6f0 	.word	0x0800e6f0
 800327c:	0800e730 	.word	0x0800e730
 8003280:	0800e77c 	.word	0x0800e77c
 8003284:	0800e7ac 	.word	0x0800e7ac
 8003288:	0800e7dc 	.word	0x0800e7dc
 800328c:	0800e800 	.word	0x0800e800
 8003290:	20000008 	.word	0x20000008
 8003294:	200008b8 	.word	0x200008b8
 8003298:	0800e808 	.word	0x0800e808
 800329c:	20000006 	.word	0x20000006
 80032a0:	0800e814 	.word	0x0800e814
 80032a4:	20000400 	.word	0x20000400
 80032a8:	0800e81c 	.word	0x0800e81c
 80032ac:	0800e824 	.word	0x0800e824
 80032b0:	200004e8 	.word	0x200004e8
 80032b4:	200008af 	.word	0x200008af
 80032b8:	200008ac 	.word	0x200008ac
 80032bc:	0800e82c 	.word	0x0800e82c
 80032c0:	0800e834 	.word	0x0800e834
 80032c4:	0800e84c 	.word	0x0800e84c
 80032c8:	0800e854 	.word	0x0800e854
 80032cc:	0800e85c 	.word	0x0800e85c

080032d0 <straight_line>:


//------------------------------Inicio de la definicion de funciones del modo----------------------------------------
//------linea recta------
void straight_line(uint8_t dutty)   //a = [mm]
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	71fb      	strb	r3, [r7, #7]
	//---------Calculo parametros de la linea recta---------
	calculation_parameter_distance(&parameter_Path_Robot);
 80032da:	4871      	ldr	r0, [pc, #452]	; (80034a0 <straight_line+0x1d0>)
 80032dc:	f7fe fcbc 	bl	8001c58 <calculation_parameter_distance>
	//---------Configuracion coordenadas medidas---------
	//Coordenadas Globales
	parameter_Posicion_Robot.grad_grobal += ang_complementary;
 80032e0:	4b70      	ldr	r3, [pc, #448]	; (80034a4 <straight_line+0x1d4>)
 80032e2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80032e6:	4b70      	ldr	r3, [pc, #448]	; (80034a8 <straight_line+0x1d8>)
 80032e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ec:	f7fc ffe6 	bl	80002bc <__adddf3>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	496b      	ldr	r1, [pc, #428]	; (80034a4 <straight_line+0x1d4>)
 80032f6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	//Reiniciaos Coordenadas relativas
	parameter_Posicion_Robot.xr_position = parameter_Posicion_Robot.yr_position = 0;
 80032fa:	496a      	ldr	r1, [pc, #424]	; (80034a4 <straight_line+0x1d4>)
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8003308:	4b66      	ldr	r3, [pc, #408]	; (80034a4 <straight_line+0x1d4>)
 800330a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800330e:	4965      	ldr	r1, [pc, #404]	; (80034a4 <straight_line+0x1d4>)
 8003310:	e9c1 2306 	strd	r2, r3, [r1, #24]
	parameter_Posicion_Robot.phi_relativo = 0;
 8003314:	4963      	ldr	r1, [pc, #396]	; (80034a4 <straight_line+0x1d4>)
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	parameter_Posicion_Robot.grad_relativo = 0;
 8003322:	4960      	ldr	r1, [pc, #384]	; (80034a4 <straight_line+0x1d4>)
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	e9c1 2300 	strd	r2, r3, [r1]
	ang_for_Displament_ICR = 0;
 8003330:	495e      	ldr	r1, [pc, #376]	; (80034ac <straight_line+0x1dc>)
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9c1 2300 	strd	r2, r3, [r1]
	//---------Configuracion coordenadas teoricas---------
	parameter_Path_Robot.rotative_Grad_Relative = 0;
 800333e:	4b58      	ldr	r3, [pc, #352]	; (80034a0 <straight_line+0x1d0>)
 8003340:	2200      	movs	r2, #0
 8003342:	639a      	str	r2, [r3, #56]	; 0x38
	//Calculos extra
	cos_cal = cos(((parameter_Posicion_Robot.grad_grobal*M_PI)/180));
 8003344:	4b57      	ldr	r3, [pc, #348]	; (80034a4 <straight_line+0x1d4>)
 8003346:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800334a:	a353      	add	r3, pc, #332	; (adr r3, 8003498 <straight_line+0x1c8>)
 800334c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003350:	f7fd f96a 	bl	8000628 <__aeabi_dmul>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4610      	mov	r0, r2
 800335a:	4619      	mov	r1, r3
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	4b53      	ldr	r3, [pc, #332]	; (80034b0 <straight_line+0x1e0>)
 8003362:	f7fd fa8b 	bl	800087c <__aeabi_ddiv>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	ec43 2b17 	vmov	d7, r2, r3
 800336e:	eeb0 0a47 	vmov.f32	s0, s14
 8003372:	eef0 0a67 	vmov.f32	s1, s15
 8003376:	f008 fcbb 	bl	800bcf0 <cos>
 800337a:	ec53 2b10 	vmov	r2, r3, d0
 800337e:	4610      	mov	r0, r2
 8003380:	4619      	mov	r1, r3
 8003382:	f7fd fc49 	bl	8000c18 <__aeabi_d2f>
 8003386:	4603      	mov	r3, r0
 8003388:	4a4a      	ldr	r2, [pc, #296]	; (80034b4 <straight_line+0x1e4>)
 800338a:	6013      	str	r3, [r2, #0]
	sin_cal = sin(((parameter_Posicion_Robot.grad_grobal*M_PI)/180));
 800338c:	4b45      	ldr	r3, [pc, #276]	; (80034a4 <straight_line+0x1d4>)
 800338e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003392:	a341      	add	r3, pc, #260	; (adr r3, 8003498 <straight_line+0x1c8>)
 8003394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003398:	f7fd f946 	bl	8000628 <__aeabi_dmul>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4610      	mov	r0, r2
 80033a2:	4619      	mov	r1, r3
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	4b41      	ldr	r3, [pc, #260]	; (80034b0 <straight_line+0x1e0>)
 80033aa:	f7fd fa67 	bl	800087c <__aeabi_ddiv>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	ec43 2b17 	vmov	d7, r2, r3
 80033b6:	eeb0 0a47 	vmov.f32	s0, s14
 80033ba:	eef0 0a67 	vmov.f32	s1, s15
 80033be:	f008 fceb 	bl	800bd98 <sin>
 80033c2:	ec53 2b10 	vmov	r2, r3, d0
 80033c6:	4610      	mov	r0, r2
 80033c8:	4619      	mov	r1, r3
 80033ca:	f7fd fc25 	bl	8000c18 <__aeabi_d2f>
 80033ce:	4603      	mov	r3, r0
 80033d0:	4a39      	ldr	r2, [pc, #228]	; (80034b8 <straight_line+0x1e8>)
 80033d2:	6013      	str	r3, [r2, #0]
	//-----------------PID-------------------------
	//Establecemos valores iniciales
	handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_prev = 0;
 80033d4:	4b39      	ldr	r3, [pc, #228]	; (80034bc <straight_line+0x1ec>)
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	60da      	str	r2, [r3, #12]
 80033dc:	4b37      	ldr	r3, [pc, #220]	; (80034bc <straight_line+0x1ec>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4a36      	ldr	r2, [pc, #216]	; (80034bc <straight_line+0x1ec>)
 80033e2:	6053      	str	r3, [r2, #4]
	handler_Motor_L.parametersMotor.parametersPID.u =  handler_Motor_L.parametersMotor.parametersPID.e_intel = 0;
 80033e4:	4b35      	ldr	r3, [pc, #212]	; (80034bc <straight_line+0x1ec>)
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	609a      	str	r2, [r3, #8]
 80033ec:	4b33      	ldr	r3, [pc, #204]	; (80034bc <straight_line+0x1ec>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	4a32      	ldr	r2, [pc, #200]	; (80034bc <straight_line+0x1ec>)
 80033f2:	6013      	str	r3, [r2, #0]
	handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_prev = 0;
 80033f4:	4b32      	ldr	r3, [pc, #200]	; (80034c0 <straight_line+0x1f0>)
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	60da      	str	r2, [r3, #12]
 80033fc:	4b30      	ldr	r3, [pc, #192]	; (80034c0 <straight_line+0x1f0>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4a2f      	ldr	r2, [pc, #188]	; (80034c0 <straight_line+0x1f0>)
 8003402:	6053      	str	r3, [r2, #4]
	handler_Motor_R.parametersMotor.parametersPID.u =  handler_Motor_R.parametersMotor.parametersPID.e_intel = 0;
 8003404:	4b2e      	ldr	r3, [pc, #184]	; (80034c0 <straight_line+0x1f0>)
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	4b2c      	ldr	r3, [pc, #176]	; (80034c0 <straight_line+0x1f0>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	4a2b      	ldr	r2, [pc, #172]	; (80034c0 <straight_line+0x1f0>)
 8003412:	6013      	str	r3, [r2, #0]
	parameter_PID_distace.e = parameter_PID_distace.e_prev = parameter_PID_distace.u =  parameter_PID_distace.e_intel = 0;
 8003414:	4b2b      	ldr	r3, [pc, #172]	; (80034c4 <straight_line+0x1f4>)
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	4b29      	ldr	r3, [pc, #164]	; (80034c4 <straight_line+0x1f4>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	4a28      	ldr	r2, [pc, #160]	; (80034c4 <straight_line+0x1f4>)
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	4b27      	ldr	r3, [pc, #156]	; (80034c4 <straight_line+0x1f4>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a26      	ldr	r2, [pc, #152]	; (80034c4 <straight_line+0x1f4>)
 800342a:	60d3      	str	r3, [r2, #12]
 800342c:	4b25      	ldr	r3, [pc, #148]	; (80034c4 <straight_line+0x1f4>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4a24      	ldr	r2, [pc, #144]	; (80034c4 <straight_line+0x1f4>)
 8003432:	6053      	str	r3, [r2, #4]
	//-------------Configruacion Modo--------------
	//Definimos el dutty inicial
	handler_Motor_L.configMotor.new_dutty = duttySetPoint;
 8003434:	4b24      	ldr	r3, [pc, #144]	; (80034c8 <straight_line+0x1f8>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	ee07 3a90 	vmov	s15, r3
 800343c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003440:	4b1e      	ldr	r3, [pc, #120]	; (80034bc <straight_line+0x1ec>)
 8003442:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	handler_Motor_R.configMotor.new_dutty = duttySetPoint;
 8003446:	4b20      	ldr	r3, [pc, #128]	; (80034c8 <straight_line+0x1f8>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	ee07 3a90 	vmov	s15, r3
 800344e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003452:	4b1b      	ldr	r3, [pc, #108]	; (80034c0 <straight_line+0x1f0>)
 8003454:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	//Reiniciamos variables
	time_accumulated = counting_action = flag_action = 0;
 8003458:	4b1c      	ldr	r3, [pc, #112]	; (80034cc <straight_line+0x1fc>)
 800345a:	2200      	movs	r2, #0
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	4b1c      	ldr	r3, [pc, #112]	; (80034d0 <straight_line+0x200>)
 8003460:	2200      	movs	r2, #0
 8003462:	801a      	strh	r2, [r3, #0]
 8003464:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <straight_line+0x200>)
 8003466:	881a      	ldrh	r2, [r3, #0]
 8003468:	4b1a      	ldr	r3, [pc, #104]	; (80034d4 <straight_line+0x204>)
 800346a:	801a      	strh	r2, [r3, #0]
	//Cargamos la configuracion del modo e iniciamos el modo
	config_mode(1, dutty, dutty);
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003476:	79fb      	ldrb	r3, [r7, #7]
 8003478:	ee07 3a10 	vmov	s14, r3
 800347c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003480:	eef0 0a47 	vmov.f32	s1, s14
 8003484:	eeb0 0a67 	vmov.f32	s0, s15
 8003488:	2001      	movs	r0, #1
 800348a:	f000 f861 	bl	8003550 <config_mode>
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	54442d18 	.word	0x54442d18
 800349c:	400921fb 	.word	0x400921fb
 80034a0:	20000400 	.word	0x20000400
 80034a4:	20000468 	.word	0x20000468
 80034a8:	200004e0 	.word	0x200004e0
 80034ac:	200004d8 	.word	0x200004d8
 80034b0:	40668000 	.word	0x40668000
 80034b4:	200004c0 	.word	0x200004c0
 80034b8:	200004c4 	.word	0x200004c4
 80034bc:	2000037c 	.word	0x2000037c
 80034c0:	20000308 	.word	0x20000308
 80034c4:	200003e4 	.word	0x200003e4
 80034c8:	20000008 	.word	0x20000008
 80034cc:	200008ad 	.word	0x200008ad
 80034d0:	200008c2 	.word	0x200008c2
 80034d4:	200008c0 	.word	0x200008c0

080034d8 <turn_itself>:

//---------Giro sobre si mismo---------
void turn_itself(int16_t turn_grad)     //a = [grados], b = direccion giro
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	80fb      	strh	r3, [r7, #6]
	//-------------Configruacion Modo--------------
	//Definicion del angulo de giro
	parameter_Path_Robot.rotative_Grad += parameter_Path_Robot.rotative_Grad_Relative += turn_grad;
 80034e2:	4b17      	ldr	r3, [pc, #92]	; (8003540 <turn_itself+0x68>)
 80034e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ea:	4413      	add	r3, r2
 80034ec:	4a14      	ldr	r2, [pc, #80]	; (8003540 <turn_itself+0x68>)
 80034ee:	6393      	str	r3, [r2, #56]	; 0x38
 80034f0:	4b13      	ldr	r3, [pc, #76]	; (8003540 <turn_itself+0x68>)
 80034f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034f4:	4b12      	ldr	r3, [pc, #72]	; (8003540 <turn_itself+0x68>)
 80034f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f8:	4413      	add	r3, r2
 80034fa:	4a11      	ldr	r2, [pc, #68]	; (8003540 <turn_itself+0x68>)
 80034fc:	63d3      	str	r3, [r2, #60]	; 0x3c
	//Cambiamso la direccion del motor
	if(turn_grad<0)
 80034fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003502:	2b00      	cmp	r3, #0
 8003504:	da08      	bge.n	8003518 <turn_itself+0x40>
	{
		//Seleccionamos el motor derecho
		handler_Motor_Execute = &handler_Motor_R;
 8003506:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <turn_itself+0x6c>)
 8003508:	4a0f      	ldr	r2, [pc, #60]	; (8003548 <turn_itself+0x70>)
 800350a:	601a      	str	r2, [r3, #0]
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 800350c:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <turn_itself+0x6c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f7fe f9b2 	bl	800187a <updateDirMotor>
 8003516:	e007      	b.n	8003528 <turn_itself+0x50>
	}
	else
	{
		//Seleccionamos el motor izquierdo
		handler_Motor_Execute = &handler_Motor_L;
 8003518:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <turn_itself+0x6c>)
 800351a:	4a0c      	ldr	r2, [pc, #48]	; (800354c <turn_itself+0x74>)
 800351c:	601a      	str	r2, [r3, #0]
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 800351e:	4b09      	ldr	r3, [pc, #36]	; (8003544 <turn_itself+0x6c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7fe f9a9 	bl	800187a <updateDirMotor>
	}

	//Cargamos la configuracion del modo e iniciamos el modo
	config_mode(2,20,21);
 8003528:	eef3 0a05 	vmov.f32	s1, #53	; 0x41a80000  21.0
 800352c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003530:	2002      	movs	r0, #2
 8003532:	f000 f80d 	bl	8003550 <config_mode>
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20000400 	.word	0x20000400
 8003544:	200008a8 	.word	0x200008a8
 8003548:	20000308 	.word	0x20000308
 800354c:	2000037c 	.word	0x2000037c

08003550 <config_mode>:


void config_mode(uint8_t status, float dutty_L, float dutty_R)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	ed87 0a02 	vstr	s0, [r7, #8]
 800355c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003560:	73fb      	strb	r3, [r7, #15]
	//Cargamos la configuracion
	config_motor(status, dutty_L, dutty_R, frequency_PWM_Motor); //Tipo de Estudio, por dutty L, por dutty R, fre pwm [hz]
 8003562:	edd7 7a02 	vldr	s15, [r7, #8]
 8003566:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800356a:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <config_mode+0x58>)
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	ee07 3a90 	vmov	s15, r3
 8003572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	eef0 0a67 	vmov.f32	s1, s15
 800357c:	ed97 0a01 	vldr	s0, [r7, #4]
 8003580:	ee17 1a10 	vmov	r1, s14
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fa71 	bl	8003a6c <config_motor>
	//Iniciamos los motores
	status_motor(SET);
 800358a:	2001      	movs	r0, #1
 800358c:	f000 f9ea 	bl	8003964 <status_motor>
	//Medimos el tiempo inicial
	sample_Gyro.timer_prev = getTicksMs();
 8003590:	f002 fddc 	bl	800614c <getTicksMs>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4904      	ldr	r1, [pc, #16]	; (80035ac <config_mode+0x5c>)
 800359a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000006 	.word	0x20000006
 80035ac:	200004b0 	.word	0x200004b0

080035b0 <init_coordinates>:

void init_coordinates(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
	//Reinicio de varibable
	ang_for_Displament_ICR = 0;
 80035b4:	493b      	ldr	r1, [pc, #236]	; (80036a4 <init_coordinates+0xf4>)
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	e9c1 2300 	strd	r2, r3, [r1]
	ang_complementary = 0;
 80035c2:	4939      	ldr	r1, [pc, #228]	; (80036a8 <init_coordinates+0xf8>)
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	e9c1 2300 	strd	r2, r3, [r1]
	//Reinicio de parametros de la structura de la posicion del robot
	parameter_Posicion_Robot.grad_grobal = 0; parameter_Posicion_Robot.grad_relativo = 0; parameter_Posicion_Robot.phi_relativo = 0;
 80035d0:	4936      	ldr	r1, [pc, #216]	; (80036ac <init_coordinates+0xfc>)
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80035de:	4933      	ldr	r1, [pc, #204]	; (80036ac <init_coordinates+0xfc>)
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	e9c1 2300 	strd	r2, r3, [r1]
 80035ec:	492f      	ldr	r1, [pc, #188]	; (80036ac <init_coordinates+0xfc>)
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	parameter_Posicion_Robot.xg_position = 0; parameter_Posicion_Robot.xg_position_inicial = 0; parameter_Posicion_Robot.xr_position = 0;
 80035fa:	492c      	ldr	r1, [pc, #176]	; (80036ac <init_coordinates+0xfc>)
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8003608:	4928      	ldr	r1, [pc, #160]	; (80036ac <init_coordinates+0xfc>)
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8003616:	4925      	ldr	r1, [pc, #148]	; (80036ac <init_coordinates+0xfc>)
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	e9c1 2306 	strd	r2, r3, [r1, #24]
	parameter_Posicion_Robot.yg_position = 0; parameter_Posicion_Robot.yg_position_inicial = 0; parameter_Posicion_Robot.yr_position = 0;
 8003624:	4921      	ldr	r1, [pc, #132]	; (80036ac <init_coordinates+0xfc>)
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	f04f 0300 	mov.w	r3, #0
 800362e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8003632:	491e      	ldr	r1, [pc, #120]	; (80036ac <init_coordinates+0xfc>)
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8003640:	491a      	ldr	r1, [pc, #104]	; (80036ac <init_coordinates+0xfc>)
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//Reinicio de parametros de la structura de path
	parameter_Path_Robot.goal_Position_x = 0; parameter_Path_Robot.goal_Position_y = 0;
 800364e:	4918      	ldr	r1, [pc, #96]	; (80036b0 <init_coordinates+0x100>)
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 800365c:	4914      	ldr	r1, [pc, #80]	; (80036b0 <init_coordinates+0x100>)
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	parameter_Path_Robot.line_Distance = 0;
 800366a:	4b11      	ldr	r3, [pc, #68]	; (80036b0 <init_coordinates+0x100>)
 800366c:	2200      	movs	r2, #0
 800366e:	641a      	str	r2, [r3, #64]	; 0x40
	parameter_Path_Robot.rotative_Grad = 0; parameter_Path_Robot.rotative_Grad_Relative = 0;
 8003670:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <init_coordinates+0x100>)
 8003672:	2200      	movs	r2, #0
 8003674:	63da      	str	r2, [r3, #60]	; 0x3c
 8003676:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <init_coordinates+0x100>)
 8003678:	2200      	movs	r2, #0
 800367a:	639a      	str	r2, [r3, #56]	; 0x38
	parameter_Path_Robot.start_position_x = 0; parameter_Path_Robot.start_position_y = 0;
 800367c:	490c      	ldr	r1, [pc, #48]	; (80036b0 <init_coordinates+0x100>)
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 800368a:	4909      	ldr	r1, [pc, #36]	; (80036b0 <init_coordinates+0x100>)
 800368c:	f04f 0200 	mov.w	r2, #0
 8003690:	f04f 0300 	mov.w	r3, #0
 8003694:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8003698:	bf00      	nop
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	200004d8 	.word	0x200004d8
 80036a8:	200004e0 	.word	0x200004e0
 80036ac:	20000468 	.word	0x20000468
 80036b0:	20000400 	.word	0x20000400

080036b4 <set_operation_square>:
//-----------------------------Fin de la definicio de funciones del modo--------------------------------------------


//-------------Inicio de la definicion de las funciones para la contruccion de la lista de operaciones ----------------------------------
void set_operation_square(Parameters_Operation_t *prtList, double dis_side, double direction_square)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b0a8      	sub	sp, #160	; 0xa0
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6178      	str	r0, [r7, #20]
 80036bc:	ed87 0b02 	vstr	d0, [r7, #8]
 80036c0:	ed87 1b00 	vstr	d1, [r7]
	//Definicion de variables
	Parameter_build_t parameter_build = {0};
 80036c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80036c8:	2230      	movs	r2, #48	; 0x30
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f003 fa5d 	bl	8006b8c <memset>
	int8_t value_side = 0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	//Definicion de las coordenadas del cuadrado
	if(direction_square == 0){value_side = 1;}
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036e4:	f7fd fa08 	bl	8000af8 <__aeabi_dcmpeq>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <set_operation_square+0x42>
 80036ee:	2301      	movs	r3, #1
 80036f0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80036f4:	e002      	b.n	80036fc <set_operation_square+0x48>
	else{ value_side = -1;}
 80036f6:	23ff      	movs	r3, #255	; 0xff
 80036f8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	double coordination_position_square[2][5] = {{0, dis_side, dis_side, 0, 0},{0, 0, value_side*dis_side,value_side*dis_side,0}};
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003708:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800370c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8003710:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003714:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8003748:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800374c:	4618      	mov	r0, r3
 800374e:	f7fc ff01 	bl	8000554 <__aeabi_i2d>
 8003752:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003756:	f7fc ff67 	bl	8000628 <__aeabi_dmul>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8003762:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8003766:	4618      	mov	r0, r3
 8003768:	f7fc fef4 	bl	8000554 <__aeabi_i2d>
 800376c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003770:	f7fc ff5a 	bl	8000628 <__aeabi_dmul>
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	//Definimos la posicion inicial del cuadrado
	parameter_build.initline_x = coordination_position_square[0][0]; parameter_build.initline_y = coordination_position_square[0][0];
 8003788:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800378c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8003790:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003794:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	parameter_build.grad_vector_init = 0; parameter_build.number_operation = 0;
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 80037a4:	2300      	movs	r3, #0
 80037a6:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	parameter_build.delta_before[0] = dis_side; parameter_build.delta_before[1] = 0;
 80037aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037ae:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	//Construccion de las operaciones
	for(uint8_t i=1; i<5; i++)
 80037be:	2301      	movs	r3, #1
 80037c0:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 80037c4:	e023      	b.n	800380e <set_operation_square+0x15a>
	{
		build_Operation(prtList, &parameter_build, coordination_position_square[0][i], coordination_position_square[1][i]);
 80037c6:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	33a0      	adds	r3, #160	; 0xa0
 80037ce:	443b      	add	r3, r7
 80037d0:	3b88      	subs	r3, #136	; 0x88
 80037d2:	ed93 7b00 	vldr	d7, [r3]
 80037d6:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80037da:	3305      	adds	r3, #5
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	33a0      	adds	r3, #160	; 0xa0
 80037e0:	443b      	add	r3, r7
 80037e2:	3b88      	subs	r3, #136	; 0x88
 80037e4:	ed93 6b00 	vldr	d6, [r3]
 80037e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80037ec:	eeb0 1a46 	vmov.f32	s2, s12
 80037f0:	eef0 1a66 	vmov.f32	s3, s13
 80037f4:	eeb0 0a47 	vmov.f32	s0, s14
 80037f8:	eef0 0a67 	vmov.f32	s1, s15
 80037fc:	4619      	mov	r1, r3
 80037fe:	6978      	ldr	r0, [r7, #20]
 8003800:	f7fe f86a 	bl	80018d8 <build_Operation>
	for(uint8_t i=1; i<5; i++)
 8003804:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003808:	3301      	adds	r3, #1
 800380a:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 800380e:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003812:	2b04      	cmp	r3, #4
 8003814:	d9d7      	bls.n	80037c6 <set_operation_square+0x112>
	}
	//Agregamos indicador de la operacion final
	prtList[parameter_build.number_operation+1].operacion = NULL_OPERATION;
 8003816:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 800381a:	3301      	adds	r3, #1
 800381c:	015b      	lsls	r3, r3, #5
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4413      	add	r3, r2
 8003822:	2200      	movs	r2, #0
 8003824:	701a      	strb	r2, [r3, #0]
}
 8003826:	bf00      	nop
 8003828:	37a0      	adds	r7, #160	; 0xa0
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <PID_simple>:

//----------------------------Inicio de la definicion de las funciones-----------------------------------------


void PID_simple(Parameters_PID_t *ptrPIDHandler, float timer, float setpoint, float measure)
{
 800382e:	b480      	push	{r7}
 8003830:	b087      	sub	sp, #28
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	ed87 0a02 	vstr	s0, [r7, #8]
 800383a:	edc7 0a01 	vstr	s1, [r7, #4]
 800383e:	ed87 1a00 	vstr	s2, [r7]
	//Calculo del error
	ptrPIDHandler->e = setpoint-measure;
 8003842:	ed97 7a01 	vldr	s14, [r7, #4]
 8003846:	edd7 7a00 	vldr	s15, [r7]
 800384a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float pro =  ptrPIDHandler->kp*ptrPIDHandler->e;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	ed93 7a04 	vldr	s14, [r3, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003864:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->e_intel +=  ptrPIDHandler->e*timer;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	ed93 7a02 	vldr	s14, [r3, #8]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	edd3 6a01 	vldr	s13, [r3, #4]
 8003874:	edd7 7a02 	vldr	s15, [r7, #8]
 8003878:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800387c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	edc3 7a02 	vstr	s15, [r3, #8]
	float deriv =  ptrPIDHandler->kd*(ptrPIDHandler->e - ptrPIDHandler->e_prev)/timer;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	ed93 7a06 	vldr	s14, [r3, #24]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	edd3 6a01 	vldr	s13, [r3, #4]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	edd3 7a03 	vldr	s15, [r3, #12]
 8003898:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800389c:	ee67 6a27 	vmul.f32	s13, s14, s15
 80038a0:	ed97 7a02 	vldr	s14, [r7, #8]
 80038a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038a8:	edc7 7a04 	vstr	s15, [r7, #16]
	ptrPIDHandler->u =  pro + ptrPIDHandler->ki*ptrPIDHandler->e_intel + deriv;        //Ley del controlador PID discreto
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	ed93 7a05 	vldr	s14, [r3, #20]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80038b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80038c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80038c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	edc3 7a00 	vstr	s15, [r3]
     //Retorno a los valores reales
	ptrPIDHandler->e_prev = ptrPIDHandler->e;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	60da      	str	r2, [r3, #12]
}
 80038da:	bf00      	nop
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <correction>:

void correction(Motor_Handler_t *ptrMotorHandler)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	//Definimos variables auxiliares
	float port_dutty = 0;
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
	//Guardamos valor
	port_dutty = ptrMotorHandler->configMotor.new_dutty;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	60fb      	str	r3, [r7, #12]
    //Saturo el porcentaje de dutty en un tope maximo y minimo
    if (port_dutty >= 60) { port_dutty = 60; }
 80038fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003900:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003958 <correction+0x70>
 8003904:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800390c:	db02      	blt.n	8003914 <correction+0x2c>
 800390e:	4b13      	ldr	r3, [pc, #76]	; (800395c <correction+0x74>)
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	e018      	b.n	8003946 <correction+0x5e>
    else if(port_dutty <= duttySetPoint-5) { port_dutty = duttySetPoint-5; }
 8003914:	4b12      	ldr	r3, [pc, #72]	; (8003960 <correction+0x78>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	3b05      	subs	r3, #5
 800391a:	ee07 3a90 	vmov	s15, r3
 800391e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003922:	ed97 7a03 	vldr	s14, [r7, #12]
 8003926:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800392a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800392e:	d809      	bhi.n	8003944 <correction+0x5c>
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <correction+0x78>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	3b05      	subs	r3, #5
 8003936:	ee07 3a90 	vmov	s15, r3
 800393a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800393e:	edc7 7a03 	vstr	s15, [r7, #12]
 8003942:	e000      	b.n	8003946 <correction+0x5e>
    else{ __NOP();}
 8003944:	bf00      	nop

    //Actualizamoe el valor del dutty
    updateDuttyMotor(ptrMotorHandler, port_dutty);
 8003946:	ed97 0a03 	vldr	s0, [r7, #12]
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fd ff7e 	bl	800184c <updateDuttyMotor>
}
 8003950:	bf00      	nop
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	42700000 	.word	0x42700000
 800395c:	42700000 	.word	0x42700000
 8003960:	20000008 	.word	0x20000008

08003964 <status_motor>:

//--------------------Operacion Motor----------------------
void status_motor(uint8_t status)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	71fb      	strb	r3, [r7, #7]
	if(status == 1)
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d134      	bne.n	80039de <status_motor+0x7a>
	{
		//Activamos el motor
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_ENABLE);
 8003974:	4b39      	ldr	r3, [pc, #228]	; (8003a5c <status_motor+0xf8>)
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	2101      	movs	r1, #1
 800397a:	4618      	mov	r0, r3
 800397c:	f002 fa10 	bl	8005da0 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_ENABLE);
 8003980:	4b37      	ldr	r3, [pc, #220]	; (8003a60 <status_motor+0xfc>)
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	2101      	movs	r1, #1
 8003986:	4618      	mov	r0, r3
 8003988:	f002 fa0a 	bl	8005da0 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&SET);
 800398c:	4b33      	ldr	r3, [pc, #204]	; (8003a5c <status_motor+0xf8>)
 800398e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003990:	4b32      	ldr	r3, [pc, #200]	; (8003a5c <status_motor+0xf8>)
 8003992:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	b2db      	uxtb	r3, r3
 800399c:	4619      	mov	r1, r3
 800399e:	4610      	mov	r0, r2
 80039a0:	f001 fd26 	bl	80053f0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&SET);
 80039a4:	4b2e      	ldr	r3, [pc, #184]	; (8003a60 <status_motor+0xfc>)
 80039a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039a8:	4b2d      	ldr	r3, [pc, #180]	; (8003a60 <status_motor+0xfc>)
 80039aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	4619      	mov	r1, r3
 80039b6:	4610      	mov	r0, r2
 80039b8:	f001 fd1a 	bl	80053f0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, RESET);
 80039bc:	4b27      	ldr	r3, [pc, #156]	; (8003a5c <status_motor+0xf8>)
 80039be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c0:	2180      	movs	r1, #128	; 0x80
 80039c2:	4618      	mov	r0, r3
 80039c4:	f001 fd14 	bl	80053f0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, RESET);
 80039c8:	4b25      	ldr	r3, [pc, #148]	; (8003a60 <status_motor+0xfc>)
 80039ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039cc:	2180      	movs	r1, #128	; 0x80
 80039ce:	4618      	mov	r0, r3
 80039d0:	f001 fd0e 	bl	80053f0 <GPIO_writePin>
		//Activamos la interrupcion
		statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_ENABLE);
 80039d4:	2101      	movs	r1, #1
 80039d6:	4823      	ldr	r0, [pc, #140]	; (8003a64 <status_motor+0x100>)
 80039d8:	f000 fac8 	bl	8003f6c <statusiInterruptionTimer>
		flag_mode = 0;
		//Desactivamos interrupcion
		delay_ms(200);
		statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_DISABLE);
	}
}
 80039dc:	e039      	b.n	8003a52 <status_motor+0xee>
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_DISABLE);
 80039de:	4b1f      	ldr	r3, [pc, #124]	; (8003a5c <status_motor+0xf8>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	2100      	movs	r1, #0
 80039e4:	4618      	mov	r0, r3
 80039e6:	f002 f9db 	bl	8005da0 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_DISABLE);
 80039ea:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <status_motor+0xfc>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	2100      	movs	r1, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f002 f9d5 	bl	8005da0 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&RESET);
 80039f6:	4b19      	ldr	r3, [pc, #100]	; (8003a5c <status_motor+0xf8>)
 80039f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039fa:	4b18      	ldr	r3, [pc, #96]	; (8003a5c <status_motor+0xf8>)
 80039fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	4619      	mov	r1, r3
 8003a08:	4610      	mov	r0, r2
 8003a0a:	f001 fcf1 	bl	80053f0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&RESET);
 8003a0e:	4b14      	ldr	r3, [pc, #80]	; (8003a60 <status_motor+0xfc>)
 8003a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a12:	4b13      	ldr	r3, [pc, #76]	; (8003a60 <status_motor+0xfc>)
 8003a14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4610      	mov	r0, r2
 8003a22:	f001 fce5 	bl	80053f0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
 8003a26:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <status_motor+0xf8>)
 8003a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f001 fcdf 	bl	80053f0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
 8003a32:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <status_motor+0xfc>)
 8003a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a36:	2101      	movs	r1, #1
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f001 fcd9 	bl	80053f0 <GPIO_writePin>
		flag_mode = 0;
 8003a3e:	4b0a      	ldr	r3, [pc, #40]	; (8003a68 <status_motor+0x104>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	701a      	strb	r2, [r3, #0]
		delay_ms(200);
 8003a44:	20c8      	movs	r0, #200	; 0xc8
 8003a46:	f002 fb8f 	bl	8006168 <delay_ms>
		statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_DISABLE);
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	4805      	ldr	r0, [pc, #20]	; (8003a64 <status_motor+0x100>)
 8003a4e:	f000 fa8d 	bl	8003f6c <statusiInterruptionTimer>
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	2000037c 	.word	0x2000037c
 8003a60:	20000308 	.word	0x20000308
 8003a64:	200003d0 	.word	0x200003d0
 8003a68:	200008ae 	.word	0x200008ae

08003a6c <config_motor>:

//Funcion para al configuracion de los motores
void config_motor(uint8_t status, int firth, float second, float third)  //Tipo de Estudio, por dutty L, por dutty R, fre pwm [hz]
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	ed87 0a01 	vstr	s0, [r7, #4]
 8003a7a:	edc7 0a00 	vstr	s1, [r7]
 8003a7e:	73fb      	strb	r3, [r7, #15]
	//Establecer valores
	handler_Motor_R.parametersMotor.count = 0;
 8003a80:	4b17      	ldr	r3, [pc, #92]	; (8003ae0 <config_motor+0x74>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	839a      	strh	r2, [r3, #28]
	handler_Motor_L.parametersMotor.count = 0;
 8003a86:	4b17      	ldr	r3, [pc, #92]	; (8003ae4 <config_motor+0x78>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	839a      	strh	r2, [r3, #28]
	//Actualizamos el valor del dutty y frecuencia
	value_period = 100000/third;
 8003a8c:	eddf 6a16 	vldr	s13, [pc, #88]	; 8003ae8 <config_motor+0x7c>
 8003a90:	ed97 7a00 	vldr	s14, [r7]
 8003a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a9c:	ee17 3a90 	vmov	r3, s15
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	4b12      	ldr	r3, [pc, #72]	; (8003aec <config_motor+0x80>)
 8003aa4:	801a      	strh	r2, [r3, #0]
	updateFrequencyTimer(&handler_TIMER_Motor, value_period);
 8003aa6:	4b11      	ldr	r3, [pc, #68]	; (8003aec <config_motor+0x80>)
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4810      	ldr	r0, [pc, #64]	; (8003af0 <config_motor+0x84>)
 8003aae:	f000 fa7d 	bl	8003fac <updateFrequencyTimer>
	updateDuttyMotor(&handler_Motor_R, second);
 8003ab2:	ed97 0a01 	vldr	s0, [r7, #4]
 8003ab6:	480a      	ldr	r0, [pc, #40]	; (8003ae0 <config_motor+0x74>)
 8003ab8:	f7fd fec8 	bl	800184c <updateDuttyMotor>
	updateDuttyMotor(&handler_Motor_L, firth);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8003aca:	4806      	ldr	r0, [pc, #24]	; (8003ae4 <config_motor+0x78>)
 8003acc:	f7fd febe 	bl	800184c <updateDuttyMotor>
	//Cambio valor bandera
	flag_mode=status;
 8003ad0:	4a08      	ldr	r2, [pc, #32]	; (8003af4 <config_motor+0x88>)
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	7013      	strb	r3, [r2, #0]
}
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000308 	.word	0x20000308
 8003ae4:	2000037c 	.word	0x2000037c
 8003ae8:	47c35000 	.word	0x47c35000
 8003aec:	20000002 	.word	0x20000002
 8003af0:	200003c0 	.word	0x200003c0
 8003af4:	200008ae 	.word	0x200008ae

08003af8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003af8:	480d      	ldr	r0, [pc, #52]	; (8003b30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003afa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003afc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b00:	480c      	ldr	r0, [pc, #48]	; (8003b34 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b02:	490d      	ldr	r1, [pc, #52]	; (8003b38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b04:	4a0d      	ldr	r2, [pc, #52]	; (8003b3c <LoopForever+0xe>)
  movs r3, #0
 8003b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b08:	e002      	b.n	8003b10 <LoopCopyDataInit>

08003b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b0e:	3304      	adds	r3, #4

08003b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b14:	d3f9      	bcc.n	8003b0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b16:	4a0a      	ldr	r2, [pc, #40]	; (8003b40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b18:	4c0a      	ldr	r4, [pc, #40]	; (8003b44 <LoopForever+0x16>)
  movs r3, #0
 8003b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b1c:	e001      	b.n	8003b22 <LoopFillZerobss>

08003b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b20:	3204      	adds	r2, #4

08003b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b24:	d3fb      	bcc.n	8003b1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003b26:	f003 f80d 	bl	8006b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b2a:	f7fe fab9 	bl	80020a0 <main>

08003b2e <LoopForever>:

LoopForever:
    b LoopForever
 8003b2e:	e7fe      	b.n	8003b2e <LoopForever>
  ldr   r0, =_estack
 8003b30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b38:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003b3c:	0800efc8 	.word	0x0800efc8
  ldr r2, =_sbss
 8003b40:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003b44:	20001190 	.word	0x20001190

08003b48 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b48:	e7fe      	b.n	8003b48 <ADC_IRQHandler>

08003b4a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	af00      	add	r7, sp, #0
	return 1;
 8003b4e:	2301      	movs	r3, #1
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <_kill>:

int _kill(int pid, int sig)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b082      	sub	sp, #8
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b64:	f002 ffe8 	bl	8006b38 <__errno>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2216      	movs	r2, #22
 8003b6c:	601a      	str	r2, [r3, #0]
	return -1;
 8003b6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <_exit>:

void _exit (int status)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b82:	f04f 31ff 	mov.w	r1, #4294967295
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff ffe7 	bl	8003b5a <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b8c:	e7fe      	b.n	8003b8c <_exit+0x12>

08003b8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b086      	sub	sp, #24
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	e00a      	b.n	8003bb6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ba0:	f3af 8000 	nop.w
 8003ba4:	4601      	mov	r1, r0
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	60ba      	str	r2, [r7, #8]
 8003bac:	b2ca      	uxtb	r2, r1
 8003bae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	dbf0      	blt.n	8003ba0 <_read+0x12>
	}

return len;
 8003bbe:	687b      	ldr	r3, [r7, #4]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	e009      	b.n	8003bee <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	60ba      	str	r2, [r7, #8]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	3301      	adds	r3, #1
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	dbf1      	blt.n	8003bda <_write+0x12>
	}
	return len;
 8003bf6:	687b      	ldr	r3, [r7, #4]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <_close>:

int _close(int file)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
	return -1;
 8003c08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c28:	605a      	str	r2, [r3, #4]
	return 0;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <_isatty>:

int _isatty(int file)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
	return 1;
 8003c40:	2301      	movs	r3, #1
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b085      	sub	sp, #20
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
	return 0;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c70:	4a14      	ldr	r2, [pc, #80]	; (8003cc4 <_sbrk+0x5c>)
 8003c72:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <_sbrk+0x60>)
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c7c:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <_sbrk+0x64>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c84:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <_sbrk+0x64>)
 8003c86:	4a12      	ldr	r2, [pc, #72]	; (8003cd0 <_sbrk+0x68>)
 8003c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c8a:	4b10      	ldr	r3, [pc, #64]	; (8003ccc <_sbrk+0x64>)
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4413      	add	r3, r2
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d207      	bcs.n	8003ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c98:	f002 ff4e 	bl	8006b38 <__errno>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	220c      	movs	r2, #12
 8003ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca6:	e009      	b.n	8003cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ca8:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <_sbrk+0x64>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cae:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <_sbrk+0x64>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	4a05      	ldr	r2, [pc, #20]	; (8003ccc <_sbrk+0x64>)
 8003cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cba:	68fb      	ldr	r3, [r7, #12]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	20020000 	.word	0x20020000
 8003cc8:	00000400 	.word	0x00000400
 8003ccc:	20000908 	.word	0x20000908
 8003cd0:	20001190 	.word	0x20001190

08003cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	db0b      	blt.n	8003cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	f003 021f 	and.w	r2, r3, #31
 8003cec:	4907      	ldr	r1, [pc, #28]	; (8003d0c <__NVIC_EnableIRQ+0x38>)
 8003cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	2001      	movs	r0, #1
 8003cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	e000e100 	.word	0xe000e100

08003d10 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d20:	d10a      	bne.n	8003d38 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8003d22:	4b62      	ldr	r3, [pc, #392]	; (8003eac <BasicTimer_Config+0x19c>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	4a61      	ldr	r2, [pc, #388]	; (8003eac <BasicTimer_Config+0x19c>)
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	4a5f      	ldr	r2, [pc, #380]	; (8003eb0 <BasicTimer_Config+0x1a0>)
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	e02e      	b.n	8003d96 <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	4a5d      	ldr	r2, [pc, #372]	; (8003eb4 <BasicTimer_Config+0x1a4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d10a      	bne.n	8003d58 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8003d42:	4b5a      	ldr	r3, [pc, #360]	; (8003eac <BasicTimer_Config+0x19c>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	4a59      	ldr	r2, [pc, #356]	; (8003eac <BasicTimer_Config+0x19c>)
 8003d48:	f043 0302 	orr.w	r3, r3, #2
 8003d4c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	4a59      	ldr	r2, [pc, #356]	; (8003eb8 <BasicTimer_Config+0x1a8>)
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	e01e      	b.n	8003d96 <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4a57      	ldr	r2, [pc, #348]	; (8003ebc <BasicTimer_Config+0x1ac>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d10a      	bne.n	8003d78 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8003d62:	4b52      	ldr	r3, [pc, #328]	; (8003eac <BasicTimer_Config+0x19c>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	4a51      	ldr	r2, [pc, #324]	; (8003eac <BasicTimer_Config+0x19c>)
 8003d68:	f043 0304 	orr.w	r3, r3, #4
 8003d6c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	4a53      	ldr	r2, [pc, #332]	; (8003ec0 <BasicTimer_Config+0x1b0>)
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	e00e      	b.n	8003d96 <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4a51      	ldr	r2, [pc, #324]	; (8003ec4 <BasicTimer_Config+0x1b4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d109      	bne.n	8003d96 <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8003d82:	4b4a      	ldr	r3, [pc, #296]	; (8003eac <BasicTimer_Config+0x19c>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	4a49      	ldr	r2, [pc, #292]	; (8003eac <BasicTimer_Config+0x19c>)
 8003d88:	f043 0308 	orr.w	r3, r3, #8
 8003d8c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	4a4d      	ldr	r2, [pc, #308]	; (8003ec8 <BasicTimer_Config+0x1b8>)
 8003d94:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 8003d96:	f001 fdf3 	bl	8005980 <getConfigPLL>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8003d9e:	f001 fe0b 	bl	80059b8 <getClockAPB1>
 8003da2:	4603      	mov	r3, r0
 8003da4:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 8003da6:	7bbb      	ldrb	r3, [r7, #14]
 8003da8:	2b31      	cmp	r3, #49	; 0x31
 8003daa:	d903      	bls.n	8003db4 <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
 8003db2:	e000      	b.n	8003db6 <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 8003db4:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	8852      	ldrh	r2, [r2, #2]
 8003dbc:	fb02 f303 	mul.w	r3, r2, r3
 8003dc0:	1e5a      	subs	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d112      	bne.n	8003df6 <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f022 0210 	bic.w	r2, r2, #16
 8003dde:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	3201      	adds	r2, #1
 8003dea:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	625a      	str	r2, [r3, #36]	; 0x24
 8003df4:	e018      	b.n	8003e28 <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f022 0210 	bic.w	r2, r2, #16
 8003e04:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f042 0210 	orr.w	r2, r2, #16
 8003e14:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6852      	ldr	r2, [r2, #4]
 8003e26:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e28:	b672      	cpsid	i
}
 8003e2a:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e34:	d103      	bne.n	8003e3e <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8003e36:	201c      	movs	r0, #28
 8003e38:	f7ff ff4c 	bl	8003cd4 <__NVIC_EnableIRQ>
 8003e3c:	e019      	b.n	8003e72 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	4a1c      	ldr	r2, [pc, #112]	; (8003eb4 <BasicTimer_Config+0x1a4>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d103      	bne.n	8003e50 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8003e48:	201d      	movs	r0, #29
 8003e4a:	f7ff ff43 	bl	8003cd4 <__NVIC_EnableIRQ>
 8003e4e:	e010      	b.n	8003e72 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	4a19      	ldr	r2, [pc, #100]	; (8003ebc <BasicTimer_Config+0x1ac>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d103      	bne.n	8003e62 <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8003e5a:	201e      	movs	r0, #30
 8003e5c:	f7ff ff3a 	bl	8003cd4 <__NVIC_EnableIRQ>
 8003e60:	e007      	b.n	8003e72 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	4a17      	ldr	r2, [pc, #92]	; (8003ec4 <BasicTimer_Config+0x1b4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d102      	bne.n	8003e72 <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8003e6c:	2032      	movs	r0, #50	; 0x32
 8003e6e:	f7ff ff31 	bl	8003cd4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8003e72:	b662      	cpsie	i
}
 8003e74:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	7a1b      	ldrb	r3, [r3, #8]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f875 	bl	8003f6c <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f022 0201 	bic.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f042 0201 	orr.w	r2, r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]
}
 8003ea2:	bf00      	nop
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	2000090c 	.word	0x2000090c
 8003eb4:	40000400 	.word	0x40000400
 8003eb8:	20000910 	.word	0x20000910
 8003ebc:	40000800 	.word	0x40000800
 8003ec0:	20000914 	.word	0x20000914
 8003ec4:	40000c00 	.word	0x40000c00
 8003ec8:	20000918 	.word	0x20000918

08003ecc <BasicTimer4_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
	__NOP();
 8003ed0:	bf00      	nop
}
 8003ed2:	bf00      	nop
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
	__NOP();
 8003ee0:	bf00      	nop
}
 8003ee2:	bf00      	nop
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <TIM2_IRQHandler+0x1c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	4b04      	ldr	r3, [pc, #16]	; (8003f08 <TIM2_IRQHandler+0x1c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0201 	bic.w	r2, r2, #1
 8003efe:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 8003f00:	f7fe fe60 	bl	8002bc4 <BasicTimer2_Callback>

}
 8003f04:	bf00      	nop
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	2000090c 	.word	0x2000090c

08003f0c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 8003f10:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <TIM3_IRQHandler+0x1c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	4b04      	ldr	r3, [pc, #16]	; (8003f28 <TIM3_IRQHandler+0x1c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0201 	bic.w	r2, r2, #1
 8003f1e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 8003f20:	f7fe fe6a 	bl	8002bf8 <BasicTimer3_Callback>

}
 8003f24:	bf00      	nop
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	20000910 	.word	0x20000910

08003f2c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <TIM4_IRQHandler+0x1c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691a      	ldr	r2, [r3, #16]
 8003f36:	4b04      	ldr	r3, [pc, #16]	; (8003f48 <TIM4_IRQHandler+0x1c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0201 	bic.w	r2, r2, #1
 8003f3e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 8003f40:	f7ff ffc4 	bl	8003ecc <BasicTimer4_Callback>

}
 8003f44:	bf00      	nop
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	20000914 	.word	0x20000914

08003f4c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 8003f50:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <TIM5_IRQHandler+0x1c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691a      	ldr	r2, [r3, #16]
 8003f56:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <TIM5_IRQHandler+0x1c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0201 	bic.w	r2, r2, #1
 8003f5e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 8003f60:	f7ff ffbc 	bl	8003edc <BasicTimer5_Callback>

}
 8003f64:	bf00      	nop
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20000918 	.word	0x20000918

08003f6c <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d108      	bne.n	8003f90 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f042 0201 	orr.w	r2, r2, #1
 8003f8c:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 8003f8e:	e007      	b.n	8003fa0 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	f022 0201 	bic.w	r2, r2, #1
 8003f9e:	60da      	str	r2, [r3, #12]
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <updateFrequencyTimer>:


//Actualizamos la frecuencia del TIMER
void updateFrequencyTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint16_t newPer)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	807b      	strh	r3, [r7, #2]
	//Establecemos el nuevo valor del periodo en la configuracion del PWM
	ptrBTimerHandler->TIMx_Config.TIMX_period = newPer;
 8003fb8:	887a      	ldrh	r2, [r7, #2]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	605a      	str	r2, [r3, #4]
	//Reiniamos el contador
	ptrBTimerHandler->ptrTIMx->CNT = 0;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	625a      	str	r2, [r3, #36]	; 0x24
	/*Cargamos el valor del ARR el cual es e limite de incrementos del TIMER
	 */
	ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6852      	ldr	r2, [r2, #4]
 8003fce:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <__NVIC_EnableIRQ>:
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	db0b      	blt.n	8004006 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	f003 021f 	and.w	r2, r3, #31
 8003ff4:	4907      	ldr	r1, [pc, #28]	; (8004014 <__NVIC_EnableIRQ+0x38>)
 8003ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	2001      	movs	r0, #1
 8003ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8004002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	e000e100 	.word	0xe000e100

08004018 <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af02      	add	r7, sp, #8
 800401e:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	2300      	movs	r3, #0
 8004026:	9301      	str	r3, [sp, #4]
 8004028:	2300      	movs	r3, #0
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	2301      	movs	r3, #1
 800402e:	2200      	movs	r2, #0
 8004030:	2100      	movs	r1, #0
 8004032:	f001 f891 	bl	8005158 <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f001 f8ae 	bl	800519c <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8004040:	4b97      	ldr	r3, [pc, #604]	; (80042a0 <extInt_Config+0x288>)
 8004042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004044:	4a96      	ldr	r2, [pc, #600]	; (80042a0 <extInt_Config+0x288>)
 8004046:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800404a:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b0f      	cmp	r3, #15
 8004054:	f200 85cf 	bhi.w	8004bf6 <extInt_Config+0xbde>
 8004058:	a201      	add	r2, pc, #4	; (adr r2, 8004060 <extInt_Config+0x48>)
 800405a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405e:	bf00      	nop
 8004060:	080040a1 	.word	0x080040a1
 8004064:	08004157 	.word	0x08004157
 8004068:	0800420d 	.word	0x0800420d
 800406c:	080042e3 	.word	0x080042e3
 8004070:	08004399 	.word	0x08004399
 8004074:	08004447 	.word	0x08004447
 8004078:	0800450d 	.word	0x0800450d
 800407c:	080045b5 	.word	0x080045b5
 8004080:	0800465d 	.word	0x0800465d
 8004084:	08004705 	.word	0x08004705
 8004088:	080047cb 	.word	0x080047cb
 800408c:	08004873 	.word	0x08004873
 8004090:	0800491b 	.word	0x0800491b
 8004094:	080049e1 	.word	0x080049e1
 8004098:	08004a89 	.word	0x08004a89
 800409c:	08004b31 	.word	0x08004b31
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 80040a0:	4b80      	ldr	r3, [pc, #512]	; (80042a4 <extInt_Config+0x28c>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4a7f      	ldr	r2, [pc, #508]	; (80042a4 <extInt_Config+0x28c>)
 80040a6:	f023 030f 	bic.w	r3, r3, #15
 80040aa:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	4a7d      	ldr	r2, [pc, #500]	; (80042a8 <extInt_Config+0x290>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d105      	bne.n	80040c4 <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 80040b8:	4b7a      	ldr	r3, [pc, #488]	; (80042a4 <extInt_Config+0x28c>)
 80040ba:	4a7a      	ldr	r2, [pc, #488]	; (80042a4 <extInt_Config+0x28c>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 80040c0:	f000 bd9b 	b.w	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	4a78      	ldr	r2, [pc, #480]	; (80042ac <extInt_Config+0x294>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d107      	bne.n	80040e0 <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 80040d0:	4b74      	ldr	r3, [pc, #464]	; (80042a4 <extInt_Config+0x28c>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4a73      	ldr	r2, [pc, #460]	; (80042a4 <extInt_Config+0x28c>)
 80040d6:	f043 0301 	orr.w	r3, r3, #1
 80040da:	6093      	str	r3, [r2, #8]
		break;
 80040dc:	f000 bd8d 	b.w	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	4a72      	ldr	r2, [pc, #456]	; (80042b0 <extInt_Config+0x298>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d107      	bne.n	80040fc <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 80040ec:	4b6d      	ldr	r3, [pc, #436]	; (80042a4 <extInt_Config+0x28c>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4a6c      	ldr	r2, [pc, #432]	; (80042a4 <extInt_Config+0x28c>)
 80040f2:	f043 0302 	orr.w	r3, r3, #2
 80040f6:	6093      	str	r3, [r2, #8]
		break;
 80040f8:	f000 bd7f 	b.w	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	4a6c      	ldr	r2, [pc, #432]	; (80042b4 <extInt_Config+0x29c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d107      	bne.n	8004118 <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8004108:	4b66      	ldr	r3, [pc, #408]	; (80042a4 <extInt_Config+0x28c>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	4a65      	ldr	r2, [pc, #404]	; (80042a4 <extInt_Config+0x28c>)
 800410e:	f043 0303 	orr.w	r3, r3, #3
 8004112:	6093      	str	r3, [r2, #8]
		break;
 8004114:	f000 bd71 	b.w	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	4a66      	ldr	r2, [pc, #408]	; (80042b8 <extInt_Config+0x2a0>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d107      	bne.n	8004134 <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8004124:	4b5f      	ldr	r3, [pc, #380]	; (80042a4 <extInt_Config+0x28c>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	4a5e      	ldr	r2, [pc, #376]	; (80042a4 <extInt_Config+0x28c>)
 800412a:	f043 0304 	orr.w	r3, r3, #4
 800412e:	6093      	str	r3, [r2, #8]
		break;
 8004130:	f000 bd63 	b.w	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	4a60      	ldr	r2, [pc, #384]	; (80042bc <extInt_Config+0x2a4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d107      	bne.n	8004150 <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8004140:	4b58      	ldr	r3, [pc, #352]	; (80042a4 <extInt_Config+0x28c>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	4a57      	ldr	r2, [pc, #348]	; (80042a4 <extInt_Config+0x28c>)
 8004146:	f043 0307 	orr.w	r3, r3, #7
 800414a:	6093      	str	r3, [r2, #8]
		break;
 800414c:	f000 bd55 	b.w	8004bfa <extInt_Config+0xbe2>
			__NOP();
 8004150:	bf00      	nop
		break;
 8004152:	f000 bd52 	b.w	8004bfa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 8004156:	4b53      	ldr	r3, [pc, #332]	; (80042a4 <extInt_Config+0x28c>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	4a52      	ldr	r2, [pc, #328]	; (80042a4 <extInt_Config+0x28c>)
 800415c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004160:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	4a4f      	ldr	r2, [pc, #316]	; (80042a8 <extInt_Config+0x290>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d105      	bne.n	800417a <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 800416e:	4b4d      	ldr	r3, [pc, #308]	; (80042a4 <extInt_Config+0x28c>)
 8004170:	4a4c      	ldr	r2, [pc, #304]	; (80042a4 <extInt_Config+0x28c>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8004176:	f000 bd40 	b.w	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	4a4a      	ldr	r2, [pc, #296]	; (80042ac <extInt_Config+0x294>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d107      	bne.n	8004196 <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8004186:	4b47      	ldr	r3, [pc, #284]	; (80042a4 <extInt_Config+0x28c>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	4a46      	ldr	r2, [pc, #280]	; (80042a4 <extInt_Config+0x28c>)
 800418c:	f043 0310 	orr.w	r3, r3, #16
 8004190:	6093      	str	r3, [r2, #8]
		break;
 8004192:	f000 bd32 	b.w	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	4a44      	ldr	r2, [pc, #272]	; (80042b0 <extInt_Config+0x298>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d107      	bne.n	80041b2 <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 80041a2:	4b40      	ldr	r3, [pc, #256]	; (80042a4 <extInt_Config+0x28c>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	4a3f      	ldr	r2, [pc, #252]	; (80042a4 <extInt_Config+0x28c>)
 80041a8:	f043 0320 	orr.w	r3, r3, #32
 80041ac:	6093      	str	r3, [r2, #8]
		break;
 80041ae:	f000 bd24 	b.w	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	4a3e      	ldr	r2, [pc, #248]	; (80042b4 <extInt_Config+0x29c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d107      	bne.n	80041ce <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 80041be:	4b39      	ldr	r3, [pc, #228]	; (80042a4 <extInt_Config+0x28c>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	4a38      	ldr	r2, [pc, #224]	; (80042a4 <extInt_Config+0x28c>)
 80041c4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80041c8:	6093      	str	r3, [r2, #8]
		break;
 80041ca:	f000 bd16 	b.w	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	4a38      	ldr	r2, [pc, #224]	; (80042b8 <extInt_Config+0x2a0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d107      	bne.n	80041ea <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 80041da:	4b32      	ldr	r3, [pc, #200]	; (80042a4 <extInt_Config+0x28c>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	4a31      	ldr	r2, [pc, #196]	; (80042a4 <extInt_Config+0x28c>)
 80041e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041e4:	6093      	str	r3, [r2, #8]
		break;
 80041e6:	f000 bd08 	b.w	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	4a32      	ldr	r2, [pc, #200]	; (80042bc <extInt_Config+0x2a4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d107      	bne.n	8004206 <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 80041f6:	4b2b      	ldr	r3, [pc, #172]	; (80042a4 <extInt_Config+0x28c>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	4a2a      	ldr	r2, [pc, #168]	; (80042a4 <extInt_Config+0x28c>)
 80041fc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004200:	6093      	str	r3, [r2, #8]
		break;
 8004202:	f000 bcfa 	b.w	8004bfa <extInt_Config+0xbe2>
			__NOP();
 8004206:	bf00      	nop
		break;
 8004208:	f000 bcf7 	b.w	8004bfa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 800420c:	4b25      	ldr	r3, [pc, #148]	; (80042a4 <extInt_Config+0x28c>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	4a24      	ldr	r2, [pc, #144]	; (80042a4 <extInt_Config+0x28c>)
 8004212:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004216:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	4a22      	ldr	r2, [pc, #136]	; (80042a8 <extInt_Config+0x290>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d105      	bne.n	8004230 <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8004224:	4b1f      	ldr	r3, [pc, #124]	; (80042a4 <extInt_Config+0x28c>)
 8004226:	4a1f      	ldr	r2, [pc, #124]	; (80042a4 <extInt_Config+0x28c>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 800422c:	f000 bce5 	b.w	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	4a1d      	ldr	r2, [pc, #116]	; (80042ac <extInt_Config+0x294>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d107      	bne.n	800424c <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 800423c:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <extInt_Config+0x28c>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	4a18      	ldr	r2, [pc, #96]	; (80042a4 <extInt_Config+0x28c>)
 8004242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004246:	6093      	str	r3, [r2, #8]
		break;
 8004248:	f000 bcd7 	b.w	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	4a17      	ldr	r2, [pc, #92]	; (80042b0 <extInt_Config+0x298>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d107      	bne.n	8004268 <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8004258:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <extInt_Config+0x28c>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	4a11      	ldr	r2, [pc, #68]	; (80042a4 <extInt_Config+0x28c>)
 800425e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004262:	6093      	str	r3, [r2, #8]
		break;
 8004264:	f000 bcc9 	b.w	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	4a11      	ldr	r2, [pc, #68]	; (80042b4 <extInt_Config+0x29c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d107      	bne.n	8004284 <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8004274:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <extInt_Config+0x28c>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	4a0a      	ldr	r2, [pc, #40]	; (80042a4 <extInt_Config+0x28c>)
 800427a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800427e:	6093      	str	r3, [r2, #8]
		break;
 8004280:	f000 bcbb 	b.w	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	4a0b      	ldr	r2, [pc, #44]	; (80042b8 <extInt_Config+0x2a0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d117      	bne.n	80042c0 <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8004290:	4b04      	ldr	r3, [pc, #16]	; (80042a4 <extInt_Config+0x28c>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	4a03      	ldr	r2, [pc, #12]	; (80042a4 <extInt_Config+0x28c>)
 8004296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800429a:	6093      	str	r3, [r2, #8]
		break;
 800429c:	f000 bcad 	b.w	8004bfa <extInt_Config+0xbe2>
 80042a0:	40023800 	.word	0x40023800
 80042a4:	40013800 	.word	0x40013800
 80042a8:	40020000 	.word	0x40020000
 80042ac:	40020400 	.word	0x40020400
 80042b0:	40020800 	.word	0x40020800
 80042b4:	40020c00 	.word	0x40020c00
 80042b8:	40021000 	.word	0x40021000
 80042bc:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	4a8a      	ldr	r2, [pc, #552]	; (80044f0 <extInt_Config+0x4d8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d107      	bne.n	80042dc <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 80042cc:	4b89      	ldr	r3, [pc, #548]	; (80044f4 <extInt_Config+0x4dc>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	4a88      	ldr	r2, [pc, #544]	; (80044f4 <extInt_Config+0x4dc>)
 80042d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042d6:	6093      	str	r3, [r2, #8]
		break;
 80042d8:	f000 bc8f 	b.w	8004bfa <extInt_Config+0xbe2>
			__NOP();
 80042dc:	bf00      	nop
		break;
 80042de:	f000 bc8c 	b.w	8004bfa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 80042e2:	4b84      	ldr	r3, [pc, #528]	; (80044f4 <extInt_Config+0x4dc>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	4a83      	ldr	r2, [pc, #524]	; (80044f4 <extInt_Config+0x4dc>)
 80042e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042ec:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	4a80      	ldr	r2, [pc, #512]	; (80044f8 <extInt_Config+0x4e0>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d105      	bne.n	8004306 <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 80042fa:	4b7e      	ldr	r3, [pc, #504]	; (80044f4 <extInt_Config+0x4dc>)
 80042fc:	4a7d      	ldr	r2, [pc, #500]	; (80044f4 <extInt_Config+0x4dc>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8004302:	f000 bc7a 	b.w	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	4a7b      	ldr	r2, [pc, #492]	; (80044fc <extInt_Config+0x4e4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d107      	bne.n	8004322 <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8004312:	4b78      	ldr	r3, [pc, #480]	; (80044f4 <extInt_Config+0x4dc>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	4a77      	ldr	r2, [pc, #476]	; (80044f4 <extInt_Config+0x4dc>)
 8004318:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800431c:	6093      	str	r3, [r2, #8]
		break;
 800431e:	f000 bc6c 	b.w	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	4a75      	ldr	r2, [pc, #468]	; (8004500 <extInt_Config+0x4e8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d107      	bne.n	800433e <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 800432e:	4b71      	ldr	r3, [pc, #452]	; (80044f4 <extInt_Config+0x4dc>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	4a70      	ldr	r2, [pc, #448]	; (80044f4 <extInt_Config+0x4dc>)
 8004334:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004338:	6093      	str	r3, [r2, #8]
		break;
 800433a:	f000 bc5e 	b.w	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	4a6f      	ldr	r2, [pc, #444]	; (8004504 <extInt_Config+0x4ec>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d107      	bne.n	800435a <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 800434a:	4b6a      	ldr	r3, [pc, #424]	; (80044f4 <extInt_Config+0x4dc>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	4a69      	ldr	r2, [pc, #420]	; (80044f4 <extInt_Config+0x4dc>)
 8004350:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8004354:	6093      	str	r3, [r2, #8]
		break;
 8004356:	f000 bc50 	b.w	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	4a69      	ldr	r2, [pc, #420]	; (8004508 <extInt_Config+0x4f0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d107      	bne.n	8004376 <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8004366:	4b63      	ldr	r3, [pc, #396]	; (80044f4 <extInt_Config+0x4dc>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	4a62      	ldr	r2, [pc, #392]	; (80044f4 <extInt_Config+0x4dc>)
 800436c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004370:	6093      	str	r3, [r2, #8]
		break;
 8004372:	f000 bc42 	b.w	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	4a5c      	ldr	r2, [pc, #368]	; (80044f0 <extInt_Config+0x4d8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d107      	bne.n	8004392 <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8004382:	4b5c      	ldr	r3, [pc, #368]	; (80044f4 <extInt_Config+0x4dc>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	4a5b      	ldr	r2, [pc, #364]	; (80044f4 <extInt_Config+0x4dc>)
 8004388:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800438c:	6093      	str	r3, [r2, #8]
		break;
 800438e:	f000 bc34 	b.w	8004bfa <extInt_Config+0xbe2>
			__NOP();
 8004392:	bf00      	nop
		break;
 8004394:	f000 bc31 	b.w	8004bfa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 8004398:	4b56      	ldr	r3, [pc, #344]	; (80044f4 <extInt_Config+0x4dc>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	4a55      	ldr	r2, [pc, #340]	; (80044f4 <extInt_Config+0x4dc>)
 800439e:	f023 030f 	bic.w	r3, r3, #15
 80043a2:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	4a53      	ldr	r2, [pc, #332]	; (80044f8 <extInt_Config+0x4e0>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d105      	bne.n	80043bc <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 80043b0:	4b50      	ldr	r3, [pc, #320]	; (80044f4 <extInt_Config+0x4dc>)
 80043b2:	4a50      	ldr	r2, [pc, #320]	; (80044f4 <extInt_Config+0x4dc>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80043b8:	f000 bc1f 	b.w	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	4a4e      	ldr	r2, [pc, #312]	; (80044fc <extInt_Config+0x4e4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d107      	bne.n	80043d8 <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 80043c8:	4b4a      	ldr	r3, [pc, #296]	; (80044f4 <extInt_Config+0x4dc>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4a49      	ldr	r2, [pc, #292]	; (80044f4 <extInt_Config+0x4dc>)
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	60d3      	str	r3, [r2, #12]
		break;
 80043d4:	f000 bc11 	b.w	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	4a48      	ldr	r2, [pc, #288]	; (8004500 <extInt_Config+0x4e8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d107      	bne.n	80043f4 <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 80043e4:	4b43      	ldr	r3, [pc, #268]	; (80044f4 <extInt_Config+0x4dc>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	4a42      	ldr	r2, [pc, #264]	; (80044f4 <extInt_Config+0x4dc>)
 80043ea:	f043 0302 	orr.w	r3, r3, #2
 80043ee:	60d3      	str	r3, [r2, #12]
		break;
 80043f0:	f000 bc03 	b.w	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	4a42      	ldr	r2, [pc, #264]	; (8004504 <extInt_Config+0x4ec>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d106      	bne.n	800440e <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8004400:	4b3c      	ldr	r3, [pc, #240]	; (80044f4 <extInt_Config+0x4dc>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	4a3b      	ldr	r2, [pc, #236]	; (80044f4 <extInt_Config+0x4dc>)
 8004406:	f043 0303 	orr.w	r3, r3, #3
 800440a:	60d3      	str	r3, [r2, #12]
		break;
 800440c:	e3f5      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	4a3c      	ldr	r2, [pc, #240]	; (8004508 <extInt_Config+0x4f0>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d106      	bne.n	8004428 <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 800441a:	4b36      	ldr	r3, [pc, #216]	; (80044f4 <extInt_Config+0x4dc>)
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	4a35      	ldr	r2, [pc, #212]	; (80044f4 <extInt_Config+0x4dc>)
 8004420:	f043 0304 	orr.w	r3, r3, #4
 8004424:	60d3      	str	r3, [r2, #12]
		break;
 8004426:	e3e8      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	4a30      	ldr	r2, [pc, #192]	; (80044f0 <extInt_Config+0x4d8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d106      	bne.n	8004442 <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8004434:	4b2f      	ldr	r3, [pc, #188]	; (80044f4 <extInt_Config+0x4dc>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4a2e      	ldr	r2, [pc, #184]	; (80044f4 <extInt_Config+0x4dc>)
 800443a:	f043 0307 	orr.w	r3, r3, #7
 800443e:	60d3      	str	r3, [r2, #12]
		break;
 8004440:	e3db      	b.n	8004bfa <extInt_Config+0xbe2>
			__NOP();
 8004442:	bf00      	nop
		break;
 8004444:	e3d9      	b.n	8004bfa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 8004446:	4b2b      	ldr	r3, [pc, #172]	; (80044f4 <extInt_Config+0x4dc>)
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	4a2a      	ldr	r2, [pc, #168]	; (80044f4 <extInt_Config+0x4dc>)
 800444c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004450:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	4a27      	ldr	r2, [pc, #156]	; (80044f8 <extInt_Config+0x4e0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d104      	bne.n	8004468 <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 800445e:	4b25      	ldr	r3, [pc, #148]	; (80044f4 <extInt_Config+0x4dc>)
 8004460:	4a24      	ldr	r2, [pc, #144]	; (80044f4 <extInt_Config+0x4dc>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8004466:	e3c8      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	4a23      	ldr	r2, [pc, #140]	; (80044fc <extInt_Config+0x4e4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d106      	bne.n	8004482 <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8004474:	4b1f      	ldr	r3, [pc, #124]	; (80044f4 <extInt_Config+0x4dc>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4a1e      	ldr	r2, [pc, #120]	; (80044f4 <extInt_Config+0x4dc>)
 800447a:	f043 0310 	orr.w	r3, r3, #16
 800447e:	60d3      	str	r3, [r2, #12]
		break;
 8004480:	e3bb      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	4a1d      	ldr	r2, [pc, #116]	; (8004500 <extInt_Config+0x4e8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d106      	bne.n	800449c <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 800448e:	4b19      	ldr	r3, [pc, #100]	; (80044f4 <extInt_Config+0x4dc>)
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	4a18      	ldr	r2, [pc, #96]	; (80044f4 <extInt_Config+0x4dc>)
 8004494:	f043 0320 	orr.w	r3, r3, #32
 8004498:	60d3      	str	r3, [r2, #12]
		break;
 800449a:	e3ae      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	4a18      	ldr	r2, [pc, #96]	; (8004504 <extInt_Config+0x4ec>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d106      	bne.n	80044b6 <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 80044a8:	4b12      	ldr	r3, [pc, #72]	; (80044f4 <extInt_Config+0x4dc>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	4a11      	ldr	r2, [pc, #68]	; (80044f4 <extInt_Config+0x4dc>)
 80044ae:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80044b2:	60d3      	str	r3, [r2, #12]
		break;
 80044b4:	e3a1      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	4a12      	ldr	r2, [pc, #72]	; (8004508 <extInt_Config+0x4f0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d106      	bne.n	80044d0 <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 80044c2:	4b0c      	ldr	r3, [pc, #48]	; (80044f4 <extInt_Config+0x4dc>)
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	4a0b      	ldr	r2, [pc, #44]	; (80044f4 <extInt_Config+0x4dc>)
 80044c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044cc:	60d3      	str	r3, [r2, #12]
		break;
 80044ce:	e394      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	4a06      	ldr	r2, [pc, #24]	; (80044f0 <extInt_Config+0x4d8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d106      	bne.n	80044ea <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 80044dc:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <extInt_Config+0x4dc>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4a04      	ldr	r2, [pc, #16]	; (80044f4 <extInt_Config+0x4dc>)
 80044e2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80044e6:	60d3      	str	r3, [r2, #12]
		break;
 80044e8:	e387      	b.n	8004bfa <extInt_Config+0xbe2>
			__NOP();
 80044ea:	bf00      	nop
		break;
 80044ec:	e385      	b.n	8004bfa <extInt_Config+0xbe2>
 80044ee:	bf00      	nop
 80044f0:	40021c00 	.word	0x40021c00
 80044f4:	40013800 	.word	0x40013800
 80044f8:	40020000 	.word	0x40020000
 80044fc:	40020400 	.word	0x40020400
 8004500:	40020800 	.word	0x40020800
 8004504:	40020c00 	.word	0x40020c00
 8004508:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 800450c:	4b86      	ldr	r3, [pc, #536]	; (8004728 <extInt_Config+0x710>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4a85      	ldr	r2, [pc, #532]	; (8004728 <extInt_Config+0x710>)
 8004512:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004516:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	4a83      	ldr	r2, [pc, #524]	; (800472c <extInt_Config+0x714>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d104      	bne.n	800452e <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8004524:	4b80      	ldr	r3, [pc, #512]	; (8004728 <extInt_Config+0x710>)
 8004526:	4a80      	ldr	r2, [pc, #512]	; (8004728 <extInt_Config+0x710>)
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 800452c:	e365      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	4a7e      	ldr	r2, [pc, #504]	; (8004730 <extInt_Config+0x718>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d106      	bne.n	8004548 <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 800453a:	4b7b      	ldr	r3, [pc, #492]	; (8004728 <extInt_Config+0x710>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	4a7a      	ldr	r2, [pc, #488]	; (8004728 <extInt_Config+0x710>)
 8004540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004544:	60d3      	str	r3, [r2, #12]
		break;
 8004546:	e358      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	4a79      	ldr	r2, [pc, #484]	; (8004734 <extInt_Config+0x71c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d106      	bne.n	8004562 <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8004554:	4b74      	ldr	r3, [pc, #464]	; (8004728 <extInt_Config+0x710>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4a73      	ldr	r2, [pc, #460]	; (8004728 <extInt_Config+0x710>)
 800455a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800455e:	60d3      	str	r3, [r2, #12]
		break;
 8004560:	e34b      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	4a73      	ldr	r2, [pc, #460]	; (8004738 <extInt_Config+0x720>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d106      	bne.n	800457c <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 800456e:	4b6e      	ldr	r3, [pc, #440]	; (8004728 <extInt_Config+0x710>)
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	4a6d      	ldr	r2, [pc, #436]	; (8004728 <extInt_Config+0x710>)
 8004574:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004578:	60d3      	str	r3, [r2, #12]
		break;
 800457a:	e33e      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	4a6e      	ldr	r2, [pc, #440]	; (800473c <extInt_Config+0x724>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d106      	bne.n	8004596 <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8004588:	4b67      	ldr	r3, [pc, #412]	; (8004728 <extInt_Config+0x710>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	4a66      	ldr	r2, [pc, #408]	; (8004728 <extInt_Config+0x710>)
 800458e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004592:	60d3      	str	r3, [r2, #12]
		break;
 8004594:	e331      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	4a68      	ldr	r2, [pc, #416]	; (8004740 <extInt_Config+0x728>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d106      	bne.n	80045b0 <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 80045a2:	4b61      	ldr	r3, [pc, #388]	; (8004728 <extInt_Config+0x710>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	4a60      	ldr	r2, [pc, #384]	; (8004728 <extInt_Config+0x710>)
 80045a8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045ac:	60d3      	str	r3, [r2, #12]
		break;
 80045ae:	e324      	b.n	8004bfa <extInt_Config+0xbe2>
			__NOP();
 80045b0:	bf00      	nop
		break;
 80045b2:	e322      	b.n	8004bfa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 80045b4:	4b5c      	ldr	r3, [pc, #368]	; (8004728 <extInt_Config+0x710>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4a5b      	ldr	r2, [pc, #364]	; (8004728 <extInt_Config+0x710>)
 80045ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045be:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	4a59      	ldr	r2, [pc, #356]	; (800472c <extInt_Config+0x714>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d104      	bne.n	80045d6 <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 80045cc:	4b56      	ldr	r3, [pc, #344]	; (8004728 <extInt_Config+0x710>)
 80045ce:	4a56      	ldr	r2, [pc, #344]	; (8004728 <extInt_Config+0x710>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80045d4:	e311      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	4a54      	ldr	r2, [pc, #336]	; (8004730 <extInt_Config+0x718>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d106      	bne.n	80045f0 <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 80045e2:	4b51      	ldr	r3, [pc, #324]	; (8004728 <extInt_Config+0x710>)
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	4a50      	ldr	r2, [pc, #320]	; (8004728 <extInt_Config+0x710>)
 80045e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045ec:	60d3      	str	r3, [r2, #12]
		break;
 80045ee:	e304      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	4a4f      	ldr	r2, [pc, #316]	; (8004734 <extInt_Config+0x71c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d106      	bne.n	800460a <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 80045fc:	4b4a      	ldr	r3, [pc, #296]	; (8004728 <extInt_Config+0x710>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	4a49      	ldr	r2, [pc, #292]	; (8004728 <extInt_Config+0x710>)
 8004602:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004606:	60d3      	str	r3, [r2, #12]
		break;
 8004608:	e2f7      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	4a49      	ldr	r2, [pc, #292]	; (8004738 <extInt_Config+0x720>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d106      	bne.n	8004624 <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8004616:	4b44      	ldr	r3, [pc, #272]	; (8004728 <extInt_Config+0x710>)
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	4a43      	ldr	r2, [pc, #268]	; (8004728 <extInt_Config+0x710>)
 800461c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8004620:	60d3      	str	r3, [r2, #12]
		break;
 8004622:	e2ea      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	4a44      	ldr	r2, [pc, #272]	; (800473c <extInt_Config+0x724>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d106      	bne.n	800463e <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8004630:	4b3d      	ldr	r3, [pc, #244]	; (8004728 <extInt_Config+0x710>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4a3c      	ldr	r2, [pc, #240]	; (8004728 <extInt_Config+0x710>)
 8004636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800463a:	60d3      	str	r3, [r2, #12]
		break;
 800463c:	e2dd      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	4a3e      	ldr	r2, [pc, #248]	; (8004740 <extInt_Config+0x728>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d106      	bne.n	8004658 <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 800464a:	4b37      	ldr	r3, [pc, #220]	; (8004728 <extInt_Config+0x710>)
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	4a36      	ldr	r2, [pc, #216]	; (8004728 <extInt_Config+0x710>)
 8004650:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8004654:	60d3      	str	r3, [r2, #12]
		break;
 8004656:	e2d0      	b.n	8004bfa <extInt_Config+0xbe2>
			__NOP();
 8004658:	bf00      	nop
		break;
 800465a:	e2ce      	b.n	8004bfa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 800465c:	4b32      	ldr	r3, [pc, #200]	; (8004728 <extInt_Config+0x710>)
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	4a31      	ldr	r2, [pc, #196]	; (8004728 <extInt_Config+0x710>)
 8004662:	f023 030f 	bic.w	r3, r3, #15
 8004666:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	4a2f      	ldr	r2, [pc, #188]	; (800472c <extInt_Config+0x714>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d104      	bne.n	800467e <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8004674:	4b2c      	ldr	r3, [pc, #176]	; (8004728 <extInt_Config+0x710>)
 8004676:	4a2c      	ldr	r2, [pc, #176]	; (8004728 <extInt_Config+0x710>)
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 800467c:	e2bd      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	4a2a      	ldr	r2, [pc, #168]	; (8004730 <extInt_Config+0x718>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d106      	bne.n	8004698 <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 800468a:	4b27      	ldr	r3, [pc, #156]	; (8004728 <extInt_Config+0x710>)
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	4a26      	ldr	r2, [pc, #152]	; (8004728 <extInt_Config+0x710>)
 8004690:	f043 0301 	orr.w	r3, r3, #1
 8004694:	6113      	str	r3, [r2, #16]
		break;
 8004696:	e2b0      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	4a25      	ldr	r2, [pc, #148]	; (8004734 <extInt_Config+0x71c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d106      	bne.n	80046b2 <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 80046a4:	4b20      	ldr	r3, [pc, #128]	; (8004728 <extInt_Config+0x710>)
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	4a1f      	ldr	r2, [pc, #124]	; (8004728 <extInt_Config+0x710>)
 80046aa:	f043 0302 	orr.w	r3, r3, #2
 80046ae:	6113      	str	r3, [r2, #16]
		break;
 80046b0:	e2a3      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	4a1f      	ldr	r2, [pc, #124]	; (8004738 <extInt_Config+0x720>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d106      	bne.n	80046cc <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 80046be:	4b1a      	ldr	r3, [pc, #104]	; (8004728 <extInt_Config+0x710>)
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	4a19      	ldr	r2, [pc, #100]	; (8004728 <extInt_Config+0x710>)
 80046c4:	f043 0303 	orr.w	r3, r3, #3
 80046c8:	6113      	str	r3, [r2, #16]
		break;
 80046ca:	e296      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	4a1a      	ldr	r2, [pc, #104]	; (800473c <extInt_Config+0x724>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d106      	bne.n	80046e6 <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 80046d8:	4b13      	ldr	r3, [pc, #76]	; (8004728 <extInt_Config+0x710>)
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	4a12      	ldr	r2, [pc, #72]	; (8004728 <extInt_Config+0x710>)
 80046de:	f043 0304 	orr.w	r3, r3, #4
 80046e2:	6113      	str	r3, [r2, #16]
		break;
 80046e4:	e289      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	4a14      	ldr	r2, [pc, #80]	; (8004740 <extInt_Config+0x728>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d106      	bne.n	8004700 <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 80046f2:	4b0d      	ldr	r3, [pc, #52]	; (8004728 <extInt_Config+0x710>)
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	4a0c      	ldr	r2, [pc, #48]	; (8004728 <extInt_Config+0x710>)
 80046f8:	f043 0307 	orr.w	r3, r3, #7
 80046fc:	6113      	str	r3, [r2, #16]
		break;
 80046fe:	e27c      	b.n	8004bfa <extInt_Config+0xbe2>
			__NOP();
 8004700:	bf00      	nop
		break;
 8004702:	e27a      	b.n	8004bfa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 8004704:	4b08      	ldr	r3, [pc, #32]	; (8004728 <extInt_Config+0x710>)
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	4a07      	ldr	r2, [pc, #28]	; (8004728 <extInt_Config+0x710>)
 800470a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800470e:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	4a05      	ldr	r2, [pc, #20]	; (800472c <extInt_Config+0x714>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d113      	bne.n	8004744 <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 800471c:	4b02      	ldr	r3, [pc, #8]	; (8004728 <extInt_Config+0x710>)
 800471e:	4a02      	ldr	r2, [pc, #8]	; (8004728 <extInt_Config+0x710>)
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8004724:	e269      	b.n	8004bfa <extInt_Config+0xbe2>
 8004726:	bf00      	nop
 8004728:	40013800 	.word	0x40013800
 800472c:	40020000 	.word	0x40020000
 8004730:	40020400 	.word	0x40020400
 8004734:	40020800 	.word	0x40020800
 8004738:	40020c00 	.word	0x40020c00
 800473c:	40021000 	.word	0x40021000
 8004740:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	4a83      	ldr	r2, [pc, #524]	; (8004958 <extInt_Config+0x940>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d106      	bne.n	800475e <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8004750:	4b82      	ldr	r3, [pc, #520]	; (800495c <extInt_Config+0x944>)
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	4a81      	ldr	r2, [pc, #516]	; (800495c <extInt_Config+0x944>)
 8004756:	f043 0310 	orr.w	r3, r3, #16
 800475a:	6113      	str	r3, [r2, #16]
		break;
 800475c:	e24d      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	4a7e      	ldr	r2, [pc, #504]	; (8004960 <extInt_Config+0x948>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d106      	bne.n	8004778 <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 800476a:	4b7c      	ldr	r3, [pc, #496]	; (800495c <extInt_Config+0x944>)
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	4a7b      	ldr	r2, [pc, #492]	; (800495c <extInt_Config+0x944>)
 8004770:	f043 0320 	orr.w	r3, r3, #32
 8004774:	6113      	str	r3, [r2, #16]
		break;
 8004776:	e240      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	4a79      	ldr	r2, [pc, #484]	; (8004964 <extInt_Config+0x94c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d106      	bne.n	8004792 <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8004784:	4b75      	ldr	r3, [pc, #468]	; (800495c <extInt_Config+0x944>)
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	4a74      	ldr	r2, [pc, #464]	; (800495c <extInt_Config+0x944>)
 800478a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800478e:	6113      	str	r3, [r2, #16]
		break;
 8004790:	e233      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	4a73      	ldr	r2, [pc, #460]	; (8004968 <extInt_Config+0x950>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d106      	bne.n	80047ac <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 800479e:	4b6f      	ldr	r3, [pc, #444]	; (800495c <extInt_Config+0x944>)
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	4a6e      	ldr	r2, [pc, #440]	; (800495c <extInt_Config+0x944>)
 80047a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047a8:	6113      	str	r3, [r2, #16]
		break;
 80047aa:	e226      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	4a6e      	ldr	r2, [pc, #440]	; (800496c <extInt_Config+0x954>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d106      	bne.n	80047c6 <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 80047b8:	4b68      	ldr	r3, [pc, #416]	; (800495c <extInt_Config+0x944>)
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	4a67      	ldr	r2, [pc, #412]	; (800495c <extInt_Config+0x944>)
 80047be:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80047c2:	6113      	str	r3, [r2, #16]
		break;
 80047c4:	e219      	b.n	8004bfa <extInt_Config+0xbe2>
			__NOP();
 80047c6:	bf00      	nop
		break;
 80047c8:	e217      	b.n	8004bfa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 80047ca:	4b64      	ldr	r3, [pc, #400]	; (800495c <extInt_Config+0x944>)
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	4a63      	ldr	r2, [pc, #396]	; (800495c <extInt_Config+0x944>)
 80047d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80047d4:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	4a64      	ldr	r2, [pc, #400]	; (8004970 <extInt_Config+0x958>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d104      	bne.n	80047ec <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 80047e2:	4b5e      	ldr	r3, [pc, #376]	; (800495c <extInt_Config+0x944>)
 80047e4:	4a5d      	ldr	r2, [pc, #372]	; (800495c <extInt_Config+0x944>)
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80047ea:	e206      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	4a59      	ldr	r2, [pc, #356]	; (8004958 <extInt_Config+0x940>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d106      	bne.n	8004806 <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 80047f8:	4b58      	ldr	r3, [pc, #352]	; (800495c <extInt_Config+0x944>)
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	4a57      	ldr	r2, [pc, #348]	; (800495c <extInt_Config+0x944>)
 80047fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004802:	6113      	str	r3, [r2, #16]
		break;
 8004804:	e1f9      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	4a54      	ldr	r2, [pc, #336]	; (8004960 <extInt_Config+0x948>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d106      	bne.n	8004820 <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8004812:	4b52      	ldr	r3, [pc, #328]	; (800495c <extInt_Config+0x944>)
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	4a51      	ldr	r2, [pc, #324]	; (800495c <extInt_Config+0x944>)
 8004818:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800481c:	6113      	str	r3, [r2, #16]
		break;
 800481e:	e1ec      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	4a4f      	ldr	r2, [pc, #316]	; (8004964 <extInt_Config+0x94c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d106      	bne.n	800483a <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 800482c:	4b4b      	ldr	r3, [pc, #300]	; (800495c <extInt_Config+0x944>)
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	4a4a      	ldr	r2, [pc, #296]	; (800495c <extInt_Config+0x944>)
 8004832:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004836:	6113      	str	r3, [r2, #16]
		break;
 8004838:	e1df      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	4a49      	ldr	r2, [pc, #292]	; (8004968 <extInt_Config+0x950>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d106      	bne.n	8004854 <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8004846:	4b45      	ldr	r3, [pc, #276]	; (800495c <extInt_Config+0x944>)
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	4a44      	ldr	r2, [pc, #272]	; (800495c <extInt_Config+0x944>)
 800484c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004850:	6113      	str	r3, [r2, #16]
		break;
 8004852:	e1d2      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	4a44      	ldr	r2, [pc, #272]	; (800496c <extInt_Config+0x954>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d106      	bne.n	800486e <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8004860:	4b3e      	ldr	r3, [pc, #248]	; (800495c <extInt_Config+0x944>)
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	4a3d      	ldr	r2, [pc, #244]	; (800495c <extInt_Config+0x944>)
 8004866:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800486a:	6113      	str	r3, [r2, #16]
		break;
 800486c:	e1c5      	b.n	8004bfa <extInt_Config+0xbe2>
			__NOP();
 800486e:	bf00      	nop
		break;
 8004870:	e1c3      	b.n	8004bfa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 8004872:	4b3a      	ldr	r3, [pc, #232]	; (800495c <extInt_Config+0x944>)
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	4a39      	ldr	r2, [pc, #228]	; (800495c <extInt_Config+0x944>)
 8004878:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800487c:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	4a3a      	ldr	r2, [pc, #232]	; (8004970 <extInt_Config+0x958>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d104      	bne.n	8004894 <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 800488a:	4b34      	ldr	r3, [pc, #208]	; (800495c <extInt_Config+0x944>)
 800488c:	4a33      	ldr	r2, [pc, #204]	; (800495c <extInt_Config+0x944>)
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8004892:	e1b2      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	4a2f      	ldr	r2, [pc, #188]	; (8004958 <extInt_Config+0x940>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d106      	bne.n	80048ae <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 80048a0:	4b2e      	ldr	r3, [pc, #184]	; (800495c <extInt_Config+0x944>)
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	4a2d      	ldr	r2, [pc, #180]	; (800495c <extInt_Config+0x944>)
 80048a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048aa:	6113      	str	r3, [r2, #16]
		break;
 80048ac:	e1a5      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	4a2a      	ldr	r2, [pc, #168]	; (8004960 <extInt_Config+0x948>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d106      	bne.n	80048c8 <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 80048ba:	4b28      	ldr	r3, [pc, #160]	; (800495c <extInt_Config+0x944>)
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	4a27      	ldr	r2, [pc, #156]	; (800495c <extInt_Config+0x944>)
 80048c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048c4:	6113      	str	r3, [r2, #16]
		break;
 80048c6:	e198      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	4a25      	ldr	r2, [pc, #148]	; (8004964 <extInt_Config+0x94c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d106      	bne.n	80048e2 <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 80048d4:	4b21      	ldr	r3, [pc, #132]	; (800495c <extInt_Config+0x944>)
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	4a20      	ldr	r2, [pc, #128]	; (800495c <extInt_Config+0x944>)
 80048da:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80048de:	6113      	str	r3, [r2, #16]
		break;
 80048e0:	e18b      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	4a1f      	ldr	r2, [pc, #124]	; (8004968 <extInt_Config+0x950>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d106      	bne.n	80048fc <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 80048ee:	4b1b      	ldr	r3, [pc, #108]	; (800495c <extInt_Config+0x944>)
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	4a1a      	ldr	r2, [pc, #104]	; (800495c <extInt_Config+0x944>)
 80048f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048f8:	6113      	str	r3, [r2, #16]
		break;
 80048fa:	e17e      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	4a1a      	ldr	r2, [pc, #104]	; (800496c <extInt_Config+0x954>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d106      	bne.n	8004916 <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8004908:	4b14      	ldr	r3, [pc, #80]	; (800495c <extInt_Config+0x944>)
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	4a13      	ldr	r2, [pc, #76]	; (800495c <extInt_Config+0x944>)
 800490e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8004912:	6113      	str	r3, [r2, #16]
		break;
 8004914:	e171      	b.n	8004bfa <extInt_Config+0xbe2>
			__NOP();
 8004916:	bf00      	nop
		break;
 8004918:	e16f      	b.n	8004bfa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 800491a:	4b10      	ldr	r3, [pc, #64]	; (800495c <extInt_Config+0x944>)
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	4a0f      	ldr	r2, [pc, #60]	; (800495c <extInt_Config+0x944>)
 8004920:	f023 030f 	bic.w	r3, r3, #15
 8004924:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	4a10      	ldr	r2, [pc, #64]	; (8004970 <extInt_Config+0x958>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d104      	bne.n	800493c <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8004932:	4b0a      	ldr	r3, [pc, #40]	; (800495c <extInt_Config+0x944>)
 8004934:	4a09      	ldr	r2, [pc, #36]	; (800495c <extInt_Config+0x944>)
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 800493a:	e15e      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	4a05      	ldr	r2, [pc, #20]	; (8004958 <extInt_Config+0x940>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d115      	bne.n	8004974 <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8004948:	4b04      	ldr	r3, [pc, #16]	; (800495c <extInt_Config+0x944>)
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	4a03      	ldr	r2, [pc, #12]	; (800495c <extInt_Config+0x944>)
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	6153      	str	r3, [r2, #20]
		break;
 8004954:	e151      	b.n	8004bfa <extInt_Config+0xbe2>
 8004956:	bf00      	nop
 8004958:	40020400 	.word	0x40020400
 800495c:	40013800 	.word	0x40013800
 8004960:	40020800 	.word	0x40020800
 8004964:	40020c00 	.word	0x40020c00
 8004968:	40021000 	.word	0x40021000
 800496c:	40021c00 	.word	0x40021c00
 8004970:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	4a83      	ldr	r2, [pc, #524]	; (8004b88 <extInt_Config+0xb70>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d106      	bne.n	800498e <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8004980:	4b82      	ldr	r3, [pc, #520]	; (8004b8c <extInt_Config+0xb74>)
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	4a81      	ldr	r2, [pc, #516]	; (8004b8c <extInt_Config+0xb74>)
 8004986:	f043 0302 	orr.w	r3, r3, #2
 800498a:	6153      	str	r3, [r2, #20]
		break;
 800498c:	e135      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	4a7e      	ldr	r2, [pc, #504]	; (8004b90 <extInt_Config+0xb78>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d106      	bne.n	80049a8 <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 800499a:	4b7c      	ldr	r3, [pc, #496]	; (8004b8c <extInt_Config+0xb74>)
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	4a7b      	ldr	r2, [pc, #492]	; (8004b8c <extInt_Config+0xb74>)
 80049a0:	f043 0303 	orr.w	r3, r3, #3
 80049a4:	6153      	str	r3, [r2, #20]
		break;
 80049a6:	e128      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	4a79      	ldr	r2, [pc, #484]	; (8004b94 <extInt_Config+0xb7c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d106      	bne.n	80049c2 <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 80049b4:	4b75      	ldr	r3, [pc, #468]	; (8004b8c <extInt_Config+0xb74>)
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	4a74      	ldr	r2, [pc, #464]	; (8004b8c <extInt_Config+0xb74>)
 80049ba:	f043 0304 	orr.w	r3, r3, #4
 80049be:	6153      	str	r3, [r2, #20]
		break;
 80049c0:	e11b      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	4a73      	ldr	r2, [pc, #460]	; (8004b98 <extInt_Config+0xb80>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d106      	bne.n	80049dc <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 80049ce:	4b6f      	ldr	r3, [pc, #444]	; (8004b8c <extInt_Config+0xb74>)
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	4a6e      	ldr	r2, [pc, #440]	; (8004b8c <extInt_Config+0xb74>)
 80049d4:	f043 0307 	orr.w	r3, r3, #7
 80049d8:	6153      	str	r3, [r2, #20]
		break;
 80049da:	e10e      	b.n	8004bfa <extInt_Config+0xbe2>
			__NOP();
 80049dc:	bf00      	nop
		break;
 80049de:	e10c      	b.n	8004bfa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 80049e0:	4b6a      	ldr	r3, [pc, #424]	; (8004b8c <extInt_Config+0xb74>)
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	4a69      	ldr	r2, [pc, #420]	; (8004b8c <extInt_Config+0xb74>)
 80049e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049ea:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	4a6a      	ldr	r2, [pc, #424]	; (8004b9c <extInt_Config+0xb84>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d104      	bne.n	8004a02 <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 80049f8:	4b64      	ldr	r3, [pc, #400]	; (8004b8c <extInt_Config+0xb74>)
 80049fa:	4a64      	ldr	r2, [pc, #400]	; (8004b8c <extInt_Config+0xb74>)
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8004a00:	e0fb      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	4a65      	ldr	r2, [pc, #404]	; (8004ba0 <extInt_Config+0xb88>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d106      	bne.n	8004a1c <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8004a0e:	4b5f      	ldr	r3, [pc, #380]	; (8004b8c <extInt_Config+0xb74>)
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	4a5e      	ldr	r2, [pc, #376]	; (8004b8c <extInt_Config+0xb74>)
 8004a14:	f043 0310 	orr.w	r3, r3, #16
 8004a18:	6153      	str	r3, [r2, #20]
		break;
 8004a1a:	e0ee      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	4a59      	ldr	r2, [pc, #356]	; (8004b88 <extInt_Config+0xb70>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d106      	bne.n	8004a36 <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8004a28:	4b58      	ldr	r3, [pc, #352]	; (8004b8c <extInt_Config+0xb74>)
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	4a57      	ldr	r2, [pc, #348]	; (8004b8c <extInt_Config+0xb74>)
 8004a2e:	f043 0320 	orr.w	r3, r3, #32
 8004a32:	6153      	str	r3, [r2, #20]
		break;
 8004a34:	e0e1      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	4a54      	ldr	r2, [pc, #336]	; (8004b90 <extInt_Config+0xb78>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d106      	bne.n	8004a50 <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8004a42:	4b52      	ldr	r3, [pc, #328]	; (8004b8c <extInt_Config+0xb74>)
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	4a51      	ldr	r2, [pc, #324]	; (8004b8c <extInt_Config+0xb74>)
 8004a48:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004a4c:	6153      	str	r3, [r2, #20]
		break;
 8004a4e:	e0d4      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	4a4f      	ldr	r2, [pc, #316]	; (8004b94 <extInt_Config+0xb7c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d106      	bne.n	8004a6a <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8004a5c:	4b4b      	ldr	r3, [pc, #300]	; (8004b8c <extInt_Config+0xb74>)
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	4a4a      	ldr	r2, [pc, #296]	; (8004b8c <extInt_Config+0xb74>)
 8004a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a66:	6153      	str	r3, [r2, #20]
		break;
 8004a68:	e0c7      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	4a49      	ldr	r2, [pc, #292]	; (8004b98 <extInt_Config+0xb80>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d106      	bne.n	8004a84 <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8004a76:	4b45      	ldr	r3, [pc, #276]	; (8004b8c <extInt_Config+0xb74>)
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	4a44      	ldr	r2, [pc, #272]	; (8004b8c <extInt_Config+0xb74>)
 8004a7c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004a80:	6153      	str	r3, [r2, #20]
		break;
 8004a82:	e0ba      	b.n	8004bfa <extInt_Config+0xbe2>
			__NOP();
 8004a84:	bf00      	nop
		break;
 8004a86:	e0b8      	b.n	8004bfa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 8004a88:	4b40      	ldr	r3, [pc, #256]	; (8004b8c <extInt_Config+0xb74>)
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	4a3f      	ldr	r2, [pc, #252]	; (8004b8c <extInt_Config+0xb74>)
 8004a8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a92:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	4a40      	ldr	r2, [pc, #256]	; (8004b9c <extInt_Config+0xb84>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d104      	bne.n	8004aaa <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8004aa0:	4b3a      	ldr	r3, [pc, #232]	; (8004b8c <extInt_Config+0xb74>)
 8004aa2:	4a3a      	ldr	r2, [pc, #232]	; (8004b8c <extInt_Config+0xb74>)
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8004aa8:	e0a7      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	4a3b      	ldr	r2, [pc, #236]	; (8004ba0 <extInt_Config+0xb88>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d106      	bne.n	8004ac4 <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8004ab6:	4b35      	ldr	r3, [pc, #212]	; (8004b8c <extInt_Config+0xb74>)
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	4a34      	ldr	r2, [pc, #208]	; (8004b8c <extInt_Config+0xb74>)
 8004abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac0:	6153      	str	r3, [r2, #20]
		break;
 8004ac2:	e09a      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	4a2f      	ldr	r2, [pc, #188]	; (8004b88 <extInt_Config+0xb70>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d106      	bne.n	8004ade <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8004ad0:	4b2e      	ldr	r3, [pc, #184]	; (8004b8c <extInt_Config+0xb74>)
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	4a2d      	ldr	r2, [pc, #180]	; (8004b8c <extInt_Config+0xb74>)
 8004ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ada:	6153      	str	r3, [r2, #20]
		break;
 8004adc:	e08d      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	4a2a      	ldr	r2, [pc, #168]	; (8004b90 <extInt_Config+0xb78>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d106      	bne.n	8004af8 <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8004aea:	4b28      	ldr	r3, [pc, #160]	; (8004b8c <extInt_Config+0xb74>)
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	4a27      	ldr	r2, [pc, #156]	; (8004b8c <extInt_Config+0xb74>)
 8004af0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004af4:	6153      	str	r3, [r2, #20]
		break;
 8004af6:	e080      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	4a25      	ldr	r2, [pc, #148]	; (8004b94 <extInt_Config+0xb7c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d106      	bne.n	8004b12 <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8004b04:	4b21      	ldr	r3, [pc, #132]	; (8004b8c <extInt_Config+0xb74>)
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	4a20      	ldr	r2, [pc, #128]	; (8004b8c <extInt_Config+0xb74>)
 8004b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b0e:	6153      	str	r3, [r2, #20]
		break;
 8004b10:	e073      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	4a1f      	ldr	r2, [pc, #124]	; (8004b98 <extInt_Config+0xb80>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d106      	bne.n	8004b2c <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8004b1e:	4b1b      	ldr	r3, [pc, #108]	; (8004b8c <extInt_Config+0xb74>)
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	4a1a      	ldr	r2, [pc, #104]	; (8004b8c <extInt_Config+0xb74>)
 8004b24:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b28:	6153      	str	r3, [r2, #20]
		break;
 8004b2a:	e066      	b.n	8004bfa <extInt_Config+0xbe2>
			__NOP();
 8004b2c:	bf00      	nop
		break;
 8004b2e:	e064      	b.n	8004bfa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 8004b30:	4b16      	ldr	r3, [pc, #88]	; (8004b8c <extInt_Config+0xb74>)
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	4a15      	ldr	r2, [pc, #84]	; (8004b8c <extInt_Config+0xb74>)
 8004b36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b3a:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	4a16      	ldr	r2, [pc, #88]	; (8004b9c <extInt_Config+0xb84>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d104      	bne.n	8004b52 <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8004b48:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <extInt_Config+0xb74>)
 8004b4a:	4a10      	ldr	r2, [pc, #64]	; (8004b8c <extInt_Config+0xb74>)
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8004b50:	e053      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	4a11      	ldr	r2, [pc, #68]	; (8004ba0 <extInt_Config+0xb88>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d106      	bne.n	8004b6c <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8004b5e:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <extInt_Config+0xb74>)
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	4a0a      	ldr	r2, [pc, #40]	; (8004b8c <extInt_Config+0xb74>)
 8004b64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b68:	6153      	str	r3, [r2, #20]
		break;
 8004b6a:	e046      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	4a05      	ldr	r2, [pc, #20]	; (8004b88 <extInt_Config+0xb70>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d115      	bne.n	8004ba4 <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8004b78:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <extInt_Config+0xb74>)
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	4a03      	ldr	r2, [pc, #12]	; (8004b8c <extInt_Config+0xb74>)
 8004b7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b82:	6153      	str	r3, [r2, #20]
		break;
 8004b84:	e039      	b.n	8004bfa <extInt_Config+0xbe2>
 8004b86:	bf00      	nop
 8004b88:	40020800 	.word	0x40020800
 8004b8c:	40013800 	.word	0x40013800
 8004b90:	40020c00 	.word	0x40020c00
 8004b94:	40021000 	.word	0x40021000
 8004b98:	40021c00 	.word	0x40021c00
 8004b9c:	40020000 	.word	0x40020000
 8004ba0:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	4a9d      	ldr	r2, [pc, #628]	; (8004e20 <extInt_Config+0xe08>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d106      	bne.n	8004bbe <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8004bb0:	4b9c      	ldr	r3, [pc, #624]	; (8004e24 <extInt_Config+0xe0c>)
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	4a9b      	ldr	r2, [pc, #620]	; (8004e24 <extInt_Config+0xe0c>)
 8004bb6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8004bba:	6153      	str	r3, [r2, #20]
		break;
 8004bbc:	e01d      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	4a98      	ldr	r2, [pc, #608]	; (8004e28 <extInt_Config+0xe10>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d106      	bne.n	8004bd8 <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8004bca:	4b96      	ldr	r3, [pc, #600]	; (8004e24 <extInt_Config+0xe0c>)
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	4a95      	ldr	r2, [pc, #596]	; (8004e24 <extInt_Config+0xe0c>)
 8004bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bd4:	6153      	str	r3, [r2, #20]
		break;
 8004bd6:	e010      	b.n	8004bfa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	4a93      	ldr	r2, [pc, #588]	; (8004e2c <extInt_Config+0xe14>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d106      	bne.n	8004bf2 <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8004be4:	4b8f      	ldr	r3, [pc, #572]	; (8004e24 <extInt_Config+0xe0c>)
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	4a8e      	ldr	r2, [pc, #568]	; (8004e24 <extInt_Config+0xe0c>)
 8004bea:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8004bee:	6153      	str	r3, [r2, #20]
		break;
 8004bf0:	e003      	b.n	8004bfa <extInt_Config+0xbe2>
			__NOP();
 8004bf2:	bf00      	nop
		break;
 8004bf4:	e001      	b.n	8004bfa <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 8004bf6:	bf00      	nop
		break;
 8004bf8:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	791b      	ldrb	r3, [r3, #4]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d126      	bne.n	8004c50 <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004c02:	4b8b      	ldr	r3, [pc, #556]	; (8004e30 <extInt_Config+0xe18>)
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6812      	ldr	r2, [r2, #0]
 8004c0a:	7812      	ldrb	r2, [r2, #0]
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	2201      	movs	r2, #1
 8004c10:	408a      	lsls	r2, r1
 8004c12:	43d2      	mvns	r2, r2
 8004c14:	4611      	mov	r1, r2
 8004c16:	4a86      	ldr	r2, [pc, #536]	; (8004e30 <extInt_Config+0xe18>)
 8004c18:	400b      	ands	r3, r1
 8004c1a:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004c1c:	4b84      	ldr	r3, [pc, #528]	; (8004e30 <extInt_Config+0xe18>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6812      	ldr	r2, [r2, #0]
 8004c24:	7812      	ldrb	r2, [r2, #0]
 8004c26:	4611      	mov	r1, r2
 8004c28:	2201      	movs	r2, #1
 8004c2a:	408a      	lsls	r2, r1
 8004c2c:	43d2      	mvns	r2, r2
 8004c2e:	4611      	mov	r1, r2
 8004c30:	4a7f      	ldr	r2, [pc, #508]	; (8004e30 <extInt_Config+0xe18>)
 8004c32:	400b      	ands	r3, r1
 8004c34:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004c36:	4b7e      	ldr	r3, [pc, #504]	; (8004e30 <extInt_Config+0xe18>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6812      	ldr	r2, [r2, #0]
 8004c3e:	7812      	ldrb	r2, [r2, #0]
 8004c40:	4611      	mov	r1, r2
 8004c42:	2201      	movs	r2, #1
 8004c44:	408a      	lsls	r2, r1
 8004c46:	4611      	mov	r1, r2
 8004c48:	4a79      	ldr	r2, [pc, #484]	; (8004e30 <extInt_Config+0xe18>)
 8004c4a:	430b      	orrs	r3, r1
 8004c4c:	6093      	str	r3, [r2, #8]
 8004c4e:	e05c      	b.n	8004d0a <extInt_Config+0xcf2>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	791b      	ldrb	r3, [r3, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d126      	bne.n	8004ca6 <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004c58:	4b75      	ldr	r3, [pc, #468]	; (8004e30 <extInt_Config+0xe18>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6812      	ldr	r2, [r2, #0]
 8004c60:	7812      	ldrb	r2, [r2, #0]
 8004c62:	4611      	mov	r1, r2
 8004c64:	2201      	movs	r2, #1
 8004c66:	408a      	lsls	r2, r1
 8004c68:	43d2      	mvns	r2, r2
 8004c6a:	4611      	mov	r1, r2
 8004c6c:	4a70      	ldr	r2, [pc, #448]	; (8004e30 <extInt_Config+0xe18>)
 8004c6e:	400b      	ands	r3, r1
 8004c70:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004c72:	4b6f      	ldr	r3, [pc, #444]	; (8004e30 <extInt_Config+0xe18>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6812      	ldr	r2, [r2, #0]
 8004c7a:	7812      	ldrb	r2, [r2, #0]
 8004c7c:	4611      	mov	r1, r2
 8004c7e:	2201      	movs	r2, #1
 8004c80:	408a      	lsls	r2, r1
 8004c82:	43d2      	mvns	r2, r2
 8004c84:	4611      	mov	r1, r2
 8004c86:	4a6a      	ldr	r2, [pc, #424]	; (8004e30 <extInt_Config+0xe18>)
 8004c88:	400b      	ands	r3, r1
 8004c8a:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004c8c:	4b68      	ldr	r3, [pc, #416]	; (8004e30 <extInt_Config+0xe18>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6812      	ldr	r2, [r2, #0]
 8004c94:	7812      	ldrb	r2, [r2, #0]
 8004c96:	4611      	mov	r1, r2
 8004c98:	2201      	movs	r2, #1
 8004c9a:	408a      	lsls	r2, r1
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	4a64      	ldr	r2, [pc, #400]	; (8004e30 <extInt_Config+0xe18>)
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	60d3      	str	r3, [r2, #12]
 8004ca4:	e031      	b.n	8004d0a <extInt_Config+0xcf2>

	}
	else
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004ca6:	4b62      	ldr	r3, [pc, #392]	; (8004e30 <extInt_Config+0xe18>)
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6812      	ldr	r2, [r2, #0]
 8004cae:	7812      	ldrb	r2, [r2, #0]
 8004cb0:	4611      	mov	r1, r2
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	408a      	lsls	r2, r1
 8004cb6:	43d2      	mvns	r2, r2
 8004cb8:	4611      	mov	r1, r2
 8004cba:	4a5d      	ldr	r2, [pc, #372]	; (8004e30 <extInt_Config+0xe18>)
 8004cbc:	400b      	ands	r3, r1
 8004cbe:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004cc0:	4b5b      	ldr	r3, [pc, #364]	; (8004e30 <extInt_Config+0xe18>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	7812      	ldrb	r2, [r2, #0]
 8004cca:	4611      	mov	r1, r2
 8004ccc:	2201      	movs	r2, #1
 8004cce:	408a      	lsls	r2, r1
 8004cd0:	43d2      	mvns	r2, r2
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	4a56      	ldr	r2, [pc, #344]	; (8004e30 <extInt_Config+0xe18>)
 8004cd6:	400b      	ands	r3, r1
 8004cd8:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004cda:	4b55      	ldr	r3, [pc, #340]	; (8004e30 <extInt_Config+0xe18>)
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6812      	ldr	r2, [r2, #0]
 8004ce2:	7812      	ldrb	r2, [r2, #0]
 8004ce4:	4611      	mov	r1, r2
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	408a      	lsls	r2, r1
 8004cea:	4611      	mov	r1, r2
 8004cec:	4a50      	ldr	r2, [pc, #320]	; (8004e30 <extInt_Config+0xe18>)
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004cf2:	4b4f      	ldr	r3, [pc, #316]	; (8004e30 <extInt_Config+0xe18>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	7812      	ldrb	r2, [r2, #0]
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	2201      	movs	r2, #1
 8004d00:	408a      	lsls	r2, r1
 8004d02:	4611      	mov	r1, r2
 8004d04:	4a4a      	ldr	r2, [pc, #296]	; (8004e30 <extInt_Config+0xe18>)
 8004d06:	430b      	orrs	r3, r1
 8004d08:	6093      	str	r3, [r2, #8]
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004d0a:	4b49      	ldr	r3, [pc, #292]	; (8004e30 <extInt_Config+0xe18>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6812      	ldr	r2, [r2, #0]
 8004d12:	7812      	ldrb	r2, [r2, #0]
 8004d14:	4611      	mov	r1, r2
 8004d16:	2201      	movs	r2, #1
 8004d18:	408a      	lsls	r2, r1
 8004d1a:	43d2      	mvns	r2, r2
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	4a44      	ldr	r2, [pc, #272]	; (8004e30 <extInt_Config+0xe18>)
 8004d20:	400b      	ands	r3, r1
 8004d22:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004d24:	4b42      	ldr	r3, [pc, #264]	; (8004e30 <extInt_Config+0xe18>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	7812      	ldrb	r2, [r2, #0]
 8004d2e:	4611      	mov	r1, r2
 8004d30:	2201      	movs	r2, #1
 8004d32:	408a      	lsls	r2, r1
 8004d34:	4611      	mov	r1, r2
 8004d36:	4a3e      	ldr	r2, [pc, #248]	; (8004e30 <extInt_Config+0xe18>)
 8004d38:	430b      	orrs	r3, r1
 8004d3a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d3c:	b672      	cpsid	i
}
 8004d3e:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b0f      	cmp	r3, #15
 8004d48:	d862      	bhi.n	8004e10 <extInt_Config+0xdf8>
 8004d4a:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <extInt_Config+0xd38>)
 8004d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d50:	08004d91 	.word	0x08004d91
 8004d54:	08004d99 	.word	0x08004d99
 8004d58:	08004da1 	.word	0x08004da1
 8004d5c:	08004da9 	.word	0x08004da9
 8004d60:	08004db1 	.word	0x08004db1
 8004d64:	08004db9 	.word	0x08004db9
 8004d68:	08004dc1 	.word	0x08004dc1
 8004d6c:	08004dc9 	.word	0x08004dc9
 8004d70:	08004dd1 	.word	0x08004dd1
 8004d74:	08004dd9 	.word	0x08004dd9
 8004d78:	08004de1 	.word	0x08004de1
 8004d7c:	08004de9 	.word	0x08004de9
 8004d80:	08004df1 	.word	0x08004df1
 8004d84:	08004df9 	.word	0x08004df9
 8004d88:	08004e01 	.word	0x08004e01
 8004d8c:	08004e09 	.word	0x08004e09
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 8004d90:	2006      	movs	r0, #6
 8004d92:	f7ff f923 	bl	8003fdc <__NVIC_EnableIRQ>
		break;
 8004d96:	e03c      	b.n	8004e12 <extInt_Config+0xdfa>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 8004d98:	2007      	movs	r0, #7
 8004d9a:	f7ff f91f 	bl	8003fdc <__NVIC_EnableIRQ>
		break;
 8004d9e:	e038      	b.n	8004e12 <extInt_Config+0xdfa>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 8004da0:	2008      	movs	r0, #8
 8004da2:	f7ff f91b 	bl	8003fdc <__NVIC_EnableIRQ>
		break;
 8004da6:	e034      	b.n	8004e12 <extInt_Config+0xdfa>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 8004da8:	2009      	movs	r0, #9
 8004daa:	f7ff f917 	bl	8003fdc <__NVIC_EnableIRQ>
		break;
 8004dae:	e030      	b.n	8004e12 <extInt_Config+0xdfa>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 8004db0:	200a      	movs	r0, #10
 8004db2:	f7ff f913 	bl	8003fdc <__NVIC_EnableIRQ>
		break;
 8004db6:	e02c      	b.n	8004e12 <extInt_Config+0xdfa>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004db8:	2017      	movs	r0, #23
 8004dba:	f7ff f90f 	bl	8003fdc <__NVIC_EnableIRQ>
		break;
 8004dbe:	e028      	b.n	8004e12 <extInt_Config+0xdfa>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004dc0:	2017      	movs	r0, #23
 8004dc2:	f7ff f90b 	bl	8003fdc <__NVIC_EnableIRQ>
		break;
 8004dc6:	e024      	b.n	8004e12 <extInt_Config+0xdfa>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004dc8:	2017      	movs	r0, #23
 8004dca:	f7ff f907 	bl	8003fdc <__NVIC_EnableIRQ>
		break;
 8004dce:	e020      	b.n	8004e12 <extInt_Config+0xdfa>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004dd0:	2017      	movs	r0, #23
 8004dd2:	f7ff f903 	bl	8003fdc <__NVIC_EnableIRQ>
		break;
 8004dd6:	e01c      	b.n	8004e12 <extInt_Config+0xdfa>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004dd8:	2017      	movs	r0, #23
 8004dda:	f7ff f8ff 	bl	8003fdc <__NVIC_EnableIRQ>
		break;
 8004dde:	e018      	b.n	8004e12 <extInt_Config+0xdfa>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004de0:	2028      	movs	r0, #40	; 0x28
 8004de2:	f7ff f8fb 	bl	8003fdc <__NVIC_EnableIRQ>
		break;
 8004de6:	e014      	b.n	8004e12 <extInt_Config+0xdfa>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004de8:	2028      	movs	r0, #40	; 0x28
 8004dea:	f7ff f8f7 	bl	8003fdc <__NVIC_EnableIRQ>
		break;
 8004dee:	e010      	b.n	8004e12 <extInt_Config+0xdfa>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004df0:	2028      	movs	r0, #40	; 0x28
 8004df2:	f7ff f8f3 	bl	8003fdc <__NVIC_EnableIRQ>
		break;
 8004df6:	e00c      	b.n	8004e12 <extInt_Config+0xdfa>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004df8:	2028      	movs	r0, #40	; 0x28
 8004dfa:	f7ff f8ef 	bl	8003fdc <__NVIC_EnableIRQ>
		break;
 8004dfe:	e008      	b.n	8004e12 <extInt_Config+0xdfa>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004e00:	2028      	movs	r0, #40	; 0x28
 8004e02:	f7ff f8eb 	bl	8003fdc <__NVIC_EnableIRQ>
		break;
 8004e06:	e004      	b.n	8004e12 <extInt_Config+0xdfa>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004e08:	2028      	movs	r0, #40	; 0x28
 8004e0a:	f7ff f8e7 	bl	8003fdc <__NVIC_EnableIRQ>
		break;
 8004e0e:	e000      	b.n	8004e12 <extInt_Config+0xdfa>
	}

	default: {
		break;
 8004e10:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8004e12:	b662      	cpsie	i
}
 8004e14:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40020c00 	.word	0x40020c00
 8004e24:	40013800 	.word	0x40013800
 8004e28:	40021000 	.word	0x40021000
 8004e2c:	40021c00 	.word	0x40021c00
 8004e30:	40013c00 	.word	0x40013c00

08004e34 <callback_extInt0>:
	__enable_irq();
}


//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
	__NOP();
 8004e38:	bf00      	nop
}
 8004e3a:	bf00      	nop
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt2(void){
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
	__NOP();
 8004e48:	bf00      	nop
}
 8004e4a:	bf00      	nop
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt4(void){
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
	__NOP();
 8004e58:	bf00      	nop
}
 8004e5a:	bf00      	nop
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
	__NOP();
 8004e68:	bf00      	nop
}
 8004e6a:	bf00      	nop
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
	__NOP();
 8004e78:	bf00      	nop
}
 8004e7a:	bf00      	nop
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
	__NOP();
 8004e88:	bf00      	nop
}
 8004e8a:	bf00      	nop
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
	__NOP();
 8004e98:	bf00      	nop
}
 8004e9a:	bf00      	nop
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
	__NOP();
 8004ea8:	bf00      	nop
}
 8004eaa:	bf00      	nop
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
	__NOP();
 8004eb8:	bf00      	nop
}
 8004eba:	bf00      	nop
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
	__NOP();
 8004ec8:	bf00      	nop
}
 8004eca:	bf00      	nop
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
	__NOP();
 8004ed8:	bf00      	nop
}
 8004eda:	bf00      	nop
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <callback_extInt13>:

__attribute__ ((weak)) void callback_extInt13(void){
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
	__NOP();
 8004ee8:	bf00      	nop
}
 8004eea:	bf00      	nop
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt14(void){
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
	__NOP();
 8004ef8:	bf00      	nop
}
 8004efa:	bf00      	nop
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
	__NOP();
 8004f08:	bf00      	nop
}
 8004f0a:	bf00      	nop
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 8004f18:	4b08      	ldr	r3, [pc, #32]	; (8004f3c <EXTI0_IRQHandler+0x28>)
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d008      	beq.n	8004f36 <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 8004f24:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <EXTI0_IRQHandler+0x28>)
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	4a04      	ldr	r2, [pc, #16]	; (8004f3c <EXTI0_IRQHandler+0x28>)
 8004f2a:	f043 0301 	orr.w	r3, r3, #1
 8004f2e:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 8004f30:	f7ff ff80 	bl	8004e34 <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 8004f34:	e000      	b.n	8004f38 <EXTI0_IRQHandler+0x24>
		__NOP();
 8004f36:	bf00      	nop
}
 8004f38:	bf00      	nop
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40013c00 	.word	0x40013c00

08004f40 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 8004f44:	4b08      	ldr	r3, [pc, #32]	; (8004f68 <EXTI1_IRQHandler+0x28>)
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 8004f50:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <EXTI1_IRQHandler+0x28>)
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	4a04      	ldr	r2, [pc, #16]	; (8004f68 <EXTI1_IRQHandler+0x28>)
 8004f56:	f043 0302 	orr.w	r3, r3, #2
 8004f5a:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 8004f5c:	f7fe f80e 	bl	8002f7c <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 8004f60:	e000      	b.n	8004f64 <EXTI1_IRQHandler+0x24>
		__NOP();
 8004f62:	bf00      	nop
}
 8004f64:	bf00      	nop
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40013c00 	.word	0x40013c00

08004f6c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 8004f70:	4b08      	ldr	r3, [pc, #32]	; (8004f94 <EXTI2_IRQHandler+0x28>)
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d008      	beq.n	8004f8e <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 8004f7c:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <EXTI2_IRQHandler+0x28>)
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	4a04      	ldr	r2, [pc, #16]	; (8004f94 <EXTI2_IRQHandler+0x28>)
 8004f82:	f043 0304 	orr.w	r3, r3, #4
 8004f86:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 8004f88:	f7ff ff5c 	bl	8004e44 <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 8004f8c:	e000      	b.n	8004f90 <EXTI2_IRQHandler+0x24>
		__NOP();
 8004f8e:	bf00      	nop
}
 8004f90:	bf00      	nop
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40013c00 	.word	0x40013c00

08004f98 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 8004f9c:	4b08      	ldr	r3, [pc, #32]	; (8004fc0 <EXTI3_IRQHandler+0x28>)
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f003 0308 	and.w	r3, r3, #8
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d008      	beq.n	8004fba <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 8004fa8:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <EXTI3_IRQHandler+0x28>)
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	4a04      	ldr	r2, [pc, #16]	; (8004fc0 <EXTI3_IRQHandler+0x28>)
 8004fae:	f043 0308 	orr.w	r3, r3, #8
 8004fb2:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 8004fb4:	f7fd fff2 	bl	8002f9c <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 8004fb8:	e000      	b.n	8004fbc <EXTI3_IRQHandler+0x24>
		__NOP();
 8004fba:	bf00      	nop
}
 8004fbc:	bf00      	nop
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40013c00 	.word	0x40013c00

08004fc4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 8004fc8:	4b08      	ldr	r3, [pc, #32]	; (8004fec <EXTI4_IRQHandler+0x28>)
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	f003 0310 	and.w	r3, r3, #16
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d008      	beq.n	8004fe6 <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 8004fd4:	4b05      	ldr	r3, [pc, #20]	; (8004fec <EXTI4_IRQHandler+0x28>)
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	4a04      	ldr	r2, [pc, #16]	; (8004fec <EXTI4_IRQHandler+0x28>)
 8004fda:	f043 0310 	orr.w	r3, r3, #16
 8004fde:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 8004fe0:	f7ff ff38 	bl	8004e54 <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 8004fe4:	e000      	b.n	8004fe8 <EXTI4_IRQHandler+0x24>
		__NOP();
 8004fe6:	bf00      	nop
}
 8004fe8:	bf00      	nop
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40013c00 	.word	0x40013c00

08004ff0 <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 8004ff4:	4b26      	ldr	r3, [pc, #152]	; (8005090 <EXTI9_5_IRQHandler+0xa0>)
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	f003 0320 	and.w	r3, r3, #32
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d008      	beq.n	8005012 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 8005000:	4b23      	ldr	r3, [pc, #140]	; (8005090 <EXTI9_5_IRQHandler+0xa0>)
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	4a22      	ldr	r2, [pc, #136]	; (8005090 <EXTI9_5_IRQHandler+0xa0>)
 8005006:	f043 0320 	orr.w	r3, r3, #32
 800500a:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 800500c:	f7ff ff2a 	bl	8004e64 <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 8005010:	e03c      	b.n	800508c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 8005012:	4b1f      	ldr	r3, [pc, #124]	; (8005090 <EXTI9_5_IRQHandler+0xa0>)
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501a:	2b00      	cmp	r3, #0
 800501c:	d008      	beq.n	8005030 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 800501e:	4b1c      	ldr	r3, [pc, #112]	; (8005090 <EXTI9_5_IRQHandler+0xa0>)
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	4a1b      	ldr	r2, [pc, #108]	; (8005090 <EXTI9_5_IRQHandler+0xa0>)
 8005024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005028:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 800502a:	f7ff ff23 	bl	8004e74 <callback_extInt6>
}
 800502e:	e02d      	b.n	800508c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 8005030:	4b17      	ldr	r3, [pc, #92]	; (8005090 <EXTI9_5_IRQHandler+0xa0>)
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005038:	2b00      	cmp	r3, #0
 800503a:	d008      	beq.n	800504e <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 800503c:	4b14      	ldr	r3, [pc, #80]	; (8005090 <EXTI9_5_IRQHandler+0xa0>)
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	4a13      	ldr	r2, [pc, #76]	; (8005090 <EXTI9_5_IRQHandler+0xa0>)
 8005042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005046:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 8005048:	f7ff ff1c 	bl	8004e84 <callback_extInt7>
}
 800504c:	e01e      	b.n	800508c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 800504e:	4b10      	ldr	r3, [pc, #64]	; (8005090 <EXTI9_5_IRQHandler+0xa0>)
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005056:	2b00      	cmp	r3, #0
 8005058:	d008      	beq.n	800506c <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 800505a:	4b0d      	ldr	r3, [pc, #52]	; (8005090 <EXTI9_5_IRQHandler+0xa0>)
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	4a0c      	ldr	r2, [pc, #48]	; (8005090 <EXTI9_5_IRQHandler+0xa0>)
 8005060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005064:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 8005066:	f7ff ff15 	bl	8004e94 <callback_extInt8>
}
 800506a:	e00f      	b.n	800508c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 800506c:	4b08      	ldr	r3, [pc, #32]	; (8005090 <EXTI9_5_IRQHandler+0xa0>)
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005074:	2b00      	cmp	r3, #0
 8005076:	d008      	beq.n	800508a <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 8005078:	4b05      	ldr	r3, [pc, #20]	; (8005090 <EXTI9_5_IRQHandler+0xa0>)
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	4a04      	ldr	r2, [pc, #16]	; (8005090 <EXTI9_5_IRQHandler+0xa0>)
 800507e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005082:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 8005084:	f7ff ff0e 	bl	8004ea4 <callback_extInt9>
}
 8005088:	e000      	b.n	800508c <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 800508a:	bf00      	nop
}
 800508c:	bf00      	nop
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40013c00 	.word	0x40013c00

08005094 <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 8005098:	4b2e      	ldr	r3, [pc, #184]	; (8005154 <EXTI15_10_IRQHandler+0xc0>)
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d008      	beq.n	80050b6 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 80050a4:	4b2b      	ldr	r3, [pc, #172]	; (8005154 <EXTI15_10_IRQHandler+0xc0>)
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	4a2a      	ldr	r2, [pc, #168]	; (8005154 <EXTI15_10_IRQHandler+0xc0>)
 80050aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050ae:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 80050b0:	f7ff ff00 	bl	8004eb4 <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 80050b4:	e04b      	b.n	800514e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 80050b6:	4b27      	ldr	r3, [pc, #156]	; (8005154 <EXTI15_10_IRQHandler+0xc0>)
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d008      	beq.n	80050d4 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 80050c2:	4b24      	ldr	r3, [pc, #144]	; (8005154 <EXTI15_10_IRQHandler+0xc0>)
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	4a23      	ldr	r2, [pc, #140]	; (8005154 <EXTI15_10_IRQHandler+0xc0>)
 80050c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050cc:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 80050ce:	f7ff fef9 	bl	8004ec4 <callback_extInt11>
}
 80050d2:	e03c      	b.n	800514e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 80050d4:	4b1f      	ldr	r3, [pc, #124]	; (8005154 <EXTI15_10_IRQHandler+0xc0>)
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d008      	beq.n	80050f2 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 80050e0:	4b1c      	ldr	r3, [pc, #112]	; (8005154 <EXTI15_10_IRQHandler+0xc0>)
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	4a1b      	ldr	r2, [pc, #108]	; (8005154 <EXTI15_10_IRQHandler+0xc0>)
 80050e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050ea:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 80050ec:	f7ff fef2 	bl	8004ed4 <callback_extInt12>
}
 80050f0:	e02d      	b.n	800514e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 80050f2:	4b18      	ldr	r3, [pc, #96]	; (8005154 <EXTI15_10_IRQHandler+0xc0>)
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d008      	beq.n	8005110 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 80050fe:	4b15      	ldr	r3, [pc, #84]	; (8005154 <EXTI15_10_IRQHandler+0xc0>)
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	4a14      	ldr	r2, [pc, #80]	; (8005154 <EXTI15_10_IRQHandler+0xc0>)
 8005104:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005108:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 800510a:	f7ff feeb 	bl	8004ee4 <callback_extInt13>
}
 800510e:	e01e      	b.n	800514e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 8005110:	4b10      	ldr	r3, [pc, #64]	; (8005154 <EXTI15_10_IRQHandler+0xc0>)
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d008      	beq.n	800512e <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 800511c:	4b0d      	ldr	r3, [pc, #52]	; (8005154 <EXTI15_10_IRQHandler+0xc0>)
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	4a0c      	ldr	r2, [pc, #48]	; (8005154 <EXTI15_10_IRQHandler+0xc0>)
 8005122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005126:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 8005128:	f7ff fee4 	bl	8004ef4 <callback_extInt14>
}
 800512c:	e00f      	b.n	800514e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 800512e:	4b09      	ldr	r3, [pc, #36]	; (8005154 <EXTI15_10_IRQHandler+0xc0>)
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d008      	beq.n	800514c <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 800513a:	4b06      	ldr	r3, [pc, #24]	; (8005154 <EXTI15_10_IRQHandler+0xc0>)
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	4a05      	ldr	r2, [pc, #20]	; (8005154 <EXTI15_10_IRQHandler+0xc0>)
 8005140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005144:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 8005146:	f7ff fedd 	bl	8004f04 <callback_extInt15>
}
 800514a:	e000      	b.n	800514e <EXTI15_10_IRQHandler+0xba>
		__NOP();
 800514c:	bf00      	nop
}
 800514e:	bf00      	nop
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	40013c00 	.word	0x40013c00

08005158 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	4608      	mov	r0, r1
 8005162:	4611      	mov	r1, r2
 8005164:	461a      	mov	r2, r3
 8005166:	4603      	mov	r3, r0
 8005168:	70fb      	strb	r3, [r7, #3]
 800516a:	460b      	mov	r3, r1
 800516c:	70bb      	strb	r3, [r7, #2]
 800516e:	4613      	mov	r3, r2
 8005170:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	78fa      	ldrb	r2, [r7, #3]
 8005176:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	78ba      	ldrb	r2, [r7, #2]
 800517c:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	787a      	ldrb	r2, [r7, #1]
 8005182:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	7c3a      	ldrb	r2, [r7, #16]
 8005188:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	7d3a      	ldrb	r2, [r7, #20]
 800518e:	715a      	strb	r2, [r3, #5]
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80051a8:	2300      	movs	r3, #0
 80051aa:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	4a88      	ldr	r2, [pc, #544]	; (80053d4 <GPIO_Config+0x238>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d106      	bne.n	80051c4 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 80051b6:	4b88      	ldr	r3, [pc, #544]	; (80053d8 <GPIO_Config+0x23c>)
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	4a87      	ldr	r2, [pc, #540]	; (80053d8 <GPIO_Config+0x23c>)
 80051bc:	f043 0301 	orr.w	r3, r3, #1
 80051c0:	6313      	str	r3, [r2, #48]	; 0x30
 80051c2:	e03a      	b.n	800523a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	4a84      	ldr	r2, [pc, #528]	; (80053dc <GPIO_Config+0x240>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d106      	bne.n	80051dc <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 80051ce:	4b82      	ldr	r3, [pc, #520]	; (80053d8 <GPIO_Config+0x23c>)
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	4a81      	ldr	r2, [pc, #516]	; (80053d8 <GPIO_Config+0x23c>)
 80051d4:	f043 0302 	orr.w	r3, r3, #2
 80051d8:	6313      	str	r3, [r2, #48]	; 0x30
 80051da:	e02e      	b.n	800523a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	4a7f      	ldr	r2, [pc, #508]	; (80053e0 <GPIO_Config+0x244>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d106      	bne.n	80051f4 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 80051e6:	4b7c      	ldr	r3, [pc, #496]	; (80053d8 <GPIO_Config+0x23c>)
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	4a7b      	ldr	r2, [pc, #492]	; (80053d8 <GPIO_Config+0x23c>)
 80051ec:	f043 0304 	orr.w	r3, r3, #4
 80051f0:	6313      	str	r3, [r2, #48]	; 0x30
 80051f2:	e022      	b.n	800523a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	4a7a      	ldr	r2, [pc, #488]	; (80053e4 <GPIO_Config+0x248>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d106      	bne.n	800520c <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 80051fe:	4b76      	ldr	r3, [pc, #472]	; (80053d8 <GPIO_Config+0x23c>)
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	4a75      	ldr	r2, [pc, #468]	; (80053d8 <GPIO_Config+0x23c>)
 8005204:	f043 0308 	orr.w	r3, r3, #8
 8005208:	6313      	str	r3, [r2, #48]	; 0x30
 800520a:	e016      	b.n	800523a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	4a75      	ldr	r2, [pc, #468]	; (80053e8 <GPIO_Config+0x24c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d106      	bne.n	8005224 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 8005216:	4b70      	ldr	r3, [pc, #448]	; (80053d8 <GPIO_Config+0x23c>)
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	4a6f      	ldr	r2, [pc, #444]	; (80053d8 <GPIO_Config+0x23c>)
 800521c:	f043 0310 	orr.w	r3, r3, #16
 8005220:	6313      	str	r3, [r2, #48]	; 0x30
 8005222:	e00a      	b.n	800523a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	4a70      	ldr	r2, [pc, #448]	; (80053ec <GPIO_Config+0x250>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d105      	bne.n	800523a <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 800522e:	4b6a      	ldr	r3, [pc, #424]	; (80053d8 <GPIO_Config+0x23c>)
 8005230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005232:	4a69      	ldr	r2, [pc, #420]	; (80053d8 <GPIO_Config+0x23c>)
 8005234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005238:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	785b      	ldrb	r3, [r3, #1]
 800523e:	461a      	mov	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	2103      	movs	r1, #3
 800525a:	fa01 f303 	lsl.w	r3, r1, r3
 800525e:	43db      	mvns	r3, r3
 8005260:	4619      	mov	r1, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	400a      	ands	r2, r1
 8005268:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	6819      	ldr	r1, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	430a      	orrs	r2, r1
 8005278:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	789b      	ldrb	r3, [r3, #2]
 800527e:	461a      	mov	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	fa02 f303 	lsl.w	r3, r2, r3
 8005288:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	4619      	mov	r1, r3
 8005296:	2301      	movs	r3, #1
 8005298:	408b      	lsls	r3, r1
 800529a:	43db      	mvns	r3, r3
 800529c:	4619      	mov	r1, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	400a      	ands	r2, r1
 80052a4:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	6859      	ldr	r1, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	78db      	ldrb	r3, [r3, #3]
 80052ba:	461a      	mov	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	fa02 f303 	lsl.w	r3, r2, r3
 80052c6:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	2103      	movs	r1, #3
 80052d6:	fa01 f303 	lsl.w	r3, r1, r3
 80052da:	43db      	mvns	r3, r3
 80052dc:	4619      	mov	r1, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	400a      	ands	r2, r1
 80052e4:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	6899      	ldr	r1, [r3, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	791b      	ldrb	r3, [r3, #4]
 80052fa:	461a      	mov	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	2103      	movs	r1, #3
 8005316:	fa01 f303 	lsl.w	r3, r1, r3
 800531a:	43db      	mvns	r3, r3
 800531c:	4619      	mov	r1, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	400a      	ands	r2, r1
 8005324:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	68d9      	ldr	r1, [r3, #12]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	430a      	orrs	r2, r1
 8005334:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	785b      	ldrb	r3, [r3, #1]
 800533a:	2b02      	cmp	r3, #2
 800533c:	d143      	bne.n	80053c6 <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b07      	cmp	r3, #7
 8005344:	d81f      	bhi.n	8005386 <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	6a1a      	ldr	r2, [r3, #32]
 8005354:	210f      	movs	r1, #15
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	fa01 f303 	lsl.w	r3, r1, r3
 800535c:	43db      	mvns	r3, r3
 800535e:	4619      	mov	r1, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	400a      	ands	r2, r1
 8005366:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	6a1a      	ldr	r2, [r3, #32]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	795b      	ldrb	r3, [r3, #5]
 8005372:	4619      	mov	r1, r3
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	fa01 f303 	lsl.w	r3, r1, r3
 800537a:	4619      	mov	r1, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	430a      	orrs	r2, r1
 8005382:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8005384:	e01f      	b.n	80053c6 <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	3b08      	subs	r3, #8
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005396:	210f      	movs	r1, #15
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	fa01 f303 	lsl.w	r3, r1, r3
 800539e:	43db      	mvns	r3, r3
 80053a0:	4619      	mov	r1, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	400a      	ands	r2, r1
 80053a8:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	795b      	ldrb	r3, [r3, #5]
 80053b4:	4619      	mov	r1, r3
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	fa01 f303 	lsl.w	r3, r1, r3
 80053bc:	4619      	mov	r1, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80053c6:	bf00      	nop
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40020000 	.word	0x40020000
 80053d8:	40023800 	.word	0x40023800
 80053dc:	40020400 	.word	0x40020400
 80053e0:	40020800 	.word	0x40020800
 80053e4:	40020c00 	.word	0x40020c00
 80053e8:	40021000 	.word	0x40021000
 80053ec:	40021c00 	.word	0x40021c00

080053f0 <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 80053fc:	78fb      	ldrb	r3, [r7, #3]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d10d      	bne.n	800541e <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	699a      	ldr	r2, [r3, #24]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	4619      	mov	r1, r3
 800540e:	2301      	movs	r3, #1
 8005410:	408b      	lsls	r3, r1
 8005412:	4619      	mov	r1, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	430a      	orrs	r2, r1
 800541a:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 800541c:	e00d      	b.n	800543a <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	699a      	ldr	r2, [r3, #24]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	3310      	adds	r3, #16
 800542a:	2101      	movs	r1, #1
 800542c:	fa01 f303 	lsl.w	r3, r1, r3
 8005430:	4619      	mov	r1, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	430a      	orrs	r2, r1
 8005438:	619a      	str	r2, [r3, #24]
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	695a      	ldr	r2, [r3, #20]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	4619      	mov	r1, r3
 800545a:	2301      	movs	r3, #1
 800545c:	408b      	lsls	r3, r1
 800545e:	4619      	mov	r1, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	404a      	eors	r2, r1
 8005466:	615a      	str	r2, [r3, #20]
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <i2c_Config>:
 * Recordar de configurar los pines GPIOx por medio de las funciones alternativas,
 * Ademas de configurar dichos pines como open_drain
 */

void i2c_Config(I2C_Handler_t *ptrHandlerI2C)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
	uint8_t clockAPB1 = getClockAPB1();     //Variable que guarda la velocidad de reloj entregada al bus APB1
 800547c:	f000 fa9c 	bl	80059b8 <getClockAPB1>
 8005480:	4603      	mov	r3, r0
 8005482:	73fb      	strb	r3, [r7, #15]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	if(ptrHandlerI2C->prtI2Cx == I2C1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a60      	ldr	r2, [pc, #384]	; (800560c <i2c_Config+0x198>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d106      	bne.n	800549c <i2c_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800548e:	4b60      	ldr	r3, [pc, #384]	; (8005610 <i2c_Config+0x19c>)
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	4a5f      	ldr	r2, [pc, #380]	; (8005610 <i2c_Config+0x19c>)
 8005494:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005498:	6413      	str	r3, [r2, #64]	; 0x40
 800549a:	e016      	b.n	80054ca <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C2)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a5c      	ldr	r2, [pc, #368]	; (8005614 <i2c_Config+0x1a0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d106      	bne.n	80054b4 <i2c_Config+0x40>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 80054a6:	4b5a      	ldr	r3, [pc, #360]	; (8005610 <i2c_Config+0x19c>)
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	4a59      	ldr	r2, [pc, #356]	; (8005610 <i2c_Config+0x19c>)
 80054ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054b0:	6413      	str	r3, [r2, #64]	; 0x40
 80054b2:	e00a      	b.n	80054ca <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C3)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a57      	ldr	r2, [pc, #348]	; (8005618 <i2c_Config+0x1a4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d105      	bne.n	80054ca <i2c_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 80054be:	4b54      	ldr	r3, [pc, #336]	; (8005610 <i2c_Config+0x19c>)
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	4a53      	ldr	r2, [pc, #332]	; (8005610 <i2c_Config+0x19c>)
 80054c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80054c8:	6413      	str	r3, [r2, #64]	; 0x40
	}

	//---------------------------------2) Reiniciamos el periferico------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_SWRST;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054d8:	601a      	str	r2, [r3, #0]
	__NOP();
 80054da:	bf00      	nop
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_SWRST;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054ea:	601a      	str	r2, [r3, #0]

	//-----------------------------------3) Valor del reloj principal------------------------------------------
	//Registro: CR2

	ptrHandlerI2C->prtI2Cx->CR2 &= ~(0b111111<<I2C_CR2_FREQ_Pos);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80054fa:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->prtI2Cx->CR2 |= (clockAPB1<<I2C_CR2_FREQ_Pos);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6859      	ldr	r1, [r3, #4]
 8005502:	7bfa      	ldrb	r2, [r7, #15]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	605a      	str	r2, [r3, #4]
	//-------------------------------------4) Configuracion del I2C------------------------------------------
	//Registro: CCR
	//Registro: TRISE

	//Variables que almacenan el respectivo valor a cargar en los registros CRR y Trise
	uint16_t valueCRR = 0;
 800550c:	2300      	movs	r3, #0
 800550e:	81bb      	strh	r3, [r7, #12]
	uint8_t valueTrise = 0;
 8005510:	2300      	movs	r3, #0
 8005512:	72fb      	strb	r3, [r7, #11]

	//definimos inicialmente los registro en 0
	ptrHandlerI2C->prtI2Cx->CCR = 0;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2200      	movs	r2, #0
 800551a:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->prtI2Cx->TRISE = 0;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2200      	movs	r2, #0
 8005522:	621a      	str	r2, [r3, #32]

	//Configuramos el I2C deacuerdo al modo selsecionado
	if(ptrHandlerI2C->modeI2C == I2C_MODE_SM)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	795b      	ldrb	r3, [r3, #5]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d121      	bne.n	8005570 <i2c_Config+0xfc>
	{
		//Seleccionamos el modo estandar
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	69da      	ldr	r2, [r3, #28]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800553a:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (5000*clockAPB1)/1000;
 800553c:	7bfb      	ldrb	r3, [r7, #15]
 800553e:	b29b      	uxth	r3, r3
 8005540:	461a      	mov	r2, r3
 8005542:	0092      	lsls	r2, r2, #2
 8005544:	4413      	add	r3, r2
 8005546:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	69d9      	ldr	r1, [r3, #28]
 800554e:	89ba      	ldrh	r2, [r7, #12]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((1000*clockAPB1)/1000)+1;
 8005558:	7bfb      	ldrb	r3, [r7, #15]
 800555a:	3301      	adds	r3, #1
 800555c:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6a19      	ldr	r1, [r3, #32]
 8005564:	7afa      	ldrb	r2, [r7, #11]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	621a      	str	r2, [r3, #32]
 800556e:	e039      	b.n	80055e4 <i2c_Config+0x170>
	}
	else
	{
		//Seleccionamos el modo Fast
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	69da      	ldr	r2, [r3, #28]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800557e:	61da      	str	r2, [r3, #28]
		ptrHandlerI2C->prtI2Cx->CCR |= I2C_CCR_FS;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	69da      	ldr	r2, [r3, #28]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800558e:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (2500*clockAPB1)/3000;
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005596:	fb02 f303 	mul.w	r3, r2, r3
 800559a:	4a20      	ldr	r2, [pc, #128]	; (800561c <i2c_Config+0x1a8>)
 800559c:	fb82 1203 	smull	r1, r2, r2, r3
 80055a0:	1192      	asrs	r2, r2, #6
 80055a2:	17db      	asrs	r3, r3, #31
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	69d9      	ldr	r1, [r3, #28]
 80055ae:	89ba      	ldrh	r2, [r7, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((300*clockAPB1)/1000)+1;
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
 80055ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80055be:	fb02 f303 	mul.w	r3, r2, r3
 80055c2:	4a17      	ldr	r2, [pc, #92]	; (8005620 <i2c_Config+0x1ac>)
 80055c4:	fb82 1203 	smull	r1, r2, r2, r3
 80055c8:	1192      	asrs	r2, r2, #6
 80055ca:	17db      	asrs	r3, r3, #31
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	3301      	adds	r3, #1
 80055d2:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6a19      	ldr	r1, [r3, #32]
 80055da:	7afa      	ldrb	r2, [r7, #11]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	621a      	str	r2, [r3, #32]
	}

	//-----------------------------------5) Activamos el modulo I2C------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_PE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0201 	bic.w	r2, r2, #1
 80055f2:	601a      	str	r2, [r3, #0]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_PE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0201 	orr.w	r2, r2, #1
 8005602:	601a      	str	r2, [r3, #0]
}
 8005604:	bf00      	nop
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40005400 	.word	0x40005400
 8005610:	40023800 	.word	0x40023800
 8005614:	40005800 	.word	0x40005800
 8005618:	40005c00 	.word	0x40005c00
 800561c:	057619f1 	.word	0x057619f1
 8005620:	10624dd3 	.word	0x10624dd3

08005624 <i2c_StartTrasaction>:

//----------------------------------------Funciones para la Transaccion----------------------------------------
//Funcion para empezar la Transaccion
void i2c_StartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	/*verificamos que la linea no esta ocupada
	 * bit "busy" en I2C
	 */
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 800562c:	e000      	b.n	8005630 <i2c_StartTrasaction+0xc>
	{
		__NOP();
 800562e:	bf00      	nop
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1f7      	bne.n	800562e <i2c_StartTrasaction+0xa>
	}
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800564c:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 800564e:	e000      	b.n	8005652 <i2c_StartTrasaction+0x2e>
	{
		__NOP();
 8005650:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0f7      	beq.n	8005650 <i2c_StartTrasaction+0x2c>
	}
}
 8005660:	bf00      	nop
 8005662:	bf00      	nop
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <i2c_ReStartTrasaction>:

//Generar de nuevo una señal para empazar la Transaccion
void i2c_ReStartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005684:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8005686:	e000      	b.n	800568a <i2c_ReStartTrasaction+0x1c>
	{
		__NOP();
 8005688:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0f7      	beq.n	8005688 <i2c_ReStartTrasaction+0x1a>
	}
}
 8005698:	bf00      	nop
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <i2c_SendSlaveAddressRW>:

//Funcion para enviar la direcion de Slave ademas de definir la lectura o escritura del Sclave
void i2c_SendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b085      	sub	sp, #20
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	460b      	mov	r3, r1
 80056b0:	70fb      	strb	r3, [r7, #3]
 80056b2:	4613      	mov	r3, r2
 80056b4:	70bb      	strb	r3, [r7, #2]
	//Definimos una variable auxiliar
	uint8_t auxByte = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	//Cargamos la direccion del Sclave, ademas cargamos el bit de lectura o escritura
	ptrHandlerI2C->prtI2Cx->DR = (slaveAddress<<1) | readOrWrite;
 80056ba:	78fb      	ldrb	r3, [r7, #3]
 80056bc:	005a      	lsls	r2, r3, #1
 80056be:	78bb      	ldrb	r3, [r7, #2]
 80056c0:	431a      	orrs	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "ADDR" del evento "Address" se levante
	//Se limpia la bandera "ADDR" leyendo SR1->leyendo en SR2
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 80056c8:	e000      	b.n	80056cc <i2c_SendSlaveAddressRW+0x26>
	{
		__NOP();
 80056ca:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d0f7      	beq.n	80056ca <i2c_SendSlaveAddressRW+0x24>
	}
	//Se limpia la bandera "ADDR"
	auxByte = ptrHandlerI2C->prtI2Cx->SR1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->prtI2Cx->SR2;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	73fb      	strb	r3, [r7, #15]
}
 80056ea:	bf00      	nop
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <i2c_SendMemoryAddress>:

//Enviamos la direccion de memoria que deseamos leer o escribir
void i2c_SendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	460b      	mov	r3, r1
 8005700:	70fb      	strb	r3, [r7, #3]
	//Enviamos la direccion de memoria que desamos leer
	ptrHandlerI2C->prtI2Cx->DR = memAddr;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	78fa      	ldrb	r2, [r7, #3]
 8005708:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "TXE" del evento "Data1" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 800570a:	e000      	b.n	800570e <i2c_SendMemoryAddress+0x18>
	{
		__NOP();
 800570c:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005718:	2b00      	cmp	r3, #0
 800571a:	d0f7      	beq.n	800570c <i2c_SendMemoryAddress+0x16>
	}
}
 800571c:	bf00      	nop
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <i2c_SendDataByte>:

//Escritura de datos
void i2c_SendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	460b      	mov	r3, r1
 8005734:	70fb      	strb	r3, [r7, #3]
	//Cargamos el valor que desasmos escribir
	ptrHandlerI2C->prtI2Cx->DR = dataToWrite;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	78fa      	ldrb	r2, [r7, #3]
 800573c:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "BTF" del evento "Transmision" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_BTF))
 800573e:	e000      	b.n	8005742 <i2c_SendDataByte+0x18>
	{
		__NOP();
 8005740:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_BTF))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0f7      	beq.n	8005740 <i2c_SendDataByte+0x16>
	}
}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <i2c_ReadDataByte>:

//Lectura de datos
uint8_t i2c_ReadDataByte(I2C_Handler_t *ptrHandlerI2C)
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
	//Esperamos a que la bandera "RxNE" del evento "Recepcion" se levante
	//Se limpia la bandera "RxNE" leyendo el registro DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 8005766:	e000      	b.n	800576a <i2c_ReadDataByte+0xc>
	{
		__NOP();
 8005768:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0f7      	beq.n	8005768 <i2c_ReadDataByte+0xa>
	}
	//guardamos los datos recibimos
	ptrHandlerI2C->dataI2C = ptrHandlerI2C->prtI2Cx->DR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	b2da      	uxtb	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C ;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	799b      	ldrb	r3, [r3, #6]
}
 8005788:	4618      	mov	r0, r3
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <i2c_SendNoAck>:

//Funcion para activar la indicaicon de NoACK(indicacion para el Sclave de terminar la transmision de datos)
void i2c_SendNoAck(I2C_Handler_t *ptrHandlerI2C)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
	//Esribimos cero en el bit Ack del registro CR1
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_ACK;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057aa:	601a      	str	r2, [r3, #0]

}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <i2c_StopTrasaction>:
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_ACK;
}

//Funcion para generar el Stop bit
void i2c_StopTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_STOP;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ce:	601a      	str	r2, [r3, #0]
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <i2c_ReadSingleRegister>:

//------------------------------------Funciones para la comunicacion por I2C----------------------------------------

uint8_t i2c_ReadSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	460b      	mov	r3, r1
 80057e6:	70fb      	strb	r3, [r7, #3]
	//0. Creacion de una variable auxiliara para recibir el dato leido
	uint8_t auxRead = 0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	73fb      	strb	r3, [r7, #15]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7ff ff19 	bl	8005624 <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	791b      	ldrb	r3, [r3, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	4619      	mov	r1, r3
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff ff53 	bl	80056a6 <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos leer
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff ff76 	bl	80056f6 <i2c_SendMemoryAddress>
	//4. Creamos una condicion de re start
	i2c_ReStartTrasaction(ptrHandlerI2C);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff ff2f 	bl	800566e <i2c_ReStartTrasaction>
	//5. Enviamos la direccion del Sclavo e indicamos que se desea leer el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_READ_DATA);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	791b      	ldrb	r3, [r3, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	4619      	mov	r1, r3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff ff44 	bl	80056a6 <i2c_SendSlaveAddressRW>
	//6. Leemos el dato que envia el Sclavo
	auxRead = i2c_ReadDataByte(ptrHandlerI2C);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7ff ff9d 	bl	800575e <i2c_ReadDataByte>
 8005824:	4603      	mov	r3, r0
 8005826:	73fb      	strb	r3, [r7, #15]
	//7. Generamso la condicio de NoAck
	i2c_SendNoAck(ptrHandlerI2C);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff ffb3 	bl	8005794 <i2c_SendNoAck>
	//8. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff ffc2 	bl	80057b8 <i2c_StopTrasaction>

	return auxRead;
 8005834:	7bfb      	ldrb	r3, [r7, #15]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <i2c_WriteSingleRegister>:

void i2c_WriteSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead, uint8_t newValue)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b082      	sub	sp, #8
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	460b      	mov	r3, r1
 8005848:	70fb      	strb	r3, [r7, #3]
 800584a:	4613      	mov	r3, r2
 800584c:	70bb      	strb	r3, [r7, #2]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7ff fee8 	bl	8005624 <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	791b      	ldrb	r3, [r3, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	4619      	mov	r1, r3
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7ff ff22 	bl	80056a6 <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos escribir
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 8005862:	78fb      	ldrb	r3, [r7, #3]
 8005864:	4619      	mov	r1, r3
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7ff ff45 	bl	80056f6 <i2c_SendMemoryAddress>
	//4. Enviamos el dato que se desea escribir en el Sclave
	i2c_SendDataByte(ptrHandlerI2C, newValue);
 800586c:	78bb      	ldrb	r3, [r7, #2]
 800586e:	4619      	mov	r1, r3
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7ff ff5a 	bl	800572a <i2c_SendDataByte>
	//5. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7ff ff9e 	bl	80057b8 <i2c_StopTrasaction>
}
 800587c:	bf00      	nop
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	4603      	mov	r3, r0
 800588c:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 800588e:	4a39      	ldr	r2, [pc, #228]	; (8005974 <configPLL+0xf0>)
 8005890:	79fb      	ldrb	r3, [r7, #7]
 8005892:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 8005894:	79fb      	ldrb	r3, [r7, #7]
 8005896:	2b31      	cmp	r3, #49	; 0x31
 8005898:	d804      	bhi.n	80058a4 <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 800589a:	4b37      	ldr	r3, [pc, #220]	; (8005978 <configPLL+0xf4>)
 800589c:	4a36      	ldr	r2, [pc, #216]	; (8005978 <configPLL+0xf4>)
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	6093      	str	r3, [r2, #8]
 80058a2:	e005      	b.n	80058b0 <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80058a4:	4b34      	ldr	r3, [pc, #208]	; (8005978 <configPLL+0xf4>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	4a33      	ldr	r2, [pc, #204]	; (8005978 <configPLL+0xf4>)
 80058aa:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80058ae:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 80058b0:	4b31      	ldr	r3, [pc, #196]	; (8005978 <configPLL+0xf4>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	4a30      	ldr	r2, [pc, #192]	; (8005978 <configPLL+0xf4>)
 80058b6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80058ba:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 80058bc:	4b2e      	ldr	r3, [pc, #184]	; (8005978 <configPLL+0xf4>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	4a2d      	ldr	r2, [pc, #180]	; (8005978 <configPLL+0xf4>)
 80058c2:	f043 0312 	orr.w	r3, r3, #18
 80058c6:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 80058c8:	4b2b      	ldr	r3, [pc, #172]	; (8005978 <configPLL+0xf4>)
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	79fa      	ldrb	r2, [r7, #7]
 80058ce:	0092      	lsls	r2, r2, #2
 80058d0:	3a0e      	subs	r2, #14
 80058d2:	0192      	lsls	r2, r2, #6
 80058d4:	4611      	mov	r1, r2
 80058d6:	4a28      	ldr	r2, [pc, #160]	; (8005978 <configPLL+0xf4>)
 80058d8:	430b      	orrs	r3, r1
 80058da:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 80058dc:	4b26      	ldr	r3, [pc, #152]	; (8005978 <configPLL+0xf4>)
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	4a25      	ldr	r2, [pc, #148]	; (8005978 <configPLL+0xf4>)
 80058e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e6:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 80058e8:	4b23      	ldr	r3, [pc, #140]	; (8005978 <configPLL+0xf4>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a22      	ldr	r2, [pc, #136]	; (8005978 <configPLL+0xf4>)
 80058ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058f2:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 80058f4:	e000      	b.n	80058f8 <configPLL+0x74>
	{
		__NOP();
 80058f6:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 80058f8:	4b1f      	ldr	r3, [pc, #124]	; (8005978 <configPLL+0xf4>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0f8      	beq.n	80058f6 <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 8005904:	79fb      	ldrb	r3, [r7, #7]
 8005906:	2b5a      	cmp	r3, #90	; 0x5a
 8005908:	d909      	bls.n	800591e <configPLL+0x9a>
 800590a:	79fb      	ldrb	r3, [r7, #7]
 800590c:	2b64      	cmp	r3, #100	; 0x64
 800590e:	d806      	bhi.n	800591e <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8005910:	4b1a      	ldr	r3, [pc, #104]	; (800597c <configPLL+0xf8>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a19      	ldr	r2, [pc, #100]	; (800597c <configPLL+0xf8>)
 8005916:	f043 0303 	orr.w	r3, r3, #3
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	e01d      	b.n	800595a <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	2b40      	cmp	r3, #64	; 0x40
 8005922:	d909      	bls.n	8005938 <configPLL+0xb4>
 8005924:	79fb      	ldrb	r3, [r7, #7]
 8005926:	2b5a      	cmp	r3, #90	; 0x5a
 8005928:	d806      	bhi.n	8005938 <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 800592a:	4b14      	ldr	r3, [pc, #80]	; (800597c <configPLL+0xf8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a13      	ldr	r2, [pc, #76]	; (800597c <configPLL+0xf8>)
 8005930:	f043 0302 	orr.w	r3, r3, #2
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	e010      	b.n	800595a <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 8005938:	79fb      	ldrb	r3, [r7, #7]
 800593a:	2b1e      	cmp	r3, #30
 800593c:	d909      	bls.n	8005952 <configPLL+0xce>
 800593e:	79fb      	ldrb	r3, [r7, #7]
 8005940:	2b40      	cmp	r3, #64	; 0x40
 8005942:	d806      	bhi.n	8005952 <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 8005944:	4b0d      	ldr	r3, [pc, #52]	; (800597c <configPLL+0xf8>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a0c      	ldr	r2, [pc, #48]	; (800597c <configPLL+0xf8>)
 800594a:	f043 0301 	orr.w	r3, r3, #1
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	e003      	b.n	800595a <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 8005952:	4b0a      	ldr	r3, [pc, #40]	; (800597c <configPLL+0xf8>)
 8005954:	4a09      	ldr	r2, [pc, #36]	; (800597c <configPLL+0xf8>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 800595a:	4b07      	ldr	r3, [pc, #28]	; (8005978 <configPLL+0xf4>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	4a06      	ldr	r2, [pc, #24]	; (8005978 <configPLL+0xf4>)
 8005960:	f043 0302 	orr.w	r3, r3, #2
 8005964:	6093      	str	r3, [r2, #8]

}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	2000091c 	.word	0x2000091c
 8005978:	40023800 	.word	0x40023800
 800597c:	40023c00 	.word	0x40023c00

08005980 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 8005986:	2300      	movs	r3, #0
 8005988:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 800598a:	4b09      	ldr	r3, [pc, #36]	; (80059b0 <getConfigPLL+0x30>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 0303 	and.w	r3, r3, #3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d103      	bne.n	800599e <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 8005996:	4b07      	ldr	r3, [pc, #28]	; (80059b4 <getConfigPLL+0x34>)
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	71fb      	strb	r3, [r7, #7]
 800599c:	e001      	b.n	80059a2 <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 800599e:	2310      	movs	r3, #16
 80059a0:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 80059a2:	79fb      	ldrb	r3, [r7, #7]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	40023800 	.word	0x40023800
 80059b4:	2000091c 	.word	0x2000091c

080059b8 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 80059be:	f7ff ffdf 	bl	8005980 <getConfigPLL>
 80059c2:	4603      	mov	r3, r0
 80059c4:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 80059c6:	2300      	movs	r3, #0
 80059c8:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 80059ca:	79bb      	ldrb	r3, [r7, #6]
 80059cc:	2b31      	cmp	r3, #49	; 0x31
 80059ce:	d802      	bhi.n	80059d6 <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 80059d0:	79bb      	ldrb	r3, [r7, #6]
 80059d2:	71fb      	strb	r3, [r7, #7]
 80059d4:	e002      	b.n	80059dc <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 80059d6:	79bb      	ldrb	r3, [r7, #6]
 80059d8:	089b      	lsrs	r3, r3, #2
 80059da:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 80059dc:	79fb      	ldrb	r3, [r7, #7]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <configMCO2>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2(uint8_t value)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	4603      	mov	r3, r0
 80059f0:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0b11<<RCC_CFGR_MCO2_Pos);
 80059f2:	4b0a      	ldr	r3, [pc, #40]	; (8005a1c <configMCO2+0x34>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	4a09      	ldr	r2, [pc, #36]	; (8005a1c <configMCO2+0x34>)
 80059f8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80059fc:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (value<<RCC_CFGR_MCO2_Pos);
 80059fe:	4b07      	ldr	r3, [pc, #28]	; (8005a1c <configMCO2+0x34>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	79fa      	ldrb	r2, [r7, #7]
 8005a04:	0792      	lsls	r2, r2, #30
 8005a06:	4611      	mov	r1, r2
 8005a08:	4a04      	ldr	r2, [pc, #16]	; (8005a1c <configMCO2+0x34>)
 8005a0a:	430b      	orrs	r3, r1
 8005a0c:	6093      	str	r3, [r2, #8]
}
 8005a0e:	bf00      	nop
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40023800 	.word	0x40023800

08005a20 <configMCO2PRE>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2PRE(uint8_t value)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	4603      	mov	r3, r0
 8005a28:	71fb      	strb	r3, [r7, #7]
	//Selecionamos el prescaler de acuerdo al valor definido
	switch (value){
 8005a2a:	79fb      	ldrb	r3, [r7, #7]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d84b      	bhi.n	8005aca <configMCO2PRE+0xaa>
 8005a32:	a201      	add	r2, pc, #4	; (adr r2, 8005a38 <configMCO2PRE+0x18>)
 8005a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a38:	08005a4d 	.word	0x08005a4d
 8005a3c:	08005a63 	.word	0x08005a63
 8005a40:	08005a7d 	.word	0x08005a7d
 8005a44:	08005a97 	.word	0x08005a97
 8005a48:	08005ab1 	.word	0x08005ab1
		case 1:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8005a4c:	4b23      	ldr	r3, [pc, #140]	; (8005adc <configMCO2PRE+0xbc>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	4a22      	ldr	r2, [pc, #136]	; (8005adc <configMCO2PRE+0xbc>)
 8005a52:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8005a56:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b000<<RCC_CFGR_MCO2PRE_Pos);
 8005a58:	4b20      	ldr	r3, [pc, #128]	; (8005adc <configMCO2PRE+0xbc>)
 8005a5a:	4a20      	ldr	r2, [pc, #128]	; (8005adc <configMCO2PRE+0xbc>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	6093      	str	r3, [r2, #8]
			break;
 8005a60:	e035      	b.n	8005ace <configMCO2PRE+0xae>
		}
		case 2:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8005a62:	4b1e      	ldr	r3, [pc, #120]	; (8005adc <configMCO2PRE+0xbc>)
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	4a1d      	ldr	r2, [pc, #116]	; (8005adc <configMCO2PRE+0xbc>)
 8005a68:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8005a6c:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100<<RCC_CFGR_MCO2PRE_Pos);
 8005a6e:	4b1b      	ldr	r3, [pc, #108]	; (8005adc <configMCO2PRE+0xbc>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	4a1a      	ldr	r2, [pc, #104]	; (8005adc <configMCO2PRE+0xbc>)
 8005a74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a78:	6093      	str	r3, [r2, #8]
			break;
 8005a7a:	e028      	b.n	8005ace <configMCO2PRE+0xae>
		}
		case 3:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8005a7c:	4b17      	ldr	r3, [pc, #92]	; (8005adc <configMCO2PRE+0xbc>)
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	4a16      	ldr	r2, [pc, #88]	; (8005adc <configMCO2PRE+0xbc>)
 8005a82:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8005a86:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b101<<RCC_CFGR_MCO2PRE_Pos);
 8005a88:	4b14      	ldr	r3, [pc, #80]	; (8005adc <configMCO2PRE+0xbc>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	4a13      	ldr	r2, [pc, #76]	; (8005adc <configMCO2PRE+0xbc>)
 8005a8e:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
 8005a92:	6093      	str	r3, [r2, #8]
			break;
 8005a94:	e01b      	b.n	8005ace <configMCO2PRE+0xae>
		}
		case 4:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8005a96:	4b11      	ldr	r3, [pc, #68]	; (8005adc <configMCO2PRE+0xbc>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	4a10      	ldr	r2, [pc, #64]	; (8005adc <configMCO2PRE+0xbc>)
 8005a9c:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8005aa0:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b110<<RCC_CFGR_MCO2PRE_Pos);
 8005aa2:	4b0e      	ldr	r3, [pc, #56]	; (8005adc <configMCO2PRE+0xbc>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	4a0d      	ldr	r2, [pc, #52]	; (8005adc <configMCO2PRE+0xbc>)
 8005aa8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8005aac:	6093      	str	r3, [r2, #8]
			break;
 8005aae:	e00e      	b.n	8005ace <configMCO2PRE+0xae>
		}
		case 5:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8005ab0:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <configMCO2PRE+0xbc>)
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	4a09      	ldr	r2, [pc, #36]	; (8005adc <configMCO2PRE+0xbc>)
 8005ab6:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8005aba:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b111<<RCC_CFGR_MCO2PRE_Pos);
 8005abc:	4b07      	ldr	r3, [pc, #28]	; (8005adc <configMCO2PRE+0xbc>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	4a06      	ldr	r2, [pc, #24]	; (8005adc <configMCO2PRE+0xbc>)
 8005ac2:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8005ac6:	6093      	str	r3, [r2, #8]
			break;
 8005ac8:	e001      	b.n	8005ace <configMCO2PRE+0xae>
		}
		default:
		{
			__NOP();
 8005aca:	bf00      	nop
			break;
 8005acc:	bf00      	nop
		}
	}

}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40023800 	.word	0x40023800

08005ae0 <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af0:	d106      	bne.n	8005b00 <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8005af2:	4b81      	ldr	r3, [pc, #516]	; (8005cf8 <pwm_Config+0x218>)
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	4a80      	ldr	r2, [pc, #512]	; (8005cf8 <pwm_Config+0x218>)
 8005af8:	f043 0301 	orr.w	r3, r3, #1
 8005afc:	6413      	str	r3, [r2, #64]	; 0x40
 8005afe:	e024      	b.n	8005b4a <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	4a7d      	ldr	r2, [pc, #500]	; (8005cfc <pwm_Config+0x21c>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d106      	bne.n	8005b18 <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8005b0a:	4b7b      	ldr	r3, [pc, #492]	; (8005cf8 <pwm_Config+0x218>)
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	4a7a      	ldr	r2, [pc, #488]	; (8005cf8 <pwm_Config+0x218>)
 8005b10:	f043 0302 	orr.w	r3, r3, #2
 8005b14:	6413      	str	r3, [r2, #64]	; 0x40
 8005b16:	e018      	b.n	8005b4a <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	4a78      	ldr	r2, [pc, #480]	; (8005d00 <pwm_Config+0x220>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d106      	bne.n	8005b30 <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8005b22:	4b75      	ldr	r3, [pc, #468]	; (8005cf8 <pwm_Config+0x218>)
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	4a74      	ldr	r2, [pc, #464]	; (8005cf8 <pwm_Config+0x218>)
 8005b28:	f043 0304 	orr.w	r3, r3, #4
 8005b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b2e:	e00c      	b.n	8005b4a <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	4a73      	ldr	r2, [pc, #460]	; (8005d04 <pwm_Config+0x224>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d106      	bne.n	8005b48 <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8005b3a:	4b6f      	ldr	r3, [pc, #444]	; (8005cf8 <pwm_Config+0x218>)
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	4a6e      	ldr	r2, [pc, #440]	; (8005cf8 <pwm_Config+0x218>)
 8005b40:	f043 0308 	orr.w	r3, r3, #8
 8005b44:	6413      	str	r3, [r2, #64]	; 0x40
 8005b46:	e000      	b.n	8005b4a <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 8005b48:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fa4c 	bl	8005fe8 <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b03      	cmp	r3, #3
 8005b56:	f200 8118 	bhi.w	8005d8a <pwm_Config+0x2aa>
 8005b5a:	a201      	add	r2, pc, #4	; (adr r2, 8005b60 <pwm_Config+0x80>)
 8005b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b60:	08005b71 	.word	0x08005b71
 8005b64:	08005bf3 	.word	0x08005bf3
 8005b68:	08005c75 	.word	0x08005c75
 8005b6c:	08005d09 	.word	0x08005d09
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	699a      	ldr	r2, [r3, #24]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f022 0203 	bic.w	r2, r2, #3
 8005b7e:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	699a      	ldr	r2, [r3, #24]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005b8e:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	699a      	ldr	r2, [r3, #24]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005b9e:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	699a      	ldr	r2, [r3, #24]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f022 0208 	bic.w	r2, r2, #8
 8005bae:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	699a      	ldr	r2, [r3, #24]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f042 0208 	orr.w	r2, r2, #8
 8005bbe:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	699a      	ldr	r2, [r3, #24]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f022 0204 	bic.w	r2, r2, #4
 8005bce:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	699a      	ldr	r2, [r3, #24]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f042 0204 	orr.w	r2, r2, #4
 8005bde:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	699a      	ldr	r2, [r3, #24]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bee:	619a      	str	r2, [r3, #24]

		break;
 8005bf0:	e0cc      	b.n	8005d8c <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	699a      	ldr	r2, [r3, #24]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f022 0203 	bic.w	r2, r2, #3
 8005c00:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	699a      	ldr	r2, [r3, #24]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005c10:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	699a      	ldr	r2, [r3, #24]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8005c20:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	699a      	ldr	r2, [r3, #24]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c30:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	699a      	ldr	r2, [r3, #24]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c40:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	699a      	ldr	r2, [r3, #24]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c50:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	699a      	ldr	r2, [r3, #24]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c60:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	699a      	ldr	r2, [r3, #24]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c70:	619a      	str	r2, [r3, #24]

		break;
 8005c72:	e08b      	b.n	8005d8c <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	69da      	ldr	r2, [r3, #28]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f022 0203 	bic.w	r2, r2, #3
 8005c82:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	69da      	ldr	r2, [r3, #28]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005c92:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	69da      	ldr	r2, [r3, #28]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005ca2:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	69da      	ldr	r2, [r3, #28]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f022 0208 	bic.w	r2, r2, #8
 8005cb2:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	69da      	ldr	r2, [r3, #28]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f042 0208 	orr.w	r2, r2, #8
 8005cc2:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	69da      	ldr	r2, [r3, #28]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f022 0204 	bic.w	r2, r2, #4
 8005cd2:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	69da      	ldr	r2, [r3, #28]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f042 0204 	orr.w	r2, r2, #4
 8005ce2:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	69da      	ldr	r2, [r3, #28]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cf2:	61da      	str	r2, [r3, #28]

		break;
 8005cf4:	e04a      	b.n	8005d8c <pwm_Config+0x2ac>
 8005cf6:	bf00      	nop
 8005cf8:	40023800 	.word	0x40023800
 8005cfc:	40000400 	.word	0x40000400
 8005d00:	40000800 	.word	0x40000800
 8005d04:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	69da      	ldr	r2, [r3, #28]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005d16:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	69da      	ldr	r2, [r3, #28]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005d26:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	69da      	ldr	r2, [r3, #28]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8005d36:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	69da      	ldr	r2, [r3, #28]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d46:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	69da      	ldr	r2, [r3, #28]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d56:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	69da      	ldr	r2, [r3, #28]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d66:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	69da      	ldr	r2, [r3, #28]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d76:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	69da      	ldr	r2, [r3, #28]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d86:	61da      	str	r2, [r3, #28]

		break;
 8005d88:	e000      	b.n	8005d8c <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 8005d8a:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	791b      	ldrb	r3, [r3, #4]
 8005d90:	4619      	mov	r1, r3
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f896 	bl	8005ec4 <statusPolarityPWM>

}
 8005d98:	bf00      	nop
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	2b03      	cmp	r3, #3
 8005db2:	d87f      	bhi.n	8005eb4 <statusInOutPWM+0x114>
 8005db4:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <statusInOutPWM+0x1c>)
 8005db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dba:	bf00      	nop
 8005dbc:	08005dcd 	.word	0x08005dcd
 8005dc0:	08005e07 	.word	0x08005e07
 8005dc4:	08005e41 	.word	0x08005e41
 8005dc8:	08005e7b 	.word	0x08005e7b
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 8005dcc:	78fb      	ldrb	r3, [r7, #3]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d110      	bne.n	8005df4 <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	6a1a      	ldr	r2, [r3, #32]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f022 0201 	bic.w	r2, r2, #1
 8005de0:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	6a1a      	ldr	r2, [r3, #32]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f042 0201 	orr.w	r2, r2, #1
 8005df0:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 8005df2:	e060      	b.n	8005eb6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	6a1a      	ldr	r2, [r3, #32]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f022 0201 	bic.w	r2, r2, #1
 8005e02:	621a      	str	r2, [r3, #32]
		break;
 8005e04:	e057      	b.n	8005eb6 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 8005e06:	78fb      	ldrb	r3, [r7, #3]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d110      	bne.n	8005e2e <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	6a1a      	ldr	r2, [r3, #32]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f022 0210 	bic.w	r2, r2, #16
 8005e1a:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	6a1a      	ldr	r2, [r3, #32]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f042 0210 	orr.w	r2, r2, #16
 8005e2a:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 8005e2c:	e043      	b.n	8005eb6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	6a1a      	ldr	r2, [r3, #32]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f022 0210 	bic.w	r2, r2, #16
 8005e3c:	621a      	str	r2, [r3, #32]
		break;
 8005e3e:	e03a      	b.n	8005eb6 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d110      	bne.n	8005e68 <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	6a1a      	ldr	r2, [r3, #32]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e54:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	6a1a      	ldr	r2, [r3, #32]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e64:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 8005e66:	e026      	b.n	8005eb6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	6a1a      	ldr	r2, [r3, #32]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e76:	621a      	str	r2, [r3, #32]
		break;
 8005e78:	e01d      	b.n	8005eb6 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 8005e7a:	78fb      	ldrb	r3, [r7, #3]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d110      	bne.n	8005ea2 <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	6a1a      	ldr	r2, [r3, #32]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e8e:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	6a1a      	ldr	r2, [r3, #32]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e9e:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 8005ea0:	e009      	b.n	8005eb6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	6a1a      	ldr	r2, [r3, #32]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005eb0:	621a      	str	r2, [r3, #32]
		break;
 8005eb2:	e000      	b.n	8005eb6 <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 8005eb4:	bf00      	nop
	}
	}
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop

08005ec4 <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b03      	cmp	r3, #3
 8005ed6:	d87f      	bhi.n	8005fd8 <statusPolarityPWM+0x114>
 8005ed8:	a201      	add	r2, pc, #4	; (adr r2, 8005ee0 <statusPolarityPWM+0x1c>)
 8005eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ede:	bf00      	nop
 8005ee0:	08005ef1 	.word	0x08005ef1
 8005ee4:	08005f2b 	.word	0x08005f2b
 8005ee8:	08005f65 	.word	0x08005f65
 8005eec:	08005f9f 	.word	0x08005f9f
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 8005ef0:	78fb      	ldrb	r3, [r7, #3]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d110      	bne.n	8005f18 <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	6a1a      	ldr	r2, [r3, #32]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f022 0202 	bic.w	r2, r2, #2
 8005f04:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	6a1a      	ldr	r2, [r3, #32]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f042 0202 	orr.w	r2, r2, #2
 8005f14:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 8005f16:	e060      	b.n	8005fda <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	6a1a      	ldr	r2, [r3, #32]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f022 0202 	bic.w	r2, r2, #2
 8005f26:	621a      	str	r2, [r3, #32]
		break;
 8005f28:	e057      	b.n	8005fda <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 8005f2a:	78fb      	ldrb	r3, [r7, #3]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d110      	bne.n	8005f52 <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	6a1a      	ldr	r2, [r3, #32]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f022 0220 	bic.w	r2, r2, #32
 8005f3e:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	6a1a      	ldr	r2, [r3, #32]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f042 0220 	orr.w	r2, r2, #32
 8005f4e:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 8005f50:	e043      	b.n	8005fda <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	6a1a      	ldr	r2, [r3, #32]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f022 0220 	bic.w	r2, r2, #32
 8005f60:	621a      	str	r2, [r3, #32]
		break;
 8005f62:	e03a      	b.n	8005fda <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 8005f64:	78fb      	ldrb	r3, [r7, #3]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d110      	bne.n	8005f8c <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	6a1a      	ldr	r2, [r3, #32]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005f78:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	6a1a      	ldr	r2, [r3, #32]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f88:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 8005f8a:	e026      	b.n	8005fda <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	6a1a      	ldr	r2, [r3, #32]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005f9a:	621a      	str	r2, [r3, #32]
		break;
 8005f9c:	e01d      	b.n	8005fda <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 8005f9e:	78fb      	ldrb	r3, [r7, #3]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d110      	bne.n	8005fc6 <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	6a1a      	ldr	r2, [r3, #32]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fb2:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	6a1a      	ldr	r2, [r3, #32]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fc2:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 8005fc4:	e009      	b.n	8005fda <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	6a1a      	ldr	r2, [r3, #32]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fd4:	621a      	str	r2, [r3, #32]
		break;
 8005fd6:	e000      	b.n	8005fda <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 8005fd8:	bf00      	nop
	}
	}

}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop

08005fe8 <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b03      	cmp	r3, #3
 8005ff6:	d823      	bhi.n	8006040 <setDuttyCycle+0x58>
 8005ff8:	a201      	add	r2, pc, #4	; (adr r2, 8006000 <setDuttyCycle+0x18>)
 8005ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffe:	bf00      	nop
 8006000:	08006011 	.word	0x08006011
 8006004:	0800601d 	.word	0x0800601d
 8006008:	08006029 	.word	0x08006029
 800600c:	08006035 	.word	0x08006035
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	885a      	ldrh	r2, [r3, #2]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800601a:	e012      	b.n	8006042 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	885a      	ldrh	r2, [r3, #2]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8006026:	e00c      	b.n	8006042 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	885a      	ldrh	r2, [r3, #2]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8006032:	e006      	b.n	8006042 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	885a      	ldrh	r2, [r3, #2]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800603e:	e000      	b.n	8006042 <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 8006040:	bf00      	nop
	}
	}

}
 8006042:	bf00      	nop
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop

08006050 <updateDuttyCyclePercentageFloat>:
	setDuttyCycle(prtPwmHandler);
}

//Actualizacion del Dutty con porcentaje decimal
void updateDuttyCyclePercentageFloat(PWM_Handler_t *prtPwmHandler, float newDuttyPercentage)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	ed87 0a00 	vstr	s0, [r7]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = (uint16_t) ((prtPwmHandler->ptrTIMx->ARR)/100)*(newDuttyPercentage);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006062:	4a0d      	ldr	r2, [pc, #52]	; (8006098 <updateDuttyCyclePercentageFloat+0x48>)
 8006064:	fba2 2303 	umull	r2, r3, r2, r3
 8006068:	095b      	lsrs	r3, r3, #5
 800606a:	b29b      	uxth	r3, r3
 800606c:	ee07 3a90 	vmov	s15, r3
 8006070:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006074:	edd7 7a00 	vldr	s15, [r7]
 8006078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800607c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006080:	ee17 3a90 	vmov	r3, s15
 8006084:	b29a      	uxth	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7ff ffac 	bl	8005fe8 <setDuttyCycle>
}
 8006090:	bf00      	nop
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	51eb851f 	.word	0x51eb851f

0800609c <__NVIC_EnableIRQ>:
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	4603      	mov	r3, r0
 80060a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	db0b      	blt.n	80060c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060ae:	79fb      	ldrb	r3, [r7, #7]
 80060b0:	f003 021f 	and.w	r2, r3, #31
 80060b4:	4907      	ldr	r1, [pc, #28]	; (80060d4 <__NVIC_EnableIRQ+0x38>)
 80060b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ba:	095b      	lsrs	r3, r3, #5
 80060bc:	2001      	movs	r0, #1
 80060be:	fa00 f202 	lsl.w	r2, r0, r2
 80060c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80060c6:	bf00      	nop
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	e000e100 	.word	0xe000e100

080060d8 <config_SysTick_ms>:
uint64_t ticks_start = 0;
uint64_t ticks_counting = 0;

//Funcion para la configurar del Systick
void config_SysTick_ms(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
	//Reiniciamos el valor de la variable que cuenta el tiempo
	ticks = 0;
 80060de:	4919      	ldr	r1, [pc, #100]	; (8006144 <config_SysTick_ms+0x6c>)
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	f04f 0300 	mov.w	r3, #0
 80060e8:	e9c1 2300 	strd	r2, r3, [r1]

	/*Cargamos el valor del limite de incrementos que representa 1ms
	 * Depende de la señal de reloj interno del MCU
	 */

	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 80060ec:	f7ff fc48 	bl	8005980 <getConfigPLL>
 80060f0:	4603      	mov	r3, r0
 80060f2:	71fb      	strb	r3, [r7, #7]
	SysTick->LOAD = clock*1000;              //Cargamos el valor correspondiente a 1 ms
 80060f4:	79fb      	ldrb	r3, [r7, #7]
 80060f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80060fa:	fb03 f202 	mul.w	r2, r3, r2
 80060fe:	4b12      	ldr	r3, [pc, #72]	; (8006148 <config_SysTick_ms+0x70>)
 8006100:	605a      	str	r2, [r3, #4]
//		break;
//	}
//	}

	//Limpiamos el valor actual del Systick
	SysTick->VAL = 0;
 8006102:	4b11      	ldr	r3, [pc, #68]	; (8006148 <config_SysTick_ms+0x70>)
 8006104:	2200      	movs	r2, #0
 8006106:	609a      	str	r2, [r3, #8]

	//Configuramos el relog interno como el reloj para el timer
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8006108:	4b0f      	ldr	r3, [pc, #60]	; (8006148 <config_SysTick_ms+0x70>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a0e      	ldr	r2, [pc, #56]	; (8006148 <config_SysTick_ms+0x70>)
 800610e:	f043 0304 	orr.w	r3, r3, #4
 8006112:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006114:	b672      	cpsid	i
}
 8006116:	bf00      	nop
	//Desactivamos las interrupciones globales

	__disable_irq();

	//Matriculamos la interrupcion en el NVIC
	NVIC_EnableIRQ(SysTick_IRQn);
 8006118:	f04f 30ff 	mov.w	r0, #4294967295
 800611c:	f7ff ffbe 	bl	800609c <__NVIC_EnableIRQ>
	//Activamos la interrupcion debido al conteo a cero del SysTick
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8006120:	4b09      	ldr	r3, [pc, #36]	; (8006148 <config_SysTick_ms+0x70>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a08      	ldr	r2, [pc, #32]	; (8006148 <config_SysTick_ms+0x70>)
 8006126:	f043 0302 	orr.w	r3, r3, #2
 800612a:	6013      	str	r3, [r2, #0]
	//Actimos el timer
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 800612c:	4b06      	ldr	r3, [pc, #24]	; (8006148 <config_SysTick_ms+0x70>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a05      	ldr	r2, [pc, #20]	; (8006148 <config_SysTick_ms+0x70>)
 8006132:	f043 0301 	orr.w	r3, r3, #1
 8006136:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006138:	b662      	cpsie	i
}
 800613a:	bf00      	nop
	//Activamos las interrupciones globales
	__enable_irq();

}
 800613c:	bf00      	nop
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	20000920 	.word	0x20000920
 8006148:	e000e010 	.word	0xe000e010

0800614c <getTicksMs>:

//Funcion que retorna el tiempo en ms transcurrido desde que que inicio el SysTick
uint64_t getTicksMs(void)
{
 800614c:	b480      	push	{r7}
 800614e:	af00      	add	r7, sp, #0
	return ticks;
 8006150:	4b04      	ldr	r3, [pc, #16]	; (8006164 <getTicksMs+0x18>)
 8006152:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8006156:	4610      	mov	r0, r2
 8006158:	4619      	mov	r1, r3
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	20000920 	.word	0x20000920

08006168 <delay_ms>:

//Funcion que genera un delay de ms
void delay_ms(uint32_t wait_time_ms)
{
 8006168:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800616c:	b082      	sub	sp, #8
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
	//Guardamos el valor de ticks transcurridos hasta el momento
	ticks_start = getTicksMs();
 8006172:	f7ff ffeb 	bl	800614c <getTicksMs>
 8006176:	4602      	mov	r2, r0
 8006178:	460b      	mov	r3, r1
 800617a:	4914      	ldr	r1, [pc, #80]	; (80061cc <delay_ms+0x64>)
 800617c:	e9c1 2300 	strd	r2, r3, [r1]
	//Guardamos tambien el valor de ticks transcurridos hasta el momento en una nueva variable
	ticks_counting = getTicksMs();
 8006180:	f7ff ffe4 	bl	800614c <getTicksMs>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	4911      	ldr	r1, [pc, #68]	; (80061d0 <delay_ms+0x68>)
 800618a:	e9c1 2300 	strd	r2, r3, [r1]

	//Realizamos un while que espera que se cumpla el tiempo asignado
	while(ticks_counting<(ticks_start+(uint64_t)wait_time_ms))
 800618e:	e006      	b.n	800619e <delay_ms+0x36>
	{
		//Actualizamos el valor
		ticks_counting = getTicksMs();
 8006190:	f7ff ffdc 	bl	800614c <getTicksMs>
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
 8006198:	490d      	ldr	r1, [pc, #52]	; (80061d0 <delay_ms+0x68>)
 800619a:	e9c1 2300 	strd	r2, r3, [r1]
	while(ticks_counting<(ticks_start+(uint64_t)wait_time_ms))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	4698      	mov	r8, r3
 80061a4:	4691      	mov	r9, r2
 80061a6:	4b09      	ldr	r3, [pc, #36]	; (80061cc <delay_ms+0x64>)
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	eb18 0402 	adds.w	r4, r8, r2
 80061b0:	eb49 0503 	adc.w	r5, r9, r3
 80061b4:	4b06      	ldr	r3, [pc, #24]	; (80061d0 <delay_ms+0x68>)
 80061b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ba:	42a2      	cmp	r2, r4
 80061bc:	41ab      	sbcs	r3, r5
 80061be:	d3e7      	bcc.n	8006190 <delay_ms+0x28>
	}
}
 80061c0:	bf00      	nop
 80061c2:	bf00      	nop
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80061cc:	20000928 	.word	0x20000928
 80061d0:	20000930 	.word	0x20000930

080061d4 <SysTick_Handler>:

/* Cuando se produce una interrupcion en el NVIC debido SysTick, apuntara a esta
 * funcion en el vector de interrupciones
 */
void SysTick_Handler(void)
{
 80061d4:	b480      	push	{r7}
 80061d6:	af00      	add	r7, sp, #0
	//Verificamos que la interrupcion se lance
	if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
 80061d8:	4b0c      	ldr	r3, [pc, #48]	; (800620c <SysTick_Handler+0x38>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00e      	beq.n	8006202 <SysTick_Handler+0x2e>
	{
		//Limpiamos la bandera
		SysTick->CTRL &= ~ SysTick_CTRL_COUNTFLAG_Msk;
 80061e4:	4b09      	ldr	r3, [pc, #36]	; (800620c <SysTick_Handler+0x38>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a08      	ldr	r2, [pc, #32]	; (800620c <SysTick_Handler+0x38>)
 80061ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061ee:	6013      	str	r3, [r2, #0]

		//Incrementamos en 1 el contador
		ticks++;
 80061f0:	4b07      	ldr	r3, [pc, #28]	; (8006210 <SysTick_Handler+0x3c>)
 80061f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f6:	1c50      	adds	r0, r2, #1
 80061f8:	f143 0100 	adc.w	r1, r3, #0
 80061fc:	4b04      	ldr	r3, [pc, #16]	; (8006210 <SysTick_Handler+0x3c>)
 80061fe:	e9c3 0100 	strd	r0, r1, [r3]
	}
}
 8006202:	bf00      	nop
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	e000e010 	.word	0xe000e010
 8006210:	20000920 	.word	0x20000920

08006214 <__NVIC_EnableIRQ>:
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	4603      	mov	r3, r0
 800621c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800621e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006222:	2b00      	cmp	r3, #0
 8006224:	db0b      	blt.n	800623e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006226:	79fb      	ldrb	r3, [r7, #7]
 8006228:	f003 021f 	and.w	r2, r3, #31
 800622c:	4907      	ldr	r1, [pc, #28]	; (800624c <__NVIC_EnableIRQ+0x38>)
 800622e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006232:	095b      	lsrs	r3, r3, #5
 8006234:	2001      	movs	r0, #1
 8006236:	fa00 f202 	lsl.w	r2, r0, r2
 800623a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	e000e100 	.word	0xe000e100

08006250 <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	4a8f      	ldr	r2, [pc, #572]	; (800649c <USART_Config+0x24c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d107      	bne.n	8006272 <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 8006262:	4b8f      	ldr	r3, [pc, #572]	; (80064a0 <USART_Config+0x250>)
 8006264:	2210      	movs	r2, #16
 8006266:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	4a8d      	ldr	r2, [pc, #564]	; (80064a4 <USART_Config+0x254>)
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	e019      	b.n	80062a6 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	4a8c      	ldr	r2, [pc, #560]	; (80064a8 <USART_Config+0x258>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d108      	bne.n	800628e <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 800627c:	4b88      	ldr	r3, [pc, #544]	; (80064a0 <USART_Config+0x250>)
 800627e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006282:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	4a88      	ldr	r2, [pc, #544]	; (80064ac <USART_Config+0x25c>)
 800628a:	6013      	str	r3, [r2, #0]
 800628c:	e00b      	b.n	80062a6 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	4a87      	ldr	r2, [pc, #540]	; (80064b0 <USART_Config+0x260>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d106      	bne.n	80062a6 <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 8006298:	4b81      	ldr	r3, [pc, #516]	; (80064a0 <USART_Config+0x250>)
 800629a:	2220      	movs	r2, #32
 800629c:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	4a84      	ldr	r2, [pc, #528]	; (80064b4 <USART_Config+0x264>)
 80062a4:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	2200      	movs	r2, #0
 80062ac:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	2200      	movs	r2, #0
 80062b4:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	789b      	ldrb	r3, [r3, #2]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d03d      	beq.n	800633a <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	68da      	ldr	r2, [r3, #12]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062cc:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	68da      	ldr	r2, [r3, #12]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062dc:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	68da      	ldr	r2, [r3, #12]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062ec:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062fc:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	789b      	ldrb	r3, [r3, #2]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d110      	bne.n	8006328 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	68da      	ldr	r2, [r3, #12]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006314:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006324:	60da      	str	r2, [r3, #12]
 8006326:	e018      	b.n	800635a <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006336:	60da      	str	r2, [r3, #12]
 8006338:	e00f      	b.n	800635a <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006348:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	68da      	ldr	r2, [r3, #12]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006358:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	78db      	ldrb	r3, [r3, #3]
 800635e:	2b03      	cmp	r3, #3
 8006360:	d84c      	bhi.n	80063fc <USART_Config+0x1ac>
 8006362:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <USART_Config+0x118>)
 8006364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006368:	08006379 	.word	0x08006379
 800636c:	08006397 	.word	0x08006397
 8006370:	080063b9 	.word	0x080063b9
 8006374:	080063db 	.word	0x080063db
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	691a      	ldr	r2, [r3, #16]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006386:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	6912      	ldr	r2, [r2, #16]
 8006392:	611a      	str	r2, [r3, #16]
		break;
 8006394:	e041      	b.n	800641a <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	691a      	ldr	r2, [r3, #16]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80063a4:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	691a      	ldr	r2, [r3, #16]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063b4:	611a      	str	r2, [r3, #16]
		break;
 80063b6:	e030      	b.n	800641a <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	691a      	ldr	r2, [r3, #16]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80063c6:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	691a      	ldr	r2, [r3, #16]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063d6:	611a      	str	r2, [r3, #16]
		break;
 80063d8:	e01f      	b.n	800641a <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	691a      	ldr	r2, [r3, #16]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80063e8:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	691a      	ldr	r2, [r3, #16]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80063f8:	611a      	str	r2, [r3, #16]
		break;
 80063fa:	e00e      	b.n	800641a <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	691a      	ldr	r2, [r3, #16]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800640a:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	6912      	ldr	r2, [r2, #16]
 8006416:	611a      	str	r2, [r3, #16]
		break;
 8006418:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 800641a:	2300      	movs	r3, #0
 800641c:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	4a21      	ldr	r2, [pc, #132]	; (80064a8 <USART_Config+0x258>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d104      	bne.n	8006432 <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8006428:	f7ff fac6 	bl	80059b8 <getClockAPB1>
 800642c:	4603      	mov	r3, r0
 800642e:	73fb      	strb	r3, [r7, #15]
 8006430:	e003      	b.n	800643a <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 8006432:	f7ff faa5 	bl	8005980 <getConfigPLL>
 8006436:	4603      	mov	r3, r0
 8006438:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	785b      	ldrb	r3, [r3, #1]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10b      	bne.n	800645a <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 8006442:	7bfb      	ldrb	r3, [r7, #15]
 8006444:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8006448:	4618      	mov	r0, r3
 800644a:	f000 f91f 	bl	800668c <getValueBaudRate>
 800644e:	4603      	mov	r3, r0
 8006450:	461a      	mov	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	609a      	str	r2, [r3, #8]
 8006458:	e02f      	b.n	80064ba <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	785b      	ldrb	r3, [r3, #1]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d10b      	bne.n	800647a <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 8006462:	7bfb      	ldrb	r3, [r7, #15]
 8006464:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8006468:	4618      	mov	r0, r3
 800646a:	f000 f90f 	bl	800668c <getValueBaudRate>
 800646e:	4603      	mov	r3, r0
 8006470:	461a      	mov	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	609a      	str	r2, [r3, #8]
 8006478:	e01f      	b.n	80064ba <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	785b      	ldrb	r3, [r3, #1]
 800647e:	2b02      	cmp	r3, #2
 8006480:	d11a      	bne.n	80064b8 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 8006482:	7bfb      	ldrb	r3, [r7, #15]
 8006484:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8006488:	4618      	mov	r0, r3
 800648a:	f000 f8ff 	bl	800668c <getValueBaudRate>
 800648e:	4603      	mov	r3, r0
 8006490:	461a      	mov	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	609a      	str	r2, [r3, #8]
 8006498:	e00f      	b.n	80064ba <USART_Config+0x26a>
 800649a:	bf00      	nop
 800649c:	40011000 	.word	0x40011000
 80064a0:	40023800 	.word	0x40023800
 80064a4:	20000938 	.word	0x20000938
 80064a8:	40004400 	.word	0x40004400
 80064ac:	2000093c 	.word	0x2000093c
 80064b0:	40011400 	.word	0x40011400
 80064b4:	20000940 	.word	0x20000940
	}
	else
	{
		__NOP();
 80064b8:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	2b03      	cmp	r3, #3
 80064c0:	d866      	bhi.n	8006590 <USART_Config+0x340>
 80064c2:	a201      	add	r2, pc, #4	; (adr r2, 80064c8 <USART_Config+0x278>)
 80064c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c8:	080064d9 	.word	0x080064d9
 80064cc:	080064fb 	.word	0x080064fb
 80064d0:	0800651d 	.word	0x0800651d
 80064d4:	0800655f 	.word	0x0800655f
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f022 0208 	bic.w	r2, r2, #8
 80064e6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	68da      	ldr	r2, [r3, #12]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f042 0208 	orr.w	r2, r2, #8
 80064f6:	60da      	str	r2, [r3, #12]

		break;
 80064f8:	e063      	b.n	80065c2 <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f022 0204 	bic.w	r2, r2, #4
 8006508:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f042 0204 	orr.w	r2, r2, #4
 8006518:	60da      	str	r2, [r3, #12]

		break;
 800651a:	e052      	b.n	80065c2 <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	68da      	ldr	r2, [r3, #12]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f022 0208 	bic.w	r2, r2, #8
 800652a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f042 0208 	orr.w	r2, r2, #8
 800653a:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f022 0204 	bic.w	r2, r2, #4
 800654a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	68da      	ldr	r2, [r3, #12]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f042 0204 	orr.w	r2, r2, #4
 800655a:	60da      	str	r2, [r3, #12]


		break;
 800655c:	e031      	b.n	80065c2 <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	68da      	ldr	r2, [r3, #12]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800656c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	68da      	ldr	r2, [r3, #12]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f022 0208 	bic.w	r2, r2, #8
 800657c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	68da      	ldr	r2, [r3, #12]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f022 0204 	bic.w	r2, r2, #4
 800658c:	60da      	str	r2, [r3, #12]
		break;
 800658e:	e018      	b.n	80065c2 <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800659e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f022 0208 	bic.w	r2, r2, #8
 80065ae:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f022 0204 	bic.w	r2, r2, #4
 80065be:	60da      	str	r2, [r3, #12]
		break;
 80065c0:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80065c2:	b672      	cpsid	i
}
 80065c4:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	791b      	ldrb	r3, [r3, #4]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d110      	bne.n	80065f0 <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	68da      	ldr	r2, [r3, #12]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f022 0220 	bic.w	r2, r2, #32
 80065dc:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	68da      	ldr	r2, [r3, #12]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f042 0220 	orr.w	r2, r2, #32
 80065ec:	60da      	str	r2, [r3, #12]
 80065ee:	e007      	b.n	8006600 <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	68da      	ldr	r2, [r3, #12]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f022 0220 	bic.w	r2, r2, #32
 80065fe:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	791b      	ldrb	r3, [r3, #4]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d003      	beq.n	8006610 <USART_Config+0x3c0>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	795b      	ldrb	r3, [r3, #5]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d11a      	bne.n	8006646 <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	4a1a      	ldr	r2, [pc, #104]	; (8006680 <USART_Config+0x430>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d103      	bne.n	8006622 <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 800661a:	2025      	movs	r0, #37	; 0x25
 800661c:	f7ff fdfa 	bl	8006214 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8006620:	e013      	b.n	800664a <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	4a17      	ldr	r2, [pc, #92]	; (8006684 <USART_Config+0x434>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d103      	bne.n	8006634 <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 800662c:	2026      	movs	r0, #38	; 0x26
 800662e:	f7ff fdf1 	bl	8006214 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8006632:	e00a      	b.n	800664a <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	4a13      	ldr	r2, [pc, #76]	; (8006688 <USART_Config+0x438>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d105      	bne.n	800664a <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 800663e:	2047      	movs	r0, #71	; 0x47
 8006640:	f7ff fde8 	bl	8006214 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8006644:	e001      	b.n	800664a <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 8006646:	bf00      	nop
 8006648:	e000      	b.n	800664c <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800664a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800664c:	b662      	cpsie	i
}
 800664e:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b03      	cmp	r3, #3
 8006656:	d00f      	beq.n	8006678 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006666:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	68da      	ldr	r2, [r3, #12]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006676:	60da      	str	r2, [r3, #12]
	}
}
 8006678:	bf00      	nop
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	40011000 	.word	0x40011000
 8006684:	40004400 	.word	0x40004400
 8006688:	40011400 	.word	0x40011400

0800668c <getValueBaudRate>:
		__enable_irq();
}

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 800668c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006690:	b086      	sub	sp, #24
 8006692:	af00      	add	r7, sp, #0
 8006694:	6039      	str	r1, [r7, #0]
 8006696:	4601      	mov	r1, r0
 8006698:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 800669a:	79f9      	ldrb	r1, [r7, #7]
 800669c:	2000      	movs	r0, #0
 800669e:	460a      	mov	r2, r1
 80066a0:	4603      	mov	r3, r0
 80066a2:	491f      	ldr	r1, [pc, #124]	; (8006720 <getValueBaudRate+0x94>)
 80066a4:	fb01 f003 	mul.w	r0, r1, r3
 80066a8:	2102      	movs	r1, #2
 80066aa:	fb02 f101 	mul.w	r1, r2, r1
 80066ae:	4401      	add	r1, r0
 80066b0:	481b      	ldr	r0, [pc, #108]	; (8006720 <getValueBaudRate+0x94>)
 80066b2:	fba2 4500 	umull	r4, r5, r2, r0
 80066b6:	194b      	adds	r3, r1, r5
 80066b8:	461d      	mov	r5, r3
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	011b      	lsls	r3, r3, #4
 80066be:	2200      	movs	r2, #0
 80066c0:	4698      	mov	r8, r3
 80066c2:	4691      	mov	r9, r2
 80066c4:	4642      	mov	r2, r8
 80066c6:	464b      	mov	r3, r9
 80066c8:	4620      	mov	r0, r4
 80066ca:	4629      	mov	r1, r5
 80066cc:	f7fa fc02 	bl	8000ed4 <__aeabi_ldivmod>
 80066d0:	4602      	mov	r2, r0
 80066d2:	460b      	mov	r3, r1
 80066d4:	4613      	mov	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	4a12      	ldr	r2, [pc, #72]	; (8006724 <getValueBaudRate+0x98>)
 80066dc:	fba2 2303 	umull	r2, r3, r2, r3
 80066e0:	0b5b      	lsrs	r3, r3, #13
 80066e2:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80066ea:	fb02 f303 	mul.w	r3, r2, r3
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80066fa:	4a0a      	ldr	r2, [pc, #40]	; (8006724 <getValueBaudRate+0x98>)
 80066fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006700:	0a5b      	lsrs	r3, r3, #9
 8006702:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	b29b      	uxth	r3, r3
 8006708:	011b      	lsls	r3, r3, #4
 800670a:	b29a      	uxth	r2, r3
 800670c:	7afb      	ldrb	r3, [r7, #11]
 800670e:	b29b      	uxth	r3, r3
 8006710:	4313      	orrs	r3, r2
 8006712:	813b      	strh	r3, [r7, #8]

    return value;
 8006714:	893b      	ldrh	r3, [r7, #8]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006720:	540be400 	.word	0x540be400
 8006724:	d1b71759 	.word	0xd1b71759

08006728 <writeMsgForTXE>:
	}
}

//Funcion para escribir un string
void writeMsgForTXE(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
	if (posChar == 0 && inLineTxe == 0)
 8006732:	4b16      	ldr	r3, [pc, #88]	; (800678c <writeMsgForTXE+0x64>)
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d111      	bne.n	800675e <writeMsgForTXE+0x36>
 800673a:	4b15      	ldr	r3, [pc, #84]	; (8006790 <writeMsgForTXE+0x68>)
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10d      	bne.n	800675e <writeMsgForTXE+0x36>
	{
		//Guardamos el string que se desea enviar en un arreglo
		sprintf(bufferMsgForTXE, MsgtoSend);
 8006742:	6839      	ldr	r1, [r7, #0]
 8006744:	4813      	ldr	r0, [pc, #76]	; (8006794 <writeMsgForTXE+0x6c>)
 8006746:	f001 f8a9 	bl	800789c <siprintf>
		//cambiamos el tipo
		typeWriteTXE = 1;
 800674a:	4b13      	ldr	r3, [pc, #76]	; (8006798 <writeMsgForTXE+0x70>)
 800674c:	2201      	movs	r2, #1
 800674e:	701a      	strb	r2, [r3, #0]
		//Activo la interrupcion
		interruptionTX(ptrUsartHandlerString->ptrUSARTx, USART_TX_INTERRUP_ENABLE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	2101      	movs	r1, #1
 8006756:	4618      	mov	r0, r3
 8006758:	f000 f830 	bl	80067bc <interruptionTX>
 800675c:	e012      	b.n	8006784 <writeMsgForTXE+0x5c>
	}
	else
	{
		sprintf(bufferMsgForTXE_inLine[inLine], MsgtoSend);
 800675e:	4b0f      	ldr	r3, [pc, #60]	; (800679c <writeMsgForTXE+0x74>)
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	461a      	mov	r2, r3
 8006764:	2364      	movs	r3, #100	; 0x64
 8006766:	fb02 f303 	mul.w	r3, r2, r3
 800676a:	4a0d      	ldr	r2, [pc, #52]	; (80067a0 <writeMsgForTXE+0x78>)
 800676c:	4413      	add	r3, r2
 800676e:	6839      	ldr	r1, [r7, #0]
 8006770:	4618      	mov	r0, r3
 8006772:	f001 f893 	bl	800789c <siprintf>
		inLine++;
 8006776:	4b09      	ldr	r3, [pc, #36]	; (800679c <writeMsgForTXE+0x74>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	3301      	adds	r3, #1
 800677c:	b2da      	uxtb	r2, r3
 800677e:	4b07      	ldr	r3, [pc, #28]	; (800679c <writeMsgForTXE+0x74>)
 8006780:	701a      	strb	r2, [r3, #0]
	}
}
 8006782:	bf00      	nop
 8006784:	bf00      	nop
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	2000117e 	.word	0x2000117e
 8006790:	2000117d 	.word	0x2000117d
 8006794:	20000948 	.word	0x20000948
 8006798:	2000117f 	.word	0x2000117f
 800679c:	2000117c 	.word	0x2000117c
 80067a0:	200009ac 	.word	0x200009ac

080067a4 <getRxData>:

//Funcion para leer un char
uint8_t getRxData(void)
{
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
	return auxRxData;
 80067a8:	4b03      	ldr	r3, [pc, #12]	; (80067b8 <getRxData+0x14>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	20000944 	.word	0x20000944

080067bc <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	460b      	mov	r3, r1
 80067c6:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d10c      	bne.n	80067e8 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 80067e6:	e005      	b.n	80067f4 <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	60da      	str	r2, [r3, #12]
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <BasicUSART2_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART2_Callback()
{
 8006800:	b480      	push	{r7}
 8006802:	af00      	add	r7, sp, #0
	__NOP();
 8006804:	bf00      	nop
}
 8006806:	bf00      	nop
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <BasicUSART6_Callback>:


__attribute__((weak)) void BasicUSART6_Callback()
{
 8006810:	b480      	push	{r7}
 8006812:	af00      	add	r7, sp, #0
	__NOP();
 8006814:	bf00      	nop
}
 8006816:	bf00      	nop
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 8006824:	4b37      	ldr	r3, [pc, #220]	; (8006904 <USART1_IRQHandler+0xe4>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0320 	and.w	r3, r3, #32
 800682e:	2b00      	cmp	r3, #0
 8006830:	d008      	beq.n	8006844 <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 8006832:	4b34      	ldr	r3, [pc, #208]	; (8006904 <USART1_IRQHandler+0xe4>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	b2da      	uxtb	r2, r3
 800683a:	4b33      	ldr	r3, [pc, #204]	; (8006908 <USART1_IRQHandler+0xe8>)
 800683c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 800683e:	f7fc f9cb 	bl	8002bd8 <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 8006842:	e05d      	b.n	8006900 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 8006844:	4b2f      	ldr	r3, [pc, #188]	; (8006904 <USART1_IRQHandler+0xe4>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800684e:	2b00      	cmp	r3, #0
 8006850:	d055      	beq.n	80068fe <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8006852:	4b2e      	ldr	r3, [pc, #184]	; (800690c <USART1_IRQHandler+0xec>)
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10b      	bne.n	8006872 <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 800685a:	4b2d      	ldr	r3, [pc, #180]	; (8006910 <USART1_IRQHandler+0xf0>)
 800685c:	781a      	ldrb	r2, [r3, #0]
 800685e:	4b29      	ldr	r3, [pc, #164]	; (8006904 <USART1_IRQHandler+0xe4>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8006864:	4b27      	ldr	r3, [pc, #156]	; (8006904 <USART1_IRQHandler+0xe4>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2100      	movs	r1, #0
 800686a:	4618      	mov	r0, r3
 800686c:	f7ff ffa6 	bl	80067bc <interruptionTX>
}
 8006870:	e046      	b.n	8006900 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8006872:	4b26      	ldr	r3, [pc, #152]	; (800690c <USART1_IRQHandler+0xec>)
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d142      	bne.n	8006900 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 800687a:	4b26      	ldr	r3, [pc, #152]	; (8006914 <USART1_IRQHandler+0xf4>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	4b25      	ldr	r3, [pc, #148]	; (8006918 <USART1_IRQHandler+0xf8>)
 8006882:	5c9b      	ldrb	r3, [r3, r2]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00e      	beq.n	80068a6 <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 8006888:	4b22      	ldr	r3, [pc, #136]	; (8006914 <USART1_IRQHandler+0xf4>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	461a      	mov	r2, r3
 800688e:	4b22      	ldr	r3, [pc, #136]	; (8006918 <USART1_IRQHandler+0xf8>)
 8006890:	5c9a      	ldrb	r2, [r3, r2]
 8006892:	4b1c      	ldr	r3, [pc, #112]	; (8006904 <USART1_IRQHandler+0xe4>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	605a      	str	r2, [r3, #4]
				posChar++;
 8006898:	4b1e      	ldr	r3, [pc, #120]	; (8006914 <USART1_IRQHandler+0xf4>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	3301      	adds	r3, #1
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	4b1c      	ldr	r3, [pc, #112]	; (8006914 <USART1_IRQHandler+0xf4>)
 80068a2:	701a      	strb	r2, [r3, #0]
}
 80068a4:	e02c      	b.n	8006900 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 80068a6:	4b1d      	ldr	r3, [pc, #116]	; (800691c <USART1_IRQHandler+0xfc>)
 80068a8:	781a      	ldrb	r2, [r3, #0]
 80068aa:	4b1d      	ldr	r3, [pc, #116]	; (8006920 <USART1_IRQHandler+0x100>)
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d215      	bcs.n	80068de <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80068b2:	4b1a      	ldr	r3, [pc, #104]	; (800691c <USART1_IRQHandler+0xfc>)
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	461a      	mov	r2, r3
 80068b8:	2364      	movs	r3, #100	; 0x64
 80068ba:	fb02 f303 	mul.w	r3, r2, r3
 80068be:	4a19      	ldr	r2, [pc, #100]	; (8006924 <USART1_IRQHandler+0x104>)
 80068c0:	4413      	add	r3, r2
 80068c2:	4619      	mov	r1, r3
 80068c4:	4814      	ldr	r0, [pc, #80]	; (8006918 <USART1_IRQHandler+0xf8>)
 80068c6:	f000 ffe9 	bl	800789c <siprintf>
					posChar = 0;
 80068ca:	4b12      	ldr	r3, [pc, #72]	; (8006914 <USART1_IRQHandler+0xf4>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 80068d0:	4b12      	ldr	r3, [pc, #72]	; (800691c <USART1_IRQHandler+0xfc>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	3301      	adds	r3, #1
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	4b10      	ldr	r3, [pc, #64]	; (800691c <USART1_IRQHandler+0xfc>)
 80068da:	701a      	strb	r2, [r3, #0]
}
 80068dc:	e010      	b.n	8006900 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 80068de:	4b09      	ldr	r3, [pc, #36]	; (8006904 <USART1_IRQHandler+0xe4>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2100      	movs	r1, #0
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7ff ff69 	bl	80067bc <interruptionTX>
					posChar = 0;
 80068ea:	4b0a      	ldr	r3, [pc, #40]	; (8006914 <USART1_IRQHandler+0xf4>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 80068f0:	4b0a      	ldr	r3, [pc, #40]	; (800691c <USART1_IRQHandler+0xfc>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 80068f6:	4b0a      	ldr	r3, [pc, #40]	; (8006920 <USART1_IRQHandler+0x100>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	701a      	strb	r2, [r3, #0]
}
 80068fc:	e000      	b.n	8006900 <USART1_IRQHandler+0xe0>
		__NOP();
 80068fe:	bf00      	nop
}
 8006900:	bf00      	nop
 8006902:	bd80      	pop	{r7, pc}
 8006904:	20000938 	.word	0x20000938
 8006908:	20000944 	.word	0x20000944
 800690c:	2000117f 	.word	0x2000117f
 8006910:	20000945 	.word	0x20000945
 8006914:	2000117e 	.word	0x2000117e
 8006918:	20000948 	.word	0x20000948
 800691c:	2000117d 	.word	0x2000117d
 8006920:	2000117c 	.word	0x2000117c
 8006924:	200009ac 	.word	0x200009ac

08006928 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 800692c:	4b37      	ldr	r3, [pc, #220]	; (8006a0c <USART2_IRQHandler+0xe4>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b00      	cmp	r3, #0
 8006938:	d008      	beq.n	800694c <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 800693a:	4b34      	ldr	r3, [pc, #208]	; (8006a0c <USART2_IRQHandler+0xe4>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	b2da      	uxtb	r2, r3
 8006942:	4b33      	ldr	r3, [pc, #204]	; (8006a10 <USART2_IRQHandler+0xe8>)
 8006944:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 8006946:	f7ff ff5b 	bl	8006800 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 800694a:	e05d      	b.n	8006a08 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 800694c:	4b2f      	ldr	r3, [pc, #188]	; (8006a0c <USART2_IRQHandler+0xe4>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006956:	2b00      	cmp	r3, #0
 8006958:	d055      	beq.n	8006a06 <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800695a:	4b2e      	ldr	r3, [pc, #184]	; (8006a14 <USART2_IRQHandler+0xec>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10b      	bne.n	800697a <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 8006962:	4b2d      	ldr	r3, [pc, #180]	; (8006a18 <USART2_IRQHandler+0xf0>)
 8006964:	781a      	ldrb	r2, [r3, #0]
 8006966:	4b29      	ldr	r3, [pc, #164]	; (8006a0c <USART2_IRQHandler+0xe4>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 800696c:	4b27      	ldr	r3, [pc, #156]	; (8006a0c <USART2_IRQHandler+0xe4>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2100      	movs	r1, #0
 8006972:	4618      	mov	r0, r3
 8006974:	f7ff ff22 	bl	80067bc <interruptionTX>
}
 8006978:	e046      	b.n	8006a08 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800697a:	4b26      	ldr	r3, [pc, #152]	; (8006a14 <USART2_IRQHandler+0xec>)
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d142      	bne.n	8006a08 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8006982:	4b26      	ldr	r3, [pc, #152]	; (8006a1c <USART2_IRQHandler+0xf4>)
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	4b25      	ldr	r3, [pc, #148]	; (8006a20 <USART2_IRQHandler+0xf8>)
 800698a:	5c9b      	ldrb	r3, [r3, r2]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00e      	beq.n	80069ae <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 8006990:	4b22      	ldr	r3, [pc, #136]	; (8006a1c <USART2_IRQHandler+0xf4>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	461a      	mov	r2, r3
 8006996:	4b22      	ldr	r3, [pc, #136]	; (8006a20 <USART2_IRQHandler+0xf8>)
 8006998:	5c9a      	ldrb	r2, [r3, r2]
 800699a:	4b1c      	ldr	r3, [pc, #112]	; (8006a0c <USART2_IRQHandler+0xe4>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	605a      	str	r2, [r3, #4]
				posChar++;
 80069a0:	4b1e      	ldr	r3, [pc, #120]	; (8006a1c <USART2_IRQHandler+0xf4>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	3301      	adds	r3, #1
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	4b1c      	ldr	r3, [pc, #112]	; (8006a1c <USART2_IRQHandler+0xf4>)
 80069aa:	701a      	strb	r2, [r3, #0]
}
 80069ac:	e02c      	b.n	8006a08 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 80069ae:	4b1d      	ldr	r3, [pc, #116]	; (8006a24 <USART2_IRQHandler+0xfc>)
 80069b0:	781a      	ldrb	r2, [r3, #0]
 80069b2:	4b1d      	ldr	r3, [pc, #116]	; (8006a28 <USART2_IRQHandler+0x100>)
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d215      	bcs.n	80069e6 <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80069ba:	4b1a      	ldr	r3, [pc, #104]	; (8006a24 <USART2_IRQHandler+0xfc>)
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	2364      	movs	r3, #100	; 0x64
 80069c2:	fb02 f303 	mul.w	r3, r2, r3
 80069c6:	4a19      	ldr	r2, [pc, #100]	; (8006a2c <USART2_IRQHandler+0x104>)
 80069c8:	4413      	add	r3, r2
 80069ca:	4619      	mov	r1, r3
 80069cc:	4814      	ldr	r0, [pc, #80]	; (8006a20 <USART2_IRQHandler+0xf8>)
 80069ce:	f000 ff65 	bl	800789c <siprintf>
					posChar = 0;
 80069d2:	4b12      	ldr	r3, [pc, #72]	; (8006a1c <USART2_IRQHandler+0xf4>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 80069d8:	4b12      	ldr	r3, [pc, #72]	; (8006a24 <USART2_IRQHandler+0xfc>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	3301      	adds	r3, #1
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	4b10      	ldr	r3, [pc, #64]	; (8006a24 <USART2_IRQHandler+0xfc>)
 80069e2:	701a      	strb	r2, [r3, #0]
}
 80069e4:	e010      	b.n	8006a08 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 80069e6:	4b09      	ldr	r3, [pc, #36]	; (8006a0c <USART2_IRQHandler+0xe4>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2100      	movs	r1, #0
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff fee5 	bl	80067bc <interruptionTX>
					posChar = 0;
 80069f2:	4b0a      	ldr	r3, [pc, #40]	; (8006a1c <USART2_IRQHandler+0xf4>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 80069f8:	4b0a      	ldr	r3, [pc, #40]	; (8006a24 <USART2_IRQHandler+0xfc>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 80069fe:	4b0a      	ldr	r3, [pc, #40]	; (8006a28 <USART2_IRQHandler+0x100>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	701a      	strb	r2, [r3, #0]
}
 8006a04:	e000      	b.n	8006a08 <USART2_IRQHandler+0xe0>
		__NOP();
 8006a06:	bf00      	nop
}
 8006a08:	bf00      	nop
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	2000093c 	.word	0x2000093c
 8006a10:	20000944 	.word	0x20000944
 8006a14:	2000117f 	.word	0x2000117f
 8006a18:	20000945 	.word	0x20000945
 8006a1c:	2000117e 	.word	0x2000117e
 8006a20:	20000948 	.word	0x20000948
 8006a24:	2000117d 	.word	0x2000117d
 8006a28:	2000117c 	.word	0x2000117c
 8006a2c:	200009ac 	.word	0x200009ac

08006a30 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 8006a34:	4b37      	ldr	r3, [pc, #220]	; (8006b14 <USART6_IRQHandler+0xe4>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d008      	beq.n	8006a54 <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 8006a42:	4b34      	ldr	r3, [pc, #208]	; (8006b14 <USART6_IRQHandler+0xe4>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	4b33      	ldr	r3, [pc, #204]	; (8006b18 <USART6_IRQHandler+0xe8>)
 8006a4c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 8006a4e:	f7ff fedf 	bl	8006810 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 8006a52:	e05d      	b.n	8006b10 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 8006a54:	4b2f      	ldr	r3, [pc, #188]	; (8006b14 <USART6_IRQHandler+0xe4>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d055      	beq.n	8006b0e <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8006a62:	4b2e      	ldr	r3, [pc, #184]	; (8006b1c <USART6_IRQHandler+0xec>)
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10b      	bne.n	8006a82 <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 8006a6a:	4b2d      	ldr	r3, [pc, #180]	; (8006b20 <USART6_IRQHandler+0xf0>)
 8006a6c:	781a      	ldrb	r2, [r3, #0]
 8006a6e:	4b29      	ldr	r3, [pc, #164]	; (8006b14 <USART6_IRQHandler+0xe4>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8006a74:	4b27      	ldr	r3, [pc, #156]	; (8006b14 <USART6_IRQHandler+0xe4>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2100      	movs	r1, #0
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7ff fe9e 	bl	80067bc <interruptionTX>
}
 8006a80:	e046      	b.n	8006b10 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8006a82:	4b26      	ldr	r3, [pc, #152]	; (8006b1c <USART6_IRQHandler+0xec>)
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d142      	bne.n	8006b10 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8006a8a:	4b26      	ldr	r3, [pc, #152]	; (8006b24 <USART6_IRQHandler+0xf4>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	4b25      	ldr	r3, [pc, #148]	; (8006b28 <USART6_IRQHandler+0xf8>)
 8006a92:	5c9b      	ldrb	r3, [r3, r2]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00e      	beq.n	8006ab6 <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 8006a98:	4b22      	ldr	r3, [pc, #136]	; (8006b24 <USART6_IRQHandler+0xf4>)
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	4b22      	ldr	r3, [pc, #136]	; (8006b28 <USART6_IRQHandler+0xf8>)
 8006aa0:	5c9a      	ldrb	r2, [r3, r2]
 8006aa2:	4b1c      	ldr	r3, [pc, #112]	; (8006b14 <USART6_IRQHandler+0xe4>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	605a      	str	r2, [r3, #4]
				posChar++;
 8006aa8:	4b1e      	ldr	r3, [pc, #120]	; (8006b24 <USART6_IRQHandler+0xf4>)
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	3301      	adds	r3, #1
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	4b1c      	ldr	r3, [pc, #112]	; (8006b24 <USART6_IRQHandler+0xf4>)
 8006ab2:	701a      	strb	r2, [r3, #0]
}
 8006ab4:	e02c      	b.n	8006b10 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8006ab6:	4b1d      	ldr	r3, [pc, #116]	; (8006b2c <USART6_IRQHandler+0xfc>)
 8006ab8:	781a      	ldrb	r2, [r3, #0]
 8006aba:	4b1d      	ldr	r3, [pc, #116]	; (8006b30 <USART6_IRQHandler+0x100>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d215      	bcs.n	8006aee <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8006ac2:	4b1a      	ldr	r3, [pc, #104]	; (8006b2c <USART6_IRQHandler+0xfc>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	2364      	movs	r3, #100	; 0x64
 8006aca:	fb02 f303 	mul.w	r3, r2, r3
 8006ace:	4a19      	ldr	r2, [pc, #100]	; (8006b34 <USART6_IRQHandler+0x104>)
 8006ad0:	4413      	add	r3, r2
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	4814      	ldr	r0, [pc, #80]	; (8006b28 <USART6_IRQHandler+0xf8>)
 8006ad6:	f000 fee1 	bl	800789c <siprintf>
					posChar = 0;
 8006ada:	4b12      	ldr	r3, [pc, #72]	; (8006b24 <USART6_IRQHandler+0xf4>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8006ae0:	4b12      	ldr	r3, [pc, #72]	; (8006b2c <USART6_IRQHandler+0xfc>)
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	4b10      	ldr	r3, [pc, #64]	; (8006b2c <USART6_IRQHandler+0xfc>)
 8006aea:	701a      	strb	r2, [r3, #0]
}
 8006aec:	e010      	b.n	8006b10 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8006aee:	4b09      	ldr	r3, [pc, #36]	; (8006b14 <USART6_IRQHandler+0xe4>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2100      	movs	r1, #0
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7ff fe61 	bl	80067bc <interruptionTX>
					posChar = 0;
 8006afa:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <USART6_IRQHandler+0xf4>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8006b00:	4b0a      	ldr	r3, [pc, #40]	; (8006b2c <USART6_IRQHandler+0xfc>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8006b06:	4b0a      	ldr	r3, [pc, #40]	; (8006b30 <USART6_IRQHandler+0x100>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	701a      	strb	r2, [r3, #0]
}
 8006b0c:	e000      	b.n	8006b10 <USART6_IRQHandler+0xe0>
		__NOP();
 8006b0e:	bf00      	nop
}
 8006b10:	bf00      	nop
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	20000940 	.word	0x20000940
 8006b18:	20000944 	.word	0x20000944
 8006b1c:	2000117f 	.word	0x2000117f
 8006b20:	20000945 	.word	0x20000945
 8006b24:	2000117e 	.word	0x2000117e
 8006b28:	20000948 	.word	0x20000948
 8006b2c:	2000117d 	.word	0x2000117d
 8006b30:	2000117c 	.word	0x2000117c
 8006b34:	200009ac 	.word	0x200009ac

08006b38 <__errno>:
 8006b38:	4b01      	ldr	r3, [pc, #4]	; (8006b40 <__errno+0x8>)
 8006b3a:	6818      	ldr	r0, [r3, #0]
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	2000000c 	.word	0x2000000c

08006b44 <__libc_init_array>:
 8006b44:	b570      	push	{r4, r5, r6, lr}
 8006b46:	4d0d      	ldr	r5, [pc, #52]	; (8006b7c <__libc_init_array+0x38>)
 8006b48:	4c0d      	ldr	r4, [pc, #52]	; (8006b80 <__libc_init_array+0x3c>)
 8006b4a:	1b64      	subs	r4, r4, r5
 8006b4c:	10a4      	asrs	r4, r4, #2
 8006b4e:	2600      	movs	r6, #0
 8006b50:	42a6      	cmp	r6, r4
 8006b52:	d109      	bne.n	8006b68 <__libc_init_array+0x24>
 8006b54:	4d0b      	ldr	r5, [pc, #44]	; (8006b84 <__libc_init_array+0x40>)
 8006b56:	4c0c      	ldr	r4, [pc, #48]	; (8006b88 <__libc_init_array+0x44>)
 8006b58:	f007 fd28 	bl	800e5ac <_init>
 8006b5c:	1b64      	subs	r4, r4, r5
 8006b5e:	10a4      	asrs	r4, r4, #2
 8006b60:	2600      	movs	r6, #0
 8006b62:	42a6      	cmp	r6, r4
 8006b64:	d105      	bne.n	8006b72 <__libc_init_array+0x2e>
 8006b66:	bd70      	pop	{r4, r5, r6, pc}
 8006b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b6c:	4798      	blx	r3
 8006b6e:	3601      	adds	r6, #1
 8006b70:	e7ee      	b.n	8006b50 <__libc_init_array+0xc>
 8006b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b76:	4798      	blx	r3
 8006b78:	3601      	adds	r6, #1
 8006b7a:	e7f2      	b.n	8006b62 <__libc_init_array+0x1e>
 8006b7c:	0800efc0 	.word	0x0800efc0
 8006b80:	0800efc0 	.word	0x0800efc0
 8006b84:	0800efc0 	.word	0x0800efc0
 8006b88:	0800efc4 	.word	0x0800efc4

08006b8c <memset>:
 8006b8c:	4402      	add	r2, r0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d100      	bne.n	8006b96 <memset+0xa>
 8006b94:	4770      	bx	lr
 8006b96:	f803 1b01 	strb.w	r1, [r3], #1
 8006b9a:	e7f9      	b.n	8006b90 <memset+0x4>

08006b9c <__cvt>:
 8006b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba0:	ec55 4b10 	vmov	r4, r5, d0
 8006ba4:	2d00      	cmp	r5, #0
 8006ba6:	460e      	mov	r6, r1
 8006ba8:	4619      	mov	r1, r3
 8006baa:	462b      	mov	r3, r5
 8006bac:	bfbb      	ittet	lt
 8006bae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006bb2:	461d      	movlt	r5, r3
 8006bb4:	2300      	movge	r3, #0
 8006bb6:	232d      	movlt	r3, #45	; 0x2d
 8006bb8:	700b      	strb	r3, [r1, #0]
 8006bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006bc0:	4691      	mov	r9, r2
 8006bc2:	f023 0820 	bic.w	r8, r3, #32
 8006bc6:	bfbc      	itt	lt
 8006bc8:	4622      	movlt	r2, r4
 8006bca:	4614      	movlt	r4, r2
 8006bcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bd0:	d005      	beq.n	8006bde <__cvt+0x42>
 8006bd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006bd6:	d100      	bne.n	8006bda <__cvt+0x3e>
 8006bd8:	3601      	adds	r6, #1
 8006bda:	2102      	movs	r1, #2
 8006bdc:	e000      	b.n	8006be0 <__cvt+0x44>
 8006bde:	2103      	movs	r1, #3
 8006be0:	ab03      	add	r3, sp, #12
 8006be2:	9301      	str	r3, [sp, #4]
 8006be4:	ab02      	add	r3, sp, #8
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	ec45 4b10 	vmov	d0, r4, r5
 8006bec:	4653      	mov	r3, sl
 8006bee:	4632      	mov	r2, r6
 8006bf0:	f001 fe42 	bl	8008878 <_dtoa_r>
 8006bf4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	d102      	bne.n	8006c02 <__cvt+0x66>
 8006bfc:	f019 0f01 	tst.w	r9, #1
 8006c00:	d022      	beq.n	8006c48 <__cvt+0xac>
 8006c02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c06:	eb07 0906 	add.w	r9, r7, r6
 8006c0a:	d110      	bne.n	8006c2e <__cvt+0x92>
 8006c0c:	783b      	ldrb	r3, [r7, #0]
 8006c0e:	2b30      	cmp	r3, #48	; 0x30
 8006c10:	d10a      	bne.n	8006c28 <__cvt+0x8c>
 8006c12:	2200      	movs	r2, #0
 8006c14:	2300      	movs	r3, #0
 8006c16:	4620      	mov	r0, r4
 8006c18:	4629      	mov	r1, r5
 8006c1a:	f7f9 ff6d 	bl	8000af8 <__aeabi_dcmpeq>
 8006c1e:	b918      	cbnz	r0, 8006c28 <__cvt+0x8c>
 8006c20:	f1c6 0601 	rsb	r6, r6, #1
 8006c24:	f8ca 6000 	str.w	r6, [sl]
 8006c28:	f8da 3000 	ldr.w	r3, [sl]
 8006c2c:	4499      	add	r9, r3
 8006c2e:	2200      	movs	r2, #0
 8006c30:	2300      	movs	r3, #0
 8006c32:	4620      	mov	r0, r4
 8006c34:	4629      	mov	r1, r5
 8006c36:	f7f9 ff5f 	bl	8000af8 <__aeabi_dcmpeq>
 8006c3a:	b108      	cbz	r0, 8006c40 <__cvt+0xa4>
 8006c3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c40:	2230      	movs	r2, #48	; 0x30
 8006c42:	9b03      	ldr	r3, [sp, #12]
 8006c44:	454b      	cmp	r3, r9
 8006c46:	d307      	bcc.n	8006c58 <__cvt+0xbc>
 8006c48:	9b03      	ldr	r3, [sp, #12]
 8006c4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c4c:	1bdb      	subs	r3, r3, r7
 8006c4e:	4638      	mov	r0, r7
 8006c50:	6013      	str	r3, [r2, #0]
 8006c52:	b004      	add	sp, #16
 8006c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c58:	1c59      	adds	r1, r3, #1
 8006c5a:	9103      	str	r1, [sp, #12]
 8006c5c:	701a      	strb	r2, [r3, #0]
 8006c5e:	e7f0      	b.n	8006c42 <__cvt+0xa6>

08006c60 <__exponent>:
 8006c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c62:	4603      	mov	r3, r0
 8006c64:	2900      	cmp	r1, #0
 8006c66:	bfb8      	it	lt
 8006c68:	4249      	neglt	r1, r1
 8006c6a:	f803 2b02 	strb.w	r2, [r3], #2
 8006c6e:	bfb4      	ite	lt
 8006c70:	222d      	movlt	r2, #45	; 0x2d
 8006c72:	222b      	movge	r2, #43	; 0x2b
 8006c74:	2909      	cmp	r1, #9
 8006c76:	7042      	strb	r2, [r0, #1]
 8006c78:	dd2a      	ble.n	8006cd0 <__exponent+0x70>
 8006c7a:	f10d 0407 	add.w	r4, sp, #7
 8006c7e:	46a4      	mov	ip, r4
 8006c80:	270a      	movs	r7, #10
 8006c82:	46a6      	mov	lr, r4
 8006c84:	460a      	mov	r2, r1
 8006c86:	fb91 f6f7 	sdiv	r6, r1, r7
 8006c8a:	fb07 1516 	mls	r5, r7, r6, r1
 8006c8e:	3530      	adds	r5, #48	; 0x30
 8006c90:	2a63      	cmp	r2, #99	; 0x63
 8006c92:	f104 34ff 	add.w	r4, r4, #4294967295
 8006c96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006c9a:	4631      	mov	r1, r6
 8006c9c:	dcf1      	bgt.n	8006c82 <__exponent+0x22>
 8006c9e:	3130      	adds	r1, #48	; 0x30
 8006ca0:	f1ae 0502 	sub.w	r5, lr, #2
 8006ca4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ca8:	1c44      	adds	r4, r0, #1
 8006caa:	4629      	mov	r1, r5
 8006cac:	4561      	cmp	r1, ip
 8006cae:	d30a      	bcc.n	8006cc6 <__exponent+0x66>
 8006cb0:	f10d 0209 	add.w	r2, sp, #9
 8006cb4:	eba2 020e 	sub.w	r2, r2, lr
 8006cb8:	4565      	cmp	r5, ip
 8006cba:	bf88      	it	hi
 8006cbc:	2200      	movhi	r2, #0
 8006cbe:	4413      	add	r3, r2
 8006cc0:	1a18      	subs	r0, r3, r0
 8006cc2:	b003      	add	sp, #12
 8006cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cca:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006cce:	e7ed      	b.n	8006cac <__exponent+0x4c>
 8006cd0:	2330      	movs	r3, #48	; 0x30
 8006cd2:	3130      	adds	r1, #48	; 0x30
 8006cd4:	7083      	strb	r3, [r0, #2]
 8006cd6:	70c1      	strb	r1, [r0, #3]
 8006cd8:	1d03      	adds	r3, r0, #4
 8006cda:	e7f1      	b.n	8006cc0 <__exponent+0x60>

08006cdc <_printf_float>:
 8006cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce0:	ed2d 8b02 	vpush	{d8}
 8006ce4:	b08d      	sub	sp, #52	; 0x34
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006cec:	4616      	mov	r6, r2
 8006cee:	461f      	mov	r7, r3
 8006cf0:	4605      	mov	r5, r0
 8006cf2:	f002 ff1f 	bl	8009b34 <_localeconv_r>
 8006cf6:	f8d0 a000 	ldr.w	sl, [r0]
 8006cfa:	4650      	mov	r0, sl
 8006cfc:	f7f9 fa7a 	bl	80001f4 <strlen>
 8006d00:	2300      	movs	r3, #0
 8006d02:	930a      	str	r3, [sp, #40]	; 0x28
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	9305      	str	r3, [sp, #20]
 8006d08:	f8d8 3000 	ldr.w	r3, [r8]
 8006d0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006d10:	3307      	adds	r3, #7
 8006d12:	f023 0307 	bic.w	r3, r3, #7
 8006d16:	f103 0208 	add.w	r2, r3, #8
 8006d1a:	f8c8 2000 	str.w	r2, [r8]
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006d2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d2e:	9307      	str	r3, [sp, #28]
 8006d30:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d34:	ee08 0a10 	vmov	s16, r0
 8006d38:	4b9f      	ldr	r3, [pc, #636]	; (8006fb8 <_printf_float+0x2dc>)
 8006d3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d42:	f7f9 ff0b 	bl	8000b5c <__aeabi_dcmpun>
 8006d46:	bb88      	cbnz	r0, 8006dac <_printf_float+0xd0>
 8006d48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d4c:	4b9a      	ldr	r3, [pc, #616]	; (8006fb8 <_printf_float+0x2dc>)
 8006d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d52:	f7f9 fee5 	bl	8000b20 <__aeabi_dcmple>
 8006d56:	bb48      	cbnz	r0, 8006dac <_printf_float+0xd0>
 8006d58:	2200      	movs	r2, #0
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	4649      	mov	r1, r9
 8006d60:	f7f9 fed4 	bl	8000b0c <__aeabi_dcmplt>
 8006d64:	b110      	cbz	r0, 8006d6c <_printf_float+0x90>
 8006d66:	232d      	movs	r3, #45	; 0x2d
 8006d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d6c:	4b93      	ldr	r3, [pc, #588]	; (8006fbc <_printf_float+0x2e0>)
 8006d6e:	4894      	ldr	r0, [pc, #592]	; (8006fc0 <_printf_float+0x2e4>)
 8006d70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006d74:	bf94      	ite	ls
 8006d76:	4698      	movls	r8, r3
 8006d78:	4680      	movhi	r8, r0
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	6123      	str	r3, [r4, #16]
 8006d7e:	9b05      	ldr	r3, [sp, #20]
 8006d80:	f023 0204 	bic.w	r2, r3, #4
 8006d84:	6022      	str	r2, [r4, #0]
 8006d86:	f04f 0900 	mov.w	r9, #0
 8006d8a:	9700      	str	r7, [sp, #0]
 8006d8c:	4633      	mov	r3, r6
 8006d8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006d90:	4621      	mov	r1, r4
 8006d92:	4628      	mov	r0, r5
 8006d94:	f000 f9d8 	bl	8007148 <_printf_common>
 8006d98:	3001      	adds	r0, #1
 8006d9a:	f040 8090 	bne.w	8006ebe <_printf_float+0x1e2>
 8006d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006da2:	b00d      	add	sp, #52	; 0x34
 8006da4:	ecbd 8b02 	vpop	{d8}
 8006da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dac:	4642      	mov	r2, r8
 8006dae:	464b      	mov	r3, r9
 8006db0:	4640      	mov	r0, r8
 8006db2:	4649      	mov	r1, r9
 8006db4:	f7f9 fed2 	bl	8000b5c <__aeabi_dcmpun>
 8006db8:	b140      	cbz	r0, 8006dcc <_printf_float+0xf0>
 8006dba:	464b      	mov	r3, r9
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	bfbc      	itt	lt
 8006dc0:	232d      	movlt	r3, #45	; 0x2d
 8006dc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006dc6:	487f      	ldr	r0, [pc, #508]	; (8006fc4 <_printf_float+0x2e8>)
 8006dc8:	4b7f      	ldr	r3, [pc, #508]	; (8006fc8 <_printf_float+0x2ec>)
 8006dca:	e7d1      	b.n	8006d70 <_printf_float+0x94>
 8006dcc:	6863      	ldr	r3, [r4, #4]
 8006dce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006dd2:	9206      	str	r2, [sp, #24]
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	d13f      	bne.n	8006e58 <_printf_float+0x17c>
 8006dd8:	2306      	movs	r3, #6
 8006dda:	6063      	str	r3, [r4, #4]
 8006ddc:	9b05      	ldr	r3, [sp, #20]
 8006dde:	6861      	ldr	r1, [r4, #4]
 8006de0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006de4:	2300      	movs	r3, #0
 8006de6:	9303      	str	r3, [sp, #12]
 8006de8:	ab0a      	add	r3, sp, #40	; 0x28
 8006dea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006dee:	ab09      	add	r3, sp, #36	; 0x24
 8006df0:	ec49 8b10 	vmov	d0, r8, r9
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	6022      	str	r2, [r4, #0]
 8006df8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	f7ff fecd 	bl	8006b9c <__cvt>
 8006e02:	9b06      	ldr	r3, [sp, #24]
 8006e04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e06:	2b47      	cmp	r3, #71	; 0x47
 8006e08:	4680      	mov	r8, r0
 8006e0a:	d108      	bne.n	8006e1e <_printf_float+0x142>
 8006e0c:	1cc8      	adds	r0, r1, #3
 8006e0e:	db02      	blt.n	8006e16 <_printf_float+0x13a>
 8006e10:	6863      	ldr	r3, [r4, #4]
 8006e12:	4299      	cmp	r1, r3
 8006e14:	dd41      	ble.n	8006e9a <_printf_float+0x1be>
 8006e16:	f1ab 0b02 	sub.w	fp, fp, #2
 8006e1a:	fa5f fb8b 	uxtb.w	fp, fp
 8006e1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e22:	d820      	bhi.n	8006e66 <_printf_float+0x18a>
 8006e24:	3901      	subs	r1, #1
 8006e26:	465a      	mov	r2, fp
 8006e28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e2c:	9109      	str	r1, [sp, #36]	; 0x24
 8006e2e:	f7ff ff17 	bl	8006c60 <__exponent>
 8006e32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e34:	1813      	adds	r3, r2, r0
 8006e36:	2a01      	cmp	r2, #1
 8006e38:	4681      	mov	r9, r0
 8006e3a:	6123      	str	r3, [r4, #16]
 8006e3c:	dc02      	bgt.n	8006e44 <_printf_float+0x168>
 8006e3e:	6822      	ldr	r2, [r4, #0]
 8006e40:	07d2      	lsls	r2, r2, #31
 8006e42:	d501      	bpl.n	8006e48 <_printf_float+0x16c>
 8006e44:	3301      	adds	r3, #1
 8006e46:	6123      	str	r3, [r4, #16]
 8006e48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d09c      	beq.n	8006d8a <_printf_float+0xae>
 8006e50:	232d      	movs	r3, #45	; 0x2d
 8006e52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e56:	e798      	b.n	8006d8a <_printf_float+0xae>
 8006e58:	9a06      	ldr	r2, [sp, #24]
 8006e5a:	2a47      	cmp	r2, #71	; 0x47
 8006e5c:	d1be      	bne.n	8006ddc <_printf_float+0x100>
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1bc      	bne.n	8006ddc <_printf_float+0x100>
 8006e62:	2301      	movs	r3, #1
 8006e64:	e7b9      	b.n	8006dda <_printf_float+0xfe>
 8006e66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006e6a:	d118      	bne.n	8006e9e <_printf_float+0x1c2>
 8006e6c:	2900      	cmp	r1, #0
 8006e6e:	6863      	ldr	r3, [r4, #4]
 8006e70:	dd0b      	ble.n	8006e8a <_printf_float+0x1ae>
 8006e72:	6121      	str	r1, [r4, #16]
 8006e74:	b913      	cbnz	r3, 8006e7c <_printf_float+0x1a0>
 8006e76:	6822      	ldr	r2, [r4, #0]
 8006e78:	07d0      	lsls	r0, r2, #31
 8006e7a:	d502      	bpl.n	8006e82 <_printf_float+0x1a6>
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	440b      	add	r3, r1
 8006e80:	6123      	str	r3, [r4, #16]
 8006e82:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e84:	f04f 0900 	mov.w	r9, #0
 8006e88:	e7de      	b.n	8006e48 <_printf_float+0x16c>
 8006e8a:	b913      	cbnz	r3, 8006e92 <_printf_float+0x1b6>
 8006e8c:	6822      	ldr	r2, [r4, #0]
 8006e8e:	07d2      	lsls	r2, r2, #31
 8006e90:	d501      	bpl.n	8006e96 <_printf_float+0x1ba>
 8006e92:	3302      	adds	r3, #2
 8006e94:	e7f4      	b.n	8006e80 <_printf_float+0x1a4>
 8006e96:	2301      	movs	r3, #1
 8006e98:	e7f2      	b.n	8006e80 <_printf_float+0x1a4>
 8006e9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea0:	4299      	cmp	r1, r3
 8006ea2:	db05      	blt.n	8006eb0 <_printf_float+0x1d4>
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	6121      	str	r1, [r4, #16]
 8006ea8:	07d8      	lsls	r0, r3, #31
 8006eaa:	d5ea      	bpl.n	8006e82 <_printf_float+0x1a6>
 8006eac:	1c4b      	adds	r3, r1, #1
 8006eae:	e7e7      	b.n	8006e80 <_printf_float+0x1a4>
 8006eb0:	2900      	cmp	r1, #0
 8006eb2:	bfd4      	ite	le
 8006eb4:	f1c1 0202 	rsble	r2, r1, #2
 8006eb8:	2201      	movgt	r2, #1
 8006eba:	4413      	add	r3, r2
 8006ebc:	e7e0      	b.n	8006e80 <_printf_float+0x1a4>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	055a      	lsls	r2, r3, #21
 8006ec2:	d407      	bmi.n	8006ed4 <_printf_float+0x1f8>
 8006ec4:	6923      	ldr	r3, [r4, #16]
 8006ec6:	4642      	mov	r2, r8
 8006ec8:	4631      	mov	r1, r6
 8006eca:	4628      	mov	r0, r5
 8006ecc:	47b8      	blx	r7
 8006ece:	3001      	adds	r0, #1
 8006ed0:	d12c      	bne.n	8006f2c <_printf_float+0x250>
 8006ed2:	e764      	b.n	8006d9e <_printf_float+0xc2>
 8006ed4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ed8:	f240 80e0 	bls.w	800709c <_printf_float+0x3c0>
 8006edc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f7f9 fe08 	bl	8000af8 <__aeabi_dcmpeq>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d034      	beq.n	8006f56 <_printf_float+0x27a>
 8006eec:	4a37      	ldr	r2, [pc, #220]	; (8006fcc <_printf_float+0x2f0>)
 8006eee:	2301      	movs	r3, #1
 8006ef0:	4631      	mov	r1, r6
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	47b8      	blx	r7
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	f43f af51 	beq.w	8006d9e <_printf_float+0xc2>
 8006efc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f00:	429a      	cmp	r2, r3
 8006f02:	db02      	blt.n	8006f0a <_printf_float+0x22e>
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	07d8      	lsls	r0, r3, #31
 8006f08:	d510      	bpl.n	8006f2c <_printf_float+0x250>
 8006f0a:	ee18 3a10 	vmov	r3, s16
 8006f0e:	4652      	mov	r2, sl
 8006f10:	4631      	mov	r1, r6
 8006f12:	4628      	mov	r0, r5
 8006f14:	47b8      	blx	r7
 8006f16:	3001      	adds	r0, #1
 8006f18:	f43f af41 	beq.w	8006d9e <_printf_float+0xc2>
 8006f1c:	f04f 0800 	mov.w	r8, #0
 8006f20:	f104 091a 	add.w	r9, r4, #26
 8006f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f26:	3b01      	subs	r3, #1
 8006f28:	4543      	cmp	r3, r8
 8006f2a:	dc09      	bgt.n	8006f40 <_printf_float+0x264>
 8006f2c:	6823      	ldr	r3, [r4, #0]
 8006f2e:	079b      	lsls	r3, r3, #30
 8006f30:	f100 8105 	bmi.w	800713e <_printf_float+0x462>
 8006f34:	68e0      	ldr	r0, [r4, #12]
 8006f36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f38:	4298      	cmp	r0, r3
 8006f3a:	bfb8      	it	lt
 8006f3c:	4618      	movlt	r0, r3
 8006f3e:	e730      	b.n	8006da2 <_printf_float+0xc6>
 8006f40:	2301      	movs	r3, #1
 8006f42:	464a      	mov	r2, r9
 8006f44:	4631      	mov	r1, r6
 8006f46:	4628      	mov	r0, r5
 8006f48:	47b8      	blx	r7
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	f43f af27 	beq.w	8006d9e <_printf_float+0xc2>
 8006f50:	f108 0801 	add.w	r8, r8, #1
 8006f54:	e7e6      	b.n	8006f24 <_printf_float+0x248>
 8006f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	dc39      	bgt.n	8006fd0 <_printf_float+0x2f4>
 8006f5c:	4a1b      	ldr	r2, [pc, #108]	; (8006fcc <_printf_float+0x2f0>)
 8006f5e:	2301      	movs	r3, #1
 8006f60:	4631      	mov	r1, r6
 8006f62:	4628      	mov	r0, r5
 8006f64:	47b8      	blx	r7
 8006f66:	3001      	adds	r0, #1
 8006f68:	f43f af19 	beq.w	8006d9e <_printf_float+0xc2>
 8006f6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f70:	4313      	orrs	r3, r2
 8006f72:	d102      	bne.n	8006f7a <_printf_float+0x29e>
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	07d9      	lsls	r1, r3, #31
 8006f78:	d5d8      	bpl.n	8006f2c <_printf_float+0x250>
 8006f7a:	ee18 3a10 	vmov	r3, s16
 8006f7e:	4652      	mov	r2, sl
 8006f80:	4631      	mov	r1, r6
 8006f82:	4628      	mov	r0, r5
 8006f84:	47b8      	blx	r7
 8006f86:	3001      	adds	r0, #1
 8006f88:	f43f af09 	beq.w	8006d9e <_printf_float+0xc2>
 8006f8c:	f04f 0900 	mov.w	r9, #0
 8006f90:	f104 0a1a 	add.w	sl, r4, #26
 8006f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f96:	425b      	negs	r3, r3
 8006f98:	454b      	cmp	r3, r9
 8006f9a:	dc01      	bgt.n	8006fa0 <_printf_float+0x2c4>
 8006f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f9e:	e792      	b.n	8006ec6 <_printf_float+0x1ea>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	4652      	mov	r2, sl
 8006fa4:	4631      	mov	r1, r6
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	47b8      	blx	r7
 8006faa:	3001      	adds	r0, #1
 8006fac:	f43f aef7 	beq.w	8006d9e <_printf_float+0xc2>
 8006fb0:	f109 0901 	add.w	r9, r9, #1
 8006fb4:	e7ee      	b.n	8006f94 <_printf_float+0x2b8>
 8006fb6:	bf00      	nop
 8006fb8:	7fefffff 	.word	0x7fefffff
 8006fbc:	0800e884 	.word	0x0800e884
 8006fc0:	0800e888 	.word	0x0800e888
 8006fc4:	0800e890 	.word	0x0800e890
 8006fc8:	0800e88c 	.word	0x0800e88c
 8006fcc:	0800ec89 	.word	0x0800ec89
 8006fd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	bfa8      	it	ge
 8006fd8:	461a      	movge	r2, r3
 8006fda:	2a00      	cmp	r2, #0
 8006fdc:	4691      	mov	r9, r2
 8006fde:	dc37      	bgt.n	8007050 <_printf_float+0x374>
 8006fe0:	f04f 0b00 	mov.w	fp, #0
 8006fe4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fe8:	f104 021a 	add.w	r2, r4, #26
 8006fec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fee:	9305      	str	r3, [sp, #20]
 8006ff0:	eba3 0309 	sub.w	r3, r3, r9
 8006ff4:	455b      	cmp	r3, fp
 8006ff6:	dc33      	bgt.n	8007060 <_printf_float+0x384>
 8006ff8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	db3b      	blt.n	8007078 <_printf_float+0x39c>
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	07da      	lsls	r2, r3, #31
 8007004:	d438      	bmi.n	8007078 <_printf_float+0x39c>
 8007006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007008:	9a05      	ldr	r2, [sp, #20]
 800700a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800700c:	1a9a      	subs	r2, r3, r2
 800700e:	eba3 0901 	sub.w	r9, r3, r1
 8007012:	4591      	cmp	r9, r2
 8007014:	bfa8      	it	ge
 8007016:	4691      	movge	r9, r2
 8007018:	f1b9 0f00 	cmp.w	r9, #0
 800701c:	dc35      	bgt.n	800708a <_printf_float+0x3ae>
 800701e:	f04f 0800 	mov.w	r8, #0
 8007022:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007026:	f104 0a1a 	add.w	sl, r4, #26
 800702a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800702e:	1a9b      	subs	r3, r3, r2
 8007030:	eba3 0309 	sub.w	r3, r3, r9
 8007034:	4543      	cmp	r3, r8
 8007036:	f77f af79 	ble.w	8006f2c <_printf_float+0x250>
 800703a:	2301      	movs	r3, #1
 800703c:	4652      	mov	r2, sl
 800703e:	4631      	mov	r1, r6
 8007040:	4628      	mov	r0, r5
 8007042:	47b8      	blx	r7
 8007044:	3001      	adds	r0, #1
 8007046:	f43f aeaa 	beq.w	8006d9e <_printf_float+0xc2>
 800704a:	f108 0801 	add.w	r8, r8, #1
 800704e:	e7ec      	b.n	800702a <_printf_float+0x34e>
 8007050:	4613      	mov	r3, r2
 8007052:	4631      	mov	r1, r6
 8007054:	4642      	mov	r2, r8
 8007056:	4628      	mov	r0, r5
 8007058:	47b8      	blx	r7
 800705a:	3001      	adds	r0, #1
 800705c:	d1c0      	bne.n	8006fe0 <_printf_float+0x304>
 800705e:	e69e      	b.n	8006d9e <_printf_float+0xc2>
 8007060:	2301      	movs	r3, #1
 8007062:	4631      	mov	r1, r6
 8007064:	4628      	mov	r0, r5
 8007066:	9205      	str	r2, [sp, #20]
 8007068:	47b8      	blx	r7
 800706a:	3001      	adds	r0, #1
 800706c:	f43f ae97 	beq.w	8006d9e <_printf_float+0xc2>
 8007070:	9a05      	ldr	r2, [sp, #20]
 8007072:	f10b 0b01 	add.w	fp, fp, #1
 8007076:	e7b9      	b.n	8006fec <_printf_float+0x310>
 8007078:	ee18 3a10 	vmov	r3, s16
 800707c:	4652      	mov	r2, sl
 800707e:	4631      	mov	r1, r6
 8007080:	4628      	mov	r0, r5
 8007082:	47b8      	blx	r7
 8007084:	3001      	adds	r0, #1
 8007086:	d1be      	bne.n	8007006 <_printf_float+0x32a>
 8007088:	e689      	b.n	8006d9e <_printf_float+0xc2>
 800708a:	9a05      	ldr	r2, [sp, #20]
 800708c:	464b      	mov	r3, r9
 800708e:	4442      	add	r2, r8
 8007090:	4631      	mov	r1, r6
 8007092:	4628      	mov	r0, r5
 8007094:	47b8      	blx	r7
 8007096:	3001      	adds	r0, #1
 8007098:	d1c1      	bne.n	800701e <_printf_float+0x342>
 800709a:	e680      	b.n	8006d9e <_printf_float+0xc2>
 800709c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800709e:	2a01      	cmp	r2, #1
 80070a0:	dc01      	bgt.n	80070a6 <_printf_float+0x3ca>
 80070a2:	07db      	lsls	r3, r3, #31
 80070a4:	d538      	bpl.n	8007118 <_printf_float+0x43c>
 80070a6:	2301      	movs	r3, #1
 80070a8:	4642      	mov	r2, r8
 80070aa:	4631      	mov	r1, r6
 80070ac:	4628      	mov	r0, r5
 80070ae:	47b8      	blx	r7
 80070b0:	3001      	adds	r0, #1
 80070b2:	f43f ae74 	beq.w	8006d9e <_printf_float+0xc2>
 80070b6:	ee18 3a10 	vmov	r3, s16
 80070ba:	4652      	mov	r2, sl
 80070bc:	4631      	mov	r1, r6
 80070be:	4628      	mov	r0, r5
 80070c0:	47b8      	blx	r7
 80070c2:	3001      	adds	r0, #1
 80070c4:	f43f ae6b 	beq.w	8006d9e <_printf_float+0xc2>
 80070c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070cc:	2200      	movs	r2, #0
 80070ce:	2300      	movs	r3, #0
 80070d0:	f7f9 fd12 	bl	8000af8 <__aeabi_dcmpeq>
 80070d4:	b9d8      	cbnz	r0, 800710e <_printf_float+0x432>
 80070d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070d8:	f108 0201 	add.w	r2, r8, #1
 80070dc:	3b01      	subs	r3, #1
 80070de:	4631      	mov	r1, r6
 80070e0:	4628      	mov	r0, r5
 80070e2:	47b8      	blx	r7
 80070e4:	3001      	adds	r0, #1
 80070e6:	d10e      	bne.n	8007106 <_printf_float+0x42a>
 80070e8:	e659      	b.n	8006d9e <_printf_float+0xc2>
 80070ea:	2301      	movs	r3, #1
 80070ec:	4652      	mov	r2, sl
 80070ee:	4631      	mov	r1, r6
 80070f0:	4628      	mov	r0, r5
 80070f2:	47b8      	blx	r7
 80070f4:	3001      	adds	r0, #1
 80070f6:	f43f ae52 	beq.w	8006d9e <_printf_float+0xc2>
 80070fa:	f108 0801 	add.w	r8, r8, #1
 80070fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007100:	3b01      	subs	r3, #1
 8007102:	4543      	cmp	r3, r8
 8007104:	dcf1      	bgt.n	80070ea <_printf_float+0x40e>
 8007106:	464b      	mov	r3, r9
 8007108:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800710c:	e6dc      	b.n	8006ec8 <_printf_float+0x1ec>
 800710e:	f04f 0800 	mov.w	r8, #0
 8007112:	f104 0a1a 	add.w	sl, r4, #26
 8007116:	e7f2      	b.n	80070fe <_printf_float+0x422>
 8007118:	2301      	movs	r3, #1
 800711a:	4642      	mov	r2, r8
 800711c:	e7df      	b.n	80070de <_printf_float+0x402>
 800711e:	2301      	movs	r3, #1
 8007120:	464a      	mov	r2, r9
 8007122:	4631      	mov	r1, r6
 8007124:	4628      	mov	r0, r5
 8007126:	47b8      	blx	r7
 8007128:	3001      	adds	r0, #1
 800712a:	f43f ae38 	beq.w	8006d9e <_printf_float+0xc2>
 800712e:	f108 0801 	add.w	r8, r8, #1
 8007132:	68e3      	ldr	r3, [r4, #12]
 8007134:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007136:	1a5b      	subs	r3, r3, r1
 8007138:	4543      	cmp	r3, r8
 800713a:	dcf0      	bgt.n	800711e <_printf_float+0x442>
 800713c:	e6fa      	b.n	8006f34 <_printf_float+0x258>
 800713e:	f04f 0800 	mov.w	r8, #0
 8007142:	f104 0919 	add.w	r9, r4, #25
 8007146:	e7f4      	b.n	8007132 <_printf_float+0x456>

08007148 <_printf_common>:
 8007148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800714c:	4616      	mov	r6, r2
 800714e:	4699      	mov	r9, r3
 8007150:	688a      	ldr	r2, [r1, #8]
 8007152:	690b      	ldr	r3, [r1, #16]
 8007154:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007158:	4293      	cmp	r3, r2
 800715a:	bfb8      	it	lt
 800715c:	4613      	movlt	r3, r2
 800715e:	6033      	str	r3, [r6, #0]
 8007160:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007164:	4607      	mov	r7, r0
 8007166:	460c      	mov	r4, r1
 8007168:	b10a      	cbz	r2, 800716e <_printf_common+0x26>
 800716a:	3301      	adds	r3, #1
 800716c:	6033      	str	r3, [r6, #0]
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	0699      	lsls	r1, r3, #26
 8007172:	bf42      	ittt	mi
 8007174:	6833      	ldrmi	r3, [r6, #0]
 8007176:	3302      	addmi	r3, #2
 8007178:	6033      	strmi	r3, [r6, #0]
 800717a:	6825      	ldr	r5, [r4, #0]
 800717c:	f015 0506 	ands.w	r5, r5, #6
 8007180:	d106      	bne.n	8007190 <_printf_common+0x48>
 8007182:	f104 0a19 	add.w	sl, r4, #25
 8007186:	68e3      	ldr	r3, [r4, #12]
 8007188:	6832      	ldr	r2, [r6, #0]
 800718a:	1a9b      	subs	r3, r3, r2
 800718c:	42ab      	cmp	r3, r5
 800718e:	dc26      	bgt.n	80071de <_printf_common+0x96>
 8007190:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007194:	1e13      	subs	r3, r2, #0
 8007196:	6822      	ldr	r2, [r4, #0]
 8007198:	bf18      	it	ne
 800719a:	2301      	movne	r3, #1
 800719c:	0692      	lsls	r2, r2, #26
 800719e:	d42b      	bmi.n	80071f8 <_printf_common+0xb0>
 80071a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071a4:	4649      	mov	r1, r9
 80071a6:	4638      	mov	r0, r7
 80071a8:	47c0      	blx	r8
 80071aa:	3001      	adds	r0, #1
 80071ac:	d01e      	beq.n	80071ec <_printf_common+0xa4>
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	68e5      	ldr	r5, [r4, #12]
 80071b2:	6832      	ldr	r2, [r6, #0]
 80071b4:	f003 0306 	and.w	r3, r3, #6
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	bf08      	it	eq
 80071bc:	1aad      	subeq	r5, r5, r2
 80071be:	68a3      	ldr	r3, [r4, #8]
 80071c0:	6922      	ldr	r2, [r4, #16]
 80071c2:	bf0c      	ite	eq
 80071c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071c8:	2500      	movne	r5, #0
 80071ca:	4293      	cmp	r3, r2
 80071cc:	bfc4      	itt	gt
 80071ce:	1a9b      	subgt	r3, r3, r2
 80071d0:	18ed      	addgt	r5, r5, r3
 80071d2:	2600      	movs	r6, #0
 80071d4:	341a      	adds	r4, #26
 80071d6:	42b5      	cmp	r5, r6
 80071d8:	d11a      	bne.n	8007210 <_printf_common+0xc8>
 80071da:	2000      	movs	r0, #0
 80071dc:	e008      	b.n	80071f0 <_printf_common+0xa8>
 80071de:	2301      	movs	r3, #1
 80071e0:	4652      	mov	r2, sl
 80071e2:	4649      	mov	r1, r9
 80071e4:	4638      	mov	r0, r7
 80071e6:	47c0      	blx	r8
 80071e8:	3001      	adds	r0, #1
 80071ea:	d103      	bne.n	80071f4 <_printf_common+0xac>
 80071ec:	f04f 30ff 	mov.w	r0, #4294967295
 80071f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f4:	3501      	adds	r5, #1
 80071f6:	e7c6      	b.n	8007186 <_printf_common+0x3e>
 80071f8:	18e1      	adds	r1, r4, r3
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	2030      	movs	r0, #48	; 0x30
 80071fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007202:	4422      	add	r2, r4
 8007204:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007208:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800720c:	3302      	adds	r3, #2
 800720e:	e7c7      	b.n	80071a0 <_printf_common+0x58>
 8007210:	2301      	movs	r3, #1
 8007212:	4622      	mov	r2, r4
 8007214:	4649      	mov	r1, r9
 8007216:	4638      	mov	r0, r7
 8007218:	47c0      	blx	r8
 800721a:	3001      	adds	r0, #1
 800721c:	d0e6      	beq.n	80071ec <_printf_common+0xa4>
 800721e:	3601      	adds	r6, #1
 8007220:	e7d9      	b.n	80071d6 <_printf_common+0x8e>
	...

08007224 <_printf_i>:
 8007224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007228:	7e0f      	ldrb	r7, [r1, #24]
 800722a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800722c:	2f78      	cmp	r7, #120	; 0x78
 800722e:	4691      	mov	r9, r2
 8007230:	4680      	mov	r8, r0
 8007232:	460c      	mov	r4, r1
 8007234:	469a      	mov	sl, r3
 8007236:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800723a:	d807      	bhi.n	800724c <_printf_i+0x28>
 800723c:	2f62      	cmp	r7, #98	; 0x62
 800723e:	d80a      	bhi.n	8007256 <_printf_i+0x32>
 8007240:	2f00      	cmp	r7, #0
 8007242:	f000 80d8 	beq.w	80073f6 <_printf_i+0x1d2>
 8007246:	2f58      	cmp	r7, #88	; 0x58
 8007248:	f000 80a3 	beq.w	8007392 <_printf_i+0x16e>
 800724c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007250:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007254:	e03a      	b.n	80072cc <_printf_i+0xa8>
 8007256:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800725a:	2b15      	cmp	r3, #21
 800725c:	d8f6      	bhi.n	800724c <_printf_i+0x28>
 800725e:	a101      	add	r1, pc, #4	; (adr r1, 8007264 <_printf_i+0x40>)
 8007260:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007264:	080072bd 	.word	0x080072bd
 8007268:	080072d1 	.word	0x080072d1
 800726c:	0800724d 	.word	0x0800724d
 8007270:	0800724d 	.word	0x0800724d
 8007274:	0800724d 	.word	0x0800724d
 8007278:	0800724d 	.word	0x0800724d
 800727c:	080072d1 	.word	0x080072d1
 8007280:	0800724d 	.word	0x0800724d
 8007284:	0800724d 	.word	0x0800724d
 8007288:	0800724d 	.word	0x0800724d
 800728c:	0800724d 	.word	0x0800724d
 8007290:	080073dd 	.word	0x080073dd
 8007294:	08007301 	.word	0x08007301
 8007298:	080073bf 	.word	0x080073bf
 800729c:	0800724d 	.word	0x0800724d
 80072a0:	0800724d 	.word	0x0800724d
 80072a4:	080073ff 	.word	0x080073ff
 80072a8:	0800724d 	.word	0x0800724d
 80072ac:	08007301 	.word	0x08007301
 80072b0:	0800724d 	.word	0x0800724d
 80072b4:	0800724d 	.word	0x0800724d
 80072b8:	080073c7 	.word	0x080073c7
 80072bc:	682b      	ldr	r3, [r5, #0]
 80072be:	1d1a      	adds	r2, r3, #4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	602a      	str	r2, [r5, #0]
 80072c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072cc:	2301      	movs	r3, #1
 80072ce:	e0a3      	b.n	8007418 <_printf_i+0x1f4>
 80072d0:	6820      	ldr	r0, [r4, #0]
 80072d2:	6829      	ldr	r1, [r5, #0]
 80072d4:	0606      	lsls	r6, r0, #24
 80072d6:	f101 0304 	add.w	r3, r1, #4
 80072da:	d50a      	bpl.n	80072f2 <_printf_i+0xce>
 80072dc:	680e      	ldr	r6, [r1, #0]
 80072de:	602b      	str	r3, [r5, #0]
 80072e0:	2e00      	cmp	r6, #0
 80072e2:	da03      	bge.n	80072ec <_printf_i+0xc8>
 80072e4:	232d      	movs	r3, #45	; 0x2d
 80072e6:	4276      	negs	r6, r6
 80072e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072ec:	485e      	ldr	r0, [pc, #376]	; (8007468 <_printf_i+0x244>)
 80072ee:	230a      	movs	r3, #10
 80072f0:	e019      	b.n	8007326 <_printf_i+0x102>
 80072f2:	680e      	ldr	r6, [r1, #0]
 80072f4:	602b      	str	r3, [r5, #0]
 80072f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072fa:	bf18      	it	ne
 80072fc:	b236      	sxthne	r6, r6
 80072fe:	e7ef      	b.n	80072e0 <_printf_i+0xbc>
 8007300:	682b      	ldr	r3, [r5, #0]
 8007302:	6820      	ldr	r0, [r4, #0]
 8007304:	1d19      	adds	r1, r3, #4
 8007306:	6029      	str	r1, [r5, #0]
 8007308:	0601      	lsls	r1, r0, #24
 800730a:	d501      	bpl.n	8007310 <_printf_i+0xec>
 800730c:	681e      	ldr	r6, [r3, #0]
 800730e:	e002      	b.n	8007316 <_printf_i+0xf2>
 8007310:	0646      	lsls	r6, r0, #25
 8007312:	d5fb      	bpl.n	800730c <_printf_i+0xe8>
 8007314:	881e      	ldrh	r6, [r3, #0]
 8007316:	4854      	ldr	r0, [pc, #336]	; (8007468 <_printf_i+0x244>)
 8007318:	2f6f      	cmp	r7, #111	; 0x6f
 800731a:	bf0c      	ite	eq
 800731c:	2308      	moveq	r3, #8
 800731e:	230a      	movne	r3, #10
 8007320:	2100      	movs	r1, #0
 8007322:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007326:	6865      	ldr	r5, [r4, #4]
 8007328:	60a5      	str	r5, [r4, #8]
 800732a:	2d00      	cmp	r5, #0
 800732c:	bfa2      	ittt	ge
 800732e:	6821      	ldrge	r1, [r4, #0]
 8007330:	f021 0104 	bicge.w	r1, r1, #4
 8007334:	6021      	strge	r1, [r4, #0]
 8007336:	b90e      	cbnz	r6, 800733c <_printf_i+0x118>
 8007338:	2d00      	cmp	r5, #0
 800733a:	d04d      	beq.n	80073d8 <_printf_i+0x1b4>
 800733c:	4615      	mov	r5, r2
 800733e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007342:	fb03 6711 	mls	r7, r3, r1, r6
 8007346:	5dc7      	ldrb	r7, [r0, r7]
 8007348:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800734c:	4637      	mov	r7, r6
 800734e:	42bb      	cmp	r3, r7
 8007350:	460e      	mov	r6, r1
 8007352:	d9f4      	bls.n	800733e <_printf_i+0x11a>
 8007354:	2b08      	cmp	r3, #8
 8007356:	d10b      	bne.n	8007370 <_printf_i+0x14c>
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	07de      	lsls	r6, r3, #31
 800735c:	d508      	bpl.n	8007370 <_printf_i+0x14c>
 800735e:	6923      	ldr	r3, [r4, #16]
 8007360:	6861      	ldr	r1, [r4, #4]
 8007362:	4299      	cmp	r1, r3
 8007364:	bfde      	ittt	le
 8007366:	2330      	movle	r3, #48	; 0x30
 8007368:	f805 3c01 	strble.w	r3, [r5, #-1]
 800736c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007370:	1b52      	subs	r2, r2, r5
 8007372:	6122      	str	r2, [r4, #16]
 8007374:	f8cd a000 	str.w	sl, [sp]
 8007378:	464b      	mov	r3, r9
 800737a:	aa03      	add	r2, sp, #12
 800737c:	4621      	mov	r1, r4
 800737e:	4640      	mov	r0, r8
 8007380:	f7ff fee2 	bl	8007148 <_printf_common>
 8007384:	3001      	adds	r0, #1
 8007386:	d14c      	bne.n	8007422 <_printf_i+0x1fe>
 8007388:	f04f 30ff 	mov.w	r0, #4294967295
 800738c:	b004      	add	sp, #16
 800738e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007392:	4835      	ldr	r0, [pc, #212]	; (8007468 <_printf_i+0x244>)
 8007394:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007398:	6829      	ldr	r1, [r5, #0]
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	f851 6b04 	ldr.w	r6, [r1], #4
 80073a0:	6029      	str	r1, [r5, #0]
 80073a2:	061d      	lsls	r5, r3, #24
 80073a4:	d514      	bpl.n	80073d0 <_printf_i+0x1ac>
 80073a6:	07df      	lsls	r7, r3, #31
 80073a8:	bf44      	itt	mi
 80073aa:	f043 0320 	orrmi.w	r3, r3, #32
 80073ae:	6023      	strmi	r3, [r4, #0]
 80073b0:	b91e      	cbnz	r6, 80073ba <_printf_i+0x196>
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	f023 0320 	bic.w	r3, r3, #32
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	2310      	movs	r3, #16
 80073bc:	e7b0      	b.n	8007320 <_printf_i+0xfc>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	f043 0320 	orr.w	r3, r3, #32
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	2378      	movs	r3, #120	; 0x78
 80073c8:	4828      	ldr	r0, [pc, #160]	; (800746c <_printf_i+0x248>)
 80073ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073ce:	e7e3      	b.n	8007398 <_printf_i+0x174>
 80073d0:	0659      	lsls	r1, r3, #25
 80073d2:	bf48      	it	mi
 80073d4:	b2b6      	uxthmi	r6, r6
 80073d6:	e7e6      	b.n	80073a6 <_printf_i+0x182>
 80073d8:	4615      	mov	r5, r2
 80073da:	e7bb      	b.n	8007354 <_printf_i+0x130>
 80073dc:	682b      	ldr	r3, [r5, #0]
 80073de:	6826      	ldr	r6, [r4, #0]
 80073e0:	6961      	ldr	r1, [r4, #20]
 80073e2:	1d18      	adds	r0, r3, #4
 80073e4:	6028      	str	r0, [r5, #0]
 80073e6:	0635      	lsls	r5, r6, #24
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	d501      	bpl.n	80073f0 <_printf_i+0x1cc>
 80073ec:	6019      	str	r1, [r3, #0]
 80073ee:	e002      	b.n	80073f6 <_printf_i+0x1d2>
 80073f0:	0670      	lsls	r0, r6, #25
 80073f2:	d5fb      	bpl.n	80073ec <_printf_i+0x1c8>
 80073f4:	8019      	strh	r1, [r3, #0]
 80073f6:	2300      	movs	r3, #0
 80073f8:	6123      	str	r3, [r4, #16]
 80073fa:	4615      	mov	r5, r2
 80073fc:	e7ba      	b.n	8007374 <_printf_i+0x150>
 80073fe:	682b      	ldr	r3, [r5, #0]
 8007400:	1d1a      	adds	r2, r3, #4
 8007402:	602a      	str	r2, [r5, #0]
 8007404:	681d      	ldr	r5, [r3, #0]
 8007406:	6862      	ldr	r2, [r4, #4]
 8007408:	2100      	movs	r1, #0
 800740a:	4628      	mov	r0, r5
 800740c:	f7f8 ff00 	bl	8000210 <memchr>
 8007410:	b108      	cbz	r0, 8007416 <_printf_i+0x1f2>
 8007412:	1b40      	subs	r0, r0, r5
 8007414:	6060      	str	r0, [r4, #4]
 8007416:	6863      	ldr	r3, [r4, #4]
 8007418:	6123      	str	r3, [r4, #16]
 800741a:	2300      	movs	r3, #0
 800741c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007420:	e7a8      	b.n	8007374 <_printf_i+0x150>
 8007422:	6923      	ldr	r3, [r4, #16]
 8007424:	462a      	mov	r2, r5
 8007426:	4649      	mov	r1, r9
 8007428:	4640      	mov	r0, r8
 800742a:	47d0      	blx	sl
 800742c:	3001      	adds	r0, #1
 800742e:	d0ab      	beq.n	8007388 <_printf_i+0x164>
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	079b      	lsls	r3, r3, #30
 8007434:	d413      	bmi.n	800745e <_printf_i+0x23a>
 8007436:	68e0      	ldr	r0, [r4, #12]
 8007438:	9b03      	ldr	r3, [sp, #12]
 800743a:	4298      	cmp	r0, r3
 800743c:	bfb8      	it	lt
 800743e:	4618      	movlt	r0, r3
 8007440:	e7a4      	b.n	800738c <_printf_i+0x168>
 8007442:	2301      	movs	r3, #1
 8007444:	4632      	mov	r2, r6
 8007446:	4649      	mov	r1, r9
 8007448:	4640      	mov	r0, r8
 800744a:	47d0      	blx	sl
 800744c:	3001      	adds	r0, #1
 800744e:	d09b      	beq.n	8007388 <_printf_i+0x164>
 8007450:	3501      	adds	r5, #1
 8007452:	68e3      	ldr	r3, [r4, #12]
 8007454:	9903      	ldr	r1, [sp, #12]
 8007456:	1a5b      	subs	r3, r3, r1
 8007458:	42ab      	cmp	r3, r5
 800745a:	dcf2      	bgt.n	8007442 <_printf_i+0x21e>
 800745c:	e7eb      	b.n	8007436 <_printf_i+0x212>
 800745e:	2500      	movs	r5, #0
 8007460:	f104 0619 	add.w	r6, r4, #25
 8007464:	e7f5      	b.n	8007452 <_printf_i+0x22e>
 8007466:	bf00      	nop
 8007468:	0800e894 	.word	0x0800e894
 800746c:	0800e8a5 	.word	0x0800e8a5

08007470 <_scanf_float>:
 8007470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007474:	b087      	sub	sp, #28
 8007476:	4617      	mov	r7, r2
 8007478:	9303      	str	r3, [sp, #12]
 800747a:	688b      	ldr	r3, [r1, #8]
 800747c:	1e5a      	subs	r2, r3, #1
 800747e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007482:	bf83      	ittte	hi
 8007484:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007488:	195b      	addhi	r3, r3, r5
 800748a:	9302      	strhi	r3, [sp, #8]
 800748c:	2300      	movls	r3, #0
 800748e:	bf86      	itte	hi
 8007490:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007494:	608b      	strhi	r3, [r1, #8]
 8007496:	9302      	strls	r3, [sp, #8]
 8007498:	680b      	ldr	r3, [r1, #0]
 800749a:	468b      	mov	fp, r1
 800749c:	2500      	movs	r5, #0
 800749e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80074a2:	f84b 3b1c 	str.w	r3, [fp], #28
 80074a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80074aa:	4680      	mov	r8, r0
 80074ac:	460c      	mov	r4, r1
 80074ae:	465e      	mov	r6, fp
 80074b0:	46aa      	mov	sl, r5
 80074b2:	46a9      	mov	r9, r5
 80074b4:	9501      	str	r5, [sp, #4]
 80074b6:	68a2      	ldr	r2, [r4, #8]
 80074b8:	b152      	cbz	r2, 80074d0 <_scanf_float+0x60>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b4e      	cmp	r3, #78	; 0x4e
 80074c0:	d864      	bhi.n	800758c <_scanf_float+0x11c>
 80074c2:	2b40      	cmp	r3, #64	; 0x40
 80074c4:	d83c      	bhi.n	8007540 <_scanf_float+0xd0>
 80074c6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80074ca:	b2c8      	uxtb	r0, r1
 80074cc:	280e      	cmp	r0, #14
 80074ce:	d93a      	bls.n	8007546 <_scanf_float+0xd6>
 80074d0:	f1b9 0f00 	cmp.w	r9, #0
 80074d4:	d003      	beq.n	80074de <_scanf_float+0x6e>
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074e2:	f1ba 0f01 	cmp.w	sl, #1
 80074e6:	f200 8113 	bhi.w	8007710 <_scanf_float+0x2a0>
 80074ea:	455e      	cmp	r6, fp
 80074ec:	f200 8105 	bhi.w	80076fa <_scanf_float+0x28a>
 80074f0:	2501      	movs	r5, #1
 80074f2:	4628      	mov	r0, r5
 80074f4:	b007      	add	sp, #28
 80074f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074fa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80074fe:	2a0d      	cmp	r2, #13
 8007500:	d8e6      	bhi.n	80074d0 <_scanf_float+0x60>
 8007502:	a101      	add	r1, pc, #4	; (adr r1, 8007508 <_scanf_float+0x98>)
 8007504:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007508:	08007647 	.word	0x08007647
 800750c:	080074d1 	.word	0x080074d1
 8007510:	080074d1 	.word	0x080074d1
 8007514:	080074d1 	.word	0x080074d1
 8007518:	080076a7 	.word	0x080076a7
 800751c:	0800767f 	.word	0x0800767f
 8007520:	080074d1 	.word	0x080074d1
 8007524:	080074d1 	.word	0x080074d1
 8007528:	08007655 	.word	0x08007655
 800752c:	080074d1 	.word	0x080074d1
 8007530:	080074d1 	.word	0x080074d1
 8007534:	080074d1 	.word	0x080074d1
 8007538:	080074d1 	.word	0x080074d1
 800753c:	0800760d 	.word	0x0800760d
 8007540:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007544:	e7db      	b.n	80074fe <_scanf_float+0x8e>
 8007546:	290e      	cmp	r1, #14
 8007548:	d8c2      	bhi.n	80074d0 <_scanf_float+0x60>
 800754a:	a001      	add	r0, pc, #4	; (adr r0, 8007550 <_scanf_float+0xe0>)
 800754c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007550:	080075ff 	.word	0x080075ff
 8007554:	080074d1 	.word	0x080074d1
 8007558:	080075ff 	.word	0x080075ff
 800755c:	08007693 	.word	0x08007693
 8007560:	080074d1 	.word	0x080074d1
 8007564:	080075ad 	.word	0x080075ad
 8007568:	080075e9 	.word	0x080075e9
 800756c:	080075e9 	.word	0x080075e9
 8007570:	080075e9 	.word	0x080075e9
 8007574:	080075e9 	.word	0x080075e9
 8007578:	080075e9 	.word	0x080075e9
 800757c:	080075e9 	.word	0x080075e9
 8007580:	080075e9 	.word	0x080075e9
 8007584:	080075e9 	.word	0x080075e9
 8007588:	080075e9 	.word	0x080075e9
 800758c:	2b6e      	cmp	r3, #110	; 0x6e
 800758e:	d809      	bhi.n	80075a4 <_scanf_float+0x134>
 8007590:	2b60      	cmp	r3, #96	; 0x60
 8007592:	d8b2      	bhi.n	80074fa <_scanf_float+0x8a>
 8007594:	2b54      	cmp	r3, #84	; 0x54
 8007596:	d077      	beq.n	8007688 <_scanf_float+0x218>
 8007598:	2b59      	cmp	r3, #89	; 0x59
 800759a:	d199      	bne.n	80074d0 <_scanf_float+0x60>
 800759c:	2d07      	cmp	r5, #7
 800759e:	d197      	bne.n	80074d0 <_scanf_float+0x60>
 80075a0:	2508      	movs	r5, #8
 80075a2:	e029      	b.n	80075f8 <_scanf_float+0x188>
 80075a4:	2b74      	cmp	r3, #116	; 0x74
 80075a6:	d06f      	beq.n	8007688 <_scanf_float+0x218>
 80075a8:	2b79      	cmp	r3, #121	; 0x79
 80075aa:	e7f6      	b.n	800759a <_scanf_float+0x12a>
 80075ac:	6821      	ldr	r1, [r4, #0]
 80075ae:	05c8      	lsls	r0, r1, #23
 80075b0:	d51a      	bpl.n	80075e8 <_scanf_float+0x178>
 80075b2:	9b02      	ldr	r3, [sp, #8]
 80075b4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80075b8:	6021      	str	r1, [r4, #0]
 80075ba:	f109 0901 	add.w	r9, r9, #1
 80075be:	b11b      	cbz	r3, 80075c8 <_scanf_float+0x158>
 80075c0:	3b01      	subs	r3, #1
 80075c2:	3201      	adds	r2, #1
 80075c4:	9302      	str	r3, [sp, #8]
 80075c6:	60a2      	str	r2, [r4, #8]
 80075c8:	68a3      	ldr	r3, [r4, #8]
 80075ca:	3b01      	subs	r3, #1
 80075cc:	60a3      	str	r3, [r4, #8]
 80075ce:	6923      	ldr	r3, [r4, #16]
 80075d0:	3301      	adds	r3, #1
 80075d2:	6123      	str	r3, [r4, #16]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	2b00      	cmp	r3, #0
 80075da:	607b      	str	r3, [r7, #4]
 80075dc:	f340 8084 	ble.w	80076e8 <_scanf_float+0x278>
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	3301      	adds	r3, #1
 80075e4:	603b      	str	r3, [r7, #0]
 80075e6:	e766      	b.n	80074b6 <_scanf_float+0x46>
 80075e8:	eb1a 0f05 	cmn.w	sl, r5
 80075ec:	f47f af70 	bne.w	80074d0 <_scanf_float+0x60>
 80075f0:	6822      	ldr	r2, [r4, #0]
 80075f2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80075f6:	6022      	str	r2, [r4, #0]
 80075f8:	f806 3b01 	strb.w	r3, [r6], #1
 80075fc:	e7e4      	b.n	80075c8 <_scanf_float+0x158>
 80075fe:	6822      	ldr	r2, [r4, #0]
 8007600:	0610      	lsls	r0, r2, #24
 8007602:	f57f af65 	bpl.w	80074d0 <_scanf_float+0x60>
 8007606:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800760a:	e7f4      	b.n	80075f6 <_scanf_float+0x186>
 800760c:	f1ba 0f00 	cmp.w	sl, #0
 8007610:	d10e      	bne.n	8007630 <_scanf_float+0x1c0>
 8007612:	f1b9 0f00 	cmp.w	r9, #0
 8007616:	d10e      	bne.n	8007636 <_scanf_float+0x1c6>
 8007618:	6822      	ldr	r2, [r4, #0]
 800761a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800761e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007622:	d108      	bne.n	8007636 <_scanf_float+0x1c6>
 8007624:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007628:	6022      	str	r2, [r4, #0]
 800762a:	f04f 0a01 	mov.w	sl, #1
 800762e:	e7e3      	b.n	80075f8 <_scanf_float+0x188>
 8007630:	f1ba 0f02 	cmp.w	sl, #2
 8007634:	d055      	beq.n	80076e2 <_scanf_float+0x272>
 8007636:	2d01      	cmp	r5, #1
 8007638:	d002      	beq.n	8007640 <_scanf_float+0x1d0>
 800763a:	2d04      	cmp	r5, #4
 800763c:	f47f af48 	bne.w	80074d0 <_scanf_float+0x60>
 8007640:	3501      	adds	r5, #1
 8007642:	b2ed      	uxtb	r5, r5
 8007644:	e7d8      	b.n	80075f8 <_scanf_float+0x188>
 8007646:	f1ba 0f01 	cmp.w	sl, #1
 800764a:	f47f af41 	bne.w	80074d0 <_scanf_float+0x60>
 800764e:	f04f 0a02 	mov.w	sl, #2
 8007652:	e7d1      	b.n	80075f8 <_scanf_float+0x188>
 8007654:	b97d      	cbnz	r5, 8007676 <_scanf_float+0x206>
 8007656:	f1b9 0f00 	cmp.w	r9, #0
 800765a:	f47f af3c 	bne.w	80074d6 <_scanf_float+0x66>
 800765e:	6822      	ldr	r2, [r4, #0]
 8007660:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007664:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007668:	f47f af39 	bne.w	80074de <_scanf_float+0x6e>
 800766c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007670:	6022      	str	r2, [r4, #0]
 8007672:	2501      	movs	r5, #1
 8007674:	e7c0      	b.n	80075f8 <_scanf_float+0x188>
 8007676:	2d03      	cmp	r5, #3
 8007678:	d0e2      	beq.n	8007640 <_scanf_float+0x1d0>
 800767a:	2d05      	cmp	r5, #5
 800767c:	e7de      	b.n	800763c <_scanf_float+0x1cc>
 800767e:	2d02      	cmp	r5, #2
 8007680:	f47f af26 	bne.w	80074d0 <_scanf_float+0x60>
 8007684:	2503      	movs	r5, #3
 8007686:	e7b7      	b.n	80075f8 <_scanf_float+0x188>
 8007688:	2d06      	cmp	r5, #6
 800768a:	f47f af21 	bne.w	80074d0 <_scanf_float+0x60>
 800768e:	2507      	movs	r5, #7
 8007690:	e7b2      	b.n	80075f8 <_scanf_float+0x188>
 8007692:	6822      	ldr	r2, [r4, #0]
 8007694:	0591      	lsls	r1, r2, #22
 8007696:	f57f af1b 	bpl.w	80074d0 <_scanf_float+0x60>
 800769a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800769e:	6022      	str	r2, [r4, #0]
 80076a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80076a4:	e7a8      	b.n	80075f8 <_scanf_float+0x188>
 80076a6:	6822      	ldr	r2, [r4, #0]
 80076a8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80076ac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80076b0:	d006      	beq.n	80076c0 <_scanf_float+0x250>
 80076b2:	0550      	lsls	r0, r2, #21
 80076b4:	f57f af0c 	bpl.w	80074d0 <_scanf_float+0x60>
 80076b8:	f1b9 0f00 	cmp.w	r9, #0
 80076bc:	f43f af0f 	beq.w	80074de <_scanf_float+0x6e>
 80076c0:	0591      	lsls	r1, r2, #22
 80076c2:	bf58      	it	pl
 80076c4:	9901      	ldrpl	r1, [sp, #4]
 80076c6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80076ca:	bf58      	it	pl
 80076cc:	eba9 0101 	subpl.w	r1, r9, r1
 80076d0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80076d4:	bf58      	it	pl
 80076d6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80076da:	6022      	str	r2, [r4, #0]
 80076dc:	f04f 0900 	mov.w	r9, #0
 80076e0:	e78a      	b.n	80075f8 <_scanf_float+0x188>
 80076e2:	f04f 0a03 	mov.w	sl, #3
 80076e6:	e787      	b.n	80075f8 <_scanf_float+0x188>
 80076e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80076ec:	4639      	mov	r1, r7
 80076ee:	4640      	mov	r0, r8
 80076f0:	4798      	blx	r3
 80076f2:	2800      	cmp	r0, #0
 80076f4:	f43f aedf 	beq.w	80074b6 <_scanf_float+0x46>
 80076f8:	e6ea      	b.n	80074d0 <_scanf_float+0x60>
 80076fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007702:	463a      	mov	r2, r7
 8007704:	4640      	mov	r0, r8
 8007706:	4798      	blx	r3
 8007708:	6923      	ldr	r3, [r4, #16]
 800770a:	3b01      	subs	r3, #1
 800770c:	6123      	str	r3, [r4, #16]
 800770e:	e6ec      	b.n	80074ea <_scanf_float+0x7a>
 8007710:	1e6b      	subs	r3, r5, #1
 8007712:	2b06      	cmp	r3, #6
 8007714:	d825      	bhi.n	8007762 <_scanf_float+0x2f2>
 8007716:	2d02      	cmp	r5, #2
 8007718:	d836      	bhi.n	8007788 <_scanf_float+0x318>
 800771a:	455e      	cmp	r6, fp
 800771c:	f67f aee8 	bls.w	80074f0 <_scanf_float+0x80>
 8007720:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007724:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007728:	463a      	mov	r2, r7
 800772a:	4640      	mov	r0, r8
 800772c:	4798      	blx	r3
 800772e:	6923      	ldr	r3, [r4, #16]
 8007730:	3b01      	subs	r3, #1
 8007732:	6123      	str	r3, [r4, #16]
 8007734:	e7f1      	b.n	800771a <_scanf_float+0x2aa>
 8007736:	9802      	ldr	r0, [sp, #8]
 8007738:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800773c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007740:	9002      	str	r0, [sp, #8]
 8007742:	463a      	mov	r2, r7
 8007744:	4640      	mov	r0, r8
 8007746:	4798      	blx	r3
 8007748:	6923      	ldr	r3, [r4, #16]
 800774a:	3b01      	subs	r3, #1
 800774c:	6123      	str	r3, [r4, #16]
 800774e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007752:	fa5f fa8a 	uxtb.w	sl, sl
 8007756:	f1ba 0f02 	cmp.w	sl, #2
 800775a:	d1ec      	bne.n	8007736 <_scanf_float+0x2c6>
 800775c:	3d03      	subs	r5, #3
 800775e:	b2ed      	uxtb	r5, r5
 8007760:	1b76      	subs	r6, r6, r5
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	05da      	lsls	r2, r3, #23
 8007766:	d52f      	bpl.n	80077c8 <_scanf_float+0x358>
 8007768:	055b      	lsls	r3, r3, #21
 800776a:	d510      	bpl.n	800778e <_scanf_float+0x31e>
 800776c:	455e      	cmp	r6, fp
 800776e:	f67f aebf 	bls.w	80074f0 <_scanf_float+0x80>
 8007772:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007776:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800777a:	463a      	mov	r2, r7
 800777c:	4640      	mov	r0, r8
 800777e:	4798      	blx	r3
 8007780:	6923      	ldr	r3, [r4, #16]
 8007782:	3b01      	subs	r3, #1
 8007784:	6123      	str	r3, [r4, #16]
 8007786:	e7f1      	b.n	800776c <_scanf_float+0x2fc>
 8007788:	46aa      	mov	sl, r5
 800778a:	9602      	str	r6, [sp, #8]
 800778c:	e7df      	b.n	800774e <_scanf_float+0x2de>
 800778e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007792:	6923      	ldr	r3, [r4, #16]
 8007794:	2965      	cmp	r1, #101	; 0x65
 8007796:	f103 33ff 	add.w	r3, r3, #4294967295
 800779a:	f106 35ff 	add.w	r5, r6, #4294967295
 800779e:	6123      	str	r3, [r4, #16]
 80077a0:	d00c      	beq.n	80077bc <_scanf_float+0x34c>
 80077a2:	2945      	cmp	r1, #69	; 0x45
 80077a4:	d00a      	beq.n	80077bc <_scanf_float+0x34c>
 80077a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077aa:	463a      	mov	r2, r7
 80077ac:	4640      	mov	r0, r8
 80077ae:	4798      	blx	r3
 80077b0:	6923      	ldr	r3, [r4, #16]
 80077b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80077b6:	3b01      	subs	r3, #1
 80077b8:	1eb5      	subs	r5, r6, #2
 80077ba:	6123      	str	r3, [r4, #16]
 80077bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077c0:	463a      	mov	r2, r7
 80077c2:	4640      	mov	r0, r8
 80077c4:	4798      	blx	r3
 80077c6:	462e      	mov	r6, r5
 80077c8:	6825      	ldr	r5, [r4, #0]
 80077ca:	f015 0510 	ands.w	r5, r5, #16
 80077ce:	d159      	bne.n	8007884 <_scanf_float+0x414>
 80077d0:	7035      	strb	r5, [r6, #0]
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80077d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077dc:	d11b      	bne.n	8007816 <_scanf_float+0x3a6>
 80077de:	9b01      	ldr	r3, [sp, #4]
 80077e0:	454b      	cmp	r3, r9
 80077e2:	eba3 0209 	sub.w	r2, r3, r9
 80077e6:	d123      	bne.n	8007830 <_scanf_float+0x3c0>
 80077e8:	2200      	movs	r2, #0
 80077ea:	4659      	mov	r1, fp
 80077ec:	4640      	mov	r0, r8
 80077ee:	f000 ff09 	bl	8008604 <_strtod_r>
 80077f2:	6822      	ldr	r2, [r4, #0]
 80077f4:	9b03      	ldr	r3, [sp, #12]
 80077f6:	f012 0f02 	tst.w	r2, #2
 80077fa:	ec57 6b10 	vmov	r6, r7, d0
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	d021      	beq.n	8007846 <_scanf_float+0x3d6>
 8007802:	9903      	ldr	r1, [sp, #12]
 8007804:	1d1a      	adds	r2, r3, #4
 8007806:	600a      	str	r2, [r1, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	e9c3 6700 	strd	r6, r7, [r3]
 800780e:	68e3      	ldr	r3, [r4, #12]
 8007810:	3301      	adds	r3, #1
 8007812:	60e3      	str	r3, [r4, #12]
 8007814:	e66d      	b.n	80074f2 <_scanf_float+0x82>
 8007816:	9b04      	ldr	r3, [sp, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d0e5      	beq.n	80077e8 <_scanf_float+0x378>
 800781c:	9905      	ldr	r1, [sp, #20]
 800781e:	230a      	movs	r3, #10
 8007820:	462a      	mov	r2, r5
 8007822:	3101      	adds	r1, #1
 8007824:	4640      	mov	r0, r8
 8007826:	f000 ff75 	bl	8008714 <_strtol_r>
 800782a:	9b04      	ldr	r3, [sp, #16]
 800782c:	9e05      	ldr	r6, [sp, #20]
 800782e:	1ac2      	subs	r2, r0, r3
 8007830:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007834:	429e      	cmp	r6, r3
 8007836:	bf28      	it	cs
 8007838:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800783c:	4912      	ldr	r1, [pc, #72]	; (8007888 <_scanf_float+0x418>)
 800783e:	4630      	mov	r0, r6
 8007840:	f000 f82c 	bl	800789c <siprintf>
 8007844:	e7d0      	b.n	80077e8 <_scanf_float+0x378>
 8007846:	9903      	ldr	r1, [sp, #12]
 8007848:	f012 0f04 	tst.w	r2, #4
 800784c:	f103 0204 	add.w	r2, r3, #4
 8007850:	600a      	str	r2, [r1, #0]
 8007852:	d1d9      	bne.n	8007808 <_scanf_float+0x398>
 8007854:	f8d3 8000 	ldr.w	r8, [r3]
 8007858:	ee10 2a10 	vmov	r2, s0
 800785c:	ee10 0a10 	vmov	r0, s0
 8007860:	463b      	mov	r3, r7
 8007862:	4639      	mov	r1, r7
 8007864:	f7f9 f97a 	bl	8000b5c <__aeabi_dcmpun>
 8007868:	b128      	cbz	r0, 8007876 <_scanf_float+0x406>
 800786a:	4808      	ldr	r0, [pc, #32]	; (800788c <_scanf_float+0x41c>)
 800786c:	f000 f810 	bl	8007890 <nanf>
 8007870:	ed88 0a00 	vstr	s0, [r8]
 8007874:	e7cb      	b.n	800780e <_scanf_float+0x39e>
 8007876:	4630      	mov	r0, r6
 8007878:	4639      	mov	r1, r7
 800787a:	f7f9 f9cd 	bl	8000c18 <__aeabi_d2f>
 800787e:	f8c8 0000 	str.w	r0, [r8]
 8007882:	e7c4      	b.n	800780e <_scanf_float+0x39e>
 8007884:	2500      	movs	r5, #0
 8007886:	e634      	b.n	80074f2 <_scanf_float+0x82>
 8007888:	0800e8b6 	.word	0x0800e8b6
 800788c:	0800ecdb 	.word	0x0800ecdb

08007890 <nanf>:
 8007890:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007898 <nanf+0x8>
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	7fc00000 	.word	0x7fc00000

0800789c <siprintf>:
 800789c:	b40e      	push	{r1, r2, r3}
 800789e:	b500      	push	{lr}
 80078a0:	b09c      	sub	sp, #112	; 0x70
 80078a2:	ab1d      	add	r3, sp, #116	; 0x74
 80078a4:	9002      	str	r0, [sp, #8]
 80078a6:	9006      	str	r0, [sp, #24]
 80078a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078ac:	4809      	ldr	r0, [pc, #36]	; (80078d4 <siprintf+0x38>)
 80078ae:	9107      	str	r1, [sp, #28]
 80078b0:	9104      	str	r1, [sp, #16]
 80078b2:	4909      	ldr	r1, [pc, #36]	; (80078d8 <siprintf+0x3c>)
 80078b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80078b8:	9105      	str	r1, [sp, #20]
 80078ba:	6800      	ldr	r0, [r0, #0]
 80078bc:	9301      	str	r3, [sp, #4]
 80078be:	a902      	add	r1, sp, #8
 80078c0:	f002 ff8a 	bl	800a7d8 <_svfiprintf_r>
 80078c4:	9b02      	ldr	r3, [sp, #8]
 80078c6:	2200      	movs	r2, #0
 80078c8:	701a      	strb	r2, [r3, #0]
 80078ca:	b01c      	add	sp, #112	; 0x70
 80078cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80078d0:	b003      	add	sp, #12
 80078d2:	4770      	bx	lr
 80078d4:	2000000c 	.word	0x2000000c
 80078d8:	ffff0208 	.word	0xffff0208

080078dc <siscanf>:
 80078dc:	b40e      	push	{r1, r2, r3}
 80078de:	b510      	push	{r4, lr}
 80078e0:	b09f      	sub	sp, #124	; 0x7c
 80078e2:	ac21      	add	r4, sp, #132	; 0x84
 80078e4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80078e8:	f854 2b04 	ldr.w	r2, [r4], #4
 80078ec:	9201      	str	r2, [sp, #4]
 80078ee:	f8ad 101c 	strh.w	r1, [sp, #28]
 80078f2:	9004      	str	r0, [sp, #16]
 80078f4:	9008      	str	r0, [sp, #32]
 80078f6:	f7f8 fc7d 	bl	80001f4 <strlen>
 80078fa:	4b0c      	ldr	r3, [pc, #48]	; (800792c <siscanf+0x50>)
 80078fc:	9005      	str	r0, [sp, #20]
 80078fe:	9009      	str	r0, [sp, #36]	; 0x24
 8007900:	930d      	str	r3, [sp, #52]	; 0x34
 8007902:	480b      	ldr	r0, [pc, #44]	; (8007930 <siscanf+0x54>)
 8007904:	9a01      	ldr	r2, [sp, #4]
 8007906:	6800      	ldr	r0, [r0, #0]
 8007908:	9403      	str	r4, [sp, #12]
 800790a:	2300      	movs	r3, #0
 800790c:	9311      	str	r3, [sp, #68]	; 0x44
 800790e:	9316      	str	r3, [sp, #88]	; 0x58
 8007910:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007914:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007918:	a904      	add	r1, sp, #16
 800791a:	4623      	mov	r3, r4
 800791c:	f003 f8b6 	bl	800aa8c <__ssvfiscanf_r>
 8007920:	b01f      	add	sp, #124	; 0x7c
 8007922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007926:	b003      	add	sp, #12
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	08007957 	.word	0x08007957
 8007930:	2000000c 	.word	0x2000000c

08007934 <__sread>:
 8007934:	b510      	push	{r4, lr}
 8007936:	460c      	mov	r4, r1
 8007938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800793c:	f003 fb70 	bl	800b020 <_read_r>
 8007940:	2800      	cmp	r0, #0
 8007942:	bfab      	itete	ge
 8007944:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007946:	89a3      	ldrhlt	r3, [r4, #12]
 8007948:	181b      	addge	r3, r3, r0
 800794a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800794e:	bfac      	ite	ge
 8007950:	6563      	strge	r3, [r4, #84]	; 0x54
 8007952:	81a3      	strhlt	r3, [r4, #12]
 8007954:	bd10      	pop	{r4, pc}

08007956 <__seofread>:
 8007956:	2000      	movs	r0, #0
 8007958:	4770      	bx	lr

0800795a <__swrite>:
 800795a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800795e:	461f      	mov	r7, r3
 8007960:	898b      	ldrh	r3, [r1, #12]
 8007962:	05db      	lsls	r3, r3, #23
 8007964:	4605      	mov	r5, r0
 8007966:	460c      	mov	r4, r1
 8007968:	4616      	mov	r6, r2
 800796a:	d505      	bpl.n	8007978 <__swrite+0x1e>
 800796c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007970:	2302      	movs	r3, #2
 8007972:	2200      	movs	r2, #0
 8007974:	f002 f8e2 	bl	8009b3c <_lseek_r>
 8007978:	89a3      	ldrh	r3, [r4, #12]
 800797a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800797e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007982:	81a3      	strh	r3, [r4, #12]
 8007984:	4632      	mov	r2, r6
 8007986:	463b      	mov	r3, r7
 8007988:	4628      	mov	r0, r5
 800798a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800798e:	f000 bec3 	b.w	8008718 <_write_r>

08007992 <__sseek>:
 8007992:	b510      	push	{r4, lr}
 8007994:	460c      	mov	r4, r1
 8007996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800799a:	f002 f8cf 	bl	8009b3c <_lseek_r>
 800799e:	1c43      	adds	r3, r0, #1
 80079a0:	89a3      	ldrh	r3, [r4, #12]
 80079a2:	bf15      	itete	ne
 80079a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80079a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079ae:	81a3      	strheq	r3, [r4, #12]
 80079b0:	bf18      	it	ne
 80079b2:	81a3      	strhne	r3, [r4, #12]
 80079b4:	bd10      	pop	{r4, pc}

080079b6 <__sclose>:
 80079b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ba:	f000 bebf 	b.w	800873c <_close_r>

080079be <sulp>:
 80079be:	b570      	push	{r4, r5, r6, lr}
 80079c0:	4604      	mov	r4, r0
 80079c2:	460d      	mov	r5, r1
 80079c4:	ec45 4b10 	vmov	d0, r4, r5
 80079c8:	4616      	mov	r6, r2
 80079ca:	f002 fc63 	bl	800a294 <__ulp>
 80079ce:	ec51 0b10 	vmov	r0, r1, d0
 80079d2:	b17e      	cbz	r6, 80079f4 <sulp+0x36>
 80079d4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80079d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079dc:	2b00      	cmp	r3, #0
 80079de:	dd09      	ble.n	80079f4 <sulp+0x36>
 80079e0:	051b      	lsls	r3, r3, #20
 80079e2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80079e6:	2400      	movs	r4, #0
 80079e8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80079ec:	4622      	mov	r2, r4
 80079ee:	462b      	mov	r3, r5
 80079f0:	f7f8 fe1a 	bl	8000628 <__aeabi_dmul>
 80079f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080079f8 <_strtod_l>:
 80079f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fc:	ed2d 8b02 	vpush	{d8}
 8007a00:	b09d      	sub	sp, #116	; 0x74
 8007a02:	461f      	mov	r7, r3
 8007a04:	2300      	movs	r3, #0
 8007a06:	9318      	str	r3, [sp, #96]	; 0x60
 8007a08:	4ba2      	ldr	r3, [pc, #648]	; (8007c94 <_strtod_l+0x29c>)
 8007a0a:	9213      	str	r2, [sp, #76]	; 0x4c
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	9305      	str	r3, [sp, #20]
 8007a10:	4604      	mov	r4, r0
 8007a12:	4618      	mov	r0, r3
 8007a14:	4688      	mov	r8, r1
 8007a16:	f7f8 fbed 	bl	80001f4 <strlen>
 8007a1a:	f04f 0a00 	mov.w	sl, #0
 8007a1e:	4605      	mov	r5, r0
 8007a20:	f04f 0b00 	mov.w	fp, #0
 8007a24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007a28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a2a:	781a      	ldrb	r2, [r3, #0]
 8007a2c:	2a2b      	cmp	r2, #43	; 0x2b
 8007a2e:	d04e      	beq.n	8007ace <_strtod_l+0xd6>
 8007a30:	d83b      	bhi.n	8007aaa <_strtod_l+0xb2>
 8007a32:	2a0d      	cmp	r2, #13
 8007a34:	d834      	bhi.n	8007aa0 <_strtod_l+0xa8>
 8007a36:	2a08      	cmp	r2, #8
 8007a38:	d834      	bhi.n	8007aa4 <_strtod_l+0xac>
 8007a3a:	2a00      	cmp	r2, #0
 8007a3c:	d03e      	beq.n	8007abc <_strtod_l+0xc4>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	930a      	str	r3, [sp, #40]	; 0x28
 8007a42:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007a44:	7833      	ldrb	r3, [r6, #0]
 8007a46:	2b30      	cmp	r3, #48	; 0x30
 8007a48:	f040 80b0 	bne.w	8007bac <_strtod_l+0x1b4>
 8007a4c:	7873      	ldrb	r3, [r6, #1]
 8007a4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007a52:	2b58      	cmp	r3, #88	; 0x58
 8007a54:	d168      	bne.n	8007b28 <_strtod_l+0x130>
 8007a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a58:	9301      	str	r3, [sp, #4]
 8007a5a:	ab18      	add	r3, sp, #96	; 0x60
 8007a5c:	9702      	str	r7, [sp, #8]
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	4a8d      	ldr	r2, [pc, #564]	; (8007c98 <_strtod_l+0x2a0>)
 8007a62:	ab19      	add	r3, sp, #100	; 0x64
 8007a64:	a917      	add	r1, sp, #92	; 0x5c
 8007a66:	4620      	mov	r0, r4
 8007a68:	f001 fd5c 	bl	8009524 <__gethex>
 8007a6c:	f010 0707 	ands.w	r7, r0, #7
 8007a70:	4605      	mov	r5, r0
 8007a72:	d005      	beq.n	8007a80 <_strtod_l+0x88>
 8007a74:	2f06      	cmp	r7, #6
 8007a76:	d12c      	bne.n	8007ad2 <_strtod_l+0xda>
 8007a78:	3601      	adds	r6, #1
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	9617      	str	r6, [sp, #92]	; 0x5c
 8007a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f040 8590 	bne.w	80085a8 <_strtod_l+0xbb0>
 8007a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a8a:	b1eb      	cbz	r3, 8007ac8 <_strtod_l+0xd0>
 8007a8c:	4652      	mov	r2, sl
 8007a8e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007a92:	ec43 2b10 	vmov	d0, r2, r3
 8007a96:	b01d      	add	sp, #116	; 0x74
 8007a98:	ecbd 8b02 	vpop	{d8}
 8007a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa0:	2a20      	cmp	r2, #32
 8007aa2:	d1cc      	bne.n	8007a3e <_strtod_l+0x46>
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	9317      	str	r3, [sp, #92]	; 0x5c
 8007aa8:	e7be      	b.n	8007a28 <_strtod_l+0x30>
 8007aaa:	2a2d      	cmp	r2, #45	; 0x2d
 8007aac:	d1c7      	bne.n	8007a3e <_strtod_l+0x46>
 8007aae:	2201      	movs	r2, #1
 8007ab0:	920a      	str	r2, [sp, #40]	; 0x28
 8007ab2:	1c5a      	adds	r2, r3, #1
 8007ab4:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ab6:	785b      	ldrb	r3, [r3, #1]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1c2      	bne.n	8007a42 <_strtod_l+0x4a>
 8007abc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007abe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f040 856e 	bne.w	80085a4 <_strtod_l+0xbac>
 8007ac8:	4652      	mov	r2, sl
 8007aca:	465b      	mov	r3, fp
 8007acc:	e7e1      	b.n	8007a92 <_strtod_l+0x9a>
 8007ace:	2200      	movs	r2, #0
 8007ad0:	e7ee      	b.n	8007ab0 <_strtod_l+0xb8>
 8007ad2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007ad4:	b13a      	cbz	r2, 8007ae6 <_strtod_l+0xee>
 8007ad6:	2135      	movs	r1, #53	; 0x35
 8007ad8:	a81a      	add	r0, sp, #104	; 0x68
 8007ada:	f002 fce6 	bl	800a4aa <__copybits>
 8007ade:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f002 f8a5 	bl	8009c30 <_Bfree>
 8007ae6:	3f01      	subs	r7, #1
 8007ae8:	2f04      	cmp	r7, #4
 8007aea:	d806      	bhi.n	8007afa <_strtod_l+0x102>
 8007aec:	e8df f007 	tbb	[pc, r7]
 8007af0:	1714030a 	.word	0x1714030a
 8007af4:	0a          	.byte	0x0a
 8007af5:	00          	.byte	0x00
 8007af6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007afa:	0728      	lsls	r0, r5, #28
 8007afc:	d5c0      	bpl.n	8007a80 <_strtod_l+0x88>
 8007afe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007b02:	e7bd      	b.n	8007a80 <_strtod_l+0x88>
 8007b04:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007b08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007b12:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007b16:	e7f0      	b.n	8007afa <_strtod_l+0x102>
 8007b18:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007c9c <_strtod_l+0x2a4>
 8007b1c:	e7ed      	b.n	8007afa <_strtod_l+0x102>
 8007b1e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007b22:	f04f 3aff 	mov.w	sl, #4294967295
 8007b26:	e7e8      	b.n	8007afa <_strtod_l+0x102>
 8007b28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b2a:	1c5a      	adds	r2, r3, #1
 8007b2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007b2e:	785b      	ldrb	r3, [r3, #1]
 8007b30:	2b30      	cmp	r3, #48	; 0x30
 8007b32:	d0f9      	beq.n	8007b28 <_strtod_l+0x130>
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d0a3      	beq.n	8007a80 <_strtod_l+0x88>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	f04f 0900 	mov.w	r9, #0
 8007b3e:	9304      	str	r3, [sp, #16]
 8007b40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b42:	9308      	str	r3, [sp, #32]
 8007b44:	f8cd 901c 	str.w	r9, [sp, #28]
 8007b48:	464f      	mov	r7, r9
 8007b4a:	220a      	movs	r2, #10
 8007b4c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007b4e:	7806      	ldrb	r6, [r0, #0]
 8007b50:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007b54:	b2d9      	uxtb	r1, r3
 8007b56:	2909      	cmp	r1, #9
 8007b58:	d92a      	bls.n	8007bb0 <_strtod_l+0x1b8>
 8007b5a:	9905      	ldr	r1, [sp, #20]
 8007b5c:	462a      	mov	r2, r5
 8007b5e:	f003 fac3 	bl	800b0e8 <strncmp>
 8007b62:	b398      	cbz	r0, 8007bcc <_strtod_l+0x1d4>
 8007b64:	2000      	movs	r0, #0
 8007b66:	4632      	mov	r2, r6
 8007b68:	463d      	mov	r5, r7
 8007b6a:	9005      	str	r0, [sp, #20]
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2a65      	cmp	r2, #101	; 0x65
 8007b70:	d001      	beq.n	8007b76 <_strtod_l+0x17e>
 8007b72:	2a45      	cmp	r2, #69	; 0x45
 8007b74:	d118      	bne.n	8007ba8 <_strtod_l+0x1b0>
 8007b76:	b91d      	cbnz	r5, 8007b80 <_strtod_l+0x188>
 8007b78:	9a04      	ldr	r2, [sp, #16]
 8007b7a:	4302      	orrs	r2, r0
 8007b7c:	d09e      	beq.n	8007abc <_strtod_l+0xc4>
 8007b7e:	2500      	movs	r5, #0
 8007b80:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007b84:	f108 0201 	add.w	r2, r8, #1
 8007b88:	9217      	str	r2, [sp, #92]	; 0x5c
 8007b8a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007b8e:	2a2b      	cmp	r2, #43	; 0x2b
 8007b90:	d075      	beq.n	8007c7e <_strtod_l+0x286>
 8007b92:	2a2d      	cmp	r2, #45	; 0x2d
 8007b94:	d07b      	beq.n	8007c8e <_strtod_l+0x296>
 8007b96:	f04f 0c00 	mov.w	ip, #0
 8007b9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007b9e:	2909      	cmp	r1, #9
 8007ba0:	f240 8082 	bls.w	8007ca8 <_strtod_l+0x2b0>
 8007ba4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007ba8:	2600      	movs	r6, #0
 8007baa:	e09d      	b.n	8007ce8 <_strtod_l+0x2f0>
 8007bac:	2300      	movs	r3, #0
 8007bae:	e7c4      	b.n	8007b3a <_strtod_l+0x142>
 8007bb0:	2f08      	cmp	r7, #8
 8007bb2:	bfd8      	it	le
 8007bb4:	9907      	ldrle	r1, [sp, #28]
 8007bb6:	f100 0001 	add.w	r0, r0, #1
 8007bba:	bfda      	itte	le
 8007bbc:	fb02 3301 	mlale	r3, r2, r1, r3
 8007bc0:	9307      	strle	r3, [sp, #28]
 8007bc2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007bc6:	3701      	adds	r7, #1
 8007bc8:	9017      	str	r0, [sp, #92]	; 0x5c
 8007bca:	e7bf      	b.n	8007b4c <_strtod_l+0x154>
 8007bcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bce:	195a      	adds	r2, r3, r5
 8007bd0:	9217      	str	r2, [sp, #92]	; 0x5c
 8007bd2:	5d5a      	ldrb	r2, [r3, r5]
 8007bd4:	2f00      	cmp	r7, #0
 8007bd6:	d037      	beq.n	8007c48 <_strtod_l+0x250>
 8007bd8:	9005      	str	r0, [sp, #20]
 8007bda:	463d      	mov	r5, r7
 8007bdc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007be0:	2b09      	cmp	r3, #9
 8007be2:	d912      	bls.n	8007c0a <_strtod_l+0x212>
 8007be4:	2301      	movs	r3, #1
 8007be6:	e7c2      	b.n	8007b6e <_strtod_l+0x176>
 8007be8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	9217      	str	r2, [sp, #92]	; 0x5c
 8007bee:	785a      	ldrb	r2, [r3, #1]
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	2a30      	cmp	r2, #48	; 0x30
 8007bf4:	d0f8      	beq.n	8007be8 <_strtod_l+0x1f0>
 8007bf6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007bfa:	2b08      	cmp	r3, #8
 8007bfc:	f200 84d9 	bhi.w	80085b2 <_strtod_l+0xbba>
 8007c00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c02:	9005      	str	r0, [sp, #20]
 8007c04:	2000      	movs	r0, #0
 8007c06:	9308      	str	r3, [sp, #32]
 8007c08:	4605      	mov	r5, r0
 8007c0a:	3a30      	subs	r2, #48	; 0x30
 8007c0c:	f100 0301 	add.w	r3, r0, #1
 8007c10:	d014      	beq.n	8007c3c <_strtod_l+0x244>
 8007c12:	9905      	ldr	r1, [sp, #20]
 8007c14:	4419      	add	r1, r3
 8007c16:	9105      	str	r1, [sp, #20]
 8007c18:	462b      	mov	r3, r5
 8007c1a:	eb00 0e05 	add.w	lr, r0, r5
 8007c1e:	210a      	movs	r1, #10
 8007c20:	4573      	cmp	r3, lr
 8007c22:	d113      	bne.n	8007c4c <_strtod_l+0x254>
 8007c24:	182b      	adds	r3, r5, r0
 8007c26:	2b08      	cmp	r3, #8
 8007c28:	f105 0501 	add.w	r5, r5, #1
 8007c2c:	4405      	add	r5, r0
 8007c2e:	dc1c      	bgt.n	8007c6a <_strtod_l+0x272>
 8007c30:	9907      	ldr	r1, [sp, #28]
 8007c32:	230a      	movs	r3, #10
 8007c34:	fb03 2301 	mla	r3, r3, r1, r2
 8007c38:	9307      	str	r3, [sp, #28]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c3e:	1c51      	adds	r1, r2, #1
 8007c40:	9117      	str	r1, [sp, #92]	; 0x5c
 8007c42:	7852      	ldrb	r2, [r2, #1]
 8007c44:	4618      	mov	r0, r3
 8007c46:	e7c9      	b.n	8007bdc <_strtod_l+0x1e4>
 8007c48:	4638      	mov	r0, r7
 8007c4a:	e7d2      	b.n	8007bf2 <_strtod_l+0x1fa>
 8007c4c:	2b08      	cmp	r3, #8
 8007c4e:	dc04      	bgt.n	8007c5a <_strtod_l+0x262>
 8007c50:	9e07      	ldr	r6, [sp, #28]
 8007c52:	434e      	muls	r6, r1
 8007c54:	9607      	str	r6, [sp, #28]
 8007c56:	3301      	adds	r3, #1
 8007c58:	e7e2      	b.n	8007c20 <_strtod_l+0x228>
 8007c5a:	f103 0c01 	add.w	ip, r3, #1
 8007c5e:	f1bc 0f10 	cmp.w	ip, #16
 8007c62:	bfd8      	it	le
 8007c64:	fb01 f909 	mulle.w	r9, r1, r9
 8007c68:	e7f5      	b.n	8007c56 <_strtod_l+0x25e>
 8007c6a:	2d10      	cmp	r5, #16
 8007c6c:	bfdc      	itt	le
 8007c6e:	230a      	movle	r3, #10
 8007c70:	fb03 2909 	mlale	r9, r3, r9, r2
 8007c74:	e7e1      	b.n	8007c3a <_strtod_l+0x242>
 8007c76:	2300      	movs	r3, #0
 8007c78:	9305      	str	r3, [sp, #20]
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e77c      	b.n	8007b78 <_strtod_l+0x180>
 8007c7e:	f04f 0c00 	mov.w	ip, #0
 8007c82:	f108 0202 	add.w	r2, r8, #2
 8007c86:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c88:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007c8c:	e785      	b.n	8007b9a <_strtod_l+0x1a2>
 8007c8e:	f04f 0c01 	mov.w	ip, #1
 8007c92:	e7f6      	b.n	8007c82 <_strtod_l+0x28a>
 8007c94:	0800eb08 	.word	0x0800eb08
 8007c98:	0800e8bc 	.word	0x0800e8bc
 8007c9c:	7ff00000 	.word	0x7ff00000
 8007ca0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007ca2:	1c51      	adds	r1, r2, #1
 8007ca4:	9117      	str	r1, [sp, #92]	; 0x5c
 8007ca6:	7852      	ldrb	r2, [r2, #1]
 8007ca8:	2a30      	cmp	r2, #48	; 0x30
 8007caa:	d0f9      	beq.n	8007ca0 <_strtod_l+0x2a8>
 8007cac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007cb0:	2908      	cmp	r1, #8
 8007cb2:	f63f af79 	bhi.w	8007ba8 <_strtod_l+0x1b0>
 8007cb6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007cba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cbc:	9206      	str	r2, [sp, #24]
 8007cbe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cc0:	1c51      	adds	r1, r2, #1
 8007cc2:	9117      	str	r1, [sp, #92]	; 0x5c
 8007cc4:	7852      	ldrb	r2, [r2, #1]
 8007cc6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007cca:	2e09      	cmp	r6, #9
 8007ccc:	d937      	bls.n	8007d3e <_strtod_l+0x346>
 8007cce:	9e06      	ldr	r6, [sp, #24]
 8007cd0:	1b89      	subs	r1, r1, r6
 8007cd2:	2908      	cmp	r1, #8
 8007cd4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007cd8:	dc02      	bgt.n	8007ce0 <_strtod_l+0x2e8>
 8007cda:	4576      	cmp	r6, lr
 8007cdc:	bfa8      	it	ge
 8007cde:	4676      	movge	r6, lr
 8007ce0:	f1bc 0f00 	cmp.w	ip, #0
 8007ce4:	d000      	beq.n	8007ce8 <_strtod_l+0x2f0>
 8007ce6:	4276      	negs	r6, r6
 8007ce8:	2d00      	cmp	r5, #0
 8007cea:	d14d      	bne.n	8007d88 <_strtod_l+0x390>
 8007cec:	9904      	ldr	r1, [sp, #16]
 8007cee:	4301      	orrs	r1, r0
 8007cf0:	f47f aec6 	bne.w	8007a80 <_strtod_l+0x88>
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f47f aee1 	bne.w	8007abc <_strtod_l+0xc4>
 8007cfa:	2a69      	cmp	r2, #105	; 0x69
 8007cfc:	d027      	beq.n	8007d4e <_strtod_l+0x356>
 8007cfe:	dc24      	bgt.n	8007d4a <_strtod_l+0x352>
 8007d00:	2a49      	cmp	r2, #73	; 0x49
 8007d02:	d024      	beq.n	8007d4e <_strtod_l+0x356>
 8007d04:	2a4e      	cmp	r2, #78	; 0x4e
 8007d06:	f47f aed9 	bne.w	8007abc <_strtod_l+0xc4>
 8007d0a:	499f      	ldr	r1, [pc, #636]	; (8007f88 <_strtod_l+0x590>)
 8007d0c:	a817      	add	r0, sp, #92	; 0x5c
 8007d0e:	f001 fe61 	bl	80099d4 <__match>
 8007d12:	2800      	cmp	r0, #0
 8007d14:	f43f aed2 	beq.w	8007abc <_strtod_l+0xc4>
 8007d18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	2b28      	cmp	r3, #40	; 0x28
 8007d1e:	d12d      	bne.n	8007d7c <_strtod_l+0x384>
 8007d20:	499a      	ldr	r1, [pc, #616]	; (8007f8c <_strtod_l+0x594>)
 8007d22:	aa1a      	add	r2, sp, #104	; 0x68
 8007d24:	a817      	add	r0, sp, #92	; 0x5c
 8007d26:	f001 fe69 	bl	80099fc <__hexnan>
 8007d2a:	2805      	cmp	r0, #5
 8007d2c:	d126      	bne.n	8007d7c <_strtod_l+0x384>
 8007d2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d30:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007d34:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007d38:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007d3c:	e6a0      	b.n	8007a80 <_strtod_l+0x88>
 8007d3e:	210a      	movs	r1, #10
 8007d40:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007d44:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007d48:	e7b9      	b.n	8007cbe <_strtod_l+0x2c6>
 8007d4a:	2a6e      	cmp	r2, #110	; 0x6e
 8007d4c:	e7db      	b.n	8007d06 <_strtod_l+0x30e>
 8007d4e:	4990      	ldr	r1, [pc, #576]	; (8007f90 <_strtod_l+0x598>)
 8007d50:	a817      	add	r0, sp, #92	; 0x5c
 8007d52:	f001 fe3f 	bl	80099d4 <__match>
 8007d56:	2800      	cmp	r0, #0
 8007d58:	f43f aeb0 	beq.w	8007abc <_strtod_l+0xc4>
 8007d5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d5e:	498d      	ldr	r1, [pc, #564]	; (8007f94 <_strtod_l+0x59c>)
 8007d60:	3b01      	subs	r3, #1
 8007d62:	a817      	add	r0, sp, #92	; 0x5c
 8007d64:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d66:	f001 fe35 	bl	80099d4 <__match>
 8007d6a:	b910      	cbnz	r0, 8007d72 <_strtod_l+0x37a>
 8007d6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d6e:	3301      	adds	r3, #1
 8007d70:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d72:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007fa4 <_strtod_l+0x5ac>
 8007d76:	f04f 0a00 	mov.w	sl, #0
 8007d7a:	e681      	b.n	8007a80 <_strtod_l+0x88>
 8007d7c:	4886      	ldr	r0, [pc, #536]	; (8007f98 <_strtod_l+0x5a0>)
 8007d7e:	f003 f963 	bl	800b048 <nan>
 8007d82:	ec5b ab10 	vmov	sl, fp, d0
 8007d86:	e67b      	b.n	8007a80 <_strtod_l+0x88>
 8007d88:	9b05      	ldr	r3, [sp, #20]
 8007d8a:	9807      	ldr	r0, [sp, #28]
 8007d8c:	1af3      	subs	r3, r6, r3
 8007d8e:	2f00      	cmp	r7, #0
 8007d90:	bf08      	it	eq
 8007d92:	462f      	moveq	r7, r5
 8007d94:	2d10      	cmp	r5, #16
 8007d96:	9306      	str	r3, [sp, #24]
 8007d98:	46a8      	mov	r8, r5
 8007d9a:	bfa8      	it	ge
 8007d9c:	f04f 0810 	movge.w	r8, #16
 8007da0:	f7f8 fbc8 	bl	8000534 <__aeabi_ui2d>
 8007da4:	2d09      	cmp	r5, #9
 8007da6:	4682      	mov	sl, r0
 8007da8:	468b      	mov	fp, r1
 8007daa:	dd13      	ble.n	8007dd4 <_strtod_l+0x3dc>
 8007dac:	4b7b      	ldr	r3, [pc, #492]	; (8007f9c <_strtod_l+0x5a4>)
 8007dae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007db2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007db6:	f7f8 fc37 	bl	8000628 <__aeabi_dmul>
 8007dba:	4682      	mov	sl, r0
 8007dbc:	4648      	mov	r0, r9
 8007dbe:	468b      	mov	fp, r1
 8007dc0:	f7f8 fbb8 	bl	8000534 <__aeabi_ui2d>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	4650      	mov	r0, sl
 8007dca:	4659      	mov	r1, fp
 8007dcc:	f7f8 fa76 	bl	80002bc <__adddf3>
 8007dd0:	4682      	mov	sl, r0
 8007dd2:	468b      	mov	fp, r1
 8007dd4:	2d0f      	cmp	r5, #15
 8007dd6:	dc38      	bgt.n	8007e4a <_strtod_l+0x452>
 8007dd8:	9b06      	ldr	r3, [sp, #24]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f43f ae50 	beq.w	8007a80 <_strtod_l+0x88>
 8007de0:	dd24      	ble.n	8007e2c <_strtod_l+0x434>
 8007de2:	2b16      	cmp	r3, #22
 8007de4:	dc0b      	bgt.n	8007dfe <_strtod_l+0x406>
 8007de6:	496d      	ldr	r1, [pc, #436]	; (8007f9c <_strtod_l+0x5a4>)
 8007de8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007dec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007df0:	4652      	mov	r2, sl
 8007df2:	465b      	mov	r3, fp
 8007df4:	f7f8 fc18 	bl	8000628 <__aeabi_dmul>
 8007df8:	4682      	mov	sl, r0
 8007dfa:	468b      	mov	fp, r1
 8007dfc:	e640      	b.n	8007a80 <_strtod_l+0x88>
 8007dfe:	9a06      	ldr	r2, [sp, #24]
 8007e00:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007e04:	4293      	cmp	r3, r2
 8007e06:	db20      	blt.n	8007e4a <_strtod_l+0x452>
 8007e08:	4c64      	ldr	r4, [pc, #400]	; (8007f9c <_strtod_l+0x5a4>)
 8007e0a:	f1c5 050f 	rsb	r5, r5, #15
 8007e0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007e12:	4652      	mov	r2, sl
 8007e14:	465b      	mov	r3, fp
 8007e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e1a:	f7f8 fc05 	bl	8000628 <__aeabi_dmul>
 8007e1e:	9b06      	ldr	r3, [sp, #24]
 8007e20:	1b5d      	subs	r5, r3, r5
 8007e22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007e26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007e2a:	e7e3      	b.n	8007df4 <_strtod_l+0x3fc>
 8007e2c:	9b06      	ldr	r3, [sp, #24]
 8007e2e:	3316      	adds	r3, #22
 8007e30:	db0b      	blt.n	8007e4a <_strtod_l+0x452>
 8007e32:	9b05      	ldr	r3, [sp, #20]
 8007e34:	1b9e      	subs	r6, r3, r6
 8007e36:	4b59      	ldr	r3, [pc, #356]	; (8007f9c <_strtod_l+0x5a4>)
 8007e38:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007e3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e40:	4650      	mov	r0, sl
 8007e42:	4659      	mov	r1, fp
 8007e44:	f7f8 fd1a 	bl	800087c <__aeabi_ddiv>
 8007e48:	e7d6      	b.n	8007df8 <_strtod_l+0x400>
 8007e4a:	9b06      	ldr	r3, [sp, #24]
 8007e4c:	eba5 0808 	sub.w	r8, r5, r8
 8007e50:	4498      	add	r8, r3
 8007e52:	f1b8 0f00 	cmp.w	r8, #0
 8007e56:	dd74      	ble.n	8007f42 <_strtod_l+0x54a>
 8007e58:	f018 030f 	ands.w	r3, r8, #15
 8007e5c:	d00a      	beq.n	8007e74 <_strtod_l+0x47c>
 8007e5e:	494f      	ldr	r1, [pc, #316]	; (8007f9c <_strtod_l+0x5a4>)
 8007e60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e64:	4652      	mov	r2, sl
 8007e66:	465b      	mov	r3, fp
 8007e68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e6c:	f7f8 fbdc 	bl	8000628 <__aeabi_dmul>
 8007e70:	4682      	mov	sl, r0
 8007e72:	468b      	mov	fp, r1
 8007e74:	f038 080f 	bics.w	r8, r8, #15
 8007e78:	d04f      	beq.n	8007f1a <_strtod_l+0x522>
 8007e7a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007e7e:	dd22      	ble.n	8007ec6 <_strtod_l+0x4ce>
 8007e80:	2500      	movs	r5, #0
 8007e82:	462e      	mov	r6, r5
 8007e84:	9507      	str	r5, [sp, #28]
 8007e86:	9505      	str	r5, [sp, #20]
 8007e88:	2322      	movs	r3, #34	; 0x22
 8007e8a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007fa4 <_strtod_l+0x5ac>
 8007e8e:	6023      	str	r3, [r4, #0]
 8007e90:	f04f 0a00 	mov.w	sl, #0
 8007e94:	9b07      	ldr	r3, [sp, #28]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f43f adf2 	beq.w	8007a80 <_strtod_l+0x88>
 8007e9c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	f001 fec6 	bl	8009c30 <_Bfree>
 8007ea4:	9905      	ldr	r1, [sp, #20]
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f001 fec2 	bl	8009c30 <_Bfree>
 8007eac:	4631      	mov	r1, r6
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f001 febe 	bl	8009c30 <_Bfree>
 8007eb4:	9907      	ldr	r1, [sp, #28]
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f001 feba 	bl	8009c30 <_Bfree>
 8007ebc:	4629      	mov	r1, r5
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f001 feb6 	bl	8009c30 <_Bfree>
 8007ec4:	e5dc      	b.n	8007a80 <_strtod_l+0x88>
 8007ec6:	4b36      	ldr	r3, [pc, #216]	; (8007fa0 <_strtod_l+0x5a8>)
 8007ec8:	9304      	str	r3, [sp, #16]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007ed0:	4650      	mov	r0, sl
 8007ed2:	4659      	mov	r1, fp
 8007ed4:	4699      	mov	r9, r3
 8007ed6:	f1b8 0f01 	cmp.w	r8, #1
 8007eda:	dc21      	bgt.n	8007f20 <_strtod_l+0x528>
 8007edc:	b10b      	cbz	r3, 8007ee2 <_strtod_l+0x4ea>
 8007ede:	4682      	mov	sl, r0
 8007ee0:	468b      	mov	fp, r1
 8007ee2:	4b2f      	ldr	r3, [pc, #188]	; (8007fa0 <_strtod_l+0x5a8>)
 8007ee4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007ee8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007eec:	4652      	mov	r2, sl
 8007eee:	465b      	mov	r3, fp
 8007ef0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007ef4:	f7f8 fb98 	bl	8000628 <__aeabi_dmul>
 8007ef8:	4b2a      	ldr	r3, [pc, #168]	; (8007fa4 <_strtod_l+0x5ac>)
 8007efa:	460a      	mov	r2, r1
 8007efc:	400b      	ands	r3, r1
 8007efe:	492a      	ldr	r1, [pc, #168]	; (8007fa8 <_strtod_l+0x5b0>)
 8007f00:	428b      	cmp	r3, r1
 8007f02:	4682      	mov	sl, r0
 8007f04:	d8bc      	bhi.n	8007e80 <_strtod_l+0x488>
 8007f06:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007f0a:	428b      	cmp	r3, r1
 8007f0c:	bf86      	itte	hi
 8007f0e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007fac <_strtod_l+0x5b4>
 8007f12:	f04f 3aff 	movhi.w	sl, #4294967295
 8007f16:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	9304      	str	r3, [sp, #16]
 8007f1e:	e084      	b.n	800802a <_strtod_l+0x632>
 8007f20:	f018 0f01 	tst.w	r8, #1
 8007f24:	d005      	beq.n	8007f32 <_strtod_l+0x53a>
 8007f26:	9b04      	ldr	r3, [sp, #16]
 8007f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2c:	f7f8 fb7c 	bl	8000628 <__aeabi_dmul>
 8007f30:	2301      	movs	r3, #1
 8007f32:	9a04      	ldr	r2, [sp, #16]
 8007f34:	3208      	adds	r2, #8
 8007f36:	f109 0901 	add.w	r9, r9, #1
 8007f3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007f3e:	9204      	str	r2, [sp, #16]
 8007f40:	e7c9      	b.n	8007ed6 <_strtod_l+0x4de>
 8007f42:	d0ea      	beq.n	8007f1a <_strtod_l+0x522>
 8007f44:	f1c8 0800 	rsb	r8, r8, #0
 8007f48:	f018 020f 	ands.w	r2, r8, #15
 8007f4c:	d00a      	beq.n	8007f64 <_strtod_l+0x56c>
 8007f4e:	4b13      	ldr	r3, [pc, #76]	; (8007f9c <_strtod_l+0x5a4>)
 8007f50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f54:	4650      	mov	r0, sl
 8007f56:	4659      	mov	r1, fp
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	f7f8 fc8e 	bl	800087c <__aeabi_ddiv>
 8007f60:	4682      	mov	sl, r0
 8007f62:	468b      	mov	fp, r1
 8007f64:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007f68:	d0d7      	beq.n	8007f1a <_strtod_l+0x522>
 8007f6a:	f1b8 0f1f 	cmp.w	r8, #31
 8007f6e:	dd1f      	ble.n	8007fb0 <_strtod_l+0x5b8>
 8007f70:	2500      	movs	r5, #0
 8007f72:	462e      	mov	r6, r5
 8007f74:	9507      	str	r5, [sp, #28]
 8007f76:	9505      	str	r5, [sp, #20]
 8007f78:	2322      	movs	r3, #34	; 0x22
 8007f7a:	f04f 0a00 	mov.w	sl, #0
 8007f7e:	f04f 0b00 	mov.w	fp, #0
 8007f82:	6023      	str	r3, [r4, #0]
 8007f84:	e786      	b.n	8007e94 <_strtod_l+0x49c>
 8007f86:	bf00      	nop
 8007f88:	0800e891 	.word	0x0800e891
 8007f8c:	0800e8d0 	.word	0x0800e8d0
 8007f90:	0800e889 	.word	0x0800e889
 8007f94:	0800ea14 	.word	0x0800ea14
 8007f98:	0800ecdb 	.word	0x0800ecdb
 8007f9c:	0800eba0 	.word	0x0800eba0
 8007fa0:	0800eb78 	.word	0x0800eb78
 8007fa4:	7ff00000 	.word	0x7ff00000
 8007fa8:	7ca00000 	.word	0x7ca00000
 8007fac:	7fefffff 	.word	0x7fefffff
 8007fb0:	f018 0310 	ands.w	r3, r8, #16
 8007fb4:	bf18      	it	ne
 8007fb6:	236a      	movne	r3, #106	; 0x6a
 8007fb8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008368 <_strtod_l+0x970>
 8007fbc:	9304      	str	r3, [sp, #16]
 8007fbe:	4650      	mov	r0, sl
 8007fc0:	4659      	mov	r1, fp
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f018 0f01 	tst.w	r8, #1
 8007fc8:	d004      	beq.n	8007fd4 <_strtod_l+0x5dc>
 8007fca:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007fce:	f7f8 fb2b 	bl	8000628 <__aeabi_dmul>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007fd8:	f109 0908 	add.w	r9, r9, #8
 8007fdc:	d1f2      	bne.n	8007fc4 <_strtod_l+0x5cc>
 8007fde:	b10b      	cbz	r3, 8007fe4 <_strtod_l+0x5ec>
 8007fe0:	4682      	mov	sl, r0
 8007fe2:	468b      	mov	fp, r1
 8007fe4:	9b04      	ldr	r3, [sp, #16]
 8007fe6:	b1c3      	cbz	r3, 800801a <_strtod_l+0x622>
 8007fe8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007fec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	4659      	mov	r1, fp
 8007ff4:	dd11      	ble.n	800801a <_strtod_l+0x622>
 8007ff6:	2b1f      	cmp	r3, #31
 8007ff8:	f340 8124 	ble.w	8008244 <_strtod_l+0x84c>
 8007ffc:	2b34      	cmp	r3, #52	; 0x34
 8007ffe:	bfde      	ittt	le
 8008000:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008004:	f04f 33ff 	movle.w	r3, #4294967295
 8008008:	fa03 f202 	lslle.w	r2, r3, r2
 800800c:	f04f 0a00 	mov.w	sl, #0
 8008010:	bfcc      	ite	gt
 8008012:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008016:	ea02 0b01 	andle.w	fp, r2, r1
 800801a:	2200      	movs	r2, #0
 800801c:	2300      	movs	r3, #0
 800801e:	4650      	mov	r0, sl
 8008020:	4659      	mov	r1, fp
 8008022:	f7f8 fd69 	bl	8000af8 <__aeabi_dcmpeq>
 8008026:	2800      	cmp	r0, #0
 8008028:	d1a2      	bne.n	8007f70 <_strtod_l+0x578>
 800802a:	9b07      	ldr	r3, [sp, #28]
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	9908      	ldr	r1, [sp, #32]
 8008030:	462b      	mov	r3, r5
 8008032:	463a      	mov	r2, r7
 8008034:	4620      	mov	r0, r4
 8008036:	f001 fe63 	bl	8009d00 <__s2b>
 800803a:	9007      	str	r0, [sp, #28]
 800803c:	2800      	cmp	r0, #0
 800803e:	f43f af1f 	beq.w	8007e80 <_strtod_l+0x488>
 8008042:	9b05      	ldr	r3, [sp, #20]
 8008044:	1b9e      	subs	r6, r3, r6
 8008046:	9b06      	ldr	r3, [sp, #24]
 8008048:	2b00      	cmp	r3, #0
 800804a:	bfb4      	ite	lt
 800804c:	4633      	movlt	r3, r6
 800804e:	2300      	movge	r3, #0
 8008050:	930c      	str	r3, [sp, #48]	; 0x30
 8008052:	9b06      	ldr	r3, [sp, #24]
 8008054:	2500      	movs	r5, #0
 8008056:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800805a:	9312      	str	r3, [sp, #72]	; 0x48
 800805c:	462e      	mov	r6, r5
 800805e:	9b07      	ldr	r3, [sp, #28]
 8008060:	4620      	mov	r0, r4
 8008062:	6859      	ldr	r1, [r3, #4]
 8008064:	f001 fda4 	bl	8009bb0 <_Balloc>
 8008068:	9005      	str	r0, [sp, #20]
 800806a:	2800      	cmp	r0, #0
 800806c:	f43f af0c 	beq.w	8007e88 <_strtod_l+0x490>
 8008070:	9b07      	ldr	r3, [sp, #28]
 8008072:	691a      	ldr	r2, [r3, #16]
 8008074:	3202      	adds	r2, #2
 8008076:	f103 010c 	add.w	r1, r3, #12
 800807a:	0092      	lsls	r2, r2, #2
 800807c:	300c      	adds	r0, #12
 800807e:	f001 fd89 	bl	8009b94 <memcpy>
 8008082:	ec4b ab10 	vmov	d0, sl, fp
 8008086:	aa1a      	add	r2, sp, #104	; 0x68
 8008088:	a919      	add	r1, sp, #100	; 0x64
 800808a:	4620      	mov	r0, r4
 800808c:	f002 f97e 	bl	800a38c <__d2b>
 8008090:	ec4b ab18 	vmov	d8, sl, fp
 8008094:	9018      	str	r0, [sp, #96]	; 0x60
 8008096:	2800      	cmp	r0, #0
 8008098:	f43f aef6 	beq.w	8007e88 <_strtod_l+0x490>
 800809c:	2101      	movs	r1, #1
 800809e:	4620      	mov	r0, r4
 80080a0:	f001 fec8 	bl	8009e34 <__i2b>
 80080a4:	4606      	mov	r6, r0
 80080a6:	2800      	cmp	r0, #0
 80080a8:	f43f aeee 	beq.w	8007e88 <_strtod_l+0x490>
 80080ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80080ae:	9904      	ldr	r1, [sp, #16]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	bfab      	itete	ge
 80080b4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80080b6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80080b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80080ba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80080be:	bfac      	ite	ge
 80080c0:	eb03 0902 	addge.w	r9, r3, r2
 80080c4:	1ad7      	sublt	r7, r2, r3
 80080c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80080c8:	eba3 0801 	sub.w	r8, r3, r1
 80080cc:	4490      	add	r8, r2
 80080ce:	4ba1      	ldr	r3, [pc, #644]	; (8008354 <_strtod_l+0x95c>)
 80080d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80080d4:	4598      	cmp	r8, r3
 80080d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80080da:	f280 80c7 	bge.w	800826c <_strtod_l+0x874>
 80080de:	eba3 0308 	sub.w	r3, r3, r8
 80080e2:	2b1f      	cmp	r3, #31
 80080e4:	eba2 0203 	sub.w	r2, r2, r3
 80080e8:	f04f 0101 	mov.w	r1, #1
 80080ec:	f300 80b1 	bgt.w	8008252 <_strtod_l+0x85a>
 80080f0:	fa01 f303 	lsl.w	r3, r1, r3
 80080f4:	930d      	str	r3, [sp, #52]	; 0x34
 80080f6:	2300      	movs	r3, #0
 80080f8:	9308      	str	r3, [sp, #32]
 80080fa:	eb09 0802 	add.w	r8, r9, r2
 80080fe:	9b04      	ldr	r3, [sp, #16]
 8008100:	45c1      	cmp	r9, r8
 8008102:	4417      	add	r7, r2
 8008104:	441f      	add	r7, r3
 8008106:	464b      	mov	r3, r9
 8008108:	bfa8      	it	ge
 800810a:	4643      	movge	r3, r8
 800810c:	42bb      	cmp	r3, r7
 800810e:	bfa8      	it	ge
 8008110:	463b      	movge	r3, r7
 8008112:	2b00      	cmp	r3, #0
 8008114:	bfc2      	ittt	gt
 8008116:	eba8 0803 	subgt.w	r8, r8, r3
 800811a:	1aff      	subgt	r7, r7, r3
 800811c:	eba9 0903 	subgt.w	r9, r9, r3
 8008120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008122:	2b00      	cmp	r3, #0
 8008124:	dd17      	ble.n	8008156 <_strtod_l+0x75e>
 8008126:	4631      	mov	r1, r6
 8008128:	461a      	mov	r2, r3
 800812a:	4620      	mov	r0, r4
 800812c:	f001 ff42 	bl	8009fb4 <__pow5mult>
 8008130:	4606      	mov	r6, r0
 8008132:	2800      	cmp	r0, #0
 8008134:	f43f aea8 	beq.w	8007e88 <_strtod_l+0x490>
 8008138:	4601      	mov	r1, r0
 800813a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800813c:	4620      	mov	r0, r4
 800813e:	f001 fe8f 	bl	8009e60 <__multiply>
 8008142:	900b      	str	r0, [sp, #44]	; 0x2c
 8008144:	2800      	cmp	r0, #0
 8008146:	f43f ae9f 	beq.w	8007e88 <_strtod_l+0x490>
 800814a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800814c:	4620      	mov	r0, r4
 800814e:	f001 fd6f 	bl	8009c30 <_Bfree>
 8008152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008154:	9318      	str	r3, [sp, #96]	; 0x60
 8008156:	f1b8 0f00 	cmp.w	r8, #0
 800815a:	f300 808c 	bgt.w	8008276 <_strtod_l+0x87e>
 800815e:	9b06      	ldr	r3, [sp, #24]
 8008160:	2b00      	cmp	r3, #0
 8008162:	dd08      	ble.n	8008176 <_strtod_l+0x77e>
 8008164:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008166:	9905      	ldr	r1, [sp, #20]
 8008168:	4620      	mov	r0, r4
 800816a:	f001 ff23 	bl	8009fb4 <__pow5mult>
 800816e:	9005      	str	r0, [sp, #20]
 8008170:	2800      	cmp	r0, #0
 8008172:	f43f ae89 	beq.w	8007e88 <_strtod_l+0x490>
 8008176:	2f00      	cmp	r7, #0
 8008178:	dd08      	ble.n	800818c <_strtod_l+0x794>
 800817a:	9905      	ldr	r1, [sp, #20]
 800817c:	463a      	mov	r2, r7
 800817e:	4620      	mov	r0, r4
 8008180:	f001 ff72 	bl	800a068 <__lshift>
 8008184:	9005      	str	r0, [sp, #20]
 8008186:	2800      	cmp	r0, #0
 8008188:	f43f ae7e 	beq.w	8007e88 <_strtod_l+0x490>
 800818c:	f1b9 0f00 	cmp.w	r9, #0
 8008190:	dd08      	ble.n	80081a4 <_strtod_l+0x7ac>
 8008192:	4631      	mov	r1, r6
 8008194:	464a      	mov	r2, r9
 8008196:	4620      	mov	r0, r4
 8008198:	f001 ff66 	bl	800a068 <__lshift>
 800819c:	4606      	mov	r6, r0
 800819e:	2800      	cmp	r0, #0
 80081a0:	f43f ae72 	beq.w	8007e88 <_strtod_l+0x490>
 80081a4:	9a05      	ldr	r2, [sp, #20]
 80081a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80081a8:	4620      	mov	r0, r4
 80081aa:	f001 ffe9 	bl	800a180 <__mdiff>
 80081ae:	4605      	mov	r5, r0
 80081b0:	2800      	cmp	r0, #0
 80081b2:	f43f ae69 	beq.w	8007e88 <_strtod_l+0x490>
 80081b6:	68c3      	ldr	r3, [r0, #12]
 80081b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80081ba:	2300      	movs	r3, #0
 80081bc:	60c3      	str	r3, [r0, #12]
 80081be:	4631      	mov	r1, r6
 80081c0:	f001 ffc2 	bl	800a148 <__mcmp>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	da60      	bge.n	800828a <_strtod_l+0x892>
 80081c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081ca:	ea53 030a 	orrs.w	r3, r3, sl
 80081ce:	f040 8082 	bne.w	80082d6 <_strtod_l+0x8de>
 80081d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d17d      	bne.n	80082d6 <_strtod_l+0x8de>
 80081da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80081de:	0d1b      	lsrs	r3, r3, #20
 80081e0:	051b      	lsls	r3, r3, #20
 80081e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80081e6:	d976      	bls.n	80082d6 <_strtod_l+0x8de>
 80081e8:	696b      	ldr	r3, [r5, #20]
 80081ea:	b913      	cbnz	r3, 80081f2 <_strtod_l+0x7fa>
 80081ec:	692b      	ldr	r3, [r5, #16]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	dd71      	ble.n	80082d6 <_strtod_l+0x8de>
 80081f2:	4629      	mov	r1, r5
 80081f4:	2201      	movs	r2, #1
 80081f6:	4620      	mov	r0, r4
 80081f8:	f001 ff36 	bl	800a068 <__lshift>
 80081fc:	4631      	mov	r1, r6
 80081fe:	4605      	mov	r5, r0
 8008200:	f001 ffa2 	bl	800a148 <__mcmp>
 8008204:	2800      	cmp	r0, #0
 8008206:	dd66      	ble.n	80082d6 <_strtod_l+0x8de>
 8008208:	9904      	ldr	r1, [sp, #16]
 800820a:	4a53      	ldr	r2, [pc, #332]	; (8008358 <_strtod_l+0x960>)
 800820c:	465b      	mov	r3, fp
 800820e:	2900      	cmp	r1, #0
 8008210:	f000 8081 	beq.w	8008316 <_strtod_l+0x91e>
 8008214:	ea02 010b 	and.w	r1, r2, fp
 8008218:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800821c:	dc7b      	bgt.n	8008316 <_strtod_l+0x91e>
 800821e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008222:	f77f aea9 	ble.w	8007f78 <_strtod_l+0x580>
 8008226:	4b4d      	ldr	r3, [pc, #308]	; (800835c <_strtod_l+0x964>)
 8008228:	4650      	mov	r0, sl
 800822a:	4659      	mov	r1, fp
 800822c:	2200      	movs	r2, #0
 800822e:	f7f8 f9fb 	bl	8000628 <__aeabi_dmul>
 8008232:	460b      	mov	r3, r1
 8008234:	4303      	orrs	r3, r0
 8008236:	bf08      	it	eq
 8008238:	2322      	moveq	r3, #34	; 0x22
 800823a:	4682      	mov	sl, r0
 800823c:	468b      	mov	fp, r1
 800823e:	bf08      	it	eq
 8008240:	6023      	streq	r3, [r4, #0]
 8008242:	e62b      	b.n	8007e9c <_strtod_l+0x4a4>
 8008244:	f04f 32ff 	mov.w	r2, #4294967295
 8008248:	fa02 f303 	lsl.w	r3, r2, r3
 800824c:	ea03 0a0a 	and.w	sl, r3, sl
 8008250:	e6e3      	b.n	800801a <_strtod_l+0x622>
 8008252:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008256:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800825a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800825e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008262:	fa01 f308 	lsl.w	r3, r1, r8
 8008266:	9308      	str	r3, [sp, #32]
 8008268:	910d      	str	r1, [sp, #52]	; 0x34
 800826a:	e746      	b.n	80080fa <_strtod_l+0x702>
 800826c:	2300      	movs	r3, #0
 800826e:	9308      	str	r3, [sp, #32]
 8008270:	2301      	movs	r3, #1
 8008272:	930d      	str	r3, [sp, #52]	; 0x34
 8008274:	e741      	b.n	80080fa <_strtod_l+0x702>
 8008276:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008278:	4642      	mov	r2, r8
 800827a:	4620      	mov	r0, r4
 800827c:	f001 fef4 	bl	800a068 <__lshift>
 8008280:	9018      	str	r0, [sp, #96]	; 0x60
 8008282:	2800      	cmp	r0, #0
 8008284:	f47f af6b 	bne.w	800815e <_strtod_l+0x766>
 8008288:	e5fe      	b.n	8007e88 <_strtod_l+0x490>
 800828a:	465f      	mov	r7, fp
 800828c:	d16e      	bne.n	800836c <_strtod_l+0x974>
 800828e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008290:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008294:	b342      	cbz	r2, 80082e8 <_strtod_l+0x8f0>
 8008296:	4a32      	ldr	r2, [pc, #200]	; (8008360 <_strtod_l+0x968>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d128      	bne.n	80082ee <_strtod_l+0x8f6>
 800829c:	9b04      	ldr	r3, [sp, #16]
 800829e:	4651      	mov	r1, sl
 80082a0:	b1eb      	cbz	r3, 80082de <_strtod_l+0x8e6>
 80082a2:	4b2d      	ldr	r3, [pc, #180]	; (8008358 <_strtod_l+0x960>)
 80082a4:	403b      	ands	r3, r7
 80082a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80082aa:	f04f 32ff 	mov.w	r2, #4294967295
 80082ae:	d819      	bhi.n	80082e4 <_strtod_l+0x8ec>
 80082b0:	0d1b      	lsrs	r3, r3, #20
 80082b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80082b6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ba:	4299      	cmp	r1, r3
 80082bc:	d117      	bne.n	80082ee <_strtod_l+0x8f6>
 80082be:	4b29      	ldr	r3, [pc, #164]	; (8008364 <_strtod_l+0x96c>)
 80082c0:	429f      	cmp	r7, r3
 80082c2:	d102      	bne.n	80082ca <_strtod_l+0x8d2>
 80082c4:	3101      	adds	r1, #1
 80082c6:	f43f addf 	beq.w	8007e88 <_strtod_l+0x490>
 80082ca:	4b23      	ldr	r3, [pc, #140]	; (8008358 <_strtod_l+0x960>)
 80082cc:	403b      	ands	r3, r7
 80082ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80082d2:	f04f 0a00 	mov.w	sl, #0
 80082d6:	9b04      	ldr	r3, [sp, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1a4      	bne.n	8008226 <_strtod_l+0x82e>
 80082dc:	e5de      	b.n	8007e9c <_strtod_l+0x4a4>
 80082de:	f04f 33ff 	mov.w	r3, #4294967295
 80082e2:	e7ea      	b.n	80082ba <_strtod_l+0x8c2>
 80082e4:	4613      	mov	r3, r2
 80082e6:	e7e8      	b.n	80082ba <_strtod_l+0x8c2>
 80082e8:	ea53 030a 	orrs.w	r3, r3, sl
 80082ec:	d08c      	beq.n	8008208 <_strtod_l+0x810>
 80082ee:	9b08      	ldr	r3, [sp, #32]
 80082f0:	b1db      	cbz	r3, 800832a <_strtod_l+0x932>
 80082f2:	423b      	tst	r3, r7
 80082f4:	d0ef      	beq.n	80082d6 <_strtod_l+0x8de>
 80082f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082f8:	9a04      	ldr	r2, [sp, #16]
 80082fa:	4650      	mov	r0, sl
 80082fc:	4659      	mov	r1, fp
 80082fe:	b1c3      	cbz	r3, 8008332 <_strtod_l+0x93a>
 8008300:	f7ff fb5d 	bl	80079be <sulp>
 8008304:	4602      	mov	r2, r0
 8008306:	460b      	mov	r3, r1
 8008308:	ec51 0b18 	vmov	r0, r1, d8
 800830c:	f7f7 ffd6 	bl	80002bc <__adddf3>
 8008310:	4682      	mov	sl, r0
 8008312:	468b      	mov	fp, r1
 8008314:	e7df      	b.n	80082d6 <_strtod_l+0x8de>
 8008316:	4013      	ands	r3, r2
 8008318:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800831c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008320:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008324:	f04f 3aff 	mov.w	sl, #4294967295
 8008328:	e7d5      	b.n	80082d6 <_strtod_l+0x8de>
 800832a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800832c:	ea13 0f0a 	tst.w	r3, sl
 8008330:	e7e0      	b.n	80082f4 <_strtod_l+0x8fc>
 8008332:	f7ff fb44 	bl	80079be <sulp>
 8008336:	4602      	mov	r2, r0
 8008338:	460b      	mov	r3, r1
 800833a:	ec51 0b18 	vmov	r0, r1, d8
 800833e:	f7f7 ffbb 	bl	80002b8 <__aeabi_dsub>
 8008342:	2200      	movs	r2, #0
 8008344:	2300      	movs	r3, #0
 8008346:	4682      	mov	sl, r0
 8008348:	468b      	mov	fp, r1
 800834a:	f7f8 fbd5 	bl	8000af8 <__aeabi_dcmpeq>
 800834e:	2800      	cmp	r0, #0
 8008350:	d0c1      	beq.n	80082d6 <_strtod_l+0x8de>
 8008352:	e611      	b.n	8007f78 <_strtod_l+0x580>
 8008354:	fffffc02 	.word	0xfffffc02
 8008358:	7ff00000 	.word	0x7ff00000
 800835c:	39500000 	.word	0x39500000
 8008360:	000fffff 	.word	0x000fffff
 8008364:	7fefffff 	.word	0x7fefffff
 8008368:	0800e8e8 	.word	0x0800e8e8
 800836c:	4631      	mov	r1, r6
 800836e:	4628      	mov	r0, r5
 8008370:	f002 f868 	bl	800a444 <__ratio>
 8008374:	ec59 8b10 	vmov	r8, r9, d0
 8008378:	ee10 0a10 	vmov	r0, s0
 800837c:	2200      	movs	r2, #0
 800837e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008382:	4649      	mov	r1, r9
 8008384:	f7f8 fbcc 	bl	8000b20 <__aeabi_dcmple>
 8008388:	2800      	cmp	r0, #0
 800838a:	d07a      	beq.n	8008482 <_strtod_l+0xa8a>
 800838c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800838e:	2b00      	cmp	r3, #0
 8008390:	d04a      	beq.n	8008428 <_strtod_l+0xa30>
 8008392:	4b95      	ldr	r3, [pc, #596]	; (80085e8 <_strtod_l+0xbf0>)
 8008394:	2200      	movs	r2, #0
 8008396:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800839a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80085e8 <_strtod_l+0xbf0>
 800839e:	f04f 0800 	mov.w	r8, #0
 80083a2:	4b92      	ldr	r3, [pc, #584]	; (80085ec <_strtod_l+0xbf4>)
 80083a4:	403b      	ands	r3, r7
 80083a6:	930d      	str	r3, [sp, #52]	; 0x34
 80083a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083aa:	4b91      	ldr	r3, [pc, #580]	; (80085f0 <_strtod_l+0xbf8>)
 80083ac:	429a      	cmp	r2, r3
 80083ae:	f040 80b0 	bne.w	8008512 <_strtod_l+0xb1a>
 80083b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083b6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80083ba:	ec4b ab10 	vmov	d0, sl, fp
 80083be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80083c2:	f001 ff67 	bl	800a294 <__ulp>
 80083c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083ca:	ec53 2b10 	vmov	r2, r3, d0
 80083ce:	f7f8 f92b 	bl	8000628 <__aeabi_dmul>
 80083d2:	4652      	mov	r2, sl
 80083d4:	465b      	mov	r3, fp
 80083d6:	f7f7 ff71 	bl	80002bc <__adddf3>
 80083da:	460b      	mov	r3, r1
 80083dc:	4983      	ldr	r1, [pc, #524]	; (80085ec <_strtod_l+0xbf4>)
 80083de:	4a85      	ldr	r2, [pc, #532]	; (80085f4 <_strtod_l+0xbfc>)
 80083e0:	4019      	ands	r1, r3
 80083e2:	4291      	cmp	r1, r2
 80083e4:	4682      	mov	sl, r0
 80083e6:	d960      	bls.n	80084aa <_strtod_l+0xab2>
 80083e8:	ee18 3a90 	vmov	r3, s17
 80083ec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d104      	bne.n	80083fe <_strtod_l+0xa06>
 80083f4:	ee18 3a10 	vmov	r3, s16
 80083f8:	3301      	adds	r3, #1
 80083fa:	f43f ad45 	beq.w	8007e88 <_strtod_l+0x490>
 80083fe:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008600 <_strtod_l+0xc08>
 8008402:	f04f 3aff 	mov.w	sl, #4294967295
 8008406:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008408:	4620      	mov	r0, r4
 800840a:	f001 fc11 	bl	8009c30 <_Bfree>
 800840e:	9905      	ldr	r1, [sp, #20]
 8008410:	4620      	mov	r0, r4
 8008412:	f001 fc0d 	bl	8009c30 <_Bfree>
 8008416:	4631      	mov	r1, r6
 8008418:	4620      	mov	r0, r4
 800841a:	f001 fc09 	bl	8009c30 <_Bfree>
 800841e:	4629      	mov	r1, r5
 8008420:	4620      	mov	r0, r4
 8008422:	f001 fc05 	bl	8009c30 <_Bfree>
 8008426:	e61a      	b.n	800805e <_strtod_l+0x666>
 8008428:	f1ba 0f00 	cmp.w	sl, #0
 800842c:	d11b      	bne.n	8008466 <_strtod_l+0xa6e>
 800842e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008432:	b9f3      	cbnz	r3, 8008472 <_strtod_l+0xa7a>
 8008434:	4b6c      	ldr	r3, [pc, #432]	; (80085e8 <_strtod_l+0xbf0>)
 8008436:	2200      	movs	r2, #0
 8008438:	4640      	mov	r0, r8
 800843a:	4649      	mov	r1, r9
 800843c:	f7f8 fb66 	bl	8000b0c <__aeabi_dcmplt>
 8008440:	b9d0      	cbnz	r0, 8008478 <_strtod_l+0xa80>
 8008442:	4640      	mov	r0, r8
 8008444:	4649      	mov	r1, r9
 8008446:	4b6c      	ldr	r3, [pc, #432]	; (80085f8 <_strtod_l+0xc00>)
 8008448:	2200      	movs	r2, #0
 800844a:	f7f8 f8ed 	bl	8000628 <__aeabi_dmul>
 800844e:	4680      	mov	r8, r0
 8008450:	4689      	mov	r9, r1
 8008452:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008456:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800845a:	9315      	str	r3, [sp, #84]	; 0x54
 800845c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008460:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008464:	e79d      	b.n	80083a2 <_strtod_l+0x9aa>
 8008466:	f1ba 0f01 	cmp.w	sl, #1
 800846a:	d102      	bne.n	8008472 <_strtod_l+0xa7a>
 800846c:	2f00      	cmp	r7, #0
 800846e:	f43f ad83 	beq.w	8007f78 <_strtod_l+0x580>
 8008472:	4b62      	ldr	r3, [pc, #392]	; (80085fc <_strtod_l+0xc04>)
 8008474:	2200      	movs	r2, #0
 8008476:	e78e      	b.n	8008396 <_strtod_l+0x99e>
 8008478:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80085f8 <_strtod_l+0xc00>
 800847c:	f04f 0800 	mov.w	r8, #0
 8008480:	e7e7      	b.n	8008452 <_strtod_l+0xa5a>
 8008482:	4b5d      	ldr	r3, [pc, #372]	; (80085f8 <_strtod_l+0xc00>)
 8008484:	4640      	mov	r0, r8
 8008486:	4649      	mov	r1, r9
 8008488:	2200      	movs	r2, #0
 800848a:	f7f8 f8cd 	bl	8000628 <__aeabi_dmul>
 800848e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008490:	4680      	mov	r8, r0
 8008492:	4689      	mov	r9, r1
 8008494:	b933      	cbnz	r3, 80084a4 <_strtod_l+0xaac>
 8008496:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800849a:	900e      	str	r0, [sp, #56]	; 0x38
 800849c:	930f      	str	r3, [sp, #60]	; 0x3c
 800849e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80084a2:	e7dd      	b.n	8008460 <_strtod_l+0xa68>
 80084a4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80084a8:	e7f9      	b.n	800849e <_strtod_l+0xaa6>
 80084aa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80084ae:	9b04      	ldr	r3, [sp, #16]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1a8      	bne.n	8008406 <_strtod_l+0xa0e>
 80084b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80084b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084ba:	0d1b      	lsrs	r3, r3, #20
 80084bc:	051b      	lsls	r3, r3, #20
 80084be:	429a      	cmp	r2, r3
 80084c0:	d1a1      	bne.n	8008406 <_strtod_l+0xa0e>
 80084c2:	4640      	mov	r0, r8
 80084c4:	4649      	mov	r1, r9
 80084c6:	f7f8 fd55 	bl	8000f74 <__aeabi_d2lz>
 80084ca:	f7f8 f87f 	bl	80005cc <__aeabi_l2d>
 80084ce:	4602      	mov	r2, r0
 80084d0:	460b      	mov	r3, r1
 80084d2:	4640      	mov	r0, r8
 80084d4:	4649      	mov	r1, r9
 80084d6:	f7f7 feef 	bl	80002b8 <__aeabi_dsub>
 80084da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084e0:	ea43 030a 	orr.w	r3, r3, sl
 80084e4:	4313      	orrs	r3, r2
 80084e6:	4680      	mov	r8, r0
 80084e8:	4689      	mov	r9, r1
 80084ea:	d055      	beq.n	8008598 <_strtod_l+0xba0>
 80084ec:	a336      	add	r3, pc, #216	; (adr r3, 80085c8 <_strtod_l+0xbd0>)
 80084ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f2:	f7f8 fb0b 	bl	8000b0c <__aeabi_dcmplt>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	f47f acd0 	bne.w	8007e9c <_strtod_l+0x4a4>
 80084fc:	a334      	add	r3, pc, #208	; (adr r3, 80085d0 <_strtod_l+0xbd8>)
 80084fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008502:	4640      	mov	r0, r8
 8008504:	4649      	mov	r1, r9
 8008506:	f7f8 fb1f 	bl	8000b48 <__aeabi_dcmpgt>
 800850a:	2800      	cmp	r0, #0
 800850c:	f43f af7b 	beq.w	8008406 <_strtod_l+0xa0e>
 8008510:	e4c4      	b.n	8007e9c <_strtod_l+0x4a4>
 8008512:	9b04      	ldr	r3, [sp, #16]
 8008514:	b333      	cbz	r3, 8008564 <_strtod_l+0xb6c>
 8008516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008518:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800851c:	d822      	bhi.n	8008564 <_strtod_l+0xb6c>
 800851e:	a32e      	add	r3, pc, #184	; (adr r3, 80085d8 <_strtod_l+0xbe0>)
 8008520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008524:	4640      	mov	r0, r8
 8008526:	4649      	mov	r1, r9
 8008528:	f7f8 fafa 	bl	8000b20 <__aeabi_dcmple>
 800852c:	b1a0      	cbz	r0, 8008558 <_strtod_l+0xb60>
 800852e:	4649      	mov	r1, r9
 8008530:	4640      	mov	r0, r8
 8008532:	f7f8 fb51 	bl	8000bd8 <__aeabi_d2uiz>
 8008536:	2801      	cmp	r0, #1
 8008538:	bf38      	it	cc
 800853a:	2001      	movcc	r0, #1
 800853c:	f7f7 fffa 	bl	8000534 <__aeabi_ui2d>
 8008540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008542:	4680      	mov	r8, r0
 8008544:	4689      	mov	r9, r1
 8008546:	bb23      	cbnz	r3, 8008592 <_strtod_l+0xb9a>
 8008548:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800854c:	9010      	str	r0, [sp, #64]	; 0x40
 800854e:	9311      	str	r3, [sp, #68]	; 0x44
 8008550:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008554:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800855a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800855c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008560:	1a9b      	subs	r3, r3, r2
 8008562:	9309      	str	r3, [sp, #36]	; 0x24
 8008564:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008568:	eeb0 0a48 	vmov.f32	s0, s16
 800856c:	eef0 0a68 	vmov.f32	s1, s17
 8008570:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008574:	f001 fe8e 	bl	800a294 <__ulp>
 8008578:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800857c:	ec53 2b10 	vmov	r2, r3, d0
 8008580:	f7f8 f852 	bl	8000628 <__aeabi_dmul>
 8008584:	ec53 2b18 	vmov	r2, r3, d8
 8008588:	f7f7 fe98 	bl	80002bc <__adddf3>
 800858c:	4682      	mov	sl, r0
 800858e:	468b      	mov	fp, r1
 8008590:	e78d      	b.n	80084ae <_strtod_l+0xab6>
 8008592:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008596:	e7db      	b.n	8008550 <_strtod_l+0xb58>
 8008598:	a311      	add	r3, pc, #68	; (adr r3, 80085e0 <_strtod_l+0xbe8>)
 800859a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859e:	f7f8 fab5 	bl	8000b0c <__aeabi_dcmplt>
 80085a2:	e7b2      	b.n	800850a <_strtod_l+0xb12>
 80085a4:	2300      	movs	r3, #0
 80085a6:	930a      	str	r3, [sp, #40]	; 0x28
 80085a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80085aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085ac:	6013      	str	r3, [r2, #0]
 80085ae:	f7ff ba6b 	b.w	8007a88 <_strtod_l+0x90>
 80085b2:	2a65      	cmp	r2, #101	; 0x65
 80085b4:	f43f ab5f 	beq.w	8007c76 <_strtod_l+0x27e>
 80085b8:	2a45      	cmp	r2, #69	; 0x45
 80085ba:	f43f ab5c 	beq.w	8007c76 <_strtod_l+0x27e>
 80085be:	2301      	movs	r3, #1
 80085c0:	f7ff bb94 	b.w	8007cec <_strtod_l+0x2f4>
 80085c4:	f3af 8000 	nop.w
 80085c8:	94a03595 	.word	0x94a03595
 80085cc:	3fdfffff 	.word	0x3fdfffff
 80085d0:	35afe535 	.word	0x35afe535
 80085d4:	3fe00000 	.word	0x3fe00000
 80085d8:	ffc00000 	.word	0xffc00000
 80085dc:	41dfffff 	.word	0x41dfffff
 80085e0:	94a03595 	.word	0x94a03595
 80085e4:	3fcfffff 	.word	0x3fcfffff
 80085e8:	3ff00000 	.word	0x3ff00000
 80085ec:	7ff00000 	.word	0x7ff00000
 80085f0:	7fe00000 	.word	0x7fe00000
 80085f4:	7c9fffff 	.word	0x7c9fffff
 80085f8:	3fe00000 	.word	0x3fe00000
 80085fc:	bff00000 	.word	0xbff00000
 8008600:	7fefffff 	.word	0x7fefffff

08008604 <_strtod_r>:
 8008604:	4b01      	ldr	r3, [pc, #4]	; (800860c <_strtod_r+0x8>)
 8008606:	f7ff b9f7 	b.w	80079f8 <_strtod_l>
 800860a:	bf00      	nop
 800860c:	20000074 	.word	0x20000074

08008610 <_strtol_l.constprop.0>:
 8008610:	2b01      	cmp	r3, #1
 8008612:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008616:	d001      	beq.n	800861c <_strtol_l.constprop.0+0xc>
 8008618:	2b24      	cmp	r3, #36	; 0x24
 800861a:	d906      	bls.n	800862a <_strtol_l.constprop.0+0x1a>
 800861c:	f7fe fa8c 	bl	8006b38 <__errno>
 8008620:	2316      	movs	r3, #22
 8008622:	6003      	str	r3, [r0, #0]
 8008624:	2000      	movs	r0, #0
 8008626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800862a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008710 <_strtol_l.constprop.0+0x100>
 800862e:	460d      	mov	r5, r1
 8008630:	462e      	mov	r6, r5
 8008632:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008636:	f814 700c 	ldrb.w	r7, [r4, ip]
 800863a:	f017 0708 	ands.w	r7, r7, #8
 800863e:	d1f7      	bne.n	8008630 <_strtol_l.constprop.0+0x20>
 8008640:	2c2d      	cmp	r4, #45	; 0x2d
 8008642:	d132      	bne.n	80086aa <_strtol_l.constprop.0+0x9a>
 8008644:	782c      	ldrb	r4, [r5, #0]
 8008646:	2701      	movs	r7, #1
 8008648:	1cb5      	adds	r5, r6, #2
 800864a:	2b00      	cmp	r3, #0
 800864c:	d05b      	beq.n	8008706 <_strtol_l.constprop.0+0xf6>
 800864e:	2b10      	cmp	r3, #16
 8008650:	d109      	bne.n	8008666 <_strtol_l.constprop.0+0x56>
 8008652:	2c30      	cmp	r4, #48	; 0x30
 8008654:	d107      	bne.n	8008666 <_strtol_l.constprop.0+0x56>
 8008656:	782c      	ldrb	r4, [r5, #0]
 8008658:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800865c:	2c58      	cmp	r4, #88	; 0x58
 800865e:	d14d      	bne.n	80086fc <_strtol_l.constprop.0+0xec>
 8008660:	786c      	ldrb	r4, [r5, #1]
 8008662:	2310      	movs	r3, #16
 8008664:	3502      	adds	r5, #2
 8008666:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800866a:	f108 38ff 	add.w	r8, r8, #4294967295
 800866e:	f04f 0c00 	mov.w	ip, #0
 8008672:	fbb8 f9f3 	udiv	r9, r8, r3
 8008676:	4666      	mov	r6, ip
 8008678:	fb03 8a19 	mls	sl, r3, r9, r8
 800867c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008680:	f1be 0f09 	cmp.w	lr, #9
 8008684:	d816      	bhi.n	80086b4 <_strtol_l.constprop.0+0xa4>
 8008686:	4674      	mov	r4, lr
 8008688:	42a3      	cmp	r3, r4
 800868a:	dd24      	ble.n	80086d6 <_strtol_l.constprop.0+0xc6>
 800868c:	f1bc 0f00 	cmp.w	ip, #0
 8008690:	db1e      	blt.n	80086d0 <_strtol_l.constprop.0+0xc0>
 8008692:	45b1      	cmp	r9, r6
 8008694:	d31c      	bcc.n	80086d0 <_strtol_l.constprop.0+0xc0>
 8008696:	d101      	bne.n	800869c <_strtol_l.constprop.0+0x8c>
 8008698:	45a2      	cmp	sl, r4
 800869a:	db19      	blt.n	80086d0 <_strtol_l.constprop.0+0xc0>
 800869c:	fb06 4603 	mla	r6, r6, r3, r4
 80086a0:	f04f 0c01 	mov.w	ip, #1
 80086a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086a8:	e7e8      	b.n	800867c <_strtol_l.constprop.0+0x6c>
 80086aa:	2c2b      	cmp	r4, #43	; 0x2b
 80086ac:	bf04      	itt	eq
 80086ae:	782c      	ldrbeq	r4, [r5, #0]
 80086b0:	1cb5      	addeq	r5, r6, #2
 80086b2:	e7ca      	b.n	800864a <_strtol_l.constprop.0+0x3a>
 80086b4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80086b8:	f1be 0f19 	cmp.w	lr, #25
 80086bc:	d801      	bhi.n	80086c2 <_strtol_l.constprop.0+0xb2>
 80086be:	3c37      	subs	r4, #55	; 0x37
 80086c0:	e7e2      	b.n	8008688 <_strtol_l.constprop.0+0x78>
 80086c2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80086c6:	f1be 0f19 	cmp.w	lr, #25
 80086ca:	d804      	bhi.n	80086d6 <_strtol_l.constprop.0+0xc6>
 80086cc:	3c57      	subs	r4, #87	; 0x57
 80086ce:	e7db      	b.n	8008688 <_strtol_l.constprop.0+0x78>
 80086d0:	f04f 3cff 	mov.w	ip, #4294967295
 80086d4:	e7e6      	b.n	80086a4 <_strtol_l.constprop.0+0x94>
 80086d6:	f1bc 0f00 	cmp.w	ip, #0
 80086da:	da05      	bge.n	80086e8 <_strtol_l.constprop.0+0xd8>
 80086dc:	2322      	movs	r3, #34	; 0x22
 80086de:	6003      	str	r3, [r0, #0]
 80086e0:	4646      	mov	r6, r8
 80086e2:	b942      	cbnz	r2, 80086f6 <_strtol_l.constprop.0+0xe6>
 80086e4:	4630      	mov	r0, r6
 80086e6:	e79e      	b.n	8008626 <_strtol_l.constprop.0+0x16>
 80086e8:	b107      	cbz	r7, 80086ec <_strtol_l.constprop.0+0xdc>
 80086ea:	4276      	negs	r6, r6
 80086ec:	2a00      	cmp	r2, #0
 80086ee:	d0f9      	beq.n	80086e4 <_strtol_l.constprop.0+0xd4>
 80086f0:	f1bc 0f00 	cmp.w	ip, #0
 80086f4:	d000      	beq.n	80086f8 <_strtol_l.constprop.0+0xe8>
 80086f6:	1e69      	subs	r1, r5, #1
 80086f8:	6011      	str	r1, [r2, #0]
 80086fa:	e7f3      	b.n	80086e4 <_strtol_l.constprop.0+0xd4>
 80086fc:	2430      	movs	r4, #48	; 0x30
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1b1      	bne.n	8008666 <_strtol_l.constprop.0+0x56>
 8008702:	2308      	movs	r3, #8
 8008704:	e7af      	b.n	8008666 <_strtol_l.constprop.0+0x56>
 8008706:	2c30      	cmp	r4, #48	; 0x30
 8008708:	d0a5      	beq.n	8008656 <_strtol_l.constprop.0+0x46>
 800870a:	230a      	movs	r3, #10
 800870c:	e7ab      	b.n	8008666 <_strtol_l.constprop.0+0x56>
 800870e:	bf00      	nop
 8008710:	0800e911 	.word	0x0800e911

08008714 <_strtol_r>:
 8008714:	f7ff bf7c 	b.w	8008610 <_strtol_l.constprop.0>

08008718 <_write_r>:
 8008718:	b538      	push	{r3, r4, r5, lr}
 800871a:	4d07      	ldr	r5, [pc, #28]	; (8008738 <_write_r+0x20>)
 800871c:	4604      	mov	r4, r0
 800871e:	4608      	mov	r0, r1
 8008720:	4611      	mov	r1, r2
 8008722:	2200      	movs	r2, #0
 8008724:	602a      	str	r2, [r5, #0]
 8008726:	461a      	mov	r2, r3
 8008728:	f7fb fa4e 	bl	8003bc8 <_write>
 800872c:	1c43      	adds	r3, r0, #1
 800872e:	d102      	bne.n	8008736 <_write_r+0x1e>
 8008730:	682b      	ldr	r3, [r5, #0]
 8008732:	b103      	cbz	r3, 8008736 <_write_r+0x1e>
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	bd38      	pop	{r3, r4, r5, pc}
 8008738:	20001188 	.word	0x20001188

0800873c <_close_r>:
 800873c:	b538      	push	{r3, r4, r5, lr}
 800873e:	4d06      	ldr	r5, [pc, #24]	; (8008758 <_close_r+0x1c>)
 8008740:	2300      	movs	r3, #0
 8008742:	4604      	mov	r4, r0
 8008744:	4608      	mov	r0, r1
 8008746:	602b      	str	r3, [r5, #0]
 8008748:	f7fb fa5a 	bl	8003c00 <_close>
 800874c:	1c43      	adds	r3, r0, #1
 800874e:	d102      	bne.n	8008756 <_close_r+0x1a>
 8008750:	682b      	ldr	r3, [r5, #0]
 8008752:	b103      	cbz	r3, 8008756 <_close_r+0x1a>
 8008754:	6023      	str	r3, [r4, #0]
 8008756:	bd38      	pop	{r3, r4, r5, pc}
 8008758:	20001188 	.word	0x20001188

0800875c <quorem>:
 800875c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008760:	6903      	ldr	r3, [r0, #16]
 8008762:	690c      	ldr	r4, [r1, #16]
 8008764:	42a3      	cmp	r3, r4
 8008766:	4607      	mov	r7, r0
 8008768:	f2c0 8081 	blt.w	800886e <quorem+0x112>
 800876c:	3c01      	subs	r4, #1
 800876e:	f101 0814 	add.w	r8, r1, #20
 8008772:	f100 0514 	add.w	r5, r0, #20
 8008776:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800877a:	9301      	str	r3, [sp, #4]
 800877c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008780:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008784:	3301      	adds	r3, #1
 8008786:	429a      	cmp	r2, r3
 8008788:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800878c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008790:	fbb2 f6f3 	udiv	r6, r2, r3
 8008794:	d331      	bcc.n	80087fa <quorem+0x9e>
 8008796:	f04f 0e00 	mov.w	lr, #0
 800879a:	4640      	mov	r0, r8
 800879c:	46ac      	mov	ip, r5
 800879e:	46f2      	mov	sl, lr
 80087a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80087a4:	b293      	uxth	r3, r2
 80087a6:	fb06 e303 	mla	r3, r6, r3, lr
 80087aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	ebaa 0303 	sub.w	r3, sl, r3
 80087b4:	f8dc a000 	ldr.w	sl, [ip]
 80087b8:	0c12      	lsrs	r2, r2, #16
 80087ba:	fa13 f38a 	uxtah	r3, r3, sl
 80087be:	fb06 e202 	mla	r2, r6, r2, lr
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	9b00      	ldr	r3, [sp, #0]
 80087c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80087ca:	b292      	uxth	r2, r2
 80087cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80087d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80087d8:	4581      	cmp	r9, r0
 80087da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087de:	f84c 3b04 	str.w	r3, [ip], #4
 80087e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80087e6:	d2db      	bcs.n	80087a0 <quorem+0x44>
 80087e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80087ec:	b92b      	cbnz	r3, 80087fa <quorem+0x9e>
 80087ee:	9b01      	ldr	r3, [sp, #4]
 80087f0:	3b04      	subs	r3, #4
 80087f2:	429d      	cmp	r5, r3
 80087f4:	461a      	mov	r2, r3
 80087f6:	d32e      	bcc.n	8008856 <quorem+0xfa>
 80087f8:	613c      	str	r4, [r7, #16]
 80087fa:	4638      	mov	r0, r7
 80087fc:	f001 fca4 	bl	800a148 <__mcmp>
 8008800:	2800      	cmp	r0, #0
 8008802:	db24      	blt.n	800884e <quorem+0xf2>
 8008804:	3601      	adds	r6, #1
 8008806:	4628      	mov	r0, r5
 8008808:	f04f 0c00 	mov.w	ip, #0
 800880c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008810:	f8d0 e000 	ldr.w	lr, [r0]
 8008814:	b293      	uxth	r3, r2
 8008816:	ebac 0303 	sub.w	r3, ip, r3
 800881a:	0c12      	lsrs	r2, r2, #16
 800881c:	fa13 f38e 	uxtah	r3, r3, lr
 8008820:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008824:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008828:	b29b      	uxth	r3, r3
 800882a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800882e:	45c1      	cmp	r9, r8
 8008830:	f840 3b04 	str.w	r3, [r0], #4
 8008834:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008838:	d2e8      	bcs.n	800880c <quorem+0xb0>
 800883a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800883e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008842:	b922      	cbnz	r2, 800884e <quorem+0xf2>
 8008844:	3b04      	subs	r3, #4
 8008846:	429d      	cmp	r5, r3
 8008848:	461a      	mov	r2, r3
 800884a:	d30a      	bcc.n	8008862 <quorem+0x106>
 800884c:	613c      	str	r4, [r7, #16]
 800884e:	4630      	mov	r0, r6
 8008850:	b003      	add	sp, #12
 8008852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008856:	6812      	ldr	r2, [r2, #0]
 8008858:	3b04      	subs	r3, #4
 800885a:	2a00      	cmp	r2, #0
 800885c:	d1cc      	bne.n	80087f8 <quorem+0x9c>
 800885e:	3c01      	subs	r4, #1
 8008860:	e7c7      	b.n	80087f2 <quorem+0x96>
 8008862:	6812      	ldr	r2, [r2, #0]
 8008864:	3b04      	subs	r3, #4
 8008866:	2a00      	cmp	r2, #0
 8008868:	d1f0      	bne.n	800884c <quorem+0xf0>
 800886a:	3c01      	subs	r4, #1
 800886c:	e7eb      	b.n	8008846 <quorem+0xea>
 800886e:	2000      	movs	r0, #0
 8008870:	e7ee      	b.n	8008850 <quorem+0xf4>
 8008872:	0000      	movs	r0, r0
 8008874:	0000      	movs	r0, r0
	...

08008878 <_dtoa_r>:
 8008878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887c:	ed2d 8b04 	vpush	{d8-d9}
 8008880:	ec57 6b10 	vmov	r6, r7, d0
 8008884:	b093      	sub	sp, #76	; 0x4c
 8008886:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008888:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800888c:	9106      	str	r1, [sp, #24]
 800888e:	ee10 aa10 	vmov	sl, s0
 8008892:	4604      	mov	r4, r0
 8008894:	9209      	str	r2, [sp, #36]	; 0x24
 8008896:	930c      	str	r3, [sp, #48]	; 0x30
 8008898:	46bb      	mov	fp, r7
 800889a:	b975      	cbnz	r5, 80088ba <_dtoa_r+0x42>
 800889c:	2010      	movs	r0, #16
 800889e:	f001 f95f 	bl	8009b60 <malloc>
 80088a2:	4602      	mov	r2, r0
 80088a4:	6260      	str	r0, [r4, #36]	; 0x24
 80088a6:	b920      	cbnz	r0, 80088b2 <_dtoa_r+0x3a>
 80088a8:	4ba7      	ldr	r3, [pc, #668]	; (8008b48 <_dtoa_r+0x2d0>)
 80088aa:	21ea      	movs	r1, #234	; 0xea
 80088ac:	48a7      	ldr	r0, [pc, #668]	; (8008b4c <_dtoa_r+0x2d4>)
 80088ae:	f002 fceb 	bl	800b288 <__assert_func>
 80088b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80088b6:	6005      	str	r5, [r0, #0]
 80088b8:	60c5      	str	r5, [r0, #12]
 80088ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088bc:	6819      	ldr	r1, [r3, #0]
 80088be:	b151      	cbz	r1, 80088d6 <_dtoa_r+0x5e>
 80088c0:	685a      	ldr	r2, [r3, #4]
 80088c2:	604a      	str	r2, [r1, #4]
 80088c4:	2301      	movs	r3, #1
 80088c6:	4093      	lsls	r3, r2
 80088c8:	608b      	str	r3, [r1, #8]
 80088ca:	4620      	mov	r0, r4
 80088cc:	f001 f9b0 	bl	8009c30 <_Bfree>
 80088d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088d2:	2200      	movs	r2, #0
 80088d4:	601a      	str	r2, [r3, #0]
 80088d6:	1e3b      	subs	r3, r7, #0
 80088d8:	bfaa      	itet	ge
 80088da:	2300      	movge	r3, #0
 80088dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80088e0:	f8c8 3000 	strge.w	r3, [r8]
 80088e4:	4b9a      	ldr	r3, [pc, #616]	; (8008b50 <_dtoa_r+0x2d8>)
 80088e6:	bfbc      	itt	lt
 80088e8:	2201      	movlt	r2, #1
 80088ea:	f8c8 2000 	strlt.w	r2, [r8]
 80088ee:	ea33 030b 	bics.w	r3, r3, fp
 80088f2:	d11b      	bne.n	800892c <_dtoa_r+0xb4>
 80088f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80088fa:	6013      	str	r3, [r2, #0]
 80088fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008900:	4333      	orrs	r3, r6
 8008902:	f000 8592 	beq.w	800942a <_dtoa_r+0xbb2>
 8008906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008908:	b963      	cbnz	r3, 8008924 <_dtoa_r+0xac>
 800890a:	4b92      	ldr	r3, [pc, #584]	; (8008b54 <_dtoa_r+0x2dc>)
 800890c:	e022      	b.n	8008954 <_dtoa_r+0xdc>
 800890e:	4b92      	ldr	r3, [pc, #584]	; (8008b58 <_dtoa_r+0x2e0>)
 8008910:	9301      	str	r3, [sp, #4]
 8008912:	3308      	adds	r3, #8
 8008914:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008916:	6013      	str	r3, [r2, #0]
 8008918:	9801      	ldr	r0, [sp, #4]
 800891a:	b013      	add	sp, #76	; 0x4c
 800891c:	ecbd 8b04 	vpop	{d8-d9}
 8008920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008924:	4b8b      	ldr	r3, [pc, #556]	; (8008b54 <_dtoa_r+0x2dc>)
 8008926:	9301      	str	r3, [sp, #4]
 8008928:	3303      	adds	r3, #3
 800892a:	e7f3      	b.n	8008914 <_dtoa_r+0x9c>
 800892c:	2200      	movs	r2, #0
 800892e:	2300      	movs	r3, #0
 8008930:	4650      	mov	r0, sl
 8008932:	4659      	mov	r1, fp
 8008934:	f7f8 f8e0 	bl	8000af8 <__aeabi_dcmpeq>
 8008938:	ec4b ab19 	vmov	d9, sl, fp
 800893c:	4680      	mov	r8, r0
 800893e:	b158      	cbz	r0, 8008958 <_dtoa_r+0xe0>
 8008940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008942:	2301      	movs	r3, #1
 8008944:	6013      	str	r3, [r2, #0]
 8008946:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008948:	2b00      	cmp	r3, #0
 800894a:	f000 856b 	beq.w	8009424 <_dtoa_r+0xbac>
 800894e:	4883      	ldr	r0, [pc, #524]	; (8008b5c <_dtoa_r+0x2e4>)
 8008950:	6018      	str	r0, [r3, #0]
 8008952:	1e43      	subs	r3, r0, #1
 8008954:	9301      	str	r3, [sp, #4]
 8008956:	e7df      	b.n	8008918 <_dtoa_r+0xa0>
 8008958:	ec4b ab10 	vmov	d0, sl, fp
 800895c:	aa10      	add	r2, sp, #64	; 0x40
 800895e:	a911      	add	r1, sp, #68	; 0x44
 8008960:	4620      	mov	r0, r4
 8008962:	f001 fd13 	bl	800a38c <__d2b>
 8008966:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800896a:	ee08 0a10 	vmov	s16, r0
 800896e:	2d00      	cmp	r5, #0
 8008970:	f000 8084 	beq.w	8008a7c <_dtoa_r+0x204>
 8008974:	ee19 3a90 	vmov	r3, s19
 8008978:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800897c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008980:	4656      	mov	r6, sl
 8008982:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008986:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800898a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800898e:	4b74      	ldr	r3, [pc, #464]	; (8008b60 <_dtoa_r+0x2e8>)
 8008990:	2200      	movs	r2, #0
 8008992:	4630      	mov	r0, r6
 8008994:	4639      	mov	r1, r7
 8008996:	f7f7 fc8f 	bl	80002b8 <__aeabi_dsub>
 800899a:	a365      	add	r3, pc, #404	; (adr r3, 8008b30 <_dtoa_r+0x2b8>)
 800899c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a0:	f7f7 fe42 	bl	8000628 <__aeabi_dmul>
 80089a4:	a364      	add	r3, pc, #400	; (adr r3, 8008b38 <_dtoa_r+0x2c0>)
 80089a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089aa:	f7f7 fc87 	bl	80002bc <__adddf3>
 80089ae:	4606      	mov	r6, r0
 80089b0:	4628      	mov	r0, r5
 80089b2:	460f      	mov	r7, r1
 80089b4:	f7f7 fdce 	bl	8000554 <__aeabi_i2d>
 80089b8:	a361      	add	r3, pc, #388	; (adr r3, 8008b40 <_dtoa_r+0x2c8>)
 80089ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089be:	f7f7 fe33 	bl	8000628 <__aeabi_dmul>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	4630      	mov	r0, r6
 80089c8:	4639      	mov	r1, r7
 80089ca:	f7f7 fc77 	bl	80002bc <__adddf3>
 80089ce:	4606      	mov	r6, r0
 80089d0:	460f      	mov	r7, r1
 80089d2:	f7f8 f8d9 	bl	8000b88 <__aeabi_d2iz>
 80089d6:	2200      	movs	r2, #0
 80089d8:	9000      	str	r0, [sp, #0]
 80089da:	2300      	movs	r3, #0
 80089dc:	4630      	mov	r0, r6
 80089de:	4639      	mov	r1, r7
 80089e0:	f7f8 f894 	bl	8000b0c <__aeabi_dcmplt>
 80089e4:	b150      	cbz	r0, 80089fc <_dtoa_r+0x184>
 80089e6:	9800      	ldr	r0, [sp, #0]
 80089e8:	f7f7 fdb4 	bl	8000554 <__aeabi_i2d>
 80089ec:	4632      	mov	r2, r6
 80089ee:	463b      	mov	r3, r7
 80089f0:	f7f8 f882 	bl	8000af8 <__aeabi_dcmpeq>
 80089f4:	b910      	cbnz	r0, 80089fc <_dtoa_r+0x184>
 80089f6:	9b00      	ldr	r3, [sp, #0]
 80089f8:	3b01      	subs	r3, #1
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	9b00      	ldr	r3, [sp, #0]
 80089fe:	2b16      	cmp	r3, #22
 8008a00:	d85a      	bhi.n	8008ab8 <_dtoa_r+0x240>
 8008a02:	9a00      	ldr	r2, [sp, #0]
 8008a04:	4b57      	ldr	r3, [pc, #348]	; (8008b64 <_dtoa_r+0x2ec>)
 8008a06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0e:	ec51 0b19 	vmov	r0, r1, d9
 8008a12:	f7f8 f87b 	bl	8000b0c <__aeabi_dcmplt>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d050      	beq.n	8008abc <_dtoa_r+0x244>
 8008a1a:	9b00      	ldr	r3, [sp, #0]
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	2300      	movs	r3, #0
 8008a22:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a26:	1b5d      	subs	r5, r3, r5
 8008a28:	1e6b      	subs	r3, r5, #1
 8008a2a:	9305      	str	r3, [sp, #20]
 8008a2c:	bf45      	ittet	mi
 8008a2e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008a32:	9304      	strmi	r3, [sp, #16]
 8008a34:	2300      	movpl	r3, #0
 8008a36:	2300      	movmi	r3, #0
 8008a38:	bf4c      	ite	mi
 8008a3a:	9305      	strmi	r3, [sp, #20]
 8008a3c:	9304      	strpl	r3, [sp, #16]
 8008a3e:	9b00      	ldr	r3, [sp, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	db3d      	blt.n	8008ac0 <_dtoa_r+0x248>
 8008a44:	9b05      	ldr	r3, [sp, #20]
 8008a46:	9a00      	ldr	r2, [sp, #0]
 8008a48:	920a      	str	r2, [sp, #40]	; 0x28
 8008a4a:	4413      	add	r3, r2
 8008a4c:	9305      	str	r3, [sp, #20]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	9307      	str	r3, [sp, #28]
 8008a52:	9b06      	ldr	r3, [sp, #24]
 8008a54:	2b09      	cmp	r3, #9
 8008a56:	f200 8089 	bhi.w	8008b6c <_dtoa_r+0x2f4>
 8008a5a:	2b05      	cmp	r3, #5
 8008a5c:	bfc4      	itt	gt
 8008a5e:	3b04      	subgt	r3, #4
 8008a60:	9306      	strgt	r3, [sp, #24]
 8008a62:	9b06      	ldr	r3, [sp, #24]
 8008a64:	f1a3 0302 	sub.w	r3, r3, #2
 8008a68:	bfcc      	ite	gt
 8008a6a:	2500      	movgt	r5, #0
 8008a6c:	2501      	movle	r5, #1
 8008a6e:	2b03      	cmp	r3, #3
 8008a70:	f200 8087 	bhi.w	8008b82 <_dtoa_r+0x30a>
 8008a74:	e8df f003 	tbb	[pc, r3]
 8008a78:	59383a2d 	.word	0x59383a2d
 8008a7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008a80:	441d      	add	r5, r3
 8008a82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008a86:	2b20      	cmp	r3, #32
 8008a88:	bfc1      	itttt	gt
 8008a8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008a92:	fa0b f303 	lslgt.w	r3, fp, r3
 8008a96:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008a9a:	bfda      	itte	le
 8008a9c:	f1c3 0320 	rsble	r3, r3, #32
 8008aa0:	fa06 f003 	lslle.w	r0, r6, r3
 8008aa4:	4318      	orrgt	r0, r3
 8008aa6:	f7f7 fd45 	bl	8000534 <__aeabi_ui2d>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	4606      	mov	r6, r0
 8008aae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008ab2:	3d01      	subs	r5, #1
 8008ab4:	930e      	str	r3, [sp, #56]	; 0x38
 8008ab6:	e76a      	b.n	800898e <_dtoa_r+0x116>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e7b2      	b.n	8008a22 <_dtoa_r+0x1aa>
 8008abc:	900b      	str	r0, [sp, #44]	; 0x2c
 8008abe:	e7b1      	b.n	8008a24 <_dtoa_r+0x1ac>
 8008ac0:	9b04      	ldr	r3, [sp, #16]
 8008ac2:	9a00      	ldr	r2, [sp, #0]
 8008ac4:	1a9b      	subs	r3, r3, r2
 8008ac6:	9304      	str	r3, [sp, #16]
 8008ac8:	4253      	negs	r3, r2
 8008aca:	9307      	str	r3, [sp, #28]
 8008acc:	2300      	movs	r3, #0
 8008ace:	930a      	str	r3, [sp, #40]	; 0x28
 8008ad0:	e7bf      	b.n	8008a52 <_dtoa_r+0x1da>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	9308      	str	r3, [sp, #32]
 8008ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	dc55      	bgt.n	8008b88 <_dtoa_r+0x310>
 8008adc:	2301      	movs	r3, #1
 8008ade:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ae6:	e00c      	b.n	8008b02 <_dtoa_r+0x28a>
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e7f3      	b.n	8008ad4 <_dtoa_r+0x25c>
 8008aec:	2300      	movs	r3, #0
 8008aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008af0:	9308      	str	r3, [sp, #32]
 8008af2:	9b00      	ldr	r3, [sp, #0]
 8008af4:	4413      	add	r3, r2
 8008af6:	9302      	str	r3, [sp, #8]
 8008af8:	3301      	adds	r3, #1
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	9303      	str	r3, [sp, #12]
 8008afe:	bfb8      	it	lt
 8008b00:	2301      	movlt	r3, #1
 8008b02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008b04:	2200      	movs	r2, #0
 8008b06:	6042      	str	r2, [r0, #4]
 8008b08:	2204      	movs	r2, #4
 8008b0a:	f102 0614 	add.w	r6, r2, #20
 8008b0e:	429e      	cmp	r6, r3
 8008b10:	6841      	ldr	r1, [r0, #4]
 8008b12:	d93d      	bls.n	8008b90 <_dtoa_r+0x318>
 8008b14:	4620      	mov	r0, r4
 8008b16:	f001 f84b 	bl	8009bb0 <_Balloc>
 8008b1a:	9001      	str	r0, [sp, #4]
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	d13b      	bne.n	8008b98 <_dtoa_r+0x320>
 8008b20:	4b11      	ldr	r3, [pc, #68]	; (8008b68 <_dtoa_r+0x2f0>)
 8008b22:	4602      	mov	r2, r0
 8008b24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008b28:	e6c0      	b.n	80088ac <_dtoa_r+0x34>
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e7df      	b.n	8008aee <_dtoa_r+0x276>
 8008b2e:	bf00      	nop
 8008b30:	636f4361 	.word	0x636f4361
 8008b34:	3fd287a7 	.word	0x3fd287a7
 8008b38:	8b60c8b3 	.word	0x8b60c8b3
 8008b3c:	3fc68a28 	.word	0x3fc68a28
 8008b40:	509f79fb 	.word	0x509f79fb
 8008b44:	3fd34413 	.word	0x3fd34413
 8008b48:	0800ea1e 	.word	0x0800ea1e
 8008b4c:	0800ea35 	.word	0x0800ea35
 8008b50:	7ff00000 	.word	0x7ff00000
 8008b54:	0800ea1a 	.word	0x0800ea1a
 8008b58:	0800ea11 	.word	0x0800ea11
 8008b5c:	0800ec8a 	.word	0x0800ec8a
 8008b60:	3ff80000 	.word	0x3ff80000
 8008b64:	0800eba0 	.word	0x0800eba0
 8008b68:	0800ea90 	.word	0x0800ea90
 8008b6c:	2501      	movs	r5, #1
 8008b6e:	2300      	movs	r3, #0
 8008b70:	9306      	str	r3, [sp, #24]
 8008b72:	9508      	str	r5, [sp, #32]
 8008b74:	f04f 33ff 	mov.w	r3, #4294967295
 8008b78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	2312      	movs	r3, #18
 8008b80:	e7b0      	b.n	8008ae4 <_dtoa_r+0x26c>
 8008b82:	2301      	movs	r3, #1
 8008b84:	9308      	str	r3, [sp, #32]
 8008b86:	e7f5      	b.n	8008b74 <_dtoa_r+0x2fc>
 8008b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008b8e:	e7b8      	b.n	8008b02 <_dtoa_r+0x28a>
 8008b90:	3101      	adds	r1, #1
 8008b92:	6041      	str	r1, [r0, #4]
 8008b94:	0052      	lsls	r2, r2, #1
 8008b96:	e7b8      	b.n	8008b0a <_dtoa_r+0x292>
 8008b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b9a:	9a01      	ldr	r2, [sp, #4]
 8008b9c:	601a      	str	r2, [r3, #0]
 8008b9e:	9b03      	ldr	r3, [sp, #12]
 8008ba0:	2b0e      	cmp	r3, #14
 8008ba2:	f200 809d 	bhi.w	8008ce0 <_dtoa_r+0x468>
 8008ba6:	2d00      	cmp	r5, #0
 8008ba8:	f000 809a 	beq.w	8008ce0 <_dtoa_r+0x468>
 8008bac:	9b00      	ldr	r3, [sp, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	dd32      	ble.n	8008c18 <_dtoa_r+0x3a0>
 8008bb2:	4ab7      	ldr	r2, [pc, #732]	; (8008e90 <_dtoa_r+0x618>)
 8008bb4:	f003 030f 	and.w	r3, r3, #15
 8008bb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008bbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008bc0:	9b00      	ldr	r3, [sp, #0]
 8008bc2:	05d8      	lsls	r0, r3, #23
 8008bc4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008bc8:	d516      	bpl.n	8008bf8 <_dtoa_r+0x380>
 8008bca:	4bb2      	ldr	r3, [pc, #712]	; (8008e94 <_dtoa_r+0x61c>)
 8008bcc:	ec51 0b19 	vmov	r0, r1, d9
 8008bd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008bd4:	f7f7 fe52 	bl	800087c <__aeabi_ddiv>
 8008bd8:	f007 070f 	and.w	r7, r7, #15
 8008bdc:	4682      	mov	sl, r0
 8008bde:	468b      	mov	fp, r1
 8008be0:	2503      	movs	r5, #3
 8008be2:	4eac      	ldr	r6, [pc, #688]	; (8008e94 <_dtoa_r+0x61c>)
 8008be4:	b957      	cbnz	r7, 8008bfc <_dtoa_r+0x384>
 8008be6:	4642      	mov	r2, r8
 8008be8:	464b      	mov	r3, r9
 8008bea:	4650      	mov	r0, sl
 8008bec:	4659      	mov	r1, fp
 8008bee:	f7f7 fe45 	bl	800087c <__aeabi_ddiv>
 8008bf2:	4682      	mov	sl, r0
 8008bf4:	468b      	mov	fp, r1
 8008bf6:	e028      	b.n	8008c4a <_dtoa_r+0x3d2>
 8008bf8:	2502      	movs	r5, #2
 8008bfa:	e7f2      	b.n	8008be2 <_dtoa_r+0x36a>
 8008bfc:	07f9      	lsls	r1, r7, #31
 8008bfe:	d508      	bpl.n	8008c12 <_dtoa_r+0x39a>
 8008c00:	4640      	mov	r0, r8
 8008c02:	4649      	mov	r1, r9
 8008c04:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c08:	f7f7 fd0e 	bl	8000628 <__aeabi_dmul>
 8008c0c:	3501      	adds	r5, #1
 8008c0e:	4680      	mov	r8, r0
 8008c10:	4689      	mov	r9, r1
 8008c12:	107f      	asrs	r7, r7, #1
 8008c14:	3608      	adds	r6, #8
 8008c16:	e7e5      	b.n	8008be4 <_dtoa_r+0x36c>
 8008c18:	f000 809b 	beq.w	8008d52 <_dtoa_r+0x4da>
 8008c1c:	9b00      	ldr	r3, [sp, #0]
 8008c1e:	4f9d      	ldr	r7, [pc, #628]	; (8008e94 <_dtoa_r+0x61c>)
 8008c20:	425e      	negs	r6, r3
 8008c22:	4b9b      	ldr	r3, [pc, #620]	; (8008e90 <_dtoa_r+0x618>)
 8008c24:	f006 020f 	and.w	r2, r6, #15
 8008c28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c30:	ec51 0b19 	vmov	r0, r1, d9
 8008c34:	f7f7 fcf8 	bl	8000628 <__aeabi_dmul>
 8008c38:	1136      	asrs	r6, r6, #4
 8008c3a:	4682      	mov	sl, r0
 8008c3c:	468b      	mov	fp, r1
 8008c3e:	2300      	movs	r3, #0
 8008c40:	2502      	movs	r5, #2
 8008c42:	2e00      	cmp	r6, #0
 8008c44:	d17a      	bne.n	8008d3c <_dtoa_r+0x4c4>
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1d3      	bne.n	8008bf2 <_dtoa_r+0x37a>
 8008c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f000 8082 	beq.w	8008d56 <_dtoa_r+0x4de>
 8008c52:	4b91      	ldr	r3, [pc, #580]	; (8008e98 <_dtoa_r+0x620>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	4650      	mov	r0, sl
 8008c58:	4659      	mov	r1, fp
 8008c5a:	f7f7 ff57 	bl	8000b0c <__aeabi_dcmplt>
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	d079      	beq.n	8008d56 <_dtoa_r+0x4de>
 8008c62:	9b03      	ldr	r3, [sp, #12]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d076      	beq.n	8008d56 <_dtoa_r+0x4de>
 8008c68:	9b02      	ldr	r3, [sp, #8]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	dd36      	ble.n	8008cdc <_dtoa_r+0x464>
 8008c6e:	9b00      	ldr	r3, [sp, #0]
 8008c70:	4650      	mov	r0, sl
 8008c72:	4659      	mov	r1, fp
 8008c74:	1e5f      	subs	r7, r3, #1
 8008c76:	2200      	movs	r2, #0
 8008c78:	4b88      	ldr	r3, [pc, #544]	; (8008e9c <_dtoa_r+0x624>)
 8008c7a:	f7f7 fcd5 	bl	8000628 <__aeabi_dmul>
 8008c7e:	9e02      	ldr	r6, [sp, #8]
 8008c80:	4682      	mov	sl, r0
 8008c82:	468b      	mov	fp, r1
 8008c84:	3501      	adds	r5, #1
 8008c86:	4628      	mov	r0, r5
 8008c88:	f7f7 fc64 	bl	8000554 <__aeabi_i2d>
 8008c8c:	4652      	mov	r2, sl
 8008c8e:	465b      	mov	r3, fp
 8008c90:	f7f7 fcca 	bl	8000628 <__aeabi_dmul>
 8008c94:	4b82      	ldr	r3, [pc, #520]	; (8008ea0 <_dtoa_r+0x628>)
 8008c96:	2200      	movs	r2, #0
 8008c98:	f7f7 fb10 	bl	80002bc <__adddf3>
 8008c9c:	46d0      	mov	r8, sl
 8008c9e:	46d9      	mov	r9, fp
 8008ca0:	4682      	mov	sl, r0
 8008ca2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008ca6:	2e00      	cmp	r6, #0
 8008ca8:	d158      	bne.n	8008d5c <_dtoa_r+0x4e4>
 8008caa:	4b7e      	ldr	r3, [pc, #504]	; (8008ea4 <_dtoa_r+0x62c>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	4640      	mov	r0, r8
 8008cb0:	4649      	mov	r1, r9
 8008cb2:	f7f7 fb01 	bl	80002b8 <__aeabi_dsub>
 8008cb6:	4652      	mov	r2, sl
 8008cb8:	465b      	mov	r3, fp
 8008cba:	4680      	mov	r8, r0
 8008cbc:	4689      	mov	r9, r1
 8008cbe:	f7f7 ff43 	bl	8000b48 <__aeabi_dcmpgt>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	f040 8295 	bne.w	80091f2 <_dtoa_r+0x97a>
 8008cc8:	4652      	mov	r2, sl
 8008cca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008cce:	4640      	mov	r0, r8
 8008cd0:	4649      	mov	r1, r9
 8008cd2:	f7f7 ff1b 	bl	8000b0c <__aeabi_dcmplt>
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	f040 8289 	bne.w	80091ee <_dtoa_r+0x976>
 8008cdc:	ec5b ab19 	vmov	sl, fp, d9
 8008ce0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f2c0 8148 	blt.w	8008f78 <_dtoa_r+0x700>
 8008ce8:	9a00      	ldr	r2, [sp, #0]
 8008cea:	2a0e      	cmp	r2, #14
 8008cec:	f300 8144 	bgt.w	8008f78 <_dtoa_r+0x700>
 8008cf0:	4b67      	ldr	r3, [pc, #412]	; (8008e90 <_dtoa_r+0x618>)
 8008cf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cf6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f280 80d5 	bge.w	8008eac <_dtoa_r+0x634>
 8008d02:	9b03      	ldr	r3, [sp, #12]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f300 80d1 	bgt.w	8008eac <_dtoa_r+0x634>
 8008d0a:	f040 826f 	bne.w	80091ec <_dtoa_r+0x974>
 8008d0e:	4b65      	ldr	r3, [pc, #404]	; (8008ea4 <_dtoa_r+0x62c>)
 8008d10:	2200      	movs	r2, #0
 8008d12:	4640      	mov	r0, r8
 8008d14:	4649      	mov	r1, r9
 8008d16:	f7f7 fc87 	bl	8000628 <__aeabi_dmul>
 8008d1a:	4652      	mov	r2, sl
 8008d1c:	465b      	mov	r3, fp
 8008d1e:	f7f7 ff09 	bl	8000b34 <__aeabi_dcmpge>
 8008d22:	9e03      	ldr	r6, [sp, #12]
 8008d24:	4637      	mov	r7, r6
 8008d26:	2800      	cmp	r0, #0
 8008d28:	f040 8245 	bne.w	80091b6 <_dtoa_r+0x93e>
 8008d2c:	9d01      	ldr	r5, [sp, #4]
 8008d2e:	2331      	movs	r3, #49	; 0x31
 8008d30:	f805 3b01 	strb.w	r3, [r5], #1
 8008d34:	9b00      	ldr	r3, [sp, #0]
 8008d36:	3301      	adds	r3, #1
 8008d38:	9300      	str	r3, [sp, #0]
 8008d3a:	e240      	b.n	80091be <_dtoa_r+0x946>
 8008d3c:	07f2      	lsls	r2, r6, #31
 8008d3e:	d505      	bpl.n	8008d4c <_dtoa_r+0x4d4>
 8008d40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d44:	f7f7 fc70 	bl	8000628 <__aeabi_dmul>
 8008d48:	3501      	adds	r5, #1
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	1076      	asrs	r6, r6, #1
 8008d4e:	3708      	adds	r7, #8
 8008d50:	e777      	b.n	8008c42 <_dtoa_r+0x3ca>
 8008d52:	2502      	movs	r5, #2
 8008d54:	e779      	b.n	8008c4a <_dtoa_r+0x3d2>
 8008d56:	9f00      	ldr	r7, [sp, #0]
 8008d58:	9e03      	ldr	r6, [sp, #12]
 8008d5a:	e794      	b.n	8008c86 <_dtoa_r+0x40e>
 8008d5c:	9901      	ldr	r1, [sp, #4]
 8008d5e:	4b4c      	ldr	r3, [pc, #304]	; (8008e90 <_dtoa_r+0x618>)
 8008d60:	4431      	add	r1, r6
 8008d62:	910d      	str	r1, [sp, #52]	; 0x34
 8008d64:	9908      	ldr	r1, [sp, #32]
 8008d66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008d6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d6e:	2900      	cmp	r1, #0
 8008d70:	d043      	beq.n	8008dfa <_dtoa_r+0x582>
 8008d72:	494d      	ldr	r1, [pc, #308]	; (8008ea8 <_dtoa_r+0x630>)
 8008d74:	2000      	movs	r0, #0
 8008d76:	f7f7 fd81 	bl	800087c <__aeabi_ddiv>
 8008d7a:	4652      	mov	r2, sl
 8008d7c:	465b      	mov	r3, fp
 8008d7e:	f7f7 fa9b 	bl	80002b8 <__aeabi_dsub>
 8008d82:	9d01      	ldr	r5, [sp, #4]
 8008d84:	4682      	mov	sl, r0
 8008d86:	468b      	mov	fp, r1
 8008d88:	4649      	mov	r1, r9
 8008d8a:	4640      	mov	r0, r8
 8008d8c:	f7f7 fefc 	bl	8000b88 <__aeabi_d2iz>
 8008d90:	4606      	mov	r6, r0
 8008d92:	f7f7 fbdf 	bl	8000554 <__aeabi_i2d>
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	4640      	mov	r0, r8
 8008d9c:	4649      	mov	r1, r9
 8008d9e:	f7f7 fa8b 	bl	80002b8 <__aeabi_dsub>
 8008da2:	3630      	adds	r6, #48	; 0x30
 8008da4:	f805 6b01 	strb.w	r6, [r5], #1
 8008da8:	4652      	mov	r2, sl
 8008daa:	465b      	mov	r3, fp
 8008dac:	4680      	mov	r8, r0
 8008dae:	4689      	mov	r9, r1
 8008db0:	f7f7 feac 	bl	8000b0c <__aeabi_dcmplt>
 8008db4:	2800      	cmp	r0, #0
 8008db6:	d163      	bne.n	8008e80 <_dtoa_r+0x608>
 8008db8:	4642      	mov	r2, r8
 8008dba:	464b      	mov	r3, r9
 8008dbc:	4936      	ldr	r1, [pc, #216]	; (8008e98 <_dtoa_r+0x620>)
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	f7f7 fa7a 	bl	80002b8 <__aeabi_dsub>
 8008dc4:	4652      	mov	r2, sl
 8008dc6:	465b      	mov	r3, fp
 8008dc8:	f7f7 fea0 	bl	8000b0c <__aeabi_dcmplt>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	f040 80b5 	bne.w	8008f3c <_dtoa_r+0x6c4>
 8008dd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dd4:	429d      	cmp	r5, r3
 8008dd6:	d081      	beq.n	8008cdc <_dtoa_r+0x464>
 8008dd8:	4b30      	ldr	r3, [pc, #192]	; (8008e9c <_dtoa_r+0x624>)
 8008dda:	2200      	movs	r2, #0
 8008ddc:	4650      	mov	r0, sl
 8008dde:	4659      	mov	r1, fp
 8008de0:	f7f7 fc22 	bl	8000628 <__aeabi_dmul>
 8008de4:	4b2d      	ldr	r3, [pc, #180]	; (8008e9c <_dtoa_r+0x624>)
 8008de6:	4682      	mov	sl, r0
 8008de8:	468b      	mov	fp, r1
 8008dea:	4640      	mov	r0, r8
 8008dec:	4649      	mov	r1, r9
 8008dee:	2200      	movs	r2, #0
 8008df0:	f7f7 fc1a 	bl	8000628 <__aeabi_dmul>
 8008df4:	4680      	mov	r8, r0
 8008df6:	4689      	mov	r9, r1
 8008df8:	e7c6      	b.n	8008d88 <_dtoa_r+0x510>
 8008dfa:	4650      	mov	r0, sl
 8008dfc:	4659      	mov	r1, fp
 8008dfe:	f7f7 fc13 	bl	8000628 <__aeabi_dmul>
 8008e02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e04:	9d01      	ldr	r5, [sp, #4]
 8008e06:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e08:	4682      	mov	sl, r0
 8008e0a:	468b      	mov	fp, r1
 8008e0c:	4649      	mov	r1, r9
 8008e0e:	4640      	mov	r0, r8
 8008e10:	f7f7 feba 	bl	8000b88 <__aeabi_d2iz>
 8008e14:	4606      	mov	r6, r0
 8008e16:	f7f7 fb9d 	bl	8000554 <__aeabi_i2d>
 8008e1a:	3630      	adds	r6, #48	; 0x30
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	460b      	mov	r3, r1
 8008e20:	4640      	mov	r0, r8
 8008e22:	4649      	mov	r1, r9
 8008e24:	f7f7 fa48 	bl	80002b8 <__aeabi_dsub>
 8008e28:	f805 6b01 	strb.w	r6, [r5], #1
 8008e2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e2e:	429d      	cmp	r5, r3
 8008e30:	4680      	mov	r8, r0
 8008e32:	4689      	mov	r9, r1
 8008e34:	f04f 0200 	mov.w	r2, #0
 8008e38:	d124      	bne.n	8008e84 <_dtoa_r+0x60c>
 8008e3a:	4b1b      	ldr	r3, [pc, #108]	; (8008ea8 <_dtoa_r+0x630>)
 8008e3c:	4650      	mov	r0, sl
 8008e3e:	4659      	mov	r1, fp
 8008e40:	f7f7 fa3c 	bl	80002bc <__adddf3>
 8008e44:	4602      	mov	r2, r0
 8008e46:	460b      	mov	r3, r1
 8008e48:	4640      	mov	r0, r8
 8008e4a:	4649      	mov	r1, r9
 8008e4c:	f7f7 fe7c 	bl	8000b48 <__aeabi_dcmpgt>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d173      	bne.n	8008f3c <_dtoa_r+0x6c4>
 8008e54:	4652      	mov	r2, sl
 8008e56:	465b      	mov	r3, fp
 8008e58:	4913      	ldr	r1, [pc, #76]	; (8008ea8 <_dtoa_r+0x630>)
 8008e5a:	2000      	movs	r0, #0
 8008e5c:	f7f7 fa2c 	bl	80002b8 <__aeabi_dsub>
 8008e60:	4602      	mov	r2, r0
 8008e62:	460b      	mov	r3, r1
 8008e64:	4640      	mov	r0, r8
 8008e66:	4649      	mov	r1, r9
 8008e68:	f7f7 fe50 	bl	8000b0c <__aeabi_dcmplt>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	f43f af35 	beq.w	8008cdc <_dtoa_r+0x464>
 8008e72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008e74:	1e6b      	subs	r3, r5, #1
 8008e76:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e7c:	2b30      	cmp	r3, #48	; 0x30
 8008e7e:	d0f8      	beq.n	8008e72 <_dtoa_r+0x5fa>
 8008e80:	9700      	str	r7, [sp, #0]
 8008e82:	e049      	b.n	8008f18 <_dtoa_r+0x6a0>
 8008e84:	4b05      	ldr	r3, [pc, #20]	; (8008e9c <_dtoa_r+0x624>)
 8008e86:	f7f7 fbcf 	bl	8000628 <__aeabi_dmul>
 8008e8a:	4680      	mov	r8, r0
 8008e8c:	4689      	mov	r9, r1
 8008e8e:	e7bd      	b.n	8008e0c <_dtoa_r+0x594>
 8008e90:	0800eba0 	.word	0x0800eba0
 8008e94:	0800eb78 	.word	0x0800eb78
 8008e98:	3ff00000 	.word	0x3ff00000
 8008e9c:	40240000 	.word	0x40240000
 8008ea0:	401c0000 	.word	0x401c0000
 8008ea4:	40140000 	.word	0x40140000
 8008ea8:	3fe00000 	.word	0x3fe00000
 8008eac:	9d01      	ldr	r5, [sp, #4]
 8008eae:	4656      	mov	r6, sl
 8008eb0:	465f      	mov	r7, fp
 8008eb2:	4642      	mov	r2, r8
 8008eb4:	464b      	mov	r3, r9
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	4639      	mov	r1, r7
 8008eba:	f7f7 fcdf 	bl	800087c <__aeabi_ddiv>
 8008ebe:	f7f7 fe63 	bl	8000b88 <__aeabi_d2iz>
 8008ec2:	4682      	mov	sl, r0
 8008ec4:	f7f7 fb46 	bl	8000554 <__aeabi_i2d>
 8008ec8:	4642      	mov	r2, r8
 8008eca:	464b      	mov	r3, r9
 8008ecc:	f7f7 fbac 	bl	8000628 <__aeabi_dmul>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	4630      	mov	r0, r6
 8008ed6:	4639      	mov	r1, r7
 8008ed8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008edc:	f7f7 f9ec 	bl	80002b8 <__aeabi_dsub>
 8008ee0:	f805 6b01 	strb.w	r6, [r5], #1
 8008ee4:	9e01      	ldr	r6, [sp, #4]
 8008ee6:	9f03      	ldr	r7, [sp, #12]
 8008ee8:	1bae      	subs	r6, r5, r6
 8008eea:	42b7      	cmp	r7, r6
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	d135      	bne.n	8008f5e <_dtoa_r+0x6e6>
 8008ef2:	f7f7 f9e3 	bl	80002bc <__adddf3>
 8008ef6:	4642      	mov	r2, r8
 8008ef8:	464b      	mov	r3, r9
 8008efa:	4606      	mov	r6, r0
 8008efc:	460f      	mov	r7, r1
 8008efe:	f7f7 fe23 	bl	8000b48 <__aeabi_dcmpgt>
 8008f02:	b9d0      	cbnz	r0, 8008f3a <_dtoa_r+0x6c2>
 8008f04:	4642      	mov	r2, r8
 8008f06:	464b      	mov	r3, r9
 8008f08:	4630      	mov	r0, r6
 8008f0a:	4639      	mov	r1, r7
 8008f0c:	f7f7 fdf4 	bl	8000af8 <__aeabi_dcmpeq>
 8008f10:	b110      	cbz	r0, 8008f18 <_dtoa_r+0x6a0>
 8008f12:	f01a 0f01 	tst.w	sl, #1
 8008f16:	d110      	bne.n	8008f3a <_dtoa_r+0x6c2>
 8008f18:	4620      	mov	r0, r4
 8008f1a:	ee18 1a10 	vmov	r1, s16
 8008f1e:	f000 fe87 	bl	8009c30 <_Bfree>
 8008f22:	2300      	movs	r3, #0
 8008f24:	9800      	ldr	r0, [sp, #0]
 8008f26:	702b      	strb	r3, [r5, #0]
 8008f28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f2a:	3001      	adds	r0, #1
 8008f2c:	6018      	str	r0, [r3, #0]
 8008f2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f43f acf1 	beq.w	8008918 <_dtoa_r+0xa0>
 8008f36:	601d      	str	r5, [r3, #0]
 8008f38:	e4ee      	b.n	8008918 <_dtoa_r+0xa0>
 8008f3a:	9f00      	ldr	r7, [sp, #0]
 8008f3c:	462b      	mov	r3, r5
 8008f3e:	461d      	mov	r5, r3
 8008f40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f44:	2a39      	cmp	r2, #57	; 0x39
 8008f46:	d106      	bne.n	8008f56 <_dtoa_r+0x6de>
 8008f48:	9a01      	ldr	r2, [sp, #4]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d1f7      	bne.n	8008f3e <_dtoa_r+0x6c6>
 8008f4e:	9901      	ldr	r1, [sp, #4]
 8008f50:	2230      	movs	r2, #48	; 0x30
 8008f52:	3701      	adds	r7, #1
 8008f54:	700a      	strb	r2, [r1, #0]
 8008f56:	781a      	ldrb	r2, [r3, #0]
 8008f58:	3201      	adds	r2, #1
 8008f5a:	701a      	strb	r2, [r3, #0]
 8008f5c:	e790      	b.n	8008e80 <_dtoa_r+0x608>
 8008f5e:	4ba6      	ldr	r3, [pc, #664]	; (80091f8 <_dtoa_r+0x980>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	f7f7 fb61 	bl	8000628 <__aeabi_dmul>
 8008f66:	2200      	movs	r2, #0
 8008f68:	2300      	movs	r3, #0
 8008f6a:	4606      	mov	r6, r0
 8008f6c:	460f      	mov	r7, r1
 8008f6e:	f7f7 fdc3 	bl	8000af8 <__aeabi_dcmpeq>
 8008f72:	2800      	cmp	r0, #0
 8008f74:	d09d      	beq.n	8008eb2 <_dtoa_r+0x63a>
 8008f76:	e7cf      	b.n	8008f18 <_dtoa_r+0x6a0>
 8008f78:	9a08      	ldr	r2, [sp, #32]
 8008f7a:	2a00      	cmp	r2, #0
 8008f7c:	f000 80d7 	beq.w	800912e <_dtoa_r+0x8b6>
 8008f80:	9a06      	ldr	r2, [sp, #24]
 8008f82:	2a01      	cmp	r2, #1
 8008f84:	f300 80ba 	bgt.w	80090fc <_dtoa_r+0x884>
 8008f88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f8a:	2a00      	cmp	r2, #0
 8008f8c:	f000 80b2 	beq.w	80090f4 <_dtoa_r+0x87c>
 8008f90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f94:	9e07      	ldr	r6, [sp, #28]
 8008f96:	9d04      	ldr	r5, [sp, #16]
 8008f98:	9a04      	ldr	r2, [sp, #16]
 8008f9a:	441a      	add	r2, r3
 8008f9c:	9204      	str	r2, [sp, #16]
 8008f9e:	9a05      	ldr	r2, [sp, #20]
 8008fa0:	2101      	movs	r1, #1
 8008fa2:	441a      	add	r2, r3
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	9205      	str	r2, [sp, #20]
 8008fa8:	f000 ff44 	bl	8009e34 <__i2b>
 8008fac:	4607      	mov	r7, r0
 8008fae:	2d00      	cmp	r5, #0
 8008fb0:	dd0c      	ble.n	8008fcc <_dtoa_r+0x754>
 8008fb2:	9b05      	ldr	r3, [sp, #20]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	dd09      	ble.n	8008fcc <_dtoa_r+0x754>
 8008fb8:	42ab      	cmp	r3, r5
 8008fba:	9a04      	ldr	r2, [sp, #16]
 8008fbc:	bfa8      	it	ge
 8008fbe:	462b      	movge	r3, r5
 8008fc0:	1ad2      	subs	r2, r2, r3
 8008fc2:	9204      	str	r2, [sp, #16]
 8008fc4:	9a05      	ldr	r2, [sp, #20]
 8008fc6:	1aed      	subs	r5, r5, r3
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	9305      	str	r3, [sp, #20]
 8008fcc:	9b07      	ldr	r3, [sp, #28]
 8008fce:	b31b      	cbz	r3, 8009018 <_dtoa_r+0x7a0>
 8008fd0:	9b08      	ldr	r3, [sp, #32]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f000 80af 	beq.w	8009136 <_dtoa_r+0x8be>
 8008fd8:	2e00      	cmp	r6, #0
 8008fda:	dd13      	ble.n	8009004 <_dtoa_r+0x78c>
 8008fdc:	4639      	mov	r1, r7
 8008fde:	4632      	mov	r2, r6
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	f000 ffe7 	bl	8009fb4 <__pow5mult>
 8008fe6:	ee18 2a10 	vmov	r2, s16
 8008fea:	4601      	mov	r1, r0
 8008fec:	4607      	mov	r7, r0
 8008fee:	4620      	mov	r0, r4
 8008ff0:	f000 ff36 	bl	8009e60 <__multiply>
 8008ff4:	ee18 1a10 	vmov	r1, s16
 8008ff8:	4680      	mov	r8, r0
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f000 fe18 	bl	8009c30 <_Bfree>
 8009000:	ee08 8a10 	vmov	s16, r8
 8009004:	9b07      	ldr	r3, [sp, #28]
 8009006:	1b9a      	subs	r2, r3, r6
 8009008:	d006      	beq.n	8009018 <_dtoa_r+0x7a0>
 800900a:	ee18 1a10 	vmov	r1, s16
 800900e:	4620      	mov	r0, r4
 8009010:	f000 ffd0 	bl	8009fb4 <__pow5mult>
 8009014:	ee08 0a10 	vmov	s16, r0
 8009018:	2101      	movs	r1, #1
 800901a:	4620      	mov	r0, r4
 800901c:	f000 ff0a 	bl	8009e34 <__i2b>
 8009020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009022:	2b00      	cmp	r3, #0
 8009024:	4606      	mov	r6, r0
 8009026:	f340 8088 	ble.w	800913a <_dtoa_r+0x8c2>
 800902a:	461a      	mov	r2, r3
 800902c:	4601      	mov	r1, r0
 800902e:	4620      	mov	r0, r4
 8009030:	f000 ffc0 	bl	8009fb4 <__pow5mult>
 8009034:	9b06      	ldr	r3, [sp, #24]
 8009036:	2b01      	cmp	r3, #1
 8009038:	4606      	mov	r6, r0
 800903a:	f340 8081 	ble.w	8009140 <_dtoa_r+0x8c8>
 800903e:	f04f 0800 	mov.w	r8, #0
 8009042:	6933      	ldr	r3, [r6, #16]
 8009044:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009048:	6918      	ldr	r0, [r3, #16]
 800904a:	f000 fea3 	bl	8009d94 <__hi0bits>
 800904e:	f1c0 0020 	rsb	r0, r0, #32
 8009052:	9b05      	ldr	r3, [sp, #20]
 8009054:	4418      	add	r0, r3
 8009056:	f010 001f 	ands.w	r0, r0, #31
 800905a:	f000 8092 	beq.w	8009182 <_dtoa_r+0x90a>
 800905e:	f1c0 0320 	rsb	r3, r0, #32
 8009062:	2b04      	cmp	r3, #4
 8009064:	f340 808a 	ble.w	800917c <_dtoa_r+0x904>
 8009068:	f1c0 001c 	rsb	r0, r0, #28
 800906c:	9b04      	ldr	r3, [sp, #16]
 800906e:	4403      	add	r3, r0
 8009070:	9304      	str	r3, [sp, #16]
 8009072:	9b05      	ldr	r3, [sp, #20]
 8009074:	4403      	add	r3, r0
 8009076:	4405      	add	r5, r0
 8009078:	9305      	str	r3, [sp, #20]
 800907a:	9b04      	ldr	r3, [sp, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	dd07      	ble.n	8009090 <_dtoa_r+0x818>
 8009080:	ee18 1a10 	vmov	r1, s16
 8009084:	461a      	mov	r2, r3
 8009086:	4620      	mov	r0, r4
 8009088:	f000 ffee 	bl	800a068 <__lshift>
 800908c:	ee08 0a10 	vmov	s16, r0
 8009090:	9b05      	ldr	r3, [sp, #20]
 8009092:	2b00      	cmp	r3, #0
 8009094:	dd05      	ble.n	80090a2 <_dtoa_r+0x82a>
 8009096:	4631      	mov	r1, r6
 8009098:	461a      	mov	r2, r3
 800909a:	4620      	mov	r0, r4
 800909c:	f000 ffe4 	bl	800a068 <__lshift>
 80090a0:	4606      	mov	r6, r0
 80090a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d06e      	beq.n	8009186 <_dtoa_r+0x90e>
 80090a8:	ee18 0a10 	vmov	r0, s16
 80090ac:	4631      	mov	r1, r6
 80090ae:	f001 f84b 	bl	800a148 <__mcmp>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	da67      	bge.n	8009186 <_dtoa_r+0x90e>
 80090b6:	9b00      	ldr	r3, [sp, #0]
 80090b8:	3b01      	subs	r3, #1
 80090ba:	ee18 1a10 	vmov	r1, s16
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	220a      	movs	r2, #10
 80090c2:	2300      	movs	r3, #0
 80090c4:	4620      	mov	r0, r4
 80090c6:	f000 fdd5 	bl	8009c74 <__multadd>
 80090ca:	9b08      	ldr	r3, [sp, #32]
 80090cc:	ee08 0a10 	vmov	s16, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f000 81b1 	beq.w	8009438 <_dtoa_r+0xbc0>
 80090d6:	2300      	movs	r3, #0
 80090d8:	4639      	mov	r1, r7
 80090da:	220a      	movs	r2, #10
 80090dc:	4620      	mov	r0, r4
 80090de:	f000 fdc9 	bl	8009c74 <__multadd>
 80090e2:	9b02      	ldr	r3, [sp, #8]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	4607      	mov	r7, r0
 80090e8:	f300 808e 	bgt.w	8009208 <_dtoa_r+0x990>
 80090ec:	9b06      	ldr	r3, [sp, #24]
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	dc51      	bgt.n	8009196 <_dtoa_r+0x91e>
 80090f2:	e089      	b.n	8009208 <_dtoa_r+0x990>
 80090f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80090fa:	e74b      	b.n	8008f94 <_dtoa_r+0x71c>
 80090fc:	9b03      	ldr	r3, [sp, #12]
 80090fe:	1e5e      	subs	r6, r3, #1
 8009100:	9b07      	ldr	r3, [sp, #28]
 8009102:	42b3      	cmp	r3, r6
 8009104:	bfbf      	itttt	lt
 8009106:	9b07      	ldrlt	r3, [sp, #28]
 8009108:	9607      	strlt	r6, [sp, #28]
 800910a:	1af2      	sublt	r2, r6, r3
 800910c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800910e:	bfb6      	itet	lt
 8009110:	189b      	addlt	r3, r3, r2
 8009112:	1b9e      	subge	r6, r3, r6
 8009114:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009116:	9b03      	ldr	r3, [sp, #12]
 8009118:	bfb8      	it	lt
 800911a:	2600      	movlt	r6, #0
 800911c:	2b00      	cmp	r3, #0
 800911e:	bfb7      	itett	lt
 8009120:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009124:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009128:	1a9d      	sublt	r5, r3, r2
 800912a:	2300      	movlt	r3, #0
 800912c:	e734      	b.n	8008f98 <_dtoa_r+0x720>
 800912e:	9e07      	ldr	r6, [sp, #28]
 8009130:	9d04      	ldr	r5, [sp, #16]
 8009132:	9f08      	ldr	r7, [sp, #32]
 8009134:	e73b      	b.n	8008fae <_dtoa_r+0x736>
 8009136:	9a07      	ldr	r2, [sp, #28]
 8009138:	e767      	b.n	800900a <_dtoa_r+0x792>
 800913a:	9b06      	ldr	r3, [sp, #24]
 800913c:	2b01      	cmp	r3, #1
 800913e:	dc18      	bgt.n	8009172 <_dtoa_r+0x8fa>
 8009140:	f1ba 0f00 	cmp.w	sl, #0
 8009144:	d115      	bne.n	8009172 <_dtoa_r+0x8fa>
 8009146:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800914a:	b993      	cbnz	r3, 8009172 <_dtoa_r+0x8fa>
 800914c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009150:	0d1b      	lsrs	r3, r3, #20
 8009152:	051b      	lsls	r3, r3, #20
 8009154:	b183      	cbz	r3, 8009178 <_dtoa_r+0x900>
 8009156:	9b04      	ldr	r3, [sp, #16]
 8009158:	3301      	adds	r3, #1
 800915a:	9304      	str	r3, [sp, #16]
 800915c:	9b05      	ldr	r3, [sp, #20]
 800915e:	3301      	adds	r3, #1
 8009160:	9305      	str	r3, [sp, #20]
 8009162:	f04f 0801 	mov.w	r8, #1
 8009166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009168:	2b00      	cmp	r3, #0
 800916a:	f47f af6a 	bne.w	8009042 <_dtoa_r+0x7ca>
 800916e:	2001      	movs	r0, #1
 8009170:	e76f      	b.n	8009052 <_dtoa_r+0x7da>
 8009172:	f04f 0800 	mov.w	r8, #0
 8009176:	e7f6      	b.n	8009166 <_dtoa_r+0x8ee>
 8009178:	4698      	mov	r8, r3
 800917a:	e7f4      	b.n	8009166 <_dtoa_r+0x8ee>
 800917c:	f43f af7d 	beq.w	800907a <_dtoa_r+0x802>
 8009180:	4618      	mov	r0, r3
 8009182:	301c      	adds	r0, #28
 8009184:	e772      	b.n	800906c <_dtoa_r+0x7f4>
 8009186:	9b03      	ldr	r3, [sp, #12]
 8009188:	2b00      	cmp	r3, #0
 800918a:	dc37      	bgt.n	80091fc <_dtoa_r+0x984>
 800918c:	9b06      	ldr	r3, [sp, #24]
 800918e:	2b02      	cmp	r3, #2
 8009190:	dd34      	ble.n	80091fc <_dtoa_r+0x984>
 8009192:	9b03      	ldr	r3, [sp, #12]
 8009194:	9302      	str	r3, [sp, #8]
 8009196:	9b02      	ldr	r3, [sp, #8]
 8009198:	b96b      	cbnz	r3, 80091b6 <_dtoa_r+0x93e>
 800919a:	4631      	mov	r1, r6
 800919c:	2205      	movs	r2, #5
 800919e:	4620      	mov	r0, r4
 80091a0:	f000 fd68 	bl	8009c74 <__multadd>
 80091a4:	4601      	mov	r1, r0
 80091a6:	4606      	mov	r6, r0
 80091a8:	ee18 0a10 	vmov	r0, s16
 80091ac:	f000 ffcc 	bl	800a148 <__mcmp>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	f73f adbb 	bgt.w	8008d2c <_dtoa_r+0x4b4>
 80091b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091b8:	9d01      	ldr	r5, [sp, #4]
 80091ba:	43db      	mvns	r3, r3
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	f04f 0800 	mov.w	r8, #0
 80091c2:	4631      	mov	r1, r6
 80091c4:	4620      	mov	r0, r4
 80091c6:	f000 fd33 	bl	8009c30 <_Bfree>
 80091ca:	2f00      	cmp	r7, #0
 80091cc:	f43f aea4 	beq.w	8008f18 <_dtoa_r+0x6a0>
 80091d0:	f1b8 0f00 	cmp.w	r8, #0
 80091d4:	d005      	beq.n	80091e2 <_dtoa_r+0x96a>
 80091d6:	45b8      	cmp	r8, r7
 80091d8:	d003      	beq.n	80091e2 <_dtoa_r+0x96a>
 80091da:	4641      	mov	r1, r8
 80091dc:	4620      	mov	r0, r4
 80091de:	f000 fd27 	bl	8009c30 <_Bfree>
 80091e2:	4639      	mov	r1, r7
 80091e4:	4620      	mov	r0, r4
 80091e6:	f000 fd23 	bl	8009c30 <_Bfree>
 80091ea:	e695      	b.n	8008f18 <_dtoa_r+0x6a0>
 80091ec:	2600      	movs	r6, #0
 80091ee:	4637      	mov	r7, r6
 80091f0:	e7e1      	b.n	80091b6 <_dtoa_r+0x93e>
 80091f2:	9700      	str	r7, [sp, #0]
 80091f4:	4637      	mov	r7, r6
 80091f6:	e599      	b.n	8008d2c <_dtoa_r+0x4b4>
 80091f8:	40240000 	.word	0x40240000
 80091fc:	9b08      	ldr	r3, [sp, #32]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f000 80ca 	beq.w	8009398 <_dtoa_r+0xb20>
 8009204:	9b03      	ldr	r3, [sp, #12]
 8009206:	9302      	str	r3, [sp, #8]
 8009208:	2d00      	cmp	r5, #0
 800920a:	dd05      	ble.n	8009218 <_dtoa_r+0x9a0>
 800920c:	4639      	mov	r1, r7
 800920e:	462a      	mov	r2, r5
 8009210:	4620      	mov	r0, r4
 8009212:	f000 ff29 	bl	800a068 <__lshift>
 8009216:	4607      	mov	r7, r0
 8009218:	f1b8 0f00 	cmp.w	r8, #0
 800921c:	d05b      	beq.n	80092d6 <_dtoa_r+0xa5e>
 800921e:	6879      	ldr	r1, [r7, #4]
 8009220:	4620      	mov	r0, r4
 8009222:	f000 fcc5 	bl	8009bb0 <_Balloc>
 8009226:	4605      	mov	r5, r0
 8009228:	b928      	cbnz	r0, 8009236 <_dtoa_r+0x9be>
 800922a:	4b87      	ldr	r3, [pc, #540]	; (8009448 <_dtoa_r+0xbd0>)
 800922c:	4602      	mov	r2, r0
 800922e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009232:	f7ff bb3b 	b.w	80088ac <_dtoa_r+0x34>
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	3202      	adds	r2, #2
 800923a:	0092      	lsls	r2, r2, #2
 800923c:	f107 010c 	add.w	r1, r7, #12
 8009240:	300c      	adds	r0, #12
 8009242:	f000 fca7 	bl	8009b94 <memcpy>
 8009246:	2201      	movs	r2, #1
 8009248:	4629      	mov	r1, r5
 800924a:	4620      	mov	r0, r4
 800924c:	f000 ff0c 	bl	800a068 <__lshift>
 8009250:	9b01      	ldr	r3, [sp, #4]
 8009252:	f103 0901 	add.w	r9, r3, #1
 8009256:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800925a:	4413      	add	r3, r2
 800925c:	9305      	str	r3, [sp, #20]
 800925e:	f00a 0301 	and.w	r3, sl, #1
 8009262:	46b8      	mov	r8, r7
 8009264:	9304      	str	r3, [sp, #16]
 8009266:	4607      	mov	r7, r0
 8009268:	4631      	mov	r1, r6
 800926a:	ee18 0a10 	vmov	r0, s16
 800926e:	f7ff fa75 	bl	800875c <quorem>
 8009272:	4641      	mov	r1, r8
 8009274:	9002      	str	r0, [sp, #8]
 8009276:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800927a:	ee18 0a10 	vmov	r0, s16
 800927e:	f000 ff63 	bl	800a148 <__mcmp>
 8009282:	463a      	mov	r2, r7
 8009284:	9003      	str	r0, [sp, #12]
 8009286:	4631      	mov	r1, r6
 8009288:	4620      	mov	r0, r4
 800928a:	f000 ff79 	bl	800a180 <__mdiff>
 800928e:	68c2      	ldr	r2, [r0, #12]
 8009290:	f109 3bff 	add.w	fp, r9, #4294967295
 8009294:	4605      	mov	r5, r0
 8009296:	bb02      	cbnz	r2, 80092da <_dtoa_r+0xa62>
 8009298:	4601      	mov	r1, r0
 800929a:	ee18 0a10 	vmov	r0, s16
 800929e:	f000 ff53 	bl	800a148 <__mcmp>
 80092a2:	4602      	mov	r2, r0
 80092a4:	4629      	mov	r1, r5
 80092a6:	4620      	mov	r0, r4
 80092a8:	9207      	str	r2, [sp, #28]
 80092aa:	f000 fcc1 	bl	8009c30 <_Bfree>
 80092ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80092b2:	ea43 0102 	orr.w	r1, r3, r2
 80092b6:	9b04      	ldr	r3, [sp, #16]
 80092b8:	430b      	orrs	r3, r1
 80092ba:	464d      	mov	r5, r9
 80092bc:	d10f      	bne.n	80092de <_dtoa_r+0xa66>
 80092be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80092c2:	d02a      	beq.n	800931a <_dtoa_r+0xaa2>
 80092c4:	9b03      	ldr	r3, [sp, #12]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	dd02      	ble.n	80092d0 <_dtoa_r+0xa58>
 80092ca:	9b02      	ldr	r3, [sp, #8]
 80092cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80092d0:	f88b a000 	strb.w	sl, [fp]
 80092d4:	e775      	b.n	80091c2 <_dtoa_r+0x94a>
 80092d6:	4638      	mov	r0, r7
 80092d8:	e7ba      	b.n	8009250 <_dtoa_r+0x9d8>
 80092da:	2201      	movs	r2, #1
 80092dc:	e7e2      	b.n	80092a4 <_dtoa_r+0xa2c>
 80092de:	9b03      	ldr	r3, [sp, #12]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	db04      	blt.n	80092ee <_dtoa_r+0xa76>
 80092e4:	9906      	ldr	r1, [sp, #24]
 80092e6:	430b      	orrs	r3, r1
 80092e8:	9904      	ldr	r1, [sp, #16]
 80092ea:	430b      	orrs	r3, r1
 80092ec:	d122      	bne.n	8009334 <_dtoa_r+0xabc>
 80092ee:	2a00      	cmp	r2, #0
 80092f0:	ddee      	ble.n	80092d0 <_dtoa_r+0xa58>
 80092f2:	ee18 1a10 	vmov	r1, s16
 80092f6:	2201      	movs	r2, #1
 80092f8:	4620      	mov	r0, r4
 80092fa:	f000 feb5 	bl	800a068 <__lshift>
 80092fe:	4631      	mov	r1, r6
 8009300:	ee08 0a10 	vmov	s16, r0
 8009304:	f000 ff20 	bl	800a148 <__mcmp>
 8009308:	2800      	cmp	r0, #0
 800930a:	dc03      	bgt.n	8009314 <_dtoa_r+0xa9c>
 800930c:	d1e0      	bne.n	80092d0 <_dtoa_r+0xa58>
 800930e:	f01a 0f01 	tst.w	sl, #1
 8009312:	d0dd      	beq.n	80092d0 <_dtoa_r+0xa58>
 8009314:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009318:	d1d7      	bne.n	80092ca <_dtoa_r+0xa52>
 800931a:	2339      	movs	r3, #57	; 0x39
 800931c:	f88b 3000 	strb.w	r3, [fp]
 8009320:	462b      	mov	r3, r5
 8009322:	461d      	mov	r5, r3
 8009324:	3b01      	subs	r3, #1
 8009326:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800932a:	2a39      	cmp	r2, #57	; 0x39
 800932c:	d071      	beq.n	8009412 <_dtoa_r+0xb9a>
 800932e:	3201      	adds	r2, #1
 8009330:	701a      	strb	r2, [r3, #0]
 8009332:	e746      	b.n	80091c2 <_dtoa_r+0x94a>
 8009334:	2a00      	cmp	r2, #0
 8009336:	dd07      	ble.n	8009348 <_dtoa_r+0xad0>
 8009338:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800933c:	d0ed      	beq.n	800931a <_dtoa_r+0xaa2>
 800933e:	f10a 0301 	add.w	r3, sl, #1
 8009342:	f88b 3000 	strb.w	r3, [fp]
 8009346:	e73c      	b.n	80091c2 <_dtoa_r+0x94a>
 8009348:	9b05      	ldr	r3, [sp, #20]
 800934a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800934e:	4599      	cmp	r9, r3
 8009350:	d047      	beq.n	80093e2 <_dtoa_r+0xb6a>
 8009352:	ee18 1a10 	vmov	r1, s16
 8009356:	2300      	movs	r3, #0
 8009358:	220a      	movs	r2, #10
 800935a:	4620      	mov	r0, r4
 800935c:	f000 fc8a 	bl	8009c74 <__multadd>
 8009360:	45b8      	cmp	r8, r7
 8009362:	ee08 0a10 	vmov	s16, r0
 8009366:	f04f 0300 	mov.w	r3, #0
 800936a:	f04f 020a 	mov.w	r2, #10
 800936e:	4641      	mov	r1, r8
 8009370:	4620      	mov	r0, r4
 8009372:	d106      	bne.n	8009382 <_dtoa_r+0xb0a>
 8009374:	f000 fc7e 	bl	8009c74 <__multadd>
 8009378:	4680      	mov	r8, r0
 800937a:	4607      	mov	r7, r0
 800937c:	f109 0901 	add.w	r9, r9, #1
 8009380:	e772      	b.n	8009268 <_dtoa_r+0x9f0>
 8009382:	f000 fc77 	bl	8009c74 <__multadd>
 8009386:	4639      	mov	r1, r7
 8009388:	4680      	mov	r8, r0
 800938a:	2300      	movs	r3, #0
 800938c:	220a      	movs	r2, #10
 800938e:	4620      	mov	r0, r4
 8009390:	f000 fc70 	bl	8009c74 <__multadd>
 8009394:	4607      	mov	r7, r0
 8009396:	e7f1      	b.n	800937c <_dtoa_r+0xb04>
 8009398:	9b03      	ldr	r3, [sp, #12]
 800939a:	9302      	str	r3, [sp, #8]
 800939c:	9d01      	ldr	r5, [sp, #4]
 800939e:	ee18 0a10 	vmov	r0, s16
 80093a2:	4631      	mov	r1, r6
 80093a4:	f7ff f9da 	bl	800875c <quorem>
 80093a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80093ac:	9b01      	ldr	r3, [sp, #4]
 80093ae:	f805 ab01 	strb.w	sl, [r5], #1
 80093b2:	1aea      	subs	r2, r5, r3
 80093b4:	9b02      	ldr	r3, [sp, #8]
 80093b6:	4293      	cmp	r3, r2
 80093b8:	dd09      	ble.n	80093ce <_dtoa_r+0xb56>
 80093ba:	ee18 1a10 	vmov	r1, s16
 80093be:	2300      	movs	r3, #0
 80093c0:	220a      	movs	r2, #10
 80093c2:	4620      	mov	r0, r4
 80093c4:	f000 fc56 	bl	8009c74 <__multadd>
 80093c8:	ee08 0a10 	vmov	s16, r0
 80093cc:	e7e7      	b.n	800939e <_dtoa_r+0xb26>
 80093ce:	9b02      	ldr	r3, [sp, #8]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	bfc8      	it	gt
 80093d4:	461d      	movgt	r5, r3
 80093d6:	9b01      	ldr	r3, [sp, #4]
 80093d8:	bfd8      	it	le
 80093da:	2501      	movle	r5, #1
 80093dc:	441d      	add	r5, r3
 80093de:	f04f 0800 	mov.w	r8, #0
 80093e2:	ee18 1a10 	vmov	r1, s16
 80093e6:	2201      	movs	r2, #1
 80093e8:	4620      	mov	r0, r4
 80093ea:	f000 fe3d 	bl	800a068 <__lshift>
 80093ee:	4631      	mov	r1, r6
 80093f0:	ee08 0a10 	vmov	s16, r0
 80093f4:	f000 fea8 	bl	800a148 <__mcmp>
 80093f8:	2800      	cmp	r0, #0
 80093fa:	dc91      	bgt.n	8009320 <_dtoa_r+0xaa8>
 80093fc:	d102      	bne.n	8009404 <_dtoa_r+0xb8c>
 80093fe:	f01a 0f01 	tst.w	sl, #1
 8009402:	d18d      	bne.n	8009320 <_dtoa_r+0xaa8>
 8009404:	462b      	mov	r3, r5
 8009406:	461d      	mov	r5, r3
 8009408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800940c:	2a30      	cmp	r2, #48	; 0x30
 800940e:	d0fa      	beq.n	8009406 <_dtoa_r+0xb8e>
 8009410:	e6d7      	b.n	80091c2 <_dtoa_r+0x94a>
 8009412:	9a01      	ldr	r2, [sp, #4]
 8009414:	429a      	cmp	r2, r3
 8009416:	d184      	bne.n	8009322 <_dtoa_r+0xaaa>
 8009418:	9b00      	ldr	r3, [sp, #0]
 800941a:	3301      	adds	r3, #1
 800941c:	9300      	str	r3, [sp, #0]
 800941e:	2331      	movs	r3, #49	; 0x31
 8009420:	7013      	strb	r3, [r2, #0]
 8009422:	e6ce      	b.n	80091c2 <_dtoa_r+0x94a>
 8009424:	4b09      	ldr	r3, [pc, #36]	; (800944c <_dtoa_r+0xbd4>)
 8009426:	f7ff ba95 	b.w	8008954 <_dtoa_r+0xdc>
 800942a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800942c:	2b00      	cmp	r3, #0
 800942e:	f47f aa6e 	bne.w	800890e <_dtoa_r+0x96>
 8009432:	4b07      	ldr	r3, [pc, #28]	; (8009450 <_dtoa_r+0xbd8>)
 8009434:	f7ff ba8e 	b.w	8008954 <_dtoa_r+0xdc>
 8009438:	9b02      	ldr	r3, [sp, #8]
 800943a:	2b00      	cmp	r3, #0
 800943c:	dcae      	bgt.n	800939c <_dtoa_r+0xb24>
 800943e:	9b06      	ldr	r3, [sp, #24]
 8009440:	2b02      	cmp	r3, #2
 8009442:	f73f aea8 	bgt.w	8009196 <_dtoa_r+0x91e>
 8009446:	e7a9      	b.n	800939c <_dtoa_r+0xb24>
 8009448:	0800ea90 	.word	0x0800ea90
 800944c:	0800ec89 	.word	0x0800ec89
 8009450:	0800ea11 	.word	0x0800ea11

08009454 <rshift>:
 8009454:	6903      	ldr	r3, [r0, #16]
 8009456:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800945a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800945e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009462:	f100 0414 	add.w	r4, r0, #20
 8009466:	dd45      	ble.n	80094f4 <rshift+0xa0>
 8009468:	f011 011f 	ands.w	r1, r1, #31
 800946c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009470:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009474:	d10c      	bne.n	8009490 <rshift+0x3c>
 8009476:	f100 0710 	add.w	r7, r0, #16
 800947a:	4629      	mov	r1, r5
 800947c:	42b1      	cmp	r1, r6
 800947e:	d334      	bcc.n	80094ea <rshift+0x96>
 8009480:	1a9b      	subs	r3, r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	1eea      	subs	r2, r5, #3
 8009486:	4296      	cmp	r6, r2
 8009488:	bf38      	it	cc
 800948a:	2300      	movcc	r3, #0
 800948c:	4423      	add	r3, r4
 800948e:	e015      	b.n	80094bc <rshift+0x68>
 8009490:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009494:	f1c1 0820 	rsb	r8, r1, #32
 8009498:	40cf      	lsrs	r7, r1
 800949a:	f105 0e04 	add.w	lr, r5, #4
 800949e:	46a1      	mov	r9, r4
 80094a0:	4576      	cmp	r6, lr
 80094a2:	46f4      	mov	ip, lr
 80094a4:	d815      	bhi.n	80094d2 <rshift+0x7e>
 80094a6:	1a9a      	subs	r2, r3, r2
 80094a8:	0092      	lsls	r2, r2, #2
 80094aa:	3a04      	subs	r2, #4
 80094ac:	3501      	adds	r5, #1
 80094ae:	42ae      	cmp	r6, r5
 80094b0:	bf38      	it	cc
 80094b2:	2200      	movcc	r2, #0
 80094b4:	18a3      	adds	r3, r4, r2
 80094b6:	50a7      	str	r7, [r4, r2]
 80094b8:	b107      	cbz	r7, 80094bc <rshift+0x68>
 80094ba:	3304      	adds	r3, #4
 80094bc:	1b1a      	subs	r2, r3, r4
 80094be:	42a3      	cmp	r3, r4
 80094c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80094c4:	bf08      	it	eq
 80094c6:	2300      	moveq	r3, #0
 80094c8:	6102      	str	r2, [r0, #16]
 80094ca:	bf08      	it	eq
 80094cc:	6143      	streq	r3, [r0, #20]
 80094ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094d2:	f8dc c000 	ldr.w	ip, [ip]
 80094d6:	fa0c fc08 	lsl.w	ip, ip, r8
 80094da:	ea4c 0707 	orr.w	r7, ip, r7
 80094de:	f849 7b04 	str.w	r7, [r9], #4
 80094e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80094e6:	40cf      	lsrs	r7, r1
 80094e8:	e7da      	b.n	80094a0 <rshift+0x4c>
 80094ea:	f851 cb04 	ldr.w	ip, [r1], #4
 80094ee:	f847 cf04 	str.w	ip, [r7, #4]!
 80094f2:	e7c3      	b.n	800947c <rshift+0x28>
 80094f4:	4623      	mov	r3, r4
 80094f6:	e7e1      	b.n	80094bc <rshift+0x68>

080094f8 <__hexdig_fun>:
 80094f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80094fc:	2b09      	cmp	r3, #9
 80094fe:	d802      	bhi.n	8009506 <__hexdig_fun+0xe>
 8009500:	3820      	subs	r0, #32
 8009502:	b2c0      	uxtb	r0, r0
 8009504:	4770      	bx	lr
 8009506:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800950a:	2b05      	cmp	r3, #5
 800950c:	d801      	bhi.n	8009512 <__hexdig_fun+0x1a>
 800950e:	3847      	subs	r0, #71	; 0x47
 8009510:	e7f7      	b.n	8009502 <__hexdig_fun+0xa>
 8009512:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009516:	2b05      	cmp	r3, #5
 8009518:	d801      	bhi.n	800951e <__hexdig_fun+0x26>
 800951a:	3827      	subs	r0, #39	; 0x27
 800951c:	e7f1      	b.n	8009502 <__hexdig_fun+0xa>
 800951e:	2000      	movs	r0, #0
 8009520:	4770      	bx	lr
	...

08009524 <__gethex>:
 8009524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009528:	ed2d 8b02 	vpush	{d8}
 800952c:	b089      	sub	sp, #36	; 0x24
 800952e:	ee08 0a10 	vmov	s16, r0
 8009532:	9304      	str	r3, [sp, #16]
 8009534:	4bb4      	ldr	r3, [pc, #720]	; (8009808 <__gethex+0x2e4>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	9301      	str	r3, [sp, #4]
 800953a:	4618      	mov	r0, r3
 800953c:	468b      	mov	fp, r1
 800953e:	4690      	mov	r8, r2
 8009540:	f7f6 fe58 	bl	80001f4 <strlen>
 8009544:	9b01      	ldr	r3, [sp, #4]
 8009546:	f8db 2000 	ldr.w	r2, [fp]
 800954a:	4403      	add	r3, r0
 800954c:	4682      	mov	sl, r0
 800954e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009552:	9305      	str	r3, [sp, #20]
 8009554:	1c93      	adds	r3, r2, #2
 8009556:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800955a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800955e:	32fe      	adds	r2, #254	; 0xfe
 8009560:	18d1      	adds	r1, r2, r3
 8009562:	461f      	mov	r7, r3
 8009564:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009568:	9100      	str	r1, [sp, #0]
 800956a:	2830      	cmp	r0, #48	; 0x30
 800956c:	d0f8      	beq.n	8009560 <__gethex+0x3c>
 800956e:	f7ff ffc3 	bl	80094f8 <__hexdig_fun>
 8009572:	4604      	mov	r4, r0
 8009574:	2800      	cmp	r0, #0
 8009576:	d13a      	bne.n	80095ee <__gethex+0xca>
 8009578:	9901      	ldr	r1, [sp, #4]
 800957a:	4652      	mov	r2, sl
 800957c:	4638      	mov	r0, r7
 800957e:	f001 fdb3 	bl	800b0e8 <strncmp>
 8009582:	4605      	mov	r5, r0
 8009584:	2800      	cmp	r0, #0
 8009586:	d168      	bne.n	800965a <__gethex+0x136>
 8009588:	f817 000a 	ldrb.w	r0, [r7, sl]
 800958c:	eb07 060a 	add.w	r6, r7, sl
 8009590:	f7ff ffb2 	bl	80094f8 <__hexdig_fun>
 8009594:	2800      	cmp	r0, #0
 8009596:	d062      	beq.n	800965e <__gethex+0x13a>
 8009598:	4633      	mov	r3, r6
 800959a:	7818      	ldrb	r0, [r3, #0]
 800959c:	2830      	cmp	r0, #48	; 0x30
 800959e:	461f      	mov	r7, r3
 80095a0:	f103 0301 	add.w	r3, r3, #1
 80095a4:	d0f9      	beq.n	800959a <__gethex+0x76>
 80095a6:	f7ff ffa7 	bl	80094f8 <__hexdig_fun>
 80095aa:	2301      	movs	r3, #1
 80095ac:	fab0 f480 	clz	r4, r0
 80095b0:	0964      	lsrs	r4, r4, #5
 80095b2:	4635      	mov	r5, r6
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	463a      	mov	r2, r7
 80095b8:	4616      	mov	r6, r2
 80095ba:	3201      	adds	r2, #1
 80095bc:	7830      	ldrb	r0, [r6, #0]
 80095be:	f7ff ff9b 	bl	80094f8 <__hexdig_fun>
 80095c2:	2800      	cmp	r0, #0
 80095c4:	d1f8      	bne.n	80095b8 <__gethex+0x94>
 80095c6:	9901      	ldr	r1, [sp, #4]
 80095c8:	4652      	mov	r2, sl
 80095ca:	4630      	mov	r0, r6
 80095cc:	f001 fd8c 	bl	800b0e8 <strncmp>
 80095d0:	b980      	cbnz	r0, 80095f4 <__gethex+0xd0>
 80095d2:	b94d      	cbnz	r5, 80095e8 <__gethex+0xc4>
 80095d4:	eb06 050a 	add.w	r5, r6, sl
 80095d8:	462a      	mov	r2, r5
 80095da:	4616      	mov	r6, r2
 80095dc:	3201      	adds	r2, #1
 80095de:	7830      	ldrb	r0, [r6, #0]
 80095e0:	f7ff ff8a 	bl	80094f8 <__hexdig_fun>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	d1f8      	bne.n	80095da <__gethex+0xb6>
 80095e8:	1bad      	subs	r5, r5, r6
 80095ea:	00ad      	lsls	r5, r5, #2
 80095ec:	e004      	b.n	80095f8 <__gethex+0xd4>
 80095ee:	2400      	movs	r4, #0
 80095f0:	4625      	mov	r5, r4
 80095f2:	e7e0      	b.n	80095b6 <__gethex+0x92>
 80095f4:	2d00      	cmp	r5, #0
 80095f6:	d1f7      	bne.n	80095e8 <__gethex+0xc4>
 80095f8:	7833      	ldrb	r3, [r6, #0]
 80095fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095fe:	2b50      	cmp	r3, #80	; 0x50
 8009600:	d13b      	bne.n	800967a <__gethex+0x156>
 8009602:	7873      	ldrb	r3, [r6, #1]
 8009604:	2b2b      	cmp	r3, #43	; 0x2b
 8009606:	d02c      	beq.n	8009662 <__gethex+0x13e>
 8009608:	2b2d      	cmp	r3, #45	; 0x2d
 800960a:	d02e      	beq.n	800966a <__gethex+0x146>
 800960c:	1c71      	adds	r1, r6, #1
 800960e:	f04f 0900 	mov.w	r9, #0
 8009612:	7808      	ldrb	r0, [r1, #0]
 8009614:	f7ff ff70 	bl	80094f8 <__hexdig_fun>
 8009618:	1e43      	subs	r3, r0, #1
 800961a:	b2db      	uxtb	r3, r3
 800961c:	2b18      	cmp	r3, #24
 800961e:	d82c      	bhi.n	800967a <__gethex+0x156>
 8009620:	f1a0 0210 	sub.w	r2, r0, #16
 8009624:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009628:	f7ff ff66 	bl	80094f8 <__hexdig_fun>
 800962c:	1e43      	subs	r3, r0, #1
 800962e:	b2db      	uxtb	r3, r3
 8009630:	2b18      	cmp	r3, #24
 8009632:	d91d      	bls.n	8009670 <__gethex+0x14c>
 8009634:	f1b9 0f00 	cmp.w	r9, #0
 8009638:	d000      	beq.n	800963c <__gethex+0x118>
 800963a:	4252      	negs	r2, r2
 800963c:	4415      	add	r5, r2
 800963e:	f8cb 1000 	str.w	r1, [fp]
 8009642:	b1e4      	cbz	r4, 800967e <__gethex+0x15a>
 8009644:	9b00      	ldr	r3, [sp, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	bf14      	ite	ne
 800964a:	2700      	movne	r7, #0
 800964c:	2706      	moveq	r7, #6
 800964e:	4638      	mov	r0, r7
 8009650:	b009      	add	sp, #36	; 0x24
 8009652:	ecbd 8b02 	vpop	{d8}
 8009656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800965a:	463e      	mov	r6, r7
 800965c:	4625      	mov	r5, r4
 800965e:	2401      	movs	r4, #1
 8009660:	e7ca      	b.n	80095f8 <__gethex+0xd4>
 8009662:	f04f 0900 	mov.w	r9, #0
 8009666:	1cb1      	adds	r1, r6, #2
 8009668:	e7d3      	b.n	8009612 <__gethex+0xee>
 800966a:	f04f 0901 	mov.w	r9, #1
 800966e:	e7fa      	b.n	8009666 <__gethex+0x142>
 8009670:	230a      	movs	r3, #10
 8009672:	fb03 0202 	mla	r2, r3, r2, r0
 8009676:	3a10      	subs	r2, #16
 8009678:	e7d4      	b.n	8009624 <__gethex+0x100>
 800967a:	4631      	mov	r1, r6
 800967c:	e7df      	b.n	800963e <__gethex+0x11a>
 800967e:	1bf3      	subs	r3, r6, r7
 8009680:	3b01      	subs	r3, #1
 8009682:	4621      	mov	r1, r4
 8009684:	2b07      	cmp	r3, #7
 8009686:	dc0b      	bgt.n	80096a0 <__gethex+0x17c>
 8009688:	ee18 0a10 	vmov	r0, s16
 800968c:	f000 fa90 	bl	8009bb0 <_Balloc>
 8009690:	4604      	mov	r4, r0
 8009692:	b940      	cbnz	r0, 80096a6 <__gethex+0x182>
 8009694:	4b5d      	ldr	r3, [pc, #372]	; (800980c <__gethex+0x2e8>)
 8009696:	4602      	mov	r2, r0
 8009698:	21de      	movs	r1, #222	; 0xde
 800969a:	485d      	ldr	r0, [pc, #372]	; (8009810 <__gethex+0x2ec>)
 800969c:	f001 fdf4 	bl	800b288 <__assert_func>
 80096a0:	3101      	adds	r1, #1
 80096a2:	105b      	asrs	r3, r3, #1
 80096a4:	e7ee      	b.n	8009684 <__gethex+0x160>
 80096a6:	f100 0914 	add.w	r9, r0, #20
 80096aa:	f04f 0b00 	mov.w	fp, #0
 80096ae:	f1ca 0301 	rsb	r3, sl, #1
 80096b2:	f8cd 9008 	str.w	r9, [sp, #8]
 80096b6:	f8cd b000 	str.w	fp, [sp]
 80096ba:	9306      	str	r3, [sp, #24]
 80096bc:	42b7      	cmp	r7, r6
 80096be:	d340      	bcc.n	8009742 <__gethex+0x21e>
 80096c0:	9802      	ldr	r0, [sp, #8]
 80096c2:	9b00      	ldr	r3, [sp, #0]
 80096c4:	f840 3b04 	str.w	r3, [r0], #4
 80096c8:	eba0 0009 	sub.w	r0, r0, r9
 80096cc:	1080      	asrs	r0, r0, #2
 80096ce:	0146      	lsls	r6, r0, #5
 80096d0:	6120      	str	r0, [r4, #16]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 fb5e 	bl	8009d94 <__hi0bits>
 80096d8:	1a30      	subs	r0, r6, r0
 80096da:	f8d8 6000 	ldr.w	r6, [r8]
 80096de:	42b0      	cmp	r0, r6
 80096e0:	dd63      	ble.n	80097aa <__gethex+0x286>
 80096e2:	1b87      	subs	r7, r0, r6
 80096e4:	4639      	mov	r1, r7
 80096e6:	4620      	mov	r0, r4
 80096e8:	f000 ff02 	bl	800a4f0 <__any_on>
 80096ec:	4682      	mov	sl, r0
 80096ee:	b1a8      	cbz	r0, 800971c <__gethex+0x1f8>
 80096f0:	1e7b      	subs	r3, r7, #1
 80096f2:	1159      	asrs	r1, r3, #5
 80096f4:	f003 021f 	and.w	r2, r3, #31
 80096f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80096fc:	f04f 0a01 	mov.w	sl, #1
 8009700:	fa0a f202 	lsl.w	r2, sl, r2
 8009704:	420a      	tst	r2, r1
 8009706:	d009      	beq.n	800971c <__gethex+0x1f8>
 8009708:	4553      	cmp	r3, sl
 800970a:	dd05      	ble.n	8009718 <__gethex+0x1f4>
 800970c:	1eb9      	subs	r1, r7, #2
 800970e:	4620      	mov	r0, r4
 8009710:	f000 feee 	bl	800a4f0 <__any_on>
 8009714:	2800      	cmp	r0, #0
 8009716:	d145      	bne.n	80097a4 <__gethex+0x280>
 8009718:	f04f 0a02 	mov.w	sl, #2
 800971c:	4639      	mov	r1, r7
 800971e:	4620      	mov	r0, r4
 8009720:	f7ff fe98 	bl	8009454 <rshift>
 8009724:	443d      	add	r5, r7
 8009726:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800972a:	42ab      	cmp	r3, r5
 800972c:	da4c      	bge.n	80097c8 <__gethex+0x2a4>
 800972e:	ee18 0a10 	vmov	r0, s16
 8009732:	4621      	mov	r1, r4
 8009734:	f000 fa7c 	bl	8009c30 <_Bfree>
 8009738:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800973a:	2300      	movs	r3, #0
 800973c:	6013      	str	r3, [r2, #0]
 800973e:	27a3      	movs	r7, #163	; 0xa3
 8009740:	e785      	b.n	800964e <__gethex+0x12a>
 8009742:	1e73      	subs	r3, r6, #1
 8009744:	9a05      	ldr	r2, [sp, #20]
 8009746:	9303      	str	r3, [sp, #12]
 8009748:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800974c:	4293      	cmp	r3, r2
 800974e:	d019      	beq.n	8009784 <__gethex+0x260>
 8009750:	f1bb 0f20 	cmp.w	fp, #32
 8009754:	d107      	bne.n	8009766 <__gethex+0x242>
 8009756:	9b02      	ldr	r3, [sp, #8]
 8009758:	9a00      	ldr	r2, [sp, #0]
 800975a:	f843 2b04 	str.w	r2, [r3], #4
 800975e:	9302      	str	r3, [sp, #8]
 8009760:	2300      	movs	r3, #0
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	469b      	mov	fp, r3
 8009766:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800976a:	f7ff fec5 	bl	80094f8 <__hexdig_fun>
 800976e:	9b00      	ldr	r3, [sp, #0]
 8009770:	f000 000f 	and.w	r0, r0, #15
 8009774:	fa00 f00b 	lsl.w	r0, r0, fp
 8009778:	4303      	orrs	r3, r0
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	f10b 0b04 	add.w	fp, fp, #4
 8009780:	9b03      	ldr	r3, [sp, #12]
 8009782:	e00d      	b.n	80097a0 <__gethex+0x27c>
 8009784:	9b03      	ldr	r3, [sp, #12]
 8009786:	9a06      	ldr	r2, [sp, #24]
 8009788:	4413      	add	r3, r2
 800978a:	42bb      	cmp	r3, r7
 800978c:	d3e0      	bcc.n	8009750 <__gethex+0x22c>
 800978e:	4618      	mov	r0, r3
 8009790:	9901      	ldr	r1, [sp, #4]
 8009792:	9307      	str	r3, [sp, #28]
 8009794:	4652      	mov	r2, sl
 8009796:	f001 fca7 	bl	800b0e8 <strncmp>
 800979a:	9b07      	ldr	r3, [sp, #28]
 800979c:	2800      	cmp	r0, #0
 800979e:	d1d7      	bne.n	8009750 <__gethex+0x22c>
 80097a0:	461e      	mov	r6, r3
 80097a2:	e78b      	b.n	80096bc <__gethex+0x198>
 80097a4:	f04f 0a03 	mov.w	sl, #3
 80097a8:	e7b8      	b.n	800971c <__gethex+0x1f8>
 80097aa:	da0a      	bge.n	80097c2 <__gethex+0x29e>
 80097ac:	1a37      	subs	r7, r6, r0
 80097ae:	4621      	mov	r1, r4
 80097b0:	ee18 0a10 	vmov	r0, s16
 80097b4:	463a      	mov	r2, r7
 80097b6:	f000 fc57 	bl	800a068 <__lshift>
 80097ba:	1bed      	subs	r5, r5, r7
 80097bc:	4604      	mov	r4, r0
 80097be:	f100 0914 	add.w	r9, r0, #20
 80097c2:	f04f 0a00 	mov.w	sl, #0
 80097c6:	e7ae      	b.n	8009726 <__gethex+0x202>
 80097c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80097cc:	42a8      	cmp	r0, r5
 80097ce:	dd72      	ble.n	80098b6 <__gethex+0x392>
 80097d0:	1b45      	subs	r5, r0, r5
 80097d2:	42ae      	cmp	r6, r5
 80097d4:	dc36      	bgt.n	8009844 <__gethex+0x320>
 80097d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80097da:	2b02      	cmp	r3, #2
 80097dc:	d02a      	beq.n	8009834 <__gethex+0x310>
 80097de:	2b03      	cmp	r3, #3
 80097e0:	d02c      	beq.n	800983c <__gethex+0x318>
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d11c      	bne.n	8009820 <__gethex+0x2fc>
 80097e6:	42ae      	cmp	r6, r5
 80097e8:	d11a      	bne.n	8009820 <__gethex+0x2fc>
 80097ea:	2e01      	cmp	r6, #1
 80097ec:	d112      	bne.n	8009814 <__gethex+0x2f0>
 80097ee:	9a04      	ldr	r2, [sp, #16]
 80097f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80097f4:	6013      	str	r3, [r2, #0]
 80097f6:	2301      	movs	r3, #1
 80097f8:	6123      	str	r3, [r4, #16]
 80097fa:	f8c9 3000 	str.w	r3, [r9]
 80097fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009800:	2762      	movs	r7, #98	; 0x62
 8009802:	601c      	str	r4, [r3, #0]
 8009804:	e723      	b.n	800964e <__gethex+0x12a>
 8009806:	bf00      	nop
 8009808:	0800eb08 	.word	0x0800eb08
 800980c:	0800ea90 	.word	0x0800ea90
 8009810:	0800eaa1 	.word	0x0800eaa1
 8009814:	1e71      	subs	r1, r6, #1
 8009816:	4620      	mov	r0, r4
 8009818:	f000 fe6a 	bl	800a4f0 <__any_on>
 800981c:	2800      	cmp	r0, #0
 800981e:	d1e6      	bne.n	80097ee <__gethex+0x2ca>
 8009820:	ee18 0a10 	vmov	r0, s16
 8009824:	4621      	mov	r1, r4
 8009826:	f000 fa03 	bl	8009c30 <_Bfree>
 800982a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800982c:	2300      	movs	r3, #0
 800982e:	6013      	str	r3, [r2, #0]
 8009830:	2750      	movs	r7, #80	; 0x50
 8009832:	e70c      	b.n	800964e <__gethex+0x12a>
 8009834:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1f2      	bne.n	8009820 <__gethex+0x2fc>
 800983a:	e7d8      	b.n	80097ee <__gethex+0x2ca>
 800983c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800983e:	2b00      	cmp	r3, #0
 8009840:	d1d5      	bne.n	80097ee <__gethex+0x2ca>
 8009842:	e7ed      	b.n	8009820 <__gethex+0x2fc>
 8009844:	1e6f      	subs	r7, r5, #1
 8009846:	f1ba 0f00 	cmp.w	sl, #0
 800984a:	d131      	bne.n	80098b0 <__gethex+0x38c>
 800984c:	b127      	cbz	r7, 8009858 <__gethex+0x334>
 800984e:	4639      	mov	r1, r7
 8009850:	4620      	mov	r0, r4
 8009852:	f000 fe4d 	bl	800a4f0 <__any_on>
 8009856:	4682      	mov	sl, r0
 8009858:	117b      	asrs	r3, r7, #5
 800985a:	2101      	movs	r1, #1
 800985c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009860:	f007 071f 	and.w	r7, r7, #31
 8009864:	fa01 f707 	lsl.w	r7, r1, r7
 8009868:	421f      	tst	r7, r3
 800986a:	4629      	mov	r1, r5
 800986c:	4620      	mov	r0, r4
 800986e:	bf18      	it	ne
 8009870:	f04a 0a02 	orrne.w	sl, sl, #2
 8009874:	1b76      	subs	r6, r6, r5
 8009876:	f7ff fded 	bl	8009454 <rshift>
 800987a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800987e:	2702      	movs	r7, #2
 8009880:	f1ba 0f00 	cmp.w	sl, #0
 8009884:	d048      	beq.n	8009918 <__gethex+0x3f4>
 8009886:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800988a:	2b02      	cmp	r3, #2
 800988c:	d015      	beq.n	80098ba <__gethex+0x396>
 800988e:	2b03      	cmp	r3, #3
 8009890:	d017      	beq.n	80098c2 <__gethex+0x39e>
 8009892:	2b01      	cmp	r3, #1
 8009894:	d109      	bne.n	80098aa <__gethex+0x386>
 8009896:	f01a 0f02 	tst.w	sl, #2
 800989a:	d006      	beq.n	80098aa <__gethex+0x386>
 800989c:	f8d9 0000 	ldr.w	r0, [r9]
 80098a0:	ea4a 0a00 	orr.w	sl, sl, r0
 80098a4:	f01a 0f01 	tst.w	sl, #1
 80098a8:	d10e      	bne.n	80098c8 <__gethex+0x3a4>
 80098aa:	f047 0710 	orr.w	r7, r7, #16
 80098ae:	e033      	b.n	8009918 <__gethex+0x3f4>
 80098b0:	f04f 0a01 	mov.w	sl, #1
 80098b4:	e7d0      	b.n	8009858 <__gethex+0x334>
 80098b6:	2701      	movs	r7, #1
 80098b8:	e7e2      	b.n	8009880 <__gethex+0x35c>
 80098ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098bc:	f1c3 0301 	rsb	r3, r3, #1
 80098c0:	9315      	str	r3, [sp, #84]	; 0x54
 80098c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d0f0      	beq.n	80098aa <__gethex+0x386>
 80098c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80098cc:	f104 0314 	add.w	r3, r4, #20
 80098d0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80098d4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80098d8:	f04f 0c00 	mov.w	ip, #0
 80098dc:	4618      	mov	r0, r3
 80098de:	f853 2b04 	ldr.w	r2, [r3], #4
 80098e2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80098e6:	d01c      	beq.n	8009922 <__gethex+0x3fe>
 80098e8:	3201      	adds	r2, #1
 80098ea:	6002      	str	r2, [r0, #0]
 80098ec:	2f02      	cmp	r7, #2
 80098ee:	f104 0314 	add.w	r3, r4, #20
 80098f2:	d13f      	bne.n	8009974 <__gethex+0x450>
 80098f4:	f8d8 2000 	ldr.w	r2, [r8]
 80098f8:	3a01      	subs	r2, #1
 80098fa:	42b2      	cmp	r2, r6
 80098fc:	d10a      	bne.n	8009914 <__gethex+0x3f0>
 80098fe:	1171      	asrs	r1, r6, #5
 8009900:	2201      	movs	r2, #1
 8009902:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009906:	f006 061f 	and.w	r6, r6, #31
 800990a:	fa02 f606 	lsl.w	r6, r2, r6
 800990e:	421e      	tst	r6, r3
 8009910:	bf18      	it	ne
 8009912:	4617      	movne	r7, r2
 8009914:	f047 0720 	orr.w	r7, r7, #32
 8009918:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800991a:	601c      	str	r4, [r3, #0]
 800991c:	9b04      	ldr	r3, [sp, #16]
 800991e:	601d      	str	r5, [r3, #0]
 8009920:	e695      	b.n	800964e <__gethex+0x12a>
 8009922:	4299      	cmp	r1, r3
 8009924:	f843 cc04 	str.w	ip, [r3, #-4]
 8009928:	d8d8      	bhi.n	80098dc <__gethex+0x3b8>
 800992a:	68a3      	ldr	r3, [r4, #8]
 800992c:	459b      	cmp	fp, r3
 800992e:	db19      	blt.n	8009964 <__gethex+0x440>
 8009930:	6861      	ldr	r1, [r4, #4]
 8009932:	ee18 0a10 	vmov	r0, s16
 8009936:	3101      	adds	r1, #1
 8009938:	f000 f93a 	bl	8009bb0 <_Balloc>
 800993c:	4681      	mov	r9, r0
 800993e:	b918      	cbnz	r0, 8009948 <__gethex+0x424>
 8009940:	4b1a      	ldr	r3, [pc, #104]	; (80099ac <__gethex+0x488>)
 8009942:	4602      	mov	r2, r0
 8009944:	2184      	movs	r1, #132	; 0x84
 8009946:	e6a8      	b.n	800969a <__gethex+0x176>
 8009948:	6922      	ldr	r2, [r4, #16]
 800994a:	3202      	adds	r2, #2
 800994c:	f104 010c 	add.w	r1, r4, #12
 8009950:	0092      	lsls	r2, r2, #2
 8009952:	300c      	adds	r0, #12
 8009954:	f000 f91e 	bl	8009b94 <memcpy>
 8009958:	4621      	mov	r1, r4
 800995a:	ee18 0a10 	vmov	r0, s16
 800995e:	f000 f967 	bl	8009c30 <_Bfree>
 8009962:	464c      	mov	r4, r9
 8009964:	6923      	ldr	r3, [r4, #16]
 8009966:	1c5a      	adds	r2, r3, #1
 8009968:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800996c:	6122      	str	r2, [r4, #16]
 800996e:	2201      	movs	r2, #1
 8009970:	615a      	str	r2, [r3, #20]
 8009972:	e7bb      	b.n	80098ec <__gethex+0x3c8>
 8009974:	6922      	ldr	r2, [r4, #16]
 8009976:	455a      	cmp	r2, fp
 8009978:	dd0b      	ble.n	8009992 <__gethex+0x46e>
 800997a:	2101      	movs	r1, #1
 800997c:	4620      	mov	r0, r4
 800997e:	f7ff fd69 	bl	8009454 <rshift>
 8009982:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009986:	3501      	adds	r5, #1
 8009988:	42ab      	cmp	r3, r5
 800998a:	f6ff aed0 	blt.w	800972e <__gethex+0x20a>
 800998e:	2701      	movs	r7, #1
 8009990:	e7c0      	b.n	8009914 <__gethex+0x3f0>
 8009992:	f016 061f 	ands.w	r6, r6, #31
 8009996:	d0fa      	beq.n	800998e <__gethex+0x46a>
 8009998:	4453      	add	r3, sl
 800999a:	f1c6 0620 	rsb	r6, r6, #32
 800999e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80099a2:	f000 f9f7 	bl	8009d94 <__hi0bits>
 80099a6:	42b0      	cmp	r0, r6
 80099a8:	dbe7      	blt.n	800997a <__gethex+0x456>
 80099aa:	e7f0      	b.n	800998e <__gethex+0x46a>
 80099ac:	0800ea90 	.word	0x0800ea90

080099b0 <L_shift>:
 80099b0:	f1c2 0208 	rsb	r2, r2, #8
 80099b4:	0092      	lsls	r2, r2, #2
 80099b6:	b570      	push	{r4, r5, r6, lr}
 80099b8:	f1c2 0620 	rsb	r6, r2, #32
 80099bc:	6843      	ldr	r3, [r0, #4]
 80099be:	6804      	ldr	r4, [r0, #0]
 80099c0:	fa03 f506 	lsl.w	r5, r3, r6
 80099c4:	432c      	orrs	r4, r5
 80099c6:	40d3      	lsrs	r3, r2
 80099c8:	6004      	str	r4, [r0, #0]
 80099ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80099ce:	4288      	cmp	r0, r1
 80099d0:	d3f4      	bcc.n	80099bc <L_shift+0xc>
 80099d2:	bd70      	pop	{r4, r5, r6, pc}

080099d4 <__match>:
 80099d4:	b530      	push	{r4, r5, lr}
 80099d6:	6803      	ldr	r3, [r0, #0]
 80099d8:	3301      	adds	r3, #1
 80099da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099de:	b914      	cbnz	r4, 80099e6 <__match+0x12>
 80099e0:	6003      	str	r3, [r0, #0]
 80099e2:	2001      	movs	r0, #1
 80099e4:	bd30      	pop	{r4, r5, pc}
 80099e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80099ee:	2d19      	cmp	r5, #25
 80099f0:	bf98      	it	ls
 80099f2:	3220      	addls	r2, #32
 80099f4:	42a2      	cmp	r2, r4
 80099f6:	d0f0      	beq.n	80099da <__match+0x6>
 80099f8:	2000      	movs	r0, #0
 80099fa:	e7f3      	b.n	80099e4 <__match+0x10>

080099fc <__hexnan>:
 80099fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a00:	680b      	ldr	r3, [r1, #0]
 8009a02:	115e      	asrs	r6, r3, #5
 8009a04:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009a08:	f013 031f 	ands.w	r3, r3, #31
 8009a0c:	b087      	sub	sp, #28
 8009a0e:	bf18      	it	ne
 8009a10:	3604      	addne	r6, #4
 8009a12:	2500      	movs	r5, #0
 8009a14:	1f37      	subs	r7, r6, #4
 8009a16:	4690      	mov	r8, r2
 8009a18:	6802      	ldr	r2, [r0, #0]
 8009a1a:	9301      	str	r3, [sp, #4]
 8009a1c:	4682      	mov	sl, r0
 8009a1e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009a22:	46b9      	mov	r9, r7
 8009a24:	463c      	mov	r4, r7
 8009a26:	9502      	str	r5, [sp, #8]
 8009a28:	46ab      	mov	fp, r5
 8009a2a:	7851      	ldrb	r1, [r2, #1]
 8009a2c:	1c53      	adds	r3, r2, #1
 8009a2e:	9303      	str	r3, [sp, #12]
 8009a30:	b341      	cbz	r1, 8009a84 <__hexnan+0x88>
 8009a32:	4608      	mov	r0, r1
 8009a34:	9205      	str	r2, [sp, #20]
 8009a36:	9104      	str	r1, [sp, #16]
 8009a38:	f7ff fd5e 	bl	80094f8 <__hexdig_fun>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d14f      	bne.n	8009ae0 <__hexnan+0xe4>
 8009a40:	9904      	ldr	r1, [sp, #16]
 8009a42:	9a05      	ldr	r2, [sp, #20]
 8009a44:	2920      	cmp	r1, #32
 8009a46:	d818      	bhi.n	8009a7a <__hexnan+0x7e>
 8009a48:	9b02      	ldr	r3, [sp, #8]
 8009a4a:	459b      	cmp	fp, r3
 8009a4c:	dd13      	ble.n	8009a76 <__hexnan+0x7a>
 8009a4e:	454c      	cmp	r4, r9
 8009a50:	d206      	bcs.n	8009a60 <__hexnan+0x64>
 8009a52:	2d07      	cmp	r5, #7
 8009a54:	dc04      	bgt.n	8009a60 <__hexnan+0x64>
 8009a56:	462a      	mov	r2, r5
 8009a58:	4649      	mov	r1, r9
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f7ff ffa8 	bl	80099b0 <L_shift>
 8009a60:	4544      	cmp	r4, r8
 8009a62:	d950      	bls.n	8009b06 <__hexnan+0x10a>
 8009a64:	2300      	movs	r3, #0
 8009a66:	f1a4 0904 	sub.w	r9, r4, #4
 8009a6a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a6e:	f8cd b008 	str.w	fp, [sp, #8]
 8009a72:	464c      	mov	r4, r9
 8009a74:	461d      	mov	r5, r3
 8009a76:	9a03      	ldr	r2, [sp, #12]
 8009a78:	e7d7      	b.n	8009a2a <__hexnan+0x2e>
 8009a7a:	2929      	cmp	r1, #41	; 0x29
 8009a7c:	d156      	bne.n	8009b2c <__hexnan+0x130>
 8009a7e:	3202      	adds	r2, #2
 8009a80:	f8ca 2000 	str.w	r2, [sl]
 8009a84:	f1bb 0f00 	cmp.w	fp, #0
 8009a88:	d050      	beq.n	8009b2c <__hexnan+0x130>
 8009a8a:	454c      	cmp	r4, r9
 8009a8c:	d206      	bcs.n	8009a9c <__hexnan+0xa0>
 8009a8e:	2d07      	cmp	r5, #7
 8009a90:	dc04      	bgt.n	8009a9c <__hexnan+0xa0>
 8009a92:	462a      	mov	r2, r5
 8009a94:	4649      	mov	r1, r9
 8009a96:	4620      	mov	r0, r4
 8009a98:	f7ff ff8a 	bl	80099b0 <L_shift>
 8009a9c:	4544      	cmp	r4, r8
 8009a9e:	d934      	bls.n	8009b0a <__hexnan+0x10e>
 8009aa0:	f1a8 0204 	sub.w	r2, r8, #4
 8009aa4:	4623      	mov	r3, r4
 8009aa6:	f853 1b04 	ldr.w	r1, [r3], #4
 8009aaa:	f842 1f04 	str.w	r1, [r2, #4]!
 8009aae:	429f      	cmp	r7, r3
 8009ab0:	d2f9      	bcs.n	8009aa6 <__hexnan+0xaa>
 8009ab2:	1b3b      	subs	r3, r7, r4
 8009ab4:	f023 0303 	bic.w	r3, r3, #3
 8009ab8:	3304      	adds	r3, #4
 8009aba:	3401      	adds	r4, #1
 8009abc:	3e03      	subs	r6, #3
 8009abe:	42b4      	cmp	r4, r6
 8009ac0:	bf88      	it	hi
 8009ac2:	2304      	movhi	r3, #4
 8009ac4:	4443      	add	r3, r8
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f843 2b04 	str.w	r2, [r3], #4
 8009acc:	429f      	cmp	r7, r3
 8009ace:	d2fb      	bcs.n	8009ac8 <__hexnan+0xcc>
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	b91b      	cbnz	r3, 8009adc <__hexnan+0xe0>
 8009ad4:	4547      	cmp	r7, r8
 8009ad6:	d127      	bne.n	8009b28 <__hexnan+0x12c>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	603b      	str	r3, [r7, #0]
 8009adc:	2005      	movs	r0, #5
 8009ade:	e026      	b.n	8009b2e <__hexnan+0x132>
 8009ae0:	3501      	adds	r5, #1
 8009ae2:	2d08      	cmp	r5, #8
 8009ae4:	f10b 0b01 	add.w	fp, fp, #1
 8009ae8:	dd06      	ble.n	8009af8 <__hexnan+0xfc>
 8009aea:	4544      	cmp	r4, r8
 8009aec:	d9c3      	bls.n	8009a76 <__hexnan+0x7a>
 8009aee:	2300      	movs	r3, #0
 8009af0:	f844 3c04 	str.w	r3, [r4, #-4]
 8009af4:	2501      	movs	r5, #1
 8009af6:	3c04      	subs	r4, #4
 8009af8:	6822      	ldr	r2, [r4, #0]
 8009afa:	f000 000f 	and.w	r0, r0, #15
 8009afe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009b02:	6022      	str	r2, [r4, #0]
 8009b04:	e7b7      	b.n	8009a76 <__hexnan+0x7a>
 8009b06:	2508      	movs	r5, #8
 8009b08:	e7b5      	b.n	8009a76 <__hexnan+0x7a>
 8009b0a:	9b01      	ldr	r3, [sp, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d0df      	beq.n	8009ad0 <__hexnan+0xd4>
 8009b10:	f04f 32ff 	mov.w	r2, #4294967295
 8009b14:	f1c3 0320 	rsb	r3, r3, #32
 8009b18:	fa22 f303 	lsr.w	r3, r2, r3
 8009b1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009b20:	401a      	ands	r2, r3
 8009b22:	f846 2c04 	str.w	r2, [r6, #-4]
 8009b26:	e7d3      	b.n	8009ad0 <__hexnan+0xd4>
 8009b28:	3f04      	subs	r7, #4
 8009b2a:	e7d1      	b.n	8009ad0 <__hexnan+0xd4>
 8009b2c:	2004      	movs	r0, #4
 8009b2e:	b007      	add	sp, #28
 8009b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b34 <_localeconv_r>:
 8009b34:	4800      	ldr	r0, [pc, #0]	; (8009b38 <_localeconv_r+0x4>)
 8009b36:	4770      	bx	lr
 8009b38:	20000164 	.word	0x20000164

08009b3c <_lseek_r>:
 8009b3c:	b538      	push	{r3, r4, r5, lr}
 8009b3e:	4d07      	ldr	r5, [pc, #28]	; (8009b5c <_lseek_r+0x20>)
 8009b40:	4604      	mov	r4, r0
 8009b42:	4608      	mov	r0, r1
 8009b44:	4611      	mov	r1, r2
 8009b46:	2200      	movs	r2, #0
 8009b48:	602a      	str	r2, [r5, #0]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	f7fa f87f 	bl	8003c4e <_lseek>
 8009b50:	1c43      	adds	r3, r0, #1
 8009b52:	d102      	bne.n	8009b5a <_lseek_r+0x1e>
 8009b54:	682b      	ldr	r3, [r5, #0]
 8009b56:	b103      	cbz	r3, 8009b5a <_lseek_r+0x1e>
 8009b58:	6023      	str	r3, [r4, #0]
 8009b5a:	bd38      	pop	{r3, r4, r5, pc}
 8009b5c:	20001188 	.word	0x20001188

08009b60 <malloc>:
 8009b60:	4b02      	ldr	r3, [pc, #8]	; (8009b6c <malloc+0xc>)
 8009b62:	4601      	mov	r1, r0
 8009b64:	6818      	ldr	r0, [r3, #0]
 8009b66:	f000 bd67 	b.w	800a638 <_malloc_r>
 8009b6a:	bf00      	nop
 8009b6c:	2000000c 	.word	0x2000000c

08009b70 <__ascii_mbtowc>:
 8009b70:	b082      	sub	sp, #8
 8009b72:	b901      	cbnz	r1, 8009b76 <__ascii_mbtowc+0x6>
 8009b74:	a901      	add	r1, sp, #4
 8009b76:	b142      	cbz	r2, 8009b8a <__ascii_mbtowc+0x1a>
 8009b78:	b14b      	cbz	r3, 8009b8e <__ascii_mbtowc+0x1e>
 8009b7a:	7813      	ldrb	r3, [r2, #0]
 8009b7c:	600b      	str	r3, [r1, #0]
 8009b7e:	7812      	ldrb	r2, [r2, #0]
 8009b80:	1e10      	subs	r0, r2, #0
 8009b82:	bf18      	it	ne
 8009b84:	2001      	movne	r0, #1
 8009b86:	b002      	add	sp, #8
 8009b88:	4770      	bx	lr
 8009b8a:	4610      	mov	r0, r2
 8009b8c:	e7fb      	b.n	8009b86 <__ascii_mbtowc+0x16>
 8009b8e:	f06f 0001 	mvn.w	r0, #1
 8009b92:	e7f8      	b.n	8009b86 <__ascii_mbtowc+0x16>

08009b94 <memcpy>:
 8009b94:	440a      	add	r2, r1
 8009b96:	4291      	cmp	r1, r2
 8009b98:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b9c:	d100      	bne.n	8009ba0 <memcpy+0xc>
 8009b9e:	4770      	bx	lr
 8009ba0:	b510      	push	{r4, lr}
 8009ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009baa:	4291      	cmp	r1, r2
 8009bac:	d1f9      	bne.n	8009ba2 <memcpy+0xe>
 8009bae:	bd10      	pop	{r4, pc}

08009bb0 <_Balloc>:
 8009bb0:	b570      	push	{r4, r5, r6, lr}
 8009bb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009bb4:	4604      	mov	r4, r0
 8009bb6:	460d      	mov	r5, r1
 8009bb8:	b976      	cbnz	r6, 8009bd8 <_Balloc+0x28>
 8009bba:	2010      	movs	r0, #16
 8009bbc:	f7ff ffd0 	bl	8009b60 <malloc>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	6260      	str	r0, [r4, #36]	; 0x24
 8009bc4:	b920      	cbnz	r0, 8009bd0 <_Balloc+0x20>
 8009bc6:	4b18      	ldr	r3, [pc, #96]	; (8009c28 <_Balloc+0x78>)
 8009bc8:	4818      	ldr	r0, [pc, #96]	; (8009c2c <_Balloc+0x7c>)
 8009bca:	2166      	movs	r1, #102	; 0x66
 8009bcc:	f001 fb5c 	bl	800b288 <__assert_func>
 8009bd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bd4:	6006      	str	r6, [r0, #0]
 8009bd6:	60c6      	str	r6, [r0, #12]
 8009bd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009bda:	68f3      	ldr	r3, [r6, #12]
 8009bdc:	b183      	cbz	r3, 8009c00 <_Balloc+0x50>
 8009bde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009be6:	b9b8      	cbnz	r0, 8009c18 <_Balloc+0x68>
 8009be8:	2101      	movs	r1, #1
 8009bea:	fa01 f605 	lsl.w	r6, r1, r5
 8009bee:	1d72      	adds	r2, r6, #5
 8009bf0:	0092      	lsls	r2, r2, #2
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f000 fc9d 	bl	800a532 <_calloc_r>
 8009bf8:	b160      	cbz	r0, 8009c14 <_Balloc+0x64>
 8009bfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009bfe:	e00e      	b.n	8009c1e <_Balloc+0x6e>
 8009c00:	2221      	movs	r2, #33	; 0x21
 8009c02:	2104      	movs	r1, #4
 8009c04:	4620      	mov	r0, r4
 8009c06:	f000 fc94 	bl	800a532 <_calloc_r>
 8009c0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c0c:	60f0      	str	r0, [r6, #12]
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d1e4      	bne.n	8009bde <_Balloc+0x2e>
 8009c14:	2000      	movs	r0, #0
 8009c16:	bd70      	pop	{r4, r5, r6, pc}
 8009c18:	6802      	ldr	r2, [r0, #0]
 8009c1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c1e:	2300      	movs	r3, #0
 8009c20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c24:	e7f7      	b.n	8009c16 <_Balloc+0x66>
 8009c26:	bf00      	nop
 8009c28:	0800ea1e 	.word	0x0800ea1e
 8009c2c:	0800eb1c 	.word	0x0800eb1c

08009c30 <_Bfree>:
 8009c30:	b570      	push	{r4, r5, r6, lr}
 8009c32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c34:	4605      	mov	r5, r0
 8009c36:	460c      	mov	r4, r1
 8009c38:	b976      	cbnz	r6, 8009c58 <_Bfree+0x28>
 8009c3a:	2010      	movs	r0, #16
 8009c3c:	f7ff ff90 	bl	8009b60 <malloc>
 8009c40:	4602      	mov	r2, r0
 8009c42:	6268      	str	r0, [r5, #36]	; 0x24
 8009c44:	b920      	cbnz	r0, 8009c50 <_Bfree+0x20>
 8009c46:	4b09      	ldr	r3, [pc, #36]	; (8009c6c <_Bfree+0x3c>)
 8009c48:	4809      	ldr	r0, [pc, #36]	; (8009c70 <_Bfree+0x40>)
 8009c4a:	218a      	movs	r1, #138	; 0x8a
 8009c4c:	f001 fb1c 	bl	800b288 <__assert_func>
 8009c50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c54:	6006      	str	r6, [r0, #0]
 8009c56:	60c6      	str	r6, [r0, #12]
 8009c58:	b13c      	cbz	r4, 8009c6a <_Bfree+0x3a>
 8009c5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c5c:	6862      	ldr	r2, [r4, #4]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c64:	6021      	str	r1, [r4, #0]
 8009c66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c6a:	bd70      	pop	{r4, r5, r6, pc}
 8009c6c:	0800ea1e 	.word	0x0800ea1e
 8009c70:	0800eb1c 	.word	0x0800eb1c

08009c74 <__multadd>:
 8009c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c78:	690d      	ldr	r5, [r1, #16]
 8009c7a:	4607      	mov	r7, r0
 8009c7c:	460c      	mov	r4, r1
 8009c7e:	461e      	mov	r6, r3
 8009c80:	f101 0c14 	add.w	ip, r1, #20
 8009c84:	2000      	movs	r0, #0
 8009c86:	f8dc 3000 	ldr.w	r3, [ip]
 8009c8a:	b299      	uxth	r1, r3
 8009c8c:	fb02 6101 	mla	r1, r2, r1, r6
 8009c90:	0c1e      	lsrs	r6, r3, #16
 8009c92:	0c0b      	lsrs	r3, r1, #16
 8009c94:	fb02 3306 	mla	r3, r2, r6, r3
 8009c98:	b289      	uxth	r1, r1
 8009c9a:	3001      	adds	r0, #1
 8009c9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ca0:	4285      	cmp	r5, r0
 8009ca2:	f84c 1b04 	str.w	r1, [ip], #4
 8009ca6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009caa:	dcec      	bgt.n	8009c86 <__multadd+0x12>
 8009cac:	b30e      	cbz	r6, 8009cf2 <__multadd+0x7e>
 8009cae:	68a3      	ldr	r3, [r4, #8]
 8009cb0:	42ab      	cmp	r3, r5
 8009cb2:	dc19      	bgt.n	8009ce8 <__multadd+0x74>
 8009cb4:	6861      	ldr	r1, [r4, #4]
 8009cb6:	4638      	mov	r0, r7
 8009cb8:	3101      	adds	r1, #1
 8009cba:	f7ff ff79 	bl	8009bb0 <_Balloc>
 8009cbe:	4680      	mov	r8, r0
 8009cc0:	b928      	cbnz	r0, 8009cce <__multadd+0x5a>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	4b0c      	ldr	r3, [pc, #48]	; (8009cf8 <__multadd+0x84>)
 8009cc6:	480d      	ldr	r0, [pc, #52]	; (8009cfc <__multadd+0x88>)
 8009cc8:	21b5      	movs	r1, #181	; 0xb5
 8009cca:	f001 fadd 	bl	800b288 <__assert_func>
 8009cce:	6922      	ldr	r2, [r4, #16]
 8009cd0:	3202      	adds	r2, #2
 8009cd2:	f104 010c 	add.w	r1, r4, #12
 8009cd6:	0092      	lsls	r2, r2, #2
 8009cd8:	300c      	adds	r0, #12
 8009cda:	f7ff ff5b 	bl	8009b94 <memcpy>
 8009cde:	4621      	mov	r1, r4
 8009ce0:	4638      	mov	r0, r7
 8009ce2:	f7ff ffa5 	bl	8009c30 <_Bfree>
 8009ce6:	4644      	mov	r4, r8
 8009ce8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009cec:	3501      	adds	r5, #1
 8009cee:	615e      	str	r6, [r3, #20]
 8009cf0:	6125      	str	r5, [r4, #16]
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cf8:	0800ea90 	.word	0x0800ea90
 8009cfc:	0800eb1c 	.word	0x0800eb1c

08009d00 <__s2b>:
 8009d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d04:	460c      	mov	r4, r1
 8009d06:	4615      	mov	r5, r2
 8009d08:	461f      	mov	r7, r3
 8009d0a:	2209      	movs	r2, #9
 8009d0c:	3308      	adds	r3, #8
 8009d0e:	4606      	mov	r6, r0
 8009d10:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d14:	2100      	movs	r1, #0
 8009d16:	2201      	movs	r2, #1
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	db09      	blt.n	8009d30 <__s2b+0x30>
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	f7ff ff47 	bl	8009bb0 <_Balloc>
 8009d22:	b940      	cbnz	r0, 8009d36 <__s2b+0x36>
 8009d24:	4602      	mov	r2, r0
 8009d26:	4b19      	ldr	r3, [pc, #100]	; (8009d8c <__s2b+0x8c>)
 8009d28:	4819      	ldr	r0, [pc, #100]	; (8009d90 <__s2b+0x90>)
 8009d2a:	21ce      	movs	r1, #206	; 0xce
 8009d2c:	f001 faac 	bl	800b288 <__assert_func>
 8009d30:	0052      	lsls	r2, r2, #1
 8009d32:	3101      	adds	r1, #1
 8009d34:	e7f0      	b.n	8009d18 <__s2b+0x18>
 8009d36:	9b08      	ldr	r3, [sp, #32]
 8009d38:	6143      	str	r3, [r0, #20]
 8009d3a:	2d09      	cmp	r5, #9
 8009d3c:	f04f 0301 	mov.w	r3, #1
 8009d40:	6103      	str	r3, [r0, #16]
 8009d42:	dd16      	ble.n	8009d72 <__s2b+0x72>
 8009d44:	f104 0909 	add.w	r9, r4, #9
 8009d48:	46c8      	mov	r8, r9
 8009d4a:	442c      	add	r4, r5
 8009d4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009d50:	4601      	mov	r1, r0
 8009d52:	3b30      	subs	r3, #48	; 0x30
 8009d54:	220a      	movs	r2, #10
 8009d56:	4630      	mov	r0, r6
 8009d58:	f7ff ff8c 	bl	8009c74 <__multadd>
 8009d5c:	45a0      	cmp	r8, r4
 8009d5e:	d1f5      	bne.n	8009d4c <__s2b+0x4c>
 8009d60:	f1a5 0408 	sub.w	r4, r5, #8
 8009d64:	444c      	add	r4, r9
 8009d66:	1b2d      	subs	r5, r5, r4
 8009d68:	1963      	adds	r3, r4, r5
 8009d6a:	42bb      	cmp	r3, r7
 8009d6c:	db04      	blt.n	8009d78 <__s2b+0x78>
 8009d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d72:	340a      	adds	r4, #10
 8009d74:	2509      	movs	r5, #9
 8009d76:	e7f6      	b.n	8009d66 <__s2b+0x66>
 8009d78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009d7c:	4601      	mov	r1, r0
 8009d7e:	3b30      	subs	r3, #48	; 0x30
 8009d80:	220a      	movs	r2, #10
 8009d82:	4630      	mov	r0, r6
 8009d84:	f7ff ff76 	bl	8009c74 <__multadd>
 8009d88:	e7ee      	b.n	8009d68 <__s2b+0x68>
 8009d8a:	bf00      	nop
 8009d8c:	0800ea90 	.word	0x0800ea90
 8009d90:	0800eb1c 	.word	0x0800eb1c

08009d94 <__hi0bits>:
 8009d94:	0c03      	lsrs	r3, r0, #16
 8009d96:	041b      	lsls	r3, r3, #16
 8009d98:	b9d3      	cbnz	r3, 8009dd0 <__hi0bits+0x3c>
 8009d9a:	0400      	lsls	r0, r0, #16
 8009d9c:	2310      	movs	r3, #16
 8009d9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009da2:	bf04      	itt	eq
 8009da4:	0200      	lsleq	r0, r0, #8
 8009da6:	3308      	addeq	r3, #8
 8009da8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009dac:	bf04      	itt	eq
 8009dae:	0100      	lsleq	r0, r0, #4
 8009db0:	3304      	addeq	r3, #4
 8009db2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009db6:	bf04      	itt	eq
 8009db8:	0080      	lsleq	r0, r0, #2
 8009dba:	3302      	addeq	r3, #2
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	db05      	blt.n	8009dcc <__hi0bits+0x38>
 8009dc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009dc4:	f103 0301 	add.w	r3, r3, #1
 8009dc8:	bf08      	it	eq
 8009dca:	2320      	moveq	r3, #32
 8009dcc:	4618      	mov	r0, r3
 8009dce:	4770      	bx	lr
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	e7e4      	b.n	8009d9e <__hi0bits+0xa>

08009dd4 <__lo0bits>:
 8009dd4:	6803      	ldr	r3, [r0, #0]
 8009dd6:	f013 0207 	ands.w	r2, r3, #7
 8009dda:	4601      	mov	r1, r0
 8009ddc:	d00b      	beq.n	8009df6 <__lo0bits+0x22>
 8009dde:	07da      	lsls	r2, r3, #31
 8009de0:	d423      	bmi.n	8009e2a <__lo0bits+0x56>
 8009de2:	0798      	lsls	r0, r3, #30
 8009de4:	bf49      	itett	mi
 8009de6:	085b      	lsrmi	r3, r3, #1
 8009de8:	089b      	lsrpl	r3, r3, #2
 8009dea:	2001      	movmi	r0, #1
 8009dec:	600b      	strmi	r3, [r1, #0]
 8009dee:	bf5c      	itt	pl
 8009df0:	600b      	strpl	r3, [r1, #0]
 8009df2:	2002      	movpl	r0, #2
 8009df4:	4770      	bx	lr
 8009df6:	b298      	uxth	r0, r3
 8009df8:	b9a8      	cbnz	r0, 8009e26 <__lo0bits+0x52>
 8009dfa:	0c1b      	lsrs	r3, r3, #16
 8009dfc:	2010      	movs	r0, #16
 8009dfe:	b2da      	uxtb	r2, r3
 8009e00:	b90a      	cbnz	r2, 8009e06 <__lo0bits+0x32>
 8009e02:	3008      	adds	r0, #8
 8009e04:	0a1b      	lsrs	r3, r3, #8
 8009e06:	071a      	lsls	r2, r3, #28
 8009e08:	bf04      	itt	eq
 8009e0a:	091b      	lsreq	r3, r3, #4
 8009e0c:	3004      	addeq	r0, #4
 8009e0e:	079a      	lsls	r2, r3, #30
 8009e10:	bf04      	itt	eq
 8009e12:	089b      	lsreq	r3, r3, #2
 8009e14:	3002      	addeq	r0, #2
 8009e16:	07da      	lsls	r2, r3, #31
 8009e18:	d403      	bmi.n	8009e22 <__lo0bits+0x4e>
 8009e1a:	085b      	lsrs	r3, r3, #1
 8009e1c:	f100 0001 	add.w	r0, r0, #1
 8009e20:	d005      	beq.n	8009e2e <__lo0bits+0x5a>
 8009e22:	600b      	str	r3, [r1, #0]
 8009e24:	4770      	bx	lr
 8009e26:	4610      	mov	r0, r2
 8009e28:	e7e9      	b.n	8009dfe <__lo0bits+0x2a>
 8009e2a:	2000      	movs	r0, #0
 8009e2c:	4770      	bx	lr
 8009e2e:	2020      	movs	r0, #32
 8009e30:	4770      	bx	lr
	...

08009e34 <__i2b>:
 8009e34:	b510      	push	{r4, lr}
 8009e36:	460c      	mov	r4, r1
 8009e38:	2101      	movs	r1, #1
 8009e3a:	f7ff feb9 	bl	8009bb0 <_Balloc>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	b928      	cbnz	r0, 8009e4e <__i2b+0x1a>
 8009e42:	4b05      	ldr	r3, [pc, #20]	; (8009e58 <__i2b+0x24>)
 8009e44:	4805      	ldr	r0, [pc, #20]	; (8009e5c <__i2b+0x28>)
 8009e46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009e4a:	f001 fa1d 	bl	800b288 <__assert_func>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	6144      	str	r4, [r0, #20]
 8009e52:	6103      	str	r3, [r0, #16]
 8009e54:	bd10      	pop	{r4, pc}
 8009e56:	bf00      	nop
 8009e58:	0800ea90 	.word	0x0800ea90
 8009e5c:	0800eb1c 	.word	0x0800eb1c

08009e60 <__multiply>:
 8009e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e64:	4691      	mov	r9, r2
 8009e66:	690a      	ldr	r2, [r1, #16]
 8009e68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	bfb8      	it	lt
 8009e70:	460b      	movlt	r3, r1
 8009e72:	460c      	mov	r4, r1
 8009e74:	bfbc      	itt	lt
 8009e76:	464c      	movlt	r4, r9
 8009e78:	4699      	movlt	r9, r3
 8009e7a:	6927      	ldr	r7, [r4, #16]
 8009e7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009e80:	68a3      	ldr	r3, [r4, #8]
 8009e82:	6861      	ldr	r1, [r4, #4]
 8009e84:	eb07 060a 	add.w	r6, r7, sl
 8009e88:	42b3      	cmp	r3, r6
 8009e8a:	b085      	sub	sp, #20
 8009e8c:	bfb8      	it	lt
 8009e8e:	3101      	addlt	r1, #1
 8009e90:	f7ff fe8e 	bl	8009bb0 <_Balloc>
 8009e94:	b930      	cbnz	r0, 8009ea4 <__multiply+0x44>
 8009e96:	4602      	mov	r2, r0
 8009e98:	4b44      	ldr	r3, [pc, #272]	; (8009fac <__multiply+0x14c>)
 8009e9a:	4845      	ldr	r0, [pc, #276]	; (8009fb0 <__multiply+0x150>)
 8009e9c:	f240 115d 	movw	r1, #349	; 0x15d
 8009ea0:	f001 f9f2 	bl	800b288 <__assert_func>
 8009ea4:	f100 0514 	add.w	r5, r0, #20
 8009ea8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009eac:	462b      	mov	r3, r5
 8009eae:	2200      	movs	r2, #0
 8009eb0:	4543      	cmp	r3, r8
 8009eb2:	d321      	bcc.n	8009ef8 <__multiply+0x98>
 8009eb4:	f104 0314 	add.w	r3, r4, #20
 8009eb8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ebc:	f109 0314 	add.w	r3, r9, #20
 8009ec0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ec4:	9202      	str	r2, [sp, #8]
 8009ec6:	1b3a      	subs	r2, r7, r4
 8009ec8:	3a15      	subs	r2, #21
 8009eca:	f022 0203 	bic.w	r2, r2, #3
 8009ece:	3204      	adds	r2, #4
 8009ed0:	f104 0115 	add.w	r1, r4, #21
 8009ed4:	428f      	cmp	r7, r1
 8009ed6:	bf38      	it	cc
 8009ed8:	2204      	movcc	r2, #4
 8009eda:	9201      	str	r2, [sp, #4]
 8009edc:	9a02      	ldr	r2, [sp, #8]
 8009ede:	9303      	str	r3, [sp, #12]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d80c      	bhi.n	8009efe <__multiply+0x9e>
 8009ee4:	2e00      	cmp	r6, #0
 8009ee6:	dd03      	ble.n	8009ef0 <__multiply+0x90>
 8009ee8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d05a      	beq.n	8009fa6 <__multiply+0x146>
 8009ef0:	6106      	str	r6, [r0, #16]
 8009ef2:	b005      	add	sp, #20
 8009ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef8:	f843 2b04 	str.w	r2, [r3], #4
 8009efc:	e7d8      	b.n	8009eb0 <__multiply+0x50>
 8009efe:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f02:	f1ba 0f00 	cmp.w	sl, #0
 8009f06:	d024      	beq.n	8009f52 <__multiply+0xf2>
 8009f08:	f104 0e14 	add.w	lr, r4, #20
 8009f0c:	46a9      	mov	r9, r5
 8009f0e:	f04f 0c00 	mov.w	ip, #0
 8009f12:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009f16:	f8d9 1000 	ldr.w	r1, [r9]
 8009f1a:	fa1f fb82 	uxth.w	fp, r2
 8009f1e:	b289      	uxth	r1, r1
 8009f20:	fb0a 110b 	mla	r1, sl, fp, r1
 8009f24:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009f28:	f8d9 2000 	ldr.w	r2, [r9]
 8009f2c:	4461      	add	r1, ip
 8009f2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f32:	fb0a c20b 	mla	r2, sl, fp, ip
 8009f36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009f3a:	b289      	uxth	r1, r1
 8009f3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009f40:	4577      	cmp	r7, lr
 8009f42:	f849 1b04 	str.w	r1, [r9], #4
 8009f46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f4a:	d8e2      	bhi.n	8009f12 <__multiply+0xb2>
 8009f4c:	9a01      	ldr	r2, [sp, #4]
 8009f4e:	f845 c002 	str.w	ip, [r5, r2]
 8009f52:	9a03      	ldr	r2, [sp, #12]
 8009f54:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009f58:	3304      	adds	r3, #4
 8009f5a:	f1b9 0f00 	cmp.w	r9, #0
 8009f5e:	d020      	beq.n	8009fa2 <__multiply+0x142>
 8009f60:	6829      	ldr	r1, [r5, #0]
 8009f62:	f104 0c14 	add.w	ip, r4, #20
 8009f66:	46ae      	mov	lr, r5
 8009f68:	f04f 0a00 	mov.w	sl, #0
 8009f6c:	f8bc b000 	ldrh.w	fp, [ip]
 8009f70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009f74:	fb09 220b 	mla	r2, r9, fp, r2
 8009f78:	4492      	add	sl, r2
 8009f7a:	b289      	uxth	r1, r1
 8009f7c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009f80:	f84e 1b04 	str.w	r1, [lr], #4
 8009f84:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009f88:	f8be 1000 	ldrh.w	r1, [lr]
 8009f8c:	0c12      	lsrs	r2, r2, #16
 8009f8e:	fb09 1102 	mla	r1, r9, r2, r1
 8009f92:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009f96:	4567      	cmp	r7, ip
 8009f98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009f9c:	d8e6      	bhi.n	8009f6c <__multiply+0x10c>
 8009f9e:	9a01      	ldr	r2, [sp, #4]
 8009fa0:	50a9      	str	r1, [r5, r2]
 8009fa2:	3504      	adds	r5, #4
 8009fa4:	e79a      	b.n	8009edc <__multiply+0x7c>
 8009fa6:	3e01      	subs	r6, #1
 8009fa8:	e79c      	b.n	8009ee4 <__multiply+0x84>
 8009faa:	bf00      	nop
 8009fac:	0800ea90 	.word	0x0800ea90
 8009fb0:	0800eb1c 	.word	0x0800eb1c

08009fb4 <__pow5mult>:
 8009fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fb8:	4615      	mov	r5, r2
 8009fba:	f012 0203 	ands.w	r2, r2, #3
 8009fbe:	4606      	mov	r6, r0
 8009fc0:	460f      	mov	r7, r1
 8009fc2:	d007      	beq.n	8009fd4 <__pow5mult+0x20>
 8009fc4:	4c25      	ldr	r4, [pc, #148]	; (800a05c <__pow5mult+0xa8>)
 8009fc6:	3a01      	subs	r2, #1
 8009fc8:	2300      	movs	r3, #0
 8009fca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009fce:	f7ff fe51 	bl	8009c74 <__multadd>
 8009fd2:	4607      	mov	r7, r0
 8009fd4:	10ad      	asrs	r5, r5, #2
 8009fd6:	d03d      	beq.n	800a054 <__pow5mult+0xa0>
 8009fd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009fda:	b97c      	cbnz	r4, 8009ffc <__pow5mult+0x48>
 8009fdc:	2010      	movs	r0, #16
 8009fde:	f7ff fdbf 	bl	8009b60 <malloc>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	6270      	str	r0, [r6, #36]	; 0x24
 8009fe6:	b928      	cbnz	r0, 8009ff4 <__pow5mult+0x40>
 8009fe8:	4b1d      	ldr	r3, [pc, #116]	; (800a060 <__pow5mult+0xac>)
 8009fea:	481e      	ldr	r0, [pc, #120]	; (800a064 <__pow5mult+0xb0>)
 8009fec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009ff0:	f001 f94a 	bl	800b288 <__assert_func>
 8009ff4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ff8:	6004      	str	r4, [r0, #0]
 8009ffa:	60c4      	str	r4, [r0, #12]
 8009ffc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a000:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a004:	b94c      	cbnz	r4, 800a01a <__pow5mult+0x66>
 800a006:	f240 2171 	movw	r1, #625	; 0x271
 800a00a:	4630      	mov	r0, r6
 800a00c:	f7ff ff12 	bl	8009e34 <__i2b>
 800a010:	2300      	movs	r3, #0
 800a012:	f8c8 0008 	str.w	r0, [r8, #8]
 800a016:	4604      	mov	r4, r0
 800a018:	6003      	str	r3, [r0, #0]
 800a01a:	f04f 0900 	mov.w	r9, #0
 800a01e:	07eb      	lsls	r3, r5, #31
 800a020:	d50a      	bpl.n	800a038 <__pow5mult+0x84>
 800a022:	4639      	mov	r1, r7
 800a024:	4622      	mov	r2, r4
 800a026:	4630      	mov	r0, r6
 800a028:	f7ff ff1a 	bl	8009e60 <__multiply>
 800a02c:	4639      	mov	r1, r7
 800a02e:	4680      	mov	r8, r0
 800a030:	4630      	mov	r0, r6
 800a032:	f7ff fdfd 	bl	8009c30 <_Bfree>
 800a036:	4647      	mov	r7, r8
 800a038:	106d      	asrs	r5, r5, #1
 800a03a:	d00b      	beq.n	800a054 <__pow5mult+0xa0>
 800a03c:	6820      	ldr	r0, [r4, #0]
 800a03e:	b938      	cbnz	r0, 800a050 <__pow5mult+0x9c>
 800a040:	4622      	mov	r2, r4
 800a042:	4621      	mov	r1, r4
 800a044:	4630      	mov	r0, r6
 800a046:	f7ff ff0b 	bl	8009e60 <__multiply>
 800a04a:	6020      	str	r0, [r4, #0]
 800a04c:	f8c0 9000 	str.w	r9, [r0]
 800a050:	4604      	mov	r4, r0
 800a052:	e7e4      	b.n	800a01e <__pow5mult+0x6a>
 800a054:	4638      	mov	r0, r7
 800a056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a05a:	bf00      	nop
 800a05c:	0800ec68 	.word	0x0800ec68
 800a060:	0800ea1e 	.word	0x0800ea1e
 800a064:	0800eb1c 	.word	0x0800eb1c

0800a068 <__lshift>:
 800a068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a06c:	460c      	mov	r4, r1
 800a06e:	6849      	ldr	r1, [r1, #4]
 800a070:	6923      	ldr	r3, [r4, #16]
 800a072:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a076:	68a3      	ldr	r3, [r4, #8]
 800a078:	4607      	mov	r7, r0
 800a07a:	4691      	mov	r9, r2
 800a07c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a080:	f108 0601 	add.w	r6, r8, #1
 800a084:	42b3      	cmp	r3, r6
 800a086:	db0b      	blt.n	800a0a0 <__lshift+0x38>
 800a088:	4638      	mov	r0, r7
 800a08a:	f7ff fd91 	bl	8009bb0 <_Balloc>
 800a08e:	4605      	mov	r5, r0
 800a090:	b948      	cbnz	r0, 800a0a6 <__lshift+0x3e>
 800a092:	4602      	mov	r2, r0
 800a094:	4b2a      	ldr	r3, [pc, #168]	; (800a140 <__lshift+0xd8>)
 800a096:	482b      	ldr	r0, [pc, #172]	; (800a144 <__lshift+0xdc>)
 800a098:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a09c:	f001 f8f4 	bl	800b288 <__assert_func>
 800a0a0:	3101      	adds	r1, #1
 800a0a2:	005b      	lsls	r3, r3, #1
 800a0a4:	e7ee      	b.n	800a084 <__lshift+0x1c>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	f100 0114 	add.w	r1, r0, #20
 800a0ac:	f100 0210 	add.w	r2, r0, #16
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	4553      	cmp	r3, sl
 800a0b4:	db37      	blt.n	800a126 <__lshift+0xbe>
 800a0b6:	6920      	ldr	r0, [r4, #16]
 800a0b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a0bc:	f104 0314 	add.w	r3, r4, #20
 800a0c0:	f019 091f 	ands.w	r9, r9, #31
 800a0c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a0c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a0cc:	d02f      	beq.n	800a12e <__lshift+0xc6>
 800a0ce:	f1c9 0e20 	rsb	lr, r9, #32
 800a0d2:	468a      	mov	sl, r1
 800a0d4:	f04f 0c00 	mov.w	ip, #0
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	fa02 f209 	lsl.w	r2, r2, r9
 800a0de:	ea42 020c 	orr.w	r2, r2, ip
 800a0e2:	f84a 2b04 	str.w	r2, [sl], #4
 800a0e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0ea:	4298      	cmp	r0, r3
 800a0ec:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a0f0:	d8f2      	bhi.n	800a0d8 <__lshift+0x70>
 800a0f2:	1b03      	subs	r3, r0, r4
 800a0f4:	3b15      	subs	r3, #21
 800a0f6:	f023 0303 	bic.w	r3, r3, #3
 800a0fa:	3304      	adds	r3, #4
 800a0fc:	f104 0215 	add.w	r2, r4, #21
 800a100:	4290      	cmp	r0, r2
 800a102:	bf38      	it	cc
 800a104:	2304      	movcc	r3, #4
 800a106:	f841 c003 	str.w	ip, [r1, r3]
 800a10a:	f1bc 0f00 	cmp.w	ip, #0
 800a10e:	d001      	beq.n	800a114 <__lshift+0xac>
 800a110:	f108 0602 	add.w	r6, r8, #2
 800a114:	3e01      	subs	r6, #1
 800a116:	4638      	mov	r0, r7
 800a118:	612e      	str	r6, [r5, #16]
 800a11a:	4621      	mov	r1, r4
 800a11c:	f7ff fd88 	bl	8009c30 <_Bfree>
 800a120:	4628      	mov	r0, r5
 800a122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a126:	f842 0f04 	str.w	r0, [r2, #4]!
 800a12a:	3301      	adds	r3, #1
 800a12c:	e7c1      	b.n	800a0b2 <__lshift+0x4a>
 800a12e:	3904      	subs	r1, #4
 800a130:	f853 2b04 	ldr.w	r2, [r3], #4
 800a134:	f841 2f04 	str.w	r2, [r1, #4]!
 800a138:	4298      	cmp	r0, r3
 800a13a:	d8f9      	bhi.n	800a130 <__lshift+0xc8>
 800a13c:	e7ea      	b.n	800a114 <__lshift+0xac>
 800a13e:	bf00      	nop
 800a140:	0800ea90 	.word	0x0800ea90
 800a144:	0800eb1c 	.word	0x0800eb1c

0800a148 <__mcmp>:
 800a148:	b530      	push	{r4, r5, lr}
 800a14a:	6902      	ldr	r2, [r0, #16]
 800a14c:	690c      	ldr	r4, [r1, #16]
 800a14e:	1b12      	subs	r2, r2, r4
 800a150:	d10e      	bne.n	800a170 <__mcmp+0x28>
 800a152:	f100 0314 	add.w	r3, r0, #20
 800a156:	3114      	adds	r1, #20
 800a158:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a15c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a160:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a164:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a168:	42a5      	cmp	r5, r4
 800a16a:	d003      	beq.n	800a174 <__mcmp+0x2c>
 800a16c:	d305      	bcc.n	800a17a <__mcmp+0x32>
 800a16e:	2201      	movs	r2, #1
 800a170:	4610      	mov	r0, r2
 800a172:	bd30      	pop	{r4, r5, pc}
 800a174:	4283      	cmp	r3, r0
 800a176:	d3f3      	bcc.n	800a160 <__mcmp+0x18>
 800a178:	e7fa      	b.n	800a170 <__mcmp+0x28>
 800a17a:	f04f 32ff 	mov.w	r2, #4294967295
 800a17e:	e7f7      	b.n	800a170 <__mcmp+0x28>

0800a180 <__mdiff>:
 800a180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a184:	460c      	mov	r4, r1
 800a186:	4606      	mov	r6, r0
 800a188:	4611      	mov	r1, r2
 800a18a:	4620      	mov	r0, r4
 800a18c:	4690      	mov	r8, r2
 800a18e:	f7ff ffdb 	bl	800a148 <__mcmp>
 800a192:	1e05      	subs	r5, r0, #0
 800a194:	d110      	bne.n	800a1b8 <__mdiff+0x38>
 800a196:	4629      	mov	r1, r5
 800a198:	4630      	mov	r0, r6
 800a19a:	f7ff fd09 	bl	8009bb0 <_Balloc>
 800a19e:	b930      	cbnz	r0, 800a1ae <__mdiff+0x2e>
 800a1a0:	4b3a      	ldr	r3, [pc, #232]	; (800a28c <__mdiff+0x10c>)
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	f240 2132 	movw	r1, #562	; 0x232
 800a1a8:	4839      	ldr	r0, [pc, #228]	; (800a290 <__mdiff+0x110>)
 800a1aa:	f001 f86d 	bl	800b288 <__assert_func>
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a1b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b8:	bfa4      	itt	ge
 800a1ba:	4643      	movge	r3, r8
 800a1bc:	46a0      	movge	r8, r4
 800a1be:	4630      	mov	r0, r6
 800a1c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a1c4:	bfa6      	itte	ge
 800a1c6:	461c      	movge	r4, r3
 800a1c8:	2500      	movge	r5, #0
 800a1ca:	2501      	movlt	r5, #1
 800a1cc:	f7ff fcf0 	bl	8009bb0 <_Balloc>
 800a1d0:	b920      	cbnz	r0, 800a1dc <__mdiff+0x5c>
 800a1d2:	4b2e      	ldr	r3, [pc, #184]	; (800a28c <__mdiff+0x10c>)
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a1da:	e7e5      	b.n	800a1a8 <__mdiff+0x28>
 800a1dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a1e0:	6926      	ldr	r6, [r4, #16]
 800a1e2:	60c5      	str	r5, [r0, #12]
 800a1e4:	f104 0914 	add.w	r9, r4, #20
 800a1e8:	f108 0514 	add.w	r5, r8, #20
 800a1ec:	f100 0e14 	add.w	lr, r0, #20
 800a1f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a1f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a1f8:	f108 0210 	add.w	r2, r8, #16
 800a1fc:	46f2      	mov	sl, lr
 800a1fe:	2100      	movs	r1, #0
 800a200:	f859 3b04 	ldr.w	r3, [r9], #4
 800a204:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a208:	fa1f f883 	uxth.w	r8, r3
 800a20c:	fa11 f18b 	uxtah	r1, r1, fp
 800a210:	0c1b      	lsrs	r3, r3, #16
 800a212:	eba1 0808 	sub.w	r8, r1, r8
 800a216:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a21a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a21e:	fa1f f888 	uxth.w	r8, r8
 800a222:	1419      	asrs	r1, r3, #16
 800a224:	454e      	cmp	r6, r9
 800a226:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a22a:	f84a 3b04 	str.w	r3, [sl], #4
 800a22e:	d8e7      	bhi.n	800a200 <__mdiff+0x80>
 800a230:	1b33      	subs	r3, r6, r4
 800a232:	3b15      	subs	r3, #21
 800a234:	f023 0303 	bic.w	r3, r3, #3
 800a238:	3304      	adds	r3, #4
 800a23a:	3415      	adds	r4, #21
 800a23c:	42a6      	cmp	r6, r4
 800a23e:	bf38      	it	cc
 800a240:	2304      	movcc	r3, #4
 800a242:	441d      	add	r5, r3
 800a244:	4473      	add	r3, lr
 800a246:	469e      	mov	lr, r3
 800a248:	462e      	mov	r6, r5
 800a24a:	4566      	cmp	r6, ip
 800a24c:	d30e      	bcc.n	800a26c <__mdiff+0xec>
 800a24e:	f10c 0203 	add.w	r2, ip, #3
 800a252:	1b52      	subs	r2, r2, r5
 800a254:	f022 0203 	bic.w	r2, r2, #3
 800a258:	3d03      	subs	r5, #3
 800a25a:	45ac      	cmp	ip, r5
 800a25c:	bf38      	it	cc
 800a25e:	2200      	movcc	r2, #0
 800a260:	441a      	add	r2, r3
 800a262:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a266:	b17b      	cbz	r3, 800a288 <__mdiff+0x108>
 800a268:	6107      	str	r7, [r0, #16]
 800a26a:	e7a3      	b.n	800a1b4 <__mdiff+0x34>
 800a26c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a270:	fa11 f288 	uxtah	r2, r1, r8
 800a274:	1414      	asrs	r4, r2, #16
 800a276:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a27a:	b292      	uxth	r2, r2
 800a27c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a280:	f84e 2b04 	str.w	r2, [lr], #4
 800a284:	1421      	asrs	r1, r4, #16
 800a286:	e7e0      	b.n	800a24a <__mdiff+0xca>
 800a288:	3f01      	subs	r7, #1
 800a28a:	e7ea      	b.n	800a262 <__mdiff+0xe2>
 800a28c:	0800ea90 	.word	0x0800ea90
 800a290:	0800eb1c 	.word	0x0800eb1c

0800a294 <__ulp>:
 800a294:	b082      	sub	sp, #8
 800a296:	ed8d 0b00 	vstr	d0, [sp]
 800a29a:	9b01      	ldr	r3, [sp, #4]
 800a29c:	4912      	ldr	r1, [pc, #72]	; (800a2e8 <__ulp+0x54>)
 800a29e:	4019      	ands	r1, r3
 800a2a0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a2a4:	2900      	cmp	r1, #0
 800a2a6:	dd05      	ble.n	800a2b4 <__ulp+0x20>
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	ec43 2b10 	vmov	d0, r2, r3
 800a2b0:	b002      	add	sp, #8
 800a2b2:	4770      	bx	lr
 800a2b4:	4249      	negs	r1, r1
 800a2b6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a2ba:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a2be:	f04f 0200 	mov.w	r2, #0
 800a2c2:	f04f 0300 	mov.w	r3, #0
 800a2c6:	da04      	bge.n	800a2d2 <__ulp+0x3e>
 800a2c8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a2cc:	fa41 f300 	asr.w	r3, r1, r0
 800a2d0:	e7ec      	b.n	800a2ac <__ulp+0x18>
 800a2d2:	f1a0 0114 	sub.w	r1, r0, #20
 800a2d6:	291e      	cmp	r1, #30
 800a2d8:	bfda      	itte	le
 800a2da:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a2de:	fa20 f101 	lsrle.w	r1, r0, r1
 800a2e2:	2101      	movgt	r1, #1
 800a2e4:	460a      	mov	r2, r1
 800a2e6:	e7e1      	b.n	800a2ac <__ulp+0x18>
 800a2e8:	7ff00000 	.word	0x7ff00000

0800a2ec <__b2d>:
 800a2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ee:	6905      	ldr	r5, [r0, #16]
 800a2f0:	f100 0714 	add.w	r7, r0, #20
 800a2f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a2f8:	1f2e      	subs	r6, r5, #4
 800a2fa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a2fe:	4620      	mov	r0, r4
 800a300:	f7ff fd48 	bl	8009d94 <__hi0bits>
 800a304:	f1c0 0320 	rsb	r3, r0, #32
 800a308:	280a      	cmp	r0, #10
 800a30a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a388 <__b2d+0x9c>
 800a30e:	600b      	str	r3, [r1, #0]
 800a310:	dc14      	bgt.n	800a33c <__b2d+0x50>
 800a312:	f1c0 0e0b 	rsb	lr, r0, #11
 800a316:	fa24 f10e 	lsr.w	r1, r4, lr
 800a31a:	42b7      	cmp	r7, r6
 800a31c:	ea41 030c 	orr.w	r3, r1, ip
 800a320:	bf34      	ite	cc
 800a322:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a326:	2100      	movcs	r1, #0
 800a328:	3015      	adds	r0, #21
 800a32a:	fa04 f000 	lsl.w	r0, r4, r0
 800a32e:	fa21 f10e 	lsr.w	r1, r1, lr
 800a332:	ea40 0201 	orr.w	r2, r0, r1
 800a336:	ec43 2b10 	vmov	d0, r2, r3
 800a33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a33c:	42b7      	cmp	r7, r6
 800a33e:	bf3a      	itte	cc
 800a340:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a344:	f1a5 0608 	subcc.w	r6, r5, #8
 800a348:	2100      	movcs	r1, #0
 800a34a:	380b      	subs	r0, #11
 800a34c:	d017      	beq.n	800a37e <__b2d+0x92>
 800a34e:	f1c0 0c20 	rsb	ip, r0, #32
 800a352:	fa04 f500 	lsl.w	r5, r4, r0
 800a356:	42be      	cmp	r6, r7
 800a358:	fa21 f40c 	lsr.w	r4, r1, ip
 800a35c:	ea45 0504 	orr.w	r5, r5, r4
 800a360:	bf8c      	ite	hi
 800a362:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a366:	2400      	movls	r4, #0
 800a368:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a36c:	fa01 f000 	lsl.w	r0, r1, r0
 800a370:	fa24 f40c 	lsr.w	r4, r4, ip
 800a374:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a378:	ea40 0204 	orr.w	r2, r0, r4
 800a37c:	e7db      	b.n	800a336 <__b2d+0x4a>
 800a37e:	ea44 030c 	orr.w	r3, r4, ip
 800a382:	460a      	mov	r2, r1
 800a384:	e7d7      	b.n	800a336 <__b2d+0x4a>
 800a386:	bf00      	nop
 800a388:	3ff00000 	.word	0x3ff00000

0800a38c <__d2b>:
 800a38c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a390:	4689      	mov	r9, r1
 800a392:	2101      	movs	r1, #1
 800a394:	ec57 6b10 	vmov	r6, r7, d0
 800a398:	4690      	mov	r8, r2
 800a39a:	f7ff fc09 	bl	8009bb0 <_Balloc>
 800a39e:	4604      	mov	r4, r0
 800a3a0:	b930      	cbnz	r0, 800a3b0 <__d2b+0x24>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	4b25      	ldr	r3, [pc, #148]	; (800a43c <__d2b+0xb0>)
 800a3a6:	4826      	ldr	r0, [pc, #152]	; (800a440 <__d2b+0xb4>)
 800a3a8:	f240 310a 	movw	r1, #778	; 0x30a
 800a3ac:	f000 ff6c 	bl	800b288 <__assert_func>
 800a3b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a3b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a3b8:	bb35      	cbnz	r5, 800a408 <__d2b+0x7c>
 800a3ba:	2e00      	cmp	r6, #0
 800a3bc:	9301      	str	r3, [sp, #4]
 800a3be:	d028      	beq.n	800a412 <__d2b+0x86>
 800a3c0:	4668      	mov	r0, sp
 800a3c2:	9600      	str	r6, [sp, #0]
 800a3c4:	f7ff fd06 	bl	8009dd4 <__lo0bits>
 800a3c8:	9900      	ldr	r1, [sp, #0]
 800a3ca:	b300      	cbz	r0, 800a40e <__d2b+0x82>
 800a3cc:	9a01      	ldr	r2, [sp, #4]
 800a3ce:	f1c0 0320 	rsb	r3, r0, #32
 800a3d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3d6:	430b      	orrs	r3, r1
 800a3d8:	40c2      	lsrs	r2, r0
 800a3da:	6163      	str	r3, [r4, #20]
 800a3dc:	9201      	str	r2, [sp, #4]
 800a3de:	9b01      	ldr	r3, [sp, #4]
 800a3e0:	61a3      	str	r3, [r4, #24]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	bf14      	ite	ne
 800a3e6:	2202      	movne	r2, #2
 800a3e8:	2201      	moveq	r2, #1
 800a3ea:	6122      	str	r2, [r4, #16]
 800a3ec:	b1d5      	cbz	r5, 800a424 <__d2b+0x98>
 800a3ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a3f2:	4405      	add	r5, r0
 800a3f4:	f8c9 5000 	str.w	r5, [r9]
 800a3f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a3fc:	f8c8 0000 	str.w	r0, [r8]
 800a400:	4620      	mov	r0, r4
 800a402:	b003      	add	sp, #12
 800a404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a408:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a40c:	e7d5      	b.n	800a3ba <__d2b+0x2e>
 800a40e:	6161      	str	r1, [r4, #20]
 800a410:	e7e5      	b.n	800a3de <__d2b+0x52>
 800a412:	a801      	add	r0, sp, #4
 800a414:	f7ff fcde 	bl	8009dd4 <__lo0bits>
 800a418:	9b01      	ldr	r3, [sp, #4]
 800a41a:	6163      	str	r3, [r4, #20]
 800a41c:	2201      	movs	r2, #1
 800a41e:	6122      	str	r2, [r4, #16]
 800a420:	3020      	adds	r0, #32
 800a422:	e7e3      	b.n	800a3ec <__d2b+0x60>
 800a424:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a428:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a42c:	f8c9 0000 	str.w	r0, [r9]
 800a430:	6918      	ldr	r0, [r3, #16]
 800a432:	f7ff fcaf 	bl	8009d94 <__hi0bits>
 800a436:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a43a:	e7df      	b.n	800a3fc <__d2b+0x70>
 800a43c:	0800ea90 	.word	0x0800ea90
 800a440:	0800eb1c 	.word	0x0800eb1c

0800a444 <__ratio>:
 800a444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a448:	4688      	mov	r8, r1
 800a44a:	4669      	mov	r1, sp
 800a44c:	4681      	mov	r9, r0
 800a44e:	f7ff ff4d 	bl	800a2ec <__b2d>
 800a452:	a901      	add	r1, sp, #4
 800a454:	4640      	mov	r0, r8
 800a456:	ec55 4b10 	vmov	r4, r5, d0
 800a45a:	f7ff ff47 	bl	800a2ec <__b2d>
 800a45e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a462:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a466:	eba3 0c02 	sub.w	ip, r3, r2
 800a46a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a46e:	1a9b      	subs	r3, r3, r2
 800a470:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a474:	ec51 0b10 	vmov	r0, r1, d0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	bfd6      	itet	le
 800a47c:	460a      	movle	r2, r1
 800a47e:	462a      	movgt	r2, r5
 800a480:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a484:	468b      	mov	fp, r1
 800a486:	462f      	mov	r7, r5
 800a488:	bfd4      	ite	le
 800a48a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a48e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a492:	4620      	mov	r0, r4
 800a494:	ee10 2a10 	vmov	r2, s0
 800a498:	465b      	mov	r3, fp
 800a49a:	4639      	mov	r1, r7
 800a49c:	f7f6 f9ee 	bl	800087c <__aeabi_ddiv>
 800a4a0:	ec41 0b10 	vmov	d0, r0, r1
 800a4a4:	b003      	add	sp, #12
 800a4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a4aa <__copybits>:
 800a4aa:	3901      	subs	r1, #1
 800a4ac:	b570      	push	{r4, r5, r6, lr}
 800a4ae:	1149      	asrs	r1, r1, #5
 800a4b0:	6914      	ldr	r4, [r2, #16]
 800a4b2:	3101      	adds	r1, #1
 800a4b4:	f102 0314 	add.w	r3, r2, #20
 800a4b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a4bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a4c0:	1f05      	subs	r5, r0, #4
 800a4c2:	42a3      	cmp	r3, r4
 800a4c4:	d30c      	bcc.n	800a4e0 <__copybits+0x36>
 800a4c6:	1aa3      	subs	r3, r4, r2
 800a4c8:	3b11      	subs	r3, #17
 800a4ca:	f023 0303 	bic.w	r3, r3, #3
 800a4ce:	3211      	adds	r2, #17
 800a4d0:	42a2      	cmp	r2, r4
 800a4d2:	bf88      	it	hi
 800a4d4:	2300      	movhi	r3, #0
 800a4d6:	4418      	add	r0, r3
 800a4d8:	2300      	movs	r3, #0
 800a4da:	4288      	cmp	r0, r1
 800a4dc:	d305      	bcc.n	800a4ea <__copybits+0x40>
 800a4de:	bd70      	pop	{r4, r5, r6, pc}
 800a4e0:	f853 6b04 	ldr.w	r6, [r3], #4
 800a4e4:	f845 6f04 	str.w	r6, [r5, #4]!
 800a4e8:	e7eb      	b.n	800a4c2 <__copybits+0x18>
 800a4ea:	f840 3b04 	str.w	r3, [r0], #4
 800a4ee:	e7f4      	b.n	800a4da <__copybits+0x30>

0800a4f0 <__any_on>:
 800a4f0:	f100 0214 	add.w	r2, r0, #20
 800a4f4:	6900      	ldr	r0, [r0, #16]
 800a4f6:	114b      	asrs	r3, r1, #5
 800a4f8:	4298      	cmp	r0, r3
 800a4fa:	b510      	push	{r4, lr}
 800a4fc:	db11      	blt.n	800a522 <__any_on+0x32>
 800a4fe:	dd0a      	ble.n	800a516 <__any_on+0x26>
 800a500:	f011 011f 	ands.w	r1, r1, #31
 800a504:	d007      	beq.n	800a516 <__any_on+0x26>
 800a506:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a50a:	fa24 f001 	lsr.w	r0, r4, r1
 800a50e:	fa00 f101 	lsl.w	r1, r0, r1
 800a512:	428c      	cmp	r4, r1
 800a514:	d10b      	bne.n	800a52e <__any_on+0x3e>
 800a516:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d803      	bhi.n	800a526 <__any_on+0x36>
 800a51e:	2000      	movs	r0, #0
 800a520:	bd10      	pop	{r4, pc}
 800a522:	4603      	mov	r3, r0
 800a524:	e7f7      	b.n	800a516 <__any_on+0x26>
 800a526:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a52a:	2900      	cmp	r1, #0
 800a52c:	d0f5      	beq.n	800a51a <__any_on+0x2a>
 800a52e:	2001      	movs	r0, #1
 800a530:	e7f6      	b.n	800a520 <__any_on+0x30>

0800a532 <_calloc_r>:
 800a532:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a534:	fba1 2402 	umull	r2, r4, r1, r2
 800a538:	b94c      	cbnz	r4, 800a54e <_calloc_r+0x1c>
 800a53a:	4611      	mov	r1, r2
 800a53c:	9201      	str	r2, [sp, #4]
 800a53e:	f000 f87b 	bl	800a638 <_malloc_r>
 800a542:	9a01      	ldr	r2, [sp, #4]
 800a544:	4605      	mov	r5, r0
 800a546:	b930      	cbnz	r0, 800a556 <_calloc_r+0x24>
 800a548:	4628      	mov	r0, r5
 800a54a:	b003      	add	sp, #12
 800a54c:	bd30      	pop	{r4, r5, pc}
 800a54e:	220c      	movs	r2, #12
 800a550:	6002      	str	r2, [r0, #0]
 800a552:	2500      	movs	r5, #0
 800a554:	e7f8      	b.n	800a548 <_calloc_r+0x16>
 800a556:	4621      	mov	r1, r4
 800a558:	f7fc fb18 	bl	8006b8c <memset>
 800a55c:	e7f4      	b.n	800a548 <_calloc_r+0x16>
	...

0800a560 <_free_r>:
 800a560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a562:	2900      	cmp	r1, #0
 800a564:	d044      	beq.n	800a5f0 <_free_r+0x90>
 800a566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a56a:	9001      	str	r0, [sp, #4]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f1a1 0404 	sub.w	r4, r1, #4
 800a572:	bfb8      	it	lt
 800a574:	18e4      	addlt	r4, r4, r3
 800a576:	f001 f88b 	bl	800b690 <__malloc_lock>
 800a57a:	4a1e      	ldr	r2, [pc, #120]	; (800a5f4 <_free_r+0x94>)
 800a57c:	9801      	ldr	r0, [sp, #4]
 800a57e:	6813      	ldr	r3, [r2, #0]
 800a580:	b933      	cbnz	r3, 800a590 <_free_r+0x30>
 800a582:	6063      	str	r3, [r4, #4]
 800a584:	6014      	str	r4, [r2, #0]
 800a586:	b003      	add	sp, #12
 800a588:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a58c:	f001 b886 	b.w	800b69c <__malloc_unlock>
 800a590:	42a3      	cmp	r3, r4
 800a592:	d908      	bls.n	800a5a6 <_free_r+0x46>
 800a594:	6825      	ldr	r5, [r4, #0]
 800a596:	1961      	adds	r1, r4, r5
 800a598:	428b      	cmp	r3, r1
 800a59a:	bf01      	itttt	eq
 800a59c:	6819      	ldreq	r1, [r3, #0]
 800a59e:	685b      	ldreq	r3, [r3, #4]
 800a5a0:	1949      	addeq	r1, r1, r5
 800a5a2:	6021      	streq	r1, [r4, #0]
 800a5a4:	e7ed      	b.n	800a582 <_free_r+0x22>
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	b10b      	cbz	r3, 800a5b0 <_free_r+0x50>
 800a5ac:	42a3      	cmp	r3, r4
 800a5ae:	d9fa      	bls.n	800a5a6 <_free_r+0x46>
 800a5b0:	6811      	ldr	r1, [r2, #0]
 800a5b2:	1855      	adds	r5, r2, r1
 800a5b4:	42a5      	cmp	r5, r4
 800a5b6:	d10b      	bne.n	800a5d0 <_free_r+0x70>
 800a5b8:	6824      	ldr	r4, [r4, #0]
 800a5ba:	4421      	add	r1, r4
 800a5bc:	1854      	adds	r4, r2, r1
 800a5be:	42a3      	cmp	r3, r4
 800a5c0:	6011      	str	r1, [r2, #0]
 800a5c2:	d1e0      	bne.n	800a586 <_free_r+0x26>
 800a5c4:	681c      	ldr	r4, [r3, #0]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	6053      	str	r3, [r2, #4]
 800a5ca:	4421      	add	r1, r4
 800a5cc:	6011      	str	r1, [r2, #0]
 800a5ce:	e7da      	b.n	800a586 <_free_r+0x26>
 800a5d0:	d902      	bls.n	800a5d8 <_free_r+0x78>
 800a5d2:	230c      	movs	r3, #12
 800a5d4:	6003      	str	r3, [r0, #0]
 800a5d6:	e7d6      	b.n	800a586 <_free_r+0x26>
 800a5d8:	6825      	ldr	r5, [r4, #0]
 800a5da:	1961      	adds	r1, r4, r5
 800a5dc:	428b      	cmp	r3, r1
 800a5de:	bf04      	itt	eq
 800a5e0:	6819      	ldreq	r1, [r3, #0]
 800a5e2:	685b      	ldreq	r3, [r3, #4]
 800a5e4:	6063      	str	r3, [r4, #4]
 800a5e6:	bf04      	itt	eq
 800a5e8:	1949      	addeq	r1, r1, r5
 800a5ea:	6021      	streq	r1, [r4, #0]
 800a5ec:	6054      	str	r4, [r2, #4]
 800a5ee:	e7ca      	b.n	800a586 <_free_r+0x26>
 800a5f0:	b003      	add	sp, #12
 800a5f2:	bd30      	pop	{r4, r5, pc}
 800a5f4:	20001180 	.word	0x20001180

0800a5f8 <sbrk_aligned>:
 800a5f8:	b570      	push	{r4, r5, r6, lr}
 800a5fa:	4e0e      	ldr	r6, [pc, #56]	; (800a634 <sbrk_aligned+0x3c>)
 800a5fc:	460c      	mov	r4, r1
 800a5fe:	6831      	ldr	r1, [r6, #0]
 800a600:	4605      	mov	r5, r0
 800a602:	b911      	cbnz	r1, 800a60a <sbrk_aligned+0x12>
 800a604:	f000 fd28 	bl	800b058 <_sbrk_r>
 800a608:	6030      	str	r0, [r6, #0]
 800a60a:	4621      	mov	r1, r4
 800a60c:	4628      	mov	r0, r5
 800a60e:	f000 fd23 	bl	800b058 <_sbrk_r>
 800a612:	1c43      	adds	r3, r0, #1
 800a614:	d00a      	beq.n	800a62c <sbrk_aligned+0x34>
 800a616:	1cc4      	adds	r4, r0, #3
 800a618:	f024 0403 	bic.w	r4, r4, #3
 800a61c:	42a0      	cmp	r0, r4
 800a61e:	d007      	beq.n	800a630 <sbrk_aligned+0x38>
 800a620:	1a21      	subs	r1, r4, r0
 800a622:	4628      	mov	r0, r5
 800a624:	f000 fd18 	bl	800b058 <_sbrk_r>
 800a628:	3001      	adds	r0, #1
 800a62a:	d101      	bne.n	800a630 <sbrk_aligned+0x38>
 800a62c:	f04f 34ff 	mov.w	r4, #4294967295
 800a630:	4620      	mov	r0, r4
 800a632:	bd70      	pop	{r4, r5, r6, pc}
 800a634:	20001184 	.word	0x20001184

0800a638 <_malloc_r>:
 800a638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a63c:	1ccd      	adds	r5, r1, #3
 800a63e:	f025 0503 	bic.w	r5, r5, #3
 800a642:	3508      	adds	r5, #8
 800a644:	2d0c      	cmp	r5, #12
 800a646:	bf38      	it	cc
 800a648:	250c      	movcc	r5, #12
 800a64a:	2d00      	cmp	r5, #0
 800a64c:	4607      	mov	r7, r0
 800a64e:	db01      	blt.n	800a654 <_malloc_r+0x1c>
 800a650:	42a9      	cmp	r1, r5
 800a652:	d905      	bls.n	800a660 <_malloc_r+0x28>
 800a654:	230c      	movs	r3, #12
 800a656:	603b      	str	r3, [r7, #0]
 800a658:	2600      	movs	r6, #0
 800a65a:	4630      	mov	r0, r6
 800a65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a660:	4e2e      	ldr	r6, [pc, #184]	; (800a71c <_malloc_r+0xe4>)
 800a662:	f001 f815 	bl	800b690 <__malloc_lock>
 800a666:	6833      	ldr	r3, [r6, #0]
 800a668:	461c      	mov	r4, r3
 800a66a:	bb34      	cbnz	r4, 800a6ba <_malloc_r+0x82>
 800a66c:	4629      	mov	r1, r5
 800a66e:	4638      	mov	r0, r7
 800a670:	f7ff ffc2 	bl	800a5f8 <sbrk_aligned>
 800a674:	1c43      	adds	r3, r0, #1
 800a676:	4604      	mov	r4, r0
 800a678:	d14d      	bne.n	800a716 <_malloc_r+0xde>
 800a67a:	6834      	ldr	r4, [r6, #0]
 800a67c:	4626      	mov	r6, r4
 800a67e:	2e00      	cmp	r6, #0
 800a680:	d140      	bne.n	800a704 <_malloc_r+0xcc>
 800a682:	6823      	ldr	r3, [r4, #0]
 800a684:	4631      	mov	r1, r6
 800a686:	4638      	mov	r0, r7
 800a688:	eb04 0803 	add.w	r8, r4, r3
 800a68c:	f000 fce4 	bl	800b058 <_sbrk_r>
 800a690:	4580      	cmp	r8, r0
 800a692:	d13a      	bne.n	800a70a <_malloc_r+0xd2>
 800a694:	6821      	ldr	r1, [r4, #0]
 800a696:	3503      	adds	r5, #3
 800a698:	1a6d      	subs	r5, r5, r1
 800a69a:	f025 0503 	bic.w	r5, r5, #3
 800a69e:	3508      	adds	r5, #8
 800a6a0:	2d0c      	cmp	r5, #12
 800a6a2:	bf38      	it	cc
 800a6a4:	250c      	movcc	r5, #12
 800a6a6:	4629      	mov	r1, r5
 800a6a8:	4638      	mov	r0, r7
 800a6aa:	f7ff ffa5 	bl	800a5f8 <sbrk_aligned>
 800a6ae:	3001      	adds	r0, #1
 800a6b0:	d02b      	beq.n	800a70a <_malloc_r+0xd2>
 800a6b2:	6823      	ldr	r3, [r4, #0]
 800a6b4:	442b      	add	r3, r5
 800a6b6:	6023      	str	r3, [r4, #0]
 800a6b8:	e00e      	b.n	800a6d8 <_malloc_r+0xa0>
 800a6ba:	6822      	ldr	r2, [r4, #0]
 800a6bc:	1b52      	subs	r2, r2, r5
 800a6be:	d41e      	bmi.n	800a6fe <_malloc_r+0xc6>
 800a6c0:	2a0b      	cmp	r2, #11
 800a6c2:	d916      	bls.n	800a6f2 <_malloc_r+0xba>
 800a6c4:	1961      	adds	r1, r4, r5
 800a6c6:	42a3      	cmp	r3, r4
 800a6c8:	6025      	str	r5, [r4, #0]
 800a6ca:	bf18      	it	ne
 800a6cc:	6059      	strne	r1, [r3, #4]
 800a6ce:	6863      	ldr	r3, [r4, #4]
 800a6d0:	bf08      	it	eq
 800a6d2:	6031      	streq	r1, [r6, #0]
 800a6d4:	5162      	str	r2, [r4, r5]
 800a6d6:	604b      	str	r3, [r1, #4]
 800a6d8:	4638      	mov	r0, r7
 800a6da:	f104 060b 	add.w	r6, r4, #11
 800a6de:	f000 ffdd 	bl	800b69c <__malloc_unlock>
 800a6e2:	f026 0607 	bic.w	r6, r6, #7
 800a6e6:	1d23      	adds	r3, r4, #4
 800a6e8:	1af2      	subs	r2, r6, r3
 800a6ea:	d0b6      	beq.n	800a65a <_malloc_r+0x22>
 800a6ec:	1b9b      	subs	r3, r3, r6
 800a6ee:	50a3      	str	r3, [r4, r2]
 800a6f0:	e7b3      	b.n	800a65a <_malloc_r+0x22>
 800a6f2:	6862      	ldr	r2, [r4, #4]
 800a6f4:	42a3      	cmp	r3, r4
 800a6f6:	bf0c      	ite	eq
 800a6f8:	6032      	streq	r2, [r6, #0]
 800a6fa:	605a      	strne	r2, [r3, #4]
 800a6fc:	e7ec      	b.n	800a6d8 <_malloc_r+0xa0>
 800a6fe:	4623      	mov	r3, r4
 800a700:	6864      	ldr	r4, [r4, #4]
 800a702:	e7b2      	b.n	800a66a <_malloc_r+0x32>
 800a704:	4634      	mov	r4, r6
 800a706:	6876      	ldr	r6, [r6, #4]
 800a708:	e7b9      	b.n	800a67e <_malloc_r+0x46>
 800a70a:	230c      	movs	r3, #12
 800a70c:	603b      	str	r3, [r7, #0]
 800a70e:	4638      	mov	r0, r7
 800a710:	f000 ffc4 	bl	800b69c <__malloc_unlock>
 800a714:	e7a1      	b.n	800a65a <_malloc_r+0x22>
 800a716:	6025      	str	r5, [r4, #0]
 800a718:	e7de      	b.n	800a6d8 <_malloc_r+0xa0>
 800a71a:	bf00      	nop
 800a71c:	20001180 	.word	0x20001180

0800a720 <__ssputs_r>:
 800a720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a724:	688e      	ldr	r6, [r1, #8]
 800a726:	429e      	cmp	r6, r3
 800a728:	4682      	mov	sl, r0
 800a72a:	460c      	mov	r4, r1
 800a72c:	4690      	mov	r8, r2
 800a72e:	461f      	mov	r7, r3
 800a730:	d838      	bhi.n	800a7a4 <__ssputs_r+0x84>
 800a732:	898a      	ldrh	r2, [r1, #12]
 800a734:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a738:	d032      	beq.n	800a7a0 <__ssputs_r+0x80>
 800a73a:	6825      	ldr	r5, [r4, #0]
 800a73c:	6909      	ldr	r1, [r1, #16]
 800a73e:	eba5 0901 	sub.w	r9, r5, r1
 800a742:	6965      	ldr	r5, [r4, #20]
 800a744:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a748:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a74c:	3301      	adds	r3, #1
 800a74e:	444b      	add	r3, r9
 800a750:	106d      	asrs	r5, r5, #1
 800a752:	429d      	cmp	r5, r3
 800a754:	bf38      	it	cc
 800a756:	461d      	movcc	r5, r3
 800a758:	0553      	lsls	r3, r2, #21
 800a75a:	d531      	bpl.n	800a7c0 <__ssputs_r+0xa0>
 800a75c:	4629      	mov	r1, r5
 800a75e:	f7ff ff6b 	bl	800a638 <_malloc_r>
 800a762:	4606      	mov	r6, r0
 800a764:	b950      	cbnz	r0, 800a77c <__ssputs_r+0x5c>
 800a766:	230c      	movs	r3, #12
 800a768:	f8ca 3000 	str.w	r3, [sl]
 800a76c:	89a3      	ldrh	r3, [r4, #12]
 800a76e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a772:	81a3      	strh	r3, [r4, #12]
 800a774:	f04f 30ff 	mov.w	r0, #4294967295
 800a778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a77c:	6921      	ldr	r1, [r4, #16]
 800a77e:	464a      	mov	r2, r9
 800a780:	f7ff fa08 	bl	8009b94 <memcpy>
 800a784:	89a3      	ldrh	r3, [r4, #12]
 800a786:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a78a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a78e:	81a3      	strh	r3, [r4, #12]
 800a790:	6126      	str	r6, [r4, #16]
 800a792:	6165      	str	r5, [r4, #20]
 800a794:	444e      	add	r6, r9
 800a796:	eba5 0509 	sub.w	r5, r5, r9
 800a79a:	6026      	str	r6, [r4, #0]
 800a79c:	60a5      	str	r5, [r4, #8]
 800a79e:	463e      	mov	r6, r7
 800a7a0:	42be      	cmp	r6, r7
 800a7a2:	d900      	bls.n	800a7a6 <__ssputs_r+0x86>
 800a7a4:	463e      	mov	r6, r7
 800a7a6:	6820      	ldr	r0, [r4, #0]
 800a7a8:	4632      	mov	r2, r6
 800a7aa:	4641      	mov	r1, r8
 800a7ac:	f000 ff56 	bl	800b65c <memmove>
 800a7b0:	68a3      	ldr	r3, [r4, #8]
 800a7b2:	1b9b      	subs	r3, r3, r6
 800a7b4:	60a3      	str	r3, [r4, #8]
 800a7b6:	6823      	ldr	r3, [r4, #0]
 800a7b8:	4433      	add	r3, r6
 800a7ba:	6023      	str	r3, [r4, #0]
 800a7bc:	2000      	movs	r0, #0
 800a7be:	e7db      	b.n	800a778 <__ssputs_r+0x58>
 800a7c0:	462a      	mov	r2, r5
 800a7c2:	f000 ff71 	bl	800b6a8 <_realloc_r>
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	d1e1      	bne.n	800a790 <__ssputs_r+0x70>
 800a7cc:	6921      	ldr	r1, [r4, #16]
 800a7ce:	4650      	mov	r0, sl
 800a7d0:	f7ff fec6 	bl	800a560 <_free_r>
 800a7d4:	e7c7      	b.n	800a766 <__ssputs_r+0x46>
	...

0800a7d8 <_svfiprintf_r>:
 800a7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7dc:	4698      	mov	r8, r3
 800a7de:	898b      	ldrh	r3, [r1, #12]
 800a7e0:	061b      	lsls	r3, r3, #24
 800a7e2:	b09d      	sub	sp, #116	; 0x74
 800a7e4:	4607      	mov	r7, r0
 800a7e6:	460d      	mov	r5, r1
 800a7e8:	4614      	mov	r4, r2
 800a7ea:	d50e      	bpl.n	800a80a <_svfiprintf_r+0x32>
 800a7ec:	690b      	ldr	r3, [r1, #16]
 800a7ee:	b963      	cbnz	r3, 800a80a <_svfiprintf_r+0x32>
 800a7f0:	2140      	movs	r1, #64	; 0x40
 800a7f2:	f7ff ff21 	bl	800a638 <_malloc_r>
 800a7f6:	6028      	str	r0, [r5, #0]
 800a7f8:	6128      	str	r0, [r5, #16]
 800a7fa:	b920      	cbnz	r0, 800a806 <_svfiprintf_r+0x2e>
 800a7fc:	230c      	movs	r3, #12
 800a7fe:	603b      	str	r3, [r7, #0]
 800a800:	f04f 30ff 	mov.w	r0, #4294967295
 800a804:	e0d1      	b.n	800a9aa <_svfiprintf_r+0x1d2>
 800a806:	2340      	movs	r3, #64	; 0x40
 800a808:	616b      	str	r3, [r5, #20]
 800a80a:	2300      	movs	r3, #0
 800a80c:	9309      	str	r3, [sp, #36]	; 0x24
 800a80e:	2320      	movs	r3, #32
 800a810:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a814:	f8cd 800c 	str.w	r8, [sp, #12]
 800a818:	2330      	movs	r3, #48	; 0x30
 800a81a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a9c4 <_svfiprintf_r+0x1ec>
 800a81e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a822:	f04f 0901 	mov.w	r9, #1
 800a826:	4623      	mov	r3, r4
 800a828:	469a      	mov	sl, r3
 800a82a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a82e:	b10a      	cbz	r2, 800a834 <_svfiprintf_r+0x5c>
 800a830:	2a25      	cmp	r2, #37	; 0x25
 800a832:	d1f9      	bne.n	800a828 <_svfiprintf_r+0x50>
 800a834:	ebba 0b04 	subs.w	fp, sl, r4
 800a838:	d00b      	beq.n	800a852 <_svfiprintf_r+0x7a>
 800a83a:	465b      	mov	r3, fp
 800a83c:	4622      	mov	r2, r4
 800a83e:	4629      	mov	r1, r5
 800a840:	4638      	mov	r0, r7
 800a842:	f7ff ff6d 	bl	800a720 <__ssputs_r>
 800a846:	3001      	adds	r0, #1
 800a848:	f000 80aa 	beq.w	800a9a0 <_svfiprintf_r+0x1c8>
 800a84c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a84e:	445a      	add	r2, fp
 800a850:	9209      	str	r2, [sp, #36]	; 0x24
 800a852:	f89a 3000 	ldrb.w	r3, [sl]
 800a856:	2b00      	cmp	r3, #0
 800a858:	f000 80a2 	beq.w	800a9a0 <_svfiprintf_r+0x1c8>
 800a85c:	2300      	movs	r3, #0
 800a85e:	f04f 32ff 	mov.w	r2, #4294967295
 800a862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a866:	f10a 0a01 	add.w	sl, sl, #1
 800a86a:	9304      	str	r3, [sp, #16]
 800a86c:	9307      	str	r3, [sp, #28]
 800a86e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a872:	931a      	str	r3, [sp, #104]	; 0x68
 800a874:	4654      	mov	r4, sl
 800a876:	2205      	movs	r2, #5
 800a878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a87c:	4851      	ldr	r0, [pc, #324]	; (800a9c4 <_svfiprintf_r+0x1ec>)
 800a87e:	f7f5 fcc7 	bl	8000210 <memchr>
 800a882:	9a04      	ldr	r2, [sp, #16]
 800a884:	b9d8      	cbnz	r0, 800a8be <_svfiprintf_r+0xe6>
 800a886:	06d0      	lsls	r0, r2, #27
 800a888:	bf44      	itt	mi
 800a88a:	2320      	movmi	r3, #32
 800a88c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a890:	0711      	lsls	r1, r2, #28
 800a892:	bf44      	itt	mi
 800a894:	232b      	movmi	r3, #43	; 0x2b
 800a896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a89a:	f89a 3000 	ldrb.w	r3, [sl]
 800a89e:	2b2a      	cmp	r3, #42	; 0x2a
 800a8a0:	d015      	beq.n	800a8ce <_svfiprintf_r+0xf6>
 800a8a2:	9a07      	ldr	r2, [sp, #28]
 800a8a4:	4654      	mov	r4, sl
 800a8a6:	2000      	movs	r0, #0
 800a8a8:	f04f 0c0a 	mov.w	ip, #10
 800a8ac:	4621      	mov	r1, r4
 800a8ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8b2:	3b30      	subs	r3, #48	; 0x30
 800a8b4:	2b09      	cmp	r3, #9
 800a8b6:	d94e      	bls.n	800a956 <_svfiprintf_r+0x17e>
 800a8b8:	b1b0      	cbz	r0, 800a8e8 <_svfiprintf_r+0x110>
 800a8ba:	9207      	str	r2, [sp, #28]
 800a8bc:	e014      	b.n	800a8e8 <_svfiprintf_r+0x110>
 800a8be:	eba0 0308 	sub.w	r3, r0, r8
 800a8c2:	fa09 f303 	lsl.w	r3, r9, r3
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	9304      	str	r3, [sp, #16]
 800a8ca:	46a2      	mov	sl, r4
 800a8cc:	e7d2      	b.n	800a874 <_svfiprintf_r+0x9c>
 800a8ce:	9b03      	ldr	r3, [sp, #12]
 800a8d0:	1d19      	adds	r1, r3, #4
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	9103      	str	r1, [sp, #12]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	bfbb      	ittet	lt
 800a8da:	425b      	neglt	r3, r3
 800a8dc:	f042 0202 	orrlt.w	r2, r2, #2
 800a8e0:	9307      	strge	r3, [sp, #28]
 800a8e2:	9307      	strlt	r3, [sp, #28]
 800a8e4:	bfb8      	it	lt
 800a8e6:	9204      	strlt	r2, [sp, #16]
 800a8e8:	7823      	ldrb	r3, [r4, #0]
 800a8ea:	2b2e      	cmp	r3, #46	; 0x2e
 800a8ec:	d10c      	bne.n	800a908 <_svfiprintf_r+0x130>
 800a8ee:	7863      	ldrb	r3, [r4, #1]
 800a8f0:	2b2a      	cmp	r3, #42	; 0x2a
 800a8f2:	d135      	bne.n	800a960 <_svfiprintf_r+0x188>
 800a8f4:	9b03      	ldr	r3, [sp, #12]
 800a8f6:	1d1a      	adds	r2, r3, #4
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	9203      	str	r2, [sp, #12]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	bfb8      	it	lt
 800a900:	f04f 33ff 	movlt.w	r3, #4294967295
 800a904:	3402      	adds	r4, #2
 800a906:	9305      	str	r3, [sp, #20]
 800a908:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a9d4 <_svfiprintf_r+0x1fc>
 800a90c:	7821      	ldrb	r1, [r4, #0]
 800a90e:	2203      	movs	r2, #3
 800a910:	4650      	mov	r0, sl
 800a912:	f7f5 fc7d 	bl	8000210 <memchr>
 800a916:	b140      	cbz	r0, 800a92a <_svfiprintf_r+0x152>
 800a918:	2340      	movs	r3, #64	; 0x40
 800a91a:	eba0 000a 	sub.w	r0, r0, sl
 800a91e:	fa03 f000 	lsl.w	r0, r3, r0
 800a922:	9b04      	ldr	r3, [sp, #16]
 800a924:	4303      	orrs	r3, r0
 800a926:	3401      	adds	r4, #1
 800a928:	9304      	str	r3, [sp, #16]
 800a92a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a92e:	4826      	ldr	r0, [pc, #152]	; (800a9c8 <_svfiprintf_r+0x1f0>)
 800a930:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a934:	2206      	movs	r2, #6
 800a936:	f7f5 fc6b 	bl	8000210 <memchr>
 800a93a:	2800      	cmp	r0, #0
 800a93c:	d038      	beq.n	800a9b0 <_svfiprintf_r+0x1d8>
 800a93e:	4b23      	ldr	r3, [pc, #140]	; (800a9cc <_svfiprintf_r+0x1f4>)
 800a940:	bb1b      	cbnz	r3, 800a98a <_svfiprintf_r+0x1b2>
 800a942:	9b03      	ldr	r3, [sp, #12]
 800a944:	3307      	adds	r3, #7
 800a946:	f023 0307 	bic.w	r3, r3, #7
 800a94a:	3308      	adds	r3, #8
 800a94c:	9303      	str	r3, [sp, #12]
 800a94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a950:	4433      	add	r3, r6
 800a952:	9309      	str	r3, [sp, #36]	; 0x24
 800a954:	e767      	b.n	800a826 <_svfiprintf_r+0x4e>
 800a956:	fb0c 3202 	mla	r2, ip, r2, r3
 800a95a:	460c      	mov	r4, r1
 800a95c:	2001      	movs	r0, #1
 800a95e:	e7a5      	b.n	800a8ac <_svfiprintf_r+0xd4>
 800a960:	2300      	movs	r3, #0
 800a962:	3401      	adds	r4, #1
 800a964:	9305      	str	r3, [sp, #20]
 800a966:	4619      	mov	r1, r3
 800a968:	f04f 0c0a 	mov.w	ip, #10
 800a96c:	4620      	mov	r0, r4
 800a96e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a972:	3a30      	subs	r2, #48	; 0x30
 800a974:	2a09      	cmp	r2, #9
 800a976:	d903      	bls.n	800a980 <_svfiprintf_r+0x1a8>
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d0c5      	beq.n	800a908 <_svfiprintf_r+0x130>
 800a97c:	9105      	str	r1, [sp, #20]
 800a97e:	e7c3      	b.n	800a908 <_svfiprintf_r+0x130>
 800a980:	fb0c 2101 	mla	r1, ip, r1, r2
 800a984:	4604      	mov	r4, r0
 800a986:	2301      	movs	r3, #1
 800a988:	e7f0      	b.n	800a96c <_svfiprintf_r+0x194>
 800a98a:	ab03      	add	r3, sp, #12
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	462a      	mov	r2, r5
 800a990:	4b0f      	ldr	r3, [pc, #60]	; (800a9d0 <_svfiprintf_r+0x1f8>)
 800a992:	a904      	add	r1, sp, #16
 800a994:	4638      	mov	r0, r7
 800a996:	f7fc f9a1 	bl	8006cdc <_printf_float>
 800a99a:	1c42      	adds	r2, r0, #1
 800a99c:	4606      	mov	r6, r0
 800a99e:	d1d6      	bne.n	800a94e <_svfiprintf_r+0x176>
 800a9a0:	89ab      	ldrh	r3, [r5, #12]
 800a9a2:	065b      	lsls	r3, r3, #25
 800a9a4:	f53f af2c 	bmi.w	800a800 <_svfiprintf_r+0x28>
 800a9a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9aa:	b01d      	add	sp, #116	; 0x74
 800a9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9b0:	ab03      	add	r3, sp, #12
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	462a      	mov	r2, r5
 800a9b6:	4b06      	ldr	r3, [pc, #24]	; (800a9d0 <_svfiprintf_r+0x1f8>)
 800a9b8:	a904      	add	r1, sp, #16
 800a9ba:	4638      	mov	r0, r7
 800a9bc:	f7fc fc32 	bl	8007224 <_printf_i>
 800a9c0:	e7eb      	b.n	800a99a <_svfiprintf_r+0x1c2>
 800a9c2:	bf00      	nop
 800a9c4:	0800ec74 	.word	0x0800ec74
 800a9c8:	0800ec7e 	.word	0x0800ec7e
 800a9cc:	08006cdd 	.word	0x08006cdd
 800a9d0:	0800a721 	.word	0x0800a721
 800a9d4:	0800ec7a 	.word	0x0800ec7a

0800a9d8 <_sungetc_r>:
 800a9d8:	b538      	push	{r3, r4, r5, lr}
 800a9da:	1c4b      	adds	r3, r1, #1
 800a9dc:	4614      	mov	r4, r2
 800a9de:	d103      	bne.n	800a9e8 <_sungetc_r+0x10>
 800a9e0:	f04f 35ff 	mov.w	r5, #4294967295
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	bd38      	pop	{r3, r4, r5, pc}
 800a9e8:	8993      	ldrh	r3, [r2, #12]
 800a9ea:	f023 0320 	bic.w	r3, r3, #32
 800a9ee:	8193      	strh	r3, [r2, #12]
 800a9f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9f2:	6852      	ldr	r2, [r2, #4]
 800a9f4:	b2cd      	uxtb	r5, r1
 800a9f6:	b18b      	cbz	r3, 800aa1c <_sungetc_r+0x44>
 800a9f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	dd08      	ble.n	800aa10 <_sungetc_r+0x38>
 800a9fe:	6823      	ldr	r3, [r4, #0]
 800aa00:	1e5a      	subs	r2, r3, #1
 800aa02:	6022      	str	r2, [r4, #0]
 800aa04:	f803 5c01 	strb.w	r5, [r3, #-1]
 800aa08:	6863      	ldr	r3, [r4, #4]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	6063      	str	r3, [r4, #4]
 800aa0e:	e7e9      	b.n	800a9e4 <_sungetc_r+0xc>
 800aa10:	4621      	mov	r1, r4
 800aa12:	f000 fbf1 	bl	800b1f8 <__submore>
 800aa16:	2800      	cmp	r0, #0
 800aa18:	d0f1      	beq.n	800a9fe <_sungetc_r+0x26>
 800aa1a:	e7e1      	b.n	800a9e0 <_sungetc_r+0x8>
 800aa1c:	6921      	ldr	r1, [r4, #16]
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	b151      	cbz	r1, 800aa38 <_sungetc_r+0x60>
 800aa22:	4299      	cmp	r1, r3
 800aa24:	d208      	bcs.n	800aa38 <_sungetc_r+0x60>
 800aa26:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800aa2a:	42a9      	cmp	r1, r5
 800aa2c:	d104      	bne.n	800aa38 <_sungetc_r+0x60>
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	3201      	adds	r2, #1
 800aa32:	6023      	str	r3, [r4, #0]
 800aa34:	6062      	str	r2, [r4, #4]
 800aa36:	e7d5      	b.n	800a9e4 <_sungetc_r+0xc>
 800aa38:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800aa3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa40:	6363      	str	r3, [r4, #52]	; 0x34
 800aa42:	2303      	movs	r3, #3
 800aa44:	63a3      	str	r3, [r4, #56]	; 0x38
 800aa46:	4623      	mov	r3, r4
 800aa48:	f803 5f46 	strb.w	r5, [r3, #70]!
 800aa4c:	6023      	str	r3, [r4, #0]
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e7dc      	b.n	800aa0c <_sungetc_r+0x34>

0800aa52 <__ssrefill_r>:
 800aa52:	b510      	push	{r4, lr}
 800aa54:	460c      	mov	r4, r1
 800aa56:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800aa58:	b169      	cbz	r1, 800aa76 <__ssrefill_r+0x24>
 800aa5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa5e:	4299      	cmp	r1, r3
 800aa60:	d001      	beq.n	800aa66 <__ssrefill_r+0x14>
 800aa62:	f7ff fd7d 	bl	800a560 <_free_r>
 800aa66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa68:	6063      	str	r3, [r4, #4]
 800aa6a:	2000      	movs	r0, #0
 800aa6c:	6360      	str	r0, [r4, #52]	; 0x34
 800aa6e:	b113      	cbz	r3, 800aa76 <__ssrefill_r+0x24>
 800aa70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aa72:	6023      	str	r3, [r4, #0]
 800aa74:	bd10      	pop	{r4, pc}
 800aa76:	6923      	ldr	r3, [r4, #16]
 800aa78:	6023      	str	r3, [r4, #0]
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	6063      	str	r3, [r4, #4]
 800aa7e:	89a3      	ldrh	r3, [r4, #12]
 800aa80:	f043 0320 	orr.w	r3, r3, #32
 800aa84:	81a3      	strh	r3, [r4, #12]
 800aa86:	f04f 30ff 	mov.w	r0, #4294967295
 800aa8a:	e7f3      	b.n	800aa74 <__ssrefill_r+0x22>

0800aa8c <__ssvfiscanf_r>:
 800aa8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa90:	460c      	mov	r4, r1
 800aa92:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800aa96:	2100      	movs	r1, #0
 800aa98:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800aa9c:	49a6      	ldr	r1, [pc, #664]	; (800ad38 <__ssvfiscanf_r+0x2ac>)
 800aa9e:	91a0      	str	r1, [sp, #640]	; 0x280
 800aaa0:	f10d 0804 	add.w	r8, sp, #4
 800aaa4:	49a5      	ldr	r1, [pc, #660]	; (800ad3c <__ssvfiscanf_r+0x2b0>)
 800aaa6:	4fa6      	ldr	r7, [pc, #664]	; (800ad40 <__ssvfiscanf_r+0x2b4>)
 800aaa8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800ad44 <__ssvfiscanf_r+0x2b8>
 800aaac:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800aab0:	4606      	mov	r6, r0
 800aab2:	91a1      	str	r1, [sp, #644]	; 0x284
 800aab4:	9300      	str	r3, [sp, #0]
 800aab6:	7813      	ldrb	r3, [r2, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f000 815a 	beq.w	800ad72 <__ssvfiscanf_r+0x2e6>
 800aabe:	5dd9      	ldrb	r1, [r3, r7]
 800aac0:	f011 0108 	ands.w	r1, r1, #8
 800aac4:	f102 0501 	add.w	r5, r2, #1
 800aac8:	d019      	beq.n	800aafe <__ssvfiscanf_r+0x72>
 800aaca:	6863      	ldr	r3, [r4, #4]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	dd0f      	ble.n	800aaf0 <__ssvfiscanf_r+0x64>
 800aad0:	6823      	ldr	r3, [r4, #0]
 800aad2:	781a      	ldrb	r2, [r3, #0]
 800aad4:	5cba      	ldrb	r2, [r7, r2]
 800aad6:	0712      	lsls	r2, r2, #28
 800aad8:	d401      	bmi.n	800aade <__ssvfiscanf_r+0x52>
 800aada:	462a      	mov	r2, r5
 800aadc:	e7eb      	b.n	800aab6 <__ssvfiscanf_r+0x2a>
 800aade:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800aae0:	3201      	adds	r2, #1
 800aae2:	9245      	str	r2, [sp, #276]	; 0x114
 800aae4:	6862      	ldr	r2, [r4, #4]
 800aae6:	3301      	adds	r3, #1
 800aae8:	3a01      	subs	r2, #1
 800aaea:	6062      	str	r2, [r4, #4]
 800aaec:	6023      	str	r3, [r4, #0]
 800aaee:	e7ec      	b.n	800aaca <__ssvfiscanf_r+0x3e>
 800aaf0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aaf2:	4621      	mov	r1, r4
 800aaf4:	4630      	mov	r0, r6
 800aaf6:	4798      	blx	r3
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	d0e9      	beq.n	800aad0 <__ssvfiscanf_r+0x44>
 800aafc:	e7ed      	b.n	800aada <__ssvfiscanf_r+0x4e>
 800aafe:	2b25      	cmp	r3, #37	; 0x25
 800ab00:	d012      	beq.n	800ab28 <__ssvfiscanf_r+0x9c>
 800ab02:	469a      	mov	sl, r3
 800ab04:	6863      	ldr	r3, [r4, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f340 8091 	ble.w	800ac2e <__ssvfiscanf_r+0x1a2>
 800ab0c:	6822      	ldr	r2, [r4, #0]
 800ab0e:	7813      	ldrb	r3, [r2, #0]
 800ab10:	4553      	cmp	r3, sl
 800ab12:	f040 812e 	bne.w	800ad72 <__ssvfiscanf_r+0x2e6>
 800ab16:	6863      	ldr	r3, [r4, #4]
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	6063      	str	r3, [r4, #4]
 800ab1c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ab1e:	3201      	adds	r2, #1
 800ab20:	3301      	adds	r3, #1
 800ab22:	6022      	str	r2, [r4, #0]
 800ab24:	9345      	str	r3, [sp, #276]	; 0x114
 800ab26:	e7d8      	b.n	800aada <__ssvfiscanf_r+0x4e>
 800ab28:	9141      	str	r1, [sp, #260]	; 0x104
 800ab2a:	9143      	str	r1, [sp, #268]	; 0x10c
 800ab2c:	7853      	ldrb	r3, [r2, #1]
 800ab2e:	2b2a      	cmp	r3, #42	; 0x2a
 800ab30:	bf02      	ittt	eq
 800ab32:	2310      	moveq	r3, #16
 800ab34:	1c95      	addeq	r5, r2, #2
 800ab36:	9341      	streq	r3, [sp, #260]	; 0x104
 800ab38:	220a      	movs	r2, #10
 800ab3a:	46aa      	mov	sl, r5
 800ab3c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ab40:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ab44:	2b09      	cmp	r3, #9
 800ab46:	d91d      	bls.n	800ab84 <__ssvfiscanf_r+0xf8>
 800ab48:	487e      	ldr	r0, [pc, #504]	; (800ad44 <__ssvfiscanf_r+0x2b8>)
 800ab4a:	2203      	movs	r2, #3
 800ab4c:	f7f5 fb60 	bl	8000210 <memchr>
 800ab50:	b140      	cbz	r0, 800ab64 <__ssvfiscanf_r+0xd8>
 800ab52:	2301      	movs	r3, #1
 800ab54:	eba0 0009 	sub.w	r0, r0, r9
 800ab58:	fa03 f000 	lsl.w	r0, r3, r0
 800ab5c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ab5e:	4318      	orrs	r0, r3
 800ab60:	9041      	str	r0, [sp, #260]	; 0x104
 800ab62:	4655      	mov	r5, sl
 800ab64:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ab68:	2b78      	cmp	r3, #120	; 0x78
 800ab6a:	d806      	bhi.n	800ab7a <__ssvfiscanf_r+0xee>
 800ab6c:	2b57      	cmp	r3, #87	; 0x57
 800ab6e:	d810      	bhi.n	800ab92 <__ssvfiscanf_r+0x106>
 800ab70:	2b25      	cmp	r3, #37	; 0x25
 800ab72:	d0c6      	beq.n	800ab02 <__ssvfiscanf_r+0x76>
 800ab74:	d856      	bhi.n	800ac24 <__ssvfiscanf_r+0x198>
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d064      	beq.n	800ac44 <__ssvfiscanf_r+0x1b8>
 800ab7a:	2303      	movs	r3, #3
 800ab7c:	9347      	str	r3, [sp, #284]	; 0x11c
 800ab7e:	230a      	movs	r3, #10
 800ab80:	9342      	str	r3, [sp, #264]	; 0x108
 800ab82:	e071      	b.n	800ac68 <__ssvfiscanf_r+0x1dc>
 800ab84:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ab86:	fb02 1103 	mla	r1, r2, r3, r1
 800ab8a:	3930      	subs	r1, #48	; 0x30
 800ab8c:	9143      	str	r1, [sp, #268]	; 0x10c
 800ab8e:	4655      	mov	r5, sl
 800ab90:	e7d3      	b.n	800ab3a <__ssvfiscanf_r+0xae>
 800ab92:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ab96:	2a20      	cmp	r2, #32
 800ab98:	d8ef      	bhi.n	800ab7a <__ssvfiscanf_r+0xee>
 800ab9a:	a101      	add	r1, pc, #4	; (adr r1, 800aba0 <__ssvfiscanf_r+0x114>)
 800ab9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aba0:	0800ac53 	.word	0x0800ac53
 800aba4:	0800ab7b 	.word	0x0800ab7b
 800aba8:	0800ab7b 	.word	0x0800ab7b
 800abac:	0800acb1 	.word	0x0800acb1
 800abb0:	0800ab7b 	.word	0x0800ab7b
 800abb4:	0800ab7b 	.word	0x0800ab7b
 800abb8:	0800ab7b 	.word	0x0800ab7b
 800abbc:	0800ab7b 	.word	0x0800ab7b
 800abc0:	0800ab7b 	.word	0x0800ab7b
 800abc4:	0800ab7b 	.word	0x0800ab7b
 800abc8:	0800ab7b 	.word	0x0800ab7b
 800abcc:	0800acc7 	.word	0x0800acc7
 800abd0:	0800ac9d 	.word	0x0800ac9d
 800abd4:	0800ac2b 	.word	0x0800ac2b
 800abd8:	0800ac2b 	.word	0x0800ac2b
 800abdc:	0800ac2b 	.word	0x0800ac2b
 800abe0:	0800ab7b 	.word	0x0800ab7b
 800abe4:	0800aca1 	.word	0x0800aca1
 800abe8:	0800ab7b 	.word	0x0800ab7b
 800abec:	0800ab7b 	.word	0x0800ab7b
 800abf0:	0800ab7b 	.word	0x0800ab7b
 800abf4:	0800ab7b 	.word	0x0800ab7b
 800abf8:	0800acd7 	.word	0x0800acd7
 800abfc:	0800aca9 	.word	0x0800aca9
 800ac00:	0800ac4b 	.word	0x0800ac4b
 800ac04:	0800ab7b 	.word	0x0800ab7b
 800ac08:	0800ab7b 	.word	0x0800ab7b
 800ac0c:	0800acd3 	.word	0x0800acd3
 800ac10:	0800ab7b 	.word	0x0800ab7b
 800ac14:	0800ac9d 	.word	0x0800ac9d
 800ac18:	0800ab7b 	.word	0x0800ab7b
 800ac1c:	0800ab7b 	.word	0x0800ab7b
 800ac20:	0800ac53 	.word	0x0800ac53
 800ac24:	3b45      	subs	r3, #69	; 0x45
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d8a7      	bhi.n	800ab7a <__ssvfiscanf_r+0xee>
 800ac2a:	2305      	movs	r3, #5
 800ac2c:	e01b      	b.n	800ac66 <__ssvfiscanf_r+0x1da>
 800ac2e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ac30:	4621      	mov	r1, r4
 800ac32:	4630      	mov	r0, r6
 800ac34:	4798      	blx	r3
 800ac36:	2800      	cmp	r0, #0
 800ac38:	f43f af68 	beq.w	800ab0c <__ssvfiscanf_r+0x80>
 800ac3c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ac3e:	2800      	cmp	r0, #0
 800ac40:	f040 808d 	bne.w	800ad5e <__ssvfiscanf_r+0x2d2>
 800ac44:	f04f 30ff 	mov.w	r0, #4294967295
 800ac48:	e08f      	b.n	800ad6a <__ssvfiscanf_r+0x2de>
 800ac4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ac4c:	f042 0220 	orr.w	r2, r2, #32
 800ac50:	9241      	str	r2, [sp, #260]	; 0x104
 800ac52:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ac54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac58:	9241      	str	r2, [sp, #260]	; 0x104
 800ac5a:	2210      	movs	r2, #16
 800ac5c:	2b6f      	cmp	r3, #111	; 0x6f
 800ac5e:	9242      	str	r2, [sp, #264]	; 0x108
 800ac60:	bf34      	ite	cc
 800ac62:	2303      	movcc	r3, #3
 800ac64:	2304      	movcs	r3, #4
 800ac66:	9347      	str	r3, [sp, #284]	; 0x11c
 800ac68:	6863      	ldr	r3, [r4, #4]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	dd42      	ble.n	800acf4 <__ssvfiscanf_r+0x268>
 800ac6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ac70:	0659      	lsls	r1, r3, #25
 800ac72:	d404      	bmi.n	800ac7e <__ssvfiscanf_r+0x1f2>
 800ac74:	6823      	ldr	r3, [r4, #0]
 800ac76:	781a      	ldrb	r2, [r3, #0]
 800ac78:	5cba      	ldrb	r2, [r7, r2]
 800ac7a:	0712      	lsls	r2, r2, #28
 800ac7c:	d441      	bmi.n	800ad02 <__ssvfiscanf_r+0x276>
 800ac7e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	dc50      	bgt.n	800ad26 <__ssvfiscanf_r+0x29a>
 800ac84:	466b      	mov	r3, sp
 800ac86:	4622      	mov	r2, r4
 800ac88:	a941      	add	r1, sp, #260	; 0x104
 800ac8a:	4630      	mov	r0, r6
 800ac8c:	f000 f876 	bl	800ad7c <_scanf_chars>
 800ac90:	2801      	cmp	r0, #1
 800ac92:	d06e      	beq.n	800ad72 <__ssvfiscanf_r+0x2e6>
 800ac94:	2802      	cmp	r0, #2
 800ac96:	f47f af20 	bne.w	800aada <__ssvfiscanf_r+0x4e>
 800ac9a:	e7cf      	b.n	800ac3c <__ssvfiscanf_r+0x1b0>
 800ac9c:	220a      	movs	r2, #10
 800ac9e:	e7dd      	b.n	800ac5c <__ssvfiscanf_r+0x1d0>
 800aca0:	2300      	movs	r3, #0
 800aca2:	9342      	str	r3, [sp, #264]	; 0x108
 800aca4:	2303      	movs	r3, #3
 800aca6:	e7de      	b.n	800ac66 <__ssvfiscanf_r+0x1da>
 800aca8:	2308      	movs	r3, #8
 800acaa:	9342      	str	r3, [sp, #264]	; 0x108
 800acac:	2304      	movs	r3, #4
 800acae:	e7da      	b.n	800ac66 <__ssvfiscanf_r+0x1da>
 800acb0:	4629      	mov	r1, r5
 800acb2:	4640      	mov	r0, r8
 800acb4:	f000 f9e0 	bl	800b078 <__sccl>
 800acb8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800acba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acbe:	9341      	str	r3, [sp, #260]	; 0x104
 800acc0:	4605      	mov	r5, r0
 800acc2:	2301      	movs	r3, #1
 800acc4:	e7cf      	b.n	800ac66 <__ssvfiscanf_r+0x1da>
 800acc6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800acc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800accc:	9341      	str	r3, [sp, #260]	; 0x104
 800acce:	2300      	movs	r3, #0
 800acd0:	e7c9      	b.n	800ac66 <__ssvfiscanf_r+0x1da>
 800acd2:	2302      	movs	r3, #2
 800acd4:	e7c7      	b.n	800ac66 <__ssvfiscanf_r+0x1da>
 800acd6:	9841      	ldr	r0, [sp, #260]	; 0x104
 800acd8:	06c3      	lsls	r3, r0, #27
 800acda:	f53f aefe 	bmi.w	800aada <__ssvfiscanf_r+0x4e>
 800acde:	9b00      	ldr	r3, [sp, #0]
 800ace0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ace2:	1d19      	adds	r1, r3, #4
 800ace4:	9100      	str	r1, [sp, #0]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f010 0f01 	tst.w	r0, #1
 800acec:	bf14      	ite	ne
 800acee:	801a      	strhne	r2, [r3, #0]
 800acf0:	601a      	streq	r2, [r3, #0]
 800acf2:	e6f2      	b.n	800aada <__ssvfiscanf_r+0x4e>
 800acf4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800acf6:	4621      	mov	r1, r4
 800acf8:	4630      	mov	r0, r6
 800acfa:	4798      	blx	r3
 800acfc:	2800      	cmp	r0, #0
 800acfe:	d0b6      	beq.n	800ac6e <__ssvfiscanf_r+0x1e2>
 800ad00:	e79c      	b.n	800ac3c <__ssvfiscanf_r+0x1b0>
 800ad02:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ad04:	3201      	adds	r2, #1
 800ad06:	9245      	str	r2, [sp, #276]	; 0x114
 800ad08:	6862      	ldr	r2, [r4, #4]
 800ad0a:	3a01      	subs	r2, #1
 800ad0c:	2a00      	cmp	r2, #0
 800ad0e:	6062      	str	r2, [r4, #4]
 800ad10:	dd02      	ble.n	800ad18 <__ssvfiscanf_r+0x28c>
 800ad12:	3301      	adds	r3, #1
 800ad14:	6023      	str	r3, [r4, #0]
 800ad16:	e7ad      	b.n	800ac74 <__ssvfiscanf_r+0x1e8>
 800ad18:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ad1a:	4621      	mov	r1, r4
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	4798      	blx	r3
 800ad20:	2800      	cmp	r0, #0
 800ad22:	d0a7      	beq.n	800ac74 <__ssvfiscanf_r+0x1e8>
 800ad24:	e78a      	b.n	800ac3c <__ssvfiscanf_r+0x1b0>
 800ad26:	2b04      	cmp	r3, #4
 800ad28:	dc0e      	bgt.n	800ad48 <__ssvfiscanf_r+0x2bc>
 800ad2a:	466b      	mov	r3, sp
 800ad2c:	4622      	mov	r2, r4
 800ad2e:	a941      	add	r1, sp, #260	; 0x104
 800ad30:	4630      	mov	r0, r6
 800ad32:	f000 f87d 	bl	800ae30 <_scanf_i>
 800ad36:	e7ab      	b.n	800ac90 <__ssvfiscanf_r+0x204>
 800ad38:	0800a9d9 	.word	0x0800a9d9
 800ad3c:	0800aa53 	.word	0x0800aa53
 800ad40:	0800e911 	.word	0x0800e911
 800ad44:	0800ec7a 	.word	0x0800ec7a
 800ad48:	4b0b      	ldr	r3, [pc, #44]	; (800ad78 <__ssvfiscanf_r+0x2ec>)
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f43f aec5 	beq.w	800aada <__ssvfiscanf_r+0x4e>
 800ad50:	466b      	mov	r3, sp
 800ad52:	4622      	mov	r2, r4
 800ad54:	a941      	add	r1, sp, #260	; 0x104
 800ad56:	4630      	mov	r0, r6
 800ad58:	f7fc fb8a 	bl	8007470 <_scanf_float>
 800ad5c:	e798      	b.n	800ac90 <__ssvfiscanf_r+0x204>
 800ad5e:	89a3      	ldrh	r3, [r4, #12]
 800ad60:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ad64:	bf18      	it	ne
 800ad66:	f04f 30ff 	movne.w	r0, #4294967295
 800ad6a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ad6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad72:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ad74:	e7f9      	b.n	800ad6a <__ssvfiscanf_r+0x2de>
 800ad76:	bf00      	nop
 800ad78:	08007471 	.word	0x08007471

0800ad7c <_scanf_chars>:
 800ad7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad80:	4615      	mov	r5, r2
 800ad82:	688a      	ldr	r2, [r1, #8]
 800ad84:	4680      	mov	r8, r0
 800ad86:	460c      	mov	r4, r1
 800ad88:	b932      	cbnz	r2, 800ad98 <_scanf_chars+0x1c>
 800ad8a:	698a      	ldr	r2, [r1, #24]
 800ad8c:	2a00      	cmp	r2, #0
 800ad8e:	bf0c      	ite	eq
 800ad90:	2201      	moveq	r2, #1
 800ad92:	f04f 32ff 	movne.w	r2, #4294967295
 800ad96:	608a      	str	r2, [r1, #8]
 800ad98:	6822      	ldr	r2, [r4, #0]
 800ad9a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800ae2c <_scanf_chars+0xb0>
 800ad9e:	06d1      	lsls	r1, r2, #27
 800ada0:	bf5f      	itttt	pl
 800ada2:	681a      	ldrpl	r2, [r3, #0]
 800ada4:	1d11      	addpl	r1, r2, #4
 800ada6:	6019      	strpl	r1, [r3, #0]
 800ada8:	6816      	ldrpl	r6, [r2, #0]
 800adaa:	2700      	movs	r7, #0
 800adac:	69a0      	ldr	r0, [r4, #24]
 800adae:	b188      	cbz	r0, 800add4 <_scanf_chars+0x58>
 800adb0:	2801      	cmp	r0, #1
 800adb2:	d107      	bne.n	800adc4 <_scanf_chars+0x48>
 800adb4:	682a      	ldr	r2, [r5, #0]
 800adb6:	7811      	ldrb	r1, [r2, #0]
 800adb8:	6962      	ldr	r2, [r4, #20]
 800adba:	5c52      	ldrb	r2, [r2, r1]
 800adbc:	b952      	cbnz	r2, 800add4 <_scanf_chars+0x58>
 800adbe:	2f00      	cmp	r7, #0
 800adc0:	d031      	beq.n	800ae26 <_scanf_chars+0xaa>
 800adc2:	e022      	b.n	800ae0a <_scanf_chars+0x8e>
 800adc4:	2802      	cmp	r0, #2
 800adc6:	d120      	bne.n	800ae0a <_scanf_chars+0x8e>
 800adc8:	682b      	ldr	r3, [r5, #0]
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	f813 3009 	ldrb.w	r3, [r3, r9]
 800add0:	071b      	lsls	r3, r3, #28
 800add2:	d41a      	bmi.n	800ae0a <_scanf_chars+0x8e>
 800add4:	6823      	ldr	r3, [r4, #0]
 800add6:	06da      	lsls	r2, r3, #27
 800add8:	bf5e      	ittt	pl
 800adda:	682b      	ldrpl	r3, [r5, #0]
 800addc:	781b      	ldrbpl	r3, [r3, #0]
 800adde:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ade2:	682a      	ldr	r2, [r5, #0]
 800ade4:	686b      	ldr	r3, [r5, #4]
 800ade6:	3201      	adds	r2, #1
 800ade8:	602a      	str	r2, [r5, #0]
 800adea:	68a2      	ldr	r2, [r4, #8]
 800adec:	3b01      	subs	r3, #1
 800adee:	3a01      	subs	r2, #1
 800adf0:	606b      	str	r3, [r5, #4]
 800adf2:	3701      	adds	r7, #1
 800adf4:	60a2      	str	r2, [r4, #8]
 800adf6:	b142      	cbz	r2, 800ae0a <_scanf_chars+0x8e>
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	dcd7      	bgt.n	800adac <_scanf_chars+0x30>
 800adfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ae00:	4629      	mov	r1, r5
 800ae02:	4640      	mov	r0, r8
 800ae04:	4798      	blx	r3
 800ae06:	2800      	cmp	r0, #0
 800ae08:	d0d0      	beq.n	800adac <_scanf_chars+0x30>
 800ae0a:	6823      	ldr	r3, [r4, #0]
 800ae0c:	f013 0310 	ands.w	r3, r3, #16
 800ae10:	d105      	bne.n	800ae1e <_scanf_chars+0xa2>
 800ae12:	68e2      	ldr	r2, [r4, #12]
 800ae14:	3201      	adds	r2, #1
 800ae16:	60e2      	str	r2, [r4, #12]
 800ae18:	69a2      	ldr	r2, [r4, #24]
 800ae1a:	b102      	cbz	r2, 800ae1e <_scanf_chars+0xa2>
 800ae1c:	7033      	strb	r3, [r6, #0]
 800ae1e:	6923      	ldr	r3, [r4, #16]
 800ae20:	443b      	add	r3, r7
 800ae22:	6123      	str	r3, [r4, #16]
 800ae24:	2000      	movs	r0, #0
 800ae26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae2a:	bf00      	nop
 800ae2c:	0800e911 	.word	0x0800e911

0800ae30 <_scanf_i>:
 800ae30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae34:	4698      	mov	r8, r3
 800ae36:	4b76      	ldr	r3, [pc, #472]	; (800b010 <_scanf_i+0x1e0>)
 800ae38:	460c      	mov	r4, r1
 800ae3a:	4682      	mov	sl, r0
 800ae3c:	4616      	mov	r6, r2
 800ae3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ae42:	b087      	sub	sp, #28
 800ae44:	ab03      	add	r3, sp, #12
 800ae46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ae4a:	4b72      	ldr	r3, [pc, #456]	; (800b014 <_scanf_i+0x1e4>)
 800ae4c:	69a1      	ldr	r1, [r4, #24]
 800ae4e:	4a72      	ldr	r2, [pc, #456]	; (800b018 <_scanf_i+0x1e8>)
 800ae50:	2903      	cmp	r1, #3
 800ae52:	bf18      	it	ne
 800ae54:	461a      	movne	r2, r3
 800ae56:	68a3      	ldr	r3, [r4, #8]
 800ae58:	9201      	str	r2, [sp, #4]
 800ae5a:	1e5a      	subs	r2, r3, #1
 800ae5c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ae60:	bf88      	it	hi
 800ae62:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ae66:	4627      	mov	r7, r4
 800ae68:	bf82      	ittt	hi
 800ae6a:	eb03 0905 	addhi.w	r9, r3, r5
 800ae6e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ae72:	60a3      	strhi	r3, [r4, #8]
 800ae74:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ae78:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ae7c:	bf98      	it	ls
 800ae7e:	f04f 0900 	movls.w	r9, #0
 800ae82:	6023      	str	r3, [r4, #0]
 800ae84:	463d      	mov	r5, r7
 800ae86:	f04f 0b00 	mov.w	fp, #0
 800ae8a:	6831      	ldr	r1, [r6, #0]
 800ae8c:	ab03      	add	r3, sp, #12
 800ae8e:	7809      	ldrb	r1, [r1, #0]
 800ae90:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ae94:	2202      	movs	r2, #2
 800ae96:	f7f5 f9bb 	bl	8000210 <memchr>
 800ae9a:	b328      	cbz	r0, 800aee8 <_scanf_i+0xb8>
 800ae9c:	f1bb 0f01 	cmp.w	fp, #1
 800aea0:	d159      	bne.n	800af56 <_scanf_i+0x126>
 800aea2:	6862      	ldr	r2, [r4, #4]
 800aea4:	b92a      	cbnz	r2, 800aeb2 <_scanf_i+0x82>
 800aea6:	6822      	ldr	r2, [r4, #0]
 800aea8:	2308      	movs	r3, #8
 800aeaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aeae:	6063      	str	r3, [r4, #4]
 800aeb0:	6022      	str	r2, [r4, #0]
 800aeb2:	6822      	ldr	r2, [r4, #0]
 800aeb4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800aeb8:	6022      	str	r2, [r4, #0]
 800aeba:	68a2      	ldr	r2, [r4, #8]
 800aebc:	1e51      	subs	r1, r2, #1
 800aebe:	60a1      	str	r1, [r4, #8]
 800aec0:	b192      	cbz	r2, 800aee8 <_scanf_i+0xb8>
 800aec2:	6832      	ldr	r2, [r6, #0]
 800aec4:	1c51      	adds	r1, r2, #1
 800aec6:	6031      	str	r1, [r6, #0]
 800aec8:	7812      	ldrb	r2, [r2, #0]
 800aeca:	f805 2b01 	strb.w	r2, [r5], #1
 800aece:	6872      	ldr	r2, [r6, #4]
 800aed0:	3a01      	subs	r2, #1
 800aed2:	2a00      	cmp	r2, #0
 800aed4:	6072      	str	r2, [r6, #4]
 800aed6:	dc07      	bgt.n	800aee8 <_scanf_i+0xb8>
 800aed8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800aedc:	4631      	mov	r1, r6
 800aede:	4650      	mov	r0, sl
 800aee0:	4790      	blx	r2
 800aee2:	2800      	cmp	r0, #0
 800aee4:	f040 8085 	bne.w	800aff2 <_scanf_i+0x1c2>
 800aee8:	f10b 0b01 	add.w	fp, fp, #1
 800aeec:	f1bb 0f03 	cmp.w	fp, #3
 800aef0:	d1cb      	bne.n	800ae8a <_scanf_i+0x5a>
 800aef2:	6863      	ldr	r3, [r4, #4]
 800aef4:	b90b      	cbnz	r3, 800aefa <_scanf_i+0xca>
 800aef6:	230a      	movs	r3, #10
 800aef8:	6063      	str	r3, [r4, #4]
 800aefa:	6863      	ldr	r3, [r4, #4]
 800aefc:	4947      	ldr	r1, [pc, #284]	; (800b01c <_scanf_i+0x1ec>)
 800aefe:	6960      	ldr	r0, [r4, #20]
 800af00:	1ac9      	subs	r1, r1, r3
 800af02:	f000 f8b9 	bl	800b078 <__sccl>
 800af06:	f04f 0b00 	mov.w	fp, #0
 800af0a:	68a3      	ldr	r3, [r4, #8]
 800af0c:	6822      	ldr	r2, [r4, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d03d      	beq.n	800af8e <_scanf_i+0x15e>
 800af12:	6831      	ldr	r1, [r6, #0]
 800af14:	6960      	ldr	r0, [r4, #20]
 800af16:	f891 c000 	ldrb.w	ip, [r1]
 800af1a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800af1e:	2800      	cmp	r0, #0
 800af20:	d035      	beq.n	800af8e <_scanf_i+0x15e>
 800af22:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800af26:	d124      	bne.n	800af72 <_scanf_i+0x142>
 800af28:	0510      	lsls	r0, r2, #20
 800af2a:	d522      	bpl.n	800af72 <_scanf_i+0x142>
 800af2c:	f10b 0b01 	add.w	fp, fp, #1
 800af30:	f1b9 0f00 	cmp.w	r9, #0
 800af34:	d003      	beq.n	800af3e <_scanf_i+0x10e>
 800af36:	3301      	adds	r3, #1
 800af38:	f109 39ff 	add.w	r9, r9, #4294967295
 800af3c:	60a3      	str	r3, [r4, #8]
 800af3e:	6873      	ldr	r3, [r6, #4]
 800af40:	3b01      	subs	r3, #1
 800af42:	2b00      	cmp	r3, #0
 800af44:	6073      	str	r3, [r6, #4]
 800af46:	dd1b      	ble.n	800af80 <_scanf_i+0x150>
 800af48:	6833      	ldr	r3, [r6, #0]
 800af4a:	3301      	adds	r3, #1
 800af4c:	6033      	str	r3, [r6, #0]
 800af4e:	68a3      	ldr	r3, [r4, #8]
 800af50:	3b01      	subs	r3, #1
 800af52:	60a3      	str	r3, [r4, #8]
 800af54:	e7d9      	b.n	800af0a <_scanf_i+0xda>
 800af56:	f1bb 0f02 	cmp.w	fp, #2
 800af5a:	d1ae      	bne.n	800aeba <_scanf_i+0x8a>
 800af5c:	6822      	ldr	r2, [r4, #0]
 800af5e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800af62:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800af66:	d1bf      	bne.n	800aee8 <_scanf_i+0xb8>
 800af68:	2310      	movs	r3, #16
 800af6a:	6063      	str	r3, [r4, #4]
 800af6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af70:	e7a2      	b.n	800aeb8 <_scanf_i+0x88>
 800af72:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800af76:	6022      	str	r2, [r4, #0]
 800af78:	780b      	ldrb	r3, [r1, #0]
 800af7a:	f805 3b01 	strb.w	r3, [r5], #1
 800af7e:	e7de      	b.n	800af3e <_scanf_i+0x10e>
 800af80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800af84:	4631      	mov	r1, r6
 800af86:	4650      	mov	r0, sl
 800af88:	4798      	blx	r3
 800af8a:	2800      	cmp	r0, #0
 800af8c:	d0df      	beq.n	800af4e <_scanf_i+0x11e>
 800af8e:	6823      	ldr	r3, [r4, #0]
 800af90:	05db      	lsls	r3, r3, #23
 800af92:	d50d      	bpl.n	800afb0 <_scanf_i+0x180>
 800af94:	42bd      	cmp	r5, r7
 800af96:	d909      	bls.n	800afac <_scanf_i+0x17c>
 800af98:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800af9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afa0:	4632      	mov	r2, r6
 800afa2:	4650      	mov	r0, sl
 800afa4:	4798      	blx	r3
 800afa6:	f105 39ff 	add.w	r9, r5, #4294967295
 800afaa:	464d      	mov	r5, r9
 800afac:	42bd      	cmp	r5, r7
 800afae:	d02d      	beq.n	800b00c <_scanf_i+0x1dc>
 800afb0:	6822      	ldr	r2, [r4, #0]
 800afb2:	f012 0210 	ands.w	r2, r2, #16
 800afb6:	d113      	bne.n	800afe0 <_scanf_i+0x1b0>
 800afb8:	702a      	strb	r2, [r5, #0]
 800afba:	6863      	ldr	r3, [r4, #4]
 800afbc:	9e01      	ldr	r6, [sp, #4]
 800afbe:	4639      	mov	r1, r7
 800afc0:	4650      	mov	r0, sl
 800afc2:	47b0      	blx	r6
 800afc4:	6821      	ldr	r1, [r4, #0]
 800afc6:	f8d8 3000 	ldr.w	r3, [r8]
 800afca:	f011 0f20 	tst.w	r1, #32
 800afce:	d013      	beq.n	800aff8 <_scanf_i+0x1c8>
 800afd0:	1d1a      	adds	r2, r3, #4
 800afd2:	f8c8 2000 	str.w	r2, [r8]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	6018      	str	r0, [r3, #0]
 800afda:	68e3      	ldr	r3, [r4, #12]
 800afdc:	3301      	adds	r3, #1
 800afde:	60e3      	str	r3, [r4, #12]
 800afe0:	1bed      	subs	r5, r5, r7
 800afe2:	44ab      	add	fp, r5
 800afe4:	6925      	ldr	r5, [r4, #16]
 800afe6:	445d      	add	r5, fp
 800afe8:	6125      	str	r5, [r4, #16]
 800afea:	2000      	movs	r0, #0
 800afec:	b007      	add	sp, #28
 800afee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aff2:	f04f 0b00 	mov.w	fp, #0
 800aff6:	e7ca      	b.n	800af8e <_scanf_i+0x15e>
 800aff8:	1d1a      	adds	r2, r3, #4
 800affa:	f8c8 2000 	str.w	r2, [r8]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f011 0f01 	tst.w	r1, #1
 800b004:	bf14      	ite	ne
 800b006:	8018      	strhne	r0, [r3, #0]
 800b008:	6018      	streq	r0, [r3, #0]
 800b00a:	e7e6      	b.n	800afda <_scanf_i+0x1aa>
 800b00c:	2001      	movs	r0, #1
 800b00e:	e7ed      	b.n	800afec <_scanf_i+0x1bc>
 800b010:	0800e874 	.word	0x0800e874
 800b014:	0800b1f5 	.word	0x0800b1f5
 800b018:	08008715 	.word	0x08008715
 800b01c:	0800ec9e 	.word	0x0800ec9e

0800b020 <_read_r>:
 800b020:	b538      	push	{r3, r4, r5, lr}
 800b022:	4d07      	ldr	r5, [pc, #28]	; (800b040 <_read_r+0x20>)
 800b024:	4604      	mov	r4, r0
 800b026:	4608      	mov	r0, r1
 800b028:	4611      	mov	r1, r2
 800b02a:	2200      	movs	r2, #0
 800b02c:	602a      	str	r2, [r5, #0]
 800b02e:	461a      	mov	r2, r3
 800b030:	f7f8 fdad 	bl	8003b8e <_read>
 800b034:	1c43      	adds	r3, r0, #1
 800b036:	d102      	bne.n	800b03e <_read_r+0x1e>
 800b038:	682b      	ldr	r3, [r5, #0]
 800b03a:	b103      	cbz	r3, 800b03e <_read_r+0x1e>
 800b03c:	6023      	str	r3, [r4, #0]
 800b03e:	bd38      	pop	{r3, r4, r5, pc}
 800b040:	20001188 	.word	0x20001188
 800b044:	00000000 	.word	0x00000000

0800b048 <nan>:
 800b048:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b050 <nan+0x8>
 800b04c:	4770      	bx	lr
 800b04e:	bf00      	nop
 800b050:	00000000 	.word	0x00000000
 800b054:	7ff80000 	.word	0x7ff80000

0800b058 <_sbrk_r>:
 800b058:	b538      	push	{r3, r4, r5, lr}
 800b05a:	4d06      	ldr	r5, [pc, #24]	; (800b074 <_sbrk_r+0x1c>)
 800b05c:	2300      	movs	r3, #0
 800b05e:	4604      	mov	r4, r0
 800b060:	4608      	mov	r0, r1
 800b062:	602b      	str	r3, [r5, #0]
 800b064:	f7f8 fe00 	bl	8003c68 <_sbrk>
 800b068:	1c43      	adds	r3, r0, #1
 800b06a:	d102      	bne.n	800b072 <_sbrk_r+0x1a>
 800b06c:	682b      	ldr	r3, [r5, #0]
 800b06e:	b103      	cbz	r3, 800b072 <_sbrk_r+0x1a>
 800b070:	6023      	str	r3, [r4, #0]
 800b072:	bd38      	pop	{r3, r4, r5, pc}
 800b074:	20001188 	.word	0x20001188

0800b078 <__sccl>:
 800b078:	b570      	push	{r4, r5, r6, lr}
 800b07a:	780b      	ldrb	r3, [r1, #0]
 800b07c:	4604      	mov	r4, r0
 800b07e:	2b5e      	cmp	r3, #94	; 0x5e
 800b080:	bf0b      	itete	eq
 800b082:	784b      	ldrbeq	r3, [r1, #1]
 800b084:	1c48      	addne	r0, r1, #1
 800b086:	1c88      	addeq	r0, r1, #2
 800b088:	2200      	movne	r2, #0
 800b08a:	bf08      	it	eq
 800b08c:	2201      	moveq	r2, #1
 800b08e:	1e61      	subs	r1, r4, #1
 800b090:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b094:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b098:	42a9      	cmp	r1, r5
 800b09a:	d1fb      	bne.n	800b094 <__sccl+0x1c>
 800b09c:	b90b      	cbnz	r3, 800b0a2 <__sccl+0x2a>
 800b09e:	3801      	subs	r0, #1
 800b0a0:	bd70      	pop	{r4, r5, r6, pc}
 800b0a2:	f082 0201 	eor.w	r2, r2, #1
 800b0a6:	54e2      	strb	r2, [r4, r3]
 800b0a8:	4605      	mov	r5, r0
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b0b0:	292d      	cmp	r1, #45	; 0x2d
 800b0b2:	d006      	beq.n	800b0c2 <__sccl+0x4a>
 800b0b4:	295d      	cmp	r1, #93	; 0x5d
 800b0b6:	d0f3      	beq.n	800b0a0 <__sccl+0x28>
 800b0b8:	b909      	cbnz	r1, 800b0be <__sccl+0x46>
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	e7f0      	b.n	800b0a0 <__sccl+0x28>
 800b0be:	460b      	mov	r3, r1
 800b0c0:	e7f1      	b.n	800b0a6 <__sccl+0x2e>
 800b0c2:	786e      	ldrb	r6, [r5, #1]
 800b0c4:	2e5d      	cmp	r6, #93	; 0x5d
 800b0c6:	d0fa      	beq.n	800b0be <__sccl+0x46>
 800b0c8:	42b3      	cmp	r3, r6
 800b0ca:	dcf8      	bgt.n	800b0be <__sccl+0x46>
 800b0cc:	3502      	adds	r5, #2
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	3101      	adds	r1, #1
 800b0d2:	428e      	cmp	r6, r1
 800b0d4:	5462      	strb	r2, [r4, r1]
 800b0d6:	dcfb      	bgt.n	800b0d0 <__sccl+0x58>
 800b0d8:	1af1      	subs	r1, r6, r3
 800b0da:	3901      	subs	r1, #1
 800b0dc:	1c58      	adds	r0, r3, #1
 800b0de:	42b3      	cmp	r3, r6
 800b0e0:	bfa8      	it	ge
 800b0e2:	2100      	movge	r1, #0
 800b0e4:	1843      	adds	r3, r0, r1
 800b0e6:	e7e0      	b.n	800b0aa <__sccl+0x32>

0800b0e8 <strncmp>:
 800b0e8:	b510      	push	{r4, lr}
 800b0ea:	b17a      	cbz	r2, 800b10c <strncmp+0x24>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	3901      	subs	r1, #1
 800b0f0:	1884      	adds	r4, r0, r2
 800b0f2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b0f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b0fa:	4290      	cmp	r0, r2
 800b0fc:	d101      	bne.n	800b102 <strncmp+0x1a>
 800b0fe:	42a3      	cmp	r3, r4
 800b100:	d101      	bne.n	800b106 <strncmp+0x1e>
 800b102:	1a80      	subs	r0, r0, r2
 800b104:	bd10      	pop	{r4, pc}
 800b106:	2800      	cmp	r0, #0
 800b108:	d1f3      	bne.n	800b0f2 <strncmp+0xa>
 800b10a:	e7fa      	b.n	800b102 <strncmp+0x1a>
 800b10c:	4610      	mov	r0, r2
 800b10e:	e7f9      	b.n	800b104 <strncmp+0x1c>

0800b110 <_strtoul_l.constprop.0>:
 800b110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b114:	4f36      	ldr	r7, [pc, #216]	; (800b1f0 <_strtoul_l.constprop.0+0xe0>)
 800b116:	4686      	mov	lr, r0
 800b118:	460d      	mov	r5, r1
 800b11a:	4628      	mov	r0, r5
 800b11c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b120:	5de6      	ldrb	r6, [r4, r7]
 800b122:	f016 0608 	ands.w	r6, r6, #8
 800b126:	d1f8      	bne.n	800b11a <_strtoul_l.constprop.0+0xa>
 800b128:	2c2d      	cmp	r4, #45	; 0x2d
 800b12a:	d12f      	bne.n	800b18c <_strtoul_l.constprop.0+0x7c>
 800b12c:	782c      	ldrb	r4, [r5, #0]
 800b12e:	2601      	movs	r6, #1
 800b130:	1c85      	adds	r5, r0, #2
 800b132:	2b00      	cmp	r3, #0
 800b134:	d057      	beq.n	800b1e6 <_strtoul_l.constprop.0+0xd6>
 800b136:	2b10      	cmp	r3, #16
 800b138:	d109      	bne.n	800b14e <_strtoul_l.constprop.0+0x3e>
 800b13a:	2c30      	cmp	r4, #48	; 0x30
 800b13c:	d107      	bne.n	800b14e <_strtoul_l.constprop.0+0x3e>
 800b13e:	7828      	ldrb	r0, [r5, #0]
 800b140:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b144:	2858      	cmp	r0, #88	; 0x58
 800b146:	d149      	bne.n	800b1dc <_strtoul_l.constprop.0+0xcc>
 800b148:	786c      	ldrb	r4, [r5, #1]
 800b14a:	2310      	movs	r3, #16
 800b14c:	3502      	adds	r5, #2
 800b14e:	f04f 38ff 	mov.w	r8, #4294967295
 800b152:	2700      	movs	r7, #0
 800b154:	fbb8 f8f3 	udiv	r8, r8, r3
 800b158:	fb03 f908 	mul.w	r9, r3, r8
 800b15c:	ea6f 0909 	mvn.w	r9, r9
 800b160:	4638      	mov	r0, r7
 800b162:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b166:	f1bc 0f09 	cmp.w	ip, #9
 800b16a:	d814      	bhi.n	800b196 <_strtoul_l.constprop.0+0x86>
 800b16c:	4664      	mov	r4, ip
 800b16e:	42a3      	cmp	r3, r4
 800b170:	dd22      	ble.n	800b1b8 <_strtoul_l.constprop.0+0xa8>
 800b172:	2f00      	cmp	r7, #0
 800b174:	db1d      	blt.n	800b1b2 <_strtoul_l.constprop.0+0xa2>
 800b176:	4580      	cmp	r8, r0
 800b178:	d31b      	bcc.n	800b1b2 <_strtoul_l.constprop.0+0xa2>
 800b17a:	d101      	bne.n	800b180 <_strtoul_l.constprop.0+0x70>
 800b17c:	45a1      	cmp	r9, r4
 800b17e:	db18      	blt.n	800b1b2 <_strtoul_l.constprop.0+0xa2>
 800b180:	fb00 4003 	mla	r0, r0, r3, r4
 800b184:	2701      	movs	r7, #1
 800b186:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b18a:	e7ea      	b.n	800b162 <_strtoul_l.constprop.0+0x52>
 800b18c:	2c2b      	cmp	r4, #43	; 0x2b
 800b18e:	bf04      	itt	eq
 800b190:	782c      	ldrbeq	r4, [r5, #0]
 800b192:	1c85      	addeq	r5, r0, #2
 800b194:	e7cd      	b.n	800b132 <_strtoul_l.constprop.0+0x22>
 800b196:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b19a:	f1bc 0f19 	cmp.w	ip, #25
 800b19e:	d801      	bhi.n	800b1a4 <_strtoul_l.constprop.0+0x94>
 800b1a0:	3c37      	subs	r4, #55	; 0x37
 800b1a2:	e7e4      	b.n	800b16e <_strtoul_l.constprop.0+0x5e>
 800b1a4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b1a8:	f1bc 0f19 	cmp.w	ip, #25
 800b1ac:	d804      	bhi.n	800b1b8 <_strtoul_l.constprop.0+0xa8>
 800b1ae:	3c57      	subs	r4, #87	; 0x57
 800b1b0:	e7dd      	b.n	800b16e <_strtoul_l.constprop.0+0x5e>
 800b1b2:	f04f 37ff 	mov.w	r7, #4294967295
 800b1b6:	e7e6      	b.n	800b186 <_strtoul_l.constprop.0+0x76>
 800b1b8:	2f00      	cmp	r7, #0
 800b1ba:	da07      	bge.n	800b1cc <_strtoul_l.constprop.0+0xbc>
 800b1bc:	2322      	movs	r3, #34	; 0x22
 800b1be:	f8ce 3000 	str.w	r3, [lr]
 800b1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c6:	b932      	cbnz	r2, 800b1d6 <_strtoul_l.constprop.0+0xc6>
 800b1c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1cc:	b106      	cbz	r6, 800b1d0 <_strtoul_l.constprop.0+0xc0>
 800b1ce:	4240      	negs	r0, r0
 800b1d0:	2a00      	cmp	r2, #0
 800b1d2:	d0f9      	beq.n	800b1c8 <_strtoul_l.constprop.0+0xb8>
 800b1d4:	b107      	cbz	r7, 800b1d8 <_strtoul_l.constprop.0+0xc8>
 800b1d6:	1e69      	subs	r1, r5, #1
 800b1d8:	6011      	str	r1, [r2, #0]
 800b1da:	e7f5      	b.n	800b1c8 <_strtoul_l.constprop.0+0xb8>
 800b1dc:	2430      	movs	r4, #48	; 0x30
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1b5      	bne.n	800b14e <_strtoul_l.constprop.0+0x3e>
 800b1e2:	2308      	movs	r3, #8
 800b1e4:	e7b3      	b.n	800b14e <_strtoul_l.constprop.0+0x3e>
 800b1e6:	2c30      	cmp	r4, #48	; 0x30
 800b1e8:	d0a9      	beq.n	800b13e <_strtoul_l.constprop.0+0x2e>
 800b1ea:	230a      	movs	r3, #10
 800b1ec:	e7af      	b.n	800b14e <_strtoul_l.constprop.0+0x3e>
 800b1ee:	bf00      	nop
 800b1f0:	0800e911 	.word	0x0800e911

0800b1f4 <_strtoul_r>:
 800b1f4:	f7ff bf8c 	b.w	800b110 <_strtoul_l.constprop.0>

0800b1f8 <__submore>:
 800b1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1fc:	460c      	mov	r4, r1
 800b1fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b200:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b204:	4299      	cmp	r1, r3
 800b206:	d11d      	bne.n	800b244 <__submore+0x4c>
 800b208:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b20c:	f7ff fa14 	bl	800a638 <_malloc_r>
 800b210:	b918      	cbnz	r0, 800b21a <__submore+0x22>
 800b212:	f04f 30ff 	mov.w	r0, #4294967295
 800b216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b21a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b21e:	63a3      	str	r3, [r4, #56]	; 0x38
 800b220:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b224:	6360      	str	r0, [r4, #52]	; 0x34
 800b226:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b22a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b22e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b232:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b236:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b23a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b23e:	6020      	str	r0, [r4, #0]
 800b240:	2000      	movs	r0, #0
 800b242:	e7e8      	b.n	800b216 <__submore+0x1e>
 800b244:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b246:	0077      	lsls	r7, r6, #1
 800b248:	463a      	mov	r2, r7
 800b24a:	f000 fa2d 	bl	800b6a8 <_realloc_r>
 800b24e:	4605      	mov	r5, r0
 800b250:	2800      	cmp	r0, #0
 800b252:	d0de      	beq.n	800b212 <__submore+0x1a>
 800b254:	eb00 0806 	add.w	r8, r0, r6
 800b258:	4601      	mov	r1, r0
 800b25a:	4632      	mov	r2, r6
 800b25c:	4640      	mov	r0, r8
 800b25e:	f7fe fc99 	bl	8009b94 <memcpy>
 800b262:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b266:	f8c4 8000 	str.w	r8, [r4]
 800b26a:	e7e9      	b.n	800b240 <__submore+0x48>

0800b26c <__ascii_wctomb>:
 800b26c:	b149      	cbz	r1, 800b282 <__ascii_wctomb+0x16>
 800b26e:	2aff      	cmp	r2, #255	; 0xff
 800b270:	bf85      	ittet	hi
 800b272:	238a      	movhi	r3, #138	; 0x8a
 800b274:	6003      	strhi	r3, [r0, #0]
 800b276:	700a      	strbls	r2, [r1, #0]
 800b278:	f04f 30ff 	movhi.w	r0, #4294967295
 800b27c:	bf98      	it	ls
 800b27e:	2001      	movls	r0, #1
 800b280:	4770      	bx	lr
 800b282:	4608      	mov	r0, r1
 800b284:	4770      	bx	lr
	...

0800b288 <__assert_func>:
 800b288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b28a:	4614      	mov	r4, r2
 800b28c:	461a      	mov	r2, r3
 800b28e:	4b09      	ldr	r3, [pc, #36]	; (800b2b4 <__assert_func+0x2c>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4605      	mov	r5, r0
 800b294:	68d8      	ldr	r0, [r3, #12]
 800b296:	b14c      	cbz	r4, 800b2ac <__assert_func+0x24>
 800b298:	4b07      	ldr	r3, [pc, #28]	; (800b2b8 <__assert_func+0x30>)
 800b29a:	9100      	str	r1, [sp, #0]
 800b29c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2a0:	4906      	ldr	r1, [pc, #24]	; (800b2bc <__assert_func+0x34>)
 800b2a2:	462b      	mov	r3, r5
 800b2a4:	f000 f9a6 	bl	800b5f4 <fiprintf>
 800b2a8:	f000 fc46 	bl	800bb38 <abort>
 800b2ac:	4b04      	ldr	r3, [pc, #16]	; (800b2c0 <__assert_func+0x38>)
 800b2ae:	461c      	mov	r4, r3
 800b2b0:	e7f3      	b.n	800b29a <__assert_func+0x12>
 800b2b2:	bf00      	nop
 800b2b4:	2000000c 	.word	0x2000000c
 800b2b8:	0800eca0 	.word	0x0800eca0
 800b2bc:	0800ecad 	.word	0x0800ecad
 800b2c0:	0800ecdb 	.word	0x0800ecdb

0800b2c4 <__sflush_r>:
 800b2c4:	898a      	ldrh	r2, [r1, #12]
 800b2c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ca:	4605      	mov	r5, r0
 800b2cc:	0710      	lsls	r0, r2, #28
 800b2ce:	460c      	mov	r4, r1
 800b2d0:	d458      	bmi.n	800b384 <__sflush_r+0xc0>
 800b2d2:	684b      	ldr	r3, [r1, #4]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	dc05      	bgt.n	800b2e4 <__sflush_r+0x20>
 800b2d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	dc02      	bgt.n	800b2e4 <__sflush_r+0x20>
 800b2de:	2000      	movs	r0, #0
 800b2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2e6:	2e00      	cmp	r6, #0
 800b2e8:	d0f9      	beq.n	800b2de <__sflush_r+0x1a>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b2f0:	682f      	ldr	r7, [r5, #0]
 800b2f2:	602b      	str	r3, [r5, #0]
 800b2f4:	d032      	beq.n	800b35c <__sflush_r+0x98>
 800b2f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b2f8:	89a3      	ldrh	r3, [r4, #12]
 800b2fa:	075a      	lsls	r2, r3, #29
 800b2fc:	d505      	bpl.n	800b30a <__sflush_r+0x46>
 800b2fe:	6863      	ldr	r3, [r4, #4]
 800b300:	1ac0      	subs	r0, r0, r3
 800b302:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b304:	b10b      	cbz	r3, 800b30a <__sflush_r+0x46>
 800b306:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b308:	1ac0      	subs	r0, r0, r3
 800b30a:	2300      	movs	r3, #0
 800b30c:	4602      	mov	r2, r0
 800b30e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b310:	6a21      	ldr	r1, [r4, #32]
 800b312:	4628      	mov	r0, r5
 800b314:	47b0      	blx	r6
 800b316:	1c43      	adds	r3, r0, #1
 800b318:	89a3      	ldrh	r3, [r4, #12]
 800b31a:	d106      	bne.n	800b32a <__sflush_r+0x66>
 800b31c:	6829      	ldr	r1, [r5, #0]
 800b31e:	291d      	cmp	r1, #29
 800b320:	d82c      	bhi.n	800b37c <__sflush_r+0xb8>
 800b322:	4a2a      	ldr	r2, [pc, #168]	; (800b3cc <__sflush_r+0x108>)
 800b324:	40ca      	lsrs	r2, r1
 800b326:	07d6      	lsls	r6, r2, #31
 800b328:	d528      	bpl.n	800b37c <__sflush_r+0xb8>
 800b32a:	2200      	movs	r2, #0
 800b32c:	6062      	str	r2, [r4, #4]
 800b32e:	04d9      	lsls	r1, r3, #19
 800b330:	6922      	ldr	r2, [r4, #16]
 800b332:	6022      	str	r2, [r4, #0]
 800b334:	d504      	bpl.n	800b340 <__sflush_r+0x7c>
 800b336:	1c42      	adds	r2, r0, #1
 800b338:	d101      	bne.n	800b33e <__sflush_r+0x7a>
 800b33a:	682b      	ldr	r3, [r5, #0]
 800b33c:	b903      	cbnz	r3, 800b340 <__sflush_r+0x7c>
 800b33e:	6560      	str	r0, [r4, #84]	; 0x54
 800b340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b342:	602f      	str	r7, [r5, #0]
 800b344:	2900      	cmp	r1, #0
 800b346:	d0ca      	beq.n	800b2de <__sflush_r+0x1a>
 800b348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b34c:	4299      	cmp	r1, r3
 800b34e:	d002      	beq.n	800b356 <__sflush_r+0x92>
 800b350:	4628      	mov	r0, r5
 800b352:	f7ff f905 	bl	800a560 <_free_r>
 800b356:	2000      	movs	r0, #0
 800b358:	6360      	str	r0, [r4, #52]	; 0x34
 800b35a:	e7c1      	b.n	800b2e0 <__sflush_r+0x1c>
 800b35c:	6a21      	ldr	r1, [r4, #32]
 800b35e:	2301      	movs	r3, #1
 800b360:	4628      	mov	r0, r5
 800b362:	47b0      	blx	r6
 800b364:	1c41      	adds	r1, r0, #1
 800b366:	d1c7      	bne.n	800b2f8 <__sflush_r+0x34>
 800b368:	682b      	ldr	r3, [r5, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d0c4      	beq.n	800b2f8 <__sflush_r+0x34>
 800b36e:	2b1d      	cmp	r3, #29
 800b370:	d001      	beq.n	800b376 <__sflush_r+0xb2>
 800b372:	2b16      	cmp	r3, #22
 800b374:	d101      	bne.n	800b37a <__sflush_r+0xb6>
 800b376:	602f      	str	r7, [r5, #0]
 800b378:	e7b1      	b.n	800b2de <__sflush_r+0x1a>
 800b37a:	89a3      	ldrh	r3, [r4, #12]
 800b37c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b380:	81a3      	strh	r3, [r4, #12]
 800b382:	e7ad      	b.n	800b2e0 <__sflush_r+0x1c>
 800b384:	690f      	ldr	r7, [r1, #16]
 800b386:	2f00      	cmp	r7, #0
 800b388:	d0a9      	beq.n	800b2de <__sflush_r+0x1a>
 800b38a:	0793      	lsls	r3, r2, #30
 800b38c:	680e      	ldr	r6, [r1, #0]
 800b38e:	bf08      	it	eq
 800b390:	694b      	ldreq	r3, [r1, #20]
 800b392:	600f      	str	r7, [r1, #0]
 800b394:	bf18      	it	ne
 800b396:	2300      	movne	r3, #0
 800b398:	eba6 0807 	sub.w	r8, r6, r7
 800b39c:	608b      	str	r3, [r1, #8]
 800b39e:	f1b8 0f00 	cmp.w	r8, #0
 800b3a2:	dd9c      	ble.n	800b2de <__sflush_r+0x1a>
 800b3a4:	6a21      	ldr	r1, [r4, #32]
 800b3a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b3a8:	4643      	mov	r3, r8
 800b3aa:	463a      	mov	r2, r7
 800b3ac:	4628      	mov	r0, r5
 800b3ae:	47b0      	blx	r6
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	dc06      	bgt.n	800b3c2 <__sflush_r+0xfe>
 800b3b4:	89a3      	ldrh	r3, [r4, #12]
 800b3b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3ba:	81a3      	strh	r3, [r4, #12]
 800b3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c0:	e78e      	b.n	800b2e0 <__sflush_r+0x1c>
 800b3c2:	4407      	add	r7, r0
 800b3c4:	eba8 0800 	sub.w	r8, r8, r0
 800b3c8:	e7e9      	b.n	800b39e <__sflush_r+0xda>
 800b3ca:	bf00      	nop
 800b3cc:	20400001 	.word	0x20400001

0800b3d0 <_fflush_r>:
 800b3d0:	b538      	push	{r3, r4, r5, lr}
 800b3d2:	690b      	ldr	r3, [r1, #16]
 800b3d4:	4605      	mov	r5, r0
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	b913      	cbnz	r3, 800b3e0 <_fflush_r+0x10>
 800b3da:	2500      	movs	r5, #0
 800b3dc:	4628      	mov	r0, r5
 800b3de:	bd38      	pop	{r3, r4, r5, pc}
 800b3e0:	b118      	cbz	r0, 800b3ea <_fflush_r+0x1a>
 800b3e2:	6983      	ldr	r3, [r0, #24]
 800b3e4:	b90b      	cbnz	r3, 800b3ea <_fflush_r+0x1a>
 800b3e6:	f000 f887 	bl	800b4f8 <__sinit>
 800b3ea:	4b14      	ldr	r3, [pc, #80]	; (800b43c <_fflush_r+0x6c>)
 800b3ec:	429c      	cmp	r4, r3
 800b3ee:	d11b      	bne.n	800b428 <_fflush_r+0x58>
 800b3f0:	686c      	ldr	r4, [r5, #4]
 800b3f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d0ef      	beq.n	800b3da <_fflush_r+0xa>
 800b3fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b3fc:	07d0      	lsls	r0, r2, #31
 800b3fe:	d404      	bmi.n	800b40a <_fflush_r+0x3a>
 800b400:	0599      	lsls	r1, r3, #22
 800b402:	d402      	bmi.n	800b40a <_fflush_r+0x3a>
 800b404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b406:	f000 f927 	bl	800b658 <__retarget_lock_acquire_recursive>
 800b40a:	4628      	mov	r0, r5
 800b40c:	4621      	mov	r1, r4
 800b40e:	f7ff ff59 	bl	800b2c4 <__sflush_r>
 800b412:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b414:	07da      	lsls	r2, r3, #31
 800b416:	4605      	mov	r5, r0
 800b418:	d4e0      	bmi.n	800b3dc <_fflush_r+0xc>
 800b41a:	89a3      	ldrh	r3, [r4, #12]
 800b41c:	059b      	lsls	r3, r3, #22
 800b41e:	d4dd      	bmi.n	800b3dc <_fflush_r+0xc>
 800b420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b422:	f000 f91a 	bl	800b65a <__retarget_lock_release_recursive>
 800b426:	e7d9      	b.n	800b3dc <_fflush_r+0xc>
 800b428:	4b05      	ldr	r3, [pc, #20]	; (800b440 <_fflush_r+0x70>)
 800b42a:	429c      	cmp	r4, r3
 800b42c:	d101      	bne.n	800b432 <_fflush_r+0x62>
 800b42e:	68ac      	ldr	r4, [r5, #8]
 800b430:	e7df      	b.n	800b3f2 <_fflush_r+0x22>
 800b432:	4b04      	ldr	r3, [pc, #16]	; (800b444 <_fflush_r+0x74>)
 800b434:	429c      	cmp	r4, r3
 800b436:	bf08      	it	eq
 800b438:	68ec      	ldreq	r4, [r5, #12]
 800b43a:	e7da      	b.n	800b3f2 <_fflush_r+0x22>
 800b43c:	0800ecfc 	.word	0x0800ecfc
 800b440:	0800ed1c 	.word	0x0800ed1c
 800b444:	0800ecdc 	.word	0x0800ecdc

0800b448 <std>:
 800b448:	2300      	movs	r3, #0
 800b44a:	b510      	push	{r4, lr}
 800b44c:	4604      	mov	r4, r0
 800b44e:	e9c0 3300 	strd	r3, r3, [r0]
 800b452:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b456:	6083      	str	r3, [r0, #8]
 800b458:	8181      	strh	r1, [r0, #12]
 800b45a:	6643      	str	r3, [r0, #100]	; 0x64
 800b45c:	81c2      	strh	r2, [r0, #14]
 800b45e:	6183      	str	r3, [r0, #24]
 800b460:	4619      	mov	r1, r3
 800b462:	2208      	movs	r2, #8
 800b464:	305c      	adds	r0, #92	; 0x5c
 800b466:	f7fb fb91 	bl	8006b8c <memset>
 800b46a:	4b05      	ldr	r3, [pc, #20]	; (800b480 <std+0x38>)
 800b46c:	6263      	str	r3, [r4, #36]	; 0x24
 800b46e:	4b05      	ldr	r3, [pc, #20]	; (800b484 <std+0x3c>)
 800b470:	62a3      	str	r3, [r4, #40]	; 0x28
 800b472:	4b05      	ldr	r3, [pc, #20]	; (800b488 <std+0x40>)
 800b474:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b476:	4b05      	ldr	r3, [pc, #20]	; (800b48c <std+0x44>)
 800b478:	6224      	str	r4, [r4, #32]
 800b47a:	6323      	str	r3, [r4, #48]	; 0x30
 800b47c:	bd10      	pop	{r4, pc}
 800b47e:	bf00      	nop
 800b480:	08007935 	.word	0x08007935
 800b484:	0800795b 	.word	0x0800795b
 800b488:	08007993 	.word	0x08007993
 800b48c:	080079b7 	.word	0x080079b7

0800b490 <_cleanup_r>:
 800b490:	4901      	ldr	r1, [pc, #4]	; (800b498 <_cleanup_r+0x8>)
 800b492:	f000 b8c1 	b.w	800b618 <_fwalk_reent>
 800b496:	bf00      	nop
 800b498:	0800b3d1 	.word	0x0800b3d1

0800b49c <__sfmoreglue>:
 800b49c:	b570      	push	{r4, r5, r6, lr}
 800b49e:	2268      	movs	r2, #104	; 0x68
 800b4a0:	1e4d      	subs	r5, r1, #1
 800b4a2:	4355      	muls	r5, r2
 800b4a4:	460e      	mov	r6, r1
 800b4a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b4aa:	f7ff f8c5 	bl	800a638 <_malloc_r>
 800b4ae:	4604      	mov	r4, r0
 800b4b0:	b140      	cbz	r0, 800b4c4 <__sfmoreglue+0x28>
 800b4b2:	2100      	movs	r1, #0
 800b4b4:	e9c0 1600 	strd	r1, r6, [r0]
 800b4b8:	300c      	adds	r0, #12
 800b4ba:	60a0      	str	r0, [r4, #8]
 800b4bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b4c0:	f7fb fb64 	bl	8006b8c <memset>
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	bd70      	pop	{r4, r5, r6, pc}

0800b4c8 <__sfp_lock_acquire>:
 800b4c8:	4801      	ldr	r0, [pc, #4]	; (800b4d0 <__sfp_lock_acquire+0x8>)
 800b4ca:	f000 b8c5 	b.w	800b658 <__retarget_lock_acquire_recursive>
 800b4ce:	bf00      	nop
 800b4d0:	2000118d 	.word	0x2000118d

0800b4d4 <__sfp_lock_release>:
 800b4d4:	4801      	ldr	r0, [pc, #4]	; (800b4dc <__sfp_lock_release+0x8>)
 800b4d6:	f000 b8c0 	b.w	800b65a <__retarget_lock_release_recursive>
 800b4da:	bf00      	nop
 800b4dc:	2000118d 	.word	0x2000118d

0800b4e0 <__sinit_lock_acquire>:
 800b4e0:	4801      	ldr	r0, [pc, #4]	; (800b4e8 <__sinit_lock_acquire+0x8>)
 800b4e2:	f000 b8b9 	b.w	800b658 <__retarget_lock_acquire_recursive>
 800b4e6:	bf00      	nop
 800b4e8:	2000118e 	.word	0x2000118e

0800b4ec <__sinit_lock_release>:
 800b4ec:	4801      	ldr	r0, [pc, #4]	; (800b4f4 <__sinit_lock_release+0x8>)
 800b4ee:	f000 b8b4 	b.w	800b65a <__retarget_lock_release_recursive>
 800b4f2:	bf00      	nop
 800b4f4:	2000118e 	.word	0x2000118e

0800b4f8 <__sinit>:
 800b4f8:	b510      	push	{r4, lr}
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	f7ff fff0 	bl	800b4e0 <__sinit_lock_acquire>
 800b500:	69a3      	ldr	r3, [r4, #24]
 800b502:	b11b      	cbz	r3, 800b50c <__sinit+0x14>
 800b504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b508:	f7ff bff0 	b.w	800b4ec <__sinit_lock_release>
 800b50c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b510:	6523      	str	r3, [r4, #80]	; 0x50
 800b512:	4b13      	ldr	r3, [pc, #76]	; (800b560 <__sinit+0x68>)
 800b514:	4a13      	ldr	r2, [pc, #76]	; (800b564 <__sinit+0x6c>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	62a2      	str	r2, [r4, #40]	; 0x28
 800b51a:	42a3      	cmp	r3, r4
 800b51c:	bf04      	itt	eq
 800b51e:	2301      	moveq	r3, #1
 800b520:	61a3      	streq	r3, [r4, #24]
 800b522:	4620      	mov	r0, r4
 800b524:	f000 f820 	bl	800b568 <__sfp>
 800b528:	6060      	str	r0, [r4, #4]
 800b52a:	4620      	mov	r0, r4
 800b52c:	f000 f81c 	bl	800b568 <__sfp>
 800b530:	60a0      	str	r0, [r4, #8]
 800b532:	4620      	mov	r0, r4
 800b534:	f000 f818 	bl	800b568 <__sfp>
 800b538:	2200      	movs	r2, #0
 800b53a:	60e0      	str	r0, [r4, #12]
 800b53c:	2104      	movs	r1, #4
 800b53e:	6860      	ldr	r0, [r4, #4]
 800b540:	f7ff ff82 	bl	800b448 <std>
 800b544:	68a0      	ldr	r0, [r4, #8]
 800b546:	2201      	movs	r2, #1
 800b548:	2109      	movs	r1, #9
 800b54a:	f7ff ff7d 	bl	800b448 <std>
 800b54e:	68e0      	ldr	r0, [r4, #12]
 800b550:	2202      	movs	r2, #2
 800b552:	2112      	movs	r1, #18
 800b554:	f7ff ff78 	bl	800b448 <std>
 800b558:	2301      	movs	r3, #1
 800b55a:	61a3      	str	r3, [r4, #24]
 800b55c:	e7d2      	b.n	800b504 <__sinit+0xc>
 800b55e:	bf00      	nop
 800b560:	0800e880 	.word	0x0800e880
 800b564:	0800b491 	.word	0x0800b491

0800b568 <__sfp>:
 800b568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b56a:	4607      	mov	r7, r0
 800b56c:	f7ff ffac 	bl	800b4c8 <__sfp_lock_acquire>
 800b570:	4b1e      	ldr	r3, [pc, #120]	; (800b5ec <__sfp+0x84>)
 800b572:	681e      	ldr	r6, [r3, #0]
 800b574:	69b3      	ldr	r3, [r6, #24]
 800b576:	b913      	cbnz	r3, 800b57e <__sfp+0x16>
 800b578:	4630      	mov	r0, r6
 800b57a:	f7ff ffbd 	bl	800b4f8 <__sinit>
 800b57e:	3648      	adds	r6, #72	; 0x48
 800b580:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b584:	3b01      	subs	r3, #1
 800b586:	d503      	bpl.n	800b590 <__sfp+0x28>
 800b588:	6833      	ldr	r3, [r6, #0]
 800b58a:	b30b      	cbz	r3, 800b5d0 <__sfp+0x68>
 800b58c:	6836      	ldr	r6, [r6, #0]
 800b58e:	e7f7      	b.n	800b580 <__sfp+0x18>
 800b590:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b594:	b9d5      	cbnz	r5, 800b5cc <__sfp+0x64>
 800b596:	4b16      	ldr	r3, [pc, #88]	; (800b5f0 <__sfp+0x88>)
 800b598:	60e3      	str	r3, [r4, #12]
 800b59a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b59e:	6665      	str	r5, [r4, #100]	; 0x64
 800b5a0:	f000 f859 	bl	800b656 <__retarget_lock_init_recursive>
 800b5a4:	f7ff ff96 	bl	800b4d4 <__sfp_lock_release>
 800b5a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b5ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b5b0:	6025      	str	r5, [r4, #0]
 800b5b2:	61a5      	str	r5, [r4, #24]
 800b5b4:	2208      	movs	r2, #8
 800b5b6:	4629      	mov	r1, r5
 800b5b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b5bc:	f7fb fae6 	bl	8006b8c <memset>
 800b5c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b5c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5cc:	3468      	adds	r4, #104	; 0x68
 800b5ce:	e7d9      	b.n	800b584 <__sfp+0x1c>
 800b5d0:	2104      	movs	r1, #4
 800b5d2:	4638      	mov	r0, r7
 800b5d4:	f7ff ff62 	bl	800b49c <__sfmoreglue>
 800b5d8:	4604      	mov	r4, r0
 800b5da:	6030      	str	r0, [r6, #0]
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	d1d5      	bne.n	800b58c <__sfp+0x24>
 800b5e0:	f7ff ff78 	bl	800b4d4 <__sfp_lock_release>
 800b5e4:	230c      	movs	r3, #12
 800b5e6:	603b      	str	r3, [r7, #0]
 800b5e8:	e7ee      	b.n	800b5c8 <__sfp+0x60>
 800b5ea:	bf00      	nop
 800b5ec:	0800e880 	.word	0x0800e880
 800b5f0:	ffff0001 	.word	0xffff0001

0800b5f4 <fiprintf>:
 800b5f4:	b40e      	push	{r1, r2, r3}
 800b5f6:	b503      	push	{r0, r1, lr}
 800b5f8:	4601      	mov	r1, r0
 800b5fa:	ab03      	add	r3, sp, #12
 800b5fc:	4805      	ldr	r0, [pc, #20]	; (800b614 <fiprintf+0x20>)
 800b5fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b602:	6800      	ldr	r0, [r0, #0]
 800b604:	9301      	str	r3, [sp, #4]
 800b606:	f000 f8a7 	bl	800b758 <_vfiprintf_r>
 800b60a:	b002      	add	sp, #8
 800b60c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b610:	b003      	add	sp, #12
 800b612:	4770      	bx	lr
 800b614:	2000000c 	.word	0x2000000c

0800b618 <_fwalk_reent>:
 800b618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b61c:	4606      	mov	r6, r0
 800b61e:	4688      	mov	r8, r1
 800b620:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b624:	2700      	movs	r7, #0
 800b626:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b62a:	f1b9 0901 	subs.w	r9, r9, #1
 800b62e:	d505      	bpl.n	800b63c <_fwalk_reent+0x24>
 800b630:	6824      	ldr	r4, [r4, #0]
 800b632:	2c00      	cmp	r4, #0
 800b634:	d1f7      	bne.n	800b626 <_fwalk_reent+0xe>
 800b636:	4638      	mov	r0, r7
 800b638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b63c:	89ab      	ldrh	r3, [r5, #12]
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d907      	bls.n	800b652 <_fwalk_reent+0x3a>
 800b642:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b646:	3301      	adds	r3, #1
 800b648:	d003      	beq.n	800b652 <_fwalk_reent+0x3a>
 800b64a:	4629      	mov	r1, r5
 800b64c:	4630      	mov	r0, r6
 800b64e:	47c0      	blx	r8
 800b650:	4307      	orrs	r7, r0
 800b652:	3568      	adds	r5, #104	; 0x68
 800b654:	e7e9      	b.n	800b62a <_fwalk_reent+0x12>

0800b656 <__retarget_lock_init_recursive>:
 800b656:	4770      	bx	lr

0800b658 <__retarget_lock_acquire_recursive>:
 800b658:	4770      	bx	lr

0800b65a <__retarget_lock_release_recursive>:
 800b65a:	4770      	bx	lr

0800b65c <memmove>:
 800b65c:	4288      	cmp	r0, r1
 800b65e:	b510      	push	{r4, lr}
 800b660:	eb01 0402 	add.w	r4, r1, r2
 800b664:	d902      	bls.n	800b66c <memmove+0x10>
 800b666:	4284      	cmp	r4, r0
 800b668:	4623      	mov	r3, r4
 800b66a:	d807      	bhi.n	800b67c <memmove+0x20>
 800b66c:	1e43      	subs	r3, r0, #1
 800b66e:	42a1      	cmp	r1, r4
 800b670:	d008      	beq.n	800b684 <memmove+0x28>
 800b672:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b676:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b67a:	e7f8      	b.n	800b66e <memmove+0x12>
 800b67c:	4402      	add	r2, r0
 800b67e:	4601      	mov	r1, r0
 800b680:	428a      	cmp	r2, r1
 800b682:	d100      	bne.n	800b686 <memmove+0x2a>
 800b684:	bd10      	pop	{r4, pc}
 800b686:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b68a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b68e:	e7f7      	b.n	800b680 <memmove+0x24>

0800b690 <__malloc_lock>:
 800b690:	4801      	ldr	r0, [pc, #4]	; (800b698 <__malloc_lock+0x8>)
 800b692:	f7ff bfe1 	b.w	800b658 <__retarget_lock_acquire_recursive>
 800b696:	bf00      	nop
 800b698:	2000118c 	.word	0x2000118c

0800b69c <__malloc_unlock>:
 800b69c:	4801      	ldr	r0, [pc, #4]	; (800b6a4 <__malloc_unlock+0x8>)
 800b69e:	f7ff bfdc 	b.w	800b65a <__retarget_lock_release_recursive>
 800b6a2:	bf00      	nop
 800b6a4:	2000118c 	.word	0x2000118c

0800b6a8 <_realloc_r>:
 800b6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ac:	4680      	mov	r8, r0
 800b6ae:	4614      	mov	r4, r2
 800b6b0:	460e      	mov	r6, r1
 800b6b2:	b921      	cbnz	r1, 800b6be <_realloc_r+0x16>
 800b6b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6b8:	4611      	mov	r1, r2
 800b6ba:	f7fe bfbd 	b.w	800a638 <_malloc_r>
 800b6be:	b92a      	cbnz	r2, 800b6cc <_realloc_r+0x24>
 800b6c0:	f7fe ff4e 	bl	800a560 <_free_r>
 800b6c4:	4625      	mov	r5, r4
 800b6c6:	4628      	mov	r0, r5
 800b6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6cc:	f000 faa0 	bl	800bc10 <_malloc_usable_size_r>
 800b6d0:	4284      	cmp	r4, r0
 800b6d2:	4607      	mov	r7, r0
 800b6d4:	d802      	bhi.n	800b6dc <_realloc_r+0x34>
 800b6d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b6da:	d812      	bhi.n	800b702 <_realloc_r+0x5a>
 800b6dc:	4621      	mov	r1, r4
 800b6de:	4640      	mov	r0, r8
 800b6e0:	f7fe ffaa 	bl	800a638 <_malloc_r>
 800b6e4:	4605      	mov	r5, r0
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	d0ed      	beq.n	800b6c6 <_realloc_r+0x1e>
 800b6ea:	42bc      	cmp	r4, r7
 800b6ec:	4622      	mov	r2, r4
 800b6ee:	4631      	mov	r1, r6
 800b6f0:	bf28      	it	cs
 800b6f2:	463a      	movcs	r2, r7
 800b6f4:	f7fe fa4e 	bl	8009b94 <memcpy>
 800b6f8:	4631      	mov	r1, r6
 800b6fa:	4640      	mov	r0, r8
 800b6fc:	f7fe ff30 	bl	800a560 <_free_r>
 800b700:	e7e1      	b.n	800b6c6 <_realloc_r+0x1e>
 800b702:	4635      	mov	r5, r6
 800b704:	e7df      	b.n	800b6c6 <_realloc_r+0x1e>

0800b706 <__sfputc_r>:
 800b706:	6893      	ldr	r3, [r2, #8]
 800b708:	3b01      	subs	r3, #1
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	b410      	push	{r4}
 800b70e:	6093      	str	r3, [r2, #8]
 800b710:	da08      	bge.n	800b724 <__sfputc_r+0x1e>
 800b712:	6994      	ldr	r4, [r2, #24]
 800b714:	42a3      	cmp	r3, r4
 800b716:	db01      	blt.n	800b71c <__sfputc_r+0x16>
 800b718:	290a      	cmp	r1, #10
 800b71a:	d103      	bne.n	800b724 <__sfputc_r+0x1e>
 800b71c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b720:	f000 b94a 	b.w	800b9b8 <__swbuf_r>
 800b724:	6813      	ldr	r3, [r2, #0]
 800b726:	1c58      	adds	r0, r3, #1
 800b728:	6010      	str	r0, [r2, #0]
 800b72a:	7019      	strb	r1, [r3, #0]
 800b72c:	4608      	mov	r0, r1
 800b72e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <__sfputs_r>:
 800b734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b736:	4606      	mov	r6, r0
 800b738:	460f      	mov	r7, r1
 800b73a:	4614      	mov	r4, r2
 800b73c:	18d5      	adds	r5, r2, r3
 800b73e:	42ac      	cmp	r4, r5
 800b740:	d101      	bne.n	800b746 <__sfputs_r+0x12>
 800b742:	2000      	movs	r0, #0
 800b744:	e007      	b.n	800b756 <__sfputs_r+0x22>
 800b746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b74a:	463a      	mov	r2, r7
 800b74c:	4630      	mov	r0, r6
 800b74e:	f7ff ffda 	bl	800b706 <__sfputc_r>
 800b752:	1c43      	adds	r3, r0, #1
 800b754:	d1f3      	bne.n	800b73e <__sfputs_r+0xa>
 800b756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b758 <_vfiprintf_r>:
 800b758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75c:	460d      	mov	r5, r1
 800b75e:	b09d      	sub	sp, #116	; 0x74
 800b760:	4614      	mov	r4, r2
 800b762:	4698      	mov	r8, r3
 800b764:	4606      	mov	r6, r0
 800b766:	b118      	cbz	r0, 800b770 <_vfiprintf_r+0x18>
 800b768:	6983      	ldr	r3, [r0, #24]
 800b76a:	b90b      	cbnz	r3, 800b770 <_vfiprintf_r+0x18>
 800b76c:	f7ff fec4 	bl	800b4f8 <__sinit>
 800b770:	4b89      	ldr	r3, [pc, #548]	; (800b998 <_vfiprintf_r+0x240>)
 800b772:	429d      	cmp	r5, r3
 800b774:	d11b      	bne.n	800b7ae <_vfiprintf_r+0x56>
 800b776:	6875      	ldr	r5, [r6, #4]
 800b778:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b77a:	07d9      	lsls	r1, r3, #31
 800b77c:	d405      	bmi.n	800b78a <_vfiprintf_r+0x32>
 800b77e:	89ab      	ldrh	r3, [r5, #12]
 800b780:	059a      	lsls	r2, r3, #22
 800b782:	d402      	bmi.n	800b78a <_vfiprintf_r+0x32>
 800b784:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b786:	f7ff ff67 	bl	800b658 <__retarget_lock_acquire_recursive>
 800b78a:	89ab      	ldrh	r3, [r5, #12]
 800b78c:	071b      	lsls	r3, r3, #28
 800b78e:	d501      	bpl.n	800b794 <_vfiprintf_r+0x3c>
 800b790:	692b      	ldr	r3, [r5, #16]
 800b792:	b9eb      	cbnz	r3, 800b7d0 <_vfiprintf_r+0x78>
 800b794:	4629      	mov	r1, r5
 800b796:	4630      	mov	r0, r6
 800b798:	f000 f960 	bl	800ba5c <__swsetup_r>
 800b79c:	b1c0      	cbz	r0, 800b7d0 <_vfiprintf_r+0x78>
 800b79e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7a0:	07dc      	lsls	r4, r3, #31
 800b7a2:	d50e      	bpl.n	800b7c2 <_vfiprintf_r+0x6a>
 800b7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a8:	b01d      	add	sp, #116	; 0x74
 800b7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ae:	4b7b      	ldr	r3, [pc, #492]	; (800b99c <_vfiprintf_r+0x244>)
 800b7b0:	429d      	cmp	r5, r3
 800b7b2:	d101      	bne.n	800b7b8 <_vfiprintf_r+0x60>
 800b7b4:	68b5      	ldr	r5, [r6, #8]
 800b7b6:	e7df      	b.n	800b778 <_vfiprintf_r+0x20>
 800b7b8:	4b79      	ldr	r3, [pc, #484]	; (800b9a0 <_vfiprintf_r+0x248>)
 800b7ba:	429d      	cmp	r5, r3
 800b7bc:	bf08      	it	eq
 800b7be:	68f5      	ldreq	r5, [r6, #12]
 800b7c0:	e7da      	b.n	800b778 <_vfiprintf_r+0x20>
 800b7c2:	89ab      	ldrh	r3, [r5, #12]
 800b7c4:	0598      	lsls	r0, r3, #22
 800b7c6:	d4ed      	bmi.n	800b7a4 <_vfiprintf_r+0x4c>
 800b7c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7ca:	f7ff ff46 	bl	800b65a <__retarget_lock_release_recursive>
 800b7ce:	e7e9      	b.n	800b7a4 <_vfiprintf_r+0x4c>
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	9309      	str	r3, [sp, #36]	; 0x24
 800b7d4:	2320      	movs	r3, #32
 800b7d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7da:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7de:	2330      	movs	r3, #48	; 0x30
 800b7e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b9a4 <_vfiprintf_r+0x24c>
 800b7e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7e8:	f04f 0901 	mov.w	r9, #1
 800b7ec:	4623      	mov	r3, r4
 800b7ee:	469a      	mov	sl, r3
 800b7f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7f4:	b10a      	cbz	r2, 800b7fa <_vfiprintf_r+0xa2>
 800b7f6:	2a25      	cmp	r2, #37	; 0x25
 800b7f8:	d1f9      	bne.n	800b7ee <_vfiprintf_r+0x96>
 800b7fa:	ebba 0b04 	subs.w	fp, sl, r4
 800b7fe:	d00b      	beq.n	800b818 <_vfiprintf_r+0xc0>
 800b800:	465b      	mov	r3, fp
 800b802:	4622      	mov	r2, r4
 800b804:	4629      	mov	r1, r5
 800b806:	4630      	mov	r0, r6
 800b808:	f7ff ff94 	bl	800b734 <__sfputs_r>
 800b80c:	3001      	adds	r0, #1
 800b80e:	f000 80aa 	beq.w	800b966 <_vfiprintf_r+0x20e>
 800b812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b814:	445a      	add	r2, fp
 800b816:	9209      	str	r2, [sp, #36]	; 0x24
 800b818:	f89a 3000 	ldrb.w	r3, [sl]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	f000 80a2 	beq.w	800b966 <_vfiprintf_r+0x20e>
 800b822:	2300      	movs	r3, #0
 800b824:	f04f 32ff 	mov.w	r2, #4294967295
 800b828:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b82c:	f10a 0a01 	add.w	sl, sl, #1
 800b830:	9304      	str	r3, [sp, #16]
 800b832:	9307      	str	r3, [sp, #28]
 800b834:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b838:	931a      	str	r3, [sp, #104]	; 0x68
 800b83a:	4654      	mov	r4, sl
 800b83c:	2205      	movs	r2, #5
 800b83e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b842:	4858      	ldr	r0, [pc, #352]	; (800b9a4 <_vfiprintf_r+0x24c>)
 800b844:	f7f4 fce4 	bl	8000210 <memchr>
 800b848:	9a04      	ldr	r2, [sp, #16]
 800b84a:	b9d8      	cbnz	r0, 800b884 <_vfiprintf_r+0x12c>
 800b84c:	06d1      	lsls	r1, r2, #27
 800b84e:	bf44      	itt	mi
 800b850:	2320      	movmi	r3, #32
 800b852:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b856:	0713      	lsls	r3, r2, #28
 800b858:	bf44      	itt	mi
 800b85a:	232b      	movmi	r3, #43	; 0x2b
 800b85c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b860:	f89a 3000 	ldrb.w	r3, [sl]
 800b864:	2b2a      	cmp	r3, #42	; 0x2a
 800b866:	d015      	beq.n	800b894 <_vfiprintf_r+0x13c>
 800b868:	9a07      	ldr	r2, [sp, #28]
 800b86a:	4654      	mov	r4, sl
 800b86c:	2000      	movs	r0, #0
 800b86e:	f04f 0c0a 	mov.w	ip, #10
 800b872:	4621      	mov	r1, r4
 800b874:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b878:	3b30      	subs	r3, #48	; 0x30
 800b87a:	2b09      	cmp	r3, #9
 800b87c:	d94e      	bls.n	800b91c <_vfiprintf_r+0x1c4>
 800b87e:	b1b0      	cbz	r0, 800b8ae <_vfiprintf_r+0x156>
 800b880:	9207      	str	r2, [sp, #28]
 800b882:	e014      	b.n	800b8ae <_vfiprintf_r+0x156>
 800b884:	eba0 0308 	sub.w	r3, r0, r8
 800b888:	fa09 f303 	lsl.w	r3, r9, r3
 800b88c:	4313      	orrs	r3, r2
 800b88e:	9304      	str	r3, [sp, #16]
 800b890:	46a2      	mov	sl, r4
 800b892:	e7d2      	b.n	800b83a <_vfiprintf_r+0xe2>
 800b894:	9b03      	ldr	r3, [sp, #12]
 800b896:	1d19      	adds	r1, r3, #4
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	9103      	str	r1, [sp, #12]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	bfbb      	ittet	lt
 800b8a0:	425b      	neglt	r3, r3
 800b8a2:	f042 0202 	orrlt.w	r2, r2, #2
 800b8a6:	9307      	strge	r3, [sp, #28]
 800b8a8:	9307      	strlt	r3, [sp, #28]
 800b8aa:	bfb8      	it	lt
 800b8ac:	9204      	strlt	r2, [sp, #16]
 800b8ae:	7823      	ldrb	r3, [r4, #0]
 800b8b0:	2b2e      	cmp	r3, #46	; 0x2e
 800b8b2:	d10c      	bne.n	800b8ce <_vfiprintf_r+0x176>
 800b8b4:	7863      	ldrb	r3, [r4, #1]
 800b8b6:	2b2a      	cmp	r3, #42	; 0x2a
 800b8b8:	d135      	bne.n	800b926 <_vfiprintf_r+0x1ce>
 800b8ba:	9b03      	ldr	r3, [sp, #12]
 800b8bc:	1d1a      	adds	r2, r3, #4
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	9203      	str	r2, [sp, #12]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	bfb8      	it	lt
 800b8c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8ca:	3402      	adds	r4, #2
 800b8cc:	9305      	str	r3, [sp, #20]
 800b8ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b9b4 <_vfiprintf_r+0x25c>
 800b8d2:	7821      	ldrb	r1, [r4, #0]
 800b8d4:	2203      	movs	r2, #3
 800b8d6:	4650      	mov	r0, sl
 800b8d8:	f7f4 fc9a 	bl	8000210 <memchr>
 800b8dc:	b140      	cbz	r0, 800b8f0 <_vfiprintf_r+0x198>
 800b8de:	2340      	movs	r3, #64	; 0x40
 800b8e0:	eba0 000a 	sub.w	r0, r0, sl
 800b8e4:	fa03 f000 	lsl.w	r0, r3, r0
 800b8e8:	9b04      	ldr	r3, [sp, #16]
 800b8ea:	4303      	orrs	r3, r0
 800b8ec:	3401      	adds	r4, #1
 800b8ee:	9304      	str	r3, [sp, #16]
 800b8f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8f4:	482c      	ldr	r0, [pc, #176]	; (800b9a8 <_vfiprintf_r+0x250>)
 800b8f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8fa:	2206      	movs	r2, #6
 800b8fc:	f7f4 fc88 	bl	8000210 <memchr>
 800b900:	2800      	cmp	r0, #0
 800b902:	d03f      	beq.n	800b984 <_vfiprintf_r+0x22c>
 800b904:	4b29      	ldr	r3, [pc, #164]	; (800b9ac <_vfiprintf_r+0x254>)
 800b906:	bb1b      	cbnz	r3, 800b950 <_vfiprintf_r+0x1f8>
 800b908:	9b03      	ldr	r3, [sp, #12]
 800b90a:	3307      	adds	r3, #7
 800b90c:	f023 0307 	bic.w	r3, r3, #7
 800b910:	3308      	adds	r3, #8
 800b912:	9303      	str	r3, [sp, #12]
 800b914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b916:	443b      	add	r3, r7
 800b918:	9309      	str	r3, [sp, #36]	; 0x24
 800b91a:	e767      	b.n	800b7ec <_vfiprintf_r+0x94>
 800b91c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b920:	460c      	mov	r4, r1
 800b922:	2001      	movs	r0, #1
 800b924:	e7a5      	b.n	800b872 <_vfiprintf_r+0x11a>
 800b926:	2300      	movs	r3, #0
 800b928:	3401      	adds	r4, #1
 800b92a:	9305      	str	r3, [sp, #20]
 800b92c:	4619      	mov	r1, r3
 800b92e:	f04f 0c0a 	mov.w	ip, #10
 800b932:	4620      	mov	r0, r4
 800b934:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b938:	3a30      	subs	r2, #48	; 0x30
 800b93a:	2a09      	cmp	r2, #9
 800b93c:	d903      	bls.n	800b946 <_vfiprintf_r+0x1ee>
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d0c5      	beq.n	800b8ce <_vfiprintf_r+0x176>
 800b942:	9105      	str	r1, [sp, #20]
 800b944:	e7c3      	b.n	800b8ce <_vfiprintf_r+0x176>
 800b946:	fb0c 2101 	mla	r1, ip, r1, r2
 800b94a:	4604      	mov	r4, r0
 800b94c:	2301      	movs	r3, #1
 800b94e:	e7f0      	b.n	800b932 <_vfiprintf_r+0x1da>
 800b950:	ab03      	add	r3, sp, #12
 800b952:	9300      	str	r3, [sp, #0]
 800b954:	462a      	mov	r2, r5
 800b956:	4b16      	ldr	r3, [pc, #88]	; (800b9b0 <_vfiprintf_r+0x258>)
 800b958:	a904      	add	r1, sp, #16
 800b95a:	4630      	mov	r0, r6
 800b95c:	f7fb f9be 	bl	8006cdc <_printf_float>
 800b960:	4607      	mov	r7, r0
 800b962:	1c78      	adds	r0, r7, #1
 800b964:	d1d6      	bne.n	800b914 <_vfiprintf_r+0x1bc>
 800b966:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b968:	07d9      	lsls	r1, r3, #31
 800b96a:	d405      	bmi.n	800b978 <_vfiprintf_r+0x220>
 800b96c:	89ab      	ldrh	r3, [r5, #12]
 800b96e:	059a      	lsls	r2, r3, #22
 800b970:	d402      	bmi.n	800b978 <_vfiprintf_r+0x220>
 800b972:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b974:	f7ff fe71 	bl	800b65a <__retarget_lock_release_recursive>
 800b978:	89ab      	ldrh	r3, [r5, #12]
 800b97a:	065b      	lsls	r3, r3, #25
 800b97c:	f53f af12 	bmi.w	800b7a4 <_vfiprintf_r+0x4c>
 800b980:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b982:	e711      	b.n	800b7a8 <_vfiprintf_r+0x50>
 800b984:	ab03      	add	r3, sp, #12
 800b986:	9300      	str	r3, [sp, #0]
 800b988:	462a      	mov	r2, r5
 800b98a:	4b09      	ldr	r3, [pc, #36]	; (800b9b0 <_vfiprintf_r+0x258>)
 800b98c:	a904      	add	r1, sp, #16
 800b98e:	4630      	mov	r0, r6
 800b990:	f7fb fc48 	bl	8007224 <_printf_i>
 800b994:	e7e4      	b.n	800b960 <_vfiprintf_r+0x208>
 800b996:	bf00      	nop
 800b998:	0800ecfc 	.word	0x0800ecfc
 800b99c:	0800ed1c 	.word	0x0800ed1c
 800b9a0:	0800ecdc 	.word	0x0800ecdc
 800b9a4:	0800ec74 	.word	0x0800ec74
 800b9a8:	0800ec7e 	.word	0x0800ec7e
 800b9ac:	08006cdd 	.word	0x08006cdd
 800b9b0:	0800b735 	.word	0x0800b735
 800b9b4:	0800ec7a 	.word	0x0800ec7a

0800b9b8 <__swbuf_r>:
 800b9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ba:	460e      	mov	r6, r1
 800b9bc:	4614      	mov	r4, r2
 800b9be:	4605      	mov	r5, r0
 800b9c0:	b118      	cbz	r0, 800b9ca <__swbuf_r+0x12>
 800b9c2:	6983      	ldr	r3, [r0, #24]
 800b9c4:	b90b      	cbnz	r3, 800b9ca <__swbuf_r+0x12>
 800b9c6:	f7ff fd97 	bl	800b4f8 <__sinit>
 800b9ca:	4b21      	ldr	r3, [pc, #132]	; (800ba50 <__swbuf_r+0x98>)
 800b9cc:	429c      	cmp	r4, r3
 800b9ce:	d12b      	bne.n	800ba28 <__swbuf_r+0x70>
 800b9d0:	686c      	ldr	r4, [r5, #4]
 800b9d2:	69a3      	ldr	r3, [r4, #24]
 800b9d4:	60a3      	str	r3, [r4, #8]
 800b9d6:	89a3      	ldrh	r3, [r4, #12]
 800b9d8:	071a      	lsls	r2, r3, #28
 800b9da:	d52f      	bpl.n	800ba3c <__swbuf_r+0x84>
 800b9dc:	6923      	ldr	r3, [r4, #16]
 800b9de:	b36b      	cbz	r3, 800ba3c <__swbuf_r+0x84>
 800b9e0:	6923      	ldr	r3, [r4, #16]
 800b9e2:	6820      	ldr	r0, [r4, #0]
 800b9e4:	1ac0      	subs	r0, r0, r3
 800b9e6:	6963      	ldr	r3, [r4, #20]
 800b9e8:	b2f6      	uxtb	r6, r6
 800b9ea:	4283      	cmp	r3, r0
 800b9ec:	4637      	mov	r7, r6
 800b9ee:	dc04      	bgt.n	800b9fa <__swbuf_r+0x42>
 800b9f0:	4621      	mov	r1, r4
 800b9f2:	4628      	mov	r0, r5
 800b9f4:	f7ff fcec 	bl	800b3d0 <_fflush_r>
 800b9f8:	bb30      	cbnz	r0, 800ba48 <__swbuf_r+0x90>
 800b9fa:	68a3      	ldr	r3, [r4, #8]
 800b9fc:	3b01      	subs	r3, #1
 800b9fe:	60a3      	str	r3, [r4, #8]
 800ba00:	6823      	ldr	r3, [r4, #0]
 800ba02:	1c5a      	adds	r2, r3, #1
 800ba04:	6022      	str	r2, [r4, #0]
 800ba06:	701e      	strb	r6, [r3, #0]
 800ba08:	6963      	ldr	r3, [r4, #20]
 800ba0a:	3001      	adds	r0, #1
 800ba0c:	4283      	cmp	r3, r0
 800ba0e:	d004      	beq.n	800ba1a <__swbuf_r+0x62>
 800ba10:	89a3      	ldrh	r3, [r4, #12]
 800ba12:	07db      	lsls	r3, r3, #31
 800ba14:	d506      	bpl.n	800ba24 <__swbuf_r+0x6c>
 800ba16:	2e0a      	cmp	r6, #10
 800ba18:	d104      	bne.n	800ba24 <__swbuf_r+0x6c>
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	f7ff fcd7 	bl	800b3d0 <_fflush_r>
 800ba22:	b988      	cbnz	r0, 800ba48 <__swbuf_r+0x90>
 800ba24:	4638      	mov	r0, r7
 800ba26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba28:	4b0a      	ldr	r3, [pc, #40]	; (800ba54 <__swbuf_r+0x9c>)
 800ba2a:	429c      	cmp	r4, r3
 800ba2c:	d101      	bne.n	800ba32 <__swbuf_r+0x7a>
 800ba2e:	68ac      	ldr	r4, [r5, #8]
 800ba30:	e7cf      	b.n	800b9d2 <__swbuf_r+0x1a>
 800ba32:	4b09      	ldr	r3, [pc, #36]	; (800ba58 <__swbuf_r+0xa0>)
 800ba34:	429c      	cmp	r4, r3
 800ba36:	bf08      	it	eq
 800ba38:	68ec      	ldreq	r4, [r5, #12]
 800ba3a:	e7ca      	b.n	800b9d2 <__swbuf_r+0x1a>
 800ba3c:	4621      	mov	r1, r4
 800ba3e:	4628      	mov	r0, r5
 800ba40:	f000 f80c 	bl	800ba5c <__swsetup_r>
 800ba44:	2800      	cmp	r0, #0
 800ba46:	d0cb      	beq.n	800b9e0 <__swbuf_r+0x28>
 800ba48:	f04f 37ff 	mov.w	r7, #4294967295
 800ba4c:	e7ea      	b.n	800ba24 <__swbuf_r+0x6c>
 800ba4e:	bf00      	nop
 800ba50:	0800ecfc 	.word	0x0800ecfc
 800ba54:	0800ed1c 	.word	0x0800ed1c
 800ba58:	0800ecdc 	.word	0x0800ecdc

0800ba5c <__swsetup_r>:
 800ba5c:	4b32      	ldr	r3, [pc, #200]	; (800bb28 <__swsetup_r+0xcc>)
 800ba5e:	b570      	push	{r4, r5, r6, lr}
 800ba60:	681d      	ldr	r5, [r3, #0]
 800ba62:	4606      	mov	r6, r0
 800ba64:	460c      	mov	r4, r1
 800ba66:	b125      	cbz	r5, 800ba72 <__swsetup_r+0x16>
 800ba68:	69ab      	ldr	r3, [r5, #24]
 800ba6a:	b913      	cbnz	r3, 800ba72 <__swsetup_r+0x16>
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	f7ff fd43 	bl	800b4f8 <__sinit>
 800ba72:	4b2e      	ldr	r3, [pc, #184]	; (800bb2c <__swsetup_r+0xd0>)
 800ba74:	429c      	cmp	r4, r3
 800ba76:	d10f      	bne.n	800ba98 <__swsetup_r+0x3c>
 800ba78:	686c      	ldr	r4, [r5, #4]
 800ba7a:	89a3      	ldrh	r3, [r4, #12]
 800ba7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba80:	0719      	lsls	r1, r3, #28
 800ba82:	d42c      	bmi.n	800bade <__swsetup_r+0x82>
 800ba84:	06dd      	lsls	r5, r3, #27
 800ba86:	d411      	bmi.n	800baac <__swsetup_r+0x50>
 800ba88:	2309      	movs	r3, #9
 800ba8a:	6033      	str	r3, [r6, #0]
 800ba8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba90:	81a3      	strh	r3, [r4, #12]
 800ba92:	f04f 30ff 	mov.w	r0, #4294967295
 800ba96:	e03e      	b.n	800bb16 <__swsetup_r+0xba>
 800ba98:	4b25      	ldr	r3, [pc, #148]	; (800bb30 <__swsetup_r+0xd4>)
 800ba9a:	429c      	cmp	r4, r3
 800ba9c:	d101      	bne.n	800baa2 <__swsetup_r+0x46>
 800ba9e:	68ac      	ldr	r4, [r5, #8]
 800baa0:	e7eb      	b.n	800ba7a <__swsetup_r+0x1e>
 800baa2:	4b24      	ldr	r3, [pc, #144]	; (800bb34 <__swsetup_r+0xd8>)
 800baa4:	429c      	cmp	r4, r3
 800baa6:	bf08      	it	eq
 800baa8:	68ec      	ldreq	r4, [r5, #12]
 800baaa:	e7e6      	b.n	800ba7a <__swsetup_r+0x1e>
 800baac:	0758      	lsls	r0, r3, #29
 800baae:	d512      	bpl.n	800bad6 <__swsetup_r+0x7a>
 800bab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bab2:	b141      	cbz	r1, 800bac6 <__swsetup_r+0x6a>
 800bab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bab8:	4299      	cmp	r1, r3
 800baba:	d002      	beq.n	800bac2 <__swsetup_r+0x66>
 800babc:	4630      	mov	r0, r6
 800babe:	f7fe fd4f 	bl	800a560 <_free_r>
 800bac2:	2300      	movs	r3, #0
 800bac4:	6363      	str	r3, [r4, #52]	; 0x34
 800bac6:	89a3      	ldrh	r3, [r4, #12]
 800bac8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bacc:	81a3      	strh	r3, [r4, #12]
 800bace:	2300      	movs	r3, #0
 800bad0:	6063      	str	r3, [r4, #4]
 800bad2:	6923      	ldr	r3, [r4, #16]
 800bad4:	6023      	str	r3, [r4, #0]
 800bad6:	89a3      	ldrh	r3, [r4, #12]
 800bad8:	f043 0308 	orr.w	r3, r3, #8
 800badc:	81a3      	strh	r3, [r4, #12]
 800bade:	6923      	ldr	r3, [r4, #16]
 800bae0:	b94b      	cbnz	r3, 800baf6 <__swsetup_r+0x9a>
 800bae2:	89a3      	ldrh	r3, [r4, #12]
 800bae4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baec:	d003      	beq.n	800baf6 <__swsetup_r+0x9a>
 800baee:	4621      	mov	r1, r4
 800baf0:	4630      	mov	r0, r6
 800baf2:	f000 f84d 	bl	800bb90 <__smakebuf_r>
 800baf6:	89a0      	ldrh	r0, [r4, #12]
 800baf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bafc:	f010 0301 	ands.w	r3, r0, #1
 800bb00:	d00a      	beq.n	800bb18 <__swsetup_r+0xbc>
 800bb02:	2300      	movs	r3, #0
 800bb04:	60a3      	str	r3, [r4, #8]
 800bb06:	6963      	ldr	r3, [r4, #20]
 800bb08:	425b      	negs	r3, r3
 800bb0a:	61a3      	str	r3, [r4, #24]
 800bb0c:	6923      	ldr	r3, [r4, #16]
 800bb0e:	b943      	cbnz	r3, 800bb22 <__swsetup_r+0xc6>
 800bb10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb14:	d1ba      	bne.n	800ba8c <__swsetup_r+0x30>
 800bb16:	bd70      	pop	{r4, r5, r6, pc}
 800bb18:	0781      	lsls	r1, r0, #30
 800bb1a:	bf58      	it	pl
 800bb1c:	6963      	ldrpl	r3, [r4, #20]
 800bb1e:	60a3      	str	r3, [r4, #8]
 800bb20:	e7f4      	b.n	800bb0c <__swsetup_r+0xb0>
 800bb22:	2000      	movs	r0, #0
 800bb24:	e7f7      	b.n	800bb16 <__swsetup_r+0xba>
 800bb26:	bf00      	nop
 800bb28:	2000000c 	.word	0x2000000c
 800bb2c:	0800ecfc 	.word	0x0800ecfc
 800bb30:	0800ed1c 	.word	0x0800ed1c
 800bb34:	0800ecdc 	.word	0x0800ecdc

0800bb38 <abort>:
 800bb38:	b508      	push	{r3, lr}
 800bb3a:	2006      	movs	r0, #6
 800bb3c:	f000 f898 	bl	800bc70 <raise>
 800bb40:	2001      	movs	r0, #1
 800bb42:	f7f8 f81a 	bl	8003b7a <_exit>

0800bb46 <__swhatbuf_r>:
 800bb46:	b570      	push	{r4, r5, r6, lr}
 800bb48:	460e      	mov	r6, r1
 800bb4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb4e:	2900      	cmp	r1, #0
 800bb50:	b096      	sub	sp, #88	; 0x58
 800bb52:	4614      	mov	r4, r2
 800bb54:	461d      	mov	r5, r3
 800bb56:	da08      	bge.n	800bb6a <__swhatbuf_r+0x24>
 800bb58:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	602a      	str	r2, [r5, #0]
 800bb60:	061a      	lsls	r2, r3, #24
 800bb62:	d410      	bmi.n	800bb86 <__swhatbuf_r+0x40>
 800bb64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb68:	e00e      	b.n	800bb88 <__swhatbuf_r+0x42>
 800bb6a:	466a      	mov	r2, sp
 800bb6c:	f000 f89c 	bl	800bca8 <_fstat_r>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	dbf1      	blt.n	800bb58 <__swhatbuf_r+0x12>
 800bb74:	9a01      	ldr	r2, [sp, #4]
 800bb76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb7e:	425a      	negs	r2, r3
 800bb80:	415a      	adcs	r2, r3
 800bb82:	602a      	str	r2, [r5, #0]
 800bb84:	e7ee      	b.n	800bb64 <__swhatbuf_r+0x1e>
 800bb86:	2340      	movs	r3, #64	; 0x40
 800bb88:	2000      	movs	r0, #0
 800bb8a:	6023      	str	r3, [r4, #0]
 800bb8c:	b016      	add	sp, #88	; 0x58
 800bb8e:	bd70      	pop	{r4, r5, r6, pc}

0800bb90 <__smakebuf_r>:
 800bb90:	898b      	ldrh	r3, [r1, #12]
 800bb92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb94:	079d      	lsls	r5, r3, #30
 800bb96:	4606      	mov	r6, r0
 800bb98:	460c      	mov	r4, r1
 800bb9a:	d507      	bpl.n	800bbac <__smakebuf_r+0x1c>
 800bb9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bba0:	6023      	str	r3, [r4, #0]
 800bba2:	6123      	str	r3, [r4, #16]
 800bba4:	2301      	movs	r3, #1
 800bba6:	6163      	str	r3, [r4, #20]
 800bba8:	b002      	add	sp, #8
 800bbaa:	bd70      	pop	{r4, r5, r6, pc}
 800bbac:	ab01      	add	r3, sp, #4
 800bbae:	466a      	mov	r2, sp
 800bbb0:	f7ff ffc9 	bl	800bb46 <__swhatbuf_r>
 800bbb4:	9900      	ldr	r1, [sp, #0]
 800bbb6:	4605      	mov	r5, r0
 800bbb8:	4630      	mov	r0, r6
 800bbba:	f7fe fd3d 	bl	800a638 <_malloc_r>
 800bbbe:	b948      	cbnz	r0, 800bbd4 <__smakebuf_r+0x44>
 800bbc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbc4:	059a      	lsls	r2, r3, #22
 800bbc6:	d4ef      	bmi.n	800bba8 <__smakebuf_r+0x18>
 800bbc8:	f023 0303 	bic.w	r3, r3, #3
 800bbcc:	f043 0302 	orr.w	r3, r3, #2
 800bbd0:	81a3      	strh	r3, [r4, #12]
 800bbd2:	e7e3      	b.n	800bb9c <__smakebuf_r+0xc>
 800bbd4:	4b0d      	ldr	r3, [pc, #52]	; (800bc0c <__smakebuf_r+0x7c>)
 800bbd6:	62b3      	str	r3, [r6, #40]	; 0x28
 800bbd8:	89a3      	ldrh	r3, [r4, #12]
 800bbda:	6020      	str	r0, [r4, #0]
 800bbdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbe0:	81a3      	strh	r3, [r4, #12]
 800bbe2:	9b00      	ldr	r3, [sp, #0]
 800bbe4:	6163      	str	r3, [r4, #20]
 800bbe6:	9b01      	ldr	r3, [sp, #4]
 800bbe8:	6120      	str	r0, [r4, #16]
 800bbea:	b15b      	cbz	r3, 800bc04 <__smakebuf_r+0x74>
 800bbec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbf0:	4630      	mov	r0, r6
 800bbf2:	f000 f86b 	bl	800bccc <_isatty_r>
 800bbf6:	b128      	cbz	r0, 800bc04 <__smakebuf_r+0x74>
 800bbf8:	89a3      	ldrh	r3, [r4, #12]
 800bbfa:	f023 0303 	bic.w	r3, r3, #3
 800bbfe:	f043 0301 	orr.w	r3, r3, #1
 800bc02:	81a3      	strh	r3, [r4, #12]
 800bc04:	89a0      	ldrh	r0, [r4, #12]
 800bc06:	4305      	orrs	r5, r0
 800bc08:	81a5      	strh	r5, [r4, #12]
 800bc0a:	e7cd      	b.n	800bba8 <__smakebuf_r+0x18>
 800bc0c:	0800b491 	.word	0x0800b491

0800bc10 <_malloc_usable_size_r>:
 800bc10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc14:	1f18      	subs	r0, r3, #4
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	bfbc      	itt	lt
 800bc1a:	580b      	ldrlt	r3, [r1, r0]
 800bc1c:	18c0      	addlt	r0, r0, r3
 800bc1e:	4770      	bx	lr

0800bc20 <_raise_r>:
 800bc20:	291f      	cmp	r1, #31
 800bc22:	b538      	push	{r3, r4, r5, lr}
 800bc24:	4604      	mov	r4, r0
 800bc26:	460d      	mov	r5, r1
 800bc28:	d904      	bls.n	800bc34 <_raise_r+0x14>
 800bc2a:	2316      	movs	r3, #22
 800bc2c:	6003      	str	r3, [r0, #0]
 800bc2e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc32:	bd38      	pop	{r3, r4, r5, pc}
 800bc34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc36:	b112      	cbz	r2, 800bc3e <_raise_r+0x1e>
 800bc38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc3c:	b94b      	cbnz	r3, 800bc52 <_raise_r+0x32>
 800bc3e:	4620      	mov	r0, r4
 800bc40:	f000 f830 	bl	800bca4 <_getpid_r>
 800bc44:	462a      	mov	r2, r5
 800bc46:	4601      	mov	r1, r0
 800bc48:	4620      	mov	r0, r4
 800bc4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc4e:	f000 b817 	b.w	800bc80 <_kill_r>
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d00a      	beq.n	800bc6c <_raise_r+0x4c>
 800bc56:	1c59      	adds	r1, r3, #1
 800bc58:	d103      	bne.n	800bc62 <_raise_r+0x42>
 800bc5a:	2316      	movs	r3, #22
 800bc5c:	6003      	str	r3, [r0, #0]
 800bc5e:	2001      	movs	r0, #1
 800bc60:	e7e7      	b.n	800bc32 <_raise_r+0x12>
 800bc62:	2400      	movs	r4, #0
 800bc64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc68:	4628      	mov	r0, r5
 800bc6a:	4798      	blx	r3
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	e7e0      	b.n	800bc32 <_raise_r+0x12>

0800bc70 <raise>:
 800bc70:	4b02      	ldr	r3, [pc, #8]	; (800bc7c <raise+0xc>)
 800bc72:	4601      	mov	r1, r0
 800bc74:	6818      	ldr	r0, [r3, #0]
 800bc76:	f7ff bfd3 	b.w	800bc20 <_raise_r>
 800bc7a:	bf00      	nop
 800bc7c:	2000000c 	.word	0x2000000c

0800bc80 <_kill_r>:
 800bc80:	b538      	push	{r3, r4, r5, lr}
 800bc82:	4d07      	ldr	r5, [pc, #28]	; (800bca0 <_kill_r+0x20>)
 800bc84:	2300      	movs	r3, #0
 800bc86:	4604      	mov	r4, r0
 800bc88:	4608      	mov	r0, r1
 800bc8a:	4611      	mov	r1, r2
 800bc8c:	602b      	str	r3, [r5, #0]
 800bc8e:	f7f7 ff64 	bl	8003b5a <_kill>
 800bc92:	1c43      	adds	r3, r0, #1
 800bc94:	d102      	bne.n	800bc9c <_kill_r+0x1c>
 800bc96:	682b      	ldr	r3, [r5, #0]
 800bc98:	b103      	cbz	r3, 800bc9c <_kill_r+0x1c>
 800bc9a:	6023      	str	r3, [r4, #0]
 800bc9c:	bd38      	pop	{r3, r4, r5, pc}
 800bc9e:	bf00      	nop
 800bca0:	20001188 	.word	0x20001188

0800bca4 <_getpid_r>:
 800bca4:	f7f7 bf51 	b.w	8003b4a <_getpid>

0800bca8 <_fstat_r>:
 800bca8:	b538      	push	{r3, r4, r5, lr}
 800bcaa:	4d07      	ldr	r5, [pc, #28]	; (800bcc8 <_fstat_r+0x20>)
 800bcac:	2300      	movs	r3, #0
 800bcae:	4604      	mov	r4, r0
 800bcb0:	4608      	mov	r0, r1
 800bcb2:	4611      	mov	r1, r2
 800bcb4:	602b      	str	r3, [r5, #0]
 800bcb6:	f7f7 ffaf 	bl	8003c18 <_fstat>
 800bcba:	1c43      	adds	r3, r0, #1
 800bcbc:	d102      	bne.n	800bcc4 <_fstat_r+0x1c>
 800bcbe:	682b      	ldr	r3, [r5, #0]
 800bcc0:	b103      	cbz	r3, 800bcc4 <_fstat_r+0x1c>
 800bcc2:	6023      	str	r3, [r4, #0]
 800bcc4:	bd38      	pop	{r3, r4, r5, pc}
 800bcc6:	bf00      	nop
 800bcc8:	20001188 	.word	0x20001188

0800bccc <_isatty_r>:
 800bccc:	b538      	push	{r3, r4, r5, lr}
 800bcce:	4d06      	ldr	r5, [pc, #24]	; (800bce8 <_isatty_r+0x1c>)
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	4608      	mov	r0, r1
 800bcd6:	602b      	str	r3, [r5, #0]
 800bcd8:	f7f7 ffae 	bl	8003c38 <_isatty>
 800bcdc:	1c43      	adds	r3, r0, #1
 800bcde:	d102      	bne.n	800bce6 <_isatty_r+0x1a>
 800bce0:	682b      	ldr	r3, [r5, #0]
 800bce2:	b103      	cbz	r3, 800bce6 <_isatty_r+0x1a>
 800bce4:	6023      	str	r3, [r4, #0]
 800bce6:	bd38      	pop	{r3, r4, r5, pc}
 800bce8:	20001188 	.word	0x20001188
 800bcec:	00000000 	.word	0x00000000

0800bcf0 <cos>:
 800bcf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bcf2:	ec53 2b10 	vmov	r2, r3, d0
 800bcf6:	4826      	ldr	r0, [pc, #152]	; (800bd90 <cos+0xa0>)
 800bcf8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bcfc:	4281      	cmp	r1, r0
 800bcfe:	dc06      	bgt.n	800bd0e <cos+0x1e>
 800bd00:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800bd88 <cos+0x98>
 800bd04:	b005      	add	sp, #20
 800bd06:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd0a:	f001 bc8d 	b.w	800d628 <__kernel_cos>
 800bd0e:	4821      	ldr	r0, [pc, #132]	; (800bd94 <cos+0xa4>)
 800bd10:	4281      	cmp	r1, r0
 800bd12:	dd09      	ble.n	800bd28 <cos+0x38>
 800bd14:	ee10 0a10 	vmov	r0, s0
 800bd18:	4619      	mov	r1, r3
 800bd1a:	f7f4 facd 	bl	80002b8 <__aeabi_dsub>
 800bd1e:	ec41 0b10 	vmov	d0, r0, r1
 800bd22:	b005      	add	sp, #20
 800bd24:	f85d fb04 	ldr.w	pc, [sp], #4
 800bd28:	4668      	mov	r0, sp
 800bd2a:	f001 f9bd 	bl	800d0a8 <__ieee754_rem_pio2>
 800bd2e:	f000 0003 	and.w	r0, r0, #3
 800bd32:	2801      	cmp	r0, #1
 800bd34:	d00b      	beq.n	800bd4e <cos+0x5e>
 800bd36:	2802      	cmp	r0, #2
 800bd38:	d016      	beq.n	800bd68 <cos+0x78>
 800bd3a:	b9e0      	cbnz	r0, 800bd76 <cos+0x86>
 800bd3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bd40:	ed9d 0b00 	vldr	d0, [sp]
 800bd44:	f001 fc70 	bl	800d628 <__kernel_cos>
 800bd48:	ec51 0b10 	vmov	r0, r1, d0
 800bd4c:	e7e7      	b.n	800bd1e <cos+0x2e>
 800bd4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bd52:	ed9d 0b00 	vldr	d0, [sp]
 800bd56:	f002 f87f 	bl	800de58 <__kernel_sin>
 800bd5a:	ec53 2b10 	vmov	r2, r3, d0
 800bd5e:	ee10 0a10 	vmov	r0, s0
 800bd62:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bd66:	e7da      	b.n	800bd1e <cos+0x2e>
 800bd68:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bd6c:	ed9d 0b00 	vldr	d0, [sp]
 800bd70:	f001 fc5a 	bl	800d628 <__kernel_cos>
 800bd74:	e7f1      	b.n	800bd5a <cos+0x6a>
 800bd76:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bd7a:	ed9d 0b00 	vldr	d0, [sp]
 800bd7e:	2001      	movs	r0, #1
 800bd80:	f002 f86a 	bl	800de58 <__kernel_sin>
 800bd84:	e7e0      	b.n	800bd48 <cos+0x58>
 800bd86:	bf00      	nop
	...
 800bd90:	3fe921fb 	.word	0x3fe921fb
 800bd94:	7fefffff 	.word	0x7fefffff

0800bd98 <sin>:
 800bd98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd9a:	ec53 2b10 	vmov	r2, r3, d0
 800bd9e:	4828      	ldr	r0, [pc, #160]	; (800be40 <sin+0xa8>)
 800bda0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bda4:	4281      	cmp	r1, r0
 800bda6:	dc07      	bgt.n	800bdb8 <sin+0x20>
 800bda8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800be38 <sin+0xa0>
 800bdac:	2000      	movs	r0, #0
 800bdae:	b005      	add	sp, #20
 800bdb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdb4:	f002 b850 	b.w	800de58 <__kernel_sin>
 800bdb8:	4822      	ldr	r0, [pc, #136]	; (800be44 <sin+0xac>)
 800bdba:	4281      	cmp	r1, r0
 800bdbc:	dd09      	ble.n	800bdd2 <sin+0x3a>
 800bdbe:	ee10 0a10 	vmov	r0, s0
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	f7f4 fa78 	bl	80002b8 <__aeabi_dsub>
 800bdc8:	ec41 0b10 	vmov	d0, r0, r1
 800bdcc:	b005      	add	sp, #20
 800bdce:	f85d fb04 	ldr.w	pc, [sp], #4
 800bdd2:	4668      	mov	r0, sp
 800bdd4:	f001 f968 	bl	800d0a8 <__ieee754_rem_pio2>
 800bdd8:	f000 0003 	and.w	r0, r0, #3
 800bddc:	2801      	cmp	r0, #1
 800bdde:	d00c      	beq.n	800bdfa <sin+0x62>
 800bde0:	2802      	cmp	r0, #2
 800bde2:	d011      	beq.n	800be08 <sin+0x70>
 800bde4:	b9f0      	cbnz	r0, 800be24 <sin+0x8c>
 800bde6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bdea:	ed9d 0b00 	vldr	d0, [sp]
 800bdee:	2001      	movs	r0, #1
 800bdf0:	f002 f832 	bl	800de58 <__kernel_sin>
 800bdf4:	ec51 0b10 	vmov	r0, r1, d0
 800bdf8:	e7e6      	b.n	800bdc8 <sin+0x30>
 800bdfa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bdfe:	ed9d 0b00 	vldr	d0, [sp]
 800be02:	f001 fc11 	bl	800d628 <__kernel_cos>
 800be06:	e7f5      	b.n	800bdf4 <sin+0x5c>
 800be08:	ed9d 1b02 	vldr	d1, [sp, #8]
 800be0c:	ed9d 0b00 	vldr	d0, [sp]
 800be10:	2001      	movs	r0, #1
 800be12:	f002 f821 	bl	800de58 <__kernel_sin>
 800be16:	ec53 2b10 	vmov	r2, r3, d0
 800be1a:	ee10 0a10 	vmov	r0, s0
 800be1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800be22:	e7d1      	b.n	800bdc8 <sin+0x30>
 800be24:	ed9d 1b02 	vldr	d1, [sp, #8]
 800be28:	ed9d 0b00 	vldr	d0, [sp]
 800be2c:	f001 fbfc 	bl	800d628 <__kernel_cos>
 800be30:	e7f1      	b.n	800be16 <sin+0x7e>
 800be32:	bf00      	nop
 800be34:	f3af 8000 	nop.w
	...
 800be40:	3fe921fb 	.word	0x3fe921fb
 800be44:	7fefffff 	.word	0x7fefffff

0800be48 <acos>:
 800be48:	b538      	push	{r3, r4, r5, lr}
 800be4a:	ed2d 8b02 	vpush	{d8}
 800be4e:	ec55 4b10 	vmov	r4, r5, d0
 800be52:	f000 f8cd 	bl	800bff0 <__ieee754_acos>
 800be56:	4622      	mov	r2, r4
 800be58:	462b      	mov	r3, r5
 800be5a:	4620      	mov	r0, r4
 800be5c:	4629      	mov	r1, r5
 800be5e:	eeb0 8a40 	vmov.f32	s16, s0
 800be62:	eef0 8a60 	vmov.f32	s17, s1
 800be66:	f7f4 fe79 	bl	8000b5c <__aeabi_dcmpun>
 800be6a:	b9a8      	cbnz	r0, 800be98 <acos+0x50>
 800be6c:	ec45 4b10 	vmov	d0, r4, r5
 800be70:	f002 fa82 	bl	800e378 <fabs>
 800be74:	4b0c      	ldr	r3, [pc, #48]	; (800bea8 <acos+0x60>)
 800be76:	ec51 0b10 	vmov	r0, r1, d0
 800be7a:	2200      	movs	r2, #0
 800be7c:	f7f4 fe64 	bl	8000b48 <__aeabi_dcmpgt>
 800be80:	b150      	cbz	r0, 800be98 <acos+0x50>
 800be82:	f7fa fe59 	bl	8006b38 <__errno>
 800be86:	ecbd 8b02 	vpop	{d8}
 800be8a:	2321      	movs	r3, #33	; 0x21
 800be8c:	6003      	str	r3, [r0, #0]
 800be8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be92:	4806      	ldr	r0, [pc, #24]	; (800beac <acos+0x64>)
 800be94:	f7ff b8d8 	b.w	800b048 <nan>
 800be98:	eeb0 0a48 	vmov.f32	s0, s16
 800be9c:	eef0 0a68 	vmov.f32	s1, s17
 800bea0:	ecbd 8b02 	vpop	{d8}
 800bea4:	bd38      	pop	{r3, r4, r5, pc}
 800bea6:	bf00      	nop
 800bea8:	3ff00000 	.word	0x3ff00000
 800beac:	0800ecdb 	.word	0x0800ecdb

0800beb0 <atan2>:
 800beb0:	f000 bafe 	b.w	800c4b0 <__ieee754_atan2>

0800beb4 <pow>:
 800beb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beb6:	ed2d 8b02 	vpush	{d8}
 800beba:	eeb0 8a40 	vmov.f32	s16, s0
 800bebe:	eef0 8a60 	vmov.f32	s17, s1
 800bec2:	ec55 4b11 	vmov	r4, r5, d1
 800bec6:	f000 fbbf 	bl	800c648 <__ieee754_pow>
 800beca:	4622      	mov	r2, r4
 800becc:	462b      	mov	r3, r5
 800bece:	4620      	mov	r0, r4
 800bed0:	4629      	mov	r1, r5
 800bed2:	ec57 6b10 	vmov	r6, r7, d0
 800bed6:	f7f4 fe41 	bl	8000b5c <__aeabi_dcmpun>
 800beda:	2800      	cmp	r0, #0
 800bedc:	d13b      	bne.n	800bf56 <pow+0xa2>
 800bede:	ec51 0b18 	vmov	r0, r1, d8
 800bee2:	2200      	movs	r2, #0
 800bee4:	2300      	movs	r3, #0
 800bee6:	f7f4 fe07 	bl	8000af8 <__aeabi_dcmpeq>
 800beea:	b1b8      	cbz	r0, 800bf1c <pow+0x68>
 800beec:	2200      	movs	r2, #0
 800beee:	2300      	movs	r3, #0
 800bef0:	4620      	mov	r0, r4
 800bef2:	4629      	mov	r1, r5
 800bef4:	f7f4 fe00 	bl	8000af8 <__aeabi_dcmpeq>
 800bef8:	2800      	cmp	r0, #0
 800befa:	d146      	bne.n	800bf8a <pow+0xd6>
 800befc:	ec45 4b10 	vmov	d0, r4, r5
 800bf00:	f002 fa43 	bl	800e38a <finite>
 800bf04:	b338      	cbz	r0, 800bf56 <pow+0xa2>
 800bf06:	2200      	movs	r2, #0
 800bf08:	2300      	movs	r3, #0
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	4629      	mov	r1, r5
 800bf0e:	f7f4 fdfd 	bl	8000b0c <__aeabi_dcmplt>
 800bf12:	b300      	cbz	r0, 800bf56 <pow+0xa2>
 800bf14:	f7fa fe10 	bl	8006b38 <__errno>
 800bf18:	2322      	movs	r3, #34	; 0x22
 800bf1a:	e01b      	b.n	800bf54 <pow+0xa0>
 800bf1c:	ec47 6b10 	vmov	d0, r6, r7
 800bf20:	f002 fa33 	bl	800e38a <finite>
 800bf24:	b9e0      	cbnz	r0, 800bf60 <pow+0xac>
 800bf26:	eeb0 0a48 	vmov.f32	s0, s16
 800bf2a:	eef0 0a68 	vmov.f32	s1, s17
 800bf2e:	f002 fa2c 	bl	800e38a <finite>
 800bf32:	b1a8      	cbz	r0, 800bf60 <pow+0xac>
 800bf34:	ec45 4b10 	vmov	d0, r4, r5
 800bf38:	f002 fa27 	bl	800e38a <finite>
 800bf3c:	b180      	cbz	r0, 800bf60 <pow+0xac>
 800bf3e:	4632      	mov	r2, r6
 800bf40:	463b      	mov	r3, r7
 800bf42:	4630      	mov	r0, r6
 800bf44:	4639      	mov	r1, r7
 800bf46:	f7f4 fe09 	bl	8000b5c <__aeabi_dcmpun>
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	d0e2      	beq.n	800bf14 <pow+0x60>
 800bf4e:	f7fa fdf3 	bl	8006b38 <__errno>
 800bf52:	2321      	movs	r3, #33	; 0x21
 800bf54:	6003      	str	r3, [r0, #0]
 800bf56:	ecbd 8b02 	vpop	{d8}
 800bf5a:	ec47 6b10 	vmov	d0, r6, r7
 800bf5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf60:	2200      	movs	r2, #0
 800bf62:	2300      	movs	r3, #0
 800bf64:	4630      	mov	r0, r6
 800bf66:	4639      	mov	r1, r7
 800bf68:	f7f4 fdc6 	bl	8000af8 <__aeabi_dcmpeq>
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	d0f2      	beq.n	800bf56 <pow+0xa2>
 800bf70:	eeb0 0a48 	vmov.f32	s0, s16
 800bf74:	eef0 0a68 	vmov.f32	s1, s17
 800bf78:	f002 fa07 	bl	800e38a <finite>
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	d0ea      	beq.n	800bf56 <pow+0xa2>
 800bf80:	ec45 4b10 	vmov	d0, r4, r5
 800bf84:	f002 fa01 	bl	800e38a <finite>
 800bf88:	e7c3      	b.n	800bf12 <pow+0x5e>
 800bf8a:	4f01      	ldr	r7, [pc, #4]	; (800bf90 <pow+0xdc>)
 800bf8c:	2600      	movs	r6, #0
 800bf8e:	e7e2      	b.n	800bf56 <pow+0xa2>
 800bf90:	3ff00000 	.word	0x3ff00000

0800bf94 <sqrt>:
 800bf94:	b538      	push	{r3, r4, r5, lr}
 800bf96:	ed2d 8b02 	vpush	{d8}
 800bf9a:	ec55 4b10 	vmov	r4, r5, d0
 800bf9e:	f001 fa8f 	bl	800d4c0 <__ieee754_sqrt>
 800bfa2:	4622      	mov	r2, r4
 800bfa4:	462b      	mov	r3, r5
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	4629      	mov	r1, r5
 800bfaa:	eeb0 8a40 	vmov.f32	s16, s0
 800bfae:	eef0 8a60 	vmov.f32	s17, s1
 800bfb2:	f7f4 fdd3 	bl	8000b5c <__aeabi_dcmpun>
 800bfb6:	b990      	cbnz	r0, 800bfde <sqrt+0x4a>
 800bfb8:	2200      	movs	r2, #0
 800bfba:	2300      	movs	r3, #0
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	4629      	mov	r1, r5
 800bfc0:	f7f4 fda4 	bl	8000b0c <__aeabi_dcmplt>
 800bfc4:	b158      	cbz	r0, 800bfde <sqrt+0x4a>
 800bfc6:	f7fa fdb7 	bl	8006b38 <__errno>
 800bfca:	2321      	movs	r3, #33	; 0x21
 800bfcc:	6003      	str	r3, [r0, #0]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	4610      	mov	r0, r2
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	f7f4 fc51 	bl	800087c <__aeabi_ddiv>
 800bfda:	ec41 0b18 	vmov	d8, r0, r1
 800bfde:	eeb0 0a48 	vmov.f32	s0, s16
 800bfe2:	eef0 0a68 	vmov.f32	s1, s17
 800bfe6:	ecbd 8b02 	vpop	{d8}
 800bfea:	bd38      	pop	{r3, r4, r5, pc}
 800bfec:	0000      	movs	r0, r0
	...

0800bff0 <__ieee754_acos>:
 800bff0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bff4:	ec55 4b10 	vmov	r4, r5, d0
 800bff8:	49b7      	ldr	r1, [pc, #732]	; (800c2d8 <__ieee754_acos+0x2e8>)
 800bffa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bffe:	428b      	cmp	r3, r1
 800c000:	dd1b      	ble.n	800c03a <__ieee754_acos+0x4a>
 800c002:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800c006:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c00a:	4323      	orrs	r3, r4
 800c00c:	d106      	bne.n	800c01c <__ieee754_acos+0x2c>
 800c00e:	2d00      	cmp	r5, #0
 800c010:	f300 8211 	bgt.w	800c436 <__ieee754_acos+0x446>
 800c014:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800c270 <__ieee754_acos+0x280>
 800c018:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c01c:	ee10 2a10 	vmov	r2, s0
 800c020:	462b      	mov	r3, r5
 800c022:	ee10 0a10 	vmov	r0, s0
 800c026:	4629      	mov	r1, r5
 800c028:	f7f4 f946 	bl	80002b8 <__aeabi_dsub>
 800c02c:	4602      	mov	r2, r0
 800c02e:	460b      	mov	r3, r1
 800c030:	f7f4 fc24 	bl	800087c <__aeabi_ddiv>
 800c034:	ec41 0b10 	vmov	d0, r0, r1
 800c038:	e7ee      	b.n	800c018 <__ieee754_acos+0x28>
 800c03a:	49a8      	ldr	r1, [pc, #672]	; (800c2dc <__ieee754_acos+0x2ec>)
 800c03c:	428b      	cmp	r3, r1
 800c03e:	f300 8087 	bgt.w	800c150 <__ieee754_acos+0x160>
 800c042:	4aa7      	ldr	r2, [pc, #668]	; (800c2e0 <__ieee754_acos+0x2f0>)
 800c044:	4293      	cmp	r3, r2
 800c046:	f340 81f9 	ble.w	800c43c <__ieee754_acos+0x44c>
 800c04a:	ee10 2a10 	vmov	r2, s0
 800c04e:	ee10 0a10 	vmov	r0, s0
 800c052:	462b      	mov	r3, r5
 800c054:	4629      	mov	r1, r5
 800c056:	f7f4 fae7 	bl	8000628 <__aeabi_dmul>
 800c05a:	a387      	add	r3, pc, #540	; (adr r3, 800c278 <__ieee754_acos+0x288>)
 800c05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c060:	4606      	mov	r6, r0
 800c062:	460f      	mov	r7, r1
 800c064:	f7f4 fae0 	bl	8000628 <__aeabi_dmul>
 800c068:	a385      	add	r3, pc, #532	; (adr r3, 800c280 <__ieee754_acos+0x290>)
 800c06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06e:	f7f4 f925 	bl	80002bc <__adddf3>
 800c072:	4632      	mov	r2, r6
 800c074:	463b      	mov	r3, r7
 800c076:	f7f4 fad7 	bl	8000628 <__aeabi_dmul>
 800c07a:	a383      	add	r3, pc, #524	; (adr r3, 800c288 <__ieee754_acos+0x298>)
 800c07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c080:	f7f4 f91a 	bl	80002b8 <__aeabi_dsub>
 800c084:	4632      	mov	r2, r6
 800c086:	463b      	mov	r3, r7
 800c088:	f7f4 face 	bl	8000628 <__aeabi_dmul>
 800c08c:	a380      	add	r3, pc, #512	; (adr r3, 800c290 <__ieee754_acos+0x2a0>)
 800c08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c092:	f7f4 f913 	bl	80002bc <__adddf3>
 800c096:	4632      	mov	r2, r6
 800c098:	463b      	mov	r3, r7
 800c09a:	f7f4 fac5 	bl	8000628 <__aeabi_dmul>
 800c09e:	a37e      	add	r3, pc, #504	; (adr r3, 800c298 <__ieee754_acos+0x2a8>)
 800c0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a4:	f7f4 f908 	bl	80002b8 <__aeabi_dsub>
 800c0a8:	4632      	mov	r2, r6
 800c0aa:	463b      	mov	r3, r7
 800c0ac:	f7f4 fabc 	bl	8000628 <__aeabi_dmul>
 800c0b0:	a37b      	add	r3, pc, #492	; (adr r3, 800c2a0 <__ieee754_acos+0x2b0>)
 800c0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b6:	f7f4 f901 	bl	80002bc <__adddf3>
 800c0ba:	4632      	mov	r2, r6
 800c0bc:	463b      	mov	r3, r7
 800c0be:	f7f4 fab3 	bl	8000628 <__aeabi_dmul>
 800c0c2:	a379      	add	r3, pc, #484	; (adr r3, 800c2a8 <__ieee754_acos+0x2b8>)
 800c0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c8:	4680      	mov	r8, r0
 800c0ca:	4689      	mov	r9, r1
 800c0cc:	4630      	mov	r0, r6
 800c0ce:	4639      	mov	r1, r7
 800c0d0:	f7f4 faaa 	bl	8000628 <__aeabi_dmul>
 800c0d4:	a376      	add	r3, pc, #472	; (adr r3, 800c2b0 <__ieee754_acos+0x2c0>)
 800c0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0da:	f7f4 f8ed 	bl	80002b8 <__aeabi_dsub>
 800c0de:	4632      	mov	r2, r6
 800c0e0:	463b      	mov	r3, r7
 800c0e2:	f7f4 faa1 	bl	8000628 <__aeabi_dmul>
 800c0e6:	a374      	add	r3, pc, #464	; (adr r3, 800c2b8 <__ieee754_acos+0x2c8>)
 800c0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ec:	f7f4 f8e6 	bl	80002bc <__adddf3>
 800c0f0:	4632      	mov	r2, r6
 800c0f2:	463b      	mov	r3, r7
 800c0f4:	f7f4 fa98 	bl	8000628 <__aeabi_dmul>
 800c0f8:	a371      	add	r3, pc, #452	; (adr r3, 800c2c0 <__ieee754_acos+0x2d0>)
 800c0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fe:	f7f4 f8db 	bl	80002b8 <__aeabi_dsub>
 800c102:	4632      	mov	r2, r6
 800c104:	463b      	mov	r3, r7
 800c106:	f7f4 fa8f 	bl	8000628 <__aeabi_dmul>
 800c10a:	4b76      	ldr	r3, [pc, #472]	; (800c2e4 <__ieee754_acos+0x2f4>)
 800c10c:	2200      	movs	r2, #0
 800c10e:	f7f4 f8d5 	bl	80002bc <__adddf3>
 800c112:	4602      	mov	r2, r0
 800c114:	460b      	mov	r3, r1
 800c116:	4640      	mov	r0, r8
 800c118:	4649      	mov	r1, r9
 800c11a:	f7f4 fbaf 	bl	800087c <__aeabi_ddiv>
 800c11e:	4622      	mov	r2, r4
 800c120:	462b      	mov	r3, r5
 800c122:	f7f4 fa81 	bl	8000628 <__aeabi_dmul>
 800c126:	4602      	mov	r2, r0
 800c128:	460b      	mov	r3, r1
 800c12a:	a167      	add	r1, pc, #412	; (adr r1, 800c2c8 <__ieee754_acos+0x2d8>)
 800c12c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c130:	f7f4 f8c2 	bl	80002b8 <__aeabi_dsub>
 800c134:	4602      	mov	r2, r0
 800c136:	460b      	mov	r3, r1
 800c138:	4620      	mov	r0, r4
 800c13a:	4629      	mov	r1, r5
 800c13c:	f7f4 f8bc 	bl	80002b8 <__aeabi_dsub>
 800c140:	4602      	mov	r2, r0
 800c142:	460b      	mov	r3, r1
 800c144:	a162      	add	r1, pc, #392	; (adr r1, 800c2d0 <__ieee754_acos+0x2e0>)
 800c146:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c14a:	f7f4 f8b5 	bl	80002b8 <__aeabi_dsub>
 800c14e:	e771      	b.n	800c034 <__ieee754_acos+0x44>
 800c150:	2d00      	cmp	r5, #0
 800c152:	f280 80cb 	bge.w	800c2ec <__ieee754_acos+0x2fc>
 800c156:	ee10 0a10 	vmov	r0, s0
 800c15a:	4b62      	ldr	r3, [pc, #392]	; (800c2e4 <__ieee754_acos+0x2f4>)
 800c15c:	2200      	movs	r2, #0
 800c15e:	4629      	mov	r1, r5
 800c160:	f7f4 f8ac 	bl	80002bc <__adddf3>
 800c164:	4b60      	ldr	r3, [pc, #384]	; (800c2e8 <__ieee754_acos+0x2f8>)
 800c166:	2200      	movs	r2, #0
 800c168:	f7f4 fa5e 	bl	8000628 <__aeabi_dmul>
 800c16c:	a342      	add	r3, pc, #264	; (adr r3, 800c278 <__ieee754_acos+0x288>)
 800c16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c172:	4604      	mov	r4, r0
 800c174:	460d      	mov	r5, r1
 800c176:	f7f4 fa57 	bl	8000628 <__aeabi_dmul>
 800c17a:	a341      	add	r3, pc, #260	; (adr r3, 800c280 <__ieee754_acos+0x290>)
 800c17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c180:	f7f4 f89c 	bl	80002bc <__adddf3>
 800c184:	4622      	mov	r2, r4
 800c186:	462b      	mov	r3, r5
 800c188:	f7f4 fa4e 	bl	8000628 <__aeabi_dmul>
 800c18c:	a33e      	add	r3, pc, #248	; (adr r3, 800c288 <__ieee754_acos+0x298>)
 800c18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c192:	f7f4 f891 	bl	80002b8 <__aeabi_dsub>
 800c196:	4622      	mov	r2, r4
 800c198:	462b      	mov	r3, r5
 800c19a:	f7f4 fa45 	bl	8000628 <__aeabi_dmul>
 800c19e:	a33c      	add	r3, pc, #240	; (adr r3, 800c290 <__ieee754_acos+0x2a0>)
 800c1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a4:	f7f4 f88a 	bl	80002bc <__adddf3>
 800c1a8:	4622      	mov	r2, r4
 800c1aa:	462b      	mov	r3, r5
 800c1ac:	f7f4 fa3c 	bl	8000628 <__aeabi_dmul>
 800c1b0:	a339      	add	r3, pc, #228	; (adr r3, 800c298 <__ieee754_acos+0x2a8>)
 800c1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b6:	f7f4 f87f 	bl	80002b8 <__aeabi_dsub>
 800c1ba:	4622      	mov	r2, r4
 800c1bc:	462b      	mov	r3, r5
 800c1be:	f7f4 fa33 	bl	8000628 <__aeabi_dmul>
 800c1c2:	a337      	add	r3, pc, #220	; (adr r3, 800c2a0 <__ieee754_acos+0x2b0>)
 800c1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c8:	f7f4 f878 	bl	80002bc <__adddf3>
 800c1cc:	4622      	mov	r2, r4
 800c1ce:	462b      	mov	r3, r5
 800c1d0:	f7f4 fa2a 	bl	8000628 <__aeabi_dmul>
 800c1d4:	ec45 4b10 	vmov	d0, r4, r5
 800c1d8:	4680      	mov	r8, r0
 800c1da:	4689      	mov	r9, r1
 800c1dc:	f001 f970 	bl	800d4c0 <__ieee754_sqrt>
 800c1e0:	a331      	add	r3, pc, #196	; (adr r3, 800c2a8 <__ieee754_acos+0x2b8>)
 800c1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	4629      	mov	r1, r5
 800c1ea:	ec57 6b10 	vmov	r6, r7, d0
 800c1ee:	f7f4 fa1b 	bl	8000628 <__aeabi_dmul>
 800c1f2:	a32f      	add	r3, pc, #188	; (adr r3, 800c2b0 <__ieee754_acos+0x2c0>)
 800c1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f8:	f7f4 f85e 	bl	80002b8 <__aeabi_dsub>
 800c1fc:	4622      	mov	r2, r4
 800c1fe:	462b      	mov	r3, r5
 800c200:	f7f4 fa12 	bl	8000628 <__aeabi_dmul>
 800c204:	a32c      	add	r3, pc, #176	; (adr r3, 800c2b8 <__ieee754_acos+0x2c8>)
 800c206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20a:	f7f4 f857 	bl	80002bc <__adddf3>
 800c20e:	4622      	mov	r2, r4
 800c210:	462b      	mov	r3, r5
 800c212:	f7f4 fa09 	bl	8000628 <__aeabi_dmul>
 800c216:	a32a      	add	r3, pc, #168	; (adr r3, 800c2c0 <__ieee754_acos+0x2d0>)
 800c218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21c:	f7f4 f84c 	bl	80002b8 <__aeabi_dsub>
 800c220:	4622      	mov	r2, r4
 800c222:	462b      	mov	r3, r5
 800c224:	f7f4 fa00 	bl	8000628 <__aeabi_dmul>
 800c228:	4b2e      	ldr	r3, [pc, #184]	; (800c2e4 <__ieee754_acos+0x2f4>)
 800c22a:	2200      	movs	r2, #0
 800c22c:	f7f4 f846 	bl	80002bc <__adddf3>
 800c230:	4602      	mov	r2, r0
 800c232:	460b      	mov	r3, r1
 800c234:	4640      	mov	r0, r8
 800c236:	4649      	mov	r1, r9
 800c238:	f7f4 fb20 	bl	800087c <__aeabi_ddiv>
 800c23c:	4632      	mov	r2, r6
 800c23e:	463b      	mov	r3, r7
 800c240:	f7f4 f9f2 	bl	8000628 <__aeabi_dmul>
 800c244:	a320      	add	r3, pc, #128	; (adr r3, 800c2c8 <__ieee754_acos+0x2d8>)
 800c246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24a:	f7f4 f835 	bl	80002b8 <__aeabi_dsub>
 800c24e:	4632      	mov	r2, r6
 800c250:	463b      	mov	r3, r7
 800c252:	f7f4 f833 	bl	80002bc <__adddf3>
 800c256:	4602      	mov	r2, r0
 800c258:	460b      	mov	r3, r1
 800c25a:	f7f4 f82f 	bl	80002bc <__adddf3>
 800c25e:	4602      	mov	r2, r0
 800c260:	460b      	mov	r3, r1
 800c262:	a103      	add	r1, pc, #12	; (adr r1, 800c270 <__ieee754_acos+0x280>)
 800c264:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c268:	e76f      	b.n	800c14a <__ieee754_acos+0x15a>
 800c26a:	bf00      	nop
 800c26c:	f3af 8000 	nop.w
 800c270:	54442d18 	.word	0x54442d18
 800c274:	400921fb 	.word	0x400921fb
 800c278:	0dfdf709 	.word	0x0dfdf709
 800c27c:	3f023de1 	.word	0x3f023de1
 800c280:	7501b288 	.word	0x7501b288
 800c284:	3f49efe0 	.word	0x3f49efe0
 800c288:	b5688f3b 	.word	0xb5688f3b
 800c28c:	3fa48228 	.word	0x3fa48228
 800c290:	0e884455 	.word	0x0e884455
 800c294:	3fc9c155 	.word	0x3fc9c155
 800c298:	03eb6f7d 	.word	0x03eb6f7d
 800c29c:	3fd4d612 	.word	0x3fd4d612
 800c2a0:	55555555 	.word	0x55555555
 800c2a4:	3fc55555 	.word	0x3fc55555
 800c2a8:	b12e9282 	.word	0xb12e9282
 800c2ac:	3fb3b8c5 	.word	0x3fb3b8c5
 800c2b0:	1b8d0159 	.word	0x1b8d0159
 800c2b4:	3fe6066c 	.word	0x3fe6066c
 800c2b8:	9c598ac8 	.word	0x9c598ac8
 800c2bc:	40002ae5 	.word	0x40002ae5
 800c2c0:	1c8a2d4b 	.word	0x1c8a2d4b
 800c2c4:	40033a27 	.word	0x40033a27
 800c2c8:	33145c07 	.word	0x33145c07
 800c2cc:	3c91a626 	.word	0x3c91a626
 800c2d0:	54442d18 	.word	0x54442d18
 800c2d4:	3ff921fb 	.word	0x3ff921fb
 800c2d8:	3fefffff 	.word	0x3fefffff
 800c2dc:	3fdfffff 	.word	0x3fdfffff
 800c2e0:	3c600000 	.word	0x3c600000
 800c2e4:	3ff00000 	.word	0x3ff00000
 800c2e8:	3fe00000 	.word	0x3fe00000
 800c2ec:	ee10 2a10 	vmov	r2, s0
 800c2f0:	462b      	mov	r3, r5
 800c2f2:	496d      	ldr	r1, [pc, #436]	; (800c4a8 <__ieee754_acos+0x4b8>)
 800c2f4:	2000      	movs	r0, #0
 800c2f6:	f7f3 ffdf 	bl	80002b8 <__aeabi_dsub>
 800c2fa:	4b6c      	ldr	r3, [pc, #432]	; (800c4ac <__ieee754_acos+0x4bc>)
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	f7f4 f993 	bl	8000628 <__aeabi_dmul>
 800c302:	4604      	mov	r4, r0
 800c304:	460d      	mov	r5, r1
 800c306:	ec45 4b10 	vmov	d0, r4, r5
 800c30a:	f001 f8d9 	bl	800d4c0 <__ieee754_sqrt>
 800c30e:	a34e      	add	r3, pc, #312	; (adr r3, 800c448 <__ieee754_acos+0x458>)
 800c310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c314:	4620      	mov	r0, r4
 800c316:	4629      	mov	r1, r5
 800c318:	ec59 8b10 	vmov	r8, r9, d0
 800c31c:	f7f4 f984 	bl	8000628 <__aeabi_dmul>
 800c320:	a34b      	add	r3, pc, #300	; (adr r3, 800c450 <__ieee754_acos+0x460>)
 800c322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c326:	f7f3 ffc9 	bl	80002bc <__adddf3>
 800c32a:	4622      	mov	r2, r4
 800c32c:	462b      	mov	r3, r5
 800c32e:	f7f4 f97b 	bl	8000628 <__aeabi_dmul>
 800c332:	a349      	add	r3, pc, #292	; (adr r3, 800c458 <__ieee754_acos+0x468>)
 800c334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c338:	f7f3 ffbe 	bl	80002b8 <__aeabi_dsub>
 800c33c:	4622      	mov	r2, r4
 800c33e:	462b      	mov	r3, r5
 800c340:	f7f4 f972 	bl	8000628 <__aeabi_dmul>
 800c344:	a346      	add	r3, pc, #280	; (adr r3, 800c460 <__ieee754_acos+0x470>)
 800c346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34a:	f7f3 ffb7 	bl	80002bc <__adddf3>
 800c34e:	4622      	mov	r2, r4
 800c350:	462b      	mov	r3, r5
 800c352:	f7f4 f969 	bl	8000628 <__aeabi_dmul>
 800c356:	a344      	add	r3, pc, #272	; (adr r3, 800c468 <__ieee754_acos+0x478>)
 800c358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35c:	f7f3 ffac 	bl	80002b8 <__aeabi_dsub>
 800c360:	4622      	mov	r2, r4
 800c362:	462b      	mov	r3, r5
 800c364:	f7f4 f960 	bl	8000628 <__aeabi_dmul>
 800c368:	a341      	add	r3, pc, #260	; (adr r3, 800c470 <__ieee754_acos+0x480>)
 800c36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36e:	f7f3 ffa5 	bl	80002bc <__adddf3>
 800c372:	4622      	mov	r2, r4
 800c374:	462b      	mov	r3, r5
 800c376:	f7f4 f957 	bl	8000628 <__aeabi_dmul>
 800c37a:	a33f      	add	r3, pc, #252	; (adr r3, 800c478 <__ieee754_acos+0x488>)
 800c37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c380:	4682      	mov	sl, r0
 800c382:	468b      	mov	fp, r1
 800c384:	4620      	mov	r0, r4
 800c386:	4629      	mov	r1, r5
 800c388:	f7f4 f94e 	bl	8000628 <__aeabi_dmul>
 800c38c:	a33c      	add	r3, pc, #240	; (adr r3, 800c480 <__ieee754_acos+0x490>)
 800c38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c392:	f7f3 ff91 	bl	80002b8 <__aeabi_dsub>
 800c396:	4622      	mov	r2, r4
 800c398:	462b      	mov	r3, r5
 800c39a:	f7f4 f945 	bl	8000628 <__aeabi_dmul>
 800c39e:	a33a      	add	r3, pc, #232	; (adr r3, 800c488 <__ieee754_acos+0x498>)
 800c3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a4:	f7f3 ff8a 	bl	80002bc <__adddf3>
 800c3a8:	4622      	mov	r2, r4
 800c3aa:	462b      	mov	r3, r5
 800c3ac:	f7f4 f93c 	bl	8000628 <__aeabi_dmul>
 800c3b0:	a337      	add	r3, pc, #220	; (adr r3, 800c490 <__ieee754_acos+0x4a0>)
 800c3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b6:	f7f3 ff7f 	bl	80002b8 <__aeabi_dsub>
 800c3ba:	4622      	mov	r2, r4
 800c3bc:	462b      	mov	r3, r5
 800c3be:	f7f4 f933 	bl	8000628 <__aeabi_dmul>
 800c3c2:	4b39      	ldr	r3, [pc, #228]	; (800c4a8 <__ieee754_acos+0x4b8>)
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f7f3 ff79 	bl	80002bc <__adddf3>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	460b      	mov	r3, r1
 800c3ce:	4650      	mov	r0, sl
 800c3d0:	4659      	mov	r1, fp
 800c3d2:	f7f4 fa53 	bl	800087c <__aeabi_ddiv>
 800c3d6:	4642      	mov	r2, r8
 800c3d8:	464b      	mov	r3, r9
 800c3da:	f7f4 f925 	bl	8000628 <__aeabi_dmul>
 800c3de:	2600      	movs	r6, #0
 800c3e0:	4682      	mov	sl, r0
 800c3e2:	468b      	mov	fp, r1
 800c3e4:	4632      	mov	r2, r6
 800c3e6:	464b      	mov	r3, r9
 800c3e8:	4630      	mov	r0, r6
 800c3ea:	4649      	mov	r1, r9
 800c3ec:	f7f4 f91c 	bl	8000628 <__aeabi_dmul>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	4629      	mov	r1, r5
 800c3f8:	f7f3 ff5e 	bl	80002b8 <__aeabi_dsub>
 800c3fc:	4632      	mov	r2, r6
 800c3fe:	4604      	mov	r4, r0
 800c400:	460d      	mov	r5, r1
 800c402:	464b      	mov	r3, r9
 800c404:	4640      	mov	r0, r8
 800c406:	4649      	mov	r1, r9
 800c408:	f7f3 ff58 	bl	80002bc <__adddf3>
 800c40c:	4602      	mov	r2, r0
 800c40e:	460b      	mov	r3, r1
 800c410:	4620      	mov	r0, r4
 800c412:	4629      	mov	r1, r5
 800c414:	f7f4 fa32 	bl	800087c <__aeabi_ddiv>
 800c418:	4602      	mov	r2, r0
 800c41a:	460b      	mov	r3, r1
 800c41c:	4650      	mov	r0, sl
 800c41e:	4659      	mov	r1, fp
 800c420:	f7f3 ff4c 	bl	80002bc <__adddf3>
 800c424:	4632      	mov	r2, r6
 800c426:	464b      	mov	r3, r9
 800c428:	f7f3 ff48 	bl	80002bc <__adddf3>
 800c42c:	4602      	mov	r2, r0
 800c42e:	460b      	mov	r3, r1
 800c430:	f7f3 ff44 	bl	80002bc <__adddf3>
 800c434:	e5fe      	b.n	800c034 <__ieee754_acos+0x44>
 800c436:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800c498 <__ieee754_acos+0x4a8>
 800c43a:	e5ed      	b.n	800c018 <__ieee754_acos+0x28>
 800c43c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800c4a0 <__ieee754_acos+0x4b0>
 800c440:	e5ea      	b.n	800c018 <__ieee754_acos+0x28>
 800c442:	bf00      	nop
 800c444:	f3af 8000 	nop.w
 800c448:	0dfdf709 	.word	0x0dfdf709
 800c44c:	3f023de1 	.word	0x3f023de1
 800c450:	7501b288 	.word	0x7501b288
 800c454:	3f49efe0 	.word	0x3f49efe0
 800c458:	b5688f3b 	.word	0xb5688f3b
 800c45c:	3fa48228 	.word	0x3fa48228
 800c460:	0e884455 	.word	0x0e884455
 800c464:	3fc9c155 	.word	0x3fc9c155
 800c468:	03eb6f7d 	.word	0x03eb6f7d
 800c46c:	3fd4d612 	.word	0x3fd4d612
 800c470:	55555555 	.word	0x55555555
 800c474:	3fc55555 	.word	0x3fc55555
 800c478:	b12e9282 	.word	0xb12e9282
 800c47c:	3fb3b8c5 	.word	0x3fb3b8c5
 800c480:	1b8d0159 	.word	0x1b8d0159
 800c484:	3fe6066c 	.word	0x3fe6066c
 800c488:	9c598ac8 	.word	0x9c598ac8
 800c48c:	40002ae5 	.word	0x40002ae5
 800c490:	1c8a2d4b 	.word	0x1c8a2d4b
 800c494:	40033a27 	.word	0x40033a27
	...
 800c4a0:	54442d18 	.word	0x54442d18
 800c4a4:	3ff921fb 	.word	0x3ff921fb
 800c4a8:	3ff00000 	.word	0x3ff00000
 800c4ac:	3fe00000 	.word	0x3fe00000

0800c4b0 <__ieee754_atan2>:
 800c4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4b4:	ec57 6b11 	vmov	r6, r7, d1
 800c4b8:	4273      	negs	r3, r6
 800c4ba:	f8df e184 	ldr.w	lr, [pc, #388]	; 800c640 <__ieee754_atan2+0x190>
 800c4be:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c4c2:	4333      	orrs	r3, r6
 800c4c4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c4c8:	4573      	cmp	r3, lr
 800c4ca:	ec51 0b10 	vmov	r0, r1, d0
 800c4ce:	ee11 8a10 	vmov	r8, s2
 800c4d2:	d80a      	bhi.n	800c4ea <__ieee754_atan2+0x3a>
 800c4d4:	4244      	negs	r4, r0
 800c4d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c4da:	4304      	orrs	r4, r0
 800c4dc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c4e0:	4574      	cmp	r4, lr
 800c4e2:	ee10 9a10 	vmov	r9, s0
 800c4e6:	468c      	mov	ip, r1
 800c4e8:	d907      	bls.n	800c4fa <__ieee754_atan2+0x4a>
 800c4ea:	4632      	mov	r2, r6
 800c4ec:	463b      	mov	r3, r7
 800c4ee:	f7f3 fee5 	bl	80002bc <__adddf3>
 800c4f2:	ec41 0b10 	vmov	d0, r0, r1
 800c4f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4fa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c4fe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c502:	4334      	orrs	r4, r6
 800c504:	d103      	bne.n	800c50e <__ieee754_atan2+0x5e>
 800c506:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c50a:	f001 bd95 	b.w	800e038 <atan>
 800c50e:	17bc      	asrs	r4, r7, #30
 800c510:	f004 0402 	and.w	r4, r4, #2
 800c514:	ea53 0909 	orrs.w	r9, r3, r9
 800c518:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c51c:	d107      	bne.n	800c52e <__ieee754_atan2+0x7e>
 800c51e:	2c02      	cmp	r4, #2
 800c520:	d060      	beq.n	800c5e4 <__ieee754_atan2+0x134>
 800c522:	2c03      	cmp	r4, #3
 800c524:	d1e5      	bne.n	800c4f2 <__ieee754_atan2+0x42>
 800c526:	a142      	add	r1, pc, #264	; (adr r1, 800c630 <__ieee754_atan2+0x180>)
 800c528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c52c:	e7e1      	b.n	800c4f2 <__ieee754_atan2+0x42>
 800c52e:	ea52 0808 	orrs.w	r8, r2, r8
 800c532:	d106      	bne.n	800c542 <__ieee754_atan2+0x92>
 800c534:	f1bc 0f00 	cmp.w	ip, #0
 800c538:	da5f      	bge.n	800c5fa <__ieee754_atan2+0x14a>
 800c53a:	a13f      	add	r1, pc, #252	; (adr r1, 800c638 <__ieee754_atan2+0x188>)
 800c53c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c540:	e7d7      	b.n	800c4f2 <__ieee754_atan2+0x42>
 800c542:	4572      	cmp	r2, lr
 800c544:	d10f      	bne.n	800c566 <__ieee754_atan2+0xb6>
 800c546:	4293      	cmp	r3, r2
 800c548:	f104 34ff 	add.w	r4, r4, #4294967295
 800c54c:	d107      	bne.n	800c55e <__ieee754_atan2+0xae>
 800c54e:	2c02      	cmp	r4, #2
 800c550:	d84c      	bhi.n	800c5ec <__ieee754_atan2+0x13c>
 800c552:	4b35      	ldr	r3, [pc, #212]	; (800c628 <__ieee754_atan2+0x178>)
 800c554:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c558:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c55c:	e7c9      	b.n	800c4f2 <__ieee754_atan2+0x42>
 800c55e:	2c02      	cmp	r4, #2
 800c560:	d848      	bhi.n	800c5f4 <__ieee754_atan2+0x144>
 800c562:	4b32      	ldr	r3, [pc, #200]	; (800c62c <__ieee754_atan2+0x17c>)
 800c564:	e7f6      	b.n	800c554 <__ieee754_atan2+0xa4>
 800c566:	4573      	cmp	r3, lr
 800c568:	d0e4      	beq.n	800c534 <__ieee754_atan2+0x84>
 800c56a:	1a9b      	subs	r3, r3, r2
 800c56c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c570:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c574:	da1e      	bge.n	800c5b4 <__ieee754_atan2+0x104>
 800c576:	2f00      	cmp	r7, #0
 800c578:	da01      	bge.n	800c57e <__ieee754_atan2+0xce>
 800c57a:	323c      	adds	r2, #60	; 0x3c
 800c57c:	db1e      	blt.n	800c5bc <__ieee754_atan2+0x10c>
 800c57e:	4632      	mov	r2, r6
 800c580:	463b      	mov	r3, r7
 800c582:	f7f4 f97b 	bl	800087c <__aeabi_ddiv>
 800c586:	ec41 0b10 	vmov	d0, r0, r1
 800c58a:	f001 fef5 	bl	800e378 <fabs>
 800c58e:	f001 fd53 	bl	800e038 <atan>
 800c592:	ec51 0b10 	vmov	r0, r1, d0
 800c596:	2c01      	cmp	r4, #1
 800c598:	d013      	beq.n	800c5c2 <__ieee754_atan2+0x112>
 800c59a:	2c02      	cmp	r4, #2
 800c59c:	d015      	beq.n	800c5ca <__ieee754_atan2+0x11a>
 800c59e:	2c00      	cmp	r4, #0
 800c5a0:	d0a7      	beq.n	800c4f2 <__ieee754_atan2+0x42>
 800c5a2:	a319      	add	r3, pc, #100	; (adr r3, 800c608 <__ieee754_atan2+0x158>)
 800c5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a8:	f7f3 fe86 	bl	80002b8 <__aeabi_dsub>
 800c5ac:	a318      	add	r3, pc, #96	; (adr r3, 800c610 <__ieee754_atan2+0x160>)
 800c5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b2:	e014      	b.n	800c5de <__ieee754_atan2+0x12e>
 800c5b4:	a118      	add	r1, pc, #96	; (adr r1, 800c618 <__ieee754_atan2+0x168>)
 800c5b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5ba:	e7ec      	b.n	800c596 <__ieee754_atan2+0xe6>
 800c5bc:	2000      	movs	r0, #0
 800c5be:	2100      	movs	r1, #0
 800c5c0:	e7e9      	b.n	800c596 <__ieee754_atan2+0xe6>
 800c5c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	e793      	b.n	800c4f2 <__ieee754_atan2+0x42>
 800c5ca:	a30f      	add	r3, pc, #60	; (adr r3, 800c608 <__ieee754_atan2+0x158>)
 800c5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d0:	f7f3 fe72 	bl	80002b8 <__aeabi_dsub>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	460b      	mov	r3, r1
 800c5d8:	a10d      	add	r1, pc, #52	; (adr r1, 800c610 <__ieee754_atan2+0x160>)
 800c5da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5de:	f7f3 fe6b 	bl	80002b8 <__aeabi_dsub>
 800c5e2:	e786      	b.n	800c4f2 <__ieee754_atan2+0x42>
 800c5e4:	a10a      	add	r1, pc, #40	; (adr r1, 800c610 <__ieee754_atan2+0x160>)
 800c5e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5ea:	e782      	b.n	800c4f2 <__ieee754_atan2+0x42>
 800c5ec:	a10c      	add	r1, pc, #48	; (adr r1, 800c620 <__ieee754_atan2+0x170>)
 800c5ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5f2:	e77e      	b.n	800c4f2 <__ieee754_atan2+0x42>
 800c5f4:	2000      	movs	r0, #0
 800c5f6:	2100      	movs	r1, #0
 800c5f8:	e77b      	b.n	800c4f2 <__ieee754_atan2+0x42>
 800c5fa:	a107      	add	r1, pc, #28	; (adr r1, 800c618 <__ieee754_atan2+0x168>)
 800c5fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c600:	e777      	b.n	800c4f2 <__ieee754_atan2+0x42>
 800c602:	bf00      	nop
 800c604:	f3af 8000 	nop.w
 800c608:	33145c07 	.word	0x33145c07
 800c60c:	3ca1a626 	.word	0x3ca1a626
 800c610:	54442d18 	.word	0x54442d18
 800c614:	400921fb 	.word	0x400921fb
 800c618:	54442d18 	.word	0x54442d18
 800c61c:	3ff921fb 	.word	0x3ff921fb
 800c620:	54442d18 	.word	0x54442d18
 800c624:	3fe921fb 	.word	0x3fe921fb
 800c628:	0800ed40 	.word	0x0800ed40
 800c62c:	0800ed58 	.word	0x0800ed58
 800c630:	54442d18 	.word	0x54442d18
 800c634:	c00921fb 	.word	0xc00921fb
 800c638:	54442d18 	.word	0x54442d18
 800c63c:	bff921fb 	.word	0xbff921fb
 800c640:	7ff00000 	.word	0x7ff00000
 800c644:	00000000 	.word	0x00000000

0800c648 <__ieee754_pow>:
 800c648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c64c:	ed2d 8b06 	vpush	{d8-d10}
 800c650:	b089      	sub	sp, #36	; 0x24
 800c652:	ed8d 1b00 	vstr	d1, [sp]
 800c656:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c65a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c65e:	ea58 0102 	orrs.w	r1, r8, r2
 800c662:	ec57 6b10 	vmov	r6, r7, d0
 800c666:	d115      	bne.n	800c694 <__ieee754_pow+0x4c>
 800c668:	19b3      	adds	r3, r6, r6
 800c66a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c66e:	4152      	adcs	r2, r2
 800c670:	4299      	cmp	r1, r3
 800c672:	4b89      	ldr	r3, [pc, #548]	; (800c898 <__ieee754_pow+0x250>)
 800c674:	4193      	sbcs	r3, r2
 800c676:	f080 84d2 	bcs.w	800d01e <__ieee754_pow+0x9d6>
 800c67a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c67e:	4630      	mov	r0, r6
 800c680:	4639      	mov	r1, r7
 800c682:	f7f3 fe1b 	bl	80002bc <__adddf3>
 800c686:	ec41 0b10 	vmov	d0, r0, r1
 800c68a:	b009      	add	sp, #36	; 0x24
 800c68c:	ecbd 8b06 	vpop	{d8-d10}
 800c690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c694:	4b81      	ldr	r3, [pc, #516]	; (800c89c <__ieee754_pow+0x254>)
 800c696:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c69a:	429c      	cmp	r4, r3
 800c69c:	ee10 aa10 	vmov	sl, s0
 800c6a0:	463d      	mov	r5, r7
 800c6a2:	dc06      	bgt.n	800c6b2 <__ieee754_pow+0x6a>
 800c6a4:	d101      	bne.n	800c6aa <__ieee754_pow+0x62>
 800c6a6:	2e00      	cmp	r6, #0
 800c6a8:	d1e7      	bne.n	800c67a <__ieee754_pow+0x32>
 800c6aa:	4598      	cmp	r8, r3
 800c6ac:	dc01      	bgt.n	800c6b2 <__ieee754_pow+0x6a>
 800c6ae:	d10f      	bne.n	800c6d0 <__ieee754_pow+0x88>
 800c6b0:	b172      	cbz	r2, 800c6d0 <__ieee754_pow+0x88>
 800c6b2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c6b6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c6ba:	ea55 050a 	orrs.w	r5, r5, sl
 800c6be:	d1dc      	bne.n	800c67a <__ieee754_pow+0x32>
 800c6c0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c6c4:	18db      	adds	r3, r3, r3
 800c6c6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c6ca:	4152      	adcs	r2, r2
 800c6cc:	429d      	cmp	r5, r3
 800c6ce:	e7d0      	b.n	800c672 <__ieee754_pow+0x2a>
 800c6d0:	2d00      	cmp	r5, #0
 800c6d2:	da3b      	bge.n	800c74c <__ieee754_pow+0x104>
 800c6d4:	4b72      	ldr	r3, [pc, #456]	; (800c8a0 <__ieee754_pow+0x258>)
 800c6d6:	4598      	cmp	r8, r3
 800c6d8:	dc51      	bgt.n	800c77e <__ieee754_pow+0x136>
 800c6da:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c6de:	4598      	cmp	r8, r3
 800c6e0:	f340 84ac 	ble.w	800d03c <__ieee754_pow+0x9f4>
 800c6e4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c6e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c6ec:	2b14      	cmp	r3, #20
 800c6ee:	dd0f      	ble.n	800c710 <__ieee754_pow+0xc8>
 800c6f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c6f4:	fa22 f103 	lsr.w	r1, r2, r3
 800c6f8:	fa01 f303 	lsl.w	r3, r1, r3
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	f040 849d 	bne.w	800d03c <__ieee754_pow+0x9f4>
 800c702:	f001 0101 	and.w	r1, r1, #1
 800c706:	f1c1 0302 	rsb	r3, r1, #2
 800c70a:	9304      	str	r3, [sp, #16]
 800c70c:	b182      	cbz	r2, 800c730 <__ieee754_pow+0xe8>
 800c70e:	e05f      	b.n	800c7d0 <__ieee754_pow+0x188>
 800c710:	2a00      	cmp	r2, #0
 800c712:	d15b      	bne.n	800c7cc <__ieee754_pow+0x184>
 800c714:	f1c3 0314 	rsb	r3, r3, #20
 800c718:	fa48 f103 	asr.w	r1, r8, r3
 800c71c:	fa01 f303 	lsl.w	r3, r1, r3
 800c720:	4543      	cmp	r3, r8
 800c722:	f040 8488 	bne.w	800d036 <__ieee754_pow+0x9ee>
 800c726:	f001 0101 	and.w	r1, r1, #1
 800c72a:	f1c1 0302 	rsb	r3, r1, #2
 800c72e:	9304      	str	r3, [sp, #16]
 800c730:	4b5c      	ldr	r3, [pc, #368]	; (800c8a4 <__ieee754_pow+0x25c>)
 800c732:	4598      	cmp	r8, r3
 800c734:	d132      	bne.n	800c79c <__ieee754_pow+0x154>
 800c736:	f1b9 0f00 	cmp.w	r9, #0
 800c73a:	f280 8478 	bge.w	800d02e <__ieee754_pow+0x9e6>
 800c73e:	4959      	ldr	r1, [pc, #356]	; (800c8a4 <__ieee754_pow+0x25c>)
 800c740:	4632      	mov	r2, r6
 800c742:	463b      	mov	r3, r7
 800c744:	2000      	movs	r0, #0
 800c746:	f7f4 f899 	bl	800087c <__aeabi_ddiv>
 800c74a:	e79c      	b.n	800c686 <__ieee754_pow+0x3e>
 800c74c:	2300      	movs	r3, #0
 800c74e:	9304      	str	r3, [sp, #16]
 800c750:	2a00      	cmp	r2, #0
 800c752:	d13d      	bne.n	800c7d0 <__ieee754_pow+0x188>
 800c754:	4b51      	ldr	r3, [pc, #324]	; (800c89c <__ieee754_pow+0x254>)
 800c756:	4598      	cmp	r8, r3
 800c758:	d1ea      	bne.n	800c730 <__ieee754_pow+0xe8>
 800c75a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c75e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c762:	ea53 030a 	orrs.w	r3, r3, sl
 800c766:	f000 845a 	beq.w	800d01e <__ieee754_pow+0x9d6>
 800c76a:	4b4f      	ldr	r3, [pc, #316]	; (800c8a8 <__ieee754_pow+0x260>)
 800c76c:	429c      	cmp	r4, r3
 800c76e:	dd08      	ble.n	800c782 <__ieee754_pow+0x13a>
 800c770:	f1b9 0f00 	cmp.w	r9, #0
 800c774:	f2c0 8457 	blt.w	800d026 <__ieee754_pow+0x9de>
 800c778:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c77c:	e783      	b.n	800c686 <__ieee754_pow+0x3e>
 800c77e:	2302      	movs	r3, #2
 800c780:	e7e5      	b.n	800c74e <__ieee754_pow+0x106>
 800c782:	f1b9 0f00 	cmp.w	r9, #0
 800c786:	f04f 0000 	mov.w	r0, #0
 800c78a:	f04f 0100 	mov.w	r1, #0
 800c78e:	f6bf af7a 	bge.w	800c686 <__ieee754_pow+0x3e>
 800c792:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c796:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c79a:	e774      	b.n	800c686 <__ieee754_pow+0x3e>
 800c79c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c7a0:	d106      	bne.n	800c7b0 <__ieee754_pow+0x168>
 800c7a2:	4632      	mov	r2, r6
 800c7a4:	463b      	mov	r3, r7
 800c7a6:	4630      	mov	r0, r6
 800c7a8:	4639      	mov	r1, r7
 800c7aa:	f7f3 ff3d 	bl	8000628 <__aeabi_dmul>
 800c7ae:	e76a      	b.n	800c686 <__ieee754_pow+0x3e>
 800c7b0:	4b3e      	ldr	r3, [pc, #248]	; (800c8ac <__ieee754_pow+0x264>)
 800c7b2:	4599      	cmp	r9, r3
 800c7b4:	d10c      	bne.n	800c7d0 <__ieee754_pow+0x188>
 800c7b6:	2d00      	cmp	r5, #0
 800c7b8:	db0a      	blt.n	800c7d0 <__ieee754_pow+0x188>
 800c7ba:	ec47 6b10 	vmov	d0, r6, r7
 800c7be:	b009      	add	sp, #36	; 0x24
 800c7c0:	ecbd 8b06 	vpop	{d8-d10}
 800c7c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c8:	f000 be7a 	b.w	800d4c0 <__ieee754_sqrt>
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	9304      	str	r3, [sp, #16]
 800c7d0:	ec47 6b10 	vmov	d0, r6, r7
 800c7d4:	f001 fdd0 	bl	800e378 <fabs>
 800c7d8:	ec51 0b10 	vmov	r0, r1, d0
 800c7dc:	f1ba 0f00 	cmp.w	sl, #0
 800c7e0:	d129      	bne.n	800c836 <__ieee754_pow+0x1ee>
 800c7e2:	b124      	cbz	r4, 800c7ee <__ieee754_pow+0x1a6>
 800c7e4:	4b2f      	ldr	r3, [pc, #188]	; (800c8a4 <__ieee754_pow+0x25c>)
 800c7e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d123      	bne.n	800c836 <__ieee754_pow+0x1ee>
 800c7ee:	f1b9 0f00 	cmp.w	r9, #0
 800c7f2:	da05      	bge.n	800c800 <__ieee754_pow+0x1b8>
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	460b      	mov	r3, r1
 800c7f8:	2000      	movs	r0, #0
 800c7fa:	492a      	ldr	r1, [pc, #168]	; (800c8a4 <__ieee754_pow+0x25c>)
 800c7fc:	f7f4 f83e 	bl	800087c <__aeabi_ddiv>
 800c800:	2d00      	cmp	r5, #0
 800c802:	f6bf af40 	bge.w	800c686 <__ieee754_pow+0x3e>
 800c806:	9b04      	ldr	r3, [sp, #16]
 800c808:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c80c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c810:	4323      	orrs	r3, r4
 800c812:	d108      	bne.n	800c826 <__ieee754_pow+0x1de>
 800c814:	4602      	mov	r2, r0
 800c816:	460b      	mov	r3, r1
 800c818:	4610      	mov	r0, r2
 800c81a:	4619      	mov	r1, r3
 800c81c:	f7f3 fd4c 	bl	80002b8 <__aeabi_dsub>
 800c820:	4602      	mov	r2, r0
 800c822:	460b      	mov	r3, r1
 800c824:	e78f      	b.n	800c746 <__ieee754_pow+0xfe>
 800c826:	9b04      	ldr	r3, [sp, #16]
 800c828:	2b01      	cmp	r3, #1
 800c82a:	f47f af2c 	bne.w	800c686 <__ieee754_pow+0x3e>
 800c82e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c832:	4619      	mov	r1, r3
 800c834:	e727      	b.n	800c686 <__ieee754_pow+0x3e>
 800c836:	0feb      	lsrs	r3, r5, #31
 800c838:	3b01      	subs	r3, #1
 800c83a:	9306      	str	r3, [sp, #24]
 800c83c:	9a06      	ldr	r2, [sp, #24]
 800c83e:	9b04      	ldr	r3, [sp, #16]
 800c840:	4313      	orrs	r3, r2
 800c842:	d102      	bne.n	800c84a <__ieee754_pow+0x202>
 800c844:	4632      	mov	r2, r6
 800c846:	463b      	mov	r3, r7
 800c848:	e7e6      	b.n	800c818 <__ieee754_pow+0x1d0>
 800c84a:	4b19      	ldr	r3, [pc, #100]	; (800c8b0 <__ieee754_pow+0x268>)
 800c84c:	4598      	cmp	r8, r3
 800c84e:	f340 80fb 	ble.w	800ca48 <__ieee754_pow+0x400>
 800c852:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c856:	4598      	cmp	r8, r3
 800c858:	4b13      	ldr	r3, [pc, #76]	; (800c8a8 <__ieee754_pow+0x260>)
 800c85a:	dd0c      	ble.n	800c876 <__ieee754_pow+0x22e>
 800c85c:	429c      	cmp	r4, r3
 800c85e:	dc0f      	bgt.n	800c880 <__ieee754_pow+0x238>
 800c860:	f1b9 0f00 	cmp.w	r9, #0
 800c864:	da0f      	bge.n	800c886 <__ieee754_pow+0x23e>
 800c866:	2000      	movs	r0, #0
 800c868:	b009      	add	sp, #36	; 0x24
 800c86a:	ecbd 8b06 	vpop	{d8-d10}
 800c86e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c872:	f001 bbd6 	b.w	800e022 <__math_oflow>
 800c876:	429c      	cmp	r4, r3
 800c878:	dbf2      	blt.n	800c860 <__ieee754_pow+0x218>
 800c87a:	4b0a      	ldr	r3, [pc, #40]	; (800c8a4 <__ieee754_pow+0x25c>)
 800c87c:	429c      	cmp	r4, r3
 800c87e:	dd19      	ble.n	800c8b4 <__ieee754_pow+0x26c>
 800c880:	f1b9 0f00 	cmp.w	r9, #0
 800c884:	dcef      	bgt.n	800c866 <__ieee754_pow+0x21e>
 800c886:	2000      	movs	r0, #0
 800c888:	b009      	add	sp, #36	; 0x24
 800c88a:	ecbd 8b06 	vpop	{d8-d10}
 800c88e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c892:	f001 bbbd 	b.w	800e010 <__math_uflow>
 800c896:	bf00      	nop
 800c898:	fff00000 	.word	0xfff00000
 800c89c:	7ff00000 	.word	0x7ff00000
 800c8a0:	433fffff 	.word	0x433fffff
 800c8a4:	3ff00000 	.word	0x3ff00000
 800c8a8:	3fefffff 	.word	0x3fefffff
 800c8ac:	3fe00000 	.word	0x3fe00000
 800c8b0:	41e00000 	.word	0x41e00000
 800c8b4:	4b60      	ldr	r3, [pc, #384]	; (800ca38 <__ieee754_pow+0x3f0>)
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	f7f3 fcfe 	bl	80002b8 <__aeabi_dsub>
 800c8bc:	a354      	add	r3, pc, #336	; (adr r3, 800ca10 <__ieee754_pow+0x3c8>)
 800c8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	460d      	mov	r5, r1
 800c8c6:	f7f3 feaf 	bl	8000628 <__aeabi_dmul>
 800c8ca:	a353      	add	r3, pc, #332	; (adr r3, 800ca18 <__ieee754_pow+0x3d0>)
 800c8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d0:	4606      	mov	r6, r0
 800c8d2:	460f      	mov	r7, r1
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	4629      	mov	r1, r5
 800c8d8:	f7f3 fea6 	bl	8000628 <__aeabi_dmul>
 800c8dc:	4b57      	ldr	r3, [pc, #348]	; (800ca3c <__ieee754_pow+0x3f4>)
 800c8de:	4682      	mov	sl, r0
 800c8e0:	468b      	mov	fp, r1
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	4629      	mov	r1, r5
 800c8e8:	f7f3 fe9e 	bl	8000628 <__aeabi_dmul>
 800c8ec:	4602      	mov	r2, r0
 800c8ee:	460b      	mov	r3, r1
 800c8f0:	a14b      	add	r1, pc, #300	; (adr r1, 800ca20 <__ieee754_pow+0x3d8>)
 800c8f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8f6:	f7f3 fcdf 	bl	80002b8 <__aeabi_dsub>
 800c8fa:	4622      	mov	r2, r4
 800c8fc:	462b      	mov	r3, r5
 800c8fe:	f7f3 fe93 	bl	8000628 <__aeabi_dmul>
 800c902:	4602      	mov	r2, r0
 800c904:	460b      	mov	r3, r1
 800c906:	2000      	movs	r0, #0
 800c908:	494d      	ldr	r1, [pc, #308]	; (800ca40 <__ieee754_pow+0x3f8>)
 800c90a:	f7f3 fcd5 	bl	80002b8 <__aeabi_dsub>
 800c90e:	4622      	mov	r2, r4
 800c910:	4680      	mov	r8, r0
 800c912:	4689      	mov	r9, r1
 800c914:	462b      	mov	r3, r5
 800c916:	4620      	mov	r0, r4
 800c918:	4629      	mov	r1, r5
 800c91a:	f7f3 fe85 	bl	8000628 <__aeabi_dmul>
 800c91e:	4602      	mov	r2, r0
 800c920:	460b      	mov	r3, r1
 800c922:	4640      	mov	r0, r8
 800c924:	4649      	mov	r1, r9
 800c926:	f7f3 fe7f 	bl	8000628 <__aeabi_dmul>
 800c92a:	a33f      	add	r3, pc, #252	; (adr r3, 800ca28 <__ieee754_pow+0x3e0>)
 800c92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c930:	f7f3 fe7a 	bl	8000628 <__aeabi_dmul>
 800c934:	4602      	mov	r2, r0
 800c936:	460b      	mov	r3, r1
 800c938:	4650      	mov	r0, sl
 800c93a:	4659      	mov	r1, fp
 800c93c:	f7f3 fcbc 	bl	80002b8 <__aeabi_dsub>
 800c940:	4602      	mov	r2, r0
 800c942:	460b      	mov	r3, r1
 800c944:	4680      	mov	r8, r0
 800c946:	4689      	mov	r9, r1
 800c948:	4630      	mov	r0, r6
 800c94a:	4639      	mov	r1, r7
 800c94c:	f7f3 fcb6 	bl	80002bc <__adddf3>
 800c950:	2000      	movs	r0, #0
 800c952:	4632      	mov	r2, r6
 800c954:	463b      	mov	r3, r7
 800c956:	4604      	mov	r4, r0
 800c958:	460d      	mov	r5, r1
 800c95a:	f7f3 fcad 	bl	80002b8 <__aeabi_dsub>
 800c95e:	4602      	mov	r2, r0
 800c960:	460b      	mov	r3, r1
 800c962:	4640      	mov	r0, r8
 800c964:	4649      	mov	r1, r9
 800c966:	f7f3 fca7 	bl	80002b8 <__aeabi_dsub>
 800c96a:	9b04      	ldr	r3, [sp, #16]
 800c96c:	9a06      	ldr	r2, [sp, #24]
 800c96e:	3b01      	subs	r3, #1
 800c970:	4313      	orrs	r3, r2
 800c972:	4682      	mov	sl, r0
 800c974:	468b      	mov	fp, r1
 800c976:	f040 81e7 	bne.w	800cd48 <__ieee754_pow+0x700>
 800c97a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ca30 <__ieee754_pow+0x3e8>
 800c97e:	eeb0 8a47 	vmov.f32	s16, s14
 800c982:	eef0 8a67 	vmov.f32	s17, s15
 800c986:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c98a:	2600      	movs	r6, #0
 800c98c:	4632      	mov	r2, r6
 800c98e:	463b      	mov	r3, r7
 800c990:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c994:	f7f3 fc90 	bl	80002b8 <__aeabi_dsub>
 800c998:	4622      	mov	r2, r4
 800c99a:	462b      	mov	r3, r5
 800c99c:	f7f3 fe44 	bl	8000628 <__aeabi_dmul>
 800c9a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9a4:	4680      	mov	r8, r0
 800c9a6:	4689      	mov	r9, r1
 800c9a8:	4650      	mov	r0, sl
 800c9aa:	4659      	mov	r1, fp
 800c9ac:	f7f3 fe3c 	bl	8000628 <__aeabi_dmul>
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	460b      	mov	r3, r1
 800c9b4:	4640      	mov	r0, r8
 800c9b6:	4649      	mov	r1, r9
 800c9b8:	f7f3 fc80 	bl	80002bc <__adddf3>
 800c9bc:	4632      	mov	r2, r6
 800c9be:	463b      	mov	r3, r7
 800c9c0:	4680      	mov	r8, r0
 800c9c2:	4689      	mov	r9, r1
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	4629      	mov	r1, r5
 800c9c8:	f7f3 fe2e 	bl	8000628 <__aeabi_dmul>
 800c9cc:	460b      	mov	r3, r1
 800c9ce:	4604      	mov	r4, r0
 800c9d0:	460d      	mov	r5, r1
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	4649      	mov	r1, r9
 800c9d6:	4640      	mov	r0, r8
 800c9d8:	f7f3 fc70 	bl	80002bc <__adddf3>
 800c9dc:	4b19      	ldr	r3, [pc, #100]	; (800ca44 <__ieee754_pow+0x3fc>)
 800c9de:	4299      	cmp	r1, r3
 800c9e0:	ec45 4b19 	vmov	d9, r4, r5
 800c9e4:	4606      	mov	r6, r0
 800c9e6:	460f      	mov	r7, r1
 800c9e8:	468b      	mov	fp, r1
 800c9ea:	f340 82f1 	ble.w	800cfd0 <__ieee754_pow+0x988>
 800c9ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c9f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c9f6:	4303      	orrs	r3, r0
 800c9f8:	f000 81e4 	beq.w	800cdc4 <__ieee754_pow+0x77c>
 800c9fc:	ec51 0b18 	vmov	r0, r1, d8
 800ca00:	2200      	movs	r2, #0
 800ca02:	2300      	movs	r3, #0
 800ca04:	f7f4 f882 	bl	8000b0c <__aeabi_dcmplt>
 800ca08:	3800      	subs	r0, #0
 800ca0a:	bf18      	it	ne
 800ca0c:	2001      	movne	r0, #1
 800ca0e:	e72b      	b.n	800c868 <__ieee754_pow+0x220>
 800ca10:	60000000 	.word	0x60000000
 800ca14:	3ff71547 	.word	0x3ff71547
 800ca18:	f85ddf44 	.word	0xf85ddf44
 800ca1c:	3e54ae0b 	.word	0x3e54ae0b
 800ca20:	55555555 	.word	0x55555555
 800ca24:	3fd55555 	.word	0x3fd55555
 800ca28:	652b82fe 	.word	0x652b82fe
 800ca2c:	3ff71547 	.word	0x3ff71547
 800ca30:	00000000 	.word	0x00000000
 800ca34:	bff00000 	.word	0xbff00000
 800ca38:	3ff00000 	.word	0x3ff00000
 800ca3c:	3fd00000 	.word	0x3fd00000
 800ca40:	3fe00000 	.word	0x3fe00000
 800ca44:	408fffff 	.word	0x408fffff
 800ca48:	4bd5      	ldr	r3, [pc, #852]	; (800cda0 <__ieee754_pow+0x758>)
 800ca4a:	402b      	ands	r3, r5
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	b92b      	cbnz	r3, 800ca5c <__ieee754_pow+0x414>
 800ca50:	4bd4      	ldr	r3, [pc, #848]	; (800cda4 <__ieee754_pow+0x75c>)
 800ca52:	f7f3 fde9 	bl	8000628 <__aeabi_dmul>
 800ca56:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ca5a:	460c      	mov	r4, r1
 800ca5c:	1523      	asrs	r3, r4, #20
 800ca5e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ca62:	4413      	add	r3, r2
 800ca64:	9305      	str	r3, [sp, #20]
 800ca66:	4bd0      	ldr	r3, [pc, #832]	; (800cda8 <__ieee754_pow+0x760>)
 800ca68:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ca6c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ca70:	429c      	cmp	r4, r3
 800ca72:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ca76:	dd08      	ble.n	800ca8a <__ieee754_pow+0x442>
 800ca78:	4bcc      	ldr	r3, [pc, #816]	; (800cdac <__ieee754_pow+0x764>)
 800ca7a:	429c      	cmp	r4, r3
 800ca7c:	f340 8162 	ble.w	800cd44 <__ieee754_pow+0x6fc>
 800ca80:	9b05      	ldr	r3, [sp, #20]
 800ca82:	3301      	adds	r3, #1
 800ca84:	9305      	str	r3, [sp, #20]
 800ca86:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ca8a:	2400      	movs	r4, #0
 800ca8c:	00e3      	lsls	r3, r4, #3
 800ca8e:	9307      	str	r3, [sp, #28]
 800ca90:	4bc7      	ldr	r3, [pc, #796]	; (800cdb0 <__ieee754_pow+0x768>)
 800ca92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ca96:	ed93 7b00 	vldr	d7, [r3]
 800ca9a:	4629      	mov	r1, r5
 800ca9c:	ec53 2b17 	vmov	r2, r3, d7
 800caa0:	eeb0 9a47 	vmov.f32	s18, s14
 800caa4:	eef0 9a67 	vmov.f32	s19, s15
 800caa8:	4682      	mov	sl, r0
 800caaa:	f7f3 fc05 	bl	80002b8 <__aeabi_dsub>
 800caae:	4652      	mov	r2, sl
 800cab0:	4606      	mov	r6, r0
 800cab2:	460f      	mov	r7, r1
 800cab4:	462b      	mov	r3, r5
 800cab6:	ec51 0b19 	vmov	r0, r1, d9
 800caba:	f7f3 fbff 	bl	80002bc <__adddf3>
 800cabe:	4602      	mov	r2, r0
 800cac0:	460b      	mov	r3, r1
 800cac2:	2000      	movs	r0, #0
 800cac4:	49bb      	ldr	r1, [pc, #748]	; (800cdb4 <__ieee754_pow+0x76c>)
 800cac6:	f7f3 fed9 	bl	800087c <__aeabi_ddiv>
 800caca:	ec41 0b1a 	vmov	d10, r0, r1
 800cace:	4602      	mov	r2, r0
 800cad0:	460b      	mov	r3, r1
 800cad2:	4630      	mov	r0, r6
 800cad4:	4639      	mov	r1, r7
 800cad6:	f7f3 fda7 	bl	8000628 <__aeabi_dmul>
 800cada:	2300      	movs	r3, #0
 800cadc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cae0:	9302      	str	r3, [sp, #8]
 800cae2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cae6:	46ab      	mov	fp, r5
 800cae8:	106d      	asrs	r5, r5, #1
 800caea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800caee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800caf2:	ec41 0b18 	vmov	d8, r0, r1
 800caf6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800cafa:	2200      	movs	r2, #0
 800cafc:	4640      	mov	r0, r8
 800cafe:	4649      	mov	r1, r9
 800cb00:	4614      	mov	r4, r2
 800cb02:	461d      	mov	r5, r3
 800cb04:	f7f3 fd90 	bl	8000628 <__aeabi_dmul>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	4630      	mov	r0, r6
 800cb0e:	4639      	mov	r1, r7
 800cb10:	f7f3 fbd2 	bl	80002b8 <__aeabi_dsub>
 800cb14:	ec53 2b19 	vmov	r2, r3, d9
 800cb18:	4606      	mov	r6, r0
 800cb1a:	460f      	mov	r7, r1
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	4629      	mov	r1, r5
 800cb20:	f7f3 fbca 	bl	80002b8 <__aeabi_dsub>
 800cb24:	4602      	mov	r2, r0
 800cb26:	460b      	mov	r3, r1
 800cb28:	4650      	mov	r0, sl
 800cb2a:	4659      	mov	r1, fp
 800cb2c:	f7f3 fbc4 	bl	80002b8 <__aeabi_dsub>
 800cb30:	4642      	mov	r2, r8
 800cb32:	464b      	mov	r3, r9
 800cb34:	f7f3 fd78 	bl	8000628 <__aeabi_dmul>
 800cb38:	4602      	mov	r2, r0
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	4639      	mov	r1, r7
 800cb40:	f7f3 fbba 	bl	80002b8 <__aeabi_dsub>
 800cb44:	ec53 2b1a 	vmov	r2, r3, d10
 800cb48:	f7f3 fd6e 	bl	8000628 <__aeabi_dmul>
 800cb4c:	ec53 2b18 	vmov	r2, r3, d8
 800cb50:	ec41 0b19 	vmov	d9, r0, r1
 800cb54:	ec51 0b18 	vmov	r0, r1, d8
 800cb58:	f7f3 fd66 	bl	8000628 <__aeabi_dmul>
 800cb5c:	a37c      	add	r3, pc, #496	; (adr r3, 800cd50 <__ieee754_pow+0x708>)
 800cb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb62:	4604      	mov	r4, r0
 800cb64:	460d      	mov	r5, r1
 800cb66:	f7f3 fd5f 	bl	8000628 <__aeabi_dmul>
 800cb6a:	a37b      	add	r3, pc, #492	; (adr r3, 800cd58 <__ieee754_pow+0x710>)
 800cb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb70:	f7f3 fba4 	bl	80002bc <__adddf3>
 800cb74:	4622      	mov	r2, r4
 800cb76:	462b      	mov	r3, r5
 800cb78:	f7f3 fd56 	bl	8000628 <__aeabi_dmul>
 800cb7c:	a378      	add	r3, pc, #480	; (adr r3, 800cd60 <__ieee754_pow+0x718>)
 800cb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb82:	f7f3 fb9b 	bl	80002bc <__adddf3>
 800cb86:	4622      	mov	r2, r4
 800cb88:	462b      	mov	r3, r5
 800cb8a:	f7f3 fd4d 	bl	8000628 <__aeabi_dmul>
 800cb8e:	a376      	add	r3, pc, #472	; (adr r3, 800cd68 <__ieee754_pow+0x720>)
 800cb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb94:	f7f3 fb92 	bl	80002bc <__adddf3>
 800cb98:	4622      	mov	r2, r4
 800cb9a:	462b      	mov	r3, r5
 800cb9c:	f7f3 fd44 	bl	8000628 <__aeabi_dmul>
 800cba0:	a373      	add	r3, pc, #460	; (adr r3, 800cd70 <__ieee754_pow+0x728>)
 800cba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba6:	f7f3 fb89 	bl	80002bc <__adddf3>
 800cbaa:	4622      	mov	r2, r4
 800cbac:	462b      	mov	r3, r5
 800cbae:	f7f3 fd3b 	bl	8000628 <__aeabi_dmul>
 800cbb2:	a371      	add	r3, pc, #452	; (adr r3, 800cd78 <__ieee754_pow+0x730>)
 800cbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb8:	f7f3 fb80 	bl	80002bc <__adddf3>
 800cbbc:	4622      	mov	r2, r4
 800cbbe:	4606      	mov	r6, r0
 800cbc0:	460f      	mov	r7, r1
 800cbc2:	462b      	mov	r3, r5
 800cbc4:	4620      	mov	r0, r4
 800cbc6:	4629      	mov	r1, r5
 800cbc8:	f7f3 fd2e 	bl	8000628 <__aeabi_dmul>
 800cbcc:	4602      	mov	r2, r0
 800cbce:	460b      	mov	r3, r1
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	4639      	mov	r1, r7
 800cbd4:	f7f3 fd28 	bl	8000628 <__aeabi_dmul>
 800cbd8:	4642      	mov	r2, r8
 800cbda:	4604      	mov	r4, r0
 800cbdc:	460d      	mov	r5, r1
 800cbde:	464b      	mov	r3, r9
 800cbe0:	ec51 0b18 	vmov	r0, r1, d8
 800cbe4:	f7f3 fb6a 	bl	80002bc <__adddf3>
 800cbe8:	ec53 2b19 	vmov	r2, r3, d9
 800cbec:	f7f3 fd1c 	bl	8000628 <__aeabi_dmul>
 800cbf0:	4622      	mov	r2, r4
 800cbf2:	462b      	mov	r3, r5
 800cbf4:	f7f3 fb62 	bl	80002bc <__adddf3>
 800cbf8:	4642      	mov	r2, r8
 800cbfa:	4682      	mov	sl, r0
 800cbfc:	468b      	mov	fp, r1
 800cbfe:	464b      	mov	r3, r9
 800cc00:	4640      	mov	r0, r8
 800cc02:	4649      	mov	r1, r9
 800cc04:	f7f3 fd10 	bl	8000628 <__aeabi_dmul>
 800cc08:	4b6b      	ldr	r3, [pc, #428]	; (800cdb8 <__ieee754_pow+0x770>)
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	4606      	mov	r6, r0
 800cc0e:	460f      	mov	r7, r1
 800cc10:	f7f3 fb54 	bl	80002bc <__adddf3>
 800cc14:	4652      	mov	r2, sl
 800cc16:	465b      	mov	r3, fp
 800cc18:	f7f3 fb50 	bl	80002bc <__adddf3>
 800cc1c:	2000      	movs	r0, #0
 800cc1e:	4604      	mov	r4, r0
 800cc20:	460d      	mov	r5, r1
 800cc22:	4602      	mov	r2, r0
 800cc24:	460b      	mov	r3, r1
 800cc26:	4640      	mov	r0, r8
 800cc28:	4649      	mov	r1, r9
 800cc2a:	f7f3 fcfd 	bl	8000628 <__aeabi_dmul>
 800cc2e:	4b62      	ldr	r3, [pc, #392]	; (800cdb8 <__ieee754_pow+0x770>)
 800cc30:	4680      	mov	r8, r0
 800cc32:	4689      	mov	r9, r1
 800cc34:	2200      	movs	r2, #0
 800cc36:	4620      	mov	r0, r4
 800cc38:	4629      	mov	r1, r5
 800cc3a:	f7f3 fb3d 	bl	80002b8 <__aeabi_dsub>
 800cc3e:	4632      	mov	r2, r6
 800cc40:	463b      	mov	r3, r7
 800cc42:	f7f3 fb39 	bl	80002b8 <__aeabi_dsub>
 800cc46:	4602      	mov	r2, r0
 800cc48:	460b      	mov	r3, r1
 800cc4a:	4650      	mov	r0, sl
 800cc4c:	4659      	mov	r1, fp
 800cc4e:	f7f3 fb33 	bl	80002b8 <__aeabi_dsub>
 800cc52:	ec53 2b18 	vmov	r2, r3, d8
 800cc56:	f7f3 fce7 	bl	8000628 <__aeabi_dmul>
 800cc5a:	4622      	mov	r2, r4
 800cc5c:	4606      	mov	r6, r0
 800cc5e:	460f      	mov	r7, r1
 800cc60:	462b      	mov	r3, r5
 800cc62:	ec51 0b19 	vmov	r0, r1, d9
 800cc66:	f7f3 fcdf 	bl	8000628 <__aeabi_dmul>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	460b      	mov	r3, r1
 800cc6e:	4630      	mov	r0, r6
 800cc70:	4639      	mov	r1, r7
 800cc72:	f7f3 fb23 	bl	80002bc <__adddf3>
 800cc76:	4606      	mov	r6, r0
 800cc78:	460f      	mov	r7, r1
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	460b      	mov	r3, r1
 800cc7e:	4640      	mov	r0, r8
 800cc80:	4649      	mov	r1, r9
 800cc82:	f7f3 fb1b 	bl	80002bc <__adddf3>
 800cc86:	a33e      	add	r3, pc, #248	; (adr r3, 800cd80 <__ieee754_pow+0x738>)
 800cc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc8c:	2000      	movs	r0, #0
 800cc8e:	4604      	mov	r4, r0
 800cc90:	460d      	mov	r5, r1
 800cc92:	f7f3 fcc9 	bl	8000628 <__aeabi_dmul>
 800cc96:	4642      	mov	r2, r8
 800cc98:	ec41 0b18 	vmov	d8, r0, r1
 800cc9c:	464b      	mov	r3, r9
 800cc9e:	4620      	mov	r0, r4
 800cca0:	4629      	mov	r1, r5
 800cca2:	f7f3 fb09 	bl	80002b8 <__aeabi_dsub>
 800cca6:	4602      	mov	r2, r0
 800cca8:	460b      	mov	r3, r1
 800ccaa:	4630      	mov	r0, r6
 800ccac:	4639      	mov	r1, r7
 800ccae:	f7f3 fb03 	bl	80002b8 <__aeabi_dsub>
 800ccb2:	a335      	add	r3, pc, #212	; (adr r3, 800cd88 <__ieee754_pow+0x740>)
 800ccb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb8:	f7f3 fcb6 	bl	8000628 <__aeabi_dmul>
 800ccbc:	a334      	add	r3, pc, #208	; (adr r3, 800cd90 <__ieee754_pow+0x748>)
 800ccbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc2:	4606      	mov	r6, r0
 800ccc4:	460f      	mov	r7, r1
 800ccc6:	4620      	mov	r0, r4
 800ccc8:	4629      	mov	r1, r5
 800ccca:	f7f3 fcad 	bl	8000628 <__aeabi_dmul>
 800ccce:	4602      	mov	r2, r0
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	4630      	mov	r0, r6
 800ccd4:	4639      	mov	r1, r7
 800ccd6:	f7f3 faf1 	bl	80002bc <__adddf3>
 800ccda:	9a07      	ldr	r2, [sp, #28]
 800ccdc:	4b37      	ldr	r3, [pc, #220]	; (800cdbc <__ieee754_pow+0x774>)
 800ccde:	4413      	add	r3, r2
 800cce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce4:	f7f3 faea 	bl	80002bc <__adddf3>
 800cce8:	4682      	mov	sl, r0
 800ccea:	9805      	ldr	r0, [sp, #20]
 800ccec:	468b      	mov	fp, r1
 800ccee:	f7f3 fc31 	bl	8000554 <__aeabi_i2d>
 800ccf2:	9a07      	ldr	r2, [sp, #28]
 800ccf4:	4b32      	ldr	r3, [pc, #200]	; (800cdc0 <__ieee754_pow+0x778>)
 800ccf6:	4413      	add	r3, r2
 800ccf8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ccfc:	4606      	mov	r6, r0
 800ccfe:	460f      	mov	r7, r1
 800cd00:	4652      	mov	r2, sl
 800cd02:	465b      	mov	r3, fp
 800cd04:	ec51 0b18 	vmov	r0, r1, d8
 800cd08:	f7f3 fad8 	bl	80002bc <__adddf3>
 800cd0c:	4642      	mov	r2, r8
 800cd0e:	464b      	mov	r3, r9
 800cd10:	f7f3 fad4 	bl	80002bc <__adddf3>
 800cd14:	4632      	mov	r2, r6
 800cd16:	463b      	mov	r3, r7
 800cd18:	f7f3 fad0 	bl	80002bc <__adddf3>
 800cd1c:	2000      	movs	r0, #0
 800cd1e:	4632      	mov	r2, r6
 800cd20:	463b      	mov	r3, r7
 800cd22:	4604      	mov	r4, r0
 800cd24:	460d      	mov	r5, r1
 800cd26:	f7f3 fac7 	bl	80002b8 <__aeabi_dsub>
 800cd2a:	4642      	mov	r2, r8
 800cd2c:	464b      	mov	r3, r9
 800cd2e:	f7f3 fac3 	bl	80002b8 <__aeabi_dsub>
 800cd32:	ec53 2b18 	vmov	r2, r3, d8
 800cd36:	f7f3 fabf 	bl	80002b8 <__aeabi_dsub>
 800cd3a:	4602      	mov	r2, r0
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	4650      	mov	r0, sl
 800cd40:	4659      	mov	r1, fp
 800cd42:	e610      	b.n	800c966 <__ieee754_pow+0x31e>
 800cd44:	2401      	movs	r4, #1
 800cd46:	e6a1      	b.n	800ca8c <__ieee754_pow+0x444>
 800cd48:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800cd98 <__ieee754_pow+0x750>
 800cd4c:	e617      	b.n	800c97e <__ieee754_pow+0x336>
 800cd4e:	bf00      	nop
 800cd50:	4a454eef 	.word	0x4a454eef
 800cd54:	3fca7e28 	.word	0x3fca7e28
 800cd58:	93c9db65 	.word	0x93c9db65
 800cd5c:	3fcd864a 	.word	0x3fcd864a
 800cd60:	a91d4101 	.word	0xa91d4101
 800cd64:	3fd17460 	.word	0x3fd17460
 800cd68:	518f264d 	.word	0x518f264d
 800cd6c:	3fd55555 	.word	0x3fd55555
 800cd70:	db6fabff 	.word	0xdb6fabff
 800cd74:	3fdb6db6 	.word	0x3fdb6db6
 800cd78:	33333303 	.word	0x33333303
 800cd7c:	3fe33333 	.word	0x3fe33333
 800cd80:	e0000000 	.word	0xe0000000
 800cd84:	3feec709 	.word	0x3feec709
 800cd88:	dc3a03fd 	.word	0xdc3a03fd
 800cd8c:	3feec709 	.word	0x3feec709
 800cd90:	145b01f5 	.word	0x145b01f5
 800cd94:	be3e2fe0 	.word	0xbe3e2fe0
 800cd98:	00000000 	.word	0x00000000
 800cd9c:	3ff00000 	.word	0x3ff00000
 800cda0:	7ff00000 	.word	0x7ff00000
 800cda4:	43400000 	.word	0x43400000
 800cda8:	0003988e 	.word	0x0003988e
 800cdac:	000bb679 	.word	0x000bb679
 800cdb0:	0800ed70 	.word	0x0800ed70
 800cdb4:	3ff00000 	.word	0x3ff00000
 800cdb8:	40080000 	.word	0x40080000
 800cdbc:	0800ed90 	.word	0x0800ed90
 800cdc0:	0800ed80 	.word	0x0800ed80
 800cdc4:	a3b5      	add	r3, pc, #724	; (adr r3, 800d09c <__ieee754_pow+0xa54>)
 800cdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdca:	4640      	mov	r0, r8
 800cdcc:	4649      	mov	r1, r9
 800cdce:	f7f3 fa75 	bl	80002bc <__adddf3>
 800cdd2:	4622      	mov	r2, r4
 800cdd4:	ec41 0b1a 	vmov	d10, r0, r1
 800cdd8:	462b      	mov	r3, r5
 800cdda:	4630      	mov	r0, r6
 800cddc:	4639      	mov	r1, r7
 800cdde:	f7f3 fa6b 	bl	80002b8 <__aeabi_dsub>
 800cde2:	4602      	mov	r2, r0
 800cde4:	460b      	mov	r3, r1
 800cde6:	ec51 0b1a 	vmov	r0, r1, d10
 800cdea:	f7f3 fead 	bl	8000b48 <__aeabi_dcmpgt>
 800cdee:	2800      	cmp	r0, #0
 800cdf0:	f47f ae04 	bne.w	800c9fc <__ieee754_pow+0x3b4>
 800cdf4:	4aa4      	ldr	r2, [pc, #656]	; (800d088 <__ieee754_pow+0xa40>)
 800cdf6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	f340 8108 	ble.w	800d010 <__ieee754_pow+0x9c8>
 800ce00:	151b      	asrs	r3, r3, #20
 800ce02:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ce06:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ce0a:	fa4a f303 	asr.w	r3, sl, r3
 800ce0e:	445b      	add	r3, fp
 800ce10:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ce14:	4e9d      	ldr	r6, [pc, #628]	; (800d08c <__ieee754_pow+0xa44>)
 800ce16:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ce1a:	4116      	asrs	r6, r2
 800ce1c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ce20:	2000      	movs	r0, #0
 800ce22:	ea23 0106 	bic.w	r1, r3, r6
 800ce26:	f1c2 0214 	rsb	r2, r2, #20
 800ce2a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ce2e:	fa4a fa02 	asr.w	sl, sl, r2
 800ce32:	f1bb 0f00 	cmp.w	fp, #0
 800ce36:	4602      	mov	r2, r0
 800ce38:	460b      	mov	r3, r1
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	bfb8      	it	lt
 800ce40:	f1ca 0a00 	rsblt	sl, sl, #0
 800ce44:	f7f3 fa38 	bl	80002b8 <__aeabi_dsub>
 800ce48:	ec41 0b19 	vmov	d9, r0, r1
 800ce4c:	4642      	mov	r2, r8
 800ce4e:	464b      	mov	r3, r9
 800ce50:	ec51 0b19 	vmov	r0, r1, d9
 800ce54:	f7f3 fa32 	bl	80002bc <__adddf3>
 800ce58:	a37b      	add	r3, pc, #492	; (adr r3, 800d048 <__ieee754_pow+0xa00>)
 800ce5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce5e:	2000      	movs	r0, #0
 800ce60:	4604      	mov	r4, r0
 800ce62:	460d      	mov	r5, r1
 800ce64:	f7f3 fbe0 	bl	8000628 <__aeabi_dmul>
 800ce68:	ec53 2b19 	vmov	r2, r3, d9
 800ce6c:	4606      	mov	r6, r0
 800ce6e:	460f      	mov	r7, r1
 800ce70:	4620      	mov	r0, r4
 800ce72:	4629      	mov	r1, r5
 800ce74:	f7f3 fa20 	bl	80002b8 <__aeabi_dsub>
 800ce78:	4602      	mov	r2, r0
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	4640      	mov	r0, r8
 800ce7e:	4649      	mov	r1, r9
 800ce80:	f7f3 fa1a 	bl	80002b8 <__aeabi_dsub>
 800ce84:	a372      	add	r3, pc, #456	; (adr r3, 800d050 <__ieee754_pow+0xa08>)
 800ce86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8a:	f7f3 fbcd 	bl	8000628 <__aeabi_dmul>
 800ce8e:	a372      	add	r3, pc, #456	; (adr r3, 800d058 <__ieee754_pow+0xa10>)
 800ce90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce94:	4680      	mov	r8, r0
 800ce96:	4689      	mov	r9, r1
 800ce98:	4620      	mov	r0, r4
 800ce9a:	4629      	mov	r1, r5
 800ce9c:	f7f3 fbc4 	bl	8000628 <__aeabi_dmul>
 800cea0:	4602      	mov	r2, r0
 800cea2:	460b      	mov	r3, r1
 800cea4:	4640      	mov	r0, r8
 800cea6:	4649      	mov	r1, r9
 800cea8:	f7f3 fa08 	bl	80002bc <__adddf3>
 800ceac:	4604      	mov	r4, r0
 800ceae:	460d      	mov	r5, r1
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	4630      	mov	r0, r6
 800ceb6:	4639      	mov	r1, r7
 800ceb8:	f7f3 fa00 	bl	80002bc <__adddf3>
 800cebc:	4632      	mov	r2, r6
 800cebe:	463b      	mov	r3, r7
 800cec0:	4680      	mov	r8, r0
 800cec2:	4689      	mov	r9, r1
 800cec4:	f7f3 f9f8 	bl	80002b8 <__aeabi_dsub>
 800cec8:	4602      	mov	r2, r0
 800ceca:	460b      	mov	r3, r1
 800cecc:	4620      	mov	r0, r4
 800cece:	4629      	mov	r1, r5
 800ced0:	f7f3 f9f2 	bl	80002b8 <__aeabi_dsub>
 800ced4:	4642      	mov	r2, r8
 800ced6:	4606      	mov	r6, r0
 800ced8:	460f      	mov	r7, r1
 800ceda:	464b      	mov	r3, r9
 800cedc:	4640      	mov	r0, r8
 800cede:	4649      	mov	r1, r9
 800cee0:	f7f3 fba2 	bl	8000628 <__aeabi_dmul>
 800cee4:	a35e      	add	r3, pc, #376	; (adr r3, 800d060 <__ieee754_pow+0xa18>)
 800cee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceea:	4604      	mov	r4, r0
 800ceec:	460d      	mov	r5, r1
 800ceee:	f7f3 fb9b 	bl	8000628 <__aeabi_dmul>
 800cef2:	a35d      	add	r3, pc, #372	; (adr r3, 800d068 <__ieee754_pow+0xa20>)
 800cef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef8:	f7f3 f9de 	bl	80002b8 <__aeabi_dsub>
 800cefc:	4622      	mov	r2, r4
 800cefe:	462b      	mov	r3, r5
 800cf00:	f7f3 fb92 	bl	8000628 <__aeabi_dmul>
 800cf04:	a35a      	add	r3, pc, #360	; (adr r3, 800d070 <__ieee754_pow+0xa28>)
 800cf06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0a:	f7f3 f9d7 	bl	80002bc <__adddf3>
 800cf0e:	4622      	mov	r2, r4
 800cf10:	462b      	mov	r3, r5
 800cf12:	f7f3 fb89 	bl	8000628 <__aeabi_dmul>
 800cf16:	a358      	add	r3, pc, #352	; (adr r3, 800d078 <__ieee754_pow+0xa30>)
 800cf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1c:	f7f3 f9cc 	bl	80002b8 <__aeabi_dsub>
 800cf20:	4622      	mov	r2, r4
 800cf22:	462b      	mov	r3, r5
 800cf24:	f7f3 fb80 	bl	8000628 <__aeabi_dmul>
 800cf28:	a355      	add	r3, pc, #340	; (adr r3, 800d080 <__ieee754_pow+0xa38>)
 800cf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf2e:	f7f3 f9c5 	bl	80002bc <__adddf3>
 800cf32:	4622      	mov	r2, r4
 800cf34:	462b      	mov	r3, r5
 800cf36:	f7f3 fb77 	bl	8000628 <__aeabi_dmul>
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	460b      	mov	r3, r1
 800cf3e:	4640      	mov	r0, r8
 800cf40:	4649      	mov	r1, r9
 800cf42:	f7f3 f9b9 	bl	80002b8 <__aeabi_dsub>
 800cf46:	4604      	mov	r4, r0
 800cf48:	460d      	mov	r5, r1
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	4640      	mov	r0, r8
 800cf50:	4649      	mov	r1, r9
 800cf52:	f7f3 fb69 	bl	8000628 <__aeabi_dmul>
 800cf56:	2200      	movs	r2, #0
 800cf58:	ec41 0b19 	vmov	d9, r0, r1
 800cf5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cf60:	4620      	mov	r0, r4
 800cf62:	4629      	mov	r1, r5
 800cf64:	f7f3 f9a8 	bl	80002b8 <__aeabi_dsub>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	460b      	mov	r3, r1
 800cf6c:	ec51 0b19 	vmov	r0, r1, d9
 800cf70:	f7f3 fc84 	bl	800087c <__aeabi_ddiv>
 800cf74:	4632      	mov	r2, r6
 800cf76:	4604      	mov	r4, r0
 800cf78:	460d      	mov	r5, r1
 800cf7a:	463b      	mov	r3, r7
 800cf7c:	4640      	mov	r0, r8
 800cf7e:	4649      	mov	r1, r9
 800cf80:	f7f3 fb52 	bl	8000628 <__aeabi_dmul>
 800cf84:	4632      	mov	r2, r6
 800cf86:	463b      	mov	r3, r7
 800cf88:	f7f3 f998 	bl	80002bc <__adddf3>
 800cf8c:	4602      	mov	r2, r0
 800cf8e:	460b      	mov	r3, r1
 800cf90:	4620      	mov	r0, r4
 800cf92:	4629      	mov	r1, r5
 800cf94:	f7f3 f990 	bl	80002b8 <__aeabi_dsub>
 800cf98:	4642      	mov	r2, r8
 800cf9a:	464b      	mov	r3, r9
 800cf9c:	f7f3 f98c 	bl	80002b8 <__aeabi_dsub>
 800cfa0:	460b      	mov	r3, r1
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	493a      	ldr	r1, [pc, #232]	; (800d090 <__ieee754_pow+0xa48>)
 800cfa6:	2000      	movs	r0, #0
 800cfa8:	f7f3 f986 	bl	80002b8 <__aeabi_dsub>
 800cfac:	ec41 0b10 	vmov	d0, r0, r1
 800cfb0:	ee10 3a90 	vmov	r3, s1
 800cfb4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cfb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cfbc:	da2b      	bge.n	800d016 <__ieee754_pow+0x9ce>
 800cfbe:	4650      	mov	r0, sl
 800cfc0:	f001 fa6e 	bl	800e4a0 <scalbn>
 800cfc4:	ec51 0b10 	vmov	r0, r1, d0
 800cfc8:	ec53 2b18 	vmov	r2, r3, d8
 800cfcc:	f7ff bbed 	b.w	800c7aa <__ieee754_pow+0x162>
 800cfd0:	4b30      	ldr	r3, [pc, #192]	; (800d094 <__ieee754_pow+0xa4c>)
 800cfd2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cfd6:	429e      	cmp	r6, r3
 800cfd8:	f77f af0c 	ble.w	800cdf4 <__ieee754_pow+0x7ac>
 800cfdc:	4b2e      	ldr	r3, [pc, #184]	; (800d098 <__ieee754_pow+0xa50>)
 800cfde:	440b      	add	r3, r1
 800cfe0:	4303      	orrs	r3, r0
 800cfe2:	d009      	beq.n	800cff8 <__ieee754_pow+0x9b0>
 800cfe4:	ec51 0b18 	vmov	r0, r1, d8
 800cfe8:	2200      	movs	r2, #0
 800cfea:	2300      	movs	r3, #0
 800cfec:	f7f3 fd8e 	bl	8000b0c <__aeabi_dcmplt>
 800cff0:	3800      	subs	r0, #0
 800cff2:	bf18      	it	ne
 800cff4:	2001      	movne	r0, #1
 800cff6:	e447      	b.n	800c888 <__ieee754_pow+0x240>
 800cff8:	4622      	mov	r2, r4
 800cffa:	462b      	mov	r3, r5
 800cffc:	f7f3 f95c 	bl	80002b8 <__aeabi_dsub>
 800d000:	4642      	mov	r2, r8
 800d002:	464b      	mov	r3, r9
 800d004:	f7f3 fd96 	bl	8000b34 <__aeabi_dcmpge>
 800d008:	2800      	cmp	r0, #0
 800d00a:	f43f aef3 	beq.w	800cdf4 <__ieee754_pow+0x7ac>
 800d00e:	e7e9      	b.n	800cfe4 <__ieee754_pow+0x99c>
 800d010:	f04f 0a00 	mov.w	sl, #0
 800d014:	e71a      	b.n	800ce4c <__ieee754_pow+0x804>
 800d016:	ec51 0b10 	vmov	r0, r1, d0
 800d01a:	4619      	mov	r1, r3
 800d01c:	e7d4      	b.n	800cfc8 <__ieee754_pow+0x980>
 800d01e:	491c      	ldr	r1, [pc, #112]	; (800d090 <__ieee754_pow+0xa48>)
 800d020:	2000      	movs	r0, #0
 800d022:	f7ff bb30 	b.w	800c686 <__ieee754_pow+0x3e>
 800d026:	2000      	movs	r0, #0
 800d028:	2100      	movs	r1, #0
 800d02a:	f7ff bb2c 	b.w	800c686 <__ieee754_pow+0x3e>
 800d02e:	4630      	mov	r0, r6
 800d030:	4639      	mov	r1, r7
 800d032:	f7ff bb28 	b.w	800c686 <__ieee754_pow+0x3e>
 800d036:	9204      	str	r2, [sp, #16]
 800d038:	f7ff bb7a 	b.w	800c730 <__ieee754_pow+0xe8>
 800d03c:	2300      	movs	r3, #0
 800d03e:	f7ff bb64 	b.w	800c70a <__ieee754_pow+0xc2>
 800d042:	bf00      	nop
 800d044:	f3af 8000 	nop.w
 800d048:	00000000 	.word	0x00000000
 800d04c:	3fe62e43 	.word	0x3fe62e43
 800d050:	fefa39ef 	.word	0xfefa39ef
 800d054:	3fe62e42 	.word	0x3fe62e42
 800d058:	0ca86c39 	.word	0x0ca86c39
 800d05c:	be205c61 	.word	0xbe205c61
 800d060:	72bea4d0 	.word	0x72bea4d0
 800d064:	3e663769 	.word	0x3e663769
 800d068:	c5d26bf1 	.word	0xc5d26bf1
 800d06c:	3ebbbd41 	.word	0x3ebbbd41
 800d070:	af25de2c 	.word	0xaf25de2c
 800d074:	3f11566a 	.word	0x3f11566a
 800d078:	16bebd93 	.word	0x16bebd93
 800d07c:	3f66c16c 	.word	0x3f66c16c
 800d080:	5555553e 	.word	0x5555553e
 800d084:	3fc55555 	.word	0x3fc55555
 800d088:	3fe00000 	.word	0x3fe00000
 800d08c:	000fffff 	.word	0x000fffff
 800d090:	3ff00000 	.word	0x3ff00000
 800d094:	4090cbff 	.word	0x4090cbff
 800d098:	3f6f3400 	.word	0x3f6f3400
 800d09c:	652b82fe 	.word	0x652b82fe
 800d0a0:	3c971547 	.word	0x3c971547
 800d0a4:	00000000 	.word	0x00000000

0800d0a8 <__ieee754_rem_pio2>:
 800d0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ac:	ed2d 8b02 	vpush	{d8}
 800d0b0:	ec55 4b10 	vmov	r4, r5, d0
 800d0b4:	4bca      	ldr	r3, [pc, #808]	; (800d3e0 <__ieee754_rem_pio2+0x338>)
 800d0b6:	b08b      	sub	sp, #44	; 0x2c
 800d0b8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d0bc:	4598      	cmp	r8, r3
 800d0be:	4682      	mov	sl, r0
 800d0c0:	9502      	str	r5, [sp, #8]
 800d0c2:	dc08      	bgt.n	800d0d6 <__ieee754_rem_pio2+0x2e>
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	ed80 0b00 	vstr	d0, [r0]
 800d0cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d0d0:	f04f 0b00 	mov.w	fp, #0
 800d0d4:	e028      	b.n	800d128 <__ieee754_rem_pio2+0x80>
 800d0d6:	4bc3      	ldr	r3, [pc, #780]	; (800d3e4 <__ieee754_rem_pio2+0x33c>)
 800d0d8:	4598      	cmp	r8, r3
 800d0da:	dc78      	bgt.n	800d1ce <__ieee754_rem_pio2+0x126>
 800d0dc:	9b02      	ldr	r3, [sp, #8]
 800d0de:	4ec2      	ldr	r6, [pc, #776]	; (800d3e8 <__ieee754_rem_pio2+0x340>)
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	ee10 0a10 	vmov	r0, s0
 800d0e6:	a3b0      	add	r3, pc, #704	; (adr r3, 800d3a8 <__ieee754_rem_pio2+0x300>)
 800d0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ec:	4629      	mov	r1, r5
 800d0ee:	dd39      	ble.n	800d164 <__ieee754_rem_pio2+0xbc>
 800d0f0:	f7f3 f8e2 	bl	80002b8 <__aeabi_dsub>
 800d0f4:	45b0      	cmp	r8, r6
 800d0f6:	4604      	mov	r4, r0
 800d0f8:	460d      	mov	r5, r1
 800d0fa:	d01b      	beq.n	800d134 <__ieee754_rem_pio2+0x8c>
 800d0fc:	a3ac      	add	r3, pc, #688	; (adr r3, 800d3b0 <__ieee754_rem_pio2+0x308>)
 800d0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d102:	f7f3 f8d9 	bl	80002b8 <__aeabi_dsub>
 800d106:	4602      	mov	r2, r0
 800d108:	460b      	mov	r3, r1
 800d10a:	e9ca 2300 	strd	r2, r3, [sl]
 800d10e:	4620      	mov	r0, r4
 800d110:	4629      	mov	r1, r5
 800d112:	f7f3 f8d1 	bl	80002b8 <__aeabi_dsub>
 800d116:	a3a6      	add	r3, pc, #664	; (adr r3, 800d3b0 <__ieee754_rem_pio2+0x308>)
 800d118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11c:	f7f3 f8cc 	bl	80002b8 <__aeabi_dsub>
 800d120:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d124:	f04f 0b01 	mov.w	fp, #1
 800d128:	4658      	mov	r0, fp
 800d12a:	b00b      	add	sp, #44	; 0x2c
 800d12c:	ecbd 8b02 	vpop	{d8}
 800d130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d134:	a3a0      	add	r3, pc, #640	; (adr r3, 800d3b8 <__ieee754_rem_pio2+0x310>)
 800d136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13a:	f7f3 f8bd 	bl	80002b8 <__aeabi_dsub>
 800d13e:	a3a0      	add	r3, pc, #640	; (adr r3, 800d3c0 <__ieee754_rem_pio2+0x318>)
 800d140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d144:	4604      	mov	r4, r0
 800d146:	460d      	mov	r5, r1
 800d148:	f7f3 f8b6 	bl	80002b8 <__aeabi_dsub>
 800d14c:	4602      	mov	r2, r0
 800d14e:	460b      	mov	r3, r1
 800d150:	e9ca 2300 	strd	r2, r3, [sl]
 800d154:	4620      	mov	r0, r4
 800d156:	4629      	mov	r1, r5
 800d158:	f7f3 f8ae 	bl	80002b8 <__aeabi_dsub>
 800d15c:	a398      	add	r3, pc, #608	; (adr r3, 800d3c0 <__ieee754_rem_pio2+0x318>)
 800d15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d162:	e7db      	b.n	800d11c <__ieee754_rem_pio2+0x74>
 800d164:	f7f3 f8aa 	bl	80002bc <__adddf3>
 800d168:	45b0      	cmp	r8, r6
 800d16a:	4604      	mov	r4, r0
 800d16c:	460d      	mov	r5, r1
 800d16e:	d016      	beq.n	800d19e <__ieee754_rem_pio2+0xf6>
 800d170:	a38f      	add	r3, pc, #572	; (adr r3, 800d3b0 <__ieee754_rem_pio2+0x308>)
 800d172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d176:	f7f3 f8a1 	bl	80002bc <__adddf3>
 800d17a:	4602      	mov	r2, r0
 800d17c:	460b      	mov	r3, r1
 800d17e:	e9ca 2300 	strd	r2, r3, [sl]
 800d182:	4620      	mov	r0, r4
 800d184:	4629      	mov	r1, r5
 800d186:	f7f3 f897 	bl	80002b8 <__aeabi_dsub>
 800d18a:	a389      	add	r3, pc, #548	; (adr r3, 800d3b0 <__ieee754_rem_pio2+0x308>)
 800d18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d190:	f7f3 f894 	bl	80002bc <__adddf3>
 800d194:	f04f 3bff 	mov.w	fp, #4294967295
 800d198:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d19c:	e7c4      	b.n	800d128 <__ieee754_rem_pio2+0x80>
 800d19e:	a386      	add	r3, pc, #536	; (adr r3, 800d3b8 <__ieee754_rem_pio2+0x310>)
 800d1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a4:	f7f3 f88a 	bl	80002bc <__adddf3>
 800d1a8:	a385      	add	r3, pc, #532	; (adr r3, 800d3c0 <__ieee754_rem_pio2+0x318>)
 800d1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ae:	4604      	mov	r4, r0
 800d1b0:	460d      	mov	r5, r1
 800d1b2:	f7f3 f883 	bl	80002bc <__adddf3>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	460b      	mov	r3, r1
 800d1ba:	e9ca 2300 	strd	r2, r3, [sl]
 800d1be:	4620      	mov	r0, r4
 800d1c0:	4629      	mov	r1, r5
 800d1c2:	f7f3 f879 	bl	80002b8 <__aeabi_dsub>
 800d1c6:	a37e      	add	r3, pc, #504	; (adr r3, 800d3c0 <__ieee754_rem_pio2+0x318>)
 800d1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1cc:	e7e0      	b.n	800d190 <__ieee754_rem_pio2+0xe8>
 800d1ce:	4b87      	ldr	r3, [pc, #540]	; (800d3ec <__ieee754_rem_pio2+0x344>)
 800d1d0:	4598      	cmp	r8, r3
 800d1d2:	f300 80d9 	bgt.w	800d388 <__ieee754_rem_pio2+0x2e0>
 800d1d6:	f001 f8cf 	bl	800e378 <fabs>
 800d1da:	ec55 4b10 	vmov	r4, r5, d0
 800d1de:	ee10 0a10 	vmov	r0, s0
 800d1e2:	a379      	add	r3, pc, #484	; (adr r3, 800d3c8 <__ieee754_rem_pio2+0x320>)
 800d1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e8:	4629      	mov	r1, r5
 800d1ea:	f7f3 fa1d 	bl	8000628 <__aeabi_dmul>
 800d1ee:	4b80      	ldr	r3, [pc, #512]	; (800d3f0 <__ieee754_rem_pio2+0x348>)
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	f7f3 f863 	bl	80002bc <__adddf3>
 800d1f6:	f7f3 fcc7 	bl	8000b88 <__aeabi_d2iz>
 800d1fa:	4683      	mov	fp, r0
 800d1fc:	f7f3 f9aa 	bl	8000554 <__aeabi_i2d>
 800d200:	4602      	mov	r2, r0
 800d202:	460b      	mov	r3, r1
 800d204:	ec43 2b18 	vmov	d8, r2, r3
 800d208:	a367      	add	r3, pc, #412	; (adr r3, 800d3a8 <__ieee754_rem_pio2+0x300>)
 800d20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20e:	f7f3 fa0b 	bl	8000628 <__aeabi_dmul>
 800d212:	4602      	mov	r2, r0
 800d214:	460b      	mov	r3, r1
 800d216:	4620      	mov	r0, r4
 800d218:	4629      	mov	r1, r5
 800d21a:	f7f3 f84d 	bl	80002b8 <__aeabi_dsub>
 800d21e:	a364      	add	r3, pc, #400	; (adr r3, 800d3b0 <__ieee754_rem_pio2+0x308>)
 800d220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d224:	4606      	mov	r6, r0
 800d226:	460f      	mov	r7, r1
 800d228:	ec51 0b18 	vmov	r0, r1, d8
 800d22c:	f7f3 f9fc 	bl	8000628 <__aeabi_dmul>
 800d230:	f1bb 0f1f 	cmp.w	fp, #31
 800d234:	4604      	mov	r4, r0
 800d236:	460d      	mov	r5, r1
 800d238:	dc0d      	bgt.n	800d256 <__ieee754_rem_pio2+0x1ae>
 800d23a:	4b6e      	ldr	r3, [pc, #440]	; (800d3f4 <__ieee754_rem_pio2+0x34c>)
 800d23c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d244:	4543      	cmp	r3, r8
 800d246:	d006      	beq.n	800d256 <__ieee754_rem_pio2+0x1ae>
 800d248:	4622      	mov	r2, r4
 800d24a:	462b      	mov	r3, r5
 800d24c:	4630      	mov	r0, r6
 800d24e:	4639      	mov	r1, r7
 800d250:	f7f3 f832 	bl	80002b8 <__aeabi_dsub>
 800d254:	e00f      	b.n	800d276 <__ieee754_rem_pio2+0x1ce>
 800d256:	462b      	mov	r3, r5
 800d258:	4622      	mov	r2, r4
 800d25a:	4630      	mov	r0, r6
 800d25c:	4639      	mov	r1, r7
 800d25e:	f7f3 f82b 	bl	80002b8 <__aeabi_dsub>
 800d262:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d266:	9303      	str	r3, [sp, #12]
 800d268:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d26c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d270:	f1b8 0f10 	cmp.w	r8, #16
 800d274:	dc02      	bgt.n	800d27c <__ieee754_rem_pio2+0x1d4>
 800d276:	e9ca 0100 	strd	r0, r1, [sl]
 800d27a:	e039      	b.n	800d2f0 <__ieee754_rem_pio2+0x248>
 800d27c:	a34e      	add	r3, pc, #312	; (adr r3, 800d3b8 <__ieee754_rem_pio2+0x310>)
 800d27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d282:	ec51 0b18 	vmov	r0, r1, d8
 800d286:	f7f3 f9cf 	bl	8000628 <__aeabi_dmul>
 800d28a:	4604      	mov	r4, r0
 800d28c:	460d      	mov	r5, r1
 800d28e:	4602      	mov	r2, r0
 800d290:	460b      	mov	r3, r1
 800d292:	4630      	mov	r0, r6
 800d294:	4639      	mov	r1, r7
 800d296:	f7f3 f80f 	bl	80002b8 <__aeabi_dsub>
 800d29a:	4602      	mov	r2, r0
 800d29c:	460b      	mov	r3, r1
 800d29e:	4680      	mov	r8, r0
 800d2a0:	4689      	mov	r9, r1
 800d2a2:	4630      	mov	r0, r6
 800d2a4:	4639      	mov	r1, r7
 800d2a6:	f7f3 f807 	bl	80002b8 <__aeabi_dsub>
 800d2aa:	4622      	mov	r2, r4
 800d2ac:	462b      	mov	r3, r5
 800d2ae:	f7f3 f803 	bl	80002b8 <__aeabi_dsub>
 800d2b2:	a343      	add	r3, pc, #268	; (adr r3, 800d3c0 <__ieee754_rem_pio2+0x318>)
 800d2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b8:	4604      	mov	r4, r0
 800d2ba:	460d      	mov	r5, r1
 800d2bc:	ec51 0b18 	vmov	r0, r1, d8
 800d2c0:	f7f3 f9b2 	bl	8000628 <__aeabi_dmul>
 800d2c4:	4622      	mov	r2, r4
 800d2c6:	462b      	mov	r3, r5
 800d2c8:	f7f2 fff6 	bl	80002b8 <__aeabi_dsub>
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	460b      	mov	r3, r1
 800d2d0:	4604      	mov	r4, r0
 800d2d2:	460d      	mov	r5, r1
 800d2d4:	4640      	mov	r0, r8
 800d2d6:	4649      	mov	r1, r9
 800d2d8:	f7f2 ffee 	bl	80002b8 <__aeabi_dsub>
 800d2dc:	9a03      	ldr	r2, [sp, #12]
 800d2de:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d2e2:	1ad3      	subs	r3, r2, r3
 800d2e4:	2b31      	cmp	r3, #49	; 0x31
 800d2e6:	dc24      	bgt.n	800d332 <__ieee754_rem_pio2+0x28a>
 800d2e8:	e9ca 0100 	strd	r0, r1, [sl]
 800d2ec:	4646      	mov	r6, r8
 800d2ee:	464f      	mov	r7, r9
 800d2f0:	e9da 8900 	ldrd	r8, r9, [sl]
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	4642      	mov	r2, r8
 800d2f8:	464b      	mov	r3, r9
 800d2fa:	4639      	mov	r1, r7
 800d2fc:	f7f2 ffdc 	bl	80002b8 <__aeabi_dsub>
 800d300:	462b      	mov	r3, r5
 800d302:	4622      	mov	r2, r4
 800d304:	f7f2 ffd8 	bl	80002b8 <__aeabi_dsub>
 800d308:	9b02      	ldr	r3, [sp, #8]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d310:	f6bf af0a 	bge.w	800d128 <__ieee754_rem_pio2+0x80>
 800d314:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d318:	f8ca 3004 	str.w	r3, [sl, #4]
 800d31c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d320:	f8ca 8000 	str.w	r8, [sl]
 800d324:	f8ca 0008 	str.w	r0, [sl, #8]
 800d328:	f8ca 300c 	str.w	r3, [sl, #12]
 800d32c:	f1cb 0b00 	rsb	fp, fp, #0
 800d330:	e6fa      	b.n	800d128 <__ieee754_rem_pio2+0x80>
 800d332:	a327      	add	r3, pc, #156	; (adr r3, 800d3d0 <__ieee754_rem_pio2+0x328>)
 800d334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d338:	ec51 0b18 	vmov	r0, r1, d8
 800d33c:	f7f3 f974 	bl	8000628 <__aeabi_dmul>
 800d340:	4604      	mov	r4, r0
 800d342:	460d      	mov	r5, r1
 800d344:	4602      	mov	r2, r0
 800d346:	460b      	mov	r3, r1
 800d348:	4640      	mov	r0, r8
 800d34a:	4649      	mov	r1, r9
 800d34c:	f7f2 ffb4 	bl	80002b8 <__aeabi_dsub>
 800d350:	4602      	mov	r2, r0
 800d352:	460b      	mov	r3, r1
 800d354:	4606      	mov	r6, r0
 800d356:	460f      	mov	r7, r1
 800d358:	4640      	mov	r0, r8
 800d35a:	4649      	mov	r1, r9
 800d35c:	f7f2 ffac 	bl	80002b8 <__aeabi_dsub>
 800d360:	4622      	mov	r2, r4
 800d362:	462b      	mov	r3, r5
 800d364:	f7f2 ffa8 	bl	80002b8 <__aeabi_dsub>
 800d368:	a31b      	add	r3, pc, #108	; (adr r3, 800d3d8 <__ieee754_rem_pio2+0x330>)
 800d36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d36e:	4604      	mov	r4, r0
 800d370:	460d      	mov	r5, r1
 800d372:	ec51 0b18 	vmov	r0, r1, d8
 800d376:	f7f3 f957 	bl	8000628 <__aeabi_dmul>
 800d37a:	4622      	mov	r2, r4
 800d37c:	462b      	mov	r3, r5
 800d37e:	f7f2 ff9b 	bl	80002b8 <__aeabi_dsub>
 800d382:	4604      	mov	r4, r0
 800d384:	460d      	mov	r5, r1
 800d386:	e75f      	b.n	800d248 <__ieee754_rem_pio2+0x1a0>
 800d388:	4b1b      	ldr	r3, [pc, #108]	; (800d3f8 <__ieee754_rem_pio2+0x350>)
 800d38a:	4598      	cmp	r8, r3
 800d38c:	dd36      	ble.n	800d3fc <__ieee754_rem_pio2+0x354>
 800d38e:	ee10 2a10 	vmov	r2, s0
 800d392:	462b      	mov	r3, r5
 800d394:	4620      	mov	r0, r4
 800d396:	4629      	mov	r1, r5
 800d398:	f7f2 ff8e 	bl	80002b8 <__aeabi_dsub>
 800d39c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d3a0:	e9ca 0100 	strd	r0, r1, [sl]
 800d3a4:	e694      	b.n	800d0d0 <__ieee754_rem_pio2+0x28>
 800d3a6:	bf00      	nop
 800d3a8:	54400000 	.word	0x54400000
 800d3ac:	3ff921fb 	.word	0x3ff921fb
 800d3b0:	1a626331 	.word	0x1a626331
 800d3b4:	3dd0b461 	.word	0x3dd0b461
 800d3b8:	1a600000 	.word	0x1a600000
 800d3bc:	3dd0b461 	.word	0x3dd0b461
 800d3c0:	2e037073 	.word	0x2e037073
 800d3c4:	3ba3198a 	.word	0x3ba3198a
 800d3c8:	6dc9c883 	.word	0x6dc9c883
 800d3cc:	3fe45f30 	.word	0x3fe45f30
 800d3d0:	2e000000 	.word	0x2e000000
 800d3d4:	3ba3198a 	.word	0x3ba3198a
 800d3d8:	252049c1 	.word	0x252049c1
 800d3dc:	397b839a 	.word	0x397b839a
 800d3e0:	3fe921fb 	.word	0x3fe921fb
 800d3e4:	4002d97b 	.word	0x4002d97b
 800d3e8:	3ff921fb 	.word	0x3ff921fb
 800d3ec:	413921fb 	.word	0x413921fb
 800d3f0:	3fe00000 	.word	0x3fe00000
 800d3f4:	0800eda0 	.word	0x0800eda0
 800d3f8:	7fefffff 	.word	0x7fefffff
 800d3fc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d400:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d404:	ee10 0a10 	vmov	r0, s0
 800d408:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d40c:	ee10 6a10 	vmov	r6, s0
 800d410:	460f      	mov	r7, r1
 800d412:	f7f3 fbb9 	bl	8000b88 <__aeabi_d2iz>
 800d416:	f7f3 f89d 	bl	8000554 <__aeabi_i2d>
 800d41a:	4602      	mov	r2, r0
 800d41c:	460b      	mov	r3, r1
 800d41e:	4630      	mov	r0, r6
 800d420:	4639      	mov	r1, r7
 800d422:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d426:	f7f2 ff47 	bl	80002b8 <__aeabi_dsub>
 800d42a:	4b23      	ldr	r3, [pc, #140]	; (800d4b8 <__ieee754_rem_pio2+0x410>)
 800d42c:	2200      	movs	r2, #0
 800d42e:	f7f3 f8fb 	bl	8000628 <__aeabi_dmul>
 800d432:	460f      	mov	r7, r1
 800d434:	4606      	mov	r6, r0
 800d436:	f7f3 fba7 	bl	8000b88 <__aeabi_d2iz>
 800d43a:	f7f3 f88b 	bl	8000554 <__aeabi_i2d>
 800d43e:	4602      	mov	r2, r0
 800d440:	460b      	mov	r3, r1
 800d442:	4630      	mov	r0, r6
 800d444:	4639      	mov	r1, r7
 800d446:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d44a:	f7f2 ff35 	bl	80002b8 <__aeabi_dsub>
 800d44e:	4b1a      	ldr	r3, [pc, #104]	; (800d4b8 <__ieee754_rem_pio2+0x410>)
 800d450:	2200      	movs	r2, #0
 800d452:	f7f3 f8e9 	bl	8000628 <__aeabi_dmul>
 800d456:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d45a:	ad04      	add	r5, sp, #16
 800d45c:	f04f 0803 	mov.w	r8, #3
 800d460:	46a9      	mov	r9, r5
 800d462:	2600      	movs	r6, #0
 800d464:	2700      	movs	r7, #0
 800d466:	4632      	mov	r2, r6
 800d468:	463b      	mov	r3, r7
 800d46a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d46e:	46c3      	mov	fp, r8
 800d470:	3d08      	subs	r5, #8
 800d472:	f108 38ff 	add.w	r8, r8, #4294967295
 800d476:	f7f3 fb3f 	bl	8000af8 <__aeabi_dcmpeq>
 800d47a:	2800      	cmp	r0, #0
 800d47c:	d1f3      	bne.n	800d466 <__ieee754_rem_pio2+0x3be>
 800d47e:	4b0f      	ldr	r3, [pc, #60]	; (800d4bc <__ieee754_rem_pio2+0x414>)
 800d480:	9301      	str	r3, [sp, #4]
 800d482:	2302      	movs	r3, #2
 800d484:	9300      	str	r3, [sp, #0]
 800d486:	4622      	mov	r2, r4
 800d488:	465b      	mov	r3, fp
 800d48a:	4651      	mov	r1, sl
 800d48c:	4648      	mov	r0, r9
 800d48e:	f000 f993 	bl	800d7b8 <__kernel_rem_pio2>
 800d492:	9b02      	ldr	r3, [sp, #8]
 800d494:	2b00      	cmp	r3, #0
 800d496:	4683      	mov	fp, r0
 800d498:	f6bf ae46 	bge.w	800d128 <__ieee754_rem_pio2+0x80>
 800d49c:	e9da 2100 	ldrd	r2, r1, [sl]
 800d4a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d4a4:	e9ca 2300 	strd	r2, r3, [sl]
 800d4a8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d4ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d4b0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d4b4:	e73a      	b.n	800d32c <__ieee754_rem_pio2+0x284>
 800d4b6:	bf00      	nop
 800d4b8:	41700000 	.word	0x41700000
 800d4bc:	0800ee20 	.word	0x0800ee20

0800d4c0 <__ieee754_sqrt>:
 800d4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4c4:	ec55 4b10 	vmov	r4, r5, d0
 800d4c8:	4e55      	ldr	r6, [pc, #340]	; (800d620 <__ieee754_sqrt+0x160>)
 800d4ca:	43ae      	bics	r6, r5
 800d4cc:	ee10 0a10 	vmov	r0, s0
 800d4d0:	ee10 3a10 	vmov	r3, s0
 800d4d4:	462a      	mov	r2, r5
 800d4d6:	4629      	mov	r1, r5
 800d4d8:	d110      	bne.n	800d4fc <__ieee754_sqrt+0x3c>
 800d4da:	ee10 2a10 	vmov	r2, s0
 800d4de:	462b      	mov	r3, r5
 800d4e0:	f7f3 f8a2 	bl	8000628 <__aeabi_dmul>
 800d4e4:	4602      	mov	r2, r0
 800d4e6:	460b      	mov	r3, r1
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	4629      	mov	r1, r5
 800d4ec:	f7f2 fee6 	bl	80002bc <__adddf3>
 800d4f0:	4604      	mov	r4, r0
 800d4f2:	460d      	mov	r5, r1
 800d4f4:	ec45 4b10 	vmov	d0, r4, r5
 800d4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4fc:	2d00      	cmp	r5, #0
 800d4fe:	dc10      	bgt.n	800d522 <__ieee754_sqrt+0x62>
 800d500:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d504:	4330      	orrs	r0, r6
 800d506:	d0f5      	beq.n	800d4f4 <__ieee754_sqrt+0x34>
 800d508:	b15d      	cbz	r5, 800d522 <__ieee754_sqrt+0x62>
 800d50a:	ee10 2a10 	vmov	r2, s0
 800d50e:	462b      	mov	r3, r5
 800d510:	ee10 0a10 	vmov	r0, s0
 800d514:	f7f2 fed0 	bl	80002b8 <__aeabi_dsub>
 800d518:	4602      	mov	r2, r0
 800d51a:	460b      	mov	r3, r1
 800d51c:	f7f3 f9ae 	bl	800087c <__aeabi_ddiv>
 800d520:	e7e6      	b.n	800d4f0 <__ieee754_sqrt+0x30>
 800d522:	1512      	asrs	r2, r2, #20
 800d524:	d074      	beq.n	800d610 <__ieee754_sqrt+0x150>
 800d526:	07d4      	lsls	r4, r2, #31
 800d528:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d52c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d534:	bf5e      	ittt	pl
 800d536:	0fda      	lsrpl	r2, r3, #31
 800d538:	005b      	lslpl	r3, r3, #1
 800d53a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d53e:	2400      	movs	r4, #0
 800d540:	0fda      	lsrs	r2, r3, #31
 800d542:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d546:	107f      	asrs	r7, r7, #1
 800d548:	005b      	lsls	r3, r3, #1
 800d54a:	2516      	movs	r5, #22
 800d54c:	4620      	mov	r0, r4
 800d54e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d552:	1886      	adds	r6, r0, r2
 800d554:	428e      	cmp	r6, r1
 800d556:	bfde      	ittt	le
 800d558:	1b89      	suble	r1, r1, r6
 800d55a:	18b0      	addle	r0, r6, r2
 800d55c:	18a4      	addle	r4, r4, r2
 800d55e:	0049      	lsls	r1, r1, #1
 800d560:	3d01      	subs	r5, #1
 800d562:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d566:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d56a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d56e:	d1f0      	bne.n	800d552 <__ieee754_sqrt+0x92>
 800d570:	462a      	mov	r2, r5
 800d572:	f04f 0e20 	mov.w	lr, #32
 800d576:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d57a:	4281      	cmp	r1, r0
 800d57c:	eb06 0c05 	add.w	ip, r6, r5
 800d580:	dc02      	bgt.n	800d588 <__ieee754_sqrt+0xc8>
 800d582:	d113      	bne.n	800d5ac <__ieee754_sqrt+0xec>
 800d584:	459c      	cmp	ip, r3
 800d586:	d811      	bhi.n	800d5ac <__ieee754_sqrt+0xec>
 800d588:	f1bc 0f00 	cmp.w	ip, #0
 800d58c:	eb0c 0506 	add.w	r5, ip, r6
 800d590:	da43      	bge.n	800d61a <__ieee754_sqrt+0x15a>
 800d592:	2d00      	cmp	r5, #0
 800d594:	db41      	blt.n	800d61a <__ieee754_sqrt+0x15a>
 800d596:	f100 0801 	add.w	r8, r0, #1
 800d59a:	1a09      	subs	r1, r1, r0
 800d59c:	459c      	cmp	ip, r3
 800d59e:	bf88      	it	hi
 800d5a0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800d5a4:	eba3 030c 	sub.w	r3, r3, ip
 800d5a8:	4432      	add	r2, r6
 800d5aa:	4640      	mov	r0, r8
 800d5ac:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d5b0:	f1be 0e01 	subs.w	lr, lr, #1
 800d5b4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d5b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d5bc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d5c0:	d1db      	bne.n	800d57a <__ieee754_sqrt+0xba>
 800d5c2:	430b      	orrs	r3, r1
 800d5c4:	d006      	beq.n	800d5d4 <__ieee754_sqrt+0x114>
 800d5c6:	1c50      	adds	r0, r2, #1
 800d5c8:	bf13      	iteet	ne
 800d5ca:	3201      	addne	r2, #1
 800d5cc:	3401      	addeq	r4, #1
 800d5ce:	4672      	moveq	r2, lr
 800d5d0:	f022 0201 	bicne.w	r2, r2, #1
 800d5d4:	1063      	asrs	r3, r4, #1
 800d5d6:	0852      	lsrs	r2, r2, #1
 800d5d8:	07e1      	lsls	r1, r4, #31
 800d5da:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d5de:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d5e2:	bf48      	it	mi
 800d5e4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d5e8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d5ec:	4614      	mov	r4, r2
 800d5ee:	e781      	b.n	800d4f4 <__ieee754_sqrt+0x34>
 800d5f0:	0ad9      	lsrs	r1, r3, #11
 800d5f2:	3815      	subs	r0, #21
 800d5f4:	055b      	lsls	r3, r3, #21
 800d5f6:	2900      	cmp	r1, #0
 800d5f8:	d0fa      	beq.n	800d5f0 <__ieee754_sqrt+0x130>
 800d5fa:	02cd      	lsls	r5, r1, #11
 800d5fc:	d50a      	bpl.n	800d614 <__ieee754_sqrt+0x154>
 800d5fe:	f1c2 0420 	rsb	r4, r2, #32
 800d602:	fa23 f404 	lsr.w	r4, r3, r4
 800d606:	1e55      	subs	r5, r2, #1
 800d608:	4093      	lsls	r3, r2
 800d60a:	4321      	orrs	r1, r4
 800d60c:	1b42      	subs	r2, r0, r5
 800d60e:	e78a      	b.n	800d526 <__ieee754_sqrt+0x66>
 800d610:	4610      	mov	r0, r2
 800d612:	e7f0      	b.n	800d5f6 <__ieee754_sqrt+0x136>
 800d614:	0049      	lsls	r1, r1, #1
 800d616:	3201      	adds	r2, #1
 800d618:	e7ef      	b.n	800d5fa <__ieee754_sqrt+0x13a>
 800d61a:	4680      	mov	r8, r0
 800d61c:	e7bd      	b.n	800d59a <__ieee754_sqrt+0xda>
 800d61e:	bf00      	nop
 800d620:	7ff00000 	.word	0x7ff00000
 800d624:	00000000 	.word	0x00000000

0800d628 <__kernel_cos>:
 800d628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d62c:	ec57 6b10 	vmov	r6, r7, d0
 800d630:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d634:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d638:	ed8d 1b00 	vstr	d1, [sp]
 800d63c:	da07      	bge.n	800d64e <__kernel_cos+0x26>
 800d63e:	ee10 0a10 	vmov	r0, s0
 800d642:	4639      	mov	r1, r7
 800d644:	f7f3 faa0 	bl	8000b88 <__aeabi_d2iz>
 800d648:	2800      	cmp	r0, #0
 800d64a:	f000 8088 	beq.w	800d75e <__kernel_cos+0x136>
 800d64e:	4632      	mov	r2, r6
 800d650:	463b      	mov	r3, r7
 800d652:	4630      	mov	r0, r6
 800d654:	4639      	mov	r1, r7
 800d656:	f7f2 ffe7 	bl	8000628 <__aeabi_dmul>
 800d65a:	4b51      	ldr	r3, [pc, #324]	; (800d7a0 <__kernel_cos+0x178>)
 800d65c:	2200      	movs	r2, #0
 800d65e:	4604      	mov	r4, r0
 800d660:	460d      	mov	r5, r1
 800d662:	f7f2 ffe1 	bl	8000628 <__aeabi_dmul>
 800d666:	a340      	add	r3, pc, #256	; (adr r3, 800d768 <__kernel_cos+0x140>)
 800d668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d66c:	4682      	mov	sl, r0
 800d66e:	468b      	mov	fp, r1
 800d670:	4620      	mov	r0, r4
 800d672:	4629      	mov	r1, r5
 800d674:	f7f2 ffd8 	bl	8000628 <__aeabi_dmul>
 800d678:	a33d      	add	r3, pc, #244	; (adr r3, 800d770 <__kernel_cos+0x148>)
 800d67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67e:	f7f2 fe1d 	bl	80002bc <__adddf3>
 800d682:	4622      	mov	r2, r4
 800d684:	462b      	mov	r3, r5
 800d686:	f7f2 ffcf 	bl	8000628 <__aeabi_dmul>
 800d68a:	a33b      	add	r3, pc, #236	; (adr r3, 800d778 <__kernel_cos+0x150>)
 800d68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d690:	f7f2 fe12 	bl	80002b8 <__aeabi_dsub>
 800d694:	4622      	mov	r2, r4
 800d696:	462b      	mov	r3, r5
 800d698:	f7f2 ffc6 	bl	8000628 <__aeabi_dmul>
 800d69c:	a338      	add	r3, pc, #224	; (adr r3, 800d780 <__kernel_cos+0x158>)
 800d69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a2:	f7f2 fe0b 	bl	80002bc <__adddf3>
 800d6a6:	4622      	mov	r2, r4
 800d6a8:	462b      	mov	r3, r5
 800d6aa:	f7f2 ffbd 	bl	8000628 <__aeabi_dmul>
 800d6ae:	a336      	add	r3, pc, #216	; (adr r3, 800d788 <__kernel_cos+0x160>)
 800d6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b4:	f7f2 fe00 	bl	80002b8 <__aeabi_dsub>
 800d6b8:	4622      	mov	r2, r4
 800d6ba:	462b      	mov	r3, r5
 800d6bc:	f7f2 ffb4 	bl	8000628 <__aeabi_dmul>
 800d6c0:	a333      	add	r3, pc, #204	; (adr r3, 800d790 <__kernel_cos+0x168>)
 800d6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c6:	f7f2 fdf9 	bl	80002bc <__adddf3>
 800d6ca:	4622      	mov	r2, r4
 800d6cc:	462b      	mov	r3, r5
 800d6ce:	f7f2 ffab 	bl	8000628 <__aeabi_dmul>
 800d6d2:	4622      	mov	r2, r4
 800d6d4:	462b      	mov	r3, r5
 800d6d6:	f7f2 ffa7 	bl	8000628 <__aeabi_dmul>
 800d6da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6de:	4604      	mov	r4, r0
 800d6e0:	460d      	mov	r5, r1
 800d6e2:	4630      	mov	r0, r6
 800d6e4:	4639      	mov	r1, r7
 800d6e6:	f7f2 ff9f 	bl	8000628 <__aeabi_dmul>
 800d6ea:	460b      	mov	r3, r1
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	4629      	mov	r1, r5
 800d6f0:	4620      	mov	r0, r4
 800d6f2:	f7f2 fde1 	bl	80002b8 <__aeabi_dsub>
 800d6f6:	4b2b      	ldr	r3, [pc, #172]	; (800d7a4 <__kernel_cos+0x17c>)
 800d6f8:	4598      	cmp	r8, r3
 800d6fa:	4606      	mov	r6, r0
 800d6fc:	460f      	mov	r7, r1
 800d6fe:	dc10      	bgt.n	800d722 <__kernel_cos+0xfa>
 800d700:	4602      	mov	r2, r0
 800d702:	460b      	mov	r3, r1
 800d704:	4650      	mov	r0, sl
 800d706:	4659      	mov	r1, fp
 800d708:	f7f2 fdd6 	bl	80002b8 <__aeabi_dsub>
 800d70c:	460b      	mov	r3, r1
 800d70e:	4926      	ldr	r1, [pc, #152]	; (800d7a8 <__kernel_cos+0x180>)
 800d710:	4602      	mov	r2, r0
 800d712:	2000      	movs	r0, #0
 800d714:	f7f2 fdd0 	bl	80002b8 <__aeabi_dsub>
 800d718:	ec41 0b10 	vmov	d0, r0, r1
 800d71c:	b003      	add	sp, #12
 800d71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d722:	4b22      	ldr	r3, [pc, #136]	; (800d7ac <__kernel_cos+0x184>)
 800d724:	4920      	ldr	r1, [pc, #128]	; (800d7a8 <__kernel_cos+0x180>)
 800d726:	4598      	cmp	r8, r3
 800d728:	bfcc      	ite	gt
 800d72a:	4d21      	ldrgt	r5, [pc, #132]	; (800d7b0 <__kernel_cos+0x188>)
 800d72c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d730:	2400      	movs	r4, #0
 800d732:	4622      	mov	r2, r4
 800d734:	462b      	mov	r3, r5
 800d736:	2000      	movs	r0, #0
 800d738:	f7f2 fdbe 	bl	80002b8 <__aeabi_dsub>
 800d73c:	4622      	mov	r2, r4
 800d73e:	4680      	mov	r8, r0
 800d740:	4689      	mov	r9, r1
 800d742:	462b      	mov	r3, r5
 800d744:	4650      	mov	r0, sl
 800d746:	4659      	mov	r1, fp
 800d748:	f7f2 fdb6 	bl	80002b8 <__aeabi_dsub>
 800d74c:	4632      	mov	r2, r6
 800d74e:	463b      	mov	r3, r7
 800d750:	f7f2 fdb2 	bl	80002b8 <__aeabi_dsub>
 800d754:	4602      	mov	r2, r0
 800d756:	460b      	mov	r3, r1
 800d758:	4640      	mov	r0, r8
 800d75a:	4649      	mov	r1, r9
 800d75c:	e7da      	b.n	800d714 <__kernel_cos+0xec>
 800d75e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d798 <__kernel_cos+0x170>
 800d762:	e7db      	b.n	800d71c <__kernel_cos+0xf4>
 800d764:	f3af 8000 	nop.w
 800d768:	be8838d4 	.word	0xbe8838d4
 800d76c:	bda8fae9 	.word	0xbda8fae9
 800d770:	bdb4b1c4 	.word	0xbdb4b1c4
 800d774:	3e21ee9e 	.word	0x3e21ee9e
 800d778:	809c52ad 	.word	0x809c52ad
 800d77c:	3e927e4f 	.word	0x3e927e4f
 800d780:	19cb1590 	.word	0x19cb1590
 800d784:	3efa01a0 	.word	0x3efa01a0
 800d788:	16c15177 	.word	0x16c15177
 800d78c:	3f56c16c 	.word	0x3f56c16c
 800d790:	5555554c 	.word	0x5555554c
 800d794:	3fa55555 	.word	0x3fa55555
 800d798:	00000000 	.word	0x00000000
 800d79c:	3ff00000 	.word	0x3ff00000
 800d7a0:	3fe00000 	.word	0x3fe00000
 800d7a4:	3fd33332 	.word	0x3fd33332
 800d7a8:	3ff00000 	.word	0x3ff00000
 800d7ac:	3fe90000 	.word	0x3fe90000
 800d7b0:	3fd20000 	.word	0x3fd20000
 800d7b4:	00000000 	.word	0x00000000

0800d7b8 <__kernel_rem_pio2>:
 800d7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7bc:	ed2d 8b02 	vpush	{d8}
 800d7c0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d7c4:	f112 0f14 	cmn.w	r2, #20
 800d7c8:	9308      	str	r3, [sp, #32]
 800d7ca:	9101      	str	r1, [sp, #4]
 800d7cc:	4bc4      	ldr	r3, [pc, #784]	; (800dae0 <__kernel_rem_pio2+0x328>)
 800d7ce:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d7d0:	900b      	str	r0, [sp, #44]	; 0x2c
 800d7d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d7d6:	9302      	str	r3, [sp, #8]
 800d7d8:	9b08      	ldr	r3, [sp, #32]
 800d7da:	f103 33ff 	add.w	r3, r3, #4294967295
 800d7de:	bfa8      	it	ge
 800d7e0:	1ed4      	subge	r4, r2, #3
 800d7e2:	9306      	str	r3, [sp, #24]
 800d7e4:	bfb2      	itee	lt
 800d7e6:	2400      	movlt	r4, #0
 800d7e8:	2318      	movge	r3, #24
 800d7ea:	fb94 f4f3 	sdivge	r4, r4, r3
 800d7ee:	f06f 0317 	mvn.w	r3, #23
 800d7f2:	fb04 3303 	mla	r3, r4, r3, r3
 800d7f6:	eb03 0a02 	add.w	sl, r3, r2
 800d7fa:	9b02      	ldr	r3, [sp, #8]
 800d7fc:	9a06      	ldr	r2, [sp, #24]
 800d7fe:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800dad0 <__kernel_rem_pio2+0x318>
 800d802:	eb03 0802 	add.w	r8, r3, r2
 800d806:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d808:	1aa7      	subs	r7, r4, r2
 800d80a:	ae22      	add	r6, sp, #136	; 0x88
 800d80c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d810:	2500      	movs	r5, #0
 800d812:	4545      	cmp	r5, r8
 800d814:	dd13      	ble.n	800d83e <__kernel_rem_pio2+0x86>
 800d816:	9b08      	ldr	r3, [sp, #32]
 800d818:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800dad0 <__kernel_rem_pio2+0x318>
 800d81c:	aa22      	add	r2, sp, #136	; 0x88
 800d81e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d822:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800d826:	f04f 0800 	mov.w	r8, #0
 800d82a:	9b02      	ldr	r3, [sp, #8]
 800d82c:	4598      	cmp	r8, r3
 800d82e:	dc2f      	bgt.n	800d890 <__kernel_rem_pio2+0xd8>
 800d830:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d834:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800d838:	462f      	mov	r7, r5
 800d83a:	2600      	movs	r6, #0
 800d83c:	e01b      	b.n	800d876 <__kernel_rem_pio2+0xbe>
 800d83e:	42ef      	cmn	r7, r5
 800d840:	d407      	bmi.n	800d852 <__kernel_rem_pio2+0x9a>
 800d842:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d846:	f7f2 fe85 	bl	8000554 <__aeabi_i2d>
 800d84a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d84e:	3501      	adds	r5, #1
 800d850:	e7df      	b.n	800d812 <__kernel_rem_pio2+0x5a>
 800d852:	ec51 0b18 	vmov	r0, r1, d8
 800d856:	e7f8      	b.n	800d84a <__kernel_rem_pio2+0x92>
 800d858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d85c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d860:	f7f2 fee2 	bl	8000628 <__aeabi_dmul>
 800d864:	4602      	mov	r2, r0
 800d866:	460b      	mov	r3, r1
 800d868:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d86c:	f7f2 fd26 	bl	80002bc <__adddf3>
 800d870:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d874:	3601      	adds	r6, #1
 800d876:	9b06      	ldr	r3, [sp, #24]
 800d878:	429e      	cmp	r6, r3
 800d87a:	f1a7 0708 	sub.w	r7, r7, #8
 800d87e:	ddeb      	ble.n	800d858 <__kernel_rem_pio2+0xa0>
 800d880:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d884:	f108 0801 	add.w	r8, r8, #1
 800d888:	ecab 7b02 	vstmia	fp!, {d7}
 800d88c:	3508      	adds	r5, #8
 800d88e:	e7cc      	b.n	800d82a <__kernel_rem_pio2+0x72>
 800d890:	9b02      	ldr	r3, [sp, #8]
 800d892:	aa0e      	add	r2, sp, #56	; 0x38
 800d894:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d898:	930d      	str	r3, [sp, #52]	; 0x34
 800d89a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d89c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d8a0:	9c02      	ldr	r4, [sp, #8]
 800d8a2:	930c      	str	r3, [sp, #48]	; 0x30
 800d8a4:	00e3      	lsls	r3, r4, #3
 800d8a6:	930a      	str	r3, [sp, #40]	; 0x28
 800d8a8:	ab9a      	add	r3, sp, #616	; 0x268
 800d8aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d8ae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d8b2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800d8b6:	ab72      	add	r3, sp, #456	; 0x1c8
 800d8b8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d8bc:	46c3      	mov	fp, r8
 800d8be:	46a1      	mov	r9, r4
 800d8c0:	f1b9 0f00 	cmp.w	r9, #0
 800d8c4:	f1a5 0508 	sub.w	r5, r5, #8
 800d8c8:	dc77      	bgt.n	800d9ba <__kernel_rem_pio2+0x202>
 800d8ca:	ec47 6b10 	vmov	d0, r6, r7
 800d8ce:	4650      	mov	r0, sl
 800d8d0:	f000 fde6 	bl	800e4a0 <scalbn>
 800d8d4:	ec57 6b10 	vmov	r6, r7, d0
 800d8d8:	2200      	movs	r2, #0
 800d8da:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d8de:	ee10 0a10 	vmov	r0, s0
 800d8e2:	4639      	mov	r1, r7
 800d8e4:	f7f2 fea0 	bl	8000628 <__aeabi_dmul>
 800d8e8:	ec41 0b10 	vmov	d0, r0, r1
 800d8ec:	f000 fd58 	bl	800e3a0 <floor>
 800d8f0:	4b7c      	ldr	r3, [pc, #496]	; (800dae4 <__kernel_rem_pio2+0x32c>)
 800d8f2:	ec51 0b10 	vmov	r0, r1, d0
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	f7f2 fe96 	bl	8000628 <__aeabi_dmul>
 800d8fc:	4602      	mov	r2, r0
 800d8fe:	460b      	mov	r3, r1
 800d900:	4630      	mov	r0, r6
 800d902:	4639      	mov	r1, r7
 800d904:	f7f2 fcd8 	bl	80002b8 <__aeabi_dsub>
 800d908:	460f      	mov	r7, r1
 800d90a:	4606      	mov	r6, r0
 800d90c:	f7f3 f93c 	bl	8000b88 <__aeabi_d2iz>
 800d910:	9004      	str	r0, [sp, #16]
 800d912:	f7f2 fe1f 	bl	8000554 <__aeabi_i2d>
 800d916:	4602      	mov	r2, r0
 800d918:	460b      	mov	r3, r1
 800d91a:	4630      	mov	r0, r6
 800d91c:	4639      	mov	r1, r7
 800d91e:	f7f2 fccb 	bl	80002b8 <__aeabi_dsub>
 800d922:	f1ba 0f00 	cmp.w	sl, #0
 800d926:	4606      	mov	r6, r0
 800d928:	460f      	mov	r7, r1
 800d92a:	dd6d      	ble.n	800da08 <__kernel_rem_pio2+0x250>
 800d92c:	1e62      	subs	r2, r4, #1
 800d92e:	ab0e      	add	r3, sp, #56	; 0x38
 800d930:	9d04      	ldr	r5, [sp, #16]
 800d932:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d936:	f1ca 0118 	rsb	r1, sl, #24
 800d93a:	fa40 f301 	asr.w	r3, r0, r1
 800d93e:	441d      	add	r5, r3
 800d940:	408b      	lsls	r3, r1
 800d942:	1ac0      	subs	r0, r0, r3
 800d944:	ab0e      	add	r3, sp, #56	; 0x38
 800d946:	9504      	str	r5, [sp, #16]
 800d948:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d94c:	f1ca 0317 	rsb	r3, sl, #23
 800d950:	fa40 fb03 	asr.w	fp, r0, r3
 800d954:	f1bb 0f00 	cmp.w	fp, #0
 800d958:	dd65      	ble.n	800da26 <__kernel_rem_pio2+0x26e>
 800d95a:	9b04      	ldr	r3, [sp, #16]
 800d95c:	2200      	movs	r2, #0
 800d95e:	3301      	adds	r3, #1
 800d960:	9304      	str	r3, [sp, #16]
 800d962:	4615      	mov	r5, r2
 800d964:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d968:	4294      	cmp	r4, r2
 800d96a:	f300 809c 	bgt.w	800daa6 <__kernel_rem_pio2+0x2ee>
 800d96e:	f1ba 0f00 	cmp.w	sl, #0
 800d972:	dd07      	ble.n	800d984 <__kernel_rem_pio2+0x1cc>
 800d974:	f1ba 0f01 	cmp.w	sl, #1
 800d978:	f000 80c0 	beq.w	800dafc <__kernel_rem_pio2+0x344>
 800d97c:	f1ba 0f02 	cmp.w	sl, #2
 800d980:	f000 80c6 	beq.w	800db10 <__kernel_rem_pio2+0x358>
 800d984:	f1bb 0f02 	cmp.w	fp, #2
 800d988:	d14d      	bne.n	800da26 <__kernel_rem_pio2+0x26e>
 800d98a:	4632      	mov	r2, r6
 800d98c:	463b      	mov	r3, r7
 800d98e:	4956      	ldr	r1, [pc, #344]	; (800dae8 <__kernel_rem_pio2+0x330>)
 800d990:	2000      	movs	r0, #0
 800d992:	f7f2 fc91 	bl	80002b8 <__aeabi_dsub>
 800d996:	4606      	mov	r6, r0
 800d998:	460f      	mov	r7, r1
 800d99a:	2d00      	cmp	r5, #0
 800d99c:	d043      	beq.n	800da26 <__kernel_rem_pio2+0x26e>
 800d99e:	4650      	mov	r0, sl
 800d9a0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800dad8 <__kernel_rem_pio2+0x320>
 800d9a4:	f000 fd7c 	bl	800e4a0 <scalbn>
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	4639      	mov	r1, r7
 800d9ac:	ec53 2b10 	vmov	r2, r3, d0
 800d9b0:	f7f2 fc82 	bl	80002b8 <__aeabi_dsub>
 800d9b4:	4606      	mov	r6, r0
 800d9b6:	460f      	mov	r7, r1
 800d9b8:	e035      	b.n	800da26 <__kernel_rem_pio2+0x26e>
 800d9ba:	4b4c      	ldr	r3, [pc, #304]	; (800daec <__kernel_rem_pio2+0x334>)
 800d9bc:	2200      	movs	r2, #0
 800d9be:	4630      	mov	r0, r6
 800d9c0:	4639      	mov	r1, r7
 800d9c2:	f7f2 fe31 	bl	8000628 <__aeabi_dmul>
 800d9c6:	f7f3 f8df 	bl	8000b88 <__aeabi_d2iz>
 800d9ca:	f7f2 fdc3 	bl	8000554 <__aeabi_i2d>
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	ec43 2b18 	vmov	d8, r2, r3
 800d9d6:	4b46      	ldr	r3, [pc, #280]	; (800daf0 <__kernel_rem_pio2+0x338>)
 800d9d8:	2200      	movs	r2, #0
 800d9da:	f7f2 fe25 	bl	8000628 <__aeabi_dmul>
 800d9de:	4602      	mov	r2, r0
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	4630      	mov	r0, r6
 800d9e4:	4639      	mov	r1, r7
 800d9e6:	f7f2 fc67 	bl	80002b8 <__aeabi_dsub>
 800d9ea:	f7f3 f8cd 	bl	8000b88 <__aeabi_d2iz>
 800d9ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d9f2:	f84b 0b04 	str.w	r0, [fp], #4
 800d9f6:	ec51 0b18 	vmov	r0, r1, d8
 800d9fa:	f7f2 fc5f 	bl	80002bc <__adddf3>
 800d9fe:	f109 39ff 	add.w	r9, r9, #4294967295
 800da02:	4606      	mov	r6, r0
 800da04:	460f      	mov	r7, r1
 800da06:	e75b      	b.n	800d8c0 <__kernel_rem_pio2+0x108>
 800da08:	d106      	bne.n	800da18 <__kernel_rem_pio2+0x260>
 800da0a:	1e63      	subs	r3, r4, #1
 800da0c:	aa0e      	add	r2, sp, #56	; 0x38
 800da0e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800da12:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800da16:	e79d      	b.n	800d954 <__kernel_rem_pio2+0x19c>
 800da18:	4b36      	ldr	r3, [pc, #216]	; (800daf4 <__kernel_rem_pio2+0x33c>)
 800da1a:	2200      	movs	r2, #0
 800da1c:	f7f3 f88a 	bl	8000b34 <__aeabi_dcmpge>
 800da20:	2800      	cmp	r0, #0
 800da22:	d13d      	bne.n	800daa0 <__kernel_rem_pio2+0x2e8>
 800da24:	4683      	mov	fp, r0
 800da26:	2200      	movs	r2, #0
 800da28:	2300      	movs	r3, #0
 800da2a:	4630      	mov	r0, r6
 800da2c:	4639      	mov	r1, r7
 800da2e:	f7f3 f863 	bl	8000af8 <__aeabi_dcmpeq>
 800da32:	2800      	cmp	r0, #0
 800da34:	f000 80c0 	beq.w	800dbb8 <__kernel_rem_pio2+0x400>
 800da38:	1e65      	subs	r5, r4, #1
 800da3a:	462b      	mov	r3, r5
 800da3c:	2200      	movs	r2, #0
 800da3e:	9902      	ldr	r1, [sp, #8]
 800da40:	428b      	cmp	r3, r1
 800da42:	da6c      	bge.n	800db1e <__kernel_rem_pio2+0x366>
 800da44:	2a00      	cmp	r2, #0
 800da46:	f000 8089 	beq.w	800db5c <__kernel_rem_pio2+0x3a4>
 800da4a:	ab0e      	add	r3, sp, #56	; 0x38
 800da4c:	f1aa 0a18 	sub.w	sl, sl, #24
 800da50:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800da54:	2b00      	cmp	r3, #0
 800da56:	f000 80ad 	beq.w	800dbb4 <__kernel_rem_pio2+0x3fc>
 800da5a:	4650      	mov	r0, sl
 800da5c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800dad8 <__kernel_rem_pio2+0x320>
 800da60:	f000 fd1e 	bl	800e4a0 <scalbn>
 800da64:	ab9a      	add	r3, sp, #616	; 0x268
 800da66:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800da6a:	ec57 6b10 	vmov	r6, r7, d0
 800da6e:	00ec      	lsls	r4, r5, #3
 800da70:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800da74:	46aa      	mov	sl, r5
 800da76:	f1ba 0f00 	cmp.w	sl, #0
 800da7a:	f280 80d6 	bge.w	800dc2a <__kernel_rem_pio2+0x472>
 800da7e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800dad0 <__kernel_rem_pio2+0x318>
 800da82:	462e      	mov	r6, r5
 800da84:	2e00      	cmp	r6, #0
 800da86:	f2c0 8104 	blt.w	800dc92 <__kernel_rem_pio2+0x4da>
 800da8a:	ab72      	add	r3, sp, #456	; 0x1c8
 800da8c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800da90:	f8df a064 	ldr.w	sl, [pc, #100]	; 800daf8 <__kernel_rem_pio2+0x340>
 800da94:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800da98:	f04f 0800 	mov.w	r8, #0
 800da9c:	1baf      	subs	r7, r5, r6
 800da9e:	e0ea      	b.n	800dc76 <__kernel_rem_pio2+0x4be>
 800daa0:	f04f 0b02 	mov.w	fp, #2
 800daa4:	e759      	b.n	800d95a <__kernel_rem_pio2+0x1a2>
 800daa6:	f8d8 3000 	ldr.w	r3, [r8]
 800daaa:	b955      	cbnz	r5, 800dac2 <__kernel_rem_pio2+0x30a>
 800daac:	b123      	cbz	r3, 800dab8 <__kernel_rem_pio2+0x300>
 800daae:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800dab2:	f8c8 3000 	str.w	r3, [r8]
 800dab6:	2301      	movs	r3, #1
 800dab8:	3201      	adds	r2, #1
 800daba:	f108 0804 	add.w	r8, r8, #4
 800dabe:	461d      	mov	r5, r3
 800dac0:	e752      	b.n	800d968 <__kernel_rem_pio2+0x1b0>
 800dac2:	1acb      	subs	r3, r1, r3
 800dac4:	f8c8 3000 	str.w	r3, [r8]
 800dac8:	462b      	mov	r3, r5
 800daca:	e7f5      	b.n	800dab8 <__kernel_rem_pio2+0x300>
 800dacc:	f3af 8000 	nop.w
	...
 800dadc:	3ff00000 	.word	0x3ff00000
 800dae0:	0800ef68 	.word	0x0800ef68
 800dae4:	40200000 	.word	0x40200000
 800dae8:	3ff00000 	.word	0x3ff00000
 800daec:	3e700000 	.word	0x3e700000
 800daf0:	41700000 	.word	0x41700000
 800daf4:	3fe00000 	.word	0x3fe00000
 800daf8:	0800ef28 	.word	0x0800ef28
 800dafc:	1e62      	subs	r2, r4, #1
 800dafe:	ab0e      	add	r3, sp, #56	; 0x38
 800db00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db04:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800db08:	a90e      	add	r1, sp, #56	; 0x38
 800db0a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800db0e:	e739      	b.n	800d984 <__kernel_rem_pio2+0x1cc>
 800db10:	1e62      	subs	r2, r4, #1
 800db12:	ab0e      	add	r3, sp, #56	; 0x38
 800db14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db18:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800db1c:	e7f4      	b.n	800db08 <__kernel_rem_pio2+0x350>
 800db1e:	a90e      	add	r1, sp, #56	; 0x38
 800db20:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800db24:	3b01      	subs	r3, #1
 800db26:	430a      	orrs	r2, r1
 800db28:	e789      	b.n	800da3e <__kernel_rem_pio2+0x286>
 800db2a:	3301      	adds	r3, #1
 800db2c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800db30:	2900      	cmp	r1, #0
 800db32:	d0fa      	beq.n	800db2a <__kernel_rem_pio2+0x372>
 800db34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db36:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800db3a:	446a      	add	r2, sp
 800db3c:	3a98      	subs	r2, #152	; 0x98
 800db3e:	920a      	str	r2, [sp, #40]	; 0x28
 800db40:	9a08      	ldr	r2, [sp, #32]
 800db42:	18e3      	adds	r3, r4, r3
 800db44:	18a5      	adds	r5, r4, r2
 800db46:	aa22      	add	r2, sp, #136	; 0x88
 800db48:	f104 0801 	add.w	r8, r4, #1
 800db4c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800db50:	9304      	str	r3, [sp, #16]
 800db52:	9b04      	ldr	r3, [sp, #16]
 800db54:	4543      	cmp	r3, r8
 800db56:	da04      	bge.n	800db62 <__kernel_rem_pio2+0x3aa>
 800db58:	461c      	mov	r4, r3
 800db5a:	e6a3      	b.n	800d8a4 <__kernel_rem_pio2+0xec>
 800db5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db5e:	2301      	movs	r3, #1
 800db60:	e7e4      	b.n	800db2c <__kernel_rem_pio2+0x374>
 800db62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db64:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800db68:	f7f2 fcf4 	bl	8000554 <__aeabi_i2d>
 800db6c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800db70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db72:	46ab      	mov	fp, r5
 800db74:	461c      	mov	r4, r3
 800db76:	f04f 0900 	mov.w	r9, #0
 800db7a:	2600      	movs	r6, #0
 800db7c:	2700      	movs	r7, #0
 800db7e:	9b06      	ldr	r3, [sp, #24]
 800db80:	4599      	cmp	r9, r3
 800db82:	dd06      	ble.n	800db92 <__kernel_rem_pio2+0x3da>
 800db84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db86:	e8e3 6702 	strd	r6, r7, [r3], #8
 800db8a:	f108 0801 	add.w	r8, r8, #1
 800db8e:	930a      	str	r3, [sp, #40]	; 0x28
 800db90:	e7df      	b.n	800db52 <__kernel_rem_pio2+0x39a>
 800db92:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800db96:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800db9a:	f7f2 fd45 	bl	8000628 <__aeabi_dmul>
 800db9e:	4602      	mov	r2, r0
 800dba0:	460b      	mov	r3, r1
 800dba2:	4630      	mov	r0, r6
 800dba4:	4639      	mov	r1, r7
 800dba6:	f7f2 fb89 	bl	80002bc <__adddf3>
 800dbaa:	f109 0901 	add.w	r9, r9, #1
 800dbae:	4606      	mov	r6, r0
 800dbb0:	460f      	mov	r7, r1
 800dbb2:	e7e4      	b.n	800db7e <__kernel_rem_pio2+0x3c6>
 800dbb4:	3d01      	subs	r5, #1
 800dbb6:	e748      	b.n	800da4a <__kernel_rem_pio2+0x292>
 800dbb8:	ec47 6b10 	vmov	d0, r6, r7
 800dbbc:	f1ca 0000 	rsb	r0, sl, #0
 800dbc0:	f000 fc6e 	bl	800e4a0 <scalbn>
 800dbc4:	ec57 6b10 	vmov	r6, r7, d0
 800dbc8:	4ba0      	ldr	r3, [pc, #640]	; (800de4c <__kernel_rem_pio2+0x694>)
 800dbca:	ee10 0a10 	vmov	r0, s0
 800dbce:	2200      	movs	r2, #0
 800dbd0:	4639      	mov	r1, r7
 800dbd2:	f7f2 ffaf 	bl	8000b34 <__aeabi_dcmpge>
 800dbd6:	b1f8      	cbz	r0, 800dc18 <__kernel_rem_pio2+0x460>
 800dbd8:	4b9d      	ldr	r3, [pc, #628]	; (800de50 <__kernel_rem_pio2+0x698>)
 800dbda:	2200      	movs	r2, #0
 800dbdc:	4630      	mov	r0, r6
 800dbde:	4639      	mov	r1, r7
 800dbe0:	f7f2 fd22 	bl	8000628 <__aeabi_dmul>
 800dbe4:	f7f2 ffd0 	bl	8000b88 <__aeabi_d2iz>
 800dbe8:	4680      	mov	r8, r0
 800dbea:	f7f2 fcb3 	bl	8000554 <__aeabi_i2d>
 800dbee:	4b97      	ldr	r3, [pc, #604]	; (800de4c <__kernel_rem_pio2+0x694>)
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	f7f2 fd19 	bl	8000628 <__aeabi_dmul>
 800dbf6:	460b      	mov	r3, r1
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	4639      	mov	r1, r7
 800dbfc:	4630      	mov	r0, r6
 800dbfe:	f7f2 fb5b 	bl	80002b8 <__aeabi_dsub>
 800dc02:	f7f2 ffc1 	bl	8000b88 <__aeabi_d2iz>
 800dc06:	1c65      	adds	r5, r4, #1
 800dc08:	ab0e      	add	r3, sp, #56	; 0x38
 800dc0a:	f10a 0a18 	add.w	sl, sl, #24
 800dc0e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dc12:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800dc16:	e720      	b.n	800da5a <__kernel_rem_pio2+0x2a2>
 800dc18:	4630      	mov	r0, r6
 800dc1a:	4639      	mov	r1, r7
 800dc1c:	f7f2 ffb4 	bl	8000b88 <__aeabi_d2iz>
 800dc20:	ab0e      	add	r3, sp, #56	; 0x38
 800dc22:	4625      	mov	r5, r4
 800dc24:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dc28:	e717      	b.n	800da5a <__kernel_rem_pio2+0x2a2>
 800dc2a:	ab0e      	add	r3, sp, #56	; 0x38
 800dc2c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800dc30:	f7f2 fc90 	bl	8000554 <__aeabi_i2d>
 800dc34:	4632      	mov	r2, r6
 800dc36:	463b      	mov	r3, r7
 800dc38:	f7f2 fcf6 	bl	8000628 <__aeabi_dmul>
 800dc3c:	4b84      	ldr	r3, [pc, #528]	; (800de50 <__kernel_rem_pio2+0x698>)
 800dc3e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800dc42:	2200      	movs	r2, #0
 800dc44:	4630      	mov	r0, r6
 800dc46:	4639      	mov	r1, r7
 800dc48:	f7f2 fcee 	bl	8000628 <__aeabi_dmul>
 800dc4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc50:	4606      	mov	r6, r0
 800dc52:	460f      	mov	r7, r1
 800dc54:	e70f      	b.n	800da76 <__kernel_rem_pio2+0x2be>
 800dc56:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800dc5a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800dc5e:	f7f2 fce3 	bl	8000628 <__aeabi_dmul>
 800dc62:	4602      	mov	r2, r0
 800dc64:	460b      	mov	r3, r1
 800dc66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc6a:	f7f2 fb27 	bl	80002bc <__adddf3>
 800dc6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dc72:	f108 0801 	add.w	r8, r8, #1
 800dc76:	9b02      	ldr	r3, [sp, #8]
 800dc78:	4598      	cmp	r8, r3
 800dc7a:	dc01      	bgt.n	800dc80 <__kernel_rem_pio2+0x4c8>
 800dc7c:	45b8      	cmp	r8, r7
 800dc7e:	ddea      	ble.n	800dc56 <__kernel_rem_pio2+0x49e>
 800dc80:	ed9d 7b06 	vldr	d7, [sp, #24]
 800dc84:	ab4a      	add	r3, sp, #296	; 0x128
 800dc86:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800dc8a:	ed87 7b00 	vstr	d7, [r7]
 800dc8e:	3e01      	subs	r6, #1
 800dc90:	e6f8      	b.n	800da84 <__kernel_rem_pio2+0x2cc>
 800dc92:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800dc94:	2b02      	cmp	r3, #2
 800dc96:	dc0b      	bgt.n	800dcb0 <__kernel_rem_pio2+0x4f8>
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	dc35      	bgt.n	800dd08 <__kernel_rem_pio2+0x550>
 800dc9c:	d059      	beq.n	800dd52 <__kernel_rem_pio2+0x59a>
 800dc9e:	9b04      	ldr	r3, [sp, #16]
 800dca0:	f003 0007 	and.w	r0, r3, #7
 800dca4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800dca8:	ecbd 8b02 	vpop	{d8}
 800dcac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcb0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800dcb2:	2b03      	cmp	r3, #3
 800dcb4:	d1f3      	bne.n	800dc9e <__kernel_rem_pio2+0x4e6>
 800dcb6:	ab4a      	add	r3, sp, #296	; 0x128
 800dcb8:	4423      	add	r3, r4
 800dcba:	9306      	str	r3, [sp, #24]
 800dcbc:	461c      	mov	r4, r3
 800dcbe:	469a      	mov	sl, r3
 800dcc0:	9502      	str	r5, [sp, #8]
 800dcc2:	9b02      	ldr	r3, [sp, #8]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	f1aa 0a08 	sub.w	sl, sl, #8
 800dcca:	dc6b      	bgt.n	800dda4 <__kernel_rem_pio2+0x5ec>
 800dccc:	46aa      	mov	sl, r5
 800dcce:	f1ba 0f01 	cmp.w	sl, #1
 800dcd2:	f1a4 0408 	sub.w	r4, r4, #8
 800dcd6:	f300 8085 	bgt.w	800dde4 <__kernel_rem_pio2+0x62c>
 800dcda:	9c06      	ldr	r4, [sp, #24]
 800dcdc:	2000      	movs	r0, #0
 800dcde:	3408      	adds	r4, #8
 800dce0:	2100      	movs	r1, #0
 800dce2:	2d01      	cmp	r5, #1
 800dce4:	f300 809d 	bgt.w	800de22 <__kernel_rem_pio2+0x66a>
 800dce8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800dcec:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800dcf0:	f1bb 0f00 	cmp.w	fp, #0
 800dcf4:	f040 809b 	bne.w	800de2e <__kernel_rem_pio2+0x676>
 800dcf8:	9b01      	ldr	r3, [sp, #4]
 800dcfa:	e9c3 5600 	strd	r5, r6, [r3]
 800dcfe:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800dd02:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800dd06:	e7ca      	b.n	800dc9e <__kernel_rem_pio2+0x4e6>
 800dd08:	3408      	adds	r4, #8
 800dd0a:	ab4a      	add	r3, sp, #296	; 0x128
 800dd0c:	441c      	add	r4, r3
 800dd0e:	462e      	mov	r6, r5
 800dd10:	2000      	movs	r0, #0
 800dd12:	2100      	movs	r1, #0
 800dd14:	2e00      	cmp	r6, #0
 800dd16:	da36      	bge.n	800dd86 <__kernel_rem_pio2+0x5ce>
 800dd18:	f1bb 0f00 	cmp.w	fp, #0
 800dd1c:	d039      	beq.n	800dd92 <__kernel_rem_pio2+0x5da>
 800dd1e:	4602      	mov	r2, r0
 800dd20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd24:	9c01      	ldr	r4, [sp, #4]
 800dd26:	e9c4 2300 	strd	r2, r3, [r4]
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	460b      	mov	r3, r1
 800dd2e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800dd32:	f7f2 fac1 	bl	80002b8 <__aeabi_dsub>
 800dd36:	ae4c      	add	r6, sp, #304	; 0x130
 800dd38:	2401      	movs	r4, #1
 800dd3a:	42a5      	cmp	r5, r4
 800dd3c:	da2c      	bge.n	800dd98 <__kernel_rem_pio2+0x5e0>
 800dd3e:	f1bb 0f00 	cmp.w	fp, #0
 800dd42:	d002      	beq.n	800dd4a <__kernel_rem_pio2+0x592>
 800dd44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd48:	4619      	mov	r1, r3
 800dd4a:	9b01      	ldr	r3, [sp, #4]
 800dd4c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800dd50:	e7a5      	b.n	800dc9e <__kernel_rem_pio2+0x4e6>
 800dd52:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800dd56:	eb0d 0403 	add.w	r4, sp, r3
 800dd5a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800dd5e:	2000      	movs	r0, #0
 800dd60:	2100      	movs	r1, #0
 800dd62:	2d00      	cmp	r5, #0
 800dd64:	da09      	bge.n	800dd7a <__kernel_rem_pio2+0x5c2>
 800dd66:	f1bb 0f00 	cmp.w	fp, #0
 800dd6a:	d002      	beq.n	800dd72 <__kernel_rem_pio2+0x5ba>
 800dd6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd70:	4619      	mov	r1, r3
 800dd72:	9b01      	ldr	r3, [sp, #4]
 800dd74:	e9c3 0100 	strd	r0, r1, [r3]
 800dd78:	e791      	b.n	800dc9e <__kernel_rem_pio2+0x4e6>
 800dd7a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dd7e:	f7f2 fa9d 	bl	80002bc <__adddf3>
 800dd82:	3d01      	subs	r5, #1
 800dd84:	e7ed      	b.n	800dd62 <__kernel_rem_pio2+0x5aa>
 800dd86:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dd8a:	f7f2 fa97 	bl	80002bc <__adddf3>
 800dd8e:	3e01      	subs	r6, #1
 800dd90:	e7c0      	b.n	800dd14 <__kernel_rem_pio2+0x55c>
 800dd92:	4602      	mov	r2, r0
 800dd94:	460b      	mov	r3, r1
 800dd96:	e7c5      	b.n	800dd24 <__kernel_rem_pio2+0x56c>
 800dd98:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800dd9c:	f7f2 fa8e 	bl	80002bc <__adddf3>
 800dda0:	3401      	adds	r4, #1
 800dda2:	e7ca      	b.n	800dd3a <__kernel_rem_pio2+0x582>
 800dda4:	e9da 8900 	ldrd	r8, r9, [sl]
 800dda8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ddac:	9b02      	ldr	r3, [sp, #8]
 800ddae:	3b01      	subs	r3, #1
 800ddb0:	9302      	str	r3, [sp, #8]
 800ddb2:	4632      	mov	r2, r6
 800ddb4:	463b      	mov	r3, r7
 800ddb6:	4640      	mov	r0, r8
 800ddb8:	4649      	mov	r1, r9
 800ddba:	f7f2 fa7f 	bl	80002bc <__adddf3>
 800ddbe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	460b      	mov	r3, r1
 800ddc6:	4640      	mov	r0, r8
 800ddc8:	4649      	mov	r1, r9
 800ddca:	f7f2 fa75 	bl	80002b8 <__aeabi_dsub>
 800ddce:	4632      	mov	r2, r6
 800ddd0:	463b      	mov	r3, r7
 800ddd2:	f7f2 fa73 	bl	80002bc <__adddf3>
 800ddd6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ddda:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ddde:	ed8a 7b00 	vstr	d7, [sl]
 800dde2:	e76e      	b.n	800dcc2 <__kernel_rem_pio2+0x50a>
 800dde4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800dde8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ddec:	4640      	mov	r0, r8
 800ddee:	4632      	mov	r2, r6
 800ddf0:	463b      	mov	r3, r7
 800ddf2:	4649      	mov	r1, r9
 800ddf4:	f7f2 fa62 	bl	80002bc <__adddf3>
 800ddf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddfc:	4602      	mov	r2, r0
 800ddfe:	460b      	mov	r3, r1
 800de00:	4640      	mov	r0, r8
 800de02:	4649      	mov	r1, r9
 800de04:	f7f2 fa58 	bl	80002b8 <__aeabi_dsub>
 800de08:	4632      	mov	r2, r6
 800de0a:	463b      	mov	r3, r7
 800de0c:	f7f2 fa56 	bl	80002bc <__adddf3>
 800de10:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800de18:	ed84 7b00 	vstr	d7, [r4]
 800de1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de20:	e755      	b.n	800dcce <__kernel_rem_pio2+0x516>
 800de22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800de26:	f7f2 fa49 	bl	80002bc <__adddf3>
 800de2a:	3d01      	subs	r5, #1
 800de2c:	e759      	b.n	800dce2 <__kernel_rem_pio2+0x52a>
 800de2e:	9b01      	ldr	r3, [sp, #4]
 800de30:	9a01      	ldr	r2, [sp, #4]
 800de32:	601d      	str	r5, [r3, #0]
 800de34:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800de38:	605c      	str	r4, [r3, #4]
 800de3a:	609f      	str	r7, [r3, #8]
 800de3c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800de40:	60d3      	str	r3, [r2, #12]
 800de42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de46:	6110      	str	r0, [r2, #16]
 800de48:	6153      	str	r3, [r2, #20]
 800de4a:	e728      	b.n	800dc9e <__kernel_rem_pio2+0x4e6>
 800de4c:	41700000 	.word	0x41700000
 800de50:	3e700000 	.word	0x3e700000
 800de54:	00000000 	.word	0x00000000

0800de58 <__kernel_sin>:
 800de58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de5c:	ed2d 8b04 	vpush	{d8-d9}
 800de60:	eeb0 8a41 	vmov.f32	s16, s2
 800de64:	eef0 8a61 	vmov.f32	s17, s3
 800de68:	ec55 4b10 	vmov	r4, r5, d0
 800de6c:	b083      	sub	sp, #12
 800de6e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800de72:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800de76:	9001      	str	r0, [sp, #4]
 800de78:	da06      	bge.n	800de88 <__kernel_sin+0x30>
 800de7a:	ee10 0a10 	vmov	r0, s0
 800de7e:	4629      	mov	r1, r5
 800de80:	f7f2 fe82 	bl	8000b88 <__aeabi_d2iz>
 800de84:	2800      	cmp	r0, #0
 800de86:	d051      	beq.n	800df2c <__kernel_sin+0xd4>
 800de88:	4622      	mov	r2, r4
 800de8a:	462b      	mov	r3, r5
 800de8c:	4620      	mov	r0, r4
 800de8e:	4629      	mov	r1, r5
 800de90:	f7f2 fbca 	bl	8000628 <__aeabi_dmul>
 800de94:	4682      	mov	sl, r0
 800de96:	468b      	mov	fp, r1
 800de98:	4602      	mov	r2, r0
 800de9a:	460b      	mov	r3, r1
 800de9c:	4620      	mov	r0, r4
 800de9e:	4629      	mov	r1, r5
 800dea0:	f7f2 fbc2 	bl	8000628 <__aeabi_dmul>
 800dea4:	a341      	add	r3, pc, #260	; (adr r3, 800dfac <__kernel_sin+0x154>)
 800dea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deaa:	4680      	mov	r8, r0
 800deac:	4689      	mov	r9, r1
 800deae:	4650      	mov	r0, sl
 800deb0:	4659      	mov	r1, fp
 800deb2:	f7f2 fbb9 	bl	8000628 <__aeabi_dmul>
 800deb6:	a33f      	add	r3, pc, #252	; (adr r3, 800dfb4 <__kernel_sin+0x15c>)
 800deb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800debc:	f7f2 f9fc 	bl	80002b8 <__aeabi_dsub>
 800dec0:	4652      	mov	r2, sl
 800dec2:	465b      	mov	r3, fp
 800dec4:	f7f2 fbb0 	bl	8000628 <__aeabi_dmul>
 800dec8:	a33c      	add	r3, pc, #240	; (adr r3, 800dfbc <__kernel_sin+0x164>)
 800deca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dece:	f7f2 f9f5 	bl	80002bc <__adddf3>
 800ded2:	4652      	mov	r2, sl
 800ded4:	465b      	mov	r3, fp
 800ded6:	f7f2 fba7 	bl	8000628 <__aeabi_dmul>
 800deda:	a33a      	add	r3, pc, #232	; (adr r3, 800dfc4 <__kernel_sin+0x16c>)
 800dedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee0:	f7f2 f9ea 	bl	80002b8 <__aeabi_dsub>
 800dee4:	4652      	mov	r2, sl
 800dee6:	465b      	mov	r3, fp
 800dee8:	f7f2 fb9e 	bl	8000628 <__aeabi_dmul>
 800deec:	a337      	add	r3, pc, #220	; (adr r3, 800dfcc <__kernel_sin+0x174>)
 800deee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def2:	f7f2 f9e3 	bl	80002bc <__adddf3>
 800def6:	9b01      	ldr	r3, [sp, #4]
 800def8:	4606      	mov	r6, r0
 800defa:	460f      	mov	r7, r1
 800defc:	b9eb      	cbnz	r3, 800df3a <__kernel_sin+0xe2>
 800defe:	4602      	mov	r2, r0
 800df00:	460b      	mov	r3, r1
 800df02:	4650      	mov	r0, sl
 800df04:	4659      	mov	r1, fp
 800df06:	f7f2 fb8f 	bl	8000628 <__aeabi_dmul>
 800df0a:	a325      	add	r3, pc, #148	; (adr r3, 800dfa0 <__kernel_sin+0x148>)
 800df0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df10:	f7f2 f9d2 	bl	80002b8 <__aeabi_dsub>
 800df14:	4642      	mov	r2, r8
 800df16:	464b      	mov	r3, r9
 800df18:	f7f2 fb86 	bl	8000628 <__aeabi_dmul>
 800df1c:	4602      	mov	r2, r0
 800df1e:	460b      	mov	r3, r1
 800df20:	4620      	mov	r0, r4
 800df22:	4629      	mov	r1, r5
 800df24:	f7f2 f9ca 	bl	80002bc <__adddf3>
 800df28:	4604      	mov	r4, r0
 800df2a:	460d      	mov	r5, r1
 800df2c:	ec45 4b10 	vmov	d0, r4, r5
 800df30:	b003      	add	sp, #12
 800df32:	ecbd 8b04 	vpop	{d8-d9}
 800df36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df3a:	4b1b      	ldr	r3, [pc, #108]	; (800dfa8 <__kernel_sin+0x150>)
 800df3c:	ec51 0b18 	vmov	r0, r1, d8
 800df40:	2200      	movs	r2, #0
 800df42:	f7f2 fb71 	bl	8000628 <__aeabi_dmul>
 800df46:	4632      	mov	r2, r6
 800df48:	ec41 0b19 	vmov	d9, r0, r1
 800df4c:	463b      	mov	r3, r7
 800df4e:	4640      	mov	r0, r8
 800df50:	4649      	mov	r1, r9
 800df52:	f7f2 fb69 	bl	8000628 <__aeabi_dmul>
 800df56:	4602      	mov	r2, r0
 800df58:	460b      	mov	r3, r1
 800df5a:	ec51 0b19 	vmov	r0, r1, d9
 800df5e:	f7f2 f9ab 	bl	80002b8 <__aeabi_dsub>
 800df62:	4652      	mov	r2, sl
 800df64:	465b      	mov	r3, fp
 800df66:	f7f2 fb5f 	bl	8000628 <__aeabi_dmul>
 800df6a:	ec53 2b18 	vmov	r2, r3, d8
 800df6e:	f7f2 f9a3 	bl	80002b8 <__aeabi_dsub>
 800df72:	a30b      	add	r3, pc, #44	; (adr r3, 800dfa0 <__kernel_sin+0x148>)
 800df74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df78:	4606      	mov	r6, r0
 800df7a:	460f      	mov	r7, r1
 800df7c:	4640      	mov	r0, r8
 800df7e:	4649      	mov	r1, r9
 800df80:	f7f2 fb52 	bl	8000628 <__aeabi_dmul>
 800df84:	4602      	mov	r2, r0
 800df86:	460b      	mov	r3, r1
 800df88:	4630      	mov	r0, r6
 800df8a:	4639      	mov	r1, r7
 800df8c:	f7f2 f996 	bl	80002bc <__adddf3>
 800df90:	4602      	mov	r2, r0
 800df92:	460b      	mov	r3, r1
 800df94:	4620      	mov	r0, r4
 800df96:	4629      	mov	r1, r5
 800df98:	f7f2 f98e 	bl	80002b8 <__aeabi_dsub>
 800df9c:	e7c4      	b.n	800df28 <__kernel_sin+0xd0>
 800df9e:	bf00      	nop
 800dfa0:	55555549 	.word	0x55555549
 800dfa4:	3fc55555 	.word	0x3fc55555
 800dfa8:	3fe00000 	.word	0x3fe00000
 800dfac:	5acfd57c 	.word	0x5acfd57c
 800dfb0:	3de5d93a 	.word	0x3de5d93a
 800dfb4:	8a2b9ceb 	.word	0x8a2b9ceb
 800dfb8:	3e5ae5e6 	.word	0x3e5ae5e6
 800dfbc:	57b1fe7d 	.word	0x57b1fe7d
 800dfc0:	3ec71de3 	.word	0x3ec71de3
 800dfc4:	19c161d5 	.word	0x19c161d5
 800dfc8:	3f2a01a0 	.word	0x3f2a01a0
 800dfcc:	1110f8a6 	.word	0x1110f8a6
 800dfd0:	3f811111 	.word	0x3f811111

0800dfd4 <with_errno>:
 800dfd4:	b570      	push	{r4, r5, r6, lr}
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	460d      	mov	r5, r1
 800dfda:	4616      	mov	r6, r2
 800dfdc:	f7f8 fdac 	bl	8006b38 <__errno>
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	6006      	str	r6, [r0, #0]
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	bd70      	pop	{r4, r5, r6, pc}

0800dfe8 <xflow>:
 800dfe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfea:	4614      	mov	r4, r2
 800dfec:	461d      	mov	r5, r3
 800dfee:	b108      	cbz	r0, 800dff4 <xflow+0xc>
 800dff0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dff4:	e9cd 2300 	strd	r2, r3, [sp]
 800dff8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dffc:	4620      	mov	r0, r4
 800dffe:	4629      	mov	r1, r5
 800e000:	f7f2 fb12 	bl	8000628 <__aeabi_dmul>
 800e004:	2222      	movs	r2, #34	; 0x22
 800e006:	b003      	add	sp, #12
 800e008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e00c:	f7ff bfe2 	b.w	800dfd4 <with_errno>

0800e010 <__math_uflow>:
 800e010:	b508      	push	{r3, lr}
 800e012:	2200      	movs	r2, #0
 800e014:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e018:	f7ff ffe6 	bl	800dfe8 <xflow>
 800e01c:	ec41 0b10 	vmov	d0, r0, r1
 800e020:	bd08      	pop	{r3, pc}

0800e022 <__math_oflow>:
 800e022:	b508      	push	{r3, lr}
 800e024:	2200      	movs	r2, #0
 800e026:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e02a:	f7ff ffdd 	bl	800dfe8 <xflow>
 800e02e:	ec41 0b10 	vmov	d0, r0, r1
 800e032:	bd08      	pop	{r3, pc}
 800e034:	0000      	movs	r0, r0
	...

0800e038 <atan>:
 800e038:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e03c:	ec55 4b10 	vmov	r4, r5, d0
 800e040:	4bc3      	ldr	r3, [pc, #780]	; (800e350 <atan+0x318>)
 800e042:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e046:	429e      	cmp	r6, r3
 800e048:	46ab      	mov	fp, r5
 800e04a:	dd18      	ble.n	800e07e <atan+0x46>
 800e04c:	4bc1      	ldr	r3, [pc, #772]	; (800e354 <atan+0x31c>)
 800e04e:	429e      	cmp	r6, r3
 800e050:	dc01      	bgt.n	800e056 <atan+0x1e>
 800e052:	d109      	bne.n	800e068 <atan+0x30>
 800e054:	b144      	cbz	r4, 800e068 <atan+0x30>
 800e056:	4622      	mov	r2, r4
 800e058:	462b      	mov	r3, r5
 800e05a:	4620      	mov	r0, r4
 800e05c:	4629      	mov	r1, r5
 800e05e:	f7f2 f92d 	bl	80002bc <__adddf3>
 800e062:	4604      	mov	r4, r0
 800e064:	460d      	mov	r5, r1
 800e066:	e006      	b.n	800e076 <atan+0x3e>
 800e068:	f1bb 0f00 	cmp.w	fp, #0
 800e06c:	f300 8131 	bgt.w	800e2d2 <atan+0x29a>
 800e070:	a59b      	add	r5, pc, #620	; (adr r5, 800e2e0 <atan+0x2a8>)
 800e072:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e076:	ec45 4b10 	vmov	d0, r4, r5
 800e07a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e07e:	4bb6      	ldr	r3, [pc, #728]	; (800e358 <atan+0x320>)
 800e080:	429e      	cmp	r6, r3
 800e082:	dc14      	bgt.n	800e0ae <atan+0x76>
 800e084:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e088:	429e      	cmp	r6, r3
 800e08a:	dc0d      	bgt.n	800e0a8 <atan+0x70>
 800e08c:	a396      	add	r3, pc, #600	; (adr r3, 800e2e8 <atan+0x2b0>)
 800e08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e092:	ee10 0a10 	vmov	r0, s0
 800e096:	4629      	mov	r1, r5
 800e098:	f7f2 f910 	bl	80002bc <__adddf3>
 800e09c:	4baf      	ldr	r3, [pc, #700]	; (800e35c <atan+0x324>)
 800e09e:	2200      	movs	r2, #0
 800e0a0:	f7f2 fd52 	bl	8000b48 <__aeabi_dcmpgt>
 800e0a4:	2800      	cmp	r0, #0
 800e0a6:	d1e6      	bne.n	800e076 <atan+0x3e>
 800e0a8:	f04f 3aff 	mov.w	sl, #4294967295
 800e0ac:	e02b      	b.n	800e106 <atan+0xce>
 800e0ae:	f000 f963 	bl	800e378 <fabs>
 800e0b2:	4bab      	ldr	r3, [pc, #684]	; (800e360 <atan+0x328>)
 800e0b4:	429e      	cmp	r6, r3
 800e0b6:	ec55 4b10 	vmov	r4, r5, d0
 800e0ba:	f300 80bf 	bgt.w	800e23c <atan+0x204>
 800e0be:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e0c2:	429e      	cmp	r6, r3
 800e0c4:	f300 80a0 	bgt.w	800e208 <atan+0x1d0>
 800e0c8:	ee10 2a10 	vmov	r2, s0
 800e0cc:	ee10 0a10 	vmov	r0, s0
 800e0d0:	462b      	mov	r3, r5
 800e0d2:	4629      	mov	r1, r5
 800e0d4:	f7f2 f8f2 	bl	80002bc <__adddf3>
 800e0d8:	4ba0      	ldr	r3, [pc, #640]	; (800e35c <atan+0x324>)
 800e0da:	2200      	movs	r2, #0
 800e0dc:	f7f2 f8ec 	bl	80002b8 <__aeabi_dsub>
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	4606      	mov	r6, r0
 800e0e4:	460f      	mov	r7, r1
 800e0e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	4629      	mov	r1, r5
 800e0ee:	f7f2 f8e5 	bl	80002bc <__adddf3>
 800e0f2:	4602      	mov	r2, r0
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	4630      	mov	r0, r6
 800e0f8:	4639      	mov	r1, r7
 800e0fa:	f7f2 fbbf 	bl	800087c <__aeabi_ddiv>
 800e0fe:	f04f 0a00 	mov.w	sl, #0
 800e102:	4604      	mov	r4, r0
 800e104:	460d      	mov	r5, r1
 800e106:	4622      	mov	r2, r4
 800e108:	462b      	mov	r3, r5
 800e10a:	4620      	mov	r0, r4
 800e10c:	4629      	mov	r1, r5
 800e10e:	f7f2 fa8b 	bl	8000628 <__aeabi_dmul>
 800e112:	4602      	mov	r2, r0
 800e114:	460b      	mov	r3, r1
 800e116:	4680      	mov	r8, r0
 800e118:	4689      	mov	r9, r1
 800e11a:	f7f2 fa85 	bl	8000628 <__aeabi_dmul>
 800e11e:	a374      	add	r3, pc, #464	; (adr r3, 800e2f0 <atan+0x2b8>)
 800e120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e124:	4606      	mov	r6, r0
 800e126:	460f      	mov	r7, r1
 800e128:	f7f2 fa7e 	bl	8000628 <__aeabi_dmul>
 800e12c:	a372      	add	r3, pc, #456	; (adr r3, 800e2f8 <atan+0x2c0>)
 800e12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e132:	f7f2 f8c3 	bl	80002bc <__adddf3>
 800e136:	4632      	mov	r2, r6
 800e138:	463b      	mov	r3, r7
 800e13a:	f7f2 fa75 	bl	8000628 <__aeabi_dmul>
 800e13e:	a370      	add	r3, pc, #448	; (adr r3, 800e300 <atan+0x2c8>)
 800e140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e144:	f7f2 f8ba 	bl	80002bc <__adddf3>
 800e148:	4632      	mov	r2, r6
 800e14a:	463b      	mov	r3, r7
 800e14c:	f7f2 fa6c 	bl	8000628 <__aeabi_dmul>
 800e150:	a36d      	add	r3, pc, #436	; (adr r3, 800e308 <atan+0x2d0>)
 800e152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e156:	f7f2 f8b1 	bl	80002bc <__adddf3>
 800e15a:	4632      	mov	r2, r6
 800e15c:	463b      	mov	r3, r7
 800e15e:	f7f2 fa63 	bl	8000628 <__aeabi_dmul>
 800e162:	a36b      	add	r3, pc, #428	; (adr r3, 800e310 <atan+0x2d8>)
 800e164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e168:	f7f2 f8a8 	bl	80002bc <__adddf3>
 800e16c:	4632      	mov	r2, r6
 800e16e:	463b      	mov	r3, r7
 800e170:	f7f2 fa5a 	bl	8000628 <__aeabi_dmul>
 800e174:	a368      	add	r3, pc, #416	; (adr r3, 800e318 <atan+0x2e0>)
 800e176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e17a:	f7f2 f89f 	bl	80002bc <__adddf3>
 800e17e:	4642      	mov	r2, r8
 800e180:	464b      	mov	r3, r9
 800e182:	f7f2 fa51 	bl	8000628 <__aeabi_dmul>
 800e186:	a366      	add	r3, pc, #408	; (adr r3, 800e320 <atan+0x2e8>)
 800e188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18c:	4680      	mov	r8, r0
 800e18e:	4689      	mov	r9, r1
 800e190:	4630      	mov	r0, r6
 800e192:	4639      	mov	r1, r7
 800e194:	f7f2 fa48 	bl	8000628 <__aeabi_dmul>
 800e198:	a363      	add	r3, pc, #396	; (adr r3, 800e328 <atan+0x2f0>)
 800e19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19e:	f7f2 f88b 	bl	80002b8 <__aeabi_dsub>
 800e1a2:	4632      	mov	r2, r6
 800e1a4:	463b      	mov	r3, r7
 800e1a6:	f7f2 fa3f 	bl	8000628 <__aeabi_dmul>
 800e1aa:	a361      	add	r3, pc, #388	; (adr r3, 800e330 <atan+0x2f8>)
 800e1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b0:	f7f2 f882 	bl	80002b8 <__aeabi_dsub>
 800e1b4:	4632      	mov	r2, r6
 800e1b6:	463b      	mov	r3, r7
 800e1b8:	f7f2 fa36 	bl	8000628 <__aeabi_dmul>
 800e1bc:	a35e      	add	r3, pc, #376	; (adr r3, 800e338 <atan+0x300>)
 800e1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c2:	f7f2 f879 	bl	80002b8 <__aeabi_dsub>
 800e1c6:	4632      	mov	r2, r6
 800e1c8:	463b      	mov	r3, r7
 800e1ca:	f7f2 fa2d 	bl	8000628 <__aeabi_dmul>
 800e1ce:	a35c      	add	r3, pc, #368	; (adr r3, 800e340 <atan+0x308>)
 800e1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d4:	f7f2 f870 	bl	80002b8 <__aeabi_dsub>
 800e1d8:	4632      	mov	r2, r6
 800e1da:	463b      	mov	r3, r7
 800e1dc:	f7f2 fa24 	bl	8000628 <__aeabi_dmul>
 800e1e0:	4602      	mov	r2, r0
 800e1e2:	460b      	mov	r3, r1
 800e1e4:	4640      	mov	r0, r8
 800e1e6:	4649      	mov	r1, r9
 800e1e8:	f7f2 f868 	bl	80002bc <__adddf3>
 800e1ec:	4622      	mov	r2, r4
 800e1ee:	462b      	mov	r3, r5
 800e1f0:	f7f2 fa1a 	bl	8000628 <__aeabi_dmul>
 800e1f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e1f8:	4602      	mov	r2, r0
 800e1fa:	460b      	mov	r3, r1
 800e1fc:	d14b      	bne.n	800e296 <atan+0x25e>
 800e1fe:	4620      	mov	r0, r4
 800e200:	4629      	mov	r1, r5
 800e202:	f7f2 f859 	bl	80002b8 <__aeabi_dsub>
 800e206:	e72c      	b.n	800e062 <atan+0x2a>
 800e208:	ee10 0a10 	vmov	r0, s0
 800e20c:	4b53      	ldr	r3, [pc, #332]	; (800e35c <atan+0x324>)
 800e20e:	2200      	movs	r2, #0
 800e210:	4629      	mov	r1, r5
 800e212:	f7f2 f851 	bl	80002b8 <__aeabi_dsub>
 800e216:	4b51      	ldr	r3, [pc, #324]	; (800e35c <atan+0x324>)
 800e218:	4606      	mov	r6, r0
 800e21a:	460f      	mov	r7, r1
 800e21c:	2200      	movs	r2, #0
 800e21e:	4620      	mov	r0, r4
 800e220:	4629      	mov	r1, r5
 800e222:	f7f2 f84b 	bl	80002bc <__adddf3>
 800e226:	4602      	mov	r2, r0
 800e228:	460b      	mov	r3, r1
 800e22a:	4630      	mov	r0, r6
 800e22c:	4639      	mov	r1, r7
 800e22e:	f7f2 fb25 	bl	800087c <__aeabi_ddiv>
 800e232:	f04f 0a01 	mov.w	sl, #1
 800e236:	4604      	mov	r4, r0
 800e238:	460d      	mov	r5, r1
 800e23a:	e764      	b.n	800e106 <atan+0xce>
 800e23c:	4b49      	ldr	r3, [pc, #292]	; (800e364 <atan+0x32c>)
 800e23e:	429e      	cmp	r6, r3
 800e240:	da1d      	bge.n	800e27e <atan+0x246>
 800e242:	ee10 0a10 	vmov	r0, s0
 800e246:	4b48      	ldr	r3, [pc, #288]	; (800e368 <atan+0x330>)
 800e248:	2200      	movs	r2, #0
 800e24a:	4629      	mov	r1, r5
 800e24c:	f7f2 f834 	bl	80002b8 <__aeabi_dsub>
 800e250:	4b45      	ldr	r3, [pc, #276]	; (800e368 <atan+0x330>)
 800e252:	4606      	mov	r6, r0
 800e254:	460f      	mov	r7, r1
 800e256:	2200      	movs	r2, #0
 800e258:	4620      	mov	r0, r4
 800e25a:	4629      	mov	r1, r5
 800e25c:	f7f2 f9e4 	bl	8000628 <__aeabi_dmul>
 800e260:	4b3e      	ldr	r3, [pc, #248]	; (800e35c <atan+0x324>)
 800e262:	2200      	movs	r2, #0
 800e264:	f7f2 f82a 	bl	80002bc <__adddf3>
 800e268:	4602      	mov	r2, r0
 800e26a:	460b      	mov	r3, r1
 800e26c:	4630      	mov	r0, r6
 800e26e:	4639      	mov	r1, r7
 800e270:	f7f2 fb04 	bl	800087c <__aeabi_ddiv>
 800e274:	f04f 0a02 	mov.w	sl, #2
 800e278:	4604      	mov	r4, r0
 800e27a:	460d      	mov	r5, r1
 800e27c:	e743      	b.n	800e106 <atan+0xce>
 800e27e:	462b      	mov	r3, r5
 800e280:	ee10 2a10 	vmov	r2, s0
 800e284:	4939      	ldr	r1, [pc, #228]	; (800e36c <atan+0x334>)
 800e286:	2000      	movs	r0, #0
 800e288:	f7f2 faf8 	bl	800087c <__aeabi_ddiv>
 800e28c:	f04f 0a03 	mov.w	sl, #3
 800e290:	4604      	mov	r4, r0
 800e292:	460d      	mov	r5, r1
 800e294:	e737      	b.n	800e106 <atan+0xce>
 800e296:	4b36      	ldr	r3, [pc, #216]	; (800e370 <atan+0x338>)
 800e298:	4e36      	ldr	r6, [pc, #216]	; (800e374 <atan+0x33c>)
 800e29a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e29e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800e2a2:	e9da 2300 	ldrd	r2, r3, [sl]
 800e2a6:	f7f2 f807 	bl	80002b8 <__aeabi_dsub>
 800e2aa:	4622      	mov	r2, r4
 800e2ac:	462b      	mov	r3, r5
 800e2ae:	f7f2 f803 	bl	80002b8 <__aeabi_dsub>
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e2ba:	f7f1 fffd 	bl	80002b8 <__aeabi_dsub>
 800e2be:	f1bb 0f00 	cmp.w	fp, #0
 800e2c2:	4604      	mov	r4, r0
 800e2c4:	460d      	mov	r5, r1
 800e2c6:	f6bf aed6 	bge.w	800e076 <atan+0x3e>
 800e2ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2ce:	461d      	mov	r5, r3
 800e2d0:	e6d1      	b.n	800e076 <atan+0x3e>
 800e2d2:	a51d      	add	r5, pc, #116	; (adr r5, 800e348 <atan+0x310>)
 800e2d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e2d8:	e6cd      	b.n	800e076 <atan+0x3e>
 800e2da:	bf00      	nop
 800e2dc:	f3af 8000 	nop.w
 800e2e0:	54442d18 	.word	0x54442d18
 800e2e4:	bff921fb 	.word	0xbff921fb
 800e2e8:	8800759c 	.word	0x8800759c
 800e2ec:	7e37e43c 	.word	0x7e37e43c
 800e2f0:	e322da11 	.word	0xe322da11
 800e2f4:	3f90ad3a 	.word	0x3f90ad3a
 800e2f8:	24760deb 	.word	0x24760deb
 800e2fc:	3fa97b4b 	.word	0x3fa97b4b
 800e300:	a0d03d51 	.word	0xa0d03d51
 800e304:	3fb10d66 	.word	0x3fb10d66
 800e308:	c54c206e 	.word	0xc54c206e
 800e30c:	3fb745cd 	.word	0x3fb745cd
 800e310:	920083ff 	.word	0x920083ff
 800e314:	3fc24924 	.word	0x3fc24924
 800e318:	5555550d 	.word	0x5555550d
 800e31c:	3fd55555 	.word	0x3fd55555
 800e320:	2c6a6c2f 	.word	0x2c6a6c2f
 800e324:	bfa2b444 	.word	0xbfa2b444
 800e328:	52defd9a 	.word	0x52defd9a
 800e32c:	3fadde2d 	.word	0x3fadde2d
 800e330:	af749a6d 	.word	0xaf749a6d
 800e334:	3fb3b0f2 	.word	0x3fb3b0f2
 800e338:	fe231671 	.word	0xfe231671
 800e33c:	3fbc71c6 	.word	0x3fbc71c6
 800e340:	9998ebc4 	.word	0x9998ebc4
 800e344:	3fc99999 	.word	0x3fc99999
 800e348:	54442d18 	.word	0x54442d18
 800e34c:	3ff921fb 	.word	0x3ff921fb
 800e350:	440fffff 	.word	0x440fffff
 800e354:	7ff00000 	.word	0x7ff00000
 800e358:	3fdbffff 	.word	0x3fdbffff
 800e35c:	3ff00000 	.word	0x3ff00000
 800e360:	3ff2ffff 	.word	0x3ff2ffff
 800e364:	40038000 	.word	0x40038000
 800e368:	3ff80000 	.word	0x3ff80000
 800e36c:	bff00000 	.word	0xbff00000
 800e370:	0800ef98 	.word	0x0800ef98
 800e374:	0800ef78 	.word	0x0800ef78

0800e378 <fabs>:
 800e378:	ec51 0b10 	vmov	r0, r1, d0
 800e37c:	ee10 2a10 	vmov	r2, s0
 800e380:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e384:	ec43 2b10 	vmov	d0, r2, r3
 800e388:	4770      	bx	lr

0800e38a <finite>:
 800e38a:	b082      	sub	sp, #8
 800e38c:	ed8d 0b00 	vstr	d0, [sp]
 800e390:	9801      	ldr	r0, [sp, #4]
 800e392:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e396:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e39a:	0fc0      	lsrs	r0, r0, #31
 800e39c:	b002      	add	sp, #8
 800e39e:	4770      	bx	lr

0800e3a0 <floor>:
 800e3a0:	ec51 0b10 	vmov	r0, r1, d0
 800e3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e3ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e3b0:	2e13      	cmp	r6, #19
 800e3b2:	ee10 5a10 	vmov	r5, s0
 800e3b6:	ee10 8a10 	vmov	r8, s0
 800e3ba:	460c      	mov	r4, r1
 800e3bc:	dc32      	bgt.n	800e424 <floor+0x84>
 800e3be:	2e00      	cmp	r6, #0
 800e3c0:	da14      	bge.n	800e3ec <floor+0x4c>
 800e3c2:	a333      	add	r3, pc, #204	; (adr r3, 800e490 <floor+0xf0>)
 800e3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c8:	f7f1 ff78 	bl	80002bc <__adddf3>
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	f7f2 fbba 	bl	8000b48 <__aeabi_dcmpgt>
 800e3d4:	b138      	cbz	r0, 800e3e6 <floor+0x46>
 800e3d6:	2c00      	cmp	r4, #0
 800e3d8:	da57      	bge.n	800e48a <floor+0xea>
 800e3da:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e3de:	431d      	orrs	r5, r3
 800e3e0:	d001      	beq.n	800e3e6 <floor+0x46>
 800e3e2:	4c2d      	ldr	r4, [pc, #180]	; (800e498 <floor+0xf8>)
 800e3e4:	2500      	movs	r5, #0
 800e3e6:	4621      	mov	r1, r4
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	e025      	b.n	800e438 <floor+0x98>
 800e3ec:	4f2b      	ldr	r7, [pc, #172]	; (800e49c <floor+0xfc>)
 800e3ee:	4137      	asrs	r7, r6
 800e3f0:	ea01 0307 	and.w	r3, r1, r7
 800e3f4:	4303      	orrs	r3, r0
 800e3f6:	d01f      	beq.n	800e438 <floor+0x98>
 800e3f8:	a325      	add	r3, pc, #148	; (adr r3, 800e490 <floor+0xf0>)
 800e3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3fe:	f7f1 ff5d 	bl	80002bc <__adddf3>
 800e402:	2200      	movs	r2, #0
 800e404:	2300      	movs	r3, #0
 800e406:	f7f2 fb9f 	bl	8000b48 <__aeabi_dcmpgt>
 800e40a:	2800      	cmp	r0, #0
 800e40c:	d0eb      	beq.n	800e3e6 <floor+0x46>
 800e40e:	2c00      	cmp	r4, #0
 800e410:	bfbe      	ittt	lt
 800e412:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e416:	fa43 f606 	asrlt.w	r6, r3, r6
 800e41a:	19a4      	addlt	r4, r4, r6
 800e41c:	ea24 0407 	bic.w	r4, r4, r7
 800e420:	2500      	movs	r5, #0
 800e422:	e7e0      	b.n	800e3e6 <floor+0x46>
 800e424:	2e33      	cmp	r6, #51	; 0x33
 800e426:	dd0b      	ble.n	800e440 <floor+0xa0>
 800e428:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e42c:	d104      	bne.n	800e438 <floor+0x98>
 800e42e:	ee10 2a10 	vmov	r2, s0
 800e432:	460b      	mov	r3, r1
 800e434:	f7f1 ff42 	bl	80002bc <__adddf3>
 800e438:	ec41 0b10 	vmov	d0, r0, r1
 800e43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e440:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e444:	f04f 33ff 	mov.w	r3, #4294967295
 800e448:	fa23 f707 	lsr.w	r7, r3, r7
 800e44c:	4207      	tst	r7, r0
 800e44e:	d0f3      	beq.n	800e438 <floor+0x98>
 800e450:	a30f      	add	r3, pc, #60	; (adr r3, 800e490 <floor+0xf0>)
 800e452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e456:	f7f1 ff31 	bl	80002bc <__adddf3>
 800e45a:	2200      	movs	r2, #0
 800e45c:	2300      	movs	r3, #0
 800e45e:	f7f2 fb73 	bl	8000b48 <__aeabi_dcmpgt>
 800e462:	2800      	cmp	r0, #0
 800e464:	d0bf      	beq.n	800e3e6 <floor+0x46>
 800e466:	2c00      	cmp	r4, #0
 800e468:	da02      	bge.n	800e470 <floor+0xd0>
 800e46a:	2e14      	cmp	r6, #20
 800e46c:	d103      	bne.n	800e476 <floor+0xd6>
 800e46e:	3401      	adds	r4, #1
 800e470:	ea25 0507 	bic.w	r5, r5, r7
 800e474:	e7b7      	b.n	800e3e6 <floor+0x46>
 800e476:	2301      	movs	r3, #1
 800e478:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e47c:	fa03 f606 	lsl.w	r6, r3, r6
 800e480:	4435      	add	r5, r6
 800e482:	4545      	cmp	r5, r8
 800e484:	bf38      	it	cc
 800e486:	18e4      	addcc	r4, r4, r3
 800e488:	e7f2      	b.n	800e470 <floor+0xd0>
 800e48a:	2500      	movs	r5, #0
 800e48c:	462c      	mov	r4, r5
 800e48e:	e7aa      	b.n	800e3e6 <floor+0x46>
 800e490:	8800759c 	.word	0x8800759c
 800e494:	7e37e43c 	.word	0x7e37e43c
 800e498:	bff00000 	.word	0xbff00000
 800e49c:	000fffff 	.word	0x000fffff

0800e4a0 <scalbn>:
 800e4a0:	b570      	push	{r4, r5, r6, lr}
 800e4a2:	ec55 4b10 	vmov	r4, r5, d0
 800e4a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e4aa:	4606      	mov	r6, r0
 800e4ac:	462b      	mov	r3, r5
 800e4ae:	b99a      	cbnz	r2, 800e4d8 <scalbn+0x38>
 800e4b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e4b4:	4323      	orrs	r3, r4
 800e4b6:	d036      	beq.n	800e526 <scalbn+0x86>
 800e4b8:	4b39      	ldr	r3, [pc, #228]	; (800e5a0 <scalbn+0x100>)
 800e4ba:	4629      	mov	r1, r5
 800e4bc:	ee10 0a10 	vmov	r0, s0
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	f7f2 f8b1 	bl	8000628 <__aeabi_dmul>
 800e4c6:	4b37      	ldr	r3, [pc, #220]	; (800e5a4 <scalbn+0x104>)
 800e4c8:	429e      	cmp	r6, r3
 800e4ca:	4604      	mov	r4, r0
 800e4cc:	460d      	mov	r5, r1
 800e4ce:	da10      	bge.n	800e4f2 <scalbn+0x52>
 800e4d0:	a32b      	add	r3, pc, #172	; (adr r3, 800e580 <scalbn+0xe0>)
 800e4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d6:	e03a      	b.n	800e54e <scalbn+0xae>
 800e4d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e4dc:	428a      	cmp	r2, r1
 800e4de:	d10c      	bne.n	800e4fa <scalbn+0x5a>
 800e4e0:	ee10 2a10 	vmov	r2, s0
 800e4e4:	4620      	mov	r0, r4
 800e4e6:	4629      	mov	r1, r5
 800e4e8:	f7f1 fee8 	bl	80002bc <__adddf3>
 800e4ec:	4604      	mov	r4, r0
 800e4ee:	460d      	mov	r5, r1
 800e4f0:	e019      	b.n	800e526 <scalbn+0x86>
 800e4f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e4f6:	460b      	mov	r3, r1
 800e4f8:	3a36      	subs	r2, #54	; 0x36
 800e4fa:	4432      	add	r2, r6
 800e4fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e500:	428a      	cmp	r2, r1
 800e502:	dd08      	ble.n	800e516 <scalbn+0x76>
 800e504:	2d00      	cmp	r5, #0
 800e506:	a120      	add	r1, pc, #128	; (adr r1, 800e588 <scalbn+0xe8>)
 800e508:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e50c:	da1c      	bge.n	800e548 <scalbn+0xa8>
 800e50e:	a120      	add	r1, pc, #128	; (adr r1, 800e590 <scalbn+0xf0>)
 800e510:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e514:	e018      	b.n	800e548 <scalbn+0xa8>
 800e516:	2a00      	cmp	r2, #0
 800e518:	dd08      	ble.n	800e52c <scalbn+0x8c>
 800e51a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e51e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e522:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e526:	ec45 4b10 	vmov	d0, r4, r5
 800e52a:	bd70      	pop	{r4, r5, r6, pc}
 800e52c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e530:	da19      	bge.n	800e566 <scalbn+0xc6>
 800e532:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e536:	429e      	cmp	r6, r3
 800e538:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e53c:	dd0a      	ble.n	800e554 <scalbn+0xb4>
 800e53e:	a112      	add	r1, pc, #72	; (adr r1, 800e588 <scalbn+0xe8>)
 800e540:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d1e2      	bne.n	800e50e <scalbn+0x6e>
 800e548:	a30f      	add	r3, pc, #60	; (adr r3, 800e588 <scalbn+0xe8>)
 800e54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54e:	f7f2 f86b 	bl	8000628 <__aeabi_dmul>
 800e552:	e7cb      	b.n	800e4ec <scalbn+0x4c>
 800e554:	a10a      	add	r1, pc, #40	; (adr r1, 800e580 <scalbn+0xe0>)
 800e556:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d0b8      	beq.n	800e4d0 <scalbn+0x30>
 800e55e:	a10e      	add	r1, pc, #56	; (adr r1, 800e598 <scalbn+0xf8>)
 800e560:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e564:	e7b4      	b.n	800e4d0 <scalbn+0x30>
 800e566:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e56a:	3236      	adds	r2, #54	; 0x36
 800e56c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e570:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e574:	4620      	mov	r0, r4
 800e576:	4b0c      	ldr	r3, [pc, #48]	; (800e5a8 <scalbn+0x108>)
 800e578:	2200      	movs	r2, #0
 800e57a:	e7e8      	b.n	800e54e <scalbn+0xae>
 800e57c:	f3af 8000 	nop.w
 800e580:	c2f8f359 	.word	0xc2f8f359
 800e584:	01a56e1f 	.word	0x01a56e1f
 800e588:	8800759c 	.word	0x8800759c
 800e58c:	7e37e43c 	.word	0x7e37e43c
 800e590:	8800759c 	.word	0x8800759c
 800e594:	fe37e43c 	.word	0xfe37e43c
 800e598:	c2f8f359 	.word	0xc2f8f359
 800e59c:	81a56e1f 	.word	0x81a56e1f
 800e5a0:	43500000 	.word	0x43500000
 800e5a4:	ffff3cb0 	.word	0xffff3cb0
 800e5a8:	3c900000 	.word	0x3c900000

0800e5ac <_init>:
 800e5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ae:	bf00      	nop
 800e5b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5b2:	bc08      	pop	{r3}
 800e5b4:	469e      	mov	lr, r3
 800e5b6:	4770      	bx	lr

0800e5b8 <_fini>:
 800e5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ba:	bf00      	nop
 800e5bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5be:	bc08      	pop	{r3}
 800e5c0:	469e      	mov	lr, r3
 800e5c2:	4770      	bx	lr
