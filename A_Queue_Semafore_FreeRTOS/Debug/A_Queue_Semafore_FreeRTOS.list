
A_Queue_Semafore_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08005670  08005670  00015670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800585c  0800585c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800585c  0800585c  0001585c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005864  08005864  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005864  08005864  00015864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005868  08005868  00015868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800586c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013684  2000008c  080058f8  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013710  080058f8  00023710  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008117  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001934  00000000  00000000  000281d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  00029b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  0002a208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010b7b  00000000  00000000  0002a850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009170  00000000  00000000  0003b3cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005e049  00000000  00000000  0004453b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a2584  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ffc  00000000  00000000  000a25d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005658 	.word	0x08005658

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	08005658 	.word	0x08005658

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9a7 	b.w	80005f0 <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f835 	bl	8000320 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f828 	bl	8000320 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f817 	bl	8000320 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f809 	bl	8000320 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
//Variables adicionales aplicacion
state_t next_state = sMainMenu;


int main(void)
{
 80005f4:	b590      	push	{r4, r7, lr}
 80005f6:	b08b      	sub	sp, #44	; 0x2c
 80005f8:	af02      	add	r7, sp, #8
	//Incrementamos la velocidad de reloj del sistema
	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 80005fa:	2364      	movs	r3, #100	; 0x64
 80005fc:	77fb      	strb	r3, [r7, #31]
	configPLL(clock);
 80005fe:	7ffb      	ldrb	r3, [r7, #31]
 8000600:	4618      	mov	r0, r3
 8000602:	f003 fd5d 	bl	80040c0 <configPLL>
	//Configuracion inicial del sistema
	initSystem();
 8000606:	f000 f8eb 	bl	80007e0 <initSystem>
	//Definimos la configuracion inicail del MCO1
	int_MCO2();
 800060a:	f000 f967 	bl	80008dc <int_MCO2>
	//Activamos la unidad de punto flotante (FPU)
	SCB->CPACR    |= (0xF << 20);
 800060e:	4b62      	ldr	r3, [pc, #392]	; (8000798 <main+0x1a4>)
 8000610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000614:	4a60      	ldr	r2, [pc, #384]	; (8000798 <main+0x1a4>)
 8000616:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800061a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Activamos del contador de Ticks
	DWT->CTRL    |= (1 << 0);
 800061e:	4b5f      	ldr	r3, [pc, #380]	; (800079c <main+0x1a8>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a5e      	ldr	r2, [pc, #376]	; (800079c <main+0x1a8>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6013      	str	r3, [r2, #0]

	//-----------------------Inicio cofiguracion de los elemntos del kernel de FreeRTOS----------------------

	//-------------------Configuracion Task--------------
	//Tarea Menu
	xReturned = xTaskCreate(
 800062a:	4b5d      	ldr	r3, [pc, #372]	; (80007a0 <main+0x1ac>)
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2302      	movs	r3, #2
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2300      	movs	r3, #0
 8000634:	22c8      	movs	r2, #200	; 0xc8
 8000636:	495b      	ldr	r1, [pc, #364]	; (80007a4 <main+0x1b0>)
 8000638:	485b      	ldr	r0, [pc, #364]	; (80007a8 <main+0x1b4>)
 800063a:	f001 fb59 	bl	8001cf0 <xTaskCreate>
 800063e:	4603      	mov	r3, r0
 8000640:	4a5a      	ldr	r2, [pc, #360]	; (80007ac <main+0x1b8>)
 8000642:	6013      	str	r3, [r2, #0]
	                    "Task_Menu",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Menu);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 8000644:	4b59      	ldr	r3, [pc, #356]	; (80007ac <main+0x1b8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d00a      	beq.n	8000662 <main+0x6e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800064c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000650:	f383 8811 	msr	BASEPRI, r3
 8000654:	f3bf 8f6f 	isb	sy
 8000658:	f3bf 8f4f 	dsb	sy
 800065c:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800065e:	bf00      	nop
 8000660:	e7fe      	b.n	8000660 <main+0x6c>
	//Tarea Print
	xReturned = xTaskCreate(
 8000662:	4b53      	ldr	r3, [pc, #332]	; (80007b0 <main+0x1bc>)
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2302      	movs	r3, #2
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2300      	movs	r3, #0
 800066c:	22c8      	movs	r2, #200	; 0xc8
 800066e:	4951      	ldr	r1, [pc, #324]	; (80007b4 <main+0x1c0>)
 8000670:	4851      	ldr	r0, [pc, #324]	; (80007b8 <main+0x1c4>)
 8000672:	f001 fb3d 	bl	8001cf0 <xTaskCreate>
 8000676:	4603      	mov	r3, r0
 8000678:	4a4c      	ldr	r2, [pc, #304]	; (80007ac <main+0x1b8>)
 800067a:	6013      	str	r3, [r2, #0]
	                    "Task_Print",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Print);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 800067c:	4b4b      	ldr	r3, [pc, #300]	; (80007ac <main+0x1b8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d00a      	beq.n	800069a <main+0xa6>
        __asm volatile
 8000684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000688:	f383 8811 	msr	BASEPRI, r3
 800068c:	f3bf 8f6f 	isb	sy
 8000690:	f3bf 8f4f 	dsb	sy
 8000694:	617b      	str	r3, [r7, #20]
    }
 8000696:	bf00      	nop
 8000698:	e7fe      	b.n	8000698 <main+0xa4>
	//Tarea comandos
	xReturned = xTaskCreate(
 800069a:	4b48      	ldr	r3, [pc, #288]	; (80007bc <main+0x1c8>)
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	2303      	movs	r3, #3
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2300      	movs	r3, #0
 80006a4:	22c8      	movs	r2, #200	; 0xc8
 80006a6:	4946      	ldr	r1, [pc, #280]	; (80007c0 <main+0x1cc>)
 80006a8:	4846      	ldr	r0, [pc, #280]	; (80007c4 <main+0x1d0>)
 80006aa:	f001 fb21 	bl	8001cf0 <xTaskCreate>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4a3e      	ldr	r2, [pc, #248]	; (80007ac <main+0x1b8>)
 80006b2:	6013      	str	r3, [r2, #0]
	                    "Task_Commands",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
						3,/* Priority at which the task is created. */
	                    &xHandleTask_Commands);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 80006b4:	4b3d      	ldr	r3, [pc, #244]	; (80007ac <main+0x1b8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d00a      	beq.n	80006d2 <main+0xde>
        __asm volatile
 80006bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c0:	f383 8811 	msr	BASEPRI, r3
 80006c4:	f3bf 8f6f 	isb	sy
 80006c8:	f3bf 8f4f 	dsb	sy
 80006cc:	613b      	str	r3, [r7, #16]
    }
 80006ce:	bf00      	nop
 80006d0:	e7fe      	b.n	80006d0 <main+0xdc>

	//-------------------Configuracion Queue--------------
	//Cola para recibir datos por consola
	xQueue_InputData = xQueueCreate(10, sizeof( char ) );
 80006d2:	2200      	movs	r2, #0
 80006d4:	2101      	movs	r1, #1
 80006d6:	200a      	movs	r0, #10
 80006d8:	f000 fbfe 	bl	8000ed8 <xQueueGenericCreate>
 80006dc:	4603      	mov	r3, r0
 80006de:	4a3a      	ldr	r2, [pc, #232]	; (80007c8 <main+0x1d4>)
 80006e0:	6013      	str	r3, [r2, #0]
	configASSERT(xQueue_InputData != NULL);
 80006e2:	4b39      	ldr	r3, [pc, #228]	; (80007c8 <main+0x1d4>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d10a      	bne.n	8000700 <main+0x10c>
        __asm volatile
 80006ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ee:	f383 8811 	msr	BASEPRI, r3
 80006f2:	f3bf 8f6f 	isb	sy
 80006f6:	f3bf 8f4f 	dsb	sy
 80006fa:	60fb      	str	r3, [r7, #12]
    }
 80006fc:	bf00      	nop
 80006fe:	e7fe      	b.n	80006fe <main+0x10a>
	//cola para enviar datos por consola
	xQueue_Print = xQueueCreate(10, sizeof( size_t) );
 8000700:	2200      	movs	r2, #0
 8000702:	2104      	movs	r1, #4
 8000704:	200a      	movs	r0, #10
 8000706:	f000 fbe7 	bl	8000ed8 <xQueueGenericCreate>
 800070a:	4603      	mov	r3, r0
 800070c:	4a2f      	ldr	r2, [pc, #188]	; (80007cc <main+0x1d8>)
 800070e:	6013      	str	r3, [r2, #0]
	configASSERT(xQueue_Print != NULL);
 8000710:	4b2e      	ldr	r3, [pc, #184]	; (80007cc <main+0x1d8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d10a      	bne.n	800072e <main+0x13a>
        __asm volatile
 8000718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800071c:	f383 8811 	msr	BASEPRI, r3
 8000720:	f3bf 8f6f 	isb	sy
 8000724:	f3bf 8f4f 	dsb	sy
 8000728:	60bb      	str	r3, [r7, #8]
    }
 800072a:	bf00      	nop
 800072c:	e7fe      	b.n	800072c <main+0x138>

	//--------------Configuracion Semaforo--------------------
	xBinarySemaphore = xSemaphoreCreateBinary();
 800072e:	2203      	movs	r2, #3
 8000730:	2100      	movs	r1, #0
 8000732:	2001      	movs	r0, #1
 8000734:	f000 fbd0 	bl	8000ed8 <xQueueGenericCreate>
 8000738:	4603      	mov	r3, r0
 800073a:	4a25      	ldr	r2, [pc, #148]	; (80007d0 <main+0x1dc>)
 800073c:	6013      	str	r3, [r2, #0]
	configASSERT(xBinarySemaphore != NULL);
 800073e:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <main+0x1dc>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d10a      	bne.n	800075c <main+0x168>
        __asm volatile
 8000746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800074a:	f383 8811 	msr	BASEPRI, r3
 800074e:	f3bf 8f6f 	isb	sy
 8000752:	f3bf 8f4f 	dsb	sy
 8000756:	607b      	str	r3, [r7, #4]
    }
 8000758:	bf00      	nop
 800075a:	e7fe      	b.n	800075a <main+0x166>

	//-------------------Configuracion Timer--------------
	//Software Timer para el blink
	handler_led_timer = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, 0, led_state_callback);
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <main+0x1e0>)
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2300      	movs	r3, #0
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000768:	481b      	ldr	r0, [pc, #108]	; (80007d8 <main+0x1e4>)
 800076a:	f002 fbbb 	bl	8002ee4 <xTimerCreate>
 800076e:	4603      	mov	r3, r0
 8000770:	4a1a      	ldr	r2, [pc, #104]	; (80007dc <main+0x1e8>)
 8000772:	6013      	str	r3, [r2, #0]
	xTimerStart(handler_led_timer, portMAX_DELAY);
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <main+0x1e8>)
 8000776:	681c      	ldr	r4, [r3, #0]
 8000778:	f001 fcfc 	bl	8002174 <xTaskGetTickCount>
 800077c:	4602      	mov	r2, r0
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2300      	movs	r3, #0
 8000786:	2101      	movs	r1, #1
 8000788:	4620      	mov	r0, r4
 800078a:	f002 fc07 	bl	8002f9c <xTimerGenericCommand>


	//-------------------Inicializacion Scheduler--------------
	//Inicia le Scheduler a funcionar
	vTaskStartScheduler();
 800078e:	f001 fbf5 	bl	8001f7c <vTaskStartScheduler>
	//-----------------------Fin cofiguracion de los elemntos del kernel de FreeRTOS----------------------

	//Si el scheduler se inicia correctamente no se ejecutada este while
	while(1)
	{
		__NOP();
 8000792:	bf00      	nop
 8000794:	e7fd      	b.n	8000792 <main+0x19e>
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00
 800079c:	e0001000 	.word	0xe0001000
 80007a0:	200000e8 	.word	0x200000e8
 80007a4:	08005670 	.word	0x08005670
 80007a8:	080009ad 	.word	0x080009ad
 80007ac:	200000e4 	.word	0x200000e4
 80007b0:	200000ec 	.word	0x200000ec
 80007b4:	0800567c 	.word	0x0800567c
 80007b8:	08000afd 	.word	0x08000afd
 80007bc:	200000f0 	.word	0x200000f0
 80007c0:	08005688 	.word	0x08005688
 80007c4:	08000b2d 	.word	0x08000b2d
 80007c8:	200000fc 	.word	0x200000fc
 80007cc:	200000f8 	.word	0x200000f8
 80007d0:	200000f4 	.word	0x200000f4
 80007d4:	08000991 	.word	0x08000991
 80007d8:	08005698 	.word	0x08005698
 80007dc:	20000100 	.word	0x20000100

080007e0 <initSystem>:
}


//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void initSystem(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af02      	add	r7, sp, #8
	//---------------------------------Inicio de Configuracion GPIOx---------------------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_BlinkyPin.pGPIOx = GPIOA;
 80007e6:	4b35      	ldr	r3, [pc, #212]	; (80008bc <initSystem+0xdc>)
 80007e8:	4a35      	ldr	r2, [pc, #212]	; (80008c0 <initSystem+0xe0>)
 80007ea:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 80007ec:	4b33      	ldr	r3, [pc, #204]	; (80008bc <initSystem+0xdc>)
 80007ee:	2205      	movs	r2, #5
 80007f0:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80007f2:	2300      	movs	r3, #0
 80007f4:	9301      	str	r3, [sp, #4]
 80007f6:	2300      	movs	r3, #0
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	2301      	movs	r3, #1
 80007fc:	2200      	movs	r2, #0
 80007fe:	2101      	movs	r1, #1
 8000800:	482e      	ldr	r0, [pc, #184]	; (80008bc <initSystem+0xdc>)
 8000802:	f003 faf9 	bl	8003df8 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_BlinkyPin);
 8000806:	482d      	ldr	r0, [pc, #180]	; (80008bc <initSystem+0xdc>)
 8000808:	f003 fb18 	bl	8003e3c <GPIO_Config>

	//-------------------------PIN_MCO2--------------------------------
	//---------------PIN: PC9----------------
	//------------AF0: MCO_2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MCO2.pGPIOx = GPIOC;
 800080c:	4b2d      	ldr	r3, [pc, #180]	; (80008c4 <initSystem+0xe4>)
 800080e:	4a2e      	ldr	r2, [pc, #184]	; (80008c8 <initSystem+0xe8>)
 8000810:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MCO2.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 8000812:	4b2c      	ldr	r3, [pc, #176]	; (80008c4 <initSystem+0xe4>)
 8000814:	2209      	movs	r2, #9
 8000816:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MCO2, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8000818:	2300      	movs	r3, #0
 800081a:	9301      	str	r3, [sp, #4]
 800081c:	2300      	movs	r3, #0
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2301      	movs	r3, #1
 8000822:	2200      	movs	r2, #0
 8000824:	2102      	movs	r1, #2
 8000826:	4827      	ldr	r0, [pc, #156]	; (80008c4 <initSystem+0xe4>)
 8000828:	f003 fae6 	bl	8003df8 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MCO2);
 800082c:	4825      	ldr	r0, [pc, #148]	; (80008c4 <initSystem+0xe4>)
 800082e:	f003 fb05 	bl	8003e3c <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA2----------------
	//------------AF7: USART2_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_CommTerm_TX.pGPIOx = GPIOA;
 8000832:	4b26      	ldr	r3, [pc, #152]	; (80008cc <initSystem+0xec>)
 8000834:	4a22      	ldr	r2, [pc, #136]	; (80008c0 <initSystem+0xe0>)
 8000836:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_CommTerm_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 8000838:	4b24      	ldr	r3, [pc, #144]	; (80008cc <initSystem+0xec>)
 800083a:	2202      	movs	r2, #2
 800083c:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_CommTerm_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 800083e:	2307      	movs	r3, #7
 8000840:	9301      	str	r3, [sp, #4]
 8000842:	2300      	movs	r3, #0
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2301      	movs	r3, #1
 8000848:	2200      	movs	r2, #0
 800084a:	2102      	movs	r1, #2
 800084c:	481f      	ldr	r0, [pc, #124]	; (80008cc <initSystem+0xec>)
 800084e:	f003 fad3 	bl	8003df8 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_CommTerm_TX);
 8000852:	481e      	ldr	r0, [pc, #120]	; (80008cc <initSystem+0xec>)
 8000854:	f003 faf2 	bl	8003e3c <GPIO_Config>

	//---------------PIN: PA3----------------
	//------------AF7: USART2_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_CommTerm_RX.pGPIOx = GPIOA;
 8000858:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <initSystem+0xf0>)
 800085a:	4a19      	ldr	r2, [pc, #100]	; (80008c0 <initSystem+0xe0>)
 800085c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_CommTerm_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3; 						//PIN_x, 0-15
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <initSystem+0xf0>)
 8000860:	2203      	movs	r2, #3
 8000862:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_CommTerm_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8000864:	2307      	movs	r3, #7
 8000866:	9301      	str	r3, [sp, #4]
 8000868:	2300      	movs	r3, #0
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	2301      	movs	r3, #1
 800086e:	2200      	movs	r2, #0
 8000870:	2102      	movs	r1, #2
 8000872:	4817      	ldr	r0, [pc, #92]	; (80008d0 <initSystem+0xf0>)
 8000874:	f003 fac0 	bl	8003df8 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_CommTerm_RX);
 8000878:	4815      	ldr	r0, [pc, #84]	; (80008d0 <initSystem+0xf0>)
 800087a:	f003 fadf 	bl	8003e3c <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART2----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_CommTerm.ptrUSARTx = USART2;
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <initSystem+0xf4>)
 8000880:	4a15      	ldr	r2, [pc, #84]	; (80008d8 <initSystem+0xf8>)
 8000882:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_CommTerm.USART_Config.USART_mode = USART_MODE_RXTX ;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <initSystem+0xf4>)
 8000886:	2202      	movs	r2, #2
 8000888:	701a      	strb	r2, [r3, #0]
	handler_USART_CommTerm.USART_Config.USART_baudrate = USART_BAUDRATE_115200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <initSystem+0xf4>)
 800088c:	2202      	movs	r2, #2
 800088e:	705a      	strb	r2, [r3, #1]
	handler_USART_CommTerm.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 8000890:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <initSystem+0xf4>)
 8000892:	2200      	movs	r2, #0
 8000894:	709a      	strb	r2, [r3, #2]
	handler_USART_CommTerm.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <initSystem+0xf4>)
 8000898:	2200      	movs	r2, #0
 800089a:	70da      	strb	r2, [r3, #3]
	handler_USART_CommTerm.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 800089c:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <initSystem+0xf4>)
 800089e:	2201      	movs	r2, #1
 80008a0:	711a      	strb	r2, [r3, #4]
	handler_USART_CommTerm.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_DISABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <initSystem+0xf4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	usart_Config_Init_Priority(&handler_USART_CommTerm, e_USART_PRIOPITY_6);
 80008a8:	2106      	movs	r1, #6
 80008aa:	480a      	ldr	r0, [pc, #40]	; (80008d4 <initSystem+0xf4>)
 80008ac:	f003 ff9c 	bl	80047e8 <usart_Config_Init_Priority>
	USART_Config(&handler_USART_CommTerm);
 80008b0:	4808      	ldr	r0, [pc, #32]	; (80008d4 <initSystem+0xf4>)
 80008b2:	f003 fd7b 	bl	80043ac <USART_Config>

	//-------------------Fin de Configuracion USARTx-----------------------

}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200000a8 	.word	0x200000a8
 80008c0:	40020000 	.word	0x40020000
 80008c4:	200000b4 	.word	0x200000b4
 80008c8:	40020800 	.word	0x40020800
 80008cc:	200000c0 	.word	0x200000c0
 80008d0:	200000cc 	.word	0x200000cc
 80008d4:	200000d8 	.word	0x200000d8
 80008d8:	40004400 	.word	0x40004400

080008dc <int_MCO2>:

//-----------------------------Inicio configuracion MCO1------------------------------------------

//Funcion para la configuracion inicial del MCO1
void int_MCO2(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	//Configuracion inicial del MCO2
	configMCO2(0);
 80008e0:	2000      	movs	r0, #0
 80008e2:	f003 fc9f 	bl	8004224 <configMCO2>
	configMCO2PRE(4);
 80008e6:	2004      	movs	r0, #4
 80008e8:	f003 fcb8 	bl	800425c <configMCO2PRE>
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <BasicUSART2_Callback>:


//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART2_Callback(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
	usartData = getRxData();
 80008f6:	f004 f83d 	bl	8004974 <getRxData>
 80008fa:	4603      	mov	r3, r0
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b20      	ldr	r3, [pc, #128]	; (8000980 <BasicUSART2_Callback+0x90>)
 8000900:	701a      	strb	r2, [r3, #0]

	//Se define variable para verificar si una tarea de mayor proridad esta lista para Running
	BaseType_t pxHigherPriorityTaskWoken;
	(void) pxHigherPriorityTaskWoken;
	pxHigherPriorityTaskWoken = pdFALSE;
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]

	//Verificamos que la cola aun no se encuentra llena
	xReturned = xQueueIsQueueFullFromISR(xQueue_InputData);
 8000906:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <BasicUSART2_Callback+0x94>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4618      	mov	r0, r3
 800090c:	f001 f96b 	bl	8001be6 <xQueueIsQueueFullFromISR>
 8000910:	4603      	mov	r3, r0
 8000912:	4a1d      	ldr	r2, [pc, #116]	; (8000988 <BasicUSART2_Callback+0x98>)
 8000914:	6013      	str	r3, [r2, #0]

	//Por tanto si es True entonces aun no hay espacio
	if(xReturned != pdTRUE)
 8000916:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <BasicUSART2_Callback+0x98>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d00f      	beq.n	800093e <BasicUSART2_Callback+0x4e>
	{
		if(usartData != '\r' && usartData != '\n')
 800091e:	4b18      	ldr	r3, [pc, #96]	; (8000980 <BasicUSART2_Callback+0x90>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b0d      	cmp	r3, #13
 8000924:	d01d      	beq.n	8000962 <BasicUSART2_Callback+0x72>
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <BasicUSART2_Callback+0x90>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b0a      	cmp	r3, #10
 800092c:	d019      	beq.n	8000962 <BasicUSART2_Callback+0x72>
		{
			//Se envia caracter a la cola
			xQueueSendToBackFromISR(xQueue_InputData, (void *)&usartData, NULL);
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <BasicUSART2_Callback+0x94>)
 8000930:	6818      	ldr	r0, [r3, #0]
 8000932:	2300      	movs	r3, #0
 8000934:	2200      	movs	r2, #0
 8000936:	4912      	ldr	r1, [pc, #72]	; (8000980 <BasicUSART2_Callback+0x90>)
 8000938:	f000 fc4e 	bl	80011d8 <xQueueGenericSendFromISR>
 800093c:	e011      	b.n	8000962 <BasicUSART2_Callback+0x72>
		}
	}
	else
	{
		if(usartData == '#')
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <BasicUSART2_Callback+0x90>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b23      	cmp	r3, #35	; 0x23
 8000944:	d10d      	bne.n	8000962 <BasicUSART2_Callback+0x72>
		{
			//Se recibe mensaje de la cola
			xQueueReceiveFromISR(xQueue_InputData, (void *)&usartData, NULL);
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <BasicUSART2_Callback+0x94>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2200      	movs	r2, #0
 800094c:	490c      	ldr	r1, [pc, #48]	; (8000980 <BasicUSART2_Callback+0x90>)
 800094e:	4618      	mov	r0, r3
 8000950:	f000 ff74 	bl	800183c <xQueueReceiveFromISR>
			//Se envia mensaje a la cola
			xQueueSendToBackFromISR(xQueue_InputData, (void *)&usartData, NULL);
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <BasicUSART2_Callback+0x94>)
 8000956:	6818      	ldr	r0, [r3, #0]
 8000958:	2300      	movs	r3, #0
 800095a:	2200      	movs	r2, #0
 800095c:	4908      	ldr	r1, [pc, #32]	; (8000980 <BasicUSART2_Callback+0x90>)
 800095e:	f000 fc3b 	bl	80011d8 <xQueueGenericSendFromISR>
		}
	}
	//Se envia notificacion al command Task
	if(usartData == '#')
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <BasicUSART2_Callback+0x90>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b23      	cmp	r3, #35	; 0x23
 8000968:	d106      	bne.n	8000978 <BasicUSART2_Callback+0x88>
	{
		//xTaskNotifyFromISR(xHandleTask_Commands, 0, eNoAction, NULL);
		xSemaphoreGiveFromISR(xBinarySemaphore, &pxHigherPriorityTaskWoken);
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <BasicUSART2_Callback+0x9c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	1d3a      	adds	r2, r7, #4
 8000970:	4611      	mov	r1, r2
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fcda 	bl	800132c <xQueueGiveFromISR>
	}
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000000 	.word	0x20000000
 8000984:	200000fc 	.word	0x200000fc
 8000988:	200000e4 	.word	0x200000e4
 800098c:	200000f4 	.word	0x200000f4

08000990 <led_state_callback>:



//----------------------Inicio de la definicion de las funciones del Software Timer----------------------------------
void led_state_callback(TimerHandle_t xTimer)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	//Cambio estado opuesto Led
	GPIOxTooglePin(&handler_GPIO_BlinkyPin);
 8000998:	4803      	ldr	r0, [pc, #12]	; (80009a8 <led_state_callback+0x18>)
 800099a:	f003 fb79 	bl	8004090 <GPIOxTooglePin>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000a8 	.word	0x200000a8

080009ac <vTask_Menu>:
const char *msg_semaphore = "\n-----semaphore invalide------\n";

//----------------------Funciones referentes a cada tarea---------------------
//------Tarea Menu-------
void vTask_Menu(void * pvParameters)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af02      	add	r7, sp, #8
 80009b2:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	int option;

	//Mensaje inicial del menu
	const char* msg_menu = "=======================\n"
 80009b4:	4b48      	ldr	r3, [pc, #288]	; (8000ad8 <vTask_Menu+0x12c>)
 80009b6:	60bb      	str	r3, [r7, #8]
			               "Exit          ---> 2\n"
			               "Enter your choice here : ";
	while(1)
	{
		//Se envia a imprimir el mensaje a la consola
		xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 80009b8:	4b48      	ldr	r3, [pc, #288]	; (8000adc <vTask_Menu+0x130>)
 80009ba:	6818      	ldr	r0, [r3, #0]
 80009bc:	f107 0108 	add.w	r1, r7, #8
 80009c0:	2300      	movs	r3, #0
 80009c2:	f04f 32ff 	mov.w	r2, #4294967295
 80009c6:	f000 fb09 	bl	8000fdc <xQueueGenericSend>
		//Se espera por el comando a ejecutar
		xTaskNotifyWait(0,0,&cmd_addr, portMAX_DELAY);
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	f04f 32ff 	mov.w	r2, #4294967295
 80009d2:	9200      	str	r2, [sp, #0]
 80009d4:	2200      	movs	r2, #0
 80009d6:	2100      	movs	r1, #0
 80009d8:	2000      	movs	r0, #0
 80009da:	f002 f88b 	bl	8002af4 <xTaskGenericNotifyWait>
		cmd = (command_t* ) cmd_addr;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	617b      	str	r3, [r7, #20]

		//Se verificamos si se tiene un solo caracter
		if(cmd->len == 1)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d158      	bne.n	8000a9c <vTask_Menu+0xf0>
		{
			//Se transforma un ASCII a un numero 1...
			option = cmd->payload[0] - 48;
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	3b30      	subs	r3, #48	; 0x30
 80009f0:	613b      	str	r3, [r7, #16]

			switch(option){
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d033      	beq.n	8000a60 <vTask_Menu+0xb4>
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	dc45      	bgt.n	8000a8a <vTask_Menu+0xde>
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d003      	beq.n	8000a0c <vTask_Menu+0x60>
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d015      	beq.n	8000a36 <vTask_Menu+0x8a>
 8000a0a:	e03e      	b.n	8000a8a <vTask_Menu+0xde>
			case 0:
				//Se envia la opcion especificada
				xQueueSend(xQueue_Print, &msg_option_0, portMAX_DELAY);
 8000a0c:	4b33      	ldr	r3, [pc, #204]	; (8000adc <vTask_Menu+0x130>)
 8000a0e:	6818      	ldr	r0, [r3, #0]
 8000a10:	2300      	movs	r3, #0
 8000a12:	f04f 32ff 	mov.w	r2, #4294967295
 8000a16:	4932      	ldr	r1, [pc, #200]	; (8000ae0 <vTask_Menu+0x134>)
 8000a18:	f000 fae0 	bl	8000fdc <xQueueGenericSend>
				//Notificacion del cambio de estado
				next_state = sMainMenu;
 8000a1c:	4b31      	ldr	r3, [pc, #196]	; (8000ae4 <vTask_Menu+0x138>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
				xTaskNotify(xHandleTask_Menu, 0, eNoAction);
 8000a22:	4b31      	ldr	r3, [pc, #196]	; (8000ae8 <vTask_Menu+0x13c>)
 8000a24:	6818      	ldr	r0, [r3, #0]
 8000a26:	2300      	movs	r3, #0
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2100      	movs	r1, #0
 8000a30:	f002 f8e0 	bl	8002bf4 <xTaskGenericNotify>

				break;
 8000a34:	e046      	b.n	8000ac4 <vTask_Menu+0x118>
			case 1:
				//Se envia la opcion especificada
				xQueueSend(xQueue_Print, &msg_option_1, portMAX_DELAY);
 8000a36:	4b29      	ldr	r3, [pc, #164]	; (8000adc <vTask_Menu+0x130>)
 8000a38:	6818      	ldr	r0, [r3, #0]
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a40:	492a      	ldr	r1, [pc, #168]	; (8000aec <vTask_Menu+0x140>)
 8000a42:	f000 facb 	bl	8000fdc <xQueueGenericSend>
				//Notificacion del cambio de estado
				next_state = sMainMenu;
 8000a46:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <vTask_Menu+0x138>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
				xTaskNotify(xHandleTask_Menu, 0, eNoAction);
 8000a4c:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <vTask_Menu+0x13c>)
 8000a4e:	6818      	ldr	r0, [r3, #0]
 8000a50:	2300      	movs	r3, #0
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	2300      	movs	r3, #0
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	f002 f8cb 	bl	8002bf4 <xTaskGenericNotify>

				break;
 8000a5e:	e031      	b.n	8000ac4 <vTask_Menu+0x118>
			case 2:
				//Se envia la opcion especificada
				xQueueSend(xQueue_Print, &msg_option_2, portMAX_DELAY);
 8000a60:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <vTask_Menu+0x130>)
 8000a62:	6818      	ldr	r0, [r3, #0]
 8000a64:	2300      	movs	r3, #0
 8000a66:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6a:	4921      	ldr	r1, [pc, #132]	; (8000af0 <vTask_Menu+0x144>)
 8000a6c:	f000 fab6 	bl	8000fdc <xQueueGenericSend>
				//Notificacion del cambio de estado
				next_state = sMainMenu;
 8000a70:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <vTask_Menu+0x138>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
				xTaskNotify(xHandleTask_Menu, 0, eNoAction);
 8000a76:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <vTask_Menu+0x13c>)
 8000a78:	6818      	ldr	r0, [r3, #0]
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	2300      	movs	r3, #0
 8000a80:	2200      	movs	r2, #0
 8000a82:	2100      	movs	r1, #0
 8000a84:	f002 f8b6 	bl	8002bf4 <xTaskGenericNotify>

				break;
 8000a88:	e01c      	b.n	8000ac4 <vTask_Menu+0x118>
			default:
				//Se envia la opcion especificada
				xQueueSend(xQueue_Print, &msg_option_n, portMAX_DELAY);
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <vTask_Menu+0x130>)
 8000a8c:	6818      	ldr	r0, [r3, #0]
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f04f 32ff 	mov.w	r2, #4294967295
 8000a94:	4917      	ldr	r1, [pc, #92]	; (8000af4 <vTask_Menu+0x148>)
 8000a96:	f000 faa1 	bl	8000fdc <xQueueGenericSend>
				continue; //Se envia la instruccion al sistema de nuevo a esperar
 8000a9a:	e01c      	b.n	8000ad6 <vTask_Menu+0x12a>
			}
		}
		else
		{
			//Se envia la opcion especificada
			xQueueSend(xQueue_Print, &msg_invalid, portMAX_DELAY);
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <vTask_Menu+0x130>)
 8000a9e:	6818      	ldr	r0, [r3, #0]
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa6:	4914      	ldr	r1, [pc, #80]	; (8000af8 <vTask_Menu+0x14c>)
 8000aa8:	f000 fa98 	bl	8000fdc <xQueueGenericSend>
			//Notificacion del cambio de estado
			next_state = sMainMenu;
 8000aac:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <vTask_Menu+0x138>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
			xTaskNotify(xHandleTask_Menu, 0, eNoAction);
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <vTask_Menu+0x13c>)
 8000ab4:	6818      	ldr	r0, [r3, #0]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	2300      	movs	r3, #0
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	f002 f898 	bl	8002bf4 <xTaskGenericNotify>
		}

		//La tarea se queda en un estado de espera por un tiempo indefinido
		xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2300      	movs	r3, #0
 8000acc:	2200      	movs	r2, #0
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f002 f80f 	bl	8002af4 <xTaskGenericNotifyWait>
		xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 8000ad6:	e76f      	b.n	80009b8 <vTask_Menu+0xc>
 8000ad8:	08005770 	.word	0x08005770
 8000adc:	200000f8 	.word	0x200000f8
 8000ae0:	2000000c 	.word	0x2000000c
 8000ae4:	20000104 	.word	0x20000104
 8000ae8:	200000e8 	.word	0x200000e8
 8000aec:	20000010 	.word	0x20000010
 8000af0:	20000014 	.word	0x20000014
 8000af4:	20000018 	.word	0x20000018
 8000af8:	20000008 	.word	0x20000008

08000afc <vTask_Print>:

}

//-------Tarea de Imprimir-------
void vTask_Print(void * pvParameters)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	uint32_t *msg;

	while(1)
	{
		//Se espera por el puntero del mensaje
		xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <vTask_Print+0x28>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f107 010c 	add.w	r1, r7, #12
 8000b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 fca7 	bl	8001464 <xQueueReceive>
		//Enviamos por puerto serial dicho mensaje
		writeMsg(&handler_USART_CommTerm, (char *) msg);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4803      	ldr	r0, [pc, #12]	; (8000b28 <vTask_Print+0x2c>)
 8000b1c:	f003 ff0b 	bl	8004936 <writeMsg>
		xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8000b20:	e7f0      	b.n	8000b04 <vTask_Print+0x8>
 8000b22:	bf00      	nop
 8000b24:	200000f8 	.word	0x200000f8
 8000b28:	200000d8 	.word	0x200000d8

08000b2c <vTask_Commands>:
	}
}

//-------Tarea de los comando-------
void vTask_Commands(void * pvParameters)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	//BaseType_t notify_status = {0};
	command_t cmd = {0};
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]

	const TickType_t xMaxExpectedBlockTime = pdMS_TO_TICKS(1000);
 8000b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b46:	61fb      	str	r3, [r7, #28]
	while(1)
	{
		//Se espera por la notificacion de la interrupcion
		//notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
		//Si es verdadero se recibe una notificacion
		if(xSemaphoreTake(xBinarySemaphore, xMaxExpectedBlockTime) == pdPASS)
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <vTask_Commands+0x4c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	69f9      	ldr	r1, [r7, #28]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 fd68 	bl	8001624 <xQueueSemaphoreTake>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d105      	bne.n	8000b66 <vTask_Commands+0x3a>
		{
			//Se procesa el comando recibido
			process_command(&cmd);
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 f810 	bl	8000b84 <process_command>
 8000b64:	e7f0      	b.n	8000b48 <vTask_Commands+0x1c>
		}
		else
		{
			//Se envia la opcion especificada
			xQueueSend(xQueue_Print, &msg_semaphore, portMAX_DELAY);
 8000b66:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <vTask_Commands+0x50>)
 8000b68:	6818      	ldr	r0, [r3, #0]
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b70:	4903      	ldr	r1, [pc, #12]	; (8000b80 <vTask_Commands+0x54>)
 8000b72:	f000 fa33 	bl	8000fdc <xQueueGenericSend>
		if(xSemaphoreTake(xBinarySemaphore, xMaxExpectedBlockTime) == pdPASS)
 8000b76:	e7e7      	b.n	8000b48 <vTask_Commands+0x1c>
 8000b78:	200000f4 	.word	0x200000f4
 8000b7c:	200000f8 	.word	0x200000f8
 8000b80:	2000001c 	.word	0x2000001c

08000b84 <process_command>:
	}
}

//Funcion que ayuda en el procesamiento del comando
void process_command(command_t *cmd)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f000 f823 	bl	8000bd8 <extract_command>

	switch(next_state)
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <process_command+0x4c>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d012      	beq.n	8000bc0 <process_command+0x3c>
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	dc0e      	bgt.n	8000bbc <process_command+0x38>
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d002      	beq.n	8000ba8 <process_command+0x24>
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d00e      	beq.n	8000bc4 <process_command+0x40>
 8000ba6:	e009      	b.n	8000bbc <process_command+0x38>
	{
	case sMainMenu:
		//Notificamos a la tarea respectiva
		xTaskNotify(xHandleTask_Menu, (uint32_t) cmd, eSetValueWithoutOverwrite);
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <process_command+0x50>)
 8000baa:	6818      	ldr	r0, [r3, #0]
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	2300      	movs	r3, #0
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	f002 f81d 	bl	8002bf4 <xTaskGenericNotify>
		break;
 8000bba:	e004      	b.n	8000bc6 <process_command+0x42>

	case sRtcMenu:
		//xTaskNotify(xHandleTask_Rtc, (uint32_t) cmd, eSetValueWithoutOverwrite);
		break;
	default:
		__NOP();
 8000bbc:	bf00      	nop
		break;
 8000bbe:	e002      	b.n	8000bc6 <process_command+0x42>
		break;
 8000bc0:	bf00      	nop
 8000bc2:	e000      	b.n	8000bc6 <process_command+0x42>
		break;
 8000bc4:	bf00      	nop
	}
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000104 	.word	0x20000104
 8000bd4:	200000e8 	.word	0x200000e8

08000bd8 <extract_command>:
//Funcion para obtener el comando
int extract_command(command_t *cmd)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	//Definicion de variables
	uint8_t item;
	uint8_t counter_j = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	75fb      	strb	r3, [r7, #23]
	BaseType_t status;
	//Se verifica si hay un nuevo mensaje
	status = uxQueueMessagesWaiting(xQueue_InputData);
 8000be4:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <extract_command+0x70>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f000 feb6 	bl	800195a <uxQueueMessagesWaiting>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	613b      	str	r3, [r7, #16]
	if(status == 0)
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <extract_command+0x26>
	{
		return -1;
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfc:	e020      	b.n	8000c40 <extract_command+0x68>
	}
	do{
		//Recibimos un elemento y lo montamos en item
		status = xQueueReceive(xQueue_InputData, &item, 0);
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <extract_command+0x70>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f107 010f 	add.w	r1, r7, #15
 8000c06:	2200      	movs	r2, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 fc2b 	bl	8001464 <xQueueReceive>
 8000c0e:	6138      	str	r0, [r7, #16]
		if(status ==pdTRUE){
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d106      	bne.n	8000c24 <extract_command+0x4c>
			//Vamos llenando el arreglo del comando
			cmd->payload[counter_j++] = item;
 8000c16:	7dfb      	ldrb	r3, [r7, #23]
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	75fa      	strb	r2, [r7, #23]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	7bf9      	ldrb	r1, [r7, #15]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	5499      	strb	r1, [r3, r2]
		}
	}while(item != '#');
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	2b23      	cmp	r3, #35	; 0x23
 8000c28:	d1e9      	bne.n	8000bfe <extract_command+0x26>

	//Agregamos el elemento nulo y ademas definimos el largo del mensaje
	cmd->payload[counter_j - 1] = '\0';
 8000c2a:	7dfb      	ldrb	r3, [r7, #23]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	2100      	movs	r1, #0
 8000c32:	54d1      	strb	r1, [r2, r3]
	cmd->len = counter_j -1;
 8000c34:	7dfb      	ldrb	r3, [r7, #23]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	461a      	mov	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	60da      	str	r2, [r3, #12]

	return 0;
 8000c3e:	2300      	movs	r3, #0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200000fc 	.word	0x200000fc

08000c4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c4e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c50:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c56:	490d      	ldr	r1, [pc, #52]	; (8000c8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c58:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <LoopForever+0xe>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c6c:	4c0a      	ldr	r4, [pc, #40]	; (8000c98 <LoopForever+0x16>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c7a:	f004 f845 	bl	8004d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c7e:	f7ff fcb9 	bl	80005f4 <main>

08000c82 <LoopForever>:

LoopForever:
    b LoopForever
 8000c82:	e7fe      	b.n	8000c82 <LoopForever>
  ldr   r0, =_estack
 8000c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000c90:	0800586c 	.word	0x0800586c
  ldr r2, =_sbss
 8000c94:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000c98:	20013710 	.word	0x20013710

08000c9c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC_IRQHandler>

08000c9e <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f103 0208 	add.w	r2, r3, #8
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb6:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f103 0208 	add.w	r2, r3, #8
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f103 0208 	add.w	r2, r3, #8
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	689a      	ldr	r2, [r3, #8]
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	683a      	ldr	r2, [r7, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	683a      	ldr	r2, [r7, #0]
 8000d22:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	1c5a      	adds	r2, r3, #1
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	601a      	str	r2, [r3, #0]
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d56:	d103      	bne.n	8000d60 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	691b      	ldr	r3, [r3, #16]
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	e00c      	b.n	8000d7a <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3308      	adds	r3, #8
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	e002      	b.n	8000d6e <vListInsert+0x2e>
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	68ba      	ldr	r2, [r7, #8]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d2f6      	bcs.n	8000d68 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	68fa      	ldr	r2, [r7, #12]
 8000d8e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	1c5a      	adds	r2, r3, #1
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	601a      	str	r2, [r3, #0]
}
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000db2:	b480      	push	{r7}
 8000db4:	b085      	sub	sp, #20
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	6892      	ldr	r2, [r2, #8]
 8000dc8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	6852      	ldr	r2, [r2, #4]
 8000dd2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d103      	bne.n	8000de6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	1e5a      	subs	r2, r3, #1
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d10a      	bne.n	8000e32 <xQueueGenericReset+0x2a>
        __asm volatile
 8000e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e20:	f383 8811 	msr	BASEPRI, r3
 8000e24:	f3bf 8f6f 	isb	sy
 8000e28:	f3bf 8f4f 	dsb	sy
 8000e2c:	60bb      	str	r3, [r7, #8]
    }
 8000e2e:	bf00      	nop
 8000e30:	e7fe      	b.n	8000e30 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8000e32:	f002 fcc1 	bl	80037b8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e3e:	68f9      	ldr	r1, [r7, #12]
 8000e40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000e42:	fb01 f303 	mul.w	r3, r1, r3
 8000e46:	441a      	add	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e62:	3b01      	subs	r3, #1
 8000e64:	68f9      	ldr	r1, [r7, #12]
 8000e66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000e68:	fb01 f303 	mul.w	r3, r1, r3
 8000e6c:	441a      	add	r2, r3
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	22ff      	movs	r2, #255	; 0xff
 8000e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	22ff      	movs	r2, #255	; 0xff
 8000e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d114      	bne.n	8000eb2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d01a      	beq.n	8000ec6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	3310      	adds	r3, #16
 8000e94:	4618      	mov	r0, r3
 8000e96:	f001 fae1 	bl	800245c <xTaskRemoveFromEventList>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d012      	beq.n	8000ec6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <xQueueGenericReset+0xcc>)
 8000ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	f3bf 8f4f 	dsb	sy
 8000eac:	f3bf 8f6f 	isb	sy
 8000eb0:	e009      	b.n	8000ec6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3310      	adds	r3, #16
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fef1 	bl	8000c9e <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	3324      	adds	r3, #36	; 0x24
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff feec 	bl	8000c9e <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8000ec6:	f002 fca7 	bl	8003818 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	e000ed04 	.word	0xe000ed04

08000ed8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	; 0x30
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d10a      	bne.n	8000f02 <xQueueGenericCreate+0x2a>
        __asm volatile
 8000eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ef0:	f383 8811 	msr	BASEPRI, r3
 8000ef4:	f3bf 8f6f 	isb	sy
 8000ef8:	f3bf 8f4f 	dsb	sy
 8000efc:	61bb      	str	r3, [r7, #24]
    }
 8000efe:	bf00      	nop
 8000f00:	e7fe      	b.n	8000f00 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d006      	beq.n	8000f20 <xQueueGenericCreate+0x48>
 8000f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d101      	bne.n	8000f24 <xQueueGenericCreate+0x4c>
 8000f20:	2301      	movs	r3, #1
 8000f22:	e000      	b.n	8000f26 <xQueueGenericCreate+0x4e>
 8000f24:	2300      	movs	r3, #0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10a      	bne.n	8000f40 <xQueueGenericCreate+0x68>
        __asm volatile
 8000f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f2e:	f383 8811 	msr	BASEPRI, r3
 8000f32:	f3bf 8f6f 	isb	sy
 8000f36:	f3bf 8f4f 	dsb	sy
 8000f3a:	617b      	str	r3, [r7, #20]
    }
 8000f3c:	bf00      	nop
 8000f3e:	e7fe      	b.n	8000f3e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000f46:	d90a      	bls.n	8000f5e <xQueueGenericCreate+0x86>
        __asm volatile
 8000f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f4c:	f383 8811 	msr	BASEPRI, r3
 8000f50:	f3bf 8f6f 	isb	sy
 8000f54:	f3bf 8f4f 	dsb	sy
 8000f58:	613b      	str	r3, [r7, #16]
    }
 8000f5a:	bf00      	nop
 8000f5c:	e7fe      	b.n	8000f5c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	3350      	adds	r3, #80	; 0x50
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 fd4a 	bl	80039fc <pvPortMalloc>
 8000f68:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000f6a:	6a3b      	ldr	r3, [r7, #32]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00d      	beq.n	8000f8c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000f70:	6a3b      	ldr	r3, [r7, #32]
 8000f72:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	3350      	adds	r3, #80	; 0x50
 8000f78:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000f7a:	79fa      	ldrb	r2, [r7, #7]
 8000f7c:	6a3b      	ldr	r3, [r7, #32]
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	4613      	mov	r3, r2
 8000f82:	69fa      	ldr	r2, [r7, #28]
 8000f84:	68b9      	ldr	r1, [r7, #8]
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	f000 f805 	bl	8000f96 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000f8c:	6a3b      	ldr	r3, [r7, #32]
    }
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3728      	adds	r7, #40	; 0x28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b084      	sub	sp, #16
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	60f8      	str	r0, [r7, #12]
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d103      	bne.n	8000fb2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	e002      	b.n	8000fb8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	68ba      	ldr	r2, [r7, #8]
 8000fc2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	69b8      	ldr	r0, [r7, #24]
 8000fc8:	f7ff ff1e 	bl	8000e08 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	78fa      	ldrb	r2, [r7, #3]
 8000fd0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08e      	sub	sp, #56	; 0x38
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000fea:	2300      	movs	r3, #0
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8000ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10a      	bne.n	800100e <xQueueGenericSend+0x32>
        __asm volatile
 8000ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ffc:	f383 8811 	msr	BASEPRI, r3
 8001000:	f3bf 8f6f 	isb	sy
 8001004:	f3bf 8f4f 	dsb	sy
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800100a:	bf00      	nop
 800100c:	e7fe      	b.n	800100c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d103      	bne.n	800101c <xQueueGenericSend+0x40>
 8001014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <xQueueGenericSend+0x44>
 800101c:	2301      	movs	r3, #1
 800101e:	e000      	b.n	8001022 <xQueueGenericSend+0x46>
 8001020:	2300      	movs	r3, #0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10a      	bne.n	800103c <xQueueGenericSend+0x60>
        __asm volatile
 8001026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800102a:	f383 8811 	msr	BASEPRI, r3
 800102e:	f3bf 8f6f 	isb	sy
 8001032:	f3bf 8f4f 	dsb	sy
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001038:	bf00      	nop
 800103a:	e7fe      	b.n	800103a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2b02      	cmp	r3, #2
 8001040:	d103      	bne.n	800104a <xQueueGenericSend+0x6e>
 8001042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001046:	2b01      	cmp	r3, #1
 8001048:	d101      	bne.n	800104e <xQueueGenericSend+0x72>
 800104a:	2301      	movs	r3, #1
 800104c:	e000      	b.n	8001050 <xQueueGenericSend+0x74>
 800104e:	2300      	movs	r3, #0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d10a      	bne.n	800106a <xQueueGenericSend+0x8e>
        __asm volatile
 8001054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001058:	f383 8811 	msr	BASEPRI, r3
 800105c:	f3bf 8f6f 	isb	sy
 8001060:	f3bf 8f4f 	dsb	sy
 8001064:	623b      	str	r3, [r7, #32]
    }
 8001066:	bf00      	nop
 8001068:	e7fe      	b.n	8001068 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800106a:	f001 fb93 	bl	8002794 <xTaskGetSchedulerState>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d102      	bne.n	800107a <xQueueGenericSend+0x9e>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <xQueueGenericSend+0xa2>
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <xQueueGenericSend+0xa4>
 800107e:	2300      	movs	r3, #0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10a      	bne.n	800109a <xQueueGenericSend+0xbe>
        __asm volatile
 8001084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001088:	f383 8811 	msr	BASEPRI, r3
 800108c:	f3bf 8f6f 	isb	sy
 8001090:	f3bf 8f4f 	dsb	sy
 8001094:	61fb      	str	r3, [r7, #28]
    }
 8001096:	bf00      	nop
 8001098:	e7fe      	b.n	8001098 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800109a:	f002 fb8d 	bl	80037b8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800109e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d302      	bcc.n	80010b0 <xQueueGenericSend+0xd4>
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d129      	bne.n	8001104 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	68b9      	ldr	r1, [r7, #8]
 80010b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010b6:	f000 fc86 	bl	80019c6 <prvCopyDataToQueue>
 80010ba:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d010      	beq.n	80010e6 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c6:	3324      	adds	r3, #36	; 0x24
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 f9c7 	bl	800245c <xTaskRemoveFromEventList>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d013      	beq.n	80010fc <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80010d4:	4b3f      	ldr	r3, [pc, #252]	; (80011d4 <xQueueGenericSend+0x1f8>)
 80010d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	f3bf 8f4f 	dsb	sy
 80010e0:	f3bf 8f6f 	isb	sy
 80010e4:	e00a      	b.n	80010fc <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80010e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d007      	beq.n	80010fc <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80010ec:	4b39      	ldr	r3, [pc, #228]	; (80011d4 <xQueueGenericSend+0x1f8>)
 80010ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	f3bf 8f4f 	dsb	sy
 80010f8:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80010fc:	f002 fb8c 	bl	8003818 <vPortExitCritical>
                return pdPASS;
 8001100:	2301      	movs	r3, #1
 8001102:	e063      	b.n	80011cc <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d103      	bne.n	8001112 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800110a:	f002 fb85 	bl	8003818 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800110e:	2300      	movs	r3, #0
 8001110:	e05c      	b.n	80011cc <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001114:	2b00      	cmp	r3, #0
 8001116:	d106      	bne.n	8001126 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4618      	mov	r0, r3
 800111e:	f001 f9ff 	bl	8002520 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001122:	2301      	movs	r3, #1
 8001124:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001126:	f002 fb77 	bl	8003818 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800112a:	f000 ff79 	bl	8002020 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800112e:	f002 fb43 	bl	80037b8 <vPortEnterCritical>
 8001132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001134:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001138:	b25b      	sxtb	r3, r3
 800113a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113e:	d103      	bne.n	8001148 <xQueueGenericSend+0x16c>
 8001140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800114a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800114e:	b25b      	sxtb	r3, r3
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001154:	d103      	bne.n	800115e <xQueueGenericSend+0x182>
 8001156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800115e:	f002 fb5b 	bl	8003818 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001162:	1d3a      	adds	r2, r7, #4
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4611      	mov	r1, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f001 f9ee 	bl	800254c <xTaskCheckForTimeOut>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d124      	bne.n	80011c0 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001176:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001178:	f000 fd1d 	bl	8001bb6 <prvIsQueueFull>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d018      	beq.n	80011b4 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001184:	3310      	adds	r3, #16
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	4611      	mov	r1, r2
 800118a:	4618      	mov	r0, r3
 800118c:	f001 f916 	bl	80023bc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001192:	f000 fca8 	bl	8001ae6 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001196:	f000 ff51 	bl	800203c <xTaskResumeAll>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	f47f af7c 	bne.w	800109a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <xQueueGenericSend+0x1f8>)
 80011a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	f3bf 8f4f 	dsb	sy
 80011ae:	f3bf 8f6f 	isb	sy
 80011b2:	e772      	b.n	800109a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80011b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011b6:	f000 fc96 	bl	8001ae6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80011ba:	f000 ff3f 	bl	800203c <xTaskResumeAll>
 80011be:	e76c      	b.n	800109a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80011c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011c2:	f000 fc90 	bl	8001ae6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80011c6:	f000 ff39 	bl	800203c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80011ca:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3738      	adds	r7, #56	; 0x38
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	e000ed04 	.word	0xe000ed04

080011d8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b090      	sub	sp, #64	; 0x40
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80011ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10a      	bne.n	8001206 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80011f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011f4:	f383 8811 	msr	BASEPRI, r3
 80011f8:	f3bf 8f6f 	isb	sy
 80011fc:	f3bf 8f4f 	dsb	sy
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001202:	bf00      	nop
 8001204:	e7fe      	b.n	8001204 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d103      	bne.n	8001214 <xQueueGenericSendFromISR+0x3c>
 800120c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	2b00      	cmp	r3, #0
 8001212:	d101      	bne.n	8001218 <xQueueGenericSendFromISR+0x40>
 8001214:	2301      	movs	r3, #1
 8001216:	e000      	b.n	800121a <xQueueGenericSendFromISR+0x42>
 8001218:	2300      	movs	r3, #0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10a      	bne.n	8001234 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800121e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001222:	f383 8811 	msr	BASEPRI, r3
 8001226:	f3bf 8f6f 	isb	sy
 800122a:	f3bf 8f4f 	dsb	sy
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001230:	bf00      	nop
 8001232:	e7fe      	b.n	8001232 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d103      	bne.n	8001242 <xQueueGenericSendFromISR+0x6a>
 800123a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800123c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800123e:	2b01      	cmp	r3, #1
 8001240:	d101      	bne.n	8001246 <xQueueGenericSendFromISR+0x6e>
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <xQueueGenericSendFromISR+0x70>
 8001246:	2300      	movs	r3, #0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d10a      	bne.n	8001262 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800124c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001250:	f383 8811 	msr	BASEPRI, r3
 8001254:	f3bf 8f6f 	isb	sy
 8001258:	f3bf 8f4f 	dsb	sy
 800125c:	623b      	str	r3, [r7, #32]
    }
 800125e:	bf00      	nop
 8001260:	e7fe      	b.n	8001260 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001262:	f002 fb8b 	bl	800397c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8001266:	f3ef 8211 	mrs	r2, BASEPRI
 800126a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800126e:	f383 8811 	msr	BASEPRI, r3
 8001272:	f3bf 8f6f 	isb	sy
 8001276:	f3bf 8f4f 	dsb	sy
 800127a:	61fa      	str	r2, [r7, #28]
 800127c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800127e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001280:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800128a:	429a      	cmp	r2, r3
 800128c:	d302      	bcc.n	8001294 <xQueueGenericSendFromISR+0xbc>
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	2b02      	cmp	r3, #2
 8001292:	d13e      	bne.n	8001312 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001296:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800129a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800129e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	68b9      	ldr	r1, [r7, #8]
 80012a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80012aa:	f000 fb8c 	bl	80019c6 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80012ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80012b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b6:	d112      	bne.n	80012de <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80012b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d025      	beq.n	800130c <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80012c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012c2:	3324      	adds	r3, #36	; 0x24
 80012c4:	4618      	mov	r0, r3
 80012c6:	f001 f8c9 	bl	800245c <xTaskRemoveFromEventList>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d01d      	beq.n	800130c <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d01a      	beq.n	800130c <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	e016      	b.n	800130c <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80012de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80012e2:	2b7f      	cmp	r3, #127	; 0x7f
 80012e4:	d10a      	bne.n	80012fc <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80012e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ea:	f383 8811 	msr	BASEPRI, r3
 80012ee:	f3bf 8f6f 	isb	sy
 80012f2:	f3bf 8f4f 	dsb	sy
 80012f6:	617b      	str	r3, [r7, #20]
    }
 80012f8:	bf00      	nop
 80012fa:	e7fe      	b.n	80012fa <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80012fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001300:	3301      	adds	r3, #1
 8001302:	b2db      	uxtb	r3, r3
 8001304:	b25a      	sxtb	r2, r3
 8001306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800130c:	2301      	movs	r3, #1
 800130e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8001310:	e001      	b.n	8001316 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8001312:	2300      	movs	r3, #0
 8001314:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001318:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001320:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001324:	4618      	mov	r0, r3
 8001326:	3740      	adds	r7, #64	; 0x40
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08e      	sub	sp, #56	; 0x38
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800133a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133c:	2b00      	cmp	r3, #0
 800133e:	d10a      	bne.n	8001356 <xQueueGiveFromISR+0x2a>
        __asm volatile
 8001340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001344:	f383 8811 	msr	BASEPRI, r3
 8001348:	f3bf 8f6f 	isb	sy
 800134c:	f3bf 8f4f 	dsb	sy
 8001350:	623b      	str	r3, [r7, #32]
    }
 8001352:	bf00      	nop
 8001354:	e7fe      	b.n	8001354 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8001356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00a      	beq.n	8001374 <xQueueGiveFromISR+0x48>
        __asm volatile
 800135e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001362:	f383 8811 	msr	BASEPRI, r3
 8001366:	f3bf 8f6f 	isb	sy
 800136a:	f3bf 8f4f 	dsb	sy
 800136e:	61fb      	str	r3, [r7, #28]
    }
 8001370:	bf00      	nop
 8001372:	e7fe      	b.n	8001372 <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d103      	bne.n	8001384 <xQueueGiveFromISR+0x58>
 800137c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <xQueueGiveFromISR+0x5c>
 8001384:	2301      	movs	r3, #1
 8001386:	e000      	b.n	800138a <xQueueGiveFromISR+0x5e>
 8001388:	2300      	movs	r3, #0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10a      	bne.n	80013a4 <xQueueGiveFromISR+0x78>
        __asm volatile
 800138e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001392:	f383 8811 	msr	BASEPRI, r3
 8001396:	f3bf 8f6f 	isb	sy
 800139a:	f3bf 8f4f 	dsb	sy
 800139e:	61bb      	str	r3, [r7, #24]
    }
 80013a0:	bf00      	nop
 80013a2:	e7fe      	b.n	80013a2 <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80013a4:	f002 faea 	bl	800397c <vPortValidateInterruptPriority>
        __asm volatile
 80013a8:	f3ef 8211 	mrs	r2, BASEPRI
 80013ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013b0:	f383 8811 	msr	BASEPRI, r3
 80013b4:	f3bf 8f6f 	isb	sy
 80013b8:	f3bf 8f4f 	dsb	sy
 80013bc:	617a      	str	r2, [r7, #20]
 80013be:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 80013c0:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80013c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 80013ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d23a      	bcs.n	800144a <xQueueGiveFromISR+0x11e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80013d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80013de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80013e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80013ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ee:	d112      	bne.n	8001416 <xQueueGiveFromISR+0xea>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80013f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d025      	beq.n	8001444 <xQueueGiveFromISR+0x118>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80013f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013fa:	3324      	adds	r3, #36	; 0x24
 80013fc:	4618      	mov	r0, r3
 80013fe:	f001 f82d 	bl	800245c <xTaskRemoveFromEventList>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d01d      	beq.n	8001444 <xQueueGiveFromISR+0x118>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d01a      	beq.n	8001444 <xQueueGiveFromISR+0x118>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	2201      	movs	r2, #1
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e016      	b.n	8001444 <xQueueGiveFromISR+0x118>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8001416:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800141a:	2b7f      	cmp	r3, #127	; 0x7f
 800141c:	d10a      	bne.n	8001434 <xQueueGiveFromISR+0x108>
        __asm volatile
 800141e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001422:	f383 8811 	msr	BASEPRI, r3
 8001426:	f3bf 8f6f 	isb	sy
 800142a:	f3bf 8f4f 	dsb	sy
 800142e:	60fb      	str	r3, [r7, #12]
    }
 8001430:	bf00      	nop
 8001432:	e7fe      	b.n	8001432 <xQueueGiveFromISR+0x106>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001438:	3301      	adds	r3, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	b25a      	sxtb	r2, r3
 800143e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8001444:	2301      	movs	r3, #1
 8001446:	637b      	str	r3, [r7, #52]	; 0x34
 8001448:	e001      	b.n	800144e <xQueueGiveFromISR+0x122>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800144a:	2300      	movs	r3, #0
 800144c:	637b      	str	r3, [r7, #52]	; 0x34
 800144e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001450:	60bb      	str	r3, [r7, #8]
        __asm volatile
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	f383 8811 	msr	BASEPRI, r3
    }
 8001458:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800145a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800145c:	4618      	mov	r0, r3
 800145e:	3738      	adds	r7, #56	; 0x38
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	; 0x30
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001470:	2300      	movs	r3, #0
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10a      	bne.n	8001494 <xQueueReceive+0x30>
        __asm volatile
 800147e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001482:	f383 8811 	msr	BASEPRI, r3
 8001486:	f3bf 8f6f 	isb	sy
 800148a:	f3bf 8f4f 	dsb	sy
 800148e:	623b      	str	r3, [r7, #32]
    }
 8001490:	bf00      	nop
 8001492:	e7fe      	b.n	8001492 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d103      	bne.n	80014a2 <xQueueReceive+0x3e>
 800149a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <xQueueReceive+0x42>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <xQueueReceive+0x44>
 80014a6:	2300      	movs	r3, #0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10a      	bne.n	80014c2 <xQueueReceive+0x5e>
        __asm volatile
 80014ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014b0:	f383 8811 	msr	BASEPRI, r3
 80014b4:	f3bf 8f6f 	isb	sy
 80014b8:	f3bf 8f4f 	dsb	sy
 80014bc:	61fb      	str	r3, [r7, #28]
    }
 80014be:	bf00      	nop
 80014c0:	e7fe      	b.n	80014c0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80014c2:	f001 f967 	bl	8002794 <xTaskGetSchedulerState>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <xQueueReceive+0x6e>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <xQueueReceive+0x72>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <xQueueReceive+0x74>
 80014d6:	2300      	movs	r3, #0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10a      	bne.n	80014f2 <xQueueReceive+0x8e>
        __asm volatile
 80014dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014e0:	f383 8811 	msr	BASEPRI, r3
 80014e4:	f3bf 8f6f 	isb	sy
 80014e8:	f3bf 8f4f 	dsb	sy
 80014ec:	61bb      	str	r3, [r7, #24]
    }
 80014ee:	bf00      	nop
 80014f0:	e7fe      	b.n	80014f0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80014f2:	f002 f961 	bl	80037b8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80014f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d01f      	beq.n	8001542 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001506:	f000 fac8 	bl	8001a9a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	1e5a      	subs	r2, r3, #1
 800150e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001510:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00f      	beq.n	800153a <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800151a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151c:	3310      	adds	r3, #16
 800151e:	4618      	mov	r0, r3
 8001520:	f000 ff9c 	bl	800245c <xTaskRemoveFromEventList>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d007      	beq.n	800153a <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800152a:	4b3d      	ldr	r3, [pc, #244]	; (8001620 <xQueueReceive+0x1bc>)
 800152c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	f3bf 8f4f 	dsb	sy
 8001536:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800153a:	f002 f96d 	bl	8003818 <vPortExitCritical>
                return pdPASS;
 800153e:	2301      	movs	r3, #1
 8001540:	e069      	b.n	8001616 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d103      	bne.n	8001550 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001548:	f002 f966 	bl	8003818 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800154c:	2300      	movs	r3, #0
 800154e:	e062      	b.n	8001616 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001552:	2b00      	cmp	r3, #0
 8001554:	d106      	bne.n	8001564 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001556:	f107 0310 	add.w	r3, r7, #16
 800155a:	4618      	mov	r0, r3
 800155c:	f000 ffe0 	bl	8002520 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001560:	2301      	movs	r3, #1
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001564:	f002 f958 	bl	8003818 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001568:	f000 fd5a 	bl	8002020 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800156c:	f002 f924 	bl	80037b8 <vPortEnterCritical>
 8001570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001572:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001576:	b25b      	sxtb	r3, r3
 8001578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157c:	d103      	bne.n	8001586 <xQueueReceive+0x122>
 800157e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001588:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800158c:	b25b      	sxtb	r3, r3
 800158e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001592:	d103      	bne.n	800159c <xQueueReceive+0x138>
 8001594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800159c:	f002 f93c 	bl	8003818 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80015a0:	1d3a      	adds	r2, r7, #4
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 ffcf 	bl	800254c <xTaskCheckForTimeOut>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d123      	bne.n	80015fc <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80015b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015b6:	f000 fae8 	bl	8001b8a <prvIsQueueEmpty>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d017      	beq.n	80015f0 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80015c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c2:	3324      	adds	r3, #36	; 0x24
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 fef7 	bl	80023bc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80015ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015d0:	f000 fa89 	bl	8001ae6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80015d4:	f000 fd32 	bl	800203c <xTaskResumeAll>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d189      	bne.n	80014f2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <xQueueReceive+0x1bc>)
 80015e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	f3bf 8f4f 	dsb	sy
 80015ea:	f3bf 8f6f 	isb	sy
 80015ee:	e780      	b.n	80014f2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80015f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015f2:	f000 fa78 	bl	8001ae6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80015f6:	f000 fd21 	bl	800203c <xTaskResumeAll>
 80015fa:	e77a      	b.n	80014f2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80015fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015fe:	f000 fa72 	bl	8001ae6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001602:	f000 fd1b 	bl	800203c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001608:	f000 fabf 	bl	8001b8a <prvIsQueueEmpty>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	f43f af6f 	beq.w	80014f2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001614:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001616:	4618      	mov	r0, r3
 8001618:	3730      	adds	r7, #48	; 0x30
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	e000ed04 	.word	0xe000ed04

08001624 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08e      	sub	sp, #56	; 0x38
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800162e:	2300      	movs	r3, #0
 8001630:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8001636:	2300      	movs	r3, #0
 8001638:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800163a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163c:	2b00      	cmp	r3, #0
 800163e:	d10a      	bne.n	8001656 <xQueueSemaphoreTake+0x32>
        __asm volatile
 8001640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001644:	f383 8811 	msr	BASEPRI, r3
 8001648:	f3bf 8f6f 	isb	sy
 800164c:	f3bf 8f4f 	dsb	sy
 8001650:	623b      	str	r3, [r7, #32]
    }
 8001652:	bf00      	nop
 8001654:	e7fe      	b.n	8001654 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8001656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00a      	beq.n	8001674 <xQueueSemaphoreTake+0x50>
        __asm volatile
 800165e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001662:	f383 8811 	msr	BASEPRI, r3
 8001666:	f3bf 8f6f 	isb	sy
 800166a:	f3bf 8f4f 	dsb	sy
 800166e:	61fb      	str	r3, [r7, #28]
    }
 8001670:	bf00      	nop
 8001672:	e7fe      	b.n	8001672 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001674:	f001 f88e 	bl	8002794 <xTaskGetSchedulerState>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d102      	bne.n	8001684 <xQueueSemaphoreTake+0x60>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <xQueueSemaphoreTake+0x64>
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <xQueueSemaphoreTake+0x66>
 8001688:	2300      	movs	r3, #0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10a      	bne.n	80016a4 <xQueueSemaphoreTake+0x80>
        __asm volatile
 800168e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001692:	f383 8811 	msr	BASEPRI, r3
 8001696:	f3bf 8f6f 	isb	sy
 800169a:	f3bf 8f4f 	dsb	sy
 800169e:	61bb      	str	r3, [r7, #24]
    }
 80016a0:	bf00      	nop
 80016a2:	e7fe      	b.n	80016a2 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80016a4:	f002 f888 	bl	80037b8 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80016a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80016ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d024      	beq.n	80016fe <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80016b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b6:	1e5a      	subs	r2, r3, #1
 80016b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ba:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80016bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d104      	bne.n	80016ce <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80016c4:	f001 fa02 	bl	8002acc <pvTaskIncrementMutexHeldCount>
 80016c8:	4602      	mov	r2, r0
 80016ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016cc:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80016ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00f      	beq.n	80016f6 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80016d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d8:	3310      	adds	r3, #16
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 febe 	bl	800245c <xTaskRemoveFromEventList>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d007      	beq.n	80016f6 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80016e6:	4b54      	ldr	r3, [pc, #336]	; (8001838 <xQueueSemaphoreTake+0x214>)
 80016e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	f3bf 8f4f 	dsb	sy
 80016f2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80016f6:	f002 f88f 	bl	8003818 <vPortExitCritical>
                return pdPASS;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e097      	b.n	800182e <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d111      	bne.n	8001728 <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8001704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00a      	beq.n	8001720 <xQueueSemaphoreTake+0xfc>
        __asm volatile
 800170a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800170e:	f383 8811 	msr	BASEPRI, r3
 8001712:	f3bf 8f6f 	isb	sy
 8001716:	f3bf 8f4f 	dsb	sy
 800171a:	617b      	str	r3, [r7, #20]
    }
 800171c:	bf00      	nop
 800171e:	e7fe      	b.n	800171e <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8001720:	f002 f87a 	bl	8003818 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001724:	2300      	movs	r3, #0
 8001726:	e082      	b.n	800182e <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800172a:	2b00      	cmp	r3, #0
 800172c:	d106      	bne.n	800173c <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	4618      	mov	r0, r3
 8001734:	f000 fef4 	bl	8002520 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001738:	2301      	movs	r3, #1
 800173a:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800173c:	f002 f86c 	bl	8003818 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001740:	f000 fc6e 	bl	8002020 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001744:	f002 f838 	bl	80037b8 <vPortEnterCritical>
 8001748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800174e:	b25b      	sxtb	r3, r3
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001754:	d103      	bne.n	800175e <xQueueSemaphoreTake+0x13a>
 8001756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800175e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001764:	b25b      	sxtb	r3, r3
 8001766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176a:	d103      	bne.n	8001774 <xQueueSemaphoreTake+0x150>
 800176c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001774:	f002 f850 	bl	8003818 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001778:	463a      	mov	r2, r7
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f000 fee3 	bl	800254c <xTaskCheckForTimeOut>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d132      	bne.n	80017f2 <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800178c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800178e:	f000 f9fc 	bl	8001b8a <prvIsQueueEmpty>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d026      	beq.n	80017e6 <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d109      	bne.n	80017b4 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 80017a0:	f002 f80a 	bl	80037b8 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80017a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f001 f811 	bl	80027d0 <xTaskPriorityInherit>
 80017ae:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 80017b0:	f002 f832 	bl	8003818 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80017b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b6:	3324      	adds	r3, #36	; 0x24
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 fdfd 	bl	80023bc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80017c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017c4:	f000 f98f 	bl	8001ae6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80017c8:	f000 fc38 	bl	800203c <xTaskResumeAll>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f47f af68 	bne.w	80016a4 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 80017d4:	4b18      	ldr	r3, [pc, #96]	; (8001838 <xQueueSemaphoreTake+0x214>)
 80017d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	f3bf 8f4f 	dsb	sy
 80017e0:	f3bf 8f6f 	isb	sy
 80017e4:	e75e      	b.n	80016a4 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80017e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017e8:	f000 f97d 	bl	8001ae6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80017ec:	f000 fc26 	bl	800203c <xTaskResumeAll>
 80017f0:	e758      	b.n	80016a4 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80017f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017f4:	f000 f977 	bl	8001ae6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80017f8:	f000 fc20 	bl	800203c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80017fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017fe:	f000 f9c4 	bl	8001b8a <prvIsQueueEmpty>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	f43f af4d 	beq.w	80016a4 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800180a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00d      	beq.n	800182c <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 8001810:	f001 ffd2 	bl	80037b8 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001814:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001816:	f000 f8be 	bl	8001996 <prvGetDisinheritPriorityAfterTimeout>
 800181a:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800181c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001822:	4618      	mov	r0, r3
 8001824:	f001 f8c4 	bl	80029b0 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8001828:	f001 fff6 	bl	8003818 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800182c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800182e:	4618      	mov	r0, r3
 8001830:	3738      	adds	r7, #56	; 0x38
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	e000ed04 	.word	0xe000ed04

0800183c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b090      	sub	sp, #64	; 0x40
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800184c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10a      	bne.n	8001868 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8001852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001856:	f383 8811 	msr	BASEPRI, r3
 800185a:	f3bf 8f6f 	isb	sy
 800185e:	f3bf 8f4f 	dsb	sy
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001864:	bf00      	nop
 8001866:	e7fe      	b.n	8001866 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d103      	bne.n	8001876 <xQueueReceiveFromISR+0x3a>
 800186e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <xQueueReceiveFromISR+0x3e>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <xQueueReceiveFromISR+0x40>
 800187a:	2300      	movs	r3, #0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10a      	bne.n	8001896 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8001880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001884:	f383 8811 	msr	BASEPRI, r3
 8001888:	f3bf 8f6f 	isb	sy
 800188c:	f3bf 8f4f 	dsb	sy
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001892:	bf00      	nop
 8001894:	e7fe      	b.n	8001894 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001896:	f002 f871 	bl	800397c <vPortValidateInterruptPriority>
        __asm volatile
 800189a:	f3ef 8211 	mrs	r2, BASEPRI
 800189e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a2:	f383 8811 	msr	BASEPRI, r3
 80018a6:	f3bf 8f6f 	isb	sy
 80018aa:	f3bf 8f4f 	dsb	sy
 80018ae:	623a      	str	r2, [r7, #32]
 80018b0:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80018b2:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80018b4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80018b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ba:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80018bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d03e      	beq.n	8001940 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80018c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80018d0:	f000 f8e3 	bl	8001a9a <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80018d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d6:	1e5a      	subs	r2, r3, #1
 80018d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018da:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80018dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80018e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e4:	d112      	bne.n	800190c <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80018e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d025      	beq.n	800193a <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80018ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018f0:	3310      	adds	r3, #16
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 fdb2 	bl	800245c <xTaskRemoveFromEventList>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d01d      	beq.n	800193a <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d01a      	beq.n	800193a <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	e016      	b.n	800193a <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 800190c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001910:	2b7f      	cmp	r3, #127	; 0x7f
 8001912:	d10a      	bne.n	800192a <xQueueReceiveFromISR+0xee>
        __asm volatile
 8001914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001918:	f383 8811 	msr	BASEPRI, r3
 800191c:	f3bf 8f6f 	isb	sy
 8001920:	f3bf 8f4f 	dsb	sy
 8001924:	61bb      	str	r3, [r7, #24]
    }
 8001926:	bf00      	nop
 8001928:	e7fe      	b.n	8001928 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800192a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800192e:	3301      	adds	r3, #1
 8001930:	b2db      	uxtb	r3, r3
 8001932:	b25a      	sxtb	r2, r3
 8001934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 800193a:	2301      	movs	r3, #1
 800193c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800193e:	e001      	b.n	8001944 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 8001940:	2300      	movs	r3, #0
 8001942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001946:	617b      	str	r3, [r7, #20]
        __asm volatile
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f383 8811 	msr	BASEPRI, r3
    }
 800194e:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001952:	4618      	mov	r0, r3
 8001954:	3740      	adds	r7, #64	; 0x40
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b084      	sub	sp, #16
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10a      	bne.n	800197e <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8001968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800196c:	f383 8811 	msr	BASEPRI, r3
 8001970:	f3bf 8f6f 	isb	sy
 8001974:	f3bf 8f4f 	dsb	sy
 8001978:	60bb      	str	r3, [r7, #8]
    }
 800197a:	bf00      	nop
 800197c:	e7fe      	b.n	800197c <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 800197e:	f001 ff1b 	bl	80037b8 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001986:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8001988:	f001 ff46 	bl	8003818 <vPortExitCritical>

    return uxReturn;
 800198c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8001996:	b480      	push	{r7}
 8001998:	b085      	sub	sp, #20
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d006      	beq.n	80019b4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f1c3 0305 	rsb	r3, r3, #5
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	e001      	b.n	80019b8 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80019b8:	68fb      	ldr	r3, [r7, #12]
    }
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b086      	sub	sp, #24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019da:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10d      	bne.n	8001a00 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d14d      	bne.n	8001a88 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 ff63 	bl	80028bc <xTaskPriorityDisinherit>
 80019f6:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	e043      	b.n	8001a88 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d119      	bne.n	8001a3a <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6858      	ldr	r0, [r3, #4]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	461a      	mov	r2, r3
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	f003 f99d 	bl	8004d50 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	441a      	add	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d32b      	bcc.n	8001a88 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	e026      	b.n	8001a88 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	68d8      	ldr	r0, [r3, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	461a      	mov	r2, r3
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	f003 f983 	bl	8004d50 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	425b      	negs	r3, r3
 8001a54:	441a      	add	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d207      	bcs.n	8001a76 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	425b      	negs	r3, r3
 8001a70:	441a      	add	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d105      	bne.n	8001a88 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001a90:	697b      	ldr	r3, [r7, #20]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d018      	beq.n	8001ade <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68da      	ldr	r2, [r3, #12]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	441a      	add	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d303      	bcc.n	8001ace <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68d9      	ldr	r1, [r3, #12]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	6838      	ldr	r0, [r7, #0]
 8001ada:	f003 f939 	bl	8004d50 <memcpy>
    }
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001aee:	f001 fe63 	bl	80037b8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001af8:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001afa:	e011      	b.n	8001b20 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d012      	beq.n	8001b2a <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3324      	adds	r3, #36	; 0x24
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 fca7 	bl	800245c <xTaskRemoveFromEventList>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8001b14:	f000 fd80 	bl	8002618 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	dce9      	bgt.n	8001afc <prvUnlockQueue+0x16>
 8001b28:	e000      	b.n	8001b2c <prvUnlockQueue+0x46>
                        break;
 8001b2a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	22ff      	movs	r2, #255	; 0xff
 8001b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001b34:	f001 fe70 	bl	8003818 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001b38:	f001 fe3e 	bl	80037b8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b42:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001b44:	e011      	b.n	8001b6a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d012      	beq.n	8001b74 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3310      	adds	r3, #16
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 fc82 	bl	800245c <xTaskRemoveFromEventList>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001b5e:	f000 fd5b 	bl	8002618 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001b62:	7bbb      	ldrb	r3, [r7, #14]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001b6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	dce9      	bgt.n	8001b46 <prvUnlockQueue+0x60>
 8001b72:	e000      	b.n	8001b76 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001b74:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	22ff      	movs	r2, #255	; 0xff
 8001b7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001b7e:	f001 fe4b 	bl	8003818 <vPortExitCritical>
}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001b92:	f001 fe11 	bl	80037b8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d102      	bne.n	8001ba4 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	e001      	b.n	8001ba8 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001ba8:	f001 fe36 	bl	8003818 <vPortExitCritical>

    return xReturn;
 8001bac:	68fb      	ldr	r3, [r7, #12]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001bbe:	f001 fdfb 	bl	80037b8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d102      	bne.n	8001bd4 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	e001      	b.n	8001bd8 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001bd8:	f001 fe1e 	bl	8003818 <vPortExitCritical>

    return xReturn;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8001be6:	b480      	push	{r7}
 8001be8:	b087      	sub	sp, #28
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10a      	bne.n	8001c0e <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8001bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bfc:	f383 8811 	msr	BASEPRI, r3
 8001c00:	f3bf 8f6f 	isb	sy
 8001c04:	f3bf 8f4f 	dsb	sy
 8001c08:	60fb      	str	r3, [r7, #12]
    }
 8001c0a:	bf00      	nop
 8001c0c:	e7fe      	b.n	8001c0c <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d102      	bne.n	8001c20 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	e001      	b.n	8001c24 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001c24:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001c26:	4618      	mov	r0, r3
 8001c28:	371c      	adds	r7, #28
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	e014      	b.n	8001c6e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001c44:	4a0f      	ldr	r2, [pc, #60]	; (8001c84 <vQueueAddToRegistry+0x50>)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10b      	bne.n	8001c68 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001c50:	490c      	ldr	r1, [pc, #48]	; (8001c84 <vQueueAddToRegistry+0x50>)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <vQueueAddToRegistry+0x50>)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4413      	add	r3, r2
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8001c66:	e006      	b.n	8001c76 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2b07      	cmp	r3, #7
 8001c72:	d9e7      	bls.n	8001c44 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000108 	.word	0x20000108

08001c88 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001c98:	f001 fd8e 	bl	80037b8 <vPortEnterCritical>
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca8:	d103      	bne.n	8001cb2 <vQueueWaitForMessageRestricted+0x2a>
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cb8:	b25b      	sxtb	r3, r3
 8001cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbe:	d103      	bne.n	8001cc8 <vQueueWaitForMessageRestricted+0x40>
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001cc8:	f001 fda6 	bl	8003818 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d106      	bne.n	8001ce2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	3324      	adds	r3, #36	; 0x24
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	68b9      	ldr	r1, [r7, #8]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 fb91 	bl	8002404 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001ce2:	6978      	ldr	r0, [r7, #20]
 8001ce4:	f7ff feff 	bl	8001ae6 <prvUnlockQueue>
    }
 8001ce8:	bf00      	nop
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08c      	sub	sp, #48	; 0x30
 8001cf4:	af04      	add	r7, sp, #16
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f001 fe79 	bl	80039fc <pvPortMalloc>
 8001d0a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00e      	beq.n	8001d30 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001d12:	2058      	movs	r0, #88	; 0x58
 8001d14:	f001 fe72 	bl	80039fc <pvPortMalloc>
 8001d18:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	631a      	str	r2, [r3, #48]	; 0x30
 8001d26:	e005      	b.n	8001d34 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001d28:	6978      	ldr	r0, [r7, #20]
 8001d2a:	f001 ff47 	bl	8003bbc <vPortFree>
 8001d2e:	e001      	b.n	8001d34 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d013      	beq.n	8001d62 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001d3a:	88fa      	ldrh	r2, [r7, #6]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	9303      	str	r3, [sp, #12]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	9302      	str	r3, [sp, #8]
 8001d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68b9      	ldr	r1, [r7, #8]
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 f80e 	bl	8001d72 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001d56:	69f8      	ldr	r0, [r7, #28]
 8001d58:	f000 f8a2 	bl	8001ea0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	61bb      	str	r3, [r7, #24]
 8001d60:	e002      	b.n	8001d68 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295
 8001d66:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001d68:	69bb      	ldr	r3, [r7, #24]
    }
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3720      	adds	r7, #32
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b088      	sub	sp, #32
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	60f8      	str	r0, [r7, #12]
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d82:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	21a5      	movs	r1, #165	; 0xa5
 8001d8c:	f002 ffee 	bl	8004d6c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	f023 0307 	bic.w	r3, r3, #7
 8001da8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00a      	beq.n	8001dca <prvInitialiseNewTask+0x58>
        __asm volatile
 8001db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db8:	f383 8811 	msr	BASEPRI, r3
 8001dbc:	f3bf 8f6f 	isb	sy
 8001dc0:	f3bf 8f4f 	dsb	sy
 8001dc4:	617b      	str	r3, [r7, #20]
    }
 8001dc6:	bf00      	nop
 8001dc8:	e7fe      	b.n	8001dc8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d01f      	beq.n	8001e10 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
 8001dd4:	e012      	b.n	8001dfc <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	4413      	add	r3, r2
 8001ddc:	7819      	ldrb	r1, [r3, #0]
 8001dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	4413      	add	r3, r2
 8001de4:	3334      	adds	r3, #52	; 0x34
 8001de6:	460a      	mov	r2, r1
 8001de8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	4413      	add	r3, r2
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d006      	beq.n	8001e04 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	61fb      	str	r3, [r7, #28]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	2b09      	cmp	r3, #9
 8001e00:	d9e9      	bls.n	8001dd6 <prvInitialiseNewTask+0x64>
 8001e02:	e000      	b.n	8001e06 <prvInitialiseNewTask+0x94>
            {
                break;
 8001e04:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001e0e:	e003      	b.n	8001e18 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d901      	bls.n	8001e22 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001e1e:	2304      	movs	r3, #4
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e26:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e2c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e30:	2200      	movs	r2, #0
 8001e32:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e36:	3304      	adds	r3, #4
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe ff50 	bl	8000cde <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e40:	3318      	adds	r3, #24
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe ff4b 	bl	8000cde <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e4c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e50:	f1c3 0205 	rsb	r2, r3, #5
 8001e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e56:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e60:	3350      	adds	r3, #80	; 0x50
 8001e62:	2204      	movs	r2, #4
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f002 ff80 	bl	8004d6c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6e:	3354      	adds	r3, #84	; 0x54
 8001e70:	2201      	movs	r2, #1
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f002 ff79 	bl	8004d6c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	68f9      	ldr	r1, [r7, #12]
 8001e7e:	69b8      	ldr	r0, [r7, #24]
 8001e80:	f001 fb6c 	bl	800355c <pxPortInitialiseStack>
 8001e84:	4602      	mov	r2, r0
 8001e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e88:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e94:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001e96:	bf00      	nop
 8001e98:	3720      	adds	r7, #32
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001ea8:	f001 fc86 	bl	80037b8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001eac:	4b2c      	ldr	r3, [pc, #176]	; (8001f60 <prvAddNewTaskToReadyList+0xc0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	4a2b      	ldr	r2, [pc, #172]	; (8001f60 <prvAddNewTaskToReadyList+0xc0>)
 8001eb4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001eb6:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <prvAddNewTaskToReadyList+0xc4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d109      	bne.n	8001ed2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001ebe:	4a29      	ldr	r2, [pc, #164]	; (8001f64 <prvAddNewTaskToReadyList+0xc4>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ec4:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <prvAddNewTaskToReadyList+0xc0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d110      	bne.n	8001eee <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001ecc:	f000 fbc8 	bl	8002660 <prvInitialiseTaskLists>
 8001ed0:	e00d      	b.n	8001eee <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001ed2:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <prvAddNewTaskToReadyList+0xc8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001eda:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <prvAddNewTaskToReadyList+0xc4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d802      	bhi.n	8001eee <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001ee8:	4a1e      	ldr	r2, [pc, #120]	; (8001f64 <prvAddNewTaskToReadyList+0xc4>)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001eee:	4b1f      	ldr	r3, [pc, #124]	; (8001f6c <prvAddNewTaskToReadyList+0xcc>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	4a1d      	ldr	r2, [pc, #116]	; (8001f6c <prvAddNewTaskToReadyList+0xcc>)
 8001ef6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001ef8:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <prvAddNewTaskToReadyList+0xcc>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	2201      	movs	r2, #1
 8001f06:	409a      	lsls	r2, r3
 8001f08:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <prvAddNewTaskToReadyList+0xd0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	4a18      	ldr	r2, [pc, #96]	; (8001f70 <prvAddNewTaskToReadyList+0xd0>)
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4a15      	ldr	r2, [pc, #84]	; (8001f74 <prvAddNewTaskToReadyList+0xd4>)
 8001f20:	441a      	add	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3304      	adds	r3, #4
 8001f26:	4619      	mov	r1, r3
 8001f28:	4610      	mov	r0, r2
 8001f2a:	f7fe fee5 	bl	8000cf8 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001f2e:	f001 fc73 	bl	8003818 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001f32:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <prvAddNewTaskToReadyList+0xc8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00e      	beq.n	8001f58 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <prvAddNewTaskToReadyList+0xc4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d207      	bcs.n	8001f58 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <prvAddNewTaskToReadyList+0xd8>)
 8001f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	f3bf 8f4f 	dsb	sy
 8001f54:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000220 	.word	0x20000220
 8001f64:	20000148 	.word	0x20000148
 8001f68:	2000022c 	.word	0x2000022c
 8001f6c:	2000023c 	.word	0x2000023c
 8001f70:	20000228 	.word	0x20000228
 8001f74:	2000014c 	.word	0x2000014c
 8001f78:	e000ed04 	.word	0xe000ed04

08001f7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001f82:	4b20      	ldr	r3, [pc, #128]	; (8002004 <vTaskStartScheduler+0x88>)
 8001f84:	9301      	str	r3, [sp, #4]
 8001f86:	2300      	movs	r3, #0
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	2282      	movs	r2, #130	; 0x82
 8001f8e:	491e      	ldr	r1, [pc, #120]	; (8002008 <vTaskStartScheduler+0x8c>)
 8001f90:	481e      	ldr	r0, [pc, #120]	; (800200c <vTaskStartScheduler+0x90>)
 8001f92:	f7ff fead 	bl	8001cf0 <xTaskCreate>
 8001f96:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d102      	bne.n	8001fa4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001f9e:	f000 ff6f 	bl	8002e80 <xTimerCreateTimerTask>
 8001fa2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d116      	bne.n	8001fd8 <vTaskStartScheduler+0x5c>
        __asm volatile
 8001faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fae:	f383 8811 	msr	BASEPRI, r3
 8001fb2:	f3bf 8f6f 	isb	sy
 8001fb6:	f3bf 8f4f 	dsb	sy
 8001fba:	60bb      	str	r3, [r7, #8]
    }
 8001fbc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001fbe:	4b14      	ldr	r3, [pc, #80]	; (8002010 <vTaskStartScheduler+0x94>)
 8001fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001fc6:	4b13      	ldr	r3, [pc, #76]	; (8002014 <vTaskStartScheduler+0x98>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <vTaskStartScheduler+0x9c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001fd2:	f001 fb4f 	bl	8003674 <xPortStartScheduler>
 8001fd6:	e00e      	b.n	8001ff6 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fde:	d10a      	bne.n	8001ff6 <vTaskStartScheduler+0x7a>
        __asm volatile
 8001fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe4:	f383 8811 	msr	BASEPRI, r3
 8001fe8:	f3bf 8f6f 	isb	sy
 8001fec:	f3bf 8f4f 	dsb	sy
 8001ff0:	607b      	str	r3, [r7, #4]
    }
 8001ff2:	bf00      	nop
 8001ff4:	e7fe      	b.n	8001ff4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <vTaskStartScheduler+0xa0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
}
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000244 	.word	0x20000244
 8002008:	08005814 	.word	0x08005814
 800200c:	08002631 	.word	0x08002631
 8002010:	20000240 	.word	0x20000240
 8002014:	2000022c 	.word	0x2000022c
 8002018:	20000224 	.word	0x20000224
 800201c:	20000020 	.word	0x20000020

08002020 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002024:	4b04      	ldr	r3, [pc, #16]	; (8002038 <vTaskSuspendAll+0x18>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	3301      	adds	r3, #1
 800202a:	4a03      	ldr	r2, [pc, #12]	; (8002038 <vTaskSuspendAll+0x18>)
 800202c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	20000248 	.word	0x20000248

0800203c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002046:	2300      	movs	r3, #0
 8002048:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800204a:	4b41      	ldr	r3, [pc, #260]	; (8002150 <xTaskResumeAll+0x114>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10a      	bne.n	8002068 <xTaskResumeAll+0x2c>
        __asm volatile
 8002052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002056:	f383 8811 	msr	BASEPRI, r3
 800205a:	f3bf 8f6f 	isb	sy
 800205e:	f3bf 8f4f 	dsb	sy
 8002062:	603b      	str	r3, [r7, #0]
    }
 8002064:	bf00      	nop
 8002066:	e7fe      	b.n	8002066 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002068:	f001 fba6 	bl	80037b8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800206c:	4b38      	ldr	r3, [pc, #224]	; (8002150 <xTaskResumeAll+0x114>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	3b01      	subs	r3, #1
 8002072:	4a37      	ldr	r2, [pc, #220]	; (8002150 <xTaskResumeAll+0x114>)
 8002074:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002076:	4b36      	ldr	r3, [pc, #216]	; (8002150 <xTaskResumeAll+0x114>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d161      	bne.n	8002142 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800207e:	4b35      	ldr	r3, [pc, #212]	; (8002154 <xTaskResumeAll+0x118>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d05d      	beq.n	8002142 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002086:	e02e      	b.n	80020e6 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002088:	4b33      	ldr	r3, [pc, #204]	; (8002158 <xTaskResumeAll+0x11c>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	3318      	adds	r3, #24
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fe8c 	bl	8000db2 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	3304      	adds	r3, #4
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fe87 	bl	8000db2 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	2201      	movs	r2, #1
 80020aa:	409a      	lsls	r2, r3
 80020ac:	4b2b      	ldr	r3, [pc, #172]	; (800215c <xTaskResumeAll+0x120>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	4a2a      	ldr	r2, [pc, #168]	; (800215c <xTaskResumeAll+0x120>)
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4a27      	ldr	r2, [pc, #156]	; (8002160 <xTaskResumeAll+0x124>)
 80020c4:	441a      	add	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	3304      	adds	r3, #4
 80020ca:	4619      	mov	r1, r3
 80020cc:	4610      	mov	r0, r2
 80020ce:	f7fe fe13 	bl	8000cf8 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d6:	4b23      	ldr	r3, [pc, #140]	; (8002164 <xTaskResumeAll+0x128>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	429a      	cmp	r2, r3
 80020de:	d302      	bcc.n	80020e6 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80020e0:	4b21      	ldr	r3, [pc, #132]	; (8002168 <xTaskResumeAll+0x12c>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020e6:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <xTaskResumeAll+0x11c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1cc      	bne.n	8002088 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80020f4:	f000 fb32 	bl	800275c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80020f8:	4b1c      	ldr	r3, [pc, #112]	; (800216c <xTaskResumeAll+0x130>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d010      	beq.n	8002126 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002104:	f000 f846 	bl	8002194 <xTaskIncrementTick>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800210e:	4b16      	ldr	r3, [pc, #88]	; (8002168 <xTaskResumeAll+0x12c>)
 8002110:	2201      	movs	r2, #1
 8002112:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3b01      	subs	r3, #1
 8002118:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f1      	bne.n	8002104 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <xTaskResumeAll+0x130>)
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <xTaskResumeAll+0x12c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d009      	beq.n	8002142 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800212e:	2301      	movs	r3, #1
 8002130:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <xTaskResumeAll+0x134>)
 8002134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	f3bf 8f4f 	dsb	sy
 800213e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002142:	f001 fb69 	bl	8003818 <vPortExitCritical>

    return xAlreadyYielded;
 8002146:	68bb      	ldr	r3, [r7, #8]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20000248 	.word	0x20000248
 8002154:	20000220 	.word	0x20000220
 8002158:	200001e0 	.word	0x200001e0
 800215c:	20000228 	.word	0x20000228
 8002160:	2000014c 	.word	0x2000014c
 8002164:	20000148 	.word	0x20000148
 8002168:	20000234 	.word	0x20000234
 800216c:	20000230 	.word	0x20000230
 8002170:	e000ed04 	.word	0xe000ed04

08002174 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800217a:	4b05      	ldr	r3, [pc, #20]	; (8002190 <xTaskGetTickCount+0x1c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002180:	687b      	ldr	r3, [r7, #4]
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000224 	.word	0x20000224

08002194 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800219e:	4b4e      	ldr	r3, [pc, #312]	; (80022d8 <xTaskIncrementTick+0x144>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f040 808e 	bne.w	80022c4 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80021a8:	4b4c      	ldr	r3, [pc, #304]	; (80022dc <xTaskIncrementTick+0x148>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	3301      	adds	r3, #1
 80021ae:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80021b0:	4a4a      	ldr	r2, [pc, #296]	; (80022dc <xTaskIncrementTick+0x148>)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d120      	bne.n	80021fe <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80021bc:	4b48      	ldr	r3, [pc, #288]	; (80022e0 <xTaskIncrementTick+0x14c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <xTaskIncrementTick+0x48>
        __asm volatile
 80021c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ca:	f383 8811 	msr	BASEPRI, r3
 80021ce:	f3bf 8f6f 	isb	sy
 80021d2:	f3bf 8f4f 	dsb	sy
 80021d6:	603b      	str	r3, [r7, #0]
    }
 80021d8:	bf00      	nop
 80021da:	e7fe      	b.n	80021da <xTaskIncrementTick+0x46>
 80021dc:	4b40      	ldr	r3, [pc, #256]	; (80022e0 <xTaskIncrementTick+0x14c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	4b40      	ldr	r3, [pc, #256]	; (80022e4 <xTaskIncrementTick+0x150>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a3e      	ldr	r2, [pc, #248]	; (80022e0 <xTaskIncrementTick+0x14c>)
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4a3e      	ldr	r2, [pc, #248]	; (80022e4 <xTaskIncrementTick+0x150>)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	4b3d      	ldr	r3, [pc, #244]	; (80022e8 <xTaskIncrementTick+0x154>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	3301      	adds	r3, #1
 80021f6:	4a3c      	ldr	r2, [pc, #240]	; (80022e8 <xTaskIncrementTick+0x154>)
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	f000 faaf 	bl	800275c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80021fe:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <xTaskIncrementTick+0x158>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	429a      	cmp	r2, r3
 8002206:	d348      	bcc.n	800229a <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002208:	4b35      	ldr	r3, [pc, #212]	; (80022e0 <xTaskIncrementTick+0x14c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d104      	bne.n	800221c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002212:	4b36      	ldr	r3, [pc, #216]	; (80022ec <xTaskIncrementTick+0x158>)
 8002214:	f04f 32ff 	mov.w	r2, #4294967295
 8002218:	601a      	str	r2, [r3, #0]
                    break;
 800221a:	e03e      	b.n	800229a <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800221c:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <xTaskIncrementTick+0x14c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	429a      	cmp	r2, r3
 8002232:	d203      	bcs.n	800223c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002234:	4a2d      	ldr	r2, [pc, #180]	; (80022ec <xTaskIncrementTick+0x158>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800223a:	e02e      	b.n	800229a <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	3304      	adds	r3, #4
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe fdb6 	bl	8000db2 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224a:	2b00      	cmp	r3, #0
 800224c:	d004      	beq.n	8002258 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	3318      	adds	r3, #24
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe fdad 	bl	8000db2 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	2201      	movs	r2, #1
 800225e:	409a      	lsls	r2, r3
 8002260:	4b23      	ldr	r3, [pc, #140]	; (80022f0 <xTaskIncrementTick+0x15c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4313      	orrs	r3, r2
 8002266:	4a22      	ldr	r2, [pc, #136]	; (80022f0 <xTaskIncrementTick+0x15c>)
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4a1f      	ldr	r2, [pc, #124]	; (80022f4 <xTaskIncrementTick+0x160>)
 8002278:	441a      	add	r2, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	3304      	adds	r3, #4
 800227e:	4619      	mov	r1, r3
 8002280:	4610      	mov	r0, r2
 8002282:	f7fe fd39 	bl	8000cf8 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <xTaskIncrementTick+0x164>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	429a      	cmp	r2, r3
 8002292:	d3b9      	bcc.n	8002208 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002294:	2301      	movs	r3, #1
 8002296:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002298:	e7b6      	b.n	8002208 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800229a:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <xTaskIncrementTick+0x164>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a0:	4914      	ldr	r1, [pc, #80]	; (80022f4 <xTaskIncrementTick+0x160>)
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d901      	bls.n	80022b6 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 80022b2:	2301      	movs	r3, #1
 80022b4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <xTaskIncrementTick+0x168>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d007      	beq.n	80022ce <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 80022be:	2301      	movs	r3, #1
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	e004      	b.n	80022ce <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80022c4:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <xTaskIncrementTick+0x16c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	3301      	adds	r3, #1
 80022ca:	4a0d      	ldr	r2, [pc, #52]	; (8002300 <xTaskIncrementTick+0x16c>)
 80022cc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80022ce:	697b      	ldr	r3, [r7, #20]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000248 	.word	0x20000248
 80022dc:	20000224 	.word	0x20000224
 80022e0:	200001d8 	.word	0x200001d8
 80022e4:	200001dc 	.word	0x200001dc
 80022e8:	20000238 	.word	0x20000238
 80022ec:	20000240 	.word	0x20000240
 80022f0:	20000228 	.word	0x20000228
 80022f4:	2000014c 	.word	0x2000014c
 80022f8:	20000148 	.word	0x20000148
 80022fc:	20000234 	.word	0x20000234
 8002300:	20000230 	.word	0x20000230

08002304 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002304:	b480      	push	{r7}
 8002306:	b087      	sub	sp, #28
 8002308:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800230a:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <vTaskSwitchContext+0xa4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002312:	4b26      	ldr	r3, [pc, #152]	; (80023ac <vTaskSwitchContext+0xa8>)
 8002314:	2201      	movs	r2, #1
 8002316:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002318:	e03f      	b.n	800239a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800231a:	4b24      	ldr	r3, [pc, #144]	; (80023ac <vTaskSwitchContext+0xa8>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002320:	4b23      	ldr	r3, [pc, #140]	; (80023b0 <vTaskSwitchContext+0xac>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	fab3 f383 	clz	r3, r3
 800232c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800232e:	7afb      	ldrb	r3, [r7, #11]
 8002330:	f1c3 031f 	rsb	r3, r3, #31
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	491f      	ldr	r1, [pc, #124]	; (80023b4 <vTaskSwitchContext+0xb0>)
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10a      	bne.n	8002360 <vTaskSwitchContext+0x5c>
        __asm volatile
 800234a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234e:	f383 8811 	msr	BASEPRI, r3
 8002352:	f3bf 8f6f 	isb	sy
 8002356:	f3bf 8f4f 	dsb	sy
 800235a:	607b      	str	r3, [r7, #4]
    }
 800235c:	bf00      	nop
 800235e:	e7fe      	b.n	800235e <vTaskSwitchContext+0x5a>
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4a12      	ldr	r2, [pc, #72]	; (80023b4 <vTaskSwitchContext+0xb0>)
 800236c:	4413      	add	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	3308      	adds	r3, #8
 8002382:	429a      	cmp	r2, r3
 8002384:	d104      	bne.n	8002390 <vTaskSwitchContext+0x8c>
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <vTaskSwitchContext+0xb4>)
 8002398:	6013      	str	r3, [r2, #0]
}
 800239a:	bf00      	nop
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000248 	.word	0x20000248
 80023ac:	20000234 	.word	0x20000234
 80023b0:	20000228 	.word	0x20000228
 80023b4:	2000014c 	.word	0x2000014c
 80023b8:	20000148 	.word	0x20000148

080023bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10a      	bne.n	80023e2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80023cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d0:	f383 8811 	msr	BASEPRI, r3
 80023d4:	f3bf 8f6f 	isb	sy
 80023d8:	f3bf 8f4f 	dsb	sy
 80023dc:	60fb      	str	r3, [r7, #12]
    }
 80023de:	bf00      	nop
 80023e0:	e7fe      	b.n	80023e0 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <vTaskPlaceOnEventList+0x44>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	3318      	adds	r3, #24
 80023e8:	4619      	mov	r1, r3
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7fe fca8 	bl	8000d40 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80023f0:	2101      	movs	r1, #1
 80023f2:	6838      	ldr	r0, [r7, #0]
 80023f4:	f000 fcde 	bl	8002db4 <prvAddCurrentTaskToDelayedList>
}
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000148 	.word	0x20000148

08002404 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10a      	bne.n	800242c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241a:	f383 8811 	msr	BASEPRI, r3
 800241e:	f3bf 8f6f 	isb	sy
 8002422:	f3bf 8f4f 	dsb	sy
 8002426:	617b      	str	r3, [r7, #20]
    }
 8002428:	bf00      	nop
 800242a:	e7fe      	b.n	800242a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800242c:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <vTaskPlaceOnEventListRestricted+0x54>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	3318      	adds	r3, #24
 8002432:	4619      	mov	r1, r3
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f7fe fc5f 	bl	8000cf8 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8002440:	f04f 33ff 	mov.w	r3, #4294967295
 8002444:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	68b8      	ldr	r0, [r7, #8]
 800244a:	f000 fcb3 	bl	8002db4 <prvAddCurrentTaskToDelayedList>
    }
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000148 	.word	0x20000148

0800245c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10a      	bne.n	8002488 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002476:	f383 8811 	msr	BASEPRI, r3
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	f3bf 8f4f 	dsb	sy
 8002482:	60fb      	str	r3, [r7, #12]
    }
 8002484:	bf00      	nop
 8002486:	e7fe      	b.n	8002486 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	3318      	adds	r3, #24
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe fc90 	bl	8000db2 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002492:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <xTaskRemoveFromEventList+0xac>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d11c      	bne.n	80024d4 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	3304      	adds	r3, #4
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fc87 	bl	8000db2 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	2201      	movs	r2, #1
 80024aa:	409a      	lsls	r2, r3
 80024ac:	4b17      	ldr	r3, [pc, #92]	; (800250c <xTaskRemoveFromEventList+0xb0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	4a16      	ldr	r2, [pc, #88]	; (800250c <xTaskRemoveFromEventList+0xb0>)
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4a13      	ldr	r2, [pc, #76]	; (8002510 <xTaskRemoveFromEventList+0xb4>)
 80024c4:	441a      	add	r2, r3
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	3304      	adds	r3, #4
 80024ca:	4619      	mov	r1, r3
 80024cc:	4610      	mov	r0, r2
 80024ce:	f7fe fc13 	bl	8000cf8 <vListInsertEnd>
 80024d2:	e005      	b.n	80024e0 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	3318      	adds	r3, #24
 80024d8:	4619      	mov	r1, r3
 80024da:	480e      	ldr	r0, [pc, #56]	; (8002514 <xTaskRemoveFromEventList+0xb8>)
 80024dc:	f7fe fc0c 	bl	8000cf8 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <xTaskRemoveFromEventList+0xbc>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d905      	bls.n	80024fa <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80024ee:	2301      	movs	r3, #1
 80024f0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80024f2:	4b0a      	ldr	r3, [pc, #40]	; (800251c <xTaskRemoveFromEventList+0xc0>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	e001      	b.n	80024fe <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80024fe:	697b      	ldr	r3, [r7, #20]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000248 	.word	0x20000248
 800250c:	20000228 	.word	0x20000228
 8002510:	2000014c 	.word	0x2000014c
 8002514:	200001e0 	.word	0x200001e0
 8002518:	20000148 	.word	0x20000148
 800251c:	20000234 	.word	0x20000234

08002520 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <vTaskInternalSetTimeOutState+0x24>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <vTaskInternalSetTimeOutState+0x28>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	605a      	str	r2, [r3, #4]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	20000238 	.word	0x20000238
 8002548:	20000224 	.word	0x20000224

0800254c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10a      	bne.n	8002572 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800255c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002560:	f383 8811 	msr	BASEPRI, r3
 8002564:	f3bf 8f6f 	isb	sy
 8002568:	f3bf 8f4f 	dsb	sy
 800256c:	613b      	str	r3, [r7, #16]
    }
 800256e:	bf00      	nop
 8002570:	e7fe      	b.n	8002570 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257c:	f383 8811 	msr	BASEPRI, r3
 8002580:	f3bf 8f6f 	isb	sy
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	60fb      	str	r3, [r7, #12]
    }
 800258a:	bf00      	nop
 800258c:	e7fe      	b.n	800258c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800258e:	f001 f913 	bl	80037b8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002592:	4b1f      	ldr	r3, [pc, #124]	; (8002610 <xTaskCheckForTimeOut+0xc4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025aa:	d102      	bne.n	80025b2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61fb      	str	r3, [r7, #28]
 80025b0:	e026      	b.n	8002600 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	4b17      	ldr	r3, [pc, #92]	; (8002614 <xTaskCheckForTimeOut+0xc8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d00a      	beq.n	80025d4 <xTaskCheckForTimeOut+0x88>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d305      	bcc.n	80025d4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80025c8:	2301      	movs	r3, #1
 80025ca:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	e015      	b.n	8002600 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d20b      	bcs.n	80025f6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	1ad2      	subs	r2, r2, r3
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff ff98 	bl	8002520 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61fb      	str	r3, [r7, #28]
 80025f4:	e004      	b.n	8002600 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80025fc:	2301      	movs	r3, #1
 80025fe:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002600:	f001 f90a 	bl	8003818 <vPortExitCritical>

    return xReturn;
 8002604:	69fb      	ldr	r3, [r7, #28]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3720      	adds	r7, #32
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000224 	.word	0x20000224
 8002614:	20000238 	.word	0x20000238

08002618 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800261c:	4b03      	ldr	r3, [pc, #12]	; (800262c <vTaskMissedYield+0x14>)
 800261e:	2201      	movs	r2, #1
 8002620:	601a      	str	r2, [r3, #0]
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	20000234 	.word	0x20000234

08002630 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002638:	f000 f852 	bl	80026e0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <prvIdleTask+0x28>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d9f9      	bls.n	8002638 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <prvIdleTask+0x2c>)
 8002646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002654:	e7f0      	b.n	8002638 <prvIdleTask+0x8>
 8002656:	bf00      	nop
 8002658:	2000014c 	.word	0x2000014c
 800265c:	e000ed04 	.word	0xe000ed04

08002660 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002666:	2300      	movs	r3, #0
 8002668:	607b      	str	r3, [r7, #4]
 800266a:	e00c      	b.n	8002686 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <prvInitialiseTaskLists+0x60>)
 8002678:	4413      	add	r3, r2
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fb0f 	bl	8000c9e <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3301      	adds	r3, #1
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b04      	cmp	r3, #4
 800268a:	d9ef      	bls.n	800266c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800268c:	480d      	ldr	r0, [pc, #52]	; (80026c4 <prvInitialiseTaskLists+0x64>)
 800268e:	f7fe fb06 	bl	8000c9e <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002692:	480d      	ldr	r0, [pc, #52]	; (80026c8 <prvInitialiseTaskLists+0x68>)
 8002694:	f7fe fb03 	bl	8000c9e <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002698:	480c      	ldr	r0, [pc, #48]	; (80026cc <prvInitialiseTaskLists+0x6c>)
 800269a:	f7fe fb00 	bl	8000c9e <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800269e:	480c      	ldr	r0, [pc, #48]	; (80026d0 <prvInitialiseTaskLists+0x70>)
 80026a0:	f7fe fafd 	bl	8000c9e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80026a4:	480b      	ldr	r0, [pc, #44]	; (80026d4 <prvInitialiseTaskLists+0x74>)
 80026a6:	f7fe fafa 	bl	8000c9e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80026aa:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <prvInitialiseTaskLists+0x78>)
 80026ac:	4a05      	ldr	r2, [pc, #20]	; (80026c4 <prvInitialiseTaskLists+0x64>)
 80026ae:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <prvInitialiseTaskLists+0x7c>)
 80026b2:	4a05      	ldr	r2, [pc, #20]	; (80026c8 <prvInitialiseTaskLists+0x68>)
 80026b4:	601a      	str	r2, [r3, #0]
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	2000014c 	.word	0x2000014c
 80026c4:	200001b0 	.word	0x200001b0
 80026c8:	200001c4 	.word	0x200001c4
 80026cc:	200001e0 	.word	0x200001e0
 80026d0:	200001f4 	.word	0x200001f4
 80026d4:	2000020c 	.word	0x2000020c
 80026d8:	200001d8 	.word	0x200001d8
 80026dc:	200001dc 	.word	0x200001dc

080026e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80026e6:	e019      	b.n	800271c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80026e8:	f001 f866 	bl	80037b8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026ec:	4b10      	ldr	r3, [pc, #64]	; (8002730 <prvCheckTasksWaitingTermination+0x50>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3304      	adds	r3, #4
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fe fb5a 	bl	8000db2 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <prvCheckTasksWaitingTermination+0x54>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	3b01      	subs	r3, #1
 8002704:	4a0b      	ldr	r2, [pc, #44]	; (8002734 <prvCheckTasksWaitingTermination+0x54>)
 8002706:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <prvCheckTasksWaitingTermination+0x58>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	3b01      	subs	r3, #1
 800270e:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <prvCheckTasksWaitingTermination+0x58>)
 8002710:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002712:	f001 f881 	bl	8003818 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f810 	bl	800273c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <prvCheckTasksWaitingTermination+0x58>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1e1      	bne.n	80026e8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002724:	bf00      	nop
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	200001f4 	.word	0x200001f4
 8002734:	20000220 	.word	0x20000220
 8002738:	20000208 	.word	0x20000208

0800273c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	4618      	mov	r0, r3
 800274a:	f001 fa37 	bl	8003bbc <vPortFree>
                vPortFree( pxTCB );
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f001 fa34 	bl	8003bbc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002754:	bf00      	nop
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002760:	4b0a      	ldr	r3, [pc, #40]	; (800278c <prvResetNextTaskUnblockTime+0x30>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d104      	bne.n	8002774 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <prvResetNextTaskUnblockTime+0x34>)
 800276c:	f04f 32ff 	mov.w	r2, #4294967295
 8002770:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002772:	e005      	b.n	8002780 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <prvResetNextTaskUnblockTime+0x30>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a04      	ldr	r2, [pc, #16]	; (8002790 <prvResetNextTaskUnblockTime+0x34>)
 800277e:	6013      	str	r3, [r2, #0]
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	200001d8 	.word	0x200001d8
 8002790:	20000240 	.word	0x20000240

08002794 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800279a:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <xTaskGetSchedulerState+0x34>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d102      	bne.n	80027a8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80027a2:	2301      	movs	r3, #1
 80027a4:	607b      	str	r3, [r7, #4]
 80027a6:	e008      	b.n	80027ba <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <xTaskGetSchedulerState+0x38>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d102      	bne.n	80027b6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80027b0:	2302      	movs	r3, #2
 80027b2:	607b      	str	r3, [r7, #4]
 80027b4:	e001      	b.n	80027ba <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80027b6:	2300      	movs	r3, #0
 80027b8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80027ba:	687b      	ldr	r3, [r7, #4]
    }
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	2000022c 	.word	0x2000022c
 80027cc:	20000248 	.word	0x20000248

080027d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d05e      	beq.n	80028a4 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ea:	4b31      	ldr	r3, [pc, #196]	; (80028b0 <xTaskPriorityInherit+0xe0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d24e      	bcs.n	8002892 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	db06      	blt.n	800280a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027fc:	4b2c      	ldr	r3, [pc, #176]	; (80028b0 <xTaskPriorityInherit+0xe0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	f1c3 0205 	rsb	r2, r3, #5
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	6959      	ldr	r1, [r3, #20]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4a26      	ldr	r2, [pc, #152]	; (80028b4 <xTaskPriorityInherit+0xe4>)
 800281c:	4413      	add	r3, r2
 800281e:	4299      	cmp	r1, r3
 8002820:	d12f      	bne.n	8002882 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	3304      	adds	r3, #4
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fac3 	bl	8000db2 <uxListRemove>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10a      	bne.n	8002848 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	2201      	movs	r2, #1
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43da      	mvns	r2, r3
 800283e:	4b1e      	ldr	r3, [pc, #120]	; (80028b8 <xTaskPriorityInherit+0xe8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4013      	ands	r3, r2
 8002844:	4a1c      	ldr	r2, [pc, #112]	; (80028b8 <xTaskPriorityInherit+0xe8>)
 8002846:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002848:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <xTaskPriorityInherit+0xe0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	2201      	movs	r2, #1
 8002858:	409a      	lsls	r2, r3
 800285a:	4b17      	ldr	r3, [pc, #92]	; (80028b8 <xTaskPriorityInherit+0xe8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4313      	orrs	r3, r2
 8002860:	4a15      	ldr	r2, [pc, #84]	; (80028b8 <xTaskPriorityInherit+0xe8>)
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4a10      	ldr	r2, [pc, #64]	; (80028b4 <xTaskPriorityInherit+0xe4>)
 8002872:	441a      	add	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	3304      	adds	r3, #4
 8002878:	4619      	mov	r1, r3
 800287a:	4610      	mov	r0, r2
 800287c:	f7fe fa3c 	bl	8000cf8 <vListInsertEnd>
 8002880:	e004      	b.n	800288c <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002882:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <xTaskPriorityInherit+0xe0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800288c:	2301      	movs	r3, #1
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	e008      	b.n	80028a4 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <xTaskPriorityInherit+0xe0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	429a      	cmp	r2, r3
 800289e:	d201      	bcs.n	80028a4 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80028a0:	2301      	movs	r3, #1
 80028a2:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80028a4:	68fb      	ldr	r3, [r7, #12]
    }
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000148 	.word	0x20000148
 80028b4:	2000014c 	.word	0x2000014c
 80028b8:	20000228 	.word	0x20000228

080028bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d063      	beq.n	800299a <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80028d2:	4b34      	ldr	r3, [pc, #208]	; (80029a4 <xTaskPriorityDisinherit+0xe8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d00a      	beq.n	80028f2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80028dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e0:	f383 8811 	msr	BASEPRI, r3
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	60fb      	str	r3, [r7, #12]
    }
 80028ee:	bf00      	nop
 80028f0:	e7fe      	b.n	80028f0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10a      	bne.n	8002910 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80028fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fe:	f383 8811 	msr	BASEPRI, r3
 8002902:	f3bf 8f6f 	isb	sy
 8002906:	f3bf 8f4f 	dsb	sy
 800290a:	60bb      	str	r3, [r7, #8]
    }
 800290c:	bf00      	nop
 800290e:	e7fe      	b.n	800290e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002914:	1e5a      	subs	r2, r3, #1
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002922:	429a      	cmp	r2, r3
 8002924:	d039      	beq.n	800299a <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292a:	2b00      	cmp	r3, #0
 800292c:	d135      	bne.n	800299a <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	3304      	adds	r3, #4
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe fa3d 	bl	8000db2 <uxListRemove>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10a      	bne.n	8002954 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002942:	2201      	movs	r2, #1
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43da      	mvns	r2, r3
 800294a:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <xTaskPriorityDisinherit+0xec>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4013      	ands	r3, r2
 8002950:	4a15      	ldr	r2, [pc, #84]	; (80029a8 <xTaskPriorityDisinherit+0xec>)
 8002952:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	f1c3 0205 	rsb	r2, r3, #5
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	2201      	movs	r2, #1
 800296e:	409a      	lsls	r2, r3
 8002970:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <xTaskPriorityDisinherit+0xec>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4313      	orrs	r3, r2
 8002976:	4a0c      	ldr	r2, [pc, #48]	; (80029a8 <xTaskPriorityDisinherit+0xec>)
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4a09      	ldr	r2, [pc, #36]	; (80029ac <xTaskPriorityDisinherit+0xf0>)
 8002988:	441a      	add	r2, r3
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	3304      	adds	r3, #4
 800298e:	4619      	mov	r1, r3
 8002990:	4610      	mov	r0, r2
 8002992:	f7fe f9b1 	bl	8000cf8 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002996:	2301      	movs	r3, #1
 8002998:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800299a:	697b      	ldr	r3, [r7, #20]
    }
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20000148 	.word	0x20000148
 80029a8:	20000228 	.word	0x20000228
 80029ac:	2000014c 	.word	0x2000014c

080029b0 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80029be:	2301      	movs	r3, #1
 80029c0:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d077      	beq.n	8002ab8 <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10a      	bne.n	80029e6 <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 80029d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d4:	f383 8811 	msr	BASEPRI, r3
 80029d8:	f3bf 8f6f 	isb	sy
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	60fb      	str	r3, [r7, #12]
    }
 80029e2:	bf00      	nop
 80029e4:	e7fe      	b.n	80029e4 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d902      	bls.n	80029f6 <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	e002      	b.n	80029fc <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029fa:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d058      	beq.n	8002ab8 <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d153      	bne.n	8002ab8 <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8002a10:	4b2b      	ldr	r3, [pc, #172]	; (8002ac0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d10a      	bne.n	8002a30 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 8002a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1e:	f383 8811 	msr	BASEPRI, r3
 8002a22:	f3bf 8f6f 	isb	sy
 8002a26:	f3bf 8f4f 	dsb	sy
 8002a2a:	60bb      	str	r3, [r7, #8]
    }
 8002a2c:	bf00      	nop
 8002a2e:	e7fe      	b.n	8002a2e <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	69fa      	ldr	r2, [r7, #28]
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	db04      	blt.n	8002a4e <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f1c3 0205 	rsb	r2, r3, #5
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	6959      	ldr	r1, [r3, #20]
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4a19      	ldr	r2, [pc, #100]	; (8002ac4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002a5e:	4413      	add	r3, r2
 8002a60:	4299      	cmp	r1, r3
 8002a62:	d129      	bne.n	8002ab8 <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	3304      	adds	r3, #4
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fe f9a2 	bl	8000db2 <uxListRemove>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10a      	bne.n	8002a8a <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	2201      	movs	r2, #1
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4013      	ands	r3, r2
 8002a86:	4a10      	ldr	r2, [pc, #64]	; (8002ac8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8002a88:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	2201      	movs	r2, #1
 8002a90:	409a      	lsls	r2, r3
 8002a92:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	4a0b      	ldr	r2, [pc, #44]	; (8002ac8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4a06      	ldr	r2, [pc, #24]	; (8002ac4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002aaa:	441a      	add	r2, r3
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	3304      	adds	r3, #4
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	f7fe f920 	bl	8000cf8 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002ab8:	bf00      	nop
 8002aba:	3720      	adds	r7, #32
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20000148 	.word	0x20000148
 8002ac4:	2000014c 	.word	0x2000014c
 8002ac8:	20000228 	.word	0x20000228

08002acc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8002ad0:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <pvTaskIncrementMutexHeldCount+0x24>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d004      	beq.n	8002ae2 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <pvTaskIncrementMutexHeldCount+0x24>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ade:	3201      	adds	r2, #1
 8002ae0:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8002ae2:	4b03      	ldr	r3, [pc, #12]	; (8002af0 <pvTaskIncrementMutexHeldCount+0x24>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
    }
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	20000148 	.word	0x20000148

08002af4 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8002b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	613b      	str	r3, [r7, #16]
    }
 8002b1a:	bf00      	nop
 8002b1c:	e7fe      	b.n	8002b1c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8002b1e:	f000 fe4b 	bl	80037b8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002b22:	4b32      	ldr	r3, [pc, #200]	; (8002bec <xTaskGenericNotifyWait+0xf8>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4413      	add	r3, r2
 8002b2a:	3354      	adds	r3, #84	; 0x54
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d022      	beq.n	8002b7a <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002b34:	4b2d      	ldr	r3, [pc, #180]	; (8002bec <xTaskGenericNotifyWait+0xf8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	3214      	adds	r2, #20
 8002b3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	43d2      	mvns	r2, r2
 8002b44:	4011      	ands	r1, r2
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	3214      	adds	r2, #20
 8002b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002b4e:	4b27      	ldr	r3, [pc, #156]	; (8002bec <xTaskGenericNotifyWait+0xf8>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4413      	add	r3, r2
 8002b56:	3354      	adds	r3, #84	; 0x54
 8002b58:	2201      	movs	r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00b      	beq.n	8002b7a <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002b62:	2101      	movs	r1, #1
 8002b64:	6a38      	ldr	r0, [r7, #32]
 8002b66:	f000 f925 	bl	8002db4 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002b6a:	4b21      	ldr	r3, [pc, #132]	; (8002bf0 <xTaskGenericNotifyWait+0xfc>)
 8002b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002b7a:	f000 fe4d 	bl	8003818 <vPortExitCritical>

        taskENTER_CRITICAL();
 8002b7e:	f000 fe1b 	bl	80037b8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d007      	beq.n	8002b98 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002b88:	4b18      	ldr	r3, [pc, #96]	; (8002bec <xTaskGenericNotifyWait+0xf8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	3214      	adds	r2, #20
 8002b90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002b98:	4b14      	ldr	r3, [pc, #80]	; (8002bec <xTaskGenericNotifyWait+0xf8>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3354      	adds	r3, #84	; 0x54
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d002      	beq.n	8002bb0 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	e00e      	b.n	8002bce <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8002bb0:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <xTaskGenericNotifyWait+0xf8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	3214      	adds	r2, #20
 8002bb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	43d2      	mvns	r2, r2
 8002bc0:	4011      	ands	r1, r2
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	3214      	adds	r2, #20
 8002bc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002bce:	4b07      	ldr	r3, [pc, #28]	; (8002bec <xTaskGenericNotifyWait+0xf8>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3354      	adds	r3, #84	; 0x54
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002bdc:	f000 fe1c 	bl	8003818 <vPortExitCritical>

        return xReturn;
 8002be0:	697b      	ldr	r3, [r7, #20]
    }
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000148 	.word	0x20000148
 8002bf0:	e000ed04 	.word	0xe000ed04

08002bf4 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08c      	sub	sp, #48	; 0x30
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8002c02:	2301      	movs	r3, #1
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <xTaskGenericNotify+0x2e>
        __asm volatile
 8002c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c10:	f383 8811 	msr	BASEPRI, r3
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	623b      	str	r3, [r7, #32]
    }
 8002c1e:	bf00      	nop
 8002c20:	e7fe      	b.n	8002c20 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10a      	bne.n	8002c3e <xTaskGenericNotify+0x4a>
        __asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	61fb      	str	r3, [r7, #28]
    }
 8002c3a:	bf00      	nop
 8002c3c:	e7fe      	b.n	8002c3c <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8002c42:	f000 fdb9 	bl	80037b8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8002c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d006      	beq.n	8002c5a <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	3214      	adds	r2, #20
 8002c52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c58:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4413      	add	r3, r2
 8002c60:	3354      	adds	r3, #84	; 0x54
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3354      	adds	r3, #84	; 0x54
 8002c70:	2202      	movs	r2, #2
 8002c72:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d83b      	bhi.n	8002cf2 <xTaskGenericNotify+0xfe>
 8002c7a:	a201      	add	r2, pc, #4	; (adr r2, 8002c80 <xTaskGenericNotify+0x8c>)
 8002c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c80:	08002d11 	.word	0x08002d11
 8002c84:	08002c95 	.word	0x08002c95
 8002c88:	08002cb1 	.word	0x08002cb1
 8002c8c:	08002cc9 	.word	0x08002cc9
 8002c90:	08002cd7 	.word	0x08002cd7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	3214      	adds	r2, #20
 8002c9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	ea42 0103 	orr.w	r1, r2, r3
 8002ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	3214      	adds	r2, #20
 8002caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002cae:	e032      	b.n	8002d16 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	3214      	adds	r2, #20
 8002cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cba:	1c59      	adds	r1, r3, #1
 8002cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	3214      	adds	r2, #20
 8002cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002cc6:	e026      	b.n	8002d16 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	3214      	adds	r2, #20
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002cd4:	e01f      	b.n	8002d16 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d006      	beq.n	8002cec <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	3214      	adds	r2, #20
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002cea:	e014      	b.n	8002d16 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8002cf0:	e011      	b.n	8002d16 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002cf2:	4b2b      	ldr	r3, [pc, #172]	; (8002da0 <xTaskGenericNotify+0x1ac>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00c      	beq.n	8002d14 <xTaskGenericNotify+0x120>
        __asm volatile
 8002cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	61bb      	str	r3, [r7, #24]
    }
 8002d0c:	bf00      	nop
 8002d0e:	e7fe      	b.n	8002d0e <xTaskGenericNotify+0x11a>
                    break;
 8002d10:	bf00      	nop
 8002d12:	e000      	b.n	8002d16 <xTaskGenericNotify+0x122>

                    break;
 8002d14:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d139      	bne.n	8002d92 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d20:	3304      	adds	r3, #4
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe f845 	bl	8000db2 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8002d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <xTaskGenericNotify+0x1b0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	4a1b      	ldr	r2, [pc, #108]	; (8002da4 <xTaskGenericNotify+0x1b0>)
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4a18      	ldr	r2, [pc, #96]	; (8002da8 <xTaskGenericNotify+0x1b4>)
 8002d48:	441a      	add	r2, r3
 8002d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4610      	mov	r0, r2
 8002d52:	f7fd ffd1 	bl	8000cf8 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00a      	beq.n	8002d74 <xTaskGenericNotify+0x180>
        __asm volatile
 8002d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	617b      	str	r3, [r7, #20]
    }
 8002d70:	bf00      	nop
 8002d72:	e7fe      	b.n	8002d72 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d78:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <xTaskGenericNotify+0x1b8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d907      	bls.n	8002d92 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8002d82:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <xTaskGenericNotify+0x1bc>)
 8002d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002d92:	f000 fd41 	bl	8003818 <vPortExitCritical>

        return xReturn;
 8002d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3730      	adds	r7, #48	; 0x30
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20000224 	.word	0x20000224
 8002da4:	20000228 	.word	0x20000228
 8002da8:	2000014c 	.word	0x2000014c
 8002dac:	20000148 	.word	0x20000148
 8002db0:	e000ed04 	.word	0xe000ed04

08002db4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002dbe:	4b29      	ldr	r3, [pc, #164]	; (8002e64 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002dc4:	4b28      	ldr	r3, [pc, #160]	; (8002e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3304      	adds	r3, #4
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fd fff1 	bl	8000db2 <uxListRemove>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10b      	bne.n	8002dee <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002dd6:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	2201      	movs	r2, #1
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43da      	mvns	r2, r3
 8002de4:	4b21      	ldr	r3, [pc, #132]	; (8002e6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4013      	ands	r3, r2
 8002dea:	4a20      	ldr	r2, [pc, #128]	; (8002e6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002dec:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d10a      	bne.n	8002e0c <prvAddCurrentTaskToDelayedList+0x58>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d007      	beq.n	8002e0c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002dfc:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	3304      	adds	r3, #4
 8002e02:	4619      	mov	r1, r3
 8002e04:	481a      	ldr	r0, [pc, #104]	; (8002e70 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002e06:	f7fd ff77 	bl	8000cf8 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002e0a:	e026      	b.n	8002e5a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4413      	add	r3, r2
 8002e12:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e14:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d209      	bcs.n	8002e38 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e24:	4b13      	ldr	r3, [pc, #76]	; (8002e74 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4610      	mov	r0, r2
 8002e32:	f7fd ff85 	bl	8000d40 <vListInsert>
}
 8002e36:	e010      	b.n	8002e5a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e38:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3304      	adds	r3, #4
 8002e42:	4619      	mov	r1, r3
 8002e44:	4610      	mov	r0, r2
 8002e46:	f7fd ff7b 	bl	8000d40 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d202      	bcs.n	8002e5a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8002e54:	4a09      	ldr	r2, [pc, #36]	; (8002e7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	6013      	str	r3, [r2, #0]
}
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000224 	.word	0x20000224
 8002e68:	20000148 	.word	0x20000148
 8002e6c:	20000228 	.word	0x20000228
 8002e70:	2000020c 	.word	0x2000020c
 8002e74:	200001dc 	.word	0x200001dc
 8002e78:	200001d8 	.word	0x200001d8
 8002e7c:	20000240 	.word	0x20000240

08002e80 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002e8a:	f000 fb31 	bl	80034f0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002e8e:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <xTimerCreateTimerTask+0x54>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <xTimerCreateTimerTask+0x58>)
 8002e98:	9301      	str	r3, [sp, #4]
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ea4:	490d      	ldr	r1, [pc, #52]	; (8002edc <xTimerCreateTimerTask+0x5c>)
 8002ea6:	480e      	ldr	r0, [pc, #56]	; (8002ee0 <xTimerCreateTimerTask+0x60>)
 8002ea8:	f7fe ff22 	bl	8001cf0 <xTaskCreate>
 8002eac:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10a      	bne.n	8002eca <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8002eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	603b      	str	r3, [r7, #0]
    }
 8002ec6:	bf00      	nop
 8002ec8:	e7fe      	b.n	8002ec8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8002eca:	687b      	ldr	r3, [r7, #4]
    }
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	2000027c 	.word	0x2000027c
 8002ed8:	20000280 	.word	0x20000280
 8002edc:	0800581c 	.word	0x0800581c
 8002ee0:	080030d1 	.word	0x080030d1

08002ee4 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8002ef2:	202c      	movs	r0, #44	; 0x2c
 8002ef4:	f000 fd82 	bl	80039fc <pvPortMalloc>
 8002ef8:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00d      	beq.n	8002f1c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	9301      	str	r3, [sp, #4]
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f805 	bl	8002f26 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8002f1c:	697b      	ldr	r3, [r7, #20]
        }
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b086      	sub	sp, #24
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10a      	bne.n	8002f50 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8002f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3e:	f383 8811 	msr	BASEPRI, r3
 8002f42:	f3bf 8f6f 	isb	sy
 8002f46:	f3bf 8f4f 	dsb	sy
 8002f4a:	617b      	str	r3, [r7, #20]
    }
 8002f4c:	bf00      	nop
 8002f4e:	e7fe      	b.n	8002f4e <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d01e      	beq.n	8002f94 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8002f56:	f000 facb 	bl	80034f0 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	6a3a      	ldr	r2, [r7, #32]
 8002f70:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	3304      	adds	r3, #4
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd feb1 	bl	8000cde <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d008      	beq.n	8002f94 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f88:	f043 0304 	orr.w	r3, r3, #4
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8002f94:	bf00      	nop
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08a      	sub	sp, #40	; 0x28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10a      	bne.n	8002fca <xTimerGenericCommand+0x2e>
        __asm volatile
 8002fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb8:	f383 8811 	msr	BASEPRI, r3
 8002fbc:	f3bf 8f6f 	isb	sy
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	623b      	str	r3, [r7, #32]
    }
 8002fc6:	bf00      	nop
 8002fc8:	e7fe      	b.n	8002fc8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8002fca:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <xTimerGenericCommand+0x98>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d02a      	beq.n	8003028 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b05      	cmp	r3, #5
 8002fe2:	dc18      	bgt.n	8003016 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002fe4:	f7ff fbd6 	bl	8002794 <xTaskGetSchedulerState>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d109      	bne.n	8003002 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002fee:	4b11      	ldr	r3, [pc, #68]	; (8003034 <xTimerGenericCommand+0x98>)
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	f107 0114 	add.w	r1, r7, #20
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ffa:	f7fd ffef 	bl	8000fdc <xQueueGenericSend>
 8002ffe:	6278      	str	r0, [r7, #36]	; 0x24
 8003000:	e012      	b.n	8003028 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003002:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <xTimerGenericCommand+0x98>)
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	f107 0114 	add.w	r1, r7, #20
 800300a:	2300      	movs	r3, #0
 800300c:	2200      	movs	r2, #0
 800300e:	f7fd ffe5 	bl	8000fdc <xQueueGenericSend>
 8003012:	6278      	str	r0, [r7, #36]	; 0x24
 8003014:	e008      	b.n	8003028 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003016:	4b07      	ldr	r3, [pc, #28]	; (8003034 <xTimerGenericCommand+0x98>)
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	f107 0114 	add.w	r1, r7, #20
 800301e:	2300      	movs	r3, #0
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	f7fe f8d9 	bl	80011d8 <xQueueGenericSendFromISR>
 8003026:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800302a:	4618      	mov	r0, r3
 800302c:	3728      	adds	r7, #40	; 0x28
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	2000027c 	.word	0x2000027c

08003038 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af02      	add	r7, sp, #8
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003042:	4b22      	ldr	r3, [pc, #136]	; (80030cc <prvProcessExpiredTimer+0x94>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	3304      	adds	r3, #4
 8003050:	4618      	mov	r0, r3
 8003052:	f7fd feae 	bl	8000db2 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d022      	beq.n	80030aa <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	699a      	ldr	r2, [r3, #24]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	18d1      	adds	r1, r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	6978      	ldr	r0, [r7, #20]
 8003072:	f000 f8d1 	bl	8003218 <prvInsertTimerInActiveList>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d01f      	beq.n	80030bc <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800307c:	2300      	movs	r3, #0
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	2300      	movs	r3, #0
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	2100      	movs	r1, #0
 8003086:	6978      	ldr	r0, [r7, #20]
 8003088:	f7ff ff88 	bl	8002f9c <xTimerGenericCommand>
 800308c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d113      	bne.n	80030bc <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	60fb      	str	r3, [r7, #12]
    }
 80030a6:	bf00      	nop
 80030a8:	e7fe      	b.n	80030a8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030b0:	f023 0301 	bic.w	r3, r3, #1
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	6978      	ldr	r0, [r7, #20]
 80030c2:	4798      	blx	r3
    }
 80030c4:	bf00      	nop
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20000274 	.word	0x20000274

080030d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80030d8:	f107 0308 	add.w	r3, r7, #8
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 f857 	bl	8003190 <prvGetNextExpireTime>
 80030e2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	4619      	mov	r1, r3
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f803 	bl	80030f4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80030ee:	f000 f8d5 	bl	800329c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80030f2:	e7f1      	b.n	80030d8 <prvTimerTask+0x8>

080030f4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80030fe:	f7fe ff8f 	bl	8002020 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003102:	f107 0308 	add.w	r3, r7, #8
 8003106:	4618      	mov	r0, r3
 8003108:	f000 f866 	bl	80031d8 <prvSampleTimeNow>
 800310c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d130      	bne.n	8003176 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10a      	bne.n	8003130 <prvProcessTimerOrBlockTask+0x3c>
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	429a      	cmp	r2, r3
 8003120:	d806      	bhi.n	8003130 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003122:	f7fe ff8b 	bl	800203c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003126:	68f9      	ldr	r1, [r7, #12]
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff ff85 	bl	8003038 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800312e:	e024      	b.n	800317a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d008      	beq.n	8003148 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003136:	4b13      	ldr	r3, [pc, #76]	; (8003184 <prvProcessTimerOrBlockTask+0x90>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <prvProcessTimerOrBlockTask+0x50>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <prvProcessTimerOrBlockTask+0x52>
 8003144:	2300      	movs	r3, #0
 8003146:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003148:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <prvProcessTimerOrBlockTask+0x94>)
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	4619      	mov	r1, r3
 8003156:	f7fe fd97 	bl	8001c88 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800315a:	f7fe ff6f 	bl	800203c <xTaskResumeAll>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10a      	bne.n	800317a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003164:	4b09      	ldr	r3, [pc, #36]	; (800318c <prvProcessTimerOrBlockTask+0x98>)
 8003166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	f3bf 8f6f 	isb	sy
    }
 8003174:	e001      	b.n	800317a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003176:	f7fe ff61 	bl	800203c <xTaskResumeAll>
    }
 800317a:	bf00      	nop
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20000278 	.word	0x20000278
 8003188:	2000027c 	.word	0x2000027c
 800318c:	e000ed04 	.word	0xe000ed04

08003190 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003198:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <prvGetNextExpireTime+0x44>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <prvGetNextExpireTime+0x16>
 80031a2:	2201      	movs	r2, #1
 80031a4:	e000      	b.n	80031a8 <prvGetNextExpireTime+0x18>
 80031a6:	2200      	movs	r2, #0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d105      	bne.n	80031c0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80031b4:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <prvGetNextExpireTime+0x44>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	e001      	b.n	80031c4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80031c4:	68fb      	ldr	r3, [r7, #12]
    }
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	20000274 	.word	0x20000274

080031d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80031e0:	f7fe ffc8 	bl	8002174 <xTaskGetTickCount>
 80031e4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80031e6:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <prvSampleTimeNow+0x3c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d205      	bcs.n	80031fc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80031f0:	f000 f91a 	bl	8003428 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	e002      	b.n	8003202 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003202:	4a04      	ldr	r2, [pc, #16]	; (8003214 <prvSampleTimeNow+0x3c>)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003208:	68fb      	ldr	r3, [r7, #12]
    }
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000284 	.word	0x20000284

08003218 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	429a      	cmp	r2, r3
 800323c:	d812      	bhi.n	8003264 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	1ad2      	subs	r2, r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	429a      	cmp	r2, r3
 800324a:	d302      	bcc.n	8003252 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800324c:	2301      	movs	r3, #1
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	e01b      	b.n	800328a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003252:	4b10      	ldr	r3, [pc, #64]	; (8003294 <prvInsertTimerInActiveList+0x7c>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	3304      	adds	r3, #4
 800325a:	4619      	mov	r1, r3
 800325c:	4610      	mov	r0, r2
 800325e:	f7fd fd6f 	bl	8000d40 <vListInsert>
 8003262:	e012      	b.n	800328a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d206      	bcs.n	800327a <prvInsertTimerInActiveList+0x62>
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d302      	bcc.n	800327a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003274:	2301      	movs	r3, #1
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	e007      	b.n	800328a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800327a:	4b07      	ldr	r3, [pc, #28]	; (8003298 <prvInsertTimerInActiveList+0x80>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	3304      	adds	r3, #4
 8003282:	4619      	mov	r1, r3
 8003284:	4610      	mov	r0, r2
 8003286:	f7fd fd5b 	bl	8000d40 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800328a:	697b      	ldr	r3, [r7, #20]
    }
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20000278 	.word	0x20000278
 8003298:	20000274 	.word	0x20000274

0800329c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800329c:	b580      	push	{r7, lr}
 800329e:	b08c      	sub	sp, #48	; 0x30
 80032a0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80032a2:	e0ae      	b.n	8003402 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f2c0 80aa 	blt.w	8003400 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d004      	beq.n	80032c2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	3304      	adds	r3, #4
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fd fd78 	bl	8000db2 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80032c2:	1d3b      	adds	r3, r7, #4
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ff87 	bl	80031d8 <prvSampleTimeNow>
 80032ca:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b09      	cmp	r3, #9
 80032d0:	f200 8097 	bhi.w	8003402 <prvProcessReceivedCommands+0x166>
 80032d4:	a201      	add	r2, pc, #4	; (adr r2, 80032dc <prvProcessReceivedCommands+0x40>)
 80032d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032da:	bf00      	nop
 80032dc:	08003305 	.word	0x08003305
 80032e0:	08003305 	.word	0x08003305
 80032e4:	08003305 	.word	0x08003305
 80032e8:	08003379 	.word	0x08003379
 80032ec:	0800338d 	.word	0x0800338d
 80032f0:	080033d7 	.word	0x080033d7
 80032f4:	08003305 	.word	0x08003305
 80032f8:	08003305 	.word	0x08003305
 80032fc:	08003379 	.word	0x08003379
 8003300:	0800338d 	.word	0x0800338d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	b2da      	uxtb	r2, r3
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	18d1      	adds	r1, r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a3a      	ldr	r2, [r7, #32]
 8003322:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003324:	f7ff ff78 	bl	8003218 <prvInsertTimerInActiveList>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d069      	beq.n	8003402 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003334:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d05e      	beq.n	8003402 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	441a      	add	r2, r3
 800334c:	2300      	movs	r3, #0
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	2300      	movs	r3, #0
 8003352:	2100      	movs	r1, #0
 8003354:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003356:	f7ff fe21 	bl	8002f9c <xTimerGenericCommand>
 800335a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d14f      	bne.n	8003402 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003366:	f383 8811 	msr	BASEPRI, r3
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	61bb      	str	r3, [r7, #24]
    }
 8003374:	bf00      	nop
 8003376:	e7fe      	b.n	8003376 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800337e:	f023 0301 	bic.w	r3, r3, #1
 8003382:	b2da      	uxtb	r2, r3
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800338a:	e03a      	b.n	8003402 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	b2da      	uxtb	r2, r3
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10a      	bne.n	80033c2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80033ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	617b      	str	r3, [r7, #20]
    }
 80033be:	bf00      	nop
 80033c0:	e7fe      	b.n	80033c0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	699a      	ldr	r2, [r3, #24]
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	18d1      	adds	r1, r2, r3
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	6a3a      	ldr	r2, [r7, #32]
 80033ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033d0:	f7ff ff22 	bl	8003218 <prvInsertTimerInActiveList>
                        break;
 80033d4:	e015      	b.n	8003402 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d103      	bne.n	80033ec <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80033e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033e6:	f000 fbe9 	bl	8003bbc <vPortFree>
 80033ea:	e00a      	b.n	8003402 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033f2:	f023 0301 	bic.w	r3, r3, #1
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80033fe:	e000      	b.n	8003402 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003400:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003402:	4b08      	ldr	r3, [pc, #32]	; (8003424 <prvProcessReceivedCommands+0x188>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f107 0108 	add.w	r1, r7, #8
 800340a:	2200      	movs	r2, #0
 800340c:	4618      	mov	r0, r3
 800340e:	f7fe f829 	bl	8001464 <xQueueReceive>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	f47f af45 	bne.w	80032a4 <prvProcessReceivedCommands+0x8>
        }
    }
 800341a:	bf00      	nop
 800341c:	bf00      	nop
 800341e:	3728      	adds	r7, #40	; 0x28
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	2000027c 	.word	0x2000027c

08003428 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800342e:	e048      	b.n	80034c2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003430:	4b2d      	ldr	r3, [pc, #180]	; (80034e8 <prvSwitchTimerLists+0xc0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800343a:	4b2b      	ldr	r3, [pc, #172]	; (80034e8 <prvSwitchTimerLists+0xc0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	3304      	adds	r3, #4
 8003448:	4618      	mov	r0, r3
 800344a:	f7fd fcb2 	bl	8000db2 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d02e      	beq.n	80034c2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4413      	add	r3, r2
 800346c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	429a      	cmp	r2, r3
 8003474:	d90e      	bls.n	8003494 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003482:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <prvSwitchTimerLists+0xc0>)
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	3304      	adds	r3, #4
 800348a:	4619      	mov	r1, r3
 800348c:	4610      	mov	r0, r2
 800348e:	f7fd fc57 	bl	8000d40 <vListInsert>
 8003492:	e016      	b.n	80034c2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003494:	2300      	movs	r3, #0
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	2300      	movs	r3, #0
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	2100      	movs	r1, #0
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f7ff fd7c 	bl	8002f9c <xTimerGenericCommand>
 80034a4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10a      	bne.n	80034c2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80034ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b0:	f383 8811 	msr	BASEPRI, r3
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	603b      	str	r3, [r7, #0]
    }
 80034be:	bf00      	nop
 80034c0:	e7fe      	b.n	80034c0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80034c2:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <prvSwitchTimerLists+0xc0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1b1      	bne.n	8003430 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80034cc:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <prvSwitchTimerLists+0xc0>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80034d2:	4b06      	ldr	r3, [pc, #24]	; (80034ec <prvSwitchTimerLists+0xc4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a04      	ldr	r2, [pc, #16]	; (80034e8 <prvSwitchTimerLists+0xc0>)
 80034d8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80034da:	4a04      	ldr	r2, [pc, #16]	; (80034ec <prvSwitchTimerLists+0xc4>)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	6013      	str	r3, [r2, #0]
    }
 80034e0:	bf00      	nop
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	20000274 	.word	0x20000274
 80034ec:	20000278 	.word	0x20000278

080034f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80034f4:	f000 f960 	bl	80037b8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80034f8:	4b12      	ldr	r3, [pc, #72]	; (8003544 <prvCheckForValidListAndQueue+0x54>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d11d      	bne.n	800353c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003500:	4811      	ldr	r0, [pc, #68]	; (8003548 <prvCheckForValidListAndQueue+0x58>)
 8003502:	f7fd fbcc 	bl	8000c9e <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003506:	4811      	ldr	r0, [pc, #68]	; (800354c <prvCheckForValidListAndQueue+0x5c>)
 8003508:	f7fd fbc9 	bl	8000c9e <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800350c:	4b10      	ldr	r3, [pc, #64]	; (8003550 <prvCheckForValidListAndQueue+0x60>)
 800350e:	4a0e      	ldr	r2, [pc, #56]	; (8003548 <prvCheckForValidListAndQueue+0x58>)
 8003510:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003512:	4b10      	ldr	r3, [pc, #64]	; (8003554 <prvCheckForValidListAndQueue+0x64>)
 8003514:	4a0d      	ldr	r2, [pc, #52]	; (800354c <prvCheckForValidListAndQueue+0x5c>)
 8003516:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003518:	2200      	movs	r2, #0
 800351a:	210c      	movs	r1, #12
 800351c:	200a      	movs	r0, #10
 800351e:	f7fd fcdb 	bl	8000ed8 <xQueueGenericCreate>
 8003522:	4603      	mov	r3, r0
 8003524:	4a07      	ldr	r2, [pc, #28]	; (8003544 <prvCheckForValidListAndQueue+0x54>)
 8003526:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003528:	4b06      	ldr	r3, [pc, #24]	; (8003544 <prvCheckForValidListAndQueue+0x54>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003530:	4b04      	ldr	r3, [pc, #16]	; (8003544 <prvCheckForValidListAndQueue+0x54>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4908      	ldr	r1, [pc, #32]	; (8003558 <prvCheckForValidListAndQueue+0x68>)
 8003536:	4618      	mov	r0, r3
 8003538:	f7fe fb7c 	bl	8001c34 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800353c:	f000 f96c 	bl	8003818 <vPortExitCritical>
    }
 8003540:	bf00      	nop
 8003542:	bd80      	pop	{r7, pc}
 8003544:	2000027c 	.word	0x2000027c
 8003548:	2000024c 	.word	0x2000024c
 800354c:	20000260 	.word	0x20000260
 8003550:	20000274 	.word	0x20000274
 8003554:	20000278 	.word	0x20000278
 8003558:	08005824 	.word	0x08005824

0800355c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	3b04      	subs	r3, #4
 800356c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003574:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3b04      	subs	r3, #4
 800357a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f023 0201 	bic.w	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	3b04      	subs	r3, #4
 800358a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800358c:	4a0c      	ldr	r2, [pc, #48]	; (80035c0 <pxPortInitialiseStack+0x64>)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	3b14      	subs	r3, #20
 8003596:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	3b04      	subs	r3, #4
 80035a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f06f 0202 	mvn.w	r2, #2
 80035aa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	3b20      	subs	r3, #32
 80035b0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80035b2:	68fb      	ldr	r3, [r7, #12]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	080035c5 	.word	0x080035c5

080035c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <prvTaskExitError+0x54>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d6:	d00a      	beq.n	80035ee <prvTaskExitError+0x2a>
        __asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	60fb      	str	r3, [r7, #12]
    }
 80035ea:	bf00      	nop
 80035ec:	e7fe      	b.n	80035ec <prvTaskExitError+0x28>
        __asm volatile
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	60bb      	str	r3, [r7, #8]
    }
 8003600:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003602:	bf00      	nop
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0fc      	beq.n	8003604 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800360a:	bf00      	nop
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	20000024 	.word	0x20000024
 800361c:	00000000 	.word	0x00000000

08003620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003620:	4b07      	ldr	r3, [pc, #28]	; (8003640 <pxCurrentTCBConst2>)
 8003622:	6819      	ldr	r1, [r3, #0]
 8003624:	6808      	ldr	r0, [r1, #0]
 8003626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800362a:	f380 8809 	msr	PSP, r0
 800362e:	f3bf 8f6f 	isb	sy
 8003632:	f04f 0000 	mov.w	r0, #0
 8003636:	f380 8811 	msr	BASEPRI, r0
 800363a:	4770      	bx	lr
 800363c:	f3af 8000 	nop.w

08003640 <pxCurrentTCBConst2>:
 8003640:	20000148 	.word	0x20000148
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop

08003648 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003648:	4808      	ldr	r0, [pc, #32]	; (800366c <prvPortStartFirstTask+0x24>)
 800364a:	6800      	ldr	r0, [r0, #0]
 800364c:	6800      	ldr	r0, [r0, #0]
 800364e:	f380 8808 	msr	MSP, r0
 8003652:	f04f 0000 	mov.w	r0, #0
 8003656:	f380 8814 	msr	CONTROL, r0
 800365a:	b662      	cpsie	i
 800365c:	b661      	cpsie	f
 800365e:	f3bf 8f4f 	dsb	sy
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	df00      	svc	0
 8003668:	bf00      	nop
 800366a:	0000      	.short	0x0000
 800366c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003670:	bf00      	nop
 8003672:	bf00      	nop

08003674 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800367a:	4b46      	ldr	r3, [pc, #280]	; (8003794 <xPortStartScheduler+0x120>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a46      	ldr	r2, [pc, #280]	; (8003798 <xPortStartScheduler+0x124>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d10a      	bne.n	800369a <xPortStartScheduler+0x26>
        __asm volatile
 8003684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003688:	f383 8811 	msr	BASEPRI, r3
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	613b      	str	r3, [r7, #16]
    }
 8003696:	bf00      	nop
 8003698:	e7fe      	b.n	8003698 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800369a:	4b3e      	ldr	r3, [pc, #248]	; (8003794 <xPortStartScheduler+0x120>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a3f      	ldr	r2, [pc, #252]	; (800379c <xPortStartScheduler+0x128>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d10a      	bne.n	80036ba <xPortStartScheduler+0x46>
        __asm volatile
 80036a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a8:	f383 8811 	msr	BASEPRI, r3
 80036ac:	f3bf 8f6f 	isb	sy
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	60fb      	str	r3, [r7, #12]
    }
 80036b6:	bf00      	nop
 80036b8:	e7fe      	b.n	80036b8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80036ba:	4b39      	ldr	r3, [pc, #228]	; (80037a0 <xPortStartScheduler+0x12c>)
 80036bc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	22ff      	movs	r2, #255	; 0xff
 80036ca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	4b31      	ldr	r3, [pc, #196]	; (80037a4 <xPortStartScheduler+0x130>)
 80036e0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80036e2:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <xPortStartScheduler+0x134>)
 80036e4:	2207      	movs	r2, #7
 80036e6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036e8:	e009      	b.n	80036fe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80036ea:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <xPortStartScheduler+0x134>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	4a2d      	ldr	r2, [pc, #180]	; (80037a8 <xPortStartScheduler+0x134>)
 80036f2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80036f4:	78fb      	ldrb	r3, [r7, #3]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036fe:	78fb      	ldrb	r3, [r7, #3]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003706:	2b80      	cmp	r3, #128	; 0x80
 8003708:	d0ef      	beq.n	80036ea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800370a:	4b27      	ldr	r3, [pc, #156]	; (80037a8 <xPortStartScheduler+0x134>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f1c3 0307 	rsb	r3, r3, #7
 8003712:	2b04      	cmp	r3, #4
 8003714:	d00a      	beq.n	800372c <xPortStartScheduler+0xb8>
        __asm volatile
 8003716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	60bb      	str	r3, [r7, #8]
    }
 8003728:	bf00      	nop
 800372a:	e7fe      	b.n	800372a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800372c:	4b1e      	ldr	r3, [pc, #120]	; (80037a8 <xPortStartScheduler+0x134>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	021b      	lsls	r3, r3, #8
 8003732:	4a1d      	ldr	r2, [pc, #116]	; (80037a8 <xPortStartScheduler+0x134>)
 8003734:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003736:	4b1c      	ldr	r3, [pc, #112]	; (80037a8 <xPortStartScheduler+0x134>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800373e:	4a1a      	ldr	r2, [pc, #104]	; (80037a8 <xPortStartScheduler+0x134>)
 8003740:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	b2da      	uxtb	r2, r3
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800374a:	4b18      	ldr	r3, [pc, #96]	; (80037ac <xPortStartScheduler+0x138>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a17      	ldr	r2, [pc, #92]	; (80037ac <xPortStartScheduler+0x138>)
 8003750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003754:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003756:	4b15      	ldr	r3, [pc, #84]	; (80037ac <xPortStartScheduler+0x138>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a14      	ldr	r2, [pc, #80]	; (80037ac <xPortStartScheduler+0x138>)
 800375c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003760:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003762:	f000 f8db 	bl	800391c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003766:	4b12      	ldr	r3, [pc, #72]	; (80037b0 <xPortStartScheduler+0x13c>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800376c:	f000 f8fa 	bl	8003964 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003770:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <xPortStartScheduler+0x140>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a0f      	ldr	r2, [pc, #60]	; (80037b4 <xPortStartScheduler+0x140>)
 8003776:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800377a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800377c:	f7ff ff64 	bl	8003648 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003780:	f7fe fdc0 	bl	8002304 <vTaskSwitchContext>
    prvTaskExitError();
 8003784:	f7ff ff1e 	bl	80035c4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	e000ed00 	.word	0xe000ed00
 8003798:	410fc271 	.word	0x410fc271
 800379c:	410fc270 	.word	0x410fc270
 80037a0:	e000e400 	.word	0xe000e400
 80037a4:	20000288 	.word	0x20000288
 80037a8:	2000028c 	.word	0x2000028c
 80037ac:	e000ed20 	.word	0xe000ed20
 80037b0:	20000024 	.word	0x20000024
 80037b4:	e000ef34 	.word	0xe000ef34

080037b8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
        __asm volatile
 80037be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	607b      	str	r3, [r7, #4]
    }
 80037d0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80037d2:	4b0f      	ldr	r3, [pc, #60]	; (8003810 <vPortEnterCritical+0x58>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3301      	adds	r3, #1
 80037d8:	4a0d      	ldr	r2, [pc, #52]	; (8003810 <vPortEnterCritical+0x58>)
 80037da:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80037dc:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <vPortEnterCritical+0x58>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d10f      	bne.n	8003804 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80037e4:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <vPortEnterCritical+0x5c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <vPortEnterCritical+0x4c>
        __asm volatile
 80037ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	603b      	str	r3, [r7, #0]
    }
 8003800:	bf00      	nop
 8003802:	e7fe      	b.n	8003802 <vPortEnterCritical+0x4a>
    }
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	20000024 	.word	0x20000024
 8003814:	e000ed04 	.word	0xe000ed04

08003818 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <vPortExitCritical+0x50>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10a      	bne.n	800383c <vPortExitCritical+0x24>
        __asm volatile
 8003826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	607b      	str	r3, [r7, #4]
    }
 8003838:	bf00      	nop
 800383a:	e7fe      	b.n	800383a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800383c:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <vPortExitCritical+0x50>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3b01      	subs	r3, #1
 8003842:	4a09      	ldr	r2, [pc, #36]	; (8003868 <vPortExitCritical+0x50>)
 8003844:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003846:	4b08      	ldr	r3, [pc, #32]	; (8003868 <vPortExitCritical+0x50>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d105      	bne.n	800385a <vPortExitCritical+0x42>
 800384e:	2300      	movs	r3, #0
 8003850:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	f383 8811 	msr	BASEPRI, r3
    }
 8003858:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20000024 	.word	0x20000024
 800386c:	00000000 	.word	0x00000000

08003870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003870:	f3ef 8009 	mrs	r0, PSP
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <pxCurrentTCBConst>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	f01e 0f10 	tst.w	lr, #16
 8003880:	bf08      	it	eq
 8003882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800388a:	6010      	str	r0, [r2, #0]
 800388c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003890:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003894:	f380 8811 	msr	BASEPRI, r0
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	f7fe fd30 	bl	8002304 <vTaskSwitchContext>
 80038a4:	f04f 0000 	mov.w	r0, #0
 80038a8:	f380 8811 	msr	BASEPRI, r0
 80038ac:	bc09      	pop	{r0, r3}
 80038ae:	6819      	ldr	r1, [r3, #0]
 80038b0:	6808      	ldr	r0, [r1, #0]
 80038b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b6:	f01e 0f10 	tst.w	lr, #16
 80038ba:	bf08      	it	eq
 80038bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80038c0:	f380 8809 	msr	PSP, r0
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	f3af 8000 	nop.w

080038d0 <pxCurrentTCBConst>:
 80038d0:	20000148 	.word	0x20000148
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop

080038d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
        __asm volatile
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	607b      	str	r3, [r7, #4]
    }
 80038f0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80038f2:	f7fe fc4f 	bl	8002194 <xTaskIncrementTick>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <SysTick_Handler+0x40>)
 80038fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	2300      	movs	r3, #0
 8003906:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	f383 8811 	msr	BASEPRI, r3
    }
 800390e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8003910:	bf00      	nop
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	e000ed04 	.word	0xe000ed04

0800391c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <vPortSetupTimerInterrupt+0x34>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003926:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <vPortSetupTimerInterrupt+0x38>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800392c:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <vPortSetupTimerInterrupt+0x3c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a0a      	ldr	r2, [pc, #40]	; (800395c <vPortSetupTimerInterrupt+0x40>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	099b      	lsrs	r3, r3, #6
 8003938:	4a09      	ldr	r2, [pc, #36]	; (8003960 <vPortSetupTimerInterrupt+0x44>)
 800393a:	3b01      	subs	r3, #1
 800393c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800393e:	4b04      	ldr	r3, [pc, #16]	; (8003950 <vPortSetupTimerInterrupt+0x34>)
 8003940:	2207      	movs	r2, #7
 8003942:	601a      	str	r2, [r3, #0]
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	e000e010 	.word	0xe000e010
 8003954:	e000e018 	.word	0xe000e018
 8003958:	20000004 	.word	0x20000004
 800395c:	10624dd3 	.word	0x10624dd3
 8003960:	e000e014 	.word	0xe000e014

08003964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003964:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003974 <vPortEnableVFP+0x10>
 8003968:	6801      	ldr	r1, [r0, #0]
 800396a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800396e:	6001      	str	r1, [r0, #0]
 8003970:	4770      	bx	lr
 8003972:	0000      	.short	0x0000
 8003974:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003978:	bf00      	nop
 800397a:	bf00      	nop

0800397c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003982:	f3ef 8305 	mrs	r3, IPSR
 8003986:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b0f      	cmp	r3, #15
 800398c:	d914      	bls.n	80039b8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800398e:	4a17      	ldr	r2, [pc, #92]	; (80039ec <vPortValidateInterruptPriority+0x70>)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4413      	add	r3, r2
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003998:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <vPortValidateInterruptPriority+0x74>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	7afa      	ldrb	r2, [r7, #11]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d20a      	bcs.n	80039b8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	607b      	str	r3, [r7, #4]
    }
 80039b4:	bf00      	nop
 80039b6:	e7fe      	b.n	80039b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80039b8:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <vPortValidateInterruptPriority+0x78>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039c0:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <vPortValidateInterruptPriority+0x7c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d90a      	bls.n	80039de <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	603b      	str	r3, [r7, #0]
    }
 80039da:	bf00      	nop
 80039dc:	e7fe      	b.n	80039dc <vPortValidateInterruptPriority+0x60>
    }
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	e000e3f0 	.word	0xe000e3f0
 80039f0:	20000288 	.word	0x20000288
 80039f4:	e000ed0c 	.word	0xe000ed0c
 80039f8:	2000028c 	.word	0x2000028c

080039fc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	; 0x28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003a08:	f7fe fb0a 	bl	8002020 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003a0c:	4b65      	ldr	r3, [pc, #404]	; (8003ba4 <pvPortMalloc+0x1a8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003a14:	f000 f934 	bl	8003c80 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a18:	4b63      	ldr	r3, [pc, #396]	; (8003ba8 <pvPortMalloc+0x1ac>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f040 80a7 	bne.w	8003b74 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d02d      	beq.n	8003a88 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003a2c:	2208      	movs	r2, #8
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d227      	bcs.n	8003a88 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003a38:	2208      	movs	r2, #8
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d021      	beq.n	8003a8e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f023 0307 	bic.w	r3, r3, #7
 8003a50:	3308      	adds	r3, #8
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d214      	bcs.n	8003a82 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f023 0307 	bic.w	r3, r3, #7
 8003a5e:	3308      	adds	r3, #8
 8003a60:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d010      	beq.n	8003a8e <pvPortMalloc+0x92>
        __asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	617b      	str	r3, [r7, #20]
    }
 8003a7e:	bf00      	nop
 8003a80:	e7fe      	b.n	8003a80 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a86:	e002      	b.n	8003a8e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	607b      	str	r3, [r7, #4]
 8003a8c:	e000      	b.n	8003a90 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a8e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d06e      	beq.n	8003b74 <pvPortMalloc+0x178>
 8003a96:	4b45      	ldr	r3, [pc, #276]	; (8003bac <pvPortMalloc+0x1b0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d869      	bhi.n	8003b74 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003aa0:	4b43      	ldr	r3, [pc, #268]	; (8003bb0 <pvPortMalloc+0x1b4>)
 8003aa2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003aa4:	4b42      	ldr	r3, [pc, #264]	; (8003bb0 <pvPortMalloc+0x1b4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003aaa:	e004      	b.n	8003ab6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d903      	bls.n	8003ac8 <pvPortMalloc+0xcc>
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1f1      	bne.n	8003aac <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003ac8:	4b36      	ldr	r3, [pc, #216]	; (8003ba4 <pvPortMalloc+0x1a8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d050      	beq.n	8003b74 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2208      	movs	r2, #8
 8003ad8:	4413      	add	r3, r2
 8003ada:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	1ad2      	subs	r2, r2, r3
 8003aec:	2308      	movs	r3, #8
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d91f      	bls.n	8003b34 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4413      	add	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <pvPortMalloc+0x120>
        __asm volatile
 8003b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0a:	f383 8811 	msr	BASEPRI, r3
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	613b      	str	r3, [r7, #16]
    }
 8003b18:	bf00      	nop
 8003b1a:	e7fe      	b.n	8003b1a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	1ad2      	subs	r2, r2, r3
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b2e:	69b8      	ldr	r0, [r7, #24]
 8003b30:	f000 f908 	bl	8003d44 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b34:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <pvPortMalloc+0x1b0>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	4a1b      	ldr	r2, [pc, #108]	; (8003bac <pvPortMalloc+0x1b0>)
 8003b40:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b42:	4b1a      	ldr	r3, [pc, #104]	; (8003bac <pvPortMalloc+0x1b0>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <pvPortMalloc+0x1b8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d203      	bcs.n	8003b56 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b4e:	4b17      	ldr	r3, [pc, #92]	; (8003bac <pvPortMalloc+0x1b0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a18      	ldr	r2, [pc, #96]	; (8003bb4 <pvPortMalloc+0x1b8>)
 8003b54:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	4b13      	ldr	r3, [pc, #76]	; (8003ba8 <pvPortMalloc+0x1ac>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003b6a:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <pvPortMalloc+0x1bc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	4a11      	ldr	r2, [pc, #68]	; (8003bb8 <pvPortMalloc+0x1bc>)
 8003b72:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003b74:	f7fe fa62 	bl	800203c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <pvPortMalloc+0x19c>
        __asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	60fb      	str	r3, [r7, #12]
    }
 8003b94:	bf00      	nop
 8003b96:	e7fe      	b.n	8003b96 <pvPortMalloc+0x19a>
    return pvReturn;
 8003b98:	69fb      	ldr	r3, [r7, #28]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3728      	adds	r7, #40	; 0x28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20012e98 	.word	0x20012e98
 8003ba8:	20012eac 	.word	0x20012eac
 8003bac:	20012e9c 	.word	0x20012e9c
 8003bb0:	20012e90 	.word	0x20012e90
 8003bb4:	20012ea0 	.word	0x20012ea0
 8003bb8:	20012ea4 	.word	0x20012ea4

08003bbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d04d      	beq.n	8003c6a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003bce:	2308      	movs	r3, #8
 8003bd0:	425b      	negs	r3, r3
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <vPortFree+0xb8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10a      	bne.n	8003c00 <vPortFree+0x44>
        __asm volatile
 8003bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	60fb      	str	r3, [r7, #12]
    }
 8003bfc:	bf00      	nop
 8003bfe:	e7fe      	b.n	8003bfe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <vPortFree+0x62>
        __asm volatile
 8003c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	60bb      	str	r3, [r7, #8]
    }
 8003c1a:	bf00      	nop
 8003c1c:	e7fe      	b.n	8003c1c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	4b14      	ldr	r3, [pc, #80]	; (8003c74 <vPortFree+0xb8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01e      	beq.n	8003c6a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d11a      	bne.n	8003c6a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	4b0e      	ldr	r3, [pc, #56]	; (8003c74 <vPortFree+0xb8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	401a      	ands	r2, r3
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003c44:	f7fe f9ec 	bl	8002020 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <vPortFree+0xbc>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4413      	add	r3, r2
 8003c52:	4a09      	ldr	r2, [pc, #36]	; (8003c78 <vPortFree+0xbc>)
 8003c54:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c56:	6938      	ldr	r0, [r7, #16]
 8003c58:	f000 f874 	bl	8003d44 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003c5c:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <vPortFree+0xc0>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3301      	adds	r3, #1
 8003c62:	4a06      	ldr	r2, [pc, #24]	; (8003c7c <vPortFree+0xc0>)
 8003c64:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003c66:	f7fe f9e9 	bl	800203c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003c6a:	bf00      	nop
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20012eac 	.word	0x20012eac
 8003c78:	20012e9c 	.word	0x20012e9c
 8003c7c:	20012ea8 	.word	0x20012ea8

08003c80 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003c86:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003c8a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003c8c:	4b27      	ldr	r3, [pc, #156]	; (8003d2c <prvHeapInit+0xac>)
 8003c8e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00c      	beq.n	8003cb4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3307      	adds	r3, #7
 8003c9e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0307 	bic.w	r3, r3, #7
 8003ca6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	4a1f      	ldr	r2, [pc, #124]	; (8003d2c <prvHeapInit+0xac>)
 8003cb0:	4413      	add	r3, r2
 8003cb2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003cb8:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <prvHeapInit+0xb0>)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003cbe:	4b1c      	ldr	r3, [pc, #112]	; (8003d30 <prvHeapInit+0xb0>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	4413      	add	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003ccc:	2208      	movs	r2, #8
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f023 0307 	bic.w	r3, r3, #7
 8003cda:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4a15      	ldr	r2, [pc, #84]	; (8003d34 <prvHeapInit+0xb4>)
 8003ce0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003ce2:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <prvHeapInit+0xb4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003cea:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <prvHeapInit+0xb4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	1ad2      	subs	r2, r2, r3
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d00:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <prvHeapInit+0xb4>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	4a0a      	ldr	r2, [pc, #40]	; (8003d38 <prvHeapInit+0xb8>)
 8003d0e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	4a09      	ldr	r2, [pc, #36]	; (8003d3c <prvHeapInit+0xbc>)
 8003d16:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d18:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <prvHeapInit+0xc0>)
 8003d1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d1e:	601a      	str	r2, [r3, #0]
}
 8003d20:	bf00      	nop
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	20000290 	.word	0x20000290
 8003d30:	20012e90 	.word	0x20012e90
 8003d34:	20012e98 	.word	0x20012e98
 8003d38:	20012ea0 	.word	0x20012ea0
 8003d3c:	20012e9c 	.word	0x20012e9c
 8003d40:	20012eac 	.word	0x20012eac

08003d44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d4c:	4b28      	ldr	r3, [pc, #160]	; (8003df0 <prvInsertBlockIntoFreeList+0xac>)
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	e002      	b.n	8003d58 <prvInsertBlockIntoFreeList+0x14>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d8f7      	bhi.n	8003d52 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d108      	bne.n	8003d86 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	441a      	add	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	441a      	add	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d118      	bne.n	8003dcc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	4b15      	ldr	r3, [pc, #84]	; (8003df4 <prvInsertBlockIntoFreeList+0xb0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d00d      	beq.n	8003dc2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	441a      	add	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	e008      	b.n	8003dd4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003dc2:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <prvInsertBlockIntoFreeList+0xb0>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	e003      	b.n	8003dd4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d002      	beq.n	8003de2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003de2:	bf00      	nop
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	20012e90 	.word	0x20012e90
 8003df4:	20012e98 	.word	0x20012e98

08003df8 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	4608      	mov	r0, r1
 8003e02:	4611      	mov	r1, r2
 8003e04:	461a      	mov	r2, r3
 8003e06:	4603      	mov	r3, r0
 8003e08:	70fb      	strb	r3, [r7, #3]
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	70bb      	strb	r3, [r7, #2]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	78fa      	ldrb	r2, [r7, #3]
 8003e16:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	78ba      	ldrb	r2, [r7, #2]
 8003e1c:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	787a      	ldrb	r2, [r7, #1]
 8003e22:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	7c3a      	ldrb	r2, [r7, #16]
 8003e28:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	7d3a      	ldrb	r2, [r7, #20]
 8003e2e:	715a      	strb	r2, [r3, #5]
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	4a88      	ldr	r2, [pc, #544]	; (8004074 <GPIO_Config+0x238>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d106      	bne.n	8003e64 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 8003e56:	4b88      	ldr	r3, [pc, #544]	; (8004078 <GPIO_Config+0x23c>)
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	4a87      	ldr	r2, [pc, #540]	; (8004078 <GPIO_Config+0x23c>)
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	6313      	str	r3, [r2, #48]	; 0x30
 8003e62:	e03a      	b.n	8003eda <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	4a84      	ldr	r2, [pc, #528]	; (800407c <GPIO_Config+0x240>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d106      	bne.n	8003e7c <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 8003e6e:	4b82      	ldr	r3, [pc, #520]	; (8004078 <GPIO_Config+0x23c>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	4a81      	ldr	r2, [pc, #516]	; (8004078 <GPIO_Config+0x23c>)
 8003e74:	f043 0302 	orr.w	r3, r3, #2
 8003e78:	6313      	str	r3, [r2, #48]	; 0x30
 8003e7a:	e02e      	b.n	8003eda <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	4a7f      	ldr	r2, [pc, #508]	; (8004080 <GPIO_Config+0x244>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d106      	bne.n	8003e94 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 8003e86:	4b7c      	ldr	r3, [pc, #496]	; (8004078 <GPIO_Config+0x23c>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	4a7b      	ldr	r2, [pc, #492]	; (8004078 <GPIO_Config+0x23c>)
 8003e8c:	f043 0304 	orr.w	r3, r3, #4
 8003e90:	6313      	str	r3, [r2, #48]	; 0x30
 8003e92:	e022      	b.n	8003eda <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	4a7a      	ldr	r2, [pc, #488]	; (8004084 <GPIO_Config+0x248>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d106      	bne.n	8003eac <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 8003e9e:	4b76      	ldr	r3, [pc, #472]	; (8004078 <GPIO_Config+0x23c>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	4a75      	ldr	r2, [pc, #468]	; (8004078 <GPIO_Config+0x23c>)
 8003ea4:	f043 0308 	orr.w	r3, r3, #8
 8003ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eaa:	e016      	b.n	8003eda <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	4a75      	ldr	r2, [pc, #468]	; (8004088 <GPIO_Config+0x24c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d106      	bne.n	8003ec4 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 8003eb6:	4b70      	ldr	r3, [pc, #448]	; (8004078 <GPIO_Config+0x23c>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	4a6f      	ldr	r2, [pc, #444]	; (8004078 <GPIO_Config+0x23c>)
 8003ebc:	f043 0310 	orr.w	r3, r3, #16
 8003ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec2:	e00a      	b.n	8003eda <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	4a70      	ldr	r2, [pc, #448]	; (800408c <GPIO_Config+0x250>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d105      	bne.n	8003eda <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 8003ece:	4b6a      	ldr	r3, [pc, #424]	; (8004078 <GPIO_Config+0x23c>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	4a69      	ldr	r2, [pc, #420]	; (8004078 <GPIO_Config+0x23c>)
 8003ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed8:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	785b      	ldrb	r3, [r3, #1]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	2103      	movs	r1, #3
 8003efa:	fa01 f303 	lsl.w	r3, r1, r3
 8003efe:	43db      	mvns	r3, r3
 8003f00:	4619      	mov	r1, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	400a      	ands	r2, r1
 8003f08:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	6819      	ldr	r1, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	789b      	ldrb	r3, [r3, #2]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	4619      	mov	r1, r3
 8003f36:	2301      	movs	r3, #1
 8003f38:	408b      	lsls	r3, r1
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	400a      	ands	r2, r1
 8003f44:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	6859      	ldr	r1, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	78db      	ldrb	r3, [r3, #3]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	2103      	movs	r1, #3
 8003f76:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	400a      	ands	r2, r1
 8003f84:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	6899      	ldr	r1, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	791b      	ldrb	r3, [r3, #4]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	2103      	movs	r1, #3
 8003fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	400a      	ands	r2, r1
 8003fc4:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	68d9      	ldr	r1, [r3, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	785b      	ldrb	r3, [r3, #1]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d143      	bne.n	8004066 <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b07      	cmp	r3, #7
 8003fe4:	d81f      	bhi.n	8004026 <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	6a1a      	ldr	r2, [r3, #32]
 8003ff4:	210f      	movs	r1, #15
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	4619      	mov	r1, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	400a      	ands	r2, r1
 8004006:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	6a1a      	ldr	r2, [r3, #32]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	795b      	ldrb	r3, [r3, #5]
 8004012:	4619      	mov	r1, r3
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	fa01 f303 	lsl.w	r3, r1, r3
 800401a:	4619      	mov	r1, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	430a      	orrs	r2, r1
 8004022:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8004024:	e01f      	b.n	8004066 <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	3b08      	subs	r3, #8
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004036:	210f      	movs	r1, #15
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	fa01 f303 	lsl.w	r3, r1, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	4619      	mov	r1, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	400a      	ands	r2, r1
 8004048:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	795b      	ldrb	r3, [r3, #5]
 8004054:	4619      	mov	r1, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	fa01 f303 	lsl.w	r3, r1, r3
 800405c:	4619      	mov	r1, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	430a      	orrs	r2, r1
 8004064:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004066:	bf00      	nop
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40020000 	.word	0x40020000
 8004078:	40023800 	.word	0x40023800
 800407c:	40020400 	.word	0x40020400
 8004080:	40020800 	.word	0x40020800
 8004084:	40020c00 	.word	0x40020c00
 8004088:	40021000 	.word	0x40021000
 800408c:	40021c00 	.word	0x40021c00

08004090 <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	695a      	ldr	r2, [r3, #20]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	4619      	mov	r1, r3
 80040a4:	2301      	movs	r3, #1
 80040a6:	408b      	lsls	r3, r1
 80040a8:	4619      	mov	r1, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	404a      	eors	r2, r1
 80040b0:	615a      	str	r2, [r3, #20]
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
	...

080040c0 <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	4603      	mov	r3, r0
 80040c8:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 80040ca:	4a39      	ldr	r2, [pc, #228]	; (80041b0 <configPLL+0xf0>)
 80040cc:	79fb      	ldrb	r3, [r7, #7]
 80040ce:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 80040d0:	79fb      	ldrb	r3, [r7, #7]
 80040d2:	2b31      	cmp	r3, #49	; 0x31
 80040d4:	d804      	bhi.n	80040e0 <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 80040d6:	4b37      	ldr	r3, [pc, #220]	; (80041b4 <configPLL+0xf4>)
 80040d8:	4a36      	ldr	r2, [pc, #216]	; (80041b4 <configPLL+0xf4>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	6093      	str	r3, [r2, #8]
 80040de:	e005      	b.n	80040ec <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80040e0:	4b34      	ldr	r3, [pc, #208]	; (80041b4 <configPLL+0xf4>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4a33      	ldr	r2, [pc, #204]	; (80041b4 <configPLL+0xf4>)
 80040e6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80040ea:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 80040ec:	4b31      	ldr	r3, [pc, #196]	; (80041b4 <configPLL+0xf4>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	4a30      	ldr	r2, [pc, #192]	; (80041b4 <configPLL+0xf4>)
 80040f2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80040f6:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 80040f8:	4b2e      	ldr	r3, [pc, #184]	; (80041b4 <configPLL+0xf4>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	4a2d      	ldr	r2, [pc, #180]	; (80041b4 <configPLL+0xf4>)
 80040fe:	f043 0312 	orr.w	r3, r3, #18
 8004102:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 8004104:	4b2b      	ldr	r3, [pc, #172]	; (80041b4 <configPLL+0xf4>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	79fa      	ldrb	r2, [r7, #7]
 800410a:	0092      	lsls	r2, r2, #2
 800410c:	3a0e      	subs	r2, #14
 800410e:	0192      	lsls	r2, r2, #6
 8004110:	4611      	mov	r1, r2
 8004112:	4a28      	ldr	r2, [pc, #160]	; (80041b4 <configPLL+0xf4>)
 8004114:	430b      	orrs	r3, r1
 8004116:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 8004118:	4b26      	ldr	r3, [pc, #152]	; (80041b4 <configPLL+0xf4>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4a25      	ldr	r2, [pc, #148]	; (80041b4 <configPLL+0xf4>)
 800411e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004122:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 8004124:	4b23      	ldr	r3, [pc, #140]	; (80041b4 <configPLL+0xf4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a22      	ldr	r2, [pc, #136]	; (80041b4 <configPLL+0xf4>)
 800412a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800412e:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8004130:	e000      	b.n	8004134 <configPLL+0x74>
	{
		__NOP();
 8004132:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8004134:	4b1f      	ldr	r3, [pc, #124]	; (80041b4 <configPLL+0xf4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0f8      	beq.n	8004132 <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	2b5a      	cmp	r3, #90	; 0x5a
 8004144:	d909      	bls.n	800415a <configPLL+0x9a>
 8004146:	79fb      	ldrb	r3, [r7, #7]
 8004148:	2b64      	cmp	r3, #100	; 0x64
 800414a:	d806      	bhi.n	800415a <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 800414c:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <configPLL+0xf8>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a19      	ldr	r2, [pc, #100]	; (80041b8 <configPLL+0xf8>)
 8004152:	f043 0303 	orr.w	r3, r3, #3
 8004156:	6013      	str	r3, [r2, #0]
 8004158:	e01d      	b.n	8004196 <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	2b40      	cmp	r3, #64	; 0x40
 800415e:	d909      	bls.n	8004174 <configPLL+0xb4>
 8004160:	79fb      	ldrb	r3, [r7, #7]
 8004162:	2b5a      	cmp	r3, #90	; 0x5a
 8004164:	d806      	bhi.n	8004174 <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 8004166:	4b14      	ldr	r3, [pc, #80]	; (80041b8 <configPLL+0xf8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a13      	ldr	r2, [pc, #76]	; (80041b8 <configPLL+0xf8>)
 800416c:	f043 0302 	orr.w	r3, r3, #2
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	e010      	b.n	8004196 <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	2b1e      	cmp	r3, #30
 8004178:	d909      	bls.n	800418e <configPLL+0xce>
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	2b40      	cmp	r3, #64	; 0x40
 800417e:	d806      	bhi.n	800418e <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 8004180:	4b0d      	ldr	r3, [pc, #52]	; (80041b8 <configPLL+0xf8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a0c      	ldr	r2, [pc, #48]	; (80041b8 <configPLL+0xf8>)
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	e003      	b.n	8004196 <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 800418e:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <configPLL+0xf8>)
 8004190:	4a09      	ldr	r2, [pc, #36]	; (80041b8 <configPLL+0xf8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 8004196:	4b07      	ldr	r3, [pc, #28]	; (80041b4 <configPLL+0xf4>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	4a06      	ldr	r2, [pc, #24]	; (80041b4 <configPLL+0xf4>)
 800419c:	f043 0302 	orr.w	r3, r3, #2
 80041a0:	6093      	str	r3, [r2, #8]

}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	20012eb0 	.word	0x20012eb0
 80041b4:	40023800 	.word	0x40023800
 80041b8:	40023c00 	.word	0x40023c00

080041bc <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 80041c2:	2300      	movs	r3, #0
 80041c4:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 80041c6:	4b09      	ldr	r3, [pc, #36]	; (80041ec <getConfigPLL+0x30>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d103      	bne.n	80041da <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 80041d2:	4b07      	ldr	r3, [pc, #28]	; (80041f0 <getConfigPLL+0x34>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	71fb      	strb	r3, [r7, #7]
 80041d8:	e001      	b.n	80041de <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 80041da:	2310      	movs	r3, #16
 80041dc:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 80041de:	79fb      	ldrb	r3, [r7, #7]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	40023800 	.word	0x40023800
 80041f0:	20012eb0 	.word	0x20012eb0

080041f4 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 80041fa:	f7ff ffdf 	bl	80041bc <getConfigPLL>
 80041fe:	4603      	mov	r3, r0
 8004200:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 8004202:	2300      	movs	r3, #0
 8004204:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 8004206:	79bb      	ldrb	r3, [r7, #6]
 8004208:	2b31      	cmp	r3, #49	; 0x31
 800420a:	d802      	bhi.n	8004212 <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 800420c:	79bb      	ldrb	r3, [r7, #6]
 800420e:	71fb      	strb	r3, [r7, #7]
 8004210:	e002      	b.n	8004218 <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 8004212:	79bb      	ldrb	r3, [r7, #6]
 8004214:	089b      	lsrs	r3, r3, #2
 8004216:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 8004218:	79fb      	ldrb	r3, [r7, #7]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <configMCO2>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2(uint8_t value)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0b11<<RCC_CFGR_MCO2_Pos);
 800422e:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <configMCO2+0x34>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	4a09      	ldr	r2, [pc, #36]	; (8004258 <configMCO2+0x34>)
 8004234:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004238:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (value<<RCC_CFGR_MCO2_Pos);
 800423a:	4b07      	ldr	r3, [pc, #28]	; (8004258 <configMCO2+0x34>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	79fa      	ldrb	r2, [r7, #7]
 8004240:	0792      	lsls	r2, r2, #30
 8004242:	4611      	mov	r1, r2
 8004244:	4a04      	ldr	r2, [pc, #16]	; (8004258 <configMCO2+0x34>)
 8004246:	430b      	orrs	r3, r1
 8004248:	6093      	str	r3, [r2, #8]
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40023800 	.word	0x40023800

0800425c <configMCO2PRE>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2PRE(uint8_t value)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	4603      	mov	r3, r0
 8004264:	71fb      	strb	r3, [r7, #7]
	//Selecionamos el prescaler de acuerdo al valor definido
	switch (value){
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	3b01      	subs	r3, #1
 800426a:	2b04      	cmp	r3, #4
 800426c:	d84b      	bhi.n	8004306 <configMCO2PRE+0xaa>
 800426e:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <configMCO2PRE+0x18>)
 8004270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004274:	08004289 	.word	0x08004289
 8004278:	0800429f 	.word	0x0800429f
 800427c:	080042b9 	.word	0x080042b9
 8004280:	080042d3 	.word	0x080042d3
 8004284:	080042ed 	.word	0x080042ed
		case 1:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8004288:	4b23      	ldr	r3, [pc, #140]	; (8004318 <configMCO2PRE+0xbc>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	4a22      	ldr	r2, [pc, #136]	; (8004318 <configMCO2PRE+0xbc>)
 800428e:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8004292:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b000<<RCC_CFGR_MCO2PRE_Pos);
 8004294:	4b20      	ldr	r3, [pc, #128]	; (8004318 <configMCO2PRE+0xbc>)
 8004296:	4a20      	ldr	r2, [pc, #128]	; (8004318 <configMCO2PRE+0xbc>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	6093      	str	r3, [r2, #8]
			break;
 800429c:	e035      	b.n	800430a <configMCO2PRE+0xae>
		}
		case 2:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 800429e:	4b1e      	ldr	r3, [pc, #120]	; (8004318 <configMCO2PRE+0xbc>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	4a1d      	ldr	r2, [pc, #116]	; (8004318 <configMCO2PRE+0xbc>)
 80042a4:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80042a8:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100<<RCC_CFGR_MCO2PRE_Pos);
 80042aa:	4b1b      	ldr	r3, [pc, #108]	; (8004318 <configMCO2PRE+0xbc>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	4a1a      	ldr	r2, [pc, #104]	; (8004318 <configMCO2PRE+0xbc>)
 80042b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042b4:	6093      	str	r3, [r2, #8]
			break;
 80042b6:	e028      	b.n	800430a <configMCO2PRE+0xae>
		}
		case 3:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80042b8:	4b17      	ldr	r3, [pc, #92]	; (8004318 <configMCO2PRE+0xbc>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	4a16      	ldr	r2, [pc, #88]	; (8004318 <configMCO2PRE+0xbc>)
 80042be:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80042c2:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b101<<RCC_CFGR_MCO2PRE_Pos);
 80042c4:	4b14      	ldr	r3, [pc, #80]	; (8004318 <configMCO2PRE+0xbc>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	4a13      	ldr	r2, [pc, #76]	; (8004318 <configMCO2PRE+0xbc>)
 80042ca:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
 80042ce:	6093      	str	r3, [r2, #8]
			break;
 80042d0:	e01b      	b.n	800430a <configMCO2PRE+0xae>
		}
		case 4:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80042d2:	4b11      	ldr	r3, [pc, #68]	; (8004318 <configMCO2PRE+0xbc>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	4a10      	ldr	r2, [pc, #64]	; (8004318 <configMCO2PRE+0xbc>)
 80042d8:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80042dc:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b110<<RCC_CFGR_MCO2PRE_Pos);
 80042de:	4b0e      	ldr	r3, [pc, #56]	; (8004318 <configMCO2PRE+0xbc>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	4a0d      	ldr	r2, [pc, #52]	; (8004318 <configMCO2PRE+0xbc>)
 80042e4:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80042e8:	6093      	str	r3, [r2, #8]
			break;
 80042ea:	e00e      	b.n	800430a <configMCO2PRE+0xae>
		}
		case 5:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80042ec:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <configMCO2PRE+0xbc>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	4a09      	ldr	r2, [pc, #36]	; (8004318 <configMCO2PRE+0xbc>)
 80042f2:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80042f6:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b111<<RCC_CFGR_MCO2PRE_Pos);
 80042f8:	4b07      	ldr	r3, [pc, #28]	; (8004318 <configMCO2PRE+0xbc>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	4a06      	ldr	r2, [pc, #24]	; (8004318 <configMCO2PRE+0xbc>)
 80042fe:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8004302:	6093      	str	r3, [r2, #8]
			break;
 8004304:	e001      	b.n	800430a <configMCO2PRE+0xae>
		}
		default:
		{
			__NOP();
 8004306:	bf00      	nop
			break;
 8004308:	bf00      	nop
		}
	}

}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40023800 	.word	0x40023800

0800431c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	4603      	mov	r3, r0
 8004324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432a:	2b00      	cmp	r3, #0
 800432c:	db0b      	blt.n	8004346 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800432e:	79fb      	ldrb	r3, [r7, #7]
 8004330:	f003 021f 	and.w	r2, r3, #31
 8004334:	4907      	ldr	r1, [pc, #28]	; (8004354 <__NVIC_EnableIRQ+0x38>)
 8004336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	2001      	movs	r0, #1
 800433e:	fa00 f202 	lsl.w	r2, r0, r2
 8004342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	e000e100 	.word	0xe000e100

08004358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	4603      	mov	r3, r0
 8004360:	6039      	str	r1, [r7, #0]
 8004362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004368:	2b00      	cmp	r3, #0
 800436a:	db0a      	blt.n	8004382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	b2da      	uxtb	r2, r3
 8004370:	490c      	ldr	r1, [pc, #48]	; (80043a4 <__NVIC_SetPriority+0x4c>)
 8004372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004376:	0112      	lsls	r2, r2, #4
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	440b      	add	r3, r1
 800437c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004380:	e00a      	b.n	8004398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	b2da      	uxtb	r2, r3
 8004386:	4908      	ldr	r1, [pc, #32]	; (80043a8 <__NVIC_SetPriority+0x50>)
 8004388:	79fb      	ldrb	r3, [r7, #7]
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	3b04      	subs	r3, #4
 8004390:	0112      	lsls	r2, r2, #4
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	440b      	add	r3, r1
 8004396:	761a      	strb	r2, [r3, #24]
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	e000e100 	.word	0xe000e100
 80043a8:	e000ed00 	.word	0xe000ed00

080043ac <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	4a8f      	ldr	r2, [pc, #572]	; (80045f8 <USART_Config+0x24c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d107      	bne.n	80043ce <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 80043be:	4b8f      	ldr	r3, [pc, #572]	; (80045fc <USART_Config+0x250>)
 80043c0:	2210      	movs	r2, #16
 80043c2:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	4a8d      	ldr	r2, [pc, #564]	; (8004600 <USART_Config+0x254>)
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	e019      	b.n	8004402 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	4a8c      	ldr	r2, [pc, #560]	; (8004604 <USART_Config+0x258>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d108      	bne.n	80043ea <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 80043d8:	4b88      	ldr	r3, [pc, #544]	; (80045fc <USART_Config+0x250>)
 80043da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043de:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	4a88      	ldr	r2, [pc, #544]	; (8004608 <USART_Config+0x25c>)
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	e00b      	b.n	8004402 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	4a87      	ldr	r2, [pc, #540]	; (800460c <USART_Config+0x260>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d106      	bne.n	8004402 <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 80043f4:	4b81      	ldr	r3, [pc, #516]	; (80045fc <USART_Config+0x250>)
 80043f6:	2220      	movs	r2, #32
 80043f8:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	4a84      	ldr	r2, [pc, #528]	; (8004610 <USART_Config+0x264>)
 8004400:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2200      	movs	r2, #0
 8004408:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2200      	movs	r2, #0
 8004410:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	789b      	ldrb	r3, [r3, #2]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d03d      	beq.n	8004496 <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004428:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004438:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004448:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004458:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	789b      	ldrb	r3, [r3, #2]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d110      	bne.n	8004484 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004470:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004480:	60da      	str	r2, [r3, #12]
 8004482:	e018      	b.n	80044b6 <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004492:	60da      	str	r2, [r3, #12]
 8004494:	e00f      	b.n	80044b6 <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a4:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	68da      	ldr	r2, [r3, #12]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044b4:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	78db      	ldrb	r3, [r3, #3]
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	d84c      	bhi.n	8004558 <USART_Config+0x1ac>
 80044be:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <USART_Config+0x118>)
 80044c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c4:	080044d5 	.word	0x080044d5
 80044c8:	080044f3 	.word	0x080044f3
 80044cc:	08004515 	.word	0x08004515
 80044d0:	08004537 	.word	0x08004537
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	691a      	ldr	r2, [r3, #16]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80044e2:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	6912      	ldr	r2, [r2, #16]
 80044ee:	611a      	str	r2, [r3, #16]
		break;
 80044f0:	e041      	b.n	8004576 <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004500:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004510:	611a      	str	r2, [r3, #16]
		break;
 8004512:	e030      	b.n	8004576 <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	691a      	ldr	r2, [r3, #16]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004522:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	691a      	ldr	r2, [r3, #16]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004532:	611a      	str	r2, [r3, #16]
		break;
 8004534:	e01f      	b.n	8004576 <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004544:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004554:	611a      	str	r2, [r3, #16]
		break;
 8004556:	e00e      	b.n	8004576 <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	691a      	ldr	r2, [r3, #16]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004566:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	6912      	ldr	r2, [r2, #16]
 8004572:	611a      	str	r2, [r3, #16]
		break;
 8004574:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 8004576:	2300      	movs	r3, #0
 8004578:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	4a21      	ldr	r2, [pc, #132]	; (8004604 <USART_Config+0x258>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d104      	bne.n	800458e <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8004584:	f7ff fe36 	bl	80041f4 <getClockAPB1>
 8004588:	4603      	mov	r3, r0
 800458a:	73fb      	strb	r3, [r7, #15]
 800458c:	e003      	b.n	8004596 <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 800458e:	f7ff fe15 	bl	80041bc <getConfigPLL>
 8004592:	4603      	mov	r3, r0
 8004594:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	785b      	ldrb	r3, [r3, #1]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10b      	bne.n	80045b6 <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 f95f 	bl	8004868 <getValueBaudRate>
 80045aa:	4603      	mov	r3, r0
 80045ac:	461a      	mov	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	e02f      	b.n	8004616 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	785b      	ldrb	r3, [r3, #1]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d10b      	bne.n	80045d6 <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 80045be:	7bfb      	ldrb	r3, [r7, #15]
 80045c0:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 f94f 	bl	8004868 <getValueBaudRate>
 80045ca:	4603      	mov	r3, r0
 80045cc:	461a      	mov	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	609a      	str	r2, [r3, #8]
 80045d4:	e01f      	b.n	8004616 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	785b      	ldrb	r3, [r3, #1]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d11a      	bne.n	8004614 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 f93f 	bl	8004868 <getValueBaudRate>
 80045ea:	4603      	mov	r3, r0
 80045ec:	461a      	mov	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	609a      	str	r2, [r3, #8]
 80045f4:	e00f      	b.n	8004616 <USART_Config+0x26a>
 80045f6:	bf00      	nop
 80045f8:	40011000 	.word	0x40011000
 80045fc:	40023800 	.word	0x40023800
 8004600:	20012eb4 	.word	0x20012eb4
 8004604:	40004400 	.word	0x40004400
 8004608:	20012eb8 	.word	0x20012eb8
 800460c:	40011400 	.word	0x40011400
 8004610:	20012ebc 	.word	0x20012ebc
	}
	else
	{
		__NOP();
 8004614:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b03      	cmp	r3, #3
 800461c:	d866      	bhi.n	80046ec <USART_Config+0x340>
 800461e:	a201      	add	r2, pc, #4	; (adr r2, 8004624 <USART_Config+0x278>)
 8004620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004624:	08004635 	.word	0x08004635
 8004628:	08004657 	.word	0x08004657
 800462c:	08004679 	.word	0x08004679
 8004630:	080046bb 	.word	0x080046bb
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f022 0208 	bic.w	r2, r2, #8
 8004642:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f042 0208 	orr.w	r2, r2, #8
 8004652:	60da      	str	r2, [r3, #12]

		break;
 8004654:	e063      	b.n	800471e <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f022 0204 	bic.w	r2, r2, #4
 8004664:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f042 0204 	orr.w	r2, r2, #4
 8004674:	60da      	str	r2, [r3, #12]

		break;
 8004676:	e052      	b.n	800471e <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f022 0208 	bic.w	r2, r2, #8
 8004686:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f042 0208 	orr.w	r2, r2, #8
 8004696:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f022 0204 	bic.w	r2, r2, #4
 80046a6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f042 0204 	orr.w	r2, r2, #4
 80046b6:	60da      	str	r2, [r3, #12]


		break;
 80046b8:	e031      	b.n	800471e <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046c8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f022 0208 	bic.w	r2, r2, #8
 80046d8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	68da      	ldr	r2, [r3, #12]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f022 0204 	bic.w	r2, r2, #4
 80046e8:	60da      	str	r2, [r3, #12]
		break;
 80046ea:	e018      	b.n	800471e <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046fa:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f022 0208 	bic.w	r2, r2, #8
 800470a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f022 0204 	bic.w	r2, r2, #4
 800471a:	60da      	str	r2, [r3, #12]
		break;
 800471c:	bf00      	nop
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800471e:	b672      	cpsid	i
}
 8004720:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	791b      	ldrb	r3, [r3, #4]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d110      	bne.n	800474c <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f022 0220 	bic.w	r2, r2, #32
 8004738:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f042 0220 	orr.w	r2, r2, #32
 8004748:	60da      	str	r2, [r3, #12]
 800474a:	e007      	b.n	800475c <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f022 0220 	bic.w	r2, r2, #32
 800475a:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	791b      	ldrb	r3, [r3, #4]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d003      	beq.n	800476c <USART_Config+0x3c0>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	795b      	ldrb	r3, [r3, #5]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d11a      	bne.n	80047a2 <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	4a1a      	ldr	r2, [pc, #104]	; (80047dc <USART_Config+0x430>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d103      	bne.n	800477e <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 8004776:	2025      	movs	r0, #37	; 0x25
 8004778:	f7ff fdd0 	bl	800431c <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800477c:	e013      	b.n	80047a6 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	4a17      	ldr	r2, [pc, #92]	; (80047e0 <USART_Config+0x434>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d103      	bne.n	8004790 <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 8004788:	2026      	movs	r0, #38	; 0x26
 800478a:	f7ff fdc7 	bl	800431c <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800478e:	e00a      	b.n	80047a6 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	4a13      	ldr	r2, [pc, #76]	; (80047e4 <USART_Config+0x438>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d105      	bne.n	80047a6 <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 800479a:	2047      	movs	r0, #71	; 0x47
 800479c:	f7ff fdbe 	bl	800431c <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80047a0:	e001      	b.n	80047a6 <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 80047a2:	bf00      	nop
 80047a4:	e000      	b.n	80047a8 <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80047a6:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80047a8:	b662      	cpsie	i
}
 80047aa:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b03      	cmp	r3, #3
 80047b2:	d00f      	beq.n	80047d4 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047c2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047d2:	60da      	str	r2, [r3, #12]
	}
}
 80047d4:	bf00      	nop
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40011000 	.word	0x40011000
 80047e0:	40004400 	.word	0x40004400
 80047e4:	40011400 	.word	0x40011400

080047e8 <usart_Config_Init_Priority>:

//------------Funcion para configurar las interrupciones------------------
void usart_Config_Init_Priority(USART_Handler_t *ptrUsartHandler, uint8_t newPriority)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 80047f4:	b672      	cpsid	i
}
 80047f6:	bf00      	nop
	//Desactivamos las interupciones globales
	__disable_irq();
	//Verificamos si se selecciono alguna interrupcion
		if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	791b      	ldrb	r3, [r3, #4]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d003      	beq.n	8004808 <usart_Config_Init_Priority+0x20>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	795b      	ldrb	r3, [r3, #5]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d120      	bne.n	800484a <usart_Config_Init_Priority+0x62>
		{
			//Matriculamos la interrupcion en el NVIC
			if(ptrUsartHandler->ptrUSARTx == USART1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	4a13      	ldr	r2, [pc, #76]	; (800485c <usart_Config_Init_Priority+0x74>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d105      	bne.n	800481e <usart_Config_Init_Priority+0x36>
			{
				NVIC_SetPriority(USART1_IRQn, newPriority);
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	4619      	mov	r1, r3
 8004816:	2025      	movs	r0, #37	; 0x25
 8004818:	f7ff fd9e 	bl	8004358 <__NVIC_SetPriority>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 800481c:	e017      	b.n	800484e <usart_Config_Init_Priority+0x66>
			}
			else if(ptrUsartHandler->ptrUSARTx == USART2)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	4a0f      	ldr	r2, [pc, #60]	; (8004860 <usart_Config_Init_Priority+0x78>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d105      	bne.n	8004834 <usart_Config_Init_Priority+0x4c>
			{
				NVIC_SetPriority(USART2_IRQn, newPriority);
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	4619      	mov	r1, r3
 800482c:	2026      	movs	r0, #38	; 0x26
 800482e:	f7ff fd93 	bl	8004358 <__NVIC_SetPriority>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 8004832:	e00c      	b.n	800484e <usart_Config_Init_Priority+0x66>
			}
			else if(ptrUsartHandler->ptrUSARTx == USART6)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	4a0a      	ldr	r2, [pc, #40]	; (8004864 <usart_Config_Init_Priority+0x7c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d107      	bne.n	800484e <usart_Config_Init_Priority+0x66>
			{
				NVIC_SetPriority(USART6_IRQn, newPriority);
 800483e:	78fb      	ldrb	r3, [r7, #3]
 8004840:	4619      	mov	r1, r3
 8004842:	2047      	movs	r0, #71	; 0x47
 8004844:	f7ff fd88 	bl	8004358 <__NVIC_SetPriority>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 8004848:	e001      	b.n	800484e <usart_Config_Init_Priority+0x66>
			}
		}
		else
		{
			__NOP();
 800484a:	bf00      	nop
 800484c:	e000      	b.n	8004850 <usart_Config_Init_Priority+0x68>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 800484e:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8004850:	b662      	cpsie	i
}
 8004852:	bf00      	nop
		}
		//Activamos las interupciones globales
		__enable_irq();
}
 8004854:	bf00      	nop
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40011000 	.word	0x40011000
 8004860:	40004400 	.word	0x40004400
 8004864:	40011400 	.word	0x40011400

08004868 <getValueBaudRate>:

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 8004868:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800486c:	b086      	sub	sp, #24
 800486e:	af00      	add	r7, sp, #0
 8004870:	6039      	str	r1, [r7, #0]
 8004872:	4601      	mov	r1, r0
 8004874:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 8004876:	79f9      	ldrb	r1, [r7, #7]
 8004878:	2000      	movs	r0, #0
 800487a:	460a      	mov	r2, r1
 800487c:	4603      	mov	r3, r0
 800487e:	491f      	ldr	r1, [pc, #124]	; (80048fc <getValueBaudRate+0x94>)
 8004880:	fb01 f003 	mul.w	r0, r1, r3
 8004884:	2102      	movs	r1, #2
 8004886:	fb02 f101 	mul.w	r1, r2, r1
 800488a:	4401      	add	r1, r0
 800488c:	481b      	ldr	r0, [pc, #108]	; (80048fc <getValueBaudRate+0x94>)
 800488e:	fba2 4500 	umull	r4, r5, r2, r0
 8004892:	194b      	adds	r3, r1, r5
 8004894:	461d      	mov	r5, r3
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	2200      	movs	r2, #0
 800489c:	4698      	mov	r8, r3
 800489e:	4691      	mov	r9, r2
 80048a0:	4642      	mov	r2, r8
 80048a2:	464b      	mov	r3, r9
 80048a4:	4620      	mov	r0, r4
 80048a6:	4629      	mov	r1, r5
 80048a8:	f7fb fcea 	bl	8000280 <__aeabi_ldivmod>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4613      	mov	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	4a12      	ldr	r2, [pc, #72]	; (8004900 <getValueBaudRate+0x98>)
 80048b8:	fba2 2303 	umull	r2, r3, r2, r3
 80048bc:	0b5b      	lsrs	r3, r3, #13
 80048be:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80048c6:	fb02 f303 	mul.w	r3, r2, r3
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80048d6:	4a0a      	ldr	r2, [pc, #40]	; (8004900 <getValueBaudRate+0x98>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	0a5b      	lsrs	r3, r3, #9
 80048de:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	7afb      	ldrb	r3, [r7, #11]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	4313      	orrs	r3, r2
 80048ee:	813b      	strh	r3, [r7, #8]

    return value;
 80048f0:	893b      	ldrh	r3, [r7, #8]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80048fc:	540be400 	.word	0x540be400
 8004900:	d1b71759 	.word	0xd1b71759

08004904 <writeChar>:

//---------------Funciones para la transmision de datos------------------------------
//Funcion para escribir un solo char
void writeChar(USART_Handler_t *ptrUsartHandler, uint8_t datatoSend)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	70fb      	strb	r3, [r7, #3]
	//Verificamos que no se este enviando un mensaje
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8004910:	e000      	b.n	8004914 <writeChar+0x10>
	{
		__NOP();
 8004912:	bf00      	nop
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0f7      	beq.n	8004912 <writeChar+0xe>
	}
	//Almacenamos un elemento char en el registro USART_DR
	ptrUsartHandler->ptrUSARTx->DR = datatoSend;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	78fa      	ldrb	r2, [r7, #3]
 8004928:	605a      	str	r2, [r3, #4]

}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <writeMsg>:

//Funcion para escribir un string
void writeMsg(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b084      	sub	sp, #16
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	73fb      	strb	r3, [r7, #15]

	while(MsgtoSend[i] != '\0')
 8004944:	e00a      	b.n	800495c <writeMsg+0x26>
	{
		writeChar(ptrUsartHandlerString, MsgtoSend[i]);
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	4413      	add	r3, r2
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	4619      	mov	r1, r3
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7ff ffd7 	bl	8004904 <writeChar>
		i++;
 8004956:	7bfb      	ldrb	r3, [r7, #15]
 8004958:	3301      	adds	r3, #1
 800495a:	73fb      	strb	r3, [r7, #15]
	while(MsgtoSend[i] != '\0')
 800495c:	7bfb      	ldrb	r3, [r7, #15]
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	4413      	add	r3, r2
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1ee      	bne.n	8004946 <writeMsg+0x10>
	}
}
 8004968:	bf00      	nop
 800496a:	bf00      	nop
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <getRxData>:
	}
}

//Funcion para leer un char
uint8_t getRxData(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
	return auxRxData;
 8004978:	4b03      	ldr	r3, [pc, #12]	; (8004988 <getRxData+0x14>)
 800497a:	781b      	ldrb	r3, [r3, #0]
}
 800497c:	4618      	mov	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	20012ec0 	.word	0x20012ec0

0800498c <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	460b      	mov	r3, r1
 8004996:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 8004998:	78fb      	ldrb	r3, [r7, #3]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d10c      	bne.n	80049b8 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 80049b6:	e005      	b.n	80049c4 <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	60da      	str	r2, [r3, #12]
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <BasicUSART1_Callback>:


//Definimos las funciones para cuando se genera una interrupcion del USART1-2 y 6
__attribute__((weak)) void BasicUSART1_Callback()
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
	__NOP();
 80049d4:	bf00      	nop
}
 80049d6:	bf00      	nop
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <BasicUSART6_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART6_Callback()
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
	__NOP();
 80049e4:	bf00      	nop
}
 80049e6:	bf00      	nop
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 80049f4:	4b37      	ldr	r3, [pc, #220]	; (8004ad4 <USART1_IRQHandler+0xe4>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0320 	and.w	r3, r3, #32
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d008      	beq.n	8004a14 <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 8004a02:	4b34      	ldr	r3, [pc, #208]	; (8004ad4 <USART1_IRQHandler+0xe4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	4b33      	ldr	r3, [pc, #204]	; (8004ad8 <USART1_IRQHandler+0xe8>)
 8004a0c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 8004a0e:	f7ff ffdf 	bl	80049d0 <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 8004a12:	e05d      	b.n	8004ad0 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 8004a14:	4b2f      	ldr	r3, [pc, #188]	; (8004ad4 <USART1_IRQHandler+0xe4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d055      	beq.n	8004ace <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8004a22:	4b2e      	ldr	r3, [pc, #184]	; (8004adc <USART1_IRQHandler+0xec>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10b      	bne.n	8004a42 <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 8004a2a:	4b2d      	ldr	r3, [pc, #180]	; (8004ae0 <USART1_IRQHandler+0xf0>)
 8004a2c:	781a      	ldrb	r2, [r3, #0]
 8004a2e:	4b29      	ldr	r3, [pc, #164]	; (8004ad4 <USART1_IRQHandler+0xe4>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8004a34:	4b27      	ldr	r3, [pc, #156]	; (8004ad4 <USART1_IRQHandler+0xe4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2100      	movs	r1, #0
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff ffa6 	bl	800498c <interruptionTX>
}
 8004a40:	e046      	b.n	8004ad0 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8004a42:	4b26      	ldr	r3, [pc, #152]	; (8004adc <USART1_IRQHandler+0xec>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d142      	bne.n	8004ad0 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8004a4a:	4b26      	ldr	r3, [pc, #152]	; (8004ae4 <USART1_IRQHandler+0xf4>)
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	4b25      	ldr	r3, [pc, #148]	; (8004ae8 <USART1_IRQHandler+0xf8>)
 8004a52:	5c9b      	ldrb	r3, [r3, r2]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00e      	beq.n	8004a76 <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 8004a58:	4b22      	ldr	r3, [pc, #136]	; (8004ae4 <USART1_IRQHandler+0xf4>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	4b22      	ldr	r3, [pc, #136]	; (8004ae8 <USART1_IRQHandler+0xf8>)
 8004a60:	5c9a      	ldrb	r2, [r3, r2]
 8004a62:	4b1c      	ldr	r3, [pc, #112]	; (8004ad4 <USART1_IRQHandler+0xe4>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	605a      	str	r2, [r3, #4]
				posChar++;
 8004a68:	4b1e      	ldr	r3, [pc, #120]	; (8004ae4 <USART1_IRQHandler+0xf4>)
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	4b1c      	ldr	r3, [pc, #112]	; (8004ae4 <USART1_IRQHandler+0xf4>)
 8004a72:	701a      	strb	r2, [r3, #0]
}
 8004a74:	e02c      	b.n	8004ad0 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8004a76:	4b1d      	ldr	r3, [pc, #116]	; (8004aec <USART1_IRQHandler+0xfc>)
 8004a78:	781a      	ldrb	r2, [r3, #0]
 8004a7a:	4b1d      	ldr	r3, [pc, #116]	; (8004af0 <USART1_IRQHandler+0x100>)
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d215      	bcs.n	8004aae <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8004a82:	4b1a      	ldr	r3, [pc, #104]	; (8004aec <USART1_IRQHandler+0xfc>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	2364      	movs	r3, #100	; 0x64
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	4a19      	ldr	r2, [pc, #100]	; (8004af4 <USART1_IRQHandler+0x104>)
 8004a90:	4413      	add	r3, r2
 8004a92:	4619      	mov	r1, r3
 8004a94:	4814      	ldr	r0, [pc, #80]	; (8004ae8 <USART1_IRQHandler+0xf8>)
 8004a96:	f000 f971 	bl	8004d7c <siprintf>
					posChar = 0;
 8004a9a:	4b12      	ldr	r3, [pc, #72]	; (8004ae4 <USART1_IRQHandler+0xf4>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8004aa0:	4b12      	ldr	r3, [pc, #72]	; (8004aec <USART1_IRQHandler+0xfc>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	4b10      	ldr	r3, [pc, #64]	; (8004aec <USART1_IRQHandler+0xfc>)
 8004aaa:	701a      	strb	r2, [r3, #0]
}
 8004aac:	e010      	b.n	8004ad0 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8004aae:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <USART1_IRQHandler+0xe4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff ff69 	bl	800498c <interruptionTX>
					posChar = 0;
 8004aba:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <USART1_IRQHandler+0xf4>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <USART1_IRQHandler+0xfc>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8004ac6:	4b0a      	ldr	r3, [pc, #40]	; (8004af0 <USART1_IRQHandler+0x100>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	701a      	strb	r2, [r3, #0]
}
 8004acc:	e000      	b.n	8004ad0 <USART1_IRQHandler+0xe0>
		__NOP();
 8004ace:	bf00      	nop
}
 8004ad0:	bf00      	nop
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	20012eb4 	.word	0x20012eb4
 8004ad8:	20012ec0 	.word	0x20012ec0
 8004adc:	200136fb 	.word	0x200136fb
 8004ae0:	20012ec1 	.word	0x20012ec1
 8004ae4:	200136fa 	.word	0x200136fa
 8004ae8:	20012ec4 	.word	0x20012ec4
 8004aec:	200136f9 	.word	0x200136f9
 8004af0:	200136f8 	.word	0x200136f8
 8004af4:	20012f28 	.word	0x20012f28

08004af8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 8004afc:	4b37      	ldr	r3, [pc, #220]	; (8004bdc <USART2_IRQHandler+0xe4>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d008      	beq.n	8004b1c <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 8004b0a:	4b34      	ldr	r3, [pc, #208]	; (8004bdc <USART2_IRQHandler+0xe4>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	4b33      	ldr	r3, [pc, #204]	; (8004be0 <USART2_IRQHandler+0xe8>)
 8004b14:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 8004b16:	f7fb feeb 	bl	80008f0 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 8004b1a:	e05d      	b.n	8004bd8 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 8004b1c:	4b2f      	ldr	r3, [pc, #188]	; (8004bdc <USART2_IRQHandler+0xe4>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d055      	beq.n	8004bd6 <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8004b2a:	4b2e      	ldr	r3, [pc, #184]	; (8004be4 <USART2_IRQHandler+0xec>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10b      	bne.n	8004b4a <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 8004b32:	4b2d      	ldr	r3, [pc, #180]	; (8004be8 <USART2_IRQHandler+0xf0>)
 8004b34:	781a      	ldrb	r2, [r3, #0]
 8004b36:	4b29      	ldr	r3, [pc, #164]	; (8004bdc <USART2_IRQHandler+0xe4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8004b3c:	4b27      	ldr	r3, [pc, #156]	; (8004bdc <USART2_IRQHandler+0xe4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2100      	movs	r1, #0
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff ff22 	bl	800498c <interruptionTX>
}
 8004b48:	e046      	b.n	8004bd8 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8004b4a:	4b26      	ldr	r3, [pc, #152]	; (8004be4 <USART2_IRQHandler+0xec>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d142      	bne.n	8004bd8 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8004b52:	4b26      	ldr	r3, [pc, #152]	; (8004bec <USART2_IRQHandler+0xf4>)
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	4b25      	ldr	r3, [pc, #148]	; (8004bf0 <USART2_IRQHandler+0xf8>)
 8004b5a:	5c9b      	ldrb	r3, [r3, r2]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00e      	beq.n	8004b7e <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 8004b60:	4b22      	ldr	r3, [pc, #136]	; (8004bec <USART2_IRQHandler+0xf4>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	461a      	mov	r2, r3
 8004b66:	4b22      	ldr	r3, [pc, #136]	; (8004bf0 <USART2_IRQHandler+0xf8>)
 8004b68:	5c9a      	ldrb	r2, [r3, r2]
 8004b6a:	4b1c      	ldr	r3, [pc, #112]	; (8004bdc <USART2_IRQHandler+0xe4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	605a      	str	r2, [r3, #4]
				posChar++;
 8004b70:	4b1e      	ldr	r3, [pc, #120]	; (8004bec <USART2_IRQHandler+0xf4>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	3301      	adds	r3, #1
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	4b1c      	ldr	r3, [pc, #112]	; (8004bec <USART2_IRQHandler+0xf4>)
 8004b7a:	701a      	strb	r2, [r3, #0]
}
 8004b7c:	e02c      	b.n	8004bd8 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8004b7e:	4b1d      	ldr	r3, [pc, #116]	; (8004bf4 <USART2_IRQHandler+0xfc>)
 8004b80:	781a      	ldrb	r2, [r3, #0]
 8004b82:	4b1d      	ldr	r3, [pc, #116]	; (8004bf8 <USART2_IRQHandler+0x100>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d215      	bcs.n	8004bb6 <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8004b8a:	4b1a      	ldr	r3, [pc, #104]	; (8004bf4 <USART2_IRQHandler+0xfc>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	2364      	movs	r3, #100	; 0x64
 8004b92:	fb02 f303 	mul.w	r3, r2, r3
 8004b96:	4a19      	ldr	r2, [pc, #100]	; (8004bfc <USART2_IRQHandler+0x104>)
 8004b98:	4413      	add	r3, r2
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4814      	ldr	r0, [pc, #80]	; (8004bf0 <USART2_IRQHandler+0xf8>)
 8004b9e:	f000 f8ed 	bl	8004d7c <siprintf>
					posChar = 0;
 8004ba2:	4b12      	ldr	r3, [pc, #72]	; (8004bec <USART2_IRQHandler+0xf4>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8004ba8:	4b12      	ldr	r3, [pc, #72]	; (8004bf4 <USART2_IRQHandler+0xfc>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	3301      	adds	r3, #1
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	4b10      	ldr	r3, [pc, #64]	; (8004bf4 <USART2_IRQHandler+0xfc>)
 8004bb2:	701a      	strb	r2, [r3, #0]
}
 8004bb4:	e010      	b.n	8004bd8 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8004bb6:	4b09      	ldr	r3, [pc, #36]	; (8004bdc <USART2_IRQHandler+0xe4>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2100      	movs	r1, #0
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff fee5 	bl	800498c <interruptionTX>
					posChar = 0;
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <USART2_IRQHandler+0xf4>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <USART2_IRQHandler+0xfc>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8004bce:	4b0a      	ldr	r3, [pc, #40]	; (8004bf8 <USART2_IRQHandler+0x100>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	701a      	strb	r2, [r3, #0]
}
 8004bd4:	e000      	b.n	8004bd8 <USART2_IRQHandler+0xe0>
		__NOP();
 8004bd6:	bf00      	nop
}
 8004bd8:	bf00      	nop
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20012eb8 	.word	0x20012eb8
 8004be0:	20012ec0 	.word	0x20012ec0
 8004be4:	200136fb 	.word	0x200136fb
 8004be8:	20012ec1 	.word	0x20012ec1
 8004bec:	200136fa 	.word	0x200136fa
 8004bf0:	20012ec4 	.word	0x20012ec4
 8004bf4:	200136f9 	.word	0x200136f9
 8004bf8:	200136f8 	.word	0x200136f8
 8004bfc:	20012f28 	.word	0x20012f28

08004c00 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 8004c04:	4b37      	ldr	r3, [pc, #220]	; (8004ce4 <USART6_IRQHandler+0xe4>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d008      	beq.n	8004c24 <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 8004c12:	4b34      	ldr	r3, [pc, #208]	; (8004ce4 <USART6_IRQHandler+0xe4>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	4b33      	ldr	r3, [pc, #204]	; (8004ce8 <USART6_IRQHandler+0xe8>)
 8004c1c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 8004c1e:	f7ff fedf 	bl	80049e0 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 8004c22:	e05d      	b.n	8004ce0 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 8004c24:	4b2f      	ldr	r3, [pc, #188]	; (8004ce4 <USART6_IRQHandler+0xe4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d055      	beq.n	8004cde <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8004c32:	4b2e      	ldr	r3, [pc, #184]	; (8004cec <USART6_IRQHandler+0xec>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10b      	bne.n	8004c52 <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 8004c3a:	4b2d      	ldr	r3, [pc, #180]	; (8004cf0 <USART6_IRQHandler+0xf0>)
 8004c3c:	781a      	ldrb	r2, [r3, #0]
 8004c3e:	4b29      	ldr	r3, [pc, #164]	; (8004ce4 <USART6_IRQHandler+0xe4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8004c44:	4b27      	ldr	r3, [pc, #156]	; (8004ce4 <USART6_IRQHandler+0xe4>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2100      	movs	r1, #0
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff fe9e 	bl	800498c <interruptionTX>
}
 8004c50:	e046      	b.n	8004ce0 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8004c52:	4b26      	ldr	r3, [pc, #152]	; (8004cec <USART6_IRQHandler+0xec>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d142      	bne.n	8004ce0 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8004c5a:	4b26      	ldr	r3, [pc, #152]	; (8004cf4 <USART6_IRQHandler+0xf4>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	4b25      	ldr	r3, [pc, #148]	; (8004cf8 <USART6_IRQHandler+0xf8>)
 8004c62:	5c9b      	ldrb	r3, [r3, r2]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00e      	beq.n	8004c86 <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 8004c68:	4b22      	ldr	r3, [pc, #136]	; (8004cf4 <USART6_IRQHandler+0xf4>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	4b22      	ldr	r3, [pc, #136]	; (8004cf8 <USART6_IRQHandler+0xf8>)
 8004c70:	5c9a      	ldrb	r2, [r3, r2]
 8004c72:	4b1c      	ldr	r3, [pc, #112]	; (8004ce4 <USART6_IRQHandler+0xe4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	605a      	str	r2, [r3, #4]
				posChar++;
 8004c78:	4b1e      	ldr	r3, [pc, #120]	; (8004cf4 <USART6_IRQHandler+0xf4>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	4b1c      	ldr	r3, [pc, #112]	; (8004cf4 <USART6_IRQHandler+0xf4>)
 8004c82:	701a      	strb	r2, [r3, #0]
}
 8004c84:	e02c      	b.n	8004ce0 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8004c86:	4b1d      	ldr	r3, [pc, #116]	; (8004cfc <USART6_IRQHandler+0xfc>)
 8004c88:	781a      	ldrb	r2, [r3, #0]
 8004c8a:	4b1d      	ldr	r3, [pc, #116]	; (8004d00 <USART6_IRQHandler+0x100>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d215      	bcs.n	8004cbe <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8004c92:	4b1a      	ldr	r3, [pc, #104]	; (8004cfc <USART6_IRQHandler+0xfc>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	461a      	mov	r2, r3
 8004c98:	2364      	movs	r3, #100	; 0x64
 8004c9a:	fb02 f303 	mul.w	r3, r2, r3
 8004c9e:	4a19      	ldr	r2, [pc, #100]	; (8004d04 <USART6_IRQHandler+0x104>)
 8004ca0:	4413      	add	r3, r2
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4814      	ldr	r0, [pc, #80]	; (8004cf8 <USART6_IRQHandler+0xf8>)
 8004ca6:	f000 f869 	bl	8004d7c <siprintf>
					posChar = 0;
 8004caa:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <USART6_IRQHandler+0xf4>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8004cb0:	4b12      	ldr	r3, [pc, #72]	; (8004cfc <USART6_IRQHandler+0xfc>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	4b10      	ldr	r3, [pc, #64]	; (8004cfc <USART6_IRQHandler+0xfc>)
 8004cba:	701a      	strb	r2, [r3, #0]
}
 8004cbc:	e010      	b.n	8004ce0 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8004cbe:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <USART6_IRQHandler+0xe4>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7ff fe61 	bl	800498c <interruptionTX>
					posChar = 0;
 8004cca:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <USART6_IRQHandler+0xf4>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8004cd0:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <USART6_IRQHandler+0xfc>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8004cd6:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <USART6_IRQHandler+0x100>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
}
 8004cdc:	e000      	b.n	8004ce0 <USART6_IRQHandler+0xe0>
		__NOP();
 8004cde:	bf00      	nop
}
 8004ce0:	bf00      	nop
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	20012ebc 	.word	0x20012ebc
 8004ce8:	20012ec0 	.word	0x20012ec0
 8004cec:	200136fb 	.word	0x200136fb
 8004cf0:	20012ec1 	.word	0x20012ec1
 8004cf4:	200136fa 	.word	0x200136fa
 8004cf8:	20012ec4 	.word	0x20012ec4
 8004cfc:	200136f9 	.word	0x200136f9
 8004d00:	200136f8 	.word	0x200136f8
 8004d04:	20012f28 	.word	0x20012f28

08004d08 <__libc_init_array>:
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	4d0d      	ldr	r5, [pc, #52]	; (8004d40 <__libc_init_array+0x38>)
 8004d0c:	4c0d      	ldr	r4, [pc, #52]	; (8004d44 <__libc_init_array+0x3c>)
 8004d0e:	1b64      	subs	r4, r4, r5
 8004d10:	10a4      	asrs	r4, r4, #2
 8004d12:	2600      	movs	r6, #0
 8004d14:	42a6      	cmp	r6, r4
 8004d16:	d109      	bne.n	8004d2c <__libc_init_array+0x24>
 8004d18:	4d0b      	ldr	r5, [pc, #44]	; (8004d48 <__libc_init_array+0x40>)
 8004d1a:	4c0c      	ldr	r4, [pc, #48]	; (8004d4c <__libc_init_array+0x44>)
 8004d1c:	f000 fc9c 	bl	8005658 <_init>
 8004d20:	1b64      	subs	r4, r4, r5
 8004d22:	10a4      	asrs	r4, r4, #2
 8004d24:	2600      	movs	r6, #0
 8004d26:	42a6      	cmp	r6, r4
 8004d28:	d105      	bne.n	8004d36 <__libc_init_array+0x2e>
 8004d2a:	bd70      	pop	{r4, r5, r6, pc}
 8004d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d30:	4798      	blx	r3
 8004d32:	3601      	adds	r6, #1
 8004d34:	e7ee      	b.n	8004d14 <__libc_init_array+0xc>
 8004d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d3a:	4798      	blx	r3
 8004d3c:	3601      	adds	r6, #1
 8004d3e:	e7f2      	b.n	8004d26 <__libc_init_array+0x1e>
 8004d40:	08005864 	.word	0x08005864
 8004d44:	08005864 	.word	0x08005864
 8004d48:	08005864 	.word	0x08005864
 8004d4c:	08005868 	.word	0x08005868

08004d50 <memcpy>:
 8004d50:	440a      	add	r2, r1
 8004d52:	4291      	cmp	r1, r2
 8004d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d58:	d100      	bne.n	8004d5c <memcpy+0xc>
 8004d5a:	4770      	bx	lr
 8004d5c:	b510      	push	{r4, lr}
 8004d5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d66:	4291      	cmp	r1, r2
 8004d68:	d1f9      	bne.n	8004d5e <memcpy+0xe>
 8004d6a:	bd10      	pop	{r4, pc}

08004d6c <memset>:
 8004d6c:	4402      	add	r2, r0
 8004d6e:	4603      	mov	r3, r0
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d100      	bne.n	8004d76 <memset+0xa>
 8004d74:	4770      	bx	lr
 8004d76:	f803 1b01 	strb.w	r1, [r3], #1
 8004d7a:	e7f9      	b.n	8004d70 <memset+0x4>

08004d7c <siprintf>:
 8004d7c:	b40e      	push	{r1, r2, r3}
 8004d7e:	b500      	push	{lr}
 8004d80:	b09c      	sub	sp, #112	; 0x70
 8004d82:	ab1d      	add	r3, sp, #116	; 0x74
 8004d84:	9002      	str	r0, [sp, #8]
 8004d86:	9006      	str	r0, [sp, #24]
 8004d88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d8c:	4809      	ldr	r0, [pc, #36]	; (8004db4 <siprintf+0x38>)
 8004d8e:	9107      	str	r1, [sp, #28]
 8004d90:	9104      	str	r1, [sp, #16]
 8004d92:	4909      	ldr	r1, [pc, #36]	; (8004db8 <siprintf+0x3c>)
 8004d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d98:	9105      	str	r1, [sp, #20]
 8004d9a:	6800      	ldr	r0, [r0, #0]
 8004d9c:	9301      	str	r3, [sp, #4]
 8004d9e:	a902      	add	r1, sp, #8
 8004da0:	f000 f868 	bl	8004e74 <_svfiprintf_r>
 8004da4:	9b02      	ldr	r3, [sp, #8]
 8004da6:	2200      	movs	r2, #0
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	b01c      	add	sp, #112	; 0x70
 8004dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8004db0:	b003      	add	sp, #12
 8004db2:	4770      	bx	lr
 8004db4:	20000028 	.word	0x20000028
 8004db8:	ffff0208 	.word	0xffff0208

08004dbc <__ssputs_r>:
 8004dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc0:	688e      	ldr	r6, [r1, #8]
 8004dc2:	429e      	cmp	r6, r3
 8004dc4:	4682      	mov	sl, r0
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	4690      	mov	r8, r2
 8004dca:	461f      	mov	r7, r3
 8004dcc:	d838      	bhi.n	8004e40 <__ssputs_r+0x84>
 8004dce:	898a      	ldrh	r2, [r1, #12]
 8004dd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004dd4:	d032      	beq.n	8004e3c <__ssputs_r+0x80>
 8004dd6:	6825      	ldr	r5, [r4, #0]
 8004dd8:	6909      	ldr	r1, [r1, #16]
 8004dda:	eba5 0901 	sub.w	r9, r5, r1
 8004dde:	6965      	ldr	r5, [r4, #20]
 8004de0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004de4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004de8:	3301      	adds	r3, #1
 8004dea:	444b      	add	r3, r9
 8004dec:	106d      	asrs	r5, r5, #1
 8004dee:	429d      	cmp	r5, r3
 8004df0:	bf38      	it	cc
 8004df2:	461d      	movcc	r5, r3
 8004df4:	0553      	lsls	r3, r2, #21
 8004df6:	d531      	bpl.n	8004e5c <__ssputs_r+0xa0>
 8004df8:	4629      	mov	r1, r5
 8004dfa:	f000 fb55 	bl	80054a8 <_malloc_r>
 8004dfe:	4606      	mov	r6, r0
 8004e00:	b950      	cbnz	r0, 8004e18 <__ssputs_r+0x5c>
 8004e02:	230c      	movs	r3, #12
 8004e04:	f8ca 3000 	str.w	r3, [sl]
 8004e08:	89a3      	ldrh	r3, [r4, #12]
 8004e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e0e:	81a3      	strh	r3, [r4, #12]
 8004e10:	f04f 30ff 	mov.w	r0, #4294967295
 8004e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e18:	6921      	ldr	r1, [r4, #16]
 8004e1a:	464a      	mov	r2, r9
 8004e1c:	f7ff ff98 	bl	8004d50 <memcpy>
 8004e20:	89a3      	ldrh	r3, [r4, #12]
 8004e22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e2a:	81a3      	strh	r3, [r4, #12]
 8004e2c:	6126      	str	r6, [r4, #16]
 8004e2e:	6165      	str	r5, [r4, #20]
 8004e30:	444e      	add	r6, r9
 8004e32:	eba5 0509 	sub.w	r5, r5, r9
 8004e36:	6026      	str	r6, [r4, #0]
 8004e38:	60a5      	str	r5, [r4, #8]
 8004e3a:	463e      	mov	r6, r7
 8004e3c:	42be      	cmp	r6, r7
 8004e3e:	d900      	bls.n	8004e42 <__ssputs_r+0x86>
 8004e40:	463e      	mov	r6, r7
 8004e42:	6820      	ldr	r0, [r4, #0]
 8004e44:	4632      	mov	r2, r6
 8004e46:	4641      	mov	r1, r8
 8004e48:	f000 faa8 	bl	800539c <memmove>
 8004e4c:	68a3      	ldr	r3, [r4, #8]
 8004e4e:	1b9b      	subs	r3, r3, r6
 8004e50:	60a3      	str	r3, [r4, #8]
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	4433      	add	r3, r6
 8004e56:	6023      	str	r3, [r4, #0]
 8004e58:	2000      	movs	r0, #0
 8004e5a:	e7db      	b.n	8004e14 <__ssputs_r+0x58>
 8004e5c:	462a      	mov	r2, r5
 8004e5e:	f000 fb97 	bl	8005590 <_realloc_r>
 8004e62:	4606      	mov	r6, r0
 8004e64:	2800      	cmp	r0, #0
 8004e66:	d1e1      	bne.n	8004e2c <__ssputs_r+0x70>
 8004e68:	6921      	ldr	r1, [r4, #16]
 8004e6a:	4650      	mov	r0, sl
 8004e6c:	f000 fab0 	bl	80053d0 <_free_r>
 8004e70:	e7c7      	b.n	8004e02 <__ssputs_r+0x46>
	...

08004e74 <_svfiprintf_r>:
 8004e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e78:	4698      	mov	r8, r3
 8004e7a:	898b      	ldrh	r3, [r1, #12]
 8004e7c:	061b      	lsls	r3, r3, #24
 8004e7e:	b09d      	sub	sp, #116	; 0x74
 8004e80:	4607      	mov	r7, r0
 8004e82:	460d      	mov	r5, r1
 8004e84:	4614      	mov	r4, r2
 8004e86:	d50e      	bpl.n	8004ea6 <_svfiprintf_r+0x32>
 8004e88:	690b      	ldr	r3, [r1, #16]
 8004e8a:	b963      	cbnz	r3, 8004ea6 <_svfiprintf_r+0x32>
 8004e8c:	2140      	movs	r1, #64	; 0x40
 8004e8e:	f000 fb0b 	bl	80054a8 <_malloc_r>
 8004e92:	6028      	str	r0, [r5, #0]
 8004e94:	6128      	str	r0, [r5, #16]
 8004e96:	b920      	cbnz	r0, 8004ea2 <_svfiprintf_r+0x2e>
 8004e98:	230c      	movs	r3, #12
 8004e9a:	603b      	str	r3, [r7, #0]
 8004e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea0:	e0d1      	b.n	8005046 <_svfiprintf_r+0x1d2>
 8004ea2:	2340      	movs	r3, #64	; 0x40
 8004ea4:	616b      	str	r3, [r5, #20]
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8004eaa:	2320      	movs	r3, #32
 8004eac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004eb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004eb4:	2330      	movs	r3, #48	; 0x30
 8004eb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005060 <_svfiprintf_r+0x1ec>
 8004eba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ebe:	f04f 0901 	mov.w	r9, #1
 8004ec2:	4623      	mov	r3, r4
 8004ec4:	469a      	mov	sl, r3
 8004ec6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eca:	b10a      	cbz	r2, 8004ed0 <_svfiprintf_r+0x5c>
 8004ecc:	2a25      	cmp	r2, #37	; 0x25
 8004ece:	d1f9      	bne.n	8004ec4 <_svfiprintf_r+0x50>
 8004ed0:	ebba 0b04 	subs.w	fp, sl, r4
 8004ed4:	d00b      	beq.n	8004eee <_svfiprintf_r+0x7a>
 8004ed6:	465b      	mov	r3, fp
 8004ed8:	4622      	mov	r2, r4
 8004eda:	4629      	mov	r1, r5
 8004edc:	4638      	mov	r0, r7
 8004ede:	f7ff ff6d 	bl	8004dbc <__ssputs_r>
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	f000 80aa 	beq.w	800503c <_svfiprintf_r+0x1c8>
 8004ee8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004eea:	445a      	add	r2, fp
 8004eec:	9209      	str	r2, [sp, #36]	; 0x24
 8004eee:	f89a 3000 	ldrb.w	r3, [sl]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 80a2 	beq.w	800503c <_svfiprintf_r+0x1c8>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f04f 32ff 	mov.w	r2, #4294967295
 8004efe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f02:	f10a 0a01 	add.w	sl, sl, #1
 8004f06:	9304      	str	r3, [sp, #16]
 8004f08:	9307      	str	r3, [sp, #28]
 8004f0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f0e:	931a      	str	r3, [sp, #104]	; 0x68
 8004f10:	4654      	mov	r4, sl
 8004f12:	2205      	movs	r2, #5
 8004f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f18:	4851      	ldr	r0, [pc, #324]	; (8005060 <_svfiprintf_r+0x1ec>)
 8004f1a:	f7fb f961 	bl	80001e0 <memchr>
 8004f1e:	9a04      	ldr	r2, [sp, #16]
 8004f20:	b9d8      	cbnz	r0, 8004f5a <_svfiprintf_r+0xe6>
 8004f22:	06d0      	lsls	r0, r2, #27
 8004f24:	bf44      	itt	mi
 8004f26:	2320      	movmi	r3, #32
 8004f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f2c:	0711      	lsls	r1, r2, #28
 8004f2e:	bf44      	itt	mi
 8004f30:	232b      	movmi	r3, #43	; 0x2b
 8004f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f36:	f89a 3000 	ldrb.w	r3, [sl]
 8004f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f3c:	d015      	beq.n	8004f6a <_svfiprintf_r+0xf6>
 8004f3e:	9a07      	ldr	r2, [sp, #28]
 8004f40:	4654      	mov	r4, sl
 8004f42:	2000      	movs	r0, #0
 8004f44:	f04f 0c0a 	mov.w	ip, #10
 8004f48:	4621      	mov	r1, r4
 8004f4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f4e:	3b30      	subs	r3, #48	; 0x30
 8004f50:	2b09      	cmp	r3, #9
 8004f52:	d94e      	bls.n	8004ff2 <_svfiprintf_r+0x17e>
 8004f54:	b1b0      	cbz	r0, 8004f84 <_svfiprintf_r+0x110>
 8004f56:	9207      	str	r2, [sp, #28]
 8004f58:	e014      	b.n	8004f84 <_svfiprintf_r+0x110>
 8004f5a:	eba0 0308 	sub.w	r3, r0, r8
 8004f5e:	fa09 f303 	lsl.w	r3, r9, r3
 8004f62:	4313      	orrs	r3, r2
 8004f64:	9304      	str	r3, [sp, #16]
 8004f66:	46a2      	mov	sl, r4
 8004f68:	e7d2      	b.n	8004f10 <_svfiprintf_r+0x9c>
 8004f6a:	9b03      	ldr	r3, [sp, #12]
 8004f6c:	1d19      	adds	r1, r3, #4
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	9103      	str	r1, [sp, #12]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	bfbb      	ittet	lt
 8004f76:	425b      	neglt	r3, r3
 8004f78:	f042 0202 	orrlt.w	r2, r2, #2
 8004f7c:	9307      	strge	r3, [sp, #28]
 8004f7e:	9307      	strlt	r3, [sp, #28]
 8004f80:	bfb8      	it	lt
 8004f82:	9204      	strlt	r2, [sp, #16]
 8004f84:	7823      	ldrb	r3, [r4, #0]
 8004f86:	2b2e      	cmp	r3, #46	; 0x2e
 8004f88:	d10c      	bne.n	8004fa4 <_svfiprintf_r+0x130>
 8004f8a:	7863      	ldrb	r3, [r4, #1]
 8004f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f8e:	d135      	bne.n	8004ffc <_svfiprintf_r+0x188>
 8004f90:	9b03      	ldr	r3, [sp, #12]
 8004f92:	1d1a      	adds	r2, r3, #4
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	9203      	str	r2, [sp, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	bfb8      	it	lt
 8004f9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fa0:	3402      	adds	r4, #2
 8004fa2:	9305      	str	r3, [sp, #20]
 8004fa4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005070 <_svfiprintf_r+0x1fc>
 8004fa8:	7821      	ldrb	r1, [r4, #0]
 8004faa:	2203      	movs	r2, #3
 8004fac:	4650      	mov	r0, sl
 8004fae:	f7fb f917 	bl	80001e0 <memchr>
 8004fb2:	b140      	cbz	r0, 8004fc6 <_svfiprintf_r+0x152>
 8004fb4:	2340      	movs	r3, #64	; 0x40
 8004fb6:	eba0 000a 	sub.w	r0, r0, sl
 8004fba:	fa03 f000 	lsl.w	r0, r3, r0
 8004fbe:	9b04      	ldr	r3, [sp, #16]
 8004fc0:	4303      	orrs	r3, r0
 8004fc2:	3401      	adds	r4, #1
 8004fc4:	9304      	str	r3, [sp, #16]
 8004fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fca:	4826      	ldr	r0, [pc, #152]	; (8005064 <_svfiprintf_r+0x1f0>)
 8004fcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fd0:	2206      	movs	r2, #6
 8004fd2:	f7fb f905 	bl	80001e0 <memchr>
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	d038      	beq.n	800504c <_svfiprintf_r+0x1d8>
 8004fda:	4b23      	ldr	r3, [pc, #140]	; (8005068 <_svfiprintf_r+0x1f4>)
 8004fdc:	bb1b      	cbnz	r3, 8005026 <_svfiprintf_r+0x1b2>
 8004fde:	9b03      	ldr	r3, [sp, #12]
 8004fe0:	3307      	adds	r3, #7
 8004fe2:	f023 0307 	bic.w	r3, r3, #7
 8004fe6:	3308      	adds	r3, #8
 8004fe8:	9303      	str	r3, [sp, #12]
 8004fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fec:	4433      	add	r3, r6
 8004fee:	9309      	str	r3, [sp, #36]	; 0x24
 8004ff0:	e767      	b.n	8004ec2 <_svfiprintf_r+0x4e>
 8004ff2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ff6:	460c      	mov	r4, r1
 8004ff8:	2001      	movs	r0, #1
 8004ffa:	e7a5      	b.n	8004f48 <_svfiprintf_r+0xd4>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	3401      	adds	r4, #1
 8005000:	9305      	str	r3, [sp, #20]
 8005002:	4619      	mov	r1, r3
 8005004:	f04f 0c0a 	mov.w	ip, #10
 8005008:	4620      	mov	r0, r4
 800500a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800500e:	3a30      	subs	r2, #48	; 0x30
 8005010:	2a09      	cmp	r2, #9
 8005012:	d903      	bls.n	800501c <_svfiprintf_r+0x1a8>
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0c5      	beq.n	8004fa4 <_svfiprintf_r+0x130>
 8005018:	9105      	str	r1, [sp, #20]
 800501a:	e7c3      	b.n	8004fa4 <_svfiprintf_r+0x130>
 800501c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005020:	4604      	mov	r4, r0
 8005022:	2301      	movs	r3, #1
 8005024:	e7f0      	b.n	8005008 <_svfiprintf_r+0x194>
 8005026:	ab03      	add	r3, sp, #12
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	462a      	mov	r2, r5
 800502c:	4b0f      	ldr	r3, [pc, #60]	; (800506c <_svfiprintf_r+0x1f8>)
 800502e:	a904      	add	r1, sp, #16
 8005030:	4638      	mov	r0, r7
 8005032:	f3af 8000 	nop.w
 8005036:	1c42      	adds	r2, r0, #1
 8005038:	4606      	mov	r6, r0
 800503a:	d1d6      	bne.n	8004fea <_svfiprintf_r+0x176>
 800503c:	89ab      	ldrh	r3, [r5, #12]
 800503e:	065b      	lsls	r3, r3, #25
 8005040:	f53f af2c 	bmi.w	8004e9c <_svfiprintf_r+0x28>
 8005044:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005046:	b01d      	add	sp, #116	; 0x74
 8005048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800504c:	ab03      	add	r3, sp, #12
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	462a      	mov	r2, r5
 8005052:	4b06      	ldr	r3, [pc, #24]	; (800506c <_svfiprintf_r+0x1f8>)
 8005054:	a904      	add	r1, sp, #16
 8005056:	4638      	mov	r0, r7
 8005058:	f000 f87a 	bl	8005150 <_printf_i>
 800505c:	e7eb      	b.n	8005036 <_svfiprintf_r+0x1c2>
 800505e:	bf00      	nop
 8005060:	08005829 	.word	0x08005829
 8005064:	08005833 	.word	0x08005833
 8005068:	00000000 	.word	0x00000000
 800506c:	08004dbd 	.word	0x08004dbd
 8005070:	0800582f 	.word	0x0800582f

08005074 <_printf_common>:
 8005074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005078:	4616      	mov	r6, r2
 800507a:	4699      	mov	r9, r3
 800507c:	688a      	ldr	r2, [r1, #8]
 800507e:	690b      	ldr	r3, [r1, #16]
 8005080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005084:	4293      	cmp	r3, r2
 8005086:	bfb8      	it	lt
 8005088:	4613      	movlt	r3, r2
 800508a:	6033      	str	r3, [r6, #0]
 800508c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005090:	4607      	mov	r7, r0
 8005092:	460c      	mov	r4, r1
 8005094:	b10a      	cbz	r2, 800509a <_printf_common+0x26>
 8005096:	3301      	adds	r3, #1
 8005098:	6033      	str	r3, [r6, #0]
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	0699      	lsls	r1, r3, #26
 800509e:	bf42      	ittt	mi
 80050a0:	6833      	ldrmi	r3, [r6, #0]
 80050a2:	3302      	addmi	r3, #2
 80050a4:	6033      	strmi	r3, [r6, #0]
 80050a6:	6825      	ldr	r5, [r4, #0]
 80050a8:	f015 0506 	ands.w	r5, r5, #6
 80050ac:	d106      	bne.n	80050bc <_printf_common+0x48>
 80050ae:	f104 0a19 	add.w	sl, r4, #25
 80050b2:	68e3      	ldr	r3, [r4, #12]
 80050b4:	6832      	ldr	r2, [r6, #0]
 80050b6:	1a9b      	subs	r3, r3, r2
 80050b8:	42ab      	cmp	r3, r5
 80050ba:	dc26      	bgt.n	800510a <_printf_common+0x96>
 80050bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050c0:	1e13      	subs	r3, r2, #0
 80050c2:	6822      	ldr	r2, [r4, #0]
 80050c4:	bf18      	it	ne
 80050c6:	2301      	movne	r3, #1
 80050c8:	0692      	lsls	r2, r2, #26
 80050ca:	d42b      	bmi.n	8005124 <_printf_common+0xb0>
 80050cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050d0:	4649      	mov	r1, r9
 80050d2:	4638      	mov	r0, r7
 80050d4:	47c0      	blx	r8
 80050d6:	3001      	adds	r0, #1
 80050d8:	d01e      	beq.n	8005118 <_printf_common+0xa4>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	68e5      	ldr	r5, [r4, #12]
 80050de:	6832      	ldr	r2, [r6, #0]
 80050e0:	f003 0306 	and.w	r3, r3, #6
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	bf08      	it	eq
 80050e8:	1aad      	subeq	r5, r5, r2
 80050ea:	68a3      	ldr	r3, [r4, #8]
 80050ec:	6922      	ldr	r2, [r4, #16]
 80050ee:	bf0c      	ite	eq
 80050f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050f4:	2500      	movne	r5, #0
 80050f6:	4293      	cmp	r3, r2
 80050f8:	bfc4      	itt	gt
 80050fa:	1a9b      	subgt	r3, r3, r2
 80050fc:	18ed      	addgt	r5, r5, r3
 80050fe:	2600      	movs	r6, #0
 8005100:	341a      	adds	r4, #26
 8005102:	42b5      	cmp	r5, r6
 8005104:	d11a      	bne.n	800513c <_printf_common+0xc8>
 8005106:	2000      	movs	r0, #0
 8005108:	e008      	b.n	800511c <_printf_common+0xa8>
 800510a:	2301      	movs	r3, #1
 800510c:	4652      	mov	r2, sl
 800510e:	4649      	mov	r1, r9
 8005110:	4638      	mov	r0, r7
 8005112:	47c0      	blx	r8
 8005114:	3001      	adds	r0, #1
 8005116:	d103      	bne.n	8005120 <_printf_common+0xac>
 8005118:	f04f 30ff 	mov.w	r0, #4294967295
 800511c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005120:	3501      	adds	r5, #1
 8005122:	e7c6      	b.n	80050b2 <_printf_common+0x3e>
 8005124:	18e1      	adds	r1, r4, r3
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	2030      	movs	r0, #48	; 0x30
 800512a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800512e:	4422      	add	r2, r4
 8005130:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005134:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005138:	3302      	adds	r3, #2
 800513a:	e7c7      	b.n	80050cc <_printf_common+0x58>
 800513c:	2301      	movs	r3, #1
 800513e:	4622      	mov	r2, r4
 8005140:	4649      	mov	r1, r9
 8005142:	4638      	mov	r0, r7
 8005144:	47c0      	blx	r8
 8005146:	3001      	adds	r0, #1
 8005148:	d0e6      	beq.n	8005118 <_printf_common+0xa4>
 800514a:	3601      	adds	r6, #1
 800514c:	e7d9      	b.n	8005102 <_printf_common+0x8e>
	...

08005150 <_printf_i>:
 8005150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005154:	7e0f      	ldrb	r7, [r1, #24]
 8005156:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005158:	2f78      	cmp	r7, #120	; 0x78
 800515a:	4691      	mov	r9, r2
 800515c:	4680      	mov	r8, r0
 800515e:	460c      	mov	r4, r1
 8005160:	469a      	mov	sl, r3
 8005162:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005166:	d807      	bhi.n	8005178 <_printf_i+0x28>
 8005168:	2f62      	cmp	r7, #98	; 0x62
 800516a:	d80a      	bhi.n	8005182 <_printf_i+0x32>
 800516c:	2f00      	cmp	r7, #0
 800516e:	f000 80d8 	beq.w	8005322 <_printf_i+0x1d2>
 8005172:	2f58      	cmp	r7, #88	; 0x58
 8005174:	f000 80a3 	beq.w	80052be <_printf_i+0x16e>
 8005178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800517c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005180:	e03a      	b.n	80051f8 <_printf_i+0xa8>
 8005182:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005186:	2b15      	cmp	r3, #21
 8005188:	d8f6      	bhi.n	8005178 <_printf_i+0x28>
 800518a:	a101      	add	r1, pc, #4	; (adr r1, 8005190 <_printf_i+0x40>)
 800518c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005190:	080051e9 	.word	0x080051e9
 8005194:	080051fd 	.word	0x080051fd
 8005198:	08005179 	.word	0x08005179
 800519c:	08005179 	.word	0x08005179
 80051a0:	08005179 	.word	0x08005179
 80051a4:	08005179 	.word	0x08005179
 80051a8:	080051fd 	.word	0x080051fd
 80051ac:	08005179 	.word	0x08005179
 80051b0:	08005179 	.word	0x08005179
 80051b4:	08005179 	.word	0x08005179
 80051b8:	08005179 	.word	0x08005179
 80051bc:	08005309 	.word	0x08005309
 80051c0:	0800522d 	.word	0x0800522d
 80051c4:	080052eb 	.word	0x080052eb
 80051c8:	08005179 	.word	0x08005179
 80051cc:	08005179 	.word	0x08005179
 80051d0:	0800532b 	.word	0x0800532b
 80051d4:	08005179 	.word	0x08005179
 80051d8:	0800522d 	.word	0x0800522d
 80051dc:	08005179 	.word	0x08005179
 80051e0:	08005179 	.word	0x08005179
 80051e4:	080052f3 	.word	0x080052f3
 80051e8:	682b      	ldr	r3, [r5, #0]
 80051ea:	1d1a      	adds	r2, r3, #4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	602a      	str	r2, [r5, #0]
 80051f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051f8:	2301      	movs	r3, #1
 80051fa:	e0a3      	b.n	8005344 <_printf_i+0x1f4>
 80051fc:	6820      	ldr	r0, [r4, #0]
 80051fe:	6829      	ldr	r1, [r5, #0]
 8005200:	0606      	lsls	r6, r0, #24
 8005202:	f101 0304 	add.w	r3, r1, #4
 8005206:	d50a      	bpl.n	800521e <_printf_i+0xce>
 8005208:	680e      	ldr	r6, [r1, #0]
 800520a:	602b      	str	r3, [r5, #0]
 800520c:	2e00      	cmp	r6, #0
 800520e:	da03      	bge.n	8005218 <_printf_i+0xc8>
 8005210:	232d      	movs	r3, #45	; 0x2d
 8005212:	4276      	negs	r6, r6
 8005214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005218:	485e      	ldr	r0, [pc, #376]	; (8005394 <_printf_i+0x244>)
 800521a:	230a      	movs	r3, #10
 800521c:	e019      	b.n	8005252 <_printf_i+0x102>
 800521e:	680e      	ldr	r6, [r1, #0]
 8005220:	602b      	str	r3, [r5, #0]
 8005222:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005226:	bf18      	it	ne
 8005228:	b236      	sxthne	r6, r6
 800522a:	e7ef      	b.n	800520c <_printf_i+0xbc>
 800522c:	682b      	ldr	r3, [r5, #0]
 800522e:	6820      	ldr	r0, [r4, #0]
 8005230:	1d19      	adds	r1, r3, #4
 8005232:	6029      	str	r1, [r5, #0]
 8005234:	0601      	lsls	r1, r0, #24
 8005236:	d501      	bpl.n	800523c <_printf_i+0xec>
 8005238:	681e      	ldr	r6, [r3, #0]
 800523a:	e002      	b.n	8005242 <_printf_i+0xf2>
 800523c:	0646      	lsls	r6, r0, #25
 800523e:	d5fb      	bpl.n	8005238 <_printf_i+0xe8>
 8005240:	881e      	ldrh	r6, [r3, #0]
 8005242:	4854      	ldr	r0, [pc, #336]	; (8005394 <_printf_i+0x244>)
 8005244:	2f6f      	cmp	r7, #111	; 0x6f
 8005246:	bf0c      	ite	eq
 8005248:	2308      	moveq	r3, #8
 800524a:	230a      	movne	r3, #10
 800524c:	2100      	movs	r1, #0
 800524e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005252:	6865      	ldr	r5, [r4, #4]
 8005254:	60a5      	str	r5, [r4, #8]
 8005256:	2d00      	cmp	r5, #0
 8005258:	bfa2      	ittt	ge
 800525a:	6821      	ldrge	r1, [r4, #0]
 800525c:	f021 0104 	bicge.w	r1, r1, #4
 8005260:	6021      	strge	r1, [r4, #0]
 8005262:	b90e      	cbnz	r6, 8005268 <_printf_i+0x118>
 8005264:	2d00      	cmp	r5, #0
 8005266:	d04d      	beq.n	8005304 <_printf_i+0x1b4>
 8005268:	4615      	mov	r5, r2
 800526a:	fbb6 f1f3 	udiv	r1, r6, r3
 800526e:	fb03 6711 	mls	r7, r3, r1, r6
 8005272:	5dc7      	ldrb	r7, [r0, r7]
 8005274:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005278:	4637      	mov	r7, r6
 800527a:	42bb      	cmp	r3, r7
 800527c:	460e      	mov	r6, r1
 800527e:	d9f4      	bls.n	800526a <_printf_i+0x11a>
 8005280:	2b08      	cmp	r3, #8
 8005282:	d10b      	bne.n	800529c <_printf_i+0x14c>
 8005284:	6823      	ldr	r3, [r4, #0]
 8005286:	07de      	lsls	r6, r3, #31
 8005288:	d508      	bpl.n	800529c <_printf_i+0x14c>
 800528a:	6923      	ldr	r3, [r4, #16]
 800528c:	6861      	ldr	r1, [r4, #4]
 800528e:	4299      	cmp	r1, r3
 8005290:	bfde      	ittt	le
 8005292:	2330      	movle	r3, #48	; 0x30
 8005294:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005298:	f105 35ff 	addle.w	r5, r5, #4294967295
 800529c:	1b52      	subs	r2, r2, r5
 800529e:	6122      	str	r2, [r4, #16]
 80052a0:	f8cd a000 	str.w	sl, [sp]
 80052a4:	464b      	mov	r3, r9
 80052a6:	aa03      	add	r2, sp, #12
 80052a8:	4621      	mov	r1, r4
 80052aa:	4640      	mov	r0, r8
 80052ac:	f7ff fee2 	bl	8005074 <_printf_common>
 80052b0:	3001      	adds	r0, #1
 80052b2:	d14c      	bne.n	800534e <_printf_i+0x1fe>
 80052b4:	f04f 30ff 	mov.w	r0, #4294967295
 80052b8:	b004      	add	sp, #16
 80052ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052be:	4835      	ldr	r0, [pc, #212]	; (8005394 <_printf_i+0x244>)
 80052c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80052c4:	6829      	ldr	r1, [r5, #0]
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80052cc:	6029      	str	r1, [r5, #0]
 80052ce:	061d      	lsls	r5, r3, #24
 80052d0:	d514      	bpl.n	80052fc <_printf_i+0x1ac>
 80052d2:	07df      	lsls	r7, r3, #31
 80052d4:	bf44      	itt	mi
 80052d6:	f043 0320 	orrmi.w	r3, r3, #32
 80052da:	6023      	strmi	r3, [r4, #0]
 80052dc:	b91e      	cbnz	r6, 80052e6 <_printf_i+0x196>
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	f023 0320 	bic.w	r3, r3, #32
 80052e4:	6023      	str	r3, [r4, #0]
 80052e6:	2310      	movs	r3, #16
 80052e8:	e7b0      	b.n	800524c <_printf_i+0xfc>
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	f043 0320 	orr.w	r3, r3, #32
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	2378      	movs	r3, #120	; 0x78
 80052f4:	4828      	ldr	r0, [pc, #160]	; (8005398 <_printf_i+0x248>)
 80052f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052fa:	e7e3      	b.n	80052c4 <_printf_i+0x174>
 80052fc:	0659      	lsls	r1, r3, #25
 80052fe:	bf48      	it	mi
 8005300:	b2b6      	uxthmi	r6, r6
 8005302:	e7e6      	b.n	80052d2 <_printf_i+0x182>
 8005304:	4615      	mov	r5, r2
 8005306:	e7bb      	b.n	8005280 <_printf_i+0x130>
 8005308:	682b      	ldr	r3, [r5, #0]
 800530a:	6826      	ldr	r6, [r4, #0]
 800530c:	6961      	ldr	r1, [r4, #20]
 800530e:	1d18      	adds	r0, r3, #4
 8005310:	6028      	str	r0, [r5, #0]
 8005312:	0635      	lsls	r5, r6, #24
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	d501      	bpl.n	800531c <_printf_i+0x1cc>
 8005318:	6019      	str	r1, [r3, #0]
 800531a:	e002      	b.n	8005322 <_printf_i+0x1d2>
 800531c:	0670      	lsls	r0, r6, #25
 800531e:	d5fb      	bpl.n	8005318 <_printf_i+0x1c8>
 8005320:	8019      	strh	r1, [r3, #0]
 8005322:	2300      	movs	r3, #0
 8005324:	6123      	str	r3, [r4, #16]
 8005326:	4615      	mov	r5, r2
 8005328:	e7ba      	b.n	80052a0 <_printf_i+0x150>
 800532a:	682b      	ldr	r3, [r5, #0]
 800532c:	1d1a      	adds	r2, r3, #4
 800532e:	602a      	str	r2, [r5, #0]
 8005330:	681d      	ldr	r5, [r3, #0]
 8005332:	6862      	ldr	r2, [r4, #4]
 8005334:	2100      	movs	r1, #0
 8005336:	4628      	mov	r0, r5
 8005338:	f7fa ff52 	bl	80001e0 <memchr>
 800533c:	b108      	cbz	r0, 8005342 <_printf_i+0x1f2>
 800533e:	1b40      	subs	r0, r0, r5
 8005340:	6060      	str	r0, [r4, #4]
 8005342:	6863      	ldr	r3, [r4, #4]
 8005344:	6123      	str	r3, [r4, #16]
 8005346:	2300      	movs	r3, #0
 8005348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800534c:	e7a8      	b.n	80052a0 <_printf_i+0x150>
 800534e:	6923      	ldr	r3, [r4, #16]
 8005350:	462a      	mov	r2, r5
 8005352:	4649      	mov	r1, r9
 8005354:	4640      	mov	r0, r8
 8005356:	47d0      	blx	sl
 8005358:	3001      	adds	r0, #1
 800535a:	d0ab      	beq.n	80052b4 <_printf_i+0x164>
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	079b      	lsls	r3, r3, #30
 8005360:	d413      	bmi.n	800538a <_printf_i+0x23a>
 8005362:	68e0      	ldr	r0, [r4, #12]
 8005364:	9b03      	ldr	r3, [sp, #12]
 8005366:	4298      	cmp	r0, r3
 8005368:	bfb8      	it	lt
 800536a:	4618      	movlt	r0, r3
 800536c:	e7a4      	b.n	80052b8 <_printf_i+0x168>
 800536e:	2301      	movs	r3, #1
 8005370:	4632      	mov	r2, r6
 8005372:	4649      	mov	r1, r9
 8005374:	4640      	mov	r0, r8
 8005376:	47d0      	blx	sl
 8005378:	3001      	adds	r0, #1
 800537a:	d09b      	beq.n	80052b4 <_printf_i+0x164>
 800537c:	3501      	adds	r5, #1
 800537e:	68e3      	ldr	r3, [r4, #12]
 8005380:	9903      	ldr	r1, [sp, #12]
 8005382:	1a5b      	subs	r3, r3, r1
 8005384:	42ab      	cmp	r3, r5
 8005386:	dcf2      	bgt.n	800536e <_printf_i+0x21e>
 8005388:	e7eb      	b.n	8005362 <_printf_i+0x212>
 800538a:	2500      	movs	r5, #0
 800538c:	f104 0619 	add.w	r6, r4, #25
 8005390:	e7f5      	b.n	800537e <_printf_i+0x22e>
 8005392:	bf00      	nop
 8005394:	0800583a 	.word	0x0800583a
 8005398:	0800584b 	.word	0x0800584b

0800539c <memmove>:
 800539c:	4288      	cmp	r0, r1
 800539e:	b510      	push	{r4, lr}
 80053a0:	eb01 0402 	add.w	r4, r1, r2
 80053a4:	d902      	bls.n	80053ac <memmove+0x10>
 80053a6:	4284      	cmp	r4, r0
 80053a8:	4623      	mov	r3, r4
 80053aa:	d807      	bhi.n	80053bc <memmove+0x20>
 80053ac:	1e43      	subs	r3, r0, #1
 80053ae:	42a1      	cmp	r1, r4
 80053b0:	d008      	beq.n	80053c4 <memmove+0x28>
 80053b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053ba:	e7f8      	b.n	80053ae <memmove+0x12>
 80053bc:	4402      	add	r2, r0
 80053be:	4601      	mov	r1, r0
 80053c0:	428a      	cmp	r2, r1
 80053c2:	d100      	bne.n	80053c6 <memmove+0x2a>
 80053c4:	bd10      	pop	{r4, pc}
 80053c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053ce:	e7f7      	b.n	80053c0 <memmove+0x24>

080053d0 <_free_r>:
 80053d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053d2:	2900      	cmp	r1, #0
 80053d4:	d044      	beq.n	8005460 <_free_r+0x90>
 80053d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053da:	9001      	str	r0, [sp, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f1a1 0404 	sub.w	r4, r1, #4
 80053e2:	bfb8      	it	lt
 80053e4:	18e4      	addlt	r4, r4, r3
 80053e6:	f000 f913 	bl	8005610 <__malloc_lock>
 80053ea:	4a1e      	ldr	r2, [pc, #120]	; (8005464 <_free_r+0x94>)
 80053ec:	9801      	ldr	r0, [sp, #4]
 80053ee:	6813      	ldr	r3, [r2, #0]
 80053f0:	b933      	cbnz	r3, 8005400 <_free_r+0x30>
 80053f2:	6063      	str	r3, [r4, #4]
 80053f4:	6014      	str	r4, [r2, #0]
 80053f6:	b003      	add	sp, #12
 80053f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053fc:	f000 b90e 	b.w	800561c <__malloc_unlock>
 8005400:	42a3      	cmp	r3, r4
 8005402:	d908      	bls.n	8005416 <_free_r+0x46>
 8005404:	6825      	ldr	r5, [r4, #0]
 8005406:	1961      	adds	r1, r4, r5
 8005408:	428b      	cmp	r3, r1
 800540a:	bf01      	itttt	eq
 800540c:	6819      	ldreq	r1, [r3, #0]
 800540e:	685b      	ldreq	r3, [r3, #4]
 8005410:	1949      	addeq	r1, r1, r5
 8005412:	6021      	streq	r1, [r4, #0]
 8005414:	e7ed      	b.n	80053f2 <_free_r+0x22>
 8005416:	461a      	mov	r2, r3
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	b10b      	cbz	r3, 8005420 <_free_r+0x50>
 800541c:	42a3      	cmp	r3, r4
 800541e:	d9fa      	bls.n	8005416 <_free_r+0x46>
 8005420:	6811      	ldr	r1, [r2, #0]
 8005422:	1855      	adds	r5, r2, r1
 8005424:	42a5      	cmp	r5, r4
 8005426:	d10b      	bne.n	8005440 <_free_r+0x70>
 8005428:	6824      	ldr	r4, [r4, #0]
 800542a:	4421      	add	r1, r4
 800542c:	1854      	adds	r4, r2, r1
 800542e:	42a3      	cmp	r3, r4
 8005430:	6011      	str	r1, [r2, #0]
 8005432:	d1e0      	bne.n	80053f6 <_free_r+0x26>
 8005434:	681c      	ldr	r4, [r3, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	6053      	str	r3, [r2, #4]
 800543a:	4421      	add	r1, r4
 800543c:	6011      	str	r1, [r2, #0]
 800543e:	e7da      	b.n	80053f6 <_free_r+0x26>
 8005440:	d902      	bls.n	8005448 <_free_r+0x78>
 8005442:	230c      	movs	r3, #12
 8005444:	6003      	str	r3, [r0, #0]
 8005446:	e7d6      	b.n	80053f6 <_free_r+0x26>
 8005448:	6825      	ldr	r5, [r4, #0]
 800544a:	1961      	adds	r1, r4, r5
 800544c:	428b      	cmp	r3, r1
 800544e:	bf04      	itt	eq
 8005450:	6819      	ldreq	r1, [r3, #0]
 8005452:	685b      	ldreq	r3, [r3, #4]
 8005454:	6063      	str	r3, [r4, #4]
 8005456:	bf04      	itt	eq
 8005458:	1949      	addeq	r1, r1, r5
 800545a:	6021      	streq	r1, [r4, #0]
 800545c:	6054      	str	r4, [r2, #4]
 800545e:	e7ca      	b.n	80053f6 <_free_r+0x26>
 8005460:	b003      	add	sp, #12
 8005462:	bd30      	pop	{r4, r5, pc}
 8005464:	200136fc 	.word	0x200136fc

08005468 <sbrk_aligned>:
 8005468:	b570      	push	{r4, r5, r6, lr}
 800546a:	4e0e      	ldr	r6, [pc, #56]	; (80054a4 <sbrk_aligned+0x3c>)
 800546c:	460c      	mov	r4, r1
 800546e:	6831      	ldr	r1, [r6, #0]
 8005470:	4605      	mov	r5, r0
 8005472:	b911      	cbnz	r1, 800547a <sbrk_aligned+0x12>
 8005474:	f000 f8bc 	bl	80055f0 <_sbrk_r>
 8005478:	6030      	str	r0, [r6, #0]
 800547a:	4621      	mov	r1, r4
 800547c:	4628      	mov	r0, r5
 800547e:	f000 f8b7 	bl	80055f0 <_sbrk_r>
 8005482:	1c43      	adds	r3, r0, #1
 8005484:	d00a      	beq.n	800549c <sbrk_aligned+0x34>
 8005486:	1cc4      	adds	r4, r0, #3
 8005488:	f024 0403 	bic.w	r4, r4, #3
 800548c:	42a0      	cmp	r0, r4
 800548e:	d007      	beq.n	80054a0 <sbrk_aligned+0x38>
 8005490:	1a21      	subs	r1, r4, r0
 8005492:	4628      	mov	r0, r5
 8005494:	f000 f8ac 	bl	80055f0 <_sbrk_r>
 8005498:	3001      	adds	r0, #1
 800549a:	d101      	bne.n	80054a0 <sbrk_aligned+0x38>
 800549c:	f04f 34ff 	mov.w	r4, #4294967295
 80054a0:	4620      	mov	r0, r4
 80054a2:	bd70      	pop	{r4, r5, r6, pc}
 80054a4:	20013700 	.word	0x20013700

080054a8 <_malloc_r>:
 80054a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ac:	1ccd      	adds	r5, r1, #3
 80054ae:	f025 0503 	bic.w	r5, r5, #3
 80054b2:	3508      	adds	r5, #8
 80054b4:	2d0c      	cmp	r5, #12
 80054b6:	bf38      	it	cc
 80054b8:	250c      	movcc	r5, #12
 80054ba:	2d00      	cmp	r5, #0
 80054bc:	4607      	mov	r7, r0
 80054be:	db01      	blt.n	80054c4 <_malloc_r+0x1c>
 80054c0:	42a9      	cmp	r1, r5
 80054c2:	d905      	bls.n	80054d0 <_malloc_r+0x28>
 80054c4:	230c      	movs	r3, #12
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	2600      	movs	r6, #0
 80054ca:	4630      	mov	r0, r6
 80054cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054d0:	4e2e      	ldr	r6, [pc, #184]	; (800558c <_malloc_r+0xe4>)
 80054d2:	f000 f89d 	bl	8005610 <__malloc_lock>
 80054d6:	6833      	ldr	r3, [r6, #0]
 80054d8:	461c      	mov	r4, r3
 80054da:	bb34      	cbnz	r4, 800552a <_malloc_r+0x82>
 80054dc:	4629      	mov	r1, r5
 80054de:	4638      	mov	r0, r7
 80054e0:	f7ff ffc2 	bl	8005468 <sbrk_aligned>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	4604      	mov	r4, r0
 80054e8:	d14d      	bne.n	8005586 <_malloc_r+0xde>
 80054ea:	6834      	ldr	r4, [r6, #0]
 80054ec:	4626      	mov	r6, r4
 80054ee:	2e00      	cmp	r6, #0
 80054f0:	d140      	bne.n	8005574 <_malloc_r+0xcc>
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	4631      	mov	r1, r6
 80054f6:	4638      	mov	r0, r7
 80054f8:	eb04 0803 	add.w	r8, r4, r3
 80054fc:	f000 f878 	bl	80055f0 <_sbrk_r>
 8005500:	4580      	cmp	r8, r0
 8005502:	d13a      	bne.n	800557a <_malloc_r+0xd2>
 8005504:	6821      	ldr	r1, [r4, #0]
 8005506:	3503      	adds	r5, #3
 8005508:	1a6d      	subs	r5, r5, r1
 800550a:	f025 0503 	bic.w	r5, r5, #3
 800550e:	3508      	adds	r5, #8
 8005510:	2d0c      	cmp	r5, #12
 8005512:	bf38      	it	cc
 8005514:	250c      	movcc	r5, #12
 8005516:	4629      	mov	r1, r5
 8005518:	4638      	mov	r0, r7
 800551a:	f7ff ffa5 	bl	8005468 <sbrk_aligned>
 800551e:	3001      	adds	r0, #1
 8005520:	d02b      	beq.n	800557a <_malloc_r+0xd2>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	442b      	add	r3, r5
 8005526:	6023      	str	r3, [r4, #0]
 8005528:	e00e      	b.n	8005548 <_malloc_r+0xa0>
 800552a:	6822      	ldr	r2, [r4, #0]
 800552c:	1b52      	subs	r2, r2, r5
 800552e:	d41e      	bmi.n	800556e <_malloc_r+0xc6>
 8005530:	2a0b      	cmp	r2, #11
 8005532:	d916      	bls.n	8005562 <_malloc_r+0xba>
 8005534:	1961      	adds	r1, r4, r5
 8005536:	42a3      	cmp	r3, r4
 8005538:	6025      	str	r5, [r4, #0]
 800553a:	bf18      	it	ne
 800553c:	6059      	strne	r1, [r3, #4]
 800553e:	6863      	ldr	r3, [r4, #4]
 8005540:	bf08      	it	eq
 8005542:	6031      	streq	r1, [r6, #0]
 8005544:	5162      	str	r2, [r4, r5]
 8005546:	604b      	str	r3, [r1, #4]
 8005548:	4638      	mov	r0, r7
 800554a:	f104 060b 	add.w	r6, r4, #11
 800554e:	f000 f865 	bl	800561c <__malloc_unlock>
 8005552:	f026 0607 	bic.w	r6, r6, #7
 8005556:	1d23      	adds	r3, r4, #4
 8005558:	1af2      	subs	r2, r6, r3
 800555a:	d0b6      	beq.n	80054ca <_malloc_r+0x22>
 800555c:	1b9b      	subs	r3, r3, r6
 800555e:	50a3      	str	r3, [r4, r2]
 8005560:	e7b3      	b.n	80054ca <_malloc_r+0x22>
 8005562:	6862      	ldr	r2, [r4, #4]
 8005564:	42a3      	cmp	r3, r4
 8005566:	bf0c      	ite	eq
 8005568:	6032      	streq	r2, [r6, #0]
 800556a:	605a      	strne	r2, [r3, #4]
 800556c:	e7ec      	b.n	8005548 <_malloc_r+0xa0>
 800556e:	4623      	mov	r3, r4
 8005570:	6864      	ldr	r4, [r4, #4]
 8005572:	e7b2      	b.n	80054da <_malloc_r+0x32>
 8005574:	4634      	mov	r4, r6
 8005576:	6876      	ldr	r6, [r6, #4]
 8005578:	e7b9      	b.n	80054ee <_malloc_r+0x46>
 800557a:	230c      	movs	r3, #12
 800557c:	603b      	str	r3, [r7, #0]
 800557e:	4638      	mov	r0, r7
 8005580:	f000 f84c 	bl	800561c <__malloc_unlock>
 8005584:	e7a1      	b.n	80054ca <_malloc_r+0x22>
 8005586:	6025      	str	r5, [r4, #0]
 8005588:	e7de      	b.n	8005548 <_malloc_r+0xa0>
 800558a:	bf00      	nop
 800558c:	200136fc 	.word	0x200136fc

08005590 <_realloc_r>:
 8005590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005594:	4680      	mov	r8, r0
 8005596:	4614      	mov	r4, r2
 8005598:	460e      	mov	r6, r1
 800559a:	b921      	cbnz	r1, 80055a6 <_realloc_r+0x16>
 800559c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055a0:	4611      	mov	r1, r2
 80055a2:	f7ff bf81 	b.w	80054a8 <_malloc_r>
 80055a6:	b92a      	cbnz	r2, 80055b4 <_realloc_r+0x24>
 80055a8:	f7ff ff12 	bl	80053d0 <_free_r>
 80055ac:	4625      	mov	r5, r4
 80055ae:	4628      	mov	r0, r5
 80055b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055b4:	f000 f838 	bl	8005628 <_malloc_usable_size_r>
 80055b8:	4284      	cmp	r4, r0
 80055ba:	4607      	mov	r7, r0
 80055bc:	d802      	bhi.n	80055c4 <_realloc_r+0x34>
 80055be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80055c2:	d812      	bhi.n	80055ea <_realloc_r+0x5a>
 80055c4:	4621      	mov	r1, r4
 80055c6:	4640      	mov	r0, r8
 80055c8:	f7ff ff6e 	bl	80054a8 <_malloc_r>
 80055cc:	4605      	mov	r5, r0
 80055ce:	2800      	cmp	r0, #0
 80055d0:	d0ed      	beq.n	80055ae <_realloc_r+0x1e>
 80055d2:	42bc      	cmp	r4, r7
 80055d4:	4622      	mov	r2, r4
 80055d6:	4631      	mov	r1, r6
 80055d8:	bf28      	it	cs
 80055da:	463a      	movcs	r2, r7
 80055dc:	f7ff fbb8 	bl	8004d50 <memcpy>
 80055e0:	4631      	mov	r1, r6
 80055e2:	4640      	mov	r0, r8
 80055e4:	f7ff fef4 	bl	80053d0 <_free_r>
 80055e8:	e7e1      	b.n	80055ae <_realloc_r+0x1e>
 80055ea:	4635      	mov	r5, r6
 80055ec:	e7df      	b.n	80055ae <_realloc_r+0x1e>
	...

080055f0 <_sbrk_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	4d06      	ldr	r5, [pc, #24]	; (800560c <_sbrk_r+0x1c>)
 80055f4:	2300      	movs	r3, #0
 80055f6:	4604      	mov	r4, r0
 80055f8:	4608      	mov	r0, r1
 80055fa:	602b      	str	r3, [r5, #0]
 80055fc:	f000 f81e 	bl	800563c <_sbrk>
 8005600:	1c43      	adds	r3, r0, #1
 8005602:	d102      	bne.n	800560a <_sbrk_r+0x1a>
 8005604:	682b      	ldr	r3, [r5, #0]
 8005606:	b103      	cbz	r3, 800560a <_sbrk_r+0x1a>
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	bd38      	pop	{r3, r4, r5, pc}
 800560c:	20013704 	.word	0x20013704

08005610 <__malloc_lock>:
 8005610:	4801      	ldr	r0, [pc, #4]	; (8005618 <__malloc_lock+0x8>)
 8005612:	f000 b811 	b.w	8005638 <__retarget_lock_acquire_recursive>
 8005616:	bf00      	nop
 8005618:	20013708 	.word	0x20013708

0800561c <__malloc_unlock>:
 800561c:	4801      	ldr	r0, [pc, #4]	; (8005624 <__malloc_unlock+0x8>)
 800561e:	f000 b80c 	b.w	800563a <__retarget_lock_release_recursive>
 8005622:	bf00      	nop
 8005624:	20013708 	.word	0x20013708

08005628 <_malloc_usable_size_r>:
 8005628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800562c:	1f18      	subs	r0, r3, #4
 800562e:	2b00      	cmp	r3, #0
 8005630:	bfbc      	itt	lt
 8005632:	580b      	ldrlt	r3, [r1, r0]
 8005634:	18c0      	addlt	r0, r0, r3
 8005636:	4770      	bx	lr

08005638 <__retarget_lock_acquire_recursive>:
 8005638:	4770      	bx	lr

0800563a <__retarget_lock_release_recursive>:
 800563a:	4770      	bx	lr

0800563c <_sbrk>:
 800563c:	4a04      	ldr	r2, [pc, #16]	; (8005650 <_sbrk+0x14>)
 800563e:	6811      	ldr	r1, [r2, #0]
 8005640:	4603      	mov	r3, r0
 8005642:	b909      	cbnz	r1, 8005648 <_sbrk+0xc>
 8005644:	4903      	ldr	r1, [pc, #12]	; (8005654 <_sbrk+0x18>)
 8005646:	6011      	str	r1, [r2, #0]
 8005648:	6810      	ldr	r0, [r2, #0]
 800564a:	4403      	add	r3, r0
 800564c:	6013      	str	r3, [r2, #0]
 800564e:	4770      	bx	lr
 8005650:	2001370c 	.word	0x2001370c
 8005654:	20013710 	.word	0x20013710

08005658 <_init>:
 8005658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565a:	bf00      	nop
 800565c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800565e:	bc08      	pop	{r3}
 8005660:	469e      	mov	lr, r3
 8005662:	4770      	bx	lr

08005664 <_fini>:
 8005664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005666:	bf00      	nop
 8005668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800566a:	bc08      	pop	{r3}
 800566c:	469e      	mov	lr, r3
 800566e:	4770      	bx	lr
