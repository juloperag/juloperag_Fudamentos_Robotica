
Ejemplo_Led_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007248  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080073e8  080073e8  000173e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007520  08007520  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08007520  08007520  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007520  08007520  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007520  08007520  00017520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007524  08007524  00017524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014478  20000014  0800753c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001448c  0800753c  0002448c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d569  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d6  00000000  00000000  0002d5ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  0002f688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  00030248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001202a  00000000  00000000  00030cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e24d  00000000  00000000  00042d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063e38  00000000  00000000  00050f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b4d9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fec  00000000  00000000  000b4df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080073d0 	.word	0x080073d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	080073d0 	.word	0x080073d0

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012eb8 	.word	0x20012eb8

08000274 <main>:
TaskHandle_t xHandleTask_Button = NULL;
//Variable para comprobar la creacion de la tarea
BaseType_t xReturned;

int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af02      	add	r7, sp, #8
	//Incrementamos la velocidad de reloj del sistema
	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 800027a:	2364      	movs	r3, #100	; 0x64
 800027c:	71fb      	strb	r3, [r7, #7]
	configPLL(clock);
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	4618      	mov	r0, r3
 8000282:	f006 ff61 	bl	8007148 <configPLL>
	//Configuracion inicial del sistema
	initSystem();
 8000286:	f000 f84d 	bl	8000324 <initSystem>
	//Definimos la configuracion inicail del MCO1
	int_MCO2();
 800028a:	f000 f897 	bl	80003bc <int_MCO2>
	//Activamos la unidad de punto flotante (FPU)
	SCB->CPACR    |= (0xF << 20);
 800028e:	4b1c      	ldr	r3, [pc, #112]	; (8000300 <main+0x8c>)
 8000290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000294:	4a1a      	ldr	r2, [pc, #104]	; (8000300 <main+0x8c>)
 8000296:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800029a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Activamos del contador de Ticks
	DWT->CTRL    |= (1 << 0);
 800029e:	4b19      	ldr	r3, [pc, #100]	; (8000304 <main+0x90>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a18      	ldr	r2, [pc, #96]	; (8000304 <main+0x90>)
 80002a4:	f043 0301 	orr.w	r3, r3, #1
 80002a8:	6013      	str	r3, [r2, #0]


	//---------------------Inicio de uso de funciones para el funcionamiento del SEGGER----------------------
	//Necesaria para el SEGGER
	vInitPrioGroupValue();
 80002aa:	f002 fbd5 	bl	8002a58 <vInitPrioGroupValue>
	//Configuramos el puerto Serial para trabajar  con el SEGGER
	SEGGER_UART_init(500000);
 80002ae:	4816      	ldr	r0, [pc, #88]	; (8000308 <main+0x94>)
 80002b0:	f003 f95e 	bl	8003570 <SEGGER_UART_init>
	/* Primero configuramos */
	SEGGER_SYSVIEW_Conf();
 80002b4:	f002 ff86 	bl	80031c4 <SEGGER_SYSVIEW_Conf>


	//-----------------------Inicio cofiguracion de los elemntos del kernel de FreeRTOS----------------------

	//-------------------Configuracion tarea 1--------------
	xReturned = xTaskCreate(
 80002b8:	4b14      	ldr	r3, [pc, #80]	; (800030c <main+0x98>)
 80002ba:	9301      	str	r3, [sp, #4]
 80002bc:	2303      	movs	r3, #3
 80002be:	9300      	str	r3, [sp, #0]
 80002c0:	4b13      	ldr	r3, [pc, #76]	; (8000310 <main+0x9c>)
 80002c2:	22c8      	movs	r2, #200	; 0xc8
 80002c4:	4913      	ldr	r1, [pc, #76]	; (8000314 <main+0xa0>)
 80002c6:	4814      	ldr	r0, [pc, #80]	; (8000318 <main+0xa4>)
 80002c8:	f000 ff20 	bl	800110c <xTaskCreate>
 80002cc:	4603      	mov	r3, r0
 80002ce:	4a13      	ldr	r2, [pc, #76]	; (800031c <main+0xa8>)
 80002d0:	6013      	str	r3, [r2, #0]
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						"Blinky_Led",    /* Parameter passed into the task. */
	                    3,/* Priority at which the task is created. */
	                    &xHandleTask_Led);      /* Used to pass out the created task's handle. */

	configASSERT(xReturned == pdPASS);
 80002d2:	4b12      	ldr	r3, [pc, #72]	; (800031c <main+0xa8>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d00a      	beq.n	80002f0 <main+0x7c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002de:	f383 8811 	msr	BASEPRI, r3
 80002e2:	f3bf 8f6f 	isb	sy
 80002e6:	f3bf 8f4f 	dsb	sy
 80002ea:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002ec:	bf00      	nop
 80002ee:	e7fe      	b.n	80002ee <main+0x7a>
//	                    &xHandleTask_Button);      /* Used to pass out the created task's handle. */
//
//	configASSERT(xReturned == pdPASS);

	//-------------------Inicializacion Scheduler--------------
	SEGGER_SYSVIEW_PrintfTarget("Starting the scheduler");
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <main+0xac>)
 80002f2:	f005 fbab 	bl	8005a4c <SEGGER_SYSVIEW_PrintfTarget>
	//Inicia le Scheduler a funcionar
	vTaskStartScheduler();
 80002f6:	f001 f86d 	bl	80013d4 <vTaskStartScheduler>
	//-----------------------Fin cofiguracion de los elemntos del kernel de FreeRTOS----------------------

	//Si el scheduler se inicia correctamente no se ejecutada este while
	while(1)
	{
		__NOP();
 80002fa:	bf00      	nop
 80002fc:	e7fd      	b.n	80002fa <main+0x86>
 80002fe:	bf00      	nop
 8000300:	e000ed00 	.word	0xe000ed00
 8000304:	e0001000 	.word	0xe0001000
 8000308:	0007a120 	.word	0x0007a120
 800030c:	2000005c 	.word	0x2000005c
 8000310:	080073e8 	.word	0x080073e8
 8000314:	080073f4 	.word	0x080073f4
 8000318:	08000429 	.word	0x08000429
 800031c:	20000060 	.word	0x20000060
 8000320:	08007400 	.word	0x08007400

08000324 <initSystem>:
}


//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void initSystem(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af02      	add	r7, sp, #8
	//---------------------------------Inicio de Configuracion GPIOx---------------------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_BlinkyPin.pGPIOx = GPIOA;
 800032a:	4b1e      	ldr	r3, [pc, #120]	; (80003a4 <initSystem+0x80>)
 800032c:	4a1e      	ldr	r2, [pc, #120]	; (80003a8 <initSystem+0x84>)
 800032e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 8000330:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <initSystem+0x80>)
 8000332:	2205      	movs	r2, #5
 8000334:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8000336:	2300      	movs	r3, #0
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2300      	movs	r3, #0
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	2301      	movs	r3, #1
 8000340:	2200      	movs	r2, #0
 8000342:	2101      	movs	r1, #1
 8000344:	4817      	ldr	r0, [pc, #92]	; (80003a4 <initSystem+0x80>)
 8000346:	f006 fd71 	bl	8006e2c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_BlinkyPin);
 800034a:	4816      	ldr	r0, [pc, #88]	; (80003a4 <initSystem+0x80>)
 800034c:	f006 fd90 	bl	8006e70 <GPIO_Config>

	//-------------------------PIN_MCO2--------------------------------
	//---------------PIN: PC9----------------
	//------------AF0: MCO_2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MCO2.pGPIOx = GPIOC;
 8000350:	4b16      	ldr	r3, [pc, #88]	; (80003ac <initSystem+0x88>)
 8000352:	4a17      	ldr	r2, [pc, #92]	; (80003b0 <initSystem+0x8c>)
 8000354:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MCO2.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 8000356:	4b15      	ldr	r3, [pc, #84]	; (80003ac <initSystem+0x88>)
 8000358:	2209      	movs	r2, #9
 800035a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MCO2, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800035c:	2300      	movs	r3, #0
 800035e:	9301      	str	r3, [sp, #4]
 8000360:	2300      	movs	r3, #0
 8000362:	9300      	str	r3, [sp, #0]
 8000364:	2301      	movs	r3, #1
 8000366:	2200      	movs	r2, #0
 8000368:	2102      	movs	r1, #2
 800036a:	4810      	ldr	r0, [pc, #64]	; (80003ac <initSystem+0x88>)
 800036c:	f006 fd5e 	bl	8006e2c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MCO2);
 8000370:	480e      	ldr	r0, [pc, #56]	; (80003ac <initSystem+0x88>)
 8000372:	f006 fd7d 	bl	8006e70 <GPIO_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC13----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_Button.pGPIOx = GPIOC;
 8000376:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <initSystem+0x90>)
 8000378:	4a0d      	ldr	r2, [pc, #52]	; (80003b0 <initSystem+0x8c>)
 800037a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_Button.GPIO_PinConfig.GPIO_PinNumber = PIN_13;
 800037c:	4b0d      	ldr	r3, [pc, #52]	; (80003b4 <initSystem+0x90>)
 800037e:	220d      	movs	r2, #13
 8000380:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	handler_EXTI_Button.pGPIOHandler = &handler_GPIO_Button;
 8000382:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <initSystem+0x94>)
 8000384:	4a0b      	ldr	r2, [pc, #44]	; (80003b4 <initSystem+0x90>)
 8000386:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	handler_EXTI_Button.edgeType = EXTERNAL_INTERRUPP_RISING_EDGE;
 8000388:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <initSystem+0x94>)
 800038a:	2201      	movs	r2, #1
 800038c:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	exti_Config_Int_Priority(&handler_EXTI_Button, e_EXTI_PRIOPITY_6);
 800038e:	2106      	movs	r1, #6
 8000390:	4809      	ldr	r0, [pc, #36]	; (80003b8 <initSystem+0x94>)
 8000392:	f006 fb4f 	bl	8006a34 <exti_Config_Int_Priority>
	extInt_Config(&handler_EXTI_Button);
 8000396:	4808      	ldr	r0, [pc, #32]	; (80003b8 <initSystem+0x94>)
 8000398:	f005 fc3e 	bl	8005c18 <extInt_Config>

	//-------------------Fin de Configuracion EXTIx-----------------------

}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20000030 	.word	0x20000030
 80003a8:	40020000 	.word	0x40020000
 80003ac:	2000003c 	.word	0x2000003c
 80003b0:	40020800 	.word	0x40020800
 80003b4:	20000048 	.word	0x20000048
 80003b8:	20000054 	.word	0x20000054

080003bc <int_MCO2>:

//-----------------------------Inicio configuracion MCO1------------------------------------------

//Funcion para la configuracion inicial del MCO1
void int_MCO2(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	//Configuracion inicial del MCO2
	configMCO2(0);
 80003c0:	2000      	movs	r0, #0
 80003c2:	f006 ff3f 	bl	8007244 <configMCO2>
	configMCO2PRE(4);
 80003c6:	2004      	movs	r0, #4
 80003c8:	f006 ff58 	bl	800727c <configMCO2PRE>
}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <callback_extInt13>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------UserButton--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el EXTI13
void callback_extInt13(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af02      	add	r7, sp, #8
	//Se define variable para verificar si una tarea de mayor proridad esta lista para Running
	BaseType_t pxHigherPriorityTaskWoken;
	pxHigherPriorityTaskWoken = pdFALSE;
 80003d6:	2300      	movs	r3, #0
 80003d8:	607b      	str	r3, [r7, #4]

	//Reconocimeinto de la interrupcion por parte del SEGGER
	traceISR_ENTER();
 80003da:	f005 f88f 	bl	80054fc <SEGGER_SYSVIEW_RecordEnterISR>
	//Notificamos a la funcion del LED;
	xTaskNotifyFromISR(xHandleTask_Led, 0, eNoAction, &pxHigherPriorityTaskWoken);
 80003de:	4b10      	ldr	r3, [pc, #64]	; (8000420 <callback_extInt13+0x50>)
 80003e0:	6818      	ldr	r0, [r3, #0]
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	9301      	str	r3, [sp, #4]
 80003e6:	2300      	movs	r3, #0
 80003e8:	9300      	str	r3, [sp, #0]
 80003ea:	2300      	movs	r3, #0
 80003ec:	2200      	movs	r2, #0
 80003ee:	2100      	movs	r1, #0
 80003f0:	f001 fd60 	bl	8001eb4 <xTaskGenericNotifyFromISR>
	//Realizamos un cambio de Contexto
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d00a      	beq.n	8000410 <callback_extInt13+0x40>
 80003fa:	f005 f8dd 	bl	80055b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 80003fe:	4b09      	ldr	r3, [pc, #36]	; (8000424 <callback_extInt13+0x54>)
 8000400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	f3bf 8f4f 	dsb	sy
 800040a:	f3bf 8f6f 	isb	sy
 800040e:	e001      	b.n	8000414 <callback_extInt13+0x44>
 8000410:	f005 f8b6 	bl	8005580 <SEGGER_SYSVIEW_RecordExitISR>
	//Salimos del reconicimento de la interrupcion
	traceISR_EXIT();
 8000414:	f005 f8b4 	bl	8005580 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000418:	bf00      	nop
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	2000005c 	.word	0x2000005c
 8000424:	e000ed04 	.word	0xe000ed04

08000428 <vTask_Led_Handler>:

//------------------------------Inicio definicion de las funciones de las Taks-----------------------------------------

//Funcion que gobierna la Task SL
void vTask_Led_Handler( void * pvParameters )
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af02      	add	r7, sp, #8
 800042e:	6078      	str	r0, [r7, #4]
	//Definicion de variables
	 BaseType_t notify_status = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	60bb      	str	r3, [r7, #8]
	 uint8_t change_led = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		//Deacuerdo al valor de la variable se cambia el valor del pin del LED
		if(change_led)
 8000438:	7bfb      	ldrb	r3, [r7, #15]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d006      	beq.n	800044c <vTask_Led_Handler+0x24>
		{
			//Envio mensaje por SEGGER_SYSVIEM
			SEGGER_SYSVIEW_PrintfTarget("Blinky");
 800043e:	4814      	ldr	r0, [pc, #80]	; (8000490 <vTask_Led_Handler+0x68>)
 8000440:	f005 fb04 	bl	8005a4c <SEGGER_SYSVIEW_PrintfTarget>
			//Cambio estado opuesto Led
			GPIOxTooglePin(&handler_GPIO_BlinkyPin);
 8000444:	4813      	ldr	r0, [pc, #76]	; (8000494 <vTask_Led_Handler+0x6c>)
 8000446:	f006 fe68 	bl	800711a <GPIOxTooglePin>
 800044a:	e006      	b.n	800045a <vTask_Led_Handler+0x32>
		}
		else
		{
			//Envio mensaje por SEGGER_SYSVIEM
			SEGGER_SYSVIEW_PrintfTarget("Stop");
 800044c:	4812      	ldr	r0, [pc, #72]	; (8000498 <vTask_Led_Handler+0x70>)
 800044e:	f005 fafd 	bl	8005a4c <SEGGER_SYSVIEW_PrintfTarget>
			//Cambio estado opuesto Led
			GPIO_writePin(&handler_GPIO_BlinkyPin, RESET);
 8000452:	2100      	movs	r1, #0
 8000454:	480f      	ldr	r0, [pc, #60]	; (8000494 <vTask_Led_Handler+0x6c>)
 8000456:	f006 fe35 	bl	80070c4 <GPIO_writePin>

		}


		//Recepccion de notificacion, la tarea entra en estado de bloqueo esperando por una notificacion
		notify_status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(250));
 800045a:	23fa      	movs	r3, #250	; 0xfa
 800045c:	9300      	str	r3, [sp, #0]
 800045e:	2300      	movs	r3, #0
 8000460:	2200      	movs	r2, #0
 8000462:	2100      	movs	r1, #0
 8000464:	2000      	movs	r0, #0
 8000466:	f001 fc9d 	bl	8001da4 <xTaskGenericNotifyWait>
 800046a:	60b8      	str	r0, [r7, #8]

		//Deacuerdo el estado se cambia el valor de la variable
		if(notify_status == pdTRUE)
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d10b      	bne.n	800048a <vTask_Led_Handler+0x62>
		{
			//Desactivar las interrupciones por un periodo corto de tiempo
			portENTER_CRITICAL();
 8000472:	f002 fb6f 	bl	8002b54 <vPortEnterCritical>
			//Cambia de valor
			change_led = !change_led;
 8000476:	7bfb      	ldrb	r3, [r7, #15]
 8000478:	2b00      	cmp	r3, #0
 800047a:	bf0c      	ite	eq
 800047c:	2301      	moveq	r3, #1
 800047e:	2300      	movne	r3, #0
 8000480:	b2db      	uxtb	r3, r3
 8000482:	73fb      	strb	r3, [r7, #15]
			//Se vuelven activar
			portEXIT_CRITICAL();
 8000484:	f002 fb96 	bl	8002bb4 <vPortExitCritical>
 8000488:	e7d6      	b.n	8000438 <vTask_Led_Handler+0x10>
		}
		else
		{
			__NOP();
 800048a:	bf00      	nop
		if(change_led)
 800048c:	e7d4      	b.n	8000438 <vTask_Led_Handler+0x10>
 800048e:	bf00      	nop
 8000490:	08007418 	.word	0x08007418
 8000494:	20000030 	.word	0x20000030
 8000498:	08007420 	.word	0x08007420

0800049c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800049c:	480d      	ldr	r0, [pc, #52]	; (80004d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800049e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a4:	480c      	ldr	r0, [pc, #48]	; (80004d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80004a6:	490d      	ldr	r1, [pc, #52]	; (80004dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80004a8:	4a0d      	ldr	r2, [pc, #52]	; (80004e0 <LoopForever+0xe>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ac:	e002      	b.n	80004b4 <LoopCopyDataInit>

080004ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004b2:	3304      	adds	r3, #4

080004b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b8:	d3f9      	bcc.n	80004ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ba:	4a0a      	ldr	r2, [pc, #40]	; (80004e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004bc:	4c0a      	ldr	r4, [pc, #40]	; (80004e8 <LoopForever+0x16>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c0:	e001      	b.n	80004c6 <LoopFillZerobss>

080004c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c4:	3204      	adds	r2, #4

080004c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c8:	d3fb      	bcc.n	80004c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ca:	f006 ff37 	bl	800733c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ce:	f7ff fed1 	bl	8000274 <main>

080004d2 <LoopForever>:

LoopForever:
    b LoopForever
 80004d2:	e7fe      	b.n	80004d2 <LoopForever>
  ldr   r0, =_estack
 80004d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004dc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80004e0:	08007528 	.word	0x08007528
  ldr r2, =_sbss
 80004e4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80004e8:	2001448c 	.word	0x2001448c

080004ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004ec:	e7fe      	b.n	80004ec <ADC_IRQHandler>

080004ee <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f103 0208 	add.w	r2, r3, #8
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f04f 32ff 	mov.w	r2, #4294967295
 8000506:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f103 0208 	add.w	r2, r3, #8
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f103 0208 	add.w	r2, r3, #8
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800052e:	b480      	push	{r7}
 8000530:	b083      	sub	sp, #12
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	68fa      	ldr	r2, [r7, #12]
 800055c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	689a      	ldr	r2, [r3, #8]
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	683a      	ldr	r2, [r7, #0]
 800056c:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	683a      	ldr	r2, [r7, #0]
 8000572:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	1c5a      	adds	r2, r3, #1
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	601a      	str	r2, [r3, #0]
}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005a6:	d103      	bne.n	80005b0 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	691b      	ldr	r3, [r3, #16]
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	e00c      	b.n	80005ca <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3308      	adds	r3, #8
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	e002      	b.n	80005be <vListInsert+0x2e>
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	68ba      	ldr	r2, [r7, #8]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d2f6      	bcs.n	80005b8 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	685a      	ldr	r2, [r3, #4]
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	683a      	ldr	r2, [r7, #0]
 80005d8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	683a      	ldr	r2, [r7, #0]
 80005e4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	1c5a      	adds	r2, r3, #1
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	601a      	str	r2, [r3, #0]
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000602:	b480      	push	{r7}
 8000604:	b085      	sub	sp, #20
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	691b      	ldr	r3, [r3, #16]
 800060e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	6892      	ldr	r2, [r2, #8]
 8000618:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	6852      	ldr	r2, [r2, #4]
 8000622:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	429a      	cmp	r2, r3
 800062c:	d103      	bne.n	8000636 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	689a      	ldr	r2, [r3, #8]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	1e5a      	subs	r2, r3, #1
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	681b      	ldr	r3, [r3, #0]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
	...

08000658 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d10a      	bne.n	8000682 <xQueueGenericReset+0x2a>
        __asm volatile
 800066c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000670:	f383 8811 	msr	BASEPRI, r3
 8000674:	f3bf 8f6f 	isb	sy
 8000678:	f3bf 8f4f 	dsb	sy
 800067c:	60bb      	str	r3, [r7, #8]
    }
 800067e:	bf00      	nop
 8000680:	e7fe      	b.n	8000680 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8000682:	f002 fa67 	bl	8002b54 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800068e:	68f9      	ldr	r1, [r7, #12]
 8000690:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000692:	fb01 f303 	mul.w	r3, r1, r3
 8000696:	441a      	add	r2, r3
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	2200      	movs	r2, #0
 80006a0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006b2:	3b01      	subs	r3, #1
 80006b4:	68f9      	ldr	r1, [r7, #12]
 80006b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80006b8:	fb01 f303 	mul.w	r3, r1, r3
 80006bc:	441a      	add	r2, r3
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	22ff      	movs	r2, #255	; 0xff
 80006c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	22ff      	movs	r2, #255	; 0xff
 80006ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d114      	bne.n	8000702 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	691b      	ldr	r3, [r3, #16]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d01a      	beq.n	8000716 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	3310      	adds	r3, #16
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 f91f 	bl	8001928 <xTaskRemoveFromEventList>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d012      	beq.n	8000716 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <xQueueGenericReset+0xcc>)
 80006f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	f3bf 8f4f 	dsb	sy
 80006fc:	f3bf 8f6f 	isb	sy
 8000700:	e009      	b.n	8000716 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	3310      	adds	r3, #16
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff fef1 	bl	80004ee <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3324      	adds	r3, #36	; 0x24
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff feec 	bl	80004ee <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8000716:	f002 fa4d 	bl	8002bb4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800071a:	2301      	movs	r3, #1
}
 800071c:	4618      	mov	r0, r3
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	e000ed04 	.word	0xe000ed04

08000728 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	; 0x30
 800072c:	af02      	add	r7, sp, #8
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	4613      	mov	r3, r2
 8000734:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d10a      	bne.n	8000752 <xQueueGenericCreate+0x2a>
        __asm volatile
 800073c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000740:	f383 8811 	msr	BASEPRI, r3
 8000744:	f3bf 8f6f 	isb	sy
 8000748:	f3bf 8f4f 	dsb	sy
 800074c:	61bb      	str	r3, [r7, #24]
    }
 800074e:	bf00      	nop
 8000750:	e7fe      	b.n	8000750 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	68ba      	ldr	r2, [r7, #8]
 8000756:	fb02 f303 	mul.w	r3, r2, r3
 800075a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d006      	beq.n	8000770 <xQueueGenericCreate+0x48>
 8000762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	fbb2 f3f3 	udiv	r3, r2, r3
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	429a      	cmp	r2, r3
 800076e:	d101      	bne.n	8000774 <xQueueGenericCreate+0x4c>
 8000770:	2301      	movs	r3, #1
 8000772:	e000      	b.n	8000776 <xQueueGenericCreate+0x4e>
 8000774:	2300      	movs	r3, #0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d10a      	bne.n	8000790 <xQueueGenericCreate+0x68>
        __asm volatile
 800077a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800077e:	f383 8811 	msr	BASEPRI, r3
 8000782:	f3bf 8f6f 	isb	sy
 8000786:	f3bf 8f4f 	dsb	sy
 800078a:	617b      	str	r3, [r7, #20]
    }
 800078c:	bf00      	nop
 800078e:	e7fe      	b.n	800078e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000792:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000796:	d90a      	bls.n	80007ae <xQueueGenericCreate+0x86>
        __asm volatile
 8000798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800079c:	f383 8811 	msr	BASEPRI, r3
 80007a0:	f3bf 8f6f 	isb	sy
 80007a4:	f3bf 8f4f 	dsb	sy
 80007a8:	613b      	str	r3, [r7, #16]
    }
 80007aa:	bf00      	nop
 80007ac:	e7fe      	b.n	80007ac <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80007ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b0:	3350      	adds	r3, #80	; 0x50
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 fafa 	bl	8002dac <pvPortMalloc>
 80007b8:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80007ba:	6a3b      	ldr	r3, [r7, #32]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d00d      	beq.n	80007dc <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80007c0:	6a3b      	ldr	r3, [r7, #32]
 80007c2:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	3350      	adds	r3, #80	; 0x50
 80007c8:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80007ca:	79fa      	ldrb	r2, [r7, #7]
 80007cc:	6a3b      	ldr	r3, [r7, #32]
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	4613      	mov	r3, r2
 80007d2:	69fa      	ldr	r2, [r7, #28]
 80007d4:	68b9      	ldr	r1, [r7, #8]
 80007d6:	68f8      	ldr	r0, [r7, #12]
 80007d8:	f000 f805 	bl	80007e6 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80007dc:	6a3b      	ldr	r3, [r7, #32]
    }
 80007de:	4618      	mov	r0, r3
 80007e0:	3728      	adds	r7, #40	; 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b084      	sub	sp, #16
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	60f8      	str	r0, [r7, #12]
 80007ee:	60b9      	str	r1, [r7, #8]
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d103      	bne.n	8000802 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80007fa:	69bb      	ldr	r3, [r7, #24]
 80007fc:	69ba      	ldr	r2, [r7, #24]
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	e002      	b.n	8000808 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000802:	69bb      	ldr	r3, [r7, #24]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800080e:	69bb      	ldr	r3, [r7, #24]
 8000810:	68ba      	ldr	r2, [r7, #8]
 8000812:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000814:	2101      	movs	r1, #1
 8000816:	69b8      	ldr	r0, [r7, #24]
 8000818:	f7ff ff1e 	bl	8000658 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800081c:	69bb      	ldr	r3, [r7, #24]
 800081e:	78fa      	ldrb	r2, [r7, #3]
 8000820:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	68f9      	ldr	r1, [r7, #12]
 800082a:	2073      	movs	r0, #115	; 0x73
 800082c:	f004 f9e6 	bl	8004bfc <SEGGER_SYSVIEW_RecordU32x3>
}
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b090      	sub	sp, #64	; 0x40
 800083c:	af02      	add	r7, sp, #8
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
 8000844:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000846:	2300      	movs	r3, #0
 8000848:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800084e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000850:	2b00      	cmp	r3, #0
 8000852:	d10a      	bne.n	800086a <xQueueGenericSend+0x32>
        __asm volatile
 8000854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000858:	f383 8811 	msr	BASEPRI, r3
 800085c:	f3bf 8f6f 	isb	sy
 8000860:	f3bf 8f4f 	dsb	sy
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000866:	bf00      	nop
 8000868:	e7fe      	b.n	8000868 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d103      	bne.n	8000878 <xQueueGenericSend+0x40>
 8000870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	2b00      	cmp	r3, #0
 8000876:	d101      	bne.n	800087c <xQueueGenericSend+0x44>
 8000878:	2301      	movs	r3, #1
 800087a:	e000      	b.n	800087e <xQueueGenericSend+0x46>
 800087c:	2300      	movs	r3, #0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d10a      	bne.n	8000898 <xQueueGenericSend+0x60>
        __asm volatile
 8000882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000886:	f383 8811 	msr	BASEPRI, r3
 800088a:	f3bf 8f6f 	isb	sy
 800088e:	f3bf 8f4f 	dsb	sy
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000894:	bf00      	nop
 8000896:	e7fe      	b.n	8000896 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	2b02      	cmp	r3, #2
 800089c:	d103      	bne.n	80008a6 <xQueueGenericSend+0x6e>
 800089e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d101      	bne.n	80008aa <xQueueGenericSend+0x72>
 80008a6:	2301      	movs	r3, #1
 80008a8:	e000      	b.n	80008ac <xQueueGenericSend+0x74>
 80008aa:	2300      	movs	r3, #0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d10a      	bne.n	80008c6 <xQueueGenericSend+0x8e>
        __asm volatile
 80008b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b4:	f383 8811 	msr	BASEPRI, r3
 80008b8:	f3bf 8f6f 	isb	sy
 80008bc:	f3bf 8f4f 	dsb	sy
 80008c0:	623b      	str	r3, [r7, #32]
    }
 80008c2:	bf00      	nop
 80008c4:	e7fe      	b.n	80008c4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80008c6:	f001 f9cf 	bl	8001c68 <xTaskGetSchedulerState>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d102      	bne.n	80008d6 <xQueueGenericSend+0x9e>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d101      	bne.n	80008da <xQueueGenericSend+0xa2>
 80008d6:	2301      	movs	r3, #1
 80008d8:	e000      	b.n	80008dc <xQueueGenericSend+0xa4>
 80008da:	2300      	movs	r3, #0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d10a      	bne.n	80008f6 <xQueueGenericSend+0xbe>
        __asm volatile
 80008e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e4:	f383 8811 	msr	BASEPRI, r3
 80008e8:	f3bf 8f6f 	isb	sy
 80008ec:	f3bf 8f4f 	dsb	sy
 80008f0:	61fb      	str	r3, [r7, #28]
    }
 80008f2:	bf00      	nop
 80008f4:	e7fe      	b.n	80008f4 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80008f6:	f002 f92d 	bl	8002b54 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80008fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000902:	429a      	cmp	r2, r3
 8000904:	d302      	bcc.n	800090c <xQueueGenericSend+0xd4>
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	2b02      	cmp	r3, #2
 800090a:	d136      	bne.n	800097a <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 800090c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800090e:	4618      	mov	r0, r3
 8000910:	f004 ffb0 	bl	8005874 <SEGGER_SYSVIEW_ShrinkId>
 8000914:	68ba      	ldr	r2, [r7, #8]
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	460b      	mov	r3, r1
 800091e:	4601      	mov	r1, r0
 8000920:	205a      	movs	r0, #90	; 0x5a
 8000922:	f004 f9e1 	bl	8004ce8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000926:	683a      	ldr	r2, [r7, #0]
 8000928:	68b9      	ldr	r1, [r7, #8]
 800092a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800092c:	f000 fa78 	bl	8000e20 <prvCopyDataToQueue>
 8000930:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000936:	2b00      	cmp	r3, #0
 8000938:	d010      	beq.n	800095c <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800093a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800093c:	3324      	adds	r3, #36	; 0x24
 800093e:	4618      	mov	r0, r3
 8000940:	f000 fff2 	bl	8001928 <xTaskRemoveFromEventList>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d013      	beq.n	8000972 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800094a:	4b4d      	ldr	r3, [pc, #308]	; (8000a80 <xQueueGenericSend+0x248>)
 800094c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	f3bf 8f4f 	dsb	sy
 8000956:	f3bf 8f6f 	isb	sy
 800095a:	e00a      	b.n	8000972 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800095c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800095e:	2b00      	cmp	r3, #0
 8000960:	d007      	beq.n	8000972 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000962:	4b47      	ldr	r3, [pc, #284]	; (8000a80 <xQueueGenericSend+0x248>)
 8000964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	f3bf 8f4f 	dsb	sy
 800096e:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000972:	f002 f91f 	bl	8002bb4 <vPortExitCritical>
                return pdPASS;
 8000976:	2301      	movs	r3, #1
 8000978:	e07d      	b.n	8000a76 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d110      	bne.n	80009a2 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000980:	f002 f918 	bl	8002bb4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8000984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000986:	4618      	mov	r0, r3
 8000988:	f004 ff74 	bl	8005874 <SEGGER_SYSVIEW_ShrinkId>
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	460b      	mov	r3, r1
 8000996:	4601      	mov	r1, r0
 8000998:	205a      	movs	r0, #90	; 0x5a
 800099a:	f004 f9a5 	bl	8004ce8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	e069      	b.n	8000a76 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80009a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d106      	bne.n	80009b6 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 f821 	bl	80019f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80009b2:	2301      	movs	r3, #1
 80009b4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80009b6:	f002 f8fd 	bl	8002bb4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80009ba:	f000 fd6d 	bl	8001498 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80009be:	f002 f8c9 	bl	8002b54 <vPortEnterCritical>
 80009c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80009c8:	b25b      	sxtb	r3, r3
 80009ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ce:	d103      	bne.n	80009d8 <xQueueGenericSend+0x1a0>
 80009d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009d2:	2200      	movs	r2, #0
 80009d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80009d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80009de:	b25b      	sxtb	r3, r3
 80009e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e4:	d103      	bne.n	80009ee <xQueueGenericSend+0x1b6>
 80009e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009e8:	2200      	movs	r2, #0
 80009ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80009ee:	f002 f8e1 	bl	8002bb4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80009f2:	1d3a      	adds	r2, r7, #4
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4611      	mov	r1, r2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 f810 	bl	8001a20 <xTaskCheckForTimeOut>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d124      	bne.n	8000a50 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a08:	f000 fb02 	bl	8001010 <prvIsQueueFull>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d018      	beq.n	8000a44 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a14:	3310      	adds	r3, #16
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 ff32 	bl	8001884 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a22:	f000 fa8d 	bl	8000f40 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000a26:	f000 fd45 	bl	80014b4 <xTaskResumeAll>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	f47f af62 	bne.w	80008f6 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <xQueueGenericSend+0x248>)
 8000a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	f3bf 8f4f 	dsb	sy
 8000a3e:	f3bf 8f6f 	isb	sy
 8000a42:	e758      	b.n	80008f6 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000a44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a46:	f000 fa7b 	bl	8000f40 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a4a:	f000 fd33 	bl	80014b4 <xTaskResumeAll>
 8000a4e:	e752      	b.n	80008f6 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a52:	f000 fa75 	bl	8000f40 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a56:	f000 fd2d 	bl	80014b4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f004 ff09 	bl	8005874 <SEGGER_SYSVIEW_ShrinkId>
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	6879      	ldr	r1, [r7, #4]
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	4601      	mov	r1, r0
 8000a6e:	205a      	movs	r0, #90	; 0x5a
 8000a70:	f004 f93a 	bl	8004ce8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000a74:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3738      	adds	r7, #56	; 0x38
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	e000ed04 	.word	0xe000ed04

08000a84 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b090      	sub	sp, #64	; 0x40
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
 8000a90:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8000a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d10a      	bne.n	8000ab2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8000a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aa0:	f383 8811 	msr	BASEPRI, r3
 8000aa4:	f3bf 8f6f 	isb	sy
 8000aa8:	f3bf 8f4f 	dsb	sy
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000aae:	bf00      	nop
 8000ab0:	e7fe      	b.n	8000ab0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d103      	bne.n	8000ac0 <xQueueGenericSendFromISR+0x3c>
 8000ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d101      	bne.n	8000ac4 <xQueueGenericSendFromISR+0x40>
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e000      	b.n	8000ac6 <xQueueGenericSendFromISR+0x42>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d10a      	bne.n	8000ae0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8000aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ace:	f383 8811 	msr	BASEPRI, r3
 8000ad2:	f3bf 8f6f 	isb	sy
 8000ad6:	f3bf 8f4f 	dsb	sy
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000adc:	bf00      	nop
 8000ade:	e7fe      	b.n	8000ade <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d103      	bne.n	8000aee <xQueueGenericSendFromISR+0x6a>
 8000ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d101      	bne.n	8000af2 <xQueueGenericSendFromISR+0x6e>
 8000aee:	2301      	movs	r3, #1
 8000af0:	e000      	b.n	8000af4 <xQueueGenericSendFromISR+0x70>
 8000af2:	2300      	movs	r3, #0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d10a      	bne.n	8000b0e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8000af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000afc:	f383 8811 	msr	BASEPRI, r3
 8000b00:	f3bf 8f6f 	isb	sy
 8000b04:	f3bf 8f4f 	dsb	sy
 8000b08:	623b      	str	r3, [r7, #32]
    }
 8000b0a:	bf00      	nop
 8000b0c:	e7fe      	b.n	8000b0c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b0e:	f002 f90d 	bl	8002d2c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000b12:	f3ef 8211 	mrs	r2, BASEPRI
 8000b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b1a:	f383 8811 	msr	BASEPRI, r3
 8000b1e:	f3bf 8f6f 	isb	sy
 8000b22:	f3bf 8f4f 	dsb	sy
 8000b26:	61fa      	str	r2, [r7, #28]
 8000b28:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000b2a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d302      	bcc.n	8000b40 <xQueueGenericSendFromISR+0xbc>
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d148      	bne.n	8000bd2 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b52:	4618      	mov	r0, r3
 8000b54:	f004 fe8e 	bl	8005874 <SEGGER_SYSVIEW_ShrinkId>
 8000b58:	4601      	mov	r1, r0
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	2060      	movs	r0, #96	; 0x60
 8000b60:	f003 fff2 	bl	8004b48 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	68b9      	ldr	r1, [r7, #8]
 8000b68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000b6a:	f000 f959 	bl	8000e20 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000b6e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b76:	d112      	bne.n	8000b9e <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d025      	beq.n	8000bcc <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b82:	3324      	adds	r3, #36	; 0x24
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 fecf 	bl	8001928 <xTaskRemoveFromEventList>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d01d      	beq.n	8000bcc <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d01a      	beq.n	8000bcc <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2201      	movs	r2, #1
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	e016      	b.n	8000bcc <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000b9e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000ba2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ba4:	d10a      	bne.n	8000bbc <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8000ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000baa:	f383 8811 	msr	BASEPRI, r3
 8000bae:	f3bf 8f6f 	isb	sy
 8000bb2:	f3bf 8f4f 	dsb	sy
 8000bb6:	617b      	str	r3, [r7, #20]
    }
 8000bb8:	bf00      	nop
 8000bba:	e7fe      	b.n	8000bba <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000bbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	b25a      	sxtb	r2, r3
 8000bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000bd0:	e00b      	b.n	8000bea <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f004 fe4d 	bl	8005874 <SEGGER_SYSVIEW_ShrinkId>
 8000bda:	4601      	mov	r1, r0
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	461a      	mov	r2, r3
 8000be0:	2060      	movs	r0, #96	; 0x60
 8000be2:	f003 ffb1 	bl	8004b48 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bec:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000bf4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3740      	adds	r7, #64	; 0x40
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b08f      	sub	sp, #60	; 0x3c
 8000c04:	af02      	add	r7, sp, #8
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d10a      	bne.n	8000c30 <xQueueReceive+0x30>
        __asm volatile
 8000c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c1e:	f383 8811 	msr	BASEPRI, r3
 8000c22:	f3bf 8f6f 	isb	sy
 8000c26:	f3bf 8f4f 	dsb	sy
 8000c2a:	623b      	str	r3, [r7, #32]
    }
 8000c2c:	bf00      	nop
 8000c2e:	e7fe      	b.n	8000c2e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d103      	bne.n	8000c3e <xQueueReceive+0x3e>
 8000c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d101      	bne.n	8000c42 <xQueueReceive+0x42>
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e000      	b.n	8000c44 <xQueueReceive+0x44>
 8000c42:	2300      	movs	r3, #0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d10a      	bne.n	8000c5e <xQueueReceive+0x5e>
        __asm volatile
 8000c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c4c:	f383 8811 	msr	BASEPRI, r3
 8000c50:	f3bf 8f6f 	isb	sy
 8000c54:	f3bf 8f4f 	dsb	sy
 8000c58:	61fb      	str	r3, [r7, #28]
    }
 8000c5a:	bf00      	nop
 8000c5c:	e7fe      	b.n	8000c5c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c5e:	f001 f803 	bl	8001c68 <xTaskGetSchedulerState>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d102      	bne.n	8000c6e <xQueueReceive+0x6e>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d101      	bne.n	8000c72 <xQueueReceive+0x72>
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e000      	b.n	8000c74 <xQueueReceive+0x74>
 8000c72:	2300      	movs	r3, #0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d10a      	bne.n	8000c8e <xQueueReceive+0x8e>
        __asm volatile
 8000c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c7c:	f383 8811 	msr	BASEPRI, r3
 8000c80:	f3bf 8f6f 	isb	sy
 8000c84:	f3bf 8f4f 	dsb	sy
 8000c88:	61bb      	str	r3, [r7, #24]
    }
 8000c8a:	bf00      	nop
 8000c8c:	e7fe      	b.n	8000c8c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000c8e:	f001 ff61 	bl	8002b54 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d02f      	beq.n	8000cfe <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000c9e:	68b9      	ldr	r1, [r7, #8]
 8000ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ca2:	f000 f927 	bl	8000ef4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f004 fde3 	bl	8005874 <SEGGER_SYSVIEW_ShrinkId>
 8000cae:	4604      	mov	r4, r0
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f004 fddf 	bl	8005874 <SEGGER_SYSVIEW_ShrinkId>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2101      	movs	r1, #1
 8000cbc:	9100      	str	r1, [sp, #0]
 8000cbe:	4621      	mov	r1, r4
 8000cc0:	205c      	movs	r0, #92	; 0x5c
 8000cc2:	f004 f811 	bl	8004ce8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc8:	1e5a      	subs	r2, r3, #1
 8000cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ccc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd0:	691b      	ldr	r3, [r3, #16]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00f      	beq.n	8000cf6 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd8:	3310      	adds	r3, #16
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 fe24 	bl	8001928 <xTaskRemoveFromEventList>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d007      	beq.n	8000cf6 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000ce6:	4b4d      	ldr	r3, [pc, #308]	; (8000e1c <xQueueReceive+0x21c>)
 8000ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	f3bf 8f4f 	dsb	sy
 8000cf2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000cf6:	f001 ff5d 	bl	8002bb4 <vPortExitCritical>
                return pdPASS;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e08a      	b.n	8000e14 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d113      	bne.n	8000d2c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000d04:	f001 ff56 	bl	8002bb4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f004 fdb2 	bl	8005874 <SEGGER_SYSVIEW_ShrinkId>
 8000d10:	4604      	mov	r4, r0
 8000d12:	2000      	movs	r0, #0
 8000d14:	f004 fdae 	bl	8005874 <SEGGER_SYSVIEW_ShrinkId>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	9100      	str	r1, [sp, #0]
 8000d20:	4621      	mov	r1, r4
 8000d22:	205c      	movs	r0, #92	; 0x5c
 8000d24:	f003 ffe0 	bl	8004ce8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e073      	b.n	8000e14 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d106      	bne.n	8000d40 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000d32:	f107 0310 	add.w	r3, r7, #16
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 fe5c 	bl	80019f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000d40:	f001 ff38 	bl	8002bb4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000d44:	f000 fba8 	bl	8001498 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000d48:	f001 ff04 	bl	8002b54 <vPortEnterCritical>
 8000d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d52:	b25b      	sxtb	r3, r3
 8000d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d58:	d103      	bne.n	8000d62 <xQueueReceive+0x162>
 8000d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d6e:	d103      	bne.n	8000d78 <xQueueReceive+0x178>
 8000d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000d78:	f001 ff1c 	bl	8002bb4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000d7c:	1d3a      	adds	r2, r7, #4
 8000d7e:	f107 0310 	add.w	r3, r7, #16
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 fe4b 	bl	8001a20 <xTaskCheckForTimeOut>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d124      	bne.n	8000dda <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d92:	f000 f927 	bl	8000fe4 <prvIsQueueEmpty>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d018      	beq.n	8000dce <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d9e:	3324      	adds	r3, #36	; 0x24
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 fd6d 	bl	8001884 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dac:	f000 f8c8 	bl	8000f40 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000db0:	f000 fb80 	bl	80014b4 <xTaskResumeAll>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f47f af69 	bne.w	8000c8e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <xQueueReceive+0x21c>)
 8000dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	f3bf 8f4f 	dsb	sy
 8000dc8:	f3bf 8f6f 	isb	sy
 8000dcc:	e75f      	b.n	8000c8e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dd0:	f000 f8b6 	bl	8000f40 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000dd4:	f000 fb6e 	bl	80014b4 <xTaskResumeAll>
 8000dd8:	e759      	b.n	8000c8e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ddc:	f000 f8b0 	bl	8000f40 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000de0:	f000 fb68 	bl	80014b4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000de6:	f000 f8fd 	bl	8000fe4 <prvIsQueueEmpty>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f43f af4e 	beq.w	8000c8e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df4:	4618      	mov	r0, r3
 8000df6:	f004 fd3d 	bl	8005874 <SEGGER_SYSVIEW_ShrinkId>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f004 fd39 	bl	8005874 <SEGGER_SYSVIEW_ShrinkId>
 8000e02:	4602      	mov	r2, r0
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2101      	movs	r1, #1
 8000e08:	9100      	str	r1, [sp, #0]
 8000e0a:	4621      	mov	r1, r4
 8000e0c:	205c      	movs	r0, #92	; 0x5c
 8000e0e:	f003 ff6b 	bl	8004ce8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000e12:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3734      	adds	r7, #52	; 0x34
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd90      	pop	{r4, r7, pc}
 8000e1c:	e000ed04 	.word	0xe000ed04

08000e20 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e34:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10d      	bne.n	8000e5a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d14d      	bne.n	8000ee2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 ff2a 	bl	8001ca4 <xTaskPriorityDisinherit>
 8000e50:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	e043      	b.n	8000ee2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d119      	bne.n	8000e94 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6858      	ldr	r0, [r3, #4]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	461a      	mov	r2, r3
 8000e6a:	68b9      	ldr	r1, [r7, #8]
 8000e6c:	f006 fa9a 	bl	80073a4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	441a      	add	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d32b      	bcc.n	8000ee2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	e026      	b.n	8000ee2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	68d8      	ldr	r0, [r3, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	68b9      	ldr	r1, [r7, #8]
 8000ea0:	f006 fa80 	bl	80073a4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	425b      	negs	r3, r3
 8000eae:	441a      	add	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	68da      	ldr	r2, [r3, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d207      	bcs.n	8000ed0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec8:	425b      	negs	r3, r3
 8000eca:	441a      	add	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d105      	bne.n	8000ee2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	1c5a      	adds	r2, r3, #1
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000eea:	697b      	ldr	r3, [r7, #20]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d018      	beq.n	8000f38 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68da      	ldr	r2, [r3, #12]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	441a      	add	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d303      	bcc.n	8000f28 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68d9      	ldr	r1, [r3, #12]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	461a      	mov	r2, r3
 8000f32:	6838      	ldr	r0, [r7, #0]
 8000f34:	f006 fa36 	bl	80073a4 <memcpy>
    }
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000f48:	f001 fe04 	bl	8002b54 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f52:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f54:	e011      	b.n	8000f7a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d012      	beq.n	8000f84 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3324      	adds	r3, #36	; 0x24
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 fce0 	bl	8001928 <xTaskRemoveFromEventList>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000f6e:	f000 fdbd 	bl	8001aec <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	3b01      	subs	r3, #1
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	dce9      	bgt.n	8000f56 <prvUnlockQueue+0x16>
 8000f82:	e000      	b.n	8000f86 <prvUnlockQueue+0x46>
                        break;
 8000f84:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	22ff      	movs	r2, #255	; 0xff
 8000f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000f8e:	f001 fe11 	bl	8002bb4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000f92:	f001 fddf 	bl	8002b54 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f9c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000f9e:	e011      	b.n	8000fc4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d012      	beq.n	8000fce <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3310      	adds	r3, #16
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fcbb 	bl	8001928 <xTaskRemoveFromEventList>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000fb8:	f000 fd98 	bl	8001aec <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000fbc:	7bbb      	ldrb	r3, [r7, #14]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000fc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	dce9      	bgt.n	8000fa0 <prvUnlockQueue+0x60>
 8000fcc:	e000      	b.n	8000fd0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000fce:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	22ff      	movs	r2, #255	; 0xff
 8000fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000fd8:	f001 fdec 	bl	8002bb4 <vPortExitCritical>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000fec:	f001 fdb2 	bl	8002b54 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d102      	bne.n	8000ffe <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	e001      	b.n	8001002 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001002:	f001 fdd7 	bl	8002bb4 <vPortExitCritical>

    return xReturn;
 8001006:	68fb      	ldr	r3, [r7, #12]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001018:	f001 fd9c 	bl	8002b54 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001024:	429a      	cmp	r2, r3
 8001026:	d102      	bne.n	800102e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001028:	2301      	movs	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	e001      	b.n	8001032 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001032:	f001 fdbf 	bl	8002bb4 <vPortExitCritical>

    return xReturn;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	e01e      	b.n	800108e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001050:	4a13      	ldr	r2, [pc, #76]	; (80010a0 <vQueueAddToRegistry+0x60>)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d115      	bne.n	8001088 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800105c:	4910      	ldr	r1, [pc, #64]	; (80010a0 <vQueueAddToRegistry+0x60>)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8001066:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <vQueueAddToRegistry+0x60>)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	4413      	add	r3, r2
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4618      	mov	r0, r3
 8001076:	f004 fbfd 	bl	8005874 <SEGGER_SYSVIEW_ShrinkId>
 800107a:	4601      	mov	r1, r0
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	2071      	movs	r0, #113	; 0x71
 8001082:	f003 fd61 	bl	8004b48 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8001086:	e006      	b.n	8001096 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	3301      	adds	r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2b07      	cmp	r3, #7
 8001092:	d9dd      	bls.n	8001050 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000064 	.word	0x20000064

080010a4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80010b4:	f001 fd4e 	bl	8002b54 <vPortEnterCritical>
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010be:	b25b      	sxtb	r3, r3
 80010c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c4:	d103      	bne.n	80010ce <vQueueWaitForMessageRestricted+0x2a>
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010da:	d103      	bne.n	80010e4 <vQueueWaitForMessageRestricted+0x40>
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80010e4:	f001 fd66 	bl	8002bb4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d106      	bne.n	80010fe <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	3324      	adds	r3, #36	; 0x24
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	68b9      	ldr	r1, [r7, #8]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 fbe7 	bl	80018cc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	f7ff ff1e 	bl	8000f40 <prvUnlockQueue>
    }
 8001104:	bf00      	nop
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800110c:	b580      	push	{r7, lr}
 800110e:	b08c      	sub	sp, #48	; 0x30
 8001110:	af04      	add	r7, sp, #16
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	4613      	mov	r3, r2
 800111a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800111c:	88fb      	ldrh	r3, [r7, #6]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4618      	mov	r0, r3
 8001122:	f001 fe43 	bl	8002dac <pvPortMalloc>
 8001126:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00e      	beq.n	800114c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800112e:	2058      	movs	r0, #88	; 0x58
 8001130:	f001 fe3c 	bl	8002dac <pvPortMalloc>
 8001134:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	631a      	str	r2, [r3, #48]	; 0x30
 8001142:	e005      	b.n	8001150 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001144:	6978      	ldr	r0, [r7, #20]
 8001146:	f001 ff11 	bl	8002f6c <vPortFree>
 800114a:	e001      	b.n	8001150 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d013      	beq.n	800117e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001156:	88fa      	ldrh	r2, [r7, #6]
 8001158:	2300      	movs	r3, #0
 800115a:	9303      	str	r3, [sp, #12]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	9302      	str	r3, [sp, #8]
 8001160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68b9      	ldr	r1, [r7, #8]
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f000 f80e 	bl	800118e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001172:	69f8      	ldr	r0, [r7, #28]
 8001174:	f000 f8a2 	bl	80012bc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001178:	2301      	movs	r3, #1
 800117a:	61bb      	str	r3, [r7, #24]
 800117c:	e002      	b.n	8001184 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001184:	69bb      	ldr	r3, [r7, #24]
    }
 8001186:	4618      	mov	r0, r3
 8001188:	3720      	adds	r7, #32
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b088      	sub	sp, #32
 8001192:	af00      	add	r7, sp, #0
 8001194:	60f8      	str	r0, [r7, #12]
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800119c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800119e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	461a      	mov	r2, r3
 80011a6:	21a5      	movs	r1, #165	; 0xa5
 80011a8:	f006 f90a 	bl	80073c0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80011ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011b6:	3b01      	subs	r3, #1
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	f023 0307 	bic.w	r3, r3, #7
 80011c4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00a      	beq.n	80011e6 <prvInitialiseNewTask+0x58>
        __asm volatile
 80011d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011d4:	f383 8811 	msr	BASEPRI, r3
 80011d8:	f3bf 8f6f 	isb	sy
 80011dc:	f3bf 8f4f 	dsb	sy
 80011e0:	617b      	str	r3, [r7, #20]
    }
 80011e2:	bf00      	nop
 80011e4:	e7fe      	b.n	80011e4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d01f      	beq.n	800122c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
 80011f0:	e012      	b.n	8001218 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	4413      	add	r3, r2
 80011f8:	7819      	ldrb	r1, [r3, #0]
 80011fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	4413      	add	r3, r2
 8001200:	3334      	adds	r3, #52	; 0x34
 8001202:	460a      	mov	r2, r1
 8001204:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	4413      	add	r3, r2
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d006      	beq.n	8001220 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3301      	adds	r3, #1
 8001216:	61fb      	str	r3, [r7, #28]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	2b09      	cmp	r3, #9
 800121c:	d9e9      	bls.n	80011f2 <prvInitialiseNewTask+0x64>
 800121e:	e000      	b.n	8001222 <prvInitialiseNewTask+0x94>
            {
                break;
 8001220:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001224:	2200      	movs	r2, #0
 8001226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800122a:	e003      	b.n	8001234 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800122c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001236:	2b04      	cmp	r3, #4
 8001238:	d901      	bls.n	800123e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800123a:	2304      	movs	r3, #4
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800123e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001248:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800124a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800124c:	2200      	movs	r2, #0
 800124e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001252:	3304      	adds	r3, #4
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f96a 	bl	800052e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800125a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800125c:	3318      	adds	r3, #24
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f965 	bl	800052e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001268:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800126a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126c:	f1c3 0205 	rsb	r2, r3, #5
 8001270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001272:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800127a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800127c:	3350      	adds	r3, #80	; 0x50
 800127e:	2204      	movs	r2, #4
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f006 f89c 	bl	80073c0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800128a:	3354      	adds	r3, #84	; 0x54
 800128c:	2201      	movs	r2, #1
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f006 f895 	bl	80073c0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	68f9      	ldr	r1, [r7, #12]
 800129a:	69b8      	ldr	r0, [r7, #24]
 800129c:	f001 faaa 	bl	80027f4 <pxPortInitialiseStack>
 80012a0:	4602      	mov	r2, r0
 80012a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80012a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80012ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80012b2:	bf00      	nop
 80012b4:	3720      	adds	r7, #32
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80012bc:	b5b0      	push	{r4, r5, r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af02      	add	r7, sp, #8
 80012c2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80012c4:	f001 fc46 	bl	8002b54 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80012c8:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <prvAddNewTaskToReadyList+0xfc>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	3301      	adds	r3, #1
 80012ce:	4a3a      	ldr	r2, [pc, #232]	; (80013b8 <prvAddNewTaskToReadyList+0xfc>)
 80012d0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80012d2:	4b3a      	ldr	r3, [pc, #232]	; (80013bc <prvAddNewTaskToReadyList+0x100>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d109      	bne.n	80012ee <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80012da:	4a38      	ldr	r2, [pc, #224]	; (80013bc <prvAddNewTaskToReadyList+0x100>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80012e0:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <prvAddNewTaskToReadyList+0xfc>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d110      	bne.n	800130a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80012e8:	f000 fc24 	bl	8001b34 <prvInitialiseTaskLists>
 80012ec:	e00d      	b.n	800130a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80012ee:	4b34      	ldr	r3, [pc, #208]	; (80013c0 <prvAddNewTaskToReadyList+0x104>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d109      	bne.n	800130a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80012f6:	4b31      	ldr	r3, [pc, #196]	; (80013bc <prvAddNewTaskToReadyList+0x100>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001300:	429a      	cmp	r2, r3
 8001302:	d802      	bhi.n	800130a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001304:	4a2d      	ldr	r2, [pc, #180]	; (80013bc <prvAddNewTaskToReadyList+0x100>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800130a:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <prvAddNewTaskToReadyList+0x108>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	3301      	adds	r3, #1
 8001310:	4a2c      	ldr	r2, [pc, #176]	; (80013c4 <prvAddNewTaskToReadyList+0x108>)
 8001312:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001314:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <prvAddNewTaskToReadyList+0x108>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d016      	beq.n	8001350 <prvAddNewTaskToReadyList+0x94>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4618      	mov	r0, r3
 8001326:	f004 f97f 	bl	8005628 <SEGGER_SYSVIEW_OnTaskCreate>
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	461d      	mov	r5, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	461c      	mov	r4, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	1ae3      	subs	r3, r4, r3
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	462b      	mov	r3, r5
 800134c:	f001 ffdc 	bl	8003308 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4618      	mov	r0, r3
 8001354:	f004 f9ec 	bl	8005730 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	2201      	movs	r2, #1
 800135e:	409a      	lsls	r2, r3
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <prvAddNewTaskToReadyList+0x10c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4313      	orrs	r3, r2
 8001366:	4a18      	ldr	r2, [pc, #96]	; (80013c8 <prvAddNewTaskToReadyList+0x10c>)
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800136e:	4613      	mov	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4a15      	ldr	r2, [pc, #84]	; (80013cc <prvAddNewTaskToReadyList+0x110>)
 8001378:	441a      	add	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3304      	adds	r3, #4
 800137e:	4619      	mov	r1, r3
 8001380:	4610      	mov	r0, r2
 8001382:	f7ff f8e1 	bl	8000548 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001386:	f001 fc15 	bl	8002bb4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <prvAddNewTaskToReadyList+0x104>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00e      	beq.n	80013b0 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <prvAddNewTaskToReadyList+0x100>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	429a      	cmp	r2, r3
 800139e:	d207      	bcs.n	80013b0 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <prvAddNewTaskToReadyList+0x114>)
 80013a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	f3bf 8f4f 	dsb	sy
 80013ac:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bdb0      	pop	{r4, r5, r7, pc}
 80013b8:	2000017c 	.word	0x2000017c
 80013bc:	200000a4 	.word	0x200000a4
 80013c0:	20000188 	.word	0x20000188
 80013c4:	20000198 	.word	0x20000198
 80013c8:	20000184 	.word	0x20000184
 80013cc:	200000a8 	.word	0x200000a8
 80013d0:	e000ed04 	.word	0xe000ed04

080013d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80013da:	4b27      	ldr	r3, [pc, #156]	; (8001478 <vTaskStartScheduler+0xa4>)
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	2300      	movs	r3, #0
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2300      	movs	r3, #0
 80013e4:	2282      	movs	r2, #130	; 0x82
 80013e6:	4925      	ldr	r1, [pc, #148]	; (800147c <vTaskStartScheduler+0xa8>)
 80013e8:	4825      	ldr	r0, [pc, #148]	; (8001480 <vTaskStartScheduler+0xac>)
 80013ea:	f7ff fe8f 	bl	800110c <xTaskCreate>
 80013ee:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d102      	bne.n	80013fc <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80013f6:	f000 feeb 	bl	80021d0 <xTimerCreateTimerTask>
 80013fa:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d124      	bne.n	800144c <vTaskStartScheduler+0x78>
        __asm volatile
 8001402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001406:	f383 8811 	msr	BASEPRI, r3
 800140a:	f3bf 8f6f 	isb	sy
 800140e:	f3bf 8f4f 	dsb	sy
 8001412:	60bb      	str	r3, [r7, #8]
    }
 8001414:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001416:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <vTaskStartScheduler+0xb0>)
 8001418:	f04f 32ff 	mov.w	r2, #4294967295
 800141c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <vTaskStartScheduler+0xb4>)
 8001420:	2201      	movs	r2, #1
 8001422:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001424:	4b19      	ldr	r3, [pc, #100]	; (800148c <vTaskStartScheduler+0xb8>)
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <vTaskStartScheduler+0xbc>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <vTaskStartScheduler+0xa4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d102      	bne.n	800143c <vTaskStartScheduler+0x68>
 8001436:	f004 f8db 	bl	80055f0 <SEGGER_SYSVIEW_OnIdle>
 800143a:	e004      	b.n	8001446 <vTaskStartScheduler+0x72>
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <vTaskStartScheduler+0xbc>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f004 f933 	bl	80056ac <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001446:	f001 fa65 	bl	8002914 <xPortStartScheduler>
 800144a:	e00e      	b.n	800146a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001452:	d10a      	bne.n	800146a <vTaskStartScheduler+0x96>
        __asm volatile
 8001454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001458:	f383 8811 	msr	BASEPRI, r3
 800145c:	f3bf 8f6f 	isb	sy
 8001460:	f3bf 8f4f 	dsb	sy
 8001464:	607b      	str	r3, [r7, #4]
    }
 8001466:	bf00      	nop
 8001468:	e7fe      	b.n	8001468 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <vTaskStartScheduler+0xc0>)
 800146c:	681b      	ldr	r3, [r3, #0]
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200001a0 	.word	0x200001a0
 800147c:	08007428 	.word	0x08007428
 8001480:	08001b05 	.word	0x08001b05
 8001484:	2000019c 	.word	0x2000019c
 8001488:	20000188 	.word	0x20000188
 800148c:	20000180 	.word	0x20000180
 8001490:	200000a4 	.word	0x200000a4
 8001494:	20000004 	.word	0x20000004

08001498 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <vTaskSuspendAll+0x18>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3301      	adds	r3, #1
 80014a2:	4a03      	ldr	r2, [pc, #12]	; (80014b0 <vTaskSuspendAll+0x18>)
 80014a4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	200001a4 	.word	0x200001a4

080014b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80014c2:	4b43      	ldr	r3, [pc, #268]	; (80015d0 <xTaskResumeAll+0x11c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10a      	bne.n	80014e0 <xTaskResumeAll+0x2c>
        __asm volatile
 80014ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ce:	f383 8811 	msr	BASEPRI, r3
 80014d2:	f3bf 8f6f 	isb	sy
 80014d6:	f3bf 8f4f 	dsb	sy
 80014da:	603b      	str	r3, [r7, #0]
    }
 80014dc:	bf00      	nop
 80014de:	e7fe      	b.n	80014de <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80014e0:	f001 fb38 	bl	8002b54 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80014e4:	4b3a      	ldr	r3, [pc, #232]	; (80015d0 <xTaskResumeAll+0x11c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	4a39      	ldr	r2, [pc, #228]	; (80015d0 <xTaskResumeAll+0x11c>)
 80014ec:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80014ee:	4b38      	ldr	r3, [pc, #224]	; (80015d0 <xTaskResumeAll+0x11c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d165      	bne.n	80015c2 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80014f6:	4b37      	ldr	r3, [pc, #220]	; (80015d4 <xTaskResumeAll+0x120>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d061      	beq.n	80015c2 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80014fe:	e032      	b.n	8001566 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001500:	4b35      	ldr	r3, [pc, #212]	; (80015d8 <xTaskResumeAll+0x124>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	3318      	adds	r3, #24
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff f878 	bl	8000602 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	3304      	adds	r3, #4
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f873 	bl	8000602 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4618      	mov	r0, r3
 8001520:	f004 f906 	bl	8005730 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001528:	2201      	movs	r2, #1
 800152a:	409a      	lsls	r2, r3
 800152c:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <xTaskResumeAll+0x128>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4313      	orrs	r3, r2
 8001532:	4a2a      	ldr	r2, [pc, #168]	; (80015dc <xTaskResumeAll+0x128>)
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4a27      	ldr	r2, [pc, #156]	; (80015e0 <xTaskResumeAll+0x12c>)
 8001544:	441a      	add	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	3304      	adds	r3, #4
 800154a:	4619      	mov	r1, r3
 800154c:	4610      	mov	r0, r2
 800154e:	f7fe fffb 	bl	8000548 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001556:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <xTaskResumeAll+0x130>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	429a      	cmp	r2, r3
 800155e:	d302      	bcc.n	8001566 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8001560:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <xTaskResumeAll+0x134>)
 8001562:	2201      	movs	r2, #1
 8001564:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001566:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <xTaskResumeAll+0x124>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1c8      	bne.n	8001500 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001574:	f000 fb5c 	bl	8001c30 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001578:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <xTaskResumeAll+0x138>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d010      	beq.n	80015a6 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001584:	f000 f858 	bl	8001638 <xTaskIncrementTick>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d002      	beq.n	8001594 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <xTaskResumeAll+0x134>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f1      	bne.n	8001584 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <xTaskResumeAll+0x138>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <xTaskResumeAll+0x134>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d009      	beq.n	80015c2 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80015ae:	2301      	movs	r3, #1
 80015b0:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <xTaskResumeAll+0x13c>)
 80015b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	f3bf 8f4f 	dsb	sy
 80015be:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80015c2:	f001 faf7 	bl	8002bb4 <vPortExitCritical>

    return xAlreadyYielded;
 80015c6:	68bb      	ldr	r3, [r7, #8]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	200001a4 	.word	0x200001a4
 80015d4:	2000017c 	.word	0x2000017c
 80015d8:	2000013c 	.word	0x2000013c
 80015dc:	20000184 	.word	0x20000184
 80015e0:	200000a8 	.word	0x200000a8
 80015e4:	200000a4 	.word	0x200000a4
 80015e8:	20000190 	.word	0x20000190
 80015ec:	2000018c 	.word	0x2000018c
 80015f0:	e000ed04 	.word	0xe000ed04

080015f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80015fa:	4b05      	ldr	r3, [pc, #20]	; (8001610 <xTaskGetTickCount+0x1c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001600:	687b      	ldr	r3, [r7, #4]
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000180 	.word	0x20000180

08001614 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800161a:	f001 fb87 	bl	8002d2c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001622:	4b04      	ldr	r3, [pc, #16]	; (8001634 <xTaskGetTickCountFromISR+0x20>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001628:	683b      	ldr	r3, [r7, #0]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000180 	.word	0x20000180

08001638 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001642:	4b50      	ldr	r3, [pc, #320]	; (8001784 <xTaskIncrementTick+0x14c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	f040 8092 	bne.w	8001770 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800164c:	4b4e      	ldr	r3, [pc, #312]	; (8001788 <xTaskIncrementTick+0x150>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	3301      	adds	r3, #1
 8001652:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001654:	4a4c      	ldr	r2, [pc, #304]	; (8001788 <xTaskIncrementTick+0x150>)
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d120      	bne.n	80016a2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001660:	4b4a      	ldr	r3, [pc, #296]	; (800178c <xTaskIncrementTick+0x154>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00a      	beq.n	8001680 <xTaskIncrementTick+0x48>
        __asm volatile
 800166a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800166e:	f383 8811 	msr	BASEPRI, r3
 8001672:	f3bf 8f6f 	isb	sy
 8001676:	f3bf 8f4f 	dsb	sy
 800167a:	603b      	str	r3, [r7, #0]
    }
 800167c:	bf00      	nop
 800167e:	e7fe      	b.n	800167e <xTaskIncrementTick+0x46>
 8001680:	4b42      	ldr	r3, [pc, #264]	; (800178c <xTaskIncrementTick+0x154>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b42      	ldr	r3, [pc, #264]	; (8001790 <xTaskIncrementTick+0x158>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a40      	ldr	r2, [pc, #256]	; (800178c <xTaskIncrementTick+0x154>)
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	4a40      	ldr	r2, [pc, #256]	; (8001790 <xTaskIncrementTick+0x158>)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b3f      	ldr	r3, [pc, #252]	; (8001794 <xTaskIncrementTick+0x15c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	4a3e      	ldr	r2, [pc, #248]	; (8001794 <xTaskIncrementTick+0x15c>)
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	f000 fac7 	bl	8001c30 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80016a2:	4b3d      	ldr	r3, [pc, #244]	; (8001798 <xTaskIncrementTick+0x160>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d34c      	bcc.n	8001746 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016ac:	4b37      	ldr	r3, [pc, #220]	; (800178c <xTaskIncrementTick+0x154>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d104      	bne.n	80016c0 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016b6:	4b38      	ldr	r3, [pc, #224]	; (8001798 <xTaskIncrementTick+0x160>)
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295
 80016bc:	601a      	str	r2, [r3, #0]
                    break;
 80016be:	e042      	b.n	8001746 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016c0:	4b32      	ldr	r3, [pc, #200]	; (800178c <xTaskIncrementTick+0x154>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d203      	bcs.n	80016e0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80016d8:	4a2f      	ldr	r2, [pc, #188]	; (8001798 <xTaskIncrementTick+0x160>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80016de:	e032      	b.n	8001746 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	3304      	adds	r3, #4
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe ff8c 	bl	8000602 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d004      	beq.n	80016fc <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	3318      	adds	r3, #24
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe ff83 	bl	8000602 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	4618      	mov	r0, r3
 8001700:	f004 f816 	bl	8005730 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	2201      	movs	r2, #1
 800170a:	409a      	lsls	r2, r3
 800170c:	4b23      	ldr	r3, [pc, #140]	; (800179c <xTaskIncrementTick+0x164>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4313      	orrs	r3, r2
 8001712:	4a22      	ldr	r2, [pc, #136]	; (800179c <xTaskIncrementTick+0x164>)
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4a1f      	ldr	r2, [pc, #124]	; (80017a0 <xTaskIncrementTick+0x168>)
 8001724:	441a      	add	r2, r3
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	3304      	adds	r3, #4
 800172a:	4619      	mov	r1, r3
 800172c:	4610      	mov	r0, r2
 800172e:	f7fe ff0b 	bl	8000548 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001736:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <xTaskIncrementTick+0x16c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	429a      	cmp	r2, r3
 800173e:	d3b5      	bcc.n	80016ac <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8001740:	2301      	movs	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001744:	e7b2      	b.n	80016ac <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <xTaskIncrementTick+0x16c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800174c:	4914      	ldr	r1, [pc, #80]	; (80017a0 <xTaskIncrementTick+0x168>)
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	440b      	add	r3, r1
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d901      	bls.n	8001762 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800175e:	2301      	movs	r3, #1
 8001760:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <xTaskIncrementTick+0x170>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d007      	beq.n	800177a <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800176a:	2301      	movs	r3, #1
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	e004      	b.n	800177a <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <xTaskIncrementTick+0x174>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	4a0d      	ldr	r2, [pc, #52]	; (80017ac <xTaskIncrementTick+0x174>)
 8001778:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800177a:	697b      	ldr	r3, [r7, #20]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200001a4 	.word	0x200001a4
 8001788:	20000180 	.word	0x20000180
 800178c:	20000134 	.word	0x20000134
 8001790:	20000138 	.word	0x20000138
 8001794:	20000194 	.word	0x20000194
 8001798:	2000019c 	.word	0x2000019c
 800179c:	20000184 	.word	0x20000184
 80017a0:	200000a8 	.word	0x200000a8
 80017a4:	200000a4 	.word	0x200000a4
 80017a8:	20000190 	.word	0x20000190
 80017ac:	2000018c 	.word	0x2000018c

080017b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80017b6:	4b2d      	ldr	r3, [pc, #180]	; (800186c <vTaskSwitchContext+0xbc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80017be:	4b2c      	ldr	r3, [pc, #176]	; (8001870 <vTaskSwitchContext+0xc0>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80017c4:	e04d      	b.n	8001862 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80017c6:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <vTaskSwitchContext+0xc0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017cc:	4b29      	ldr	r3, [pc, #164]	; (8001874 <vTaskSwitchContext+0xc4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	fab3 f383 	clz	r3, r3
 80017d8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80017da:	7afb      	ldrb	r3, [r7, #11]
 80017dc:	f1c3 031f 	rsb	r3, r3, #31
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	4925      	ldr	r1, [pc, #148]	; (8001878 <vTaskSwitchContext+0xc8>)
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10a      	bne.n	800180c <vTaskSwitchContext+0x5c>
        __asm volatile
 80017f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017fa:	f383 8811 	msr	BASEPRI, r3
 80017fe:	f3bf 8f6f 	isb	sy
 8001802:	f3bf 8f4f 	dsb	sy
 8001806:	607b      	str	r3, [r7, #4]
    }
 8001808:	bf00      	nop
 800180a:	e7fe      	b.n	800180a <vTaskSwitchContext+0x5a>
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4a18      	ldr	r2, [pc, #96]	; (8001878 <vTaskSwitchContext+0xc8>)
 8001818:	4413      	add	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	3308      	adds	r3, #8
 800182e:	429a      	cmp	r2, r3
 8001830:	d104      	bne.n	800183c <vTaskSwitchContext+0x8c>
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	4a0e      	ldr	r2, [pc, #56]	; (800187c <vTaskSwitchContext+0xcc>)
 8001844:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001846:	4b0d      	ldr	r3, [pc, #52]	; (800187c <vTaskSwitchContext+0xcc>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <vTaskSwitchContext+0xd0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d102      	bne.n	8001858 <vTaskSwitchContext+0xa8>
 8001852:	f003 fecd 	bl	80055f0 <SEGGER_SYSVIEW_OnIdle>
}
 8001856:	e004      	b.n	8001862 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <vTaskSwitchContext+0xcc>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f003 ff25 	bl	80056ac <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200001a4 	.word	0x200001a4
 8001870:	20000190 	.word	0x20000190
 8001874:	20000184 	.word	0x20000184
 8001878:	200000a8 	.word	0x200000a8
 800187c:	200000a4 	.word	0x200000a4
 8001880:	200001a0 	.word	0x200001a0

08001884 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10a      	bne.n	80018aa <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001898:	f383 8811 	msr	BASEPRI, r3
 800189c:	f3bf 8f6f 	isb	sy
 80018a0:	f3bf 8f4f 	dsb	sy
 80018a4:	60fb      	str	r3, [r7, #12]
    }
 80018a6:	bf00      	nop
 80018a8:	e7fe      	b.n	80018a8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <vTaskPlaceOnEventList+0x44>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	3318      	adds	r3, #24
 80018b0:	4619      	mov	r1, r3
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7fe fe6c 	bl	8000590 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80018b8:	2101      	movs	r1, #1
 80018ba:	6838      	ldr	r0, [r7, #0]
 80018bc:	f000 fc10 	bl	80020e0 <prvAddCurrentTaskToDelayedList>
}
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	200000a4 	.word	0x200000a4

080018cc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10a      	bne.n	80018f4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80018de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018e2:	f383 8811 	msr	BASEPRI, r3
 80018e6:	f3bf 8f6f 	isb	sy
 80018ea:	f3bf 8f4f 	dsb	sy
 80018ee:	617b      	str	r3, [r7, #20]
    }
 80018f0:	bf00      	nop
 80018f2:	e7fe      	b.n	80018f2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <vTaskPlaceOnEventListRestricted+0x58>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3318      	adds	r3, #24
 80018fa:	4619      	mov	r1, r3
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f7fe fe23 	bl	8000548 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8001908:	f04f 33ff 	mov.w	r3, #4294967295
 800190c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800190e:	2024      	movs	r0, #36	; 0x24
 8001910:	f003 f8c0 	bl	8004a94 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	68b8      	ldr	r0, [r7, #8]
 8001918:	f000 fbe2 	bl	80020e0 <prvAddCurrentTaskToDelayedList>
    }
 800191c:	bf00      	nop
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	200000a4 	.word	0x200000a4

08001928 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10a      	bne.n	8001954 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800193e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001942:	f383 8811 	msr	BASEPRI, r3
 8001946:	f3bf 8f6f 	isb	sy
 800194a:	f3bf 8f4f 	dsb	sy
 800194e:	60fb      	str	r3, [r7, #12]
    }
 8001950:	bf00      	nop
 8001952:	e7fe      	b.n	8001952 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	3318      	adds	r3, #24
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fe52 	bl	8000602 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800195e:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <xTaskRemoveFromEventList+0xb4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d120      	bne.n	80019a8 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	3304      	adds	r3, #4
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fe49 	bl	8000602 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4618      	mov	r0, r3
 8001974:	f003 fedc 	bl	8005730 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	2201      	movs	r2, #1
 800197e:	409a      	lsls	r2, r3
 8001980:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <xTaskRemoveFromEventList+0xb8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4313      	orrs	r3, r2
 8001986:	4a16      	ldr	r2, [pc, #88]	; (80019e0 <xTaskRemoveFromEventList+0xb8>)
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4a13      	ldr	r2, [pc, #76]	; (80019e4 <xTaskRemoveFromEventList+0xbc>)
 8001998:	441a      	add	r2, r3
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	3304      	adds	r3, #4
 800199e:	4619      	mov	r1, r3
 80019a0:	4610      	mov	r0, r2
 80019a2:	f7fe fdd1 	bl	8000548 <vListInsertEnd>
 80019a6:	e005      	b.n	80019b4 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	3318      	adds	r3, #24
 80019ac:	4619      	mov	r1, r3
 80019ae:	480e      	ldr	r0, [pc, #56]	; (80019e8 <xTaskRemoveFromEventList+0xc0>)
 80019b0:	f7fe fdca 	bl	8000548 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <xTaskRemoveFromEventList+0xc4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	429a      	cmp	r2, r3
 80019c0:	d905      	bls.n	80019ce <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80019c2:	2301      	movs	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <xTaskRemoveFromEventList+0xc8>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	e001      	b.n	80019d2 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80019d2:	697b      	ldr	r3, [r7, #20]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	200001a4 	.word	0x200001a4
 80019e0:	20000184 	.word	0x20000184
 80019e4:	200000a8 	.word	0x200000a8
 80019e8:	2000013c 	.word	0x2000013c
 80019ec:	200000a4 	.word	0x200000a4
 80019f0:	20000190 	.word	0x20000190

080019f4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <vTaskInternalSetTimeOutState+0x24>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <vTaskInternalSetTimeOutState+0x28>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	605a      	str	r2, [r3, #4]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	20000194 	.word	0x20000194
 8001a1c:	20000180 	.word	0x20000180

08001a20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10a      	bne.n	8001a46 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a34:	f383 8811 	msr	BASEPRI, r3
 8001a38:	f3bf 8f6f 	isb	sy
 8001a3c:	f3bf 8f4f 	dsb	sy
 8001a40:	613b      	str	r3, [r7, #16]
    }
 8001a42:	bf00      	nop
 8001a44:	e7fe      	b.n	8001a44 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10a      	bne.n	8001a62 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a50:	f383 8811 	msr	BASEPRI, r3
 8001a54:	f3bf 8f6f 	isb	sy
 8001a58:	f3bf 8f4f 	dsb	sy
 8001a5c:	60fb      	str	r3, [r7, #12]
    }
 8001a5e:	bf00      	nop
 8001a60:	e7fe      	b.n	8001a60 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001a62:	f001 f877 	bl	8002b54 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001a66:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <xTaskCheckForTimeOut+0xc4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7e:	d102      	bne.n	8001a86 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
 8001a84:	e026      	b.n	8001ad4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <xTaskCheckForTimeOut+0xc8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d00a      	beq.n	8001aa8 <xTaskCheckForTimeOut+0x88>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d305      	bcc.n	8001aa8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	e015      	b.n	8001ad4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d20b      	bcs.n	8001aca <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	1ad2      	subs	r2, r2, r3
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ff98 	bl	80019f4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
 8001ac8:	e004      	b.n	8001ad4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001ad4:	f001 f86e 	bl	8002bb4 <vPortExitCritical>

    return xReturn;
 8001ad8:	69fb      	ldr	r3, [r7, #28]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3720      	adds	r7, #32
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000180 	.word	0x20000180
 8001ae8:	20000194 	.word	0x20000194

08001aec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <vTaskMissedYield+0x14>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	20000190 	.word	0x20000190

08001b04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001b0c:	f000 f852 	bl	8001bb4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <prvIdleTask+0x28>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d9f9      	bls.n	8001b0c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <prvIdleTask+0x2c>)
 8001b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	f3bf 8f4f 	dsb	sy
 8001b24:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001b28:	e7f0      	b.n	8001b0c <prvIdleTask+0x8>
 8001b2a:	bf00      	nop
 8001b2c:	200000a8 	.word	0x200000a8
 8001b30:	e000ed04 	.word	0xe000ed04

08001b34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	e00c      	b.n	8001b5a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <prvInitialiseTaskLists+0x60>)
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fccd 	bl	80004ee <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3301      	adds	r3, #1
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d9ef      	bls.n	8001b40 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001b60:	480d      	ldr	r0, [pc, #52]	; (8001b98 <prvInitialiseTaskLists+0x64>)
 8001b62:	f7fe fcc4 	bl	80004ee <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001b66:	480d      	ldr	r0, [pc, #52]	; (8001b9c <prvInitialiseTaskLists+0x68>)
 8001b68:	f7fe fcc1 	bl	80004ee <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001b6c:	480c      	ldr	r0, [pc, #48]	; (8001ba0 <prvInitialiseTaskLists+0x6c>)
 8001b6e:	f7fe fcbe 	bl	80004ee <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001b72:	480c      	ldr	r0, [pc, #48]	; (8001ba4 <prvInitialiseTaskLists+0x70>)
 8001b74:	f7fe fcbb 	bl	80004ee <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001b78:	480b      	ldr	r0, [pc, #44]	; (8001ba8 <prvInitialiseTaskLists+0x74>)
 8001b7a:	f7fe fcb8 	bl	80004ee <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <prvInitialiseTaskLists+0x78>)
 8001b80:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <prvInitialiseTaskLists+0x64>)
 8001b82:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001b84:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <prvInitialiseTaskLists+0x7c>)
 8001b86:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <prvInitialiseTaskLists+0x68>)
 8001b88:	601a      	str	r2, [r3, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200000a8 	.word	0x200000a8
 8001b98:	2000010c 	.word	0x2000010c
 8001b9c:	20000120 	.word	0x20000120
 8001ba0:	2000013c 	.word	0x2000013c
 8001ba4:	20000150 	.word	0x20000150
 8001ba8:	20000168 	.word	0x20000168
 8001bac:	20000134 	.word	0x20000134
 8001bb0:	20000138 	.word	0x20000138

08001bb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001bba:	e019      	b.n	8001bf0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001bbc:	f000 ffca 	bl	8002b54 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <prvCheckTasksWaitingTermination+0x50>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fd18 	bl	8000602 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <prvCheckTasksWaitingTermination+0x54>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <prvCheckTasksWaitingTermination+0x54>)
 8001bda:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <prvCheckTasksWaitingTermination+0x58>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <prvCheckTasksWaitingTermination+0x58>)
 8001be4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001be6:	f000 ffe5 	bl	8002bb4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f810 	bl	8001c10 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <prvCheckTasksWaitingTermination+0x58>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1e1      	bne.n	8001bbc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000150 	.word	0x20000150
 8001c08:	2000017c 	.word	0x2000017c
 8001c0c:	20000164 	.word	0x20000164

08001c10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f001 f9a5 	bl	8002f6c <vPortFree>
                vPortFree( pxTCB );
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f001 f9a2 	bl	8002f6c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c34:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <prvResetNextTaskUnblockTime+0x30>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d104      	bne.n	8001c48 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <prvResetNextTaskUnblockTime+0x34>)
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295
 8001c44:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001c46:	e005      	b.n	8001c54 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <prvResetNextTaskUnblockTime+0x30>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <prvResetNextTaskUnblockTime+0x34>)
 8001c52:	6013      	str	r3, [r2, #0]
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000134 	.word	0x20000134
 8001c64:	2000019c 	.word	0x2000019c

08001c68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <xTaskGetSchedulerState+0x34>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d102      	bne.n	8001c7c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001c76:	2301      	movs	r3, #1
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	e008      	b.n	8001c8e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <xTaskGetSchedulerState+0x38>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001c84:	2302      	movs	r3, #2
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	e001      	b.n	8001c8e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001c8e:	687b      	ldr	r3, [r7, #4]
    }
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	20000188 	.word	0x20000188
 8001ca0:	200001a4 	.word	0x200001a4

08001ca4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d068      	beq.n	8001d8c <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001cba:	4b37      	ldr	r3, [pc, #220]	; (8001d98 <xTaskPriorityDisinherit+0xf4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d00a      	beq.n	8001cda <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8001cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc8:	f383 8811 	msr	BASEPRI, r3
 8001ccc:	f3bf 8f6f 	isb	sy
 8001cd0:	f3bf 8f4f 	dsb	sy
 8001cd4:	60fb      	str	r3, [r7, #12]
    }
 8001cd6:	bf00      	nop
 8001cd8:	e7fe      	b.n	8001cd8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10a      	bne.n	8001cf8 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8001ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ce6:	f383 8811 	msr	BASEPRI, r3
 8001cea:	f3bf 8f6f 	isb	sy
 8001cee:	f3bf 8f4f 	dsb	sy
 8001cf2:	60bb      	str	r3, [r7, #8]
    }
 8001cf4:	bf00      	nop
 8001cf6:	e7fe      	b.n	8001cf6 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfc:	1e5a      	subs	r2, r3, #1
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d03e      	beq.n	8001d8c <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d13a      	bne.n	8001d8c <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fc71 	bl	8000602 <uxListRemove>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10a      	bne.n	8001d3c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43da      	mvns	r2, r3
 8001d32:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <xTaskPriorityDisinherit+0xf8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4013      	ands	r3, r2
 8001d38:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <xTaskPriorityDisinherit+0xf8>)
 8001d3a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	204a      	movs	r0, #74	; 0x4a
 8001d42:	f002 fec5 	bl	8004ad0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	f1c3 0205 	rsb	r2, r3, #5
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5e:	2201      	movs	r2, #1
 8001d60:	409a      	lsls	r2, r3
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <xTaskPriorityDisinherit+0xf8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	4a0c      	ldr	r2, [pc, #48]	; (8001d9c <xTaskPriorityDisinherit+0xf8>)
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4a09      	ldr	r2, [pc, #36]	; (8001da0 <xTaskPriorityDisinherit+0xfc>)
 8001d7a:	441a      	add	r2, r3
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	3304      	adds	r3, #4
 8001d80:	4619      	mov	r1, r3
 8001d82:	4610      	mov	r0, r2
 8001d84:	f7fe fbe0 	bl	8000548 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001d8c:	697b      	ldr	r3, [r7, #20]
    }
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200000a4 	.word	0x200000a4
 8001d9c:	20000184 	.word	0x20000184
 8001da0:	200000a8 	.word	0x200000a8

08001da4 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00a      	beq.n	8001dce <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8001db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dbc:	f383 8811 	msr	BASEPRI, r3
 8001dc0:	f3bf 8f6f 	isb	sy
 8001dc4:	f3bf 8f4f 	dsb	sy
 8001dc8:	613b      	str	r3, [r7, #16]
    }
 8001dca:	bf00      	nop
 8001dcc:	e7fe      	b.n	8001dcc <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8001dce:	f000 fec1 	bl	8002b54 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001dd2:	4b36      	ldr	r3, [pc, #216]	; (8001eac <xTaskGenericNotifyWait+0x108>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4413      	add	r3, r2
 8001dda:	3354      	adds	r3, #84	; 0x54
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d022      	beq.n	8001e2a <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8001de4:	4b31      	ldr	r3, [pc, #196]	; (8001eac <xTaskGenericNotifyWait+0x108>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	3214      	adds	r2, #20
 8001dec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	43d2      	mvns	r2, r2
 8001df4:	4011      	ands	r1, r2
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	3214      	adds	r2, #20
 8001dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8001dfe:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <xTaskGenericNotifyWait+0x108>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4413      	add	r3, r2
 8001e06:	3354      	adds	r3, #84	; 0x54
 8001e08:	2201      	movs	r2, #1
 8001e0a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00b      	beq.n	8001e2a <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001e12:	2101      	movs	r1, #1
 8001e14:	6a38      	ldr	r0, [r7, #32]
 8001e16:	f000 f963 	bl	80020e0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8001e1a:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <xTaskGenericNotifyWait+0x10c>)
 8001e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	f3bf 8f4f 	dsb	sy
 8001e26:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001e2a:	f000 fec3 	bl	8002bb4 <vPortExitCritical>

        taskENTER_CRITICAL();
 8001e2e:	f000 fe91 	bl	8002b54 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	2040      	movs	r0, #64	; 0x40
 8001e40:	f002 ff52 	bl	8004ce8 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d007      	beq.n	8001e5a <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <xTaskGenericNotifyWait+0x108>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	3214      	adds	r2, #20
 8001e52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001e5a:	4b14      	ldr	r3, [pc, #80]	; (8001eac <xTaskGenericNotifyWait+0x108>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4413      	add	r3, r2
 8001e62:	3354      	adds	r3, #84	; 0x54
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d002      	beq.n	8001e72 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	e00e      	b.n	8001e90 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <xTaskGenericNotifyWait+0x108>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	3214      	adds	r2, #20
 8001e7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	43d2      	mvns	r2, r2
 8001e82:	4011      	ands	r1, r2
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	3214      	adds	r2, #20
 8001e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <xTaskGenericNotifyWait+0x108>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4413      	add	r3, r2
 8001e98:	3354      	adds	r3, #84	; 0x54
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001e9e:	f000 fe89 	bl	8002bb4 <vPortExitCritical>

        return xReturn;
 8001ea2:	697b      	ldr	r3, [r7, #20]
    }
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	200000a4 	.word	0x200000a4
 8001eb0:	e000ed04 	.word	0xe000ed04

08001eb4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b092      	sub	sp, #72	; 0x48
 8001eb8:	af02      	add	r7, sp, #8
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10a      	bne.n	8001ee2 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8001ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed0:	f383 8811 	msr	BASEPRI, r3
 8001ed4:	f3bf 8f6f 	isb	sy
 8001ed8:	f3bf 8f4f 	dsb	sy
 8001edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8001ede:	bf00      	nop
 8001ee0:	e7fe      	b.n	8001ee0 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00a      	beq.n	8001efe <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8001ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eec:	f383 8811 	msr	BASEPRI, r3
 8001ef0:	f3bf 8f6f 	isb	sy
 8001ef4:	f3bf 8f4f 	dsb	sy
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001efa:	bf00      	nop
 8001efc:	e7fe      	b.n	8001efc <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001efe:	f000 ff15 	bl	8002d2c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8001f06:	f3ef 8211 	mrs	r2, BASEPRI
 8001f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f0e:	f383 8811 	msr	BASEPRI, r3
 8001f12:	f3bf 8f6f 	isb	sy
 8001f16:	f3bf 8f4f 	dsb	sy
 8001f1a:	627a      	str	r2, [r7, #36]	; 0x24
 8001f1c:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001f20:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8001f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d006      	beq.n	8001f36 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	3214      	adds	r2, #20
 8001f2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f34:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001f36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3354      	adds	r3, #84	; 0x54
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8001f44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	4413      	add	r3, r2
 8001f4a:	3354      	adds	r3, #84	; 0x54
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d83b      	bhi.n	8001fce <xTaskGenericNotifyFromISR+0x11a>
 8001f56:	a201      	add	r2, pc, #4	; (adr r2, 8001f5c <xTaskGenericNotifyFromISR+0xa8>)
 8001f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5c:	08001fed 	.word	0x08001fed
 8001f60:	08001f71 	.word	0x08001f71
 8001f64:	08001f8d 	.word	0x08001f8d
 8001f68:	08001fa5 	.word	0x08001fa5
 8001f6c:	08001fb3 	.word	0x08001fb3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8001f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	3214      	adds	r2, #20
 8001f76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	ea42 0103 	orr.w	r1, r2, r3
 8001f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	3214      	adds	r2, #20
 8001f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001f8a:	e032      	b.n	8001ff2 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	3214      	adds	r2, #20
 8001f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f96:	1c59      	adds	r1, r3, #1
 8001f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	3214      	adds	r2, #20
 8001f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001fa2:	e026      	b.n	8001ff2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	3214      	adds	r2, #20
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001fb0:	e01f      	b.n	8001ff2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8001fb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d006      	beq.n	8001fc8 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	3214      	adds	r2, #20
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001fc6:	e014      	b.n	8001ff2 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8001fcc:	e011      	b.n	8001ff2 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8001fce:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <xTaskGenericNotifyFromISR+0x210>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00c      	beq.n	8001ff0 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8001fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fda:	f383 8811 	msr	BASEPRI, r3
 8001fde:	f3bf 8f6f 	isb	sy
 8001fe2:	f3bf 8f4f 	dsb	sy
 8001fe6:	61fb      	str	r3, [r7, #28]
    }
 8001fe8:	bf00      	nop
 8001fea:	e7fe      	b.n	8001fea <xTaskGenericNotifyFromISR+0x136>
                    break;
 8001fec:	bf00      	nop
 8001fee:	e000      	b.n	8001ff2 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8001ff0:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8001ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f003 fc3d 	bl	8005874 <SEGGER_SYSVIEW_ShrinkId>
 8001ffa:	78f9      	ldrb	r1, [r7, #3]
 8001ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ffe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002000:	9201      	str	r2, [sp, #4]
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	460b      	mov	r3, r1
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	4601      	mov	r1, r0
 800200a:	203f      	movs	r0, #63	; 0x3f
 800200c:	f002 fefe 	bl	8004e0c <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002010:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002014:	2b01      	cmp	r3, #1
 8002016:	d149      	bne.n	80020ac <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800201a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00a      	beq.n	8002036 <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 8002020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002024:	f383 8811 	msr	BASEPRI, r3
 8002028:	f3bf 8f6f 	isb	sy
 800202c:	f3bf 8f4f 	dsb	sy
 8002030:	61bb      	str	r3, [r7, #24]
    }
 8002032:	bf00      	nop
 8002034:	e7fe      	b.n	8002034 <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002036:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <xTaskGenericNotifyFromISR+0x214>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d120      	bne.n	8002080 <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800203e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002040:	3304      	adds	r3, #4
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe fadd 	bl	8000602 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800204a:	4618      	mov	r0, r3
 800204c:	f003 fb70 	bl	8005730 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	2201      	movs	r2, #1
 8002056:	409a      	lsls	r2, r3
 8002058:	4b1c      	ldr	r3, [pc, #112]	; (80020cc <xTaskGenericNotifyFromISR+0x218>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4313      	orrs	r3, r2
 800205e:	4a1b      	ldr	r2, [pc, #108]	; (80020cc <xTaskGenericNotifyFromISR+0x218>)
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4a18      	ldr	r2, [pc, #96]	; (80020d0 <xTaskGenericNotifyFromISR+0x21c>)
 8002070:	441a      	add	r2, r3
 8002072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002074:	3304      	adds	r3, #4
 8002076:	4619      	mov	r1, r3
 8002078:	4610      	mov	r0, r2
 800207a:	f7fe fa65 	bl	8000548 <vListInsertEnd>
 800207e:	e005      	b.n	800208c <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002082:	3318      	adds	r3, #24
 8002084:	4619      	mov	r1, r3
 8002086:	4813      	ldr	r0, [pc, #76]	; (80020d4 <xTaskGenericNotifyFromISR+0x220>)
 8002088:	f7fe fa5e 	bl	8000548 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800208c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800208e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <xTaskGenericNotifyFromISR+0x224>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	429a      	cmp	r2, r3
 8002098:	d908      	bls.n	80020ac <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800209a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80020a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80020a6:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <xTaskGenericNotifyFromISR+0x228>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ae:	617b      	str	r3, [r7, #20]
        __asm volatile
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f383 8811 	msr	BASEPRI, r3
    }
 80020b6:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80020b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80020ba:	4618      	mov	r0, r3
 80020bc:	3740      	adds	r7, #64	; 0x40
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000180 	.word	0x20000180
 80020c8:	200001a4 	.word	0x200001a4
 80020cc:	20000184 	.word	0x20000184
 80020d0:	200000a8 	.word	0x200000a8
 80020d4:	2000013c 	.word	0x2000013c
 80020d8:	200000a4 	.word	0x200000a4
 80020dc:	20000190 	.word	0x20000190

080020e0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80020ea:	4b32      	ldr	r3, [pc, #200]	; (80021b4 <prvAddCurrentTaskToDelayedList+0xd4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020f0:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	3304      	adds	r3, #4
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fa83 	bl	8000602 <uxListRemove>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10b      	bne.n	800211a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002102:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	2201      	movs	r2, #1
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43da      	mvns	r2, r3
 8002110:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <prvAddCurrentTaskToDelayedList+0xdc>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4013      	ands	r3, r2
 8002116:	4a29      	ldr	r2, [pc, #164]	; (80021bc <prvAddCurrentTaskToDelayedList+0xdc>)
 8002118:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d110      	bne.n	8002144 <prvAddCurrentTaskToDelayedList+0x64>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00d      	beq.n	8002144 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002128:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	211b      	movs	r1, #27
 800212e:	4618      	mov	r0, r3
 8002130:	f003 fb40 	bl	80057b4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002134:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	3304      	adds	r3, #4
 800213a:	4619      	mov	r1, r3
 800213c:	4820      	ldr	r0, [pc, #128]	; (80021c0 <prvAddCurrentTaskToDelayedList+0xe0>)
 800213e:	f7fe fa03 	bl	8000548 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002142:	e032      	b.n	80021aa <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800214c:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	429a      	cmp	r2, r3
 800215a:	d20f      	bcs.n	800217c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800215c:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2104      	movs	r1, #4
 8002162:	4618      	mov	r0, r3
 8002164:	f003 fb26 	bl	80057b4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002168:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <prvAddCurrentTaskToDelayedList+0xe4>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	3304      	adds	r3, #4
 8002172:	4619      	mov	r1, r3
 8002174:	4610      	mov	r0, r2
 8002176:	f7fe fa0b 	bl	8000590 <vListInsert>
}
 800217a:	e016      	b.n	80021aa <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2104      	movs	r1, #4
 8002182:	4618      	mov	r0, r3
 8002184:	f003 fb16 	bl	80057b4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002188:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	3304      	adds	r3, #4
 8002192:	4619      	mov	r1, r3
 8002194:	4610      	mov	r0, r2
 8002196:	f7fe f9fb 	bl	8000590 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800219a:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <prvAddCurrentTaskToDelayedList+0xec>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d202      	bcs.n	80021aa <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80021a4:	4a09      	ldr	r2, [pc, #36]	; (80021cc <prvAddCurrentTaskToDelayedList+0xec>)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	6013      	str	r3, [r2, #0]
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000180 	.word	0x20000180
 80021b8:	200000a4 	.word	0x200000a4
 80021bc:	20000184 	.word	0x20000184
 80021c0:	20000168 	.word	0x20000168
 80021c4:	20000138 	.word	0x20000138
 80021c8:	20000134 	.word	0x20000134
 80021cc:	2000019c 	.word	0x2000019c

080021d0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80021da:	f000 fad5 	bl	8002788 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <xTimerCreateTimerTask+0x54>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <xTimerCreateTimerTask+0x58>)
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	2302      	movs	r3, #2
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	2300      	movs	r3, #0
 80021f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021f4:	490d      	ldr	r1, [pc, #52]	; (800222c <xTimerCreateTimerTask+0x5c>)
 80021f6:	480e      	ldr	r0, [pc, #56]	; (8002230 <xTimerCreateTimerTask+0x60>)
 80021f8:	f7fe ff88 	bl	800110c <xTaskCreate>
 80021fc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10a      	bne.n	800221a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8002204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002208:	f383 8811 	msr	BASEPRI, r3
 800220c:	f3bf 8f6f 	isb	sy
 8002210:	f3bf 8f4f 	dsb	sy
 8002214:	603b      	str	r3, [r7, #0]
    }
 8002216:	bf00      	nop
 8002218:	e7fe      	b.n	8002218 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800221a:	687b      	ldr	r3, [r7, #4]
    }
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	200001d8 	.word	0x200001d8
 8002228:	200001dc 	.word	0x200001dc
 800222c:	08007430 	.word	0x08007430
 8002230:	08002369 	.word	0x08002369

08002234 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8002242:	2300      	movs	r3, #0
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10a      	bne.n	8002262 <xTimerGenericCommand+0x2e>
        __asm volatile
 800224c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002250:	f383 8811 	msr	BASEPRI, r3
 8002254:	f3bf 8f6f 	isb	sy
 8002258:	f3bf 8f4f 	dsb	sy
 800225c:	623b      	str	r3, [r7, #32]
    }
 800225e:	bf00      	nop
 8002260:	e7fe      	b.n	8002260 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8002262:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <xTimerGenericCommand+0x98>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d02a      	beq.n	80022c0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b05      	cmp	r3, #5
 800227a:	dc18      	bgt.n	80022ae <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800227c:	f7ff fcf4 	bl	8001c68 <xTaskGetSchedulerState>
 8002280:	4603      	mov	r3, r0
 8002282:	2b02      	cmp	r3, #2
 8002284:	d109      	bne.n	800229a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002286:	4b11      	ldr	r3, [pc, #68]	; (80022cc <xTimerGenericCommand+0x98>)
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	f107 0114 	add.w	r1, r7, #20
 800228e:	2300      	movs	r3, #0
 8002290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002292:	f7fe fad1 	bl	8000838 <xQueueGenericSend>
 8002296:	6278      	str	r0, [r7, #36]	; 0x24
 8002298:	e012      	b.n	80022c0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800229a:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <xTimerGenericCommand+0x98>)
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	f107 0114 	add.w	r1, r7, #20
 80022a2:	2300      	movs	r3, #0
 80022a4:	2200      	movs	r2, #0
 80022a6:	f7fe fac7 	bl	8000838 <xQueueGenericSend>
 80022aa:	6278      	str	r0, [r7, #36]	; 0x24
 80022ac:	e008      	b.n	80022c0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80022ae:	4b07      	ldr	r3, [pc, #28]	; (80022cc <xTimerGenericCommand+0x98>)
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	f107 0114 	add.w	r1, r7, #20
 80022b6:	2300      	movs	r3, #0
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	f7fe fbe3 	bl	8000a84 <xQueueGenericSendFromISR>
 80022be:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80022c2:	4618      	mov	r0, r3
 80022c4:	3728      	adds	r7, #40	; 0x28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200001d8 	.word	0x200001d8

080022d0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af02      	add	r7, sp, #8
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022da:	4b22      	ldr	r3, [pc, #136]	; (8002364 <prvProcessExpiredTimer+0x94>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	3304      	adds	r3, #4
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe f98a 	bl	8000602 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d022      	beq.n	8002342 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	699a      	ldr	r2, [r3, #24]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	18d1      	adds	r1, r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	6978      	ldr	r0, [r7, #20]
 800230a:	f000 f8d1 	bl	80024b0 <prvInsertTimerInActiveList>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d01f      	beq.n	8002354 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002314:	2300      	movs	r3, #0
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	2300      	movs	r3, #0
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	2100      	movs	r1, #0
 800231e:	6978      	ldr	r0, [r7, #20]
 8002320:	f7ff ff88 	bl	8002234 <xTimerGenericCommand>
 8002324:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d113      	bne.n	8002354 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800232c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002330:	f383 8811 	msr	BASEPRI, r3
 8002334:	f3bf 8f6f 	isb	sy
 8002338:	f3bf 8f4f 	dsb	sy
 800233c:	60fb      	str	r3, [r7, #12]
    }
 800233e:	bf00      	nop
 8002340:	e7fe      	b.n	8002340 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002348:	f023 0301 	bic.w	r3, r3, #1
 800234c:	b2da      	uxtb	r2, r3
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	6978      	ldr	r0, [r7, #20]
 800235a:	4798      	blx	r3
    }
 800235c:	bf00      	nop
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	200001d0 	.word	0x200001d0

08002368 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002370:	f107 0308 	add.w	r3, r7, #8
 8002374:	4618      	mov	r0, r3
 8002376:	f000 f857 	bl	8002428 <prvGetNextExpireTime>
 800237a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4619      	mov	r1, r3
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 f803 	bl	800238c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002386:	f000 f8d5 	bl	8002534 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800238a:	e7f1      	b.n	8002370 <prvTimerTask+0x8>

0800238c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002396:	f7ff f87f 	bl	8001498 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800239a:	f107 0308 	add.w	r3, r7, #8
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f866 	bl	8002470 <prvSampleTimeNow>
 80023a4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d130      	bne.n	800240e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10a      	bne.n	80023c8 <prvProcessTimerOrBlockTask+0x3c>
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d806      	bhi.n	80023c8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80023ba:	f7ff f87b 	bl	80014b4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80023be:	68f9      	ldr	r1, [r7, #12]
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ff85 	bl	80022d0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80023c6:	e024      	b.n	8002412 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d008      	beq.n	80023e0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80023ce:	4b13      	ldr	r3, [pc, #76]	; (800241c <prvProcessTimerOrBlockTask+0x90>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <prvProcessTimerOrBlockTask+0x50>
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <prvProcessTimerOrBlockTask+0x52>
 80023dc:	2300      	movs	r3, #0
 80023de:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <prvProcessTimerOrBlockTask+0x94>)
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	4619      	mov	r1, r3
 80023ee:	f7fe fe59 	bl	80010a4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80023f2:	f7ff f85f 	bl	80014b4 <xTaskResumeAll>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10a      	bne.n	8002412 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <prvProcessTimerOrBlockTask+0x98>)
 80023fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	f3bf 8f6f 	isb	sy
    }
 800240c:	e001      	b.n	8002412 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800240e:	f7ff f851 	bl	80014b4 <xTaskResumeAll>
    }
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200001d4 	.word	0x200001d4
 8002420:	200001d8 	.word	0x200001d8
 8002424:	e000ed04 	.word	0xe000ed04

08002428 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002430:	4b0e      	ldr	r3, [pc, #56]	; (800246c <prvGetNextExpireTime+0x44>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <prvGetNextExpireTime+0x16>
 800243a:	2201      	movs	r2, #1
 800243c:	e000      	b.n	8002440 <prvGetNextExpireTime+0x18>
 800243e:	2200      	movs	r2, #0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d105      	bne.n	8002458 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800244c:	4b07      	ldr	r3, [pc, #28]	; (800246c <prvGetNextExpireTime+0x44>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	e001      	b.n	800245c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800245c:	68fb      	ldr	r3, [r7, #12]
    }
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	200001d0 	.word	0x200001d0

08002470 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002478:	f7ff f8bc 	bl	80015f4 <xTaskGetTickCount>
 800247c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <prvSampleTimeNow+0x3c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	429a      	cmp	r2, r3
 8002486:	d205      	bcs.n	8002494 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002488:	f000 f91a 	bl	80026c0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e002      	b.n	800249a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800249a:	4a04      	ldr	r2, [pc, #16]	; (80024ac <prvSampleTimeNow+0x3c>)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80024a0:	68fb      	ldr	r3, [r7, #12]
    }
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200001e0 	.word	0x200001e0

080024b0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d812      	bhi.n	80024fc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	1ad2      	subs	r2, r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d302      	bcc.n	80024ea <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80024e4:	2301      	movs	r3, #1
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	e01b      	b.n	8002522 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <prvInsertTimerInActiveList+0x7c>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	3304      	adds	r3, #4
 80024f2:	4619      	mov	r1, r3
 80024f4:	4610      	mov	r0, r2
 80024f6:	f7fe f84b 	bl	8000590 <vListInsert>
 80024fa:	e012      	b.n	8002522 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d206      	bcs.n	8002512 <prvInsertTimerInActiveList+0x62>
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d302      	bcc.n	8002512 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800250c:	2301      	movs	r3, #1
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	e007      	b.n	8002522 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <prvInsertTimerInActiveList+0x80>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	3304      	adds	r3, #4
 800251a:	4619      	mov	r1, r3
 800251c:	4610      	mov	r0, r2
 800251e:	f7fe f837 	bl	8000590 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002522:	697b      	ldr	r3, [r7, #20]
    }
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	200001d4 	.word	0x200001d4
 8002530:	200001d0 	.word	0x200001d0

08002534 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002534:	b580      	push	{r7, lr}
 8002536:	b08c      	sub	sp, #48	; 0x30
 8002538:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800253a:	e0ae      	b.n	800269a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f2c0 80aa 	blt.w	8002698 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d004      	beq.n	800255a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	3304      	adds	r3, #4
 8002554:	4618      	mov	r0, r3
 8002556:	f7fe f854 	bl	8000602 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff87 	bl	8002470 <prvSampleTimeNow>
 8002562:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b09      	cmp	r3, #9
 8002568:	f200 8097 	bhi.w	800269a <prvProcessReceivedCommands+0x166>
 800256c:	a201      	add	r2, pc, #4	; (adr r2, 8002574 <prvProcessReceivedCommands+0x40>)
 800256e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002572:	bf00      	nop
 8002574:	0800259d 	.word	0x0800259d
 8002578:	0800259d 	.word	0x0800259d
 800257c:	0800259d 	.word	0x0800259d
 8002580:	08002611 	.word	0x08002611
 8002584:	08002625 	.word	0x08002625
 8002588:	0800266f 	.word	0x0800266f
 800258c:	0800259d 	.word	0x0800259d
 8002590:	0800259d 	.word	0x0800259d
 8002594:	08002611 	.word	0x08002611
 8002598:	08002625 	.word	0x08002625
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	18d1      	adds	r1, r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a3a      	ldr	r2, [r7, #32]
 80025ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025bc:	f7ff ff78 	bl	80024b0 <prvInsertTimerInActiveList>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d069      	beq.n	800269a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025cc:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d05e      	beq.n	800269a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	441a      	add	r2, r3
 80025e4:	2300      	movs	r3, #0
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2300      	movs	r3, #0
 80025ea:	2100      	movs	r1, #0
 80025ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025ee:	f7ff fe21 	bl	8002234 <xTimerGenericCommand>
 80025f2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d14f      	bne.n	800269a <prvProcessReceivedCommands+0x166>
        __asm volatile
 80025fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fe:	f383 8811 	msr	BASEPRI, r3
 8002602:	f3bf 8f6f 	isb	sy
 8002606:	f3bf 8f4f 	dsb	sy
 800260a:	61bb      	str	r3, [r7, #24]
    }
 800260c:	bf00      	nop
 800260e:	e7fe      	b.n	800260e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002616:	f023 0301 	bic.w	r3, r3, #1
 800261a:	b2da      	uxtb	r2, r3
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002622:	e03a      	b.n	800269a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	b2da      	uxtb	r2, r3
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10a      	bne.n	800265a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8002644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002648:	f383 8811 	msr	BASEPRI, r3
 800264c:	f3bf 8f6f 	isb	sy
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	617b      	str	r3, [r7, #20]
    }
 8002656:	bf00      	nop
 8002658:	e7fe      	b.n	8002658 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	699a      	ldr	r2, [r3, #24]
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	18d1      	adds	r1, r2, r3
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	6a3a      	ldr	r2, [r7, #32]
 8002666:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002668:	f7ff ff22 	bl	80024b0 <prvInsertTimerInActiveList>
                        break;
 800266c:	e015      	b.n	800269a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d103      	bne.n	8002684 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800267c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800267e:	f000 fc75 	bl	8002f6c <vPortFree>
 8002682:	e00a      	b.n	800269a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800268a:	f023 0301 	bic.w	r3, r3, #1
 800268e:	b2da      	uxtb	r2, r3
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002696:	e000      	b.n	800269a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002698:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800269a:	4b08      	ldr	r3, [pc, #32]	; (80026bc <prvProcessReceivedCommands+0x188>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f107 0108 	add.w	r1, r7, #8
 80026a2:	2200      	movs	r2, #0
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe faab 	bl	8000c00 <xQueueReceive>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f47f af45 	bne.w	800253c <prvProcessReceivedCommands+0x8>
        }
    }
 80026b2:	bf00      	nop
 80026b4:	bf00      	nop
 80026b6:	3728      	adds	r7, #40	; 0x28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	200001d8 	.word	0x200001d8

080026c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80026c6:	e048      	b.n	800275a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80026c8:	4b2d      	ldr	r3, [pc, #180]	; (8002780 <prvSwitchTimerLists+0xc0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026d2:	4b2b      	ldr	r3, [pc, #172]	; (8002780 <prvSwitchTimerLists+0xc0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	3304      	adds	r3, #4
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fd ff8e 	bl	8000602 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d02e      	beq.n	800275a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4413      	add	r3, r2
 8002704:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	429a      	cmp	r2, r3
 800270c:	d90e      	bls.n	800272c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800271a:	4b19      	ldr	r3, [pc, #100]	; (8002780 <prvSwitchTimerLists+0xc0>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3304      	adds	r3, #4
 8002722:	4619      	mov	r1, r3
 8002724:	4610      	mov	r0, r2
 8002726:	f7fd ff33 	bl	8000590 <vListInsert>
 800272a:	e016      	b.n	800275a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800272c:	2300      	movs	r3, #0
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	2300      	movs	r3, #0
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	2100      	movs	r1, #0
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f7ff fd7c 	bl	8002234 <xTimerGenericCommand>
 800273c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10a      	bne.n	800275a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8002744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002748:	f383 8811 	msr	BASEPRI, r3
 800274c:	f3bf 8f6f 	isb	sy
 8002750:	f3bf 8f4f 	dsb	sy
 8002754:	603b      	str	r3, [r7, #0]
    }
 8002756:	bf00      	nop
 8002758:	e7fe      	b.n	8002758 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <prvSwitchTimerLists+0xc0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1b1      	bne.n	80026c8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <prvSwitchTimerLists+0xc0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <prvSwitchTimerLists+0xc4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a04      	ldr	r2, [pc, #16]	; (8002780 <prvSwitchTimerLists+0xc0>)
 8002770:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002772:	4a04      	ldr	r2, [pc, #16]	; (8002784 <prvSwitchTimerLists+0xc4>)
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	6013      	str	r3, [r2, #0]
    }
 8002778:	bf00      	nop
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	200001d0 	.word	0x200001d0
 8002784:	200001d4 	.word	0x200001d4

08002788 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800278c:	f000 f9e2 	bl	8002b54 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002790:	4b12      	ldr	r3, [pc, #72]	; (80027dc <prvCheckForValidListAndQueue+0x54>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d11d      	bne.n	80027d4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002798:	4811      	ldr	r0, [pc, #68]	; (80027e0 <prvCheckForValidListAndQueue+0x58>)
 800279a:	f7fd fea8 	bl	80004ee <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800279e:	4811      	ldr	r0, [pc, #68]	; (80027e4 <prvCheckForValidListAndQueue+0x5c>)
 80027a0:	f7fd fea5 	bl	80004ee <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80027a4:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <prvCheckForValidListAndQueue+0x60>)
 80027a6:	4a0e      	ldr	r2, [pc, #56]	; (80027e0 <prvCheckForValidListAndQueue+0x58>)
 80027a8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <prvCheckForValidListAndQueue+0x64>)
 80027ac:	4a0d      	ldr	r2, [pc, #52]	; (80027e4 <prvCheckForValidListAndQueue+0x5c>)
 80027ae:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80027b0:	2200      	movs	r2, #0
 80027b2:	210c      	movs	r1, #12
 80027b4:	200a      	movs	r0, #10
 80027b6:	f7fd ffb7 	bl	8000728 <xQueueGenericCreate>
 80027ba:	4603      	mov	r3, r0
 80027bc:	4a07      	ldr	r2, [pc, #28]	; (80027dc <prvCheckForValidListAndQueue+0x54>)
 80027be:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <prvCheckForValidListAndQueue+0x54>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80027c8:	4b04      	ldr	r3, [pc, #16]	; (80027dc <prvCheckForValidListAndQueue+0x54>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4908      	ldr	r1, [pc, #32]	; (80027f0 <prvCheckForValidListAndQueue+0x68>)
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fc36 	bl	8001040 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80027d4:	f000 f9ee 	bl	8002bb4 <vPortExitCritical>
    }
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	200001d8 	.word	0x200001d8
 80027e0:	200001a8 	.word	0x200001a8
 80027e4:	200001bc 	.word	0x200001bc
 80027e8:	200001d0 	.word	0x200001d0
 80027ec:	200001d4 	.word	0x200001d4
 80027f0:	08007438 	.word	0x08007438

080027f4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	3b04      	subs	r3, #4
 8002804:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800280c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	3b04      	subs	r3, #4
 8002812:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f023 0201 	bic.w	r2, r3, #1
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	3b04      	subs	r3, #4
 8002822:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002824:	4a0c      	ldr	r2, [pc, #48]	; (8002858 <pxPortInitialiseStack+0x64>)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3b14      	subs	r3, #20
 800282e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	3b04      	subs	r3, #4
 800283a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f06f 0202 	mvn.w	r2, #2
 8002842:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3b20      	subs	r3, #32
 8002848:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800284a:	68fb      	ldr	r3, [r7, #12]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	0800285d 	.word	0x0800285d

0800285c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002866:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <prvTaskExitError+0x54>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286e:	d00a      	beq.n	8002886 <prvTaskExitError+0x2a>
        __asm volatile
 8002870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002874:	f383 8811 	msr	BASEPRI, r3
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	60fb      	str	r3, [r7, #12]
    }
 8002882:	bf00      	nop
 8002884:	e7fe      	b.n	8002884 <prvTaskExitError+0x28>
        __asm volatile
 8002886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288a:	f383 8811 	msr	BASEPRI, r3
 800288e:	f3bf 8f6f 	isb	sy
 8002892:	f3bf 8f4f 	dsb	sy
 8002896:	60bb      	str	r3, [r7, #8]
    }
 8002898:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800289a:	bf00      	nop
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0fc      	beq.n	800289c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80028a2:	bf00      	nop
 80028a4:	bf00      	nop
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	20000008 	.word	0x20000008
	...

080028c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80028c0:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <pxCurrentTCBConst2>)
 80028c2:	6819      	ldr	r1, [r3, #0]
 80028c4:	6808      	ldr	r0, [r1, #0]
 80028c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028ca:	f380 8809 	msr	PSP, r0
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f04f 0000 	mov.w	r0, #0
 80028d6:	f380 8811 	msr	BASEPRI, r0
 80028da:	4770      	bx	lr
 80028dc:	f3af 8000 	nop.w

080028e0 <pxCurrentTCBConst2>:
 80028e0:	200000a4 	.word	0x200000a4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop

080028e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80028e8:	4808      	ldr	r0, [pc, #32]	; (800290c <prvPortStartFirstTask+0x24>)
 80028ea:	6800      	ldr	r0, [r0, #0]
 80028ec:	6800      	ldr	r0, [r0, #0]
 80028ee:	f380 8808 	msr	MSP, r0
 80028f2:	f04f 0000 	mov.w	r0, #0
 80028f6:	f380 8814 	msr	CONTROL, r0
 80028fa:	b662      	cpsie	i
 80028fc:	b661      	cpsie	f
 80028fe:	f3bf 8f4f 	dsb	sy
 8002902:	f3bf 8f6f 	isb	sy
 8002906:	df00      	svc	0
 8002908:	bf00      	nop
 800290a:	0000      	.short	0x0000
 800290c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002910:	bf00      	nop
 8002912:	bf00      	nop

08002914 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800291a:	4b46      	ldr	r3, [pc, #280]	; (8002a34 <xPortStartScheduler+0x120>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a46      	ldr	r2, [pc, #280]	; (8002a38 <xPortStartScheduler+0x124>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d10a      	bne.n	800293a <xPortStartScheduler+0x26>
        __asm volatile
 8002924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	613b      	str	r3, [r7, #16]
    }
 8002936:	bf00      	nop
 8002938:	e7fe      	b.n	8002938 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800293a:	4b3e      	ldr	r3, [pc, #248]	; (8002a34 <xPortStartScheduler+0x120>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a3f      	ldr	r2, [pc, #252]	; (8002a3c <xPortStartScheduler+0x128>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d10a      	bne.n	800295a <xPortStartScheduler+0x46>
        __asm volatile
 8002944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002948:	f383 8811 	msr	BASEPRI, r3
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	60fb      	str	r3, [r7, #12]
    }
 8002956:	bf00      	nop
 8002958:	e7fe      	b.n	8002958 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800295a:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <xPortStartScheduler+0x12c>)
 800295c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	22ff      	movs	r2, #255	; 0xff
 800296a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4b31      	ldr	r3, [pc, #196]	; (8002a44 <xPortStartScheduler+0x130>)
 8002980:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002982:	4b31      	ldr	r3, [pc, #196]	; (8002a48 <xPortStartScheduler+0x134>)
 8002984:	2207      	movs	r2, #7
 8002986:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002988:	e009      	b.n	800299e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800298a:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <xPortStartScheduler+0x134>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	3b01      	subs	r3, #1
 8002990:	4a2d      	ldr	r2, [pc, #180]	; (8002a48 <xPortStartScheduler+0x134>)
 8002992:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	b2db      	uxtb	r3, r3
 800299c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800299e:	78fb      	ldrb	r3, [r7, #3]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a6:	2b80      	cmp	r3, #128	; 0x80
 80029a8:	d0ef      	beq.n	800298a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80029aa:	4b27      	ldr	r3, [pc, #156]	; (8002a48 <xPortStartScheduler+0x134>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f1c3 0307 	rsb	r3, r3, #7
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d00a      	beq.n	80029cc <xPortStartScheduler+0xb8>
        __asm volatile
 80029b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ba:	f383 8811 	msr	BASEPRI, r3
 80029be:	f3bf 8f6f 	isb	sy
 80029c2:	f3bf 8f4f 	dsb	sy
 80029c6:	60bb      	str	r3, [r7, #8]
    }
 80029c8:	bf00      	nop
 80029ca:	e7fe      	b.n	80029ca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80029cc:	4b1e      	ldr	r3, [pc, #120]	; (8002a48 <xPortStartScheduler+0x134>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	4a1d      	ldr	r2, [pc, #116]	; (8002a48 <xPortStartScheduler+0x134>)
 80029d4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80029d6:	4b1c      	ldr	r3, [pc, #112]	; (8002a48 <xPortStartScheduler+0x134>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029de:	4a1a      	ldr	r2, [pc, #104]	; (8002a48 <xPortStartScheduler+0x134>)
 80029e0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80029ea:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <xPortStartScheduler+0x138>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a17      	ldr	r2, [pc, #92]	; (8002a4c <xPortStartScheduler+0x138>)
 80029f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80029f6:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <xPortStartScheduler+0x138>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a14      	ldr	r2, [pc, #80]	; (8002a4c <xPortStartScheduler+0x138>)
 80029fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002a00:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002a02:	f000 f963 	bl	8002ccc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002a06:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <xPortStartScheduler+0x13c>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002a0c:	f000 f982 	bl	8002d14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002a10:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <xPortStartScheduler+0x140>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a0f      	ldr	r2, [pc, #60]	; (8002a54 <xPortStartScheduler+0x140>)
 8002a16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002a1a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002a1c:	f7ff ff64 	bl	80028e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002a20:	f7fe fec6 	bl	80017b0 <vTaskSwitchContext>
    prvTaskExitError();
 8002a24:	f7ff ff1a 	bl	800285c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	e000ed00 	.word	0xe000ed00
 8002a38:	410fc271 	.word	0x410fc271
 8002a3c:	410fc270 	.word	0x410fc270
 8002a40:	e000e400 	.word	0xe000e400
 8002a44:	200001e4 	.word	0x200001e4
 8002a48:	200001e8 	.word	0x200001e8
 8002a4c:	e000ed20 	.word	0xe000ed20
 8002a50:	20000008 	.word	0x20000008
 8002a54:	e000ef34 	.word	0xe000ef34

08002a58 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002a5e:	4b37      	ldr	r3, [pc, #220]	; (8002b3c <vInitPrioGroupValue+0xe4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a37      	ldr	r2, [pc, #220]	; (8002b40 <vInitPrioGroupValue+0xe8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d10a      	bne.n	8002a7e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6c:	f383 8811 	msr	BASEPRI, r3
 8002a70:	f3bf 8f6f 	isb	sy
 8002a74:	f3bf 8f4f 	dsb	sy
 8002a78:	613b      	str	r3, [r7, #16]
    }
 8002a7a:	bf00      	nop
 8002a7c:	e7fe      	b.n	8002a7c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002a7e:	4b2f      	ldr	r3, [pc, #188]	; (8002b3c <vInitPrioGroupValue+0xe4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a30      	ldr	r2, [pc, #192]	; (8002b44 <vInitPrioGroupValue+0xec>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d10a      	bne.n	8002a9e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8c:	f383 8811 	msr	BASEPRI, r3
 8002a90:	f3bf 8f6f 	isb	sy
 8002a94:	f3bf 8f4f 	dsb	sy
 8002a98:	60fb      	str	r3, [r7, #12]
    }
 8002a9a:	bf00      	nop
 8002a9c:	e7fe      	b.n	8002a9c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002a9e:	4b2a      	ldr	r3, [pc, #168]	; (8002b48 <vInitPrioGroupValue+0xf0>)
 8002aa0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	22ff      	movs	r2, #255	; 0xff
 8002aae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <vInitPrioGroupValue+0xf4>)
 8002ac4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ac6:	4b22      	ldr	r3, [pc, #136]	; (8002b50 <vInitPrioGroupValue+0xf8>)
 8002ac8:	2207      	movs	r2, #7
 8002aca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002acc:	e009      	b.n	8002ae2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002ace:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <vInitPrioGroupValue+0xf8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	4a1e      	ldr	r2, [pc, #120]	; (8002b50 <vInitPrioGroupValue+0xf8>)
 8002ad6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ae2:	78fb      	ldrb	r3, [r7, #3]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aea:	2b80      	cmp	r3, #128	; 0x80
 8002aec:	d0ef      	beq.n	8002ace <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002aee:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <vInitPrioGroupValue+0xf8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f1c3 0307 	rsb	r3, r3, #7
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d00a      	beq.n	8002b10 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afe:	f383 8811 	msr	BASEPRI, r3
 8002b02:	f3bf 8f6f 	isb	sy
 8002b06:	f3bf 8f4f 	dsb	sy
 8002b0a:	60bb      	str	r3, [r7, #8]
    }
 8002b0c:	bf00      	nop
 8002b0e:	e7fe      	b.n	8002b0e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002b10:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <vInitPrioGroupValue+0xf8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	021b      	lsls	r3, r3, #8
 8002b16:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <vInitPrioGroupValue+0xf8>)
 8002b18:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <vInitPrioGroupValue+0xf8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b22:	4a0b      	ldr	r2, [pc, #44]	; (8002b50 <vInitPrioGroupValue+0xf8>)
 8002b24:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002b2e:	bf00      	nop
 8002b30:	371c      	adds	r7, #28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	e000ed00 	.word	0xe000ed00
 8002b40:	410fc271 	.word	0x410fc271
 8002b44:	410fc270 	.word	0x410fc270
 8002b48:	e000e400 	.word	0xe000e400
 8002b4c:	200001e4 	.word	0x200001e4
 8002b50:	200001e8 	.word	0x200001e8

08002b54 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
        __asm volatile
 8002b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5e:	f383 8811 	msr	BASEPRI, r3
 8002b62:	f3bf 8f6f 	isb	sy
 8002b66:	f3bf 8f4f 	dsb	sy
 8002b6a:	607b      	str	r3, [r7, #4]
    }
 8002b6c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002b6e:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <vPortEnterCritical+0x58>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	3301      	adds	r3, #1
 8002b74:	4a0d      	ldr	r2, [pc, #52]	; (8002bac <vPortEnterCritical+0x58>)
 8002b76:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <vPortEnterCritical+0x58>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d10f      	bne.n	8002ba0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <vPortEnterCritical+0x5c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <vPortEnterCritical+0x4c>
        __asm volatile
 8002b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8e:	f383 8811 	msr	BASEPRI, r3
 8002b92:	f3bf 8f6f 	isb	sy
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	603b      	str	r3, [r7, #0]
    }
 8002b9c:	bf00      	nop
 8002b9e:	e7fe      	b.n	8002b9e <vPortEnterCritical+0x4a>
    }
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	20000008 	.word	0x20000008
 8002bb0:	e000ed04 	.word	0xe000ed04

08002bb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002bba:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <vPortExitCritical+0x50>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10a      	bne.n	8002bd8 <vPortExitCritical+0x24>
        __asm volatile
 8002bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc6:	f383 8811 	msr	BASEPRI, r3
 8002bca:	f3bf 8f6f 	isb	sy
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	607b      	str	r3, [r7, #4]
    }
 8002bd4:	bf00      	nop
 8002bd6:	e7fe      	b.n	8002bd6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <vPortExitCritical+0x50>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	4a09      	ldr	r2, [pc, #36]	; (8002c04 <vPortExitCritical+0x50>)
 8002be0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <vPortExitCritical+0x50>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d105      	bne.n	8002bf6 <vPortExitCritical+0x42>
 8002bea:	2300      	movs	r3, #0
 8002bec:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f383 8811 	msr	BASEPRI, r3
    }
 8002bf4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	20000008 	.word	0x20000008
	...

08002c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002c10:	f3ef 8009 	mrs	r0, PSP
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <pxCurrentTCBConst>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	f01e 0f10 	tst.w	lr, #16
 8002c20:	bf08      	it	eq
 8002c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c2a:	6010      	str	r0, [r2, #0]
 8002c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002c34:	f380 8811 	msr	BASEPRI, r0
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	f3bf 8f6f 	isb	sy
 8002c40:	f7fe fdb6 	bl	80017b0 <vTaskSwitchContext>
 8002c44:	f04f 0000 	mov.w	r0, #0
 8002c48:	f380 8811 	msr	BASEPRI, r0
 8002c4c:	bc09      	pop	{r0, r3}
 8002c4e:	6819      	ldr	r1, [r3, #0]
 8002c50:	6808      	ldr	r0, [r1, #0]
 8002c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c56:	f01e 0f10 	tst.w	lr, #16
 8002c5a:	bf08      	it	eq
 8002c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002c60:	f380 8809 	msr	PSP, r0
 8002c64:	f3bf 8f6f 	isb	sy
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	f3af 8000 	nop.w

08002c70 <pxCurrentTCBConst>:
 8002c70:	200000a4 	.word	0x200000a4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002c74:	bf00      	nop
 8002c76:	bf00      	nop

08002c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
        __asm volatile
 8002c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c82:	f383 8811 	msr	BASEPRI, r3
 8002c86:	f3bf 8f6f 	isb	sy
 8002c8a:	f3bf 8f4f 	dsb	sy
 8002c8e:	607b      	str	r3, [r7, #4]
    }
 8002c90:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002c92:	f002 fc33 	bl	80054fc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002c96:	f7fe fccf 	bl	8001638 <xTaskIncrementTick>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d006      	beq.n	8002cae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002ca0:	f002 fc8a 	bl	80055b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002ca4:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <SysTick_Handler+0x50>)
 8002ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	e001      	b.n	8002cb2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002cae:	f002 fc67 	bl	8005580 <SEGGER_SYSVIEW_RecordExitISR>
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	f383 8811 	msr	BASEPRI, r3
    }
 8002cbc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	e000ed04 	.word	0xe000ed04

08002ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <vPortSetupTimerInterrupt+0x34>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <vPortSetupTimerInterrupt+0x38>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <vPortSetupTimerInterrupt+0x3c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <vPortSetupTimerInterrupt+0x40>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	099b      	lsrs	r3, r3, #6
 8002ce8:	4a09      	ldr	r2, [pc, #36]	; (8002d10 <vPortSetupTimerInterrupt+0x44>)
 8002cea:	3b01      	subs	r3, #1
 8002cec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002cee:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <vPortSetupTimerInterrupt+0x34>)
 8002cf0:	2207      	movs	r2, #7
 8002cf2:	601a      	str	r2, [r3, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	e000e010 	.word	0xe000e010
 8002d04:	e000e018 	.word	0xe000e018
 8002d08:	20000000 	.word	0x20000000
 8002d0c:	10624dd3 	.word	0x10624dd3
 8002d10:	e000e014 	.word	0xe000e014

08002d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002d14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002d24 <vPortEnableVFP+0x10>
 8002d18:	6801      	ldr	r1, [r0, #0]
 8002d1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002d1e:	6001      	str	r1, [r0, #0]
 8002d20:	4770      	bx	lr
 8002d22:	0000      	.short	0x0000
 8002d24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop

08002d2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002d32:	f3ef 8305 	mrs	r3, IPSR
 8002d36:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b0f      	cmp	r3, #15
 8002d3c:	d914      	bls.n	8002d68 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002d3e:	4a17      	ldr	r2, [pc, #92]	; (8002d9c <vPortValidateInterruptPriority+0x70>)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4413      	add	r3, r2
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002d48:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <vPortValidateInterruptPriority+0x74>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	7afa      	ldrb	r2, [r7, #11]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d20a      	bcs.n	8002d68 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d56:	f383 8811 	msr	BASEPRI, r3
 8002d5a:	f3bf 8f6f 	isb	sy
 8002d5e:	f3bf 8f4f 	dsb	sy
 8002d62:	607b      	str	r3, [r7, #4]
    }
 8002d64:	bf00      	nop
 8002d66:	e7fe      	b.n	8002d66 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002d68:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <vPortValidateInterruptPriority+0x78>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d70:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <vPortValidateInterruptPriority+0x7c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d90a      	bls.n	8002d8e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7c:	f383 8811 	msr	BASEPRI, r3
 8002d80:	f3bf 8f6f 	isb	sy
 8002d84:	f3bf 8f4f 	dsb	sy
 8002d88:	603b      	str	r3, [r7, #0]
    }
 8002d8a:	bf00      	nop
 8002d8c:	e7fe      	b.n	8002d8c <vPortValidateInterruptPriority+0x60>
    }
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	e000e3f0 	.word	0xe000e3f0
 8002da0:	200001e4 	.word	0x200001e4
 8002da4:	e000ed0c 	.word	0xe000ed0c
 8002da8:	200001e8 	.word	0x200001e8

08002dac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	; 0x28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002db8:	f7fe fb6e 	bl	8001498 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002dbc:	4b65      	ldr	r3, [pc, #404]	; (8002f54 <pvPortMalloc+0x1a8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002dc4:	f000 f934 	bl	8003030 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002dc8:	4b63      	ldr	r3, [pc, #396]	; (8002f58 <pvPortMalloc+0x1ac>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f040 80a7 	bne.w	8002f24 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d02d      	beq.n	8002e38 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002ddc:	2208      	movs	r2, #8
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d227      	bcs.n	8002e38 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002de8:	2208      	movs	r2, #8
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d021      	beq.n	8002e3e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f023 0307 	bic.w	r3, r3, #7
 8002e00:	3308      	adds	r3, #8
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d214      	bcs.n	8002e32 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f023 0307 	bic.w	r3, r3, #7
 8002e0e:	3308      	adds	r3, #8
 8002e10:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d010      	beq.n	8002e3e <pvPortMalloc+0x92>
        __asm volatile
 8002e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e20:	f383 8811 	msr	BASEPRI, r3
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	f3bf 8f4f 	dsb	sy
 8002e2c:	617b      	str	r3, [r7, #20]
    }
 8002e2e:	bf00      	nop
 8002e30:	e7fe      	b.n	8002e30 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e36:	e002      	b.n	8002e3e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	607b      	str	r3, [r7, #4]
 8002e3c:	e000      	b.n	8002e40 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e3e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d06e      	beq.n	8002f24 <pvPortMalloc+0x178>
 8002e46:	4b45      	ldr	r3, [pc, #276]	; (8002f5c <pvPortMalloc+0x1b0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d869      	bhi.n	8002f24 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002e50:	4b43      	ldr	r3, [pc, #268]	; (8002f60 <pvPortMalloc+0x1b4>)
 8002e52:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002e54:	4b42      	ldr	r3, [pc, #264]	; (8002f60 <pvPortMalloc+0x1b4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e5a:	e004      	b.n	8002e66 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d903      	bls.n	8002e78 <pvPortMalloc+0xcc>
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f1      	bne.n	8002e5c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002e78:	4b36      	ldr	r3, [pc, #216]	; (8002f54 <pvPortMalloc+0x1a8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d050      	beq.n	8002f24 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2208      	movs	r2, #8
 8002e88:	4413      	add	r3, r2
 8002e8a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	1ad2      	subs	r2, r2, r3
 8002e9c:	2308      	movs	r3, #8
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d91f      	bls.n	8002ee4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <pvPortMalloc+0x120>
        __asm volatile
 8002eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eba:	f383 8811 	msr	BASEPRI, r3
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	f3bf 8f4f 	dsb	sy
 8002ec6:	613b      	str	r3, [r7, #16]
    }
 8002ec8:	bf00      	nop
 8002eca:	e7fe      	b.n	8002eca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	1ad2      	subs	r2, r2, r3
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002ede:	69b8      	ldr	r0, [r7, #24]
 8002ee0:	f000 f908 	bl	80030f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ee4:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <pvPortMalloc+0x1b0>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	4a1b      	ldr	r2, [pc, #108]	; (8002f5c <pvPortMalloc+0x1b0>)
 8002ef0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ef2:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <pvPortMalloc+0x1b0>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <pvPortMalloc+0x1b8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d203      	bcs.n	8002f06 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002efe:	4b17      	ldr	r3, [pc, #92]	; (8002f5c <pvPortMalloc+0x1b0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a18      	ldr	r2, [pc, #96]	; (8002f64 <pvPortMalloc+0x1b8>)
 8002f04:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <pvPortMalloc+0x1ac>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <pvPortMalloc+0x1bc>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	4a11      	ldr	r2, [pc, #68]	; (8002f68 <pvPortMalloc+0x1bc>)
 8002f22:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002f24:	f7fe fac6 	bl	80014b4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <pvPortMalloc+0x19c>
        __asm volatile
 8002f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	60fb      	str	r3, [r7, #12]
    }
 8002f44:	bf00      	nop
 8002f46:	e7fe      	b.n	8002f46 <pvPortMalloc+0x19a>
    return pvReturn;
 8002f48:	69fb      	ldr	r3, [r7, #28]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3728      	adds	r7, #40	; 0x28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20012df4 	.word	0x20012df4
 8002f58:	20012e08 	.word	0x20012e08
 8002f5c:	20012df8 	.word	0x20012df8
 8002f60:	20012dec 	.word	0x20012dec
 8002f64:	20012dfc 	.word	0x20012dfc
 8002f68:	20012e00 	.word	0x20012e00

08002f6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d04d      	beq.n	800301a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002f7e:	2308      	movs	r3, #8
 8002f80:	425b      	negs	r3, r3
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4413      	add	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	4b24      	ldr	r3, [pc, #144]	; (8003024 <vPortFree+0xb8>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10a      	bne.n	8002fb0 <vPortFree+0x44>
        __asm volatile
 8002f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	60fb      	str	r3, [r7, #12]
    }
 8002fac:	bf00      	nop
 8002fae:	e7fe      	b.n	8002fae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00a      	beq.n	8002fce <vPortFree+0x62>
        __asm volatile
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	60bb      	str	r3, [r7, #8]
    }
 8002fca:	bf00      	nop
 8002fcc:	e7fe      	b.n	8002fcc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	4b14      	ldr	r3, [pc, #80]	; (8003024 <vPortFree+0xb8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01e      	beq.n	800301a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d11a      	bne.n	800301a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <vPortFree+0xb8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	401a      	ands	r2, r3
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002ff4:	f7fe fa50 	bl	8001498 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <vPortFree+0xbc>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4413      	add	r3, r2
 8003002:	4a09      	ldr	r2, [pc, #36]	; (8003028 <vPortFree+0xbc>)
 8003004:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003006:	6938      	ldr	r0, [r7, #16]
 8003008:	f000 f874 	bl	80030f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800300c:	4b07      	ldr	r3, [pc, #28]	; (800302c <vPortFree+0xc0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3301      	adds	r3, #1
 8003012:	4a06      	ldr	r2, [pc, #24]	; (800302c <vPortFree+0xc0>)
 8003014:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003016:	f7fe fa4d 	bl	80014b4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800301a:	bf00      	nop
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20012e08 	.word	0x20012e08
 8003028:	20012df8 	.word	0x20012df8
 800302c:	20012e04 	.word	0x20012e04

08003030 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003036:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800303a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800303c:	4b27      	ldr	r3, [pc, #156]	; (80030dc <prvHeapInit+0xac>)
 800303e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00c      	beq.n	8003064 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	3307      	adds	r3, #7
 800304e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0307 	bic.w	r3, r3, #7
 8003056:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	4a1f      	ldr	r2, [pc, #124]	; (80030dc <prvHeapInit+0xac>)
 8003060:	4413      	add	r3, r2
 8003062:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003068:	4a1d      	ldr	r2, [pc, #116]	; (80030e0 <prvHeapInit+0xb0>)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800306e:	4b1c      	ldr	r3, [pc, #112]	; (80030e0 <prvHeapInit+0xb0>)
 8003070:	2200      	movs	r2, #0
 8003072:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	4413      	add	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800307c:	2208      	movs	r2, #8
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1a9b      	subs	r3, r3, r2
 8003082:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f023 0307 	bic.w	r3, r3, #7
 800308a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4a15      	ldr	r2, [pc, #84]	; (80030e4 <prvHeapInit+0xb4>)
 8003090:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003092:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <prvHeapInit+0xb4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2200      	movs	r2, #0
 8003098:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800309a:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <prvHeapInit+0xb4>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	1ad2      	subs	r2, r2, r3
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <prvHeapInit+0xb4>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	4a0a      	ldr	r2, [pc, #40]	; (80030e8 <prvHeapInit+0xb8>)
 80030be:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a09      	ldr	r2, [pc, #36]	; (80030ec <prvHeapInit+0xbc>)
 80030c6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80030c8:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <prvHeapInit+0xc0>)
 80030ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80030ce:	601a      	str	r2, [r3, #0]
}
 80030d0:	bf00      	nop
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	200001ec 	.word	0x200001ec
 80030e0:	20012dec 	.word	0x20012dec
 80030e4:	20012df4 	.word	0x20012df4
 80030e8:	20012dfc 	.word	0x20012dfc
 80030ec:	20012df8 	.word	0x20012df8
 80030f0:	20012e08 	.word	0x20012e08

080030f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80030fc:	4b28      	ldr	r3, [pc, #160]	; (80031a0 <prvInsertBlockIntoFreeList+0xac>)
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	e002      	b.n	8003108 <prvInsertBlockIntoFreeList+0x14>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	429a      	cmp	r2, r3
 8003110:	d8f7      	bhi.n	8003102 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	4413      	add	r3, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	429a      	cmp	r2, r3
 8003122:	d108      	bne.n	8003136 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	441a      	add	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	441a      	add	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d118      	bne.n	800317c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <prvInsertBlockIntoFreeList+0xb0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d00d      	beq.n	8003172 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	441a      	add	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	e008      	b.n	8003184 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003172:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <prvInsertBlockIntoFreeList+0xb0>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	e003      	b.n	8003184 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	429a      	cmp	r2, r3
 800318a:	d002      	beq.n	8003192 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	20012dec 	.word	0x20012dec
 80031a4:	20012df4 	.word	0x20012df4

080031a8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80031ac:	4803      	ldr	r0, [pc, #12]	; (80031bc <_cbSendSystemDesc+0x14>)
 80031ae:	f002 f94f 	bl	8005450 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80031b2:	4803      	ldr	r0, [pc, #12]	; (80031c0 <_cbSendSystemDesc+0x18>)
 80031b4:	f002 f94c 	bl	8005450 <SEGGER_SYSVIEW_SendSysDesc>
}
 80031b8:	bf00      	nop
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	08007440 	.word	0x08007440
 80031c0:	08007470 	.word	0x08007470

080031c4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80031ce:	6819      	ldr	r1, [r3, #0]
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <SEGGER_SYSVIEW_Conf+0x24>)
 80031d2:	4a06      	ldr	r2, [pc, #24]	; (80031ec <SEGGER_SYSVIEW_Conf+0x28>)
 80031d4:	f001 fc0a 	bl	80049ec <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80031d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80031dc:	f001 fc4a 	bl	8004a74 <SEGGER_SYSVIEW_SetRAMBase>
}
 80031e0:	bf00      	nop
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20000000 	.word	0x20000000
 80031e8:	080031a9 	.word	0x080031a9
 80031ec:	080074f8 	.word	0x080074f8

080031f0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80031f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80031f6:	2300      	movs	r3, #0
 80031f8:	607b      	str	r3, [r7, #4]
 80031fa:	e033      	b.n	8003264 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80031fc:	491e      	ldr	r1, [pc, #120]	; (8003278 <_cbSendTaskList+0x88>)
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	491a      	ldr	r1, [pc, #104]	; (8003278 <_cbSendTaskList+0x88>)
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	3304      	adds	r3, #4
 800321c:	6819      	ldr	r1, [r3, #0]
 800321e:	4c16      	ldr	r4, [pc, #88]	; (8003278 <_cbSendTaskList+0x88>)
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4423      	add	r3, r4
 800322c:	3308      	adds	r3, #8
 800322e:	681c      	ldr	r4, [r3, #0]
 8003230:	4d11      	ldr	r5, [pc, #68]	; (8003278 <_cbSendTaskList+0x88>)
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	442b      	add	r3, r5
 800323e:	330c      	adds	r3, #12
 8003240:	681d      	ldr	r5, [r3, #0]
 8003242:	4e0d      	ldr	r6, [pc, #52]	; (8003278 <_cbSendTaskList+0x88>)
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4433      	add	r3, r6
 8003250:	3310      	adds	r3, #16
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	462b      	mov	r3, r5
 8003258:	4622      	mov	r2, r4
 800325a:	f000 f8bd 	bl	80033d8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3301      	adds	r3, #1
 8003262:	607b      	str	r3, [r7, #4]
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <_cbSendTaskList+0x8c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	429a      	cmp	r2, r3
 800326c:	d3c6      	bcc.n	80031fc <_cbSendTaskList+0xc>
  }
}
 800326e:	bf00      	nop
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003278:	20012e0c 	.word	0x20012e0c
 800327c:	20012eac 	.word	0x20012eac

08003280 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003288:	f7fe f9c4 	bl	8001614 <xTaskGetTickCountFromISR>
 800328c:	4603      	mov	r3, r0
 800328e:	2200      	movs	r2, #0
 8003290:	469a      	mov	sl, r3
 8003292:	4693      	mov	fp, r2
 8003294:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003298:	e9d7 0100 	ldrd	r0, r1, [r7]
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	f04f 0a00 	mov.w	sl, #0
 80032a4:	f04f 0b00 	mov.w	fp, #0
 80032a8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80032ac:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80032b0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80032b4:	4652      	mov	r2, sl
 80032b6:	465b      	mov	r3, fp
 80032b8:	1a14      	subs	r4, r2, r0
 80032ba:	eb63 0501 	sbc.w	r5, r3, r1
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	00ab      	lsls	r3, r5, #2
 80032c8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80032cc:	00a2      	lsls	r2, r4, #2
 80032ce:	4614      	mov	r4, r2
 80032d0:	461d      	mov	r5, r3
 80032d2:	eb14 0800 	adds.w	r8, r4, r0
 80032d6:	eb45 0901 	adc.w	r9, r5, r1
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ee:	4690      	mov	r8, r2
 80032f0:	4699      	mov	r9, r3
 80032f2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80032f6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80032fa:	4610      	mov	r0, r2
 80032fc:	4619      	mov	r1, r3
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003308 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003316:	2205      	movs	r2, #5
 8003318:	492b      	ldr	r1, [pc, #172]	; (80033c8 <SYSVIEW_AddTask+0xc0>)
 800331a:	68b8      	ldr	r0, [r7, #8]
 800331c:	f004 f832 	bl	8007384 <memcmp>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d04b      	beq.n	80033be <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003326:	4b29      	ldr	r3, [pc, #164]	; (80033cc <SYSVIEW_AddTask+0xc4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b07      	cmp	r3, #7
 800332c:	d903      	bls.n	8003336 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800332e:	4828      	ldr	r0, [pc, #160]	; (80033d0 <SYSVIEW_AddTask+0xc8>)
 8003330:	f002 fba0 	bl	8005a74 <SEGGER_SYSVIEW_Warn>
    return;
 8003334:	e044      	b.n	80033c0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003336:	4b25      	ldr	r3, [pc, #148]	; (80033cc <SYSVIEW_AddTask+0xc4>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	4926      	ldr	r1, [pc, #152]	; (80033d4 <SYSVIEW_AddTask+0xcc>)
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800334a:	4b20      	ldr	r3, [pc, #128]	; (80033cc <SYSVIEW_AddTask+0xc4>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4921      	ldr	r1, [pc, #132]	; (80033d4 <SYSVIEW_AddTask+0xcc>)
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	3304      	adds	r3, #4
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003360:	4b1a      	ldr	r3, [pc, #104]	; (80033cc <SYSVIEW_AddTask+0xc4>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	491b      	ldr	r1, [pc, #108]	; (80033d4 <SYSVIEW_AddTask+0xcc>)
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	3308      	adds	r3, #8
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003376:	4b15      	ldr	r3, [pc, #84]	; (80033cc <SYSVIEW_AddTask+0xc4>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	4916      	ldr	r1, [pc, #88]	; (80033d4 <SYSVIEW_AddTask+0xcc>)
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	330c      	adds	r3, #12
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800338c:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <SYSVIEW_AddTask+0xc4>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	4910      	ldr	r1, [pc, #64]	; (80033d4 <SYSVIEW_AddTask+0xcc>)
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	3310      	adds	r3, #16
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80033a2:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <SYSVIEW_AddTask+0xc4>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	3301      	adds	r3, #1
 80033a8:	4a08      	ldr	r2, [pc, #32]	; (80033cc <SYSVIEW_AddTask+0xc4>)
 80033aa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f80e 	bl	80033d8 <SYSVIEW_SendTaskInfo>
 80033bc:	e000      	b.n	80033c0 <SYSVIEW_AddTask+0xb8>
    return;
 80033be:	bf00      	nop

}
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	08007480 	.word	0x08007480
 80033cc:	20012eac 	.word	0x20012eac
 80033d0:	08007488 	.word	0x08007488
 80033d4:	20012e0c 	.word	0x20012e0c

080033d8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	; 0x28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
 80033e4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80033e6:	f107 0314 	add.w	r3, r7, #20
 80033ea:	2214      	movs	r2, #20
 80033ec:	2100      	movs	r1, #0
 80033ee:	4618      	mov	r0, r3
 80033f0:	f003 ffe6 	bl	80073c0 <memset>
  TaskInfo.TaskID     = TaskID;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003408:	f107 0314 	add.w	r3, r7, #20
 800340c:	4618      	mov	r0, r3
 800340e:	f001 ff27 	bl	8005260 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003412:	bf00      	nop
 8003414:	3728      	adds	r7, #40	; 0x28
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342a:	2b00      	cmp	r3, #0
 800342c:	db0b      	blt.n	8003446 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	f003 021f 	and.w	r2, r3, #31
 8003434:	4907      	ldr	r1, [pc, #28]	; (8003454 <__NVIC_EnableIRQ+0x38>)
 8003436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	2001      	movs	r0, #1
 800343e:	fa00 f202 	lsl.w	r2, r0, r2
 8003442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	e000e100 	.word	0xe000e100

08003458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	6039      	str	r1, [r7, #0]
 8003462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003468:	2b00      	cmp	r3, #0
 800346a:	db0a      	blt.n	8003482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	b2da      	uxtb	r2, r3
 8003470:	490c      	ldr	r1, [pc, #48]	; (80034a4 <__NVIC_SetPriority+0x4c>)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	0112      	lsls	r2, r2, #4
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	440b      	add	r3, r1
 800347c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003480:	e00a      	b.n	8003498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	b2da      	uxtb	r2, r3
 8003486:	4908      	ldr	r1, [pc, #32]	; (80034a8 <__NVIC_SetPriority+0x50>)
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	3b04      	subs	r3, #4
 8003490:	0112      	lsls	r2, r2, #4
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	440b      	add	r3, r1
 8003496:	761a      	strb	r2, [r3, #24]
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	e000e100 	.word	0xe000e100
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80034b2:	f002 fb3b 	bl	8005b2c <SEGGER_SYSVIEW_IsStarted>
 80034b6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80034be:	f001 fd53 	bl	8004f68 <SEGGER_SYSVIEW_Start>
  }
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80034d6:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <_cbOnUARTRx+0x3c>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d806      	bhi.n	80034ec <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80034de:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <_cbOnUARTRx+0x3c>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	3301      	adds	r3, #1
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	4b08      	ldr	r3, [pc, #32]	; (8003508 <_cbOnUARTRx+0x3c>)
 80034e8:	701a      	strb	r2, [r3, #0]
    goto Done;
 80034ea:	e009      	b.n	8003500 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80034ec:	f7ff ffde 	bl	80034ac <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <_cbOnUARTRx+0x3c>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4618      	mov	r0, r3
 80034f6:	1dfb      	adds	r3, r7, #7
 80034f8:	2201      	movs	r2, #1
 80034fa:	4619      	mov	r1, r3
 80034fc:	f000 fb9a 	bl	8003c34 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003500:	bf00      	nop
}
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	2000000c 	.word	0x2000000c

0800350c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003514:	4b14      	ldr	r3, [pc, #80]	; (8003568 <_cbOnUARTTx+0x5c>)
 8003516:	785b      	ldrb	r3, [r3, #1]
 8003518:	2b03      	cmp	r3, #3
 800351a:	d80f      	bhi.n	800353c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800351c:	4b12      	ldr	r3, [pc, #72]	; (8003568 <_cbOnUARTTx+0x5c>)
 800351e:	785b      	ldrb	r3, [r3, #1]
 8003520:	461a      	mov	r2, r3
 8003522:	4b12      	ldr	r3, [pc, #72]	; (800356c <_cbOnUARTTx+0x60>)
 8003524:	5c9a      	ldrb	r2, [r3, r2]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800352a:	4b0f      	ldr	r3, [pc, #60]	; (8003568 <_cbOnUARTTx+0x5c>)
 800352c:	785b      	ldrb	r3, [r3, #1]
 800352e:	3301      	adds	r3, #1
 8003530:	b2da      	uxtb	r2, r3
 8003532:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <_cbOnUARTTx+0x5c>)
 8003534:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003536:	2301      	movs	r3, #1
 8003538:	60fb      	str	r3, [r7, #12]
    goto Done;
 800353a:	e00f      	b.n	800355c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800353c:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <_cbOnUARTTx+0x5c>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fa19 	bl	800397c <SEGGER_RTT_ReadUpBufferNoLock>
 800354a:	4603      	mov	r3, r0
 800354c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	da02      	bge.n	800355a <_cbOnUARTTx+0x4e>
    r = 0;
 8003554:	2300      	movs	r3, #0
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	e000      	b.n	800355c <_cbOnUARTTx+0x50>
  }
Done:
 800355a:	bf00      	nop
  return r;
 800355c:	68fb      	ldr	r3, [r7, #12]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	2000000c 	.word	0x2000000c
 800356c:	08007500 	.word	0x08007500

08003570 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003578:	4a04      	ldr	r2, [pc, #16]	; (800358c <SEGGER_UART_init+0x1c>)
 800357a:	4905      	ldr	r1, [pc, #20]	; (8003590 <SEGGER_UART_init+0x20>)
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f863 	bl	8003648 <HIF_UART_Init>
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	080034cd 	.word	0x080034cd
 8003590:	0800350d 	.word	0x0800350d

08003594 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800359a:	4b1e      	ldr	r3, [pc, #120]	; (8003614 <USART2_IRQHandler+0x80>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d011      	beq.n	80035ce <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80035aa:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <USART2_IRQHandler+0x84>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 030b 	and.w	r3, r3, #11
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d108      	bne.n	80035ce <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80035bc:	4b17      	ldr	r3, [pc, #92]	; (800361c <USART2_IRQHandler+0x88>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d004      	beq.n	80035ce <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80035c4:	4b15      	ldr	r3, [pc, #84]	; (800361c <USART2_IRQHandler+0x88>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	79fa      	ldrb	r2, [r7, #7]
 80035ca:	4610      	mov	r0, r2
 80035cc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d01a      	beq.n	800360e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80035d8:	4b11      	ldr	r3, [pc, #68]	; (8003620 <USART2_IRQHandler+0x8c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d015      	beq.n	800360c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80035e0:	4b0f      	ldr	r3, [pc, #60]	; (8003620 <USART2_IRQHandler+0x8c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	1dfa      	adds	r2, r7, #7
 80035e6:	4610      	mov	r0, r2
 80035e8:	4798      	blx	r3
 80035ea:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80035f2:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <USART2_IRQHandler+0x90>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a0b      	ldr	r2, [pc, #44]	; (8003624 <USART2_IRQHandler+0x90>)
 80035f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	e006      	b.n	800360e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003600:	4b04      	ldr	r3, [pc, #16]	; (8003614 <USART2_IRQHandler+0x80>)
 8003602:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003604:	79fa      	ldrb	r2, [r7, #7]
 8003606:	4b04      	ldr	r3, [pc, #16]	; (8003618 <USART2_IRQHandler+0x84>)
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	e000      	b.n	800360e <USART2_IRQHandler+0x7a>
      return;
 800360c:	bf00      	nop
    }
  }
}
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40004400 	.word	0x40004400
 8003618:	40004404 	.word	0x40004404
 800361c:	20012eb0 	.word	0x20012eb0
 8003620:	20012eb4 	.word	0x20012eb4
 8003624:	4000440c 	.word	0x4000440c

08003628 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a04      	ldr	r2, [pc, #16]	; (8003644 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003636:	6013      	str	r3, [r2, #0]
}
 8003638:	bf00      	nop
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	4000440c 	.word	0x4000440c

08003648 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003654:	4b2e      	ldr	r3, [pc, #184]	; (8003710 <HIF_UART_Init+0xc8>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a2d      	ldr	r2, [pc, #180]	; (8003710 <HIF_UART_Init+0xc8>)
 800365a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800365e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003660:	4b2c      	ldr	r3, [pc, #176]	; (8003714 <HIF_UART_Init+0xcc>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a2b      	ldr	r2, [pc, #172]	; (8003714 <HIF_UART_Init+0xcc>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800366c:	4b2a      	ldr	r3, [pc, #168]	; (8003718 <HIF_UART_Init+0xd0>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003678:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003680:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003682:	4a25      	ldr	r2, [pc, #148]	; (8003718 <HIF_UART_Init+0xd0>)
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003688:	4b24      	ldr	r3, [pc, #144]	; (800371c <HIF_UART_Init+0xd4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003694:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800369c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800369e:	4a1f      	ldr	r2, [pc, #124]	; (800371c <HIF_UART_Init+0xd4>)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80036a4:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <HIF_UART_Init+0xd8>)
 80036a6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80036aa:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80036ac:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <HIF_UART_Init+0xdc>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80036b2:	4b1d      	ldr	r3, [pc, #116]	; (8003728 <HIF_UART_Init+0xe0>)
 80036b4:	2280      	movs	r2, #128	; 0x80
 80036b6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80036be:	4a1b      	ldr	r2, [pc, #108]	; (800372c <HIF_UART_Init+0xe4>)
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c6:	3301      	adds	r3, #1
 80036c8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	085b      	lsrs	r3, r3, #1
 80036ce:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d6:	d302      	bcc.n	80036de <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80036d8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80036dc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d004      	beq.n	80036ee <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	4a11      	ldr	r2, [pc, #68]	; (8003730 <HIF_UART_Init+0xe8>)
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80036ee:	4a11      	ldr	r2, [pc, #68]	; (8003734 <HIF_UART_Init+0xec>)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80036f4:	4a10      	ldr	r2, [pc, #64]	; (8003738 <HIF_UART_Init+0xf0>)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80036fa:	2106      	movs	r1, #6
 80036fc:	2026      	movs	r0, #38	; 0x26
 80036fe:	f7ff feab 	bl	8003458 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003702:	2026      	movs	r0, #38	; 0x26
 8003704:	f7ff fe8a 	bl	800341c <__NVIC_EnableIRQ>
}
 8003708:	bf00      	nop
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40023840 	.word	0x40023840
 8003714:	40023830 	.word	0x40023830
 8003718:	40020020 	.word	0x40020020
 800371c:	40020000 	.word	0x40020000
 8003720:	4000440c 	.word	0x4000440c
 8003724:	40004410 	.word	0x40004410
 8003728:	40004414 	.word	0x40004414
 800372c:	05f5e100 	.word	0x05f5e100
 8003730:	40004408 	.word	0x40004408
 8003734:	20012eb0 	.word	0x20012eb0
 8003738:	20012eb4 	.word	0x20012eb4

0800373c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003742:	4b24      	ldr	r3, [pc, #144]	; (80037d4 <_DoInit+0x98>)
 8003744:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2203      	movs	r2, #3
 800374a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2203      	movs	r2, #3
 8003750:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a20      	ldr	r2, [pc, #128]	; (80037d8 <_DoInit+0x9c>)
 8003756:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a20      	ldr	r2, [pc, #128]	; (80037dc <_DoInit+0xa0>)
 800375c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003764:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a17      	ldr	r2, [pc, #92]	; (80037d8 <_DoInit+0x9c>)
 800377c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a17      	ldr	r2, [pc, #92]	; (80037e0 <_DoInit+0xa4>)
 8003782:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2210      	movs	r2, #16
 8003788:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3307      	adds	r3, #7
 80037a0:	4a10      	ldr	r2, [pc, #64]	; (80037e4 <_DoInit+0xa8>)
 80037a2:	6810      	ldr	r0, [r2, #0]
 80037a4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80037a6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a0e      	ldr	r2, [pc, #56]	; (80037e8 <_DoInit+0xac>)
 80037ae:	6810      	ldr	r0, [r2, #0]
 80037b0:	6018      	str	r0, [r3, #0]
 80037b2:	8891      	ldrh	r1, [r2, #4]
 80037b4:	7992      	ldrb	r2, [r2, #6]
 80037b6:	8099      	strh	r1, [r3, #4]
 80037b8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80037ba:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80037c4:	f3bf 8f5f 	dmb	sy
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	20012eb8 	.word	0x20012eb8
 80037d8:	080074d8 	.word	0x080074d8
 80037dc:	20012f60 	.word	0x20012f60
 80037e0:	20013360 	.word	0x20013360
 80037e4:	080074e4 	.word	0x080074e4
 80037e8:	080074e8 	.word	0x080074e8

080037ec <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80037f8:	2300      	movs	r3, #0
 80037fa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	429a      	cmp	r2, r3
 800380e:	d905      	bls.n	800381c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
 800381a:	e007      	b.n	800382c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	69b9      	ldr	r1, [r7, #24]
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	1acb      	subs	r3, r1, r3
 8003826:	4413      	add	r3, r2
 8003828:	3b01      	subs	r3, #1
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003836:	4293      	cmp	r3, r2
 8003838:	bf28      	it	cs
 800383a:	4613      	movcs	r3, r2
 800383c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800383e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4293      	cmp	r3, r2
 8003844:	bf28      	it	cs
 8003846:	4613      	movcs	r3, r2
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	4413      	add	r3, r2
 8003852:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	6978      	ldr	r0, [r7, #20]
 800385a:	f003 fda3 	bl	80073a4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800385e:	6a3a      	ldr	r2, [r7, #32]
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	4413      	add	r3, r2
 8003864:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	4413      	add	r3, r2
 800386c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	4413      	add	r3, r2
 800387c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	69fa      	ldr	r2, [r7, #28]
 8003884:	429a      	cmp	r2, r3
 8003886:	d101      	bne.n	800388c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003888:	2300      	movs	r3, #0
 800388a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800388c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1b2      	bne.n	8003802 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800389c:	6a3b      	ldr	r3, [r7, #32]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3728      	adds	r7, #40	; 0x28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b088      	sub	sp, #32
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d911      	bls.n	80038ee <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	4413      	add	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	68b9      	ldr	r1, [r7, #8]
 80038d8:	6938      	ldr	r0, [r7, #16]
 80038da:	f003 fd63 	bl	80073a4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80038de:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	441a      	add	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80038ec:	e01f      	b.n	800392e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	4413      	add	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	6938      	ldr	r0, [r7, #16]
 8003902:	f003 fd4f 	bl	80073a4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	4413      	add	r3, r2
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	4619      	mov	r1, r3
 800391e:	6938      	ldr	r0, [r7, #16]
 8003920:	f003 fd40 	bl	80073a4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003924:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	60da      	str	r2, [r3, #12]
}
 800392e:	bf00      	nop
 8003930:	3720      	adds	r7, #32
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003936:	b480      	push	{r7}
 8003938:	b087      	sub	sp, #28
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	429a      	cmp	r2, r3
 8003950:	d808      	bhi.n	8003964 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	1ad2      	subs	r2, r2, r3
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4413      	add	r3, r2
 800395e:	3b01      	subs	r3, #1
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	e004      	b.n	800396e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800396e:	697b      	ldr	r3, [r7, #20]
}
 8003970:	4618      	mov	r0, r3
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800397c:	b580      	push	{r7, lr}
 800397e:	b08c      	sub	sp, #48	; 0x30
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003988:	4b3e      	ldr	r3, [pc, #248]	; (8003a84 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800398a:	623b      	str	r3, [r7, #32]
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003996:	f7ff fed1 	bl	800373c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	4613      	mov	r3, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	4413      	add	r3, r2
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	4a37      	ldr	r2, [pc, #220]	; (8003a84 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80039a8:	4413      	add	r3, r2
 80039aa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80039bc:	2300      	movs	r3, #0
 80039be:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80039c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d92b      	bls.n	8003a20 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4293      	cmp	r3, r2
 80039d8:	bf28      	it	cs
 80039da:	4613      	movcs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e4:	4413      	add	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	6939      	ldr	r1, [r7, #16]
 80039ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039ee:	f003 fcd9 	bl	80073a4 <memcpy>
    NumBytesRead += NumBytesRem;
 80039f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	4413      	add	r3, r2
 80039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80039fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	4413      	add	r3, r2
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	4413      	add	r3, r2
 8003a10:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d101      	bne.n	8003a20 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	bf28      	it	cs
 8003a30:	4613      	movcs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d019      	beq.n	8003a6e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a40:	4413      	add	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	6939      	ldr	r1, [r7, #16]
 8003a48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a4a:	f003 fcab 	bl	80073a4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	4413      	add	r3, r2
 8003a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a78:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3730      	adds	r7, #48	; 0x30
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20012eb8 	.word	0x20012eb8

08003a88 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08c      	sub	sp, #48	; 0x30
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003a94:	4b3e      	ldr	r3, [pc, #248]	; (8003b90 <SEGGER_RTT_ReadNoLock+0x108>)
 8003a96:	623b      	str	r3, [r7, #32]
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <SEGGER_RTT_ReadNoLock+0x1e>
 8003aa2:	f7ff fe4b 	bl	800373c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	4413      	add	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	3360      	adds	r3, #96	; 0x60
 8003ab2:	4a37      	ldr	r2, [pc, #220]	; (8003b90 <SEGGER_RTT_ReadNoLock+0x108>)
 8003ab4:	4413      	add	r3, r2
 8003ab6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d92b      	bls.n	8003b2c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	bf28      	it	cs
 8003ae6:	4613      	movcs	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af0:	4413      	add	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	6939      	ldr	r1, [r7, #16]
 8003af8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003afa:	f003 fc53 	bl	80073a4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	4413      	add	r3, r2
 8003b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d101      	bne.n	8003b2c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	bf28      	it	cs
 8003b3c:	4613      	movcs	r3, r2
 8003b3e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d019      	beq.n	8003b7a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4c:	4413      	add	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	6939      	ldr	r1, [r7, #16]
 8003b54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b56:	f003 fc25 	bl	80073a4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	4413      	add	r3, r2
 8003b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	4413      	add	r3, r2
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	4413      	add	r3, r2
 8003b78:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b84:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3730      	adds	r7, #48	; 0x30
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20012eb8 	.word	0x20012eb8

08003b94 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	4413      	add	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	3360      	adds	r3, #96	; 0x60
 8003bb0:	4a1f      	ldr	r2, [pc, #124]	; (8003c30 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003bb2:	4413      	add	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d029      	beq.n	8003c12 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d82e      	bhi.n	8003c20 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d013      	beq.n	8003bf2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003bca:	e029      	b.n	8003c20 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003bcc:	6978      	ldr	r0, [r7, #20]
 8003bce:	f7ff feb2 	bl	8003936 <_GetAvailWriteSpace>
 8003bd2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d202      	bcs.n	8003be2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003be0:	e021      	b.n	8003c26 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	69b9      	ldr	r1, [r7, #24]
 8003bea:	6978      	ldr	r0, [r7, #20]
 8003bec:	f7ff fe5b 	bl	80038a6 <_WriteNoCheck>
    break;
 8003bf0:	e019      	b.n	8003c26 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003bf2:	6978      	ldr	r0, [r7, #20]
 8003bf4:	f7ff fe9f 	bl	8003936 <_GetAvailWriteSpace>
 8003bf8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	bf28      	it	cs
 8003c02:	4613      	movcs	r3, r2
 8003c04:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	69b9      	ldr	r1, [r7, #24]
 8003c0a:	6978      	ldr	r0, [r7, #20]
 8003c0c:	f7ff fe4b 	bl	80038a6 <_WriteNoCheck>
    break;
 8003c10:	e009      	b.n	8003c26 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	69b9      	ldr	r1, [r7, #24]
 8003c16:	6978      	ldr	r0, [r7, #20]
 8003c18:	f7ff fde8 	bl	80037ec <_WriteBlocking>
 8003c1c:	61f8      	str	r0, [r7, #28]
    break;
 8003c1e:	e002      	b.n	8003c26 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003c20:	2300      	movs	r3, #0
 8003c22:	61fb      	str	r3, [r7, #28]
    break;
 8003c24:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003c26:	69fb      	ldr	r3, [r7, #28]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3720      	adds	r7, #32
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	20012eb8 	.word	0x20012eb8

08003c34 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003c40:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003c42:	61fb      	str	r3, [r7, #28]
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003c4e:	f7ff fd75 	bl	800373c <_DoInit>
  SEGGER_RTT_LOCK();
 8003c52:	f3ef 8311 	mrs	r3, BASEPRI
 8003c56:	f04f 0120 	mov.w	r1, #32
 8003c5a:	f381 8811 	msr	BASEPRI, r1
 8003c5e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	68b9      	ldr	r1, [r7, #8]
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f7ff ff95 	bl	8003b94 <SEGGER_RTT_WriteDownBufferNoLock>
 8003c6a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003c72:	697b      	ldr	r3, [r7, #20]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3720      	adds	r7, #32
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20012eb8 	.word	0x20012eb8

08003c80 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003c8e:	4b3d      	ldr	r3, [pc, #244]	; (8003d84 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003c90:	61bb      	str	r3, [r7, #24]
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003c9c:	f7ff fd4e 	bl	800373c <_DoInit>
  SEGGER_RTT_LOCK();
 8003ca0:	f3ef 8311 	mrs	r3, BASEPRI
 8003ca4:	f04f 0120 	mov.w	r1, #32
 8003ca8:	f381 8811 	msr	BASEPRI, r1
 8003cac:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003cae:	4b35      	ldr	r3, [pc, #212]	; (8003d84 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003cb0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003cb6:	6939      	ldr	r1, [r7, #16]
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	4413      	add	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	440b      	add	r3, r1
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	69fa      	ldr	r2, [r7, #28]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	dbeb      	blt.n	8003cb6 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003cde:	e000      	b.n	8003ce2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003ce0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	da3f      	bge.n	8003d6c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003cec:	6939      	ldr	r1, [r7, #16]
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	4413      	add	r3, r2
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	440b      	add	r3, r1
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003d00:	6939      	ldr	r1, [r7, #16]
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	4613      	mov	r3, r2
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	4413      	add	r3, r2
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	440b      	add	r3, r1
 8003d10:	3304      	adds	r3, #4
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003d16:	6939      	ldr	r1, [r7, #16]
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	4413      	add	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	440b      	add	r3, r1
 8003d24:	3320      	adds	r3, #32
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003d2a:	6939      	ldr	r1, [r7, #16]
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	4413      	add	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	440b      	add	r3, r1
 8003d38:	3328      	adds	r3, #40	; 0x28
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003d3e:	6939      	ldr	r1, [r7, #16]
 8003d40:	69fa      	ldr	r2, [r7, #28]
 8003d42:	4613      	mov	r3, r2
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	4413      	add	r3, r2
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	440b      	add	r3, r1
 8003d4c:	3324      	adds	r3, #36	; 0x24
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003d52:	6939      	ldr	r1, [r7, #16]
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	4613      	mov	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	4413      	add	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	440b      	add	r3, r1
 8003d60:	332c      	adds	r3, #44	; 0x2c
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d66:	f3bf 8f5f 	dmb	sy
 8003d6a:	e002      	b.n	8003d72 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d70:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003d78:	69fb      	ldr	r3, [r7, #28]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3720      	adds	r7, #32
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20012eb8 	.word	0x20012eb8

08003d88 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003d96:	4b33      	ldr	r3, [pc, #204]	; (8003e64 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003da4:	f7ff fcca 	bl	800373c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003da8:	4b2e      	ldr	r3, [pc, #184]	; (8003e64 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003daa:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	461a      	mov	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d24d      	bcs.n	8003e54 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003db8:	f3ef 8311 	mrs	r3, BASEPRI
 8003dbc:	f04f 0120 	mov.w	r1, #32
 8003dc0:	f381 8811 	msr	BASEPRI, r1
 8003dc4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d031      	beq.n	8003e30 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003dcc:	6979      	ldr	r1, [r7, #20]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	4413      	add	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	440b      	add	r3, r1
 8003dda:	3360      	adds	r3, #96	; 0x60
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003de0:	6979      	ldr	r1, [r7, #20]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4613      	mov	r3, r2
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	4413      	add	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	440b      	add	r3, r1
 8003dee:	3364      	adds	r3, #100	; 0x64
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003df4:	6979      	ldr	r1, [r7, #20]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	4413      	add	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	440b      	add	r3, r1
 8003e02:	3368      	adds	r3, #104	; 0x68
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003e08:	6979      	ldr	r1, [r7, #20]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	4413      	add	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	440b      	add	r3, r1
 8003e16:	3370      	adds	r3, #112	; 0x70
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003e1c:	6979      	ldr	r1, [r7, #20]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4613      	mov	r3, r2
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	4413      	add	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	440b      	add	r3, r1
 8003e2a:	336c      	adds	r3, #108	; 0x6c
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003e30:	6979      	ldr	r1, [r7, #20]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4613      	mov	r3, r2
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	4413      	add	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	440b      	add	r3, r1
 8003e3e:	3374      	adds	r3, #116	; 0x74
 8003e40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e42:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e44:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	e002      	b.n	8003e5a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003e54:	f04f 33ff 	mov.w	r3, #4294967295
 8003e58:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3720      	adds	r7, #32
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20012eb8 	.word	0x20012eb8

08003e68 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003e78:	e002      	b.n	8003e80 <_EncodeStr+0x18>
    Len++;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4413      	add	r3, r2
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1f6      	bne.n	8003e7a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d901      	bls.n	8003e98 <_EncodeStr+0x30>
    Len = Limit;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	2bfe      	cmp	r3, #254	; 0xfe
 8003e9c:	d806      	bhi.n	8003eac <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	60fa      	str	r2, [r7, #12]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]
 8003eaa:	e011      	b.n	8003ed0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	60fa      	str	r2, [r7, #12]
 8003eb2:	22ff      	movs	r2, #255	; 0xff
 8003eb4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	60fa      	str	r2, [r7, #12]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	0a19      	lsrs	r1, r3, #8
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	60fa      	str	r2, [r7, #12]
 8003ecc:	b2ca      	uxtb	r2, r1
 8003ece:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003ed4:	e00a      	b.n	8003eec <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	1c53      	adds	r3, r2, #1
 8003eda:	60bb      	str	r3, [r7, #8]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	1c59      	adds	r1, r3, #1
 8003ee0:	60f9      	str	r1, [r7, #12]
 8003ee2:	7812      	ldrb	r2, [r2, #0]
 8003ee4:	701a      	strb	r2, [r3, #0]
    n++;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d3f0      	bcc.n	8003ed6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	371c      	adds	r7, #28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3304      	adds	r3, #4
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
	...

08003f1c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003f22:	4b36      	ldr	r3, [pc, #216]	; (8003ffc <_HandleIncomingPacket+0xe0>)
 8003f24:	7e1b      	ldrb	r3, [r3, #24]
 8003f26:	4618      	mov	r0, r3
 8003f28:	1cfb      	adds	r3, r7, #3
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	f7ff fdab 	bl	8003a88 <SEGGER_RTT_ReadNoLock>
 8003f32:	4603      	mov	r3, r0
 8003f34:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	dd54      	ble.n	8003fe6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	2b80      	cmp	r3, #128	; 0x80
 8003f40:	d032      	beq.n	8003fa8 <_HandleIncomingPacket+0x8c>
 8003f42:	2b80      	cmp	r3, #128	; 0x80
 8003f44:	dc42      	bgt.n	8003fcc <_HandleIncomingPacket+0xb0>
 8003f46:	2b07      	cmp	r3, #7
 8003f48:	dc16      	bgt.n	8003f78 <_HandleIncomingPacket+0x5c>
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	dd3e      	ble.n	8003fcc <_HandleIncomingPacket+0xb0>
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	2b06      	cmp	r3, #6
 8003f52:	d83b      	bhi.n	8003fcc <_HandleIncomingPacket+0xb0>
 8003f54:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <_HandleIncomingPacket+0x40>)
 8003f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5a:	bf00      	nop
 8003f5c:	08003f7f 	.word	0x08003f7f
 8003f60:	08003f85 	.word	0x08003f85
 8003f64:	08003f8b 	.word	0x08003f8b
 8003f68:	08003f91 	.word	0x08003f91
 8003f6c:	08003f97 	.word	0x08003f97
 8003f70:	08003f9d 	.word	0x08003f9d
 8003f74:	08003fa3 	.word	0x08003fa3
 8003f78:	2b7f      	cmp	r3, #127	; 0x7f
 8003f7a:	d036      	beq.n	8003fea <_HandleIncomingPacket+0xce>
 8003f7c:	e026      	b.n	8003fcc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003f7e:	f000 fff3 	bl	8004f68 <SEGGER_SYSVIEW_Start>
      break;
 8003f82:	e037      	b.n	8003ff4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003f84:	f001 f8ac 	bl	80050e0 <SEGGER_SYSVIEW_Stop>
      break;
 8003f88:	e034      	b.n	8003ff4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003f8a:	f001 fa85 	bl	8005498 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003f8e:	e031      	b.n	8003ff4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003f90:	f001 fa4a 	bl	8005428 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003f94:	e02e      	b.n	8003ff4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003f96:	f001 f8c9 	bl	800512c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003f9a:	e02b      	b.n	8003ff4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003f9c:	f001 fd18 	bl	80059d0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003fa0:	e028      	b.n	8003ff4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003fa2:	f001 fcf7 	bl	8005994 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003fa6:	e025      	b.n	8003ff4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003fa8:	4b14      	ldr	r3, [pc, #80]	; (8003ffc <_HandleIncomingPacket+0xe0>)
 8003faa:	7e1b      	ldrb	r3, [r3, #24]
 8003fac:	4618      	mov	r0, r3
 8003fae:	1cfb      	adds	r3, r7, #3
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	f7ff fd68 	bl	8003a88 <SEGGER_RTT_ReadNoLock>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	dd15      	ble.n	8003fee <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003fc2:	78fb      	ldrb	r3, [r7, #3]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f001 fc65 	bl	8005894 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003fca:	e010      	b.n	8003fee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	b25b      	sxtb	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	da0e      	bge.n	8003ff2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003fd4:	4b09      	ldr	r3, [pc, #36]	; (8003ffc <_HandleIncomingPacket+0xe0>)
 8003fd6:	7e1b      	ldrb	r3, [r3, #24]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	1cfb      	adds	r3, r7, #3
 8003fdc:	2201      	movs	r2, #1
 8003fde:	4619      	mov	r1, r3
 8003fe0:	f7ff fd52 	bl	8003a88 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003fe4:	e005      	b.n	8003ff2 <_HandleIncomingPacket+0xd6>
    }
  }
 8003fe6:	bf00      	nop
 8003fe8:	e004      	b.n	8003ff4 <_HandleIncomingPacket+0xd8>
      break;
 8003fea:	bf00      	nop
 8003fec:	e002      	b.n	8003ff4 <_HandleIncomingPacket+0xd8>
      break;
 8003fee:	bf00      	nop
 8003ff0:	e000      	b.n	8003ff4 <_HandleIncomingPacket+0xd8>
      break;
 8003ff2:	bf00      	nop
}
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20014378 	.word	0x20014378

08004000 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004000:	b580      	push	{r7, lr}
 8004002:	b08c      	sub	sp, #48	; 0x30
 8004004:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004006:	2301      	movs	r3, #1
 8004008:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800400a:	1d3b      	adds	r3, r7, #4
 800400c:	3301      	adds	r3, #1
 800400e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004014:	4b32      	ldr	r3, [pc, #200]	; (80040e0 <_TrySendOverflowPacket+0xe0>)
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	62bb      	str	r3, [r7, #40]	; 0x28
 800401a:	e00b      	b.n	8004034 <_TrySendOverflowPacket+0x34>
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	b2da      	uxtb	r2, r3
 8004020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004022:	1c59      	adds	r1, r3, #1
 8004024:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004026:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	701a      	strb	r2, [r3, #0]
 800402e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004030:	09db      	lsrs	r3, r3, #7
 8004032:	62bb      	str	r3, [r7, #40]	; 0x28
 8004034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004036:	2b7f      	cmp	r3, #127	; 0x7f
 8004038:	d8f0      	bhi.n	800401c <_TrySendOverflowPacket+0x1c>
 800403a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004048:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800404a:	4b26      	ldr	r3, [pc, #152]	; (80040e4 <_TrySendOverflowPacket+0xe4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004050:	4b23      	ldr	r3, [pc, #140]	; (80040e0 <_TrySendOverflowPacket+0xe0>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	627b      	str	r3, [r7, #36]	; 0x24
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	623b      	str	r3, [r7, #32]
 8004062:	e00b      	b.n	800407c <_TrySendOverflowPacket+0x7c>
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	b2da      	uxtb	r2, r3
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	1c59      	adds	r1, r3, #1
 800406c:	6279      	str	r1, [r7, #36]	; 0x24
 800406e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	09db      	lsrs	r3, r3, #7
 800407a:	623b      	str	r3, [r7, #32]
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	2b7f      	cmp	r3, #127	; 0x7f
 8004080:	d8f0      	bhi.n	8004064 <_TrySendOverflowPacket+0x64>
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	627a      	str	r2, [r7, #36]	; 0x24
 8004088:	6a3a      	ldr	r2, [r7, #32]
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004092:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <_TrySendOverflowPacket+0xe0>)
 8004094:	785b      	ldrb	r3, [r3, #1]
 8004096:	4618      	mov	r0, r3
 8004098:	1d3b      	adds	r3, r7, #4
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	1d3b      	adds	r3, r7, #4
 80040a2:	4619      	mov	r1, r3
 80040a4:	f7fc f89c 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80040a8:	4603      	mov	r3, r0
 80040aa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80040ac:	f7ff fabc 	bl	8003628 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d009      	beq.n	80040ca <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80040b6:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <_TrySendOverflowPacket+0xe0>)
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80040bc:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <_TrySendOverflowPacket+0xe0>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <_TrySendOverflowPacket+0xe0>)
 80040c6:	701a      	strb	r2, [r3, #0]
 80040c8:	e004      	b.n	80040d4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80040ca:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <_TrySendOverflowPacket+0xe0>)
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	3301      	adds	r3, #1
 80040d0:	4a03      	ldr	r2, [pc, #12]	; (80040e0 <_TrySendOverflowPacket+0xe0>)
 80040d2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80040d4:	693b      	ldr	r3, [r7, #16]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3730      	adds	r7, #48	; 0x30
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20014378 	.word	0x20014378
 80040e4:	e0001004 	.word	0xe0001004

080040e8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08a      	sub	sp, #40	; 0x28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80040f4:	4b6d      	ldr	r3, [pc, #436]	; (80042ac <_SendPacket+0x1c4>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d010      	beq.n	800411e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80040fc:	4b6b      	ldr	r3, [pc, #428]	; (80042ac <_SendPacket+0x1c4>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 80a5 	beq.w	8004250 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004106:	4b69      	ldr	r3, [pc, #420]	; (80042ac <_SendPacket+0x1c4>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	2b02      	cmp	r3, #2
 800410c:	d109      	bne.n	8004122 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800410e:	f7ff ff77 	bl	8004000 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004112:	4b66      	ldr	r3, [pc, #408]	; (80042ac <_SendPacket+0x1c4>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b01      	cmp	r3, #1
 8004118:	f040 809c 	bne.w	8004254 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800411c:	e001      	b.n	8004122 <_SendPacket+0x3a>
    goto Send;
 800411e:	bf00      	nop
 8004120:	e000      	b.n	8004124 <_SendPacket+0x3c>
Send:
 8004122:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b1f      	cmp	r3, #31
 8004128:	d809      	bhi.n	800413e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800412a:	4b60      	ldr	r3, [pc, #384]	; (80042ac <_SendPacket+0x1c4>)
 800412c:	69da      	ldr	r2, [r3, #28]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	fa22 f303 	lsr.w	r3, r2, r3
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	f040 808d 	bne.w	8004258 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b17      	cmp	r3, #23
 8004142:	d807      	bhi.n	8004154 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3b01      	subs	r3, #1
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	b2da      	uxtb	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	701a      	strb	r2, [r3, #0]
 8004152:	e03d      	b.n	80041d0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	2b7f      	cmp	r3, #127	; 0x7f
 8004160:	d912      	bls.n	8004188 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	09da      	lsrs	r2, r3, #7
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	3b01      	subs	r3, #1
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	3a01      	subs	r2, #1
 800417a:	60fa      	str	r2, [r7, #12]
 800417c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004180:	b2da      	uxtb	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	701a      	strb	r2, [r3, #0]
 8004186:	e006      	b.n	8004196 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	3b01      	subs	r3, #1
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b7f      	cmp	r3, #127	; 0x7f
 800419a:	d912      	bls.n	80041c2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	09da      	lsrs	r2, r3, #7
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	3a01      	subs	r2, #1
 80041b4:	60fa      	str	r2, [r7, #12]
 80041b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	701a      	strb	r2, [r3, #0]
 80041c0:	e006      	b.n	80041d0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	3b01      	subs	r3, #1
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80041d0:	4b37      	ldr	r3, [pc, #220]	; (80042b0 <_SendPacket+0x1c8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80041d6:	4b35      	ldr	r3, [pc, #212]	; (80042ac <_SendPacket+0x1c4>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	627b      	str	r3, [r7, #36]	; 0x24
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	623b      	str	r3, [r7, #32]
 80041e8:	e00b      	b.n	8004202 <_SendPacket+0x11a>
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	1c59      	adds	r1, r3, #1
 80041f2:	6279      	str	r1, [r7, #36]	; 0x24
 80041f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	701a      	strb	r2, [r3, #0]
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	09db      	lsrs	r3, r3, #7
 8004200:	623b      	str	r3, [r7, #32]
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	2b7f      	cmp	r3, #127	; 0x7f
 8004206:	d8f0      	bhi.n	80041ea <_SendPacket+0x102>
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	627a      	str	r2, [r7, #36]	; 0x24
 800420e:	6a3a      	ldr	r2, [r7, #32]
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	701a      	strb	r2, [r3, #0]
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004218:	4b24      	ldr	r3, [pc, #144]	; (80042ac <_SendPacket+0x1c4>)
 800421a:	785b      	ldrb	r3, [r3, #1]
 800421c:	4618      	mov	r0, r3
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	461a      	mov	r2, r3
 8004226:	68f9      	ldr	r1, [r7, #12]
 8004228:	f7fb ffda 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800422c:	4603      	mov	r3, r0
 800422e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004230:	f7ff f9fa 	bl	8003628 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800423a:	4a1c      	ldr	r2, [pc, #112]	; (80042ac <_SendPacket+0x1c4>)
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	60d3      	str	r3, [r2, #12]
 8004240:	e00b      	b.n	800425a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004242:	4b1a      	ldr	r3, [pc, #104]	; (80042ac <_SendPacket+0x1c4>)
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	3301      	adds	r3, #1
 8004248:	b2da      	uxtb	r2, r3
 800424a:	4b18      	ldr	r3, [pc, #96]	; (80042ac <_SendPacket+0x1c4>)
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	e004      	b.n	800425a <_SendPacket+0x172>
    goto SendDone;
 8004250:	bf00      	nop
 8004252:	e002      	b.n	800425a <_SendPacket+0x172>
      goto SendDone;
 8004254:	bf00      	nop
 8004256:	e000      	b.n	800425a <_SendPacket+0x172>
      goto SendDone;
 8004258:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800425a:	4b14      	ldr	r3, [pc, #80]	; (80042ac <_SendPacket+0x1c4>)
 800425c:	7e1b      	ldrb	r3, [r3, #24]
 800425e:	4619      	mov	r1, r3
 8004260:	4a14      	ldr	r2, [pc, #80]	; (80042b4 <_SendPacket+0x1cc>)
 8004262:	460b      	mov	r3, r1
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	440b      	add	r3, r1
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	4413      	add	r3, r2
 800426c:	336c      	adds	r3, #108	; 0x6c
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	4b0e      	ldr	r3, [pc, #56]	; (80042ac <_SendPacket+0x1c4>)
 8004272:	7e1b      	ldrb	r3, [r3, #24]
 8004274:	4618      	mov	r0, r3
 8004276:	490f      	ldr	r1, [pc, #60]	; (80042b4 <_SendPacket+0x1cc>)
 8004278:	4603      	mov	r3, r0
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	4403      	add	r3, r0
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	440b      	add	r3, r1
 8004282:	3370      	adds	r3, #112	; 0x70
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d00b      	beq.n	80042a2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800428a:	4b08      	ldr	r3, [pc, #32]	; (80042ac <_SendPacket+0x1c4>)
 800428c:	789b      	ldrb	r3, [r3, #2]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d107      	bne.n	80042a2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004292:	4b06      	ldr	r3, [pc, #24]	; (80042ac <_SendPacket+0x1c4>)
 8004294:	2201      	movs	r2, #1
 8004296:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004298:	f7ff fe40 	bl	8003f1c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800429c:	4b03      	ldr	r3, [pc, #12]	; (80042ac <_SendPacket+0x1c4>)
 800429e:	2200      	movs	r2, #0
 80042a0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80042a2:	bf00      	nop
 80042a4:	3728      	adds	r7, #40	; 0x28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20014378 	.word	0x20014378
 80042b0:	e0001004 	.word	0xe0001004
 80042b4:	20012eb8 	.word	0x20012eb8

080042b8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08a      	sub	sp, #40	; 0x28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	460b      	mov	r3, r1
 80042c2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	3301      	adds	r3, #1
 80042ce:	2b80      	cmp	r3, #128	; 0x80
 80042d0:	d80a      	bhi.n	80042e8 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	1c59      	adds	r1, r3, #1
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6051      	str	r1, [r2, #4]
 80042dc:	78fa      	ldrb	r2, [r7, #3]
 80042de:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	2b80      	cmp	r3, #128	; 0x80
 80042ee:	d15a      	bne.n	80043a6 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	627b      	str	r3, [r7, #36]	; 0x24
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	623b      	str	r3, [r7, #32]
 8004310:	e00b      	b.n	800432a <_StoreChar+0x72>
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	b2da      	uxtb	r2, r3
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	1c59      	adds	r1, r3, #1
 800431a:	6279      	str	r1, [r7, #36]	; 0x24
 800431c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	701a      	strb	r2, [r3, #0]
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	09db      	lsrs	r3, r3, #7
 8004328:	623b      	str	r3, [r7, #32]
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	2b7f      	cmp	r3, #127	; 0x7f
 800432e:	d8f0      	bhi.n	8004312 <_StoreChar+0x5a>
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	627a      	str	r2, [r7, #36]	; 0x24
 8004336:	6a3a      	ldr	r2, [r7, #32]
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	701a      	strb	r2, [r3, #0]
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	61fb      	str	r3, [r7, #28]
 8004344:	2300      	movs	r3, #0
 8004346:	61bb      	str	r3, [r7, #24]
 8004348:	e00b      	b.n	8004362 <_StoreChar+0xaa>
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	b2da      	uxtb	r2, r3
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	1c59      	adds	r1, r3, #1
 8004352:	61f9      	str	r1, [r7, #28]
 8004354:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	701a      	strb	r2, [r3, #0]
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	09db      	lsrs	r3, r3, #7
 8004360:	61bb      	str	r3, [r7, #24]
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2b7f      	cmp	r3, #127	; 0x7f
 8004366:	d8f0      	bhi.n	800434a <_StoreChar+0x92>
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	61fa      	str	r2, [r7, #28]
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	701a      	strb	r2, [r3, #0]
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	221a      	movs	r2, #26
 800437e:	6939      	ldr	r1, [r7, #16]
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff feb1 	bl	80040e8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fdb9 	bl	8003f02 <_PreparePacket>
 8004390:	4602      	mov	r2, r0
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	611a      	str	r2, [r3, #16]
  }
}
 80043a6:	bf00      	nop
 80043a8:	3728      	adds	r7, #40	; 0x28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08a      	sub	sp, #40	; 0x28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80043c2:	2301      	movs	r3, #1
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80043c6:	2301      	movs	r3, #1
 80043c8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80043ca:	e007      	b.n	80043dc <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80043cc:	6a3a      	ldr	r2, [r7, #32]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d4:	623b      	str	r3, [r7, #32]
    Width++;
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	3301      	adds	r3, #1
 80043da:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80043dc:	6a3a      	ldr	r2, [r7, #32]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d2f3      	bcs.n	80043cc <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d901      	bls.n	80043f0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80043f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d11f      	bne.n	800443a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80043fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01c      	beq.n	800443a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <_PrintUnsigned+0x66>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d102      	bne.n	8004416 <_PrintUnsigned+0x66>
        c = '0';
 8004410:	2330      	movs	r3, #48	; 0x30
 8004412:	76fb      	strb	r3, [r7, #27]
 8004414:	e001      	b.n	800441a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004416:	2320      	movs	r3, #32
 8004418:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800441a:	e007      	b.n	800442c <_PrintUnsigned+0x7c>
        FieldWidth--;
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441e:	3b01      	subs	r3, #1
 8004420:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004422:	7efb      	ldrb	r3, [r7, #27]
 8004424:	4619      	mov	r1, r3
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f7ff ff46 	bl	80042b8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <_PrintUnsigned+0x8a>
 8004432:	69fa      	ldr	r2, [r7, #28]
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	429a      	cmp	r2, r3
 8004438:	d3f0      	bcc.n	800441c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d903      	bls.n	8004448 <_PrintUnsigned+0x98>
      NumDigits--;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	3b01      	subs	r3, #1
 8004444:	603b      	str	r3, [r7, #0]
 8004446:	e009      	b.n	800445c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004450:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	429a      	cmp	r2, r3
 8004458:	d200      	bcs.n	800445c <_PrintUnsigned+0xac>
        break;
 800445a:	e005      	b.n	8004468 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	fb02 f303 	mul.w	r3, r2, r3
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004466:	e7e8      	b.n	800443a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004470:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004476:	fb02 f303 	mul.w	r3, r2, r3
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004480:	4a15      	ldr	r2, [pc, #84]	; (80044d8 <_PrintUnsigned+0x128>)
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	4413      	add	r3, r2
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	4619      	mov	r1, r3
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f7ff ff14 	bl	80042b8 <_StoreChar>
    Digit /= Base;
 8004490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	fbb2 f3f3 	udiv	r3, r2, r3
 8004498:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1e3      	bne.n	8004468 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80044a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d011      	beq.n	80044ce <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00e      	beq.n	80044ce <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80044b0:	e006      	b.n	80044c0 <_PrintUnsigned+0x110>
        FieldWidth--;
 80044b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b4:	3b01      	subs	r3, #1
 80044b6:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80044b8:	2120      	movs	r1, #32
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f7ff fefc 	bl	80042b8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <_PrintUnsigned+0x11e>
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d3f1      	bcc.n	80044b2 <_PrintUnsigned+0x102>
      }
    }
  }
}
 80044ce:	bf00      	nop
 80044d0:	3728      	adds	r7, #40	; 0x28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	08007510 	.word	0x08007510

080044dc <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80044dc:	b580      	push	{r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	bfb8      	it	lt
 80044f0:	425b      	neglt	r3, r3
 80044f2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80044f4:	2301      	movs	r3, #1
 80044f6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80044f8:	e007      	b.n	800450a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8004502:	613b      	str	r3, [r7, #16]
    Width++;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	3301      	adds	r3, #1
 8004508:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	429a      	cmp	r2, r3
 8004510:	daf3      	bge.n	80044fa <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	429a      	cmp	r2, r3
 8004518:	d901      	bls.n	800451e <_PrintInt+0x42>
    Width = NumDigits;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00a      	beq.n	800453a <_PrintInt+0x5e>
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	db04      	blt.n	8004534 <_PrintInt+0x58>
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <_PrintInt+0x5e>
    FieldWidth--;
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	3b01      	subs	r3, #1
 8004538:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d002      	beq.n	800454a <_PrintInt+0x6e>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d016      	beq.n	8004578 <_PrintInt+0x9c>
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	d111      	bne.n	8004578 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00e      	beq.n	8004578 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800455a:	e006      	b.n	800456a <_PrintInt+0x8e>
        FieldWidth--;
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	3b01      	subs	r3, #1
 8004560:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004562:	2120      	movs	r1, #32
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f7ff fea7 	bl	80042b8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <_PrintInt+0x9c>
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	429a      	cmp	r2, r3
 8004576:	d3f1      	bcc.n	800455c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	da07      	bge.n	800458e <_PrintInt+0xb2>
    v = -v;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	425b      	negs	r3, r3
 8004582:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004584:	212d      	movs	r1, #45	; 0x2d
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f7ff fe96 	bl	80042b8 <_StoreChar>
 800458c:	e008      	b.n	80045a0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004598:	212b      	movs	r1, #43	; 0x2b
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f7ff fe8c 	bl	80042b8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d019      	beq.n	80045de <_PrintInt+0x102>
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d114      	bne.n	80045de <_PrintInt+0x102>
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d111      	bne.n	80045de <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00e      	beq.n	80045de <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045c0:	e006      	b.n	80045d0 <_PrintInt+0xf4>
        FieldWidth--;
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80045c8:	2130      	movs	r1, #48	; 0x30
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f7ff fe74 	bl	80042b8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <_PrintInt+0x102>
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d3f1      	bcc.n	80045c2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80045de:	68b9      	ldr	r1, [r7, #8]
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f7ff fedf 	bl	80043b0 <_PrintUnsigned>
}
 80045f2:	bf00      	nop
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b098      	sub	sp, #96	; 0x60
 8004600:	af02      	add	r7, sp, #8
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004608:	f3ef 8311 	mrs	r3, BASEPRI
 800460c:	f04f 0120 	mov.w	r1, #32
 8004610:	f381 8811 	msr	BASEPRI, r1
 8004614:	633b      	str	r3, [r7, #48]	; 0x30
 8004616:	48b7      	ldr	r0, [pc, #732]	; (80048f4 <_VPrintTarget+0x2f8>)
 8004618:	f7ff fc73 	bl	8003f02 <_PreparePacket>
 800461c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800461e:	4bb5      	ldr	r3, [pc, #724]	; (80048f4 <_VPrintTarget+0x2f8>)
 8004620:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8004622:	2300      	movs	r3, #0
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004628:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	3301      	adds	r3, #1
 800462e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	3301      	adds	r3, #1
 8004640:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004642:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 8183 	beq.w	8004952 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800464c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004650:	2b25      	cmp	r3, #37	; 0x25
 8004652:	f040 8170 	bne.w	8004936 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004656:	2300      	movs	r3, #0
 8004658:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800465a:	2301      	movs	r3, #1
 800465c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004666:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800466a:	3b23      	subs	r3, #35	; 0x23
 800466c:	2b0d      	cmp	r3, #13
 800466e:	d83f      	bhi.n	80046f0 <_VPrintTarget+0xf4>
 8004670:	a201      	add	r2, pc, #4	; (adr r2, 8004678 <_VPrintTarget+0x7c>)
 8004672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004676:	bf00      	nop
 8004678:	080046e1 	.word	0x080046e1
 800467c:	080046f1 	.word	0x080046f1
 8004680:	080046f1 	.word	0x080046f1
 8004684:	080046f1 	.word	0x080046f1
 8004688:	080046f1 	.word	0x080046f1
 800468c:	080046f1 	.word	0x080046f1
 8004690:	080046f1 	.word	0x080046f1
 8004694:	080046f1 	.word	0x080046f1
 8004698:	080046d1 	.word	0x080046d1
 800469c:	080046f1 	.word	0x080046f1
 80046a0:	080046b1 	.word	0x080046b1
 80046a4:	080046f1 	.word	0x080046f1
 80046a8:	080046f1 	.word	0x080046f1
 80046ac:	080046c1 	.word	0x080046c1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80046b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046b2:	f043 0301 	orr.w	r3, r3, #1
 80046b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	3301      	adds	r3, #1
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	e01a      	b.n	80046f6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80046c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046c2:	f043 0302 	orr.w	r3, r3, #2
 80046c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3301      	adds	r3, #1
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	e012      	b.n	80046f6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80046d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046d2:	f043 0304 	orr.w	r3, r3, #4
 80046d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	3301      	adds	r3, #1
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	e00a      	b.n	80046f6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80046e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e2:	f043 0308 	orr.w	r3, r3, #8
 80046e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	3301      	adds	r3, #1
 80046ec:	60fb      	str	r3, [r7, #12]
 80046ee:	e002      	b.n	80046f6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80046f0:	2300      	movs	r3, #0
 80046f2:	653b      	str	r3, [r7, #80]	; 0x50
 80046f4:	bf00      	nop
        }
      } while (v);
 80046f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1b0      	bne.n	800465e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80046fc:	2300      	movs	r3, #0
 80046fe:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004708:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800470c:	2b2f      	cmp	r3, #47	; 0x2f
 800470e:	d912      	bls.n	8004736 <_VPrintTarget+0x13a>
 8004710:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004714:	2b39      	cmp	r3, #57	; 0x39
 8004716:	d80e      	bhi.n	8004736 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3301      	adds	r3, #1
 800471c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800471e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	461a      	mov	r2, r3
 800472a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800472e:	4413      	add	r3, r2
 8004730:	3b30      	subs	r3, #48	; 0x30
 8004732:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004734:	e7e4      	b.n	8004700 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004736:	2300      	movs	r3, #0
 8004738:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004742:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004746:	2b2e      	cmp	r3, #46	; 0x2e
 8004748:	d11d      	bne.n	8004786 <_VPrintTarget+0x18a>
        sFormat++;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3301      	adds	r3, #1
 800474e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004758:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800475c:	2b2f      	cmp	r3, #47	; 0x2f
 800475e:	d912      	bls.n	8004786 <_VPrintTarget+0x18a>
 8004760:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004764:	2b39      	cmp	r3, #57	; 0x39
 8004766:	d80e      	bhi.n	8004786 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	3301      	adds	r3, #1
 800476c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800476e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	461a      	mov	r2, r3
 800477a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800477e:	4413      	add	r3, r2
 8004780:	3b30      	subs	r3, #48	; 0x30
 8004782:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004784:	e7e4      	b.n	8004750 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800478e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004792:	2b6c      	cmp	r3, #108	; 0x6c
 8004794:	d003      	beq.n	800479e <_VPrintTarget+0x1a2>
 8004796:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800479a:	2b68      	cmp	r3, #104	; 0x68
 800479c:	d107      	bne.n	80047ae <_VPrintTarget+0x1b2>
          c = *sFormat;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3301      	adds	r3, #1
 80047aa:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80047ac:	e7ef      	b.n	800478e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80047ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047b2:	2b25      	cmp	r3, #37	; 0x25
 80047b4:	f000 80b3 	beq.w	800491e <_VPrintTarget+0x322>
 80047b8:	2b25      	cmp	r3, #37	; 0x25
 80047ba:	f2c0 80b7 	blt.w	800492c <_VPrintTarget+0x330>
 80047be:	2b78      	cmp	r3, #120	; 0x78
 80047c0:	f300 80b4 	bgt.w	800492c <_VPrintTarget+0x330>
 80047c4:	2b58      	cmp	r3, #88	; 0x58
 80047c6:	f2c0 80b1 	blt.w	800492c <_VPrintTarget+0x330>
 80047ca:	3b58      	subs	r3, #88	; 0x58
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	f200 80ad 	bhi.w	800492c <_VPrintTarget+0x330>
 80047d2:	a201      	add	r2, pc, #4	; (adr r2, 80047d8 <_VPrintTarget+0x1dc>)
 80047d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d8:	080048cf 	.word	0x080048cf
 80047dc:	0800492d 	.word	0x0800492d
 80047e0:	0800492d 	.word	0x0800492d
 80047e4:	0800492d 	.word	0x0800492d
 80047e8:	0800492d 	.word	0x0800492d
 80047ec:	0800492d 	.word	0x0800492d
 80047f0:	0800492d 	.word	0x0800492d
 80047f4:	0800492d 	.word	0x0800492d
 80047f8:	0800492d 	.word	0x0800492d
 80047fc:	0800492d 	.word	0x0800492d
 8004800:	0800492d 	.word	0x0800492d
 8004804:	0800485d 	.word	0x0800485d
 8004808:	08004883 	.word	0x08004883
 800480c:	0800492d 	.word	0x0800492d
 8004810:	0800492d 	.word	0x0800492d
 8004814:	0800492d 	.word	0x0800492d
 8004818:	0800492d 	.word	0x0800492d
 800481c:	0800492d 	.word	0x0800492d
 8004820:	0800492d 	.word	0x0800492d
 8004824:	0800492d 	.word	0x0800492d
 8004828:	0800492d 	.word	0x0800492d
 800482c:	0800492d 	.word	0x0800492d
 8004830:	0800492d 	.word	0x0800492d
 8004834:	0800492d 	.word	0x0800492d
 8004838:	080048f9 	.word	0x080048f9
 800483c:	0800492d 	.word	0x0800492d
 8004840:	0800492d 	.word	0x0800492d
 8004844:	0800492d 	.word	0x0800492d
 8004848:	0800492d 	.word	0x0800492d
 800484c:	080048a9 	.word	0x080048a9
 8004850:	0800492d 	.word	0x0800492d
 8004854:	0800492d 	.word	0x0800492d
 8004858:	080048cf 	.word	0x080048cf
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	1d19      	adds	r1, r3, #4
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6011      	str	r1, [r2, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800486a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800486c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004870:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004874:	f107 0314 	add.w	r3, r7, #20
 8004878:	4611      	mov	r1, r2
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff fd1c 	bl	80042b8 <_StoreChar>
        break;
 8004880:	e055      	b.n	800492e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	1d19      	adds	r1, r3, #4
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6011      	str	r1, [r2, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004890:	f107 0014 	add.w	r0, r7, #20
 8004894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004896:	9301      	str	r3, [sp, #4]
 8004898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800489e:	220a      	movs	r2, #10
 80048a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80048a2:	f7ff fe1b 	bl	80044dc <_PrintInt>
        break;
 80048a6:	e042      	b.n	800492e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	1d19      	adds	r1, r3, #4
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6011      	str	r1, [r2, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80048b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80048b8:	f107 0014 	add.w	r0, r7, #20
 80048bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048be:	9301      	str	r3, [sp, #4]
 80048c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c6:	220a      	movs	r2, #10
 80048c8:	f7ff fd72 	bl	80043b0 <_PrintUnsigned>
        break;
 80048cc:	e02f      	b.n	800492e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	1d19      	adds	r1, r3, #4
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6011      	str	r1, [r2, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80048dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80048de:	f107 0014 	add.w	r0, r7, #20
 80048e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e4:	9301      	str	r3, [sp, #4]
 80048e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ec:	2210      	movs	r2, #16
 80048ee:	f7ff fd5f 	bl	80043b0 <_PrintUnsigned>
        break;
 80048f2:	e01c      	b.n	800492e <_VPrintTarget+0x332>
 80048f4:	200143a8 	.word	0x200143a8
      case 'p':
        v = va_arg(*pParamList, int);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	1d19      	adds	r1, r3, #4
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6011      	str	r1, [r2, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004906:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004908:	f107 0014 	add.w	r0, r7, #20
 800490c:	2300      	movs	r3, #0
 800490e:	9301      	str	r3, [sp, #4]
 8004910:	2308      	movs	r3, #8
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	2308      	movs	r3, #8
 8004916:	2210      	movs	r2, #16
 8004918:	f7ff fd4a 	bl	80043b0 <_PrintUnsigned>
        break;
 800491c:	e007      	b.n	800492e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800491e:	f107 0314 	add.w	r3, r7, #20
 8004922:	2125      	movs	r1, #37	; 0x25
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff fcc7 	bl	80042b8 <_StoreChar>
        break;
 800492a:	e000      	b.n	800492e <_VPrintTarget+0x332>
      default:
        break;
 800492c:	bf00      	nop
      }
      sFormat++;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3301      	adds	r3, #1
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	e007      	b.n	8004946 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004936:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800493a:	f107 0314 	add.w	r3, r7, #20
 800493e:	4611      	mov	r1, r2
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff fcb9 	bl	80042b8 <_StoreChar>
    }
  } while (*sFormat);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	f47f ae72 	bne.w	8004634 <_VPrintTarget+0x38>
 8004950:	e000      	b.n	8004954 <_VPrintTarget+0x358>
      break;
 8004952:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	2b00      	cmp	r3, #0
 8004958:	d041      	beq.n	80049de <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800495a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	643b      	str	r3, [r7, #64]	; 0x40
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800496a:	e00b      	b.n	8004984 <_VPrintTarget+0x388>
 800496c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496e:	b2da      	uxtb	r2, r3
 8004970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004972:	1c59      	adds	r1, r3, #1
 8004974:	6439      	str	r1, [r7, #64]	; 0x40
 8004976:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004980:	09db      	lsrs	r3, r3, #7
 8004982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004986:	2b7f      	cmp	r3, #127	; 0x7f
 8004988:	d8f0      	bhi.n	800496c <_VPrintTarget+0x370>
 800498a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	643a      	str	r2, [r7, #64]	; 0x40
 8004990:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]
 8004996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004998:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	63bb      	str	r3, [r7, #56]	; 0x38
 800499e:	2300      	movs	r3, #0
 80049a0:	637b      	str	r3, [r7, #52]	; 0x34
 80049a2:	e00b      	b.n	80049bc <_VPrintTarget+0x3c0>
 80049a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049aa:	1c59      	adds	r1, r3, #1
 80049ac:	63b9      	str	r1, [r7, #56]	; 0x38
 80049ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	701a      	strb	r2, [r3, #0]
 80049b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b8:	09db      	lsrs	r3, r3, #7
 80049ba:	637b      	str	r3, [r7, #52]	; 0x34
 80049bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049be:	2b7f      	cmp	r3, #127	; 0x7f
 80049c0:	d8f0      	bhi.n	80049a4 <_VPrintTarget+0x3a8>
 80049c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	63ba      	str	r2, [r7, #56]	; 0x38
 80049c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	69b9      	ldr	r1, [r7, #24]
 80049d6:	221a      	movs	r2, #26
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff fb85 	bl	80040e8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80049de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e0:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80049e4:	bf00      	nop
 80049e6:	3758      	adds	r7, #88	; 0x58
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af02      	add	r7, sp, #8
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80049fa:	2300      	movs	r3, #0
 80049fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a00:	4917      	ldr	r1, [pc, #92]	; (8004a60 <SEGGER_SYSVIEW_Init+0x74>)
 8004a02:	4818      	ldr	r0, [pc, #96]	; (8004a64 <SEGGER_SYSVIEW_Init+0x78>)
 8004a04:	f7ff f93c 	bl	8003c80 <SEGGER_RTT_AllocUpBuffer>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	4b16      	ldr	r3, [pc, #88]	; (8004a68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a0e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004a10:	4b15      	ldr	r3, [pc, #84]	; (8004a68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a12:	785a      	ldrb	r2, [r3, #1]
 8004a14:	4b14      	ldr	r3, [pc, #80]	; (8004a68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a16:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004a18:	4b13      	ldr	r3, [pc, #76]	; (8004a68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a1a:	7e1b      	ldrb	r3, [r3, #24]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	2300      	movs	r3, #0
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	2308      	movs	r3, #8
 8004a24:	4a11      	ldr	r2, [pc, #68]	; (8004a6c <SEGGER_SYSVIEW_Init+0x80>)
 8004a26:	490f      	ldr	r1, [pc, #60]	; (8004a64 <SEGGER_SYSVIEW_Init+0x78>)
 8004a28:	f7ff f9ae 	bl	8003d88 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004a2c:	4b0e      	ldr	r3, [pc, #56]	; (8004a68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004a32:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <SEGGER_SYSVIEW_Init+0x84>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a0c      	ldr	r2, [pc, #48]	; (8004a68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a38:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004a3a:	4a0b      	ldr	r2, [pc, #44]	; (8004a68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004a40:	4a09      	ldr	r2, [pc, #36]	; (8004a68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004a46:	4a08      	ldr	r2, [pc, #32]	; (8004a68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004a4c:	4a06      	ldr	r2, [pc, #24]	; (8004a68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004a52:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004a58:	bf00      	nop
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	20013370 	.word	0x20013370
 8004a64:	080074f0 	.word	0x080074f0
 8004a68:	20014378 	.word	0x20014378
 8004a6c:	20014370 	.word	0x20014370
 8004a70:	e0001004 	.word	0xe0001004

08004a74 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004a7c:	4a04      	ldr	r2, [pc, #16]	; (8004a90 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6113      	str	r3, [r2, #16]
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	20014378 	.word	0x20014378

08004a94 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a9c:	f3ef 8311 	mrs	r3, BASEPRI
 8004aa0:	f04f 0120 	mov.w	r1, #32
 8004aa4:	f381 8811 	msr	BASEPRI, r1
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	4808      	ldr	r0, [pc, #32]	; (8004acc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004aac:	f7ff fa29 	bl	8003f02 <_PreparePacket>
 8004ab0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	68b8      	ldr	r0, [r7, #8]
 8004ab8:	f7ff fb16 	bl	80040e8 <_SendPacket>
  RECORD_END();
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f383 8811 	msr	BASEPRI, r3
}
 8004ac2:	bf00      	nop
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	200143a8 	.word	0x200143a8

08004ad0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ada:	f3ef 8311 	mrs	r3, BASEPRI
 8004ade:	f04f 0120 	mov.w	r1, #32
 8004ae2:	f381 8811 	msr	BASEPRI, r1
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	4816      	ldr	r0, [pc, #88]	; (8004b44 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004aea:	f7ff fa0a 	bl	8003f02 <_PreparePacket>
 8004aee:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	61fb      	str	r3, [r7, #28]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	61bb      	str	r3, [r7, #24]
 8004afc:	e00b      	b.n	8004b16 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	1c59      	adds	r1, r3, #1
 8004b06:	61f9      	str	r1, [r7, #28]
 8004b08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	701a      	strb	r2, [r3, #0]
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	09db      	lsrs	r3, r3, #7
 8004b14:	61bb      	str	r3, [r7, #24]
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	2b7f      	cmp	r3, #127	; 0x7f
 8004b1a:	d8f0      	bhi.n	8004afe <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	61fa      	str	r2, [r7, #28]
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	b2d2      	uxtb	r2, r2
 8004b26:	701a      	strb	r2, [r3, #0]
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	68f9      	ldr	r1, [r7, #12]
 8004b30:	6938      	ldr	r0, [r7, #16]
 8004b32:	f7ff fad9 	bl	80040e8 <_SendPacket>
  RECORD_END();
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f383 8811 	msr	BASEPRI, r3
}
 8004b3c:	bf00      	nop
 8004b3e:	3720      	adds	r7, #32
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	200143a8 	.word	0x200143a8

08004b48 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08c      	sub	sp, #48	; 0x30
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004b54:	f3ef 8311 	mrs	r3, BASEPRI
 8004b58:	f04f 0120 	mov.w	r1, #32
 8004b5c:	f381 8811 	msr	BASEPRI, r1
 8004b60:	61fb      	str	r3, [r7, #28]
 8004b62:	4825      	ldr	r0, [pc, #148]	; (8004bf8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004b64:	f7ff f9cd 	bl	8003f02 <_PreparePacket>
 8004b68:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b76:	e00b      	b.n	8004b90 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7e:	1c59      	adds	r1, r3, #1
 8004b80:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	09db      	lsrs	r3, r3, #7
 8004b8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b92:	2b7f      	cmp	r3, #127	; 0x7f
 8004b94:	d8f0      	bhi.n	8004b78 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]
 8004ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	623b      	str	r3, [r7, #32]
 8004bae:	e00b      	b.n	8004bc8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	1c59      	adds	r1, r3, #1
 8004bb8:	6279      	str	r1, [r7, #36]	; 0x24
 8004bba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	701a      	strb	r2, [r3, #0]
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	09db      	lsrs	r3, r3, #7
 8004bc6:	623b      	str	r3, [r7, #32]
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	2b7f      	cmp	r3, #127	; 0x7f
 8004bcc:	d8f0      	bhi.n	8004bb0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	627a      	str	r2, [r7, #36]	; 0x24
 8004bd4:	6a3a      	ldr	r2, [r7, #32]
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	701a      	strb	r2, [r3, #0]
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	6979      	ldr	r1, [r7, #20]
 8004be2:	69b8      	ldr	r0, [r7, #24]
 8004be4:	f7ff fa80 	bl	80040e8 <_SendPacket>
  RECORD_END();
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	f383 8811 	msr	BASEPRI, r3
}
 8004bee:	bf00      	nop
 8004bf0:	3730      	adds	r7, #48	; 0x30
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	200143a8 	.word	0x200143a8

08004bfc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08e      	sub	sp, #56	; 0x38
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c0a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c0e:	f04f 0120 	mov.w	r1, #32
 8004c12:	f381 8811 	msr	BASEPRI, r1
 8004c16:	61fb      	str	r3, [r7, #28]
 8004c18:	4832      	ldr	r0, [pc, #200]	; (8004ce4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004c1a:	f7ff f972 	bl	8003f02 <_PreparePacket>
 8004c1e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	637b      	str	r3, [r7, #52]	; 0x34
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	633b      	str	r3, [r7, #48]	; 0x30
 8004c2c:	e00b      	b.n	8004c46 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c34:	1c59      	adds	r1, r3, #1
 8004c36:	6379      	str	r1, [r7, #52]	; 0x34
 8004c38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	701a      	strb	r2, [r3, #0]
 8004c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c42:	09db      	lsrs	r3, r3, #7
 8004c44:	633b      	str	r3, [r7, #48]	; 0x30
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	2b7f      	cmp	r3, #127	; 0x7f
 8004c4a:	d8f0      	bhi.n	8004c2e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	637a      	str	r2, [r7, #52]	; 0x34
 8004c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	701a      	strb	r2, [r3, #0]
 8004c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c64:	e00b      	b.n	8004c7e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6c:	1c59      	adds	r1, r3, #1
 8004c6e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004c70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	701a      	strb	r2, [r3, #0]
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	09db      	lsrs	r3, r3, #7
 8004c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	2b7f      	cmp	r3, #127	; 0x7f
 8004c82:	d8f0      	bhi.n	8004c66 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	701a      	strb	r2, [r3, #0]
 8004c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c92:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	623b      	str	r3, [r7, #32]
 8004c9c:	e00b      	b.n	8004cb6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	1c59      	adds	r1, r3, #1
 8004ca6:	6279      	str	r1, [r7, #36]	; 0x24
 8004ca8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	701a      	strb	r2, [r3, #0]
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	09db      	lsrs	r3, r3, #7
 8004cb4:	623b      	str	r3, [r7, #32]
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	2b7f      	cmp	r3, #127	; 0x7f
 8004cba:	d8f0      	bhi.n	8004c9e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	627a      	str	r2, [r7, #36]	; 0x24
 8004cc2:	6a3a      	ldr	r2, [r7, #32]
 8004cc4:	b2d2      	uxtb	r2, r2
 8004cc6:	701a      	strb	r2, [r3, #0]
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	6979      	ldr	r1, [r7, #20]
 8004cd0:	69b8      	ldr	r0, [r7, #24]
 8004cd2:	f7ff fa09 	bl	80040e8 <_SendPacket>
  RECORD_END();
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	f383 8811 	msr	BASEPRI, r3
}
 8004cdc:	bf00      	nop
 8004cde:	3738      	adds	r7, #56	; 0x38
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	200143a8 	.word	0x200143a8

08004ce8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b090      	sub	sp, #64	; 0x40
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004cf6:	f3ef 8311 	mrs	r3, BASEPRI
 8004cfa:	f04f 0120 	mov.w	r1, #32
 8004cfe:	f381 8811 	msr	BASEPRI, r1
 8004d02:	61fb      	str	r3, [r7, #28]
 8004d04:	4840      	ldr	r0, [pc, #256]	; (8004e08 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004d06:	f7ff f8fc 	bl	8003f02 <_PreparePacket>
 8004d0a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d18:	e00b      	b.n	8004d32 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d20:	1c59      	adds	r1, r3, #1
 8004d22:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004d24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	701a      	strb	r2, [r3, #0]
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2e:	09db      	lsrs	r3, r3, #7
 8004d30:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d34:	2b7f      	cmp	r3, #127	; 0x7f
 8004d36:	d8f0      	bhi.n	8004d1a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	701a      	strb	r2, [r3, #0]
 8004d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d46:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d50:	e00b      	b.n	8004d6a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d58:	1c59      	adds	r1, r3, #1
 8004d5a:	6379      	str	r1, [r7, #52]	; 0x34
 8004d5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]
 8004d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d66:	09db      	lsrs	r3, r3, #7
 8004d68:	633b      	str	r3, [r7, #48]	; 0x30
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d6e:	d8f0      	bhi.n	8004d52 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	637a      	str	r2, [r7, #52]	; 0x34
 8004d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	701a      	strb	r2, [r3, #0]
 8004d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d88:	e00b      	b.n	8004da2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d90:	1c59      	adds	r1, r3, #1
 8004d92:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	701a      	strb	r2, [r3, #0]
 8004d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9e:	09db      	lsrs	r3, r3, #7
 8004da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da4:	2b7f      	cmp	r3, #127	; 0x7f
 8004da6:	d8f0      	bhi.n	8004d8a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	701a      	strb	r2, [r3, #0]
 8004db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	627b      	str	r3, [r7, #36]	; 0x24
 8004dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dbe:	623b      	str	r3, [r7, #32]
 8004dc0:	e00b      	b.n	8004dda <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	1c59      	adds	r1, r3, #1
 8004dca:	6279      	str	r1, [r7, #36]	; 0x24
 8004dcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	701a      	strb	r2, [r3, #0]
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	09db      	lsrs	r3, r3, #7
 8004dd8:	623b      	str	r3, [r7, #32]
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	2b7f      	cmp	r3, #127	; 0x7f
 8004dde:	d8f0      	bhi.n	8004dc2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	627a      	str	r2, [r7, #36]	; 0x24
 8004de6:	6a3a      	ldr	r2, [r7, #32]
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	6979      	ldr	r1, [r7, #20]
 8004df4:	69b8      	ldr	r0, [r7, #24]
 8004df6:	f7ff f977 	bl	80040e8 <_SendPacket>
  RECORD_END();
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	f383 8811 	msr	BASEPRI, r3
}
 8004e00:	bf00      	nop
 8004e02:	3740      	adds	r7, #64	; 0x40
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	200143a8 	.word	0x200143a8

08004e0c <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b092      	sub	sp, #72	; 0x48
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
 8004e18:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e1a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e1e:	f04f 0120 	mov.w	r1, #32
 8004e22:	f381 8811 	msr	BASEPRI, r1
 8004e26:	61fb      	str	r3, [r7, #28]
 8004e28:	484e      	ldr	r0, [pc, #312]	; (8004f64 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8004e2a:	f7ff f86a 	bl	8003f02 <_PreparePacket>
 8004e2e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	647b      	str	r3, [r7, #68]	; 0x44
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	643b      	str	r3, [r7, #64]	; 0x40
 8004e3c:	e00b      	b.n	8004e56 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8004e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e44:	1c59      	adds	r1, r3, #1
 8004e46:	6479      	str	r1, [r7, #68]	; 0x44
 8004e48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	701a      	strb	r2, [r3, #0]
 8004e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e52:	09db      	lsrs	r3, r3, #7
 8004e54:	643b      	str	r3, [r7, #64]	; 0x40
 8004e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e58:	2b7f      	cmp	r3, #127	; 0x7f
 8004e5a:	d8f0      	bhi.n	8004e3e <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8004e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	647a      	str	r2, [r7, #68]	; 0x44
 8004e62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	701a      	strb	r2, [r3, #0]
 8004e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e6a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e74:	e00b      	b.n	8004e8e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8004e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e7c:	1c59      	adds	r1, r3, #1
 8004e7e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004e80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	701a      	strb	r2, [r3, #0]
 8004e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8a:	09db      	lsrs	r3, r3, #7
 8004e8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e90:	2b7f      	cmp	r3, #127	; 0x7f
 8004e92:	d8f0      	bhi.n	8004e76 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8004e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	701a      	strb	r2, [r3, #0]
 8004ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	633b      	str	r3, [r7, #48]	; 0x30
 8004eac:	e00b      	b.n	8004ec6 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb4:	1c59      	adds	r1, r3, #1
 8004eb6:	6379      	str	r1, [r7, #52]	; 0x34
 8004eb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	701a      	strb	r2, [r3, #0]
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec2:	09db      	lsrs	r3, r3, #7
 8004ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec8:	2b7f      	cmp	r3, #127	; 0x7f
 8004eca:	d8f0      	bhi.n	8004eae <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8004ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	637a      	str	r2, [r7, #52]	; 0x34
 8004ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	701a      	strb	r2, [r3, #0]
 8004ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eda:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ee2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ee4:	e00b      	b.n	8004efe <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8004ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eec:	1c59      	adds	r1, r3, #1
 8004eee:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ef0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	701a      	strb	r2, [r3, #0]
 8004ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efa:	09db      	lsrs	r3, r3, #7
 8004efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f00:	2b7f      	cmp	r3, #127	; 0x7f
 8004f02:	d8f0      	bhi.n	8004ee6 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8004f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f0c:	b2d2      	uxtb	r2, r2
 8004f0e:	701a      	strb	r2, [r3, #0]
 8004f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	627b      	str	r3, [r7, #36]	; 0x24
 8004f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f1a:	623b      	str	r3, [r7, #32]
 8004f1c:	e00b      	b.n	8004f36 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	1c59      	adds	r1, r3, #1
 8004f26:	6279      	str	r1, [r7, #36]	; 0x24
 8004f28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	09db      	lsrs	r3, r3, #7
 8004f34:	623b      	str	r3, [r7, #32]
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	2b7f      	cmp	r3, #127	; 0x7f
 8004f3a:	d8f0      	bhi.n	8004f1e <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	627a      	str	r2, [r7, #36]	; 0x24
 8004f42:	6a3a      	ldr	r2, [r7, #32]
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	701a      	strb	r2, [r3, #0]
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	6979      	ldr	r1, [r7, #20]
 8004f50:	69b8      	ldr	r0, [r7, #24]
 8004f52:	f7ff f8c9 	bl	80040e8 <_SendPacket>
  RECORD_END();
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	f383 8811 	msr	BASEPRI, r3
}
 8004f5c:	bf00      	nop
 8004f5e:	3748      	adds	r7, #72	; 0x48
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	200143a8 	.word	0x200143a8

08004f68 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08c      	sub	sp, #48	; 0x30
 8004f6c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004f6e:	4b59      	ldr	r3, [pc, #356]	; (80050d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f70:	2201      	movs	r2, #1
 8004f72:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004f74:	f3ef 8311 	mrs	r3, BASEPRI
 8004f78:	f04f 0120 	mov.w	r1, #32
 8004f7c:	f381 8811 	msr	BASEPRI, r1
 8004f80:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004f82:	4b54      	ldr	r3, [pc, #336]	; (80050d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f84:	785b      	ldrb	r3, [r3, #1]
 8004f86:	220a      	movs	r2, #10
 8004f88:	4953      	ldr	r1, [pc, #332]	; (80050d8 <SEGGER_SYSVIEW_Start+0x170>)
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fb f928 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004f96:	f7fe fb47 	bl	8003628 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004f9a:	200a      	movs	r0, #10
 8004f9c:	f7ff fd7a 	bl	8004a94 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004fa0:	f3ef 8311 	mrs	r3, BASEPRI
 8004fa4:	f04f 0120 	mov.w	r1, #32
 8004fa8:	f381 8811 	msr	BASEPRI, r1
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	484b      	ldr	r0, [pc, #300]	; (80050dc <SEGGER_SYSVIEW_Start+0x174>)
 8004fb0:	f7fe ffa7 	bl	8003f02 <_PreparePacket>
 8004fb4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fbe:	4b45      	ldr	r3, [pc, #276]	; (80050d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fc4:	e00b      	b.n	8004fde <SEGGER_SYSVIEW_Start+0x76>
 8004fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fcc:	1c59      	adds	r1, r3, #1
 8004fce:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004fd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	701a      	strb	r2, [r3, #0]
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	09db      	lsrs	r3, r3, #7
 8004fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe0:	2b7f      	cmp	r3, #127	; 0x7f
 8004fe2:	d8f0      	bhi.n	8004fc6 <SEGGER_SYSVIEW_Start+0x5e>
 8004fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	701a      	strb	r2, [r3, #0]
 8004ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff8:	4b36      	ldr	r3, [pc, #216]	; (80050d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	623b      	str	r3, [r7, #32]
 8004ffe:	e00b      	b.n	8005018 <SEGGER_SYSVIEW_Start+0xb0>
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	b2da      	uxtb	r2, r3
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	1c59      	adds	r1, r3, #1
 8005008:	6279      	str	r1, [r7, #36]	; 0x24
 800500a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800500e:	b2d2      	uxtb	r2, r2
 8005010:	701a      	strb	r2, [r3, #0]
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	09db      	lsrs	r3, r3, #7
 8005016:	623b      	str	r3, [r7, #32]
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	2b7f      	cmp	r3, #127	; 0x7f
 800501c:	d8f0      	bhi.n	8005000 <SEGGER_SYSVIEW_Start+0x98>
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	627a      	str	r2, [r7, #36]	; 0x24
 8005024:	6a3a      	ldr	r2, [r7, #32]
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	61fb      	str	r3, [r7, #28]
 8005032:	4b28      	ldr	r3, [pc, #160]	; (80050d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	61bb      	str	r3, [r7, #24]
 8005038:	e00b      	b.n	8005052 <SEGGER_SYSVIEW_Start+0xea>
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	b2da      	uxtb	r2, r3
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	1c59      	adds	r1, r3, #1
 8005042:	61f9      	str	r1, [r7, #28]
 8005044:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	701a      	strb	r2, [r3, #0]
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	09db      	lsrs	r3, r3, #7
 8005050:	61bb      	str	r3, [r7, #24]
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	2b7f      	cmp	r3, #127	; 0x7f
 8005056:	d8f0      	bhi.n	800503a <SEGGER_SYSVIEW_Start+0xd2>
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	61fa      	str	r2, [r7, #28]
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	701a      	strb	r2, [r3, #0]
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	2300      	movs	r3, #0
 800506e:	613b      	str	r3, [r7, #16]
 8005070:	e00b      	b.n	800508a <SEGGER_SYSVIEW_Start+0x122>
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	b2da      	uxtb	r2, r3
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	1c59      	adds	r1, r3, #1
 800507a:	6179      	str	r1, [r7, #20]
 800507c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005080:	b2d2      	uxtb	r2, r2
 8005082:	701a      	strb	r2, [r3, #0]
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	09db      	lsrs	r3, r3, #7
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	2b7f      	cmp	r3, #127	; 0x7f
 800508e:	d8f0      	bhi.n	8005072 <SEGGER_SYSVIEW_Start+0x10a>
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	617a      	str	r2, [r7, #20]
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	701a      	strb	r2, [r3, #0]
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80050a0:	2218      	movs	r2, #24
 80050a2:	6839      	ldr	r1, [r7, #0]
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff f81f 	bl	80040e8 <_SendPacket>
      RECORD_END();
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80050b0:	4b08      	ldr	r3, [pc, #32]	; (80050d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d002      	beq.n	80050be <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80050b8:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80050be:	f000 f9eb 	bl	8005498 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80050c2:	f000 f9b1 	bl	8005428 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80050c6:	f000 fc83 	bl	80059d0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80050ca:	bf00      	nop
 80050cc:	3730      	adds	r7, #48	; 0x30
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20014378 	.word	0x20014378
 80050d8:	08007504 	.word	0x08007504
 80050dc:	200143a8 	.word	0x200143a8

080050e0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050e6:	f3ef 8311 	mrs	r3, BASEPRI
 80050ea:	f04f 0120 	mov.w	r1, #32
 80050ee:	f381 8811 	msr	BASEPRI, r1
 80050f2:	607b      	str	r3, [r7, #4]
 80050f4:	480b      	ldr	r0, [pc, #44]	; (8005124 <SEGGER_SYSVIEW_Stop+0x44>)
 80050f6:	f7fe ff04 	bl	8003f02 <_PreparePacket>
 80050fa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80050fc:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <SEGGER_SYSVIEW_Stop+0x48>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005104:	220b      	movs	r2, #11
 8005106:	6839      	ldr	r1, [r7, #0]
 8005108:	6838      	ldr	r0, [r7, #0]
 800510a:	f7fe ffed 	bl	80040e8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800510e:	4b06      	ldr	r3, [pc, #24]	; (8005128 <SEGGER_SYSVIEW_Stop+0x48>)
 8005110:	2200      	movs	r2, #0
 8005112:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f383 8811 	msr	BASEPRI, r3
}
 800511a:	bf00      	nop
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	200143a8 	.word	0x200143a8
 8005128:	20014378 	.word	0x20014378

0800512c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800512c:	b580      	push	{r7, lr}
 800512e:	b08c      	sub	sp, #48	; 0x30
 8005130:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005132:	f3ef 8311 	mrs	r3, BASEPRI
 8005136:	f04f 0120 	mov.w	r1, #32
 800513a:	f381 8811 	msr	BASEPRI, r1
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	4845      	ldr	r0, [pc, #276]	; (8005258 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005142:	f7fe fede 	bl	8003f02 <_PreparePacket>
 8005146:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005150:	4b42      	ldr	r3, [pc, #264]	; (800525c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	62bb      	str	r3, [r7, #40]	; 0x28
 8005156:	e00b      	b.n	8005170 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515a:	b2da      	uxtb	r2, r3
 800515c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515e:	1c59      	adds	r1, r3, #1
 8005160:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005162:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	701a      	strb	r2, [r3, #0]
 800516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516c:	09db      	lsrs	r3, r3, #7
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005172:	2b7f      	cmp	r3, #127	; 0x7f
 8005174:	d8f0      	bhi.n	8005158 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800517c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	701a      	strb	r2, [r3, #0]
 8005182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005184:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
 800518a:	4b34      	ldr	r3, [pc, #208]	; (800525c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	623b      	str	r3, [r7, #32]
 8005190:	e00b      	b.n	80051aa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	b2da      	uxtb	r2, r3
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	1c59      	adds	r1, r3, #1
 800519a:	6279      	str	r1, [r7, #36]	; 0x24
 800519c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051a0:	b2d2      	uxtb	r2, r2
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	09db      	lsrs	r3, r3, #7
 80051a8:	623b      	str	r3, [r7, #32]
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	2b7f      	cmp	r3, #127	; 0x7f
 80051ae:	d8f0      	bhi.n	8005192 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	627a      	str	r2, [r7, #36]	; 0x24
 80051b6:	6a3a      	ldr	r2, [r7, #32]
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	61fb      	str	r3, [r7, #28]
 80051c4:	4b25      	ldr	r3, [pc, #148]	; (800525c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	e00b      	b.n	80051e4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	1c59      	adds	r1, r3, #1
 80051d4:	61f9      	str	r1, [r7, #28]
 80051d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	09db      	lsrs	r3, r3, #7
 80051e2:	61bb      	str	r3, [r7, #24]
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	2b7f      	cmp	r3, #127	; 0x7f
 80051e8:	d8f0      	bhi.n	80051cc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	61fa      	str	r2, [r7, #28]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	2300      	movs	r3, #0
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	e00b      	b.n	800521c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	b2da      	uxtb	r2, r3
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	1c59      	adds	r1, r3, #1
 800520c:	6179      	str	r1, [r7, #20]
 800520e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	701a      	strb	r2, [r3, #0]
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	09db      	lsrs	r3, r3, #7
 800521a:	613b      	str	r3, [r7, #16]
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	2b7f      	cmp	r3, #127	; 0x7f
 8005220:	d8f0      	bhi.n	8005204 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	617a      	str	r2, [r7, #20]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	701a      	strb	r2, [r3, #0]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005232:	2218      	movs	r2, #24
 8005234:	6879      	ldr	r1, [r7, #4]
 8005236:	68b8      	ldr	r0, [r7, #8]
 8005238:	f7fe ff56 	bl	80040e8 <_SendPacket>
  RECORD_END();
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005242:	4b06      	ldr	r3, [pc, #24]	; (800525c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800524a:	4b04      	ldr	r3, [pc, #16]	; (800525c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	4798      	blx	r3
  }
}
 8005250:	bf00      	nop
 8005252:	3730      	adds	r7, #48	; 0x30
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	200143a8 	.word	0x200143a8
 800525c:	20014378 	.word	0x20014378

08005260 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005260:	b580      	push	{r7, lr}
 8005262:	b092      	sub	sp, #72	; 0x48
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005268:	f3ef 8311 	mrs	r3, BASEPRI
 800526c:	f04f 0120 	mov.w	r1, #32
 8005270:	f381 8811 	msr	BASEPRI, r1
 8005274:	617b      	str	r3, [r7, #20]
 8005276:	486a      	ldr	r0, [pc, #424]	; (8005420 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005278:	f7fe fe43 	bl	8003f02 <_PreparePacket>
 800527c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	647b      	str	r3, [r7, #68]	; 0x44
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	4b66      	ldr	r3, [pc, #408]	; (8005424 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	643b      	str	r3, [r7, #64]	; 0x40
 8005292:	e00b      	b.n	80052ac <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005296:	b2da      	uxtb	r2, r3
 8005298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800529a:	1c59      	adds	r1, r3, #1
 800529c:	6479      	str	r1, [r7, #68]	; 0x44
 800529e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a8:	09db      	lsrs	r3, r3, #7
 80052aa:	643b      	str	r3, [r7, #64]	; 0x40
 80052ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ae:	2b7f      	cmp	r3, #127	; 0x7f
 80052b0:	d8f0      	bhi.n	8005294 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80052b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	647a      	str	r2, [r7, #68]	; 0x44
 80052b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	701a      	strb	r2, [r3, #0]
 80052be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80052cc:	e00b      	b.n	80052e6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80052ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052d4:	1c59      	adds	r1, r3, #1
 80052d6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80052d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	701a      	strb	r2, [r3, #0]
 80052e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e2:	09db      	lsrs	r3, r3, #7
 80052e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80052e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e8:	2b7f      	cmp	r3, #127	; 0x7f
 80052ea:	d8f0      	bhi.n	80052ce <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80052ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ee:	1c5a      	adds	r2, r3, #1
 80052f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80052f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052f4:	b2d2      	uxtb	r2, r2
 80052f6:	701a      	strb	r2, [r3, #0]
 80052f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052fa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2220      	movs	r2, #32
 8005302:	4619      	mov	r1, r3
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f7fe fdaf 	bl	8003e68 <_EncodeStr>
 800530a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800530c:	2209      	movs	r2, #9
 800530e:	68f9      	ldr	r1, [r7, #12]
 8005310:	6938      	ldr	r0, [r7, #16]
 8005312:	f7fe fee9 	bl	80040e8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	637b      	str	r3, [r7, #52]	; 0x34
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4b40      	ldr	r3, [pc, #256]	; (8005424 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	633b      	str	r3, [r7, #48]	; 0x30
 800532a:	e00b      	b.n	8005344 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	b2da      	uxtb	r2, r3
 8005330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005332:	1c59      	adds	r1, r3, #1
 8005334:	6379      	str	r1, [r7, #52]	; 0x34
 8005336:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	09db      	lsrs	r3, r3, #7
 8005342:	633b      	str	r3, [r7, #48]	; 0x30
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	2b7f      	cmp	r3, #127	; 0x7f
 8005348:	d8f0      	bhi.n	800532c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800534a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	637a      	str	r2, [r7, #52]	; 0x34
 8005350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]
 8005356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005358:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28
 8005364:	e00b      	b.n	800537e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005368:	b2da      	uxtb	r2, r3
 800536a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536c:	1c59      	adds	r1, r3, #1
 800536e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005370:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005374:	b2d2      	uxtb	r2, r2
 8005376:	701a      	strb	r2, [r3, #0]
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537a:	09db      	lsrs	r3, r3, #7
 800537c:	62bb      	str	r3, [r7, #40]	; 0x28
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	2b7f      	cmp	r3, #127	; 0x7f
 8005382:	d8f0      	bhi.n	8005366 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	62fa      	str	r2, [r7, #44]	; 0x2c
 800538a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	701a      	strb	r2, [r3, #0]
 8005390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005392:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	623b      	str	r3, [r7, #32]
 800539e:	e00b      	b.n	80053b8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	1c59      	adds	r1, r3, #1
 80053a8:	6279      	str	r1, [r7, #36]	; 0x24
 80053aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	701a      	strb	r2, [r3, #0]
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	09db      	lsrs	r3, r3, #7
 80053b6:	623b      	str	r3, [r7, #32]
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	2b7f      	cmp	r3, #127	; 0x7f
 80053bc:	d8f0      	bhi.n	80053a0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	627a      	str	r2, [r7, #36]	; 0x24
 80053c4:	6a3a      	ldr	r2, [r7, #32]
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	701a      	strb	r2, [r3, #0]
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	61fb      	str	r3, [r7, #28]
 80053d2:	2300      	movs	r3, #0
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	e00b      	b.n	80053f0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	1c59      	adds	r1, r3, #1
 80053e0:	61f9      	str	r1, [r7, #28]
 80053e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	701a      	strb	r2, [r3, #0]
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	09db      	lsrs	r3, r3, #7
 80053ee:	61bb      	str	r3, [r7, #24]
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	2b7f      	cmp	r3, #127	; 0x7f
 80053f4:	d8f0      	bhi.n	80053d8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	61fa      	str	r2, [r7, #28]
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	701a      	strb	r2, [r3, #0]
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005406:	2215      	movs	r2, #21
 8005408:	68f9      	ldr	r1, [r7, #12]
 800540a:	6938      	ldr	r0, [r7, #16]
 800540c:	f7fe fe6c 	bl	80040e8 <_SendPacket>
  RECORD_END();
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f383 8811 	msr	BASEPRI, r3
}
 8005416:	bf00      	nop
 8005418:	3748      	adds	r7, #72	; 0x48
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	200143a8 	.word	0x200143a8
 8005424:	20014378 	.word	0x20014378

08005428 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800542c:	4b07      	ldr	r3, [pc, #28]	; (800544c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d008      	beq.n	8005446 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005434:	4b05      	ldr	r3, [pc, #20]	; (800544c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800543e:	4b03      	ldr	r3, [pc, #12]	; (800544c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	4798      	blx	r3
  }
}
 8005446:	bf00      	nop
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20014378 	.word	0x20014378

08005450 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005458:	f3ef 8311 	mrs	r3, BASEPRI
 800545c:	f04f 0120 	mov.w	r1, #32
 8005460:	f381 8811 	msr	BASEPRI, r1
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	480b      	ldr	r0, [pc, #44]	; (8005494 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005468:	f7fe fd4b 	bl	8003f02 <_PreparePacket>
 800546c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800546e:	2280      	movs	r2, #128	; 0x80
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	6938      	ldr	r0, [r7, #16]
 8005474:	f7fe fcf8 	bl	8003e68 <_EncodeStr>
 8005478:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800547a:	220e      	movs	r2, #14
 800547c:	68f9      	ldr	r1, [r7, #12]
 800547e:	6938      	ldr	r0, [r7, #16]
 8005480:	f7fe fe32 	bl	80040e8 <_SendPacket>
  RECORD_END();
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f383 8811 	msr	BASEPRI, r3
}
 800548a:	bf00      	nop
 800548c:	3718      	adds	r7, #24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	200143a8 	.word	0x200143a8

08005498 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005498:	b590      	push	{r4, r7, lr}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800549e:	4b15      	ldr	r3, [pc, #84]	; (80054f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d01a      	beq.n	80054dc <SEGGER_SYSVIEW_RecordSystime+0x44>
 80054a6:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d015      	beq.n	80054dc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80054b0:	4b10      	ldr	r3, [pc, #64]	; (80054f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4798      	blx	r3
 80054b8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80054bc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80054be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054c2:	f04f 0200 	mov.w	r2, #0
 80054c6:	f04f 0300 	mov.w	r3, #0
 80054ca:	000a      	movs	r2, r1
 80054cc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80054ce:	4613      	mov	r3, r2
 80054d0:	461a      	mov	r2, r3
 80054d2:	4621      	mov	r1, r4
 80054d4:	200d      	movs	r0, #13
 80054d6:	f7ff fb37 	bl	8004b48 <SEGGER_SYSVIEW_RecordU32x2>
 80054da:	e006      	b.n	80054ea <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80054dc:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4619      	mov	r1, r3
 80054e2:	200c      	movs	r0, #12
 80054e4:	f7ff faf4 	bl	8004ad0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80054e8:	bf00      	nop
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd90      	pop	{r4, r7, pc}
 80054f2:	bf00      	nop
 80054f4:	20014378 	.word	0x20014378
 80054f8:	e0001004 	.word	0xe0001004

080054fc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005502:	f3ef 8311 	mrs	r3, BASEPRI
 8005506:	f04f 0120 	mov.w	r1, #32
 800550a:	f381 8811 	msr	BASEPRI, r1
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	4819      	ldr	r0, [pc, #100]	; (8005578 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005512:	f7fe fcf6 	bl	8003f02 <_PreparePacket>
 8005516:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800551c:	4b17      	ldr	r3, [pc, #92]	; (800557c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005524:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	613b      	str	r3, [r7, #16]
 800552e:	e00b      	b.n	8005548 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	b2da      	uxtb	r2, r3
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	1c59      	adds	r1, r3, #1
 8005538:	6179      	str	r1, [r7, #20]
 800553a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800553e:	b2d2      	uxtb	r2, r2
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	09db      	lsrs	r3, r3, #7
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	2b7f      	cmp	r3, #127	; 0x7f
 800554c:	d8f0      	bhi.n	8005530 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	617a      	str	r2, [r7, #20]
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	701a      	strb	r2, [r3, #0]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800555e:	2202      	movs	r2, #2
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	68b8      	ldr	r0, [r7, #8]
 8005564:	f7fe fdc0 	bl	80040e8 <_SendPacket>
  RECORD_END();
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f383 8811 	msr	BASEPRI, r3
}
 800556e:	bf00      	nop
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	200143a8 	.word	0x200143a8
 800557c:	e000ed04 	.word	0xe000ed04

08005580 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005586:	f3ef 8311 	mrs	r3, BASEPRI
 800558a:	f04f 0120 	mov.w	r1, #32
 800558e:	f381 8811 	msr	BASEPRI, r1
 8005592:	607b      	str	r3, [r7, #4]
 8005594:	4807      	ldr	r0, [pc, #28]	; (80055b4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005596:	f7fe fcb4 	bl	8003f02 <_PreparePacket>
 800559a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800559c:	2203      	movs	r2, #3
 800559e:	6839      	ldr	r1, [r7, #0]
 80055a0:	6838      	ldr	r0, [r7, #0]
 80055a2:	f7fe fda1 	bl	80040e8 <_SendPacket>
  RECORD_END();
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f383 8811 	msr	BASEPRI, r3
}
 80055ac:	bf00      	nop
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	200143a8 	.word	0x200143a8

080055b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055be:	f3ef 8311 	mrs	r3, BASEPRI
 80055c2:	f04f 0120 	mov.w	r1, #32
 80055c6:	f381 8811 	msr	BASEPRI, r1
 80055ca:	607b      	str	r3, [r7, #4]
 80055cc:	4807      	ldr	r0, [pc, #28]	; (80055ec <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80055ce:	f7fe fc98 	bl	8003f02 <_PreparePacket>
 80055d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80055d4:	2212      	movs	r2, #18
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	6838      	ldr	r0, [r7, #0]
 80055da:	f7fe fd85 	bl	80040e8 <_SendPacket>
  RECORD_END();
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f383 8811 	msr	BASEPRI, r3
}
 80055e4:	bf00      	nop
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	200143a8 	.word	0x200143a8

080055f0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055f6:	f3ef 8311 	mrs	r3, BASEPRI
 80055fa:	f04f 0120 	mov.w	r1, #32
 80055fe:	f381 8811 	msr	BASEPRI, r1
 8005602:	607b      	str	r3, [r7, #4]
 8005604:	4807      	ldr	r0, [pc, #28]	; (8005624 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005606:	f7fe fc7c 	bl	8003f02 <_PreparePacket>
 800560a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800560c:	2211      	movs	r2, #17
 800560e:	6839      	ldr	r1, [r7, #0]
 8005610:	6838      	ldr	r0, [r7, #0]
 8005612:	f7fe fd69 	bl	80040e8 <_SendPacket>
  RECORD_END();
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f383 8811 	msr	BASEPRI, r3
}
 800561c:	bf00      	nop
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	200143a8 	.word	0x200143a8

08005628 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005630:	f3ef 8311 	mrs	r3, BASEPRI
 8005634:	f04f 0120 	mov.w	r1, #32
 8005638:	f381 8811 	msr	BASEPRI, r1
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	4819      	ldr	r0, [pc, #100]	; (80056a4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005640:	f7fe fc5f 	bl	8003f02 <_PreparePacket>
 8005644:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800564a:	4b17      	ldr	r3, [pc, #92]	; (80056a8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	61fb      	str	r3, [r7, #28]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	61bb      	str	r3, [r7, #24]
 800565c:	e00b      	b.n	8005676 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	b2da      	uxtb	r2, r3
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	1c59      	adds	r1, r3, #1
 8005666:	61f9      	str	r1, [r7, #28]
 8005668:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800566c:	b2d2      	uxtb	r2, r2
 800566e:	701a      	strb	r2, [r3, #0]
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	09db      	lsrs	r3, r3, #7
 8005674:	61bb      	str	r3, [r7, #24]
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	2b7f      	cmp	r3, #127	; 0x7f
 800567a:	d8f0      	bhi.n	800565e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	61fa      	str	r2, [r7, #28]
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	b2d2      	uxtb	r2, r2
 8005686:	701a      	strb	r2, [r3, #0]
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800568c:	2208      	movs	r2, #8
 800568e:	68f9      	ldr	r1, [r7, #12]
 8005690:	6938      	ldr	r0, [r7, #16]
 8005692:	f7fe fd29 	bl	80040e8 <_SendPacket>
  RECORD_END();
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f383 8811 	msr	BASEPRI, r3
}
 800569c:	bf00      	nop
 800569e:	3720      	adds	r7, #32
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	200143a8 	.word	0x200143a8
 80056a8:	20014378 	.word	0x20014378

080056ac <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b088      	sub	sp, #32
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056b4:	f3ef 8311 	mrs	r3, BASEPRI
 80056b8:	f04f 0120 	mov.w	r1, #32
 80056bc:	f381 8811 	msr	BASEPRI, r1
 80056c0:	617b      	str	r3, [r7, #20]
 80056c2:	4819      	ldr	r0, [pc, #100]	; (8005728 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80056c4:	f7fe fc1d 	bl	8003f02 <_PreparePacket>
 80056c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80056ce:	4b17      	ldr	r3, [pc, #92]	; (800572c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	61fb      	str	r3, [r7, #28]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	61bb      	str	r3, [r7, #24]
 80056e0:	e00b      	b.n	80056fa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	1c59      	adds	r1, r3, #1
 80056ea:	61f9      	str	r1, [r7, #28]
 80056ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056f0:	b2d2      	uxtb	r2, r2
 80056f2:	701a      	strb	r2, [r3, #0]
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	09db      	lsrs	r3, r3, #7
 80056f8:	61bb      	str	r3, [r7, #24]
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	2b7f      	cmp	r3, #127	; 0x7f
 80056fe:	d8f0      	bhi.n	80056e2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	61fa      	str	r2, [r7, #28]
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	701a      	strb	r2, [r3, #0]
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005710:	2204      	movs	r2, #4
 8005712:	68f9      	ldr	r1, [r7, #12]
 8005714:	6938      	ldr	r0, [r7, #16]
 8005716:	f7fe fce7 	bl	80040e8 <_SendPacket>
  RECORD_END();
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f383 8811 	msr	BASEPRI, r3
}
 8005720:	bf00      	nop
 8005722:	3720      	adds	r7, #32
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	200143a8 	.word	0x200143a8
 800572c:	20014378 	.word	0x20014378

08005730 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005730:	b580      	push	{r7, lr}
 8005732:	b088      	sub	sp, #32
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005738:	f3ef 8311 	mrs	r3, BASEPRI
 800573c:	f04f 0120 	mov.w	r1, #32
 8005740:	f381 8811 	msr	BASEPRI, r1
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	4819      	ldr	r0, [pc, #100]	; (80057ac <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005748:	f7fe fbdb 	bl	8003f02 <_PreparePacket>
 800574c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005752:	4b17      	ldr	r3, [pc, #92]	; (80057b0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	61fb      	str	r3, [r7, #28]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	61bb      	str	r3, [r7, #24]
 8005764:	e00b      	b.n	800577e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	b2da      	uxtb	r2, r3
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	1c59      	adds	r1, r3, #1
 800576e:	61f9      	str	r1, [r7, #28]
 8005770:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	701a      	strb	r2, [r3, #0]
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	09db      	lsrs	r3, r3, #7
 800577c:	61bb      	str	r3, [r7, #24]
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	2b7f      	cmp	r3, #127	; 0x7f
 8005782:	d8f0      	bhi.n	8005766 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	61fa      	str	r2, [r7, #28]
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	b2d2      	uxtb	r2, r2
 800578e:	701a      	strb	r2, [r3, #0]
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005794:	2206      	movs	r2, #6
 8005796:	68f9      	ldr	r1, [r7, #12]
 8005798:	6938      	ldr	r0, [r7, #16]
 800579a:	f7fe fca5 	bl	80040e8 <_SendPacket>
  RECORD_END();
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f383 8811 	msr	BASEPRI, r3
}
 80057a4:	bf00      	nop
 80057a6:	3720      	adds	r7, #32
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	200143a8 	.word	0x200143a8
 80057b0:	20014378 	.word	0x20014378

080057b4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08a      	sub	sp, #40	; 0x28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80057be:	f3ef 8311 	mrs	r3, BASEPRI
 80057c2:	f04f 0120 	mov.w	r1, #32
 80057c6:	f381 8811 	msr	BASEPRI, r1
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	4827      	ldr	r0, [pc, #156]	; (800586c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80057ce:	f7fe fb98 	bl	8003f02 <_PreparePacket>
 80057d2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80057d8:	4b25      	ldr	r3, [pc, #148]	; (8005870 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	623b      	str	r3, [r7, #32]
 80057ea:	e00b      	b.n	8005804 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	1c59      	adds	r1, r3, #1
 80057f4:	6279      	str	r1, [r7, #36]	; 0x24
 80057f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057fa:	b2d2      	uxtb	r2, r2
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	09db      	lsrs	r3, r3, #7
 8005802:	623b      	str	r3, [r7, #32]
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	2b7f      	cmp	r3, #127	; 0x7f
 8005808:	d8f0      	bhi.n	80057ec <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	627a      	str	r2, [r7, #36]	; 0x24
 8005810:	6a3a      	ldr	r2, [r7, #32]
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	61fb      	str	r3, [r7, #28]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	61bb      	str	r3, [r7, #24]
 8005822:	e00b      	b.n	800583c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	b2da      	uxtb	r2, r3
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	1c59      	adds	r1, r3, #1
 800582c:	61f9      	str	r1, [r7, #28]
 800582e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	09db      	lsrs	r3, r3, #7
 800583a:	61bb      	str	r3, [r7, #24]
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	2b7f      	cmp	r3, #127	; 0x7f
 8005840:	d8f0      	bhi.n	8005824 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	61fa      	str	r2, [r7, #28]
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	701a      	strb	r2, [r3, #0]
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005852:	2207      	movs	r2, #7
 8005854:	68f9      	ldr	r1, [r7, #12]
 8005856:	6938      	ldr	r0, [r7, #16]
 8005858:	f7fe fc46 	bl	80040e8 <_SendPacket>
  RECORD_END();
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f383 8811 	msr	BASEPRI, r3
}
 8005862:	bf00      	nop
 8005864:	3728      	adds	r7, #40	; 0x28
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	200143a8 	.word	0x200143a8
 8005870:	20014378 	.word	0x20014378

08005874 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800587c:	4b04      	ldr	r3, [pc, #16]	; (8005890 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	1ad3      	subs	r3, r2, r3
}
 8005884:	4618      	mov	r0, r3
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	20014378 	.word	0x20014378

08005894 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005894:	b580      	push	{r7, lr}
 8005896:	b08c      	sub	sp, #48	; 0x30
 8005898:	af00      	add	r7, sp, #0
 800589a:	4603      	mov	r3, r0
 800589c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800589e:	4b3b      	ldr	r3, [pc, #236]	; (800598c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d06d      	beq.n	8005982 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80058a6:	4b39      	ldr	r3, [pc, #228]	; (800598c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80058ac:	2300      	movs	r3, #0
 80058ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80058b0:	e008      	b.n	80058c4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80058b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80058b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d007      	beq.n	80058ce <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80058be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c0:	3301      	adds	r3, #1
 80058c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80058c4:	79fb      	ldrb	r3, [r7, #7]
 80058c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d3f2      	bcc.n	80058b2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80058cc:	e000      	b.n	80058d0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80058ce:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80058d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d055      	beq.n	8005982 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058d6:	f3ef 8311 	mrs	r3, BASEPRI
 80058da:	f04f 0120 	mov.w	r1, #32
 80058de:	f381 8811 	msr	BASEPRI, r1
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	482a      	ldr	r0, [pc, #168]	; (8005990 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80058e6:	f7fe fb0c 	bl	8003f02 <_PreparePacket>
 80058ea:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	627b      	str	r3, [r7, #36]	; 0x24
 80058f4:	79fb      	ldrb	r3, [r7, #7]
 80058f6:	623b      	str	r3, [r7, #32]
 80058f8:	e00b      	b.n	8005912 <SEGGER_SYSVIEW_SendModule+0x7e>
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	1c59      	adds	r1, r3, #1
 8005902:	6279      	str	r1, [r7, #36]	; 0x24
 8005904:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005908:	b2d2      	uxtb	r2, r2
 800590a:	701a      	strb	r2, [r3, #0]
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	09db      	lsrs	r3, r3, #7
 8005910:	623b      	str	r3, [r7, #32]
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	2b7f      	cmp	r3, #127	; 0x7f
 8005916:	d8f0      	bhi.n	80058fa <SEGGER_SYSVIEW_SendModule+0x66>
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	627a      	str	r2, [r7, #36]	; 0x24
 800591e:	6a3a      	ldr	r2, [r7, #32]
 8005920:	b2d2      	uxtb	r2, r2
 8005922:	701a      	strb	r2, [r3, #0]
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	61fb      	str	r3, [r7, #28]
 800592c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	61bb      	str	r3, [r7, #24]
 8005932:	e00b      	b.n	800594c <SEGGER_SYSVIEW_SendModule+0xb8>
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	b2da      	uxtb	r2, r3
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	1c59      	adds	r1, r3, #1
 800593c:	61f9      	str	r1, [r7, #28]
 800593e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	701a      	strb	r2, [r3, #0]
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	09db      	lsrs	r3, r3, #7
 800594a:	61bb      	str	r3, [r7, #24]
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	2b7f      	cmp	r3, #127	; 0x7f
 8005950:	d8f0      	bhi.n	8005934 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	1c5a      	adds	r2, r3, #1
 8005956:	61fa      	str	r2, [r7, #28]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	701a      	strb	r2, [r3, #0]
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2280      	movs	r2, #128	; 0x80
 8005968:	4619      	mov	r1, r3
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f7fe fa7c 	bl	8003e68 <_EncodeStr>
 8005970:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005972:	2216      	movs	r2, #22
 8005974:	68f9      	ldr	r1, [r7, #12]
 8005976:	6938      	ldr	r0, [r7, #16]
 8005978:	f7fe fbb6 	bl	80040e8 <_SendPacket>
      RECORD_END();
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005982:	bf00      	nop
 8005984:	3730      	adds	r7, #48	; 0x30
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	200143a0 	.word	0x200143a0
 8005990:	200143a8 	.word	0x200143a8

08005994 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800599a:	4b0c      	ldr	r3, [pc, #48]	; (80059cc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00f      	beq.n	80059c2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80059a2:	4b0a      	ldr	r3, [pc, #40]	; (80059cc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1f2      	bne.n	80059a8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80059c2:	bf00      	nop
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	200143a0 	.word	0x200143a0

080059d0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80059d6:	f3ef 8311 	mrs	r3, BASEPRI
 80059da:	f04f 0120 	mov.w	r1, #32
 80059de:	f381 8811 	msr	BASEPRI, r1
 80059e2:	60fb      	str	r3, [r7, #12]
 80059e4:	4817      	ldr	r0, [pc, #92]	; (8005a44 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80059e6:	f7fe fa8c 	bl	8003f02 <_PreparePacket>
 80059ea:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	617b      	str	r3, [r7, #20]
 80059f4:	4b14      	ldr	r3, [pc, #80]	; (8005a48 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	613b      	str	r3, [r7, #16]
 80059fa:	e00b      	b.n	8005a14 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	1c59      	adds	r1, r3, #1
 8005a04:	6179      	str	r1, [r7, #20]
 8005a06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	09db      	lsrs	r3, r3, #7
 8005a12:	613b      	str	r3, [r7, #16]
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	2b7f      	cmp	r3, #127	; 0x7f
 8005a18:	d8f0      	bhi.n	80059fc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	617a      	str	r2, [r7, #20]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005a2a:	221b      	movs	r2, #27
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	68b8      	ldr	r0, [r7, #8]
 8005a30:	f7fe fb5a 	bl	80040e8 <_SendPacket>
  RECORD_END();
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f383 8811 	msr	BASEPRI, r3
}
 8005a3a:	bf00      	nop
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	200143a8 	.word	0x200143a8
 8005a48:	200143a4 	.word	0x200143a4

08005a4c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005a4c:	b40f      	push	{r0, r1, r2, r3}
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b082      	sub	sp, #8
 8005a52:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005a54:	f107 0314 	add.w	r3, r7, #20
 8005a58:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005a5a:	1d3b      	adds	r3, r7, #4
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	2100      	movs	r1, #0
 8005a60:	6938      	ldr	r0, [r7, #16]
 8005a62:	f7fe fdcb 	bl	80045fc <_VPrintTarget>
  va_end(ParamList);
}
 8005a66:	bf00      	nop
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a70:	b004      	add	sp, #16
 8005a72:	4770      	bx	lr

08005a74 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08a      	sub	sp, #40	; 0x28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a7c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a80:	f04f 0120 	mov.w	r1, #32
 8005a84:	f381 8811 	msr	BASEPRI, r1
 8005a88:	617b      	str	r3, [r7, #20]
 8005a8a:	4827      	ldr	r0, [pc, #156]	; (8005b28 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005a8c:	f7fe fa39 	bl	8003f02 <_PreparePacket>
 8005a90:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a92:	2280      	movs	r2, #128	; 0x80
 8005a94:	6879      	ldr	r1, [r7, #4]
 8005a96:	6938      	ldr	r0, [r7, #16]
 8005a98:	f7fe f9e6 	bl	8003e68 <_EncodeStr>
 8005a9c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	623b      	str	r3, [r7, #32]
 8005aa6:	e00b      	b.n	8005ac0 <SEGGER_SYSVIEW_Warn+0x4c>
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	1c59      	adds	r1, r3, #1
 8005ab0:	6279      	str	r1, [r7, #36]	; 0x24
 8005ab2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ab6:	b2d2      	uxtb	r2, r2
 8005ab8:	701a      	strb	r2, [r3, #0]
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	09db      	lsrs	r3, r3, #7
 8005abe:	623b      	str	r3, [r7, #32]
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ac4:	d8f0      	bhi.n	8005aa8 <SEGGER_SYSVIEW_Warn+0x34>
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	627a      	str	r2, [r7, #36]	; 0x24
 8005acc:	6a3a      	ldr	r2, [r7, #32]
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	61fb      	str	r3, [r7, #28]
 8005ada:	2300      	movs	r3, #0
 8005adc:	61bb      	str	r3, [r7, #24]
 8005ade:	e00b      	b.n	8005af8 <SEGGER_SYSVIEW_Warn+0x84>
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	1c59      	adds	r1, r3, #1
 8005ae8:	61f9      	str	r1, [r7, #28]
 8005aea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aee:	b2d2      	uxtb	r2, r2
 8005af0:	701a      	strb	r2, [r3, #0]
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	09db      	lsrs	r3, r3, #7
 8005af6:	61bb      	str	r3, [r7, #24]
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	2b7f      	cmp	r3, #127	; 0x7f
 8005afc:	d8f0      	bhi.n	8005ae0 <SEGGER_SYSVIEW_Warn+0x6c>
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	61fa      	str	r2, [r7, #28]
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005b0e:	221a      	movs	r2, #26
 8005b10:	68f9      	ldr	r1, [r7, #12]
 8005b12:	6938      	ldr	r0, [r7, #16]
 8005b14:	f7fe fae8 	bl	80040e8 <_SendPacket>
  RECORD_END();
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f383 8811 	msr	BASEPRI, r3
}
 8005b1e:	bf00      	nop
 8005b20:	3728      	adds	r7, #40	; 0x28
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	200143a8 	.word	0x200143a8

08005b2c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005b30:	4b13      	ldr	r3, [pc, #76]	; (8005b80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b32:	7e1b      	ldrb	r3, [r3, #24]
 8005b34:	4619      	mov	r1, r3
 8005b36:	4a13      	ldr	r2, [pc, #76]	; (8005b84 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005b38:	460b      	mov	r3, r1
 8005b3a:	005b      	lsls	r3, r3, #1
 8005b3c:	440b      	add	r3, r1
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	4413      	add	r3, r2
 8005b42:	336c      	adds	r3, #108	; 0x6c
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	4b0e      	ldr	r3, [pc, #56]	; (8005b80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b48:	7e1b      	ldrb	r3, [r3, #24]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	490d      	ldr	r1, [pc, #52]	; (8005b84 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005b4e:	4603      	mov	r3, r0
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	4403      	add	r3, r0
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	440b      	add	r3, r1
 8005b58:	3370      	adds	r3, #112	; 0x70
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d00b      	beq.n	8005b78 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005b60:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b62:	789b      	ldrb	r3, [r3, #2]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d107      	bne.n	8005b78 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005b68:	4b05      	ldr	r3, [pc, #20]	; (8005b80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005b6e:	f7fe f9d5 	bl	8003f1c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005b72:	4b03      	ldr	r3, [pc, #12]	; (8005b80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005b78:	4b01      	ldr	r3, [pc, #4]	; (8005b80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	20014378 	.word	0x20014378
 8005b84:	20012eb8 	.word	0x20012eb8

08005b88 <__NVIC_EnableIRQ>:
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	db0b      	blt.n	8005bb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	f003 021f 	and.w	r2, r3, #31
 8005ba0:	4907      	ldr	r1, [pc, #28]	; (8005bc0 <__NVIC_EnableIRQ+0x38>)
 8005ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ba6:	095b      	lsrs	r3, r3, #5
 8005ba8:	2001      	movs	r0, #1
 8005baa:	fa00 f202 	lsl.w	r2, r0, r2
 8005bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	e000e100 	.word	0xe000e100

08005bc4 <__NVIC_SetPriority>:
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	4603      	mov	r3, r0
 8005bcc:	6039      	str	r1, [r7, #0]
 8005bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	db0a      	blt.n	8005bee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	490c      	ldr	r1, [pc, #48]	; (8005c10 <__NVIC_SetPriority+0x4c>)
 8005bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005be2:	0112      	lsls	r2, r2, #4
 8005be4:	b2d2      	uxtb	r2, r2
 8005be6:	440b      	add	r3, r1
 8005be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005bec:	e00a      	b.n	8005c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	4908      	ldr	r1, [pc, #32]	; (8005c14 <__NVIC_SetPriority+0x50>)
 8005bf4:	79fb      	ldrb	r3, [r7, #7]
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	3b04      	subs	r3, #4
 8005bfc:	0112      	lsls	r2, r2, #4
 8005bfe:	b2d2      	uxtb	r2, r2
 8005c00:	440b      	add	r3, r1
 8005c02:	761a      	strb	r2, [r3, #24]
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	e000e100 	.word	0xe000e100
 8005c14:	e000ed00 	.word	0xe000ed00

08005c18 <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af02      	add	r7, sp, #8
 8005c1e:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	2300      	movs	r3, #0
 8005c26:	9301      	str	r3, [sp, #4]
 8005c28:	2300      	movs	r3, #0
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2100      	movs	r1, #0
 8005c32:	f001 f8fb 	bl	8006e2c <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f001 f918 	bl	8006e70 <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8005c40:	4b97      	ldr	r3, [pc, #604]	; (8005ea0 <extInt_Config+0x288>)
 8005c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c44:	4a96      	ldr	r2, [pc, #600]	; (8005ea0 <extInt_Config+0x288>)
 8005c46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c4a:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b0f      	cmp	r3, #15
 8005c54:	f200 85cf 	bhi.w	80067f6 <extInt_Config+0xbde>
 8005c58:	a201      	add	r2, pc, #4	; (adr r2, 8005c60 <extInt_Config+0x48>)
 8005c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5e:	bf00      	nop
 8005c60:	08005ca1 	.word	0x08005ca1
 8005c64:	08005d57 	.word	0x08005d57
 8005c68:	08005e0d 	.word	0x08005e0d
 8005c6c:	08005ee3 	.word	0x08005ee3
 8005c70:	08005f99 	.word	0x08005f99
 8005c74:	08006047 	.word	0x08006047
 8005c78:	0800610d 	.word	0x0800610d
 8005c7c:	080061b5 	.word	0x080061b5
 8005c80:	0800625d 	.word	0x0800625d
 8005c84:	08006305 	.word	0x08006305
 8005c88:	080063cb 	.word	0x080063cb
 8005c8c:	08006473 	.word	0x08006473
 8005c90:	0800651b 	.word	0x0800651b
 8005c94:	080065e1 	.word	0x080065e1
 8005c98:	08006689 	.word	0x08006689
 8005c9c:	08006731 	.word	0x08006731
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 8005ca0:	4b80      	ldr	r3, [pc, #512]	; (8005ea4 <extInt_Config+0x28c>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	4a7f      	ldr	r2, [pc, #508]	; (8005ea4 <extInt_Config+0x28c>)
 8005ca6:	f023 030f 	bic.w	r3, r3, #15
 8005caa:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	4a7d      	ldr	r2, [pc, #500]	; (8005ea8 <extInt_Config+0x290>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d105      	bne.n	8005cc4 <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8005cb8:	4b7a      	ldr	r3, [pc, #488]	; (8005ea4 <extInt_Config+0x28c>)
 8005cba:	4a7a      	ldr	r2, [pc, #488]	; (8005ea4 <extInt_Config+0x28c>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8005cc0:	f000 bd9b 	b.w	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	4a78      	ldr	r2, [pc, #480]	; (8005eac <extInt_Config+0x294>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d107      	bne.n	8005ce0 <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8005cd0:	4b74      	ldr	r3, [pc, #464]	; (8005ea4 <extInt_Config+0x28c>)
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	4a73      	ldr	r2, [pc, #460]	; (8005ea4 <extInt_Config+0x28c>)
 8005cd6:	f043 0301 	orr.w	r3, r3, #1
 8005cda:	6093      	str	r3, [r2, #8]
		break;
 8005cdc:	f000 bd8d 	b.w	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	4a72      	ldr	r2, [pc, #456]	; (8005eb0 <extInt_Config+0x298>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d107      	bne.n	8005cfc <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8005cec:	4b6d      	ldr	r3, [pc, #436]	; (8005ea4 <extInt_Config+0x28c>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	4a6c      	ldr	r2, [pc, #432]	; (8005ea4 <extInt_Config+0x28c>)
 8005cf2:	f043 0302 	orr.w	r3, r3, #2
 8005cf6:	6093      	str	r3, [r2, #8]
		break;
 8005cf8:	f000 bd7f 	b.w	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	4a6c      	ldr	r2, [pc, #432]	; (8005eb4 <extInt_Config+0x29c>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d107      	bne.n	8005d18 <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8005d08:	4b66      	ldr	r3, [pc, #408]	; (8005ea4 <extInt_Config+0x28c>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	4a65      	ldr	r2, [pc, #404]	; (8005ea4 <extInt_Config+0x28c>)
 8005d0e:	f043 0303 	orr.w	r3, r3, #3
 8005d12:	6093      	str	r3, [r2, #8]
		break;
 8005d14:	f000 bd71 	b.w	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	4a66      	ldr	r2, [pc, #408]	; (8005eb8 <extInt_Config+0x2a0>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d107      	bne.n	8005d34 <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8005d24:	4b5f      	ldr	r3, [pc, #380]	; (8005ea4 <extInt_Config+0x28c>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	4a5e      	ldr	r2, [pc, #376]	; (8005ea4 <extInt_Config+0x28c>)
 8005d2a:	f043 0304 	orr.w	r3, r3, #4
 8005d2e:	6093      	str	r3, [r2, #8]
		break;
 8005d30:	f000 bd63 	b.w	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	4a60      	ldr	r2, [pc, #384]	; (8005ebc <extInt_Config+0x2a4>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d107      	bne.n	8005d50 <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8005d40:	4b58      	ldr	r3, [pc, #352]	; (8005ea4 <extInt_Config+0x28c>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	4a57      	ldr	r2, [pc, #348]	; (8005ea4 <extInt_Config+0x28c>)
 8005d46:	f043 0307 	orr.w	r3, r3, #7
 8005d4a:	6093      	str	r3, [r2, #8]
		break;
 8005d4c:	f000 bd55 	b.w	80067fa <extInt_Config+0xbe2>
			__NOP();
 8005d50:	bf00      	nop
		break;
 8005d52:	f000 bd52 	b.w	80067fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 8005d56:	4b53      	ldr	r3, [pc, #332]	; (8005ea4 <extInt_Config+0x28c>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	4a52      	ldr	r2, [pc, #328]	; (8005ea4 <extInt_Config+0x28c>)
 8005d5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d60:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	4a4f      	ldr	r2, [pc, #316]	; (8005ea8 <extInt_Config+0x290>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d105      	bne.n	8005d7a <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8005d6e:	4b4d      	ldr	r3, [pc, #308]	; (8005ea4 <extInt_Config+0x28c>)
 8005d70:	4a4c      	ldr	r2, [pc, #304]	; (8005ea4 <extInt_Config+0x28c>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8005d76:	f000 bd40 	b.w	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	4a4a      	ldr	r2, [pc, #296]	; (8005eac <extInt_Config+0x294>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d107      	bne.n	8005d96 <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8005d86:	4b47      	ldr	r3, [pc, #284]	; (8005ea4 <extInt_Config+0x28c>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	4a46      	ldr	r2, [pc, #280]	; (8005ea4 <extInt_Config+0x28c>)
 8005d8c:	f043 0310 	orr.w	r3, r3, #16
 8005d90:	6093      	str	r3, [r2, #8]
		break;
 8005d92:	f000 bd32 	b.w	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	4a44      	ldr	r2, [pc, #272]	; (8005eb0 <extInt_Config+0x298>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d107      	bne.n	8005db2 <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8005da2:	4b40      	ldr	r3, [pc, #256]	; (8005ea4 <extInt_Config+0x28c>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	4a3f      	ldr	r2, [pc, #252]	; (8005ea4 <extInt_Config+0x28c>)
 8005da8:	f043 0320 	orr.w	r3, r3, #32
 8005dac:	6093      	str	r3, [r2, #8]
		break;
 8005dae:	f000 bd24 	b.w	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	4a3e      	ldr	r2, [pc, #248]	; (8005eb4 <extInt_Config+0x29c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d107      	bne.n	8005dce <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8005dbe:	4b39      	ldr	r3, [pc, #228]	; (8005ea4 <extInt_Config+0x28c>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	4a38      	ldr	r2, [pc, #224]	; (8005ea4 <extInt_Config+0x28c>)
 8005dc4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005dc8:	6093      	str	r3, [r2, #8]
		break;
 8005dca:	f000 bd16 	b.w	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	4a38      	ldr	r2, [pc, #224]	; (8005eb8 <extInt_Config+0x2a0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d107      	bne.n	8005dea <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8005dda:	4b32      	ldr	r3, [pc, #200]	; (8005ea4 <extInt_Config+0x28c>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	4a31      	ldr	r2, [pc, #196]	; (8005ea4 <extInt_Config+0x28c>)
 8005de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005de4:	6093      	str	r3, [r2, #8]
		break;
 8005de6:	f000 bd08 	b.w	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	4a32      	ldr	r2, [pc, #200]	; (8005ebc <extInt_Config+0x2a4>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d107      	bne.n	8005e06 <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8005df6:	4b2b      	ldr	r3, [pc, #172]	; (8005ea4 <extInt_Config+0x28c>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	4a2a      	ldr	r2, [pc, #168]	; (8005ea4 <extInt_Config+0x28c>)
 8005dfc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005e00:	6093      	str	r3, [r2, #8]
		break;
 8005e02:	f000 bcfa 	b.w	80067fa <extInt_Config+0xbe2>
			__NOP();
 8005e06:	bf00      	nop
		break;
 8005e08:	f000 bcf7 	b.w	80067fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 8005e0c:	4b25      	ldr	r3, [pc, #148]	; (8005ea4 <extInt_Config+0x28c>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	4a24      	ldr	r2, [pc, #144]	; (8005ea4 <extInt_Config+0x28c>)
 8005e12:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005e16:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	4a22      	ldr	r2, [pc, #136]	; (8005ea8 <extInt_Config+0x290>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d105      	bne.n	8005e30 <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8005e24:	4b1f      	ldr	r3, [pc, #124]	; (8005ea4 <extInt_Config+0x28c>)
 8005e26:	4a1f      	ldr	r2, [pc, #124]	; (8005ea4 <extInt_Config+0x28c>)
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8005e2c:	f000 bce5 	b.w	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	4a1d      	ldr	r2, [pc, #116]	; (8005eac <extInt_Config+0x294>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d107      	bne.n	8005e4c <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8005e3c:	4b19      	ldr	r3, [pc, #100]	; (8005ea4 <extInt_Config+0x28c>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	4a18      	ldr	r2, [pc, #96]	; (8005ea4 <extInt_Config+0x28c>)
 8005e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e46:	6093      	str	r3, [r2, #8]
		break;
 8005e48:	f000 bcd7 	b.w	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	4a17      	ldr	r2, [pc, #92]	; (8005eb0 <extInt_Config+0x298>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d107      	bne.n	8005e68 <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8005e58:	4b12      	ldr	r3, [pc, #72]	; (8005ea4 <extInt_Config+0x28c>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	4a11      	ldr	r2, [pc, #68]	; (8005ea4 <extInt_Config+0x28c>)
 8005e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e62:	6093      	str	r3, [r2, #8]
		break;
 8005e64:	f000 bcc9 	b.w	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	4a11      	ldr	r2, [pc, #68]	; (8005eb4 <extInt_Config+0x29c>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d107      	bne.n	8005e84 <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8005e74:	4b0b      	ldr	r3, [pc, #44]	; (8005ea4 <extInt_Config+0x28c>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	4a0a      	ldr	r2, [pc, #40]	; (8005ea4 <extInt_Config+0x28c>)
 8005e7a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005e7e:	6093      	str	r3, [r2, #8]
		break;
 8005e80:	f000 bcbb 	b.w	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	4a0b      	ldr	r2, [pc, #44]	; (8005eb8 <extInt_Config+0x2a0>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d117      	bne.n	8005ec0 <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8005e90:	4b04      	ldr	r3, [pc, #16]	; (8005ea4 <extInt_Config+0x28c>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	4a03      	ldr	r2, [pc, #12]	; (8005ea4 <extInt_Config+0x28c>)
 8005e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e9a:	6093      	str	r3, [r2, #8]
		break;
 8005e9c:	f000 bcad 	b.w	80067fa <extInt_Config+0xbe2>
 8005ea0:	40023800 	.word	0x40023800
 8005ea4:	40013800 	.word	0x40013800
 8005ea8:	40020000 	.word	0x40020000
 8005eac:	40020400 	.word	0x40020400
 8005eb0:	40020800 	.word	0x40020800
 8005eb4:	40020c00 	.word	0x40020c00
 8005eb8:	40021000 	.word	0x40021000
 8005ebc:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	4a8a      	ldr	r2, [pc, #552]	; (80060f0 <extInt_Config+0x4d8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d107      	bne.n	8005edc <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8005ecc:	4b89      	ldr	r3, [pc, #548]	; (80060f4 <extInt_Config+0x4dc>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	4a88      	ldr	r2, [pc, #544]	; (80060f4 <extInt_Config+0x4dc>)
 8005ed2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005ed6:	6093      	str	r3, [r2, #8]
		break;
 8005ed8:	f000 bc8f 	b.w	80067fa <extInt_Config+0xbe2>
			__NOP();
 8005edc:	bf00      	nop
		break;
 8005ede:	f000 bc8c 	b.w	80067fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 8005ee2:	4b84      	ldr	r3, [pc, #528]	; (80060f4 <extInt_Config+0x4dc>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	4a83      	ldr	r2, [pc, #524]	; (80060f4 <extInt_Config+0x4dc>)
 8005ee8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005eec:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	4a80      	ldr	r2, [pc, #512]	; (80060f8 <extInt_Config+0x4e0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d105      	bne.n	8005f06 <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8005efa:	4b7e      	ldr	r3, [pc, #504]	; (80060f4 <extInt_Config+0x4dc>)
 8005efc:	4a7d      	ldr	r2, [pc, #500]	; (80060f4 <extInt_Config+0x4dc>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8005f02:	f000 bc7a 	b.w	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	4a7b      	ldr	r2, [pc, #492]	; (80060fc <extInt_Config+0x4e4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d107      	bne.n	8005f22 <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8005f12:	4b78      	ldr	r3, [pc, #480]	; (80060f4 <extInt_Config+0x4dc>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	4a77      	ldr	r2, [pc, #476]	; (80060f4 <extInt_Config+0x4dc>)
 8005f18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f1c:	6093      	str	r3, [r2, #8]
		break;
 8005f1e:	f000 bc6c 	b.w	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	4a75      	ldr	r2, [pc, #468]	; (8006100 <extInt_Config+0x4e8>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d107      	bne.n	8005f3e <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8005f2e:	4b71      	ldr	r3, [pc, #452]	; (80060f4 <extInt_Config+0x4dc>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	4a70      	ldr	r2, [pc, #448]	; (80060f4 <extInt_Config+0x4dc>)
 8005f34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005f38:	6093      	str	r3, [r2, #8]
		break;
 8005f3a:	f000 bc5e 	b.w	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	4a6f      	ldr	r2, [pc, #444]	; (8006104 <extInt_Config+0x4ec>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d107      	bne.n	8005f5a <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8005f4a:	4b6a      	ldr	r3, [pc, #424]	; (80060f4 <extInt_Config+0x4dc>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	4a69      	ldr	r2, [pc, #420]	; (80060f4 <extInt_Config+0x4dc>)
 8005f50:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8005f54:	6093      	str	r3, [r2, #8]
		break;
 8005f56:	f000 bc50 	b.w	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	4a69      	ldr	r2, [pc, #420]	; (8006108 <extInt_Config+0x4f0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d107      	bne.n	8005f76 <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8005f66:	4b63      	ldr	r3, [pc, #396]	; (80060f4 <extInt_Config+0x4dc>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	4a62      	ldr	r2, [pc, #392]	; (80060f4 <extInt_Config+0x4dc>)
 8005f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f70:	6093      	str	r3, [r2, #8]
		break;
 8005f72:	f000 bc42 	b.w	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	4a5c      	ldr	r2, [pc, #368]	; (80060f0 <extInt_Config+0x4d8>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d107      	bne.n	8005f92 <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8005f82:	4b5c      	ldr	r3, [pc, #368]	; (80060f4 <extInt_Config+0x4dc>)
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	4a5b      	ldr	r2, [pc, #364]	; (80060f4 <extInt_Config+0x4dc>)
 8005f88:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8005f8c:	6093      	str	r3, [r2, #8]
		break;
 8005f8e:	f000 bc34 	b.w	80067fa <extInt_Config+0xbe2>
			__NOP();
 8005f92:	bf00      	nop
		break;
 8005f94:	f000 bc31 	b.w	80067fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 8005f98:	4b56      	ldr	r3, [pc, #344]	; (80060f4 <extInt_Config+0x4dc>)
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	4a55      	ldr	r2, [pc, #340]	; (80060f4 <extInt_Config+0x4dc>)
 8005f9e:	f023 030f 	bic.w	r3, r3, #15
 8005fa2:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	4a53      	ldr	r2, [pc, #332]	; (80060f8 <extInt_Config+0x4e0>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d105      	bne.n	8005fbc <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8005fb0:	4b50      	ldr	r3, [pc, #320]	; (80060f4 <extInt_Config+0x4dc>)
 8005fb2:	4a50      	ldr	r2, [pc, #320]	; (80060f4 <extInt_Config+0x4dc>)
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8005fb8:	f000 bc1f 	b.w	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	4a4e      	ldr	r2, [pc, #312]	; (80060fc <extInt_Config+0x4e4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d107      	bne.n	8005fd8 <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8005fc8:	4b4a      	ldr	r3, [pc, #296]	; (80060f4 <extInt_Config+0x4dc>)
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	4a49      	ldr	r2, [pc, #292]	; (80060f4 <extInt_Config+0x4dc>)
 8005fce:	f043 0301 	orr.w	r3, r3, #1
 8005fd2:	60d3      	str	r3, [r2, #12]
		break;
 8005fd4:	f000 bc11 	b.w	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	4a48      	ldr	r2, [pc, #288]	; (8006100 <extInt_Config+0x4e8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d107      	bne.n	8005ff4 <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8005fe4:	4b43      	ldr	r3, [pc, #268]	; (80060f4 <extInt_Config+0x4dc>)
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	4a42      	ldr	r2, [pc, #264]	; (80060f4 <extInt_Config+0x4dc>)
 8005fea:	f043 0302 	orr.w	r3, r3, #2
 8005fee:	60d3      	str	r3, [r2, #12]
		break;
 8005ff0:	f000 bc03 	b.w	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	4a42      	ldr	r2, [pc, #264]	; (8006104 <extInt_Config+0x4ec>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d106      	bne.n	800600e <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8006000:	4b3c      	ldr	r3, [pc, #240]	; (80060f4 <extInt_Config+0x4dc>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	4a3b      	ldr	r2, [pc, #236]	; (80060f4 <extInt_Config+0x4dc>)
 8006006:	f043 0303 	orr.w	r3, r3, #3
 800600a:	60d3      	str	r3, [r2, #12]
		break;
 800600c:	e3f5      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	4a3c      	ldr	r2, [pc, #240]	; (8006108 <extInt_Config+0x4f0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d106      	bne.n	8006028 <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 800601a:	4b36      	ldr	r3, [pc, #216]	; (80060f4 <extInt_Config+0x4dc>)
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	4a35      	ldr	r2, [pc, #212]	; (80060f4 <extInt_Config+0x4dc>)
 8006020:	f043 0304 	orr.w	r3, r3, #4
 8006024:	60d3      	str	r3, [r2, #12]
		break;
 8006026:	e3e8      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	4a30      	ldr	r2, [pc, #192]	; (80060f0 <extInt_Config+0x4d8>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d106      	bne.n	8006042 <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8006034:	4b2f      	ldr	r3, [pc, #188]	; (80060f4 <extInt_Config+0x4dc>)
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	4a2e      	ldr	r2, [pc, #184]	; (80060f4 <extInt_Config+0x4dc>)
 800603a:	f043 0307 	orr.w	r3, r3, #7
 800603e:	60d3      	str	r3, [r2, #12]
		break;
 8006040:	e3db      	b.n	80067fa <extInt_Config+0xbe2>
			__NOP();
 8006042:	bf00      	nop
		break;
 8006044:	e3d9      	b.n	80067fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 8006046:	4b2b      	ldr	r3, [pc, #172]	; (80060f4 <extInt_Config+0x4dc>)
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	4a2a      	ldr	r2, [pc, #168]	; (80060f4 <extInt_Config+0x4dc>)
 800604c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006050:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	4a27      	ldr	r2, [pc, #156]	; (80060f8 <extInt_Config+0x4e0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d104      	bne.n	8006068 <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 800605e:	4b25      	ldr	r3, [pc, #148]	; (80060f4 <extInt_Config+0x4dc>)
 8006060:	4a24      	ldr	r2, [pc, #144]	; (80060f4 <extInt_Config+0x4dc>)
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8006066:	e3c8      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	4a23      	ldr	r2, [pc, #140]	; (80060fc <extInt_Config+0x4e4>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d106      	bne.n	8006082 <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8006074:	4b1f      	ldr	r3, [pc, #124]	; (80060f4 <extInt_Config+0x4dc>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	4a1e      	ldr	r2, [pc, #120]	; (80060f4 <extInt_Config+0x4dc>)
 800607a:	f043 0310 	orr.w	r3, r3, #16
 800607e:	60d3      	str	r3, [r2, #12]
		break;
 8006080:	e3bb      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	4a1d      	ldr	r2, [pc, #116]	; (8006100 <extInt_Config+0x4e8>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d106      	bne.n	800609c <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 800608e:	4b19      	ldr	r3, [pc, #100]	; (80060f4 <extInt_Config+0x4dc>)
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	4a18      	ldr	r2, [pc, #96]	; (80060f4 <extInt_Config+0x4dc>)
 8006094:	f043 0320 	orr.w	r3, r3, #32
 8006098:	60d3      	str	r3, [r2, #12]
		break;
 800609a:	e3ae      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	4a18      	ldr	r2, [pc, #96]	; (8006104 <extInt_Config+0x4ec>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d106      	bne.n	80060b6 <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 80060a8:	4b12      	ldr	r3, [pc, #72]	; (80060f4 <extInt_Config+0x4dc>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	4a11      	ldr	r2, [pc, #68]	; (80060f4 <extInt_Config+0x4dc>)
 80060ae:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80060b2:	60d3      	str	r3, [r2, #12]
		break;
 80060b4:	e3a1      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	4a12      	ldr	r2, [pc, #72]	; (8006108 <extInt_Config+0x4f0>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d106      	bne.n	80060d0 <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 80060c2:	4b0c      	ldr	r3, [pc, #48]	; (80060f4 <extInt_Config+0x4dc>)
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	4a0b      	ldr	r2, [pc, #44]	; (80060f4 <extInt_Config+0x4dc>)
 80060c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060cc:	60d3      	str	r3, [r2, #12]
		break;
 80060ce:	e394      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	4a06      	ldr	r2, [pc, #24]	; (80060f0 <extInt_Config+0x4d8>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d106      	bne.n	80060ea <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 80060dc:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <extInt_Config+0x4dc>)
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	4a04      	ldr	r2, [pc, #16]	; (80060f4 <extInt_Config+0x4dc>)
 80060e2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80060e6:	60d3      	str	r3, [r2, #12]
		break;
 80060e8:	e387      	b.n	80067fa <extInt_Config+0xbe2>
			__NOP();
 80060ea:	bf00      	nop
		break;
 80060ec:	e385      	b.n	80067fa <extInt_Config+0xbe2>
 80060ee:	bf00      	nop
 80060f0:	40021c00 	.word	0x40021c00
 80060f4:	40013800 	.word	0x40013800
 80060f8:	40020000 	.word	0x40020000
 80060fc:	40020400 	.word	0x40020400
 8006100:	40020800 	.word	0x40020800
 8006104:	40020c00 	.word	0x40020c00
 8006108:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 800610c:	4b86      	ldr	r3, [pc, #536]	; (8006328 <extInt_Config+0x710>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	4a85      	ldr	r2, [pc, #532]	; (8006328 <extInt_Config+0x710>)
 8006112:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006116:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	4a83      	ldr	r2, [pc, #524]	; (800632c <extInt_Config+0x714>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d104      	bne.n	800612e <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8006124:	4b80      	ldr	r3, [pc, #512]	; (8006328 <extInt_Config+0x710>)
 8006126:	4a80      	ldr	r2, [pc, #512]	; (8006328 <extInt_Config+0x710>)
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 800612c:	e365      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	4a7e      	ldr	r2, [pc, #504]	; (8006330 <extInt_Config+0x718>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d106      	bne.n	8006148 <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 800613a:	4b7b      	ldr	r3, [pc, #492]	; (8006328 <extInt_Config+0x710>)
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	4a7a      	ldr	r2, [pc, #488]	; (8006328 <extInt_Config+0x710>)
 8006140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006144:	60d3      	str	r3, [r2, #12]
		break;
 8006146:	e358      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	4a79      	ldr	r2, [pc, #484]	; (8006334 <extInt_Config+0x71c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d106      	bne.n	8006162 <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8006154:	4b74      	ldr	r3, [pc, #464]	; (8006328 <extInt_Config+0x710>)
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	4a73      	ldr	r2, [pc, #460]	; (8006328 <extInt_Config+0x710>)
 800615a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800615e:	60d3      	str	r3, [r2, #12]
		break;
 8006160:	e34b      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	4a73      	ldr	r2, [pc, #460]	; (8006338 <extInt_Config+0x720>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d106      	bne.n	800617c <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 800616e:	4b6e      	ldr	r3, [pc, #440]	; (8006328 <extInt_Config+0x710>)
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	4a6d      	ldr	r2, [pc, #436]	; (8006328 <extInt_Config+0x710>)
 8006174:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006178:	60d3      	str	r3, [r2, #12]
		break;
 800617a:	e33e      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	4a6e      	ldr	r2, [pc, #440]	; (800633c <extInt_Config+0x724>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d106      	bne.n	8006196 <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8006188:	4b67      	ldr	r3, [pc, #412]	; (8006328 <extInt_Config+0x710>)
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	4a66      	ldr	r2, [pc, #408]	; (8006328 <extInt_Config+0x710>)
 800618e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006192:	60d3      	str	r3, [r2, #12]
		break;
 8006194:	e331      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	4a68      	ldr	r2, [pc, #416]	; (8006340 <extInt_Config+0x728>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d106      	bne.n	80061b0 <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 80061a2:	4b61      	ldr	r3, [pc, #388]	; (8006328 <extInt_Config+0x710>)
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	4a60      	ldr	r2, [pc, #384]	; (8006328 <extInt_Config+0x710>)
 80061a8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80061ac:	60d3      	str	r3, [r2, #12]
		break;
 80061ae:	e324      	b.n	80067fa <extInt_Config+0xbe2>
			__NOP();
 80061b0:	bf00      	nop
		break;
 80061b2:	e322      	b.n	80067fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 80061b4:	4b5c      	ldr	r3, [pc, #368]	; (8006328 <extInt_Config+0x710>)
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	4a5b      	ldr	r2, [pc, #364]	; (8006328 <extInt_Config+0x710>)
 80061ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061be:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	4a59      	ldr	r2, [pc, #356]	; (800632c <extInt_Config+0x714>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d104      	bne.n	80061d6 <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 80061cc:	4b56      	ldr	r3, [pc, #344]	; (8006328 <extInt_Config+0x710>)
 80061ce:	4a56      	ldr	r2, [pc, #344]	; (8006328 <extInt_Config+0x710>)
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80061d4:	e311      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	4a54      	ldr	r2, [pc, #336]	; (8006330 <extInt_Config+0x718>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d106      	bne.n	80061f0 <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 80061e2:	4b51      	ldr	r3, [pc, #324]	; (8006328 <extInt_Config+0x710>)
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	4a50      	ldr	r2, [pc, #320]	; (8006328 <extInt_Config+0x710>)
 80061e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061ec:	60d3      	str	r3, [r2, #12]
		break;
 80061ee:	e304      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	4a4f      	ldr	r2, [pc, #316]	; (8006334 <extInt_Config+0x71c>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d106      	bne.n	800620a <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 80061fc:	4b4a      	ldr	r3, [pc, #296]	; (8006328 <extInt_Config+0x710>)
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	4a49      	ldr	r2, [pc, #292]	; (8006328 <extInt_Config+0x710>)
 8006202:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006206:	60d3      	str	r3, [r2, #12]
		break;
 8006208:	e2f7      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	4a49      	ldr	r2, [pc, #292]	; (8006338 <extInt_Config+0x720>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d106      	bne.n	8006224 <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8006216:	4b44      	ldr	r3, [pc, #272]	; (8006328 <extInt_Config+0x710>)
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	4a43      	ldr	r2, [pc, #268]	; (8006328 <extInt_Config+0x710>)
 800621c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006220:	60d3      	str	r3, [r2, #12]
		break;
 8006222:	e2ea      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	4a44      	ldr	r2, [pc, #272]	; (800633c <extInt_Config+0x724>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d106      	bne.n	800623e <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8006230:	4b3d      	ldr	r3, [pc, #244]	; (8006328 <extInt_Config+0x710>)
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	4a3c      	ldr	r2, [pc, #240]	; (8006328 <extInt_Config+0x710>)
 8006236:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800623a:	60d3      	str	r3, [r2, #12]
		break;
 800623c:	e2dd      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	4a3e      	ldr	r2, [pc, #248]	; (8006340 <extInt_Config+0x728>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d106      	bne.n	8006258 <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 800624a:	4b37      	ldr	r3, [pc, #220]	; (8006328 <extInt_Config+0x710>)
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	4a36      	ldr	r2, [pc, #216]	; (8006328 <extInt_Config+0x710>)
 8006250:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006254:	60d3      	str	r3, [r2, #12]
		break;
 8006256:	e2d0      	b.n	80067fa <extInt_Config+0xbe2>
			__NOP();
 8006258:	bf00      	nop
		break;
 800625a:	e2ce      	b.n	80067fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 800625c:	4b32      	ldr	r3, [pc, #200]	; (8006328 <extInt_Config+0x710>)
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	4a31      	ldr	r2, [pc, #196]	; (8006328 <extInt_Config+0x710>)
 8006262:	f023 030f 	bic.w	r3, r3, #15
 8006266:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	4a2f      	ldr	r2, [pc, #188]	; (800632c <extInt_Config+0x714>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d104      	bne.n	800627e <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8006274:	4b2c      	ldr	r3, [pc, #176]	; (8006328 <extInt_Config+0x710>)
 8006276:	4a2c      	ldr	r2, [pc, #176]	; (8006328 <extInt_Config+0x710>)
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 800627c:	e2bd      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	4a2a      	ldr	r2, [pc, #168]	; (8006330 <extInt_Config+0x718>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d106      	bne.n	8006298 <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 800628a:	4b27      	ldr	r3, [pc, #156]	; (8006328 <extInt_Config+0x710>)
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	4a26      	ldr	r2, [pc, #152]	; (8006328 <extInt_Config+0x710>)
 8006290:	f043 0301 	orr.w	r3, r3, #1
 8006294:	6113      	str	r3, [r2, #16]
		break;
 8006296:	e2b0      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	4a25      	ldr	r2, [pc, #148]	; (8006334 <extInt_Config+0x71c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d106      	bne.n	80062b2 <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 80062a4:	4b20      	ldr	r3, [pc, #128]	; (8006328 <extInt_Config+0x710>)
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	4a1f      	ldr	r2, [pc, #124]	; (8006328 <extInt_Config+0x710>)
 80062aa:	f043 0302 	orr.w	r3, r3, #2
 80062ae:	6113      	str	r3, [r2, #16]
		break;
 80062b0:	e2a3      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	4a1f      	ldr	r2, [pc, #124]	; (8006338 <extInt_Config+0x720>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d106      	bne.n	80062cc <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 80062be:	4b1a      	ldr	r3, [pc, #104]	; (8006328 <extInt_Config+0x710>)
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	4a19      	ldr	r2, [pc, #100]	; (8006328 <extInt_Config+0x710>)
 80062c4:	f043 0303 	orr.w	r3, r3, #3
 80062c8:	6113      	str	r3, [r2, #16]
		break;
 80062ca:	e296      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	4a1a      	ldr	r2, [pc, #104]	; (800633c <extInt_Config+0x724>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d106      	bne.n	80062e6 <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 80062d8:	4b13      	ldr	r3, [pc, #76]	; (8006328 <extInt_Config+0x710>)
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	4a12      	ldr	r2, [pc, #72]	; (8006328 <extInt_Config+0x710>)
 80062de:	f043 0304 	orr.w	r3, r3, #4
 80062e2:	6113      	str	r3, [r2, #16]
		break;
 80062e4:	e289      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	4a14      	ldr	r2, [pc, #80]	; (8006340 <extInt_Config+0x728>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d106      	bne.n	8006300 <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 80062f2:	4b0d      	ldr	r3, [pc, #52]	; (8006328 <extInt_Config+0x710>)
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	4a0c      	ldr	r2, [pc, #48]	; (8006328 <extInt_Config+0x710>)
 80062f8:	f043 0307 	orr.w	r3, r3, #7
 80062fc:	6113      	str	r3, [r2, #16]
		break;
 80062fe:	e27c      	b.n	80067fa <extInt_Config+0xbe2>
			__NOP();
 8006300:	bf00      	nop
		break;
 8006302:	e27a      	b.n	80067fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 8006304:	4b08      	ldr	r3, [pc, #32]	; (8006328 <extInt_Config+0x710>)
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	4a07      	ldr	r2, [pc, #28]	; (8006328 <extInt_Config+0x710>)
 800630a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800630e:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	4a05      	ldr	r2, [pc, #20]	; (800632c <extInt_Config+0x714>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d113      	bne.n	8006344 <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 800631c:	4b02      	ldr	r3, [pc, #8]	; (8006328 <extInt_Config+0x710>)
 800631e:	4a02      	ldr	r2, [pc, #8]	; (8006328 <extInt_Config+0x710>)
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8006324:	e269      	b.n	80067fa <extInt_Config+0xbe2>
 8006326:	bf00      	nop
 8006328:	40013800 	.word	0x40013800
 800632c:	40020000 	.word	0x40020000
 8006330:	40020400 	.word	0x40020400
 8006334:	40020800 	.word	0x40020800
 8006338:	40020c00 	.word	0x40020c00
 800633c:	40021000 	.word	0x40021000
 8006340:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	4a83      	ldr	r2, [pc, #524]	; (8006558 <extInt_Config+0x940>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d106      	bne.n	800635e <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8006350:	4b82      	ldr	r3, [pc, #520]	; (800655c <extInt_Config+0x944>)
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	4a81      	ldr	r2, [pc, #516]	; (800655c <extInt_Config+0x944>)
 8006356:	f043 0310 	orr.w	r3, r3, #16
 800635a:	6113      	str	r3, [r2, #16]
		break;
 800635c:	e24d      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	4a7e      	ldr	r2, [pc, #504]	; (8006560 <extInt_Config+0x948>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d106      	bne.n	8006378 <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 800636a:	4b7c      	ldr	r3, [pc, #496]	; (800655c <extInt_Config+0x944>)
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	4a7b      	ldr	r2, [pc, #492]	; (800655c <extInt_Config+0x944>)
 8006370:	f043 0320 	orr.w	r3, r3, #32
 8006374:	6113      	str	r3, [r2, #16]
		break;
 8006376:	e240      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	4a79      	ldr	r2, [pc, #484]	; (8006564 <extInt_Config+0x94c>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d106      	bne.n	8006392 <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8006384:	4b75      	ldr	r3, [pc, #468]	; (800655c <extInt_Config+0x944>)
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	4a74      	ldr	r2, [pc, #464]	; (800655c <extInt_Config+0x944>)
 800638a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800638e:	6113      	str	r3, [r2, #16]
		break;
 8006390:	e233      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	4a73      	ldr	r2, [pc, #460]	; (8006568 <extInt_Config+0x950>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d106      	bne.n	80063ac <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 800639e:	4b6f      	ldr	r3, [pc, #444]	; (800655c <extInt_Config+0x944>)
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	4a6e      	ldr	r2, [pc, #440]	; (800655c <extInt_Config+0x944>)
 80063a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063a8:	6113      	str	r3, [r2, #16]
		break;
 80063aa:	e226      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	4a6e      	ldr	r2, [pc, #440]	; (800656c <extInt_Config+0x954>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d106      	bne.n	80063c6 <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 80063b8:	4b68      	ldr	r3, [pc, #416]	; (800655c <extInt_Config+0x944>)
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	4a67      	ldr	r2, [pc, #412]	; (800655c <extInt_Config+0x944>)
 80063be:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80063c2:	6113      	str	r3, [r2, #16]
		break;
 80063c4:	e219      	b.n	80067fa <extInt_Config+0xbe2>
			__NOP();
 80063c6:	bf00      	nop
		break;
 80063c8:	e217      	b.n	80067fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 80063ca:	4b64      	ldr	r3, [pc, #400]	; (800655c <extInt_Config+0x944>)
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	4a63      	ldr	r2, [pc, #396]	; (800655c <extInt_Config+0x944>)
 80063d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80063d4:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	4a64      	ldr	r2, [pc, #400]	; (8006570 <extInt_Config+0x958>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d104      	bne.n	80063ec <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 80063e2:	4b5e      	ldr	r3, [pc, #376]	; (800655c <extInt_Config+0x944>)
 80063e4:	4a5d      	ldr	r2, [pc, #372]	; (800655c <extInt_Config+0x944>)
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80063ea:	e206      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	4a59      	ldr	r2, [pc, #356]	; (8006558 <extInt_Config+0x940>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d106      	bne.n	8006406 <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 80063f8:	4b58      	ldr	r3, [pc, #352]	; (800655c <extInt_Config+0x944>)
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	4a57      	ldr	r2, [pc, #348]	; (800655c <extInt_Config+0x944>)
 80063fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006402:	6113      	str	r3, [r2, #16]
		break;
 8006404:	e1f9      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	4a54      	ldr	r2, [pc, #336]	; (8006560 <extInt_Config+0x948>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d106      	bne.n	8006420 <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8006412:	4b52      	ldr	r3, [pc, #328]	; (800655c <extInt_Config+0x944>)
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	4a51      	ldr	r2, [pc, #324]	; (800655c <extInt_Config+0x944>)
 8006418:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800641c:	6113      	str	r3, [r2, #16]
		break;
 800641e:	e1ec      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	4a4f      	ldr	r2, [pc, #316]	; (8006564 <extInt_Config+0x94c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d106      	bne.n	800643a <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 800642c:	4b4b      	ldr	r3, [pc, #300]	; (800655c <extInt_Config+0x944>)
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	4a4a      	ldr	r2, [pc, #296]	; (800655c <extInt_Config+0x944>)
 8006432:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006436:	6113      	str	r3, [r2, #16]
		break;
 8006438:	e1df      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	4a49      	ldr	r2, [pc, #292]	; (8006568 <extInt_Config+0x950>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d106      	bne.n	8006454 <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8006446:	4b45      	ldr	r3, [pc, #276]	; (800655c <extInt_Config+0x944>)
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	4a44      	ldr	r2, [pc, #272]	; (800655c <extInt_Config+0x944>)
 800644c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006450:	6113      	str	r3, [r2, #16]
		break;
 8006452:	e1d2      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	4a44      	ldr	r2, [pc, #272]	; (800656c <extInt_Config+0x954>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d106      	bne.n	800646e <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8006460:	4b3e      	ldr	r3, [pc, #248]	; (800655c <extInt_Config+0x944>)
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	4a3d      	ldr	r2, [pc, #244]	; (800655c <extInt_Config+0x944>)
 8006466:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800646a:	6113      	str	r3, [r2, #16]
		break;
 800646c:	e1c5      	b.n	80067fa <extInt_Config+0xbe2>
			__NOP();
 800646e:	bf00      	nop
		break;
 8006470:	e1c3      	b.n	80067fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 8006472:	4b3a      	ldr	r3, [pc, #232]	; (800655c <extInt_Config+0x944>)
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	4a39      	ldr	r2, [pc, #228]	; (800655c <extInt_Config+0x944>)
 8006478:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800647c:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	4a3a      	ldr	r2, [pc, #232]	; (8006570 <extInt_Config+0x958>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d104      	bne.n	8006494 <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 800648a:	4b34      	ldr	r3, [pc, #208]	; (800655c <extInt_Config+0x944>)
 800648c:	4a33      	ldr	r2, [pc, #204]	; (800655c <extInt_Config+0x944>)
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8006492:	e1b2      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	4a2f      	ldr	r2, [pc, #188]	; (8006558 <extInt_Config+0x940>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d106      	bne.n	80064ae <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 80064a0:	4b2e      	ldr	r3, [pc, #184]	; (800655c <extInt_Config+0x944>)
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	4a2d      	ldr	r2, [pc, #180]	; (800655c <extInt_Config+0x944>)
 80064a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80064aa:	6113      	str	r3, [r2, #16]
		break;
 80064ac:	e1a5      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	4a2a      	ldr	r2, [pc, #168]	; (8006560 <extInt_Config+0x948>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d106      	bne.n	80064c8 <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 80064ba:	4b28      	ldr	r3, [pc, #160]	; (800655c <extInt_Config+0x944>)
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	4a27      	ldr	r2, [pc, #156]	; (800655c <extInt_Config+0x944>)
 80064c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80064c4:	6113      	str	r3, [r2, #16]
		break;
 80064c6:	e198      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	4a25      	ldr	r2, [pc, #148]	; (8006564 <extInt_Config+0x94c>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d106      	bne.n	80064e2 <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 80064d4:	4b21      	ldr	r3, [pc, #132]	; (800655c <extInt_Config+0x944>)
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	4a20      	ldr	r2, [pc, #128]	; (800655c <extInt_Config+0x944>)
 80064da:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80064de:	6113      	str	r3, [r2, #16]
		break;
 80064e0:	e18b      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	4a1f      	ldr	r2, [pc, #124]	; (8006568 <extInt_Config+0x950>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d106      	bne.n	80064fc <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 80064ee:	4b1b      	ldr	r3, [pc, #108]	; (800655c <extInt_Config+0x944>)
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	4a1a      	ldr	r2, [pc, #104]	; (800655c <extInt_Config+0x944>)
 80064f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064f8:	6113      	str	r3, [r2, #16]
		break;
 80064fa:	e17e      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	4a1a      	ldr	r2, [pc, #104]	; (800656c <extInt_Config+0x954>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d106      	bne.n	8006516 <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8006508:	4b14      	ldr	r3, [pc, #80]	; (800655c <extInt_Config+0x944>)
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	4a13      	ldr	r2, [pc, #76]	; (800655c <extInt_Config+0x944>)
 800650e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006512:	6113      	str	r3, [r2, #16]
		break;
 8006514:	e171      	b.n	80067fa <extInt_Config+0xbe2>
			__NOP();
 8006516:	bf00      	nop
		break;
 8006518:	e16f      	b.n	80067fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 800651a:	4b10      	ldr	r3, [pc, #64]	; (800655c <extInt_Config+0x944>)
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	4a0f      	ldr	r2, [pc, #60]	; (800655c <extInt_Config+0x944>)
 8006520:	f023 030f 	bic.w	r3, r3, #15
 8006524:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	4a10      	ldr	r2, [pc, #64]	; (8006570 <extInt_Config+0x958>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d104      	bne.n	800653c <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8006532:	4b0a      	ldr	r3, [pc, #40]	; (800655c <extInt_Config+0x944>)
 8006534:	4a09      	ldr	r2, [pc, #36]	; (800655c <extInt_Config+0x944>)
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 800653a:	e15e      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	4a05      	ldr	r2, [pc, #20]	; (8006558 <extInt_Config+0x940>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d115      	bne.n	8006574 <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8006548:	4b04      	ldr	r3, [pc, #16]	; (800655c <extInt_Config+0x944>)
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	4a03      	ldr	r2, [pc, #12]	; (800655c <extInt_Config+0x944>)
 800654e:	f043 0301 	orr.w	r3, r3, #1
 8006552:	6153      	str	r3, [r2, #20]
		break;
 8006554:	e151      	b.n	80067fa <extInt_Config+0xbe2>
 8006556:	bf00      	nop
 8006558:	40020400 	.word	0x40020400
 800655c:	40013800 	.word	0x40013800
 8006560:	40020800 	.word	0x40020800
 8006564:	40020c00 	.word	0x40020c00
 8006568:	40021000 	.word	0x40021000
 800656c:	40021c00 	.word	0x40021c00
 8006570:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	4a83      	ldr	r2, [pc, #524]	; (8006788 <extInt_Config+0xb70>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d106      	bne.n	800658e <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8006580:	4b82      	ldr	r3, [pc, #520]	; (800678c <extInt_Config+0xb74>)
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	4a81      	ldr	r2, [pc, #516]	; (800678c <extInt_Config+0xb74>)
 8006586:	f043 0302 	orr.w	r3, r3, #2
 800658a:	6153      	str	r3, [r2, #20]
		break;
 800658c:	e135      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	4a7e      	ldr	r2, [pc, #504]	; (8006790 <extInt_Config+0xb78>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d106      	bne.n	80065a8 <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 800659a:	4b7c      	ldr	r3, [pc, #496]	; (800678c <extInt_Config+0xb74>)
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	4a7b      	ldr	r2, [pc, #492]	; (800678c <extInt_Config+0xb74>)
 80065a0:	f043 0303 	orr.w	r3, r3, #3
 80065a4:	6153      	str	r3, [r2, #20]
		break;
 80065a6:	e128      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	4a79      	ldr	r2, [pc, #484]	; (8006794 <extInt_Config+0xb7c>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d106      	bne.n	80065c2 <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 80065b4:	4b75      	ldr	r3, [pc, #468]	; (800678c <extInt_Config+0xb74>)
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	4a74      	ldr	r2, [pc, #464]	; (800678c <extInt_Config+0xb74>)
 80065ba:	f043 0304 	orr.w	r3, r3, #4
 80065be:	6153      	str	r3, [r2, #20]
		break;
 80065c0:	e11b      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	4a73      	ldr	r2, [pc, #460]	; (8006798 <extInt_Config+0xb80>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d106      	bne.n	80065dc <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 80065ce:	4b6f      	ldr	r3, [pc, #444]	; (800678c <extInt_Config+0xb74>)
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	4a6e      	ldr	r2, [pc, #440]	; (800678c <extInt_Config+0xb74>)
 80065d4:	f043 0307 	orr.w	r3, r3, #7
 80065d8:	6153      	str	r3, [r2, #20]
		break;
 80065da:	e10e      	b.n	80067fa <extInt_Config+0xbe2>
			__NOP();
 80065dc:	bf00      	nop
		break;
 80065de:	e10c      	b.n	80067fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 80065e0:	4b6a      	ldr	r3, [pc, #424]	; (800678c <extInt_Config+0xb74>)
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	4a69      	ldr	r2, [pc, #420]	; (800678c <extInt_Config+0xb74>)
 80065e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065ea:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	4a6a      	ldr	r2, [pc, #424]	; (800679c <extInt_Config+0xb84>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d104      	bne.n	8006602 <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 80065f8:	4b64      	ldr	r3, [pc, #400]	; (800678c <extInt_Config+0xb74>)
 80065fa:	4a64      	ldr	r2, [pc, #400]	; (800678c <extInt_Config+0xb74>)
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8006600:	e0fb      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	4a65      	ldr	r2, [pc, #404]	; (80067a0 <extInt_Config+0xb88>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d106      	bne.n	800661c <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 800660e:	4b5f      	ldr	r3, [pc, #380]	; (800678c <extInt_Config+0xb74>)
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	4a5e      	ldr	r2, [pc, #376]	; (800678c <extInt_Config+0xb74>)
 8006614:	f043 0310 	orr.w	r3, r3, #16
 8006618:	6153      	str	r3, [r2, #20]
		break;
 800661a:	e0ee      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	4a59      	ldr	r2, [pc, #356]	; (8006788 <extInt_Config+0xb70>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d106      	bne.n	8006636 <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8006628:	4b58      	ldr	r3, [pc, #352]	; (800678c <extInt_Config+0xb74>)
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	4a57      	ldr	r2, [pc, #348]	; (800678c <extInt_Config+0xb74>)
 800662e:	f043 0320 	orr.w	r3, r3, #32
 8006632:	6153      	str	r3, [r2, #20]
		break;
 8006634:	e0e1      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	4a54      	ldr	r2, [pc, #336]	; (8006790 <extInt_Config+0xb78>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d106      	bne.n	8006650 <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8006642:	4b52      	ldr	r3, [pc, #328]	; (800678c <extInt_Config+0xb74>)
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	4a51      	ldr	r2, [pc, #324]	; (800678c <extInt_Config+0xb74>)
 8006648:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800664c:	6153      	str	r3, [r2, #20]
		break;
 800664e:	e0d4      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	4a4f      	ldr	r2, [pc, #316]	; (8006794 <extInt_Config+0xb7c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d106      	bne.n	800666a <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 800665c:	4b4b      	ldr	r3, [pc, #300]	; (800678c <extInt_Config+0xb74>)
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	4a4a      	ldr	r2, [pc, #296]	; (800678c <extInt_Config+0xb74>)
 8006662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006666:	6153      	str	r3, [r2, #20]
		break;
 8006668:	e0c7      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	4a49      	ldr	r2, [pc, #292]	; (8006798 <extInt_Config+0xb80>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d106      	bne.n	8006684 <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8006676:	4b45      	ldr	r3, [pc, #276]	; (800678c <extInt_Config+0xb74>)
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	4a44      	ldr	r2, [pc, #272]	; (800678c <extInt_Config+0xb74>)
 800667c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006680:	6153      	str	r3, [r2, #20]
		break;
 8006682:	e0ba      	b.n	80067fa <extInt_Config+0xbe2>
			__NOP();
 8006684:	bf00      	nop
		break;
 8006686:	e0b8      	b.n	80067fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 8006688:	4b40      	ldr	r3, [pc, #256]	; (800678c <extInt_Config+0xb74>)
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	4a3f      	ldr	r2, [pc, #252]	; (800678c <extInt_Config+0xb74>)
 800668e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006692:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	4a40      	ldr	r2, [pc, #256]	; (800679c <extInt_Config+0xb84>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d104      	bne.n	80066aa <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 80066a0:	4b3a      	ldr	r3, [pc, #232]	; (800678c <extInt_Config+0xb74>)
 80066a2:	4a3a      	ldr	r2, [pc, #232]	; (800678c <extInt_Config+0xb74>)
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 80066a8:	e0a7      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	4a3b      	ldr	r2, [pc, #236]	; (80067a0 <extInt_Config+0xb88>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d106      	bne.n	80066c4 <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 80066b6:	4b35      	ldr	r3, [pc, #212]	; (800678c <extInt_Config+0xb74>)
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	4a34      	ldr	r2, [pc, #208]	; (800678c <extInt_Config+0xb74>)
 80066bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066c0:	6153      	str	r3, [r2, #20]
		break;
 80066c2:	e09a      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	4a2f      	ldr	r2, [pc, #188]	; (8006788 <extInt_Config+0xb70>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d106      	bne.n	80066de <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 80066d0:	4b2e      	ldr	r3, [pc, #184]	; (800678c <extInt_Config+0xb74>)
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	4a2d      	ldr	r2, [pc, #180]	; (800678c <extInt_Config+0xb74>)
 80066d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066da:	6153      	str	r3, [r2, #20]
		break;
 80066dc:	e08d      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	4a2a      	ldr	r2, [pc, #168]	; (8006790 <extInt_Config+0xb78>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d106      	bne.n	80066f8 <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 80066ea:	4b28      	ldr	r3, [pc, #160]	; (800678c <extInt_Config+0xb74>)
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	4a27      	ldr	r2, [pc, #156]	; (800678c <extInt_Config+0xb74>)
 80066f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80066f4:	6153      	str	r3, [r2, #20]
		break;
 80066f6:	e080      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	4a25      	ldr	r2, [pc, #148]	; (8006794 <extInt_Config+0xb7c>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d106      	bne.n	8006712 <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8006704:	4b21      	ldr	r3, [pc, #132]	; (800678c <extInt_Config+0xb74>)
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	4a20      	ldr	r2, [pc, #128]	; (800678c <extInt_Config+0xb74>)
 800670a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800670e:	6153      	str	r3, [r2, #20]
		break;
 8006710:	e073      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	4a1f      	ldr	r2, [pc, #124]	; (8006798 <extInt_Config+0xb80>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d106      	bne.n	800672c <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 800671e:	4b1b      	ldr	r3, [pc, #108]	; (800678c <extInt_Config+0xb74>)
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	4a1a      	ldr	r2, [pc, #104]	; (800678c <extInt_Config+0xb74>)
 8006724:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006728:	6153      	str	r3, [r2, #20]
		break;
 800672a:	e066      	b.n	80067fa <extInt_Config+0xbe2>
			__NOP();
 800672c:	bf00      	nop
		break;
 800672e:	e064      	b.n	80067fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 8006730:	4b16      	ldr	r3, [pc, #88]	; (800678c <extInt_Config+0xb74>)
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	4a15      	ldr	r2, [pc, #84]	; (800678c <extInt_Config+0xb74>)
 8006736:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800673a:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	4a16      	ldr	r2, [pc, #88]	; (800679c <extInt_Config+0xb84>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d104      	bne.n	8006752 <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8006748:	4b10      	ldr	r3, [pc, #64]	; (800678c <extInt_Config+0xb74>)
 800674a:	4a10      	ldr	r2, [pc, #64]	; (800678c <extInt_Config+0xb74>)
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8006750:	e053      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	4a11      	ldr	r2, [pc, #68]	; (80067a0 <extInt_Config+0xb88>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d106      	bne.n	800676c <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 800675e:	4b0b      	ldr	r3, [pc, #44]	; (800678c <extInt_Config+0xb74>)
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	4a0a      	ldr	r2, [pc, #40]	; (800678c <extInt_Config+0xb74>)
 8006764:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006768:	6153      	str	r3, [r2, #20]
		break;
 800676a:	e046      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	4a05      	ldr	r2, [pc, #20]	; (8006788 <extInt_Config+0xb70>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d115      	bne.n	80067a4 <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8006778:	4b04      	ldr	r3, [pc, #16]	; (800678c <extInt_Config+0xb74>)
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	4a03      	ldr	r2, [pc, #12]	; (800678c <extInt_Config+0xb74>)
 800677e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006782:	6153      	str	r3, [r2, #20]
		break;
 8006784:	e039      	b.n	80067fa <extInt_Config+0xbe2>
 8006786:	bf00      	nop
 8006788:	40020800 	.word	0x40020800
 800678c:	40013800 	.word	0x40013800
 8006790:	40020c00 	.word	0x40020c00
 8006794:	40021000 	.word	0x40021000
 8006798:	40021c00 	.word	0x40021c00
 800679c:	40020000 	.word	0x40020000
 80067a0:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	4a9d      	ldr	r2, [pc, #628]	; (8006a20 <extInt_Config+0xe08>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d106      	bne.n	80067be <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 80067b0:	4b9c      	ldr	r3, [pc, #624]	; (8006a24 <extInt_Config+0xe0c>)
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	4a9b      	ldr	r2, [pc, #620]	; (8006a24 <extInt_Config+0xe0c>)
 80067b6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80067ba:	6153      	str	r3, [r2, #20]
		break;
 80067bc:	e01d      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	4a98      	ldr	r2, [pc, #608]	; (8006a28 <extInt_Config+0xe10>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d106      	bne.n	80067d8 <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 80067ca:	4b96      	ldr	r3, [pc, #600]	; (8006a24 <extInt_Config+0xe0c>)
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	4a95      	ldr	r2, [pc, #596]	; (8006a24 <extInt_Config+0xe0c>)
 80067d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067d4:	6153      	str	r3, [r2, #20]
		break;
 80067d6:	e010      	b.n	80067fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	4a93      	ldr	r2, [pc, #588]	; (8006a2c <extInt_Config+0xe14>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d106      	bne.n	80067f2 <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 80067e4:	4b8f      	ldr	r3, [pc, #572]	; (8006a24 <extInt_Config+0xe0c>)
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	4a8e      	ldr	r2, [pc, #568]	; (8006a24 <extInt_Config+0xe0c>)
 80067ea:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80067ee:	6153      	str	r3, [r2, #20]
		break;
 80067f0:	e003      	b.n	80067fa <extInt_Config+0xbe2>
			__NOP();
 80067f2:	bf00      	nop
		break;
 80067f4:	e001      	b.n	80067fa <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 80067f6:	bf00      	nop
		break;
 80067f8:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	791b      	ldrb	r3, [r3, #4]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d126      	bne.n	8006850 <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006802:	4b8b      	ldr	r3, [pc, #556]	; (8006a30 <extInt_Config+0xe18>)
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	6812      	ldr	r2, [r2, #0]
 800680a:	7812      	ldrb	r2, [r2, #0]
 800680c:	4611      	mov	r1, r2
 800680e:	2201      	movs	r2, #1
 8006810:	408a      	lsls	r2, r1
 8006812:	43d2      	mvns	r2, r2
 8006814:	4611      	mov	r1, r2
 8006816:	4a86      	ldr	r2, [pc, #536]	; (8006a30 <extInt_Config+0xe18>)
 8006818:	400b      	ands	r3, r1
 800681a:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800681c:	4b84      	ldr	r3, [pc, #528]	; (8006a30 <extInt_Config+0xe18>)
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	6812      	ldr	r2, [r2, #0]
 8006824:	7812      	ldrb	r2, [r2, #0]
 8006826:	4611      	mov	r1, r2
 8006828:	2201      	movs	r2, #1
 800682a:	408a      	lsls	r2, r1
 800682c:	43d2      	mvns	r2, r2
 800682e:	4611      	mov	r1, r2
 8006830:	4a7f      	ldr	r2, [pc, #508]	; (8006a30 <extInt_Config+0xe18>)
 8006832:	400b      	ands	r3, r1
 8006834:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006836:	4b7e      	ldr	r3, [pc, #504]	; (8006a30 <extInt_Config+0xe18>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	6812      	ldr	r2, [r2, #0]
 800683e:	7812      	ldrb	r2, [r2, #0]
 8006840:	4611      	mov	r1, r2
 8006842:	2201      	movs	r2, #1
 8006844:	408a      	lsls	r2, r1
 8006846:	4611      	mov	r1, r2
 8006848:	4a79      	ldr	r2, [pc, #484]	; (8006a30 <extInt_Config+0xe18>)
 800684a:	430b      	orrs	r3, r1
 800684c:	6093      	str	r3, [r2, #8]
 800684e:	e05c      	b.n	800690a <extInt_Config+0xcf2>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	791b      	ldrb	r3, [r3, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d126      	bne.n	80068a6 <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006858:	4b75      	ldr	r3, [pc, #468]	; (8006a30 <extInt_Config+0xe18>)
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	6812      	ldr	r2, [r2, #0]
 8006860:	7812      	ldrb	r2, [r2, #0]
 8006862:	4611      	mov	r1, r2
 8006864:	2201      	movs	r2, #1
 8006866:	408a      	lsls	r2, r1
 8006868:	43d2      	mvns	r2, r2
 800686a:	4611      	mov	r1, r2
 800686c:	4a70      	ldr	r2, [pc, #448]	; (8006a30 <extInt_Config+0xe18>)
 800686e:	400b      	ands	r3, r1
 8006870:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006872:	4b6f      	ldr	r3, [pc, #444]	; (8006a30 <extInt_Config+0xe18>)
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	6812      	ldr	r2, [r2, #0]
 800687a:	7812      	ldrb	r2, [r2, #0]
 800687c:	4611      	mov	r1, r2
 800687e:	2201      	movs	r2, #1
 8006880:	408a      	lsls	r2, r1
 8006882:	43d2      	mvns	r2, r2
 8006884:	4611      	mov	r1, r2
 8006886:	4a6a      	ldr	r2, [pc, #424]	; (8006a30 <extInt_Config+0xe18>)
 8006888:	400b      	ands	r3, r1
 800688a:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800688c:	4b68      	ldr	r3, [pc, #416]	; (8006a30 <extInt_Config+0xe18>)
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6812      	ldr	r2, [r2, #0]
 8006894:	7812      	ldrb	r2, [r2, #0]
 8006896:	4611      	mov	r1, r2
 8006898:	2201      	movs	r2, #1
 800689a:	408a      	lsls	r2, r1
 800689c:	4611      	mov	r1, r2
 800689e:	4a64      	ldr	r2, [pc, #400]	; (8006a30 <extInt_Config+0xe18>)
 80068a0:	430b      	orrs	r3, r1
 80068a2:	60d3      	str	r3, [r2, #12]
 80068a4:	e031      	b.n	800690a <extInt_Config+0xcf2>

	}
	else
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80068a6:	4b62      	ldr	r3, [pc, #392]	; (8006a30 <extInt_Config+0xe18>)
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	6812      	ldr	r2, [r2, #0]
 80068ae:	7812      	ldrb	r2, [r2, #0]
 80068b0:	4611      	mov	r1, r2
 80068b2:	2201      	movs	r2, #1
 80068b4:	408a      	lsls	r2, r1
 80068b6:	43d2      	mvns	r2, r2
 80068b8:	4611      	mov	r1, r2
 80068ba:	4a5d      	ldr	r2, [pc, #372]	; (8006a30 <extInt_Config+0xe18>)
 80068bc:	400b      	ands	r3, r1
 80068be:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80068c0:	4b5b      	ldr	r3, [pc, #364]	; (8006a30 <extInt_Config+0xe18>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	6812      	ldr	r2, [r2, #0]
 80068c8:	7812      	ldrb	r2, [r2, #0]
 80068ca:	4611      	mov	r1, r2
 80068cc:	2201      	movs	r2, #1
 80068ce:	408a      	lsls	r2, r1
 80068d0:	43d2      	mvns	r2, r2
 80068d2:	4611      	mov	r1, r2
 80068d4:	4a56      	ldr	r2, [pc, #344]	; (8006a30 <extInt_Config+0xe18>)
 80068d6:	400b      	ands	r3, r1
 80068d8:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80068da:	4b55      	ldr	r3, [pc, #340]	; (8006a30 <extInt_Config+0xe18>)
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	6812      	ldr	r2, [r2, #0]
 80068e2:	7812      	ldrb	r2, [r2, #0]
 80068e4:	4611      	mov	r1, r2
 80068e6:	2201      	movs	r2, #1
 80068e8:	408a      	lsls	r2, r1
 80068ea:	4611      	mov	r1, r2
 80068ec:	4a50      	ldr	r2, [pc, #320]	; (8006a30 <extInt_Config+0xe18>)
 80068ee:	430b      	orrs	r3, r1
 80068f0:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80068f2:	4b4f      	ldr	r3, [pc, #316]	; (8006a30 <extInt_Config+0xe18>)
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	6812      	ldr	r2, [r2, #0]
 80068fa:	7812      	ldrb	r2, [r2, #0]
 80068fc:	4611      	mov	r1, r2
 80068fe:	2201      	movs	r2, #1
 8006900:	408a      	lsls	r2, r1
 8006902:	4611      	mov	r1, r2
 8006904:	4a4a      	ldr	r2, [pc, #296]	; (8006a30 <extInt_Config+0xe18>)
 8006906:	430b      	orrs	r3, r1
 8006908:	6093      	str	r3, [r2, #8]
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800690a:	4b49      	ldr	r3, [pc, #292]	; (8006a30 <extInt_Config+0xe18>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	6812      	ldr	r2, [r2, #0]
 8006912:	7812      	ldrb	r2, [r2, #0]
 8006914:	4611      	mov	r1, r2
 8006916:	2201      	movs	r2, #1
 8006918:	408a      	lsls	r2, r1
 800691a:	43d2      	mvns	r2, r2
 800691c:	4611      	mov	r1, r2
 800691e:	4a44      	ldr	r2, [pc, #272]	; (8006a30 <extInt_Config+0xe18>)
 8006920:	400b      	ands	r3, r1
 8006922:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006924:	4b42      	ldr	r3, [pc, #264]	; (8006a30 <extInt_Config+0xe18>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6812      	ldr	r2, [r2, #0]
 800692c:	7812      	ldrb	r2, [r2, #0]
 800692e:	4611      	mov	r1, r2
 8006930:	2201      	movs	r2, #1
 8006932:	408a      	lsls	r2, r1
 8006934:	4611      	mov	r1, r2
 8006936:	4a3e      	ldr	r2, [pc, #248]	; (8006a30 <extInt_Config+0xe18>)
 8006938:	430b      	orrs	r3, r1
 800693a:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800693c:	b672      	cpsid	i
}
 800693e:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	2b0f      	cmp	r3, #15
 8006948:	d862      	bhi.n	8006a10 <extInt_Config+0xdf8>
 800694a:	a201      	add	r2, pc, #4	; (adr r2, 8006950 <extInt_Config+0xd38>)
 800694c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006950:	08006991 	.word	0x08006991
 8006954:	08006999 	.word	0x08006999
 8006958:	080069a1 	.word	0x080069a1
 800695c:	080069a9 	.word	0x080069a9
 8006960:	080069b1 	.word	0x080069b1
 8006964:	080069b9 	.word	0x080069b9
 8006968:	080069c1 	.word	0x080069c1
 800696c:	080069c9 	.word	0x080069c9
 8006970:	080069d1 	.word	0x080069d1
 8006974:	080069d9 	.word	0x080069d9
 8006978:	080069e1 	.word	0x080069e1
 800697c:	080069e9 	.word	0x080069e9
 8006980:	080069f1 	.word	0x080069f1
 8006984:	080069f9 	.word	0x080069f9
 8006988:	08006a01 	.word	0x08006a01
 800698c:	08006a09 	.word	0x08006a09
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 8006990:	2006      	movs	r0, #6
 8006992:	f7ff f8f9 	bl	8005b88 <__NVIC_EnableIRQ>
		break;
 8006996:	e03c      	b.n	8006a12 <extInt_Config+0xdfa>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 8006998:	2007      	movs	r0, #7
 800699a:	f7ff f8f5 	bl	8005b88 <__NVIC_EnableIRQ>
		break;
 800699e:	e038      	b.n	8006a12 <extInt_Config+0xdfa>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 80069a0:	2008      	movs	r0, #8
 80069a2:	f7ff f8f1 	bl	8005b88 <__NVIC_EnableIRQ>
		break;
 80069a6:	e034      	b.n	8006a12 <extInt_Config+0xdfa>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 80069a8:	2009      	movs	r0, #9
 80069aa:	f7ff f8ed 	bl	8005b88 <__NVIC_EnableIRQ>
		break;
 80069ae:	e030      	b.n	8006a12 <extInt_Config+0xdfa>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 80069b0:	200a      	movs	r0, #10
 80069b2:	f7ff f8e9 	bl	8005b88 <__NVIC_EnableIRQ>
		break;
 80069b6:	e02c      	b.n	8006a12 <extInt_Config+0xdfa>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80069b8:	2017      	movs	r0, #23
 80069ba:	f7ff f8e5 	bl	8005b88 <__NVIC_EnableIRQ>
		break;
 80069be:	e028      	b.n	8006a12 <extInt_Config+0xdfa>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80069c0:	2017      	movs	r0, #23
 80069c2:	f7ff f8e1 	bl	8005b88 <__NVIC_EnableIRQ>
		break;
 80069c6:	e024      	b.n	8006a12 <extInt_Config+0xdfa>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80069c8:	2017      	movs	r0, #23
 80069ca:	f7ff f8dd 	bl	8005b88 <__NVIC_EnableIRQ>
		break;
 80069ce:	e020      	b.n	8006a12 <extInt_Config+0xdfa>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80069d0:	2017      	movs	r0, #23
 80069d2:	f7ff f8d9 	bl	8005b88 <__NVIC_EnableIRQ>
		break;
 80069d6:	e01c      	b.n	8006a12 <extInt_Config+0xdfa>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80069d8:	2017      	movs	r0, #23
 80069da:	f7ff f8d5 	bl	8005b88 <__NVIC_EnableIRQ>
		break;
 80069de:	e018      	b.n	8006a12 <extInt_Config+0xdfa>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80069e0:	2028      	movs	r0, #40	; 0x28
 80069e2:	f7ff f8d1 	bl	8005b88 <__NVIC_EnableIRQ>
		break;
 80069e6:	e014      	b.n	8006a12 <extInt_Config+0xdfa>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80069e8:	2028      	movs	r0, #40	; 0x28
 80069ea:	f7ff f8cd 	bl	8005b88 <__NVIC_EnableIRQ>
		break;
 80069ee:	e010      	b.n	8006a12 <extInt_Config+0xdfa>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80069f0:	2028      	movs	r0, #40	; 0x28
 80069f2:	f7ff f8c9 	bl	8005b88 <__NVIC_EnableIRQ>
		break;
 80069f6:	e00c      	b.n	8006a12 <extInt_Config+0xdfa>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80069f8:	2028      	movs	r0, #40	; 0x28
 80069fa:	f7ff f8c5 	bl	8005b88 <__NVIC_EnableIRQ>
		break;
 80069fe:	e008      	b.n	8006a12 <extInt_Config+0xdfa>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006a00:	2028      	movs	r0, #40	; 0x28
 8006a02:	f7ff f8c1 	bl	8005b88 <__NVIC_EnableIRQ>
		break;
 8006a06:	e004      	b.n	8006a12 <extInt_Config+0xdfa>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006a08:	2028      	movs	r0, #40	; 0x28
 8006a0a:	f7ff f8bd 	bl	8005b88 <__NVIC_EnableIRQ>
		break;
 8006a0e:	e000      	b.n	8006a12 <extInt_Config+0xdfa>
	}

	default: {
		break;
 8006a10:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8006a12:	b662      	cpsie	i
}
 8006a14:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 8006a16:	bf00      	nop
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	40020c00 	.word	0x40020c00
 8006a24:	40013800 	.word	0x40013800
 8006a28:	40021000 	.word	0x40021000
 8006a2c:	40021c00 	.word	0x40021c00
 8006a30:	40013c00 	.word	0x40013c00

08006a34 <exti_Config_Int_Priority>:


void exti_Config_Int_Priority(EXTI_Config_t *extiConfig, uint8_t newPriority)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a40:	b672      	cpsid	i
}
 8006a42:	bf00      	nop
	//Desabilitamos las interrupciones globales
	__disable_irq();
	//Configuramos la nueva prioridad
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b0f      	cmp	r3, #15
 8006a4c:	d84c      	bhi.n	8006ae8 <exti_Config_Int_Priority+0xb4>
 8006a4e:	a201      	add	r2, pc, #4	; (adr r2, 8006a54 <exti_Config_Int_Priority+0x20>)
 8006a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a54:	08006a95 	.word	0x08006a95
 8006a58:	08006aa1 	.word	0x08006aa1
 8006a5c:	08006aad 	.word	0x08006aad
 8006a60:	08006ab9 	.word	0x08006ab9
 8006a64:	08006ac5 	.word	0x08006ac5
 8006a68:	08006ad1 	.word	0x08006ad1
 8006a6c:	08006ad1 	.word	0x08006ad1
 8006a70:	08006ad1 	.word	0x08006ad1
 8006a74:	08006ad1 	.word	0x08006ad1
 8006a78:	08006ad1 	.word	0x08006ad1
 8006a7c:	08006add 	.word	0x08006add
 8006a80:	08006add 	.word	0x08006add
 8006a84:	08006add 	.word	0x08006add
 8006a88:	08006add 	.word	0x08006add
 8006a8c:	08006add 	.word	0x08006add
 8006a90:	08006add 	.word	0x08006add
	{
	case 0:
	{
		NVIC_SetPriority(EXTI0_IRQn, newPriority);
 8006a94:	78fb      	ldrb	r3, [r7, #3]
 8006a96:	4619      	mov	r1, r3
 8006a98:	2006      	movs	r0, #6
 8006a9a:	f7ff f893 	bl	8005bc4 <__NVIC_SetPriority>
		break;
 8006a9e:	e024      	b.n	8006aea <exti_Config_Int_Priority+0xb6>
	}
	case 1:
	{
		NVIC_SetPriority(EXTI1_IRQn, newPriority);
 8006aa0:	78fb      	ldrb	r3, [r7, #3]
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	2007      	movs	r0, #7
 8006aa6:	f7ff f88d 	bl	8005bc4 <__NVIC_SetPriority>
		break;
 8006aaa:	e01e      	b.n	8006aea <exti_Config_Int_Priority+0xb6>
	}
	case 2:
	{
		NVIC_SetPriority(EXTI2_IRQn, newPriority);
 8006aac:	78fb      	ldrb	r3, [r7, #3]
 8006aae:	4619      	mov	r1, r3
 8006ab0:	2008      	movs	r0, #8
 8006ab2:	f7ff f887 	bl	8005bc4 <__NVIC_SetPriority>
		break;
 8006ab6:	e018      	b.n	8006aea <exti_Config_Int_Priority+0xb6>
	}
	case 3:
	{
		NVIC_SetPriority(EXTI3_IRQn, newPriority);
 8006ab8:	78fb      	ldrb	r3, [r7, #3]
 8006aba:	4619      	mov	r1, r3
 8006abc:	2009      	movs	r0, #9
 8006abe:	f7ff f881 	bl	8005bc4 <__NVIC_SetPriority>
		break;
 8006ac2:	e012      	b.n	8006aea <exti_Config_Int_Priority+0xb6>
	}
	case 4:
	{
		NVIC_SetPriority(EXTI4_IRQn, newPriority);
 8006ac4:	78fb      	ldrb	r3, [r7, #3]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	200a      	movs	r0, #10
 8006aca:	f7ff f87b 	bl	8005bc4 <__NVIC_SetPriority>
		break;
 8006ace:	e00c      	b.n	8006aea <exti_Config_Int_Priority+0xb6>
	case 6:
	case 7:
	case 8:
	case 9:
	{
		NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	2017      	movs	r0, #23
 8006ad6:	f7ff f875 	bl	8005bc4 <__NVIC_SetPriority>
		break;
 8006ada:	e006      	b.n	8006aea <exti_Config_Int_Priority+0xb6>
	case 12:
	case 13:
	case 14:
	case 15:
	{
		NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8006adc:	78fb      	ldrb	r3, [r7, #3]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	2028      	movs	r0, #40	; 0x28
 8006ae2:	f7ff f86f 	bl	8005bc4 <__NVIC_SetPriority>
		break;
 8006ae6:	e000      	b.n	8006aea <exti_Config_Int_Priority+0xb6>
	}
	default:{  break;  }
 8006ae8:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8006aea:	b662      	cpsie	i
}
 8006aec:	bf00      	nop
	}
	//Activamos las interrupciones globales
	__enable_irq();
}
 8006aee:	bf00      	nop
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop

08006af8 <callback_extInt0>:


//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 8006af8:	b480      	push	{r7}
 8006afa:	af00      	add	r7, sp, #0
	__NOP();
 8006afc:	bf00      	nop
}
 8006afe:	bf00      	nop
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <callback_extInt1>:

__attribute__ ((weak)) void callback_extInt1(void){
 8006b08:	b480      	push	{r7}
 8006b0a:	af00      	add	r7, sp, #0
	__NOP();
 8006b0c:	bf00      	nop
}
 8006b0e:	bf00      	nop
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt2(void){
 8006b18:	b480      	push	{r7}
 8006b1a:	af00      	add	r7, sp, #0
	__NOP();
 8006b1c:	bf00      	nop
}
 8006b1e:	bf00      	nop
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <callback_extInt3>:

__attribute__ ((weak)) void callback_extInt3(void){
 8006b28:	b480      	push	{r7}
 8006b2a:	af00      	add	r7, sp, #0
	__NOP();
 8006b2c:	bf00      	nop
}
 8006b2e:	bf00      	nop
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt4(void){
 8006b38:	b480      	push	{r7}
 8006b3a:	af00      	add	r7, sp, #0
	__NOP();
 8006b3c:	bf00      	nop
}
 8006b3e:	bf00      	nop
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 8006b48:	b480      	push	{r7}
 8006b4a:	af00      	add	r7, sp, #0
	__NOP();
 8006b4c:	bf00      	nop
}
 8006b4e:	bf00      	nop
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 8006b58:	b480      	push	{r7}
 8006b5a:	af00      	add	r7, sp, #0
	__NOP();
 8006b5c:	bf00      	nop
}
 8006b5e:	bf00      	nop
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 8006b68:	b480      	push	{r7}
 8006b6a:	af00      	add	r7, sp, #0
	__NOP();
 8006b6c:	bf00      	nop
}
 8006b6e:	bf00      	nop
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 8006b78:	b480      	push	{r7}
 8006b7a:	af00      	add	r7, sp, #0
	__NOP();
 8006b7c:	bf00      	nop
}
 8006b7e:	bf00      	nop
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
	__NOP();
 8006b8c:	bf00      	nop
}
 8006b8e:	bf00      	nop
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 8006b98:	b480      	push	{r7}
 8006b9a:	af00      	add	r7, sp, #0
	__NOP();
 8006b9c:	bf00      	nop
}
 8006b9e:	bf00      	nop
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 8006ba8:	b480      	push	{r7}
 8006baa:	af00      	add	r7, sp, #0
	__NOP();
 8006bac:	bf00      	nop
}
 8006bae:	bf00      	nop
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 8006bb8:	b480      	push	{r7}
 8006bba:	af00      	add	r7, sp, #0
	__NOP();
 8006bbc:	bf00      	nop
}
 8006bbe:	bf00      	nop
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt13(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt14(void){
 8006bc8:	b480      	push	{r7}
 8006bca:	af00      	add	r7, sp, #0
	__NOP();
 8006bcc:	bf00      	nop
}
 8006bce:	bf00      	nop
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 8006bd8:	b480      	push	{r7}
 8006bda:	af00      	add	r7, sp, #0
	__NOP();
 8006bdc:	bf00      	nop
}
 8006bde:	bf00      	nop
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 8006bec:	4b08      	ldr	r3, [pc, #32]	; (8006c10 <EXTI0_IRQHandler+0x28>)
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d008      	beq.n	8006c0a <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 8006bf8:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <EXTI0_IRQHandler+0x28>)
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	4a04      	ldr	r2, [pc, #16]	; (8006c10 <EXTI0_IRQHandler+0x28>)
 8006bfe:	f043 0301 	orr.w	r3, r3, #1
 8006c02:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 8006c04:	f7ff ff78 	bl	8006af8 <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 8006c08:	e000      	b.n	8006c0c <EXTI0_IRQHandler+0x24>
		__NOP();
 8006c0a:	bf00      	nop
}
 8006c0c:	bf00      	nop
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	40013c00 	.word	0x40013c00

08006c14 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 8006c18:	4b08      	ldr	r3, [pc, #32]	; (8006c3c <EXTI1_IRQHandler+0x28>)
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d008      	beq.n	8006c36 <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 8006c24:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <EXTI1_IRQHandler+0x28>)
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	4a04      	ldr	r2, [pc, #16]	; (8006c3c <EXTI1_IRQHandler+0x28>)
 8006c2a:	f043 0302 	orr.w	r3, r3, #2
 8006c2e:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 8006c30:	f7ff ff6a 	bl	8006b08 <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 8006c34:	e000      	b.n	8006c38 <EXTI1_IRQHandler+0x24>
		__NOP();
 8006c36:	bf00      	nop
}
 8006c38:	bf00      	nop
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	40013c00 	.word	0x40013c00

08006c40 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 8006c44:	4b08      	ldr	r3, [pc, #32]	; (8006c68 <EXTI2_IRQHandler+0x28>)
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	f003 0304 	and.w	r3, r3, #4
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d008      	beq.n	8006c62 <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 8006c50:	4b05      	ldr	r3, [pc, #20]	; (8006c68 <EXTI2_IRQHandler+0x28>)
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	4a04      	ldr	r2, [pc, #16]	; (8006c68 <EXTI2_IRQHandler+0x28>)
 8006c56:	f043 0304 	orr.w	r3, r3, #4
 8006c5a:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 8006c5c:	f7ff ff5c 	bl	8006b18 <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 8006c60:	e000      	b.n	8006c64 <EXTI2_IRQHandler+0x24>
		__NOP();
 8006c62:	bf00      	nop
}
 8006c64:	bf00      	nop
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	40013c00 	.word	0x40013c00

08006c6c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 8006c70:	4b08      	ldr	r3, [pc, #32]	; (8006c94 <EXTI3_IRQHandler+0x28>)
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	f003 0308 	and.w	r3, r3, #8
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d008      	beq.n	8006c8e <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 8006c7c:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <EXTI3_IRQHandler+0x28>)
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	4a04      	ldr	r2, [pc, #16]	; (8006c94 <EXTI3_IRQHandler+0x28>)
 8006c82:	f043 0308 	orr.w	r3, r3, #8
 8006c86:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 8006c88:	f7ff ff4e 	bl	8006b28 <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 8006c8c:	e000      	b.n	8006c90 <EXTI3_IRQHandler+0x24>
		__NOP();
 8006c8e:	bf00      	nop
}
 8006c90:	bf00      	nop
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	40013c00 	.word	0x40013c00

08006c98 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 8006c9c:	4b08      	ldr	r3, [pc, #32]	; (8006cc0 <EXTI4_IRQHandler+0x28>)
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	f003 0310 	and.w	r3, r3, #16
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d008      	beq.n	8006cba <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 8006ca8:	4b05      	ldr	r3, [pc, #20]	; (8006cc0 <EXTI4_IRQHandler+0x28>)
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	4a04      	ldr	r2, [pc, #16]	; (8006cc0 <EXTI4_IRQHandler+0x28>)
 8006cae:	f043 0310 	orr.w	r3, r3, #16
 8006cb2:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 8006cb4:	f7ff ff40 	bl	8006b38 <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 8006cb8:	e000      	b.n	8006cbc <EXTI4_IRQHandler+0x24>
		__NOP();
 8006cba:	bf00      	nop
}
 8006cbc:	bf00      	nop
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	40013c00 	.word	0x40013c00

08006cc4 <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 8006cc8:	4b26      	ldr	r3, [pc, #152]	; (8006d64 <EXTI9_5_IRQHandler+0xa0>)
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	f003 0320 	and.w	r3, r3, #32
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d008      	beq.n	8006ce6 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 8006cd4:	4b23      	ldr	r3, [pc, #140]	; (8006d64 <EXTI9_5_IRQHandler+0xa0>)
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	4a22      	ldr	r2, [pc, #136]	; (8006d64 <EXTI9_5_IRQHandler+0xa0>)
 8006cda:	f043 0320 	orr.w	r3, r3, #32
 8006cde:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 8006ce0:	f7ff ff32 	bl	8006b48 <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 8006ce4:	e03c      	b.n	8006d60 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 8006ce6:	4b1f      	ldr	r3, [pc, #124]	; (8006d64 <EXTI9_5_IRQHandler+0xa0>)
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d008      	beq.n	8006d04 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 8006cf2:	4b1c      	ldr	r3, [pc, #112]	; (8006d64 <EXTI9_5_IRQHandler+0xa0>)
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	4a1b      	ldr	r2, [pc, #108]	; (8006d64 <EXTI9_5_IRQHandler+0xa0>)
 8006cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cfc:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 8006cfe:	f7ff ff2b 	bl	8006b58 <callback_extInt6>
}
 8006d02:	e02d      	b.n	8006d60 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 8006d04:	4b17      	ldr	r3, [pc, #92]	; (8006d64 <EXTI9_5_IRQHandler+0xa0>)
 8006d06:	695b      	ldr	r3, [r3, #20]
 8006d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d008      	beq.n	8006d22 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 8006d10:	4b14      	ldr	r3, [pc, #80]	; (8006d64 <EXTI9_5_IRQHandler+0xa0>)
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	4a13      	ldr	r2, [pc, #76]	; (8006d64 <EXTI9_5_IRQHandler+0xa0>)
 8006d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d1a:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 8006d1c:	f7ff ff24 	bl	8006b68 <callback_extInt7>
}
 8006d20:	e01e      	b.n	8006d60 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 8006d22:	4b10      	ldr	r3, [pc, #64]	; (8006d64 <EXTI9_5_IRQHandler+0xa0>)
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d008      	beq.n	8006d40 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 8006d2e:	4b0d      	ldr	r3, [pc, #52]	; (8006d64 <EXTI9_5_IRQHandler+0xa0>)
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	4a0c      	ldr	r2, [pc, #48]	; (8006d64 <EXTI9_5_IRQHandler+0xa0>)
 8006d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d38:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 8006d3a:	f7ff ff1d 	bl	8006b78 <callback_extInt8>
}
 8006d3e:	e00f      	b.n	8006d60 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 8006d40:	4b08      	ldr	r3, [pc, #32]	; (8006d64 <EXTI9_5_IRQHandler+0xa0>)
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d008      	beq.n	8006d5e <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 8006d4c:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <EXTI9_5_IRQHandler+0xa0>)
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	4a04      	ldr	r2, [pc, #16]	; (8006d64 <EXTI9_5_IRQHandler+0xa0>)
 8006d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d56:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 8006d58:	f7ff ff16 	bl	8006b88 <callback_extInt9>
}
 8006d5c:	e000      	b.n	8006d60 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 8006d5e:	bf00      	nop
}
 8006d60:	bf00      	nop
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	40013c00 	.word	0x40013c00

08006d68 <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 8006d6c:	4b2e      	ldr	r3, [pc, #184]	; (8006e28 <EXTI15_10_IRQHandler+0xc0>)
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d008      	beq.n	8006d8a <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 8006d78:	4b2b      	ldr	r3, [pc, #172]	; (8006e28 <EXTI15_10_IRQHandler+0xc0>)
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	4a2a      	ldr	r2, [pc, #168]	; (8006e28 <EXTI15_10_IRQHandler+0xc0>)
 8006d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d82:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 8006d84:	f7ff ff08 	bl	8006b98 <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 8006d88:	e04b      	b.n	8006e22 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 8006d8a:	4b27      	ldr	r3, [pc, #156]	; (8006e28 <EXTI15_10_IRQHandler+0xc0>)
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d008      	beq.n	8006da8 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 8006d96:	4b24      	ldr	r3, [pc, #144]	; (8006e28 <EXTI15_10_IRQHandler+0xc0>)
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	4a23      	ldr	r2, [pc, #140]	; (8006e28 <EXTI15_10_IRQHandler+0xc0>)
 8006d9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006da0:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 8006da2:	f7ff ff01 	bl	8006ba8 <callback_extInt11>
}
 8006da6:	e03c      	b.n	8006e22 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 8006da8:	4b1f      	ldr	r3, [pc, #124]	; (8006e28 <EXTI15_10_IRQHandler+0xc0>)
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d008      	beq.n	8006dc6 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 8006db4:	4b1c      	ldr	r3, [pc, #112]	; (8006e28 <EXTI15_10_IRQHandler+0xc0>)
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	4a1b      	ldr	r2, [pc, #108]	; (8006e28 <EXTI15_10_IRQHandler+0xc0>)
 8006dba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006dbe:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 8006dc0:	f7ff fefa 	bl	8006bb8 <callback_extInt12>
}
 8006dc4:	e02d      	b.n	8006e22 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 8006dc6:	4b18      	ldr	r3, [pc, #96]	; (8006e28 <EXTI15_10_IRQHandler+0xc0>)
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d008      	beq.n	8006de4 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 8006dd2:	4b15      	ldr	r3, [pc, #84]	; (8006e28 <EXTI15_10_IRQHandler+0xc0>)
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	4a14      	ldr	r2, [pc, #80]	; (8006e28 <EXTI15_10_IRQHandler+0xc0>)
 8006dd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006ddc:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 8006dde:	f7f9 faf7 	bl	80003d0 <callback_extInt13>
}
 8006de2:	e01e      	b.n	8006e22 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 8006de4:	4b10      	ldr	r3, [pc, #64]	; (8006e28 <EXTI15_10_IRQHandler+0xc0>)
 8006de6:	695b      	ldr	r3, [r3, #20]
 8006de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d008      	beq.n	8006e02 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 8006df0:	4b0d      	ldr	r3, [pc, #52]	; (8006e28 <EXTI15_10_IRQHandler+0xc0>)
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	4a0c      	ldr	r2, [pc, #48]	; (8006e28 <EXTI15_10_IRQHandler+0xc0>)
 8006df6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006dfa:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 8006dfc:	f7ff fee4 	bl	8006bc8 <callback_extInt14>
}
 8006e00:	e00f      	b.n	8006e22 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 8006e02:	4b09      	ldr	r3, [pc, #36]	; (8006e28 <EXTI15_10_IRQHandler+0xc0>)
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d008      	beq.n	8006e20 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 8006e0e:	4b06      	ldr	r3, [pc, #24]	; (8006e28 <EXTI15_10_IRQHandler+0xc0>)
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	4a05      	ldr	r2, [pc, #20]	; (8006e28 <EXTI15_10_IRQHandler+0xc0>)
 8006e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e18:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 8006e1a:	f7ff fedd 	bl	8006bd8 <callback_extInt15>
}
 8006e1e:	e000      	b.n	8006e22 <EXTI15_10_IRQHandler+0xba>
		__NOP();
 8006e20:	bf00      	nop
}
 8006e22:	bf00      	nop
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	40013c00 	.word	0x40013c00

08006e2c <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	4608      	mov	r0, r1
 8006e36:	4611      	mov	r1, r2
 8006e38:	461a      	mov	r2, r3
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	70fb      	strb	r3, [r7, #3]
 8006e3e:	460b      	mov	r3, r1
 8006e40:	70bb      	strb	r3, [r7, #2]
 8006e42:	4613      	mov	r3, r2
 8006e44:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	78fa      	ldrb	r2, [r7, #3]
 8006e4a:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	78ba      	ldrb	r2, [r7, #2]
 8006e50:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	787a      	ldrb	r2, [r7, #1]
 8006e56:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	7c3a      	ldrb	r2, [r7, #16]
 8006e5c:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	7d3a      	ldrb	r2, [r7, #20]
 8006e62:	715a      	strb	r2, [r3, #5]
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	4a88      	ldr	r2, [pc, #544]	; (80070a8 <GPIO_Config+0x238>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d106      	bne.n	8006e98 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 8006e8a:	4b88      	ldr	r3, [pc, #544]	; (80070ac <GPIO_Config+0x23c>)
 8006e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8e:	4a87      	ldr	r2, [pc, #540]	; (80070ac <GPIO_Config+0x23c>)
 8006e90:	f043 0301 	orr.w	r3, r3, #1
 8006e94:	6313      	str	r3, [r2, #48]	; 0x30
 8006e96:	e03a      	b.n	8006f0e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	4a84      	ldr	r2, [pc, #528]	; (80070b0 <GPIO_Config+0x240>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d106      	bne.n	8006eb0 <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 8006ea2:	4b82      	ldr	r3, [pc, #520]	; (80070ac <GPIO_Config+0x23c>)
 8006ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea6:	4a81      	ldr	r2, [pc, #516]	; (80070ac <GPIO_Config+0x23c>)
 8006ea8:	f043 0302 	orr.w	r3, r3, #2
 8006eac:	6313      	str	r3, [r2, #48]	; 0x30
 8006eae:	e02e      	b.n	8006f0e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	4a7f      	ldr	r2, [pc, #508]	; (80070b4 <GPIO_Config+0x244>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d106      	bne.n	8006ec8 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 8006eba:	4b7c      	ldr	r3, [pc, #496]	; (80070ac <GPIO_Config+0x23c>)
 8006ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebe:	4a7b      	ldr	r2, [pc, #492]	; (80070ac <GPIO_Config+0x23c>)
 8006ec0:	f043 0304 	orr.w	r3, r3, #4
 8006ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ec6:	e022      	b.n	8006f0e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	4a7a      	ldr	r2, [pc, #488]	; (80070b8 <GPIO_Config+0x248>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d106      	bne.n	8006ee0 <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 8006ed2:	4b76      	ldr	r3, [pc, #472]	; (80070ac <GPIO_Config+0x23c>)
 8006ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed6:	4a75      	ldr	r2, [pc, #468]	; (80070ac <GPIO_Config+0x23c>)
 8006ed8:	f043 0308 	orr.w	r3, r3, #8
 8006edc:	6313      	str	r3, [r2, #48]	; 0x30
 8006ede:	e016      	b.n	8006f0e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	4a75      	ldr	r2, [pc, #468]	; (80070bc <GPIO_Config+0x24c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d106      	bne.n	8006ef8 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 8006eea:	4b70      	ldr	r3, [pc, #448]	; (80070ac <GPIO_Config+0x23c>)
 8006eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eee:	4a6f      	ldr	r2, [pc, #444]	; (80070ac <GPIO_Config+0x23c>)
 8006ef0:	f043 0310 	orr.w	r3, r3, #16
 8006ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ef6:	e00a      	b.n	8006f0e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	4a70      	ldr	r2, [pc, #448]	; (80070c0 <GPIO_Config+0x250>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d105      	bne.n	8006f0e <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 8006f02:	4b6a      	ldr	r3, [pc, #424]	; (80070ac <GPIO_Config+0x23c>)
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	4a69      	ldr	r2, [pc, #420]	; (80070ac <GPIO_Config+0x23c>)
 8006f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f0c:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	785b      	ldrb	r3, [r3, #1]
 8006f12:	461a      	mov	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1e:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	005b      	lsls	r3, r3, #1
 8006f2c:	2103      	movs	r1, #3
 8006f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f32:	43db      	mvns	r3, r3
 8006f34:	4619      	mov	r1, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	400a      	ands	r2, r1
 8006f3c:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	6819      	ldr	r1, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	789b      	ldrb	r3, [r3, #2]
 8006f52:	461a      	mov	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5c:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	4619      	mov	r1, r3
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	408b      	lsls	r3, r1
 8006f6e:	43db      	mvns	r3, r3
 8006f70:	4619      	mov	r1, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	400a      	ands	r2, r1
 8006f78:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	6859      	ldr	r1, [r3, #4]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	78db      	ldrb	r3, [r3, #3]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9a:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	689a      	ldr	r2, [r3, #8]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	005b      	lsls	r3, r3, #1
 8006fa8:	2103      	movs	r1, #3
 8006faa:	fa01 f303 	lsl.w	r3, r1, r3
 8006fae:	43db      	mvns	r3, r3
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	400a      	ands	r2, r1
 8006fb8:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	6899      	ldr	r1, [r3, #8]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	791b      	ldrb	r3, [r3, #4]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fda:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	68da      	ldr	r2, [r3, #12]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	005b      	lsls	r3, r3, #1
 8006fe8:	2103      	movs	r1, #3
 8006fea:	fa01 f303 	lsl.w	r3, r1, r3
 8006fee:	43db      	mvns	r3, r3
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	400a      	ands	r2, r1
 8006ff8:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	68d9      	ldr	r1, [r3, #12]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	430a      	orrs	r2, r1
 8007008:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	785b      	ldrb	r3, [r3, #1]
 800700e:	2b02      	cmp	r3, #2
 8007010:	d143      	bne.n	800709a <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b07      	cmp	r3, #7
 8007018:	d81f      	bhi.n	800705a <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	6a1a      	ldr	r2, [r3, #32]
 8007028:	210f      	movs	r1, #15
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	fa01 f303 	lsl.w	r3, r1, r3
 8007030:	43db      	mvns	r3, r3
 8007032:	4619      	mov	r1, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	400a      	ands	r2, r1
 800703a:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	6a1a      	ldr	r2, [r3, #32]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	795b      	ldrb	r3, [r3, #5]
 8007046:	4619      	mov	r1, r3
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	fa01 f303 	lsl.w	r3, r1, r3
 800704e:	4619      	mov	r1, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	430a      	orrs	r2, r1
 8007056:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8007058:	e01f      	b.n	800709a <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	3b08      	subs	r3, #8
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800706a:	210f      	movs	r1, #15
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	fa01 f303 	lsl.w	r3, r1, r3
 8007072:	43db      	mvns	r3, r3
 8007074:	4619      	mov	r1, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	400a      	ands	r2, r1
 800707c:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	795b      	ldrb	r3, [r3, #5]
 8007088:	4619      	mov	r1, r3
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	fa01 f303 	lsl.w	r3, r1, r3
 8007090:	4619      	mov	r1, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	430a      	orrs	r2, r1
 8007098:	625a      	str	r2, [r3, #36]	; 0x24
}
 800709a:	bf00      	nop
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	40020000 	.word	0x40020000
 80070ac:	40023800 	.word	0x40023800
 80070b0:	40020400 	.word	0x40020400
 80070b4:	40020800 	.word	0x40020800
 80070b8:	40020c00 	.word	0x40020c00
 80070bc:	40021000 	.word	0x40021000
 80070c0:	40021c00 	.word	0x40021c00

080070c4 <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	460b      	mov	r3, r1
 80070ce:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 80070d0:	78fb      	ldrb	r3, [r7, #3]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d10d      	bne.n	80070f2 <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	699a      	ldr	r2, [r3, #24]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	4619      	mov	r1, r3
 80070e2:	2301      	movs	r3, #1
 80070e4:	408b      	lsls	r3, r1
 80070e6:	4619      	mov	r1, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 80070f0:	e00d      	b.n	800710e <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	699a      	ldr	r2, [r3, #24]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	3310      	adds	r3, #16
 80070fe:	2101      	movs	r1, #1
 8007100:	fa01 f303 	lsl.w	r3, r1, r3
 8007104:	4619      	mov	r1, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	430a      	orrs	r2, r1
 800710c:	619a      	str	r2, [r3, #24]
}
 800710e:	bf00      	nop
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 800711a:	b480      	push	{r7}
 800711c:	b083      	sub	sp, #12
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	695a      	ldr	r2, [r3, #20]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	4619      	mov	r1, r3
 800712e:	2301      	movs	r3, #1
 8007130:	408b      	lsls	r3, r1
 8007132:	4619      	mov	r1, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	404a      	eors	r2, r1
 800713a:	615a      	str	r2, [r3, #20]
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	4603      	mov	r3, r0
 8007150:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 8007152:	4a39      	ldr	r2, [pc, #228]	; (8007238 <configPLL+0xf0>)
 8007154:	79fb      	ldrb	r3, [r7, #7]
 8007156:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 8007158:	79fb      	ldrb	r3, [r7, #7]
 800715a:	2b31      	cmp	r3, #49	; 0x31
 800715c:	d804      	bhi.n	8007168 <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 800715e:	4b37      	ldr	r3, [pc, #220]	; (800723c <configPLL+0xf4>)
 8007160:	4a36      	ldr	r2, [pc, #216]	; (800723c <configPLL+0xf4>)
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	6093      	str	r3, [r2, #8]
 8007166:	e005      	b.n	8007174 <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8007168:	4b34      	ldr	r3, [pc, #208]	; (800723c <configPLL+0xf4>)
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	4a33      	ldr	r2, [pc, #204]	; (800723c <configPLL+0xf4>)
 800716e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8007172:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 8007174:	4b31      	ldr	r3, [pc, #196]	; (800723c <configPLL+0xf4>)
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	4a30      	ldr	r2, [pc, #192]	; (800723c <configPLL+0xf4>)
 800717a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800717e:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 8007180:	4b2e      	ldr	r3, [pc, #184]	; (800723c <configPLL+0xf4>)
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	4a2d      	ldr	r2, [pc, #180]	; (800723c <configPLL+0xf4>)
 8007186:	f043 0312 	orr.w	r3, r3, #18
 800718a:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 800718c:	4b2b      	ldr	r3, [pc, #172]	; (800723c <configPLL+0xf4>)
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	79fa      	ldrb	r2, [r7, #7]
 8007192:	0092      	lsls	r2, r2, #2
 8007194:	3a0e      	subs	r2, #14
 8007196:	0192      	lsls	r2, r2, #6
 8007198:	4611      	mov	r1, r2
 800719a:	4a28      	ldr	r2, [pc, #160]	; (800723c <configPLL+0xf4>)
 800719c:	430b      	orrs	r3, r1
 800719e:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 80071a0:	4b26      	ldr	r3, [pc, #152]	; (800723c <configPLL+0xf4>)
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	4a25      	ldr	r2, [pc, #148]	; (800723c <configPLL+0xf4>)
 80071a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071aa:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 80071ac:	4b23      	ldr	r3, [pc, #140]	; (800723c <configPLL+0xf4>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a22      	ldr	r2, [pc, #136]	; (800723c <configPLL+0xf4>)
 80071b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071b6:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 80071b8:	e000      	b.n	80071bc <configPLL+0x74>
	{
		__NOP();
 80071ba:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 80071bc:	4b1f      	ldr	r3, [pc, #124]	; (800723c <configPLL+0xf4>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d0f8      	beq.n	80071ba <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 80071c8:	79fb      	ldrb	r3, [r7, #7]
 80071ca:	2b5a      	cmp	r3, #90	; 0x5a
 80071cc:	d909      	bls.n	80071e2 <configPLL+0x9a>
 80071ce:	79fb      	ldrb	r3, [r7, #7]
 80071d0:	2b64      	cmp	r3, #100	; 0x64
 80071d2:	d806      	bhi.n	80071e2 <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 80071d4:	4b1a      	ldr	r3, [pc, #104]	; (8007240 <configPLL+0xf8>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a19      	ldr	r2, [pc, #100]	; (8007240 <configPLL+0xf8>)
 80071da:	f043 0303 	orr.w	r3, r3, #3
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	e01d      	b.n	800721e <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 80071e2:	79fb      	ldrb	r3, [r7, #7]
 80071e4:	2b40      	cmp	r3, #64	; 0x40
 80071e6:	d909      	bls.n	80071fc <configPLL+0xb4>
 80071e8:	79fb      	ldrb	r3, [r7, #7]
 80071ea:	2b5a      	cmp	r3, #90	; 0x5a
 80071ec:	d806      	bhi.n	80071fc <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 80071ee:	4b14      	ldr	r3, [pc, #80]	; (8007240 <configPLL+0xf8>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a13      	ldr	r2, [pc, #76]	; (8007240 <configPLL+0xf8>)
 80071f4:	f043 0302 	orr.w	r3, r3, #2
 80071f8:	6013      	str	r3, [r2, #0]
 80071fa:	e010      	b.n	800721e <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 80071fc:	79fb      	ldrb	r3, [r7, #7]
 80071fe:	2b1e      	cmp	r3, #30
 8007200:	d909      	bls.n	8007216 <configPLL+0xce>
 8007202:	79fb      	ldrb	r3, [r7, #7]
 8007204:	2b40      	cmp	r3, #64	; 0x40
 8007206:	d806      	bhi.n	8007216 <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 8007208:	4b0d      	ldr	r3, [pc, #52]	; (8007240 <configPLL+0xf8>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a0c      	ldr	r2, [pc, #48]	; (8007240 <configPLL+0xf8>)
 800720e:	f043 0301 	orr.w	r3, r3, #1
 8007212:	6013      	str	r3, [r2, #0]
 8007214:	e003      	b.n	800721e <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 8007216:	4b0a      	ldr	r3, [pc, #40]	; (8007240 <configPLL+0xf8>)
 8007218:	4a09      	ldr	r2, [pc, #36]	; (8007240 <configPLL+0xf8>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 800721e:	4b07      	ldr	r3, [pc, #28]	; (800723c <configPLL+0xf4>)
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	4a06      	ldr	r2, [pc, #24]	; (800723c <configPLL+0xf4>)
 8007224:	f043 0302 	orr.w	r3, r3, #2
 8007228:	6093      	str	r3, [r2, #8]

}
 800722a:	bf00      	nop
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	2001448b 	.word	0x2001448b
 800723c:	40023800 	.word	0x40023800
 8007240:	40023c00 	.word	0x40023c00

08007244 <configMCO2>:
	return clockAPB1;
}

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2(uint8_t value)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	4603      	mov	r3, r0
 800724c:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0b11<<RCC_CFGR_MCO2_Pos);
 800724e:	4b0a      	ldr	r3, [pc, #40]	; (8007278 <configMCO2+0x34>)
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	4a09      	ldr	r2, [pc, #36]	; (8007278 <configMCO2+0x34>)
 8007254:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007258:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (value<<RCC_CFGR_MCO2_Pos);
 800725a:	4b07      	ldr	r3, [pc, #28]	; (8007278 <configMCO2+0x34>)
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	79fa      	ldrb	r2, [r7, #7]
 8007260:	0792      	lsls	r2, r2, #30
 8007262:	4611      	mov	r1, r2
 8007264:	4a04      	ldr	r2, [pc, #16]	; (8007278 <configMCO2+0x34>)
 8007266:	430b      	orrs	r3, r1
 8007268:	6093      	str	r3, [r2, #8]
}
 800726a:	bf00      	nop
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	40023800 	.word	0x40023800

0800727c <configMCO2PRE>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2PRE(uint8_t value)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	4603      	mov	r3, r0
 8007284:	71fb      	strb	r3, [r7, #7]
	//Selecionamos el prescaler de acuerdo al valor definido
	switch (value){
 8007286:	79fb      	ldrb	r3, [r7, #7]
 8007288:	3b01      	subs	r3, #1
 800728a:	2b04      	cmp	r3, #4
 800728c:	d84b      	bhi.n	8007326 <configMCO2PRE+0xaa>
 800728e:	a201      	add	r2, pc, #4	; (adr r2, 8007294 <configMCO2PRE+0x18>)
 8007290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007294:	080072a9 	.word	0x080072a9
 8007298:	080072bf 	.word	0x080072bf
 800729c:	080072d9 	.word	0x080072d9
 80072a0:	080072f3 	.word	0x080072f3
 80072a4:	0800730d 	.word	0x0800730d
		case 1:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80072a8:	4b23      	ldr	r3, [pc, #140]	; (8007338 <configMCO2PRE+0xbc>)
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	4a22      	ldr	r2, [pc, #136]	; (8007338 <configMCO2PRE+0xbc>)
 80072ae:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80072b2:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b000<<RCC_CFGR_MCO2PRE_Pos);
 80072b4:	4b20      	ldr	r3, [pc, #128]	; (8007338 <configMCO2PRE+0xbc>)
 80072b6:	4a20      	ldr	r2, [pc, #128]	; (8007338 <configMCO2PRE+0xbc>)
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	6093      	str	r3, [r2, #8]
			break;
 80072bc:	e035      	b.n	800732a <configMCO2PRE+0xae>
		}
		case 2:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80072be:	4b1e      	ldr	r3, [pc, #120]	; (8007338 <configMCO2PRE+0xbc>)
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	4a1d      	ldr	r2, [pc, #116]	; (8007338 <configMCO2PRE+0xbc>)
 80072c4:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80072c8:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100<<RCC_CFGR_MCO2PRE_Pos);
 80072ca:	4b1b      	ldr	r3, [pc, #108]	; (8007338 <configMCO2PRE+0xbc>)
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	4a1a      	ldr	r2, [pc, #104]	; (8007338 <configMCO2PRE+0xbc>)
 80072d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072d4:	6093      	str	r3, [r2, #8]
			break;
 80072d6:	e028      	b.n	800732a <configMCO2PRE+0xae>
		}
		case 3:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80072d8:	4b17      	ldr	r3, [pc, #92]	; (8007338 <configMCO2PRE+0xbc>)
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	4a16      	ldr	r2, [pc, #88]	; (8007338 <configMCO2PRE+0xbc>)
 80072de:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80072e2:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b101<<RCC_CFGR_MCO2PRE_Pos);
 80072e4:	4b14      	ldr	r3, [pc, #80]	; (8007338 <configMCO2PRE+0xbc>)
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	4a13      	ldr	r2, [pc, #76]	; (8007338 <configMCO2PRE+0xbc>)
 80072ea:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
 80072ee:	6093      	str	r3, [r2, #8]
			break;
 80072f0:	e01b      	b.n	800732a <configMCO2PRE+0xae>
		}
		case 4:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80072f2:	4b11      	ldr	r3, [pc, #68]	; (8007338 <configMCO2PRE+0xbc>)
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	4a10      	ldr	r2, [pc, #64]	; (8007338 <configMCO2PRE+0xbc>)
 80072f8:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80072fc:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b110<<RCC_CFGR_MCO2PRE_Pos);
 80072fe:	4b0e      	ldr	r3, [pc, #56]	; (8007338 <configMCO2PRE+0xbc>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	4a0d      	ldr	r2, [pc, #52]	; (8007338 <configMCO2PRE+0xbc>)
 8007304:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8007308:	6093      	str	r3, [r2, #8]
			break;
 800730a:	e00e      	b.n	800732a <configMCO2PRE+0xae>
		}
		case 5:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 800730c:	4b0a      	ldr	r3, [pc, #40]	; (8007338 <configMCO2PRE+0xbc>)
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	4a09      	ldr	r2, [pc, #36]	; (8007338 <configMCO2PRE+0xbc>)
 8007312:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8007316:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b111<<RCC_CFGR_MCO2PRE_Pos);
 8007318:	4b07      	ldr	r3, [pc, #28]	; (8007338 <configMCO2PRE+0xbc>)
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	4a06      	ldr	r2, [pc, #24]	; (8007338 <configMCO2PRE+0xbc>)
 800731e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8007322:	6093      	str	r3, [r2, #8]
			break;
 8007324:	e001      	b.n	800732a <configMCO2PRE+0xae>
		}
		default:
		{
			__NOP();
 8007326:	bf00      	nop
			break;
 8007328:	bf00      	nop
		}
	}

}
 800732a:	bf00      	nop
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	40023800 	.word	0x40023800

0800733c <__libc_init_array>:
 800733c:	b570      	push	{r4, r5, r6, lr}
 800733e:	4d0d      	ldr	r5, [pc, #52]	; (8007374 <__libc_init_array+0x38>)
 8007340:	4c0d      	ldr	r4, [pc, #52]	; (8007378 <__libc_init_array+0x3c>)
 8007342:	1b64      	subs	r4, r4, r5
 8007344:	10a4      	asrs	r4, r4, #2
 8007346:	2600      	movs	r6, #0
 8007348:	42a6      	cmp	r6, r4
 800734a:	d109      	bne.n	8007360 <__libc_init_array+0x24>
 800734c:	4d0b      	ldr	r5, [pc, #44]	; (800737c <__libc_init_array+0x40>)
 800734e:	4c0c      	ldr	r4, [pc, #48]	; (8007380 <__libc_init_array+0x44>)
 8007350:	f000 f83e 	bl	80073d0 <_init>
 8007354:	1b64      	subs	r4, r4, r5
 8007356:	10a4      	asrs	r4, r4, #2
 8007358:	2600      	movs	r6, #0
 800735a:	42a6      	cmp	r6, r4
 800735c:	d105      	bne.n	800736a <__libc_init_array+0x2e>
 800735e:	bd70      	pop	{r4, r5, r6, pc}
 8007360:	f855 3b04 	ldr.w	r3, [r5], #4
 8007364:	4798      	blx	r3
 8007366:	3601      	adds	r6, #1
 8007368:	e7ee      	b.n	8007348 <__libc_init_array+0xc>
 800736a:	f855 3b04 	ldr.w	r3, [r5], #4
 800736e:	4798      	blx	r3
 8007370:	3601      	adds	r6, #1
 8007372:	e7f2      	b.n	800735a <__libc_init_array+0x1e>
 8007374:	08007520 	.word	0x08007520
 8007378:	08007520 	.word	0x08007520
 800737c:	08007520 	.word	0x08007520
 8007380:	08007524 	.word	0x08007524

08007384 <memcmp>:
 8007384:	b510      	push	{r4, lr}
 8007386:	3901      	subs	r1, #1
 8007388:	4402      	add	r2, r0
 800738a:	4290      	cmp	r0, r2
 800738c:	d101      	bne.n	8007392 <memcmp+0xe>
 800738e:	2000      	movs	r0, #0
 8007390:	e005      	b.n	800739e <memcmp+0x1a>
 8007392:	7803      	ldrb	r3, [r0, #0]
 8007394:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007398:	42a3      	cmp	r3, r4
 800739a:	d001      	beq.n	80073a0 <memcmp+0x1c>
 800739c:	1b18      	subs	r0, r3, r4
 800739e:	bd10      	pop	{r4, pc}
 80073a0:	3001      	adds	r0, #1
 80073a2:	e7f2      	b.n	800738a <memcmp+0x6>

080073a4 <memcpy>:
 80073a4:	440a      	add	r2, r1
 80073a6:	4291      	cmp	r1, r2
 80073a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80073ac:	d100      	bne.n	80073b0 <memcpy+0xc>
 80073ae:	4770      	bx	lr
 80073b0:	b510      	push	{r4, lr}
 80073b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073ba:	4291      	cmp	r1, r2
 80073bc:	d1f9      	bne.n	80073b2 <memcpy+0xe>
 80073be:	bd10      	pop	{r4, pc}

080073c0 <memset>:
 80073c0:	4402      	add	r2, r0
 80073c2:	4603      	mov	r3, r0
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d100      	bne.n	80073ca <memset+0xa>
 80073c8:	4770      	bx	lr
 80073ca:	f803 1b01 	strb.w	r1, [r3], #1
 80073ce:	e7f9      	b.n	80073c4 <memset+0x4>

080073d0 <_init>:
 80073d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d2:	bf00      	nop
 80073d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d6:	bc08      	pop	{r3}
 80073d8:	469e      	mov	lr, r3
 80073da:	4770      	bx	lr

080073dc <_fini>:
 80073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073de:	bf00      	nop
 80073e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073e2:	bc08      	pop	{r3}
 80073e4:	469e      	mov	lr, r3
 80073e6:	4770      	bx	lr
