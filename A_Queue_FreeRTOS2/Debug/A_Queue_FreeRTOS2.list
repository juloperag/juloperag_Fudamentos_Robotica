
A_Queue_FreeRTOS2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08005280  08005280  00015280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800544c  0800544c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800544c  0800544c  0001544c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005454  08005454  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005454  08005454  00015454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005458  08005458  00015458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800545c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013680  20000088  080054e4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013708  080054e4  00023708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080de  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001943  00000000  00000000  00028196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  00029ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  0002a1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010ad7  00000000  00000000  0002a828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009075  00000000  00000000  0003b2ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005d8f5  00000000  00000000  00044374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a1c69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002000  00000000  00000000  000a1cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005268 	.word	0x08005268

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08005268 	.word	0x08005268

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9a7 	b.w	80005f0 <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f835 	bl	8000320 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f828 	bl	8000320 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f817 	bl	8000320 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f809 	bl	8000320 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
//Variables adicionales aplicacion
state_t next_state = sMainMenu;


int main(void)
{
 80005f4:	b590      	push	{r4, r7, lr}
 80005f6:	b089      	sub	sp, #36	; 0x24
 80005f8:	af02      	add	r7, sp, #8
	//Incrementamos la velocidad de reloj del sistema
	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 80005fa:	2364      	movs	r3, #100	; 0x64
 80005fc:	75fb      	strb	r3, [r7, #23]
	configPLL(clock);
 80005fe:	7dfb      	ldrb	r3, [r7, #23]
 8000600:	4618      	mov	r0, r3
 8000602:	f003 fb65 	bl	8003cd0 <configPLL>
	//Configuracion inicial del sistema
	initSystem();
 8000606:	f000 f8d1 	bl	80007ac <initSystem>
	//Definimos la configuracion inicail del MCO1
	int_MCO2();
 800060a:	f000 f94d 	bl	80008a8 <int_MCO2>
	//Activamos la unidad de punto flotante (FPU)
	SCB->CPACR    |= (0xF << 20);
 800060e:	4b56      	ldr	r3, [pc, #344]	; (8000768 <main+0x174>)
 8000610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000614:	4a54      	ldr	r2, [pc, #336]	; (8000768 <main+0x174>)
 8000616:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800061a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Activamos del contador de Ticks
	DWT->CTRL    |= (1 << 0);
 800061e:	4b53      	ldr	r3, [pc, #332]	; (800076c <main+0x178>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a52      	ldr	r2, [pc, #328]	; (800076c <main+0x178>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6013      	str	r3, [r2, #0]

	//-----------------------Inicio cofiguracion de los elemntos del kernel de FreeRTOS----------------------

	//-------------------Configuracion Task--------------
	//Tarea Menu
	xReturned = xTaskCreate(
 800062a:	4b51      	ldr	r3, [pc, #324]	; (8000770 <main+0x17c>)
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2302      	movs	r3, #2
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2300      	movs	r3, #0
 8000634:	22c8      	movs	r2, #200	; 0xc8
 8000636:	494f      	ldr	r1, [pc, #316]	; (8000774 <main+0x180>)
 8000638:	484f      	ldr	r0, [pc, #316]	; (8000778 <main+0x184>)
 800063a:	f001 f977 	bl	800192c <xTaskCreate>
 800063e:	4603      	mov	r3, r0
 8000640:	4a4e      	ldr	r2, [pc, #312]	; (800077c <main+0x188>)
 8000642:	6013      	str	r3, [r2, #0]
	                    "Task_Menu",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Menu);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 8000644:	4b4d      	ldr	r3, [pc, #308]	; (800077c <main+0x188>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d00a      	beq.n	8000662 <main+0x6e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800064c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000650:	f383 8811 	msr	BASEPRI, r3
 8000654:	f3bf 8f6f 	isb	sy
 8000658:	f3bf 8f4f 	dsb	sy
 800065c:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800065e:	bf00      	nop
 8000660:	e7fe      	b.n	8000660 <main+0x6c>
	//Tarea Print
	xReturned = xTaskCreate(
 8000662:	4b47      	ldr	r3, [pc, #284]	; (8000780 <main+0x18c>)
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2302      	movs	r3, #2
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2300      	movs	r3, #0
 800066c:	22c8      	movs	r2, #200	; 0xc8
 800066e:	4945      	ldr	r1, [pc, #276]	; (8000784 <main+0x190>)
 8000670:	4845      	ldr	r0, [pc, #276]	; (8000788 <main+0x194>)
 8000672:	f001 f95b 	bl	800192c <xTaskCreate>
 8000676:	4603      	mov	r3, r0
 8000678:	4a40      	ldr	r2, [pc, #256]	; (800077c <main+0x188>)
 800067a:	6013      	str	r3, [r2, #0]
	                    "Task_Print",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Print);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 800067c:	4b3f      	ldr	r3, [pc, #252]	; (800077c <main+0x188>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d00a      	beq.n	800069a <main+0xa6>
        __asm volatile
 8000684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000688:	f383 8811 	msr	BASEPRI, r3
 800068c:	f3bf 8f6f 	isb	sy
 8000690:	f3bf 8f4f 	dsb	sy
 8000694:	60fb      	str	r3, [r7, #12]
    }
 8000696:	bf00      	nop
 8000698:	e7fe      	b.n	8000698 <main+0xa4>
	//Tarea comandos
	xReturned = xTaskCreate(
 800069a:	4b3c      	ldr	r3, [pc, #240]	; (800078c <main+0x198>)
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	2302      	movs	r3, #2
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2300      	movs	r3, #0
 80006a4:	22c8      	movs	r2, #200	; 0xc8
 80006a6:	493a      	ldr	r1, [pc, #232]	; (8000790 <main+0x19c>)
 80006a8:	483a      	ldr	r0, [pc, #232]	; (8000794 <main+0x1a0>)
 80006aa:	f001 f93f 	bl	800192c <xTaskCreate>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4a32      	ldr	r2, [pc, #200]	; (800077c <main+0x188>)
 80006b2:	6013      	str	r3, [r2, #0]
	                    "Task_Commands",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Commands);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 80006b4:	4b31      	ldr	r3, [pc, #196]	; (800077c <main+0x188>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d00a      	beq.n	80006d2 <main+0xde>
        __asm volatile
 80006bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c0:	f383 8811 	msr	BASEPRI, r3
 80006c4:	f3bf 8f6f 	isb	sy
 80006c8:	f3bf 8f4f 	dsb	sy
 80006cc:	60bb      	str	r3, [r7, #8]
    }
 80006ce:	bf00      	nop
 80006d0:	e7fe      	b.n	80006d0 <main+0xdc>

	//-------------------Configuracion Queue--------------
	//Cola para recibir datos por consola
	xQueue_InputData = xQueueCreate(10, sizeof( char ) );
 80006d2:	2200      	movs	r2, #0
 80006d4:	2101      	movs	r1, #1
 80006d6:	200a      	movs	r0, #10
 80006d8:	f000 fbdc 	bl	8000e94 <xQueueGenericCreate>
 80006dc:	4603      	mov	r3, r0
 80006de:	4a2e      	ldr	r2, [pc, #184]	; (8000798 <main+0x1a4>)
 80006e0:	6013      	str	r3, [r2, #0]
	configASSERT(xQueue_InputData != NULL);
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <main+0x1a4>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d10a      	bne.n	8000700 <main+0x10c>
        __asm volatile
 80006ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ee:	f383 8811 	msr	BASEPRI, r3
 80006f2:	f3bf 8f6f 	isb	sy
 80006f6:	f3bf 8f4f 	dsb	sy
 80006fa:	607b      	str	r3, [r7, #4]
    }
 80006fc:	bf00      	nop
 80006fe:	e7fe      	b.n	80006fe <main+0x10a>
	//cola para enviar datos por consola
	xQueue_Print = xQueueCreate(10, sizeof( size_t) );
 8000700:	2200      	movs	r2, #0
 8000702:	2104      	movs	r1, #4
 8000704:	200a      	movs	r0, #10
 8000706:	f000 fbc5 	bl	8000e94 <xQueueGenericCreate>
 800070a:	4603      	mov	r3, r0
 800070c:	4a23      	ldr	r2, [pc, #140]	; (800079c <main+0x1a8>)
 800070e:	6013      	str	r3, [r2, #0]
	configASSERT(xQueue_Print != NULL);
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <main+0x1a8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d10a      	bne.n	800072e <main+0x13a>
        __asm volatile
 8000718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800071c:	f383 8811 	msr	BASEPRI, r3
 8000720:	f3bf 8f6f 	isb	sy
 8000724:	f3bf 8f4f 	dsb	sy
 8000728:	603b      	str	r3, [r7, #0]
    }
 800072a:	bf00      	nop
 800072c:	e7fe      	b.n	800072c <main+0x138>

	//-------------------Configuracion Timer--------------
	//Software Timer para el blink
	handler_led_timer = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, 0, led_state_callback);
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <main+0x1ac>)
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	2300      	movs	r3, #0
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800073a:	481a      	ldr	r0, [pc, #104]	; (80007a4 <main+0x1b0>)
 800073c:	f002 f9da 	bl	8002af4 <xTimerCreate>
 8000740:	4603      	mov	r3, r0
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <main+0x1b4>)
 8000744:	6013      	str	r3, [r2, #0]
	xTimerStart(handler_led_timer, portMAX_DELAY);
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <main+0x1b4>)
 8000748:	681c      	ldr	r4, [r3, #0]
 800074a:	f001 fb31 	bl	8001db0 <xTaskGetTickCount>
 800074e:	4602      	mov	r2, r0
 8000750:	f04f 33ff 	mov.w	r3, #4294967295
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2300      	movs	r3, #0
 8000758:	2101      	movs	r1, #1
 800075a:	4620      	mov	r0, r4
 800075c:	f002 fa26 	bl	8002bac <xTimerGenericCommand>

	//-------------------Inicializacion Scheduler--------------
	//Inicia le Scheduler a funcionar
	vTaskStartScheduler();
 8000760:	f001 fa2a 	bl	8001bb8 <vTaskStartScheduler>
	//-----------------------Fin cofiguracion de los elemntos del kernel de FreeRTOS----------------------

	//Si el scheduler se inicia correctamente no se ejecutada este while
	while(1)
	{
		__NOP();
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <main+0x170>
 8000768:	e000ed00 	.word	0xe000ed00
 800076c:	e0001000 	.word	0xe0001000
 8000770:	200000e4 	.word	0x200000e4
 8000774:	08005280 	.word	0x08005280
 8000778:	08000981 	.word	0x08000981
 800077c:	200000e0 	.word	0x200000e0
 8000780:	200000e8 	.word	0x200000e8
 8000784:	0800528c 	.word	0x0800528c
 8000788:	08000ad1 	.word	0x08000ad1
 800078c:	200000ec 	.word	0x200000ec
 8000790:	08005298 	.word	0x08005298
 8000794:	08000b01 	.word	0x08000b01
 8000798:	200000f4 	.word	0x200000f4
 800079c:	200000f0 	.word	0x200000f0
 80007a0:	08000965 	.word	0x08000965
 80007a4:	080052a8 	.word	0x080052a8
 80007a8:	200000f8 	.word	0x200000f8

080007ac <initSystem>:
}


//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void initSystem(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af02      	add	r7, sp, #8
	//---------------------------------Inicio de Configuracion GPIOx---------------------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_BlinkyPin.pGPIOx = GPIOA;
 80007b2:	4b35      	ldr	r3, [pc, #212]	; (8000888 <initSystem+0xdc>)
 80007b4:	4a35      	ldr	r2, [pc, #212]	; (800088c <initSystem+0xe0>)
 80007b6:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 80007b8:	4b33      	ldr	r3, [pc, #204]	; (8000888 <initSystem+0xdc>)
 80007ba:	2205      	movs	r2, #5
 80007bc:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80007be:	2300      	movs	r3, #0
 80007c0:	9301      	str	r3, [sp, #4]
 80007c2:	2300      	movs	r3, #0
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2301      	movs	r3, #1
 80007c8:	2200      	movs	r2, #0
 80007ca:	2101      	movs	r1, #1
 80007cc:	482e      	ldr	r0, [pc, #184]	; (8000888 <initSystem+0xdc>)
 80007ce:	f003 f91b 	bl	8003a08 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_BlinkyPin);
 80007d2:	482d      	ldr	r0, [pc, #180]	; (8000888 <initSystem+0xdc>)
 80007d4:	f003 f93a 	bl	8003a4c <GPIO_Config>

	//-------------------------PIN_MCO2--------------------------------
	//---------------PIN: PC9----------------
	//------------AF0: MCO_2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MCO2.pGPIOx = GPIOC;
 80007d8:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <initSystem+0xe4>)
 80007da:	4a2e      	ldr	r2, [pc, #184]	; (8000894 <initSystem+0xe8>)
 80007dc:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MCO2.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 80007de:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <initSystem+0xe4>)
 80007e0:	2209      	movs	r2, #9
 80007e2:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MCO2, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80007e4:	2300      	movs	r3, #0
 80007e6:	9301      	str	r3, [sp, #4]
 80007e8:	2300      	movs	r3, #0
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	2301      	movs	r3, #1
 80007ee:	2200      	movs	r2, #0
 80007f0:	2102      	movs	r1, #2
 80007f2:	4827      	ldr	r0, [pc, #156]	; (8000890 <initSystem+0xe4>)
 80007f4:	f003 f908 	bl	8003a08 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MCO2);
 80007f8:	4825      	ldr	r0, [pc, #148]	; (8000890 <initSystem+0xe4>)
 80007fa:	f003 f927 	bl	8003a4c <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA2----------------
	//------------AF7: USART2_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_CommTerm_TX.pGPIOx = GPIOA;
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <initSystem+0xec>)
 8000800:	4a22      	ldr	r2, [pc, #136]	; (800088c <initSystem+0xe0>)
 8000802:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_CommTerm_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 8000804:	4b24      	ldr	r3, [pc, #144]	; (8000898 <initSystem+0xec>)
 8000806:	2202      	movs	r2, #2
 8000808:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_CommTerm_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 800080a:	2307      	movs	r3, #7
 800080c:	9301      	str	r3, [sp, #4]
 800080e:	2300      	movs	r3, #0
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2301      	movs	r3, #1
 8000814:	2200      	movs	r2, #0
 8000816:	2102      	movs	r1, #2
 8000818:	481f      	ldr	r0, [pc, #124]	; (8000898 <initSystem+0xec>)
 800081a:	f003 f8f5 	bl	8003a08 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_CommTerm_TX);
 800081e:	481e      	ldr	r0, [pc, #120]	; (8000898 <initSystem+0xec>)
 8000820:	f003 f914 	bl	8003a4c <GPIO_Config>

	//---------------PIN: PA3----------------
	//------------AF7: USART2_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_CommTerm_RX.pGPIOx = GPIOA;
 8000824:	4b1d      	ldr	r3, [pc, #116]	; (800089c <initSystem+0xf0>)
 8000826:	4a19      	ldr	r2, [pc, #100]	; (800088c <initSystem+0xe0>)
 8000828:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_CommTerm_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3; 						//PIN_x, 0-15
 800082a:	4b1c      	ldr	r3, [pc, #112]	; (800089c <initSystem+0xf0>)
 800082c:	2203      	movs	r2, #3
 800082e:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_CommTerm_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8000830:	2307      	movs	r3, #7
 8000832:	9301      	str	r3, [sp, #4]
 8000834:	2300      	movs	r3, #0
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2301      	movs	r3, #1
 800083a:	2200      	movs	r2, #0
 800083c:	2102      	movs	r1, #2
 800083e:	4817      	ldr	r0, [pc, #92]	; (800089c <initSystem+0xf0>)
 8000840:	f003 f8e2 	bl	8003a08 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_CommTerm_RX);
 8000844:	4815      	ldr	r0, [pc, #84]	; (800089c <initSystem+0xf0>)
 8000846:	f003 f901 	bl	8003a4c <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART2----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_CommTerm.ptrUSARTx = USART2;
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <initSystem+0xf4>)
 800084c:	4a15      	ldr	r2, [pc, #84]	; (80008a4 <initSystem+0xf8>)
 800084e:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_CommTerm.USART_Config.USART_mode = USART_MODE_RXTX ;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <initSystem+0xf4>)
 8000852:	2202      	movs	r2, #2
 8000854:	701a      	strb	r2, [r3, #0]
	handler_USART_CommTerm.USART_Config.USART_baudrate = USART_BAUDRATE_115200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <initSystem+0xf4>)
 8000858:	2202      	movs	r2, #2
 800085a:	705a      	strb	r2, [r3, #1]
	handler_USART_CommTerm.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 800085c:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <initSystem+0xf4>)
 800085e:	2200      	movs	r2, #0
 8000860:	709a      	strb	r2, [r3, #2]
	handler_USART_CommTerm.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <initSystem+0xf4>)
 8000864:	2200      	movs	r2, #0
 8000866:	70da      	strb	r2, [r3, #3]
	handler_USART_CommTerm.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <initSystem+0xf4>)
 800086a:	2201      	movs	r2, #1
 800086c:	711a      	strb	r2, [r3, #4]
	handler_USART_CommTerm.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_DISABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <initSystem+0xf4>)
 8000870:	2200      	movs	r2, #0
 8000872:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	usart_Config_Init_Priority(&handler_USART_CommTerm, e_USART_PRIOPITY_6);
 8000874:	2106      	movs	r1, #6
 8000876:	480a      	ldr	r0, [pc, #40]	; (80008a0 <initSystem+0xf4>)
 8000878:	f003 fdbe 	bl	80043f8 <usart_Config_Init_Priority>
	USART_Config(&handler_USART_CommTerm);
 800087c:	4808      	ldr	r0, [pc, #32]	; (80008a0 <initSystem+0xf4>)
 800087e:	f003 fb9d 	bl	8003fbc <USART_Config>

	//-------------------Fin de Configuracion USARTx-----------------------

}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200000a4 	.word	0x200000a4
 800088c:	40020000 	.word	0x40020000
 8000890:	200000b0 	.word	0x200000b0
 8000894:	40020800 	.word	0x40020800
 8000898:	200000bc 	.word	0x200000bc
 800089c:	200000c8 	.word	0x200000c8
 80008a0:	200000d4 	.word	0x200000d4
 80008a4:	40004400 	.word	0x40004400

080008a8 <int_MCO2>:

//-----------------------------Inicio configuracion MCO1------------------------------------------

//Funcion para la configuracion inicial del MCO1
void int_MCO2(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	//Configuracion inicial del MCO2
	configMCO2(0);
 80008ac:	2000      	movs	r0, #0
 80008ae:	f003 fac1 	bl	8003e34 <configMCO2>
	configMCO2PRE(4);
 80008b2:	2004      	movs	r0, #4
 80008b4:	f003 fada 	bl	8003e6c <configMCO2PRE>
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}

080008bc <BasicUSART2_Callback>:


//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART2_Callback(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af02      	add	r7, sp, #8
	usartData = getRxData();
 80008c2:	f003 fe5f 	bl	8004584 <getRxData>
 80008c6:	4603      	mov	r3, r0
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b22      	ldr	r3, [pc, #136]	; (8000954 <BasicUSART2_Callback+0x98>)
 80008cc:	701a      	strb	r2, [r3, #0]

	//Se define variable para verificar si una tarea de mayor proridad esta lista para Running
	BaseType_t pxHigherPriorityTaskWoken;
	(void) pxHigherPriorityTaskWoken;
	pxHigherPriorityTaskWoken = pdFALSE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]

	//Verificamos que la cola aun no se encuentra llena
	xReturned = xQueueIsQueueFullFromISR(xQueue_InputData);
 80008d2:	4b21      	ldr	r3, [pc, #132]	; (8000958 <BasicUSART2_Callback+0x9c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 ffa3 	bl	8001822 <xQueueIsQueueFullFromISR>
 80008dc:	4603      	mov	r3, r0
 80008de:	4a1f      	ldr	r2, [pc, #124]	; (800095c <BasicUSART2_Callback+0xa0>)
 80008e0:	6013      	str	r3, [r2, #0]

	//Por tanto si es True entonces aun no hay espacio
	if(xReturned != pdTRUE)
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <BasicUSART2_Callback+0xa0>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d00f      	beq.n	800090a <BasicUSART2_Callback+0x4e>
	{
		if(usartData != '\r' && usartData != '\n')
 80008ea:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <BasicUSART2_Callback+0x98>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b0d      	cmp	r3, #13
 80008f0:	d01d      	beq.n	800092e <BasicUSART2_Callback+0x72>
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <BasicUSART2_Callback+0x98>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b0a      	cmp	r3, #10
 80008f8:	d019      	beq.n	800092e <BasicUSART2_Callback+0x72>
		{
			//Se envia caracter a la cola
			xQueueSendToBackFromISR(xQueue_InputData, (void *)&usartData, NULL);
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <BasicUSART2_Callback+0x9c>)
 80008fc:	6818      	ldr	r0, [r3, #0]
 80008fe:	2300      	movs	r3, #0
 8000900:	2200      	movs	r2, #0
 8000902:	4914      	ldr	r1, [pc, #80]	; (8000954 <BasicUSART2_Callback+0x98>)
 8000904:	f000 fc46 	bl	8001194 <xQueueGenericSendFromISR>
 8000908:	e011      	b.n	800092e <BasicUSART2_Callback+0x72>
		}
	}
	else
	{
		if(usartData == '#')
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <BasicUSART2_Callback+0x98>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b23      	cmp	r3, #35	; 0x23
 8000910:	d10d      	bne.n	800092e <BasicUSART2_Callback+0x72>
		{
			//Se recibe mensaje de la cola
			xQueueReceiveFromISR(xQueue_InputData, (void *)&usartData, NULL);
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <BasicUSART2_Callback+0x9c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2200      	movs	r2, #0
 8000918:	490e      	ldr	r1, [pc, #56]	; (8000954 <BasicUSART2_Callback+0x98>)
 800091a:	4618      	mov	r0, r3
 800091c:	f000 fdc4 	bl	80014a8 <xQueueReceiveFromISR>
			//Se envia mensaje a la cola
			xQueueSendToBackFromISR(xQueue_InputData, (void *)&usartData, NULL);
 8000920:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <BasicUSART2_Callback+0x9c>)
 8000922:	6818      	ldr	r0, [r3, #0]
 8000924:	2300      	movs	r3, #0
 8000926:	2200      	movs	r2, #0
 8000928:	490a      	ldr	r1, [pc, #40]	; (8000954 <BasicUSART2_Callback+0x98>)
 800092a:	f000 fc33 	bl	8001194 <xQueueGenericSendFromISR>
		}
	}
	//Se envia notificacion al command Task
	if(usartData == '#')
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <BasicUSART2_Callback+0x98>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b23      	cmp	r3, #35	; 0x23
 8000934:	d10a      	bne.n	800094c <BasicUSART2_Callback+0x90>
	{
		xTaskNotifyFromISR(xHandleTask_Commands, 0, eNoAction, NULL);
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <BasicUSART2_Callback+0xa4>)
 8000938:	6818      	ldr	r0, [r3, #0]
 800093a:	2300      	movs	r3, #0
 800093c:	9301      	str	r3, [sp, #4]
 800093e:	2300      	movs	r3, #0
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2300      	movs	r3, #0
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	f001 ff3a 	bl	80027c0 <xTaskGenericNotifyFromISR>
	}
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000000 	.word	0x20000000
 8000958:	200000f4 	.word	0x200000f4
 800095c:	200000e0 	.word	0x200000e0
 8000960:	200000ec 	.word	0x200000ec

08000964 <led_state_callback>:



//----------------------Inicio de la definicion de las funciones del Software Timer----------------------------------
void led_state_callback(TimerHandle_t xTimer)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	//Cambio estado opuesto Led
	GPIOxTooglePin(&handler_GPIO_BlinkyPin);
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <led_state_callback+0x18>)
 800096e:	f003 f997 	bl	8003ca0 <GPIOxTooglePin>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200000a4 	.word	0x200000a4

08000980 <vTask_Menu>:
const char *msg_option_n = "\n-----Option out of range ------\n";

//----------------------Funciones referentes a cada tarea---------------------
//------Tarea Menu-------
void vTask_Menu(void * pvParameters)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af02      	add	r7, sp, #8
 8000986:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	int option;

	//Mensaje inicial del menu
	const char* msg_menu = "=======================\n"
 8000988:	4b48      	ldr	r3, [pc, #288]	; (8000aac <vTask_Menu+0x12c>)
 800098a:	60bb      	str	r3, [r7, #8]
			               "Exit          ---> 2\n"
			               "Enter your choice here : ";
	while(1)
	{
		//Se envia a imprimir el mensaje a la consola
		xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 800098c:	4b48      	ldr	r3, [pc, #288]	; (8000ab0 <vTask_Menu+0x130>)
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	f107 0108 	add.w	r1, r7, #8
 8000994:	2300      	movs	r3, #0
 8000996:	f04f 32ff 	mov.w	r2, #4294967295
 800099a:	f000 fafd 	bl	8000f98 <xQueueGenericSend>
		//Se espera por el comando a ejecutar
		xTaskNotifyWait(0,0,&cmd_addr, portMAX_DELAY);
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	f04f 32ff 	mov.w	r2, #4294967295
 80009a6:	9200      	str	r2, [sp, #0]
 80009a8:	2200      	movs	r2, #0
 80009aa:	2100      	movs	r1, #0
 80009ac:	2000      	movs	r0, #0
 80009ae:	f001 fda7 	bl	8002500 <xTaskGenericNotifyWait>
		cmd = (command_t* ) cmd_addr;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	617b      	str	r3, [r7, #20]

		//Se verificamos si se tiene un solo caracter
		if(cmd->len == 1)
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	68db      	ldr	r3, [r3, #12]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d158      	bne.n	8000a70 <vTask_Menu+0xf0>
		{
			//Se transforma un ASCII a un numero 1...
			option = cmd->payload[0] - 48;
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	3b30      	subs	r3, #48	; 0x30
 80009c4:	613b      	str	r3, [r7, #16]

			switch(option){
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d033      	beq.n	8000a34 <vTask_Menu+0xb4>
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	dc45      	bgt.n	8000a5e <vTask_Menu+0xde>
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d003      	beq.n	80009e0 <vTask_Menu+0x60>
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d015      	beq.n	8000a0a <vTask_Menu+0x8a>
 80009de:	e03e      	b.n	8000a5e <vTask_Menu+0xde>
			case 0:
				//Se envia la opcion especificada
				xQueueSend(xQueue_Print, &msg_option_0, portMAX_DELAY);
 80009e0:	4b33      	ldr	r3, [pc, #204]	; (8000ab0 <vTask_Menu+0x130>)
 80009e2:	6818      	ldr	r0, [r3, #0]
 80009e4:	2300      	movs	r3, #0
 80009e6:	f04f 32ff 	mov.w	r2, #4294967295
 80009ea:	4932      	ldr	r1, [pc, #200]	; (8000ab4 <vTask_Menu+0x134>)
 80009ec:	f000 fad4 	bl	8000f98 <xQueueGenericSend>
				//Notificacion del cambio de estado
				next_state = sMainMenu;
 80009f0:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <vTask_Menu+0x138>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
				xTaskNotify(xHandleTask_Menu, 0, eNoAction);
 80009f6:	4b31      	ldr	r3, [pc, #196]	; (8000abc <vTask_Menu+0x13c>)
 80009f8:	6818      	ldr	r0, [r3, #0]
 80009fa:	2300      	movs	r3, #0
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	2300      	movs	r3, #0
 8000a00:	2200      	movs	r2, #0
 8000a02:	2100      	movs	r1, #0
 8000a04:	f001 fdfc 	bl	8002600 <xTaskGenericNotify>

				break;
 8000a08:	e046      	b.n	8000a98 <vTask_Menu+0x118>
			case 1:
				//Se envia la opcion especificada
				xQueueSend(xQueue_Print, &msg_option_1, portMAX_DELAY);
 8000a0a:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <vTask_Menu+0x130>)
 8000a0c:	6818      	ldr	r0, [r3, #0]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f04f 32ff 	mov.w	r2, #4294967295
 8000a14:	492a      	ldr	r1, [pc, #168]	; (8000ac0 <vTask_Menu+0x140>)
 8000a16:	f000 fabf 	bl	8000f98 <xQueueGenericSend>
				//Notificacion del cambio de estado
				next_state = sMainMenu;
 8000a1a:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <vTask_Menu+0x138>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
				xTaskNotify(xHandleTask_Menu, 0, eNoAction);
 8000a20:	4b26      	ldr	r3, [pc, #152]	; (8000abc <vTask_Menu+0x13c>)
 8000a22:	6818      	ldr	r0, [r3, #0]
 8000a24:	2300      	movs	r3, #0
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2300      	movs	r3, #0
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	f001 fde7 	bl	8002600 <xTaskGenericNotify>

				break;
 8000a32:	e031      	b.n	8000a98 <vTask_Menu+0x118>
			case 2:
				//Se envia la opcion especificada
				xQueueSend(xQueue_Print, &msg_option_2, portMAX_DELAY);
 8000a34:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <vTask_Menu+0x130>)
 8000a36:	6818      	ldr	r0, [r3, #0]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a3e:	4921      	ldr	r1, [pc, #132]	; (8000ac4 <vTask_Menu+0x144>)
 8000a40:	f000 faaa 	bl	8000f98 <xQueueGenericSend>
				//Notificacion del cambio de estado
				next_state = sMainMenu;
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <vTask_Menu+0x138>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
				xTaskNotify(xHandleTask_Menu, 0, eNoAction);
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <vTask_Menu+0x13c>)
 8000a4c:	6818      	ldr	r0, [r3, #0]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2300      	movs	r3, #0
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	f001 fdd2 	bl	8002600 <xTaskGenericNotify>

				break;
 8000a5c:	e01c      	b.n	8000a98 <vTask_Menu+0x118>
			default:
				//Se envia la opcion especificada
				xQueueSend(xQueue_Print, &msg_option_n, portMAX_DELAY);
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <vTask_Menu+0x130>)
 8000a60:	6818      	ldr	r0, [r3, #0]
 8000a62:	2300      	movs	r3, #0
 8000a64:	f04f 32ff 	mov.w	r2, #4294967295
 8000a68:	4917      	ldr	r1, [pc, #92]	; (8000ac8 <vTask_Menu+0x148>)
 8000a6a:	f000 fa95 	bl	8000f98 <xQueueGenericSend>
				continue; //Se envia la instruccion al sistema de nuevo a esperar
 8000a6e:	e01c      	b.n	8000aaa <vTask_Menu+0x12a>
			}
		}
		else
		{
			//Se envia la opcion especificada
			xQueueSend(xQueue_Print, &msg_invalid, portMAX_DELAY);
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <vTask_Menu+0x130>)
 8000a72:	6818      	ldr	r0, [r3, #0]
 8000a74:	2300      	movs	r3, #0
 8000a76:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7a:	4914      	ldr	r1, [pc, #80]	; (8000acc <vTask_Menu+0x14c>)
 8000a7c:	f000 fa8c 	bl	8000f98 <xQueueGenericSend>
			//Notificacion del cambio de estado
			next_state = sMainMenu;
 8000a80:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <vTask_Menu+0x138>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
			xTaskNotify(xHandleTask_Menu, 0, eNoAction);
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <vTask_Menu+0x13c>)
 8000a88:	6818      	ldr	r0, [r3, #0]
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	2300      	movs	r3, #0
 8000a90:	2200      	movs	r2, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	f001 fdb4 	bl	8002600 <xTaskGenericNotify>
		}

		//La tarea se queda en un estado de espera por un tiempo indefinido
		xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f001 fd2b 	bl	8002500 <xTaskGenericNotifyWait>
		xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 8000aaa:	e76f      	b.n	800098c <vTask_Menu+0xc>
 8000aac:	08005360 	.word	0x08005360
 8000ab0:	200000f0 	.word	0x200000f0
 8000ab4:	2000000c 	.word	0x2000000c
 8000ab8:	200000fc 	.word	0x200000fc
 8000abc:	200000e4 	.word	0x200000e4
 8000ac0:	20000010 	.word	0x20000010
 8000ac4:	20000014 	.word	0x20000014
 8000ac8:	20000018 	.word	0x20000018
 8000acc:	20000008 	.word	0x20000008

08000ad0 <vTask_Print>:

}

//-------Tarea de Imprimir-------
void vTask_Print(void * pvParameters)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	uint32_t *msg;

	while(1)
	{
		//Se espera por el puntero del mensaje
		xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <vTask_Print+0x28>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f107 010c 	add.w	r1, r7, #12
 8000ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 fbff 	bl	80012e8 <xQueueReceive>
		//Enviamos por puerto serial dicho mensaje
		writeMsg(&handler_USART_CommTerm, (char *) msg);
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	4619      	mov	r1, r3
 8000aee:	4803      	ldr	r0, [pc, #12]	; (8000afc <vTask_Print+0x2c>)
 8000af0:	f003 fd29 	bl	8004546 <writeMsg>
		xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8000af4:	e7f0      	b.n	8000ad8 <vTask_Print+0x8>
 8000af6:	bf00      	nop
 8000af8:	200000f0 	.word	0x200000f0
 8000afc:	200000d4 	.word	0x200000d4

08000b00 <vTask_Commands>:
	}
}

//-------Tarea de los comando-------
void vTask_Commands(void * pvParameters)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	6078      	str	r0, [r7, #4]
	BaseType_t notify_status = {0};
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
	command_t cmd = {0};
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]

	while(1)
	{
		//Se espera por la notificacion de la interrupcion
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	2300      	movs	r3, #0
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	2000      	movs	r0, #0
 8000b28:	f001 fcea 	bl	8002500 <xTaskGenericNotifyWait>
 8000b2c:	61f8      	str	r0, [r7, #28]
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d1f2      	bne.n	8000b1a <vTask_Commands+0x1a>
		{
			//Se procesa el comando recibido
			process_command(&cmd);
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 f801 	bl	8000b40 <process_command>
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000b3e:	e7ec      	b.n	8000b1a <vTask_Commands+0x1a>

08000b40 <process_command>:
	}
}

//Funcion que ayuda en el procesamiento del comando
void process_command(command_t *cmd)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af02      	add	r7, sp, #8
 8000b46:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f823 	bl	8000b94 <extract_command>

	switch(next_state)
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <process_command+0x4c>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d012      	beq.n	8000b7c <process_command+0x3c>
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	dc0e      	bgt.n	8000b78 <process_command+0x38>
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d002      	beq.n	8000b64 <process_command+0x24>
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d00e      	beq.n	8000b80 <process_command+0x40>
 8000b62:	e009      	b.n	8000b78 <process_command+0x38>
	{
	case sMainMenu:
		//Notificamos a la tarea respectiva
		xTaskNotify(xHandleTask_Menu, (uint32_t) cmd, eSetValueWithoutOverwrite);
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <process_command+0x50>)
 8000b66:	6818      	ldr	r0, [r3, #0]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2304      	movs	r3, #4
 8000b70:	2100      	movs	r1, #0
 8000b72:	f001 fd45 	bl	8002600 <xTaskGenericNotify>
		break;
 8000b76:	e004      	b.n	8000b82 <process_command+0x42>

	case sRtcMenu:
		//xTaskNotify(xHandleTask_Rtc, (uint32_t) cmd, eSetValueWithoutOverwrite);
		break;
	default:
		__NOP();
 8000b78:	bf00      	nop
		break;
 8000b7a:	e002      	b.n	8000b82 <process_command+0x42>
		break;
 8000b7c:	bf00      	nop
 8000b7e:	e000      	b.n	8000b82 <process_command+0x42>
		break;
 8000b80:	bf00      	nop
	}
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000fc 	.word	0x200000fc
 8000b90:	200000e4 	.word	0x200000e4

08000b94 <extract_command>:
//Funcion para obtener el comando
int extract_command(command_t *cmd)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	//Definicion de variables
	uint8_t item;
	uint8_t counter_j = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	75fb      	strb	r3, [r7, #23]
	BaseType_t status;
	//Se verifica si hay un nuevo mensaje
	status = uxQueueMessagesWaiting(xQueue_InputData);
 8000ba0:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <extract_command+0x70>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 fd0e 	bl	80015c6 <uxQueueMessagesWaiting>
 8000baa:	4603      	mov	r3, r0
 8000bac:	613b      	str	r3, [r7, #16]
	if(status == 0)
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <extract_command+0x26>
	{
		return -1;
 8000bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb8:	e020      	b.n	8000bfc <extract_command+0x68>
	}
	do{
		//Recibimos un elemento y lo montamos en item
		status = xQueueReceive(xQueue_InputData, &item, 0);
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <extract_command+0x70>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f107 010f 	add.w	r1, r7, #15
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 fb8f 	bl	80012e8 <xQueueReceive>
 8000bca:	6138      	str	r0, [r7, #16]
		if(status ==pdTRUE){
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d106      	bne.n	8000be0 <extract_command+0x4c>
			//Vamos llenando el arreglo del comando
			cmd->payload[counter_j++] = item;
 8000bd2:	7dfb      	ldrb	r3, [r7, #23]
 8000bd4:	1c5a      	adds	r2, r3, #1
 8000bd6:	75fa      	strb	r2, [r7, #23]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	7bf9      	ldrb	r1, [r7, #15]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	5499      	strb	r1, [r3, r2]
		}
	}while(item != '#');
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	2b23      	cmp	r3, #35	; 0x23
 8000be4:	d1e9      	bne.n	8000bba <extract_command+0x26>

	//Agregamos el elemento nulo y ademas definimos el largo del mensaje
	cmd->payload[counter_j - 1] = '\0';
 8000be6:	7dfb      	ldrb	r3, [r7, #23]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	2100      	movs	r1, #0
 8000bee:	54d1      	strb	r1, [r2, r3]
	cmd->len = counter_j -1;
 8000bf0:	7dfb      	ldrb	r3, [r7, #23]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	60da      	str	r2, [r3, #12]

	return 0;
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200000f4 	.word	0x200000f4

08000c08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c08:	480d      	ldr	r0, [pc, #52]	; (8000c40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c0a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c0c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	; (8000c48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <LoopForever+0xe>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	; (8000c54 <LoopForever+0x16>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c36:	f003 fe6f 	bl	8004918 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c3a:	f7ff fcdb 	bl	80005f4 <main>

08000c3e <LoopForever>:

LoopForever:
    b LoopForever
 8000c3e:	e7fe      	b.n	8000c3e <LoopForever>
  ldr   r0, =_estack
 8000c40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000c4c:	0800545c 	.word	0x0800545c
  ldr r2, =_sbss
 8000c50:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000c54:	20013708 	.word	0x20013708

08000c58 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC_IRQHandler>

08000c5a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f103 0208 	add.w	r2, r3, #8
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c72:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f103 0208 	add.w	r2, r3, #8
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f103 0208 	add.w	r2, r3, #8
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	683a      	ldr	r2, [r7, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	601a      	str	r2, [r3, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d12:	d103      	bne.n	8000d1c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	691b      	ldr	r3, [r3, #16]
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	e00c      	b.n	8000d36 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3308      	adds	r3, #8
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	e002      	b.n	8000d2a <vListInsert+0x2e>
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	68ba      	ldr	r2, [r7, #8]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d2f6      	bcs.n	8000d24 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	685a      	ldr	r2, [r3, #4]
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	683a      	ldr	r2, [r7, #0]
 8000d44:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	1c5a      	adds	r2, r3, #1
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	601a      	str	r2, [r3, #0]
}
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b085      	sub	sp, #20
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	6892      	ldr	r2, [r2, #8]
 8000d84:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	6852      	ldr	r2, [r2, #4]
 8000d8e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d103      	bne.n	8000da2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	1e5a      	subs	r2, r3, #1
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	681b      	ldr	r3, [r3, #0]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d10a      	bne.n	8000dee <xQueueGenericReset+0x2a>
        __asm volatile
 8000dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ddc:	f383 8811 	msr	BASEPRI, r3
 8000de0:	f3bf 8f6f 	isb	sy
 8000de4:	f3bf 8f4f 	dsb	sy
 8000de8:	60bb      	str	r3, [r7, #8]
    }
 8000dea:	bf00      	nop
 8000dec:	e7fe      	b.n	8000dec <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8000dee:	f002 faeb 	bl	80033c8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dfa:	68f9      	ldr	r1, [r7, #12]
 8000dfc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000dfe:	fb01 f303 	mul.w	r3, r1, r3
 8000e02:	441a      	add	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	68f9      	ldr	r1, [r7, #12]
 8000e22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000e24:	fb01 f303 	mul.w	r3, r1, r3
 8000e28:	441a      	add	r2, r3
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	22ff      	movs	r2, #255	; 0xff
 8000e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	22ff      	movs	r2, #255	; 0xff
 8000e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d114      	bne.n	8000e6e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d01a      	beq.n	8000e82 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	3310      	adds	r3, #16
 8000e50:	4618      	mov	r0, r3
 8000e52:	f001 f921 	bl	8002098 <xTaskRemoveFromEventList>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d012      	beq.n	8000e82 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <xQueueGenericReset+0xcc>)
 8000e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	f3bf 8f4f 	dsb	sy
 8000e68:	f3bf 8f6f 	isb	sy
 8000e6c:	e009      	b.n	8000e82 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	3310      	adds	r3, #16
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fef1 	bl	8000c5a <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	3324      	adds	r3, #36	; 0x24
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff feec 	bl	8000c5a <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8000e82:	f002 fad1 	bl	8003428 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	e000ed04 	.word	0xe000ed04

08000e94 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08c      	sub	sp, #48	; 0x30
 8000e98:	af02      	add	r7, sp, #8
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10a      	bne.n	8000ebe <xQueueGenericCreate+0x2a>
        __asm volatile
 8000ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eac:	f383 8811 	msr	BASEPRI, r3
 8000eb0:	f3bf 8f6f 	isb	sy
 8000eb4:	f3bf 8f4f 	dsb	sy
 8000eb8:	61bb      	str	r3, [r7, #24]
    }
 8000eba:	bf00      	nop
 8000ebc:	e7fe      	b.n	8000ebc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	68ba      	ldr	r2, [r7, #8]
 8000ec2:	fb02 f303 	mul.w	r3, r2, r3
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d006      	beq.n	8000edc <xQueueGenericCreate+0x48>
 8000ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d101      	bne.n	8000ee0 <xQueueGenericCreate+0x4c>
 8000edc:	2301      	movs	r3, #1
 8000ede:	e000      	b.n	8000ee2 <xQueueGenericCreate+0x4e>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10a      	bne.n	8000efc <xQueueGenericCreate+0x68>
        __asm volatile
 8000ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eea:	f383 8811 	msr	BASEPRI, r3
 8000eee:	f3bf 8f6f 	isb	sy
 8000ef2:	f3bf 8f4f 	dsb	sy
 8000ef6:	617b      	str	r3, [r7, #20]
    }
 8000ef8:	bf00      	nop
 8000efa:	e7fe      	b.n	8000efa <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efe:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000f02:	d90a      	bls.n	8000f1a <xQueueGenericCreate+0x86>
        __asm volatile
 8000f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f08:	f383 8811 	msr	BASEPRI, r3
 8000f0c:	f3bf 8f6f 	isb	sy
 8000f10:	f3bf 8f4f 	dsb	sy
 8000f14:	613b      	str	r3, [r7, #16]
    }
 8000f16:	bf00      	nop
 8000f18:	e7fe      	b.n	8000f18 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	3350      	adds	r3, #80	; 0x50
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f002 fb74 	bl	800360c <pvPortMalloc>
 8000f24:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000f26:	6a3b      	ldr	r3, [r7, #32]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d00d      	beq.n	8000f48 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	3350      	adds	r3, #80	; 0x50
 8000f34:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000f36:	79fa      	ldrb	r2, [r7, #7]
 8000f38:	6a3b      	ldr	r3, [r7, #32]
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	69fa      	ldr	r2, [r7, #28]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	68f8      	ldr	r0, [r7, #12]
 8000f44:	f000 f805 	bl	8000f52 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000f48:	6a3b      	ldr	r3, [r7, #32]
    }
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3728      	adds	r7, #40	; 0x28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b084      	sub	sp, #16
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	60f8      	str	r0, [r7, #12]
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d103      	bne.n	8000f6e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	e002      	b.n	8000f74 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000f80:	2101      	movs	r1, #1
 8000f82:	69b8      	ldr	r0, [r7, #24]
 8000f84:	f7ff ff1e 	bl	8000dc4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	78fa      	ldrb	r2, [r7, #3]
 8000f8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08e      	sub	sp, #56	; 0x38
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8000fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10a      	bne.n	8000fca <xQueueGenericSend+0x32>
        __asm volatile
 8000fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fb8:	f383 8811 	msr	BASEPRI, r3
 8000fbc:	f3bf 8f6f 	isb	sy
 8000fc0:	f3bf 8f4f 	dsb	sy
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000fc6:	bf00      	nop
 8000fc8:	e7fe      	b.n	8000fc8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d103      	bne.n	8000fd8 <xQueueGenericSend+0x40>
 8000fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d101      	bne.n	8000fdc <xQueueGenericSend+0x44>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e000      	b.n	8000fde <xQueueGenericSend+0x46>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10a      	bne.n	8000ff8 <xQueueGenericSend+0x60>
        __asm volatile
 8000fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe6:	f383 8811 	msr	BASEPRI, r3
 8000fea:	f3bf 8f6f 	isb	sy
 8000fee:	f3bf 8f4f 	dsb	sy
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000ff4:	bf00      	nop
 8000ff6:	e7fe      	b.n	8000ff6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d103      	bne.n	8001006 <xQueueGenericSend+0x6e>
 8000ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001002:	2b01      	cmp	r3, #1
 8001004:	d101      	bne.n	800100a <xQueueGenericSend+0x72>
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <xQueueGenericSend+0x74>
 800100a:	2300      	movs	r3, #0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d10a      	bne.n	8001026 <xQueueGenericSend+0x8e>
        __asm volatile
 8001010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001014:	f383 8811 	msr	BASEPRI, r3
 8001018:	f3bf 8f6f 	isb	sy
 800101c:	f3bf 8f4f 	dsb	sy
 8001020:	623b      	str	r3, [r7, #32]
    }
 8001022:	bf00      	nop
 8001024:	e7fe      	b.n	8001024 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001026:	f001 f9d3 	bl	80023d0 <xTaskGetSchedulerState>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <xQueueGenericSend+0x9e>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <xQueueGenericSend+0xa2>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <xQueueGenericSend+0xa4>
 800103a:	2300      	movs	r3, #0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10a      	bne.n	8001056 <xQueueGenericSend+0xbe>
        __asm volatile
 8001040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001044:	f383 8811 	msr	BASEPRI, r3
 8001048:	f3bf 8f6f 	isb	sy
 800104c:	f3bf 8f4f 	dsb	sy
 8001050:	61fb      	str	r3, [r7, #28]
    }
 8001052:	bf00      	nop
 8001054:	e7fe      	b.n	8001054 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001056:	f002 f9b7 	bl	80033c8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800105a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800105c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800105e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001062:	429a      	cmp	r2, r3
 8001064:	d302      	bcc.n	800106c <xQueueGenericSend+0xd4>
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d129      	bne.n	80010c0 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	68b9      	ldr	r1, [r7, #8]
 8001070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001072:	f000 fac6 	bl	8001602 <prvCopyDataToQueue>
 8001076:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107c:	2b00      	cmp	r3, #0
 800107e:	d010      	beq.n	80010a2 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001082:	3324      	adds	r3, #36	; 0x24
 8001084:	4618      	mov	r0, r3
 8001086:	f001 f807 	bl	8002098 <xTaskRemoveFromEventList>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d013      	beq.n	80010b8 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001090:	4b3f      	ldr	r3, [pc, #252]	; (8001190 <xQueueGenericSend+0x1f8>)
 8001092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	f3bf 8f4f 	dsb	sy
 800109c:	f3bf 8f6f 	isb	sy
 80010a0:	e00a      	b.n	80010b8 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80010a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d007      	beq.n	80010b8 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80010a8:	4b39      	ldr	r3, [pc, #228]	; (8001190 <xQueueGenericSend+0x1f8>)
 80010aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	f3bf 8f4f 	dsb	sy
 80010b4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80010b8:	f002 f9b6 	bl	8003428 <vPortExitCritical>
                return pdPASS;
 80010bc:	2301      	movs	r3, #1
 80010be:	e063      	b.n	8001188 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d103      	bne.n	80010ce <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80010c6:	f002 f9af 	bl	8003428 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e05c      	b.n	8001188 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80010ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d106      	bne.n	80010e2 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4618      	mov	r0, r3
 80010da:	f001 f83f 	bl	800215c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80010de:	2301      	movs	r3, #1
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80010e2:	f002 f9a1 	bl	8003428 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80010e6:	f000 fdb9 	bl	8001c5c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80010ea:	f002 f96d 	bl	80033c8 <vPortEnterCritical>
 80010ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fa:	d103      	bne.n	8001104 <xQueueGenericSend+0x16c>
 80010fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800110a:	b25b      	sxtb	r3, r3
 800110c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001110:	d103      	bne.n	800111a <xQueueGenericSend+0x182>
 8001112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800111a:	f002 f985 	bl	8003428 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800111e:	1d3a      	adds	r2, r7, #4
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4611      	mov	r1, r2
 8001126:	4618      	mov	r0, r3
 8001128:	f001 f82e 	bl	8002188 <xTaskCheckForTimeOut>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d124      	bne.n	800117c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001132:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001134:	f000 fb5d 	bl	80017f2 <prvIsQueueFull>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d018      	beq.n	8001170 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800113e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001140:	3310      	adds	r3, #16
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f000 ff56 	bl	8001ff8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800114c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800114e:	f000 fae8 	bl	8001722 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001152:	f000 fd91 	bl	8001c78 <xTaskResumeAll>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	f47f af7c 	bne.w	8001056 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <xQueueGenericSend+0x1f8>)
 8001160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	f3bf 8f4f 	dsb	sy
 800116a:	f3bf 8f6f 	isb	sy
 800116e:	e772      	b.n	8001056 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001172:	f000 fad6 	bl	8001722 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001176:	f000 fd7f 	bl	8001c78 <xTaskResumeAll>
 800117a:	e76c      	b.n	8001056 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800117c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800117e:	f000 fad0 	bl	8001722 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001182:	f000 fd79 	bl	8001c78 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8001186:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001188:	4618      	mov	r0, r3
 800118a:	3738      	adds	r7, #56	; 0x38
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	e000ed04 	.word	0xe000ed04

08001194 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b090      	sub	sp, #64	; 0x40
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
 80011a0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80011a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d10a      	bne.n	80011c2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80011ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011b0:	f383 8811 	msr	BASEPRI, r3
 80011b4:	f3bf 8f6f 	isb	sy
 80011b8:	f3bf 8f4f 	dsb	sy
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80011be:	bf00      	nop
 80011c0:	e7fe      	b.n	80011c0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d103      	bne.n	80011d0 <xQueueGenericSendFromISR+0x3c>
 80011c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <xQueueGenericSendFromISR+0x40>
 80011d0:	2301      	movs	r3, #1
 80011d2:	e000      	b.n	80011d6 <xQueueGenericSendFromISR+0x42>
 80011d4:	2300      	movs	r3, #0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10a      	bne.n	80011f0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80011da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011de:	f383 8811 	msr	BASEPRI, r3
 80011e2:	f3bf 8f6f 	isb	sy
 80011e6:	f3bf 8f4f 	dsb	sy
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80011ec:	bf00      	nop
 80011ee:	e7fe      	b.n	80011ee <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d103      	bne.n	80011fe <xQueueGenericSendFromISR+0x6a>
 80011f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d101      	bne.n	8001202 <xQueueGenericSendFromISR+0x6e>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <xQueueGenericSendFromISR+0x70>
 8001202:	2300      	movs	r3, #0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d10a      	bne.n	800121e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8001208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800120c:	f383 8811 	msr	BASEPRI, r3
 8001210:	f3bf 8f6f 	isb	sy
 8001214:	f3bf 8f4f 	dsb	sy
 8001218:	623b      	str	r3, [r7, #32]
    }
 800121a:	bf00      	nop
 800121c:	e7fe      	b.n	800121c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800121e:	f002 f9b5 	bl	800358c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8001222:	f3ef 8211 	mrs	r2, BASEPRI
 8001226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800122a:	f383 8811 	msr	BASEPRI, r3
 800122e:	f3bf 8f6f 	isb	sy
 8001232:	f3bf 8f4f 	dsb	sy
 8001236:	61fa      	str	r2, [r7, #28]
 8001238:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800123a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800123c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800123e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001246:	429a      	cmp	r2, r3
 8001248:	d302      	bcc.n	8001250 <xQueueGenericSendFromISR+0xbc>
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d13e      	bne.n	80012ce <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001252:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800125a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800125c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	68b9      	ldr	r1, [r7, #8]
 8001264:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001266:	f000 f9cc 	bl	8001602 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800126a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800126e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001272:	d112      	bne.n	800129a <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	2b00      	cmp	r3, #0
 800127a:	d025      	beq.n	80012c8 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800127c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800127e:	3324      	adds	r3, #36	; 0x24
 8001280:	4618      	mov	r0, r3
 8001282:	f000 ff09 	bl	8002098 <xTaskRemoveFromEventList>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d01d      	beq.n	80012c8 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d01a      	beq.n	80012c8 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	e016      	b.n	80012c8 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800129a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800129e:	2b7f      	cmp	r3, #127	; 0x7f
 80012a0:	d10a      	bne.n	80012b8 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80012a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012a6:	f383 8811 	msr	BASEPRI, r3
 80012aa:	f3bf 8f6f 	isb	sy
 80012ae:	f3bf 8f4f 	dsb	sy
 80012b2:	617b      	str	r3, [r7, #20]
    }
 80012b4:	bf00      	nop
 80012b6:	e7fe      	b.n	80012b6 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80012b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012bc:	3301      	adds	r3, #1
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	b25a      	sxtb	r2, r3
 80012c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80012c8:	2301      	movs	r3, #1
 80012ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80012cc:	e001      	b.n	80012d2 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012d4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80012dc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80012de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3740      	adds	r7, #64	; 0x40
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08c      	sub	sp, #48	; 0x30
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80012fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10a      	bne.n	8001318 <xQueueReceive+0x30>
        __asm volatile
 8001302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001306:	f383 8811 	msr	BASEPRI, r3
 800130a:	f3bf 8f6f 	isb	sy
 800130e:	f3bf 8f4f 	dsb	sy
 8001312:	623b      	str	r3, [r7, #32]
    }
 8001314:	bf00      	nop
 8001316:	e7fe      	b.n	8001316 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d103      	bne.n	8001326 <xQueueReceive+0x3e>
 800131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <xQueueReceive+0x42>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <xQueueReceive+0x44>
 800132a:	2300      	movs	r3, #0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d10a      	bne.n	8001346 <xQueueReceive+0x5e>
        __asm volatile
 8001330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001334:	f383 8811 	msr	BASEPRI, r3
 8001338:	f3bf 8f6f 	isb	sy
 800133c:	f3bf 8f4f 	dsb	sy
 8001340:	61fb      	str	r3, [r7, #28]
    }
 8001342:	bf00      	nop
 8001344:	e7fe      	b.n	8001344 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001346:	f001 f843 	bl	80023d0 <xTaskGetSchedulerState>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d102      	bne.n	8001356 <xQueueReceive+0x6e>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <xQueueReceive+0x72>
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <xQueueReceive+0x74>
 800135a:	2300      	movs	r3, #0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10a      	bne.n	8001376 <xQueueReceive+0x8e>
        __asm volatile
 8001360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001364:	f383 8811 	msr	BASEPRI, r3
 8001368:	f3bf 8f6f 	isb	sy
 800136c:	f3bf 8f4f 	dsb	sy
 8001370:	61bb      	str	r3, [r7, #24]
    }
 8001372:	bf00      	nop
 8001374:	e7fe      	b.n	8001374 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001376:	f002 f827 	bl	80033c8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800137a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	2b00      	cmp	r3, #0
 8001384:	d01f      	beq.n	80013c6 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001386:	68b9      	ldr	r1, [r7, #8]
 8001388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800138a:	f000 f9a4 	bl	80016d6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	1e5a      	subs	r2, r3, #1
 8001392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001394:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00f      	beq.n	80013be <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800139e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a0:	3310      	adds	r3, #16
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fe78 	bl	8002098 <xTaskRemoveFromEventList>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d007      	beq.n	80013be <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80013ae:	4b3d      	ldr	r3, [pc, #244]	; (80014a4 <xQueueReceive+0x1bc>)
 80013b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	f3bf 8f4f 	dsb	sy
 80013ba:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80013be:	f002 f833 	bl	8003428 <vPortExitCritical>
                return pdPASS;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e069      	b.n	800149a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d103      	bne.n	80013d4 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80013cc:	f002 f82c 	bl	8003428 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80013d0:	2300      	movs	r3, #0
 80013d2:	e062      	b.n	800149a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80013d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d106      	bne.n	80013e8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80013da:	f107 0310 	add.w	r3, r7, #16
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 febc 	bl	800215c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80013e4:	2301      	movs	r3, #1
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80013e8:	f002 f81e 	bl	8003428 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80013ec:	f000 fc36 	bl	8001c5c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80013f0:	f001 ffea 	bl	80033c8 <vPortEnterCritical>
 80013f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013fa:	b25b      	sxtb	r3, r3
 80013fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001400:	d103      	bne.n	800140a <xQueueReceive+0x122>
 8001402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800140a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001410:	b25b      	sxtb	r3, r3
 8001412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001416:	d103      	bne.n	8001420 <xQueueReceive+0x138>
 8001418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001420:	f002 f802 	bl	8003428 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001424:	1d3a      	adds	r2, r7, #4
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f000 feab 	bl	8002188 <xTaskCheckForTimeOut>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d123      	bne.n	8001480 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800143a:	f000 f9c4 	bl	80017c6 <prvIsQueueEmpty>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d017      	beq.n	8001474 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001446:	3324      	adds	r3, #36	; 0x24
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f000 fdd3 	bl	8001ff8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001454:	f000 f965 	bl	8001722 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001458:	f000 fc0e 	bl	8001c78 <xTaskResumeAll>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d189      	bne.n	8001376 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <xQueueReceive+0x1bc>)
 8001464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	f3bf 8f4f 	dsb	sy
 800146e:	f3bf 8f6f 	isb	sy
 8001472:	e780      	b.n	8001376 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001476:	f000 f954 	bl	8001722 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800147a:	f000 fbfd 	bl	8001c78 <xTaskResumeAll>
 800147e:	e77a      	b.n	8001376 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001482:	f000 f94e 	bl	8001722 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001486:	f000 fbf7 	bl	8001c78 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800148a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800148c:	f000 f99b 	bl	80017c6 <prvIsQueueEmpty>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	f43f af6f 	beq.w	8001376 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001498:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800149a:	4618      	mov	r0, r3
 800149c:	3730      	adds	r7, #48	; 0x30
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	e000ed04 	.word	0xe000ed04

080014a8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b090      	sub	sp, #64	; 0x40
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80014b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10a      	bne.n	80014d4 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 80014be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014c2:	f383 8811 	msr	BASEPRI, r3
 80014c6:	f3bf 8f6f 	isb	sy
 80014ca:	f3bf 8f4f 	dsb	sy
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80014d0:	bf00      	nop
 80014d2:	e7fe      	b.n	80014d2 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d103      	bne.n	80014e2 <xQueueReceiveFromISR+0x3a>
 80014da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <xQueueReceiveFromISR+0x3e>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <xQueueReceiveFromISR+0x40>
 80014e6:	2300      	movs	r3, #0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10a      	bne.n	8001502 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 80014ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f0:	f383 8811 	msr	BASEPRI, r3
 80014f4:	f3bf 8f6f 	isb	sy
 80014f8:	f3bf 8f4f 	dsb	sy
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80014fe:	bf00      	nop
 8001500:	e7fe      	b.n	8001500 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001502:	f002 f843 	bl	800358c <vPortValidateInterruptPriority>
        __asm volatile
 8001506:	f3ef 8211 	mrs	r2, BASEPRI
 800150a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800150e:	f383 8811 	msr	BASEPRI, r3
 8001512:	f3bf 8f6f 	isb	sy
 8001516:	f3bf 8f4f 	dsb	sy
 800151a:	623a      	str	r2, [r7, #32]
 800151c:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800151e:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001520:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001526:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800152a:	2b00      	cmp	r3, #0
 800152c:	d03e      	beq.n	80015ac <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800152e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001534:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800153c:	f000 f8cb 	bl	80016d6 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001542:	1e5a      	subs	r2, r3, #1
 8001544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001546:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8001548:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800154c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001550:	d112      	bne.n	8001578 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d025      	beq.n	80015a6 <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800155a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800155c:	3310      	adds	r3, #16
 800155e:	4618      	mov	r0, r3
 8001560:	f000 fd9a 	bl	8002098 <xTaskRemoveFromEventList>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d01d      	beq.n	80015a6 <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d01a      	beq.n	80015a6 <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	e016      	b.n	80015a6 <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8001578:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800157c:	2b7f      	cmp	r3, #127	; 0x7f
 800157e:	d10a      	bne.n	8001596 <xQueueReceiveFromISR+0xee>
        __asm volatile
 8001580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001584:	f383 8811 	msr	BASEPRI, r3
 8001588:	f3bf 8f6f 	isb	sy
 800158c:	f3bf 8f4f 	dsb	sy
 8001590:	61bb      	str	r3, [r7, #24]
    }
 8001592:	bf00      	nop
 8001594:	e7fe      	b.n	8001594 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8001596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800159a:	3301      	adds	r3, #1
 800159c:	b2db      	uxtb	r3, r3
 800159e:	b25a      	sxtb	r2, r3
 80015a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80015a6:	2301      	movs	r3, #1
 80015a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015aa:	e001      	b.n	80015b0 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b2:	617b      	str	r3, [r7, #20]
        __asm volatile
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f383 8811 	msr	BASEPRI, r3
    }
 80015ba:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80015bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3740      	adds	r7, #64	; 0x40
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b084      	sub	sp, #16
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10a      	bne.n	80015ea <uxQueueMessagesWaiting+0x24>
        __asm volatile
 80015d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015d8:	f383 8811 	msr	BASEPRI, r3
 80015dc:	f3bf 8f6f 	isb	sy
 80015e0:	f3bf 8f4f 	dsb	sy
 80015e4:	60bb      	str	r3, [r7, #8]
    }
 80015e6:	bf00      	nop
 80015e8:	e7fe      	b.n	80015e8 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80015ea:	f001 feed 	bl	80033c8 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f2:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80015f4:	f001 ff18 	bl	8003428 <vPortExitCritical>

    return uxReturn;
 80015f8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	60f8      	str	r0, [r7, #12]
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001616:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10d      	bne.n	800163c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d14d      	bne.n	80016c4 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	4618      	mov	r0, r3
 800162e:	f000 feed 	bl	800240c <xTaskPriorityDisinherit>
 8001632:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	e043      	b.n	80016c4 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d119      	bne.n	8001676 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6858      	ldr	r0, [r3, #4]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	461a      	mov	r2, r3
 800164c:	68b9      	ldr	r1, [r7, #8]
 800164e:	f003 f987 	bl	8004960 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	441a      	add	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	429a      	cmp	r2, r3
 800166a:	d32b      	bcc.n	80016c4 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	e026      	b.n	80016c4 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	68d8      	ldr	r0, [r3, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	461a      	mov	r2, r3
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	f003 f96d 	bl	8004960 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	425b      	negs	r3, r3
 8001690:	441a      	add	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d207      	bcs.n	80016b2 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	425b      	negs	r3, r3
 80016ac:	441a      	add	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d105      	bne.n	80016c4 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d002      	beq.n	80016c4 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80016cc:	697b      	ldr	r3, [r7, #20]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d018      	beq.n	800171a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	441a      	add	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d303      	bcc.n	800170a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68d9      	ldr	r1, [r3, #12]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	461a      	mov	r2, r3
 8001714:	6838      	ldr	r0, [r7, #0]
 8001716:	f003 f923 	bl	8004960 <memcpy>
    }
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800172a:	f001 fe4d 	bl	80033c8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001734:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001736:	e011      	b.n	800175c <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	2b00      	cmp	r3, #0
 800173e:	d012      	beq.n	8001766 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3324      	adds	r3, #36	; 0x24
 8001744:	4618      	mov	r0, r3
 8001746:	f000 fca7 	bl	8002098 <xTaskRemoveFromEventList>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8001750:	f000 fd80 	bl	8002254 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	3b01      	subs	r3, #1
 8001758:	b2db      	uxtb	r3, r3
 800175a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800175c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001760:	2b00      	cmp	r3, #0
 8001762:	dce9      	bgt.n	8001738 <prvUnlockQueue+0x16>
 8001764:	e000      	b.n	8001768 <prvUnlockQueue+0x46>
                        break;
 8001766:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	22ff      	movs	r2, #255	; 0xff
 800176c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001770:	f001 fe5a 	bl	8003428 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001774:	f001 fe28 	bl	80033c8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800177e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001780:	e011      	b.n	80017a6 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d012      	beq.n	80017b0 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3310      	adds	r3, #16
 800178e:	4618      	mov	r0, r3
 8001790:	f000 fc82 	bl	8002098 <xTaskRemoveFromEventList>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800179a:	f000 fd5b 	bl	8002254 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800179e:	7bbb      	ldrb	r3, [r7, #14]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80017a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	dce9      	bgt.n	8001782 <prvUnlockQueue+0x60>
 80017ae:	e000      	b.n	80017b2 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80017b0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	22ff      	movs	r2, #255	; 0xff
 80017b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80017ba:	f001 fe35 	bl	8003428 <vPortExitCritical>
}
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b084      	sub	sp, #16
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80017ce:	f001 fdfb 	bl	80033c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80017da:	2301      	movs	r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	e001      	b.n	80017e4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80017e4:	f001 fe20 	bl	8003428 <vPortExitCritical>

    return xReturn;
 80017e8:	68fb      	ldr	r3, [r7, #12]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80017fa:	f001 fde5 	bl	80033c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001806:	429a      	cmp	r2, r3
 8001808:	d102      	bne.n	8001810 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800180a:	2301      	movs	r3, #1
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	e001      	b.n	8001814 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001814:	f001 fe08 	bl	8003428 <vPortExitCritical>

    return xReturn;
 8001818:	68fb      	ldr	r3, [r7, #12]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8001822:	b480      	push	{r7}
 8001824:	b087      	sub	sp, #28
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10a      	bne.n	800184a <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8001834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001838:	f383 8811 	msr	BASEPRI, r3
 800183c:	f3bf 8f6f 	isb	sy
 8001840:	f3bf 8f4f 	dsb	sy
 8001844:	60fb      	str	r3, [r7, #12]
    }
 8001846:	bf00      	nop
 8001848:	e7fe      	b.n	8001848 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001852:	429a      	cmp	r2, r3
 8001854:	d102      	bne.n	800185c <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8001856:	2301      	movs	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	e001      	b.n	8001860 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001860:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001862:	4618      	mov	r0, r3
 8001864:	371c      	adds	r7, #28
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	e014      	b.n	80018aa <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001880:	4a0f      	ldr	r2, [pc, #60]	; (80018c0 <vQueueAddToRegistry+0x50>)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10b      	bne.n	80018a4 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <vQueueAddToRegistry+0x50>)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8001896:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <vQueueAddToRegistry+0x50>)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	4413      	add	r3, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80018a2:	e006      	b.n	80018b2 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	3301      	adds	r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2b07      	cmp	r3, #7
 80018ae:	d9e7      	bls.n	8001880 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000100 	.word	0x20000100

080018c4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80018d4:	f001 fd78 	bl	80033c8 <vPortEnterCritical>
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e4:	d103      	bne.n	80018ee <vQueueWaitForMessageRestricted+0x2a>
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fa:	d103      	bne.n	8001904 <vQueueWaitForMessageRestricted+0x40>
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001904:	f001 fd90 	bl	8003428 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190c:	2b00      	cmp	r3, #0
 800190e:	d106      	bne.n	800191e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	3324      	adds	r3, #36	; 0x24
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	68b9      	ldr	r1, [r7, #8]
 8001918:	4618      	mov	r0, r3
 800191a:	f000 fb91 	bl	8002040 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800191e:	6978      	ldr	r0, [r7, #20]
 8001920:	f7ff feff 	bl	8001722 <prvUnlockQueue>
    }
 8001924:	bf00      	nop
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800192c:	b580      	push	{r7, lr}
 800192e:	b08c      	sub	sp, #48	; 0x30
 8001930:	af04      	add	r7, sp, #16
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	4613      	mov	r3, r2
 800193a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4618      	mov	r0, r3
 8001942:	f001 fe63 	bl	800360c <pvPortMalloc>
 8001946:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00e      	beq.n	800196c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800194e:	2058      	movs	r0, #88	; 0x58
 8001950:	f001 fe5c 	bl	800360c <pvPortMalloc>
 8001954:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	631a      	str	r2, [r3, #48]	; 0x30
 8001962:	e005      	b.n	8001970 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001964:	6978      	ldr	r0, [r7, #20]
 8001966:	f001 ff31 	bl	80037cc <vPortFree>
 800196a:	e001      	b.n	8001970 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d013      	beq.n	800199e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001976:	88fa      	ldrh	r2, [r7, #6]
 8001978:	2300      	movs	r3, #0
 800197a:	9303      	str	r3, [sp, #12]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	9302      	str	r3, [sp, #8]
 8001980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	68b9      	ldr	r1, [r7, #8]
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 f80e 	bl	80019ae <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001992:	69f8      	ldr	r0, [r7, #28]
 8001994:	f000 f8a2 	bl	8001adc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001998:	2301      	movs	r3, #1
 800199a:	61bb      	str	r3, [r7, #24]
 800199c:	e002      	b.n	80019a4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295
 80019a2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80019a4:	69bb      	ldr	r3, [r7, #24]
    }
 80019a6:	4618      	mov	r0, r3
 80019a8:	3720      	adds	r7, #32
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b088      	sub	sp, #32
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80019bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	461a      	mov	r2, r3
 80019c6:	21a5      	movs	r1, #165	; 0xa5
 80019c8:	f002 ffd8 	bl	800497c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80019cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019d6:	3b01      	subs	r3, #1
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	f023 0307 	bic.w	r3, r3, #7
 80019e4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00a      	beq.n	8001a06 <prvInitialiseNewTask+0x58>
        __asm volatile
 80019f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019f4:	f383 8811 	msr	BASEPRI, r3
 80019f8:	f3bf 8f6f 	isb	sy
 80019fc:	f3bf 8f4f 	dsb	sy
 8001a00:	617b      	str	r3, [r7, #20]
    }
 8001a02:	bf00      	nop
 8001a04:	e7fe      	b.n	8001a04 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d01f      	beq.n	8001a4c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	e012      	b.n	8001a38 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	4413      	add	r3, r2
 8001a18:	7819      	ldrb	r1, [r3, #0]
 8001a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	4413      	add	r3, r2
 8001a20:	3334      	adds	r3, #52	; 0x34
 8001a22:	460a      	mov	r2, r1
 8001a24:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d006      	beq.n	8001a40 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3301      	adds	r3, #1
 8001a36:	61fb      	str	r3, [r7, #28]
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	2b09      	cmp	r3, #9
 8001a3c:	d9e9      	bls.n	8001a12 <prvInitialiseNewTask+0x64>
 8001a3e:	e000      	b.n	8001a42 <prvInitialiseNewTask+0x94>
            {
                break;
 8001a40:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001a4a:	e003      	b.n	8001a54 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d901      	bls.n	8001a5e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a62:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a68:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a72:	3304      	adds	r3, #4
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff f910 	bl	8000c9a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7c:	3318      	adds	r3, #24
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff f90b 	bl	8000c9a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a88:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8c:	f1c3 0205 	rsb	r2, r3, #5
 8001a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a92:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9c:	3350      	adds	r3, #80	; 0x50
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 ff6a 	bl	800497c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aaa:	3354      	adds	r3, #84	; 0x54
 8001aac:	2201      	movs	r2, #1
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f002 ff63 	bl	800497c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	68f9      	ldr	r1, [r7, #12]
 8001aba:	69b8      	ldr	r0, [r7, #24]
 8001abc:	f001 fb56 	bl	800316c <pxPortInitialiseStack>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ad0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001ad2:	bf00      	nop
 8001ad4:	3720      	adds	r7, #32
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001ae4:	f001 fc70 	bl	80033c8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001ae8:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <prvAddNewTaskToReadyList+0xc0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	3301      	adds	r3, #1
 8001aee:	4a2b      	ldr	r2, [pc, #172]	; (8001b9c <prvAddNewTaskToReadyList+0xc0>)
 8001af0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001af2:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <prvAddNewTaskToReadyList+0xc4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d109      	bne.n	8001b0e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001afa:	4a29      	ldr	r2, [pc, #164]	; (8001ba0 <prvAddNewTaskToReadyList+0xc4>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001b00:	4b26      	ldr	r3, [pc, #152]	; (8001b9c <prvAddNewTaskToReadyList+0xc0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d110      	bne.n	8001b2a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001b08:	f000 fbc8 	bl	800229c <prvInitialiseTaskLists>
 8001b0c:	e00d      	b.n	8001b2a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001b0e:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <prvAddNewTaskToReadyList+0xc8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d109      	bne.n	8001b2a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001b16:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <prvAddNewTaskToReadyList+0xc4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d802      	bhi.n	8001b2a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001b24:	4a1e      	ldr	r2, [pc, #120]	; (8001ba0 <prvAddNewTaskToReadyList+0xc4>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001b2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ba8 <prvAddNewTaskToReadyList+0xcc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	4a1d      	ldr	r2, [pc, #116]	; (8001ba8 <prvAddNewTaskToReadyList+0xcc>)
 8001b32:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001b34:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <prvAddNewTaskToReadyList+0xcc>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	2201      	movs	r2, #1
 8001b42:	409a      	lsls	r2, r3
 8001b44:	4b19      	ldr	r3, [pc, #100]	; (8001bac <prvAddNewTaskToReadyList+0xd0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	4a18      	ldr	r2, [pc, #96]	; (8001bac <prvAddNewTaskToReadyList+0xd0>)
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4a15      	ldr	r2, [pc, #84]	; (8001bb0 <prvAddNewTaskToReadyList+0xd4>)
 8001b5c:	441a      	add	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3304      	adds	r3, #4
 8001b62:	4619      	mov	r1, r3
 8001b64:	4610      	mov	r0, r2
 8001b66:	f7ff f8a5 	bl	8000cb4 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001b6a:	f001 fc5d 	bl	8003428 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <prvAddNewTaskToReadyList+0xc8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00e      	beq.n	8001b94 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <prvAddNewTaskToReadyList+0xc4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d207      	bcs.n	8001b94 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <prvAddNewTaskToReadyList+0xd8>)
 8001b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	f3bf 8f4f 	dsb	sy
 8001b90:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000218 	.word	0x20000218
 8001ba0:	20000140 	.word	0x20000140
 8001ba4:	20000224 	.word	0x20000224
 8001ba8:	20000234 	.word	0x20000234
 8001bac:	20000220 	.word	0x20000220
 8001bb0:	20000144 	.word	0x20000144
 8001bb4:	e000ed04 	.word	0xe000ed04

08001bb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <vTaskStartScheduler+0x88>)
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	2282      	movs	r2, #130	; 0x82
 8001bca:	491e      	ldr	r1, [pc, #120]	; (8001c44 <vTaskStartScheduler+0x8c>)
 8001bcc:	481e      	ldr	r0, [pc, #120]	; (8001c48 <vTaskStartScheduler+0x90>)
 8001bce:	f7ff fead 	bl	800192c <xTaskCreate>
 8001bd2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d102      	bne.n	8001be0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001bda:	f000 ff59 	bl	8002a90 <xTimerCreateTimerTask>
 8001bde:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d116      	bne.n	8001c14 <vTaskStartScheduler+0x5c>
        __asm volatile
 8001be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bea:	f383 8811 	msr	BASEPRI, r3
 8001bee:	f3bf 8f6f 	isb	sy
 8001bf2:	f3bf 8f4f 	dsb	sy
 8001bf6:	60bb      	str	r3, [r7, #8]
    }
 8001bf8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001bfa:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <vTaskStartScheduler+0x94>)
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001c00:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <vTaskStartScheduler+0x98>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <vTaskStartScheduler+0x9c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001c0e:	f001 fb39 	bl	8003284 <xPortStartScheduler>
 8001c12:	e00e      	b.n	8001c32 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1a:	d10a      	bne.n	8001c32 <vTaskStartScheduler+0x7a>
        __asm volatile
 8001c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c20:	f383 8811 	msr	BASEPRI, r3
 8001c24:	f3bf 8f6f 	isb	sy
 8001c28:	f3bf 8f4f 	dsb	sy
 8001c2c:	607b      	str	r3, [r7, #4]
    }
 8001c2e:	bf00      	nop
 8001c30:	e7fe      	b.n	8001c30 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <vTaskStartScheduler+0xa0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
}
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000023c 	.word	0x2000023c
 8001c44:	08005404 	.word	0x08005404
 8001c48:	0800226d 	.word	0x0800226d
 8001c4c:	20000238 	.word	0x20000238
 8001c50:	20000224 	.word	0x20000224
 8001c54:	2000021c 	.word	0x2000021c
 8001c58:	2000001c 	.word	0x2000001c

08001c5c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <vTaskSuspendAll+0x18>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	3301      	adds	r3, #1
 8001c66:	4a03      	ldr	r2, [pc, #12]	; (8001c74 <vTaskSuspendAll+0x18>)
 8001c68:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	20000240 	.word	0x20000240

08001c78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001c86:	4b41      	ldr	r3, [pc, #260]	; (8001d8c <xTaskResumeAll+0x114>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10a      	bne.n	8001ca4 <xTaskResumeAll+0x2c>
        __asm volatile
 8001c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c92:	f383 8811 	msr	BASEPRI, r3
 8001c96:	f3bf 8f6f 	isb	sy
 8001c9a:	f3bf 8f4f 	dsb	sy
 8001c9e:	603b      	str	r3, [r7, #0]
    }
 8001ca0:	bf00      	nop
 8001ca2:	e7fe      	b.n	8001ca2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001ca4:	f001 fb90 	bl	80033c8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001ca8:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <xTaskResumeAll+0x114>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	4a37      	ldr	r2, [pc, #220]	; (8001d8c <xTaskResumeAll+0x114>)
 8001cb0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cb2:	4b36      	ldr	r3, [pc, #216]	; (8001d8c <xTaskResumeAll+0x114>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d161      	bne.n	8001d7e <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001cba:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <xTaskResumeAll+0x118>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d05d      	beq.n	8001d7e <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001cc2:	e02e      	b.n	8001d22 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cc4:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <xTaskResumeAll+0x11c>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	3318      	adds	r3, #24
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff f84c 	bl	8000d6e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff f847 	bl	8000d6e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	4b2b      	ldr	r3, [pc, #172]	; (8001d98 <xTaskResumeAll+0x120>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	4a2a      	ldr	r2, [pc, #168]	; (8001d98 <xTaskResumeAll+0x120>)
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4a27      	ldr	r2, [pc, #156]	; (8001d9c <xTaskResumeAll+0x124>)
 8001d00:	441a      	add	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3304      	adds	r3, #4
 8001d06:	4619      	mov	r1, r3
 8001d08:	4610      	mov	r0, r2
 8001d0a:	f7fe ffd3 	bl	8000cb4 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d12:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <xTaskResumeAll+0x128>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d302      	bcc.n	8001d22 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8001d1c:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <xTaskResumeAll+0x12c>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d22:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <xTaskResumeAll+0x11c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1cc      	bne.n	8001cc4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001d30:	f000 fb32 	bl	8002398 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001d34:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <xTaskResumeAll+0x130>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d010      	beq.n	8001d62 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001d40:	f000 f846 	bl	8001dd0 <xTaskIncrementTick>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8001d4a:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <xTaskResumeAll+0x12c>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f1      	bne.n	8001d40 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <xTaskResumeAll+0x130>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <xTaskResumeAll+0x12c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <xTaskResumeAll+0x134>)
 8001d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	f3bf 8f4f 	dsb	sy
 8001d7a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001d7e:	f001 fb53 	bl	8003428 <vPortExitCritical>

    return xAlreadyYielded;
 8001d82:	68bb      	ldr	r3, [r7, #8]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000240 	.word	0x20000240
 8001d90:	20000218 	.word	0x20000218
 8001d94:	200001d8 	.word	0x200001d8
 8001d98:	20000220 	.word	0x20000220
 8001d9c:	20000144 	.word	0x20000144
 8001da0:	20000140 	.word	0x20000140
 8001da4:	2000022c 	.word	0x2000022c
 8001da8:	20000228 	.word	0x20000228
 8001dac:	e000ed04 	.word	0xe000ed04

08001db0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001db6:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <xTaskGetTickCount+0x1c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001dbc:	687b      	ldr	r3, [r7, #4]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	2000021c 	.word	0x2000021c

08001dd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001dda:	4b4e      	ldr	r3, [pc, #312]	; (8001f14 <xTaskIncrementTick+0x144>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f040 808e 	bne.w	8001f00 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001de4:	4b4c      	ldr	r3, [pc, #304]	; (8001f18 <xTaskIncrementTick+0x148>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	3301      	adds	r3, #1
 8001dea:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001dec:	4a4a      	ldr	r2, [pc, #296]	; (8001f18 <xTaskIncrementTick+0x148>)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d120      	bne.n	8001e3a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001df8:	4b48      	ldr	r3, [pc, #288]	; (8001f1c <xTaskIncrementTick+0x14c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00a      	beq.n	8001e18 <xTaskIncrementTick+0x48>
        __asm volatile
 8001e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e06:	f383 8811 	msr	BASEPRI, r3
 8001e0a:	f3bf 8f6f 	isb	sy
 8001e0e:	f3bf 8f4f 	dsb	sy
 8001e12:	603b      	str	r3, [r7, #0]
    }
 8001e14:	bf00      	nop
 8001e16:	e7fe      	b.n	8001e16 <xTaskIncrementTick+0x46>
 8001e18:	4b40      	ldr	r3, [pc, #256]	; (8001f1c <xTaskIncrementTick+0x14c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <xTaskIncrementTick+0x150>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a3e      	ldr	r2, [pc, #248]	; (8001f1c <xTaskIncrementTick+0x14c>)
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	4a3e      	ldr	r2, [pc, #248]	; (8001f20 <xTaskIncrementTick+0x150>)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	4b3d      	ldr	r3, [pc, #244]	; (8001f24 <xTaskIncrementTick+0x154>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	3301      	adds	r3, #1
 8001e32:	4a3c      	ldr	r2, [pc, #240]	; (8001f24 <xTaskIncrementTick+0x154>)
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	f000 faaf 	bl	8002398 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001e3a:	4b3b      	ldr	r3, [pc, #236]	; (8001f28 <xTaskIncrementTick+0x158>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d348      	bcc.n	8001ed6 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e44:	4b35      	ldr	r3, [pc, #212]	; (8001f1c <xTaskIncrementTick+0x14c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d104      	bne.n	8001e58 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e4e:	4b36      	ldr	r3, [pc, #216]	; (8001f28 <xTaskIncrementTick+0x158>)
 8001e50:	f04f 32ff 	mov.w	r2, #4294967295
 8001e54:	601a      	str	r2, [r3, #0]
                    break;
 8001e56:	e03e      	b.n	8001ed6 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e58:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <xTaskIncrementTick+0x14c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d203      	bcs.n	8001e78 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001e70:	4a2d      	ldr	r2, [pc, #180]	; (8001f28 <xTaskIncrementTick+0x158>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001e76:	e02e      	b.n	8001ed6 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe ff76 	bl	8000d6e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d004      	beq.n	8001e94 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	3318      	adds	r3, #24
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe ff6d 	bl	8000d6e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	2201      	movs	r2, #1
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <xTaskIncrementTick+0x15c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	4a22      	ldr	r2, [pc, #136]	; (8001f2c <xTaskIncrementTick+0x15c>)
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4a1f      	ldr	r2, [pc, #124]	; (8001f30 <xTaskIncrementTick+0x160>)
 8001eb4:	441a      	add	r2, r3
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	f7fe fef9 	bl	8000cb4 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec6:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <xTaskIncrementTick+0x164>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d3b9      	bcc.n	8001e44 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ed4:	e7b6      	b.n	8001e44 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001ed6:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <xTaskIncrementTick+0x164>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001edc:	4914      	ldr	r1, [pc, #80]	; (8001f30 <xTaskIncrementTick+0x160>)
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d901      	bls.n	8001ef2 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001ef2:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <xTaskIncrementTick+0x168>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d007      	beq.n	8001f0a <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8001efa:	2301      	movs	r3, #1
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	e004      	b.n	8001f0a <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001f00:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <xTaskIncrementTick+0x16c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	3301      	adds	r3, #1
 8001f06:	4a0d      	ldr	r2, [pc, #52]	; (8001f3c <xTaskIncrementTick+0x16c>)
 8001f08:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001f0a:	697b      	ldr	r3, [r7, #20]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000240 	.word	0x20000240
 8001f18:	2000021c 	.word	0x2000021c
 8001f1c:	200001d0 	.word	0x200001d0
 8001f20:	200001d4 	.word	0x200001d4
 8001f24:	20000230 	.word	0x20000230
 8001f28:	20000238 	.word	0x20000238
 8001f2c:	20000220 	.word	0x20000220
 8001f30:	20000144 	.word	0x20000144
 8001f34:	20000140 	.word	0x20000140
 8001f38:	2000022c 	.word	0x2000022c
 8001f3c:	20000228 	.word	0x20000228

08001f40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001f40:	b480      	push	{r7}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001f46:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <vTaskSwitchContext+0xa4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001f4e:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <vTaskSwitchContext+0xa8>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001f54:	e03f      	b.n	8001fd6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8001f56:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <vTaskSwitchContext+0xa8>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f5c:	4b23      	ldr	r3, [pc, #140]	; (8001fec <vTaskSwitchContext+0xac>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	fab3 f383 	clz	r3, r3
 8001f68:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001f6a:	7afb      	ldrb	r3, [r7, #11]
 8001f6c:	f1c3 031f 	rsb	r3, r3, #31
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	491f      	ldr	r1, [pc, #124]	; (8001ff0 <vTaskSwitchContext+0xb0>)
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	440b      	add	r3, r1
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10a      	bne.n	8001f9c <vTaskSwitchContext+0x5c>
        __asm volatile
 8001f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f8a:	f383 8811 	msr	BASEPRI, r3
 8001f8e:	f3bf 8f6f 	isb	sy
 8001f92:	f3bf 8f4f 	dsb	sy
 8001f96:	607b      	str	r3, [r7, #4]
    }
 8001f98:	bf00      	nop
 8001f9a:	e7fe      	b.n	8001f9a <vTaskSwitchContext+0x5a>
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <vTaskSwitchContext+0xb0>)
 8001fa8:	4413      	add	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	3308      	adds	r3, #8
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d104      	bne.n	8001fcc <vTaskSwitchContext+0x8c>
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	4a08      	ldr	r2, [pc, #32]	; (8001ff4 <vTaskSwitchContext+0xb4>)
 8001fd4:	6013      	str	r3, [r2, #0]
}
 8001fd6:	bf00      	nop
 8001fd8:	371c      	adds	r7, #28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	20000240 	.word	0x20000240
 8001fe8:	2000022c 	.word	0x2000022c
 8001fec:	20000220 	.word	0x20000220
 8001ff0:	20000144 	.word	0x20000144
 8001ff4:	20000140 	.word	0x20000140

08001ff8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10a      	bne.n	800201e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200c:	f383 8811 	msr	BASEPRI, r3
 8002010:	f3bf 8f6f 	isb	sy
 8002014:	f3bf 8f4f 	dsb	sy
 8002018:	60fb      	str	r3, [r7, #12]
    }
 800201a:	bf00      	nop
 800201c:	e7fe      	b.n	800201c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800201e:	4b07      	ldr	r3, [pc, #28]	; (800203c <vTaskPlaceOnEventList+0x44>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3318      	adds	r3, #24
 8002024:	4619      	mov	r1, r3
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7fe fe68 	bl	8000cfc <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800202c:	2101      	movs	r1, #1
 800202e:	6838      	ldr	r0, [r7, #0]
 8002030:	f000 fcc8 	bl	80029c4 <prvAddCurrentTaskToDelayedList>
}
 8002034:	bf00      	nop
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000140 	.word	0x20000140

08002040 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10a      	bne.n	8002068 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002056:	f383 8811 	msr	BASEPRI, r3
 800205a:	f3bf 8f6f 	isb	sy
 800205e:	f3bf 8f4f 	dsb	sy
 8002062:	617b      	str	r3, [r7, #20]
    }
 8002064:	bf00      	nop
 8002066:	e7fe      	b.n	8002066 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <vTaskPlaceOnEventListRestricted+0x54>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	3318      	adds	r3, #24
 800206e:	4619      	mov	r1, r3
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f7fe fe1f 	bl	8000cb4 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d002      	beq.n	8002082 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800207c:	f04f 33ff 	mov.w	r3, #4294967295
 8002080:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	68b8      	ldr	r0, [r7, #8]
 8002086:	f000 fc9d 	bl	80029c4 <prvAddCurrentTaskToDelayedList>
    }
 800208a:	bf00      	nop
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000140 	.word	0x20000140

08002098 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10a      	bne.n	80020c4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80020ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b2:	f383 8811 	msr	BASEPRI, r3
 80020b6:	f3bf 8f6f 	isb	sy
 80020ba:	f3bf 8f4f 	dsb	sy
 80020be:	60fb      	str	r3, [r7, #12]
    }
 80020c0:	bf00      	nop
 80020c2:	e7fe      	b.n	80020c2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	3318      	adds	r3, #24
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fe50 	bl	8000d6e <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <xTaskRemoveFromEventList+0xac>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d11c      	bne.n	8002110 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	3304      	adds	r3, #4
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fe47 	bl	8000d6e <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e4:	2201      	movs	r2, #1
 80020e6:	409a      	lsls	r2, r3
 80020e8:	4b17      	ldr	r3, [pc, #92]	; (8002148 <xTaskRemoveFromEventList+0xb0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	4a16      	ldr	r2, [pc, #88]	; (8002148 <xTaskRemoveFromEventList+0xb0>)
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4a13      	ldr	r2, [pc, #76]	; (800214c <xTaskRemoveFromEventList+0xb4>)
 8002100:	441a      	add	r2, r3
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	3304      	adds	r3, #4
 8002106:	4619      	mov	r1, r3
 8002108:	4610      	mov	r0, r2
 800210a:	f7fe fdd3 	bl	8000cb4 <vListInsertEnd>
 800210e:	e005      	b.n	800211c <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	3318      	adds	r3, #24
 8002114:	4619      	mov	r1, r3
 8002116:	480e      	ldr	r0, [pc, #56]	; (8002150 <xTaskRemoveFromEventList+0xb8>)
 8002118:	f7fe fdcc 	bl	8000cb4 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <xTaskRemoveFromEventList+0xbc>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002126:	429a      	cmp	r2, r3
 8002128:	d905      	bls.n	8002136 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800212a:	2301      	movs	r3, #1
 800212c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <xTaskRemoveFromEventList+0xc0>)
 8002130:	2201      	movs	r2, #1
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	e001      	b.n	800213a <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800213a:	697b      	ldr	r3, [r7, #20]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000240 	.word	0x20000240
 8002148:	20000220 	.word	0x20000220
 800214c:	20000144 	.word	0x20000144
 8002150:	200001d8 	.word	0x200001d8
 8002154:	20000140 	.word	0x20000140
 8002158:	2000022c 	.word	0x2000022c

0800215c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <vTaskInternalSetTimeOutState+0x24>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <vTaskInternalSetTimeOutState+0x28>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	605a      	str	r2, [r3, #4]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	20000230 	.word	0x20000230
 8002184:	2000021c 	.word	0x2000021c

08002188 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10a      	bne.n	80021ae <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800219c:	f383 8811 	msr	BASEPRI, r3
 80021a0:	f3bf 8f6f 	isb	sy
 80021a4:	f3bf 8f4f 	dsb	sy
 80021a8:	613b      	str	r3, [r7, #16]
    }
 80021aa:	bf00      	nop
 80021ac:	e7fe      	b.n	80021ac <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10a      	bne.n	80021ca <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80021b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b8:	f383 8811 	msr	BASEPRI, r3
 80021bc:	f3bf 8f6f 	isb	sy
 80021c0:	f3bf 8f4f 	dsb	sy
 80021c4:	60fb      	str	r3, [r7, #12]
    }
 80021c6:	bf00      	nop
 80021c8:	e7fe      	b.n	80021c8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80021ca:	f001 f8fd 	bl	80033c8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80021ce:	4b1f      	ldr	r3, [pc, #124]	; (800224c <xTaskCheckForTimeOut+0xc4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e6:	d102      	bne.n	80021ee <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
 80021ec:	e026      	b.n	800223c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4b17      	ldr	r3, [pc, #92]	; (8002250 <xTaskCheckForTimeOut+0xc8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d00a      	beq.n	8002210 <xTaskCheckForTimeOut+0x88>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	429a      	cmp	r2, r3
 8002202:	d305      	bcc.n	8002210 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002204:	2301      	movs	r3, #1
 8002206:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	e015      	b.n	800223c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	429a      	cmp	r2, r3
 8002218:	d20b      	bcs.n	8002232 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	1ad2      	subs	r2, r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff ff98 	bl	800215c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
 8002230:	e004      	b.n	800223c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002238:	2301      	movs	r3, #1
 800223a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800223c:	f001 f8f4 	bl	8003428 <vPortExitCritical>

    return xReturn;
 8002240:	69fb      	ldr	r3, [r7, #28]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3720      	adds	r7, #32
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	2000021c 	.word	0x2000021c
 8002250:	20000230 	.word	0x20000230

08002254 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002258:	4b03      	ldr	r3, [pc, #12]	; (8002268 <vTaskMissedYield+0x14>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]
}
 800225e:	bf00      	nop
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	2000022c 	.word	0x2000022c

0800226c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002274:	f000 f852 	bl	800231c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <prvIdleTask+0x28>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d9f9      	bls.n	8002274 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <prvIdleTask+0x2c>)
 8002282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	f3bf 8f4f 	dsb	sy
 800228c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002290:	e7f0      	b.n	8002274 <prvIdleTask+0x8>
 8002292:	bf00      	nop
 8002294:	20000144 	.word	0x20000144
 8002298:	e000ed04 	.word	0xe000ed04

0800229c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80022a2:	2300      	movs	r3, #0
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	e00c      	b.n	80022c2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <prvInitialiseTaskLists+0x60>)
 80022b4:	4413      	add	r3, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fccf 	bl	8000c5a <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3301      	adds	r3, #1
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d9ef      	bls.n	80022a8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80022c8:	480d      	ldr	r0, [pc, #52]	; (8002300 <prvInitialiseTaskLists+0x64>)
 80022ca:	f7fe fcc6 	bl	8000c5a <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80022ce:	480d      	ldr	r0, [pc, #52]	; (8002304 <prvInitialiseTaskLists+0x68>)
 80022d0:	f7fe fcc3 	bl	8000c5a <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80022d4:	480c      	ldr	r0, [pc, #48]	; (8002308 <prvInitialiseTaskLists+0x6c>)
 80022d6:	f7fe fcc0 	bl	8000c5a <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80022da:	480c      	ldr	r0, [pc, #48]	; (800230c <prvInitialiseTaskLists+0x70>)
 80022dc:	f7fe fcbd 	bl	8000c5a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80022e0:	480b      	ldr	r0, [pc, #44]	; (8002310 <prvInitialiseTaskLists+0x74>)
 80022e2:	f7fe fcba 	bl	8000c5a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <prvInitialiseTaskLists+0x78>)
 80022e8:	4a05      	ldr	r2, [pc, #20]	; (8002300 <prvInitialiseTaskLists+0x64>)
 80022ea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <prvInitialiseTaskLists+0x7c>)
 80022ee:	4a05      	ldr	r2, [pc, #20]	; (8002304 <prvInitialiseTaskLists+0x68>)
 80022f0:	601a      	str	r2, [r3, #0]
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000144 	.word	0x20000144
 8002300:	200001a8 	.word	0x200001a8
 8002304:	200001bc 	.word	0x200001bc
 8002308:	200001d8 	.word	0x200001d8
 800230c:	200001ec 	.word	0x200001ec
 8002310:	20000204 	.word	0x20000204
 8002314:	200001d0 	.word	0x200001d0
 8002318:	200001d4 	.word	0x200001d4

0800231c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002322:	e019      	b.n	8002358 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002324:	f001 f850 	bl	80033c8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002328:	4b10      	ldr	r3, [pc, #64]	; (800236c <prvCheckTasksWaitingTermination+0x50>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3304      	adds	r3, #4
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe fd1a 	bl	8000d6e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800233a:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <prvCheckTasksWaitingTermination+0x54>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3b01      	subs	r3, #1
 8002340:	4a0b      	ldr	r2, [pc, #44]	; (8002370 <prvCheckTasksWaitingTermination+0x54>)
 8002342:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <prvCheckTasksWaitingTermination+0x58>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3b01      	subs	r3, #1
 800234a:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <prvCheckTasksWaitingTermination+0x58>)
 800234c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800234e:	f001 f86b 	bl	8003428 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f810 	bl	8002378 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <prvCheckTasksWaitingTermination+0x58>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1e1      	bne.n	8002324 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	200001ec 	.word	0x200001ec
 8002370:	20000218 	.word	0x20000218
 8002374:	20000200 	.word	0x20000200

08002378 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	4618      	mov	r0, r3
 8002386:	f001 fa21 	bl	80037cc <vPortFree>
                vPortFree( pxTCB );
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f001 fa1e 	bl	80037cc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800239c:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <prvResetNextTaskUnblockTime+0x30>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d104      	bne.n	80023b0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <prvResetNextTaskUnblockTime+0x34>)
 80023a8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80023ae:	e005      	b.n	80023bc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <prvResetNextTaskUnblockTime+0x30>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <prvResetNextTaskUnblockTime+0x34>)
 80023ba:	6013      	str	r3, [r2, #0]
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	200001d0 	.word	0x200001d0
 80023cc:	20000238 	.word	0x20000238

080023d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <xTaskGetSchedulerState+0x34>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d102      	bne.n	80023e4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80023de:	2301      	movs	r3, #1
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	e008      	b.n	80023f6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <xTaskGetSchedulerState+0x38>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d102      	bne.n	80023f2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80023ec:	2302      	movs	r3, #2
 80023ee:	607b      	str	r3, [r7, #4]
 80023f0:	e001      	b.n	80023f6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80023f6:	687b      	ldr	r3, [r7, #4]
    }
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	20000224 	.word	0x20000224
 8002408:	20000240 	.word	0x20000240

0800240c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d063      	beq.n	80024ea <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002422:	4b34      	ldr	r3, [pc, #208]	; (80024f4 <xTaskPriorityDisinherit+0xe8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	429a      	cmp	r2, r3
 800242a:	d00a      	beq.n	8002442 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800242c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002430:	f383 8811 	msr	BASEPRI, r3
 8002434:	f3bf 8f6f 	isb	sy
 8002438:	f3bf 8f4f 	dsb	sy
 800243c:	60fb      	str	r3, [r7, #12]
    }
 800243e:	bf00      	nop
 8002440:	e7fe      	b.n	8002440 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10a      	bne.n	8002460 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800244a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244e:	f383 8811 	msr	BASEPRI, r3
 8002452:	f3bf 8f6f 	isb	sy
 8002456:	f3bf 8f4f 	dsb	sy
 800245a:	60bb      	str	r3, [r7, #8]
    }
 800245c:	bf00      	nop
 800245e:	e7fe      	b.n	800245e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002464:	1e5a      	subs	r2, r3, #1
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002472:	429a      	cmp	r2, r3
 8002474:	d039      	beq.n	80024ea <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247a:	2b00      	cmp	r3, #0
 800247c:	d135      	bne.n	80024ea <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	3304      	adds	r3, #4
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe fc73 	bl	8000d6e <uxListRemove>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10a      	bne.n	80024a4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	2201      	movs	r2, #1
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43da      	mvns	r2, r3
 800249a:	4b17      	ldr	r3, [pc, #92]	; (80024f8 <xTaskPriorityDisinherit+0xec>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4013      	ands	r3, r2
 80024a0:	4a15      	ldr	r2, [pc, #84]	; (80024f8 <xTaskPriorityDisinherit+0xec>)
 80024a2:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	f1c3 0205 	rsb	r2, r3, #5
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	2201      	movs	r2, #1
 80024be:	409a      	lsls	r2, r3
 80024c0:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <xTaskPriorityDisinherit+0xec>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	4a0c      	ldr	r2, [pc, #48]	; (80024f8 <xTaskPriorityDisinherit+0xec>)
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4a09      	ldr	r2, [pc, #36]	; (80024fc <xTaskPriorityDisinherit+0xf0>)
 80024d8:	441a      	add	r2, r3
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	3304      	adds	r3, #4
 80024de:	4619      	mov	r1, r3
 80024e0:	4610      	mov	r0, r2
 80024e2:	f7fe fbe7 	bl	8000cb4 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80024e6:	2301      	movs	r3, #1
 80024e8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80024ea:	697b      	ldr	r3, [r7, #20]
    }
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000140 	.word	0x20000140
 80024f8:	20000220 	.word	0x20000220
 80024fc:	20000144 	.word	0x20000144

08002500 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00a      	beq.n	800252a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8002514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002518:	f383 8811 	msr	BASEPRI, r3
 800251c:	f3bf 8f6f 	isb	sy
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	613b      	str	r3, [r7, #16]
    }
 8002526:	bf00      	nop
 8002528:	e7fe      	b.n	8002528 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800252a:	f000 ff4d 	bl	80033c8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800252e:	4b32      	ldr	r3, [pc, #200]	; (80025f8 <xTaskGenericNotifyWait+0xf8>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4413      	add	r3, r2
 8002536:	3354      	adds	r3, #84	; 0x54
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d022      	beq.n	8002586 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002540:	4b2d      	ldr	r3, [pc, #180]	; (80025f8 <xTaskGenericNotifyWait+0xf8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	3214      	adds	r2, #20
 8002548:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	43d2      	mvns	r2, r2
 8002550:	4011      	ands	r1, r2
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	3214      	adds	r2, #20
 8002556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800255a:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <xTaskGenericNotifyWait+0xf8>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4413      	add	r3, r2
 8002562:	3354      	adds	r3, #84	; 0x54
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00b      	beq.n	8002586 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800256e:	2101      	movs	r1, #1
 8002570:	6a38      	ldr	r0, [r7, #32]
 8002572:	f000 fa27 	bl	80029c4 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002576:	4b21      	ldr	r3, [pc, #132]	; (80025fc <xTaskGenericNotifyWait+0xfc>)
 8002578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	f3bf 8f4f 	dsb	sy
 8002582:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002586:	f000 ff4f 	bl	8003428 <vPortExitCritical>

        taskENTER_CRITICAL();
 800258a:	f000 ff1d 	bl	80033c8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d007      	beq.n	80025a4 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002594:	4b18      	ldr	r3, [pc, #96]	; (80025f8 <xTaskGenericNotifyWait+0xf8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	3214      	adds	r2, #20
 800259c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80025a4:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <xTaskGenericNotifyWait+0xf8>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4413      	add	r3, r2
 80025ac:	3354      	adds	r3, #84	; 0x54
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d002      	beq.n	80025bc <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	e00e      	b.n	80025da <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80025bc:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <xTaskGenericNotifyWait+0xf8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	3214      	adds	r2, #20
 80025c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	43d2      	mvns	r2, r2
 80025cc:	4011      	ands	r1, r2
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	3214      	adds	r2, #20
 80025d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80025d6:	2301      	movs	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <xTaskGenericNotifyWait+0xf8>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4413      	add	r3, r2
 80025e2:	3354      	adds	r3, #84	; 0x54
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80025e8:	f000 ff1e 	bl	8003428 <vPortExitCritical>

        return xReturn;
 80025ec:	697b      	ldr	r3, [r7, #20]
    }
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000140 	.word	0x20000140
 80025fc:	e000ed04 	.word	0xe000ed04

08002600 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8002600:	b580      	push	{r7, lr}
 8002602:	b08c      	sub	sp, #48	; 0x30
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
 800260c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800260e:	2301      	movs	r3, #1
 8002610:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00a      	beq.n	800262e <xTaskGenericNotify+0x2e>
        __asm volatile
 8002618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261c:	f383 8811 	msr	BASEPRI, r3
 8002620:	f3bf 8f6f 	isb	sy
 8002624:	f3bf 8f4f 	dsb	sy
 8002628:	623b      	str	r3, [r7, #32]
    }
 800262a:	bf00      	nop
 800262c:	e7fe      	b.n	800262c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10a      	bne.n	800264a <xTaskGenericNotify+0x4a>
        __asm volatile
 8002634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002638:	f383 8811 	msr	BASEPRI, r3
 800263c:	f3bf 8f6f 	isb	sy
 8002640:	f3bf 8f4f 	dsb	sy
 8002644:	61fb      	str	r3, [r7, #28]
    }
 8002646:	bf00      	nop
 8002648:	e7fe      	b.n	8002648 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800264e:	f000 febb 	bl	80033c8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8002652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002654:	2b00      	cmp	r3, #0
 8002656:	d006      	beq.n	8002666 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	3214      	adds	r2, #20
 800265e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002664:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4413      	add	r3, r2
 800266c:	3354      	adds	r3, #84	; 0x54
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	4413      	add	r3, r2
 800267a:	3354      	adds	r3, #84	; 0x54
 800267c:	2202      	movs	r2, #2
 800267e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	2b04      	cmp	r3, #4
 8002684:	d83b      	bhi.n	80026fe <xTaskGenericNotify+0xfe>
 8002686:	a201      	add	r2, pc, #4	; (adr r2, 800268c <xTaskGenericNotify+0x8c>)
 8002688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268c:	0800271d 	.word	0x0800271d
 8002690:	080026a1 	.word	0x080026a1
 8002694:	080026bd 	.word	0x080026bd
 8002698:	080026d5 	.word	0x080026d5
 800269c:	080026e3 	.word	0x080026e3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	3214      	adds	r2, #20
 80026a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	ea42 0103 	orr.w	r1, r2, r3
 80026b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	3214      	adds	r2, #20
 80026b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80026ba:	e032      	b.n	8002722 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80026bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	3214      	adds	r2, #20
 80026c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c6:	1c59      	adds	r1, r3, #1
 80026c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	3214      	adds	r2, #20
 80026ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80026d2:	e026      	b.n	8002722 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80026d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	3214      	adds	r2, #20
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80026e0:	e01f      	b.n	8002722 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80026e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d006      	beq.n	80026f8 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80026ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	3214      	adds	r2, #20
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80026f6:	e014      	b.n	8002722 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80026fc:	e011      	b.n	8002722 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80026fe:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <xTaskGenericNotify+0x1ac>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00c      	beq.n	8002720 <xTaskGenericNotify+0x120>
        __asm volatile
 8002706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270a:	f383 8811 	msr	BASEPRI, r3
 800270e:	f3bf 8f6f 	isb	sy
 8002712:	f3bf 8f4f 	dsb	sy
 8002716:	61bb      	str	r3, [r7, #24]
    }
 8002718:	bf00      	nop
 800271a:	e7fe      	b.n	800271a <xTaskGenericNotify+0x11a>
                    break;
 800271c:	bf00      	nop
 800271e:	e000      	b.n	8002722 <xTaskGenericNotify+0x122>

                    break;
 8002720:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002722:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002726:	2b01      	cmp	r3, #1
 8002728:	d139      	bne.n	800279e <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272c:	3304      	adds	r3, #4
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe fb1d 	bl	8000d6e <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8002734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002738:	2201      	movs	r2, #1
 800273a:	409a      	lsls	r2, r3
 800273c:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <xTaskGenericNotify+0x1b0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4313      	orrs	r3, r2
 8002742:	4a1b      	ldr	r2, [pc, #108]	; (80027b0 <xTaskGenericNotify+0x1b0>)
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <xTaskGenericNotify+0x1b4>)
 8002754:	441a      	add	r2, r3
 8002756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002758:	3304      	adds	r3, #4
 800275a:	4619      	mov	r1, r3
 800275c:	4610      	mov	r0, r2
 800275e:	f7fe faa9 	bl	8000cb4 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <xTaskGenericNotify+0x180>
        __asm volatile
 800276a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276e:	f383 8811 	msr	BASEPRI, r3
 8002772:	f3bf 8f6f 	isb	sy
 8002776:	f3bf 8f4f 	dsb	sy
 800277a:	617b      	str	r3, [r7, #20]
    }
 800277c:	bf00      	nop
 800277e:	e7fe      	b.n	800277e <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <xTaskGenericNotify+0x1b8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278a:	429a      	cmp	r2, r3
 800278c:	d907      	bls.n	800279e <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <xTaskGenericNotify+0x1bc>)
 8002790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800279e:	f000 fe43 	bl	8003428 <vPortExitCritical>

        return xReturn;
 80027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80027a4:	4618      	mov	r0, r3
 80027a6:	3730      	adds	r7, #48	; 0x30
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	2000021c 	.word	0x2000021c
 80027b0:	20000220 	.word	0x20000220
 80027b4:	20000144 	.word	0x20000144
 80027b8:	20000140 	.word	0x20000140
 80027bc:	e000ed04 	.word	0xe000ed04

080027c0 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b090      	sub	sp, #64	; 0x40
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
 80027cc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80027ce:	2301      	movs	r3, #1
 80027d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10a      	bne.n	80027ee <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80027d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027dc:	f383 8811 	msr	BASEPRI, r3
 80027e0:	f3bf 8f6f 	isb	sy
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80027ea:	bf00      	nop
 80027ec:	e7fe      	b.n	80027ec <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80027f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f8:	f383 8811 	msr	BASEPRI, r3
 80027fc:	f3bf 8f6f 	isb	sy
 8002800:	f3bf 8f4f 	dsb	sy
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002806:	bf00      	nop
 8002808:	e7fe      	b.n	8002808 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800280a:	f000 febf 	bl	800358c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8002812:	f3ef 8211 	mrs	r2, BASEPRI
 8002816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281a:	f383 8811 	msr	BASEPRI, r3
 800281e:	f3bf 8f6f 	isb	sy
 8002822:	f3bf 8f4f 	dsb	sy
 8002826:	627a      	str	r2, [r7, #36]	; 0x24
 8002828:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800282c:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800282e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002830:	2b00      	cmp	r3, #0
 8002832:	d006      	beq.n	8002842 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	3214      	adds	r2, #20
 800283a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800283e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002840:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002842:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4413      	add	r3, r2
 8002848:	3354      	adds	r3, #84	; 0x54
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002850:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	4413      	add	r3, r2
 8002856:	3354      	adds	r3, #84	; 0x54
 8002858:	2202      	movs	r2, #2
 800285a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	2b04      	cmp	r3, #4
 8002860:	d83b      	bhi.n	80028da <xTaskGenericNotifyFromISR+0x11a>
 8002862:	a201      	add	r2, pc, #4	; (adr r2, 8002868 <xTaskGenericNotifyFromISR+0xa8>)
 8002864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002868:	080028f9 	.word	0x080028f9
 800286c:	0800287d 	.word	0x0800287d
 8002870:	08002899 	.word	0x08002899
 8002874:	080028b1 	.word	0x080028b1
 8002878:	080028bf 	.word	0x080028bf
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800287c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	3214      	adds	r2, #20
 8002882:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	ea42 0103 	orr.w	r1, r2, r3
 800288c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	3214      	adds	r2, #20
 8002892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002896:	e032      	b.n	80028fe <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	3214      	adds	r2, #20
 800289e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a2:	1c59      	adds	r1, r3, #1
 80028a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	3214      	adds	r2, #20
 80028aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80028ae:	e026      	b.n	80028fe <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80028b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	3214      	adds	r2, #20
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80028bc:	e01f      	b.n	80028fe <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80028be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d006      	beq.n	80028d4 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80028c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	3214      	adds	r2, #20
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80028d2:	e014      	b.n	80028fe <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80028d8:	e011      	b.n	80028fe <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80028da:	4b33      	ldr	r3, [pc, #204]	; (80029a8 <xTaskGenericNotifyFromISR+0x1e8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00c      	beq.n	80028fc <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80028e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e6:	f383 8811 	msr	BASEPRI, r3
 80028ea:	f3bf 8f6f 	isb	sy
 80028ee:	f3bf 8f4f 	dsb	sy
 80028f2:	61fb      	str	r3, [r7, #28]
    }
 80028f4:	bf00      	nop
 80028f6:	e7fe      	b.n	80028f6 <xTaskGenericNotifyFromISR+0x136>
                    break;
 80028f8:	bf00      	nop
 80028fa:	e000      	b.n	80028fe <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80028fc:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80028fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002902:	2b01      	cmp	r3, #1
 8002904:	d145      	bne.n	8002992 <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 800290e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002912:	f383 8811 	msr	BASEPRI, r3
 8002916:	f3bf 8f6f 	isb	sy
 800291a:	f3bf 8f4f 	dsb	sy
 800291e:	61bb      	str	r3, [r7, #24]
    }
 8002920:	bf00      	nop
 8002922:	e7fe      	b.n	8002922 <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002924:	4b21      	ldr	r3, [pc, #132]	; (80029ac <xTaskGenericNotifyFromISR+0x1ec>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d11c      	bne.n	8002966 <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800292c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292e:	3304      	adds	r3, #4
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe fa1c 	bl	8000d6e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	2201      	movs	r2, #1
 800293c:	409a      	lsls	r2, r3
 800293e:	4b1c      	ldr	r3, [pc, #112]	; (80029b0 <xTaskGenericNotifyFromISR+0x1f0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4313      	orrs	r3, r2
 8002944:	4a1a      	ldr	r2, [pc, #104]	; (80029b0 <xTaskGenericNotifyFromISR+0x1f0>)
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4a17      	ldr	r2, [pc, #92]	; (80029b4 <xTaskGenericNotifyFromISR+0x1f4>)
 8002956:	441a      	add	r2, r3
 8002958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295a:	3304      	adds	r3, #4
 800295c:	4619      	mov	r1, r3
 800295e:	4610      	mov	r0, r2
 8002960:	f7fe f9a8 	bl	8000cb4 <vListInsertEnd>
 8002964:	e005      	b.n	8002972 <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002968:	3318      	adds	r3, #24
 800296a:	4619      	mov	r1, r3
 800296c:	4812      	ldr	r0, [pc, #72]	; (80029b8 <xTaskGenericNotifyFromISR+0x1f8>)
 800296e:	f7fe f9a1 	bl	8000cb4 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002976:	4b11      	ldr	r3, [pc, #68]	; (80029bc <xTaskGenericNotifyFromISR+0x1fc>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	429a      	cmp	r2, r3
 800297e:	d908      	bls.n	8002992 <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8002980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8002986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <xTaskGenericNotifyFromISR+0x200>)
 800298e:	2201      	movs	r2, #1
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002994:	617b      	str	r3, [r7, #20]
        __asm volatile
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f383 8811 	msr	BASEPRI, r3
    }
 800299c:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800299e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80029a0:	4618      	mov	r0, r3
 80029a2:	3740      	adds	r7, #64	; 0x40
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	2000021c 	.word	0x2000021c
 80029ac:	20000240 	.word	0x20000240
 80029b0:	20000220 	.word	0x20000220
 80029b4:	20000144 	.word	0x20000144
 80029b8:	200001d8 	.word	0x200001d8
 80029bc:	20000140 	.word	0x20000140
 80029c0:	2000022c 	.word	0x2000022c

080029c4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80029ce:	4b29      	ldr	r3, [pc, #164]	; (8002a74 <prvAddCurrentTaskToDelayedList+0xb0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80029d4:	4b28      	ldr	r3, [pc, #160]	; (8002a78 <prvAddCurrentTaskToDelayedList+0xb4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3304      	adds	r3, #4
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe f9c7 	bl	8000d6e <uxListRemove>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10b      	bne.n	80029fe <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80029e6:	4b24      	ldr	r3, [pc, #144]	; (8002a78 <prvAddCurrentTaskToDelayedList+0xb4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	2201      	movs	r2, #1
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43da      	mvns	r2, r3
 80029f4:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <prvAddCurrentTaskToDelayedList+0xb8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4013      	ands	r3, r2
 80029fa:	4a20      	ldr	r2, [pc, #128]	; (8002a7c <prvAddCurrentTaskToDelayedList+0xb8>)
 80029fc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a04:	d10a      	bne.n	8002a1c <prvAddCurrentTaskToDelayedList+0x58>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a0c:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	3304      	adds	r3, #4
 8002a12:	4619      	mov	r1, r3
 8002a14:	481a      	ldr	r0, [pc, #104]	; (8002a80 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002a16:	f7fe f94d 	bl	8000cb4 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002a1a:	e026      	b.n	8002a6a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4413      	add	r3, r2
 8002a22:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a24:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d209      	bcs.n	8002a48 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a34:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4610      	mov	r0, r2
 8002a42:	f7fe f95b 	bl	8000cfc <vListInsert>
}
 8002a46:	e010      	b.n	8002a6a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a48:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3304      	adds	r3, #4
 8002a52:	4619      	mov	r1, r3
 8002a54:	4610      	mov	r0, r2
 8002a56:	f7fe f951 	bl	8000cfc <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002a5a:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d202      	bcs.n	8002a6a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8002a64:	4a09      	ldr	r2, [pc, #36]	; (8002a8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	6013      	str	r3, [r2, #0]
}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	2000021c 	.word	0x2000021c
 8002a78:	20000140 	.word	0x20000140
 8002a7c:	20000220 	.word	0x20000220
 8002a80:	20000204 	.word	0x20000204
 8002a84:	200001d4 	.word	0x200001d4
 8002a88:	200001d0 	.word	0x200001d0
 8002a8c:	20000238 	.word	0x20000238

08002a90 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002a9a:	f000 fb31 	bl	8003100 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002a9e:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <xTimerCreateTimerTask+0x54>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002aa6:	4b10      	ldr	r3, [pc, #64]	; (8002ae8 <xTimerCreateTimerTask+0x58>)
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	2302      	movs	r3, #2
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ab4:	490d      	ldr	r1, [pc, #52]	; (8002aec <xTimerCreateTimerTask+0x5c>)
 8002ab6:	480e      	ldr	r0, [pc, #56]	; (8002af0 <xTimerCreateTimerTask+0x60>)
 8002ab8:	f7fe ff38 	bl	800192c <xTaskCreate>
 8002abc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8002ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac8:	f383 8811 	msr	BASEPRI, r3
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	603b      	str	r3, [r7, #0]
    }
 8002ad6:	bf00      	nop
 8002ad8:	e7fe      	b.n	8002ad8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8002ada:	687b      	ldr	r3, [r7, #4]
    }
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20000274 	.word	0x20000274
 8002ae8:	20000278 	.word	0x20000278
 8002aec:	0800540c 	.word	0x0800540c
 8002af0:	08002ce1 	.word	0x08002ce1

08002af4 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8002b02:	202c      	movs	r0, #44	; 0x2c
 8002b04:	f000 fd82 	bl	800360c <pvPortMalloc>
 8002b08:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00d      	beq.n	8002b2c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 f805 	bl	8002b36 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8002b2c:	697b      	ldr	r3, [r7, #20]
        }
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b086      	sub	sp, #24
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10a      	bne.n	8002b60 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8002b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4e:	f383 8811 	msr	BASEPRI, r3
 8002b52:	f3bf 8f6f 	isb	sy
 8002b56:	f3bf 8f4f 	dsb	sy
 8002b5a:	617b      	str	r3, [r7, #20]
    }
 8002b5c:	bf00      	nop
 8002b5e:	e7fe      	b.n	8002b5e <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d01e      	beq.n	8002ba4 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8002b66:	f000 facb 	bl	8003100 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	6a3a      	ldr	r2, [r7, #32]
 8002b80:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	3304      	adds	r3, #4
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe f887 	bl	8000c9a <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d008      	beq.n	8002ba4 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b98:	f043 0304 	orr.w	r3, r3, #4
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8002ba4:	bf00      	nop
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10a      	bne.n	8002bda <xTimerGenericCommand+0x2e>
        __asm volatile
 8002bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc8:	f383 8811 	msr	BASEPRI, r3
 8002bcc:	f3bf 8f6f 	isb	sy
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	623b      	str	r3, [r7, #32]
    }
 8002bd6:	bf00      	nop
 8002bd8:	e7fe      	b.n	8002bd8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8002bda:	4b1a      	ldr	r3, [pc, #104]	; (8002c44 <xTimerGenericCommand+0x98>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d02a      	beq.n	8002c38 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b05      	cmp	r3, #5
 8002bf2:	dc18      	bgt.n	8002c26 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002bf4:	f7ff fbec 	bl	80023d0 <xTaskGetSchedulerState>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d109      	bne.n	8002c12 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002bfe:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <xTimerGenericCommand+0x98>)
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	f107 0114 	add.w	r1, r7, #20
 8002c06:	2300      	movs	r3, #0
 8002c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c0a:	f7fe f9c5 	bl	8000f98 <xQueueGenericSend>
 8002c0e:	6278      	str	r0, [r7, #36]	; 0x24
 8002c10:	e012      	b.n	8002c38 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002c12:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <xTimerGenericCommand+0x98>)
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	f107 0114 	add.w	r1, r7, #20
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f7fe f9bb 	bl	8000f98 <xQueueGenericSend>
 8002c22:	6278      	str	r0, [r7, #36]	; 0x24
 8002c24:	e008      	b.n	8002c38 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002c26:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <xTimerGenericCommand+0x98>)
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	f107 0114 	add.w	r1, r7, #20
 8002c2e:	2300      	movs	r3, #0
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	f7fe faaf 	bl	8001194 <xQueueGenericSendFromISR>
 8002c36:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3728      	adds	r7, #40	; 0x28
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20000274 	.word	0x20000274

08002c48 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c52:	4b22      	ldr	r3, [pc, #136]	; (8002cdc <prvProcessExpiredTimer+0x94>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	3304      	adds	r3, #4
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe f884 	bl	8000d6e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d022      	beq.n	8002cba <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	699a      	ldr	r2, [r3, #24]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	18d1      	adds	r1, r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	6978      	ldr	r0, [r7, #20]
 8002c82:	f000 f8d1 	bl	8002e28 <prvInsertTimerInActiveList>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d01f      	beq.n	8002ccc <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	2300      	movs	r3, #0
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	2100      	movs	r1, #0
 8002c96:	6978      	ldr	r0, [r7, #20]
 8002c98:	f7ff ff88 	bl	8002bac <xTimerGenericCommand>
 8002c9c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d113      	bne.n	8002ccc <prvProcessExpiredTimer+0x84>
        __asm volatile
 8002ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	60fb      	str	r3, [r7, #12]
    }
 8002cb6:	bf00      	nop
 8002cb8:	e7fe      	b.n	8002cb8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cc0:	f023 0301 	bic.w	r3, r3, #1
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	6978      	ldr	r0, [r7, #20]
 8002cd2:	4798      	blx	r3
    }
 8002cd4:	bf00      	nop
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	2000026c 	.word	0x2000026c

08002ce0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002ce8:	f107 0308 	add.w	r3, r7, #8
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 f857 	bl	8002da0 <prvGetNextExpireTime>
 8002cf2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 f803 	bl	8002d04 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002cfe:	f000 f8d5 	bl	8002eac <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002d02:	e7f1      	b.n	8002ce8 <prvTimerTask+0x8>

08002d04 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002d0e:	f7fe ffa5 	bl	8001c5c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002d12:	f107 0308 	add.w	r3, r7, #8
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f866 	bl	8002de8 <prvSampleTimeNow>
 8002d1c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d130      	bne.n	8002d86 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10a      	bne.n	8002d40 <prvProcessTimerOrBlockTask+0x3c>
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d806      	bhi.n	8002d40 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002d32:	f7fe ffa1 	bl	8001c78 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002d36:	68f9      	ldr	r1, [r7, #12]
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff ff85 	bl	8002c48 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002d3e:	e024      	b.n	8002d8a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d008      	beq.n	8002d58 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002d46:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <prvProcessTimerOrBlockTask+0x90>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <prvProcessTimerOrBlockTask+0x50>
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <prvProcessTimerOrBlockTask+0x52>
 8002d54:	2300      	movs	r3, #0
 8002d56:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002d58:	4b0f      	ldr	r3, [pc, #60]	; (8002d98 <prvProcessTimerOrBlockTask+0x94>)
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	4619      	mov	r1, r3
 8002d66:	f7fe fdad 	bl	80018c4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002d6a:	f7fe ff85 	bl	8001c78 <xTaskResumeAll>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10a      	bne.n	8002d8a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <prvProcessTimerOrBlockTask+0x98>)
 8002d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	f3bf 8f4f 	dsb	sy
 8002d80:	f3bf 8f6f 	isb	sy
    }
 8002d84:	e001      	b.n	8002d8a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002d86:	f7fe ff77 	bl	8001c78 <xTaskResumeAll>
    }
 8002d8a:	bf00      	nop
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000270 	.word	0x20000270
 8002d98:	20000274 	.word	0x20000274
 8002d9c:	e000ed04 	.word	0xe000ed04

08002da0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002da8:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <prvGetNextExpireTime+0x44>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <prvGetNextExpireTime+0x16>
 8002db2:	2201      	movs	r2, #1
 8002db4:	e000      	b.n	8002db8 <prvGetNextExpireTime+0x18>
 8002db6:	2200      	movs	r2, #0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d105      	bne.n	8002dd0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002dc4:	4b07      	ldr	r3, [pc, #28]	; (8002de4 <prvGetNextExpireTime+0x44>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	e001      	b.n	8002dd4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
    }
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	2000026c 	.word	0x2000026c

08002de8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002df0:	f7fe ffde 	bl	8001db0 <xTaskGetTickCount>
 8002df4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002df6:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <prvSampleTimeNow+0x3c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d205      	bcs.n	8002e0c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002e00:	f000 f91a 	bl	8003038 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	e002      	b.n	8002e12 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002e12:	4a04      	ldr	r2, [pc, #16]	; (8002e24 <prvSampleTimeNow+0x3c>)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002e18:	68fb      	ldr	r3, [r7, #12]
    }
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	2000027c 	.word	0x2000027c

08002e28 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d812      	bhi.n	8002e74 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	1ad2      	subs	r2, r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d302      	bcc.n	8002e62 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	e01b      	b.n	8002e9a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002e62:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <prvInsertTimerInActiveList+0x7c>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	f7fd ff45 	bl	8000cfc <vListInsert>
 8002e72:	e012      	b.n	8002e9a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d206      	bcs.n	8002e8a <prvInsertTimerInActiveList+0x62>
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d302      	bcc.n	8002e8a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002e84:	2301      	movs	r3, #1
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	e007      	b.n	8002e9a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002e8a:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <prvInsertTimerInActiveList+0x80>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3304      	adds	r3, #4
 8002e92:	4619      	mov	r1, r3
 8002e94:	4610      	mov	r0, r2
 8002e96:	f7fd ff31 	bl	8000cfc <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002e9a:	697b      	ldr	r3, [r7, #20]
    }
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20000270 	.word	0x20000270
 8002ea8:	2000026c 	.word	0x2000026c

08002eac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08c      	sub	sp, #48	; 0x30
 8002eb0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002eb2:	e0ae      	b.n	8003012 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f2c0 80aa 	blt.w	8003010 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d004      	beq.n	8002ed2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	3304      	adds	r3, #4
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fd ff4e 	bl	8000d6e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002ed2:	1d3b      	adds	r3, r7, #4
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ff87 	bl	8002de8 <prvSampleTimeNow>
 8002eda:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b09      	cmp	r3, #9
 8002ee0:	f200 8097 	bhi.w	8003012 <prvProcessReceivedCommands+0x166>
 8002ee4:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <prvProcessReceivedCommands+0x40>)
 8002ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eea:	bf00      	nop
 8002eec:	08002f15 	.word	0x08002f15
 8002ef0:	08002f15 	.word	0x08002f15
 8002ef4:	08002f15 	.word	0x08002f15
 8002ef8:	08002f89 	.word	0x08002f89
 8002efc:	08002f9d 	.word	0x08002f9d
 8002f00:	08002fe7 	.word	0x08002fe7
 8002f04:	08002f15 	.word	0x08002f15
 8002f08:	08002f15 	.word	0x08002f15
 8002f0c:	08002f89 	.word	0x08002f89
 8002f10:	08002f9d 	.word	0x08002f9d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	18d1      	adds	r1, r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a3a      	ldr	r2, [r7, #32]
 8002f32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f34:	f7ff ff78 	bl	8002e28 <prvInsertTimerInActiveList>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d069      	beq.n	8003012 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f44:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d05e      	beq.n	8003012 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	441a      	add	r2, r3
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	2300      	movs	r3, #0
 8002f62:	2100      	movs	r1, #0
 8002f64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f66:	f7ff fe21 	bl	8002bac <xTimerGenericCommand>
 8002f6a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d14f      	bne.n	8003012 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8002f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f76:	f383 8811 	msr	BASEPRI, r3
 8002f7a:	f3bf 8f6f 	isb	sy
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	61bb      	str	r3, [r7, #24]
    }
 8002f84:	bf00      	nop
 8002f86:	e7fe      	b.n	8002f86 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f8e:	f023 0301 	bic.w	r3, r3, #1
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002f9a:	e03a      	b.n	8003012 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10a      	bne.n	8002fd2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8002fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc0:	f383 8811 	msr	BASEPRI, r3
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	617b      	str	r3, [r7, #20]
    }
 8002fce:	bf00      	nop
 8002fd0:	e7fe      	b.n	8002fd0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	18d1      	adds	r1, r2, r3
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	6a3a      	ldr	r2, [r7, #32]
 8002fde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fe0:	f7ff ff22 	bl	8002e28 <prvInsertTimerInActiveList>
                        break;
 8002fe4:	e015      	b.n	8003012 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d103      	bne.n	8002ffc <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8002ff4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ff6:	f000 fbe9 	bl	80037cc <vPortFree>
 8002ffa:	e00a      	b.n	8003012 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	b2da      	uxtb	r2, r3
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800300e:	e000      	b.n	8003012 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003010:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003012:	4b08      	ldr	r3, [pc, #32]	; (8003034 <prvProcessReceivedCommands+0x188>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f107 0108 	add.w	r1, r7, #8
 800301a:	2200      	movs	r2, #0
 800301c:	4618      	mov	r0, r3
 800301e:	f7fe f963 	bl	80012e8 <xQueueReceive>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	f47f af45 	bne.w	8002eb4 <prvProcessReceivedCommands+0x8>
        }
    }
 800302a:	bf00      	nop
 800302c:	bf00      	nop
 800302e:	3728      	adds	r7, #40	; 0x28
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20000274 	.word	0x20000274

08003038 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800303e:	e048      	b.n	80030d2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003040:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <prvSwitchTimerLists+0xc0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800304a:	4b2b      	ldr	r3, [pc, #172]	; (80030f8 <prvSwitchTimerLists+0xc0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	3304      	adds	r3, #4
 8003058:	4618      	mov	r0, r3
 800305a:	f7fd fe88 	bl	8000d6e <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d02e      	beq.n	80030d2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4413      	add	r3, r2
 800307c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	429a      	cmp	r2, r3
 8003084:	d90e      	bls.n	80030a4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003092:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <prvSwitchTimerLists+0xc0>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3304      	adds	r3, #4
 800309a:	4619      	mov	r1, r3
 800309c:	4610      	mov	r0, r2
 800309e:	f7fd fe2d 	bl	8000cfc <vListInsert>
 80030a2:	e016      	b.n	80030d2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80030a4:	2300      	movs	r3, #0
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	2300      	movs	r3, #0
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	2100      	movs	r1, #0
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f7ff fd7c 	bl	8002bac <xTimerGenericCommand>
 80030b4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10a      	bne.n	80030d2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80030bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	603b      	str	r3, [r7, #0]
    }
 80030ce:	bf00      	nop
 80030d0:	e7fe      	b.n	80030d0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <prvSwitchTimerLists+0xc0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1b1      	bne.n	8003040 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <prvSwitchTimerLists+0xc0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80030e2:	4b06      	ldr	r3, [pc, #24]	; (80030fc <prvSwitchTimerLists+0xc4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a04      	ldr	r2, [pc, #16]	; (80030f8 <prvSwitchTimerLists+0xc0>)
 80030e8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80030ea:	4a04      	ldr	r2, [pc, #16]	; (80030fc <prvSwitchTimerLists+0xc4>)
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	6013      	str	r3, [r2, #0]
    }
 80030f0:	bf00      	nop
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	2000026c 	.word	0x2000026c
 80030fc:	20000270 	.word	0x20000270

08003100 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003104:	f000 f960 	bl	80033c8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003108:	4b12      	ldr	r3, [pc, #72]	; (8003154 <prvCheckForValidListAndQueue+0x54>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d11d      	bne.n	800314c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003110:	4811      	ldr	r0, [pc, #68]	; (8003158 <prvCheckForValidListAndQueue+0x58>)
 8003112:	f7fd fda2 	bl	8000c5a <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003116:	4811      	ldr	r0, [pc, #68]	; (800315c <prvCheckForValidListAndQueue+0x5c>)
 8003118:	f7fd fd9f 	bl	8000c5a <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800311c:	4b10      	ldr	r3, [pc, #64]	; (8003160 <prvCheckForValidListAndQueue+0x60>)
 800311e:	4a0e      	ldr	r2, [pc, #56]	; (8003158 <prvCheckForValidListAndQueue+0x58>)
 8003120:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003122:	4b10      	ldr	r3, [pc, #64]	; (8003164 <prvCheckForValidListAndQueue+0x64>)
 8003124:	4a0d      	ldr	r2, [pc, #52]	; (800315c <prvCheckForValidListAndQueue+0x5c>)
 8003126:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003128:	2200      	movs	r2, #0
 800312a:	210c      	movs	r1, #12
 800312c:	200a      	movs	r0, #10
 800312e:	f7fd feb1 	bl	8000e94 <xQueueGenericCreate>
 8003132:	4603      	mov	r3, r0
 8003134:	4a07      	ldr	r2, [pc, #28]	; (8003154 <prvCheckForValidListAndQueue+0x54>)
 8003136:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003138:	4b06      	ldr	r3, [pc, #24]	; (8003154 <prvCheckForValidListAndQueue+0x54>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003140:	4b04      	ldr	r3, [pc, #16]	; (8003154 <prvCheckForValidListAndQueue+0x54>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4908      	ldr	r1, [pc, #32]	; (8003168 <prvCheckForValidListAndQueue+0x68>)
 8003146:	4618      	mov	r0, r3
 8003148:	f7fe fb92 	bl	8001870 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800314c:	f000 f96c 	bl	8003428 <vPortExitCritical>
    }
 8003150:	bf00      	nop
 8003152:	bd80      	pop	{r7, pc}
 8003154:	20000274 	.word	0x20000274
 8003158:	20000244 	.word	0x20000244
 800315c:	20000258 	.word	0x20000258
 8003160:	2000026c 	.word	0x2000026c
 8003164:	20000270 	.word	0x20000270
 8003168:	08005414 	.word	0x08005414

0800316c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	3b04      	subs	r3, #4
 800317c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003184:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3b04      	subs	r3, #4
 800318a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f023 0201 	bic.w	r2, r3, #1
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	3b04      	subs	r3, #4
 800319a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800319c:	4a0c      	ldr	r2, [pc, #48]	; (80031d0 <pxPortInitialiseStack+0x64>)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	3b14      	subs	r3, #20
 80031a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	3b04      	subs	r3, #4
 80031b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f06f 0202 	mvn.w	r2, #2
 80031ba:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	3b20      	subs	r3, #32
 80031c0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80031c2:	68fb      	ldr	r3, [r7, #12]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	080031d5 	.word	0x080031d5

080031d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80031de:	4b12      	ldr	r3, [pc, #72]	; (8003228 <prvTaskExitError+0x54>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e6:	d00a      	beq.n	80031fe <prvTaskExitError+0x2a>
        __asm volatile
 80031e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ec:	f383 8811 	msr	BASEPRI, r3
 80031f0:	f3bf 8f6f 	isb	sy
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	60fb      	str	r3, [r7, #12]
    }
 80031fa:	bf00      	nop
 80031fc:	e7fe      	b.n	80031fc <prvTaskExitError+0x28>
        __asm volatile
 80031fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003202:	f383 8811 	msr	BASEPRI, r3
 8003206:	f3bf 8f6f 	isb	sy
 800320a:	f3bf 8f4f 	dsb	sy
 800320e:	60bb      	str	r3, [r7, #8]
    }
 8003210:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003212:	bf00      	nop
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0fc      	beq.n	8003214 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800321a:	bf00      	nop
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	20000020 	.word	0x20000020
 800322c:	00000000 	.word	0x00000000

08003230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003230:	4b07      	ldr	r3, [pc, #28]	; (8003250 <pxCurrentTCBConst2>)
 8003232:	6819      	ldr	r1, [r3, #0]
 8003234:	6808      	ldr	r0, [r1, #0]
 8003236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800323a:	f380 8809 	msr	PSP, r0
 800323e:	f3bf 8f6f 	isb	sy
 8003242:	f04f 0000 	mov.w	r0, #0
 8003246:	f380 8811 	msr	BASEPRI, r0
 800324a:	4770      	bx	lr
 800324c:	f3af 8000 	nop.w

08003250 <pxCurrentTCBConst2>:
 8003250:	20000140 	.word	0x20000140
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop

08003258 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003258:	4808      	ldr	r0, [pc, #32]	; (800327c <prvPortStartFirstTask+0x24>)
 800325a:	6800      	ldr	r0, [r0, #0]
 800325c:	6800      	ldr	r0, [r0, #0]
 800325e:	f380 8808 	msr	MSP, r0
 8003262:	f04f 0000 	mov.w	r0, #0
 8003266:	f380 8814 	msr	CONTROL, r0
 800326a:	b662      	cpsie	i
 800326c:	b661      	cpsie	f
 800326e:	f3bf 8f4f 	dsb	sy
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	df00      	svc	0
 8003278:	bf00      	nop
 800327a:	0000      	.short	0x0000
 800327c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003280:	bf00      	nop
 8003282:	bf00      	nop

08003284 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800328a:	4b46      	ldr	r3, [pc, #280]	; (80033a4 <xPortStartScheduler+0x120>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a46      	ldr	r2, [pc, #280]	; (80033a8 <xPortStartScheduler+0x124>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d10a      	bne.n	80032aa <xPortStartScheduler+0x26>
        __asm volatile
 8003294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	613b      	str	r3, [r7, #16]
    }
 80032a6:	bf00      	nop
 80032a8:	e7fe      	b.n	80032a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80032aa:	4b3e      	ldr	r3, [pc, #248]	; (80033a4 <xPortStartScheduler+0x120>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a3f      	ldr	r2, [pc, #252]	; (80033ac <xPortStartScheduler+0x128>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d10a      	bne.n	80032ca <xPortStartScheduler+0x46>
        __asm volatile
 80032b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b8:	f383 8811 	msr	BASEPRI, r3
 80032bc:	f3bf 8f6f 	isb	sy
 80032c0:	f3bf 8f4f 	dsb	sy
 80032c4:	60fb      	str	r3, [r7, #12]
    }
 80032c6:	bf00      	nop
 80032c8:	e7fe      	b.n	80032c8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80032ca:	4b39      	ldr	r3, [pc, #228]	; (80033b0 <xPortStartScheduler+0x12c>)
 80032cc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	22ff      	movs	r2, #255	; 0xff
 80032da:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80032e4:	78fb      	ldrb	r3, [r7, #3]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	4b31      	ldr	r3, [pc, #196]	; (80033b4 <xPortStartScheduler+0x130>)
 80032f0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80032f2:	4b31      	ldr	r3, [pc, #196]	; (80033b8 <xPortStartScheduler+0x134>)
 80032f4:	2207      	movs	r2, #7
 80032f6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032f8:	e009      	b.n	800330e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80032fa:	4b2f      	ldr	r3, [pc, #188]	; (80033b8 <xPortStartScheduler+0x134>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	3b01      	subs	r3, #1
 8003300:	4a2d      	ldr	r2, [pc, #180]	; (80033b8 <xPortStartScheduler+0x134>)
 8003302:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	b2db      	uxtb	r3, r3
 800330c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800330e:	78fb      	ldrb	r3, [r7, #3]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003316:	2b80      	cmp	r3, #128	; 0x80
 8003318:	d0ef      	beq.n	80032fa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800331a:	4b27      	ldr	r3, [pc, #156]	; (80033b8 <xPortStartScheduler+0x134>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f1c3 0307 	rsb	r3, r3, #7
 8003322:	2b04      	cmp	r3, #4
 8003324:	d00a      	beq.n	800333c <xPortStartScheduler+0xb8>
        __asm volatile
 8003326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332a:	f383 8811 	msr	BASEPRI, r3
 800332e:	f3bf 8f6f 	isb	sy
 8003332:	f3bf 8f4f 	dsb	sy
 8003336:	60bb      	str	r3, [r7, #8]
    }
 8003338:	bf00      	nop
 800333a:	e7fe      	b.n	800333a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800333c:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <xPortStartScheduler+0x134>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	021b      	lsls	r3, r3, #8
 8003342:	4a1d      	ldr	r2, [pc, #116]	; (80033b8 <xPortStartScheduler+0x134>)
 8003344:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003346:	4b1c      	ldr	r3, [pc, #112]	; (80033b8 <xPortStartScheduler+0x134>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800334e:	4a1a      	ldr	r2, [pc, #104]	; (80033b8 <xPortStartScheduler+0x134>)
 8003350:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800335a:	4b18      	ldr	r3, [pc, #96]	; (80033bc <xPortStartScheduler+0x138>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a17      	ldr	r2, [pc, #92]	; (80033bc <xPortStartScheduler+0x138>)
 8003360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003364:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003366:	4b15      	ldr	r3, [pc, #84]	; (80033bc <xPortStartScheduler+0x138>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a14      	ldr	r2, [pc, #80]	; (80033bc <xPortStartScheduler+0x138>)
 800336c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003370:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003372:	f000 f8db 	bl	800352c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003376:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <xPortStartScheduler+0x13c>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800337c:	f000 f8fa 	bl	8003574 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003380:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <xPortStartScheduler+0x140>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a0f      	ldr	r2, [pc, #60]	; (80033c4 <xPortStartScheduler+0x140>)
 8003386:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800338a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800338c:	f7ff ff64 	bl	8003258 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003390:	f7fe fdd6 	bl	8001f40 <vTaskSwitchContext>
    prvTaskExitError();
 8003394:	f7ff ff1e 	bl	80031d4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	e000ed00 	.word	0xe000ed00
 80033a8:	410fc271 	.word	0x410fc271
 80033ac:	410fc270 	.word	0x410fc270
 80033b0:	e000e400 	.word	0xe000e400
 80033b4:	20000280 	.word	0x20000280
 80033b8:	20000284 	.word	0x20000284
 80033bc:	e000ed20 	.word	0xe000ed20
 80033c0:	20000020 	.word	0x20000020
 80033c4:	e000ef34 	.word	0xe000ef34

080033c8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
        __asm volatile
 80033ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d2:	f383 8811 	msr	BASEPRI, r3
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	607b      	str	r3, [r7, #4]
    }
 80033e0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80033e2:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <vPortEnterCritical+0x58>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3301      	adds	r3, #1
 80033e8:	4a0d      	ldr	r2, [pc, #52]	; (8003420 <vPortEnterCritical+0x58>)
 80033ea:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <vPortEnterCritical+0x58>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d10f      	bne.n	8003414 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80033f4:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <vPortEnterCritical+0x5c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <vPortEnterCritical+0x4c>
        __asm volatile
 80033fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003402:	f383 8811 	msr	BASEPRI, r3
 8003406:	f3bf 8f6f 	isb	sy
 800340a:	f3bf 8f4f 	dsb	sy
 800340e:	603b      	str	r3, [r7, #0]
    }
 8003410:	bf00      	nop
 8003412:	e7fe      	b.n	8003412 <vPortEnterCritical+0x4a>
    }
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	20000020 	.word	0x20000020
 8003424:	e000ed04 	.word	0xe000ed04

08003428 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800342e:	4b12      	ldr	r3, [pc, #72]	; (8003478 <vPortExitCritical+0x50>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10a      	bne.n	800344c <vPortExitCritical+0x24>
        __asm volatile
 8003436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	607b      	str	r3, [r7, #4]
    }
 8003448:	bf00      	nop
 800344a:	e7fe      	b.n	800344a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800344c:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <vPortExitCritical+0x50>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	3b01      	subs	r3, #1
 8003452:	4a09      	ldr	r2, [pc, #36]	; (8003478 <vPortExitCritical+0x50>)
 8003454:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <vPortExitCritical+0x50>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d105      	bne.n	800346a <vPortExitCritical+0x42>
 800345e:	2300      	movs	r3, #0
 8003460:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	f383 8811 	msr	BASEPRI, r3
    }
 8003468:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	20000020 	.word	0x20000020
 800347c:	00000000 	.word	0x00000000

08003480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003480:	f3ef 8009 	mrs	r0, PSP
 8003484:	f3bf 8f6f 	isb	sy
 8003488:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <pxCurrentTCBConst>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	f01e 0f10 	tst.w	lr, #16
 8003490:	bf08      	it	eq
 8003492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800349a:	6010      	str	r0, [r2, #0]
 800349c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80034a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80034a4:	f380 8811 	msr	BASEPRI, r0
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f7fe fd46 	bl	8001f40 <vTaskSwitchContext>
 80034b4:	f04f 0000 	mov.w	r0, #0
 80034b8:	f380 8811 	msr	BASEPRI, r0
 80034bc:	bc09      	pop	{r0, r3}
 80034be:	6819      	ldr	r1, [r3, #0]
 80034c0:	6808      	ldr	r0, [r1, #0]
 80034c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c6:	f01e 0f10 	tst.w	lr, #16
 80034ca:	bf08      	it	eq
 80034cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80034d0:	f380 8809 	msr	PSP, r0
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	f3af 8000 	nop.w

080034e0 <pxCurrentTCBConst>:
 80034e0:	20000140 	.word	0x20000140
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80034e4:	bf00      	nop
 80034e6:	bf00      	nop

080034e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
        __asm volatile
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	607b      	str	r3, [r7, #4]
    }
 8003500:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003502:	f7fe fc65 	bl	8001dd0 <xTaskIncrementTick>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800350c:	4b06      	ldr	r3, [pc, #24]	; (8003528 <SysTick_Handler+0x40>)
 800350e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	2300      	movs	r3, #0
 8003516:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	f383 8811 	msr	BASEPRI, r3
    }
 800351e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8003520:	bf00      	nop
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	e000ed04 	.word	0xe000ed04

0800352c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <vPortSetupTimerInterrupt+0x34>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003536:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <vPortSetupTimerInterrupt+0x38>)
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800353c:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <vPortSetupTimerInterrupt+0x3c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0a      	ldr	r2, [pc, #40]	; (800356c <vPortSetupTimerInterrupt+0x40>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	099b      	lsrs	r3, r3, #6
 8003548:	4a09      	ldr	r2, [pc, #36]	; (8003570 <vPortSetupTimerInterrupt+0x44>)
 800354a:	3b01      	subs	r3, #1
 800354c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800354e:	4b04      	ldr	r3, [pc, #16]	; (8003560 <vPortSetupTimerInterrupt+0x34>)
 8003550:	2207      	movs	r2, #7
 8003552:	601a      	str	r2, [r3, #0]
}
 8003554:	bf00      	nop
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	e000e010 	.word	0xe000e010
 8003564:	e000e018 	.word	0xe000e018
 8003568:	20000004 	.word	0x20000004
 800356c:	10624dd3 	.word	0x10624dd3
 8003570:	e000e014 	.word	0xe000e014

08003574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003574:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003584 <vPortEnableVFP+0x10>
 8003578:	6801      	ldr	r1, [r0, #0]
 800357a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800357e:	6001      	str	r1, [r0, #0]
 8003580:	4770      	bx	lr
 8003582:	0000      	.short	0x0000
 8003584:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003588:	bf00      	nop
 800358a:	bf00      	nop

0800358c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003592:	f3ef 8305 	mrs	r3, IPSR
 8003596:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b0f      	cmp	r3, #15
 800359c:	d914      	bls.n	80035c8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800359e:	4a17      	ldr	r2, [pc, #92]	; (80035fc <vPortValidateInterruptPriority+0x70>)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4413      	add	r3, r2
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80035a8:	4b15      	ldr	r3, [pc, #84]	; (8003600 <vPortValidateInterruptPriority+0x74>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	7afa      	ldrb	r2, [r7, #11]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d20a      	bcs.n	80035c8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	607b      	str	r3, [r7, #4]
    }
 80035c4:	bf00      	nop
 80035c6:	e7fe      	b.n	80035c6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80035c8:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <vPortValidateInterruptPriority+0x78>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035d0:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <vPortValidateInterruptPriority+0x7c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d90a      	bls.n	80035ee <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	603b      	str	r3, [r7, #0]
    }
 80035ea:	bf00      	nop
 80035ec:	e7fe      	b.n	80035ec <vPortValidateInterruptPriority+0x60>
    }
 80035ee:	bf00      	nop
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	e000e3f0 	.word	0xe000e3f0
 8003600:	20000280 	.word	0x20000280
 8003604:	e000ed0c 	.word	0xe000ed0c
 8003608:	20000284 	.word	0x20000284

0800360c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08a      	sub	sp, #40	; 0x28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003614:	2300      	movs	r3, #0
 8003616:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003618:	f7fe fb20 	bl	8001c5c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800361c:	4b65      	ldr	r3, [pc, #404]	; (80037b4 <pvPortMalloc+0x1a8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003624:	f000 f934 	bl	8003890 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003628:	4b63      	ldr	r3, [pc, #396]	; (80037b8 <pvPortMalloc+0x1ac>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4013      	ands	r3, r2
 8003630:	2b00      	cmp	r3, #0
 8003632:	f040 80a7 	bne.w	8003784 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d02d      	beq.n	8003698 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800363c:	2208      	movs	r2, #8
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	429a      	cmp	r2, r3
 8003646:	d227      	bcs.n	8003698 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003648:	2208      	movs	r2, #8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4413      	add	r3, r2
 800364e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	2b00      	cmp	r3, #0
 8003658:	d021      	beq.n	800369e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f023 0307 	bic.w	r3, r3, #7
 8003660:	3308      	adds	r3, #8
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	429a      	cmp	r2, r3
 8003666:	d214      	bcs.n	8003692 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f023 0307 	bic.w	r3, r3, #7
 800366e:	3308      	adds	r3, #8
 8003670:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <pvPortMalloc+0x92>
        __asm volatile
 800367c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003680:	f383 8811 	msr	BASEPRI, r3
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	617b      	str	r3, [r7, #20]
    }
 800368e:	bf00      	nop
 8003690:	e7fe      	b.n	8003690 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003696:	e002      	b.n	800369e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	607b      	str	r3, [r7, #4]
 800369c:	e000      	b.n	80036a0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800369e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d06e      	beq.n	8003784 <pvPortMalloc+0x178>
 80036a6:	4b45      	ldr	r3, [pc, #276]	; (80037bc <pvPortMalloc+0x1b0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d869      	bhi.n	8003784 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80036b0:	4b43      	ldr	r3, [pc, #268]	; (80037c0 <pvPortMalloc+0x1b4>)
 80036b2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80036b4:	4b42      	ldr	r3, [pc, #264]	; (80037c0 <pvPortMalloc+0x1b4>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036ba:	e004      	b.n	80036c6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d903      	bls.n	80036d8 <pvPortMalloc+0xcc>
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1f1      	bne.n	80036bc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80036d8:	4b36      	ldr	r3, [pc, #216]	; (80037b4 <pvPortMalloc+0x1a8>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036de:	429a      	cmp	r2, r3
 80036e0:	d050      	beq.n	8003784 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2208      	movs	r2, #8
 80036e8:	4413      	add	r3, r2
 80036ea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	1ad2      	subs	r2, r2, r3
 80036fc:	2308      	movs	r3, #8
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	429a      	cmp	r2, r3
 8003702:	d91f      	bls.n	8003744 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4413      	add	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <pvPortMalloc+0x120>
        __asm volatile
 8003716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	613b      	str	r3, [r7, #16]
    }
 8003728:	bf00      	nop
 800372a:	e7fe      	b.n	800372a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	1ad2      	subs	r2, r2, r3
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800373e:	69b8      	ldr	r0, [r7, #24]
 8003740:	f000 f908 	bl	8003954 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003744:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <pvPortMalloc+0x1b0>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	4a1b      	ldr	r2, [pc, #108]	; (80037bc <pvPortMalloc+0x1b0>)
 8003750:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003752:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <pvPortMalloc+0x1b0>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4b1b      	ldr	r3, [pc, #108]	; (80037c4 <pvPortMalloc+0x1b8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d203      	bcs.n	8003766 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800375e:	4b17      	ldr	r3, [pc, #92]	; (80037bc <pvPortMalloc+0x1b0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a18      	ldr	r2, [pc, #96]	; (80037c4 <pvPortMalloc+0x1b8>)
 8003764:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <pvPortMalloc+0x1ac>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	431a      	orrs	r2, r3
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800377a:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <pvPortMalloc+0x1bc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	3301      	adds	r3, #1
 8003780:	4a11      	ldr	r2, [pc, #68]	; (80037c8 <pvPortMalloc+0x1bc>)
 8003782:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003784:	f7fe fa78 	bl	8001c78 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <pvPortMalloc+0x19c>
        __asm volatile
 8003792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	60fb      	str	r3, [r7, #12]
    }
 80037a4:	bf00      	nop
 80037a6:	e7fe      	b.n	80037a6 <pvPortMalloc+0x19a>
    return pvReturn;
 80037a8:	69fb      	ldr	r3, [r7, #28]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3728      	adds	r7, #40	; 0x28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20012e90 	.word	0x20012e90
 80037b8:	20012ea4 	.word	0x20012ea4
 80037bc:	20012e94 	.word	0x20012e94
 80037c0:	20012e88 	.word	0x20012e88
 80037c4:	20012e98 	.word	0x20012e98
 80037c8:	20012e9c 	.word	0x20012e9c

080037cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d04d      	beq.n	800387a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80037de:	2308      	movs	r3, #8
 80037e0:	425b      	negs	r3, r3
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4413      	add	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	4b24      	ldr	r3, [pc, #144]	; (8003884 <vPortFree+0xb8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10a      	bne.n	8003810 <vPortFree+0x44>
        __asm volatile
 80037fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	60fb      	str	r3, [r7, #12]
    }
 800380c:	bf00      	nop
 800380e:	e7fe      	b.n	800380e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <vPortFree+0x62>
        __asm volatile
 8003818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381c:	f383 8811 	msr	BASEPRI, r3
 8003820:	f3bf 8f6f 	isb	sy
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	60bb      	str	r3, [r7, #8]
    }
 800382a:	bf00      	nop
 800382c:	e7fe      	b.n	800382c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	4b14      	ldr	r3, [pc, #80]	; (8003884 <vPortFree+0xb8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4013      	ands	r3, r2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01e      	beq.n	800387a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d11a      	bne.n	800387a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <vPortFree+0xb8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	43db      	mvns	r3, r3
 800384e:	401a      	ands	r2, r3
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003854:	f7fe fa02 	bl	8001c5c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <vPortFree+0xbc>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4413      	add	r3, r2
 8003862:	4a09      	ldr	r2, [pc, #36]	; (8003888 <vPortFree+0xbc>)
 8003864:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003866:	6938      	ldr	r0, [r7, #16]
 8003868:	f000 f874 	bl	8003954 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800386c:	4b07      	ldr	r3, [pc, #28]	; (800388c <vPortFree+0xc0>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3301      	adds	r3, #1
 8003872:	4a06      	ldr	r2, [pc, #24]	; (800388c <vPortFree+0xc0>)
 8003874:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003876:	f7fe f9ff 	bl	8001c78 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800387a:	bf00      	nop
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20012ea4 	.word	0x20012ea4
 8003888:	20012e94 	.word	0x20012e94
 800388c:	20012ea0 	.word	0x20012ea0

08003890 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003896:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800389a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800389c:	4b27      	ldr	r3, [pc, #156]	; (800393c <prvHeapInit+0xac>)
 800389e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00c      	beq.n	80038c4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	3307      	adds	r3, #7
 80038ae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0307 	bic.w	r3, r3, #7
 80038b6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	4a1f      	ldr	r2, [pc, #124]	; (800393c <prvHeapInit+0xac>)
 80038c0:	4413      	add	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80038c8:	4a1d      	ldr	r2, [pc, #116]	; (8003940 <prvHeapInit+0xb0>)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80038ce:	4b1c      	ldr	r3, [pc, #112]	; (8003940 <prvHeapInit+0xb0>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	4413      	add	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80038dc:	2208      	movs	r2, #8
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0307 	bic.w	r3, r3, #7
 80038ea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4a15      	ldr	r2, [pc, #84]	; (8003944 <prvHeapInit+0xb4>)
 80038f0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80038f2:	4b14      	ldr	r3, [pc, #80]	; (8003944 <prvHeapInit+0xb4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2200      	movs	r2, #0
 80038f8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80038fa:	4b12      	ldr	r3, [pc, #72]	; (8003944 <prvHeapInit+0xb4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	1ad2      	subs	r2, r2, r3
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <prvHeapInit+0xb4>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	4a0a      	ldr	r2, [pc, #40]	; (8003948 <prvHeapInit+0xb8>)
 800391e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4a09      	ldr	r2, [pc, #36]	; (800394c <prvHeapInit+0xbc>)
 8003926:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003928:	4b09      	ldr	r3, [pc, #36]	; (8003950 <prvHeapInit+0xc0>)
 800392a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800392e:	601a      	str	r2, [r3, #0]
}
 8003930:	bf00      	nop
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	20000288 	.word	0x20000288
 8003940:	20012e88 	.word	0x20012e88
 8003944:	20012e90 	.word	0x20012e90
 8003948:	20012e98 	.word	0x20012e98
 800394c:	20012e94 	.word	0x20012e94
 8003950:	20012ea4 	.word	0x20012ea4

08003954 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800395c:	4b28      	ldr	r3, [pc, #160]	; (8003a00 <prvInsertBlockIntoFreeList+0xac>)
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	e002      	b.n	8003968 <prvInsertBlockIntoFreeList+0x14>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	429a      	cmp	r2, r3
 8003970:	d8f7      	bhi.n	8003962 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	4413      	add	r3, r2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	429a      	cmp	r2, r3
 8003982:	d108      	bne.n	8003996 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	441a      	add	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	441a      	add	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d118      	bne.n	80039dc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <prvInsertBlockIntoFreeList+0xb0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d00d      	beq.n	80039d2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	441a      	add	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	e008      	b.n	80039e4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80039d2:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <prvInsertBlockIntoFreeList+0xb0>)
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	e003      	b.n	80039e4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d002      	beq.n	80039f2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80039f2:	bf00      	nop
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	20012e88 	.word	0x20012e88
 8003a04:	20012e90 	.word	0x20012e90

08003a08 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	4608      	mov	r0, r1
 8003a12:	4611      	mov	r1, r2
 8003a14:	461a      	mov	r2, r3
 8003a16:	4603      	mov	r3, r0
 8003a18:	70fb      	strb	r3, [r7, #3]
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	70bb      	strb	r3, [r7, #2]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	78fa      	ldrb	r2, [r7, #3]
 8003a26:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	78ba      	ldrb	r2, [r7, #2]
 8003a2c:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	787a      	ldrb	r2, [r7, #1]
 8003a32:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	7c3a      	ldrb	r2, [r7, #16]
 8003a38:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	7d3a      	ldrb	r2, [r7, #20]
 8003a3e:	715a      	strb	r2, [r3, #5]
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8003a54:	2300      	movs	r3, #0
 8003a56:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	4a88      	ldr	r2, [pc, #544]	; (8003c84 <GPIO_Config+0x238>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d106      	bne.n	8003a74 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 8003a66:	4b88      	ldr	r3, [pc, #544]	; (8003c88 <GPIO_Config+0x23c>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	4a87      	ldr	r2, [pc, #540]	; (8003c88 <GPIO_Config+0x23c>)
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	6313      	str	r3, [r2, #48]	; 0x30
 8003a72:	e03a      	b.n	8003aea <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4a84      	ldr	r2, [pc, #528]	; (8003c8c <GPIO_Config+0x240>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d106      	bne.n	8003a8c <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 8003a7e:	4b82      	ldr	r3, [pc, #520]	; (8003c88 <GPIO_Config+0x23c>)
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	4a81      	ldr	r2, [pc, #516]	; (8003c88 <GPIO_Config+0x23c>)
 8003a84:	f043 0302 	orr.w	r3, r3, #2
 8003a88:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8a:	e02e      	b.n	8003aea <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	4a7f      	ldr	r2, [pc, #508]	; (8003c90 <GPIO_Config+0x244>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d106      	bne.n	8003aa4 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 8003a96:	4b7c      	ldr	r3, [pc, #496]	; (8003c88 <GPIO_Config+0x23c>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	4a7b      	ldr	r2, [pc, #492]	; (8003c88 <GPIO_Config+0x23c>)
 8003a9c:	f043 0304 	orr.w	r3, r3, #4
 8003aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa2:	e022      	b.n	8003aea <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	4a7a      	ldr	r2, [pc, #488]	; (8003c94 <GPIO_Config+0x248>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d106      	bne.n	8003abc <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 8003aae:	4b76      	ldr	r3, [pc, #472]	; (8003c88 <GPIO_Config+0x23c>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	4a75      	ldr	r2, [pc, #468]	; (8003c88 <GPIO_Config+0x23c>)
 8003ab4:	f043 0308 	orr.w	r3, r3, #8
 8003ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aba:	e016      	b.n	8003aea <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	4a75      	ldr	r2, [pc, #468]	; (8003c98 <GPIO_Config+0x24c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d106      	bne.n	8003ad4 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 8003ac6:	4b70      	ldr	r3, [pc, #448]	; (8003c88 <GPIO_Config+0x23c>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	4a6f      	ldr	r2, [pc, #444]	; (8003c88 <GPIO_Config+0x23c>)
 8003acc:	f043 0310 	orr.w	r3, r3, #16
 8003ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad2:	e00a      	b.n	8003aea <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	4a70      	ldr	r2, [pc, #448]	; (8003c9c <GPIO_Config+0x250>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d105      	bne.n	8003aea <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 8003ade:	4b6a      	ldr	r3, [pc, #424]	; (8003c88 <GPIO_Config+0x23c>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	4a69      	ldr	r2, [pc, #420]	; (8003c88 <GPIO_Config+0x23c>)
 8003ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae8:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	785b      	ldrb	r3, [r3, #1]
 8003aee:	461a      	mov	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	2103      	movs	r1, #3
 8003b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	4619      	mov	r1, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	400a      	ands	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	6819      	ldr	r1, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	789b      	ldrb	r3, [r3, #2]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	4619      	mov	r1, r3
 8003b46:	2301      	movs	r3, #1
 8003b48:	408b      	lsls	r3, r1
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	400a      	ands	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	6859      	ldr	r1, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	78db      	ldrb	r3, [r3, #3]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	2103      	movs	r1, #3
 8003b86:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	400a      	ands	r2, r1
 8003b94:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	6899      	ldr	r1, [r3, #8]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	791b      	ldrb	r3, [r3, #4]
 8003baa:	461a      	mov	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	2103      	movs	r1, #3
 8003bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	4619      	mov	r1, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	400a      	ands	r2, r1
 8003bd4:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	68d9      	ldr	r1, [r3, #12]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	785b      	ldrb	r3, [r3, #1]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d143      	bne.n	8003c76 <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b07      	cmp	r3, #7
 8003bf4:	d81f      	bhi.n	8003c36 <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	6a1a      	ldr	r2, [r3, #32]
 8003c04:	210f      	movs	r1, #15
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	4619      	mov	r1, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	400a      	ands	r2, r1
 8003c16:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	6a1a      	ldr	r2, [r3, #32]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	795b      	ldrb	r3, [r3, #5]
 8003c22:	4619      	mov	r1, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8003c34:	e01f      	b.n	8003c76 <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	3b08      	subs	r3, #8
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c46:	210f      	movs	r1, #15
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	4619      	mov	r1, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	400a      	ands	r2, r1
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	795b      	ldrb	r3, [r3, #5]
 8003c64:	4619      	mov	r1, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003c76:	bf00      	nop
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40020000 	.word	0x40020000
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	40020400 	.word	0x40020400
 8003c90:	40020800 	.word	0x40020800
 8003c94:	40020c00 	.word	0x40020c00
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	40021c00 	.word	0x40021c00

08003ca0 <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	695a      	ldr	r2, [r3, #20]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	408b      	lsls	r3, r1
 8003cb8:	4619      	mov	r1, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	404a      	eors	r2, r1
 8003cc0:	615a      	str	r2, [r3, #20]
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 8003cda:	4a39      	ldr	r2, [pc, #228]	; (8003dc0 <configPLL+0xf0>)
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	2b31      	cmp	r3, #49	; 0x31
 8003ce4:	d804      	bhi.n	8003cf0 <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 8003ce6:	4b37      	ldr	r3, [pc, #220]	; (8003dc4 <configPLL+0xf4>)
 8003ce8:	4a36      	ldr	r2, [pc, #216]	; (8003dc4 <configPLL+0xf4>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	6093      	str	r3, [r2, #8]
 8003cee:	e005      	b.n	8003cfc <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003cf0:	4b34      	ldr	r3, [pc, #208]	; (8003dc4 <configPLL+0xf4>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	4a33      	ldr	r2, [pc, #204]	; (8003dc4 <configPLL+0xf4>)
 8003cf6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003cfa:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 8003cfc:	4b31      	ldr	r3, [pc, #196]	; (8003dc4 <configPLL+0xf4>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4a30      	ldr	r2, [pc, #192]	; (8003dc4 <configPLL+0xf4>)
 8003d02:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003d06:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 8003d08:	4b2e      	ldr	r3, [pc, #184]	; (8003dc4 <configPLL+0xf4>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	4a2d      	ldr	r2, [pc, #180]	; (8003dc4 <configPLL+0xf4>)
 8003d0e:	f043 0312 	orr.w	r3, r3, #18
 8003d12:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 8003d14:	4b2b      	ldr	r3, [pc, #172]	; (8003dc4 <configPLL+0xf4>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	79fa      	ldrb	r2, [r7, #7]
 8003d1a:	0092      	lsls	r2, r2, #2
 8003d1c:	3a0e      	subs	r2, #14
 8003d1e:	0192      	lsls	r2, r2, #6
 8003d20:	4611      	mov	r1, r2
 8003d22:	4a28      	ldr	r2, [pc, #160]	; (8003dc4 <configPLL+0xf4>)
 8003d24:	430b      	orrs	r3, r1
 8003d26:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 8003d28:	4b26      	ldr	r3, [pc, #152]	; (8003dc4 <configPLL+0xf4>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	4a25      	ldr	r2, [pc, #148]	; (8003dc4 <configPLL+0xf4>)
 8003d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d32:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 8003d34:	4b23      	ldr	r3, [pc, #140]	; (8003dc4 <configPLL+0xf4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a22      	ldr	r2, [pc, #136]	; (8003dc4 <configPLL+0xf4>)
 8003d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d3e:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8003d40:	e000      	b.n	8003d44 <configPLL+0x74>
	{
		__NOP();
 8003d42:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8003d44:	4b1f      	ldr	r3, [pc, #124]	; (8003dc4 <configPLL+0xf4>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f8      	beq.n	8003d42 <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	2b5a      	cmp	r3, #90	; 0x5a
 8003d54:	d909      	bls.n	8003d6a <configPLL+0x9a>
 8003d56:	79fb      	ldrb	r3, [r7, #7]
 8003d58:	2b64      	cmp	r3, #100	; 0x64
 8003d5a:	d806      	bhi.n	8003d6a <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <configPLL+0xf8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a19      	ldr	r2, [pc, #100]	; (8003dc8 <configPLL+0xf8>)
 8003d62:	f043 0303 	orr.w	r3, r3, #3
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	e01d      	b.n	8003da6 <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	2b40      	cmp	r3, #64	; 0x40
 8003d6e:	d909      	bls.n	8003d84 <configPLL+0xb4>
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	2b5a      	cmp	r3, #90	; 0x5a
 8003d74:	d806      	bhi.n	8003d84 <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 8003d76:	4b14      	ldr	r3, [pc, #80]	; (8003dc8 <configPLL+0xf8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a13      	ldr	r2, [pc, #76]	; (8003dc8 <configPLL+0xf8>)
 8003d7c:	f043 0302 	orr.w	r3, r3, #2
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	e010      	b.n	8003da6 <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	2b1e      	cmp	r3, #30
 8003d88:	d909      	bls.n	8003d9e <configPLL+0xce>
 8003d8a:	79fb      	ldrb	r3, [r7, #7]
 8003d8c:	2b40      	cmp	r3, #64	; 0x40
 8003d8e:	d806      	bhi.n	8003d9e <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 8003d90:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <configPLL+0xf8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a0c      	ldr	r2, [pc, #48]	; (8003dc8 <configPLL+0xf8>)
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	e003      	b.n	8003da6 <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 8003d9e:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <configPLL+0xf8>)
 8003da0:	4a09      	ldr	r2, [pc, #36]	; (8003dc8 <configPLL+0xf8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 8003da6:	4b07      	ldr	r3, [pc, #28]	; (8003dc4 <configPLL+0xf4>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	4a06      	ldr	r2, [pc, #24]	; (8003dc4 <configPLL+0xf4>)
 8003dac:	f043 0302 	orr.w	r3, r3, #2
 8003db0:	6093      	str	r3, [r2, #8]

}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	20012ea8 	.word	0x20012ea8
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40023c00 	.word	0x40023c00

08003dcc <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 8003dd6:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <getConfigPLL+0x30>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d103      	bne.n	8003dea <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 8003de2:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <getConfigPLL+0x34>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	71fb      	strb	r3, [r7, #7]
 8003de8:	e001      	b.n	8003dee <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 8003dea:	2310      	movs	r3, #16
 8003dec:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 8003dee:	79fb      	ldrb	r3, [r7, #7]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	20012ea8 	.word	0x20012ea8

08003e04 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 8003e0a:	f7ff ffdf 	bl	8003dcc <getConfigPLL>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 8003e12:	2300      	movs	r3, #0
 8003e14:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 8003e16:	79bb      	ldrb	r3, [r7, #6]
 8003e18:	2b31      	cmp	r3, #49	; 0x31
 8003e1a:	d802      	bhi.n	8003e22 <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 8003e1c:	79bb      	ldrb	r3, [r7, #6]
 8003e1e:	71fb      	strb	r3, [r7, #7]
 8003e20:	e002      	b.n	8003e28 <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 8003e22:	79bb      	ldrb	r3, [r7, #6]
 8003e24:	089b      	lsrs	r3, r3, #2
 8003e26:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 8003e28:	79fb      	ldrb	r3, [r7, #7]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <configMCO2>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2(uint8_t value)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0b11<<RCC_CFGR_MCO2_Pos);
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <configMCO2+0x34>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	4a09      	ldr	r2, [pc, #36]	; (8003e68 <configMCO2+0x34>)
 8003e44:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003e48:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (value<<RCC_CFGR_MCO2_Pos);
 8003e4a:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <configMCO2+0x34>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	79fa      	ldrb	r2, [r7, #7]
 8003e50:	0792      	lsls	r2, r2, #30
 8003e52:	4611      	mov	r1, r2
 8003e54:	4a04      	ldr	r2, [pc, #16]	; (8003e68 <configMCO2+0x34>)
 8003e56:	430b      	orrs	r3, r1
 8003e58:	6093      	str	r3, [r2, #8]
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40023800 	.word	0x40023800

08003e6c <configMCO2PRE>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2PRE(uint8_t value)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	71fb      	strb	r3, [r7, #7]
	//Selecionamos el prescaler de acuerdo al valor definido
	switch (value){
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d84b      	bhi.n	8003f16 <configMCO2PRE+0xaa>
 8003e7e:	a201      	add	r2, pc, #4	; (adr r2, 8003e84 <configMCO2PRE+0x18>)
 8003e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e84:	08003e99 	.word	0x08003e99
 8003e88:	08003eaf 	.word	0x08003eaf
 8003e8c:	08003ec9 	.word	0x08003ec9
 8003e90:	08003ee3 	.word	0x08003ee3
 8003e94:	08003efd 	.word	0x08003efd
		case 1:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8003e98:	4b23      	ldr	r3, [pc, #140]	; (8003f28 <configMCO2PRE+0xbc>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4a22      	ldr	r2, [pc, #136]	; (8003f28 <configMCO2PRE+0xbc>)
 8003e9e:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8003ea2:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b000<<RCC_CFGR_MCO2PRE_Pos);
 8003ea4:	4b20      	ldr	r3, [pc, #128]	; (8003f28 <configMCO2PRE+0xbc>)
 8003ea6:	4a20      	ldr	r2, [pc, #128]	; (8003f28 <configMCO2PRE+0xbc>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	6093      	str	r3, [r2, #8]
			break;
 8003eac:	e035      	b.n	8003f1a <configMCO2PRE+0xae>
		}
		case 2:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8003eae:	4b1e      	ldr	r3, [pc, #120]	; (8003f28 <configMCO2PRE+0xbc>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	4a1d      	ldr	r2, [pc, #116]	; (8003f28 <configMCO2PRE+0xbc>)
 8003eb4:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8003eb8:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100<<RCC_CFGR_MCO2PRE_Pos);
 8003eba:	4b1b      	ldr	r3, [pc, #108]	; (8003f28 <configMCO2PRE+0xbc>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	4a1a      	ldr	r2, [pc, #104]	; (8003f28 <configMCO2PRE+0xbc>)
 8003ec0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ec4:	6093      	str	r3, [r2, #8]
			break;
 8003ec6:	e028      	b.n	8003f1a <configMCO2PRE+0xae>
		}
		case 3:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8003ec8:	4b17      	ldr	r3, [pc, #92]	; (8003f28 <configMCO2PRE+0xbc>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	4a16      	ldr	r2, [pc, #88]	; (8003f28 <configMCO2PRE+0xbc>)
 8003ece:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8003ed2:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b101<<RCC_CFGR_MCO2PRE_Pos);
 8003ed4:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <configMCO2PRE+0xbc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4a13      	ldr	r2, [pc, #76]	; (8003f28 <configMCO2PRE+0xbc>)
 8003eda:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
 8003ede:	6093      	str	r3, [r2, #8]
			break;
 8003ee0:	e01b      	b.n	8003f1a <configMCO2PRE+0xae>
		}
		case 4:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8003ee2:	4b11      	ldr	r3, [pc, #68]	; (8003f28 <configMCO2PRE+0xbc>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	4a10      	ldr	r2, [pc, #64]	; (8003f28 <configMCO2PRE+0xbc>)
 8003ee8:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8003eec:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b110<<RCC_CFGR_MCO2PRE_Pos);
 8003eee:	4b0e      	ldr	r3, [pc, #56]	; (8003f28 <configMCO2PRE+0xbc>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	4a0d      	ldr	r2, [pc, #52]	; (8003f28 <configMCO2PRE+0xbc>)
 8003ef4:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8003ef8:	6093      	str	r3, [r2, #8]
			break;
 8003efa:	e00e      	b.n	8003f1a <configMCO2PRE+0xae>
		}
		case 5:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8003efc:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <configMCO2PRE+0xbc>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4a09      	ldr	r2, [pc, #36]	; (8003f28 <configMCO2PRE+0xbc>)
 8003f02:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8003f06:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b111<<RCC_CFGR_MCO2PRE_Pos);
 8003f08:	4b07      	ldr	r3, [pc, #28]	; (8003f28 <configMCO2PRE+0xbc>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	4a06      	ldr	r2, [pc, #24]	; (8003f28 <configMCO2PRE+0xbc>)
 8003f0e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8003f12:	6093      	str	r3, [r2, #8]
			break;
 8003f14:	e001      	b.n	8003f1a <configMCO2PRE+0xae>
		}
		default:
		{
			__NOP();
 8003f16:	bf00      	nop
			break;
 8003f18:	bf00      	nop
		}
	}

}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40023800 	.word	0x40023800

08003f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	db0b      	blt.n	8003f56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f3e:	79fb      	ldrb	r3, [r7, #7]
 8003f40:	f003 021f 	and.w	r2, r3, #31
 8003f44:	4907      	ldr	r1, [pc, #28]	; (8003f64 <__NVIC_EnableIRQ+0x38>)
 8003f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	2001      	movs	r0, #1
 8003f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	e000e100 	.word	0xe000e100

08003f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	6039      	str	r1, [r7, #0]
 8003f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	db0a      	blt.n	8003f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	490c      	ldr	r1, [pc, #48]	; (8003fb4 <__NVIC_SetPriority+0x4c>)
 8003f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f86:	0112      	lsls	r2, r2, #4
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f90:	e00a      	b.n	8003fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	4908      	ldr	r1, [pc, #32]	; (8003fb8 <__NVIC_SetPriority+0x50>)
 8003f98:	79fb      	ldrb	r3, [r7, #7]
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	3b04      	subs	r3, #4
 8003fa0:	0112      	lsls	r2, r2, #4
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	761a      	strb	r2, [r3, #24]
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	e000e100 	.word	0xe000e100
 8003fb8:	e000ed00 	.word	0xe000ed00

08003fbc <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	4a8f      	ldr	r2, [pc, #572]	; (8004208 <USART_Config+0x24c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d107      	bne.n	8003fde <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 8003fce:	4b8f      	ldr	r3, [pc, #572]	; (800420c <USART_Config+0x250>)
 8003fd0:	2210      	movs	r2, #16
 8003fd2:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	4a8d      	ldr	r2, [pc, #564]	; (8004210 <USART_Config+0x254>)
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	e019      	b.n	8004012 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	4a8c      	ldr	r2, [pc, #560]	; (8004214 <USART_Config+0x258>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d108      	bne.n	8003ffa <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 8003fe8:	4b88      	ldr	r3, [pc, #544]	; (800420c <USART_Config+0x250>)
 8003fea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003fee:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	4a88      	ldr	r2, [pc, #544]	; (8004218 <USART_Config+0x25c>)
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	e00b      	b.n	8004012 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	4a87      	ldr	r2, [pc, #540]	; (800421c <USART_Config+0x260>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d106      	bne.n	8004012 <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 8004004:	4b81      	ldr	r3, [pc, #516]	; (800420c <USART_Config+0x250>)
 8004006:	2220      	movs	r2, #32
 8004008:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	4a84      	ldr	r2, [pc, #528]	; (8004220 <USART_Config+0x264>)
 8004010:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2200      	movs	r2, #0
 8004018:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2200      	movs	r2, #0
 8004020:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	789b      	ldrb	r3, [r3, #2]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d03d      	beq.n	80040a6 <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004038:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004048:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004058:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004068:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	789b      	ldrb	r3, [r3, #2]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d110      	bne.n	8004094 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004080:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004090:	60da      	str	r2, [r3, #12]
 8004092:	e018      	b.n	80040c6 <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040a2:	60da      	str	r2, [r3, #12]
 80040a4:	e00f      	b.n	80040c6 <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b4:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040c4:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	78db      	ldrb	r3, [r3, #3]
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d84c      	bhi.n	8004168 <USART_Config+0x1ac>
 80040ce:	a201      	add	r2, pc, #4	; (adr r2, 80040d4 <USART_Config+0x118>)
 80040d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d4:	080040e5 	.word	0x080040e5
 80040d8:	08004103 	.word	0x08004103
 80040dc:	08004125 	.word	0x08004125
 80040e0:	08004147 	.word	0x08004147
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	691a      	ldr	r2, [r3, #16]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80040f2:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	6912      	ldr	r2, [r2, #16]
 80040fe:	611a      	str	r2, [r3, #16]
		break;
 8004100:	e041      	b.n	8004186 <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004110:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004120:	611a      	str	r2, [r3, #16]
		break;
 8004122:	e030      	b.n	8004186 <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	691a      	ldr	r2, [r3, #16]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004132:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004142:	611a      	str	r2, [r3, #16]
		break;
 8004144:	e01f      	b.n	8004186 <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004154:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004164:	611a      	str	r2, [r3, #16]
		break;
 8004166:	e00e      	b.n	8004186 <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004176:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	6912      	ldr	r2, [r2, #16]
 8004182:	611a      	str	r2, [r3, #16]
		break;
 8004184:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 8004186:	2300      	movs	r3, #0
 8004188:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	4a21      	ldr	r2, [pc, #132]	; (8004214 <USART_Config+0x258>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d104      	bne.n	800419e <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8004194:	f7ff fe36 	bl	8003e04 <getClockAPB1>
 8004198:	4603      	mov	r3, r0
 800419a:	73fb      	strb	r3, [r7, #15]
 800419c:	e003      	b.n	80041a6 <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 800419e:	f7ff fe15 	bl	8003dcc <getConfigPLL>
 80041a2:	4603      	mov	r3, r0
 80041a4:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	785b      	ldrb	r3, [r3, #1]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10b      	bne.n	80041c6 <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
 80041b0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 f95f 	bl	8004478 <getValueBaudRate>
 80041ba:	4603      	mov	r3, r0
 80041bc:	461a      	mov	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	609a      	str	r2, [r3, #8]
 80041c4:	e02f      	b.n	8004226 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	785b      	ldrb	r3, [r3, #1]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d10b      	bne.n	80041e6 <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 f94f 	bl	8004478 <getValueBaudRate>
 80041da:	4603      	mov	r3, r0
 80041dc:	461a      	mov	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	609a      	str	r2, [r3, #8]
 80041e4:	e01f      	b.n	8004226 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	785b      	ldrb	r3, [r3, #1]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d11a      	bne.n	8004224 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 f93f 	bl	8004478 <getValueBaudRate>
 80041fa:	4603      	mov	r3, r0
 80041fc:	461a      	mov	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	609a      	str	r2, [r3, #8]
 8004204:	e00f      	b.n	8004226 <USART_Config+0x26a>
 8004206:	bf00      	nop
 8004208:	40011000 	.word	0x40011000
 800420c:	40023800 	.word	0x40023800
 8004210:	20012eac 	.word	0x20012eac
 8004214:	40004400 	.word	0x40004400
 8004218:	20012eb0 	.word	0x20012eb0
 800421c:	40011400 	.word	0x40011400
 8004220:	20012eb4 	.word	0x20012eb4
	}
	else
	{
		__NOP();
 8004224:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b03      	cmp	r3, #3
 800422c:	d866      	bhi.n	80042fc <USART_Config+0x340>
 800422e:	a201      	add	r2, pc, #4	; (adr r2, 8004234 <USART_Config+0x278>)
 8004230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004234:	08004245 	.word	0x08004245
 8004238:	08004267 	.word	0x08004267
 800423c:	08004289 	.word	0x08004289
 8004240:	080042cb 	.word	0x080042cb
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f022 0208 	bic.w	r2, r2, #8
 8004252:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f042 0208 	orr.w	r2, r2, #8
 8004262:	60da      	str	r2, [r3, #12]

		break;
 8004264:	e063      	b.n	800432e <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f022 0204 	bic.w	r2, r2, #4
 8004274:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f042 0204 	orr.w	r2, r2, #4
 8004284:	60da      	str	r2, [r3, #12]

		break;
 8004286:	e052      	b.n	800432e <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f022 0208 	bic.w	r2, r2, #8
 8004296:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f042 0208 	orr.w	r2, r2, #8
 80042a6:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f022 0204 	bic.w	r2, r2, #4
 80042b6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f042 0204 	orr.w	r2, r2, #4
 80042c6:	60da      	str	r2, [r3, #12]


		break;
 80042c8:	e031      	b.n	800432e <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042d8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f022 0208 	bic.w	r2, r2, #8
 80042e8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f022 0204 	bic.w	r2, r2, #4
 80042f8:	60da      	str	r2, [r3, #12]
		break;
 80042fa:	e018      	b.n	800432e <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800430a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f022 0208 	bic.w	r2, r2, #8
 800431a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f022 0204 	bic.w	r2, r2, #4
 800432a:	60da      	str	r2, [r3, #12]
		break;
 800432c:	bf00      	nop
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800432e:	b672      	cpsid	i
}
 8004330:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	791b      	ldrb	r3, [r3, #4]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d110      	bne.n	800435c <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f022 0220 	bic.w	r2, r2, #32
 8004348:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f042 0220 	orr.w	r2, r2, #32
 8004358:	60da      	str	r2, [r3, #12]
 800435a:	e007      	b.n	800436c <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f022 0220 	bic.w	r2, r2, #32
 800436a:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	791b      	ldrb	r3, [r3, #4]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d003      	beq.n	800437c <USART_Config+0x3c0>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	795b      	ldrb	r3, [r3, #5]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d11a      	bne.n	80043b2 <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	4a1a      	ldr	r2, [pc, #104]	; (80043ec <USART_Config+0x430>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d103      	bne.n	800438e <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 8004386:	2025      	movs	r0, #37	; 0x25
 8004388:	f7ff fdd0 	bl	8003f2c <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800438c:	e013      	b.n	80043b6 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	4a17      	ldr	r2, [pc, #92]	; (80043f0 <USART_Config+0x434>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d103      	bne.n	80043a0 <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 8004398:	2026      	movs	r0, #38	; 0x26
 800439a:	f7ff fdc7 	bl	8003f2c <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800439e:	e00a      	b.n	80043b6 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	4a13      	ldr	r2, [pc, #76]	; (80043f4 <USART_Config+0x438>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d105      	bne.n	80043b6 <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 80043aa:	2047      	movs	r0, #71	; 0x47
 80043ac:	f7ff fdbe 	bl	8003f2c <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80043b0:	e001      	b.n	80043b6 <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 80043b2:	bf00      	nop
 80043b4:	e000      	b.n	80043b8 <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80043b6:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80043b8:	b662      	cpsie	i
}
 80043ba:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d00f      	beq.n	80043e4 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043d2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043e2:	60da      	str	r2, [r3, #12]
	}
}
 80043e4:	bf00      	nop
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40011000 	.word	0x40011000
 80043f0:	40004400 	.word	0x40004400
 80043f4:	40011400 	.word	0x40011400

080043f8 <usart_Config_Init_Priority>:

//------------Funcion para configurar las interrupciones------------------
void usart_Config_Init_Priority(USART_Handler_t *ptrUsartHandler, uint8_t newPriority)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8004404:	b672      	cpsid	i
}
 8004406:	bf00      	nop
	//Desactivamos las interupciones globales
	__disable_irq();
	//Verificamos si se selecciono alguna interrupcion
		if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	791b      	ldrb	r3, [r3, #4]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d003      	beq.n	8004418 <usart_Config_Init_Priority+0x20>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	795b      	ldrb	r3, [r3, #5]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d120      	bne.n	800445a <usart_Config_Init_Priority+0x62>
		{
			//Matriculamos la interrupcion en el NVIC
			if(ptrUsartHandler->ptrUSARTx == USART1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	4a13      	ldr	r2, [pc, #76]	; (800446c <usart_Config_Init_Priority+0x74>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d105      	bne.n	800442e <usart_Config_Init_Priority+0x36>
			{
				NVIC_SetPriority(USART1_IRQn, newPriority);
 8004422:	78fb      	ldrb	r3, [r7, #3]
 8004424:	4619      	mov	r1, r3
 8004426:	2025      	movs	r0, #37	; 0x25
 8004428:	f7ff fd9e 	bl	8003f68 <__NVIC_SetPriority>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 800442c:	e017      	b.n	800445e <usart_Config_Init_Priority+0x66>
			}
			else if(ptrUsartHandler->ptrUSARTx == USART2)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	4a0f      	ldr	r2, [pc, #60]	; (8004470 <usart_Config_Init_Priority+0x78>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d105      	bne.n	8004444 <usart_Config_Init_Priority+0x4c>
			{
				NVIC_SetPriority(USART2_IRQn, newPriority);
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	4619      	mov	r1, r3
 800443c:	2026      	movs	r0, #38	; 0x26
 800443e:	f7ff fd93 	bl	8003f68 <__NVIC_SetPriority>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 8004442:	e00c      	b.n	800445e <usart_Config_Init_Priority+0x66>
			}
			else if(ptrUsartHandler->ptrUSARTx == USART6)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	4a0a      	ldr	r2, [pc, #40]	; (8004474 <usart_Config_Init_Priority+0x7c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d107      	bne.n	800445e <usart_Config_Init_Priority+0x66>
			{
				NVIC_SetPriority(USART6_IRQn, newPriority);
 800444e:	78fb      	ldrb	r3, [r7, #3]
 8004450:	4619      	mov	r1, r3
 8004452:	2047      	movs	r0, #71	; 0x47
 8004454:	f7ff fd88 	bl	8003f68 <__NVIC_SetPriority>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 8004458:	e001      	b.n	800445e <usart_Config_Init_Priority+0x66>
			}
		}
		else
		{
			__NOP();
 800445a:	bf00      	nop
 800445c:	e000      	b.n	8004460 <usart_Config_Init_Priority+0x68>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 800445e:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8004460:	b662      	cpsie	i
}
 8004462:	bf00      	nop
		}
		//Activamos las interupciones globales
		__enable_irq();
}
 8004464:	bf00      	nop
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40011000 	.word	0x40011000
 8004470:	40004400 	.word	0x40004400
 8004474:	40011400 	.word	0x40011400

08004478 <getValueBaudRate>:

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 8004478:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800447c:	b086      	sub	sp, #24
 800447e:	af00      	add	r7, sp, #0
 8004480:	6039      	str	r1, [r7, #0]
 8004482:	4601      	mov	r1, r0
 8004484:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 8004486:	79f9      	ldrb	r1, [r7, #7]
 8004488:	2000      	movs	r0, #0
 800448a:	460a      	mov	r2, r1
 800448c:	4603      	mov	r3, r0
 800448e:	491f      	ldr	r1, [pc, #124]	; (800450c <getValueBaudRate+0x94>)
 8004490:	fb01 f003 	mul.w	r0, r1, r3
 8004494:	2102      	movs	r1, #2
 8004496:	fb02 f101 	mul.w	r1, r2, r1
 800449a:	4401      	add	r1, r0
 800449c:	481b      	ldr	r0, [pc, #108]	; (800450c <getValueBaudRate+0x94>)
 800449e:	fba2 4500 	umull	r4, r5, r2, r0
 80044a2:	194b      	adds	r3, r1, r5
 80044a4:	461d      	mov	r5, r3
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	2200      	movs	r2, #0
 80044ac:	4698      	mov	r8, r3
 80044ae:	4691      	mov	r9, r2
 80044b0:	4642      	mov	r2, r8
 80044b2:	464b      	mov	r3, r9
 80044b4:	4620      	mov	r0, r4
 80044b6:	4629      	mov	r1, r5
 80044b8:	f7fb fee2 	bl	8000280 <__aeabi_ldivmod>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4613      	mov	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	4a12      	ldr	r2, [pc, #72]	; (8004510 <getValueBaudRate+0x98>)
 80044c8:	fba2 2303 	umull	r2, r3, r2, r3
 80044cc:	0b5b      	lsrs	r3, r3, #13
 80044ce:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80044d6:	fb02 f303 	mul.w	r3, r2, r3
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80044e6:	4a0a      	ldr	r2, [pc, #40]	; (8004510 <getValueBaudRate+0x98>)
 80044e8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ec:	0a5b      	lsrs	r3, r3, #9
 80044ee:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	7afb      	ldrb	r3, [r7, #11]
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	4313      	orrs	r3, r2
 80044fe:	813b      	strh	r3, [r7, #8]

    return value;
 8004500:	893b      	ldrh	r3, [r7, #8]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800450c:	540be400 	.word	0x540be400
 8004510:	d1b71759 	.word	0xd1b71759

08004514 <writeChar>:

//---------------Funciones para la transmision de datos------------------------------
//Funcion para escribir un solo char
void writeChar(USART_Handler_t *ptrUsartHandler, uint8_t datatoSend)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	70fb      	strb	r3, [r7, #3]
	//Verificamos que no se este enviando un mensaje
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8004520:	e000      	b.n	8004524 <writeChar+0x10>
	{
		__NOP();
 8004522:	bf00      	nop
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f7      	beq.n	8004522 <writeChar+0xe>
	}
	//Almacenamos un elemento char en el registro USART_DR
	ptrUsartHandler->ptrUSARTx->DR = datatoSend;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	78fa      	ldrb	r2, [r7, #3]
 8004538:	605a      	str	r2, [r3, #4]

}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <writeMsg>:

//Funcion para escribir un string
void writeMsg(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8004550:	2300      	movs	r3, #0
 8004552:	73fb      	strb	r3, [r7, #15]

	while(MsgtoSend[i] != '\0')
 8004554:	e00a      	b.n	800456c <writeMsg+0x26>
	{
		writeChar(ptrUsartHandlerString, MsgtoSend[i]);
 8004556:	7bfb      	ldrb	r3, [r7, #15]
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	4413      	add	r3, r2
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	4619      	mov	r1, r3
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff ffd7 	bl	8004514 <writeChar>
		i++;
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	3301      	adds	r3, #1
 800456a:	73fb      	strb	r3, [r7, #15]
	while(MsgtoSend[i] != '\0')
 800456c:	7bfb      	ldrb	r3, [r7, #15]
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	4413      	add	r3, r2
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1ee      	bne.n	8004556 <writeMsg+0x10>
	}
}
 8004578:	bf00      	nop
 800457a:	bf00      	nop
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <getRxData>:
	}
}

//Funcion para leer un char
uint8_t getRxData(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
	return auxRxData;
 8004588:	4b03      	ldr	r3, [pc, #12]	; (8004598 <getRxData+0x14>)
 800458a:	781b      	ldrb	r3, [r3, #0]
}
 800458c:	4618      	mov	r0, r3
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	20012eb8 	.word	0x20012eb8

0800459c <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 80045a8:	78fb      	ldrb	r3, [r7, #3]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d10c      	bne.n	80045c8 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 80045c6:	e005      	b.n	80045d4 <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	60da      	str	r2, [r3, #12]
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <BasicUSART1_Callback>:


//Definimos las funciones para cuando se genera una interrupcion del USART1-2 y 6
__attribute__((weak)) void BasicUSART1_Callback()
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
	__NOP();
 80045e4:	bf00      	nop
}
 80045e6:	bf00      	nop
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <BasicUSART6_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART6_Callback()
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
	__NOP();
 80045f4:	bf00      	nop
}
 80045f6:	bf00      	nop
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 8004604:	4b37      	ldr	r3, [pc, #220]	; (80046e4 <USART1_IRQHandler+0xe4>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0320 	and.w	r3, r3, #32
 800460e:	2b00      	cmp	r3, #0
 8004610:	d008      	beq.n	8004624 <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 8004612:	4b34      	ldr	r3, [pc, #208]	; (80046e4 <USART1_IRQHandler+0xe4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	b2da      	uxtb	r2, r3
 800461a:	4b33      	ldr	r3, [pc, #204]	; (80046e8 <USART1_IRQHandler+0xe8>)
 800461c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 800461e:	f7ff ffdf 	bl	80045e0 <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 8004622:	e05d      	b.n	80046e0 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 8004624:	4b2f      	ldr	r3, [pc, #188]	; (80046e4 <USART1_IRQHandler+0xe4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462e:	2b00      	cmp	r3, #0
 8004630:	d055      	beq.n	80046de <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8004632:	4b2e      	ldr	r3, [pc, #184]	; (80046ec <USART1_IRQHandler+0xec>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10b      	bne.n	8004652 <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 800463a:	4b2d      	ldr	r3, [pc, #180]	; (80046f0 <USART1_IRQHandler+0xf0>)
 800463c:	781a      	ldrb	r2, [r3, #0]
 800463e:	4b29      	ldr	r3, [pc, #164]	; (80046e4 <USART1_IRQHandler+0xe4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8004644:	4b27      	ldr	r3, [pc, #156]	; (80046e4 <USART1_IRQHandler+0xe4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2100      	movs	r1, #0
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff ffa6 	bl	800459c <interruptionTX>
}
 8004650:	e046      	b.n	80046e0 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8004652:	4b26      	ldr	r3, [pc, #152]	; (80046ec <USART1_IRQHandler+0xec>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d142      	bne.n	80046e0 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 800465a:	4b26      	ldr	r3, [pc, #152]	; (80046f4 <USART1_IRQHandler+0xf4>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	461a      	mov	r2, r3
 8004660:	4b25      	ldr	r3, [pc, #148]	; (80046f8 <USART1_IRQHandler+0xf8>)
 8004662:	5c9b      	ldrb	r3, [r3, r2]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00e      	beq.n	8004686 <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 8004668:	4b22      	ldr	r3, [pc, #136]	; (80046f4 <USART1_IRQHandler+0xf4>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	461a      	mov	r2, r3
 800466e:	4b22      	ldr	r3, [pc, #136]	; (80046f8 <USART1_IRQHandler+0xf8>)
 8004670:	5c9a      	ldrb	r2, [r3, r2]
 8004672:	4b1c      	ldr	r3, [pc, #112]	; (80046e4 <USART1_IRQHandler+0xe4>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	605a      	str	r2, [r3, #4]
				posChar++;
 8004678:	4b1e      	ldr	r3, [pc, #120]	; (80046f4 <USART1_IRQHandler+0xf4>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	3301      	adds	r3, #1
 800467e:	b2da      	uxtb	r2, r3
 8004680:	4b1c      	ldr	r3, [pc, #112]	; (80046f4 <USART1_IRQHandler+0xf4>)
 8004682:	701a      	strb	r2, [r3, #0]
}
 8004684:	e02c      	b.n	80046e0 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8004686:	4b1d      	ldr	r3, [pc, #116]	; (80046fc <USART1_IRQHandler+0xfc>)
 8004688:	781a      	ldrb	r2, [r3, #0]
 800468a:	4b1d      	ldr	r3, [pc, #116]	; (8004700 <USART1_IRQHandler+0x100>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d215      	bcs.n	80046be <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8004692:	4b1a      	ldr	r3, [pc, #104]	; (80046fc <USART1_IRQHandler+0xfc>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	461a      	mov	r2, r3
 8004698:	2364      	movs	r3, #100	; 0x64
 800469a:	fb02 f303 	mul.w	r3, r2, r3
 800469e:	4a19      	ldr	r2, [pc, #100]	; (8004704 <USART1_IRQHandler+0x104>)
 80046a0:	4413      	add	r3, r2
 80046a2:	4619      	mov	r1, r3
 80046a4:	4814      	ldr	r0, [pc, #80]	; (80046f8 <USART1_IRQHandler+0xf8>)
 80046a6:	f000 f971 	bl	800498c <siprintf>
					posChar = 0;
 80046aa:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <USART1_IRQHandler+0xf4>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 80046b0:	4b12      	ldr	r3, [pc, #72]	; (80046fc <USART1_IRQHandler+0xfc>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	3301      	adds	r3, #1
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	4b10      	ldr	r3, [pc, #64]	; (80046fc <USART1_IRQHandler+0xfc>)
 80046ba:	701a      	strb	r2, [r3, #0]
}
 80046bc:	e010      	b.n	80046e0 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 80046be:	4b09      	ldr	r3, [pc, #36]	; (80046e4 <USART1_IRQHandler+0xe4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2100      	movs	r1, #0
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff ff69 	bl	800459c <interruptionTX>
					posChar = 0;
 80046ca:	4b0a      	ldr	r3, [pc, #40]	; (80046f4 <USART1_IRQHandler+0xf4>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 80046d0:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <USART1_IRQHandler+0xfc>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 80046d6:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <USART1_IRQHandler+0x100>)
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]
}
 80046dc:	e000      	b.n	80046e0 <USART1_IRQHandler+0xe0>
		__NOP();
 80046de:	bf00      	nop
}
 80046e0:	bf00      	nop
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	20012eac 	.word	0x20012eac
 80046e8:	20012eb8 	.word	0x20012eb8
 80046ec:	200136f3 	.word	0x200136f3
 80046f0:	20012eb9 	.word	0x20012eb9
 80046f4:	200136f2 	.word	0x200136f2
 80046f8:	20012ebc 	.word	0x20012ebc
 80046fc:	200136f1 	.word	0x200136f1
 8004700:	200136f0 	.word	0x200136f0
 8004704:	20012f20 	.word	0x20012f20

08004708 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 800470c:	4b37      	ldr	r3, [pc, #220]	; (80047ec <USART2_IRQHandler+0xe4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b00      	cmp	r3, #0
 8004718:	d008      	beq.n	800472c <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 800471a:	4b34      	ldr	r3, [pc, #208]	; (80047ec <USART2_IRQHandler+0xe4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	b2da      	uxtb	r2, r3
 8004722:	4b33      	ldr	r3, [pc, #204]	; (80047f0 <USART2_IRQHandler+0xe8>)
 8004724:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 8004726:	f7fc f8c9 	bl	80008bc <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 800472a:	e05d      	b.n	80047e8 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 800472c:	4b2f      	ldr	r3, [pc, #188]	; (80047ec <USART2_IRQHandler+0xe4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004736:	2b00      	cmp	r3, #0
 8004738:	d055      	beq.n	80047e6 <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800473a:	4b2e      	ldr	r3, [pc, #184]	; (80047f4 <USART2_IRQHandler+0xec>)
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10b      	bne.n	800475a <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 8004742:	4b2d      	ldr	r3, [pc, #180]	; (80047f8 <USART2_IRQHandler+0xf0>)
 8004744:	781a      	ldrb	r2, [r3, #0]
 8004746:	4b29      	ldr	r3, [pc, #164]	; (80047ec <USART2_IRQHandler+0xe4>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 800474c:	4b27      	ldr	r3, [pc, #156]	; (80047ec <USART2_IRQHandler+0xe4>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2100      	movs	r1, #0
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff ff22 	bl	800459c <interruptionTX>
}
 8004758:	e046      	b.n	80047e8 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800475a:	4b26      	ldr	r3, [pc, #152]	; (80047f4 <USART2_IRQHandler+0xec>)
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d142      	bne.n	80047e8 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8004762:	4b26      	ldr	r3, [pc, #152]	; (80047fc <USART2_IRQHandler+0xf4>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	4b25      	ldr	r3, [pc, #148]	; (8004800 <USART2_IRQHandler+0xf8>)
 800476a:	5c9b      	ldrb	r3, [r3, r2]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00e      	beq.n	800478e <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 8004770:	4b22      	ldr	r3, [pc, #136]	; (80047fc <USART2_IRQHandler+0xf4>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	461a      	mov	r2, r3
 8004776:	4b22      	ldr	r3, [pc, #136]	; (8004800 <USART2_IRQHandler+0xf8>)
 8004778:	5c9a      	ldrb	r2, [r3, r2]
 800477a:	4b1c      	ldr	r3, [pc, #112]	; (80047ec <USART2_IRQHandler+0xe4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	605a      	str	r2, [r3, #4]
				posChar++;
 8004780:	4b1e      	ldr	r3, [pc, #120]	; (80047fc <USART2_IRQHandler+0xf4>)
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	3301      	adds	r3, #1
 8004786:	b2da      	uxtb	r2, r3
 8004788:	4b1c      	ldr	r3, [pc, #112]	; (80047fc <USART2_IRQHandler+0xf4>)
 800478a:	701a      	strb	r2, [r3, #0]
}
 800478c:	e02c      	b.n	80047e8 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 800478e:	4b1d      	ldr	r3, [pc, #116]	; (8004804 <USART2_IRQHandler+0xfc>)
 8004790:	781a      	ldrb	r2, [r3, #0]
 8004792:	4b1d      	ldr	r3, [pc, #116]	; (8004808 <USART2_IRQHandler+0x100>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d215      	bcs.n	80047c6 <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800479a:	4b1a      	ldr	r3, [pc, #104]	; (8004804 <USART2_IRQHandler+0xfc>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	2364      	movs	r3, #100	; 0x64
 80047a2:	fb02 f303 	mul.w	r3, r2, r3
 80047a6:	4a19      	ldr	r2, [pc, #100]	; (800480c <USART2_IRQHandler+0x104>)
 80047a8:	4413      	add	r3, r2
 80047aa:	4619      	mov	r1, r3
 80047ac:	4814      	ldr	r0, [pc, #80]	; (8004800 <USART2_IRQHandler+0xf8>)
 80047ae:	f000 f8ed 	bl	800498c <siprintf>
					posChar = 0;
 80047b2:	4b12      	ldr	r3, [pc, #72]	; (80047fc <USART2_IRQHandler+0xf4>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 80047b8:	4b12      	ldr	r3, [pc, #72]	; (8004804 <USART2_IRQHandler+0xfc>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	3301      	adds	r3, #1
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	4b10      	ldr	r3, [pc, #64]	; (8004804 <USART2_IRQHandler+0xfc>)
 80047c2:	701a      	strb	r2, [r3, #0]
}
 80047c4:	e010      	b.n	80047e8 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 80047c6:	4b09      	ldr	r3, [pc, #36]	; (80047ec <USART2_IRQHandler+0xe4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2100      	movs	r1, #0
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff fee5 	bl	800459c <interruptionTX>
					posChar = 0;
 80047d2:	4b0a      	ldr	r3, [pc, #40]	; (80047fc <USART2_IRQHandler+0xf4>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 80047d8:	4b0a      	ldr	r3, [pc, #40]	; (8004804 <USART2_IRQHandler+0xfc>)
 80047da:	2200      	movs	r2, #0
 80047dc:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 80047de:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <USART2_IRQHandler+0x100>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	701a      	strb	r2, [r3, #0]
}
 80047e4:	e000      	b.n	80047e8 <USART2_IRQHandler+0xe0>
		__NOP();
 80047e6:	bf00      	nop
}
 80047e8:	bf00      	nop
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	20012eb0 	.word	0x20012eb0
 80047f0:	20012eb8 	.word	0x20012eb8
 80047f4:	200136f3 	.word	0x200136f3
 80047f8:	20012eb9 	.word	0x20012eb9
 80047fc:	200136f2 	.word	0x200136f2
 8004800:	20012ebc 	.word	0x20012ebc
 8004804:	200136f1 	.word	0x200136f1
 8004808:	200136f0 	.word	0x200136f0
 800480c:	20012f20 	.word	0x20012f20

08004810 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 8004814:	4b37      	ldr	r3, [pc, #220]	; (80048f4 <USART6_IRQHandler+0xe4>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b00      	cmp	r3, #0
 8004820:	d008      	beq.n	8004834 <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 8004822:	4b34      	ldr	r3, [pc, #208]	; (80048f4 <USART6_IRQHandler+0xe4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	b2da      	uxtb	r2, r3
 800482a:	4b33      	ldr	r3, [pc, #204]	; (80048f8 <USART6_IRQHandler+0xe8>)
 800482c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 800482e:	f7ff fedf 	bl	80045f0 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 8004832:	e05d      	b.n	80048f0 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 8004834:	4b2f      	ldr	r3, [pc, #188]	; (80048f4 <USART6_IRQHandler+0xe4>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483e:	2b00      	cmp	r3, #0
 8004840:	d055      	beq.n	80048ee <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8004842:	4b2e      	ldr	r3, [pc, #184]	; (80048fc <USART6_IRQHandler+0xec>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10b      	bne.n	8004862 <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 800484a:	4b2d      	ldr	r3, [pc, #180]	; (8004900 <USART6_IRQHandler+0xf0>)
 800484c:	781a      	ldrb	r2, [r3, #0]
 800484e:	4b29      	ldr	r3, [pc, #164]	; (80048f4 <USART6_IRQHandler+0xe4>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8004854:	4b27      	ldr	r3, [pc, #156]	; (80048f4 <USART6_IRQHandler+0xe4>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2100      	movs	r1, #0
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff fe9e 	bl	800459c <interruptionTX>
}
 8004860:	e046      	b.n	80048f0 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8004862:	4b26      	ldr	r3, [pc, #152]	; (80048fc <USART6_IRQHandler+0xec>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d142      	bne.n	80048f0 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 800486a:	4b26      	ldr	r3, [pc, #152]	; (8004904 <USART6_IRQHandler+0xf4>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	4b25      	ldr	r3, [pc, #148]	; (8004908 <USART6_IRQHandler+0xf8>)
 8004872:	5c9b      	ldrb	r3, [r3, r2]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00e      	beq.n	8004896 <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 8004878:	4b22      	ldr	r3, [pc, #136]	; (8004904 <USART6_IRQHandler+0xf4>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	461a      	mov	r2, r3
 800487e:	4b22      	ldr	r3, [pc, #136]	; (8004908 <USART6_IRQHandler+0xf8>)
 8004880:	5c9a      	ldrb	r2, [r3, r2]
 8004882:	4b1c      	ldr	r3, [pc, #112]	; (80048f4 <USART6_IRQHandler+0xe4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	605a      	str	r2, [r3, #4]
				posChar++;
 8004888:	4b1e      	ldr	r3, [pc, #120]	; (8004904 <USART6_IRQHandler+0xf4>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	3301      	adds	r3, #1
 800488e:	b2da      	uxtb	r2, r3
 8004890:	4b1c      	ldr	r3, [pc, #112]	; (8004904 <USART6_IRQHandler+0xf4>)
 8004892:	701a      	strb	r2, [r3, #0]
}
 8004894:	e02c      	b.n	80048f0 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8004896:	4b1d      	ldr	r3, [pc, #116]	; (800490c <USART6_IRQHandler+0xfc>)
 8004898:	781a      	ldrb	r2, [r3, #0]
 800489a:	4b1d      	ldr	r3, [pc, #116]	; (8004910 <USART6_IRQHandler+0x100>)
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d215      	bcs.n	80048ce <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80048a2:	4b1a      	ldr	r3, [pc, #104]	; (800490c <USART6_IRQHandler+0xfc>)
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	2364      	movs	r3, #100	; 0x64
 80048aa:	fb02 f303 	mul.w	r3, r2, r3
 80048ae:	4a19      	ldr	r2, [pc, #100]	; (8004914 <USART6_IRQHandler+0x104>)
 80048b0:	4413      	add	r3, r2
 80048b2:	4619      	mov	r1, r3
 80048b4:	4814      	ldr	r0, [pc, #80]	; (8004908 <USART6_IRQHandler+0xf8>)
 80048b6:	f000 f869 	bl	800498c <siprintf>
					posChar = 0;
 80048ba:	4b12      	ldr	r3, [pc, #72]	; (8004904 <USART6_IRQHandler+0xf4>)
 80048bc:	2200      	movs	r2, #0
 80048be:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 80048c0:	4b12      	ldr	r3, [pc, #72]	; (800490c <USART6_IRQHandler+0xfc>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	3301      	adds	r3, #1
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	4b10      	ldr	r3, [pc, #64]	; (800490c <USART6_IRQHandler+0xfc>)
 80048ca:	701a      	strb	r2, [r3, #0]
}
 80048cc:	e010      	b.n	80048f0 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 80048ce:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <USART6_IRQHandler+0xe4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2100      	movs	r1, #0
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff fe61 	bl	800459c <interruptionTX>
					posChar = 0;
 80048da:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <USART6_IRQHandler+0xf4>)
 80048dc:	2200      	movs	r2, #0
 80048de:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 80048e0:	4b0a      	ldr	r3, [pc, #40]	; (800490c <USART6_IRQHandler+0xfc>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 80048e6:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <USART6_IRQHandler+0x100>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	701a      	strb	r2, [r3, #0]
}
 80048ec:	e000      	b.n	80048f0 <USART6_IRQHandler+0xe0>
		__NOP();
 80048ee:	bf00      	nop
}
 80048f0:	bf00      	nop
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	20012eb4 	.word	0x20012eb4
 80048f8:	20012eb8 	.word	0x20012eb8
 80048fc:	200136f3 	.word	0x200136f3
 8004900:	20012eb9 	.word	0x20012eb9
 8004904:	200136f2 	.word	0x200136f2
 8004908:	20012ebc 	.word	0x20012ebc
 800490c:	200136f1 	.word	0x200136f1
 8004910:	200136f0 	.word	0x200136f0
 8004914:	20012f20 	.word	0x20012f20

08004918 <__libc_init_array>:
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	4d0d      	ldr	r5, [pc, #52]	; (8004950 <__libc_init_array+0x38>)
 800491c:	4c0d      	ldr	r4, [pc, #52]	; (8004954 <__libc_init_array+0x3c>)
 800491e:	1b64      	subs	r4, r4, r5
 8004920:	10a4      	asrs	r4, r4, #2
 8004922:	2600      	movs	r6, #0
 8004924:	42a6      	cmp	r6, r4
 8004926:	d109      	bne.n	800493c <__libc_init_array+0x24>
 8004928:	4d0b      	ldr	r5, [pc, #44]	; (8004958 <__libc_init_array+0x40>)
 800492a:	4c0c      	ldr	r4, [pc, #48]	; (800495c <__libc_init_array+0x44>)
 800492c:	f000 fc9c 	bl	8005268 <_init>
 8004930:	1b64      	subs	r4, r4, r5
 8004932:	10a4      	asrs	r4, r4, #2
 8004934:	2600      	movs	r6, #0
 8004936:	42a6      	cmp	r6, r4
 8004938:	d105      	bne.n	8004946 <__libc_init_array+0x2e>
 800493a:	bd70      	pop	{r4, r5, r6, pc}
 800493c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004940:	4798      	blx	r3
 8004942:	3601      	adds	r6, #1
 8004944:	e7ee      	b.n	8004924 <__libc_init_array+0xc>
 8004946:	f855 3b04 	ldr.w	r3, [r5], #4
 800494a:	4798      	blx	r3
 800494c:	3601      	adds	r6, #1
 800494e:	e7f2      	b.n	8004936 <__libc_init_array+0x1e>
 8004950:	08005454 	.word	0x08005454
 8004954:	08005454 	.word	0x08005454
 8004958:	08005454 	.word	0x08005454
 800495c:	08005458 	.word	0x08005458

08004960 <memcpy>:
 8004960:	440a      	add	r2, r1
 8004962:	4291      	cmp	r1, r2
 8004964:	f100 33ff 	add.w	r3, r0, #4294967295
 8004968:	d100      	bne.n	800496c <memcpy+0xc>
 800496a:	4770      	bx	lr
 800496c:	b510      	push	{r4, lr}
 800496e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004972:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004976:	4291      	cmp	r1, r2
 8004978:	d1f9      	bne.n	800496e <memcpy+0xe>
 800497a:	bd10      	pop	{r4, pc}

0800497c <memset>:
 800497c:	4402      	add	r2, r0
 800497e:	4603      	mov	r3, r0
 8004980:	4293      	cmp	r3, r2
 8004982:	d100      	bne.n	8004986 <memset+0xa>
 8004984:	4770      	bx	lr
 8004986:	f803 1b01 	strb.w	r1, [r3], #1
 800498a:	e7f9      	b.n	8004980 <memset+0x4>

0800498c <siprintf>:
 800498c:	b40e      	push	{r1, r2, r3}
 800498e:	b500      	push	{lr}
 8004990:	b09c      	sub	sp, #112	; 0x70
 8004992:	ab1d      	add	r3, sp, #116	; 0x74
 8004994:	9002      	str	r0, [sp, #8]
 8004996:	9006      	str	r0, [sp, #24]
 8004998:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800499c:	4809      	ldr	r0, [pc, #36]	; (80049c4 <siprintf+0x38>)
 800499e:	9107      	str	r1, [sp, #28]
 80049a0:	9104      	str	r1, [sp, #16]
 80049a2:	4909      	ldr	r1, [pc, #36]	; (80049c8 <siprintf+0x3c>)
 80049a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80049a8:	9105      	str	r1, [sp, #20]
 80049aa:	6800      	ldr	r0, [r0, #0]
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	a902      	add	r1, sp, #8
 80049b0:	f000 f868 	bl	8004a84 <_svfiprintf_r>
 80049b4:	9b02      	ldr	r3, [sp, #8]
 80049b6:	2200      	movs	r2, #0
 80049b8:	701a      	strb	r2, [r3, #0]
 80049ba:	b01c      	add	sp, #112	; 0x70
 80049bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80049c0:	b003      	add	sp, #12
 80049c2:	4770      	bx	lr
 80049c4:	20000024 	.word	0x20000024
 80049c8:	ffff0208 	.word	0xffff0208

080049cc <__ssputs_r>:
 80049cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049d0:	688e      	ldr	r6, [r1, #8]
 80049d2:	429e      	cmp	r6, r3
 80049d4:	4682      	mov	sl, r0
 80049d6:	460c      	mov	r4, r1
 80049d8:	4690      	mov	r8, r2
 80049da:	461f      	mov	r7, r3
 80049dc:	d838      	bhi.n	8004a50 <__ssputs_r+0x84>
 80049de:	898a      	ldrh	r2, [r1, #12]
 80049e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049e4:	d032      	beq.n	8004a4c <__ssputs_r+0x80>
 80049e6:	6825      	ldr	r5, [r4, #0]
 80049e8:	6909      	ldr	r1, [r1, #16]
 80049ea:	eba5 0901 	sub.w	r9, r5, r1
 80049ee:	6965      	ldr	r5, [r4, #20]
 80049f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049f8:	3301      	adds	r3, #1
 80049fa:	444b      	add	r3, r9
 80049fc:	106d      	asrs	r5, r5, #1
 80049fe:	429d      	cmp	r5, r3
 8004a00:	bf38      	it	cc
 8004a02:	461d      	movcc	r5, r3
 8004a04:	0553      	lsls	r3, r2, #21
 8004a06:	d531      	bpl.n	8004a6c <__ssputs_r+0xa0>
 8004a08:	4629      	mov	r1, r5
 8004a0a:	f000 fb55 	bl	80050b8 <_malloc_r>
 8004a0e:	4606      	mov	r6, r0
 8004a10:	b950      	cbnz	r0, 8004a28 <__ssputs_r+0x5c>
 8004a12:	230c      	movs	r3, #12
 8004a14:	f8ca 3000 	str.w	r3, [sl]
 8004a18:	89a3      	ldrh	r3, [r4, #12]
 8004a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a1e:	81a3      	strh	r3, [r4, #12]
 8004a20:	f04f 30ff 	mov.w	r0, #4294967295
 8004a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a28:	6921      	ldr	r1, [r4, #16]
 8004a2a:	464a      	mov	r2, r9
 8004a2c:	f7ff ff98 	bl	8004960 <memcpy>
 8004a30:	89a3      	ldrh	r3, [r4, #12]
 8004a32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a3a:	81a3      	strh	r3, [r4, #12]
 8004a3c:	6126      	str	r6, [r4, #16]
 8004a3e:	6165      	str	r5, [r4, #20]
 8004a40:	444e      	add	r6, r9
 8004a42:	eba5 0509 	sub.w	r5, r5, r9
 8004a46:	6026      	str	r6, [r4, #0]
 8004a48:	60a5      	str	r5, [r4, #8]
 8004a4a:	463e      	mov	r6, r7
 8004a4c:	42be      	cmp	r6, r7
 8004a4e:	d900      	bls.n	8004a52 <__ssputs_r+0x86>
 8004a50:	463e      	mov	r6, r7
 8004a52:	6820      	ldr	r0, [r4, #0]
 8004a54:	4632      	mov	r2, r6
 8004a56:	4641      	mov	r1, r8
 8004a58:	f000 faa8 	bl	8004fac <memmove>
 8004a5c:	68a3      	ldr	r3, [r4, #8]
 8004a5e:	1b9b      	subs	r3, r3, r6
 8004a60:	60a3      	str	r3, [r4, #8]
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	4433      	add	r3, r6
 8004a66:	6023      	str	r3, [r4, #0]
 8004a68:	2000      	movs	r0, #0
 8004a6a:	e7db      	b.n	8004a24 <__ssputs_r+0x58>
 8004a6c:	462a      	mov	r2, r5
 8004a6e:	f000 fb97 	bl	80051a0 <_realloc_r>
 8004a72:	4606      	mov	r6, r0
 8004a74:	2800      	cmp	r0, #0
 8004a76:	d1e1      	bne.n	8004a3c <__ssputs_r+0x70>
 8004a78:	6921      	ldr	r1, [r4, #16]
 8004a7a:	4650      	mov	r0, sl
 8004a7c:	f000 fab0 	bl	8004fe0 <_free_r>
 8004a80:	e7c7      	b.n	8004a12 <__ssputs_r+0x46>
	...

08004a84 <_svfiprintf_r>:
 8004a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a88:	4698      	mov	r8, r3
 8004a8a:	898b      	ldrh	r3, [r1, #12]
 8004a8c:	061b      	lsls	r3, r3, #24
 8004a8e:	b09d      	sub	sp, #116	; 0x74
 8004a90:	4607      	mov	r7, r0
 8004a92:	460d      	mov	r5, r1
 8004a94:	4614      	mov	r4, r2
 8004a96:	d50e      	bpl.n	8004ab6 <_svfiprintf_r+0x32>
 8004a98:	690b      	ldr	r3, [r1, #16]
 8004a9a:	b963      	cbnz	r3, 8004ab6 <_svfiprintf_r+0x32>
 8004a9c:	2140      	movs	r1, #64	; 0x40
 8004a9e:	f000 fb0b 	bl	80050b8 <_malloc_r>
 8004aa2:	6028      	str	r0, [r5, #0]
 8004aa4:	6128      	str	r0, [r5, #16]
 8004aa6:	b920      	cbnz	r0, 8004ab2 <_svfiprintf_r+0x2e>
 8004aa8:	230c      	movs	r3, #12
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab0:	e0d1      	b.n	8004c56 <_svfiprintf_r+0x1d2>
 8004ab2:	2340      	movs	r3, #64	; 0x40
 8004ab4:	616b      	str	r3, [r5, #20]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8004aba:	2320      	movs	r3, #32
 8004abc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ac0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ac4:	2330      	movs	r3, #48	; 0x30
 8004ac6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004c70 <_svfiprintf_r+0x1ec>
 8004aca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ace:	f04f 0901 	mov.w	r9, #1
 8004ad2:	4623      	mov	r3, r4
 8004ad4:	469a      	mov	sl, r3
 8004ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ada:	b10a      	cbz	r2, 8004ae0 <_svfiprintf_r+0x5c>
 8004adc:	2a25      	cmp	r2, #37	; 0x25
 8004ade:	d1f9      	bne.n	8004ad4 <_svfiprintf_r+0x50>
 8004ae0:	ebba 0b04 	subs.w	fp, sl, r4
 8004ae4:	d00b      	beq.n	8004afe <_svfiprintf_r+0x7a>
 8004ae6:	465b      	mov	r3, fp
 8004ae8:	4622      	mov	r2, r4
 8004aea:	4629      	mov	r1, r5
 8004aec:	4638      	mov	r0, r7
 8004aee:	f7ff ff6d 	bl	80049cc <__ssputs_r>
 8004af2:	3001      	adds	r0, #1
 8004af4:	f000 80aa 	beq.w	8004c4c <_svfiprintf_r+0x1c8>
 8004af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004afa:	445a      	add	r2, fp
 8004afc:	9209      	str	r2, [sp, #36]	; 0x24
 8004afe:	f89a 3000 	ldrb.w	r3, [sl]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 80a2 	beq.w	8004c4c <_svfiprintf_r+0x1c8>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b12:	f10a 0a01 	add.w	sl, sl, #1
 8004b16:	9304      	str	r3, [sp, #16]
 8004b18:	9307      	str	r3, [sp, #28]
 8004b1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b1e:	931a      	str	r3, [sp, #104]	; 0x68
 8004b20:	4654      	mov	r4, sl
 8004b22:	2205      	movs	r2, #5
 8004b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b28:	4851      	ldr	r0, [pc, #324]	; (8004c70 <_svfiprintf_r+0x1ec>)
 8004b2a:	f7fb fb59 	bl	80001e0 <memchr>
 8004b2e:	9a04      	ldr	r2, [sp, #16]
 8004b30:	b9d8      	cbnz	r0, 8004b6a <_svfiprintf_r+0xe6>
 8004b32:	06d0      	lsls	r0, r2, #27
 8004b34:	bf44      	itt	mi
 8004b36:	2320      	movmi	r3, #32
 8004b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b3c:	0711      	lsls	r1, r2, #28
 8004b3e:	bf44      	itt	mi
 8004b40:	232b      	movmi	r3, #43	; 0x2b
 8004b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b46:	f89a 3000 	ldrb.w	r3, [sl]
 8004b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b4c:	d015      	beq.n	8004b7a <_svfiprintf_r+0xf6>
 8004b4e:	9a07      	ldr	r2, [sp, #28]
 8004b50:	4654      	mov	r4, sl
 8004b52:	2000      	movs	r0, #0
 8004b54:	f04f 0c0a 	mov.w	ip, #10
 8004b58:	4621      	mov	r1, r4
 8004b5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b5e:	3b30      	subs	r3, #48	; 0x30
 8004b60:	2b09      	cmp	r3, #9
 8004b62:	d94e      	bls.n	8004c02 <_svfiprintf_r+0x17e>
 8004b64:	b1b0      	cbz	r0, 8004b94 <_svfiprintf_r+0x110>
 8004b66:	9207      	str	r2, [sp, #28]
 8004b68:	e014      	b.n	8004b94 <_svfiprintf_r+0x110>
 8004b6a:	eba0 0308 	sub.w	r3, r0, r8
 8004b6e:	fa09 f303 	lsl.w	r3, r9, r3
 8004b72:	4313      	orrs	r3, r2
 8004b74:	9304      	str	r3, [sp, #16]
 8004b76:	46a2      	mov	sl, r4
 8004b78:	e7d2      	b.n	8004b20 <_svfiprintf_r+0x9c>
 8004b7a:	9b03      	ldr	r3, [sp, #12]
 8004b7c:	1d19      	adds	r1, r3, #4
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	9103      	str	r1, [sp, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	bfbb      	ittet	lt
 8004b86:	425b      	neglt	r3, r3
 8004b88:	f042 0202 	orrlt.w	r2, r2, #2
 8004b8c:	9307      	strge	r3, [sp, #28]
 8004b8e:	9307      	strlt	r3, [sp, #28]
 8004b90:	bfb8      	it	lt
 8004b92:	9204      	strlt	r2, [sp, #16]
 8004b94:	7823      	ldrb	r3, [r4, #0]
 8004b96:	2b2e      	cmp	r3, #46	; 0x2e
 8004b98:	d10c      	bne.n	8004bb4 <_svfiprintf_r+0x130>
 8004b9a:	7863      	ldrb	r3, [r4, #1]
 8004b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8004b9e:	d135      	bne.n	8004c0c <_svfiprintf_r+0x188>
 8004ba0:	9b03      	ldr	r3, [sp, #12]
 8004ba2:	1d1a      	adds	r2, r3, #4
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	9203      	str	r2, [sp, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	bfb8      	it	lt
 8004bac:	f04f 33ff 	movlt.w	r3, #4294967295
 8004bb0:	3402      	adds	r4, #2
 8004bb2:	9305      	str	r3, [sp, #20]
 8004bb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c80 <_svfiprintf_r+0x1fc>
 8004bb8:	7821      	ldrb	r1, [r4, #0]
 8004bba:	2203      	movs	r2, #3
 8004bbc:	4650      	mov	r0, sl
 8004bbe:	f7fb fb0f 	bl	80001e0 <memchr>
 8004bc2:	b140      	cbz	r0, 8004bd6 <_svfiprintf_r+0x152>
 8004bc4:	2340      	movs	r3, #64	; 0x40
 8004bc6:	eba0 000a 	sub.w	r0, r0, sl
 8004bca:	fa03 f000 	lsl.w	r0, r3, r0
 8004bce:	9b04      	ldr	r3, [sp, #16]
 8004bd0:	4303      	orrs	r3, r0
 8004bd2:	3401      	adds	r4, #1
 8004bd4:	9304      	str	r3, [sp, #16]
 8004bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bda:	4826      	ldr	r0, [pc, #152]	; (8004c74 <_svfiprintf_r+0x1f0>)
 8004bdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004be0:	2206      	movs	r2, #6
 8004be2:	f7fb fafd 	bl	80001e0 <memchr>
 8004be6:	2800      	cmp	r0, #0
 8004be8:	d038      	beq.n	8004c5c <_svfiprintf_r+0x1d8>
 8004bea:	4b23      	ldr	r3, [pc, #140]	; (8004c78 <_svfiprintf_r+0x1f4>)
 8004bec:	bb1b      	cbnz	r3, 8004c36 <_svfiprintf_r+0x1b2>
 8004bee:	9b03      	ldr	r3, [sp, #12]
 8004bf0:	3307      	adds	r3, #7
 8004bf2:	f023 0307 	bic.w	r3, r3, #7
 8004bf6:	3308      	adds	r3, #8
 8004bf8:	9303      	str	r3, [sp, #12]
 8004bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bfc:	4433      	add	r3, r6
 8004bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8004c00:	e767      	b.n	8004ad2 <_svfiprintf_r+0x4e>
 8004c02:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c06:	460c      	mov	r4, r1
 8004c08:	2001      	movs	r0, #1
 8004c0a:	e7a5      	b.n	8004b58 <_svfiprintf_r+0xd4>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	3401      	adds	r4, #1
 8004c10:	9305      	str	r3, [sp, #20]
 8004c12:	4619      	mov	r1, r3
 8004c14:	f04f 0c0a 	mov.w	ip, #10
 8004c18:	4620      	mov	r0, r4
 8004c1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c1e:	3a30      	subs	r2, #48	; 0x30
 8004c20:	2a09      	cmp	r2, #9
 8004c22:	d903      	bls.n	8004c2c <_svfiprintf_r+0x1a8>
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0c5      	beq.n	8004bb4 <_svfiprintf_r+0x130>
 8004c28:	9105      	str	r1, [sp, #20]
 8004c2a:	e7c3      	b.n	8004bb4 <_svfiprintf_r+0x130>
 8004c2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c30:	4604      	mov	r4, r0
 8004c32:	2301      	movs	r3, #1
 8004c34:	e7f0      	b.n	8004c18 <_svfiprintf_r+0x194>
 8004c36:	ab03      	add	r3, sp, #12
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	462a      	mov	r2, r5
 8004c3c:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <_svfiprintf_r+0x1f8>)
 8004c3e:	a904      	add	r1, sp, #16
 8004c40:	4638      	mov	r0, r7
 8004c42:	f3af 8000 	nop.w
 8004c46:	1c42      	adds	r2, r0, #1
 8004c48:	4606      	mov	r6, r0
 8004c4a:	d1d6      	bne.n	8004bfa <_svfiprintf_r+0x176>
 8004c4c:	89ab      	ldrh	r3, [r5, #12]
 8004c4e:	065b      	lsls	r3, r3, #25
 8004c50:	f53f af2c 	bmi.w	8004aac <_svfiprintf_r+0x28>
 8004c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c56:	b01d      	add	sp, #116	; 0x74
 8004c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c5c:	ab03      	add	r3, sp, #12
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	462a      	mov	r2, r5
 8004c62:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <_svfiprintf_r+0x1f8>)
 8004c64:	a904      	add	r1, sp, #16
 8004c66:	4638      	mov	r0, r7
 8004c68:	f000 f87a 	bl	8004d60 <_printf_i>
 8004c6c:	e7eb      	b.n	8004c46 <_svfiprintf_r+0x1c2>
 8004c6e:	bf00      	nop
 8004c70:	08005419 	.word	0x08005419
 8004c74:	08005423 	.word	0x08005423
 8004c78:	00000000 	.word	0x00000000
 8004c7c:	080049cd 	.word	0x080049cd
 8004c80:	0800541f 	.word	0x0800541f

08004c84 <_printf_common>:
 8004c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c88:	4616      	mov	r6, r2
 8004c8a:	4699      	mov	r9, r3
 8004c8c:	688a      	ldr	r2, [r1, #8]
 8004c8e:	690b      	ldr	r3, [r1, #16]
 8004c90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c94:	4293      	cmp	r3, r2
 8004c96:	bfb8      	it	lt
 8004c98:	4613      	movlt	r3, r2
 8004c9a:	6033      	str	r3, [r6, #0]
 8004c9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ca0:	4607      	mov	r7, r0
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	b10a      	cbz	r2, 8004caa <_printf_common+0x26>
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	6033      	str	r3, [r6, #0]
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	0699      	lsls	r1, r3, #26
 8004cae:	bf42      	ittt	mi
 8004cb0:	6833      	ldrmi	r3, [r6, #0]
 8004cb2:	3302      	addmi	r3, #2
 8004cb4:	6033      	strmi	r3, [r6, #0]
 8004cb6:	6825      	ldr	r5, [r4, #0]
 8004cb8:	f015 0506 	ands.w	r5, r5, #6
 8004cbc:	d106      	bne.n	8004ccc <_printf_common+0x48>
 8004cbe:	f104 0a19 	add.w	sl, r4, #25
 8004cc2:	68e3      	ldr	r3, [r4, #12]
 8004cc4:	6832      	ldr	r2, [r6, #0]
 8004cc6:	1a9b      	subs	r3, r3, r2
 8004cc8:	42ab      	cmp	r3, r5
 8004cca:	dc26      	bgt.n	8004d1a <_printf_common+0x96>
 8004ccc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cd0:	1e13      	subs	r3, r2, #0
 8004cd2:	6822      	ldr	r2, [r4, #0]
 8004cd4:	bf18      	it	ne
 8004cd6:	2301      	movne	r3, #1
 8004cd8:	0692      	lsls	r2, r2, #26
 8004cda:	d42b      	bmi.n	8004d34 <_printf_common+0xb0>
 8004cdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ce0:	4649      	mov	r1, r9
 8004ce2:	4638      	mov	r0, r7
 8004ce4:	47c0      	blx	r8
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	d01e      	beq.n	8004d28 <_printf_common+0xa4>
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	68e5      	ldr	r5, [r4, #12]
 8004cee:	6832      	ldr	r2, [r6, #0]
 8004cf0:	f003 0306 	and.w	r3, r3, #6
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	bf08      	it	eq
 8004cf8:	1aad      	subeq	r5, r5, r2
 8004cfa:	68a3      	ldr	r3, [r4, #8]
 8004cfc:	6922      	ldr	r2, [r4, #16]
 8004cfe:	bf0c      	ite	eq
 8004d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d04:	2500      	movne	r5, #0
 8004d06:	4293      	cmp	r3, r2
 8004d08:	bfc4      	itt	gt
 8004d0a:	1a9b      	subgt	r3, r3, r2
 8004d0c:	18ed      	addgt	r5, r5, r3
 8004d0e:	2600      	movs	r6, #0
 8004d10:	341a      	adds	r4, #26
 8004d12:	42b5      	cmp	r5, r6
 8004d14:	d11a      	bne.n	8004d4c <_printf_common+0xc8>
 8004d16:	2000      	movs	r0, #0
 8004d18:	e008      	b.n	8004d2c <_printf_common+0xa8>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	4652      	mov	r2, sl
 8004d1e:	4649      	mov	r1, r9
 8004d20:	4638      	mov	r0, r7
 8004d22:	47c0      	blx	r8
 8004d24:	3001      	adds	r0, #1
 8004d26:	d103      	bne.n	8004d30 <_printf_common+0xac>
 8004d28:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d30:	3501      	adds	r5, #1
 8004d32:	e7c6      	b.n	8004cc2 <_printf_common+0x3e>
 8004d34:	18e1      	adds	r1, r4, r3
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	2030      	movs	r0, #48	; 0x30
 8004d3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d3e:	4422      	add	r2, r4
 8004d40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d48:	3302      	adds	r3, #2
 8004d4a:	e7c7      	b.n	8004cdc <_printf_common+0x58>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	4622      	mov	r2, r4
 8004d50:	4649      	mov	r1, r9
 8004d52:	4638      	mov	r0, r7
 8004d54:	47c0      	blx	r8
 8004d56:	3001      	adds	r0, #1
 8004d58:	d0e6      	beq.n	8004d28 <_printf_common+0xa4>
 8004d5a:	3601      	adds	r6, #1
 8004d5c:	e7d9      	b.n	8004d12 <_printf_common+0x8e>
	...

08004d60 <_printf_i>:
 8004d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d64:	7e0f      	ldrb	r7, [r1, #24]
 8004d66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d68:	2f78      	cmp	r7, #120	; 0x78
 8004d6a:	4691      	mov	r9, r2
 8004d6c:	4680      	mov	r8, r0
 8004d6e:	460c      	mov	r4, r1
 8004d70:	469a      	mov	sl, r3
 8004d72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d76:	d807      	bhi.n	8004d88 <_printf_i+0x28>
 8004d78:	2f62      	cmp	r7, #98	; 0x62
 8004d7a:	d80a      	bhi.n	8004d92 <_printf_i+0x32>
 8004d7c:	2f00      	cmp	r7, #0
 8004d7e:	f000 80d8 	beq.w	8004f32 <_printf_i+0x1d2>
 8004d82:	2f58      	cmp	r7, #88	; 0x58
 8004d84:	f000 80a3 	beq.w	8004ece <_printf_i+0x16e>
 8004d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d90:	e03a      	b.n	8004e08 <_printf_i+0xa8>
 8004d92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d96:	2b15      	cmp	r3, #21
 8004d98:	d8f6      	bhi.n	8004d88 <_printf_i+0x28>
 8004d9a:	a101      	add	r1, pc, #4	; (adr r1, 8004da0 <_printf_i+0x40>)
 8004d9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004da0:	08004df9 	.word	0x08004df9
 8004da4:	08004e0d 	.word	0x08004e0d
 8004da8:	08004d89 	.word	0x08004d89
 8004dac:	08004d89 	.word	0x08004d89
 8004db0:	08004d89 	.word	0x08004d89
 8004db4:	08004d89 	.word	0x08004d89
 8004db8:	08004e0d 	.word	0x08004e0d
 8004dbc:	08004d89 	.word	0x08004d89
 8004dc0:	08004d89 	.word	0x08004d89
 8004dc4:	08004d89 	.word	0x08004d89
 8004dc8:	08004d89 	.word	0x08004d89
 8004dcc:	08004f19 	.word	0x08004f19
 8004dd0:	08004e3d 	.word	0x08004e3d
 8004dd4:	08004efb 	.word	0x08004efb
 8004dd8:	08004d89 	.word	0x08004d89
 8004ddc:	08004d89 	.word	0x08004d89
 8004de0:	08004f3b 	.word	0x08004f3b
 8004de4:	08004d89 	.word	0x08004d89
 8004de8:	08004e3d 	.word	0x08004e3d
 8004dec:	08004d89 	.word	0x08004d89
 8004df0:	08004d89 	.word	0x08004d89
 8004df4:	08004f03 	.word	0x08004f03
 8004df8:	682b      	ldr	r3, [r5, #0]
 8004dfa:	1d1a      	adds	r2, r3, #4
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	602a      	str	r2, [r5, #0]
 8004e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e0a3      	b.n	8004f54 <_printf_i+0x1f4>
 8004e0c:	6820      	ldr	r0, [r4, #0]
 8004e0e:	6829      	ldr	r1, [r5, #0]
 8004e10:	0606      	lsls	r6, r0, #24
 8004e12:	f101 0304 	add.w	r3, r1, #4
 8004e16:	d50a      	bpl.n	8004e2e <_printf_i+0xce>
 8004e18:	680e      	ldr	r6, [r1, #0]
 8004e1a:	602b      	str	r3, [r5, #0]
 8004e1c:	2e00      	cmp	r6, #0
 8004e1e:	da03      	bge.n	8004e28 <_printf_i+0xc8>
 8004e20:	232d      	movs	r3, #45	; 0x2d
 8004e22:	4276      	negs	r6, r6
 8004e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e28:	485e      	ldr	r0, [pc, #376]	; (8004fa4 <_printf_i+0x244>)
 8004e2a:	230a      	movs	r3, #10
 8004e2c:	e019      	b.n	8004e62 <_printf_i+0x102>
 8004e2e:	680e      	ldr	r6, [r1, #0]
 8004e30:	602b      	str	r3, [r5, #0]
 8004e32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e36:	bf18      	it	ne
 8004e38:	b236      	sxthne	r6, r6
 8004e3a:	e7ef      	b.n	8004e1c <_printf_i+0xbc>
 8004e3c:	682b      	ldr	r3, [r5, #0]
 8004e3e:	6820      	ldr	r0, [r4, #0]
 8004e40:	1d19      	adds	r1, r3, #4
 8004e42:	6029      	str	r1, [r5, #0]
 8004e44:	0601      	lsls	r1, r0, #24
 8004e46:	d501      	bpl.n	8004e4c <_printf_i+0xec>
 8004e48:	681e      	ldr	r6, [r3, #0]
 8004e4a:	e002      	b.n	8004e52 <_printf_i+0xf2>
 8004e4c:	0646      	lsls	r6, r0, #25
 8004e4e:	d5fb      	bpl.n	8004e48 <_printf_i+0xe8>
 8004e50:	881e      	ldrh	r6, [r3, #0]
 8004e52:	4854      	ldr	r0, [pc, #336]	; (8004fa4 <_printf_i+0x244>)
 8004e54:	2f6f      	cmp	r7, #111	; 0x6f
 8004e56:	bf0c      	ite	eq
 8004e58:	2308      	moveq	r3, #8
 8004e5a:	230a      	movne	r3, #10
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e62:	6865      	ldr	r5, [r4, #4]
 8004e64:	60a5      	str	r5, [r4, #8]
 8004e66:	2d00      	cmp	r5, #0
 8004e68:	bfa2      	ittt	ge
 8004e6a:	6821      	ldrge	r1, [r4, #0]
 8004e6c:	f021 0104 	bicge.w	r1, r1, #4
 8004e70:	6021      	strge	r1, [r4, #0]
 8004e72:	b90e      	cbnz	r6, 8004e78 <_printf_i+0x118>
 8004e74:	2d00      	cmp	r5, #0
 8004e76:	d04d      	beq.n	8004f14 <_printf_i+0x1b4>
 8004e78:	4615      	mov	r5, r2
 8004e7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e7e:	fb03 6711 	mls	r7, r3, r1, r6
 8004e82:	5dc7      	ldrb	r7, [r0, r7]
 8004e84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e88:	4637      	mov	r7, r6
 8004e8a:	42bb      	cmp	r3, r7
 8004e8c:	460e      	mov	r6, r1
 8004e8e:	d9f4      	bls.n	8004e7a <_printf_i+0x11a>
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d10b      	bne.n	8004eac <_printf_i+0x14c>
 8004e94:	6823      	ldr	r3, [r4, #0]
 8004e96:	07de      	lsls	r6, r3, #31
 8004e98:	d508      	bpl.n	8004eac <_printf_i+0x14c>
 8004e9a:	6923      	ldr	r3, [r4, #16]
 8004e9c:	6861      	ldr	r1, [r4, #4]
 8004e9e:	4299      	cmp	r1, r3
 8004ea0:	bfde      	ittt	le
 8004ea2:	2330      	movle	r3, #48	; 0x30
 8004ea4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ea8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004eac:	1b52      	subs	r2, r2, r5
 8004eae:	6122      	str	r2, [r4, #16]
 8004eb0:	f8cd a000 	str.w	sl, [sp]
 8004eb4:	464b      	mov	r3, r9
 8004eb6:	aa03      	add	r2, sp, #12
 8004eb8:	4621      	mov	r1, r4
 8004eba:	4640      	mov	r0, r8
 8004ebc:	f7ff fee2 	bl	8004c84 <_printf_common>
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d14c      	bne.n	8004f5e <_printf_i+0x1fe>
 8004ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec8:	b004      	add	sp, #16
 8004eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ece:	4835      	ldr	r0, [pc, #212]	; (8004fa4 <_printf_i+0x244>)
 8004ed0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ed4:	6829      	ldr	r1, [r5, #0]
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004edc:	6029      	str	r1, [r5, #0]
 8004ede:	061d      	lsls	r5, r3, #24
 8004ee0:	d514      	bpl.n	8004f0c <_printf_i+0x1ac>
 8004ee2:	07df      	lsls	r7, r3, #31
 8004ee4:	bf44      	itt	mi
 8004ee6:	f043 0320 	orrmi.w	r3, r3, #32
 8004eea:	6023      	strmi	r3, [r4, #0]
 8004eec:	b91e      	cbnz	r6, 8004ef6 <_printf_i+0x196>
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	f023 0320 	bic.w	r3, r3, #32
 8004ef4:	6023      	str	r3, [r4, #0]
 8004ef6:	2310      	movs	r3, #16
 8004ef8:	e7b0      	b.n	8004e5c <_printf_i+0xfc>
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	f043 0320 	orr.w	r3, r3, #32
 8004f00:	6023      	str	r3, [r4, #0]
 8004f02:	2378      	movs	r3, #120	; 0x78
 8004f04:	4828      	ldr	r0, [pc, #160]	; (8004fa8 <_printf_i+0x248>)
 8004f06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f0a:	e7e3      	b.n	8004ed4 <_printf_i+0x174>
 8004f0c:	0659      	lsls	r1, r3, #25
 8004f0e:	bf48      	it	mi
 8004f10:	b2b6      	uxthmi	r6, r6
 8004f12:	e7e6      	b.n	8004ee2 <_printf_i+0x182>
 8004f14:	4615      	mov	r5, r2
 8004f16:	e7bb      	b.n	8004e90 <_printf_i+0x130>
 8004f18:	682b      	ldr	r3, [r5, #0]
 8004f1a:	6826      	ldr	r6, [r4, #0]
 8004f1c:	6961      	ldr	r1, [r4, #20]
 8004f1e:	1d18      	adds	r0, r3, #4
 8004f20:	6028      	str	r0, [r5, #0]
 8004f22:	0635      	lsls	r5, r6, #24
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	d501      	bpl.n	8004f2c <_printf_i+0x1cc>
 8004f28:	6019      	str	r1, [r3, #0]
 8004f2a:	e002      	b.n	8004f32 <_printf_i+0x1d2>
 8004f2c:	0670      	lsls	r0, r6, #25
 8004f2e:	d5fb      	bpl.n	8004f28 <_printf_i+0x1c8>
 8004f30:	8019      	strh	r1, [r3, #0]
 8004f32:	2300      	movs	r3, #0
 8004f34:	6123      	str	r3, [r4, #16]
 8004f36:	4615      	mov	r5, r2
 8004f38:	e7ba      	b.n	8004eb0 <_printf_i+0x150>
 8004f3a:	682b      	ldr	r3, [r5, #0]
 8004f3c:	1d1a      	adds	r2, r3, #4
 8004f3e:	602a      	str	r2, [r5, #0]
 8004f40:	681d      	ldr	r5, [r3, #0]
 8004f42:	6862      	ldr	r2, [r4, #4]
 8004f44:	2100      	movs	r1, #0
 8004f46:	4628      	mov	r0, r5
 8004f48:	f7fb f94a 	bl	80001e0 <memchr>
 8004f4c:	b108      	cbz	r0, 8004f52 <_printf_i+0x1f2>
 8004f4e:	1b40      	subs	r0, r0, r5
 8004f50:	6060      	str	r0, [r4, #4]
 8004f52:	6863      	ldr	r3, [r4, #4]
 8004f54:	6123      	str	r3, [r4, #16]
 8004f56:	2300      	movs	r3, #0
 8004f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f5c:	e7a8      	b.n	8004eb0 <_printf_i+0x150>
 8004f5e:	6923      	ldr	r3, [r4, #16]
 8004f60:	462a      	mov	r2, r5
 8004f62:	4649      	mov	r1, r9
 8004f64:	4640      	mov	r0, r8
 8004f66:	47d0      	blx	sl
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d0ab      	beq.n	8004ec4 <_printf_i+0x164>
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	079b      	lsls	r3, r3, #30
 8004f70:	d413      	bmi.n	8004f9a <_printf_i+0x23a>
 8004f72:	68e0      	ldr	r0, [r4, #12]
 8004f74:	9b03      	ldr	r3, [sp, #12]
 8004f76:	4298      	cmp	r0, r3
 8004f78:	bfb8      	it	lt
 8004f7a:	4618      	movlt	r0, r3
 8004f7c:	e7a4      	b.n	8004ec8 <_printf_i+0x168>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	4632      	mov	r2, r6
 8004f82:	4649      	mov	r1, r9
 8004f84:	4640      	mov	r0, r8
 8004f86:	47d0      	blx	sl
 8004f88:	3001      	adds	r0, #1
 8004f8a:	d09b      	beq.n	8004ec4 <_printf_i+0x164>
 8004f8c:	3501      	adds	r5, #1
 8004f8e:	68e3      	ldr	r3, [r4, #12]
 8004f90:	9903      	ldr	r1, [sp, #12]
 8004f92:	1a5b      	subs	r3, r3, r1
 8004f94:	42ab      	cmp	r3, r5
 8004f96:	dcf2      	bgt.n	8004f7e <_printf_i+0x21e>
 8004f98:	e7eb      	b.n	8004f72 <_printf_i+0x212>
 8004f9a:	2500      	movs	r5, #0
 8004f9c:	f104 0619 	add.w	r6, r4, #25
 8004fa0:	e7f5      	b.n	8004f8e <_printf_i+0x22e>
 8004fa2:	bf00      	nop
 8004fa4:	0800542a 	.word	0x0800542a
 8004fa8:	0800543b 	.word	0x0800543b

08004fac <memmove>:
 8004fac:	4288      	cmp	r0, r1
 8004fae:	b510      	push	{r4, lr}
 8004fb0:	eb01 0402 	add.w	r4, r1, r2
 8004fb4:	d902      	bls.n	8004fbc <memmove+0x10>
 8004fb6:	4284      	cmp	r4, r0
 8004fb8:	4623      	mov	r3, r4
 8004fba:	d807      	bhi.n	8004fcc <memmove+0x20>
 8004fbc:	1e43      	subs	r3, r0, #1
 8004fbe:	42a1      	cmp	r1, r4
 8004fc0:	d008      	beq.n	8004fd4 <memmove+0x28>
 8004fc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fca:	e7f8      	b.n	8004fbe <memmove+0x12>
 8004fcc:	4402      	add	r2, r0
 8004fce:	4601      	mov	r1, r0
 8004fd0:	428a      	cmp	r2, r1
 8004fd2:	d100      	bne.n	8004fd6 <memmove+0x2a>
 8004fd4:	bd10      	pop	{r4, pc}
 8004fd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fde:	e7f7      	b.n	8004fd0 <memmove+0x24>

08004fe0 <_free_r>:
 8004fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fe2:	2900      	cmp	r1, #0
 8004fe4:	d044      	beq.n	8005070 <_free_r+0x90>
 8004fe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fea:	9001      	str	r0, [sp, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f1a1 0404 	sub.w	r4, r1, #4
 8004ff2:	bfb8      	it	lt
 8004ff4:	18e4      	addlt	r4, r4, r3
 8004ff6:	f000 f913 	bl	8005220 <__malloc_lock>
 8004ffa:	4a1e      	ldr	r2, [pc, #120]	; (8005074 <_free_r+0x94>)
 8004ffc:	9801      	ldr	r0, [sp, #4]
 8004ffe:	6813      	ldr	r3, [r2, #0]
 8005000:	b933      	cbnz	r3, 8005010 <_free_r+0x30>
 8005002:	6063      	str	r3, [r4, #4]
 8005004:	6014      	str	r4, [r2, #0]
 8005006:	b003      	add	sp, #12
 8005008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800500c:	f000 b90e 	b.w	800522c <__malloc_unlock>
 8005010:	42a3      	cmp	r3, r4
 8005012:	d908      	bls.n	8005026 <_free_r+0x46>
 8005014:	6825      	ldr	r5, [r4, #0]
 8005016:	1961      	adds	r1, r4, r5
 8005018:	428b      	cmp	r3, r1
 800501a:	bf01      	itttt	eq
 800501c:	6819      	ldreq	r1, [r3, #0]
 800501e:	685b      	ldreq	r3, [r3, #4]
 8005020:	1949      	addeq	r1, r1, r5
 8005022:	6021      	streq	r1, [r4, #0]
 8005024:	e7ed      	b.n	8005002 <_free_r+0x22>
 8005026:	461a      	mov	r2, r3
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	b10b      	cbz	r3, 8005030 <_free_r+0x50>
 800502c:	42a3      	cmp	r3, r4
 800502e:	d9fa      	bls.n	8005026 <_free_r+0x46>
 8005030:	6811      	ldr	r1, [r2, #0]
 8005032:	1855      	adds	r5, r2, r1
 8005034:	42a5      	cmp	r5, r4
 8005036:	d10b      	bne.n	8005050 <_free_r+0x70>
 8005038:	6824      	ldr	r4, [r4, #0]
 800503a:	4421      	add	r1, r4
 800503c:	1854      	adds	r4, r2, r1
 800503e:	42a3      	cmp	r3, r4
 8005040:	6011      	str	r1, [r2, #0]
 8005042:	d1e0      	bne.n	8005006 <_free_r+0x26>
 8005044:	681c      	ldr	r4, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	6053      	str	r3, [r2, #4]
 800504a:	4421      	add	r1, r4
 800504c:	6011      	str	r1, [r2, #0]
 800504e:	e7da      	b.n	8005006 <_free_r+0x26>
 8005050:	d902      	bls.n	8005058 <_free_r+0x78>
 8005052:	230c      	movs	r3, #12
 8005054:	6003      	str	r3, [r0, #0]
 8005056:	e7d6      	b.n	8005006 <_free_r+0x26>
 8005058:	6825      	ldr	r5, [r4, #0]
 800505a:	1961      	adds	r1, r4, r5
 800505c:	428b      	cmp	r3, r1
 800505e:	bf04      	itt	eq
 8005060:	6819      	ldreq	r1, [r3, #0]
 8005062:	685b      	ldreq	r3, [r3, #4]
 8005064:	6063      	str	r3, [r4, #4]
 8005066:	bf04      	itt	eq
 8005068:	1949      	addeq	r1, r1, r5
 800506a:	6021      	streq	r1, [r4, #0]
 800506c:	6054      	str	r4, [r2, #4]
 800506e:	e7ca      	b.n	8005006 <_free_r+0x26>
 8005070:	b003      	add	sp, #12
 8005072:	bd30      	pop	{r4, r5, pc}
 8005074:	200136f4 	.word	0x200136f4

08005078 <sbrk_aligned>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	4e0e      	ldr	r6, [pc, #56]	; (80050b4 <sbrk_aligned+0x3c>)
 800507c:	460c      	mov	r4, r1
 800507e:	6831      	ldr	r1, [r6, #0]
 8005080:	4605      	mov	r5, r0
 8005082:	b911      	cbnz	r1, 800508a <sbrk_aligned+0x12>
 8005084:	f000 f8bc 	bl	8005200 <_sbrk_r>
 8005088:	6030      	str	r0, [r6, #0]
 800508a:	4621      	mov	r1, r4
 800508c:	4628      	mov	r0, r5
 800508e:	f000 f8b7 	bl	8005200 <_sbrk_r>
 8005092:	1c43      	adds	r3, r0, #1
 8005094:	d00a      	beq.n	80050ac <sbrk_aligned+0x34>
 8005096:	1cc4      	adds	r4, r0, #3
 8005098:	f024 0403 	bic.w	r4, r4, #3
 800509c:	42a0      	cmp	r0, r4
 800509e:	d007      	beq.n	80050b0 <sbrk_aligned+0x38>
 80050a0:	1a21      	subs	r1, r4, r0
 80050a2:	4628      	mov	r0, r5
 80050a4:	f000 f8ac 	bl	8005200 <_sbrk_r>
 80050a8:	3001      	adds	r0, #1
 80050aa:	d101      	bne.n	80050b0 <sbrk_aligned+0x38>
 80050ac:	f04f 34ff 	mov.w	r4, #4294967295
 80050b0:	4620      	mov	r0, r4
 80050b2:	bd70      	pop	{r4, r5, r6, pc}
 80050b4:	200136f8 	.word	0x200136f8

080050b8 <_malloc_r>:
 80050b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050bc:	1ccd      	adds	r5, r1, #3
 80050be:	f025 0503 	bic.w	r5, r5, #3
 80050c2:	3508      	adds	r5, #8
 80050c4:	2d0c      	cmp	r5, #12
 80050c6:	bf38      	it	cc
 80050c8:	250c      	movcc	r5, #12
 80050ca:	2d00      	cmp	r5, #0
 80050cc:	4607      	mov	r7, r0
 80050ce:	db01      	blt.n	80050d4 <_malloc_r+0x1c>
 80050d0:	42a9      	cmp	r1, r5
 80050d2:	d905      	bls.n	80050e0 <_malloc_r+0x28>
 80050d4:	230c      	movs	r3, #12
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	2600      	movs	r6, #0
 80050da:	4630      	mov	r0, r6
 80050dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050e0:	4e2e      	ldr	r6, [pc, #184]	; (800519c <_malloc_r+0xe4>)
 80050e2:	f000 f89d 	bl	8005220 <__malloc_lock>
 80050e6:	6833      	ldr	r3, [r6, #0]
 80050e8:	461c      	mov	r4, r3
 80050ea:	bb34      	cbnz	r4, 800513a <_malloc_r+0x82>
 80050ec:	4629      	mov	r1, r5
 80050ee:	4638      	mov	r0, r7
 80050f0:	f7ff ffc2 	bl	8005078 <sbrk_aligned>
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	4604      	mov	r4, r0
 80050f8:	d14d      	bne.n	8005196 <_malloc_r+0xde>
 80050fa:	6834      	ldr	r4, [r6, #0]
 80050fc:	4626      	mov	r6, r4
 80050fe:	2e00      	cmp	r6, #0
 8005100:	d140      	bne.n	8005184 <_malloc_r+0xcc>
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	4631      	mov	r1, r6
 8005106:	4638      	mov	r0, r7
 8005108:	eb04 0803 	add.w	r8, r4, r3
 800510c:	f000 f878 	bl	8005200 <_sbrk_r>
 8005110:	4580      	cmp	r8, r0
 8005112:	d13a      	bne.n	800518a <_malloc_r+0xd2>
 8005114:	6821      	ldr	r1, [r4, #0]
 8005116:	3503      	adds	r5, #3
 8005118:	1a6d      	subs	r5, r5, r1
 800511a:	f025 0503 	bic.w	r5, r5, #3
 800511e:	3508      	adds	r5, #8
 8005120:	2d0c      	cmp	r5, #12
 8005122:	bf38      	it	cc
 8005124:	250c      	movcc	r5, #12
 8005126:	4629      	mov	r1, r5
 8005128:	4638      	mov	r0, r7
 800512a:	f7ff ffa5 	bl	8005078 <sbrk_aligned>
 800512e:	3001      	adds	r0, #1
 8005130:	d02b      	beq.n	800518a <_malloc_r+0xd2>
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	442b      	add	r3, r5
 8005136:	6023      	str	r3, [r4, #0]
 8005138:	e00e      	b.n	8005158 <_malloc_r+0xa0>
 800513a:	6822      	ldr	r2, [r4, #0]
 800513c:	1b52      	subs	r2, r2, r5
 800513e:	d41e      	bmi.n	800517e <_malloc_r+0xc6>
 8005140:	2a0b      	cmp	r2, #11
 8005142:	d916      	bls.n	8005172 <_malloc_r+0xba>
 8005144:	1961      	adds	r1, r4, r5
 8005146:	42a3      	cmp	r3, r4
 8005148:	6025      	str	r5, [r4, #0]
 800514a:	bf18      	it	ne
 800514c:	6059      	strne	r1, [r3, #4]
 800514e:	6863      	ldr	r3, [r4, #4]
 8005150:	bf08      	it	eq
 8005152:	6031      	streq	r1, [r6, #0]
 8005154:	5162      	str	r2, [r4, r5]
 8005156:	604b      	str	r3, [r1, #4]
 8005158:	4638      	mov	r0, r7
 800515a:	f104 060b 	add.w	r6, r4, #11
 800515e:	f000 f865 	bl	800522c <__malloc_unlock>
 8005162:	f026 0607 	bic.w	r6, r6, #7
 8005166:	1d23      	adds	r3, r4, #4
 8005168:	1af2      	subs	r2, r6, r3
 800516a:	d0b6      	beq.n	80050da <_malloc_r+0x22>
 800516c:	1b9b      	subs	r3, r3, r6
 800516e:	50a3      	str	r3, [r4, r2]
 8005170:	e7b3      	b.n	80050da <_malloc_r+0x22>
 8005172:	6862      	ldr	r2, [r4, #4]
 8005174:	42a3      	cmp	r3, r4
 8005176:	bf0c      	ite	eq
 8005178:	6032      	streq	r2, [r6, #0]
 800517a:	605a      	strne	r2, [r3, #4]
 800517c:	e7ec      	b.n	8005158 <_malloc_r+0xa0>
 800517e:	4623      	mov	r3, r4
 8005180:	6864      	ldr	r4, [r4, #4]
 8005182:	e7b2      	b.n	80050ea <_malloc_r+0x32>
 8005184:	4634      	mov	r4, r6
 8005186:	6876      	ldr	r6, [r6, #4]
 8005188:	e7b9      	b.n	80050fe <_malloc_r+0x46>
 800518a:	230c      	movs	r3, #12
 800518c:	603b      	str	r3, [r7, #0]
 800518e:	4638      	mov	r0, r7
 8005190:	f000 f84c 	bl	800522c <__malloc_unlock>
 8005194:	e7a1      	b.n	80050da <_malloc_r+0x22>
 8005196:	6025      	str	r5, [r4, #0]
 8005198:	e7de      	b.n	8005158 <_malloc_r+0xa0>
 800519a:	bf00      	nop
 800519c:	200136f4 	.word	0x200136f4

080051a0 <_realloc_r>:
 80051a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051a4:	4680      	mov	r8, r0
 80051a6:	4614      	mov	r4, r2
 80051a8:	460e      	mov	r6, r1
 80051aa:	b921      	cbnz	r1, 80051b6 <_realloc_r+0x16>
 80051ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051b0:	4611      	mov	r1, r2
 80051b2:	f7ff bf81 	b.w	80050b8 <_malloc_r>
 80051b6:	b92a      	cbnz	r2, 80051c4 <_realloc_r+0x24>
 80051b8:	f7ff ff12 	bl	8004fe0 <_free_r>
 80051bc:	4625      	mov	r5, r4
 80051be:	4628      	mov	r0, r5
 80051c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051c4:	f000 f838 	bl	8005238 <_malloc_usable_size_r>
 80051c8:	4284      	cmp	r4, r0
 80051ca:	4607      	mov	r7, r0
 80051cc:	d802      	bhi.n	80051d4 <_realloc_r+0x34>
 80051ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051d2:	d812      	bhi.n	80051fa <_realloc_r+0x5a>
 80051d4:	4621      	mov	r1, r4
 80051d6:	4640      	mov	r0, r8
 80051d8:	f7ff ff6e 	bl	80050b8 <_malloc_r>
 80051dc:	4605      	mov	r5, r0
 80051de:	2800      	cmp	r0, #0
 80051e0:	d0ed      	beq.n	80051be <_realloc_r+0x1e>
 80051e2:	42bc      	cmp	r4, r7
 80051e4:	4622      	mov	r2, r4
 80051e6:	4631      	mov	r1, r6
 80051e8:	bf28      	it	cs
 80051ea:	463a      	movcs	r2, r7
 80051ec:	f7ff fbb8 	bl	8004960 <memcpy>
 80051f0:	4631      	mov	r1, r6
 80051f2:	4640      	mov	r0, r8
 80051f4:	f7ff fef4 	bl	8004fe0 <_free_r>
 80051f8:	e7e1      	b.n	80051be <_realloc_r+0x1e>
 80051fa:	4635      	mov	r5, r6
 80051fc:	e7df      	b.n	80051be <_realloc_r+0x1e>
	...

08005200 <_sbrk_r>:
 8005200:	b538      	push	{r3, r4, r5, lr}
 8005202:	4d06      	ldr	r5, [pc, #24]	; (800521c <_sbrk_r+0x1c>)
 8005204:	2300      	movs	r3, #0
 8005206:	4604      	mov	r4, r0
 8005208:	4608      	mov	r0, r1
 800520a:	602b      	str	r3, [r5, #0]
 800520c:	f000 f81e 	bl	800524c <_sbrk>
 8005210:	1c43      	adds	r3, r0, #1
 8005212:	d102      	bne.n	800521a <_sbrk_r+0x1a>
 8005214:	682b      	ldr	r3, [r5, #0]
 8005216:	b103      	cbz	r3, 800521a <_sbrk_r+0x1a>
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	bd38      	pop	{r3, r4, r5, pc}
 800521c:	200136fc 	.word	0x200136fc

08005220 <__malloc_lock>:
 8005220:	4801      	ldr	r0, [pc, #4]	; (8005228 <__malloc_lock+0x8>)
 8005222:	f000 b811 	b.w	8005248 <__retarget_lock_acquire_recursive>
 8005226:	bf00      	nop
 8005228:	20013700 	.word	0x20013700

0800522c <__malloc_unlock>:
 800522c:	4801      	ldr	r0, [pc, #4]	; (8005234 <__malloc_unlock+0x8>)
 800522e:	f000 b80c 	b.w	800524a <__retarget_lock_release_recursive>
 8005232:	bf00      	nop
 8005234:	20013700 	.word	0x20013700

08005238 <_malloc_usable_size_r>:
 8005238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800523c:	1f18      	subs	r0, r3, #4
 800523e:	2b00      	cmp	r3, #0
 8005240:	bfbc      	itt	lt
 8005242:	580b      	ldrlt	r3, [r1, r0]
 8005244:	18c0      	addlt	r0, r0, r3
 8005246:	4770      	bx	lr

08005248 <__retarget_lock_acquire_recursive>:
 8005248:	4770      	bx	lr

0800524a <__retarget_lock_release_recursive>:
 800524a:	4770      	bx	lr

0800524c <_sbrk>:
 800524c:	4a04      	ldr	r2, [pc, #16]	; (8005260 <_sbrk+0x14>)
 800524e:	6811      	ldr	r1, [r2, #0]
 8005250:	4603      	mov	r3, r0
 8005252:	b909      	cbnz	r1, 8005258 <_sbrk+0xc>
 8005254:	4903      	ldr	r1, [pc, #12]	; (8005264 <_sbrk+0x18>)
 8005256:	6011      	str	r1, [r2, #0]
 8005258:	6810      	ldr	r0, [r2, #0]
 800525a:	4403      	add	r3, r0
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	4770      	bx	lr
 8005260:	20013704 	.word	0x20013704
 8005264:	20013708 	.word	0x20013708

08005268 <_init>:
 8005268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526a:	bf00      	nop
 800526c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800526e:	bc08      	pop	{r3}
 8005270:	469e      	mov	lr, r3
 8005272:	4770      	bx	lr

08005274 <_fini>:
 8005274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005276:	bf00      	nop
 8005278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527a:	bc08      	pop	{r3}
 800527c:	469e      	mov	lr, r3
 800527e:	4770      	bx	lr
