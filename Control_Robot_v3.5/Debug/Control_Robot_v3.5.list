
Control_Robot_v3.5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c03c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac0  0800c1e0  0800c1e0  0001c1e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cca0  0800cca0  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800cca0  0800cca0  0001cca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cca8  0800cca8  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cca8  0800cca8  0001cca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ccac  0800ccac  0001ccac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800ccb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b5c  200001ec  0800ce9c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d48  0800ce9c  00020d48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005108  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000117d  00000000  00000000  00025324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000478  00000000  00000000  000264a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003d0  00000000  00000000  00026920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010f91  00000000  00000000  00026cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006b1c  00000000  00000000  00037c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000588c0  00000000  00000000  0003e79d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009705d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d2c  00000000  00000000  000970b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c1c4 	.word	0x0800c1c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800c1c4 	.word	0x0800c1c4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9dd 	b.w	8001094 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f86b 	bl	8000dc4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f85e 	bl	8000dc4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f84d 	bl	8000dc4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f83f 	bl	8000dc4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff fed3 	bl	8000b0c <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc49 	bl	8000628 <__aeabi_dmul>
 8000d96:	f7ff ff1f 	bl	8000bd8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbca 	bl	8000534 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc40 	bl	8000628 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa82 	bl	80002b8 <__aeabi_dsub>
 8000db4:	f7ff ff10 	bl	8000bd8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <updateDuttyMotor>:
#include <MotorDriver.h>


//Funcion para actualizar el dutty del pwm
void updateDuttyMotor(Motor_Handler_t *ptrMotorHandler,  float newValue)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	ed87 0a00 	vstr	s0, [r7]
		//Guardar valor del dutty
		ptrMotorHandler->configMotor.dutty = newValue;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	639a      	str	r2, [r3, #56]	; 0x38
		//Actualizamos el valor del dutty
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80010b4:	eeb0 0a67 	vmov.f32	s0, s15
 80010b8:	4610      	mov	r0, r2
 80010ba:	f003 fdd9 	bl	8004c70 <updateDuttyCyclePercentageFloat>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <updateDirMotor>:
		updateFrequencyTimer(ptrBTimerHandler, *(ptrMotorHandler->configMotor.frecuency));
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
}

void updateDirMotor(Motor_Handler_t *ptrMotorHandler)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
		//Cambiar el valor de la direccion
		ptrMotorHandler->configMotor.dir = (~ptrMotorHandler->configMotor.dir)&(0x01);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bf0c      	ite	eq
 80010dc:	2301      	moveq	r3, #1
 80010de:	2300      	movne	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	461a      	mov	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		//Cambiamos la direccion del motor
		GPIO_writePin(ptrMotorHandler->phandlerGPIOIN, ptrMotorHandler->configMotor.dir&SET);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	4619      	mov	r1, r3
 80010fc:	4610      	mov	r0, r2
 80010fe:	f003 f98f 	bl	8004420 <GPIO_writePin>
		statusPolarityPWM(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dir&SET);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4619      	mov	r1, r3
 8001114:	4610      	mov	r0, r2
 8001116:	f003 fce5 	bl	8004ae4 <statusPolarityPWM>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <main>:
uint8_t commandComplete = 1;           //Bandera que indica si el comando esta completo
uint8_t counterRecepcion = 0;          //Variable para la posicion del arrelgo
char bufferRecepcion[64] = {0};        //Arreglo que almacena el comando ingresado

int main(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	//-----------------------Configuracion inicial del sistema---------------------------------
	//Incrementamos la velocidad de reloj del sistema

	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 800112a:	2364      	movs	r3, #100	; 0x64
 800112c:	71fb      	strb	r3, [r7, #7]
	configPLL(clock);
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	4618      	mov	r0, r3
 8001132:	f003 f9b7 	bl	80044a4 <configPLL>
	//Realizamos la configuracuion inicial
	int_Hardware();
 8001136:	f000 f84d 	bl	80011d4 <int_Hardware>
	//Activamos el SysTick
	//config_SysTick_us();
	//Activamos el punto flotante por medio del registro especifico
	SCB->CPACR |= 0xF <<20;
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <main+0x7c>)
 800113c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001140:	4a17      	ldr	r2, [pc, #92]	; (80011a0 <main+0x7c>)
 8001142:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001146:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Definimos la configuracion inicail del MCO1
	int_MCO2();
 800114a:	f000 f9d1 	bl	80014f0 <int_MCO2>

	//-----------------------Configuracion inicial de los Motores---------------------------------
	//Cargar configuracion de los motores
	GPIO_writePin (&handler_GPIO_MotorR_IN, SET);
 800114e:	2101      	movs	r1, #1
 8001150:	4814      	ldr	r0, [pc, #80]	; (80011a4 <main+0x80>)
 8001152:	f003 f965 	bl	8004420 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_IN, SET);
 8001156:	2101      	movs	r1, #1
 8001158:	4813      	ldr	r0, [pc, #76]	; (80011a8 <main+0x84>)
 800115a:	f003 f961 	bl	8004420 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorR_EN, SET);
 800115e:	2101      	movs	r1, #1
 8001160:	4812      	ldr	r0, [pc, #72]	; (80011ac <main+0x88>)
 8001162:	f003 f95d 	bl	8004420 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_EN, SET);
 8001166:	2101      	movs	r1, #1
 8001168:	4811      	ldr	r0, [pc, #68]	; (80011b0 <main+0x8c>)
 800116a:	f003 f959 	bl	8004420 <GPIO_writePin>
	int_Config_Motor();
 800116e:	f000 f9c9 	bl	8001504 <int_Config_Motor>
	//Definimos el motor derecho para ser ejecutado
	handler_Motor_Execute = &handler_Motor_R;
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <main+0x90>)
 8001174:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <main+0x94>)
 8001176:	601a      	str	r2, [r3, #0]
	//Calculo inicial de parametro
	cm_L = ((PI*DL)/(100*Ce));  //[mm/cuentas]
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <main+0x98>)
 800117a:	4a11      	ldr	r2, [pc, #68]	; (80011c0 <main+0x9c>)
 800117c:	601a      	str	r2, [r3, #0]
	cm_R =	((PI*DR)/(100*Ce));  //[mm/cuentas]
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <main+0xa0>)
 8001180:	4a11      	ldr	r2, [pc, #68]	; (80011c8 <main+0xa4>)
 8001182:	601a      	str	r2, [r3, #0]

	while(1)
	{
		///Verificamos para ejecuta el comando ingresando
		if(commandComplete==1)
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <main+0xa8>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d106      	bne.n	800119a <main+0x76>
		{
			runCommand(bufferRecepcion);
 800118c:	4810      	ldr	r0, [pc, #64]	; (80011d0 <main+0xac>)
 800118e:	f000 ff57 	bl	8002040 <runCommand>
			//Reniciamos la variable
			commandComplete=0;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <main+0xa8>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	e7f4      	b.n	8001184 <main+0x60>
		}
		else
		{
			__NOP();
 800119a:	bf00      	nop
		if(commandComplete==1)
 800119c:	e7f2      	b.n	8001184 <main+0x60>
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00
 80011a4:	200002c8 	.word	0x200002c8
 80011a8:	20000344 	.word	0x20000344
 80011ac:	200002d4 	.word	0x200002d4
 80011b0:	20000350 	.word	0x20000350
 80011b4:	20000468 	.word	0x20000468
 80011b8:	200002ec 	.word	0x200002ec
 80011bc:	20000454 	.word	0x20000454
 80011c0:	40105fa7 	.word	0x40105fa7
 80011c4:	20000458 	.word	0x20000458
 80011c8:	400facee 	.word	0x400facee
 80011cc:	20000016 	.word	0x20000016
 80011d0:	20000498 	.word	0x20000498

080011d4 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af02      	add	r7, sp, #8
	//-------------------------PIN_MCO2--------------------------------
	//---------------PIN: PC9----------------
	//------------AF0: MCO_2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MCO2.pGPIOx = GPIOC;
 80011da:	4bab      	ldr	r3, [pc, #684]	; (8001488 <int_Hardware+0x2b4>)
 80011dc:	4aab      	ldr	r2, [pc, #684]	; (800148c <int_Hardware+0x2b8>)
 80011de:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MCO2.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 80011e0:	4ba9      	ldr	r3, [pc, #676]	; (8001488 <int_Hardware+0x2b4>)
 80011e2:	2209      	movs	r2, #9
 80011e4:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MCO2, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80011e6:	2300      	movs	r3, #0
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	2300      	movs	r3, #0
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2301      	movs	r3, #1
 80011f0:	2200      	movs	r2, #0
 80011f2:	2102      	movs	r1, #2
 80011f4:	48a4      	ldr	r0, [pc, #656]	; (8001488 <int_Hardware+0x2b4>)
 80011f6:	f002 ffc7 	bl	8004188 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MCO2);
 80011fa:	48a3      	ldr	r0, [pc, #652]	; (8001488 <int_Hardware+0x2b4>)
 80011fc:	f002 ffe6 	bl	80041cc <GPIO_Config>
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 8001200:	4ba3      	ldr	r3, [pc, #652]	; (8001490 <int_Hardware+0x2bc>)
 8001202:	4aa4      	ldr	r2, [pc, #656]	; (8001494 <int_Hardware+0x2c0>)
 8001204:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 8001206:	4ba2      	ldr	r3, [pc, #648]	; (8001490 <int_Hardware+0x2bc>)
 8001208:	2205      	movs	r2, #5
 800120a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800120c:	2300      	movs	r3, #0
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	2300      	movs	r3, #0
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2301      	movs	r3, #1
 8001216:	2200      	movs	r2, #0
 8001218:	2101      	movs	r1, #1
 800121a:	489d      	ldr	r0, [pc, #628]	; (8001490 <int_Hardware+0x2bc>)
 800121c:	f002 ffb4 	bl	8004188 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 8001220:	489b      	ldr	r0, [pc, #620]	; (8001490 <int_Hardware+0x2bc>)
 8001222:	f002 ffd3 	bl	80041cc <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA9----------------
	//------------AF7: USART1_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 8001226:	4b9c      	ldr	r3, [pc, #624]	; (8001498 <int_Hardware+0x2c4>)
 8001228:	4a9a      	ldr	r2, [pc, #616]	; (8001494 <int_Hardware+0x2c0>)
 800122a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 800122c:	4b9a      	ldr	r3, [pc, #616]	; (8001498 <int_Hardware+0x2c4>)
 800122e:	2209      	movs	r2, #9
 8001230:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001232:	2307      	movs	r3, #7
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	2300      	movs	r3, #0
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	2200      	movs	r2, #0
 800123e:	2102      	movs	r1, #2
 8001240:	4895      	ldr	r0, [pc, #596]	; (8001498 <int_Hardware+0x2c4>)
 8001242:	f002 ffa1 	bl	8004188 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 8001246:	4894      	ldr	r0, [pc, #592]	; (8001498 <int_Hardware+0x2c4>)
 8001248:	f002 ffc0 	bl	80041cc <GPIO_Config>

	//---------------PIN: PA10----------------
	//------------AF7: USART1_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 800124c:	4b93      	ldr	r3, [pc, #588]	; (800149c <int_Hardware+0x2c8>)
 800124e:	4a91      	ldr	r2, [pc, #580]	; (8001494 <int_Hardware+0x2c0>)
 8001250:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utiliza
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 8001252:	4b92      	ldr	r3, [pc, #584]	; (800149c <int_Hardware+0x2c8>)
 8001254:	220a      	movs	r2, #10
 8001256:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001258:	2307      	movs	r3, #7
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	2300      	movs	r3, #0
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2301      	movs	r3, #1
 8001262:	2200      	movs	r2, #0
 8001264:	2102      	movs	r1, #2
 8001266:	488d      	ldr	r0, [pc, #564]	; (800149c <int_Hardware+0x2c8>)
 8001268:	f002 ff8e 	bl	8004188 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 800126c:	488b      	ldr	r0, [pc, #556]	; (800149c <int_Hardware+0x2c8>)
 800126e:	f002 ffad 	bl	80041cc <GPIO_Config>
	//---------------------------Motor Derecho--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA0----------------
	//------------AF2: TIM5_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR.pGPIOx = GPIOA;
 8001272:	4b8b      	ldr	r3, [pc, #556]	; (80014a0 <int_Hardware+0x2cc>)
 8001274:	4a87      	ldr	r2, [pc, #540]	; (8001494 <int_Hardware+0x2c0>)
 8001276:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR.GPIO_PinConfig.GPIO_PinNumber = PIN_0; 						//PIN_x, 0-15
 8001278:	4b89      	ldr	r3, [pc, #548]	; (80014a0 <int_Hardware+0x2cc>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 800127e:	2302      	movs	r3, #2
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	2300      	movs	r3, #0
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2301      	movs	r3, #1
 8001288:	2200      	movs	r2, #0
 800128a:	2102      	movs	r1, #2
 800128c:	4884      	ldr	r0, [pc, #528]	; (80014a0 <int_Hardware+0x2cc>)
 800128e:	f002 ff7b 	bl	8004188 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR);
 8001292:	4883      	ldr	r0, [pc, #524]	; (80014a0 <int_Hardware+0x2cc>)
 8001294:	f002 ff9a 	bl	80041cc <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PC12----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_IN.pGPIOx = GPIOC;
 8001298:	4b82      	ldr	r3, [pc, #520]	; (80014a4 <int_Hardware+0x2d0>)
 800129a:	4a7c      	ldr	r2, [pc, #496]	; (800148c <int_Hardware+0x2b8>)
 800129c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_12; 						//PIN_x, 0-15
 800129e:	4b81      	ldr	r3, [pc, #516]	; (80014a4 <int_Hardware+0x2d0>)
 80012a0:	220c      	movs	r2, #12
 80012a2:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80012a4:	2300      	movs	r3, #0
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	2300      	movs	r3, #0
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	2200      	movs	r2, #0
 80012b0:	2101      	movs	r1, #1
 80012b2:	487c      	ldr	r0, [pc, #496]	; (80014a4 <int_Hardware+0x2d0>)
 80012b4:	f002 ff68 	bl	8004188 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_IN);
 80012b8:	487a      	ldr	r0, [pc, #488]	; (80014a4 <int_Hardware+0x2d0>)
 80012ba:	f002 ff87 	bl	80041cc <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC10----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_EN.pGPIOx = GPIOC;
 80012be:	4b7a      	ldr	r3, [pc, #488]	; (80014a8 <int_Hardware+0x2d4>)
 80012c0:	4a72      	ldr	r2, [pc, #456]	; (800148c <int_Hardware+0x2b8>)
 80012c2:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 80012c4:	4b78      	ldr	r3, [pc, #480]	; (80014a8 <int_Hardware+0x2d4>)
 80012c6:	220a      	movs	r2, #10
 80012c8:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80012ca:	2300      	movs	r3, #0
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	2300      	movs	r3, #0
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	2200      	movs	r2, #0
 80012d6:	2101      	movs	r1, #1
 80012d8:	4873      	ldr	r0, [pc, #460]	; (80014a8 <int_Hardware+0x2d4>)
 80012da:	f002 ff55 	bl	8004188 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_EN);
 80012de:	4872      	ldr	r0, [pc, #456]	; (80014a8 <int_Hardware+0x2d4>)
 80012e0:	f002 ff74 	bl	80041cc <GPIO_Config>
	//---------------------------Motor Izquierdo--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA1----------------
	//------------AF2: TIM5_CH2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL.pGPIOx = GPIOA;
 80012e4:	4b71      	ldr	r3, [pc, #452]	; (80014ac <int_Hardware+0x2d8>)
 80012e6:	4a6b      	ldr	r2, [pc, #428]	; (8001494 <int_Hardware+0x2c0>)
 80012e8:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL.GPIO_PinConfig.GPIO_PinNumber = PIN_1; 						//PIN_x, 0-15
 80012ea:	4b70      	ldr	r3, [pc, #448]	; (80014ac <int_Hardware+0x2d8>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 80012f0:	2302      	movs	r3, #2
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	2300      	movs	r3, #0
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	2200      	movs	r2, #0
 80012fc:	2102      	movs	r1, #2
 80012fe:	486b      	ldr	r0, [pc, #428]	; (80014ac <int_Hardware+0x2d8>)
 8001300:	f002 ff42 	bl	8004188 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL);
 8001304:	4869      	ldr	r0, [pc, #420]	; (80014ac <int_Hardware+0x2d8>)
 8001306:	f002 ff61 	bl	80041cc <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PD2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_IN.pGPIOx = GPIOD;
 800130a:	4b69      	ldr	r3, [pc, #420]	; (80014b0 <int_Hardware+0x2dc>)
 800130c:	4a69      	ldr	r2, [pc, #420]	; (80014b4 <int_Hardware+0x2e0>)
 800130e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 8001310:	4b67      	ldr	r3, [pc, #412]	; (80014b0 <int_Hardware+0x2dc>)
 8001312:	2202      	movs	r2, #2
 8001314:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001316:	2300      	movs	r3, #0
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	2300      	movs	r3, #0
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	2200      	movs	r2, #0
 8001322:	2101      	movs	r1, #1
 8001324:	4862      	ldr	r0, [pc, #392]	; (80014b0 <int_Hardware+0x2dc>)
 8001326:	f002 ff2f 	bl	8004188 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_IN);
 800132a:	4861      	ldr	r0, [pc, #388]	; (80014b0 <int_Hardware+0x2dc>)
 800132c:	f002 ff4e 	bl	80041cc <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC11----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_EN.pGPIOx = GPIOC;
 8001330:	4b61      	ldr	r3, [pc, #388]	; (80014b8 <int_Hardware+0x2e4>)
 8001332:	4a56      	ldr	r2, [pc, #344]	; (800148c <int_Hardware+0x2b8>)
 8001334:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_11; 						//PIN_x, 0-15
 8001336:	4b60      	ldr	r3, [pc, #384]	; (80014b8 <int_Hardware+0x2e4>)
 8001338:	220b      	movs	r2, #11
 800133a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800133c:	2300      	movs	r3, #0
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	2300      	movs	r3, #0
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	2200      	movs	r2, #0
 8001348:	2101      	movs	r1, #1
 800134a:	485b      	ldr	r0, [pc, #364]	; (80014b8 <int_Hardware+0x2e4>)
 800134c:	f002 ff1c 	bl	8004188 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_EN);
 8001350:	4859      	ldr	r0, [pc, #356]	; (80014b8 <int_Hardware+0x2e4>)
 8001352:	f002 ff3b 	bl	80041cc <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART1----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART1;
 8001356:	4b59      	ldr	r3, [pc, #356]	; (80014bc <int_Hardware+0x2e8>)
 8001358:	4a59      	ldr	r2, [pc, #356]	; (80014c0 <int_Hardware+0x2ec>)
 800135a:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 800135c:	4b57      	ldr	r3, [pc, #348]	; (80014bc <int_Hardware+0x2e8>)
 800135e:	2202      	movs	r2, #2
 8001360:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_19200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 8001362:	4b56      	ldr	r3, [pc, #344]	; (80014bc <int_Hardware+0x2e8>)
 8001364:	2201      	movs	r2, #1
 8001366:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 8001368:	4b54      	ldr	r3, [pc, #336]	; (80014bc <int_Hardware+0x2e8>)
 800136a:	2200      	movs	r2, #0
 800136c:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 800136e:	4b53      	ldr	r3, [pc, #332]	; (80014bc <int_Hardware+0x2e8>)
 8001370:	2200      	movs	r2, #0
 8001372:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 8001374:	4b51      	ldr	r3, [pc, #324]	; (80014bc <int_Hardware+0x2e8>)
 8001376:	2201      	movs	r2, #1
 8001378:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_ENABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 800137a:	4b50      	ldr	r3, [pc, #320]	; (80014bc <int_Hardware+0x2e8>)
 800137c:	2201      	movs	r2, #1
 800137e:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 8001380:	484e      	ldr	r0, [pc, #312]	; (80014bc <int_Hardware+0x2e8>)
 8001382:	f003 fcb9 	bl	8004cf8 <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 8001386:	4b4f      	ldr	r3, [pc, #316]	; (80014c4 <int_Hardware+0x2f0>)
 8001388:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800138c:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 800138e:	4b4d      	ldr	r3, [pc, #308]	; (80014c4 <int_Hardware+0x2f0>)
 8001390:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001394:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8001396:	4b4b      	ldr	r3, [pc, #300]	; (80014c4 <int_Hardware+0x2f0>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 800139c:	4b49      	ldr	r3, [pc, #292]	; (80014c4 <int_Hardware+0x2f0>)
 800139e:	22fa      	movs	r2, #250	; 0xfa
 80013a0:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <int_Hardware+0x2f0>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 80013a8:	4846      	ldr	r0, [pc, #280]	; (80014c4 <int_Hardware+0x2f0>)
 80013aa:	f001 fcc9 	bl	8002d40 <BasicTimer_Config>

	//---------------TIM3----------------
	//Definimos el TIMx a usar
	handler_TIMER_Count.ptrTIMx = TIM3;
 80013ae:	4b46      	ldr	r3, [pc, #280]	; (80014c8 <int_Hardware+0x2f4>)
 80013b0:	4a46      	ldr	r2, [pc, #280]	; (80014cc <int_Hardware+0x2f8>)
 80013b2:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Count.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80013b4:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <int_Hardware+0x2f4>)
 80013b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ba:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Count.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80013bc:	4b42      	ldr	r3, [pc, #264]	; (80014c8 <int_Hardware+0x2f4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Count.TIMx_Config.TIMX_period = 2000;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80013c2:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <int_Hardware+0x2f4>)
 80013c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013c8:	605a      	str	r2, [r3, #4]
	handler_TIMER_Count.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80013ca:	4b3f      	ldr	r3, [pc, #252]	; (80014c8 <int_Hardware+0x2f4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Count);
 80013d0:	483d      	ldr	r0, [pc, #244]	; (80014c8 <int_Hardware+0x2f4>)
 80013d2:	f001 fcb5 	bl	8002d40 <BasicTimer_Config>

	//---------------TIM5----------------
	//Definimos el TIMx a usar
	handler_TIMER_Motor.ptrTIMx = TIM5;
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <int_Hardware+0x2fc>)
 80013d8:	4a3e      	ldr	r2, [pc, #248]	; (80014d4 <int_Hardware+0x300>)
 80013da:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Motor.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_10us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80013dc:	4b3c      	ldr	r3, [pc, #240]	; (80014d0 <int_Hardware+0x2fc>)
 80013de:	220a      	movs	r2, #10
 80013e0:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Motor.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <int_Hardware+0x2fc>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Motor.TIMx_Config.TIMX_period = 100;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80013e8:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <int_Hardware+0x2fc>)
 80013ea:	2264      	movs	r2, #100	; 0x64
 80013ec:	605a      	str	r2, [r3, #4]
	handler_TIMER_Motor.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <int_Hardware+0x2fc>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Motor);
 80013f4:	4836      	ldr	r0, [pc, #216]	; (80014d0 <int_Hardware+0x2fc>)
 80013f6:	f001 fca3 	bl	8002d40 <BasicTimer_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoR.pGPIOx = GPIOC;
 80013fa:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <int_Hardware+0x304>)
 80013fc:	4a23      	ldr	r2, [pc, #140]	; (800148c <int_Hardware+0x2b8>)
 80013fe:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoR.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8001400:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <int_Hardware+0x304>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoR.pGPIOHandler = &handler_GPIO_FotoR;
 8001406:	4b35      	ldr	r3, [pc, #212]	; (80014dc <int_Hardware+0x308>)
 8001408:	4a33      	ldr	r2, [pc, #204]	; (80014d8 <int_Hardware+0x304>)
 800140a:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoR.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 800140c:	4b33      	ldr	r3, [pc, #204]	; (80014dc <int_Hardware+0x308>)
 800140e:	2202      	movs	r2, #2
 8001410:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoR);
 8001412:	4832      	ldr	r0, [pc, #200]	; (80014dc <int_Hardware+0x308>)
 8001414:	f001 fe18 	bl	8003048 <extInt_Config>

	//---------------PIN: PC3----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoL.pGPIOx = GPIOC;
 8001418:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <int_Hardware+0x30c>)
 800141a:	4a1c      	ldr	r2, [pc, #112]	; (800148c <int_Hardware+0x2b8>)
 800141c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoL.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 800141e:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <int_Hardware+0x30c>)
 8001420:	2203      	movs	r2, #3
 8001422:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoL.pGPIOHandler = &handler_GPIO_FotoL;
 8001424:	4b2f      	ldr	r3, [pc, #188]	; (80014e4 <int_Hardware+0x310>)
 8001426:	4a2e      	ldr	r2, [pc, #184]	; (80014e0 <int_Hardware+0x30c>)
 8001428:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoL.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 800142a:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <int_Hardware+0x310>)
 800142c:	2202      	movs	r2, #2
 800142e:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoL);
 8001430:	482c      	ldr	r0, [pc, #176]	; (80014e4 <int_Hardware+0x310>)
 8001432:	f001 fe09 	bl	8003048 <extInt_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM5_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorR.ptrTIMx = TIM5;
 8001436:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <int_Hardware+0x314>)
 8001438:	4a26      	ldr	r2, [pc, #152]	; (80014d4 <int_Hardware+0x300>)
 800143a:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorR.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <int_Hardware+0x314>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorR.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8001442:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <int_Hardware+0x314>)
 8001444:	220a      	movs	r2, #10
 8001446:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorR.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 8001448:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <int_Hardware+0x314>)
 800144a:	2201      	movs	r2, #1
 800144c:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorR);
 800144e:	4826      	ldr	r0, [pc, #152]	; (80014e8 <int_Hardware+0x314>)
 8001450:	f003 f956 	bl	8004700 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorR, CHANNEL_ENABLE);
 8001454:	2101      	movs	r1, #1
 8001456:	4824      	ldr	r0, [pc, #144]	; (80014e8 <int_Hardware+0x314>)
 8001458:	f003 fab2 	bl	80049c0 <statusInOutPWM>

	//---------------TIM5_Channel_2----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorL.ptrTIMx = TIM5;
 800145c:	4b23      	ldr	r3, [pc, #140]	; (80014ec <int_Hardware+0x318>)
 800145e:	4a1d      	ldr	r2, [pc, #116]	; (80014d4 <int_Hardware+0x300>)
 8001460:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorL.config.channel = PWM_CHANNEL_2;     //PWM_CHANNEL_x x->1,2,3,4
 8001462:	4b22      	ldr	r3, [pc, #136]	; (80014ec <int_Hardware+0x318>)
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorL.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8001468:	4b20      	ldr	r3, [pc, #128]	; (80014ec <int_Hardware+0x318>)
 800146a:	220a      	movs	r2, #10
 800146c:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorL.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <int_Hardware+0x318>)
 8001470:	2201      	movs	r2, #1
 8001472:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorL);
 8001474:	481d      	ldr	r0, [pc, #116]	; (80014ec <int_Hardware+0x318>)
 8001476:	f003 f943 	bl	8004700 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorL, CHANNEL_ENABLE);
 800147a:	2101      	movs	r1, #1
 800147c:	481b      	ldr	r0, [pc, #108]	; (80014ec <int_Hardware+0x318>)
 800147e:	f003 fa9f 	bl	80049c0 <statusInOutPWM>

	//---------------------Fin de Configuracion PWM_Channelx-----------------------


}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000224 	.word	0x20000224
 800148c:	40020800 	.word	0x40020800
 8001490:	20000208 	.word	0x20000208
 8001494:	40020000 	.word	0x40020000
 8001498:	20000258 	.word	0x20000258
 800149c:	20000264 	.word	0x20000264
 80014a0:	200002bc 	.word	0x200002bc
 80014a4:	200002c8 	.word	0x200002c8
 80014a8:	200002d4 	.word	0x200002d4
 80014ac:	20000338 	.word	0x20000338
 80014b0:	20000344 	.word	0x20000344
 80014b4:	40020c00 	.word	0x40020c00
 80014b8:	20000350 	.word	0x20000350
 80014bc:	20000270 	.word	0x20000270
 80014c0:	40011000 	.word	0x40011000
 80014c4:	20000214 	.word	0x20000214
 80014c8:	200003c4 	.word	0x200003c4
 80014cc:	40000400 	.word	0x40000400
 80014d0:	200003b4 	.word	0x200003b4
 80014d4:	40000c00 	.word	0x40000c00
 80014d8:	20000230 	.word	0x20000230
 80014dc:	2000023c 	.word	0x2000023c
 80014e0:	20000244 	.word	0x20000244
 80014e4:	20000250 	.word	0x20000250
 80014e8:	200002e0 	.word	0x200002e0
 80014ec:	2000035c 	.word	0x2000035c

080014f0 <int_MCO2>:

//-----------------------------Inicio configuracion MCO1------------------------------------------

//Funcion para la configuracion inicial del MCO1
void int_MCO2(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	//Configuracion inicial del MCO2
	configMCO2(0);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f003 f887 	bl	8004608 <configMCO2>
	configMCO2PRE(4);
 80014fa:	2004      	movs	r0, #4
 80014fc:	f003 f8a0 	bl	8004640 <configMCO2PRE>
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <int_Config_Motor>:
//------------------------------Fin configuracion MCO1------------------------------------------


//------------------------------Inicio configuracion de lso motores------------------------------------------
void int_Config_Motor(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	handler_Motor_R.configMotor.dutty =  20;
 800150a:	4b55      	ldr	r3, [pc, #340]	; (8001660 <int_Config_Motor+0x15c>)
 800150c:	4a55      	ldr	r2, [pc, #340]	; (8001664 <int_Config_Motor+0x160>)
 800150e:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_R.configMotor.frecuency = &value_period;
 8001510:	4b53      	ldr	r3, [pc, #332]	; (8001660 <int_Config_Motor+0x15c>)
 8001512:	4a55      	ldr	r2, [pc, #340]	; (8001668 <int_Config_Motor+0x164>)
 8001514:	635a      	str	r2, [r3, #52]	; 0x34
	handler_Motor_R.configMotor.dir = SET;
 8001516:	4b52      	ldr	r3, [pc, #328]	; (8001660 <int_Config_Motor+0x15c>)
 8001518:	2201      	movs	r2, #1
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	//handler de los perifericos
	handler_Motor_R.phandlerGPIOEN = &handler_GPIO_MotorR_EN;
 800151e:	4b50      	ldr	r3, [pc, #320]	; (8001660 <int_Config_Motor+0x15c>)
 8001520:	4a52      	ldr	r2, [pc, #328]	; (800166c <int_Config_Motor+0x168>)
 8001522:	645a      	str	r2, [r3, #68]	; 0x44
	handler_Motor_R.phandlerGPIOIN = &handler_GPIO_MotorR_IN;
 8001524:	4b4e      	ldr	r3, [pc, #312]	; (8001660 <int_Config_Motor+0x15c>)
 8001526:	4a52      	ldr	r2, [pc, #328]	; (8001670 <int_Config_Motor+0x16c>)
 8001528:	641a      	str	r2, [r3, #64]	; 0x40
	handler_Motor_R.phandlerPWM = &handler_PWM_MotorR;
 800152a:	4b4d      	ldr	r3, [pc, #308]	; (8001660 <int_Config_Motor+0x15c>)
 800152c:	4a51      	ldr	r2, [pc, #324]	; (8001674 <int_Config_Motor+0x170>)
 800152e:	649a      	str	r2, [r3, #72]	; 0x48
	//definicion de parametros
	handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_1 = handler_Motor_R.parametersMotor.parametersPID.e_2 = 0;
 8001530:	4b4b      	ldr	r3, [pc, #300]	; (8001660 <int_Config_Motor+0x15c>)
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
 8001538:	4b49      	ldr	r3, [pc, #292]	; (8001660 <int_Config_Motor+0x15c>)
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	4a48      	ldr	r2, [pc, #288]	; (8001660 <int_Config_Motor+0x15c>)
 800153e:	60d3      	str	r3, [r2, #12]
 8001540:	4b47      	ldr	r3, [pc, #284]	; (8001660 <int_Config_Motor+0x15c>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	4a46      	ldr	r2, [pc, #280]	; (8001660 <int_Config_Motor+0x15c>)
 8001546:	6093      	str	r3, [r2, #8]
	handler_Motor_R.parametersMotor.parametersPID.u = handler_Motor_R.parametersMotor.parametersPID.u_1 = 0;
 8001548:	4b45      	ldr	r3, [pc, #276]	; (8001660 <int_Config_Motor+0x15c>)
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	4b43      	ldr	r3, [pc, #268]	; (8001660 <int_Config_Motor+0x15c>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	4a42      	ldr	r2, [pc, #264]	; (8001660 <int_Config_Motor+0x15c>)
 8001556:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	float theta=2+Ts/2;
 8001558:	4b47      	ldr	r3, [pc, #284]	; (8001678 <int_Config_Motor+0x174>)
 800155a:	ed93 7a00 	vldr	s14, [r3]
 800155e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001562:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001566:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800156a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800156e:	edc7 7a01 	vstr	s15, [r7, #4]
	constains_calculator(&handler_Motor_R.parametersMotor.parametersPID, 2, 120, theta);   //k,tau,theta
 8001572:	ed97 1a01 	vldr	s2, [r7, #4]
 8001576:	eddf 0a41 	vldr	s1, [pc, #260]	; 800167c <int_Config_Motor+0x178>
 800157a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800157e:	4838      	ldr	r0, [pc, #224]	; (8001660 <int_Config_Motor+0x15c>)
 8001580:	f001 f9e0 	bl	8002944 <constains_calculator>

	//---------------Motor Izquierdo----------------
	//Parametro de la señal del dutty
	handler_Motor_L.configMotor.dutty =  20;
 8001584:	4b3e      	ldr	r3, [pc, #248]	; (8001680 <int_Config_Motor+0x17c>)
 8001586:	4a37      	ldr	r2, [pc, #220]	; (8001664 <int_Config_Motor+0x160>)
 8001588:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_L.configMotor.frecuency = &value_period;
 800158a:	4b3d      	ldr	r3, [pc, #244]	; (8001680 <int_Config_Motor+0x17c>)
 800158c:	4a36      	ldr	r2, [pc, #216]	; (8001668 <int_Config_Motor+0x164>)
 800158e:	635a      	str	r2, [r3, #52]	; 0x34
	handler_Motor_L.configMotor.dir = SET;
 8001590:	4b3b      	ldr	r3, [pc, #236]	; (8001680 <int_Config_Motor+0x17c>)
 8001592:	2201      	movs	r2, #1
 8001594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	//handler de los perifericos
	handler_Motor_L.phandlerGPIOEN = &handler_GPIO_MotorL_EN;
 8001598:	4b39      	ldr	r3, [pc, #228]	; (8001680 <int_Config_Motor+0x17c>)
 800159a:	4a3a      	ldr	r2, [pc, #232]	; (8001684 <int_Config_Motor+0x180>)
 800159c:	645a      	str	r2, [r3, #68]	; 0x44
	handler_Motor_L.phandlerGPIOIN = &handler_GPIO_MotorL_IN;
 800159e:	4b38      	ldr	r3, [pc, #224]	; (8001680 <int_Config_Motor+0x17c>)
 80015a0:	4a39      	ldr	r2, [pc, #228]	; (8001688 <int_Config_Motor+0x184>)
 80015a2:	641a      	str	r2, [r3, #64]	; 0x40
	handler_Motor_L.phandlerPWM = &handler_PWM_MotorL;
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <int_Config_Motor+0x17c>)
 80015a6:	4a39      	ldr	r2, [pc, #228]	; (800168c <int_Config_Motor+0x188>)
 80015a8:	649a      	str	r2, [r3, #72]	; 0x48
	//definicion de parametros
	handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_1 = handler_Motor_L.parametersMotor.parametersPID.e_2 = 0;
 80015aa:	4b35      	ldr	r3, [pc, #212]	; (8001680 <int_Config_Motor+0x17c>)
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
 80015b2:	4b33      	ldr	r3, [pc, #204]	; (8001680 <int_Config_Motor+0x17c>)
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	4a32      	ldr	r2, [pc, #200]	; (8001680 <int_Config_Motor+0x17c>)
 80015b8:	60d3      	str	r3, [r2, #12]
 80015ba:	4b31      	ldr	r3, [pc, #196]	; (8001680 <int_Config_Motor+0x17c>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	4a30      	ldr	r2, [pc, #192]	; (8001680 <int_Config_Motor+0x17c>)
 80015c0:	6093      	str	r3, [r2, #8]
	handler_Motor_L.parametersMotor.parametersPID.u = handler_Motor_L.parametersMotor.parametersPID.u_1 = 0;
 80015c2:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <int_Config_Motor+0x17c>)
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <int_Config_Motor+0x17c>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	4a2c      	ldr	r2, [pc, #176]	; (8001680 <int_Config_Motor+0x17c>)
 80015d0:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	constains_calculator(&handler_Motor_L.parametersMotor.parametersPID, 2, 120, theta);   //k,tau,theta
 80015d2:	ed97 1a01 	vldr	s2, [r7, #4]
 80015d6:	eddf 0a29 	vldr	s1, [pc, #164]	; 800167c <int_Config_Motor+0x178>
 80015da:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80015de:	4828      	ldr	r0, [pc, #160]	; (8001680 <int_Config_Motor+0x17c>)
 80015e0:	f001 f9b0 	bl	8002944 <constains_calculator>

	//---------------PID del la distancia-----------------
	//definicion de parametros
	parameter_PID_distace.e = parameter_PID_distace.e_1 = parameter_PID_distace.e_2 = 0;
 80015e4:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <int_Config_Motor+0x18c>)
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
 80015ec:	4b28      	ldr	r3, [pc, #160]	; (8001690 <int_Config_Motor+0x18c>)
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	4a27      	ldr	r2, [pc, #156]	; (8001690 <int_Config_Motor+0x18c>)
 80015f2:	60d3      	str	r3, [r2, #12]
 80015f4:	4b26      	ldr	r3, [pc, #152]	; (8001690 <int_Config_Motor+0x18c>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4a25      	ldr	r2, [pc, #148]	; (8001690 <int_Config_Motor+0x18c>)
 80015fa:	6093      	str	r3, [r2, #8]
	parameter_PID_distace.u = parameter_PID_distace.u_1 = 0;
 80015fc:	4b24      	ldr	r3, [pc, #144]	; (8001690 <int_Config_Motor+0x18c>)
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	4b22      	ldr	r3, [pc, #136]	; (8001690 <int_Config_Motor+0x18c>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	4a21      	ldr	r2, [pc, #132]	; (8001690 <int_Config_Motor+0x18c>)
 800160a:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	constains_calculator(&parameter_PID_distace, 2, 150, theta);   //k,tau,theta
 800160c:	ed97 1a01 	vldr	s2, [r7, #4]
 8001610:	eddf 0a20 	vldr	s1, [pc, #128]	; 8001694 <int_Config_Motor+0x190>
 8001614:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001618:	481d      	ldr	r0, [pc, #116]	; (8001690 <int_Config_Motor+0x18c>)
 800161a:	f001 f993 	bl	8002944 <constains_calculator>

	//---------------PID al angulo-----------------
	//definicion de parametros
	parameter_PID_phi.e = parameter_PID_phi.e_1 = parameter_PID_phi.e_2 = 0;
 800161e:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <int_Config_Motor+0x194>)
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <int_Config_Motor+0x194>)
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	4a1b      	ldr	r2, [pc, #108]	; (8001698 <int_Config_Motor+0x194>)
 800162c:	60d3      	str	r3, [r2, #12]
 800162e:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <int_Config_Motor+0x194>)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	4a19      	ldr	r2, [pc, #100]	; (8001698 <int_Config_Motor+0x194>)
 8001634:	6093      	str	r3, [r2, #8]
	parameter_PID_phi.u = parameter_PID_phi.u_1 = 0;
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <int_Config_Motor+0x194>)
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <int_Config_Motor+0x194>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4a15      	ldr	r2, [pc, #84]	; (8001698 <int_Config_Motor+0x194>)
 8001644:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	constains_calculator(&parameter_PID_phi, 2, 200, theta);   //k,tau,theta
 8001646:	ed97 1a01 	vldr	s2, [r7, #4]
 800164a:	eddf 0a14 	vldr	s1, [pc, #80]	; 800169c <int_Config_Motor+0x198>
 800164e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001652:	4811      	ldr	r0, [pc, #68]	; (8001698 <int_Config_Motor+0x194>)
 8001654:	f001 f976 	bl	8002944 <constains_calculator>

};
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200002ec 	.word	0x200002ec
 8001664:	41a00000 	.word	0x41a00000
 8001668:	20000002 	.word	0x20000002
 800166c:	200002d4 	.word	0x200002d4
 8001670:	200002c8 	.word	0x200002c8
 8001674:	200002e0 	.word	0x200002e0
 8001678:	20000004 	.word	0x20000004
 800167c:	42f00000 	.word	0x42f00000
 8001680:	20000368 	.word	0x20000368
 8001684:	20000350 	.word	0x20000350
 8001688:	20000344 	.word	0x20000344
 800168c:	2000035c 	.word	0x2000035c
 8001690:	200003f4 	.word	0x200003f4
 8001694:	43160000 	.word	0x43160000
 8001698:	200003d4 	.word	0x200003d4
 800169c:	43480000 	.word	0x43480000

080016a0 <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <BasicTimer2_Callback+0x10>)
 80016a6:	f002 fee6 	bl	8004476 <GPIOxTooglePin>
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000208 	.word	0x20000208
 80016b4:	00000000 	.word	0x00000000

080016b8 <BasicTimer3_Callback>:

//-------------------------study--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer3_Callback(void)
{
 80016b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016bc:	ed2d 8b02 	vpush	{d8}
 80016c0:	b089      	sub	sp, #36	; 0x24
 80016c2:	af04      	add	r7, sp, #16
	if(flag_motor==1)
 80016c4:	4bc8      	ldr	r3, [pc, #800]	; (80019e8 <BasicTimer3_Callback+0x330>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	f040 8309 	bne.w	8001ce0 <BasicTimer3_Callback+0x628>
	{
		//Calculamos la velocidad
		handler_Motor_L.parametersMotor.distance = (cm_L*handler_Motor_L.parametersMotor.count);                   //[mm]
 80016ce:	4bc7      	ldr	r3, [pc, #796]	; (80019ec <BasicTimer3_Callback+0x334>)
 80016d0:	8c1b      	ldrh	r3, [r3, #32]
 80016d2:	ee07 3a90 	vmov	s15, r3
 80016d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016da:	4bc5      	ldr	r3, [pc, #788]	; (80019f0 <BasicTimer3_Callback+0x338>)
 80016dc:	edd3 7a00 	vldr	s15, [r3]
 80016e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e4:	4bc1      	ldr	r3, [pc, #772]	; (80019ec <BasicTimer3_Callback+0x334>)
 80016e6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		handler_Motor_R.parametersMotor.distance = (cm_R*handler_Motor_R.parametersMotor.count);				   //[mm]
 80016ea:	4bc2      	ldr	r3, [pc, #776]	; (80019f4 <BasicTimer3_Callback+0x33c>)
 80016ec:	8c1b      	ldrh	r3, [r3, #32]
 80016ee:	ee07 3a90 	vmov	s15, r3
 80016f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f6:	4bc0      	ldr	r3, [pc, #768]	; (80019f8 <BasicTimer3_Callback+0x340>)
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001700:	4bbc      	ldr	r3, [pc, #752]	; (80019f4 <BasicTimer3_Callback+0x33c>)
 8001702:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/periodo_TIMER_Count;   //[m/s]
 8001706:	4bb9      	ldr	r3, [pc, #740]	; (80019ec <BasicTimer3_Callback+0x334>)
 8001708:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800170c:	4bbb      	ldr	r3, [pc, #748]	; (80019fc <BasicTimer3_Callback+0x344>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800171c:	4bb3      	ldr	r3, [pc, #716]	; (80019ec <BasicTimer3_Callback+0x334>)
 800171e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/periodo_TIMER_Count;   //[m/s]
 8001722:	4bb4      	ldr	r3, [pc, #720]	; (80019f4 <BasicTimer3_Callback+0x33c>)
 8001724:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001728:	4bb4      	ldr	r3, [pc, #720]	; (80019fc <BasicTimer3_Callback+0x344>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001738:	4bae      	ldr	r3, [pc, #696]	; (80019f4 <BasicTimer3_Callback+0x33c>)
 800173a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		//Reiniciamos el numero de conteos
		handler_Motor_R.parametersMotor.count = 0;
 800173e:	4bad      	ldr	r3, [pc, #692]	; (80019f4 <BasicTimer3_Callback+0x33c>)
 8001740:	2200      	movs	r2, #0
 8001742:	841a      	strh	r2, [r3, #32]
		handler_Motor_L.parametersMotor.count = 0;
 8001744:	4ba9      	ldr	r3, [pc, #676]	; (80019ec <BasicTimer3_Callback+0x334>)
 8001746:	2200      	movs	r2, #0
 8001748:	841a      	strh	r2, [r3, #32]
		//Calculo odometria
		distance_c = (handler_Motor_L.parametersMotor.distance+handler_Motor_R.parametersMotor.distance)/2;  	   //[mm]
 800174a:	4ba8      	ldr	r3, [pc, #672]	; (80019ec <BasicTimer3_Callback+0x334>)
 800174c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001750:	4ba8      	ldr	r3, [pc, #672]	; (80019f4 <BasicTimer3_Callback+0x33c>)
 8001752:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001756:	ee37 7a27 	vadd.f32	s14, s14, s15
 800175a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800175e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001762:	4ba7      	ldr	r3, [pc, #668]	; (8001a00 <BasicTimer3_Callback+0x348>)
 8001764:	edc3 7a00 	vstr	s15, [r3]
		velocity_c = (handler_Motor_R.parametersMotor.velocity+handler_Motor_L.parametersMotor.velocity)/2;        //[m/s]
 8001768:	4ba2      	ldr	r3, [pc, #648]	; (80019f4 <BasicTimer3_Callback+0x33c>)
 800176a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800176e:	4b9f      	ldr	r3, [pc, #636]	; (80019ec <BasicTimer3_Callback+0x334>)
 8001770:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001774:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001778:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800177c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001780:	4ba0      	ldr	r3, [pc, #640]	; (8001a04 <BasicTimer3_Callback+0x34c>)
 8001782:	edc3 7a00 	vstr	s15, [r3]
		w_angular_c = ((handler_Motor_R.parametersMotor.velocity-handler_Motor_L.parametersMotor.velocity)*100000)/b; //[rad/s]
 8001786:	4b9b      	ldr	r3, [pc, #620]	; (80019f4 <BasicTimer3_Callback+0x33c>)
 8001788:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800178c:	4b97      	ldr	r3, [pc, #604]	; (80019ec <BasicTimer3_Callback+0x334>)
 800178e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001796:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8001a08 <BasicTimer3_Callback+0x350>
 800179a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800179e:	eddf 6a9b 	vldr	s13, [pc, #620]	; 8001a0c <BasicTimer3_Callback+0x354>
 80017a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017a6:	4b9a      	ldr	r3, [pc, #616]	; (8001a10 <BasicTimer3_Callback+0x358>)
 80017a8:	edc3 7a00 	vstr	s15, [r3]
		parameter_Posicion_Robot.xr_position = parameter_Posicion_Robot.xr_position + (distance_c*(cos(parameter_Posicion_Robot.phi_relativo)));        //[mm]
 80017ac:	4b99      	ldr	r3, [pc, #612]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fee1 	bl	8000578 <__aeabi_f2d>
 80017b6:	4604      	mov	r4, r0
 80017b8:	460d      	mov	r5, r1
 80017ba:	4b91      	ldr	r3, [pc, #580]	; (8001a00 <BasicTimer3_Callback+0x348>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe feda 	bl	8000578 <__aeabi_f2d>
 80017c4:	4680      	mov	r8, r0
 80017c6:	4689      	mov	r9, r1
 80017c8:	4b92      	ldr	r3, [pc, #584]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fed3 	bl	8000578 <__aeabi_f2d>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	ec43 2b10 	vmov	d0, r2, r3
 80017da:	f008 ffdd 	bl	800a798 <cos>
 80017de:	ec53 2b10 	vmov	r2, r3, d0
 80017e2:	4640      	mov	r0, r8
 80017e4:	4649      	mov	r1, r9
 80017e6:	f7fe ff1f 	bl	8000628 <__aeabi_dmul>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4620      	mov	r0, r4
 80017f0:	4629      	mov	r1, r5
 80017f2:	f7fe fd63 	bl	80002bc <__adddf3>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	f7ff fa0b 	bl	8000c18 <__aeabi_d2f>
 8001802:	4603      	mov	r3, r0
 8001804:	4a83      	ldr	r2, [pc, #524]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 8001806:	6053      	str	r3, [r2, #4]
		parameter_Posicion_Robot.yr_position  = parameter_Posicion_Robot.yr_position  + (distance_c*(sin(parameter_Posicion_Robot.phi_relativo)));        //[mm]
 8001808:	4b82      	ldr	r3, [pc, #520]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe feb3 	bl	8000578 <__aeabi_f2d>
 8001812:	4604      	mov	r4, r0
 8001814:	460d      	mov	r5, r1
 8001816:	4b7a      	ldr	r3, [pc, #488]	; (8001a00 <BasicTimer3_Callback+0x348>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe feac 	bl	8000578 <__aeabi_f2d>
 8001820:	4680      	mov	r8, r0
 8001822:	4689      	mov	r9, r1
 8001824:	4b7b      	ldr	r3, [pc, #492]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fea5 	bl	8000578 <__aeabi_f2d>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	ec43 2b10 	vmov	d0, r2, r3
 8001836:	f009 f803 	bl	800a840 <sin>
 800183a:	ec53 2b10 	vmov	r2, r3, d0
 800183e:	4640      	mov	r0, r8
 8001840:	4649      	mov	r1, r9
 8001842:	f7fe fef1 	bl	8000628 <__aeabi_dmul>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4620      	mov	r0, r4
 800184c:	4629      	mov	r1, r5
 800184e:	f7fe fd35 	bl	80002bc <__adddf3>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	f7ff f9dd 	bl	8000c18 <__aeabi_d2f>
 800185e:	4603      	mov	r3, r0
 8001860:	4a6c      	ldr	r2, [pc, #432]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 8001862:	6093      	str	r3, [r2, #8]
		parameter_Posicion_Robot.phi_relativo = parameter_Posicion_Robot.phi_relativo + ((handler_Motor_R.parametersMotor.distance-handler_Motor_L.parametersMotor.distance)*100)/b;   //[rad]
 8001864:	4b6b      	ldr	r3, [pc, #428]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 8001866:	ed93 7a00 	vldr	s14, [r3]
 800186a:	4b62      	ldr	r3, [pc, #392]	; (80019f4 <BasicTimer3_Callback+0x33c>)
 800186c:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001870:	4b5e      	ldr	r3, [pc, #376]	; (80019ec <BasicTimer3_Callback+0x334>)
 8001872:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001876:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800187a:	eddf 6a67 	vldr	s13, [pc, #412]	; 8001a18 <BasicTimer3_Callback+0x360>
 800187e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001882:	ed9f 6a62 	vldr	s12, [pc, #392]	; 8001a0c <BasicTimer3_Callback+0x354>
 8001886:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800188a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800188e:	4b61      	ldr	r3, [pc, #388]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 8001890:	edc3 7a00 	vstr	s15, [r3]
		parameter_Posicion_Robot.phi_relativo = atan2(sin(parameter_Posicion_Robot.phi_relativo),cos(parameter_Posicion_Robot.phi_relativo));
 8001894:	4b5f      	ldr	r3, [pc, #380]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fe6d 	bl	8000578 <__aeabi_f2d>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	ec43 2b10 	vmov	d0, r2, r3
 80018a6:	f008 ffcb 	bl	800a840 <sin>
 80018aa:	eeb0 8a40 	vmov.f32	s16, s0
 80018ae:	eef0 8a60 	vmov.f32	s17, s1
 80018b2:	4b58      	ldr	r3, [pc, #352]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fe5e 	bl	8000578 <__aeabi_f2d>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	ec43 2b10 	vmov	d0, r2, r3
 80018c4:	f008 ff68 	bl	800a798 <cos>
 80018c8:	eeb0 7a40 	vmov.f32	s14, s0
 80018cc:	eef0 7a60 	vmov.f32	s15, s1
 80018d0:	eeb0 1a47 	vmov.f32	s2, s14
 80018d4:	eef0 1a67 	vmov.f32	s3, s15
 80018d8:	eeb0 0a48 	vmov.f32	s0, s16
 80018dc:	eef0 0a68 	vmov.f32	s1, s17
 80018e0:	f009 f806 	bl	800a8f0 <atan2>
 80018e4:	ec53 2b10 	vmov	r2, r3, d0
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f7ff f994 	bl	8000c18 <__aeabi_d2f>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4a48      	ldr	r2, [pc, #288]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 80018f4:	6013      	str	r3, [r2, #0]
		//Paso de c.relativa a c.globales
		parameter_Posicion_Robot.xg_position = parameter_Posicion_Robot.xg_position_inicial + parameter_Posicion_Robot.xr_position*cos_cal + parameter_Posicion_Robot.xr_position*sin_cal;
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 80018f8:	ed93 7a03 	vldr	s14, [r3, #12]
 80018fc:	4b45      	ldr	r3, [pc, #276]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 80018fe:	edd3 6a01 	vldr	s13, [r3, #4]
 8001902:	4b46      	ldr	r3, [pc, #280]	; (8001a1c <BasicTimer3_Callback+0x364>)
 8001904:	edd3 7a00 	vldr	s15, [r3]
 8001908:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800190c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001910:	4b40      	ldr	r3, [pc, #256]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 8001912:	edd3 6a01 	vldr	s13, [r3, #4]
 8001916:	4b42      	ldr	r3, [pc, #264]	; (8001a20 <BasicTimer3_Callback+0x368>)
 8001918:	edd3 7a00 	vldr	s15, [r3]
 800191c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001924:	4b3b      	ldr	r3, [pc, #236]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 8001926:	edc3 7a05 	vstr	s15, [r3, #20]
		parameter_Posicion_Robot.yg_position = parameter_Posicion_Robot.yg_position_inicial - parameter_Posicion_Robot.xr_position*sin_cal + parameter_Posicion_Robot.yr_position*cos_cal;
 800192a:	4b3a      	ldr	r3, [pc, #232]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 800192c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001930:	4b38      	ldr	r3, [pc, #224]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 8001932:	edd3 6a01 	vldr	s13, [r3, #4]
 8001936:	4b3a      	ldr	r3, [pc, #232]	; (8001a20 <BasicTimer3_Callback+0x368>)
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001940:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001944:	4b33      	ldr	r3, [pc, #204]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 8001946:	edd3 6a02 	vldr	s13, [r3, #8]
 800194a:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <BasicTimer3_Callback+0x364>)
 800194c:	edd3 7a00 	vldr	s15, [r3]
 8001950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001958:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 800195a:	edc3 7a06 	vstr	s15, [r3, #24]
		//Convertimos el valor y imprimemos
		sprintf(bufferMsg,"%#.4f\t%#.4f\n", parameter_Posicion_Robot.xg_position , parameter_Posicion_Robot.yg_position);
 800195e:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fe08 	bl	8000578 <__aeabi_f2d>
 8001968:	4604      	mov	r4, r0
 800196a:	460d      	mov	r5, r1
 800196c:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fe01 	bl	8000578 <__aeabi_f2d>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	e9cd 2300 	strd	r2, r3, [sp]
 800197e:	4622      	mov	r2, r4
 8001980:	462b      	mov	r3, r5
 8001982:	4928      	ldr	r1, [pc, #160]	; (8001a24 <BasicTimer3_Callback+0x36c>)
 8001984:	4828      	ldr	r0, [pc, #160]	; (8001a28 <BasicTimer3_Callback+0x370>)
 8001986:	f004 fcdd 	bl	8006344 <siprintf>
		writeMsgForTXE(&handler_USART_USB, bufferMsg);
 800198a:	4927      	ldr	r1, [pc, #156]	; (8001a28 <BasicTimer3_Callback+0x370>)
 800198c:	4827      	ldr	r0, [pc, #156]	; (8001a2c <BasicTimer3_Callback+0x374>)
 800198e:	f003 fc1f 	bl	80051d0 <writeMsgForTXE>
		//Restablecemos valores
		flag_count_odometry = 0;
 8001992:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <BasicTimer3_Callback+0x378>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
		delta_distance_L = 0;
 8001998:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <BasicTimer3_Callback+0x37c>)
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
		delta_distance_R = 0;
 80019a0:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <BasicTimer3_Callback+0x380>)
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
		//calculo la distancia de la recta
		distance_punto_recta = (parameter_Posicion_Robot.xr_position - parameter_Posicion_Robot.yr_position)/R2;
 80019a8:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 80019aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80019ae:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 80019b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80019b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b8:	ee17 0a90 	vmov	r0, s15
 80019bc:	f7fe fddc 	bl	8000578 <__aeabi_f2d>
 80019c0:	a307      	add	r3, pc, #28	; (adr r3, 80019e0 <BasicTimer3_Callback+0x328>)
 80019c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c6:	f7fe ff59 	bl	800087c <__aeabi_ddiv>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4610      	mov	r0, r2
 80019d0:	4619      	mov	r1, r3
 80019d2:	f7ff f921 	bl	8000c18 <__aeabi_d2f>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <BasicTimer3_Callback+0x384>)
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	e030      	b.n	8001a40 <BasicTimer3_Callback+0x388>
 80019de:	bf00      	nop
 80019e0:	667f055a 	.word	0x667f055a
 80019e4:	3ff6a09e 	.word	0x3ff6a09e
 80019e8:	2000046c 	.word	0x2000046c
 80019ec:	20000368 	.word	0x20000368
 80019f0:	20000454 	.word	0x20000454
 80019f4:	200002ec 	.word	0x200002ec
 80019f8:	20000458 	.word	0x20000458
 80019fc:	2000000a 	.word	0x2000000a
 8001a00:	2000045c 	.word	0x2000045c
 8001a04:	20000460 	.word	0x20000460
 8001a08:	47c35000 	.word	0x47c35000
 8001a0c:	4622f800 	.word	0x4622f800
 8001a10:	20000464 	.word	0x20000464
 8001a14:	2000041c 	.word	0x2000041c
 8001a18:	42c80000 	.word	0x42c80000
 8001a1c:	2000043c 	.word	0x2000043c
 8001a20:	20000440 	.word	0x20000440
 8001a24:	0800c1e0 	.word	0x0800c1e0
 8001a28:	2000027c 	.word	0x2000027c
 8001a2c:	20000270 	.word	0x20000270
 8001a30:	20000448 	.word	0x20000448
 8001a34:	2000044c 	.word	0x2000044c
 8001a38:	20000450 	.word	0x20000450
 8001a3c:	20000488 	.word	0x20000488

		if(flag_Modo_Control==1)
 8001a40:	4bc1      	ldr	r3, [pc, #772]	; (8001d48 <BasicTimer3_Callback+0x690>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d16f      	bne.n	8001b28 <BasicTimer3_Callback+0x470>
		{
			//Cambio de modo y establecimiento de line center
			if(fabs(distance_punto_recta)>16)
 8001a48:	4bc0      	ldr	r3, [pc, #768]	; (8001d4c <BasicTimer3_Callback+0x694>)
 8001a4a:	edd3 7a00 	vldr	s15, [r3]
 8001a4e:	eef0 7ae7 	vabs.f32	s15, s15
 8001a52:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5e:	dd0c      	ble.n	8001a7a <BasicTimer3_Callback+0x3c2>
			{
				flag_Modo_Control = 1;
 8001a60:	4bb9      	ldr	r3, [pc, #740]	; (8001d48 <BasicTimer3_Callback+0x690>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
				line_center = distance_punto_recta/2;
 8001a66:	4bb9      	ldr	r3, [pc, #740]	; (8001d4c <BasicTimer3_Callback+0x694>)
 8001a68:	ed93 7a00 	vldr	s14, [r3]
 8001a6c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a74:	4bb6      	ldr	r3, [pc, #728]	; (8001d50 <BasicTimer3_Callback+0x698>)
 8001a76:	edc3 7a00 	vstr	s15, [r3]
			}
			//correccion
			correction_dutty_c = 0;
 8001a7a:	4bb6      	ldr	r3, [pc, #728]	; (8001d54 <BasicTimer3_Callback+0x69c>)
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
			//Convertirmos los valores de velocidad a porcentaje
			porVel_L = 590*(handler_Motor_L.parametersMotor.velocity) - 36.53;
 8001a82:	4bb5      	ldr	r3, [pc, #724]	; (8001d58 <BasicTimer3_Callback+0x6a0>)
 8001a84:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a88:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8001d5c <BasicTimer3_Callback+0x6a4>
 8001a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a90:	ee17 0a90 	vmov	r0, s15
 8001a94:	f7fe fd70 	bl	8000578 <__aeabi_f2d>
 8001a98:	a3a5      	add	r3, pc, #660	; (adr r3, 8001d30 <BasicTimer3_Callback+0x678>)
 8001a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9e:	f7fe fc0b 	bl	80002b8 <__aeabi_dsub>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f7ff f8b5 	bl	8000c18 <__aeabi_d2f>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4aab      	ldr	r2, [pc, #684]	; (8001d60 <BasicTimer3_Callback+0x6a8>)
 8001ab2:	6013      	str	r3, [r2, #0]
			porVel_R = 590*(handler_Motor_R.parametersMotor.velocity) - 36.53;
 8001ab4:	4bab      	ldr	r3, [pc, #684]	; (8001d64 <BasicTimer3_Callback+0x6ac>)
 8001ab6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001aba:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8001d5c <BasicTimer3_Callback+0x6a4>
 8001abe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac2:	ee17 0a90 	vmov	r0, s15
 8001ac6:	f7fe fd57 	bl	8000578 <__aeabi_f2d>
 8001aca:	a399      	add	r3, pc, #612	; (adr r3, 8001d30 <BasicTimer3_Callback+0x678>)
 8001acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad0:	f7fe fbf2 	bl	80002b8 <__aeabi_dsub>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	f7ff f89c 	bl	8000c18 <__aeabi_d2f>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4aa1      	ldr	r2, [pc, #644]	; (8001d68 <BasicTimer3_Callback+0x6b0>)
 8001ae4:	6013      	str	r3, [r2, #0]
			//Aplicamos el PID
			PID(&handler_Motor_L.parametersMotor.parametersPID,setpoint_dutty,porVel_L);
 8001ae6:	4ba1      	ldr	r3, [pc, #644]	; (8001d6c <BasicTimer3_Callback+0x6b4>)
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	4b9c      	ldr	r3, [pc, #624]	; (8001d60 <BasicTimer3_Callback+0x6a8>)
 8001aee:	ed93 7a00 	vldr	s14, [r3]
 8001af2:	eef0 0a47 	vmov.f32	s1, s14
 8001af6:	eeb0 0a67 	vmov.f32	s0, s15
 8001afa:	4897      	ldr	r0, [pc, #604]	; (8001d58 <BasicTimer3_Callback+0x6a0>)
 8001afc:	f000 fda8 	bl	8002650 <PID>
			PID(&handler_Motor_R.parametersMotor.parametersPID,setpoint_dutty,porVel_R);
 8001b00:	4b9a      	ldr	r3, [pc, #616]	; (8001d6c <BasicTimer3_Callback+0x6b4>)
 8001b02:	edd3 7a00 	vldr	s15, [r3]
 8001b06:	4b98      	ldr	r3, [pc, #608]	; (8001d68 <BasicTimer3_Callback+0x6b0>)
 8001b08:	ed93 7a00 	vldr	s14, [r3]
 8001b0c:	eef0 0a47 	vmov.f32	s1, s14
 8001b10:	eeb0 0a67 	vmov.f32	s0, s15
 8001b14:	4893      	ldr	r0, [pc, #588]	; (8001d64 <BasicTimer3_Callback+0x6ac>)
 8001b16:	f000 fd9b 	bl	8002650 <PID>
			//Correccion del dutty
			correction(&handler_Motor_L);
 8001b1a:	488f      	ldr	r0, [pc, #572]	; (8001d58 <BasicTimer3_Callback+0x6a0>)
 8001b1c:	f000 fdec 	bl	80026f8 <correction>
			correction(&handler_Motor_R);
 8001b20:	4890      	ldr	r0, [pc, #576]	; (8001d64 <BasicTimer3_Callback+0x6ac>)
 8001b22:	f000 fde9 	bl	80026f8 <correction>
		//Reiniciamos el numero de conteos
		handler_Motor_R.parametersMotor.count = 0;
		handler_Motor_L.parametersMotor.count = 0;
	}

}
 8001b26:	e18d      	b.n	8001e44 <BasicTimer3_Callback+0x78c>
			flag_line_center++;
 8001b28:	4b91      	ldr	r3, [pc, #580]	; (8001d70 <BasicTimer3_Callback+0x6b8>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	4b8f      	ldr	r3, [pc, #572]	; (8001d70 <BasicTimer3_Callback+0x6b8>)
 8001b32:	801a      	strh	r2, [r3, #0]
			float ang_measure = parameter_Posicion_Robot.phi_relativo-setpoint_phi;
 8001b34:	4b8f      	ldr	r3, [pc, #572]	; (8001d74 <BasicTimer3_Callback+0x6bc>)
 8001b36:	ed93 7a00 	vldr	s14, [r3]
 8001b3a:	4b8f      	ldr	r3, [pc, #572]	; (8001d78 <BasicTimer3_Callback+0x6c0>)
 8001b3c:	edd3 7a00 	vldr	s15, [r3]
 8001b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b44:	edc7 7a02 	vstr	s15, [r7, #8]
			if(ang_measure<(0.05) && ang_measure>(-0.05) && flag_line_center>2)
 8001b48:	68b8      	ldr	r0, [r7, #8]
 8001b4a:	f7fe fd15 	bl	8000578 <__aeabi_f2d>
 8001b4e:	a37a      	add	r3, pc, #488	; (adr r3, 8001d38 <BasicTimer3_Callback+0x680>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe ffda 	bl	8000b0c <__aeabi_dcmplt>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d01b      	beq.n	8001b96 <BasicTimer3_Callback+0x4de>
 8001b5e:	68b8      	ldr	r0, [r7, #8]
 8001b60:	f7fe fd0a 	bl	8000578 <__aeabi_f2d>
 8001b64:	a376      	add	r3, pc, #472	; (adr r3, 8001d40 <BasicTimer3_Callback+0x688>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	f7fe ffed 	bl	8000b48 <__aeabi_dcmpgt>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d010      	beq.n	8001b96 <BasicTimer3_Callback+0x4de>
 8001b74:	4b7e      	ldr	r3, [pc, #504]	; (8001d70 <BasicTimer3_Callback+0x6b8>)
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d90c      	bls.n	8001b96 <BasicTimer3_Callback+0x4de>
				line_center = distance_punto_recta/2;
 8001b7c:	4b73      	ldr	r3, [pc, #460]	; (8001d4c <BasicTimer3_Callback+0x694>)
 8001b7e:	ed93 7a00 	vldr	s14, [r3]
 8001b82:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b8a:	4b71      	ldr	r3, [pc, #452]	; (8001d50 <BasicTimer3_Callback+0x698>)
 8001b8c:	edc3 7a00 	vstr	s15, [r3]
				flag_line_center = 0;
 8001b90:	4b77      	ldr	r3, [pc, #476]	; (8001d70 <BasicTimer3_Callback+0x6b8>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	801a      	strh	r2, [r3, #0]
			if(distance_punto_recta<(8) && distance_punto_recta>(-8))
 8001b96:	4b6d      	ldr	r3, [pc, #436]	; (8001d4c <BasicTimer3_Callback+0x694>)
 8001b98:	edd3 7a00 	vldr	s15, [r3]
 8001b9c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001ba0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba8:	d51a      	bpl.n	8001be0 <BasicTimer3_Callback+0x528>
 8001baa:	4b68      	ldr	r3, [pc, #416]	; (8001d4c <BasicTimer3_Callback+0x694>)
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8001bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbc:	dd10      	ble.n	8001be0 <BasicTimer3_Callback+0x528>
				count_equi++;
 8001bbe:	4b6f      	ldr	r3, [pc, #444]	; (8001d7c <BasicTimer3_Callback+0x6c4>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4b6d      	ldr	r3, [pc, #436]	; (8001d7c <BasicTimer3_Callback+0x6c4>)
 8001bc8:	701a      	strb	r2, [r3, #0]
				if(count_equi==10)
 8001bca:	4b6c      	ldr	r3, [pc, #432]	; (8001d7c <BasicTimer3_Callback+0x6c4>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b0a      	cmp	r3, #10
 8001bd0:	d109      	bne.n	8001be6 <BasicTimer3_Callback+0x52e>
					flag_Modo_Control = 1;
 8001bd2:	4b5d      	ldr	r3, [pc, #372]	; (8001d48 <BasicTimer3_Callback+0x690>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]
					count_equi = 0;
 8001bd8:	4b68      	ldr	r3, [pc, #416]	; (8001d7c <BasicTimer3_Callback+0x6c4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
				if(count_equi==10)
 8001bde:	e002      	b.n	8001be6 <BasicTimer3_Callback+0x52e>
				count_equi=0;
 8001be0:	4b66      	ldr	r3, [pc, #408]	; (8001d7c <BasicTimer3_Callback+0x6c4>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
			float auxDistance = distance_punto_recta - line_center;
 8001be6:	4b59      	ldr	r3, [pc, #356]	; (8001d4c <BasicTimer3_Callback+0x694>)
 8001be8:	ed93 7a00 	vldr	s14, [r3]
 8001bec:	4b58      	ldr	r3, [pc, #352]	; (8001d50 <BasicTimer3_Callback+0x698>)
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf6:	edc7 7a01 	vstr	s15, [r7, #4]
			float corr = 0;
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
			if (auxDistance>0)
 8001c00:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0c:	dd2a      	ble.n	8001c64 <BasicTimer3_Callback+0x5ac>
				corr = 50*(1-exp(-auxDistance/10));
 8001c0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c12:	eef1 7a67 	vneg.f32	s15, s15
 8001c16:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c1a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c1e:	ee16 0a90 	vmov	r0, s13
 8001c22:	f7fe fca9 	bl	8000578 <__aeabi_f2d>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	ec43 2b10 	vmov	d0, r2, r3
 8001c2e:	f008 fe63 	bl	800a8f8 <exp>
 8001c32:	ec53 2b10 	vmov	r2, r3, d0
 8001c36:	f04f 0000 	mov.w	r0, #0
 8001c3a:	4951      	ldr	r1, [pc, #324]	; (8001d80 <BasicTimer3_Callback+0x6c8>)
 8001c3c:	f7fe fb3c 	bl	80002b8 <__aeabi_dsub>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	4b4d      	ldr	r3, [pc, #308]	; (8001d84 <BasicTimer3_Callback+0x6cc>)
 8001c4e:	f7fe fceb 	bl	8000628 <__aeabi_dmul>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7fe ffdd 	bl	8000c18 <__aeabi_d2f>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	e027      	b.n	8001cb4 <BasicTimer3_Callback+0x5fc>
				corr = -50*(1-exp(auxDistance/10));
 8001c64:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c68:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c70:	ee16 0a90 	vmov	r0, s13
 8001c74:	f7fe fc80 	bl	8000578 <__aeabi_f2d>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	ec43 2b10 	vmov	d0, r2, r3
 8001c80:	f008 fe3a 	bl	800a8f8 <exp>
 8001c84:	ec53 2b10 	vmov	r2, r3, d0
 8001c88:	f04f 0000 	mov.w	r0, #0
 8001c8c:	493c      	ldr	r1, [pc, #240]	; (8001d80 <BasicTimer3_Callback+0x6c8>)
 8001c8e:	f7fe fb13 	bl	80002b8 <__aeabi_dsub>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4610      	mov	r0, r2
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	4b3a      	ldr	r3, [pc, #232]	; (8001d88 <BasicTimer3_Callback+0x6d0>)
 8001ca0:	f7fe fcc2 	bl	8000628 <__aeabi_dmul>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	f7fe ffb4 	bl	8000c18 <__aeabi_d2f>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60fb      	str	r3, [r7, #12]
			correction_dutty_c = corr*m+bl;
 8001cb4:	4b35      	ldr	r3, [pc, #212]	; (8001d8c <BasicTimer3_Callback+0x6d4>)
 8001cb6:	ed93 7a00 	vldr	s14, [r3]
 8001cba:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cc2:	4b33      	ldr	r3, [pc, #204]	; (8001d90 <BasicTimer3_Callback+0x6d8>)
 8001cc4:	edd3 7a00 	vldr	s15, [r3]
 8001cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ccc:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <BasicTimer3_Callback+0x69c>)
 8001cce:	edc3 7a00 	vstr	s15, [r3]
			correction(&handler_Motor_L);
 8001cd2:	4821      	ldr	r0, [pc, #132]	; (8001d58 <BasicTimer3_Callback+0x6a0>)
 8001cd4:	f000 fd10 	bl	80026f8 <correction>
			correction(&handler_Motor_R);
 8001cd8:	4822      	ldr	r0, [pc, #136]	; (8001d64 <BasicTimer3_Callback+0x6ac>)
 8001cda:	f000 fd0d 	bl	80026f8 <correction>
}
 8001cde:	e0b1      	b.n	8001e44 <BasicTimer3_Callback+0x78c>
	else if(flag_motor==3)
 8001ce0:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <BasicTimer3_Callback+0x6dc>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d161      	bne.n	8001dac <BasicTimer3_Callback+0x6f4>
		count_time = count_time + periodo_TIMER_Count;       //Tiempo en ms
 8001ce8:	4b2b      	ldr	r3, [pc, #172]	; (8001d98 <BasicTimer3_Callback+0x6e0>)
 8001cea:	881a      	ldrh	r2, [r3, #0]
 8001cec:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <BasicTimer3_Callback+0x6e4>)
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	4b28      	ldr	r3, [pc, #160]	; (8001d98 <BasicTimer3_Callback+0x6e0>)
 8001cf6:	801a      	strh	r2, [r3, #0]
		sprintf(bufferMsg,"%u\t%u\t%u\n", count_time,(handler_Motor_R.parametersMotor.count), (handler_Motor_L.parametersMotor.count));
 8001cf8:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <BasicTimer3_Callback+0x6e0>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <BasicTimer3_Callback+0x6ac>)
 8001d00:	8c1b      	ldrh	r3, [r3, #32]
 8001d02:	4619      	mov	r1, r3
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <BasicTimer3_Callback+0x6a0>)
 8001d06:	8c1b      	ldrh	r3, [r3, #32]
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4924      	ldr	r1, [pc, #144]	; (8001da0 <BasicTimer3_Callback+0x6e8>)
 8001d0e:	4825      	ldr	r0, [pc, #148]	; (8001da4 <BasicTimer3_Callback+0x6ec>)
 8001d10:	f004 fb18 	bl	8006344 <siprintf>
		writeMsgForTXE(&handler_USART_USB, bufferMsg);
 8001d14:	4923      	ldr	r1, [pc, #140]	; (8001da4 <BasicTimer3_Callback+0x6ec>)
 8001d16:	4824      	ldr	r0, [pc, #144]	; (8001da8 <BasicTimer3_Callback+0x6f0>)
 8001d18:	f003 fa5a 	bl	80051d0 <writeMsgForTXE>
		handler_Motor_R.parametersMotor.count = 0;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <BasicTimer3_Callback+0x6ac>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	841a      	strh	r2, [r3, #32]
		handler_Motor_L.parametersMotor.count = 0;
 8001d22:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <BasicTimer3_Callback+0x6a0>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	841a      	strh	r2, [r3, #32]
}
 8001d28:	e08c      	b.n	8001e44 <BasicTimer3_Callback+0x78c>
 8001d2a:	bf00      	nop
 8001d2c:	f3af 8000 	nop.w
 8001d30:	0a3d70a4 	.word	0x0a3d70a4
 8001d34:	404243d7 	.word	0x404243d7
 8001d38:	9999999a 	.word	0x9999999a
 8001d3c:	3fa99999 	.word	0x3fa99999
 8001d40:	9999999a 	.word	0x9999999a
 8001d44:	bfa99999 	.word	0xbfa99999
 8001d48:	20000008 	.word	0x20000008
 8001d4c:	20000488 	.word	0x20000488
 8001d50:	2000048c 	.word	0x2000048c
 8001d54:	20000490 	.word	0x20000490
 8001d58:	20000368 	.word	0x20000368
 8001d5c:	44138000 	.word	0x44138000
 8001d60:	20000478 	.word	0x20000478
 8001d64:	200002ec 	.word	0x200002ec
 8001d68:	2000047c 	.word	0x2000047c
 8001d6c:	20000418 	.word	0x20000418
 8001d70:	20000014 	.word	0x20000014
 8001d74:	2000041c 	.word	0x2000041c
 8001d78:	20000414 	.word	0x20000414
 8001d7c:	20000470 	.word	0x20000470
 8001d80:	3ff00000 	.word	0x3ff00000
 8001d84:	40490000 	.word	0x40490000
 8001d88:	c0490000 	.word	0xc0490000
 8001d8c:	20000010 	.word	0x20000010
 8001d90:	20000484 	.word	0x20000484
 8001d94:	2000046c 	.word	0x2000046c
 8001d98:	2000046e 	.word	0x2000046e
 8001d9c:	2000000a 	.word	0x2000000a
 8001da0:	0800c1f0 	.word	0x0800c1f0
 8001da4:	2000027c 	.word	0x2000027c
 8001da8:	20000270 	.word	0x20000270
	else if(flag_motor==4)
 8001dac:	4b29      	ldr	r3, [pc, #164]	; (8001e54 <BasicTimer3_Callback+0x79c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d147      	bne.n	8001e44 <BasicTimer3_Callback+0x78c>
		handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/periodo_TIMER_Count;   //[m/s]
 8001db4:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <BasicTimer3_Callback+0x7a0>)
 8001db6:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001dba:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <BasicTimer3_Callback+0x7a4>)
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dca:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <BasicTimer3_Callback+0x7a0>)
 8001dcc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/periodo_TIMER_Count;   //[m/s]
 8001dd0:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <BasicTimer3_Callback+0x7a8>)
 8001dd2:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001dd6:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <BasicTimer3_Callback+0x7a4>)
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	ee07 3a90 	vmov	s15, r3
 8001dde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001de6:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <BasicTimer3_Callback+0x7a8>)
 8001de8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		count_time = count_time + periodo_TIMER_Count;       //Tiempo en ms
 8001dec:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <BasicTimer3_Callback+0x7ac>)
 8001dee:	881a      	ldrh	r2, [r3, #0]
 8001df0:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <BasicTimer3_Callback+0x7a4>)
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	4413      	add	r3, r2
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <BasicTimer3_Callback+0x7ac>)
 8001dfa:	801a      	strh	r2, [r3, #0]
		sprintf(bufferMsg,"%u\t%#.4f\t%#.4f\n", count_time, handler_Motor_L.parametersMotor.velocity , handler_Motor_R.parametersMotor.velocity);
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <BasicTimer3_Callback+0x7ac>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	461e      	mov	r6, r3
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <BasicTimer3_Callback+0x7a0>)
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fbb6 	bl	8000578 <__aeabi_f2d>
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	460d      	mov	r5, r1
 8001e10:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <BasicTimer3_Callback+0x7a8>)
 8001e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fbaf 	bl	8000578 <__aeabi_f2d>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e22:	e9cd 4500 	strd	r4, r5, [sp]
 8001e26:	4632      	mov	r2, r6
 8001e28:	490f      	ldr	r1, [pc, #60]	; (8001e68 <BasicTimer3_Callback+0x7b0>)
 8001e2a:	4810      	ldr	r0, [pc, #64]	; (8001e6c <BasicTimer3_Callback+0x7b4>)
 8001e2c:	f004 fa8a 	bl	8006344 <siprintf>
		writeMsgForTXE(&handler_USART_USB, bufferMsg);
 8001e30:	490e      	ldr	r1, [pc, #56]	; (8001e6c <BasicTimer3_Callback+0x7b4>)
 8001e32:	480f      	ldr	r0, [pc, #60]	; (8001e70 <BasicTimer3_Callback+0x7b8>)
 8001e34:	f003 f9cc 	bl	80051d0 <writeMsgForTXE>
		handler_Motor_R.parametersMotor.count = 0;
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <BasicTimer3_Callback+0x7a8>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	841a      	strh	r2, [r3, #32]
		handler_Motor_L.parametersMotor.count = 0;
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <BasicTimer3_Callback+0x7a0>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	841a      	strh	r2, [r3, #32]
}
 8001e44:	bf00      	nop
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	ecbd 8b02 	vpop	{d8}
 8001e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e52:	bf00      	nop
 8001e54:	2000046c 	.word	0x2000046c
 8001e58:	20000368 	.word	0x20000368
 8001e5c:	2000000a 	.word	0x2000000a
 8001e60:	200002ec 	.word	0x200002ec
 8001e64:	2000046e 	.word	0x2000046e
 8001e68:	0800c1fc 	.word	0x0800c1fc
 8001e6c:	2000027c 	.word	0x2000027c
 8001e70:	20000270 	.word	0x20000270

08001e74 <BasicUSART1_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART1_Callback(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	//Guardamos el caracter recibido
	charRead = getRxData();
 8001e78:	f003 f9e8 	bl	800524c <getRxData>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b02      	ldr	r3, [pc, #8]	; (8001e8c <BasicUSART1_Callback+0x18>)
 8001e82:	701a      	strb	r2, [r3, #0]
	//Funcion que almacena los caracteres del comando recibido
	recepcionCommand();
 8001e84:	f000 f8ac 	bl	8001fe0 <recepcionCommand>
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000000 	.word	0x20000000

08001e90 <callback_extInt1>:


//-------------------------Fotocompuerta--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el EXTI13 y EXTI13
void callback_extInt1(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	handler_Motor_R.parametersMotor.count++;
 8001e94:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <callback_extInt1+0x8c>)
 8001e96:	8c1b      	ldrh	r3, [r3, #32]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	4b1f      	ldr	r3, [pc, #124]	; (8001f1c <callback_extInt1+0x8c>)
 8001e9e:	841a      	strh	r2, [r3, #32]
	handler_Motor_R.parametersMotor.countCotinuous++;
 8001ea0:	4b1e      	ldr	r3, [pc, #120]	; (8001f1c <callback_extInt1+0x8c>)
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	4a1d      	ldr	r2, [pc, #116]	; (8001f1c <callback_extInt1+0x8c>)
 8001ea8:	6253      	str	r3, [r2, #36]	; 0x24
	//calculo del tiempo entre interrupcion
//	uint64_t timeNow = getTicksUs();
//	handler_Motor_R.parametersMotor.timeCount = timeNow-timeBackR;
//	timeBackR = timeNow;
	//Verificamos que la bandera este arriba
	if(flag_motor==2 && flag_turn==1 && (limit_count_turn)<(handler_Motor_R.parametersMotor.count))
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <callback_extInt1+0x90>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d112      	bne.n	8001ed8 <callback_extInt1+0x48>
 8001eb2:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <callback_extInt1+0x94>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d10e      	bne.n	8001ed8 <callback_extInt1+0x48>
 8001eba:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <callback_extInt1+0x8c>)
 8001ebc:	8c1a      	ldrh	r2, [r3, #32]
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <callback_extInt1+0x98>)
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d908      	bls.n	8001ed8 <callback_extInt1+0x48>
	{
		//Desactivamos los motores
		status_motor(RESET);
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f000 fc6e 	bl	80027a8 <status_motor>
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8001ecc:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <callback_extInt1+0x9c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff f8f8 	bl	80010c6 <updateDirMotor>
	{
		//Desactivamos los motores
		status_motor(RESET);
	}

}
 8001ed6:	e01e      	b.n	8001f16 <callback_extInt1+0x86>
	else if(flag_motor==1 && distance<(cm_R*handler_Motor_R.parametersMotor.countCotinuous))
 8001ed8:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <callback_extInt1+0x90>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d11a      	bne.n	8001f16 <callback_extInt1+0x86>
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <callback_extInt1+0xa0>)
 8001ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <callback_extInt1+0x8c>)
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <callback_extInt1+0xa4>)
 8001efc:	edd3 7a00 	vldr	s15, [r3]
 8001f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0c:	d400      	bmi.n	8001f10 <callback_extInt1+0x80>
}
 8001f0e:	e002      	b.n	8001f16 <callback_extInt1+0x86>
		status_motor(RESET);
 8001f10:	2000      	movs	r0, #0
 8001f12:	f000 fc49 	bl	80027a8 <status_motor>
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200002ec 	.word	0x200002ec
 8001f20:	2000046c 	.word	0x2000046c
 8001f24:	2000046d 	.word	0x2000046d
 8001f28:	20000472 	.word	0x20000472
 8001f2c:	20000468 	.word	0x20000468
 8001f30:	20000474 	.word	0x20000474
 8001f34:	20000458 	.word	0x20000458

08001f38 <callback_extInt3>:
void callback_extInt3(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
	handler_Motor_L.parametersMotor.count++;
 8001f3c:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <callback_extInt3+0x8c>)
 8001f3e:	8c1b      	ldrh	r3, [r3, #32]
 8001f40:	3301      	adds	r3, #1
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <callback_extInt3+0x8c>)
 8001f46:	841a      	strh	r2, [r3, #32]
	handler_Motor_L.parametersMotor.countCotinuous++;
 8001f48:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <callback_extInt3+0x8c>)
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	4a1d      	ldr	r2, [pc, #116]	; (8001fc4 <callback_extInt3+0x8c>)
 8001f50:	6253      	str	r3, [r2, #36]	; 0x24
	//calculo del tiempo entre interrupcion
//	uint64_t timeNow = getTicksUs();
//	handler_Motor_L.parametersMotor.timeCount = timeNow-timeBackL;
//	timeBackL = timeNow;
	//Verificamos que la bandera este arriba
	if(flag_motor==2 && flag_turn==2 && (limit_count_turn)<(handler_Motor_L.parametersMotor.count))
 8001f52:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <callback_extInt3+0x90>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d112      	bne.n	8001f80 <callback_extInt3+0x48>
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <callback_extInt3+0x94>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d10e      	bne.n	8001f80 <callback_extInt3+0x48>
 8001f62:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <callback_extInt3+0x8c>)
 8001f64:	8c1a      	ldrh	r2, [r3, #32]
 8001f66:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <callback_extInt3+0x98>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d908      	bls.n	8001f80 <callback_extInt3+0x48>
	{
		//Desactivamos los motores
		status_motor(RESET);
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f000 fc1a 	bl	80027a8 <status_motor>
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8001f74:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <callback_extInt3+0x9c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff f8a4 	bl	80010c6 <updateDirMotor>
	else if(flag_motor==1 && distance<(cm_L*handler_Motor_L.parametersMotor.countCotinuous))
	{
		//Desactivamos los motores
		status_motor(RESET);
	}
}
 8001f7e:	e01e      	b.n	8001fbe <callback_extInt3+0x86>
	else if(flag_motor==1 && distance<(cm_L*handler_Motor_L.parametersMotor.countCotinuous))
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <callback_extInt3+0x90>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d11a      	bne.n	8001fbe <callback_extInt3+0x86>
 8001f88:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <callback_extInt3+0xa0>)
 8001f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f8e:	ee07 3a90 	vmov	s15, r3
 8001f92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <callback_extInt3+0x8c>)
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	ee07 3a90 	vmov	s15, r3
 8001f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <callback_extInt3+0xa4>)
 8001fa4:	edd3 7a00 	vldr	s15, [r3]
 8001fa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb4:	d400      	bmi.n	8001fb8 <callback_extInt3+0x80>
}
 8001fb6:	e002      	b.n	8001fbe <callback_extInt3+0x86>
		status_motor(RESET);
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f000 fbf5 	bl	80027a8 <status_motor>
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000368 	.word	0x20000368
 8001fc8:	2000046c 	.word	0x2000046c
 8001fcc:	2000046d 	.word	0x2000046d
 8001fd0:	20000472 	.word	0x20000472
 8001fd4:	20000468 	.word	0x20000468
 8001fd8:	20000474 	.word	0x20000474
 8001fdc:	20000454 	.word	0x20000454

08001fe0 <recepcionCommand>:

//----------------------------Inicio de la definicion de las funciones de los comandos----------------------------------------

//Funcion que recibe los caracteres del comando recibido
void recepcionCommand(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
	if(charRead == '@')
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <recepcionCommand+0x4c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b40      	cmp	r3, #64	; 0x40
 8001fea:	d10c      	bne.n	8002006 <recepcionCommand+0x26>
	{
		//Almacenamos el elemento nulo
		bufferRecepcion[counterRecepcion] = '\0';
 8001fec:	4b10      	ldr	r3, [pc, #64]	; (8002030 <recepcionCommand+0x50>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <recepcionCommand+0x54>)
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	5499      	strb	r1, [r3, r2]
		//Establecemos la bandera como alta
		commandComplete = 1;
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <recepcionCommand+0x58>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
		//Reiniciamos la variable
		counterRecepcion = 0;
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <recepcionCommand+0x50>)
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
		//Aumentamos en uno la posicion del arreglo
		counterRecepcion++;
		//Reiniciamos la variable
	}

}
 8002004:	e00c      	b.n	8002020 <recepcionCommand+0x40>
		bufferRecepcion[counterRecepcion] = charRead;
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <recepcionCommand+0x50>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	4b07      	ldr	r3, [pc, #28]	; (800202c <recepcionCommand+0x4c>)
 800200e:	7819      	ldrb	r1, [r3, #0]
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <recepcionCommand+0x54>)
 8002012:	5499      	strb	r1, [r3, r2]
		counterRecepcion++;
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <recepcionCommand+0x50>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	3301      	adds	r3, #1
 800201a:	b2da      	uxtb	r2, r3
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <recepcionCommand+0x50>)
 800201e:	701a      	strb	r2, [r3, #0]
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000000 	.word	0x20000000
 8002030:	20000494 	.word	0x20000494
 8002034:	20000498 	.word	0x20000498
 8002038:	20000016 	.word	0x20000016
 800203c:	00000000 	.word	0x00000000

08002040 <runCommand>:

//Funcion que ejecuta el comando ingresando
void runCommand(char *prtcommand)
{
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b09d      	sub	sp, #116	; 0x74
 8002044:	af04      	add	r7, sp, #16
 8002046:	6078      	str	r0, [r7, #4]
	//Variables para almacenar los elmentos que entrega el comando luego de ser divididos por la funcion sscanf
	char cmd[64]= {0};
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	f107 0320 	add.w	r3, r7, #32
 8002050:	223c      	movs	r2, #60	; 0x3c
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f003 faed 	bl	8005634 <memset>
	int firtsParameter = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]
	int secondParameter = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
	int thirdParameter = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
	int forthParameter = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
	//char bufferMsg[64]= {0};

	//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
	sscanf(prtcommand, "%s %u %u %u %u", cmd, &firtsParameter, &secondParameter, &thirdParameter, &forthParameter);
 800206a:	f107 0118 	add.w	r1, r7, #24
 800206e:	f107 021c 	add.w	r2, r7, #28
 8002072:	f107 030c 	add.w	r3, r7, #12
 8002076:	9302      	str	r3, [sp, #8]
 8002078:	f107 0310 	add.w	r3, r7, #16
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	460b      	mov	r3, r1
 8002086:	49ae      	ldr	r1, [pc, #696]	; (8002340 <runCommand+0x300>)
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f004 f97b 	bl	8006384 <siscanf>

	//Imprime lista que muestra los comandos que tiene el dispositivo
	if(strcmp(cmd, "help")==0)
 800208e:	f107 031c 	add.w	r3, r7, #28
 8002092:	49ac      	ldr	r1, [pc, #688]	; (8002344 <runCommand+0x304>)
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe f8a3 	bl	80001e0 <strcmp>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d128      	bne.n	80020f2 <runCommand+0xb2>
	{
		writeMsgForTXE(&handler_USART_USB, "Help Menu: \n");
 80020a0:	49a9      	ldr	r1, [pc, #676]	; (8002348 <runCommand+0x308>)
 80020a2:	48aa      	ldr	r0, [pc, #680]	; (800234c <runCommand+0x30c>)
 80020a4:	f003 f894 	bl	80051d0 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "1) help  ---Imprime lista de comandos. \n");
 80020a8:	49a9      	ldr	r1, [pc, #676]	; (8002350 <runCommand+0x310>)
 80020aa:	48a8      	ldr	r0, [pc, #672]	; (800234c <runCommand+0x30c>)
 80020ac:	f003 f890 	bl	80051d0 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "2) frequency # --- Cambiar el valor de la frecuenencia de las pruebas, [HZ] \n");
 80020b0:	49a8      	ldr	r1, [pc, #672]	; (8002354 <runCommand+0x314>)
 80020b2:	48a6      	ldr	r0, [pc, #664]	; (800234c <runCommand+0x30c>)
 80020b4:	f003 f88c 	bl	80051d0 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "3) line # # #---Inicia Linea recta, #: dist [mm], #: dutty inicial , #: dutty estable \n");
 80020b8:	49a7      	ldr	r1, [pc, #668]	; (8002358 <runCommand+0x318>)
 80020ba:	48a4      	ldr	r0, [pc, #656]	; (800234c <runCommand+0x30c>)
 80020bc:	f003 f888 	bl	80051d0 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "4) turn # # # # ---Iniciamos el giro del robot #: ang #:dir #:dutty_R \n");
 80020c0:	49a6      	ldr	r1, [pc, #664]	; (800235c <runCommand+0x31c>)
 80020c2:	48a2      	ldr	r0, [pc, #648]	; (800234c <runCommand+0x30c>)
 80020c4:	f003 f884 	bl	80051d0 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "5) start # # # # ---Inicia movimiento, #: perTC [ms], #: dutty_L, #dutty_R, #: freqTP [Hz] \n");
 80020c8:	49a5      	ldr	r1, [pc, #660]	; (8002360 <runCommand+0x320>)
 80020ca:	48a0      	ldr	r0, [pc, #640]	; (800234c <runCommand+0x30c>)
 80020cc:	f003 f880 	bl	80051d0 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "6) reaction # # # ---Inicia Curva de reaccion,#: perTC [ms], #: dutty_L y dutty_R, #: freqTP [Hz] \n");
 80020d0:	49a4      	ldr	r1, [pc, #656]	; (8002364 <runCommand+0x324>)
 80020d2:	489e      	ldr	r0, [pc, #632]	; (800234c <runCommand+0x30c>)
 80020d4:	f003 f87c 	bl	80051d0 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "7) stop ---Para el estudio en medio de la ejecucion \n");
 80020d8:	49a3      	ldr	r1, [pc, #652]	; (8002368 <runCommand+0x328>)
 80020da:	489c      	ldr	r0, [pc, #624]	; (800234c <runCommand+0x30c>)
 80020dc:	f003 f878 	bl	80051d0 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "0) const # # # ---Constantes del PID #: L,k,tau \n");
 80020e0:	49a2      	ldr	r1, [pc, #648]	; (800236c <runCommand+0x32c>)
 80020e2:	489a      	ldr	r0, [pc, #616]	; (800234c <runCommand+0x30c>)
 80020e4:	f003 f874 	bl	80051d0 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "0) equation # #  ---Constantes de la ecuacion lineal #: m,b  591.91-->59191 \n");
 80020e8:	49a1      	ldr	r1, [pc, #644]	; (8002370 <runCommand+0x330>)
 80020ea:	4898      	ldr	r0, [pc, #608]	; (800234c <runCommand+0x30c>)
 80020ec:	f003 f870 	bl	80051d0 <writeMsgForTXE>
		//Se imprime que el comando no fue valido
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
	}


}
 80020f0:	e277      	b.n	80025e2 <runCommand+0x5a2>
	else if (strcmp(cmd, "frequency") == 0)
 80020f2:	f107 031c 	add.w	r3, r7, #28
 80020f6:	499f      	ldr	r1, [pc, #636]	; (8002374 <runCommand+0x334>)
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe f871 	bl	80001e0 <strcmp>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d107      	bne.n	8002114 <runCommand+0xd4>
		frequency_PWM_Motor = 100000/firtsParameter;
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	4a9c      	ldr	r2, [pc, #624]	; (8002378 <runCommand+0x338>)
 8002108:	fb92 f3f3 	sdiv	r3, r2, r3
 800210c:	b29a      	uxth	r2, r3
 800210e:	4b9b      	ldr	r3, [pc, #620]	; (800237c <runCommand+0x33c>)
 8002110:	801a      	strh	r2, [r3, #0]
}
 8002112:	e266      	b.n	80025e2 <runCommand+0x5a2>
	else if (strcmp(cmd, "line") == 0)
 8002114:	f107 031c 	add.w	r3, r7, #28
 8002118:	4999      	ldr	r1, [pc, #612]	; (8002380 <runCommand+0x340>)
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe f860 	bl	80001e0 <strcmp>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	f040 80c3 	bne.w	80022ae <runCommand+0x26e>
		parameter_Posicion_Robot.xg_position_inicial = parameter_Posicion_Robot.xg_position;
 8002128:	4b96      	ldr	r3, [pc, #600]	; (8002384 <runCommand+0x344>)
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	4a95      	ldr	r2, [pc, #596]	; (8002384 <runCommand+0x344>)
 800212e:	60d3      	str	r3, [r2, #12]
		parameter_Posicion_Robot.yg_position_inicial = parameter_Posicion_Robot.yg_position;
 8002130:	4b94      	ldr	r3, [pc, #592]	; (8002384 <runCommand+0x344>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	4a93      	ldr	r2, [pc, #588]	; (8002384 <runCommand+0x344>)
 8002136:	6113      	str	r3, [r2, #16]
		parameter_Posicion_Robot.ang_Giro += turn;
 8002138:	4b92      	ldr	r3, [pc, #584]	; (8002384 <runCommand+0x344>)
 800213a:	ed93 7a07 	vldr	s14, [r3, #28]
 800213e:	4b92      	ldr	r3, [pc, #584]	; (8002388 <runCommand+0x348>)
 8002140:	edd3 7a00 	vldr	s15, [r3]
 8002144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002148:	4b8e      	ldr	r3, [pc, #568]	; (8002384 <runCommand+0x344>)
 800214a:	edc3 7a07 	vstr	s15, [r3, #28]
		parameter_Posicion_Robot.xr_position = 0;
 800214e:	4b8d      	ldr	r3, [pc, #564]	; (8002384 <runCommand+0x344>)
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	605a      	str	r2, [r3, #4]
		parameter_Posicion_Robot.yr_position = 0;
 8002156:	4b8b      	ldr	r3, [pc, #556]	; (8002384 <runCommand+0x344>)
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
		parameter_Posicion_Robot.phi_relativo = (PI/4);
 800215e:	4b89      	ldr	r3, [pc, #548]	; (8002384 <runCommand+0x344>)
 8002160:	4a8a      	ldr	r2, [pc, #552]	; (800238c <runCommand+0x34c>)
 8002162:	601a      	str	r2, [r3, #0]
		cos_cal = cos((PI/4)+parameter_Posicion_Robot.ang_Giro);
 8002164:	4b87      	ldr	r3, [pc, #540]	; (8002384 <runCommand+0x344>)
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe fa05 	bl	8000578 <__aeabi_f2d>
 800216e:	a370      	add	r3, pc, #448	; (adr r3, 8002330 <runCommand+0x2f0>)
 8002170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002174:	f7fe f8a2 	bl	80002bc <__adddf3>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	ec43 2b17 	vmov	d7, r2, r3
 8002180:	eeb0 0a47 	vmov.f32	s0, s14
 8002184:	eef0 0a67 	vmov.f32	s1, s15
 8002188:	f008 fb06 	bl	800a798 <cos>
 800218c:	ec53 2b10 	vmov	r2, r3, d0
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	f7fe fd40 	bl	8000c18 <__aeabi_d2f>
 8002198:	4603      	mov	r3, r0
 800219a:	4a7d      	ldr	r2, [pc, #500]	; (8002390 <runCommand+0x350>)
 800219c:	6013      	str	r3, [r2, #0]
		sin_cal = sin((PI/4)+parameter_Posicion_Robot.ang_Giro);
 800219e:	4b79      	ldr	r3, [pc, #484]	; (8002384 <runCommand+0x344>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f9e8 	bl	8000578 <__aeabi_f2d>
 80021a8:	a361      	add	r3, pc, #388	; (adr r3, 8002330 <runCommand+0x2f0>)
 80021aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ae:	f7fe f885 	bl	80002bc <__adddf3>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	ec43 2b17 	vmov	d7, r2, r3
 80021ba:	eeb0 0a47 	vmov.f32	s0, s14
 80021be:	eef0 0a67 	vmov.f32	s1, s15
 80021c2:	f008 fb3d 	bl	800a840 <sin>
 80021c6:	ec53 2b10 	vmov	r2, r3, d0
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	f7fe fd23 	bl	8000c18 <__aeabi_d2f>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4a6f      	ldr	r2, [pc, #444]	; (8002394 <runCommand+0x354>)
 80021d6:	6013      	str	r3, [r2, #0]
		flag_Modo_Control = 1;
 80021d8:	4b6f      	ldr	r3, [pc, #444]	; (8002398 <runCommand+0x358>)
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
		line_center = -10;
 80021de:	4b6f      	ldr	r3, [pc, #444]	; (800239c <runCommand+0x35c>)
 80021e0:	4a6f      	ldr	r2, [pc, #444]	; (80023a0 <runCommand+0x360>)
 80021e2:	601a      	str	r2, [r3, #0]
		periodo_TIMER_Count = Ts;
 80021e4:	4b6f      	ldr	r3, [pc, #444]	; (80023a4 <runCommand+0x364>)
 80021e6:	edd3 7a00 	vldr	s15, [r3]
 80021ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021ee:	ee17 3a90 	vmov	r3, s15
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	4b6c      	ldr	r3, [pc, #432]	; (80023a8 <runCommand+0x368>)
 80021f6:	801a      	strh	r2, [r3, #0]
		distance = firtsParameter;
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	b21a      	sxth	r2, r3
 80021fc:	4b6b      	ldr	r3, [pc, #428]	; (80023ac <runCommand+0x36c>)
 80021fe:	801a      	strh	r2, [r3, #0]
		duttyInicial = secondParameter;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	ee07 3a90 	vmov	s15, r3
 8002206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800220a:	4b69      	ldr	r3, [pc, #420]	; (80023b0 <runCommand+0x370>)
 800220c:	edc3 7a00 	vstr	s15, [r3]
		setpoint_dutty = thirdParameter;
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800221a:	4b66      	ldr	r3, [pc, #408]	; (80023b4 <runCommand+0x374>)
 800221c:	edc3 7a00 	vstr	s15, [r3]
		setpoint_phi = PI/4;
 8002220:	4b65      	ldr	r3, [pc, #404]	; (80023b8 <runCommand+0x378>)
 8002222:	4a5a      	ldr	r2, [pc, #360]	; (800238c <runCommand+0x34c>)
 8002224:	601a      	str	r2, [r3, #0]
		handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_1 = handler_Motor_L.parametersMotor.parametersPID.e_2 = 0;
 8002226:	4b65      	ldr	r3, [pc, #404]	; (80023bc <runCommand+0x37c>)
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	611a      	str	r2, [r3, #16]
 800222e:	4b63      	ldr	r3, [pc, #396]	; (80023bc <runCommand+0x37c>)
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	4a62      	ldr	r2, [pc, #392]	; (80023bc <runCommand+0x37c>)
 8002234:	60d3      	str	r3, [r2, #12]
 8002236:	4b61      	ldr	r3, [pc, #388]	; (80023bc <runCommand+0x37c>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	4a60      	ldr	r2, [pc, #384]	; (80023bc <runCommand+0x37c>)
 800223c:	6093      	str	r3, [r2, #8]
		handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_1 = handler_Motor_R.parametersMotor.parametersPID.e_2 = 0;
 800223e:	4b60      	ldr	r3, [pc, #384]	; (80023c0 <runCommand+0x380>)
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	611a      	str	r2, [r3, #16]
 8002246:	4b5e      	ldr	r3, [pc, #376]	; (80023c0 <runCommand+0x380>)
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	4a5d      	ldr	r2, [pc, #372]	; (80023c0 <runCommand+0x380>)
 800224c:	60d3      	str	r3, [r2, #12]
 800224e:	4b5c      	ldr	r3, [pc, #368]	; (80023c0 <runCommand+0x380>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	4a5b      	ldr	r2, [pc, #364]	; (80023c0 <runCommand+0x380>)
 8002254:	6093      	str	r3, [r2, #8]
		config_motor(1, periodo_TIMER_Count,  0.9234*(duttyInicial)-3, duttyInicial, frequency_PWM_Motor);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8002256:	4b54      	ldr	r3, [pc, #336]	; (80023a8 <runCommand+0x368>)
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	461c      	mov	r4, r3
 800225c:	4b54      	ldr	r3, [pc, #336]	; (80023b0 <runCommand+0x370>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe f989 	bl	8000578 <__aeabi_f2d>
 8002266:	a334      	add	r3, pc, #208	; (adr r3, 8002338 <runCommand+0x2f8>)
 8002268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226c:	f7fe f9dc 	bl	8000628 <__aeabi_dmul>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	4b51      	ldr	r3, [pc, #324]	; (80023c4 <runCommand+0x384>)
 800227e:	f7fe f81b 	bl	80002b8 <__aeabi_dsub>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4610      	mov	r0, r2
 8002288:	4619      	mov	r1, r3
 800228a:	f7fe fcc5 	bl	8000c18 <__aeabi_d2f>
 800228e:	4601      	mov	r1, r0
 8002290:	4b47      	ldr	r3, [pc, #284]	; (80023b0 <runCommand+0x370>)
 8002292:	edd3 7a00 	vldr	s15, [r3]
 8002296:	4b39      	ldr	r3, [pc, #228]	; (800237c <runCommand+0x33c>)
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	eef0 0a67 	vmov.f32	s1, s15
 80022a0:	ee00 1a10 	vmov	s0, r1
 80022a4:	4621      	mov	r1, r4
 80022a6:	2001      	movs	r0, #1
 80022a8:	f000 fafa 	bl	80028a0 <config_motor>
}
 80022ac:	e199      	b.n	80025e2 <runCommand+0x5a2>
	else if (strcmp(cmd, "const") == 0)
 80022ae:	f107 031c 	add.w	r3, r7, #28
 80022b2:	4945      	ldr	r1, [pc, #276]	; (80023c8 <runCommand+0x388>)
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fd ff93 	bl	80001e0 <strcmp>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f040 8085 	bne.w	80023cc <runCommand+0x38c>
			float theta=firtsParameter+Ts/2;
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	ee07 3a90 	vmov	s15, r3
 80022c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022cc:	4b35      	ldr	r3, [pc, #212]	; (80023a4 <runCommand+0x364>)
 80022ce:	edd3 6a00 	vldr	s13, [r3]
 80022d2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80022d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80022da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022de:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
			constains_calculator(&handler_Motor_L.parametersMotor.parametersPID, secondParameter, thirdParameter, theta);   //k,tau,theta
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	ee07 3a90 	vmov	s15, r3
 80022e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	ee07 3a10 	vmov	s14, r3
 80022f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80022f6:	ed97 1a17 	vldr	s2, [r7, #92]	; 0x5c
 80022fa:	eef0 0a47 	vmov.f32	s1, s14
 80022fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002302:	482e      	ldr	r0, [pc, #184]	; (80023bc <runCommand+0x37c>)
 8002304:	f000 fb1e 	bl	8002944 <constains_calculator>
			constains_calculator(&handler_Motor_R.parametersMotor.parametersPID, secondParameter, thirdParameter, theta);   //k,tau,theta
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	ee07 3a10 	vmov	s14, r3
 8002318:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800231c:	ed97 1a17 	vldr	s2, [r7, #92]	; 0x5c
 8002320:	eef0 0a47 	vmov.f32	s1, s14
 8002324:	eeb0 0a67 	vmov.f32	s0, s15
 8002328:	4825      	ldr	r0, [pc, #148]	; (80023c0 <runCommand+0x380>)
 800232a:	f000 fb0b 	bl	8002944 <constains_calculator>
}
 800232e:	e158      	b.n	80025e2 <runCommand+0x5a2>
 8002330:	54442d18 	.word	0x54442d18
 8002334:	3fe921fb 	.word	0x3fe921fb
 8002338:	28240b78 	.word	0x28240b78
 800233c:	3fed8c7e 	.word	0x3fed8c7e
 8002340:	0800c20c 	.word	0x0800c20c
 8002344:	0800c21c 	.word	0x0800c21c
 8002348:	0800c224 	.word	0x0800c224
 800234c:	20000270 	.word	0x20000270
 8002350:	0800c234 	.word	0x0800c234
 8002354:	0800c260 	.word	0x0800c260
 8002358:	0800c2b0 	.word	0x0800c2b0
 800235c:	0800c308 	.word	0x0800c308
 8002360:	0800c350 	.word	0x0800c350
 8002364:	0800c3b0 	.word	0x0800c3b0
 8002368:	0800c414 	.word	0x0800c414
 800236c:	0800c44c 	.word	0x0800c44c
 8002370:	0800c480 	.word	0x0800c480
 8002374:	0800c4d0 	.word	0x0800c4d0
 8002378:	000186a0 	.word	0x000186a0
 800237c:	2000000c 	.word	0x2000000c
 8002380:	0800c4dc 	.word	0x0800c4dc
 8002384:	2000041c 	.word	0x2000041c
 8002388:	20000444 	.word	0x20000444
 800238c:	3f490fdb 	.word	0x3f490fdb
 8002390:	2000043c 	.word	0x2000043c
 8002394:	20000440 	.word	0x20000440
 8002398:	20000008 	.word	0x20000008
 800239c:	2000048c 	.word	0x2000048c
 80023a0:	c1200000 	.word	0xc1200000
 80023a4:	20000004 	.word	0x20000004
 80023a8:	2000000a 	.word	0x2000000a
 80023ac:	20000474 	.word	0x20000474
 80023b0:	20000480 	.word	0x20000480
 80023b4:	20000418 	.word	0x20000418
 80023b8:	20000414 	.word	0x20000414
 80023bc:	20000368 	.word	0x20000368
 80023c0:	200002ec 	.word	0x200002ec
 80023c4:	40080000 	.word	0x40080000
 80023c8:	0800c4e4 	.word	0x0800c4e4
	else if (strcmp(cmd, "equation") == 0)
 80023cc:	f107 031c 	add.w	r3, r7, #28
 80023d0:	4989      	ldr	r1, [pc, #548]	; (80025f8 <runCommand+0x5b8>)
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fd ff04 	bl	80001e0 <strcmp>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d118      	bne.n	8002410 <runCommand+0x3d0>
			m = ((float) firtsParameter)/100;
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	ee07 3a90 	vmov	s15, r3
 80023e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023e8:	eddf 6a84 	vldr	s13, [pc, #528]	; 80025fc <runCommand+0x5bc>
 80023ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023f0:	4b83      	ldr	r3, [pc, #524]	; (8002600 <runCommand+0x5c0>)
 80023f2:	edc3 7a00 	vstr	s15, [r3]
			bl = ((float) secondParameter)/100;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	ee07 3a90 	vmov	s15, r3
 80023fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002400:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80025fc <runCommand+0x5bc>
 8002404:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002408:	4b7e      	ldr	r3, [pc, #504]	; (8002604 <runCommand+0x5c4>)
 800240a:	edc3 7a00 	vstr	s15, [r3]
}
 800240e:	e0e8      	b.n	80025e2 <runCommand+0x5a2>
	else if (strcmp(cmd, "turn") == 0)
 8002410:	f107 031c 	add.w	r3, r7, #28
 8002414:	497c      	ldr	r1, [pc, #496]	; (8002608 <runCommand+0x5c8>)
 8002416:	4618      	mov	r0, r3
 8002418:	f7fd fee2 	bl	80001e0 <strcmp>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d162      	bne.n	80024e8 <runCommand+0x4a8>
		flag_turn = secondParameter;
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4b79      	ldr	r3, [pc, #484]	; (800260c <runCommand+0x5cc>)
 8002428:	701a      	strb	r2, [r3, #0]
		if(flag_turn==1)
 800242a:	4b78      	ldr	r3, [pc, #480]	; (800260c <runCommand+0x5cc>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d114      	bne.n	800245c <runCommand+0x41c>
			limit_count_turn = (b/DR)*((Ce*firtsParameter)/(2*180));
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	4a76      	ldr	r2, [pc, #472]	; (8002610 <runCommand+0x5d0>)
 8002436:	fb82 1203 	smull	r1, r2, r2, r3
 800243a:	1052      	asrs	r2, r2, #1
 800243c:	17db      	asrs	r3, r3, #31
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	b29b      	uxth	r3, r3
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	b29a      	uxth	r2, r3
 8002446:	4b73      	ldr	r3, [pc, #460]	; (8002614 <runCommand+0x5d4>)
 8002448:	801a      	strh	r2, [r3, #0]
			handler_Motor_Execute = &handler_Motor_R;
 800244a:	4b73      	ldr	r3, [pc, #460]	; (8002618 <runCommand+0x5d8>)
 800244c:	4a73      	ldr	r2, [pc, #460]	; (800261c <runCommand+0x5dc>)
 800244e:	601a      	str	r2, [r3, #0]
			updateDirMotor(handler_Motor_Execute);
 8002450:	4b71      	ldr	r3, [pc, #452]	; (8002618 <runCommand+0x5d8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe fe36 	bl	80010c6 <updateDirMotor>
 800245a:	e013      	b.n	8002484 <runCommand+0x444>
			limit_count_turn = (b/DL)*((Ce*firtsParameter)/(2*180));
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	4a6c      	ldr	r2, [pc, #432]	; (8002610 <runCommand+0x5d0>)
 8002460:	fb82 1203 	smull	r1, r2, r2, r3
 8002464:	1052      	asrs	r2, r2, #1
 8002466:	17db      	asrs	r3, r3, #31
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	b29b      	uxth	r3, r3
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	4b68      	ldr	r3, [pc, #416]	; (8002614 <runCommand+0x5d4>)
 8002472:	801a      	strh	r2, [r3, #0]
			handler_Motor_Execute = &handler_Motor_L;
 8002474:	4b68      	ldr	r3, [pc, #416]	; (8002618 <runCommand+0x5d8>)
 8002476:	4a6a      	ldr	r2, [pc, #424]	; (8002620 <runCommand+0x5e0>)
 8002478:	601a      	str	r2, [r3, #0]
			updateDirMotor(handler_Motor_Execute);
 800247a:	4b67      	ldr	r3, [pc, #412]	; (8002618 <runCommand+0x5d8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe fe21 	bl	80010c6 <updateDirMotor>
		config_motor(2, periodo_TIMER_Count, 0.9234*((float) thirdParameter)-3, thirdParameter, frequency_PWM_Motor);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8002484:	4b67      	ldr	r3, [pc, #412]	; (8002624 <runCommand+0x5e4>)
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	461c      	mov	r4, r3
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	ee07 3a90 	vmov	s15, r3
 8002490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002494:	ee17 0a90 	vmov	r0, s15
 8002498:	f7fe f86e 	bl	8000578 <__aeabi_f2d>
 800249c:	a354      	add	r3, pc, #336	; (adr r3, 80025f0 <runCommand+0x5b0>)
 800249e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a2:	f7fe f8c1 	bl	8000628 <__aeabi_dmul>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	4b5d      	ldr	r3, [pc, #372]	; (8002628 <runCommand+0x5e8>)
 80024b4:	f7fd ff00 	bl	80002b8 <__aeabi_dsub>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	f7fe fbaa 	bl	8000c18 <__aeabi_d2f>
 80024c4:	4601      	mov	r1, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d0:	4b56      	ldr	r3, [pc, #344]	; (800262c <runCommand+0x5ec>)
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	eef0 0a67 	vmov.f32	s1, s15
 80024da:	ee00 1a10 	vmov	s0, r1
 80024de:	4621      	mov	r1, r4
 80024e0:	2002      	movs	r0, #2
 80024e2:	f000 f9dd 	bl	80028a0 <config_motor>
}
 80024e6:	e07c      	b.n	80025e2 <runCommand+0x5a2>
	else if (strcmp(cmd, "start") == 0)
 80024e8:	f107 031c 	add.w	r3, r7, #28
 80024ec:	4950      	ldr	r1, [pc, #320]	; (8002630 <runCommand+0x5f0>)
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fd fe76 	bl	80001e0 <strcmp>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d12a      	bne.n	8002550 <runCommand+0x510>
		periodo_TIMER_Count = firtsParameter;
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	4b49      	ldr	r3, [pc, #292]	; (8002624 <runCommand+0x5e4>)
 8002500:	801a      	strh	r2, [r3, #0]
		config_motor(3, periodo_TIMER_Count,  (secondParameter/100), (thirdParameter/100), forthParameter);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8002502:	4b48      	ldr	r3, [pc, #288]	; (8002624 <runCommand+0x5e4>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	4619      	mov	r1, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	4a4a      	ldr	r2, [pc, #296]	; (8002634 <runCommand+0x5f4>)
 800250c:	fb82 0203 	smull	r0, r2, r2, r3
 8002510:	1152      	asrs	r2, r2, #5
 8002512:	17db      	asrs	r3, r3, #31
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4a44      	ldr	r2, [pc, #272]	; (8002634 <runCommand+0x5f4>)
 8002522:	fb82 0203 	smull	r0, r2, r2, r3
 8002526:	1152      	asrs	r2, r2, #5
 8002528:	17db      	asrs	r3, r3, #31
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	ee07 3a10 	vmov	s14, r3
 8002530:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	461a      	mov	r2, r3
 8002538:	eef0 0a47 	vmov.f32	s1, s14
 800253c:	eeb0 0a67 	vmov.f32	s0, s15
 8002540:	2003      	movs	r0, #3
 8002542:	f000 f9ad 	bl	80028a0 <config_motor>
		writeMsgForTXE(&handler_USART_USB, "Inicio conteo... \n");
 8002546:	493c      	ldr	r1, [pc, #240]	; (8002638 <runCommand+0x5f8>)
 8002548:	483c      	ldr	r0, [pc, #240]	; (800263c <runCommand+0x5fc>)
 800254a:	f002 fe41 	bl	80051d0 <writeMsgForTXE>
}
 800254e:	e048      	b.n	80025e2 <runCommand+0x5a2>
	else if (strcmp(cmd, "reaction") == 0)
 8002550:	f107 031c 	add.w	r3, r7, #28
 8002554:	493a      	ldr	r1, [pc, #232]	; (8002640 <runCommand+0x600>)
 8002556:	4618      	mov	r0, r3
 8002558:	f7fd fe42 	bl	80001e0 <strcmp>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d12a      	bne.n	80025b8 <runCommand+0x578>
		periodo_TIMER_Count = firtsParameter;
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	b29a      	uxth	r2, r3
 8002566:	4b2f      	ldr	r3, [pc, #188]	; (8002624 <runCommand+0x5e4>)
 8002568:	801a      	strh	r2, [r3, #0]
		config_motor(4, periodo_TIMER_Count, (secondParameter/100), (secondParameter/100), thirdParameter);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 800256a:	4b2e      	ldr	r3, [pc, #184]	; (8002624 <runCommand+0x5e4>)
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	4619      	mov	r1, r3
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	4a30      	ldr	r2, [pc, #192]	; (8002634 <runCommand+0x5f4>)
 8002574:	fb82 0203 	smull	r0, r2, r2, r3
 8002578:	1152      	asrs	r2, r2, #5
 800257a:	17db      	asrs	r3, r3, #31
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	ee07 3a90 	vmov	s15, r3
 8002582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	4a2a      	ldr	r2, [pc, #168]	; (8002634 <runCommand+0x5f4>)
 800258a:	fb82 0203 	smull	r0, r2, r2, r3
 800258e:	1152      	asrs	r2, r2, #5
 8002590:	17db      	asrs	r3, r3, #31
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	ee07 3a10 	vmov	s14, r3
 8002598:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	461a      	mov	r2, r3
 80025a0:	eef0 0a47 	vmov.f32	s1, s14
 80025a4:	eeb0 0a67 	vmov.f32	s0, s15
 80025a8:	2004      	movs	r0, #4
 80025aa:	f000 f979 	bl	80028a0 <config_motor>
		writeMsgForTXE(&handler_USART_USB, "Inicio conteo... \n");
 80025ae:	4922      	ldr	r1, [pc, #136]	; (8002638 <runCommand+0x5f8>)
 80025b0:	4822      	ldr	r0, [pc, #136]	; (800263c <runCommand+0x5fc>)
 80025b2:	f002 fe0d 	bl	80051d0 <writeMsgForTXE>
}
 80025b6:	e014      	b.n	80025e2 <runCommand+0x5a2>
	else if (strcmp(cmd, "stop") == 0)
 80025b8:	f107 031c 	add.w	r3, r7, #28
 80025bc:	4921      	ldr	r1, [pc, #132]	; (8002644 <runCommand+0x604>)
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd fe0e 	bl	80001e0 <strcmp>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d107      	bne.n	80025da <runCommand+0x59a>
		status_motor(RESET);
 80025ca:	2000      	movs	r0, #0
 80025cc:	f000 f8ec 	bl	80027a8 <status_motor>
		writeMsgForTXE(&handler_USART_USB, "Estudio finalizado \n");
 80025d0:	491d      	ldr	r1, [pc, #116]	; (8002648 <runCommand+0x608>)
 80025d2:	481a      	ldr	r0, [pc, #104]	; (800263c <runCommand+0x5fc>)
 80025d4:	f002 fdfc 	bl	80051d0 <writeMsgForTXE>
}
 80025d8:	e003      	b.n	80025e2 <runCommand+0x5a2>
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
 80025da:	491c      	ldr	r1, [pc, #112]	; (800264c <runCommand+0x60c>)
 80025dc:	4817      	ldr	r0, [pc, #92]	; (800263c <runCommand+0x5fc>)
 80025de:	f002 fdf7 	bl	80051d0 <writeMsgForTXE>
}
 80025e2:	bf00      	nop
 80025e4:	3764      	adds	r7, #100	; 0x64
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd90      	pop	{r4, r7, pc}
 80025ea:	bf00      	nop
 80025ec:	f3af 8000 	nop.w
 80025f0:	28240b78 	.word	0x28240b78
 80025f4:	3fed8c7e 	.word	0x3fed8c7e
 80025f8:	0800c4ec 	.word	0x0800c4ec
 80025fc:	42c80000 	.word	0x42c80000
 8002600:	20000010 	.word	0x20000010
 8002604:	20000484 	.word	0x20000484
 8002608:	0800c4f8 	.word	0x0800c4f8
 800260c:	2000046d 	.word	0x2000046d
 8002610:	66666667 	.word	0x66666667
 8002614:	20000472 	.word	0x20000472
 8002618:	20000468 	.word	0x20000468
 800261c:	200002ec 	.word	0x200002ec
 8002620:	20000368 	.word	0x20000368
 8002624:	2000000a 	.word	0x2000000a
 8002628:	40080000 	.word	0x40080000
 800262c:	2000000c 	.word	0x2000000c
 8002630:	0800c500 	.word	0x0800c500
 8002634:	51eb851f 	.word	0x51eb851f
 8002638:	0800c508 	.word	0x0800c508
 800263c:	20000270 	.word	0x20000270
 8002640:	0800c51c 	.word	0x0800c51c
 8002644:	0800c528 	.word	0x0800c528
 8002648:	0800c530 	.word	0x0800c530
 800264c:	0800c548 	.word	0x0800c548

08002650 <PID>:
//----------------------------Inicio de la definicion de las funciones-----------------------------------------


//--------------------PID----------------------
void PID(Parameters_PID_t *ptrPIDHandler, float setpoint, float measure)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	ed87 0a02 	vstr	s0, [r7, #8]
 800265c:	edc7 0a01 	vstr	s1, [r7, #4]
	//Calculo del error
	ptrPIDHandler->e = setpoint-measure;
 8002660:	ed97 7a02 	vldr	s14, [r7, #8]
 8002664:	edd7 7a01 	vldr	s15, [r7, #4]
 8002668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	edc3 7a02 	vstr	s15, [r3, #8]
    // Controle PID
	float p0 =  ptrPIDHandler->q0*ptrPIDHandler->e;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	ed93 7a05 	vldr	s14, [r3, #20]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	edd3 7a02 	vldr	s15, [r3, #8]
 800267e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002682:	edc7 7a07 	vstr	s15, [r7, #28]
	float p1 =  ptrPIDHandler->q1*ptrPIDHandler->e_1;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	ed93 7a06 	vldr	s14, [r3, #24]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002696:	edc7 7a06 	vstr	s15, [r7, #24]
	float p2 =  ptrPIDHandler->q2*ptrPIDHandler->e_2;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	ed93 7a07 	vldr	s14, [r3, #28]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80026a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026aa:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->u = ptrPIDHandler->u_1 + p0 + p1 + p2;        //Ley del controlador PID discreto
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80026b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80026b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80026c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80026c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	edc3 7a00 	vstr	s15, [r3]

     //Retorno a los valores reales
	ptrPIDHandler->e_2 = ptrPIDHandler->e_1;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	611a      	str	r2, [r3, #16]
	ptrPIDHandler->e_1 = ptrPIDHandler->e;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	60da      	str	r2, [r3, #12]
	ptrPIDHandler->u_1 = ptrPIDHandler->u;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	605a      	str	r2, [r3, #4]
}
 80026ea:	bf00      	nop
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <correction>:

void correction(Motor_Handler_t *ptrMotorHandler)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

	//Definimos variables auxiliares
	float port_dutty = 0;
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
	//Conversion ley de control->velocidad->valor dutty
	if(ptrMotorHandler == &handler_Motor_L)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a22      	ldr	r2, [pc, #136]	; (8002794 <correction+0x9c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d10a      	bne.n	8002724 <correction+0x2c>
	{
		//Conversion a dutty
		//correction_velocity_c
		port_dutty = ptrMotorHandler->parametersMotor.parametersPID.u - correction_dutty_c;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	ed93 7a00 	vldr	s14, [r3]
 8002714:	4b20      	ldr	r3, [pc, #128]	; (8002798 <correction+0xa0>)
 8002716:	edd3 7a00 	vldr	s15, [r3]
 800271a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800271e:	edc7 7a03 	vstr	s15, [r7, #12]
 8002722:	e009      	b.n	8002738 <correction+0x40>
		//port_dutty = ptrMotorHandler->parametersMotor.parametersPID.u;
	}
	else
	{
		//Conversion a dutty
		port_dutty = ptrMotorHandler->parametersMotor.parametersPID.u + correction_dutty_c;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	ed93 7a00 	vldr	s14, [r3]
 800272a:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <correction+0xa0>)
 800272c:	edd3 7a00 	vldr	s15, [r3]
 8002730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002734:	edc7 7a03 	vstr	s15, [r7, #12]
	}

    //Saturo el porcentaje de dutty en un tope maximo y minimo
    if (port_dutty >= 100.0)
 8002738:	edd7 7a03 	vldr	s15, [r7, #12]
 800273c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800279c <correction+0xa4>
 8002740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002748:	db02      	blt.n	8002750 <correction+0x58>
    {
    	port_dutty = 100.0;
 800274a:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <correction+0xa8>)
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	e018      	b.n	8002782 <correction+0x8a>
    }
    else if(port_dutty <= duttyInicial-5)
 8002750:	4b14      	ldr	r3, [pc, #80]	; (80027a4 <correction+0xac>)
 8002752:	edd3 7a00 	vldr	s15, [r3]
 8002756:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800275a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800275e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002762:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276a:	d809      	bhi.n	8002780 <correction+0x88>
    {
    	port_dutty = duttyInicial-5;
 800276c:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <correction+0xac>)
 800276e:	edd3 7a00 	vldr	s15, [r3]
 8002772:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002776:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800277a:	edc7 7a03 	vstr	s15, [r7, #12]
 800277e:	e000      	b.n	8002782 <correction+0x8a>
    }
    else
    {
    	__NOP();
 8002780:	bf00      	nop
    }

    //Actualizamoe el valor del dutty
    updateDuttyMotor(ptrMotorHandler, port_dutty);
 8002782:	ed97 0a03 	vldr	s0, [r7, #12]
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fe fc86 	bl	8001098 <updateDuttyMotor>
}
 800278c:	bf00      	nop
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000368 	.word	0x20000368
 8002798:	20000490 	.word	0x20000490
 800279c:	42c80000 	.word	0x42c80000
 80027a0:	42c80000 	.word	0x42c80000
 80027a4:	20000480 	.word	0x20000480

080027a8 <status_motor>:

void status_motor(uint8_t status)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
	if(status == 1)
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d138      	bne.n	800282a <status_motor+0x82>
	{
		//Activamos el motor
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_ENABLE);
 80027b8:	4b35      	ldr	r3, [pc, #212]	; (8002890 <status_motor+0xe8>)
 80027ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027bc:	2101      	movs	r1, #1
 80027be:	4618      	mov	r0, r3
 80027c0:	f002 f8fe 	bl	80049c0 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_ENABLE);
 80027c4:	4b33      	ldr	r3, [pc, #204]	; (8002894 <status_motor+0xec>)
 80027c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c8:	2101      	movs	r1, #1
 80027ca:	4618      	mov	r0, r3
 80027cc:	f002 f8f8 	bl	80049c0 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&SET);
 80027d0:	4b2f      	ldr	r3, [pc, #188]	; (8002890 <status_motor+0xe8>)
 80027d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027d4:	4b2e      	ldr	r3, [pc, #184]	; (8002890 <status_motor+0xe8>)
 80027d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	4619      	mov	r1, r3
 80027e2:	4610      	mov	r0, r2
 80027e4:	f001 fe1c 	bl	8004420 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&SET);
 80027e8:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <status_motor+0xec>)
 80027ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ec:	4b29      	ldr	r3, [pc, #164]	; (8002894 <status_motor+0xec>)
 80027ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	4619      	mov	r1, r3
 80027fa:	4610      	mov	r0, r2
 80027fc:	f001 fe10 	bl	8004420 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, RESET);
 8002800:	4b23      	ldr	r3, [pc, #140]	; (8002890 <status_motor+0xe8>)
 8002802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002804:	2100      	movs	r1, #0
 8002806:	4618      	mov	r0, r3
 8002808:	f001 fe0a 	bl	8004420 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, RESET);
 800280c:	4b21      	ldr	r3, [pc, #132]	; (8002894 <status_motor+0xec>)
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	2100      	movs	r1, #0
 8002812:	4618      	mov	r0, r3
 8002814:	f001 fe04 	bl	8004420 <GPIO_writePin>
		//Activamos la interrupcion
		if(flag_motor!=2)
 8002818:	4b1f      	ldr	r3, [pc, #124]	; (8002898 <status_motor+0xf0>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d033      	beq.n	8002888 <status_motor+0xe0>
		{
			statusiInterruptionTimer(&handler_TIMER_Count, INTERRUPTION_ENABLE);
 8002820:	2101      	movs	r1, #1
 8002822:	481e      	ldr	r0, [pc, #120]	; (800289c <status_motor+0xf4>)
 8002824:	f000 fbba 	bl	8002f9c <statusiInterruptionTimer>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
		//Reiniciamos Bandera
		flag_motor = 0;
	}
}
 8002828:	e02e      	b.n	8002888 <status_motor+0xe0>
		if(flag_motor!=2)
 800282a:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <status_motor+0xf0>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d003      	beq.n	800283a <status_motor+0x92>
			statusiInterruptionTimer(&handler_TIMER_Count, INTERRUPTION_DISABLE);
 8002832:	2100      	movs	r1, #0
 8002834:	4819      	ldr	r0, [pc, #100]	; (800289c <status_motor+0xf4>)
 8002836:	f000 fbb1 	bl	8002f9c <statusiInterruptionTimer>
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_DISABLE);
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <status_motor+0xe8>)
 800283c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800283e:	2100      	movs	r1, #0
 8002840:	4618      	mov	r0, r3
 8002842:	f002 f8bd 	bl	80049c0 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_DISABLE);
 8002846:	4b13      	ldr	r3, [pc, #76]	; (8002894 <status_motor+0xec>)
 8002848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800284a:	2100      	movs	r1, #0
 800284c:	4618      	mov	r0, r3
 800284e:	f002 f8b7 	bl	80049c0 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&RESET);
 8002852:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <status_motor+0xe8>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	2100      	movs	r1, #0
 8002858:	4618      	mov	r0, r3
 800285a:	f001 fde1 	bl	8004420 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&RESET);
 800285e:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <status_motor+0xec>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	2100      	movs	r1, #0
 8002864:	4618      	mov	r0, r3
 8002866:	f001 fddb 	bl	8004420 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <status_motor+0xe8>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	2101      	movs	r1, #1
 8002870:	4618      	mov	r0, r3
 8002872:	f001 fdd5 	bl	8004420 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
 8002876:	4b07      	ldr	r3, [pc, #28]	; (8002894 <status_motor+0xec>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	2101      	movs	r1, #1
 800287c:	4618      	mov	r0, r3
 800287e:	f001 fdcf 	bl	8004420 <GPIO_writePin>
		flag_motor = 0;
 8002882:	4b05      	ldr	r3, [pc, #20]	; (8002898 <status_motor+0xf0>)
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000368 	.word	0x20000368
 8002894:	200002ec 	.word	0x200002ec
 8002898:	2000046c 	.word	0x2000046c
 800289c:	200003c4 	.word	0x200003c4

080028a0 <config_motor>:

//Funcion para al configuracion de los motores
void config_motor(uint8_t status, int firth, float second, float third, int forth)  //Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	6139      	str	r1, [r7, #16]
 80028aa:	ed87 0a03 	vstr	s0, [r7, #12]
 80028ae:	edc7 0a02 	vstr	s1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	75fb      	strb	r3, [r7, #23]
	//Actualizacion de la frecuencia del timer
	updateFrequencyTimer(&handler_TIMER_Count, firth);
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	4619      	mov	r1, r3
 80028bc:	4819      	ldr	r0, [pc, #100]	; (8002924 <config_motor+0x84>)
 80028be:	f000 fb8d 	bl	8002fdc <updateFrequencyTimer>
	//Establecer valores
	handler_Motor_R.parametersMotor.count = 0;
 80028c2:	4b19      	ldr	r3, [pc, #100]	; (8002928 <config_motor+0x88>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	841a      	strh	r2, [r3, #32]
	handler_Motor_L.parametersMotor.count = 0;
 80028c8:	4b18      	ldr	r3, [pc, #96]	; (800292c <config_motor+0x8c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	841a      	strh	r2, [r3, #32]
	handler_Motor_R.parametersMotor.countCotinuous = 0;
 80028ce:	4b16      	ldr	r3, [pc, #88]	; (8002928 <config_motor+0x88>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	625a      	str	r2, [r3, #36]	; 0x24
	handler_Motor_L.parametersMotor.countCotinuous = 0;
 80028d4:	4b15      	ldr	r3, [pc, #84]	; (800292c <config_motor+0x8c>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24
	//Establecemos valroes iniciales
	//timeBackR = timeBackL = getTicksUs();
	count_time = 0;
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <config_motor+0x90>)
 80028dc:	2200      	movs	r2, #0
 80028de:	801a      	strh	r2, [r3, #0]
	//Actualizamos el valor del dutty y frecuencia
	value_period = 100000/forth;
 80028e0:	4a14      	ldr	r2, [pc, #80]	; (8002934 <config_motor+0x94>)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	4b13      	ldr	r3, [pc, #76]	; (8002938 <config_motor+0x98>)
 80028ec:	801a      	strh	r2, [r3, #0]
	updateFrequencyTimer(&handler_TIMER_Motor, value_period);
 80028ee:	4b12      	ldr	r3, [pc, #72]	; (8002938 <config_motor+0x98>)
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	4619      	mov	r1, r3
 80028f4:	4811      	ldr	r0, [pc, #68]	; (800293c <config_motor+0x9c>)
 80028f6:	f000 fb71 	bl	8002fdc <updateFrequencyTimer>
	updateDuttyMotor(&handler_Motor_R, third);
 80028fa:	ed97 0a02 	vldr	s0, [r7, #8]
 80028fe:	480a      	ldr	r0, [pc, #40]	; (8002928 <config_motor+0x88>)
 8002900:	f7fe fbca 	bl	8001098 <updateDuttyMotor>
	updateDuttyMotor(&handler_Motor_L, second);
 8002904:	ed97 0a03 	vldr	s0, [r7, #12]
 8002908:	4808      	ldr	r0, [pc, #32]	; (800292c <config_motor+0x8c>)
 800290a:	f7fe fbc5 	bl	8001098 <updateDuttyMotor>
	//Cambio valor bandera
	flag_motor=status;
 800290e:	4a0c      	ldr	r2, [pc, #48]	; (8002940 <config_motor+0xa0>)
 8002910:	7dfb      	ldrb	r3, [r7, #23]
 8002912:	7013      	strb	r3, [r2, #0]
	//Iniciamos el study
	status_motor(SET);
 8002914:	2001      	movs	r0, #1
 8002916:	f7ff ff47 	bl	80027a8 <status_motor>
}
 800291a:	bf00      	nop
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	200003c4 	.word	0x200003c4
 8002928:	200002ec 	.word	0x200002ec
 800292c:	20000368 	.word	0x20000368
 8002930:	2000046e 	.word	0x2000046e
 8002934:	000186a0 	.word	0x000186a0
 8002938:	20000002 	.word	0x20000002
 800293c:	200003b4 	.word	0x200003b4
 8002940:	2000046c 	.word	0x2000046c

08002944 <constains_calculator>:


void constains_calculator(Parameters_PID_t *ptrPIDHandler,float k, float tau, float theta)   //k,tau,theta
{
 8002944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002948:	b088      	sub	sp, #32
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	ed87 0a02 	vstr	s0, [r7, #8]
 8002952:	edc7 0a01 	vstr	s1, [r7, #4]
 8002956:	ed87 1a00 	vstr	s2, [r7]
	   //Calculo de constantes de porcentaje, integracion y derivacion por metodo de Ziegler y Nichols
	   float kp=(1.2*tau)/(k*theta);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7fd fe0c 	bl	8000578 <__aeabi_f2d>
 8002960:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002964:	4b6d      	ldr	r3, [pc, #436]	; (8002b1c <constains_calculator+0x1d8>)
 8002966:	f7fd fe5f 	bl	8000628 <__aeabi_dmul>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4614      	mov	r4, r2
 8002970:	461d      	mov	r5, r3
 8002972:	ed97 7a02 	vldr	s14, [r7, #8]
 8002976:	edd7 7a00 	vldr	s15, [r7]
 800297a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800297e:	ee17 0a90 	vmov	r0, s15
 8002982:	f7fd fdf9 	bl	8000578 <__aeabi_f2d>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4620      	mov	r0, r4
 800298c:	4629      	mov	r1, r5
 800298e:	f7fd ff75 	bl	800087c <__aeabi_ddiv>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4610      	mov	r0, r2
 8002998:	4619      	mov	r1, r3
 800299a:	f7fe f93d 	bl	8000c18 <__aeabi_d2f>
 800299e:	4603      	mov	r3, r0
 80029a0:	61fb      	str	r3, [r7, #28]
	   float ti=2.0*theta;
 80029a2:	edd7 7a00 	vldr	s15, [r7]
 80029a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029aa:	edc7 7a06 	vstr	s15, [r7, #24]
	   float td=0.5*theta;
 80029ae:	edd7 7a00 	vldr	s15, [r7]
 80029b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ba:	edc7 7a05 	vstr	s15, [r7, #20]
	   //Calculo do controle PID digital
	   ptrPIDHandler->q0 = kp*(1+Ts/(2.0*ti)+td/Ts);
 80029be:	69f8      	ldr	r0, [r7, #28]
 80029c0:	f7fd fdda 	bl	8000578 <__aeabi_f2d>
 80029c4:	4604      	mov	r4, r0
 80029c6:	460d      	mov	r5, r1
 80029c8:	4b55      	ldr	r3, [pc, #340]	; (8002b20 <constains_calculator+0x1dc>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fdd3 	bl	8000578 <__aeabi_f2d>
 80029d2:	4680      	mov	r8, r0
 80029d4:	4689      	mov	r9, r1
 80029d6:	69b8      	ldr	r0, [r7, #24]
 80029d8:	f7fd fdce 	bl	8000578 <__aeabi_f2d>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	f7fd fc6c 	bl	80002bc <__adddf3>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4640      	mov	r0, r8
 80029ea:	4649      	mov	r1, r9
 80029ec:	f7fd ff46 	bl	800087c <__aeabi_ddiv>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4610      	mov	r0, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	4b49      	ldr	r3, [pc, #292]	; (8002b24 <constains_calculator+0x1e0>)
 80029fe:	f7fd fc5d 	bl	80002bc <__adddf3>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4690      	mov	r8, r2
 8002a08:	4699      	mov	r9, r3
 8002a0a:	4b45      	ldr	r3, [pc, #276]	; (8002b20 <constains_calculator+0x1dc>)
 8002a0c:	edd3 7a00 	vldr	s15, [r3]
 8002a10:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a14:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002a18:	ee16 0a90 	vmov	r0, s13
 8002a1c:	f7fd fdac 	bl	8000578 <__aeabi_f2d>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4640      	mov	r0, r8
 8002a26:	4649      	mov	r1, r9
 8002a28:	f7fd fc48 	bl	80002bc <__adddf3>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4620      	mov	r0, r4
 8002a32:	4629      	mov	r1, r5
 8002a34:	f7fd fdf8 	bl	8000628 <__aeabi_dmul>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	f7fe f8ea 	bl	8000c18 <__aeabi_d2f>
 8002a44:	4602      	mov	r2, r0
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	615a      	str	r2, [r3, #20]
	   ptrPIDHandler->q1 = -kp*(1-Ts/(2.0*ti)+(2.0*td)/Ts);
 8002a4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a4e:	eef1 7a67 	vneg.f32	s15, s15
 8002a52:	ee17 3a90 	vmov	r3, s15
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fd fd8e 	bl	8000578 <__aeabi_f2d>
 8002a5c:	4604      	mov	r4, r0
 8002a5e:	460d      	mov	r5, r1
 8002a60:	4b2f      	ldr	r3, [pc, #188]	; (8002b20 <constains_calculator+0x1dc>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fd fd87 	bl	8000578 <__aeabi_f2d>
 8002a6a:	4680      	mov	r8, r0
 8002a6c:	4689      	mov	r9, r1
 8002a6e:	69b8      	ldr	r0, [r7, #24]
 8002a70:	f7fd fd82 	bl	8000578 <__aeabi_f2d>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	f7fd fc20 	bl	80002bc <__adddf3>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4640      	mov	r0, r8
 8002a82:	4649      	mov	r1, r9
 8002a84:	f7fd fefa 	bl	800087c <__aeabi_ddiv>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	f04f 0000 	mov.w	r0, #0
 8002a90:	4924      	ldr	r1, [pc, #144]	; (8002b24 <constains_calculator+0x1e0>)
 8002a92:	f7fd fc11 	bl	80002b8 <__aeabi_dsub>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4690      	mov	r8, r2
 8002a9c:	4699      	mov	r9, r3
 8002a9e:	6978      	ldr	r0, [r7, #20]
 8002aa0:	f7fd fd6a 	bl	8000578 <__aeabi_f2d>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	f7fd fc08 	bl	80002bc <__adddf3>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4692      	mov	sl, r2
 8002ab2:	469b      	mov	fp, r3
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <constains_calculator+0x1dc>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fd fd5d 	bl	8000578 <__aeabi_f2d>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4650      	mov	r0, sl
 8002ac4:	4659      	mov	r1, fp
 8002ac6:	f7fd fed9 	bl	800087c <__aeabi_ddiv>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4640      	mov	r0, r8
 8002ad0:	4649      	mov	r1, r9
 8002ad2:	f7fd fbf3 	bl	80002bc <__adddf3>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4620      	mov	r0, r4
 8002adc:	4629      	mov	r1, r5
 8002ade:	f7fd fda3 	bl	8000628 <__aeabi_dmul>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	4619      	mov	r1, r3
 8002aea:	f7fe f895 	bl	8000c18 <__aeabi_d2f>
 8002aee:	4602      	mov	r2, r0
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	619a      	str	r2, [r3, #24]
	   ptrPIDHandler->q2 = (kp*td)/Ts;
 8002af4:	ed97 7a07 	vldr	s14, [r7, #28]
 8002af8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002afc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002b00:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <constains_calculator+0x1dc>)
 8002b02:	ed93 7a00 	vldr	s14, [r3]
 8002b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8002b10:	bf00      	nop
 8002b12:	3720      	adds	r7, #32
 8002b14:	46bd      	mov	sp, r7
 8002b16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b1a:	bf00      	nop
 8002b1c:	3ff33333 	.word	0x3ff33333
 8002b20:	20000004 	.word	0x20000004
 8002b24:	3ff00000 	.word	0x3ff00000

08002b28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b28:	480d      	ldr	r0, [pc, #52]	; (8002b60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b2a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b2c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b30:	480c      	ldr	r0, [pc, #48]	; (8002b64 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b32:	490d      	ldr	r1, [pc, #52]	; (8002b68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b34:	4a0d      	ldr	r2, [pc, #52]	; (8002b6c <LoopForever+0xe>)
  movs r3, #0
 8002b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b38:	e002      	b.n	8002b40 <LoopCopyDataInit>

08002b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b3e:	3304      	adds	r3, #4

08002b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b44:	d3f9      	bcc.n	8002b3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b46:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b48:	4c0a      	ldr	r4, [pc, #40]	; (8002b74 <LoopForever+0x16>)
  movs r3, #0
 8002b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b4c:	e001      	b.n	8002b52 <LoopFillZerobss>

08002b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b50:	3204      	adds	r2, #4

08002b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b54:	d3fb      	bcc.n	8002b4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002b56:	f002 fd49 	bl	80055ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b5a:	f7fe fae3 	bl	8001124 <main>

08002b5e <LoopForever>:

LoopForever:
    b LoopForever
 8002b5e:	e7fe      	b.n	8002b5e <LoopForever>
  ldr   r0, =_estack
 8002b60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b68:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002b6c:	0800ccb0 	.word	0x0800ccb0
  ldr r2, =_sbss
 8002b70:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002b74:	20000d48 	.word	0x20000d48

08002b78 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b78:	e7fe      	b.n	8002b78 <ADC_IRQHandler>

08002b7a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	af00      	add	r7, sp, #0
	return 1;
 8002b7e:	2301      	movs	r3, #1
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <_kill>:

int _kill(int pid, int sig)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b94:	f002 fd24 	bl	80055e0 <__errno>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2216      	movs	r2, #22
 8002b9c:	601a      	str	r2, [r3, #0]
	return -1;
 8002b9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <_exit>:

void _exit (int status)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002bb2:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7ff ffe7 	bl	8002b8a <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bbc:	e7fe      	b.n	8002bbc <_exit+0x12>

08002bbe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b086      	sub	sp, #24
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	e00a      	b.n	8002be6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bd0:	f3af 8000 	nop.w
 8002bd4:	4601      	mov	r1, r0
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	60ba      	str	r2, [r7, #8]
 8002bdc:	b2ca      	uxtb	r2, r1
 8002bde:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	3301      	adds	r3, #1
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	dbf0      	blt.n	8002bd0 <_read+0x12>
	}

return len;
 8002bee:	687b      	ldr	r3, [r7, #4]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	e009      	b.n	8002c1e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	60ba      	str	r2, [r7, #8]
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	dbf1      	blt.n	8002c0a <_write+0x12>
	}
	return len;
 8002c26:	687b      	ldr	r3, [r7, #4]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <_close>:

int _close(int file)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	return -1;
 8002c38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c58:	605a      	str	r2, [r3, #4]
	return 0;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <_isatty>:

int _isatty(int file)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
	return 1;
 8002c70:	2301      	movs	r3, #1
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b085      	sub	sp, #20
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
	return 0;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ca0:	4a14      	ldr	r2, [pc, #80]	; (8002cf4 <_sbrk+0x5c>)
 8002ca2:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <_sbrk+0x60>)
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cac:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <_sbrk+0x64>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d102      	bne.n	8002cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <_sbrk+0x64>)
 8002cb6:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <_sbrk+0x68>)
 8002cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cba:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <_sbrk+0x64>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d207      	bcs.n	8002cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cc8:	f002 fc8a 	bl	80055e0 <__errno>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	220c      	movs	r2, #12
 8002cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd6:	e009      	b.n	8002cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cd8:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <_sbrk+0x64>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cde:	4b07      	ldr	r3, [pc, #28]	; (8002cfc <_sbrk+0x64>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	4a05      	ldr	r2, [pc, #20]	; (8002cfc <_sbrk+0x64>)
 8002ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cea:	68fb      	ldr	r3, [r7, #12]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	20020000 	.word	0x20020000
 8002cf8:	00000400 	.word	0x00000400
 8002cfc:	200004d8 	.word	0x200004d8
 8002d00:	20000d48 	.word	0x20000d48

08002d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	db0b      	blt.n	8002d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	f003 021f 	and.w	r2, r3, #31
 8002d1c:	4907      	ldr	r1, [pc, #28]	; (8002d3c <__NVIC_EnableIRQ+0x38>)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	2001      	movs	r0, #1
 8002d26:	fa00 f202 	lsl.w	r2, r0, r2
 8002d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	e000e100 	.word	0xe000e100

08002d40 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d50:	d10a      	bne.n	8002d68 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002d52:	4b62      	ldr	r3, [pc, #392]	; (8002edc <BasicTimer_Config+0x19c>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	4a61      	ldr	r2, [pc, #388]	; (8002edc <BasicTimer_Config+0x19c>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	4a5f      	ldr	r2, [pc, #380]	; (8002ee0 <BasicTimer_Config+0x1a0>)
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	e02e      	b.n	8002dc6 <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4a5d      	ldr	r2, [pc, #372]	; (8002ee4 <BasicTimer_Config+0x1a4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d10a      	bne.n	8002d88 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002d72:	4b5a      	ldr	r3, [pc, #360]	; (8002edc <BasicTimer_Config+0x19c>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	4a59      	ldr	r2, [pc, #356]	; (8002edc <BasicTimer_Config+0x19c>)
 8002d78:	f043 0302 	orr.w	r3, r3, #2
 8002d7c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	4a59      	ldr	r2, [pc, #356]	; (8002ee8 <BasicTimer_Config+0x1a8>)
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	e01e      	b.n	8002dc6 <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4a57      	ldr	r2, [pc, #348]	; (8002eec <BasicTimer_Config+0x1ac>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d10a      	bne.n	8002da8 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002d92:	4b52      	ldr	r3, [pc, #328]	; (8002edc <BasicTimer_Config+0x19c>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	4a51      	ldr	r2, [pc, #324]	; (8002edc <BasicTimer_Config+0x19c>)
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	4a53      	ldr	r2, [pc, #332]	; (8002ef0 <BasicTimer_Config+0x1b0>)
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	e00e      	b.n	8002dc6 <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4a51      	ldr	r2, [pc, #324]	; (8002ef4 <BasicTimer_Config+0x1b4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d109      	bne.n	8002dc6 <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8002db2:	4b4a      	ldr	r3, [pc, #296]	; (8002edc <BasicTimer_Config+0x19c>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	4a49      	ldr	r2, [pc, #292]	; (8002edc <BasicTimer_Config+0x19c>)
 8002db8:	f043 0308 	orr.w	r3, r3, #8
 8002dbc:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	4a4d      	ldr	r2, [pc, #308]	; (8002ef8 <BasicTimer_Config+0x1b8>)
 8002dc4:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 8002dc6:	f001 fbeb 	bl	80045a0 <getConfigPLL>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8002dce:	f001 fc03 	bl	80045d8 <getClockAPB1>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 8002dd6:	7bbb      	ldrb	r3, [r7, #14]
 8002dd8:	2b31      	cmp	r3, #49	; 0x31
 8002dda:	d903      	bls.n	8002de4 <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
 8002de2:	e000      	b.n	8002de6 <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 8002de4:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	8852      	ldrh	r2, [r2, #2]
 8002dec:	fb02 f303 	mul.w	r3, r2, r3
 8002df0:	1e5a      	subs	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d112      	bne.n	8002e26 <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f022 0210 	bic.w	r2, r2, #16
 8002e0e:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	3201      	adds	r2, #1
 8002e1a:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	625a      	str	r2, [r3, #36]	; 0x24
 8002e24:	e018      	b.n	8002e58 <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f022 0210 	bic.w	r2, r2, #16
 8002e34:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f042 0210 	orr.w	r2, r2, #16
 8002e44:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6852      	ldr	r2, [r2, #4]
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e58:	b672      	cpsid	i
}
 8002e5a:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e64:	d103      	bne.n	8002e6e <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8002e66:	201c      	movs	r0, #28
 8002e68:	f7ff ff4c 	bl	8002d04 <__NVIC_EnableIRQ>
 8002e6c:	e019      	b.n	8002ea2 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	4a1c      	ldr	r2, [pc, #112]	; (8002ee4 <BasicTimer_Config+0x1a4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d103      	bne.n	8002e80 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8002e78:	201d      	movs	r0, #29
 8002e7a:	f7ff ff43 	bl	8002d04 <__NVIC_EnableIRQ>
 8002e7e:	e010      	b.n	8002ea2 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4a19      	ldr	r2, [pc, #100]	; (8002eec <BasicTimer_Config+0x1ac>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d103      	bne.n	8002e92 <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8002e8a:	201e      	movs	r0, #30
 8002e8c:	f7ff ff3a 	bl	8002d04 <__NVIC_EnableIRQ>
 8002e90:	e007      	b.n	8002ea2 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	4a17      	ldr	r2, [pc, #92]	; (8002ef4 <BasicTimer_Config+0x1b4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d102      	bne.n	8002ea2 <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8002e9c:	2032      	movs	r0, #50	; 0x32
 8002e9e:	f7ff ff31 	bl	8002d04 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8002ea2:	b662      	cpsie	i
}
 8002ea4:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	7a1b      	ldrb	r3, [r3, #8]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f875 	bl	8002f9c <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f022 0201 	bic.w	r2, r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f042 0201 	orr.w	r2, r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]
}
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	200004dc 	.word	0x200004dc
 8002ee4:	40000400 	.word	0x40000400
 8002ee8:	200004e0 	.word	0x200004e0
 8002eec:	40000800 	.word	0x40000800
 8002ef0:	200004e4 	.word	0x200004e4
 8002ef4:	40000c00 	.word	0x40000c00
 8002ef8:	200004e8 	.word	0x200004e8

08002efc <BasicTimer4_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
	__NOP();
 8002f00:	bf00      	nop
}
 8002f02:	bf00      	nop
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
	__NOP();
 8002f10:	bf00      	nop
}
 8002f12:	bf00      	nop
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <TIM2_IRQHandler+0x1c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <TIM2_IRQHandler+0x1c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 8002f30:	f7fe fbb6 	bl	80016a0 <BasicTimer2_Callback>

}
 8002f34:	bf00      	nop
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	200004dc 	.word	0x200004dc

08002f3c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <TIM3_IRQHandler+0x1c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <TIM3_IRQHandler+0x1c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 8002f50:	f7fe fbb2 	bl	80016b8 <BasicTimer3_Callback>

}
 8002f54:	bf00      	nop
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	200004e0 	.word	0x200004e0

08002f5c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 8002f60:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <TIM4_IRQHandler+0x1c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <TIM4_IRQHandler+0x1c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0201 	bic.w	r2, r2, #1
 8002f6e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 8002f70:	f7ff ffc4 	bl	8002efc <BasicTimer4_Callback>

}
 8002f74:	bf00      	nop
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	200004e4 	.word	0x200004e4

08002f7c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 8002f80:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <TIM5_IRQHandler+0x1c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691a      	ldr	r2, [r3, #16]
 8002f86:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <TIM5_IRQHandler+0x1c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0201 	bic.w	r2, r2, #1
 8002f8e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 8002f90:	f7ff ffbc 	bl	8002f0c <BasicTimer5_Callback>

}
 8002f94:	bf00      	nop
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	200004e8 	.word	0x200004e8

08002f9c <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d108      	bne.n	8002fc0 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f042 0201 	orr.w	r2, r2, #1
 8002fbc:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 8002fbe:	e007      	b.n	8002fd0 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	60da      	str	r2, [r3, #12]
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <updateFrequencyTimer>:


//Actualizamos la frecuencia del TIMER
void updateFrequencyTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint16_t newPer)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	807b      	strh	r3, [r7, #2]
	//Establecemos el nuevo valor del periodo en la configuracion del PWM
	ptrBTimerHandler->TIMx_Config.TIMX_period = newPer;
 8002fe8:	887a      	ldrh	r2, [r7, #2]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	605a      	str	r2, [r3, #4]
	//Reiniamos el contador
	ptrBTimerHandler->ptrTIMx->CNT = 0;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	625a      	str	r2, [r3, #36]	; 0x24
	/*Cargamos el valor del ARR el cual es e limite de incrementos del TIMER
	 */
	ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6852      	ldr	r2, [r2, #4]
 8002ffe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <__NVIC_EnableIRQ>:
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301a:	2b00      	cmp	r3, #0
 800301c:	db0b      	blt.n	8003036 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	f003 021f 	and.w	r2, r3, #31
 8003024:	4907      	ldr	r1, [pc, #28]	; (8003044 <__NVIC_EnableIRQ+0x38>)
 8003026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	2001      	movs	r0, #1
 800302e:	fa00 f202 	lsl.w	r2, r0, r2
 8003032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	e000e100 	.word	0xe000e100

08003048 <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af02      	add	r7, sp, #8
 800304e:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	2300      	movs	r3, #0
 8003056:	9301      	str	r3, [sp, #4]
 8003058:	2300      	movs	r3, #0
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	2301      	movs	r3, #1
 800305e:	2200      	movs	r2, #0
 8003060:	2100      	movs	r1, #0
 8003062:	f001 f891 	bl	8004188 <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f001 f8ae 	bl	80041cc <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8003070:	4b97      	ldr	r3, [pc, #604]	; (80032d0 <extInt_Config+0x288>)
 8003072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003074:	4a96      	ldr	r2, [pc, #600]	; (80032d0 <extInt_Config+0x288>)
 8003076:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800307a:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b0f      	cmp	r3, #15
 8003084:	f200 85cf 	bhi.w	8003c26 <extInt_Config+0xbde>
 8003088:	a201      	add	r2, pc, #4	; (adr r2, 8003090 <extInt_Config+0x48>)
 800308a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308e:	bf00      	nop
 8003090:	080030d1 	.word	0x080030d1
 8003094:	08003187 	.word	0x08003187
 8003098:	0800323d 	.word	0x0800323d
 800309c:	08003313 	.word	0x08003313
 80030a0:	080033c9 	.word	0x080033c9
 80030a4:	08003477 	.word	0x08003477
 80030a8:	0800353d 	.word	0x0800353d
 80030ac:	080035e5 	.word	0x080035e5
 80030b0:	0800368d 	.word	0x0800368d
 80030b4:	08003735 	.word	0x08003735
 80030b8:	080037fb 	.word	0x080037fb
 80030bc:	080038a3 	.word	0x080038a3
 80030c0:	0800394b 	.word	0x0800394b
 80030c4:	08003a11 	.word	0x08003a11
 80030c8:	08003ab9 	.word	0x08003ab9
 80030cc:	08003b61 	.word	0x08003b61
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 80030d0:	4b80      	ldr	r3, [pc, #512]	; (80032d4 <extInt_Config+0x28c>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4a7f      	ldr	r2, [pc, #508]	; (80032d4 <extInt_Config+0x28c>)
 80030d6:	f023 030f 	bic.w	r3, r3, #15
 80030da:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	4a7d      	ldr	r2, [pc, #500]	; (80032d8 <extInt_Config+0x290>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d105      	bne.n	80030f4 <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 80030e8:	4b7a      	ldr	r3, [pc, #488]	; (80032d4 <extInt_Config+0x28c>)
 80030ea:	4a7a      	ldr	r2, [pc, #488]	; (80032d4 <extInt_Config+0x28c>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 80030f0:	f000 bd9b 	b.w	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	4a78      	ldr	r2, [pc, #480]	; (80032dc <extInt_Config+0x294>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d107      	bne.n	8003110 <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8003100:	4b74      	ldr	r3, [pc, #464]	; (80032d4 <extInt_Config+0x28c>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4a73      	ldr	r2, [pc, #460]	; (80032d4 <extInt_Config+0x28c>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6093      	str	r3, [r2, #8]
		break;
 800310c:	f000 bd8d 	b.w	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	4a72      	ldr	r2, [pc, #456]	; (80032e0 <extInt_Config+0x298>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d107      	bne.n	800312c <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 800311c:	4b6d      	ldr	r3, [pc, #436]	; (80032d4 <extInt_Config+0x28c>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	4a6c      	ldr	r2, [pc, #432]	; (80032d4 <extInt_Config+0x28c>)
 8003122:	f043 0302 	orr.w	r3, r3, #2
 8003126:	6093      	str	r3, [r2, #8]
		break;
 8003128:	f000 bd7f 	b.w	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	4a6c      	ldr	r2, [pc, #432]	; (80032e4 <extInt_Config+0x29c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d107      	bne.n	8003148 <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8003138:	4b66      	ldr	r3, [pc, #408]	; (80032d4 <extInt_Config+0x28c>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	4a65      	ldr	r2, [pc, #404]	; (80032d4 <extInt_Config+0x28c>)
 800313e:	f043 0303 	orr.w	r3, r3, #3
 8003142:	6093      	str	r3, [r2, #8]
		break;
 8003144:	f000 bd71 	b.w	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	4a66      	ldr	r2, [pc, #408]	; (80032e8 <extInt_Config+0x2a0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d107      	bne.n	8003164 <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8003154:	4b5f      	ldr	r3, [pc, #380]	; (80032d4 <extInt_Config+0x28c>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	4a5e      	ldr	r2, [pc, #376]	; (80032d4 <extInt_Config+0x28c>)
 800315a:	f043 0304 	orr.w	r3, r3, #4
 800315e:	6093      	str	r3, [r2, #8]
		break;
 8003160:	f000 bd63 	b.w	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	4a60      	ldr	r2, [pc, #384]	; (80032ec <extInt_Config+0x2a4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d107      	bne.n	8003180 <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8003170:	4b58      	ldr	r3, [pc, #352]	; (80032d4 <extInt_Config+0x28c>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4a57      	ldr	r2, [pc, #348]	; (80032d4 <extInt_Config+0x28c>)
 8003176:	f043 0307 	orr.w	r3, r3, #7
 800317a:	6093      	str	r3, [r2, #8]
		break;
 800317c:	f000 bd55 	b.w	8003c2a <extInt_Config+0xbe2>
			__NOP();
 8003180:	bf00      	nop
		break;
 8003182:	f000 bd52 	b.w	8003c2a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 8003186:	4b53      	ldr	r3, [pc, #332]	; (80032d4 <extInt_Config+0x28c>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	4a52      	ldr	r2, [pc, #328]	; (80032d4 <extInt_Config+0x28c>)
 800318c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003190:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	4a4f      	ldr	r2, [pc, #316]	; (80032d8 <extInt_Config+0x290>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d105      	bne.n	80031aa <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 800319e:	4b4d      	ldr	r3, [pc, #308]	; (80032d4 <extInt_Config+0x28c>)
 80031a0:	4a4c      	ldr	r2, [pc, #304]	; (80032d4 <extInt_Config+0x28c>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 80031a6:	f000 bd40 	b.w	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4a4a      	ldr	r2, [pc, #296]	; (80032dc <extInt_Config+0x294>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d107      	bne.n	80031c6 <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 80031b6:	4b47      	ldr	r3, [pc, #284]	; (80032d4 <extInt_Config+0x28c>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	4a46      	ldr	r2, [pc, #280]	; (80032d4 <extInt_Config+0x28c>)
 80031bc:	f043 0310 	orr.w	r3, r3, #16
 80031c0:	6093      	str	r3, [r2, #8]
		break;
 80031c2:	f000 bd32 	b.w	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4a44      	ldr	r2, [pc, #272]	; (80032e0 <extInt_Config+0x298>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d107      	bne.n	80031e2 <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 80031d2:	4b40      	ldr	r3, [pc, #256]	; (80032d4 <extInt_Config+0x28c>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	4a3f      	ldr	r2, [pc, #252]	; (80032d4 <extInt_Config+0x28c>)
 80031d8:	f043 0320 	orr.w	r3, r3, #32
 80031dc:	6093      	str	r3, [r2, #8]
		break;
 80031de:	f000 bd24 	b.w	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	4a3e      	ldr	r2, [pc, #248]	; (80032e4 <extInt_Config+0x29c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d107      	bne.n	80031fe <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 80031ee:	4b39      	ldr	r3, [pc, #228]	; (80032d4 <extInt_Config+0x28c>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	4a38      	ldr	r2, [pc, #224]	; (80032d4 <extInt_Config+0x28c>)
 80031f4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80031f8:	6093      	str	r3, [r2, #8]
		break;
 80031fa:	f000 bd16 	b.w	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4a38      	ldr	r2, [pc, #224]	; (80032e8 <extInt_Config+0x2a0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d107      	bne.n	800321a <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 800320a:	4b32      	ldr	r3, [pc, #200]	; (80032d4 <extInt_Config+0x28c>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	4a31      	ldr	r2, [pc, #196]	; (80032d4 <extInt_Config+0x28c>)
 8003210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003214:	6093      	str	r3, [r2, #8]
		break;
 8003216:	f000 bd08 	b.w	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	4a32      	ldr	r2, [pc, #200]	; (80032ec <extInt_Config+0x2a4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d107      	bne.n	8003236 <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8003226:	4b2b      	ldr	r3, [pc, #172]	; (80032d4 <extInt_Config+0x28c>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	4a2a      	ldr	r2, [pc, #168]	; (80032d4 <extInt_Config+0x28c>)
 800322c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003230:	6093      	str	r3, [r2, #8]
		break;
 8003232:	f000 bcfa 	b.w	8003c2a <extInt_Config+0xbe2>
			__NOP();
 8003236:	bf00      	nop
		break;
 8003238:	f000 bcf7 	b.w	8003c2a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 800323c:	4b25      	ldr	r3, [pc, #148]	; (80032d4 <extInt_Config+0x28c>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	4a24      	ldr	r2, [pc, #144]	; (80032d4 <extInt_Config+0x28c>)
 8003242:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003246:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	4a22      	ldr	r2, [pc, #136]	; (80032d8 <extInt_Config+0x290>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d105      	bne.n	8003260 <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8003254:	4b1f      	ldr	r3, [pc, #124]	; (80032d4 <extInt_Config+0x28c>)
 8003256:	4a1f      	ldr	r2, [pc, #124]	; (80032d4 <extInt_Config+0x28c>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 800325c:	f000 bce5 	b.w	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	4a1d      	ldr	r2, [pc, #116]	; (80032dc <extInt_Config+0x294>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d107      	bne.n	800327c <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 800326c:	4b19      	ldr	r3, [pc, #100]	; (80032d4 <extInt_Config+0x28c>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4a18      	ldr	r2, [pc, #96]	; (80032d4 <extInt_Config+0x28c>)
 8003272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003276:	6093      	str	r3, [r2, #8]
		break;
 8003278:	f000 bcd7 	b.w	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	4a17      	ldr	r2, [pc, #92]	; (80032e0 <extInt_Config+0x298>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d107      	bne.n	8003298 <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8003288:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <extInt_Config+0x28c>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	4a11      	ldr	r2, [pc, #68]	; (80032d4 <extInt_Config+0x28c>)
 800328e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003292:	6093      	str	r3, [r2, #8]
		break;
 8003294:	f000 bcc9 	b.w	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	4a11      	ldr	r2, [pc, #68]	; (80032e4 <extInt_Config+0x29c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d107      	bne.n	80032b4 <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <extInt_Config+0x28c>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <extInt_Config+0x28c>)
 80032aa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80032ae:	6093      	str	r3, [r2, #8]
		break;
 80032b0:	f000 bcbb 	b.w	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	4a0b      	ldr	r2, [pc, #44]	; (80032e8 <extInt_Config+0x2a0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d117      	bne.n	80032f0 <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 80032c0:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <extInt_Config+0x28c>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	4a03      	ldr	r2, [pc, #12]	; (80032d4 <extInt_Config+0x28c>)
 80032c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032ca:	6093      	str	r3, [r2, #8]
		break;
 80032cc:	f000 bcad 	b.w	8003c2a <extInt_Config+0xbe2>
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40013800 	.word	0x40013800
 80032d8:	40020000 	.word	0x40020000
 80032dc:	40020400 	.word	0x40020400
 80032e0:	40020800 	.word	0x40020800
 80032e4:	40020c00 	.word	0x40020c00
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	4a8a      	ldr	r2, [pc, #552]	; (8003520 <extInt_Config+0x4d8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d107      	bne.n	800330c <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 80032fc:	4b89      	ldr	r3, [pc, #548]	; (8003524 <extInt_Config+0x4dc>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	4a88      	ldr	r2, [pc, #544]	; (8003524 <extInt_Config+0x4dc>)
 8003302:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003306:	6093      	str	r3, [r2, #8]
		break;
 8003308:	f000 bc8f 	b.w	8003c2a <extInt_Config+0xbe2>
			__NOP();
 800330c:	bf00      	nop
		break;
 800330e:	f000 bc8c 	b.w	8003c2a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 8003312:	4b84      	ldr	r3, [pc, #528]	; (8003524 <extInt_Config+0x4dc>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	4a83      	ldr	r2, [pc, #524]	; (8003524 <extInt_Config+0x4dc>)
 8003318:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800331c:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	4a80      	ldr	r2, [pc, #512]	; (8003528 <extInt_Config+0x4e0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d105      	bne.n	8003336 <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 800332a:	4b7e      	ldr	r3, [pc, #504]	; (8003524 <extInt_Config+0x4dc>)
 800332c:	4a7d      	ldr	r2, [pc, #500]	; (8003524 <extInt_Config+0x4dc>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8003332:	f000 bc7a 	b.w	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	4a7b      	ldr	r2, [pc, #492]	; (800352c <extInt_Config+0x4e4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d107      	bne.n	8003352 <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8003342:	4b78      	ldr	r3, [pc, #480]	; (8003524 <extInt_Config+0x4dc>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	4a77      	ldr	r2, [pc, #476]	; (8003524 <extInt_Config+0x4dc>)
 8003348:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800334c:	6093      	str	r3, [r2, #8]
		break;
 800334e:	f000 bc6c 	b.w	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	4a75      	ldr	r2, [pc, #468]	; (8003530 <extInt_Config+0x4e8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d107      	bne.n	800336e <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 800335e:	4b71      	ldr	r3, [pc, #452]	; (8003524 <extInt_Config+0x4dc>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	4a70      	ldr	r2, [pc, #448]	; (8003524 <extInt_Config+0x4dc>)
 8003364:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003368:	6093      	str	r3, [r2, #8]
		break;
 800336a:	f000 bc5e 	b.w	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	4a6f      	ldr	r2, [pc, #444]	; (8003534 <extInt_Config+0x4ec>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d107      	bne.n	800338a <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 800337a:	4b6a      	ldr	r3, [pc, #424]	; (8003524 <extInt_Config+0x4dc>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	4a69      	ldr	r2, [pc, #420]	; (8003524 <extInt_Config+0x4dc>)
 8003380:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003384:	6093      	str	r3, [r2, #8]
		break;
 8003386:	f000 bc50 	b.w	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	4a69      	ldr	r2, [pc, #420]	; (8003538 <extInt_Config+0x4f0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d107      	bne.n	80033a6 <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8003396:	4b63      	ldr	r3, [pc, #396]	; (8003524 <extInt_Config+0x4dc>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	4a62      	ldr	r2, [pc, #392]	; (8003524 <extInt_Config+0x4dc>)
 800339c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033a0:	6093      	str	r3, [r2, #8]
		break;
 80033a2:	f000 bc42 	b.w	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	4a5c      	ldr	r2, [pc, #368]	; (8003520 <extInt_Config+0x4d8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d107      	bne.n	80033c2 <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 80033b2:	4b5c      	ldr	r3, [pc, #368]	; (8003524 <extInt_Config+0x4dc>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	4a5b      	ldr	r2, [pc, #364]	; (8003524 <extInt_Config+0x4dc>)
 80033b8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80033bc:	6093      	str	r3, [r2, #8]
		break;
 80033be:	f000 bc34 	b.w	8003c2a <extInt_Config+0xbe2>
			__NOP();
 80033c2:	bf00      	nop
		break;
 80033c4:	f000 bc31 	b.w	8003c2a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 80033c8:	4b56      	ldr	r3, [pc, #344]	; (8003524 <extInt_Config+0x4dc>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	4a55      	ldr	r2, [pc, #340]	; (8003524 <extInt_Config+0x4dc>)
 80033ce:	f023 030f 	bic.w	r3, r3, #15
 80033d2:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	4a53      	ldr	r2, [pc, #332]	; (8003528 <extInt_Config+0x4e0>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d105      	bne.n	80033ec <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 80033e0:	4b50      	ldr	r3, [pc, #320]	; (8003524 <extInt_Config+0x4dc>)
 80033e2:	4a50      	ldr	r2, [pc, #320]	; (8003524 <extInt_Config+0x4dc>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80033e8:	f000 bc1f 	b.w	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	4a4e      	ldr	r2, [pc, #312]	; (800352c <extInt_Config+0x4e4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d107      	bne.n	8003408 <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 80033f8:	4b4a      	ldr	r3, [pc, #296]	; (8003524 <extInt_Config+0x4dc>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4a49      	ldr	r2, [pc, #292]	; (8003524 <extInt_Config+0x4dc>)
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	60d3      	str	r3, [r2, #12]
		break;
 8003404:	f000 bc11 	b.w	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	4a48      	ldr	r2, [pc, #288]	; (8003530 <extInt_Config+0x4e8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d107      	bne.n	8003424 <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8003414:	4b43      	ldr	r3, [pc, #268]	; (8003524 <extInt_Config+0x4dc>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	4a42      	ldr	r2, [pc, #264]	; (8003524 <extInt_Config+0x4dc>)
 800341a:	f043 0302 	orr.w	r3, r3, #2
 800341e:	60d3      	str	r3, [r2, #12]
		break;
 8003420:	f000 bc03 	b.w	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	4a42      	ldr	r2, [pc, #264]	; (8003534 <extInt_Config+0x4ec>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d106      	bne.n	800343e <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8003430:	4b3c      	ldr	r3, [pc, #240]	; (8003524 <extInt_Config+0x4dc>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4a3b      	ldr	r2, [pc, #236]	; (8003524 <extInt_Config+0x4dc>)
 8003436:	f043 0303 	orr.w	r3, r3, #3
 800343a:	60d3      	str	r3, [r2, #12]
		break;
 800343c:	e3f5      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	4a3c      	ldr	r2, [pc, #240]	; (8003538 <extInt_Config+0x4f0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d106      	bne.n	8003458 <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 800344a:	4b36      	ldr	r3, [pc, #216]	; (8003524 <extInt_Config+0x4dc>)
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	4a35      	ldr	r2, [pc, #212]	; (8003524 <extInt_Config+0x4dc>)
 8003450:	f043 0304 	orr.w	r3, r3, #4
 8003454:	60d3      	str	r3, [r2, #12]
		break;
 8003456:	e3e8      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	4a30      	ldr	r2, [pc, #192]	; (8003520 <extInt_Config+0x4d8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d106      	bne.n	8003472 <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8003464:	4b2f      	ldr	r3, [pc, #188]	; (8003524 <extInt_Config+0x4dc>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4a2e      	ldr	r2, [pc, #184]	; (8003524 <extInt_Config+0x4dc>)
 800346a:	f043 0307 	orr.w	r3, r3, #7
 800346e:	60d3      	str	r3, [r2, #12]
		break;
 8003470:	e3db      	b.n	8003c2a <extInt_Config+0xbe2>
			__NOP();
 8003472:	bf00      	nop
		break;
 8003474:	e3d9      	b.n	8003c2a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 8003476:	4b2b      	ldr	r3, [pc, #172]	; (8003524 <extInt_Config+0x4dc>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	4a2a      	ldr	r2, [pc, #168]	; (8003524 <extInt_Config+0x4dc>)
 800347c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003480:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	4a27      	ldr	r2, [pc, #156]	; (8003528 <extInt_Config+0x4e0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d104      	bne.n	8003498 <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 800348e:	4b25      	ldr	r3, [pc, #148]	; (8003524 <extInt_Config+0x4dc>)
 8003490:	4a24      	ldr	r2, [pc, #144]	; (8003524 <extInt_Config+0x4dc>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8003496:	e3c8      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	4a23      	ldr	r2, [pc, #140]	; (800352c <extInt_Config+0x4e4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d106      	bne.n	80034b2 <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 80034a4:	4b1f      	ldr	r3, [pc, #124]	; (8003524 <extInt_Config+0x4dc>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4a1e      	ldr	r2, [pc, #120]	; (8003524 <extInt_Config+0x4dc>)
 80034aa:	f043 0310 	orr.w	r3, r3, #16
 80034ae:	60d3      	str	r3, [r2, #12]
		break;
 80034b0:	e3bb      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4a1d      	ldr	r2, [pc, #116]	; (8003530 <extInt_Config+0x4e8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d106      	bne.n	80034cc <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 80034be:	4b19      	ldr	r3, [pc, #100]	; (8003524 <extInt_Config+0x4dc>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	4a18      	ldr	r2, [pc, #96]	; (8003524 <extInt_Config+0x4dc>)
 80034c4:	f043 0320 	orr.w	r3, r3, #32
 80034c8:	60d3      	str	r3, [r2, #12]
		break;
 80034ca:	e3ae      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	4a18      	ldr	r2, [pc, #96]	; (8003534 <extInt_Config+0x4ec>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d106      	bne.n	80034e6 <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 80034d8:	4b12      	ldr	r3, [pc, #72]	; (8003524 <extInt_Config+0x4dc>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4a11      	ldr	r2, [pc, #68]	; (8003524 <extInt_Config+0x4dc>)
 80034de:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80034e2:	60d3      	str	r3, [r2, #12]
		break;
 80034e4:	e3a1      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4a12      	ldr	r2, [pc, #72]	; (8003538 <extInt_Config+0x4f0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d106      	bne.n	8003500 <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 80034f2:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <extInt_Config+0x4dc>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	4a0b      	ldr	r2, [pc, #44]	; (8003524 <extInt_Config+0x4dc>)
 80034f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034fc:	60d3      	str	r3, [r2, #12]
		break;
 80034fe:	e394      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	4a06      	ldr	r2, [pc, #24]	; (8003520 <extInt_Config+0x4d8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d106      	bne.n	800351a <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <extInt_Config+0x4dc>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4a04      	ldr	r2, [pc, #16]	; (8003524 <extInt_Config+0x4dc>)
 8003512:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003516:	60d3      	str	r3, [r2, #12]
		break;
 8003518:	e387      	b.n	8003c2a <extInt_Config+0xbe2>
			__NOP();
 800351a:	bf00      	nop
		break;
 800351c:	e385      	b.n	8003c2a <extInt_Config+0xbe2>
 800351e:	bf00      	nop
 8003520:	40021c00 	.word	0x40021c00
 8003524:	40013800 	.word	0x40013800
 8003528:	40020000 	.word	0x40020000
 800352c:	40020400 	.word	0x40020400
 8003530:	40020800 	.word	0x40020800
 8003534:	40020c00 	.word	0x40020c00
 8003538:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 800353c:	4b86      	ldr	r3, [pc, #536]	; (8003758 <extInt_Config+0x710>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4a85      	ldr	r2, [pc, #532]	; (8003758 <extInt_Config+0x710>)
 8003542:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003546:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	4a83      	ldr	r2, [pc, #524]	; (800375c <extInt_Config+0x714>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d104      	bne.n	800355e <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8003554:	4b80      	ldr	r3, [pc, #512]	; (8003758 <extInt_Config+0x710>)
 8003556:	4a80      	ldr	r2, [pc, #512]	; (8003758 <extInt_Config+0x710>)
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 800355c:	e365      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4a7e      	ldr	r2, [pc, #504]	; (8003760 <extInt_Config+0x718>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d106      	bne.n	8003578 <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 800356a:	4b7b      	ldr	r3, [pc, #492]	; (8003758 <extInt_Config+0x710>)
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	4a7a      	ldr	r2, [pc, #488]	; (8003758 <extInt_Config+0x710>)
 8003570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003574:	60d3      	str	r3, [r2, #12]
		break;
 8003576:	e358      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	4a79      	ldr	r2, [pc, #484]	; (8003764 <extInt_Config+0x71c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d106      	bne.n	8003592 <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8003584:	4b74      	ldr	r3, [pc, #464]	; (8003758 <extInt_Config+0x710>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	4a73      	ldr	r2, [pc, #460]	; (8003758 <extInt_Config+0x710>)
 800358a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800358e:	60d3      	str	r3, [r2, #12]
		break;
 8003590:	e34b      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4a73      	ldr	r2, [pc, #460]	; (8003768 <extInt_Config+0x720>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d106      	bne.n	80035ac <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 800359e:	4b6e      	ldr	r3, [pc, #440]	; (8003758 <extInt_Config+0x710>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	4a6d      	ldr	r2, [pc, #436]	; (8003758 <extInt_Config+0x710>)
 80035a4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80035a8:	60d3      	str	r3, [r2, #12]
		break;
 80035aa:	e33e      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	4a6e      	ldr	r2, [pc, #440]	; (800376c <extInt_Config+0x724>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d106      	bne.n	80035c6 <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 80035b8:	4b67      	ldr	r3, [pc, #412]	; (8003758 <extInt_Config+0x710>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4a66      	ldr	r2, [pc, #408]	; (8003758 <extInt_Config+0x710>)
 80035be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035c2:	60d3      	str	r3, [r2, #12]
		break;
 80035c4:	e331      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	4a68      	ldr	r2, [pc, #416]	; (8003770 <extInt_Config+0x728>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d106      	bne.n	80035e0 <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 80035d2:	4b61      	ldr	r3, [pc, #388]	; (8003758 <extInt_Config+0x710>)
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	4a60      	ldr	r2, [pc, #384]	; (8003758 <extInt_Config+0x710>)
 80035d8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035dc:	60d3      	str	r3, [r2, #12]
		break;
 80035de:	e324      	b.n	8003c2a <extInt_Config+0xbe2>
			__NOP();
 80035e0:	bf00      	nop
		break;
 80035e2:	e322      	b.n	8003c2a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 80035e4:	4b5c      	ldr	r3, [pc, #368]	; (8003758 <extInt_Config+0x710>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	4a5b      	ldr	r2, [pc, #364]	; (8003758 <extInt_Config+0x710>)
 80035ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035ee:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	4a59      	ldr	r2, [pc, #356]	; (800375c <extInt_Config+0x714>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d104      	bne.n	8003606 <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 80035fc:	4b56      	ldr	r3, [pc, #344]	; (8003758 <extInt_Config+0x710>)
 80035fe:	4a56      	ldr	r2, [pc, #344]	; (8003758 <extInt_Config+0x710>)
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8003604:	e311      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	4a54      	ldr	r2, [pc, #336]	; (8003760 <extInt_Config+0x718>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d106      	bne.n	8003620 <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8003612:	4b51      	ldr	r3, [pc, #324]	; (8003758 <extInt_Config+0x710>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	4a50      	ldr	r2, [pc, #320]	; (8003758 <extInt_Config+0x710>)
 8003618:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800361c:	60d3      	str	r3, [r2, #12]
		break;
 800361e:	e304      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	4a4f      	ldr	r2, [pc, #316]	; (8003764 <extInt_Config+0x71c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d106      	bne.n	800363a <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 800362c:	4b4a      	ldr	r3, [pc, #296]	; (8003758 <extInt_Config+0x710>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4a49      	ldr	r2, [pc, #292]	; (8003758 <extInt_Config+0x710>)
 8003632:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003636:	60d3      	str	r3, [r2, #12]
		break;
 8003638:	e2f7      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4a49      	ldr	r2, [pc, #292]	; (8003768 <extInt_Config+0x720>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d106      	bne.n	8003654 <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8003646:	4b44      	ldr	r3, [pc, #272]	; (8003758 <extInt_Config+0x710>)
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	4a43      	ldr	r2, [pc, #268]	; (8003758 <extInt_Config+0x710>)
 800364c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003650:	60d3      	str	r3, [r2, #12]
		break;
 8003652:	e2ea      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	4a44      	ldr	r2, [pc, #272]	; (800376c <extInt_Config+0x724>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d106      	bne.n	800366e <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8003660:	4b3d      	ldr	r3, [pc, #244]	; (8003758 <extInt_Config+0x710>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4a3c      	ldr	r2, [pc, #240]	; (8003758 <extInt_Config+0x710>)
 8003666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800366a:	60d3      	str	r3, [r2, #12]
		break;
 800366c:	e2dd      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	4a3e      	ldr	r2, [pc, #248]	; (8003770 <extInt_Config+0x728>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d106      	bne.n	8003688 <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 800367a:	4b37      	ldr	r3, [pc, #220]	; (8003758 <extInt_Config+0x710>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	4a36      	ldr	r2, [pc, #216]	; (8003758 <extInt_Config+0x710>)
 8003680:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003684:	60d3      	str	r3, [r2, #12]
		break;
 8003686:	e2d0      	b.n	8003c2a <extInt_Config+0xbe2>
			__NOP();
 8003688:	bf00      	nop
		break;
 800368a:	e2ce      	b.n	8003c2a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 800368c:	4b32      	ldr	r3, [pc, #200]	; (8003758 <extInt_Config+0x710>)
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	4a31      	ldr	r2, [pc, #196]	; (8003758 <extInt_Config+0x710>)
 8003692:	f023 030f 	bic.w	r3, r3, #15
 8003696:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	4a2f      	ldr	r2, [pc, #188]	; (800375c <extInt_Config+0x714>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d104      	bne.n	80036ae <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 80036a4:	4b2c      	ldr	r3, [pc, #176]	; (8003758 <extInt_Config+0x710>)
 80036a6:	4a2c      	ldr	r2, [pc, #176]	; (8003758 <extInt_Config+0x710>)
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80036ac:	e2bd      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	4a2a      	ldr	r2, [pc, #168]	; (8003760 <extInt_Config+0x718>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d106      	bne.n	80036c8 <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 80036ba:	4b27      	ldr	r3, [pc, #156]	; (8003758 <extInt_Config+0x710>)
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	4a26      	ldr	r2, [pc, #152]	; (8003758 <extInt_Config+0x710>)
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	6113      	str	r3, [r2, #16]
		break;
 80036c6:	e2b0      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	4a25      	ldr	r2, [pc, #148]	; (8003764 <extInt_Config+0x71c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d106      	bne.n	80036e2 <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 80036d4:	4b20      	ldr	r3, [pc, #128]	; (8003758 <extInt_Config+0x710>)
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	4a1f      	ldr	r2, [pc, #124]	; (8003758 <extInt_Config+0x710>)
 80036da:	f043 0302 	orr.w	r3, r3, #2
 80036de:	6113      	str	r3, [r2, #16]
		break;
 80036e0:	e2a3      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	4a1f      	ldr	r2, [pc, #124]	; (8003768 <extInt_Config+0x720>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d106      	bne.n	80036fc <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 80036ee:	4b1a      	ldr	r3, [pc, #104]	; (8003758 <extInt_Config+0x710>)
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	4a19      	ldr	r2, [pc, #100]	; (8003758 <extInt_Config+0x710>)
 80036f4:	f043 0303 	orr.w	r3, r3, #3
 80036f8:	6113      	str	r3, [r2, #16]
		break;
 80036fa:	e296      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	4a1a      	ldr	r2, [pc, #104]	; (800376c <extInt_Config+0x724>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d106      	bne.n	8003716 <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8003708:	4b13      	ldr	r3, [pc, #76]	; (8003758 <extInt_Config+0x710>)
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	4a12      	ldr	r2, [pc, #72]	; (8003758 <extInt_Config+0x710>)
 800370e:	f043 0304 	orr.w	r3, r3, #4
 8003712:	6113      	str	r3, [r2, #16]
		break;
 8003714:	e289      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	4a14      	ldr	r2, [pc, #80]	; (8003770 <extInt_Config+0x728>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d106      	bne.n	8003730 <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8003722:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <extInt_Config+0x710>)
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	4a0c      	ldr	r2, [pc, #48]	; (8003758 <extInt_Config+0x710>)
 8003728:	f043 0307 	orr.w	r3, r3, #7
 800372c:	6113      	str	r3, [r2, #16]
		break;
 800372e:	e27c      	b.n	8003c2a <extInt_Config+0xbe2>
			__NOP();
 8003730:	bf00      	nop
		break;
 8003732:	e27a      	b.n	8003c2a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 8003734:	4b08      	ldr	r3, [pc, #32]	; (8003758 <extInt_Config+0x710>)
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	4a07      	ldr	r2, [pc, #28]	; (8003758 <extInt_Config+0x710>)
 800373a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800373e:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	4a05      	ldr	r2, [pc, #20]	; (800375c <extInt_Config+0x714>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d113      	bne.n	8003774 <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 800374c:	4b02      	ldr	r3, [pc, #8]	; (8003758 <extInt_Config+0x710>)
 800374e:	4a02      	ldr	r2, [pc, #8]	; (8003758 <extInt_Config+0x710>)
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8003754:	e269      	b.n	8003c2a <extInt_Config+0xbe2>
 8003756:	bf00      	nop
 8003758:	40013800 	.word	0x40013800
 800375c:	40020000 	.word	0x40020000
 8003760:	40020400 	.word	0x40020400
 8003764:	40020800 	.word	0x40020800
 8003768:	40020c00 	.word	0x40020c00
 800376c:	40021000 	.word	0x40021000
 8003770:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	4a83      	ldr	r2, [pc, #524]	; (8003988 <extInt_Config+0x940>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d106      	bne.n	800378e <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8003780:	4b82      	ldr	r3, [pc, #520]	; (800398c <extInt_Config+0x944>)
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	4a81      	ldr	r2, [pc, #516]	; (800398c <extInt_Config+0x944>)
 8003786:	f043 0310 	orr.w	r3, r3, #16
 800378a:	6113      	str	r3, [r2, #16]
		break;
 800378c:	e24d      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4a7e      	ldr	r2, [pc, #504]	; (8003990 <extInt_Config+0x948>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d106      	bne.n	80037a8 <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 800379a:	4b7c      	ldr	r3, [pc, #496]	; (800398c <extInt_Config+0x944>)
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	4a7b      	ldr	r2, [pc, #492]	; (800398c <extInt_Config+0x944>)
 80037a0:	f043 0320 	orr.w	r3, r3, #32
 80037a4:	6113      	str	r3, [r2, #16]
		break;
 80037a6:	e240      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	4a79      	ldr	r2, [pc, #484]	; (8003994 <extInt_Config+0x94c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d106      	bne.n	80037c2 <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 80037b4:	4b75      	ldr	r3, [pc, #468]	; (800398c <extInt_Config+0x944>)
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	4a74      	ldr	r2, [pc, #464]	; (800398c <extInt_Config+0x944>)
 80037ba:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80037be:	6113      	str	r3, [r2, #16]
		break;
 80037c0:	e233      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	4a73      	ldr	r2, [pc, #460]	; (8003998 <extInt_Config+0x950>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d106      	bne.n	80037dc <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 80037ce:	4b6f      	ldr	r3, [pc, #444]	; (800398c <extInt_Config+0x944>)
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	4a6e      	ldr	r2, [pc, #440]	; (800398c <extInt_Config+0x944>)
 80037d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037d8:	6113      	str	r3, [r2, #16]
		break;
 80037da:	e226      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	4a6e      	ldr	r2, [pc, #440]	; (800399c <extInt_Config+0x954>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d106      	bne.n	80037f6 <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 80037e8:	4b68      	ldr	r3, [pc, #416]	; (800398c <extInt_Config+0x944>)
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	4a67      	ldr	r2, [pc, #412]	; (800398c <extInt_Config+0x944>)
 80037ee:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80037f2:	6113      	str	r3, [r2, #16]
		break;
 80037f4:	e219      	b.n	8003c2a <extInt_Config+0xbe2>
			__NOP();
 80037f6:	bf00      	nop
		break;
 80037f8:	e217      	b.n	8003c2a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 80037fa:	4b64      	ldr	r3, [pc, #400]	; (800398c <extInt_Config+0x944>)
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	4a63      	ldr	r2, [pc, #396]	; (800398c <extInt_Config+0x944>)
 8003800:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003804:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	4a64      	ldr	r2, [pc, #400]	; (80039a0 <extInt_Config+0x958>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d104      	bne.n	800381c <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8003812:	4b5e      	ldr	r3, [pc, #376]	; (800398c <extInt_Config+0x944>)
 8003814:	4a5d      	ldr	r2, [pc, #372]	; (800398c <extInt_Config+0x944>)
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 800381a:	e206      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	4a59      	ldr	r2, [pc, #356]	; (8003988 <extInt_Config+0x940>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d106      	bne.n	8003836 <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8003828:	4b58      	ldr	r3, [pc, #352]	; (800398c <extInt_Config+0x944>)
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	4a57      	ldr	r2, [pc, #348]	; (800398c <extInt_Config+0x944>)
 800382e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003832:	6113      	str	r3, [r2, #16]
		break;
 8003834:	e1f9      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	4a54      	ldr	r2, [pc, #336]	; (8003990 <extInt_Config+0x948>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d106      	bne.n	8003850 <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8003842:	4b52      	ldr	r3, [pc, #328]	; (800398c <extInt_Config+0x944>)
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	4a51      	ldr	r2, [pc, #324]	; (800398c <extInt_Config+0x944>)
 8003848:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800384c:	6113      	str	r3, [r2, #16]
		break;
 800384e:	e1ec      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	4a4f      	ldr	r2, [pc, #316]	; (8003994 <extInt_Config+0x94c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d106      	bne.n	800386a <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 800385c:	4b4b      	ldr	r3, [pc, #300]	; (800398c <extInt_Config+0x944>)
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	4a4a      	ldr	r2, [pc, #296]	; (800398c <extInt_Config+0x944>)
 8003862:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003866:	6113      	str	r3, [r2, #16]
		break;
 8003868:	e1df      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	4a49      	ldr	r2, [pc, #292]	; (8003998 <extInt_Config+0x950>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d106      	bne.n	8003884 <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8003876:	4b45      	ldr	r3, [pc, #276]	; (800398c <extInt_Config+0x944>)
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	4a44      	ldr	r2, [pc, #272]	; (800398c <extInt_Config+0x944>)
 800387c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003880:	6113      	str	r3, [r2, #16]
		break;
 8003882:	e1d2      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	4a44      	ldr	r2, [pc, #272]	; (800399c <extInt_Config+0x954>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d106      	bne.n	800389e <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8003890:	4b3e      	ldr	r3, [pc, #248]	; (800398c <extInt_Config+0x944>)
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	4a3d      	ldr	r2, [pc, #244]	; (800398c <extInt_Config+0x944>)
 8003896:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800389a:	6113      	str	r3, [r2, #16]
		break;
 800389c:	e1c5      	b.n	8003c2a <extInt_Config+0xbe2>
			__NOP();
 800389e:	bf00      	nop
		break;
 80038a0:	e1c3      	b.n	8003c2a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 80038a2:	4b3a      	ldr	r3, [pc, #232]	; (800398c <extInt_Config+0x944>)
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	4a39      	ldr	r2, [pc, #228]	; (800398c <extInt_Config+0x944>)
 80038a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038ac:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	4a3a      	ldr	r2, [pc, #232]	; (80039a0 <extInt_Config+0x958>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d104      	bne.n	80038c4 <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 80038ba:	4b34      	ldr	r3, [pc, #208]	; (800398c <extInt_Config+0x944>)
 80038bc:	4a33      	ldr	r2, [pc, #204]	; (800398c <extInt_Config+0x944>)
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80038c2:	e1b2      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	4a2f      	ldr	r2, [pc, #188]	; (8003988 <extInt_Config+0x940>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d106      	bne.n	80038de <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 80038d0:	4b2e      	ldr	r3, [pc, #184]	; (800398c <extInt_Config+0x944>)
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	4a2d      	ldr	r2, [pc, #180]	; (800398c <extInt_Config+0x944>)
 80038d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038da:	6113      	str	r3, [r2, #16]
		break;
 80038dc:	e1a5      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	4a2a      	ldr	r2, [pc, #168]	; (8003990 <extInt_Config+0x948>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d106      	bne.n	80038f8 <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 80038ea:	4b28      	ldr	r3, [pc, #160]	; (800398c <extInt_Config+0x944>)
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	4a27      	ldr	r2, [pc, #156]	; (800398c <extInt_Config+0x944>)
 80038f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038f4:	6113      	str	r3, [r2, #16]
		break;
 80038f6:	e198      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	4a25      	ldr	r2, [pc, #148]	; (8003994 <extInt_Config+0x94c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d106      	bne.n	8003912 <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8003904:	4b21      	ldr	r3, [pc, #132]	; (800398c <extInt_Config+0x944>)
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	4a20      	ldr	r2, [pc, #128]	; (800398c <extInt_Config+0x944>)
 800390a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800390e:	6113      	str	r3, [r2, #16]
		break;
 8003910:	e18b      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	4a1f      	ldr	r2, [pc, #124]	; (8003998 <extInt_Config+0x950>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d106      	bne.n	800392c <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 800391e:	4b1b      	ldr	r3, [pc, #108]	; (800398c <extInt_Config+0x944>)
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	4a1a      	ldr	r2, [pc, #104]	; (800398c <extInt_Config+0x944>)
 8003924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003928:	6113      	str	r3, [r2, #16]
		break;
 800392a:	e17e      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	4a1a      	ldr	r2, [pc, #104]	; (800399c <extInt_Config+0x954>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d106      	bne.n	8003946 <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8003938:	4b14      	ldr	r3, [pc, #80]	; (800398c <extInt_Config+0x944>)
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	4a13      	ldr	r2, [pc, #76]	; (800398c <extInt_Config+0x944>)
 800393e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003942:	6113      	str	r3, [r2, #16]
		break;
 8003944:	e171      	b.n	8003c2a <extInt_Config+0xbe2>
			__NOP();
 8003946:	bf00      	nop
		break;
 8003948:	e16f      	b.n	8003c2a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 800394a:	4b10      	ldr	r3, [pc, #64]	; (800398c <extInt_Config+0x944>)
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	4a0f      	ldr	r2, [pc, #60]	; (800398c <extInt_Config+0x944>)
 8003950:	f023 030f 	bic.w	r3, r3, #15
 8003954:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	4a10      	ldr	r2, [pc, #64]	; (80039a0 <extInt_Config+0x958>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d104      	bne.n	800396c <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8003962:	4b0a      	ldr	r3, [pc, #40]	; (800398c <extInt_Config+0x944>)
 8003964:	4a09      	ldr	r2, [pc, #36]	; (800398c <extInt_Config+0x944>)
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 800396a:	e15e      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	4a05      	ldr	r2, [pc, #20]	; (8003988 <extInt_Config+0x940>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d115      	bne.n	80039a4 <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8003978:	4b04      	ldr	r3, [pc, #16]	; (800398c <extInt_Config+0x944>)
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	4a03      	ldr	r2, [pc, #12]	; (800398c <extInt_Config+0x944>)
 800397e:	f043 0301 	orr.w	r3, r3, #1
 8003982:	6153      	str	r3, [r2, #20]
		break;
 8003984:	e151      	b.n	8003c2a <extInt_Config+0xbe2>
 8003986:	bf00      	nop
 8003988:	40020400 	.word	0x40020400
 800398c:	40013800 	.word	0x40013800
 8003990:	40020800 	.word	0x40020800
 8003994:	40020c00 	.word	0x40020c00
 8003998:	40021000 	.word	0x40021000
 800399c:	40021c00 	.word	0x40021c00
 80039a0:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	4a83      	ldr	r2, [pc, #524]	; (8003bb8 <extInt_Config+0xb70>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d106      	bne.n	80039be <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 80039b0:	4b82      	ldr	r3, [pc, #520]	; (8003bbc <extInt_Config+0xb74>)
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	4a81      	ldr	r2, [pc, #516]	; (8003bbc <extInt_Config+0xb74>)
 80039b6:	f043 0302 	orr.w	r3, r3, #2
 80039ba:	6153      	str	r3, [r2, #20]
		break;
 80039bc:	e135      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	4a7e      	ldr	r2, [pc, #504]	; (8003bc0 <extInt_Config+0xb78>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d106      	bne.n	80039d8 <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 80039ca:	4b7c      	ldr	r3, [pc, #496]	; (8003bbc <extInt_Config+0xb74>)
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	4a7b      	ldr	r2, [pc, #492]	; (8003bbc <extInt_Config+0xb74>)
 80039d0:	f043 0303 	orr.w	r3, r3, #3
 80039d4:	6153      	str	r3, [r2, #20]
		break;
 80039d6:	e128      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	4a79      	ldr	r2, [pc, #484]	; (8003bc4 <extInt_Config+0xb7c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d106      	bne.n	80039f2 <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 80039e4:	4b75      	ldr	r3, [pc, #468]	; (8003bbc <extInt_Config+0xb74>)
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	4a74      	ldr	r2, [pc, #464]	; (8003bbc <extInt_Config+0xb74>)
 80039ea:	f043 0304 	orr.w	r3, r3, #4
 80039ee:	6153      	str	r3, [r2, #20]
		break;
 80039f0:	e11b      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4a73      	ldr	r2, [pc, #460]	; (8003bc8 <extInt_Config+0xb80>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d106      	bne.n	8003a0c <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 80039fe:	4b6f      	ldr	r3, [pc, #444]	; (8003bbc <extInt_Config+0xb74>)
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	4a6e      	ldr	r2, [pc, #440]	; (8003bbc <extInt_Config+0xb74>)
 8003a04:	f043 0307 	orr.w	r3, r3, #7
 8003a08:	6153      	str	r3, [r2, #20]
		break;
 8003a0a:	e10e      	b.n	8003c2a <extInt_Config+0xbe2>
			__NOP();
 8003a0c:	bf00      	nop
		break;
 8003a0e:	e10c      	b.n	8003c2a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 8003a10:	4b6a      	ldr	r3, [pc, #424]	; (8003bbc <extInt_Config+0xb74>)
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	4a69      	ldr	r2, [pc, #420]	; (8003bbc <extInt_Config+0xb74>)
 8003a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a1a:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	4a6a      	ldr	r2, [pc, #424]	; (8003bcc <extInt_Config+0xb84>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d104      	bne.n	8003a32 <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8003a28:	4b64      	ldr	r3, [pc, #400]	; (8003bbc <extInt_Config+0xb74>)
 8003a2a:	4a64      	ldr	r2, [pc, #400]	; (8003bbc <extInt_Config+0xb74>)
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8003a30:	e0fb      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a65      	ldr	r2, [pc, #404]	; (8003bd0 <extInt_Config+0xb88>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d106      	bne.n	8003a4c <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8003a3e:	4b5f      	ldr	r3, [pc, #380]	; (8003bbc <extInt_Config+0xb74>)
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	4a5e      	ldr	r2, [pc, #376]	; (8003bbc <extInt_Config+0xb74>)
 8003a44:	f043 0310 	orr.w	r3, r3, #16
 8003a48:	6153      	str	r3, [r2, #20]
		break;
 8003a4a:	e0ee      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	4a59      	ldr	r2, [pc, #356]	; (8003bb8 <extInt_Config+0xb70>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d106      	bne.n	8003a66 <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8003a58:	4b58      	ldr	r3, [pc, #352]	; (8003bbc <extInt_Config+0xb74>)
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	4a57      	ldr	r2, [pc, #348]	; (8003bbc <extInt_Config+0xb74>)
 8003a5e:	f043 0320 	orr.w	r3, r3, #32
 8003a62:	6153      	str	r3, [r2, #20]
		break;
 8003a64:	e0e1      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	4a54      	ldr	r2, [pc, #336]	; (8003bc0 <extInt_Config+0xb78>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d106      	bne.n	8003a80 <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8003a72:	4b52      	ldr	r3, [pc, #328]	; (8003bbc <extInt_Config+0xb74>)
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	4a51      	ldr	r2, [pc, #324]	; (8003bbc <extInt_Config+0xb74>)
 8003a78:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003a7c:	6153      	str	r3, [r2, #20]
		break;
 8003a7e:	e0d4      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	4a4f      	ldr	r2, [pc, #316]	; (8003bc4 <extInt_Config+0xb7c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d106      	bne.n	8003a9a <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8003a8c:	4b4b      	ldr	r3, [pc, #300]	; (8003bbc <extInt_Config+0xb74>)
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	4a4a      	ldr	r2, [pc, #296]	; (8003bbc <extInt_Config+0xb74>)
 8003a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a96:	6153      	str	r3, [r2, #20]
		break;
 8003a98:	e0c7      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	4a49      	ldr	r2, [pc, #292]	; (8003bc8 <extInt_Config+0xb80>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d106      	bne.n	8003ab4 <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8003aa6:	4b45      	ldr	r3, [pc, #276]	; (8003bbc <extInt_Config+0xb74>)
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	4a44      	ldr	r2, [pc, #272]	; (8003bbc <extInt_Config+0xb74>)
 8003aac:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003ab0:	6153      	str	r3, [r2, #20]
		break;
 8003ab2:	e0ba      	b.n	8003c2a <extInt_Config+0xbe2>
			__NOP();
 8003ab4:	bf00      	nop
		break;
 8003ab6:	e0b8      	b.n	8003c2a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 8003ab8:	4b40      	ldr	r3, [pc, #256]	; (8003bbc <extInt_Config+0xb74>)
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	4a3f      	ldr	r2, [pc, #252]	; (8003bbc <extInt_Config+0xb74>)
 8003abe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ac2:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	4a40      	ldr	r2, [pc, #256]	; (8003bcc <extInt_Config+0xb84>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d104      	bne.n	8003ada <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8003ad0:	4b3a      	ldr	r3, [pc, #232]	; (8003bbc <extInt_Config+0xb74>)
 8003ad2:	4a3a      	ldr	r2, [pc, #232]	; (8003bbc <extInt_Config+0xb74>)
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8003ad8:	e0a7      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4a3b      	ldr	r2, [pc, #236]	; (8003bd0 <extInt_Config+0xb88>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d106      	bne.n	8003af4 <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8003ae6:	4b35      	ldr	r3, [pc, #212]	; (8003bbc <extInt_Config+0xb74>)
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	4a34      	ldr	r2, [pc, #208]	; (8003bbc <extInt_Config+0xb74>)
 8003aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af0:	6153      	str	r3, [r2, #20]
		break;
 8003af2:	e09a      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	4a2f      	ldr	r2, [pc, #188]	; (8003bb8 <extInt_Config+0xb70>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d106      	bne.n	8003b0e <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8003b00:	4b2e      	ldr	r3, [pc, #184]	; (8003bbc <extInt_Config+0xb74>)
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	4a2d      	ldr	r2, [pc, #180]	; (8003bbc <extInt_Config+0xb74>)
 8003b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b0a:	6153      	str	r3, [r2, #20]
		break;
 8003b0c:	e08d      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	4a2a      	ldr	r2, [pc, #168]	; (8003bc0 <extInt_Config+0xb78>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d106      	bne.n	8003b28 <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8003b1a:	4b28      	ldr	r3, [pc, #160]	; (8003bbc <extInt_Config+0xb74>)
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	4a27      	ldr	r2, [pc, #156]	; (8003bbc <extInt_Config+0xb74>)
 8003b20:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003b24:	6153      	str	r3, [r2, #20]
		break;
 8003b26:	e080      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	4a25      	ldr	r2, [pc, #148]	; (8003bc4 <extInt_Config+0xb7c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d106      	bne.n	8003b42 <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8003b34:	4b21      	ldr	r3, [pc, #132]	; (8003bbc <extInt_Config+0xb74>)
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	4a20      	ldr	r2, [pc, #128]	; (8003bbc <extInt_Config+0xb74>)
 8003b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b3e:	6153      	str	r3, [r2, #20]
		break;
 8003b40:	e073      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	4a1f      	ldr	r2, [pc, #124]	; (8003bc8 <extInt_Config+0xb80>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d106      	bne.n	8003b5c <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8003b4e:	4b1b      	ldr	r3, [pc, #108]	; (8003bbc <extInt_Config+0xb74>)
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	4a1a      	ldr	r2, [pc, #104]	; (8003bbc <extInt_Config+0xb74>)
 8003b54:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b58:	6153      	str	r3, [r2, #20]
		break;
 8003b5a:	e066      	b.n	8003c2a <extInt_Config+0xbe2>
			__NOP();
 8003b5c:	bf00      	nop
		break;
 8003b5e:	e064      	b.n	8003c2a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 8003b60:	4b16      	ldr	r3, [pc, #88]	; (8003bbc <extInt_Config+0xb74>)
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	4a15      	ldr	r2, [pc, #84]	; (8003bbc <extInt_Config+0xb74>)
 8003b66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b6a:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	4a16      	ldr	r2, [pc, #88]	; (8003bcc <extInt_Config+0xb84>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d104      	bne.n	8003b82 <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8003b78:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <extInt_Config+0xb74>)
 8003b7a:	4a10      	ldr	r2, [pc, #64]	; (8003bbc <extInt_Config+0xb74>)
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8003b80:	e053      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	4a11      	ldr	r2, [pc, #68]	; (8003bd0 <extInt_Config+0xb88>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d106      	bne.n	8003b9c <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <extInt_Config+0xb74>)
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	4a0a      	ldr	r2, [pc, #40]	; (8003bbc <extInt_Config+0xb74>)
 8003b94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b98:	6153      	str	r3, [r2, #20]
		break;
 8003b9a:	e046      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	4a05      	ldr	r2, [pc, #20]	; (8003bb8 <extInt_Config+0xb70>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d115      	bne.n	8003bd4 <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8003ba8:	4b04      	ldr	r3, [pc, #16]	; (8003bbc <extInt_Config+0xb74>)
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	4a03      	ldr	r2, [pc, #12]	; (8003bbc <extInt_Config+0xb74>)
 8003bae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003bb2:	6153      	str	r3, [r2, #20]
		break;
 8003bb4:	e039      	b.n	8003c2a <extInt_Config+0xbe2>
 8003bb6:	bf00      	nop
 8003bb8:	40020800 	.word	0x40020800
 8003bbc:	40013800 	.word	0x40013800
 8003bc0:	40020c00 	.word	0x40020c00
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40021c00 	.word	0x40021c00
 8003bcc:	40020000 	.word	0x40020000
 8003bd0:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	4a9d      	ldr	r2, [pc, #628]	; (8003e50 <extInt_Config+0xe08>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d106      	bne.n	8003bee <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8003be0:	4b9c      	ldr	r3, [pc, #624]	; (8003e54 <extInt_Config+0xe0c>)
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	4a9b      	ldr	r2, [pc, #620]	; (8003e54 <extInt_Config+0xe0c>)
 8003be6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003bea:	6153      	str	r3, [r2, #20]
		break;
 8003bec:	e01d      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	4a98      	ldr	r2, [pc, #608]	; (8003e58 <extInt_Config+0xe10>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d106      	bne.n	8003c08 <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8003bfa:	4b96      	ldr	r3, [pc, #600]	; (8003e54 <extInt_Config+0xe0c>)
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	4a95      	ldr	r2, [pc, #596]	; (8003e54 <extInt_Config+0xe0c>)
 8003c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c04:	6153      	str	r3, [r2, #20]
		break;
 8003c06:	e010      	b.n	8003c2a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	4a93      	ldr	r2, [pc, #588]	; (8003e5c <extInt_Config+0xe14>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d106      	bne.n	8003c22 <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8003c14:	4b8f      	ldr	r3, [pc, #572]	; (8003e54 <extInt_Config+0xe0c>)
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	4a8e      	ldr	r2, [pc, #568]	; (8003e54 <extInt_Config+0xe0c>)
 8003c1a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003c1e:	6153      	str	r3, [r2, #20]
		break;
 8003c20:	e003      	b.n	8003c2a <extInt_Config+0xbe2>
			__NOP();
 8003c22:	bf00      	nop
		break;
 8003c24:	e001      	b.n	8003c2a <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 8003c26:	bf00      	nop
		break;
 8003c28:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	791b      	ldrb	r3, [r3, #4]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d126      	bne.n	8003c80 <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003c32:	4b8b      	ldr	r3, [pc, #556]	; (8003e60 <extInt_Config+0xe18>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6812      	ldr	r2, [r2, #0]
 8003c3a:	7812      	ldrb	r2, [r2, #0]
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	2201      	movs	r2, #1
 8003c40:	408a      	lsls	r2, r1
 8003c42:	43d2      	mvns	r2, r2
 8003c44:	4611      	mov	r1, r2
 8003c46:	4a86      	ldr	r2, [pc, #536]	; (8003e60 <extInt_Config+0xe18>)
 8003c48:	400b      	ands	r3, r1
 8003c4a:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003c4c:	4b84      	ldr	r3, [pc, #528]	; (8003e60 <extInt_Config+0xe18>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6812      	ldr	r2, [r2, #0]
 8003c54:	7812      	ldrb	r2, [r2, #0]
 8003c56:	4611      	mov	r1, r2
 8003c58:	2201      	movs	r2, #1
 8003c5a:	408a      	lsls	r2, r1
 8003c5c:	43d2      	mvns	r2, r2
 8003c5e:	4611      	mov	r1, r2
 8003c60:	4a7f      	ldr	r2, [pc, #508]	; (8003e60 <extInt_Config+0xe18>)
 8003c62:	400b      	ands	r3, r1
 8003c64:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003c66:	4b7e      	ldr	r3, [pc, #504]	; (8003e60 <extInt_Config+0xe18>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6812      	ldr	r2, [r2, #0]
 8003c6e:	7812      	ldrb	r2, [r2, #0]
 8003c70:	4611      	mov	r1, r2
 8003c72:	2201      	movs	r2, #1
 8003c74:	408a      	lsls	r2, r1
 8003c76:	4611      	mov	r1, r2
 8003c78:	4a79      	ldr	r2, [pc, #484]	; (8003e60 <extInt_Config+0xe18>)
 8003c7a:	430b      	orrs	r3, r1
 8003c7c:	6093      	str	r3, [r2, #8]
 8003c7e:	e05c      	b.n	8003d3a <extInt_Config+0xcf2>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	791b      	ldrb	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d126      	bne.n	8003cd6 <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003c88:	4b75      	ldr	r3, [pc, #468]	; (8003e60 <extInt_Config+0xe18>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	7812      	ldrb	r2, [r2, #0]
 8003c92:	4611      	mov	r1, r2
 8003c94:	2201      	movs	r2, #1
 8003c96:	408a      	lsls	r2, r1
 8003c98:	43d2      	mvns	r2, r2
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	4a70      	ldr	r2, [pc, #448]	; (8003e60 <extInt_Config+0xe18>)
 8003c9e:	400b      	ands	r3, r1
 8003ca0:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003ca2:	4b6f      	ldr	r3, [pc, #444]	; (8003e60 <extInt_Config+0xe18>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6812      	ldr	r2, [r2, #0]
 8003caa:	7812      	ldrb	r2, [r2, #0]
 8003cac:	4611      	mov	r1, r2
 8003cae:	2201      	movs	r2, #1
 8003cb0:	408a      	lsls	r2, r1
 8003cb2:	43d2      	mvns	r2, r2
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	4a6a      	ldr	r2, [pc, #424]	; (8003e60 <extInt_Config+0xe18>)
 8003cb8:	400b      	ands	r3, r1
 8003cba:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003cbc:	4b68      	ldr	r3, [pc, #416]	; (8003e60 <extInt_Config+0xe18>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	7812      	ldrb	r2, [r2, #0]
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	2201      	movs	r2, #1
 8003cca:	408a      	lsls	r2, r1
 8003ccc:	4611      	mov	r1, r2
 8003cce:	4a64      	ldr	r2, [pc, #400]	; (8003e60 <extInt_Config+0xe18>)
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	60d3      	str	r3, [r2, #12]
 8003cd4:	e031      	b.n	8003d3a <extInt_Config+0xcf2>

	}
	else
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003cd6:	4b62      	ldr	r3, [pc, #392]	; (8003e60 <extInt_Config+0xe18>)
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6812      	ldr	r2, [r2, #0]
 8003cde:	7812      	ldrb	r2, [r2, #0]
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	408a      	lsls	r2, r1
 8003ce6:	43d2      	mvns	r2, r2
 8003ce8:	4611      	mov	r1, r2
 8003cea:	4a5d      	ldr	r2, [pc, #372]	; (8003e60 <extInt_Config+0xe18>)
 8003cec:	400b      	ands	r3, r1
 8003cee:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003cf0:	4b5b      	ldr	r3, [pc, #364]	; (8003e60 <extInt_Config+0xe18>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	7812      	ldrb	r2, [r2, #0]
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	408a      	lsls	r2, r1
 8003d00:	43d2      	mvns	r2, r2
 8003d02:	4611      	mov	r1, r2
 8003d04:	4a56      	ldr	r2, [pc, #344]	; (8003e60 <extInt_Config+0xe18>)
 8003d06:	400b      	ands	r3, r1
 8003d08:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003d0a:	4b55      	ldr	r3, [pc, #340]	; (8003e60 <extInt_Config+0xe18>)
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	7812      	ldrb	r2, [r2, #0]
 8003d14:	4611      	mov	r1, r2
 8003d16:	2201      	movs	r2, #1
 8003d18:	408a      	lsls	r2, r1
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	4a50      	ldr	r2, [pc, #320]	; (8003e60 <extInt_Config+0xe18>)
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003d22:	4b4f      	ldr	r3, [pc, #316]	; (8003e60 <extInt_Config+0xe18>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6812      	ldr	r2, [r2, #0]
 8003d2a:	7812      	ldrb	r2, [r2, #0]
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	2201      	movs	r2, #1
 8003d30:	408a      	lsls	r2, r1
 8003d32:	4611      	mov	r1, r2
 8003d34:	4a4a      	ldr	r2, [pc, #296]	; (8003e60 <extInt_Config+0xe18>)
 8003d36:	430b      	orrs	r3, r1
 8003d38:	6093      	str	r3, [r2, #8]
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003d3a:	4b49      	ldr	r3, [pc, #292]	; (8003e60 <extInt_Config+0xe18>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6812      	ldr	r2, [r2, #0]
 8003d42:	7812      	ldrb	r2, [r2, #0]
 8003d44:	4611      	mov	r1, r2
 8003d46:	2201      	movs	r2, #1
 8003d48:	408a      	lsls	r2, r1
 8003d4a:	43d2      	mvns	r2, r2
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	4a44      	ldr	r2, [pc, #272]	; (8003e60 <extInt_Config+0xe18>)
 8003d50:	400b      	ands	r3, r1
 8003d52:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003d54:	4b42      	ldr	r3, [pc, #264]	; (8003e60 <extInt_Config+0xe18>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	7812      	ldrb	r2, [r2, #0]
 8003d5e:	4611      	mov	r1, r2
 8003d60:	2201      	movs	r2, #1
 8003d62:	408a      	lsls	r2, r1
 8003d64:	4611      	mov	r1, r2
 8003d66:	4a3e      	ldr	r2, [pc, #248]	; (8003e60 <extInt_Config+0xe18>)
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d6c:	b672      	cpsid	i
}
 8003d6e:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2b0f      	cmp	r3, #15
 8003d78:	d862      	bhi.n	8003e40 <extInt_Config+0xdf8>
 8003d7a:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <extInt_Config+0xd38>)
 8003d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d80:	08003dc1 	.word	0x08003dc1
 8003d84:	08003dc9 	.word	0x08003dc9
 8003d88:	08003dd1 	.word	0x08003dd1
 8003d8c:	08003dd9 	.word	0x08003dd9
 8003d90:	08003de1 	.word	0x08003de1
 8003d94:	08003de9 	.word	0x08003de9
 8003d98:	08003df1 	.word	0x08003df1
 8003d9c:	08003df9 	.word	0x08003df9
 8003da0:	08003e01 	.word	0x08003e01
 8003da4:	08003e09 	.word	0x08003e09
 8003da8:	08003e11 	.word	0x08003e11
 8003dac:	08003e19 	.word	0x08003e19
 8003db0:	08003e21 	.word	0x08003e21
 8003db4:	08003e29 	.word	0x08003e29
 8003db8:	08003e31 	.word	0x08003e31
 8003dbc:	08003e39 	.word	0x08003e39
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 8003dc0:	2006      	movs	r0, #6
 8003dc2:	f7ff f923 	bl	800300c <__NVIC_EnableIRQ>
		break;
 8003dc6:	e03c      	b.n	8003e42 <extInt_Config+0xdfa>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 8003dc8:	2007      	movs	r0, #7
 8003dca:	f7ff f91f 	bl	800300c <__NVIC_EnableIRQ>
		break;
 8003dce:	e038      	b.n	8003e42 <extInt_Config+0xdfa>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 8003dd0:	2008      	movs	r0, #8
 8003dd2:	f7ff f91b 	bl	800300c <__NVIC_EnableIRQ>
		break;
 8003dd6:	e034      	b.n	8003e42 <extInt_Config+0xdfa>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 8003dd8:	2009      	movs	r0, #9
 8003dda:	f7ff f917 	bl	800300c <__NVIC_EnableIRQ>
		break;
 8003dde:	e030      	b.n	8003e42 <extInt_Config+0xdfa>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 8003de0:	200a      	movs	r0, #10
 8003de2:	f7ff f913 	bl	800300c <__NVIC_EnableIRQ>
		break;
 8003de6:	e02c      	b.n	8003e42 <extInt_Config+0xdfa>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003de8:	2017      	movs	r0, #23
 8003dea:	f7ff f90f 	bl	800300c <__NVIC_EnableIRQ>
		break;
 8003dee:	e028      	b.n	8003e42 <extInt_Config+0xdfa>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003df0:	2017      	movs	r0, #23
 8003df2:	f7ff f90b 	bl	800300c <__NVIC_EnableIRQ>
		break;
 8003df6:	e024      	b.n	8003e42 <extInt_Config+0xdfa>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003df8:	2017      	movs	r0, #23
 8003dfa:	f7ff f907 	bl	800300c <__NVIC_EnableIRQ>
		break;
 8003dfe:	e020      	b.n	8003e42 <extInt_Config+0xdfa>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003e00:	2017      	movs	r0, #23
 8003e02:	f7ff f903 	bl	800300c <__NVIC_EnableIRQ>
		break;
 8003e06:	e01c      	b.n	8003e42 <extInt_Config+0xdfa>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003e08:	2017      	movs	r0, #23
 8003e0a:	f7ff f8ff 	bl	800300c <__NVIC_EnableIRQ>
		break;
 8003e0e:	e018      	b.n	8003e42 <extInt_Config+0xdfa>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e10:	2028      	movs	r0, #40	; 0x28
 8003e12:	f7ff f8fb 	bl	800300c <__NVIC_EnableIRQ>
		break;
 8003e16:	e014      	b.n	8003e42 <extInt_Config+0xdfa>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e18:	2028      	movs	r0, #40	; 0x28
 8003e1a:	f7ff f8f7 	bl	800300c <__NVIC_EnableIRQ>
		break;
 8003e1e:	e010      	b.n	8003e42 <extInt_Config+0xdfa>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e20:	2028      	movs	r0, #40	; 0x28
 8003e22:	f7ff f8f3 	bl	800300c <__NVIC_EnableIRQ>
		break;
 8003e26:	e00c      	b.n	8003e42 <extInt_Config+0xdfa>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e28:	2028      	movs	r0, #40	; 0x28
 8003e2a:	f7ff f8ef 	bl	800300c <__NVIC_EnableIRQ>
		break;
 8003e2e:	e008      	b.n	8003e42 <extInt_Config+0xdfa>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e30:	2028      	movs	r0, #40	; 0x28
 8003e32:	f7ff f8eb 	bl	800300c <__NVIC_EnableIRQ>
		break;
 8003e36:	e004      	b.n	8003e42 <extInt_Config+0xdfa>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e38:	2028      	movs	r0, #40	; 0x28
 8003e3a:	f7ff f8e7 	bl	800300c <__NVIC_EnableIRQ>
		break;
 8003e3e:	e000      	b.n	8003e42 <extInt_Config+0xdfa>
	}

	default: {
		break;
 8003e40:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8003e42:	b662      	cpsie	i
}
 8003e44:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40020c00 	.word	0x40020c00
 8003e54:	40013800 	.word	0x40013800
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	40021c00 	.word	0x40021c00
 8003e60:	40013c00 	.word	0x40013c00

08003e64 <callback_extInt0>:



//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
	__NOP();
 8003e68:	bf00      	nop
}
 8003e6a:	bf00      	nop
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt2(void){
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
	__NOP();
 8003e78:	bf00      	nop
}
 8003e7a:	bf00      	nop
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt4(void){
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
	__NOP();
 8003e88:	bf00      	nop
}
 8003e8a:	bf00      	nop
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
	__NOP();
 8003e98:	bf00      	nop
}
 8003e9a:	bf00      	nop
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
	__NOP();
 8003ea8:	bf00      	nop
}
 8003eaa:	bf00      	nop
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
	__NOP();
 8003eb8:	bf00      	nop
}
 8003eba:	bf00      	nop
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
	__NOP();
 8003ec8:	bf00      	nop
}
 8003eca:	bf00      	nop
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
	__NOP();
 8003ed8:	bf00      	nop
}
 8003eda:	bf00      	nop
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
	__NOP();
 8003ee8:	bf00      	nop
}
 8003eea:	bf00      	nop
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
	__NOP();
 8003ef8:	bf00      	nop
}
 8003efa:	bf00      	nop
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
	__NOP();
 8003f08:	bf00      	nop
}
 8003f0a:	bf00      	nop
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <callback_extInt13>:

__attribute__ ((weak)) void callback_extInt13(void){
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
	__NOP();
 8003f18:	bf00      	nop
}
 8003f1a:	bf00      	nop
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt14(void){
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
	__NOP();
 8003f28:	bf00      	nop
}
 8003f2a:	bf00      	nop
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
	__NOP();
 8003f38:	bf00      	nop
}
 8003f3a:	bf00      	nop
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 8003f48:	4b08      	ldr	r3, [pc, #32]	; (8003f6c <EXTI0_IRQHandler+0x28>)
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 8003f54:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <EXTI0_IRQHandler+0x28>)
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	4a04      	ldr	r2, [pc, #16]	; (8003f6c <EXTI0_IRQHandler+0x28>)
 8003f5a:	f043 0301 	orr.w	r3, r3, #1
 8003f5e:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 8003f60:	f7ff ff80 	bl	8003e64 <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 8003f64:	e000      	b.n	8003f68 <EXTI0_IRQHandler+0x24>
		__NOP();
 8003f66:	bf00      	nop
}
 8003f68:	bf00      	nop
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40013c00 	.word	0x40013c00

08003f70 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 8003f74:	4b08      	ldr	r3, [pc, #32]	; (8003f98 <EXTI1_IRQHandler+0x28>)
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <EXTI1_IRQHandler+0x28>)
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	4a04      	ldr	r2, [pc, #16]	; (8003f98 <EXTI1_IRQHandler+0x28>)
 8003f86:	f043 0302 	orr.w	r3, r3, #2
 8003f8a:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 8003f8c:	f7fd ff80 	bl	8001e90 <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 8003f90:	e000      	b.n	8003f94 <EXTI1_IRQHandler+0x24>
		__NOP();
 8003f92:	bf00      	nop
}
 8003f94:	bf00      	nop
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40013c00 	.word	0x40013c00

08003f9c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 8003fa0:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <EXTI2_IRQHandler+0x28>)
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 8003fac:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <EXTI2_IRQHandler+0x28>)
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	4a04      	ldr	r2, [pc, #16]	; (8003fc4 <EXTI2_IRQHandler+0x28>)
 8003fb2:	f043 0304 	orr.w	r3, r3, #4
 8003fb6:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 8003fb8:	f7ff ff5c 	bl	8003e74 <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 8003fbc:	e000      	b.n	8003fc0 <EXTI2_IRQHandler+0x24>
		__NOP();
 8003fbe:	bf00      	nop
}
 8003fc0:	bf00      	nop
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40013c00 	.word	0x40013c00

08003fc8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 8003fcc:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <EXTI3_IRQHandler+0x28>)
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d008      	beq.n	8003fea <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <EXTI3_IRQHandler+0x28>)
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	4a04      	ldr	r2, [pc, #16]	; (8003ff0 <EXTI3_IRQHandler+0x28>)
 8003fde:	f043 0308 	orr.w	r3, r3, #8
 8003fe2:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 8003fe4:	f7fd ffa8 	bl	8001f38 <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 8003fe8:	e000      	b.n	8003fec <EXTI3_IRQHandler+0x24>
		__NOP();
 8003fea:	bf00      	nop
}
 8003fec:	bf00      	nop
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40013c00 	.word	0x40013c00

08003ff4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 8003ff8:	4b08      	ldr	r3, [pc, #32]	; (800401c <EXTI4_IRQHandler+0x28>)
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	f003 0310 	and.w	r3, r3, #16
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 8004004:	4b05      	ldr	r3, [pc, #20]	; (800401c <EXTI4_IRQHandler+0x28>)
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	4a04      	ldr	r2, [pc, #16]	; (800401c <EXTI4_IRQHandler+0x28>)
 800400a:	f043 0310 	orr.w	r3, r3, #16
 800400e:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 8004010:	f7ff ff38 	bl	8003e84 <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 8004014:	e000      	b.n	8004018 <EXTI4_IRQHandler+0x24>
		__NOP();
 8004016:	bf00      	nop
}
 8004018:	bf00      	nop
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40013c00 	.word	0x40013c00

08004020 <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 8004024:	4b26      	ldr	r3, [pc, #152]	; (80040c0 <EXTI9_5_IRQHandler+0xa0>)
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	f003 0320 	and.w	r3, r3, #32
 800402c:	2b00      	cmp	r3, #0
 800402e:	d008      	beq.n	8004042 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 8004030:	4b23      	ldr	r3, [pc, #140]	; (80040c0 <EXTI9_5_IRQHandler+0xa0>)
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	4a22      	ldr	r2, [pc, #136]	; (80040c0 <EXTI9_5_IRQHandler+0xa0>)
 8004036:	f043 0320 	orr.w	r3, r3, #32
 800403a:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 800403c:	f7ff ff2a 	bl	8003e94 <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 8004040:	e03c      	b.n	80040bc <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 8004042:	4b1f      	ldr	r3, [pc, #124]	; (80040c0 <EXTI9_5_IRQHandler+0xa0>)
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	d008      	beq.n	8004060 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 800404e:	4b1c      	ldr	r3, [pc, #112]	; (80040c0 <EXTI9_5_IRQHandler+0xa0>)
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	4a1b      	ldr	r2, [pc, #108]	; (80040c0 <EXTI9_5_IRQHandler+0xa0>)
 8004054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004058:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 800405a:	f7ff ff23 	bl	8003ea4 <callback_extInt6>
}
 800405e:	e02d      	b.n	80040bc <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 8004060:	4b17      	ldr	r3, [pc, #92]	; (80040c0 <EXTI9_5_IRQHandler+0xa0>)
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 800406c:	4b14      	ldr	r3, [pc, #80]	; (80040c0 <EXTI9_5_IRQHandler+0xa0>)
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	4a13      	ldr	r2, [pc, #76]	; (80040c0 <EXTI9_5_IRQHandler+0xa0>)
 8004072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004076:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 8004078:	f7ff ff1c 	bl	8003eb4 <callback_extInt7>
}
 800407c:	e01e      	b.n	80040bc <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 800407e:	4b10      	ldr	r3, [pc, #64]	; (80040c0 <EXTI9_5_IRQHandler+0xa0>)
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004086:	2b00      	cmp	r3, #0
 8004088:	d008      	beq.n	800409c <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 800408a:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <EXTI9_5_IRQHandler+0xa0>)
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	4a0c      	ldr	r2, [pc, #48]	; (80040c0 <EXTI9_5_IRQHandler+0xa0>)
 8004090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004094:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 8004096:	f7ff ff15 	bl	8003ec4 <callback_extInt8>
}
 800409a:	e00f      	b.n	80040bc <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 800409c:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <EXTI9_5_IRQHandler+0xa0>)
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 80040a8:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <EXTI9_5_IRQHandler+0xa0>)
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	4a04      	ldr	r2, [pc, #16]	; (80040c0 <EXTI9_5_IRQHandler+0xa0>)
 80040ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040b2:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 80040b4:	f7ff ff0e 	bl	8003ed4 <callback_extInt9>
}
 80040b8:	e000      	b.n	80040bc <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 80040ba:	bf00      	nop
}
 80040bc:	bf00      	nop
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40013c00 	.word	0x40013c00

080040c4 <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 80040c8:	4b2e      	ldr	r3, [pc, #184]	; (8004184 <EXTI15_10_IRQHandler+0xc0>)
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 80040d4:	4b2b      	ldr	r3, [pc, #172]	; (8004184 <EXTI15_10_IRQHandler+0xc0>)
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	4a2a      	ldr	r2, [pc, #168]	; (8004184 <EXTI15_10_IRQHandler+0xc0>)
 80040da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040de:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 80040e0:	f7ff ff00 	bl	8003ee4 <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 80040e4:	e04b      	b.n	800417e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 80040e6:	4b27      	ldr	r3, [pc, #156]	; (8004184 <EXTI15_10_IRQHandler+0xc0>)
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d008      	beq.n	8004104 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 80040f2:	4b24      	ldr	r3, [pc, #144]	; (8004184 <EXTI15_10_IRQHandler+0xc0>)
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	4a23      	ldr	r2, [pc, #140]	; (8004184 <EXTI15_10_IRQHandler+0xc0>)
 80040f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040fc:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 80040fe:	f7ff fef9 	bl	8003ef4 <callback_extInt11>
}
 8004102:	e03c      	b.n	800417e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 8004104:	4b1f      	ldr	r3, [pc, #124]	; (8004184 <EXTI15_10_IRQHandler+0xc0>)
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 8004110:	4b1c      	ldr	r3, [pc, #112]	; (8004184 <EXTI15_10_IRQHandler+0xc0>)
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	4a1b      	ldr	r2, [pc, #108]	; (8004184 <EXTI15_10_IRQHandler+0xc0>)
 8004116:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800411a:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 800411c:	f7ff fef2 	bl	8003f04 <callback_extInt12>
}
 8004120:	e02d      	b.n	800417e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 8004122:	4b18      	ldr	r3, [pc, #96]	; (8004184 <EXTI15_10_IRQHandler+0xc0>)
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d008      	beq.n	8004140 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 800412e:	4b15      	ldr	r3, [pc, #84]	; (8004184 <EXTI15_10_IRQHandler+0xc0>)
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	4a14      	ldr	r2, [pc, #80]	; (8004184 <EXTI15_10_IRQHandler+0xc0>)
 8004134:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004138:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 800413a:	f7ff feeb 	bl	8003f14 <callback_extInt13>
}
 800413e:	e01e      	b.n	800417e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 8004140:	4b10      	ldr	r3, [pc, #64]	; (8004184 <EXTI15_10_IRQHandler+0xc0>)
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 800414c:	4b0d      	ldr	r3, [pc, #52]	; (8004184 <EXTI15_10_IRQHandler+0xc0>)
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	4a0c      	ldr	r2, [pc, #48]	; (8004184 <EXTI15_10_IRQHandler+0xc0>)
 8004152:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004156:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 8004158:	f7ff fee4 	bl	8003f24 <callback_extInt14>
}
 800415c:	e00f      	b.n	800417e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 800415e:	4b09      	ldr	r3, [pc, #36]	; (8004184 <EXTI15_10_IRQHandler+0xc0>)
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d008      	beq.n	800417c <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <EXTI15_10_IRQHandler+0xc0>)
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	4a05      	ldr	r2, [pc, #20]	; (8004184 <EXTI15_10_IRQHandler+0xc0>)
 8004170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004174:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 8004176:	f7ff fedd 	bl	8003f34 <callback_extInt15>
}
 800417a:	e000      	b.n	800417e <EXTI15_10_IRQHandler+0xba>
		__NOP();
 800417c:	bf00      	nop
}
 800417e:	bf00      	nop
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40013c00 	.word	0x40013c00

08004188 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	4608      	mov	r0, r1
 8004192:	4611      	mov	r1, r2
 8004194:	461a      	mov	r2, r3
 8004196:	4603      	mov	r3, r0
 8004198:	70fb      	strb	r3, [r7, #3]
 800419a:	460b      	mov	r3, r1
 800419c:	70bb      	strb	r3, [r7, #2]
 800419e:	4613      	mov	r3, r2
 80041a0:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	78ba      	ldrb	r2, [r7, #2]
 80041ac:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	787a      	ldrb	r2, [r7, #1]
 80041b2:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	7c3a      	ldrb	r2, [r7, #16]
 80041b8:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	7d3a      	ldrb	r2, [r7, #20]
 80041be:	715a      	strb	r2, [r3, #5]
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 80041d4:	2300      	movs	r3, #0
 80041d6:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80041d8:	2300      	movs	r3, #0
 80041da:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	4a88      	ldr	r2, [pc, #544]	; (8004404 <GPIO_Config+0x238>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d106      	bne.n	80041f4 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 80041e6:	4b88      	ldr	r3, [pc, #544]	; (8004408 <GPIO_Config+0x23c>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	4a87      	ldr	r2, [pc, #540]	; (8004408 <GPIO_Config+0x23c>)
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	6313      	str	r3, [r2, #48]	; 0x30
 80041f2:	e03a      	b.n	800426a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	4a84      	ldr	r2, [pc, #528]	; (800440c <GPIO_Config+0x240>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d106      	bne.n	800420c <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 80041fe:	4b82      	ldr	r3, [pc, #520]	; (8004408 <GPIO_Config+0x23c>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	4a81      	ldr	r2, [pc, #516]	; (8004408 <GPIO_Config+0x23c>)
 8004204:	f043 0302 	orr.w	r3, r3, #2
 8004208:	6313      	str	r3, [r2, #48]	; 0x30
 800420a:	e02e      	b.n	800426a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	4a7f      	ldr	r2, [pc, #508]	; (8004410 <GPIO_Config+0x244>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d106      	bne.n	8004224 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 8004216:	4b7c      	ldr	r3, [pc, #496]	; (8004408 <GPIO_Config+0x23c>)
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	4a7b      	ldr	r2, [pc, #492]	; (8004408 <GPIO_Config+0x23c>)
 800421c:	f043 0304 	orr.w	r3, r3, #4
 8004220:	6313      	str	r3, [r2, #48]	; 0x30
 8004222:	e022      	b.n	800426a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	4a7a      	ldr	r2, [pc, #488]	; (8004414 <GPIO_Config+0x248>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d106      	bne.n	800423c <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 800422e:	4b76      	ldr	r3, [pc, #472]	; (8004408 <GPIO_Config+0x23c>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	4a75      	ldr	r2, [pc, #468]	; (8004408 <GPIO_Config+0x23c>)
 8004234:	f043 0308 	orr.w	r3, r3, #8
 8004238:	6313      	str	r3, [r2, #48]	; 0x30
 800423a:	e016      	b.n	800426a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	4a75      	ldr	r2, [pc, #468]	; (8004418 <GPIO_Config+0x24c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d106      	bne.n	8004254 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 8004246:	4b70      	ldr	r3, [pc, #448]	; (8004408 <GPIO_Config+0x23c>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	4a6f      	ldr	r2, [pc, #444]	; (8004408 <GPIO_Config+0x23c>)
 800424c:	f043 0310 	orr.w	r3, r3, #16
 8004250:	6313      	str	r3, [r2, #48]	; 0x30
 8004252:	e00a      	b.n	800426a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	4a70      	ldr	r2, [pc, #448]	; (800441c <GPIO_Config+0x250>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d105      	bne.n	800426a <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 800425e:	4b6a      	ldr	r3, [pc, #424]	; (8004408 <GPIO_Config+0x23c>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	4a69      	ldr	r2, [pc, #420]	; (8004408 <GPIO_Config+0x23c>)
 8004264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004268:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	785b      	ldrb	r3, [r3, #1]
 800426e:	461a      	mov	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	2103      	movs	r1, #3
 800428a:	fa01 f303 	lsl.w	r3, r1, r3
 800428e:	43db      	mvns	r3, r3
 8004290:	4619      	mov	r1, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	400a      	ands	r2, r1
 8004298:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	6819      	ldr	r1, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	789b      	ldrb	r3, [r3, #2]
 80042ae:	461a      	mov	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	4619      	mov	r1, r3
 80042c6:	2301      	movs	r3, #1
 80042c8:	408b      	lsls	r3, r1
 80042ca:	43db      	mvns	r3, r3
 80042cc:	4619      	mov	r1, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	400a      	ands	r2, r1
 80042d4:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	6859      	ldr	r1, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	78db      	ldrb	r3, [r3, #3]
 80042ea:	461a      	mov	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	2103      	movs	r1, #3
 8004306:	fa01 f303 	lsl.w	r3, r1, r3
 800430a:	43db      	mvns	r3, r3
 800430c:	4619      	mov	r1, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	400a      	ands	r2, r1
 8004314:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	6899      	ldr	r1, [r3, #8]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	430a      	orrs	r2, r1
 8004324:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	791b      	ldrb	r3, [r3, #4]
 800432a:	461a      	mov	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	2103      	movs	r1, #3
 8004346:	fa01 f303 	lsl.w	r3, r1, r3
 800434a:	43db      	mvns	r3, r3
 800434c:	4619      	mov	r1, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	400a      	ands	r2, r1
 8004354:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	68d9      	ldr	r1, [r3, #12]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	430a      	orrs	r2, r1
 8004364:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	785b      	ldrb	r3, [r3, #1]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d143      	bne.n	80043f6 <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	2b07      	cmp	r3, #7
 8004374:	d81f      	bhi.n	80043b6 <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	6a1a      	ldr	r2, [r3, #32]
 8004384:	210f      	movs	r1, #15
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	fa01 f303 	lsl.w	r3, r1, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	4619      	mov	r1, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	400a      	ands	r2, r1
 8004396:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	6a1a      	ldr	r2, [r3, #32]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	795b      	ldrb	r3, [r3, #5]
 80043a2:	4619      	mov	r1, r3
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	fa01 f303 	lsl.w	r3, r1, r3
 80043aa:	4619      	mov	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 80043b4:	e01f      	b.n	80043f6 <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	3b08      	subs	r3, #8
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043c6:	210f      	movs	r1, #15
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	fa01 f303 	lsl.w	r3, r1, r3
 80043ce:	43db      	mvns	r3, r3
 80043d0:	4619      	mov	r1, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	400a      	ands	r2, r1
 80043d8:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	795b      	ldrb	r3, [r3, #5]
 80043e4:	4619      	mov	r1, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ec:	4619      	mov	r1, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80043f6:	bf00      	nop
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40020000 	.word	0x40020000
 8004408:	40023800 	.word	0x40023800
 800440c:	40020400 	.word	0x40020400
 8004410:	40020800 	.word	0x40020800
 8004414:	40020c00 	.word	0x40020c00
 8004418:	40021000 	.word	0x40021000
 800441c:	40021c00 	.word	0x40021c00

08004420 <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d10d      	bne.n	800444e <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	699a      	ldr	r2, [r3, #24]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	4619      	mov	r1, r3
 800443e:	2301      	movs	r3, #1
 8004440:	408b      	lsls	r3, r1
 8004442:	4619      	mov	r1, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	430a      	orrs	r2, r1
 800444a:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 800444c:	e00d      	b.n	800446a <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	699a      	ldr	r2, [r3, #24]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	3310      	adds	r3, #16
 800445a:	2101      	movs	r1, #1
 800445c:	fa01 f303 	lsl.w	r3, r1, r3
 8004460:	4619      	mov	r1, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	430a      	orrs	r2, r1
 8004468:	619a      	str	r2, [r3, #24]
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	695a      	ldr	r2, [r3, #20]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	4619      	mov	r1, r3
 800448a:	2301      	movs	r3, #1
 800448c:	408b      	lsls	r3, r1
 800448e:	4619      	mov	r1, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	404a      	eors	r2, r1
 8004496:	615a      	str	r2, [r3, #20]
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 80044ae:	4a39      	ldr	r2, [pc, #228]	; (8004594 <configPLL+0xf0>)
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	2b31      	cmp	r3, #49	; 0x31
 80044b8:	d804      	bhi.n	80044c4 <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 80044ba:	4b37      	ldr	r3, [pc, #220]	; (8004598 <configPLL+0xf4>)
 80044bc:	4a36      	ldr	r2, [pc, #216]	; (8004598 <configPLL+0xf4>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	6093      	str	r3, [r2, #8]
 80044c2:	e005      	b.n	80044d0 <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80044c4:	4b34      	ldr	r3, [pc, #208]	; (8004598 <configPLL+0xf4>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	4a33      	ldr	r2, [pc, #204]	; (8004598 <configPLL+0xf4>)
 80044ca:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80044ce:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 80044d0:	4b31      	ldr	r3, [pc, #196]	; (8004598 <configPLL+0xf4>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	4a30      	ldr	r2, [pc, #192]	; (8004598 <configPLL+0xf4>)
 80044d6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80044da:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 80044dc:	4b2e      	ldr	r3, [pc, #184]	; (8004598 <configPLL+0xf4>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	4a2d      	ldr	r2, [pc, #180]	; (8004598 <configPLL+0xf4>)
 80044e2:	f043 0312 	orr.w	r3, r3, #18
 80044e6:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 80044e8:	4b2b      	ldr	r3, [pc, #172]	; (8004598 <configPLL+0xf4>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	79fa      	ldrb	r2, [r7, #7]
 80044ee:	0092      	lsls	r2, r2, #2
 80044f0:	3a0e      	subs	r2, #14
 80044f2:	0192      	lsls	r2, r2, #6
 80044f4:	4611      	mov	r1, r2
 80044f6:	4a28      	ldr	r2, [pc, #160]	; (8004598 <configPLL+0xf4>)
 80044f8:	430b      	orrs	r3, r1
 80044fa:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 80044fc:	4b26      	ldr	r3, [pc, #152]	; (8004598 <configPLL+0xf4>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	4a25      	ldr	r2, [pc, #148]	; (8004598 <configPLL+0xf4>)
 8004502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004506:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 8004508:	4b23      	ldr	r3, [pc, #140]	; (8004598 <configPLL+0xf4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a22      	ldr	r2, [pc, #136]	; (8004598 <configPLL+0xf4>)
 800450e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004512:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8004514:	e000      	b.n	8004518 <configPLL+0x74>
	{
		__NOP();
 8004516:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8004518:	4b1f      	ldr	r3, [pc, #124]	; (8004598 <configPLL+0xf4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f8      	beq.n	8004516 <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	2b5a      	cmp	r3, #90	; 0x5a
 8004528:	d909      	bls.n	800453e <configPLL+0x9a>
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	2b64      	cmp	r3, #100	; 0x64
 800452e:	d806      	bhi.n	800453e <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8004530:	4b1a      	ldr	r3, [pc, #104]	; (800459c <configPLL+0xf8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a19      	ldr	r2, [pc, #100]	; (800459c <configPLL+0xf8>)
 8004536:	f043 0303 	orr.w	r3, r3, #3
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	e01d      	b.n	800457a <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	2b40      	cmp	r3, #64	; 0x40
 8004542:	d909      	bls.n	8004558 <configPLL+0xb4>
 8004544:	79fb      	ldrb	r3, [r7, #7]
 8004546:	2b5a      	cmp	r3, #90	; 0x5a
 8004548:	d806      	bhi.n	8004558 <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 800454a:	4b14      	ldr	r3, [pc, #80]	; (800459c <configPLL+0xf8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a13      	ldr	r2, [pc, #76]	; (800459c <configPLL+0xf8>)
 8004550:	f043 0302 	orr.w	r3, r3, #2
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	e010      	b.n	800457a <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 8004558:	79fb      	ldrb	r3, [r7, #7]
 800455a:	2b1e      	cmp	r3, #30
 800455c:	d909      	bls.n	8004572 <configPLL+0xce>
 800455e:	79fb      	ldrb	r3, [r7, #7]
 8004560:	2b40      	cmp	r3, #64	; 0x40
 8004562:	d806      	bhi.n	8004572 <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 8004564:	4b0d      	ldr	r3, [pc, #52]	; (800459c <configPLL+0xf8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a0c      	ldr	r2, [pc, #48]	; (800459c <configPLL+0xf8>)
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	e003      	b.n	800457a <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 8004572:	4b0a      	ldr	r3, [pc, #40]	; (800459c <configPLL+0xf8>)
 8004574:	4a09      	ldr	r2, [pc, #36]	; (800459c <configPLL+0xf8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 800457a:	4b07      	ldr	r3, [pc, #28]	; (8004598 <configPLL+0xf4>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	4a06      	ldr	r2, [pc, #24]	; (8004598 <configPLL+0xf4>)
 8004580:	f043 0302 	orr.w	r3, r3, #2
 8004584:	6093      	str	r3, [r2, #8]

}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	200004ec 	.word	0x200004ec
 8004598:	40023800 	.word	0x40023800
 800459c:	40023c00 	.word	0x40023c00

080045a0 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 80045aa:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <getConfigPLL+0x30>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d103      	bne.n	80045be <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 80045b6:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <getConfigPLL+0x34>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	71fb      	strb	r3, [r7, #7]
 80045bc:	e001      	b.n	80045c2 <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 80045be:	2310      	movs	r3, #16
 80045c0:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 80045c2:	79fb      	ldrb	r3, [r7, #7]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	40023800 	.word	0x40023800
 80045d4:	200004ec 	.word	0x200004ec

080045d8 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 80045de:	f7ff ffdf 	bl	80045a0 <getConfigPLL>
 80045e2:	4603      	mov	r3, r0
 80045e4:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 80045e6:	2300      	movs	r3, #0
 80045e8:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 80045ea:	79bb      	ldrb	r3, [r7, #6]
 80045ec:	2b31      	cmp	r3, #49	; 0x31
 80045ee:	d802      	bhi.n	80045f6 <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 80045f0:	79bb      	ldrb	r3, [r7, #6]
 80045f2:	71fb      	strb	r3, [r7, #7]
 80045f4:	e002      	b.n	80045fc <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 80045f6:	79bb      	ldrb	r3, [r7, #6]
 80045f8:	089b      	lsrs	r3, r3, #2
 80045fa:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 80045fc:	79fb      	ldrb	r3, [r7, #7]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
	...

08004608 <configMCO2>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2(uint8_t value)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	4603      	mov	r3, r0
 8004610:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0b11<<RCC_CFGR_MCO2_Pos);
 8004612:	4b0a      	ldr	r3, [pc, #40]	; (800463c <configMCO2+0x34>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	4a09      	ldr	r2, [pc, #36]	; (800463c <configMCO2+0x34>)
 8004618:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800461c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (value<<RCC_CFGR_MCO2_Pos);
 800461e:	4b07      	ldr	r3, [pc, #28]	; (800463c <configMCO2+0x34>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	79fa      	ldrb	r2, [r7, #7]
 8004624:	0792      	lsls	r2, r2, #30
 8004626:	4611      	mov	r1, r2
 8004628:	4a04      	ldr	r2, [pc, #16]	; (800463c <configMCO2+0x34>)
 800462a:	430b      	orrs	r3, r1
 800462c:	6093      	str	r3, [r2, #8]
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40023800 	.word	0x40023800

08004640 <configMCO2PRE>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2PRE(uint8_t value)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	71fb      	strb	r3, [r7, #7]
	//Selecionamos el prescaler de acuerdo al valor definido
	switch (value){
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	3b01      	subs	r3, #1
 800464e:	2b04      	cmp	r3, #4
 8004650:	d84b      	bhi.n	80046ea <configMCO2PRE+0xaa>
 8004652:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <configMCO2PRE+0x18>)
 8004654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004658:	0800466d 	.word	0x0800466d
 800465c:	08004683 	.word	0x08004683
 8004660:	0800469d 	.word	0x0800469d
 8004664:	080046b7 	.word	0x080046b7
 8004668:	080046d1 	.word	0x080046d1
		case 1:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 800466c:	4b23      	ldr	r3, [pc, #140]	; (80046fc <configMCO2PRE+0xbc>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	4a22      	ldr	r2, [pc, #136]	; (80046fc <configMCO2PRE+0xbc>)
 8004672:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8004676:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b000<<RCC_CFGR_MCO2PRE_Pos);
 8004678:	4b20      	ldr	r3, [pc, #128]	; (80046fc <configMCO2PRE+0xbc>)
 800467a:	4a20      	ldr	r2, [pc, #128]	; (80046fc <configMCO2PRE+0xbc>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	6093      	str	r3, [r2, #8]
			break;
 8004680:	e035      	b.n	80046ee <configMCO2PRE+0xae>
		}
		case 2:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8004682:	4b1e      	ldr	r3, [pc, #120]	; (80046fc <configMCO2PRE+0xbc>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	4a1d      	ldr	r2, [pc, #116]	; (80046fc <configMCO2PRE+0xbc>)
 8004688:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 800468c:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100<<RCC_CFGR_MCO2PRE_Pos);
 800468e:	4b1b      	ldr	r3, [pc, #108]	; (80046fc <configMCO2PRE+0xbc>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	4a1a      	ldr	r2, [pc, #104]	; (80046fc <configMCO2PRE+0xbc>)
 8004694:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004698:	6093      	str	r3, [r2, #8]
			break;
 800469a:	e028      	b.n	80046ee <configMCO2PRE+0xae>
		}
		case 3:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 800469c:	4b17      	ldr	r3, [pc, #92]	; (80046fc <configMCO2PRE+0xbc>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	4a16      	ldr	r2, [pc, #88]	; (80046fc <configMCO2PRE+0xbc>)
 80046a2:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80046a6:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b101<<RCC_CFGR_MCO2PRE_Pos);
 80046a8:	4b14      	ldr	r3, [pc, #80]	; (80046fc <configMCO2PRE+0xbc>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	4a13      	ldr	r2, [pc, #76]	; (80046fc <configMCO2PRE+0xbc>)
 80046ae:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
 80046b2:	6093      	str	r3, [r2, #8]
			break;
 80046b4:	e01b      	b.n	80046ee <configMCO2PRE+0xae>
		}
		case 4:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80046b6:	4b11      	ldr	r3, [pc, #68]	; (80046fc <configMCO2PRE+0xbc>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	4a10      	ldr	r2, [pc, #64]	; (80046fc <configMCO2PRE+0xbc>)
 80046bc:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80046c0:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b110<<RCC_CFGR_MCO2PRE_Pos);
 80046c2:	4b0e      	ldr	r3, [pc, #56]	; (80046fc <configMCO2PRE+0xbc>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	4a0d      	ldr	r2, [pc, #52]	; (80046fc <configMCO2PRE+0xbc>)
 80046c8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80046cc:	6093      	str	r3, [r2, #8]
			break;
 80046ce:	e00e      	b.n	80046ee <configMCO2PRE+0xae>
		}
		case 5:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80046d0:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <configMCO2PRE+0xbc>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	4a09      	ldr	r2, [pc, #36]	; (80046fc <configMCO2PRE+0xbc>)
 80046d6:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80046da:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b111<<RCC_CFGR_MCO2PRE_Pos);
 80046dc:	4b07      	ldr	r3, [pc, #28]	; (80046fc <configMCO2PRE+0xbc>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	4a06      	ldr	r2, [pc, #24]	; (80046fc <configMCO2PRE+0xbc>)
 80046e2:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80046e6:	6093      	str	r3, [r2, #8]
			break;
 80046e8:	e001      	b.n	80046ee <configMCO2PRE+0xae>
		}
		default:
		{
			__NOP();
 80046ea:	bf00      	nop
			break;
 80046ec:	bf00      	nop
		}
	}

}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40023800 	.word	0x40023800

08004700 <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004710:	d106      	bne.n	8004720 <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8004712:	4b81      	ldr	r3, [pc, #516]	; (8004918 <pwm_Config+0x218>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	4a80      	ldr	r2, [pc, #512]	; (8004918 <pwm_Config+0x218>)
 8004718:	f043 0301 	orr.w	r3, r3, #1
 800471c:	6413      	str	r3, [r2, #64]	; 0x40
 800471e:	e024      	b.n	800476a <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	4a7d      	ldr	r2, [pc, #500]	; (800491c <pwm_Config+0x21c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d106      	bne.n	8004738 <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800472a:	4b7b      	ldr	r3, [pc, #492]	; (8004918 <pwm_Config+0x218>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	4a7a      	ldr	r2, [pc, #488]	; (8004918 <pwm_Config+0x218>)
 8004730:	f043 0302 	orr.w	r3, r3, #2
 8004734:	6413      	str	r3, [r2, #64]	; 0x40
 8004736:	e018      	b.n	800476a <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	4a78      	ldr	r2, [pc, #480]	; (8004920 <pwm_Config+0x220>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d106      	bne.n	8004750 <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8004742:	4b75      	ldr	r3, [pc, #468]	; (8004918 <pwm_Config+0x218>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	4a74      	ldr	r2, [pc, #464]	; (8004918 <pwm_Config+0x218>)
 8004748:	f043 0304 	orr.w	r3, r3, #4
 800474c:	6413      	str	r3, [r2, #64]	; 0x40
 800474e:	e00c      	b.n	800476a <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	4a73      	ldr	r2, [pc, #460]	; (8004924 <pwm_Config+0x224>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d106      	bne.n	8004768 <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800475a:	4b6f      	ldr	r3, [pc, #444]	; (8004918 <pwm_Config+0x218>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	4a6e      	ldr	r2, [pc, #440]	; (8004918 <pwm_Config+0x218>)
 8004760:	f043 0308 	orr.w	r3, r3, #8
 8004764:	6413      	str	r3, [r2, #64]	; 0x40
 8004766:	e000      	b.n	800476a <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 8004768:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fa4c 	bl	8004c08 <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b03      	cmp	r3, #3
 8004776:	f200 8118 	bhi.w	80049aa <pwm_Config+0x2aa>
 800477a:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <pwm_Config+0x80>)
 800477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004780:	08004791 	.word	0x08004791
 8004784:	08004813 	.word	0x08004813
 8004788:	08004895 	.word	0x08004895
 800478c:	08004929 	.word	0x08004929
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f022 0203 	bic.w	r2, r2, #3
 800479e:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80047ae:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	699a      	ldr	r2, [r3, #24]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80047be:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f022 0208 	bic.w	r2, r2, #8
 80047ce:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f042 0208 	orr.w	r2, r2, #8
 80047de:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f022 0204 	bic.w	r2, r2, #4
 80047ee:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f042 0204 	orr.w	r2, r2, #4
 80047fe:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800480e:	619a      	str	r2, [r3, #24]

		break;
 8004810:	e0cc      	b.n	80049ac <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	699a      	ldr	r2, [r3, #24]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f022 0203 	bic.w	r2, r2, #3
 8004820:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	699a      	ldr	r2, [r3, #24]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004830:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	699a      	ldr	r2, [r3, #24]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8004840:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	699a      	ldr	r2, [r3, #24]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004850:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	699a      	ldr	r2, [r3, #24]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004860:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	699a      	ldr	r2, [r3, #24]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004870:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	699a      	ldr	r2, [r3, #24]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004880:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	699a      	ldr	r2, [r3, #24]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004890:	619a      	str	r2, [r3, #24]

		break;
 8004892:	e08b      	b.n	80049ac <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	69da      	ldr	r2, [r3, #28]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f022 0203 	bic.w	r2, r2, #3
 80048a2:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	69da      	ldr	r2, [r3, #28]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80048b2:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	69da      	ldr	r2, [r3, #28]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80048c2:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	69da      	ldr	r2, [r3, #28]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f022 0208 	bic.w	r2, r2, #8
 80048d2:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	69da      	ldr	r2, [r3, #28]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f042 0208 	orr.w	r2, r2, #8
 80048e2:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	69da      	ldr	r2, [r3, #28]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f022 0204 	bic.w	r2, r2, #4
 80048f2:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	69da      	ldr	r2, [r3, #28]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f042 0204 	orr.w	r2, r2, #4
 8004902:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	69da      	ldr	r2, [r3, #28]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004912:	61da      	str	r2, [r3, #28]

		break;
 8004914:	e04a      	b.n	80049ac <pwm_Config+0x2ac>
 8004916:	bf00      	nop
 8004918:	40023800 	.word	0x40023800
 800491c:	40000400 	.word	0x40000400
 8004920:	40000800 	.word	0x40000800
 8004924:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	69da      	ldr	r2, [r3, #28]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004936:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	69da      	ldr	r2, [r3, #28]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004946:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	69da      	ldr	r2, [r3, #28]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8004956:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	69da      	ldr	r2, [r3, #28]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004966:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	69da      	ldr	r2, [r3, #28]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004976:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	69da      	ldr	r2, [r3, #28]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004986:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	69da      	ldr	r2, [r3, #28]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004996:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	69da      	ldr	r2, [r3, #28]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049a6:	61da      	str	r2, [r3, #28]

		break;
 80049a8:	e000      	b.n	80049ac <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 80049aa:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	791b      	ldrb	r3, [r3, #4]
 80049b0:	4619      	mov	r1, r3
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f896 	bl	8004ae4 <statusPolarityPWM>

}
 80049b8:	bf00      	nop
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d87f      	bhi.n	8004ad4 <statusInOutPWM+0x114>
 80049d4:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <statusInOutPWM+0x1c>)
 80049d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049da:	bf00      	nop
 80049dc:	080049ed 	.word	0x080049ed
 80049e0:	08004a27 	.word	0x08004a27
 80049e4:	08004a61 	.word	0x08004a61
 80049e8:	08004a9b 	.word	0x08004a9b
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d110      	bne.n	8004a14 <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	6a1a      	ldr	r2, [r3, #32]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f022 0201 	bic.w	r2, r2, #1
 8004a00:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	6a1a      	ldr	r2, [r3, #32]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f042 0201 	orr.w	r2, r2, #1
 8004a10:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 8004a12:	e060      	b.n	8004ad6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	6a1a      	ldr	r2, [r3, #32]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f022 0201 	bic.w	r2, r2, #1
 8004a22:	621a      	str	r2, [r3, #32]
		break;
 8004a24:	e057      	b.n	8004ad6 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 8004a26:	78fb      	ldrb	r3, [r7, #3]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d110      	bne.n	8004a4e <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	6a1a      	ldr	r2, [r3, #32]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f022 0210 	bic.w	r2, r2, #16
 8004a3a:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	6a1a      	ldr	r2, [r3, #32]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f042 0210 	orr.w	r2, r2, #16
 8004a4a:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 8004a4c:	e043      	b.n	8004ad6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	6a1a      	ldr	r2, [r3, #32]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f022 0210 	bic.w	r2, r2, #16
 8004a5c:	621a      	str	r2, [r3, #32]
		break;
 8004a5e:	e03a      	b.n	8004ad6 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 8004a60:	78fb      	ldrb	r3, [r7, #3]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d110      	bne.n	8004a88 <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	6a1a      	ldr	r2, [r3, #32]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a74:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	6a1a      	ldr	r2, [r3, #32]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a84:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 8004a86:	e026      	b.n	8004ad6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	6a1a      	ldr	r2, [r3, #32]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a96:	621a      	str	r2, [r3, #32]
		break;
 8004a98:	e01d      	b.n	8004ad6 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d110      	bne.n	8004ac2 <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	6a1a      	ldr	r2, [r3, #32]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004aae:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	6a1a      	ldr	r2, [r3, #32]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004abe:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 8004ac0:	e009      	b.n	8004ad6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	6a1a      	ldr	r2, [r3, #32]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ad0:	621a      	str	r2, [r3, #32]
		break;
 8004ad2:	e000      	b.n	8004ad6 <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 8004ad4:	bf00      	nop
	}
	}
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop

08004ae4 <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	d87f      	bhi.n	8004bf8 <statusPolarityPWM+0x114>
 8004af8:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <statusPolarityPWM+0x1c>)
 8004afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afe:	bf00      	nop
 8004b00:	08004b11 	.word	0x08004b11
 8004b04:	08004b4b 	.word	0x08004b4b
 8004b08:	08004b85 	.word	0x08004b85
 8004b0c:	08004bbf 	.word	0x08004bbf
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 8004b10:	78fb      	ldrb	r3, [r7, #3]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d110      	bne.n	8004b38 <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	6a1a      	ldr	r2, [r3, #32]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f022 0202 	bic.w	r2, r2, #2
 8004b24:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	6a1a      	ldr	r2, [r3, #32]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f042 0202 	orr.w	r2, r2, #2
 8004b34:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 8004b36:	e060      	b.n	8004bfa <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	6a1a      	ldr	r2, [r3, #32]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f022 0202 	bic.w	r2, r2, #2
 8004b46:	621a      	str	r2, [r3, #32]
		break;
 8004b48:	e057      	b.n	8004bfa <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 8004b4a:	78fb      	ldrb	r3, [r7, #3]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d110      	bne.n	8004b72 <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	6a1a      	ldr	r2, [r3, #32]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f022 0220 	bic.w	r2, r2, #32
 8004b5e:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	6a1a      	ldr	r2, [r3, #32]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f042 0220 	orr.w	r2, r2, #32
 8004b6e:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 8004b70:	e043      	b.n	8004bfa <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	6a1a      	ldr	r2, [r3, #32]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f022 0220 	bic.w	r2, r2, #32
 8004b80:	621a      	str	r2, [r3, #32]
		break;
 8004b82:	e03a      	b.n	8004bfa <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d110      	bne.n	8004bac <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	6a1a      	ldr	r2, [r3, #32]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b98:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	6a1a      	ldr	r2, [r3, #32]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba8:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 8004baa:	e026      	b.n	8004bfa <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	6a1a      	ldr	r2, [r3, #32]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004bba:	621a      	str	r2, [r3, #32]
		break;
 8004bbc:	e01d      	b.n	8004bfa <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 8004bbe:	78fb      	ldrb	r3, [r7, #3]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d110      	bne.n	8004be6 <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	6a1a      	ldr	r2, [r3, #32]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bd2:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	6a1a      	ldr	r2, [r3, #32]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004be2:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 8004be4:	e009      	b.n	8004bfa <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	6a1a      	ldr	r2, [r3, #32]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bf4:	621a      	str	r2, [r3, #32]
		break;
 8004bf6:	e000      	b.n	8004bfa <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 8004bf8:	bf00      	nop
	}
	}

}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop

08004c08 <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b03      	cmp	r3, #3
 8004c16:	d823      	bhi.n	8004c60 <setDuttyCycle+0x58>
 8004c18:	a201      	add	r2, pc, #4	; (adr r2, 8004c20 <setDuttyCycle+0x18>)
 8004c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1e:	bf00      	nop
 8004c20:	08004c31 	.word	0x08004c31
 8004c24:	08004c3d 	.word	0x08004c3d
 8004c28:	08004c49 	.word	0x08004c49
 8004c2c:	08004c55 	.word	0x08004c55
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	885a      	ldrh	r2, [r3, #2]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8004c3a:	e012      	b.n	8004c62 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	885a      	ldrh	r2, [r3, #2]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8004c46:	e00c      	b.n	8004c62 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	885a      	ldrh	r2, [r3, #2]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8004c52:	e006      	b.n	8004c62 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	885a      	ldrh	r2, [r3, #2]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8004c5e:	e000      	b.n	8004c62 <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 8004c60:	bf00      	nop
	}
	}

}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop

08004c70 <updateDuttyCyclePercentageFloat>:
	setDuttyCycle(prtPwmHandler);
}

//Actualizacion del Dutty con porcentaje decimal
void updateDuttyCyclePercentageFloat(PWM_Handler_t *prtPwmHandler, float newDuttyPercentage)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	ed87 0a00 	vstr	s0, [r7]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = (uint16_t) ((prtPwmHandler->ptrTIMx->ARR)/100)*(newDuttyPercentage);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c82:	4a0d      	ldr	r2, [pc, #52]	; (8004cb8 <updateDuttyCyclePercentageFloat+0x48>)
 8004c84:	fba2 2303 	umull	r2, r3, r2, r3
 8004c88:	095b      	lsrs	r3, r3, #5
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	ee07 3a90 	vmov	s15, r3
 8004c90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c94:	edd7 7a00 	vldr	s15, [r7]
 8004c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ca0:	ee17 3a90 	vmov	r3, s15
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7ff ffac 	bl	8004c08 <setDuttyCycle>
}
 8004cb0:	bf00      	nop
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	51eb851f 	.word	0x51eb851f

08004cbc <__NVIC_EnableIRQ>:
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	db0b      	blt.n	8004ce6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cce:	79fb      	ldrb	r3, [r7, #7]
 8004cd0:	f003 021f 	and.w	r2, r3, #31
 8004cd4:	4907      	ldr	r1, [pc, #28]	; (8004cf4 <__NVIC_EnableIRQ+0x38>)
 8004cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	2001      	movs	r0, #1
 8004cde:	fa00 f202 	lsl.w	r2, r0, r2
 8004ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	e000e100 	.word	0xe000e100

08004cf8 <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	4a8f      	ldr	r2, [pc, #572]	; (8004f44 <USART_Config+0x24c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d107      	bne.n	8004d1a <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 8004d0a:	4b8f      	ldr	r3, [pc, #572]	; (8004f48 <USART_Config+0x250>)
 8004d0c:	2210      	movs	r2, #16
 8004d0e:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	4a8d      	ldr	r2, [pc, #564]	; (8004f4c <USART_Config+0x254>)
 8004d16:	6013      	str	r3, [r2, #0]
 8004d18:	e019      	b.n	8004d4e <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	4a8c      	ldr	r2, [pc, #560]	; (8004f50 <USART_Config+0x258>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d108      	bne.n	8004d36 <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 8004d24:	4b88      	ldr	r3, [pc, #544]	; (8004f48 <USART_Config+0x250>)
 8004d26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d2a:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	4a88      	ldr	r2, [pc, #544]	; (8004f54 <USART_Config+0x25c>)
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	e00b      	b.n	8004d4e <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	4a87      	ldr	r2, [pc, #540]	; (8004f58 <USART_Config+0x260>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d106      	bne.n	8004d4e <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 8004d40:	4b81      	ldr	r3, [pc, #516]	; (8004f48 <USART_Config+0x250>)
 8004d42:	2220      	movs	r2, #32
 8004d44:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	4a84      	ldr	r2, [pc, #528]	; (8004f5c <USART_Config+0x264>)
 8004d4c:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	2200      	movs	r2, #0
 8004d54:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	789b      	ldrb	r3, [r3, #2]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d03d      	beq.n	8004de2 <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d74:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d84:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d94:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004da4:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	789b      	ldrb	r3, [r3, #2]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d110      	bne.n	8004dd0 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004dbc:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	68da      	ldr	r2, [r3, #12]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dcc:	60da      	str	r2, [r3, #12]
 8004dce:	e018      	b.n	8004e02 <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004dde:	60da      	str	r2, [r3, #12]
 8004de0:	e00f      	b.n	8004e02 <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df0:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e00:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	78db      	ldrb	r3, [r3, #3]
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d84c      	bhi.n	8004ea4 <USART_Config+0x1ac>
 8004e0a:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <USART_Config+0x118>)
 8004e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e10:	08004e21 	.word	0x08004e21
 8004e14:	08004e3f 	.word	0x08004e3f
 8004e18:	08004e61 	.word	0x08004e61
 8004e1c:	08004e83 	.word	0x08004e83
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004e2e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	6912      	ldr	r2, [r2, #16]
 8004e3a:	611a      	str	r2, [r3, #16]
		break;
 8004e3c:	e041      	b.n	8004ec2 <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004e4c:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e5c:	611a      	str	r2, [r3, #16]
		break;
 8004e5e:	e030      	b.n	8004ec2 <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	691a      	ldr	r2, [r3, #16]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004e6e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e7e:	611a      	str	r2, [r3, #16]
		break;
 8004e80:	e01f      	b.n	8004ec2 <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	691a      	ldr	r2, [r3, #16]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004e90:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004ea0:	611a      	str	r2, [r3, #16]
		break;
 8004ea2:	e00e      	b.n	8004ec2 <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004eb2:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	6912      	ldr	r2, [r2, #16]
 8004ebe:	611a      	str	r2, [r3, #16]
		break;
 8004ec0:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	4a21      	ldr	r2, [pc, #132]	; (8004f50 <USART_Config+0x258>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d104      	bne.n	8004eda <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8004ed0:	f7ff fb82 	bl	80045d8 <getClockAPB1>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	73fb      	strb	r3, [r7, #15]
 8004ed8:	e003      	b.n	8004ee2 <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 8004eda:	f7ff fb61 	bl	80045a0 <getConfigPLL>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	785b      	ldrb	r3, [r3, #1]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10b      	bne.n	8004f02 <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
 8004eec:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 f91f 	bl	8005134 <getValueBaudRate>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	461a      	mov	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	609a      	str	r2, [r3, #8]
 8004f00:	e02f      	b.n	8004f62 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	785b      	ldrb	r3, [r3, #1]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d10b      	bne.n	8004f22 <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
 8004f0c:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 f90f 	bl	8005134 <getValueBaudRate>
 8004f16:	4603      	mov	r3, r0
 8004f18:	461a      	mov	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	609a      	str	r2, [r3, #8]
 8004f20:	e01f      	b.n	8004f62 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	785b      	ldrb	r3, [r3, #1]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d11a      	bne.n	8004f60 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
 8004f2c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 f8ff 	bl	8005134 <getValueBaudRate>
 8004f36:	4603      	mov	r3, r0
 8004f38:	461a      	mov	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	609a      	str	r2, [r3, #8]
 8004f40:	e00f      	b.n	8004f62 <USART_Config+0x26a>
 8004f42:	bf00      	nop
 8004f44:	40011000 	.word	0x40011000
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	200004f0 	.word	0x200004f0
 8004f50:	40004400 	.word	0x40004400
 8004f54:	200004f4 	.word	0x200004f4
 8004f58:	40011400 	.word	0x40011400
 8004f5c:	200004f8 	.word	0x200004f8
	}
	else
	{
		__NOP();
 8004f60:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d866      	bhi.n	8005038 <USART_Config+0x340>
 8004f6a:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <USART_Config+0x278>)
 8004f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f70:	08004f81 	.word	0x08004f81
 8004f74:	08004fa3 	.word	0x08004fa3
 8004f78:	08004fc5 	.word	0x08004fc5
 8004f7c:	08005007 	.word	0x08005007
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f022 0208 	bic.w	r2, r2, #8
 8004f8e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f042 0208 	orr.w	r2, r2, #8
 8004f9e:	60da      	str	r2, [r3, #12]

		break;
 8004fa0:	e063      	b.n	800506a <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	68da      	ldr	r2, [r3, #12]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f022 0204 	bic.w	r2, r2, #4
 8004fb0:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f042 0204 	orr.w	r2, r2, #4
 8004fc0:	60da      	str	r2, [r3, #12]

		break;
 8004fc2:	e052      	b.n	800506a <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f022 0208 	bic.w	r2, r2, #8
 8004fd2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f042 0208 	orr.w	r2, r2, #8
 8004fe2:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f022 0204 	bic.w	r2, r2, #4
 8004ff2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f042 0204 	orr.w	r2, r2, #4
 8005002:	60da      	str	r2, [r3, #12]


		break;
 8005004:	e031      	b.n	800506a <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	68da      	ldr	r2, [r3, #12]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005014:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f022 0208 	bic.w	r2, r2, #8
 8005024:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f022 0204 	bic.w	r2, r2, #4
 8005034:	60da      	str	r2, [r3, #12]
		break;
 8005036:	e018      	b.n	800506a <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005046:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f022 0208 	bic.w	r2, r2, #8
 8005056:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f022 0204 	bic.w	r2, r2, #4
 8005066:	60da      	str	r2, [r3, #12]
		break;
 8005068:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 800506a:	b672      	cpsid	i
}
 800506c:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	791b      	ldrb	r3, [r3, #4]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d110      	bne.n	8005098 <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f022 0220 	bic.w	r2, r2, #32
 8005084:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f042 0220 	orr.w	r2, r2, #32
 8005094:	60da      	str	r2, [r3, #12]
 8005096:	e007      	b.n	80050a8 <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f022 0220 	bic.w	r2, r2, #32
 80050a6:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	791b      	ldrb	r3, [r3, #4]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d003      	beq.n	80050b8 <USART_Config+0x3c0>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	795b      	ldrb	r3, [r3, #5]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d11a      	bne.n	80050ee <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	4a1a      	ldr	r2, [pc, #104]	; (8005128 <USART_Config+0x430>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d103      	bne.n	80050ca <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 80050c2:	2025      	movs	r0, #37	; 0x25
 80050c4:	f7ff fdfa 	bl	8004cbc <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80050c8:	e013      	b.n	80050f2 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	4a17      	ldr	r2, [pc, #92]	; (800512c <USART_Config+0x434>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d103      	bne.n	80050dc <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 80050d4:	2026      	movs	r0, #38	; 0x26
 80050d6:	f7ff fdf1 	bl	8004cbc <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80050da:	e00a      	b.n	80050f2 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	4a13      	ldr	r2, [pc, #76]	; (8005130 <USART_Config+0x438>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d105      	bne.n	80050f2 <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 80050e6:	2047      	movs	r0, #71	; 0x47
 80050e8:	f7ff fde8 	bl	8004cbc <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80050ec:	e001      	b.n	80050f2 <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 80050ee:	bf00      	nop
 80050f0:	e000      	b.n	80050f4 <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80050f2:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80050f4:	b662      	cpsie	i
}
 80050f6:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	d00f      	beq.n	8005120 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800510e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800511e:	60da      	str	r2, [r3, #12]
	}
}
 8005120:	bf00      	nop
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	40011000 	.word	0x40011000
 800512c:	40004400 	.word	0x40004400
 8005130:	40011400 	.word	0x40011400

08005134 <getValueBaudRate>:

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 8005134:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005138:	b086      	sub	sp, #24
 800513a:	af00      	add	r7, sp, #0
 800513c:	6039      	str	r1, [r7, #0]
 800513e:	4601      	mov	r1, r0
 8005140:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 8005142:	79f9      	ldrb	r1, [r7, #7]
 8005144:	2000      	movs	r0, #0
 8005146:	460a      	mov	r2, r1
 8005148:	4603      	mov	r3, r0
 800514a:	491f      	ldr	r1, [pc, #124]	; (80051c8 <getValueBaudRate+0x94>)
 800514c:	fb01 f003 	mul.w	r0, r1, r3
 8005150:	2102      	movs	r1, #2
 8005152:	fb02 f101 	mul.w	r1, r2, r1
 8005156:	4401      	add	r1, r0
 8005158:	481b      	ldr	r0, [pc, #108]	; (80051c8 <getValueBaudRate+0x94>)
 800515a:	fba2 4500 	umull	r4, r5, r2, r0
 800515e:	194b      	adds	r3, r1, r5
 8005160:	461d      	mov	r5, r3
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	2200      	movs	r2, #0
 8005168:	4698      	mov	r8, r3
 800516a:	4691      	mov	r9, r2
 800516c:	4642      	mov	r2, r8
 800516e:	464b      	mov	r3, r9
 8005170:	4620      	mov	r0, r4
 8005172:	4629      	mov	r1, r5
 8005174:	f7fb fda0 	bl	8000cb8 <__aeabi_ldivmod>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4613      	mov	r3, r2
 800517e:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	4a12      	ldr	r2, [pc, #72]	; (80051cc <getValueBaudRate+0x98>)
 8005184:	fba2 2303 	umull	r2, r3, r2, r3
 8005188:	0b5b      	lsrs	r3, r3, #13
 800518a:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005192:	fb02 f303 	mul.w	r3, r2, r3
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80051a2:	4a0a      	ldr	r2, [pc, #40]	; (80051cc <getValueBaudRate+0x98>)
 80051a4:	fba2 2303 	umull	r2, r3, r2, r3
 80051a8:	0a5b      	lsrs	r3, r3, #9
 80051aa:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	7afb      	ldrb	r3, [r7, #11]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	4313      	orrs	r3, r2
 80051ba:	813b      	strh	r3, [r7, #8]

    return value;
 80051bc:	893b      	ldrh	r3, [r7, #8]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80051c8:	540be400 	.word	0x540be400
 80051cc:	d1b71759 	.word	0xd1b71759

080051d0 <writeMsgForTXE>:
	}
}

//Funcion para escribir un string
void writeMsgForTXE(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
	if (posChar == 0 && inLineTxe == 0)
 80051da:	4b16      	ldr	r3, [pc, #88]	; (8005234 <writeMsgForTXE+0x64>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d111      	bne.n	8005206 <writeMsgForTXE+0x36>
 80051e2:	4b15      	ldr	r3, [pc, #84]	; (8005238 <writeMsgForTXE+0x68>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10d      	bne.n	8005206 <writeMsgForTXE+0x36>
	{
		//Guardamos el string que se desea enviar en un arreglo
		sprintf(bufferMsgForTXE, MsgtoSend);
 80051ea:	6839      	ldr	r1, [r7, #0]
 80051ec:	4813      	ldr	r0, [pc, #76]	; (800523c <writeMsgForTXE+0x6c>)
 80051ee:	f001 f8a9 	bl	8006344 <siprintf>
		//cambiamos el tipo
		typeWriteTXE = 1;
 80051f2:	4b13      	ldr	r3, [pc, #76]	; (8005240 <writeMsgForTXE+0x70>)
 80051f4:	2201      	movs	r2, #1
 80051f6:	701a      	strb	r2, [r3, #0]
		//Activo la interrupcion
		interruptionTX(ptrUsartHandlerString->ptrUSARTx, USART_TX_INTERRUP_ENABLE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	2101      	movs	r1, #1
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 f830 	bl	8005264 <interruptionTX>
 8005204:	e012      	b.n	800522c <writeMsgForTXE+0x5c>
	}
	else
	{
		sprintf(bufferMsgForTXE_inLine[inLine], MsgtoSend);
 8005206:	4b0f      	ldr	r3, [pc, #60]	; (8005244 <writeMsgForTXE+0x74>)
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	461a      	mov	r2, r3
 800520c:	2364      	movs	r3, #100	; 0x64
 800520e:	fb02 f303 	mul.w	r3, r2, r3
 8005212:	4a0d      	ldr	r2, [pc, #52]	; (8005248 <writeMsgForTXE+0x78>)
 8005214:	4413      	add	r3, r2
 8005216:	6839      	ldr	r1, [r7, #0]
 8005218:	4618      	mov	r0, r3
 800521a:	f001 f893 	bl	8006344 <siprintf>
		inLine++;
 800521e:	4b09      	ldr	r3, [pc, #36]	; (8005244 <writeMsgForTXE+0x74>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	3301      	adds	r3, #1
 8005224:	b2da      	uxtb	r2, r3
 8005226:	4b07      	ldr	r3, [pc, #28]	; (8005244 <writeMsgForTXE+0x74>)
 8005228:	701a      	strb	r2, [r3, #0]
	}
}
 800522a:	bf00      	nop
 800522c:	bf00      	nop
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	20000d36 	.word	0x20000d36
 8005238:	20000d35 	.word	0x20000d35
 800523c:	20000500 	.word	0x20000500
 8005240:	20000d37 	.word	0x20000d37
 8005244:	20000d34 	.word	0x20000d34
 8005248:	20000564 	.word	0x20000564

0800524c <getRxData>:

//Funcion para leer un char
uint8_t getRxData(void)
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
	return auxRxData;
 8005250:	4b03      	ldr	r3, [pc, #12]	; (8005260 <getRxData+0x14>)
 8005252:	781b      	ldrb	r3, [r3, #0]
}
 8005254:	4618      	mov	r0, r3
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	200004fc 	.word	0x200004fc

08005264 <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	460b      	mov	r3, r1
 800526e:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 8005270:	78fb      	ldrb	r3, [r7, #3]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d10c      	bne.n	8005290 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 800528e:	e005      	b.n	800529c <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	60da      	str	r2, [r3, #12]
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <BasicUSART2_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART2_Callback()
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
	__NOP();
 80052ac:	bf00      	nop
}
 80052ae:	bf00      	nop
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <BasicUSART6_Callback>:


__attribute__((weak)) void BasicUSART6_Callback()
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
	__NOP();
 80052bc:	bf00      	nop
}
 80052be:	bf00      	nop
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 80052cc:	4b37      	ldr	r3, [pc, #220]	; (80053ac <USART1_IRQHandler+0xe4>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0320 	and.w	r3, r3, #32
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d008      	beq.n	80052ec <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 80052da:	4b34      	ldr	r3, [pc, #208]	; (80053ac <USART1_IRQHandler+0xe4>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	4b33      	ldr	r3, [pc, #204]	; (80053b0 <USART1_IRQHandler+0xe8>)
 80052e4:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 80052e6:	f7fc fdc5 	bl	8001e74 <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 80052ea:	e05d      	b.n	80053a8 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 80052ec:	4b2f      	ldr	r3, [pc, #188]	; (80053ac <USART1_IRQHandler+0xe4>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d055      	beq.n	80053a6 <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80052fa:	4b2e      	ldr	r3, [pc, #184]	; (80053b4 <USART1_IRQHandler+0xec>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10b      	bne.n	800531a <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 8005302:	4b2d      	ldr	r3, [pc, #180]	; (80053b8 <USART1_IRQHandler+0xf0>)
 8005304:	781a      	ldrb	r2, [r3, #0]
 8005306:	4b29      	ldr	r3, [pc, #164]	; (80053ac <USART1_IRQHandler+0xe4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 800530c:	4b27      	ldr	r3, [pc, #156]	; (80053ac <USART1_IRQHandler+0xe4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2100      	movs	r1, #0
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff ffa6 	bl	8005264 <interruptionTX>
}
 8005318:	e046      	b.n	80053a8 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800531a:	4b26      	ldr	r3, [pc, #152]	; (80053b4 <USART1_IRQHandler+0xec>)
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d142      	bne.n	80053a8 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8005322:	4b26      	ldr	r3, [pc, #152]	; (80053bc <USART1_IRQHandler+0xf4>)
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	461a      	mov	r2, r3
 8005328:	4b25      	ldr	r3, [pc, #148]	; (80053c0 <USART1_IRQHandler+0xf8>)
 800532a:	5c9b      	ldrb	r3, [r3, r2]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00e      	beq.n	800534e <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 8005330:	4b22      	ldr	r3, [pc, #136]	; (80053bc <USART1_IRQHandler+0xf4>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	461a      	mov	r2, r3
 8005336:	4b22      	ldr	r3, [pc, #136]	; (80053c0 <USART1_IRQHandler+0xf8>)
 8005338:	5c9a      	ldrb	r2, [r3, r2]
 800533a:	4b1c      	ldr	r3, [pc, #112]	; (80053ac <USART1_IRQHandler+0xe4>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	605a      	str	r2, [r3, #4]
				posChar++;
 8005340:	4b1e      	ldr	r3, [pc, #120]	; (80053bc <USART1_IRQHandler+0xf4>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	3301      	adds	r3, #1
 8005346:	b2da      	uxtb	r2, r3
 8005348:	4b1c      	ldr	r3, [pc, #112]	; (80053bc <USART1_IRQHandler+0xf4>)
 800534a:	701a      	strb	r2, [r3, #0]
}
 800534c:	e02c      	b.n	80053a8 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 800534e:	4b1d      	ldr	r3, [pc, #116]	; (80053c4 <USART1_IRQHandler+0xfc>)
 8005350:	781a      	ldrb	r2, [r3, #0]
 8005352:	4b1d      	ldr	r3, [pc, #116]	; (80053c8 <USART1_IRQHandler+0x100>)
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d215      	bcs.n	8005386 <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800535a:	4b1a      	ldr	r3, [pc, #104]	; (80053c4 <USART1_IRQHandler+0xfc>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	2364      	movs	r3, #100	; 0x64
 8005362:	fb02 f303 	mul.w	r3, r2, r3
 8005366:	4a19      	ldr	r2, [pc, #100]	; (80053cc <USART1_IRQHandler+0x104>)
 8005368:	4413      	add	r3, r2
 800536a:	4619      	mov	r1, r3
 800536c:	4814      	ldr	r0, [pc, #80]	; (80053c0 <USART1_IRQHandler+0xf8>)
 800536e:	f000 ffe9 	bl	8006344 <siprintf>
					posChar = 0;
 8005372:	4b12      	ldr	r3, [pc, #72]	; (80053bc <USART1_IRQHandler+0xf4>)
 8005374:	2200      	movs	r2, #0
 8005376:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8005378:	4b12      	ldr	r3, [pc, #72]	; (80053c4 <USART1_IRQHandler+0xfc>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	3301      	adds	r3, #1
 800537e:	b2da      	uxtb	r2, r3
 8005380:	4b10      	ldr	r3, [pc, #64]	; (80053c4 <USART1_IRQHandler+0xfc>)
 8005382:	701a      	strb	r2, [r3, #0]
}
 8005384:	e010      	b.n	80053a8 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8005386:	4b09      	ldr	r3, [pc, #36]	; (80053ac <USART1_IRQHandler+0xe4>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2100      	movs	r1, #0
 800538c:	4618      	mov	r0, r3
 800538e:	f7ff ff69 	bl	8005264 <interruptionTX>
					posChar = 0;
 8005392:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <USART1_IRQHandler+0xf4>)
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8005398:	4b0a      	ldr	r3, [pc, #40]	; (80053c4 <USART1_IRQHandler+0xfc>)
 800539a:	2200      	movs	r2, #0
 800539c:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800539e:	4b0a      	ldr	r3, [pc, #40]	; (80053c8 <USART1_IRQHandler+0x100>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	701a      	strb	r2, [r3, #0]
}
 80053a4:	e000      	b.n	80053a8 <USART1_IRQHandler+0xe0>
		__NOP();
 80053a6:	bf00      	nop
}
 80053a8:	bf00      	nop
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	200004f0 	.word	0x200004f0
 80053b0:	200004fc 	.word	0x200004fc
 80053b4:	20000d37 	.word	0x20000d37
 80053b8:	200004fd 	.word	0x200004fd
 80053bc:	20000d36 	.word	0x20000d36
 80053c0:	20000500 	.word	0x20000500
 80053c4:	20000d35 	.word	0x20000d35
 80053c8:	20000d34 	.word	0x20000d34
 80053cc:	20000564 	.word	0x20000564

080053d0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 80053d4:	4b37      	ldr	r3, [pc, #220]	; (80054b4 <USART2_IRQHandler+0xe4>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d008      	beq.n	80053f4 <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 80053e2:	4b34      	ldr	r3, [pc, #208]	; (80054b4 <USART2_IRQHandler+0xe4>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	4b33      	ldr	r3, [pc, #204]	; (80054b8 <USART2_IRQHandler+0xe8>)
 80053ec:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 80053ee:	f7ff ff5b 	bl	80052a8 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 80053f2:	e05d      	b.n	80054b0 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 80053f4:	4b2f      	ldr	r3, [pc, #188]	; (80054b4 <USART2_IRQHandler+0xe4>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d055      	beq.n	80054ae <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8005402:	4b2e      	ldr	r3, [pc, #184]	; (80054bc <USART2_IRQHandler+0xec>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10b      	bne.n	8005422 <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 800540a:	4b2d      	ldr	r3, [pc, #180]	; (80054c0 <USART2_IRQHandler+0xf0>)
 800540c:	781a      	ldrb	r2, [r3, #0]
 800540e:	4b29      	ldr	r3, [pc, #164]	; (80054b4 <USART2_IRQHandler+0xe4>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8005414:	4b27      	ldr	r3, [pc, #156]	; (80054b4 <USART2_IRQHandler+0xe4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2100      	movs	r1, #0
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff ff22 	bl	8005264 <interruptionTX>
}
 8005420:	e046      	b.n	80054b0 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8005422:	4b26      	ldr	r3, [pc, #152]	; (80054bc <USART2_IRQHandler+0xec>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d142      	bne.n	80054b0 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 800542a:	4b26      	ldr	r3, [pc, #152]	; (80054c4 <USART2_IRQHandler+0xf4>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	4b25      	ldr	r3, [pc, #148]	; (80054c8 <USART2_IRQHandler+0xf8>)
 8005432:	5c9b      	ldrb	r3, [r3, r2]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00e      	beq.n	8005456 <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 8005438:	4b22      	ldr	r3, [pc, #136]	; (80054c4 <USART2_IRQHandler+0xf4>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	461a      	mov	r2, r3
 800543e:	4b22      	ldr	r3, [pc, #136]	; (80054c8 <USART2_IRQHandler+0xf8>)
 8005440:	5c9a      	ldrb	r2, [r3, r2]
 8005442:	4b1c      	ldr	r3, [pc, #112]	; (80054b4 <USART2_IRQHandler+0xe4>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	605a      	str	r2, [r3, #4]
				posChar++;
 8005448:	4b1e      	ldr	r3, [pc, #120]	; (80054c4 <USART2_IRQHandler+0xf4>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	3301      	adds	r3, #1
 800544e:	b2da      	uxtb	r2, r3
 8005450:	4b1c      	ldr	r3, [pc, #112]	; (80054c4 <USART2_IRQHandler+0xf4>)
 8005452:	701a      	strb	r2, [r3, #0]
}
 8005454:	e02c      	b.n	80054b0 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8005456:	4b1d      	ldr	r3, [pc, #116]	; (80054cc <USART2_IRQHandler+0xfc>)
 8005458:	781a      	ldrb	r2, [r3, #0]
 800545a:	4b1d      	ldr	r3, [pc, #116]	; (80054d0 <USART2_IRQHandler+0x100>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	429a      	cmp	r2, r3
 8005460:	d215      	bcs.n	800548e <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8005462:	4b1a      	ldr	r3, [pc, #104]	; (80054cc <USART2_IRQHandler+0xfc>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	2364      	movs	r3, #100	; 0x64
 800546a:	fb02 f303 	mul.w	r3, r2, r3
 800546e:	4a19      	ldr	r2, [pc, #100]	; (80054d4 <USART2_IRQHandler+0x104>)
 8005470:	4413      	add	r3, r2
 8005472:	4619      	mov	r1, r3
 8005474:	4814      	ldr	r0, [pc, #80]	; (80054c8 <USART2_IRQHandler+0xf8>)
 8005476:	f000 ff65 	bl	8006344 <siprintf>
					posChar = 0;
 800547a:	4b12      	ldr	r3, [pc, #72]	; (80054c4 <USART2_IRQHandler+0xf4>)
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8005480:	4b12      	ldr	r3, [pc, #72]	; (80054cc <USART2_IRQHandler+0xfc>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	3301      	adds	r3, #1
 8005486:	b2da      	uxtb	r2, r3
 8005488:	4b10      	ldr	r3, [pc, #64]	; (80054cc <USART2_IRQHandler+0xfc>)
 800548a:	701a      	strb	r2, [r3, #0]
}
 800548c:	e010      	b.n	80054b0 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 800548e:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <USART2_IRQHandler+0xe4>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2100      	movs	r1, #0
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff fee5 	bl	8005264 <interruptionTX>
					posChar = 0;
 800549a:	4b0a      	ldr	r3, [pc, #40]	; (80054c4 <USART2_IRQHandler+0xf4>)
 800549c:	2200      	movs	r2, #0
 800549e:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 80054a0:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <USART2_IRQHandler+0xfc>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 80054a6:	4b0a      	ldr	r3, [pc, #40]	; (80054d0 <USART2_IRQHandler+0x100>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]
}
 80054ac:	e000      	b.n	80054b0 <USART2_IRQHandler+0xe0>
		__NOP();
 80054ae:	bf00      	nop
}
 80054b0:	bf00      	nop
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	200004f4 	.word	0x200004f4
 80054b8:	200004fc 	.word	0x200004fc
 80054bc:	20000d37 	.word	0x20000d37
 80054c0:	200004fd 	.word	0x200004fd
 80054c4:	20000d36 	.word	0x20000d36
 80054c8:	20000500 	.word	0x20000500
 80054cc:	20000d35 	.word	0x20000d35
 80054d0:	20000d34 	.word	0x20000d34
 80054d4:	20000564 	.word	0x20000564

080054d8 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 80054dc:	4b37      	ldr	r3, [pc, #220]	; (80055bc <USART6_IRQHandler+0xe4>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0320 	and.w	r3, r3, #32
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d008      	beq.n	80054fc <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 80054ea:	4b34      	ldr	r3, [pc, #208]	; (80055bc <USART6_IRQHandler+0xe4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	4b33      	ldr	r3, [pc, #204]	; (80055c0 <USART6_IRQHandler+0xe8>)
 80054f4:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 80054f6:	f7ff fedf 	bl	80052b8 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 80054fa:	e05d      	b.n	80055b8 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 80054fc:	4b2f      	ldr	r3, [pc, #188]	; (80055bc <USART6_IRQHandler+0xe4>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005506:	2b00      	cmp	r3, #0
 8005508:	d055      	beq.n	80055b6 <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800550a:	4b2e      	ldr	r3, [pc, #184]	; (80055c4 <USART6_IRQHandler+0xec>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10b      	bne.n	800552a <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 8005512:	4b2d      	ldr	r3, [pc, #180]	; (80055c8 <USART6_IRQHandler+0xf0>)
 8005514:	781a      	ldrb	r2, [r3, #0]
 8005516:	4b29      	ldr	r3, [pc, #164]	; (80055bc <USART6_IRQHandler+0xe4>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 800551c:	4b27      	ldr	r3, [pc, #156]	; (80055bc <USART6_IRQHandler+0xe4>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2100      	movs	r1, #0
 8005522:	4618      	mov	r0, r3
 8005524:	f7ff fe9e 	bl	8005264 <interruptionTX>
}
 8005528:	e046      	b.n	80055b8 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800552a:	4b26      	ldr	r3, [pc, #152]	; (80055c4 <USART6_IRQHandler+0xec>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d142      	bne.n	80055b8 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8005532:	4b26      	ldr	r3, [pc, #152]	; (80055cc <USART6_IRQHandler+0xf4>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	4b25      	ldr	r3, [pc, #148]	; (80055d0 <USART6_IRQHandler+0xf8>)
 800553a:	5c9b      	ldrb	r3, [r3, r2]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00e      	beq.n	800555e <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 8005540:	4b22      	ldr	r3, [pc, #136]	; (80055cc <USART6_IRQHandler+0xf4>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	461a      	mov	r2, r3
 8005546:	4b22      	ldr	r3, [pc, #136]	; (80055d0 <USART6_IRQHandler+0xf8>)
 8005548:	5c9a      	ldrb	r2, [r3, r2]
 800554a:	4b1c      	ldr	r3, [pc, #112]	; (80055bc <USART6_IRQHandler+0xe4>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	605a      	str	r2, [r3, #4]
				posChar++;
 8005550:	4b1e      	ldr	r3, [pc, #120]	; (80055cc <USART6_IRQHandler+0xf4>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	3301      	adds	r3, #1
 8005556:	b2da      	uxtb	r2, r3
 8005558:	4b1c      	ldr	r3, [pc, #112]	; (80055cc <USART6_IRQHandler+0xf4>)
 800555a:	701a      	strb	r2, [r3, #0]
}
 800555c:	e02c      	b.n	80055b8 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 800555e:	4b1d      	ldr	r3, [pc, #116]	; (80055d4 <USART6_IRQHandler+0xfc>)
 8005560:	781a      	ldrb	r2, [r3, #0]
 8005562:	4b1d      	ldr	r3, [pc, #116]	; (80055d8 <USART6_IRQHandler+0x100>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	429a      	cmp	r2, r3
 8005568:	d215      	bcs.n	8005596 <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800556a:	4b1a      	ldr	r3, [pc, #104]	; (80055d4 <USART6_IRQHandler+0xfc>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	2364      	movs	r3, #100	; 0x64
 8005572:	fb02 f303 	mul.w	r3, r2, r3
 8005576:	4a19      	ldr	r2, [pc, #100]	; (80055dc <USART6_IRQHandler+0x104>)
 8005578:	4413      	add	r3, r2
 800557a:	4619      	mov	r1, r3
 800557c:	4814      	ldr	r0, [pc, #80]	; (80055d0 <USART6_IRQHandler+0xf8>)
 800557e:	f000 fee1 	bl	8006344 <siprintf>
					posChar = 0;
 8005582:	4b12      	ldr	r3, [pc, #72]	; (80055cc <USART6_IRQHandler+0xf4>)
 8005584:	2200      	movs	r2, #0
 8005586:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8005588:	4b12      	ldr	r3, [pc, #72]	; (80055d4 <USART6_IRQHandler+0xfc>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	3301      	adds	r3, #1
 800558e:	b2da      	uxtb	r2, r3
 8005590:	4b10      	ldr	r3, [pc, #64]	; (80055d4 <USART6_IRQHandler+0xfc>)
 8005592:	701a      	strb	r2, [r3, #0]
}
 8005594:	e010      	b.n	80055b8 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8005596:	4b09      	ldr	r3, [pc, #36]	; (80055bc <USART6_IRQHandler+0xe4>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2100      	movs	r1, #0
 800559c:	4618      	mov	r0, r3
 800559e:	f7ff fe61 	bl	8005264 <interruptionTX>
					posChar = 0;
 80055a2:	4b0a      	ldr	r3, [pc, #40]	; (80055cc <USART6_IRQHandler+0xf4>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 80055a8:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <USART6_IRQHandler+0xfc>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 80055ae:	4b0a      	ldr	r3, [pc, #40]	; (80055d8 <USART6_IRQHandler+0x100>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	701a      	strb	r2, [r3, #0]
}
 80055b4:	e000      	b.n	80055b8 <USART6_IRQHandler+0xe0>
		__NOP();
 80055b6:	bf00      	nop
}
 80055b8:	bf00      	nop
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	200004f8 	.word	0x200004f8
 80055c0:	200004fc 	.word	0x200004fc
 80055c4:	20000d37 	.word	0x20000d37
 80055c8:	200004fd 	.word	0x200004fd
 80055cc:	20000d36 	.word	0x20000d36
 80055d0:	20000500 	.word	0x20000500
 80055d4:	20000d35 	.word	0x20000d35
 80055d8:	20000d34 	.word	0x20000d34
 80055dc:	20000564 	.word	0x20000564

080055e0 <__errno>:
 80055e0:	4b01      	ldr	r3, [pc, #4]	; (80055e8 <__errno+0x8>)
 80055e2:	6818      	ldr	r0, [r3, #0]
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	20000018 	.word	0x20000018

080055ec <__libc_init_array>:
 80055ec:	b570      	push	{r4, r5, r6, lr}
 80055ee:	4d0d      	ldr	r5, [pc, #52]	; (8005624 <__libc_init_array+0x38>)
 80055f0:	4c0d      	ldr	r4, [pc, #52]	; (8005628 <__libc_init_array+0x3c>)
 80055f2:	1b64      	subs	r4, r4, r5
 80055f4:	10a4      	asrs	r4, r4, #2
 80055f6:	2600      	movs	r6, #0
 80055f8:	42a6      	cmp	r6, r4
 80055fa:	d109      	bne.n	8005610 <__libc_init_array+0x24>
 80055fc:	4d0b      	ldr	r5, [pc, #44]	; (800562c <__libc_init_array+0x40>)
 80055fe:	4c0c      	ldr	r4, [pc, #48]	; (8005630 <__libc_init_array+0x44>)
 8005600:	f006 fde0 	bl	800c1c4 <_init>
 8005604:	1b64      	subs	r4, r4, r5
 8005606:	10a4      	asrs	r4, r4, #2
 8005608:	2600      	movs	r6, #0
 800560a:	42a6      	cmp	r6, r4
 800560c:	d105      	bne.n	800561a <__libc_init_array+0x2e>
 800560e:	bd70      	pop	{r4, r5, r6, pc}
 8005610:	f855 3b04 	ldr.w	r3, [r5], #4
 8005614:	4798      	blx	r3
 8005616:	3601      	adds	r6, #1
 8005618:	e7ee      	b.n	80055f8 <__libc_init_array+0xc>
 800561a:	f855 3b04 	ldr.w	r3, [r5], #4
 800561e:	4798      	blx	r3
 8005620:	3601      	adds	r6, #1
 8005622:	e7f2      	b.n	800560a <__libc_init_array+0x1e>
 8005624:	0800cca8 	.word	0x0800cca8
 8005628:	0800cca8 	.word	0x0800cca8
 800562c:	0800cca8 	.word	0x0800cca8
 8005630:	0800ccac 	.word	0x0800ccac

08005634 <memset>:
 8005634:	4402      	add	r2, r0
 8005636:	4603      	mov	r3, r0
 8005638:	4293      	cmp	r3, r2
 800563a:	d100      	bne.n	800563e <memset+0xa>
 800563c:	4770      	bx	lr
 800563e:	f803 1b01 	strb.w	r1, [r3], #1
 8005642:	e7f9      	b.n	8005638 <memset+0x4>

08005644 <__cvt>:
 8005644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005648:	ec55 4b10 	vmov	r4, r5, d0
 800564c:	2d00      	cmp	r5, #0
 800564e:	460e      	mov	r6, r1
 8005650:	4619      	mov	r1, r3
 8005652:	462b      	mov	r3, r5
 8005654:	bfbb      	ittet	lt
 8005656:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800565a:	461d      	movlt	r5, r3
 800565c:	2300      	movge	r3, #0
 800565e:	232d      	movlt	r3, #45	; 0x2d
 8005660:	700b      	strb	r3, [r1, #0]
 8005662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005664:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005668:	4691      	mov	r9, r2
 800566a:	f023 0820 	bic.w	r8, r3, #32
 800566e:	bfbc      	itt	lt
 8005670:	4622      	movlt	r2, r4
 8005672:	4614      	movlt	r4, r2
 8005674:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005678:	d005      	beq.n	8005686 <__cvt+0x42>
 800567a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800567e:	d100      	bne.n	8005682 <__cvt+0x3e>
 8005680:	3601      	adds	r6, #1
 8005682:	2102      	movs	r1, #2
 8005684:	e000      	b.n	8005688 <__cvt+0x44>
 8005686:	2103      	movs	r1, #3
 8005688:	ab03      	add	r3, sp, #12
 800568a:	9301      	str	r3, [sp, #4]
 800568c:	ab02      	add	r3, sp, #8
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	ec45 4b10 	vmov	d0, r4, r5
 8005694:	4653      	mov	r3, sl
 8005696:	4632      	mov	r2, r6
 8005698:	f001 fe42 	bl	8007320 <_dtoa_r>
 800569c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80056a0:	4607      	mov	r7, r0
 80056a2:	d102      	bne.n	80056aa <__cvt+0x66>
 80056a4:	f019 0f01 	tst.w	r9, #1
 80056a8:	d022      	beq.n	80056f0 <__cvt+0xac>
 80056aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056ae:	eb07 0906 	add.w	r9, r7, r6
 80056b2:	d110      	bne.n	80056d6 <__cvt+0x92>
 80056b4:	783b      	ldrb	r3, [r7, #0]
 80056b6:	2b30      	cmp	r3, #48	; 0x30
 80056b8:	d10a      	bne.n	80056d0 <__cvt+0x8c>
 80056ba:	2200      	movs	r2, #0
 80056bc:	2300      	movs	r3, #0
 80056be:	4620      	mov	r0, r4
 80056c0:	4629      	mov	r1, r5
 80056c2:	f7fb fa19 	bl	8000af8 <__aeabi_dcmpeq>
 80056c6:	b918      	cbnz	r0, 80056d0 <__cvt+0x8c>
 80056c8:	f1c6 0601 	rsb	r6, r6, #1
 80056cc:	f8ca 6000 	str.w	r6, [sl]
 80056d0:	f8da 3000 	ldr.w	r3, [sl]
 80056d4:	4499      	add	r9, r3
 80056d6:	2200      	movs	r2, #0
 80056d8:	2300      	movs	r3, #0
 80056da:	4620      	mov	r0, r4
 80056dc:	4629      	mov	r1, r5
 80056de:	f7fb fa0b 	bl	8000af8 <__aeabi_dcmpeq>
 80056e2:	b108      	cbz	r0, 80056e8 <__cvt+0xa4>
 80056e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80056e8:	2230      	movs	r2, #48	; 0x30
 80056ea:	9b03      	ldr	r3, [sp, #12]
 80056ec:	454b      	cmp	r3, r9
 80056ee:	d307      	bcc.n	8005700 <__cvt+0xbc>
 80056f0:	9b03      	ldr	r3, [sp, #12]
 80056f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056f4:	1bdb      	subs	r3, r3, r7
 80056f6:	4638      	mov	r0, r7
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	b004      	add	sp, #16
 80056fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005700:	1c59      	adds	r1, r3, #1
 8005702:	9103      	str	r1, [sp, #12]
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	e7f0      	b.n	80056ea <__cvt+0xa6>

08005708 <__exponent>:
 8005708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800570a:	4603      	mov	r3, r0
 800570c:	2900      	cmp	r1, #0
 800570e:	bfb8      	it	lt
 8005710:	4249      	neglt	r1, r1
 8005712:	f803 2b02 	strb.w	r2, [r3], #2
 8005716:	bfb4      	ite	lt
 8005718:	222d      	movlt	r2, #45	; 0x2d
 800571a:	222b      	movge	r2, #43	; 0x2b
 800571c:	2909      	cmp	r1, #9
 800571e:	7042      	strb	r2, [r0, #1]
 8005720:	dd2a      	ble.n	8005778 <__exponent+0x70>
 8005722:	f10d 0407 	add.w	r4, sp, #7
 8005726:	46a4      	mov	ip, r4
 8005728:	270a      	movs	r7, #10
 800572a:	46a6      	mov	lr, r4
 800572c:	460a      	mov	r2, r1
 800572e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005732:	fb07 1516 	mls	r5, r7, r6, r1
 8005736:	3530      	adds	r5, #48	; 0x30
 8005738:	2a63      	cmp	r2, #99	; 0x63
 800573a:	f104 34ff 	add.w	r4, r4, #4294967295
 800573e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005742:	4631      	mov	r1, r6
 8005744:	dcf1      	bgt.n	800572a <__exponent+0x22>
 8005746:	3130      	adds	r1, #48	; 0x30
 8005748:	f1ae 0502 	sub.w	r5, lr, #2
 800574c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005750:	1c44      	adds	r4, r0, #1
 8005752:	4629      	mov	r1, r5
 8005754:	4561      	cmp	r1, ip
 8005756:	d30a      	bcc.n	800576e <__exponent+0x66>
 8005758:	f10d 0209 	add.w	r2, sp, #9
 800575c:	eba2 020e 	sub.w	r2, r2, lr
 8005760:	4565      	cmp	r5, ip
 8005762:	bf88      	it	hi
 8005764:	2200      	movhi	r2, #0
 8005766:	4413      	add	r3, r2
 8005768:	1a18      	subs	r0, r3, r0
 800576a:	b003      	add	sp, #12
 800576c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800576e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005772:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005776:	e7ed      	b.n	8005754 <__exponent+0x4c>
 8005778:	2330      	movs	r3, #48	; 0x30
 800577a:	3130      	adds	r1, #48	; 0x30
 800577c:	7083      	strb	r3, [r0, #2]
 800577e:	70c1      	strb	r1, [r0, #3]
 8005780:	1d03      	adds	r3, r0, #4
 8005782:	e7f1      	b.n	8005768 <__exponent+0x60>

08005784 <_printf_float>:
 8005784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005788:	ed2d 8b02 	vpush	{d8}
 800578c:	b08d      	sub	sp, #52	; 0x34
 800578e:	460c      	mov	r4, r1
 8005790:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005794:	4616      	mov	r6, r2
 8005796:	461f      	mov	r7, r3
 8005798:	4605      	mov	r5, r0
 800579a:	f002 ff1f 	bl	80085dc <_localeconv_r>
 800579e:	f8d0 a000 	ldr.w	sl, [r0]
 80057a2:	4650      	mov	r0, sl
 80057a4:	f7fa fd26 	bl	80001f4 <strlen>
 80057a8:	2300      	movs	r3, #0
 80057aa:	930a      	str	r3, [sp, #40]	; 0x28
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	9305      	str	r3, [sp, #20]
 80057b0:	f8d8 3000 	ldr.w	r3, [r8]
 80057b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80057b8:	3307      	adds	r3, #7
 80057ba:	f023 0307 	bic.w	r3, r3, #7
 80057be:	f103 0208 	add.w	r2, r3, #8
 80057c2:	f8c8 2000 	str.w	r2, [r8]
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80057ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80057d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80057d6:	9307      	str	r3, [sp, #28]
 80057d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80057dc:	ee08 0a10 	vmov	s16, r0
 80057e0:	4b9f      	ldr	r3, [pc, #636]	; (8005a60 <_printf_float+0x2dc>)
 80057e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057e6:	f04f 32ff 	mov.w	r2, #4294967295
 80057ea:	f7fb f9b7 	bl	8000b5c <__aeabi_dcmpun>
 80057ee:	bb88      	cbnz	r0, 8005854 <_printf_float+0xd0>
 80057f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057f4:	4b9a      	ldr	r3, [pc, #616]	; (8005a60 <_printf_float+0x2dc>)
 80057f6:	f04f 32ff 	mov.w	r2, #4294967295
 80057fa:	f7fb f991 	bl	8000b20 <__aeabi_dcmple>
 80057fe:	bb48      	cbnz	r0, 8005854 <_printf_float+0xd0>
 8005800:	2200      	movs	r2, #0
 8005802:	2300      	movs	r3, #0
 8005804:	4640      	mov	r0, r8
 8005806:	4649      	mov	r1, r9
 8005808:	f7fb f980 	bl	8000b0c <__aeabi_dcmplt>
 800580c:	b110      	cbz	r0, 8005814 <_printf_float+0x90>
 800580e:	232d      	movs	r3, #45	; 0x2d
 8005810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005814:	4b93      	ldr	r3, [pc, #588]	; (8005a64 <_printf_float+0x2e0>)
 8005816:	4894      	ldr	r0, [pc, #592]	; (8005a68 <_printf_float+0x2e4>)
 8005818:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800581c:	bf94      	ite	ls
 800581e:	4698      	movls	r8, r3
 8005820:	4680      	movhi	r8, r0
 8005822:	2303      	movs	r3, #3
 8005824:	6123      	str	r3, [r4, #16]
 8005826:	9b05      	ldr	r3, [sp, #20]
 8005828:	f023 0204 	bic.w	r2, r3, #4
 800582c:	6022      	str	r2, [r4, #0]
 800582e:	f04f 0900 	mov.w	r9, #0
 8005832:	9700      	str	r7, [sp, #0]
 8005834:	4633      	mov	r3, r6
 8005836:	aa0b      	add	r2, sp, #44	; 0x2c
 8005838:	4621      	mov	r1, r4
 800583a:	4628      	mov	r0, r5
 800583c:	f000 f9d8 	bl	8005bf0 <_printf_common>
 8005840:	3001      	adds	r0, #1
 8005842:	f040 8090 	bne.w	8005966 <_printf_float+0x1e2>
 8005846:	f04f 30ff 	mov.w	r0, #4294967295
 800584a:	b00d      	add	sp, #52	; 0x34
 800584c:	ecbd 8b02 	vpop	{d8}
 8005850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005854:	4642      	mov	r2, r8
 8005856:	464b      	mov	r3, r9
 8005858:	4640      	mov	r0, r8
 800585a:	4649      	mov	r1, r9
 800585c:	f7fb f97e 	bl	8000b5c <__aeabi_dcmpun>
 8005860:	b140      	cbz	r0, 8005874 <_printf_float+0xf0>
 8005862:	464b      	mov	r3, r9
 8005864:	2b00      	cmp	r3, #0
 8005866:	bfbc      	itt	lt
 8005868:	232d      	movlt	r3, #45	; 0x2d
 800586a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800586e:	487f      	ldr	r0, [pc, #508]	; (8005a6c <_printf_float+0x2e8>)
 8005870:	4b7f      	ldr	r3, [pc, #508]	; (8005a70 <_printf_float+0x2ec>)
 8005872:	e7d1      	b.n	8005818 <_printf_float+0x94>
 8005874:	6863      	ldr	r3, [r4, #4]
 8005876:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800587a:	9206      	str	r2, [sp, #24]
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	d13f      	bne.n	8005900 <_printf_float+0x17c>
 8005880:	2306      	movs	r3, #6
 8005882:	6063      	str	r3, [r4, #4]
 8005884:	9b05      	ldr	r3, [sp, #20]
 8005886:	6861      	ldr	r1, [r4, #4]
 8005888:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800588c:	2300      	movs	r3, #0
 800588e:	9303      	str	r3, [sp, #12]
 8005890:	ab0a      	add	r3, sp, #40	; 0x28
 8005892:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005896:	ab09      	add	r3, sp, #36	; 0x24
 8005898:	ec49 8b10 	vmov	d0, r8, r9
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	6022      	str	r2, [r4, #0]
 80058a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80058a4:	4628      	mov	r0, r5
 80058a6:	f7ff fecd 	bl	8005644 <__cvt>
 80058aa:	9b06      	ldr	r3, [sp, #24]
 80058ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058ae:	2b47      	cmp	r3, #71	; 0x47
 80058b0:	4680      	mov	r8, r0
 80058b2:	d108      	bne.n	80058c6 <_printf_float+0x142>
 80058b4:	1cc8      	adds	r0, r1, #3
 80058b6:	db02      	blt.n	80058be <_printf_float+0x13a>
 80058b8:	6863      	ldr	r3, [r4, #4]
 80058ba:	4299      	cmp	r1, r3
 80058bc:	dd41      	ble.n	8005942 <_printf_float+0x1be>
 80058be:	f1ab 0b02 	sub.w	fp, fp, #2
 80058c2:	fa5f fb8b 	uxtb.w	fp, fp
 80058c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058ca:	d820      	bhi.n	800590e <_printf_float+0x18a>
 80058cc:	3901      	subs	r1, #1
 80058ce:	465a      	mov	r2, fp
 80058d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058d4:	9109      	str	r1, [sp, #36]	; 0x24
 80058d6:	f7ff ff17 	bl	8005708 <__exponent>
 80058da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058dc:	1813      	adds	r3, r2, r0
 80058de:	2a01      	cmp	r2, #1
 80058e0:	4681      	mov	r9, r0
 80058e2:	6123      	str	r3, [r4, #16]
 80058e4:	dc02      	bgt.n	80058ec <_printf_float+0x168>
 80058e6:	6822      	ldr	r2, [r4, #0]
 80058e8:	07d2      	lsls	r2, r2, #31
 80058ea:	d501      	bpl.n	80058f0 <_printf_float+0x16c>
 80058ec:	3301      	adds	r3, #1
 80058ee:	6123      	str	r3, [r4, #16]
 80058f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d09c      	beq.n	8005832 <_printf_float+0xae>
 80058f8:	232d      	movs	r3, #45	; 0x2d
 80058fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058fe:	e798      	b.n	8005832 <_printf_float+0xae>
 8005900:	9a06      	ldr	r2, [sp, #24]
 8005902:	2a47      	cmp	r2, #71	; 0x47
 8005904:	d1be      	bne.n	8005884 <_printf_float+0x100>
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1bc      	bne.n	8005884 <_printf_float+0x100>
 800590a:	2301      	movs	r3, #1
 800590c:	e7b9      	b.n	8005882 <_printf_float+0xfe>
 800590e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005912:	d118      	bne.n	8005946 <_printf_float+0x1c2>
 8005914:	2900      	cmp	r1, #0
 8005916:	6863      	ldr	r3, [r4, #4]
 8005918:	dd0b      	ble.n	8005932 <_printf_float+0x1ae>
 800591a:	6121      	str	r1, [r4, #16]
 800591c:	b913      	cbnz	r3, 8005924 <_printf_float+0x1a0>
 800591e:	6822      	ldr	r2, [r4, #0]
 8005920:	07d0      	lsls	r0, r2, #31
 8005922:	d502      	bpl.n	800592a <_printf_float+0x1a6>
 8005924:	3301      	adds	r3, #1
 8005926:	440b      	add	r3, r1
 8005928:	6123      	str	r3, [r4, #16]
 800592a:	65a1      	str	r1, [r4, #88]	; 0x58
 800592c:	f04f 0900 	mov.w	r9, #0
 8005930:	e7de      	b.n	80058f0 <_printf_float+0x16c>
 8005932:	b913      	cbnz	r3, 800593a <_printf_float+0x1b6>
 8005934:	6822      	ldr	r2, [r4, #0]
 8005936:	07d2      	lsls	r2, r2, #31
 8005938:	d501      	bpl.n	800593e <_printf_float+0x1ba>
 800593a:	3302      	adds	r3, #2
 800593c:	e7f4      	b.n	8005928 <_printf_float+0x1a4>
 800593e:	2301      	movs	r3, #1
 8005940:	e7f2      	b.n	8005928 <_printf_float+0x1a4>
 8005942:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005948:	4299      	cmp	r1, r3
 800594a:	db05      	blt.n	8005958 <_printf_float+0x1d4>
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	6121      	str	r1, [r4, #16]
 8005950:	07d8      	lsls	r0, r3, #31
 8005952:	d5ea      	bpl.n	800592a <_printf_float+0x1a6>
 8005954:	1c4b      	adds	r3, r1, #1
 8005956:	e7e7      	b.n	8005928 <_printf_float+0x1a4>
 8005958:	2900      	cmp	r1, #0
 800595a:	bfd4      	ite	le
 800595c:	f1c1 0202 	rsble	r2, r1, #2
 8005960:	2201      	movgt	r2, #1
 8005962:	4413      	add	r3, r2
 8005964:	e7e0      	b.n	8005928 <_printf_float+0x1a4>
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	055a      	lsls	r2, r3, #21
 800596a:	d407      	bmi.n	800597c <_printf_float+0x1f8>
 800596c:	6923      	ldr	r3, [r4, #16]
 800596e:	4642      	mov	r2, r8
 8005970:	4631      	mov	r1, r6
 8005972:	4628      	mov	r0, r5
 8005974:	47b8      	blx	r7
 8005976:	3001      	adds	r0, #1
 8005978:	d12c      	bne.n	80059d4 <_printf_float+0x250>
 800597a:	e764      	b.n	8005846 <_printf_float+0xc2>
 800597c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005980:	f240 80e0 	bls.w	8005b44 <_printf_float+0x3c0>
 8005984:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005988:	2200      	movs	r2, #0
 800598a:	2300      	movs	r3, #0
 800598c:	f7fb f8b4 	bl	8000af8 <__aeabi_dcmpeq>
 8005990:	2800      	cmp	r0, #0
 8005992:	d034      	beq.n	80059fe <_printf_float+0x27a>
 8005994:	4a37      	ldr	r2, [pc, #220]	; (8005a74 <_printf_float+0x2f0>)
 8005996:	2301      	movs	r3, #1
 8005998:	4631      	mov	r1, r6
 800599a:	4628      	mov	r0, r5
 800599c:	47b8      	blx	r7
 800599e:	3001      	adds	r0, #1
 80059a0:	f43f af51 	beq.w	8005846 <_printf_float+0xc2>
 80059a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059a8:	429a      	cmp	r2, r3
 80059aa:	db02      	blt.n	80059b2 <_printf_float+0x22e>
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	07d8      	lsls	r0, r3, #31
 80059b0:	d510      	bpl.n	80059d4 <_printf_float+0x250>
 80059b2:	ee18 3a10 	vmov	r3, s16
 80059b6:	4652      	mov	r2, sl
 80059b8:	4631      	mov	r1, r6
 80059ba:	4628      	mov	r0, r5
 80059bc:	47b8      	blx	r7
 80059be:	3001      	adds	r0, #1
 80059c0:	f43f af41 	beq.w	8005846 <_printf_float+0xc2>
 80059c4:	f04f 0800 	mov.w	r8, #0
 80059c8:	f104 091a 	add.w	r9, r4, #26
 80059cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ce:	3b01      	subs	r3, #1
 80059d0:	4543      	cmp	r3, r8
 80059d2:	dc09      	bgt.n	80059e8 <_printf_float+0x264>
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	079b      	lsls	r3, r3, #30
 80059d8:	f100 8105 	bmi.w	8005be6 <_printf_float+0x462>
 80059dc:	68e0      	ldr	r0, [r4, #12]
 80059de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059e0:	4298      	cmp	r0, r3
 80059e2:	bfb8      	it	lt
 80059e4:	4618      	movlt	r0, r3
 80059e6:	e730      	b.n	800584a <_printf_float+0xc6>
 80059e8:	2301      	movs	r3, #1
 80059ea:	464a      	mov	r2, r9
 80059ec:	4631      	mov	r1, r6
 80059ee:	4628      	mov	r0, r5
 80059f0:	47b8      	blx	r7
 80059f2:	3001      	adds	r0, #1
 80059f4:	f43f af27 	beq.w	8005846 <_printf_float+0xc2>
 80059f8:	f108 0801 	add.w	r8, r8, #1
 80059fc:	e7e6      	b.n	80059cc <_printf_float+0x248>
 80059fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	dc39      	bgt.n	8005a78 <_printf_float+0x2f4>
 8005a04:	4a1b      	ldr	r2, [pc, #108]	; (8005a74 <_printf_float+0x2f0>)
 8005a06:	2301      	movs	r3, #1
 8005a08:	4631      	mov	r1, r6
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	47b8      	blx	r7
 8005a0e:	3001      	adds	r0, #1
 8005a10:	f43f af19 	beq.w	8005846 <_printf_float+0xc2>
 8005a14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	d102      	bne.n	8005a22 <_printf_float+0x29e>
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	07d9      	lsls	r1, r3, #31
 8005a20:	d5d8      	bpl.n	80059d4 <_printf_float+0x250>
 8005a22:	ee18 3a10 	vmov	r3, s16
 8005a26:	4652      	mov	r2, sl
 8005a28:	4631      	mov	r1, r6
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	47b8      	blx	r7
 8005a2e:	3001      	adds	r0, #1
 8005a30:	f43f af09 	beq.w	8005846 <_printf_float+0xc2>
 8005a34:	f04f 0900 	mov.w	r9, #0
 8005a38:	f104 0a1a 	add.w	sl, r4, #26
 8005a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a3e:	425b      	negs	r3, r3
 8005a40:	454b      	cmp	r3, r9
 8005a42:	dc01      	bgt.n	8005a48 <_printf_float+0x2c4>
 8005a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a46:	e792      	b.n	800596e <_printf_float+0x1ea>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	4652      	mov	r2, sl
 8005a4c:	4631      	mov	r1, r6
 8005a4e:	4628      	mov	r0, r5
 8005a50:	47b8      	blx	r7
 8005a52:	3001      	adds	r0, #1
 8005a54:	f43f aef7 	beq.w	8005846 <_printf_float+0xc2>
 8005a58:	f109 0901 	add.w	r9, r9, #1
 8005a5c:	e7ee      	b.n	8005a3c <_printf_float+0x2b8>
 8005a5e:	bf00      	nop
 8005a60:	7fefffff 	.word	0x7fefffff
 8005a64:	0800c570 	.word	0x0800c570
 8005a68:	0800c574 	.word	0x0800c574
 8005a6c:	0800c57c 	.word	0x0800c57c
 8005a70:	0800c578 	.word	0x0800c578
 8005a74:	0800c971 	.word	0x0800c971
 8005a78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	bfa8      	it	ge
 8005a80:	461a      	movge	r2, r3
 8005a82:	2a00      	cmp	r2, #0
 8005a84:	4691      	mov	r9, r2
 8005a86:	dc37      	bgt.n	8005af8 <_printf_float+0x374>
 8005a88:	f04f 0b00 	mov.w	fp, #0
 8005a8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a90:	f104 021a 	add.w	r2, r4, #26
 8005a94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a96:	9305      	str	r3, [sp, #20]
 8005a98:	eba3 0309 	sub.w	r3, r3, r9
 8005a9c:	455b      	cmp	r3, fp
 8005a9e:	dc33      	bgt.n	8005b08 <_printf_float+0x384>
 8005aa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	db3b      	blt.n	8005b20 <_printf_float+0x39c>
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	07da      	lsls	r2, r3, #31
 8005aac:	d438      	bmi.n	8005b20 <_printf_float+0x39c>
 8005aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ab0:	9a05      	ldr	r2, [sp, #20]
 8005ab2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ab4:	1a9a      	subs	r2, r3, r2
 8005ab6:	eba3 0901 	sub.w	r9, r3, r1
 8005aba:	4591      	cmp	r9, r2
 8005abc:	bfa8      	it	ge
 8005abe:	4691      	movge	r9, r2
 8005ac0:	f1b9 0f00 	cmp.w	r9, #0
 8005ac4:	dc35      	bgt.n	8005b32 <_printf_float+0x3ae>
 8005ac6:	f04f 0800 	mov.w	r8, #0
 8005aca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ace:	f104 0a1a 	add.w	sl, r4, #26
 8005ad2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ad6:	1a9b      	subs	r3, r3, r2
 8005ad8:	eba3 0309 	sub.w	r3, r3, r9
 8005adc:	4543      	cmp	r3, r8
 8005ade:	f77f af79 	ble.w	80059d4 <_printf_float+0x250>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4652      	mov	r2, sl
 8005ae6:	4631      	mov	r1, r6
 8005ae8:	4628      	mov	r0, r5
 8005aea:	47b8      	blx	r7
 8005aec:	3001      	adds	r0, #1
 8005aee:	f43f aeaa 	beq.w	8005846 <_printf_float+0xc2>
 8005af2:	f108 0801 	add.w	r8, r8, #1
 8005af6:	e7ec      	b.n	8005ad2 <_printf_float+0x34e>
 8005af8:	4613      	mov	r3, r2
 8005afa:	4631      	mov	r1, r6
 8005afc:	4642      	mov	r2, r8
 8005afe:	4628      	mov	r0, r5
 8005b00:	47b8      	blx	r7
 8005b02:	3001      	adds	r0, #1
 8005b04:	d1c0      	bne.n	8005a88 <_printf_float+0x304>
 8005b06:	e69e      	b.n	8005846 <_printf_float+0xc2>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	9205      	str	r2, [sp, #20]
 8005b10:	47b8      	blx	r7
 8005b12:	3001      	adds	r0, #1
 8005b14:	f43f ae97 	beq.w	8005846 <_printf_float+0xc2>
 8005b18:	9a05      	ldr	r2, [sp, #20]
 8005b1a:	f10b 0b01 	add.w	fp, fp, #1
 8005b1e:	e7b9      	b.n	8005a94 <_printf_float+0x310>
 8005b20:	ee18 3a10 	vmov	r3, s16
 8005b24:	4652      	mov	r2, sl
 8005b26:	4631      	mov	r1, r6
 8005b28:	4628      	mov	r0, r5
 8005b2a:	47b8      	blx	r7
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d1be      	bne.n	8005aae <_printf_float+0x32a>
 8005b30:	e689      	b.n	8005846 <_printf_float+0xc2>
 8005b32:	9a05      	ldr	r2, [sp, #20]
 8005b34:	464b      	mov	r3, r9
 8005b36:	4442      	add	r2, r8
 8005b38:	4631      	mov	r1, r6
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	47b8      	blx	r7
 8005b3e:	3001      	adds	r0, #1
 8005b40:	d1c1      	bne.n	8005ac6 <_printf_float+0x342>
 8005b42:	e680      	b.n	8005846 <_printf_float+0xc2>
 8005b44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b46:	2a01      	cmp	r2, #1
 8005b48:	dc01      	bgt.n	8005b4e <_printf_float+0x3ca>
 8005b4a:	07db      	lsls	r3, r3, #31
 8005b4c:	d538      	bpl.n	8005bc0 <_printf_float+0x43c>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	4642      	mov	r2, r8
 8005b52:	4631      	mov	r1, r6
 8005b54:	4628      	mov	r0, r5
 8005b56:	47b8      	blx	r7
 8005b58:	3001      	adds	r0, #1
 8005b5a:	f43f ae74 	beq.w	8005846 <_printf_float+0xc2>
 8005b5e:	ee18 3a10 	vmov	r3, s16
 8005b62:	4652      	mov	r2, sl
 8005b64:	4631      	mov	r1, r6
 8005b66:	4628      	mov	r0, r5
 8005b68:	47b8      	blx	r7
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	f43f ae6b 	beq.w	8005846 <_printf_float+0xc2>
 8005b70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b74:	2200      	movs	r2, #0
 8005b76:	2300      	movs	r3, #0
 8005b78:	f7fa ffbe 	bl	8000af8 <__aeabi_dcmpeq>
 8005b7c:	b9d8      	cbnz	r0, 8005bb6 <_printf_float+0x432>
 8005b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b80:	f108 0201 	add.w	r2, r8, #1
 8005b84:	3b01      	subs	r3, #1
 8005b86:	4631      	mov	r1, r6
 8005b88:	4628      	mov	r0, r5
 8005b8a:	47b8      	blx	r7
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	d10e      	bne.n	8005bae <_printf_float+0x42a>
 8005b90:	e659      	b.n	8005846 <_printf_float+0xc2>
 8005b92:	2301      	movs	r3, #1
 8005b94:	4652      	mov	r2, sl
 8005b96:	4631      	mov	r1, r6
 8005b98:	4628      	mov	r0, r5
 8005b9a:	47b8      	blx	r7
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	f43f ae52 	beq.w	8005846 <_printf_float+0xc2>
 8005ba2:	f108 0801 	add.w	r8, r8, #1
 8005ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	4543      	cmp	r3, r8
 8005bac:	dcf1      	bgt.n	8005b92 <_printf_float+0x40e>
 8005bae:	464b      	mov	r3, r9
 8005bb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005bb4:	e6dc      	b.n	8005970 <_printf_float+0x1ec>
 8005bb6:	f04f 0800 	mov.w	r8, #0
 8005bba:	f104 0a1a 	add.w	sl, r4, #26
 8005bbe:	e7f2      	b.n	8005ba6 <_printf_float+0x422>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	4642      	mov	r2, r8
 8005bc4:	e7df      	b.n	8005b86 <_printf_float+0x402>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	464a      	mov	r2, r9
 8005bca:	4631      	mov	r1, r6
 8005bcc:	4628      	mov	r0, r5
 8005bce:	47b8      	blx	r7
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	f43f ae38 	beq.w	8005846 <_printf_float+0xc2>
 8005bd6:	f108 0801 	add.w	r8, r8, #1
 8005bda:	68e3      	ldr	r3, [r4, #12]
 8005bdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bde:	1a5b      	subs	r3, r3, r1
 8005be0:	4543      	cmp	r3, r8
 8005be2:	dcf0      	bgt.n	8005bc6 <_printf_float+0x442>
 8005be4:	e6fa      	b.n	80059dc <_printf_float+0x258>
 8005be6:	f04f 0800 	mov.w	r8, #0
 8005bea:	f104 0919 	add.w	r9, r4, #25
 8005bee:	e7f4      	b.n	8005bda <_printf_float+0x456>

08005bf0 <_printf_common>:
 8005bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf4:	4616      	mov	r6, r2
 8005bf6:	4699      	mov	r9, r3
 8005bf8:	688a      	ldr	r2, [r1, #8]
 8005bfa:	690b      	ldr	r3, [r1, #16]
 8005bfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c00:	4293      	cmp	r3, r2
 8005c02:	bfb8      	it	lt
 8005c04:	4613      	movlt	r3, r2
 8005c06:	6033      	str	r3, [r6, #0]
 8005c08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c0c:	4607      	mov	r7, r0
 8005c0e:	460c      	mov	r4, r1
 8005c10:	b10a      	cbz	r2, 8005c16 <_printf_common+0x26>
 8005c12:	3301      	adds	r3, #1
 8005c14:	6033      	str	r3, [r6, #0]
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	0699      	lsls	r1, r3, #26
 8005c1a:	bf42      	ittt	mi
 8005c1c:	6833      	ldrmi	r3, [r6, #0]
 8005c1e:	3302      	addmi	r3, #2
 8005c20:	6033      	strmi	r3, [r6, #0]
 8005c22:	6825      	ldr	r5, [r4, #0]
 8005c24:	f015 0506 	ands.w	r5, r5, #6
 8005c28:	d106      	bne.n	8005c38 <_printf_common+0x48>
 8005c2a:	f104 0a19 	add.w	sl, r4, #25
 8005c2e:	68e3      	ldr	r3, [r4, #12]
 8005c30:	6832      	ldr	r2, [r6, #0]
 8005c32:	1a9b      	subs	r3, r3, r2
 8005c34:	42ab      	cmp	r3, r5
 8005c36:	dc26      	bgt.n	8005c86 <_printf_common+0x96>
 8005c38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c3c:	1e13      	subs	r3, r2, #0
 8005c3e:	6822      	ldr	r2, [r4, #0]
 8005c40:	bf18      	it	ne
 8005c42:	2301      	movne	r3, #1
 8005c44:	0692      	lsls	r2, r2, #26
 8005c46:	d42b      	bmi.n	8005ca0 <_printf_common+0xb0>
 8005c48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c4c:	4649      	mov	r1, r9
 8005c4e:	4638      	mov	r0, r7
 8005c50:	47c0      	blx	r8
 8005c52:	3001      	adds	r0, #1
 8005c54:	d01e      	beq.n	8005c94 <_printf_common+0xa4>
 8005c56:	6823      	ldr	r3, [r4, #0]
 8005c58:	68e5      	ldr	r5, [r4, #12]
 8005c5a:	6832      	ldr	r2, [r6, #0]
 8005c5c:	f003 0306 	and.w	r3, r3, #6
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	bf08      	it	eq
 8005c64:	1aad      	subeq	r5, r5, r2
 8005c66:	68a3      	ldr	r3, [r4, #8]
 8005c68:	6922      	ldr	r2, [r4, #16]
 8005c6a:	bf0c      	ite	eq
 8005c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c70:	2500      	movne	r5, #0
 8005c72:	4293      	cmp	r3, r2
 8005c74:	bfc4      	itt	gt
 8005c76:	1a9b      	subgt	r3, r3, r2
 8005c78:	18ed      	addgt	r5, r5, r3
 8005c7a:	2600      	movs	r6, #0
 8005c7c:	341a      	adds	r4, #26
 8005c7e:	42b5      	cmp	r5, r6
 8005c80:	d11a      	bne.n	8005cb8 <_printf_common+0xc8>
 8005c82:	2000      	movs	r0, #0
 8005c84:	e008      	b.n	8005c98 <_printf_common+0xa8>
 8005c86:	2301      	movs	r3, #1
 8005c88:	4652      	mov	r2, sl
 8005c8a:	4649      	mov	r1, r9
 8005c8c:	4638      	mov	r0, r7
 8005c8e:	47c0      	blx	r8
 8005c90:	3001      	adds	r0, #1
 8005c92:	d103      	bne.n	8005c9c <_printf_common+0xac>
 8005c94:	f04f 30ff 	mov.w	r0, #4294967295
 8005c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c9c:	3501      	adds	r5, #1
 8005c9e:	e7c6      	b.n	8005c2e <_printf_common+0x3e>
 8005ca0:	18e1      	adds	r1, r4, r3
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	2030      	movs	r0, #48	; 0x30
 8005ca6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005caa:	4422      	add	r2, r4
 8005cac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cb4:	3302      	adds	r3, #2
 8005cb6:	e7c7      	b.n	8005c48 <_printf_common+0x58>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	4622      	mov	r2, r4
 8005cbc:	4649      	mov	r1, r9
 8005cbe:	4638      	mov	r0, r7
 8005cc0:	47c0      	blx	r8
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	d0e6      	beq.n	8005c94 <_printf_common+0xa4>
 8005cc6:	3601      	adds	r6, #1
 8005cc8:	e7d9      	b.n	8005c7e <_printf_common+0x8e>
	...

08005ccc <_printf_i>:
 8005ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd0:	7e0f      	ldrb	r7, [r1, #24]
 8005cd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cd4:	2f78      	cmp	r7, #120	; 0x78
 8005cd6:	4691      	mov	r9, r2
 8005cd8:	4680      	mov	r8, r0
 8005cda:	460c      	mov	r4, r1
 8005cdc:	469a      	mov	sl, r3
 8005cde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ce2:	d807      	bhi.n	8005cf4 <_printf_i+0x28>
 8005ce4:	2f62      	cmp	r7, #98	; 0x62
 8005ce6:	d80a      	bhi.n	8005cfe <_printf_i+0x32>
 8005ce8:	2f00      	cmp	r7, #0
 8005cea:	f000 80d8 	beq.w	8005e9e <_printf_i+0x1d2>
 8005cee:	2f58      	cmp	r7, #88	; 0x58
 8005cf0:	f000 80a3 	beq.w	8005e3a <_printf_i+0x16e>
 8005cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cfc:	e03a      	b.n	8005d74 <_printf_i+0xa8>
 8005cfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d02:	2b15      	cmp	r3, #21
 8005d04:	d8f6      	bhi.n	8005cf4 <_printf_i+0x28>
 8005d06:	a101      	add	r1, pc, #4	; (adr r1, 8005d0c <_printf_i+0x40>)
 8005d08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d0c:	08005d65 	.word	0x08005d65
 8005d10:	08005d79 	.word	0x08005d79
 8005d14:	08005cf5 	.word	0x08005cf5
 8005d18:	08005cf5 	.word	0x08005cf5
 8005d1c:	08005cf5 	.word	0x08005cf5
 8005d20:	08005cf5 	.word	0x08005cf5
 8005d24:	08005d79 	.word	0x08005d79
 8005d28:	08005cf5 	.word	0x08005cf5
 8005d2c:	08005cf5 	.word	0x08005cf5
 8005d30:	08005cf5 	.word	0x08005cf5
 8005d34:	08005cf5 	.word	0x08005cf5
 8005d38:	08005e85 	.word	0x08005e85
 8005d3c:	08005da9 	.word	0x08005da9
 8005d40:	08005e67 	.word	0x08005e67
 8005d44:	08005cf5 	.word	0x08005cf5
 8005d48:	08005cf5 	.word	0x08005cf5
 8005d4c:	08005ea7 	.word	0x08005ea7
 8005d50:	08005cf5 	.word	0x08005cf5
 8005d54:	08005da9 	.word	0x08005da9
 8005d58:	08005cf5 	.word	0x08005cf5
 8005d5c:	08005cf5 	.word	0x08005cf5
 8005d60:	08005e6f 	.word	0x08005e6f
 8005d64:	682b      	ldr	r3, [r5, #0]
 8005d66:	1d1a      	adds	r2, r3, #4
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	602a      	str	r2, [r5, #0]
 8005d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d74:	2301      	movs	r3, #1
 8005d76:	e0a3      	b.n	8005ec0 <_printf_i+0x1f4>
 8005d78:	6820      	ldr	r0, [r4, #0]
 8005d7a:	6829      	ldr	r1, [r5, #0]
 8005d7c:	0606      	lsls	r6, r0, #24
 8005d7e:	f101 0304 	add.w	r3, r1, #4
 8005d82:	d50a      	bpl.n	8005d9a <_printf_i+0xce>
 8005d84:	680e      	ldr	r6, [r1, #0]
 8005d86:	602b      	str	r3, [r5, #0]
 8005d88:	2e00      	cmp	r6, #0
 8005d8a:	da03      	bge.n	8005d94 <_printf_i+0xc8>
 8005d8c:	232d      	movs	r3, #45	; 0x2d
 8005d8e:	4276      	negs	r6, r6
 8005d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d94:	485e      	ldr	r0, [pc, #376]	; (8005f10 <_printf_i+0x244>)
 8005d96:	230a      	movs	r3, #10
 8005d98:	e019      	b.n	8005dce <_printf_i+0x102>
 8005d9a:	680e      	ldr	r6, [r1, #0]
 8005d9c:	602b      	str	r3, [r5, #0]
 8005d9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005da2:	bf18      	it	ne
 8005da4:	b236      	sxthne	r6, r6
 8005da6:	e7ef      	b.n	8005d88 <_printf_i+0xbc>
 8005da8:	682b      	ldr	r3, [r5, #0]
 8005daa:	6820      	ldr	r0, [r4, #0]
 8005dac:	1d19      	adds	r1, r3, #4
 8005dae:	6029      	str	r1, [r5, #0]
 8005db0:	0601      	lsls	r1, r0, #24
 8005db2:	d501      	bpl.n	8005db8 <_printf_i+0xec>
 8005db4:	681e      	ldr	r6, [r3, #0]
 8005db6:	e002      	b.n	8005dbe <_printf_i+0xf2>
 8005db8:	0646      	lsls	r6, r0, #25
 8005dba:	d5fb      	bpl.n	8005db4 <_printf_i+0xe8>
 8005dbc:	881e      	ldrh	r6, [r3, #0]
 8005dbe:	4854      	ldr	r0, [pc, #336]	; (8005f10 <_printf_i+0x244>)
 8005dc0:	2f6f      	cmp	r7, #111	; 0x6f
 8005dc2:	bf0c      	ite	eq
 8005dc4:	2308      	moveq	r3, #8
 8005dc6:	230a      	movne	r3, #10
 8005dc8:	2100      	movs	r1, #0
 8005dca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dce:	6865      	ldr	r5, [r4, #4]
 8005dd0:	60a5      	str	r5, [r4, #8]
 8005dd2:	2d00      	cmp	r5, #0
 8005dd4:	bfa2      	ittt	ge
 8005dd6:	6821      	ldrge	r1, [r4, #0]
 8005dd8:	f021 0104 	bicge.w	r1, r1, #4
 8005ddc:	6021      	strge	r1, [r4, #0]
 8005dde:	b90e      	cbnz	r6, 8005de4 <_printf_i+0x118>
 8005de0:	2d00      	cmp	r5, #0
 8005de2:	d04d      	beq.n	8005e80 <_printf_i+0x1b4>
 8005de4:	4615      	mov	r5, r2
 8005de6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dea:	fb03 6711 	mls	r7, r3, r1, r6
 8005dee:	5dc7      	ldrb	r7, [r0, r7]
 8005df0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005df4:	4637      	mov	r7, r6
 8005df6:	42bb      	cmp	r3, r7
 8005df8:	460e      	mov	r6, r1
 8005dfa:	d9f4      	bls.n	8005de6 <_printf_i+0x11a>
 8005dfc:	2b08      	cmp	r3, #8
 8005dfe:	d10b      	bne.n	8005e18 <_printf_i+0x14c>
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	07de      	lsls	r6, r3, #31
 8005e04:	d508      	bpl.n	8005e18 <_printf_i+0x14c>
 8005e06:	6923      	ldr	r3, [r4, #16]
 8005e08:	6861      	ldr	r1, [r4, #4]
 8005e0a:	4299      	cmp	r1, r3
 8005e0c:	bfde      	ittt	le
 8005e0e:	2330      	movle	r3, #48	; 0x30
 8005e10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e18:	1b52      	subs	r2, r2, r5
 8005e1a:	6122      	str	r2, [r4, #16]
 8005e1c:	f8cd a000 	str.w	sl, [sp]
 8005e20:	464b      	mov	r3, r9
 8005e22:	aa03      	add	r2, sp, #12
 8005e24:	4621      	mov	r1, r4
 8005e26:	4640      	mov	r0, r8
 8005e28:	f7ff fee2 	bl	8005bf0 <_printf_common>
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	d14c      	bne.n	8005eca <_printf_i+0x1fe>
 8005e30:	f04f 30ff 	mov.w	r0, #4294967295
 8005e34:	b004      	add	sp, #16
 8005e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e3a:	4835      	ldr	r0, [pc, #212]	; (8005f10 <_printf_i+0x244>)
 8005e3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e40:	6829      	ldr	r1, [r5, #0]
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e48:	6029      	str	r1, [r5, #0]
 8005e4a:	061d      	lsls	r5, r3, #24
 8005e4c:	d514      	bpl.n	8005e78 <_printf_i+0x1ac>
 8005e4e:	07df      	lsls	r7, r3, #31
 8005e50:	bf44      	itt	mi
 8005e52:	f043 0320 	orrmi.w	r3, r3, #32
 8005e56:	6023      	strmi	r3, [r4, #0]
 8005e58:	b91e      	cbnz	r6, 8005e62 <_printf_i+0x196>
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	f023 0320 	bic.w	r3, r3, #32
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	2310      	movs	r3, #16
 8005e64:	e7b0      	b.n	8005dc8 <_printf_i+0xfc>
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	f043 0320 	orr.w	r3, r3, #32
 8005e6c:	6023      	str	r3, [r4, #0]
 8005e6e:	2378      	movs	r3, #120	; 0x78
 8005e70:	4828      	ldr	r0, [pc, #160]	; (8005f14 <_printf_i+0x248>)
 8005e72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e76:	e7e3      	b.n	8005e40 <_printf_i+0x174>
 8005e78:	0659      	lsls	r1, r3, #25
 8005e7a:	bf48      	it	mi
 8005e7c:	b2b6      	uxthmi	r6, r6
 8005e7e:	e7e6      	b.n	8005e4e <_printf_i+0x182>
 8005e80:	4615      	mov	r5, r2
 8005e82:	e7bb      	b.n	8005dfc <_printf_i+0x130>
 8005e84:	682b      	ldr	r3, [r5, #0]
 8005e86:	6826      	ldr	r6, [r4, #0]
 8005e88:	6961      	ldr	r1, [r4, #20]
 8005e8a:	1d18      	adds	r0, r3, #4
 8005e8c:	6028      	str	r0, [r5, #0]
 8005e8e:	0635      	lsls	r5, r6, #24
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	d501      	bpl.n	8005e98 <_printf_i+0x1cc>
 8005e94:	6019      	str	r1, [r3, #0]
 8005e96:	e002      	b.n	8005e9e <_printf_i+0x1d2>
 8005e98:	0670      	lsls	r0, r6, #25
 8005e9a:	d5fb      	bpl.n	8005e94 <_printf_i+0x1c8>
 8005e9c:	8019      	strh	r1, [r3, #0]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	6123      	str	r3, [r4, #16]
 8005ea2:	4615      	mov	r5, r2
 8005ea4:	e7ba      	b.n	8005e1c <_printf_i+0x150>
 8005ea6:	682b      	ldr	r3, [r5, #0]
 8005ea8:	1d1a      	adds	r2, r3, #4
 8005eaa:	602a      	str	r2, [r5, #0]
 8005eac:	681d      	ldr	r5, [r3, #0]
 8005eae:	6862      	ldr	r2, [r4, #4]
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	f7fa f9ac 	bl	8000210 <memchr>
 8005eb8:	b108      	cbz	r0, 8005ebe <_printf_i+0x1f2>
 8005eba:	1b40      	subs	r0, r0, r5
 8005ebc:	6060      	str	r0, [r4, #4]
 8005ebe:	6863      	ldr	r3, [r4, #4]
 8005ec0:	6123      	str	r3, [r4, #16]
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ec8:	e7a8      	b.n	8005e1c <_printf_i+0x150>
 8005eca:	6923      	ldr	r3, [r4, #16]
 8005ecc:	462a      	mov	r2, r5
 8005ece:	4649      	mov	r1, r9
 8005ed0:	4640      	mov	r0, r8
 8005ed2:	47d0      	blx	sl
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	d0ab      	beq.n	8005e30 <_printf_i+0x164>
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	079b      	lsls	r3, r3, #30
 8005edc:	d413      	bmi.n	8005f06 <_printf_i+0x23a>
 8005ede:	68e0      	ldr	r0, [r4, #12]
 8005ee0:	9b03      	ldr	r3, [sp, #12]
 8005ee2:	4298      	cmp	r0, r3
 8005ee4:	bfb8      	it	lt
 8005ee6:	4618      	movlt	r0, r3
 8005ee8:	e7a4      	b.n	8005e34 <_printf_i+0x168>
 8005eea:	2301      	movs	r3, #1
 8005eec:	4632      	mov	r2, r6
 8005eee:	4649      	mov	r1, r9
 8005ef0:	4640      	mov	r0, r8
 8005ef2:	47d0      	blx	sl
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d09b      	beq.n	8005e30 <_printf_i+0x164>
 8005ef8:	3501      	adds	r5, #1
 8005efa:	68e3      	ldr	r3, [r4, #12]
 8005efc:	9903      	ldr	r1, [sp, #12]
 8005efe:	1a5b      	subs	r3, r3, r1
 8005f00:	42ab      	cmp	r3, r5
 8005f02:	dcf2      	bgt.n	8005eea <_printf_i+0x21e>
 8005f04:	e7eb      	b.n	8005ede <_printf_i+0x212>
 8005f06:	2500      	movs	r5, #0
 8005f08:	f104 0619 	add.w	r6, r4, #25
 8005f0c:	e7f5      	b.n	8005efa <_printf_i+0x22e>
 8005f0e:	bf00      	nop
 8005f10:	0800c580 	.word	0x0800c580
 8005f14:	0800c591 	.word	0x0800c591

08005f18 <_scanf_float>:
 8005f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1c:	b087      	sub	sp, #28
 8005f1e:	4617      	mov	r7, r2
 8005f20:	9303      	str	r3, [sp, #12]
 8005f22:	688b      	ldr	r3, [r1, #8]
 8005f24:	1e5a      	subs	r2, r3, #1
 8005f26:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005f2a:	bf83      	ittte	hi
 8005f2c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005f30:	195b      	addhi	r3, r3, r5
 8005f32:	9302      	strhi	r3, [sp, #8]
 8005f34:	2300      	movls	r3, #0
 8005f36:	bf86      	itte	hi
 8005f38:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005f3c:	608b      	strhi	r3, [r1, #8]
 8005f3e:	9302      	strls	r3, [sp, #8]
 8005f40:	680b      	ldr	r3, [r1, #0]
 8005f42:	468b      	mov	fp, r1
 8005f44:	2500      	movs	r5, #0
 8005f46:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005f4a:	f84b 3b1c 	str.w	r3, [fp], #28
 8005f4e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005f52:	4680      	mov	r8, r0
 8005f54:	460c      	mov	r4, r1
 8005f56:	465e      	mov	r6, fp
 8005f58:	46aa      	mov	sl, r5
 8005f5a:	46a9      	mov	r9, r5
 8005f5c:	9501      	str	r5, [sp, #4]
 8005f5e:	68a2      	ldr	r2, [r4, #8]
 8005f60:	b152      	cbz	r2, 8005f78 <_scanf_float+0x60>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b4e      	cmp	r3, #78	; 0x4e
 8005f68:	d864      	bhi.n	8006034 <_scanf_float+0x11c>
 8005f6a:	2b40      	cmp	r3, #64	; 0x40
 8005f6c:	d83c      	bhi.n	8005fe8 <_scanf_float+0xd0>
 8005f6e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005f72:	b2c8      	uxtb	r0, r1
 8005f74:	280e      	cmp	r0, #14
 8005f76:	d93a      	bls.n	8005fee <_scanf_float+0xd6>
 8005f78:	f1b9 0f00 	cmp.w	r9, #0
 8005f7c:	d003      	beq.n	8005f86 <_scanf_float+0x6e>
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f8a:	f1ba 0f01 	cmp.w	sl, #1
 8005f8e:	f200 8113 	bhi.w	80061b8 <_scanf_float+0x2a0>
 8005f92:	455e      	cmp	r6, fp
 8005f94:	f200 8105 	bhi.w	80061a2 <_scanf_float+0x28a>
 8005f98:	2501      	movs	r5, #1
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	b007      	add	sp, #28
 8005f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fa2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005fa6:	2a0d      	cmp	r2, #13
 8005fa8:	d8e6      	bhi.n	8005f78 <_scanf_float+0x60>
 8005faa:	a101      	add	r1, pc, #4	; (adr r1, 8005fb0 <_scanf_float+0x98>)
 8005fac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005fb0:	080060ef 	.word	0x080060ef
 8005fb4:	08005f79 	.word	0x08005f79
 8005fb8:	08005f79 	.word	0x08005f79
 8005fbc:	08005f79 	.word	0x08005f79
 8005fc0:	0800614f 	.word	0x0800614f
 8005fc4:	08006127 	.word	0x08006127
 8005fc8:	08005f79 	.word	0x08005f79
 8005fcc:	08005f79 	.word	0x08005f79
 8005fd0:	080060fd 	.word	0x080060fd
 8005fd4:	08005f79 	.word	0x08005f79
 8005fd8:	08005f79 	.word	0x08005f79
 8005fdc:	08005f79 	.word	0x08005f79
 8005fe0:	08005f79 	.word	0x08005f79
 8005fe4:	080060b5 	.word	0x080060b5
 8005fe8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005fec:	e7db      	b.n	8005fa6 <_scanf_float+0x8e>
 8005fee:	290e      	cmp	r1, #14
 8005ff0:	d8c2      	bhi.n	8005f78 <_scanf_float+0x60>
 8005ff2:	a001      	add	r0, pc, #4	; (adr r0, 8005ff8 <_scanf_float+0xe0>)
 8005ff4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005ff8:	080060a7 	.word	0x080060a7
 8005ffc:	08005f79 	.word	0x08005f79
 8006000:	080060a7 	.word	0x080060a7
 8006004:	0800613b 	.word	0x0800613b
 8006008:	08005f79 	.word	0x08005f79
 800600c:	08006055 	.word	0x08006055
 8006010:	08006091 	.word	0x08006091
 8006014:	08006091 	.word	0x08006091
 8006018:	08006091 	.word	0x08006091
 800601c:	08006091 	.word	0x08006091
 8006020:	08006091 	.word	0x08006091
 8006024:	08006091 	.word	0x08006091
 8006028:	08006091 	.word	0x08006091
 800602c:	08006091 	.word	0x08006091
 8006030:	08006091 	.word	0x08006091
 8006034:	2b6e      	cmp	r3, #110	; 0x6e
 8006036:	d809      	bhi.n	800604c <_scanf_float+0x134>
 8006038:	2b60      	cmp	r3, #96	; 0x60
 800603a:	d8b2      	bhi.n	8005fa2 <_scanf_float+0x8a>
 800603c:	2b54      	cmp	r3, #84	; 0x54
 800603e:	d077      	beq.n	8006130 <_scanf_float+0x218>
 8006040:	2b59      	cmp	r3, #89	; 0x59
 8006042:	d199      	bne.n	8005f78 <_scanf_float+0x60>
 8006044:	2d07      	cmp	r5, #7
 8006046:	d197      	bne.n	8005f78 <_scanf_float+0x60>
 8006048:	2508      	movs	r5, #8
 800604a:	e029      	b.n	80060a0 <_scanf_float+0x188>
 800604c:	2b74      	cmp	r3, #116	; 0x74
 800604e:	d06f      	beq.n	8006130 <_scanf_float+0x218>
 8006050:	2b79      	cmp	r3, #121	; 0x79
 8006052:	e7f6      	b.n	8006042 <_scanf_float+0x12a>
 8006054:	6821      	ldr	r1, [r4, #0]
 8006056:	05c8      	lsls	r0, r1, #23
 8006058:	d51a      	bpl.n	8006090 <_scanf_float+0x178>
 800605a:	9b02      	ldr	r3, [sp, #8]
 800605c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006060:	6021      	str	r1, [r4, #0]
 8006062:	f109 0901 	add.w	r9, r9, #1
 8006066:	b11b      	cbz	r3, 8006070 <_scanf_float+0x158>
 8006068:	3b01      	subs	r3, #1
 800606a:	3201      	adds	r2, #1
 800606c:	9302      	str	r3, [sp, #8]
 800606e:	60a2      	str	r2, [r4, #8]
 8006070:	68a3      	ldr	r3, [r4, #8]
 8006072:	3b01      	subs	r3, #1
 8006074:	60a3      	str	r3, [r4, #8]
 8006076:	6923      	ldr	r3, [r4, #16]
 8006078:	3301      	adds	r3, #1
 800607a:	6123      	str	r3, [r4, #16]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3b01      	subs	r3, #1
 8006080:	2b00      	cmp	r3, #0
 8006082:	607b      	str	r3, [r7, #4]
 8006084:	f340 8084 	ble.w	8006190 <_scanf_float+0x278>
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	3301      	adds	r3, #1
 800608c:	603b      	str	r3, [r7, #0]
 800608e:	e766      	b.n	8005f5e <_scanf_float+0x46>
 8006090:	eb1a 0f05 	cmn.w	sl, r5
 8006094:	f47f af70 	bne.w	8005f78 <_scanf_float+0x60>
 8006098:	6822      	ldr	r2, [r4, #0]
 800609a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800609e:	6022      	str	r2, [r4, #0]
 80060a0:	f806 3b01 	strb.w	r3, [r6], #1
 80060a4:	e7e4      	b.n	8006070 <_scanf_float+0x158>
 80060a6:	6822      	ldr	r2, [r4, #0]
 80060a8:	0610      	lsls	r0, r2, #24
 80060aa:	f57f af65 	bpl.w	8005f78 <_scanf_float+0x60>
 80060ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060b2:	e7f4      	b.n	800609e <_scanf_float+0x186>
 80060b4:	f1ba 0f00 	cmp.w	sl, #0
 80060b8:	d10e      	bne.n	80060d8 <_scanf_float+0x1c0>
 80060ba:	f1b9 0f00 	cmp.w	r9, #0
 80060be:	d10e      	bne.n	80060de <_scanf_float+0x1c6>
 80060c0:	6822      	ldr	r2, [r4, #0]
 80060c2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80060c6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80060ca:	d108      	bne.n	80060de <_scanf_float+0x1c6>
 80060cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80060d0:	6022      	str	r2, [r4, #0]
 80060d2:	f04f 0a01 	mov.w	sl, #1
 80060d6:	e7e3      	b.n	80060a0 <_scanf_float+0x188>
 80060d8:	f1ba 0f02 	cmp.w	sl, #2
 80060dc:	d055      	beq.n	800618a <_scanf_float+0x272>
 80060de:	2d01      	cmp	r5, #1
 80060e0:	d002      	beq.n	80060e8 <_scanf_float+0x1d0>
 80060e2:	2d04      	cmp	r5, #4
 80060e4:	f47f af48 	bne.w	8005f78 <_scanf_float+0x60>
 80060e8:	3501      	adds	r5, #1
 80060ea:	b2ed      	uxtb	r5, r5
 80060ec:	e7d8      	b.n	80060a0 <_scanf_float+0x188>
 80060ee:	f1ba 0f01 	cmp.w	sl, #1
 80060f2:	f47f af41 	bne.w	8005f78 <_scanf_float+0x60>
 80060f6:	f04f 0a02 	mov.w	sl, #2
 80060fa:	e7d1      	b.n	80060a0 <_scanf_float+0x188>
 80060fc:	b97d      	cbnz	r5, 800611e <_scanf_float+0x206>
 80060fe:	f1b9 0f00 	cmp.w	r9, #0
 8006102:	f47f af3c 	bne.w	8005f7e <_scanf_float+0x66>
 8006106:	6822      	ldr	r2, [r4, #0]
 8006108:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800610c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006110:	f47f af39 	bne.w	8005f86 <_scanf_float+0x6e>
 8006114:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006118:	6022      	str	r2, [r4, #0]
 800611a:	2501      	movs	r5, #1
 800611c:	e7c0      	b.n	80060a0 <_scanf_float+0x188>
 800611e:	2d03      	cmp	r5, #3
 8006120:	d0e2      	beq.n	80060e8 <_scanf_float+0x1d0>
 8006122:	2d05      	cmp	r5, #5
 8006124:	e7de      	b.n	80060e4 <_scanf_float+0x1cc>
 8006126:	2d02      	cmp	r5, #2
 8006128:	f47f af26 	bne.w	8005f78 <_scanf_float+0x60>
 800612c:	2503      	movs	r5, #3
 800612e:	e7b7      	b.n	80060a0 <_scanf_float+0x188>
 8006130:	2d06      	cmp	r5, #6
 8006132:	f47f af21 	bne.w	8005f78 <_scanf_float+0x60>
 8006136:	2507      	movs	r5, #7
 8006138:	e7b2      	b.n	80060a0 <_scanf_float+0x188>
 800613a:	6822      	ldr	r2, [r4, #0]
 800613c:	0591      	lsls	r1, r2, #22
 800613e:	f57f af1b 	bpl.w	8005f78 <_scanf_float+0x60>
 8006142:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006146:	6022      	str	r2, [r4, #0]
 8006148:	f8cd 9004 	str.w	r9, [sp, #4]
 800614c:	e7a8      	b.n	80060a0 <_scanf_float+0x188>
 800614e:	6822      	ldr	r2, [r4, #0]
 8006150:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006154:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006158:	d006      	beq.n	8006168 <_scanf_float+0x250>
 800615a:	0550      	lsls	r0, r2, #21
 800615c:	f57f af0c 	bpl.w	8005f78 <_scanf_float+0x60>
 8006160:	f1b9 0f00 	cmp.w	r9, #0
 8006164:	f43f af0f 	beq.w	8005f86 <_scanf_float+0x6e>
 8006168:	0591      	lsls	r1, r2, #22
 800616a:	bf58      	it	pl
 800616c:	9901      	ldrpl	r1, [sp, #4]
 800616e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006172:	bf58      	it	pl
 8006174:	eba9 0101 	subpl.w	r1, r9, r1
 8006178:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800617c:	bf58      	it	pl
 800617e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006182:	6022      	str	r2, [r4, #0]
 8006184:	f04f 0900 	mov.w	r9, #0
 8006188:	e78a      	b.n	80060a0 <_scanf_float+0x188>
 800618a:	f04f 0a03 	mov.w	sl, #3
 800618e:	e787      	b.n	80060a0 <_scanf_float+0x188>
 8006190:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006194:	4639      	mov	r1, r7
 8006196:	4640      	mov	r0, r8
 8006198:	4798      	blx	r3
 800619a:	2800      	cmp	r0, #0
 800619c:	f43f aedf 	beq.w	8005f5e <_scanf_float+0x46>
 80061a0:	e6ea      	b.n	8005f78 <_scanf_float+0x60>
 80061a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061aa:	463a      	mov	r2, r7
 80061ac:	4640      	mov	r0, r8
 80061ae:	4798      	blx	r3
 80061b0:	6923      	ldr	r3, [r4, #16]
 80061b2:	3b01      	subs	r3, #1
 80061b4:	6123      	str	r3, [r4, #16]
 80061b6:	e6ec      	b.n	8005f92 <_scanf_float+0x7a>
 80061b8:	1e6b      	subs	r3, r5, #1
 80061ba:	2b06      	cmp	r3, #6
 80061bc:	d825      	bhi.n	800620a <_scanf_float+0x2f2>
 80061be:	2d02      	cmp	r5, #2
 80061c0:	d836      	bhi.n	8006230 <_scanf_float+0x318>
 80061c2:	455e      	cmp	r6, fp
 80061c4:	f67f aee8 	bls.w	8005f98 <_scanf_float+0x80>
 80061c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061d0:	463a      	mov	r2, r7
 80061d2:	4640      	mov	r0, r8
 80061d4:	4798      	blx	r3
 80061d6:	6923      	ldr	r3, [r4, #16]
 80061d8:	3b01      	subs	r3, #1
 80061da:	6123      	str	r3, [r4, #16]
 80061dc:	e7f1      	b.n	80061c2 <_scanf_float+0x2aa>
 80061de:	9802      	ldr	r0, [sp, #8]
 80061e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061e4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80061e8:	9002      	str	r0, [sp, #8]
 80061ea:	463a      	mov	r2, r7
 80061ec:	4640      	mov	r0, r8
 80061ee:	4798      	blx	r3
 80061f0:	6923      	ldr	r3, [r4, #16]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	6123      	str	r3, [r4, #16]
 80061f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061fa:	fa5f fa8a 	uxtb.w	sl, sl
 80061fe:	f1ba 0f02 	cmp.w	sl, #2
 8006202:	d1ec      	bne.n	80061de <_scanf_float+0x2c6>
 8006204:	3d03      	subs	r5, #3
 8006206:	b2ed      	uxtb	r5, r5
 8006208:	1b76      	subs	r6, r6, r5
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	05da      	lsls	r2, r3, #23
 800620e:	d52f      	bpl.n	8006270 <_scanf_float+0x358>
 8006210:	055b      	lsls	r3, r3, #21
 8006212:	d510      	bpl.n	8006236 <_scanf_float+0x31e>
 8006214:	455e      	cmp	r6, fp
 8006216:	f67f aebf 	bls.w	8005f98 <_scanf_float+0x80>
 800621a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800621e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006222:	463a      	mov	r2, r7
 8006224:	4640      	mov	r0, r8
 8006226:	4798      	blx	r3
 8006228:	6923      	ldr	r3, [r4, #16]
 800622a:	3b01      	subs	r3, #1
 800622c:	6123      	str	r3, [r4, #16]
 800622e:	e7f1      	b.n	8006214 <_scanf_float+0x2fc>
 8006230:	46aa      	mov	sl, r5
 8006232:	9602      	str	r6, [sp, #8]
 8006234:	e7df      	b.n	80061f6 <_scanf_float+0x2de>
 8006236:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800623a:	6923      	ldr	r3, [r4, #16]
 800623c:	2965      	cmp	r1, #101	; 0x65
 800623e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006242:	f106 35ff 	add.w	r5, r6, #4294967295
 8006246:	6123      	str	r3, [r4, #16]
 8006248:	d00c      	beq.n	8006264 <_scanf_float+0x34c>
 800624a:	2945      	cmp	r1, #69	; 0x45
 800624c:	d00a      	beq.n	8006264 <_scanf_float+0x34c>
 800624e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006252:	463a      	mov	r2, r7
 8006254:	4640      	mov	r0, r8
 8006256:	4798      	blx	r3
 8006258:	6923      	ldr	r3, [r4, #16]
 800625a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800625e:	3b01      	subs	r3, #1
 8006260:	1eb5      	subs	r5, r6, #2
 8006262:	6123      	str	r3, [r4, #16]
 8006264:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006268:	463a      	mov	r2, r7
 800626a:	4640      	mov	r0, r8
 800626c:	4798      	blx	r3
 800626e:	462e      	mov	r6, r5
 8006270:	6825      	ldr	r5, [r4, #0]
 8006272:	f015 0510 	ands.w	r5, r5, #16
 8006276:	d159      	bne.n	800632c <_scanf_float+0x414>
 8006278:	7035      	strb	r5, [r6, #0]
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006284:	d11b      	bne.n	80062be <_scanf_float+0x3a6>
 8006286:	9b01      	ldr	r3, [sp, #4]
 8006288:	454b      	cmp	r3, r9
 800628a:	eba3 0209 	sub.w	r2, r3, r9
 800628e:	d123      	bne.n	80062d8 <_scanf_float+0x3c0>
 8006290:	2200      	movs	r2, #0
 8006292:	4659      	mov	r1, fp
 8006294:	4640      	mov	r0, r8
 8006296:	f000 ff09 	bl	80070ac <_strtod_r>
 800629a:	6822      	ldr	r2, [r4, #0]
 800629c:	9b03      	ldr	r3, [sp, #12]
 800629e:	f012 0f02 	tst.w	r2, #2
 80062a2:	ec57 6b10 	vmov	r6, r7, d0
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	d021      	beq.n	80062ee <_scanf_float+0x3d6>
 80062aa:	9903      	ldr	r1, [sp, #12]
 80062ac:	1d1a      	adds	r2, r3, #4
 80062ae:	600a      	str	r2, [r1, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	e9c3 6700 	strd	r6, r7, [r3]
 80062b6:	68e3      	ldr	r3, [r4, #12]
 80062b8:	3301      	adds	r3, #1
 80062ba:	60e3      	str	r3, [r4, #12]
 80062bc:	e66d      	b.n	8005f9a <_scanf_float+0x82>
 80062be:	9b04      	ldr	r3, [sp, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0e5      	beq.n	8006290 <_scanf_float+0x378>
 80062c4:	9905      	ldr	r1, [sp, #20]
 80062c6:	230a      	movs	r3, #10
 80062c8:	462a      	mov	r2, r5
 80062ca:	3101      	adds	r1, #1
 80062cc:	4640      	mov	r0, r8
 80062ce:	f000 ff75 	bl	80071bc <_strtol_r>
 80062d2:	9b04      	ldr	r3, [sp, #16]
 80062d4:	9e05      	ldr	r6, [sp, #20]
 80062d6:	1ac2      	subs	r2, r0, r3
 80062d8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80062dc:	429e      	cmp	r6, r3
 80062de:	bf28      	it	cs
 80062e0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80062e4:	4912      	ldr	r1, [pc, #72]	; (8006330 <_scanf_float+0x418>)
 80062e6:	4630      	mov	r0, r6
 80062e8:	f000 f82c 	bl	8006344 <siprintf>
 80062ec:	e7d0      	b.n	8006290 <_scanf_float+0x378>
 80062ee:	9903      	ldr	r1, [sp, #12]
 80062f0:	f012 0f04 	tst.w	r2, #4
 80062f4:	f103 0204 	add.w	r2, r3, #4
 80062f8:	600a      	str	r2, [r1, #0]
 80062fa:	d1d9      	bne.n	80062b0 <_scanf_float+0x398>
 80062fc:	f8d3 8000 	ldr.w	r8, [r3]
 8006300:	ee10 2a10 	vmov	r2, s0
 8006304:	ee10 0a10 	vmov	r0, s0
 8006308:	463b      	mov	r3, r7
 800630a:	4639      	mov	r1, r7
 800630c:	f7fa fc26 	bl	8000b5c <__aeabi_dcmpun>
 8006310:	b128      	cbz	r0, 800631e <_scanf_float+0x406>
 8006312:	4808      	ldr	r0, [pc, #32]	; (8006334 <_scanf_float+0x41c>)
 8006314:	f000 f810 	bl	8006338 <nanf>
 8006318:	ed88 0a00 	vstr	s0, [r8]
 800631c:	e7cb      	b.n	80062b6 <_scanf_float+0x39e>
 800631e:	4630      	mov	r0, r6
 8006320:	4639      	mov	r1, r7
 8006322:	f7fa fc79 	bl	8000c18 <__aeabi_d2f>
 8006326:	f8c8 0000 	str.w	r0, [r8]
 800632a:	e7c4      	b.n	80062b6 <_scanf_float+0x39e>
 800632c:	2500      	movs	r5, #0
 800632e:	e634      	b.n	8005f9a <_scanf_float+0x82>
 8006330:	0800c5a2 	.word	0x0800c5a2
 8006334:	0800c9c3 	.word	0x0800c9c3

08006338 <nanf>:
 8006338:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006340 <nanf+0x8>
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	7fc00000 	.word	0x7fc00000

08006344 <siprintf>:
 8006344:	b40e      	push	{r1, r2, r3}
 8006346:	b500      	push	{lr}
 8006348:	b09c      	sub	sp, #112	; 0x70
 800634a:	ab1d      	add	r3, sp, #116	; 0x74
 800634c:	9002      	str	r0, [sp, #8]
 800634e:	9006      	str	r0, [sp, #24]
 8006350:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006354:	4809      	ldr	r0, [pc, #36]	; (800637c <siprintf+0x38>)
 8006356:	9107      	str	r1, [sp, #28]
 8006358:	9104      	str	r1, [sp, #16]
 800635a:	4909      	ldr	r1, [pc, #36]	; (8006380 <siprintf+0x3c>)
 800635c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006360:	9105      	str	r1, [sp, #20]
 8006362:	6800      	ldr	r0, [r0, #0]
 8006364:	9301      	str	r3, [sp, #4]
 8006366:	a902      	add	r1, sp, #8
 8006368:	f002 ff8a 	bl	8009280 <_svfiprintf_r>
 800636c:	9b02      	ldr	r3, [sp, #8]
 800636e:	2200      	movs	r2, #0
 8006370:	701a      	strb	r2, [r3, #0]
 8006372:	b01c      	add	sp, #112	; 0x70
 8006374:	f85d eb04 	ldr.w	lr, [sp], #4
 8006378:	b003      	add	sp, #12
 800637a:	4770      	bx	lr
 800637c:	20000018 	.word	0x20000018
 8006380:	ffff0208 	.word	0xffff0208

08006384 <siscanf>:
 8006384:	b40e      	push	{r1, r2, r3}
 8006386:	b510      	push	{r4, lr}
 8006388:	b09f      	sub	sp, #124	; 0x7c
 800638a:	ac21      	add	r4, sp, #132	; 0x84
 800638c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006390:	f854 2b04 	ldr.w	r2, [r4], #4
 8006394:	9201      	str	r2, [sp, #4]
 8006396:	f8ad 101c 	strh.w	r1, [sp, #28]
 800639a:	9004      	str	r0, [sp, #16]
 800639c:	9008      	str	r0, [sp, #32]
 800639e:	f7f9 ff29 	bl	80001f4 <strlen>
 80063a2:	4b0c      	ldr	r3, [pc, #48]	; (80063d4 <siscanf+0x50>)
 80063a4:	9005      	str	r0, [sp, #20]
 80063a6:	9009      	str	r0, [sp, #36]	; 0x24
 80063a8:	930d      	str	r3, [sp, #52]	; 0x34
 80063aa:	480b      	ldr	r0, [pc, #44]	; (80063d8 <siscanf+0x54>)
 80063ac:	9a01      	ldr	r2, [sp, #4]
 80063ae:	6800      	ldr	r0, [r0, #0]
 80063b0:	9403      	str	r4, [sp, #12]
 80063b2:	2300      	movs	r3, #0
 80063b4:	9311      	str	r3, [sp, #68]	; 0x44
 80063b6:	9316      	str	r3, [sp, #88]	; 0x58
 80063b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063bc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80063c0:	a904      	add	r1, sp, #16
 80063c2:	4623      	mov	r3, r4
 80063c4:	f003 f8b6 	bl	8009534 <__ssvfiscanf_r>
 80063c8:	b01f      	add	sp, #124	; 0x7c
 80063ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063ce:	b003      	add	sp, #12
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	080063ff 	.word	0x080063ff
 80063d8:	20000018 	.word	0x20000018

080063dc <__sread>:
 80063dc:	b510      	push	{r4, lr}
 80063de:	460c      	mov	r4, r1
 80063e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063e4:	f003 fb70 	bl	8009ac8 <_read_r>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	bfab      	itete	ge
 80063ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063ee:	89a3      	ldrhlt	r3, [r4, #12]
 80063f0:	181b      	addge	r3, r3, r0
 80063f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063f6:	bfac      	ite	ge
 80063f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80063fa:	81a3      	strhlt	r3, [r4, #12]
 80063fc:	bd10      	pop	{r4, pc}

080063fe <__seofread>:
 80063fe:	2000      	movs	r0, #0
 8006400:	4770      	bx	lr

08006402 <__swrite>:
 8006402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006406:	461f      	mov	r7, r3
 8006408:	898b      	ldrh	r3, [r1, #12]
 800640a:	05db      	lsls	r3, r3, #23
 800640c:	4605      	mov	r5, r0
 800640e:	460c      	mov	r4, r1
 8006410:	4616      	mov	r6, r2
 8006412:	d505      	bpl.n	8006420 <__swrite+0x1e>
 8006414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006418:	2302      	movs	r3, #2
 800641a:	2200      	movs	r2, #0
 800641c:	f002 f8e2 	bl	80085e4 <_lseek_r>
 8006420:	89a3      	ldrh	r3, [r4, #12]
 8006422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006426:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800642a:	81a3      	strh	r3, [r4, #12]
 800642c:	4632      	mov	r2, r6
 800642e:	463b      	mov	r3, r7
 8006430:	4628      	mov	r0, r5
 8006432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006436:	f000 bec3 	b.w	80071c0 <_write_r>

0800643a <__sseek>:
 800643a:	b510      	push	{r4, lr}
 800643c:	460c      	mov	r4, r1
 800643e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006442:	f002 f8cf 	bl	80085e4 <_lseek_r>
 8006446:	1c43      	adds	r3, r0, #1
 8006448:	89a3      	ldrh	r3, [r4, #12]
 800644a:	bf15      	itete	ne
 800644c:	6560      	strne	r0, [r4, #84]	; 0x54
 800644e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006452:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006456:	81a3      	strheq	r3, [r4, #12]
 8006458:	bf18      	it	ne
 800645a:	81a3      	strhne	r3, [r4, #12]
 800645c:	bd10      	pop	{r4, pc}

0800645e <__sclose>:
 800645e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006462:	f000 bebf 	b.w	80071e4 <_close_r>

08006466 <sulp>:
 8006466:	b570      	push	{r4, r5, r6, lr}
 8006468:	4604      	mov	r4, r0
 800646a:	460d      	mov	r5, r1
 800646c:	ec45 4b10 	vmov	d0, r4, r5
 8006470:	4616      	mov	r6, r2
 8006472:	f002 fc63 	bl	8008d3c <__ulp>
 8006476:	ec51 0b10 	vmov	r0, r1, d0
 800647a:	b17e      	cbz	r6, 800649c <sulp+0x36>
 800647c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006480:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006484:	2b00      	cmp	r3, #0
 8006486:	dd09      	ble.n	800649c <sulp+0x36>
 8006488:	051b      	lsls	r3, r3, #20
 800648a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800648e:	2400      	movs	r4, #0
 8006490:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006494:	4622      	mov	r2, r4
 8006496:	462b      	mov	r3, r5
 8006498:	f7fa f8c6 	bl	8000628 <__aeabi_dmul>
 800649c:	bd70      	pop	{r4, r5, r6, pc}
	...

080064a0 <_strtod_l>:
 80064a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a4:	ed2d 8b02 	vpush	{d8}
 80064a8:	b09d      	sub	sp, #116	; 0x74
 80064aa:	461f      	mov	r7, r3
 80064ac:	2300      	movs	r3, #0
 80064ae:	9318      	str	r3, [sp, #96]	; 0x60
 80064b0:	4ba2      	ldr	r3, [pc, #648]	; (800673c <_strtod_l+0x29c>)
 80064b2:	9213      	str	r2, [sp, #76]	; 0x4c
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	9305      	str	r3, [sp, #20]
 80064b8:	4604      	mov	r4, r0
 80064ba:	4618      	mov	r0, r3
 80064bc:	4688      	mov	r8, r1
 80064be:	f7f9 fe99 	bl	80001f4 <strlen>
 80064c2:	f04f 0a00 	mov.w	sl, #0
 80064c6:	4605      	mov	r5, r0
 80064c8:	f04f 0b00 	mov.w	fp, #0
 80064cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80064d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80064d2:	781a      	ldrb	r2, [r3, #0]
 80064d4:	2a2b      	cmp	r2, #43	; 0x2b
 80064d6:	d04e      	beq.n	8006576 <_strtod_l+0xd6>
 80064d8:	d83b      	bhi.n	8006552 <_strtod_l+0xb2>
 80064da:	2a0d      	cmp	r2, #13
 80064dc:	d834      	bhi.n	8006548 <_strtod_l+0xa8>
 80064de:	2a08      	cmp	r2, #8
 80064e0:	d834      	bhi.n	800654c <_strtod_l+0xac>
 80064e2:	2a00      	cmp	r2, #0
 80064e4:	d03e      	beq.n	8006564 <_strtod_l+0xc4>
 80064e6:	2300      	movs	r3, #0
 80064e8:	930a      	str	r3, [sp, #40]	; 0x28
 80064ea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80064ec:	7833      	ldrb	r3, [r6, #0]
 80064ee:	2b30      	cmp	r3, #48	; 0x30
 80064f0:	f040 80b0 	bne.w	8006654 <_strtod_l+0x1b4>
 80064f4:	7873      	ldrb	r3, [r6, #1]
 80064f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80064fa:	2b58      	cmp	r3, #88	; 0x58
 80064fc:	d168      	bne.n	80065d0 <_strtod_l+0x130>
 80064fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006500:	9301      	str	r3, [sp, #4]
 8006502:	ab18      	add	r3, sp, #96	; 0x60
 8006504:	9702      	str	r7, [sp, #8]
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	4a8d      	ldr	r2, [pc, #564]	; (8006740 <_strtod_l+0x2a0>)
 800650a:	ab19      	add	r3, sp, #100	; 0x64
 800650c:	a917      	add	r1, sp, #92	; 0x5c
 800650e:	4620      	mov	r0, r4
 8006510:	f001 fd5c 	bl	8007fcc <__gethex>
 8006514:	f010 0707 	ands.w	r7, r0, #7
 8006518:	4605      	mov	r5, r0
 800651a:	d005      	beq.n	8006528 <_strtod_l+0x88>
 800651c:	2f06      	cmp	r7, #6
 800651e:	d12c      	bne.n	800657a <_strtod_l+0xda>
 8006520:	3601      	adds	r6, #1
 8006522:	2300      	movs	r3, #0
 8006524:	9617      	str	r6, [sp, #92]	; 0x5c
 8006526:	930a      	str	r3, [sp, #40]	; 0x28
 8006528:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800652a:	2b00      	cmp	r3, #0
 800652c:	f040 8590 	bne.w	8007050 <_strtod_l+0xbb0>
 8006530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006532:	b1eb      	cbz	r3, 8006570 <_strtod_l+0xd0>
 8006534:	4652      	mov	r2, sl
 8006536:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800653a:	ec43 2b10 	vmov	d0, r2, r3
 800653e:	b01d      	add	sp, #116	; 0x74
 8006540:	ecbd 8b02 	vpop	{d8}
 8006544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006548:	2a20      	cmp	r2, #32
 800654a:	d1cc      	bne.n	80064e6 <_strtod_l+0x46>
 800654c:	3301      	adds	r3, #1
 800654e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006550:	e7be      	b.n	80064d0 <_strtod_l+0x30>
 8006552:	2a2d      	cmp	r2, #45	; 0x2d
 8006554:	d1c7      	bne.n	80064e6 <_strtod_l+0x46>
 8006556:	2201      	movs	r2, #1
 8006558:	920a      	str	r2, [sp, #40]	; 0x28
 800655a:	1c5a      	adds	r2, r3, #1
 800655c:	9217      	str	r2, [sp, #92]	; 0x5c
 800655e:	785b      	ldrb	r3, [r3, #1]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1c2      	bne.n	80064ea <_strtod_l+0x4a>
 8006564:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006566:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800656a:	2b00      	cmp	r3, #0
 800656c:	f040 856e 	bne.w	800704c <_strtod_l+0xbac>
 8006570:	4652      	mov	r2, sl
 8006572:	465b      	mov	r3, fp
 8006574:	e7e1      	b.n	800653a <_strtod_l+0x9a>
 8006576:	2200      	movs	r2, #0
 8006578:	e7ee      	b.n	8006558 <_strtod_l+0xb8>
 800657a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800657c:	b13a      	cbz	r2, 800658e <_strtod_l+0xee>
 800657e:	2135      	movs	r1, #53	; 0x35
 8006580:	a81a      	add	r0, sp, #104	; 0x68
 8006582:	f002 fce6 	bl	8008f52 <__copybits>
 8006586:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006588:	4620      	mov	r0, r4
 800658a:	f002 f8a5 	bl	80086d8 <_Bfree>
 800658e:	3f01      	subs	r7, #1
 8006590:	2f04      	cmp	r7, #4
 8006592:	d806      	bhi.n	80065a2 <_strtod_l+0x102>
 8006594:	e8df f007 	tbb	[pc, r7]
 8006598:	1714030a 	.word	0x1714030a
 800659c:	0a          	.byte	0x0a
 800659d:	00          	.byte	0x00
 800659e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80065a2:	0728      	lsls	r0, r5, #28
 80065a4:	d5c0      	bpl.n	8006528 <_strtod_l+0x88>
 80065a6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80065aa:	e7bd      	b.n	8006528 <_strtod_l+0x88>
 80065ac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80065b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80065b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80065b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80065ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80065be:	e7f0      	b.n	80065a2 <_strtod_l+0x102>
 80065c0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006744 <_strtod_l+0x2a4>
 80065c4:	e7ed      	b.n	80065a2 <_strtod_l+0x102>
 80065c6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80065ca:	f04f 3aff 	mov.w	sl, #4294967295
 80065ce:	e7e8      	b.n	80065a2 <_strtod_l+0x102>
 80065d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80065d6:	785b      	ldrb	r3, [r3, #1]
 80065d8:	2b30      	cmp	r3, #48	; 0x30
 80065da:	d0f9      	beq.n	80065d0 <_strtod_l+0x130>
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d0a3      	beq.n	8006528 <_strtod_l+0x88>
 80065e0:	2301      	movs	r3, #1
 80065e2:	f04f 0900 	mov.w	r9, #0
 80065e6:	9304      	str	r3, [sp, #16]
 80065e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065ea:	9308      	str	r3, [sp, #32]
 80065ec:	f8cd 901c 	str.w	r9, [sp, #28]
 80065f0:	464f      	mov	r7, r9
 80065f2:	220a      	movs	r2, #10
 80065f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80065f6:	7806      	ldrb	r6, [r0, #0]
 80065f8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80065fc:	b2d9      	uxtb	r1, r3
 80065fe:	2909      	cmp	r1, #9
 8006600:	d92a      	bls.n	8006658 <_strtod_l+0x1b8>
 8006602:	9905      	ldr	r1, [sp, #20]
 8006604:	462a      	mov	r2, r5
 8006606:	f003 fac3 	bl	8009b90 <strncmp>
 800660a:	b398      	cbz	r0, 8006674 <_strtod_l+0x1d4>
 800660c:	2000      	movs	r0, #0
 800660e:	4632      	mov	r2, r6
 8006610:	463d      	mov	r5, r7
 8006612:	9005      	str	r0, [sp, #20]
 8006614:	4603      	mov	r3, r0
 8006616:	2a65      	cmp	r2, #101	; 0x65
 8006618:	d001      	beq.n	800661e <_strtod_l+0x17e>
 800661a:	2a45      	cmp	r2, #69	; 0x45
 800661c:	d118      	bne.n	8006650 <_strtod_l+0x1b0>
 800661e:	b91d      	cbnz	r5, 8006628 <_strtod_l+0x188>
 8006620:	9a04      	ldr	r2, [sp, #16]
 8006622:	4302      	orrs	r2, r0
 8006624:	d09e      	beq.n	8006564 <_strtod_l+0xc4>
 8006626:	2500      	movs	r5, #0
 8006628:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800662c:	f108 0201 	add.w	r2, r8, #1
 8006630:	9217      	str	r2, [sp, #92]	; 0x5c
 8006632:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006636:	2a2b      	cmp	r2, #43	; 0x2b
 8006638:	d075      	beq.n	8006726 <_strtod_l+0x286>
 800663a:	2a2d      	cmp	r2, #45	; 0x2d
 800663c:	d07b      	beq.n	8006736 <_strtod_l+0x296>
 800663e:	f04f 0c00 	mov.w	ip, #0
 8006642:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006646:	2909      	cmp	r1, #9
 8006648:	f240 8082 	bls.w	8006750 <_strtod_l+0x2b0>
 800664c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006650:	2600      	movs	r6, #0
 8006652:	e09d      	b.n	8006790 <_strtod_l+0x2f0>
 8006654:	2300      	movs	r3, #0
 8006656:	e7c4      	b.n	80065e2 <_strtod_l+0x142>
 8006658:	2f08      	cmp	r7, #8
 800665a:	bfd8      	it	le
 800665c:	9907      	ldrle	r1, [sp, #28]
 800665e:	f100 0001 	add.w	r0, r0, #1
 8006662:	bfda      	itte	le
 8006664:	fb02 3301 	mlale	r3, r2, r1, r3
 8006668:	9307      	strle	r3, [sp, #28]
 800666a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800666e:	3701      	adds	r7, #1
 8006670:	9017      	str	r0, [sp, #92]	; 0x5c
 8006672:	e7bf      	b.n	80065f4 <_strtod_l+0x154>
 8006674:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006676:	195a      	adds	r2, r3, r5
 8006678:	9217      	str	r2, [sp, #92]	; 0x5c
 800667a:	5d5a      	ldrb	r2, [r3, r5]
 800667c:	2f00      	cmp	r7, #0
 800667e:	d037      	beq.n	80066f0 <_strtod_l+0x250>
 8006680:	9005      	str	r0, [sp, #20]
 8006682:	463d      	mov	r5, r7
 8006684:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006688:	2b09      	cmp	r3, #9
 800668a:	d912      	bls.n	80066b2 <_strtod_l+0x212>
 800668c:	2301      	movs	r3, #1
 800668e:	e7c2      	b.n	8006616 <_strtod_l+0x176>
 8006690:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	9217      	str	r2, [sp, #92]	; 0x5c
 8006696:	785a      	ldrb	r2, [r3, #1]
 8006698:	3001      	adds	r0, #1
 800669a:	2a30      	cmp	r2, #48	; 0x30
 800669c:	d0f8      	beq.n	8006690 <_strtod_l+0x1f0>
 800669e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80066a2:	2b08      	cmp	r3, #8
 80066a4:	f200 84d9 	bhi.w	800705a <_strtod_l+0xbba>
 80066a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066aa:	9005      	str	r0, [sp, #20]
 80066ac:	2000      	movs	r0, #0
 80066ae:	9308      	str	r3, [sp, #32]
 80066b0:	4605      	mov	r5, r0
 80066b2:	3a30      	subs	r2, #48	; 0x30
 80066b4:	f100 0301 	add.w	r3, r0, #1
 80066b8:	d014      	beq.n	80066e4 <_strtod_l+0x244>
 80066ba:	9905      	ldr	r1, [sp, #20]
 80066bc:	4419      	add	r1, r3
 80066be:	9105      	str	r1, [sp, #20]
 80066c0:	462b      	mov	r3, r5
 80066c2:	eb00 0e05 	add.w	lr, r0, r5
 80066c6:	210a      	movs	r1, #10
 80066c8:	4573      	cmp	r3, lr
 80066ca:	d113      	bne.n	80066f4 <_strtod_l+0x254>
 80066cc:	182b      	adds	r3, r5, r0
 80066ce:	2b08      	cmp	r3, #8
 80066d0:	f105 0501 	add.w	r5, r5, #1
 80066d4:	4405      	add	r5, r0
 80066d6:	dc1c      	bgt.n	8006712 <_strtod_l+0x272>
 80066d8:	9907      	ldr	r1, [sp, #28]
 80066da:	230a      	movs	r3, #10
 80066dc:	fb03 2301 	mla	r3, r3, r1, r2
 80066e0:	9307      	str	r3, [sp, #28]
 80066e2:	2300      	movs	r3, #0
 80066e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80066e6:	1c51      	adds	r1, r2, #1
 80066e8:	9117      	str	r1, [sp, #92]	; 0x5c
 80066ea:	7852      	ldrb	r2, [r2, #1]
 80066ec:	4618      	mov	r0, r3
 80066ee:	e7c9      	b.n	8006684 <_strtod_l+0x1e4>
 80066f0:	4638      	mov	r0, r7
 80066f2:	e7d2      	b.n	800669a <_strtod_l+0x1fa>
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	dc04      	bgt.n	8006702 <_strtod_l+0x262>
 80066f8:	9e07      	ldr	r6, [sp, #28]
 80066fa:	434e      	muls	r6, r1
 80066fc:	9607      	str	r6, [sp, #28]
 80066fe:	3301      	adds	r3, #1
 8006700:	e7e2      	b.n	80066c8 <_strtod_l+0x228>
 8006702:	f103 0c01 	add.w	ip, r3, #1
 8006706:	f1bc 0f10 	cmp.w	ip, #16
 800670a:	bfd8      	it	le
 800670c:	fb01 f909 	mulle.w	r9, r1, r9
 8006710:	e7f5      	b.n	80066fe <_strtod_l+0x25e>
 8006712:	2d10      	cmp	r5, #16
 8006714:	bfdc      	itt	le
 8006716:	230a      	movle	r3, #10
 8006718:	fb03 2909 	mlale	r9, r3, r9, r2
 800671c:	e7e1      	b.n	80066e2 <_strtod_l+0x242>
 800671e:	2300      	movs	r3, #0
 8006720:	9305      	str	r3, [sp, #20]
 8006722:	2301      	movs	r3, #1
 8006724:	e77c      	b.n	8006620 <_strtod_l+0x180>
 8006726:	f04f 0c00 	mov.w	ip, #0
 800672a:	f108 0202 	add.w	r2, r8, #2
 800672e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006730:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006734:	e785      	b.n	8006642 <_strtod_l+0x1a2>
 8006736:	f04f 0c01 	mov.w	ip, #1
 800673a:	e7f6      	b.n	800672a <_strtod_l+0x28a>
 800673c:	0800c7f0 	.word	0x0800c7f0
 8006740:	0800c5a8 	.word	0x0800c5a8
 8006744:	7ff00000 	.word	0x7ff00000
 8006748:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800674a:	1c51      	adds	r1, r2, #1
 800674c:	9117      	str	r1, [sp, #92]	; 0x5c
 800674e:	7852      	ldrb	r2, [r2, #1]
 8006750:	2a30      	cmp	r2, #48	; 0x30
 8006752:	d0f9      	beq.n	8006748 <_strtod_l+0x2a8>
 8006754:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006758:	2908      	cmp	r1, #8
 800675a:	f63f af79 	bhi.w	8006650 <_strtod_l+0x1b0>
 800675e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006762:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006764:	9206      	str	r2, [sp, #24]
 8006766:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006768:	1c51      	adds	r1, r2, #1
 800676a:	9117      	str	r1, [sp, #92]	; 0x5c
 800676c:	7852      	ldrb	r2, [r2, #1]
 800676e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006772:	2e09      	cmp	r6, #9
 8006774:	d937      	bls.n	80067e6 <_strtod_l+0x346>
 8006776:	9e06      	ldr	r6, [sp, #24]
 8006778:	1b89      	subs	r1, r1, r6
 800677a:	2908      	cmp	r1, #8
 800677c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006780:	dc02      	bgt.n	8006788 <_strtod_l+0x2e8>
 8006782:	4576      	cmp	r6, lr
 8006784:	bfa8      	it	ge
 8006786:	4676      	movge	r6, lr
 8006788:	f1bc 0f00 	cmp.w	ip, #0
 800678c:	d000      	beq.n	8006790 <_strtod_l+0x2f0>
 800678e:	4276      	negs	r6, r6
 8006790:	2d00      	cmp	r5, #0
 8006792:	d14d      	bne.n	8006830 <_strtod_l+0x390>
 8006794:	9904      	ldr	r1, [sp, #16]
 8006796:	4301      	orrs	r1, r0
 8006798:	f47f aec6 	bne.w	8006528 <_strtod_l+0x88>
 800679c:	2b00      	cmp	r3, #0
 800679e:	f47f aee1 	bne.w	8006564 <_strtod_l+0xc4>
 80067a2:	2a69      	cmp	r2, #105	; 0x69
 80067a4:	d027      	beq.n	80067f6 <_strtod_l+0x356>
 80067a6:	dc24      	bgt.n	80067f2 <_strtod_l+0x352>
 80067a8:	2a49      	cmp	r2, #73	; 0x49
 80067aa:	d024      	beq.n	80067f6 <_strtod_l+0x356>
 80067ac:	2a4e      	cmp	r2, #78	; 0x4e
 80067ae:	f47f aed9 	bne.w	8006564 <_strtod_l+0xc4>
 80067b2:	499f      	ldr	r1, [pc, #636]	; (8006a30 <_strtod_l+0x590>)
 80067b4:	a817      	add	r0, sp, #92	; 0x5c
 80067b6:	f001 fe61 	bl	800847c <__match>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	f43f aed2 	beq.w	8006564 <_strtod_l+0xc4>
 80067c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	2b28      	cmp	r3, #40	; 0x28
 80067c6:	d12d      	bne.n	8006824 <_strtod_l+0x384>
 80067c8:	499a      	ldr	r1, [pc, #616]	; (8006a34 <_strtod_l+0x594>)
 80067ca:	aa1a      	add	r2, sp, #104	; 0x68
 80067cc:	a817      	add	r0, sp, #92	; 0x5c
 80067ce:	f001 fe69 	bl	80084a4 <__hexnan>
 80067d2:	2805      	cmp	r0, #5
 80067d4:	d126      	bne.n	8006824 <_strtod_l+0x384>
 80067d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80067dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80067e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80067e4:	e6a0      	b.n	8006528 <_strtod_l+0x88>
 80067e6:	210a      	movs	r1, #10
 80067e8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80067ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80067f0:	e7b9      	b.n	8006766 <_strtod_l+0x2c6>
 80067f2:	2a6e      	cmp	r2, #110	; 0x6e
 80067f4:	e7db      	b.n	80067ae <_strtod_l+0x30e>
 80067f6:	4990      	ldr	r1, [pc, #576]	; (8006a38 <_strtod_l+0x598>)
 80067f8:	a817      	add	r0, sp, #92	; 0x5c
 80067fa:	f001 fe3f 	bl	800847c <__match>
 80067fe:	2800      	cmp	r0, #0
 8006800:	f43f aeb0 	beq.w	8006564 <_strtod_l+0xc4>
 8006804:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006806:	498d      	ldr	r1, [pc, #564]	; (8006a3c <_strtod_l+0x59c>)
 8006808:	3b01      	subs	r3, #1
 800680a:	a817      	add	r0, sp, #92	; 0x5c
 800680c:	9317      	str	r3, [sp, #92]	; 0x5c
 800680e:	f001 fe35 	bl	800847c <__match>
 8006812:	b910      	cbnz	r0, 800681a <_strtod_l+0x37a>
 8006814:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006816:	3301      	adds	r3, #1
 8006818:	9317      	str	r3, [sp, #92]	; 0x5c
 800681a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006a4c <_strtod_l+0x5ac>
 800681e:	f04f 0a00 	mov.w	sl, #0
 8006822:	e681      	b.n	8006528 <_strtod_l+0x88>
 8006824:	4886      	ldr	r0, [pc, #536]	; (8006a40 <_strtod_l+0x5a0>)
 8006826:	f003 f963 	bl	8009af0 <nan>
 800682a:	ec5b ab10 	vmov	sl, fp, d0
 800682e:	e67b      	b.n	8006528 <_strtod_l+0x88>
 8006830:	9b05      	ldr	r3, [sp, #20]
 8006832:	9807      	ldr	r0, [sp, #28]
 8006834:	1af3      	subs	r3, r6, r3
 8006836:	2f00      	cmp	r7, #0
 8006838:	bf08      	it	eq
 800683a:	462f      	moveq	r7, r5
 800683c:	2d10      	cmp	r5, #16
 800683e:	9306      	str	r3, [sp, #24]
 8006840:	46a8      	mov	r8, r5
 8006842:	bfa8      	it	ge
 8006844:	f04f 0810 	movge.w	r8, #16
 8006848:	f7f9 fe74 	bl	8000534 <__aeabi_ui2d>
 800684c:	2d09      	cmp	r5, #9
 800684e:	4682      	mov	sl, r0
 8006850:	468b      	mov	fp, r1
 8006852:	dd13      	ble.n	800687c <_strtod_l+0x3dc>
 8006854:	4b7b      	ldr	r3, [pc, #492]	; (8006a44 <_strtod_l+0x5a4>)
 8006856:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800685a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800685e:	f7f9 fee3 	bl	8000628 <__aeabi_dmul>
 8006862:	4682      	mov	sl, r0
 8006864:	4648      	mov	r0, r9
 8006866:	468b      	mov	fp, r1
 8006868:	f7f9 fe64 	bl	8000534 <__aeabi_ui2d>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4650      	mov	r0, sl
 8006872:	4659      	mov	r1, fp
 8006874:	f7f9 fd22 	bl	80002bc <__adddf3>
 8006878:	4682      	mov	sl, r0
 800687a:	468b      	mov	fp, r1
 800687c:	2d0f      	cmp	r5, #15
 800687e:	dc38      	bgt.n	80068f2 <_strtod_l+0x452>
 8006880:	9b06      	ldr	r3, [sp, #24]
 8006882:	2b00      	cmp	r3, #0
 8006884:	f43f ae50 	beq.w	8006528 <_strtod_l+0x88>
 8006888:	dd24      	ble.n	80068d4 <_strtod_l+0x434>
 800688a:	2b16      	cmp	r3, #22
 800688c:	dc0b      	bgt.n	80068a6 <_strtod_l+0x406>
 800688e:	496d      	ldr	r1, [pc, #436]	; (8006a44 <_strtod_l+0x5a4>)
 8006890:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006894:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006898:	4652      	mov	r2, sl
 800689a:	465b      	mov	r3, fp
 800689c:	f7f9 fec4 	bl	8000628 <__aeabi_dmul>
 80068a0:	4682      	mov	sl, r0
 80068a2:	468b      	mov	fp, r1
 80068a4:	e640      	b.n	8006528 <_strtod_l+0x88>
 80068a6:	9a06      	ldr	r2, [sp, #24]
 80068a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80068ac:	4293      	cmp	r3, r2
 80068ae:	db20      	blt.n	80068f2 <_strtod_l+0x452>
 80068b0:	4c64      	ldr	r4, [pc, #400]	; (8006a44 <_strtod_l+0x5a4>)
 80068b2:	f1c5 050f 	rsb	r5, r5, #15
 80068b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80068ba:	4652      	mov	r2, sl
 80068bc:	465b      	mov	r3, fp
 80068be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068c2:	f7f9 feb1 	bl	8000628 <__aeabi_dmul>
 80068c6:	9b06      	ldr	r3, [sp, #24]
 80068c8:	1b5d      	subs	r5, r3, r5
 80068ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80068ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80068d2:	e7e3      	b.n	800689c <_strtod_l+0x3fc>
 80068d4:	9b06      	ldr	r3, [sp, #24]
 80068d6:	3316      	adds	r3, #22
 80068d8:	db0b      	blt.n	80068f2 <_strtod_l+0x452>
 80068da:	9b05      	ldr	r3, [sp, #20]
 80068dc:	1b9e      	subs	r6, r3, r6
 80068de:	4b59      	ldr	r3, [pc, #356]	; (8006a44 <_strtod_l+0x5a4>)
 80068e0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80068e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80068e8:	4650      	mov	r0, sl
 80068ea:	4659      	mov	r1, fp
 80068ec:	f7f9 ffc6 	bl	800087c <__aeabi_ddiv>
 80068f0:	e7d6      	b.n	80068a0 <_strtod_l+0x400>
 80068f2:	9b06      	ldr	r3, [sp, #24]
 80068f4:	eba5 0808 	sub.w	r8, r5, r8
 80068f8:	4498      	add	r8, r3
 80068fa:	f1b8 0f00 	cmp.w	r8, #0
 80068fe:	dd74      	ble.n	80069ea <_strtod_l+0x54a>
 8006900:	f018 030f 	ands.w	r3, r8, #15
 8006904:	d00a      	beq.n	800691c <_strtod_l+0x47c>
 8006906:	494f      	ldr	r1, [pc, #316]	; (8006a44 <_strtod_l+0x5a4>)
 8006908:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800690c:	4652      	mov	r2, sl
 800690e:	465b      	mov	r3, fp
 8006910:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006914:	f7f9 fe88 	bl	8000628 <__aeabi_dmul>
 8006918:	4682      	mov	sl, r0
 800691a:	468b      	mov	fp, r1
 800691c:	f038 080f 	bics.w	r8, r8, #15
 8006920:	d04f      	beq.n	80069c2 <_strtod_l+0x522>
 8006922:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006926:	dd22      	ble.n	800696e <_strtod_l+0x4ce>
 8006928:	2500      	movs	r5, #0
 800692a:	462e      	mov	r6, r5
 800692c:	9507      	str	r5, [sp, #28]
 800692e:	9505      	str	r5, [sp, #20]
 8006930:	2322      	movs	r3, #34	; 0x22
 8006932:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006a4c <_strtod_l+0x5ac>
 8006936:	6023      	str	r3, [r4, #0]
 8006938:	f04f 0a00 	mov.w	sl, #0
 800693c:	9b07      	ldr	r3, [sp, #28]
 800693e:	2b00      	cmp	r3, #0
 8006940:	f43f adf2 	beq.w	8006528 <_strtod_l+0x88>
 8006944:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006946:	4620      	mov	r0, r4
 8006948:	f001 fec6 	bl	80086d8 <_Bfree>
 800694c:	9905      	ldr	r1, [sp, #20]
 800694e:	4620      	mov	r0, r4
 8006950:	f001 fec2 	bl	80086d8 <_Bfree>
 8006954:	4631      	mov	r1, r6
 8006956:	4620      	mov	r0, r4
 8006958:	f001 febe 	bl	80086d8 <_Bfree>
 800695c:	9907      	ldr	r1, [sp, #28]
 800695e:	4620      	mov	r0, r4
 8006960:	f001 feba 	bl	80086d8 <_Bfree>
 8006964:	4629      	mov	r1, r5
 8006966:	4620      	mov	r0, r4
 8006968:	f001 feb6 	bl	80086d8 <_Bfree>
 800696c:	e5dc      	b.n	8006528 <_strtod_l+0x88>
 800696e:	4b36      	ldr	r3, [pc, #216]	; (8006a48 <_strtod_l+0x5a8>)
 8006970:	9304      	str	r3, [sp, #16]
 8006972:	2300      	movs	r3, #0
 8006974:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006978:	4650      	mov	r0, sl
 800697a:	4659      	mov	r1, fp
 800697c:	4699      	mov	r9, r3
 800697e:	f1b8 0f01 	cmp.w	r8, #1
 8006982:	dc21      	bgt.n	80069c8 <_strtod_l+0x528>
 8006984:	b10b      	cbz	r3, 800698a <_strtod_l+0x4ea>
 8006986:	4682      	mov	sl, r0
 8006988:	468b      	mov	fp, r1
 800698a:	4b2f      	ldr	r3, [pc, #188]	; (8006a48 <_strtod_l+0x5a8>)
 800698c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006990:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006994:	4652      	mov	r2, sl
 8006996:	465b      	mov	r3, fp
 8006998:	e9d9 0100 	ldrd	r0, r1, [r9]
 800699c:	f7f9 fe44 	bl	8000628 <__aeabi_dmul>
 80069a0:	4b2a      	ldr	r3, [pc, #168]	; (8006a4c <_strtod_l+0x5ac>)
 80069a2:	460a      	mov	r2, r1
 80069a4:	400b      	ands	r3, r1
 80069a6:	492a      	ldr	r1, [pc, #168]	; (8006a50 <_strtod_l+0x5b0>)
 80069a8:	428b      	cmp	r3, r1
 80069aa:	4682      	mov	sl, r0
 80069ac:	d8bc      	bhi.n	8006928 <_strtod_l+0x488>
 80069ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80069b2:	428b      	cmp	r3, r1
 80069b4:	bf86      	itte	hi
 80069b6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006a54 <_strtod_l+0x5b4>
 80069ba:	f04f 3aff 	movhi.w	sl, #4294967295
 80069be:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80069c2:	2300      	movs	r3, #0
 80069c4:	9304      	str	r3, [sp, #16]
 80069c6:	e084      	b.n	8006ad2 <_strtod_l+0x632>
 80069c8:	f018 0f01 	tst.w	r8, #1
 80069cc:	d005      	beq.n	80069da <_strtod_l+0x53a>
 80069ce:	9b04      	ldr	r3, [sp, #16]
 80069d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d4:	f7f9 fe28 	bl	8000628 <__aeabi_dmul>
 80069d8:	2301      	movs	r3, #1
 80069da:	9a04      	ldr	r2, [sp, #16]
 80069dc:	3208      	adds	r2, #8
 80069de:	f109 0901 	add.w	r9, r9, #1
 80069e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80069e6:	9204      	str	r2, [sp, #16]
 80069e8:	e7c9      	b.n	800697e <_strtod_l+0x4de>
 80069ea:	d0ea      	beq.n	80069c2 <_strtod_l+0x522>
 80069ec:	f1c8 0800 	rsb	r8, r8, #0
 80069f0:	f018 020f 	ands.w	r2, r8, #15
 80069f4:	d00a      	beq.n	8006a0c <_strtod_l+0x56c>
 80069f6:	4b13      	ldr	r3, [pc, #76]	; (8006a44 <_strtod_l+0x5a4>)
 80069f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069fc:	4650      	mov	r0, sl
 80069fe:	4659      	mov	r1, fp
 8006a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a04:	f7f9 ff3a 	bl	800087c <__aeabi_ddiv>
 8006a08:	4682      	mov	sl, r0
 8006a0a:	468b      	mov	fp, r1
 8006a0c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006a10:	d0d7      	beq.n	80069c2 <_strtod_l+0x522>
 8006a12:	f1b8 0f1f 	cmp.w	r8, #31
 8006a16:	dd1f      	ble.n	8006a58 <_strtod_l+0x5b8>
 8006a18:	2500      	movs	r5, #0
 8006a1a:	462e      	mov	r6, r5
 8006a1c:	9507      	str	r5, [sp, #28]
 8006a1e:	9505      	str	r5, [sp, #20]
 8006a20:	2322      	movs	r3, #34	; 0x22
 8006a22:	f04f 0a00 	mov.w	sl, #0
 8006a26:	f04f 0b00 	mov.w	fp, #0
 8006a2a:	6023      	str	r3, [r4, #0]
 8006a2c:	e786      	b.n	800693c <_strtod_l+0x49c>
 8006a2e:	bf00      	nop
 8006a30:	0800c57d 	.word	0x0800c57d
 8006a34:	0800c5bc 	.word	0x0800c5bc
 8006a38:	0800c575 	.word	0x0800c575
 8006a3c:	0800c6fc 	.word	0x0800c6fc
 8006a40:	0800c9c3 	.word	0x0800c9c3
 8006a44:	0800c888 	.word	0x0800c888
 8006a48:	0800c860 	.word	0x0800c860
 8006a4c:	7ff00000 	.word	0x7ff00000
 8006a50:	7ca00000 	.word	0x7ca00000
 8006a54:	7fefffff 	.word	0x7fefffff
 8006a58:	f018 0310 	ands.w	r3, r8, #16
 8006a5c:	bf18      	it	ne
 8006a5e:	236a      	movne	r3, #106	; 0x6a
 8006a60:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006e10 <_strtod_l+0x970>
 8006a64:	9304      	str	r3, [sp, #16]
 8006a66:	4650      	mov	r0, sl
 8006a68:	4659      	mov	r1, fp
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f018 0f01 	tst.w	r8, #1
 8006a70:	d004      	beq.n	8006a7c <_strtod_l+0x5dc>
 8006a72:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006a76:	f7f9 fdd7 	bl	8000628 <__aeabi_dmul>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006a80:	f109 0908 	add.w	r9, r9, #8
 8006a84:	d1f2      	bne.n	8006a6c <_strtod_l+0x5cc>
 8006a86:	b10b      	cbz	r3, 8006a8c <_strtod_l+0x5ec>
 8006a88:	4682      	mov	sl, r0
 8006a8a:	468b      	mov	fp, r1
 8006a8c:	9b04      	ldr	r3, [sp, #16]
 8006a8e:	b1c3      	cbz	r3, 8006ac2 <_strtod_l+0x622>
 8006a90:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006a94:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	4659      	mov	r1, fp
 8006a9c:	dd11      	ble.n	8006ac2 <_strtod_l+0x622>
 8006a9e:	2b1f      	cmp	r3, #31
 8006aa0:	f340 8124 	ble.w	8006cec <_strtod_l+0x84c>
 8006aa4:	2b34      	cmp	r3, #52	; 0x34
 8006aa6:	bfde      	ittt	le
 8006aa8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006aac:	f04f 33ff 	movle.w	r3, #4294967295
 8006ab0:	fa03 f202 	lslle.w	r2, r3, r2
 8006ab4:	f04f 0a00 	mov.w	sl, #0
 8006ab8:	bfcc      	ite	gt
 8006aba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006abe:	ea02 0b01 	andle.w	fp, r2, r1
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	4650      	mov	r0, sl
 8006ac8:	4659      	mov	r1, fp
 8006aca:	f7fa f815 	bl	8000af8 <__aeabi_dcmpeq>
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	d1a2      	bne.n	8006a18 <_strtod_l+0x578>
 8006ad2:	9b07      	ldr	r3, [sp, #28]
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	9908      	ldr	r1, [sp, #32]
 8006ad8:	462b      	mov	r3, r5
 8006ada:	463a      	mov	r2, r7
 8006adc:	4620      	mov	r0, r4
 8006ade:	f001 fe63 	bl	80087a8 <__s2b>
 8006ae2:	9007      	str	r0, [sp, #28]
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	f43f af1f 	beq.w	8006928 <_strtod_l+0x488>
 8006aea:	9b05      	ldr	r3, [sp, #20]
 8006aec:	1b9e      	subs	r6, r3, r6
 8006aee:	9b06      	ldr	r3, [sp, #24]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	bfb4      	ite	lt
 8006af4:	4633      	movlt	r3, r6
 8006af6:	2300      	movge	r3, #0
 8006af8:	930c      	str	r3, [sp, #48]	; 0x30
 8006afa:	9b06      	ldr	r3, [sp, #24]
 8006afc:	2500      	movs	r5, #0
 8006afe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006b02:	9312      	str	r3, [sp, #72]	; 0x48
 8006b04:	462e      	mov	r6, r5
 8006b06:	9b07      	ldr	r3, [sp, #28]
 8006b08:	4620      	mov	r0, r4
 8006b0a:	6859      	ldr	r1, [r3, #4]
 8006b0c:	f001 fda4 	bl	8008658 <_Balloc>
 8006b10:	9005      	str	r0, [sp, #20]
 8006b12:	2800      	cmp	r0, #0
 8006b14:	f43f af0c 	beq.w	8006930 <_strtod_l+0x490>
 8006b18:	9b07      	ldr	r3, [sp, #28]
 8006b1a:	691a      	ldr	r2, [r3, #16]
 8006b1c:	3202      	adds	r2, #2
 8006b1e:	f103 010c 	add.w	r1, r3, #12
 8006b22:	0092      	lsls	r2, r2, #2
 8006b24:	300c      	adds	r0, #12
 8006b26:	f001 fd89 	bl	800863c <memcpy>
 8006b2a:	ec4b ab10 	vmov	d0, sl, fp
 8006b2e:	aa1a      	add	r2, sp, #104	; 0x68
 8006b30:	a919      	add	r1, sp, #100	; 0x64
 8006b32:	4620      	mov	r0, r4
 8006b34:	f002 f97e 	bl	8008e34 <__d2b>
 8006b38:	ec4b ab18 	vmov	d8, sl, fp
 8006b3c:	9018      	str	r0, [sp, #96]	; 0x60
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	f43f aef6 	beq.w	8006930 <_strtod_l+0x490>
 8006b44:	2101      	movs	r1, #1
 8006b46:	4620      	mov	r0, r4
 8006b48:	f001 fec8 	bl	80088dc <__i2b>
 8006b4c:	4606      	mov	r6, r0
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	f43f aeee 	beq.w	8006930 <_strtod_l+0x490>
 8006b54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b56:	9904      	ldr	r1, [sp, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	bfab      	itete	ge
 8006b5c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006b5e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006b60:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006b62:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006b66:	bfac      	ite	ge
 8006b68:	eb03 0902 	addge.w	r9, r3, r2
 8006b6c:	1ad7      	sublt	r7, r2, r3
 8006b6e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006b70:	eba3 0801 	sub.w	r8, r3, r1
 8006b74:	4490      	add	r8, r2
 8006b76:	4ba1      	ldr	r3, [pc, #644]	; (8006dfc <_strtod_l+0x95c>)
 8006b78:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b7c:	4598      	cmp	r8, r3
 8006b7e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006b82:	f280 80c7 	bge.w	8006d14 <_strtod_l+0x874>
 8006b86:	eba3 0308 	sub.w	r3, r3, r8
 8006b8a:	2b1f      	cmp	r3, #31
 8006b8c:	eba2 0203 	sub.w	r2, r2, r3
 8006b90:	f04f 0101 	mov.w	r1, #1
 8006b94:	f300 80b1 	bgt.w	8006cfa <_strtod_l+0x85a>
 8006b98:	fa01 f303 	lsl.w	r3, r1, r3
 8006b9c:	930d      	str	r3, [sp, #52]	; 0x34
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	9308      	str	r3, [sp, #32]
 8006ba2:	eb09 0802 	add.w	r8, r9, r2
 8006ba6:	9b04      	ldr	r3, [sp, #16]
 8006ba8:	45c1      	cmp	r9, r8
 8006baa:	4417      	add	r7, r2
 8006bac:	441f      	add	r7, r3
 8006bae:	464b      	mov	r3, r9
 8006bb0:	bfa8      	it	ge
 8006bb2:	4643      	movge	r3, r8
 8006bb4:	42bb      	cmp	r3, r7
 8006bb6:	bfa8      	it	ge
 8006bb8:	463b      	movge	r3, r7
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	bfc2      	ittt	gt
 8006bbe:	eba8 0803 	subgt.w	r8, r8, r3
 8006bc2:	1aff      	subgt	r7, r7, r3
 8006bc4:	eba9 0903 	subgt.w	r9, r9, r3
 8006bc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	dd17      	ble.n	8006bfe <_strtod_l+0x75e>
 8006bce:	4631      	mov	r1, r6
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f001 ff42 	bl	8008a5c <__pow5mult>
 8006bd8:	4606      	mov	r6, r0
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	f43f aea8 	beq.w	8006930 <_strtod_l+0x490>
 8006be0:	4601      	mov	r1, r0
 8006be2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006be4:	4620      	mov	r0, r4
 8006be6:	f001 fe8f 	bl	8008908 <__multiply>
 8006bea:	900b      	str	r0, [sp, #44]	; 0x2c
 8006bec:	2800      	cmp	r0, #0
 8006bee:	f43f ae9f 	beq.w	8006930 <_strtod_l+0x490>
 8006bf2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	f001 fd6f 	bl	80086d8 <_Bfree>
 8006bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bfc:	9318      	str	r3, [sp, #96]	; 0x60
 8006bfe:	f1b8 0f00 	cmp.w	r8, #0
 8006c02:	f300 808c 	bgt.w	8006d1e <_strtod_l+0x87e>
 8006c06:	9b06      	ldr	r3, [sp, #24]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	dd08      	ble.n	8006c1e <_strtod_l+0x77e>
 8006c0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c0e:	9905      	ldr	r1, [sp, #20]
 8006c10:	4620      	mov	r0, r4
 8006c12:	f001 ff23 	bl	8008a5c <__pow5mult>
 8006c16:	9005      	str	r0, [sp, #20]
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	f43f ae89 	beq.w	8006930 <_strtod_l+0x490>
 8006c1e:	2f00      	cmp	r7, #0
 8006c20:	dd08      	ble.n	8006c34 <_strtod_l+0x794>
 8006c22:	9905      	ldr	r1, [sp, #20]
 8006c24:	463a      	mov	r2, r7
 8006c26:	4620      	mov	r0, r4
 8006c28:	f001 ff72 	bl	8008b10 <__lshift>
 8006c2c:	9005      	str	r0, [sp, #20]
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	f43f ae7e 	beq.w	8006930 <_strtod_l+0x490>
 8006c34:	f1b9 0f00 	cmp.w	r9, #0
 8006c38:	dd08      	ble.n	8006c4c <_strtod_l+0x7ac>
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	464a      	mov	r2, r9
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f001 ff66 	bl	8008b10 <__lshift>
 8006c44:	4606      	mov	r6, r0
 8006c46:	2800      	cmp	r0, #0
 8006c48:	f43f ae72 	beq.w	8006930 <_strtod_l+0x490>
 8006c4c:	9a05      	ldr	r2, [sp, #20]
 8006c4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006c50:	4620      	mov	r0, r4
 8006c52:	f001 ffe9 	bl	8008c28 <__mdiff>
 8006c56:	4605      	mov	r5, r0
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	f43f ae69 	beq.w	8006930 <_strtod_l+0x490>
 8006c5e:	68c3      	ldr	r3, [r0, #12]
 8006c60:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c62:	2300      	movs	r3, #0
 8006c64:	60c3      	str	r3, [r0, #12]
 8006c66:	4631      	mov	r1, r6
 8006c68:	f001 ffc2 	bl	8008bf0 <__mcmp>
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	da60      	bge.n	8006d32 <_strtod_l+0x892>
 8006c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c72:	ea53 030a 	orrs.w	r3, r3, sl
 8006c76:	f040 8082 	bne.w	8006d7e <_strtod_l+0x8de>
 8006c7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d17d      	bne.n	8006d7e <_strtod_l+0x8de>
 8006c82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c86:	0d1b      	lsrs	r3, r3, #20
 8006c88:	051b      	lsls	r3, r3, #20
 8006c8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006c8e:	d976      	bls.n	8006d7e <_strtod_l+0x8de>
 8006c90:	696b      	ldr	r3, [r5, #20]
 8006c92:	b913      	cbnz	r3, 8006c9a <_strtod_l+0x7fa>
 8006c94:	692b      	ldr	r3, [r5, #16]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	dd71      	ble.n	8006d7e <_strtod_l+0x8de>
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f001 ff36 	bl	8008b10 <__lshift>
 8006ca4:	4631      	mov	r1, r6
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	f001 ffa2 	bl	8008bf0 <__mcmp>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	dd66      	ble.n	8006d7e <_strtod_l+0x8de>
 8006cb0:	9904      	ldr	r1, [sp, #16]
 8006cb2:	4a53      	ldr	r2, [pc, #332]	; (8006e00 <_strtod_l+0x960>)
 8006cb4:	465b      	mov	r3, fp
 8006cb6:	2900      	cmp	r1, #0
 8006cb8:	f000 8081 	beq.w	8006dbe <_strtod_l+0x91e>
 8006cbc:	ea02 010b 	and.w	r1, r2, fp
 8006cc0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006cc4:	dc7b      	bgt.n	8006dbe <_strtod_l+0x91e>
 8006cc6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006cca:	f77f aea9 	ble.w	8006a20 <_strtod_l+0x580>
 8006cce:	4b4d      	ldr	r3, [pc, #308]	; (8006e04 <_strtod_l+0x964>)
 8006cd0:	4650      	mov	r0, sl
 8006cd2:	4659      	mov	r1, fp
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f7f9 fca7 	bl	8000628 <__aeabi_dmul>
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4303      	orrs	r3, r0
 8006cde:	bf08      	it	eq
 8006ce0:	2322      	moveq	r3, #34	; 0x22
 8006ce2:	4682      	mov	sl, r0
 8006ce4:	468b      	mov	fp, r1
 8006ce6:	bf08      	it	eq
 8006ce8:	6023      	streq	r3, [r4, #0]
 8006cea:	e62b      	b.n	8006944 <_strtod_l+0x4a4>
 8006cec:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf4:	ea03 0a0a 	and.w	sl, r3, sl
 8006cf8:	e6e3      	b.n	8006ac2 <_strtod_l+0x622>
 8006cfa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006cfe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006d02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006d06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006d0a:	fa01 f308 	lsl.w	r3, r1, r8
 8006d0e:	9308      	str	r3, [sp, #32]
 8006d10:	910d      	str	r1, [sp, #52]	; 0x34
 8006d12:	e746      	b.n	8006ba2 <_strtod_l+0x702>
 8006d14:	2300      	movs	r3, #0
 8006d16:	9308      	str	r3, [sp, #32]
 8006d18:	2301      	movs	r3, #1
 8006d1a:	930d      	str	r3, [sp, #52]	; 0x34
 8006d1c:	e741      	b.n	8006ba2 <_strtod_l+0x702>
 8006d1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006d20:	4642      	mov	r2, r8
 8006d22:	4620      	mov	r0, r4
 8006d24:	f001 fef4 	bl	8008b10 <__lshift>
 8006d28:	9018      	str	r0, [sp, #96]	; 0x60
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	f47f af6b 	bne.w	8006c06 <_strtod_l+0x766>
 8006d30:	e5fe      	b.n	8006930 <_strtod_l+0x490>
 8006d32:	465f      	mov	r7, fp
 8006d34:	d16e      	bne.n	8006e14 <_strtod_l+0x974>
 8006d36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d3c:	b342      	cbz	r2, 8006d90 <_strtod_l+0x8f0>
 8006d3e:	4a32      	ldr	r2, [pc, #200]	; (8006e08 <_strtod_l+0x968>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d128      	bne.n	8006d96 <_strtod_l+0x8f6>
 8006d44:	9b04      	ldr	r3, [sp, #16]
 8006d46:	4651      	mov	r1, sl
 8006d48:	b1eb      	cbz	r3, 8006d86 <_strtod_l+0x8e6>
 8006d4a:	4b2d      	ldr	r3, [pc, #180]	; (8006e00 <_strtod_l+0x960>)
 8006d4c:	403b      	ands	r3, r7
 8006d4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006d52:	f04f 32ff 	mov.w	r2, #4294967295
 8006d56:	d819      	bhi.n	8006d8c <_strtod_l+0x8ec>
 8006d58:	0d1b      	lsrs	r3, r3, #20
 8006d5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d62:	4299      	cmp	r1, r3
 8006d64:	d117      	bne.n	8006d96 <_strtod_l+0x8f6>
 8006d66:	4b29      	ldr	r3, [pc, #164]	; (8006e0c <_strtod_l+0x96c>)
 8006d68:	429f      	cmp	r7, r3
 8006d6a:	d102      	bne.n	8006d72 <_strtod_l+0x8d2>
 8006d6c:	3101      	adds	r1, #1
 8006d6e:	f43f addf 	beq.w	8006930 <_strtod_l+0x490>
 8006d72:	4b23      	ldr	r3, [pc, #140]	; (8006e00 <_strtod_l+0x960>)
 8006d74:	403b      	ands	r3, r7
 8006d76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006d7a:	f04f 0a00 	mov.w	sl, #0
 8006d7e:	9b04      	ldr	r3, [sp, #16]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1a4      	bne.n	8006cce <_strtod_l+0x82e>
 8006d84:	e5de      	b.n	8006944 <_strtod_l+0x4a4>
 8006d86:	f04f 33ff 	mov.w	r3, #4294967295
 8006d8a:	e7ea      	b.n	8006d62 <_strtod_l+0x8c2>
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	e7e8      	b.n	8006d62 <_strtod_l+0x8c2>
 8006d90:	ea53 030a 	orrs.w	r3, r3, sl
 8006d94:	d08c      	beq.n	8006cb0 <_strtod_l+0x810>
 8006d96:	9b08      	ldr	r3, [sp, #32]
 8006d98:	b1db      	cbz	r3, 8006dd2 <_strtod_l+0x932>
 8006d9a:	423b      	tst	r3, r7
 8006d9c:	d0ef      	beq.n	8006d7e <_strtod_l+0x8de>
 8006d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006da0:	9a04      	ldr	r2, [sp, #16]
 8006da2:	4650      	mov	r0, sl
 8006da4:	4659      	mov	r1, fp
 8006da6:	b1c3      	cbz	r3, 8006dda <_strtod_l+0x93a>
 8006da8:	f7ff fb5d 	bl	8006466 <sulp>
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	ec51 0b18 	vmov	r0, r1, d8
 8006db4:	f7f9 fa82 	bl	80002bc <__adddf3>
 8006db8:	4682      	mov	sl, r0
 8006dba:	468b      	mov	fp, r1
 8006dbc:	e7df      	b.n	8006d7e <_strtod_l+0x8de>
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006dc4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006dc8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006dcc:	f04f 3aff 	mov.w	sl, #4294967295
 8006dd0:	e7d5      	b.n	8006d7e <_strtod_l+0x8de>
 8006dd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dd4:	ea13 0f0a 	tst.w	r3, sl
 8006dd8:	e7e0      	b.n	8006d9c <_strtod_l+0x8fc>
 8006dda:	f7ff fb44 	bl	8006466 <sulp>
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	ec51 0b18 	vmov	r0, r1, d8
 8006de6:	f7f9 fa67 	bl	80002b8 <__aeabi_dsub>
 8006dea:	2200      	movs	r2, #0
 8006dec:	2300      	movs	r3, #0
 8006dee:	4682      	mov	sl, r0
 8006df0:	468b      	mov	fp, r1
 8006df2:	f7f9 fe81 	bl	8000af8 <__aeabi_dcmpeq>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d0c1      	beq.n	8006d7e <_strtod_l+0x8de>
 8006dfa:	e611      	b.n	8006a20 <_strtod_l+0x580>
 8006dfc:	fffffc02 	.word	0xfffffc02
 8006e00:	7ff00000 	.word	0x7ff00000
 8006e04:	39500000 	.word	0x39500000
 8006e08:	000fffff 	.word	0x000fffff
 8006e0c:	7fefffff 	.word	0x7fefffff
 8006e10:	0800c5d0 	.word	0x0800c5d0
 8006e14:	4631      	mov	r1, r6
 8006e16:	4628      	mov	r0, r5
 8006e18:	f002 f868 	bl	8008eec <__ratio>
 8006e1c:	ec59 8b10 	vmov	r8, r9, d0
 8006e20:	ee10 0a10 	vmov	r0, s0
 8006e24:	2200      	movs	r2, #0
 8006e26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e2a:	4649      	mov	r1, r9
 8006e2c:	f7f9 fe78 	bl	8000b20 <__aeabi_dcmple>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	d07a      	beq.n	8006f2a <_strtod_l+0xa8a>
 8006e34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d04a      	beq.n	8006ed0 <_strtod_l+0xa30>
 8006e3a:	4b95      	ldr	r3, [pc, #596]	; (8007090 <_strtod_l+0xbf0>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006e42:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007090 <_strtod_l+0xbf0>
 8006e46:	f04f 0800 	mov.w	r8, #0
 8006e4a:	4b92      	ldr	r3, [pc, #584]	; (8007094 <_strtod_l+0xbf4>)
 8006e4c:	403b      	ands	r3, r7
 8006e4e:	930d      	str	r3, [sp, #52]	; 0x34
 8006e50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e52:	4b91      	ldr	r3, [pc, #580]	; (8007098 <_strtod_l+0xbf8>)
 8006e54:	429a      	cmp	r2, r3
 8006e56:	f040 80b0 	bne.w	8006fba <_strtod_l+0xb1a>
 8006e5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e5e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006e62:	ec4b ab10 	vmov	d0, sl, fp
 8006e66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006e6a:	f001 ff67 	bl	8008d3c <__ulp>
 8006e6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e72:	ec53 2b10 	vmov	r2, r3, d0
 8006e76:	f7f9 fbd7 	bl	8000628 <__aeabi_dmul>
 8006e7a:	4652      	mov	r2, sl
 8006e7c:	465b      	mov	r3, fp
 8006e7e:	f7f9 fa1d 	bl	80002bc <__adddf3>
 8006e82:	460b      	mov	r3, r1
 8006e84:	4983      	ldr	r1, [pc, #524]	; (8007094 <_strtod_l+0xbf4>)
 8006e86:	4a85      	ldr	r2, [pc, #532]	; (800709c <_strtod_l+0xbfc>)
 8006e88:	4019      	ands	r1, r3
 8006e8a:	4291      	cmp	r1, r2
 8006e8c:	4682      	mov	sl, r0
 8006e8e:	d960      	bls.n	8006f52 <_strtod_l+0xab2>
 8006e90:	ee18 3a90 	vmov	r3, s17
 8006e94:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d104      	bne.n	8006ea6 <_strtod_l+0xa06>
 8006e9c:	ee18 3a10 	vmov	r3, s16
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	f43f ad45 	beq.w	8006930 <_strtod_l+0x490>
 8006ea6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80070a8 <_strtod_l+0xc08>
 8006eaa:	f04f 3aff 	mov.w	sl, #4294967295
 8006eae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f001 fc11 	bl	80086d8 <_Bfree>
 8006eb6:	9905      	ldr	r1, [sp, #20]
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f001 fc0d 	bl	80086d8 <_Bfree>
 8006ebe:	4631      	mov	r1, r6
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f001 fc09 	bl	80086d8 <_Bfree>
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f001 fc05 	bl	80086d8 <_Bfree>
 8006ece:	e61a      	b.n	8006b06 <_strtod_l+0x666>
 8006ed0:	f1ba 0f00 	cmp.w	sl, #0
 8006ed4:	d11b      	bne.n	8006f0e <_strtod_l+0xa6e>
 8006ed6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006eda:	b9f3      	cbnz	r3, 8006f1a <_strtod_l+0xa7a>
 8006edc:	4b6c      	ldr	r3, [pc, #432]	; (8007090 <_strtod_l+0xbf0>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	4640      	mov	r0, r8
 8006ee2:	4649      	mov	r1, r9
 8006ee4:	f7f9 fe12 	bl	8000b0c <__aeabi_dcmplt>
 8006ee8:	b9d0      	cbnz	r0, 8006f20 <_strtod_l+0xa80>
 8006eea:	4640      	mov	r0, r8
 8006eec:	4649      	mov	r1, r9
 8006eee:	4b6c      	ldr	r3, [pc, #432]	; (80070a0 <_strtod_l+0xc00>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f7f9 fb99 	bl	8000628 <__aeabi_dmul>
 8006ef6:	4680      	mov	r8, r0
 8006ef8:	4689      	mov	r9, r1
 8006efa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006efe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006f02:	9315      	str	r3, [sp, #84]	; 0x54
 8006f04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006f08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006f0c:	e79d      	b.n	8006e4a <_strtod_l+0x9aa>
 8006f0e:	f1ba 0f01 	cmp.w	sl, #1
 8006f12:	d102      	bne.n	8006f1a <_strtod_l+0xa7a>
 8006f14:	2f00      	cmp	r7, #0
 8006f16:	f43f ad83 	beq.w	8006a20 <_strtod_l+0x580>
 8006f1a:	4b62      	ldr	r3, [pc, #392]	; (80070a4 <_strtod_l+0xc04>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	e78e      	b.n	8006e3e <_strtod_l+0x99e>
 8006f20:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80070a0 <_strtod_l+0xc00>
 8006f24:	f04f 0800 	mov.w	r8, #0
 8006f28:	e7e7      	b.n	8006efa <_strtod_l+0xa5a>
 8006f2a:	4b5d      	ldr	r3, [pc, #372]	; (80070a0 <_strtod_l+0xc00>)
 8006f2c:	4640      	mov	r0, r8
 8006f2e:	4649      	mov	r1, r9
 8006f30:	2200      	movs	r2, #0
 8006f32:	f7f9 fb79 	bl	8000628 <__aeabi_dmul>
 8006f36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f38:	4680      	mov	r8, r0
 8006f3a:	4689      	mov	r9, r1
 8006f3c:	b933      	cbnz	r3, 8006f4c <_strtod_l+0xaac>
 8006f3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f42:	900e      	str	r0, [sp, #56]	; 0x38
 8006f44:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006f4a:	e7dd      	b.n	8006f08 <_strtod_l+0xa68>
 8006f4c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006f50:	e7f9      	b.n	8006f46 <_strtod_l+0xaa6>
 8006f52:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006f56:	9b04      	ldr	r3, [sp, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1a8      	bne.n	8006eae <_strtod_l+0xa0e>
 8006f5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f62:	0d1b      	lsrs	r3, r3, #20
 8006f64:	051b      	lsls	r3, r3, #20
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d1a1      	bne.n	8006eae <_strtod_l+0xa0e>
 8006f6a:	4640      	mov	r0, r8
 8006f6c:	4649      	mov	r1, r9
 8006f6e:	f7f9 fef3 	bl	8000d58 <__aeabi_d2lz>
 8006f72:	f7f9 fb2b 	bl	80005cc <__aeabi_l2d>
 8006f76:	4602      	mov	r2, r0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	4640      	mov	r0, r8
 8006f7c:	4649      	mov	r1, r9
 8006f7e:	f7f9 f99b 	bl	80002b8 <__aeabi_dsub>
 8006f82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f88:	ea43 030a 	orr.w	r3, r3, sl
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	4680      	mov	r8, r0
 8006f90:	4689      	mov	r9, r1
 8006f92:	d055      	beq.n	8007040 <_strtod_l+0xba0>
 8006f94:	a336      	add	r3, pc, #216	; (adr r3, 8007070 <_strtod_l+0xbd0>)
 8006f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9a:	f7f9 fdb7 	bl	8000b0c <__aeabi_dcmplt>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	f47f acd0 	bne.w	8006944 <_strtod_l+0x4a4>
 8006fa4:	a334      	add	r3, pc, #208	; (adr r3, 8007078 <_strtod_l+0xbd8>)
 8006fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006faa:	4640      	mov	r0, r8
 8006fac:	4649      	mov	r1, r9
 8006fae:	f7f9 fdcb 	bl	8000b48 <__aeabi_dcmpgt>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	f43f af7b 	beq.w	8006eae <_strtod_l+0xa0e>
 8006fb8:	e4c4      	b.n	8006944 <_strtod_l+0x4a4>
 8006fba:	9b04      	ldr	r3, [sp, #16]
 8006fbc:	b333      	cbz	r3, 800700c <_strtod_l+0xb6c>
 8006fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fc0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006fc4:	d822      	bhi.n	800700c <_strtod_l+0xb6c>
 8006fc6:	a32e      	add	r3, pc, #184	; (adr r3, 8007080 <_strtod_l+0xbe0>)
 8006fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fcc:	4640      	mov	r0, r8
 8006fce:	4649      	mov	r1, r9
 8006fd0:	f7f9 fda6 	bl	8000b20 <__aeabi_dcmple>
 8006fd4:	b1a0      	cbz	r0, 8007000 <_strtod_l+0xb60>
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	4640      	mov	r0, r8
 8006fda:	f7f9 fdfd 	bl	8000bd8 <__aeabi_d2uiz>
 8006fde:	2801      	cmp	r0, #1
 8006fe0:	bf38      	it	cc
 8006fe2:	2001      	movcc	r0, #1
 8006fe4:	f7f9 faa6 	bl	8000534 <__aeabi_ui2d>
 8006fe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fea:	4680      	mov	r8, r0
 8006fec:	4689      	mov	r9, r1
 8006fee:	bb23      	cbnz	r3, 800703a <_strtod_l+0xb9a>
 8006ff0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ff4:	9010      	str	r0, [sp, #64]	; 0x40
 8006ff6:	9311      	str	r3, [sp, #68]	; 0x44
 8006ff8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ffc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007002:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007004:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007008:	1a9b      	subs	r3, r3, r2
 800700a:	9309      	str	r3, [sp, #36]	; 0x24
 800700c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007010:	eeb0 0a48 	vmov.f32	s0, s16
 8007014:	eef0 0a68 	vmov.f32	s1, s17
 8007018:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800701c:	f001 fe8e 	bl	8008d3c <__ulp>
 8007020:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007024:	ec53 2b10 	vmov	r2, r3, d0
 8007028:	f7f9 fafe 	bl	8000628 <__aeabi_dmul>
 800702c:	ec53 2b18 	vmov	r2, r3, d8
 8007030:	f7f9 f944 	bl	80002bc <__adddf3>
 8007034:	4682      	mov	sl, r0
 8007036:	468b      	mov	fp, r1
 8007038:	e78d      	b.n	8006f56 <_strtod_l+0xab6>
 800703a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800703e:	e7db      	b.n	8006ff8 <_strtod_l+0xb58>
 8007040:	a311      	add	r3, pc, #68	; (adr r3, 8007088 <_strtod_l+0xbe8>)
 8007042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007046:	f7f9 fd61 	bl	8000b0c <__aeabi_dcmplt>
 800704a:	e7b2      	b.n	8006fb2 <_strtod_l+0xb12>
 800704c:	2300      	movs	r3, #0
 800704e:	930a      	str	r3, [sp, #40]	; 0x28
 8007050:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007052:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007054:	6013      	str	r3, [r2, #0]
 8007056:	f7ff ba6b 	b.w	8006530 <_strtod_l+0x90>
 800705a:	2a65      	cmp	r2, #101	; 0x65
 800705c:	f43f ab5f 	beq.w	800671e <_strtod_l+0x27e>
 8007060:	2a45      	cmp	r2, #69	; 0x45
 8007062:	f43f ab5c 	beq.w	800671e <_strtod_l+0x27e>
 8007066:	2301      	movs	r3, #1
 8007068:	f7ff bb94 	b.w	8006794 <_strtod_l+0x2f4>
 800706c:	f3af 8000 	nop.w
 8007070:	94a03595 	.word	0x94a03595
 8007074:	3fdfffff 	.word	0x3fdfffff
 8007078:	35afe535 	.word	0x35afe535
 800707c:	3fe00000 	.word	0x3fe00000
 8007080:	ffc00000 	.word	0xffc00000
 8007084:	41dfffff 	.word	0x41dfffff
 8007088:	94a03595 	.word	0x94a03595
 800708c:	3fcfffff 	.word	0x3fcfffff
 8007090:	3ff00000 	.word	0x3ff00000
 8007094:	7ff00000 	.word	0x7ff00000
 8007098:	7fe00000 	.word	0x7fe00000
 800709c:	7c9fffff 	.word	0x7c9fffff
 80070a0:	3fe00000 	.word	0x3fe00000
 80070a4:	bff00000 	.word	0xbff00000
 80070a8:	7fefffff 	.word	0x7fefffff

080070ac <_strtod_r>:
 80070ac:	4b01      	ldr	r3, [pc, #4]	; (80070b4 <_strtod_r+0x8>)
 80070ae:	f7ff b9f7 	b.w	80064a0 <_strtod_l>
 80070b2:	bf00      	nop
 80070b4:	20000080 	.word	0x20000080

080070b8 <_strtol_l.constprop.0>:
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070be:	d001      	beq.n	80070c4 <_strtol_l.constprop.0+0xc>
 80070c0:	2b24      	cmp	r3, #36	; 0x24
 80070c2:	d906      	bls.n	80070d2 <_strtol_l.constprop.0+0x1a>
 80070c4:	f7fe fa8c 	bl	80055e0 <__errno>
 80070c8:	2316      	movs	r3, #22
 80070ca:	6003      	str	r3, [r0, #0]
 80070cc:	2000      	movs	r0, #0
 80070ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80071b8 <_strtol_l.constprop.0+0x100>
 80070d6:	460d      	mov	r5, r1
 80070d8:	462e      	mov	r6, r5
 80070da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070de:	f814 700c 	ldrb.w	r7, [r4, ip]
 80070e2:	f017 0708 	ands.w	r7, r7, #8
 80070e6:	d1f7      	bne.n	80070d8 <_strtol_l.constprop.0+0x20>
 80070e8:	2c2d      	cmp	r4, #45	; 0x2d
 80070ea:	d132      	bne.n	8007152 <_strtol_l.constprop.0+0x9a>
 80070ec:	782c      	ldrb	r4, [r5, #0]
 80070ee:	2701      	movs	r7, #1
 80070f0:	1cb5      	adds	r5, r6, #2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d05b      	beq.n	80071ae <_strtol_l.constprop.0+0xf6>
 80070f6:	2b10      	cmp	r3, #16
 80070f8:	d109      	bne.n	800710e <_strtol_l.constprop.0+0x56>
 80070fa:	2c30      	cmp	r4, #48	; 0x30
 80070fc:	d107      	bne.n	800710e <_strtol_l.constprop.0+0x56>
 80070fe:	782c      	ldrb	r4, [r5, #0]
 8007100:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007104:	2c58      	cmp	r4, #88	; 0x58
 8007106:	d14d      	bne.n	80071a4 <_strtol_l.constprop.0+0xec>
 8007108:	786c      	ldrb	r4, [r5, #1]
 800710a:	2310      	movs	r3, #16
 800710c:	3502      	adds	r5, #2
 800710e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007112:	f108 38ff 	add.w	r8, r8, #4294967295
 8007116:	f04f 0c00 	mov.w	ip, #0
 800711a:	fbb8 f9f3 	udiv	r9, r8, r3
 800711e:	4666      	mov	r6, ip
 8007120:	fb03 8a19 	mls	sl, r3, r9, r8
 8007124:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007128:	f1be 0f09 	cmp.w	lr, #9
 800712c:	d816      	bhi.n	800715c <_strtol_l.constprop.0+0xa4>
 800712e:	4674      	mov	r4, lr
 8007130:	42a3      	cmp	r3, r4
 8007132:	dd24      	ble.n	800717e <_strtol_l.constprop.0+0xc6>
 8007134:	f1bc 0f00 	cmp.w	ip, #0
 8007138:	db1e      	blt.n	8007178 <_strtol_l.constprop.0+0xc0>
 800713a:	45b1      	cmp	r9, r6
 800713c:	d31c      	bcc.n	8007178 <_strtol_l.constprop.0+0xc0>
 800713e:	d101      	bne.n	8007144 <_strtol_l.constprop.0+0x8c>
 8007140:	45a2      	cmp	sl, r4
 8007142:	db19      	blt.n	8007178 <_strtol_l.constprop.0+0xc0>
 8007144:	fb06 4603 	mla	r6, r6, r3, r4
 8007148:	f04f 0c01 	mov.w	ip, #1
 800714c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007150:	e7e8      	b.n	8007124 <_strtol_l.constprop.0+0x6c>
 8007152:	2c2b      	cmp	r4, #43	; 0x2b
 8007154:	bf04      	itt	eq
 8007156:	782c      	ldrbeq	r4, [r5, #0]
 8007158:	1cb5      	addeq	r5, r6, #2
 800715a:	e7ca      	b.n	80070f2 <_strtol_l.constprop.0+0x3a>
 800715c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007160:	f1be 0f19 	cmp.w	lr, #25
 8007164:	d801      	bhi.n	800716a <_strtol_l.constprop.0+0xb2>
 8007166:	3c37      	subs	r4, #55	; 0x37
 8007168:	e7e2      	b.n	8007130 <_strtol_l.constprop.0+0x78>
 800716a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800716e:	f1be 0f19 	cmp.w	lr, #25
 8007172:	d804      	bhi.n	800717e <_strtol_l.constprop.0+0xc6>
 8007174:	3c57      	subs	r4, #87	; 0x57
 8007176:	e7db      	b.n	8007130 <_strtol_l.constprop.0+0x78>
 8007178:	f04f 3cff 	mov.w	ip, #4294967295
 800717c:	e7e6      	b.n	800714c <_strtol_l.constprop.0+0x94>
 800717e:	f1bc 0f00 	cmp.w	ip, #0
 8007182:	da05      	bge.n	8007190 <_strtol_l.constprop.0+0xd8>
 8007184:	2322      	movs	r3, #34	; 0x22
 8007186:	6003      	str	r3, [r0, #0]
 8007188:	4646      	mov	r6, r8
 800718a:	b942      	cbnz	r2, 800719e <_strtol_l.constprop.0+0xe6>
 800718c:	4630      	mov	r0, r6
 800718e:	e79e      	b.n	80070ce <_strtol_l.constprop.0+0x16>
 8007190:	b107      	cbz	r7, 8007194 <_strtol_l.constprop.0+0xdc>
 8007192:	4276      	negs	r6, r6
 8007194:	2a00      	cmp	r2, #0
 8007196:	d0f9      	beq.n	800718c <_strtol_l.constprop.0+0xd4>
 8007198:	f1bc 0f00 	cmp.w	ip, #0
 800719c:	d000      	beq.n	80071a0 <_strtol_l.constprop.0+0xe8>
 800719e:	1e69      	subs	r1, r5, #1
 80071a0:	6011      	str	r1, [r2, #0]
 80071a2:	e7f3      	b.n	800718c <_strtol_l.constprop.0+0xd4>
 80071a4:	2430      	movs	r4, #48	; 0x30
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1b1      	bne.n	800710e <_strtol_l.constprop.0+0x56>
 80071aa:	2308      	movs	r3, #8
 80071ac:	e7af      	b.n	800710e <_strtol_l.constprop.0+0x56>
 80071ae:	2c30      	cmp	r4, #48	; 0x30
 80071b0:	d0a5      	beq.n	80070fe <_strtol_l.constprop.0+0x46>
 80071b2:	230a      	movs	r3, #10
 80071b4:	e7ab      	b.n	800710e <_strtol_l.constprop.0+0x56>
 80071b6:	bf00      	nop
 80071b8:	0800c5f9 	.word	0x0800c5f9

080071bc <_strtol_r>:
 80071bc:	f7ff bf7c 	b.w	80070b8 <_strtol_l.constprop.0>

080071c0 <_write_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	4d07      	ldr	r5, [pc, #28]	; (80071e0 <_write_r+0x20>)
 80071c4:	4604      	mov	r4, r0
 80071c6:	4608      	mov	r0, r1
 80071c8:	4611      	mov	r1, r2
 80071ca:	2200      	movs	r2, #0
 80071cc:	602a      	str	r2, [r5, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	f7fb fd12 	bl	8002bf8 <_write>
 80071d4:	1c43      	adds	r3, r0, #1
 80071d6:	d102      	bne.n	80071de <_write_r+0x1e>
 80071d8:	682b      	ldr	r3, [r5, #0]
 80071da:	b103      	cbz	r3, 80071de <_write_r+0x1e>
 80071dc:	6023      	str	r3, [r4, #0]
 80071de:	bd38      	pop	{r3, r4, r5, pc}
 80071e0:	20000d40 	.word	0x20000d40

080071e4 <_close_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	4d06      	ldr	r5, [pc, #24]	; (8007200 <_close_r+0x1c>)
 80071e8:	2300      	movs	r3, #0
 80071ea:	4604      	mov	r4, r0
 80071ec:	4608      	mov	r0, r1
 80071ee:	602b      	str	r3, [r5, #0]
 80071f0:	f7fb fd1e 	bl	8002c30 <_close>
 80071f4:	1c43      	adds	r3, r0, #1
 80071f6:	d102      	bne.n	80071fe <_close_r+0x1a>
 80071f8:	682b      	ldr	r3, [r5, #0]
 80071fa:	b103      	cbz	r3, 80071fe <_close_r+0x1a>
 80071fc:	6023      	str	r3, [r4, #0]
 80071fe:	bd38      	pop	{r3, r4, r5, pc}
 8007200:	20000d40 	.word	0x20000d40

08007204 <quorem>:
 8007204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007208:	6903      	ldr	r3, [r0, #16]
 800720a:	690c      	ldr	r4, [r1, #16]
 800720c:	42a3      	cmp	r3, r4
 800720e:	4607      	mov	r7, r0
 8007210:	f2c0 8081 	blt.w	8007316 <quorem+0x112>
 8007214:	3c01      	subs	r4, #1
 8007216:	f101 0814 	add.w	r8, r1, #20
 800721a:	f100 0514 	add.w	r5, r0, #20
 800721e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007222:	9301      	str	r3, [sp, #4]
 8007224:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007228:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800722c:	3301      	adds	r3, #1
 800722e:	429a      	cmp	r2, r3
 8007230:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007234:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007238:	fbb2 f6f3 	udiv	r6, r2, r3
 800723c:	d331      	bcc.n	80072a2 <quorem+0x9e>
 800723e:	f04f 0e00 	mov.w	lr, #0
 8007242:	4640      	mov	r0, r8
 8007244:	46ac      	mov	ip, r5
 8007246:	46f2      	mov	sl, lr
 8007248:	f850 2b04 	ldr.w	r2, [r0], #4
 800724c:	b293      	uxth	r3, r2
 800724e:	fb06 e303 	mla	r3, r6, r3, lr
 8007252:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007256:	b29b      	uxth	r3, r3
 8007258:	ebaa 0303 	sub.w	r3, sl, r3
 800725c:	f8dc a000 	ldr.w	sl, [ip]
 8007260:	0c12      	lsrs	r2, r2, #16
 8007262:	fa13 f38a 	uxtah	r3, r3, sl
 8007266:	fb06 e202 	mla	r2, r6, r2, lr
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	9b00      	ldr	r3, [sp, #0]
 800726e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007272:	b292      	uxth	r2, r2
 8007274:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007278:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800727c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007280:	4581      	cmp	r9, r0
 8007282:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007286:	f84c 3b04 	str.w	r3, [ip], #4
 800728a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800728e:	d2db      	bcs.n	8007248 <quorem+0x44>
 8007290:	f855 300b 	ldr.w	r3, [r5, fp]
 8007294:	b92b      	cbnz	r3, 80072a2 <quorem+0x9e>
 8007296:	9b01      	ldr	r3, [sp, #4]
 8007298:	3b04      	subs	r3, #4
 800729a:	429d      	cmp	r5, r3
 800729c:	461a      	mov	r2, r3
 800729e:	d32e      	bcc.n	80072fe <quorem+0xfa>
 80072a0:	613c      	str	r4, [r7, #16]
 80072a2:	4638      	mov	r0, r7
 80072a4:	f001 fca4 	bl	8008bf0 <__mcmp>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	db24      	blt.n	80072f6 <quorem+0xf2>
 80072ac:	3601      	adds	r6, #1
 80072ae:	4628      	mov	r0, r5
 80072b0:	f04f 0c00 	mov.w	ip, #0
 80072b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80072b8:	f8d0 e000 	ldr.w	lr, [r0]
 80072bc:	b293      	uxth	r3, r2
 80072be:	ebac 0303 	sub.w	r3, ip, r3
 80072c2:	0c12      	lsrs	r2, r2, #16
 80072c4:	fa13 f38e 	uxtah	r3, r3, lr
 80072c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80072cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072d6:	45c1      	cmp	r9, r8
 80072d8:	f840 3b04 	str.w	r3, [r0], #4
 80072dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80072e0:	d2e8      	bcs.n	80072b4 <quorem+0xb0>
 80072e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072ea:	b922      	cbnz	r2, 80072f6 <quorem+0xf2>
 80072ec:	3b04      	subs	r3, #4
 80072ee:	429d      	cmp	r5, r3
 80072f0:	461a      	mov	r2, r3
 80072f2:	d30a      	bcc.n	800730a <quorem+0x106>
 80072f4:	613c      	str	r4, [r7, #16]
 80072f6:	4630      	mov	r0, r6
 80072f8:	b003      	add	sp, #12
 80072fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072fe:	6812      	ldr	r2, [r2, #0]
 8007300:	3b04      	subs	r3, #4
 8007302:	2a00      	cmp	r2, #0
 8007304:	d1cc      	bne.n	80072a0 <quorem+0x9c>
 8007306:	3c01      	subs	r4, #1
 8007308:	e7c7      	b.n	800729a <quorem+0x96>
 800730a:	6812      	ldr	r2, [r2, #0]
 800730c:	3b04      	subs	r3, #4
 800730e:	2a00      	cmp	r2, #0
 8007310:	d1f0      	bne.n	80072f4 <quorem+0xf0>
 8007312:	3c01      	subs	r4, #1
 8007314:	e7eb      	b.n	80072ee <quorem+0xea>
 8007316:	2000      	movs	r0, #0
 8007318:	e7ee      	b.n	80072f8 <quorem+0xf4>
 800731a:	0000      	movs	r0, r0
 800731c:	0000      	movs	r0, r0
	...

08007320 <_dtoa_r>:
 8007320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007324:	ed2d 8b04 	vpush	{d8-d9}
 8007328:	ec57 6b10 	vmov	r6, r7, d0
 800732c:	b093      	sub	sp, #76	; 0x4c
 800732e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007330:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007334:	9106      	str	r1, [sp, #24]
 8007336:	ee10 aa10 	vmov	sl, s0
 800733a:	4604      	mov	r4, r0
 800733c:	9209      	str	r2, [sp, #36]	; 0x24
 800733e:	930c      	str	r3, [sp, #48]	; 0x30
 8007340:	46bb      	mov	fp, r7
 8007342:	b975      	cbnz	r5, 8007362 <_dtoa_r+0x42>
 8007344:	2010      	movs	r0, #16
 8007346:	f001 f95f 	bl	8008608 <malloc>
 800734a:	4602      	mov	r2, r0
 800734c:	6260      	str	r0, [r4, #36]	; 0x24
 800734e:	b920      	cbnz	r0, 800735a <_dtoa_r+0x3a>
 8007350:	4ba7      	ldr	r3, [pc, #668]	; (80075f0 <_dtoa_r+0x2d0>)
 8007352:	21ea      	movs	r1, #234	; 0xea
 8007354:	48a7      	ldr	r0, [pc, #668]	; (80075f4 <_dtoa_r+0x2d4>)
 8007356:	f002 fceb 	bl	8009d30 <__assert_func>
 800735a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800735e:	6005      	str	r5, [r0, #0]
 8007360:	60c5      	str	r5, [r0, #12]
 8007362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007364:	6819      	ldr	r1, [r3, #0]
 8007366:	b151      	cbz	r1, 800737e <_dtoa_r+0x5e>
 8007368:	685a      	ldr	r2, [r3, #4]
 800736a:	604a      	str	r2, [r1, #4]
 800736c:	2301      	movs	r3, #1
 800736e:	4093      	lsls	r3, r2
 8007370:	608b      	str	r3, [r1, #8]
 8007372:	4620      	mov	r0, r4
 8007374:	f001 f9b0 	bl	80086d8 <_Bfree>
 8007378:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800737a:	2200      	movs	r2, #0
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	1e3b      	subs	r3, r7, #0
 8007380:	bfaa      	itet	ge
 8007382:	2300      	movge	r3, #0
 8007384:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007388:	f8c8 3000 	strge.w	r3, [r8]
 800738c:	4b9a      	ldr	r3, [pc, #616]	; (80075f8 <_dtoa_r+0x2d8>)
 800738e:	bfbc      	itt	lt
 8007390:	2201      	movlt	r2, #1
 8007392:	f8c8 2000 	strlt.w	r2, [r8]
 8007396:	ea33 030b 	bics.w	r3, r3, fp
 800739a:	d11b      	bne.n	80073d4 <_dtoa_r+0xb4>
 800739c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800739e:	f242 730f 	movw	r3, #9999	; 0x270f
 80073a2:	6013      	str	r3, [r2, #0]
 80073a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073a8:	4333      	orrs	r3, r6
 80073aa:	f000 8592 	beq.w	8007ed2 <_dtoa_r+0xbb2>
 80073ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073b0:	b963      	cbnz	r3, 80073cc <_dtoa_r+0xac>
 80073b2:	4b92      	ldr	r3, [pc, #584]	; (80075fc <_dtoa_r+0x2dc>)
 80073b4:	e022      	b.n	80073fc <_dtoa_r+0xdc>
 80073b6:	4b92      	ldr	r3, [pc, #584]	; (8007600 <_dtoa_r+0x2e0>)
 80073b8:	9301      	str	r3, [sp, #4]
 80073ba:	3308      	adds	r3, #8
 80073bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80073be:	6013      	str	r3, [r2, #0]
 80073c0:	9801      	ldr	r0, [sp, #4]
 80073c2:	b013      	add	sp, #76	; 0x4c
 80073c4:	ecbd 8b04 	vpop	{d8-d9}
 80073c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073cc:	4b8b      	ldr	r3, [pc, #556]	; (80075fc <_dtoa_r+0x2dc>)
 80073ce:	9301      	str	r3, [sp, #4]
 80073d0:	3303      	adds	r3, #3
 80073d2:	e7f3      	b.n	80073bc <_dtoa_r+0x9c>
 80073d4:	2200      	movs	r2, #0
 80073d6:	2300      	movs	r3, #0
 80073d8:	4650      	mov	r0, sl
 80073da:	4659      	mov	r1, fp
 80073dc:	f7f9 fb8c 	bl	8000af8 <__aeabi_dcmpeq>
 80073e0:	ec4b ab19 	vmov	d9, sl, fp
 80073e4:	4680      	mov	r8, r0
 80073e6:	b158      	cbz	r0, 8007400 <_dtoa_r+0xe0>
 80073e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073ea:	2301      	movs	r3, #1
 80073ec:	6013      	str	r3, [r2, #0]
 80073ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 856b 	beq.w	8007ecc <_dtoa_r+0xbac>
 80073f6:	4883      	ldr	r0, [pc, #524]	; (8007604 <_dtoa_r+0x2e4>)
 80073f8:	6018      	str	r0, [r3, #0]
 80073fa:	1e43      	subs	r3, r0, #1
 80073fc:	9301      	str	r3, [sp, #4]
 80073fe:	e7df      	b.n	80073c0 <_dtoa_r+0xa0>
 8007400:	ec4b ab10 	vmov	d0, sl, fp
 8007404:	aa10      	add	r2, sp, #64	; 0x40
 8007406:	a911      	add	r1, sp, #68	; 0x44
 8007408:	4620      	mov	r0, r4
 800740a:	f001 fd13 	bl	8008e34 <__d2b>
 800740e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007412:	ee08 0a10 	vmov	s16, r0
 8007416:	2d00      	cmp	r5, #0
 8007418:	f000 8084 	beq.w	8007524 <_dtoa_r+0x204>
 800741c:	ee19 3a90 	vmov	r3, s19
 8007420:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007424:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007428:	4656      	mov	r6, sl
 800742a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800742e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007432:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007436:	4b74      	ldr	r3, [pc, #464]	; (8007608 <_dtoa_r+0x2e8>)
 8007438:	2200      	movs	r2, #0
 800743a:	4630      	mov	r0, r6
 800743c:	4639      	mov	r1, r7
 800743e:	f7f8 ff3b 	bl	80002b8 <__aeabi_dsub>
 8007442:	a365      	add	r3, pc, #404	; (adr r3, 80075d8 <_dtoa_r+0x2b8>)
 8007444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007448:	f7f9 f8ee 	bl	8000628 <__aeabi_dmul>
 800744c:	a364      	add	r3, pc, #400	; (adr r3, 80075e0 <_dtoa_r+0x2c0>)
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	f7f8 ff33 	bl	80002bc <__adddf3>
 8007456:	4606      	mov	r6, r0
 8007458:	4628      	mov	r0, r5
 800745a:	460f      	mov	r7, r1
 800745c:	f7f9 f87a 	bl	8000554 <__aeabi_i2d>
 8007460:	a361      	add	r3, pc, #388	; (adr r3, 80075e8 <_dtoa_r+0x2c8>)
 8007462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007466:	f7f9 f8df 	bl	8000628 <__aeabi_dmul>
 800746a:	4602      	mov	r2, r0
 800746c:	460b      	mov	r3, r1
 800746e:	4630      	mov	r0, r6
 8007470:	4639      	mov	r1, r7
 8007472:	f7f8 ff23 	bl	80002bc <__adddf3>
 8007476:	4606      	mov	r6, r0
 8007478:	460f      	mov	r7, r1
 800747a:	f7f9 fb85 	bl	8000b88 <__aeabi_d2iz>
 800747e:	2200      	movs	r2, #0
 8007480:	9000      	str	r0, [sp, #0]
 8007482:	2300      	movs	r3, #0
 8007484:	4630      	mov	r0, r6
 8007486:	4639      	mov	r1, r7
 8007488:	f7f9 fb40 	bl	8000b0c <__aeabi_dcmplt>
 800748c:	b150      	cbz	r0, 80074a4 <_dtoa_r+0x184>
 800748e:	9800      	ldr	r0, [sp, #0]
 8007490:	f7f9 f860 	bl	8000554 <__aeabi_i2d>
 8007494:	4632      	mov	r2, r6
 8007496:	463b      	mov	r3, r7
 8007498:	f7f9 fb2e 	bl	8000af8 <__aeabi_dcmpeq>
 800749c:	b910      	cbnz	r0, 80074a4 <_dtoa_r+0x184>
 800749e:	9b00      	ldr	r3, [sp, #0]
 80074a0:	3b01      	subs	r3, #1
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	9b00      	ldr	r3, [sp, #0]
 80074a6:	2b16      	cmp	r3, #22
 80074a8:	d85a      	bhi.n	8007560 <_dtoa_r+0x240>
 80074aa:	9a00      	ldr	r2, [sp, #0]
 80074ac:	4b57      	ldr	r3, [pc, #348]	; (800760c <_dtoa_r+0x2ec>)
 80074ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b6:	ec51 0b19 	vmov	r0, r1, d9
 80074ba:	f7f9 fb27 	bl	8000b0c <__aeabi_dcmplt>
 80074be:	2800      	cmp	r0, #0
 80074c0:	d050      	beq.n	8007564 <_dtoa_r+0x244>
 80074c2:	9b00      	ldr	r3, [sp, #0]
 80074c4:	3b01      	subs	r3, #1
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	2300      	movs	r3, #0
 80074ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80074cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074ce:	1b5d      	subs	r5, r3, r5
 80074d0:	1e6b      	subs	r3, r5, #1
 80074d2:	9305      	str	r3, [sp, #20]
 80074d4:	bf45      	ittet	mi
 80074d6:	f1c5 0301 	rsbmi	r3, r5, #1
 80074da:	9304      	strmi	r3, [sp, #16]
 80074dc:	2300      	movpl	r3, #0
 80074de:	2300      	movmi	r3, #0
 80074e0:	bf4c      	ite	mi
 80074e2:	9305      	strmi	r3, [sp, #20]
 80074e4:	9304      	strpl	r3, [sp, #16]
 80074e6:	9b00      	ldr	r3, [sp, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	db3d      	blt.n	8007568 <_dtoa_r+0x248>
 80074ec:	9b05      	ldr	r3, [sp, #20]
 80074ee:	9a00      	ldr	r2, [sp, #0]
 80074f0:	920a      	str	r2, [sp, #40]	; 0x28
 80074f2:	4413      	add	r3, r2
 80074f4:	9305      	str	r3, [sp, #20]
 80074f6:	2300      	movs	r3, #0
 80074f8:	9307      	str	r3, [sp, #28]
 80074fa:	9b06      	ldr	r3, [sp, #24]
 80074fc:	2b09      	cmp	r3, #9
 80074fe:	f200 8089 	bhi.w	8007614 <_dtoa_r+0x2f4>
 8007502:	2b05      	cmp	r3, #5
 8007504:	bfc4      	itt	gt
 8007506:	3b04      	subgt	r3, #4
 8007508:	9306      	strgt	r3, [sp, #24]
 800750a:	9b06      	ldr	r3, [sp, #24]
 800750c:	f1a3 0302 	sub.w	r3, r3, #2
 8007510:	bfcc      	ite	gt
 8007512:	2500      	movgt	r5, #0
 8007514:	2501      	movle	r5, #1
 8007516:	2b03      	cmp	r3, #3
 8007518:	f200 8087 	bhi.w	800762a <_dtoa_r+0x30a>
 800751c:	e8df f003 	tbb	[pc, r3]
 8007520:	59383a2d 	.word	0x59383a2d
 8007524:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007528:	441d      	add	r5, r3
 800752a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800752e:	2b20      	cmp	r3, #32
 8007530:	bfc1      	itttt	gt
 8007532:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007536:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800753a:	fa0b f303 	lslgt.w	r3, fp, r3
 800753e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007542:	bfda      	itte	le
 8007544:	f1c3 0320 	rsble	r3, r3, #32
 8007548:	fa06 f003 	lslle.w	r0, r6, r3
 800754c:	4318      	orrgt	r0, r3
 800754e:	f7f8 fff1 	bl	8000534 <__aeabi_ui2d>
 8007552:	2301      	movs	r3, #1
 8007554:	4606      	mov	r6, r0
 8007556:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800755a:	3d01      	subs	r5, #1
 800755c:	930e      	str	r3, [sp, #56]	; 0x38
 800755e:	e76a      	b.n	8007436 <_dtoa_r+0x116>
 8007560:	2301      	movs	r3, #1
 8007562:	e7b2      	b.n	80074ca <_dtoa_r+0x1aa>
 8007564:	900b      	str	r0, [sp, #44]	; 0x2c
 8007566:	e7b1      	b.n	80074cc <_dtoa_r+0x1ac>
 8007568:	9b04      	ldr	r3, [sp, #16]
 800756a:	9a00      	ldr	r2, [sp, #0]
 800756c:	1a9b      	subs	r3, r3, r2
 800756e:	9304      	str	r3, [sp, #16]
 8007570:	4253      	negs	r3, r2
 8007572:	9307      	str	r3, [sp, #28]
 8007574:	2300      	movs	r3, #0
 8007576:	930a      	str	r3, [sp, #40]	; 0x28
 8007578:	e7bf      	b.n	80074fa <_dtoa_r+0x1da>
 800757a:	2300      	movs	r3, #0
 800757c:	9308      	str	r3, [sp, #32]
 800757e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007580:	2b00      	cmp	r3, #0
 8007582:	dc55      	bgt.n	8007630 <_dtoa_r+0x310>
 8007584:	2301      	movs	r3, #1
 8007586:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800758a:	461a      	mov	r2, r3
 800758c:	9209      	str	r2, [sp, #36]	; 0x24
 800758e:	e00c      	b.n	80075aa <_dtoa_r+0x28a>
 8007590:	2301      	movs	r3, #1
 8007592:	e7f3      	b.n	800757c <_dtoa_r+0x25c>
 8007594:	2300      	movs	r3, #0
 8007596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007598:	9308      	str	r3, [sp, #32]
 800759a:	9b00      	ldr	r3, [sp, #0]
 800759c:	4413      	add	r3, r2
 800759e:	9302      	str	r3, [sp, #8]
 80075a0:	3301      	adds	r3, #1
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	9303      	str	r3, [sp, #12]
 80075a6:	bfb8      	it	lt
 80075a8:	2301      	movlt	r3, #1
 80075aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80075ac:	2200      	movs	r2, #0
 80075ae:	6042      	str	r2, [r0, #4]
 80075b0:	2204      	movs	r2, #4
 80075b2:	f102 0614 	add.w	r6, r2, #20
 80075b6:	429e      	cmp	r6, r3
 80075b8:	6841      	ldr	r1, [r0, #4]
 80075ba:	d93d      	bls.n	8007638 <_dtoa_r+0x318>
 80075bc:	4620      	mov	r0, r4
 80075be:	f001 f84b 	bl	8008658 <_Balloc>
 80075c2:	9001      	str	r0, [sp, #4]
 80075c4:	2800      	cmp	r0, #0
 80075c6:	d13b      	bne.n	8007640 <_dtoa_r+0x320>
 80075c8:	4b11      	ldr	r3, [pc, #68]	; (8007610 <_dtoa_r+0x2f0>)
 80075ca:	4602      	mov	r2, r0
 80075cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80075d0:	e6c0      	b.n	8007354 <_dtoa_r+0x34>
 80075d2:	2301      	movs	r3, #1
 80075d4:	e7df      	b.n	8007596 <_dtoa_r+0x276>
 80075d6:	bf00      	nop
 80075d8:	636f4361 	.word	0x636f4361
 80075dc:	3fd287a7 	.word	0x3fd287a7
 80075e0:	8b60c8b3 	.word	0x8b60c8b3
 80075e4:	3fc68a28 	.word	0x3fc68a28
 80075e8:	509f79fb 	.word	0x509f79fb
 80075ec:	3fd34413 	.word	0x3fd34413
 80075f0:	0800c706 	.word	0x0800c706
 80075f4:	0800c71d 	.word	0x0800c71d
 80075f8:	7ff00000 	.word	0x7ff00000
 80075fc:	0800c702 	.word	0x0800c702
 8007600:	0800c6f9 	.word	0x0800c6f9
 8007604:	0800c972 	.word	0x0800c972
 8007608:	3ff80000 	.word	0x3ff80000
 800760c:	0800c888 	.word	0x0800c888
 8007610:	0800c778 	.word	0x0800c778
 8007614:	2501      	movs	r5, #1
 8007616:	2300      	movs	r3, #0
 8007618:	9306      	str	r3, [sp, #24]
 800761a:	9508      	str	r5, [sp, #32]
 800761c:	f04f 33ff 	mov.w	r3, #4294967295
 8007620:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007624:	2200      	movs	r2, #0
 8007626:	2312      	movs	r3, #18
 8007628:	e7b0      	b.n	800758c <_dtoa_r+0x26c>
 800762a:	2301      	movs	r3, #1
 800762c:	9308      	str	r3, [sp, #32]
 800762e:	e7f5      	b.n	800761c <_dtoa_r+0x2fc>
 8007630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007632:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007636:	e7b8      	b.n	80075aa <_dtoa_r+0x28a>
 8007638:	3101      	adds	r1, #1
 800763a:	6041      	str	r1, [r0, #4]
 800763c:	0052      	lsls	r2, r2, #1
 800763e:	e7b8      	b.n	80075b2 <_dtoa_r+0x292>
 8007640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007642:	9a01      	ldr	r2, [sp, #4]
 8007644:	601a      	str	r2, [r3, #0]
 8007646:	9b03      	ldr	r3, [sp, #12]
 8007648:	2b0e      	cmp	r3, #14
 800764a:	f200 809d 	bhi.w	8007788 <_dtoa_r+0x468>
 800764e:	2d00      	cmp	r5, #0
 8007650:	f000 809a 	beq.w	8007788 <_dtoa_r+0x468>
 8007654:	9b00      	ldr	r3, [sp, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	dd32      	ble.n	80076c0 <_dtoa_r+0x3a0>
 800765a:	4ab7      	ldr	r2, [pc, #732]	; (8007938 <_dtoa_r+0x618>)
 800765c:	f003 030f 	and.w	r3, r3, #15
 8007660:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007664:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007668:	9b00      	ldr	r3, [sp, #0]
 800766a:	05d8      	lsls	r0, r3, #23
 800766c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007670:	d516      	bpl.n	80076a0 <_dtoa_r+0x380>
 8007672:	4bb2      	ldr	r3, [pc, #712]	; (800793c <_dtoa_r+0x61c>)
 8007674:	ec51 0b19 	vmov	r0, r1, d9
 8007678:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800767c:	f7f9 f8fe 	bl	800087c <__aeabi_ddiv>
 8007680:	f007 070f 	and.w	r7, r7, #15
 8007684:	4682      	mov	sl, r0
 8007686:	468b      	mov	fp, r1
 8007688:	2503      	movs	r5, #3
 800768a:	4eac      	ldr	r6, [pc, #688]	; (800793c <_dtoa_r+0x61c>)
 800768c:	b957      	cbnz	r7, 80076a4 <_dtoa_r+0x384>
 800768e:	4642      	mov	r2, r8
 8007690:	464b      	mov	r3, r9
 8007692:	4650      	mov	r0, sl
 8007694:	4659      	mov	r1, fp
 8007696:	f7f9 f8f1 	bl	800087c <__aeabi_ddiv>
 800769a:	4682      	mov	sl, r0
 800769c:	468b      	mov	fp, r1
 800769e:	e028      	b.n	80076f2 <_dtoa_r+0x3d2>
 80076a0:	2502      	movs	r5, #2
 80076a2:	e7f2      	b.n	800768a <_dtoa_r+0x36a>
 80076a4:	07f9      	lsls	r1, r7, #31
 80076a6:	d508      	bpl.n	80076ba <_dtoa_r+0x39a>
 80076a8:	4640      	mov	r0, r8
 80076aa:	4649      	mov	r1, r9
 80076ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80076b0:	f7f8 ffba 	bl	8000628 <__aeabi_dmul>
 80076b4:	3501      	adds	r5, #1
 80076b6:	4680      	mov	r8, r0
 80076b8:	4689      	mov	r9, r1
 80076ba:	107f      	asrs	r7, r7, #1
 80076bc:	3608      	adds	r6, #8
 80076be:	e7e5      	b.n	800768c <_dtoa_r+0x36c>
 80076c0:	f000 809b 	beq.w	80077fa <_dtoa_r+0x4da>
 80076c4:	9b00      	ldr	r3, [sp, #0]
 80076c6:	4f9d      	ldr	r7, [pc, #628]	; (800793c <_dtoa_r+0x61c>)
 80076c8:	425e      	negs	r6, r3
 80076ca:	4b9b      	ldr	r3, [pc, #620]	; (8007938 <_dtoa_r+0x618>)
 80076cc:	f006 020f 	and.w	r2, r6, #15
 80076d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d8:	ec51 0b19 	vmov	r0, r1, d9
 80076dc:	f7f8 ffa4 	bl	8000628 <__aeabi_dmul>
 80076e0:	1136      	asrs	r6, r6, #4
 80076e2:	4682      	mov	sl, r0
 80076e4:	468b      	mov	fp, r1
 80076e6:	2300      	movs	r3, #0
 80076e8:	2502      	movs	r5, #2
 80076ea:	2e00      	cmp	r6, #0
 80076ec:	d17a      	bne.n	80077e4 <_dtoa_r+0x4c4>
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1d3      	bne.n	800769a <_dtoa_r+0x37a>
 80076f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 8082 	beq.w	80077fe <_dtoa_r+0x4de>
 80076fa:	4b91      	ldr	r3, [pc, #580]	; (8007940 <_dtoa_r+0x620>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	4650      	mov	r0, sl
 8007700:	4659      	mov	r1, fp
 8007702:	f7f9 fa03 	bl	8000b0c <__aeabi_dcmplt>
 8007706:	2800      	cmp	r0, #0
 8007708:	d079      	beq.n	80077fe <_dtoa_r+0x4de>
 800770a:	9b03      	ldr	r3, [sp, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d076      	beq.n	80077fe <_dtoa_r+0x4de>
 8007710:	9b02      	ldr	r3, [sp, #8]
 8007712:	2b00      	cmp	r3, #0
 8007714:	dd36      	ble.n	8007784 <_dtoa_r+0x464>
 8007716:	9b00      	ldr	r3, [sp, #0]
 8007718:	4650      	mov	r0, sl
 800771a:	4659      	mov	r1, fp
 800771c:	1e5f      	subs	r7, r3, #1
 800771e:	2200      	movs	r2, #0
 8007720:	4b88      	ldr	r3, [pc, #544]	; (8007944 <_dtoa_r+0x624>)
 8007722:	f7f8 ff81 	bl	8000628 <__aeabi_dmul>
 8007726:	9e02      	ldr	r6, [sp, #8]
 8007728:	4682      	mov	sl, r0
 800772a:	468b      	mov	fp, r1
 800772c:	3501      	adds	r5, #1
 800772e:	4628      	mov	r0, r5
 8007730:	f7f8 ff10 	bl	8000554 <__aeabi_i2d>
 8007734:	4652      	mov	r2, sl
 8007736:	465b      	mov	r3, fp
 8007738:	f7f8 ff76 	bl	8000628 <__aeabi_dmul>
 800773c:	4b82      	ldr	r3, [pc, #520]	; (8007948 <_dtoa_r+0x628>)
 800773e:	2200      	movs	r2, #0
 8007740:	f7f8 fdbc 	bl	80002bc <__adddf3>
 8007744:	46d0      	mov	r8, sl
 8007746:	46d9      	mov	r9, fp
 8007748:	4682      	mov	sl, r0
 800774a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800774e:	2e00      	cmp	r6, #0
 8007750:	d158      	bne.n	8007804 <_dtoa_r+0x4e4>
 8007752:	4b7e      	ldr	r3, [pc, #504]	; (800794c <_dtoa_r+0x62c>)
 8007754:	2200      	movs	r2, #0
 8007756:	4640      	mov	r0, r8
 8007758:	4649      	mov	r1, r9
 800775a:	f7f8 fdad 	bl	80002b8 <__aeabi_dsub>
 800775e:	4652      	mov	r2, sl
 8007760:	465b      	mov	r3, fp
 8007762:	4680      	mov	r8, r0
 8007764:	4689      	mov	r9, r1
 8007766:	f7f9 f9ef 	bl	8000b48 <__aeabi_dcmpgt>
 800776a:	2800      	cmp	r0, #0
 800776c:	f040 8295 	bne.w	8007c9a <_dtoa_r+0x97a>
 8007770:	4652      	mov	r2, sl
 8007772:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007776:	4640      	mov	r0, r8
 8007778:	4649      	mov	r1, r9
 800777a:	f7f9 f9c7 	bl	8000b0c <__aeabi_dcmplt>
 800777e:	2800      	cmp	r0, #0
 8007780:	f040 8289 	bne.w	8007c96 <_dtoa_r+0x976>
 8007784:	ec5b ab19 	vmov	sl, fp, d9
 8007788:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800778a:	2b00      	cmp	r3, #0
 800778c:	f2c0 8148 	blt.w	8007a20 <_dtoa_r+0x700>
 8007790:	9a00      	ldr	r2, [sp, #0]
 8007792:	2a0e      	cmp	r2, #14
 8007794:	f300 8144 	bgt.w	8007a20 <_dtoa_r+0x700>
 8007798:	4b67      	ldr	r3, [pc, #412]	; (8007938 <_dtoa_r+0x618>)
 800779a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800779e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f280 80d5 	bge.w	8007954 <_dtoa_r+0x634>
 80077aa:	9b03      	ldr	r3, [sp, #12]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f300 80d1 	bgt.w	8007954 <_dtoa_r+0x634>
 80077b2:	f040 826f 	bne.w	8007c94 <_dtoa_r+0x974>
 80077b6:	4b65      	ldr	r3, [pc, #404]	; (800794c <_dtoa_r+0x62c>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	4640      	mov	r0, r8
 80077bc:	4649      	mov	r1, r9
 80077be:	f7f8 ff33 	bl	8000628 <__aeabi_dmul>
 80077c2:	4652      	mov	r2, sl
 80077c4:	465b      	mov	r3, fp
 80077c6:	f7f9 f9b5 	bl	8000b34 <__aeabi_dcmpge>
 80077ca:	9e03      	ldr	r6, [sp, #12]
 80077cc:	4637      	mov	r7, r6
 80077ce:	2800      	cmp	r0, #0
 80077d0:	f040 8245 	bne.w	8007c5e <_dtoa_r+0x93e>
 80077d4:	9d01      	ldr	r5, [sp, #4]
 80077d6:	2331      	movs	r3, #49	; 0x31
 80077d8:	f805 3b01 	strb.w	r3, [r5], #1
 80077dc:	9b00      	ldr	r3, [sp, #0]
 80077de:	3301      	adds	r3, #1
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	e240      	b.n	8007c66 <_dtoa_r+0x946>
 80077e4:	07f2      	lsls	r2, r6, #31
 80077e6:	d505      	bpl.n	80077f4 <_dtoa_r+0x4d4>
 80077e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077ec:	f7f8 ff1c 	bl	8000628 <__aeabi_dmul>
 80077f0:	3501      	adds	r5, #1
 80077f2:	2301      	movs	r3, #1
 80077f4:	1076      	asrs	r6, r6, #1
 80077f6:	3708      	adds	r7, #8
 80077f8:	e777      	b.n	80076ea <_dtoa_r+0x3ca>
 80077fa:	2502      	movs	r5, #2
 80077fc:	e779      	b.n	80076f2 <_dtoa_r+0x3d2>
 80077fe:	9f00      	ldr	r7, [sp, #0]
 8007800:	9e03      	ldr	r6, [sp, #12]
 8007802:	e794      	b.n	800772e <_dtoa_r+0x40e>
 8007804:	9901      	ldr	r1, [sp, #4]
 8007806:	4b4c      	ldr	r3, [pc, #304]	; (8007938 <_dtoa_r+0x618>)
 8007808:	4431      	add	r1, r6
 800780a:	910d      	str	r1, [sp, #52]	; 0x34
 800780c:	9908      	ldr	r1, [sp, #32]
 800780e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007812:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007816:	2900      	cmp	r1, #0
 8007818:	d043      	beq.n	80078a2 <_dtoa_r+0x582>
 800781a:	494d      	ldr	r1, [pc, #308]	; (8007950 <_dtoa_r+0x630>)
 800781c:	2000      	movs	r0, #0
 800781e:	f7f9 f82d 	bl	800087c <__aeabi_ddiv>
 8007822:	4652      	mov	r2, sl
 8007824:	465b      	mov	r3, fp
 8007826:	f7f8 fd47 	bl	80002b8 <__aeabi_dsub>
 800782a:	9d01      	ldr	r5, [sp, #4]
 800782c:	4682      	mov	sl, r0
 800782e:	468b      	mov	fp, r1
 8007830:	4649      	mov	r1, r9
 8007832:	4640      	mov	r0, r8
 8007834:	f7f9 f9a8 	bl	8000b88 <__aeabi_d2iz>
 8007838:	4606      	mov	r6, r0
 800783a:	f7f8 fe8b 	bl	8000554 <__aeabi_i2d>
 800783e:	4602      	mov	r2, r0
 8007840:	460b      	mov	r3, r1
 8007842:	4640      	mov	r0, r8
 8007844:	4649      	mov	r1, r9
 8007846:	f7f8 fd37 	bl	80002b8 <__aeabi_dsub>
 800784a:	3630      	adds	r6, #48	; 0x30
 800784c:	f805 6b01 	strb.w	r6, [r5], #1
 8007850:	4652      	mov	r2, sl
 8007852:	465b      	mov	r3, fp
 8007854:	4680      	mov	r8, r0
 8007856:	4689      	mov	r9, r1
 8007858:	f7f9 f958 	bl	8000b0c <__aeabi_dcmplt>
 800785c:	2800      	cmp	r0, #0
 800785e:	d163      	bne.n	8007928 <_dtoa_r+0x608>
 8007860:	4642      	mov	r2, r8
 8007862:	464b      	mov	r3, r9
 8007864:	4936      	ldr	r1, [pc, #216]	; (8007940 <_dtoa_r+0x620>)
 8007866:	2000      	movs	r0, #0
 8007868:	f7f8 fd26 	bl	80002b8 <__aeabi_dsub>
 800786c:	4652      	mov	r2, sl
 800786e:	465b      	mov	r3, fp
 8007870:	f7f9 f94c 	bl	8000b0c <__aeabi_dcmplt>
 8007874:	2800      	cmp	r0, #0
 8007876:	f040 80b5 	bne.w	80079e4 <_dtoa_r+0x6c4>
 800787a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800787c:	429d      	cmp	r5, r3
 800787e:	d081      	beq.n	8007784 <_dtoa_r+0x464>
 8007880:	4b30      	ldr	r3, [pc, #192]	; (8007944 <_dtoa_r+0x624>)
 8007882:	2200      	movs	r2, #0
 8007884:	4650      	mov	r0, sl
 8007886:	4659      	mov	r1, fp
 8007888:	f7f8 fece 	bl	8000628 <__aeabi_dmul>
 800788c:	4b2d      	ldr	r3, [pc, #180]	; (8007944 <_dtoa_r+0x624>)
 800788e:	4682      	mov	sl, r0
 8007890:	468b      	mov	fp, r1
 8007892:	4640      	mov	r0, r8
 8007894:	4649      	mov	r1, r9
 8007896:	2200      	movs	r2, #0
 8007898:	f7f8 fec6 	bl	8000628 <__aeabi_dmul>
 800789c:	4680      	mov	r8, r0
 800789e:	4689      	mov	r9, r1
 80078a0:	e7c6      	b.n	8007830 <_dtoa_r+0x510>
 80078a2:	4650      	mov	r0, sl
 80078a4:	4659      	mov	r1, fp
 80078a6:	f7f8 febf 	bl	8000628 <__aeabi_dmul>
 80078aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078ac:	9d01      	ldr	r5, [sp, #4]
 80078ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80078b0:	4682      	mov	sl, r0
 80078b2:	468b      	mov	fp, r1
 80078b4:	4649      	mov	r1, r9
 80078b6:	4640      	mov	r0, r8
 80078b8:	f7f9 f966 	bl	8000b88 <__aeabi_d2iz>
 80078bc:	4606      	mov	r6, r0
 80078be:	f7f8 fe49 	bl	8000554 <__aeabi_i2d>
 80078c2:	3630      	adds	r6, #48	; 0x30
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	4640      	mov	r0, r8
 80078ca:	4649      	mov	r1, r9
 80078cc:	f7f8 fcf4 	bl	80002b8 <__aeabi_dsub>
 80078d0:	f805 6b01 	strb.w	r6, [r5], #1
 80078d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078d6:	429d      	cmp	r5, r3
 80078d8:	4680      	mov	r8, r0
 80078da:	4689      	mov	r9, r1
 80078dc:	f04f 0200 	mov.w	r2, #0
 80078e0:	d124      	bne.n	800792c <_dtoa_r+0x60c>
 80078e2:	4b1b      	ldr	r3, [pc, #108]	; (8007950 <_dtoa_r+0x630>)
 80078e4:	4650      	mov	r0, sl
 80078e6:	4659      	mov	r1, fp
 80078e8:	f7f8 fce8 	bl	80002bc <__adddf3>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	4640      	mov	r0, r8
 80078f2:	4649      	mov	r1, r9
 80078f4:	f7f9 f928 	bl	8000b48 <__aeabi_dcmpgt>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d173      	bne.n	80079e4 <_dtoa_r+0x6c4>
 80078fc:	4652      	mov	r2, sl
 80078fe:	465b      	mov	r3, fp
 8007900:	4913      	ldr	r1, [pc, #76]	; (8007950 <_dtoa_r+0x630>)
 8007902:	2000      	movs	r0, #0
 8007904:	f7f8 fcd8 	bl	80002b8 <__aeabi_dsub>
 8007908:	4602      	mov	r2, r0
 800790a:	460b      	mov	r3, r1
 800790c:	4640      	mov	r0, r8
 800790e:	4649      	mov	r1, r9
 8007910:	f7f9 f8fc 	bl	8000b0c <__aeabi_dcmplt>
 8007914:	2800      	cmp	r0, #0
 8007916:	f43f af35 	beq.w	8007784 <_dtoa_r+0x464>
 800791a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800791c:	1e6b      	subs	r3, r5, #1
 800791e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007920:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007924:	2b30      	cmp	r3, #48	; 0x30
 8007926:	d0f8      	beq.n	800791a <_dtoa_r+0x5fa>
 8007928:	9700      	str	r7, [sp, #0]
 800792a:	e049      	b.n	80079c0 <_dtoa_r+0x6a0>
 800792c:	4b05      	ldr	r3, [pc, #20]	; (8007944 <_dtoa_r+0x624>)
 800792e:	f7f8 fe7b 	bl	8000628 <__aeabi_dmul>
 8007932:	4680      	mov	r8, r0
 8007934:	4689      	mov	r9, r1
 8007936:	e7bd      	b.n	80078b4 <_dtoa_r+0x594>
 8007938:	0800c888 	.word	0x0800c888
 800793c:	0800c860 	.word	0x0800c860
 8007940:	3ff00000 	.word	0x3ff00000
 8007944:	40240000 	.word	0x40240000
 8007948:	401c0000 	.word	0x401c0000
 800794c:	40140000 	.word	0x40140000
 8007950:	3fe00000 	.word	0x3fe00000
 8007954:	9d01      	ldr	r5, [sp, #4]
 8007956:	4656      	mov	r6, sl
 8007958:	465f      	mov	r7, fp
 800795a:	4642      	mov	r2, r8
 800795c:	464b      	mov	r3, r9
 800795e:	4630      	mov	r0, r6
 8007960:	4639      	mov	r1, r7
 8007962:	f7f8 ff8b 	bl	800087c <__aeabi_ddiv>
 8007966:	f7f9 f90f 	bl	8000b88 <__aeabi_d2iz>
 800796a:	4682      	mov	sl, r0
 800796c:	f7f8 fdf2 	bl	8000554 <__aeabi_i2d>
 8007970:	4642      	mov	r2, r8
 8007972:	464b      	mov	r3, r9
 8007974:	f7f8 fe58 	bl	8000628 <__aeabi_dmul>
 8007978:	4602      	mov	r2, r0
 800797a:	460b      	mov	r3, r1
 800797c:	4630      	mov	r0, r6
 800797e:	4639      	mov	r1, r7
 8007980:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007984:	f7f8 fc98 	bl	80002b8 <__aeabi_dsub>
 8007988:	f805 6b01 	strb.w	r6, [r5], #1
 800798c:	9e01      	ldr	r6, [sp, #4]
 800798e:	9f03      	ldr	r7, [sp, #12]
 8007990:	1bae      	subs	r6, r5, r6
 8007992:	42b7      	cmp	r7, r6
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	d135      	bne.n	8007a06 <_dtoa_r+0x6e6>
 800799a:	f7f8 fc8f 	bl	80002bc <__adddf3>
 800799e:	4642      	mov	r2, r8
 80079a0:	464b      	mov	r3, r9
 80079a2:	4606      	mov	r6, r0
 80079a4:	460f      	mov	r7, r1
 80079a6:	f7f9 f8cf 	bl	8000b48 <__aeabi_dcmpgt>
 80079aa:	b9d0      	cbnz	r0, 80079e2 <_dtoa_r+0x6c2>
 80079ac:	4642      	mov	r2, r8
 80079ae:	464b      	mov	r3, r9
 80079b0:	4630      	mov	r0, r6
 80079b2:	4639      	mov	r1, r7
 80079b4:	f7f9 f8a0 	bl	8000af8 <__aeabi_dcmpeq>
 80079b8:	b110      	cbz	r0, 80079c0 <_dtoa_r+0x6a0>
 80079ba:	f01a 0f01 	tst.w	sl, #1
 80079be:	d110      	bne.n	80079e2 <_dtoa_r+0x6c2>
 80079c0:	4620      	mov	r0, r4
 80079c2:	ee18 1a10 	vmov	r1, s16
 80079c6:	f000 fe87 	bl	80086d8 <_Bfree>
 80079ca:	2300      	movs	r3, #0
 80079cc:	9800      	ldr	r0, [sp, #0]
 80079ce:	702b      	strb	r3, [r5, #0]
 80079d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079d2:	3001      	adds	r0, #1
 80079d4:	6018      	str	r0, [r3, #0]
 80079d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f43f acf1 	beq.w	80073c0 <_dtoa_r+0xa0>
 80079de:	601d      	str	r5, [r3, #0]
 80079e0:	e4ee      	b.n	80073c0 <_dtoa_r+0xa0>
 80079e2:	9f00      	ldr	r7, [sp, #0]
 80079e4:	462b      	mov	r3, r5
 80079e6:	461d      	mov	r5, r3
 80079e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079ec:	2a39      	cmp	r2, #57	; 0x39
 80079ee:	d106      	bne.n	80079fe <_dtoa_r+0x6de>
 80079f0:	9a01      	ldr	r2, [sp, #4]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d1f7      	bne.n	80079e6 <_dtoa_r+0x6c6>
 80079f6:	9901      	ldr	r1, [sp, #4]
 80079f8:	2230      	movs	r2, #48	; 0x30
 80079fa:	3701      	adds	r7, #1
 80079fc:	700a      	strb	r2, [r1, #0]
 80079fe:	781a      	ldrb	r2, [r3, #0]
 8007a00:	3201      	adds	r2, #1
 8007a02:	701a      	strb	r2, [r3, #0]
 8007a04:	e790      	b.n	8007928 <_dtoa_r+0x608>
 8007a06:	4ba6      	ldr	r3, [pc, #664]	; (8007ca0 <_dtoa_r+0x980>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f7f8 fe0d 	bl	8000628 <__aeabi_dmul>
 8007a0e:	2200      	movs	r2, #0
 8007a10:	2300      	movs	r3, #0
 8007a12:	4606      	mov	r6, r0
 8007a14:	460f      	mov	r7, r1
 8007a16:	f7f9 f86f 	bl	8000af8 <__aeabi_dcmpeq>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d09d      	beq.n	800795a <_dtoa_r+0x63a>
 8007a1e:	e7cf      	b.n	80079c0 <_dtoa_r+0x6a0>
 8007a20:	9a08      	ldr	r2, [sp, #32]
 8007a22:	2a00      	cmp	r2, #0
 8007a24:	f000 80d7 	beq.w	8007bd6 <_dtoa_r+0x8b6>
 8007a28:	9a06      	ldr	r2, [sp, #24]
 8007a2a:	2a01      	cmp	r2, #1
 8007a2c:	f300 80ba 	bgt.w	8007ba4 <_dtoa_r+0x884>
 8007a30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a32:	2a00      	cmp	r2, #0
 8007a34:	f000 80b2 	beq.w	8007b9c <_dtoa_r+0x87c>
 8007a38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a3c:	9e07      	ldr	r6, [sp, #28]
 8007a3e:	9d04      	ldr	r5, [sp, #16]
 8007a40:	9a04      	ldr	r2, [sp, #16]
 8007a42:	441a      	add	r2, r3
 8007a44:	9204      	str	r2, [sp, #16]
 8007a46:	9a05      	ldr	r2, [sp, #20]
 8007a48:	2101      	movs	r1, #1
 8007a4a:	441a      	add	r2, r3
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	9205      	str	r2, [sp, #20]
 8007a50:	f000 ff44 	bl	80088dc <__i2b>
 8007a54:	4607      	mov	r7, r0
 8007a56:	2d00      	cmp	r5, #0
 8007a58:	dd0c      	ble.n	8007a74 <_dtoa_r+0x754>
 8007a5a:	9b05      	ldr	r3, [sp, #20]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	dd09      	ble.n	8007a74 <_dtoa_r+0x754>
 8007a60:	42ab      	cmp	r3, r5
 8007a62:	9a04      	ldr	r2, [sp, #16]
 8007a64:	bfa8      	it	ge
 8007a66:	462b      	movge	r3, r5
 8007a68:	1ad2      	subs	r2, r2, r3
 8007a6a:	9204      	str	r2, [sp, #16]
 8007a6c:	9a05      	ldr	r2, [sp, #20]
 8007a6e:	1aed      	subs	r5, r5, r3
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	9305      	str	r3, [sp, #20]
 8007a74:	9b07      	ldr	r3, [sp, #28]
 8007a76:	b31b      	cbz	r3, 8007ac0 <_dtoa_r+0x7a0>
 8007a78:	9b08      	ldr	r3, [sp, #32]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 80af 	beq.w	8007bde <_dtoa_r+0x8be>
 8007a80:	2e00      	cmp	r6, #0
 8007a82:	dd13      	ble.n	8007aac <_dtoa_r+0x78c>
 8007a84:	4639      	mov	r1, r7
 8007a86:	4632      	mov	r2, r6
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f000 ffe7 	bl	8008a5c <__pow5mult>
 8007a8e:	ee18 2a10 	vmov	r2, s16
 8007a92:	4601      	mov	r1, r0
 8007a94:	4607      	mov	r7, r0
 8007a96:	4620      	mov	r0, r4
 8007a98:	f000 ff36 	bl	8008908 <__multiply>
 8007a9c:	ee18 1a10 	vmov	r1, s16
 8007aa0:	4680      	mov	r8, r0
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f000 fe18 	bl	80086d8 <_Bfree>
 8007aa8:	ee08 8a10 	vmov	s16, r8
 8007aac:	9b07      	ldr	r3, [sp, #28]
 8007aae:	1b9a      	subs	r2, r3, r6
 8007ab0:	d006      	beq.n	8007ac0 <_dtoa_r+0x7a0>
 8007ab2:	ee18 1a10 	vmov	r1, s16
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f000 ffd0 	bl	8008a5c <__pow5mult>
 8007abc:	ee08 0a10 	vmov	s16, r0
 8007ac0:	2101      	movs	r1, #1
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f000 ff0a 	bl	80088dc <__i2b>
 8007ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	4606      	mov	r6, r0
 8007ace:	f340 8088 	ble.w	8007be2 <_dtoa_r+0x8c2>
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	4601      	mov	r1, r0
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f000 ffc0 	bl	8008a5c <__pow5mult>
 8007adc:	9b06      	ldr	r3, [sp, #24]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	4606      	mov	r6, r0
 8007ae2:	f340 8081 	ble.w	8007be8 <_dtoa_r+0x8c8>
 8007ae6:	f04f 0800 	mov.w	r8, #0
 8007aea:	6933      	ldr	r3, [r6, #16]
 8007aec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007af0:	6918      	ldr	r0, [r3, #16]
 8007af2:	f000 fea3 	bl	800883c <__hi0bits>
 8007af6:	f1c0 0020 	rsb	r0, r0, #32
 8007afa:	9b05      	ldr	r3, [sp, #20]
 8007afc:	4418      	add	r0, r3
 8007afe:	f010 001f 	ands.w	r0, r0, #31
 8007b02:	f000 8092 	beq.w	8007c2a <_dtoa_r+0x90a>
 8007b06:	f1c0 0320 	rsb	r3, r0, #32
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	f340 808a 	ble.w	8007c24 <_dtoa_r+0x904>
 8007b10:	f1c0 001c 	rsb	r0, r0, #28
 8007b14:	9b04      	ldr	r3, [sp, #16]
 8007b16:	4403      	add	r3, r0
 8007b18:	9304      	str	r3, [sp, #16]
 8007b1a:	9b05      	ldr	r3, [sp, #20]
 8007b1c:	4403      	add	r3, r0
 8007b1e:	4405      	add	r5, r0
 8007b20:	9305      	str	r3, [sp, #20]
 8007b22:	9b04      	ldr	r3, [sp, #16]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	dd07      	ble.n	8007b38 <_dtoa_r+0x818>
 8007b28:	ee18 1a10 	vmov	r1, s16
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f000 ffee 	bl	8008b10 <__lshift>
 8007b34:	ee08 0a10 	vmov	s16, r0
 8007b38:	9b05      	ldr	r3, [sp, #20]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	dd05      	ble.n	8007b4a <_dtoa_r+0x82a>
 8007b3e:	4631      	mov	r1, r6
 8007b40:	461a      	mov	r2, r3
 8007b42:	4620      	mov	r0, r4
 8007b44:	f000 ffe4 	bl	8008b10 <__lshift>
 8007b48:	4606      	mov	r6, r0
 8007b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d06e      	beq.n	8007c2e <_dtoa_r+0x90e>
 8007b50:	ee18 0a10 	vmov	r0, s16
 8007b54:	4631      	mov	r1, r6
 8007b56:	f001 f84b 	bl	8008bf0 <__mcmp>
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	da67      	bge.n	8007c2e <_dtoa_r+0x90e>
 8007b5e:	9b00      	ldr	r3, [sp, #0]
 8007b60:	3b01      	subs	r3, #1
 8007b62:	ee18 1a10 	vmov	r1, s16
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	220a      	movs	r2, #10
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f000 fdd5 	bl	800871c <__multadd>
 8007b72:	9b08      	ldr	r3, [sp, #32]
 8007b74:	ee08 0a10 	vmov	s16, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 81b1 	beq.w	8007ee0 <_dtoa_r+0xbc0>
 8007b7e:	2300      	movs	r3, #0
 8007b80:	4639      	mov	r1, r7
 8007b82:	220a      	movs	r2, #10
 8007b84:	4620      	mov	r0, r4
 8007b86:	f000 fdc9 	bl	800871c <__multadd>
 8007b8a:	9b02      	ldr	r3, [sp, #8]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	4607      	mov	r7, r0
 8007b90:	f300 808e 	bgt.w	8007cb0 <_dtoa_r+0x990>
 8007b94:	9b06      	ldr	r3, [sp, #24]
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	dc51      	bgt.n	8007c3e <_dtoa_r+0x91e>
 8007b9a:	e089      	b.n	8007cb0 <_dtoa_r+0x990>
 8007b9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ba2:	e74b      	b.n	8007a3c <_dtoa_r+0x71c>
 8007ba4:	9b03      	ldr	r3, [sp, #12]
 8007ba6:	1e5e      	subs	r6, r3, #1
 8007ba8:	9b07      	ldr	r3, [sp, #28]
 8007baa:	42b3      	cmp	r3, r6
 8007bac:	bfbf      	itttt	lt
 8007bae:	9b07      	ldrlt	r3, [sp, #28]
 8007bb0:	9607      	strlt	r6, [sp, #28]
 8007bb2:	1af2      	sublt	r2, r6, r3
 8007bb4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007bb6:	bfb6      	itet	lt
 8007bb8:	189b      	addlt	r3, r3, r2
 8007bba:	1b9e      	subge	r6, r3, r6
 8007bbc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007bbe:	9b03      	ldr	r3, [sp, #12]
 8007bc0:	bfb8      	it	lt
 8007bc2:	2600      	movlt	r6, #0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	bfb7      	itett	lt
 8007bc8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007bcc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007bd0:	1a9d      	sublt	r5, r3, r2
 8007bd2:	2300      	movlt	r3, #0
 8007bd4:	e734      	b.n	8007a40 <_dtoa_r+0x720>
 8007bd6:	9e07      	ldr	r6, [sp, #28]
 8007bd8:	9d04      	ldr	r5, [sp, #16]
 8007bda:	9f08      	ldr	r7, [sp, #32]
 8007bdc:	e73b      	b.n	8007a56 <_dtoa_r+0x736>
 8007bde:	9a07      	ldr	r2, [sp, #28]
 8007be0:	e767      	b.n	8007ab2 <_dtoa_r+0x792>
 8007be2:	9b06      	ldr	r3, [sp, #24]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	dc18      	bgt.n	8007c1a <_dtoa_r+0x8fa>
 8007be8:	f1ba 0f00 	cmp.w	sl, #0
 8007bec:	d115      	bne.n	8007c1a <_dtoa_r+0x8fa>
 8007bee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bf2:	b993      	cbnz	r3, 8007c1a <_dtoa_r+0x8fa>
 8007bf4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007bf8:	0d1b      	lsrs	r3, r3, #20
 8007bfa:	051b      	lsls	r3, r3, #20
 8007bfc:	b183      	cbz	r3, 8007c20 <_dtoa_r+0x900>
 8007bfe:	9b04      	ldr	r3, [sp, #16]
 8007c00:	3301      	adds	r3, #1
 8007c02:	9304      	str	r3, [sp, #16]
 8007c04:	9b05      	ldr	r3, [sp, #20]
 8007c06:	3301      	adds	r3, #1
 8007c08:	9305      	str	r3, [sp, #20]
 8007c0a:	f04f 0801 	mov.w	r8, #1
 8007c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f47f af6a 	bne.w	8007aea <_dtoa_r+0x7ca>
 8007c16:	2001      	movs	r0, #1
 8007c18:	e76f      	b.n	8007afa <_dtoa_r+0x7da>
 8007c1a:	f04f 0800 	mov.w	r8, #0
 8007c1e:	e7f6      	b.n	8007c0e <_dtoa_r+0x8ee>
 8007c20:	4698      	mov	r8, r3
 8007c22:	e7f4      	b.n	8007c0e <_dtoa_r+0x8ee>
 8007c24:	f43f af7d 	beq.w	8007b22 <_dtoa_r+0x802>
 8007c28:	4618      	mov	r0, r3
 8007c2a:	301c      	adds	r0, #28
 8007c2c:	e772      	b.n	8007b14 <_dtoa_r+0x7f4>
 8007c2e:	9b03      	ldr	r3, [sp, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	dc37      	bgt.n	8007ca4 <_dtoa_r+0x984>
 8007c34:	9b06      	ldr	r3, [sp, #24]
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	dd34      	ble.n	8007ca4 <_dtoa_r+0x984>
 8007c3a:	9b03      	ldr	r3, [sp, #12]
 8007c3c:	9302      	str	r3, [sp, #8]
 8007c3e:	9b02      	ldr	r3, [sp, #8]
 8007c40:	b96b      	cbnz	r3, 8007c5e <_dtoa_r+0x93e>
 8007c42:	4631      	mov	r1, r6
 8007c44:	2205      	movs	r2, #5
 8007c46:	4620      	mov	r0, r4
 8007c48:	f000 fd68 	bl	800871c <__multadd>
 8007c4c:	4601      	mov	r1, r0
 8007c4e:	4606      	mov	r6, r0
 8007c50:	ee18 0a10 	vmov	r0, s16
 8007c54:	f000 ffcc 	bl	8008bf0 <__mcmp>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	f73f adbb 	bgt.w	80077d4 <_dtoa_r+0x4b4>
 8007c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c60:	9d01      	ldr	r5, [sp, #4]
 8007c62:	43db      	mvns	r3, r3
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	f04f 0800 	mov.w	r8, #0
 8007c6a:	4631      	mov	r1, r6
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	f000 fd33 	bl	80086d8 <_Bfree>
 8007c72:	2f00      	cmp	r7, #0
 8007c74:	f43f aea4 	beq.w	80079c0 <_dtoa_r+0x6a0>
 8007c78:	f1b8 0f00 	cmp.w	r8, #0
 8007c7c:	d005      	beq.n	8007c8a <_dtoa_r+0x96a>
 8007c7e:	45b8      	cmp	r8, r7
 8007c80:	d003      	beq.n	8007c8a <_dtoa_r+0x96a>
 8007c82:	4641      	mov	r1, r8
 8007c84:	4620      	mov	r0, r4
 8007c86:	f000 fd27 	bl	80086d8 <_Bfree>
 8007c8a:	4639      	mov	r1, r7
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	f000 fd23 	bl	80086d8 <_Bfree>
 8007c92:	e695      	b.n	80079c0 <_dtoa_r+0x6a0>
 8007c94:	2600      	movs	r6, #0
 8007c96:	4637      	mov	r7, r6
 8007c98:	e7e1      	b.n	8007c5e <_dtoa_r+0x93e>
 8007c9a:	9700      	str	r7, [sp, #0]
 8007c9c:	4637      	mov	r7, r6
 8007c9e:	e599      	b.n	80077d4 <_dtoa_r+0x4b4>
 8007ca0:	40240000 	.word	0x40240000
 8007ca4:	9b08      	ldr	r3, [sp, #32]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f000 80ca 	beq.w	8007e40 <_dtoa_r+0xb20>
 8007cac:	9b03      	ldr	r3, [sp, #12]
 8007cae:	9302      	str	r3, [sp, #8]
 8007cb0:	2d00      	cmp	r5, #0
 8007cb2:	dd05      	ble.n	8007cc0 <_dtoa_r+0x9a0>
 8007cb4:	4639      	mov	r1, r7
 8007cb6:	462a      	mov	r2, r5
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f000 ff29 	bl	8008b10 <__lshift>
 8007cbe:	4607      	mov	r7, r0
 8007cc0:	f1b8 0f00 	cmp.w	r8, #0
 8007cc4:	d05b      	beq.n	8007d7e <_dtoa_r+0xa5e>
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f000 fcc5 	bl	8008658 <_Balloc>
 8007cce:	4605      	mov	r5, r0
 8007cd0:	b928      	cbnz	r0, 8007cde <_dtoa_r+0x9be>
 8007cd2:	4b87      	ldr	r3, [pc, #540]	; (8007ef0 <_dtoa_r+0xbd0>)
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007cda:	f7ff bb3b 	b.w	8007354 <_dtoa_r+0x34>
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	3202      	adds	r2, #2
 8007ce2:	0092      	lsls	r2, r2, #2
 8007ce4:	f107 010c 	add.w	r1, r7, #12
 8007ce8:	300c      	adds	r0, #12
 8007cea:	f000 fca7 	bl	800863c <memcpy>
 8007cee:	2201      	movs	r2, #1
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f000 ff0c 	bl	8008b10 <__lshift>
 8007cf8:	9b01      	ldr	r3, [sp, #4]
 8007cfa:	f103 0901 	add.w	r9, r3, #1
 8007cfe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007d02:	4413      	add	r3, r2
 8007d04:	9305      	str	r3, [sp, #20]
 8007d06:	f00a 0301 	and.w	r3, sl, #1
 8007d0a:	46b8      	mov	r8, r7
 8007d0c:	9304      	str	r3, [sp, #16]
 8007d0e:	4607      	mov	r7, r0
 8007d10:	4631      	mov	r1, r6
 8007d12:	ee18 0a10 	vmov	r0, s16
 8007d16:	f7ff fa75 	bl	8007204 <quorem>
 8007d1a:	4641      	mov	r1, r8
 8007d1c:	9002      	str	r0, [sp, #8]
 8007d1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007d22:	ee18 0a10 	vmov	r0, s16
 8007d26:	f000 ff63 	bl	8008bf0 <__mcmp>
 8007d2a:	463a      	mov	r2, r7
 8007d2c:	9003      	str	r0, [sp, #12]
 8007d2e:	4631      	mov	r1, r6
 8007d30:	4620      	mov	r0, r4
 8007d32:	f000 ff79 	bl	8008c28 <__mdiff>
 8007d36:	68c2      	ldr	r2, [r0, #12]
 8007d38:	f109 3bff 	add.w	fp, r9, #4294967295
 8007d3c:	4605      	mov	r5, r0
 8007d3e:	bb02      	cbnz	r2, 8007d82 <_dtoa_r+0xa62>
 8007d40:	4601      	mov	r1, r0
 8007d42:	ee18 0a10 	vmov	r0, s16
 8007d46:	f000 ff53 	bl	8008bf0 <__mcmp>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	4620      	mov	r0, r4
 8007d50:	9207      	str	r2, [sp, #28]
 8007d52:	f000 fcc1 	bl	80086d8 <_Bfree>
 8007d56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007d5a:	ea43 0102 	orr.w	r1, r3, r2
 8007d5e:	9b04      	ldr	r3, [sp, #16]
 8007d60:	430b      	orrs	r3, r1
 8007d62:	464d      	mov	r5, r9
 8007d64:	d10f      	bne.n	8007d86 <_dtoa_r+0xa66>
 8007d66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d6a:	d02a      	beq.n	8007dc2 <_dtoa_r+0xaa2>
 8007d6c:	9b03      	ldr	r3, [sp, #12]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	dd02      	ble.n	8007d78 <_dtoa_r+0xa58>
 8007d72:	9b02      	ldr	r3, [sp, #8]
 8007d74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007d78:	f88b a000 	strb.w	sl, [fp]
 8007d7c:	e775      	b.n	8007c6a <_dtoa_r+0x94a>
 8007d7e:	4638      	mov	r0, r7
 8007d80:	e7ba      	b.n	8007cf8 <_dtoa_r+0x9d8>
 8007d82:	2201      	movs	r2, #1
 8007d84:	e7e2      	b.n	8007d4c <_dtoa_r+0xa2c>
 8007d86:	9b03      	ldr	r3, [sp, #12]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	db04      	blt.n	8007d96 <_dtoa_r+0xa76>
 8007d8c:	9906      	ldr	r1, [sp, #24]
 8007d8e:	430b      	orrs	r3, r1
 8007d90:	9904      	ldr	r1, [sp, #16]
 8007d92:	430b      	orrs	r3, r1
 8007d94:	d122      	bne.n	8007ddc <_dtoa_r+0xabc>
 8007d96:	2a00      	cmp	r2, #0
 8007d98:	ddee      	ble.n	8007d78 <_dtoa_r+0xa58>
 8007d9a:	ee18 1a10 	vmov	r1, s16
 8007d9e:	2201      	movs	r2, #1
 8007da0:	4620      	mov	r0, r4
 8007da2:	f000 feb5 	bl	8008b10 <__lshift>
 8007da6:	4631      	mov	r1, r6
 8007da8:	ee08 0a10 	vmov	s16, r0
 8007dac:	f000 ff20 	bl	8008bf0 <__mcmp>
 8007db0:	2800      	cmp	r0, #0
 8007db2:	dc03      	bgt.n	8007dbc <_dtoa_r+0xa9c>
 8007db4:	d1e0      	bne.n	8007d78 <_dtoa_r+0xa58>
 8007db6:	f01a 0f01 	tst.w	sl, #1
 8007dba:	d0dd      	beq.n	8007d78 <_dtoa_r+0xa58>
 8007dbc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007dc0:	d1d7      	bne.n	8007d72 <_dtoa_r+0xa52>
 8007dc2:	2339      	movs	r3, #57	; 0x39
 8007dc4:	f88b 3000 	strb.w	r3, [fp]
 8007dc8:	462b      	mov	r3, r5
 8007dca:	461d      	mov	r5, r3
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007dd2:	2a39      	cmp	r2, #57	; 0x39
 8007dd4:	d071      	beq.n	8007eba <_dtoa_r+0xb9a>
 8007dd6:	3201      	adds	r2, #1
 8007dd8:	701a      	strb	r2, [r3, #0]
 8007dda:	e746      	b.n	8007c6a <_dtoa_r+0x94a>
 8007ddc:	2a00      	cmp	r2, #0
 8007dde:	dd07      	ble.n	8007df0 <_dtoa_r+0xad0>
 8007de0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007de4:	d0ed      	beq.n	8007dc2 <_dtoa_r+0xaa2>
 8007de6:	f10a 0301 	add.w	r3, sl, #1
 8007dea:	f88b 3000 	strb.w	r3, [fp]
 8007dee:	e73c      	b.n	8007c6a <_dtoa_r+0x94a>
 8007df0:	9b05      	ldr	r3, [sp, #20]
 8007df2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007df6:	4599      	cmp	r9, r3
 8007df8:	d047      	beq.n	8007e8a <_dtoa_r+0xb6a>
 8007dfa:	ee18 1a10 	vmov	r1, s16
 8007dfe:	2300      	movs	r3, #0
 8007e00:	220a      	movs	r2, #10
 8007e02:	4620      	mov	r0, r4
 8007e04:	f000 fc8a 	bl	800871c <__multadd>
 8007e08:	45b8      	cmp	r8, r7
 8007e0a:	ee08 0a10 	vmov	s16, r0
 8007e0e:	f04f 0300 	mov.w	r3, #0
 8007e12:	f04f 020a 	mov.w	r2, #10
 8007e16:	4641      	mov	r1, r8
 8007e18:	4620      	mov	r0, r4
 8007e1a:	d106      	bne.n	8007e2a <_dtoa_r+0xb0a>
 8007e1c:	f000 fc7e 	bl	800871c <__multadd>
 8007e20:	4680      	mov	r8, r0
 8007e22:	4607      	mov	r7, r0
 8007e24:	f109 0901 	add.w	r9, r9, #1
 8007e28:	e772      	b.n	8007d10 <_dtoa_r+0x9f0>
 8007e2a:	f000 fc77 	bl	800871c <__multadd>
 8007e2e:	4639      	mov	r1, r7
 8007e30:	4680      	mov	r8, r0
 8007e32:	2300      	movs	r3, #0
 8007e34:	220a      	movs	r2, #10
 8007e36:	4620      	mov	r0, r4
 8007e38:	f000 fc70 	bl	800871c <__multadd>
 8007e3c:	4607      	mov	r7, r0
 8007e3e:	e7f1      	b.n	8007e24 <_dtoa_r+0xb04>
 8007e40:	9b03      	ldr	r3, [sp, #12]
 8007e42:	9302      	str	r3, [sp, #8]
 8007e44:	9d01      	ldr	r5, [sp, #4]
 8007e46:	ee18 0a10 	vmov	r0, s16
 8007e4a:	4631      	mov	r1, r6
 8007e4c:	f7ff f9da 	bl	8007204 <quorem>
 8007e50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007e54:	9b01      	ldr	r3, [sp, #4]
 8007e56:	f805 ab01 	strb.w	sl, [r5], #1
 8007e5a:	1aea      	subs	r2, r5, r3
 8007e5c:	9b02      	ldr	r3, [sp, #8]
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	dd09      	ble.n	8007e76 <_dtoa_r+0xb56>
 8007e62:	ee18 1a10 	vmov	r1, s16
 8007e66:	2300      	movs	r3, #0
 8007e68:	220a      	movs	r2, #10
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f000 fc56 	bl	800871c <__multadd>
 8007e70:	ee08 0a10 	vmov	s16, r0
 8007e74:	e7e7      	b.n	8007e46 <_dtoa_r+0xb26>
 8007e76:	9b02      	ldr	r3, [sp, #8]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	bfc8      	it	gt
 8007e7c:	461d      	movgt	r5, r3
 8007e7e:	9b01      	ldr	r3, [sp, #4]
 8007e80:	bfd8      	it	le
 8007e82:	2501      	movle	r5, #1
 8007e84:	441d      	add	r5, r3
 8007e86:	f04f 0800 	mov.w	r8, #0
 8007e8a:	ee18 1a10 	vmov	r1, s16
 8007e8e:	2201      	movs	r2, #1
 8007e90:	4620      	mov	r0, r4
 8007e92:	f000 fe3d 	bl	8008b10 <__lshift>
 8007e96:	4631      	mov	r1, r6
 8007e98:	ee08 0a10 	vmov	s16, r0
 8007e9c:	f000 fea8 	bl	8008bf0 <__mcmp>
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	dc91      	bgt.n	8007dc8 <_dtoa_r+0xaa8>
 8007ea4:	d102      	bne.n	8007eac <_dtoa_r+0xb8c>
 8007ea6:	f01a 0f01 	tst.w	sl, #1
 8007eaa:	d18d      	bne.n	8007dc8 <_dtoa_r+0xaa8>
 8007eac:	462b      	mov	r3, r5
 8007eae:	461d      	mov	r5, r3
 8007eb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007eb4:	2a30      	cmp	r2, #48	; 0x30
 8007eb6:	d0fa      	beq.n	8007eae <_dtoa_r+0xb8e>
 8007eb8:	e6d7      	b.n	8007c6a <_dtoa_r+0x94a>
 8007eba:	9a01      	ldr	r2, [sp, #4]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d184      	bne.n	8007dca <_dtoa_r+0xaaa>
 8007ec0:	9b00      	ldr	r3, [sp, #0]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	2331      	movs	r3, #49	; 0x31
 8007ec8:	7013      	strb	r3, [r2, #0]
 8007eca:	e6ce      	b.n	8007c6a <_dtoa_r+0x94a>
 8007ecc:	4b09      	ldr	r3, [pc, #36]	; (8007ef4 <_dtoa_r+0xbd4>)
 8007ece:	f7ff ba95 	b.w	80073fc <_dtoa_r+0xdc>
 8007ed2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f47f aa6e 	bne.w	80073b6 <_dtoa_r+0x96>
 8007eda:	4b07      	ldr	r3, [pc, #28]	; (8007ef8 <_dtoa_r+0xbd8>)
 8007edc:	f7ff ba8e 	b.w	80073fc <_dtoa_r+0xdc>
 8007ee0:	9b02      	ldr	r3, [sp, #8]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	dcae      	bgt.n	8007e44 <_dtoa_r+0xb24>
 8007ee6:	9b06      	ldr	r3, [sp, #24]
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	f73f aea8 	bgt.w	8007c3e <_dtoa_r+0x91e>
 8007eee:	e7a9      	b.n	8007e44 <_dtoa_r+0xb24>
 8007ef0:	0800c778 	.word	0x0800c778
 8007ef4:	0800c971 	.word	0x0800c971
 8007ef8:	0800c6f9 	.word	0x0800c6f9

08007efc <rshift>:
 8007efc:	6903      	ldr	r3, [r0, #16]
 8007efe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007f02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f06:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007f0a:	f100 0414 	add.w	r4, r0, #20
 8007f0e:	dd45      	ble.n	8007f9c <rshift+0xa0>
 8007f10:	f011 011f 	ands.w	r1, r1, #31
 8007f14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007f18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007f1c:	d10c      	bne.n	8007f38 <rshift+0x3c>
 8007f1e:	f100 0710 	add.w	r7, r0, #16
 8007f22:	4629      	mov	r1, r5
 8007f24:	42b1      	cmp	r1, r6
 8007f26:	d334      	bcc.n	8007f92 <rshift+0x96>
 8007f28:	1a9b      	subs	r3, r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	1eea      	subs	r2, r5, #3
 8007f2e:	4296      	cmp	r6, r2
 8007f30:	bf38      	it	cc
 8007f32:	2300      	movcc	r3, #0
 8007f34:	4423      	add	r3, r4
 8007f36:	e015      	b.n	8007f64 <rshift+0x68>
 8007f38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007f3c:	f1c1 0820 	rsb	r8, r1, #32
 8007f40:	40cf      	lsrs	r7, r1
 8007f42:	f105 0e04 	add.w	lr, r5, #4
 8007f46:	46a1      	mov	r9, r4
 8007f48:	4576      	cmp	r6, lr
 8007f4a:	46f4      	mov	ip, lr
 8007f4c:	d815      	bhi.n	8007f7a <rshift+0x7e>
 8007f4e:	1a9a      	subs	r2, r3, r2
 8007f50:	0092      	lsls	r2, r2, #2
 8007f52:	3a04      	subs	r2, #4
 8007f54:	3501      	adds	r5, #1
 8007f56:	42ae      	cmp	r6, r5
 8007f58:	bf38      	it	cc
 8007f5a:	2200      	movcc	r2, #0
 8007f5c:	18a3      	adds	r3, r4, r2
 8007f5e:	50a7      	str	r7, [r4, r2]
 8007f60:	b107      	cbz	r7, 8007f64 <rshift+0x68>
 8007f62:	3304      	adds	r3, #4
 8007f64:	1b1a      	subs	r2, r3, r4
 8007f66:	42a3      	cmp	r3, r4
 8007f68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007f6c:	bf08      	it	eq
 8007f6e:	2300      	moveq	r3, #0
 8007f70:	6102      	str	r2, [r0, #16]
 8007f72:	bf08      	it	eq
 8007f74:	6143      	streq	r3, [r0, #20]
 8007f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f7a:	f8dc c000 	ldr.w	ip, [ip]
 8007f7e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007f82:	ea4c 0707 	orr.w	r7, ip, r7
 8007f86:	f849 7b04 	str.w	r7, [r9], #4
 8007f8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f8e:	40cf      	lsrs	r7, r1
 8007f90:	e7da      	b.n	8007f48 <rshift+0x4c>
 8007f92:	f851 cb04 	ldr.w	ip, [r1], #4
 8007f96:	f847 cf04 	str.w	ip, [r7, #4]!
 8007f9a:	e7c3      	b.n	8007f24 <rshift+0x28>
 8007f9c:	4623      	mov	r3, r4
 8007f9e:	e7e1      	b.n	8007f64 <rshift+0x68>

08007fa0 <__hexdig_fun>:
 8007fa0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007fa4:	2b09      	cmp	r3, #9
 8007fa6:	d802      	bhi.n	8007fae <__hexdig_fun+0xe>
 8007fa8:	3820      	subs	r0, #32
 8007faa:	b2c0      	uxtb	r0, r0
 8007fac:	4770      	bx	lr
 8007fae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007fb2:	2b05      	cmp	r3, #5
 8007fb4:	d801      	bhi.n	8007fba <__hexdig_fun+0x1a>
 8007fb6:	3847      	subs	r0, #71	; 0x47
 8007fb8:	e7f7      	b.n	8007faa <__hexdig_fun+0xa>
 8007fba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007fbe:	2b05      	cmp	r3, #5
 8007fc0:	d801      	bhi.n	8007fc6 <__hexdig_fun+0x26>
 8007fc2:	3827      	subs	r0, #39	; 0x27
 8007fc4:	e7f1      	b.n	8007faa <__hexdig_fun+0xa>
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	4770      	bx	lr
	...

08007fcc <__gethex>:
 8007fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd0:	ed2d 8b02 	vpush	{d8}
 8007fd4:	b089      	sub	sp, #36	; 0x24
 8007fd6:	ee08 0a10 	vmov	s16, r0
 8007fda:	9304      	str	r3, [sp, #16]
 8007fdc:	4bb4      	ldr	r3, [pc, #720]	; (80082b0 <__gethex+0x2e4>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	9301      	str	r3, [sp, #4]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	468b      	mov	fp, r1
 8007fe6:	4690      	mov	r8, r2
 8007fe8:	f7f8 f904 	bl	80001f4 <strlen>
 8007fec:	9b01      	ldr	r3, [sp, #4]
 8007fee:	f8db 2000 	ldr.w	r2, [fp]
 8007ff2:	4403      	add	r3, r0
 8007ff4:	4682      	mov	sl, r0
 8007ff6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007ffa:	9305      	str	r3, [sp, #20]
 8007ffc:	1c93      	adds	r3, r2, #2
 8007ffe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008002:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008006:	32fe      	adds	r2, #254	; 0xfe
 8008008:	18d1      	adds	r1, r2, r3
 800800a:	461f      	mov	r7, r3
 800800c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008010:	9100      	str	r1, [sp, #0]
 8008012:	2830      	cmp	r0, #48	; 0x30
 8008014:	d0f8      	beq.n	8008008 <__gethex+0x3c>
 8008016:	f7ff ffc3 	bl	8007fa0 <__hexdig_fun>
 800801a:	4604      	mov	r4, r0
 800801c:	2800      	cmp	r0, #0
 800801e:	d13a      	bne.n	8008096 <__gethex+0xca>
 8008020:	9901      	ldr	r1, [sp, #4]
 8008022:	4652      	mov	r2, sl
 8008024:	4638      	mov	r0, r7
 8008026:	f001 fdb3 	bl	8009b90 <strncmp>
 800802a:	4605      	mov	r5, r0
 800802c:	2800      	cmp	r0, #0
 800802e:	d168      	bne.n	8008102 <__gethex+0x136>
 8008030:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008034:	eb07 060a 	add.w	r6, r7, sl
 8008038:	f7ff ffb2 	bl	8007fa0 <__hexdig_fun>
 800803c:	2800      	cmp	r0, #0
 800803e:	d062      	beq.n	8008106 <__gethex+0x13a>
 8008040:	4633      	mov	r3, r6
 8008042:	7818      	ldrb	r0, [r3, #0]
 8008044:	2830      	cmp	r0, #48	; 0x30
 8008046:	461f      	mov	r7, r3
 8008048:	f103 0301 	add.w	r3, r3, #1
 800804c:	d0f9      	beq.n	8008042 <__gethex+0x76>
 800804e:	f7ff ffa7 	bl	8007fa0 <__hexdig_fun>
 8008052:	2301      	movs	r3, #1
 8008054:	fab0 f480 	clz	r4, r0
 8008058:	0964      	lsrs	r4, r4, #5
 800805a:	4635      	mov	r5, r6
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	463a      	mov	r2, r7
 8008060:	4616      	mov	r6, r2
 8008062:	3201      	adds	r2, #1
 8008064:	7830      	ldrb	r0, [r6, #0]
 8008066:	f7ff ff9b 	bl	8007fa0 <__hexdig_fun>
 800806a:	2800      	cmp	r0, #0
 800806c:	d1f8      	bne.n	8008060 <__gethex+0x94>
 800806e:	9901      	ldr	r1, [sp, #4]
 8008070:	4652      	mov	r2, sl
 8008072:	4630      	mov	r0, r6
 8008074:	f001 fd8c 	bl	8009b90 <strncmp>
 8008078:	b980      	cbnz	r0, 800809c <__gethex+0xd0>
 800807a:	b94d      	cbnz	r5, 8008090 <__gethex+0xc4>
 800807c:	eb06 050a 	add.w	r5, r6, sl
 8008080:	462a      	mov	r2, r5
 8008082:	4616      	mov	r6, r2
 8008084:	3201      	adds	r2, #1
 8008086:	7830      	ldrb	r0, [r6, #0]
 8008088:	f7ff ff8a 	bl	8007fa0 <__hexdig_fun>
 800808c:	2800      	cmp	r0, #0
 800808e:	d1f8      	bne.n	8008082 <__gethex+0xb6>
 8008090:	1bad      	subs	r5, r5, r6
 8008092:	00ad      	lsls	r5, r5, #2
 8008094:	e004      	b.n	80080a0 <__gethex+0xd4>
 8008096:	2400      	movs	r4, #0
 8008098:	4625      	mov	r5, r4
 800809a:	e7e0      	b.n	800805e <__gethex+0x92>
 800809c:	2d00      	cmp	r5, #0
 800809e:	d1f7      	bne.n	8008090 <__gethex+0xc4>
 80080a0:	7833      	ldrb	r3, [r6, #0]
 80080a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80080a6:	2b50      	cmp	r3, #80	; 0x50
 80080a8:	d13b      	bne.n	8008122 <__gethex+0x156>
 80080aa:	7873      	ldrb	r3, [r6, #1]
 80080ac:	2b2b      	cmp	r3, #43	; 0x2b
 80080ae:	d02c      	beq.n	800810a <__gethex+0x13e>
 80080b0:	2b2d      	cmp	r3, #45	; 0x2d
 80080b2:	d02e      	beq.n	8008112 <__gethex+0x146>
 80080b4:	1c71      	adds	r1, r6, #1
 80080b6:	f04f 0900 	mov.w	r9, #0
 80080ba:	7808      	ldrb	r0, [r1, #0]
 80080bc:	f7ff ff70 	bl	8007fa0 <__hexdig_fun>
 80080c0:	1e43      	subs	r3, r0, #1
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b18      	cmp	r3, #24
 80080c6:	d82c      	bhi.n	8008122 <__gethex+0x156>
 80080c8:	f1a0 0210 	sub.w	r2, r0, #16
 80080cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80080d0:	f7ff ff66 	bl	8007fa0 <__hexdig_fun>
 80080d4:	1e43      	subs	r3, r0, #1
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b18      	cmp	r3, #24
 80080da:	d91d      	bls.n	8008118 <__gethex+0x14c>
 80080dc:	f1b9 0f00 	cmp.w	r9, #0
 80080e0:	d000      	beq.n	80080e4 <__gethex+0x118>
 80080e2:	4252      	negs	r2, r2
 80080e4:	4415      	add	r5, r2
 80080e6:	f8cb 1000 	str.w	r1, [fp]
 80080ea:	b1e4      	cbz	r4, 8008126 <__gethex+0x15a>
 80080ec:	9b00      	ldr	r3, [sp, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	bf14      	ite	ne
 80080f2:	2700      	movne	r7, #0
 80080f4:	2706      	moveq	r7, #6
 80080f6:	4638      	mov	r0, r7
 80080f8:	b009      	add	sp, #36	; 0x24
 80080fa:	ecbd 8b02 	vpop	{d8}
 80080fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008102:	463e      	mov	r6, r7
 8008104:	4625      	mov	r5, r4
 8008106:	2401      	movs	r4, #1
 8008108:	e7ca      	b.n	80080a0 <__gethex+0xd4>
 800810a:	f04f 0900 	mov.w	r9, #0
 800810e:	1cb1      	adds	r1, r6, #2
 8008110:	e7d3      	b.n	80080ba <__gethex+0xee>
 8008112:	f04f 0901 	mov.w	r9, #1
 8008116:	e7fa      	b.n	800810e <__gethex+0x142>
 8008118:	230a      	movs	r3, #10
 800811a:	fb03 0202 	mla	r2, r3, r2, r0
 800811e:	3a10      	subs	r2, #16
 8008120:	e7d4      	b.n	80080cc <__gethex+0x100>
 8008122:	4631      	mov	r1, r6
 8008124:	e7df      	b.n	80080e6 <__gethex+0x11a>
 8008126:	1bf3      	subs	r3, r6, r7
 8008128:	3b01      	subs	r3, #1
 800812a:	4621      	mov	r1, r4
 800812c:	2b07      	cmp	r3, #7
 800812e:	dc0b      	bgt.n	8008148 <__gethex+0x17c>
 8008130:	ee18 0a10 	vmov	r0, s16
 8008134:	f000 fa90 	bl	8008658 <_Balloc>
 8008138:	4604      	mov	r4, r0
 800813a:	b940      	cbnz	r0, 800814e <__gethex+0x182>
 800813c:	4b5d      	ldr	r3, [pc, #372]	; (80082b4 <__gethex+0x2e8>)
 800813e:	4602      	mov	r2, r0
 8008140:	21de      	movs	r1, #222	; 0xde
 8008142:	485d      	ldr	r0, [pc, #372]	; (80082b8 <__gethex+0x2ec>)
 8008144:	f001 fdf4 	bl	8009d30 <__assert_func>
 8008148:	3101      	adds	r1, #1
 800814a:	105b      	asrs	r3, r3, #1
 800814c:	e7ee      	b.n	800812c <__gethex+0x160>
 800814e:	f100 0914 	add.w	r9, r0, #20
 8008152:	f04f 0b00 	mov.w	fp, #0
 8008156:	f1ca 0301 	rsb	r3, sl, #1
 800815a:	f8cd 9008 	str.w	r9, [sp, #8]
 800815e:	f8cd b000 	str.w	fp, [sp]
 8008162:	9306      	str	r3, [sp, #24]
 8008164:	42b7      	cmp	r7, r6
 8008166:	d340      	bcc.n	80081ea <__gethex+0x21e>
 8008168:	9802      	ldr	r0, [sp, #8]
 800816a:	9b00      	ldr	r3, [sp, #0]
 800816c:	f840 3b04 	str.w	r3, [r0], #4
 8008170:	eba0 0009 	sub.w	r0, r0, r9
 8008174:	1080      	asrs	r0, r0, #2
 8008176:	0146      	lsls	r6, r0, #5
 8008178:	6120      	str	r0, [r4, #16]
 800817a:	4618      	mov	r0, r3
 800817c:	f000 fb5e 	bl	800883c <__hi0bits>
 8008180:	1a30      	subs	r0, r6, r0
 8008182:	f8d8 6000 	ldr.w	r6, [r8]
 8008186:	42b0      	cmp	r0, r6
 8008188:	dd63      	ble.n	8008252 <__gethex+0x286>
 800818a:	1b87      	subs	r7, r0, r6
 800818c:	4639      	mov	r1, r7
 800818e:	4620      	mov	r0, r4
 8008190:	f000 ff02 	bl	8008f98 <__any_on>
 8008194:	4682      	mov	sl, r0
 8008196:	b1a8      	cbz	r0, 80081c4 <__gethex+0x1f8>
 8008198:	1e7b      	subs	r3, r7, #1
 800819a:	1159      	asrs	r1, r3, #5
 800819c:	f003 021f 	and.w	r2, r3, #31
 80081a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80081a4:	f04f 0a01 	mov.w	sl, #1
 80081a8:	fa0a f202 	lsl.w	r2, sl, r2
 80081ac:	420a      	tst	r2, r1
 80081ae:	d009      	beq.n	80081c4 <__gethex+0x1f8>
 80081b0:	4553      	cmp	r3, sl
 80081b2:	dd05      	ble.n	80081c0 <__gethex+0x1f4>
 80081b4:	1eb9      	subs	r1, r7, #2
 80081b6:	4620      	mov	r0, r4
 80081b8:	f000 feee 	bl	8008f98 <__any_on>
 80081bc:	2800      	cmp	r0, #0
 80081be:	d145      	bne.n	800824c <__gethex+0x280>
 80081c0:	f04f 0a02 	mov.w	sl, #2
 80081c4:	4639      	mov	r1, r7
 80081c6:	4620      	mov	r0, r4
 80081c8:	f7ff fe98 	bl	8007efc <rshift>
 80081cc:	443d      	add	r5, r7
 80081ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80081d2:	42ab      	cmp	r3, r5
 80081d4:	da4c      	bge.n	8008270 <__gethex+0x2a4>
 80081d6:	ee18 0a10 	vmov	r0, s16
 80081da:	4621      	mov	r1, r4
 80081dc:	f000 fa7c 	bl	80086d8 <_Bfree>
 80081e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80081e2:	2300      	movs	r3, #0
 80081e4:	6013      	str	r3, [r2, #0]
 80081e6:	27a3      	movs	r7, #163	; 0xa3
 80081e8:	e785      	b.n	80080f6 <__gethex+0x12a>
 80081ea:	1e73      	subs	r3, r6, #1
 80081ec:	9a05      	ldr	r2, [sp, #20]
 80081ee:	9303      	str	r3, [sp, #12]
 80081f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d019      	beq.n	800822c <__gethex+0x260>
 80081f8:	f1bb 0f20 	cmp.w	fp, #32
 80081fc:	d107      	bne.n	800820e <__gethex+0x242>
 80081fe:	9b02      	ldr	r3, [sp, #8]
 8008200:	9a00      	ldr	r2, [sp, #0]
 8008202:	f843 2b04 	str.w	r2, [r3], #4
 8008206:	9302      	str	r3, [sp, #8]
 8008208:	2300      	movs	r3, #0
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	469b      	mov	fp, r3
 800820e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008212:	f7ff fec5 	bl	8007fa0 <__hexdig_fun>
 8008216:	9b00      	ldr	r3, [sp, #0]
 8008218:	f000 000f 	and.w	r0, r0, #15
 800821c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008220:	4303      	orrs	r3, r0
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	f10b 0b04 	add.w	fp, fp, #4
 8008228:	9b03      	ldr	r3, [sp, #12]
 800822a:	e00d      	b.n	8008248 <__gethex+0x27c>
 800822c:	9b03      	ldr	r3, [sp, #12]
 800822e:	9a06      	ldr	r2, [sp, #24]
 8008230:	4413      	add	r3, r2
 8008232:	42bb      	cmp	r3, r7
 8008234:	d3e0      	bcc.n	80081f8 <__gethex+0x22c>
 8008236:	4618      	mov	r0, r3
 8008238:	9901      	ldr	r1, [sp, #4]
 800823a:	9307      	str	r3, [sp, #28]
 800823c:	4652      	mov	r2, sl
 800823e:	f001 fca7 	bl	8009b90 <strncmp>
 8008242:	9b07      	ldr	r3, [sp, #28]
 8008244:	2800      	cmp	r0, #0
 8008246:	d1d7      	bne.n	80081f8 <__gethex+0x22c>
 8008248:	461e      	mov	r6, r3
 800824a:	e78b      	b.n	8008164 <__gethex+0x198>
 800824c:	f04f 0a03 	mov.w	sl, #3
 8008250:	e7b8      	b.n	80081c4 <__gethex+0x1f8>
 8008252:	da0a      	bge.n	800826a <__gethex+0x29e>
 8008254:	1a37      	subs	r7, r6, r0
 8008256:	4621      	mov	r1, r4
 8008258:	ee18 0a10 	vmov	r0, s16
 800825c:	463a      	mov	r2, r7
 800825e:	f000 fc57 	bl	8008b10 <__lshift>
 8008262:	1bed      	subs	r5, r5, r7
 8008264:	4604      	mov	r4, r0
 8008266:	f100 0914 	add.w	r9, r0, #20
 800826a:	f04f 0a00 	mov.w	sl, #0
 800826e:	e7ae      	b.n	80081ce <__gethex+0x202>
 8008270:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008274:	42a8      	cmp	r0, r5
 8008276:	dd72      	ble.n	800835e <__gethex+0x392>
 8008278:	1b45      	subs	r5, r0, r5
 800827a:	42ae      	cmp	r6, r5
 800827c:	dc36      	bgt.n	80082ec <__gethex+0x320>
 800827e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008282:	2b02      	cmp	r3, #2
 8008284:	d02a      	beq.n	80082dc <__gethex+0x310>
 8008286:	2b03      	cmp	r3, #3
 8008288:	d02c      	beq.n	80082e4 <__gethex+0x318>
 800828a:	2b01      	cmp	r3, #1
 800828c:	d11c      	bne.n	80082c8 <__gethex+0x2fc>
 800828e:	42ae      	cmp	r6, r5
 8008290:	d11a      	bne.n	80082c8 <__gethex+0x2fc>
 8008292:	2e01      	cmp	r6, #1
 8008294:	d112      	bne.n	80082bc <__gethex+0x2f0>
 8008296:	9a04      	ldr	r2, [sp, #16]
 8008298:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800829c:	6013      	str	r3, [r2, #0]
 800829e:	2301      	movs	r3, #1
 80082a0:	6123      	str	r3, [r4, #16]
 80082a2:	f8c9 3000 	str.w	r3, [r9]
 80082a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082a8:	2762      	movs	r7, #98	; 0x62
 80082aa:	601c      	str	r4, [r3, #0]
 80082ac:	e723      	b.n	80080f6 <__gethex+0x12a>
 80082ae:	bf00      	nop
 80082b0:	0800c7f0 	.word	0x0800c7f0
 80082b4:	0800c778 	.word	0x0800c778
 80082b8:	0800c789 	.word	0x0800c789
 80082bc:	1e71      	subs	r1, r6, #1
 80082be:	4620      	mov	r0, r4
 80082c0:	f000 fe6a 	bl	8008f98 <__any_on>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	d1e6      	bne.n	8008296 <__gethex+0x2ca>
 80082c8:	ee18 0a10 	vmov	r0, s16
 80082cc:	4621      	mov	r1, r4
 80082ce:	f000 fa03 	bl	80086d8 <_Bfree>
 80082d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80082d4:	2300      	movs	r3, #0
 80082d6:	6013      	str	r3, [r2, #0]
 80082d8:	2750      	movs	r7, #80	; 0x50
 80082da:	e70c      	b.n	80080f6 <__gethex+0x12a>
 80082dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1f2      	bne.n	80082c8 <__gethex+0x2fc>
 80082e2:	e7d8      	b.n	8008296 <__gethex+0x2ca>
 80082e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1d5      	bne.n	8008296 <__gethex+0x2ca>
 80082ea:	e7ed      	b.n	80082c8 <__gethex+0x2fc>
 80082ec:	1e6f      	subs	r7, r5, #1
 80082ee:	f1ba 0f00 	cmp.w	sl, #0
 80082f2:	d131      	bne.n	8008358 <__gethex+0x38c>
 80082f4:	b127      	cbz	r7, 8008300 <__gethex+0x334>
 80082f6:	4639      	mov	r1, r7
 80082f8:	4620      	mov	r0, r4
 80082fa:	f000 fe4d 	bl	8008f98 <__any_on>
 80082fe:	4682      	mov	sl, r0
 8008300:	117b      	asrs	r3, r7, #5
 8008302:	2101      	movs	r1, #1
 8008304:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008308:	f007 071f 	and.w	r7, r7, #31
 800830c:	fa01 f707 	lsl.w	r7, r1, r7
 8008310:	421f      	tst	r7, r3
 8008312:	4629      	mov	r1, r5
 8008314:	4620      	mov	r0, r4
 8008316:	bf18      	it	ne
 8008318:	f04a 0a02 	orrne.w	sl, sl, #2
 800831c:	1b76      	subs	r6, r6, r5
 800831e:	f7ff fded 	bl	8007efc <rshift>
 8008322:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008326:	2702      	movs	r7, #2
 8008328:	f1ba 0f00 	cmp.w	sl, #0
 800832c:	d048      	beq.n	80083c0 <__gethex+0x3f4>
 800832e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008332:	2b02      	cmp	r3, #2
 8008334:	d015      	beq.n	8008362 <__gethex+0x396>
 8008336:	2b03      	cmp	r3, #3
 8008338:	d017      	beq.n	800836a <__gethex+0x39e>
 800833a:	2b01      	cmp	r3, #1
 800833c:	d109      	bne.n	8008352 <__gethex+0x386>
 800833e:	f01a 0f02 	tst.w	sl, #2
 8008342:	d006      	beq.n	8008352 <__gethex+0x386>
 8008344:	f8d9 0000 	ldr.w	r0, [r9]
 8008348:	ea4a 0a00 	orr.w	sl, sl, r0
 800834c:	f01a 0f01 	tst.w	sl, #1
 8008350:	d10e      	bne.n	8008370 <__gethex+0x3a4>
 8008352:	f047 0710 	orr.w	r7, r7, #16
 8008356:	e033      	b.n	80083c0 <__gethex+0x3f4>
 8008358:	f04f 0a01 	mov.w	sl, #1
 800835c:	e7d0      	b.n	8008300 <__gethex+0x334>
 800835e:	2701      	movs	r7, #1
 8008360:	e7e2      	b.n	8008328 <__gethex+0x35c>
 8008362:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008364:	f1c3 0301 	rsb	r3, r3, #1
 8008368:	9315      	str	r3, [sp, #84]	; 0x54
 800836a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800836c:	2b00      	cmp	r3, #0
 800836e:	d0f0      	beq.n	8008352 <__gethex+0x386>
 8008370:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008374:	f104 0314 	add.w	r3, r4, #20
 8008378:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800837c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008380:	f04f 0c00 	mov.w	ip, #0
 8008384:	4618      	mov	r0, r3
 8008386:	f853 2b04 	ldr.w	r2, [r3], #4
 800838a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800838e:	d01c      	beq.n	80083ca <__gethex+0x3fe>
 8008390:	3201      	adds	r2, #1
 8008392:	6002      	str	r2, [r0, #0]
 8008394:	2f02      	cmp	r7, #2
 8008396:	f104 0314 	add.w	r3, r4, #20
 800839a:	d13f      	bne.n	800841c <__gethex+0x450>
 800839c:	f8d8 2000 	ldr.w	r2, [r8]
 80083a0:	3a01      	subs	r2, #1
 80083a2:	42b2      	cmp	r2, r6
 80083a4:	d10a      	bne.n	80083bc <__gethex+0x3f0>
 80083a6:	1171      	asrs	r1, r6, #5
 80083a8:	2201      	movs	r2, #1
 80083aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083ae:	f006 061f 	and.w	r6, r6, #31
 80083b2:	fa02 f606 	lsl.w	r6, r2, r6
 80083b6:	421e      	tst	r6, r3
 80083b8:	bf18      	it	ne
 80083ba:	4617      	movne	r7, r2
 80083bc:	f047 0720 	orr.w	r7, r7, #32
 80083c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083c2:	601c      	str	r4, [r3, #0]
 80083c4:	9b04      	ldr	r3, [sp, #16]
 80083c6:	601d      	str	r5, [r3, #0]
 80083c8:	e695      	b.n	80080f6 <__gethex+0x12a>
 80083ca:	4299      	cmp	r1, r3
 80083cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80083d0:	d8d8      	bhi.n	8008384 <__gethex+0x3b8>
 80083d2:	68a3      	ldr	r3, [r4, #8]
 80083d4:	459b      	cmp	fp, r3
 80083d6:	db19      	blt.n	800840c <__gethex+0x440>
 80083d8:	6861      	ldr	r1, [r4, #4]
 80083da:	ee18 0a10 	vmov	r0, s16
 80083de:	3101      	adds	r1, #1
 80083e0:	f000 f93a 	bl	8008658 <_Balloc>
 80083e4:	4681      	mov	r9, r0
 80083e6:	b918      	cbnz	r0, 80083f0 <__gethex+0x424>
 80083e8:	4b1a      	ldr	r3, [pc, #104]	; (8008454 <__gethex+0x488>)
 80083ea:	4602      	mov	r2, r0
 80083ec:	2184      	movs	r1, #132	; 0x84
 80083ee:	e6a8      	b.n	8008142 <__gethex+0x176>
 80083f0:	6922      	ldr	r2, [r4, #16]
 80083f2:	3202      	adds	r2, #2
 80083f4:	f104 010c 	add.w	r1, r4, #12
 80083f8:	0092      	lsls	r2, r2, #2
 80083fa:	300c      	adds	r0, #12
 80083fc:	f000 f91e 	bl	800863c <memcpy>
 8008400:	4621      	mov	r1, r4
 8008402:	ee18 0a10 	vmov	r0, s16
 8008406:	f000 f967 	bl	80086d8 <_Bfree>
 800840a:	464c      	mov	r4, r9
 800840c:	6923      	ldr	r3, [r4, #16]
 800840e:	1c5a      	adds	r2, r3, #1
 8008410:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008414:	6122      	str	r2, [r4, #16]
 8008416:	2201      	movs	r2, #1
 8008418:	615a      	str	r2, [r3, #20]
 800841a:	e7bb      	b.n	8008394 <__gethex+0x3c8>
 800841c:	6922      	ldr	r2, [r4, #16]
 800841e:	455a      	cmp	r2, fp
 8008420:	dd0b      	ble.n	800843a <__gethex+0x46e>
 8008422:	2101      	movs	r1, #1
 8008424:	4620      	mov	r0, r4
 8008426:	f7ff fd69 	bl	8007efc <rshift>
 800842a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800842e:	3501      	adds	r5, #1
 8008430:	42ab      	cmp	r3, r5
 8008432:	f6ff aed0 	blt.w	80081d6 <__gethex+0x20a>
 8008436:	2701      	movs	r7, #1
 8008438:	e7c0      	b.n	80083bc <__gethex+0x3f0>
 800843a:	f016 061f 	ands.w	r6, r6, #31
 800843e:	d0fa      	beq.n	8008436 <__gethex+0x46a>
 8008440:	4453      	add	r3, sl
 8008442:	f1c6 0620 	rsb	r6, r6, #32
 8008446:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800844a:	f000 f9f7 	bl	800883c <__hi0bits>
 800844e:	42b0      	cmp	r0, r6
 8008450:	dbe7      	blt.n	8008422 <__gethex+0x456>
 8008452:	e7f0      	b.n	8008436 <__gethex+0x46a>
 8008454:	0800c778 	.word	0x0800c778

08008458 <L_shift>:
 8008458:	f1c2 0208 	rsb	r2, r2, #8
 800845c:	0092      	lsls	r2, r2, #2
 800845e:	b570      	push	{r4, r5, r6, lr}
 8008460:	f1c2 0620 	rsb	r6, r2, #32
 8008464:	6843      	ldr	r3, [r0, #4]
 8008466:	6804      	ldr	r4, [r0, #0]
 8008468:	fa03 f506 	lsl.w	r5, r3, r6
 800846c:	432c      	orrs	r4, r5
 800846e:	40d3      	lsrs	r3, r2
 8008470:	6004      	str	r4, [r0, #0]
 8008472:	f840 3f04 	str.w	r3, [r0, #4]!
 8008476:	4288      	cmp	r0, r1
 8008478:	d3f4      	bcc.n	8008464 <L_shift+0xc>
 800847a:	bd70      	pop	{r4, r5, r6, pc}

0800847c <__match>:
 800847c:	b530      	push	{r4, r5, lr}
 800847e:	6803      	ldr	r3, [r0, #0]
 8008480:	3301      	adds	r3, #1
 8008482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008486:	b914      	cbnz	r4, 800848e <__match+0x12>
 8008488:	6003      	str	r3, [r0, #0]
 800848a:	2001      	movs	r0, #1
 800848c:	bd30      	pop	{r4, r5, pc}
 800848e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008492:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008496:	2d19      	cmp	r5, #25
 8008498:	bf98      	it	ls
 800849a:	3220      	addls	r2, #32
 800849c:	42a2      	cmp	r2, r4
 800849e:	d0f0      	beq.n	8008482 <__match+0x6>
 80084a0:	2000      	movs	r0, #0
 80084a2:	e7f3      	b.n	800848c <__match+0x10>

080084a4 <__hexnan>:
 80084a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a8:	680b      	ldr	r3, [r1, #0]
 80084aa:	115e      	asrs	r6, r3, #5
 80084ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80084b0:	f013 031f 	ands.w	r3, r3, #31
 80084b4:	b087      	sub	sp, #28
 80084b6:	bf18      	it	ne
 80084b8:	3604      	addne	r6, #4
 80084ba:	2500      	movs	r5, #0
 80084bc:	1f37      	subs	r7, r6, #4
 80084be:	4690      	mov	r8, r2
 80084c0:	6802      	ldr	r2, [r0, #0]
 80084c2:	9301      	str	r3, [sp, #4]
 80084c4:	4682      	mov	sl, r0
 80084c6:	f846 5c04 	str.w	r5, [r6, #-4]
 80084ca:	46b9      	mov	r9, r7
 80084cc:	463c      	mov	r4, r7
 80084ce:	9502      	str	r5, [sp, #8]
 80084d0:	46ab      	mov	fp, r5
 80084d2:	7851      	ldrb	r1, [r2, #1]
 80084d4:	1c53      	adds	r3, r2, #1
 80084d6:	9303      	str	r3, [sp, #12]
 80084d8:	b341      	cbz	r1, 800852c <__hexnan+0x88>
 80084da:	4608      	mov	r0, r1
 80084dc:	9205      	str	r2, [sp, #20]
 80084de:	9104      	str	r1, [sp, #16]
 80084e0:	f7ff fd5e 	bl	8007fa0 <__hexdig_fun>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d14f      	bne.n	8008588 <__hexnan+0xe4>
 80084e8:	9904      	ldr	r1, [sp, #16]
 80084ea:	9a05      	ldr	r2, [sp, #20]
 80084ec:	2920      	cmp	r1, #32
 80084ee:	d818      	bhi.n	8008522 <__hexnan+0x7e>
 80084f0:	9b02      	ldr	r3, [sp, #8]
 80084f2:	459b      	cmp	fp, r3
 80084f4:	dd13      	ble.n	800851e <__hexnan+0x7a>
 80084f6:	454c      	cmp	r4, r9
 80084f8:	d206      	bcs.n	8008508 <__hexnan+0x64>
 80084fa:	2d07      	cmp	r5, #7
 80084fc:	dc04      	bgt.n	8008508 <__hexnan+0x64>
 80084fe:	462a      	mov	r2, r5
 8008500:	4649      	mov	r1, r9
 8008502:	4620      	mov	r0, r4
 8008504:	f7ff ffa8 	bl	8008458 <L_shift>
 8008508:	4544      	cmp	r4, r8
 800850a:	d950      	bls.n	80085ae <__hexnan+0x10a>
 800850c:	2300      	movs	r3, #0
 800850e:	f1a4 0904 	sub.w	r9, r4, #4
 8008512:	f844 3c04 	str.w	r3, [r4, #-4]
 8008516:	f8cd b008 	str.w	fp, [sp, #8]
 800851a:	464c      	mov	r4, r9
 800851c:	461d      	mov	r5, r3
 800851e:	9a03      	ldr	r2, [sp, #12]
 8008520:	e7d7      	b.n	80084d2 <__hexnan+0x2e>
 8008522:	2929      	cmp	r1, #41	; 0x29
 8008524:	d156      	bne.n	80085d4 <__hexnan+0x130>
 8008526:	3202      	adds	r2, #2
 8008528:	f8ca 2000 	str.w	r2, [sl]
 800852c:	f1bb 0f00 	cmp.w	fp, #0
 8008530:	d050      	beq.n	80085d4 <__hexnan+0x130>
 8008532:	454c      	cmp	r4, r9
 8008534:	d206      	bcs.n	8008544 <__hexnan+0xa0>
 8008536:	2d07      	cmp	r5, #7
 8008538:	dc04      	bgt.n	8008544 <__hexnan+0xa0>
 800853a:	462a      	mov	r2, r5
 800853c:	4649      	mov	r1, r9
 800853e:	4620      	mov	r0, r4
 8008540:	f7ff ff8a 	bl	8008458 <L_shift>
 8008544:	4544      	cmp	r4, r8
 8008546:	d934      	bls.n	80085b2 <__hexnan+0x10e>
 8008548:	f1a8 0204 	sub.w	r2, r8, #4
 800854c:	4623      	mov	r3, r4
 800854e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008552:	f842 1f04 	str.w	r1, [r2, #4]!
 8008556:	429f      	cmp	r7, r3
 8008558:	d2f9      	bcs.n	800854e <__hexnan+0xaa>
 800855a:	1b3b      	subs	r3, r7, r4
 800855c:	f023 0303 	bic.w	r3, r3, #3
 8008560:	3304      	adds	r3, #4
 8008562:	3401      	adds	r4, #1
 8008564:	3e03      	subs	r6, #3
 8008566:	42b4      	cmp	r4, r6
 8008568:	bf88      	it	hi
 800856a:	2304      	movhi	r3, #4
 800856c:	4443      	add	r3, r8
 800856e:	2200      	movs	r2, #0
 8008570:	f843 2b04 	str.w	r2, [r3], #4
 8008574:	429f      	cmp	r7, r3
 8008576:	d2fb      	bcs.n	8008570 <__hexnan+0xcc>
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	b91b      	cbnz	r3, 8008584 <__hexnan+0xe0>
 800857c:	4547      	cmp	r7, r8
 800857e:	d127      	bne.n	80085d0 <__hexnan+0x12c>
 8008580:	2301      	movs	r3, #1
 8008582:	603b      	str	r3, [r7, #0]
 8008584:	2005      	movs	r0, #5
 8008586:	e026      	b.n	80085d6 <__hexnan+0x132>
 8008588:	3501      	adds	r5, #1
 800858a:	2d08      	cmp	r5, #8
 800858c:	f10b 0b01 	add.w	fp, fp, #1
 8008590:	dd06      	ble.n	80085a0 <__hexnan+0xfc>
 8008592:	4544      	cmp	r4, r8
 8008594:	d9c3      	bls.n	800851e <__hexnan+0x7a>
 8008596:	2300      	movs	r3, #0
 8008598:	f844 3c04 	str.w	r3, [r4, #-4]
 800859c:	2501      	movs	r5, #1
 800859e:	3c04      	subs	r4, #4
 80085a0:	6822      	ldr	r2, [r4, #0]
 80085a2:	f000 000f 	and.w	r0, r0, #15
 80085a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80085aa:	6022      	str	r2, [r4, #0]
 80085ac:	e7b7      	b.n	800851e <__hexnan+0x7a>
 80085ae:	2508      	movs	r5, #8
 80085b0:	e7b5      	b.n	800851e <__hexnan+0x7a>
 80085b2:	9b01      	ldr	r3, [sp, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d0df      	beq.n	8008578 <__hexnan+0xd4>
 80085b8:	f04f 32ff 	mov.w	r2, #4294967295
 80085bc:	f1c3 0320 	rsb	r3, r3, #32
 80085c0:	fa22 f303 	lsr.w	r3, r2, r3
 80085c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80085c8:	401a      	ands	r2, r3
 80085ca:	f846 2c04 	str.w	r2, [r6, #-4]
 80085ce:	e7d3      	b.n	8008578 <__hexnan+0xd4>
 80085d0:	3f04      	subs	r7, #4
 80085d2:	e7d1      	b.n	8008578 <__hexnan+0xd4>
 80085d4:	2004      	movs	r0, #4
 80085d6:	b007      	add	sp, #28
 80085d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080085dc <_localeconv_r>:
 80085dc:	4800      	ldr	r0, [pc, #0]	; (80085e0 <_localeconv_r+0x4>)
 80085de:	4770      	bx	lr
 80085e0:	20000170 	.word	0x20000170

080085e4 <_lseek_r>:
 80085e4:	b538      	push	{r3, r4, r5, lr}
 80085e6:	4d07      	ldr	r5, [pc, #28]	; (8008604 <_lseek_r+0x20>)
 80085e8:	4604      	mov	r4, r0
 80085ea:	4608      	mov	r0, r1
 80085ec:	4611      	mov	r1, r2
 80085ee:	2200      	movs	r2, #0
 80085f0:	602a      	str	r2, [r5, #0]
 80085f2:	461a      	mov	r2, r3
 80085f4:	f7fa fb43 	bl	8002c7e <_lseek>
 80085f8:	1c43      	adds	r3, r0, #1
 80085fa:	d102      	bne.n	8008602 <_lseek_r+0x1e>
 80085fc:	682b      	ldr	r3, [r5, #0]
 80085fe:	b103      	cbz	r3, 8008602 <_lseek_r+0x1e>
 8008600:	6023      	str	r3, [r4, #0]
 8008602:	bd38      	pop	{r3, r4, r5, pc}
 8008604:	20000d40 	.word	0x20000d40

08008608 <malloc>:
 8008608:	4b02      	ldr	r3, [pc, #8]	; (8008614 <malloc+0xc>)
 800860a:	4601      	mov	r1, r0
 800860c:	6818      	ldr	r0, [r3, #0]
 800860e:	f000 bd67 	b.w	80090e0 <_malloc_r>
 8008612:	bf00      	nop
 8008614:	20000018 	.word	0x20000018

08008618 <__ascii_mbtowc>:
 8008618:	b082      	sub	sp, #8
 800861a:	b901      	cbnz	r1, 800861e <__ascii_mbtowc+0x6>
 800861c:	a901      	add	r1, sp, #4
 800861e:	b142      	cbz	r2, 8008632 <__ascii_mbtowc+0x1a>
 8008620:	b14b      	cbz	r3, 8008636 <__ascii_mbtowc+0x1e>
 8008622:	7813      	ldrb	r3, [r2, #0]
 8008624:	600b      	str	r3, [r1, #0]
 8008626:	7812      	ldrb	r2, [r2, #0]
 8008628:	1e10      	subs	r0, r2, #0
 800862a:	bf18      	it	ne
 800862c:	2001      	movne	r0, #1
 800862e:	b002      	add	sp, #8
 8008630:	4770      	bx	lr
 8008632:	4610      	mov	r0, r2
 8008634:	e7fb      	b.n	800862e <__ascii_mbtowc+0x16>
 8008636:	f06f 0001 	mvn.w	r0, #1
 800863a:	e7f8      	b.n	800862e <__ascii_mbtowc+0x16>

0800863c <memcpy>:
 800863c:	440a      	add	r2, r1
 800863e:	4291      	cmp	r1, r2
 8008640:	f100 33ff 	add.w	r3, r0, #4294967295
 8008644:	d100      	bne.n	8008648 <memcpy+0xc>
 8008646:	4770      	bx	lr
 8008648:	b510      	push	{r4, lr}
 800864a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800864e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008652:	4291      	cmp	r1, r2
 8008654:	d1f9      	bne.n	800864a <memcpy+0xe>
 8008656:	bd10      	pop	{r4, pc}

08008658 <_Balloc>:
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800865c:	4604      	mov	r4, r0
 800865e:	460d      	mov	r5, r1
 8008660:	b976      	cbnz	r6, 8008680 <_Balloc+0x28>
 8008662:	2010      	movs	r0, #16
 8008664:	f7ff ffd0 	bl	8008608 <malloc>
 8008668:	4602      	mov	r2, r0
 800866a:	6260      	str	r0, [r4, #36]	; 0x24
 800866c:	b920      	cbnz	r0, 8008678 <_Balloc+0x20>
 800866e:	4b18      	ldr	r3, [pc, #96]	; (80086d0 <_Balloc+0x78>)
 8008670:	4818      	ldr	r0, [pc, #96]	; (80086d4 <_Balloc+0x7c>)
 8008672:	2166      	movs	r1, #102	; 0x66
 8008674:	f001 fb5c 	bl	8009d30 <__assert_func>
 8008678:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800867c:	6006      	str	r6, [r0, #0]
 800867e:	60c6      	str	r6, [r0, #12]
 8008680:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008682:	68f3      	ldr	r3, [r6, #12]
 8008684:	b183      	cbz	r3, 80086a8 <_Balloc+0x50>
 8008686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800868e:	b9b8      	cbnz	r0, 80086c0 <_Balloc+0x68>
 8008690:	2101      	movs	r1, #1
 8008692:	fa01 f605 	lsl.w	r6, r1, r5
 8008696:	1d72      	adds	r2, r6, #5
 8008698:	0092      	lsls	r2, r2, #2
 800869a:	4620      	mov	r0, r4
 800869c:	f000 fc9d 	bl	8008fda <_calloc_r>
 80086a0:	b160      	cbz	r0, 80086bc <_Balloc+0x64>
 80086a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80086a6:	e00e      	b.n	80086c6 <_Balloc+0x6e>
 80086a8:	2221      	movs	r2, #33	; 0x21
 80086aa:	2104      	movs	r1, #4
 80086ac:	4620      	mov	r0, r4
 80086ae:	f000 fc94 	bl	8008fda <_calloc_r>
 80086b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086b4:	60f0      	str	r0, [r6, #12]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1e4      	bne.n	8008686 <_Balloc+0x2e>
 80086bc:	2000      	movs	r0, #0
 80086be:	bd70      	pop	{r4, r5, r6, pc}
 80086c0:	6802      	ldr	r2, [r0, #0]
 80086c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80086c6:	2300      	movs	r3, #0
 80086c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086cc:	e7f7      	b.n	80086be <_Balloc+0x66>
 80086ce:	bf00      	nop
 80086d0:	0800c706 	.word	0x0800c706
 80086d4:	0800c804 	.word	0x0800c804

080086d8 <_Bfree>:
 80086d8:	b570      	push	{r4, r5, r6, lr}
 80086da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80086dc:	4605      	mov	r5, r0
 80086de:	460c      	mov	r4, r1
 80086e0:	b976      	cbnz	r6, 8008700 <_Bfree+0x28>
 80086e2:	2010      	movs	r0, #16
 80086e4:	f7ff ff90 	bl	8008608 <malloc>
 80086e8:	4602      	mov	r2, r0
 80086ea:	6268      	str	r0, [r5, #36]	; 0x24
 80086ec:	b920      	cbnz	r0, 80086f8 <_Bfree+0x20>
 80086ee:	4b09      	ldr	r3, [pc, #36]	; (8008714 <_Bfree+0x3c>)
 80086f0:	4809      	ldr	r0, [pc, #36]	; (8008718 <_Bfree+0x40>)
 80086f2:	218a      	movs	r1, #138	; 0x8a
 80086f4:	f001 fb1c 	bl	8009d30 <__assert_func>
 80086f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086fc:	6006      	str	r6, [r0, #0]
 80086fe:	60c6      	str	r6, [r0, #12]
 8008700:	b13c      	cbz	r4, 8008712 <_Bfree+0x3a>
 8008702:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008704:	6862      	ldr	r2, [r4, #4]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800870c:	6021      	str	r1, [r4, #0]
 800870e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008712:	bd70      	pop	{r4, r5, r6, pc}
 8008714:	0800c706 	.word	0x0800c706
 8008718:	0800c804 	.word	0x0800c804

0800871c <__multadd>:
 800871c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008720:	690d      	ldr	r5, [r1, #16]
 8008722:	4607      	mov	r7, r0
 8008724:	460c      	mov	r4, r1
 8008726:	461e      	mov	r6, r3
 8008728:	f101 0c14 	add.w	ip, r1, #20
 800872c:	2000      	movs	r0, #0
 800872e:	f8dc 3000 	ldr.w	r3, [ip]
 8008732:	b299      	uxth	r1, r3
 8008734:	fb02 6101 	mla	r1, r2, r1, r6
 8008738:	0c1e      	lsrs	r6, r3, #16
 800873a:	0c0b      	lsrs	r3, r1, #16
 800873c:	fb02 3306 	mla	r3, r2, r6, r3
 8008740:	b289      	uxth	r1, r1
 8008742:	3001      	adds	r0, #1
 8008744:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008748:	4285      	cmp	r5, r0
 800874a:	f84c 1b04 	str.w	r1, [ip], #4
 800874e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008752:	dcec      	bgt.n	800872e <__multadd+0x12>
 8008754:	b30e      	cbz	r6, 800879a <__multadd+0x7e>
 8008756:	68a3      	ldr	r3, [r4, #8]
 8008758:	42ab      	cmp	r3, r5
 800875a:	dc19      	bgt.n	8008790 <__multadd+0x74>
 800875c:	6861      	ldr	r1, [r4, #4]
 800875e:	4638      	mov	r0, r7
 8008760:	3101      	adds	r1, #1
 8008762:	f7ff ff79 	bl	8008658 <_Balloc>
 8008766:	4680      	mov	r8, r0
 8008768:	b928      	cbnz	r0, 8008776 <__multadd+0x5a>
 800876a:	4602      	mov	r2, r0
 800876c:	4b0c      	ldr	r3, [pc, #48]	; (80087a0 <__multadd+0x84>)
 800876e:	480d      	ldr	r0, [pc, #52]	; (80087a4 <__multadd+0x88>)
 8008770:	21b5      	movs	r1, #181	; 0xb5
 8008772:	f001 fadd 	bl	8009d30 <__assert_func>
 8008776:	6922      	ldr	r2, [r4, #16]
 8008778:	3202      	adds	r2, #2
 800877a:	f104 010c 	add.w	r1, r4, #12
 800877e:	0092      	lsls	r2, r2, #2
 8008780:	300c      	adds	r0, #12
 8008782:	f7ff ff5b 	bl	800863c <memcpy>
 8008786:	4621      	mov	r1, r4
 8008788:	4638      	mov	r0, r7
 800878a:	f7ff ffa5 	bl	80086d8 <_Bfree>
 800878e:	4644      	mov	r4, r8
 8008790:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008794:	3501      	adds	r5, #1
 8008796:	615e      	str	r6, [r3, #20]
 8008798:	6125      	str	r5, [r4, #16]
 800879a:	4620      	mov	r0, r4
 800879c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087a0:	0800c778 	.word	0x0800c778
 80087a4:	0800c804 	.word	0x0800c804

080087a8 <__s2b>:
 80087a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087ac:	460c      	mov	r4, r1
 80087ae:	4615      	mov	r5, r2
 80087b0:	461f      	mov	r7, r3
 80087b2:	2209      	movs	r2, #9
 80087b4:	3308      	adds	r3, #8
 80087b6:	4606      	mov	r6, r0
 80087b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80087bc:	2100      	movs	r1, #0
 80087be:	2201      	movs	r2, #1
 80087c0:	429a      	cmp	r2, r3
 80087c2:	db09      	blt.n	80087d8 <__s2b+0x30>
 80087c4:	4630      	mov	r0, r6
 80087c6:	f7ff ff47 	bl	8008658 <_Balloc>
 80087ca:	b940      	cbnz	r0, 80087de <__s2b+0x36>
 80087cc:	4602      	mov	r2, r0
 80087ce:	4b19      	ldr	r3, [pc, #100]	; (8008834 <__s2b+0x8c>)
 80087d0:	4819      	ldr	r0, [pc, #100]	; (8008838 <__s2b+0x90>)
 80087d2:	21ce      	movs	r1, #206	; 0xce
 80087d4:	f001 faac 	bl	8009d30 <__assert_func>
 80087d8:	0052      	lsls	r2, r2, #1
 80087da:	3101      	adds	r1, #1
 80087dc:	e7f0      	b.n	80087c0 <__s2b+0x18>
 80087de:	9b08      	ldr	r3, [sp, #32]
 80087e0:	6143      	str	r3, [r0, #20]
 80087e2:	2d09      	cmp	r5, #9
 80087e4:	f04f 0301 	mov.w	r3, #1
 80087e8:	6103      	str	r3, [r0, #16]
 80087ea:	dd16      	ble.n	800881a <__s2b+0x72>
 80087ec:	f104 0909 	add.w	r9, r4, #9
 80087f0:	46c8      	mov	r8, r9
 80087f2:	442c      	add	r4, r5
 80087f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80087f8:	4601      	mov	r1, r0
 80087fa:	3b30      	subs	r3, #48	; 0x30
 80087fc:	220a      	movs	r2, #10
 80087fe:	4630      	mov	r0, r6
 8008800:	f7ff ff8c 	bl	800871c <__multadd>
 8008804:	45a0      	cmp	r8, r4
 8008806:	d1f5      	bne.n	80087f4 <__s2b+0x4c>
 8008808:	f1a5 0408 	sub.w	r4, r5, #8
 800880c:	444c      	add	r4, r9
 800880e:	1b2d      	subs	r5, r5, r4
 8008810:	1963      	adds	r3, r4, r5
 8008812:	42bb      	cmp	r3, r7
 8008814:	db04      	blt.n	8008820 <__s2b+0x78>
 8008816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800881a:	340a      	adds	r4, #10
 800881c:	2509      	movs	r5, #9
 800881e:	e7f6      	b.n	800880e <__s2b+0x66>
 8008820:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008824:	4601      	mov	r1, r0
 8008826:	3b30      	subs	r3, #48	; 0x30
 8008828:	220a      	movs	r2, #10
 800882a:	4630      	mov	r0, r6
 800882c:	f7ff ff76 	bl	800871c <__multadd>
 8008830:	e7ee      	b.n	8008810 <__s2b+0x68>
 8008832:	bf00      	nop
 8008834:	0800c778 	.word	0x0800c778
 8008838:	0800c804 	.word	0x0800c804

0800883c <__hi0bits>:
 800883c:	0c03      	lsrs	r3, r0, #16
 800883e:	041b      	lsls	r3, r3, #16
 8008840:	b9d3      	cbnz	r3, 8008878 <__hi0bits+0x3c>
 8008842:	0400      	lsls	r0, r0, #16
 8008844:	2310      	movs	r3, #16
 8008846:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800884a:	bf04      	itt	eq
 800884c:	0200      	lsleq	r0, r0, #8
 800884e:	3308      	addeq	r3, #8
 8008850:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008854:	bf04      	itt	eq
 8008856:	0100      	lsleq	r0, r0, #4
 8008858:	3304      	addeq	r3, #4
 800885a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800885e:	bf04      	itt	eq
 8008860:	0080      	lsleq	r0, r0, #2
 8008862:	3302      	addeq	r3, #2
 8008864:	2800      	cmp	r0, #0
 8008866:	db05      	blt.n	8008874 <__hi0bits+0x38>
 8008868:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800886c:	f103 0301 	add.w	r3, r3, #1
 8008870:	bf08      	it	eq
 8008872:	2320      	moveq	r3, #32
 8008874:	4618      	mov	r0, r3
 8008876:	4770      	bx	lr
 8008878:	2300      	movs	r3, #0
 800887a:	e7e4      	b.n	8008846 <__hi0bits+0xa>

0800887c <__lo0bits>:
 800887c:	6803      	ldr	r3, [r0, #0]
 800887e:	f013 0207 	ands.w	r2, r3, #7
 8008882:	4601      	mov	r1, r0
 8008884:	d00b      	beq.n	800889e <__lo0bits+0x22>
 8008886:	07da      	lsls	r2, r3, #31
 8008888:	d423      	bmi.n	80088d2 <__lo0bits+0x56>
 800888a:	0798      	lsls	r0, r3, #30
 800888c:	bf49      	itett	mi
 800888e:	085b      	lsrmi	r3, r3, #1
 8008890:	089b      	lsrpl	r3, r3, #2
 8008892:	2001      	movmi	r0, #1
 8008894:	600b      	strmi	r3, [r1, #0]
 8008896:	bf5c      	itt	pl
 8008898:	600b      	strpl	r3, [r1, #0]
 800889a:	2002      	movpl	r0, #2
 800889c:	4770      	bx	lr
 800889e:	b298      	uxth	r0, r3
 80088a0:	b9a8      	cbnz	r0, 80088ce <__lo0bits+0x52>
 80088a2:	0c1b      	lsrs	r3, r3, #16
 80088a4:	2010      	movs	r0, #16
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	b90a      	cbnz	r2, 80088ae <__lo0bits+0x32>
 80088aa:	3008      	adds	r0, #8
 80088ac:	0a1b      	lsrs	r3, r3, #8
 80088ae:	071a      	lsls	r2, r3, #28
 80088b0:	bf04      	itt	eq
 80088b2:	091b      	lsreq	r3, r3, #4
 80088b4:	3004      	addeq	r0, #4
 80088b6:	079a      	lsls	r2, r3, #30
 80088b8:	bf04      	itt	eq
 80088ba:	089b      	lsreq	r3, r3, #2
 80088bc:	3002      	addeq	r0, #2
 80088be:	07da      	lsls	r2, r3, #31
 80088c0:	d403      	bmi.n	80088ca <__lo0bits+0x4e>
 80088c2:	085b      	lsrs	r3, r3, #1
 80088c4:	f100 0001 	add.w	r0, r0, #1
 80088c8:	d005      	beq.n	80088d6 <__lo0bits+0x5a>
 80088ca:	600b      	str	r3, [r1, #0]
 80088cc:	4770      	bx	lr
 80088ce:	4610      	mov	r0, r2
 80088d0:	e7e9      	b.n	80088a6 <__lo0bits+0x2a>
 80088d2:	2000      	movs	r0, #0
 80088d4:	4770      	bx	lr
 80088d6:	2020      	movs	r0, #32
 80088d8:	4770      	bx	lr
	...

080088dc <__i2b>:
 80088dc:	b510      	push	{r4, lr}
 80088de:	460c      	mov	r4, r1
 80088e0:	2101      	movs	r1, #1
 80088e2:	f7ff feb9 	bl	8008658 <_Balloc>
 80088e6:	4602      	mov	r2, r0
 80088e8:	b928      	cbnz	r0, 80088f6 <__i2b+0x1a>
 80088ea:	4b05      	ldr	r3, [pc, #20]	; (8008900 <__i2b+0x24>)
 80088ec:	4805      	ldr	r0, [pc, #20]	; (8008904 <__i2b+0x28>)
 80088ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80088f2:	f001 fa1d 	bl	8009d30 <__assert_func>
 80088f6:	2301      	movs	r3, #1
 80088f8:	6144      	str	r4, [r0, #20]
 80088fa:	6103      	str	r3, [r0, #16]
 80088fc:	bd10      	pop	{r4, pc}
 80088fe:	bf00      	nop
 8008900:	0800c778 	.word	0x0800c778
 8008904:	0800c804 	.word	0x0800c804

08008908 <__multiply>:
 8008908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800890c:	4691      	mov	r9, r2
 800890e:	690a      	ldr	r2, [r1, #16]
 8008910:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008914:	429a      	cmp	r2, r3
 8008916:	bfb8      	it	lt
 8008918:	460b      	movlt	r3, r1
 800891a:	460c      	mov	r4, r1
 800891c:	bfbc      	itt	lt
 800891e:	464c      	movlt	r4, r9
 8008920:	4699      	movlt	r9, r3
 8008922:	6927      	ldr	r7, [r4, #16]
 8008924:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008928:	68a3      	ldr	r3, [r4, #8]
 800892a:	6861      	ldr	r1, [r4, #4]
 800892c:	eb07 060a 	add.w	r6, r7, sl
 8008930:	42b3      	cmp	r3, r6
 8008932:	b085      	sub	sp, #20
 8008934:	bfb8      	it	lt
 8008936:	3101      	addlt	r1, #1
 8008938:	f7ff fe8e 	bl	8008658 <_Balloc>
 800893c:	b930      	cbnz	r0, 800894c <__multiply+0x44>
 800893e:	4602      	mov	r2, r0
 8008940:	4b44      	ldr	r3, [pc, #272]	; (8008a54 <__multiply+0x14c>)
 8008942:	4845      	ldr	r0, [pc, #276]	; (8008a58 <__multiply+0x150>)
 8008944:	f240 115d 	movw	r1, #349	; 0x15d
 8008948:	f001 f9f2 	bl	8009d30 <__assert_func>
 800894c:	f100 0514 	add.w	r5, r0, #20
 8008950:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008954:	462b      	mov	r3, r5
 8008956:	2200      	movs	r2, #0
 8008958:	4543      	cmp	r3, r8
 800895a:	d321      	bcc.n	80089a0 <__multiply+0x98>
 800895c:	f104 0314 	add.w	r3, r4, #20
 8008960:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008964:	f109 0314 	add.w	r3, r9, #20
 8008968:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800896c:	9202      	str	r2, [sp, #8]
 800896e:	1b3a      	subs	r2, r7, r4
 8008970:	3a15      	subs	r2, #21
 8008972:	f022 0203 	bic.w	r2, r2, #3
 8008976:	3204      	adds	r2, #4
 8008978:	f104 0115 	add.w	r1, r4, #21
 800897c:	428f      	cmp	r7, r1
 800897e:	bf38      	it	cc
 8008980:	2204      	movcc	r2, #4
 8008982:	9201      	str	r2, [sp, #4]
 8008984:	9a02      	ldr	r2, [sp, #8]
 8008986:	9303      	str	r3, [sp, #12]
 8008988:	429a      	cmp	r2, r3
 800898a:	d80c      	bhi.n	80089a6 <__multiply+0x9e>
 800898c:	2e00      	cmp	r6, #0
 800898e:	dd03      	ble.n	8008998 <__multiply+0x90>
 8008990:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008994:	2b00      	cmp	r3, #0
 8008996:	d05a      	beq.n	8008a4e <__multiply+0x146>
 8008998:	6106      	str	r6, [r0, #16]
 800899a:	b005      	add	sp, #20
 800899c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a0:	f843 2b04 	str.w	r2, [r3], #4
 80089a4:	e7d8      	b.n	8008958 <__multiply+0x50>
 80089a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80089aa:	f1ba 0f00 	cmp.w	sl, #0
 80089ae:	d024      	beq.n	80089fa <__multiply+0xf2>
 80089b0:	f104 0e14 	add.w	lr, r4, #20
 80089b4:	46a9      	mov	r9, r5
 80089b6:	f04f 0c00 	mov.w	ip, #0
 80089ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 80089be:	f8d9 1000 	ldr.w	r1, [r9]
 80089c2:	fa1f fb82 	uxth.w	fp, r2
 80089c6:	b289      	uxth	r1, r1
 80089c8:	fb0a 110b 	mla	r1, sl, fp, r1
 80089cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80089d0:	f8d9 2000 	ldr.w	r2, [r9]
 80089d4:	4461      	add	r1, ip
 80089d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80089da:	fb0a c20b 	mla	r2, sl, fp, ip
 80089de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80089e2:	b289      	uxth	r1, r1
 80089e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80089e8:	4577      	cmp	r7, lr
 80089ea:	f849 1b04 	str.w	r1, [r9], #4
 80089ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80089f2:	d8e2      	bhi.n	80089ba <__multiply+0xb2>
 80089f4:	9a01      	ldr	r2, [sp, #4]
 80089f6:	f845 c002 	str.w	ip, [r5, r2]
 80089fa:	9a03      	ldr	r2, [sp, #12]
 80089fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a00:	3304      	adds	r3, #4
 8008a02:	f1b9 0f00 	cmp.w	r9, #0
 8008a06:	d020      	beq.n	8008a4a <__multiply+0x142>
 8008a08:	6829      	ldr	r1, [r5, #0]
 8008a0a:	f104 0c14 	add.w	ip, r4, #20
 8008a0e:	46ae      	mov	lr, r5
 8008a10:	f04f 0a00 	mov.w	sl, #0
 8008a14:	f8bc b000 	ldrh.w	fp, [ip]
 8008a18:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008a1c:	fb09 220b 	mla	r2, r9, fp, r2
 8008a20:	4492      	add	sl, r2
 8008a22:	b289      	uxth	r1, r1
 8008a24:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008a28:	f84e 1b04 	str.w	r1, [lr], #4
 8008a2c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008a30:	f8be 1000 	ldrh.w	r1, [lr]
 8008a34:	0c12      	lsrs	r2, r2, #16
 8008a36:	fb09 1102 	mla	r1, r9, r2, r1
 8008a3a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008a3e:	4567      	cmp	r7, ip
 8008a40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a44:	d8e6      	bhi.n	8008a14 <__multiply+0x10c>
 8008a46:	9a01      	ldr	r2, [sp, #4]
 8008a48:	50a9      	str	r1, [r5, r2]
 8008a4a:	3504      	adds	r5, #4
 8008a4c:	e79a      	b.n	8008984 <__multiply+0x7c>
 8008a4e:	3e01      	subs	r6, #1
 8008a50:	e79c      	b.n	800898c <__multiply+0x84>
 8008a52:	bf00      	nop
 8008a54:	0800c778 	.word	0x0800c778
 8008a58:	0800c804 	.word	0x0800c804

08008a5c <__pow5mult>:
 8008a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a60:	4615      	mov	r5, r2
 8008a62:	f012 0203 	ands.w	r2, r2, #3
 8008a66:	4606      	mov	r6, r0
 8008a68:	460f      	mov	r7, r1
 8008a6a:	d007      	beq.n	8008a7c <__pow5mult+0x20>
 8008a6c:	4c25      	ldr	r4, [pc, #148]	; (8008b04 <__pow5mult+0xa8>)
 8008a6e:	3a01      	subs	r2, #1
 8008a70:	2300      	movs	r3, #0
 8008a72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a76:	f7ff fe51 	bl	800871c <__multadd>
 8008a7a:	4607      	mov	r7, r0
 8008a7c:	10ad      	asrs	r5, r5, #2
 8008a7e:	d03d      	beq.n	8008afc <__pow5mult+0xa0>
 8008a80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a82:	b97c      	cbnz	r4, 8008aa4 <__pow5mult+0x48>
 8008a84:	2010      	movs	r0, #16
 8008a86:	f7ff fdbf 	bl	8008608 <malloc>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	6270      	str	r0, [r6, #36]	; 0x24
 8008a8e:	b928      	cbnz	r0, 8008a9c <__pow5mult+0x40>
 8008a90:	4b1d      	ldr	r3, [pc, #116]	; (8008b08 <__pow5mult+0xac>)
 8008a92:	481e      	ldr	r0, [pc, #120]	; (8008b0c <__pow5mult+0xb0>)
 8008a94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008a98:	f001 f94a 	bl	8009d30 <__assert_func>
 8008a9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008aa0:	6004      	str	r4, [r0, #0]
 8008aa2:	60c4      	str	r4, [r0, #12]
 8008aa4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008aa8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008aac:	b94c      	cbnz	r4, 8008ac2 <__pow5mult+0x66>
 8008aae:	f240 2171 	movw	r1, #625	; 0x271
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	f7ff ff12 	bl	80088dc <__i2b>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f8c8 0008 	str.w	r0, [r8, #8]
 8008abe:	4604      	mov	r4, r0
 8008ac0:	6003      	str	r3, [r0, #0]
 8008ac2:	f04f 0900 	mov.w	r9, #0
 8008ac6:	07eb      	lsls	r3, r5, #31
 8008ac8:	d50a      	bpl.n	8008ae0 <__pow5mult+0x84>
 8008aca:	4639      	mov	r1, r7
 8008acc:	4622      	mov	r2, r4
 8008ace:	4630      	mov	r0, r6
 8008ad0:	f7ff ff1a 	bl	8008908 <__multiply>
 8008ad4:	4639      	mov	r1, r7
 8008ad6:	4680      	mov	r8, r0
 8008ad8:	4630      	mov	r0, r6
 8008ada:	f7ff fdfd 	bl	80086d8 <_Bfree>
 8008ade:	4647      	mov	r7, r8
 8008ae0:	106d      	asrs	r5, r5, #1
 8008ae2:	d00b      	beq.n	8008afc <__pow5mult+0xa0>
 8008ae4:	6820      	ldr	r0, [r4, #0]
 8008ae6:	b938      	cbnz	r0, 8008af8 <__pow5mult+0x9c>
 8008ae8:	4622      	mov	r2, r4
 8008aea:	4621      	mov	r1, r4
 8008aec:	4630      	mov	r0, r6
 8008aee:	f7ff ff0b 	bl	8008908 <__multiply>
 8008af2:	6020      	str	r0, [r4, #0]
 8008af4:	f8c0 9000 	str.w	r9, [r0]
 8008af8:	4604      	mov	r4, r0
 8008afa:	e7e4      	b.n	8008ac6 <__pow5mult+0x6a>
 8008afc:	4638      	mov	r0, r7
 8008afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b02:	bf00      	nop
 8008b04:	0800c950 	.word	0x0800c950
 8008b08:	0800c706 	.word	0x0800c706
 8008b0c:	0800c804 	.word	0x0800c804

08008b10 <__lshift>:
 8008b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b14:	460c      	mov	r4, r1
 8008b16:	6849      	ldr	r1, [r1, #4]
 8008b18:	6923      	ldr	r3, [r4, #16]
 8008b1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b1e:	68a3      	ldr	r3, [r4, #8]
 8008b20:	4607      	mov	r7, r0
 8008b22:	4691      	mov	r9, r2
 8008b24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b28:	f108 0601 	add.w	r6, r8, #1
 8008b2c:	42b3      	cmp	r3, r6
 8008b2e:	db0b      	blt.n	8008b48 <__lshift+0x38>
 8008b30:	4638      	mov	r0, r7
 8008b32:	f7ff fd91 	bl	8008658 <_Balloc>
 8008b36:	4605      	mov	r5, r0
 8008b38:	b948      	cbnz	r0, 8008b4e <__lshift+0x3e>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	4b2a      	ldr	r3, [pc, #168]	; (8008be8 <__lshift+0xd8>)
 8008b3e:	482b      	ldr	r0, [pc, #172]	; (8008bec <__lshift+0xdc>)
 8008b40:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008b44:	f001 f8f4 	bl	8009d30 <__assert_func>
 8008b48:	3101      	adds	r1, #1
 8008b4a:	005b      	lsls	r3, r3, #1
 8008b4c:	e7ee      	b.n	8008b2c <__lshift+0x1c>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	f100 0114 	add.w	r1, r0, #20
 8008b54:	f100 0210 	add.w	r2, r0, #16
 8008b58:	4618      	mov	r0, r3
 8008b5a:	4553      	cmp	r3, sl
 8008b5c:	db37      	blt.n	8008bce <__lshift+0xbe>
 8008b5e:	6920      	ldr	r0, [r4, #16]
 8008b60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b64:	f104 0314 	add.w	r3, r4, #20
 8008b68:	f019 091f 	ands.w	r9, r9, #31
 8008b6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008b74:	d02f      	beq.n	8008bd6 <__lshift+0xc6>
 8008b76:	f1c9 0e20 	rsb	lr, r9, #32
 8008b7a:	468a      	mov	sl, r1
 8008b7c:	f04f 0c00 	mov.w	ip, #0
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	fa02 f209 	lsl.w	r2, r2, r9
 8008b86:	ea42 020c 	orr.w	r2, r2, ip
 8008b8a:	f84a 2b04 	str.w	r2, [sl], #4
 8008b8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b92:	4298      	cmp	r0, r3
 8008b94:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008b98:	d8f2      	bhi.n	8008b80 <__lshift+0x70>
 8008b9a:	1b03      	subs	r3, r0, r4
 8008b9c:	3b15      	subs	r3, #21
 8008b9e:	f023 0303 	bic.w	r3, r3, #3
 8008ba2:	3304      	adds	r3, #4
 8008ba4:	f104 0215 	add.w	r2, r4, #21
 8008ba8:	4290      	cmp	r0, r2
 8008baa:	bf38      	it	cc
 8008bac:	2304      	movcc	r3, #4
 8008bae:	f841 c003 	str.w	ip, [r1, r3]
 8008bb2:	f1bc 0f00 	cmp.w	ip, #0
 8008bb6:	d001      	beq.n	8008bbc <__lshift+0xac>
 8008bb8:	f108 0602 	add.w	r6, r8, #2
 8008bbc:	3e01      	subs	r6, #1
 8008bbe:	4638      	mov	r0, r7
 8008bc0:	612e      	str	r6, [r5, #16]
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	f7ff fd88 	bl	80086d8 <_Bfree>
 8008bc8:	4628      	mov	r0, r5
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	f842 0f04 	str.w	r0, [r2, #4]!
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	e7c1      	b.n	8008b5a <__lshift+0x4a>
 8008bd6:	3904      	subs	r1, #4
 8008bd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bdc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008be0:	4298      	cmp	r0, r3
 8008be2:	d8f9      	bhi.n	8008bd8 <__lshift+0xc8>
 8008be4:	e7ea      	b.n	8008bbc <__lshift+0xac>
 8008be6:	bf00      	nop
 8008be8:	0800c778 	.word	0x0800c778
 8008bec:	0800c804 	.word	0x0800c804

08008bf0 <__mcmp>:
 8008bf0:	b530      	push	{r4, r5, lr}
 8008bf2:	6902      	ldr	r2, [r0, #16]
 8008bf4:	690c      	ldr	r4, [r1, #16]
 8008bf6:	1b12      	subs	r2, r2, r4
 8008bf8:	d10e      	bne.n	8008c18 <__mcmp+0x28>
 8008bfa:	f100 0314 	add.w	r3, r0, #20
 8008bfe:	3114      	adds	r1, #20
 8008c00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008c04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008c08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008c0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008c10:	42a5      	cmp	r5, r4
 8008c12:	d003      	beq.n	8008c1c <__mcmp+0x2c>
 8008c14:	d305      	bcc.n	8008c22 <__mcmp+0x32>
 8008c16:	2201      	movs	r2, #1
 8008c18:	4610      	mov	r0, r2
 8008c1a:	bd30      	pop	{r4, r5, pc}
 8008c1c:	4283      	cmp	r3, r0
 8008c1e:	d3f3      	bcc.n	8008c08 <__mcmp+0x18>
 8008c20:	e7fa      	b.n	8008c18 <__mcmp+0x28>
 8008c22:	f04f 32ff 	mov.w	r2, #4294967295
 8008c26:	e7f7      	b.n	8008c18 <__mcmp+0x28>

08008c28 <__mdiff>:
 8008c28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c2c:	460c      	mov	r4, r1
 8008c2e:	4606      	mov	r6, r0
 8008c30:	4611      	mov	r1, r2
 8008c32:	4620      	mov	r0, r4
 8008c34:	4690      	mov	r8, r2
 8008c36:	f7ff ffdb 	bl	8008bf0 <__mcmp>
 8008c3a:	1e05      	subs	r5, r0, #0
 8008c3c:	d110      	bne.n	8008c60 <__mdiff+0x38>
 8008c3e:	4629      	mov	r1, r5
 8008c40:	4630      	mov	r0, r6
 8008c42:	f7ff fd09 	bl	8008658 <_Balloc>
 8008c46:	b930      	cbnz	r0, 8008c56 <__mdiff+0x2e>
 8008c48:	4b3a      	ldr	r3, [pc, #232]	; (8008d34 <__mdiff+0x10c>)
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	f240 2132 	movw	r1, #562	; 0x232
 8008c50:	4839      	ldr	r0, [pc, #228]	; (8008d38 <__mdiff+0x110>)
 8008c52:	f001 f86d 	bl	8009d30 <__assert_func>
 8008c56:	2301      	movs	r3, #1
 8008c58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c60:	bfa4      	itt	ge
 8008c62:	4643      	movge	r3, r8
 8008c64:	46a0      	movge	r8, r4
 8008c66:	4630      	mov	r0, r6
 8008c68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008c6c:	bfa6      	itte	ge
 8008c6e:	461c      	movge	r4, r3
 8008c70:	2500      	movge	r5, #0
 8008c72:	2501      	movlt	r5, #1
 8008c74:	f7ff fcf0 	bl	8008658 <_Balloc>
 8008c78:	b920      	cbnz	r0, 8008c84 <__mdiff+0x5c>
 8008c7a:	4b2e      	ldr	r3, [pc, #184]	; (8008d34 <__mdiff+0x10c>)
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c82:	e7e5      	b.n	8008c50 <__mdiff+0x28>
 8008c84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008c88:	6926      	ldr	r6, [r4, #16]
 8008c8a:	60c5      	str	r5, [r0, #12]
 8008c8c:	f104 0914 	add.w	r9, r4, #20
 8008c90:	f108 0514 	add.w	r5, r8, #20
 8008c94:	f100 0e14 	add.w	lr, r0, #20
 8008c98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008c9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008ca0:	f108 0210 	add.w	r2, r8, #16
 8008ca4:	46f2      	mov	sl, lr
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	f859 3b04 	ldr.w	r3, [r9], #4
 8008cac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008cb0:	fa1f f883 	uxth.w	r8, r3
 8008cb4:	fa11 f18b 	uxtah	r1, r1, fp
 8008cb8:	0c1b      	lsrs	r3, r3, #16
 8008cba:	eba1 0808 	sub.w	r8, r1, r8
 8008cbe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008cc2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008cc6:	fa1f f888 	uxth.w	r8, r8
 8008cca:	1419      	asrs	r1, r3, #16
 8008ccc:	454e      	cmp	r6, r9
 8008cce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008cd2:	f84a 3b04 	str.w	r3, [sl], #4
 8008cd6:	d8e7      	bhi.n	8008ca8 <__mdiff+0x80>
 8008cd8:	1b33      	subs	r3, r6, r4
 8008cda:	3b15      	subs	r3, #21
 8008cdc:	f023 0303 	bic.w	r3, r3, #3
 8008ce0:	3304      	adds	r3, #4
 8008ce2:	3415      	adds	r4, #21
 8008ce4:	42a6      	cmp	r6, r4
 8008ce6:	bf38      	it	cc
 8008ce8:	2304      	movcc	r3, #4
 8008cea:	441d      	add	r5, r3
 8008cec:	4473      	add	r3, lr
 8008cee:	469e      	mov	lr, r3
 8008cf0:	462e      	mov	r6, r5
 8008cf2:	4566      	cmp	r6, ip
 8008cf4:	d30e      	bcc.n	8008d14 <__mdiff+0xec>
 8008cf6:	f10c 0203 	add.w	r2, ip, #3
 8008cfa:	1b52      	subs	r2, r2, r5
 8008cfc:	f022 0203 	bic.w	r2, r2, #3
 8008d00:	3d03      	subs	r5, #3
 8008d02:	45ac      	cmp	ip, r5
 8008d04:	bf38      	it	cc
 8008d06:	2200      	movcc	r2, #0
 8008d08:	441a      	add	r2, r3
 8008d0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008d0e:	b17b      	cbz	r3, 8008d30 <__mdiff+0x108>
 8008d10:	6107      	str	r7, [r0, #16]
 8008d12:	e7a3      	b.n	8008c5c <__mdiff+0x34>
 8008d14:	f856 8b04 	ldr.w	r8, [r6], #4
 8008d18:	fa11 f288 	uxtah	r2, r1, r8
 8008d1c:	1414      	asrs	r4, r2, #16
 8008d1e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008d22:	b292      	uxth	r2, r2
 8008d24:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008d28:	f84e 2b04 	str.w	r2, [lr], #4
 8008d2c:	1421      	asrs	r1, r4, #16
 8008d2e:	e7e0      	b.n	8008cf2 <__mdiff+0xca>
 8008d30:	3f01      	subs	r7, #1
 8008d32:	e7ea      	b.n	8008d0a <__mdiff+0xe2>
 8008d34:	0800c778 	.word	0x0800c778
 8008d38:	0800c804 	.word	0x0800c804

08008d3c <__ulp>:
 8008d3c:	b082      	sub	sp, #8
 8008d3e:	ed8d 0b00 	vstr	d0, [sp]
 8008d42:	9b01      	ldr	r3, [sp, #4]
 8008d44:	4912      	ldr	r1, [pc, #72]	; (8008d90 <__ulp+0x54>)
 8008d46:	4019      	ands	r1, r3
 8008d48:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008d4c:	2900      	cmp	r1, #0
 8008d4e:	dd05      	ble.n	8008d5c <__ulp+0x20>
 8008d50:	2200      	movs	r2, #0
 8008d52:	460b      	mov	r3, r1
 8008d54:	ec43 2b10 	vmov	d0, r2, r3
 8008d58:	b002      	add	sp, #8
 8008d5a:	4770      	bx	lr
 8008d5c:	4249      	negs	r1, r1
 8008d5e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008d62:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008d66:	f04f 0200 	mov.w	r2, #0
 8008d6a:	f04f 0300 	mov.w	r3, #0
 8008d6e:	da04      	bge.n	8008d7a <__ulp+0x3e>
 8008d70:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008d74:	fa41 f300 	asr.w	r3, r1, r0
 8008d78:	e7ec      	b.n	8008d54 <__ulp+0x18>
 8008d7a:	f1a0 0114 	sub.w	r1, r0, #20
 8008d7e:	291e      	cmp	r1, #30
 8008d80:	bfda      	itte	le
 8008d82:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008d86:	fa20 f101 	lsrle.w	r1, r0, r1
 8008d8a:	2101      	movgt	r1, #1
 8008d8c:	460a      	mov	r2, r1
 8008d8e:	e7e1      	b.n	8008d54 <__ulp+0x18>
 8008d90:	7ff00000 	.word	0x7ff00000

08008d94 <__b2d>:
 8008d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d96:	6905      	ldr	r5, [r0, #16]
 8008d98:	f100 0714 	add.w	r7, r0, #20
 8008d9c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008da0:	1f2e      	subs	r6, r5, #4
 8008da2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008da6:	4620      	mov	r0, r4
 8008da8:	f7ff fd48 	bl	800883c <__hi0bits>
 8008dac:	f1c0 0320 	rsb	r3, r0, #32
 8008db0:	280a      	cmp	r0, #10
 8008db2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008e30 <__b2d+0x9c>
 8008db6:	600b      	str	r3, [r1, #0]
 8008db8:	dc14      	bgt.n	8008de4 <__b2d+0x50>
 8008dba:	f1c0 0e0b 	rsb	lr, r0, #11
 8008dbe:	fa24 f10e 	lsr.w	r1, r4, lr
 8008dc2:	42b7      	cmp	r7, r6
 8008dc4:	ea41 030c 	orr.w	r3, r1, ip
 8008dc8:	bf34      	ite	cc
 8008dca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008dce:	2100      	movcs	r1, #0
 8008dd0:	3015      	adds	r0, #21
 8008dd2:	fa04 f000 	lsl.w	r0, r4, r0
 8008dd6:	fa21 f10e 	lsr.w	r1, r1, lr
 8008dda:	ea40 0201 	orr.w	r2, r0, r1
 8008dde:	ec43 2b10 	vmov	d0, r2, r3
 8008de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008de4:	42b7      	cmp	r7, r6
 8008de6:	bf3a      	itte	cc
 8008de8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008dec:	f1a5 0608 	subcc.w	r6, r5, #8
 8008df0:	2100      	movcs	r1, #0
 8008df2:	380b      	subs	r0, #11
 8008df4:	d017      	beq.n	8008e26 <__b2d+0x92>
 8008df6:	f1c0 0c20 	rsb	ip, r0, #32
 8008dfa:	fa04 f500 	lsl.w	r5, r4, r0
 8008dfe:	42be      	cmp	r6, r7
 8008e00:	fa21 f40c 	lsr.w	r4, r1, ip
 8008e04:	ea45 0504 	orr.w	r5, r5, r4
 8008e08:	bf8c      	ite	hi
 8008e0a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008e0e:	2400      	movls	r4, #0
 8008e10:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008e14:	fa01 f000 	lsl.w	r0, r1, r0
 8008e18:	fa24 f40c 	lsr.w	r4, r4, ip
 8008e1c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008e20:	ea40 0204 	orr.w	r2, r0, r4
 8008e24:	e7db      	b.n	8008dde <__b2d+0x4a>
 8008e26:	ea44 030c 	orr.w	r3, r4, ip
 8008e2a:	460a      	mov	r2, r1
 8008e2c:	e7d7      	b.n	8008dde <__b2d+0x4a>
 8008e2e:	bf00      	nop
 8008e30:	3ff00000 	.word	0x3ff00000

08008e34 <__d2b>:
 8008e34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e38:	4689      	mov	r9, r1
 8008e3a:	2101      	movs	r1, #1
 8008e3c:	ec57 6b10 	vmov	r6, r7, d0
 8008e40:	4690      	mov	r8, r2
 8008e42:	f7ff fc09 	bl	8008658 <_Balloc>
 8008e46:	4604      	mov	r4, r0
 8008e48:	b930      	cbnz	r0, 8008e58 <__d2b+0x24>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	4b25      	ldr	r3, [pc, #148]	; (8008ee4 <__d2b+0xb0>)
 8008e4e:	4826      	ldr	r0, [pc, #152]	; (8008ee8 <__d2b+0xb4>)
 8008e50:	f240 310a 	movw	r1, #778	; 0x30a
 8008e54:	f000 ff6c 	bl	8009d30 <__assert_func>
 8008e58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008e5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e60:	bb35      	cbnz	r5, 8008eb0 <__d2b+0x7c>
 8008e62:	2e00      	cmp	r6, #0
 8008e64:	9301      	str	r3, [sp, #4]
 8008e66:	d028      	beq.n	8008eba <__d2b+0x86>
 8008e68:	4668      	mov	r0, sp
 8008e6a:	9600      	str	r6, [sp, #0]
 8008e6c:	f7ff fd06 	bl	800887c <__lo0bits>
 8008e70:	9900      	ldr	r1, [sp, #0]
 8008e72:	b300      	cbz	r0, 8008eb6 <__d2b+0x82>
 8008e74:	9a01      	ldr	r2, [sp, #4]
 8008e76:	f1c0 0320 	rsb	r3, r0, #32
 8008e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e7e:	430b      	orrs	r3, r1
 8008e80:	40c2      	lsrs	r2, r0
 8008e82:	6163      	str	r3, [r4, #20]
 8008e84:	9201      	str	r2, [sp, #4]
 8008e86:	9b01      	ldr	r3, [sp, #4]
 8008e88:	61a3      	str	r3, [r4, #24]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	bf14      	ite	ne
 8008e8e:	2202      	movne	r2, #2
 8008e90:	2201      	moveq	r2, #1
 8008e92:	6122      	str	r2, [r4, #16]
 8008e94:	b1d5      	cbz	r5, 8008ecc <__d2b+0x98>
 8008e96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e9a:	4405      	add	r5, r0
 8008e9c:	f8c9 5000 	str.w	r5, [r9]
 8008ea0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ea4:	f8c8 0000 	str.w	r0, [r8]
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	b003      	add	sp, #12
 8008eac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008eb4:	e7d5      	b.n	8008e62 <__d2b+0x2e>
 8008eb6:	6161      	str	r1, [r4, #20]
 8008eb8:	e7e5      	b.n	8008e86 <__d2b+0x52>
 8008eba:	a801      	add	r0, sp, #4
 8008ebc:	f7ff fcde 	bl	800887c <__lo0bits>
 8008ec0:	9b01      	ldr	r3, [sp, #4]
 8008ec2:	6163      	str	r3, [r4, #20]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	6122      	str	r2, [r4, #16]
 8008ec8:	3020      	adds	r0, #32
 8008eca:	e7e3      	b.n	8008e94 <__d2b+0x60>
 8008ecc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ed0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008ed4:	f8c9 0000 	str.w	r0, [r9]
 8008ed8:	6918      	ldr	r0, [r3, #16]
 8008eda:	f7ff fcaf 	bl	800883c <__hi0bits>
 8008ede:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ee2:	e7df      	b.n	8008ea4 <__d2b+0x70>
 8008ee4:	0800c778 	.word	0x0800c778
 8008ee8:	0800c804 	.word	0x0800c804

08008eec <__ratio>:
 8008eec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef0:	4688      	mov	r8, r1
 8008ef2:	4669      	mov	r1, sp
 8008ef4:	4681      	mov	r9, r0
 8008ef6:	f7ff ff4d 	bl	8008d94 <__b2d>
 8008efa:	a901      	add	r1, sp, #4
 8008efc:	4640      	mov	r0, r8
 8008efe:	ec55 4b10 	vmov	r4, r5, d0
 8008f02:	f7ff ff47 	bl	8008d94 <__b2d>
 8008f06:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f0a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008f0e:	eba3 0c02 	sub.w	ip, r3, r2
 8008f12:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008f16:	1a9b      	subs	r3, r3, r2
 8008f18:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008f1c:	ec51 0b10 	vmov	r0, r1, d0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	bfd6      	itet	le
 8008f24:	460a      	movle	r2, r1
 8008f26:	462a      	movgt	r2, r5
 8008f28:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008f2c:	468b      	mov	fp, r1
 8008f2e:	462f      	mov	r7, r5
 8008f30:	bfd4      	ite	le
 8008f32:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008f36:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	ee10 2a10 	vmov	r2, s0
 8008f40:	465b      	mov	r3, fp
 8008f42:	4639      	mov	r1, r7
 8008f44:	f7f7 fc9a 	bl	800087c <__aeabi_ddiv>
 8008f48:	ec41 0b10 	vmov	d0, r0, r1
 8008f4c:	b003      	add	sp, #12
 8008f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f52 <__copybits>:
 8008f52:	3901      	subs	r1, #1
 8008f54:	b570      	push	{r4, r5, r6, lr}
 8008f56:	1149      	asrs	r1, r1, #5
 8008f58:	6914      	ldr	r4, [r2, #16]
 8008f5a:	3101      	adds	r1, #1
 8008f5c:	f102 0314 	add.w	r3, r2, #20
 8008f60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008f64:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008f68:	1f05      	subs	r5, r0, #4
 8008f6a:	42a3      	cmp	r3, r4
 8008f6c:	d30c      	bcc.n	8008f88 <__copybits+0x36>
 8008f6e:	1aa3      	subs	r3, r4, r2
 8008f70:	3b11      	subs	r3, #17
 8008f72:	f023 0303 	bic.w	r3, r3, #3
 8008f76:	3211      	adds	r2, #17
 8008f78:	42a2      	cmp	r2, r4
 8008f7a:	bf88      	it	hi
 8008f7c:	2300      	movhi	r3, #0
 8008f7e:	4418      	add	r0, r3
 8008f80:	2300      	movs	r3, #0
 8008f82:	4288      	cmp	r0, r1
 8008f84:	d305      	bcc.n	8008f92 <__copybits+0x40>
 8008f86:	bd70      	pop	{r4, r5, r6, pc}
 8008f88:	f853 6b04 	ldr.w	r6, [r3], #4
 8008f8c:	f845 6f04 	str.w	r6, [r5, #4]!
 8008f90:	e7eb      	b.n	8008f6a <__copybits+0x18>
 8008f92:	f840 3b04 	str.w	r3, [r0], #4
 8008f96:	e7f4      	b.n	8008f82 <__copybits+0x30>

08008f98 <__any_on>:
 8008f98:	f100 0214 	add.w	r2, r0, #20
 8008f9c:	6900      	ldr	r0, [r0, #16]
 8008f9e:	114b      	asrs	r3, r1, #5
 8008fa0:	4298      	cmp	r0, r3
 8008fa2:	b510      	push	{r4, lr}
 8008fa4:	db11      	blt.n	8008fca <__any_on+0x32>
 8008fa6:	dd0a      	ble.n	8008fbe <__any_on+0x26>
 8008fa8:	f011 011f 	ands.w	r1, r1, #31
 8008fac:	d007      	beq.n	8008fbe <__any_on+0x26>
 8008fae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008fb2:	fa24 f001 	lsr.w	r0, r4, r1
 8008fb6:	fa00 f101 	lsl.w	r1, r0, r1
 8008fba:	428c      	cmp	r4, r1
 8008fbc:	d10b      	bne.n	8008fd6 <__any_on+0x3e>
 8008fbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d803      	bhi.n	8008fce <__any_on+0x36>
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	bd10      	pop	{r4, pc}
 8008fca:	4603      	mov	r3, r0
 8008fcc:	e7f7      	b.n	8008fbe <__any_on+0x26>
 8008fce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008fd2:	2900      	cmp	r1, #0
 8008fd4:	d0f5      	beq.n	8008fc2 <__any_on+0x2a>
 8008fd6:	2001      	movs	r0, #1
 8008fd8:	e7f6      	b.n	8008fc8 <__any_on+0x30>

08008fda <_calloc_r>:
 8008fda:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fdc:	fba1 2402 	umull	r2, r4, r1, r2
 8008fe0:	b94c      	cbnz	r4, 8008ff6 <_calloc_r+0x1c>
 8008fe2:	4611      	mov	r1, r2
 8008fe4:	9201      	str	r2, [sp, #4]
 8008fe6:	f000 f87b 	bl	80090e0 <_malloc_r>
 8008fea:	9a01      	ldr	r2, [sp, #4]
 8008fec:	4605      	mov	r5, r0
 8008fee:	b930      	cbnz	r0, 8008ffe <_calloc_r+0x24>
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	b003      	add	sp, #12
 8008ff4:	bd30      	pop	{r4, r5, pc}
 8008ff6:	220c      	movs	r2, #12
 8008ff8:	6002      	str	r2, [r0, #0]
 8008ffa:	2500      	movs	r5, #0
 8008ffc:	e7f8      	b.n	8008ff0 <_calloc_r+0x16>
 8008ffe:	4621      	mov	r1, r4
 8009000:	f7fc fb18 	bl	8005634 <memset>
 8009004:	e7f4      	b.n	8008ff0 <_calloc_r+0x16>
	...

08009008 <_free_r>:
 8009008:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800900a:	2900      	cmp	r1, #0
 800900c:	d044      	beq.n	8009098 <_free_r+0x90>
 800900e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009012:	9001      	str	r0, [sp, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	f1a1 0404 	sub.w	r4, r1, #4
 800901a:	bfb8      	it	lt
 800901c:	18e4      	addlt	r4, r4, r3
 800901e:	f001 f88b 	bl	800a138 <__malloc_lock>
 8009022:	4a1e      	ldr	r2, [pc, #120]	; (800909c <_free_r+0x94>)
 8009024:	9801      	ldr	r0, [sp, #4]
 8009026:	6813      	ldr	r3, [r2, #0]
 8009028:	b933      	cbnz	r3, 8009038 <_free_r+0x30>
 800902a:	6063      	str	r3, [r4, #4]
 800902c:	6014      	str	r4, [r2, #0]
 800902e:	b003      	add	sp, #12
 8009030:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009034:	f001 b886 	b.w	800a144 <__malloc_unlock>
 8009038:	42a3      	cmp	r3, r4
 800903a:	d908      	bls.n	800904e <_free_r+0x46>
 800903c:	6825      	ldr	r5, [r4, #0]
 800903e:	1961      	adds	r1, r4, r5
 8009040:	428b      	cmp	r3, r1
 8009042:	bf01      	itttt	eq
 8009044:	6819      	ldreq	r1, [r3, #0]
 8009046:	685b      	ldreq	r3, [r3, #4]
 8009048:	1949      	addeq	r1, r1, r5
 800904a:	6021      	streq	r1, [r4, #0]
 800904c:	e7ed      	b.n	800902a <_free_r+0x22>
 800904e:	461a      	mov	r2, r3
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	b10b      	cbz	r3, 8009058 <_free_r+0x50>
 8009054:	42a3      	cmp	r3, r4
 8009056:	d9fa      	bls.n	800904e <_free_r+0x46>
 8009058:	6811      	ldr	r1, [r2, #0]
 800905a:	1855      	adds	r5, r2, r1
 800905c:	42a5      	cmp	r5, r4
 800905e:	d10b      	bne.n	8009078 <_free_r+0x70>
 8009060:	6824      	ldr	r4, [r4, #0]
 8009062:	4421      	add	r1, r4
 8009064:	1854      	adds	r4, r2, r1
 8009066:	42a3      	cmp	r3, r4
 8009068:	6011      	str	r1, [r2, #0]
 800906a:	d1e0      	bne.n	800902e <_free_r+0x26>
 800906c:	681c      	ldr	r4, [r3, #0]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	6053      	str	r3, [r2, #4]
 8009072:	4421      	add	r1, r4
 8009074:	6011      	str	r1, [r2, #0]
 8009076:	e7da      	b.n	800902e <_free_r+0x26>
 8009078:	d902      	bls.n	8009080 <_free_r+0x78>
 800907a:	230c      	movs	r3, #12
 800907c:	6003      	str	r3, [r0, #0]
 800907e:	e7d6      	b.n	800902e <_free_r+0x26>
 8009080:	6825      	ldr	r5, [r4, #0]
 8009082:	1961      	adds	r1, r4, r5
 8009084:	428b      	cmp	r3, r1
 8009086:	bf04      	itt	eq
 8009088:	6819      	ldreq	r1, [r3, #0]
 800908a:	685b      	ldreq	r3, [r3, #4]
 800908c:	6063      	str	r3, [r4, #4]
 800908e:	bf04      	itt	eq
 8009090:	1949      	addeq	r1, r1, r5
 8009092:	6021      	streq	r1, [r4, #0]
 8009094:	6054      	str	r4, [r2, #4]
 8009096:	e7ca      	b.n	800902e <_free_r+0x26>
 8009098:	b003      	add	sp, #12
 800909a:	bd30      	pop	{r4, r5, pc}
 800909c:	20000d38 	.word	0x20000d38

080090a0 <sbrk_aligned>:
 80090a0:	b570      	push	{r4, r5, r6, lr}
 80090a2:	4e0e      	ldr	r6, [pc, #56]	; (80090dc <sbrk_aligned+0x3c>)
 80090a4:	460c      	mov	r4, r1
 80090a6:	6831      	ldr	r1, [r6, #0]
 80090a8:	4605      	mov	r5, r0
 80090aa:	b911      	cbnz	r1, 80090b2 <sbrk_aligned+0x12>
 80090ac:	f000 fd28 	bl	8009b00 <_sbrk_r>
 80090b0:	6030      	str	r0, [r6, #0]
 80090b2:	4621      	mov	r1, r4
 80090b4:	4628      	mov	r0, r5
 80090b6:	f000 fd23 	bl	8009b00 <_sbrk_r>
 80090ba:	1c43      	adds	r3, r0, #1
 80090bc:	d00a      	beq.n	80090d4 <sbrk_aligned+0x34>
 80090be:	1cc4      	adds	r4, r0, #3
 80090c0:	f024 0403 	bic.w	r4, r4, #3
 80090c4:	42a0      	cmp	r0, r4
 80090c6:	d007      	beq.n	80090d8 <sbrk_aligned+0x38>
 80090c8:	1a21      	subs	r1, r4, r0
 80090ca:	4628      	mov	r0, r5
 80090cc:	f000 fd18 	bl	8009b00 <_sbrk_r>
 80090d0:	3001      	adds	r0, #1
 80090d2:	d101      	bne.n	80090d8 <sbrk_aligned+0x38>
 80090d4:	f04f 34ff 	mov.w	r4, #4294967295
 80090d8:	4620      	mov	r0, r4
 80090da:	bd70      	pop	{r4, r5, r6, pc}
 80090dc:	20000d3c 	.word	0x20000d3c

080090e0 <_malloc_r>:
 80090e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090e4:	1ccd      	adds	r5, r1, #3
 80090e6:	f025 0503 	bic.w	r5, r5, #3
 80090ea:	3508      	adds	r5, #8
 80090ec:	2d0c      	cmp	r5, #12
 80090ee:	bf38      	it	cc
 80090f0:	250c      	movcc	r5, #12
 80090f2:	2d00      	cmp	r5, #0
 80090f4:	4607      	mov	r7, r0
 80090f6:	db01      	blt.n	80090fc <_malloc_r+0x1c>
 80090f8:	42a9      	cmp	r1, r5
 80090fa:	d905      	bls.n	8009108 <_malloc_r+0x28>
 80090fc:	230c      	movs	r3, #12
 80090fe:	603b      	str	r3, [r7, #0]
 8009100:	2600      	movs	r6, #0
 8009102:	4630      	mov	r0, r6
 8009104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009108:	4e2e      	ldr	r6, [pc, #184]	; (80091c4 <_malloc_r+0xe4>)
 800910a:	f001 f815 	bl	800a138 <__malloc_lock>
 800910e:	6833      	ldr	r3, [r6, #0]
 8009110:	461c      	mov	r4, r3
 8009112:	bb34      	cbnz	r4, 8009162 <_malloc_r+0x82>
 8009114:	4629      	mov	r1, r5
 8009116:	4638      	mov	r0, r7
 8009118:	f7ff ffc2 	bl	80090a0 <sbrk_aligned>
 800911c:	1c43      	adds	r3, r0, #1
 800911e:	4604      	mov	r4, r0
 8009120:	d14d      	bne.n	80091be <_malloc_r+0xde>
 8009122:	6834      	ldr	r4, [r6, #0]
 8009124:	4626      	mov	r6, r4
 8009126:	2e00      	cmp	r6, #0
 8009128:	d140      	bne.n	80091ac <_malloc_r+0xcc>
 800912a:	6823      	ldr	r3, [r4, #0]
 800912c:	4631      	mov	r1, r6
 800912e:	4638      	mov	r0, r7
 8009130:	eb04 0803 	add.w	r8, r4, r3
 8009134:	f000 fce4 	bl	8009b00 <_sbrk_r>
 8009138:	4580      	cmp	r8, r0
 800913a:	d13a      	bne.n	80091b2 <_malloc_r+0xd2>
 800913c:	6821      	ldr	r1, [r4, #0]
 800913e:	3503      	adds	r5, #3
 8009140:	1a6d      	subs	r5, r5, r1
 8009142:	f025 0503 	bic.w	r5, r5, #3
 8009146:	3508      	adds	r5, #8
 8009148:	2d0c      	cmp	r5, #12
 800914a:	bf38      	it	cc
 800914c:	250c      	movcc	r5, #12
 800914e:	4629      	mov	r1, r5
 8009150:	4638      	mov	r0, r7
 8009152:	f7ff ffa5 	bl	80090a0 <sbrk_aligned>
 8009156:	3001      	adds	r0, #1
 8009158:	d02b      	beq.n	80091b2 <_malloc_r+0xd2>
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	442b      	add	r3, r5
 800915e:	6023      	str	r3, [r4, #0]
 8009160:	e00e      	b.n	8009180 <_malloc_r+0xa0>
 8009162:	6822      	ldr	r2, [r4, #0]
 8009164:	1b52      	subs	r2, r2, r5
 8009166:	d41e      	bmi.n	80091a6 <_malloc_r+0xc6>
 8009168:	2a0b      	cmp	r2, #11
 800916a:	d916      	bls.n	800919a <_malloc_r+0xba>
 800916c:	1961      	adds	r1, r4, r5
 800916e:	42a3      	cmp	r3, r4
 8009170:	6025      	str	r5, [r4, #0]
 8009172:	bf18      	it	ne
 8009174:	6059      	strne	r1, [r3, #4]
 8009176:	6863      	ldr	r3, [r4, #4]
 8009178:	bf08      	it	eq
 800917a:	6031      	streq	r1, [r6, #0]
 800917c:	5162      	str	r2, [r4, r5]
 800917e:	604b      	str	r3, [r1, #4]
 8009180:	4638      	mov	r0, r7
 8009182:	f104 060b 	add.w	r6, r4, #11
 8009186:	f000 ffdd 	bl	800a144 <__malloc_unlock>
 800918a:	f026 0607 	bic.w	r6, r6, #7
 800918e:	1d23      	adds	r3, r4, #4
 8009190:	1af2      	subs	r2, r6, r3
 8009192:	d0b6      	beq.n	8009102 <_malloc_r+0x22>
 8009194:	1b9b      	subs	r3, r3, r6
 8009196:	50a3      	str	r3, [r4, r2]
 8009198:	e7b3      	b.n	8009102 <_malloc_r+0x22>
 800919a:	6862      	ldr	r2, [r4, #4]
 800919c:	42a3      	cmp	r3, r4
 800919e:	bf0c      	ite	eq
 80091a0:	6032      	streq	r2, [r6, #0]
 80091a2:	605a      	strne	r2, [r3, #4]
 80091a4:	e7ec      	b.n	8009180 <_malloc_r+0xa0>
 80091a6:	4623      	mov	r3, r4
 80091a8:	6864      	ldr	r4, [r4, #4]
 80091aa:	e7b2      	b.n	8009112 <_malloc_r+0x32>
 80091ac:	4634      	mov	r4, r6
 80091ae:	6876      	ldr	r6, [r6, #4]
 80091b0:	e7b9      	b.n	8009126 <_malloc_r+0x46>
 80091b2:	230c      	movs	r3, #12
 80091b4:	603b      	str	r3, [r7, #0]
 80091b6:	4638      	mov	r0, r7
 80091b8:	f000 ffc4 	bl	800a144 <__malloc_unlock>
 80091bc:	e7a1      	b.n	8009102 <_malloc_r+0x22>
 80091be:	6025      	str	r5, [r4, #0]
 80091c0:	e7de      	b.n	8009180 <_malloc_r+0xa0>
 80091c2:	bf00      	nop
 80091c4:	20000d38 	.word	0x20000d38

080091c8 <__ssputs_r>:
 80091c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091cc:	688e      	ldr	r6, [r1, #8]
 80091ce:	429e      	cmp	r6, r3
 80091d0:	4682      	mov	sl, r0
 80091d2:	460c      	mov	r4, r1
 80091d4:	4690      	mov	r8, r2
 80091d6:	461f      	mov	r7, r3
 80091d8:	d838      	bhi.n	800924c <__ssputs_r+0x84>
 80091da:	898a      	ldrh	r2, [r1, #12]
 80091dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80091e0:	d032      	beq.n	8009248 <__ssputs_r+0x80>
 80091e2:	6825      	ldr	r5, [r4, #0]
 80091e4:	6909      	ldr	r1, [r1, #16]
 80091e6:	eba5 0901 	sub.w	r9, r5, r1
 80091ea:	6965      	ldr	r5, [r4, #20]
 80091ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091f4:	3301      	adds	r3, #1
 80091f6:	444b      	add	r3, r9
 80091f8:	106d      	asrs	r5, r5, #1
 80091fa:	429d      	cmp	r5, r3
 80091fc:	bf38      	it	cc
 80091fe:	461d      	movcc	r5, r3
 8009200:	0553      	lsls	r3, r2, #21
 8009202:	d531      	bpl.n	8009268 <__ssputs_r+0xa0>
 8009204:	4629      	mov	r1, r5
 8009206:	f7ff ff6b 	bl	80090e0 <_malloc_r>
 800920a:	4606      	mov	r6, r0
 800920c:	b950      	cbnz	r0, 8009224 <__ssputs_r+0x5c>
 800920e:	230c      	movs	r3, #12
 8009210:	f8ca 3000 	str.w	r3, [sl]
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800921a:	81a3      	strh	r3, [r4, #12]
 800921c:	f04f 30ff 	mov.w	r0, #4294967295
 8009220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009224:	6921      	ldr	r1, [r4, #16]
 8009226:	464a      	mov	r2, r9
 8009228:	f7ff fa08 	bl	800863c <memcpy>
 800922c:	89a3      	ldrh	r3, [r4, #12]
 800922e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009236:	81a3      	strh	r3, [r4, #12]
 8009238:	6126      	str	r6, [r4, #16]
 800923a:	6165      	str	r5, [r4, #20]
 800923c:	444e      	add	r6, r9
 800923e:	eba5 0509 	sub.w	r5, r5, r9
 8009242:	6026      	str	r6, [r4, #0]
 8009244:	60a5      	str	r5, [r4, #8]
 8009246:	463e      	mov	r6, r7
 8009248:	42be      	cmp	r6, r7
 800924a:	d900      	bls.n	800924e <__ssputs_r+0x86>
 800924c:	463e      	mov	r6, r7
 800924e:	6820      	ldr	r0, [r4, #0]
 8009250:	4632      	mov	r2, r6
 8009252:	4641      	mov	r1, r8
 8009254:	f000 ff56 	bl	800a104 <memmove>
 8009258:	68a3      	ldr	r3, [r4, #8]
 800925a:	1b9b      	subs	r3, r3, r6
 800925c:	60a3      	str	r3, [r4, #8]
 800925e:	6823      	ldr	r3, [r4, #0]
 8009260:	4433      	add	r3, r6
 8009262:	6023      	str	r3, [r4, #0]
 8009264:	2000      	movs	r0, #0
 8009266:	e7db      	b.n	8009220 <__ssputs_r+0x58>
 8009268:	462a      	mov	r2, r5
 800926a:	f000 ff71 	bl	800a150 <_realloc_r>
 800926e:	4606      	mov	r6, r0
 8009270:	2800      	cmp	r0, #0
 8009272:	d1e1      	bne.n	8009238 <__ssputs_r+0x70>
 8009274:	6921      	ldr	r1, [r4, #16]
 8009276:	4650      	mov	r0, sl
 8009278:	f7ff fec6 	bl	8009008 <_free_r>
 800927c:	e7c7      	b.n	800920e <__ssputs_r+0x46>
	...

08009280 <_svfiprintf_r>:
 8009280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009284:	4698      	mov	r8, r3
 8009286:	898b      	ldrh	r3, [r1, #12]
 8009288:	061b      	lsls	r3, r3, #24
 800928a:	b09d      	sub	sp, #116	; 0x74
 800928c:	4607      	mov	r7, r0
 800928e:	460d      	mov	r5, r1
 8009290:	4614      	mov	r4, r2
 8009292:	d50e      	bpl.n	80092b2 <_svfiprintf_r+0x32>
 8009294:	690b      	ldr	r3, [r1, #16]
 8009296:	b963      	cbnz	r3, 80092b2 <_svfiprintf_r+0x32>
 8009298:	2140      	movs	r1, #64	; 0x40
 800929a:	f7ff ff21 	bl	80090e0 <_malloc_r>
 800929e:	6028      	str	r0, [r5, #0]
 80092a0:	6128      	str	r0, [r5, #16]
 80092a2:	b920      	cbnz	r0, 80092ae <_svfiprintf_r+0x2e>
 80092a4:	230c      	movs	r3, #12
 80092a6:	603b      	str	r3, [r7, #0]
 80092a8:	f04f 30ff 	mov.w	r0, #4294967295
 80092ac:	e0d1      	b.n	8009452 <_svfiprintf_r+0x1d2>
 80092ae:	2340      	movs	r3, #64	; 0x40
 80092b0:	616b      	str	r3, [r5, #20]
 80092b2:	2300      	movs	r3, #0
 80092b4:	9309      	str	r3, [sp, #36]	; 0x24
 80092b6:	2320      	movs	r3, #32
 80092b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80092c0:	2330      	movs	r3, #48	; 0x30
 80092c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800946c <_svfiprintf_r+0x1ec>
 80092c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092ca:	f04f 0901 	mov.w	r9, #1
 80092ce:	4623      	mov	r3, r4
 80092d0:	469a      	mov	sl, r3
 80092d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092d6:	b10a      	cbz	r2, 80092dc <_svfiprintf_r+0x5c>
 80092d8:	2a25      	cmp	r2, #37	; 0x25
 80092da:	d1f9      	bne.n	80092d0 <_svfiprintf_r+0x50>
 80092dc:	ebba 0b04 	subs.w	fp, sl, r4
 80092e0:	d00b      	beq.n	80092fa <_svfiprintf_r+0x7a>
 80092e2:	465b      	mov	r3, fp
 80092e4:	4622      	mov	r2, r4
 80092e6:	4629      	mov	r1, r5
 80092e8:	4638      	mov	r0, r7
 80092ea:	f7ff ff6d 	bl	80091c8 <__ssputs_r>
 80092ee:	3001      	adds	r0, #1
 80092f0:	f000 80aa 	beq.w	8009448 <_svfiprintf_r+0x1c8>
 80092f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092f6:	445a      	add	r2, fp
 80092f8:	9209      	str	r2, [sp, #36]	; 0x24
 80092fa:	f89a 3000 	ldrb.w	r3, [sl]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f000 80a2 	beq.w	8009448 <_svfiprintf_r+0x1c8>
 8009304:	2300      	movs	r3, #0
 8009306:	f04f 32ff 	mov.w	r2, #4294967295
 800930a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800930e:	f10a 0a01 	add.w	sl, sl, #1
 8009312:	9304      	str	r3, [sp, #16]
 8009314:	9307      	str	r3, [sp, #28]
 8009316:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800931a:	931a      	str	r3, [sp, #104]	; 0x68
 800931c:	4654      	mov	r4, sl
 800931e:	2205      	movs	r2, #5
 8009320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009324:	4851      	ldr	r0, [pc, #324]	; (800946c <_svfiprintf_r+0x1ec>)
 8009326:	f7f6 ff73 	bl	8000210 <memchr>
 800932a:	9a04      	ldr	r2, [sp, #16]
 800932c:	b9d8      	cbnz	r0, 8009366 <_svfiprintf_r+0xe6>
 800932e:	06d0      	lsls	r0, r2, #27
 8009330:	bf44      	itt	mi
 8009332:	2320      	movmi	r3, #32
 8009334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009338:	0711      	lsls	r1, r2, #28
 800933a:	bf44      	itt	mi
 800933c:	232b      	movmi	r3, #43	; 0x2b
 800933e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009342:	f89a 3000 	ldrb.w	r3, [sl]
 8009346:	2b2a      	cmp	r3, #42	; 0x2a
 8009348:	d015      	beq.n	8009376 <_svfiprintf_r+0xf6>
 800934a:	9a07      	ldr	r2, [sp, #28]
 800934c:	4654      	mov	r4, sl
 800934e:	2000      	movs	r0, #0
 8009350:	f04f 0c0a 	mov.w	ip, #10
 8009354:	4621      	mov	r1, r4
 8009356:	f811 3b01 	ldrb.w	r3, [r1], #1
 800935a:	3b30      	subs	r3, #48	; 0x30
 800935c:	2b09      	cmp	r3, #9
 800935e:	d94e      	bls.n	80093fe <_svfiprintf_r+0x17e>
 8009360:	b1b0      	cbz	r0, 8009390 <_svfiprintf_r+0x110>
 8009362:	9207      	str	r2, [sp, #28]
 8009364:	e014      	b.n	8009390 <_svfiprintf_r+0x110>
 8009366:	eba0 0308 	sub.w	r3, r0, r8
 800936a:	fa09 f303 	lsl.w	r3, r9, r3
 800936e:	4313      	orrs	r3, r2
 8009370:	9304      	str	r3, [sp, #16]
 8009372:	46a2      	mov	sl, r4
 8009374:	e7d2      	b.n	800931c <_svfiprintf_r+0x9c>
 8009376:	9b03      	ldr	r3, [sp, #12]
 8009378:	1d19      	adds	r1, r3, #4
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	9103      	str	r1, [sp, #12]
 800937e:	2b00      	cmp	r3, #0
 8009380:	bfbb      	ittet	lt
 8009382:	425b      	neglt	r3, r3
 8009384:	f042 0202 	orrlt.w	r2, r2, #2
 8009388:	9307      	strge	r3, [sp, #28]
 800938a:	9307      	strlt	r3, [sp, #28]
 800938c:	bfb8      	it	lt
 800938e:	9204      	strlt	r2, [sp, #16]
 8009390:	7823      	ldrb	r3, [r4, #0]
 8009392:	2b2e      	cmp	r3, #46	; 0x2e
 8009394:	d10c      	bne.n	80093b0 <_svfiprintf_r+0x130>
 8009396:	7863      	ldrb	r3, [r4, #1]
 8009398:	2b2a      	cmp	r3, #42	; 0x2a
 800939a:	d135      	bne.n	8009408 <_svfiprintf_r+0x188>
 800939c:	9b03      	ldr	r3, [sp, #12]
 800939e:	1d1a      	adds	r2, r3, #4
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	9203      	str	r2, [sp, #12]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	bfb8      	it	lt
 80093a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80093ac:	3402      	adds	r4, #2
 80093ae:	9305      	str	r3, [sp, #20]
 80093b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800947c <_svfiprintf_r+0x1fc>
 80093b4:	7821      	ldrb	r1, [r4, #0]
 80093b6:	2203      	movs	r2, #3
 80093b8:	4650      	mov	r0, sl
 80093ba:	f7f6 ff29 	bl	8000210 <memchr>
 80093be:	b140      	cbz	r0, 80093d2 <_svfiprintf_r+0x152>
 80093c0:	2340      	movs	r3, #64	; 0x40
 80093c2:	eba0 000a 	sub.w	r0, r0, sl
 80093c6:	fa03 f000 	lsl.w	r0, r3, r0
 80093ca:	9b04      	ldr	r3, [sp, #16]
 80093cc:	4303      	orrs	r3, r0
 80093ce:	3401      	adds	r4, #1
 80093d0:	9304      	str	r3, [sp, #16]
 80093d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093d6:	4826      	ldr	r0, [pc, #152]	; (8009470 <_svfiprintf_r+0x1f0>)
 80093d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093dc:	2206      	movs	r2, #6
 80093de:	f7f6 ff17 	bl	8000210 <memchr>
 80093e2:	2800      	cmp	r0, #0
 80093e4:	d038      	beq.n	8009458 <_svfiprintf_r+0x1d8>
 80093e6:	4b23      	ldr	r3, [pc, #140]	; (8009474 <_svfiprintf_r+0x1f4>)
 80093e8:	bb1b      	cbnz	r3, 8009432 <_svfiprintf_r+0x1b2>
 80093ea:	9b03      	ldr	r3, [sp, #12]
 80093ec:	3307      	adds	r3, #7
 80093ee:	f023 0307 	bic.w	r3, r3, #7
 80093f2:	3308      	adds	r3, #8
 80093f4:	9303      	str	r3, [sp, #12]
 80093f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093f8:	4433      	add	r3, r6
 80093fa:	9309      	str	r3, [sp, #36]	; 0x24
 80093fc:	e767      	b.n	80092ce <_svfiprintf_r+0x4e>
 80093fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009402:	460c      	mov	r4, r1
 8009404:	2001      	movs	r0, #1
 8009406:	e7a5      	b.n	8009354 <_svfiprintf_r+0xd4>
 8009408:	2300      	movs	r3, #0
 800940a:	3401      	adds	r4, #1
 800940c:	9305      	str	r3, [sp, #20]
 800940e:	4619      	mov	r1, r3
 8009410:	f04f 0c0a 	mov.w	ip, #10
 8009414:	4620      	mov	r0, r4
 8009416:	f810 2b01 	ldrb.w	r2, [r0], #1
 800941a:	3a30      	subs	r2, #48	; 0x30
 800941c:	2a09      	cmp	r2, #9
 800941e:	d903      	bls.n	8009428 <_svfiprintf_r+0x1a8>
 8009420:	2b00      	cmp	r3, #0
 8009422:	d0c5      	beq.n	80093b0 <_svfiprintf_r+0x130>
 8009424:	9105      	str	r1, [sp, #20]
 8009426:	e7c3      	b.n	80093b0 <_svfiprintf_r+0x130>
 8009428:	fb0c 2101 	mla	r1, ip, r1, r2
 800942c:	4604      	mov	r4, r0
 800942e:	2301      	movs	r3, #1
 8009430:	e7f0      	b.n	8009414 <_svfiprintf_r+0x194>
 8009432:	ab03      	add	r3, sp, #12
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	462a      	mov	r2, r5
 8009438:	4b0f      	ldr	r3, [pc, #60]	; (8009478 <_svfiprintf_r+0x1f8>)
 800943a:	a904      	add	r1, sp, #16
 800943c:	4638      	mov	r0, r7
 800943e:	f7fc f9a1 	bl	8005784 <_printf_float>
 8009442:	1c42      	adds	r2, r0, #1
 8009444:	4606      	mov	r6, r0
 8009446:	d1d6      	bne.n	80093f6 <_svfiprintf_r+0x176>
 8009448:	89ab      	ldrh	r3, [r5, #12]
 800944a:	065b      	lsls	r3, r3, #25
 800944c:	f53f af2c 	bmi.w	80092a8 <_svfiprintf_r+0x28>
 8009450:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009452:	b01d      	add	sp, #116	; 0x74
 8009454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009458:	ab03      	add	r3, sp, #12
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	462a      	mov	r2, r5
 800945e:	4b06      	ldr	r3, [pc, #24]	; (8009478 <_svfiprintf_r+0x1f8>)
 8009460:	a904      	add	r1, sp, #16
 8009462:	4638      	mov	r0, r7
 8009464:	f7fc fc32 	bl	8005ccc <_printf_i>
 8009468:	e7eb      	b.n	8009442 <_svfiprintf_r+0x1c2>
 800946a:	bf00      	nop
 800946c:	0800c95c 	.word	0x0800c95c
 8009470:	0800c966 	.word	0x0800c966
 8009474:	08005785 	.word	0x08005785
 8009478:	080091c9 	.word	0x080091c9
 800947c:	0800c962 	.word	0x0800c962

08009480 <_sungetc_r>:
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	1c4b      	adds	r3, r1, #1
 8009484:	4614      	mov	r4, r2
 8009486:	d103      	bne.n	8009490 <_sungetc_r+0x10>
 8009488:	f04f 35ff 	mov.w	r5, #4294967295
 800948c:	4628      	mov	r0, r5
 800948e:	bd38      	pop	{r3, r4, r5, pc}
 8009490:	8993      	ldrh	r3, [r2, #12]
 8009492:	f023 0320 	bic.w	r3, r3, #32
 8009496:	8193      	strh	r3, [r2, #12]
 8009498:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800949a:	6852      	ldr	r2, [r2, #4]
 800949c:	b2cd      	uxtb	r5, r1
 800949e:	b18b      	cbz	r3, 80094c4 <_sungetc_r+0x44>
 80094a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80094a2:	4293      	cmp	r3, r2
 80094a4:	dd08      	ble.n	80094b8 <_sungetc_r+0x38>
 80094a6:	6823      	ldr	r3, [r4, #0]
 80094a8:	1e5a      	subs	r2, r3, #1
 80094aa:	6022      	str	r2, [r4, #0]
 80094ac:	f803 5c01 	strb.w	r5, [r3, #-1]
 80094b0:	6863      	ldr	r3, [r4, #4]
 80094b2:	3301      	adds	r3, #1
 80094b4:	6063      	str	r3, [r4, #4]
 80094b6:	e7e9      	b.n	800948c <_sungetc_r+0xc>
 80094b8:	4621      	mov	r1, r4
 80094ba:	f000 fbf1 	bl	8009ca0 <__submore>
 80094be:	2800      	cmp	r0, #0
 80094c0:	d0f1      	beq.n	80094a6 <_sungetc_r+0x26>
 80094c2:	e7e1      	b.n	8009488 <_sungetc_r+0x8>
 80094c4:	6921      	ldr	r1, [r4, #16]
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	b151      	cbz	r1, 80094e0 <_sungetc_r+0x60>
 80094ca:	4299      	cmp	r1, r3
 80094cc:	d208      	bcs.n	80094e0 <_sungetc_r+0x60>
 80094ce:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80094d2:	42a9      	cmp	r1, r5
 80094d4:	d104      	bne.n	80094e0 <_sungetc_r+0x60>
 80094d6:	3b01      	subs	r3, #1
 80094d8:	3201      	adds	r2, #1
 80094da:	6023      	str	r3, [r4, #0]
 80094dc:	6062      	str	r2, [r4, #4]
 80094de:	e7d5      	b.n	800948c <_sungetc_r+0xc>
 80094e0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80094e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094e8:	6363      	str	r3, [r4, #52]	; 0x34
 80094ea:	2303      	movs	r3, #3
 80094ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80094ee:	4623      	mov	r3, r4
 80094f0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80094f4:	6023      	str	r3, [r4, #0]
 80094f6:	2301      	movs	r3, #1
 80094f8:	e7dc      	b.n	80094b4 <_sungetc_r+0x34>

080094fa <__ssrefill_r>:
 80094fa:	b510      	push	{r4, lr}
 80094fc:	460c      	mov	r4, r1
 80094fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009500:	b169      	cbz	r1, 800951e <__ssrefill_r+0x24>
 8009502:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009506:	4299      	cmp	r1, r3
 8009508:	d001      	beq.n	800950e <__ssrefill_r+0x14>
 800950a:	f7ff fd7d 	bl	8009008 <_free_r>
 800950e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009510:	6063      	str	r3, [r4, #4]
 8009512:	2000      	movs	r0, #0
 8009514:	6360      	str	r0, [r4, #52]	; 0x34
 8009516:	b113      	cbz	r3, 800951e <__ssrefill_r+0x24>
 8009518:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800951a:	6023      	str	r3, [r4, #0]
 800951c:	bd10      	pop	{r4, pc}
 800951e:	6923      	ldr	r3, [r4, #16]
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	2300      	movs	r3, #0
 8009524:	6063      	str	r3, [r4, #4]
 8009526:	89a3      	ldrh	r3, [r4, #12]
 8009528:	f043 0320 	orr.w	r3, r3, #32
 800952c:	81a3      	strh	r3, [r4, #12]
 800952e:	f04f 30ff 	mov.w	r0, #4294967295
 8009532:	e7f3      	b.n	800951c <__ssrefill_r+0x22>

08009534 <__ssvfiscanf_r>:
 8009534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009538:	460c      	mov	r4, r1
 800953a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800953e:	2100      	movs	r1, #0
 8009540:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009544:	49a6      	ldr	r1, [pc, #664]	; (80097e0 <__ssvfiscanf_r+0x2ac>)
 8009546:	91a0      	str	r1, [sp, #640]	; 0x280
 8009548:	f10d 0804 	add.w	r8, sp, #4
 800954c:	49a5      	ldr	r1, [pc, #660]	; (80097e4 <__ssvfiscanf_r+0x2b0>)
 800954e:	4fa6      	ldr	r7, [pc, #664]	; (80097e8 <__ssvfiscanf_r+0x2b4>)
 8009550:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80097ec <__ssvfiscanf_r+0x2b8>
 8009554:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009558:	4606      	mov	r6, r0
 800955a:	91a1      	str	r1, [sp, #644]	; 0x284
 800955c:	9300      	str	r3, [sp, #0]
 800955e:	7813      	ldrb	r3, [r2, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	f000 815a 	beq.w	800981a <__ssvfiscanf_r+0x2e6>
 8009566:	5dd9      	ldrb	r1, [r3, r7]
 8009568:	f011 0108 	ands.w	r1, r1, #8
 800956c:	f102 0501 	add.w	r5, r2, #1
 8009570:	d019      	beq.n	80095a6 <__ssvfiscanf_r+0x72>
 8009572:	6863      	ldr	r3, [r4, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	dd0f      	ble.n	8009598 <__ssvfiscanf_r+0x64>
 8009578:	6823      	ldr	r3, [r4, #0]
 800957a:	781a      	ldrb	r2, [r3, #0]
 800957c:	5cba      	ldrb	r2, [r7, r2]
 800957e:	0712      	lsls	r2, r2, #28
 8009580:	d401      	bmi.n	8009586 <__ssvfiscanf_r+0x52>
 8009582:	462a      	mov	r2, r5
 8009584:	e7eb      	b.n	800955e <__ssvfiscanf_r+0x2a>
 8009586:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009588:	3201      	adds	r2, #1
 800958a:	9245      	str	r2, [sp, #276]	; 0x114
 800958c:	6862      	ldr	r2, [r4, #4]
 800958e:	3301      	adds	r3, #1
 8009590:	3a01      	subs	r2, #1
 8009592:	6062      	str	r2, [r4, #4]
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	e7ec      	b.n	8009572 <__ssvfiscanf_r+0x3e>
 8009598:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800959a:	4621      	mov	r1, r4
 800959c:	4630      	mov	r0, r6
 800959e:	4798      	blx	r3
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d0e9      	beq.n	8009578 <__ssvfiscanf_r+0x44>
 80095a4:	e7ed      	b.n	8009582 <__ssvfiscanf_r+0x4e>
 80095a6:	2b25      	cmp	r3, #37	; 0x25
 80095a8:	d012      	beq.n	80095d0 <__ssvfiscanf_r+0x9c>
 80095aa:	469a      	mov	sl, r3
 80095ac:	6863      	ldr	r3, [r4, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f340 8091 	ble.w	80096d6 <__ssvfiscanf_r+0x1a2>
 80095b4:	6822      	ldr	r2, [r4, #0]
 80095b6:	7813      	ldrb	r3, [r2, #0]
 80095b8:	4553      	cmp	r3, sl
 80095ba:	f040 812e 	bne.w	800981a <__ssvfiscanf_r+0x2e6>
 80095be:	6863      	ldr	r3, [r4, #4]
 80095c0:	3b01      	subs	r3, #1
 80095c2:	6063      	str	r3, [r4, #4]
 80095c4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80095c6:	3201      	adds	r2, #1
 80095c8:	3301      	adds	r3, #1
 80095ca:	6022      	str	r2, [r4, #0]
 80095cc:	9345      	str	r3, [sp, #276]	; 0x114
 80095ce:	e7d8      	b.n	8009582 <__ssvfiscanf_r+0x4e>
 80095d0:	9141      	str	r1, [sp, #260]	; 0x104
 80095d2:	9143      	str	r1, [sp, #268]	; 0x10c
 80095d4:	7853      	ldrb	r3, [r2, #1]
 80095d6:	2b2a      	cmp	r3, #42	; 0x2a
 80095d8:	bf02      	ittt	eq
 80095da:	2310      	moveq	r3, #16
 80095dc:	1c95      	addeq	r5, r2, #2
 80095de:	9341      	streq	r3, [sp, #260]	; 0x104
 80095e0:	220a      	movs	r2, #10
 80095e2:	46aa      	mov	sl, r5
 80095e4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80095e8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80095ec:	2b09      	cmp	r3, #9
 80095ee:	d91d      	bls.n	800962c <__ssvfiscanf_r+0xf8>
 80095f0:	487e      	ldr	r0, [pc, #504]	; (80097ec <__ssvfiscanf_r+0x2b8>)
 80095f2:	2203      	movs	r2, #3
 80095f4:	f7f6 fe0c 	bl	8000210 <memchr>
 80095f8:	b140      	cbz	r0, 800960c <__ssvfiscanf_r+0xd8>
 80095fa:	2301      	movs	r3, #1
 80095fc:	eba0 0009 	sub.w	r0, r0, r9
 8009600:	fa03 f000 	lsl.w	r0, r3, r0
 8009604:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009606:	4318      	orrs	r0, r3
 8009608:	9041      	str	r0, [sp, #260]	; 0x104
 800960a:	4655      	mov	r5, sl
 800960c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009610:	2b78      	cmp	r3, #120	; 0x78
 8009612:	d806      	bhi.n	8009622 <__ssvfiscanf_r+0xee>
 8009614:	2b57      	cmp	r3, #87	; 0x57
 8009616:	d810      	bhi.n	800963a <__ssvfiscanf_r+0x106>
 8009618:	2b25      	cmp	r3, #37	; 0x25
 800961a:	d0c6      	beq.n	80095aa <__ssvfiscanf_r+0x76>
 800961c:	d856      	bhi.n	80096cc <__ssvfiscanf_r+0x198>
 800961e:	2b00      	cmp	r3, #0
 8009620:	d064      	beq.n	80096ec <__ssvfiscanf_r+0x1b8>
 8009622:	2303      	movs	r3, #3
 8009624:	9347      	str	r3, [sp, #284]	; 0x11c
 8009626:	230a      	movs	r3, #10
 8009628:	9342      	str	r3, [sp, #264]	; 0x108
 800962a:	e071      	b.n	8009710 <__ssvfiscanf_r+0x1dc>
 800962c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800962e:	fb02 1103 	mla	r1, r2, r3, r1
 8009632:	3930      	subs	r1, #48	; 0x30
 8009634:	9143      	str	r1, [sp, #268]	; 0x10c
 8009636:	4655      	mov	r5, sl
 8009638:	e7d3      	b.n	80095e2 <__ssvfiscanf_r+0xae>
 800963a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800963e:	2a20      	cmp	r2, #32
 8009640:	d8ef      	bhi.n	8009622 <__ssvfiscanf_r+0xee>
 8009642:	a101      	add	r1, pc, #4	; (adr r1, 8009648 <__ssvfiscanf_r+0x114>)
 8009644:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009648:	080096fb 	.word	0x080096fb
 800964c:	08009623 	.word	0x08009623
 8009650:	08009623 	.word	0x08009623
 8009654:	08009759 	.word	0x08009759
 8009658:	08009623 	.word	0x08009623
 800965c:	08009623 	.word	0x08009623
 8009660:	08009623 	.word	0x08009623
 8009664:	08009623 	.word	0x08009623
 8009668:	08009623 	.word	0x08009623
 800966c:	08009623 	.word	0x08009623
 8009670:	08009623 	.word	0x08009623
 8009674:	0800976f 	.word	0x0800976f
 8009678:	08009745 	.word	0x08009745
 800967c:	080096d3 	.word	0x080096d3
 8009680:	080096d3 	.word	0x080096d3
 8009684:	080096d3 	.word	0x080096d3
 8009688:	08009623 	.word	0x08009623
 800968c:	08009749 	.word	0x08009749
 8009690:	08009623 	.word	0x08009623
 8009694:	08009623 	.word	0x08009623
 8009698:	08009623 	.word	0x08009623
 800969c:	08009623 	.word	0x08009623
 80096a0:	0800977f 	.word	0x0800977f
 80096a4:	08009751 	.word	0x08009751
 80096a8:	080096f3 	.word	0x080096f3
 80096ac:	08009623 	.word	0x08009623
 80096b0:	08009623 	.word	0x08009623
 80096b4:	0800977b 	.word	0x0800977b
 80096b8:	08009623 	.word	0x08009623
 80096bc:	08009745 	.word	0x08009745
 80096c0:	08009623 	.word	0x08009623
 80096c4:	08009623 	.word	0x08009623
 80096c8:	080096fb 	.word	0x080096fb
 80096cc:	3b45      	subs	r3, #69	; 0x45
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d8a7      	bhi.n	8009622 <__ssvfiscanf_r+0xee>
 80096d2:	2305      	movs	r3, #5
 80096d4:	e01b      	b.n	800970e <__ssvfiscanf_r+0x1da>
 80096d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80096d8:	4621      	mov	r1, r4
 80096da:	4630      	mov	r0, r6
 80096dc:	4798      	blx	r3
 80096de:	2800      	cmp	r0, #0
 80096e0:	f43f af68 	beq.w	80095b4 <__ssvfiscanf_r+0x80>
 80096e4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80096e6:	2800      	cmp	r0, #0
 80096e8:	f040 808d 	bne.w	8009806 <__ssvfiscanf_r+0x2d2>
 80096ec:	f04f 30ff 	mov.w	r0, #4294967295
 80096f0:	e08f      	b.n	8009812 <__ssvfiscanf_r+0x2de>
 80096f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80096f4:	f042 0220 	orr.w	r2, r2, #32
 80096f8:	9241      	str	r2, [sp, #260]	; 0x104
 80096fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80096fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009700:	9241      	str	r2, [sp, #260]	; 0x104
 8009702:	2210      	movs	r2, #16
 8009704:	2b6f      	cmp	r3, #111	; 0x6f
 8009706:	9242      	str	r2, [sp, #264]	; 0x108
 8009708:	bf34      	ite	cc
 800970a:	2303      	movcc	r3, #3
 800970c:	2304      	movcs	r3, #4
 800970e:	9347      	str	r3, [sp, #284]	; 0x11c
 8009710:	6863      	ldr	r3, [r4, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	dd42      	ble.n	800979c <__ssvfiscanf_r+0x268>
 8009716:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009718:	0659      	lsls	r1, r3, #25
 800971a:	d404      	bmi.n	8009726 <__ssvfiscanf_r+0x1f2>
 800971c:	6823      	ldr	r3, [r4, #0]
 800971e:	781a      	ldrb	r2, [r3, #0]
 8009720:	5cba      	ldrb	r2, [r7, r2]
 8009722:	0712      	lsls	r2, r2, #28
 8009724:	d441      	bmi.n	80097aa <__ssvfiscanf_r+0x276>
 8009726:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009728:	2b02      	cmp	r3, #2
 800972a:	dc50      	bgt.n	80097ce <__ssvfiscanf_r+0x29a>
 800972c:	466b      	mov	r3, sp
 800972e:	4622      	mov	r2, r4
 8009730:	a941      	add	r1, sp, #260	; 0x104
 8009732:	4630      	mov	r0, r6
 8009734:	f000 f876 	bl	8009824 <_scanf_chars>
 8009738:	2801      	cmp	r0, #1
 800973a:	d06e      	beq.n	800981a <__ssvfiscanf_r+0x2e6>
 800973c:	2802      	cmp	r0, #2
 800973e:	f47f af20 	bne.w	8009582 <__ssvfiscanf_r+0x4e>
 8009742:	e7cf      	b.n	80096e4 <__ssvfiscanf_r+0x1b0>
 8009744:	220a      	movs	r2, #10
 8009746:	e7dd      	b.n	8009704 <__ssvfiscanf_r+0x1d0>
 8009748:	2300      	movs	r3, #0
 800974a:	9342      	str	r3, [sp, #264]	; 0x108
 800974c:	2303      	movs	r3, #3
 800974e:	e7de      	b.n	800970e <__ssvfiscanf_r+0x1da>
 8009750:	2308      	movs	r3, #8
 8009752:	9342      	str	r3, [sp, #264]	; 0x108
 8009754:	2304      	movs	r3, #4
 8009756:	e7da      	b.n	800970e <__ssvfiscanf_r+0x1da>
 8009758:	4629      	mov	r1, r5
 800975a:	4640      	mov	r0, r8
 800975c:	f000 f9e0 	bl	8009b20 <__sccl>
 8009760:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009766:	9341      	str	r3, [sp, #260]	; 0x104
 8009768:	4605      	mov	r5, r0
 800976a:	2301      	movs	r3, #1
 800976c:	e7cf      	b.n	800970e <__ssvfiscanf_r+0x1da>
 800976e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009774:	9341      	str	r3, [sp, #260]	; 0x104
 8009776:	2300      	movs	r3, #0
 8009778:	e7c9      	b.n	800970e <__ssvfiscanf_r+0x1da>
 800977a:	2302      	movs	r3, #2
 800977c:	e7c7      	b.n	800970e <__ssvfiscanf_r+0x1da>
 800977e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009780:	06c3      	lsls	r3, r0, #27
 8009782:	f53f aefe 	bmi.w	8009582 <__ssvfiscanf_r+0x4e>
 8009786:	9b00      	ldr	r3, [sp, #0]
 8009788:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800978a:	1d19      	adds	r1, r3, #4
 800978c:	9100      	str	r1, [sp, #0]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f010 0f01 	tst.w	r0, #1
 8009794:	bf14      	ite	ne
 8009796:	801a      	strhne	r2, [r3, #0]
 8009798:	601a      	streq	r2, [r3, #0]
 800979a:	e6f2      	b.n	8009582 <__ssvfiscanf_r+0x4e>
 800979c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800979e:	4621      	mov	r1, r4
 80097a0:	4630      	mov	r0, r6
 80097a2:	4798      	blx	r3
 80097a4:	2800      	cmp	r0, #0
 80097a6:	d0b6      	beq.n	8009716 <__ssvfiscanf_r+0x1e2>
 80097a8:	e79c      	b.n	80096e4 <__ssvfiscanf_r+0x1b0>
 80097aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80097ac:	3201      	adds	r2, #1
 80097ae:	9245      	str	r2, [sp, #276]	; 0x114
 80097b0:	6862      	ldr	r2, [r4, #4]
 80097b2:	3a01      	subs	r2, #1
 80097b4:	2a00      	cmp	r2, #0
 80097b6:	6062      	str	r2, [r4, #4]
 80097b8:	dd02      	ble.n	80097c0 <__ssvfiscanf_r+0x28c>
 80097ba:	3301      	adds	r3, #1
 80097bc:	6023      	str	r3, [r4, #0]
 80097be:	e7ad      	b.n	800971c <__ssvfiscanf_r+0x1e8>
 80097c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80097c2:	4621      	mov	r1, r4
 80097c4:	4630      	mov	r0, r6
 80097c6:	4798      	blx	r3
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d0a7      	beq.n	800971c <__ssvfiscanf_r+0x1e8>
 80097cc:	e78a      	b.n	80096e4 <__ssvfiscanf_r+0x1b0>
 80097ce:	2b04      	cmp	r3, #4
 80097d0:	dc0e      	bgt.n	80097f0 <__ssvfiscanf_r+0x2bc>
 80097d2:	466b      	mov	r3, sp
 80097d4:	4622      	mov	r2, r4
 80097d6:	a941      	add	r1, sp, #260	; 0x104
 80097d8:	4630      	mov	r0, r6
 80097da:	f000 f87d 	bl	80098d8 <_scanf_i>
 80097de:	e7ab      	b.n	8009738 <__ssvfiscanf_r+0x204>
 80097e0:	08009481 	.word	0x08009481
 80097e4:	080094fb 	.word	0x080094fb
 80097e8:	0800c5f9 	.word	0x0800c5f9
 80097ec:	0800c962 	.word	0x0800c962
 80097f0:	4b0b      	ldr	r3, [pc, #44]	; (8009820 <__ssvfiscanf_r+0x2ec>)
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	f43f aec5 	beq.w	8009582 <__ssvfiscanf_r+0x4e>
 80097f8:	466b      	mov	r3, sp
 80097fa:	4622      	mov	r2, r4
 80097fc:	a941      	add	r1, sp, #260	; 0x104
 80097fe:	4630      	mov	r0, r6
 8009800:	f7fc fb8a 	bl	8005f18 <_scanf_float>
 8009804:	e798      	b.n	8009738 <__ssvfiscanf_r+0x204>
 8009806:	89a3      	ldrh	r3, [r4, #12]
 8009808:	f013 0f40 	tst.w	r3, #64	; 0x40
 800980c:	bf18      	it	ne
 800980e:	f04f 30ff 	movne.w	r0, #4294967295
 8009812:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800981a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800981c:	e7f9      	b.n	8009812 <__ssvfiscanf_r+0x2de>
 800981e:	bf00      	nop
 8009820:	08005f19 	.word	0x08005f19

08009824 <_scanf_chars>:
 8009824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009828:	4615      	mov	r5, r2
 800982a:	688a      	ldr	r2, [r1, #8]
 800982c:	4680      	mov	r8, r0
 800982e:	460c      	mov	r4, r1
 8009830:	b932      	cbnz	r2, 8009840 <_scanf_chars+0x1c>
 8009832:	698a      	ldr	r2, [r1, #24]
 8009834:	2a00      	cmp	r2, #0
 8009836:	bf0c      	ite	eq
 8009838:	2201      	moveq	r2, #1
 800983a:	f04f 32ff 	movne.w	r2, #4294967295
 800983e:	608a      	str	r2, [r1, #8]
 8009840:	6822      	ldr	r2, [r4, #0]
 8009842:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80098d4 <_scanf_chars+0xb0>
 8009846:	06d1      	lsls	r1, r2, #27
 8009848:	bf5f      	itttt	pl
 800984a:	681a      	ldrpl	r2, [r3, #0]
 800984c:	1d11      	addpl	r1, r2, #4
 800984e:	6019      	strpl	r1, [r3, #0]
 8009850:	6816      	ldrpl	r6, [r2, #0]
 8009852:	2700      	movs	r7, #0
 8009854:	69a0      	ldr	r0, [r4, #24]
 8009856:	b188      	cbz	r0, 800987c <_scanf_chars+0x58>
 8009858:	2801      	cmp	r0, #1
 800985a:	d107      	bne.n	800986c <_scanf_chars+0x48>
 800985c:	682a      	ldr	r2, [r5, #0]
 800985e:	7811      	ldrb	r1, [r2, #0]
 8009860:	6962      	ldr	r2, [r4, #20]
 8009862:	5c52      	ldrb	r2, [r2, r1]
 8009864:	b952      	cbnz	r2, 800987c <_scanf_chars+0x58>
 8009866:	2f00      	cmp	r7, #0
 8009868:	d031      	beq.n	80098ce <_scanf_chars+0xaa>
 800986a:	e022      	b.n	80098b2 <_scanf_chars+0x8e>
 800986c:	2802      	cmp	r0, #2
 800986e:	d120      	bne.n	80098b2 <_scanf_chars+0x8e>
 8009870:	682b      	ldr	r3, [r5, #0]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009878:	071b      	lsls	r3, r3, #28
 800987a:	d41a      	bmi.n	80098b2 <_scanf_chars+0x8e>
 800987c:	6823      	ldr	r3, [r4, #0]
 800987e:	06da      	lsls	r2, r3, #27
 8009880:	bf5e      	ittt	pl
 8009882:	682b      	ldrpl	r3, [r5, #0]
 8009884:	781b      	ldrbpl	r3, [r3, #0]
 8009886:	f806 3b01 	strbpl.w	r3, [r6], #1
 800988a:	682a      	ldr	r2, [r5, #0]
 800988c:	686b      	ldr	r3, [r5, #4]
 800988e:	3201      	adds	r2, #1
 8009890:	602a      	str	r2, [r5, #0]
 8009892:	68a2      	ldr	r2, [r4, #8]
 8009894:	3b01      	subs	r3, #1
 8009896:	3a01      	subs	r2, #1
 8009898:	606b      	str	r3, [r5, #4]
 800989a:	3701      	adds	r7, #1
 800989c:	60a2      	str	r2, [r4, #8]
 800989e:	b142      	cbz	r2, 80098b2 <_scanf_chars+0x8e>
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	dcd7      	bgt.n	8009854 <_scanf_chars+0x30>
 80098a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80098a8:	4629      	mov	r1, r5
 80098aa:	4640      	mov	r0, r8
 80098ac:	4798      	blx	r3
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d0d0      	beq.n	8009854 <_scanf_chars+0x30>
 80098b2:	6823      	ldr	r3, [r4, #0]
 80098b4:	f013 0310 	ands.w	r3, r3, #16
 80098b8:	d105      	bne.n	80098c6 <_scanf_chars+0xa2>
 80098ba:	68e2      	ldr	r2, [r4, #12]
 80098bc:	3201      	adds	r2, #1
 80098be:	60e2      	str	r2, [r4, #12]
 80098c0:	69a2      	ldr	r2, [r4, #24]
 80098c2:	b102      	cbz	r2, 80098c6 <_scanf_chars+0xa2>
 80098c4:	7033      	strb	r3, [r6, #0]
 80098c6:	6923      	ldr	r3, [r4, #16]
 80098c8:	443b      	add	r3, r7
 80098ca:	6123      	str	r3, [r4, #16]
 80098cc:	2000      	movs	r0, #0
 80098ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098d2:	bf00      	nop
 80098d4:	0800c5f9 	.word	0x0800c5f9

080098d8 <_scanf_i>:
 80098d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098dc:	4698      	mov	r8, r3
 80098de:	4b76      	ldr	r3, [pc, #472]	; (8009ab8 <_scanf_i+0x1e0>)
 80098e0:	460c      	mov	r4, r1
 80098e2:	4682      	mov	sl, r0
 80098e4:	4616      	mov	r6, r2
 80098e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80098ea:	b087      	sub	sp, #28
 80098ec:	ab03      	add	r3, sp, #12
 80098ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80098f2:	4b72      	ldr	r3, [pc, #456]	; (8009abc <_scanf_i+0x1e4>)
 80098f4:	69a1      	ldr	r1, [r4, #24]
 80098f6:	4a72      	ldr	r2, [pc, #456]	; (8009ac0 <_scanf_i+0x1e8>)
 80098f8:	2903      	cmp	r1, #3
 80098fa:	bf18      	it	ne
 80098fc:	461a      	movne	r2, r3
 80098fe:	68a3      	ldr	r3, [r4, #8]
 8009900:	9201      	str	r2, [sp, #4]
 8009902:	1e5a      	subs	r2, r3, #1
 8009904:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009908:	bf88      	it	hi
 800990a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800990e:	4627      	mov	r7, r4
 8009910:	bf82      	ittt	hi
 8009912:	eb03 0905 	addhi.w	r9, r3, r5
 8009916:	f240 135d 	movwhi	r3, #349	; 0x15d
 800991a:	60a3      	strhi	r3, [r4, #8]
 800991c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009920:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009924:	bf98      	it	ls
 8009926:	f04f 0900 	movls.w	r9, #0
 800992a:	6023      	str	r3, [r4, #0]
 800992c:	463d      	mov	r5, r7
 800992e:	f04f 0b00 	mov.w	fp, #0
 8009932:	6831      	ldr	r1, [r6, #0]
 8009934:	ab03      	add	r3, sp, #12
 8009936:	7809      	ldrb	r1, [r1, #0]
 8009938:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800993c:	2202      	movs	r2, #2
 800993e:	f7f6 fc67 	bl	8000210 <memchr>
 8009942:	b328      	cbz	r0, 8009990 <_scanf_i+0xb8>
 8009944:	f1bb 0f01 	cmp.w	fp, #1
 8009948:	d159      	bne.n	80099fe <_scanf_i+0x126>
 800994a:	6862      	ldr	r2, [r4, #4]
 800994c:	b92a      	cbnz	r2, 800995a <_scanf_i+0x82>
 800994e:	6822      	ldr	r2, [r4, #0]
 8009950:	2308      	movs	r3, #8
 8009952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009956:	6063      	str	r3, [r4, #4]
 8009958:	6022      	str	r2, [r4, #0]
 800995a:	6822      	ldr	r2, [r4, #0]
 800995c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009960:	6022      	str	r2, [r4, #0]
 8009962:	68a2      	ldr	r2, [r4, #8]
 8009964:	1e51      	subs	r1, r2, #1
 8009966:	60a1      	str	r1, [r4, #8]
 8009968:	b192      	cbz	r2, 8009990 <_scanf_i+0xb8>
 800996a:	6832      	ldr	r2, [r6, #0]
 800996c:	1c51      	adds	r1, r2, #1
 800996e:	6031      	str	r1, [r6, #0]
 8009970:	7812      	ldrb	r2, [r2, #0]
 8009972:	f805 2b01 	strb.w	r2, [r5], #1
 8009976:	6872      	ldr	r2, [r6, #4]
 8009978:	3a01      	subs	r2, #1
 800997a:	2a00      	cmp	r2, #0
 800997c:	6072      	str	r2, [r6, #4]
 800997e:	dc07      	bgt.n	8009990 <_scanf_i+0xb8>
 8009980:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009984:	4631      	mov	r1, r6
 8009986:	4650      	mov	r0, sl
 8009988:	4790      	blx	r2
 800998a:	2800      	cmp	r0, #0
 800998c:	f040 8085 	bne.w	8009a9a <_scanf_i+0x1c2>
 8009990:	f10b 0b01 	add.w	fp, fp, #1
 8009994:	f1bb 0f03 	cmp.w	fp, #3
 8009998:	d1cb      	bne.n	8009932 <_scanf_i+0x5a>
 800999a:	6863      	ldr	r3, [r4, #4]
 800999c:	b90b      	cbnz	r3, 80099a2 <_scanf_i+0xca>
 800999e:	230a      	movs	r3, #10
 80099a0:	6063      	str	r3, [r4, #4]
 80099a2:	6863      	ldr	r3, [r4, #4]
 80099a4:	4947      	ldr	r1, [pc, #284]	; (8009ac4 <_scanf_i+0x1ec>)
 80099a6:	6960      	ldr	r0, [r4, #20]
 80099a8:	1ac9      	subs	r1, r1, r3
 80099aa:	f000 f8b9 	bl	8009b20 <__sccl>
 80099ae:	f04f 0b00 	mov.w	fp, #0
 80099b2:	68a3      	ldr	r3, [r4, #8]
 80099b4:	6822      	ldr	r2, [r4, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d03d      	beq.n	8009a36 <_scanf_i+0x15e>
 80099ba:	6831      	ldr	r1, [r6, #0]
 80099bc:	6960      	ldr	r0, [r4, #20]
 80099be:	f891 c000 	ldrb.w	ip, [r1]
 80099c2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80099c6:	2800      	cmp	r0, #0
 80099c8:	d035      	beq.n	8009a36 <_scanf_i+0x15e>
 80099ca:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80099ce:	d124      	bne.n	8009a1a <_scanf_i+0x142>
 80099d0:	0510      	lsls	r0, r2, #20
 80099d2:	d522      	bpl.n	8009a1a <_scanf_i+0x142>
 80099d4:	f10b 0b01 	add.w	fp, fp, #1
 80099d8:	f1b9 0f00 	cmp.w	r9, #0
 80099dc:	d003      	beq.n	80099e6 <_scanf_i+0x10e>
 80099de:	3301      	adds	r3, #1
 80099e0:	f109 39ff 	add.w	r9, r9, #4294967295
 80099e4:	60a3      	str	r3, [r4, #8]
 80099e6:	6873      	ldr	r3, [r6, #4]
 80099e8:	3b01      	subs	r3, #1
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	6073      	str	r3, [r6, #4]
 80099ee:	dd1b      	ble.n	8009a28 <_scanf_i+0x150>
 80099f0:	6833      	ldr	r3, [r6, #0]
 80099f2:	3301      	adds	r3, #1
 80099f4:	6033      	str	r3, [r6, #0]
 80099f6:	68a3      	ldr	r3, [r4, #8]
 80099f8:	3b01      	subs	r3, #1
 80099fa:	60a3      	str	r3, [r4, #8]
 80099fc:	e7d9      	b.n	80099b2 <_scanf_i+0xda>
 80099fe:	f1bb 0f02 	cmp.w	fp, #2
 8009a02:	d1ae      	bne.n	8009962 <_scanf_i+0x8a>
 8009a04:	6822      	ldr	r2, [r4, #0]
 8009a06:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009a0a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009a0e:	d1bf      	bne.n	8009990 <_scanf_i+0xb8>
 8009a10:	2310      	movs	r3, #16
 8009a12:	6063      	str	r3, [r4, #4]
 8009a14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a18:	e7a2      	b.n	8009960 <_scanf_i+0x88>
 8009a1a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009a1e:	6022      	str	r2, [r4, #0]
 8009a20:	780b      	ldrb	r3, [r1, #0]
 8009a22:	f805 3b01 	strb.w	r3, [r5], #1
 8009a26:	e7de      	b.n	80099e6 <_scanf_i+0x10e>
 8009a28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009a2c:	4631      	mov	r1, r6
 8009a2e:	4650      	mov	r0, sl
 8009a30:	4798      	blx	r3
 8009a32:	2800      	cmp	r0, #0
 8009a34:	d0df      	beq.n	80099f6 <_scanf_i+0x11e>
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	05db      	lsls	r3, r3, #23
 8009a3a:	d50d      	bpl.n	8009a58 <_scanf_i+0x180>
 8009a3c:	42bd      	cmp	r5, r7
 8009a3e:	d909      	bls.n	8009a54 <_scanf_i+0x17c>
 8009a40:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009a44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a48:	4632      	mov	r2, r6
 8009a4a:	4650      	mov	r0, sl
 8009a4c:	4798      	blx	r3
 8009a4e:	f105 39ff 	add.w	r9, r5, #4294967295
 8009a52:	464d      	mov	r5, r9
 8009a54:	42bd      	cmp	r5, r7
 8009a56:	d02d      	beq.n	8009ab4 <_scanf_i+0x1dc>
 8009a58:	6822      	ldr	r2, [r4, #0]
 8009a5a:	f012 0210 	ands.w	r2, r2, #16
 8009a5e:	d113      	bne.n	8009a88 <_scanf_i+0x1b0>
 8009a60:	702a      	strb	r2, [r5, #0]
 8009a62:	6863      	ldr	r3, [r4, #4]
 8009a64:	9e01      	ldr	r6, [sp, #4]
 8009a66:	4639      	mov	r1, r7
 8009a68:	4650      	mov	r0, sl
 8009a6a:	47b0      	blx	r6
 8009a6c:	6821      	ldr	r1, [r4, #0]
 8009a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8009a72:	f011 0f20 	tst.w	r1, #32
 8009a76:	d013      	beq.n	8009aa0 <_scanf_i+0x1c8>
 8009a78:	1d1a      	adds	r2, r3, #4
 8009a7a:	f8c8 2000 	str.w	r2, [r8]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6018      	str	r0, [r3, #0]
 8009a82:	68e3      	ldr	r3, [r4, #12]
 8009a84:	3301      	adds	r3, #1
 8009a86:	60e3      	str	r3, [r4, #12]
 8009a88:	1bed      	subs	r5, r5, r7
 8009a8a:	44ab      	add	fp, r5
 8009a8c:	6925      	ldr	r5, [r4, #16]
 8009a8e:	445d      	add	r5, fp
 8009a90:	6125      	str	r5, [r4, #16]
 8009a92:	2000      	movs	r0, #0
 8009a94:	b007      	add	sp, #28
 8009a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a9a:	f04f 0b00 	mov.w	fp, #0
 8009a9e:	e7ca      	b.n	8009a36 <_scanf_i+0x15e>
 8009aa0:	1d1a      	adds	r2, r3, #4
 8009aa2:	f8c8 2000 	str.w	r2, [r8]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f011 0f01 	tst.w	r1, #1
 8009aac:	bf14      	ite	ne
 8009aae:	8018      	strhne	r0, [r3, #0]
 8009ab0:	6018      	streq	r0, [r3, #0]
 8009ab2:	e7e6      	b.n	8009a82 <_scanf_i+0x1aa>
 8009ab4:	2001      	movs	r0, #1
 8009ab6:	e7ed      	b.n	8009a94 <_scanf_i+0x1bc>
 8009ab8:	0800c560 	.word	0x0800c560
 8009abc:	08009c9d 	.word	0x08009c9d
 8009ac0:	080071bd 	.word	0x080071bd
 8009ac4:	0800c986 	.word	0x0800c986

08009ac8 <_read_r>:
 8009ac8:	b538      	push	{r3, r4, r5, lr}
 8009aca:	4d07      	ldr	r5, [pc, #28]	; (8009ae8 <_read_r+0x20>)
 8009acc:	4604      	mov	r4, r0
 8009ace:	4608      	mov	r0, r1
 8009ad0:	4611      	mov	r1, r2
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	602a      	str	r2, [r5, #0]
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	f7f9 f871 	bl	8002bbe <_read>
 8009adc:	1c43      	adds	r3, r0, #1
 8009ade:	d102      	bne.n	8009ae6 <_read_r+0x1e>
 8009ae0:	682b      	ldr	r3, [r5, #0]
 8009ae2:	b103      	cbz	r3, 8009ae6 <_read_r+0x1e>
 8009ae4:	6023      	str	r3, [r4, #0]
 8009ae6:	bd38      	pop	{r3, r4, r5, pc}
 8009ae8:	20000d40 	.word	0x20000d40
 8009aec:	00000000 	.word	0x00000000

08009af0 <nan>:
 8009af0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009af8 <nan+0x8>
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	00000000 	.word	0x00000000
 8009afc:	7ff80000 	.word	0x7ff80000

08009b00 <_sbrk_r>:
 8009b00:	b538      	push	{r3, r4, r5, lr}
 8009b02:	4d06      	ldr	r5, [pc, #24]	; (8009b1c <_sbrk_r+0x1c>)
 8009b04:	2300      	movs	r3, #0
 8009b06:	4604      	mov	r4, r0
 8009b08:	4608      	mov	r0, r1
 8009b0a:	602b      	str	r3, [r5, #0]
 8009b0c:	f7f9 f8c4 	bl	8002c98 <_sbrk>
 8009b10:	1c43      	adds	r3, r0, #1
 8009b12:	d102      	bne.n	8009b1a <_sbrk_r+0x1a>
 8009b14:	682b      	ldr	r3, [r5, #0]
 8009b16:	b103      	cbz	r3, 8009b1a <_sbrk_r+0x1a>
 8009b18:	6023      	str	r3, [r4, #0]
 8009b1a:	bd38      	pop	{r3, r4, r5, pc}
 8009b1c:	20000d40 	.word	0x20000d40

08009b20 <__sccl>:
 8009b20:	b570      	push	{r4, r5, r6, lr}
 8009b22:	780b      	ldrb	r3, [r1, #0]
 8009b24:	4604      	mov	r4, r0
 8009b26:	2b5e      	cmp	r3, #94	; 0x5e
 8009b28:	bf0b      	itete	eq
 8009b2a:	784b      	ldrbeq	r3, [r1, #1]
 8009b2c:	1c48      	addne	r0, r1, #1
 8009b2e:	1c88      	addeq	r0, r1, #2
 8009b30:	2200      	movne	r2, #0
 8009b32:	bf08      	it	eq
 8009b34:	2201      	moveq	r2, #1
 8009b36:	1e61      	subs	r1, r4, #1
 8009b38:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009b3c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009b40:	42a9      	cmp	r1, r5
 8009b42:	d1fb      	bne.n	8009b3c <__sccl+0x1c>
 8009b44:	b90b      	cbnz	r3, 8009b4a <__sccl+0x2a>
 8009b46:	3801      	subs	r0, #1
 8009b48:	bd70      	pop	{r4, r5, r6, pc}
 8009b4a:	f082 0201 	eor.w	r2, r2, #1
 8009b4e:	54e2      	strb	r2, [r4, r3]
 8009b50:	4605      	mov	r5, r0
 8009b52:	4628      	mov	r0, r5
 8009b54:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009b58:	292d      	cmp	r1, #45	; 0x2d
 8009b5a:	d006      	beq.n	8009b6a <__sccl+0x4a>
 8009b5c:	295d      	cmp	r1, #93	; 0x5d
 8009b5e:	d0f3      	beq.n	8009b48 <__sccl+0x28>
 8009b60:	b909      	cbnz	r1, 8009b66 <__sccl+0x46>
 8009b62:	4628      	mov	r0, r5
 8009b64:	e7f0      	b.n	8009b48 <__sccl+0x28>
 8009b66:	460b      	mov	r3, r1
 8009b68:	e7f1      	b.n	8009b4e <__sccl+0x2e>
 8009b6a:	786e      	ldrb	r6, [r5, #1]
 8009b6c:	2e5d      	cmp	r6, #93	; 0x5d
 8009b6e:	d0fa      	beq.n	8009b66 <__sccl+0x46>
 8009b70:	42b3      	cmp	r3, r6
 8009b72:	dcf8      	bgt.n	8009b66 <__sccl+0x46>
 8009b74:	3502      	adds	r5, #2
 8009b76:	4619      	mov	r1, r3
 8009b78:	3101      	adds	r1, #1
 8009b7a:	428e      	cmp	r6, r1
 8009b7c:	5462      	strb	r2, [r4, r1]
 8009b7e:	dcfb      	bgt.n	8009b78 <__sccl+0x58>
 8009b80:	1af1      	subs	r1, r6, r3
 8009b82:	3901      	subs	r1, #1
 8009b84:	1c58      	adds	r0, r3, #1
 8009b86:	42b3      	cmp	r3, r6
 8009b88:	bfa8      	it	ge
 8009b8a:	2100      	movge	r1, #0
 8009b8c:	1843      	adds	r3, r0, r1
 8009b8e:	e7e0      	b.n	8009b52 <__sccl+0x32>

08009b90 <strncmp>:
 8009b90:	b510      	push	{r4, lr}
 8009b92:	b17a      	cbz	r2, 8009bb4 <strncmp+0x24>
 8009b94:	4603      	mov	r3, r0
 8009b96:	3901      	subs	r1, #1
 8009b98:	1884      	adds	r4, r0, r2
 8009b9a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b9e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009ba2:	4290      	cmp	r0, r2
 8009ba4:	d101      	bne.n	8009baa <strncmp+0x1a>
 8009ba6:	42a3      	cmp	r3, r4
 8009ba8:	d101      	bne.n	8009bae <strncmp+0x1e>
 8009baa:	1a80      	subs	r0, r0, r2
 8009bac:	bd10      	pop	{r4, pc}
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	d1f3      	bne.n	8009b9a <strncmp+0xa>
 8009bb2:	e7fa      	b.n	8009baa <strncmp+0x1a>
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	e7f9      	b.n	8009bac <strncmp+0x1c>

08009bb8 <_strtoul_l.constprop.0>:
 8009bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bbc:	4f36      	ldr	r7, [pc, #216]	; (8009c98 <_strtoul_l.constprop.0+0xe0>)
 8009bbe:	4686      	mov	lr, r0
 8009bc0:	460d      	mov	r5, r1
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bc8:	5de6      	ldrb	r6, [r4, r7]
 8009bca:	f016 0608 	ands.w	r6, r6, #8
 8009bce:	d1f8      	bne.n	8009bc2 <_strtoul_l.constprop.0+0xa>
 8009bd0:	2c2d      	cmp	r4, #45	; 0x2d
 8009bd2:	d12f      	bne.n	8009c34 <_strtoul_l.constprop.0+0x7c>
 8009bd4:	782c      	ldrb	r4, [r5, #0]
 8009bd6:	2601      	movs	r6, #1
 8009bd8:	1c85      	adds	r5, r0, #2
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d057      	beq.n	8009c8e <_strtoul_l.constprop.0+0xd6>
 8009bde:	2b10      	cmp	r3, #16
 8009be0:	d109      	bne.n	8009bf6 <_strtoul_l.constprop.0+0x3e>
 8009be2:	2c30      	cmp	r4, #48	; 0x30
 8009be4:	d107      	bne.n	8009bf6 <_strtoul_l.constprop.0+0x3e>
 8009be6:	7828      	ldrb	r0, [r5, #0]
 8009be8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009bec:	2858      	cmp	r0, #88	; 0x58
 8009bee:	d149      	bne.n	8009c84 <_strtoul_l.constprop.0+0xcc>
 8009bf0:	786c      	ldrb	r4, [r5, #1]
 8009bf2:	2310      	movs	r3, #16
 8009bf4:	3502      	adds	r5, #2
 8009bf6:	f04f 38ff 	mov.w	r8, #4294967295
 8009bfa:	2700      	movs	r7, #0
 8009bfc:	fbb8 f8f3 	udiv	r8, r8, r3
 8009c00:	fb03 f908 	mul.w	r9, r3, r8
 8009c04:	ea6f 0909 	mvn.w	r9, r9
 8009c08:	4638      	mov	r0, r7
 8009c0a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009c0e:	f1bc 0f09 	cmp.w	ip, #9
 8009c12:	d814      	bhi.n	8009c3e <_strtoul_l.constprop.0+0x86>
 8009c14:	4664      	mov	r4, ip
 8009c16:	42a3      	cmp	r3, r4
 8009c18:	dd22      	ble.n	8009c60 <_strtoul_l.constprop.0+0xa8>
 8009c1a:	2f00      	cmp	r7, #0
 8009c1c:	db1d      	blt.n	8009c5a <_strtoul_l.constprop.0+0xa2>
 8009c1e:	4580      	cmp	r8, r0
 8009c20:	d31b      	bcc.n	8009c5a <_strtoul_l.constprop.0+0xa2>
 8009c22:	d101      	bne.n	8009c28 <_strtoul_l.constprop.0+0x70>
 8009c24:	45a1      	cmp	r9, r4
 8009c26:	db18      	blt.n	8009c5a <_strtoul_l.constprop.0+0xa2>
 8009c28:	fb00 4003 	mla	r0, r0, r3, r4
 8009c2c:	2701      	movs	r7, #1
 8009c2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c32:	e7ea      	b.n	8009c0a <_strtoul_l.constprop.0+0x52>
 8009c34:	2c2b      	cmp	r4, #43	; 0x2b
 8009c36:	bf04      	itt	eq
 8009c38:	782c      	ldrbeq	r4, [r5, #0]
 8009c3a:	1c85      	addeq	r5, r0, #2
 8009c3c:	e7cd      	b.n	8009bda <_strtoul_l.constprop.0+0x22>
 8009c3e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009c42:	f1bc 0f19 	cmp.w	ip, #25
 8009c46:	d801      	bhi.n	8009c4c <_strtoul_l.constprop.0+0x94>
 8009c48:	3c37      	subs	r4, #55	; 0x37
 8009c4a:	e7e4      	b.n	8009c16 <_strtoul_l.constprop.0+0x5e>
 8009c4c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009c50:	f1bc 0f19 	cmp.w	ip, #25
 8009c54:	d804      	bhi.n	8009c60 <_strtoul_l.constprop.0+0xa8>
 8009c56:	3c57      	subs	r4, #87	; 0x57
 8009c58:	e7dd      	b.n	8009c16 <_strtoul_l.constprop.0+0x5e>
 8009c5a:	f04f 37ff 	mov.w	r7, #4294967295
 8009c5e:	e7e6      	b.n	8009c2e <_strtoul_l.constprop.0+0x76>
 8009c60:	2f00      	cmp	r7, #0
 8009c62:	da07      	bge.n	8009c74 <_strtoul_l.constprop.0+0xbc>
 8009c64:	2322      	movs	r3, #34	; 0x22
 8009c66:	f8ce 3000 	str.w	r3, [lr]
 8009c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c6e:	b932      	cbnz	r2, 8009c7e <_strtoul_l.constprop.0+0xc6>
 8009c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c74:	b106      	cbz	r6, 8009c78 <_strtoul_l.constprop.0+0xc0>
 8009c76:	4240      	negs	r0, r0
 8009c78:	2a00      	cmp	r2, #0
 8009c7a:	d0f9      	beq.n	8009c70 <_strtoul_l.constprop.0+0xb8>
 8009c7c:	b107      	cbz	r7, 8009c80 <_strtoul_l.constprop.0+0xc8>
 8009c7e:	1e69      	subs	r1, r5, #1
 8009c80:	6011      	str	r1, [r2, #0]
 8009c82:	e7f5      	b.n	8009c70 <_strtoul_l.constprop.0+0xb8>
 8009c84:	2430      	movs	r4, #48	; 0x30
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1b5      	bne.n	8009bf6 <_strtoul_l.constprop.0+0x3e>
 8009c8a:	2308      	movs	r3, #8
 8009c8c:	e7b3      	b.n	8009bf6 <_strtoul_l.constprop.0+0x3e>
 8009c8e:	2c30      	cmp	r4, #48	; 0x30
 8009c90:	d0a9      	beq.n	8009be6 <_strtoul_l.constprop.0+0x2e>
 8009c92:	230a      	movs	r3, #10
 8009c94:	e7af      	b.n	8009bf6 <_strtoul_l.constprop.0+0x3e>
 8009c96:	bf00      	nop
 8009c98:	0800c5f9 	.word	0x0800c5f9

08009c9c <_strtoul_r>:
 8009c9c:	f7ff bf8c 	b.w	8009bb8 <_strtoul_l.constprop.0>

08009ca0 <__submore>:
 8009ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ca4:	460c      	mov	r4, r1
 8009ca6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009ca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cac:	4299      	cmp	r1, r3
 8009cae:	d11d      	bne.n	8009cec <__submore+0x4c>
 8009cb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009cb4:	f7ff fa14 	bl	80090e0 <_malloc_r>
 8009cb8:	b918      	cbnz	r0, 8009cc2 <__submore+0x22>
 8009cba:	f04f 30ff 	mov.w	r0, #4294967295
 8009cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cc6:	63a3      	str	r3, [r4, #56]	; 0x38
 8009cc8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009ccc:	6360      	str	r0, [r4, #52]	; 0x34
 8009cce:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009cd2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009cd6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009cda:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009cde:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009ce2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009ce6:	6020      	str	r0, [r4, #0]
 8009ce8:	2000      	movs	r0, #0
 8009cea:	e7e8      	b.n	8009cbe <__submore+0x1e>
 8009cec:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009cee:	0077      	lsls	r7, r6, #1
 8009cf0:	463a      	mov	r2, r7
 8009cf2:	f000 fa2d 	bl	800a150 <_realloc_r>
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	d0de      	beq.n	8009cba <__submore+0x1a>
 8009cfc:	eb00 0806 	add.w	r8, r0, r6
 8009d00:	4601      	mov	r1, r0
 8009d02:	4632      	mov	r2, r6
 8009d04:	4640      	mov	r0, r8
 8009d06:	f7fe fc99 	bl	800863c <memcpy>
 8009d0a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009d0e:	f8c4 8000 	str.w	r8, [r4]
 8009d12:	e7e9      	b.n	8009ce8 <__submore+0x48>

08009d14 <__ascii_wctomb>:
 8009d14:	b149      	cbz	r1, 8009d2a <__ascii_wctomb+0x16>
 8009d16:	2aff      	cmp	r2, #255	; 0xff
 8009d18:	bf85      	ittet	hi
 8009d1a:	238a      	movhi	r3, #138	; 0x8a
 8009d1c:	6003      	strhi	r3, [r0, #0]
 8009d1e:	700a      	strbls	r2, [r1, #0]
 8009d20:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d24:	bf98      	it	ls
 8009d26:	2001      	movls	r0, #1
 8009d28:	4770      	bx	lr
 8009d2a:	4608      	mov	r0, r1
 8009d2c:	4770      	bx	lr
	...

08009d30 <__assert_func>:
 8009d30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d32:	4614      	mov	r4, r2
 8009d34:	461a      	mov	r2, r3
 8009d36:	4b09      	ldr	r3, [pc, #36]	; (8009d5c <__assert_func+0x2c>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4605      	mov	r5, r0
 8009d3c:	68d8      	ldr	r0, [r3, #12]
 8009d3e:	b14c      	cbz	r4, 8009d54 <__assert_func+0x24>
 8009d40:	4b07      	ldr	r3, [pc, #28]	; (8009d60 <__assert_func+0x30>)
 8009d42:	9100      	str	r1, [sp, #0]
 8009d44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d48:	4906      	ldr	r1, [pc, #24]	; (8009d64 <__assert_func+0x34>)
 8009d4a:	462b      	mov	r3, r5
 8009d4c:	f000 f9a6 	bl	800a09c <fiprintf>
 8009d50:	f000 fc46 	bl	800a5e0 <abort>
 8009d54:	4b04      	ldr	r3, [pc, #16]	; (8009d68 <__assert_func+0x38>)
 8009d56:	461c      	mov	r4, r3
 8009d58:	e7f3      	b.n	8009d42 <__assert_func+0x12>
 8009d5a:	bf00      	nop
 8009d5c:	20000018 	.word	0x20000018
 8009d60:	0800c988 	.word	0x0800c988
 8009d64:	0800c995 	.word	0x0800c995
 8009d68:	0800c9c3 	.word	0x0800c9c3

08009d6c <__sflush_r>:
 8009d6c:	898a      	ldrh	r2, [r1, #12]
 8009d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d72:	4605      	mov	r5, r0
 8009d74:	0710      	lsls	r0, r2, #28
 8009d76:	460c      	mov	r4, r1
 8009d78:	d458      	bmi.n	8009e2c <__sflush_r+0xc0>
 8009d7a:	684b      	ldr	r3, [r1, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	dc05      	bgt.n	8009d8c <__sflush_r+0x20>
 8009d80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	dc02      	bgt.n	8009d8c <__sflush_r+0x20>
 8009d86:	2000      	movs	r0, #0
 8009d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d8e:	2e00      	cmp	r6, #0
 8009d90:	d0f9      	beq.n	8009d86 <__sflush_r+0x1a>
 8009d92:	2300      	movs	r3, #0
 8009d94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d98:	682f      	ldr	r7, [r5, #0]
 8009d9a:	602b      	str	r3, [r5, #0]
 8009d9c:	d032      	beq.n	8009e04 <__sflush_r+0x98>
 8009d9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009da0:	89a3      	ldrh	r3, [r4, #12]
 8009da2:	075a      	lsls	r2, r3, #29
 8009da4:	d505      	bpl.n	8009db2 <__sflush_r+0x46>
 8009da6:	6863      	ldr	r3, [r4, #4]
 8009da8:	1ac0      	subs	r0, r0, r3
 8009daa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dac:	b10b      	cbz	r3, 8009db2 <__sflush_r+0x46>
 8009dae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009db0:	1ac0      	subs	r0, r0, r3
 8009db2:	2300      	movs	r3, #0
 8009db4:	4602      	mov	r2, r0
 8009db6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009db8:	6a21      	ldr	r1, [r4, #32]
 8009dba:	4628      	mov	r0, r5
 8009dbc:	47b0      	blx	r6
 8009dbe:	1c43      	adds	r3, r0, #1
 8009dc0:	89a3      	ldrh	r3, [r4, #12]
 8009dc2:	d106      	bne.n	8009dd2 <__sflush_r+0x66>
 8009dc4:	6829      	ldr	r1, [r5, #0]
 8009dc6:	291d      	cmp	r1, #29
 8009dc8:	d82c      	bhi.n	8009e24 <__sflush_r+0xb8>
 8009dca:	4a2a      	ldr	r2, [pc, #168]	; (8009e74 <__sflush_r+0x108>)
 8009dcc:	40ca      	lsrs	r2, r1
 8009dce:	07d6      	lsls	r6, r2, #31
 8009dd0:	d528      	bpl.n	8009e24 <__sflush_r+0xb8>
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	6062      	str	r2, [r4, #4]
 8009dd6:	04d9      	lsls	r1, r3, #19
 8009dd8:	6922      	ldr	r2, [r4, #16]
 8009dda:	6022      	str	r2, [r4, #0]
 8009ddc:	d504      	bpl.n	8009de8 <__sflush_r+0x7c>
 8009dde:	1c42      	adds	r2, r0, #1
 8009de0:	d101      	bne.n	8009de6 <__sflush_r+0x7a>
 8009de2:	682b      	ldr	r3, [r5, #0]
 8009de4:	b903      	cbnz	r3, 8009de8 <__sflush_r+0x7c>
 8009de6:	6560      	str	r0, [r4, #84]	; 0x54
 8009de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dea:	602f      	str	r7, [r5, #0]
 8009dec:	2900      	cmp	r1, #0
 8009dee:	d0ca      	beq.n	8009d86 <__sflush_r+0x1a>
 8009df0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009df4:	4299      	cmp	r1, r3
 8009df6:	d002      	beq.n	8009dfe <__sflush_r+0x92>
 8009df8:	4628      	mov	r0, r5
 8009dfa:	f7ff f905 	bl	8009008 <_free_r>
 8009dfe:	2000      	movs	r0, #0
 8009e00:	6360      	str	r0, [r4, #52]	; 0x34
 8009e02:	e7c1      	b.n	8009d88 <__sflush_r+0x1c>
 8009e04:	6a21      	ldr	r1, [r4, #32]
 8009e06:	2301      	movs	r3, #1
 8009e08:	4628      	mov	r0, r5
 8009e0a:	47b0      	blx	r6
 8009e0c:	1c41      	adds	r1, r0, #1
 8009e0e:	d1c7      	bne.n	8009da0 <__sflush_r+0x34>
 8009e10:	682b      	ldr	r3, [r5, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d0c4      	beq.n	8009da0 <__sflush_r+0x34>
 8009e16:	2b1d      	cmp	r3, #29
 8009e18:	d001      	beq.n	8009e1e <__sflush_r+0xb2>
 8009e1a:	2b16      	cmp	r3, #22
 8009e1c:	d101      	bne.n	8009e22 <__sflush_r+0xb6>
 8009e1e:	602f      	str	r7, [r5, #0]
 8009e20:	e7b1      	b.n	8009d86 <__sflush_r+0x1a>
 8009e22:	89a3      	ldrh	r3, [r4, #12]
 8009e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e28:	81a3      	strh	r3, [r4, #12]
 8009e2a:	e7ad      	b.n	8009d88 <__sflush_r+0x1c>
 8009e2c:	690f      	ldr	r7, [r1, #16]
 8009e2e:	2f00      	cmp	r7, #0
 8009e30:	d0a9      	beq.n	8009d86 <__sflush_r+0x1a>
 8009e32:	0793      	lsls	r3, r2, #30
 8009e34:	680e      	ldr	r6, [r1, #0]
 8009e36:	bf08      	it	eq
 8009e38:	694b      	ldreq	r3, [r1, #20]
 8009e3a:	600f      	str	r7, [r1, #0]
 8009e3c:	bf18      	it	ne
 8009e3e:	2300      	movne	r3, #0
 8009e40:	eba6 0807 	sub.w	r8, r6, r7
 8009e44:	608b      	str	r3, [r1, #8]
 8009e46:	f1b8 0f00 	cmp.w	r8, #0
 8009e4a:	dd9c      	ble.n	8009d86 <__sflush_r+0x1a>
 8009e4c:	6a21      	ldr	r1, [r4, #32]
 8009e4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e50:	4643      	mov	r3, r8
 8009e52:	463a      	mov	r2, r7
 8009e54:	4628      	mov	r0, r5
 8009e56:	47b0      	blx	r6
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	dc06      	bgt.n	8009e6a <__sflush_r+0xfe>
 8009e5c:	89a3      	ldrh	r3, [r4, #12]
 8009e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e62:	81a3      	strh	r3, [r4, #12]
 8009e64:	f04f 30ff 	mov.w	r0, #4294967295
 8009e68:	e78e      	b.n	8009d88 <__sflush_r+0x1c>
 8009e6a:	4407      	add	r7, r0
 8009e6c:	eba8 0800 	sub.w	r8, r8, r0
 8009e70:	e7e9      	b.n	8009e46 <__sflush_r+0xda>
 8009e72:	bf00      	nop
 8009e74:	20400001 	.word	0x20400001

08009e78 <_fflush_r>:
 8009e78:	b538      	push	{r3, r4, r5, lr}
 8009e7a:	690b      	ldr	r3, [r1, #16]
 8009e7c:	4605      	mov	r5, r0
 8009e7e:	460c      	mov	r4, r1
 8009e80:	b913      	cbnz	r3, 8009e88 <_fflush_r+0x10>
 8009e82:	2500      	movs	r5, #0
 8009e84:	4628      	mov	r0, r5
 8009e86:	bd38      	pop	{r3, r4, r5, pc}
 8009e88:	b118      	cbz	r0, 8009e92 <_fflush_r+0x1a>
 8009e8a:	6983      	ldr	r3, [r0, #24]
 8009e8c:	b90b      	cbnz	r3, 8009e92 <_fflush_r+0x1a>
 8009e8e:	f000 f887 	bl	8009fa0 <__sinit>
 8009e92:	4b14      	ldr	r3, [pc, #80]	; (8009ee4 <_fflush_r+0x6c>)
 8009e94:	429c      	cmp	r4, r3
 8009e96:	d11b      	bne.n	8009ed0 <_fflush_r+0x58>
 8009e98:	686c      	ldr	r4, [r5, #4]
 8009e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d0ef      	beq.n	8009e82 <_fflush_r+0xa>
 8009ea2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ea4:	07d0      	lsls	r0, r2, #31
 8009ea6:	d404      	bmi.n	8009eb2 <_fflush_r+0x3a>
 8009ea8:	0599      	lsls	r1, r3, #22
 8009eaa:	d402      	bmi.n	8009eb2 <_fflush_r+0x3a>
 8009eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eae:	f000 f927 	bl	800a100 <__retarget_lock_acquire_recursive>
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	4621      	mov	r1, r4
 8009eb6:	f7ff ff59 	bl	8009d6c <__sflush_r>
 8009eba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ebc:	07da      	lsls	r2, r3, #31
 8009ebe:	4605      	mov	r5, r0
 8009ec0:	d4e0      	bmi.n	8009e84 <_fflush_r+0xc>
 8009ec2:	89a3      	ldrh	r3, [r4, #12]
 8009ec4:	059b      	lsls	r3, r3, #22
 8009ec6:	d4dd      	bmi.n	8009e84 <_fflush_r+0xc>
 8009ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eca:	f000 f91a 	bl	800a102 <__retarget_lock_release_recursive>
 8009ece:	e7d9      	b.n	8009e84 <_fflush_r+0xc>
 8009ed0:	4b05      	ldr	r3, [pc, #20]	; (8009ee8 <_fflush_r+0x70>)
 8009ed2:	429c      	cmp	r4, r3
 8009ed4:	d101      	bne.n	8009eda <_fflush_r+0x62>
 8009ed6:	68ac      	ldr	r4, [r5, #8]
 8009ed8:	e7df      	b.n	8009e9a <_fflush_r+0x22>
 8009eda:	4b04      	ldr	r3, [pc, #16]	; (8009eec <_fflush_r+0x74>)
 8009edc:	429c      	cmp	r4, r3
 8009ede:	bf08      	it	eq
 8009ee0:	68ec      	ldreq	r4, [r5, #12]
 8009ee2:	e7da      	b.n	8009e9a <_fflush_r+0x22>
 8009ee4:	0800c9e4 	.word	0x0800c9e4
 8009ee8:	0800ca04 	.word	0x0800ca04
 8009eec:	0800c9c4 	.word	0x0800c9c4

08009ef0 <std>:
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	b510      	push	{r4, lr}
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	e9c0 3300 	strd	r3, r3, [r0]
 8009efa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009efe:	6083      	str	r3, [r0, #8]
 8009f00:	8181      	strh	r1, [r0, #12]
 8009f02:	6643      	str	r3, [r0, #100]	; 0x64
 8009f04:	81c2      	strh	r2, [r0, #14]
 8009f06:	6183      	str	r3, [r0, #24]
 8009f08:	4619      	mov	r1, r3
 8009f0a:	2208      	movs	r2, #8
 8009f0c:	305c      	adds	r0, #92	; 0x5c
 8009f0e:	f7fb fb91 	bl	8005634 <memset>
 8009f12:	4b05      	ldr	r3, [pc, #20]	; (8009f28 <std+0x38>)
 8009f14:	6263      	str	r3, [r4, #36]	; 0x24
 8009f16:	4b05      	ldr	r3, [pc, #20]	; (8009f2c <std+0x3c>)
 8009f18:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f1a:	4b05      	ldr	r3, [pc, #20]	; (8009f30 <std+0x40>)
 8009f1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f1e:	4b05      	ldr	r3, [pc, #20]	; (8009f34 <std+0x44>)
 8009f20:	6224      	str	r4, [r4, #32]
 8009f22:	6323      	str	r3, [r4, #48]	; 0x30
 8009f24:	bd10      	pop	{r4, pc}
 8009f26:	bf00      	nop
 8009f28:	080063dd 	.word	0x080063dd
 8009f2c:	08006403 	.word	0x08006403
 8009f30:	0800643b 	.word	0x0800643b
 8009f34:	0800645f 	.word	0x0800645f

08009f38 <_cleanup_r>:
 8009f38:	4901      	ldr	r1, [pc, #4]	; (8009f40 <_cleanup_r+0x8>)
 8009f3a:	f000 b8c1 	b.w	800a0c0 <_fwalk_reent>
 8009f3e:	bf00      	nop
 8009f40:	08009e79 	.word	0x08009e79

08009f44 <__sfmoreglue>:
 8009f44:	b570      	push	{r4, r5, r6, lr}
 8009f46:	2268      	movs	r2, #104	; 0x68
 8009f48:	1e4d      	subs	r5, r1, #1
 8009f4a:	4355      	muls	r5, r2
 8009f4c:	460e      	mov	r6, r1
 8009f4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f52:	f7ff f8c5 	bl	80090e0 <_malloc_r>
 8009f56:	4604      	mov	r4, r0
 8009f58:	b140      	cbz	r0, 8009f6c <__sfmoreglue+0x28>
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	e9c0 1600 	strd	r1, r6, [r0]
 8009f60:	300c      	adds	r0, #12
 8009f62:	60a0      	str	r0, [r4, #8]
 8009f64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f68:	f7fb fb64 	bl	8005634 <memset>
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	bd70      	pop	{r4, r5, r6, pc}

08009f70 <__sfp_lock_acquire>:
 8009f70:	4801      	ldr	r0, [pc, #4]	; (8009f78 <__sfp_lock_acquire+0x8>)
 8009f72:	f000 b8c5 	b.w	800a100 <__retarget_lock_acquire_recursive>
 8009f76:	bf00      	nop
 8009f78:	20000d45 	.word	0x20000d45

08009f7c <__sfp_lock_release>:
 8009f7c:	4801      	ldr	r0, [pc, #4]	; (8009f84 <__sfp_lock_release+0x8>)
 8009f7e:	f000 b8c0 	b.w	800a102 <__retarget_lock_release_recursive>
 8009f82:	bf00      	nop
 8009f84:	20000d45 	.word	0x20000d45

08009f88 <__sinit_lock_acquire>:
 8009f88:	4801      	ldr	r0, [pc, #4]	; (8009f90 <__sinit_lock_acquire+0x8>)
 8009f8a:	f000 b8b9 	b.w	800a100 <__retarget_lock_acquire_recursive>
 8009f8e:	bf00      	nop
 8009f90:	20000d46 	.word	0x20000d46

08009f94 <__sinit_lock_release>:
 8009f94:	4801      	ldr	r0, [pc, #4]	; (8009f9c <__sinit_lock_release+0x8>)
 8009f96:	f000 b8b4 	b.w	800a102 <__retarget_lock_release_recursive>
 8009f9a:	bf00      	nop
 8009f9c:	20000d46 	.word	0x20000d46

08009fa0 <__sinit>:
 8009fa0:	b510      	push	{r4, lr}
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	f7ff fff0 	bl	8009f88 <__sinit_lock_acquire>
 8009fa8:	69a3      	ldr	r3, [r4, #24]
 8009faa:	b11b      	cbz	r3, 8009fb4 <__sinit+0x14>
 8009fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fb0:	f7ff bff0 	b.w	8009f94 <__sinit_lock_release>
 8009fb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009fb8:	6523      	str	r3, [r4, #80]	; 0x50
 8009fba:	4b13      	ldr	r3, [pc, #76]	; (800a008 <__sinit+0x68>)
 8009fbc:	4a13      	ldr	r2, [pc, #76]	; (800a00c <__sinit+0x6c>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8009fc2:	42a3      	cmp	r3, r4
 8009fc4:	bf04      	itt	eq
 8009fc6:	2301      	moveq	r3, #1
 8009fc8:	61a3      	streq	r3, [r4, #24]
 8009fca:	4620      	mov	r0, r4
 8009fcc:	f000 f820 	bl	800a010 <__sfp>
 8009fd0:	6060      	str	r0, [r4, #4]
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	f000 f81c 	bl	800a010 <__sfp>
 8009fd8:	60a0      	str	r0, [r4, #8]
 8009fda:	4620      	mov	r0, r4
 8009fdc:	f000 f818 	bl	800a010 <__sfp>
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	60e0      	str	r0, [r4, #12]
 8009fe4:	2104      	movs	r1, #4
 8009fe6:	6860      	ldr	r0, [r4, #4]
 8009fe8:	f7ff ff82 	bl	8009ef0 <std>
 8009fec:	68a0      	ldr	r0, [r4, #8]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	2109      	movs	r1, #9
 8009ff2:	f7ff ff7d 	bl	8009ef0 <std>
 8009ff6:	68e0      	ldr	r0, [r4, #12]
 8009ff8:	2202      	movs	r2, #2
 8009ffa:	2112      	movs	r1, #18
 8009ffc:	f7ff ff78 	bl	8009ef0 <std>
 800a000:	2301      	movs	r3, #1
 800a002:	61a3      	str	r3, [r4, #24]
 800a004:	e7d2      	b.n	8009fac <__sinit+0xc>
 800a006:	bf00      	nop
 800a008:	0800c56c 	.word	0x0800c56c
 800a00c:	08009f39 	.word	0x08009f39

0800a010 <__sfp>:
 800a010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a012:	4607      	mov	r7, r0
 800a014:	f7ff ffac 	bl	8009f70 <__sfp_lock_acquire>
 800a018:	4b1e      	ldr	r3, [pc, #120]	; (800a094 <__sfp+0x84>)
 800a01a:	681e      	ldr	r6, [r3, #0]
 800a01c:	69b3      	ldr	r3, [r6, #24]
 800a01e:	b913      	cbnz	r3, 800a026 <__sfp+0x16>
 800a020:	4630      	mov	r0, r6
 800a022:	f7ff ffbd 	bl	8009fa0 <__sinit>
 800a026:	3648      	adds	r6, #72	; 0x48
 800a028:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a02c:	3b01      	subs	r3, #1
 800a02e:	d503      	bpl.n	800a038 <__sfp+0x28>
 800a030:	6833      	ldr	r3, [r6, #0]
 800a032:	b30b      	cbz	r3, 800a078 <__sfp+0x68>
 800a034:	6836      	ldr	r6, [r6, #0]
 800a036:	e7f7      	b.n	800a028 <__sfp+0x18>
 800a038:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a03c:	b9d5      	cbnz	r5, 800a074 <__sfp+0x64>
 800a03e:	4b16      	ldr	r3, [pc, #88]	; (800a098 <__sfp+0x88>)
 800a040:	60e3      	str	r3, [r4, #12]
 800a042:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a046:	6665      	str	r5, [r4, #100]	; 0x64
 800a048:	f000 f859 	bl	800a0fe <__retarget_lock_init_recursive>
 800a04c:	f7ff ff96 	bl	8009f7c <__sfp_lock_release>
 800a050:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a054:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a058:	6025      	str	r5, [r4, #0]
 800a05a:	61a5      	str	r5, [r4, #24]
 800a05c:	2208      	movs	r2, #8
 800a05e:	4629      	mov	r1, r5
 800a060:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a064:	f7fb fae6 	bl	8005634 <memset>
 800a068:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a06c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a070:	4620      	mov	r0, r4
 800a072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a074:	3468      	adds	r4, #104	; 0x68
 800a076:	e7d9      	b.n	800a02c <__sfp+0x1c>
 800a078:	2104      	movs	r1, #4
 800a07a:	4638      	mov	r0, r7
 800a07c:	f7ff ff62 	bl	8009f44 <__sfmoreglue>
 800a080:	4604      	mov	r4, r0
 800a082:	6030      	str	r0, [r6, #0]
 800a084:	2800      	cmp	r0, #0
 800a086:	d1d5      	bne.n	800a034 <__sfp+0x24>
 800a088:	f7ff ff78 	bl	8009f7c <__sfp_lock_release>
 800a08c:	230c      	movs	r3, #12
 800a08e:	603b      	str	r3, [r7, #0]
 800a090:	e7ee      	b.n	800a070 <__sfp+0x60>
 800a092:	bf00      	nop
 800a094:	0800c56c 	.word	0x0800c56c
 800a098:	ffff0001 	.word	0xffff0001

0800a09c <fiprintf>:
 800a09c:	b40e      	push	{r1, r2, r3}
 800a09e:	b503      	push	{r0, r1, lr}
 800a0a0:	4601      	mov	r1, r0
 800a0a2:	ab03      	add	r3, sp, #12
 800a0a4:	4805      	ldr	r0, [pc, #20]	; (800a0bc <fiprintf+0x20>)
 800a0a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0aa:	6800      	ldr	r0, [r0, #0]
 800a0ac:	9301      	str	r3, [sp, #4]
 800a0ae:	f000 f8a7 	bl	800a200 <_vfiprintf_r>
 800a0b2:	b002      	add	sp, #8
 800a0b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0b8:	b003      	add	sp, #12
 800a0ba:	4770      	bx	lr
 800a0bc:	20000018 	.word	0x20000018

0800a0c0 <_fwalk_reent>:
 800a0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0c4:	4606      	mov	r6, r0
 800a0c6:	4688      	mov	r8, r1
 800a0c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a0cc:	2700      	movs	r7, #0
 800a0ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0d2:	f1b9 0901 	subs.w	r9, r9, #1
 800a0d6:	d505      	bpl.n	800a0e4 <_fwalk_reent+0x24>
 800a0d8:	6824      	ldr	r4, [r4, #0]
 800a0da:	2c00      	cmp	r4, #0
 800a0dc:	d1f7      	bne.n	800a0ce <_fwalk_reent+0xe>
 800a0de:	4638      	mov	r0, r7
 800a0e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0e4:	89ab      	ldrh	r3, [r5, #12]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d907      	bls.n	800a0fa <_fwalk_reent+0x3a>
 800a0ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	d003      	beq.n	800a0fa <_fwalk_reent+0x3a>
 800a0f2:	4629      	mov	r1, r5
 800a0f4:	4630      	mov	r0, r6
 800a0f6:	47c0      	blx	r8
 800a0f8:	4307      	orrs	r7, r0
 800a0fa:	3568      	adds	r5, #104	; 0x68
 800a0fc:	e7e9      	b.n	800a0d2 <_fwalk_reent+0x12>

0800a0fe <__retarget_lock_init_recursive>:
 800a0fe:	4770      	bx	lr

0800a100 <__retarget_lock_acquire_recursive>:
 800a100:	4770      	bx	lr

0800a102 <__retarget_lock_release_recursive>:
 800a102:	4770      	bx	lr

0800a104 <memmove>:
 800a104:	4288      	cmp	r0, r1
 800a106:	b510      	push	{r4, lr}
 800a108:	eb01 0402 	add.w	r4, r1, r2
 800a10c:	d902      	bls.n	800a114 <memmove+0x10>
 800a10e:	4284      	cmp	r4, r0
 800a110:	4623      	mov	r3, r4
 800a112:	d807      	bhi.n	800a124 <memmove+0x20>
 800a114:	1e43      	subs	r3, r0, #1
 800a116:	42a1      	cmp	r1, r4
 800a118:	d008      	beq.n	800a12c <memmove+0x28>
 800a11a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a11e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a122:	e7f8      	b.n	800a116 <memmove+0x12>
 800a124:	4402      	add	r2, r0
 800a126:	4601      	mov	r1, r0
 800a128:	428a      	cmp	r2, r1
 800a12a:	d100      	bne.n	800a12e <memmove+0x2a>
 800a12c:	bd10      	pop	{r4, pc}
 800a12e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a132:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a136:	e7f7      	b.n	800a128 <memmove+0x24>

0800a138 <__malloc_lock>:
 800a138:	4801      	ldr	r0, [pc, #4]	; (800a140 <__malloc_lock+0x8>)
 800a13a:	f7ff bfe1 	b.w	800a100 <__retarget_lock_acquire_recursive>
 800a13e:	bf00      	nop
 800a140:	20000d44 	.word	0x20000d44

0800a144 <__malloc_unlock>:
 800a144:	4801      	ldr	r0, [pc, #4]	; (800a14c <__malloc_unlock+0x8>)
 800a146:	f7ff bfdc 	b.w	800a102 <__retarget_lock_release_recursive>
 800a14a:	bf00      	nop
 800a14c:	20000d44 	.word	0x20000d44

0800a150 <_realloc_r>:
 800a150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a154:	4680      	mov	r8, r0
 800a156:	4614      	mov	r4, r2
 800a158:	460e      	mov	r6, r1
 800a15a:	b921      	cbnz	r1, 800a166 <_realloc_r+0x16>
 800a15c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a160:	4611      	mov	r1, r2
 800a162:	f7fe bfbd 	b.w	80090e0 <_malloc_r>
 800a166:	b92a      	cbnz	r2, 800a174 <_realloc_r+0x24>
 800a168:	f7fe ff4e 	bl	8009008 <_free_r>
 800a16c:	4625      	mov	r5, r4
 800a16e:	4628      	mov	r0, r5
 800a170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a174:	f000 faa0 	bl	800a6b8 <_malloc_usable_size_r>
 800a178:	4284      	cmp	r4, r0
 800a17a:	4607      	mov	r7, r0
 800a17c:	d802      	bhi.n	800a184 <_realloc_r+0x34>
 800a17e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a182:	d812      	bhi.n	800a1aa <_realloc_r+0x5a>
 800a184:	4621      	mov	r1, r4
 800a186:	4640      	mov	r0, r8
 800a188:	f7fe ffaa 	bl	80090e0 <_malloc_r>
 800a18c:	4605      	mov	r5, r0
 800a18e:	2800      	cmp	r0, #0
 800a190:	d0ed      	beq.n	800a16e <_realloc_r+0x1e>
 800a192:	42bc      	cmp	r4, r7
 800a194:	4622      	mov	r2, r4
 800a196:	4631      	mov	r1, r6
 800a198:	bf28      	it	cs
 800a19a:	463a      	movcs	r2, r7
 800a19c:	f7fe fa4e 	bl	800863c <memcpy>
 800a1a0:	4631      	mov	r1, r6
 800a1a2:	4640      	mov	r0, r8
 800a1a4:	f7fe ff30 	bl	8009008 <_free_r>
 800a1a8:	e7e1      	b.n	800a16e <_realloc_r+0x1e>
 800a1aa:	4635      	mov	r5, r6
 800a1ac:	e7df      	b.n	800a16e <_realloc_r+0x1e>

0800a1ae <__sfputc_r>:
 800a1ae:	6893      	ldr	r3, [r2, #8]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	b410      	push	{r4}
 800a1b6:	6093      	str	r3, [r2, #8]
 800a1b8:	da08      	bge.n	800a1cc <__sfputc_r+0x1e>
 800a1ba:	6994      	ldr	r4, [r2, #24]
 800a1bc:	42a3      	cmp	r3, r4
 800a1be:	db01      	blt.n	800a1c4 <__sfputc_r+0x16>
 800a1c0:	290a      	cmp	r1, #10
 800a1c2:	d103      	bne.n	800a1cc <__sfputc_r+0x1e>
 800a1c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1c8:	f000 b94a 	b.w	800a460 <__swbuf_r>
 800a1cc:	6813      	ldr	r3, [r2, #0]
 800a1ce:	1c58      	adds	r0, r3, #1
 800a1d0:	6010      	str	r0, [r2, #0]
 800a1d2:	7019      	strb	r1, [r3, #0]
 800a1d4:	4608      	mov	r0, r1
 800a1d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <__sfputs_r>:
 800a1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1de:	4606      	mov	r6, r0
 800a1e0:	460f      	mov	r7, r1
 800a1e2:	4614      	mov	r4, r2
 800a1e4:	18d5      	adds	r5, r2, r3
 800a1e6:	42ac      	cmp	r4, r5
 800a1e8:	d101      	bne.n	800a1ee <__sfputs_r+0x12>
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	e007      	b.n	800a1fe <__sfputs_r+0x22>
 800a1ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1f2:	463a      	mov	r2, r7
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	f7ff ffda 	bl	800a1ae <__sfputc_r>
 800a1fa:	1c43      	adds	r3, r0, #1
 800a1fc:	d1f3      	bne.n	800a1e6 <__sfputs_r+0xa>
 800a1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a200 <_vfiprintf_r>:
 800a200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a204:	460d      	mov	r5, r1
 800a206:	b09d      	sub	sp, #116	; 0x74
 800a208:	4614      	mov	r4, r2
 800a20a:	4698      	mov	r8, r3
 800a20c:	4606      	mov	r6, r0
 800a20e:	b118      	cbz	r0, 800a218 <_vfiprintf_r+0x18>
 800a210:	6983      	ldr	r3, [r0, #24]
 800a212:	b90b      	cbnz	r3, 800a218 <_vfiprintf_r+0x18>
 800a214:	f7ff fec4 	bl	8009fa0 <__sinit>
 800a218:	4b89      	ldr	r3, [pc, #548]	; (800a440 <_vfiprintf_r+0x240>)
 800a21a:	429d      	cmp	r5, r3
 800a21c:	d11b      	bne.n	800a256 <_vfiprintf_r+0x56>
 800a21e:	6875      	ldr	r5, [r6, #4]
 800a220:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a222:	07d9      	lsls	r1, r3, #31
 800a224:	d405      	bmi.n	800a232 <_vfiprintf_r+0x32>
 800a226:	89ab      	ldrh	r3, [r5, #12]
 800a228:	059a      	lsls	r2, r3, #22
 800a22a:	d402      	bmi.n	800a232 <_vfiprintf_r+0x32>
 800a22c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a22e:	f7ff ff67 	bl	800a100 <__retarget_lock_acquire_recursive>
 800a232:	89ab      	ldrh	r3, [r5, #12]
 800a234:	071b      	lsls	r3, r3, #28
 800a236:	d501      	bpl.n	800a23c <_vfiprintf_r+0x3c>
 800a238:	692b      	ldr	r3, [r5, #16]
 800a23a:	b9eb      	cbnz	r3, 800a278 <_vfiprintf_r+0x78>
 800a23c:	4629      	mov	r1, r5
 800a23e:	4630      	mov	r0, r6
 800a240:	f000 f960 	bl	800a504 <__swsetup_r>
 800a244:	b1c0      	cbz	r0, 800a278 <_vfiprintf_r+0x78>
 800a246:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a248:	07dc      	lsls	r4, r3, #31
 800a24a:	d50e      	bpl.n	800a26a <_vfiprintf_r+0x6a>
 800a24c:	f04f 30ff 	mov.w	r0, #4294967295
 800a250:	b01d      	add	sp, #116	; 0x74
 800a252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a256:	4b7b      	ldr	r3, [pc, #492]	; (800a444 <_vfiprintf_r+0x244>)
 800a258:	429d      	cmp	r5, r3
 800a25a:	d101      	bne.n	800a260 <_vfiprintf_r+0x60>
 800a25c:	68b5      	ldr	r5, [r6, #8]
 800a25e:	e7df      	b.n	800a220 <_vfiprintf_r+0x20>
 800a260:	4b79      	ldr	r3, [pc, #484]	; (800a448 <_vfiprintf_r+0x248>)
 800a262:	429d      	cmp	r5, r3
 800a264:	bf08      	it	eq
 800a266:	68f5      	ldreq	r5, [r6, #12]
 800a268:	e7da      	b.n	800a220 <_vfiprintf_r+0x20>
 800a26a:	89ab      	ldrh	r3, [r5, #12]
 800a26c:	0598      	lsls	r0, r3, #22
 800a26e:	d4ed      	bmi.n	800a24c <_vfiprintf_r+0x4c>
 800a270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a272:	f7ff ff46 	bl	800a102 <__retarget_lock_release_recursive>
 800a276:	e7e9      	b.n	800a24c <_vfiprintf_r+0x4c>
 800a278:	2300      	movs	r3, #0
 800a27a:	9309      	str	r3, [sp, #36]	; 0x24
 800a27c:	2320      	movs	r3, #32
 800a27e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a282:	f8cd 800c 	str.w	r8, [sp, #12]
 800a286:	2330      	movs	r3, #48	; 0x30
 800a288:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a44c <_vfiprintf_r+0x24c>
 800a28c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a290:	f04f 0901 	mov.w	r9, #1
 800a294:	4623      	mov	r3, r4
 800a296:	469a      	mov	sl, r3
 800a298:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a29c:	b10a      	cbz	r2, 800a2a2 <_vfiprintf_r+0xa2>
 800a29e:	2a25      	cmp	r2, #37	; 0x25
 800a2a0:	d1f9      	bne.n	800a296 <_vfiprintf_r+0x96>
 800a2a2:	ebba 0b04 	subs.w	fp, sl, r4
 800a2a6:	d00b      	beq.n	800a2c0 <_vfiprintf_r+0xc0>
 800a2a8:	465b      	mov	r3, fp
 800a2aa:	4622      	mov	r2, r4
 800a2ac:	4629      	mov	r1, r5
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	f7ff ff94 	bl	800a1dc <__sfputs_r>
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	f000 80aa 	beq.w	800a40e <_vfiprintf_r+0x20e>
 800a2ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2bc:	445a      	add	r2, fp
 800a2be:	9209      	str	r2, [sp, #36]	; 0x24
 800a2c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f000 80a2 	beq.w	800a40e <_vfiprintf_r+0x20e>
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2d4:	f10a 0a01 	add.w	sl, sl, #1
 800a2d8:	9304      	str	r3, [sp, #16]
 800a2da:	9307      	str	r3, [sp, #28]
 800a2dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2e0:	931a      	str	r3, [sp, #104]	; 0x68
 800a2e2:	4654      	mov	r4, sl
 800a2e4:	2205      	movs	r2, #5
 800a2e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ea:	4858      	ldr	r0, [pc, #352]	; (800a44c <_vfiprintf_r+0x24c>)
 800a2ec:	f7f5 ff90 	bl	8000210 <memchr>
 800a2f0:	9a04      	ldr	r2, [sp, #16]
 800a2f2:	b9d8      	cbnz	r0, 800a32c <_vfiprintf_r+0x12c>
 800a2f4:	06d1      	lsls	r1, r2, #27
 800a2f6:	bf44      	itt	mi
 800a2f8:	2320      	movmi	r3, #32
 800a2fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2fe:	0713      	lsls	r3, r2, #28
 800a300:	bf44      	itt	mi
 800a302:	232b      	movmi	r3, #43	; 0x2b
 800a304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a308:	f89a 3000 	ldrb.w	r3, [sl]
 800a30c:	2b2a      	cmp	r3, #42	; 0x2a
 800a30e:	d015      	beq.n	800a33c <_vfiprintf_r+0x13c>
 800a310:	9a07      	ldr	r2, [sp, #28]
 800a312:	4654      	mov	r4, sl
 800a314:	2000      	movs	r0, #0
 800a316:	f04f 0c0a 	mov.w	ip, #10
 800a31a:	4621      	mov	r1, r4
 800a31c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a320:	3b30      	subs	r3, #48	; 0x30
 800a322:	2b09      	cmp	r3, #9
 800a324:	d94e      	bls.n	800a3c4 <_vfiprintf_r+0x1c4>
 800a326:	b1b0      	cbz	r0, 800a356 <_vfiprintf_r+0x156>
 800a328:	9207      	str	r2, [sp, #28]
 800a32a:	e014      	b.n	800a356 <_vfiprintf_r+0x156>
 800a32c:	eba0 0308 	sub.w	r3, r0, r8
 800a330:	fa09 f303 	lsl.w	r3, r9, r3
 800a334:	4313      	orrs	r3, r2
 800a336:	9304      	str	r3, [sp, #16]
 800a338:	46a2      	mov	sl, r4
 800a33a:	e7d2      	b.n	800a2e2 <_vfiprintf_r+0xe2>
 800a33c:	9b03      	ldr	r3, [sp, #12]
 800a33e:	1d19      	adds	r1, r3, #4
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	9103      	str	r1, [sp, #12]
 800a344:	2b00      	cmp	r3, #0
 800a346:	bfbb      	ittet	lt
 800a348:	425b      	neglt	r3, r3
 800a34a:	f042 0202 	orrlt.w	r2, r2, #2
 800a34e:	9307      	strge	r3, [sp, #28]
 800a350:	9307      	strlt	r3, [sp, #28]
 800a352:	bfb8      	it	lt
 800a354:	9204      	strlt	r2, [sp, #16]
 800a356:	7823      	ldrb	r3, [r4, #0]
 800a358:	2b2e      	cmp	r3, #46	; 0x2e
 800a35a:	d10c      	bne.n	800a376 <_vfiprintf_r+0x176>
 800a35c:	7863      	ldrb	r3, [r4, #1]
 800a35e:	2b2a      	cmp	r3, #42	; 0x2a
 800a360:	d135      	bne.n	800a3ce <_vfiprintf_r+0x1ce>
 800a362:	9b03      	ldr	r3, [sp, #12]
 800a364:	1d1a      	adds	r2, r3, #4
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	9203      	str	r2, [sp, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	bfb8      	it	lt
 800a36e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a372:	3402      	adds	r4, #2
 800a374:	9305      	str	r3, [sp, #20]
 800a376:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a45c <_vfiprintf_r+0x25c>
 800a37a:	7821      	ldrb	r1, [r4, #0]
 800a37c:	2203      	movs	r2, #3
 800a37e:	4650      	mov	r0, sl
 800a380:	f7f5 ff46 	bl	8000210 <memchr>
 800a384:	b140      	cbz	r0, 800a398 <_vfiprintf_r+0x198>
 800a386:	2340      	movs	r3, #64	; 0x40
 800a388:	eba0 000a 	sub.w	r0, r0, sl
 800a38c:	fa03 f000 	lsl.w	r0, r3, r0
 800a390:	9b04      	ldr	r3, [sp, #16]
 800a392:	4303      	orrs	r3, r0
 800a394:	3401      	adds	r4, #1
 800a396:	9304      	str	r3, [sp, #16]
 800a398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a39c:	482c      	ldr	r0, [pc, #176]	; (800a450 <_vfiprintf_r+0x250>)
 800a39e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3a2:	2206      	movs	r2, #6
 800a3a4:	f7f5 ff34 	bl	8000210 <memchr>
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	d03f      	beq.n	800a42c <_vfiprintf_r+0x22c>
 800a3ac:	4b29      	ldr	r3, [pc, #164]	; (800a454 <_vfiprintf_r+0x254>)
 800a3ae:	bb1b      	cbnz	r3, 800a3f8 <_vfiprintf_r+0x1f8>
 800a3b0:	9b03      	ldr	r3, [sp, #12]
 800a3b2:	3307      	adds	r3, #7
 800a3b4:	f023 0307 	bic.w	r3, r3, #7
 800a3b8:	3308      	adds	r3, #8
 800a3ba:	9303      	str	r3, [sp, #12]
 800a3bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3be:	443b      	add	r3, r7
 800a3c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a3c2:	e767      	b.n	800a294 <_vfiprintf_r+0x94>
 800a3c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3c8:	460c      	mov	r4, r1
 800a3ca:	2001      	movs	r0, #1
 800a3cc:	e7a5      	b.n	800a31a <_vfiprintf_r+0x11a>
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	3401      	adds	r4, #1
 800a3d2:	9305      	str	r3, [sp, #20]
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	f04f 0c0a 	mov.w	ip, #10
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3e0:	3a30      	subs	r2, #48	; 0x30
 800a3e2:	2a09      	cmp	r2, #9
 800a3e4:	d903      	bls.n	800a3ee <_vfiprintf_r+0x1ee>
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d0c5      	beq.n	800a376 <_vfiprintf_r+0x176>
 800a3ea:	9105      	str	r1, [sp, #20]
 800a3ec:	e7c3      	b.n	800a376 <_vfiprintf_r+0x176>
 800a3ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3f2:	4604      	mov	r4, r0
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e7f0      	b.n	800a3da <_vfiprintf_r+0x1da>
 800a3f8:	ab03      	add	r3, sp, #12
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	462a      	mov	r2, r5
 800a3fe:	4b16      	ldr	r3, [pc, #88]	; (800a458 <_vfiprintf_r+0x258>)
 800a400:	a904      	add	r1, sp, #16
 800a402:	4630      	mov	r0, r6
 800a404:	f7fb f9be 	bl	8005784 <_printf_float>
 800a408:	4607      	mov	r7, r0
 800a40a:	1c78      	adds	r0, r7, #1
 800a40c:	d1d6      	bne.n	800a3bc <_vfiprintf_r+0x1bc>
 800a40e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a410:	07d9      	lsls	r1, r3, #31
 800a412:	d405      	bmi.n	800a420 <_vfiprintf_r+0x220>
 800a414:	89ab      	ldrh	r3, [r5, #12]
 800a416:	059a      	lsls	r2, r3, #22
 800a418:	d402      	bmi.n	800a420 <_vfiprintf_r+0x220>
 800a41a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a41c:	f7ff fe71 	bl	800a102 <__retarget_lock_release_recursive>
 800a420:	89ab      	ldrh	r3, [r5, #12]
 800a422:	065b      	lsls	r3, r3, #25
 800a424:	f53f af12 	bmi.w	800a24c <_vfiprintf_r+0x4c>
 800a428:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a42a:	e711      	b.n	800a250 <_vfiprintf_r+0x50>
 800a42c:	ab03      	add	r3, sp, #12
 800a42e:	9300      	str	r3, [sp, #0]
 800a430:	462a      	mov	r2, r5
 800a432:	4b09      	ldr	r3, [pc, #36]	; (800a458 <_vfiprintf_r+0x258>)
 800a434:	a904      	add	r1, sp, #16
 800a436:	4630      	mov	r0, r6
 800a438:	f7fb fc48 	bl	8005ccc <_printf_i>
 800a43c:	e7e4      	b.n	800a408 <_vfiprintf_r+0x208>
 800a43e:	bf00      	nop
 800a440:	0800c9e4 	.word	0x0800c9e4
 800a444:	0800ca04 	.word	0x0800ca04
 800a448:	0800c9c4 	.word	0x0800c9c4
 800a44c:	0800c95c 	.word	0x0800c95c
 800a450:	0800c966 	.word	0x0800c966
 800a454:	08005785 	.word	0x08005785
 800a458:	0800a1dd 	.word	0x0800a1dd
 800a45c:	0800c962 	.word	0x0800c962

0800a460 <__swbuf_r>:
 800a460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a462:	460e      	mov	r6, r1
 800a464:	4614      	mov	r4, r2
 800a466:	4605      	mov	r5, r0
 800a468:	b118      	cbz	r0, 800a472 <__swbuf_r+0x12>
 800a46a:	6983      	ldr	r3, [r0, #24]
 800a46c:	b90b      	cbnz	r3, 800a472 <__swbuf_r+0x12>
 800a46e:	f7ff fd97 	bl	8009fa0 <__sinit>
 800a472:	4b21      	ldr	r3, [pc, #132]	; (800a4f8 <__swbuf_r+0x98>)
 800a474:	429c      	cmp	r4, r3
 800a476:	d12b      	bne.n	800a4d0 <__swbuf_r+0x70>
 800a478:	686c      	ldr	r4, [r5, #4]
 800a47a:	69a3      	ldr	r3, [r4, #24]
 800a47c:	60a3      	str	r3, [r4, #8]
 800a47e:	89a3      	ldrh	r3, [r4, #12]
 800a480:	071a      	lsls	r2, r3, #28
 800a482:	d52f      	bpl.n	800a4e4 <__swbuf_r+0x84>
 800a484:	6923      	ldr	r3, [r4, #16]
 800a486:	b36b      	cbz	r3, 800a4e4 <__swbuf_r+0x84>
 800a488:	6923      	ldr	r3, [r4, #16]
 800a48a:	6820      	ldr	r0, [r4, #0]
 800a48c:	1ac0      	subs	r0, r0, r3
 800a48e:	6963      	ldr	r3, [r4, #20]
 800a490:	b2f6      	uxtb	r6, r6
 800a492:	4283      	cmp	r3, r0
 800a494:	4637      	mov	r7, r6
 800a496:	dc04      	bgt.n	800a4a2 <__swbuf_r+0x42>
 800a498:	4621      	mov	r1, r4
 800a49a:	4628      	mov	r0, r5
 800a49c:	f7ff fcec 	bl	8009e78 <_fflush_r>
 800a4a0:	bb30      	cbnz	r0, 800a4f0 <__swbuf_r+0x90>
 800a4a2:	68a3      	ldr	r3, [r4, #8]
 800a4a4:	3b01      	subs	r3, #1
 800a4a6:	60a3      	str	r3, [r4, #8]
 800a4a8:	6823      	ldr	r3, [r4, #0]
 800a4aa:	1c5a      	adds	r2, r3, #1
 800a4ac:	6022      	str	r2, [r4, #0]
 800a4ae:	701e      	strb	r6, [r3, #0]
 800a4b0:	6963      	ldr	r3, [r4, #20]
 800a4b2:	3001      	adds	r0, #1
 800a4b4:	4283      	cmp	r3, r0
 800a4b6:	d004      	beq.n	800a4c2 <__swbuf_r+0x62>
 800a4b8:	89a3      	ldrh	r3, [r4, #12]
 800a4ba:	07db      	lsls	r3, r3, #31
 800a4bc:	d506      	bpl.n	800a4cc <__swbuf_r+0x6c>
 800a4be:	2e0a      	cmp	r6, #10
 800a4c0:	d104      	bne.n	800a4cc <__swbuf_r+0x6c>
 800a4c2:	4621      	mov	r1, r4
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	f7ff fcd7 	bl	8009e78 <_fflush_r>
 800a4ca:	b988      	cbnz	r0, 800a4f0 <__swbuf_r+0x90>
 800a4cc:	4638      	mov	r0, r7
 800a4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4d0:	4b0a      	ldr	r3, [pc, #40]	; (800a4fc <__swbuf_r+0x9c>)
 800a4d2:	429c      	cmp	r4, r3
 800a4d4:	d101      	bne.n	800a4da <__swbuf_r+0x7a>
 800a4d6:	68ac      	ldr	r4, [r5, #8]
 800a4d8:	e7cf      	b.n	800a47a <__swbuf_r+0x1a>
 800a4da:	4b09      	ldr	r3, [pc, #36]	; (800a500 <__swbuf_r+0xa0>)
 800a4dc:	429c      	cmp	r4, r3
 800a4de:	bf08      	it	eq
 800a4e0:	68ec      	ldreq	r4, [r5, #12]
 800a4e2:	e7ca      	b.n	800a47a <__swbuf_r+0x1a>
 800a4e4:	4621      	mov	r1, r4
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	f000 f80c 	bl	800a504 <__swsetup_r>
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	d0cb      	beq.n	800a488 <__swbuf_r+0x28>
 800a4f0:	f04f 37ff 	mov.w	r7, #4294967295
 800a4f4:	e7ea      	b.n	800a4cc <__swbuf_r+0x6c>
 800a4f6:	bf00      	nop
 800a4f8:	0800c9e4 	.word	0x0800c9e4
 800a4fc:	0800ca04 	.word	0x0800ca04
 800a500:	0800c9c4 	.word	0x0800c9c4

0800a504 <__swsetup_r>:
 800a504:	4b32      	ldr	r3, [pc, #200]	; (800a5d0 <__swsetup_r+0xcc>)
 800a506:	b570      	push	{r4, r5, r6, lr}
 800a508:	681d      	ldr	r5, [r3, #0]
 800a50a:	4606      	mov	r6, r0
 800a50c:	460c      	mov	r4, r1
 800a50e:	b125      	cbz	r5, 800a51a <__swsetup_r+0x16>
 800a510:	69ab      	ldr	r3, [r5, #24]
 800a512:	b913      	cbnz	r3, 800a51a <__swsetup_r+0x16>
 800a514:	4628      	mov	r0, r5
 800a516:	f7ff fd43 	bl	8009fa0 <__sinit>
 800a51a:	4b2e      	ldr	r3, [pc, #184]	; (800a5d4 <__swsetup_r+0xd0>)
 800a51c:	429c      	cmp	r4, r3
 800a51e:	d10f      	bne.n	800a540 <__swsetup_r+0x3c>
 800a520:	686c      	ldr	r4, [r5, #4]
 800a522:	89a3      	ldrh	r3, [r4, #12]
 800a524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a528:	0719      	lsls	r1, r3, #28
 800a52a:	d42c      	bmi.n	800a586 <__swsetup_r+0x82>
 800a52c:	06dd      	lsls	r5, r3, #27
 800a52e:	d411      	bmi.n	800a554 <__swsetup_r+0x50>
 800a530:	2309      	movs	r3, #9
 800a532:	6033      	str	r3, [r6, #0]
 800a534:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a538:	81a3      	strh	r3, [r4, #12]
 800a53a:	f04f 30ff 	mov.w	r0, #4294967295
 800a53e:	e03e      	b.n	800a5be <__swsetup_r+0xba>
 800a540:	4b25      	ldr	r3, [pc, #148]	; (800a5d8 <__swsetup_r+0xd4>)
 800a542:	429c      	cmp	r4, r3
 800a544:	d101      	bne.n	800a54a <__swsetup_r+0x46>
 800a546:	68ac      	ldr	r4, [r5, #8]
 800a548:	e7eb      	b.n	800a522 <__swsetup_r+0x1e>
 800a54a:	4b24      	ldr	r3, [pc, #144]	; (800a5dc <__swsetup_r+0xd8>)
 800a54c:	429c      	cmp	r4, r3
 800a54e:	bf08      	it	eq
 800a550:	68ec      	ldreq	r4, [r5, #12]
 800a552:	e7e6      	b.n	800a522 <__swsetup_r+0x1e>
 800a554:	0758      	lsls	r0, r3, #29
 800a556:	d512      	bpl.n	800a57e <__swsetup_r+0x7a>
 800a558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a55a:	b141      	cbz	r1, 800a56e <__swsetup_r+0x6a>
 800a55c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a560:	4299      	cmp	r1, r3
 800a562:	d002      	beq.n	800a56a <__swsetup_r+0x66>
 800a564:	4630      	mov	r0, r6
 800a566:	f7fe fd4f 	bl	8009008 <_free_r>
 800a56a:	2300      	movs	r3, #0
 800a56c:	6363      	str	r3, [r4, #52]	; 0x34
 800a56e:	89a3      	ldrh	r3, [r4, #12]
 800a570:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a574:	81a3      	strh	r3, [r4, #12]
 800a576:	2300      	movs	r3, #0
 800a578:	6063      	str	r3, [r4, #4]
 800a57a:	6923      	ldr	r3, [r4, #16]
 800a57c:	6023      	str	r3, [r4, #0]
 800a57e:	89a3      	ldrh	r3, [r4, #12]
 800a580:	f043 0308 	orr.w	r3, r3, #8
 800a584:	81a3      	strh	r3, [r4, #12]
 800a586:	6923      	ldr	r3, [r4, #16]
 800a588:	b94b      	cbnz	r3, 800a59e <__swsetup_r+0x9a>
 800a58a:	89a3      	ldrh	r3, [r4, #12]
 800a58c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a594:	d003      	beq.n	800a59e <__swsetup_r+0x9a>
 800a596:	4621      	mov	r1, r4
 800a598:	4630      	mov	r0, r6
 800a59a:	f000 f84d 	bl	800a638 <__smakebuf_r>
 800a59e:	89a0      	ldrh	r0, [r4, #12]
 800a5a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5a4:	f010 0301 	ands.w	r3, r0, #1
 800a5a8:	d00a      	beq.n	800a5c0 <__swsetup_r+0xbc>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	60a3      	str	r3, [r4, #8]
 800a5ae:	6963      	ldr	r3, [r4, #20]
 800a5b0:	425b      	negs	r3, r3
 800a5b2:	61a3      	str	r3, [r4, #24]
 800a5b4:	6923      	ldr	r3, [r4, #16]
 800a5b6:	b943      	cbnz	r3, 800a5ca <__swsetup_r+0xc6>
 800a5b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5bc:	d1ba      	bne.n	800a534 <__swsetup_r+0x30>
 800a5be:	bd70      	pop	{r4, r5, r6, pc}
 800a5c0:	0781      	lsls	r1, r0, #30
 800a5c2:	bf58      	it	pl
 800a5c4:	6963      	ldrpl	r3, [r4, #20]
 800a5c6:	60a3      	str	r3, [r4, #8]
 800a5c8:	e7f4      	b.n	800a5b4 <__swsetup_r+0xb0>
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	e7f7      	b.n	800a5be <__swsetup_r+0xba>
 800a5ce:	bf00      	nop
 800a5d0:	20000018 	.word	0x20000018
 800a5d4:	0800c9e4 	.word	0x0800c9e4
 800a5d8:	0800ca04 	.word	0x0800ca04
 800a5dc:	0800c9c4 	.word	0x0800c9c4

0800a5e0 <abort>:
 800a5e0:	b508      	push	{r3, lr}
 800a5e2:	2006      	movs	r0, #6
 800a5e4:	f000 f898 	bl	800a718 <raise>
 800a5e8:	2001      	movs	r0, #1
 800a5ea:	f7f8 fade 	bl	8002baa <_exit>

0800a5ee <__swhatbuf_r>:
 800a5ee:	b570      	push	{r4, r5, r6, lr}
 800a5f0:	460e      	mov	r6, r1
 800a5f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f6:	2900      	cmp	r1, #0
 800a5f8:	b096      	sub	sp, #88	; 0x58
 800a5fa:	4614      	mov	r4, r2
 800a5fc:	461d      	mov	r5, r3
 800a5fe:	da08      	bge.n	800a612 <__swhatbuf_r+0x24>
 800a600:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a604:	2200      	movs	r2, #0
 800a606:	602a      	str	r2, [r5, #0]
 800a608:	061a      	lsls	r2, r3, #24
 800a60a:	d410      	bmi.n	800a62e <__swhatbuf_r+0x40>
 800a60c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a610:	e00e      	b.n	800a630 <__swhatbuf_r+0x42>
 800a612:	466a      	mov	r2, sp
 800a614:	f000 f89c 	bl	800a750 <_fstat_r>
 800a618:	2800      	cmp	r0, #0
 800a61a:	dbf1      	blt.n	800a600 <__swhatbuf_r+0x12>
 800a61c:	9a01      	ldr	r2, [sp, #4]
 800a61e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a622:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a626:	425a      	negs	r2, r3
 800a628:	415a      	adcs	r2, r3
 800a62a:	602a      	str	r2, [r5, #0]
 800a62c:	e7ee      	b.n	800a60c <__swhatbuf_r+0x1e>
 800a62e:	2340      	movs	r3, #64	; 0x40
 800a630:	2000      	movs	r0, #0
 800a632:	6023      	str	r3, [r4, #0]
 800a634:	b016      	add	sp, #88	; 0x58
 800a636:	bd70      	pop	{r4, r5, r6, pc}

0800a638 <__smakebuf_r>:
 800a638:	898b      	ldrh	r3, [r1, #12]
 800a63a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a63c:	079d      	lsls	r5, r3, #30
 800a63e:	4606      	mov	r6, r0
 800a640:	460c      	mov	r4, r1
 800a642:	d507      	bpl.n	800a654 <__smakebuf_r+0x1c>
 800a644:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a648:	6023      	str	r3, [r4, #0]
 800a64a:	6123      	str	r3, [r4, #16]
 800a64c:	2301      	movs	r3, #1
 800a64e:	6163      	str	r3, [r4, #20]
 800a650:	b002      	add	sp, #8
 800a652:	bd70      	pop	{r4, r5, r6, pc}
 800a654:	ab01      	add	r3, sp, #4
 800a656:	466a      	mov	r2, sp
 800a658:	f7ff ffc9 	bl	800a5ee <__swhatbuf_r>
 800a65c:	9900      	ldr	r1, [sp, #0]
 800a65e:	4605      	mov	r5, r0
 800a660:	4630      	mov	r0, r6
 800a662:	f7fe fd3d 	bl	80090e0 <_malloc_r>
 800a666:	b948      	cbnz	r0, 800a67c <__smakebuf_r+0x44>
 800a668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a66c:	059a      	lsls	r2, r3, #22
 800a66e:	d4ef      	bmi.n	800a650 <__smakebuf_r+0x18>
 800a670:	f023 0303 	bic.w	r3, r3, #3
 800a674:	f043 0302 	orr.w	r3, r3, #2
 800a678:	81a3      	strh	r3, [r4, #12]
 800a67a:	e7e3      	b.n	800a644 <__smakebuf_r+0xc>
 800a67c:	4b0d      	ldr	r3, [pc, #52]	; (800a6b4 <__smakebuf_r+0x7c>)
 800a67e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a680:	89a3      	ldrh	r3, [r4, #12]
 800a682:	6020      	str	r0, [r4, #0]
 800a684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a688:	81a3      	strh	r3, [r4, #12]
 800a68a:	9b00      	ldr	r3, [sp, #0]
 800a68c:	6163      	str	r3, [r4, #20]
 800a68e:	9b01      	ldr	r3, [sp, #4]
 800a690:	6120      	str	r0, [r4, #16]
 800a692:	b15b      	cbz	r3, 800a6ac <__smakebuf_r+0x74>
 800a694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a698:	4630      	mov	r0, r6
 800a69a:	f000 f86b 	bl	800a774 <_isatty_r>
 800a69e:	b128      	cbz	r0, 800a6ac <__smakebuf_r+0x74>
 800a6a0:	89a3      	ldrh	r3, [r4, #12]
 800a6a2:	f023 0303 	bic.w	r3, r3, #3
 800a6a6:	f043 0301 	orr.w	r3, r3, #1
 800a6aa:	81a3      	strh	r3, [r4, #12]
 800a6ac:	89a0      	ldrh	r0, [r4, #12]
 800a6ae:	4305      	orrs	r5, r0
 800a6b0:	81a5      	strh	r5, [r4, #12]
 800a6b2:	e7cd      	b.n	800a650 <__smakebuf_r+0x18>
 800a6b4:	08009f39 	.word	0x08009f39

0800a6b8 <_malloc_usable_size_r>:
 800a6b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6bc:	1f18      	subs	r0, r3, #4
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	bfbc      	itt	lt
 800a6c2:	580b      	ldrlt	r3, [r1, r0]
 800a6c4:	18c0      	addlt	r0, r0, r3
 800a6c6:	4770      	bx	lr

0800a6c8 <_raise_r>:
 800a6c8:	291f      	cmp	r1, #31
 800a6ca:	b538      	push	{r3, r4, r5, lr}
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	460d      	mov	r5, r1
 800a6d0:	d904      	bls.n	800a6dc <_raise_r+0x14>
 800a6d2:	2316      	movs	r3, #22
 800a6d4:	6003      	str	r3, [r0, #0]
 800a6d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6da:	bd38      	pop	{r3, r4, r5, pc}
 800a6dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a6de:	b112      	cbz	r2, 800a6e6 <_raise_r+0x1e>
 800a6e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6e4:	b94b      	cbnz	r3, 800a6fa <_raise_r+0x32>
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f000 f830 	bl	800a74c <_getpid_r>
 800a6ec:	462a      	mov	r2, r5
 800a6ee:	4601      	mov	r1, r0
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6f6:	f000 b817 	b.w	800a728 <_kill_r>
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d00a      	beq.n	800a714 <_raise_r+0x4c>
 800a6fe:	1c59      	adds	r1, r3, #1
 800a700:	d103      	bne.n	800a70a <_raise_r+0x42>
 800a702:	2316      	movs	r3, #22
 800a704:	6003      	str	r3, [r0, #0]
 800a706:	2001      	movs	r0, #1
 800a708:	e7e7      	b.n	800a6da <_raise_r+0x12>
 800a70a:	2400      	movs	r4, #0
 800a70c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a710:	4628      	mov	r0, r5
 800a712:	4798      	blx	r3
 800a714:	2000      	movs	r0, #0
 800a716:	e7e0      	b.n	800a6da <_raise_r+0x12>

0800a718 <raise>:
 800a718:	4b02      	ldr	r3, [pc, #8]	; (800a724 <raise+0xc>)
 800a71a:	4601      	mov	r1, r0
 800a71c:	6818      	ldr	r0, [r3, #0]
 800a71e:	f7ff bfd3 	b.w	800a6c8 <_raise_r>
 800a722:	bf00      	nop
 800a724:	20000018 	.word	0x20000018

0800a728 <_kill_r>:
 800a728:	b538      	push	{r3, r4, r5, lr}
 800a72a:	4d07      	ldr	r5, [pc, #28]	; (800a748 <_kill_r+0x20>)
 800a72c:	2300      	movs	r3, #0
 800a72e:	4604      	mov	r4, r0
 800a730:	4608      	mov	r0, r1
 800a732:	4611      	mov	r1, r2
 800a734:	602b      	str	r3, [r5, #0]
 800a736:	f7f8 fa28 	bl	8002b8a <_kill>
 800a73a:	1c43      	adds	r3, r0, #1
 800a73c:	d102      	bne.n	800a744 <_kill_r+0x1c>
 800a73e:	682b      	ldr	r3, [r5, #0]
 800a740:	b103      	cbz	r3, 800a744 <_kill_r+0x1c>
 800a742:	6023      	str	r3, [r4, #0]
 800a744:	bd38      	pop	{r3, r4, r5, pc}
 800a746:	bf00      	nop
 800a748:	20000d40 	.word	0x20000d40

0800a74c <_getpid_r>:
 800a74c:	f7f8 ba15 	b.w	8002b7a <_getpid>

0800a750 <_fstat_r>:
 800a750:	b538      	push	{r3, r4, r5, lr}
 800a752:	4d07      	ldr	r5, [pc, #28]	; (800a770 <_fstat_r+0x20>)
 800a754:	2300      	movs	r3, #0
 800a756:	4604      	mov	r4, r0
 800a758:	4608      	mov	r0, r1
 800a75a:	4611      	mov	r1, r2
 800a75c:	602b      	str	r3, [r5, #0]
 800a75e:	f7f8 fa73 	bl	8002c48 <_fstat>
 800a762:	1c43      	adds	r3, r0, #1
 800a764:	d102      	bne.n	800a76c <_fstat_r+0x1c>
 800a766:	682b      	ldr	r3, [r5, #0]
 800a768:	b103      	cbz	r3, 800a76c <_fstat_r+0x1c>
 800a76a:	6023      	str	r3, [r4, #0]
 800a76c:	bd38      	pop	{r3, r4, r5, pc}
 800a76e:	bf00      	nop
 800a770:	20000d40 	.word	0x20000d40

0800a774 <_isatty_r>:
 800a774:	b538      	push	{r3, r4, r5, lr}
 800a776:	4d06      	ldr	r5, [pc, #24]	; (800a790 <_isatty_r+0x1c>)
 800a778:	2300      	movs	r3, #0
 800a77a:	4604      	mov	r4, r0
 800a77c:	4608      	mov	r0, r1
 800a77e:	602b      	str	r3, [r5, #0]
 800a780:	f7f8 fa72 	bl	8002c68 <_isatty>
 800a784:	1c43      	adds	r3, r0, #1
 800a786:	d102      	bne.n	800a78e <_isatty_r+0x1a>
 800a788:	682b      	ldr	r3, [r5, #0]
 800a78a:	b103      	cbz	r3, 800a78e <_isatty_r+0x1a>
 800a78c:	6023      	str	r3, [r4, #0]
 800a78e:	bd38      	pop	{r3, r4, r5, pc}
 800a790:	20000d40 	.word	0x20000d40
 800a794:	00000000 	.word	0x00000000

0800a798 <cos>:
 800a798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a79a:	ec53 2b10 	vmov	r2, r3, d0
 800a79e:	4826      	ldr	r0, [pc, #152]	; (800a838 <cos+0xa0>)
 800a7a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a7a4:	4281      	cmp	r1, r0
 800a7a6:	dc06      	bgt.n	800a7b6 <cos+0x1e>
 800a7a8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a830 <cos+0x98>
 800a7ac:	b005      	add	sp, #20
 800a7ae:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7b2:	f000 bd45 	b.w	800b240 <__kernel_cos>
 800a7b6:	4821      	ldr	r0, [pc, #132]	; (800a83c <cos+0xa4>)
 800a7b8:	4281      	cmp	r1, r0
 800a7ba:	dd09      	ble.n	800a7d0 <cos+0x38>
 800a7bc:	ee10 0a10 	vmov	r0, s0
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	f7f5 fd79 	bl	80002b8 <__aeabi_dsub>
 800a7c6:	ec41 0b10 	vmov	d0, r0, r1
 800a7ca:	b005      	add	sp, #20
 800a7cc:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7d0:	4668      	mov	r0, sp
 800a7d2:	f000 fb29 	bl	800ae28 <__ieee754_rem_pio2>
 800a7d6:	f000 0003 	and.w	r0, r0, #3
 800a7da:	2801      	cmp	r0, #1
 800a7dc:	d00b      	beq.n	800a7f6 <cos+0x5e>
 800a7de:	2802      	cmp	r0, #2
 800a7e0:	d016      	beq.n	800a810 <cos+0x78>
 800a7e2:	b9e0      	cbnz	r0, 800a81e <cos+0x86>
 800a7e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7e8:	ed9d 0b00 	vldr	d0, [sp]
 800a7ec:	f000 fd28 	bl	800b240 <__kernel_cos>
 800a7f0:	ec51 0b10 	vmov	r0, r1, d0
 800a7f4:	e7e7      	b.n	800a7c6 <cos+0x2e>
 800a7f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7fa:	ed9d 0b00 	vldr	d0, [sp]
 800a7fe:	f001 f937 	bl	800ba70 <__kernel_sin>
 800a802:	ec53 2b10 	vmov	r2, r3, d0
 800a806:	ee10 0a10 	vmov	r0, s0
 800a80a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a80e:	e7da      	b.n	800a7c6 <cos+0x2e>
 800a810:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a814:	ed9d 0b00 	vldr	d0, [sp]
 800a818:	f000 fd12 	bl	800b240 <__kernel_cos>
 800a81c:	e7f1      	b.n	800a802 <cos+0x6a>
 800a81e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a822:	ed9d 0b00 	vldr	d0, [sp]
 800a826:	2001      	movs	r0, #1
 800a828:	f001 f922 	bl	800ba70 <__kernel_sin>
 800a82c:	e7e0      	b.n	800a7f0 <cos+0x58>
 800a82e:	bf00      	nop
	...
 800a838:	3fe921fb 	.word	0x3fe921fb
 800a83c:	7fefffff 	.word	0x7fefffff

0800a840 <sin>:
 800a840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a842:	ec53 2b10 	vmov	r2, r3, d0
 800a846:	4828      	ldr	r0, [pc, #160]	; (800a8e8 <sin+0xa8>)
 800a848:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a84c:	4281      	cmp	r1, r0
 800a84e:	dc07      	bgt.n	800a860 <sin+0x20>
 800a850:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a8e0 <sin+0xa0>
 800a854:	2000      	movs	r0, #0
 800a856:	b005      	add	sp, #20
 800a858:	f85d eb04 	ldr.w	lr, [sp], #4
 800a85c:	f001 b908 	b.w	800ba70 <__kernel_sin>
 800a860:	4822      	ldr	r0, [pc, #136]	; (800a8ec <sin+0xac>)
 800a862:	4281      	cmp	r1, r0
 800a864:	dd09      	ble.n	800a87a <sin+0x3a>
 800a866:	ee10 0a10 	vmov	r0, s0
 800a86a:	4619      	mov	r1, r3
 800a86c:	f7f5 fd24 	bl	80002b8 <__aeabi_dsub>
 800a870:	ec41 0b10 	vmov	d0, r0, r1
 800a874:	b005      	add	sp, #20
 800a876:	f85d fb04 	ldr.w	pc, [sp], #4
 800a87a:	4668      	mov	r0, sp
 800a87c:	f000 fad4 	bl	800ae28 <__ieee754_rem_pio2>
 800a880:	f000 0003 	and.w	r0, r0, #3
 800a884:	2801      	cmp	r0, #1
 800a886:	d00c      	beq.n	800a8a2 <sin+0x62>
 800a888:	2802      	cmp	r0, #2
 800a88a:	d011      	beq.n	800a8b0 <sin+0x70>
 800a88c:	b9f0      	cbnz	r0, 800a8cc <sin+0x8c>
 800a88e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a892:	ed9d 0b00 	vldr	d0, [sp]
 800a896:	2001      	movs	r0, #1
 800a898:	f001 f8ea 	bl	800ba70 <__kernel_sin>
 800a89c:	ec51 0b10 	vmov	r0, r1, d0
 800a8a0:	e7e6      	b.n	800a870 <sin+0x30>
 800a8a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a8a6:	ed9d 0b00 	vldr	d0, [sp]
 800a8aa:	f000 fcc9 	bl	800b240 <__kernel_cos>
 800a8ae:	e7f5      	b.n	800a89c <sin+0x5c>
 800a8b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a8b4:	ed9d 0b00 	vldr	d0, [sp]
 800a8b8:	2001      	movs	r0, #1
 800a8ba:	f001 f8d9 	bl	800ba70 <__kernel_sin>
 800a8be:	ec53 2b10 	vmov	r2, r3, d0
 800a8c2:	ee10 0a10 	vmov	r0, s0
 800a8c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a8ca:	e7d1      	b.n	800a870 <sin+0x30>
 800a8cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a8d0:	ed9d 0b00 	vldr	d0, [sp]
 800a8d4:	f000 fcb4 	bl	800b240 <__kernel_cos>
 800a8d8:	e7f1      	b.n	800a8be <sin+0x7e>
 800a8da:	bf00      	nop
 800a8dc:	f3af 8000 	nop.w
	...
 800a8e8:	3fe921fb 	.word	0x3fe921fb
 800a8ec:	7fefffff 	.word	0x7fefffff

0800a8f0 <atan2>:
 800a8f0:	f000 b84a 	b.w	800a988 <__ieee754_atan2>
 800a8f4:	0000      	movs	r0, r0
	...

0800a8f8 <exp>:
 800a8f8:	b538      	push	{r3, r4, r5, lr}
 800a8fa:	ed2d 8b02 	vpush	{d8}
 800a8fe:	ec55 4b10 	vmov	r4, r5, d0
 800a902:	f000 f90d 	bl	800ab20 <__ieee754_exp>
 800a906:	eeb0 8a40 	vmov.f32	s16, s0
 800a90a:	eef0 8a60 	vmov.f32	s17, s1
 800a90e:	ec45 4b10 	vmov	d0, r4, r5
 800a912:	f001 fb46 	bl	800bfa2 <finite>
 800a916:	b168      	cbz	r0, 800a934 <exp+0x3c>
 800a918:	a317      	add	r3, pc, #92	; (adr r3, 800a978 <exp+0x80>)
 800a91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91e:	4620      	mov	r0, r4
 800a920:	4629      	mov	r1, r5
 800a922:	f7f6 f911 	bl	8000b48 <__aeabi_dcmpgt>
 800a926:	b160      	cbz	r0, 800a942 <exp+0x4a>
 800a928:	f7fa fe5a 	bl	80055e0 <__errno>
 800a92c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800a968 <exp+0x70>
 800a930:	2322      	movs	r3, #34	; 0x22
 800a932:	6003      	str	r3, [r0, #0]
 800a934:	eeb0 0a48 	vmov.f32	s0, s16
 800a938:	eef0 0a68 	vmov.f32	s1, s17
 800a93c:	ecbd 8b02 	vpop	{d8}
 800a940:	bd38      	pop	{r3, r4, r5, pc}
 800a942:	a30f      	add	r3, pc, #60	; (adr r3, 800a980 <exp+0x88>)
 800a944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a948:	4620      	mov	r0, r4
 800a94a:	4629      	mov	r1, r5
 800a94c:	f7f6 f8de 	bl	8000b0c <__aeabi_dcmplt>
 800a950:	2800      	cmp	r0, #0
 800a952:	d0ef      	beq.n	800a934 <exp+0x3c>
 800a954:	f7fa fe44 	bl	80055e0 <__errno>
 800a958:	2322      	movs	r3, #34	; 0x22
 800a95a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800a970 <exp+0x78>
 800a95e:	6003      	str	r3, [r0, #0]
 800a960:	e7e8      	b.n	800a934 <exp+0x3c>
 800a962:	bf00      	nop
 800a964:	f3af 8000 	nop.w
 800a968:	00000000 	.word	0x00000000
 800a96c:	7ff00000 	.word	0x7ff00000
	...
 800a978:	fefa39ef 	.word	0xfefa39ef
 800a97c:	40862e42 	.word	0x40862e42
 800a980:	d52d3051 	.word	0xd52d3051
 800a984:	c0874910 	.word	0xc0874910

0800a988 <__ieee754_atan2>:
 800a988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a98c:	ec57 6b11 	vmov	r6, r7, d1
 800a990:	4273      	negs	r3, r6
 800a992:	f8df e184 	ldr.w	lr, [pc, #388]	; 800ab18 <__ieee754_atan2+0x190>
 800a996:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a99a:	4333      	orrs	r3, r6
 800a99c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a9a0:	4573      	cmp	r3, lr
 800a9a2:	ec51 0b10 	vmov	r0, r1, d0
 800a9a6:	ee11 8a10 	vmov	r8, s2
 800a9aa:	d80a      	bhi.n	800a9c2 <__ieee754_atan2+0x3a>
 800a9ac:	4244      	negs	r4, r0
 800a9ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a9b2:	4304      	orrs	r4, r0
 800a9b4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a9b8:	4574      	cmp	r4, lr
 800a9ba:	ee10 9a10 	vmov	r9, s0
 800a9be:	468c      	mov	ip, r1
 800a9c0:	d907      	bls.n	800a9d2 <__ieee754_atan2+0x4a>
 800a9c2:	4632      	mov	r2, r6
 800a9c4:	463b      	mov	r3, r7
 800a9c6:	f7f5 fc79 	bl	80002bc <__adddf3>
 800a9ca:	ec41 0b10 	vmov	d0, r0, r1
 800a9ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9d2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a9d6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a9da:	4334      	orrs	r4, r6
 800a9dc:	d103      	bne.n	800a9e6 <__ieee754_atan2+0x5e>
 800a9de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9e2:	f001 b935 	b.w	800bc50 <atan>
 800a9e6:	17bc      	asrs	r4, r7, #30
 800a9e8:	f004 0402 	and.w	r4, r4, #2
 800a9ec:	ea53 0909 	orrs.w	r9, r3, r9
 800a9f0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a9f4:	d107      	bne.n	800aa06 <__ieee754_atan2+0x7e>
 800a9f6:	2c02      	cmp	r4, #2
 800a9f8:	d060      	beq.n	800aabc <__ieee754_atan2+0x134>
 800a9fa:	2c03      	cmp	r4, #3
 800a9fc:	d1e5      	bne.n	800a9ca <__ieee754_atan2+0x42>
 800a9fe:	a142      	add	r1, pc, #264	; (adr r1, 800ab08 <__ieee754_atan2+0x180>)
 800aa00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa04:	e7e1      	b.n	800a9ca <__ieee754_atan2+0x42>
 800aa06:	ea52 0808 	orrs.w	r8, r2, r8
 800aa0a:	d106      	bne.n	800aa1a <__ieee754_atan2+0x92>
 800aa0c:	f1bc 0f00 	cmp.w	ip, #0
 800aa10:	da5f      	bge.n	800aad2 <__ieee754_atan2+0x14a>
 800aa12:	a13f      	add	r1, pc, #252	; (adr r1, 800ab10 <__ieee754_atan2+0x188>)
 800aa14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa18:	e7d7      	b.n	800a9ca <__ieee754_atan2+0x42>
 800aa1a:	4572      	cmp	r2, lr
 800aa1c:	d10f      	bne.n	800aa3e <__ieee754_atan2+0xb6>
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	f104 34ff 	add.w	r4, r4, #4294967295
 800aa24:	d107      	bne.n	800aa36 <__ieee754_atan2+0xae>
 800aa26:	2c02      	cmp	r4, #2
 800aa28:	d84c      	bhi.n	800aac4 <__ieee754_atan2+0x13c>
 800aa2a:	4b35      	ldr	r3, [pc, #212]	; (800ab00 <__ieee754_atan2+0x178>)
 800aa2c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800aa30:	e9d4 0100 	ldrd	r0, r1, [r4]
 800aa34:	e7c9      	b.n	800a9ca <__ieee754_atan2+0x42>
 800aa36:	2c02      	cmp	r4, #2
 800aa38:	d848      	bhi.n	800aacc <__ieee754_atan2+0x144>
 800aa3a:	4b32      	ldr	r3, [pc, #200]	; (800ab04 <__ieee754_atan2+0x17c>)
 800aa3c:	e7f6      	b.n	800aa2c <__ieee754_atan2+0xa4>
 800aa3e:	4573      	cmp	r3, lr
 800aa40:	d0e4      	beq.n	800aa0c <__ieee754_atan2+0x84>
 800aa42:	1a9b      	subs	r3, r3, r2
 800aa44:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800aa48:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aa4c:	da1e      	bge.n	800aa8c <__ieee754_atan2+0x104>
 800aa4e:	2f00      	cmp	r7, #0
 800aa50:	da01      	bge.n	800aa56 <__ieee754_atan2+0xce>
 800aa52:	323c      	adds	r2, #60	; 0x3c
 800aa54:	db1e      	blt.n	800aa94 <__ieee754_atan2+0x10c>
 800aa56:	4632      	mov	r2, r6
 800aa58:	463b      	mov	r3, r7
 800aa5a:	f7f5 ff0f 	bl	800087c <__aeabi_ddiv>
 800aa5e:	ec41 0b10 	vmov	d0, r0, r1
 800aa62:	f001 fa95 	bl	800bf90 <fabs>
 800aa66:	f001 f8f3 	bl	800bc50 <atan>
 800aa6a:	ec51 0b10 	vmov	r0, r1, d0
 800aa6e:	2c01      	cmp	r4, #1
 800aa70:	d013      	beq.n	800aa9a <__ieee754_atan2+0x112>
 800aa72:	2c02      	cmp	r4, #2
 800aa74:	d015      	beq.n	800aaa2 <__ieee754_atan2+0x11a>
 800aa76:	2c00      	cmp	r4, #0
 800aa78:	d0a7      	beq.n	800a9ca <__ieee754_atan2+0x42>
 800aa7a:	a319      	add	r3, pc, #100	; (adr r3, 800aae0 <__ieee754_atan2+0x158>)
 800aa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa80:	f7f5 fc1a 	bl	80002b8 <__aeabi_dsub>
 800aa84:	a318      	add	r3, pc, #96	; (adr r3, 800aae8 <__ieee754_atan2+0x160>)
 800aa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8a:	e014      	b.n	800aab6 <__ieee754_atan2+0x12e>
 800aa8c:	a118      	add	r1, pc, #96	; (adr r1, 800aaf0 <__ieee754_atan2+0x168>)
 800aa8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa92:	e7ec      	b.n	800aa6e <__ieee754_atan2+0xe6>
 800aa94:	2000      	movs	r0, #0
 800aa96:	2100      	movs	r1, #0
 800aa98:	e7e9      	b.n	800aa6e <__ieee754_atan2+0xe6>
 800aa9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	e793      	b.n	800a9ca <__ieee754_atan2+0x42>
 800aaa2:	a30f      	add	r3, pc, #60	; (adr r3, 800aae0 <__ieee754_atan2+0x158>)
 800aaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa8:	f7f5 fc06 	bl	80002b8 <__aeabi_dsub>
 800aaac:	4602      	mov	r2, r0
 800aaae:	460b      	mov	r3, r1
 800aab0:	a10d      	add	r1, pc, #52	; (adr r1, 800aae8 <__ieee754_atan2+0x160>)
 800aab2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aab6:	f7f5 fbff 	bl	80002b8 <__aeabi_dsub>
 800aaba:	e786      	b.n	800a9ca <__ieee754_atan2+0x42>
 800aabc:	a10a      	add	r1, pc, #40	; (adr r1, 800aae8 <__ieee754_atan2+0x160>)
 800aabe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aac2:	e782      	b.n	800a9ca <__ieee754_atan2+0x42>
 800aac4:	a10c      	add	r1, pc, #48	; (adr r1, 800aaf8 <__ieee754_atan2+0x170>)
 800aac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaca:	e77e      	b.n	800a9ca <__ieee754_atan2+0x42>
 800aacc:	2000      	movs	r0, #0
 800aace:	2100      	movs	r1, #0
 800aad0:	e77b      	b.n	800a9ca <__ieee754_atan2+0x42>
 800aad2:	a107      	add	r1, pc, #28	; (adr r1, 800aaf0 <__ieee754_atan2+0x168>)
 800aad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aad8:	e777      	b.n	800a9ca <__ieee754_atan2+0x42>
 800aada:	bf00      	nop
 800aadc:	f3af 8000 	nop.w
 800aae0:	33145c07 	.word	0x33145c07
 800aae4:	3ca1a626 	.word	0x3ca1a626
 800aae8:	54442d18 	.word	0x54442d18
 800aaec:	400921fb 	.word	0x400921fb
 800aaf0:	54442d18 	.word	0x54442d18
 800aaf4:	3ff921fb 	.word	0x3ff921fb
 800aaf8:	54442d18 	.word	0x54442d18
 800aafc:	3fe921fb 	.word	0x3fe921fb
 800ab00:	0800ca28 	.word	0x0800ca28
 800ab04:	0800ca40 	.word	0x0800ca40
 800ab08:	54442d18 	.word	0x54442d18
 800ab0c:	c00921fb 	.word	0xc00921fb
 800ab10:	54442d18 	.word	0x54442d18
 800ab14:	bff921fb 	.word	0xbff921fb
 800ab18:	7ff00000 	.word	0x7ff00000
 800ab1c:	00000000 	.word	0x00000000

0800ab20 <__ieee754_exp>:
 800ab20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab24:	ec55 4b10 	vmov	r4, r5, d0
 800ab28:	49b5      	ldr	r1, [pc, #724]	; (800ae00 <__ieee754_exp+0x2e0>)
 800ab2a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ab2e:	428b      	cmp	r3, r1
 800ab30:	ed2d 8b04 	vpush	{d8-d9}
 800ab34:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800ab38:	d93d      	bls.n	800abb6 <__ieee754_exp+0x96>
 800ab3a:	49b2      	ldr	r1, [pc, #712]	; (800ae04 <__ieee754_exp+0x2e4>)
 800ab3c:	428b      	cmp	r3, r1
 800ab3e:	d918      	bls.n	800ab72 <__ieee754_exp+0x52>
 800ab40:	ee10 3a10 	vmov	r3, s0
 800ab44:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	d009      	beq.n	800ab60 <__ieee754_exp+0x40>
 800ab4c:	ee10 2a10 	vmov	r2, s0
 800ab50:	462b      	mov	r3, r5
 800ab52:	4620      	mov	r0, r4
 800ab54:	4629      	mov	r1, r5
 800ab56:	f7f5 fbb1 	bl	80002bc <__adddf3>
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	460d      	mov	r5, r1
 800ab5e:	e002      	b.n	800ab66 <__ieee754_exp+0x46>
 800ab60:	b10e      	cbz	r6, 800ab66 <__ieee754_exp+0x46>
 800ab62:	2400      	movs	r4, #0
 800ab64:	2500      	movs	r5, #0
 800ab66:	ecbd 8b04 	vpop	{d8-d9}
 800ab6a:	ec45 4b10 	vmov	d0, r4, r5
 800ab6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab72:	a38d      	add	r3, pc, #564	; (adr r3, 800ada8 <__ieee754_exp+0x288>)
 800ab74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab78:	ee10 0a10 	vmov	r0, s0
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	f7f5 ffe3 	bl	8000b48 <__aeabi_dcmpgt>
 800ab82:	4607      	mov	r7, r0
 800ab84:	b130      	cbz	r0, 800ab94 <__ieee754_exp+0x74>
 800ab86:	ecbd 8b04 	vpop	{d8-d9}
 800ab8a:	2000      	movs	r0, #0
 800ab8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab90:	f001 b853 	b.w	800bc3a <__math_oflow>
 800ab94:	a386      	add	r3, pc, #536	; (adr r3, 800adb0 <__ieee754_exp+0x290>)
 800ab96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	4629      	mov	r1, r5
 800ab9e:	f7f5 ffb5 	bl	8000b0c <__aeabi_dcmplt>
 800aba2:	2800      	cmp	r0, #0
 800aba4:	f000 808b 	beq.w	800acbe <__ieee754_exp+0x19e>
 800aba8:	ecbd 8b04 	vpop	{d8-d9}
 800abac:	4638      	mov	r0, r7
 800abae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abb2:	f001 b839 	b.w	800bc28 <__math_uflow>
 800abb6:	4a94      	ldr	r2, [pc, #592]	; (800ae08 <__ieee754_exp+0x2e8>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	f240 80ac 	bls.w	800ad16 <__ieee754_exp+0x1f6>
 800abbe:	4a93      	ldr	r2, [pc, #588]	; (800ae0c <__ieee754_exp+0x2ec>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d87c      	bhi.n	800acbe <__ieee754_exp+0x19e>
 800abc4:	4b92      	ldr	r3, [pc, #584]	; (800ae10 <__ieee754_exp+0x2f0>)
 800abc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800abca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abce:	ee10 0a10 	vmov	r0, s0
 800abd2:	4629      	mov	r1, r5
 800abd4:	f7f5 fb70 	bl	80002b8 <__aeabi_dsub>
 800abd8:	4b8e      	ldr	r3, [pc, #568]	; (800ae14 <__ieee754_exp+0x2f4>)
 800abda:	00f7      	lsls	r7, r6, #3
 800abdc:	443b      	add	r3, r7
 800abde:	ed93 7b00 	vldr	d7, [r3]
 800abe2:	f1c6 0a01 	rsb	sl, r6, #1
 800abe6:	4680      	mov	r8, r0
 800abe8:	4689      	mov	r9, r1
 800abea:	ebaa 0a06 	sub.w	sl, sl, r6
 800abee:	eeb0 8a47 	vmov.f32	s16, s14
 800abf2:	eef0 8a67 	vmov.f32	s17, s15
 800abf6:	ec53 2b18 	vmov	r2, r3, d8
 800abfa:	4640      	mov	r0, r8
 800abfc:	4649      	mov	r1, r9
 800abfe:	f7f5 fb5b 	bl	80002b8 <__aeabi_dsub>
 800ac02:	4604      	mov	r4, r0
 800ac04:	460d      	mov	r5, r1
 800ac06:	4622      	mov	r2, r4
 800ac08:	462b      	mov	r3, r5
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	f7f5 fd0b 	bl	8000628 <__aeabi_dmul>
 800ac12:	a369      	add	r3, pc, #420	; (adr r3, 800adb8 <__ieee754_exp+0x298>)
 800ac14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac18:	4606      	mov	r6, r0
 800ac1a:	460f      	mov	r7, r1
 800ac1c:	f7f5 fd04 	bl	8000628 <__aeabi_dmul>
 800ac20:	a367      	add	r3, pc, #412	; (adr r3, 800adc0 <__ieee754_exp+0x2a0>)
 800ac22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac26:	f7f5 fb47 	bl	80002b8 <__aeabi_dsub>
 800ac2a:	4632      	mov	r2, r6
 800ac2c:	463b      	mov	r3, r7
 800ac2e:	f7f5 fcfb 	bl	8000628 <__aeabi_dmul>
 800ac32:	a365      	add	r3, pc, #404	; (adr r3, 800adc8 <__ieee754_exp+0x2a8>)
 800ac34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac38:	f7f5 fb40 	bl	80002bc <__adddf3>
 800ac3c:	4632      	mov	r2, r6
 800ac3e:	463b      	mov	r3, r7
 800ac40:	f7f5 fcf2 	bl	8000628 <__aeabi_dmul>
 800ac44:	a362      	add	r3, pc, #392	; (adr r3, 800add0 <__ieee754_exp+0x2b0>)
 800ac46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4a:	f7f5 fb35 	bl	80002b8 <__aeabi_dsub>
 800ac4e:	4632      	mov	r2, r6
 800ac50:	463b      	mov	r3, r7
 800ac52:	f7f5 fce9 	bl	8000628 <__aeabi_dmul>
 800ac56:	a360      	add	r3, pc, #384	; (adr r3, 800add8 <__ieee754_exp+0x2b8>)
 800ac58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5c:	f7f5 fb2e 	bl	80002bc <__adddf3>
 800ac60:	4632      	mov	r2, r6
 800ac62:	463b      	mov	r3, r7
 800ac64:	f7f5 fce0 	bl	8000628 <__aeabi_dmul>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	4629      	mov	r1, r5
 800ac70:	f7f5 fb22 	bl	80002b8 <__aeabi_dsub>
 800ac74:	4602      	mov	r2, r0
 800ac76:	460b      	mov	r3, r1
 800ac78:	4606      	mov	r6, r0
 800ac7a:	460f      	mov	r7, r1
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	4629      	mov	r1, r5
 800ac80:	f7f5 fcd2 	bl	8000628 <__aeabi_dmul>
 800ac84:	ec41 0b19 	vmov	d9, r0, r1
 800ac88:	f1ba 0f00 	cmp.w	sl, #0
 800ac8c:	d15d      	bne.n	800ad4a <__ieee754_exp+0x22a>
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac94:	4630      	mov	r0, r6
 800ac96:	4639      	mov	r1, r7
 800ac98:	f7f5 fb0e 	bl	80002b8 <__aeabi_dsub>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	ec51 0b19 	vmov	r0, r1, d9
 800aca4:	f7f5 fdea 	bl	800087c <__aeabi_ddiv>
 800aca8:	4622      	mov	r2, r4
 800acaa:	462b      	mov	r3, r5
 800acac:	f7f5 fb04 	bl	80002b8 <__aeabi_dsub>
 800acb0:	4602      	mov	r2, r0
 800acb2:	460b      	mov	r3, r1
 800acb4:	2000      	movs	r0, #0
 800acb6:	4958      	ldr	r1, [pc, #352]	; (800ae18 <__ieee754_exp+0x2f8>)
 800acb8:	f7f5 fafe 	bl	80002b8 <__aeabi_dsub>
 800acbc:	e74d      	b.n	800ab5a <__ieee754_exp+0x3a>
 800acbe:	4857      	ldr	r0, [pc, #348]	; (800ae1c <__ieee754_exp+0x2fc>)
 800acc0:	a347      	add	r3, pc, #284	; (adr r3, 800ade0 <__ieee754_exp+0x2c0>)
 800acc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc6:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800acca:	4629      	mov	r1, r5
 800accc:	4620      	mov	r0, r4
 800acce:	f7f5 fcab 	bl	8000628 <__aeabi_dmul>
 800acd2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800acd6:	f7f5 faf1 	bl	80002bc <__adddf3>
 800acda:	f7f5 ff55 	bl	8000b88 <__aeabi_d2iz>
 800acde:	4682      	mov	sl, r0
 800ace0:	f7f5 fc38 	bl	8000554 <__aeabi_i2d>
 800ace4:	a340      	add	r3, pc, #256	; (adr r3, 800ade8 <__ieee754_exp+0x2c8>)
 800ace6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acea:	4606      	mov	r6, r0
 800acec:	460f      	mov	r7, r1
 800acee:	f7f5 fc9b 	bl	8000628 <__aeabi_dmul>
 800acf2:	4602      	mov	r2, r0
 800acf4:	460b      	mov	r3, r1
 800acf6:	4620      	mov	r0, r4
 800acf8:	4629      	mov	r1, r5
 800acfa:	f7f5 fadd 	bl	80002b8 <__aeabi_dsub>
 800acfe:	a33c      	add	r3, pc, #240	; (adr r3, 800adf0 <__ieee754_exp+0x2d0>)
 800ad00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad04:	4680      	mov	r8, r0
 800ad06:	4689      	mov	r9, r1
 800ad08:	4630      	mov	r0, r6
 800ad0a:	4639      	mov	r1, r7
 800ad0c:	f7f5 fc8c 	bl	8000628 <__aeabi_dmul>
 800ad10:	ec41 0b18 	vmov	d8, r0, r1
 800ad14:	e76f      	b.n	800abf6 <__ieee754_exp+0xd6>
 800ad16:	4a42      	ldr	r2, [pc, #264]	; (800ae20 <__ieee754_exp+0x300>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d811      	bhi.n	800ad40 <__ieee754_exp+0x220>
 800ad1c:	a336      	add	r3, pc, #216	; (adr r3, 800adf8 <__ieee754_exp+0x2d8>)
 800ad1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad22:	ee10 0a10 	vmov	r0, s0
 800ad26:	4629      	mov	r1, r5
 800ad28:	f7f5 fac8 	bl	80002bc <__adddf3>
 800ad2c:	4b3a      	ldr	r3, [pc, #232]	; (800ae18 <__ieee754_exp+0x2f8>)
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f7f5 ff0a 	bl	8000b48 <__aeabi_dcmpgt>
 800ad34:	b138      	cbz	r0, 800ad46 <__ieee754_exp+0x226>
 800ad36:	4b38      	ldr	r3, [pc, #224]	; (800ae18 <__ieee754_exp+0x2f8>)
 800ad38:	2200      	movs	r2, #0
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	e70a      	b.n	800ab56 <__ieee754_exp+0x36>
 800ad40:	f04f 0a00 	mov.w	sl, #0
 800ad44:	e75f      	b.n	800ac06 <__ieee754_exp+0xe6>
 800ad46:	4682      	mov	sl, r0
 800ad48:	e75d      	b.n	800ac06 <__ieee754_exp+0xe6>
 800ad4a:	4632      	mov	r2, r6
 800ad4c:	463b      	mov	r3, r7
 800ad4e:	2000      	movs	r0, #0
 800ad50:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ad54:	f7f5 fab0 	bl	80002b8 <__aeabi_dsub>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	ec51 0b19 	vmov	r0, r1, d9
 800ad60:	f7f5 fd8c 	bl	800087c <__aeabi_ddiv>
 800ad64:	4602      	mov	r2, r0
 800ad66:	460b      	mov	r3, r1
 800ad68:	ec51 0b18 	vmov	r0, r1, d8
 800ad6c:	f7f5 faa4 	bl	80002b8 <__aeabi_dsub>
 800ad70:	4642      	mov	r2, r8
 800ad72:	464b      	mov	r3, r9
 800ad74:	f7f5 faa0 	bl	80002b8 <__aeabi_dsub>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	4926      	ldr	r1, [pc, #152]	; (800ae18 <__ieee754_exp+0x2f8>)
 800ad80:	f7f5 fa9a 	bl	80002b8 <__aeabi_dsub>
 800ad84:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800ad88:	4592      	cmp	sl, r2
 800ad8a:	db02      	blt.n	800ad92 <__ieee754_exp+0x272>
 800ad8c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800ad90:	e6e3      	b.n	800ab5a <__ieee754_exp+0x3a>
 800ad92:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800ad96:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800ada0:	f7f5 fc42 	bl	8000628 <__aeabi_dmul>
 800ada4:	e6d9      	b.n	800ab5a <__ieee754_exp+0x3a>
 800ada6:	bf00      	nop
 800ada8:	fefa39ef 	.word	0xfefa39ef
 800adac:	40862e42 	.word	0x40862e42
 800adb0:	d52d3051 	.word	0xd52d3051
 800adb4:	c0874910 	.word	0xc0874910
 800adb8:	72bea4d0 	.word	0x72bea4d0
 800adbc:	3e663769 	.word	0x3e663769
 800adc0:	c5d26bf1 	.word	0xc5d26bf1
 800adc4:	3ebbbd41 	.word	0x3ebbbd41
 800adc8:	af25de2c 	.word	0xaf25de2c
 800adcc:	3f11566a 	.word	0x3f11566a
 800add0:	16bebd93 	.word	0x16bebd93
 800add4:	3f66c16c 	.word	0x3f66c16c
 800add8:	5555553e 	.word	0x5555553e
 800addc:	3fc55555 	.word	0x3fc55555
 800ade0:	652b82fe 	.word	0x652b82fe
 800ade4:	3ff71547 	.word	0x3ff71547
 800ade8:	fee00000 	.word	0xfee00000
 800adec:	3fe62e42 	.word	0x3fe62e42
 800adf0:	35793c76 	.word	0x35793c76
 800adf4:	3dea39ef 	.word	0x3dea39ef
 800adf8:	8800759c 	.word	0x8800759c
 800adfc:	7e37e43c 	.word	0x7e37e43c
 800ae00:	40862e41 	.word	0x40862e41
 800ae04:	7fefffff 	.word	0x7fefffff
 800ae08:	3fd62e42 	.word	0x3fd62e42
 800ae0c:	3ff0a2b1 	.word	0x3ff0a2b1
 800ae10:	0800ca68 	.word	0x0800ca68
 800ae14:	0800ca78 	.word	0x0800ca78
 800ae18:	3ff00000 	.word	0x3ff00000
 800ae1c:	0800ca58 	.word	0x0800ca58
 800ae20:	3defffff 	.word	0x3defffff
 800ae24:	00000000 	.word	0x00000000

0800ae28 <__ieee754_rem_pio2>:
 800ae28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae2c:	ed2d 8b02 	vpush	{d8}
 800ae30:	ec55 4b10 	vmov	r4, r5, d0
 800ae34:	4bca      	ldr	r3, [pc, #808]	; (800b160 <__ieee754_rem_pio2+0x338>)
 800ae36:	b08b      	sub	sp, #44	; 0x2c
 800ae38:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ae3c:	4598      	cmp	r8, r3
 800ae3e:	4682      	mov	sl, r0
 800ae40:	9502      	str	r5, [sp, #8]
 800ae42:	dc08      	bgt.n	800ae56 <__ieee754_rem_pio2+0x2e>
 800ae44:	2200      	movs	r2, #0
 800ae46:	2300      	movs	r3, #0
 800ae48:	ed80 0b00 	vstr	d0, [r0]
 800ae4c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ae50:	f04f 0b00 	mov.w	fp, #0
 800ae54:	e028      	b.n	800aea8 <__ieee754_rem_pio2+0x80>
 800ae56:	4bc3      	ldr	r3, [pc, #780]	; (800b164 <__ieee754_rem_pio2+0x33c>)
 800ae58:	4598      	cmp	r8, r3
 800ae5a:	dc78      	bgt.n	800af4e <__ieee754_rem_pio2+0x126>
 800ae5c:	9b02      	ldr	r3, [sp, #8]
 800ae5e:	4ec2      	ldr	r6, [pc, #776]	; (800b168 <__ieee754_rem_pio2+0x340>)
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	ee10 0a10 	vmov	r0, s0
 800ae66:	a3b0      	add	r3, pc, #704	; (adr r3, 800b128 <__ieee754_rem_pio2+0x300>)
 800ae68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6c:	4629      	mov	r1, r5
 800ae6e:	dd39      	ble.n	800aee4 <__ieee754_rem_pio2+0xbc>
 800ae70:	f7f5 fa22 	bl	80002b8 <__aeabi_dsub>
 800ae74:	45b0      	cmp	r8, r6
 800ae76:	4604      	mov	r4, r0
 800ae78:	460d      	mov	r5, r1
 800ae7a:	d01b      	beq.n	800aeb4 <__ieee754_rem_pio2+0x8c>
 800ae7c:	a3ac      	add	r3, pc, #688	; (adr r3, 800b130 <__ieee754_rem_pio2+0x308>)
 800ae7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae82:	f7f5 fa19 	bl	80002b8 <__aeabi_dsub>
 800ae86:	4602      	mov	r2, r0
 800ae88:	460b      	mov	r3, r1
 800ae8a:	e9ca 2300 	strd	r2, r3, [sl]
 800ae8e:	4620      	mov	r0, r4
 800ae90:	4629      	mov	r1, r5
 800ae92:	f7f5 fa11 	bl	80002b8 <__aeabi_dsub>
 800ae96:	a3a6      	add	r3, pc, #664	; (adr r3, 800b130 <__ieee754_rem_pio2+0x308>)
 800ae98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9c:	f7f5 fa0c 	bl	80002b8 <__aeabi_dsub>
 800aea0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aea4:	f04f 0b01 	mov.w	fp, #1
 800aea8:	4658      	mov	r0, fp
 800aeaa:	b00b      	add	sp, #44	; 0x2c
 800aeac:	ecbd 8b02 	vpop	{d8}
 800aeb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb4:	a3a0      	add	r3, pc, #640	; (adr r3, 800b138 <__ieee754_rem_pio2+0x310>)
 800aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeba:	f7f5 f9fd 	bl	80002b8 <__aeabi_dsub>
 800aebe:	a3a0      	add	r3, pc, #640	; (adr r3, 800b140 <__ieee754_rem_pio2+0x318>)
 800aec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec4:	4604      	mov	r4, r0
 800aec6:	460d      	mov	r5, r1
 800aec8:	f7f5 f9f6 	bl	80002b8 <__aeabi_dsub>
 800aecc:	4602      	mov	r2, r0
 800aece:	460b      	mov	r3, r1
 800aed0:	e9ca 2300 	strd	r2, r3, [sl]
 800aed4:	4620      	mov	r0, r4
 800aed6:	4629      	mov	r1, r5
 800aed8:	f7f5 f9ee 	bl	80002b8 <__aeabi_dsub>
 800aedc:	a398      	add	r3, pc, #608	; (adr r3, 800b140 <__ieee754_rem_pio2+0x318>)
 800aede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee2:	e7db      	b.n	800ae9c <__ieee754_rem_pio2+0x74>
 800aee4:	f7f5 f9ea 	bl	80002bc <__adddf3>
 800aee8:	45b0      	cmp	r8, r6
 800aeea:	4604      	mov	r4, r0
 800aeec:	460d      	mov	r5, r1
 800aeee:	d016      	beq.n	800af1e <__ieee754_rem_pio2+0xf6>
 800aef0:	a38f      	add	r3, pc, #572	; (adr r3, 800b130 <__ieee754_rem_pio2+0x308>)
 800aef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef6:	f7f5 f9e1 	bl	80002bc <__adddf3>
 800aefa:	4602      	mov	r2, r0
 800aefc:	460b      	mov	r3, r1
 800aefe:	e9ca 2300 	strd	r2, r3, [sl]
 800af02:	4620      	mov	r0, r4
 800af04:	4629      	mov	r1, r5
 800af06:	f7f5 f9d7 	bl	80002b8 <__aeabi_dsub>
 800af0a:	a389      	add	r3, pc, #548	; (adr r3, 800b130 <__ieee754_rem_pio2+0x308>)
 800af0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af10:	f7f5 f9d4 	bl	80002bc <__adddf3>
 800af14:	f04f 3bff 	mov.w	fp, #4294967295
 800af18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800af1c:	e7c4      	b.n	800aea8 <__ieee754_rem_pio2+0x80>
 800af1e:	a386      	add	r3, pc, #536	; (adr r3, 800b138 <__ieee754_rem_pio2+0x310>)
 800af20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af24:	f7f5 f9ca 	bl	80002bc <__adddf3>
 800af28:	a385      	add	r3, pc, #532	; (adr r3, 800b140 <__ieee754_rem_pio2+0x318>)
 800af2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2e:	4604      	mov	r4, r0
 800af30:	460d      	mov	r5, r1
 800af32:	f7f5 f9c3 	bl	80002bc <__adddf3>
 800af36:	4602      	mov	r2, r0
 800af38:	460b      	mov	r3, r1
 800af3a:	e9ca 2300 	strd	r2, r3, [sl]
 800af3e:	4620      	mov	r0, r4
 800af40:	4629      	mov	r1, r5
 800af42:	f7f5 f9b9 	bl	80002b8 <__aeabi_dsub>
 800af46:	a37e      	add	r3, pc, #504	; (adr r3, 800b140 <__ieee754_rem_pio2+0x318>)
 800af48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4c:	e7e0      	b.n	800af10 <__ieee754_rem_pio2+0xe8>
 800af4e:	4b87      	ldr	r3, [pc, #540]	; (800b16c <__ieee754_rem_pio2+0x344>)
 800af50:	4598      	cmp	r8, r3
 800af52:	f300 80d9 	bgt.w	800b108 <__ieee754_rem_pio2+0x2e0>
 800af56:	f001 f81b 	bl	800bf90 <fabs>
 800af5a:	ec55 4b10 	vmov	r4, r5, d0
 800af5e:	ee10 0a10 	vmov	r0, s0
 800af62:	a379      	add	r3, pc, #484	; (adr r3, 800b148 <__ieee754_rem_pio2+0x320>)
 800af64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af68:	4629      	mov	r1, r5
 800af6a:	f7f5 fb5d 	bl	8000628 <__aeabi_dmul>
 800af6e:	4b80      	ldr	r3, [pc, #512]	; (800b170 <__ieee754_rem_pio2+0x348>)
 800af70:	2200      	movs	r2, #0
 800af72:	f7f5 f9a3 	bl	80002bc <__adddf3>
 800af76:	f7f5 fe07 	bl	8000b88 <__aeabi_d2iz>
 800af7a:	4683      	mov	fp, r0
 800af7c:	f7f5 faea 	bl	8000554 <__aeabi_i2d>
 800af80:	4602      	mov	r2, r0
 800af82:	460b      	mov	r3, r1
 800af84:	ec43 2b18 	vmov	d8, r2, r3
 800af88:	a367      	add	r3, pc, #412	; (adr r3, 800b128 <__ieee754_rem_pio2+0x300>)
 800af8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8e:	f7f5 fb4b 	bl	8000628 <__aeabi_dmul>
 800af92:	4602      	mov	r2, r0
 800af94:	460b      	mov	r3, r1
 800af96:	4620      	mov	r0, r4
 800af98:	4629      	mov	r1, r5
 800af9a:	f7f5 f98d 	bl	80002b8 <__aeabi_dsub>
 800af9e:	a364      	add	r3, pc, #400	; (adr r3, 800b130 <__ieee754_rem_pio2+0x308>)
 800afa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa4:	4606      	mov	r6, r0
 800afa6:	460f      	mov	r7, r1
 800afa8:	ec51 0b18 	vmov	r0, r1, d8
 800afac:	f7f5 fb3c 	bl	8000628 <__aeabi_dmul>
 800afb0:	f1bb 0f1f 	cmp.w	fp, #31
 800afb4:	4604      	mov	r4, r0
 800afb6:	460d      	mov	r5, r1
 800afb8:	dc0d      	bgt.n	800afd6 <__ieee754_rem_pio2+0x1ae>
 800afba:	4b6e      	ldr	r3, [pc, #440]	; (800b174 <__ieee754_rem_pio2+0x34c>)
 800afbc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800afc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afc4:	4543      	cmp	r3, r8
 800afc6:	d006      	beq.n	800afd6 <__ieee754_rem_pio2+0x1ae>
 800afc8:	4622      	mov	r2, r4
 800afca:	462b      	mov	r3, r5
 800afcc:	4630      	mov	r0, r6
 800afce:	4639      	mov	r1, r7
 800afd0:	f7f5 f972 	bl	80002b8 <__aeabi_dsub>
 800afd4:	e00f      	b.n	800aff6 <__ieee754_rem_pio2+0x1ce>
 800afd6:	462b      	mov	r3, r5
 800afd8:	4622      	mov	r2, r4
 800afda:	4630      	mov	r0, r6
 800afdc:	4639      	mov	r1, r7
 800afde:	f7f5 f96b 	bl	80002b8 <__aeabi_dsub>
 800afe2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800afe6:	9303      	str	r3, [sp, #12]
 800afe8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800afec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800aff0:	f1b8 0f10 	cmp.w	r8, #16
 800aff4:	dc02      	bgt.n	800affc <__ieee754_rem_pio2+0x1d4>
 800aff6:	e9ca 0100 	strd	r0, r1, [sl]
 800affa:	e039      	b.n	800b070 <__ieee754_rem_pio2+0x248>
 800affc:	a34e      	add	r3, pc, #312	; (adr r3, 800b138 <__ieee754_rem_pio2+0x310>)
 800affe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b002:	ec51 0b18 	vmov	r0, r1, d8
 800b006:	f7f5 fb0f 	bl	8000628 <__aeabi_dmul>
 800b00a:	4604      	mov	r4, r0
 800b00c:	460d      	mov	r5, r1
 800b00e:	4602      	mov	r2, r0
 800b010:	460b      	mov	r3, r1
 800b012:	4630      	mov	r0, r6
 800b014:	4639      	mov	r1, r7
 800b016:	f7f5 f94f 	bl	80002b8 <__aeabi_dsub>
 800b01a:	4602      	mov	r2, r0
 800b01c:	460b      	mov	r3, r1
 800b01e:	4680      	mov	r8, r0
 800b020:	4689      	mov	r9, r1
 800b022:	4630      	mov	r0, r6
 800b024:	4639      	mov	r1, r7
 800b026:	f7f5 f947 	bl	80002b8 <__aeabi_dsub>
 800b02a:	4622      	mov	r2, r4
 800b02c:	462b      	mov	r3, r5
 800b02e:	f7f5 f943 	bl	80002b8 <__aeabi_dsub>
 800b032:	a343      	add	r3, pc, #268	; (adr r3, 800b140 <__ieee754_rem_pio2+0x318>)
 800b034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b038:	4604      	mov	r4, r0
 800b03a:	460d      	mov	r5, r1
 800b03c:	ec51 0b18 	vmov	r0, r1, d8
 800b040:	f7f5 faf2 	bl	8000628 <__aeabi_dmul>
 800b044:	4622      	mov	r2, r4
 800b046:	462b      	mov	r3, r5
 800b048:	f7f5 f936 	bl	80002b8 <__aeabi_dsub>
 800b04c:	4602      	mov	r2, r0
 800b04e:	460b      	mov	r3, r1
 800b050:	4604      	mov	r4, r0
 800b052:	460d      	mov	r5, r1
 800b054:	4640      	mov	r0, r8
 800b056:	4649      	mov	r1, r9
 800b058:	f7f5 f92e 	bl	80002b8 <__aeabi_dsub>
 800b05c:	9a03      	ldr	r2, [sp, #12]
 800b05e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b062:	1ad3      	subs	r3, r2, r3
 800b064:	2b31      	cmp	r3, #49	; 0x31
 800b066:	dc24      	bgt.n	800b0b2 <__ieee754_rem_pio2+0x28a>
 800b068:	e9ca 0100 	strd	r0, r1, [sl]
 800b06c:	4646      	mov	r6, r8
 800b06e:	464f      	mov	r7, r9
 800b070:	e9da 8900 	ldrd	r8, r9, [sl]
 800b074:	4630      	mov	r0, r6
 800b076:	4642      	mov	r2, r8
 800b078:	464b      	mov	r3, r9
 800b07a:	4639      	mov	r1, r7
 800b07c:	f7f5 f91c 	bl	80002b8 <__aeabi_dsub>
 800b080:	462b      	mov	r3, r5
 800b082:	4622      	mov	r2, r4
 800b084:	f7f5 f918 	bl	80002b8 <__aeabi_dsub>
 800b088:	9b02      	ldr	r3, [sp, #8]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b090:	f6bf af0a 	bge.w	800aea8 <__ieee754_rem_pio2+0x80>
 800b094:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b098:	f8ca 3004 	str.w	r3, [sl, #4]
 800b09c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0a0:	f8ca 8000 	str.w	r8, [sl]
 800b0a4:	f8ca 0008 	str.w	r0, [sl, #8]
 800b0a8:	f8ca 300c 	str.w	r3, [sl, #12]
 800b0ac:	f1cb 0b00 	rsb	fp, fp, #0
 800b0b0:	e6fa      	b.n	800aea8 <__ieee754_rem_pio2+0x80>
 800b0b2:	a327      	add	r3, pc, #156	; (adr r3, 800b150 <__ieee754_rem_pio2+0x328>)
 800b0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b8:	ec51 0b18 	vmov	r0, r1, d8
 800b0bc:	f7f5 fab4 	bl	8000628 <__aeabi_dmul>
 800b0c0:	4604      	mov	r4, r0
 800b0c2:	460d      	mov	r5, r1
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	4640      	mov	r0, r8
 800b0ca:	4649      	mov	r1, r9
 800b0cc:	f7f5 f8f4 	bl	80002b8 <__aeabi_dsub>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	4606      	mov	r6, r0
 800b0d6:	460f      	mov	r7, r1
 800b0d8:	4640      	mov	r0, r8
 800b0da:	4649      	mov	r1, r9
 800b0dc:	f7f5 f8ec 	bl	80002b8 <__aeabi_dsub>
 800b0e0:	4622      	mov	r2, r4
 800b0e2:	462b      	mov	r3, r5
 800b0e4:	f7f5 f8e8 	bl	80002b8 <__aeabi_dsub>
 800b0e8:	a31b      	add	r3, pc, #108	; (adr r3, 800b158 <__ieee754_rem_pio2+0x330>)
 800b0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	460d      	mov	r5, r1
 800b0f2:	ec51 0b18 	vmov	r0, r1, d8
 800b0f6:	f7f5 fa97 	bl	8000628 <__aeabi_dmul>
 800b0fa:	4622      	mov	r2, r4
 800b0fc:	462b      	mov	r3, r5
 800b0fe:	f7f5 f8db 	bl	80002b8 <__aeabi_dsub>
 800b102:	4604      	mov	r4, r0
 800b104:	460d      	mov	r5, r1
 800b106:	e75f      	b.n	800afc8 <__ieee754_rem_pio2+0x1a0>
 800b108:	4b1b      	ldr	r3, [pc, #108]	; (800b178 <__ieee754_rem_pio2+0x350>)
 800b10a:	4598      	cmp	r8, r3
 800b10c:	dd36      	ble.n	800b17c <__ieee754_rem_pio2+0x354>
 800b10e:	ee10 2a10 	vmov	r2, s0
 800b112:	462b      	mov	r3, r5
 800b114:	4620      	mov	r0, r4
 800b116:	4629      	mov	r1, r5
 800b118:	f7f5 f8ce 	bl	80002b8 <__aeabi_dsub>
 800b11c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b120:	e9ca 0100 	strd	r0, r1, [sl]
 800b124:	e694      	b.n	800ae50 <__ieee754_rem_pio2+0x28>
 800b126:	bf00      	nop
 800b128:	54400000 	.word	0x54400000
 800b12c:	3ff921fb 	.word	0x3ff921fb
 800b130:	1a626331 	.word	0x1a626331
 800b134:	3dd0b461 	.word	0x3dd0b461
 800b138:	1a600000 	.word	0x1a600000
 800b13c:	3dd0b461 	.word	0x3dd0b461
 800b140:	2e037073 	.word	0x2e037073
 800b144:	3ba3198a 	.word	0x3ba3198a
 800b148:	6dc9c883 	.word	0x6dc9c883
 800b14c:	3fe45f30 	.word	0x3fe45f30
 800b150:	2e000000 	.word	0x2e000000
 800b154:	3ba3198a 	.word	0x3ba3198a
 800b158:	252049c1 	.word	0x252049c1
 800b15c:	397b839a 	.word	0x397b839a
 800b160:	3fe921fb 	.word	0x3fe921fb
 800b164:	4002d97b 	.word	0x4002d97b
 800b168:	3ff921fb 	.word	0x3ff921fb
 800b16c:	413921fb 	.word	0x413921fb
 800b170:	3fe00000 	.word	0x3fe00000
 800b174:	0800ca88 	.word	0x0800ca88
 800b178:	7fefffff 	.word	0x7fefffff
 800b17c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b180:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b184:	ee10 0a10 	vmov	r0, s0
 800b188:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b18c:	ee10 6a10 	vmov	r6, s0
 800b190:	460f      	mov	r7, r1
 800b192:	f7f5 fcf9 	bl	8000b88 <__aeabi_d2iz>
 800b196:	f7f5 f9dd 	bl	8000554 <__aeabi_i2d>
 800b19a:	4602      	mov	r2, r0
 800b19c:	460b      	mov	r3, r1
 800b19e:	4630      	mov	r0, r6
 800b1a0:	4639      	mov	r1, r7
 800b1a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b1a6:	f7f5 f887 	bl	80002b8 <__aeabi_dsub>
 800b1aa:	4b23      	ldr	r3, [pc, #140]	; (800b238 <__ieee754_rem_pio2+0x410>)
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	f7f5 fa3b 	bl	8000628 <__aeabi_dmul>
 800b1b2:	460f      	mov	r7, r1
 800b1b4:	4606      	mov	r6, r0
 800b1b6:	f7f5 fce7 	bl	8000b88 <__aeabi_d2iz>
 800b1ba:	f7f5 f9cb 	bl	8000554 <__aeabi_i2d>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	4630      	mov	r0, r6
 800b1c4:	4639      	mov	r1, r7
 800b1c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b1ca:	f7f5 f875 	bl	80002b8 <__aeabi_dsub>
 800b1ce:	4b1a      	ldr	r3, [pc, #104]	; (800b238 <__ieee754_rem_pio2+0x410>)
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f7f5 fa29 	bl	8000628 <__aeabi_dmul>
 800b1d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b1da:	ad04      	add	r5, sp, #16
 800b1dc:	f04f 0803 	mov.w	r8, #3
 800b1e0:	46a9      	mov	r9, r5
 800b1e2:	2600      	movs	r6, #0
 800b1e4:	2700      	movs	r7, #0
 800b1e6:	4632      	mov	r2, r6
 800b1e8:	463b      	mov	r3, r7
 800b1ea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b1ee:	46c3      	mov	fp, r8
 800b1f0:	3d08      	subs	r5, #8
 800b1f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800b1f6:	f7f5 fc7f 	bl	8000af8 <__aeabi_dcmpeq>
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	d1f3      	bne.n	800b1e6 <__ieee754_rem_pio2+0x3be>
 800b1fe:	4b0f      	ldr	r3, [pc, #60]	; (800b23c <__ieee754_rem_pio2+0x414>)
 800b200:	9301      	str	r3, [sp, #4]
 800b202:	2302      	movs	r3, #2
 800b204:	9300      	str	r3, [sp, #0]
 800b206:	4622      	mov	r2, r4
 800b208:	465b      	mov	r3, fp
 800b20a:	4651      	mov	r1, sl
 800b20c:	4648      	mov	r0, r9
 800b20e:	f000 f8df 	bl	800b3d0 <__kernel_rem_pio2>
 800b212:	9b02      	ldr	r3, [sp, #8]
 800b214:	2b00      	cmp	r3, #0
 800b216:	4683      	mov	fp, r0
 800b218:	f6bf ae46 	bge.w	800aea8 <__ieee754_rem_pio2+0x80>
 800b21c:	e9da 2100 	ldrd	r2, r1, [sl]
 800b220:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b224:	e9ca 2300 	strd	r2, r3, [sl]
 800b228:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b22c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b230:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b234:	e73a      	b.n	800b0ac <__ieee754_rem_pio2+0x284>
 800b236:	bf00      	nop
 800b238:	41700000 	.word	0x41700000
 800b23c:	0800cb08 	.word	0x0800cb08

0800b240 <__kernel_cos>:
 800b240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b244:	ec57 6b10 	vmov	r6, r7, d0
 800b248:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b24c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b250:	ed8d 1b00 	vstr	d1, [sp]
 800b254:	da07      	bge.n	800b266 <__kernel_cos+0x26>
 800b256:	ee10 0a10 	vmov	r0, s0
 800b25a:	4639      	mov	r1, r7
 800b25c:	f7f5 fc94 	bl	8000b88 <__aeabi_d2iz>
 800b260:	2800      	cmp	r0, #0
 800b262:	f000 8088 	beq.w	800b376 <__kernel_cos+0x136>
 800b266:	4632      	mov	r2, r6
 800b268:	463b      	mov	r3, r7
 800b26a:	4630      	mov	r0, r6
 800b26c:	4639      	mov	r1, r7
 800b26e:	f7f5 f9db 	bl	8000628 <__aeabi_dmul>
 800b272:	4b51      	ldr	r3, [pc, #324]	; (800b3b8 <__kernel_cos+0x178>)
 800b274:	2200      	movs	r2, #0
 800b276:	4604      	mov	r4, r0
 800b278:	460d      	mov	r5, r1
 800b27a:	f7f5 f9d5 	bl	8000628 <__aeabi_dmul>
 800b27e:	a340      	add	r3, pc, #256	; (adr r3, 800b380 <__kernel_cos+0x140>)
 800b280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b284:	4682      	mov	sl, r0
 800b286:	468b      	mov	fp, r1
 800b288:	4620      	mov	r0, r4
 800b28a:	4629      	mov	r1, r5
 800b28c:	f7f5 f9cc 	bl	8000628 <__aeabi_dmul>
 800b290:	a33d      	add	r3, pc, #244	; (adr r3, 800b388 <__kernel_cos+0x148>)
 800b292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b296:	f7f5 f811 	bl	80002bc <__adddf3>
 800b29a:	4622      	mov	r2, r4
 800b29c:	462b      	mov	r3, r5
 800b29e:	f7f5 f9c3 	bl	8000628 <__aeabi_dmul>
 800b2a2:	a33b      	add	r3, pc, #236	; (adr r3, 800b390 <__kernel_cos+0x150>)
 800b2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a8:	f7f5 f806 	bl	80002b8 <__aeabi_dsub>
 800b2ac:	4622      	mov	r2, r4
 800b2ae:	462b      	mov	r3, r5
 800b2b0:	f7f5 f9ba 	bl	8000628 <__aeabi_dmul>
 800b2b4:	a338      	add	r3, pc, #224	; (adr r3, 800b398 <__kernel_cos+0x158>)
 800b2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ba:	f7f4 ffff 	bl	80002bc <__adddf3>
 800b2be:	4622      	mov	r2, r4
 800b2c0:	462b      	mov	r3, r5
 800b2c2:	f7f5 f9b1 	bl	8000628 <__aeabi_dmul>
 800b2c6:	a336      	add	r3, pc, #216	; (adr r3, 800b3a0 <__kernel_cos+0x160>)
 800b2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2cc:	f7f4 fff4 	bl	80002b8 <__aeabi_dsub>
 800b2d0:	4622      	mov	r2, r4
 800b2d2:	462b      	mov	r3, r5
 800b2d4:	f7f5 f9a8 	bl	8000628 <__aeabi_dmul>
 800b2d8:	a333      	add	r3, pc, #204	; (adr r3, 800b3a8 <__kernel_cos+0x168>)
 800b2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2de:	f7f4 ffed 	bl	80002bc <__adddf3>
 800b2e2:	4622      	mov	r2, r4
 800b2e4:	462b      	mov	r3, r5
 800b2e6:	f7f5 f99f 	bl	8000628 <__aeabi_dmul>
 800b2ea:	4622      	mov	r2, r4
 800b2ec:	462b      	mov	r3, r5
 800b2ee:	f7f5 f99b 	bl	8000628 <__aeabi_dmul>
 800b2f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	460d      	mov	r5, r1
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	4639      	mov	r1, r7
 800b2fe:	f7f5 f993 	bl	8000628 <__aeabi_dmul>
 800b302:	460b      	mov	r3, r1
 800b304:	4602      	mov	r2, r0
 800b306:	4629      	mov	r1, r5
 800b308:	4620      	mov	r0, r4
 800b30a:	f7f4 ffd5 	bl	80002b8 <__aeabi_dsub>
 800b30e:	4b2b      	ldr	r3, [pc, #172]	; (800b3bc <__kernel_cos+0x17c>)
 800b310:	4598      	cmp	r8, r3
 800b312:	4606      	mov	r6, r0
 800b314:	460f      	mov	r7, r1
 800b316:	dc10      	bgt.n	800b33a <__kernel_cos+0xfa>
 800b318:	4602      	mov	r2, r0
 800b31a:	460b      	mov	r3, r1
 800b31c:	4650      	mov	r0, sl
 800b31e:	4659      	mov	r1, fp
 800b320:	f7f4 ffca 	bl	80002b8 <__aeabi_dsub>
 800b324:	460b      	mov	r3, r1
 800b326:	4926      	ldr	r1, [pc, #152]	; (800b3c0 <__kernel_cos+0x180>)
 800b328:	4602      	mov	r2, r0
 800b32a:	2000      	movs	r0, #0
 800b32c:	f7f4 ffc4 	bl	80002b8 <__aeabi_dsub>
 800b330:	ec41 0b10 	vmov	d0, r0, r1
 800b334:	b003      	add	sp, #12
 800b336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b33a:	4b22      	ldr	r3, [pc, #136]	; (800b3c4 <__kernel_cos+0x184>)
 800b33c:	4920      	ldr	r1, [pc, #128]	; (800b3c0 <__kernel_cos+0x180>)
 800b33e:	4598      	cmp	r8, r3
 800b340:	bfcc      	ite	gt
 800b342:	4d21      	ldrgt	r5, [pc, #132]	; (800b3c8 <__kernel_cos+0x188>)
 800b344:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b348:	2400      	movs	r4, #0
 800b34a:	4622      	mov	r2, r4
 800b34c:	462b      	mov	r3, r5
 800b34e:	2000      	movs	r0, #0
 800b350:	f7f4 ffb2 	bl	80002b8 <__aeabi_dsub>
 800b354:	4622      	mov	r2, r4
 800b356:	4680      	mov	r8, r0
 800b358:	4689      	mov	r9, r1
 800b35a:	462b      	mov	r3, r5
 800b35c:	4650      	mov	r0, sl
 800b35e:	4659      	mov	r1, fp
 800b360:	f7f4 ffaa 	bl	80002b8 <__aeabi_dsub>
 800b364:	4632      	mov	r2, r6
 800b366:	463b      	mov	r3, r7
 800b368:	f7f4 ffa6 	bl	80002b8 <__aeabi_dsub>
 800b36c:	4602      	mov	r2, r0
 800b36e:	460b      	mov	r3, r1
 800b370:	4640      	mov	r0, r8
 800b372:	4649      	mov	r1, r9
 800b374:	e7da      	b.n	800b32c <__kernel_cos+0xec>
 800b376:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b3b0 <__kernel_cos+0x170>
 800b37a:	e7db      	b.n	800b334 <__kernel_cos+0xf4>
 800b37c:	f3af 8000 	nop.w
 800b380:	be8838d4 	.word	0xbe8838d4
 800b384:	bda8fae9 	.word	0xbda8fae9
 800b388:	bdb4b1c4 	.word	0xbdb4b1c4
 800b38c:	3e21ee9e 	.word	0x3e21ee9e
 800b390:	809c52ad 	.word	0x809c52ad
 800b394:	3e927e4f 	.word	0x3e927e4f
 800b398:	19cb1590 	.word	0x19cb1590
 800b39c:	3efa01a0 	.word	0x3efa01a0
 800b3a0:	16c15177 	.word	0x16c15177
 800b3a4:	3f56c16c 	.word	0x3f56c16c
 800b3a8:	5555554c 	.word	0x5555554c
 800b3ac:	3fa55555 	.word	0x3fa55555
 800b3b0:	00000000 	.word	0x00000000
 800b3b4:	3ff00000 	.word	0x3ff00000
 800b3b8:	3fe00000 	.word	0x3fe00000
 800b3bc:	3fd33332 	.word	0x3fd33332
 800b3c0:	3ff00000 	.word	0x3ff00000
 800b3c4:	3fe90000 	.word	0x3fe90000
 800b3c8:	3fd20000 	.word	0x3fd20000
 800b3cc:	00000000 	.word	0x00000000

0800b3d0 <__kernel_rem_pio2>:
 800b3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d4:	ed2d 8b02 	vpush	{d8}
 800b3d8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b3dc:	f112 0f14 	cmn.w	r2, #20
 800b3e0:	9308      	str	r3, [sp, #32]
 800b3e2:	9101      	str	r1, [sp, #4]
 800b3e4:	4bc4      	ldr	r3, [pc, #784]	; (800b6f8 <__kernel_rem_pio2+0x328>)
 800b3e6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b3e8:	900b      	str	r0, [sp, #44]	; 0x2c
 800b3ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b3ee:	9302      	str	r3, [sp, #8]
 800b3f0:	9b08      	ldr	r3, [sp, #32]
 800b3f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b3f6:	bfa8      	it	ge
 800b3f8:	1ed4      	subge	r4, r2, #3
 800b3fa:	9306      	str	r3, [sp, #24]
 800b3fc:	bfb2      	itee	lt
 800b3fe:	2400      	movlt	r4, #0
 800b400:	2318      	movge	r3, #24
 800b402:	fb94 f4f3 	sdivge	r4, r4, r3
 800b406:	f06f 0317 	mvn.w	r3, #23
 800b40a:	fb04 3303 	mla	r3, r4, r3, r3
 800b40e:	eb03 0a02 	add.w	sl, r3, r2
 800b412:	9b02      	ldr	r3, [sp, #8]
 800b414:	9a06      	ldr	r2, [sp, #24]
 800b416:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800b6e8 <__kernel_rem_pio2+0x318>
 800b41a:	eb03 0802 	add.w	r8, r3, r2
 800b41e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b420:	1aa7      	subs	r7, r4, r2
 800b422:	ae22      	add	r6, sp, #136	; 0x88
 800b424:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b428:	2500      	movs	r5, #0
 800b42a:	4545      	cmp	r5, r8
 800b42c:	dd13      	ble.n	800b456 <__kernel_rem_pio2+0x86>
 800b42e:	9b08      	ldr	r3, [sp, #32]
 800b430:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800b6e8 <__kernel_rem_pio2+0x318>
 800b434:	aa22      	add	r2, sp, #136	; 0x88
 800b436:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b43a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b43e:	f04f 0800 	mov.w	r8, #0
 800b442:	9b02      	ldr	r3, [sp, #8]
 800b444:	4598      	cmp	r8, r3
 800b446:	dc2f      	bgt.n	800b4a8 <__kernel_rem_pio2+0xd8>
 800b448:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b44c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800b450:	462f      	mov	r7, r5
 800b452:	2600      	movs	r6, #0
 800b454:	e01b      	b.n	800b48e <__kernel_rem_pio2+0xbe>
 800b456:	42ef      	cmn	r7, r5
 800b458:	d407      	bmi.n	800b46a <__kernel_rem_pio2+0x9a>
 800b45a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b45e:	f7f5 f879 	bl	8000554 <__aeabi_i2d>
 800b462:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b466:	3501      	adds	r5, #1
 800b468:	e7df      	b.n	800b42a <__kernel_rem_pio2+0x5a>
 800b46a:	ec51 0b18 	vmov	r0, r1, d8
 800b46e:	e7f8      	b.n	800b462 <__kernel_rem_pio2+0x92>
 800b470:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b474:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b478:	f7f5 f8d6 	bl	8000628 <__aeabi_dmul>
 800b47c:	4602      	mov	r2, r0
 800b47e:	460b      	mov	r3, r1
 800b480:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b484:	f7f4 ff1a 	bl	80002bc <__adddf3>
 800b488:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b48c:	3601      	adds	r6, #1
 800b48e:	9b06      	ldr	r3, [sp, #24]
 800b490:	429e      	cmp	r6, r3
 800b492:	f1a7 0708 	sub.w	r7, r7, #8
 800b496:	ddeb      	ble.n	800b470 <__kernel_rem_pio2+0xa0>
 800b498:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b49c:	f108 0801 	add.w	r8, r8, #1
 800b4a0:	ecab 7b02 	vstmia	fp!, {d7}
 800b4a4:	3508      	adds	r5, #8
 800b4a6:	e7cc      	b.n	800b442 <__kernel_rem_pio2+0x72>
 800b4a8:	9b02      	ldr	r3, [sp, #8]
 800b4aa:	aa0e      	add	r2, sp, #56	; 0x38
 800b4ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b4b0:	930d      	str	r3, [sp, #52]	; 0x34
 800b4b2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b4b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b4b8:	9c02      	ldr	r4, [sp, #8]
 800b4ba:	930c      	str	r3, [sp, #48]	; 0x30
 800b4bc:	00e3      	lsls	r3, r4, #3
 800b4be:	930a      	str	r3, [sp, #40]	; 0x28
 800b4c0:	ab9a      	add	r3, sp, #616	; 0x268
 800b4c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b4c6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b4ca:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800b4ce:	ab72      	add	r3, sp, #456	; 0x1c8
 800b4d0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800b4d4:	46c3      	mov	fp, r8
 800b4d6:	46a1      	mov	r9, r4
 800b4d8:	f1b9 0f00 	cmp.w	r9, #0
 800b4dc:	f1a5 0508 	sub.w	r5, r5, #8
 800b4e0:	dc77      	bgt.n	800b5d2 <__kernel_rem_pio2+0x202>
 800b4e2:	ec47 6b10 	vmov	d0, r6, r7
 800b4e6:	4650      	mov	r0, sl
 800b4e8:	f000 fde6 	bl	800c0b8 <scalbn>
 800b4ec:	ec57 6b10 	vmov	r6, r7, d0
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b4f6:	ee10 0a10 	vmov	r0, s0
 800b4fa:	4639      	mov	r1, r7
 800b4fc:	f7f5 f894 	bl	8000628 <__aeabi_dmul>
 800b500:	ec41 0b10 	vmov	d0, r0, r1
 800b504:	f000 fd58 	bl	800bfb8 <floor>
 800b508:	4b7c      	ldr	r3, [pc, #496]	; (800b6fc <__kernel_rem_pio2+0x32c>)
 800b50a:	ec51 0b10 	vmov	r0, r1, d0
 800b50e:	2200      	movs	r2, #0
 800b510:	f7f5 f88a 	bl	8000628 <__aeabi_dmul>
 800b514:	4602      	mov	r2, r0
 800b516:	460b      	mov	r3, r1
 800b518:	4630      	mov	r0, r6
 800b51a:	4639      	mov	r1, r7
 800b51c:	f7f4 fecc 	bl	80002b8 <__aeabi_dsub>
 800b520:	460f      	mov	r7, r1
 800b522:	4606      	mov	r6, r0
 800b524:	f7f5 fb30 	bl	8000b88 <__aeabi_d2iz>
 800b528:	9004      	str	r0, [sp, #16]
 800b52a:	f7f5 f813 	bl	8000554 <__aeabi_i2d>
 800b52e:	4602      	mov	r2, r0
 800b530:	460b      	mov	r3, r1
 800b532:	4630      	mov	r0, r6
 800b534:	4639      	mov	r1, r7
 800b536:	f7f4 febf 	bl	80002b8 <__aeabi_dsub>
 800b53a:	f1ba 0f00 	cmp.w	sl, #0
 800b53e:	4606      	mov	r6, r0
 800b540:	460f      	mov	r7, r1
 800b542:	dd6d      	ble.n	800b620 <__kernel_rem_pio2+0x250>
 800b544:	1e62      	subs	r2, r4, #1
 800b546:	ab0e      	add	r3, sp, #56	; 0x38
 800b548:	9d04      	ldr	r5, [sp, #16]
 800b54a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b54e:	f1ca 0118 	rsb	r1, sl, #24
 800b552:	fa40 f301 	asr.w	r3, r0, r1
 800b556:	441d      	add	r5, r3
 800b558:	408b      	lsls	r3, r1
 800b55a:	1ac0      	subs	r0, r0, r3
 800b55c:	ab0e      	add	r3, sp, #56	; 0x38
 800b55e:	9504      	str	r5, [sp, #16]
 800b560:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b564:	f1ca 0317 	rsb	r3, sl, #23
 800b568:	fa40 fb03 	asr.w	fp, r0, r3
 800b56c:	f1bb 0f00 	cmp.w	fp, #0
 800b570:	dd65      	ble.n	800b63e <__kernel_rem_pio2+0x26e>
 800b572:	9b04      	ldr	r3, [sp, #16]
 800b574:	2200      	movs	r2, #0
 800b576:	3301      	adds	r3, #1
 800b578:	9304      	str	r3, [sp, #16]
 800b57a:	4615      	mov	r5, r2
 800b57c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b580:	4294      	cmp	r4, r2
 800b582:	f300 809c 	bgt.w	800b6be <__kernel_rem_pio2+0x2ee>
 800b586:	f1ba 0f00 	cmp.w	sl, #0
 800b58a:	dd07      	ble.n	800b59c <__kernel_rem_pio2+0x1cc>
 800b58c:	f1ba 0f01 	cmp.w	sl, #1
 800b590:	f000 80c0 	beq.w	800b714 <__kernel_rem_pio2+0x344>
 800b594:	f1ba 0f02 	cmp.w	sl, #2
 800b598:	f000 80c6 	beq.w	800b728 <__kernel_rem_pio2+0x358>
 800b59c:	f1bb 0f02 	cmp.w	fp, #2
 800b5a0:	d14d      	bne.n	800b63e <__kernel_rem_pio2+0x26e>
 800b5a2:	4632      	mov	r2, r6
 800b5a4:	463b      	mov	r3, r7
 800b5a6:	4956      	ldr	r1, [pc, #344]	; (800b700 <__kernel_rem_pio2+0x330>)
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	f7f4 fe85 	bl	80002b8 <__aeabi_dsub>
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	460f      	mov	r7, r1
 800b5b2:	2d00      	cmp	r5, #0
 800b5b4:	d043      	beq.n	800b63e <__kernel_rem_pio2+0x26e>
 800b5b6:	4650      	mov	r0, sl
 800b5b8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800b6f0 <__kernel_rem_pio2+0x320>
 800b5bc:	f000 fd7c 	bl	800c0b8 <scalbn>
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	4639      	mov	r1, r7
 800b5c4:	ec53 2b10 	vmov	r2, r3, d0
 800b5c8:	f7f4 fe76 	bl	80002b8 <__aeabi_dsub>
 800b5cc:	4606      	mov	r6, r0
 800b5ce:	460f      	mov	r7, r1
 800b5d0:	e035      	b.n	800b63e <__kernel_rem_pio2+0x26e>
 800b5d2:	4b4c      	ldr	r3, [pc, #304]	; (800b704 <__kernel_rem_pio2+0x334>)
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	4630      	mov	r0, r6
 800b5d8:	4639      	mov	r1, r7
 800b5da:	f7f5 f825 	bl	8000628 <__aeabi_dmul>
 800b5de:	f7f5 fad3 	bl	8000b88 <__aeabi_d2iz>
 800b5e2:	f7f4 ffb7 	bl	8000554 <__aeabi_i2d>
 800b5e6:	4602      	mov	r2, r0
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	ec43 2b18 	vmov	d8, r2, r3
 800b5ee:	4b46      	ldr	r3, [pc, #280]	; (800b708 <__kernel_rem_pio2+0x338>)
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f7f5 f819 	bl	8000628 <__aeabi_dmul>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	4630      	mov	r0, r6
 800b5fc:	4639      	mov	r1, r7
 800b5fe:	f7f4 fe5b 	bl	80002b8 <__aeabi_dsub>
 800b602:	f7f5 fac1 	bl	8000b88 <__aeabi_d2iz>
 800b606:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b60a:	f84b 0b04 	str.w	r0, [fp], #4
 800b60e:	ec51 0b18 	vmov	r0, r1, d8
 800b612:	f7f4 fe53 	bl	80002bc <__adddf3>
 800b616:	f109 39ff 	add.w	r9, r9, #4294967295
 800b61a:	4606      	mov	r6, r0
 800b61c:	460f      	mov	r7, r1
 800b61e:	e75b      	b.n	800b4d8 <__kernel_rem_pio2+0x108>
 800b620:	d106      	bne.n	800b630 <__kernel_rem_pio2+0x260>
 800b622:	1e63      	subs	r3, r4, #1
 800b624:	aa0e      	add	r2, sp, #56	; 0x38
 800b626:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b62a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800b62e:	e79d      	b.n	800b56c <__kernel_rem_pio2+0x19c>
 800b630:	4b36      	ldr	r3, [pc, #216]	; (800b70c <__kernel_rem_pio2+0x33c>)
 800b632:	2200      	movs	r2, #0
 800b634:	f7f5 fa7e 	bl	8000b34 <__aeabi_dcmpge>
 800b638:	2800      	cmp	r0, #0
 800b63a:	d13d      	bne.n	800b6b8 <__kernel_rem_pio2+0x2e8>
 800b63c:	4683      	mov	fp, r0
 800b63e:	2200      	movs	r2, #0
 800b640:	2300      	movs	r3, #0
 800b642:	4630      	mov	r0, r6
 800b644:	4639      	mov	r1, r7
 800b646:	f7f5 fa57 	bl	8000af8 <__aeabi_dcmpeq>
 800b64a:	2800      	cmp	r0, #0
 800b64c:	f000 80c0 	beq.w	800b7d0 <__kernel_rem_pio2+0x400>
 800b650:	1e65      	subs	r5, r4, #1
 800b652:	462b      	mov	r3, r5
 800b654:	2200      	movs	r2, #0
 800b656:	9902      	ldr	r1, [sp, #8]
 800b658:	428b      	cmp	r3, r1
 800b65a:	da6c      	bge.n	800b736 <__kernel_rem_pio2+0x366>
 800b65c:	2a00      	cmp	r2, #0
 800b65e:	f000 8089 	beq.w	800b774 <__kernel_rem_pio2+0x3a4>
 800b662:	ab0e      	add	r3, sp, #56	; 0x38
 800b664:	f1aa 0a18 	sub.w	sl, sl, #24
 800b668:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f000 80ad 	beq.w	800b7cc <__kernel_rem_pio2+0x3fc>
 800b672:	4650      	mov	r0, sl
 800b674:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b6f0 <__kernel_rem_pio2+0x320>
 800b678:	f000 fd1e 	bl	800c0b8 <scalbn>
 800b67c:	ab9a      	add	r3, sp, #616	; 0x268
 800b67e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b682:	ec57 6b10 	vmov	r6, r7, d0
 800b686:	00ec      	lsls	r4, r5, #3
 800b688:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800b68c:	46aa      	mov	sl, r5
 800b68e:	f1ba 0f00 	cmp.w	sl, #0
 800b692:	f280 80d6 	bge.w	800b842 <__kernel_rem_pio2+0x472>
 800b696:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800b6e8 <__kernel_rem_pio2+0x318>
 800b69a:	462e      	mov	r6, r5
 800b69c:	2e00      	cmp	r6, #0
 800b69e:	f2c0 8104 	blt.w	800b8aa <__kernel_rem_pio2+0x4da>
 800b6a2:	ab72      	add	r3, sp, #456	; 0x1c8
 800b6a4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b6a8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b710 <__kernel_rem_pio2+0x340>
 800b6ac:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b6b0:	f04f 0800 	mov.w	r8, #0
 800b6b4:	1baf      	subs	r7, r5, r6
 800b6b6:	e0ea      	b.n	800b88e <__kernel_rem_pio2+0x4be>
 800b6b8:	f04f 0b02 	mov.w	fp, #2
 800b6bc:	e759      	b.n	800b572 <__kernel_rem_pio2+0x1a2>
 800b6be:	f8d8 3000 	ldr.w	r3, [r8]
 800b6c2:	b955      	cbnz	r5, 800b6da <__kernel_rem_pio2+0x30a>
 800b6c4:	b123      	cbz	r3, 800b6d0 <__kernel_rem_pio2+0x300>
 800b6c6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b6ca:	f8c8 3000 	str.w	r3, [r8]
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	3201      	adds	r2, #1
 800b6d2:	f108 0804 	add.w	r8, r8, #4
 800b6d6:	461d      	mov	r5, r3
 800b6d8:	e752      	b.n	800b580 <__kernel_rem_pio2+0x1b0>
 800b6da:	1acb      	subs	r3, r1, r3
 800b6dc:	f8c8 3000 	str.w	r3, [r8]
 800b6e0:	462b      	mov	r3, r5
 800b6e2:	e7f5      	b.n	800b6d0 <__kernel_rem_pio2+0x300>
 800b6e4:	f3af 8000 	nop.w
	...
 800b6f4:	3ff00000 	.word	0x3ff00000
 800b6f8:	0800cc50 	.word	0x0800cc50
 800b6fc:	40200000 	.word	0x40200000
 800b700:	3ff00000 	.word	0x3ff00000
 800b704:	3e700000 	.word	0x3e700000
 800b708:	41700000 	.word	0x41700000
 800b70c:	3fe00000 	.word	0x3fe00000
 800b710:	0800cc10 	.word	0x0800cc10
 800b714:	1e62      	subs	r2, r4, #1
 800b716:	ab0e      	add	r3, sp, #56	; 0x38
 800b718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b71c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b720:	a90e      	add	r1, sp, #56	; 0x38
 800b722:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b726:	e739      	b.n	800b59c <__kernel_rem_pio2+0x1cc>
 800b728:	1e62      	subs	r2, r4, #1
 800b72a:	ab0e      	add	r3, sp, #56	; 0x38
 800b72c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b730:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b734:	e7f4      	b.n	800b720 <__kernel_rem_pio2+0x350>
 800b736:	a90e      	add	r1, sp, #56	; 0x38
 800b738:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b73c:	3b01      	subs	r3, #1
 800b73e:	430a      	orrs	r2, r1
 800b740:	e789      	b.n	800b656 <__kernel_rem_pio2+0x286>
 800b742:	3301      	adds	r3, #1
 800b744:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b748:	2900      	cmp	r1, #0
 800b74a:	d0fa      	beq.n	800b742 <__kernel_rem_pio2+0x372>
 800b74c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b74e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800b752:	446a      	add	r2, sp
 800b754:	3a98      	subs	r2, #152	; 0x98
 800b756:	920a      	str	r2, [sp, #40]	; 0x28
 800b758:	9a08      	ldr	r2, [sp, #32]
 800b75a:	18e3      	adds	r3, r4, r3
 800b75c:	18a5      	adds	r5, r4, r2
 800b75e:	aa22      	add	r2, sp, #136	; 0x88
 800b760:	f104 0801 	add.w	r8, r4, #1
 800b764:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b768:	9304      	str	r3, [sp, #16]
 800b76a:	9b04      	ldr	r3, [sp, #16]
 800b76c:	4543      	cmp	r3, r8
 800b76e:	da04      	bge.n	800b77a <__kernel_rem_pio2+0x3aa>
 800b770:	461c      	mov	r4, r3
 800b772:	e6a3      	b.n	800b4bc <__kernel_rem_pio2+0xec>
 800b774:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b776:	2301      	movs	r3, #1
 800b778:	e7e4      	b.n	800b744 <__kernel_rem_pio2+0x374>
 800b77a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b77c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b780:	f7f4 fee8 	bl	8000554 <__aeabi_i2d>
 800b784:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b78a:	46ab      	mov	fp, r5
 800b78c:	461c      	mov	r4, r3
 800b78e:	f04f 0900 	mov.w	r9, #0
 800b792:	2600      	movs	r6, #0
 800b794:	2700      	movs	r7, #0
 800b796:	9b06      	ldr	r3, [sp, #24]
 800b798:	4599      	cmp	r9, r3
 800b79a:	dd06      	ble.n	800b7aa <__kernel_rem_pio2+0x3da>
 800b79c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b79e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b7a2:	f108 0801 	add.w	r8, r8, #1
 800b7a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b7a8:	e7df      	b.n	800b76a <__kernel_rem_pio2+0x39a>
 800b7aa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b7ae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b7b2:	f7f4 ff39 	bl	8000628 <__aeabi_dmul>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	4630      	mov	r0, r6
 800b7bc:	4639      	mov	r1, r7
 800b7be:	f7f4 fd7d 	bl	80002bc <__adddf3>
 800b7c2:	f109 0901 	add.w	r9, r9, #1
 800b7c6:	4606      	mov	r6, r0
 800b7c8:	460f      	mov	r7, r1
 800b7ca:	e7e4      	b.n	800b796 <__kernel_rem_pio2+0x3c6>
 800b7cc:	3d01      	subs	r5, #1
 800b7ce:	e748      	b.n	800b662 <__kernel_rem_pio2+0x292>
 800b7d0:	ec47 6b10 	vmov	d0, r6, r7
 800b7d4:	f1ca 0000 	rsb	r0, sl, #0
 800b7d8:	f000 fc6e 	bl	800c0b8 <scalbn>
 800b7dc:	ec57 6b10 	vmov	r6, r7, d0
 800b7e0:	4ba0      	ldr	r3, [pc, #640]	; (800ba64 <__kernel_rem_pio2+0x694>)
 800b7e2:	ee10 0a10 	vmov	r0, s0
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	4639      	mov	r1, r7
 800b7ea:	f7f5 f9a3 	bl	8000b34 <__aeabi_dcmpge>
 800b7ee:	b1f8      	cbz	r0, 800b830 <__kernel_rem_pio2+0x460>
 800b7f0:	4b9d      	ldr	r3, [pc, #628]	; (800ba68 <__kernel_rem_pio2+0x698>)
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	4639      	mov	r1, r7
 800b7f8:	f7f4 ff16 	bl	8000628 <__aeabi_dmul>
 800b7fc:	f7f5 f9c4 	bl	8000b88 <__aeabi_d2iz>
 800b800:	4680      	mov	r8, r0
 800b802:	f7f4 fea7 	bl	8000554 <__aeabi_i2d>
 800b806:	4b97      	ldr	r3, [pc, #604]	; (800ba64 <__kernel_rem_pio2+0x694>)
 800b808:	2200      	movs	r2, #0
 800b80a:	f7f4 ff0d 	bl	8000628 <__aeabi_dmul>
 800b80e:	460b      	mov	r3, r1
 800b810:	4602      	mov	r2, r0
 800b812:	4639      	mov	r1, r7
 800b814:	4630      	mov	r0, r6
 800b816:	f7f4 fd4f 	bl	80002b8 <__aeabi_dsub>
 800b81a:	f7f5 f9b5 	bl	8000b88 <__aeabi_d2iz>
 800b81e:	1c65      	adds	r5, r4, #1
 800b820:	ab0e      	add	r3, sp, #56	; 0x38
 800b822:	f10a 0a18 	add.w	sl, sl, #24
 800b826:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b82a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b82e:	e720      	b.n	800b672 <__kernel_rem_pio2+0x2a2>
 800b830:	4630      	mov	r0, r6
 800b832:	4639      	mov	r1, r7
 800b834:	f7f5 f9a8 	bl	8000b88 <__aeabi_d2iz>
 800b838:	ab0e      	add	r3, sp, #56	; 0x38
 800b83a:	4625      	mov	r5, r4
 800b83c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b840:	e717      	b.n	800b672 <__kernel_rem_pio2+0x2a2>
 800b842:	ab0e      	add	r3, sp, #56	; 0x38
 800b844:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b848:	f7f4 fe84 	bl	8000554 <__aeabi_i2d>
 800b84c:	4632      	mov	r2, r6
 800b84e:	463b      	mov	r3, r7
 800b850:	f7f4 feea 	bl	8000628 <__aeabi_dmul>
 800b854:	4b84      	ldr	r3, [pc, #528]	; (800ba68 <__kernel_rem_pio2+0x698>)
 800b856:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b85a:	2200      	movs	r2, #0
 800b85c:	4630      	mov	r0, r6
 800b85e:	4639      	mov	r1, r7
 800b860:	f7f4 fee2 	bl	8000628 <__aeabi_dmul>
 800b864:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b868:	4606      	mov	r6, r0
 800b86a:	460f      	mov	r7, r1
 800b86c:	e70f      	b.n	800b68e <__kernel_rem_pio2+0x2be>
 800b86e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b872:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b876:	f7f4 fed7 	bl	8000628 <__aeabi_dmul>
 800b87a:	4602      	mov	r2, r0
 800b87c:	460b      	mov	r3, r1
 800b87e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b882:	f7f4 fd1b 	bl	80002bc <__adddf3>
 800b886:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b88a:	f108 0801 	add.w	r8, r8, #1
 800b88e:	9b02      	ldr	r3, [sp, #8]
 800b890:	4598      	cmp	r8, r3
 800b892:	dc01      	bgt.n	800b898 <__kernel_rem_pio2+0x4c8>
 800b894:	45b8      	cmp	r8, r7
 800b896:	ddea      	ble.n	800b86e <__kernel_rem_pio2+0x49e>
 800b898:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b89c:	ab4a      	add	r3, sp, #296	; 0x128
 800b89e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b8a2:	ed87 7b00 	vstr	d7, [r7]
 800b8a6:	3e01      	subs	r6, #1
 800b8a8:	e6f8      	b.n	800b69c <__kernel_rem_pio2+0x2cc>
 800b8aa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b8ac:	2b02      	cmp	r3, #2
 800b8ae:	dc0b      	bgt.n	800b8c8 <__kernel_rem_pio2+0x4f8>
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	dc35      	bgt.n	800b920 <__kernel_rem_pio2+0x550>
 800b8b4:	d059      	beq.n	800b96a <__kernel_rem_pio2+0x59a>
 800b8b6:	9b04      	ldr	r3, [sp, #16]
 800b8b8:	f003 0007 	and.w	r0, r3, #7
 800b8bc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b8c0:	ecbd 8b02 	vpop	{d8}
 800b8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b8ca:	2b03      	cmp	r3, #3
 800b8cc:	d1f3      	bne.n	800b8b6 <__kernel_rem_pio2+0x4e6>
 800b8ce:	ab4a      	add	r3, sp, #296	; 0x128
 800b8d0:	4423      	add	r3, r4
 800b8d2:	9306      	str	r3, [sp, #24]
 800b8d4:	461c      	mov	r4, r3
 800b8d6:	469a      	mov	sl, r3
 800b8d8:	9502      	str	r5, [sp, #8]
 800b8da:	9b02      	ldr	r3, [sp, #8]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	f1aa 0a08 	sub.w	sl, sl, #8
 800b8e2:	dc6b      	bgt.n	800b9bc <__kernel_rem_pio2+0x5ec>
 800b8e4:	46aa      	mov	sl, r5
 800b8e6:	f1ba 0f01 	cmp.w	sl, #1
 800b8ea:	f1a4 0408 	sub.w	r4, r4, #8
 800b8ee:	f300 8085 	bgt.w	800b9fc <__kernel_rem_pio2+0x62c>
 800b8f2:	9c06      	ldr	r4, [sp, #24]
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	3408      	adds	r4, #8
 800b8f8:	2100      	movs	r1, #0
 800b8fa:	2d01      	cmp	r5, #1
 800b8fc:	f300 809d 	bgt.w	800ba3a <__kernel_rem_pio2+0x66a>
 800b900:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b904:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b908:	f1bb 0f00 	cmp.w	fp, #0
 800b90c:	f040 809b 	bne.w	800ba46 <__kernel_rem_pio2+0x676>
 800b910:	9b01      	ldr	r3, [sp, #4]
 800b912:	e9c3 5600 	strd	r5, r6, [r3]
 800b916:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b91a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b91e:	e7ca      	b.n	800b8b6 <__kernel_rem_pio2+0x4e6>
 800b920:	3408      	adds	r4, #8
 800b922:	ab4a      	add	r3, sp, #296	; 0x128
 800b924:	441c      	add	r4, r3
 800b926:	462e      	mov	r6, r5
 800b928:	2000      	movs	r0, #0
 800b92a:	2100      	movs	r1, #0
 800b92c:	2e00      	cmp	r6, #0
 800b92e:	da36      	bge.n	800b99e <__kernel_rem_pio2+0x5ce>
 800b930:	f1bb 0f00 	cmp.w	fp, #0
 800b934:	d039      	beq.n	800b9aa <__kernel_rem_pio2+0x5da>
 800b936:	4602      	mov	r2, r0
 800b938:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b93c:	9c01      	ldr	r4, [sp, #4]
 800b93e:	e9c4 2300 	strd	r2, r3, [r4]
 800b942:	4602      	mov	r2, r0
 800b944:	460b      	mov	r3, r1
 800b946:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b94a:	f7f4 fcb5 	bl	80002b8 <__aeabi_dsub>
 800b94e:	ae4c      	add	r6, sp, #304	; 0x130
 800b950:	2401      	movs	r4, #1
 800b952:	42a5      	cmp	r5, r4
 800b954:	da2c      	bge.n	800b9b0 <__kernel_rem_pio2+0x5e0>
 800b956:	f1bb 0f00 	cmp.w	fp, #0
 800b95a:	d002      	beq.n	800b962 <__kernel_rem_pio2+0x592>
 800b95c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b960:	4619      	mov	r1, r3
 800b962:	9b01      	ldr	r3, [sp, #4]
 800b964:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b968:	e7a5      	b.n	800b8b6 <__kernel_rem_pio2+0x4e6>
 800b96a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b96e:	eb0d 0403 	add.w	r4, sp, r3
 800b972:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b976:	2000      	movs	r0, #0
 800b978:	2100      	movs	r1, #0
 800b97a:	2d00      	cmp	r5, #0
 800b97c:	da09      	bge.n	800b992 <__kernel_rem_pio2+0x5c2>
 800b97e:	f1bb 0f00 	cmp.w	fp, #0
 800b982:	d002      	beq.n	800b98a <__kernel_rem_pio2+0x5ba>
 800b984:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b988:	4619      	mov	r1, r3
 800b98a:	9b01      	ldr	r3, [sp, #4]
 800b98c:	e9c3 0100 	strd	r0, r1, [r3]
 800b990:	e791      	b.n	800b8b6 <__kernel_rem_pio2+0x4e6>
 800b992:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b996:	f7f4 fc91 	bl	80002bc <__adddf3>
 800b99a:	3d01      	subs	r5, #1
 800b99c:	e7ed      	b.n	800b97a <__kernel_rem_pio2+0x5aa>
 800b99e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b9a2:	f7f4 fc8b 	bl	80002bc <__adddf3>
 800b9a6:	3e01      	subs	r6, #1
 800b9a8:	e7c0      	b.n	800b92c <__kernel_rem_pio2+0x55c>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	e7c5      	b.n	800b93c <__kernel_rem_pio2+0x56c>
 800b9b0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b9b4:	f7f4 fc82 	bl	80002bc <__adddf3>
 800b9b8:	3401      	adds	r4, #1
 800b9ba:	e7ca      	b.n	800b952 <__kernel_rem_pio2+0x582>
 800b9bc:	e9da 8900 	ldrd	r8, r9, [sl]
 800b9c0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b9c4:	9b02      	ldr	r3, [sp, #8]
 800b9c6:	3b01      	subs	r3, #1
 800b9c8:	9302      	str	r3, [sp, #8]
 800b9ca:	4632      	mov	r2, r6
 800b9cc:	463b      	mov	r3, r7
 800b9ce:	4640      	mov	r0, r8
 800b9d0:	4649      	mov	r1, r9
 800b9d2:	f7f4 fc73 	bl	80002bc <__adddf3>
 800b9d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b9da:	4602      	mov	r2, r0
 800b9dc:	460b      	mov	r3, r1
 800b9de:	4640      	mov	r0, r8
 800b9e0:	4649      	mov	r1, r9
 800b9e2:	f7f4 fc69 	bl	80002b8 <__aeabi_dsub>
 800b9e6:	4632      	mov	r2, r6
 800b9e8:	463b      	mov	r3, r7
 800b9ea:	f7f4 fc67 	bl	80002bc <__adddf3>
 800b9ee:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b9f2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b9f6:	ed8a 7b00 	vstr	d7, [sl]
 800b9fa:	e76e      	b.n	800b8da <__kernel_rem_pio2+0x50a>
 800b9fc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ba00:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ba04:	4640      	mov	r0, r8
 800ba06:	4632      	mov	r2, r6
 800ba08:	463b      	mov	r3, r7
 800ba0a:	4649      	mov	r1, r9
 800ba0c:	f7f4 fc56 	bl	80002bc <__adddf3>
 800ba10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba14:	4602      	mov	r2, r0
 800ba16:	460b      	mov	r3, r1
 800ba18:	4640      	mov	r0, r8
 800ba1a:	4649      	mov	r1, r9
 800ba1c:	f7f4 fc4c 	bl	80002b8 <__aeabi_dsub>
 800ba20:	4632      	mov	r2, r6
 800ba22:	463b      	mov	r3, r7
 800ba24:	f7f4 fc4a 	bl	80002bc <__adddf3>
 800ba28:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ba30:	ed84 7b00 	vstr	d7, [r4]
 800ba34:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba38:	e755      	b.n	800b8e6 <__kernel_rem_pio2+0x516>
 800ba3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ba3e:	f7f4 fc3d 	bl	80002bc <__adddf3>
 800ba42:	3d01      	subs	r5, #1
 800ba44:	e759      	b.n	800b8fa <__kernel_rem_pio2+0x52a>
 800ba46:	9b01      	ldr	r3, [sp, #4]
 800ba48:	9a01      	ldr	r2, [sp, #4]
 800ba4a:	601d      	str	r5, [r3, #0]
 800ba4c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ba50:	605c      	str	r4, [r3, #4]
 800ba52:	609f      	str	r7, [r3, #8]
 800ba54:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ba58:	60d3      	str	r3, [r2, #12]
 800ba5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba5e:	6110      	str	r0, [r2, #16]
 800ba60:	6153      	str	r3, [r2, #20]
 800ba62:	e728      	b.n	800b8b6 <__kernel_rem_pio2+0x4e6>
 800ba64:	41700000 	.word	0x41700000
 800ba68:	3e700000 	.word	0x3e700000
 800ba6c:	00000000 	.word	0x00000000

0800ba70 <__kernel_sin>:
 800ba70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba74:	ed2d 8b04 	vpush	{d8-d9}
 800ba78:	eeb0 8a41 	vmov.f32	s16, s2
 800ba7c:	eef0 8a61 	vmov.f32	s17, s3
 800ba80:	ec55 4b10 	vmov	r4, r5, d0
 800ba84:	b083      	sub	sp, #12
 800ba86:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ba8a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ba8e:	9001      	str	r0, [sp, #4]
 800ba90:	da06      	bge.n	800baa0 <__kernel_sin+0x30>
 800ba92:	ee10 0a10 	vmov	r0, s0
 800ba96:	4629      	mov	r1, r5
 800ba98:	f7f5 f876 	bl	8000b88 <__aeabi_d2iz>
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	d051      	beq.n	800bb44 <__kernel_sin+0xd4>
 800baa0:	4622      	mov	r2, r4
 800baa2:	462b      	mov	r3, r5
 800baa4:	4620      	mov	r0, r4
 800baa6:	4629      	mov	r1, r5
 800baa8:	f7f4 fdbe 	bl	8000628 <__aeabi_dmul>
 800baac:	4682      	mov	sl, r0
 800baae:	468b      	mov	fp, r1
 800bab0:	4602      	mov	r2, r0
 800bab2:	460b      	mov	r3, r1
 800bab4:	4620      	mov	r0, r4
 800bab6:	4629      	mov	r1, r5
 800bab8:	f7f4 fdb6 	bl	8000628 <__aeabi_dmul>
 800babc:	a341      	add	r3, pc, #260	; (adr r3, 800bbc4 <__kernel_sin+0x154>)
 800babe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac2:	4680      	mov	r8, r0
 800bac4:	4689      	mov	r9, r1
 800bac6:	4650      	mov	r0, sl
 800bac8:	4659      	mov	r1, fp
 800baca:	f7f4 fdad 	bl	8000628 <__aeabi_dmul>
 800bace:	a33f      	add	r3, pc, #252	; (adr r3, 800bbcc <__kernel_sin+0x15c>)
 800bad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad4:	f7f4 fbf0 	bl	80002b8 <__aeabi_dsub>
 800bad8:	4652      	mov	r2, sl
 800bada:	465b      	mov	r3, fp
 800badc:	f7f4 fda4 	bl	8000628 <__aeabi_dmul>
 800bae0:	a33c      	add	r3, pc, #240	; (adr r3, 800bbd4 <__kernel_sin+0x164>)
 800bae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae6:	f7f4 fbe9 	bl	80002bc <__adddf3>
 800baea:	4652      	mov	r2, sl
 800baec:	465b      	mov	r3, fp
 800baee:	f7f4 fd9b 	bl	8000628 <__aeabi_dmul>
 800baf2:	a33a      	add	r3, pc, #232	; (adr r3, 800bbdc <__kernel_sin+0x16c>)
 800baf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf8:	f7f4 fbde 	bl	80002b8 <__aeabi_dsub>
 800bafc:	4652      	mov	r2, sl
 800bafe:	465b      	mov	r3, fp
 800bb00:	f7f4 fd92 	bl	8000628 <__aeabi_dmul>
 800bb04:	a337      	add	r3, pc, #220	; (adr r3, 800bbe4 <__kernel_sin+0x174>)
 800bb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0a:	f7f4 fbd7 	bl	80002bc <__adddf3>
 800bb0e:	9b01      	ldr	r3, [sp, #4]
 800bb10:	4606      	mov	r6, r0
 800bb12:	460f      	mov	r7, r1
 800bb14:	b9eb      	cbnz	r3, 800bb52 <__kernel_sin+0xe2>
 800bb16:	4602      	mov	r2, r0
 800bb18:	460b      	mov	r3, r1
 800bb1a:	4650      	mov	r0, sl
 800bb1c:	4659      	mov	r1, fp
 800bb1e:	f7f4 fd83 	bl	8000628 <__aeabi_dmul>
 800bb22:	a325      	add	r3, pc, #148	; (adr r3, 800bbb8 <__kernel_sin+0x148>)
 800bb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb28:	f7f4 fbc6 	bl	80002b8 <__aeabi_dsub>
 800bb2c:	4642      	mov	r2, r8
 800bb2e:	464b      	mov	r3, r9
 800bb30:	f7f4 fd7a 	bl	8000628 <__aeabi_dmul>
 800bb34:	4602      	mov	r2, r0
 800bb36:	460b      	mov	r3, r1
 800bb38:	4620      	mov	r0, r4
 800bb3a:	4629      	mov	r1, r5
 800bb3c:	f7f4 fbbe 	bl	80002bc <__adddf3>
 800bb40:	4604      	mov	r4, r0
 800bb42:	460d      	mov	r5, r1
 800bb44:	ec45 4b10 	vmov	d0, r4, r5
 800bb48:	b003      	add	sp, #12
 800bb4a:	ecbd 8b04 	vpop	{d8-d9}
 800bb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb52:	4b1b      	ldr	r3, [pc, #108]	; (800bbc0 <__kernel_sin+0x150>)
 800bb54:	ec51 0b18 	vmov	r0, r1, d8
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f7f4 fd65 	bl	8000628 <__aeabi_dmul>
 800bb5e:	4632      	mov	r2, r6
 800bb60:	ec41 0b19 	vmov	d9, r0, r1
 800bb64:	463b      	mov	r3, r7
 800bb66:	4640      	mov	r0, r8
 800bb68:	4649      	mov	r1, r9
 800bb6a:	f7f4 fd5d 	bl	8000628 <__aeabi_dmul>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	460b      	mov	r3, r1
 800bb72:	ec51 0b19 	vmov	r0, r1, d9
 800bb76:	f7f4 fb9f 	bl	80002b8 <__aeabi_dsub>
 800bb7a:	4652      	mov	r2, sl
 800bb7c:	465b      	mov	r3, fp
 800bb7e:	f7f4 fd53 	bl	8000628 <__aeabi_dmul>
 800bb82:	ec53 2b18 	vmov	r2, r3, d8
 800bb86:	f7f4 fb97 	bl	80002b8 <__aeabi_dsub>
 800bb8a:	a30b      	add	r3, pc, #44	; (adr r3, 800bbb8 <__kernel_sin+0x148>)
 800bb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb90:	4606      	mov	r6, r0
 800bb92:	460f      	mov	r7, r1
 800bb94:	4640      	mov	r0, r8
 800bb96:	4649      	mov	r1, r9
 800bb98:	f7f4 fd46 	bl	8000628 <__aeabi_dmul>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	460b      	mov	r3, r1
 800bba0:	4630      	mov	r0, r6
 800bba2:	4639      	mov	r1, r7
 800bba4:	f7f4 fb8a 	bl	80002bc <__adddf3>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	460b      	mov	r3, r1
 800bbac:	4620      	mov	r0, r4
 800bbae:	4629      	mov	r1, r5
 800bbb0:	f7f4 fb82 	bl	80002b8 <__aeabi_dsub>
 800bbb4:	e7c4      	b.n	800bb40 <__kernel_sin+0xd0>
 800bbb6:	bf00      	nop
 800bbb8:	55555549 	.word	0x55555549
 800bbbc:	3fc55555 	.word	0x3fc55555
 800bbc0:	3fe00000 	.word	0x3fe00000
 800bbc4:	5acfd57c 	.word	0x5acfd57c
 800bbc8:	3de5d93a 	.word	0x3de5d93a
 800bbcc:	8a2b9ceb 	.word	0x8a2b9ceb
 800bbd0:	3e5ae5e6 	.word	0x3e5ae5e6
 800bbd4:	57b1fe7d 	.word	0x57b1fe7d
 800bbd8:	3ec71de3 	.word	0x3ec71de3
 800bbdc:	19c161d5 	.word	0x19c161d5
 800bbe0:	3f2a01a0 	.word	0x3f2a01a0
 800bbe4:	1110f8a6 	.word	0x1110f8a6
 800bbe8:	3f811111 	.word	0x3f811111

0800bbec <with_errno>:
 800bbec:	b570      	push	{r4, r5, r6, lr}
 800bbee:	4604      	mov	r4, r0
 800bbf0:	460d      	mov	r5, r1
 800bbf2:	4616      	mov	r6, r2
 800bbf4:	f7f9 fcf4 	bl	80055e0 <__errno>
 800bbf8:	4629      	mov	r1, r5
 800bbfa:	6006      	str	r6, [r0, #0]
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	bd70      	pop	{r4, r5, r6, pc}

0800bc00 <xflow>:
 800bc00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc02:	4614      	mov	r4, r2
 800bc04:	461d      	mov	r5, r3
 800bc06:	b108      	cbz	r0, 800bc0c <xflow+0xc>
 800bc08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bc0c:	e9cd 2300 	strd	r2, r3, [sp]
 800bc10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc14:	4620      	mov	r0, r4
 800bc16:	4629      	mov	r1, r5
 800bc18:	f7f4 fd06 	bl	8000628 <__aeabi_dmul>
 800bc1c:	2222      	movs	r2, #34	; 0x22
 800bc1e:	b003      	add	sp, #12
 800bc20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc24:	f7ff bfe2 	b.w	800bbec <with_errno>

0800bc28 <__math_uflow>:
 800bc28:	b508      	push	{r3, lr}
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bc30:	f7ff ffe6 	bl	800bc00 <xflow>
 800bc34:	ec41 0b10 	vmov	d0, r0, r1
 800bc38:	bd08      	pop	{r3, pc}

0800bc3a <__math_oflow>:
 800bc3a:	b508      	push	{r3, lr}
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800bc42:	f7ff ffdd 	bl	800bc00 <xflow>
 800bc46:	ec41 0b10 	vmov	d0, r0, r1
 800bc4a:	bd08      	pop	{r3, pc}
 800bc4c:	0000      	movs	r0, r0
	...

0800bc50 <atan>:
 800bc50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc54:	ec55 4b10 	vmov	r4, r5, d0
 800bc58:	4bc3      	ldr	r3, [pc, #780]	; (800bf68 <atan+0x318>)
 800bc5a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bc5e:	429e      	cmp	r6, r3
 800bc60:	46ab      	mov	fp, r5
 800bc62:	dd18      	ble.n	800bc96 <atan+0x46>
 800bc64:	4bc1      	ldr	r3, [pc, #772]	; (800bf6c <atan+0x31c>)
 800bc66:	429e      	cmp	r6, r3
 800bc68:	dc01      	bgt.n	800bc6e <atan+0x1e>
 800bc6a:	d109      	bne.n	800bc80 <atan+0x30>
 800bc6c:	b144      	cbz	r4, 800bc80 <atan+0x30>
 800bc6e:	4622      	mov	r2, r4
 800bc70:	462b      	mov	r3, r5
 800bc72:	4620      	mov	r0, r4
 800bc74:	4629      	mov	r1, r5
 800bc76:	f7f4 fb21 	bl	80002bc <__adddf3>
 800bc7a:	4604      	mov	r4, r0
 800bc7c:	460d      	mov	r5, r1
 800bc7e:	e006      	b.n	800bc8e <atan+0x3e>
 800bc80:	f1bb 0f00 	cmp.w	fp, #0
 800bc84:	f300 8131 	bgt.w	800beea <atan+0x29a>
 800bc88:	a59b      	add	r5, pc, #620	; (adr r5, 800bef8 <atan+0x2a8>)
 800bc8a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc8e:	ec45 4b10 	vmov	d0, r4, r5
 800bc92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc96:	4bb6      	ldr	r3, [pc, #728]	; (800bf70 <atan+0x320>)
 800bc98:	429e      	cmp	r6, r3
 800bc9a:	dc14      	bgt.n	800bcc6 <atan+0x76>
 800bc9c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bca0:	429e      	cmp	r6, r3
 800bca2:	dc0d      	bgt.n	800bcc0 <atan+0x70>
 800bca4:	a396      	add	r3, pc, #600	; (adr r3, 800bf00 <atan+0x2b0>)
 800bca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcaa:	ee10 0a10 	vmov	r0, s0
 800bcae:	4629      	mov	r1, r5
 800bcb0:	f7f4 fb04 	bl	80002bc <__adddf3>
 800bcb4:	4baf      	ldr	r3, [pc, #700]	; (800bf74 <atan+0x324>)
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f7f4 ff46 	bl	8000b48 <__aeabi_dcmpgt>
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	d1e6      	bne.n	800bc8e <atan+0x3e>
 800bcc0:	f04f 3aff 	mov.w	sl, #4294967295
 800bcc4:	e02b      	b.n	800bd1e <atan+0xce>
 800bcc6:	f000 f963 	bl	800bf90 <fabs>
 800bcca:	4bab      	ldr	r3, [pc, #684]	; (800bf78 <atan+0x328>)
 800bccc:	429e      	cmp	r6, r3
 800bcce:	ec55 4b10 	vmov	r4, r5, d0
 800bcd2:	f300 80bf 	bgt.w	800be54 <atan+0x204>
 800bcd6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bcda:	429e      	cmp	r6, r3
 800bcdc:	f300 80a0 	bgt.w	800be20 <atan+0x1d0>
 800bce0:	ee10 2a10 	vmov	r2, s0
 800bce4:	ee10 0a10 	vmov	r0, s0
 800bce8:	462b      	mov	r3, r5
 800bcea:	4629      	mov	r1, r5
 800bcec:	f7f4 fae6 	bl	80002bc <__adddf3>
 800bcf0:	4ba0      	ldr	r3, [pc, #640]	; (800bf74 <atan+0x324>)
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f7f4 fae0 	bl	80002b8 <__aeabi_dsub>
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	4606      	mov	r6, r0
 800bcfc:	460f      	mov	r7, r1
 800bcfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bd02:	4620      	mov	r0, r4
 800bd04:	4629      	mov	r1, r5
 800bd06:	f7f4 fad9 	bl	80002bc <__adddf3>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	4630      	mov	r0, r6
 800bd10:	4639      	mov	r1, r7
 800bd12:	f7f4 fdb3 	bl	800087c <__aeabi_ddiv>
 800bd16:	f04f 0a00 	mov.w	sl, #0
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	460d      	mov	r5, r1
 800bd1e:	4622      	mov	r2, r4
 800bd20:	462b      	mov	r3, r5
 800bd22:	4620      	mov	r0, r4
 800bd24:	4629      	mov	r1, r5
 800bd26:	f7f4 fc7f 	bl	8000628 <__aeabi_dmul>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	4680      	mov	r8, r0
 800bd30:	4689      	mov	r9, r1
 800bd32:	f7f4 fc79 	bl	8000628 <__aeabi_dmul>
 800bd36:	a374      	add	r3, pc, #464	; (adr r3, 800bf08 <atan+0x2b8>)
 800bd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3c:	4606      	mov	r6, r0
 800bd3e:	460f      	mov	r7, r1
 800bd40:	f7f4 fc72 	bl	8000628 <__aeabi_dmul>
 800bd44:	a372      	add	r3, pc, #456	; (adr r3, 800bf10 <atan+0x2c0>)
 800bd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4a:	f7f4 fab7 	bl	80002bc <__adddf3>
 800bd4e:	4632      	mov	r2, r6
 800bd50:	463b      	mov	r3, r7
 800bd52:	f7f4 fc69 	bl	8000628 <__aeabi_dmul>
 800bd56:	a370      	add	r3, pc, #448	; (adr r3, 800bf18 <atan+0x2c8>)
 800bd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5c:	f7f4 faae 	bl	80002bc <__adddf3>
 800bd60:	4632      	mov	r2, r6
 800bd62:	463b      	mov	r3, r7
 800bd64:	f7f4 fc60 	bl	8000628 <__aeabi_dmul>
 800bd68:	a36d      	add	r3, pc, #436	; (adr r3, 800bf20 <atan+0x2d0>)
 800bd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6e:	f7f4 faa5 	bl	80002bc <__adddf3>
 800bd72:	4632      	mov	r2, r6
 800bd74:	463b      	mov	r3, r7
 800bd76:	f7f4 fc57 	bl	8000628 <__aeabi_dmul>
 800bd7a:	a36b      	add	r3, pc, #428	; (adr r3, 800bf28 <atan+0x2d8>)
 800bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd80:	f7f4 fa9c 	bl	80002bc <__adddf3>
 800bd84:	4632      	mov	r2, r6
 800bd86:	463b      	mov	r3, r7
 800bd88:	f7f4 fc4e 	bl	8000628 <__aeabi_dmul>
 800bd8c:	a368      	add	r3, pc, #416	; (adr r3, 800bf30 <atan+0x2e0>)
 800bd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd92:	f7f4 fa93 	bl	80002bc <__adddf3>
 800bd96:	4642      	mov	r2, r8
 800bd98:	464b      	mov	r3, r9
 800bd9a:	f7f4 fc45 	bl	8000628 <__aeabi_dmul>
 800bd9e:	a366      	add	r3, pc, #408	; (adr r3, 800bf38 <atan+0x2e8>)
 800bda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda4:	4680      	mov	r8, r0
 800bda6:	4689      	mov	r9, r1
 800bda8:	4630      	mov	r0, r6
 800bdaa:	4639      	mov	r1, r7
 800bdac:	f7f4 fc3c 	bl	8000628 <__aeabi_dmul>
 800bdb0:	a363      	add	r3, pc, #396	; (adr r3, 800bf40 <atan+0x2f0>)
 800bdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb6:	f7f4 fa7f 	bl	80002b8 <__aeabi_dsub>
 800bdba:	4632      	mov	r2, r6
 800bdbc:	463b      	mov	r3, r7
 800bdbe:	f7f4 fc33 	bl	8000628 <__aeabi_dmul>
 800bdc2:	a361      	add	r3, pc, #388	; (adr r3, 800bf48 <atan+0x2f8>)
 800bdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc8:	f7f4 fa76 	bl	80002b8 <__aeabi_dsub>
 800bdcc:	4632      	mov	r2, r6
 800bdce:	463b      	mov	r3, r7
 800bdd0:	f7f4 fc2a 	bl	8000628 <__aeabi_dmul>
 800bdd4:	a35e      	add	r3, pc, #376	; (adr r3, 800bf50 <atan+0x300>)
 800bdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdda:	f7f4 fa6d 	bl	80002b8 <__aeabi_dsub>
 800bdde:	4632      	mov	r2, r6
 800bde0:	463b      	mov	r3, r7
 800bde2:	f7f4 fc21 	bl	8000628 <__aeabi_dmul>
 800bde6:	a35c      	add	r3, pc, #368	; (adr r3, 800bf58 <atan+0x308>)
 800bde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdec:	f7f4 fa64 	bl	80002b8 <__aeabi_dsub>
 800bdf0:	4632      	mov	r2, r6
 800bdf2:	463b      	mov	r3, r7
 800bdf4:	f7f4 fc18 	bl	8000628 <__aeabi_dmul>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	4640      	mov	r0, r8
 800bdfe:	4649      	mov	r1, r9
 800be00:	f7f4 fa5c 	bl	80002bc <__adddf3>
 800be04:	4622      	mov	r2, r4
 800be06:	462b      	mov	r3, r5
 800be08:	f7f4 fc0e 	bl	8000628 <__aeabi_dmul>
 800be0c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800be10:	4602      	mov	r2, r0
 800be12:	460b      	mov	r3, r1
 800be14:	d14b      	bne.n	800beae <atan+0x25e>
 800be16:	4620      	mov	r0, r4
 800be18:	4629      	mov	r1, r5
 800be1a:	f7f4 fa4d 	bl	80002b8 <__aeabi_dsub>
 800be1e:	e72c      	b.n	800bc7a <atan+0x2a>
 800be20:	ee10 0a10 	vmov	r0, s0
 800be24:	4b53      	ldr	r3, [pc, #332]	; (800bf74 <atan+0x324>)
 800be26:	2200      	movs	r2, #0
 800be28:	4629      	mov	r1, r5
 800be2a:	f7f4 fa45 	bl	80002b8 <__aeabi_dsub>
 800be2e:	4b51      	ldr	r3, [pc, #324]	; (800bf74 <atan+0x324>)
 800be30:	4606      	mov	r6, r0
 800be32:	460f      	mov	r7, r1
 800be34:	2200      	movs	r2, #0
 800be36:	4620      	mov	r0, r4
 800be38:	4629      	mov	r1, r5
 800be3a:	f7f4 fa3f 	bl	80002bc <__adddf3>
 800be3e:	4602      	mov	r2, r0
 800be40:	460b      	mov	r3, r1
 800be42:	4630      	mov	r0, r6
 800be44:	4639      	mov	r1, r7
 800be46:	f7f4 fd19 	bl	800087c <__aeabi_ddiv>
 800be4a:	f04f 0a01 	mov.w	sl, #1
 800be4e:	4604      	mov	r4, r0
 800be50:	460d      	mov	r5, r1
 800be52:	e764      	b.n	800bd1e <atan+0xce>
 800be54:	4b49      	ldr	r3, [pc, #292]	; (800bf7c <atan+0x32c>)
 800be56:	429e      	cmp	r6, r3
 800be58:	da1d      	bge.n	800be96 <atan+0x246>
 800be5a:	ee10 0a10 	vmov	r0, s0
 800be5e:	4b48      	ldr	r3, [pc, #288]	; (800bf80 <atan+0x330>)
 800be60:	2200      	movs	r2, #0
 800be62:	4629      	mov	r1, r5
 800be64:	f7f4 fa28 	bl	80002b8 <__aeabi_dsub>
 800be68:	4b45      	ldr	r3, [pc, #276]	; (800bf80 <atan+0x330>)
 800be6a:	4606      	mov	r6, r0
 800be6c:	460f      	mov	r7, r1
 800be6e:	2200      	movs	r2, #0
 800be70:	4620      	mov	r0, r4
 800be72:	4629      	mov	r1, r5
 800be74:	f7f4 fbd8 	bl	8000628 <__aeabi_dmul>
 800be78:	4b3e      	ldr	r3, [pc, #248]	; (800bf74 <atan+0x324>)
 800be7a:	2200      	movs	r2, #0
 800be7c:	f7f4 fa1e 	bl	80002bc <__adddf3>
 800be80:	4602      	mov	r2, r0
 800be82:	460b      	mov	r3, r1
 800be84:	4630      	mov	r0, r6
 800be86:	4639      	mov	r1, r7
 800be88:	f7f4 fcf8 	bl	800087c <__aeabi_ddiv>
 800be8c:	f04f 0a02 	mov.w	sl, #2
 800be90:	4604      	mov	r4, r0
 800be92:	460d      	mov	r5, r1
 800be94:	e743      	b.n	800bd1e <atan+0xce>
 800be96:	462b      	mov	r3, r5
 800be98:	ee10 2a10 	vmov	r2, s0
 800be9c:	4939      	ldr	r1, [pc, #228]	; (800bf84 <atan+0x334>)
 800be9e:	2000      	movs	r0, #0
 800bea0:	f7f4 fcec 	bl	800087c <__aeabi_ddiv>
 800bea4:	f04f 0a03 	mov.w	sl, #3
 800bea8:	4604      	mov	r4, r0
 800beaa:	460d      	mov	r5, r1
 800beac:	e737      	b.n	800bd1e <atan+0xce>
 800beae:	4b36      	ldr	r3, [pc, #216]	; (800bf88 <atan+0x338>)
 800beb0:	4e36      	ldr	r6, [pc, #216]	; (800bf8c <atan+0x33c>)
 800beb2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800beb6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800beba:	e9da 2300 	ldrd	r2, r3, [sl]
 800bebe:	f7f4 f9fb 	bl	80002b8 <__aeabi_dsub>
 800bec2:	4622      	mov	r2, r4
 800bec4:	462b      	mov	r3, r5
 800bec6:	f7f4 f9f7 	bl	80002b8 <__aeabi_dsub>
 800beca:	4602      	mov	r2, r0
 800becc:	460b      	mov	r3, r1
 800bece:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bed2:	f7f4 f9f1 	bl	80002b8 <__aeabi_dsub>
 800bed6:	f1bb 0f00 	cmp.w	fp, #0
 800beda:	4604      	mov	r4, r0
 800bedc:	460d      	mov	r5, r1
 800bede:	f6bf aed6 	bge.w	800bc8e <atan+0x3e>
 800bee2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bee6:	461d      	mov	r5, r3
 800bee8:	e6d1      	b.n	800bc8e <atan+0x3e>
 800beea:	a51d      	add	r5, pc, #116	; (adr r5, 800bf60 <atan+0x310>)
 800beec:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bef0:	e6cd      	b.n	800bc8e <atan+0x3e>
 800bef2:	bf00      	nop
 800bef4:	f3af 8000 	nop.w
 800bef8:	54442d18 	.word	0x54442d18
 800befc:	bff921fb 	.word	0xbff921fb
 800bf00:	8800759c 	.word	0x8800759c
 800bf04:	7e37e43c 	.word	0x7e37e43c
 800bf08:	e322da11 	.word	0xe322da11
 800bf0c:	3f90ad3a 	.word	0x3f90ad3a
 800bf10:	24760deb 	.word	0x24760deb
 800bf14:	3fa97b4b 	.word	0x3fa97b4b
 800bf18:	a0d03d51 	.word	0xa0d03d51
 800bf1c:	3fb10d66 	.word	0x3fb10d66
 800bf20:	c54c206e 	.word	0xc54c206e
 800bf24:	3fb745cd 	.word	0x3fb745cd
 800bf28:	920083ff 	.word	0x920083ff
 800bf2c:	3fc24924 	.word	0x3fc24924
 800bf30:	5555550d 	.word	0x5555550d
 800bf34:	3fd55555 	.word	0x3fd55555
 800bf38:	2c6a6c2f 	.word	0x2c6a6c2f
 800bf3c:	bfa2b444 	.word	0xbfa2b444
 800bf40:	52defd9a 	.word	0x52defd9a
 800bf44:	3fadde2d 	.word	0x3fadde2d
 800bf48:	af749a6d 	.word	0xaf749a6d
 800bf4c:	3fb3b0f2 	.word	0x3fb3b0f2
 800bf50:	fe231671 	.word	0xfe231671
 800bf54:	3fbc71c6 	.word	0x3fbc71c6
 800bf58:	9998ebc4 	.word	0x9998ebc4
 800bf5c:	3fc99999 	.word	0x3fc99999
 800bf60:	54442d18 	.word	0x54442d18
 800bf64:	3ff921fb 	.word	0x3ff921fb
 800bf68:	440fffff 	.word	0x440fffff
 800bf6c:	7ff00000 	.word	0x7ff00000
 800bf70:	3fdbffff 	.word	0x3fdbffff
 800bf74:	3ff00000 	.word	0x3ff00000
 800bf78:	3ff2ffff 	.word	0x3ff2ffff
 800bf7c:	40038000 	.word	0x40038000
 800bf80:	3ff80000 	.word	0x3ff80000
 800bf84:	bff00000 	.word	0xbff00000
 800bf88:	0800cc80 	.word	0x0800cc80
 800bf8c:	0800cc60 	.word	0x0800cc60

0800bf90 <fabs>:
 800bf90:	ec51 0b10 	vmov	r0, r1, d0
 800bf94:	ee10 2a10 	vmov	r2, s0
 800bf98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf9c:	ec43 2b10 	vmov	d0, r2, r3
 800bfa0:	4770      	bx	lr

0800bfa2 <finite>:
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	ed8d 0b00 	vstr	d0, [sp]
 800bfa8:	9801      	ldr	r0, [sp, #4]
 800bfaa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bfae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bfb2:	0fc0      	lsrs	r0, r0, #31
 800bfb4:	b002      	add	sp, #8
 800bfb6:	4770      	bx	lr

0800bfb8 <floor>:
 800bfb8:	ec51 0b10 	vmov	r0, r1, d0
 800bfbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bfc4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bfc8:	2e13      	cmp	r6, #19
 800bfca:	ee10 5a10 	vmov	r5, s0
 800bfce:	ee10 8a10 	vmov	r8, s0
 800bfd2:	460c      	mov	r4, r1
 800bfd4:	dc32      	bgt.n	800c03c <floor+0x84>
 800bfd6:	2e00      	cmp	r6, #0
 800bfd8:	da14      	bge.n	800c004 <floor+0x4c>
 800bfda:	a333      	add	r3, pc, #204	; (adr r3, 800c0a8 <floor+0xf0>)
 800bfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe0:	f7f4 f96c 	bl	80002bc <__adddf3>
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	f7f4 fdae 	bl	8000b48 <__aeabi_dcmpgt>
 800bfec:	b138      	cbz	r0, 800bffe <floor+0x46>
 800bfee:	2c00      	cmp	r4, #0
 800bff0:	da57      	bge.n	800c0a2 <floor+0xea>
 800bff2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bff6:	431d      	orrs	r5, r3
 800bff8:	d001      	beq.n	800bffe <floor+0x46>
 800bffa:	4c2d      	ldr	r4, [pc, #180]	; (800c0b0 <floor+0xf8>)
 800bffc:	2500      	movs	r5, #0
 800bffe:	4621      	mov	r1, r4
 800c000:	4628      	mov	r0, r5
 800c002:	e025      	b.n	800c050 <floor+0x98>
 800c004:	4f2b      	ldr	r7, [pc, #172]	; (800c0b4 <floor+0xfc>)
 800c006:	4137      	asrs	r7, r6
 800c008:	ea01 0307 	and.w	r3, r1, r7
 800c00c:	4303      	orrs	r3, r0
 800c00e:	d01f      	beq.n	800c050 <floor+0x98>
 800c010:	a325      	add	r3, pc, #148	; (adr r3, 800c0a8 <floor+0xf0>)
 800c012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c016:	f7f4 f951 	bl	80002bc <__adddf3>
 800c01a:	2200      	movs	r2, #0
 800c01c:	2300      	movs	r3, #0
 800c01e:	f7f4 fd93 	bl	8000b48 <__aeabi_dcmpgt>
 800c022:	2800      	cmp	r0, #0
 800c024:	d0eb      	beq.n	800bffe <floor+0x46>
 800c026:	2c00      	cmp	r4, #0
 800c028:	bfbe      	ittt	lt
 800c02a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c02e:	fa43 f606 	asrlt.w	r6, r3, r6
 800c032:	19a4      	addlt	r4, r4, r6
 800c034:	ea24 0407 	bic.w	r4, r4, r7
 800c038:	2500      	movs	r5, #0
 800c03a:	e7e0      	b.n	800bffe <floor+0x46>
 800c03c:	2e33      	cmp	r6, #51	; 0x33
 800c03e:	dd0b      	ble.n	800c058 <floor+0xa0>
 800c040:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c044:	d104      	bne.n	800c050 <floor+0x98>
 800c046:	ee10 2a10 	vmov	r2, s0
 800c04a:	460b      	mov	r3, r1
 800c04c:	f7f4 f936 	bl	80002bc <__adddf3>
 800c050:	ec41 0b10 	vmov	d0, r0, r1
 800c054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c058:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c05c:	f04f 33ff 	mov.w	r3, #4294967295
 800c060:	fa23 f707 	lsr.w	r7, r3, r7
 800c064:	4207      	tst	r7, r0
 800c066:	d0f3      	beq.n	800c050 <floor+0x98>
 800c068:	a30f      	add	r3, pc, #60	; (adr r3, 800c0a8 <floor+0xf0>)
 800c06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06e:	f7f4 f925 	bl	80002bc <__adddf3>
 800c072:	2200      	movs	r2, #0
 800c074:	2300      	movs	r3, #0
 800c076:	f7f4 fd67 	bl	8000b48 <__aeabi_dcmpgt>
 800c07a:	2800      	cmp	r0, #0
 800c07c:	d0bf      	beq.n	800bffe <floor+0x46>
 800c07e:	2c00      	cmp	r4, #0
 800c080:	da02      	bge.n	800c088 <floor+0xd0>
 800c082:	2e14      	cmp	r6, #20
 800c084:	d103      	bne.n	800c08e <floor+0xd6>
 800c086:	3401      	adds	r4, #1
 800c088:	ea25 0507 	bic.w	r5, r5, r7
 800c08c:	e7b7      	b.n	800bffe <floor+0x46>
 800c08e:	2301      	movs	r3, #1
 800c090:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c094:	fa03 f606 	lsl.w	r6, r3, r6
 800c098:	4435      	add	r5, r6
 800c09a:	4545      	cmp	r5, r8
 800c09c:	bf38      	it	cc
 800c09e:	18e4      	addcc	r4, r4, r3
 800c0a0:	e7f2      	b.n	800c088 <floor+0xd0>
 800c0a2:	2500      	movs	r5, #0
 800c0a4:	462c      	mov	r4, r5
 800c0a6:	e7aa      	b.n	800bffe <floor+0x46>
 800c0a8:	8800759c 	.word	0x8800759c
 800c0ac:	7e37e43c 	.word	0x7e37e43c
 800c0b0:	bff00000 	.word	0xbff00000
 800c0b4:	000fffff 	.word	0x000fffff

0800c0b8 <scalbn>:
 800c0b8:	b570      	push	{r4, r5, r6, lr}
 800c0ba:	ec55 4b10 	vmov	r4, r5, d0
 800c0be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c0c2:	4606      	mov	r6, r0
 800c0c4:	462b      	mov	r3, r5
 800c0c6:	b99a      	cbnz	r2, 800c0f0 <scalbn+0x38>
 800c0c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c0cc:	4323      	orrs	r3, r4
 800c0ce:	d036      	beq.n	800c13e <scalbn+0x86>
 800c0d0:	4b39      	ldr	r3, [pc, #228]	; (800c1b8 <scalbn+0x100>)
 800c0d2:	4629      	mov	r1, r5
 800c0d4:	ee10 0a10 	vmov	r0, s0
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f7f4 faa5 	bl	8000628 <__aeabi_dmul>
 800c0de:	4b37      	ldr	r3, [pc, #220]	; (800c1bc <scalbn+0x104>)
 800c0e0:	429e      	cmp	r6, r3
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	460d      	mov	r5, r1
 800c0e6:	da10      	bge.n	800c10a <scalbn+0x52>
 800c0e8:	a32b      	add	r3, pc, #172	; (adr r3, 800c198 <scalbn+0xe0>)
 800c0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ee:	e03a      	b.n	800c166 <scalbn+0xae>
 800c0f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c0f4:	428a      	cmp	r2, r1
 800c0f6:	d10c      	bne.n	800c112 <scalbn+0x5a>
 800c0f8:	ee10 2a10 	vmov	r2, s0
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	4629      	mov	r1, r5
 800c100:	f7f4 f8dc 	bl	80002bc <__adddf3>
 800c104:	4604      	mov	r4, r0
 800c106:	460d      	mov	r5, r1
 800c108:	e019      	b.n	800c13e <scalbn+0x86>
 800c10a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c10e:	460b      	mov	r3, r1
 800c110:	3a36      	subs	r2, #54	; 0x36
 800c112:	4432      	add	r2, r6
 800c114:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c118:	428a      	cmp	r2, r1
 800c11a:	dd08      	ble.n	800c12e <scalbn+0x76>
 800c11c:	2d00      	cmp	r5, #0
 800c11e:	a120      	add	r1, pc, #128	; (adr r1, 800c1a0 <scalbn+0xe8>)
 800c120:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c124:	da1c      	bge.n	800c160 <scalbn+0xa8>
 800c126:	a120      	add	r1, pc, #128	; (adr r1, 800c1a8 <scalbn+0xf0>)
 800c128:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c12c:	e018      	b.n	800c160 <scalbn+0xa8>
 800c12e:	2a00      	cmp	r2, #0
 800c130:	dd08      	ble.n	800c144 <scalbn+0x8c>
 800c132:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c136:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c13a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c13e:	ec45 4b10 	vmov	d0, r4, r5
 800c142:	bd70      	pop	{r4, r5, r6, pc}
 800c144:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c148:	da19      	bge.n	800c17e <scalbn+0xc6>
 800c14a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c14e:	429e      	cmp	r6, r3
 800c150:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c154:	dd0a      	ble.n	800c16c <scalbn+0xb4>
 800c156:	a112      	add	r1, pc, #72	; (adr r1, 800c1a0 <scalbn+0xe8>)
 800c158:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d1e2      	bne.n	800c126 <scalbn+0x6e>
 800c160:	a30f      	add	r3, pc, #60	; (adr r3, 800c1a0 <scalbn+0xe8>)
 800c162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c166:	f7f4 fa5f 	bl	8000628 <__aeabi_dmul>
 800c16a:	e7cb      	b.n	800c104 <scalbn+0x4c>
 800c16c:	a10a      	add	r1, pc, #40	; (adr r1, 800c198 <scalbn+0xe0>)
 800c16e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d0b8      	beq.n	800c0e8 <scalbn+0x30>
 800c176:	a10e      	add	r1, pc, #56	; (adr r1, 800c1b0 <scalbn+0xf8>)
 800c178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c17c:	e7b4      	b.n	800c0e8 <scalbn+0x30>
 800c17e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c182:	3236      	adds	r2, #54	; 0x36
 800c184:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c188:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c18c:	4620      	mov	r0, r4
 800c18e:	4b0c      	ldr	r3, [pc, #48]	; (800c1c0 <scalbn+0x108>)
 800c190:	2200      	movs	r2, #0
 800c192:	e7e8      	b.n	800c166 <scalbn+0xae>
 800c194:	f3af 8000 	nop.w
 800c198:	c2f8f359 	.word	0xc2f8f359
 800c19c:	01a56e1f 	.word	0x01a56e1f
 800c1a0:	8800759c 	.word	0x8800759c
 800c1a4:	7e37e43c 	.word	0x7e37e43c
 800c1a8:	8800759c 	.word	0x8800759c
 800c1ac:	fe37e43c 	.word	0xfe37e43c
 800c1b0:	c2f8f359 	.word	0xc2f8f359
 800c1b4:	81a56e1f 	.word	0x81a56e1f
 800c1b8:	43500000 	.word	0x43500000
 800c1bc:	ffff3cb0 	.word	0xffff3cb0
 800c1c0:	3c900000 	.word	0x3c900000

0800c1c4 <_init>:
 800c1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1c6:	bf00      	nop
 800c1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ca:	bc08      	pop	{r3}
 800c1cc:	469e      	mov	lr, r3
 800c1ce:	4770      	bx	lr

0800c1d0 <_fini>:
 800c1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1d2:	bf00      	nop
 800c1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1d6:	bc08      	pop	{r3}
 800c1d8:	469e      	mov	lr, r3
 800c1da:	4770      	bx	lr
