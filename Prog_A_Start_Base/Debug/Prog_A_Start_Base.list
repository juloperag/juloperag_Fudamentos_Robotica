
Prog_A_Start_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  08009660  08009660  00019660  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bac  08009bac  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009bac  08009bac  00019bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bb4  08009bb4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bb4  08009bb4  00019bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bb8  08009bb8  00019bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000094ac  200001e8  08009da4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009694  08009da4  00029694  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000040cd  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fb0  00000000  00000000  000242e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000348  00000000  00000000  00025298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002b0  00000000  00000000  000255e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010dcf  00000000  00000000  00025890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000052d9  00000000  00000000  0003665f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058228  00000000  00000000  0003b938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00093b60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025b0  00000000  00000000  00093bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009644 	.word	0x08009644

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08009644 	.word	0x08009644

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9dd 	b.w	8001094 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f86b 	bl	8000dc4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f85e 	bl	8000dc4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f84d 	bl	8000dc4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f83f 	bl	8000dc4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff fed3 	bl	8000b0c <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc49 	bl	8000628 <__aeabi_dmul>
 8000d96:	f7ff ff1f 	bl	8000bd8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbca 	bl	8000534 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc40 	bl	8000628 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa82 	bl	80002b8 <__aeabi_dsub>
 8000db4:	f7ff ff10 	bl	8000bd8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <aplicattion_A_Star>:
#include "A_Star.h"
#include <float.h>
#include <math.h>

//-----------------------------------------------Funciones para la implementacion de A Star------------------------------------------------------------------
file_cell_t* aplicattion_A_Star(Cell_map_t grid[20][20], uint8_t row, uint8_t colum, float start_x, float start_y, float goal_x, float goal_y) {
 8001098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800109c:	f5ad 4dd5 	sub.w	sp, sp, #27264	; 0x6a80
 80010a0:	b087      	sub	sp, #28
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80010a8:	f6a3 2374 	subw	r3, r3, #2676	; 0xa74
 80010ac:	6018      	str	r0, [r3, #0]
 80010ae:	4608      	mov	r0, r1
 80010b0:	4611      	mov	r1, r2
 80010b2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80010b6:	f6a3 237c 	subw	r3, r3, #2684	; 0xa7c
 80010ba:	ed83 0a00 	vstr	s0, [r3]
 80010be:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80010c2:	f5a3 6328 	sub.w	r3, r3, #2688	; 0xa80
 80010c6:	edc3 0a00 	vstr	s1, [r3]
 80010ca:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80010ce:	f6a3 2384 	subw	r3, r3, #2692	; 0xa84
 80010d2:	ed83 1a00 	vstr	s2, [r3]
 80010d6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80010da:	f6a3 2388 	subw	r3, r3, #2696	; 0xa88
 80010de:	edc3 1a00 	vstr	s3, [r3]
 80010e2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80010e6:	f6a3 2375 	subw	r3, r3, #2677	; 0xa75
 80010ea:	4602      	mov	r2, r0
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80010f2:	f6a3 2376 	subw	r3, r3, #2678	; 0xa76
 80010f6:	460a      	mov	r2, r1
 80010f8:	701a      	strb	r2, [r3, #0]
  //Variables
  file_cell_t *ptrFile;                           //Puntero a la ficha de la secuencia actual de A Star
  file_cell_t file_Open[100] = {0};               //Arreglo de fichas abiertas
 80010fa:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80010fe:	f6a3 236c 	subw	r3, r3, #2668	; 0xa6c
 8001102:	4618      	mov	r0, r3
 8001104:	f646 2340 	movw	r3, #27200	; 0x6a40
 8001108:	461a      	mov	r2, r3
 800110a:	2100      	movs	r1, #0
 800110c:	f002 fe1c 	bl	8003d48 <memset>
  uint64_t file_Open_Availability = 0b1;          //Conjunto de bits que indica que fichas abiertas estan disponibles para la comparacion
 8001110:	f04f 0201 	mov.w	r2, #1
 8001114:	f04f 0300 	mov.w	r3, #0
 8001118:	f507 41d5 	add.w	r1, r7, #27264	; 0x6a80
 800111c:	f101 0108 	add.w	r1, r1, #8
 8001120:	e9c1 2300 	strd	r2, r3, [r1]
  uint8_t bit_file_cell = 0;                      //bit de una ficha que indica su disponibilidad
 8001124:	2300      	movs	r3, #0
 8001126:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800112a:	f102 0270 	add.w	r2, r2, #112	; 0x70
 800112e:	7013      	strb	r3, [r2, #0]
  uint8_t index_ptr = 0;                          //Indice de la ficha de la secuencia actual de A Star
 8001130:	2300      	movs	r3, #0
 8001132:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001136:	f102 0207 	add.w	r2, r2, #7
 800113a:	7013      	strb	r3, [r2, #0]
  float min_h;                                    //Valor minimo de la heuristica H
  uint8_t index_file_Open;                        //Indice de la ficha de la ficha abierta a crear

  //----------------Se crea la ficha inicial----------------
  //Se crea la ficha inicial
  file_Open[0].num_parent = 0;
 800113c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001140:	f6a3 236c 	subw	r3, r3, #2668	; 0xa6c
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
  file_Open[0].cost_g = 0.0f;
 800114a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800114e:	f6a3 236c 	subw	r3, r3, #2668	; 0xa6c
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  //Por medio de un puntero se asigna la ficha inicial
  ptrFile = &file_Open[0];
 800115a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800115e:	3b6c      	subs	r3, #108	; 0x6c
 8001160:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001164:	f102 0214 	add.w	r2, r2, #20
 8001168:	6013      	str	r3, [r2, #0]
  
  // ------------- Se identifica la celda inicial -----------
  for (int i = 0; i < row; i++) 
 800116a:	2300      	movs	r3, #0
 800116c:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001170:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e09d      	b.n	80012b4 <aplicattion_A_Star+0x21c>
  {
    for (int j = 0; j < colum; j++) 
 8001178:	2300      	movs	r3, #0
 800117a:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800117e:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	e07e      	b.n	8001284 <aplicattion_A_Star+0x1ec>
    {
      if (grid[i][j].coor_x == start_x && grid[i][j].coor_y == start_y) 
 8001186:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800118a:	f103 0378 	add.w	r3, r3, #120	; 0x78
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001194:	fb02 f303 	mul.w	r3, r2, r3
 8001198:	f607 2298 	addw	r2, r7, #2712	; 0xa98
 800119c:	f6a2 2274 	subw	r2, r2, #2676	; 0xa74
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	441a      	add	r2, r3
 80011a4:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80011a8:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2158      	movs	r1, #88	; 0x58
 80011b0:	fb01 f303 	mul.w	r3, r1, r3
 80011b4:	4413      	add	r3, r2
 80011b6:	3304      	adds	r3, #4
 80011b8:	edd3 7a00 	vldr	s15, [r3]
 80011bc:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80011c0:	f6a3 237c 	subw	r3, r3, #2684	; 0xa7c
 80011c4:	ed93 7a00 	vldr	s14, [r3]
 80011c8:	eeb4 7a67 	vcmp.f32	s14, s15
 80011cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d0:	d14d      	bne.n	800126e <aplicattion_A_Star+0x1d6>
 80011d2:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80011d6:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80011e0:	fb02 f303 	mul.w	r3, r2, r3
 80011e4:	f607 2298 	addw	r2, r7, #2712	; 0xa98
 80011e8:	f6a2 2274 	subw	r2, r2, #2676	; 0xa74
 80011ec:	6812      	ldr	r2, [r2, #0]
 80011ee:	441a      	add	r2, r3
 80011f0:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80011f4:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2158      	movs	r1, #88	; 0x58
 80011fc:	fb01 f303 	mul.w	r3, r1, r3
 8001200:	4413      	add	r3, r2
 8001202:	3308      	adds	r3, #8
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800120c:	f5a3 6328 	sub.w	r3, r3, #2688	; 0xa80
 8001210:	ed93 7a00 	vldr	s14, [r3]
 8001214:	eeb4 7a67 	vcmp.f32	s14, s15
 8001218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121c:	d127      	bne.n	800126e <aplicattion_A_Star+0x1d6>
      {
        ptrFile->ptrCell_file = &grid[i][j];  
 800121e:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001222:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800122c:	fb02 f303 	mul.w	r3, r2, r3
 8001230:	f607 2298 	addw	r2, r7, #2712	; 0xa98
 8001234:	f6a2 2274 	subw	r2, r2, #2676	; 0xa74
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	441a      	add	r2, r3
 800123c:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001240:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2158      	movs	r1, #88	; 0x58
 8001248:	fb01 f303 	mul.w	r3, r1, r3
 800124c:	441a      	add	r2, r3
 800124e:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001252:	f103 0314 	add.w	r3, r3, #20
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	601a      	str	r2, [r3, #0]
        ptrFile->ptrCell_file->status  = OPEN;
 800125a:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800125e:	f103 0314 	add.w	r3, r3, #20
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        break;
 800126c:	e017      	b.n	800129e <aplicattion_A_Star+0x206>
    for (int j = 0; j < colum; j++) 
 800126e:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001272:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3301      	adds	r3, #1
 800127a:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800127e:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001288:	f6a3 2376 	subw	r3, r3, #2678	; 0xa76
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001292:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8001296:	6812      	ldr	r2, [r2, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	f6ff af74 	blt.w	8001186 <aplicattion_A_Star+0xee>
  for (int i = 0; i < row; i++) 
 800129e:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80012a2:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80012ae:	f102 0278 	add.w	r2, r2, #120	; 0x78
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80012b8:	f6a3 2375 	subw	r3, r3, #2677	; 0xa75
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80012c2:	f102 0278 	add.w	r2, r2, #120	; 0x78
 80012c6:	6812      	ldr	r2, [r2, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	f6ff af55 	blt.w	8001178 <aplicattion_A_Star+0xe0>
    }
  }

  while (1) {
    // Inicializamos variables
    min_f = DBL_MAX;
 80012ce:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80012d2:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 80012d6:	6013      	str	r3, [r2, #0]
    min_h = DBL_MAX;
 80012d8:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80012dc:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80012e0:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80012e4:	6013      	str	r3, [r2, #0]

    //---------------------Creacion de las diferentes fichas de las celdas vecinas-----------------
    for(uint8_t k = 0; k < 8; k++) 
 80012e6:	2300      	movs	r3, #0
 80012e8:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80012ec:	f102 0273 	add.w	r2, r2, #115	; 0x73
 80012f0:	7013      	strb	r3, [r2, #0]
 80012f2:	e1a4      	b.n	800163e <aplicattion_A_Star+0x5a6>
    {
      if(ptrFile->ptrCell_file->neighbors.ptrCellMap[k] != NULL) 
 80012f4:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80012f8:	f103 0314 	add.w	r3, r3, #20
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001304:	f103 0373 	add.w	r3, r3, #115	; 0x73
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	3302      	adds	r3, #2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8188 	beq.w	8001628 <aplicattion_A_Star+0x590>
      {
        if(ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->h != -1.0f && ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->status < OPEN)
 8001318:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800131c:	f103 0314 	add.w	r3, r3, #20
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001328:	f103 0373 	add.w	r3, r3, #115	; 0x73
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	3302      	adds	r3, #2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800133a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800133e:	eef4 7a47 	vcmp.f32	s15, s14
 8001342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001346:	f000 816f 	beq.w	8001628 <aplicattion_A_Star+0x590>
 800134a:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800134e:	f103 0314 	add.w	r3, r3, #20
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800135a:	f103 0373 	add.w	r3, r3, #115	; 0x73
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	3302      	adds	r3, #2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800136c:	2b00      	cmp	r3, #0
 800136e:	f040 815b 	bne.w	8001628 <aplicattion_A_Star+0x590>
        {
          //Se busca la posicion que ocupada la nueva ficha en la lista de fichas abiertas
          index_file_Open = search_position_file_Open(file_Open, file_Open_Availability);
 8001372:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001376:	396c      	subs	r1, #108	; 0x6c
 8001378:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800137c:	f103 0308 	add.w	r3, r3, #8
 8001380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001384:	4608      	mov	r0, r1
 8001386:	f000 fae2 	bl	800194e <search_position_file_Open>
 800138a:	4603      	mov	r3, r0
 800138c:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001390:	f102 026f 	add.w	r2, r2, #111	; 0x6f
 8001394:	7013      	strb	r3, [r2, #0]
          //Se abre la celda
          ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->status = OPEN;
 8001396:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800139a:	f103 0314 	add.w	r3, r3, #20
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80013a6:	f103 0373 	add.w	r3, r3, #115	; 0x73
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	3302      	adds	r3, #2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          //Se crea la ficha
          file_Open[index_file_Open].ptrCell_file = ptrFile->ptrCell_file->neighbors.ptrCellMap[k];
 80013ba:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80013be:	f103 0314 	add.w	r3, r3, #20
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80013ca:	f103 0373 	add.w	r3, r3, #115	; 0x73
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	f507 41d4 	add.w	r1, r7, #27136	; 0x6a00
 80013d4:	f101 016f 	add.w	r1, r1, #111	; 0x6f
 80013d8:	7809      	ldrb	r1, [r1, #0]
 80013da:	3302      	adds	r3, #2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80013e6:	f6a3 206c 	subw	r0, r3, #2668	; 0xa6c
 80013ea:	460b      	mov	r3, r1
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	440b      	add	r3, r1
 80013f0:	011b      	lsls	r3, r3, #4
 80013f2:	4403      	add	r3, r0
 80013f4:	601a      	str	r2, [r3, #0]
          for(uint8_t u = 0; u < ptrFile->num_parent; u++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80013fc:	f102 0272 	add.w	r2, r2, #114	; 0x72
 8001400:	7013      	strb	r3, [r2, #0]
 8001402:	e02d      	b.n	8001460 <aplicattion_A_Star+0x3c8>
          {
            file_Open[index_file_Open].ptrCell_parent[u] = ptrFile->ptrCell_parent[u];
 8001404:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001408:	f103 0372 	add.w	r3, r3, #114	; 0x72
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001412:	f102 026f 	add.w	r2, r2, #111	; 0x6f
 8001416:	7811      	ldrb	r1, [r2, #0]
 8001418:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800141c:	f102 0272 	add.w	r2, r2, #114	; 0x72
 8001420:	7814      	ldrb	r4, [r2, #0]
 8001422:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001426:	f102 0214 	add.w	r2, r2, #20
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	6858      	ldr	r0, [r3, #4]
 8001432:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001436:	f6a3 226c 	subw	r2, r3, #2668	; 0xa6c
 800143a:	460b      	mov	r3, r1
 800143c:	011b      	lsls	r3, r3, #4
 800143e:	440b      	add	r3, r1
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4423      	add	r3, r4
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	6058      	str	r0, [r3, #4]
          for(uint8_t u = 0; u < ptrFile->num_parent; u++)
 800144a:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800144e:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800145a:	f102 0272 	add.w	r2, r2, #114	; 0x72
 800145e:	7013      	strb	r3, [r2, #0]
 8001460:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001464:	f103 0314 	add.w	r3, r3, #20
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800146e:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001472:	f102 0272 	add.w	r2, r2, #114	; 0x72
 8001476:	7812      	ldrb	r2, [r2, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d3c3      	bcc.n	8001404 <aplicattion_A_Star+0x36c>
          }
          file_Open[index_file_Open].ptrCell_parent[ptrFile->num_parent] = ptrFile->ptrCell_file;
 800147c:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001480:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 8001484:	781a      	ldrb	r2, [r3, #0]
 8001486:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800148a:	f103 0314 	add.w	r3, r3, #20
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8001494:	461c      	mov	r4, r3
 8001496:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800149a:	f103 0314 	add.w	r3, r3, #20
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80014a6:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80014aa:	4613      	mov	r3, r2
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	4413      	add	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4423      	add	r3, r4
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	6058      	str	r0, [r3, #4]
          file_Open[index_file_Open].ptrCell_parent[(ptrFile->num_parent+1)] = NULL;
 80014ba:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80014be:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 80014c2:	781a      	ldrb	r2, [r3, #0]
 80014c4:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80014c8:	f103 0314 	add.w	r3, r3, #20
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80014d2:	1c58      	adds	r0, r3, #1
 80014d4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80014d8:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80014dc:	4613      	mov	r3, r2
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	4413      	add	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4403      	add	r3, r0
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	2200      	movs	r2, #0
 80014ec:	605a      	str	r2, [r3, #4]
          file_Open[index_file_Open].num_parent = ptrFile->num_parent+1;
 80014ee:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80014f2:	f103 0314 	add.w	r3, r3, #20
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80014fc:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001500:	f102 026f 	add.w	r2, r2, #111	; 0x6f
 8001504:	7812      	ldrb	r2, [r2, #0]
 8001506:	3301      	adds	r3, #1
 8001508:	b2d8      	uxtb	r0, r3
 800150a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800150e:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001512:	4613      	mov	r3, r2
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	4413      	add	r3, r2
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	440b      	add	r3, r1
 800151c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001520:	4602      	mov	r2, r0
 8001522:	701a      	strb	r2, [r3, #0]
          file_Open[index_file_Open].cost_g = ptrFile->ptrCell_file->neighbors.distance_neigh[k]+ptrFile->cost_g;
 8001524:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001528:	f103 0314 	add.w	r3, r3, #20
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001534:	f103 0373 	add.w	r3, r3, #115	; 0x73
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	330a      	adds	r3, #10
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	3304      	adds	r3, #4
 8001542:	ed93 7a00 	vldr	s14, [r3]
 8001546:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800154a:	f103 0314 	add.w	r3, r3, #20
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8001554:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001558:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001562:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001566:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 800156a:	4613      	mov	r3, r2
 800156c:	011b      	lsls	r3, r3, #4
 800156e:	4413      	add	r3, r2
 8001570:	011b      	lsls	r3, r3, #4
 8001572:	440b      	add	r3, r1
 8001574:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001578:	edc3 7a00 	vstr	s15, [r3]
          file_Open[index_file_Open].function_F = file_Open[index_file_Open].cost_g + ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->h;
 800157c:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001580:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 8001584:	781a      	ldrb	r2, [r3, #0]
 8001586:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800158a:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 800158e:	4613      	mov	r3, r2
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	4413      	add	r3, r2
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	440b      	add	r3, r1
 8001598:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800159c:	ed93 7a00 	vldr	s14, [r3]
 80015a0:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80015a4:	f103 0314 	add.w	r3, r3, #20
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80015b0:	f103 0373 	add.w	r3, r3, #115	; 0x73
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	3302      	adds	r3, #2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80015c2:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80015c6:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 80015ca:	781a      	ldrb	r2, [r3, #0]
 80015cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80015d4:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80015d8:	4613      	mov	r3, r2
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	4413      	add	r3, r2
 80015de:	011b      	lsls	r3, r3, #4
 80015e0:	440b      	add	r3, r1
 80015e2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80015e6:	edc3 7a00 	vstr	s15, [r3]
          //Indicacion de la disponibilidad de la ficha
          file_Open_Availability |= (0b1 << index_file_Open);
 80015ea:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80015ee:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2201      	movs	r2, #1
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	17da      	asrs	r2, r3, #31
 80015fc:	469a      	mov	sl, r3
 80015fe:	4693      	mov	fp, r2
 8001600:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001604:	f103 0308 	add.w	r3, r3, #8
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	ea42 010a 	orr.w	r1, r2, sl
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	ea43 030b 	orr.w	r3, r3, fp
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 800161c:	f102 0208 	add.w	r2, r2, #8
 8001620:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001624:	e9c2 3400 	strd	r3, r4, [r2]
    for(uint8_t k = 0; k < 8; k++) 
 8001628:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800162c:	f103 0373 	add.w	r3, r3, #115	; 0x73
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	3301      	adds	r3, #1
 8001634:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001638:	f102 0273 	add.w	r2, r2, #115	; 0x73
 800163c:	7013      	strb	r3, [r2, #0]
 800163e:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001642:	f103 0373 	add.w	r3, r3, #115	; 0x73
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b07      	cmp	r3, #7
 800164a:	f67f ae53 	bls.w	80012f4 <aplicattion_A_Star+0x25c>
      }
    }
    
    //-----------------Cerramos la ficha actual del puntero----------------------
    //indicamos el nuevo estado de la celda
    ptrFile->ptrCell_file->status = CLOSED;
 800164e:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001652:	f103 0314 	add.w	r3, r3, #20
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2202      	movs	r2, #2
 800165c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    //Indicacion de la no disponibilidad de la ficha
    file_Open_Availability &=  ~(0b1 << index_ptr);
 8001660:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001664:	f103 0307 	add.w	r3, r3, #7
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2201      	movs	r2, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	17da      	asrs	r2, r3, #31
 8001674:	461d      	mov	r5, r3
 8001676:	4616      	mov	r6, r2
 8001678:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800167c:	f103 0308 	add.w	r3, r3, #8
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	ea02 0105 	and.w	r1, r2, r5
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	4033      	ands	r3, r6
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001692:	f102 0208 	add.w	r2, r2, #8
 8001696:	e9d7 3400 	ldrd	r3, r4, [r7]
 800169a:	e9c2 3400 	strd	r3, r4, [r2]
     
    //---------------- Comparación función F ---------------------
    for (uint8_t k = 0; k < 64; k++) {
 800169e:	2300      	movs	r3, #0
 80016a0:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80016a4:	f102 0271 	add.w	r2, r2, #113	; 0x71
 80016a8:	7013      	strb	r3, [r2, #0]
 80016aa:	e101      	b.n	80018b0 <aplicattion_A_Star+0x818>
      //Recorrido
      bit_file_cell = (file_Open_Availability >> k) & 0b1;
 80016ac:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80016b0:	f103 0371 	add.w	r3, r3, #113	; 0x71
 80016b4:	7818      	ldrb	r0, [r3, #0]
 80016b6:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80016ba:	f103 0308 	add.w	r3, r3, #8
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	f1c0 0420 	rsb	r4, r0, #32
 80016c6:	f1a0 0120 	sub.w	r1, r0, #32
 80016ca:	fa22 f800 	lsr.w	r8, r2, r0
 80016ce:	fa03 f404 	lsl.w	r4, r3, r4
 80016d2:	ea48 0804 	orr.w	r8, r8, r4
 80016d6:	fa23 f101 	lsr.w	r1, r3, r1
 80016da:	ea48 0801 	orr.w	r8, r8, r1
 80016de:	fa23 f900 	lsr.w	r9, r3, r0
 80016e2:	fa5f f388 	uxtb.w	r3, r8
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80016ee:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80016f2:	7013      	strb	r3, [r2, #0]
      //Se el bit es un valor logico de 1 entonces la ficha esta disponible para su comparacion con las demas
      if(bit_file_cell==1 && file_Open[k].ptrCell_file != NULL)
 80016f4:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80016f8:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	f040 80cb 	bne.w	800189a <aplicattion_A_Star+0x802>
 8001704:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001708:	f103 0371 	add.w	r3, r3, #113	; 0x71
 800170c:	781a      	ldrb	r2, [r3, #0]
 800170e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001712:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001716:	4613      	mov	r3, r2
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	4413      	add	r3, r2
 800171c:	011b      	lsls	r3, r3, #4
 800171e:	440b      	add	r3, r1
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 80b9 	beq.w	800189a <aplicattion_A_Star+0x802>
      {
        // Verificar que la función F sea menor al valor anterior
        if (file_Open[k].function_F < min_f) {
 8001728:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800172c:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001730:	781a      	ldrb	r2, [r3, #0]
 8001732:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001736:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 800173a:	4613      	mov	r3, r2
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	4413      	add	r3, r2
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	440b      	add	r3, r1
 8001744:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001750:	ed93 7a00 	vldr	s14, [r3]
 8001754:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175c:	dd33      	ble.n	80017c6 <aplicattion_A_Star+0x72e>
          // Reemplazamos valores
          min_f = file_Open[k].function_F;
 800175e:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001762:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001766:	781a      	ldrb	r2, [r3, #0]
 8001768:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800176c:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001770:	4613      	mov	r3, r2
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	4413      	add	r3, r2
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	440b      	add	r3, r1
 800177a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001784:	6013      	str	r3, [r2, #0]
          min_h = file_Open[k].ptrCell_file->h;
 8001786:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800178a:	f103 0371 	add.w	r3, r3, #113	; 0x71
 800178e:	781a      	ldrb	r2, [r3, #0]
 8001790:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001794:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001798:	4613      	mov	r3, r2
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	4413      	add	r3, r2
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	440b      	add	r3, r1
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017a6:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80017aa:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80017ae:	6013      	str	r3, [r2, #0]
          index_ptr = k;
 80017b0:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80017b4:	f103 0371 	add.w	r3, r3, #113	; 0x71
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 80017be:	f102 0207 	add.w	r2, r2, #7
 80017c2:	7013      	strb	r3, [r2, #0]
 80017c4:	e069      	b.n	800189a <aplicattion_A_Star+0x802>
        }
        // Verificar que la función F sea igual al valor anterior, si es así se desempata con el valor h
        else if (file_Open[k].function_F == min_f) {
 80017c6:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80017ca:	f103 0371 	add.w	r3, r3, #113	; 0x71
 80017ce:	781a      	ldrb	r2, [r3, #0]
 80017d0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80017d4:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80017d8:	4613      	mov	r3, r2
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	4413      	add	r3, r2
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	440b      	add	r3, r1
 80017e2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80017ee:	ed93 7a00 	vldr	s14, [r3]
 80017f2:	eeb4 7a67 	vcmp.f32	s14, s15
 80017f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fa:	d14e      	bne.n	800189a <aplicattion_A_Star+0x802>
          if (file_Open[k].ptrCell_file->h < min_h) {
 80017fc:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001800:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001804:	781a      	ldrb	r2, [r3, #0]
 8001806:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800180a:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 800180e:	4613      	mov	r3, r2
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	4413      	add	r3, r2
 8001814:	011b      	lsls	r3, r3, #4
 8001816:	440b      	add	r3, r1
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800181e:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001822:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8001826:	ed93 7a00 	vldr	s14, [r3]
 800182a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800182e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001832:	dd32      	ble.n	800189a <aplicattion_A_Star+0x802>
              // Reemplazamos valores
              min_f = file_Open[k].function_F;
 8001834:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001838:	f103 0371 	add.w	r3, r3, #113	; 0x71
 800183c:	781a      	ldrb	r2, [r3, #0]
 800183e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001842:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001846:	4613      	mov	r3, r2
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	4413      	add	r3, r2
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	440b      	add	r3, r1
 8001850:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 800185a:	6013      	str	r3, [r2, #0]
              min_h = file_Open[k].ptrCell_file->h;
 800185c:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001860:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001864:	781a      	ldrb	r2, [r3, #0]
 8001866:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800186a:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 800186e:	4613      	mov	r3, r2
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	4413      	add	r3, r2
 8001874:	011b      	lsls	r3, r3, #4
 8001876:	440b      	add	r3, r1
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800187c:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001880:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8001884:	6013      	str	r3, [r2, #0]
              index_ptr = k;         
 8001886:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800188a:	f103 0371 	add.w	r3, r3, #113	; 0x71
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001894:	f102 0207 	add.w	r2, r2, #7
 8001898:	7013      	strb	r3, [r2, #0]
    for (uint8_t k = 0; k < 64; k++) {
 800189a:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800189e:	f103 0371 	add.w	r3, r3, #113	; 0x71
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80018aa:	f102 0271 	add.w	r2, r2, #113	; 0x71
 80018ae:	7013      	strb	r3, [r2, #0]
 80018b0:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80018b4:	f103 0371 	add.w	r3, r3, #113	; 0x71
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b3f      	cmp	r3, #63	; 0x3f
 80018bc:	f67f aef6 	bls.w	80016ac <aplicattion_A_Star+0x614>
        }
      }
    }
    
    //--------------- Seleccionamos nueva ficha para el puntero--------------------
    ptrFile = &file_Open[index_ptr];
 80018c0:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80018c4:	f103 0307 	add.w	r3, r3, #7
 80018c8:	7819      	ldrb	r1, [r3, #0]
 80018ca:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80018ce:	3a6c      	subs	r2, #108	; 0x6c
 80018d0:	460b      	mov	r3, r1
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	440b      	add	r3, r1
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	4413      	add	r3, r2
 80018da:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 80018de:	f102 0214 	add.w	r2, r2, #20
 80018e2:	6013      	str	r3, [r2, #0]
    
    //-----------------Verificacion si se llego al gol----------------------
    if (ptrFile->ptrCell_file->coor_x == goal_x && ptrFile->ptrCell_file->coor_y == goal_y) {
 80018e4:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80018e8:	f103 0314 	add.w	r3, r3, #20
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80018f4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80018f8:	f6a3 2384 	subw	r3, r3, #2692	; 0xa84
 80018fc:	ed93 7a00 	vldr	s14, [r3]
 8001900:	eeb4 7a67 	vcmp.f32	s14, s15
 8001904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001908:	f47f ace1 	bne.w	80012ce <aplicattion_A_Star+0x236>
 800190c:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001910:	f103 0314 	add.w	r3, r3, #20
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	edd3 7a02 	vldr	s15, [r3, #8]
 800191c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001920:	f6a3 2388 	subw	r3, r3, #2696	; 0xa88
 8001924:	ed93 7a00 	vldr	s14, [r3]
 8001928:	eeb4 7a67 	vcmp.f32	s14, s15
 800192c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001930:	d000      	beq.n	8001934 <aplicattion_A_Star+0x89c>
    min_f = DBL_MAX;
 8001932:	e4cc      	b.n	80012ce <aplicattion_A_Star+0x236>
        break;
 8001934:	bf00      	nop
    }
  }
  return ptrFile;
 8001936:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800193a:	f103 0314 	add.w	r3, r3, #20
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	f507 47d5 	add.w	r7, r7, #27264	; 0x6a80
 8001946:	371c      	adds	r7, #28
 8001948:	46bd      	mov	sp, r7
 800194a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800194e <search_position_file_Open>:


uint8_t search_position_file_Open(file_cell_t list_file[64], uint64_t avan_file)
{
 800194e:	b4f0      	push	{r4, r5, r6, r7}
 8001950:	b08a      	sub	sp, #40	; 0x28
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	e9c7 2300 	strd	r2, r3, [r7]
  //Variables
  uint8_t bit_list = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 110;
 800195e:	236e      	movs	r3, #110	; 0x6e
 8001960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  float value_f = 0;
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
  //bucle para recorrer la lista de bits
  for(int i = 0; i<110; i++)
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	e01e      	b.n	80019ae <search_position_file_Open+0x60>
  {
    //Recorrido
    bit_list = (avan_file >> i) & 0b1;
 8001970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001974:	69f9      	ldr	r1, [r7, #28]
 8001976:	f1c1 0620 	rsb	r6, r1, #32
 800197a:	f1a1 0020 	sub.w	r0, r1, #32
 800197e:	fa22 f401 	lsr.w	r4, r2, r1
 8001982:	fa03 f606 	lsl.w	r6, r3, r6
 8001986:	4334      	orrs	r4, r6
 8001988:	fa23 f000 	lsr.w	r0, r3, r0
 800198c:	4304      	orrs	r4, r0
 800198e:	fa23 f501 	lsr.w	r5, r3, r1
 8001992:	b2e3      	uxtb	r3, r4
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	75fb      	strb	r3, [r7, #23]
    //Se comprueba el bit de correspondiente a la disponibilidad de la ficha
    if(bit_list  == 0)
 800199a:	7dfb      	ldrb	r3, [r7, #23]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d103      	bne.n	80019a8 <search_position_file_Open+0x5a>
    {
      index = i;
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80019a6:	e005      	b.n	80019b4 <search_position_file_Open+0x66>
  for(int i = 0; i<110; i++)
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	3301      	adds	r3, #1
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	2b6d      	cmp	r3, #109	; 0x6d
 80019b2:	dddd      	ble.n	8001970 <search_position_file_Open+0x22>
    }
  }
  /*En caso que no se indico un valor diferente a 100 para el indice, se busca una ubicacion dentro 
  de la lista de fichas abiertas, seleccionando aquella ubicacion donde el valor de la funcion f
  sea la mayor*/
  if (index == 110)
 80019b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019b8:	2b6e      	cmp	r3, #110	; 0x6e
 80019ba:	d132      	bne.n	8001a22 <search_position_file_Open+0xd4>
  {  
    //Recorrido del arreglo de fichas abiertas
    for(int k = 0; k<64; k++)
 80019bc:	2300      	movs	r3, #0
 80019be:	61bb      	str	r3, [r7, #24]
 80019c0:	e02c      	b.n	8001a1c <search_position_file_Open+0xce>
    {  
      //Se busca el mayor valor de la funcion f
      if(list_file[k].ptrCell_file != NULL && list_file[k].function_F > value_f)
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4613      	mov	r3, r2
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	4413      	add	r3, r2
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	461a      	mov	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4413      	add	r3, r2
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d01e      	beq.n	8001a16 <search_position_file_Open+0xc8>
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4613      	mov	r3, r2
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	4413      	add	r3, r2
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	461a      	mov	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4413      	add	r3, r2
 80019e8:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 80019ec:	ed97 7a08 	vldr	s14, [r7, #32]
 80019f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f8:	d50d      	bpl.n	8001a16 <search_position_file_Open+0xc8>
      {
        value_f = list_file[k].function_F;
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4613      	mov	r3, r2
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	4413      	add	r3, r2
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	461a      	mov	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4413      	add	r3, r2
 8001a0a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001a0e:	623b      	str	r3, [r7, #32]
        index = k;
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(int k = 0; k<64; k++)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	61bb      	str	r3, [r7, #24]
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	2b3f      	cmp	r3, #63	; 0x3f
 8001a20:	ddcf      	ble.n	80019c2 <search_position_file_Open+0x74>
      }
    }
  }
  
  return index;
 8001a22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3728      	adds	r7, #40	; 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bcf0      	pop	{r4, r5, r6, r7}
 8001a2e:	4770      	bx	lr

08001a30 <heuristic_cell_map>:



//-----------------------------------------------Funciones calculo heuristica----------------------------------------------------------------
void heuristic_cell_map(Cell_map_t grid[20][20], uint8_t row, uint8_t colum, float goal_x, float goal_y){
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a3e:	edc7 0a00 	vstr	s1, [r7]
 8001a42:	72fb      	strb	r3, [r7, #11]
 8001a44:	4613      	mov	r3, r2
 8001a46:	72bb      	strb	r3, [r7, #10]
  //Recorrido por cada una de las celdas
  for (int i = 0; i < row; i++)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	e071      	b.n	8001b32 <heuristic_cell_map+0x102>
  {
    for (int j = 0; j < colum; j++) 
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	e067      	b.n	8001b24 <heuristic_cell_map+0xf4>
    {
      //Calculo heuristica
      if(grid[i][j].feature =='G')
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001a5a:	fb02 f303 	mul.w	r3, r2, r3
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	441a      	add	r2, r3
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	2158      	movs	r1, #88	; 0x58
 8001a66:	fb01 f303 	mul.w	r3, r1, r3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	334c      	adds	r3, #76	; 0x4c
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b47      	cmp	r3, #71	; 0x47
 8001a72:	d110      	bne.n	8001a96 <heuristic_cell_map+0x66>
      {
        grid[i][j].h = 0.0f;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001a7a:	fb02 f303 	mul.w	r3, r2, r3
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	441a      	add	r2, r3
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2158      	movs	r1, #88	; 0x58
 8001a86:	fb01 f303 	mul.w	r3, r1, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3350      	adds	r3, #80	; 0x50
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	e043      	b.n	8001b1e <heuristic_cell_map+0xee>
      }
      else if(grid[i][j].feature=='#')
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001a9c:	fb02 f303 	mul.w	r3, r2, r3
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	441a      	add	r2, r3
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	2158      	movs	r1, #88	; 0x58
 8001aa8:	fb01 f303 	mul.w	r3, r1, r3
 8001aac:	4413      	add	r3, r2
 8001aae:	334c      	adds	r3, #76	; 0x4c
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b23      	cmp	r3, #35	; 0x23
 8001ab4:	d10f      	bne.n	8001ad6 <heuristic_cell_map+0xa6>
      {
        grid[i][j].h = -1.0f;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001abc:	fb02 f303 	mul.w	r3, r2, r3
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	441a      	add	r2, r3
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	2158      	movs	r1, #88	; 0x58
 8001ac8:	fb01 f303 	mul.w	r3, r1, r3
 8001acc:	4413      	add	r3, r2
 8001ace:	3350      	adds	r3, #80	; 0x50
 8001ad0:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <heuristic_cell_map+0x114>)
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	e023      	b.n	8001b1e <heuristic_cell_map+0xee>
      }
      else
      {
        grid[i][j].h = heuristic_single_cell(&grid[i][j], goal_x, goal_y); 
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001adc:	fb02 f303 	mul.w	r3, r2, r3
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	441a      	add	r2, r3
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	2158      	movs	r1, #88	; 0x58
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	18d1      	adds	r1, r2, r3
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001af4:	fb02 f303 	mul.w	r3, r2, r3
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	18d4      	adds	r4, r2, r3
 8001afc:	edd7 0a00 	vldr	s1, [r7]
 8001b00:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b04:	4608      	mov	r0, r1
 8001b06:	f000 f81f 	bl	8001b48 <heuristic_single_cell>
 8001b0a:	eef0 7a40 	vmov.f32	s15, s0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	2258      	movs	r2, #88	; 0x58
 8001b12:	fb02 f303 	mul.w	r3, r2, r3
 8001b16:	4423      	add	r3, r4
 8001b18:	3350      	adds	r3, #80	; 0x50
 8001b1a:	edc3 7a00 	vstr	s15, [r3]
    for (int j = 0; j < colum; j++) 
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	3301      	adds	r3, #1
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	7abb      	ldrb	r3, [r7, #10]
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	db93      	blt.n	8001a54 <heuristic_cell_map+0x24>
  for (int i = 0; i < row; i++)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	7afb      	ldrb	r3, [r7, #11]
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	db89      	blt.n	8001a4e <heuristic_cell_map+0x1e>
      }   
    }
  }  
}
 8001b3a:	bf00      	nop
 8001b3c:	bf00      	nop
 8001b3e:	371c      	adds	r7, #28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd90      	pop	{r4, r7, pc}
 8001b44:	bf800000 	.word	0xbf800000

08001b48 <heuristic_single_cell>:


float heuristic_single_cell(Cell_map_t *cell, float  goal_x, float goal_y)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	ed2d 8b02 	vpush	{d8}
 8001b4e:	b0a3      	sub	sp, #140	; 0x8c
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b58:	edc7 0a01 	vstr	s1, [r7, #4]
  //---------Definicion de variables--------
  //Variables del calculo heuristica
  Cell_map_t *ptrCell = cell;                 //Puntero a la celda actual
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  float total_distante = 0;                   //Distancia total entre la celda actual y la celda del gol
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  float dis[8];                               //Distancia entre la celda vecina y la recta
  uint8_t best_index;                         //Mejor indice de las celdas vecinas
  float min_distance;                         //Distancia minima entre la celda vecina y la recta
  //Variables Recta
  float A_recta;                              //Parametros de la recta
  float B_recta = -1.0f;
 8001b6a:	4be3      	ldr	r3, [pc, #908]	; (8001ef8 <heuristic_single_cell+0x3b0>)
 8001b6c:	673b      	str	r3, [r7, #112]	; 0x70
  float delta_x;                              //Diferencia la coordenada x entre la celda inicial y la final
  float mag_delta;                            //Magnitud del vector resultante de la diferencia de las coordenadas

  
   //---------------Calculos parametros de la recta-----------------
  delta_y = goal_y - cell->coor_y;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b74:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b7c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
  delta_x = goal_x - cell->coor_x;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b86:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b8e:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
  mag_delta = sqrtf(delta_x * delta_x + delta_y * delta_y);
 8001b92:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b96:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b9a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001b9e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba6:	eeb0 0a67 	vmov.f32	s0, s15
 8001baa:	f007 fa0d 	bl	8008fc8 <sqrtf>
 8001bae:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
  A_recta =  delta_y / delta_x;
 8001bb2:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8001bb6:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bbe:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
  C_recta = cell->coor_y - A_recta * cell->coor_x;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	edd3 6a01 	vldr	s13, [r3, #4]
 8001bce:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001bd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bda:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

  while (1)
  { 
    //Inicializamos variables
    best_index = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    min_distance = DBL_MAX;
 8001be4:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8001be8:	67bb      	str	r3, [r7, #120]	; 0x78

    //------------------Calculo parametros de cada una de las celdas vecinas--------------------
    for (uint8_t k = 0; k < 8; k++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001bf0:	e0fc      	b.n	8001dec <heuristic_single_cell+0x2a4>
    {
      //Verificamos que el puntero al vecino no es nulo
      if (ptrCell->neighbors.ptrCellMap[k] == NULL)
 8001bf2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001bf6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d110      	bne.n	8001c28 <heuristic_single_cell+0xe0>
      {
        ang_between_vector[k] = -1.0f;
 8001c06:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	3388      	adds	r3, #136	; 0x88
 8001c0e:	443b      	add	r3, r7
 8001c10:	3b58      	subs	r3, #88	; 0x58
 8001c12:	4ab9      	ldr	r2, [pc, #740]	; (8001ef8 <heuristic_single_cell+0x3b0>)
 8001c14:	601a      	str	r2, [r3, #0]
        dis[k] = -1.0f;          
 8001c16:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	3388      	adds	r3, #136	; 0x88
 8001c1e:	443b      	add	r3, r7
 8001c20:	3b78      	subs	r3, #120	; 0x78
 8001c22:	4ab5      	ldr	r2, [pc, #724]	; (8001ef8 <heuristic_single_cell+0x3b0>)
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	e0dc      	b.n	8001de2 <heuristic_single_cell+0x29a>
      }
      else
      {
        //Calculo vector relativo
        rel_x = ptrCell->neighbors.ptrCellMap[k]->coor_x - ptrCell->coor_x;
 8001c28:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001c2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001c30:	3302      	adds	r3, #2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c40:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c48:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        rel_y = ptrCell->neighbors.ptrCellMap[k]->coor_y - ptrCell->coor_y;
 8001c4c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001c50:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001c54:	3302      	adds	r3, #2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c64:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c6c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        //Calculo parametros
        res = round(((rel_x*delta_x + rel_y*delta_y) / (ptrCell->neighbors.distance_neigh[k] * mag_delta)) * 10000) / 10000;
 8001c70:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001c74:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001c78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c7c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001c80:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c88:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001c8c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001c90:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001c94:	330a      	adds	r3, #10
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	ed93 7a00 	vldr	s14, [r3]
 8001ca0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001ca4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cac:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001efc <heuristic_single_cell+0x3b4>
 8001cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cb4:	ee17 0a90 	vmov	r0, s15
 8001cb8:	f7fe fc5e 	bl	8000578 <__aeabi_f2d>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	ec43 2b10 	vmov	d0, r2, r3
 8001cc4:	f007 f906 	bl	8008ed4 <round>
 8001cc8:	ec51 0b10 	vmov	r0, r1, d0
 8001ccc:	a388      	add	r3, pc, #544	; (adr r3, 8001ef0 <heuristic_single_cell+0x3a8>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	f7fe fdd3 	bl	800087c <__aeabi_ddiv>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f7fe ff9b 	bl	8000c18 <__aeabi_d2f>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	653b      	str	r3, [r7, #80]	; 0x50
        ang_between_vector[k] = acos(res);
 8001ce6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001ce8:	f7fe fc46 	bl	8000578 <__aeabi_f2d>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	ec43 2b10 	vmov	d0, r2, r3
 8001cf4:	f007 f934 	bl	8008f60 <acos>
 8001cf8:	ec53 2b10 	vmov	r2, r3, d0
 8001cfc:	f897 4077 	ldrb.w	r4, [r7, #119]	; 0x77
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	f7fe ff88 	bl	8000c18 <__aeabi_d2f>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	00a3      	lsls	r3, r4, #2
 8001d0c:	3388      	adds	r3, #136	; 0x88
 8001d0e:	443b      	add	r3, r7
 8001d10:	3b58      	subs	r3, #88	; 0x58
 8001d12:	601a      	str	r2, [r3, #0]
        if(A_recta != INFINITY && A_recta != -INFINITY)
 8001d14:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d18:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001f00 <heuristic_single_cell+0x3b8>
 8001d1c:	eef4 7a47 	vcmp.f32	s15, s14
 8001d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d24:	dc45      	bgt.n	8001db2 <heuristic_single_cell+0x26a>
 8001d26:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d2a:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001f04 <heuristic_single_cell+0x3bc>
 8001d2e:	eef4 7a47 	vcmp.f32	s15, s14
 8001d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d36:	d43c      	bmi.n	8001db2 <heuristic_single_cell+0x26a>
        {
          dis[k] = fabsf(A_recta * ptrCell->neighbors.ptrCellMap[k]->coor_x + B_recta * ptrCell->neighbors.ptrCellMap[k]->coor_y + C_recta) / sqrtf(A_recta * A_recta + 1);  
 8001d38:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001d3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001d40:	3302      	adds	r3, #2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d4c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d54:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001d58:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d68:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001d6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d74:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d7c:	eeb0 8ae7 	vabs.f32	s16, s15
 8001d80:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d90:	eeb0 0a67 	vmov.f32	s0, s15
 8001d94:	f007 f918 	bl	8008fc8 <sqrtf>
 8001d98:	eeb0 7a40 	vmov.f32	s14, s0
 8001d9c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001da0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	3388      	adds	r3, #136	; 0x88
 8001da8:	443b      	add	r3, r7
 8001daa:	3b78      	subs	r3, #120	; 0x78
 8001dac:	edc3 7a00 	vstr	s15, [r3]
 8001db0:	e017      	b.n	8001de2 <heuristic_single_cell+0x29a>
        }
        else
        {
          dis[k] = fabsf(ptrCell->neighbors.ptrCellMap[k]->coor_x-goal_x);
 8001db2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001db6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001dba:	3302      	adds	r3, #2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001dc6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001dd2:	eef0 7ae7 	vabs.f32	s15, s15
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	3388      	adds	r3, #136	; 0x88
 8001dda:	443b      	add	r3, r7
 8001ddc:	3b78      	subs	r3, #120	; 0x78
 8001dde:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t k = 0; k < 8; k++)
 8001de2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001de6:	3301      	adds	r3, #1
 8001de8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001dec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001df0:	2b07      	cmp	r3, #7
 8001df2:	f67f aefe 	bls.w	8001bf2 <heuristic_single_cell+0xaa>
      }            
    }

    //----------------Buscamos la celda vecina mas cercana a la recta y que este en la misma direccion que la recta---------------------
    //Recorremos los parametros para encontrar la mejor celda
    for (uint8_t k = 0; k < 8; k++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001dfc:	e03f      	b.n	8001e7e <heuristic_single_cell+0x336>
    {
      //Verificamos que no sea -1
      if (ptrCell->neighbors.distance_neigh[k] != -1.0f)
 8001dfe:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001e02:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001e06:	330a      	adds	r3, #10
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	edd3 7a00 	vldr	s15, [r3]
 8001e12:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001e16:	eef4 7a47 	vcmp.f32	s15, s14
 8001e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1e:	d029      	beq.n	8001e74 <heuristic_single_cell+0x32c>
      {
        //Verificamos que la diferencia entre los angulos no sea superior a 45°
        if (ang_between_vector[k] <= 1.5f)
 8001e20:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	3388      	adds	r3, #136	; 0x88
 8001e28:	443b      	add	r3, r7
 8001e2a:	3b58      	subs	r3, #88	; 0x58
 8001e2c:	edd3 7a00 	vldr	s15, [r3]
 8001e30:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001e34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3c:	d81a      	bhi.n	8001e74 <heuristic_single_cell+0x32c>
        {
          //Verificar que la distancia sea menor a la anterior menor distancia
          if (dis[k] < min_distance)
 8001e3e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	3388      	adds	r3, #136	; 0x88
 8001e46:	443b      	add	r3, r7
 8001e48:	3b78      	subs	r3, #120	; 0x78
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001e52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5a:	dd0b      	ble.n	8001e74 <heuristic_single_cell+0x32c>
          {
            min_distance = dis[k];
 8001e5c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	3388      	adds	r3, #136	; 0x88
 8001e64:	443b      	add	r3, r7
 8001e66:	3b78      	subs	r3, #120	; 0x78
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	67bb      	str	r3, [r7, #120]	; 0x78
            best_index = k;
 8001e6c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001e70:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    for (uint8_t k = 0; k < 8; k++)
 8001e74:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001e78:	3301      	adds	r3, #1
 8001e7a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001e7e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001e82:	2b07      	cmp	r3, #7
 8001e84:	d9bb      	bls.n	8001dfe <heuristic_single_cell+0x2b6>
      }        
    }

    
    //--------------Seleccionamos la celda vecina y sumamos su distancia--------------------
    total_distante = total_distante + ptrCell->neighbors.distance_neigh[best_index];
 8001e86:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001e8a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001e8e:	330a      	adds	r3, #10
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	3304      	adds	r3, #4
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    ptrCell = ptrCell->neighbors.ptrCellMap[best_index];    
 8001ea6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001eaa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001eae:	3302      	adds	r3, #2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    
    //-----------------Verificacion si se llego al gol----------------------
    if (ptrCell->coor_x == goal_x && ptrCell->coor_y == goal_y)
 8001eba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ebe:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ec2:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ec6:	eeb4 7a67 	vcmp.f32	s14, s15
 8001eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ece:	f47f ae86 	bne.w	8001bde <heuristic_single_cell+0x96>
 8001ed2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ed6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001eda:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ede:	eeb4 7a67 	vcmp.f32	s14, s15
 8001ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee6:	d00f      	beq.n	8001f08 <heuristic_single_cell+0x3c0>
    best_index = 0;
 8001ee8:	e679      	b.n	8001bde <heuristic_single_cell+0x96>
 8001eea:	bf00      	nop
 8001eec:	f3af 8000 	nop.w
 8001ef0:	00000000 	.word	0x00000000
 8001ef4:	40c38800 	.word	0x40c38800
 8001ef8:	bf800000 	.word	0xbf800000
 8001efc:	461c4000 	.word	0x461c4000
 8001f00:	7f7fffff 	.word	0x7f7fffff
 8001f04:	ff7fffff 	.word	0xff7fffff
    {
      break;
 8001f08:	bf00      	nop
    }
  }

  return total_distante;
 8001f0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f0e:	ee07 3a90 	vmov	s15, r3
}
 8001f12:	eeb0 0a67 	vmov.f32	s0, s15
 8001f16:	378c      	adds	r7, #140	; 0x8c
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	ecbd 8b02 	vpop	{d8}
 8001f1e:	bd90      	pop	{r4, r7, pc}

08001f20 <build_grid_map>:
int8_t ne_pos_x[8] = {-1, 0, 1, 1, 1, 0, -1, -1};
int8_t ne_pos_y[8] = {1, 1, 1, 0, -1, -1, -1, 0};

// Función para crear la malla de celdas
void build_grid_map(Cell_map_t grid[20][20], uint8_t row, uint8_t colum, float separation)
{  
 8001f20:	b5b0      	push	{r4, r5, r7, lr}
 8001f22:	b08e      	sub	sp, #56	; 0x38
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f2e:	72fb      	strb	r3, [r7, #11]
 8001f30:	4613      	mov	r3, r2
 8001f32:	72bb      	strb	r3, [r7, #10]
    float rel_x;
    float rel_y;

    //---------------------Asignacion de informacion------------------------
    // Llenar la matriz de celdas con valores predeterminados
    for (int i = 0; i < row; i++) {
 8001f34:	2300      	movs	r3, #0
 8001f36:	637b      	str	r3, [r7, #52]	; 0x34
 8001f38:	e0fa      	b.n	8002130 <build_grid_map+0x210>
        for (int j = 0; j < colum; j++) {
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f3e:	e0ef      	b.n	8002120 <build_grid_map+0x200>
            // Asignar valores a la celda
            grid[i][j].id[0] = 'A' + j;             // Asignar un identificador simple, 'A', 'B', ...
 8001f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f46:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 8001f4a:	fb01 f202 	mul.w	r2, r1, r2
 8001f4e:	68f9      	ldr	r1, [r7, #12]
 8001f50:	440a      	add	r2, r1
 8001f52:	3341      	adds	r3, #65	; 0x41
 8001f54:	b2d8      	uxtb	r0, r3
 8001f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f58:	2158      	movs	r1, #88	; 0x58
 8001f5a:	fb01 f303 	mul.w	r3, r1, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	4602      	mov	r2, r0
 8001f62:	701a      	strb	r2, [r3, #0]
            grid[i][j].id[1] = '0' + i;             // Asignar una cifra simple, '0', '1', '2', ...
 8001f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f6a:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 8001f6e:	fb01 f202 	mul.w	r2, r1, r2
 8001f72:	68f9      	ldr	r1, [r7, #12]
 8001f74:	440a      	add	r2, r1
 8001f76:	3330      	adds	r3, #48	; 0x30
 8001f78:	b2d8      	uxtb	r0, r3
 8001f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7c:	2158      	movs	r1, #88	; 0x58
 8001f7e:	fb01 f303 	mul.w	r3, r1, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	3301      	adds	r3, #1
 8001f86:	4602      	mov	r2, r0
 8001f88:	701a      	strb	r2, [r3, #0]
            grid[i][j].index_row = i;               // Asignar el indice de la fila
 8001f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8c:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001f90:	fb02 f303 	mul.w	r3, r2, r3
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	441a      	add	r2, r3
 8001f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f9a:	b2d8      	uxtb	r0, r3
 8001f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9e:	2158      	movs	r1, #88	; 0x58
 8001fa0:	fb01 f303 	mul.w	r3, r1, r3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	4602      	mov	r2, r0
 8001faa:	701a      	strb	r2, [r3, #0]
            grid[i][j].index_col = j;               // Asignar el indice de la columna
 8001fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fae:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001fb2:	fb02 f303 	mul.w	r3, r2, r3
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	441a      	add	r2, r3
 8001fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbc:	b2d8      	uxtb	r0, r3
 8001fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc0:	2158      	movs	r1, #88	; 0x58
 8001fc2:	fb01 f303 	mul.w	r3, r1, r3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3303      	adds	r3, #3
 8001fca:	4602      	mov	r2, r0
 8001fcc:	701a      	strb	r2, [r3, #0]
            grid[i][j].coor_x = separation * j;     // Asignar la posición x de la celda
 8001fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd0:	ee07 3a90 	vmov	s15, r3
 8001fd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fda:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001fde:	fb02 f303 	mul.w	r3, r2, r3
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	441a      	add	r2, r3
 8001fe6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff0:	2158      	movs	r1, #88	; 0x58
 8001ff2:	fb01 f303 	mul.w	r3, r1, r3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	edc3 7a00 	vstr	s15, [r3]
            grid[i][j].coor_y = separation * i;     // Asignar la posición y de la celda
 8001ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800200a:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800200e:	fb02 f303 	mul.w	r3, r2, r3
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	441a      	add	r2, r3
 8002016:	edd7 7a01 	vldr	s15, [r7, #4]
 800201a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002020:	2158      	movs	r1, #88	; 0x58
 8002022:	fb01 f303 	mul.w	r3, r1, r3
 8002026:	4413      	add	r3, r2
 8002028:	3308      	adds	r3, #8
 800202a:	edc3 7a00 	vstr	s15, [r3]
            grid[i][j].status = 0;                  // Inicializar el estado de la celda;             
 800202e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002030:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002034:	fb02 f303 	mul.w	r3, r2, r3
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	441a      	add	r2, r3
 800203c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203e:	2158      	movs	r1, #88	; 0x58
 8002040:	fb01 f303 	mul.w	r3, r1, r3
 8002044:	4413      	add	r3, r2
 8002046:	3354      	adds	r3, #84	; 0x54
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
            // Asignacion de vecinos a la celda actual
            for (uint8_t k = 0; k < 8; k++) {
 800204c:	2300      	movs	r3, #0
 800204e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002052:	e05e      	b.n	8002112 <build_grid_map+0x1f2>
                int8_t index_row_ne = i + ne_pos_x[k]; 
 8002054:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002058:	4a9a      	ldr	r2, [pc, #616]	; (80022c4 <build_grid_map+0x3a4>)
 800205a:	56d3      	ldrsb	r3, [r2, r3]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002060:	b2db      	uxtb	r3, r3
 8002062:	4413      	add	r3, r2
 8002064:	b2db      	uxtb	r3, r3
 8002066:	75fb      	strb	r3, [r7, #23]
                int8_t index_colum_ne = j + ne_pos_y[k]; 
 8002068:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800206c:	4a96      	ldr	r2, [pc, #600]	; (80022c8 <build_grid_map+0x3a8>)
 800206e:	56d3      	ldrsb	r3, [r2, r3]
 8002070:	b2da      	uxtb	r2, r3
 8002072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002074:	b2db      	uxtb	r3, r3
 8002076:	4413      	add	r3, r2
 8002078:	b2db      	uxtb	r3, r3
 800207a:	75bb      	strb	r3, [r7, #22]
                // Se evalua si el indice esta dentro de la malla
                if (index_row_ne >= 0 && index_row_ne < row && index_colum_ne >= 0 && index_colum_ne < colum) 
 800207c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002080:	2b00      	cmp	r3, #0
 8002082:	db2e      	blt.n	80020e2 <build_grid_map+0x1c2>
 8002084:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002088:	7afb      	ldrb	r3, [r7, #11]
 800208a:	429a      	cmp	r2, r3
 800208c:	da29      	bge.n	80020e2 <build_grid_map+0x1c2>
 800208e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002092:	2b00      	cmp	r3, #0
 8002094:	db25      	blt.n	80020e2 <build_grid_map+0x1c2>
 8002096:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800209a:	7abb      	ldrb	r3, [r7, #10]
 800209c:	429a      	cmp	r2, r3
 800209e:	da20      	bge.n	80020e2 <build_grid_map+0x1c2>
                {
                    grid[i][j].neighbors.ptrCellMap[k] = &grid[index_row_ne][index_colum_ne];
 80020a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80020a4:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80020a8:	fb02 f303 	mul.w	r3, r2, r3
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	18d0      	adds	r0, r2, r3
 80020b0:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80020b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b6:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	68f9      	ldr	r1, [r7, #12]
 80020c0:	4419      	add	r1, r3
 80020c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020c6:	2458      	movs	r4, #88	; 0x58
 80020c8:	fb04 f202 	mul.w	r2, r4, r2
 80020cc:	4402      	add	r2, r0
 80020ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020d0:	2416      	movs	r4, #22
 80020d2:	fb04 f000 	mul.w	r0, r4, r0
 80020d6:	4403      	add	r3, r0
 80020d8:	3302      	adds	r3, #2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	e012      	b.n	8002108 <build_grid_map+0x1e8>
                } 
                else 
                {
                    grid[i][j].neighbors.ptrCellMap[k] = NULL;                    
 80020e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e4:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80020e8:	fb02 f303 	mul.w	r3, r2, r3
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	441a      	add	r2, r3
 80020f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020f6:	2016      	movs	r0, #22
 80020f8:	fb00 f101 	mul.w	r1, r0, r1
 80020fc:	440b      	add	r3, r1
 80020fe:	3302      	adds	r3, #2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	2200      	movs	r2, #0
 8002106:	605a      	str	r2, [r3, #4]
            for (uint8_t k = 0; k < 8; k++) {
 8002108:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800210c:	3301      	adds	r3, #1
 800210e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002112:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002116:	2b07      	cmp	r3, #7
 8002118:	d99c      	bls.n	8002054 <build_grid_map+0x134>
        for (int j = 0; j < colum; j++) {
 800211a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211c:	3301      	adds	r3, #1
 800211e:	633b      	str	r3, [r7, #48]	; 0x30
 8002120:	7abb      	ldrb	r3, [r7, #10]
 8002122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002124:	429a      	cmp	r2, r3
 8002126:	f6ff af0b 	blt.w	8001f40 <build_grid_map+0x20>
    for (int i = 0; i < row; i++) {
 800212a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212c:	3301      	adds	r3, #1
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
 8002130:	7afb      	ldrb	r3, [r7, #11]
 8002132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002134:	429a      	cmp	r2, r3
 8002136:	f6ff af00 	blt.w	8001f3a <build_grid_map+0x1a>
        }
    }
    
    //------------------Distancias entre celdas------------------------
    //Se calcula la distancia de cada celda vecina
    for (int i = 0; i < row; i++) {
 800213a:	2300      	movs	r3, #0
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
 800213e:	e0b6      	b.n	80022ae <build_grid_map+0x38e>
        for (int j = 0; j < colum; j++) {
 8002140:	2300      	movs	r3, #0
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
 8002144:	e0ab      	b.n	800229e <build_grid_map+0x37e>
            for (uint8_t k = 0; k < 8; k++)
 8002146:	2300      	movs	r3, #0
 8002148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800214c:	e09f      	b.n	800228e <build_grid_map+0x36e>
            {    
                if(grid[i][j].neighbors.ptrCellMap[k] != NULL)
 800214e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002150:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002154:	fb02 f303 	mul.w	r3, r2, r3
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	441a      	add	r2, r3
 800215c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002160:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002162:	2016      	movs	r0, #22
 8002164:	fb00 f101 	mul.w	r1, r0, r1
 8002168:	440b      	add	r3, r1
 800216a:	3302      	adds	r3, #2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d072      	beq.n	800225c <build_grid_map+0x33c>
                {
                    //Calculo vector relativo
                    rel_x = grid[i][j].neighbors.ptrCellMap[k]->coor_x - grid[i][j].coor_x;
 8002176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002178:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800217c:	fb02 f303 	mul.w	r3, r2, r3
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	441a      	add	r2, r3
 8002184:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002188:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800218a:	2016      	movs	r0, #22
 800218c:	fb00 f101 	mul.w	r1, r0, r1
 8002190:	440b      	add	r3, r1
 8002192:	3302      	adds	r3, #2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	ed93 7a01 	vldr	s14, [r3, #4]
 800219e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a0:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80021a4:	fb02 f303 	mul.w	r3, r2, r3
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	441a      	add	r2, r3
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	2158      	movs	r1, #88	; 0x58
 80021b0:	fb01 f303 	mul.w	r3, r1, r3
 80021b4:	4413      	add	r3, r2
 80021b6:	3304      	adds	r3, #4
 80021b8:	edd3 7a00 	vldr	s15, [r3]
 80021bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021c0:	edc7 7a07 	vstr	s15, [r7, #28]
                    rel_y = grid[i][j].neighbors.ptrCellMap[k]->coor_y - grid[i][j].coor_y;
 80021c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c6:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80021ca:	fb02 f303 	mul.w	r3, r2, r3
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	441a      	add	r2, r3
 80021d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021d8:	2016      	movs	r0, #22
 80021da:	fb00 f101 	mul.w	r1, r0, r1
 80021de:	440b      	add	r3, r1
 80021e0:	3302      	adds	r3, #2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	ed93 7a02 	vldr	s14, [r3, #8]
 80021ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ee:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80021f2:	fb02 f303 	mul.w	r3, r2, r3
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	441a      	add	r2, r3
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	2158      	movs	r1, #88	; 0x58
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4413      	add	r3, r2
 8002204:	3308      	adds	r3, #8
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800220e:	edc7 7a06 	vstr	s15, [r7, #24]
                    //Ingresamos la distancia
                    grid[i][j].neighbors.distance_neigh[k] = sqrtf(rel_x * rel_x + rel_y * rel_y);
 8002212:	edd7 7a07 	vldr	s15, [r7, #28]
 8002216:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800221a:	edd7 7a06 	vldr	s15, [r7, #24]
 800221e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002228:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800222c:	fb02 f303 	mul.w	r3, r2, r3
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	18d4      	adds	r4, r2, r3
 8002234:	f897 5023 	ldrb.w	r5, [r7, #35]	; 0x23
 8002238:	eeb0 0a67 	vmov.f32	s0, s15
 800223c:	f006 fec4 	bl	8008fc8 <sqrtf>
 8002240:	eef0 7a40 	vmov.f32	s15, s0
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	2216      	movs	r2, #22
 8002248:	fb02 f303 	mul.w	r3, r2, r3
 800224c:	442b      	add	r3, r5
 800224e:	330a      	adds	r3, #10
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4423      	add	r3, r4
 8002254:	3304      	adds	r3, #4
 8002256:	edc3 7a00 	vstr	s15, [r3]
 800225a:	e013      	b.n	8002284 <build_grid_map+0x364>
                }
                else
                {
                    //Ingreamos la distancia
                    grid[i][j].neighbors.distance_neigh[k] = -1.0f;
 800225c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225e:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	441a      	add	r2, r3
 800226a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800226e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002270:	2016      	movs	r0, #22
 8002272:	fb00 f101 	mul.w	r1, r0, r1
 8002276:	440b      	add	r3, r1
 8002278:	330a      	adds	r3, #10
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	3304      	adds	r3, #4
 8002280:	4a12      	ldr	r2, [pc, #72]	; (80022cc <build_grid_map+0x3ac>)
 8002282:	601a      	str	r2, [r3, #0]
            for (uint8_t k = 0; k < 8; k++)
 8002284:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002288:	3301      	adds	r3, #1
 800228a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800228e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002292:	2b07      	cmp	r3, #7
 8002294:	f67f af5b 	bls.w	800214e <build_grid_map+0x22e>
        for (int j = 0; j < colum; j++) {
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	3301      	adds	r3, #1
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
 800229e:	7abb      	ldrb	r3, [r7, #10]
 80022a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a2:	429a      	cmp	r2, r3
 80022a4:	f6ff af4f 	blt.w	8002146 <build_grid_map+0x226>
    for (int i = 0; i < row; i++) {
 80022a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022aa:	3301      	adds	r3, #1
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ae:	7afb      	ldrb	r3, [r7, #11]
 80022b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022b2:	429a      	cmp	r2, r3
 80022b4:	f6ff af44 	blt.w	8002140 <build_grid_map+0x220>
                }                
            }
        }
    }
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	3738      	adds	r7, #56	; 0x38
 80022be:	46bd      	mov	sp, r7
 80022c0:	bdb0      	pop	{r4, r5, r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000000 	.word	0x20000000
 80022c8:	20000008 	.word	0x20000008
 80022cc:	bf800000 	.word	0xbf800000

080022d0 <main>:
char bufferRecepcion[64] = {0};                  //Arreglo que almacena el comando ingresado

void acelerometro_I2C(void);                       //Cabecera para la comunicacion I2C

int main(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
	//-----------------------Configuracion inicial del sistema---------------------------------
	//Incrementamos la velocidad de reloj del sistema
	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 80022d6:	2364      	movs	r3, #100	; 0x64
 80022d8:	71fb      	strb	r3, [r7, #7]
	configPLL(clock);
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 ff85 	bl	80031ec <configPLL>
	//Realizamos la configuracuion inicial
	int_Hardware();
 80022e2:	f000 f889 	bl	80023f8 <int_Hardware>
	//Activamos el punto flotante por medio del registro especifico
	SCB->CPACR |= 0xF <<20;
 80022e6:	4b36      	ldr	r3, [pc, #216]	; (80023c0 <main+0xf0>)
 80022e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ec:	4a34      	ldr	r2, [pc, #208]	; (80023c0 <main+0xf0>)
 80022ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	while(1)
	{
		//--------------------Comandos-----------------------
		if(commandComplete==1)
 80022f6:	4b33      	ldr	r3, [pc, #204]	; (80023c4 <main+0xf4>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d106      	bne.n	800230c <main+0x3c>
		{
			runCommand(bufferRecepcion);
 80022fe:	4832      	ldr	r0, [pc, #200]	; (80023c8 <main+0xf8>)
 8002300:	f000 f97a 	bl	80025f8 <runCommand>
			//Reniciamos la variable
			commandComplete=0;
 8002304:	4b2f      	ldr	r3, [pc, #188]	; (80023c4 <main+0xf4>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
 800230a:	e000      	b.n	800230e <main+0x3e>
		}
		else
		{ __NOP(); }
 800230c:	bf00      	nop

		//---------------A-Star-----------------
		if(flag_A_Star==1 && string_aStar_Complete==1)
 800230e:	4b2f      	ldr	r3, [pc, #188]	; (80023cc <main+0xfc>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d152      	bne.n	80023bc <main+0xec>
 8002316:	4b2e      	ldr	r3, [pc, #184]	; (80023d0 <main+0x100>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d14e      	bne.n	80023bc <main+0xec>
		{
		 //-------------Separar el String en los parametros del grid m-------------
		  Separate_parameters(grid_map, bufferParameterStringGM);
 800231e:	492d      	ldr	r1, [pc, #180]	; (80023d4 <main+0x104>)
 8002320:	482d      	ldr	r0, [pc, #180]	; (80023d8 <main+0x108>)
 8002322:	f000 f9b7 	bl	8002694 <Separate_parameters>
		  //---------Creacion de la malla con cada una de sus celdas-----------
		  build_grid_map(grid_map, grid_map_row, grid_map_colum, cell_separation);
 8002326:	4b2d      	ldr	r3, [pc, #180]	; (80023dc <main+0x10c>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	4a2d      	ldr	r2, [pc, #180]	; (80023e0 <main+0x110>)
 800232c:	7812      	ldrb	r2, [r2, #0]
 800232e:	492d      	ldr	r1, [pc, #180]	; (80023e4 <main+0x114>)
 8002330:	edd1 7a00 	vldr	s15, [r1]
 8002334:	eeb0 0a67 	vmov.f32	s0, s15
 8002338:	4619      	mov	r1, r3
 800233a:	4827      	ldr	r0, [pc, #156]	; (80023d8 <main+0x108>)
 800233c:	f7ff fdf0 	bl	8001f20 <build_grid_map>
		  //-------Calculo de la heuristica de la celda de acuerdo a la posicion objetivo-------
		  heuristic_cell_map(grid_map, grid_map_row, grid_map_colum, goal_x, goal_y);
 8002340:	4b26      	ldr	r3, [pc, #152]	; (80023dc <main+0x10c>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4a26      	ldr	r2, [pc, #152]	; (80023e0 <main+0x110>)
 8002346:	7812      	ldrb	r2, [r2, #0]
 8002348:	4927      	ldr	r1, [pc, #156]	; (80023e8 <main+0x118>)
 800234a:	edd1 7a00 	vldr	s15, [r1]
 800234e:	4927      	ldr	r1, [pc, #156]	; (80023ec <main+0x11c>)
 8002350:	ed91 7a00 	vldr	s14, [r1]
 8002354:	eef0 0a47 	vmov.f32	s1, s14
 8002358:	eeb0 0a67 	vmov.f32	s0, s15
 800235c:	4619      	mov	r1, r3
 800235e:	481e      	ldr	r0, [pc, #120]	; (80023d8 <main+0x108>)
 8002360:	f7ff fb66 	bl	8001a30 <heuristic_cell_map>
		  //------------------Aplicacion del algoritmo A star------------------
		  file_cell_t *file_path = aplicattion_A_Star(grid_map, grid_map_row, grid_map_colum, start_x, start_y, goal_x, goal_y);
 8002364:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <main+0x10c>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	4a1d      	ldr	r2, [pc, #116]	; (80023e0 <main+0x110>)
 800236a:	7812      	ldrb	r2, [r2, #0]
 800236c:	4920      	ldr	r1, [pc, #128]	; (80023f0 <main+0x120>)
 800236e:	edd1 7a00 	vldr	s15, [r1]
 8002372:	4920      	ldr	r1, [pc, #128]	; (80023f4 <main+0x124>)
 8002374:	ed91 7a00 	vldr	s14, [r1]
 8002378:	491b      	ldr	r1, [pc, #108]	; (80023e8 <main+0x118>)
 800237a:	edd1 6a00 	vldr	s13, [r1]
 800237e:	491b      	ldr	r1, [pc, #108]	; (80023ec <main+0x11c>)
 8002380:	ed91 6a00 	vldr	s12, [r1]
 8002384:	eef0 1a46 	vmov.f32	s3, s12
 8002388:	eeb0 1a66 	vmov.f32	s2, s13
 800238c:	eef0 0a47 	vmov.f32	s1, s14
 8002390:	eeb0 0a67 	vmov.f32	s0, s15
 8002394:	4619      	mov	r1, r3
 8002396:	4810      	ldr	r0, [pc, #64]	; (80023d8 <main+0x108>)
 8002398:	f7fe fe7e 	bl	8001098 <aplicattion_A_Star>
 800239c:	6038      	str	r0, [r7, #0]
		  //-----------------Impresion de la ruta encontrada--------------------
		  send_path(file_path, grid_map, grid_map_colum, grid_map_row);
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <main+0x110>)
 80023a0:	781a      	ldrb	r2, [r3, #0]
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <main+0x10c>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	490c      	ldr	r1, [pc, #48]	; (80023d8 <main+0x108>)
 80023a8:	6838      	ldr	r0, [r7, #0]
 80023aa:	f000 fab3 	bl	8002914 <send_path>
		  //Reinicamos banderas
		  flag_A_Star = 0;
 80023ae:	4b07      	ldr	r3, [pc, #28]	; (80023cc <main+0xfc>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
		  string_aStar_Complete = 0;
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <main+0x100>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	701a      	strb	r2, [r3, #0]
		{
 80023ba:	e000      	b.n	80023be <main+0xee>
		}
		else{  __NOP(); }
 80023bc:	bf00      	nop
		if(commandComplete==1)
 80023be:	e79a      	b.n	80022f6 <main+0x26>
 80023c0:	e000ed00 	.word	0xe000ed00
 80023c4:	20000011 	.word	0x20000011
 80023c8:	20008de4 	.word	0x20008de4
 80023cc:	20008de1 	.word	0x20008de1
 80023d0:	20008de0 	.word	0x20008de0
 80023d4:	20000284 	.word	0x20000284
 80023d8:	20000448 	.word	0x20000448
 80023dc:	20008dc8 	.word	0x20008dc8
 80023e0:	20008dc9 	.word	0x20008dc9
 80023e4:	20008dcc 	.word	0x20008dcc
 80023e8:	20008dd8 	.word	0x20008dd8
 80023ec:	20008ddc 	.word	0x20008ddc
 80023f0:	20008dd0 	.word	0x20008dd0
 80023f4:	20008dd4 	.word	0x20008dd4

080023f8 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af02      	add	r7, sp, #8
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 80023fe:	4b34      	ldr	r3, [pc, #208]	; (80024d0 <int_Hardware+0xd8>)
 8002400:	4a34      	ldr	r2, [pc, #208]	; (80024d4 <int_Hardware+0xdc>)
 8002402:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 8002404:	4b32      	ldr	r3, [pc, #200]	; (80024d0 <int_Hardware+0xd8>)
 8002406:	2205      	movs	r2, #5
 8002408:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800240a:	2300      	movs	r3, #0
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	2300      	movs	r3, #0
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2301      	movs	r3, #1
 8002414:	2200      	movs	r2, #0
 8002416:	2101      	movs	r1, #1
 8002418:	482d      	ldr	r0, [pc, #180]	; (80024d0 <int_Hardware+0xd8>)
 800241a:	f000 fd83 	bl	8002f24 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 800241e:	482c      	ldr	r0, [pc, #176]	; (80024d0 <int_Hardware+0xd8>)
 8002420:	f000 fda2 	bl	8002f68 <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA2----------------
	//------------AF7: USART2_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 8002424:	4b2c      	ldr	r3, [pc, #176]	; (80024d8 <int_Hardware+0xe0>)
 8002426:	4a2b      	ldr	r2, [pc, #172]	; (80024d4 <int_Hardware+0xdc>)
 8002428:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 800242a:	4b2b      	ldr	r3, [pc, #172]	; (80024d8 <int_Hardware+0xe0>)
 800242c:	2202      	movs	r2, #2
 800242e:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8002430:	2307      	movs	r3, #7
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	2300      	movs	r3, #0
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2301      	movs	r3, #1
 800243a:	2200      	movs	r2, #0
 800243c:	2102      	movs	r1, #2
 800243e:	4826      	ldr	r0, [pc, #152]	; (80024d8 <int_Hardware+0xe0>)
 8002440:	f000 fd70 	bl	8002f24 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 8002444:	4824      	ldr	r0, [pc, #144]	; (80024d8 <int_Hardware+0xe0>)
 8002446:	f000 fd8f 	bl	8002f68 <GPIO_Config>

	//---------------PIN: PA3----------------
	//------------AF7: USART2_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 800244a:	4b24      	ldr	r3, [pc, #144]	; (80024dc <int_Hardware+0xe4>)
 800244c:	4a21      	ldr	r2, [pc, #132]	; (80024d4 <int_Hardware+0xdc>)
 800244e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3; 						//PIN_x, 0-15
 8002450:	4b22      	ldr	r3, [pc, #136]	; (80024dc <int_Hardware+0xe4>)
 8002452:	2203      	movs	r2, #3
 8002454:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8002456:	2307      	movs	r3, #7
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	2300      	movs	r3, #0
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	2301      	movs	r3, #1
 8002460:	2200      	movs	r2, #0
 8002462:	2102      	movs	r1, #2
 8002464:	481d      	ldr	r0, [pc, #116]	; (80024dc <int_Hardware+0xe4>)
 8002466:	f000 fd5d 	bl	8002f24 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 800246a:	481c      	ldr	r0, [pc, #112]	; (80024dc <int_Hardware+0xe4>)
 800246c:	f000 fd7c 	bl	8002f68 <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART2----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART2;
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <int_Hardware+0xe8>)
 8002472:	4a1c      	ldr	r2, [pc, #112]	; (80024e4 <int_Hardware+0xec>)
 8002474:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX ;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 8002476:	4b1a      	ldr	r3, [pc, #104]	; (80024e0 <int_Hardware+0xe8>)
 8002478:	2202      	movs	r2, #2
 800247a:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_19200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 800247c:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <int_Hardware+0xe8>)
 800247e:	2201      	movs	r2, #1
 8002480:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 8002482:	4b17      	ldr	r3, [pc, #92]	; (80024e0 <int_Hardware+0xe8>)
 8002484:	2200      	movs	r2, #0
 8002486:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 8002488:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <int_Hardware+0xe8>)
 800248a:	2200      	movs	r2, #0
 800248c:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 800248e:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <int_Hardware+0xe8>)
 8002490:	2201      	movs	r2, #1
 8002492:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_DISABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 8002494:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <int_Hardware+0xe8>)
 8002496:	2200      	movs	r2, #0
 8002498:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 800249a:	4811      	ldr	r0, [pc, #68]	; (80024e0 <int_Hardware+0xe8>)
 800249c:	f000 ff76 	bl	800338c <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 80024a0:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <int_Hardware+0xf0>)
 80024a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024a6:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80024a8:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <int_Hardware+0xf0>)
 80024aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024ae:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80024b0:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <int_Hardware+0xf0>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80024b6:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <int_Hardware+0xf0>)
 80024b8:	22fa      	movs	r2, #250	; 0xfa
 80024ba:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80024bc:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <int_Hardware+0xf0>)
 80024be:	2201      	movs	r2, #1
 80024c0:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 80024c2:	4809      	ldr	r0, [pc, #36]	; (80024e8 <int_Hardware+0xf0>)
 80024c4:	f000 fbd8 	bl	8002c78 <BasicTimer_Config>

	//-------------------Fin de Configuracion TIMx-----------------------



}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000204 	.word	0x20000204
 80024d4:	40020000 	.word	0x40020000
 80024d8:	20000220 	.word	0x20000220
 80024dc:	2000022c 	.word	0x2000022c
 80024e0:	20000238 	.word	0x20000238
 80024e4:	40004400 	.word	0x40004400
 80024e8:	20000210 	.word	0x20000210

080024ec <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <BasicTimer2_Callback+0x10>)
 80024f2:	f000 fe63 	bl	80031bc <GPIOxTooglePin>
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000204 	.word	0x20000204

08002500 <BasicUSART2_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART2_Callback(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
	//Guardamos el caracter recibido
	charRead = getRxData();
 8002504:	f001 fa24 	bl	8003950 <getRxData>
 8002508:	4603      	mov	r3, r0
 800250a:	461a      	mov	r2, r3
 800250c:	4b07      	ldr	r3, [pc, #28]	; (800252c <BasicUSART2_Callback+0x2c>)
 800250e:	701a      	strb	r2, [r3, #0]
	if(flag_A_Star){ recepcion_Sring_Parameter_Grid_Map(charRead); }
 8002510:	4b07      	ldr	r3, [pc, #28]	; (8002530 <BasicUSART2_Callback+0x30>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <BasicUSART2_Callback+0x24>
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <BasicUSART2_Callback+0x2c>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f000 f809 	bl	8002534 <recepcion_Sring_Parameter_Grid_Map>
	else{ recepcionCommand(); }
}
 8002522:	e001      	b.n	8002528 <BasicUSART2_Callback+0x28>
	else{ recepcionCommand(); }
 8002524:	f000 f83a 	bl	800259c <recepcionCommand>
}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000010 	.word	0x20000010
 8002530:	20008de1 	.word	0x20008de1

08002534 <recepcion_Sring_Parameter_Grid_Map>:
//----------------------------Fin de la definicion de las funciones ISR----------------------------------------

//----------------------------Inicio de la definicion de las funciones de los comandos----------------------------------------

void recepcion_Sring_Parameter_Grid_Map(char newchar)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
	if(string_aStar_Complete!=1)
 800253e:	4b14      	ldr	r3, [pc, #80]	; (8002590 <recepcion_Sring_Parameter_Grid_Map+0x5c>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d01c      	beq.n	8002580 <recepcion_Sring_Parameter_Grid_Map+0x4c>
		if(newchar == '$')
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	2b24      	cmp	r3, #36	; 0x24
 800254a:	d10c      	bne.n	8002566 <recepcion_Sring_Parameter_Grid_Map+0x32>
		{
			//Almacenamos el elemento nulo
			bufferParameterStringGM[index_String_GM]= '\0';
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <recepcion_Sring_Parameter_Grid_Map+0x60>)
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	4b11      	ldr	r3, [pc, #68]	; (8002598 <recepcion_Sring_Parameter_Grid_Map+0x64>)
 8002554:	2100      	movs	r1, #0
 8002556:	5499      	strb	r1, [r3, r2]
			//Establecemos la bandera como alta
			string_aStar_Complete = 1;
 8002558:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <recepcion_Sring_Parameter_Grid_Map+0x5c>)
 800255a:	2201      	movs	r2, #1
 800255c:	701a      	strb	r2, [r3, #0]
			//Reiniciamos contador
			index_String_GM = 0;
 800255e:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <recepcion_Sring_Parameter_Grid_Map+0x60>)
 8002560:	2200      	movs	r2, #0
 8002562:	801a      	strh	r2, [r3, #0]
			bufferParameterStringGM[index_String_GM] = newchar;
			//Aumentamos en uno la posicion del arreglo
			index_String_GM++;
		}
	else{__NOP();}
}
 8002564:	e00d      	b.n	8002582 <recepcion_Sring_Parameter_Grid_Map+0x4e>
			bufferParameterStringGM[index_String_GM] = newchar;
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <recepcion_Sring_Parameter_Grid_Map+0x60>)
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	4619      	mov	r1, r3
 800256c:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <recepcion_Sring_Parameter_Grid_Map+0x64>)
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	5453      	strb	r3, [r2, r1]
			index_String_GM++;
 8002572:	4b08      	ldr	r3, [pc, #32]	; (8002594 <recepcion_Sring_Parameter_Grid_Map+0x60>)
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	3301      	adds	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <recepcion_Sring_Parameter_Grid_Map+0x60>)
 800257c:	801a      	strh	r2, [r3, #0]
}
 800257e:	e000      	b.n	8002582 <recepcion_Sring_Parameter_Grid_Map+0x4e>
	else{__NOP();}
 8002580:	bf00      	nop
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20008de0 	.word	0x20008de0
 8002594:	20000446 	.word	0x20000446
 8002598:	20000284 	.word	0x20000284

0800259c <recepcionCommand>:

//Funcion que recibe los caracteres del comando recibido
void recepcionCommand(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
	if(charRead == '@')
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <recepcionCommand+0x4c>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b40      	cmp	r3, #64	; 0x40
 80025a6:	d10c      	bne.n	80025c2 <recepcionCommand+0x26>
	{
		//Almacenamos el elemento nulo
		bufferRecepcion[counterRecepcion] = '\0';
 80025a8:	4b10      	ldr	r3, [pc, #64]	; (80025ec <recepcionCommand+0x50>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <recepcionCommand+0x54>)
 80025b0:	2100      	movs	r1, #0
 80025b2:	5499      	strb	r1, [r3, r2]
		//Establecemos la bandera como alta
		commandComplete = 1;
 80025b4:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <recepcionCommand+0x58>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
		//Reiniciamos la variable
		counterRecepcion = 0;
 80025ba:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <recepcionCommand+0x50>)
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
		bufferRecepcion[counterRecepcion] = charRead;
		//Aumentamos en uno la posicion del arreglo
		counterRecepcion++;
		//Reiniciamos la variable
	}
}
 80025c0:	e00c      	b.n	80025dc <recepcionCommand+0x40>
		bufferRecepcion[counterRecepcion] = charRead;
 80025c2:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <recepcionCommand+0x50>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <recepcionCommand+0x4c>)
 80025ca:	7819      	ldrb	r1, [r3, #0]
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <recepcionCommand+0x54>)
 80025ce:	5499      	strb	r1, [r3, r2]
		counterRecepcion++;
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <recepcionCommand+0x50>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	3301      	adds	r3, #1
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <recepcionCommand+0x50>)
 80025da:	701a      	strb	r2, [r3, #0]
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000010 	.word	0x20000010
 80025ec:	20008de2 	.word	0x20008de2
 80025f0:	20008de4 	.word	0x20008de4
 80025f4:	20000011 	.word	0x20000011

080025f8 <runCommand>:

//Funcion que ejecuta el comando ingresando
void runCommand(char *prtcommand)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b094      	sub	sp, #80	; 0x50
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	//Variables para almacenar los elmentos que entrega el comando luego de ser divididos por la funcion sscanf
	char cmd[64]= {0};
 8002600:	2300      	movs	r3, #0
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	223c      	movs	r2, #60	; 0x3c
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f001 fb9b 	bl	8003d48 <memset>
	int firtsParameter = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]

	//char bufferMsg[64]= {0};

	//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
	sscanf(prtcommand, "%s %u ", cmd, &firtsParameter);
 8002616:	f107 030c 	add.w	r3, r7, #12
 800261a:	f107 0210 	add.w	r2, r7, #16
 800261e:	4915      	ldr	r1, [pc, #84]	; (8002674 <runCommand+0x7c>)
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f002 fa39 	bl	8004a98 <siscanf>

	//Imprime lista que muestra los comandos que tiene el dispositivo
	if(strcmp(cmd, "help")==0)
 8002626:	f107 0310 	add.w	r3, r7, #16
 800262a:	4913      	ldr	r1, [pc, #76]	; (8002678 <runCommand+0x80>)
 800262c:	4618      	mov	r0, r3
 800262e:	f7fd fdd7 	bl	80001e0 <strcmp>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10c      	bne.n	8002652 <runCommand+0x5a>
	{
		writeMsgForTXE(&handler_USART_USB, "Help Menu: \n");
 8002638:	4910      	ldr	r1, [pc, #64]	; (800267c <runCommand+0x84>)
 800263a:	4811      	ldr	r0, [pc, #68]	; (8002680 <runCommand+0x88>)
 800263c:	f001 f94a 	bl	80038d4 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "1) help  ---Imprime lista de comandos. \n");
 8002640:	4910      	ldr	r1, [pc, #64]	; (8002684 <runCommand+0x8c>)
 8002642:	480f      	ldr	r0, [pc, #60]	; (8002680 <runCommand+0x88>)
 8002644:	f001 f946 	bl	80038d4 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "2) aStar --- Indicador de inicio de aStar \n");
 8002648:	490f      	ldr	r1, [pc, #60]	; (8002688 <runCommand+0x90>)
 800264a:	480d      	ldr	r0, [pc, #52]	; (8002680 <runCommand+0x88>)
 800264c:	f001 f942 	bl	80038d4 <writeMsgForTXE>
	else if (strcmp(cmd,"aStar") == 0)
	{
		//Levantamos bandera
		flag_A_Star = 1;
	}
}
 8002650:	e00b      	b.n	800266a <runCommand+0x72>
	else if (strcmp(cmd,"aStar") == 0)
 8002652:	f107 0310 	add.w	r3, r7, #16
 8002656:	490d      	ldr	r1, [pc, #52]	; (800268c <runCommand+0x94>)
 8002658:	4618      	mov	r0, r3
 800265a:	f7fd fdc1 	bl	80001e0 <strcmp>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d102      	bne.n	800266a <runCommand+0x72>
		flag_A_Star = 1;
 8002664:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <runCommand+0x98>)
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
}
 800266a:	bf00      	nop
 800266c:	3750      	adds	r7, #80	; 0x50
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	08009660 	.word	0x08009660
 8002678:	08009668 	.word	0x08009668
 800267c:	08009670 	.word	0x08009670
 8002680:	20000238 	.word	0x20000238
 8002684:	08009680 	.word	0x08009680
 8002688:	080096ac 	.word	0x080096ac
 800268c:	080096d8 	.word	0x080096d8
 8002690:	20008de1 	.word	0x20008de1

08002694 <Separate_parameters>:


//---------------------Funciones Auxiliares-----------------------
//Funcion para separar los diferentes parametros del string
void Separate_parameters(Cell_map_t array_string[20][20], char *parameter_string)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08a      	sub	sp, #40	; 0x28
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  //Definicion de variables
  char buffercharSeparate[10];
  uint8_t index_charSeparate = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t flag_Separate = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t status_parameter = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t index_init_Grid_map = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

  //---------------Definicion de los parametros iniciales---------------
  for (uint16_t i = 0; parameter_string[i] != '\0'; i++)
 80026b6:	2300      	movs	r3, #0
 80026b8:	847b      	strh	r3, [r7, #34]	; 0x22
 80026ba:	e068      	b.n	800278e <Separate_parameters+0xfa>
  {
    //Verificacion del estado
    if(status_parameter<3)
 80026bc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d85d      	bhi.n	8002780 <Separate_parameters+0xec>
    {
      //Busqueda de la separacion dentro del string
      if (parameter_string[i] == ':')
 80026c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	4413      	add	r3, r2
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b3a      	cmp	r3, #58	; 0x3a
 80026ce:	d10d      	bne.n	80026ec <Separate_parameters+0x58>
      {
        buffercharSeparate[index_charSeparate] = '\0';
 80026d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026d4:	3328      	adds	r3, #40	; 0x28
 80026d6:	443b      	add	r3, r7
 80026d8:	2200      	movs	r2, #0
 80026da:	f803 2c20 	strb.w	r2, [r3, #-32]
        index_charSeparate = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        flag_Separate = 1;
 80026e4:	2301      	movs	r3, #1
 80026e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80026ea:	e00e      	b.n	800270a <Separate_parameters+0x76>
      }
      else
      {
        buffercharSeparate[index_charSeparate] = parameter_string[i];
 80026ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	441a      	add	r2, r3
 80026f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026f6:	7812      	ldrb	r2, [r2, #0]
 80026f8:	3328      	adds	r3, #40	; 0x28
 80026fa:	443b      	add	r3, r7
 80026fc:	f803 2c20 	strb.w	r2, [r3, #-32]
        index_charSeparate++;
 8002700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002704:	3301      	adds	r3, #1
 8002706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      //Si la bandera se levanta se asigna el valor correspondiente al parametro
      if(flag_Separate == 1)
 800270a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800270e:	2b01      	cmp	r3, #1
 8002710:	d13a      	bne.n	8002788 <Separate_parameters+0xf4>
      {
        switch(status_parameter)
 8002712:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002716:	2b02      	cmp	r3, #2
 8002718:	d01a      	beq.n	8002750 <Separate_parameters+0xbc>
 800271a:	2b02      	cmp	r3, #2
 800271c:	dc27      	bgt.n	800276e <Separate_parameters+0xda>
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <Separate_parameters+0x94>
 8002722:	2b01      	cmp	r3, #1
 8002724:	d00a      	beq.n	800273c <Separate_parameters+0xa8>
 8002726:	e022      	b.n	800276e <Separate_parameters+0xda>
        {
          case 0:
          {
            grid_map_row = atoi(buffercharSeparate);
 8002728:	f107 0308 	add.w	r3, r7, #8
 800272c:	4618      	mov	r0, r3
 800272e:	f001 fadc 	bl	8003cea <atoi>
 8002732:	4603      	mov	r3, r0
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4b70      	ldr	r3, [pc, #448]	; (80028f8 <Separate_parameters+0x264>)
 8002738:	701a      	strb	r2, [r3, #0]
            break;
 800273a:	e018      	b.n	800276e <Separate_parameters+0xda>
          }
          case 1:
          {
            grid_map_colum = atoi(buffercharSeparate);
 800273c:	f107 0308 	add.w	r3, r7, #8
 8002740:	4618      	mov	r0, r3
 8002742:	f001 fad2 	bl	8003cea <atoi>
 8002746:	4603      	mov	r3, r0
 8002748:	b2da      	uxtb	r2, r3
 800274a:	4b6c      	ldr	r3, [pc, #432]	; (80028fc <Separate_parameters+0x268>)
 800274c:	701a      	strb	r2, [r3, #0]
            break;
 800274e:	e00e      	b.n	800276e <Separate_parameters+0xda>
          }
          case 2:
          {
            cell_separation = atof(buffercharSeparate);
 8002750:	f107 0308 	add.w	r3, r7, #8
 8002754:	4618      	mov	r0, r3
 8002756:	f001 fac5 	bl	8003ce4 <atof>
 800275a:	ec53 2b10 	vmov	r2, r3, d0
 800275e:	4610      	mov	r0, r2
 8002760:	4619      	mov	r1, r3
 8002762:	f7fe fa59 	bl	8000c18 <__aeabi_d2f>
 8002766:	4603      	mov	r3, r0
 8002768:	4a65      	ldr	r2, [pc, #404]	; (8002900 <Separate_parameters+0x26c>)
 800276a:	6013      	str	r3, [r2, #0]
            break;
 800276c:	bf00      	nop
          }
        }
        status_parameter++;
 800276e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002772:	3301      	adds	r3, #1
 8002774:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        flag_Separate = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800277e:	e003      	b.n	8002788 <Separate_parameters+0xf4>
      }
    }
    else
    {
      index_init_Grid_map = i;
 8002780:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002782:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      break;
 8002786:	e008      	b.n	800279a <Separate_parameters+0x106>
  for (uint16_t i = 0; parameter_string[i] != '\0'; i++)
 8002788:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800278a:	3301      	adds	r3, #1
 800278c:	847b      	strh	r3, [r7, #34]	; 0x22
 800278e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	4413      	add	r3, r2
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d190      	bne.n	80026bc <Separate_parameters+0x28>
    }
  }
  //---------------transformacion del string grid map en un array---------------
  //Variables para los indices
  uint8_t index_row = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t index_col = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f887 3020 	strb.w	r3, [r7, #32]

  //Separacion de cada caracter
  for (uint16_t i = index_init_Grid_map; parameter_string[i] != '\0'; i++)
 80027a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027aa:	83fb      	strh	r3, [r7, #30]
 80027ac:	e02b      	b.n	8002806 <Separate_parameters+0x172>
  {
    if (parameter_string[i] == ';')
 80027ae:	8bfb      	ldrh	r3, [r7, #30]
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	4413      	add	r3, r2
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b3b      	cmp	r3, #59	; 0x3b
 80027b8:	d108      	bne.n	80027cc <Separate_parameters+0x138>
    {
      //Se aumenta el indice de la fila y se reinicia el indice de la columna
      index_row++;
 80027ba:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80027be:	3301      	adds	r3, #1
 80027c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      index_col = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f887 3020 	strb.w	r3, [r7, #32]
 80027ca:	e019      	b.n	8002800 <Separate_parameters+0x16c>
    }
    else
    {
      //Se guarda el caracter
      array_string[index_row][index_col].feature = parameter_string[i];
 80027cc:	8bfb      	ldrh	r3, [r7, #30]
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	18d1      	adds	r1, r2, r3
 80027d2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80027d6:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80027da:	fb02 f303 	mul.w	r3, r2, r3
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	441a      	add	r2, r3
 80027e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027e6:	7808      	ldrb	r0, [r1, #0]
 80027e8:	2158      	movs	r1, #88	; 0x58
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	334c      	adds	r3, #76	; 0x4c
 80027f2:	4602      	mov	r2, r0
 80027f4:	701a      	strb	r2, [r3, #0]
      //se aumenta el indice de la columna
      index_col++;
 80027f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027fa:	3301      	adds	r3, #1
 80027fc:	f887 3020 	strb.w	r3, [r7, #32]
  for (uint16_t i = index_init_Grid_map; parameter_string[i] != '\0'; i++)
 8002800:	8bfb      	ldrh	r3, [r7, #30]
 8002802:	3301      	adds	r3, #1
 8002804:	83fb      	strh	r3, [r7, #30]
 8002806:	8bfb      	ldrh	r3, [r7, #30]
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	4413      	add	r3, r2
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1cd      	bne.n	80027ae <Separate_parameters+0x11a>
    }
  }
  //---------------Definicion del start y del goal---------------
  //Recorremo el array creado para encontrar la posicion de los objetivos
  for(int i = 0; i < grid_map_row; i++)
 8002812:	2300      	movs	r3, #0
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	e063      	b.n	80028e0 <Separate_parameters+0x24c>
  {
    for(int j = 0; j < grid_map_colum; j++)
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	e057      	b.n	80028ce <Separate_parameters+0x23a>
    {
      if(array_string[i][j].feature == 'S')
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002824:	fb02 f303 	mul.w	r3, r2, r3
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	441a      	add	r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2158      	movs	r1, #88	; 0x58
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	4413      	add	r3, r2
 8002836:	334c      	adds	r3, #76	; 0x4c
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b53      	cmp	r3, #83	; 0x53
 800283c:	d11a      	bne.n	8002874 <Separate_parameters+0x1e0>
      {
        //Definimos su posicion
        start_x = j*cell_separation;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	ee07 3a90 	vmov	s15, r3
 8002844:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002848:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <Separate_parameters+0x26c>)
 800284a:	edd3 7a00 	vldr	s15, [r3]
 800284e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002852:	4b2c      	ldr	r3, [pc, #176]	; (8002904 <Separate_parameters+0x270>)
 8002854:	edc3 7a00 	vstr	s15, [r3]
        start_y = i*cell_separation;
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002862:	4b27      	ldr	r3, [pc, #156]	; (8002900 <Separate_parameters+0x26c>)
 8002864:	edd3 7a00 	vldr	s15, [r3]
 8002868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286c:	4b26      	ldr	r3, [pc, #152]	; (8002908 <Separate_parameters+0x274>)
 800286e:	edc3 7a00 	vstr	s15, [r3]
 8002872:	e029      	b.n	80028c8 <Separate_parameters+0x234>
      }
      else if (array_string[i][j].feature == 'G')
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800287a:	fb02 f303 	mul.w	r3, r2, r3
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	441a      	add	r2, r3
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2158      	movs	r1, #88	; 0x58
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	334c      	adds	r3, #76	; 0x4c
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b47      	cmp	r3, #71	; 0x47
 8002892:	d119      	bne.n	80028c8 <Separate_parameters+0x234>
      {
      //Definimos su posicion
        goal_x= j*cell_separation;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	ee07 3a90 	vmov	s15, r3
 800289a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800289e:	4b18      	ldr	r3, [pc, #96]	; (8002900 <Separate_parameters+0x26c>)
 80028a0:	edd3 7a00 	vldr	s15, [r3]
 80028a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a8:	4b18      	ldr	r3, [pc, #96]	; (800290c <Separate_parameters+0x278>)
 80028aa:	edc3 7a00 	vstr	s15, [r3]
        goal_y= i*cell_separation;
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	ee07 3a90 	vmov	s15, r3
 80028b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <Separate_parameters+0x26c>)
 80028ba:	edd3 7a00 	vldr	s15, [r3]
 80028be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c2:	4b13      	ldr	r3, [pc, #76]	; (8002910 <Separate_parameters+0x27c>)
 80028c4:	edc3 7a00 	vstr	s15, [r3]
    for(int j = 0; j < grid_map_colum; j++)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	3301      	adds	r3, #1
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <Separate_parameters+0x268>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	4293      	cmp	r3, r2
 80028d8:	dba1      	blt.n	800281e <Separate_parameters+0x18a>
  for(int i = 0; i < grid_map_row; i++)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	3301      	adds	r3, #1
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <Separate_parameters+0x264>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	4293      	cmp	r3, r2
 80028ea:	db95      	blt.n	8002818 <Separate_parameters+0x184>
      }
    }
  }
}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	3728      	adds	r7, #40	; 0x28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20008dc8 	.word	0x20008dc8
 80028fc:	20008dc9 	.word	0x20008dc9
 8002900:	20008dcc 	.word	0x20008dcc
 8002904:	20008dd0 	.word	0x20008dd0
 8002908:	20008dd4 	.word	0x20008dd4
 800290c:	20008dd8 	.word	0x20008dd8
 8002910:	20008ddc 	.word	0x20008ddc

08002914 <send_path>:


//Funcion para imprimir la ruta encontrada
void send_path(file_cell_t *file_cell, Cell_map_t array_string[20][20], uint8_t row, uint8_t colum)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08e      	sub	sp, #56	; 0x38
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	4611      	mov	r1, r2
 8002920:	461a      	mov	r2, r3
 8002922:	460b      	mov	r3, r1
 8002924:	71fb      	strb	r3, [r7, #7]
 8002926:	4613      	mov	r3, r2
 8002928:	71bb      	strb	r3, [r7, #6]
  //Variables
  uint8_t index = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  char buffermsg[22] = {0};
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	f107 0318 	add.w	r3, r7, #24
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	821a      	strh	r2, [r3, #16]

  //Cambiamos los caracteres de la malla de strings por caracteres que indican la ruta establecida con A Star
  while(1)
  {
	if(file_cell->ptrCell_parent[index] != NULL)
 8002944:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d022      	beq.n	800299a <send_path+0x86>
	{
	   array_string[file_cell->ptrCell_parent[index]->index_row][file_cell->ptrCell_parent[index]->index_col].feature = '+';
 8002954:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	789b      	ldrb	r3, [r3, #2]
 8002962:	461a      	mov	r2, r3
 8002964:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 8002968:	fb02 f303 	mul.w	r3, r2, r3
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	441a      	add	r2, r3
 8002970:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002974:	68f9      	ldr	r1, [r7, #12]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	78db      	ldrb	r3, [r3, #3]
 800297e:	4619      	mov	r1, r3
 8002980:	2358      	movs	r3, #88	; 0x58
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	334c      	adds	r3, #76	; 0x4c
 800298a:	222b      	movs	r2, #43	; 0x2b
 800298c:	701a      	strb	r2, [r3, #0]
	  index++;
 800298e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002992:	3301      	adds	r3, #1
 8002994:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(file_cell->ptrCell_parent[index] != NULL)
 8002998:	e7d4      	b.n	8002944 <send_path+0x30>
	}
	else
	{
	  break;
 800299a:	bf00      	nop
	}
  }
  //Indica de nuevo el inicio del recorrido
   array_string[file_cell->ptrCell_parent[0]->index_row][file_cell->ptrCell_parent[0]->index_col].feature = 'S';
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	789b      	ldrb	r3, [r3, #2]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 80029a8:	fb02 f303 	mul.w	r3, r2, r3
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	441a      	add	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	78db      	ldrb	r3, [r3, #3]
 80029b6:	4619      	mov	r1, r3
 80029b8:	2358      	movs	r3, #88	; 0x58
 80029ba:	fb01 f303 	mul.w	r3, r1, r3
 80029be:	4413      	add	r3, r2
 80029c0:	334c      	adds	r3, #76	; 0x4c
 80029c2:	2253      	movs	r2, #83	; 0x53
 80029c4:	701a      	strb	r2, [r3, #0]

  //Envio de caracter para indicar que se trata del grid map
  writeChar(&handler_USART_USB, '$');
 80029c6:	2124      	movs	r1, #36	; 0x24
 80029c8:	4822      	ldr	r0, [pc, #136]	; (8002a54 <send_path+0x140>)
 80029ca:	f000 ff4b 	bl	8003864 <writeChar>
  //Imprimir la malla modificada
  for(int i=0;i<row;i++)
 80029ce:	2300      	movs	r3, #0
 80029d0:	633b      	str	r3, [r7, #48]	; 0x30
 80029d2:	e036      	b.n	8002a42 <send_path+0x12e>
  {
	for(int j=0;j<colum;j++)
 80029d4:	2300      	movs	r3, #0
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029d8:	e019      	b.n	8002a0e <send_path+0xfa>
	{
	  //Agregamos las caracteristicas por fila a un buffer
	  buffermsg[j] = array_string[i][j].feature;
 80029da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029dc:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80029e0:	fb02 f303 	mul.w	r3, r2, r3
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	441a      	add	r2, r3
 80029e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ea:	2158      	movs	r1, #88	; 0x58
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	334c      	adds	r3, #76	; 0x4c
 80029f4:	7819      	ldrb	r1, [r3, #0]
 80029f6:	f107 0214 	add.w	r2, r7, #20
 80029fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fc:	4413      	add	r3, r2
 80029fe:	460a      	mov	r2, r1
 8002a00:	701a      	strb	r2, [r3, #0]
	  index = j;
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	for(int j=0;j<colum;j++)
 8002a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a0e:	79bb      	ldrb	r3, [r7, #6]
 8002a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a12:	429a      	cmp	r2, r3
 8002a14:	dbe1      	blt.n	80029da <send_path+0xc6>
	}
	//Agragamos el valor nullo al final del string
	buffermsg[index+1] = '\0';
 8002a16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	3338      	adds	r3, #56	; 0x38
 8002a1e:	443b      	add	r3, r7
 8002a20:	2200      	movs	r2, #0
 8002a22:	f803 2c24 	strb.w	r2, [r3, #-36]
	//imprimimos el string
	sprintf(bufferMsg, "%s;",buffermsg);
 8002a26:	f107 0314 	add.w	r3, r7, #20
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	490a      	ldr	r1, [pc, #40]	; (8002a58 <send_path+0x144>)
 8002a2e:	480b      	ldr	r0, [pc, #44]	; (8002a5c <send_path+0x148>)
 8002a30:	f002 f812 	bl	8004a58 <siprintf>
	writeMsg(&handler_USART_USB, bufferMsg);
 8002a34:	4909      	ldr	r1, [pc, #36]	; (8002a5c <send_path+0x148>)
 8002a36:	4807      	ldr	r0, [pc, #28]	; (8002a54 <send_path+0x140>)
 8002a38:	f000 ff2d 	bl	8003896 <writeMsg>
  for(int i=0;i<row;i++)
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3e:	3301      	adds	r3, #1
 8002a40:	633b      	str	r3, [r7, #48]	; 0x30
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a46:	429a      	cmp	r2, r3
 8002a48:	dbc4      	blt.n	80029d4 <send_path+0xc0>
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	bf00      	nop
 8002a4e:	3738      	adds	r7, #56	; 0x38
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000238 	.word	0x20000238
 8002a58:	080096e0 	.word	0x080096e0
 8002a5c:	20000244 	.word	0x20000244

08002a60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a60:	480d      	ldr	r0, [pc, #52]	; (8002a98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a62:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a64:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a68:	480c      	ldr	r0, [pc, #48]	; (8002a9c <LoopForever+0x6>)
  ldr r1, =_edata
 8002a6a:	490d      	ldr	r1, [pc, #52]	; (8002aa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a6c:	4a0d      	ldr	r2, [pc, #52]	; (8002aa4 <LoopForever+0xe>)
  movs r3, #0
 8002a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a70:	e002      	b.n	8002a78 <LoopCopyDataInit>

08002a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a76:	3304      	adds	r3, #4

08002a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a7c:	d3f9      	bcc.n	8002a72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a80:	4c0a      	ldr	r4, [pc, #40]	; (8002aac <LoopForever+0x16>)
  movs r3, #0
 8002a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a84:	e001      	b.n	8002a8a <LoopFillZerobss>

08002a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a88:	3204      	adds	r2, #4

08002a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a8c:	d3fb      	bcc.n	8002a86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a8e:	f001 f937 	bl	8003d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a92:	f7ff fc1d 	bl	80022d0 <main>

08002a96 <LoopForever>:

LoopForever:
    b LoopForever
 8002a96:	e7fe      	b.n	8002a96 <LoopForever>
  ldr   r0, =_estack
 8002a98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aa0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002aa4:	08009bbc 	.word	0x08009bbc
  ldr r2, =_sbss
 8002aa8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002aac:	20009694 	.word	0x20009694

08002ab0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ab0:	e7fe      	b.n	8002ab0 <ADC_IRQHandler>

08002ab2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0
	return 1;
 8002ab6:	2301      	movs	r3, #1
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <_kill>:

int _kill(int pid, int sig)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002acc:	f001 f912 	bl	8003cf4 <__errno>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2216      	movs	r2, #22
 8002ad4:	601a      	str	r2, [r3, #0]
	return -1;
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <_exit>:

void _exit (int status)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002aea:	f04f 31ff 	mov.w	r1, #4294967295
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff ffe7 	bl	8002ac2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002af4:	e7fe      	b.n	8002af4 <_exit+0x12>

08002af6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b086      	sub	sp, #24
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	e00a      	b.n	8002b1e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b08:	f3af 8000 	nop.w
 8002b0c:	4601      	mov	r1, r0
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	60ba      	str	r2, [r7, #8]
 8002b14:	b2ca      	uxtb	r2, r1
 8002b16:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	dbf0      	blt.n	8002b08 <_read+0x12>
	}

return len;
 8002b26:	687b      	ldr	r3, [r7, #4]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	e009      	b.n	8002b56 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	60ba      	str	r2, [r7, #8]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	3301      	adds	r3, #1
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	dbf1      	blt.n	8002b42 <_write+0x12>
	}
	return len;
 8002b5e:	687b      	ldr	r3, [r7, #4]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <_close>:

int _close(int file)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	return -1;
 8002b70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b90:	605a      	str	r2, [r3, #4]
	return 0;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <_isatty>:

int _isatty(int file)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	return 1;
 8002ba8:	2301      	movs	r3, #1
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b085      	sub	sp, #20
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
	return 0;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bd8:	4a14      	ldr	r2, [pc, #80]	; (8002c2c <_sbrk+0x5c>)
 8002bda:	4b15      	ldr	r3, [pc, #84]	; (8002c30 <_sbrk+0x60>)
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002be4:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <_sbrk+0x64>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bec:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <_sbrk+0x64>)
 8002bee:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <_sbrk+0x68>)
 8002bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bf2:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <_sbrk+0x64>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d207      	bcs.n	8002c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c00:	f001 f878 	bl	8003cf4 <__errno>
 8002c04:	4603      	mov	r3, r0
 8002c06:	220c      	movs	r2, #12
 8002c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0e:	e009      	b.n	8002c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c10:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <_sbrk+0x64>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c16:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <_sbrk+0x64>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	4a05      	ldr	r2, [pc, #20]	; (8002c34 <_sbrk+0x64>)
 8002c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c22:	68fb      	ldr	r3, [r7, #12]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20020000 	.word	0x20020000
 8002c30:	00000400 	.word	0x00000400
 8002c34:	20008e24 	.word	0x20008e24
 8002c38:	20009698 	.word	0x20009698

08002c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	db0b      	blt.n	8002c66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	f003 021f 	and.w	r2, r3, #31
 8002c54:	4907      	ldr	r1, [pc, #28]	; (8002c74 <__NVIC_EnableIRQ+0x38>)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	e000e100 	.word	0xe000e100

08002c78 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c88:	d10a      	bne.n	8002ca0 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002c8a:	4b62      	ldr	r3, [pc, #392]	; (8002e14 <BasicTimer_Config+0x19c>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	4a61      	ldr	r2, [pc, #388]	; (8002e14 <BasicTimer_Config+0x19c>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	4a5f      	ldr	r2, [pc, #380]	; (8002e18 <BasicTimer_Config+0x1a0>)
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e02e      	b.n	8002cfe <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	4a5d      	ldr	r2, [pc, #372]	; (8002e1c <BasicTimer_Config+0x1a4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d10a      	bne.n	8002cc0 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002caa:	4b5a      	ldr	r3, [pc, #360]	; (8002e14 <BasicTimer_Config+0x19c>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	4a59      	ldr	r2, [pc, #356]	; (8002e14 <BasicTimer_Config+0x19c>)
 8002cb0:	f043 0302 	orr.w	r3, r3, #2
 8002cb4:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	4a59      	ldr	r2, [pc, #356]	; (8002e20 <BasicTimer_Config+0x1a8>)
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	e01e      	b.n	8002cfe <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4a57      	ldr	r2, [pc, #348]	; (8002e24 <BasicTimer_Config+0x1ac>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d10a      	bne.n	8002ce0 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002cca:	4b52      	ldr	r3, [pc, #328]	; (8002e14 <BasicTimer_Config+0x19c>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a51      	ldr	r2, [pc, #324]	; (8002e14 <BasicTimer_Config+0x19c>)
 8002cd0:	f043 0304 	orr.w	r3, r3, #4
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	4a53      	ldr	r2, [pc, #332]	; (8002e28 <BasicTimer_Config+0x1b0>)
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e00e      	b.n	8002cfe <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	4a51      	ldr	r2, [pc, #324]	; (8002e2c <BasicTimer_Config+0x1b4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d109      	bne.n	8002cfe <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8002cea:	4b4a      	ldr	r3, [pc, #296]	; (8002e14 <BasicTimer_Config+0x19c>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	4a49      	ldr	r2, [pc, #292]	; (8002e14 <BasicTimer_Config+0x19c>)
 8002cf0:	f043 0308 	orr.w	r3, r3, #8
 8002cf4:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	4a4d      	ldr	r2, [pc, #308]	; (8002e30 <BasicTimer_Config+0x1b8>)
 8002cfc:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 8002cfe:	f000 faf3 	bl	80032e8 <getConfigPLL>
 8002d02:	4603      	mov	r3, r0
 8002d04:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8002d06:	f000 fb0b 	bl	8003320 <getClockAPB1>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 8002d0e:	7bbb      	ldrb	r3, [r7, #14]
 8002d10:	2b31      	cmp	r3, #49	; 0x31
 8002d12:	d903      	bls.n	8002d1c <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	73fb      	strb	r3, [r7, #15]
 8002d1a:	e000      	b.n	8002d1e <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 8002d1c:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	8852      	ldrh	r2, [r2, #2]
 8002d24:	fb02 f303 	mul.w	r3, r2, r3
 8002d28:	1e5a      	subs	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d112      	bne.n	8002d5e <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f022 0210 	bic.w	r2, r2, #16
 8002d46:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	3201      	adds	r2, #1
 8002d52:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	625a      	str	r2, [r3, #36]	; 0x24
 8002d5c:	e018      	b.n	8002d90 <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f022 0210 	bic.w	r2, r2, #16
 8002d6c:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f042 0210 	orr.w	r2, r2, #16
 8002d7c:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6852      	ldr	r2, [r2, #4]
 8002d8e:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d90:	b672      	cpsid	i
}
 8002d92:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9c:	d103      	bne.n	8002da6 <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8002d9e:	201c      	movs	r0, #28
 8002da0:	f7ff ff4c 	bl	8002c3c <__NVIC_EnableIRQ>
 8002da4:	e019      	b.n	8002dda <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	4a1c      	ldr	r2, [pc, #112]	; (8002e1c <BasicTimer_Config+0x1a4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d103      	bne.n	8002db8 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8002db0:	201d      	movs	r0, #29
 8002db2:	f7ff ff43 	bl	8002c3c <__NVIC_EnableIRQ>
 8002db6:	e010      	b.n	8002dda <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4a19      	ldr	r2, [pc, #100]	; (8002e24 <BasicTimer_Config+0x1ac>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d103      	bne.n	8002dca <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8002dc2:	201e      	movs	r0, #30
 8002dc4:	f7ff ff3a 	bl	8002c3c <__NVIC_EnableIRQ>
 8002dc8:	e007      	b.n	8002dda <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	4a17      	ldr	r2, [pc, #92]	; (8002e2c <BasicTimer_Config+0x1b4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d102      	bne.n	8002dda <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8002dd4:	2032      	movs	r0, #50	; 0x32
 8002dd6:	f7ff ff31 	bl	8002c3c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8002dda:	b662      	cpsie	i
}
 8002ddc:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	7a1b      	ldrb	r3, [r3, #8]
 8002de2:	4619      	mov	r1, r3
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f87d 	bl	8002ee4 <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f022 0201 	bic.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f042 0201 	orr.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]
}
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40023800 	.word	0x40023800
 8002e18:	20008e28 	.word	0x20008e28
 8002e1c:	40000400 	.word	0x40000400
 8002e20:	20008e2c 	.word	0x20008e2c
 8002e24:	40000800 	.word	0x40000800
 8002e28:	20008e30 	.word	0x20008e30
 8002e2c:	40000c00 	.word	0x40000c00
 8002e30:	20008e34 	.word	0x20008e34

08002e34 <BasicTimer3_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer3_Callback(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
	__NOP();
 8002e38:	bf00      	nop
}
 8002e3a:	bf00      	nop
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <BasicTimer4_Callback>:

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
	__NOP();
 8002e48:	bf00      	nop
}
 8002e4a:	bf00      	nop
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
	__NOP();
 8002e58:	bf00      	nop
}
 8002e5a:	bf00      	nop
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <TIM2_IRQHandler+0x1c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <TIM2_IRQHandler+0x1c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0201 	bic.w	r2, r2, #1
 8002e76:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 8002e78:	f7ff fb38 	bl	80024ec <BasicTimer2_Callback>

}
 8002e7c:	bf00      	nop
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20008e28 	.word	0x20008e28

08002e84 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <TIM3_IRQHandler+0x1c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691a      	ldr	r2, [r3, #16]
 8002e8e:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <TIM3_IRQHandler+0x1c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0201 	bic.w	r2, r2, #1
 8002e96:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 8002e98:	f7ff ffcc 	bl	8002e34 <BasicTimer3_Callback>

}
 8002e9c:	bf00      	nop
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	20008e2c 	.word	0x20008e2c

08002ea4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <TIM4_IRQHandler+0x1c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691a      	ldr	r2, [r3, #16]
 8002eae:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <TIM4_IRQHandler+0x1c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0201 	bic.w	r2, r2, #1
 8002eb6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 8002eb8:	f7ff ffc4 	bl	8002e44 <BasicTimer4_Callback>

}
 8002ebc:	bf00      	nop
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	20008e30 	.word	0x20008e30

08002ec4 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <TIM5_IRQHandler+0x1c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691a      	ldr	r2, [r3, #16]
 8002ece:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <TIM5_IRQHandler+0x1c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0201 	bic.w	r2, r2, #1
 8002ed6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 8002ed8:	f7ff ffbc 	bl	8002e54 <BasicTimer5_Callback>

}
 8002edc:	bf00      	nop
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20008e34 	.word	0x20008e34

08002ee4 <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d108      	bne.n	8002f08 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f042 0201 	orr.w	r2, r2, #1
 8002f04:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 8002f06:	e007      	b.n	8002f18 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f022 0201 	bic.w	r2, r2, #1
 8002f16:	60da      	str	r2, [r3, #12]
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	4608      	mov	r0, r1
 8002f2e:	4611      	mov	r1, r2
 8002f30:	461a      	mov	r2, r3
 8002f32:	4603      	mov	r3, r0
 8002f34:	70fb      	strb	r3, [r7, #3]
 8002f36:	460b      	mov	r3, r1
 8002f38:	70bb      	strb	r3, [r7, #2]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	78ba      	ldrb	r2, [r7, #2]
 8002f48:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	787a      	ldrb	r2, [r7, #1]
 8002f4e:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	7c3a      	ldrb	r2, [r7, #16]
 8002f54:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	7d3a      	ldrb	r2, [r7, #20]
 8002f5a:	715a      	strb	r2, [r3, #5]
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4a88      	ldr	r2, [pc, #544]	; (80031a0 <GPIO_Config+0x238>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d106      	bne.n	8002f90 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 8002f82:	4b88      	ldr	r3, [pc, #544]	; (80031a4 <GPIO_Config+0x23c>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	4a87      	ldr	r2, [pc, #540]	; (80031a4 <GPIO_Config+0x23c>)
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8e:	e03a      	b.n	8003006 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4a84      	ldr	r2, [pc, #528]	; (80031a8 <GPIO_Config+0x240>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d106      	bne.n	8002fa8 <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 8002f9a:	4b82      	ldr	r3, [pc, #520]	; (80031a4 <GPIO_Config+0x23c>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	4a81      	ldr	r2, [pc, #516]	; (80031a4 <GPIO_Config+0x23c>)
 8002fa0:	f043 0302 	orr.w	r3, r3, #2
 8002fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa6:	e02e      	b.n	8003006 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	4a7f      	ldr	r2, [pc, #508]	; (80031ac <GPIO_Config+0x244>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d106      	bne.n	8002fc0 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 8002fb2:	4b7c      	ldr	r3, [pc, #496]	; (80031a4 <GPIO_Config+0x23c>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	4a7b      	ldr	r2, [pc, #492]	; (80031a4 <GPIO_Config+0x23c>)
 8002fb8:	f043 0304 	orr.w	r3, r3, #4
 8002fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fbe:	e022      	b.n	8003006 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	4a7a      	ldr	r2, [pc, #488]	; (80031b0 <GPIO_Config+0x248>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d106      	bne.n	8002fd8 <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 8002fca:	4b76      	ldr	r3, [pc, #472]	; (80031a4 <GPIO_Config+0x23c>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	4a75      	ldr	r2, [pc, #468]	; (80031a4 <GPIO_Config+0x23c>)
 8002fd0:	f043 0308 	orr.w	r3, r3, #8
 8002fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd6:	e016      	b.n	8003006 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4a75      	ldr	r2, [pc, #468]	; (80031b4 <GPIO_Config+0x24c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d106      	bne.n	8002ff0 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 8002fe2:	4b70      	ldr	r3, [pc, #448]	; (80031a4 <GPIO_Config+0x23c>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	4a6f      	ldr	r2, [pc, #444]	; (80031a4 <GPIO_Config+0x23c>)
 8002fe8:	f043 0310 	orr.w	r3, r3, #16
 8002fec:	6313      	str	r3, [r2, #48]	; 0x30
 8002fee:	e00a      	b.n	8003006 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a70      	ldr	r2, [pc, #448]	; (80031b8 <GPIO_Config+0x250>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d105      	bne.n	8003006 <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 8002ffa:	4b6a      	ldr	r3, [pc, #424]	; (80031a4 <GPIO_Config+0x23c>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	4a69      	ldr	r2, [pc, #420]	; (80031a4 <GPIO_Config+0x23c>)
 8003000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003004:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	785b      	ldrb	r3, [r3, #1]
 800300a:	461a      	mov	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	2103      	movs	r1, #3
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	4619      	mov	r1, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	400a      	ands	r2, r1
 8003034:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	6819      	ldr	r1, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	430a      	orrs	r2, r1
 8003044:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	789b      	ldrb	r3, [r3, #2]
 800304a:	461a      	mov	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	4619      	mov	r1, r3
 8003062:	2301      	movs	r3, #1
 8003064:	408b      	lsls	r3, r1
 8003066:	43db      	mvns	r3, r3
 8003068:	4619      	mov	r1, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	400a      	ands	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	430a      	orrs	r2, r1
 8003080:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	78db      	ldrb	r3, [r3, #3]
 8003086:	461a      	mov	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	2103      	movs	r1, #3
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	4619      	mov	r1, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	400a      	ands	r2, r1
 80030b0:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	6899      	ldr	r1, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	430a      	orrs	r2, r1
 80030c0:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	791b      	ldrb	r3, [r3, #4]
 80030c6:	461a      	mov	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	2103      	movs	r1, #3
 80030e2:	fa01 f303 	lsl.w	r3, r1, r3
 80030e6:	43db      	mvns	r3, r3
 80030e8:	4619      	mov	r1, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	400a      	ands	r2, r1
 80030f0:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	68d9      	ldr	r1, [r3, #12]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	430a      	orrs	r2, r1
 8003100:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	785b      	ldrb	r3, [r3, #1]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d143      	bne.n	8003192 <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b07      	cmp	r3, #7
 8003110:	d81f      	bhi.n	8003152 <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	6a1a      	ldr	r2, [r3, #32]
 8003120:	210f      	movs	r1, #15
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	fa01 f303 	lsl.w	r3, r1, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	4619      	mov	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	400a      	ands	r2, r1
 8003132:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	6a1a      	ldr	r2, [r3, #32]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	795b      	ldrb	r3, [r3, #5]
 800313e:	4619      	mov	r1, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	fa01 f303 	lsl.w	r3, r1, r3
 8003146:	4619      	mov	r1, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	430a      	orrs	r2, r1
 800314e:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8003150:	e01f      	b.n	8003192 <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	3b08      	subs	r3, #8
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003162:	210f      	movs	r1, #15
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	fa01 f303 	lsl.w	r3, r1, r3
 800316a:	43db      	mvns	r3, r3
 800316c:	4619      	mov	r1, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	400a      	ands	r2, r1
 8003174:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	795b      	ldrb	r3, [r3, #5]
 8003180:	4619      	mov	r1, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	fa01 f303 	lsl.w	r3, r1, r3
 8003188:	4619      	mov	r1, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	430a      	orrs	r2, r1
 8003190:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40020000 	.word	0x40020000
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40020400 	.word	0x40020400
 80031ac:	40020800 	.word	0x40020800
 80031b0:	40020c00 	.word	0x40020c00
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40021c00 	.word	0x40021c00

080031bc <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	4619      	mov	r1, r3
 80031d0:	2301      	movs	r3, #1
 80031d2:	408b      	lsls	r3, r1
 80031d4:	4619      	mov	r1, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	404a      	eors	r2, r1
 80031dc:	615a      	str	r2, [r3, #20]
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 80031f6:	4a39      	ldr	r2, [pc, #228]	; (80032dc <configPLL+0xf0>)
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	2b31      	cmp	r3, #49	; 0x31
 8003200:	d804      	bhi.n	800320c <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 8003202:	4b37      	ldr	r3, [pc, #220]	; (80032e0 <configPLL+0xf4>)
 8003204:	4a36      	ldr	r2, [pc, #216]	; (80032e0 <configPLL+0xf4>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	6093      	str	r3, [r2, #8]
 800320a:	e005      	b.n	8003218 <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800320c:	4b34      	ldr	r3, [pc, #208]	; (80032e0 <configPLL+0xf4>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	4a33      	ldr	r2, [pc, #204]	; (80032e0 <configPLL+0xf4>)
 8003212:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003216:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 8003218:	4b31      	ldr	r3, [pc, #196]	; (80032e0 <configPLL+0xf4>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4a30      	ldr	r2, [pc, #192]	; (80032e0 <configPLL+0xf4>)
 800321e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003222:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 8003224:	4b2e      	ldr	r3, [pc, #184]	; (80032e0 <configPLL+0xf4>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4a2d      	ldr	r2, [pc, #180]	; (80032e0 <configPLL+0xf4>)
 800322a:	f043 0312 	orr.w	r3, r3, #18
 800322e:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 8003230:	4b2b      	ldr	r3, [pc, #172]	; (80032e0 <configPLL+0xf4>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	79fa      	ldrb	r2, [r7, #7]
 8003236:	0092      	lsls	r2, r2, #2
 8003238:	3a0e      	subs	r2, #14
 800323a:	0192      	lsls	r2, r2, #6
 800323c:	4611      	mov	r1, r2
 800323e:	4a28      	ldr	r2, [pc, #160]	; (80032e0 <configPLL+0xf4>)
 8003240:	430b      	orrs	r3, r1
 8003242:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 8003244:	4b26      	ldr	r3, [pc, #152]	; (80032e0 <configPLL+0xf4>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4a25      	ldr	r2, [pc, #148]	; (80032e0 <configPLL+0xf4>)
 800324a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324e:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 8003250:	4b23      	ldr	r3, [pc, #140]	; (80032e0 <configPLL+0xf4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a22      	ldr	r2, [pc, #136]	; (80032e0 <configPLL+0xf4>)
 8003256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800325a:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 800325c:	e000      	b.n	8003260 <configPLL+0x74>
	{
		__NOP();
 800325e:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8003260:	4b1f      	ldr	r3, [pc, #124]	; (80032e0 <configPLL+0xf4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f8      	beq.n	800325e <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	2b5a      	cmp	r3, #90	; 0x5a
 8003270:	d909      	bls.n	8003286 <configPLL+0x9a>
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	2b64      	cmp	r3, #100	; 0x64
 8003276:	d806      	bhi.n	8003286 <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8003278:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <configPLL+0xf8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a19      	ldr	r2, [pc, #100]	; (80032e4 <configPLL+0xf8>)
 800327e:	f043 0303 	orr.w	r3, r3, #3
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	e01d      	b.n	80032c2 <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	2b40      	cmp	r3, #64	; 0x40
 800328a:	d909      	bls.n	80032a0 <configPLL+0xb4>
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	2b5a      	cmp	r3, #90	; 0x5a
 8003290:	d806      	bhi.n	80032a0 <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 8003292:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <configPLL+0xf8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a13      	ldr	r2, [pc, #76]	; (80032e4 <configPLL+0xf8>)
 8003298:	f043 0302 	orr.w	r3, r3, #2
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e010      	b.n	80032c2 <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	2b1e      	cmp	r3, #30
 80032a4:	d909      	bls.n	80032ba <configPLL+0xce>
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	2b40      	cmp	r3, #64	; 0x40
 80032aa:	d806      	bhi.n	80032ba <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 80032ac:	4b0d      	ldr	r3, [pc, #52]	; (80032e4 <configPLL+0xf8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0c      	ldr	r2, [pc, #48]	; (80032e4 <configPLL+0xf8>)
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	e003      	b.n	80032c2 <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 80032ba:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <configPLL+0xf8>)
 80032bc:	4a09      	ldr	r2, [pc, #36]	; (80032e4 <configPLL+0xf8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 80032c2:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <configPLL+0xf4>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	4a06      	ldr	r2, [pc, #24]	; (80032e0 <configPLL+0xf4>)
 80032c8:	f043 0302 	orr.w	r3, r3, #2
 80032cc:	6093      	str	r3, [r2, #8]

}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	20008e38 	.word	0x20008e38
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40023c00 	.word	0x40023c00

080032e8 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 80032f2:	4b09      	ldr	r3, [pc, #36]	; (8003318 <getConfigPLL+0x30>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d103      	bne.n	8003306 <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 80032fe:	4b07      	ldr	r3, [pc, #28]	; (800331c <getConfigPLL+0x34>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	71fb      	strb	r3, [r7, #7]
 8003304:	e001      	b.n	800330a <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 8003306:	2310      	movs	r3, #16
 8003308:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 800330a:	79fb      	ldrb	r3, [r7, #7]
}
 800330c:	4618      	mov	r0, r3
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	40023800 	.word	0x40023800
 800331c:	20008e38 	.word	0x20008e38

08003320 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 8003326:	f7ff ffdf 	bl	80032e8 <getConfigPLL>
 800332a:	4603      	mov	r3, r0
 800332c:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 800332e:	2300      	movs	r3, #0
 8003330:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 8003332:	79bb      	ldrb	r3, [r7, #6]
 8003334:	2b31      	cmp	r3, #49	; 0x31
 8003336:	d802      	bhi.n	800333e <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 8003338:	79bb      	ldrb	r3, [r7, #6]
 800333a:	71fb      	strb	r3, [r7, #7]
 800333c:	e002      	b.n	8003344 <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 800333e:	79bb      	ldrb	r3, [r7, #6]
 8003340:	089b      	lsrs	r3, r3, #2
 8003342:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 8003344:	79fb      	ldrb	r3, [r7, #7]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <__NVIC_EnableIRQ>:
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335e:	2b00      	cmp	r3, #0
 8003360:	db0b      	blt.n	800337a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	f003 021f 	and.w	r2, r3, #31
 8003368:	4907      	ldr	r1, [pc, #28]	; (8003388 <__NVIC_EnableIRQ+0x38>)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	2001      	movs	r0, #1
 8003372:	fa00 f202 	lsl.w	r2, r0, r2
 8003376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	e000e100 	.word	0xe000e100

0800338c <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	4a8f      	ldr	r2, [pc, #572]	; (80035d8 <USART_Config+0x24c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d107      	bne.n	80033ae <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 800339e:	4b8f      	ldr	r3, [pc, #572]	; (80035dc <USART_Config+0x250>)
 80033a0:	2210      	movs	r2, #16
 80033a2:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	4a8d      	ldr	r2, [pc, #564]	; (80035e0 <USART_Config+0x254>)
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	e019      	b.n	80033e2 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	4a8c      	ldr	r2, [pc, #560]	; (80035e4 <USART_Config+0x258>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d108      	bne.n	80033ca <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 80033b8:	4b88      	ldr	r3, [pc, #544]	; (80035dc <USART_Config+0x250>)
 80033ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033be:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	4a88      	ldr	r2, [pc, #544]	; (80035e8 <USART_Config+0x25c>)
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	e00b      	b.n	80033e2 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	4a87      	ldr	r2, [pc, #540]	; (80035ec <USART_Config+0x260>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d106      	bne.n	80033e2 <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 80033d4:	4b81      	ldr	r3, [pc, #516]	; (80035dc <USART_Config+0x250>)
 80033d6:	2220      	movs	r2, #32
 80033d8:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	4a84      	ldr	r2, [pc, #528]	; (80035f0 <USART_Config+0x264>)
 80033e0:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2200      	movs	r2, #0
 80033e8:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2200      	movs	r2, #0
 80033f0:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	789b      	ldrb	r3, [r3, #2]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d03d      	beq.n	8003476 <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003408:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003418:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003428:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003438:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	789b      	ldrb	r3, [r3, #2]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d110      	bne.n	8003464 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003450:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003460:	60da      	str	r2, [r3, #12]
 8003462:	e018      	b.n	8003496 <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003472:	60da      	str	r2, [r3, #12]
 8003474:	e00f      	b.n	8003496 <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003484:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003494:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	78db      	ldrb	r3, [r3, #3]
 800349a:	2b03      	cmp	r3, #3
 800349c:	d84c      	bhi.n	8003538 <USART_Config+0x1ac>
 800349e:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <USART_Config+0x118>)
 80034a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a4:	080034b5 	.word	0x080034b5
 80034a8:	080034d3 	.word	0x080034d3
 80034ac:	080034f5 	.word	0x080034f5
 80034b0:	08003517 	.word	0x08003517
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	691a      	ldr	r2, [r3, #16]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80034c2:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	6912      	ldr	r2, [r2, #16]
 80034ce:	611a      	str	r2, [r3, #16]
		break;
 80034d0:	e041      	b.n	8003556 <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80034e0:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034f0:	611a      	str	r2, [r3, #16]
		break;
 80034f2:	e030      	b.n	8003556 <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003502:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	691a      	ldr	r2, [r3, #16]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003512:	611a      	str	r2, [r3, #16]
		break;
 8003514:	e01f      	b.n	8003556 <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003524:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8003534:	611a      	str	r2, [r3, #16]
		break;
 8003536:	e00e      	b.n	8003556 <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003546:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	6912      	ldr	r2, [r2, #16]
 8003552:	611a      	str	r2, [r3, #16]
		break;
 8003554:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	4a21      	ldr	r2, [pc, #132]	; (80035e4 <USART_Config+0x258>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d104      	bne.n	800356e <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8003564:	f7ff fedc 	bl	8003320 <getClockAPB1>
 8003568:	4603      	mov	r3, r0
 800356a:	73fb      	strb	r3, [r7, #15]
 800356c:	e003      	b.n	8003576 <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 800356e:	f7ff febb 	bl	80032e8 <getConfigPLL>
 8003572:	4603      	mov	r3, r0
 8003574:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	785b      	ldrb	r3, [r3, #1]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10b      	bne.n	8003596 <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8003584:	4618      	mov	r0, r3
 8003586:	f000 f91f 	bl	80037c8 <getValueBaudRate>
 800358a:	4603      	mov	r3, r0
 800358c:	461a      	mov	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	e02f      	b.n	80035f6 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	785b      	ldrb	r3, [r3, #1]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d10b      	bne.n	80035b6 <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 f90f 	bl	80037c8 <getValueBaudRate>
 80035aa:	4603      	mov	r3, r0
 80035ac:	461a      	mov	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	609a      	str	r2, [r3, #8]
 80035b4:	e01f      	b.n	80035f6 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	785b      	ldrb	r3, [r3, #1]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d11a      	bne.n	80035f4 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 f8ff 	bl	80037c8 <getValueBaudRate>
 80035ca:	4603      	mov	r3, r0
 80035cc:	461a      	mov	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	e00f      	b.n	80035f6 <USART_Config+0x26a>
 80035d6:	bf00      	nop
 80035d8:	40011000 	.word	0x40011000
 80035dc:	40023800 	.word	0x40023800
 80035e0:	20008e3c 	.word	0x20008e3c
 80035e4:	40004400 	.word	0x40004400
 80035e8:	20008e40 	.word	0x20008e40
 80035ec:	40011400 	.word	0x40011400
 80035f0:	20008e44 	.word	0x20008e44
	}
	else
	{
		__NOP();
 80035f4:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d866      	bhi.n	80036cc <USART_Config+0x340>
 80035fe:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <USART_Config+0x278>)
 8003600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003604:	08003615 	.word	0x08003615
 8003608:	08003637 	.word	0x08003637
 800360c:	08003659 	.word	0x08003659
 8003610:	0800369b 	.word	0x0800369b
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f022 0208 	bic.w	r2, r2, #8
 8003622:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f042 0208 	orr.w	r2, r2, #8
 8003632:	60da      	str	r2, [r3, #12]

		break;
 8003634:	e063      	b.n	80036fe <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f022 0204 	bic.w	r2, r2, #4
 8003644:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f042 0204 	orr.w	r2, r2, #4
 8003654:	60da      	str	r2, [r3, #12]

		break;
 8003656:	e052      	b.n	80036fe <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f022 0208 	bic.w	r2, r2, #8
 8003666:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f042 0208 	orr.w	r2, r2, #8
 8003676:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f022 0204 	bic.w	r2, r2, #4
 8003686:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f042 0204 	orr.w	r2, r2, #4
 8003696:	60da      	str	r2, [r3, #12]


		break;
 8003698:	e031      	b.n	80036fe <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036a8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f022 0208 	bic.w	r2, r2, #8
 80036b8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f022 0204 	bic.w	r2, r2, #4
 80036c8:	60da      	str	r2, [r3, #12]
		break;
 80036ca:	e018      	b.n	80036fe <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036da:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f022 0208 	bic.w	r2, r2, #8
 80036ea:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f022 0204 	bic.w	r2, r2, #4
 80036fa:	60da      	str	r2, [r3, #12]
		break;
 80036fc:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80036fe:	b672      	cpsid	i
}
 8003700:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	791b      	ldrb	r3, [r3, #4]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d110      	bne.n	800372c <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f022 0220 	bic.w	r2, r2, #32
 8003718:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f042 0220 	orr.w	r2, r2, #32
 8003728:	60da      	str	r2, [r3, #12]
 800372a:	e007      	b.n	800373c <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f022 0220 	bic.w	r2, r2, #32
 800373a:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	791b      	ldrb	r3, [r3, #4]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d003      	beq.n	800374c <USART_Config+0x3c0>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	795b      	ldrb	r3, [r3, #5]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d11a      	bne.n	8003782 <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	4a1a      	ldr	r2, [pc, #104]	; (80037bc <USART_Config+0x430>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d103      	bne.n	800375e <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 8003756:	2025      	movs	r0, #37	; 0x25
 8003758:	f7ff fdfa 	bl	8003350 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800375c:	e013      	b.n	8003786 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	4a17      	ldr	r2, [pc, #92]	; (80037c0 <USART_Config+0x434>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d103      	bne.n	8003770 <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 8003768:	2026      	movs	r0, #38	; 0x26
 800376a:	f7ff fdf1 	bl	8003350 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800376e:	e00a      	b.n	8003786 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4a13      	ldr	r2, [pc, #76]	; (80037c4 <USART_Config+0x438>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d105      	bne.n	8003786 <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 800377a:	2047      	movs	r0, #71	; 0x47
 800377c:	f7ff fde8 	bl	8003350 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8003780:	e001      	b.n	8003786 <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 8003782:	bf00      	nop
 8003784:	e000      	b.n	8003788 <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8003786:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8003788:	b662      	cpsie	i
}
 800378a:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b03      	cmp	r3, #3
 8003792:	d00f      	beq.n	80037b4 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037a2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037b2:	60da      	str	r2, [r3, #12]
	}
}
 80037b4:	bf00      	nop
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40011000 	.word	0x40011000
 80037c0:	40004400 	.word	0x40004400
 80037c4:	40011400 	.word	0x40011400

080037c8 <getValueBaudRate>:
		__enable_irq();
}

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 80037c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037cc:	b086      	sub	sp, #24
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6039      	str	r1, [r7, #0]
 80037d2:	4601      	mov	r1, r0
 80037d4:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 80037d6:	79f9      	ldrb	r1, [r7, #7]
 80037d8:	2000      	movs	r0, #0
 80037da:	460a      	mov	r2, r1
 80037dc:	4603      	mov	r3, r0
 80037de:	491f      	ldr	r1, [pc, #124]	; (800385c <getValueBaudRate+0x94>)
 80037e0:	fb01 f003 	mul.w	r0, r1, r3
 80037e4:	2102      	movs	r1, #2
 80037e6:	fb02 f101 	mul.w	r1, r2, r1
 80037ea:	4401      	add	r1, r0
 80037ec:	481b      	ldr	r0, [pc, #108]	; (800385c <getValueBaudRate+0x94>)
 80037ee:	fba2 4500 	umull	r4, r5, r2, r0
 80037f2:	194b      	adds	r3, r1, r5
 80037f4:	461d      	mov	r5, r3
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	2200      	movs	r2, #0
 80037fc:	4698      	mov	r8, r3
 80037fe:	4691      	mov	r9, r2
 8003800:	4642      	mov	r2, r8
 8003802:	464b      	mov	r3, r9
 8003804:	4620      	mov	r0, r4
 8003806:	4629      	mov	r1, r5
 8003808:	f7fd fa56 	bl	8000cb8 <__aeabi_ldivmod>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4613      	mov	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	4a12      	ldr	r2, [pc, #72]	; (8003860 <getValueBaudRate+0x98>)
 8003818:	fba2 2303 	umull	r2, r3, r2, r3
 800381c:	0b5b      	lsrs	r3, r3, #13
 800381e:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f242 7210 	movw	r2, #10000	; 0x2710
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003836:	4a0a      	ldr	r2, [pc, #40]	; (8003860 <getValueBaudRate+0x98>)
 8003838:	fba2 2303 	umull	r2, r3, r2, r3
 800383c:	0a5b      	lsrs	r3, r3, #9
 800383e:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	b29b      	uxth	r3, r3
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	b29a      	uxth	r2, r3
 8003848:	7afb      	ldrb	r3, [r7, #11]
 800384a:	b29b      	uxth	r3, r3
 800384c:	4313      	orrs	r3, r2
 800384e:	813b      	strh	r3, [r7, #8]

    return value;
 8003850:	893b      	ldrh	r3, [r7, #8]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800385c:	540be400 	.word	0x540be400
 8003860:	d1b71759 	.word	0xd1b71759

08003864 <writeChar>:

//---------------Funciones para la transmision de datos------------------------------
//Funcion para escribir un solo char
void writeChar(USART_Handler_t *ptrUsartHandler, uint8_t datatoSend)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	70fb      	strb	r3, [r7, #3]
	//Verificamos que no se este enviando un mensaje
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8003870:	e000      	b.n	8003874 <writeChar+0x10>
	{
		__NOP();
 8003872:	bf00      	nop
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f7      	beq.n	8003872 <writeChar+0xe>
	}
	//Almacenamos un elemento char en el registro USART_DR
	ptrUsartHandler->ptrUSARTx->DR = datatoSend;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	605a      	str	r2, [r3, #4]

}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <writeMsg>:

//Funcion para escribir un string
void writeMsg(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	73fb      	strb	r3, [r7, #15]

	while(MsgtoSend[i] != '\0')
 80038a4:	e00a      	b.n	80038bc <writeMsg+0x26>
	{
		writeChar(ptrUsartHandlerString, MsgtoSend[i]);
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	4413      	add	r3, r2
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	4619      	mov	r1, r3
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ffd7 	bl	8003864 <writeChar>
		i++;
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
 80038b8:	3301      	adds	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
	while(MsgtoSend[i] != '\0')
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	4413      	add	r3, r2
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1ee      	bne.n	80038a6 <writeMsg+0x10>
	}
}
 80038c8:	bf00      	nop
 80038ca:	bf00      	nop
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <writeMsgForTXE>:
	}
}

//Funcion para escribir un string
void writeMsgForTXE(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
	if (posChar == 0 && inLineTxe == 0)
 80038de:	4b16      	ldr	r3, [pc, #88]	; (8003938 <writeMsgForTXE+0x64>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d111      	bne.n	800390a <writeMsgForTXE+0x36>
 80038e6:	4b15      	ldr	r3, [pc, #84]	; (800393c <writeMsgForTXE+0x68>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10d      	bne.n	800390a <writeMsgForTXE+0x36>
	{
		//Guardamos el string que se desea enviar en un arreglo
		sprintf(bufferMsgForTXE, MsgtoSend);
 80038ee:	6839      	ldr	r1, [r7, #0]
 80038f0:	4813      	ldr	r0, [pc, #76]	; (8003940 <writeMsgForTXE+0x6c>)
 80038f2:	f001 f8b1 	bl	8004a58 <siprintf>
		//cambiamos el tipo
		typeWriteTXE = 1;
 80038f6:	4b13      	ldr	r3, [pc, #76]	; (8003944 <writeMsgForTXE+0x70>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	701a      	strb	r2, [r3, #0]
		//Activo la interrupcion
		interruptionTX(ptrUsartHandlerString->ptrUSARTx, USART_TX_INTERRUP_ENABLE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2101      	movs	r1, #1
 8003902:	4618      	mov	r0, r3
 8003904:	f000 f830 	bl	8003968 <interruptionTX>
 8003908:	e012      	b.n	8003930 <writeMsgForTXE+0x5c>
	}
	else
	{
		sprintf(bufferMsgForTXE_inLine[inLine], MsgtoSend);
 800390a:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <writeMsgForTXE+0x74>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	2364      	movs	r3, #100	; 0x64
 8003912:	fb02 f303 	mul.w	r3, r2, r3
 8003916:	4a0d      	ldr	r2, [pc, #52]	; (800394c <writeMsgForTXE+0x78>)
 8003918:	4413      	add	r3, r2
 800391a:	6839      	ldr	r1, [r7, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f001 f89b 	bl	8004a58 <siprintf>
		inLine++;
 8003922:	4b09      	ldr	r3, [pc, #36]	; (8003948 <writeMsgForTXE+0x74>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	3301      	adds	r3, #1
 8003928:	b2da      	uxtb	r2, r3
 800392a:	4b07      	ldr	r3, [pc, #28]	; (8003948 <writeMsgForTXE+0x74>)
 800392c:	701a      	strb	r2, [r3, #0]
	}
}
 800392e:	bf00      	nop
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20009682 	.word	0x20009682
 800393c:	20009681 	.word	0x20009681
 8003940:	20008e4c 	.word	0x20008e4c
 8003944:	20009683 	.word	0x20009683
 8003948:	20009680 	.word	0x20009680
 800394c:	20008eb0 	.word	0x20008eb0

08003950 <getRxData>:

//Funcion para leer un char
uint8_t getRxData(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
	return auxRxData;
 8003954:	4b03      	ldr	r3, [pc, #12]	; (8003964 <getRxData+0x14>)
 8003956:	781b      	ldrb	r3, [r3, #0]
}
 8003958:	4618      	mov	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20008e48 	.word	0x20008e48

08003968 <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d10c      	bne.n	8003994 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 8003992:	e005      	b.n	80039a0 <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	60da      	str	r2, [r3, #12]
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <BasicUSART1_Callback>:


//Definimos las funciones para cuando se genera una interrupcion del USART1-2 y 6
__attribute__((weak)) void BasicUSART1_Callback()
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
	__NOP();
 80039b0:	bf00      	nop
}
 80039b2:	bf00      	nop
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <BasicUSART6_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART6_Callback()
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
	__NOP();
 80039c0:	bf00      	nop
}
 80039c2:	bf00      	nop
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 80039d0:	4b37      	ldr	r3, [pc, #220]	; (8003ab0 <USART1_IRQHandler+0xe4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d008      	beq.n	80039f0 <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 80039de:	4b34      	ldr	r3, [pc, #208]	; (8003ab0 <USART1_IRQHandler+0xe4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	4b33      	ldr	r3, [pc, #204]	; (8003ab4 <USART1_IRQHandler+0xe8>)
 80039e8:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 80039ea:	f7ff ffdf 	bl	80039ac <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 80039ee:	e05d      	b.n	8003aac <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 80039f0:	4b2f      	ldr	r3, [pc, #188]	; (8003ab0 <USART1_IRQHandler+0xe4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d055      	beq.n	8003aaa <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80039fe:	4b2e      	ldr	r3, [pc, #184]	; (8003ab8 <USART1_IRQHandler+0xec>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10b      	bne.n	8003a1e <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 8003a06:	4b2d      	ldr	r3, [pc, #180]	; (8003abc <USART1_IRQHandler+0xf0>)
 8003a08:	781a      	ldrb	r2, [r3, #0]
 8003a0a:	4b29      	ldr	r3, [pc, #164]	; (8003ab0 <USART1_IRQHandler+0xe4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8003a10:	4b27      	ldr	r3, [pc, #156]	; (8003ab0 <USART1_IRQHandler+0xe4>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2100      	movs	r1, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff ffa6 	bl	8003968 <interruptionTX>
}
 8003a1c:	e046      	b.n	8003aac <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8003a1e:	4b26      	ldr	r3, [pc, #152]	; (8003ab8 <USART1_IRQHandler+0xec>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d142      	bne.n	8003aac <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8003a26:	4b26      	ldr	r3, [pc, #152]	; (8003ac0 <USART1_IRQHandler+0xf4>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	4b25      	ldr	r3, [pc, #148]	; (8003ac4 <USART1_IRQHandler+0xf8>)
 8003a2e:	5c9b      	ldrb	r3, [r3, r2]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00e      	beq.n	8003a52 <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 8003a34:	4b22      	ldr	r3, [pc, #136]	; (8003ac0 <USART1_IRQHandler+0xf4>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4b22      	ldr	r3, [pc, #136]	; (8003ac4 <USART1_IRQHandler+0xf8>)
 8003a3c:	5c9a      	ldrb	r2, [r3, r2]
 8003a3e:	4b1c      	ldr	r3, [pc, #112]	; (8003ab0 <USART1_IRQHandler+0xe4>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	605a      	str	r2, [r3, #4]
				posChar++;
 8003a44:	4b1e      	ldr	r3, [pc, #120]	; (8003ac0 <USART1_IRQHandler+0xf4>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	4b1c      	ldr	r3, [pc, #112]	; (8003ac0 <USART1_IRQHandler+0xf4>)
 8003a4e:	701a      	strb	r2, [r3, #0]
}
 8003a50:	e02c      	b.n	8003aac <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8003a52:	4b1d      	ldr	r3, [pc, #116]	; (8003ac8 <USART1_IRQHandler+0xfc>)
 8003a54:	781a      	ldrb	r2, [r3, #0]
 8003a56:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <USART1_IRQHandler+0x100>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d215      	bcs.n	8003a8a <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8003a5e:	4b1a      	ldr	r3, [pc, #104]	; (8003ac8 <USART1_IRQHandler+0xfc>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	2364      	movs	r3, #100	; 0x64
 8003a66:	fb02 f303 	mul.w	r3, r2, r3
 8003a6a:	4a19      	ldr	r2, [pc, #100]	; (8003ad0 <USART1_IRQHandler+0x104>)
 8003a6c:	4413      	add	r3, r2
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4814      	ldr	r0, [pc, #80]	; (8003ac4 <USART1_IRQHandler+0xf8>)
 8003a72:	f000 fff1 	bl	8004a58 <siprintf>
					posChar = 0;
 8003a76:	4b12      	ldr	r3, [pc, #72]	; (8003ac0 <USART1_IRQHandler+0xf4>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8003a7c:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <USART1_IRQHandler+0xfc>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	3301      	adds	r3, #1
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <USART1_IRQHandler+0xfc>)
 8003a86:	701a      	strb	r2, [r3, #0]
}
 8003a88:	e010      	b.n	8003aac <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8003a8a:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <USART1_IRQHandler+0xe4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2100      	movs	r1, #0
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff ff69 	bl	8003968 <interruptionTX>
					posChar = 0;
 8003a96:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <USART1_IRQHandler+0xf4>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <USART1_IRQHandler+0xfc>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8003aa2:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <USART1_IRQHandler+0x100>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	701a      	strb	r2, [r3, #0]
}
 8003aa8:	e000      	b.n	8003aac <USART1_IRQHandler+0xe0>
		__NOP();
 8003aaa:	bf00      	nop
}
 8003aac:	bf00      	nop
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20008e3c 	.word	0x20008e3c
 8003ab4:	20008e48 	.word	0x20008e48
 8003ab8:	20009683 	.word	0x20009683
 8003abc:	20008e49 	.word	0x20008e49
 8003ac0:	20009682 	.word	0x20009682
 8003ac4:	20008e4c 	.word	0x20008e4c
 8003ac8:	20009681 	.word	0x20009681
 8003acc:	20009680 	.word	0x20009680
 8003ad0:	20008eb0 	.word	0x20008eb0

08003ad4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 8003ad8:	4b37      	ldr	r3, [pc, #220]	; (8003bb8 <USART2_IRQHandler+0xe4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d008      	beq.n	8003af8 <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 8003ae6:	4b34      	ldr	r3, [pc, #208]	; (8003bb8 <USART2_IRQHandler+0xe4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	4b33      	ldr	r3, [pc, #204]	; (8003bbc <USART2_IRQHandler+0xe8>)
 8003af0:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 8003af2:	f7fe fd05 	bl	8002500 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 8003af6:	e05d      	b.n	8003bb4 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 8003af8:	4b2f      	ldr	r3, [pc, #188]	; (8003bb8 <USART2_IRQHandler+0xe4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d055      	beq.n	8003bb2 <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8003b06:	4b2e      	ldr	r3, [pc, #184]	; (8003bc0 <USART2_IRQHandler+0xec>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10b      	bne.n	8003b26 <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 8003b0e:	4b2d      	ldr	r3, [pc, #180]	; (8003bc4 <USART2_IRQHandler+0xf0>)
 8003b10:	781a      	ldrb	r2, [r3, #0]
 8003b12:	4b29      	ldr	r3, [pc, #164]	; (8003bb8 <USART2_IRQHandler+0xe4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8003b18:	4b27      	ldr	r3, [pc, #156]	; (8003bb8 <USART2_IRQHandler+0xe4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff ff22 	bl	8003968 <interruptionTX>
}
 8003b24:	e046      	b.n	8003bb4 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8003b26:	4b26      	ldr	r3, [pc, #152]	; (8003bc0 <USART2_IRQHandler+0xec>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d142      	bne.n	8003bb4 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8003b2e:	4b26      	ldr	r3, [pc, #152]	; (8003bc8 <USART2_IRQHandler+0xf4>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	4b25      	ldr	r3, [pc, #148]	; (8003bcc <USART2_IRQHandler+0xf8>)
 8003b36:	5c9b      	ldrb	r3, [r3, r2]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00e      	beq.n	8003b5a <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 8003b3c:	4b22      	ldr	r3, [pc, #136]	; (8003bc8 <USART2_IRQHandler+0xf4>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	4b22      	ldr	r3, [pc, #136]	; (8003bcc <USART2_IRQHandler+0xf8>)
 8003b44:	5c9a      	ldrb	r2, [r3, r2]
 8003b46:	4b1c      	ldr	r3, [pc, #112]	; (8003bb8 <USART2_IRQHandler+0xe4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	605a      	str	r2, [r3, #4]
				posChar++;
 8003b4c:	4b1e      	ldr	r3, [pc, #120]	; (8003bc8 <USART2_IRQHandler+0xf4>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	3301      	adds	r3, #1
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	4b1c      	ldr	r3, [pc, #112]	; (8003bc8 <USART2_IRQHandler+0xf4>)
 8003b56:	701a      	strb	r2, [r3, #0]
}
 8003b58:	e02c      	b.n	8003bb4 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8003b5a:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <USART2_IRQHandler+0xfc>)
 8003b5c:	781a      	ldrb	r2, [r3, #0]
 8003b5e:	4b1d      	ldr	r3, [pc, #116]	; (8003bd4 <USART2_IRQHandler+0x100>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d215      	bcs.n	8003b92 <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8003b66:	4b1a      	ldr	r3, [pc, #104]	; (8003bd0 <USART2_IRQHandler+0xfc>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	2364      	movs	r3, #100	; 0x64
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	4a19      	ldr	r2, [pc, #100]	; (8003bd8 <USART2_IRQHandler+0x104>)
 8003b74:	4413      	add	r3, r2
 8003b76:	4619      	mov	r1, r3
 8003b78:	4814      	ldr	r0, [pc, #80]	; (8003bcc <USART2_IRQHandler+0xf8>)
 8003b7a:	f000 ff6d 	bl	8004a58 <siprintf>
					posChar = 0;
 8003b7e:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <USART2_IRQHandler+0xf4>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8003b84:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <USART2_IRQHandler+0xfc>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <USART2_IRQHandler+0xfc>)
 8003b8e:	701a      	strb	r2, [r3, #0]
}
 8003b90:	e010      	b.n	8003bb4 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8003b92:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <USART2_IRQHandler+0xe4>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2100      	movs	r1, #0
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff fee5 	bl	8003968 <interruptionTX>
					posChar = 0;
 8003b9e:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <USART2_IRQHandler+0xf4>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8003ba4:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <USART2_IRQHandler+0xfc>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8003baa:	4b0a      	ldr	r3, [pc, #40]	; (8003bd4 <USART2_IRQHandler+0x100>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	701a      	strb	r2, [r3, #0]
}
 8003bb0:	e000      	b.n	8003bb4 <USART2_IRQHandler+0xe0>
		__NOP();
 8003bb2:	bf00      	nop
}
 8003bb4:	bf00      	nop
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20008e40 	.word	0x20008e40
 8003bbc:	20008e48 	.word	0x20008e48
 8003bc0:	20009683 	.word	0x20009683
 8003bc4:	20008e49 	.word	0x20008e49
 8003bc8:	20009682 	.word	0x20009682
 8003bcc:	20008e4c 	.word	0x20008e4c
 8003bd0:	20009681 	.word	0x20009681
 8003bd4:	20009680 	.word	0x20009680
 8003bd8:	20008eb0 	.word	0x20008eb0

08003bdc <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 8003be0:	4b37      	ldr	r3, [pc, #220]	; (8003cc0 <USART6_IRQHandler+0xe4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d008      	beq.n	8003c00 <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 8003bee:	4b34      	ldr	r3, [pc, #208]	; (8003cc0 <USART6_IRQHandler+0xe4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	4b33      	ldr	r3, [pc, #204]	; (8003cc4 <USART6_IRQHandler+0xe8>)
 8003bf8:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 8003bfa:	f7ff fedf 	bl	80039bc <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 8003bfe:	e05d      	b.n	8003cbc <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 8003c00:	4b2f      	ldr	r3, [pc, #188]	; (8003cc0 <USART6_IRQHandler+0xe4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d055      	beq.n	8003cba <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8003c0e:	4b2e      	ldr	r3, [pc, #184]	; (8003cc8 <USART6_IRQHandler+0xec>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10b      	bne.n	8003c2e <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 8003c16:	4b2d      	ldr	r3, [pc, #180]	; (8003ccc <USART6_IRQHandler+0xf0>)
 8003c18:	781a      	ldrb	r2, [r3, #0]
 8003c1a:	4b29      	ldr	r3, [pc, #164]	; (8003cc0 <USART6_IRQHandler+0xe4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8003c20:	4b27      	ldr	r3, [pc, #156]	; (8003cc0 <USART6_IRQHandler+0xe4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2100      	movs	r1, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff fe9e 	bl	8003968 <interruptionTX>
}
 8003c2c:	e046      	b.n	8003cbc <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8003c2e:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <USART6_IRQHandler+0xec>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d142      	bne.n	8003cbc <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8003c36:	4b26      	ldr	r3, [pc, #152]	; (8003cd0 <USART6_IRQHandler+0xf4>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	4b25      	ldr	r3, [pc, #148]	; (8003cd4 <USART6_IRQHandler+0xf8>)
 8003c3e:	5c9b      	ldrb	r3, [r3, r2]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00e      	beq.n	8003c62 <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 8003c44:	4b22      	ldr	r3, [pc, #136]	; (8003cd0 <USART6_IRQHandler+0xf4>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4b22      	ldr	r3, [pc, #136]	; (8003cd4 <USART6_IRQHandler+0xf8>)
 8003c4c:	5c9a      	ldrb	r2, [r3, r2]
 8003c4e:	4b1c      	ldr	r3, [pc, #112]	; (8003cc0 <USART6_IRQHandler+0xe4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	605a      	str	r2, [r3, #4]
				posChar++;
 8003c54:	4b1e      	ldr	r3, [pc, #120]	; (8003cd0 <USART6_IRQHandler+0xf4>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	4b1c      	ldr	r3, [pc, #112]	; (8003cd0 <USART6_IRQHandler+0xf4>)
 8003c5e:	701a      	strb	r2, [r3, #0]
}
 8003c60:	e02c      	b.n	8003cbc <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8003c62:	4b1d      	ldr	r3, [pc, #116]	; (8003cd8 <USART6_IRQHandler+0xfc>)
 8003c64:	781a      	ldrb	r2, [r3, #0]
 8003c66:	4b1d      	ldr	r3, [pc, #116]	; (8003cdc <USART6_IRQHandler+0x100>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d215      	bcs.n	8003c9a <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8003c6e:	4b1a      	ldr	r3, [pc, #104]	; (8003cd8 <USART6_IRQHandler+0xfc>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	2364      	movs	r3, #100	; 0x64
 8003c76:	fb02 f303 	mul.w	r3, r2, r3
 8003c7a:	4a19      	ldr	r2, [pc, #100]	; (8003ce0 <USART6_IRQHandler+0x104>)
 8003c7c:	4413      	add	r3, r2
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4814      	ldr	r0, [pc, #80]	; (8003cd4 <USART6_IRQHandler+0xf8>)
 8003c82:	f000 fee9 	bl	8004a58 <siprintf>
					posChar = 0;
 8003c86:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <USART6_IRQHandler+0xf4>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8003c8c:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <USART6_IRQHandler+0xfc>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	3301      	adds	r3, #1
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <USART6_IRQHandler+0xfc>)
 8003c96:	701a      	strb	r2, [r3, #0]
}
 8003c98:	e010      	b.n	8003cbc <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8003c9a:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <USART6_IRQHandler+0xe4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff fe61 	bl	8003968 <interruptionTX>
					posChar = 0;
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <USART6_IRQHandler+0xf4>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8003cac:	4b0a      	ldr	r3, [pc, #40]	; (8003cd8 <USART6_IRQHandler+0xfc>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <USART6_IRQHandler+0x100>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	701a      	strb	r2, [r3, #0]
}
 8003cb8:	e000      	b.n	8003cbc <USART6_IRQHandler+0xe0>
		__NOP();
 8003cba:	bf00      	nop
}
 8003cbc:	bf00      	nop
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20008e44 	.word	0x20008e44
 8003cc4:	20008e48 	.word	0x20008e48
 8003cc8:	20009683 	.word	0x20009683
 8003ccc:	20008e49 	.word	0x20008e49
 8003cd0:	20009682 	.word	0x20009682
 8003cd4:	20008e4c 	.word	0x20008e4c
 8003cd8:	20009681 	.word	0x20009681
 8003cdc:	20009680 	.word	0x20009680
 8003ce0:	20008eb0 	.word	0x20008eb0

08003ce4 <atof>:
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	f001 bd73 	b.w	80057d0 <strtod>

08003cea <atoi>:
 8003cea:	220a      	movs	r2, #10
 8003cec:	2100      	movs	r1, #0
 8003cee:	f001 bdff 	b.w	80058f0 <strtol>
	...

08003cf4 <__errno>:
 8003cf4:	4b01      	ldr	r3, [pc, #4]	; (8003cfc <__errno+0x8>)
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20000014 	.word	0x20000014

08003d00 <__libc_init_array>:
 8003d00:	b570      	push	{r4, r5, r6, lr}
 8003d02:	4d0d      	ldr	r5, [pc, #52]	; (8003d38 <__libc_init_array+0x38>)
 8003d04:	4c0d      	ldr	r4, [pc, #52]	; (8003d3c <__libc_init_array+0x3c>)
 8003d06:	1b64      	subs	r4, r4, r5
 8003d08:	10a4      	asrs	r4, r4, #2
 8003d0a:	2600      	movs	r6, #0
 8003d0c:	42a6      	cmp	r6, r4
 8003d0e:	d109      	bne.n	8003d24 <__libc_init_array+0x24>
 8003d10:	4d0b      	ldr	r5, [pc, #44]	; (8003d40 <__libc_init_array+0x40>)
 8003d12:	4c0c      	ldr	r4, [pc, #48]	; (8003d44 <__libc_init_array+0x44>)
 8003d14:	f005 fc96 	bl	8009644 <_init>
 8003d18:	1b64      	subs	r4, r4, r5
 8003d1a:	10a4      	asrs	r4, r4, #2
 8003d1c:	2600      	movs	r6, #0
 8003d1e:	42a6      	cmp	r6, r4
 8003d20:	d105      	bne.n	8003d2e <__libc_init_array+0x2e>
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
 8003d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d28:	4798      	blx	r3
 8003d2a:	3601      	adds	r6, #1
 8003d2c:	e7ee      	b.n	8003d0c <__libc_init_array+0xc>
 8003d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d32:	4798      	blx	r3
 8003d34:	3601      	adds	r6, #1
 8003d36:	e7f2      	b.n	8003d1e <__libc_init_array+0x1e>
 8003d38:	08009bb4 	.word	0x08009bb4
 8003d3c:	08009bb4 	.word	0x08009bb4
 8003d40:	08009bb4 	.word	0x08009bb4
 8003d44:	08009bb8 	.word	0x08009bb8

08003d48 <memset>:
 8003d48:	4402      	add	r2, r0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d100      	bne.n	8003d52 <memset+0xa>
 8003d50:	4770      	bx	lr
 8003d52:	f803 1b01 	strb.w	r1, [r3], #1
 8003d56:	e7f9      	b.n	8003d4c <memset+0x4>

08003d58 <__cvt>:
 8003d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d5c:	ec55 4b10 	vmov	r4, r5, d0
 8003d60:	2d00      	cmp	r5, #0
 8003d62:	460e      	mov	r6, r1
 8003d64:	4619      	mov	r1, r3
 8003d66:	462b      	mov	r3, r5
 8003d68:	bfbb      	ittet	lt
 8003d6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003d6e:	461d      	movlt	r5, r3
 8003d70:	2300      	movge	r3, #0
 8003d72:	232d      	movlt	r3, #45	; 0x2d
 8003d74:	700b      	strb	r3, [r1, #0]
 8003d76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003d7c:	4691      	mov	r9, r2
 8003d7e:	f023 0820 	bic.w	r8, r3, #32
 8003d82:	bfbc      	itt	lt
 8003d84:	4622      	movlt	r2, r4
 8003d86:	4614      	movlt	r4, r2
 8003d88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d8c:	d005      	beq.n	8003d9a <__cvt+0x42>
 8003d8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003d92:	d100      	bne.n	8003d96 <__cvt+0x3e>
 8003d94:	3601      	adds	r6, #1
 8003d96:	2102      	movs	r1, #2
 8003d98:	e000      	b.n	8003d9c <__cvt+0x44>
 8003d9a:	2103      	movs	r1, #3
 8003d9c:	ab03      	add	r3, sp, #12
 8003d9e:	9301      	str	r3, [sp, #4]
 8003da0:	ab02      	add	r3, sp, #8
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	ec45 4b10 	vmov	d0, r4, r5
 8003da8:	4653      	mov	r3, sl
 8003daa:	4632      	mov	r2, r6
 8003dac:	f001 fe58 	bl	8005a60 <_dtoa_r>
 8003db0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003db4:	4607      	mov	r7, r0
 8003db6:	d102      	bne.n	8003dbe <__cvt+0x66>
 8003db8:	f019 0f01 	tst.w	r9, #1
 8003dbc:	d022      	beq.n	8003e04 <__cvt+0xac>
 8003dbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003dc2:	eb07 0906 	add.w	r9, r7, r6
 8003dc6:	d110      	bne.n	8003dea <__cvt+0x92>
 8003dc8:	783b      	ldrb	r3, [r7, #0]
 8003dca:	2b30      	cmp	r3, #48	; 0x30
 8003dcc:	d10a      	bne.n	8003de4 <__cvt+0x8c>
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	4629      	mov	r1, r5
 8003dd6:	f7fc fe8f 	bl	8000af8 <__aeabi_dcmpeq>
 8003dda:	b918      	cbnz	r0, 8003de4 <__cvt+0x8c>
 8003ddc:	f1c6 0601 	rsb	r6, r6, #1
 8003de0:	f8ca 6000 	str.w	r6, [sl]
 8003de4:	f8da 3000 	ldr.w	r3, [sl]
 8003de8:	4499      	add	r9, r3
 8003dea:	2200      	movs	r2, #0
 8003dec:	2300      	movs	r3, #0
 8003dee:	4620      	mov	r0, r4
 8003df0:	4629      	mov	r1, r5
 8003df2:	f7fc fe81 	bl	8000af8 <__aeabi_dcmpeq>
 8003df6:	b108      	cbz	r0, 8003dfc <__cvt+0xa4>
 8003df8:	f8cd 900c 	str.w	r9, [sp, #12]
 8003dfc:	2230      	movs	r2, #48	; 0x30
 8003dfe:	9b03      	ldr	r3, [sp, #12]
 8003e00:	454b      	cmp	r3, r9
 8003e02:	d307      	bcc.n	8003e14 <__cvt+0xbc>
 8003e04:	9b03      	ldr	r3, [sp, #12]
 8003e06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e08:	1bdb      	subs	r3, r3, r7
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	b004      	add	sp, #16
 8003e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e14:	1c59      	adds	r1, r3, #1
 8003e16:	9103      	str	r1, [sp, #12]
 8003e18:	701a      	strb	r2, [r3, #0]
 8003e1a:	e7f0      	b.n	8003dfe <__cvt+0xa6>

08003e1c <__exponent>:
 8003e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2900      	cmp	r1, #0
 8003e22:	bfb8      	it	lt
 8003e24:	4249      	neglt	r1, r1
 8003e26:	f803 2b02 	strb.w	r2, [r3], #2
 8003e2a:	bfb4      	ite	lt
 8003e2c:	222d      	movlt	r2, #45	; 0x2d
 8003e2e:	222b      	movge	r2, #43	; 0x2b
 8003e30:	2909      	cmp	r1, #9
 8003e32:	7042      	strb	r2, [r0, #1]
 8003e34:	dd2a      	ble.n	8003e8c <__exponent+0x70>
 8003e36:	f10d 0407 	add.w	r4, sp, #7
 8003e3a:	46a4      	mov	ip, r4
 8003e3c:	270a      	movs	r7, #10
 8003e3e:	46a6      	mov	lr, r4
 8003e40:	460a      	mov	r2, r1
 8003e42:	fb91 f6f7 	sdiv	r6, r1, r7
 8003e46:	fb07 1516 	mls	r5, r7, r6, r1
 8003e4a:	3530      	adds	r5, #48	; 0x30
 8003e4c:	2a63      	cmp	r2, #99	; 0x63
 8003e4e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003e52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003e56:	4631      	mov	r1, r6
 8003e58:	dcf1      	bgt.n	8003e3e <__exponent+0x22>
 8003e5a:	3130      	adds	r1, #48	; 0x30
 8003e5c:	f1ae 0502 	sub.w	r5, lr, #2
 8003e60:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003e64:	1c44      	adds	r4, r0, #1
 8003e66:	4629      	mov	r1, r5
 8003e68:	4561      	cmp	r1, ip
 8003e6a:	d30a      	bcc.n	8003e82 <__exponent+0x66>
 8003e6c:	f10d 0209 	add.w	r2, sp, #9
 8003e70:	eba2 020e 	sub.w	r2, r2, lr
 8003e74:	4565      	cmp	r5, ip
 8003e76:	bf88      	it	hi
 8003e78:	2200      	movhi	r2, #0
 8003e7a:	4413      	add	r3, r2
 8003e7c:	1a18      	subs	r0, r3, r0
 8003e7e:	b003      	add	sp, #12
 8003e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e86:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003e8a:	e7ed      	b.n	8003e68 <__exponent+0x4c>
 8003e8c:	2330      	movs	r3, #48	; 0x30
 8003e8e:	3130      	adds	r1, #48	; 0x30
 8003e90:	7083      	strb	r3, [r0, #2]
 8003e92:	70c1      	strb	r1, [r0, #3]
 8003e94:	1d03      	adds	r3, r0, #4
 8003e96:	e7f1      	b.n	8003e7c <__exponent+0x60>

08003e98 <_printf_float>:
 8003e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e9c:	ed2d 8b02 	vpush	{d8}
 8003ea0:	b08d      	sub	sp, #52	; 0x34
 8003ea2:	460c      	mov	r4, r1
 8003ea4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003ea8:	4616      	mov	r6, r2
 8003eaa:	461f      	mov	r7, r3
 8003eac:	4605      	mov	r5, r0
 8003eae:	f002 ff35 	bl	8006d1c <_localeconv_r>
 8003eb2:	f8d0 a000 	ldr.w	sl, [r0]
 8003eb6:	4650      	mov	r0, sl
 8003eb8:	f7fc f99c 	bl	80001f4 <strlen>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	9305      	str	r3, [sp, #20]
 8003ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ec8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003ecc:	3307      	adds	r3, #7
 8003ece:	f023 0307 	bic.w	r3, r3, #7
 8003ed2:	f103 0208 	add.w	r2, r3, #8
 8003ed6:	f8c8 2000 	str.w	r2, [r8]
 8003eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ede:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ee2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003ee6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003eea:	9307      	str	r3, [sp, #28]
 8003eec:	f8cd 8018 	str.w	r8, [sp, #24]
 8003ef0:	ee08 0a10 	vmov	s16, r0
 8003ef4:	4b9f      	ldr	r3, [pc, #636]	; (8004174 <_printf_float+0x2dc>)
 8003ef6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003efa:	f04f 32ff 	mov.w	r2, #4294967295
 8003efe:	f7fc fe2d 	bl	8000b5c <__aeabi_dcmpun>
 8003f02:	bb88      	cbnz	r0, 8003f68 <_printf_float+0xd0>
 8003f04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f08:	4b9a      	ldr	r3, [pc, #616]	; (8004174 <_printf_float+0x2dc>)
 8003f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f0e:	f7fc fe07 	bl	8000b20 <__aeabi_dcmple>
 8003f12:	bb48      	cbnz	r0, 8003f68 <_printf_float+0xd0>
 8003f14:	2200      	movs	r2, #0
 8003f16:	2300      	movs	r3, #0
 8003f18:	4640      	mov	r0, r8
 8003f1a:	4649      	mov	r1, r9
 8003f1c:	f7fc fdf6 	bl	8000b0c <__aeabi_dcmplt>
 8003f20:	b110      	cbz	r0, 8003f28 <_printf_float+0x90>
 8003f22:	232d      	movs	r3, #45	; 0x2d
 8003f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f28:	4b93      	ldr	r3, [pc, #588]	; (8004178 <_printf_float+0x2e0>)
 8003f2a:	4894      	ldr	r0, [pc, #592]	; (800417c <_printf_float+0x2e4>)
 8003f2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003f30:	bf94      	ite	ls
 8003f32:	4698      	movls	r8, r3
 8003f34:	4680      	movhi	r8, r0
 8003f36:	2303      	movs	r3, #3
 8003f38:	6123      	str	r3, [r4, #16]
 8003f3a:	9b05      	ldr	r3, [sp, #20]
 8003f3c:	f023 0204 	bic.w	r2, r3, #4
 8003f40:	6022      	str	r2, [r4, #0]
 8003f42:	f04f 0900 	mov.w	r9, #0
 8003f46:	9700      	str	r7, [sp, #0]
 8003f48:	4633      	mov	r3, r6
 8003f4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8003f4c:	4621      	mov	r1, r4
 8003f4e:	4628      	mov	r0, r5
 8003f50:	f000 f9d8 	bl	8004304 <_printf_common>
 8003f54:	3001      	adds	r0, #1
 8003f56:	f040 8090 	bne.w	800407a <_printf_float+0x1e2>
 8003f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f5e:	b00d      	add	sp, #52	; 0x34
 8003f60:	ecbd 8b02 	vpop	{d8}
 8003f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f68:	4642      	mov	r2, r8
 8003f6a:	464b      	mov	r3, r9
 8003f6c:	4640      	mov	r0, r8
 8003f6e:	4649      	mov	r1, r9
 8003f70:	f7fc fdf4 	bl	8000b5c <__aeabi_dcmpun>
 8003f74:	b140      	cbz	r0, 8003f88 <_printf_float+0xf0>
 8003f76:	464b      	mov	r3, r9
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	bfbc      	itt	lt
 8003f7c:	232d      	movlt	r3, #45	; 0x2d
 8003f7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003f82:	487f      	ldr	r0, [pc, #508]	; (8004180 <_printf_float+0x2e8>)
 8003f84:	4b7f      	ldr	r3, [pc, #508]	; (8004184 <_printf_float+0x2ec>)
 8003f86:	e7d1      	b.n	8003f2c <_printf_float+0x94>
 8003f88:	6863      	ldr	r3, [r4, #4]
 8003f8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003f8e:	9206      	str	r2, [sp, #24]
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	d13f      	bne.n	8004014 <_printf_float+0x17c>
 8003f94:	2306      	movs	r3, #6
 8003f96:	6063      	str	r3, [r4, #4]
 8003f98:	9b05      	ldr	r3, [sp, #20]
 8003f9a:	6861      	ldr	r1, [r4, #4]
 8003f9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	9303      	str	r3, [sp, #12]
 8003fa4:	ab0a      	add	r3, sp, #40	; 0x28
 8003fa6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003faa:	ab09      	add	r3, sp, #36	; 0x24
 8003fac:	ec49 8b10 	vmov	d0, r8, r9
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	6022      	str	r2, [r4, #0]
 8003fb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003fb8:	4628      	mov	r0, r5
 8003fba:	f7ff fecd 	bl	8003d58 <__cvt>
 8003fbe:	9b06      	ldr	r3, [sp, #24]
 8003fc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fc2:	2b47      	cmp	r3, #71	; 0x47
 8003fc4:	4680      	mov	r8, r0
 8003fc6:	d108      	bne.n	8003fda <_printf_float+0x142>
 8003fc8:	1cc8      	adds	r0, r1, #3
 8003fca:	db02      	blt.n	8003fd2 <_printf_float+0x13a>
 8003fcc:	6863      	ldr	r3, [r4, #4]
 8003fce:	4299      	cmp	r1, r3
 8003fd0:	dd41      	ble.n	8004056 <_printf_float+0x1be>
 8003fd2:	f1ab 0b02 	sub.w	fp, fp, #2
 8003fd6:	fa5f fb8b 	uxtb.w	fp, fp
 8003fda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003fde:	d820      	bhi.n	8004022 <_printf_float+0x18a>
 8003fe0:	3901      	subs	r1, #1
 8003fe2:	465a      	mov	r2, fp
 8003fe4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003fe8:	9109      	str	r1, [sp, #36]	; 0x24
 8003fea:	f7ff ff17 	bl	8003e1c <__exponent>
 8003fee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ff0:	1813      	adds	r3, r2, r0
 8003ff2:	2a01      	cmp	r2, #1
 8003ff4:	4681      	mov	r9, r0
 8003ff6:	6123      	str	r3, [r4, #16]
 8003ff8:	dc02      	bgt.n	8004000 <_printf_float+0x168>
 8003ffa:	6822      	ldr	r2, [r4, #0]
 8003ffc:	07d2      	lsls	r2, r2, #31
 8003ffe:	d501      	bpl.n	8004004 <_printf_float+0x16c>
 8004000:	3301      	adds	r3, #1
 8004002:	6123      	str	r3, [r4, #16]
 8004004:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004008:	2b00      	cmp	r3, #0
 800400a:	d09c      	beq.n	8003f46 <_printf_float+0xae>
 800400c:	232d      	movs	r3, #45	; 0x2d
 800400e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004012:	e798      	b.n	8003f46 <_printf_float+0xae>
 8004014:	9a06      	ldr	r2, [sp, #24]
 8004016:	2a47      	cmp	r2, #71	; 0x47
 8004018:	d1be      	bne.n	8003f98 <_printf_float+0x100>
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1bc      	bne.n	8003f98 <_printf_float+0x100>
 800401e:	2301      	movs	r3, #1
 8004020:	e7b9      	b.n	8003f96 <_printf_float+0xfe>
 8004022:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004026:	d118      	bne.n	800405a <_printf_float+0x1c2>
 8004028:	2900      	cmp	r1, #0
 800402a:	6863      	ldr	r3, [r4, #4]
 800402c:	dd0b      	ble.n	8004046 <_printf_float+0x1ae>
 800402e:	6121      	str	r1, [r4, #16]
 8004030:	b913      	cbnz	r3, 8004038 <_printf_float+0x1a0>
 8004032:	6822      	ldr	r2, [r4, #0]
 8004034:	07d0      	lsls	r0, r2, #31
 8004036:	d502      	bpl.n	800403e <_printf_float+0x1a6>
 8004038:	3301      	adds	r3, #1
 800403a:	440b      	add	r3, r1
 800403c:	6123      	str	r3, [r4, #16]
 800403e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004040:	f04f 0900 	mov.w	r9, #0
 8004044:	e7de      	b.n	8004004 <_printf_float+0x16c>
 8004046:	b913      	cbnz	r3, 800404e <_printf_float+0x1b6>
 8004048:	6822      	ldr	r2, [r4, #0]
 800404a:	07d2      	lsls	r2, r2, #31
 800404c:	d501      	bpl.n	8004052 <_printf_float+0x1ba>
 800404e:	3302      	adds	r3, #2
 8004050:	e7f4      	b.n	800403c <_printf_float+0x1a4>
 8004052:	2301      	movs	r3, #1
 8004054:	e7f2      	b.n	800403c <_printf_float+0x1a4>
 8004056:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800405a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800405c:	4299      	cmp	r1, r3
 800405e:	db05      	blt.n	800406c <_printf_float+0x1d4>
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	6121      	str	r1, [r4, #16]
 8004064:	07d8      	lsls	r0, r3, #31
 8004066:	d5ea      	bpl.n	800403e <_printf_float+0x1a6>
 8004068:	1c4b      	adds	r3, r1, #1
 800406a:	e7e7      	b.n	800403c <_printf_float+0x1a4>
 800406c:	2900      	cmp	r1, #0
 800406e:	bfd4      	ite	le
 8004070:	f1c1 0202 	rsble	r2, r1, #2
 8004074:	2201      	movgt	r2, #1
 8004076:	4413      	add	r3, r2
 8004078:	e7e0      	b.n	800403c <_printf_float+0x1a4>
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	055a      	lsls	r2, r3, #21
 800407e:	d407      	bmi.n	8004090 <_printf_float+0x1f8>
 8004080:	6923      	ldr	r3, [r4, #16]
 8004082:	4642      	mov	r2, r8
 8004084:	4631      	mov	r1, r6
 8004086:	4628      	mov	r0, r5
 8004088:	47b8      	blx	r7
 800408a:	3001      	adds	r0, #1
 800408c:	d12c      	bne.n	80040e8 <_printf_float+0x250>
 800408e:	e764      	b.n	8003f5a <_printf_float+0xc2>
 8004090:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004094:	f240 80e0 	bls.w	8004258 <_printf_float+0x3c0>
 8004098:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800409c:	2200      	movs	r2, #0
 800409e:	2300      	movs	r3, #0
 80040a0:	f7fc fd2a 	bl	8000af8 <__aeabi_dcmpeq>
 80040a4:	2800      	cmp	r0, #0
 80040a6:	d034      	beq.n	8004112 <_printf_float+0x27a>
 80040a8:	4a37      	ldr	r2, [pc, #220]	; (8004188 <_printf_float+0x2f0>)
 80040aa:	2301      	movs	r3, #1
 80040ac:	4631      	mov	r1, r6
 80040ae:	4628      	mov	r0, r5
 80040b0:	47b8      	blx	r7
 80040b2:	3001      	adds	r0, #1
 80040b4:	f43f af51 	beq.w	8003f5a <_printf_float+0xc2>
 80040b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040bc:	429a      	cmp	r2, r3
 80040be:	db02      	blt.n	80040c6 <_printf_float+0x22e>
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	07d8      	lsls	r0, r3, #31
 80040c4:	d510      	bpl.n	80040e8 <_printf_float+0x250>
 80040c6:	ee18 3a10 	vmov	r3, s16
 80040ca:	4652      	mov	r2, sl
 80040cc:	4631      	mov	r1, r6
 80040ce:	4628      	mov	r0, r5
 80040d0:	47b8      	blx	r7
 80040d2:	3001      	adds	r0, #1
 80040d4:	f43f af41 	beq.w	8003f5a <_printf_float+0xc2>
 80040d8:	f04f 0800 	mov.w	r8, #0
 80040dc:	f104 091a 	add.w	r9, r4, #26
 80040e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040e2:	3b01      	subs	r3, #1
 80040e4:	4543      	cmp	r3, r8
 80040e6:	dc09      	bgt.n	80040fc <_printf_float+0x264>
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	079b      	lsls	r3, r3, #30
 80040ec:	f100 8105 	bmi.w	80042fa <_printf_float+0x462>
 80040f0:	68e0      	ldr	r0, [r4, #12]
 80040f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040f4:	4298      	cmp	r0, r3
 80040f6:	bfb8      	it	lt
 80040f8:	4618      	movlt	r0, r3
 80040fa:	e730      	b.n	8003f5e <_printf_float+0xc6>
 80040fc:	2301      	movs	r3, #1
 80040fe:	464a      	mov	r2, r9
 8004100:	4631      	mov	r1, r6
 8004102:	4628      	mov	r0, r5
 8004104:	47b8      	blx	r7
 8004106:	3001      	adds	r0, #1
 8004108:	f43f af27 	beq.w	8003f5a <_printf_float+0xc2>
 800410c:	f108 0801 	add.w	r8, r8, #1
 8004110:	e7e6      	b.n	80040e0 <_printf_float+0x248>
 8004112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004114:	2b00      	cmp	r3, #0
 8004116:	dc39      	bgt.n	800418c <_printf_float+0x2f4>
 8004118:	4a1b      	ldr	r2, [pc, #108]	; (8004188 <_printf_float+0x2f0>)
 800411a:	2301      	movs	r3, #1
 800411c:	4631      	mov	r1, r6
 800411e:	4628      	mov	r0, r5
 8004120:	47b8      	blx	r7
 8004122:	3001      	adds	r0, #1
 8004124:	f43f af19 	beq.w	8003f5a <_printf_float+0xc2>
 8004128:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800412c:	4313      	orrs	r3, r2
 800412e:	d102      	bne.n	8004136 <_printf_float+0x29e>
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	07d9      	lsls	r1, r3, #31
 8004134:	d5d8      	bpl.n	80040e8 <_printf_float+0x250>
 8004136:	ee18 3a10 	vmov	r3, s16
 800413a:	4652      	mov	r2, sl
 800413c:	4631      	mov	r1, r6
 800413e:	4628      	mov	r0, r5
 8004140:	47b8      	blx	r7
 8004142:	3001      	adds	r0, #1
 8004144:	f43f af09 	beq.w	8003f5a <_printf_float+0xc2>
 8004148:	f04f 0900 	mov.w	r9, #0
 800414c:	f104 0a1a 	add.w	sl, r4, #26
 8004150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004152:	425b      	negs	r3, r3
 8004154:	454b      	cmp	r3, r9
 8004156:	dc01      	bgt.n	800415c <_printf_float+0x2c4>
 8004158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800415a:	e792      	b.n	8004082 <_printf_float+0x1ea>
 800415c:	2301      	movs	r3, #1
 800415e:	4652      	mov	r2, sl
 8004160:	4631      	mov	r1, r6
 8004162:	4628      	mov	r0, r5
 8004164:	47b8      	blx	r7
 8004166:	3001      	adds	r0, #1
 8004168:	f43f aef7 	beq.w	8003f5a <_printf_float+0xc2>
 800416c:	f109 0901 	add.w	r9, r9, #1
 8004170:	e7ee      	b.n	8004150 <_printf_float+0x2b8>
 8004172:	bf00      	nop
 8004174:	7fefffff 	.word	0x7fefffff
 8004178:	080096f4 	.word	0x080096f4
 800417c:	080096f8 	.word	0x080096f8
 8004180:	08009700 	.word	0x08009700
 8004184:	080096fc 	.word	0x080096fc
 8004188:	08009af9 	.word	0x08009af9
 800418c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800418e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004190:	429a      	cmp	r2, r3
 8004192:	bfa8      	it	ge
 8004194:	461a      	movge	r2, r3
 8004196:	2a00      	cmp	r2, #0
 8004198:	4691      	mov	r9, r2
 800419a:	dc37      	bgt.n	800420c <_printf_float+0x374>
 800419c:	f04f 0b00 	mov.w	fp, #0
 80041a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041a4:	f104 021a 	add.w	r2, r4, #26
 80041a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041aa:	9305      	str	r3, [sp, #20]
 80041ac:	eba3 0309 	sub.w	r3, r3, r9
 80041b0:	455b      	cmp	r3, fp
 80041b2:	dc33      	bgt.n	800421c <_printf_float+0x384>
 80041b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041b8:	429a      	cmp	r2, r3
 80041ba:	db3b      	blt.n	8004234 <_printf_float+0x39c>
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	07da      	lsls	r2, r3, #31
 80041c0:	d438      	bmi.n	8004234 <_printf_float+0x39c>
 80041c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041c4:	9a05      	ldr	r2, [sp, #20]
 80041c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80041c8:	1a9a      	subs	r2, r3, r2
 80041ca:	eba3 0901 	sub.w	r9, r3, r1
 80041ce:	4591      	cmp	r9, r2
 80041d0:	bfa8      	it	ge
 80041d2:	4691      	movge	r9, r2
 80041d4:	f1b9 0f00 	cmp.w	r9, #0
 80041d8:	dc35      	bgt.n	8004246 <_printf_float+0x3ae>
 80041da:	f04f 0800 	mov.w	r8, #0
 80041de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041e2:	f104 0a1a 	add.w	sl, r4, #26
 80041e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	eba3 0309 	sub.w	r3, r3, r9
 80041f0:	4543      	cmp	r3, r8
 80041f2:	f77f af79 	ble.w	80040e8 <_printf_float+0x250>
 80041f6:	2301      	movs	r3, #1
 80041f8:	4652      	mov	r2, sl
 80041fa:	4631      	mov	r1, r6
 80041fc:	4628      	mov	r0, r5
 80041fe:	47b8      	blx	r7
 8004200:	3001      	adds	r0, #1
 8004202:	f43f aeaa 	beq.w	8003f5a <_printf_float+0xc2>
 8004206:	f108 0801 	add.w	r8, r8, #1
 800420a:	e7ec      	b.n	80041e6 <_printf_float+0x34e>
 800420c:	4613      	mov	r3, r2
 800420e:	4631      	mov	r1, r6
 8004210:	4642      	mov	r2, r8
 8004212:	4628      	mov	r0, r5
 8004214:	47b8      	blx	r7
 8004216:	3001      	adds	r0, #1
 8004218:	d1c0      	bne.n	800419c <_printf_float+0x304>
 800421a:	e69e      	b.n	8003f5a <_printf_float+0xc2>
 800421c:	2301      	movs	r3, #1
 800421e:	4631      	mov	r1, r6
 8004220:	4628      	mov	r0, r5
 8004222:	9205      	str	r2, [sp, #20]
 8004224:	47b8      	blx	r7
 8004226:	3001      	adds	r0, #1
 8004228:	f43f ae97 	beq.w	8003f5a <_printf_float+0xc2>
 800422c:	9a05      	ldr	r2, [sp, #20]
 800422e:	f10b 0b01 	add.w	fp, fp, #1
 8004232:	e7b9      	b.n	80041a8 <_printf_float+0x310>
 8004234:	ee18 3a10 	vmov	r3, s16
 8004238:	4652      	mov	r2, sl
 800423a:	4631      	mov	r1, r6
 800423c:	4628      	mov	r0, r5
 800423e:	47b8      	blx	r7
 8004240:	3001      	adds	r0, #1
 8004242:	d1be      	bne.n	80041c2 <_printf_float+0x32a>
 8004244:	e689      	b.n	8003f5a <_printf_float+0xc2>
 8004246:	9a05      	ldr	r2, [sp, #20]
 8004248:	464b      	mov	r3, r9
 800424a:	4442      	add	r2, r8
 800424c:	4631      	mov	r1, r6
 800424e:	4628      	mov	r0, r5
 8004250:	47b8      	blx	r7
 8004252:	3001      	adds	r0, #1
 8004254:	d1c1      	bne.n	80041da <_printf_float+0x342>
 8004256:	e680      	b.n	8003f5a <_printf_float+0xc2>
 8004258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800425a:	2a01      	cmp	r2, #1
 800425c:	dc01      	bgt.n	8004262 <_printf_float+0x3ca>
 800425e:	07db      	lsls	r3, r3, #31
 8004260:	d538      	bpl.n	80042d4 <_printf_float+0x43c>
 8004262:	2301      	movs	r3, #1
 8004264:	4642      	mov	r2, r8
 8004266:	4631      	mov	r1, r6
 8004268:	4628      	mov	r0, r5
 800426a:	47b8      	blx	r7
 800426c:	3001      	adds	r0, #1
 800426e:	f43f ae74 	beq.w	8003f5a <_printf_float+0xc2>
 8004272:	ee18 3a10 	vmov	r3, s16
 8004276:	4652      	mov	r2, sl
 8004278:	4631      	mov	r1, r6
 800427a:	4628      	mov	r0, r5
 800427c:	47b8      	blx	r7
 800427e:	3001      	adds	r0, #1
 8004280:	f43f ae6b 	beq.w	8003f5a <_printf_float+0xc2>
 8004284:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004288:	2200      	movs	r2, #0
 800428a:	2300      	movs	r3, #0
 800428c:	f7fc fc34 	bl	8000af8 <__aeabi_dcmpeq>
 8004290:	b9d8      	cbnz	r0, 80042ca <_printf_float+0x432>
 8004292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004294:	f108 0201 	add.w	r2, r8, #1
 8004298:	3b01      	subs	r3, #1
 800429a:	4631      	mov	r1, r6
 800429c:	4628      	mov	r0, r5
 800429e:	47b8      	blx	r7
 80042a0:	3001      	adds	r0, #1
 80042a2:	d10e      	bne.n	80042c2 <_printf_float+0x42a>
 80042a4:	e659      	b.n	8003f5a <_printf_float+0xc2>
 80042a6:	2301      	movs	r3, #1
 80042a8:	4652      	mov	r2, sl
 80042aa:	4631      	mov	r1, r6
 80042ac:	4628      	mov	r0, r5
 80042ae:	47b8      	blx	r7
 80042b0:	3001      	adds	r0, #1
 80042b2:	f43f ae52 	beq.w	8003f5a <_printf_float+0xc2>
 80042b6:	f108 0801 	add.w	r8, r8, #1
 80042ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042bc:	3b01      	subs	r3, #1
 80042be:	4543      	cmp	r3, r8
 80042c0:	dcf1      	bgt.n	80042a6 <_printf_float+0x40e>
 80042c2:	464b      	mov	r3, r9
 80042c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80042c8:	e6dc      	b.n	8004084 <_printf_float+0x1ec>
 80042ca:	f04f 0800 	mov.w	r8, #0
 80042ce:	f104 0a1a 	add.w	sl, r4, #26
 80042d2:	e7f2      	b.n	80042ba <_printf_float+0x422>
 80042d4:	2301      	movs	r3, #1
 80042d6:	4642      	mov	r2, r8
 80042d8:	e7df      	b.n	800429a <_printf_float+0x402>
 80042da:	2301      	movs	r3, #1
 80042dc:	464a      	mov	r2, r9
 80042de:	4631      	mov	r1, r6
 80042e0:	4628      	mov	r0, r5
 80042e2:	47b8      	blx	r7
 80042e4:	3001      	adds	r0, #1
 80042e6:	f43f ae38 	beq.w	8003f5a <_printf_float+0xc2>
 80042ea:	f108 0801 	add.w	r8, r8, #1
 80042ee:	68e3      	ldr	r3, [r4, #12]
 80042f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042f2:	1a5b      	subs	r3, r3, r1
 80042f4:	4543      	cmp	r3, r8
 80042f6:	dcf0      	bgt.n	80042da <_printf_float+0x442>
 80042f8:	e6fa      	b.n	80040f0 <_printf_float+0x258>
 80042fa:	f04f 0800 	mov.w	r8, #0
 80042fe:	f104 0919 	add.w	r9, r4, #25
 8004302:	e7f4      	b.n	80042ee <_printf_float+0x456>

08004304 <_printf_common>:
 8004304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004308:	4616      	mov	r6, r2
 800430a:	4699      	mov	r9, r3
 800430c:	688a      	ldr	r2, [r1, #8]
 800430e:	690b      	ldr	r3, [r1, #16]
 8004310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004314:	4293      	cmp	r3, r2
 8004316:	bfb8      	it	lt
 8004318:	4613      	movlt	r3, r2
 800431a:	6033      	str	r3, [r6, #0]
 800431c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004320:	4607      	mov	r7, r0
 8004322:	460c      	mov	r4, r1
 8004324:	b10a      	cbz	r2, 800432a <_printf_common+0x26>
 8004326:	3301      	adds	r3, #1
 8004328:	6033      	str	r3, [r6, #0]
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	0699      	lsls	r1, r3, #26
 800432e:	bf42      	ittt	mi
 8004330:	6833      	ldrmi	r3, [r6, #0]
 8004332:	3302      	addmi	r3, #2
 8004334:	6033      	strmi	r3, [r6, #0]
 8004336:	6825      	ldr	r5, [r4, #0]
 8004338:	f015 0506 	ands.w	r5, r5, #6
 800433c:	d106      	bne.n	800434c <_printf_common+0x48>
 800433e:	f104 0a19 	add.w	sl, r4, #25
 8004342:	68e3      	ldr	r3, [r4, #12]
 8004344:	6832      	ldr	r2, [r6, #0]
 8004346:	1a9b      	subs	r3, r3, r2
 8004348:	42ab      	cmp	r3, r5
 800434a:	dc26      	bgt.n	800439a <_printf_common+0x96>
 800434c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004350:	1e13      	subs	r3, r2, #0
 8004352:	6822      	ldr	r2, [r4, #0]
 8004354:	bf18      	it	ne
 8004356:	2301      	movne	r3, #1
 8004358:	0692      	lsls	r2, r2, #26
 800435a:	d42b      	bmi.n	80043b4 <_printf_common+0xb0>
 800435c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004360:	4649      	mov	r1, r9
 8004362:	4638      	mov	r0, r7
 8004364:	47c0      	blx	r8
 8004366:	3001      	adds	r0, #1
 8004368:	d01e      	beq.n	80043a8 <_printf_common+0xa4>
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	68e5      	ldr	r5, [r4, #12]
 800436e:	6832      	ldr	r2, [r6, #0]
 8004370:	f003 0306 	and.w	r3, r3, #6
 8004374:	2b04      	cmp	r3, #4
 8004376:	bf08      	it	eq
 8004378:	1aad      	subeq	r5, r5, r2
 800437a:	68a3      	ldr	r3, [r4, #8]
 800437c:	6922      	ldr	r2, [r4, #16]
 800437e:	bf0c      	ite	eq
 8004380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004384:	2500      	movne	r5, #0
 8004386:	4293      	cmp	r3, r2
 8004388:	bfc4      	itt	gt
 800438a:	1a9b      	subgt	r3, r3, r2
 800438c:	18ed      	addgt	r5, r5, r3
 800438e:	2600      	movs	r6, #0
 8004390:	341a      	adds	r4, #26
 8004392:	42b5      	cmp	r5, r6
 8004394:	d11a      	bne.n	80043cc <_printf_common+0xc8>
 8004396:	2000      	movs	r0, #0
 8004398:	e008      	b.n	80043ac <_printf_common+0xa8>
 800439a:	2301      	movs	r3, #1
 800439c:	4652      	mov	r2, sl
 800439e:	4649      	mov	r1, r9
 80043a0:	4638      	mov	r0, r7
 80043a2:	47c0      	blx	r8
 80043a4:	3001      	adds	r0, #1
 80043a6:	d103      	bne.n	80043b0 <_printf_common+0xac>
 80043a8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b0:	3501      	adds	r5, #1
 80043b2:	e7c6      	b.n	8004342 <_printf_common+0x3e>
 80043b4:	18e1      	adds	r1, r4, r3
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	2030      	movs	r0, #48	; 0x30
 80043ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043be:	4422      	add	r2, r4
 80043c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043c8:	3302      	adds	r3, #2
 80043ca:	e7c7      	b.n	800435c <_printf_common+0x58>
 80043cc:	2301      	movs	r3, #1
 80043ce:	4622      	mov	r2, r4
 80043d0:	4649      	mov	r1, r9
 80043d2:	4638      	mov	r0, r7
 80043d4:	47c0      	blx	r8
 80043d6:	3001      	adds	r0, #1
 80043d8:	d0e6      	beq.n	80043a8 <_printf_common+0xa4>
 80043da:	3601      	adds	r6, #1
 80043dc:	e7d9      	b.n	8004392 <_printf_common+0x8e>
	...

080043e0 <_printf_i>:
 80043e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043e4:	7e0f      	ldrb	r7, [r1, #24]
 80043e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043e8:	2f78      	cmp	r7, #120	; 0x78
 80043ea:	4691      	mov	r9, r2
 80043ec:	4680      	mov	r8, r0
 80043ee:	460c      	mov	r4, r1
 80043f0:	469a      	mov	sl, r3
 80043f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043f6:	d807      	bhi.n	8004408 <_printf_i+0x28>
 80043f8:	2f62      	cmp	r7, #98	; 0x62
 80043fa:	d80a      	bhi.n	8004412 <_printf_i+0x32>
 80043fc:	2f00      	cmp	r7, #0
 80043fe:	f000 80d8 	beq.w	80045b2 <_printf_i+0x1d2>
 8004402:	2f58      	cmp	r7, #88	; 0x58
 8004404:	f000 80a3 	beq.w	800454e <_printf_i+0x16e>
 8004408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800440c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004410:	e03a      	b.n	8004488 <_printf_i+0xa8>
 8004412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004416:	2b15      	cmp	r3, #21
 8004418:	d8f6      	bhi.n	8004408 <_printf_i+0x28>
 800441a:	a101      	add	r1, pc, #4	; (adr r1, 8004420 <_printf_i+0x40>)
 800441c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004420:	08004479 	.word	0x08004479
 8004424:	0800448d 	.word	0x0800448d
 8004428:	08004409 	.word	0x08004409
 800442c:	08004409 	.word	0x08004409
 8004430:	08004409 	.word	0x08004409
 8004434:	08004409 	.word	0x08004409
 8004438:	0800448d 	.word	0x0800448d
 800443c:	08004409 	.word	0x08004409
 8004440:	08004409 	.word	0x08004409
 8004444:	08004409 	.word	0x08004409
 8004448:	08004409 	.word	0x08004409
 800444c:	08004599 	.word	0x08004599
 8004450:	080044bd 	.word	0x080044bd
 8004454:	0800457b 	.word	0x0800457b
 8004458:	08004409 	.word	0x08004409
 800445c:	08004409 	.word	0x08004409
 8004460:	080045bb 	.word	0x080045bb
 8004464:	08004409 	.word	0x08004409
 8004468:	080044bd 	.word	0x080044bd
 800446c:	08004409 	.word	0x08004409
 8004470:	08004409 	.word	0x08004409
 8004474:	08004583 	.word	0x08004583
 8004478:	682b      	ldr	r3, [r5, #0]
 800447a:	1d1a      	adds	r2, r3, #4
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	602a      	str	r2, [r5, #0]
 8004480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004488:	2301      	movs	r3, #1
 800448a:	e0a3      	b.n	80045d4 <_printf_i+0x1f4>
 800448c:	6820      	ldr	r0, [r4, #0]
 800448e:	6829      	ldr	r1, [r5, #0]
 8004490:	0606      	lsls	r6, r0, #24
 8004492:	f101 0304 	add.w	r3, r1, #4
 8004496:	d50a      	bpl.n	80044ae <_printf_i+0xce>
 8004498:	680e      	ldr	r6, [r1, #0]
 800449a:	602b      	str	r3, [r5, #0]
 800449c:	2e00      	cmp	r6, #0
 800449e:	da03      	bge.n	80044a8 <_printf_i+0xc8>
 80044a0:	232d      	movs	r3, #45	; 0x2d
 80044a2:	4276      	negs	r6, r6
 80044a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044a8:	485e      	ldr	r0, [pc, #376]	; (8004624 <_printf_i+0x244>)
 80044aa:	230a      	movs	r3, #10
 80044ac:	e019      	b.n	80044e2 <_printf_i+0x102>
 80044ae:	680e      	ldr	r6, [r1, #0]
 80044b0:	602b      	str	r3, [r5, #0]
 80044b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044b6:	bf18      	it	ne
 80044b8:	b236      	sxthne	r6, r6
 80044ba:	e7ef      	b.n	800449c <_printf_i+0xbc>
 80044bc:	682b      	ldr	r3, [r5, #0]
 80044be:	6820      	ldr	r0, [r4, #0]
 80044c0:	1d19      	adds	r1, r3, #4
 80044c2:	6029      	str	r1, [r5, #0]
 80044c4:	0601      	lsls	r1, r0, #24
 80044c6:	d501      	bpl.n	80044cc <_printf_i+0xec>
 80044c8:	681e      	ldr	r6, [r3, #0]
 80044ca:	e002      	b.n	80044d2 <_printf_i+0xf2>
 80044cc:	0646      	lsls	r6, r0, #25
 80044ce:	d5fb      	bpl.n	80044c8 <_printf_i+0xe8>
 80044d0:	881e      	ldrh	r6, [r3, #0]
 80044d2:	4854      	ldr	r0, [pc, #336]	; (8004624 <_printf_i+0x244>)
 80044d4:	2f6f      	cmp	r7, #111	; 0x6f
 80044d6:	bf0c      	ite	eq
 80044d8:	2308      	moveq	r3, #8
 80044da:	230a      	movne	r3, #10
 80044dc:	2100      	movs	r1, #0
 80044de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044e2:	6865      	ldr	r5, [r4, #4]
 80044e4:	60a5      	str	r5, [r4, #8]
 80044e6:	2d00      	cmp	r5, #0
 80044e8:	bfa2      	ittt	ge
 80044ea:	6821      	ldrge	r1, [r4, #0]
 80044ec:	f021 0104 	bicge.w	r1, r1, #4
 80044f0:	6021      	strge	r1, [r4, #0]
 80044f2:	b90e      	cbnz	r6, 80044f8 <_printf_i+0x118>
 80044f4:	2d00      	cmp	r5, #0
 80044f6:	d04d      	beq.n	8004594 <_printf_i+0x1b4>
 80044f8:	4615      	mov	r5, r2
 80044fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80044fe:	fb03 6711 	mls	r7, r3, r1, r6
 8004502:	5dc7      	ldrb	r7, [r0, r7]
 8004504:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004508:	4637      	mov	r7, r6
 800450a:	42bb      	cmp	r3, r7
 800450c:	460e      	mov	r6, r1
 800450e:	d9f4      	bls.n	80044fa <_printf_i+0x11a>
 8004510:	2b08      	cmp	r3, #8
 8004512:	d10b      	bne.n	800452c <_printf_i+0x14c>
 8004514:	6823      	ldr	r3, [r4, #0]
 8004516:	07de      	lsls	r6, r3, #31
 8004518:	d508      	bpl.n	800452c <_printf_i+0x14c>
 800451a:	6923      	ldr	r3, [r4, #16]
 800451c:	6861      	ldr	r1, [r4, #4]
 800451e:	4299      	cmp	r1, r3
 8004520:	bfde      	ittt	le
 8004522:	2330      	movle	r3, #48	; 0x30
 8004524:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004528:	f105 35ff 	addle.w	r5, r5, #4294967295
 800452c:	1b52      	subs	r2, r2, r5
 800452e:	6122      	str	r2, [r4, #16]
 8004530:	f8cd a000 	str.w	sl, [sp]
 8004534:	464b      	mov	r3, r9
 8004536:	aa03      	add	r2, sp, #12
 8004538:	4621      	mov	r1, r4
 800453a:	4640      	mov	r0, r8
 800453c:	f7ff fee2 	bl	8004304 <_printf_common>
 8004540:	3001      	adds	r0, #1
 8004542:	d14c      	bne.n	80045de <_printf_i+0x1fe>
 8004544:	f04f 30ff 	mov.w	r0, #4294967295
 8004548:	b004      	add	sp, #16
 800454a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800454e:	4835      	ldr	r0, [pc, #212]	; (8004624 <_printf_i+0x244>)
 8004550:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004554:	6829      	ldr	r1, [r5, #0]
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	f851 6b04 	ldr.w	r6, [r1], #4
 800455c:	6029      	str	r1, [r5, #0]
 800455e:	061d      	lsls	r5, r3, #24
 8004560:	d514      	bpl.n	800458c <_printf_i+0x1ac>
 8004562:	07df      	lsls	r7, r3, #31
 8004564:	bf44      	itt	mi
 8004566:	f043 0320 	orrmi.w	r3, r3, #32
 800456a:	6023      	strmi	r3, [r4, #0]
 800456c:	b91e      	cbnz	r6, 8004576 <_printf_i+0x196>
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	f023 0320 	bic.w	r3, r3, #32
 8004574:	6023      	str	r3, [r4, #0]
 8004576:	2310      	movs	r3, #16
 8004578:	e7b0      	b.n	80044dc <_printf_i+0xfc>
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	f043 0320 	orr.w	r3, r3, #32
 8004580:	6023      	str	r3, [r4, #0]
 8004582:	2378      	movs	r3, #120	; 0x78
 8004584:	4828      	ldr	r0, [pc, #160]	; (8004628 <_printf_i+0x248>)
 8004586:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800458a:	e7e3      	b.n	8004554 <_printf_i+0x174>
 800458c:	0659      	lsls	r1, r3, #25
 800458e:	bf48      	it	mi
 8004590:	b2b6      	uxthmi	r6, r6
 8004592:	e7e6      	b.n	8004562 <_printf_i+0x182>
 8004594:	4615      	mov	r5, r2
 8004596:	e7bb      	b.n	8004510 <_printf_i+0x130>
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	6826      	ldr	r6, [r4, #0]
 800459c:	6961      	ldr	r1, [r4, #20]
 800459e:	1d18      	adds	r0, r3, #4
 80045a0:	6028      	str	r0, [r5, #0]
 80045a2:	0635      	lsls	r5, r6, #24
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	d501      	bpl.n	80045ac <_printf_i+0x1cc>
 80045a8:	6019      	str	r1, [r3, #0]
 80045aa:	e002      	b.n	80045b2 <_printf_i+0x1d2>
 80045ac:	0670      	lsls	r0, r6, #25
 80045ae:	d5fb      	bpl.n	80045a8 <_printf_i+0x1c8>
 80045b0:	8019      	strh	r1, [r3, #0]
 80045b2:	2300      	movs	r3, #0
 80045b4:	6123      	str	r3, [r4, #16]
 80045b6:	4615      	mov	r5, r2
 80045b8:	e7ba      	b.n	8004530 <_printf_i+0x150>
 80045ba:	682b      	ldr	r3, [r5, #0]
 80045bc:	1d1a      	adds	r2, r3, #4
 80045be:	602a      	str	r2, [r5, #0]
 80045c0:	681d      	ldr	r5, [r3, #0]
 80045c2:	6862      	ldr	r2, [r4, #4]
 80045c4:	2100      	movs	r1, #0
 80045c6:	4628      	mov	r0, r5
 80045c8:	f7fb fe22 	bl	8000210 <memchr>
 80045cc:	b108      	cbz	r0, 80045d2 <_printf_i+0x1f2>
 80045ce:	1b40      	subs	r0, r0, r5
 80045d0:	6060      	str	r0, [r4, #4]
 80045d2:	6863      	ldr	r3, [r4, #4]
 80045d4:	6123      	str	r3, [r4, #16]
 80045d6:	2300      	movs	r3, #0
 80045d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045dc:	e7a8      	b.n	8004530 <_printf_i+0x150>
 80045de:	6923      	ldr	r3, [r4, #16]
 80045e0:	462a      	mov	r2, r5
 80045e2:	4649      	mov	r1, r9
 80045e4:	4640      	mov	r0, r8
 80045e6:	47d0      	blx	sl
 80045e8:	3001      	adds	r0, #1
 80045ea:	d0ab      	beq.n	8004544 <_printf_i+0x164>
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	079b      	lsls	r3, r3, #30
 80045f0:	d413      	bmi.n	800461a <_printf_i+0x23a>
 80045f2:	68e0      	ldr	r0, [r4, #12]
 80045f4:	9b03      	ldr	r3, [sp, #12]
 80045f6:	4298      	cmp	r0, r3
 80045f8:	bfb8      	it	lt
 80045fa:	4618      	movlt	r0, r3
 80045fc:	e7a4      	b.n	8004548 <_printf_i+0x168>
 80045fe:	2301      	movs	r3, #1
 8004600:	4632      	mov	r2, r6
 8004602:	4649      	mov	r1, r9
 8004604:	4640      	mov	r0, r8
 8004606:	47d0      	blx	sl
 8004608:	3001      	adds	r0, #1
 800460a:	d09b      	beq.n	8004544 <_printf_i+0x164>
 800460c:	3501      	adds	r5, #1
 800460e:	68e3      	ldr	r3, [r4, #12]
 8004610:	9903      	ldr	r1, [sp, #12]
 8004612:	1a5b      	subs	r3, r3, r1
 8004614:	42ab      	cmp	r3, r5
 8004616:	dcf2      	bgt.n	80045fe <_printf_i+0x21e>
 8004618:	e7eb      	b.n	80045f2 <_printf_i+0x212>
 800461a:	2500      	movs	r5, #0
 800461c:	f104 0619 	add.w	r6, r4, #25
 8004620:	e7f5      	b.n	800460e <_printf_i+0x22e>
 8004622:	bf00      	nop
 8004624:	08009704 	.word	0x08009704
 8004628:	08009715 	.word	0x08009715

0800462c <_scanf_float>:
 800462c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004630:	b087      	sub	sp, #28
 8004632:	4617      	mov	r7, r2
 8004634:	9303      	str	r3, [sp, #12]
 8004636:	688b      	ldr	r3, [r1, #8]
 8004638:	1e5a      	subs	r2, r3, #1
 800463a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800463e:	bf83      	ittte	hi
 8004640:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004644:	195b      	addhi	r3, r3, r5
 8004646:	9302      	strhi	r3, [sp, #8]
 8004648:	2300      	movls	r3, #0
 800464a:	bf86      	itte	hi
 800464c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004650:	608b      	strhi	r3, [r1, #8]
 8004652:	9302      	strls	r3, [sp, #8]
 8004654:	680b      	ldr	r3, [r1, #0]
 8004656:	468b      	mov	fp, r1
 8004658:	2500      	movs	r5, #0
 800465a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800465e:	f84b 3b1c 	str.w	r3, [fp], #28
 8004662:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004666:	4680      	mov	r8, r0
 8004668:	460c      	mov	r4, r1
 800466a:	465e      	mov	r6, fp
 800466c:	46aa      	mov	sl, r5
 800466e:	46a9      	mov	r9, r5
 8004670:	9501      	str	r5, [sp, #4]
 8004672:	68a2      	ldr	r2, [r4, #8]
 8004674:	b152      	cbz	r2, 800468c <_scanf_float+0x60>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b4e      	cmp	r3, #78	; 0x4e
 800467c:	d864      	bhi.n	8004748 <_scanf_float+0x11c>
 800467e:	2b40      	cmp	r3, #64	; 0x40
 8004680:	d83c      	bhi.n	80046fc <_scanf_float+0xd0>
 8004682:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004686:	b2c8      	uxtb	r0, r1
 8004688:	280e      	cmp	r0, #14
 800468a:	d93a      	bls.n	8004702 <_scanf_float+0xd6>
 800468c:	f1b9 0f00 	cmp.w	r9, #0
 8004690:	d003      	beq.n	800469a <_scanf_float+0x6e>
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004698:	6023      	str	r3, [r4, #0]
 800469a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800469e:	f1ba 0f01 	cmp.w	sl, #1
 80046a2:	f200 8113 	bhi.w	80048cc <_scanf_float+0x2a0>
 80046a6:	455e      	cmp	r6, fp
 80046a8:	f200 8105 	bhi.w	80048b6 <_scanf_float+0x28a>
 80046ac:	2501      	movs	r5, #1
 80046ae:	4628      	mov	r0, r5
 80046b0:	b007      	add	sp, #28
 80046b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80046ba:	2a0d      	cmp	r2, #13
 80046bc:	d8e6      	bhi.n	800468c <_scanf_float+0x60>
 80046be:	a101      	add	r1, pc, #4	; (adr r1, 80046c4 <_scanf_float+0x98>)
 80046c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80046c4:	08004803 	.word	0x08004803
 80046c8:	0800468d 	.word	0x0800468d
 80046cc:	0800468d 	.word	0x0800468d
 80046d0:	0800468d 	.word	0x0800468d
 80046d4:	08004863 	.word	0x08004863
 80046d8:	0800483b 	.word	0x0800483b
 80046dc:	0800468d 	.word	0x0800468d
 80046e0:	0800468d 	.word	0x0800468d
 80046e4:	08004811 	.word	0x08004811
 80046e8:	0800468d 	.word	0x0800468d
 80046ec:	0800468d 	.word	0x0800468d
 80046f0:	0800468d 	.word	0x0800468d
 80046f4:	0800468d 	.word	0x0800468d
 80046f8:	080047c9 	.word	0x080047c9
 80046fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004700:	e7db      	b.n	80046ba <_scanf_float+0x8e>
 8004702:	290e      	cmp	r1, #14
 8004704:	d8c2      	bhi.n	800468c <_scanf_float+0x60>
 8004706:	a001      	add	r0, pc, #4	; (adr r0, 800470c <_scanf_float+0xe0>)
 8004708:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800470c:	080047bb 	.word	0x080047bb
 8004710:	0800468d 	.word	0x0800468d
 8004714:	080047bb 	.word	0x080047bb
 8004718:	0800484f 	.word	0x0800484f
 800471c:	0800468d 	.word	0x0800468d
 8004720:	08004769 	.word	0x08004769
 8004724:	080047a5 	.word	0x080047a5
 8004728:	080047a5 	.word	0x080047a5
 800472c:	080047a5 	.word	0x080047a5
 8004730:	080047a5 	.word	0x080047a5
 8004734:	080047a5 	.word	0x080047a5
 8004738:	080047a5 	.word	0x080047a5
 800473c:	080047a5 	.word	0x080047a5
 8004740:	080047a5 	.word	0x080047a5
 8004744:	080047a5 	.word	0x080047a5
 8004748:	2b6e      	cmp	r3, #110	; 0x6e
 800474a:	d809      	bhi.n	8004760 <_scanf_float+0x134>
 800474c:	2b60      	cmp	r3, #96	; 0x60
 800474e:	d8b2      	bhi.n	80046b6 <_scanf_float+0x8a>
 8004750:	2b54      	cmp	r3, #84	; 0x54
 8004752:	d077      	beq.n	8004844 <_scanf_float+0x218>
 8004754:	2b59      	cmp	r3, #89	; 0x59
 8004756:	d199      	bne.n	800468c <_scanf_float+0x60>
 8004758:	2d07      	cmp	r5, #7
 800475a:	d197      	bne.n	800468c <_scanf_float+0x60>
 800475c:	2508      	movs	r5, #8
 800475e:	e029      	b.n	80047b4 <_scanf_float+0x188>
 8004760:	2b74      	cmp	r3, #116	; 0x74
 8004762:	d06f      	beq.n	8004844 <_scanf_float+0x218>
 8004764:	2b79      	cmp	r3, #121	; 0x79
 8004766:	e7f6      	b.n	8004756 <_scanf_float+0x12a>
 8004768:	6821      	ldr	r1, [r4, #0]
 800476a:	05c8      	lsls	r0, r1, #23
 800476c:	d51a      	bpl.n	80047a4 <_scanf_float+0x178>
 800476e:	9b02      	ldr	r3, [sp, #8]
 8004770:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004774:	6021      	str	r1, [r4, #0]
 8004776:	f109 0901 	add.w	r9, r9, #1
 800477a:	b11b      	cbz	r3, 8004784 <_scanf_float+0x158>
 800477c:	3b01      	subs	r3, #1
 800477e:	3201      	adds	r2, #1
 8004780:	9302      	str	r3, [sp, #8]
 8004782:	60a2      	str	r2, [r4, #8]
 8004784:	68a3      	ldr	r3, [r4, #8]
 8004786:	3b01      	subs	r3, #1
 8004788:	60a3      	str	r3, [r4, #8]
 800478a:	6923      	ldr	r3, [r4, #16]
 800478c:	3301      	adds	r3, #1
 800478e:	6123      	str	r3, [r4, #16]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3b01      	subs	r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	607b      	str	r3, [r7, #4]
 8004798:	f340 8084 	ble.w	80048a4 <_scanf_float+0x278>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	3301      	adds	r3, #1
 80047a0:	603b      	str	r3, [r7, #0]
 80047a2:	e766      	b.n	8004672 <_scanf_float+0x46>
 80047a4:	eb1a 0f05 	cmn.w	sl, r5
 80047a8:	f47f af70 	bne.w	800468c <_scanf_float+0x60>
 80047ac:	6822      	ldr	r2, [r4, #0]
 80047ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80047b2:	6022      	str	r2, [r4, #0]
 80047b4:	f806 3b01 	strb.w	r3, [r6], #1
 80047b8:	e7e4      	b.n	8004784 <_scanf_float+0x158>
 80047ba:	6822      	ldr	r2, [r4, #0]
 80047bc:	0610      	lsls	r0, r2, #24
 80047be:	f57f af65 	bpl.w	800468c <_scanf_float+0x60>
 80047c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047c6:	e7f4      	b.n	80047b2 <_scanf_float+0x186>
 80047c8:	f1ba 0f00 	cmp.w	sl, #0
 80047cc:	d10e      	bne.n	80047ec <_scanf_float+0x1c0>
 80047ce:	f1b9 0f00 	cmp.w	r9, #0
 80047d2:	d10e      	bne.n	80047f2 <_scanf_float+0x1c6>
 80047d4:	6822      	ldr	r2, [r4, #0]
 80047d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80047da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80047de:	d108      	bne.n	80047f2 <_scanf_float+0x1c6>
 80047e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80047e4:	6022      	str	r2, [r4, #0]
 80047e6:	f04f 0a01 	mov.w	sl, #1
 80047ea:	e7e3      	b.n	80047b4 <_scanf_float+0x188>
 80047ec:	f1ba 0f02 	cmp.w	sl, #2
 80047f0:	d055      	beq.n	800489e <_scanf_float+0x272>
 80047f2:	2d01      	cmp	r5, #1
 80047f4:	d002      	beq.n	80047fc <_scanf_float+0x1d0>
 80047f6:	2d04      	cmp	r5, #4
 80047f8:	f47f af48 	bne.w	800468c <_scanf_float+0x60>
 80047fc:	3501      	adds	r5, #1
 80047fe:	b2ed      	uxtb	r5, r5
 8004800:	e7d8      	b.n	80047b4 <_scanf_float+0x188>
 8004802:	f1ba 0f01 	cmp.w	sl, #1
 8004806:	f47f af41 	bne.w	800468c <_scanf_float+0x60>
 800480a:	f04f 0a02 	mov.w	sl, #2
 800480e:	e7d1      	b.n	80047b4 <_scanf_float+0x188>
 8004810:	b97d      	cbnz	r5, 8004832 <_scanf_float+0x206>
 8004812:	f1b9 0f00 	cmp.w	r9, #0
 8004816:	f47f af3c 	bne.w	8004692 <_scanf_float+0x66>
 800481a:	6822      	ldr	r2, [r4, #0]
 800481c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004820:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004824:	f47f af39 	bne.w	800469a <_scanf_float+0x6e>
 8004828:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800482c:	6022      	str	r2, [r4, #0]
 800482e:	2501      	movs	r5, #1
 8004830:	e7c0      	b.n	80047b4 <_scanf_float+0x188>
 8004832:	2d03      	cmp	r5, #3
 8004834:	d0e2      	beq.n	80047fc <_scanf_float+0x1d0>
 8004836:	2d05      	cmp	r5, #5
 8004838:	e7de      	b.n	80047f8 <_scanf_float+0x1cc>
 800483a:	2d02      	cmp	r5, #2
 800483c:	f47f af26 	bne.w	800468c <_scanf_float+0x60>
 8004840:	2503      	movs	r5, #3
 8004842:	e7b7      	b.n	80047b4 <_scanf_float+0x188>
 8004844:	2d06      	cmp	r5, #6
 8004846:	f47f af21 	bne.w	800468c <_scanf_float+0x60>
 800484a:	2507      	movs	r5, #7
 800484c:	e7b2      	b.n	80047b4 <_scanf_float+0x188>
 800484e:	6822      	ldr	r2, [r4, #0]
 8004850:	0591      	lsls	r1, r2, #22
 8004852:	f57f af1b 	bpl.w	800468c <_scanf_float+0x60>
 8004856:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800485a:	6022      	str	r2, [r4, #0]
 800485c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004860:	e7a8      	b.n	80047b4 <_scanf_float+0x188>
 8004862:	6822      	ldr	r2, [r4, #0]
 8004864:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004868:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800486c:	d006      	beq.n	800487c <_scanf_float+0x250>
 800486e:	0550      	lsls	r0, r2, #21
 8004870:	f57f af0c 	bpl.w	800468c <_scanf_float+0x60>
 8004874:	f1b9 0f00 	cmp.w	r9, #0
 8004878:	f43f af0f 	beq.w	800469a <_scanf_float+0x6e>
 800487c:	0591      	lsls	r1, r2, #22
 800487e:	bf58      	it	pl
 8004880:	9901      	ldrpl	r1, [sp, #4]
 8004882:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004886:	bf58      	it	pl
 8004888:	eba9 0101 	subpl.w	r1, r9, r1
 800488c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004890:	bf58      	it	pl
 8004892:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004896:	6022      	str	r2, [r4, #0]
 8004898:	f04f 0900 	mov.w	r9, #0
 800489c:	e78a      	b.n	80047b4 <_scanf_float+0x188>
 800489e:	f04f 0a03 	mov.w	sl, #3
 80048a2:	e787      	b.n	80047b4 <_scanf_float+0x188>
 80048a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80048a8:	4639      	mov	r1, r7
 80048aa:	4640      	mov	r0, r8
 80048ac:	4798      	blx	r3
 80048ae:	2800      	cmp	r0, #0
 80048b0:	f43f aedf 	beq.w	8004672 <_scanf_float+0x46>
 80048b4:	e6ea      	b.n	800468c <_scanf_float+0x60>
 80048b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80048ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80048be:	463a      	mov	r2, r7
 80048c0:	4640      	mov	r0, r8
 80048c2:	4798      	blx	r3
 80048c4:	6923      	ldr	r3, [r4, #16]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	6123      	str	r3, [r4, #16]
 80048ca:	e6ec      	b.n	80046a6 <_scanf_float+0x7a>
 80048cc:	1e6b      	subs	r3, r5, #1
 80048ce:	2b06      	cmp	r3, #6
 80048d0:	d825      	bhi.n	800491e <_scanf_float+0x2f2>
 80048d2:	2d02      	cmp	r5, #2
 80048d4:	d836      	bhi.n	8004944 <_scanf_float+0x318>
 80048d6:	455e      	cmp	r6, fp
 80048d8:	f67f aee8 	bls.w	80046ac <_scanf_float+0x80>
 80048dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80048e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80048e4:	463a      	mov	r2, r7
 80048e6:	4640      	mov	r0, r8
 80048e8:	4798      	blx	r3
 80048ea:	6923      	ldr	r3, [r4, #16]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	6123      	str	r3, [r4, #16]
 80048f0:	e7f1      	b.n	80048d6 <_scanf_float+0x2aa>
 80048f2:	9802      	ldr	r0, [sp, #8]
 80048f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80048f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80048fc:	9002      	str	r0, [sp, #8]
 80048fe:	463a      	mov	r2, r7
 8004900:	4640      	mov	r0, r8
 8004902:	4798      	blx	r3
 8004904:	6923      	ldr	r3, [r4, #16]
 8004906:	3b01      	subs	r3, #1
 8004908:	6123      	str	r3, [r4, #16]
 800490a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800490e:	fa5f fa8a 	uxtb.w	sl, sl
 8004912:	f1ba 0f02 	cmp.w	sl, #2
 8004916:	d1ec      	bne.n	80048f2 <_scanf_float+0x2c6>
 8004918:	3d03      	subs	r5, #3
 800491a:	b2ed      	uxtb	r5, r5
 800491c:	1b76      	subs	r6, r6, r5
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	05da      	lsls	r2, r3, #23
 8004922:	d52f      	bpl.n	8004984 <_scanf_float+0x358>
 8004924:	055b      	lsls	r3, r3, #21
 8004926:	d510      	bpl.n	800494a <_scanf_float+0x31e>
 8004928:	455e      	cmp	r6, fp
 800492a:	f67f aebf 	bls.w	80046ac <_scanf_float+0x80>
 800492e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004932:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004936:	463a      	mov	r2, r7
 8004938:	4640      	mov	r0, r8
 800493a:	4798      	blx	r3
 800493c:	6923      	ldr	r3, [r4, #16]
 800493e:	3b01      	subs	r3, #1
 8004940:	6123      	str	r3, [r4, #16]
 8004942:	e7f1      	b.n	8004928 <_scanf_float+0x2fc>
 8004944:	46aa      	mov	sl, r5
 8004946:	9602      	str	r6, [sp, #8]
 8004948:	e7df      	b.n	800490a <_scanf_float+0x2de>
 800494a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800494e:	6923      	ldr	r3, [r4, #16]
 8004950:	2965      	cmp	r1, #101	; 0x65
 8004952:	f103 33ff 	add.w	r3, r3, #4294967295
 8004956:	f106 35ff 	add.w	r5, r6, #4294967295
 800495a:	6123      	str	r3, [r4, #16]
 800495c:	d00c      	beq.n	8004978 <_scanf_float+0x34c>
 800495e:	2945      	cmp	r1, #69	; 0x45
 8004960:	d00a      	beq.n	8004978 <_scanf_float+0x34c>
 8004962:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004966:	463a      	mov	r2, r7
 8004968:	4640      	mov	r0, r8
 800496a:	4798      	blx	r3
 800496c:	6923      	ldr	r3, [r4, #16]
 800496e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004972:	3b01      	subs	r3, #1
 8004974:	1eb5      	subs	r5, r6, #2
 8004976:	6123      	str	r3, [r4, #16]
 8004978:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800497c:	463a      	mov	r2, r7
 800497e:	4640      	mov	r0, r8
 8004980:	4798      	blx	r3
 8004982:	462e      	mov	r6, r5
 8004984:	6825      	ldr	r5, [r4, #0]
 8004986:	f015 0510 	ands.w	r5, r5, #16
 800498a:	d159      	bne.n	8004a40 <_scanf_float+0x414>
 800498c:	7035      	strb	r5, [r6, #0]
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004998:	d11b      	bne.n	80049d2 <_scanf_float+0x3a6>
 800499a:	9b01      	ldr	r3, [sp, #4]
 800499c:	454b      	cmp	r3, r9
 800499e:	eba3 0209 	sub.w	r2, r3, r9
 80049a2:	d123      	bne.n	80049ec <_scanf_float+0x3c0>
 80049a4:	2200      	movs	r2, #0
 80049a6:	4659      	mov	r1, fp
 80049a8:	4640      	mov	r0, r8
 80049aa:	f000 ff0b 	bl	80057c4 <_strtod_r>
 80049ae:	6822      	ldr	r2, [r4, #0]
 80049b0:	9b03      	ldr	r3, [sp, #12]
 80049b2:	f012 0f02 	tst.w	r2, #2
 80049b6:	ec57 6b10 	vmov	r6, r7, d0
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	d021      	beq.n	8004a02 <_scanf_float+0x3d6>
 80049be:	9903      	ldr	r1, [sp, #12]
 80049c0:	1d1a      	adds	r2, r3, #4
 80049c2:	600a      	str	r2, [r1, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	e9c3 6700 	strd	r6, r7, [r3]
 80049ca:	68e3      	ldr	r3, [r4, #12]
 80049cc:	3301      	adds	r3, #1
 80049ce:	60e3      	str	r3, [r4, #12]
 80049d0:	e66d      	b.n	80046ae <_scanf_float+0x82>
 80049d2:	9b04      	ldr	r3, [sp, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0e5      	beq.n	80049a4 <_scanf_float+0x378>
 80049d8:	9905      	ldr	r1, [sp, #20]
 80049da:	230a      	movs	r3, #10
 80049dc:	462a      	mov	r2, r5
 80049de:	3101      	adds	r1, #1
 80049e0:	4640      	mov	r0, r8
 80049e2:	f000 ff83 	bl	80058ec <_strtol_r>
 80049e6:	9b04      	ldr	r3, [sp, #16]
 80049e8:	9e05      	ldr	r6, [sp, #20]
 80049ea:	1ac2      	subs	r2, r0, r3
 80049ec:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80049f0:	429e      	cmp	r6, r3
 80049f2:	bf28      	it	cs
 80049f4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80049f8:	4912      	ldr	r1, [pc, #72]	; (8004a44 <_scanf_float+0x418>)
 80049fa:	4630      	mov	r0, r6
 80049fc:	f000 f82c 	bl	8004a58 <siprintf>
 8004a00:	e7d0      	b.n	80049a4 <_scanf_float+0x378>
 8004a02:	9903      	ldr	r1, [sp, #12]
 8004a04:	f012 0f04 	tst.w	r2, #4
 8004a08:	f103 0204 	add.w	r2, r3, #4
 8004a0c:	600a      	str	r2, [r1, #0]
 8004a0e:	d1d9      	bne.n	80049c4 <_scanf_float+0x398>
 8004a10:	f8d3 8000 	ldr.w	r8, [r3]
 8004a14:	ee10 2a10 	vmov	r2, s0
 8004a18:	ee10 0a10 	vmov	r0, s0
 8004a1c:	463b      	mov	r3, r7
 8004a1e:	4639      	mov	r1, r7
 8004a20:	f7fc f89c 	bl	8000b5c <__aeabi_dcmpun>
 8004a24:	b128      	cbz	r0, 8004a32 <_scanf_float+0x406>
 8004a26:	4808      	ldr	r0, [pc, #32]	; (8004a48 <_scanf_float+0x41c>)
 8004a28:	f000 f810 	bl	8004a4c <nanf>
 8004a2c:	ed88 0a00 	vstr	s0, [r8]
 8004a30:	e7cb      	b.n	80049ca <_scanf_float+0x39e>
 8004a32:	4630      	mov	r0, r6
 8004a34:	4639      	mov	r1, r7
 8004a36:	f7fc f8ef 	bl	8000c18 <__aeabi_d2f>
 8004a3a:	f8c8 0000 	str.w	r0, [r8]
 8004a3e:	e7c4      	b.n	80049ca <_scanf_float+0x39e>
 8004a40:	2500      	movs	r5, #0
 8004a42:	e634      	b.n	80046ae <_scanf_float+0x82>
 8004a44:	08009726 	.word	0x08009726
 8004a48:	08009b4b 	.word	0x08009b4b

08004a4c <nanf>:
 8004a4c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004a54 <nanf+0x8>
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	7fc00000 	.word	0x7fc00000

08004a58 <siprintf>:
 8004a58:	b40e      	push	{r1, r2, r3}
 8004a5a:	b500      	push	{lr}
 8004a5c:	b09c      	sub	sp, #112	; 0x70
 8004a5e:	ab1d      	add	r3, sp, #116	; 0x74
 8004a60:	9002      	str	r0, [sp, #8]
 8004a62:	9006      	str	r0, [sp, #24]
 8004a64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a68:	4809      	ldr	r0, [pc, #36]	; (8004a90 <siprintf+0x38>)
 8004a6a:	9107      	str	r1, [sp, #28]
 8004a6c:	9104      	str	r1, [sp, #16]
 8004a6e:	4909      	ldr	r1, [pc, #36]	; (8004a94 <siprintf+0x3c>)
 8004a70:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a74:	9105      	str	r1, [sp, #20]
 8004a76:	6800      	ldr	r0, [r0, #0]
 8004a78:	9301      	str	r3, [sp, #4]
 8004a7a:	a902      	add	r1, sp, #8
 8004a7c:	f002 ffa0 	bl	80079c0 <_svfiprintf_r>
 8004a80:	9b02      	ldr	r3, [sp, #8]
 8004a82:	2200      	movs	r2, #0
 8004a84:	701a      	strb	r2, [r3, #0]
 8004a86:	b01c      	add	sp, #112	; 0x70
 8004a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a8c:	b003      	add	sp, #12
 8004a8e:	4770      	bx	lr
 8004a90:	20000014 	.word	0x20000014
 8004a94:	ffff0208 	.word	0xffff0208

08004a98 <siscanf>:
 8004a98:	b40e      	push	{r1, r2, r3}
 8004a9a:	b510      	push	{r4, lr}
 8004a9c:	b09f      	sub	sp, #124	; 0x7c
 8004a9e:	ac21      	add	r4, sp, #132	; 0x84
 8004aa0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004aa4:	f854 2b04 	ldr.w	r2, [r4], #4
 8004aa8:	9201      	str	r2, [sp, #4]
 8004aaa:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004aae:	9004      	str	r0, [sp, #16]
 8004ab0:	9008      	str	r0, [sp, #32]
 8004ab2:	f7fb fb9f 	bl	80001f4 <strlen>
 8004ab6:	4b0c      	ldr	r3, [pc, #48]	; (8004ae8 <siscanf+0x50>)
 8004ab8:	9005      	str	r0, [sp, #20]
 8004aba:	9009      	str	r0, [sp, #36]	; 0x24
 8004abc:	930d      	str	r3, [sp, #52]	; 0x34
 8004abe:	480b      	ldr	r0, [pc, #44]	; (8004aec <siscanf+0x54>)
 8004ac0:	9a01      	ldr	r2, [sp, #4]
 8004ac2:	6800      	ldr	r0, [r0, #0]
 8004ac4:	9403      	str	r4, [sp, #12]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	9311      	str	r3, [sp, #68]	; 0x44
 8004aca:	9316      	str	r3, [sp, #88]	; 0x58
 8004acc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ad0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004ad4:	a904      	add	r1, sp, #16
 8004ad6:	4623      	mov	r3, r4
 8004ad8:	f003 f8cc 	bl	8007c74 <__ssvfiscanf_r>
 8004adc:	b01f      	add	sp, #124	; 0x7c
 8004ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ae2:	b003      	add	sp, #12
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	08004b13 	.word	0x08004b13
 8004aec:	20000014 	.word	0x20000014

08004af0 <__sread>:
 8004af0:	b510      	push	{r4, lr}
 8004af2:	460c      	mov	r4, r1
 8004af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af8:	f003 fb86 	bl	8008208 <_read_r>
 8004afc:	2800      	cmp	r0, #0
 8004afe:	bfab      	itete	ge
 8004b00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b02:	89a3      	ldrhlt	r3, [r4, #12]
 8004b04:	181b      	addge	r3, r3, r0
 8004b06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b0a:	bfac      	ite	ge
 8004b0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b0e:	81a3      	strhlt	r3, [r4, #12]
 8004b10:	bd10      	pop	{r4, pc}

08004b12 <__seofread>:
 8004b12:	2000      	movs	r0, #0
 8004b14:	4770      	bx	lr

08004b16 <__swrite>:
 8004b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b1a:	461f      	mov	r7, r3
 8004b1c:	898b      	ldrh	r3, [r1, #12]
 8004b1e:	05db      	lsls	r3, r3, #23
 8004b20:	4605      	mov	r5, r0
 8004b22:	460c      	mov	r4, r1
 8004b24:	4616      	mov	r6, r2
 8004b26:	d505      	bpl.n	8004b34 <__swrite+0x1e>
 8004b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f002 f8f8 	bl	8006d24 <_lseek_r>
 8004b34:	89a3      	ldrh	r3, [r4, #12]
 8004b36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b3e:	81a3      	strh	r3, [r4, #12]
 8004b40:	4632      	mov	r2, r6
 8004b42:	463b      	mov	r3, r7
 8004b44:	4628      	mov	r0, r5
 8004b46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b4a:	f000 bedb 	b.w	8005904 <_write_r>

08004b4e <__sseek>:
 8004b4e:	b510      	push	{r4, lr}
 8004b50:	460c      	mov	r4, r1
 8004b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b56:	f002 f8e5 	bl	8006d24 <_lseek_r>
 8004b5a:	1c43      	adds	r3, r0, #1
 8004b5c:	89a3      	ldrh	r3, [r4, #12]
 8004b5e:	bf15      	itete	ne
 8004b60:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b6a:	81a3      	strheq	r3, [r4, #12]
 8004b6c:	bf18      	it	ne
 8004b6e:	81a3      	strhne	r3, [r4, #12]
 8004b70:	bd10      	pop	{r4, pc}

08004b72 <__sclose>:
 8004b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b76:	f000 bed7 	b.w	8005928 <_close_r>

08004b7a <sulp>:
 8004b7a:	b570      	push	{r4, r5, r6, lr}
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	460d      	mov	r5, r1
 8004b80:	ec45 4b10 	vmov	d0, r4, r5
 8004b84:	4616      	mov	r6, r2
 8004b86:	f002 fc79 	bl	800747c <__ulp>
 8004b8a:	ec51 0b10 	vmov	r0, r1, d0
 8004b8e:	b17e      	cbz	r6, 8004bb0 <sulp+0x36>
 8004b90:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004b94:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	dd09      	ble.n	8004bb0 <sulp+0x36>
 8004b9c:	051b      	lsls	r3, r3, #20
 8004b9e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004ba2:	2400      	movs	r4, #0
 8004ba4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004ba8:	4622      	mov	r2, r4
 8004baa:	462b      	mov	r3, r5
 8004bac:	f7fb fd3c 	bl	8000628 <__aeabi_dmul>
 8004bb0:	bd70      	pop	{r4, r5, r6, pc}
 8004bb2:	0000      	movs	r0, r0
 8004bb4:	0000      	movs	r0, r0
	...

08004bb8 <_strtod_l>:
 8004bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bbc:	ed2d 8b02 	vpush	{d8}
 8004bc0:	b09d      	sub	sp, #116	; 0x74
 8004bc2:	461f      	mov	r7, r3
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	9318      	str	r3, [sp, #96]	; 0x60
 8004bc8:	4ba2      	ldr	r3, [pc, #648]	; (8004e54 <_strtod_l+0x29c>)
 8004bca:	9213      	str	r2, [sp, #76]	; 0x4c
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	9305      	str	r3, [sp, #20]
 8004bd0:	4604      	mov	r4, r0
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	4688      	mov	r8, r1
 8004bd6:	f7fb fb0d 	bl	80001f4 <strlen>
 8004bda:	f04f 0a00 	mov.w	sl, #0
 8004bde:	4605      	mov	r5, r0
 8004be0:	f04f 0b00 	mov.w	fp, #0
 8004be4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004be8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004bea:	781a      	ldrb	r2, [r3, #0]
 8004bec:	2a2b      	cmp	r2, #43	; 0x2b
 8004bee:	d04e      	beq.n	8004c8e <_strtod_l+0xd6>
 8004bf0:	d83b      	bhi.n	8004c6a <_strtod_l+0xb2>
 8004bf2:	2a0d      	cmp	r2, #13
 8004bf4:	d834      	bhi.n	8004c60 <_strtod_l+0xa8>
 8004bf6:	2a08      	cmp	r2, #8
 8004bf8:	d834      	bhi.n	8004c64 <_strtod_l+0xac>
 8004bfa:	2a00      	cmp	r2, #0
 8004bfc:	d03e      	beq.n	8004c7c <_strtod_l+0xc4>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	930a      	str	r3, [sp, #40]	; 0x28
 8004c02:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8004c04:	7833      	ldrb	r3, [r6, #0]
 8004c06:	2b30      	cmp	r3, #48	; 0x30
 8004c08:	f040 80b0 	bne.w	8004d6c <_strtod_l+0x1b4>
 8004c0c:	7873      	ldrb	r3, [r6, #1]
 8004c0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004c12:	2b58      	cmp	r3, #88	; 0x58
 8004c14:	d168      	bne.n	8004ce8 <_strtod_l+0x130>
 8004c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c18:	9301      	str	r3, [sp, #4]
 8004c1a:	ab18      	add	r3, sp, #96	; 0x60
 8004c1c:	9702      	str	r7, [sp, #8]
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	4a8d      	ldr	r2, [pc, #564]	; (8004e58 <_strtod_l+0x2a0>)
 8004c22:	ab19      	add	r3, sp, #100	; 0x64
 8004c24:	a917      	add	r1, sp, #92	; 0x5c
 8004c26:	4620      	mov	r0, r4
 8004c28:	f001 fd70 	bl	800670c <__gethex>
 8004c2c:	f010 0707 	ands.w	r7, r0, #7
 8004c30:	4605      	mov	r5, r0
 8004c32:	d005      	beq.n	8004c40 <_strtod_l+0x88>
 8004c34:	2f06      	cmp	r7, #6
 8004c36:	d12c      	bne.n	8004c92 <_strtod_l+0xda>
 8004c38:	3601      	adds	r6, #1
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	9617      	str	r6, [sp, #92]	; 0x5c
 8004c3e:	930a      	str	r3, [sp, #40]	; 0x28
 8004c40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f040 8590 	bne.w	8005768 <_strtod_l+0xbb0>
 8004c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c4a:	b1eb      	cbz	r3, 8004c88 <_strtod_l+0xd0>
 8004c4c:	4652      	mov	r2, sl
 8004c4e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004c52:	ec43 2b10 	vmov	d0, r2, r3
 8004c56:	b01d      	add	sp, #116	; 0x74
 8004c58:	ecbd 8b02 	vpop	{d8}
 8004c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c60:	2a20      	cmp	r2, #32
 8004c62:	d1cc      	bne.n	8004bfe <_strtod_l+0x46>
 8004c64:	3301      	adds	r3, #1
 8004c66:	9317      	str	r3, [sp, #92]	; 0x5c
 8004c68:	e7be      	b.n	8004be8 <_strtod_l+0x30>
 8004c6a:	2a2d      	cmp	r2, #45	; 0x2d
 8004c6c:	d1c7      	bne.n	8004bfe <_strtod_l+0x46>
 8004c6e:	2201      	movs	r2, #1
 8004c70:	920a      	str	r2, [sp, #40]	; 0x28
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	9217      	str	r2, [sp, #92]	; 0x5c
 8004c76:	785b      	ldrb	r3, [r3, #1]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1c2      	bne.n	8004c02 <_strtod_l+0x4a>
 8004c7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004c7e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f040 856e 	bne.w	8005764 <_strtod_l+0xbac>
 8004c88:	4652      	mov	r2, sl
 8004c8a:	465b      	mov	r3, fp
 8004c8c:	e7e1      	b.n	8004c52 <_strtod_l+0x9a>
 8004c8e:	2200      	movs	r2, #0
 8004c90:	e7ee      	b.n	8004c70 <_strtod_l+0xb8>
 8004c92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004c94:	b13a      	cbz	r2, 8004ca6 <_strtod_l+0xee>
 8004c96:	2135      	movs	r1, #53	; 0x35
 8004c98:	a81a      	add	r0, sp, #104	; 0x68
 8004c9a:	f002 fcfa 	bl	8007692 <__copybits>
 8004c9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	f002 f8b9 	bl	8006e18 <_Bfree>
 8004ca6:	3f01      	subs	r7, #1
 8004ca8:	2f04      	cmp	r7, #4
 8004caa:	d806      	bhi.n	8004cba <_strtod_l+0x102>
 8004cac:	e8df f007 	tbb	[pc, r7]
 8004cb0:	1714030a 	.word	0x1714030a
 8004cb4:	0a          	.byte	0x0a
 8004cb5:	00          	.byte	0x00
 8004cb6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8004cba:	0728      	lsls	r0, r5, #28
 8004cbc:	d5c0      	bpl.n	8004c40 <_strtod_l+0x88>
 8004cbe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004cc2:	e7bd      	b.n	8004c40 <_strtod_l+0x88>
 8004cc4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8004cc8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004cca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004cce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004cd2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004cd6:	e7f0      	b.n	8004cba <_strtod_l+0x102>
 8004cd8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8004e5c <_strtod_l+0x2a4>
 8004cdc:	e7ed      	b.n	8004cba <_strtod_l+0x102>
 8004cde:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004ce2:	f04f 3aff 	mov.w	sl, #4294967295
 8004ce6:	e7e8      	b.n	8004cba <_strtod_l+0x102>
 8004ce8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004cea:	1c5a      	adds	r2, r3, #1
 8004cec:	9217      	str	r2, [sp, #92]	; 0x5c
 8004cee:	785b      	ldrb	r3, [r3, #1]
 8004cf0:	2b30      	cmp	r3, #48	; 0x30
 8004cf2:	d0f9      	beq.n	8004ce8 <_strtod_l+0x130>
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0a3      	beq.n	8004c40 <_strtod_l+0x88>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f04f 0900 	mov.w	r9, #0
 8004cfe:	9304      	str	r3, [sp, #16]
 8004d00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d02:	9308      	str	r3, [sp, #32]
 8004d04:	f8cd 901c 	str.w	r9, [sp, #28]
 8004d08:	464f      	mov	r7, r9
 8004d0a:	220a      	movs	r2, #10
 8004d0c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004d0e:	7806      	ldrb	r6, [r0, #0]
 8004d10:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004d14:	b2d9      	uxtb	r1, r3
 8004d16:	2909      	cmp	r1, #9
 8004d18:	d92a      	bls.n	8004d70 <_strtod_l+0x1b8>
 8004d1a:	9905      	ldr	r1, [sp, #20]
 8004d1c:	462a      	mov	r2, r5
 8004d1e:	f003 fad7 	bl	80082d0 <strncmp>
 8004d22:	b398      	cbz	r0, 8004d8c <_strtod_l+0x1d4>
 8004d24:	2000      	movs	r0, #0
 8004d26:	4632      	mov	r2, r6
 8004d28:	463d      	mov	r5, r7
 8004d2a:	9005      	str	r0, [sp, #20]
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2a65      	cmp	r2, #101	; 0x65
 8004d30:	d001      	beq.n	8004d36 <_strtod_l+0x17e>
 8004d32:	2a45      	cmp	r2, #69	; 0x45
 8004d34:	d118      	bne.n	8004d68 <_strtod_l+0x1b0>
 8004d36:	b91d      	cbnz	r5, 8004d40 <_strtod_l+0x188>
 8004d38:	9a04      	ldr	r2, [sp, #16]
 8004d3a:	4302      	orrs	r2, r0
 8004d3c:	d09e      	beq.n	8004c7c <_strtod_l+0xc4>
 8004d3e:	2500      	movs	r5, #0
 8004d40:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8004d44:	f108 0201 	add.w	r2, r8, #1
 8004d48:	9217      	str	r2, [sp, #92]	; 0x5c
 8004d4a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8004d4e:	2a2b      	cmp	r2, #43	; 0x2b
 8004d50:	d075      	beq.n	8004e3e <_strtod_l+0x286>
 8004d52:	2a2d      	cmp	r2, #45	; 0x2d
 8004d54:	d07b      	beq.n	8004e4e <_strtod_l+0x296>
 8004d56:	f04f 0c00 	mov.w	ip, #0
 8004d5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004d5e:	2909      	cmp	r1, #9
 8004d60:	f240 8082 	bls.w	8004e68 <_strtod_l+0x2b0>
 8004d64:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004d68:	2600      	movs	r6, #0
 8004d6a:	e09d      	b.n	8004ea8 <_strtod_l+0x2f0>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	e7c4      	b.n	8004cfa <_strtod_l+0x142>
 8004d70:	2f08      	cmp	r7, #8
 8004d72:	bfd8      	it	le
 8004d74:	9907      	ldrle	r1, [sp, #28]
 8004d76:	f100 0001 	add.w	r0, r0, #1
 8004d7a:	bfda      	itte	le
 8004d7c:	fb02 3301 	mlale	r3, r2, r1, r3
 8004d80:	9307      	strle	r3, [sp, #28]
 8004d82:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004d86:	3701      	adds	r7, #1
 8004d88:	9017      	str	r0, [sp, #92]	; 0x5c
 8004d8a:	e7bf      	b.n	8004d0c <_strtod_l+0x154>
 8004d8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d8e:	195a      	adds	r2, r3, r5
 8004d90:	9217      	str	r2, [sp, #92]	; 0x5c
 8004d92:	5d5a      	ldrb	r2, [r3, r5]
 8004d94:	2f00      	cmp	r7, #0
 8004d96:	d037      	beq.n	8004e08 <_strtod_l+0x250>
 8004d98:	9005      	str	r0, [sp, #20]
 8004d9a:	463d      	mov	r5, r7
 8004d9c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004da0:	2b09      	cmp	r3, #9
 8004da2:	d912      	bls.n	8004dca <_strtod_l+0x212>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e7c2      	b.n	8004d2e <_strtod_l+0x176>
 8004da8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	9217      	str	r2, [sp, #92]	; 0x5c
 8004dae:	785a      	ldrb	r2, [r3, #1]
 8004db0:	3001      	adds	r0, #1
 8004db2:	2a30      	cmp	r2, #48	; 0x30
 8004db4:	d0f8      	beq.n	8004da8 <_strtod_l+0x1f0>
 8004db6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004dba:	2b08      	cmp	r3, #8
 8004dbc:	f200 84d9 	bhi.w	8005772 <_strtod_l+0xbba>
 8004dc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004dc2:	9005      	str	r0, [sp, #20]
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	9308      	str	r3, [sp, #32]
 8004dc8:	4605      	mov	r5, r0
 8004dca:	3a30      	subs	r2, #48	; 0x30
 8004dcc:	f100 0301 	add.w	r3, r0, #1
 8004dd0:	d014      	beq.n	8004dfc <_strtod_l+0x244>
 8004dd2:	9905      	ldr	r1, [sp, #20]
 8004dd4:	4419      	add	r1, r3
 8004dd6:	9105      	str	r1, [sp, #20]
 8004dd8:	462b      	mov	r3, r5
 8004dda:	eb00 0e05 	add.w	lr, r0, r5
 8004dde:	210a      	movs	r1, #10
 8004de0:	4573      	cmp	r3, lr
 8004de2:	d113      	bne.n	8004e0c <_strtod_l+0x254>
 8004de4:	182b      	adds	r3, r5, r0
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	f105 0501 	add.w	r5, r5, #1
 8004dec:	4405      	add	r5, r0
 8004dee:	dc1c      	bgt.n	8004e2a <_strtod_l+0x272>
 8004df0:	9907      	ldr	r1, [sp, #28]
 8004df2:	230a      	movs	r3, #10
 8004df4:	fb03 2301 	mla	r3, r3, r1, r2
 8004df8:	9307      	str	r3, [sp, #28]
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004dfe:	1c51      	adds	r1, r2, #1
 8004e00:	9117      	str	r1, [sp, #92]	; 0x5c
 8004e02:	7852      	ldrb	r2, [r2, #1]
 8004e04:	4618      	mov	r0, r3
 8004e06:	e7c9      	b.n	8004d9c <_strtod_l+0x1e4>
 8004e08:	4638      	mov	r0, r7
 8004e0a:	e7d2      	b.n	8004db2 <_strtod_l+0x1fa>
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	dc04      	bgt.n	8004e1a <_strtod_l+0x262>
 8004e10:	9e07      	ldr	r6, [sp, #28]
 8004e12:	434e      	muls	r6, r1
 8004e14:	9607      	str	r6, [sp, #28]
 8004e16:	3301      	adds	r3, #1
 8004e18:	e7e2      	b.n	8004de0 <_strtod_l+0x228>
 8004e1a:	f103 0c01 	add.w	ip, r3, #1
 8004e1e:	f1bc 0f10 	cmp.w	ip, #16
 8004e22:	bfd8      	it	le
 8004e24:	fb01 f909 	mulle.w	r9, r1, r9
 8004e28:	e7f5      	b.n	8004e16 <_strtod_l+0x25e>
 8004e2a:	2d10      	cmp	r5, #16
 8004e2c:	bfdc      	itt	le
 8004e2e:	230a      	movle	r3, #10
 8004e30:	fb03 2909 	mlale	r9, r3, r9, r2
 8004e34:	e7e1      	b.n	8004dfa <_strtod_l+0x242>
 8004e36:	2300      	movs	r3, #0
 8004e38:	9305      	str	r3, [sp, #20]
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e77c      	b.n	8004d38 <_strtod_l+0x180>
 8004e3e:	f04f 0c00 	mov.w	ip, #0
 8004e42:	f108 0202 	add.w	r2, r8, #2
 8004e46:	9217      	str	r2, [sp, #92]	; 0x5c
 8004e48:	f898 2002 	ldrb.w	r2, [r8, #2]
 8004e4c:	e785      	b.n	8004d5a <_strtod_l+0x1a2>
 8004e4e:	f04f 0c01 	mov.w	ip, #1
 8004e52:	e7f6      	b.n	8004e42 <_strtod_l+0x28a>
 8004e54:	08009978 	.word	0x08009978
 8004e58:	0800972c 	.word	0x0800972c
 8004e5c:	7ff00000 	.word	0x7ff00000
 8004e60:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004e62:	1c51      	adds	r1, r2, #1
 8004e64:	9117      	str	r1, [sp, #92]	; 0x5c
 8004e66:	7852      	ldrb	r2, [r2, #1]
 8004e68:	2a30      	cmp	r2, #48	; 0x30
 8004e6a:	d0f9      	beq.n	8004e60 <_strtod_l+0x2a8>
 8004e6c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004e70:	2908      	cmp	r1, #8
 8004e72:	f63f af79 	bhi.w	8004d68 <_strtod_l+0x1b0>
 8004e76:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004e7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004e7c:	9206      	str	r2, [sp, #24]
 8004e7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004e80:	1c51      	adds	r1, r2, #1
 8004e82:	9117      	str	r1, [sp, #92]	; 0x5c
 8004e84:	7852      	ldrb	r2, [r2, #1]
 8004e86:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8004e8a:	2e09      	cmp	r6, #9
 8004e8c:	d937      	bls.n	8004efe <_strtod_l+0x346>
 8004e8e:	9e06      	ldr	r6, [sp, #24]
 8004e90:	1b89      	subs	r1, r1, r6
 8004e92:	2908      	cmp	r1, #8
 8004e94:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004e98:	dc02      	bgt.n	8004ea0 <_strtod_l+0x2e8>
 8004e9a:	4576      	cmp	r6, lr
 8004e9c:	bfa8      	it	ge
 8004e9e:	4676      	movge	r6, lr
 8004ea0:	f1bc 0f00 	cmp.w	ip, #0
 8004ea4:	d000      	beq.n	8004ea8 <_strtod_l+0x2f0>
 8004ea6:	4276      	negs	r6, r6
 8004ea8:	2d00      	cmp	r5, #0
 8004eaa:	d14d      	bne.n	8004f48 <_strtod_l+0x390>
 8004eac:	9904      	ldr	r1, [sp, #16]
 8004eae:	4301      	orrs	r1, r0
 8004eb0:	f47f aec6 	bne.w	8004c40 <_strtod_l+0x88>
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f47f aee1 	bne.w	8004c7c <_strtod_l+0xc4>
 8004eba:	2a69      	cmp	r2, #105	; 0x69
 8004ebc:	d027      	beq.n	8004f0e <_strtod_l+0x356>
 8004ebe:	dc24      	bgt.n	8004f0a <_strtod_l+0x352>
 8004ec0:	2a49      	cmp	r2, #73	; 0x49
 8004ec2:	d024      	beq.n	8004f0e <_strtod_l+0x356>
 8004ec4:	2a4e      	cmp	r2, #78	; 0x4e
 8004ec6:	f47f aed9 	bne.w	8004c7c <_strtod_l+0xc4>
 8004eca:	499f      	ldr	r1, [pc, #636]	; (8005148 <_strtod_l+0x590>)
 8004ecc:	a817      	add	r0, sp, #92	; 0x5c
 8004ece:	f001 fe75 	bl	8006bbc <__match>
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	f43f aed2 	beq.w	8004c7c <_strtod_l+0xc4>
 8004ed8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b28      	cmp	r3, #40	; 0x28
 8004ede:	d12d      	bne.n	8004f3c <_strtod_l+0x384>
 8004ee0:	499a      	ldr	r1, [pc, #616]	; (800514c <_strtod_l+0x594>)
 8004ee2:	aa1a      	add	r2, sp, #104	; 0x68
 8004ee4:	a817      	add	r0, sp, #92	; 0x5c
 8004ee6:	f001 fe7d 	bl	8006be4 <__hexnan>
 8004eea:	2805      	cmp	r0, #5
 8004eec:	d126      	bne.n	8004f3c <_strtod_l+0x384>
 8004eee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ef0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8004ef4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004ef8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004efc:	e6a0      	b.n	8004c40 <_strtod_l+0x88>
 8004efe:	210a      	movs	r1, #10
 8004f00:	fb01 2e0e 	mla	lr, r1, lr, r2
 8004f04:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004f08:	e7b9      	b.n	8004e7e <_strtod_l+0x2c6>
 8004f0a:	2a6e      	cmp	r2, #110	; 0x6e
 8004f0c:	e7db      	b.n	8004ec6 <_strtod_l+0x30e>
 8004f0e:	4990      	ldr	r1, [pc, #576]	; (8005150 <_strtod_l+0x598>)
 8004f10:	a817      	add	r0, sp, #92	; 0x5c
 8004f12:	f001 fe53 	bl	8006bbc <__match>
 8004f16:	2800      	cmp	r0, #0
 8004f18:	f43f aeb0 	beq.w	8004c7c <_strtod_l+0xc4>
 8004f1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f1e:	498d      	ldr	r1, [pc, #564]	; (8005154 <_strtod_l+0x59c>)
 8004f20:	3b01      	subs	r3, #1
 8004f22:	a817      	add	r0, sp, #92	; 0x5c
 8004f24:	9317      	str	r3, [sp, #92]	; 0x5c
 8004f26:	f001 fe49 	bl	8006bbc <__match>
 8004f2a:	b910      	cbnz	r0, 8004f32 <_strtod_l+0x37a>
 8004f2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f2e:	3301      	adds	r3, #1
 8004f30:	9317      	str	r3, [sp, #92]	; 0x5c
 8004f32:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005164 <_strtod_l+0x5ac>
 8004f36:	f04f 0a00 	mov.w	sl, #0
 8004f3a:	e681      	b.n	8004c40 <_strtod_l+0x88>
 8004f3c:	4886      	ldr	r0, [pc, #536]	; (8005158 <_strtod_l+0x5a0>)
 8004f3e:	f003 f977 	bl	8008230 <nan>
 8004f42:	ec5b ab10 	vmov	sl, fp, d0
 8004f46:	e67b      	b.n	8004c40 <_strtod_l+0x88>
 8004f48:	9b05      	ldr	r3, [sp, #20]
 8004f4a:	9807      	ldr	r0, [sp, #28]
 8004f4c:	1af3      	subs	r3, r6, r3
 8004f4e:	2f00      	cmp	r7, #0
 8004f50:	bf08      	it	eq
 8004f52:	462f      	moveq	r7, r5
 8004f54:	2d10      	cmp	r5, #16
 8004f56:	9306      	str	r3, [sp, #24]
 8004f58:	46a8      	mov	r8, r5
 8004f5a:	bfa8      	it	ge
 8004f5c:	f04f 0810 	movge.w	r8, #16
 8004f60:	f7fb fae8 	bl	8000534 <__aeabi_ui2d>
 8004f64:	2d09      	cmp	r5, #9
 8004f66:	4682      	mov	sl, r0
 8004f68:	468b      	mov	fp, r1
 8004f6a:	dd13      	ble.n	8004f94 <_strtod_l+0x3dc>
 8004f6c:	4b7b      	ldr	r3, [pc, #492]	; (800515c <_strtod_l+0x5a4>)
 8004f6e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004f72:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004f76:	f7fb fb57 	bl	8000628 <__aeabi_dmul>
 8004f7a:	4682      	mov	sl, r0
 8004f7c:	4648      	mov	r0, r9
 8004f7e:	468b      	mov	fp, r1
 8004f80:	f7fb fad8 	bl	8000534 <__aeabi_ui2d>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4650      	mov	r0, sl
 8004f8a:	4659      	mov	r1, fp
 8004f8c:	f7fb f996 	bl	80002bc <__adddf3>
 8004f90:	4682      	mov	sl, r0
 8004f92:	468b      	mov	fp, r1
 8004f94:	2d0f      	cmp	r5, #15
 8004f96:	dc38      	bgt.n	800500a <_strtod_l+0x452>
 8004f98:	9b06      	ldr	r3, [sp, #24]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f43f ae50 	beq.w	8004c40 <_strtod_l+0x88>
 8004fa0:	dd24      	ble.n	8004fec <_strtod_l+0x434>
 8004fa2:	2b16      	cmp	r3, #22
 8004fa4:	dc0b      	bgt.n	8004fbe <_strtod_l+0x406>
 8004fa6:	496d      	ldr	r1, [pc, #436]	; (800515c <_strtod_l+0x5a4>)
 8004fa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004fac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fb0:	4652      	mov	r2, sl
 8004fb2:	465b      	mov	r3, fp
 8004fb4:	f7fb fb38 	bl	8000628 <__aeabi_dmul>
 8004fb8:	4682      	mov	sl, r0
 8004fba:	468b      	mov	fp, r1
 8004fbc:	e640      	b.n	8004c40 <_strtod_l+0x88>
 8004fbe:	9a06      	ldr	r2, [sp, #24]
 8004fc0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	db20      	blt.n	800500a <_strtod_l+0x452>
 8004fc8:	4c64      	ldr	r4, [pc, #400]	; (800515c <_strtod_l+0x5a4>)
 8004fca:	f1c5 050f 	rsb	r5, r5, #15
 8004fce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004fd2:	4652      	mov	r2, sl
 8004fd4:	465b      	mov	r3, fp
 8004fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fda:	f7fb fb25 	bl	8000628 <__aeabi_dmul>
 8004fde:	9b06      	ldr	r3, [sp, #24]
 8004fe0:	1b5d      	subs	r5, r3, r5
 8004fe2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004fe6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004fea:	e7e3      	b.n	8004fb4 <_strtod_l+0x3fc>
 8004fec:	9b06      	ldr	r3, [sp, #24]
 8004fee:	3316      	adds	r3, #22
 8004ff0:	db0b      	blt.n	800500a <_strtod_l+0x452>
 8004ff2:	9b05      	ldr	r3, [sp, #20]
 8004ff4:	1b9e      	subs	r6, r3, r6
 8004ff6:	4b59      	ldr	r3, [pc, #356]	; (800515c <_strtod_l+0x5a4>)
 8004ff8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004ffc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005000:	4650      	mov	r0, sl
 8005002:	4659      	mov	r1, fp
 8005004:	f7fb fc3a 	bl	800087c <__aeabi_ddiv>
 8005008:	e7d6      	b.n	8004fb8 <_strtod_l+0x400>
 800500a:	9b06      	ldr	r3, [sp, #24]
 800500c:	eba5 0808 	sub.w	r8, r5, r8
 8005010:	4498      	add	r8, r3
 8005012:	f1b8 0f00 	cmp.w	r8, #0
 8005016:	dd74      	ble.n	8005102 <_strtod_l+0x54a>
 8005018:	f018 030f 	ands.w	r3, r8, #15
 800501c:	d00a      	beq.n	8005034 <_strtod_l+0x47c>
 800501e:	494f      	ldr	r1, [pc, #316]	; (800515c <_strtod_l+0x5a4>)
 8005020:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005024:	4652      	mov	r2, sl
 8005026:	465b      	mov	r3, fp
 8005028:	e9d1 0100 	ldrd	r0, r1, [r1]
 800502c:	f7fb fafc 	bl	8000628 <__aeabi_dmul>
 8005030:	4682      	mov	sl, r0
 8005032:	468b      	mov	fp, r1
 8005034:	f038 080f 	bics.w	r8, r8, #15
 8005038:	d04f      	beq.n	80050da <_strtod_l+0x522>
 800503a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800503e:	dd22      	ble.n	8005086 <_strtod_l+0x4ce>
 8005040:	2500      	movs	r5, #0
 8005042:	462e      	mov	r6, r5
 8005044:	9507      	str	r5, [sp, #28]
 8005046:	9505      	str	r5, [sp, #20]
 8005048:	2322      	movs	r3, #34	; 0x22
 800504a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005164 <_strtod_l+0x5ac>
 800504e:	6023      	str	r3, [r4, #0]
 8005050:	f04f 0a00 	mov.w	sl, #0
 8005054:	9b07      	ldr	r3, [sp, #28]
 8005056:	2b00      	cmp	r3, #0
 8005058:	f43f adf2 	beq.w	8004c40 <_strtod_l+0x88>
 800505c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800505e:	4620      	mov	r0, r4
 8005060:	f001 feda 	bl	8006e18 <_Bfree>
 8005064:	9905      	ldr	r1, [sp, #20]
 8005066:	4620      	mov	r0, r4
 8005068:	f001 fed6 	bl	8006e18 <_Bfree>
 800506c:	4631      	mov	r1, r6
 800506e:	4620      	mov	r0, r4
 8005070:	f001 fed2 	bl	8006e18 <_Bfree>
 8005074:	9907      	ldr	r1, [sp, #28]
 8005076:	4620      	mov	r0, r4
 8005078:	f001 fece 	bl	8006e18 <_Bfree>
 800507c:	4629      	mov	r1, r5
 800507e:	4620      	mov	r0, r4
 8005080:	f001 feca 	bl	8006e18 <_Bfree>
 8005084:	e5dc      	b.n	8004c40 <_strtod_l+0x88>
 8005086:	4b36      	ldr	r3, [pc, #216]	; (8005160 <_strtod_l+0x5a8>)
 8005088:	9304      	str	r3, [sp, #16]
 800508a:	2300      	movs	r3, #0
 800508c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005090:	4650      	mov	r0, sl
 8005092:	4659      	mov	r1, fp
 8005094:	4699      	mov	r9, r3
 8005096:	f1b8 0f01 	cmp.w	r8, #1
 800509a:	dc21      	bgt.n	80050e0 <_strtod_l+0x528>
 800509c:	b10b      	cbz	r3, 80050a2 <_strtod_l+0x4ea>
 800509e:	4682      	mov	sl, r0
 80050a0:	468b      	mov	fp, r1
 80050a2:	4b2f      	ldr	r3, [pc, #188]	; (8005160 <_strtod_l+0x5a8>)
 80050a4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80050a8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80050ac:	4652      	mov	r2, sl
 80050ae:	465b      	mov	r3, fp
 80050b0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80050b4:	f7fb fab8 	bl	8000628 <__aeabi_dmul>
 80050b8:	4b2a      	ldr	r3, [pc, #168]	; (8005164 <_strtod_l+0x5ac>)
 80050ba:	460a      	mov	r2, r1
 80050bc:	400b      	ands	r3, r1
 80050be:	492a      	ldr	r1, [pc, #168]	; (8005168 <_strtod_l+0x5b0>)
 80050c0:	428b      	cmp	r3, r1
 80050c2:	4682      	mov	sl, r0
 80050c4:	d8bc      	bhi.n	8005040 <_strtod_l+0x488>
 80050c6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80050ca:	428b      	cmp	r3, r1
 80050cc:	bf86      	itte	hi
 80050ce:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800516c <_strtod_l+0x5b4>
 80050d2:	f04f 3aff 	movhi.w	sl, #4294967295
 80050d6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80050da:	2300      	movs	r3, #0
 80050dc:	9304      	str	r3, [sp, #16]
 80050de:	e084      	b.n	80051ea <_strtod_l+0x632>
 80050e0:	f018 0f01 	tst.w	r8, #1
 80050e4:	d005      	beq.n	80050f2 <_strtod_l+0x53a>
 80050e6:	9b04      	ldr	r3, [sp, #16]
 80050e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ec:	f7fb fa9c 	bl	8000628 <__aeabi_dmul>
 80050f0:	2301      	movs	r3, #1
 80050f2:	9a04      	ldr	r2, [sp, #16]
 80050f4:	3208      	adds	r2, #8
 80050f6:	f109 0901 	add.w	r9, r9, #1
 80050fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80050fe:	9204      	str	r2, [sp, #16]
 8005100:	e7c9      	b.n	8005096 <_strtod_l+0x4de>
 8005102:	d0ea      	beq.n	80050da <_strtod_l+0x522>
 8005104:	f1c8 0800 	rsb	r8, r8, #0
 8005108:	f018 020f 	ands.w	r2, r8, #15
 800510c:	d00a      	beq.n	8005124 <_strtod_l+0x56c>
 800510e:	4b13      	ldr	r3, [pc, #76]	; (800515c <_strtod_l+0x5a4>)
 8005110:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005114:	4650      	mov	r0, sl
 8005116:	4659      	mov	r1, fp
 8005118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511c:	f7fb fbae 	bl	800087c <__aeabi_ddiv>
 8005120:	4682      	mov	sl, r0
 8005122:	468b      	mov	fp, r1
 8005124:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005128:	d0d7      	beq.n	80050da <_strtod_l+0x522>
 800512a:	f1b8 0f1f 	cmp.w	r8, #31
 800512e:	dd1f      	ble.n	8005170 <_strtod_l+0x5b8>
 8005130:	2500      	movs	r5, #0
 8005132:	462e      	mov	r6, r5
 8005134:	9507      	str	r5, [sp, #28]
 8005136:	9505      	str	r5, [sp, #20]
 8005138:	2322      	movs	r3, #34	; 0x22
 800513a:	f04f 0a00 	mov.w	sl, #0
 800513e:	f04f 0b00 	mov.w	fp, #0
 8005142:	6023      	str	r3, [r4, #0]
 8005144:	e786      	b.n	8005054 <_strtod_l+0x49c>
 8005146:	bf00      	nop
 8005148:	08009701 	.word	0x08009701
 800514c:	08009740 	.word	0x08009740
 8005150:	080096f9 	.word	0x080096f9
 8005154:	08009884 	.word	0x08009884
 8005158:	08009b4b 	.word	0x08009b4b
 800515c:	08009a10 	.word	0x08009a10
 8005160:	080099e8 	.word	0x080099e8
 8005164:	7ff00000 	.word	0x7ff00000
 8005168:	7ca00000 	.word	0x7ca00000
 800516c:	7fefffff 	.word	0x7fefffff
 8005170:	f018 0310 	ands.w	r3, r8, #16
 8005174:	bf18      	it	ne
 8005176:	236a      	movne	r3, #106	; 0x6a
 8005178:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005528 <_strtod_l+0x970>
 800517c:	9304      	str	r3, [sp, #16]
 800517e:	4650      	mov	r0, sl
 8005180:	4659      	mov	r1, fp
 8005182:	2300      	movs	r3, #0
 8005184:	f018 0f01 	tst.w	r8, #1
 8005188:	d004      	beq.n	8005194 <_strtod_l+0x5dc>
 800518a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800518e:	f7fb fa4b 	bl	8000628 <__aeabi_dmul>
 8005192:	2301      	movs	r3, #1
 8005194:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005198:	f109 0908 	add.w	r9, r9, #8
 800519c:	d1f2      	bne.n	8005184 <_strtod_l+0x5cc>
 800519e:	b10b      	cbz	r3, 80051a4 <_strtod_l+0x5ec>
 80051a0:	4682      	mov	sl, r0
 80051a2:	468b      	mov	fp, r1
 80051a4:	9b04      	ldr	r3, [sp, #16]
 80051a6:	b1c3      	cbz	r3, 80051da <_strtod_l+0x622>
 80051a8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80051ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	4659      	mov	r1, fp
 80051b4:	dd11      	ble.n	80051da <_strtod_l+0x622>
 80051b6:	2b1f      	cmp	r3, #31
 80051b8:	f340 8124 	ble.w	8005404 <_strtod_l+0x84c>
 80051bc:	2b34      	cmp	r3, #52	; 0x34
 80051be:	bfde      	ittt	le
 80051c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80051c4:	f04f 33ff 	movle.w	r3, #4294967295
 80051c8:	fa03 f202 	lslle.w	r2, r3, r2
 80051cc:	f04f 0a00 	mov.w	sl, #0
 80051d0:	bfcc      	ite	gt
 80051d2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80051d6:	ea02 0b01 	andle.w	fp, r2, r1
 80051da:	2200      	movs	r2, #0
 80051dc:	2300      	movs	r3, #0
 80051de:	4650      	mov	r0, sl
 80051e0:	4659      	mov	r1, fp
 80051e2:	f7fb fc89 	bl	8000af8 <__aeabi_dcmpeq>
 80051e6:	2800      	cmp	r0, #0
 80051e8:	d1a2      	bne.n	8005130 <_strtod_l+0x578>
 80051ea:	9b07      	ldr	r3, [sp, #28]
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	9908      	ldr	r1, [sp, #32]
 80051f0:	462b      	mov	r3, r5
 80051f2:	463a      	mov	r2, r7
 80051f4:	4620      	mov	r0, r4
 80051f6:	f001 fe77 	bl	8006ee8 <__s2b>
 80051fa:	9007      	str	r0, [sp, #28]
 80051fc:	2800      	cmp	r0, #0
 80051fe:	f43f af1f 	beq.w	8005040 <_strtod_l+0x488>
 8005202:	9b05      	ldr	r3, [sp, #20]
 8005204:	1b9e      	subs	r6, r3, r6
 8005206:	9b06      	ldr	r3, [sp, #24]
 8005208:	2b00      	cmp	r3, #0
 800520a:	bfb4      	ite	lt
 800520c:	4633      	movlt	r3, r6
 800520e:	2300      	movge	r3, #0
 8005210:	930c      	str	r3, [sp, #48]	; 0x30
 8005212:	9b06      	ldr	r3, [sp, #24]
 8005214:	2500      	movs	r5, #0
 8005216:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800521a:	9312      	str	r3, [sp, #72]	; 0x48
 800521c:	462e      	mov	r6, r5
 800521e:	9b07      	ldr	r3, [sp, #28]
 8005220:	4620      	mov	r0, r4
 8005222:	6859      	ldr	r1, [r3, #4]
 8005224:	f001 fdb8 	bl	8006d98 <_Balloc>
 8005228:	9005      	str	r0, [sp, #20]
 800522a:	2800      	cmp	r0, #0
 800522c:	f43f af0c 	beq.w	8005048 <_strtod_l+0x490>
 8005230:	9b07      	ldr	r3, [sp, #28]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	3202      	adds	r2, #2
 8005236:	f103 010c 	add.w	r1, r3, #12
 800523a:	0092      	lsls	r2, r2, #2
 800523c:	300c      	adds	r0, #12
 800523e:	f001 fd9d 	bl	8006d7c <memcpy>
 8005242:	ec4b ab10 	vmov	d0, sl, fp
 8005246:	aa1a      	add	r2, sp, #104	; 0x68
 8005248:	a919      	add	r1, sp, #100	; 0x64
 800524a:	4620      	mov	r0, r4
 800524c:	f002 f992 	bl	8007574 <__d2b>
 8005250:	ec4b ab18 	vmov	d8, sl, fp
 8005254:	9018      	str	r0, [sp, #96]	; 0x60
 8005256:	2800      	cmp	r0, #0
 8005258:	f43f aef6 	beq.w	8005048 <_strtod_l+0x490>
 800525c:	2101      	movs	r1, #1
 800525e:	4620      	mov	r0, r4
 8005260:	f001 fedc 	bl	800701c <__i2b>
 8005264:	4606      	mov	r6, r0
 8005266:	2800      	cmp	r0, #0
 8005268:	f43f aeee 	beq.w	8005048 <_strtod_l+0x490>
 800526c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800526e:	9904      	ldr	r1, [sp, #16]
 8005270:	2b00      	cmp	r3, #0
 8005272:	bfab      	itete	ge
 8005274:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005276:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005278:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800527a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800527e:	bfac      	ite	ge
 8005280:	eb03 0902 	addge.w	r9, r3, r2
 8005284:	1ad7      	sublt	r7, r2, r3
 8005286:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005288:	eba3 0801 	sub.w	r8, r3, r1
 800528c:	4490      	add	r8, r2
 800528e:	4ba1      	ldr	r3, [pc, #644]	; (8005514 <_strtod_l+0x95c>)
 8005290:	f108 38ff 	add.w	r8, r8, #4294967295
 8005294:	4598      	cmp	r8, r3
 8005296:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800529a:	f280 80c7 	bge.w	800542c <_strtod_l+0x874>
 800529e:	eba3 0308 	sub.w	r3, r3, r8
 80052a2:	2b1f      	cmp	r3, #31
 80052a4:	eba2 0203 	sub.w	r2, r2, r3
 80052a8:	f04f 0101 	mov.w	r1, #1
 80052ac:	f300 80b1 	bgt.w	8005412 <_strtod_l+0x85a>
 80052b0:	fa01 f303 	lsl.w	r3, r1, r3
 80052b4:	930d      	str	r3, [sp, #52]	; 0x34
 80052b6:	2300      	movs	r3, #0
 80052b8:	9308      	str	r3, [sp, #32]
 80052ba:	eb09 0802 	add.w	r8, r9, r2
 80052be:	9b04      	ldr	r3, [sp, #16]
 80052c0:	45c1      	cmp	r9, r8
 80052c2:	4417      	add	r7, r2
 80052c4:	441f      	add	r7, r3
 80052c6:	464b      	mov	r3, r9
 80052c8:	bfa8      	it	ge
 80052ca:	4643      	movge	r3, r8
 80052cc:	42bb      	cmp	r3, r7
 80052ce:	bfa8      	it	ge
 80052d0:	463b      	movge	r3, r7
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	bfc2      	ittt	gt
 80052d6:	eba8 0803 	subgt.w	r8, r8, r3
 80052da:	1aff      	subgt	r7, r7, r3
 80052dc:	eba9 0903 	subgt.w	r9, r9, r3
 80052e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	dd17      	ble.n	8005316 <_strtod_l+0x75e>
 80052e6:	4631      	mov	r1, r6
 80052e8:	461a      	mov	r2, r3
 80052ea:	4620      	mov	r0, r4
 80052ec:	f001 ff56 	bl	800719c <__pow5mult>
 80052f0:	4606      	mov	r6, r0
 80052f2:	2800      	cmp	r0, #0
 80052f4:	f43f aea8 	beq.w	8005048 <_strtod_l+0x490>
 80052f8:	4601      	mov	r1, r0
 80052fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80052fc:	4620      	mov	r0, r4
 80052fe:	f001 fea3 	bl	8007048 <__multiply>
 8005302:	900b      	str	r0, [sp, #44]	; 0x2c
 8005304:	2800      	cmp	r0, #0
 8005306:	f43f ae9f 	beq.w	8005048 <_strtod_l+0x490>
 800530a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800530c:	4620      	mov	r0, r4
 800530e:	f001 fd83 	bl	8006e18 <_Bfree>
 8005312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005314:	9318      	str	r3, [sp, #96]	; 0x60
 8005316:	f1b8 0f00 	cmp.w	r8, #0
 800531a:	f300 808c 	bgt.w	8005436 <_strtod_l+0x87e>
 800531e:	9b06      	ldr	r3, [sp, #24]
 8005320:	2b00      	cmp	r3, #0
 8005322:	dd08      	ble.n	8005336 <_strtod_l+0x77e>
 8005324:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005326:	9905      	ldr	r1, [sp, #20]
 8005328:	4620      	mov	r0, r4
 800532a:	f001 ff37 	bl	800719c <__pow5mult>
 800532e:	9005      	str	r0, [sp, #20]
 8005330:	2800      	cmp	r0, #0
 8005332:	f43f ae89 	beq.w	8005048 <_strtod_l+0x490>
 8005336:	2f00      	cmp	r7, #0
 8005338:	dd08      	ble.n	800534c <_strtod_l+0x794>
 800533a:	9905      	ldr	r1, [sp, #20]
 800533c:	463a      	mov	r2, r7
 800533e:	4620      	mov	r0, r4
 8005340:	f001 ff86 	bl	8007250 <__lshift>
 8005344:	9005      	str	r0, [sp, #20]
 8005346:	2800      	cmp	r0, #0
 8005348:	f43f ae7e 	beq.w	8005048 <_strtod_l+0x490>
 800534c:	f1b9 0f00 	cmp.w	r9, #0
 8005350:	dd08      	ble.n	8005364 <_strtod_l+0x7ac>
 8005352:	4631      	mov	r1, r6
 8005354:	464a      	mov	r2, r9
 8005356:	4620      	mov	r0, r4
 8005358:	f001 ff7a 	bl	8007250 <__lshift>
 800535c:	4606      	mov	r6, r0
 800535e:	2800      	cmp	r0, #0
 8005360:	f43f ae72 	beq.w	8005048 <_strtod_l+0x490>
 8005364:	9a05      	ldr	r2, [sp, #20]
 8005366:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005368:	4620      	mov	r0, r4
 800536a:	f001 fffd 	bl	8007368 <__mdiff>
 800536e:	4605      	mov	r5, r0
 8005370:	2800      	cmp	r0, #0
 8005372:	f43f ae69 	beq.w	8005048 <_strtod_l+0x490>
 8005376:	68c3      	ldr	r3, [r0, #12]
 8005378:	930b      	str	r3, [sp, #44]	; 0x2c
 800537a:	2300      	movs	r3, #0
 800537c:	60c3      	str	r3, [r0, #12]
 800537e:	4631      	mov	r1, r6
 8005380:	f001 ffd6 	bl	8007330 <__mcmp>
 8005384:	2800      	cmp	r0, #0
 8005386:	da60      	bge.n	800544a <_strtod_l+0x892>
 8005388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800538a:	ea53 030a 	orrs.w	r3, r3, sl
 800538e:	f040 8082 	bne.w	8005496 <_strtod_l+0x8de>
 8005392:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005396:	2b00      	cmp	r3, #0
 8005398:	d17d      	bne.n	8005496 <_strtod_l+0x8de>
 800539a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800539e:	0d1b      	lsrs	r3, r3, #20
 80053a0:	051b      	lsls	r3, r3, #20
 80053a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80053a6:	d976      	bls.n	8005496 <_strtod_l+0x8de>
 80053a8:	696b      	ldr	r3, [r5, #20]
 80053aa:	b913      	cbnz	r3, 80053b2 <_strtod_l+0x7fa>
 80053ac:	692b      	ldr	r3, [r5, #16]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	dd71      	ble.n	8005496 <_strtod_l+0x8de>
 80053b2:	4629      	mov	r1, r5
 80053b4:	2201      	movs	r2, #1
 80053b6:	4620      	mov	r0, r4
 80053b8:	f001 ff4a 	bl	8007250 <__lshift>
 80053bc:	4631      	mov	r1, r6
 80053be:	4605      	mov	r5, r0
 80053c0:	f001 ffb6 	bl	8007330 <__mcmp>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	dd66      	ble.n	8005496 <_strtod_l+0x8de>
 80053c8:	9904      	ldr	r1, [sp, #16]
 80053ca:	4a53      	ldr	r2, [pc, #332]	; (8005518 <_strtod_l+0x960>)
 80053cc:	465b      	mov	r3, fp
 80053ce:	2900      	cmp	r1, #0
 80053d0:	f000 8081 	beq.w	80054d6 <_strtod_l+0x91e>
 80053d4:	ea02 010b 	and.w	r1, r2, fp
 80053d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80053dc:	dc7b      	bgt.n	80054d6 <_strtod_l+0x91e>
 80053de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80053e2:	f77f aea9 	ble.w	8005138 <_strtod_l+0x580>
 80053e6:	4b4d      	ldr	r3, [pc, #308]	; (800551c <_strtod_l+0x964>)
 80053e8:	4650      	mov	r0, sl
 80053ea:	4659      	mov	r1, fp
 80053ec:	2200      	movs	r2, #0
 80053ee:	f7fb f91b 	bl	8000628 <__aeabi_dmul>
 80053f2:	460b      	mov	r3, r1
 80053f4:	4303      	orrs	r3, r0
 80053f6:	bf08      	it	eq
 80053f8:	2322      	moveq	r3, #34	; 0x22
 80053fa:	4682      	mov	sl, r0
 80053fc:	468b      	mov	fp, r1
 80053fe:	bf08      	it	eq
 8005400:	6023      	streq	r3, [r4, #0]
 8005402:	e62b      	b.n	800505c <_strtod_l+0x4a4>
 8005404:	f04f 32ff 	mov.w	r2, #4294967295
 8005408:	fa02 f303 	lsl.w	r3, r2, r3
 800540c:	ea03 0a0a 	and.w	sl, r3, sl
 8005410:	e6e3      	b.n	80051da <_strtod_l+0x622>
 8005412:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005416:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800541a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800541e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005422:	fa01 f308 	lsl.w	r3, r1, r8
 8005426:	9308      	str	r3, [sp, #32]
 8005428:	910d      	str	r1, [sp, #52]	; 0x34
 800542a:	e746      	b.n	80052ba <_strtod_l+0x702>
 800542c:	2300      	movs	r3, #0
 800542e:	9308      	str	r3, [sp, #32]
 8005430:	2301      	movs	r3, #1
 8005432:	930d      	str	r3, [sp, #52]	; 0x34
 8005434:	e741      	b.n	80052ba <_strtod_l+0x702>
 8005436:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005438:	4642      	mov	r2, r8
 800543a:	4620      	mov	r0, r4
 800543c:	f001 ff08 	bl	8007250 <__lshift>
 8005440:	9018      	str	r0, [sp, #96]	; 0x60
 8005442:	2800      	cmp	r0, #0
 8005444:	f47f af6b 	bne.w	800531e <_strtod_l+0x766>
 8005448:	e5fe      	b.n	8005048 <_strtod_l+0x490>
 800544a:	465f      	mov	r7, fp
 800544c:	d16e      	bne.n	800552c <_strtod_l+0x974>
 800544e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005450:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005454:	b342      	cbz	r2, 80054a8 <_strtod_l+0x8f0>
 8005456:	4a32      	ldr	r2, [pc, #200]	; (8005520 <_strtod_l+0x968>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d128      	bne.n	80054ae <_strtod_l+0x8f6>
 800545c:	9b04      	ldr	r3, [sp, #16]
 800545e:	4651      	mov	r1, sl
 8005460:	b1eb      	cbz	r3, 800549e <_strtod_l+0x8e6>
 8005462:	4b2d      	ldr	r3, [pc, #180]	; (8005518 <_strtod_l+0x960>)
 8005464:	403b      	ands	r3, r7
 8005466:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800546a:	f04f 32ff 	mov.w	r2, #4294967295
 800546e:	d819      	bhi.n	80054a4 <_strtod_l+0x8ec>
 8005470:	0d1b      	lsrs	r3, r3, #20
 8005472:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	4299      	cmp	r1, r3
 800547c:	d117      	bne.n	80054ae <_strtod_l+0x8f6>
 800547e:	4b29      	ldr	r3, [pc, #164]	; (8005524 <_strtod_l+0x96c>)
 8005480:	429f      	cmp	r7, r3
 8005482:	d102      	bne.n	800548a <_strtod_l+0x8d2>
 8005484:	3101      	adds	r1, #1
 8005486:	f43f addf 	beq.w	8005048 <_strtod_l+0x490>
 800548a:	4b23      	ldr	r3, [pc, #140]	; (8005518 <_strtod_l+0x960>)
 800548c:	403b      	ands	r3, r7
 800548e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005492:	f04f 0a00 	mov.w	sl, #0
 8005496:	9b04      	ldr	r3, [sp, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1a4      	bne.n	80053e6 <_strtod_l+0x82e>
 800549c:	e5de      	b.n	800505c <_strtod_l+0x4a4>
 800549e:	f04f 33ff 	mov.w	r3, #4294967295
 80054a2:	e7ea      	b.n	800547a <_strtod_l+0x8c2>
 80054a4:	4613      	mov	r3, r2
 80054a6:	e7e8      	b.n	800547a <_strtod_l+0x8c2>
 80054a8:	ea53 030a 	orrs.w	r3, r3, sl
 80054ac:	d08c      	beq.n	80053c8 <_strtod_l+0x810>
 80054ae:	9b08      	ldr	r3, [sp, #32]
 80054b0:	b1db      	cbz	r3, 80054ea <_strtod_l+0x932>
 80054b2:	423b      	tst	r3, r7
 80054b4:	d0ef      	beq.n	8005496 <_strtod_l+0x8de>
 80054b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054b8:	9a04      	ldr	r2, [sp, #16]
 80054ba:	4650      	mov	r0, sl
 80054bc:	4659      	mov	r1, fp
 80054be:	b1c3      	cbz	r3, 80054f2 <_strtod_l+0x93a>
 80054c0:	f7ff fb5b 	bl	8004b7a <sulp>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	ec51 0b18 	vmov	r0, r1, d8
 80054cc:	f7fa fef6 	bl	80002bc <__adddf3>
 80054d0:	4682      	mov	sl, r0
 80054d2:	468b      	mov	fp, r1
 80054d4:	e7df      	b.n	8005496 <_strtod_l+0x8de>
 80054d6:	4013      	ands	r3, r2
 80054d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80054dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80054e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80054e4:	f04f 3aff 	mov.w	sl, #4294967295
 80054e8:	e7d5      	b.n	8005496 <_strtod_l+0x8de>
 80054ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054ec:	ea13 0f0a 	tst.w	r3, sl
 80054f0:	e7e0      	b.n	80054b4 <_strtod_l+0x8fc>
 80054f2:	f7ff fb42 	bl	8004b7a <sulp>
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	ec51 0b18 	vmov	r0, r1, d8
 80054fe:	f7fa fedb 	bl	80002b8 <__aeabi_dsub>
 8005502:	2200      	movs	r2, #0
 8005504:	2300      	movs	r3, #0
 8005506:	4682      	mov	sl, r0
 8005508:	468b      	mov	fp, r1
 800550a:	f7fb faf5 	bl	8000af8 <__aeabi_dcmpeq>
 800550e:	2800      	cmp	r0, #0
 8005510:	d0c1      	beq.n	8005496 <_strtod_l+0x8de>
 8005512:	e611      	b.n	8005138 <_strtod_l+0x580>
 8005514:	fffffc02 	.word	0xfffffc02
 8005518:	7ff00000 	.word	0x7ff00000
 800551c:	39500000 	.word	0x39500000
 8005520:	000fffff 	.word	0x000fffff
 8005524:	7fefffff 	.word	0x7fefffff
 8005528:	08009758 	.word	0x08009758
 800552c:	4631      	mov	r1, r6
 800552e:	4628      	mov	r0, r5
 8005530:	f002 f87c 	bl	800762c <__ratio>
 8005534:	ec59 8b10 	vmov	r8, r9, d0
 8005538:	ee10 0a10 	vmov	r0, s0
 800553c:	2200      	movs	r2, #0
 800553e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005542:	4649      	mov	r1, r9
 8005544:	f7fb faec 	bl	8000b20 <__aeabi_dcmple>
 8005548:	2800      	cmp	r0, #0
 800554a:	d07a      	beq.n	8005642 <_strtod_l+0xa8a>
 800554c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800554e:	2b00      	cmp	r3, #0
 8005550:	d04a      	beq.n	80055e8 <_strtod_l+0xa30>
 8005552:	4b95      	ldr	r3, [pc, #596]	; (80057a8 <_strtod_l+0xbf0>)
 8005554:	2200      	movs	r2, #0
 8005556:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800555a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80057a8 <_strtod_l+0xbf0>
 800555e:	f04f 0800 	mov.w	r8, #0
 8005562:	4b92      	ldr	r3, [pc, #584]	; (80057ac <_strtod_l+0xbf4>)
 8005564:	403b      	ands	r3, r7
 8005566:	930d      	str	r3, [sp, #52]	; 0x34
 8005568:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800556a:	4b91      	ldr	r3, [pc, #580]	; (80057b0 <_strtod_l+0xbf8>)
 800556c:	429a      	cmp	r2, r3
 800556e:	f040 80b0 	bne.w	80056d2 <_strtod_l+0xb1a>
 8005572:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005576:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800557a:	ec4b ab10 	vmov	d0, sl, fp
 800557e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005582:	f001 ff7b 	bl	800747c <__ulp>
 8005586:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800558a:	ec53 2b10 	vmov	r2, r3, d0
 800558e:	f7fb f84b 	bl	8000628 <__aeabi_dmul>
 8005592:	4652      	mov	r2, sl
 8005594:	465b      	mov	r3, fp
 8005596:	f7fa fe91 	bl	80002bc <__adddf3>
 800559a:	460b      	mov	r3, r1
 800559c:	4983      	ldr	r1, [pc, #524]	; (80057ac <_strtod_l+0xbf4>)
 800559e:	4a85      	ldr	r2, [pc, #532]	; (80057b4 <_strtod_l+0xbfc>)
 80055a0:	4019      	ands	r1, r3
 80055a2:	4291      	cmp	r1, r2
 80055a4:	4682      	mov	sl, r0
 80055a6:	d960      	bls.n	800566a <_strtod_l+0xab2>
 80055a8:	ee18 3a90 	vmov	r3, s17
 80055ac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d104      	bne.n	80055be <_strtod_l+0xa06>
 80055b4:	ee18 3a10 	vmov	r3, s16
 80055b8:	3301      	adds	r3, #1
 80055ba:	f43f ad45 	beq.w	8005048 <_strtod_l+0x490>
 80055be:	f8df b200 	ldr.w	fp, [pc, #512]	; 80057c0 <_strtod_l+0xc08>
 80055c2:	f04f 3aff 	mov.w	sl, #4294967295
 80055c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80055c8:	4620      	mov	r0, r4
 80055ca:	f001 fc25 	bl	8006e18 <_Bfree>
 80055ce:	9905      	ldr	r1, [sp, #20]
 80055d0:	4620      	mov	r0, r4
 80055d2:	f001 fc21 	bl	8006e18 <_Bfree>
 80055d6:	4631      	mov	r1, r6
 80055d8:	4620      	mov	r0, r4
 80055da:	f001 fc1d 	bl	8006e18 <_Bfree>
 80055de:	4629      	mov	r1, r5
 80055e0:	4620      	mov	r0, r4
 80055e2:	f001 fc19 	bl	8006e18 <_Bfree>
 80055e6:	e61a      	b.n	800521e <_strtod_l+0x666>
 80055e8:	f1ba 0f00 	cmp.w	sl, #0
 80055ec:	d11b      	bne.n	8005626 <_strtod_l+0xa6e>
 80055ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80055f2:	b9f3      	cbnz	r3, 8005632 <_strtod_l+0xa7a>
 80055f4:	4b6c      	ldr	r3, [pc, #432]	; (80057a8 <_strtod_l+0xbf0>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	4640      	mov	r0, r8
 80055fa:	4649      	mov	r1, r9
 80055fc:	f7fb fa86 	bl	8000b0c <__aeabi_dcmplt>
 8005600:	b9d0      	cbnz	r0, 8005638 <_strtod_l+0xa80>
 8005602:	4640      	mov	r0, r8
 8005604:	4649      	mov	r1, r9
 8005606:	4b6c      	ldr	r3, [pc, #432]	; (80057b8 <_strtod_l+0xc00>)
 8005608:	2200      	movs	r2, #0
 800560a:	f7fb f80d 	bl	8000628 <__aeabi_dmul>
 800560e:	4680      	mov	r8, r0
 8005610:	4689      	mov	r9, r1
 8005612:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005616:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800561a:	9315      	str	r3, [sp, #84]	; 0x54
 800561c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005620:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005624:	e79d      	b.n	8005562 <_strtod_l+0x9aa>
 8005626:	f1ba 0f01 	cmp.w	sl, #1
 800562a:	d102      	bne.n	8005632 <_strtod_l+0xa7a>
 800562c:	2f00      	cmp	r7, #0
 800562e:	f43f ad83 	beq.w	8005138 <_strtod_l+0x580>
 8005632:	4b62      	ldr	r3, [pc, #392]	; (80057bc <_strtod_l+0xc04>)
 8005634:	2200      	movs	r2, #0
 8005636:	e78e      	b.n	8005556 <_strtod_l+0x99e>
 8005638:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80057b8 <_strtod_l+0xc00>
 800563c:	f04f 0800 	mov.w	r8, #0
 8005640:	e7e7      	b.n	8005612 <_strtod_l+0xa5a>
 8005642:	4b5d      	ldr	r3, [pc, #372]	; (80057b8 <_strtod_l+0xc00>)
 8005644:	4640      	mov	r0, r8
 8005646:	4649      	mov	r1, r9
 8005648:	2200      	movs	r2, #0
 800564a:	f7fa ffed 	bl	8000628 <__aeabi_dmul>
 800564e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005650:	4680      	mov	r8, r0
 8005652:	4689      	mov	r9, r1
 8005654:	b933      	cbnz	r3, 8005664 <_strtod_l+0xaac>
 8005656:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800565a:	900e      	str	r0, [sp, #56]	; 0x38
 800565c:	930f      	str	r3, [sp, #60]	; 0x3c
 800565e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005662:	e7dd      	b.n	8005620 <_strtod_l+0xa68>
 8005664:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8005668:	e7f9      	b.n	800565e <_strtod_l+0xaa6>
 800566a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800566e:	9b04      	ldr	r3, [sp, #16]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1a8      	bne.n	80055c6 <_strtod_l+0xa0e>
 8005674:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005678:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800567a:	0d1b      	lsrs	r3, r3, #20
 800567c:	051b      	lsls	r3, r3, #20
 800567e:	429a      	cmp	r2, r3
 8005680:	d1a1      	bne.n	80055c6 <_strtod_l+0xa0e>
 8005682:	4640      	mov	r0, r8
 8005684:	4649      	mov	r1, r9
 8005686:	f7fb fb67 	bl	8000d58 <__aeabi_d2lz>
 800568a:	f7fa ff9f 	bl	80005cc <__aeabi_l2d>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	4640      	mov	r0, r8
 8005694:	4649      	mov	r1, r9
 8005696:	f7fa fe0f 	bl	80002b8 <__aeabi_dsub>
 800569a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800569c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80056a0:	ea43 030a 	orr.w	r3, r3, sl
 80056a4:	4313      	orrs	r3, r2
 80056a6:	4680      	mov	r8, r0
 80056a8:	4689      	mov	r9, r1
 80056aa:	d055      	beq.n	8005758 <_strtod_l+0xba0>
 80056ac:	a336      	add	r3, pc, #216	; (adr r3, 8005788 <_strtod_l+0xbd0>)
 80056ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b2:	f7fb fa2b 	bl	8000b0c <__aeabi_dcmplt>
 80056b6:	2800      	cmp	r0, #0
 80056b8:	f47f acd0 	bne.w	800505c <_strtod_l+0x4a4>
 80056bc:	a334      	add	r3, pc, #208	; (adr r3, 8005790 <_strtod_l+0xbd8>)
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	4640      	mov	r0, r8
 80056c4:	4649      	mov	r1, r9
 80056c6:	f7fb fa3f 	bl	8000b48 <__aeabi_dcmpgt>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	f43f af7b 	beq.w	80055c6 <_strtod_l+0xa0e>
 80056d0:	e4c4      	b.n	800505c <_strtod_l+0x4a4>
 80056d2:	9b04      	ldr	r3, [sp, #16]
 80056d4:	b333      	cbz	r3, 8005724 <_strtod_l+0xb6c>
 80056d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056d8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80056dc:	d822      	bhi.n	8005724 <_strtod_l+0xb6c>
 80056de:	a32e      	add	r3, pc, #184	; (adr r3, 8005798 <_strtod_l+0xbe0>)
 80056e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e4:	4640      	mov	r0, r8
 80056e6:	4649      	mov	r1, r9
 80056e8:	f7fb fa1a 	bl	8000b20 <__aeabi_dcmple>
 80056ec:	b1a0      	cbz	r0, 8005718 <_strtod_l+0xb60>
 80056ee:	4649      	mov	r1, r9
 80056f0:	4640      	mov	r0, r8
 80056f2:	f7fb fa71 	bl	8000bd8 <__aeabi_d2uiz>
 80056f6:	2801      	cmp	r0, #1
 80056f8:	bf38      	it	cc
 80056fa:	2001      	movcc	r0, #1
 80056fc:	f7fa ff1a 	bl	8000534 <__aeabi_ui2d>
 8005700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005702:	4680      	mov	r8, r0
 8005704:	4689      	mov	r9, r1
 8005706:	bb23      	cbnz	r3, 8005752 <_strtod_l+0xb9a>
 8005708:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800570c:	9010      	str	r0, [sp, #64]	; 0x40
 800570e:	9311      	str	r3, [sp, #68]	; 0x44
 8005710:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005714:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800571a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800571c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005720:	1a9b      	subs	r3, r3, r2
 8005722:	9309      	str	r3, [sp, #36]	; 0x24
 8005724:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005728:	eeb0 0a48 	vmov.f32	s0, s16
 800572c:	eef0 0a68 	vmov.f32	s1, s17
 8005730:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005734:	f001 fea2 	bl	800747c <__ulp>
 8005738:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800573c:	ec53 2b10 	vmov	r2, r3, d0
 8005740:	f7fa ff72 	bl	8000628 <__aeabi_dmul>
 8005744:	ec53 2b18 	vmov	r2, r3, d8
 8005748:	f7fa fdb8 	bl	80002bc <__adddf3>
 800574c:	4682      	mov	sl, r0
 800574e:	468b      	mov	fp, r1
 8005750:	e78d      	b.n	800566e <_strtod_l+0xab6>
 8005752:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8005756:	e7db      	b.n	8005710 <_strtod_l+0xb58>
 8005758:	a311      	add	r3, pc, #68	; (adr r3, 80057a0 <_strtod_l+0xbe8>)
 800575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575e:	f7fb f9d5 	bl	8000b0c <__aeabi_dcmplt>
 8005762:	e7b2      	b.n	80056ca <_strtod_l+0xb12>
 8005764:	2300      	movs	r3, #0
 8005766:	930a      	str	r3, [sp, #40]	; 0x28
 8005768:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800576a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	f7ff ba6b 	b.w	8004c48 <_strtod_l+0x90>
 8005772:	2a65      	cmp	r2, #101	; 0x65
 8005774:	f43f ab5f 	beq.w	8004e36 <_strtod_l+0x27e>
 8005778:	2a45      	cmp	r2, #69	; 0x45
 800577a:	f43f ab5c 	beq.w	8004e36 <_strtod_l+0x27e>
 800577e:	2301      	movs	r3, #1
 8005780:	f7ff bb94 	b.w	8004eac <_strtod_l+0x2f4>
 8005784:	f3af 8000 	nop.w
 8005788:	94a03595 	.word	0x94a03595
 800578c:	3fdfffff 	.word	0x3fdfffff
 8005790:	35afe535 	.word	0x35afe535
 8005794:	3fe00000 	.word	0x3fe00000
 8005798:	ffc00000 	.word	0xffc00000
 800579c:	41dfffff 	.word	0x41dfffff
 80057a0:	94a03595 	.word	0x94a03595
 80057a4:	3fcfffff 	.word	0x3fcfffff
 80057a8:	3ff00000 	.word	0x3ff00000
 80057ac:	7ff00000 	.word	0x7ff00000
 80057b0:	7fe00000 	.word	0x7fe00000
 80057b4:	7c9fffff 	.word	0x7c9fffff
 80057b8:	3fe00000 	.word	0x3fe00000
 80057bc:	bff00000 	.word	0xbff00000
 80057c0:	7fefffff 	.word	0x7fefffff

080057c4 <_strtod_r>:
 80057c4:	4b01      	ldr	r3, [pc, #4]	; (80057cc <_strtod_r+0x8>)
 80057c6:	f7ff b9f7 	b.w	8004bb8 <_strtod_l>
 80057ca:	bf00      	nop
 80057cc:	2000007c 	.word	0x2000007c

080057d0 <strtod>:
 80057d0:	460a      	mov	r2, r1
 80057d2:	4601      	mov	r1, r0
 80057d4:	4802      	ldr	r0, [pc, #8]	; (80057e0 <strtod+0x10>)
 80057d6:	4b03      	ldr	r3, [pc, #12]	; (80057e4 <strtod+0x14>)
 80057d8:	6800      	ldr	r0, [r0, #0]
 80057da:	f7ff b9ed 	b.w	8004bb8 <_strtod_l>
 80057de:	bf00      	nop
 80057e0:	20000014 	.word	0x20000014
 80057e4:	2000007c 	.word	0x2000007c

080057e8 <_strtol_l.constprop.0>:
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057ee:	d001      	beq.n	80057f4 <_strtol_l.constprop.0+0xc>
 80057f0:	2b24      	cmp	r3, #36	; 0x24
 80057f2:	d906      	bls.n	8005802 <_strtol_l.constprop.0+0x1a>
 80057f4:	f7fe fa7e 	bl	8003cf4 <__errno>
 80057f8:	2316      	movs	r3, #22
 80057fa:	6003      	str	r3, [r0, #0]
 80057fc:	2000      	movs	r0, #0
 80057fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005802:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80058e8 <_strtol_l.constprop.0+0x100>
 8005806:	460d      	mov	r5, r1
 8005808:	462e      	mov	r6, r5
 800580a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800580e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005812:	f017 0708 	ands.w	r7, r7, #8
 8005816:	d1f7      	bne.n	8005808 <_strtol_l.constprop.0+0x20>
 8005818:	2c2d      	cmp	r4, #45	; 0x2d
 800581a:	d132      	bne.n	8005882 <_strtol_l.constprop.0+0x9a>
 800581c:	782c      	ldrb	r4, [r5, #0]
 800581e:	2701      	movs	r7, #1
 8005820:	1cb5      	adds	r5, r6, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d05b      	beq.n	80058de <_strtol_l.constprop.0+0xf6>
 8005826:	2b10      	cmp	r3, #16
 8005828:	d109      	bne.n	800583e <_strtol_l.constprop.0+0x56>
 800582a:	2c30      	cmp	r4, #48	; 0x30
 800582c:	d107      	bne.n	800583e <_strtol_l.constprop.0+0x56>
 800582e:	782c      	ldrb	r4, [r5, #0]
 8005830:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005834:	2c58      	cmp	r4, #88	; 0x58
 8005836:	d14d      	bne.n	80058d4 <_strtol_l.constprop.0+0xec>
 8005838:	786c      	ldrb	r4, [r5, #1]
 800583a:	2310      	movs	r3, #16
 800583c:	3502      	adds	r5, #2
 800583e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005842:	f108 38ff 	add.w	r8, r8, #4294967295
 8005846:	f04f 0c00 	mov.w	ip, #0
 800584a:	fbb8 f9f3 	udiv	r9, r8, r3
 800584e:	4666      	mov	r6, ip
 8005850:	fb03 8a19 	mls	sl, r3, r9, r8
 8005854:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005858:	f1be 0f09 	cmp.w	lr, #9
 800585c:	d816      	bhi.n	800588c <_strtol_l.constprop.0+0xa4>
 800585e:	4674      	mov	r4, lr
 8005860:	42a3      	cmp	r3, r4
 8005862:	dd24      	ble.n	80058ae <_strtol_l.constprop.0+0xc6>
 8005864:	f1bc 0f00 	cmp.w	ip, #0
 8005868:	db1e      	blt.n	80058a8 <_strtol_l.constprop.0+0xc0>
 800586a:	45b1      	cmp	r9, r6
 800586c:	d31c      	bcc.n	80058a8 <_strtol_l.constprop.0+0xc0>
 800586e:	d101      	bne.n	8005874 <_strtol_l.constprop.0+0x8c>
 8005870:	45a2      	cmp	sl, r4
 8005872:	db19      	blt.n	80058a8 <_strtol_l.constprop.0+0xc0>
 8005874:	fb06 4603 	mla	r6, r6, r3, r4
 8005878:	f04f 0c01 	mov.w	ip, #1
 800587c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005880:	e7e8      	b.n	8005854 <_strtol_l.constprop.0+0x6c>
 8005882:	2c2b      	cmp	r4, #43	; 0x2b
 8005884:	bf04      	itt	eq
 8005886:	782c      	ldrbeq	r4, [r5, #0]
 8005888:	1cb5      	addeq	r5, r6, #2
 800588a:	e7ca      	b.n	8005822 <_strtol_l.constprop.0+0x3a>
 800588c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005890:	f1be 0f19 	cmp.w	lr, #25
 8005894:	d801      	bhi.n	800589a <_strtol_l.constprop.0+0xb2>
 8005896:	3c37      	subs	r4, #55	; 0x37
 8005898:	e7e2      	b.n	8005860 <_strtol_l.constprop.0+0x78>
 800589a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800589e:	f1be 0f19 	cmp.w	lr, #25
 80058a2:	d804      	bhi.n	80058ae <_strtol_l.constprop.0+0xc6>
 80058a4:	3c57      	subs	r4, #87	; 0x57
 80058a6:	e7db      	b.n	8005860 <_strtol_l.constprop.0+0x78>
 80058a8:	f04f 3cff 	mov.w	ip, #4294967295
 80058ac:	e7e6      	b.n	800587c <_strtol_l.constprop.0+0x94>
 80058ae:	f1bc 0f00 	cmp.w	ip, #0
 80058b2:	da05      	bge.n	80058c0 <_strtol_l.constprop.0+0xd8>
 80058b4:	2322      	movs	r3, #34	; 0x22
 80058b6:	6003      	str	r3, [r0, #0]
 80058b8:	4646      	mov	r6, r8
 80058ba:	b942      	cbnz	r2, 80058ce <_strtol_l.constprop.0+0xe6>
 80058bc:	4630      	mov	r0, r6
 80058be:	e79e      	b.n	80057fe <_strtol_l.constprop.0+0x16>
 80058c0:	b107      	cbz	r7, 80058c4 <_strtol_l.constprop.0+0xdc>
 80058c2:	4276      	negs	r6, r6
 80058c4:	2a00      	cmp	r2, #0
 80058c6:	d0f9      	beq.n	80058bc <_strtol_l.constprop.0+0xd4>
 80058c8:	f1bc 0f00 	cmp.w	ip, #0
 80058cc:	d000      	beq.n	80058d0 <_strtol_l.constprop.0+0xe8>
 80058ce:	1e69      	subs	r1, r5, #1
 80058d0:	6011      	str	r1, [r2, #0]
 80058d2:	e7f3      	b.n	80058bc <_strtol_l.constprop.0+0xd4>
 80058d4:	2430      	movs	r4, #48	; 0x30
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1b1      	bne.n	800583e <_strtol_l.constprop.0+0x56>
 80058da:	2308      	movs	r3, #8
 80058dc:	e7af      	b.n	800583e <_strtol_l.constprop.0+0x56>
 80058de:	2c30      	cmp	r4, #48	; 0x30
 80058e0:	d0a5      	beq.n	800582e <_strtol_l.constprop.0+0x46>
 80058e2:	230a      	movs	r3, #10
 80058e4:	e7ab      	b.n	800583e <_strtol_l.constprop.0+0x56>
 80058e6:	bf00      	nop
 80058e8:	08009781 	.word	0x08009781

080058ec <_strtol_r>:
 80058ec:	f7ff bf7c 	b.w	80057e8 <_strtol_l.constprop.0>

080058f0 <strtol>:
 80058f0:	4613      	mov	r3, r2
 80058f2:	460a      	mov	r2, r1
 80058f4:	4601      	mov	r1, r0
 80058f6:	4802      	ldr	r0, [pc, #8]	; (8005900 <strtol+0x10>)
 80058f8:	6800      	ldr	r0, [r0, #0]
 80058fa:	f7ff bf75 	b.w	80057e8 <_strtol_l.constprop.0>
 80058fe:	bf00      	nop
 8005900:	20000014 	.word	0x20000014

08005904 <_write_r>:
 8005904:	b538      	push	{r3, r4, r5, lr}
 8005906:	4d07      	ldr	r5, [pc, #28]	; (8005924 <_write_r+0x20>)
 8005908:	4604      	mov	r4, r0
 800590a:	4608      	mov	r0, r1
 800590c:	4611      	mov	r1, r2
 800590e:	2200      	movs	r2, #0
 8005910:	602a      	str	r2, [r5, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	f7fd f90c 	bl	8002b30 <_write>
 8005918:	1c43      	adds	r3, r0, #1
 800591a:	d102      	bne.n	8005922 <_write_r+0x1e>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	b103      	cbz	r3, 8005922 <_write_r+0x1e>
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	2000968c 	.word	0x2000968c

08005928 <_close_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	4d06      	ldr	r5, [pc, #24]	; (8005944 <_close_r+0x1c>)
 800592c:	2300      	movs	r3, #0
 800592e:	4604      	mov	r4, r0
 8005930:	4608      	mov	r0, r1
 8005932:	602b      	str	r3, [r5, #0]
 8005934:	f7fd f918 	bl	8002b68 <_close>
 8005938:	1c43      	adds	r3, r0, #1
 800593a:	d102      	bne.n	8005942 <_close_r+0x1a>
 800593c:	682b      	ldr	r3, [r5, #0]
 800593e:	b103      	cbz	r3, 8005942 <_close_r+0x1a>
 8005940:	6023      	str	r3, [r4, #0]
 8005942:	bd38      	pop	{r3, r4, r5, pc}
 8005944:	2000968c 	.word	0x2000968c

08005948 <quorem>:
 8005948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800594c:	6903      	ldr	r3, [r0, #16]
 800594e:	690c      	ldr	r4, [r1, #16]
 8005950:	42a3      	cmp	r3, r4
 8005952:	4607      	mov	r7, r0
 8005954:	f2c0 8081 	blt.w	8005a5a <quorem+0x112>
 8005958:	3c01      	subs	r4, #1
 800595a:	f101 0814 	add.w	r8, r1, #20
 800595e:	f100 0514 	add.w	r5, r0, #20
 8005962:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005966:	9301      	str	r3, [sp, #4]
 8005968:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800596c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005970:	3301      	adds	r3, #1
 8005972:	429a      	cmp	r2, r3
 8005974:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005978:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800597c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005980:	d331      	bcc.n	80059e6 <quorem+0x9e>
 8005982:	f04f 0e00 	mov.w	lr, #0
 8005986:	4640      	mov	r0, r8
 8005988:	46ac      	mov	ip, r5
 800598a:	46f2      	mov	sl, lr
 800598c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005990:	b293      	uxth	r3, r2
 8005992:	fb06 e303 	mla	r3, r6, r3, lr
 8005996:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800599a:	b29b      	uxth	r3, r3
 800599c:	ebaa 0303 	sub.w	r3, sl, r3
 80059a0:	f8dc a000 	ldr.w	sl, [ip]
 80059a4:	0c12      	lsrs	r2, r2, #16
 80059a6:	fa13 f38a 	uxtah	r3, r3, sl
 80059aa:	fb06 e202 	mla	r2, r6, r2, lr
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	9b00      	ldr	r3, [sp, #0]
 80059b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059b6:	b292      	uxth	r2, r2
 80059b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80059bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80059c4:	4581      	cmp	r9, r0
 80059c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059ca:	f84c 3b04 	str.w	r3, [ip], #4
 80059ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80059d2:	d2db      	bcs.n	800598c <quorem+0x44>
 80059d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80059d8:	b92b      	cbnz	r3, 80059e6 <quorem+0x9e>
 80059da:	9b01      	ldr	r3, [sp, #4]
 80059dc:	3b04      	subs	r3, #4
 80059de:	429d      	cmp	r5, r3
 80059e0:	461a      	mov	r2, r3
 80059e2:	d32e      	bcc.n	8005a42 <quorem+0xfa>
 80059e4:	613c      	str	r4, [r7, #16]
 80059e6:	4638      	mov	r0, r7
 80059e8:	f001 fca2 	bl	8007330 <__mcmp>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	db24      	blt.n	8005a3a <quorem+0xf2>
 80059f0:	3601      	adds	r6, #1
 80059f2:	4628      	mov	r0, r5
 80059f4:	f04f 0c00 	mov.w	ip, #0
 80059f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80059fc:	f8d0 e000 	ldr.w	lr, [r0]
 8005a00:	b293      	uxth	r3, r2
 8005a02:	ebac 0303 	sub.w	r3, ip, r3
 8005a06:	0c12      	lsrs	r2, r2, #16
 8005a08:	fa13 f38e 	uxtah	r3, r3, lr
 8005a0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a1a:	45c1      	cmp	r9, r8
 8005a1c:	f840 3b04 	str.w	r3, [r0], #4
 8005a20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a24:	d2e8      	bcs.n	80059f8 <quorem+0xb0>
 8005a26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a2e:	b922      	cbnz	r2, 8005a3a <quorem+0xf2>
 8005a30:	3b04      	subs	r3, #4
 8005a32:	429d      	cmp	r5, r3
 8005a34:	461a      	mov	r2, r3
 8005a36:	d30a      	bcc.n	8005a4e <quorem+0x106>
 8005a38:	613c      	str	r4, [r7, #16]
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	b003      	add	sp, #12
 8005a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a42:	6812      	ldr	r2, [r2, #0]
 8005a44:	3b04      	subs	r3, #4
 8005a46:	2a00      	cmp	r2, #0
 8005a48:	d1cc      	bne.n	80059e4 <quorem+0x9c>
 8005a4a:	3c01      	subs	r4, #1
 8005a4c:	e7c7      	b.n	80059de <quorem+0x96>
 8005a4e:	6812      	ldr	r2, [r2, #0]
 8005a50:	3b04      	subs	r3, #4
 8005a52:	2a00      	cmp	r2, #0
 8005a54:	d1f0      	bne.n	8005a38 <quorem+0xf0>
 8005a56:	3c01      	subs	r4, #1
 8005a58:	e7eb      	b.n	8005a32 <quorem+0xea>
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	e7ee      	b.n	8005a3c <quorem+0xf4>
	...

08005a60 <_dtoa_r>:
 8005a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a64:	ed2d 8b04 	vpush	{d8-d9}
 8005a68:	ec57 6b10 	vmov	r6, r7, d0
 8005a6c:	b093      	sub	sp, #76	; 0x4c
 8005a6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005a74:	9106      	str	r1, [sp, #24]
 8005a76:	ee10 aa10 	vmov	sl, s0
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	9209      	str	r2, [sp, #36]	; 0x24
 8005a7e:	930c      	str	r3, [sp, #48]	; 0x30
 8005a80:	46bb      	mov	fp, r7
 8005a82:	b975      	cbnz	r5, 8005aa2 <_dtoa_r+0x42>
 8005a84:	2010      	movs	r0, #16
 8005a86:	f001 f95f 	bl	8006d48 <malloc>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	6260      	str	r0, [r4, #36]	; 0x24
 8005a8e:	b920      	cbnz	r0, 8005a9a <_dtoa_r+0x3a>
 8005a90:	4ba7      	ldr	r3, [pc, #668]	; (8005d30 <_dtoa_r+0x2d0>)
 8005a92:	21ea      	movs	r1, #234	; 0xea
 8005a94:	48a7      	ldr	r0, [pc, #668]	; (8005d34 <_dtoa_r+0x2d4>)
 8005a96:	f002 fceb 	bl	8008470 <__assert_func>
 8005a9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a9e:	6005      	str	r5, [r0, #0]
 8005aa0:	60c5      	str	r5, [r0, #12]
 8005aa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aa4:	6819      	ldr	r1, [r3, #0]
 8005aa6:	b151      	cbz	r1, 8005abe <_dtoa_r+0x5e>
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	604a      	str	r2, [r1, #4]
 8005aac:	2301      	movs	r3, #1
 8005aae:	4093      	lsls	r3, r2
 8005ab0:	608b      	str	r3, [r1, #8]
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f001 f9b0 	bl	8006e18 <_Bfree>
 8005ab8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aba:	2200      	movs	r2, #0
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	1e3b      	subs	r3, r7, #0
 8005ac0:	bfaa      	itet	ge
 8005ac2:	2300      	movge	r3, #0
 8005ac4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005ac8:	f8c8 3000 	strge.w	r3, [r8]
 8005acc:	4b9a      	ldr	r3, [pc, #616]	; (8005d38 <_dtoa_r+0x2d8>)
 8005ace:	bfbc      	itt	lt
 8005ad0:	2201      	movlt	r2, #1
 8005ad2:	f8c8 2000 	strlt.w	r2, [r8]
 8005ad6:	ea33 030b 	bics.w	r3, r3, fp
 8005ada:	d11b      	bne.n	8005b14 <_dtoa_r+0xb4>
 8005adc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ade:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ae2:	6013      	str	r3, [r2, #0]
 8005ae4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ae8:	4333      	orrs	r3, r6
 8005aea:	f000 8592 	beq.w	8006612 <_dtoa_r+0xbb2>
 8005aee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005af0:	b963      	cbnz	r3, 8005b0c <_dtoa_r+0xac>
 8005af2:	4b92      	ldr	r3, [pc, #584]	; (8005d3c <_dtoa_r+0x2dc>)
 8005af4:	e022      	b.n	8005b3c <_dtoa_r+0xdc>
 8005af6:	4b92      	ldr	r3, [pc, #584]	; (8005d40 <_dtoa_r+0x2e0>)
 8005af8:	9301      	str	r3, [sp, #4]
 8005afa:	3308      	adds	r3, #8
 8005afc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005afe:	6013      	str	r3, [r2, #0]
 8005b00:	9801      	ldr	r0, [sp, #4]
 8005b02:	b013      	add	sp, #76	; 0x4c
 8005b04:	ecbd 8b04 	vpop	{d8-d9}
 8005b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b0c:	4b8b      	ldr	r3, [pc, #556]	; (8005d3c <_dtoa_r+0x2dc>)
 8005b0e:	9301      	str	r3, [sp, #4]
 8005b10:	3303      	adds	r3, #3
 8005b12:	e7f3      	b.n	8005afc <_dtoa_r+0x9c>
 8005b14:	2200      	movs	r2, #0
 8005b16:	2300      	movs	r3, #0
 8005b18:	4650      	mov	r0, sl
 8005b1a:	4659      	mov	r1, fp
 8005b1c:	f7fa ffec 	bl	8000af8 <__aeabi_dcmpeq>
 8005b20:	ec4b ab19 	vmov	d9, sl, fp
 8005b24:	4680      	mov	r8, r0
 8005b26:	b158      	cbz	r0, 8005b40 <_dtoa_r+0xe0>
 8005b28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	6013      	str	r3, [r2, #0]
 8005b2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 856b 	beq.w	800660c <_dtoa_r+0xbac>
 8005b36:	4883      	ldr	r0, [pc, #524]	; (8005d44 <_dtoa_r+0x2e4>)
 8005b38:	6018      	str	r0, [r3, #0]
 8005b3a:	1e43      	subs	r3, r0, #1
 8005b3c:	9301      	str	r3, [sp, #4]
 8005b3e:	e7df      	b.n	8005b00 <_dtoa_r+0xa0>
 8005b40:	ec4b ab10 	vmov	d0, sl, fp
 8005b44:	aa10      	add	r2, sp, #64	; 0x40
 8005b46:	a911      	add	r1, sp, #68	; 0x44
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f001 fd13 	bl	8007574 <__d2b>
 8005b4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005b52:	ee08 0a10 	vmov	s16, r0
 8005b56:	2d00      	cmp	r5, #0
 8005b58:	f000 8084 	beq.w	8005c64 <_dtoa_r+0x204>
 8005b5c:	ee19 3a90 	vmov	r3, s19
 8005b60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005b68:	4656      	mov	r6, sl
 8005b6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005b6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005b72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005b76:	4b74      	ldr	r3, [pc, #464]	; (8005d48 <_dtoa_r+0x2e8>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	4639      	mov	r1, r7
 8005b7e:	f7fa fb9b 	bl	80002b8 <__aeabi_dsub>
 8005b82:	a365      	add	r3, pc, #404	; (adr r3, 8005d18 <_dtoa_r+0x2b8>)
 8005b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b88:	f7fa fd4e 	bl	8000628 <__aeabi_dmul>
 8005b8c:	a364      	add	r3, pc, #400	; (adr r3, 8005d20 <_dtoa_r+0x2c0>)
 8005b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b92:	f7fa fb93 	bl	80002bc <__adddf3>
 8005b96:	4606      	mov	r6, r0
 8005b98:	4628      	mov	r0, r5
 8005b9a:	460f      	mov	r7, r1
 8005b9c:	f7fa fcda 	bl	8000554 <__aeabi_i2d>
 8005ba0:	a361      	add	r3, pc, #388	; (adr r3, 8005d28 <_dtoa_r+0x2c8>)
 8005ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba6:	f7fa fd3f 	bl	8000628 <__aeabi_dmul>
 8005baa:	4602      	mov	r2, r0
 8005bac:	460b      	mov	r3, r1
 8005bae:	4630      	mov	r0, r6
 8005bb0:	4639      	mov	r1, r7
 8005bb2:	f7fa fb83 	bl	80002bc <__adddf3>
 8005bb6:	4606      	mov	r6, r0
 8005bb8:	460f      	mov	r7, r1
 8005bba:	f7fa ffe5 	bl	8000b88 <__aeabi_d2iz>
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	9000      	str	r0, [sp, #0]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	4639      	mov	r1, r7
 8005bc8:	f7fa ffa0 	bl	8000b0c <__aeabi_dcmplt>
 8005bcc:	b150      	cbz	r0, 8005be4 <_dtoa_r+0x184>
 8005bce:	9800      	ldr	r0, [sp, #0]
 8005bd0:	f7fa fcc0 	bl	8000554 <__aeabi_i2d>
 8005bd4:	4632      	mov	r2, r6
 8005bd6:	463b      	mov	r3, r7
 8005bd8:	f7fa ff8e 	bl	8000af8 <__aeabi_dcmpeq>
 8005bdc:	b910      	cbnz	r0, 8005be4 <_dtoa_r+0x184>
 8005bde:	9b00      	ldr	r3, [sp, #0]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	9b00      	ldr	r3, [sp, #0]
 8005be6:	2b16      	cmp	r3, #22
 8005be8:	d85a      	bhi.n	8005ca0 <_dtoa_r+0x240>
 8005bea:	9a00      	ldr	r2, [sp, #0]
 8005bec:	4b57      	ldr	r3, [pc, #348]	; (8005d4c <_dtoa_r+0x2ec>)
 8005bee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	ec51 0b19 	vmov	r0, r1, d9
 8005bfa:	f7fa ff87 	bl	8000b0c <__aeabi_dcmplt>
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	d050      	beq.n	8005ca4 <_dtoa_r+0x244>
 8005c02:	9b00      	ldr	r3, [sp, #0]
 8005c04:	3b01      	subs	r3, #1
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	2300      	movs	r3, #0
 8005c0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c0e:	1b5d      	subs	r5, r3, r5
 8005c10:	1e6b      	subs	r3, r5, #1
 8005c12:	9305      	str	r3, [sp, #20]
 8005c14:	bf45      	ittet	mi
 8005c16:	f1c5 0301 	rsbmi	r3, r5, #1
 8005c1a:	9304      	strmi	r3, [sp, #16]
 8005c1c:	2300      	movpl	r3, #0
 8005c1e:	2300      	movmi	r3, #0
 8005c20:	bf4c      	ite	mi
 8005c22:	9305      	strmi	r3, [sp, #20]
 8005c24:	9304      	strpl	r3, [sp, #16]
 8005c26:	9b00      	ldr	r3, [sp, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	db3d      	blt.n	8005ca8 <_dtoa_r+0x248>
 8005c2c:	9b05      	ldr	r3, [sp, #20]
 8005c2e:	9a00      	ldr	r2, [sp, #0]
 8005c30:	920a      	str	r2, [sp, #40]	; 0x28
 8005c32:	4413      	add	r3, r2
 8005c34:	9305      	str	r3, [sp, #20]
 8005c36:	2300      	movs	r3, #0
 8005c38:	9307      	str	r3, [sp, #28]
 8005c3a:	9b06      	ldr	r3, [sp, #24]
 8005c3c:	2b09      	cmp	r3, #9
 8005c3e:	f200 8089 	bhi.w	8005d54 <_dtoa_r+0x2f4>
 8005c42:	2b05      	cmp	r3, #5
 8005c44:	bfc4      	itt	gt
 8005c46:	3b04      	subgt	r3, #4
 8005c48:	9306      	strgt	r3, [sp, #24]
 8005c4a:	9b06      	ldr	r3, [sp, #24]
 8005c4c:	f1a3 0302 	sub.w	r3, r3, #2
 8005c50:	bfcc      	ite	gt
 8005c52:	2500      	movgt	r5, #0
 8005c54:	2501      	movle	r5, #1
 8005c56:	2b03      	cmp	r3, #3
 8005c58:	f200 8087 	bhi.w	8005d6a <_dtoa_r+0x30a>
 8005c5c:	e8df f003 	tbb	[pc, r3]
 8005c60:	59383a2d 	.word	0x59383a2d
 8005c64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005c68:	441d      	add	r5, r3
 8005c6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	bfc1      	itttt	gt
 8005c72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005c7a:	fa0b f303 	lslgt.w	r3, fp, r3
 8005c7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005c82:	bfda      	itte	le
 8005c84:	f1c3 0320 	rsble	r3, r3, #32
 8005c88:	fa06 f003 	lslle.w	r0, r6, r3
 8005c8c:	4318      	orrgt	r0, r3
 8005c8e:	f7fa fc51 	bl	8000534 <__aeabi_ui2d>
 8005c92:	2301      	movs	r3, #1
 8005c94:	4606      	mov	r6, r0
 8005c96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005c9a:	3d01      	subs	r5, #1
 8005c9c:	930e      	str	r3, [sp, #56]	; 0x38
 8005c9e:	e76a      	b.n	8005b76 <_dtoa_r+0x116>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e7b2      	b.n	8005c0a <_dtoa_r+0x1aa>
 8005ca4:	900b      	str	r0, [sp, #44]	; 0x2c
 8005ca6:	e7b1      	b.n	8005c0c <_dtoa_r+0x1ac>
 8005ca8:	9b04      	ldr	r3, [sp, #16]
 8005caa:	9a00      	ldr	r2, [sp, #0]
 8005cac:	1a9b      	subs	r3, r3, r2
 8005cae:	9304      	str	r3, [sp, #16]
 8005cb0:	4253      	negs	r3, r2
 8005cb2:	9307      	str	r3, [sp, #28]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8005cb8:	e7bf      	b.n	8005c3a <_dtoa_r+0x1da>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	9308      	str	r3, [sp, #32]
 8005cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	dc55      	bgt.n	8005d70 <_dtoa_r+0x310>
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8005cce:	e00c      	b.n	8005cea <_dtoa_r+0x28a>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e7f3      	b.n	8005cbc <_dtoa_r+0x25c>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cd8:	9308      	str	r3, [sp, #32]
 8005cda:	9b00      	ldr	r3, [sp, #0]
 8005cdc:	4413      	add	r3, r2
 8005cde:	9302      	str	r3, [sp, #8]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	9303      	str	r3, [sp, #12]
 8005ce6:	bfb8      	it	lt
 8005ce8:	2301      	movlt	r3, #1
 8005cea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005cec:	2200      	movs	r2, #0
 8005cee:	6042      	str	r2, [r0, #4]
 8005cf0:	2204      	movs	r2, #4
 8005cf2:	f102 0614 	add.w	r6, r2, #20
 8005cf6:	429e      	cmp	r6, r3
 8005cf8:	6841      	ldr	r1, [r0, #4]
 8005cfa:	d93d      	bls.n	8005d78 <_dtoa_r+0x318>
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f001 f84b 	bl	8006d98 <_Balloc>
 8005d02:	9001      	str	r0, [sp, #4]
 8005d04:	2800      	cmp	r0, #0
 8005d06:	d13b      	bne.n	8005d80 <_dtoa_r+0x320>
 8005d08:	4b11      	ldr	r3, [pc, #68]	; (8005d50 <_dtoa_r+0x2f0>)
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005d10:	e6c0      	b.n	8005a94 <_dtoa_r+0x34>
 8005d12:	2301      	movs	r3, #1
 8005d14:	e7df      	b.n	8005cd6 <_dtoa_r+0x276>
 8005d16:	bf00      	nop
 8005d18:	636f4361 	.word	0x636f4361
 8005d1c:	3fd287a7 	.word	0x3fd287a7
 8005d20:	8b60c8b3 	.word	0x8b60c8b3
 8005d24:	3fc68a28 	.word	0x3fc68a28
 8005d28:	509f79fb 	.word	0x509f79fb
 8005d2c:	3fd34413 	.word	0x3fd34413
 8005d30:	0800988e 	.word	0x0800988e
 8005d34:	080098a5 	.word	0x080098a5
 8005d38:	7ff00000 	.word	0x7ff00000
 8005d3c:	0800988a 	.word	0x0800988a
 8005d40:	08009881 	.word	0x08009881
 8005d44:	08009afa 	.word	0x08009afa
 8005d48:	3ff80000 	.word	0x3ff80000
 8005d4c:	08009a10 	.word	0x08009a10
 8005d50:	08009900 	.word	0x08009900
 8005d54:	2501      	movs	r5, #1
 8005d56:	2300      	movs	r3, #0
 8005d58:	9306      	str	r3, [sp, #24]
 8005d5a:	9508      	str	r5, [sp, #32]
 8005d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005d64:	2200      	movs	r2, #0
 8005d66:	2312      	movs	r3, #18
 8005d68:	e7b0      	b.n	8005ccc <_dtoa_r+0x26c>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	9308      	str	r3, [sp, #32]
 8005d6e:	e7f5      	b.n	8005d5c <_dtoa_r+0x2fc>
 8005d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005d76:	e7b8      	b.n	8005cea <_dtoa_r+0x28a>
 8005d78:	3101      	adds	r1, #1
 8005d7a:	6041      	str	r1, [r0, #4]
 8005d7c:	0052      	lsls	r2, r2, #1
 8005d7e:	e7b8      	b.n	8005cf2 <_dtoa_r+0x292>
 8005d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d82:	9a01      	ldr	r2, [sp, #4]
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	9b03      	ldr	r3, [sp, #12]
 8005d88:	2b0e      	cmp	r3, #14
 8005d8a:	f200 809d 	bhi.w	8005ec8 <_dtoa_r+0x468>
 8005d8e:	2d00      	cmp	r5, #0
 8005d90:	f000 809a 	beq.w	8005ec8 <_dtoa_r+0x468>
 8005d94:	9b00      	ldr	r3, [sp, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	dd32      	ble.n	8005e00 <_dtoa_r+0x3a0>
 8005d9a:	4ab7      	ldr	r2, [pc, #732]	; (8006078 <_dtoa_r+0x618>)
 8005d9c:	f003 030f 	and.w	r3, r3, #15
 8005da0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005da4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005da8:	9b00      	ldr	r3, [sp, #0]
 8005daa:	05d8      	lsls	r0, r3, #23
 8005dac:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005db0:	d516      	bpl.n	8005de0 <_dtoa_r+0x380>
 8005db2:	4bb2      	ldr	r3, [pc, #712]	; (800607c <_dtoa_r+0x61c>)
 8005db4:	ec51 0b19 	vmov	r0, r1, d9
 8005db8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005dbc:	f7fa fd5e 	bl	800087c <__aeabi_ddiv>
 8005dc0:	f007 070f 	and.w	r7, r7, #15
 8005dc4:	4682      	mov	sl, r0
 8005dc6:	468b      	mov	fp, r1
 8005dc8:	2503      	movs	r5, #3
 8005dca:	4eac      	ldr	r6, [pc, #688]	; (800607c <_dtoa_r+0x61c>)
 8005dcc:	b957      	cbnz	r7, 8005de4 <_dtoa_r+0x384>
 8005dce:	4642      	mov	r2, r8
 8005dd0:	464b      	mov	r3, r9
 8005dd2:	4650      	mov	r0, sl
 8005dd4:	4659      	mov	r1, fp
 8005dd6:	f7fa fd51 	bl	800087c <__aeabi_ddiv>
 8005dda:	4682      	mov	sl, r0
 8005ddc:	468b      	mov	fp, r1
 8005dde:	e028      	b.n	8005e32 <_dtoa_r+0x3d2>
 8005de0:	2502      	movs	r5, #2
 8005de2:	e7f2      	b.n	8005dca <_dtoa_r+0x36a>
 8005de4:	07f9      	lsls	r1, r7, #31
 8005de6:	d508      	bpl.n	8005dfa <_dtoa_r+0x39a>
 8005de8:	4640      	mov	r0, r8
 8005dea:	4649      	mov	r1, r9
 8005dec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005df0:	f7fa fc1a 	bl	8000628 <__aeabi_dmul>
 8005df4:	3501      	adds	r5, #1
 8005df6:	4680      	mov	r8, r0
 8005df8:	4689      	mov	r9, r1
 8005dfa:	107f      	asrs	r7, r7, #1
 8005dfc:	3608      	adds	r6, #8
 8005dfe:	e7e5      	b.n	8005dcc <_dtoa_r+0x36c>
 8005e00:	f000 809b 	beq.w	8005f3a <_dtoa_r+0x4da>
 8005e04:	9b00      	ldr	r3, [sp, #0]
 8005e06:	4f9d      	ldr	r7, [pc, #628]	; (800607c <_dtoa_r+0x61c>)
 8005e08:	425e      	negs	r6, r3
 8005e0a:	4b9b      	ldr	r3, [pc, #620]	; (8006078 <_dtoa_r+0x618>)
 8005e0c:	f006 020f 	and.w	r2, r6, #15
 8005e10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e18:	ec51 0b19 	vmov	r0, r1, d9
 8005e1c:	f7fa fc04 	bl	8000628 <__aeabi_dmul>
 8005e20:	1136      	asrs	r6, r6, #4
 8005e22:	4682      	mov	sl, r0
 8005e24:	468b      	mov	fp, r1
 8005e26:	2300      	movs	r3, #0
 8005e28:	2502      	movs	r5, #2
 8005e2a:	2e00      	cmp	r6, #0
 8005e2c:	d17a      	bne.n	8005f24 <_dtoa_r+0x4c4>
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1d3      	bne.n	8005dda <_dtoa_r+0x37a>
 8005e32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 8082 	beq.w	8005f3e <_dtoa_r+0x4de>
 8005e3a:	4b91      	ldr	r3, [pc, #580]	; (8006080 <_dtoa_r+0x620>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	4650      	mov	r0, sl
 8005e40:	4659      	mov	r1, fp
 8005e42:	f7fa fe63 	bl	8000b0c <__aeabi_dcmplt>
 8005e46:	2800      	cmp	r0, #0
 8005e48:	d079      	beq.n	8005f3e <_dtoa_r+0x4de>
 8005e4a:	9b03      	ldr	r3, [sp, #12]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d076      	beq.n	8005f3e <_dtoa_r+0x4de>
 8005e50:	9b02      	ldr	r3, [sp, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	dd36      	ble.n	8005ec4 <_dtoa_r+0x464>
 8005e56:	9b00      	ldr	r3, [sp, #0]
 8005e58:	4650      	mov	r0, sl
 8005e5a:	4659      	mov	r1, fp
 8005e5c:	1e5f      	subs	r7, r3, #1
 8005e5e:	2200      	movs	r2, #0
 8005e60:	4b88      	ldr	r3, [pc, #544]	; (8006084 <_dtoa_r+0x624>)
 8005e62:	f7fa fbe1 	bl	8000628 <__aeabi_dmul>
 8005e66:	9e02      	ldr	r6, [sp, #8]
 8005e68:	4682      	mov	sl, r0
 8005e6a:	468b      	mov	fp, r1
 8005e6c:	3501      	adds	r5, #1
 8005e6e:	4628      	mov	r0, r5
 8005e70:	f7fa fb70 	bl	8000554 <__aeabi_i2d>
 8005e74:	4652      	mov	r2, sl
 8005e76:	465b      	mov	r3, fp
 8005e78:	f7fa fbd6 	bl	8000628 <__aeabi_dmul>
 8005e7c:	4b82      	ldr	r3, [pc, #520]	; (8006088 <_dtoa_r+0x628>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f7fa fa1c 	bl	80002bc <__adddf3>
 8005e84:	46d0      	mov	r8, sl
 8005e86:	46d9      	mov	r9, fp
 8005e88:	4682      	mov	sl, r0
 8005e8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005e8e:	2e00      	cmp	r6, #0
 8005e90:	d158      	bne.n	8005f44 <_dtoa_r+0x4e4>
 8005e92:	4b7e      	ldr	r3, [pc, #504]	; (800608c <_dtoa_r+0x62c>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	4640      	mov	r0, r8
 8005e98:	4649      	mov	r1, r9
 8005e9a:	f7fa fa0d 	bl	80002b8 <__aeabi_dsub>
 8005e9e:	4652      	mov	r2, sl
 8005ea0:	465b      	mov	r3, fp
 8005ea2:	4680      	mov	r8, r0
 8005ea4:	4689      	mov	r9, r1
 8005ea6:	f7fa fe4f 	bl	8000b48 <__aeabi_dcmpgt>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	f040 8295 	bne.w	80063da <_dtoa_r+0x97a>
 8005eb0:	4652      	mov	r2, sl
 8005eb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005eb6:	4640      	mov	r0, r8
 8005eb8:	4649      	mov	r1, r9
 8005eba:	f7fa fe27 	bl	8000b0c <__aeabi_dcmplt>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	f040 8289 	bne.w	80063d6 <_dtoa_r+0x976>
 8005ec4:	ec5b ab19 	vmov	sl, fp, d9
 8005ec8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f2c0 8148 	blt.w	8006160 <_dtoa_r+0x700>
 8005ed0:	9a00      	ldr	r2, [sp, #0]
 8005ed2:	2a0e      	cmp	r2, #14
 8005ed4:	f300 8144 	bgt.w	8006160 <_dtoa_r+0x700>
 8005ed8:	4b67      	ldr	r3, [pc, #412]	; (8006078 <_dtoa_r+0x618>)
 8005eda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ede:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f280 80d5 	bge.w	8006094 <_dtoa_r+0x634>
 8005eea:	9b03      	ldr	r3, [sp, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f300 80d1 	bgt.w	8006094 <_dtoa_r+0x634>
 8005ef2:	f040 826f 	bne.w	80063d4 <_dtoa_r+0x974>
 8005ef6:	4b65      	ldr	r3, [pc, #404]	; (800608c <_dtoa_r+0x62c>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	4640      	mov	r0, r8
 8005efc:	4649      	mov	r1, r9
 8005efe:	f7fa fb93 	bl	8000628 <__aeabi_dmul>
 8005f02:	4652      	mov	r2, sl
 8005f04:	465b      	mov	r3, fp
 8005f06:	f7fa fe15 	bl	8000b34 <__aeabi_dcmpge>
 8005f0a:	9e03      	ldr	r6, [sp, #12]
 8005f0c:	4637      	mov	r7, r6
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	f040 8245 	bne.w	800639e <_dtoa_r+0x93e>
 8005f14:	9d01      	ldr	r5, [sp, #4]
 8005f16:	2331      	movs	r3, #49	; 0x31
 8005f18:	f805 3b01 	strb.w	r3, [r5], #1
 8005f1c:	9b00      	ldr	r3, [sp, #0]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	e240      	b.n	80063a6 <_dtoa_r+0x946>
 8005f24:	07f2      	lsls	r2, r6, #31
 8005f26:	d505      	bpl.n	8005f34 <_dtoa_r+0x4d4>
 8005f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f2c:	f7fa fb7c 	bl	8000628 <__aeabi_dmul>
 8005f30:	3501      	adds	r5, #1
 8005f32:	2301      	movs	r3, #1
 8005f34:	1076      	asrs	r6, r6, #1
 8005f36:	3708      	adds	r7, #8
 8005f38:	e777      	b.n	8005e2a <_dtoa_r+0x3ca>
 8005f3a:	2502      	movs	r5, #2
 8005f3c:	e779      	b.n	8005e32 <_dtoa_r+0x3d2>
 8005f3e:	9f00      	ldr	r7, [sp, #0]
 8005f40:	9e03      	ldr	r6, [sp, #12]
 8005f42:	e794      	b.n	8005e6e <_dtoa_r+0x40e>
 8005f44:	9901      	ldr	r1, [sp, #4]
 8005f46:	4b4c      	ldr	r3, [pc, #304]	; (8006078 <_dtoa_r+0x618>)
 8005f48:	4431      	add	r1, r6
 8005f4a:	910d      	str	r1, [sp, #52]	; 0x34
 8005f4c:	9908      	ldr	r1, [sp, #32]
 8005f4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005f52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f56:	2900      	cmp	r1, #0
 8005f58:	d043      	beq.n	8005fe2 <_dtoa_r+0x582>
 8005f5a:	494d      	ldr	r1, [pc, #308]	; (8006090 <_dtoa_r+0x630>)
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	f7fa fc8d 	bl	800087c <__aeabi_ddiv>
 8005f62:	4652      	mov	r2, sl
 8005f64:	465b      	mov	r3, fp
 8005f66:	f7fa f9a7 	bl	80002b8 <__aeabi_dsub>
 8005f6a:	9d01      	ldr	r5, [sp, #4]
 8005f6c:	4682      	mov	sl, r0
 8005f6e:	468b      	mov	fp, r1
 8005f70:	4649      	mov	r1, r9
 8005f72:	4640      	mov	r0, r8
 8005f74:	f7fa fe08 	bl	8000b88 <__aeabi_d2iz>
 8005f78:	4606      	mov	r6, r0
 8005f7a:	f7fa faeb 	bl	8000554 <__aeabi_i2d>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4640      	mov	r0, r8
 8005f84:	4649      	mov	r1, r9
 8005f86:	f7fa f997 	bl	80002b8 <__aeabi_dsub>
 8005f8a:	3630      	adds	r6, #48	; 0x30
 8005f8c:	f805 6b01 	strb.w	r6, [r5], #1
 8005f90:	4652      	mov	r2, sl
 8005f92:	465b      	mov	r3, fp
 8005f94:	4680      	mov	r8, r0
 8005f96:	4689      	mov	r9, r1
 8005f98:	f7fa fdb8 	bl	8000b0c <__aeabi_dcmplt>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d163      	bne.n	8006068 <_dtoa_r+0x608>
 8005fa0:	4642      	mov	r2, r8
 8005fa2:	464b      	mov	r3, r9
 8005fa4:	4936      	ldr	r1, [pc, #216]	; (8006080 <_dtoa_r+0x620>)
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	f7fa f986 	bl	80002b8 <__aeabi_dsub>
 8005fac:	4652      	mov	r2, sl
 8005fae:	465b      	mov	r3, fp
 8005fb0:	f7fa fdac 	bl	8000b0c <__aeabi_dcmplt>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	f040 80b5 	bne.w	8006124 <_dtoa_r+0x6c4>
 8005fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fbc:	429d      	cmp	r5, r3
 8005fbe:	d081      	beq.n	8005ec4 <_dtoa_r+0x464>
 8005fc0:	4b30      	ldr	r3, [pc, #192]	; (8006084 <_dtoa_r+0x624>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	4650      	mov	r0, sl
 8005fc6:	4659      	mov	r1, fp
 8005fc8:	f7fa fb2e 	bl	8000628 <__aeabi_dmul>
 8005fcc:	4b2d      	ldr	r3, [pc, #180]	; (8006084 <_dtoa_r+0x624>)
 8005fce:	4682      	mov	sl, r0
 8005fd0:	468b      	mov	fp, r1
 8005fd2:	4640      	mov	r0, r8
 8005fd4:	4649      	mov	r1, r9
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f7fa fb26 	bl	8000628 <__aeabi_dmul>
 8005fdc:	4680      	mov	r8, r0
 8005fde:	4689      	mov	r9, r1
 8005fe0:	e7c6      	b.n	8005f70 <_dtoa_r+0x510>
 8005fe2:	4650      	mov	r0, sl
 8005fe4:	4659      	mov	r1, fp
 8005fe6:	f7fa fb1f 	bl	8000628 <__aeabi_dmul>
 8005fea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fec:	9d01      	ldr	r5, [sp, #4]
 8005fee:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ff0:	4682      	mov	sl, r0
 8005ff2:	468b      	mov	fp, r1
 8005ff4:	4649      	mov	r1, r9
 8005ff6:	4640      	mov	r0, r8
 8005ff8:	f7fa fdc6 	bl	8000b88 <__aeabi_d2iz>
 8005ffc:	4606      	mov	r6, r0
 8005ffe:	f7fa faa9 	bl	8000554 <__aeabi_i2d>
 8006002:	3630      	adds	r6, #48	; 0x30
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4640      	mov	r0, r8
 800600a:	4649      	mov	r1, r9
 800600c:	f7fa f954 	bl	80002b8 <__aeabi_dsub>
 8006010:	f805 6b01 	strb.w	r6, [r5], #1
 8006014:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006016:	429d      	cmp	r5, r3
 8006018:	4680      	mov	r8, r0
 800601a:	4689      	mov	r9, r1
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	d124      	bne.n	800606c <_dtoa_r+0x60c>
 8006022:	4b1b      	ldr	r3, [pc, #108]	; (8006090 <_dtoa_r+0x630>)
 8006024:	4650      	mov	r0, sl
 8006026:	4659      	mov	r1, fp
 8006028:	f7fa f948 	bl	80002bc <__adddf3>
 800602c:	4602      	mov	r2, r0
 800602e:	460b      	mov	r3, r1
 8006030:	4640      	mov	r0, r8
 8006032:	4649      	mov	r1, r9
 8006034:	f7fa fd88 	bl	8000b48 <__aeabi_dcmpgt>
 8006038:	2800      	cmp	r0, #0
 800603a:	d173      	bne.n	8006124 <_dtoa_r+0x6c4>
 800603c:	4652      	mov	r2, sl
 800603e:	465b      	mov	r3, fp
 8006040:	4913      	ldr	r1, [pc, #76]	; (8006090 <_dtoa_r+0x630>)
 8006042:	2000      	movs	r0, #0
 8006044:	f7fa f938 	bl	80002b8 <__aeabi_dsub>
 8006048:	4602      	mov	r2, r0
 800604a:	460b      	mov	r3, r1
 800604c:	4640      	mov	r0, r8
 800604e:	4649      	mov	r1, r9
 8006050:	f7fa fd5c 	bl	8000b0c <__aeabi_dcmplt>
 8006054:	2800      	cmp	r0, #0
 8006056:	f43f af35 	beq.w	8005ec4 <_dtoa_r+0x464>
 800605a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800605c:	1e6b      	subs	r3, r5, #1
 800605e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006060:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006064:	2b30      	cmp	r3, #48	; 0x30
 8006066:	d0f8      	beq.n	800605a <_dtoa_r+0x5fa>
 8006068:	9700      	str	r7, [sp, #0]
 800606a:	e049      	b.n	8006100 <_dtoa_r+0x6a0>
 800606c:	4b05      	ldr	r3, [pc, #20]	; (8006084 <_dtoa_r+0x624>)
 800606e:	f7fa fadb 	bl	8000628 <__aeabi_dmul>
 8006072:	4680      	mov	r8, r0
 8006074:	4689      	mov	r9, r1
 8006076:	e7bd      	b.n	8005ff4 <_dtoa_r+0x594>
 8006078:	08009a10 	.word	0x08009a10
 800607c:	080099e8 	.word	0x080099e8
 8006080:	3ff00000 	.word	0x3ff00000
 8006084:	40240000 	.word	0x40240000
 8006088:	401c0000 	.word	0x401c0000
 800608c:	40140000 	.word	0x40140000
 8006090:	3fe00000 	.word	0x3fe00000
 8006094:	9d01      	ldr	r5, [sp, #4]
 8006096:	4656      	mov	r6, sl
 8006098:	465f      	mov	r7, fp
 800609a:	4642      	mov	r2, r8
 800609c:	464b      	mov	r3, r9
 800609e:	4630      	mov	r0, r6
 80060a0:	4639      	mov	r1, r7
 80060a2:	f7fa fbeb 	bl	800087c <__aeabi_ddiv>
 80060a6:	f7fa fd6f 	bl	8000b88 <__aeabi_d2iz>
 80060aa:	4682      	mov	sl, r0
 80060ac:	f7fa fa52 	bl	8000554 <__aeabi_i2d>
 80060b0:	4642      	mov	r2, r8
 80060b2:	464b      	mov	r3, r9
 80060b4:	f7fa fab8 	bl	8000628 <__aeabi_dmul>
 80060b8:	4602      	mov	r2, r0
 80060ba:	460b      	mov	r3, r1
 80060bc:	4630      	mov	r0, r6
 80060be:	4639      	mov	r1, r7
 80060c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80060c4:	f7fa f8f8 	bl	80002b8 <__aeabi_dsub>
 80060c8:	f805 6b01 	strb.w	r6, [r5], #1
 80060cc:	9e01      	ldr	r6, [sp, #4]
 80060ce:	9f03      	ldr	r7, [sp, #12]
 80060d0:	1bae      	subs	r6, r5, r6
 80060d2:	42b7      	cmp	r7, r6
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	d135      	bne.n	8006146 <_dtoa_r+0x6e6>
 80060da:	f7fa f8ef 	bl	80002bc <__adddf3>
 80060de:	4642      	mov	r2, r8
 80060e0:	464b      	mov	r3, r9
 80060e2:	4606      	mov	r6, r0
 80060e4:	460f      	mov	r7, r1
 80060e6:	f7fa fd2f 	bl	8000b48 <__aeabi_dcmpgt>
 80060ea:	b9d0      	cbnz	r0, 8006122 <_dtoa_r+0x6c2>
 80060ec:	4642      	mov	r2, r8
 80060ee:	464b      	mov	r3, r9
 80060f0:	4630      	mov	r0, r6
 80060f2:	4639      	mov	r1, r7
 80060f4:	f7fa fd00 	bl	8000af8 <__aeabi_dcmpeq>
 80060f8:	b110      	cbz	r0, 8006100 <_dtoa_r+0x6a0>
 80060fa:	f01a 0f01 	tst.w	sl, #1
 80060fe:	d110      	bne.n	8006122 <_dtoa_r+0x6c2>
 8006100:	4620      	mov	r0, r4
 8006102:	ee18 1a10 	vmov	r1, s16
 8006106:	f000 fe87 	bl	8006e18 <_Bfree>
 800610a:	2300      	movs	r3, #0
 800610c:	9800      	ldr	r0, [sp, #0]
 800610e:	702b      	strb	r3, [r5, #0]
 8006110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006112:	3001      	adds	r0, #1
 8006114:	6018      	str	r0, [r3, #0]
 8006116:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006118:	2b00      	cmp	r3, #0
 800611a:	f43f acf1 	beq.w	8005b00 <_dtoa_r+0xa0>
 800611e:	601d      	str	r5, [r3, #0]
 8006120:	e4ee      	b.n	8005b00 <_dtoa_r+0xa0>
 8006122:	9f00      	ldr	r7, [sp, #0]
 8006124:	462b      	mov	r3, r5
 8006126:	461d      	mov	r5, r3
 8006128:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800612c:	2a39      	cmp	r2, #57	; 0x39
 800612e:	d106      	bne.n	800613e <_dtoa_r+0x6de>
 8006130:	9a01      	ldr	r2, [sp, #4]
 8006132:	429a      	cmp	r2, r3
 8006134:	d1f7      	bne.n	8006126 <_dtoa_r+0x6c6>
 8006136:	9901      	ldr	r1, [sp, #4]
 8006138:	2230      	movs	r2, #48	; 0x30
 800613a:	3701      	adds	r7, #1
 800613c:	700a      	strb	r2, [r1, #0]
 800613e:	781a      	ldrb	r2, [r3, #0]
 8006140:	3201      	adds	r2, #1
 8006142:	701a      	strb	r2, [r3, #0]
 8006144:	e790      	b.n	8006068 <_dtoa_r+0x608>
 8006146:	4ba6      	ldr	r3, [pc, #664]	; (80063e0 <_dtoa_r+0x980>)
 8006148:	2200      	movs	r2, #0
 800614a:	f7fa fa6d 	bl	8000628 <__aeabi_dmul>
 800614e:	2200      	movs	r2, #0
 8006150:	2300      	movs	r3, #0
 8006152:	4606      	mov	r6, r0
 8006154:	460f      	mov	r7, r1
 8006156:	f7fa fccf 	bl	8000af8 <__aeabi_dcmpeq>
 800615a:	2800      	cmp	r0, #0
 800615c:	d09d      	beq.n	800609a <_dtoa_r+0x63a>
 800615e:	e7cf      	b.n	8006100 <_dtoa_r+0x6a0>
 8006160:	9a08      	ldr	r2, [sp, #32]
 8006162:	2a00      	cmp	r2, #0
 8006164:	f000 80d7 	beq.w	8006316 <_dtoa_r+0x8b6>
 8006168:	9a06      	ldr	r2, [sp, #24]
 800616a:	2a01      	cmp	r2, #1
 800616c:	f300 80ba 	bgt.w	80062e4 <_dtoa_r+0x884>
 8006170:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006172:	2a00      	cmp	r2, #0
 8006174:	f000 80b2 	beq.w	80062dc <_dtoa_r+0x87c>
 8006178:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800617c:	9e07      	ldr	r6, [sp, #28]
 800617e:	9d04      	ldr	r5, [sp, #16]
 8006180:	9a04      	ldr	r2, [sp, #16]
 8006182:	441a      	add	r2, r3
 8006184:	9204      	str	r2, [sp, #16]
 8006186:	9a05      	ldr	r2, [sp, #20]
 8006188:	2101      	movs	r1, #1
 800618a:	441a      	add	r2, r3
 800618c:	4620      	mov	r0, r4
 800618e:	9205      	str	r2, [sp, #20]
 8006190:	f000 ff44 	bl	800701c <__i2b>
 8006194:	4607      	mov	r7, r0
 8006196:	2d00      	cmp	r5, #0
 8006198:	dd0c      	ble.n	80061b4 <_dtoa_r+0x754>
 800619a:	9b05      	ldr	r3, [sp, #20]
 800619c:	2b00      	cmp	r3, #0
 800619e:	dd09      	ble.n	80061b4 <_dtoa_r+0x754>
 80061a0:	42ab      	cmp	r3, r5
 80061a2:	9a04      	ldr	r2, [sp, #16]
 80061a4:	bfa8      	it	ge
 80061a6:	462b      	movge	r3, r5
 80061a8:	1ad2      	subs	r2, r2, r3
 80061aa:	9204      	str	r2, [sp, #16]
 80061ac:	9a05      	ldr	r2, [sp, #20]
 80061ae:	1aed      	subs	r5, r5, r3
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	9305      	str	r3, [sp, #20]
 80061b4:	9b07      	ldr	r3, [sp, #28]
 80061b6:	b31b      	cbz	r3, 8006200 <_dtoa_r+0x7a0>
 80061b8:	9b08      	ldr	r3, [sp, #32]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f000 80af 	beq.w	800631e <_dtoa_r+0x8be>
 80061c0:	2e00      	cmp	r6, #0
 80061c2:	dd13      	ble.n	80061ec <_dtoa_r+0x78c>
 80061c4:	4639      	mov	r1, r7
 80061c6:	4632      	mov	r2, r6
 80061c8:	4620      	mov	r0, r4
 80061ca:	f000 ffe7 	bl	800719c <__pow5mult>
 80061ce:	ee18 2a10 	vmov	r2, s16
 80061d2:	4601      	mov	r1, r0
 80061d4:	4607      	mov	r7, r0
 80061d6:	4620      	mov	r0, r4
 80061d8:	f000 ff36 	bl	8007048 <__multiply>
 80061dc:	ee18 1a10 	vmov	r1, s16
 80061e0:	4680      	mov	r8, r0
 80061e2:	4620      	mov	r0, r4
 80061e4:	f000 fe18 	bl	8006e18 <_Bfree>
 80061e8:	ee08 8a10 	vmov	s16, r8
 80061ec:	9b07      	ldr	r3, [sp, #28]
 80061ee:	1b9a      	subs	r2, r3, r6
 80061f0:	d006      	beq.n	8006200 <_dtoa_r+0x7a0>
 80061f2:	ee18 1a10 	vmov	r1, s16
 80061f6:	4620      	mov	r0, r4
 80061f8:	f000 ffd0 	bl	800719c <__pow5mult>
 80061fc:	ee08 0a10 	vmov	s16, r0
 8006200:	2101      	movs	r1, #1
 8006202:	4620      	mov	r0, r4
 8006204:	f000 ff0a 	bl	800701c <__i2b>
 8006208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800620a:	2b00      	cmp	r3, #0
 800620c:	4606      	mov	r6, r0
 800620e:	f340 8088 	ble.w	8006322 <_dtoa_r+0x8c2>
 8006212:	461a      	mov	r2, r3
 8006214:	4601      	mov	r1, r0
 8006216:	4620      	mov	r0, r4
 8006218:	f000 ffc0 	bl	800719c <__pow5mult>
 800621c:	9b06      	ldr	r3, [sp, #24]
 800621e:	2b01      	cmp	r3, #1
 8006220:	4606      	mov	r6, r0
 8006222:	f340 8081 	ble.w	8006328 <_dtoa_r+0x8c8>
 8006226:	f04f 0800 	mov.w	r8, #0
 800622a:	6933      	ldr	r3, [r6, #16]
 800622c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006230:	6918      	ldr	r0, [r3, #16]
 8006232:	f000 fea3 	bl	8006f7c <__hi0bits>
 8006236:	f1c0 0020 	rsb	r0, r0, #32
 800623a:	9b05      	ldr	r3, [sp, #20]
 800623c:	4418      	add	r0, r3
 800623e:	f010 001f 	ands.w	r0, r0, #31
 8006242:	f000 8092 	beq.w	800636a <_dtoa_r+0x90a>
 8006246:	f1c0 0320 	rsb	r3, r0, #32
 800624a:	2b04      	cmp	r3, #4
 800624c:	f340 808a 	ble.w	8006364 <_dtoa_r+0x904>
 8006250:	f1c0 001c 	rsb	r0, r0, #28
 8006254:	9b04      	ldr	r3, [sp, #16]
 8006256:	4403      	add	r3, r0
 8006258:	9304      	str	r3, [sp, #16]
 800625a:	9b05      	ldr	r3, [sp, #20]
 800625c:	4403      	add	r3, r0
 800625e:	4405      	add	r5, r0
 8006260:	9305      	str	r3, [sp, #20]
 8006262:	9b04      	ldr	r3, [sp, #16]
 8006264:	2b00      	cmp	r3, #0
 8006266:	dd07      	ble.n	8006278 <_dtoa_r+0x818>
 8006268:	ee18 1a10 	vmov	r1, s16
 800626c:	461a      	mov	r2, r3
 800626e:	4620      	mov	r0, r4
 8006270:	f000 ffee 	bl	8007250 <__lshift>
 8006274:	ee08 0a10 	vmov	s16, r0
 8006278:	9b05      	ldr	r3, [sp, #20]
 800627a:	2b00      	cmp	r3, #0
 800627c:	dd05      	ble.n	800628a <_dtoa_r+0x82a>
 800627e:	4631      	mov	r1, r6
 8006280:	461a      	mov	r2, r3
 8006282:	4620      	mov	r0, r4
 8006284:	f000 ffe4 	bl	8007250 <__lshift>
 8006288:	4606      	mov	r6, r0
 800628a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800628c:	2b00      	cmp	r3, #0
 800628e:	d06e      	beq.n	800636e <_dtoa_r+0x90e>
 8006290:	ee18 0a10 	vmov	r0, s16
 8006294:	4631      	mov	r1, r6
 8006296:	f001 f84b 	bl	8007330 <__mcmp>
 800629a:	2800      	cmp	r0, #0
 800629c:	da67      	bge.n	800636e <_dtoa_r+0x90e>
 800629e:	9b00      	ldr	r3, [sp, #0]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	ee18 1a10 	vmov	r1, s16
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	220a      	movs	r2, #10
 80062aa:	2300      	movs	r3, #0
 80062ac:	4620      	mov	r0, r4
 80062ae:	f000 fdd5 	bl	8006e5c <__multadd>
 80062b2:	9b08      	ldr	r3, [sp, #32]
 80062b4:	ee08 0a10 	vmov	s16, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f000 81b1 	beq.w	8006620 <_dtoa_r+0xbc0>
 80062be:	2300      	movs	r3, #0
 80062c0:	4639      	mov	r1, r7
 80062c2:	220a      	movs	r2, #10
 80062c4:	4620      	mov	r0, r4
 80062c6:	f000 fdc9 	bl	8006e5c <__multadd>
 80062ca:	9b02      	ldr	r3, [sp, #8]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	4607      	mov	r7, r0
 80062d0:	f300 808e 	bgt.w	80063f0 <_dtoa_r+0x990>
 80062d4:	9b06      	ldr	r3, [sp, #24]
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	dc51      	bgt.n	800637e <_dtoa_r+0x91e>
 80062da:	e089      	b.n	80063f0 <_dtoa_r+0x990>
 80062dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80062e2:	e74b      	b.n	800617c <_dtoa_r+0x71c>
 80062e4:	9b03      	ldr	r3, [sp, #12]
 80062e6:	1e5e      	subs	r6, r3, #1
 80062e8:	9b07      	ldr	r3, [sp, #28]
 80062ea:	42b3      	cmp	r3, r6
 80062ec:	bfbf      	itttt	lt
 80062ee:	9b07      	ldrlt	r3, [sp, #28]
 80062f0:	9607      	strlt	r6, [sp, #28]
 80062f2:	1af2      	sublt	r2, r6, r3
 80062f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80062f6:	bfb6      	itet	lt
 80062f8:	189b      	addlt	r3, r3, r2
 80062fa:	1b9e      	subge	r6, r3, r6
 80062fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80062fe:	9b03      	ldr	r3, [sp, #12]
 8006300:	bfb8      	it	lt
 8006302:	2600      	movlt	r6, #0
 8006304:	2b00      	cmp	r3, #0
 8006306:	bfb7      	itett	lt
 8006308:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800630c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006310:	1a9d      	sublt	r5, r3, r2
 8006312:	2300      	movlt	r3, #0
 8006314:	e734      	b.n	8006180 <_dtoa_r+0x720>
 8006316:	9e07      	ldr	r6, [sp, #28]
 8006318:	9d04      	ldr	r5, [sp, #16]
 800631a:	9f08      	ldr	r7, [sp, #32]
 800631c:	e73b      	b.n	8006196 <_dtoa_r+0x736>
 800631e:	9a07      	ldr	r2, [sp, #28]
 8006320:	e767      	b.n	80061f2 <_dtoa_r+0x792>
 8006322:	9b06      	ldr	r3, [sp, #24]
 8006324:	2b01      	cmp	r3, #1
 8006326:	dc18      	bgt.n	800635a <_dtoa_r+0x8fa>
 8006328:	f1ba 0f00 	cmp.w	sl, #0
 800632c:	d115      	bne.n	800635a <_dtoa_r+0x8fa>
 800632e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006332:	b993      	cbnz	r3, 800635a <_dtoa_r+0x8fa>
 8006334:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006338:	0d1b      	lsrs	r3, r3, #20
 800633a:	051b      	lsls	r3, r3, #20
 800633c:	b183      	cbz	r3, 8006360 <_dtoa_r+0x900>
 800633e:	9b04      	ldr	r3, [sp, #16]
 8006340:	3301      	adds	r3, #1
 8006342:	9304      	str	r3, [sp, #16]
 8006344:	9b05      	ldr	r3, [sp, #20]
 8006346:	3301      	adds	r3, #1
 8006348:	9305      	str	r3, [sp, #20]
 800634a:	f04f 0801 	mov.w	r8, #1
 800634e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006350:	2b00      	cmp	r3, #0
 8006352:	f47f af6a 	bne.w	800622a <_dtoa_r+0x7ca>
 8006356:	2001      	movs	r0, #1
 8006358:	e76f      	b.n	800623a <_dtoa_r+0x7da>
 800635a:	f04f 0800 	mov.w	r8, #0
 800635e:	e7f6      	b.n	800634e <_dtoa_r+0x8ee>
 8006360:	4698      	mov	r8, r3
 8006362:	e7f4      	b.n	800634e <_dtoa_r+0x8ee>
 8006364:	f43f af7d 	beq.w	8006262 <_dtoa_r+0x802>
 8006368:	4618      	mov	r0, r3
 800636a:	301c      	adds	r0, #28
 800636c:	e772      	b.n	8006254 <_dtoa_r+0x7f4>
 800636e:	9b03      	ldr	r3, [sp, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	dc37      	bgt.n	80063e4 <_dtoa_r+0x984>
 8006374:	9b06      	ldr	r3, [sp, #24]
 8006376:	2b02      	cmp	r3, #2
 8006378:	dd34      	ble.n	80063e4 <_dtoa_r+0x984>
 800637a:	9b03      	ldr	r3, [sp, #12]
 800637c:	9302      	str	r3, [sp, #8]
 800637e:	9b02      	ldr	r3, [sp, #8]
 8006380:	b96b      	cbnz	r3, 800639e <_dtoa_r+0x93e>
 8006382:	4631      	mov	r1, r6
 8006384:	2205      	movs	r2, #5
 8006386:	4620      	mov	r0, r4
 8006388:	f000 fd68 	bl	8006e5c <__multadd>
 800638c:	4601      	mov	r1, r0
 800638e:	4606      	mov	r6, r0
 8006390:	ee18 0a10 	vmov	r0, s16
 8006394:	f000 ffcc 	bl	8007330 <__mcmp>
 8006398:	2800      	cmp	r0, #0
 800639a:	f73f adbb 	bgt.w	8005f14 <_dtoa_r+0x4b4>
 800639e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a0:	9d01      	ldr	r5, [sp, #4]
 80063a2:	43db      	mvns	r3, r3
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	f04f 0800 	mov.w	r8, #0
 80063aa:	4631      	mov	r1, r6
 80063ac:	4620      	mov	r0, r4
 80063ae:	f000 fd33 	bl	8006e18 <_Bfree>
 80063b2:	2f00      	cmp	r7, #0
 80063b4:	f43f aea4 	beq.w	8006100 <_dtoa_r+0x6a0>
 80063b8:	f1b8 0f00 	cmp.w	r8, #0
 80063bc:	d005      	beq.n	80063ca <_dtoa_r+0x96a>
 80063be:	45b8      	cmp	r8, r7
 80063c0:	d003      	beq.n	80063ca <_dtoa_r+0x96a>
 80063c2:	4641      	mov	r1, r8
 80063c4:	4620      	mov	r0, r4
 80063c6:	f000 fd27 	bl	8006e18 <_Bfree>
 80063ca:	4639      	mov	r1, r7
 80063cc:	4620      	mov	r0, r4
 80063ce:	f000 fd23 	bl	8006e18 <_Bfree>
 80063d2:	e695      	b.n	8006100 <_dtoa_r+0x6a0>
 80063d4:	2600      	movs	r6, #0
 80063d6:	4637      	mov	r7, r6
 80063d8:	e7e1      	b.n	800639e <_dtoa_r+0x93e>
 80063da:	9700      	str	r7, [sp, #0]
 80063dc:	4637      	mov	r7, r6
 80063de:	e599      	b.n	8005f14 <_dtoa_r+0x4b4>
 80063e0:	40240000 	.word	0x40240000
 80063e4:	9b08      	ldr	r3, [sp, #32]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 80ca 	beq.w	8006580 <_dtoa_r+0xb20>
 80063ec:	9b03      	ldr	r3, [sp, #12]
 80063ee:	9302      	str	r3, [sp, #8]
 80063f0:	2d00      	cmp	r5, #0
 80063f2:	dd05      	ble.n	8006400 <_dtoa_r+0x9a0>
 80063f4:	4639      	mov	r1, r7
 80063f6:	462a      	mov	r2, r5
 80063f8:	4620      	mov	r0, r4
 80063fa:	f000 ff29 	bl	8007250 <__lshift>
 80063fe:	4607      	mov	r7, r0
 8006400:	f1b8 0f00 	cmp.w	r8, #0
 8006404:	d05b      	beq.n	80064be <_dtoa_r+0xa5e>
 8006406:	6879      	ldr	r1, [r7, #4]
 8006408:	4620      	mov	r0, r4
 800640a:	f000 fcc5 	bl	8006d98 <_Balloc>
 800640e:	4605      	mov	r5, r0
 8006410:	b928      	cbnz	r0, 800641e <_dtoa_r+0x9be>
 8006412:	4b87      	ldr	r3, [pc, #540]	; (8006630 <_dtoa_r+0xbd0>)
 8006414:	4602      	mov	r2, r0
 8006416:	f240 21ea 	movw	r1, #746	; 0x2ea
 800641a:	f7ff bb3b 	b.w	8005a94 <_dtoa_r+0x34>
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	3202      	adds	r2, #2
 8006422:	0092      	lsls	r2, r2, #2
 8006424:	f107 010c 	add.w	r1, r7, #12
 8006428:	300c      	adds	r0, #12
 800642a:	f000 fca7 	bl	8006d7c <memcpy>
 800642e:	2201      	movs	r2, #1
 8006430:	4629      	mov	r1, r5
 8006432:	4620      	mov	r0, r4
 8006434:	f000 ff0c 	bl	8007250 <__lshift>
 8006438:	9b01      	ldr	r3, [sp, #4]
 800643a:	f103 0901 	add.w	r9, r3, #1
 800643e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006442:	4413      	add	r3, r2
 8006444:	9305      	str	r3, [sp, #20]
 8006446:	f00a 0301 	and.w	r3, sl, #1
 800644a:	46b8      	mov	r8, r7
 800644c:	9304      	str	r3, [sp, #16]
 800644e:	4607      	mov	r7, r0
 8006450:	4631      	mov	r1, r6
 8006452:	ee18 0a10 	vmov	r0, s16
 8006456:	f7ff fa77 	bl	8005948 <quorem>
 800645a:	4641      	mov	r1, r8
 800645c:	9002      	str	r0, [sp, #8]
 800645e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006462:	ee18 0a10 	vmov	r0, s16
 8006466:	f000 ff63 	bl	8007330 <__mcmp>
 800646a:	463a      	mov	r2, r7
 800646c:	9003      	str	r0, [sp, #12]
 800646e:	4631      	mov	r1, r6
 8006470:	4620      	mov	r0, r4
 8006472:	f000 ff79 	bl	8007368 <__mdiff>
 8006476:	68c2      	ldr	r2, [r0, #12]
 8006478:	f109 3bff 	add.w	fp, r9, #4294967295
 800647c:	4605      	mov	r5, r0
 800647e:	bb02      	cbnz	r2, 80064c2 <_dtoa_r+0xa62>
 8006480:	4601      	mov	r1, r0
 8006482:	ee18 0a10 	vmov	r0, s16
 8006486:	f000 ff53 	bl	8007330 <__mcmp>
 800648a:	4602      	mov	r2, r0
 800648c:	4629      	mov	r1, r5
 800648e:	4620      	mov	r0, r4
 8006490:	9207      	str	r2, [sp, #28]
 8006492:	f000 fcc1 	bl	8006e18 <_Bfree>
 8006496:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800649a:	ea43 0102 	orr.w	r1, r3, r2
 800649e:	9b04      	ldr	r3, [sp, #16]
 80064a0:	430b      	orrs	r3, r1
 80064a2:	464d      	mov	r5, r9
 80064a4:	d10f      	bne.n	80064c6 <_dtoa_r+0xa66>
 80064a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80064aa:	d02a      	beq.n	8006502 <_dtoa_r+0xaa2>
 80064ac:	9b03      	ldr	r3, [sp, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	dd02      	ble.n	80064b8 <_dtoa_r+0xa58>
 80064b2:	9b02      	ldr	r3, [sp, #8]
 80064b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80064b8:	f88b a000 	strb.w	sl, [fp]
 80064bc:	e775      	b.n	80063aa <_dtoa_r+0x94a>
 80064be:	4638      	mov	r0, r7
 80064c0:	e7ba      	b.n	8006438 <_dtoa_r+0x9d8>
 80064c2:	2201      	movs	r2, #1
 80064c4:	e7e2      	b.n	800648c <_dtoa_r+0xa2c>
 80064c6:	9b03      	ldr	r3, [sp, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	db04      	blt.n	80064d6 <_dtoa_r+0xa76>
 80064cc:	9906      	ldr	r1, [sp, #24]
 80064ce:	430b      	orrs	r3, r1
 80064d0:	9904      	ldr	r1, [sp, #16]
 80064d2:	430b      	orrs	r3, r1
 80064d4:	d122      	bne.n	800651c <_dtoa_r+0xabc>
 80064d6:	2a00      	cmp	r2, #0
 80064d8:	ddee      	ble.n	80064b8 <_dtoa_r+0xa58>
 80064da:	ee18 1a10 	vmov	r1, s16
 80064de:	2201      	movs	r2, #1
 80064e0:	4620      	mov	r0, r4
 80064e2:	f000 feb5 	bl	8007250 <__lshift>
 80064e6:	4631      	mov	r1, r6
 80064e8:	ee08 0a10 	vmov	s16, r0
 80064ec:	f000 ff20 	bl	8007330 <__mcmp>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	dc03      	bgt.n	80064fc <_dtoa_r+0xa9c>
 80064f4:	d1e0      	bne.n	80064b8 <_dtoa_r+0xa58>
 80064f6:	f01a 0f01 	tst.w	sl, #1
 80064fa:	d0dd      	beq.n	80064b8 <_dtoa_r+0xa58>
 80064fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006500:	d1d7      	bne.n	80064b2 <_dtoa_r+0xa52>
 8006502:	2339      	movs	r3, #57	; 0x39
 8006504:	f88b 3000 	strb.w	r3, [fp]
 8006508:	462b      	mov	r3, r5
 800650a:	461d      	mov	r5, r3
 800650c:	3b01      	subs	r3, #1
 800650e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006512:	2a39      	cmp	r2, #57	; 0x39
 8006514:	d071      	beq.n	80065fa <_dtoa_r+0xb9a>
 8006516:	3201      	adds	r2, #1
 8006518:	701a      	strb	r2, [r3, #0]
 800651a:	e746      	b.n	80063aa <_dtoa_r+0x94a>
 800651c:	2a00      	cmp	r2, #0
 800651e:	dd07      	ble.n	8006530 <_dtoa_r+0xad0>
 8006520:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006524:	d0ed      	beq.n	8006502 <_dtoa_r+0xaa2>
 8006526:	f10a 0301 	add.w	r3, sl, #1
 800652a:	f88b 3000 	strb.w	r3, [fp]
 800652e:	e73c      	b.n	80063aa <_dtoa_r+0x94a>
 8006530:	9b05      	ldr	r3, [sp, #20]
 8006532:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006536:	4599      	cmp	r9, r3
 8006538:	d047      	beq.n	80065ca <_dtoa_r+0xb6a>
 800653a:	ee18 1a10 	vmov	r1, s16
 800653e:	2300      	movs	r3, #0
 8006540:	220a      	movs	r2, #10
 8006542:	4620      	mov	r0, r4
 8006544:	f000 fc8a 	bl	8006e5c <__multadd>
 8006548:	45b8      	cmp	r8, r7
 800654a:	ee08 0a10 	vmov	s16, r0
 800654e:	f04f 0300 	mov.w	r3, #0
 8006552:	f04f 020a 	mov.w	r2, #10
 8006556:	4641      	mov	r1, r8
 8006558:	4620      	mov	r0, r4
 800655a:	d106      	bne.n	800656a <_dtoa_r+0xb0a>
 800655c:	f000 fc7e 	bl	8006e5c <__multadd>
 8006560:	4680      	mov	r8, r0
 8006562:	4607      	mov	r7, r0
 8006564:	f109 0901 	add.w	r9, r9, #1
 8006568:	e772      	b.n	8006450 <_dtoa_r+0x9f0>
 800656a:	f000 fc77 	bl	8006e5c <__multadd>
 800656e:	4639      	mov	r1, r7
 8006570:	4680      	mov	r8, r0
 8006572:	2300      	movs	r3, #0
 8006574:	220a      	movs	r2, #10
 8006576:	4620      	mov	r0, r4
 8006578:	f000 fc70 	bl	8006e5c <__multadd>
 800657c:	4607      	mov	r7, r0
 800657e:	e7f1      	b.n	8006564 <_dtoa_r+0xb04>
 8006580:	9b03      	ldr	r3, [sp, #12]
 8006582:	9302      	str	r3, [sp, #8]
 8006584:	9d01      	ldr	r5, [sp, #4]
 8006586:	ee18 0a10 	vmov	r0, s16
 800658a:	4631      	mov	r1, r6
 800658c:	f7ff f9dc 	bl	8005948 <quorem>
 8006590:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006594:	9b01      	ldr	r3, [sp, #4]
 8006596:	f805 ab01 	strb.w	sl, [r5], #1
 800659a:	1aea      	subs	r2, r5, r3
 800659c:	9b02      	ldr	r3, [sp, #8]
 800659e:	4293      	cmp	r3, r2
 80065a0:	dd09      	ble.n	80065b6 <_dtoa_r+0xb56>
 80065a2:	ee18 1a10 	vmov	r1, s16
 80065a6:	2300      	movs	r3, #0
 80065a8:	220a      	movs	r2, #10
 80065aa:	4620      	mov	r0, r4
 80065ac:	f000 fc56 	bl	8006e5c <__multadd>
 80065b0:	ee08 0a10 	vmov	s16, r0
 80065b4:	e7e7      	b.n	8006586 <_dtoa_r+0xb26>
 80065b6:	9b02      	ldr	r3, [sp, #8]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	bfc8      	it	gt
 80065bc:	461d      	movgt	r5, r3
 80065be:	9b01      	ldr	r3, [sp, #4]
 80065c0:	bfd8      	it	le
 80065c2:	2501      	movle	r5, #1
 80065c4:	441d      	add	r5, r3
 80065c6:	f04f 0800 	mov.w	r8, #0
 80065ca:	ee18 1a10 	vmov	r1, s16
 80065ce:	2201      	movs	r2, #1
 80065d0:	4620      	mov	r0, r4
 80065d2:	f000 fe3d 	bl	8007250 <__lshift>
 80065d6:	4631      	mov	r1, r6
 80065d8:	ee08 0a10 	vmov	s16, r0
 80065dc:	f000 fea8 	bl	8007330 <__mcmp>
 80065e0:	2800      	cmp	r0, #0
 80065e2:	dc91      	bgt.n	8006508 <_dtoa_r+0xaa8>
 80065e4:	d102      	bne.n	80065ec <_dtoa_r+0xb8c>
 80065e6:	f01a 0f01 	tst.w	sl, #1
 80065ea:	d18d      	bne.n	8006508 <_dtoa_r+0xaa8>
 80065ec:	462b      	mov	r3, r5
 80065ee:	461d      	mov	r5, r3
 80065f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065f4:	2a30      	cmp	r2, #48	; 0x30
 80065f6:	d0fa      	beq.n	80065ee <_dtoa_r+0xb8e>
 80065f8:	e6d7      	b.n	80063aa <_dtoa_r+0x94a>
 80065fa:	9a01      	ldr	r2, [sp, #4]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d184      	bne.n	800650a <_dtoa_r+0xaaa>
 8006600:	9b00      	ldr	r3, [sp, #0]
 8006602:	3301      	adds	r3, #1
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	2331      	movs	r3, #49	; 0x31
 8006608:	7013      	strb	r3, [r2, #0]
 800660a:	e6ce      	b.n	80063aa <_dtoa_r+0x94a>
 800660c:	4b09      	ldr	r3, [pc, #36]	; (8006634 <_dtoa_r+0xbd4>)
 800660e:	f7ff ba95 	b.w	8005b3c <_dtoa_r+0xdc>
 8006612:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006614:	2b00      	cmp	r3, #0
 8006616:	f47f aa6e 	bne.w	8005af6 <_dtoa_r+0x96>
 800661a:	4b07      	ldr	r3, [pc, #28]	; (8006638 <_dtoa_r+0xbd8>)
 800661c:	f7ff ba8e 	b.w	8005b3c <_dtoa_r+0xdc>
 8006620:	9b02      	ldr	r3, [sp, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	dcae      	bgt.n	8006584 <_dtoa_r+0xb24>
 8006626:	9b06      	ldr	r3, [sp, #24]
 8006628:	2b02      	cmp	r3, #2
 800662a:	f73f aea8 	bgt.w	800637e <_dtoa_r+0x91e>
 800662e:	e7a9      	b.n	8006584 <_dtoa_r+0xb24>
 8006630:	08009900 	.word	0x08009900
 8006634:	08009af9 	.word	0x08009af9
 8006638:	08009881 	.word	0x08009881

0800663c <rshift>:
 800663c:	6903      	ldr	r3, [r0, #16]
 800663e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006642:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006646:	ea4f 1261 	mov.w	r2, r1, asr #5
 800664a:	f100 0414 	add.w	r4, r0, #20
 800664e:	dd45      	ble.n	80066dc <rshift+0xa0>
 8006650:	f011 011f 	ands.w	r1, r1, #31
 8006654:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006658:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800665c:	d10c      	bne.n	8006678 <rshift+0x3c>
 800665e:	f100 0710 	add.w	r7, r0, #16
 8006662:	4629      	mov	r1, r5
 8006664:	42b1      	cmp	r1, r6
 8006666:	d334      	bcc.n	80066d2 <rshift+0x96>
 8006668:	1a9b      	subs	r3, r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	1eea      	subs	r2, r5, #3
 800666e:	4296      	cmp	r6, r2
 8006670:	bf38      	it	cc
 8006672:	2300      	movcc	r3, #0
 8006674:	4423      	add	r3, r4
 8006676:	e015      	b.n	80066a4 <rshift+0x68>
 8006678:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800667c:	f1c1 0820 	rsb	r8, r1, #32
 8006680:	40cf      	lsrs	r7, r1
 8006682:	f105 0e04 	add.w	lr, r5, #4
 8006686:	46a1      	mov	r9, r4
 8006688:	4576      	cmp	r6, lr
 800668a:	46f4      	mov	ip, lr
 800668c:	d815      	bhi.n	80066ba <rshift+0x7e>
 800668e:	1a9a      	subs	r2, r3, r2
 8006690:	0092      	lsls	r2, r2, #2
 8006692:	3a04      	subs	r2, #4
 8006694:	3501      	adds	r5, #1
 8006696:	42ae      	cmp	r6, r5
 8006698:	bf38      	it	cc
 800669a:	2200      	movcc	r2, #0
 800669c:	18a3      	adds	r3, r4, r2
 800669e:	50a7      	str	r7, [r4, r2]
 80066a0:	b107      	cbz	r7, 80066a4 <rshift+0x68>
 80066a2:	3304      	adds	r3, #4
 80066a4:	1b1a      	subs	r2, r3, r4
 80066a6:	42a3      	cmp	r3, r4
 80066a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80066ac:	bf08      	it	eq
 80066ae:	2300      	moveq	r3, #0
 80066b0:	6102      	str	r2, [r0, #16]
 80066b2:	bf08      	it	eq
 80066b4:	6143      	streq	r3, [r0, #20]
 80066b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066ba:	f8dc c000 	ldr.w	ip, [ip]
 80066be:	fa0c fc08 	lsl.w	ip, ip, r8
 80066c2:	ea4c 0707 	orr.w	r7, ip, r7
 80066c6:	f849 7b04 	str.w	r7, [r9], #4
 80066ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80066ce:	40cf      	lsrs	r7, r1
 80066d0:	e7da      	b.n	8006688 <rshift+0x4c>
 80066d2:	f851 cb04 	ldr.w	ip, [r1], #4
 80066d6:	f847 cf04 	str.w	ip, [r7, #4]!
 80066da:	e7c3      	b.n	8006664 <rshift+0x28>
 80066dc:	4623      	mov	r3, r4
 80066de:	e7e1      	b.n	80066a4 <rshift+0x68>

080066e0 <__hexdig_fun>:
 80066e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80066e4:	2b09      	cmp	r3, #9
 80066e6:	d802      	bhi.n	80066ee <__hexdig_fun+0xe>
 80066e8:	3820      	subs	r0, #32
 80066ea:	b2c0      	uxtb	r0, r0
 80066ec:	4770      	bx	lr
 80066ee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80066f2:	2b05      	cmp	r3, #5
 80066f4:	d801      	bhi.n	80066fa <__hexdig_fun+0x1a>
 80066f6:	3847      	subs	r0, #71	; 0x47
 80066f8:	e7f7      	b.n	80066ea <__hexdig_fun+0xa>
 80066fa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80066fe:	2b05      	cmp	r3, #5
 8006700:	d801      	bhi.n	8006706 <__hexdig_fun+0x26>
 8006702:	3827      	subs	r0, #39	; 0x27
 8006704:	e7f1      	b.n	80066ea <__hexdig_fun+0xa>
 8006706:	2000      	movs	r0, #0
 8006708:	4770      	bx	lr
	...

0800670c <__gethex>:
 800670c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006710:	ed2d 8b02 	vpush	{d8}
 8006714:	b089      	sub	sp, #36	; 0x24
 8006716:	ee08 0a10 	vmov	s16, r0
 800671a:	9304      	str	r3, [sp, #16]
 800671c:	4bb4      	ldr	r3, [pc, #720]	; (80069f0 <__gethex+0x2e4>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	9301      	str	r3, [sp, #4]
 8006722:	4618      	mov	r0, r3
 8006724:	468b      	mov	fp, r1
 8006726:	4690      	mov	r8, r2
 8006728:	f7f9 fd64 	bl	80001f4 <strlen>
 800672c:	9b01      	ldr	r3, [sp, #4]
 800672e:	f8db 2000 	ldr.w	r2, [fp]
 8006732:	4403      	add	r3, r0
 8006734:	4682      	mov	sl, r0
 8006736:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800673a:	9305      	str	r3, [sp, #20]
 800673c:	1c93      	adds	r3, r2, #2
 800673e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006742:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006746:	32fe      	adds	r2, #254	; 0xfe
 8006748:	18d1      	adds	r1, r2, r3
 800674a:	461f      	mov	r7, r3
 800674c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006750:	9100      	str	r1, [sp, #0]
 8006752:	2830      	cmp	r0, #48	; 0x30
 8006754:	d0f8      	beq.n	8006748 <__gethex+0x3c>
 8006756:	f7ff ffc3 	bl	80066e0 <__hexdig_fun>
 800675a:	4604      	mov	r4, r0
 800675c:	2800      	cmp	r0, #0
 800675e:	d13a      	bne.n	80067d6 <__gethex+0xca>
 8006760:	9901      	ldr	r1, [sp, #4]
 8006762:	4652      	mov	r2, sl
 8006764:	4638      	mov	r0, r7
 8006766:	f001 fdb3 	bl	80082d0 <strncmp>
 800676a:	4605      	mov	r5, r0
 800676c:	2800      	cmp	r0, #0
 800676e:	d168      	bne.n	8006842 <__gethex+0x136>
 8006770:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006774:	eb07 060a 	add.w	r6, r7, sl
 8006778:	f7ff ffb2 	bl	80066e0 <__hexdig_fun>
 800677c:	2800      	cmp	r0, #0
 800677e:	d062      	beq.n	8006846 <__gethex+0x13a>
 8006780:	4633      	mov	r3, r6
 8006782:	7818      	ldrb	r0, [r3, #0]
 8006784:	2830      	cmp	r0, #48	; 0x30
 8006786:	461f      	mov	r7, r3
 8006788:	f103 0301 	add.w	r3, r3, #1
 800678c:	d0f9      	beq.n	8006782 <__gethex+0x76>
 800678e:	f7ff ffa7 	bl	80066e0 <__hexdig_fun>
 8006792:	2301      	movs	r3, #1
 8006794:	fab0 f480 	clz	r4, r0
 8006798:	0964      	lsrs	r4, r4, #5
 800679a:	4635      	mov	r5, r6
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	463a      	mov	r2, r7
 80067a0:	4616      	mov	r6, r2
 80067a2:	3201      	adds	r2, #1
 80067a4:	7830      	ldrb	r0, [r6, #0]
 80067a6:	f7ff ff9b 	bl	80066e0 <__hexdig_fun>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	d1f8      	bne.n	80067a0 <__gethex+0x94>
 80067ae:	9901      	ldr	r1, [sp, #4]
 80067b0:	4652      	mov	r2, sl
 80067b2:	4630      	mov	r0, r6
 80067b4:	f001 fd8c 	bl	80082d0 <strncmp>
 80067b8:	b980      	cbnz	r0, 80067dc <__gethex+0xd0>
 80067ba:	b94d      	cbnz	r5, 80067d0 <__gethex+0xc4>
 80067bc:	eb06 050a 	add.w	r5, r6, sl
 80067c0:	462a      	mov	r2, r5
 80067c2:	4616      	mov	r6, r2
 80067c4:	3201      	adds	r2, #1
 80067c6:	7830      	ldrb	r0, [r6, #0]
 80067c8:	f7ff ff8a 	bl	80066e0 <__hexdig_fun>
 80067cc:	2800      	cmp	r0, #0
 80067ce:	d1f8      	bne.n	80067c2 <__gethex+0xb6>
 80067d0:	1bad      	subs	r5, r5, r6
 80067d2:	00ad      	lsls	r5, r5, #2
 80067d4:	e004      	b.n	80067e0 <__gethex+0xd4>
 80067d6:	2400      	movs	r4, #0
 80067d8:	4625      	mov	r5, r4
 80067da:	e7e0      	b.n	800679e <__gethex+0x92>
 80067dc:	2d00      	cmp	r5, #0
 80067de:	d1f7      	bne.n	80067d0 <__gethex+0xc4>
 80067e0:	7833      	ldrb	r3, [r6, #0]
 80067e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80067e6:	2b50      	cmp	r3, #80	; 0x50
 80067e8:	d13b      	bne.n	8006862 <__gethex+0x156>
 80067ea:	7873      	ldrb	r3, [r6, #1]
 80067ec:	2b2b      	cmp	r3, #43	; 0x2b
 80067ee:	d02c      	beq.n	800684a <__gethex+0x13e>
 80067f0:	2b2d      	cmp	r3, #45	; 0x2d
 80067f2:	d02e      	beq.n	8006852 <__gethex+0x146>
 80067f4:	1c71      	adds	r1, r6, #1
 80067f6:	f04f 0900 	mov.w	r9, #0
 80067fa:	7808      	ldrb	r0, [r1, #0]
 80067fc:	f7ff ff70 	bl	80066e0 <__hexdig_fun>
 8006800:	1e43      	subs	r3, r0, #1
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b18      	cmp	r3, #24
 8006806:	d82c      	bhi.n	8006862 <__gethex+0x156>
 8006808:	f1a0 0210 	sub.w	r2, r0, #16
 800680c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006810:	f7ff ff66 	bl	80066e0 <__hexdig_fun>
 8006814:	1e43      	subs	r3, r0, #1
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b18      	cmp	r3, #24
 800681a:	d91d      	bls.n	8006858 <__gethex+0x14c>
 800681c:	f1b9 0f00 	cmp.w	r9, #0
 8006820:	d000      	beq.n	8006824 <__gethex+0x118>
 8006822:	4252      	negs	r2, r2
 8006824:	4415      	add	r5, r2
 8006826:	f8cb 1000 	str.w	r1, [fp]
 800682a:	b1e4      	cbz	r4, 8006866 <__gethex+0x15a>
 800682c:	9b00      	ldr	r3, [sp, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	bf14      	ite	ne
 8006832:	2700      	movne	r7, #0
 8006834:	2706      	moveq	r7, #6
 8006836:	4638      	mov	r0, r7
 8006838:	b009      	add	sp, #36	; 0x24
 800683a:	ecbd 8b02 	vpop	{d8}
 800683e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006842:	463e      	mov	r6, r7
 8006844:	4625      	mov	r5, r4
 8006846:	2401      	movs	r4, #1
 8006848:	e7ca      	b.n	80067e0 <__gethex+0xd4>
 800684a:	f04f 0900 	mov.w	r9, #0
 800684e:	1cb1      	adds	r1, r6, #2
 8006850:	e7d3      	b.n	80067fa <__gethex+0xee>
 8006852:	f04f 0901 	mov.w	r9, #1
 8006856:	e7fa      	b.n	800684e <__gethex+0x142>
 8006858:	230a      	movs	r3, #10
 800685a:	fb03 0202 	mla	r2, r3, r2, r0
 800685e:	3a10      	subs	r2, #16
 8006860:	e7d4      	b.n	800680c <__gethex+0x100>
 8006862:	4631      	mov	r1, r6
 8006864:	e7df      	b.n	8006826 <__gethex+0x11a>
 8006866:	1bf3      	subs	r3, r6, r7
 8006868:	3b01      	subs	r3, #1
 800686a:	4621      	mov	r1, r4
 800686c:	2b07      	cmp	r3, #7
 800686e:	dc0b      	bgt.n	8006888 <__gethex+0x17c>
 8006870:	ee18 0a10 	vmov	r0, s16
 8006874:	f000 fa90 	bl	8006d98 <_Balloc>
 8006878:	4604      	mov	r4, r0
 800687a:	b940      	cbnz	r0, 800688e <__gethex+0x182>
 800687c:	4b5d      	ldr	r3, [pc, #372]	; (80069f4 <__gethex+0x2e8>)
 800687e:	4602      	mov	r2, r0
 8006880:	21de      	movs	r1, #222	; 0xde
 8006882:	485d      	ldr	r0, [pc, #372]	; (80069f8 <__gethex+0x2ec>)
 8006884:	f001 fdf4 	bl	8008470 <__assert_func>
 8006888:	3101      	adds	r1, #1
 800688a:	105b      	asrs	r3, r3, #1
 800688c:	e7ee      	b.n	800686c <__gethex+0x160>
 800688e:	f100 0914 	add.w	r9, r0, #20
 8006892:	f04f 0b00 	mov.w	fp, #0
 8006896:	f1ca 0301 	rsb	r3, sl, #1
 800689a:	f8cd 9008 	str.w	r9, [sp, #8]
 800689e:	f8cd b000 	str.w	fp, [sp]
 80068a2:	9306      	str	r3, [sp, #24]
 80068a4:	42b7      	cmp	r7, r6
 80068a6:	d340      	bcc.n	800692a <__gethex+0x21e>
 80068a8:	9802      	ldr	r0, [sp, #8]
 80068aa:	9b00      	ldr	r3, [sp, #0]
 80068ac:	f840 3b04 	str.w	r3, [r0], #4
 80068b0:	eba0 0009 	sub.w	r0, r0, r9
 80068b4:	1080      	asrs	r0, r0, #2
 80068b6:	0146      	lsls	r6, r0, #5
 80068b8:	6120      	str	r0, [r4, #16]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fb5e 	bl	8006f7c <__hi0bits>
 80068c0:	1a30      	subs	r0, r6, r0
 80068c2:	f8d8 6000 	ldr.w	r6, [r8]
 80068c6:	42b0      	cmp	r0, r6
 80068c8:	dd63      	ble.n	8006992 <__gethex+0x286>
 80068ca:	1b87      	subs	r7, r0, r6
 80068cc:	4639      	mov	r1, r7
 80068ce:	4620      	mov	r0, r4
 80068d0:	f000 ff02 	bl	80076d8 <__any_on>
 80068d4:	4682      	mov	sl, r0
 80068d6:	b1a8      	cbz	r0, 8006904 <__gethex+0x1f8>
 80068d8:	1e7b      	subs	r3, r7, #1
 80068da:	1159      	asrs	r1, r3, #5
 80068dc:	f003 021f 	and.w	r2, r3, #31
 80068e0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80068e4:	f04f 0a01 	mov.w	sl, #1
 80068e8:	fa0a f202 	lsl.w	r2, sl, r2
 80068ec:	420a      	tst	r2, r1
 80068ee:	d009      	beq.n	8006904 <__gethex+0x1f8>
 80068f0:	4553      	cmp	r3, sl
 80068f2:	dd05      	ble.n	8006900 <__gethex+0x1f4>
 80068f4:	1eb9      	subs	r1, r7, #2
 80068f6:	4620      	mov	r0, r4
 80068f8:	f000 feee 	bl	80076d8 <__any_on>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d145      	bne.n	800698c <__gethex+0x280>
 8006900:	f04f 0a02 	mov.w	sl, #2
 8006904:	4639      	mov	r1, r7
 8006906:	4620      	mov	r0, r4
 8006908:	f7ff fe98 	bl	800663c <rshift>
 800690c:	443d      	add	r5, r7
 800690e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006912:	42ab      	cmp	r3, r5
 8006914:	da4c      	bge.n	80069b0 <__gethex+0x2a4>
 8006916:	ee18 0a10 	vmov	r0, s16
 800691a:	4621      	mov	r1, r4
 800691c:	f000 fa7c 	bl	8006e18 <_Bfree>
 8006920:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006922:	2300      	movs	r3, #0
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	27a3      	movs	r7, #163	; 0xa3
 8006928:	e785      	b.n	8006836 <__gethex+0x12a>
 800692a:	1e73      	subs	r3, r6, #1
 800692c:	9a05      	ldr	r2, [sp, #20]
 800692e:	9303      	str	r3, [sp, #12]
 8006930:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006934:	4293      	cmp	r3, r2
 8006936:	d019      	beq.n	800696c <__gethex+0x260>
 8006938:	f1bb 0f20 	cmp.w	fp, #32
 800693c:	d107      	bne.n	800694e <__gethex+0x242>
 800693e:	9b02      	ldr	r3, [sp, #8]
 8006940:	9a00      	ldr	r2, [sp, #0]
 8006942:	f843 2b04 	str.w	r2, [r3], #4
 8006946:	9302      	str	r3, [sp, #8]
 8006948:	2300      	movs	r3, #0
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	469b      	mov	fp, r3
 800694e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006952:	f7ff fec5 	bl	80066e0 <__hexdig_fun>
 8006956:	9b00      	ldr	r3, [sp, #0]
 8006958:	f000 000f 	and.w	r0, r0, #15
 800695c:	fa00 f00b 	lsl.w	r0, r0, fp
 8006960:	4303      	orrs	r3, r0
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	f10b 0b04 	add.w	fp, fp, #4
 8006968:	9b03      	ldr	r3, [sp, #12]
 800696a:	e00d      	b.n	8006988 <__gethex+0x27c>
 800696c:	9b03      	ldr	r3, [sp, #12]
 800696e:	9a06      	ldr	r2, [sp, #24]
 8006970:	4413      	add	r3, r2
 8006972:	42bb      	cmp	r3, r7
 8006974:	d3e0      	bcc.n	8006938 <__gethex+0x22c>
 8006976:	4618      	mov	r0, r3
 8006978:	9901      	ldr	r1, [sp, #4]
 800697a:	9307      	str	r3, [sp, #28]
 800697c:	4652      	mov	r2, sl
 800697e:	f001 fca7 	bl	80082d0 <strncmp>
 8006982:	9b07      	ldr	r3, [sp, #28]
 8006984:	2800      	cmp	r0, #0
 8006986:	d1d7      	bne.n	8006938 <__gethex+0x22c>
 8006988:	461e      	mov	r6, r3
 800698a:	e78b      	b.n	80068a4 <__gethex+0x198>
 800698c:	f04f 0a03 	mov.w	sl, #3
 8006990:	e7b8      	b.n	8006904 <__gethex+0x1f8>
 8006992:	da0a      	bge.n	80069aa <__gethex+0x29e>
 8006994:	1a37      	subs	r7, r6, r0
 8006996:	4621      	mov	r1, r4
 8006998:	ee18 0a10 	vmov	r0, s16
 800699c:	463a      	mov	r2, r7
 800699e:	f000 fc57 	bl	8007250 <__lshift>
 80069a2:	1bed      	subs	r5, r5, r7
 80069a4:	4604      	mov	r4, r0
 80069a6:	f100 0914 	add.w	r9, r0, #20
 80069aa:	f04f 0a00 	mov.w	sl, #0
 80069ae:	e7ae      	b.n	800690e <__gethex+0x202>
 80069b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80069b4:	42a8      	cmp	r0, r5
 80069b6:	dd72      	ble.n	8006a9e <__gethex+0x392>
 80069b8:	1b45      	subs	r5, r0, r5
 80069ba:	42ae      	cmp	r6, r5
 80069bc:	dc36      	bgt.n	8006a2c <__gethex+0x320>
 80069be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d02a      	beq.n	8006a1c <__gethex+0x310>
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d02c      	beq.n	8006a24 <__gethex+0x318>
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d11c      	bne.n	8006a08 <__gethex+0x2fc>
 80069ce:	42ae      	cmp	r6, r5
 80069d0:	d11a      	bne.n	8006a08 <__gethex+0x2fc>
 80069d2:	2e01      	cmp	r6, #1
 80069d4:	d112      	bne.n	80069fc <__gethex+0x2f0>
 80069d6:	9a04      	ldr	r2, [sp, #16]
 80069d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	2301      	movs	r3, #1
 80069e0:	6123      	str	r3, [r4, #16]
 80069e2:	f8c9 3000 	str.w	r3, [r9]
 80069e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80069e8:	2762      	movs	r7, #98	; 0x62
 80069ea:	601c      	str	r4, [r3, #0]
 80069ec:	e723      	b.n	8006836 <__gethex+0x12a>
 80069ee:	bf00      	nop
 80069f0:	08009978 	.word	0x08009978
 80069f4:	08009900 	.word	0x08009900
 80069f8:	08009911 	.word	0x08009911
 80069fc:	1e71      	subs	r1, r6, #1
 80069fe:	4620      	mov	r0, r4
 8006a00:	f000 fe6a 	bl	80076d8 <__any_on>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d1e6      	bne.n	80069d6 <__gethex+0x2ca>
 8006a08:	ee18 0a10 	vmov	r0, s16
 8006a0c:	4621      	mov	r1, r4
 8006a0e:	f000 fa03 	bl	8006e18 <_Bfree>
 8006a12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006a14:	2300      	movs	r3, #0
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	2750      	movs	r7, #80	; 0x50
 8006a1a:	e70c      	b.n	8006836 <__gethex+0x12a>
 8006a1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1f2      	bne.n	8006a08 <__gethex+0x2fc>
 8006a22:	e7d8      	b.n	80069d6 <__gethex+0x2ca>
 8006a24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1d5      	bne.n	80069d6 <__gethex+0x2ca>
 8006a2a:	e7ed      	b.n	8006a08 <__gethex+0x2fc>
 8006a2c:	1e6f      	subs	r7, r5, #1
 8006a2e:	f1ba 0f00 	cmp.w	sl, #0
 8006a32:	d131      	bne.n	8006a98 <__gethex+0x38c>
 8006a34:	b127      	cbz	r7, 8006a40 <__gethex+0x334>
 8006a36:	4639      	mov	r1, r7
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f000 fe4d 	bl	80076d8 <__any_on>
 8006a3e:	4682      	mov	sl, r0
 8006a40:	117b      	asrs	r3, r7, #5
 8006a42:	2101      	movs	r1, #1
 8006a44:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006a48:	f007 071f 	and.w	r7, r7, #31
 8006a4c:	fa01 f707 	lsl.w	r7, r1, r7
 8006a50:	421f      	tst	r7, r3
 8006a52:	4629      	mov	r1, r5
 8006a54:	4620      	mov	r0, r4
 8006a56:	bf18      	it	ne
 8006a58:	f04a 0a02 	orrne.w	sl, sl, #2
 8006a5c:	1b76      	subs	r6, r6, r5
 8006a5e:	f7ff fded 	bl	800663c <rshift>
 8006a62:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006a66:	2702      	movs	r7, #2
 8006a68:	f1ba 0f00 	cmp.w	sl, #0
 8006a6c:	d048      	beq.n	8006b00 <__gethex+0x3f4>
 8006a6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d015      	beq.n	8006aa2 <__gethex+0x396>
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d017      	beq.n	8006aaa <__gethex+0x39e>
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d109      	bne.n	8006a92 <__gethex+0x386>
 8006a7e:	f01a 0f02 	tst.w	sl, #2
 8006a82:	d006      	beq.n	8006a92 <__gethex+0x386>
 8006a84:	f8d9 0000 	ldr.w	r0, [r9]
 8006a88:	ea4a 0a00 	orr.w	sl, sl, r0
 8006a8c:	f01a 0f01 	tst.w	sl, #1
 8006a90:	d10e      	bne.n	8006ab0 <__gethex+0x3a4>
 8006a92:	f047 0710 	orr.w	r7, r7, #16
 8006a96:	e033      	b.n	8006b00 <__gethex+0x3f4>
 8006a98:	f04f 0a01 	mov.w	sl, #1
 8006a9c:	e7d0      	b.n	8006a40 <__gethex+0x334>
 8006a9e:	2701      	movs	r7, #1
 8006aa0:	e7e2      	b.n	8006a68 <__gethex+0x35c>
 8006aa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006aa4:	f1c3 0301 	rsb	r3, r3, #1
 8006aa8:	9315      	str	r3, [sp, #84]	; 0x54
 8006aaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d0f0      	beq.n	8006a92 <__gethex+0x386>
 8006ab0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006ab4:	f104 0314 	add.w	r3, r4, #20
 8006ab8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006abc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006ac0:	f04f 0c00 	mov.w	ip, #0
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aca:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006ace:	d01c      	beq.n	8006b0a <__gethex+0x3fe>
 8006ad0:	3201      	adds	r2, #1
 8006ad2:	6002      	str	r2, [r0, #0]
 8006ad4:	2f02      	cmp	r7, #2
 8006ad6:	f104 0314 	add.w	r3, r4, #20
 8006ada:	d13f      	bne.n	8006b5c <__gethex+0x450>
 8006adc:	f8d8 2000 	ldr.w	r2, [r8]
 8006ae0:	3a01      	subs	r2, #1
 8006ae2:	42b2      	cmp	r2, r6
 8006ae4:	d10a      	bne.n	8006afc <__gethex+0x3f0>
 8006ae6:	1171      	asrs	r1, r6, #5
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006aee:	f006 061f 	and.w	r6, r6, #31
 8006af2:	fa02 f606 	lsl.w	r6, r2, r6
 8006af6:	421e      	tst	r6, r3
 8006af8:	bf18      	it	ne
 8006afa:	4617      	movne	r7, r2
 8006afc:	f047 0720 	orr.w	r7, r7, #32
 8006b00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b02:	601c      	str	r4, [r3, #0]
 8006b04:	9b04      	ldr	r3, [sp, #16]
 8006b06:	601d      	str	r5, [r3, #0]
 8006b08:	e695      	b.n	8006836 <__gethex+0x12a>
 8006b0a:	4299      	cmp	r1, r3
 8006b0c:	f843 cc04 	str.w	ip, [r3, #-4]
 8006b10:	d8d8      	bhi.n	8006ac4 <__gethex+0x3b8>
 8006b12:	68a3      	ldr	r3, [r4, #8]
 8006b14:	459b      	cmp	fp, r3
 8006b16:	db19      	blt.n	8006b4c <__gethex+0x440>
 8006b18:	6861      	ldr	r1, [r4, #4]
 8006b1a:	ee18 0a10 	vmov	r0, s16
 8006b1e:	3101      	adds	r1, #1
 8006b20:	f000 f93a 	bl	8006d98 <_Balloc>
 8006b24:	4681      	mov	r9, r0
 8006b26:	b918      	cbnz	r0, 8006b30 <__gethex+0x424>
 8006b28:	4b1a      	ldr	r3, [pc, #104]	; (8006b94 <__gethex+0x488>)
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	2184      	movs	r1, #132	; 0x84
 8006b2e:	e6a8      	b.n	8006882 <__gethex+0x176>
 8006b30:	6922      	ldr	r2, [r4, #16]
 8006b32:	3202      	adds	r2, #2
 8006b34:	f104 010c 	add.w	r1, r4, #12
 8006b38:	0092      	lsls	r2, r2, #2
 8006b3a:	300c      	adds	r0, #12
 8006b3c:	f000 f91e 	bl	8006d7c <memcpy>
 8006b40:	4621      	mov	r1, r4
 8006b42:	ee18 0a10 	vmov	r0, s16
 8006b46:	f000 f967 	bl	8006e18 <_Bfree>
 8006b4a:	464c      	mov	r4, r9
 8006b4c:	6923      	ldr	r3, [r4, #16]
 8006b4e:	1c5a      	adds	r2, r3, #1
 8006b50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b54:	6122      	str	r2, [r4, #16]
 8006b56:	2201      	movs	r2, #1
 8006b58:	615a      	str	r2, [r3, #20]
 8006b5a:	e7bb      	b.n	8006ad4 <__gethex+0x3c8>
 8006b5c:	6922      	ldr	r2, [r4, #16]
 8006b5e:	455a      	cmp	r2, fp
 8006b60:	dd0b      	ble.n	8006b7a <__gethex+0x46e>
 8006b62:	2101      	movs	r1, #1
 8006b64:	4620      	mov	r0, r4
 8006b66:	f7ff fd69 	bl	800663c <rshift>
 8006b6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b6e:	3501      	adds	r5, #1
 8006b70:	42ab      	cmp	r3, r5
 8006b72:	f6ff aed0 	blt.w	8006916 <__gethex+0x20a>
 8006b76:	2701      	movs	r7, #1
 8006b78:	e7c0      	b.n	8006afc <__gethex+0x3f0>
 8006b7a:	f016 061f 	ands.w	r6, r6, #31
 8006b7e:	d0fa      	beq.n	8006b76 <__gethex+0x46a>
 8006b80:	4453      	add	r3, sl
 8006b82:	f1c6 0620 	rsb	r6, r6, #32
 8006b86:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006b8a:	f000 f9f7 	bl	8006f7c <__hi0bits>
 8006b8e:	42b0      	cmp	r0, r6
 8006b90:	dbe7      	blt.n	8006b62 <__gethex+0x456>
 8006b92:	e7f0      	b.n	8006b76 <__gethex+0x46a>
 8006b94:	08009900 	.word	0x08009900

08006b98 <L_shift>:
 8006b98:	f1c2 0208 	rsb	r2, r2, #8
 8006b9c:	0092      	lsls	r2, r2, #2
 8006b9e:	b570      	push	{r4, r5, r6, lr}
 8006ba0:	f1c2 0620 	rsb	r6, r2, #32
 8006ba4:	6843      	ldr	r3, [r0, #4]
 8006ba6:	6804      	ldr	r4, [r0, #0]
 8006ba8:	fa03 f506 	lsl.w	r5, r3, r6
 8006bac:	432c      	orrs	r4, r5
 8006bae:	40d3      	lsrs	r3, r2
 8006bb0:	6004      	str	r4, [r0, #0]
 8006bb2:	f840 3f04 	str.w	r3, [r0, #4]!
 8006bb6:	4288      	cmp	r0, r1
 8006bb8:	d3f4      	bcc.n	8006ba4 <L_shift+0xc>
 8006bba:	bd70      	pop	{r4, r5, r6, pc}

08006bbc <__match>:
 8006bbc:	b530      	push	{r4, r5, lr}
 8006bbe:	6803      	ldr	r3, [r0, #0]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bc6:	b914      	cbnz	r4, 8006bce <__match+0x12>
 8006bc8:	6003      	str	r3, [r0, #0]
 8006bca:	2001      	movs	r0, #1
 8006bcc:	bd30      	pop	{r4, r5, pc}
 8006bce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bd2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006bd6:	2d19      	cmp	r5, #25
 8006bd8:	bf98      	it	ls
 8006bda:	3220      	addls	r2, #32
 8006bdc:	42a2      	cmp	r2, r4
 8006bde:	d0f0      	beq.n	8006bc2 <__match+0x6>
 8006be0:	2000      	movs	r0, #0
 8006be2:	e7f3      	b.n	8006bcc <__match+0x10>

08006be4 <__hexnan>:
 8006be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be8:	680b      	ldr	r3, [r1, #0]
 8006bea:	115e      	asrs	r6, r3, #5
 8006bec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006bf0:	f013 031f 	ands.w	r3, r3, #31
 8006bf4:	b087      	sub	sp, #28
 8006bf6:	bf18      	it	ne
 8006bf8:	3604      	addne	r6, #4
 8006bfa:	2500      	movs	r5, #0
 8006bfc:	1f37      	subs	r7, r6, #4
 8006bfe:	4690      	mov	r8, r2
 8006c00:	6802      	ldr	r2, [r0, #0]
 8006c02:	9301      	str	r3, [sp, #4]
 8006c04:	4682      	mov	sl, r0
 8006c06:	f846 5c04 	str.w	r5, [r6, #-4]
 8006c0a:	46b9      	mov	r9, r7
 8006c0c:	463c      	mov	r4, r7
 8006c0e:	9502      	str	r5, [sp, #8]
 8006c10:	46ab      	mov	fp, r5
 8006c12:	7851      	ldrb	r1, [r2, #1]
 8006c14:	1c53      	adds	r3, r2, #1
 8006c16:	9303      	str	r3, [sp, #12]
 8006c18:	b341      	cbz	r1, 8006c6c <__hexnan+0x88>
 8006c1a:	4608      	mov	r0, r1
 8006c1c:	9205      	str	r2, [sp, #20]
 8006c1e:	9104      	str	r1, [sp, #16]
 8006c20:	f7ff fd5e 	bl	80066e0 <__hexdig_fun>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d14f      	bne.n	8006cc8 <__hexnan+0xe4>
 8006c28:	9904      	ldr	r1, [sp, #16]
 8006c2a:	9a05      	ldr	r2, [sp, #20]
 8006c2c:	2920      	cmp	r1, #32
 8006c2e:	d818      	bhi.n	8006c62 <__hexnan+0x7e>
 8006c30:	9b02      	ldr	r3, [sp, #8]
 8006c32:	459b      	cmp	fp, r3
 8006c34:	dd13      	ble.n	8006c5e <__hexnan+0x7a>
 8006c36:	454c      	cmp	r4, r9
 8006c38:	d206      	bcs.n	8006c48 <__hexnan+0x64>
 8006c3a:	2d07      	cmp	r5, #7
 8006c3c:	dc04      	bgt.n	8006c48 <__hexnan+0x64>
 8006c3e:	462a      	mov	r2, r5
 8006c40:	4649      	mov	r1, r9
 8006c42:	4620      	mov	r0, r4
 8006c44:	f7ff ffa8 	bl	8006b98 <L_shift>
 8006c48:	4544      	cmp	r4, r8
 8006c4a:	d950      	bls.n	8006cee <__hexnan+0x10a>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	f1a4 0904 	sub.w	r9, r4, #4
 8006c52:	f844 3c04 	str.w	r3, [r4, #-4]
 8006c56:	f8cd b008 	str.w	fp, [sp, #8]
 8006c5a:	464c      	mov	r4, r9
 8006c5c:	461d      	mov	r5, r3
 8006c5e:	9a03      	ldr	r2, [sp, #12]
 8006c60:	e7d7      	b.n	8006c12 <__hexnan+0x2e>
 8006c62:	2929      	cmp	r1, #41	; 0x29
 8006c64:	d156      	bne.n	8006d14 <__hexnan+0x130>
 8006c66:	3202      	adds	r2, #2
 8006c68:	f8ca 2000 	str.w	r2, [sl]
 8006c6c:	f1bb 0f00 	cmp.w	fp, #0
 8006c70:	d050      	beq.n	8006d14 <__hexnan+0x130>
 8006c72:	454c      	cmp	r4, r9
 8006c74:	d206      	bcs.n	8006c84 <__hexnan+0xa0>
 8006c76:	2d07      	cmp	r5, #7
 8006c78:	dc04      	bgt.n	8006c84 <__hexnan+0xa0>
 8006c7a:	462a      	mov	r2, r5
 8006c7c:	4649      	mov	r1, r9
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f7ff ff8a 	bl	8006b98 <L_shift>
 8006c84:	4544      	cmp	r4, r8
 8006c86:	d934      	bls.n	8006cf2 <__hexnan+0x10e>
 8006c88:	f1a8 0204 	sub.w	r2, r8, #4
 8006c8c:	4623      	mov	r3, r4
 8006c8e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006c92:	f842 1f04 	str.w	r1, [r2, #4]!
 8006c96:	429f      	cmp	r7, r3
 8006c98:	d2f9      	bcs.n	8006c8e <__hexnan+0xaa>
 8006c9a:	1b3b      	subs	r3, r7, r4
 8006c9c:	f023 0303 	bic.w	r3, r3, #3
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	3401      	adds	r4, #1
 8006ca4:	3e03      	subs	r6, #3
 8006ca6:	42b4      	cmp	r4, r6
 8006ca8:	bf88      	it	hi
 8006caa:	2304      	movhi	r3, #4
 8006cac:	4443      	add	r3, r8
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f843 2b04 	str.w	r2, [r3], #4
 8006cb4:	429f      	cmp	r7, r3
 8006cb6:	d2fb      	bcs.n	8006cb0 <__hexnan+0xcc>
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	b91b      	cbnz	r3, 8006cc4 <__hexnan+0xe0>
 8006cbc:	4547      	cmp	r7, r8
 8006cbe:	d127      	bne.n	8006d10 <__hexnan+0x12c>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	603b      	str	r3, [r7, #0]
 8006cc4:	2005      	movs	r0, #5
 8006cc6:	e026      	b.n	8006d16 <__hexnan+0x132>
 8006cc8:	3501      	adds	r5, #1
 8006cca:	2d08      	cmp	r5, #8
 8006ccc:	f10b 0b01 	add.w	fp, fp, #1
 8006cd0:	dd06      	ble.n	8006ce0 <__hexnan+0xfc>
 8006cd2:	4544      	cmp	r4, r8
 8006cd4:	d9c3      	bls.n	8006c5e <__hexnan+0x7a>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f844 3c04 	str.w	r3, [r4, #-4]
 8006cdc:	2501      	movs	r5, #1
 8006cde:	3c04      	subs	r4, #4
 8006ce0:	6822      	ldr	r2, [r4, #0]
 8006ce2:	f000 000f 	and.w	r0, r0, #15
 8006ce6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006cea:	6022      	str	r2, [r4, #0]
 8006cec:	e7b7      	b.n	8006c5e <__hexnan+0x7a>
 8006cee:	2508      	movs	r5, #8
 8006cf0:	e7b5      	b.n	8006c5e <__hexnan+0x7a>
 8006cf2:	9b01      	ldr	r3, [sp, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0df      	beq.n	8006cb8 <__hexnan+0xd4>
 8006cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cfc:	f1c3 0320 	rsb	r3, r3, #32
 8006d00:	fa22 f303 	lsr.w	r3, r2, r3
 8006d04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006d08:	401a      	ands	r2, r3
 8006d0a:	f846 2c04 	str.w	r2, [r6, #-4]
 8006d0e:	e7d3      	b.n	8006cb8 <__hexnan+0xd4>
 8006d10:	3f04      	subs	r7, #4
 8006d12:	e7d1      	b.n	8006cb8 <__hexnan+0xd4>
 8006d14:	2004      	movs	r0, #4
 8006d16:	b007      	add	sp, #28
 8006d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d1c <_localeconv_r>:
 8006d1c:	4800      	ldr	r0, [pc, #0]	; (8006d20 <_localeconv_r+0x4>)
 8006d1e:	4770      	bx	lr
 8006d20:	2000016c 	.word	0x2000016c

08006d24 <_lseek_r>:
 8006d24:	b538      	push	{r3, r4, r5, lr}
 8006d26:	4d07      	ldr	r5, [pc, #28]	; (8006d44 <_lseek_r+0x20>)
 8006d28:	4604      	mov	r4, r0
 8006d2a:	4608      	mov	r0, r1
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	2200      	movs	r2, #0
 8006d30:	602a      	str	r2, [r5, #0]
 8006d32:	461a      	mov	r2, r3
 8006d34:	f7fb ff3f 	bl	8002bb6 <_lseek>
 8006d38:	1c43      	adds	r3, r0, #1
 8006d3a:	d102      	bne.n	8006d42 <_lseek_r+0x1e>
 8006d3c:	682b      	ldr	r3, [r5, #0]
 8006d3e:	b103      	cbz	r3, 8006d42 <_lseek_r+0x1e>
 8006d40:	6023      	str	r3, [r4, #0]
 8006d42:	bd38      	pop	{r3, r4, r5, pc}
 8006d44:	2000968c 	.word	0x2000968c

08006d48 <malloc>:
 8006d48:	4b02      	ldr	r3, [pc, #8]	; (8006d54 <malloc+0xc>)
 8006d4a:	4601      	mov	r1, r0
 8006d4c:	6818      	ldr	r0, [r3, #0]
 8006d4e:	f000 bd67 	b.w	8007820 <_malloc_r>
 8006d52:	bf00      	nop
 8006d54:	20000014 	.word	0x20000014

08006d58 <__ascii_mbtowc>:
 8006d58:	b082      	sub	sp, #8
 8006d5a:	b901      	cbnz	r1, 8006d5e <__ascii_mbtowc+0x6>
 8006d5c:	a901      	add	r1, sp, #4
 8006d5e:	b142      	cbz	r2, 8006d72 <__ascii_mbtowc+0x1a>
 8006d60:	b14b      	cbz	r3, 8006d76 <__ascii_mbtowc+0x1e>
 8006d62:	7813      	ldrb	r3, [r2, #0]
 8006d64:	600b      	str	r3, [r1, #0]
 8006d66:	7812      	ldrb	r2, [r2, #0]
 8006d68:	1e10      	subs	r0, r2, #0
 8006d6a:	bf18      	it	ne
 8006d6c:	2001      	movne	r0, #1
 8006d6e:	b002      	add	sp, #8
 8006d70:	4770      	bx	lr
 8006d72:	4610      	mov	r0, r2
 8006d74:	e7fb      	b.n	8006d6e <__ascii_mbtowc+0x16>
 8006d76:	f06f 0001 	mvn.w	r0, #1
 8006d7a:	e7f8      	b.n	8006d6e <__ascii_mbtowc+0x16>

08006d7c <memcpy>:
 8006d7c:	440a      	add	r2, r1
 8006d7e:	4291      	cmp	r1, r2
 8006d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d84:	d100      	bne.n	8006d88 <memcpy+0xc>
 8006d86:	4770      	bx	lr
 8006d88:	b510      	push	{r4, lr}
 8006d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d92:	4291      	cmp	r1, r2
 8006d94:	d1f9      	bne.n	8006d8a <memcpy+0xe>
 8006d96:	bd10      	pop	{r4, pc}

08006d98 <_Balloc>:
 8006d98:	b570      	push	{r4, r5, r6, lr}
 8006d9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	460d      	mov	r5, r1
 8006da0:	b976      	cbnz	r6, 8006dc0 <_Balloc+0x28>
 8006da2:	2010      	movs	r0, #16
 8006da4:	f7ff ffd0 	bl	8006d48 <malloc>
 8006da8:	4602      	mov	r2, r0
 8006daa:	6260      	str	r0, [r4, #36]	; 0x24
 8006dac:	b920      	cbnz	r0, 8006db8 <_Balloc+0x20>
 8006dae:	4b18      	ldr	r3, [pc, #96]	; (8006e10 <_Balloc+0x78>)
 8006db0:	4818      	ldr	r0, [pc, #96]	; (8006e14 <_Balloc+0x7c>)
 8006db2:	2166      	movs	r1, #102	; 0x66
 8006db4:	f001 fb5c 	bl	8008470 <__assert_func>
 8006db8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dbc:	6006      	str	r6, [r0, #0]
 8006dbe:	60c6      	str	r6, [r0, #12]
 8006dc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006dc2:	68f3      	ldr	r3, [r6, #12]
 8006dc4:	b183      	cbz	r3, 8006de8 <_Balloc+0x50>
 8006dc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dce:	b9b8      	cbnz	r0, 8006e00 <_Balloc+0x68>
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	fa01 f605 	lsl.w	r6, r1, r5
 8006dd6:	1d72      	adds	r2, r6, #5
 8006dd8:	0092      	lsls	r2, r2, #2
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f000 fc9d 	bl	800771a <_calloc_r>
 8006de0:	b160      	cbz	r0, 8006dfc <_Balloc+0x64>
 8006de2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006de6:	e00e      	b.n	8006e06 <_Balloc+0x6e>
 8006de8:	2221      	movs	r2, #33	; 0x21
 8006dea:	2104      	movs	r1, #4
 8006dec:	4620      	mov	r0, r4
 8006dee:	f000 fc94 	bl	800771a <_calloc_r>
 8006df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006df4:	60f0      	str	r0, [r6, #12]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1e4      	bne.n	8006dc6 <_Balloc+0x2e>
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	bd70      	pop	{r4, r5, r6, pc}
 8006e00:	6802      	ldr	r2, [r0, #0]
 8006e02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e06:	2300      	movs	r3, #0
 8006e08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e0c:	e7f7      	b.n	8006dfe <_Balloc+0x66>
 8006e0e:	bf00      	nop
 8006e10:	0800988e 	.word	0x0800988e
 8006e14:	0800998c 	.word	0x0800998c

08006e18 <_Bfree>:
 8006e18:	b570      	push	{r4, r5, r6, lr}
 8006e1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	b976      	cbnz	r6, 8006e40 <_Bfree+0x28>
 8006e22:	2010      	movs	r0, #16
 8006e24:	f7ff ff90 	bl	8006d48 <malloc>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	6268      	str	r0, [r5, #36]	; 0x24
 8006e2c:	b920      	cbnz	r0, 8006e38 <_Bfree+0x20>
 8006e2e:	4b09      	ldr	r3, [pc, #36]	; (8006e54 <_Bfree+0x3c>)
 8006e30:	4809      	ldr	r0, [pc, #36]	; (8006e58 <_Bfree+0x40>)
 8006e32:	218a      	movs	r1, #138	; 0x8a
 8006e34:	f001 fb1c 	bl	8008470 <__assert_func>
 8006e38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e3c:	6006      	str	r6, [r0, #0]
 8006e3e:	60c6      	str	r6, [r0, #12]
 8006e40:	b13c      	cbz	r4, 8006e52 <_Bfree+0x3a>
 8006e42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e44:	6862      	ldr	r2, [r4, #4]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e4c:	6021      	str	r1, [r4, #0]
 8006e4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e52:	bd70      	pop	{r4, r5, r6, pc}
 8006e54:	0800988e 	.word	0x0800988e
 8006e58:	0800998c 	.word	0x0800998c

08006e5c <__multadd>:
 8006e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e60:	690d      	ldr	r5, [r1, #16]
 8006e62:	4607      	mov	r7, r0
 8006e64:	460c      	mov	r4, r1
 8006e66:	461e      	mov	r6, r3
 8006e68:	f101 0c14 	add.w	ip, r1, #20
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	f8dc 3000 	ldr.w	r3, [ip]
 8006e72:	b299      	uxth	r1, r3
 8006e74:	fb02 6101 	mla	r1, r2, r1, r6
 8006e78:	0c1e      	lsrs	r6, r3, #16
 8006e7a:	0c0b      	lsrs	r3, r1, #16
 8006e7c:	fb02 3306 	mla	r3, r2, r6, r3
 8006e80:	b289      	uxth	r1, r1
 8006e82:	3001      	adds	r0, #1
 8006e84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e88:	4285      	cmp	r5, r0
 8006e8a:	f84c 1b04 	str.w	r1, [ip], #4
 8006e8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e92:	dcec      	bgt.n	8006e6e <__multadd+0x12>
 8006e94:	b30e      	cbz	r6, 8006eda <__multadd+0x7e>
 8006e96:	68a3      	ldr	r3, [r4, #8]
 8006e98:	42ab      	cmp	r3, r5
 8006e9a:	dc19      	bgt.n	8006ed0 <__multadd+0x74>
 8006e9c:	6861      	ldr	r1, [r4, #4]
 8006e9e:	4638      	mov	r0, r7
 8006ea0:	3101      	adds	r1, #1
 8006ea2:	f7ff ff79 	bl	8006d98 <_Balloc>
 8006ea6:	4680      	mov	r8, r0
 8006ea8:	b928      	cbnz	r0, 8006eb6 <__multadd+0x5a>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	4b0c      	ldr	r3, [pc, #48]	; (8006ee0 <__multadd+0x84>)
 8006eae:	480d      	ldr	r0, [pc, #52]	; (8006ee4 <__multadd+0x88>)
 8006eb0:	21b5      	movs	r1, #181	; 0xb5
 8006eb2:	f001 fadd 	bl	8008470 <__assert_func>
 8006eb6:	6922      	ldr	r2, [r4, #16]
 8006eb8:	3202      	adds	r2, #2
 8006eba:	f104 010c 	add.w	r1, r4, #12
 8006ebe:	0092      	lsls	r2, r2, #2
 8006ec0:	300c      	adds	r0, #12
 8006ec2:	f7ff ff5b 	bl	8006d7c <memcpy>
 8006ec6:	4621      	mov	r1, r4
 8006ec8:	4638      	mov	r0, r7
 8006eca:	f7ff ffa5 	bl	8006e18 <_Bfree>
 8006ece:	4644      	mov	r4, r8
 8006ed0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ed4:	3501      	adds	r5, #1
 8006ed6:	615e      	str	r6, [r3, #20]
 8006ed8:	6125      	str	r5, [r4, #16]
 8006eda:	4620      	mov	r0, r4
 8006edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ee0:	08009900 	.word	0x08009900
 8006ee4:	0800998c 	.word	0x0800998c

08006ee8 <__s2b>:
 8006ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eec:	460c      	mov	r4, r1
 8006eee:	4615      	mov	r5, r2
 8006ef0:	461f      	mov	r7, r3
 8006ef2:	2209      	movs	r2, #9
 8006ef4:	3308      	adds	r3, #8
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006efc:	2100      	movs	r1, #0
 8006efe:	2201      	movs	r2, #1
 8006f00:	429a      	cmp	r2, r3
 8006f02:	db09      	blt.n	8006f18 <__s2b+0x30>
 8006f04:	4630      	mov	r0, r6
 8006f06:	f7ff ff47 	bl	8006d98 <_Balloc>
 8006f0a:	b940      	cbnz	r0, 8006f1e <__s2b+0x36>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	4b19      	ldr	r3, [pc, #100]	; (8006f74 <__s2b+0x8c>)
 8006f10:	4819      	ldr	r0, [pc, #100]	; (8006f78 <__s2b+0x90>)
 8006f12:	21ce      	movs	r1, #206	; 0xce
 8006f14:	f001 faac 	bl	8008470 <__assert_func>
 8006f18:	0052      	lsls	r2, r2, #1
 8006f1a:	3101      	adds	r1, #1
 8006f1c:	e7f0      	b.n	8006f00 <__s2b+0x18>
 8006f1e:	9b08      	ldr	r3, [sp, #32]
 8006f20:	6143      	str	r3, [r0, #20]
 8006f22:	2d09      	cmp	r5, #9
 8006f24:	f04f 0301 	mov.w	r3, #1
 8006f28:	6103      	str	r3, [r0, #16]
 8006f2a:	dd16      	ble.n	8006f5a <__s2b+0x72>
 8006f2c:	f104 0909 	add.w	r9, r4, #9
 8006f30:	46c8      	mov	r8, r9
 8006f32:	442c      	add	r4, r5
 8006f34:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006f38:	4601      	mov	r1, r0
 8006f3a:	3b30      	subs	r3, #48	; 0x30
 8006f3c:	220a      	movs	r2, #10
 8006f3e:	4630      	mov	r0, r6
 8006f40:	f7ff ff8c 	bl	8006e5c <__multadd>
 8006f44:	45a0      	cmp	r8, r4
 8006f46:	d1f5      	bne.n	8006f34 <__s2b+0x4c>
 8006f48:	f1a5 0408 	sub.w	r4, r5, #8
 8006f4c:	444c      	add	r4, r9
 8006f4e:	1b2d      	subs	r5, r5, r4
 8006f50:	1963      	adds	r3, r4, r5
 8006f52:	42bb      	cmp	r3, r7
 8006f54:	db04      	blt.n	8006f60 <__s2b+0x78>
 8006f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f5a:	340a      	adds	r4, #10
 8006f5c:	2509      	movs	r5, #9
 8006f5e:	e7f6      	b.n	8006f4e <__s2b+0x66>
 8006f60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006f64:	4601      	mov	r1, r0
 8006f66:	3b30      	subs	r3, #48	; 0x30
 8006f68:	220a      	movs	r2, #10
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	f7ff ff76 	bl	8006e5c <__multadd>
 8006f70:	e7ee      	b.n	8006f50 <__s2b+0x68>
 8006f72:	bf00      	nop
 8006f74:	08009900 	.word	0x08009900
 8006f78:	0800998c 	.word	0x0800998c

08006f7c <__hi0bits>:
 8006f7c:	0c03      	lsrs	r3, r0, #16
 8006f7e:	041b      	lsls	r3, r3, #16
 8006f80:	b9d3      	cbnz	r3, 8006fb8 <__hi0bits+0x3c>
 8006f82:	0400      	lsls	r0, r0, #16
 8006f84:	2310      	movs	r3, #16
 8006f86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f8a:	bf04      	itt	eq
 8006f8c:	0200      	lsleq	r0, r0, #8
 8006f8e:	3308      	addeq	r3, #8
 8006f90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006f94:	bf04      	itt	eq
 8006f96:	0100      	lsleq	r0, r0, #4
 8006f98:	3304      	addeq	r3, #4
 8006f9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f9e:	bf04      	itt	eq
 8006fa0:	0080      	lsleq	r0, r0, #2
 8006fa2:	3302      	addeq	r3, #2
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	db05      	blt.n	8006fb4 <__hi0bits+0x38>
 8006fa8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006fac:	f103 0301 	add.w	r3, r3, #1
 8006fb0:	bf08      	it	eq
 8006fb2:	2320      	moveq	r3, #32
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	4770      	bx	lr
 8006fb8:	2300      	movs	r3, #0
 8006fba:	e7e4      	b.n	8006f86 <__hi0bits+0xa>

08006fbc <__lo0bits>:
 8006fbc:	6803      	ldr	r3, [r0, #0]
 8006fbe:	f013 0207 	ands.w	r2, r3, #7
 8006fc2:	4601      	mov	r1, r0
 8006fc4:	d00b      	beq.n	8006fde <__lo0bits+0x22>
 8006fc6:	07da      	lsls	r2, r3, #31
 8006fc8:	d423      	bmi.n	8007012 <__lo0bits+0x56>
 8006fca:	0798      	lsls	r0, r3, #30
 8006fcc:	bf49      	itett	mi
 8006fce:	085b      	lsrmi	r3, r3, #1
 8006fd0:	089b      	lsrpl	r3, r3, #2
 8006fd2:	2001      	movmi	r0, #1
 8006fd4:	600b      	strmi	r3, [r1, #0]
 8006fd6:	bf5c      	itt	pl
 8006fd8:	600b      	strpl	r3, [r1, #0]
 8006fda:	2002      	movpl	r0, #2
 8006fdc:	4770      	bx	lr
 8006fde:	b298      	uxth	r0, r3
 8006fe0:	b9a8      	cbnz	r0, 800700e <__lo0bits+0x52>
 8006fe2:	0c1b      	lsrs	r3, r3, #16
 8006fe4:	2010      	movs	r0, #16
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	b90a      	cbnz	r2, 8006fee <__lo0bits+0x32>
 8006fea:	3008      	adds	r0, #8
 8006fec:	0a1b      	lsrs	r3, r3, #8
 8006fee:	071a      	lsls	r2, r3, #28
 8006ff0:	bf04      	itt	eq
 8006ff2:	091b      	lsreq	r3, r3, #4
 8006ff4:	3004      	addeq	r0, #4
 8006ff6:	079a      	lsls	r2, r3, #30
 8006ff8:	bf04      	itt	eq
 8006ffa:	089b      	lsreq	r3, r3, #2
 8006ffc:	3002      	addeq	r0, #2
 8006ffe:	07da      	lsls	r2, r3, #31
 8007000:	d403      	bmi.n	800700a <__lo0bits+0x4e>
 8007002:	085b      	lsrs	r3, r3, #1
 8007004:	f100 0001 	add.w	r0, r0, #1
 8007008:	d005      	beq.n	8007016 <__lo0bits+0x5a>
 800700a:	600b      	str	r3, [r1, #0]
 800700c:	4770      	bx	lr
 800700e:	4610      	mov	r0, r2
 8007010:	e7e9      	b.n	8006fe6 <__lo0bits+0x2a>
 8007012:	2000      	movs	r0, #0
 8007014:	4770      	bx	lr
 8007016:	2020      	movs	r0, #32
 8007018:	4770      	bx	lr
	...

0800701c <__i2b>:
 800701c:	b510      	push	{r4, lr}
 800701e:	460c      	mov	r4, r1
 8007020:	2101      	movs	r1, #1
 8007022:	f7ff feb9 	bl	8006d98 <_Balloc>
 8007026:	4602      	mov	r2, r0
 8007028:	b928      	cbnz	r0, 8007036 <__i2b+0x1a>
 800702a:	4b05      	ldr	r3, [pc, #20]	; (8007040 <__i2b+0x24>)
 800702c:	4805      	ldr	r0, [pc, #20]	; (8007044 <__i2b+0x28>)
 800702e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007032:	f001 fa1d 	bl	8008470 <__assert_func>
 8007036:	2301      	movs	r3, #1
 8007038:	6144      	str	r4, [r0, #20]
 800703a:	6103      	str	r3, [r0, #16]
 800703c:	bd10      	pop	{r4, pc}
 800703e:	bf00      	nop
 8007040:	08009900 	.word	0x08009900
 8007044:	0800998c 	.word	0x0800998c

08007048 <__multiply>:
 8007048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704c:	4691      	mov	r9, r2
 800704e:	690a      	ldr	r2, [r1, #16]
 8007050:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007054:	429a      	cmp	r2, r3
 8007056:	bfb8      	it	lt
 8007058:	460b      	movlt	r3, r1
 800705a:	460c      	mov	r4, r1
 800705c:	bfbc      	itt	lt
 800705e:	464c      	movlt	r4, r9
 8007060:	4699      	movlt	r9, r3
 8007062:	6927      	ldr	r7, [r4, #16]
 8007064:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007068:	68a3      	ldr	r3, [r4, #8]
 800706a:	6861      	ldr	r1, [r4, #4]
 800706c:	eb07 060a 	add.w	r6, r7, sl
 8007070:	42b3      	cmp	r3, r6
 8007072:	b085      	sub	sp, #20
 8007074:	bfb8      	it	lt
 8007076:	3101      	addlt	r1, #1
 8007078:	f7ff fe8e 	bl	8006d98 <_Balloc>
 800707c:	b930      	cbnz	r0, 800708c <__multiply+0x44>
 800707e:	4602      	mov	r2, r0
 8007080:	4b44      	ldr	r3, [pc, #272]	; (8007194 <__multiply+0x14c>)
 8007082:	4845      	ldr	r0, [pc, #276]	; (8007198 <__multiply+0x150>)
 8007084:	f240 115d 	movw	r1, #349	; 0x15d
 8007088:	f001 f9f2 	bl	8008470 <__assert_func>
 800708c:	f100 0514 	add.w	r5, r0, #20
 8007090:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007094:	462b      	mov	r3, r5
 8007096:	2200      	movs	r2, #0
 8007098:	4543      	cmp	r3, r8
 800709a:	d321      	bcc.n	80070e0 <__multiply+0x98>
 800709c:	f104 0314 	add.w	r3, r4, #20
 80070a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80070a4:	f109 0314 	add.w	r3, r9, #20
 80070a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80070ac:	9202      	str	r2, [sp, #8]
 80070ae:	1b3a      	subs	r2, r7, r4
 80070b0:	3a15      	subs	r2, #21
 80070b2:	f022 0203 	bic.w	r2, r2, #3
 80070b6:	3204      	adds	r2, #4
 80070b8:	f104 0115 	add.w	r1, r4, #21
 80070bc:	428f      	cmp	r7, r1
 80070be:	bf38      	it	cc
 80070c0:	2204      	movcc	r2, #4
 80070c2:	9201      	str	r2, [sp, #4]
 80070c4:	9a02      	ldr	r2, [sp, #8]
 80070c6:	9303      	str	r3, [sp, #12]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d80c      	bhi.n	80070e6 <__multiply+0x9e>
 80070cc:	2e00      	cmp	r6, #0
 80070ce:	dd03      	ble.n	80070d8 <__multiply+0x90>
 80070d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d05a      	beq.n	800718e <__multiply+0x146>
 80070d8:	6106      	str	r6, [r0, #16]
 80070da:	b005      	add	sp, #20
 80070dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e0:	f843 2b04 	str.w	r2, [r3], #4
 80070e4:	e7d8      	b.n	8007098 <__multiply+0x50>
 80070e6:	f8b3 a000 	ldrh.w	sl, [r3]
 80070ea:	f1ba 0f00 	cmp.w	sl, #0
 80070ee:	d024      	beq.n	800713a <__multiply+0xf2>
 80070f0:	f104 0e14 	add.w	lr, r4, #20
 80070f4:	46a9      	mov	r9, r5
 80070f6:	f04f 0c00 	mov.w	ip, #0
 80070fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80070fe:	f8d9 1000 	ldr.w	r1, [r9]
 8007102:	fa1f fb82 	uxth.w	fp, r2
 8007106:	b289      	uxth	r1, r1
 8007108:	fb0a 110b 	mla	r1, sl, fp, r1
 800710c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007110:	f8d9 2000 	ldr.w	r2, [r9]
 8007114:	4461      	add	r1, ip
 8007116:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800711a:	fb0a c20b 	mla	r2, sl, fp, ip
 800711e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007122:	b289      	uxth	r1, r1
 8007124:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007128:	4577      	cmp	r7, lr
 800712a:	f849 1b04 	str.w	r1, [r9], #4
 800712e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007132:	d8e2      	bhi.n	80070fa <__multiply+0xb2>
 8007134:	9a01      	ldr	r2, [sp, #4]
 8007136:	f845 c002 	str.w	ip, [r5, r2]
 800713a:	9a03      	ldr	r2, [sp, #12]
 800713c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007140:	3304      	adds	r3, #4
 8007142:	f1b9 0f00 	cmp.w	r9, #0
 8007146:	d020      	beq.n	800718a <__multiply+0x142>
 8007148:	6829      	ldr	r1, [r5, #0]
 800714a:	f104 0c14 	add.w	ip, r4, #20
 800714e:	46ae      	mov	lr, r5
 8007150:	f04f 0a00 	mov.w	sl, #0
 8007154:	f8bc b000 	ldrh.w	fp, [ip]
 8007158:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800715c:	fb09 220b 	mla	r2, r9, fp, r2
 8007160:	4492      	add	sl, r2
 8007162:	b289      	uxth	r1, r1
 8007164:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007168:	f84e 1b04 	str.w	r1, [lr], #4
 800716c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007170:	f8be 1000 	ldrh.w	r1, [lr]
 8007174:	0c12      	lsrs	r2, r2, #16
 8007176:	fb09 1102 	mla	r1, r9, r2, r1
 800717a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800717e:	4567      	cmp	r7, ip
 8007180:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007184:	d8e6      	bhi.n	8007154 <__multiply+0x10c>
 8007186:	9a01      	ldr	r2, [sp, #4]
 8007188:	50a9      	str	r1, [r5, r2]
 800718a:	3504      	adds	r5, #4
 800718c:	e79a      	b.n	80070c4 <__multiply+0x7c>
 800718e:	3e01      	subs	r6, #1
 8007190:	e79c      	b.n	80070cc <__multiply+0x84>
 8007192:	bf00      	nop
 8007194:	08009900 	.word	0x08009900
 8007198:	0800998c 	.word	0x0800998c

0800719c <__pow5mult>:
 800719c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071a0:	4615      	mov	r5, r2
 80071a2:	f012 0203 	ands.w	r2, r2, #3
 80071a6:	4606      	mov	r6, r0
 80071a8:	460f      	mov	r7, r1
 80071aa:	d007      	beq.n	80071bc <__pow5mult+0x20>
 80071ac:	4c25      	ldr	r4, [pc, #148]	; (8007244 <__pow5mult+0xa8>)
 80071ae:	3a01      	subs	r2, #1
 80071b0:	2300      	movs	r3, #0
 80071b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071b6:	f7ff fe51 	bl	8006e5c <__multadd>
 80071ba:	4607      	mov	r7, r0
 80071bc:	10ad      	asrs	r5, r5, #2
 80071be:	d03d      	beq.n	800723c <__pow5mult+0xa0>
 80071c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80071c2:	b97c      	cbnz	r4, 80071e4 <__pow5mult+0x48>
 80071c4:	2010      	movs	r0, #16
 80071c6:	f7ff fdbf 	bl	8006d48 <malloc>
 80071ca:	4602      	mov	r2, r0
 80071cc:	6270      	str	r0, [r6, #36]	; 0x24
 80071ce:	b928      	cbnz	r0, 80071dc <__pow5mult+0x40>
 80071d0:	4b1d      	ldr	r3, [pc, #116]	; (8007248 <__pow5mult+0xac>)
 80071d2:	481e      	ldr	r0, [pc, #120]	; (800724c <__pow5mult+0xb0>)
 80071d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80071d8:	f001 f94a 	bl	8008470 <__assert_func>
 80071dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071e0:	6004      	str	r4, [r0, #0]
 80071e2:	60c4      	str	r4, [r0, #12]
 80071e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80071e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071ec:	b94c      	cbnz	r4, 8007202 <__pow5mult+0x66>
 80071ee:	f240 2171 	movw	r1, #625	; 0x271
 80071f2:	4630      	mov	r0, r6
 80071f4:	f7ff ff12 	bl	800701c <__i2b>
 80071f8:	2300      	movs	r3, #0
 80071fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80071fe:	4604      	mov	r4, r0
 8007200:	6003      	str	r3, [r0, #0]
 8007202:	f04f 0900 	mov.w	r9, #0
 8007206:	07eb      	lsls	r3, r5, #31
 8007208:	d50a      	bpl.n	8007220 <__pow5mult+0x84>
 800720a:	4639      	mov	r1, r7
 800720c:	4622      	mov	r2, r4
 800720e:	4630      	mov	r0, r6
 8007210:	f7ff ff1a 	bl	8007048 <__multiply>
 8007214:	4639      	mov	r1, r7
 8007216:	4680      	mov	r8, r0
 8007218:	4630      	mov	r0, r6
 800721a:	f7ff fdfd 	bl	8006e18 <_Bfree>
 800721e:	4647      	mov	r7, r8
 8007220:	106d      	asrs	r5, r5, #1
 8007222:	d00b      	beq.n	800723c <__pow5mult+0xa0>
 8007224:	6820      	ldr	r0, [r4, #0]
 8007226:	b938      	cbnz	r0, 8007238 <__pow5mult+0x9c>
 8007228:	4622      	mov	r2, r4
 800722a:	4621      	mov	r1, r4
 800722c:	4630      	mov	r0, r6
 800722e:	f7ff ff0b 	bl	8007048 <__multiply>
 8007232:	6020      	str	r0, [r4, #0]
 8007234:	f8c0 9000 	str.w	r9, [r0]
 8007238:	4604      	mov	r4, r0
 800723a:	e7e4      	b.n	8007206 <__pow5mult+0x6a>
 800723c:	4638      	mov	r0, r7
 800723e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007242:	bf00      	nop
 8007244:	08009ad8 	.word	0x08009ad8
 8007248:	0800988e 	.word	0x0800988e
 800724c:	0800998c 	.word	0x0800998c

08007250 <__lshift>:
 8007250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007254:	460c      	mov	r4, r1
 8007256:	6849      	ldr	r1, [r1, #4]
 8007258:	6923      	ldr	r3, [r4, #16]
 800725a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800725e:	68a3      	ldr	r3, [r4, #8]
 8007260:	4607      	mov	r7, r0
 8007262:	4691      	mov	r9, r2
 8007264:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007268:	f108 0601 	add.w	r6, r8, #1
 800726c:	42b3      	cmp	r3, r6
 800726e:	db0b      	blt.n	8007288 <__lshift+0x38>
 8007270:	4638      	mov	r0, r7
 8007272:	f7ff fd91 	bl	8006d98 <_Balloc>
 8007276:	4605      	mov	r5, r0
 8007278:	b948      	cbnz	r0, 800728e <__lshift+0x3e>
 800727a:	4602      	mov	r2, r0
 800727c:	4b2a      	ldr	r3, [pc, #168]	; (8007328 <__lshift+0xd8>)
 800727e:	482b      	ldr	r0, [pc, #172]	; (800732c <__lshift+0xdc>)
 8007280:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007284:	f001 f8f4 	bl	8008470 <__assert_func>
 8007288:	3101      	adds	r1, #1
 800728a:	005b      	lsls	r3, r3, #1
 800728c:	e7ee      	b.n	800726c <__lshift+0x1c>
 800728e:	2300      	movs	r3, #0
 8007290:	f100 0114 	add.w	r1, r0, #20
 8007294:	f100 0210 	add.w	r2, r0, #16
 8007298:	4618      	mov	r0, r3
 800729a:	4553      	cmp	r3, sl
 800729c:	db37      	blt.n	800730e <__lshift+0xbe>
 800729e:	6920      	ldr	r0, [r4, #16]
 80072a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072a4:	f104 0314 	add.w	r3, r4, #20
 80072a8:	f019 091f 	ands.w	r9, r9, #31
 80072ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80072b4:	d02f      	beq.n	8007316 <__lshift+0xc6>
 80072b6:	f1c9 0e20 	rsb	lr, r9, #32
 80072ba:	468a      	mov	sl, r1
 80072bc:	f04f 0c00 	mov.w	ip, #0
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	fa02 f209 	lsl.w	r2, r2, r9
 80072c6:	ea42 020c 	orr.w	r2, r2, ip
 80072ca:	f84a 2b04 	str.w	r2, [sl], #4
 80072ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80072d2:	4298      	cmp	r0, r3
 80072d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80072d8:	d8f2      	bhi.n	80072c0 <__lshift+0x70>
 80072da:	1b03      	subs	r3, r0, r4
 80072dc:	3b15      	subs	r3, #21
 80072de:	f023 0303 	bic.w	r3, r3, #3
 80072e2:	3304      	adds	r3, #4
 80072e4:	f104 0215 	add.w	r2, r4, #21
 80072e8:	4290      	cmp	r0, r2
 80072ea:	bf38      	it	cc
 80072ec:	2304      	movcc	r3, #4
 80072ee:	f841 c003 	str.w	ip, [r1, r3]
 80072f2:	f1bc 0f00 	cmp.w	ip, #0
 80072f6:	d001      	beq.n	80072fc <__lshift+0xac>
 80072f8:	f108 0602 	add.w	r6, r8, #2
 80072fc:	3e01      	subs	r6, #1
 80072fe:	4638      	mov	r0, r7
 8007300:	612e      	str	r6, [r5, #16]
 8007302:	4621      	mov	r1, r4
 8007304:	f7ff fd88 	bl	8006e18 <_Bfree>
 8007308:	4628      	mov	r0, r5
 800730a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800730e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007312:	3301      	adds	r3, #1
 8007314:	e7c1      	b.n	800729a <__lshift+0x4a>
 8007316:	3904      	subs	r1, #4
 8007318:	f853 2b04 	ldr.w	r2, [r3], #4
 800731c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007320:	4298      	cmp	r0, r3
 8007322:	d8f9      	bhi.n	8007318 <__lshift+0xc8>
 8007324:	e7ea      	b.n	80072fc <__lshift+0xac>
 8007326:	bf00      	nop
 8007328:	08009900 	.word	0x08009900
 800732c:	0800998c 	.word	0x0800998c

08007330 <__mcmp>:
 8007330:	b530      	push	{r4, r5, lr}
 8007332:	6902      	ldr	r2, [r0, #16]
 8007334:	690c      	ldr	r4, [r1, #16]
 8007336:	1b12      	subs	r2, r2, r4
 8007338:	d10e      	bne.n	8007358 <__mcmp+0x28>
 800733a:	f100 0314 	add.w	r3, r0, #20
 800733e:	3114      	adds	r1, #20
 8007340:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007344:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007348:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800734c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007350:	42a5      	cmp	r5, r4
 8007352:	d003      	beq.n	800735c <__mcmp+0x2c>
 8007354:	d305      	bcc.n	8007362 <__mcmp+0x32>
 8007356:	2201      	movs	r2, #1
 8007358:	4610      	mov	r0, r2
 800735a:	bd30      	pop	{r4, r5, pc}
 800735c:	4283      	cmp	r3, r0
 800735e:	d3f3      	bcc.n	8007348 <__mcmp+0x18>
 8007360:	e7fa      	b.n	8007358 <__mcmp+0x28>
 8007362:	f04f 32ff 	mov.w	r2, #4294967295
 8007366:	e7f7      	b.n	8007358 <__mcmp+0x28>

08007368 <__mdiff>:
 8007368:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736c:	460c      	mov	r4, r1
 800736e:	4606      	mov	r6, r0
 8007370:	4611      	mov	r1, r2
 8007372:	4620      	mov	r0, r4
 8007374:	4690      	mov	r8, r2
 8007376:	f7ff ffdb 	bl	8007330 <__mcmp>
 800737a:	1e05      	subs	r5, r0, #0
 800737c:	d110      	bne.n	80073a0 <__mdiff+0x38>
 800737e:	4629      	mov	r1, r5
 8007380:	4630      	mov	r0, r6
 8007382:	f7ff fd09 	bl	8006d98 <_Balloc>
 8007386:	b930      	cbnz	r0, 8007396 <__mdiff+0x2e>
 8007388:	4b3a      	ldr	r3, [pc, #232]	; (8007474 <__mdiff+0x10c>)
 800738a:	4602      	mov	r2, r0
 800738c:	f240 2132 	movw	r1, #562	; 0x232
 8007390:	4839      	ldr	r0, [pc, #228]	; (8007478 <__mdiff+0x110>)
 8007392:	f001 f86d 	bl	8008470 <__assert_func>
 8007396:	2301      	movs	r3, #1
 8007398:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800739c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a0:	bfa4      	itt	ge
 80073a2:	4643      	movge	r3, r8
 80073a4:	46a0      	movge	r8, r4
 80073a6:	4630      	mov	r0, r6
 80073a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80073ac:	bfa6      	itte	ge
 80073ae:	461c      	movge	r4, r3
 80073b0:	2500      	movge	r5, #0
 80073b2:	2501      	movlt	r5, #1
 80073b4:	f7ff fcf0 	bl	8006d98 <_Balloc>
 80073b8:	b920      	cbnz	r0, 80073c4 <__mdiff+0x5c>
 80073ba:	4b2e      	ldr	r3, [pc, #184]	; (8007474 <__mdiff+0x10c>)
 80073bc:	4602      	mov	r2, r0
 80073be:	f44f 7110 	mov.w	r1, #576	; 0x240
 80073c2:	e7e5      	b.n	8007390 <__mdiff+0x28>
 80073c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80073c8:	6926      	ldr	r6, [r4, #16]
 80073ca:	60c5      	str	r5, [r0, #12]
 80073cc:	f104 0914 	add.w	r9, r4, #20
 80073d0:	f108 0514 	add.w	r5, r8, #20
 80073d4:	f100 0e14 	add.w	lr, r0, #20
 80073d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80073dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80073e0:	f108 0210 	add.w	r2, r8, #16
 80073e4:	46f2      	mov	sl, lr
 80073e6:	2100      	movs	r1, #0
 80073e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80073ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80073f0:	fa1f f883 	uxth.w	r8, r3
 80073f4:	fa11 f18b 	uxtah	r1, r1, fp
 80073f8:	0c1b      	lsrs	r3, r3, #16
 80073fa:	eba1 0808 	sub.w	r8, r1, r8
 80073fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007402:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007406:	fa1f f888 	uxth.w	r8, r8
 800740a:	1419      	asrs	r1, r3, #16
 800740c:	454e      	cmp	r6, r9
 800740e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007412:	f84a 3b04 	str.w	r3, [sl], #4
 8007416:	d8e7      	bhi.n	80073e8 <__mdiff+0x80>
 8007418:	1b33      	subs	r3, r6, r4
 800741a:	3b15      	subs	r3, #21
 800741c:	f023 0303 	bic.w	r3, r3, #3
 8007420:	3304      	adds	r3, #4
 8007422:	3415      	adds	r4, #21
 8007424:	42a6      	cmp	r6, r4
 8007426:	bf38      	it	cc
 8007428:	2304      	movcc	r3, #4
 800742a:	441d      	add	r5, r3
 800742c:	4473      	add	r3, lr
 800742e:	469e      	mov	lr, r3
 8007430:	462e      	mov	r6, r5
 8007432:	4566      	cmp	r6, ip
 8007434:	d30e      	bcc.n	8007454 <__mdiff+0xec>
 8007436:	f10c 0203 	add.w	r2, ip, #3
 800743a:	1b52      	subs	r2, r2, r5
 800743c:	f022 0203 	bic.w	r2, r2, #3
 8007440:	3d03      	subs	r5, #3
 8007442:	45ac      	cmp	ip, r5
 8007444:	bf38      	it	cc
 8007446:	2200      	movcc	r2, #0
 8007448:	441a      	add	r2, r3
 800744a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800744e:	b17b      	cbz	r3, 8007470 <__mdiff+0x108>
 8007450:	6107      	str	r7, [r0, #16]
 8007452:	e7a3      	b.n	800739c <__mdiff+0x34>
 8007454:	f856 8b04 	ldr.w	r8, [r6], #4
 8007458:	fa11 f288 	uxtah	r2, r1, r8
 800745c:	1414      	asrs	r4, r2, #16
 800745e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007462:	b292      	uxth	r2, r2
 8007464:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007468:	f84e 2b04 	str.w	r2, [lr], #4
 800746c:	1421      	asrs	r1, r4, #16
 800746e:	e7e0      	b.n	8007432 <__mdiff+0xca>
 8007470:	3f01      	subs	r7, #1
 8007472:	e7ea      	b.n	800744a <__mdiff+0xe2>
 8007474:	08009900 	.word	0x08009900
 8007478:	0800998c 	.word	0x0800998c

0800747c <__ulp>:
 800747c:	b082      	sub	sp, #8
 800747e:	ed8d 0b00 	vstr	d0, [sp]
 8007482:	9b01      	ldr	r3, [sp, #4]
 8007484:	4912      	ldr	r1, [pc, #72]	; (80074d0 <__ulp+0x54>)
 8007486:	4019      	ands	r1, r3
 8007488:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800748c:	2900      	cmp	r1, #0
 800748e:	dd05      	ble.n	800749c <__ulp+0x20>
 8007490:	2200      	movs	r2, #0
 8007492:	460b      	mov	r3, r1
 8007494:	ec43 2b10 	vmov	d0, r2, r3
 8007498:	b002      	add	sp, #8
 800749a:	4770      	bx	lr
 800749c:	4249      	negs	r1, r1
 800749e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80074a2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80074a6:	f04f 0200 	mov.w	r2, #0
 80074aa:	f04f 0300 	mov.w	r3, #0
 80074ae:	da04      	bge.n	80074ba <__ulp+0x3e>
 80074b0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80074b4:	fa41 f300 	asr.w	r3, r1, r0
 80074b8:	e7ec      	b.n	8007494 <__ulp+0x18>
 80074ba:	f1a0 0114 	sub.w	r1, r0, #20
 80074be:	291e      	cmp	r1, #30
 80074c0:	bfda      	itte	le
 80074c2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80074c6:	fa20 f101 	lsrle.w	r1, r0, r1
 80074ca:	2101      	movgt	r1, #1
 80074cc:	460a      	mov	r2, r1
 80074ce:	e7e1      	b.n	8007494 <__ulp+0x18>
 80074d0:	7ff00000 	.word	0x7ff00000

080074d4 <__b2d>:
 80074d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d6:	6905      	ldr	r5, [r0, #16]
 80074d8:	f100 0714 	add.w	r7, r0, #20
 80074dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80074e0:	1f2e      	subs	r6, r5, #4
 80074e2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80074e6:	4620      	mov	r0, r4
 80074e8:	f7ff fd48 	bl	8006f7c <__hi0bits>
 80074ec:	f1c0 0320 	rsb	r3, r0, #32
 80074f0:	280a      	cmp	r0, #10
 80074f2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007570 <__b2d+0x9c>
 80074f6:	600b      	str	r3, [r1, #0]
 80074f8:	dc14      	bgt.n	8007524 <__b2d+0x50>
 80074fa:	f1c0 0e0b 	rsb	lr, r0, #11
 80074fe:	fa24 f10e 	lsr.w	r1, r4, lr
 8007502:	42b7      	cmp	r7, r6
 8007504:	ea41 030c 	orr.w	r3, r1, ip
 8007508:	bf34      	ite	cc
 800750a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800750e:	2100      	movcs	r1, #0
 8007510:	3015      	adds	r0, #21
 8007512:	fa04 f000 	lsl.w	r0, r4, r0
 8007516:	fa21 f10e 	lsr.w	r1, r1, lr
 800751a:	ea40 0201 	orr.w	r2, r0, r1
 800751e:	ec43 2b10 	vmov	d0, r2, r3
 8007522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007524:	42b7      	cmp	r7, r6
 8007526:	bf3a      	itte	cc
 8007528:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800752c:	f1a5 0608 	subcc.w	r6, r5, #8
 8007530:	2100      	movcs	r1, #0
 8007532:	380b      	subs	r0, #11
 8007534:	d017      	beq.n	8007566 <__b2d+0x92>
 8007536:	f1c0 0c20 	rsb	ip, r0, #32
 800753a:	fa04 f500 	lsl.w	r5, r4, r0
 800753e:	42be      	cmp	r6, r7
 8007540:	fa21 f40c 	lsr.w	r4, r1, ip
 8007544:	ea45 0504 	orr.w	r5, r5, r4
 8007548:	bf8c      	ite	hi
 800754a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800754e:	2400      	movls	r4, #0
 8007550:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007554:	fa01 f000 	lsl.w	r0, r1, r0
 8007558:	fa24 f40c 	lsr.w	r4, r4, ip
 800755c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007560:	ea40 0204 	orr.w	r2, r0, r4
 8007564:	e7db      	b.n	800751e <__b2d+0x4a>
 8007566:	ea44 030c 	orr.w	r3, r4, ip
 800756a:	460a      	mov	r2, r1
 800756c:	e7d7      	b.n	800751e <__b2d+0x4a>
 800756e:	bf00      	nop
 8007570:	3ff00000 	.word	0x3ff00000

08007574 <__d2b>:
 8007574:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007578:	4689      	mov	r9, r1
 800757a:	2101      	movs	r1, #1
 800757c:	ec57 6b10 	vmov	r6, r7, d0
 8007580:	4690      	mov	r8, r2
 8007582:	f7ff fc09 	bl	8006d98 <_Balloc>
 8007586:	4604      	mov	r4, r0
 8007588:	b930      	cbnz	r0, 8007598 <__d2b+0x24>
 800758a:	4602      	mov	r2, r0
 800758c:	4b25      	ldr	r3, [pc, #148]	; (8007624 <__d2b+0xb0>)
 800758e:	4826      	ldr	r0, [pc, #152]	; (8007628 <__d2b+0xb4>)
 8007590:	f240 310a 	movw	r1, #778	; 0x30a
 8007594:	f000 ff6c 	bl	8008470 <__assert_func>
 8007598:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800759c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075a0:	bb35      	cbnz	r5, 80075f0 <__d2b+0x7c>
 80075a2:	2e00      	cmp	r6, #0
 80075a4:	9301      	str	r3, [sp, #4]
 80075a6:	d028      	beq.n	80075fa <__d2b+0x86>
 80075a8:	4668      	mov	r0, sp
 80075aa:	9600      	str	r6, [sp, #0]
 80075ac:	f7ff fd06 	bl	8006fbc <__lo0bits>
 80075b0:	9900      	ldr	r1, [sp, #0]
 80075b2:	b300      	cbz	r0, 80075f6 <__d2b+0x82>
 80075b4:	9a01      	ldr	r2, [sp, #4]
 80075b6:	f1c0 0320 	rsb	r3, r0, #32
 80075ba:	fa02 f303 	lsl.w	r3, r2, r3
 80075be:	430b      	orrs	r3, r1
 80075c0:	40c2      	lsrs	r2, r0
 80075c2:	6163      	str	r3, [r4, #20]
 80075c4:	9201      	str	r2, [sp, #4]
 80075c6:	9b01      	ldr	r3, [sp, #4]
 80075c8:	61a3      	str	r3, [r4, #24]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	bf14      	ite	ne
 80075ce:	2202      	movne	r2, #2
 80075d0:	2201      	moveq	r2, #1
 80075d2:	6122      	str	r2, [r4, #16]
 80075d4:	b1d5      	cbz	r5, 800760c <__d2b+0x98>
 80075d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80075da:	4405      	add	r5, r0
 80075dc:	f8c9 5000 	str.w	r5, [r9]
 80075e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075e4:	f8c8 0000 	str.w	r0, [r8]
 80075e8:	4620      	mov	r0, r4
 80075ea:	b003      	add	sp, #12
 80075ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075f4:	e7d5      	b.n	80075a2 <__d2b+0x2e>
 80075f6:	6161      	str	r1, [r4, #20]
 80075f8:	e7e5      	b.n	80075c6 <__d2b+0x52>
 80075fa:	a801      	add	r0, sp, #4
 80075fc:	f7ff fcde 	bl	8006fbc <__lo0bits>
 8007600:	9b01      	ldr	r3, [sp, #4]
 8007602:	6163      	str	r3, [r4, #20]
 8007604:	2201      	movs	r2, #1
 8007606:	6122      	str	r2, [r4, #16]
 8007608:	3020      	adds	r0, #32
 800760a:	e7e3      	b.n	80075d4 <__d2b+0x60>
 800760c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007610:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007614:	f8c9 0000 	str.w	r0, [r9]
 8007618:	6918      	ldr	r0, [r3, #16]
 800761a:	f7ff fcaf 	bl	8006f7c <__hi0bits>
 800761e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007622:	e7df      	b.n	80075e4 <__d2b+0x70>
 8007624:	08009900 	.word	0x08009900
 8007628:	0800998c 	.word	0x0800998c

0800762c <__ratio>:
 800762c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007630:	4688      	mov	r8, r1
 8007632:	4669      	mov	r1, sp
 8007634:	4681      	mov	r9, r0
 8007636:	f7ff ff4d 	bl	80074d4 <__b2d>
 800763a:	a901      	add	r1, sp, #4
 800763c:	4640      	mov	r0, r8
 800763e:	ec55 4b10 	vmov	r4, r5, d0
 8007642:	f7ff ff47 	bl	80074d4 <__b2d>
 8007646:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800764a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800764e:	eba3 0c02 	sub.w	ip, r3, r2
 8007652:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007656:	1a9b      	subs	r3, r3, r2
 8007658:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800765c:	ec51 0b10 	vmov	r0, r1, d0
 8007660:	2b00      	cmp	r3, #0
 8007662:	bfd6      	itet	le
 8007664:	460a      	movle	r2, r1
 8007666:	462a      	movgt	r2, r5
 8007668:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800766c:	468b      	mov	fp, r1
 800766e:	462f      	mov	r7, r5
 8007670:	bfd4      	ite	le
 8007672:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007676:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800767a:	4620      	mov	r0, r4
 800767c:	ee10 2a10 	vmov	r2, s0
 8007680:	465b      	mov	r3, fp
 8007682:	4639      	mov	r1, r7
 8007684:	f7f9 f8fa 	bl	800087c <__aeabi_ddiv>
 8007688:	ec41 0b10 	vmov	d0, r0, r1
 800768c:	b003      	add	sp, #12
 800768e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007692 <__copybits>:
 8007692:	3901      	subs	r1, #1
 8007694:	b570      	push	{r4, r5, r6, lr}
 8007696:	1149      	asrs	r1, r1, #5
 8007698:	6914      	ldr	r4, [r2, #16]
 800769a:	3101      	adds	r1, #1
 800769c:	f102 0314 	add.w	r3, r2, #20
 80076a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80076a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80076a8:	1f05      	subs	r5, r0, #4
 80076aa:	42a3      	cmp	r3, r4
 80076ac:	d30c      	bcc.n	80076c8 <__copybits+0x36>
 80076ae:	1aa3      	subs	r3, r4, r2
 80076b0:	3b11      	subs	r3, #17
 80076b2:	f023 0303 	bic.w	r3, r3, #3
 80076b6:	3211      	adds	r2, #17
 80076b8:	42a2      	cmp	r2, r4
 80076ba:	bf88      	it	hi
 80076bc:	2300      	movhi	r3, #0
 80076be:	4418      	add	r0, r3
 80076c0:	2300      	movs	r3, #0
 80076c2:	4288      	cmp	r0, r1
 80076c4:	d305      	bcc.n	80076d2 <__copybits+0x40>
 80076c6:	bd70      	pop	{r4, r5, r6, pc}
 80076c8:	f853 6b04 	ldr.w	r6, [r3], #4
 80076cc:	f845 6f04 	str.w	r6, [r5, #4]!
 80076d0:	e7eb      	b.n	80076aa <__copybits+0x18>
 80076d2:	f840 3b04 	str.w	r3, [r0], #4
 80076d6:	e7f4      	b.n	80076c2 <__copybits+0x30>

080076d8 <__any_on>:
 80076d8:	f100 0214 	add.w	r2, r0, #20
 80076dc:	6900      	ldr	r0, [r0, #16]
 80076de:	114b      	asrs	r3, r1, #5
 80076e0:	4298      	cmp	r0, r3
 80076e2:	b510      	push	{r4, lr}
 80076e4:	db11      	blt.n	800770a <__any_on+0x32>
 80076e6:	dd0a      	ble.n	80076fe <__any_on+0x26>
 80076e8:	f011 011f 	ands.w	r1, r1, #31
 80076ec:	d007      	beq.n	80076fe <__any_on+0x26>
 80076ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80076f2:	fa24 f001 	lsr.w	r0, r4, r1
 80076f6:	fa00 f101 	lsl.w	r1, r0, r1
 80076fa:	428c      	cmp	r4, r1
 80076fc:	d10b      	bne.n	8007716 <__any_on+0x3e>
 80076fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007702:	4293      	cmp	r3, r2
 8007704:	d803      	bhi.n	800770e <__any_on+0x36>
 8007706:	2000      	movs	r0, #0
 8007708:	bd10      	pop	{r4, pc}
 800770a:	4603      	mov	r3, r0
 800770c:	e7f7      	b.n	80076fe <__any_on+0x26>
 800770e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007712:	2900      	cmp	r1, #0
 8007714:	d0f5      	beq.n	8007702 <__any_on+0x2a>
 8007716:	2001      	movs	r0, #1
 8007718:	e7f6      	b.n	8007708 <__any_on+0x30>

0800771a <_calloc_r>:
 800771a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800771c:	fba1 2402 	umull	r2, r4, r1, r2
 8007720:	b94c      	cbnz	r4, 8007736 <_calloc_r+0x1c>
 8007722:	4611      	mov	r1, r2
 8007724:	9201      	str	r2, [sp, #4]
 8007726:	f000 f87b 	bl	8007820 <_malloc_r>
 800772a:	9a01      	ldr	r2, [sp, #4]
 800772c:	4605      	mov	r5, r0
 800772e:	b930      	cbnz	r0, 800773e <_calloc_r+0x24>
 8007730:	4628      	mov	r0, r5
 8007732:	b003      	add	sp, #12
 8007734:	bd30      	pop	{r4, r5, pc}
 8007736:	220c      	movs	r2, #12
 8007738:	6002      	str	r2, [r0, #0]
 800773a:	2500      	movs	r5, #0
 800773c:	e7f8      	b.n	8007730 <_calloc_r+0x16>
 800773e:	4621      	mov	r1, r4
 8007740:	f7fc fb02 	bl	8003d48 <memset>
 8007744:	e7f4      	b.n	8007730 <_calloc_r+0x16>
	...

08007748 <_free_r>:
 8007748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800774a:	2900      	cmp	r1, #0
 800774c:	d044      	beq.n	80077d8 <_free_r+0x90>
 800774e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007752:	9001      	str	r0, [sp, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	f1a1 0404 	sub.w	r4, r1, #4
 800775a:	bfb8      	it	lt
 800775c:	18e4      	addlt	r4, r4, r3
 800775e:	f001 f88b 	bl	8008878 <__malloc_lock>
 8007762:	4a1e      	ldr	r2, [pc, #120]	; (80077dc <_free_r+0x94>)
 8007764:	9801      	ldr	r0, [sp, #4]
 8007766:	6813      	ldr	r3, [r2, #0]
 8007768:	b933      	cbnz	r3, 8007778 <_free_r+0x30>
 800776a:	6063      	str	r3, [r4, #4]
 800776c:	6014      	str	r4, [r2, #0]
 800776e:	b003      	add	sp, #12
 8007770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007774:	f001 b886 	b.w	8008884 <__malloc_unlock>
 8007778:	42a3      	cmp	r3, r4
 800777a:	d908      	bls.n	800778e <_free_r+0x46>
 800777c:	6825      	ldr	r5, [r4, #0]
 800777e:	1961      	adds	r1, r4, r5
 8007780:	428b      	cmp	r3, r1
 8007782:	bf01      	itttt	eq
 8007784:	6819      	ldreq	r1, [r3, #0]
 8007786:	685b      	ldreq	r3, [r3, #4]
 8007788:	1949      	addeq	r1, r1, r5
 800778a:	6021      	streq	r1, [r4, #0]
 800778c:	e7ed      	b.n	800776a <_free_r+0x22>
 800778e:	461a      	mov	r2, r3
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	b10b      	cbz	r3, 8007798 <_free_r+0x50>
 8007794:	42a3      	cmp	r3, r4
 8007796:	d9fa      	bls.n	800778e <_free_r+0x46>
 8007798:	6811      	ldr	r1, [r2, #0]
 800779a:	1855      	adds	r5, r2, r1
 800779c:	42a5      	cmp	r5, r4
 800779e:	d10b      	bne.n	80077b8 <_free_r+0x70>
 80077a0:	6824      	ldr	r4, [r4, #0]
 80077a2:	4421      	add	r1, r4
 80077a4:	1854      	adds	r4, r2, r1
 80077a6:	42a3      	cmp	r3, r4
 80077a8:	6011      	str	r1, [r2, #0]
 80077aa:	d1e0      	bne.n	800776e <_free_r+0x26>
 80077ac:	681c      	ldr	r4, [r3, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	6053      	str	r3, [r2, #4]
 80077b2:	4421      	add	r1, r4
 80077b4:	6011      	str	r1, [r2, #0]
 80077b6:	e7da      	b.n	800776e <_free_r+0x26>
 80077b8:	d902      	bls.n	80077c0 <_free_r+0x78>
 80077ba:	230c      	movs	r3, #12
 80077bc:	6003      	str	r3, [r0, #0]
 80077be:	e7d6      	b.n	800776e <_free_r+0x26>
 80077c0:	6825      	ldr	r5, [r4, #0]
 80077c2:	1961      	adds	r1, r4, r5
 80077c4:	428b      	cmp	r3, r1
 80077c6:	bf04      	itt	eq
 80077c8:	6819      	ldreq	r1, [r3, #0]
 80077ca:	685b      	ldreq	r3, [r3, #4]
 80077cc:	6063      	str	r3, [r4, #4]
 80077ce:	bf04      	itt	eq
 80077d0:	1949      	addeq	r1, r1, r5
 80077d2:	6021      	streq	r1, [r4, #0]
 80077d4:	6054      	str	r4, [r2, #4]
 80077d6:	e7ca      	b.n	800776e <_free_r+0x26>
 80077d8:	b003      	add	sp, #12
 80077da:	bd30      	pop	{r4, r5, pc}
 80077dc:	20009684 	.word	0x20009684

080077e0 <sbrk_aligned>:
 80077e0:	b570      	push	{r4, r5, r6, lr}
 80077e2:	4e0e      	ldr	r6, [pc, #56]	; (800781c <sbrk_aligned+0x3c>)
 80077e4:	460c      	mov	r4, r1
 80077e6:	6831      	ldr	r1, [r6, #0]
 80077e8:	4605      	mov	r5, r0
 80077ea:	b911      	cbnz	r1, 80077f2 <sbrk_aligned+0x12>
 80077ec:	f000 fd28 	bl	8008240 <_sbrk_r>
 80077f0:	6030      	str	r0, [r6, #0]
 80077f2:	4621      	mov	r1, r4
 80077f4:	4628      	mov	r0, r5
 80077f6:	f000 fd23 	bl	8008240 <_sbrk_r>
 80077fa:	1c43      	adds	r3, r0, #1
 80077fc:	d00a      	beq.n	8007814 <sbrk_aligned+0x34>
 80077fe:	1cc4      	adds	r4, r0, #3
 8007800:	f024 0403 	bic.w	r4, r4, #3
 8007804:	42a0      	cmp	r0, r4
 8007806:	d007      	beq.n	8007818 <sbrk_aligned+0x38>
 8007808:	1a21      	subs	r1, r4, r0
 800780a:	4628      	mov	r0, r5
 800780c:	f000 fd18 	bl	8008240 <_sbrk_r>
 8007810:	3001      	adds	r0, #1
 8007812:	d101      	bne.n	8007818 <sbrk_aligned+0x38>
 8007814:	f04f 34ff 	mov.w	r4, #4294967295
 8007818:	4620      	mov	r0, r4
 800781a:	bd70      	pop	{r4, r5, r6, pc}
 800781c:	20009688 	.word	0x20009688

08007820 <_malloc_r>:
 8007820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007824:	1ccd      	adds	r5, r1, #3
 8007826:	f025 0503 	bic.w	r5, r5, #3
 800782a:	3508      	adds	r5, #8
 800782c:	2d0c      	cmp	r5, #12
 800782e:	bf38      	it	cc
 8007830:	250c      	movcc	r5, #12
 8007832:	2d00      	cmp	r5, #0
 8007834:	4607      	mov	r7, r0
 8007836:	db01      	blt.n	800783c <_malloc_r+0x1c>
 8007838:	42a9      	cmp	r1, r5
 800783a:	d905      	bls.n	8007848 <_malloc_r+0x28>
 800783c:	230c      	movs	r3, #12
 800783e:	603b      	str	r3, [r7, #0]
 8007840:	2600      	movs	r6, #0
 8007842:	4630      	mov	r0, r6
 8007844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007848:	4e2e      	ldr	r6, [pc, #184]	; (8007904 <_malloc_r+0xe4>)
 800784a:	f001 f815 	bl	8008878 <__malloc_lock>
 800784e:	6833      	ldr	r3, [r6, #0]
 8007850:	461c      	mov	r4, r3
 8007852:	bb34      	cbnz	r4, 80078a2 <_malloc_r+0x82>
 8007854:	4629      	mov	r1, r5
 8007856:	4638      	mov	r0, r7
 8007858:	f7ff ffc2 	bl	80077e0 <sbrk_aligned>
 800785c:	1c43      	adds	r3, r0, #1
 800785e:	4604      	mov	r4, r0
 8007860:	d14d      	bne.n	80078fe <_malloc_r+0xde>
 8007862:	6834      	ldr	r4, [r6, #0]
 8007864:	4626      	mov	r6, r4
 8007866:	2e00      	cmp	r6, #0
 8007868:	d140      	bne.n	80078ec <_malloc_r+0xcc>
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	4631      	mov	r1, r6
 800786e:	4638      	mov	r0, r7
 8007870:	eb04 0803 	add.w	r8, r4, r3
 8007874:	f000 fce4 	bl	8008240 <_sbrk_r>
 8007878:	4580      	cmp	r8, r0
 800787a:	d13a      	bne.n	80078f2 <_malloc_r+0xd2>
 800787c:	6821      	ldr	r1, [r4, #0]
 800787e:	3503      	adds	r5, #3
 8007880:	1a6d      	subs	r5, r5, r1
 8007882:	f025 0503 	bic.w	r5, r5, #3
 8007886:	3508      	adds	r5, #8
 8007888:	2d0c      	cmp	r5, #12
 800788a:	bf38      	it	cc
 800788c:	250c      	movcc	r5, #12
 800788e:	4629      	mov	r1, r5
 8007890:	4638      	mov	r0, r7
 8007892:	f7ff ffa5 	bl	80077e0 <sbrk_aligned>
 8007896:	3001      	adds	r0, #1
 8007898:	d02b      	beq.n	80078f2 <_malloc_r+0xd2>
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	442b      	add	r3, r5
 800789e:	6023      	str	r3, [r4, #0]
 80078a0:	e00e      	b.n	80078c0 <_malloc_r+0xa0>
 80078a2:	6822      	ldr	r2, [r4, #0]
 80078a4:	1b52      	subs	r2, r2, r5
 80078a6:	d41e      	bmi.n	80078e6 <_malloc_r+0xc6>
 80078a8:	2a0b      	cmp	r2, #11
 80078aa:	d916      	bls.n	80078da <_malloc_r+0xba>
 80078ac:	1961      	adds	r1, r4, r5
 80078ae:	42a3      	cmp	r3, r4
 80078b0:	6025      	str	r5, [r4, #0]
 80078b2:	bf18      	it	ne
 80078b4:	6059      	strne	r1, [r3, #4]
 80078b6:	6863      	ldr	r3, [r4, #4]
 80078b8:	bf08      	it	eq
 80078ba:	6031      	streq	r1, [r6, #0]
 80078bc:	5162      	str	r2, [r4, r5]
 80078be:	604b      	str	r3, [r1, #4]
 80078c0:	4638      	mov	r0, r7
 80078c2:	f104 060b 	add.w	r6, r4, #11
 80078c6:	f000 ffdd 	bl	8008884 <__malloc_unlock>
 80078ca:	f026 0607 	bic.w	r6, r6, #7
 80078ce:	1d23      	adds	r3, r4, #4
 80078d0:	1af2      	subs	r2, r6, r3
 80078d2:	d0b6      	beq.n	8007842 <_malloc_r+0x22>
 80078d4:	1b9b      	subs	r3, r3, r6
 80078d6:	50a3      	str	r3, [r4, r2]
 80078d8:	e7b3      	b.n	8007842 <_malloc_r+0x22>
 80078da:	6862      	ldr	r2, [r4, #4]
 80078dc:	42a3      	cmp	r3, r4
 80078de:	bf0c      	ite	eq
 80078e0:	6032      	streq	r2, [r6, #0]
 80078e2:	605a      	strne	r2, [r3, #4]
 80078e4:	e7ec      	b.n	80078c0 <_malloc_r+0xa0>
 80078e6:	4623      	mov	r3, r4
 80078e8:	6864      	ldr	r4, [r4, #4]
 80078ea:	e7b2      	b.n	8007852 <_malloc_r+0x32>
 80078ec:	4634      	mov	r4, r6
 80078ee:	6876      	ldr	r6, [r6, #4]
 80078f0:	e7b9      	b.n	8007866 <_malloc_r+0x46>
 80078f2:	230c      	movs	r3, #12
 80078f4:	603b      	str	r3, [r7, #0]
 80078f6:	4638      	mov	r0, r7
 80078f8:	f000 ffc4 	bl	8008884 <__malloc_unlock>
 80078fc:	e7a1      	b.n	8007842 <_malloc_r+0x22>
 80078fe:	6025      	str	r5, [r4, #0]
 8007900:	e7de      	b.n	80078c0 <_malloc_r+0xa0>
 8007902:	bf00      	nop
 8007904:	20009684 	.word	0x20009684

08007908 <__ssputs_r>:
 8007908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800790c:	688e      	ldr	r6, [r1, #8]
 800790e:	429e      	cmp	r6, r3
 8007910:	4682      	mov	sl, r0
 8007912:	460c      	mov	r4, r1
 8007914:	4690      	mov	r8, r2
 8007916:	461f      	mov	r7, r3
 8007918:	d838      	bhi.n	800798c <__ssputs_r+0x84>
 800791a:	898a      	ldrh	r2, [r1, #12]
 800791c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007920:	d032      	beq.n	8007988 <__ssputs_r+0x80>
 8007922:	6825      	ldr	r5, [r4, #0]
 8007924:	6909      	ldr	r1, [r1, #16]
 8007926:	eba5 0901 	sub.w	r9, r5, r1
 800792a:	6965      	ldr	r5, [r4, #20]
 800792c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007930:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007934:	3301      	adds	r3, #1
 8007936:	444b      	add	r3, r9
 8007938:	106d      	asrs	r5, r5, #1
 800793a:	429d      	cmp	r5, r3
 800793c:	bf38      	it	cc
 800793e:	461d      	movcc	r5, r3
 8007940:	0553      	lsls	r3, r2, #21
 8007942:	d531      	bpl.n	80079a8 <__ssputs_r+0xa0>
 8007944:	4629      	mov	r1, r5
 8007946:	f7ff ff6b 	bl	8007820 <_malloc_r>
 800794a:	4606      	mov	r6, r0
 800794c:	b950      	cbnz	r0, 8007964 <__ssputs_r+0x5c>
 800794e:	230c      	movs	r3, #12
 8007950:	f8ca 3000 	str.w	r3, [sl]
 8007954:	89a3      	ldrh	r3, [r4, #12]
 8007956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800795a:	81a3      	strh	r3, [r4, #12]
 800795c:	f04f 30ff 	mov.w	r0, #4294967295
 8007960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007964:	6921      	ldr	r1, [r4, #16]
 8007966:	464a      	mov	r2, r9
 8007968:	f7ff fa08 	bl	8006d7c <memcpy>
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007976:	81a3      	strh	r3, [r4, #12]
 8007978:	6126      	str	r6, [r4, #16]
 800797a:	6165      	str	r5, [r4, #20]
 800797c:	444e      	add	r6, r9
 800797e:	eba5 0509 	sub.w	r5, r5, r9
 8007982:	6026      	str	r6, [r4, #0]
 8007984:	60a5      	str	r5, [r4, #8]
 8007986:	463e      	mov	r6, r7
 8007988:	42be      	cmp	r6, r7
 800798a:	d900      	bls.n	800798e <__ssputs_r+0x86>
 800798c:	463e      	mov	r6, r7
 800798e:	6820      	ldr	r0, [r4, #0]
 8007990:	4632      	mov	r2, r6
 8007992:	4641      	mov	r1, r8
 8007994:	f000 ff56 	bl	8008844 <memmove>
 8007998:	68a3      	ldr	r3, [r4, #8]
 800799a:	1b9b      	subs	r3, r3, r6
 800799c:	60a3      	str	r3, [r4, #8]
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	4433      	add	r3, r6
 80079a2:	6023      	str	r3, [r4, #0]
 80079a4:	2000      	movs	r0, #0
 80079a6:	e7db      	b.n	8007960 <__ssputs_r+0x58>
 80079a8:	462a      	mov	r2, r5
 80079aa:	f000 ff71 	bl	8008890 <_realloc_r>
 80079ae:	4606      	mov	r6, r0
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d1e1      	bne.n	8007978 <__ssputs_r+0x70>
 80079b4:	6921      	ldr	r1, [r4, #16]
 80079b6:	4650      	mov	r0, sl
 80079b8:	f7ff fec6 	bl	8007748 <_free_r>
 80079bc:	e7c7      	b.n	800794e <__ssputs_r+0x46>
	...

080079c0 <_svfiprintf_r>:
 80079c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c4:	4698      	mov	r8, r3
 80079c6:	898b      	ldrh	r3, [r1, #12]
 80079c8:	061b      	lsls	r3, r3, #24
 80079ca:	b09d      	sub	sp, #116	; 0x74
 80079cc:	4607      	mov	r7, r0
 80079ce:	460d      	mov	r5, r1
 80079d0:	4614      	mov	r4, r2
 80079d2:	d50e      	bpl.n	80079f2 <_svfiprintf_r+0x32>
 80079d4:	690b      	ldr	r3, [r1, #16]
 80079d6:	b963      	cbnz	r3, 80079f2 <_svfiprintf_r+0x32>
 80079d8:	2140      	movs	r1, #64	; 0x40
 80079da:	f7ff ff21 	bl	8007820 <_malloc_r>
 80079de:	6028      	str	r0, [r5, #0]
 80079e0:	6128      	str	r0, [r5, #16]
 80079e2:	b920      	cbnz	r0, 80079ee <_svfiprintf_r+0x2e>
 80079e4:	230c      	movs	r3, #12
 80079e6:	603b      	str	r3, [r7, #0]
 80079e8:	f04f 30ff 	mov.w	r0, #4294967295
 80079ec:	e0d1      	b.n	8007b92 <_svfiprintf_r+0x1d2>
 80079ee:	2340      	movs	r3, #64	; 0x40
 80079f0:	616b      	str	r3, [r5, #20]
 80079f2:	2300      	movs	r3, #0
 80079f4:	9309      	str	r3, [sp, #36]	; 0x24
 80079f6:	2320      	movs	r3, #32
 80079f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a00:	2330      	movs	r3, #48	; 0x30
 8007a02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007bac <_svfiprintf_r+0x1ec>
 8007a06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a0a:	f04f 0901 	mov.w	r9, #1
 8007a0e:	4623      	mov	r3, r4
 8007a10:	469a      	mov	sl, r3
 8007a12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a16:	b10a      	cbz	r2, 8007a1c <_svfiprintf_r+0x5c>
 8007a18:	2a25      	cmp	r2, #37	; 0x25
 8007a1a:	d1f9      	bne.n	8007a10 <_svfiprintf_r+0x50>
 8007a1c:	ebba 0b04 	subs.w	fp, sl, r4
 8007a20:	d00b      	beq.n	8007a3a <_svfiprintf_r+0x7a>
 8007a22:	465b      	mov	r3, fp
 8007a24:	4622      	mov	r2, r4
 8007a26:	4629      	mov	r1, r5
 8007a28:	4638      	mov	r0, r7
 8007a2a:	f7ff ff6d 	bl	8007908 <__ssputs_r>
 8007a2e:	3001      	adds	r0, #1
 8007a30:	f000 80aa 	beq.w	8007b88 <_svfiprintf_r+0x1c8>
 8007a34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a36:	445a      	add	r2, fp
 8007a38:	9209      	str	r2, [sp, #36]	; 0x24
 8007a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f000 80a2 	beq.w	8007b88 <_svfiprintf_r+0x1c8>
 8007a44:	2300      	movs	r3, #0
 8007a46:	f04f 32ff 	mov.w	r2, #4294967295
 8007a4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a4e:	f10a 0a01 	add.w	sl, sl, #1
 8007a52:	9304      	str	r3, [sp, #16]
 8007a54:	9307      	str	r3, [sp, #28]
 8007a56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a5a:	931a      	str	r3, [sp, #104]	; 0x68
 8007a5c:	4654      	mov	r4, sl
 8007a5e:	2205      	movs	r2, #5
 8007a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a64:	4851      	ldr	r0, [pc, #324]	; (8007bac <_svfiprintf_r+0x1ec>)
 8007a66:	f7f8 fbd3 	bl	8000210 <memchr>
 8007a6a:	9a04      	ldr	r2, [sp, #16]
 8007a6c:	b9d8      	cbnz	r0, 8007aa6 <_svfiprintf_r+0xe6>
 8007a6e:	06d0      	lsls	r0, r2, #27
 8007a70:	bf44      	itt	mi
 8007a72:	2320      	movmi	r3, #32
 8007a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a78:	0711      	lsls	r1, r2, #28
 8007a7a:	bf44      	itt	mi
 8007a7c:	232b      	movmi	r3, #43	; 0x2b
 8007a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a82:	f89a 3000 	ldrb.w	r3, [sl]
 8007a86:	2b2a      	cmp	r3, #42	; 0x2a
 8007a88:	d015      	beq.n	8007ab6 <_svfiprintf_r+0xf6>
 8007a8a:	9a07      	ldr	r2, [sp, #28]
 8007a8c:	4654      	mov	r4, sl
 8007a8e:	2000      	movs	r0, #0
 8007a90:	f04f 0c0a 	mov.w	ip, #10
 8007a94:	4621      	mov	r1, r4
 8007a96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a9a:	3b30      	subs	r3, #48	; 0x30
 8007a9c:	2b09      	cmp	r3, #9
 8007a9e:	d94e      	bls.n	8007b3e <_svfiprintf_r+0x17e>
 8007aa0:	b1b0      	cbz	r0, 8007ad0 <_svfiprintf_r+0x110>
 8007aa2:	9207      	str	r2, [sp, #28]
 8007aa4:	e014      	b.n	8007ad0 <_svfiprintf_r+0x110>
 8007aa6:	eba0 0308 	sub.w	r3, r0, r8
 8007aaa:	fa09 f303 	lsl.w	r3, r9, r3
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	9304      	str	r3, [sp, #16]
 8007ab2:	46a2      	mov	sl, r4
 8007ab4:	e7d2      	b.n	8007a5c <_svfiprintf_r+0x9c>
 8007ab6:	9b03      	ldr	r3, [sp, #12]
 8007ab8:	1d19      	adds	r1, r3, #4
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	9103      	str	r1, [sp, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	bfbb      	ittet	lt
 8007ac2:	425b      	neglt	r3, r3
 8007ac4:	f042 0202 	orrlt.w	r2, r2, #2
 8007ac8:	9307      	strge	r3, [sp, #28]
 8007aca:	9307      	strlt	r3, [sp, #28]
 8007acc:	bfb8      	it	lt
 8007ace:	9204      	strlt	r2, [sp, #16]
 8007ad0:	7823      	ldrb	r3, [r4, #0]
 8007ad2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ad4:	d10c      	bne.n	8007af0 <_svfiprintf_r+0x130>
 8007ad6:	7863      	ldrb	r3, [r4, #1]
 8007ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8007ada:	d135      	bne.n	8007b48 <_svfiprintf_r+0x188>
 8007adc:	9b03      	ldr	r3, [sp, #12]
 8007ade:	1d1a      	adds	r2, r3, #4
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	9203      	str	r2, [sp, #12]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	bfb8      	it	lt
 8007ae8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007aec:	3402      	adds	r4, #2
 8007aee:	9305      	str	r3, [sp, #20]
 8007af0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007bbc <_svfiprintf_r+0x1fc>
 8007af4:	7821      	ldrb	r1, [r4, #0]
 8007af6:	2203      	movs	r2, #3
 8007af8:	4650      	mov	r0, sl
 8007afa:	f7f8 fb89 	bl	8000210 <memchr>
 8007afe:	b140      	cbz	r0, 8007b12 <_svfiprintf_r+0x152>
 8007b00:	2340      	movs	r3, #64	; 0x40
 8007b02:	eba0 000a 	sub.w	r0, r0, sl
 8007b06:	fa03 f000 	lsl.w	r0, r3, r0
 8007b0a:	9b04      	ldr	r3, [sp, #16]
 8007b0c:	4303      	orrs	r3, r0
 8007b0e:	3401      	adds	r4, #1
 8007b10:	9304      	str	r3, [sp, #16]
 8007b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b16:	4826      	ldr	r0, [pc, #152]	; (8007bb0 <_svfiprintf_r+0x1f0>)
 8007b18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b1c:	2206      	movs	r2, #6
 8007b1e:	f7f8 fb77 	bl	8000210 <memchr>
 8007b22:	2800      	cmp	r0, #0
 8007b24:	d038      	beq.n	8007b98 <_svfiprintf_r+0x1d8>
 8007b26:	4b23      	ldr	r3, [pc, #140]	; (8007bb4 <_svfiprintf_r+0x1f4>)
 8007b28:	bb1b      	cbnz	r3, 8007b72 <_svfiprintf_r+0x1b2>
 8007b2a:	9b03      	ldr	r3, [sp, #12]
 8007b2c:	3307      	adds	r3, #7
 8007b2e:	f023 0307 	bic.w	r3, r3, #7
 8007b32:	3308      	adds	r3, #8
 8007b34:	9303      	str	r3, [sp, #12]
 8007b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b38:	4433      	add	r3, r6
 8007b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b3c:	e767      	b.n	8007a0e <_svfiprintf_r+0x4e>
 8007b3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b42:	460c      	mov	r4, r1
 8007b44:	2001      	movs	r0, #1
 8007b46:	e7a5      	b.n	8007a94 <_svfiprintf_r+0xd4>
 8007b48:	2300      	movs	r3, #0
 8007b4a:	3401      	adds	r4, #1
 8007b4c:	9305      	str	r3, [sp, #20]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	f04f 0c0a 	mov.w	ip, #10
 8007b54:	4620      	mov	r0, r4
 8007b56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b5a:	3a30      	subs	r2, #48	; 0x30
 8007b5c:	2a09      	cmp	r2, #9
 8007b5e:	d903      	bls.n	8007b68 <_svfiprintf_r+0x1a8>
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d0c5      	beq.n	8007af0 <_svfiprintf_r+0x130>
 8007b64:	9105      	str	r1, [sp, #20]
 8007b66:	e7c3      	b.n	8007af0 <_svfiprintf_r+0x130>
 8007b68:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e7f0      	b.n	8007b54 <_svfiprintf_r+0x194>
 8007b72:	ab03      	add	r3, sp, #12
 8007b74:	9300      	str	r3, [sp, #0]
 8007b76:	462a      	mov	r2, r5
 8007b78:	4b0f      	ldr	r3, [pc, #60]	; (8007bb8 <_svfiprintf_r+0x1f8>)
 8007b7a:	a904      	add	r1, sp, #16
 8007b7c:	4638      	mov	r0, r7
 8007b7e:	f7fc f98b 	bl	8003e98 <_printf_float>
 8007b82:	1c42      	adds	r2, r0, #1
 8007b84:	4606      	mov	r6, r0
 8007b86:	d1d6      	bne.n	8007b36 <_svfiprintf_r+0x176>
 8007b88:	89ab      	ldrh	r3, [r5, #12]
 8007b8a:	065b      	lsls	r3, r3, #25
 8007b8c:	f53f af2c 	bmi.w	80079e8 <_svfiprintf_r+0x28>
 8007b90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b92:	b01d      	add	sp, #116	; 0x74
 8007b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b98:	ab03      	add	r3, sp, #12
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	462a      	mov	r2, r5
 8007b9e:	4b06      	ldr	r3, [pc, #24]	; (8007bb8 <_svfiprintf_r+0x1f8>)
 8007ba0:	a904      	add	r1, sp, #16
 8007ba2:	4638      	mov	r0, r7
 8007ba4:	f7fc fc1c 	bl	80043e0 <_printf_i>
 8007ba8:	e7eb      	b.n	8007b82 <_svfiprintf_r+0x1c2>
 8007baa:	bf00      	nop
 8007bac:	08009ae4 	.word	0x08009ae4
 8007bb0:	08009aee 	.word	0x08009aee
 8007bb4:	08003e99 	.word	0x08003e99
 8007bb8:	08007909 	.word	0x08007909
 8007bbc:	08009aea 	.word	0x08009aea

08007bc0 <_sungetc_r>:
 8007bc0:	b538      	push	{r3, r4, r5, lr}
 8007bc2:	1c4b      	adds	r3, r1, #1
 8007bc4:	4614      	mov	r4, r2
 8007bc6:	d103      	bne.n	8007bd0 <_sungetc_r+0x10>
 8007bc8:	f04f 35ff 	mov.w	r5, #4294967295
 8007bcc:	4628      	mov	r0, r5
 8007bce:	bd38      	pop	{r3, r4, r5, pc}
 8007bd0:	8993      	ldrh	r3, [r2, #12]
 8007bd2:	f023 0320 	bic.w	r3, r3, #32
 8007bd6:	8193      	strh	r3, [r2, #12]
 8007bd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bda:	6852      	ldr	r2, [r2, #4]
 8007bdc:	b2cd      	uxtb	r5, r1
 8007bde:	b18b      	cbz	r3, 8007c04 <_sungetc_r+0x44>
 8007be0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007be2:	4293      	cmp	r3, r2
 8007be4:	dd08      	ble.n	8007bf8 <_sungetc_r+0x38>
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	1e5a      	subs	r2, r3, #1
 8007bea:	6022      	str	r2, [r4, #0]
 8007bec:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007bf0:	6863      	ldr	r3, [r4, #4]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	6063      	str	r3, [r4, #4]
 8007bf6:	e7e9      	b.n	8007bcc <_sungetc_r+0xc>
 8007bf8:	4621      	mov	r1, r4
 8007bfa:	f000 fbf1 	bl	80083e0 <__submore>
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	d0f1      	beq.n	8007be6 <_sungetc_r+0x26>
 8007c02:	e7e1      	b.n	8007bc8 <_sungetc_r+0x8>
 8007c04:	6921      	ldr	r1, [r4, #16]
 8007c06:	6823      	ldr	r3, [r4, #0]
 8007c08:	b151      	cbz	r1, 8007c20 <_sungetc_r+0x60>
 8007c0a:	4299      	cmp	r1, r3
 8007c0c:	d208      	bcs.n	8007c20 <_sungetc_r+0x60>
 8007c0e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007c12:	42a9      	cmp	r1, r5
 8007c14:	d104      	bne.n	8007c20 <_sungetc_r+0x60>
 8007c16:	3b01      	subs	r3, #1
 8007c18:	3201      	adds	r2, #1
 8007c1a:	6023      	str	r3, [r4, #0]
 8007c1c:	6062      	str	r2, [r4, #4]
 8007c1e:	e7d5      	b.n	8007bcc <_sungetc_r+0xc>
 8007c20:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007c24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c28:	6363      	str	r3, [r4, #52]	; 0x34
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	63a3      	str	r3, [r4, #56]	; 0x38
 8007c2e:	4623      	mov	r3, r4
 8007c30:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007c34:	6023      	str	r3, [r4, #0]
 8007c36:	2301      	movs	r3, #1
 8007c38:	e7dc      	b.n	8007bf4 <_sungetc_r+0x34>

08007c3a <__ssrefill_r>:
 8007c3a:	b510      	push	{r4, lr}
 8007c3c:	460c      	mov	r4, r1
 8007c3e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007c40:	b169      	cbz	r1, 8007c5e <__ssrefill_r+0x24>
 8007c42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c46:	4299      	cmp	r1, r3
 8007c48:	d001      	beq.n	8007c4e <__ssrefill_r+0x14>
 8007c4a:	f7ff fd7d 	bl	8007748 <_free_r>
 8007c4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c50:	6063      	str	r3, [r4, #4]
 8007c52:	2000      	movs	r0, #0
 8007c54:	6360      	str	r0, [r4, #52]	; 0x34
 8007c56:	b113      	cbz	r3, 8007c5e <__ssrefill_r+0x24>
 8007c58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007c5a:	6023      	str	r3, [r4, #0]
 8007c5c:	bd10      	pop	{r4, pc}
 8007c5e:	6923      	ldr	r3, [r4, #16]
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	2300      	movs	r3, #0
 8007c64:	6063      	str	r3, [r4, #4]
 8007c66:	89a3      	ldrh	r3, [r4, #12]
 8007c68:	f043 0320 	orr.w	r3, r3, #32
 8007c6c:	81a3      	strh	r3, [r4, #12]
 8007c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c72:	e7f3      	b.n	8007c5c <__ssrefill_r+0x22>

08007c74 <__ssvfiscanf_r>:
 8007c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c78:	460c      	mov	r4, r1
 8007c7a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007c7e:	2100      	movs	r1, #0
 8007c80:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007c84:	49a6      	ldr	r1, [pc, #664]	; (8007f20 <__ssvfiscanf_r+0x2ac>)
 8007c86:	91a0      	str	r1, [sp, #640]	; 0x280
 8007c88:	f10d 0804 	add.w	r8, sp, #4
 8007c8c:	49a5      	ldr	r1, [pc, #660]	; (8007f24 <__ssvfiscanf_r+0x2b0>)
 8007c8e:	4fa6      	ldr	r7, [pc, #664]	; (8007f28 <__ssvfiscanf_r+0x2b4>)
 8007c90:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007f2c <__ssvfiscanf_r+0x2b8>
 8007c94:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007c98:	4606      	mov	r6, r0
 8007c9a:	91a1      	str	r1, [sp, #644]	; 0x284
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	7813      	ldrb	r3, [r2, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 815a 	beq.w	8007f5a <__ssvfiscanf_r+0x2e6>
 8007ca6:	5dd9      	ldrb	r1, [r3, r7]
 8007ca8:	f011 0108 	ands.w	r1, r1, #8
 8007cac:	f102 0501 	add.w	r5, r2, #1
 8007cb0:	d019      	beq.n	8007ce6 <__ssvfiscanf_r+0x72>
 8007cb2:	6863      	ldr	r3, [r4, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	dd0f      	ble.n	8007cd8 <__ssvfiscanf_r+0x64>
 8007cb8:	6823      	ldr	r3, [r4, #0]
 8007cba:	781a      	ldrb	r2, [r3, #0]
 8007cbc:	5cba      	ldrb	r2, [r7, r2]
 8007cbe:	0712      	lsls	r2, r2, #28
 8007cc0:	d401      	bmi.n	8007cc6 <__ssvfiscanf_r+0x52>
 8007cc2:	462a      	mov	r2, r5
 8007cc4:	e7eb      	b.n	8007c9e <__ssvfiscanf_r+0x2a>
 8007cc6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007cc8:	3201      	adds	r2, #1
 8007cca:	9245      	str	r2, [sp, #276]	; 0x114
 8007ccc:	6862      	ldr	r2, [r4, #4]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	3a01      	subs	r2, #1
 8007cd2:	6062      	str	r2, [r4, #4]
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	e7ec      	b.n	8007cb2 <__ssvfiscanf_r+0x3e>
 8007cd8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007cda:	4621      	mov	r1, r4
 8007cdc:	4630      	mov	r0, r6
 8007cde:	4798      	blx	r3
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	d0e9      	beq.n	8007cb8 <__ssvfiscanf_r+0x44>
 8007ce4:	e7ed      	b.n	8007cc2 <__ssvfiscanf_r+0x4e>
 8007ce6:	2b25      	cmp	r3, #37	; 0x25
 8007ce8:	d012      	beq.n	8007d10 <__ssvfiscanf_r+0x9c>
 8007cea:	469a      	mov	sl, r3
 8007cec:	6863      	ldr	r3, [r4, #4]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f340 8091 	ble.w	8007e16 <__ssvfiscanf_r+0x1a2>
 8007cf4:	6822      	ldr	r2, [r4, #0]
 8007cf6:	7813      	ldrb	r3, [r2, #0]
 8007cf8:	4553      	cmp	r3, sl
 8007cfa:	f040 812e 	bne.w	8007f5a <__ssvfiscanf_r+0x2e6>
 8007cfe:	6863      	ldr	r3, [r4, #4]
 8007d00:	3b01      	subs	r3, #1
 8007d02:	6063      	str	r3, [r4, #4]
 8007d04:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007d06:	3201      	adds	r2, #1
 8007d08:	3301      	adds	r3, #1
 8007d0a:	6022      	str	r2, [r4, #0]
 8007d0c:	9345      	str	r3, [sp, #276]	; 0x114
 8007d0e:	e7d8      	b.n	8007cc2 <__ssvfiscanf_r+0x4e>
 8007d10:	9141      	str	r1, [sp, #260]	; 0x104
 8007d12:	9143      	str	r1, [sp, #268]	; 0x10c
 8007d14:	7853      	ldrb	r3, [r2, #1]
 8007d16:	2b2a      	cmp	r3, #42	; 0x2a
 8007d18:	bf02      	ittt	eq
 8007d1a:	2310      	moveq	r3, #16
 8007d1c:	1c95      	addeq	r5, r2, #2
 8007d1e:	9341      	streq	r3, [sp, #260]	; 0x104
 8007d20:	220a      	movs	r2, #10
 8007d22:	46aa      	mov	sl, r5
 8007d24:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007d28:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007d2c:	2b09      	cmp	r3, #9
 8007d2e:	d91d      	bls.n	8007d6c <__ssvfiscanf_r+0xf8>
 8007d30:	487e      	ldr	r0, [pc, #504]	; (8007f2c <__ssvfiscanf_r+0x2b8>)
 8007d32:	2203      	movs	r2, #3
 8007d34:	f7f8 fa6c 	bl	8000210 <memchr>
 8007d38:	b140      	cbz	r0, 8007d4c <__ssvfiscanf_r+0xd8>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	eba0 0009 	sub.w	r0, r0, r9
 8007d40:	fa03 f000 	lsl.w	r0, r3, r0
 8007d44:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007d46:	4318      	orrs	r0, r3
 8007d48:	9041      	str	r0, [sp, #260]	; 0x104
 8007d4a:	4655      	mov	r5, sl
 8007d4c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007d50:	2b78      	cmp	r3, #120	; 0x78
 8007d52:	d806      	bhi.n	8007d62 <__ssvfiscanf_r+0xee>
 8007d54:	2b57      	cmp	r3, #87	; 0x57
 8007d56:	d810      	bhi.n	8007d7a <__ssvfiscanf_r+0x106>
 8007d58:	2b25      	cmp	r3, #37	; 0x25
 8007d5a:	d0c6      	beq.n	8007cea <__ssvfiscanf_r+0x76>
 8007d5c:	d856      	bhi.n	8007e0c <__ssvfiscanf_r+0x198>
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d064      	beq.n	8007e2c <__ssvfiscanf_r+0x1b8>
 8007d62:	2303      	movs	r3, #3
 8007d64:	9347      	str	r3, [sp, #284]	; 0x11c
 8007d66:	230a      	movs	r3, #10
 8007d68:	9342      	str	r3, [sp, #264]	; 0x108
 8007d6a:	e071      	b.n	8007e50 <__ssvfiscanf_r+0x1dc>
 8007d6c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007d6e:	fb02 1103 	mla	r1, r2, r3, r1
 8007d72:	3930      	subs	r1, #48	; 0x30
 8007d74:	9143      	str	r1, [sp, #268]	; 0x10c
 8007d76:	4655      	mov	r5, sl
 8007d78:	e7d3      	b.n	8007d22 <__ssvfiscanf_r+0xae>
 8007d7a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007d7e:	2a20      	cmp	r2, #32
 8007d80:	d8ef      	bhi.n	8007d62 <__ssvfiscanf_r+0xee>
 8007d82:	a101      	add	r1, pc, #4	; (adr r1, 8007d88 <__ssvfiscanf_r+0x114>)
 8007d84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007d88:	08007e3b 	.word	0x08007e3b
 8007d8c:	08007d63 	.word	0x08007d63
 8007d90:	08007d63 	.word	0x08007d63
 8007d94:	08007e99 	.word	0x08007e99
 8007d98:	08007d63 	.word	0x08007d63
 8007d9c:	08007d63 	.word	0x08007d63
 8007da0:	08007d63 	.word	0x08007d63
 8007da4:	08007d63 	.word	0x08007d63
 8007da8:	08007d63 	.word	0x08007d63
 8007dac:	08007d63 	.word	0x08007d63
 8007db0:	08007d63 	.word	0x08007d63
 8007db4:	08007eaf 	.word	0x08007eaf
 8007db8:	08007e85 	.word	0x08007e85
 8007dbc:	08007e13 	.word	0x08007e13
 8007dc0:	08007e13 	.word	0x08007e13
 8007dc4:	08007e13 	.word	0x08007e13
 8007dc8:	08007d63 	.word	0x08007d63
 8007dcc:	08007e89 	.word	0x08007e89
 8007dd0:	08007d63 	.word	0x08007d63
 8007dd4:	08007d63 	.word	0x08007d63
 8007dd8:	08007d63 	.word	0x08007d63
 8007ddc:	08007d63 	.word	0x08007d63
 8007de0:	08007ebf 	.word	0x08007ebf
 8007de4:	08007e91 	.word	0x08007e91
 8007de8:	08007e33 	.word	0x08007e33
 8007dec:	08007d63 	.word	0x08007d63
 8007df0:	08007d63 	.word	0x08007d63
 8007df4:	08007ebb 	.word	0x08007ebb
 8007df8:	08007d63 	.word	0x08007d63
 8007dfc:	08007e85 	.word	0x08007e85
 8007e00:	08007d63 	.word	0x08007d63
 8007e04:	08007d63 	.word	0x08007d63
 8007e08:	08007e3b 	.word	0x08007e3b
 8007e0c:	3b45      	subs	r3, #69	; 0x45
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d8a7      	bhi.n	8007d62 <__ssvfiscanf_r+0xee>
 8007e12:	2305      	movs	r3, #5
 8007e14:	e01b      	b.n	8007e4e <__ssvfiscanf_r+0x1da>
 8007e16:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007e18:	4621      	mov	r1, r4
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	4798      	blx	r3
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	f43f af68 	beq.w	8007cf4 <__ssvfiscanf_r+0x80>
 8007e24:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007e26:	2800      	cmp	r0, #0
 8007e28:	f040 808d 	bne.w	8007f46 <__ssvfiscanf_r+0x2d2>
 8007e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e30:	e08f      	b.n	8007f52 <__ssvfiscanf_r+0x2de>
 8007e32:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007e34:	f042 0220 	orr.w	r2, r2, #32
 8007e38:	9241      	str	r2, [sp, #260]	; 0x104
 8007e3a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e40:	9241      	str	r2, [sp, #260]	; 0x104
 8007e42:	2210      	movs	r2, #16
 8007e44:	2b6f      	cmp	r3, #111	; 0x6f
 8007e46:	9242      	str	r2, [sp, #264]	; 0x108
 8007e48:	bf34      	ite	cc
 8007e4a:	2303      	movcc	r3, #3
 8007e4c:	2304      	movcs	r3, #4
 8007e4e:	9347      	str	r3, [sp, #284]	; 0x11c
 8007e50:	6863      	ldr	r3, [r4, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	dd42      	ble.n	8007edc <__ssvfiscanf_r+0x268>
 8007e56:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007e58:	0659      	lsls	r1, r3, #25
 8007e5a:	d404      	bmi.n	8007e66 <__ssvfiscanf_r+0x1f2>
 8007e5c:	6823      	ldr	r3, [r4, #0]
 8007e5e:	781a      	ldrb	r2, [r3, #0]
 8007e60:	5cba      	ldrb	r2, [r7, r2]
 8007e62:	0712      	lsls	r2, r2, #28
 8007e64:	d441      	bmi.n	8007eea <__ssvfiscanf_r+0x276>
 8007e66:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	dc50      	bgt.n	8007f0e <__ssvfiscanf_r+0x29a>
 8007e6c:	466b      	mov	r3, sp
 8007e6e:	4622      	mov	r2, r4
 8007e70:	a941      	add	r1, sp, #260	; 0x104
 8007e72:	4630      	mov	r0, r6
 8007e74:	f000 f876 	bl	8007f64 <_scanf_chars>
 8007e78:	2801      	cmp	r0, #1
 8007e7a:	d06e      	beq.n	8007f5a <__ssvfiscanf_r+0x2e6>
 8007e7c:	2802      	cmp	r0, #2
 8007e7e:	f47f af20 	bne.w	8007cc2 <__ssvfiscanf_r+0x4e>
 8007e82:	e7cf      	b.n	8007e24 <__ssvfiscanf_r+0x1b0>
 8007e84:	220a      	movs	r2, #10
 8007e86:	e7dd      	b.n	8007e44 <__ssvfiscanf_r+0x1d0>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	9342      	str	r3, [sp, #264]	; 0x108
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e7de      	b.n	8007e4e <__ssvfiscanf_r+0x1da>
 8007e90:	2308      	movs	r3, #8
 8007e92:	9342      	str	r3, [sp, #264]	; 0x108
 8007e94:	2304      	movs	r3, #4
 8007e96:	e7da      	b.n	8007e4e <__ssvfiscanf_r+0x1da>
 8007e98:	4629      	mov	r1, r5
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	f000 f9e0 	bl	8008260 <__sccl>
 8007ea0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ea6:	9341      	str	r3, [sp, #260]	; 0x104
 8007ea8:	4605      	mov	r5, r0
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e7cf      	b.n	8007e4e <__ssvfiscanf_r+0x1da>
 8007eae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eb4:	9341      	str	r3, [sp, #260]	; 0x104
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	e7c9      	b.n	8007e4e <__ssvfiscanf_r+0x1da>
 8007eba:	2302      	movs	r3, #2
 8007ebc:	e7c7      	b.n	8007e4e <__ssvfiscanf_r+0x1da>
 8007ebe:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007ec0:	06c3      	lsls	r3, r0, #27
 8007ec2:	f53f aefe 	bmi.w	8007cc2 <__ssvfiscanf_r+0x4e>
 8007ec6:	9b00      	ldr	r3, [sp, #0]
 8007ec8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007eca:	1d19      	adds	r1, r3, #4
 8007ecc:	9100      	str	r1, [sp, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f010 0f01 	tst.w	r0, #1
 8007ed4:	bf14      	ite	ne
 8007ed6:	801a      	strhne	r2, [r3, #0]
 8007ed8:	601a      	streq	r2, [r3, #0]
 8007eda:	e6f2      	b.n	8007cc2 <__ssvfiscanf_r+0x4e>
 8007edc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007ede:	4621      	mov	r1, r4
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	4798      	blx	r3
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	d0b6      	beq.n	8007e56 <__ssvfiscanf_r+0x1e2>
 8007ee8:	e79c      	b.n	8007e24 <__ssvfiscanf_r+0x1b0>
 8007eea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007eec:	3201      	adds	r2, #1
 8007eee:	9245      	str	r2, [sp, #276]	; 0x114
 8007ef0:	6862      	ldr	r2, [r4, #4]
 8007ef2:	3a01      	subs	r2, #1
 8007ef4:	2a00      	cmp	r2, #0
 8007ef6:	6062      	str	r2, [r4, #4]
 8007ef8:	dd02      	ble.n	8007f00 <__ssvfiscanf_r+0x28c>
 8007efa:	3301      	adds	r3, #1
 8007efc:	6023      	str	r3, [r4, #0]
 8007efe:	e7ad      	b.n	8007e5c <__ssvfiscanf_r+0x1e8>
 8007f00:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007f02:	4621      	mov	r1, r4
 8007f04:	4630      	mov	r0, r6
 8007f06:	4798      	blx	r3
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d0a7      	beq.n	8007e5c <__ssvfiscanf_r+0x1e8>
 8007f0c:	e78a      	b.n	8007e24 <__ssvfiscanf_r+0x1b0>
 8007f0e:	2b04      	cmp	r3, #4
 8007f10:	dc0e      	bgt.n	8007f30 <__ssvfiscanf_r+0x2bc>
 8007f12:	466b      	mov	r3, sp
 8007f14:	4622      	mov	r2, r4
 8007f16:	a941      	add	r1, sp, #260	; 0x104
 8007f18:	4630      	mov	r0, r6
 8007f1a:	f000 f87d 	bl	8008018 <_scanf_i>
 8007f1e:	e7ab      	b.n	8007e78 <__ssvfiscanf_r+0x204>
 8007f20:	08007bc1 	.word	0x08007bc1
 8007f24:	08007c3b 	.word	0x08007c3b
 8007f28:	08009781 	.word	0x08009781
 8007f2c:	08009aea 	.word	0x08009aea
 8007f30:	4b0b      	ldr	r3, [pc, #44]	; (8007f60 <__ssvfiscanf_r+0x2ec>)
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f43f aec5 	beq.w	8007cc2 <__ssvfiscanf_r+0x4e>
 8007f38:	466b      	mov	r3, sp
 8007f3a:	4622      	mov	r2, r4
 8007f3c:	a941      	add	r1, sp, #260	; 0x104
 8007f3e:	4630      	mov	r0, r6
 8007f40:	f7fc fb74 	bl	800462c <_scanf_float>
 8007f44:	e798      	b.n	8007e78 <__ssvfiscanf_r+0x204>
 8007f46:	89a3      	ldrh	r3, [r4, #12]
 8007f48:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007f4c:	bf18      	it	ne
 8007f4e:	f04f 30ff 	movne.w	r0, #4294967295
 8007f52:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f5a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007f5c:	e7f9      	b.n	8007f52 <__ssvfiscanf_r+0x2de>
 8007f5e:	bf00      	nop
 8007f60:	0800462d 	.word	0x0800462d

08007f64 <_scanf_chars>:
 8007f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f68:	4615      	mov	r5, r2
 8007f6a:	688a      	ldr	r2, [r1, #8]
 8007f6c:	4680      	mov	r8, r0
 8007f6e:	460c      	mov	r4, r1
 8007f70:	b932      	cbnz	r2, 8007f80 <_scanf_chars+0x1c>
 8007f72:	698a      	ldr	r2, [r1, #24]
 8007f74:	2a00      	cmp	r2, #0
 8007f76:	bf0c      	ite	eq
 8007f78:	2201      	moveq	r2, #1
 8007f7a:	f04f 32ff 	movne.w	r2, #4294967295
 8007f7e:	608a      	str	r2, [r1, #8]
 8007f80:	6822      	ldr	r2, [r4, #0]
 8007f82:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008014 <_scanf_chars+0xb0>
 8007f86:	06d1      	lsls	r1, r2, #27
 8007f88:	bf5f      	itttt	pl
 8007f8a:	681a      	ldrpl	r2, [r3, #0]
 8007f8c:	1d11      	addpl	r1, r2, #4
 8007f8e:	6019      	strpl	r1, [r3, #0]
 8007f90:	6816      	ldrpl	r6, [r2, #0]
 8007f92:	2700      	movs	r7, #0
 8007f94:	69a0      	ldr	r0, [r4, #24]
 8007f96:	b188      	cbz	r0, 8007fbc <_scanf_chars+0x58>
 8007f98:	2801      	cmp	r0, #1
 8007f9a:	d107      	bne.n	8007fac <_scanf_chars+0x48>
 8007f9c:	682a      	ldr	r2, [r5, #0]
 8007f9e:	7811      	ldrb	r1, [r2, #0]
 8007fa0:	6962      	ldr	r2, [r4, #20]
 8007fa2:	5c52      	ldrb	r2, [r2, r1]
 8007fa4:	b952      	cbnz	r2, 8007fbc <_scanf_chars+0x58>
 8007fa6:	2f00      	cmp	r7, #0
 8007fa8:	d031      	beq.n	800800e <_scanf_chars+0xaa>
 8007faa:	e022      	b.n	8007ff2 <_scanf_chars+0x8e>
 8007fac:	2802      	cmp	r0, #2
 8007fae:	d120      	bne.n	8007ff2 <_scanf_chars+0x8e>
 8007fb0:	682b      	ldr	r3, [r5, #0]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	f813 3009 	ldrb.w	r3, [r3, r9]
 8007fb8:	071b      	lsls	r3, r3, #28
 8007fba:	d41a      	bmi.n	8007ff2 <_scanf_chars+0x8e>
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	06da      	lsls	r2, r3, #27
 8007fc0:	bf5e      	ittt	pl
 8007fc2:	682b      	ldrpl	r3, [r5, #0]
 8007fc4:	781b      	ldrbpl	r3, [r3, #0]
 8007fc6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007fca:	682a      	ldr	r2, [r5, #0]
 8007fcc:	686b      	ldr	r3, [r5, #4]
 8007fce:	3201      	adds	r2, #1
 8007fd0:	602a      	str	r2, [r5, #0]
 8007fd2:	68a2      	ldr	r2, [r4, #8]
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	3a01      	subs	r2, #1
 8007fd8:	606b      	str	r3, [r5, #4]
 8007fda:	3701      	adds	r7, #1
 8007fdc:	60a2      	str	r2, [r4, #8]
 8007fde:	b142      	cbz	r2, 8007ff2 <_scanf_chars+0x8e>
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	dcd7      	bgt.n	8007f94 <_scanf_chars+0x30>
 8007fe4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007fe8:	4629      	mov	r1, r5
 8007fea:	4640      	mov	r0, r8
 8007fec:	4798      	blx	r3
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	d0d0      	beq.n	8007f94 <_scanf_chars+0x30>
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	f013 0310 	ands.w	r3, r3, #16
 8007ff8:	d105      	bne.n	8008006 <_scanf_chars+0xa2>
 8007ffa:	68e2      	ldr	r2, [r4, #12]
 8007ffc:	3201      	adds	r2, #1
 8007ffe:	60e2      	str	r2, [r4, #12]
 8008000:	69a2      	ldr	r2, [r4, #24]
 8008002:	b102      	cbz	r2, 8008006 <_scanf_chars+0xa2>
 8008004:	7033      	strb	r3, [r6, #0]
 8008006:	6923      	ldr	r3, [r4, #16]
 8008008:	443b      	add	r3, r7
 800800a:	6123      	str	r3, [r4, #16]
 800800c:	2000      	movs	r0, #0
 800800e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008012:	bf00      	nop
 8008014:	08009781 	.word	0x08009781

08008018 <_scanf_i>:
 8008018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801c:	4698      	mov	r8, r3
 800801e:	4b76      	ldr	r3, [pc, #472]	; (80081f8 <_scanf_i+0x1e0>)
 8008020:	460c      	mov	r4, r1
 8008022:	4682      	mov	sl, r0
 8008024:	4616      	mov	r6, r2
 8008026:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800802a:	b087      	sub	sp, #28
 800802c:	ab03      	add	r3, sp, #12
 800802e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008032:	4b72      	ldr	r3, [pc, #456]	; (80081fc <_scanf_i+0x1e4>)
 8008034:	69a1      	ldr	r1, [r4, #24]
 8008036:	4a72      	ldr	r2, [pc, #456]	; (8008200 <_scanf_i+0x1e8>)
 8008038:	2903      	cmp	r1, #3
 800803a:	bf18      	it	ne
 800803c:	461a      	movne	r2, r3
 800803e:	68a3      	ldr	r3, [r4, #8]
 8008040:	9201      	str	r2, [sp, #4]
 8008042:	1e5a      	subs	r2, r3, #1
 8008044:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008048:	bf88      	it	hi
 800804a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800804e:	4627      	mov	r7, r4
 8008050:	bf82      	ittt	hi
 8008052:	eb03 0905 	addhi.w	r9, r3, r5
 8008056:	f240 135d 	movwhi	r3, #349	; 0x15d
 800805a:	60a3      	strhi	r3, [r4, #8]
 800805c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008060:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008064:	bf98      	it	ls
 8008066:	f04f 0900 	movls.w	r9, #0
 800806a:	6023      	str	r3, [r4, #0]
 800806c:	463d      	mov	r5, r7
 800806e:	f04f 0b00 	mov.w	fp, #0
 8008072:	6831      	ldr	r1, [r6, #0]
 8008074:	ab03      	add	r3, sp, #12
 8008076:	7809      	ldrb	r1, [r1, #0]
 8008078:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800807c:	2202      	movs	r2, #2
 800807e:	f7f8 f8c7 	bl	8000210 <memchr>
 8008082:	b328      	cbz	r0, 80080d0 <_scanf_i+0xb8>
 8008084:	f1bb 0f01 	cmp.w	fp, #1
 8008088:	d159      	bne.n	800813e <_scanf_i+0x126>
 800808a:	6862      	ldr	r2, [r4, #4]
 800808c:	b92a      	cbnz	r2, 800809a <_scanf_i+0x82>
 800808e:	6822      	ldr	r2, [r4, #0]
 8008090:	2308      	movs	r3, #8
 8008092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008096:	6063      	str	r3, [r4, #4]
 8008098:	6022      	str	r2, [r4, #0]
 800809a:	6822      	ldr	r2, [r4, #0]
 800809c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80080a0:	6022      	str	r2, [r4, #0]
 80080a2:	68a2      	ldr	r2, [r4, #8]
 80080a4:	1e51      	subs	r1, r2, #1
 80080a6:	60a1      	str	r1, [r4, #8]
 80080a8:	b192      	cbz	r2, 80080d0 <_scanf_i+0xb8>
 80080aa:	6832      	ldr	r2, [r6, #0]
 80080ac:	1c51      	adds	r1, r2, #1
 80080ae:	6031      	str	r1, [r6, #0]
 80080b0:	7812      	ldrb	r2, [r2, #0]
 80080b2:	f805 2b01 	strb.w	r2, [r5], #1
 80080b6:	6872      	ldr	r2, [r6, #4]
 80080b8:	3a01      	subs	r2, #1
 80080ba:	2a00      	cmp	r2, #0
 80080bc:	6072      	str	r2, [r6, #4]
 80080be:	dc07      	bgt.n	80080d0 <_scanf_i+0xb8>
 80080c0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80080c4:	4631      	mov	r1, r6
 80080c6:	4650      	mov	r0, sl
 80080c8:	4790      	blx	r2
 80080ca:	2800      	cmp	r0, #0
 80080cc:	f040 8085 	bne.w	80081da <_scanf_i+0x1c2>
 80080d0:	f10b 0b01 	add.w	fp, fp, #1
 80080d4:	f1bb 0f03 	cmp.w	fp, #3
 80080d8:	d1cb      	bne.n	8008072 <_scanf_i+0x5a>
 80080da:	6863      	ldr	r3, [r4, #4]
 80080dc:	b90b      	cbnz	r3, 80080e2 <_scanf_i+0xca>
 80080de:	230a      	movs	r3, #10
 80080e0:	6063      	str	r3, [r4, #4]
 80080e2:	6863      	ldr	r3, [r4, #4]
 80080e4:	4947      	ldr	r1, [pc, #284]	; (8008204 <_scanf_i+0x1ec>)
 80080e6:	6960      	ldr	r0, [r4, #20]
 80080e8:	1ac9      	subs	r1, r1, r3
 80080ea:	f000 f8b9 	bl	8008260 <__sccl>
 80080ee:	f04f 0b00 	mov.w	fp, #0
 80080f2:	68a3      	ldr	r3, [r4, #8]
 80080f4:	6822      	ldr	r2, [r4, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d03d      	beq.n	8008176 <_scanf_i+0x15e>
 80080fa:	6831      	ldr	r1, [r6, #0]
 80080fc:	6960      	ldr	r0, [r4, #20]
 80080fe:	f891 c000 	ldrb.w	ip, [r1]
 8008102:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008106:	2800      	cmp	r0, #0
 8008108:	d035      	beq.n	8008176 <_scanf_i+0x15e>
 800810a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800810e:	d124      	bne.n	800815a <_scanf_i+0x142>
 8008110:	0510      	lsls	r0, r2, #20
 8008112:	d522      	bpl.n	800815a <_scanf_i+0x142>
 8008114:	f10b 0b01 	add.w	fp, fp, #1
 8008118:	f1b9 0f00 	cmp.w	r9, #0
 800811c:	d003      	beq.n	8008126 <_scanf_i+0x10e>
 800811e:	3301      	adds	r3, #1
 8008120:	f109 39ff 	add.w	r9, r9, #4294967295
 8008124:	60a3      	str	r3, [r4, #8]
 8008126:	6873      	ldr	r3, [r6, #4]
 8008128:	3b01      	subs	r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	6073      	str	r3, [r6, #4]
 800812e:	dd1b      	ble.n	8008168 <_scanf_i+0x150>
 8008130:	6833      	ldr	r3, [r6, #0]
 8008132:	3301      	adds	r3, #1
 8008134:	6033      	str	r3, [r6, #0]
 8008136:	68a3      	ldr	r3, [r4, #8]
 8008138:	3b01      	subs	r3, #1
 800813a:	60a3      	str	r3, [r4, #8]
 800813c:	e7d9      	b.n	80080f2 <_scanf_i+0xda>
 800813e:	f1bb 0f02 	cmp.w	fp, #2
 8008142:	d1ae      	bne.n	80080a2 <_scanf_i+0x8a>
 8008144:	6822      	ldr	r2, [r4, #0]
 8008146:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800814a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800814e:	d1bf      	bne.n	80080d0 <_scanf_i+0xb8>
 8008150:	2310      	movs	r3, #16
 8008152:	6063      	str	r3, [r4, #4]
 8008154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008158:	e7a2      	b.n	80080a0 <_scanf_i+0x88>
 800815a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800815e:	6022      	str	r2, [r4, #0]
 8008160:	780b      	ldrb	r3, [r1, #0]
 8008162:	f805 3b01 	strb.w	r3, [r5], #1
 8008166:	e7de      	b.n	8008126 <_scanf_i+0x10e>
 8008168:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800816c:	4631      	mov	r1, r6
 800816e:	4650      	mov	r0, sl
 8008170:	4798      	blx	r3
 8008172:	2800      	cmp	r0, #0
 8008174:	d0df      	beq.n	8008136 <_scanf_i+0x11e>
 8008176:	6823      	ldr	r3, [r4, #0]
 8008178:	05db      	lsls	r3, r3, #23
 800817a:	d50d      	bpl.n	8008198 <_scanf_i+0x180>
 800817c:	42bd      	cmp	r5, r7
 800817e:	d909      	bls.n	8008194 <_scanf_i+0x17c>
 8008180:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008184:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008188:	4632      	mov	r2, r6
 800818a:	4650      	mov	r0, sl
 800818c:	4798      	blx	r3
 800818e:	f105 39ff 	add.w	r9, r5, #4294967295
 8008192:	464d      	mov	r5, r9
 8008194:	42bd      	cmp	r5, r7
 8008196:	d02d      	beq.n	80081f4 <_scanf_i+0x1dc>
 8008198:	6822      	ldr	r2, [r4, #0]
 800819a:	f012 0210 	ands.w	r2, r2, #16
 800819e:	d113      	bne.n	80081c8 <_scanf_i+0x1b0>
 80081a0:	702a      	strb	r2, [r5, #0]
 80081a2:	6863      	ldr	r3, [r4, #4]
 80081a4:	9e01      	ldr	r6, [sp, #4]
 80081a6:	4639      	mov	r1, r7
 80081a8:	4650      	mov	r0, sl
 80081aa:	47b0      	blx	r6
 80081ac:	6821      	ldr	r1, [r4, #0]
 80081ae:	f8d8 3000 	ldr.w	r3, [r8]
 80081b2:	f011 0f20 	tst.w	r1, #32
 80081b6:	d013      	beq.n	80081e0 <_scanf_i+0x1c8>
 80081b8:	1d1a      	adds	r2, r3, #4
 80081ba:	f8c8 2000 	str.w	r2, [r8]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6018      	str	r0, [r3, #0]
 80081c2:	68e3      	ldr	r3, [r4, #12]
 80081c4:	3301      	adds	r3, #1
 80081c6:	60e3      	str	r3, [r4, #12]
 80081c8:	1bed      	subs	r5, r5, r7
 80081ca:	44ab      	add	fp, r5
 80081cc:	6925      	ldr	r5, [r4, #16]
 80081ce:	445d      	add	r5, fp
 80081d0:	6125      	str	r5, [r4, #16]
 80081d2:	2000      	movs	r0, #0
 80081d4:	b007      	add	sp, #28
 80081d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081da:	f04f 0b00 	mov.w	fp, #0
 80081de:	e7ca      	b.n	8008176 <_scanf_i+0x15e>
 80081e0:	1d1a      	adds	r2, r3, #4
 80081e2:	f8c8 2000 	str.w	r2, [r8]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f011 0f01 	tst.w	r1, #1
 80081ec:	bf14      	ite	ne
 80081ee:	8018      	strhne	r0, [r3, #0]
 80081f0:	6018      	streq	r0, [r3, #0]
 80081f2:	e7e6      	b.n	80081c2 <_scanf_i+0x1aa>
 80081f4:	2001      	movs	r0, #1
 80081f6:	e7ed      	b.n	80081d4 <_scanf_i+0x1bc>
 80081f8:	080096e4 	.word	0x080096e4
 80081fc:	080083dd 	.word	0x080083dd
 8008200:	080058ed 	.word	0x080058ed
 8008204:	08009b0e 	.word	0x08009b0e

08008208 <_read_r>:
 8008208:	b538      	push	{r3, r4, r5, lr}
 800820a:	4d07      	ldr	r5, [pc, #28]	; (8008228 <_read_r+0x20>)
 800820c:	4604      	mov	r4, r0
 800820e:	4608      	mov	r0, r1
 8008210:	4611      	mov	r1, r2
 8008212:	2200      	movs	r2, #0
 8008214:	602a      	str	r2, [r5, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	f7fa fc6d 	bl	8002af6 <_read>
 800821c:	1c43      	adds	r3, r0, #1
 800821e:	d102      	bne.n	8008226 <_read_r+0x1e>
 8008220:	682b      	ldr	r3, [r5, #0]
 8008222:	b103      	cbz	r3, 8008226 <_read_r+0x1e>
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	bd38      	pop	{r3, r4, r5, pc}
 8008228:	2000968c 	.word	0x2000968c
 800822c:	00000000 	.word	0x00000000

08008230 <nan>:
 8008230:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008238 <nan+0x8>
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	00000000 	.word	0x00000000
 800823c:	7ff80000 	.word	0x7ff80000

08008240 <_sbrk_r>:
 8008240:	b538      	push	{r3, r4, r5, lr}
 8008242:	4d06      	ldr	r5, [pc, #24]	; (800825c <_sbrk_r+0x1c>)
 8008244:	2300      	movs	r3, #0
 8008246:	4604      	mov	r4, r0
 8008248:	4608      	mov	r0, r1
 800824a:	602b      	str	r3, [r5, #0]
 800824c:	f7fa fcc0 	bl	8002bd0 <_sbrk>
 8008250:	1c43      	adds	r3, r0, #1
 8008252:	d102      	bne.n	800825a <_sbrk_r+0x1a>
 8008254:	682b      	ldr	r3, [r5, #0]
 8008256:	b103      	cbz	r3, 800825a <_sbrk_r+0x1a>
 8008258:	6023      	str	r3, [r4, #0]
 800825a:	bd38      	pop	{r3, r4, r5, pc}
 800825c:	2000968c 	.word	0x2000968c

08008260 <__sccl>:
 8008260:	b570      	push	{r4, r5, r6, lr}
 8008262:	780b      	ldrb	r3, [r1, #0]
 8008264:	4604      	mov	r4, r0
 8008266:	2b5e      	cmp	r3, #94	; 0x5e
 8008268:	bf0b      	itete	eq
 800826a:	784b      	ldrbeq	r3, [r1, #1]
 800826c:	1c48      	addne	r0, r1, #1
 800826e:	1c88      	addeq	r0, r1, #2
 8008270:	2200      	movne	r2, #0
 8008272:	bf08      	it	eq
 8008274:	2201      	moveq	r2, #1
 8008276:	1e61      	subs	r1, r4, #1
 8008278:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800827c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008280:	42a9      	cmp	r1, r5
 8008282:	d1fb      	bne.n	800827c <__sccl+0x1c>
 8008284:	b90b      	cbnz	r3, 800828a <__sccl+0x2a>
 8008286:	3801      	subs	r0, #1
 8008288:	bd70      	pop	{r4, r5, r6, pc}
 800828a:	f082 0201 	eor.w	r2, r2, #1
 800828e:	54e2      	strb	r2, [r4, r3]
 8008290:	4605      	mov	r5, r0
 8008292:	4628      	mov	r0, r5
 8008294:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008298:	292d      	cmp	r1, #45	; 0x2d
 800829a:	d006      	beq.n	80082aa <__sccl+0x4a>
 800829c:	295d      	cmp	r1, #93	; 0x5d
 800829e:	d0f3      	beq.n	8008288 <__sccl+0x28>
 80082a0:	b909      	cbnz	r1, 80082a6 <__sccl+0x46>
 80082a2:	4628      	mov	r0, r5
 80082a4:	e7f0      	b.n	8008288 <__sccl+0x28>
 80082a6:	460b      	mov	r3, r1
 80082a8:	e7f1      	b.n	800828e <__sccl+0x2e>
 80082aa:	786e      	ldrb	r6, [r5, #1]
 80082ac:	2e5d      	cmp	r6, #93	; 0x5d
 80082ae:	d0fa      	beq.n	80082a6 <__sccl+0x46>
 80082b0:	42b3      	cmp	r3, r6
 80082b2:	dcf8      	bgt.n	80082a6 <__sccl+0x46>
 80082b4:	3502      	adds	r5, #2
 80082b6:	4619      	mov	r1, r3
 80082b8:	3101      	adds	r1, #1
 80082ba:	428e      	cmp	r6, r1
 80082bc:	5462      	strb	r2, [r4, r1]
 80082be:	dcfb      	bgt.n	80082b8 <__sccl+0x58>
 80082c0:	1af1      	subs	r1, r6, r3
 80082c2:	3901      	subs	r1, #1
 80082c4:	1c58      	adds	r0, r3, #1
 80082c6:	42b3      	cmp	r3, r6
 80082c8:	bfa8      	it	ge
 80082ca:	2100      	movge	r1, #0
 80082cc:	1843      	adds	r3, r0, r1
 80082ce:	e7e0      	b.n	8008292 <__sccl+0x32>

080082d0 <strncmp>:
 80082d0:	b510      	push	{r4, lr}
 80082d2:	b17a      	cbz	r2, 80082f4 <strncmp+0x24>
 80082d4:	4603      	mov	r3, r0
 80082d6:	3901      	subs	r1, #1
 80082d8:	1884      	adds	r4, r0, r2
 80082da:	f813 0b01 	ldrb.w	r0, [r3], #1
 80082de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80082e2:	4290      	cmp	r0, r2
 80082e4:	d101      	bne.n	80082ea <strncmp+0x1a>
 80082e6:	42a3      	cmp	r3, r4
 80082e8:	d101      	bne.n	80082ee <strncmp+0x1e>
 80082ea:	1a80      	subs	r0, r0, r2
 80082ec:	bd10      	pop	{r4, pc}
 80082ee:	2800      	cmp	r0, #0
 80082f0:	d1f3      	bne.n	80082da <strncmp+0xa>
 80082f2:	e7fa      	b.n	80082ea <strncmp+0x1a>
 80082f4:	4610      	mov	r0, r2
 80082f6:	e7f9      	b.n	80082ec <strncmp+0x1c>

080082f8 <_strtoul_l.constprop.0>:
 80082f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082fc:	4f36      	ldr	r7, [pc, #216]	; (80083d8 <_strtoul_l.constprop.0+0xe0>)
 80082fe:	4686      	mov	lr, r0
 8008300:	460d      	mov	r5, r1
 8008302:	4628      	mov	r0, r5
 8008304:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008308:	5de6      	ldrb	r6, [r4, r7]
 800830a:	f016 0608 	ands.w	r6, r6, #8
 800830e:	d1f8      	bne.n	8008302 <_strtoul_l.constprop.0+0xa>
 8008310:	2c2d      	cmp	r4, #45	; 0x2d
 8008312:	d12f      	bne.n	8008374 <_strtoul_l.constprop.0+0x7c>
 8008314:	782c      	ldrb	r4, [r5, #0]
 8008316:	2601      	movs	r6, #1
 8008318:	1c85      	adds	r5, r0, #2
 800831a:	2b00      	cmp	r3, #0
 800831c:	d057      	beq.n	80083ce <_strtoul_l.constprop.0+0xd6>
 800831e:	2b10      	cmp	r3, #16
 8008320:	d109      	bne.n	8008336 <_strtoul_l.constprop.0+0x3e>
 8008322:	2c30      	cmp	r4, #48	; 0x30
 8008324:	d107      	bne.n	8008336 <_strtoul_l.constprop.0+0x3e>
 8008326:	7828      	ldrb	r0, [r5, #0]
 8008328:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800832c:	2858      	cmp	r0, #88	; 0x58
 800832e:	d149      	bne.n	80083c4 <_strtoul_l.constprop.0+0xcc>
 8008330:	786c      	ldrb	r4, [r5, #1]
 8008332:	2310      	movs	r3, #16
 8008334:	3502      	adds	r5, #2
 8008336:	f04f 38ff 	mov.w	r8, #4294967295
 800833a:	2700      	movs	r7, #0
 800833c:	fbb8 f8f3 	udiv	r8, r8, r3
 8008340:	fb03 f908 	mul.w	r9, r3, r8
 8008344:	ea6f 0909 	mvn.w	r9, r9
 8008348:	4638      	mov	r0, r7
 800834a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800834e:	f1bc 0f09 	cmp.w	ip, #9
 8008352:	d814      	bhi.n	800837e <_strtoul_l.constprop.0+0x86>
 8008354:	4664      	mov	r4, ip
 8008356:	42a3      	cmp	r3, r4
 8008358:	dd22      	ble.n	80083a0 <_strtoul_l.constprop.0+0xa8>
 800835a:	2f00      	cmp	r7, #0
 800835c:	db1d      	blt.n	800839a <_strtoul_l.constprop.0+0xa2>
 800835e:	4580      	cmp	r8, r0
 8008360:	d31b      	bcc.n	800839a <_strtoul_l.constprop.0+0xa2>
 8008362:	d101      	bne.n	8008368 <_strtoul_l.constprop.0+0x70>
 8008364:	45a1      	cmp	r9, r4
 8008366:	db18      	blt.n	800839a <_strtoul_l.constprop.0+0xa2>
 8008368:	fb00 4003 	mla	r0, r0, r3, r4
 800836c:	2701      	movs	r7, #1
 800836e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008372:	e7ea      	b.n	800834a <_strtoul_l.constprop.0+0x52>
 8008374:	2c2b      	cmp	r4, #43	; 0x2b
 8008376:	bf04      	itt	eq
 8008378:	782c      	ldrbeq	r4, [r5, #0]
 800837a:	1c85      	addeq	r5, r0, #2
 800837c:	e7cd      	b.n	800831a <_strtoul_l.constprop.0+0x22>
 800837e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008382:	f1bc 0f19 	cmp.w	ip, #25
 8008386:	d801      	bhi.n	800838c <_strtoul_l.constprop.0+0x94>
 8008388:	3c37      	subs	r4, #55	; 0x37
 800838a:	e7e4      	b.n	8008356 <_strtoul_l.constprop.0+0x5e>
 800838c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008390:	f1bc 0f19 	cmp.w	ip, #25
 8008394:	d804      	bhi.n	80083a0 <_strtoul_l.constprop.0+0xa8>
 8008396:	3c57      	subs	r4, #87	; 0x57
 8008398:	e7dd      	b.n	8008356 <_strtoul_l.constprop.0+0x5e>
 800839a:	f04f 37ff 	mov.w	r7, #4294967295
 800839e:	e7e6      	b.n	800836e <_strtoul_l.constprop.0+0x76>
 80083a0:	2f00      	cmp	r7, #0
 80083a2:	da07      	bge.n	80083b4 <_strtoul_l.constprop.0+0xbc>
 80083a4:	2322      	movs	r3, #34	; 0x22
 80083a6:	f8ce 3000 	str.w	r3, [lr]
 80083aa:	f04f 30ff 	mov.w	r0, #4294967295
 80083ae:	b932      	cbnz	r2, 80083be <_strtoul_l.constprop.0+0xc6>
 80083b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083b4:	b106      	cbz	r6, 80083b8 <_strtoul_l.constprop.0+0xc0>
 80083b6:	4240      	negs	r0, r0
 80083b8:	2a00      	cmp	r2, #0
 80083ba:	d0f9      	beq.n	80083b0 <_strtoul_l.constprop.0+0xb8>
 80083bc:	b107      	cbz	r7, 80083c0 <_strtoul_l.constprop.0+0xc8>
 80083be:	1e69      	subs	r1, r5, #1
 80083c0:	6011      	str	r1, [r2, #0]
 80083c2:	e7f5      	b.n	80083b0 <_strtoul_l.constprop.0+0xb8>
 80083c4:	2430      	movs	r4, #48	; 0x30
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1b5      	bne.n	8008336 <_strtoul_l.constprop.0+0x3e>
 80083ca:	2308      	movs	r3, #8
 80083cc:	e7b3      	b.n	8008336 <_strtoul_l.constprop.0+0x3e>
 80083ce:	2c30      	cmp	r4, #48	; 0x30
 80083d0:	d0a9      	beq.n	8008326 <_strtoul_l.constprop.0+0x2e>
 80083d2:	230a      	movs	r3, #10
 80083d4:	e7af      	b.n	8008336 <_strtoul_l.constprop.0+0x3e>
 80083d6:	bf00      	nop
 80083d8:	08009781 	.word	0x08009781

080083dc <_strtoul_r>:
 80083dc:	f7ff bf8c 	b.w	80082f8 <_strtoul_l.constprop.0>

080083e0 <__submore>:
 80083e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083e4:	460c      	mov	r4, r1
 80083e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80083e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083ec:	4299      	cmp	r1, r3
 80083ee:	d11d      	bne.n	800842c <__submore+0x4c>
 80083f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80083f4:	f7ff fa14 	bl	8007820 <_malloc_r>
 80083f8:	b918      	cbnz	r0, 8008402 <__submore+0x22>
 80083fa:	f04f 30ff 	mov.w	r0, #4294967295
 80083fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008406:	63a3      	str	r3, [r4, #56]	; 0x38
 8008408:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800840c:	6360      	str	r0, [r4, #52]	; 0x34
 800840e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008412:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008416:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800841a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800841e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008422:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008426:	6020      	str	r0, [r4, #0]
 8008428:	2000      	movs	r0, #0
 800842a:	e7e8      	b.n	80083fe <__submore+0x1e>
 800842c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800842e:	0077      	lsls	r7, r6, #1
 8008430:	463a      	mov	r2, r7
 8008432:	f000 fa2d 	bl	8008890 <_realloc_r>
 8008436:	4605      	mov	r5, r0
 8008438:	2800      	cmp	r0, #0
 800843a:	d0de      	beq.n	80083fa <__submore+0x1a>
 800843c:	eb00 0806 	add.w	r8, r0, r6
 8008440:	4601      	mov	r1, r0
 8008442:	4632      	mov	r2, r6
 8008444:	4640      	mov	r0, r8
 8008446:	f7fe fc99 	bl	8006d7c <memcpy>
 800844a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800844e:	f8c4 8000 	str.w	r8, [r4]
 8008452:	e7e9      	b.n	8008428 <__submore+0x48>

08008454 <__ascii_wctomb>:
 8008454:	b149      	cbz	r1, 800846a <__ascii_wctomb+0x16>
 8008456:	2aff      	cmp	r2, #255	; 0xff
 8008458:	bf85      	ittet	hi
 800845a:	238a      	movhi	r3, #138	; 0x8a
 800845c:	6003      	strhi	r3, [r0, #0]
 800845e:	700a      	strbls	r2, [r1, #0]
 8008460:	f04f 30ff 	movhi.w	r0, #4294967295
 8008464:	bf98      	it	ls
 8008466:	2001      	movls	r0, #1
 8008468:	4770      	bx	lr
 800846a:	4608      	mov	r0, r1
 800846c:	4770      	bx	lr
	...

08008470 <__assert_func>:
 8008470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008472:	4614      	mov	r4, r2
 8008474:	461a      	mov	r2, r3
 8008476:	4b09      	ldr	r3, [pc, #36]	; (800849c <__assert_func+0x2c>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4605      	mov	r5, r0
 800847c:	68d8      	ldr	r0, [r3, #12]
 800847e:	b14c      	cbz	r4, 8008494 <__assert_func+0x24>
 8008480:	4b07      	ldr	r3, [pc, #28]	; (80084a0 <__assert_func+0x30>)
 8008482:	9100      	str	r1, [sp, #0]
 8008484:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008488:	4906      	ldr	r1, [pc, #24]	; (80084a4 <__assert_func+0x34>)
 800848a:	462b      	mov	r3, r5
 800848c:	f000 f9a6 	bl	80087dc <fiprintf>
 8008490:	f000 fc46 	bl	8008d20 <abort>
 8008494:	4b04      	ldr	r3, [pc, #16]	; (80084a8 <__assert_func+0x38>)
 8008496:	461c      	mov	r4, r3
 8008498:	e7f3      	b.n	8008482 <__assert_func+0x12>
 800849a:	bf00      	nop
 800849c:	20000014 	.word	0x20000014
 80084a0:	08009b10 	.word	0x08009b10
 80084a4:	08009b1d 	.word	0x08009b1d
 80084a8:	08009b4b 	.word	0x08009b4b

080084ac <__sflush_r>:
 80084ac:	898a      	ldrh	r2, [r1, #12]
 80084ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084b2:	4605      	mov	r5, r0
 80084b4:	0710      	lsls	r0, r2, #28
 80084b6:	460c      	mov	r4, r1
 80084b8:	d458      	bmi.n	800856c <__sflush_r+0xc0>
 80084ba:	684b      	ldr	r3, [r1, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	dc05      	bgt.n	80084cc <__sflush_r+0x20>
 80084c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	dc02      	bgt.n	80084cc <__sflush_r+0x20>
 80084c6:	2000      	movs	r0, #0
 80084c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084ce:	2e00      	cmp	r6, #0
 80084d0:	d0f9      	beq.n	80084c6 <__sflush_r+0x1a>
 80084d2:	2300      	movs	r3, #0
 80084d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084d8:	682f      	ldr	r7, [r5, #0]
 80084da:	602b      	str	r3, [r5, #0]
 80084dc:	d032      	beq.n	8008544 <__sflush_r+0x98>
 80084de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084e0:	89a3      	ldrh	r3, [r4, #12]
 80084e2:	075a      	lsls	r2, r3, #29
 80084e4:	d505      	bpl.n	80084f2 <__sflush_r+0x46>
 80084e6:	6863      	ldr	r3, [r4, #4]
 80084e8:	1ac0      	subs	r0, r0, r3
 80084ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084ec:	b10b      	cbz	r3, 80084f2 <__sflush_r+0x46>
 80084ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084f0:	1ac0      	subs	r0, r0, r3
 80084f2:	2300      	movs	r3, #0
 80084f4:	4602      	mov	r2, r0
 80084f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084f8:	6a21      	ldr	r1, [r4, #32]
 80084fa:	4628      	mov	r0, r5
 80084fc:	47b0      	blx	r6
 80084fe:	1c43      	adds	r3, r0, #1
 8008500:	89a3      	ldrh	r3, [r4, #12]
 8008502:	d106      	bne.n	8008512 <__sflush_r+0x66>
 8008504:	6829      	ldr	r1, [r5, #0]
 8008506:	291d      	cmp	r1, #29
 8008508:	d82c      	bhi.n	8008564 <__sflush_r+0xb8>
 800850a:	4a2a      	ldr	r2, [pc, #168]	; (80085b4 <__sflush_r+0x108>)
 800850c:	40ca      	lsrs	r2, r1
 800850e:	07d6      	lsls	r6, r2, #31
 8008510:	d528      	bpl.n	8008564 <__sflush_r+0xb8>
 8008512:	2200      	movs	r2, #0
 8008514:	6062      	str	r2, [r4, #4]
 8008516:	04d9      	lsls	r1, r3, #19
 8008518:	6922      	ldr	r2, [r4, #16]
 800851a:	6022      	str	r2, [r4, #0]
 800851c:	d504      	bpl.n	8008528 <__sflush_r+0x7c>
 800851e:	1c42      	adds	r2, r0, #1
 8008520:	d101      	bne.n	8008526 <__sflush_r+0x7a>
 8008522:	682b      	ldr	r3, [r5, #0]
 8008524:	b903      	cbnz	r3, 8008528 <__sflush_r+0x7c>
 8008526:	6560      	str	r0, [r4, #84]	; 0x54
 8008528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800852a:	602f      	str	r7, [r5, #0]
 800852c:	2900      	cmp	r1, #0
 800852e:	d0ca      	beq.n	80084c6 <__sflush_r+0x1a>
 8008530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008534:	4299      	cmp	r1, r3
 8008536:	d002      	beq.n	800853e <__sflush_r+0x92>
 8008538:	4628      	mov	r0, r5
 800853a:	f7ff f905 	bl	8007748 <_free_r>
 800853e:	2000      	movs	r0, #0
 8008540:	6360      	str	r0, [r4, #52]	; 0x34
 8008542:	e7c1      	b.n	80084c8 <__sflush_r+0x1c>
 8008544:	6a21      	ldr	r1, [r4, #32]
 8008546:	2301      	movs	r3, #1
 8008548:	4628      	mov	r0, r5
 800854a:	47b0      	blx	r6
 800854c:	1c41      	adds	r1, r0, #1
 800854e:	d1c7      	bne.n	80084e0 <__sflush_r+0x34>
 8008550:	682b      	ldr	r3, [r5, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d0c4      	beq.n	80084e0 <__sflush_r+0x34>
 8008556:	2b1d      	cmp	r3, #29
 8008558:	d001      	beq.n	800855e <__sflush_r+0xb2>
 800855a:	2b16      	cmp	r3, #22
 800855c:	d101      	bne.n	8008562 <__sflush_r+0xb6>
 800855e:	602f      	str	r7, [r5, #0]
 8008560:	e7b1      	b.n	80084c6 <__sflush_r+0x1a>
 8008562:	89a3      	ldrh	r3, [r4, #12]
 8008564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008568:	81a3      	strh	r3, [r4, #12]
 800856a:	e7ad      	b.n	80084c8 <__sflush_r+0x1c>
 800856c:	690f      	ldr	r7, [r1, #16]
 800856e:	2f00      	cmp	r7, #0
 8008570:	d0a9      	beq.n	80084c6 <__sflush_r+0x1a>
 8008572:	0793      	lsls	r3, r2, #30
 8008574:	680e      	ldr	r6, [r1, #0]
 8008576:	bf08      	it	eq
 8008578:	694b      	ldreq	r3, [r1, #20]
 800857a:	600f      	str	r7, [r1, #0]
 800857c:	bf18      	it	ne
 800857e:	2300      	movne	r3, #0
 8008580:	eba6 0807 	sub.w	r8, r6, r7
 8008584:	608b      	str	r3, [r1, #8]
 8008586:	f1b8 0f00 	cmp.w	r8, #0
 800858a:	dd9c      	ble.n	80084c6 <__sflush_r+0x1a>
 800858c:	6a21      	ldr	r1, [r4, #32]
 800858e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008590:	4643      	mov	r3, r8
 8008592:	463a      	mov	r2, r7
 8008594:	4628      	mov	r0, r5
 8008596:	47b0      	blx	r6
 8008598:	2800      	cmp	r0, #0
 800859a:	dc06      	bgt.n	80085aa <__sflush_r+0xfe>
 800859c:	89a3      	ldrh	r3, [r4, #12]
 800859e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085a2:	81a3      	strh	r3, [r4, #12]
 80085a4:	f04f 30ff 	mov.w	r0, #4294967295
 80085a8:	e78e      	b.n	80084c8 <__sflush_r+0x1c>
 80085aa:	4407      	add	r7, r0
 80085ac:	eba8 0800 	sub.w	r8, r8, r0
 80085b0:	e7e9      	b.n	8008586 <__sflush_r+0xda>
 80085b2:	bf00      	nop
 80085b4:	20400001 	.word	0x20400001

080085b8 <_fflush_r>:
 80085b8:	b538      	push	{r3, r4, r5, lr}
 80085ba:	690b      	ldr	r3, [r1, #16]
 80085bc:	4605      	mov	r5, r0
 80085be:	460c      	mov	r4, r1
 80085c0:	b913      	cbnz	r3, 80085c8 <_fflush_r+0x10>
 80085c2:	2500      	movs	r5, #0
 80085c4:	4628      	mov	r0, r5
 80085c6:	bd38      	pop	{r3, r4, r5, pc}
 80085c8:	b118      	cbz	r0, 80085d2 <_fflush_r+0x1a>
 80085ca:	6983      	ldr	r3, [r0, #24]
 80085cc:	b90b      	cbnz	r3, 80085d2 <_fflush_r+0x1a>
 80085ce:	f000 f887 	bl	80086e0 <__sinit>
 80085d2:	4b14      	ldr	r3, [pc, #80]	; (8008624 <_fflush_r+0x6c>)
 80085d4:	429c      	cmp	r4, r3
 80085d6:	d11b      	bne.n	8008610 <_fflush_r+0x58>
 80085d8:	686c      	ldr	r4, [r5, #4]
 80085da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0ef      	beq.n	80085c2 <_fflush_r+0xa>
 80085e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80085e4:	07d0      	lsls	r0, r2, #31
 80085e6:	d404      	bmi.n	80085f2 <_fflush_r+0x3a>
 80085e8:	0599      	lsls	r1, r3, #22
 80085ea:	d402      	bmi.n	80085f2 <_fflush_r+0x3a>
 80085ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085ee:	f000 f927 	bl	8008840 <__retarget_lock_acquire_recursive>
 80085f2:	4628      	mov	r0, r5
 80085f4:	4621      	mov	r1, r4
 80085f6:	f7ff ff59 	bl	80084ac <__sflush_r>
 80085fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085fc:	07da      	lsls	r2, r3, #31
 80085fe:	4605      	mov	r5, r0
 8008600:	d4e0      	bmi.n	80085c4 <_fflush_r+0xc>
 8008602:	89a3      	ldrh	r3, [r4, #12]
 8008604:	059b      	lsls	r3, r3, #22
 8008606:	d4dd      	bmi.n	80085c4 <_fflush_r+0xc>
 8008608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800860a:	f000 f91a 	bl	8008842 <__retarget_lock_release_recursive>
 800860e:	e7d9      	b.n	80085c4 <_fflush_r+0xc>
 8008610:	4b05      	ldr	r3, [pc, #20]	; (8008628 <_fflush_r+0x70>)
 8008612:	429c      	cmp	r4, r3
 8008614:	d101      	bne.n	800861a <_fflush_r+0x62>
 8008616:	68ac      	ldr	r4, [r5, #8]
 8008618:	e7df      	b.n	80085da <_fflush_r+0x22>
 800861a:	4b04      	ldr	r3, [pc, #16]	; (800862c <_fflush_r+0x74>)
 800861c:	429c      	cmp	r4, r3
 800861e:	bf08      	it	eq
 8008620:	68ec      	ldreq	r4, [r5, #12]
 8008622:	e7da      	b.n	80085da <_fflush_r+0x22>
 8008624:	08009b6c 	.word	0x08009b6c
 8008628:	08009b8c 	.word	0x08009b8c
 800862c:	08009b4c 	.word	0x08009b4c

08008630 <std>:
 8008630:	2300      	movs	r3, #0
 8008632:	b510      	push	{r4, lr}
 8008634:	4604      	mov	r4, r0
 8008636:	e9c0 3300 	strd	r3, r3, [r0]
 800863a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800863e:	6083      	str	r3, [r0, #8]
 8008640:	8181      	strh	r1, [r0, #12]
 8008642:	6643      	str	r3, [r0, #100]	; 0x64
 8008644:	81c2      	strh	r2, [r0, #14]
 8008646:	6183      	str	r3, [r0, #24]
 8008648:	4619      	mov	r1, r3
 800864a:	2208      	movs	r2, #8
 800864c:	305c      	adds	r0, #92	; 0x5c
 800864e:	f7fb fb7b 	bl	8003d48 <memset>
 8008652:	4b05      	ldr	r3, [pc, #20]	; (8008668 <std+0x38>)
 8008654:	6263      	str	r3, [r4, #36]	; 0x24
 8008656:	4b05      	ldr	r3, [pc, #20]	; (800866c <std+0x3c>)
 8008658:	62a3      	str	r3, [r4, #40]	; 0x28
 800865a:	4b05      	ldr	r3, [pc, #20]	; (8008670 <std+0x40>)
 800865c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800865e:	4b05      	ldr	r3, [pc, #20]	; (8008674 <std+0x44>)
 8008660:	6224      	str	r4, [r4, #32]
 8008662:	6323      	str	r3, [r4, #48]	; 0x30
 8008664:	bd10      	pop	{r4, pc}
 8008666:	bf00      	nop
 8008668:	08004af1 	.word	0x08004af1
 800866c:	08004b17 	.word	0x08004b17
 8008670:	08004b4f 	.word	0x08004b4f
 8008674:	08004b73 	.word	0x08004b73

08008678 <_cleanup_r>:
 8008678:	4901      	ldr	r1, [pc, #4]	; (8008680 <_cleanup_r+0x8>)
 800867a:	f000 b8c1 	b.w	8008800 <_fwalk_reent>
 800867e:	bf00      	nop
 8008680:	080085b9 	.word	0x080085b9

08008684 <__sfmoreglue>:
 8008684:	b570      	push	{r4, r5, r6, lr}
 8008686:	2268      	movs	r2, #104	; 0x68
 8008688:	1e4d      	subs	r5, r1, #1
 800868a:	4355      	muls	r5, r2
 800868c:	460e      	mov	r6, r1
 800868e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008692:	f7ff f8c5 	bl	8007820 <_malloc_r>
 8008696:	4604      	mov	r4, r0
 8008698:	b140      	cbz	r0, 80086ac <__sfmoreglue+0x28>
 800869a:	2100      	movs	r1, #0
 800869c:	e9c0 1600 	strd	r1, r6, [r0]
 80086a0:	300c      	adds	r0, #12
 80086a2:	60a0      	str	r0, [r4, #8]
 80086a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80086a8:	f7fb fb4e 	bl	8003d48 <memset>
 80086ac:	4620      	mov	r0, r4
 80086ae:	bd70      	pop	{r4, r5, r6, pc}

080086b0 <__sfp_lock_acquire>:
 80086b0:	4801      	ldr	r0, [pc, #4]	; (80086b8 <__sfp_lock_acquire+0x8>)
 80086b2:	f000 b8c5 	b.w	8008840 <__retarget_lock_acquire_recursive>
 80086b6:	bf00      	nop
 80086b8:	20009691 	.word	0x20009691

080086bc <__sfp_lock_release>:
 80086bc:	4801      	ldr	r0, [pc, #4]	; (80086c4 <__sfp_lock_release+0x8>)
 80086be:	f000 b8c0 	b.w	8008842 <__retarget_lock_release_recursive>
 80086c2:	bf00      	nop
 80086c4:	20009691 	.word	0x20009691

080086c8 <__sinit_lock_acquire>:
 80086c8:	4801      	ldr	r0, [pc, #4]	; (80086d0 <__sinit_lock_acquire+0x8>)
 80086ca:	f000 b8b9 	b.w	8008840 <__retarget_lock_acquire_recursive>
 80086ce:	bf00      	nop
 80086d0:	20009692 	.word	0x20009692

080086d4 <__sinit_lock_release>:
 80086d4:	4801      	ldr	r0, [pc, #4]	; (80086dc <__sinit_lock_release+0x8>)
 80086d6:	f000 b8b4 	b.w	8008842 <__retarget_lock_release_recursive>
 80086da:	bf00      	nop
 80086dc:	20009692 	.word	0x20009692

080086e0 <__sinit>:
 80086e0:	b510      	push	{r4, lr}
 80086e2:	4604      	mov	r4, r0
 80086e4:	f7ff fff0 	bl	80086c8 <__sinit_lock_acquire>
 80086e8:	69a3      	ldr	r3, [r4, #24]
 80086ea:	b11b      	cbz	r3, 80086f4 <__sinit+0x14>
 80086ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086f0:	f7ff bff0 	b.w	80086d4 <__sinit_lock_release>
 80086f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80086f8:	6523      	str	r3, [r4, #80]	; 0x50
 80086fa:	4b13      	ldr	r3, [pc, #76]	; (8008748 <__sinit+0x68>)
 80086fc:	4a13      	ldr	r2, [pc, #76]	; (800874c <__sinit+0x6c>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	62a2      	str	r2, [r4, #40]	; 0x28
 8008702:	42a3      	cmp	r3, r4
 8008704:	bf04      	itt	eq
 8008706:	2301      	moveq	r3, #1
 8008708:	61a3      	streq	r3, [r4, #24]
 800870a:	4620      	mov	r0, r4
 800870c:	f000 f820 	bl	8008750 <__sfp>
 8008710:	6060      	str	r0, [r4, #4]
 8008712:	4620      	mov	r0, r4
 8008714:	f000 f81c 	bl	8008750 <__sfp>
 8008718:	60a0      	str	r0, [r4, #8]
 800871a:	4620      	mov	r0, r4
 800871c:	f000 f818 	bl	8008750 <__sfp>
 8008720:	2200      	movs	r2, #0
 8008722:	60e0      	str	r0, [r4, #12]
 8008724:	2104      	movs	r1, #4
 8008726:	6860      	ldr	r0, [r4, #4]
 8008728:	f7ff ff82 	bl	8008630 <std>
 800872c:	68a0      	ldr	r0, [r4, #8]
 800872e:	2201      	movs	r2, #1
 8008730:	2109      	movs	r1, #9
 8008732:	f7ff ff7d 	bl	8008630 <std>
 8008736:	68e0      	ldr	r0, [r4, #12]
 8008738:	2202      	movs	r2, #2
 800873a:	2112      	movs	r1, #18
 800873c:	f7ff ff78 	bl	8008630 <std>
 8008740:	2301      	movs	r3, #1
 8008742:	61a3      	str	r3, [r4, #24]
 8008744:	e7d2      	b.n	80086ec <__sinit+0xc>
 8008746:	bf00      	nop
 8008748:	080096f0 	.word	0x080096f0
 800874c:	08008679 	.word	0x08008679

08008750 <__sfp>:
 8008750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008752:	4607      	mov	r7, r0
 8008754:	f7ff ffac 	bl	80086b0 <__sfp_lock_acquire>
 8008758:	4b1e      	ldr	r3, [pc, #120]	; (80087d4 <__sfp+0x84>)
 800875a:	681e      	ldr	r6, [r3, #0]
 800875c:	69b3      	ldr	r3, [r6, #24]
 800875e:	b913      	cbnz	r3, 8008766 <__sfp+0x16>
 8008760:	4630      	mov	r0, r6
 8008762:	f7ff ffbd 	bl	80086e0 <__sinit>
 8008766:	3648      	adds	r6, #72	; 0x48
 8008768:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800876c:	3b01      	subs	r3, #1
 800876e:	d503      	bpl.n	8008778 <__sfp+0x28>
 8008770:	6833      	ldr	r3, [r6, #0]
 8008772:	b30b      	cbz	r3, 80087b8 <__sfp+0x68>
 8008774:	6836      	ldr	r6, [r6, #0]
 8008776:	e7f7      	b.n	8008768 <__sfp+0x18>
 8008778:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800877c:	b9d5      	cbnz	r5, 80087b4 <__sfp+0x64>
 800877e:	4b16      	ldr	r3, [pc, #88]	; (80087d8 <__sfp+0x88>)
 8008780:	60e3      	str	r3, [r4, #12]
 8008782:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008786:	6665      	str	r5, [r4, #100]	; 0x64
 8008788:	f000 f859 	bl	800883e <__retarget_lock_init_recursive>
 800878c:	f7ff ff96 	bl	80086bc <__sfp_lock_release>
 8008790:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008794:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008798:	6025      	str	r5, [r4, #0]
 800879a:	61a5      	str	r5, [r4, #24]
 800879c:	2208      	movs	r2, #8
 800879e:	4629      	mov	r1, r5
 80087a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80087a4:	f7fb fad0 	bl	8003d48 <memset>
 80087a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80087ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80087b0:	4620      	mov	r0, r4
 80087b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087b4:	3468      	adds	r4, #104	; 0x68
 80087b6:	e7d9      	b.n	800876c <__sfp+0x1c>
 80087b8:	2104      	movs	r1, #4
 80087ba:	4638      	mov	r0, r7
 80087bc:	f7ff ff62 	bl	8008684 <__sfmoreglue>
 80087c0:	4604      	mov	r4, r0
 80087c2:	6030      	str	r0, [r6, #0]
 80087c4:	2800      	cmp	r0, #0
 80087c6:	d1d5      	bne.n	8008774 <__sfp+0x24>
 80087c8:	f7ff ff78 	bl	80086bc <__sfp_lock_release>
 80087cc:	230c      	movs	r3, #12
 80087ce:	603b      	str	r3, [r7, #0]
 80087d0:	e7ee      	b.n	80087b0 <__sfp+0x60>
 80087d2:	bf00      	nop
 80087d4:	080096f0 	.word	0x080096f0
 80087d8:	ffff0001 	.word	0xffff0001

080087dc <fiprintf>:
 80087dc:	b40e      	push	{r1, r2, r3}
 80087de:	b503      	push	{r0, r1, lr}
 80087e0:	4601      	mov	r1, r0
 80087e2:	ab03      	add	r3, sp, #12
 80087e4:	4805      	ldr	r0, [pc, #20]	; (80087fc <fiprintf+0x20>)
 80087e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80087ea:	6800      	ldr	r0, [r0, #0]
 80087ec:	9301      	str	r3, [sp, #4]
 80087ee:	f000 f8a7 	bl	8008940 <_vfiprintf_r>
 80087f2:	b002      	add	sp, #8
 80087f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80087f8:	b003      	add	sp, #12
 80087fa:	4770      	bx	lr
 80087fc:	20000014 	.word	0x20000014

08008800 <_fwalk_reent>:
 8008800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008804:	4606      	mov	r6, r0
 8008806:	4688      	mov	r8, r1
 8008808:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800880c:	2700      	movs	r7, #0
 800880e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008812:	f1b9 0901 	subs.w	r9, r9, #1
 8008816:	d505      	bpl.n	8008824 <_fwalk_reent+0x24>
 8008818:	6824      	ldr	r4, [r4, #0]
 800881a:	2c00      	cmp	r4, #0
 800881c:	d1f7      	bne.n	800880e <_fwalk_reent+0xe>
 800881e:	4638      	mov	r0, r7
 8008820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008824:	89ab      	ldrh	r3, [r5, #12]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d907      	bls.n	800883a <_fwalk_reent+0x3a>
 800882a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800882e:	3301      	adds	r3, #1
 8008830:	d003      	beq.n	800883a <_fwalk_reent+0x3a>
 8008832:	4629      	mov	r1, r5
 8008834:	4630      	mov	r0, r6
 8008836:	47c0      	blx	r8
 8008838:	4307      	orrs	r7, r0
 800883a:	3568      	adds	r5, #104	; 0x68
 800883c:	e7e9      	b.n	8008812 <_fwalk_reent+0x12>

0800883e <__retarget_lock_init_recursive>:
 800883e:	4770      	bx	lr

08008840 <__retarget_lock_acquire_recursive>:
 8008840:	4770      	bx	lr

08008842 <__retarget_lock_release_recursive>:
 8008842:	4770      	bx	lr

08008844 <memmove>:
 8008844:	4288      	cmp	r0, r1
 8008846:	b510      	push	{r4, lr}
 8008848:	eb01 0402 	add.w	r4, r1, r2
 800884c:	d902      	bls.n	8008854 <memmove+0x10>
 800884e:	4284      	cmp	r4, r0
 8008850:	4623      	mov	r3, r4
 8008852:	d807      	bhi.n	8008864 <memmove+0x20>
 8008854:	1e43      	subs	r3, r0, #1
 8008856:	42a1      	cmp	r1, r4
 8008858:	d008      	beq.n	800886c <memmove+0x28>
 800885a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800885e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008862:	e7f8      	b.n	8008856 <memmove+0x12>
 8008864:	4402      	add	r2, r0
 8008866:	4601      	mov	r1, r0
 8008868:	428a      	cmp	r2, r1
 800886a:	d100      	bne.n	800886e <memmove+0x2a>
 800886c:	bd10      	pop	{r4, pc}
 800886e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008872:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008876:	e7f7      	b.n	8008868 <memmove+0x24>

08008878 <__malloc_lock>:
 8008878:	4801      	ldr	r0, [pc, #4]	; (8008880 <__malloc_lock+0x8>)
 800887a:	f7ff bfe1 	b.w	8008840 <__retarget_lock_acquire_recursive>
 800887e:	bf00      	nop
 8008880:	20009690 	.word	0x20009690

08008884 <__malloc_unlock>:
 8008884:	4801      	ldr	r0, [pc, #4]	; (800888c <__malloc_unlock+0x8>)
 8008886:	f7ff bfdc 	b.w	8008842 <__retarget_lock_release_recursive>
 800888a:	bf00      	nop
 800888c:	20009690 	.word	0x20009690

08008890 <_realloc_r>:
 8008890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008894:	4680      	mov	r8, r0
 8008896:	4614      	mov	r4, r2
 8008898:	460e      	mov	r6, r1
 800889a:	b921      	cbnz	r1, 80088a6 <_realloc_r+0x16>
 800889c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088a0:	4611      	mov	r1, r2
 80088a2:	f7fe bfbd 	b.w	8007820 <_malloc_r>
 80088a6:	b92a      	cbnz	r2, 80088b4 <_realloc_r+0x24>
 80088a8:	f7fe ff4e 	bl	8007748 <_free_r>
 80088ac:	4625      	mov	r5, r4
 80088ae:	4628      	mov	r0, r5
 80088b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088b4:	f000 faa0 	bl	8008df8 <_malloc_usable_size_r>
 80088b8:	4284      	cmp	r4, r0
 80088ba:	4607      	mov	r7, r0
 80088bc:	d802      	bhi.n	80088c4 <_realloc_r+0x34>
 80088be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088c2:	d812      	bhi.n	80088ea <_realloc_r+0x5a>
 80088c4:	4621      	mov	r1, r4
 80088c6:	4640      	mov	r0, r8
 80088c8:	f7fe ffaa 	bl	8007820 <_malloc_r>
 80088cc:	4605      	mov	r5, r0
 80088ce:	2800      	cmp	r0, #0
 80088d0:	d0ed      	beq.n	80088ae <_realloc_r+0x1e>
 80088d2:	42bc      	cmp	r4, r7
 80088d4:	4622      	mov	r2, r4
 80088d6:	4631      	mov	r1, r6
 80088d8:	bf28      	it	cs
 80088da:	463a      	movcs	r2, r7
 80088dc:	f7fe fa4e 	bl	8006d7c <memcpy>
 80088e0:	4631      	mov	r1, r6
 80088e2:	4640      	mov	r0, r8
 80088e4:	f7fe ff30 	bl	8007748 <_free_r>
 80088e8:	e7e1      	b.n	80088ae <_realloc_r+0x1e>
 80088ea:	4635      	mov	r5, r6
 80088ec:	e7df      	b.n	80088ae <_realloc_r+0x1e>

080088ee <__sfputc_r>:
 80088ee:	6893      	ldr	r3, [r2, #8]
 80088f0:	3b01      	subs	r3, #1
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	b410      	push	{r4}
 80088f6:	6093      	str	r3, [r2, #8]
 80088f8:	da08      	bge.n	800890c <__sfputc_r+0x1e>
 80088fa:	6994      	ldr	r4, [r2, #24]
 80088fc:	42a3      	cmp	r3, r4
 80088fe:	db01      	blt.n	8008904 <__sfputc_r+0x16>
 8008900:	290a      	cmp	r1, #10
 8008902:	d103      	bne.n	800890c <__sfputc_r+0x1e>
 8008904:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008908:	f000 b94a 	b.w	8008ba0 <__swbuf_r>
 800890c:	6813      	ldr	r3, [r2, #0]
 800890e:	1c58      	adds	r0, r3, #1
 8008910:	6010      	str	r0, [r2, #0]
 8008912:	7019      	strb	r1, [r3, #0]
 8008914:	4608      	mov	r0, r1
 8008916:	f85d 4b04 	ldr.w	r4, [sp], #4
 800891a:	4770      	bx	lr

0800891c <__sfputs_r>:
 800891c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891e:	4606      	mov	r6, r0
 8008920:	460f      	mov	r7, r1
 8008922:	4614      	mov	r4, r2
 8008924:	18d5      	adds	r5, r2, r3
 8008926:	42ac      	cmp	r4, r5
 8008928:	d101      	bne.n	800892e <__sfputs_r+0x12>
 800892a:	2000      	movs	r0, #0
 800892c:	e007      	b.n	800893e <__sfputs_r+0x22>
 800892e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008932:	463a      	mov	r2, r7
 8008934:	4630      	mov	r0, r6
 8008936:	f7ff ffda 	bl	80088ee <__sfputc_r>
 800893a:	1c43      	adds	r3, r0, #1
 800893c:	d1f3      	bne.n	8008926 <__sfputs_r+0xa>
 800893e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008940 <_vfiprintf_r>:
 8008940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008944:	460d      	mov	r5, r1
 8008946:	b09d      	sub	sp, #116	; 0x74
 8008948:	4614      	mov	r4, r2
 800894a:	4698      	mov	r8, r3
 800894c:	4606      	mov	r6, r0
 800894e:	b118      	cbz	r0, 8008958 <_vfiprintf_r+0x18>
 8008950:	6983      	ldr	r3, [r0, #24]
 8008952:	b90b      	cbnz	r3, 8008958 <_vfiprintf_r+0x18>
 8008954:	f7ff fec4 	bl	80086e0 <__sinit>
 8008958:	4b89      	ldr	r3, [pc, #548]	; (8008b80 <_vfiprintf_r+0x240>)
 800895a:	429d      	cmp	r5, r3
 800895c:	d11b      	bne.n	8008996 <_vfiprintf_r+0x56>
 800895e:	6875      	ldr	r5, [r6, #4]
 8008960:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008962:	07d9      	lsls	r1, r3, #31
 8008964:	d405      	bmi.n	8008972 <_vfiprintf_r+0x32>
 8008966:	89ab      	ldrh	r3, [r5, #12]
 8008968:	059a      	lsls	r2, r3, #22
 800896a:	d402      	bmi.n	8008972 <_vfiprintf_r+0x32>
 800896c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800896e:	f7ff ff67 	bl	8008840 <__retarget_lock_acquire_recursive>
 8008972:	89ab      	ldrh	r3, [r5, #12]
 8008974:	071b      	lsls	r3, r3, #28
 8008976:	d501      	bpl.n	800897c <_vfiprintf_r+0x3c>
 8008978:	692b      	ldr	r3, [r5, #16]
 800897a:	b9eb      	cbnz	r3, 80089b8 <_vfiprintf_r+0x78>
 800897c:	4629      	mov	r1, r5
 800897e:	4630      	mov	r0, r6
 8008980:	f000 f960 	bl	8008c44 <__swsetup_r>
 8008984:	b1c0      	cbz	r0, 80089b8 <_vfiprintf_r+0x78>
 8008986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008988:	07dc      	lsls	r4, r3, #31
 800898a:	d50e      	bpl.n	80089aa <_vfiprintf_r+0x6a>
 800898c:	f04f 30ff 	mov.w	r0, #4294967295
 8008990:	b01d      	add	sp, #116	; 0x74
 8008992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008996:	4b7b      	ldr	r3, [pc, #492]	; (8008b84 <_vfiprintf_r+0x244>)
 8008998:	429d      	cmp	r5, r3
 800899a:	d101      	bne.n	80089a0 <_vfiprintf_r+0x60>
 800899c:	68b5      	ldr	r5, [r6, #8]
 800899e:	e7df      	b.n	8008960 <_vfiprintf_r+0x20>
 80089a0:	4b79      	ldr	r3, [pc, #484]	; (8008b88 <_vfiprintf_r+0x248>)
 80089a2:	429d      	cmp	r5, r3
 80089a4:	bf08      	it	eq
 80089a6:	68f5      	ldreq	r5, [r6, #12]
 80089a8:	e7da      	b.n	8008960 <_vfiprintf_r+0x20>
 80089aa:	89ab      	ldrh	r3, [r5, #12]
 80089ac:	0598      	lsls	r0, r3, #22
 80089ae:	d4ed      	bmi.n	800898c <_vfiprintf_r+0x4c>
 80089b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089b2:	f7ff ff46 	bl	8008842 <__retarget_lock_release_recursive>
 80089b6:	e7e9      	b.n	800898c <_vfiprintf_r+0x4c>
 80089b8:	2300      	movs	r3, #0
 80089ba:	9309      	str	r3, [sp, #36]	; 0x24
 80089bc:	2320      	movs	r3, #32
 80089be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80089c6:	2330      	movs	r3, #48	; 0x30
 80089c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008b8c <_vfiprintf_r+0x24c>
 80089cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089d0:	f04f 0901 	mov.w	r9, #1
 80089d4:	4623      	mov	r3, r4
 80089d6:	469a      	mov	sl, r3
 80089d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089dc:	b10a      	cbz	r2, 80089e2 <_vfiprintf_r+0xa2>
 80089de:	2a25      	cmp	r2, #37	; 0x25
 80089e0:	d1f9      	bne.n	80089d6 <_vfiprintf_r+0x96>
 80089e2:	ebba 0b04 	subs.w	fp, sl, r4
 80089e6:	d00b      	beq.n	8008a00 <_vfiprintf_r+0xc0>
 80089e8:	465b      	mov	r3, fp
 80089ea:	4622      	mov	r2, r4
 80089ec:	4629      	mov	r1, r5
 80089ee:	4630      	mov	r0, r6
 80089f0:	f7ff ff94 	bl	800891c <__sfputs_r>
 80089f4:	3001      	adds	r0, #1
 80089f6:	f000 80aa 	beq.w	8008b4e <_vfiprintf_r+0x20e>
 80089fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089fc:	445a      	add	r2, fp
 80089fe:	9209      	str	r2, [sp, #36]	; 0x24
 8008a00:	f89a 3000 	ldrb.w	r3, [sl]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 80a2 	beq.w	8008b4e <_vfiprintf_r+0x20e>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a14:	f10a 0a01 	add.w	sl, sl, #1
 8008a18:	9304      	str	r3, [sp, #16]
 8008a1a:	9307      	str	r3, [sp, #28]
 8008a1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a20:	931a      	str	r3, [sp, #104]	; 0x68
 8008a22:	4654      	mov	r4, sl
 8008a24:	2205      	movs	r2, #5
 8008a26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a2a:	4858      	ldr	r0, [pc, #352]	; (8008b8c <_vfiprintf_r+0x24c>)
 8008a2c:	f7f7 fbf0 	bl	8000210 <memchr>
 8008a30:	9a04      	ldr	r2, [sp, #16]
 8008a32:	b9d8      	cbnz	r0, 8008a6c <_vfiprintf_r+0x12c>
 8008a34:	06d1      	lsls	r1, r2, #27
 8008a36:	bf44      	itt	mi
 8008a38:	2320      	movmi	r3, #32
 8008a3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a3e:	0713      	lsls	r3, r2, #28
 8008a40:	bf44      	itt	mi
 8008a42:	232b      	movmi	r3, #43	; 0x2b
 8008a44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a48:	f89a 3000 	ldrb.w	r3, [sl]
 8008a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a4e:	d015      	beq.n	8008a7c <_vfiprintf_r+0x13c>
 8008a50:	9a07      	ldr	r2, [sp, #28]
 8008a52:	4654      	mov	r4, sl
 8008a54:	2000      	movs	r0, #0
 8008a56:	f04f 0c0a 	mov.w	ip, #10
 8008a5a:	4621      	mov	r1, r4
 8008a5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a60:	3b30      	subs	r3, #48	; 0x30
 8008a62:	2b09      	cmp	r3, #9
 8008a64:	d94e      	bls.n	8008b04 <_vfiprintf_r+0x1c4>
 8008a66:	b1b0      	cbz	r0, 8008a96 <_vfiprintf_r+0x156>
 8008a68:	9207      	str	r2, [sp, #28]
 8008a6a:	e014      	b.n	8008a96 <_vfiprintf_r+0x156>
 8008a6c:	eba0 0308 	sub.w	r3, r0, r8
 8008a70:	fa09 f303 	lsl.w	r3, r9, r3
 8008a74:	4313      	orrs	r3, r2
 8008a76:	9304      	str	r3, [sp, #16]
 8008a78:	46a2      	mov	sl, r4
 8008a7a:	e7d2      	b.n	8008a22 <_vfiprintf_r+0xe2>
 8008a7c:	9b03      	ldr	r3, [sp, #12]
 8008a7e:	1d19      	adds	r1, r3, #4
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	9103      	str	r1, [sp, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	bfbb      	ittet	lt
 8008a88:	425b      	neglt	r3, r3
 8008a8a:	f042 0202 	orrlt.w	r2, r2, #2
 8008a8e:	9307      	strge	r3, [sp, #28]
 8008a90:	9307      	strlt	r3, [sp, #28]
 8008a92:	bfb8      	it	lt
 8008a94:	9204      	strlt	r2, [sp, #16]
 8008a96:	7823      	ldrb	r3, [r4, #0]
 8008a98:	2b2e      	cmp	r3, #46	; 0x2e
 8008a9a:	d10c      	bne.n	8008ab6 <_vfiprintf_r+0x176>
 8008a9c:	7863      	ldrb	r3, [r4, #1]
 8008a9e:	2b2a      	cmp	r3, #42	; 0x2a
 8008aa0:	d135      	bne.n	8008b0e <_vfiprintf_r+0x1ce>
 8008aa2:	9b03      	ldr	r3, [sp, #12]
 8008aa4:	1d1a      	adds	r2, r3, #4
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	9203      	str	r2, [sp, #12]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	bfb8      	it	lt
 8008aae:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ab2:	3402      	adds	r4, #2
 8008ab4:	9305      	str	r3, [sp, #20]
 8008ab6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008b9c <_vfiprintf_r+0x25c>
 8008aba:	7821      	ldrb	r1, [r4, #0]
 8008abc:	2203      	movs	r2, #3
 8008abe:	4650      	mov	r0, sl
 8008ac0:	f7f7 fba6 	bl	8000210 <memchr>
 8008ac4:	b140      	cbz	r0, 8008ad8 <_vfiprintf_r+0x198>
 8008ac6:	2340      	movs	r3, #64	; 0x40
 8008ac8:	eba0 000a 	sub.w	r0, r0, sl
 8008acc:	fa03 f000 	lsl.w	r0, r3, r0
 8008ad0:	9b04      	ldr	r3, [sp, #16]
 8008ad2:	4303      	orrs	r3, r0
 8008ad4:	3401      	adds	r4, #1
 8008ad6:	9304      	str	r3, [sp, #16]
 8008ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008adc:	482c      	ldr	r0, [pc, #176]	; (8008b90 <_vfiprintf_r+0x250>)
 8008ade:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ae2:	2206      	movs	r2, #6
 8008ae4:	f7f7 fb94 	bl	8000210 <memchr>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	d03f      	beq.n	8008b6c <_vfiprintf_r+0x22c>
 8008aec:	4b29      	ldr	r3, [pc, #164]	; (8008b94 <_vfiprintf_r+0x254>)
 8008aee:	bb1b      	cbnz	r3, 8008b38 <_vfiprintf_r+0x1f8>
 8008af0:	9b03      	ldr	r3, [sp, #12]
 8008af2:	3307      	adds	r3, #7
 8008af4:	f023 0307 	bic.w	r3, r3, #7
 8008af8:	3308      	adds	r3, #8
 8008afa:	9303      	str	r3, [sp, #12]
 8008afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008afe:	443b      	add	r3, r7
 8008b00:	9309      	str	r3, [sp, #36]	; 0x24
 8008b02:	e767      	b.n	80089d4 <_vfiprintf_r+0x94>
 8008b04:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b08:	460c      	mov	r4, r1
 8008b0a:	2001      	movs	r0, #1
 8008b0c:	e7a5      	b.n	8008a5a <_vfiprintf_r+0x11a>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	3401      	adds	r4, #1
 8008b12:	9305      	str	r3, [sp, #20]
 8008b14:	4619      	mov	r1, r3
 8008b16:	f04f 0c0a 	mov.w	ip, #10
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b20:	3a30      	subs	r2, #48	; 0x30
 8008b22:	2a09      	cmp	r2, #9
 8008b24:	d903      	bls.n	8008b2e <_vfiprintf_r+0x1ee>
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d0c5      	beq.n	8008ab6 <_vfiprintf_r+0x176>
 8008b2a:	9105      	str	r1, [sp, #20]
 8008b2c:	e7c3      	b.n	8008ab6 <_vfiprintf_r+0x176>
 8008b2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b32:	4604      	mov	r4, r0
 8008b34:	2301      	movs	r3, #1
 8008b36:	e7f0      	b.n	8008b1a <_vfiprintf_r+0x1da>
 8008b38:	ab03      	add	r3, sp, #12
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	462a      	mov	r2, r5
 8008b3e:	4b16      	ldr	r3, [pc, #88]	; (8008b98 <_vfiprintf_r+0x258>)
 8008b40:	a904      	add	r1, sp, #16
 8008b42:	4630      	mov	r0, r6
 8008b44:	f7fb f9a8 	bl	8003e98 <_printf_float>
 8008b48:	4607      	mov	r7, r0
 8008b4a:	1c78      	adds	r0, r7, #1
 8008b4c:	d1d6      	bne.n	8008afc <_vfiprintf_r+0x1bc>
 8008b4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b50:	07d9      	lsls	r1, r3, #31
 8008b52:	d405      	bmi.n	8008b60 <_vfiprintf_r+0x220>
 8008b54:	89ab      	ldrh	r3, [r5, #12]
 8008b56:	059a      	lsls	r2, r3, #22
 8008b58:	d402      	bmi.n	8008b60 <_vfiprintf_r+0x220>
 8008b5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b5c:	f7ff fe71 	bl	8008842 <__retarget_lock_release_recursive>
 8008b60:	89ab      	ldrh	r3, [r5, #12]
 8008b62:	065b      	lsls	r3, r3, #25
 8008b64:	f53f af12 	bmi.w	800898c <_vfiprintf_r+0x4c>
 8008b68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b6a:	e711      	b.n	8008990 <_vfiprintf_r+0x50>
 8008b6c:	ab03      	add	r3, sp, #12
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	462a      	mov	r2, r5
 8008b72:	4b09      	ldr	r3, [pc, #36]	; (8008b98 <_vfiprintf_r+0x258>)
 8008b74:	a904      	add	r1, sp, #16
 8008b76:	4630      	mov	r0, r6
 8008b78:	f7fb fc32 	bl	80043e0 <_printf_i>
 8008b7c:	e7e4      	b.n	8008b48 <_vfiprintf_r+0x208>
 8008b7e:	bf00      	nop
 8008b80:	08009b6c 	.word	0x08009b6c
 8008b84:	08009b8c 	.word	0x08009b8c
 8008b88:	08009b4c 	.word	0x08009b4c
 8008b8c:	08009ae4 	.word	0x08009ae4
 8008b90:	08009aee 	.word	0x08009aee
 8008b94:	08003e99 	.word	0x08003e99
 8008b98:	0800891d 	.word	0x0800891d
 8008b9c:	08009aea 	.word	0x08009aea

08008ba0 <__swbuf_r>:
 8008ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba2:	460e      	mov	r6, r1
 8008ba4:	4614      	mov	r4, r2
 8008ba6:	4605      	mov	r5, r0
 8008ba8:	b118      	cbz	r0, 8008bb2 <__swbuf_r+0x12>
 8008baa:	6983      	ldr	r3, [r0, #24]
 8008bac:	b90b      	cbnz	r3, 8008bb2 <__swbuf_r+0x12>
 8008bae:	f7ff fd97 	bl	80086e0 <__sinit>
 8008bb2:	4b21      	ldr	r3, [pc, #132]	; (8008c38 <__swbuf_r+0x98>)
 8008bb4:	429c      	cmp	r4, r3
 8008bb6:	d12b      	bne.n	8008c10 <__swbuf_r+0x70>
 8008bb8:	686c      	ldr	r4, [r5, #4]
 8008bba:	69a3      	ldr	r3, [r4, #24]
 8008bbc:	60a3      	str	r3, [r4, #8]
 8008bbe:	89a3      	ldrh	r3, [r4, #12]
 8008bc0:	071a      	lsls	r2, r3, #28
 8008bc2:	d52f      	bpl.n	8008c24 <__swbuf_r+0x84>
 8008bc4:	6923      	ldr	r3, [r4, #16]
 8008bc6:	b36b      	cbz	r3, 8008c24 <__swbuf_r+0x84>
 8008bc8:	6923      	ldr	r3, [r4, #16]
 8008bca:	6820      	ldr	r0, [r4, #0]
 8008bcc:	1ac0      	subs	r0, r0, r3
 8008bce:	6963      	ldr	r3, [r4, #20]
 8008bd0:	b2f6      	uxtb	r6, r6
 8008bd2:	4283      	cmp	r3, r0
 8008bd4:	4637      	mov	r7, r6
 8008bd6:	dc04      	bgt.n	8008be2 <__swbuf_r+0x42>
 8008bd8:	4621      	mov	r1, r4
 8008bda:	4628      	mov	r0, r5
 8008bdc:	f7ff fcec 	bl	80085b8 <_fflush_r>
 8008be0:	bb30      	cbnz	r0, 8008c30 <__swbuf_r+0x90>
 8008be2:	68a3      	ldr	r3, [r4, #8]
 8008be4:	3b01      	subs	r3, #1
 8008be6:	60a3      	str	r3, [r4, #8]
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	1c5a      	adds	r2, r3, #1
 8008bec:	6022      	str	r2, [r4, #0]
 8008bee:	701e      	strb	r6, [r3, #0]
 8008bf0:	6963      	ldr	r3, [r4, #20]
 8008bf2:	3001      	adds	r0, #1
 8008bf4:	4283      	cmp	r3, r0
 8008bf6:	d004      	beq.n	8008c02 <__swbuf_r+0x62>
 8008bf8:	89a3      	ldrh	r3, [r4, #12]
 8008bfa:	07db      	lsls	r3, r3, #31
 8008bfc:	d506      	bpl.n	8008c0c <__swbuf_r+0x6c>
 8008bfe:	2e0a      	cmp	r6, #10
 8008c00:	d104      	bne.n	8008c0c <__swbuf_r+0x6c>
 8008c02:	4621      	mov	r1, r4
 8008c04:	4628      	mov	r0, r5
 8008c06:	f7ff fcd7 	bl	80085b8 <_fflush_r>
 8008c0a:	b988      	cbnz	r0, 8008c30 <__swbuf_r+0x90>
 8008c0c:	4638      	mov	r0, r7
 8008c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c10:	4b0a      	ldr	r3, [pc, #40]	; (8008c3c <__swbuf_r+0x9c>)
 8008c12:	429c      	cmp	r4, r3
 8008c14:	d101      	bne.n	8008c1a <__swbuf_r+0x7a>
 8008c16:	68ac      	ldr	r4, [r5, #8]
 8008c18:	e7cf      	b.n	8008bba <__swbuf_r+0x1a>
 8008c1a:	4b09      	ldr	r3, [pc, #36]	; (8008c40 <__swbuf_r+0xa0>)
 8008c1c:	429c      	cmp	r4, r3
 8008c1e:	bf08      	it	eq
 8008c20:	68ec      	ldreq	r4, [r5, #12]
 8008c22:	e7ca      	b.n	8008bba <__swbuf_r+0x1a>
 8008c24:	4621      	mov	r1, r4
 8008c26:	4628      	mov	r0, r5
 8008c28:	f000 f80c 	bl	8008c44 <__swsetup_r>
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	d0cb      	beq.n	8008bc8 <__swbuf_r+0x28>
 8008c30:	f04f 37ff 	mov.w	r7, #4294967295
 8008c34:	e7ea      	b.n	8008c0c <__swbuf_r+0x6c>
 8008c36:	bf00      	nop
 8008c38:	08009b6c 	.word	0x08009b6c
 8008c3c:	08009b8c 	.word	0x08009b8c
 8008c40:	08009b4c 	.word	0x08009b4c

08008c44 <__swsetup_r>:
 8008c44:	4b32      	ldr	r3, [pc, #200]	; (8008d10 <__swsetup_r+0xcc>)
 8008c46:	b570      	push	{r4, r5, r6, lr}
 8008c48:	681d      	ldr	r5, [r3, #0]
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	460c      	mov	r4, r1
 8008c4e:	b125      	cbz	r5, 8008c5a <__swsetup_r+0x16>
 8008c50:	69ab      	ldr	r3, [r5, #24]
 8008c52:	b913      	cbnz	r3, 8008c5a <__swsetup_r+0x16>
 8008c54:	4628      	mov	r0, r5
 8008c56:	f7ff fd43 	bl	80086e0 <__sinit>
 8008c5a:	4b2e      	ldr	r3, [pc, #184]	; (8008d14 <__swsetup_r+0xd0>)
 8008c5c:	429c      	cmp	r4, r3
 8008c5e:	d10f      	bne.n	8008c80 <__swsetup_r+0x3c>
 8008c60:	686c      	ldr	r4, [r5, #4]
 8008c62:	89a3      	ldrh	r3, [r4, #12]
 8008c64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c68:	0719      	lsls	r1, r3, #28
 8008c6a:	d42c      	bmi.n	8008cc6 <__swsetup_r+0x82>
 8008c6c:	06dd      	lsls	r5, r3, #27
 8008c6e:	d411      	bmi.n	8008c94 <__swsetup_r+0x50>
 8008c70:	2309      	movs	r3, #9
 8008c72:	6033      	str	r3, [r6, #0]
 8008c74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c78:	81a3      	strh	r3, [r4, #12]
 8008c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c7e:	e03e      	b.n	8008cfe <__swsetup_r+0xba>
 8008c80:	4b25      	ldr	r3, [pc, #148]	; (8008d18 <__swsetup_r+0xd4>)
 8008c82:	429c      	cmp	r4, r3
 8008c84:	d101      	bne.n	8008c8a <__swsetup_r+0x46>
 8008c86:	68ac      	ldr	r4, [r5, #8]
 8008c88:	e7eb      	b.n	8008c62 <__swsetup_r+0x1e>
 8008c8a:	4b24      	ldr	r3, [pc, #144]	; (8008d1c <__swsetup_r+0xd8>)
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	bf08      	it	eq
 8008c90:	68ec      	ldreq	r4, [r5, #12]
 8008c92:	e7e6      	b.n	8008c62 <__swsetup_r+0x1e>
 8008c94:	0758      	lsls	r0, r3, #29
 8008c96:	d512      	bpl.n	8008cbe <__swsetup_r+0x7a>
 8008c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c9a:	b141      	cbz	r1, 8008cae <__swsetup_r+0x6a>
 8008c9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ca0:	4299      	cmp	r1, r3
 8008ca2:	d002      	beq.n	8008caa <__swsetup_r+0x66>
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	f7fe fd4f 	bl	8007748 <_free_r>
 8008caa:	2300      	movs	r3, #0
 8008cac:	6363      	str	r3, [r4, #52]	; 0x34
 8008cae:	89a3      	ldrh	r3, [r4, #12]
 8008cb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008cb4:	81a3      	strh	r3, [r4, #12]
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	6063      	str	r3, [r4, #4]
 8008cba:	6923      	ldr	r3, [r4, #16]
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	89a3      	ldrh	r3, [r4, #12]
 8008cc0:	f043 0308 	orr.w	r3, r3, #8
 8008cc4:	81a3      	strh	r3, [r4, #12]
 8008cc6:	6923      	ldr	r3, [r4, #16]
 8008cc8:	b94b      	cbnz	r3, 8008cde <__swsetup_r+0x9a>
 8008cca:	89a3      	ldrh	r3, [r4, #12]
 8008ccc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cd4:	d003      	beq.n	8008cde <__swsetup_r+0x9a>
 8008cd6:	4621      	mov	r1, r4
 8008cd8:	4630      	mov	r0, r6
 8008cda:	f000 f84d 	bl	8008d78 <__smakebuf_r>
 8008cde:	89a0      	ldrh	r0, [r4, #12]
 8008ce0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ce4:	f010 0301 	ands.w	r3, r0, #1
 8008ce8:	d00a      	beq.n	8008d00 <__swsetup_r+0xbc>
 8008cea:	2300      	movs	r3, #0
 8008cec:	60a3      	str	r3, [r4, #8]
 8008cee:	6963      	ldr	r3, [r4, #20]
 8008cf0:	425b      	negs	r3, r3
 8008cf2:	61a3      	str	r3, [r4, #24]
 8008cf4:	6923      	ldr	r3, [r4, #16]
 8008cf6:	b943      	cbnz	r3, 8008d0a <__swsetup_r+0xc6>
 8008cf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008cfc:	d1ba      	bne.n	8008c74 <__swsetup_r+0x30>
 8008cfe:	bd70      	pop	{r4, r5, r6, pc}
 8008d00:	0781      	lsls	r1, r0, #30
 8008d02:	bf58      	it	pl
 8008d04:	6963      	ldrpl	r3, [r4, #20]
 8008d06:	60a3      	str	r3, [r4, #8]
 8008d08:	e7f4      	b.n	8008cf4 <__swsetup_r+0xb0>
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	e7f7      	b.n	8008cfe <__swsetup_r+0xba>
 8008d0e:	bf00      	nop
 8008d10:	20000014 	.word	0x20000014
 8008d14:	08009b6c 	.word	0x08009b6c
 8008d18:	08009b8c 	.word	0x08009b8c
 8008d1c:	08009b4c 	.word	0x08009b4c

08008d20 <abort>:
 8008d20:	b508      	push	{r3, lr}
 8008d22:	2006      	movs	r0, #6
 8008d24:	f000 f898 	bl	8008e58 <raise>
 8008d28:	2001      	movs	r0, #1
 8008d2a:	f7f9 feda 	bl	8002ae2 <_exit>

08008d2e <__swhatbuf_r>:
 8008d2e:	b570      	push	{r4, r5, r6, lr}
 8008d30:	460e      	mov	r6, r1
 8008d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d36:	2900      	cmp	r1, #0
 8008d38:	b096      	sub	sp, #88	; 0x58
 8008d3a:	4614      	mov	r4, r2
 8008d3c:	461d      	mov	r5, r3
 8008d3e:	da08      	bge.n	8008d52 <__swhatbuf_r+0x24>
 8008d40:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008d44:	2200      	movs	r2, #0
 8008d46:	602a      	str	r2, [r5, #0]
 8008d48:	061a      	lsls	r2, r3, #24
 8008d4a:	d410      	bmi.n	8008d6e <__swhatbuf_r+0x40>
 8008d4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d50:	e00e      	b.n	8008d70 <__swhatbuf_r+0x42>
 8008d52:	466a      	mov	r2, sp
 8008d54:	f000 f89c 	bl	8008e90 <_fstat_r>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	dbf1      	blt.n	8008d40 <__swhatbuf_r+0x12>
 8008d5c:	9a01      	ldr	r2, [sp, #4]
 8008d5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d66:	425a      	negs	r2, r3
 8008d68:	415a      	adcs	r2, r3
 8008d6a:	602a      	str	r2, [r5, #0]
 8008d6c:	e7ee      	b.n	8008d4c <__swhatbuf_r+0x1e>
 8008d6e:	2340      	movs	r3, #64	; 0x40
 8008d70:	2000      	movs	r0, #0
 8008d72:	6023      	str	r3, [r4, #0]
 8008d74:	b016      	add	sp, #88	; 0x58
 8008d76:	bd70      	pop	{r4, r5, r6, pc}

08008d78 <__smakebuf_r>:
 8008d78:	898b      	ldrh	r3, [r1, #12]
 8008d7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d7c:	079d      	lsls	r5, r3, #30
 8008d7e:	4606      	mov	r6, r0
 8008d80:	460c      	mov	r4, r1
 8008d82:	d507      	bpl.n	8008d94 <__smakebuf_r+0x1c>
 8008d84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	6123      	str	r3, [r4, #16]
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	6163      	str	r3, [r4, #20]
 8008d90:	b002      	add	sp, #8
 8008d92:	bd70      	pop	{r4, r5, r6, pc}
 8008d94:	ab01      	add	r3, sp, #4
 8008d96:	466a      	mov	r2, sp
 8008d98:	f7ff ffc9 	bl	8008d2e <__swhatbuf_r>
 8008d9c:	9900      	ldr	r1, [sp, #0]
 8008d9e:	4605      	mov	r5, r0
 8008da0:	4630      	mov	r0, r6
 8008da2:	f7fe fd3d 	bl	8007820 <_malloc_r>
 8008da6:	b948      	cbnz	r0, 8008dbc <__smakebuf_r+0x44>
 8008da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dac:	059a      	lsls	r2, r3, #22
 8008dae:	d4ef      	bmi.n	8008d90 <__smakebuf_r+0x18>
 8008db0:	f023 0303 	bic.w	r3, r3, #3
 8008db4:	f043 0302 	orr.w	r3, r3, #2
 8008db8:	81a3      	strh	r3, [r4, #12]
 8008dba:	e7e3      	b.n	8008d84 <__smakebuf_r+0xc>
 8008dbc:	4b0d      	ldr	r3, [pc, #52]	; (8008df4 <__smakebuf_r+0x7c>)
 8008dbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8008dc0:	89a3      	ldrh	r3, [r4, #12]
 8008dc2:	6020      	str	r0, [r4, #0]
 8008dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dc8:	81a3      	strh	r3, [r4, #12]
 8008dca:	9b00      	ldr	r3, [sp, #0]
 8008dcc:	6163      	str	r3, [r4, #20]
 8008dce:	9b01      	ldr	r3, [sp, #4]
 8008dd0:	6120      	str	r0, [r4, #16]
 8008dd2:	b15b      	cbz	r3, 8008dec <__smakebuf_r+0x74>
 8008dd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dd8:	4630      	mov	r0, r6
 8008dda:	f000 f86b 	bl	8008eb4 <_isatty_r>
 8008dde:	b128      	cbz	r0, 8008dec <__smakebuf_r+0x74>
 8008de0:	89a3      	ldrh	r3, [r4, #12]
 8008de2:	f023 0303 	bic.w	r3, r3, #3
 8008de6:	f043 0301 	orr.w	r3, r3, #1
 8008dea:	81a3      	strh	r3, [r4, #12]
 8008dec:	89a0      	ldrh	r0, [r4, #12]
 8008dee:	4305      	orrs	r5, r0
 8008df0:	81a5      	strh	r5, [r4, #12]
 8008df2:	e7cd      	b.n	8008d90 <__smakebuf_r+0x18>
 8008df4:	08008679 	.word	0x08008679

08008df8 <_malloc_usable_size_r>:
 8008df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dfc:	1f18      	subs	r0, r3, #4
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	bfbc      	itt	lt
 8008e02:	580b      	ldrlt	r3, [r1, r0]
 8008e04:	18c0      	addlt	r0, r0, r3
 8008e06:	4770      	bx	lr

08008e08 <_raise_r>:
 8008e08:	291f      	cmp	r1, #31
 8008e0a:	b538      	push	{r3, r4, r5, lr}
 8008e0c:	4604      	mov	r4, r0
 8008e0e:	460d      	mov	r5, r1
 8008e10:	d904      	bls.n	8008e1c <_raise_r+0x14>
 8008e12:	2316      	movs	r3, #22
 8008e14:	6003      	str	r3, [r0, #0]
 8008e16:	f04f 30ff 	mov.w	r0, #4294967295
 8008e1a:	bd38      	pop	{r3, r4, r5, pc}
 8008e1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e1e:	b112      	cbz	r2, 8008e26 <_raise_r+0x1e>
 8008e20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e24:	b94b      	cbnz	r3, 8008e3a <_raise_r+0x32>
 8008e26:	4620      	mov	r0, r4
 8008e28:	f000 f830 	bl	8008e8c <_getpid_r>
 8008e2c:	462a      	mov	r2, r5
 8008e2e:	4601      	mov	r1, r0
 8008e30:	4620      	mov	r0, r4
 8008e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e36:	f000 b817 	b.w	8008e68 <_kill_r>
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d00a      	beq.n	8008e54 <_raise_r+0x4c>
 8008e3e:	1c59      	adds	r1, r3, #1
 8008e40:	d103      	bne.n	8008e4a <_raise_r+0x42>
 8008e42:	2316      	movs	r3, #22
 8008e44:	6003      	str	r3, [r0, #0]
 8008e46:	2001      	movs	r0, #1
 8008e48:	e7e7      	b.n	8008e1a <_raise_r+0x12>
 8008e4a:	2400      	movs	r4, #0
 8008e4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e50:	4628      	mov	r0, r5
 8008e52:	4798      	blx	r3
 8008e54:	2000      	movs	r0, #0
 8008e56:	e7e0      	b.n	8008e1a <_raise_r+0x12>

08008e58 <raise>:
 8008e58:	4b02      	ldr	r3, [pc, #8]	; (8008e64 <raise+0xc>)
 8008e5a:	4601      	mov	r1, r0
 8008e5c:	6818      	ldr	r0, [r3, #0]
 8008e5e:	f7ff bfd3 	b.w	8008e08 <_raise_r>
 8008e62:	bf00      	nop
 8008e64:	20000014 	.word	0x20000014

08008e68 <_kill_r>:
 8008e68:	b538      	push	{r3, r4, r5, lr}
 8008e6a:	4d07      	ldr	r5, [pc, #28]	; (8008e88 <_kill_r+0x20>)
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	4604      	mov	r4, r0
 8008e70:	4608      	mov	r0, r1
 8008e72:	4611      	mov	r1, r2
 8008e74:	602b      	str	r3, [r5, #0]
 8008e76:	f7f9 fe24 	bl	8002ac2 <_kill>
 8008e7a:	1c43      	adds	r3, r0, #1
 8008e7c:	d102      	bne.n	8008e84 <_kill_r+0x1c>
 8008e7e:	682b      	ldr	r3, [r5, #0]
 8008e80:	b103      	cbz	r3, 8008e84 <_kill_r+0x1c>
 8008e82:	6023      	str	r3, [r4, #0]
 8008e84:	bd38      	pop	{r3, r4, r5, pc}
 8008e86:	bf00      	nop
 8008e88:	2000968c 	.word	0x2000968c

08008e8c <_getpid_r>:
 8008e8c:	f7f9 be11 	b.w	8002ab2 <_getpid>

08008e90 <_fstat_r>:
 8008e90:	b538      	push	{r3, r4, r5, lr}
 8008e92:	4d07      	ldr	r5, [pc, #28]	; (8008eb0 <_fstat_r+0x20>)
 8008e94:	2300      	movs	r3, #0
 8008e96:	4604      	mov	r4, r0
 8008e98:	4608      	mov	r0, r1
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	602b      	str	r3, [r5, #0]
 8008e9e:	f7f9 fe6f 	bl	8002b80 <_fstat>
 8008ea2:	1c43      	adds	r3, r0, #1
 8008ea4:	d102      	bne.n	8008eac <_fstat_r+0x1c>
 8008ea6:	682b      	ldr	r3, [r5, #0]
 8008ea8:	b103      	cbz	r3, 8008eac <_fstat_r+0x1c>
 8008eaa:	6023      	str	r3, [r4, #0]
 8008eac:	bd38      	pop	{r3, r4, r5, pc}
 8008eae:	bf00      	nop
 8008eb0:	2000968c 	.word	0x2000968c

08008eb4 <_isatty_r>:
 8008eb4:	b538      	push	{r3, r4, r5, lr}
 8008eb6:	4d06      	ldr	r5, [pc, #24]	; (8008ed0 <_isatty_r+0x1c>)
 8008eb8:	2300      	movs	r3, #0
 8008eba:	4604      	mov	r4, r0
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	602b      	str	r3, [r5, #0]
 8008ec0:	f7f9 fe6e 	bl	8002ba0 <_isatty>
 8008ec4:	1c43      	adds	r3, r0, #1
 8008ec6:	d102      	bne.n	8008ece <_isatty_r+0x1a>
 8008ec8:	682b      	ldr	r3, [r5, #0]
 8008eca:	b103      	cbz	r3, 8008ece <_isatty_r+0x1a>
 8008ecc:	6023      	str	r3, [r4, #0]
 8008ece:	bd38      	pop	{r3, r4, r5, pc}
 8008ed0:	2000968c 	.word	0x2000968c

08008ed4 <round>:
 8008ed4:	ec51 0b10 	vmov	r0, r1, d0
 8008ed8:	b570      	push	{r4, r5, r6, lr}
 8008eda:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8008ede:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8008ee2:	2c13      	cmp	r4, #19
 8008ee4:	ee10 2a10 	vmov	r2, s0
 8008ee8:	460b      	mov	r3, r1
 8008eea:	dc19      	bgt.n	8008f20 <round+0x4c>
 8008eec:	2c00      	cmp	r4, #0
 8008eee:	da09      	bge.n	8008f04 <round+0x30>
 8008ef0:	3401      	adds	r4, #1
 8008ef2:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8008ef6:	d103      	bne.n	8008f00 <round+0x2c>
 8008ef8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008efc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008f00:	2200      	movs	r2, #0
 8008f02:	e028      	b.n	8008f56 <round+0x82>
 8008f04:	4d15      	ldr	r5, [pc, #84]	; (8008f5c <round+0x88>)
 8008f06:	4125      	asrs	r5, r4
 8008f08:	ea01 0605 	and.w	r6, r1, r5
 8008f0c:	4332      	orrs	r2, r6
 8008f0e:	d00e      	beq.n	8008f2e <round+0x5a>
 8008f10:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008f14:	fa42 f404 	asr.w	r4, r2, r4
 8008f18:	4423      	add	r3, r4
 8008f1a:	ea23 0305 	bic.w	r3, r3, r5
 8008f1e:	e7ef      	b.n	8008f00 <round+0x2c>
 8008f20:	2c33      	cmp	r4, #51	; 0x33
 8008f22:	dd07      	ble.n	8008f34 <round+0x60>
 8008f24:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8008f28:	d101      	bne.n	8008f2e <round+0x5a>
 8008f2a:	f7f7 f9c7 	bl	80002bc <__adddf3>
 8008f2e:	ec41 0b10 	vmov	d0, r0, r1
 8008f32:	bd70      	pop	{r4, r5, r6, pc}
 8008f34:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8008f38:	f04f 35ff 	mov.w	r5, #4294967295
 8008f3c:	40f5      	lsrs	r5, r6
 8008f3e:	4228      	tst	r0, r5
 8008f40:	d0f5      	beq.n	8008f2e <round+0x5a>
 8008f42:	2101      	movs	r1, #1
 8008f44:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8008f48:	fa01 f404 	lsl.w	r4, r1, r4
 8008f4c:	1912      	adds	r2, r2, r4
 8008f4e:	bf28      	it	cs
 8008f50:	185b      	addcs	r3, r3, r1
 8008f52:	ea22 0205 	bic.w	r2, r2, r5
 8008f56:	4619      	mov	r1, r3
 8008f58:	4610      	mov	r0, r2
 8008f5a:	e7e8      	b.n	8008f2e <round+0x5a>
 8008f5c:	000fffff 	.word	0x000fffff

08008f60 <acos>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	ed2d 8b02 	vpush	{d8}
 8008f66:	ec55 4b10 	vmov	r4, r5, d0
 8008f6a:	f000 f84d 	bl	8009008 <__ieee754_acos>
 8008f6e:	4622      	mov	r2, r4
 8008f70:	462b      	mov	r3, r5
 8008f72:	4620      	mov	r0, r4
 8008f74:	4629      	mov	r1, r5
 8008f76:	eeb0 8a40 	vmov.f32	s16, s0
 8008f7a:	eef0 8a60 	vmov.f32	s17, s1
 8008f7e:	f7f7 fded 	bl	8000b5c <__aeabi_dcmpun>
 8008f82:	b9a8      	cbnz	r0, 8008fb0 <acos+0x50>
 8008f84:	ec45 4b10 	vmov	d0, r4, r5
 8008f88:	f000 fb53 	bl	8009632 <fabs>
 8008f8c:	4b0c      	ldr	r3, [pc, #48]	; (8008fc0 <acos+0x60>)
 8008f8e:	ec51 0b10 	vmov	r0, r1, d0
 8008f92:	2200      	movs	r2, #0
 8008f94:	f7f7 fdd8 	bl	8000b48 <__aeabi_dcmpgt>
 8008f98:	b150      	cbz	r0, 8008fb0 <acos+0x50>
 8008f9a:	f7fa feab 	bl	8003cf4 <__errno>
 8008f9e:	ecbd 8b02 	vpop	{d8}
 8008fa2:	2321      	movs	r3, #33	; 0x21
 8008fa4:	6003      	str	r3, [r0, #0]
 8008fa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008faa:	4806      	ldr	r0, [pc, #24]	; (8008fc4 <acos+0x64>)
 8008fac:	f7ff b940 	b.w	8008230 <nan>
 8008fb0:	eeb0 0a48 	vmov.f32	s0, s16
 8008fb4:	eef0 0a68 	vmov.f32	s1, s17
 8008fb8:	ecbd 8b02 	vpop	{d8}
 8008fbc:	bd38      	pop	{r3, r4, r5, pc}
 8008fbe:	bf00      	nop
 8008fc0:	3ff00000 	.word	0x3ff00000
 8008fc4:	08009b4b 	.word	0x08009b4b

08008fc8 <sqrtf>:
 8008fc8:	b508      	push	{r3, lr}
 8008fca:	ed2d 8b02 	vpush	{d8}
 8008fce:	eeb0 8a40 	vmov.f32	s16, s0
 8008fd2:	f000 fb2b 	bl	800962c <__ieee754_sqrtf>
 8008fd6:	eeb4 8a48 	vcmp.f32	s16, s16
 8008fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fde:	d60c      	bvs.n	8008ffa <sqrtf+0x32>
 8008fe0:	eddf 8a07 	vldr	s17, [pc, #28]	; 8009000 <sqrtf+0x38>
 8008fe4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fec:	d505      	bpl.n	8008ffa <sqrtf+0x32>
 8008fee:	f7fa fe81 	bl	8003cf4 <__errno>
 8008ff2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008ff6:	2321      	movs	r3, #33	; 0x21
 8008ff8:	6003      	str	r3, [r0, #0]
 8008ffa:	ecbd 8b02 	vpop	{d8}
 8008ffe:	bd08      	pop	{r3, pc}
	...

08009008 <__ieee754_acos>:
 8009008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900c:	ec55 4b10 	vmov	r4, r5, d0
 8009010:	49b7      	ldr	r1, [pc, #732]	; (80092f0 <__ieee754_acos+0x2e8>)
 8009012:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009016:	428b      	cmp	r3, r1
 8009018:	dd1b      	ble.n	8009052 <__ieee754_acos+0x4a>
 800901a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800901e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009022:	4323      	orrs	r3, r4
 8009024:	d106      	bne.n	8009034 <__ieee754_acos+0x2c>
 8009026:	2d00      	cmp	r5, #0
 8009028:	f300 8211 	bgt.w	800944e <__ieee754_acos+0x446>
 800902c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8009288 <__ieee754_acos+0x280>
 8009030:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009034:	ee10 2a10 	vmov	r2, s0
 8009038:	462b      	mov	r3, r5
 800903a:	ee10 0a10 	vmov	r0, s0
 800903e:	4629      	mov	r1, r5
 8009040:	f7f7 f93a 	bl	80002b8 <__aeabi_dsub>
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	f7f7 fc18 	bl	800087c <__aeabi_ddiv>
 800904c:	ec41 0b10 	vmov	d0, r0, r1
 8009050:	e7ee      	b.n	8009030 <__ieee754_acos+0x28>
 8009052:	49a8      	ldr	r1, [pc, #672]	; (80092f4 <__ieee754_acos+0x2ec>)
 8009054:	428b      	cmp	r3, r1
 8009056:	f300 8087 	bgt.w	8009168 <__ieee754_acos+0x160>
 800905a:	4aa7      	ldr	r2, [pc, #668]	; (80092f8 <__ieee754_acos+0x2f0>)
 800905c:	4293      	cmp	r3, r2
 800905e:	f340 81f9 	ble.w	8009454 <__ieee754_acos+0x44c>
 8009062:	ee10 2a10 	vmov	r2, s0
 8009066:	ee10 0a10 	vmov	r0, s0
 800906a:	462b      	mov	r3, r5
 800906c:	4629      	mov	r1, r5
 800906e:	f7f7 fadb 	bl	8000628 <__aeabi_dmul>
 8009072:	a387      	add	r3, pc, #540	; (adr r3, 8009290 <__ieee754_acos+0x288>)
 8009074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009078:	4606      	mov	r6, r0
 800907a:	460f      	mov	r7, r1
 800907c:	f7f7 fad4 	bl	8000628 <__aeabi_dmul>
 8009080:	a385      	add	r3, pc, #532	; (adr r3, 8009298 <__ieee754_acos+0x290>)
 8009082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009086:	f7f7 f919 	bl	80002bc <__adddf3>
 800908a:	4632      	mov	r2, r6
 800908c:	463b      	mov	r3, r7
 800908e:	f7f7 facb 	bl	8000628 <__aeabi_dmul>
 8009092:	a383      	add	r3, pc, #524	; (adr r3, 80092a0 <__ieee754_acos+0x298>)
 8009094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009098:	f7f7 f90e 	bl	80002b8 <__aeabi_dsub>
 800909c:	4632      	mov	r2, r6
 800909e:	463b      	mov	r3, r7
 80090a0:	f7f7 fac2 	bl	8000628 <__aeabi_dmul>
 80090a4:	a380      	add	r3, pc, #512	; (adr r3, 80092a8 <__ieee754_acos+0x2a0>)
 80090a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090aa:	f7f7 f907 	bl	80002bc <__adddf3>
 80090ae:	4632      	mov	r2, r6
 80090b0:	463b      	mov	r3, r7
 80090b2:	f7f7 fab9 	bl	8000628 <__aeabi_dmul>
 80090b6:	a37e      	add	r3, pc, #504	; (adr r3, 80092b0 <__ieee754_acos+0x2a8>)
 80090b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090bc:	f7f7 f8fc 	bl	80002b8 <__aeabi_dsub>
 80090c0:	4632      	mov	r2, r6
 80090c2:	463b      	mov	r3, r7
 80090c4:	f7f7 fab0 	bl	8000628 <__aeabi_dmul>
 80090c8:	a37b      	add	r3, pc, #492	; (adr r3, 80092b8 <__ieee754_acos+0x2b0>)
 80090ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ce:	f7f7 f8f5 	bl	80002bc <__adddf3>
 80090d2:	4632      	mov	r2, r6
 80090d4:	463b      	mov	r3, r7
 80090d6:	f7f7 faa7 	bl	8000628 <__aeabi_dmul>
 80090da:	a379      	add	r3, pc, #484	; (adr r3, 80092c0 <__ieee754_acos+0x2b8>)
 80090dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e0:	4680      	mov	r8, r0
 80090e2:	4689      	mov	r9, r1
 80090e4:	4630      	mov	r0, r6
 80090e6:	4639      	mov	r1, r7
 80090e8:	f7f7 fa9e 	bl	8000628 <__aeabi_dmul>
 80090ec:	a376      	add	r3, pc, #472	; (adr r3, 80092c8 <__ieee754_acos+0x2c0>)
 80090ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f2:	f7f7 f8e1 	bl	80002b8 <__aeabi_dsub>
 80090f6:	4632      	mov	r2, r6
 80090f8:	463b      	mov	r3, r7
 80090fa:	f7f7 fa95 	bl	8000628 <__aeabi_dmul>
 80090fe:	a374      	add	r3, pc, #464	; (adr r3, 80092d0 <__ieee754_acos+0x2c8>)
 8009100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009104:	f7f7 f8da 	bl	80002bc <__adddf3>
 8009108:	4632      	mov	r2, r6
 800910a:	463b      	mov	r3, r7
 800910c:	f7f7 fa8c 	bl	8000628 <__aeabi_dmul>
 8009110:	a371      	add	r3, pc, #452	; (adr r3, 80092d8 <__ieee754_acos+0x2d0>)
 8009112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009116:	f7f7 f8cf 	bl	80002b8 <__aeabi_dsub>
 800911a:	4632      	mov	r2, r6
 800911c:	463b      	mov	r3, r7
 800911e:	f7f7 fa83 	bl	8000628 <__aeabi_dmul>
 8009122:	4b76      	ldr	r3, [pc, #472]	; (80092fc <__ieee754_acos+0x2f4>)
 8009124:	2200      	movs	r2, #0
 8009126:	f7f7 f8c9 	bl	80002bc <__adddf3>
 800912a:	4602      	mov	r2, r0
 800912c:	460b      	mov	r3, r1
 800912e:	4640      	mov	r0, r8
 8009130:	4649      	mov	r1, r9
 8009132:	f7f7 fba3 	bl	800087c <__aeabi_ddiv>
 8009136:	4622      	mov	r2, r4
 8009138:	462b      	mov	r3, r5
 800913a:	f7f7 fa75 	bl	8000628 <__aeabi_dmul>
 800913e:	4602      	mov	r2, r0
 8009140:	460b      	mov	r3, r1
 8009142:	a167      	add	r1, pc, #412	; (adr r1, 80092e0 <__ieee754_acos+0x2d8>)
 8009144:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009148:	f7f7 f8b6 	bl	80002b8 <__aeabi_dsub>
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	4620      	mov	r0, r4
 8009152:	4629      	mov	r1, r5
 8009154:	f7f7 f8b0 	bl	80002b8 <__aeabi_dsub>
 8009158:	4602      	mov	r2, r0
 800915a:	460b      	mov	r3, r1
 800915c:	a162      	add	r1, pc, #392	; (adr r1, 80092e8 <__ieee754_acos+0x2e0>)
 800915e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009162:	f7f7 f8a9 	bl	80002b8 <__aeabi_dsub>
 8009166:	e771      	b.n	800904c <__ieee754_acos+0x44>
 8009168:	2d00      	cmp	r5, #0
 800916a:	f280 80cb 	bge.w	8009304 <__ieee754_acos+0x2fc>
 800916e:	ee10 0a10 	vmov	r0, s0
 8009172:	4b62      	ldr	r3, [pc, #392]	; (80092fc <__ieee754_acos+0x2f4>)
 8009174:	2200      	movs	r2, #0
 8009176:	4629      	mov	r1, r5
 8009178:	f7f7 f8a0 	bl	80002bc <__adddf3>
 800917c:	4b60      	ldr	r3, [pc, #384]	; (8009300 <__ieee754_acos+0x2f8>)
 800917e:	2200      	movs	r2, #0
 8009180:	f7f7 fa52 	bl	8000628 <__aeabi_dmul>
 8009184:	a342      	add	r3, pc, #264	; (adr r3, 8009290 <__ieee754_acos+0x288>)
 8009186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918a:	4604      	mov	r4, r0
 800918c:	460d      	mov	r5, r1
 800918e:	f7f7 fa4b 	bl	8000628 <__aeabi_dmul>
 8009192:	a341      	add	r3, pc, #260	; (adr r3, 8009298 <__ieee754_acos+0x290>)
 8009194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009198:	f7f7 f890 	bl	80002bc <__adddf3>
 800919c:	4622      	mov	r2, r4
 800919e:	462b      	mov	r3, r5
 80091a0:	f7f7 fa42 	bl	8000628 <__aeabi_dmul>
 80091a4:	a33e      	add	r3, pc, #248	; (adr r3, 80092a0 <__ieee754_acos+0x298>)
 80091a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091aa:	f7f7 f885 	bl	80002b8 <__aeabi_dsub>
 80091ae:	4622      	mov	r2, r4
 80091b0:	462b      	mov	r3, r5
 80091b2:	f7f7 fa39 	bl	8000628 <__aeabi_dmul>
 80091b6:	a33c      	add	r3, pc, #240	; (adr r3, 80092a8 <__ieee754_acos+0x2a0>)
 80091b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091bc:	f7f7 f87e 	bl	80002bc <__adddf3>
 80091c0:	4622      	mov	r2, r4
 80091c2:	462b      	mov	r3, r5
 80091c4:	f7f7 fa30 	bl	8000628 <__aeabi_dmul>
 80091c8:	a339      	add	r3, pc, #228	; (adr r3, 80092b0 <__ieee754_acos+0x2a8>)
 80091ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ce:	f7f7 f873 	bl	80002b8 <__aeabi_dsub>
 80091d2:	4622      	mov	r2, r4
 80091d4:	462b      	mov	r3, r5
 80091d6:	f7f7 fa27 	bl	8000628 <__aeabi_dmul>
 80091da:	a337      	add	r3, pc, #220	; (adr r3, 80092b8 <__ieee754_acos+0x2b0>)
 80091dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e0:	f7f7 f86c 	bl	80002bc <__adddf3>
 80091e4:	4622      	mov	r2, r4
 80091e6:	462b      	mov	r3, r5
 80091e8:	f7f7 fa1e 	bl	8000628 <__aeabi_dmul>
 80091ec:	ec45 4b10 	vmov	d0, r4, r5
 80091f0:	4680      	mov	r8, r0
 80091f2:	4689      	mov	r9, r1
 80091f4:	f000 f968 	bl	80094c8 <__ieee754_sqrt>
 80091f8:	a331      	add	r3, pc, #196	; (adr r3, 80092c0 <__ieee754_acos+0x2b8>)
 80091fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fe:	4620      	mov	r0, r4
 8009200:	4629      	mov	r1, r5
 8009202:	ec57 6b10 	vmov	r6, r7, d0
 8009206:	f7f7 fa0f 	bl	8000628 <__aeabi_dmul>
 800920a:	a32f      	add	r3, pc, #188	; (adr r3, 80092c8 <__ieee754_acos+0x2c0>)
 800920c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009210:	f7f7 f852 	bl	80002b8 <__aeabi_dsub>
 8009214:	4622      	mov	r2, r4
 8009216:	462b      	mov	r3, r5
 8009218:	f7f7 fa06 	bl	8000628 <__aeabi_dmul>
 800921c:	a32c      	add	r3, pc, #176	; (adr r3, 80092d0 <__ieee754_acos+0x2c8>)
 800921e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009222:	f7f7 f84b 	bl	80002bc <__adddf3>
 8009226:	4622      	mov	r2, r4
 8009228:	462b      	mov	r3, r5
 800922a:	f7f7 f9fd 	bl	8000628 <__aeabi_dmul>
 800922e:	a32a      	add	r3, pc, #168	; (adr r3, 80092d8 <__ieee754_acos+0x2d0>)
 8009230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009234:	f7f7 f840 	bl	80002b8 <__aeabi_dsub>
 8009238:	4622      	mov	r2, r4
 800923a:	462b      	mov	r3, r5
 800923c:	f7f7 f9f4 	bl	8000628 <__aeabi_dmul>
 8009240:	4b2e      	ldr	r3, [pc, #184]	; (80092fc <__ieee754_acos+0x2f4>)
 8009242:	2200      	movs	r2, #0
 8009244:	f7f7 f83a 	bl	80002bc <__adddf3>
 8009248:	4602      	mov	r2, r0
 800924a:	460b      	mov	r3, r1
 800924c:	4640      	mov	r0, r8
 800924e:	4649      	mov	r1, r9
 8009250:	f7f7 fb14 	bl	800087c <__aeabi_ddiv>
 8009254:	4632      	mov	r2, r6
 8009256:	463b      	mov	r3, r7
 8009258:	f7f7 f9e6 	bl	8000628 <__aeabi_dmul>
 800925c:	a320      	add	r3, pc, #128	; (adr r3, 80092e0 <__ieee754_acos+0x2d8>)
 800925e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009262:	f7f7 f829 	bl	80002b8 <__aeabi_dsub>
 8009266:	4632      	mov	r2, r6
 8009268:	463b      	mov	r3, r7
 800926a:	f7f7 f827 	bl	80002bc <__adddf3>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	f7f7 f823 	bl	80002bc <__adddf3>
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	a103      	add	r1, pc, #12	; (adr r1, 8009288 <__ieee754_acos+0x280>)
 800927c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009280:	e76f      	b.n	8009162 <__ieee754_acos+0x15a>
 8009282:	bf00      	nop
 8009284:	f3af 8000 	nop.w
 8009288:	54442d18 	.word	0x54442d18
 800928c:	400921fb 	.word	0x400921fb
 8009290:	0dfdf709 	.word	0x0dfdf709
 8009294:	3f023de1 	.word	0x3f023de1
 8009298:	7501b288 	.word	0x7501b288
 800929c:	3f49efe0 	.word	0x3f49efe0
 80092a0:	b5688f3b 	.word	0xb5688f3b
 80092a4:	3fa48228 	.word	0x3fa48228
 80092a8:	0e884455 	.word	0x0e884455
 80092ac:	3fc9c155 	.word	0x3fc9c155
 80092b0:	03eb6f7d 	.word	0x03eb6f7d
 80092b4:	3fd4d612 	.word	0x3fd4d612
 80092b8:	55555555 	.word	0x55555555
 80092bc:	3fc55555 	.word	0x3fc55555
 80092c0:	b12e9282 	.word	0xb12e9282
 80092c4:	3fb3b8c5 	.word	0x3fb3b8c5
 80092c8:	1b8d0159 	.word	0x1b8d0159
 80092cc:	3fe6066c 	.word	0x3fe6066c
 80092d0:	9c598ac8 	.word	0x9c598ac8
 80092d4:	40002ae5 	.word	0x40002ae5
 80092d8:	1c8a2d4b 	.word	0x1c8a2d4b
 80092dc:	40033a27 	.word	0x40033a27
 80092e0:	33145c07 	.word	0x33145c07
 80092e4:	3c91a626 	.word	0x3c91a626
 80092e8:	54442d18 	.word	0x54442d18
 80092ec:	3ff921fb 	.word	0x3ff921fb
 80092f0:	3fefffff 	.word	0x3fefffff
 80092f4:	3fdfffff 	.word	0x3fdfffff
 80092f8:	3c600000 	.word	0x3c600000
 80092fc:	3ff00000 	.word	0x3ff00000
 8009300:	3fe00000 	.word	0x3fe00000
 8009304:	ee10 2a10 	vmov	r2, s0
 8009308:	462b      	mov	r3, r5
 800930a:	496d      	ldr	r1, [pc, #436]	; (80094c0 <__ieee754_acos+0x4b8>)
 800930c:	2000      	movs	r0, #0
 800930e:	f7f6 ffd3 	bl	80002b8 <__aeabi_dsub>
 8009312:	4b6c      	ldr	r3, [pc, #432]	; (80094c4 <__ieee754_acos+0x4bc>)
 8009314:	2200      	movs	r2, #0
 8009316:	f7f7 f987 	bl	8000628 <__aeabi_dmul>
 800931a:	4604      	mov	r4, r0
 800931c:	460d      	mov	r5, r1
 800931e:	ec45 4b10 	vmov	d0, r4, r5
 8009322:	f000 f8d1 	bl	80094c8 <__ieee754_sqrt>
 8009326:	a34e      	add	r3, pc, #312	; (adr r3, 8009460 <__ieee754_acos+0x458>)
 8009328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932c:	4620      	mov	r0, r4
 800932e:	4629      	mov	r1, r5
 8009330:	ec59 8b10 	vmov	r8, r9, d0
 8009334:	f7f7 f978 	bl	8000628 <__aeabi_dmul>
 8009338:	a34b      	add	r3, pc, #300	; (adr r3, 8009468 <__ieee754_acos+0x460>)
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	f7f6 ffbd 	bl	80002bc <__adddf3>
 8009342:	4622      	mov	r2, r4
 8009344:	462b      	mov	r3, r5
 8009346:	f7f7 f96f 	bl	8000628 <__aeabi_dmul>
 800934a:	a349      	add	r3, pc, #292	; (adr r3, 8009470 <__ieee754_acos+0x468>)
 800934c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009350:	f7f6 ffb2 	bl	80002b8 <__aeabi_dsub>
 8009354:	4622      	mov	r2, r4
 8009356:	462b      	mov	r3, r5
 8009358:	f7f7 f966 	bl	8000628 <__aeabi_dmul>
 800935c:	a346      	add	r3, pc, #280	; (adr r3, 8009478 <__ieee754_acos+0x470>)
 800935e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009362:	f7f6 ffab 	bl	80002bc <__adddf3>
 8009366:	4622      	mov	r2, r4
 8009368:	462b      	mov	r3, r5
 800936a:	f7f7 f95d 	bl	8000628 <__aeabi_dmul>
 800936e:	a344      	add	r3, pc, #272	; (adr r3, 8009480 <__ieee754_acos+0x478>)
 8009370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009374:	f7f6 ffa0 	bl	80002b8 <__aeabi_dsub>
 8009378:	4622      	mov	r2, r4
 800937a:	462b      	mov	r3, r5
 800937c:	f7f7 f954 	bl	8000628 <__aeabi_dmul>
 8009380:	a341      	add	r3, pc, #260	; (adr r3, 8009488 <__ieee754_acos+0x480>)
 8009382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009386:	f7f6 ff99 	bl	80002bc <__adddf3>
 800938a:	4622      	mov	r2, r4
 800938c:	462b      	mov	r3, r5
 800938e:	f7f7 f94b 	bl	8000628 <__aeabi_dmul>
 8009392:	a33f      	add	r3, pc, #252	; (adr r3, 8009490 <__ieee754_acos+0x488>)
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	4682      	mov	sl, r0
 800939a:	468b      	mov	fp, r1
 800939c:	4620      	mov	r0, r4
 800939e:	4629      	mov	r1, r5
 80093a0:	f7f7 f942 	bl	8000628 <__aeabi_dmul>
 80093a4:	a33c      	add	r3, pc, #240	; (adr r3, 8009498 <__ieee754_acos+0x490>)
 80093a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093aa:	f7f6 ff85 	bl	80002b8 <__aeabi_dsub>
 80093ae:	4622      	mov	r2, r4
 80093b0:	462b      	mov	r3, r5
 80093b2:	f7f7 f939 	bl	8000628 <__aeabi_dmul>
 80093b6:	a33a      	add	r3, pc, #232	; (adr r3, 80094a0 <__ieee754_acos+0x498>)
 80093b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093bc:	f7f6 ff7e 	bl	80002bc <__adddf3>
 80093c0:	4622      	mov	r2, r4
 80093c2:	462b      	mov	r3, r5
 80093c4:	f7f7 f930 	bl	8000628 <__aeabi_dmul>
 80093c8:	a337      	add	r3, pc, #220	; (adr r3, 80094a8 <__ieee754_acos+0x4a0>)
 80093ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ce:	f7f6 ff73 	bl	80002b8 <__aeabi_dsub>
 80093d2:	4622      	mov	r2, r4
 80093d4:	462b      	mov	r3, r5
 80093d6:	f7f7 f927 	bl	8000628 <__aeabi_dmul>
 80093da:	4b39      	ldr	r3, [pc, #228]	; (80094c0 <__ieee754_acos+0x4b8>)
 80093dc:	2200      	movs	r2, #0
 80093de:	f7f6 ff6d 	bl	80002bc <__adddf3>
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	4650      	mov	r0, sl
 80093e8:	4659      	mov	r1, fp
 80093ea:	f7f7 fa47 	bl	800087c <__aeabi_ddiv>
 80093ee:	4642      	mov	r2, r8
 80093f0:	464b      	mov	r3, r9
 80093f2:	f7f7 f919 	bl	8000628 <__aeabi_dmul>
 80093f6:	2600      	movs	r6, #0
 80093f8:	4682      	mov	sl, r0
 80093fa:	468b      	mov	fp, r1
 80093fc:	4632      	mov	r2, r6
 80093fe:	464b      	mov	r3, r9
 8009400:	4630      	mov	r0, r6
 8009402:	4649      	mov	r1, r9
 8009404:	f7f7 f910 	bl	8000628 <__aeabi_dmul>
 8009408:	4602      	mov	r2, r0
 800940a:	460b      	mov	r3, r1
 800940c:	4620      	mov	r0, r4
 800940e:	4629      	mov	r1, r5
 8009410:	f7f6 ff52 	bl	80002b8 <__aeabi_dsub>
 8009414:	4632      	mov	r2, r6
 8009416:	4604      	mov	r4, r0
 8009418:	460d      	mov	r5, r1
 800941a:	464b      	mov	r3, r9
 800941c:	4640      	mov	r0, r8
 800941e:	4649      	mov	r1, r9
 8009420:	f7f6 ff4c 	bl	80002bc <__adddf3>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	4620      	mov	r0, r4
 800942a:	4629      	mov	r1, r5
 800942c:	f7f7 fa26 	bl	800087c <__aeabi_ddiv>
 8009430:	4602      	mov	r2, r0
 8009432:	460b      	mov	r3, r1
 8009434:	4650      	mov	r0, sl
 8009436:	4659      	mov	r1, fp
 8009438:	f7f6 ff40 	bl	80002bc <__adddf3>
 800943c:	4632      	mov	r2, r6
 800943e:	464b      	mov	r3, r9
 8009440:	f7f6 ff3c 	bl	80002bc <__adddf3>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	f7f6 ff38 	bl	80002bc <__adddf3>
 800944c:	e5fe      	b.n	800904c <__ieee754_acos+0x44>
 800944e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80094b0 <__ieee754_acos+0x4a8>
 8009452:	e5ed      	b.n	8009030 <__ieee754_acos+0x28>
 8009454:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80094b8 <__ieee754_acos+0x4b0>
 8009458:	e5ea      	b.n	8009030 <__ieee754_acos+0x28>
 800945a:	bf00      	nop
 800945c:	f3af 8000 	nop.w
 8009460:	0dfdf709 	.word	0x0dfdf709
 8009464:	3f023de1 	.word	0x3f023de1
 8009468:	7501b288 	.word	0x7501b288
 800946c:	3f49efe0 	.word	0x3f49efe0
 8009470:	b5688f3b 	.word	0xb5688f3b
 8009474:	3fa48228 	.word	0x3fa48228
 8009478:	0e884455 	.word	0x0e884455
 800947c:	3fc9c155 	.word	0x3fc9c155
 8009480:	03eb6f7d 	.word	0x03eb6f7d
 8009484:	3fd4d612 	.word	0x3fd4d612
 8009488:	55555555 	.word	0x55555555
 800948c:	3fc55555 	.word	0x3fc55555
 8009490:	b12e9282 	.word	0xb12e9282
 8009494:	3fb3b8c5 	.word	0x3fb3b8c5
 8009498:	1b8d0159 	.word	0x1b8d0159
 800949c:	3fe6066c 	.word	0x3fe6066c
 80094a0:	9c598ac8 	.word	0x9c598ac8
 80094a4:	40002ae5 	.word	0x40002ae5
 80094a8:	1c8a2d4b 	.word	0x1c8a2d4b
 80094ac:	40033a27 	.word	0x40033a27
	...
 80094b8:	54442d18 	.word	0x54442d18
 80094bc:	3ff921fb 	.word	0x3ff921fb
 80094c0:	3ff00000 	.word	0x3ff00000
 80094c4:	3fe00000 	.word	0x3fe00000

080094c8 <__ieee754_sqrt>:
 80094c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094cc:	ec55 4b10 	vmov	r4, r5, d0
 80094d0:	4e55      	ldr	r6, [pc, #340]	; (8009628 <__ieee754_sqrt+0x160>)
 80094d2:	43ae      	bics	r6, r5
 80094d4:	ee10 0a10 	vmov	r0, s0
 80094d8:	ee10 3a10 	vmov	r3, s0
 80094dc:	462a      	mov	r2, r5
 80094de:	4629      	mov	r1, r5
 80094e0:	d110      	bne.n	8009504 <__ieee754_sqrt+0x3c>
 80094e2:	ee10 2a10 	vmov	r2, s0
 80094e6:	462b      	mov	r3, r5
 80094e8:	f7f7 f89e 	bl	8000628 <__aeabi_dmul>
 80094ec:	4602      	mov	r2, r0
 80094ee:	460b      	mov	r3, r1
 80094f0:	4620      	mov	r0, r4
 80094f2:	4629      	mov	r1, r5
 80094f4:	f7f6 fee2 	bl	80002bc <__adddf3>
 80094f8:	4604      	mov	r4, r0
 80094fa:	460d      	mov	r5, r1
 80094fc:	ec45 4b10 	vmov	d0, r4, r5
 8009500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009504:	2d00      	cmp	r5, #0
 8009506:	dc10      	bgt.n	800952a <__ieee754_sqrt+0x62>
 8009508:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800950c:	4330      	orrs	r0, r6
 800950e:	d0f5      	beq.n	80094fc <__ieee754_sqrt+0x34>
 8009510:	b15d      	cbz	r5, 800952a <__ieee754_sqrt+0x62>
 8009512:	ee10 2a10 	vmov	r2, s0
 8009516:	462b      	mov	r3, r5
 8009518:	ee10 0a10 	vmov	r0, s0
 800951c:	f7f6 fecc 	bl	80002b8 <__aeabi_dsub>
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	f7f7 f9aa 	bl	800087c <__aeabi_ddiv>
 8009528:	e7e6      	b.n	80094f8 <__ieee754_sqrt+0x30>
 800952a:	1512      	asrs	r2, r2, #20
 800952c:	d074      	beq.n	8009618 <__ieee754_sqrt+0x150>
 800952e:	07d4      	lsls	r4, r2, #31
 8009530:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009534:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800953c:	bf5e      	ittt	pl
 800953e:	0fda      	lsrpl	r2, r3, #31
 8009540:	005b      	lslpl	r3, r3, #1
 8009542:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009546:	2400      	movs	r4, #0
 8009548:	0fda      	lsrs	r2, r3, #31
 800954a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800954e:	107f      	asrs	r7, r7, #1
 8009550:	005b      	lsls	r3, r3, #1
 8009552:	2516      	movs	r5, #22
 8009554:	4620      	mov	r0, r4
 8009556:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800955a:	1886      	adds	r6, r0, r2
 800955c:	428e      	cmp	r6, r1
 800955e:	bfde      	ittt	le
 8009560:	1b89      	suble	r1, r1, r6
 8009562:	18b0      	addle	r0, r6, r2
 8009564:	18a4      	addle	r4, r4, r2
 8009566:	0049      	lsls	r1, r1, #1
 8009568:	3d01      	subs	r5, #1
 800956a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800956e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009572:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009576:	d1f0      	bne.n	800955a <__ieee754_sqrt+0x92>
 8009578:	462a      	mov	r2, r5
 800957a:	f04f 0e20 	mov.w	lr, #32
 800957e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009582:	4281      	cmp	r1, r0
 8009584:	eb06 0c05 	add.w	ip, r6, r5
 8009588:	dc02      	bgt.n	8009590 <__ieee754_sqrt+0xc8>
 800958a:	d113      	bne.n	80095b4 <__ieee754_sqrt+0xec>
 800958c:	459c      	cmp	ip, r3
 800958e:	d811      	bhi.n	80095b4 <__ieee754_sqrt+0xec>
 8009590:	f1bc 0f00 	cmp.w	ip, #0
 8009594:	eb0c 0506 	add.w	r5, ip, r6
 8009598:	da43      	bge.n	8009622 <__ieee754_sqrt+0x15a>
 800959a:	2d00      	cmp	r5, #0
 800959c:	db41      	blt.n	8009622 <__ieee754_sqrt+0x15a>
 800959e:	f100 0801 	add.w	r8, r0, #1
 80095a2:	1a09      	subs	r1, r1, r0
 80095a4:	459c      	cmp	ip, r3
 80095a6:	bf88      	it	hi
 80095a8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80095ac:	eba3 030c 	sub.w	r3, r3, ip
 80095b0:	4432      	add	r2, r6
 80095b2:	4640      	mov	r0, r8
 80095b4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80095b8:	f1be 0e01 	subs.w	lr, lr, #1
 80095bc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80095c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80095c4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80095c8:	d1db      	bne.n	8009582 <__ieee754_sqrt+0xba>
 80095ca:	430b      	orrs	r3, r1
 80095cc:	d006      	beq.n	80095dc <__ieee754_sqrt+0x114>
 80095ce:	1c50      	adds	r0, r2, #1
 80095d0:	bf13      	iteet	ne
 80095d2:	3201      	addne	r2, #1
 80095d4:	3401      	addeq	r4, #1
 80095d6:	4672      	moveq	r2, lr
 80095d8:	f022 0201 	bicne.w	r2, r2, #1
 80095dc:	1063      	asrs	r3, r4, #1
 80095de:	0852      	lsrs	r2, r2, #1
 80095e0:	07e1      	lsls	r1, r4, #31
 80095e2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80095e6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80095ea:	bf48      	it	mi
 80095ec:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80095f0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80095f4:	4614      	mov	r4, r2
 80095f6:	e781      	b.n	80094fc <__ieee754_sqrt+0x34>
 80095f8:	0ad9      	lsrs	r1, r3, #11
 80095fa:	3815      	subs	r0, #21
 80095fc:	055b      	lsls	r3, r3, #21
 80095fe:	2900      	cmp	r1, #0
 8009600:	d0fa      	beq.n	80095f8 <__ieee754_sqrt+0x130>
 8009602:	02cd      	lsls	r5, r1, #11
 8009604:	d50a      	bpl.n	800961c <__ieee754_sqrt+0x154>
 8009606:	f1c2 0420 	rsb	r4, r2, #32
 800960a:	fa23 f404 	lsr.w	r4, r3, r4
 800960e:	1e55      	subs	r5, r2, #1
 8009610:	4093      	lsls	r3, r2
 8009612:	4321      	orrs	r1, r4
 8009614:	1b42      	subs	r2, r0, r5
 8009616:	e78a      	b.n	800952e <__ieee754_sqrt+0x66>
 8009618:	4610      	mov	r0, r2
 800961a:	e7f0      	b.n	80095fe <__ieee754_sqrt+0x136>
 800961c:	0049      	lsls	r1, r1, #1
 800961e:	3201      	adds	r2, #1
 8009620:	e7ef      	b.n	8009602 <__ieee754_sqrt+0x13a>
 8009622:	4680      	mov	r8, r0
 8009624:	e7bd      	b.n	80095a2 <__ieee754_sqrt+0xda>
 8009626:	bf00      	nop
 8009628:	7ff00000 	.word	0x7ff00000

0800962c <__ieee754_sqrtf>:
 800962c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009630:	4770      	bx	lr

08009632 <fabs>:
 8009632:	ec51 0b10 	vmov	r0, r1, d0
 8009636:	ee10 2a10 	vmov	r2, s0
 800963a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800963e:	ec43 2b10 	vmov	d0, r2, r3
 8009642:	4770      	bx	lr

08009644 <_init>:
 8009644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009646:	bf00      	nop
 8009648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800964a:	bc08      	pop	{r3}
 800964c:	469e      	mov	lr, r3
 800964e:	4770      	bx	lr

08009650 <_fini>:
 8009650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009652:	bf00      	nop
 8009654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009656:	bc08      	pop	{r3}
 8009658:	469e      	mov	lr, r3
 800965a:	4770      	bx	lr
