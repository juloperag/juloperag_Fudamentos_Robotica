
Prog_A_Start_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000862c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  080087d0  080087d0  000187d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d04  08008d04  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008d04  08008d04  00018d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d0c  08008d0c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d0c  08008d0c  00018d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d10  08008d10  00018d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aac  200001e8  08008efc  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c94  08008efc  00020c94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003be0  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001009  00000000  00000000  00023df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000328  00000000  00000000  00024e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000290  00000000  00000000  00025130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010834  00000000  00000000  000253c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004fd0  00000000  00000000  00035bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057495  00000000  00000000  0003abc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00092059  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002390  00000000  00000000  000920ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080087b4 	.word	0x080087b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	080087b4 	.word	0x080087b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9dd 	b.w	8001074 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f86b 	bl	8000da4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f85e 	bl	8000da4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f84d 	bl	8000da4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f83f 	bl	8000da4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_d2lz>:
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	4604      	mov	r4, r0
 8000d40:	460d      	mov	r5, r1
 8000d42:	f7ff fed3 	bl	8000aec <__aeabi_dcmplt>
 8000d46:	b928      	cbnz	r0, 8000d54 <__aeabi_d2lz+0x1c>
 8000d48:	4620      	mov	r0, r4
 8000d4a:	4629      	mov	r1, r5
 8000d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d50:	f000 b80a 	b.w	8000d68 <__aeabi_d2ulz>
 8000d54:	4620      	mov	r0, r4
 8000d56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d5a:	f000 f805 	bl	8000d68 <__aeabi_d2ulz>
 8000d5e:	4240      	negs	r0, r0
 8000d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d64:	bd38      	pop	{r3, r4, r5, pc}
 8000d66:	bf00      	nop

08000d68 <__aeabi_d2ulz>:
 8000d68:	b5d0      	push	{r4, r6, r7, lr}
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__aeabi_d2ulz+0x34>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4606      	mov	r6, r0
 8000d70:	460f      	mov	r7, r1
 8000d72:	f7ff fc49 	bl	8000608 <__aeabi_dmul>
 8000d76:	f7ff ff1f 	bl	8000bb8 <__aeabi_d2uiz>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	f7ff fbca 	bl	8000514 <__aeabi_ui2d>
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <__aeabi_d2ulz+0x38>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	f7ff fc40 	bl	8000608 <__aeabi_dmul>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	4639      	mov	r1, r7
 8000d90:	f7ff fa82 	bl	8000298 <__aeabi_dsub>
 8000d94:	f7ff ff10 	bl	8000bb8 <__aeabi_d2uiz>
 8000d98:	4621      	mov	r1, r4
 8000d9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d9c:	3df00000 	.word	0x3df00000
 8000da0:	41f00000 	.word	0x41f00000

08000da4 <__udivmoddi4>:
 8000da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da8:	9d08      	ldr	r5, [sp, #32]
 8000daa:	4604      	mov	r4, r0
 8000dac:	468e      	mov	lr, r1
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d14d      	bne.n	8000e4e <__udivmoddi4+0xaa>
 8000db2:	428a      	cmp	r2, r1
 8000db4:	4694      	mov	ip, r2
 8000db6:	d969      	bls.n	8000e8c <__udivmoddi4+0xe8>
 8000db8:	fab2 f282 	clz	r2, r2
 8000dbc:	b152      	cbz	r2, 8000dd4 <__udivmoddi4+0x30>
 8000dbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000dc2:	f1c2 0120 	rsb	r1, r2, #32
 8000dc6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dce:	ea41 0e03 	orr.w	lr, r1, r3
 8000dd2:	4094      	lsls	r4, r2
 8000dd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd8:	0c21      	lsrs	r1, r4, #16
 8000dda:	fbbe f6f8 	udiv	r6, lr, r8
 8000dde:	fa1f f78c 	uxth.w	r7, ip
 8000de2:	fb08 e316 	mls	r3, r8, r6, lr
 8000de6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dea:	fb06 f107 	mul.w	r1, r6, r7
 8000dee:	4299      	cmp	r1, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x64>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dfa:	f080 811f 	bcs.w	800103c <__udivmoddi4+0x298>
 8000dfe:	4299      	cmp	r1, r3
 8000e00:	f240 811c 	bls.w	800103c <__udivmoddi4+0x298>
 8000e04:	3e02      	subs	r6, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	1a5b      	subs	r3, r3, r1
 8000e0a:	b2a4      	uxth	r4, r4
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e18:	fb00 f707 	mul.w	r7, r0, r7
 8000e1c:	42a7      	cmp	r7, r4
 8000e1e:	d90a      	bls.n	8000e36 <__udivmoddi4+0x92>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e28:	f080 810a 	bcs.w	8001040 <__udivmoddi4+0x29c>
 8000e2c:	42a7      	cmp	r7, r4
 8000e2e:	f240 8107 	bls.w	8001040 <__udivmoddi4+0x29c>
 8000e32:	4464      	add	r4, ip
 8000e34:	3802      	subs	r0, #2
 8000e36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e3a:	1be4      	subs	r4, r4, r7
 8000e3c:	2600      	movs	r6, #0
 8000e3e:	b11d      	cbz	r5, 8000e48 <__udivmoddi4+0xa4>
 8000e40:	40d4      	lsrs	r4, r2
 8000e42:	2300      	movs	r3, #0
 8000e44:	e9c5 4300 	strd	r4, r3, [r5]
 8000e48:	4631      	mov	r1, r6
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d909      	bls.n	8000e66 <__udivmoddi4+0xc2>
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	f000 80ef 	beq.w	8001036 <__udivmoddi4+0x292>
 8000e58:	2600      	movs	r6, #0
 8000e5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5e:	4630      	mov	r0, r6
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	fab3 f683 	clz	r6, r3
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	d14a      	bne.n	8000f04 <__udivmoddi4+0x160>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d302      	bcc.n	8000e78 <__udivmoddi4+0xd4>
 8000e72:	4282      	cmp	r2, r0
 8000e74:	f200 80f9 	bhi.w	800106a <__udivmoddi4+0x2c6>
 8000e78:	1a84      	subs	r4, r0, r2
 8000e7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e7e:	2001      	movs	r0, #1
 8000e80:	469e      	mov	lr, r3
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	d0e0      	beq.n	8000e48 <__udivmoddi4+0xa4>
 8000e86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e8a:	e7dd      	b.n	8000e48 <__udivmoddi4+0xa4>
 8000e8c:	b902      	cbnz	r2, 8000e90 <__udivmoddi4+0xec>
 8000e8e:	deff      	udf	#255	; 0xff
 8000e90:	fab2 f282 	clz	r2, r2
 8000e94:	2a00      	cmp	r2, #0
 8000e96:	f040 8092 	bne.w	8000fbe <__udivmoddi4+0x21a>
 8000e9a:	eba1 010c 	sub.w	r1, r1, ip
 8000e9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea2:	fa1f fe8c 	uxth.w	lr, ip
 8000ea6:	2601      	movs	r6, #1
 8000ea8:	0c20      	lsrs	r0, r4, #16
 8000eaa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000eae:	fb07 1113 	mls	r1, r7, r3, r1
 8000eb2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb6:	fb0e f003 	mul.w	r0, lr, r3
 8000eba:	4288      	cmp	r0, r1
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x12c>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ec6:	d202      	bcs.n	8000ece <__udivmoddi4+0x12a>
 8000ec8:	4288      	cmp	r0, r1
 8000eca:	f200 80cb 	bhi.w	8001064 <__udivmoddi4+0x2c0>
 8000ece:	4643      	mov	r3, r8
 8000ed0:	1a09      	subs	r1, r1, r0
 8000ed2:	b2a4      	uxth	r4, r4
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1110 	mls	r1, r7, r0, r1
 8000edc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ee0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ee4:	45a6      	cmp	lr, r4
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x156>
 8000ee8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef0:	d202      	bcs.n	8000ef8 <__udivmoddi4+0x154>
 8000ef2:	45a6      	cmp	lr, r4
 8000ef4:	f200 80bb 	bhi.w	800106e <__udivmoddi4+0x2ca>
 8000ef8:	4608      	mov	r0, r1
 8000efa:	eba4 040e 	sub.w	r4, r4, lr
 8000efe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f02:	e79c      	b.n	8000e3e <__udivmoddi4+0x9a>
 8000f04:	f1c6 0720 	rsb	r7, r6, #32
 8000f08:	40b3      	lsls	r3, r6
 8000f0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f12:	fa20 f407 	lsr.w	r4, r0, r7
 8000f16:	fa01 f306 	lsl.w	r3, r1, r6
 8000f1a:	431c      	orrs	r4, r3
 8000f1c:	40f9      	lsrs	r1, r7
 8000f1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f22:	fa00 f306 	lsl.w	r3, r0, r6
 8000f26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f2a:	0c20      	lsrs	r0, r4, #16
 8000f2c:	fa1f fe8c 	uxth.w	lr, ip
 8000f30:	fb09 1118 	mls	r1, r9, r8, r1
 8000f34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f38:	fb08 f00e 	mul.w	r0, r8, lr
 8000f3c:	4288      	cmp	r0, r1
 8000f3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f42:	d90b      	bls.n	8000f5c <__udivmoddi4+0x1b8>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f4c:	f080 8088 	bcs.w	8001060 <__udivmoddi4+0x2bc>
 8000f50:	4288      	cmp	r0, r1
 8000f52:	f240 8085 	bls.w	8001060 <__udivmoddi4+0x2bc>
 8000f56:	f1a8 0802 	sub.w	r8, r8, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	1a09      	subs	r1, r1, r0
 8000f5e:	b2a4      	uxth	r4, r4
 8000f60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f64:	fb09 1110 	mls	r1, r9, r0, r1
 8000f68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f70:	458e      	cmp	lr, r1
 8000f72:	d908      	bls.n	8000f86 <__udivmoddi4+0x1e2>
 8000f74:	eb1c 0101 	adds.w	r1, ip, r1
 8000f78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f7c:	d26c      	bcs.n	8001058 <__udivmoddi4+0x2b4>
 8000f7e:	458e      	cmp	lr, r1
 8000f80:	d96a      	bls.n	8001058 <__udivmoddi4+0x2b4>
 8000f82:	3802      	subs	r0, #2
 8000f84:	4461      	add	r1, ip
 8000f86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f8e:	eba1 010e 	sub.w	r1, r1, lr
 8000f92:	42a1      	cmp	r1, r4
 8000f94:	46c8      	mov	r8, r9
 8000f96:	46a6      	mov	lr, r4
 8000f98:	d356      	bcc.n	8001048 <__udivmoddi4+0x2a4>
 8000f9a:	d053      	beq.n	8001044 <__udivmoddi4+0x2a0>
 8000f9c:	b15d      	cbz	r5, 8000fb6 <__udivmoddi4+0x212>
 8000f9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000fa2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fa6:	fa01 f707 	lsl.w	r7, r1, r7
 8000faa:	fa22 f306 	lsr.w	r3, r2, r6
 8000fae:	40f1      	lsrs	r1, r6
 8000fb0:	431f      	orrs	r7, r3
 8000fb2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fb6:	2600      	movs	r6, #0
 8000fb8:	4631      	mov	r1, r6
 8000fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fbe:	f1c2 0320 	rsb	r3, r2, #32
 8000fc2:	40d8      	lsrs	r0, r3
 8000fc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fcc:	4091      	lsls	r1, r2
 8000fce:	4301      	orrs	r1, r0
 8000fd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fd4:	fa1f fe8c 	uxth.w	lr, ip
 8000fd8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fdc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fe0:	0c0b      	lsrs	r3, r1, #16
 8000fe2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fe6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fea:	429e      	cmp	r6, r3
 8000fec:	fa04 f402 	lsl.w	r4, r4, r2
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x260>
 8000ff2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ffa:	d22f      	bcs.n	800105c <__udivmoddi4+0x2b8>
 8000ffc:	429e      	cmp	r6, r3
 8000ffe:	d92d      	bls.n	800105c <__udivmoddi4+0x2b8>
 8001000:	3802      	subs	r0, #2
 8001002:	4463      	add	r3, ip
 8001004:	1b9b      	subs	r3, r3, r6
 8001006:	b289      	uxth	r1, r1
 8001008:	fbb3 f6f7 	udiv	r6, r3, r7
 800100c:	fb07 3316 	mls	r3, r7, r6, r3
 8001010:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001014:	fb06 f30e 	mul.w	r3, r6, lr
 8001018:	428b      	cmp	r3, r1
 800101a:	d908      	bls.n	800102e <__udivmoddi4+0x28a>
 800101c:	eb1c 0101 	adds.w	r1, ip, r1
 8001020:	f106 38ff 	add.w	r8, r6, #4294967295
 8001024:	d216      	bcs.n	8001054 <__udivmoddi4+0x2b0>
 8001026:	428b      	cmp	r3, r1
 8001028:	d914      	bls.n	8001054 <__udivmoddi4+0x2b0>
 800102a:	3e02      	subs	r6, #2
 800102c:	4461      	add	r1, ip
 800102e:	1ac9      	subs	r1, r1, r3
 8001030:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001034:	e738      	b.n	8000ea8 <__udivmoddi4+0x104>
 8001036:	462e      	mov	r6, r5
 8001038:	4628      	mov	r0, r5
 800103a:	e705      	b.n	8000e48 <__udivmoddi4+0xa4>
 800103c:	4606      	mov	r6, r0
 800103e:	e6e3      	b.n	8000e08 <__udivmoddi4+0x64>
 8001040:	4618      	mov	r0, r3
 8001042:	e6f8      	b.n	8000e36 <__udivmoddi4+0x92>
 8001044:	454b      	cmp	r3, r9
 8001046:	d2a9      	bcs.n	8000f9c <__udivmoddi4+0x1f8>
 8001048:	ebb9 0802 	subs.w	r8, r9, r2
 800104c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001050:	3801      	subs	r0, #1
 8001052:	e7a3      	b.n	8000f9c <__udivmoddi4+0x1f8>
 8001054:	4646      	mov	r6, r8
 8001056:	e7ea      	b.n	800102e <__udivmoddi4+0x28a>
 8001058:	4620      	mov	r0, r4
 800105a:	e794      	b.n	8000f86 <__udivmoddi4+0x1e2>
 800105c:	4640      	mov	r0, r8
 800105e:	e7d1      	b.n	8001004 <__udivmoddi4+0x260>
 8001060:	46d0      	mov	r8, sl
 8001062:	e77b      	b.n	8000f5c <__udivmoddi4+0x1b8>
 8001064:	3b02      	subs	r3, #2
 8001066:	4461      	add	r1, ip
 8001068:	e732      	b.n	8000ed0 <__udivmoddi4+0x12c>
 800106a:	4630      	mov	r0, r6
 800106c:	e709      	b.n	8000e82 <__udivmoddi4+0xde>
 800106e:	4464      	add	r4, ip
 8001070:	3802      	subs	r0, #2
 8001072:	e742      	b.n	8000efa <__udivmoddi4+0x156>

08001074 <__aeabi_idiv0>:
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <aplicattion_A_Star>:
#include "A_Star.h"
#include <float.h>
#include <math.h>

//-----------------------------------------------Funciones para la implementacion de A Star------------------------------------------------------------------
file_cell_t* aplicattion_A_Star(Cell_map_t **grid, uint8_t row, uint8_t colum, float start_x, float start_y, float goal_x, float goal_y) {
 8001078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800107c:	b0d7      	sub	sp, #348	; 0x15c
 800107e:	af00      	add	r7, sp, #0
 8001080:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001084:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001088:	6018      	str	r0, [r3, #0]
 800108a:	4608      	mov	r0, r1
 800108c:	4611      	mov	r1, r2
 800108e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001092:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001096:	ed83 0a00 	vstr	s0, [r3]
 800109a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800109e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80010a2:	edc3 0a00 	vstr	s1, [r3]
 80010a6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80010aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80010ae:	ed83 1a00 	vstr	s2, [r3]
 80010b2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80010b6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80010ba:	edc3 1a00 	vstr	s3, [r3]
 80010be:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80010c2:	f2a3 1335 	subw	r3, r3, #309	; 0x135
 80010c6:	4602      	mov	r2, r0
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80010ce:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80010d2:	460a      	mov	r2, r1
 80010d4:	701a      	strb	r2, [r3, #0]
  //Variables
  file_cell_t *ptrFile;                           //Puntero a la ficha de la secuencia actual de A Star
  file_cell_t *file_Open[64] = {0};               //Arreglo de fichas abiertas
 80010d6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80010da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80010de:	4618      	mov	r0, r3
 80010e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e4:	461a      	mov	r2, r3
 80010e6:	2100      	movs	r1, #0
 80010e8:	f002 fa9a 	bl	8003620 <memset>
  uint64_t file_Open_Availability = 0b1;          //Conjunto de bits que indica que fichas abiertas estan disponibles para la comparacion
 80010ec:	f04f 0201 	mov.w	r2, #1
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  uint8_t bit_file_cell = 0;                      //bit de una ficha que indica su disponibilidad
 80010f8:	2300      	movs	r3, #0
 80010fa:	f887 3130 	strb.w	r3, [r7, #304]	; 0x130
  uint8_t index_ptr = 0;                          //Indice de la ficha de la secuencia actual de A Star
 80010fe:	2300      	movs	r3, #0
 8001100:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
  float min_h;                                    //Valor minimo de la heuristica H
  uint8_t index_file_Open;                        //Indice de la ficha de la ficha abierta a crear

  //----------------Se crea la ficha inicial----------------
  //Se crea la ficha inicial
  file_Open[0] = (file_cell_t *)malloc(sizeof(file_cell_t));
 8001104:	f44f 7088 	mov.w	r0, #272	; 0x110
 8001108:	f002 fa7a 	bl	8003600 <malloc>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001114:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001118:	601a      	str	r2, [r3, #0]
  file_Open[0]->num_parent = 0;
 800111a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800111e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
  file_Open[0]->cost_g = 0.0f; 
 800112a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800112e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  //Por medio de un puntero se asigna la ficha inicial
  ptrFile = file_Open[0];
 800113c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001140:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  
  // ------------- Se identifica la celda inicial -----------
  for (int i = 0; i < row; i++) 
 800114a:	2300      	movs	r3, #0
 800114c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001150:	e06a      	b.n	8001228 <aplicattion_A_Star+0x1b0>
  {
    for (int j = 0; j < colum; j++) 
 8001152:	2300      	movs	r3, #0
 8001154:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001158:	e058      	b.n	800120c <aplicattion_A_Star+0x194>
    {
      if (grid[i][j].coor_x == start_x && grid[i][j].coor_y == start_y) 
 800115a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8001164:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8001168:	6812      	ldr	r2, [r2, #0]
 800116a:	4413      	add	r3, r2
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001172:	2154      	movs	r1, #84	; 0x54
 8001174:	fb01 f303 	mul.w	r3, r1, r3
 8001178:	4413      	add	r3, r2
 800117a:	edd3 7a01 	vldr	s15, [r3, #4]
 800117e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001182:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001186:	ed93 7a00 	vldr	s14, [r3]
 800118a:	eeb4 7a67 	vcmp.f32	s14, s15
 800118e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001192:	d136      	bne.n	8001202 <aplicattion_A_Star+0x18a>
 8001194:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800119e:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80011ac:	2154      	movs	r1, #84	; 0x54
 80011ae:	fb01 f303 	mul.w	r3, r1, r3
 80011b2:	4413      	add	r3, r2
 80011b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80011b8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80011bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80011c0:	ed93 7a00 	vldr	s14, [r3]
 80011c4:	eeb4 7a67 	vcmp.f32	s14, s15
 80011c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011cc:	d119      	bne.n	8001202 <aplicattion_A_Star+0x18a>
      {
        ptrFile->ptrCell_file = &grid[i][j];  
 80011ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80011d8:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80011dc:	6812      	ldr	r2, [r2, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80011e6:	2154      	movs	r1, #84	; 0x54
 80011e8:	fb01 f303 	mul.w	r3, r1, r3
 80011ec:	441a      	add	r2, r3
 80011ee:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80011f2:	601a      	str	r2, [r3, #0]
        ptrFile->ptrCell_file->status  = OPEN;
 80011f4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        break;
 8001200:	e00d      	b.n	800121e <aplicattion_A_Star+0x1a6>
    for (int j = 0; j < colum; j++) 
 8001202:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001206:	3301      	adds	r3, #1
 8001208:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800120c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001210:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800121a:	429a      	cmp	r2, r3
 800121c:	db9d      	blt.n	800115a <aplicattion_A_Star+0xe2>
  for (int i = 0; i < row; i++) 
 800121e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001222:	3301      	adds	r3, #1
 8001224:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001228:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800122c:	f2a3 1335 	subw	r3, r3, #309	; 0x135
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001236:	429a      	cmp	r2, r3
 8001238:	db8b      	blt.n	8001152 <aplicattion_A_Star+0xda>
    }
  }

  while (1) {
    // Inicializamos variables
    min_f = DBL_MAX;
 800123a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800123e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    min_h = DBL_MAX;
 8001242:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8001246:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    //---------------------Creacion de las diferentes fichas de las celdas vecinas-----------------
    for(uint8_t k = 0; k < 8; k++) 
 800124a:	2300      	movs	r3, #0
 800124c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
 8001250:	e0ff      	b.n	8001452 <aplicattion_A_Star+0x3da>
    {
      if(ptrFile->ptrCell_file->neighbors.ptrCellMap[k] != NULL) 
 8001252:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800125c:	3302      	adds	r3, #2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 80ef 	beq.w	8001448 <aplicattion_A_Star+0x3d0>
      {
        if(ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->h != -1.0f && ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->status < OPEN)
 800126a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8001274:	3302      	adds	r3, #2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001280:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001284:	eef4 7a47 	vcmp.f32	s15, s14
 8001288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128c:	f000 80dc 	beq.w	8001448 <aplicattion_A_Star+0x3d0>
 8001290:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800129a:	3302      	adds	r3, #2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f040 80ce 	bne.w	8001448 <aplicattion_A_Star+0x3d0>
        {
          //Se busca la posicion que ocupada la nueva ficha en la lista de fichas abiertas
          index_file_Open = search_position_file_Open(file_Open, file_Open_Availability);
 80012ac:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80012b0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80012b4:	4608      	mov	r0, r1
 80012b6:	f000 f9bd 	bl	8001634 <search_position_file_Open>
 80012ba:	4603      	mov	r3, r0
 80012bc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
          //Se abre la celda
          ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->status = OPEN;
 80012c0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80012ca:	3302      	adds	r3, #2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          //Se crea la ficha
          file_Open[index_file_Open] = (file_cell_t *)malloc(sizeof(file_cell_t));
 80012d8:	f897 412f 	ldrb.w	r4, [r7, #303]	; 0x12f
 80012dc:	f44f 7088 	mov.w	r0, #272	; 0x110
 80012e0:	f002 f98e 	bl	8003600 <malloc>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80012f0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
          file_Open[index_file_Open]->ptrCell_file = ptrFile->ptrCell_file->neighbors.ptrCellMap[k];
 80012f4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80012f8:	6819      	ldr	r1, [r3, #0]
 80012fa:	f897 0133 	ldrb.w	r0, [r7, #307]	; 0x133
 80012fe:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8001302:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001306:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800130a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800130e:	1c83      	adds	r3, r0, #2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	440b      	add	r3, r1
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	6013      	str	r3, [r2, #0]
          for(uint8_t u = 0; u < ptrFile->num_parent; u++)
 8001318:	2300      	movs	r3, #0
 800131a:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
 800131e:	e018      	b.n	8001352 <aplicattion_A_Star+0x2da>
          {
            file_Open[index_file_Open]->ptrCell_parent[u] = ptrFile->ptrCell_parent[u];
 8001320:	f897 1132 	ldrb.w	r1, [r7, #306]	; 0x132
 8001324:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8001328:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800132c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001330:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001334:	f897 4132 	ldrb.w	r4, [r7, #306]	; 0x132
 8001338:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800133c:	008b      	lsls	r3, r1, #2
 800133e:	4413      	add	r3, r2
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	00a3      	lsls	r3, r4, #2
 8001344:	4403      	add	r3, r0
 8001346:	605a      	str	r2, [r3, #4]
          for(uint8_t u = 0; u < ptrFile->num_parent; u++)
 8001348:	f897 3132 	ldrb.w	r3, [r7, #306]	; 0x132
 800134c:	3301      	adds	r3, #1
 800134e:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
 8001352:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001356:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800135a:	f897 2132 	ldrb.w	r2, [r7, #306]	; 0x132
 800135e:	429a      	cmp	r2, r3
 8001360:	d3de      	bcc.n	8001320 <aplicattion_A_Star+0x2a8>
          }
          file_Open[index_file_Open]->ptrCell_parent[ptrFile->num_parent] = ptrFile->ptrCell_file;
 8001362:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8001366:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800136a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800136e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001372:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001376:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800137a:	4618      	mov	r0, r3
 800137c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	0083      	lsls	r3, r0, #2
 8001384:	440b      	add	r3, r1
 8001386:	605a      	str	r2, [r3, #4]
          file_Open[index_file_Open]->num_parent = ptrFile->num_parent+1;
 8001388:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800138c:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 8001390:	f897 112f 	ldrb.w	r1, [r7, #303]	; 0x12f
 8001394:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001398:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800139c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013a0:	3201      	adds	r2, #1
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
          file_Open[index_file_Open]->cost_g = ptrFile->ptrCell_file->neighbors.distance_neigh[k]+ptrFile->cost_g;
 80013a8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80013b2:	330a      	adds	r3, #10
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	3304      	adds	r3, #4
 80013ba:	ed93 7a00 	vldr	s14, [r3]
 80013be:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80013c2:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 80013c6:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 80013ca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80013ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013da:	edc3 7a42 	vstr	s15, [r3, #264]	; 0x108
          file_Open[index_file_Open]->function_F = file_Open[index_file_Open]->cost_g + ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->h;
 80013de:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 80013e2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80013e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ee:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
 80013f2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80013fc:	3302      	adds	r3, #2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001408:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 800140c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001410:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141c:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
          //Indicacion de la disponibilidad de la ficha
          file_Open_Availability |= (0b1 << index_file_Open);
 8001420:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001424:	2201      	movs	r2, #1
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	17da      	asrs	r2, r3, #31
 800142c:	469a      	mov	sl, r3
 800142e:	4693      	mov	fp, r2
 8001430:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001434:	ea42 010a 	orr.w	r1, r2, sl
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	ea43 030b 	orr.w	r3, r3, fp
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001444:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    for(uint8_t k = 0; k < 8; k++) 
 8001448:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800144c:	3301      	adds	r3, #1
 800144e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
 8001452:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8001456:	2b07      	cmp	r3, #7
 8001458:	f67f aefb 	bls.w	8001252 <aplicattion_A_Star+0x1da>
      }
    }
    
    //-----------------Cerramos la ficha actual del puntero----------------------
    //indicamos el nuevo estado de la celda
    ptrFile->ptrCell_file->status = CLOSED;
 800145c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2202      	movs	r2, #2
 8001464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    //Liberamos la memoria del arreglo de fichas
    free(ptrFile);
 8001468:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800146c:	f002 f8d0 	bl	8003610 <free>
    //Indicacion de la no disponibilidad de la ficha
    file_Open_Availability &=  ~(0b1 << index_ptr);
 8001470:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8001474:	2201      	movs	r2, #1
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	17da      	asrs	r2, r3, #31
 800147e:	461d      	mov	r5, r3
 8001480:	4616      	mov	r6, r2
 8001482:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001486:	ea02 0105 	and.w	r1, r2, r5
 800148a:	6039      	str	r1, [r7, #0]
 800148c:	4033      	ands	r3, r6
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001494:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
     
    //---------------- Comparación función F ---------------------
    for (uint8_t k = 0; k < 64; k++) {
 8001498:	2300      	movs	r3, #0
 800149a:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
 800149e:	e08f      	b.n	80015c0 <aplicattion_A_Star+0x548>
      //Recorrido
      bit_file_cell = (file_Open_Availability >> k) & 0b1;
 80014a0:	f897 0131 	ldrb.w	r0, [r7, #305]	; 0x131
 80014a4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80014a8:	f1c0 0420 	rsb	r4, r0, #32
 80014ac:	f1a0 0120 	sub.w	r1, r0, #32
 80014b0:	fa22 f800 	lsr.w	r8, r2, r0
 80014b4:	fa03 f404 	lsl.w	r4, r3, r4
 80014b8:	ea48 0804 	orr.w	r8, r8, r4
 80014bc:	fa23 f101 	lsr.w	r1, r3, r1
 80014c0:	ea48 0801 	orr.w	r8, r8, r1
 80014c4:	fa23 f900 	lsr.w	r9, r3, r0
 80014c8:	fa5f f388 	uxtb.w	r3, r8
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	f887 3130 	strb.w	r3, [r7, #304]	; 0x130
      //Se el bit es un valor logico de 1 entonces la ficha esta disponible para su comparacion con las demas
      if(bit_file_cell==1)
 80014d4:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d16c      	bne.n	80015b6 <aplicattion_A_Star+0x53e>
      {
        // Verificar que la función F sea menor al valor anterior
        if (file_Open[k]->function_F < min_f) {
 80014dc:	f897 2131 	ldrb.w	r2, [r7, #305]	; 0x131
 80014e0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80014e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ec:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 80014f0:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 80014f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fc:	dd1c      	ble.n	8001538 <aplicattion_A_Star+0x4c0>
          // Reemplazamos valores
          min_f = file_Open[k]->function_F;
 80014fe:	f897 2131 	ldrb.w	r2, [r7, #305]	; 0x131
 8001502:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001506:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800150a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800150e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001512:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
          min_h = file_Open[k]->ptrCell_file->h;
 8001516:	f897 2131 	ldrb.w	r2, [r7, #305]	; 0x131
 800151a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800151e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
          index_ptr = k;
 800152e:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 8001532:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 8001536:	e03e      	b.n	80015b6 <aplicattion_A_Star+0x53e>
        }
        // Verificar que la función F sea igual al valor anterior, si es así se desempata con el valor h
        else if (file_Open[k]->function_F == min_f) {
 8001538:	f897 2131 	ldrb.w	r2, [r7, #305]	; 0x131
 800153c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001540:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001548:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 800154c:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 8001550:	eeb4 7a67 	vcmp.f32	s14, s15
 8001554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001558:	d12d      	bne.n	80015b6 <aplicattion_A_Star+0x53e>
          if (file_Open[k]->ptrCell_file->h < min_h) {
 800155a:	f897 2131 	ldrb.w	r2, [r7, #305]	; 0x131
 800155e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001562:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001570:	ed97 7a4f 	vldr	s14, [r7, #316]	; 0x13c
 8001574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157c:	dd1b      	ble.n	80015b6 <aplicattion_A_Star+0x53e>
              // Reemplazamos valores
              min_f = file_Open[k]->function_F;
 800157e:	f897 2131 	ldrb.w	r2, [r7, #305]	; 0x131
 8001582:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001586:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800158a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800158e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001592:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
              min_h = file_Open[k]->ptrCell_file->h;
 8001596:	f897 2131 	ldrb.w	r2, [r7, #305]	; 0x131
 800159a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800159e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
              index_ptr = k;         
 80015ae:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 80015b2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
    for (uint8_t k = 0; k < 64; k++) {
 80015b6:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 80015ba:	3301      	adds	r3, #1
 80015bc:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
 80015c0:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 80015c4:	2b3f      	cmp	r3, #63	; 0x3f
 80015c6:	f67f af6b 	bls.w	80014a0 <aplicattion_A_Star+0x428>
        }
      }
    }
    
    //--------------- Seleccionamos nueva ficha para el puntero--------------------
    ptrFile = file_Open[index_ptr];
 80015ca:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 80015ce:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80015d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    
    //-----------------Verificacion si se llego al gol----------------------
    if (ptrFile->ptrCell_file->coor_x == goal_x && ptrFile->ptrCell_file->coor_y == goal_y) {
 80015de:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80015e8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80015ec:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80015f0:	ed93 7a00 	vldr	s14, [r3]
 80015f4:	eeb4 7a67 	vcmp.f32	s14, s15
 80015f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fc:	f47f ae1d 	bne.w	800123a <aplicattion_A_Star+0x1c2>
 8001600:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	edd3 7a02 	vldr	s15, [r3, #8]
 800160a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800160e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001612:	ed93 7a00 	vldr	s14, [r3]
 8001616:	eeb4 7a67 	vcmp.f32	s14, s15
 800161a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161e:	d000      	beq.n	8001622 <aplicattion_A_Star+0x5aa>
    min_f = DBL_MAX;
 8001620:	e60b      	b.n	800123a <aplicattion_A_Star+0x1c2>
        break;
 8001622:	bf00      	nop
    }
  }
  return ptrFile;
 8001624:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
}
 8001628:	4618      	mov	r0, r3
 800162a:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 800162e:	46bd      	mov	sp, r7
 8001630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001634 <search_position_file_Open>:



uint8_t search_position_file_Open(file_cell_t **list_file, uint64_t avan_file)
{
 8001634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001636:	b08b      	sub	sp, #44	; 0x2c
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	e9c7 2300 	strd	r2, r3, [r7]
  //Variables
  uint8_t bit_list = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 100;
 8001644:	2364      	movs	r3, #100	; 0x64
 8001646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  float value_f = 0;
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
  //bucle para recorrer la lista de bits
  for(int i = 0; i<64; i++)
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
 8001654:	e01e      	b.n	8001694 <search_position_file_Open+0x60>
  {
    //Recorrido
    bit_list = (avan_file >> i) & 0b1;
 8001656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800165a:	69f9      	ldr	r1, [r7, #28]
 800165c:	f1c1 0620 	rsb	r6, r1, #32
 8001660:	f1a1 0020 	sub.w	r0, r1, #32
 8001664:	fa22 f401 	lsr.w	r4, r2, r1
 8001668:	fa03 f606 	lsl.w	r6, r3, r6
 800166c:	4334      	orrs	r4, r6
 800166e:	fa23 f000 	lsr.w	r0, r3, r0
 8001672:	4304      	orrs	r4, r0
 8001674:	fa23 f501 	lsr.w	r5, r3, r1
 8001678:	b2e3      	uxtb	r3, r4
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	75fb      	strb	r3, [r7, #23]
    //Se comprueba el el bit de correspondiente a la disponibilidad de la ficha
    if(bit_list  == 0)
 8001680:	7dfb      	ldrb	r3, [r7, #23]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d103      	bne.n	800168e <search_position_file_Open+0x5a>
    {
      index = i;
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800168c:	e005      	b.n	800169a <search_position_file_Open+0x66>
  for(int i = 0; i<64; i++)
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3301      	adds	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	2b3f      	cmp	r3, #63	; 0x3f
 8001698:	dddd      	ble.n	8001656 <search_position_file_Open+0x22>
    }
  }
  /*En caso que no se indico un valor diferente a 100 para el indice, se busca una ubicacion dentro 
  de la lista de fichas abiertas, seleccionando aquella ubicacion donde el valor de la funcion f
  sea la mayor*/
  if (index == 100)
 800169a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800169e:	2b64      	cmp	r3, #100	; 0x64
 80016a0:	d131      	bne.n	8001706 <search_position_file_Open+0xd2>
  {  
    //Recorrido del arreglo de fichas abiertas
    for(int k = 0; k<64; k++)
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	e022      	b.n	80016ee <search_position_file_Open+0xba>
    {  
      //Se busca el mayor valor de la funcion f
      if(list_file[k] != NULL && list_file[k]->function_F > value_f)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	4413      	add	r3, r2
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d018      	beq.n	80016e8 <search_position_file_Open+0xb4>
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4413      	add	r3, r2
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 80016c4:	ed97 7a08 	vldr	s14, [r7, #32]
 80016c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d0:	d50a      	bpl.n	80016e8 <search_position_file_Open+0xb4>
      {
        value_f = list_file[k]->function_F;
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	4413      	add	r3, r2
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80016e0:	623b      	str	r3, [r7, #32]
        index = k;
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(int k = 0; k<64; k++)
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	3301      	adds	r3, #1
 80016ec:	61bb      	str	r3, [r7, #24]
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	2b3f      	cmp	r3, #63	; 0x3f
 80016f2:	ddd9      	ble.n	80016a8 <search_position_file_Open+0x74>
      }
    }
    //liberamos la memoria de la ficha
    free(list_file[index]);
 80016f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4413      	add	r3, r2
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f001 ff85 	bl	8003610 <free>
  }
  
  return index;
 8001706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800170a:	4618      	mov	r0, r3
 800170c:	372c      	adds	r7, #44	; 0x2c
 800170e:	46bd      	mov	sp, r7
 8001710:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001714 <heuristic_cell_map>:



//-----------------------------------------------Funciones calculo heuristica----------------------------------------------------------------
void heuristic_cell_map(Cell_map_t **grid, char **map_String, uint8_t row, uint8_t colum, float goal_x, float goal_y)
{
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6178      	str	r0, [r7, #20]
 800171c:	6139      	str	r1, [r7, #16]
 800171e:	4611      	mov	r1, r2
 8001720:	461a      	mov	r2, r3
 8001722:	ed87 0a02 	vstr	s0, [r7, #8]
 8001726:	edc7 0a01 	vstr	s1, [r7, #4]
 800172a:	460b      	mov	r3, r1
 800172c:	73fb      	strb	r3, [r7, #15]
 800172e:	4613      	mov	r3, r2
 8001730:	73bb      	strb	r3, [r7, #14]
  //Recorrido por cada una de las celdas
  for (int i = 0; i < row; i++)
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
 8001736:	e076      	b.n	8001826 <heuristic_cell_map+0x112>
  {
    for (int j = 0; j < colum; j++) 
 8001738:	2300      	movs	r3, #0
 800173a:	61bb      	str	r3, [r7, #24]
 800173c:	e06c      	b.n	8001818 <heuristic_cell_map+0x104>
    {
      //Calculo heuristica
      if(grid[i][j].coor_x == goal_x && grid[i][j].coor_y == goal_y)
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	4413      	add	r3, r2
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	2154      	movs	r1, #84	; 0x54
 800174c:	fb01 f303 	mul.w	r3, r1, r3
 8001750:	4413      	add	r3, r2
 8001752:	edd3 7a01 	vldr	s15, [r3, #4]
 8001756:	ed97 7a02 	vldr	s14, [r7, #8]
 800175a:	eeb4 7a67 	vcmp.f32	s14, s15
 800175e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001762:	d120      	bne.n	80017a6 <heuristic_cell_map+0x92>
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	4413      	add	r3, r2
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	2154      	movs	r1, #84	; 0x54
 8001772:	fb01 f303 	mul.w	r3, r1, r3
 8001776:	4413      	add	r3, r2
 8001778:	edd3 7a02 	vldr	s15, [r3, #8]
 800177c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001780:	eeb4 7a67 	vcmp.f32	s14, s15
 8001784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001788:	d10d      	bne.n	80017a6 <heuristic_cell_map+0x92>
      {
        grid[i][j].h = 0.0f;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4413      	add	r3, r2
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	2154      	movs	r1, #84	; 0x54
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80017a4:	e035      	b.n	8001812 <heuristic_cell_map+0xfe>
      }
      else if(map_String[i][j]=='#')
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4413      	add	r3, r2
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	4413      	add	r3, r2
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b23      	cmp	r3, #35	; 0x23
 80017b8:	d10c      	bne.n	80017d4 <heuristic_cell_map+0xc0>
      {
        grid[i][j].h = -1.0f;
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	4413      	add	r3, r2
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2154      	movs	r1, #84	; 0x54
 80017c8:	fb01 f303 	mul.w	r3, r1, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	4a1a      	ldr	r2, [pc, #104]	; (8001838 <heuristic_cell_map+0x124>)
 80017d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80017d2:	e01e      	b.n	8001812 <heuristic_cell_map+0xfe>
      }
      else
      {
        grid[i][j].h = heuristic_single_cell(&grid[i][j], goal_x, goal_y); 
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	4413      	add	r3, r2
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	2154      	movs	r1, #84	; 0x54
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	18d1      	adds	r1, r2, r3
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	4413      	add	r3, r2
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	2054      	movs	r0, #84	; 0x54
 80017f6:	fb00 f303 	mul.w	r3, r0, r3
 80017fa:	18d4      	adds	r4, r2, r3
 80017fc:	edd7 0a01 	vldr	s1, [r7, #4]
 8001800:	ed97 0a02 	vldr	s0, [r7, #8]
 8001804:	4608      	mov	r0, r1
 8001806:	f000 f81b 	bl	8001840 <heuristic_single_cell>
 800180a:	eef0 7a40 	vmov.f32	s15, s0
 800180e:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c
    for (int j = 0; j < colum; j++) 
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	3301      	adds	r3, #1
 8001816:	61bb      	str	r3, [r7, #24]
 8001818:	7bbb      	ldrb	r3, [r7, #14]
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	429a      	cmp	r2, r3
 800181e:	db8e      	blt.n	800173e <heuristic_cell_map+0x2a>
  for (int i = 0; i < row; i++)
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	3301      	adds	r3, #1
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	7bfb      	ldrb	r3, [r7, #15]
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	429a      	cmp	r2, r3
 800182c:	db84      	blt.n	8001738 <heuristic_cell_map+0x24>
      }   
    }
  }  
}
 800182e:	bf00      	nop
 8001830:	bf00      	nop
 8001832:	3724      	adds	r7, #36	; 0x24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd90      	pop	{r4, r7, pc}
 8001838:	bf800000 	.word	0xbf800000
 800183c:	00000000 	.word	0x00000000

08001840 <heuristic_single_cell>:


float heuristic_single_cell(Cell_map_t *cell, float  goal_x, float goal_y)
{
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	ed2d 8b02 	vpush	{d8}
 8001846:	b0a3      	sub	sp, #140	; 0x8c
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001850:	edc7 0a01 	vstr	s1, [r7, #4]
  //---------Definicion de variables--------
  //Variables del calculo heuristica
  Cell_map_t *ptrCell = cell;                 //Puntero a la celda actual
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  float total_distante = 0;                   //Distancia total entre la celda actual y la celda del gol
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  float dis[8];                               //Distancia entre la celda vecina y la recta
  uint8_t best_index;                         //Mejor indice de las celdas vecinas
  float min_distance;                         //Distancia minima entre la celda vecina y la recta
  //Variables Recta
  float A_recta;                              //Parametros de la recta
  float B_recta = -1.0f;
 8001862:	4be3      	ldr	r3, [pc, #908]	; (8001bf0 <heuristic_single_cell+0x3b0>)
 8001864:	673b      	str	r3, [r7, #112]	; 0x70
  float delta_x;                              //Diferencia la coordenada x entre la celda inicial y la final
  float mag_delta;                            //Magnitud del vector resultante de la diferencia de las coordenadas

  
   //---------------Calculos parametros de la recta-----------------
  delta_y = goal_y - cell->coor_y;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	edd3 7a02 	vldr	s15, [r3, #8]
 800186c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001870:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001874:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
  delta_x = goal_x - cell->coor_x;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	edd3 7a01 	vldr	s15, [r3, #4]
 800187e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001886:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
  mag_delta = sqrtf(delta_x * delta_x + delta_y * delta_y);
 800188a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800188e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001892:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001896:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800189a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189e:	eeb0 0a67 	vmov.f32	s0, s15
 80018a2:	f006 fc49 	bl	8008138 <sqrtf>
 80018a6:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
  A_recta =  delta_y / delta_x;
 80018aa:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80018ae:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80018b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018b6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
  C_recta = cell->coor_y - A_recta * cell->coor_x;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	edd3 6a01 	vldr	s13, [r3, #4]
 80018c6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80018ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

  while (1)
  { 
    //Inicializamos variables
    best_index = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    min_distance = DBL_MAX;
 80018dc:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80018e0:	67bb      	str	r3, [r7, #120]	; 0x78

    //------------------Calculo parametros de cada una de las celdas vecinas--------------------
    for (uint8_t k = 0; k < 8; k++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80018e8:	e0fc      	b.n	8001ae4 <heuristic_single_cell+0x2a4>
    {
      //Verificamos que el puntero al vecino no es nulo
      if (ptrCell->neighbors.ptrCellMap[k] == NULL)
 80018ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80018ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80018f2:	3302      	adds	r3, #2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d110      	bne.n	8001920 <heuristic_single_cell+0xe0>
      {
        ang_between_vector[k] = -1.0f;
 80018fe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	3388      	adds	r3, #136	; 0x88
 8001906:	443b      	add	r3, r7
 8001908:	3b58      	subs	r3, #88	; 0x58
 800190a:	4ab9      	ldr	r2, [pc, #740]	; (8001bf0 <heuristic_single_cell+0x3b0>)
 800190c:	601a      	str	r2, [r3, #0]
        dis[k] = -1.0f;          
 800190e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	3388      	adds	r3, #136	; 0x88
 8001916:	443b      	add	r3, r7
 8001918:	3b78      	subs	r3, #120	; 0x78
 800191a:	4ab5      	ldr	r2, [pc, #724]	; (8001bf0 <heuristic_single_cell+0x3b0>)
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	e0dc      	b.n	8001ada <heuristic_single_cell+0x29a>
      }
      else
      {
        //Calculo vector relativo
        rel_x = ptrCell->neighbors.ptrCellMap[k]->coor_x - ptrCell->coor_x;
 8001920:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001924:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001928:	3302      	adds	r3, #2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	ed93 7a01 	vldr	s14, [r3, #4]
 8001934:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001938:	edd3 7a01 	vldr	s15, [r3, #4]
 800193c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001940:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        rel_y = ptrCell->neighbors.ptrCellMap[k]->coor_y - ptrCell->coor_y;
 8001944:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001948:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800194c:	3302      	adds	r3, #2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	ed93 7a02 	vldr	s14, [r3, #8]
 8001958:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800195c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001960:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001964:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        //Calculo parametros
        res = round(((rel_x*delta_x + rel_y*delta_y) / (ptrCell->neighbors.distance_neigh[k] * mag_delta)) * 10000) / 10000;
 8001968:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800196c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001970:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001974:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001978:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800197c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001980:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001984:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001988:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800198c:	330a      	adds	r3, #10
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	3304      	adds	r3, #4
 8001994:	ed93 7a00 	vldr	s14, [r3]
 8001998:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800199c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019a4:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001bf4 <heuristic_single_cell+0x3b4>
 80019a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ac:	ee17 0a90 	vmov	r0, s15
 80019b0:	f7fe fdd2 	bl	8000558 <__aeabi_f2d>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	ec43 2b10 	vmov	d0, r2, r3
 80019bc:	f006 fb42 	bl	8008044 <round>
 80019c0:	ec51 0b10 	vmov	r0, r1, d0
 80019c4:	a388      	add	r3, pc, #544	; (adr r3, 8001be8 <heuristic_single_cell+0x3a8>)
 80019c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ca:	f7fe ff47 	bl	800085c <__aeabi_ddiv>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	f7ff f90f 	bl	8000bf8 <__aeabi_d2f>
 80019da:	4603      	mov	r3, r0
 80019dc:	653b      	str	r3, [r7, #80]	; 0x50
        ang_between_vector[k] = acos(res);
 80019de:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80019e0:	f7fe fdba 	bl	8000558 <__aeabi_f2d>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	ec43 2b10 	vmov	d0, r2, r3
 80019ec:	f006 fb70 	bl	80080d0 <acos>
 80019f0:	ec53 2b10 	vmov	r2, r3, d0
 80019f4:	f897 4077 	ldrb.w	r4, [r7, #119]	; 0x77
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f7ff f8fc 	bl	8000bf8 <__aeabi_d2f>
 8001a00:	4602      	mov	r2, r0
 8001a02:	00a3      	lsls	r3, r4, #2
 8001a04:	3388      	adds	r3, #136	; 0x88
 8001a06:	443b      	add	r3, r7
 8001a08:	3b58      	subs	r3, #88	; 0x58
 8001a0a:	601a      	str	r2, [r3, #0]
        if(A_recta != INFINITY && A_recta != -INFINITY)
 8001a0c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a10:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001bf8 <heuristic_single_cell+0x3b8>
 8001a14:	eef4 7a47 	vcmp.f32	s15, s14
 8001a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1c:	dc45      	bgt.n	8001aaa <heuristic_single_cell+0x26a>
 8001a1e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a22:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001bfc <heuristic_single_cell+0x3bc>
 8001a26:	eef4 7a47 	vcmp.f32	s15, s14
 8001a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2e:	d43c      	bmi.n	8001aaa <heuristic_single_cell+0x26a>
        {
          dis[k] = fabsf(A_recta * ptrCell->neighbors.ptrCellMap[k]->coor_x + B_recta * ptrCell->neighbors.ptrCellMap[k]->coor_y + C_recta) / sqrtf(A_recta * A_recta + 1);  
 8001a30:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001a34:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001a38:	3302      	adds	r3, #2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a44:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a4c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001a50:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001a54:	3302      	adds	r3, #2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a60:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001a64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a6c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a74:	eeb0 8ae7 	vabs.f32	s16, s15
 8001a78:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a88:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8c:	f006 fb54 	bl	8008138 <sqrtf>
 8001a90:	eeb0 7a40 	vmov.f32	s14, s0
 8001a94:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001a98:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	3388      	adds	r3, #136	; 0x88
 8001aa0:	443b      	add	r3, r7
 8001aa2:	3b78      	subs	r3, #120	; 0x78
 8001aa4:	edc3 7a00 	vstr	s15, [r3]
 8001aa8:	e017      	b.n	8001ada <heuristic_single_cell+0x29a>
        }
        else
        {
          dis[k] = fabsf(ptrCell->neighbors.ptrCellMap[k]->coor_x-goal_x);
 8001aaa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001aae:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	ed93 7a01 	vldr	s14, [r3, #4]
 8001abe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ac6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001aca:	eef0 7ae7 	vabs.f32	s15, s15
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	3388      	adds	r3, #136	; 0x88
 8001ad2:	443b      	add	r3, r7
 8001ad4:	3b78      	subs	r3, #120	; 0x78
 8001ad6:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t k = 0; k < 8; k++)
 8001ada:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001ade:	3301      	adds	r3, #1
 8001ae0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001ae4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001ae8:	2b07      	cmp	r3, #7
 8001aea:	f67f aefe 	bls.w	80018ea <heuristic_single_cell+0xaa>
      }            
    }

    //----------------Buscamos la celda vecina mas cercana a la recta y que este en la misma direccion que la recta---------------------
    //Recorremos los parametros para encontrar la mejor celda
    for (uint8_t k = 0; k < 8; k++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001af4:	e03f      	b.n	8001b76 <heuristic_single_cell+0x336>
    {
      //Verificamos que no sea -1
      if (ptrCell->neighbors.distance_neigh[k] != -1.0f)
 8001af6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001afa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001afe:	330a      	adds	r3, #10
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	3304      	adds	r3, #4
 8001b06:	edd3 7a00 	vldr	s15, [r3]
 8001b0a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001b0e:	eef4 7a47 	vcmp.f32	s15, s14
 8001b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b16:	d029      	beq.n	8001b6c <heuristic_single_cell+0x32c>
      {
        //Verificamos que la diferencia entre los angulos no sea superior a 45°
        if (ang_between_vector[k] <= 1.5f)
 8001b18:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	3388      	adds	r3, #136	; 0x88
 8001b20:	443b      	add	r3, r7
 8001b22:	3b58      	subs	r3, #88	; 0x58
 8001b24:	edd3 7a00 	vldr	s15, [r3]
 8001b28:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001b2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b34:	d81a      	bhi.n	8001b6c <heuristic_single_cell+0x32c>
        {
          //Verificar que la distancia sea menor a la anterior menor distancia
          if (dis[k] < min_distance)
 8001b36:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	3388      	adds	r3, #136	; 0x88
 8001b3e:	443b      	add	r3, r7
 8001b40:	3b78      	subs	r3, #120	; 0x78
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001b4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b52:	dd0b      	ble.n	8001b6c <heuristic_single_cell+0x32c>
          {
            min_distance = dis[k];
 8001b54:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	3388      	adds	r3, #136	; 0x88
 8001b5c:	443b      	add	r3, r7
 8001b5e:	3b78      	subs	r3, #120	; 0x78
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	67bb      	str	r3, [r7, #120]	; 0x78
            best_index = k;
 8001b64:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001b68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    for (uint8_t k = 0; k < 8; k++)
 8001b6c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001b70:	3301      	adds	r3, #1
 8001b72:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001b76:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001b7a:	2b07      	cmp	r3, #7
 8001b7c:	d9bb      	bls.n	8001af6 <heuristic_single_cell+0x2b6>
      }        
    }

    
    //--------------Seleccionamos la celda vecina y sumamos su distancia--------------------
    total_distante = total_distante + ptrCell->neighbors.distance_neigh[best_index];
 8001b7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001b82:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001b86:	330a      	adds	r3, #10
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	edd3 7a00 	vldr	s15, [r3]
 8001b92:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    ptrCell = ptrCell->neighbors.ptrCellMap[best_index];    
 8001b9e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001ba2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    
    //-----------------Verificacion si se llego al gol----------------------
    if (ptrCell->coor_x == goal_x && ptrCell->coor_y == goal_y)
 8001bb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bb6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bba:	ed97 7a02 	vldr	s14, [r7, #8]
 8001bbe:	eeb4 7a67 	vcmp.f32	s14, s15
 8001bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc6:	f47f ae86 	bne.w	80018d6 <heuristic_single_cell+0x96>
 8001bca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bce:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bd2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bd6:	eeb4 7a67 	vcmp.f32	s14, s15
 8001bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bde:	d00f      	beq.n	8001c00 <heuristic_single_cell+0x3c0>
    best_index = 0;
 8001be0:	e679      	b.n	80018d6 <heuristic_single_cell+0x96>
 8001be2:	bf00      	nop
 8001be4:	f3af 8000 	nop.w
 8001be8:	00000000 	.word	0x00000000
 8001bec:	40c38800 	.word	0x40c38800
 8001bf0:	bf800000 	.word	0xbf800000
 8001bf4:	461c4000 	.word	0x461c4000
 8001bf8:	7f7fffff 	.word	0x7f7fffff
 8001bfc:	ff7fffff 	.word	0xff7fffff
    {
      break;
 8001c00:	bf00      	nop
    }
  }

  return total_distante;
 8001c02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c06:	ee07 3a90 	vmov	s15, r3
}
 8001c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c0e:	378c      	adds	r7, #140	; 0x8c
 8001c10:	46bd      	mov	sp, r7
 8001c12:	ecbd 8b02 	vpop	{d8}
 8001c16:	bd90      	pop	{r4, r7, pc}

08001c18 <creat_grid_map>:
int8_t ne_pos_x[8] = {-1, 0, 1, 1, 1, 0, -1, -1};
int8_t ne_pos_y[8] = {1, 1, 1, 0, -1, -1, -1, 0};

// Función para crear la malla de celdas
Cell_map_t** creat_grid_map(uint8_t row, uint8_t colum, float separation) 
{  
 8001c18:	b5b0      	push	{r4, r5, r7, lr}
 8001c1a:	b08e      	sub	sp, #56	; 0x38
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	460a      	mov	r2, r1
 8001c22:	ed87 0a00 	vstr	s0, [r7]
 8001c26:	71fb      	strb	r3, [r7, #7]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	71bb      	strb	r3, [r7, #6]
    //Se definen variables
    float rel_x;
    float rel_y;
    
    //-----------------------Creacion malla---------------------------
    Cell_map_t **grid = (Cell_map_t **)malloc(row * sizeof(Cell_map_t *));
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f001 fce5 	bl	8003600 <malloc>
 8001c36:	4603      	mov	r3, r0
 8001c38:	61bb      	str	r3, [r7, #24]
    if (grid == NULL) {
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d105      	bne.n	8001c4c <creat_grid_map+0x34>
        printf("Error: No se pudo asignar memoria para la malla de celdas\n");
 8001c40:	488c      	ldr	r0, [pc, #560]	; (8001e74 <creat_grid_map+0x25c>)
 8001c42:	f002 fcd5 	bl	80045f0 <puts>
        exit(1);
 8001c46:	2001      	movs	r0, #1
 8001c48:	f001 fca2 	bl	8003590 <exit>
    }
    for (int i = 0; i < row; i++) {
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c50:	e01d      	b.n	8001c8e <creat_grid_map+0x76>
        grid[i] = (Cell_map_t *)malloc(colum * sizeof(Cell_map_t));
 8001c52:	79bb      	ldrb	r3, [r7, #6]
 8001c54:	2254      	movs	r2, #84	; 0x54
 8001c56:	fb02 f103 	mul.w	r1, r2, r3
 8001c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	18d4      	adds	r4, r2, r3
 8001c62:	4608      	mov	r0, r1
 8001c64:	f001 fccc 	bl	8003600 <malloc>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	6023      	str	r3, [r4, #0]
        if (grid[i] == NULL) {
 8001c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4413      	add	r3, r2
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d106      	bne.n	8001c88 <creat_grid_map+0x70>
            printf("Error: No se pudo asignar memoria para la fila %d de la malla de celdas\n", i);
 8001c7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001c7c:	487e      	ldr	r0, [pc, #504]	; (8001e78 <creat_grid_map+0x260>)
 8001c7e:	f002 fc31 	bl	80044e4 <iprintf>
            exit(1);
 8001c82:	2001      	movs	r0, #1
 8001c84:	f001 fc84 	bl	8003590 <exit>
    for (int i = 0; i < row; i++) {
 8001c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c92:	429a      	cmp	r2, r3
 8001c94:	dbdd      	blt.n	8001c52 <creat_grid_map+0x3a>
        }
    }
    
    //---------------------Asignacion de informacion------------------------
    // Llenar la matriz de celdas con valores predeterminados
    for (int i = 0; i < row; i++) {
 8001c96:	2300      	movs	r3, #0
 8001c98:	633b      	str	r3, [r7, #48]	; 0x30
 8001c9a:	e0dd      	b.n	8001e58 <creat_grid_map+0x240>
        for (int j = 0; j < colum; j++) {
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ca0:	e0d2      	b.n	8001e48 <creat_grid_map+0x230>
            // Asignar valores a la celda
            grid[i][j].id[0] = 'A' + j;             // Asignar un identificador simple, 'A', 'B', ...
 8001ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	69b9      	ldr	r1, [r7, #24]
 8001cac:	440b      	add	r3, r1
 8001cae:	6819      	ldr	r1, [r3, #0]
 8001cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb2:	2054      	movs	r0, #84	; 0x54
 8001cb4:	fb00 f303 	mul.w	r3, r0, r3
 8001cb8:	440b      	add	r3, r1
 8001cba:	3241      	adds	r2, #65	; 0x41
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	701a      	strb	r2, [r3, #0]
            grid[i][j].id[1] = '0' + i;             // Asignar una cifra simple, '0', '1', '2', ...
 8001cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	69b9      	ldr	r1, [r7, #24]
 8001cca:	440b      	add	r3, r1
 8001ccc:	6819      	ldr	r1, [r3, #0]
 8001cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd0:	2054      	movs	r0, #84	; 0x54
 8001cd2:	fb00 f303 	mul.w	r3, r0, r3
 8001cd6:	440b      	add	r3, r1
 8001cd8:	3230      	adds	r2, #48	; 0x30
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	705a      	strb	r2, [r3, #1]
            grid[i][j].index_row = i;               // Asignar el indice de la fila
 8001cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cea:	2154      	movs	r1, #84	; 0x54
 8001cec:	fb01 f303 	mul.w	r3, r1, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	709a      	strb	r2, [r3, #2]
            grid[i][j].index_col = j;               // Asignar el indice de la columna
 8001cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4413      	add	r3, r2
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d04:	2154      	movs	r1, #84	; 0x54
 8001d06:	fb01 f303 	mul.w	r3, r1, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	70da      	strb	r2, [r3, #3]
            grid[i][j].coor_x = separation * j;     // Asignar la posición x de la celda
 8001d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d14:	ee07 3a90 	vmov	s15, r3
 8001d18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4413      	add	r3, r2
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d28:	2154      	movs	r1, #84	; 0x54
 8001d2a:	fb01 f303 	mul.w	r3, r1, r3
 8001d2e:	4413      	add	r3, r2
 8001d30:	edd7 7a00 	vldr	s15, [r7]
 8001d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d38:	edc3 7a01 	vstr	s15, [r3, #4]
            grid[i][j].coor_y = separation * i;     // Asignar la posición y de la celda
 8001d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3e:	ee07 3a90 	vmov	s15, r3
 8001d42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d52:	2154      	movs	r1, #84	; 0x54
 8001d54:	fb01 f303 	mul.w	r3, r1, r3
 8001d58:	4413      	add	r3, r2
 8001d5a:	edd7 7a00 	vldr	s15, [r7]
 8001d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d62:	edc3 7a02 	vstr	s15, [r3, #8]
            grid[i][j].status = 0;                  // Inicializar el estado de la celda;             
 8001d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d72:	2154      	movs	r1, #84	; 0x54
 8001d74:	fb01 f303 	mul.w	r3, r1, r3
 8001d78:	4413      	add	r3, r2
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            // Asignacion de vecinos a la celda actual
            for (uint8_t k = 0; k < 8; k++) {
 8001d80:	2300      	movs	r3, #0
 8001d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001d86:	e058      	b.n	8001e3a <creat_grid_map+0x222>
                int8_t index_row_ne = i + ne_pos_x[k]; 
 8001d88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001d8c:	4a3b      	ldr	r2, [pc, #236]	; (8001e7c <creat_grid_map+0x264>)
 8001d8e:	56d3      	ldrsb	r3, [r2, r3]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	4413      	add	r3, r2
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	73fb      	strb	r3, [r7, #15]
                int8_t index_colum_ne = j + ne_pos_y[k]; 
 8001d9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001da0:	4a37      	ldr	r2, [pc, #220]	; (8001e80 <creat_grid_map+0x268>)
 8001da2:	56d3      	ldrsb	r3, [r2, r3]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	4413      	add	r3, r2
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	73bb      	strb	r3, [r7, #14]
                // Se evalua si el indice esta dentro de la malla
                if (index_row_ne >= 0 && index_row_ne < row && index_colum_ne >= 0 && index_colum_ne < colum) 
 8001db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db2a      	blt.n	8001e0e <creat_grid_map+0x1f6>
 8001db8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	da25      	bge.n	8001e0e <creat_grid_map+0x1f6>
 8001dc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	db21      	blt.n	8001e0e <creat_grid_map+0x1f6>
 8001dca:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001dce:	79bb      	ldrb	r3, [r7, #6]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	da1c      	bge.n	8001e0e <creat_grid_map+0x1f6>
                {
                    grid[i][j].neighbors.ptrCellMap[k] = &grid[index_row_ne][index_colum_ne];
 8001dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4413      	add	r3, r2
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001de4:	2254      	movs	r2, #84	; 0x54
 8001de6:	fb03 f202 	mul.w	r2, r3, r2
 8001dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	69b9      	ldr	r1, [r7, #24]
 8001df0:	440b      	add	r3, r1
 8001df2:	6819      	ldr	r1, [r3, #0]
 8001df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df6:	2454      	movs	r4, #84	; 0x54
 8001df8:	fb04 f303 	mul.w	r3, r4, r3
 8001dfc:	4419      	add	r1, r3
 8001dfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001e02:	4402      	add	r2, r0
 8001e04:	3302      	adds	r3, #2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	e010      	b.n	8001e30 <creat_grid_map+0x218>
                } 
                else 
                {
                    grid[i][j].neighbors.ptrCellMap[k] = NULL;                    
 8001e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4413      	add	r3, r2
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1a:	2154      	movs	r1, #84	; 0x54
 8001e1c:	fb01 f303 	mul.w	r3, r1, r3
 8001e20:	441a      	add	r2, r3
 8001e22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001e26:	3302      	adds	r3, #2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	605a      	str	r2, [r3, #4]
            for (uint8_t k = 0; k < 8; k++) {
 8001e30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001e34:	3301      	adds	r3, #1
 8001e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001e3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001e3e:	2b07      	cmp	r3, #7
 8001e40:	d9a2      	bls.n	8001d88 <creat_grid_map+0x170>
        for (int j = 0; j < colum; j++) {
 8001e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e44:	3301      	adds	r3, #1
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e48:	79bb      	ldrb	r3, [r7, #6]
 8001e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	f6ff af28 	blt.w	8001ca2 <creat_grid_map+0x8a>
    for (int i = 0; i < row; i++) {
 8001e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e54:	3301      	adds	r3, #1
 8001e56:	633b      	str	r3, [r7, #48]	; 0x30
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	f6ff af1d 	blt.w	8001c9c <creat_grid_map+0x84>
        }
    }
    
    //------------------Distancias entre celdas------------------------
    //Se calcula la distancia de cada celda vecina
    for (int i = 0; i < row; i++) {
 8001e62:	2300      	movs	r3, #0
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
 8001e66:	e0a6      	b.n	8001fb6 <creat_grid_map+0x39e>
        for (int j = 0; j < colum; j++) {
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
 8001e6c:	e09b      	b.n	8001fa6 <creat_grid_map+0x38e>
            for (uint8_t k = 0; k < 8; k++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	77fb      	strb	r3, [r7, #31]
 8001e72:	e091      	b.n	8001f98 <creat_grid_map+0x380>
 8001e74:	080087d0 	.word	0x080087d0
 8001e78:	0800880c 	.word	0x0800880c
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	20000008 	.word	0x20000008
            {    
                if(grid[i][j].neighbors.ptrCellMap[k] != NULL)
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	2154      	movs	r1, #84	; 0x54
 8001e92:	fb01 f303 	mul.w	r3, r1, r3
 8001e96:	441a      	add	r2, r3
 8001e98:	7ffb      	ldrb	r3, [r7, #31]
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d064      	beq.n	8001f70 <creat_grid_map+0x358>
                {
                    //Calculo vector relativo
                    rel_x = grid[i][j].neighbors.ptrCellMap[k]->coor_x - grid[i][j].coor_x;
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4413      	add	r3, r2
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	2154      	movs	r1, #84	; 0x54
 8001eb4:	fb01 f303 	mul.w	r3, r1, r3
 8001eb8:	441a      	add	r2, r3
 8001eba:	7ffb      	ldrb	r3, [r7, #31]
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4413      	add	r3, r2
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	2154      	movs	r1, #84	; 0x54
 8001ed6:	fb01 f303 	mul.w	r3, r1, r3
 8001eda:	4413      	add	r3, r2
 8001edc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee4:	edc7 7a05 	vstr	s15, [r7, #20]
                    rel_y = grid[i][j].neighbors.ptrCellMap[k]->coor_y - grid[i][j].coor_y;
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4413      	add	r3, r2
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
 8001ef4:	2154      	movs	r1, #84	; 0x54
 8001ef6:	fb01 f303 	mul.w	r3, r1, r3
 8001efa:	441a      	add	r2, r3
 8001efc:	7ffb      	ldrb	r3, [r7, #31]
 8001efe:	3302      	adds	r3, #2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4413      	add	r3, r2
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	2154      	movs	r1, #84	; 0x54
 8001f18:	fb01 f303 	mul.w	r3, r1, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f26:	edc7 7a04 	vstr	s15, [r7, #16]
                    //Ingresamos la distancia
                    grid[i][j].neighbors.distance_neigh[k] = sqrtf(rel_x * rel_x + rel_y * rel_y);
 8001f2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f2e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001f32:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f36:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4413      	add	r3, r2
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	2154      	movs	r1, #84	; 0x54
 8001f4c:	fb01 f303 	mul.w	r3, r1, r3
 8001f50:	18d4      	adds	r4, r2, r3
 8001f52:	7ffd      	ldrb	r5, [r7, #31]
 8001f54:	eeb0 0a67 	vmov.f32	s0, s15
 8001f58:	f006 f8ee 	bl	8008138 <sqrtf>
 8001f5c:	eef0 7a40 	vmov.f32	s15, s0
 8001f60:	f105 030a 	add.w	r3, r5, #10
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4423      	add	r3, r4
 8001f68:	3304      	adds	r3, #4
 8001f6a:	edc3 7a00 	vstr	s15, [r3]
 8001f6e:	e010      	b.n	8001f92 <creat_grid_map+0x37a>
                }
                else
                {
                    //Ingreamos la distancia
                    grid[i][j].neighbors.distance_neigh[k] = -1.0f;
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4413      	add	r3, r2
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	2154      	movs	r1, #84	; 0x54
 8001f7e:	fb01 f303 	mul.w	r3, r1, r3
 8001f82:	441a      	add	r2, r3
 8001f84:	7ffb      	ldrb	r3, [r7, #31]
 8001f86:	330a      	adds	r3, #10
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	4a0f      	ldr	r2, [pc, #60]	; (8001fcc <creat_grid_map+0x3b4>)
 8001f90:	601a      	str	r2, [r3, #0]
            for (uint8_t k = 0; k < 8; k++)
 8001f92:	7ffb      	ldrb	r3, [r7, #31]
 8001f94:	3301      	adds	r3, #1
 8001f96:	77fb      	strb	r3, [r7, #31]
 8001f98:	7ffb      	ldrb	r3, [r7, #31]
 8001f9a:	2b07      	cmp	r3, #7
 8001f9c:	f67f af72 	bls.w	8001e84 <creat_grid_map+0x26c>
        for (int j = 0; j < colum; j++) {
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	623b      	str	r3, [r7, #32]
 8001fa6:	79bb      	ldrb	r3, [r7, #6]
 8001fa8:	6a3a      	ldr	r2, [r7, #32]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	f6ff af5f 	blt.w	8001e6e <creat_grid_map+0x256>
    for (int i = 0; i < row; i++) {
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	f6ff af54 	blt.w	8001e68 <creat_grid_map+0x250>
                }                
            }
        }
    }

    return grid;
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3738      	adds	r7, #56	; 0x38
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	bf800000 	.word	0xbf800000

08001fd0 <main>:
float goal_y = 0;                                             //posicion final en y

void acelerometro_I2C(void);                       //Cabecera para la comunicacion I2C

int main(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
	//Realizamos la configuracuion inicial
	int_Hardware();
 8001fd6:	f000 f85d 	bl	8002094 <int_Hardware>

	while(1)
	{
		if(status_A_Star==2)
 8001fda:	4b25      	ldr	r3, [pc, #148]	; (8002070 <main+0xa0>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d144      	bne.n	800206c <main+0x9c>
		{
		  //-------------Separar el String en los parametros del grid m-------------
		  char **array_grid_map_string =  separate_Parameters(bufferParameterStringGM);
 8001fe2:	4824      	ldr	r0, [pc, #144]	; (8002074 <main+0xa4>)
 8001fe4:	f000 f920 	bl	8002228 <separate_Parameters>
 8001fe8:	60f8      	str	r0, [r7, #12]
		  //---------Creacion de la malla con cada una de sus celdas-----------
		  Cell_map_t **grid_map = creat_grid_map(grid_map_row, grid_map_colum, cell_separation);
 8001fea:	4b23      	ldr	r3, [pc, #140]	; (8002078 <main+0xa8>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	4a23      	ldr	r2, [pc, #140]	; (800207c <main+0xac>)
 8001ff0:	7812      	ldrb	r2, [r2, #0]
 8001ff2:	4923      	ldr	r1, [pc, #140]	; (8002080 <main+0xb0>)
 8001ff4:	edd1 7a00 	vldr	s15, [r1]
 8001ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fe0a 	bl	8001c18 <creat_grid_map>
 8002004:	60b8      	str	r0, [r7, #8]
		  //-------Calculo de la heuristica de la celda de acuerdo a la posicion objetivo-------
		  heuristic_cell_map(grid_map, array_grid_map_string, grid_map_row, grid_map_colum, goal_x, goal_y);
 8002006:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <main+0xa8>)
 8002008:	781a      	ldrb	r2, [r3, #0]
 800200a:	4b1c      	ldr	r3, [pc, #112]	; (800207c <main+0xac>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	491d      	ldr	r1, [pc, #116]	; (8002084 <main+0xb4>)
 8002010:	edd1 7a00 	vldr	s15, [r1]
 8002014:	491c      	ldr	r1, [pc, #112]	; (8002088 <main+0xb8>)
 8002016:	ed91 7a00 	vldr	s14, [r1]
 800201a:	eef0 0a47 	vmov.f32	s1, s14
 800201e:	eeb0 0a67 	vmov.f32	s0, s15
 8002022:	68f9      	ldr	r1, [r7, #12]
 8002024:	68b8      	ldr	r0, [r7, #8]
 8002026:	f7ff fb75 	bl	8001714 <heuristic_cell_map>
		  //------------------Aplicacion del algoritmo A star------------------
		  file_cell_t *file_path = aplicattion_A_Star(grid_map, grid_map_row, grid_map_colum, start_x, start_y, goal_x, goal_y);
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <main+0xa8>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	4a13      	ldr	r2, [pc, #76]	; (800207c <main+0xac>)
 8002030:	7812      	ldrb	r2, [r2, #0]
 8002032:	4916      	ldr	r1, [pc, #88]	; (800208c <main+0xbc>)
 8002034:	edd1 7a00 	vldr	s15, [r1]
 8002038:	4915      	ldr	r1, [pc, #84]	; (8002090 <main+0xc0>)
 800203a:	ed91 7a00 	vldr	s14, [r1]
 800203e:	4911      	ldr	r1, [pc, #68]	; (8002084 <main+0xb4>)
 8002040:	edd1 6a00 	vldr	s13, [r1]
 8002044:	4910      	ldr	r1, [pc, #64]	; (8002088 <main+0xb8>)
 8002046:	ed91 6a00 	vldr	s12, [r1]
 800204a:	eef0 1a46 	vmov.f32	s3, s12
 800204e:	eeb0 1a66 	vmov.f32	s2, s13
 8002052:	eef0 0a47 	vmov.f32	s1, s14
 8002056:	eeb0 0a67 	vmov.f32	s0, s15
 800205a:	4619      	mov	r1, r3
 800205c:	68b8      	ldr	r0, [r7, #8]
 800205e:	f7ff f80b 	bl	8001078 <aplicattion_A_Star>
 8002062:	6078      	str	r0, [r7, #4]
		  //Reinicamos bandera
		  status_A_Star = 0;
 8002064:	4b02      	ldr	r3, [pc, #8]	; (8002070 <main+0xa0>)
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
 800206a:	e7b6      	b.n	8001fda <main+0xa>
		}
		else{  __NOP(); }
 800206c:	bf00      	nop
		if(status_A_Star==2)
 800206e:	e7b4      	b.n	8001fda <main+0xa>
 8002070:	20000244 	.word	0x20000244
 8002074:	20000248 	.word	0x20000248
 8002078:	2000040c 	.word	0x2000040c
 800207c:	2000040d 	.word	0x2000040d
 8002080:	20000410 	.word	0x20000410
 8002084:	2000041c 	.word	0x2000041c
 8002088:	20000420 	.word	0x20000420
 800208c:	20000414 	.word	0x20000414
 8002090:	20000418 	.word	0x20000418

08002094 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af02      	add	r7, sp, #8
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 800209a:	4b34      	ldr	r3, [pc, #208]	; (800216c <int_Hardware+0xd8>)
 800209c:	4a34      	ldr	r2, [pc, #208]	; (8002170 <int_Hardware+0xdc>)
 800209e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 80020a0:	4b32      	ldr	r3, [pc, #200]	; (800216c <int_Hardware+0xd8>)
 80020a2:	2205      	movs	r2, #5
 80020a4:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80020a6:	2300      	movs	r3, #0
 80020a8:	9301      	str	r3, [sp, #4]
 80020aa:	2300      	movs	r3, #0
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	2301      	movs	r3, #1
 80020b0:	2200      	movs	r2, #0
 80020b2:	2101      	movs	r1, #1
 80020b4:	482d      	ldr	r0, [pc, #180]	; (800216c <int_Hardware+0xd8>)
 80020b6:	f000 fc71 	bl	800299c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 80020ba:	482c      	ldr	r0, [pc, #176]	; (800216c <int_Hardware+0xd8>)
 80020bc:	f000 fc90 	bl	80029e0 <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA2----------------
	//------------AF7: USART2_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 80020c0:	4b2c      	ldr	r3, [pc, #176]	; (8002174 <int_Hardware+0xe0>)
 80020c2:	4a2b      	ldr	r2, [pc, #172]	; (8002170 <int_Hardware+0xdc>)
 80020c4:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 80020c6:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <int_Hardware+0xe0>)
 80020c8:	2202      	movs	r2, #2
 80020ca:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 80020cc:	2307      	movs	r3, #7
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	2300      	movs	r3, #0
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	2301      	movs	r3, #1
 80020d6:	2200      	movs	r2, #0
 80020d8:	2102      	movs	r1, #2
 80020da:	4826      	ldr	r0, [pc, #152]	; (8002174 <int_Hardware+0xe0>)
 80020dc:	f000 fc5e 	bl	800299c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 80020e0:	4824      	ldr	r0, [pc, #144]	; (8002174 <int_Hardware+0xe0>)
 80020e2:	f000 fc7d 	bl	80029e0 <GPIO_Config>

	//---------------PIN: PA3----------------
	//------------AF7: USART2_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 80020e6:	4b24      	ldr	r3, [pc, #144]	; (8002178 <int_Hardware+0xe4>)
 80020e8:	4a21      	ldr	r2, [pc, #132]	; (8002170 <int_Hardware+0xdc>)
 80020ea:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3; 						//PIN_x, 0-15
 80020ec:	4b22      	ldr	r3, [pc, #136]	; (8002178 <int_Hardware+0xe4>)
 80020ee:	2203      	movs	r2, #3
 80020f0:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 80020f2:	2307      	movs	r3, #7
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	2300      	movs	r3, #0
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2301      	movs	r3, #1
 80020fc:	2200      	movs	r2, #0
 80020fe:	2102      	movs	r1, #2
 8002100:	481d      	ldr	r0, [pc, #116]	; (8002178 <int_Hardware+0xe4>)
 8002102:	f000 fc4b 	bl	800299c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 8002106:	481c      	ldr	r0, [pc, #112]	; (8002178 <int_Hardware+0xe4>)
 8002108:	f000 fc6a 	bl	80029e0 <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART2----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART2;
 800210c:	4b1b      	ldr	r3, [pc, #108]	; (800217c <int_Hardware+0xe8>)
 800210e:	4a1c      	ldr	r2, [pc, #112]	; (8002180 <int_Hardware+0xec>)
 8002110:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX ;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 8002112:	4b1a      	ldr	r3, [pc, #104]	; (800217c <int_Hardware+0xe8>)
 8002114:	2202      	movs	r2, #2
 8002116:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_9600;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 8002118:	4b18      	ldr	r3, [pc, #96]	; (800217c <int_Hardware+0xe8>)
 800211a:	2200      	movs	r2, #0
 800211c:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 800211e:	4b17      	ldr	r3, [pc, #92]	; (800217c <int_Hardware+0xe8>)
 8002120:	2200      	movs	r2, #0
 8002122:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <int_Hardware+0xe8>)
 8002126:	2200      	movs	r2, #0
 8002128:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 800212a:	4b14      	ldr	r3, [pc, #80]	; (800217c <int_Hardware+0xe8>)
 800212c:	2201      	movs	r2, #1
 800212e:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_DISABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <int_Hardware+0xe8>)
 8002132:	2200      	movs	r2, #0
 8002134:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 8002136:	4811      	ldr	r0, [pc, #68]	; (800217c <int_Hardware+0xe8>)
 8002138:	f000 fde6 	bl	8002d08 <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <int_Hardware+0xf0>)
 800213e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002142:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <int_Hardware+0xf0>)
 8002146:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800214a:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 800214c:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <int_Hardware+0xf0>)
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 8002152:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <int_Hardware+0xf0>)
 8002154:	22fa      	movs	r2, #250	; 0xfa
 8002156:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 8002158:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <int_Hardware+0xf0>)
 800215a:	2201      	movs	r2, #1
 800215c:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 800215e:	4809      	ldr	r0, [pc, #36]	; (8002184 <int_Hardware+0xf0>)
 8002160:	f000 fac6 	bl	80026f0 <BasicTimer_Config>

	//-------------------Fin de Configuracion TIMx-----------------------



}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000204 	.word	0x20000204
 8002170:	40020000 	.word	0x40020000
 8002174:	20000220 	.word	0x20000220
 8002178:	2000022c 	.word	0x2000022c
 800217c:	20000238 	.word	0x20000238
 8002180:	40004400 	.word	0x40004400
 8002184:	20000210 	.word	0x20000210

08002188 <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <BasicTimer2_Callback+0x10>)
 800218e:	f000 fd51 	bl	8002c34 <GPIOxTooglePin>
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000204 	.word	0x20000204

0800219c <BasicUSART2_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART2_Callback(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
	//Se recibe caracter
	charRead = getRxData();
 80021a0:	f001 f81e 	bl	80031e0 <getRxData>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461a      	mov	r2, r3
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <BasicUSART2_Callback+0x4c>)
 80021aa:	701a      	strb	r2, [r3, #0]
	//Se verifica el inicio o final de un string de informacion del Grip Map
	if(charRead=='$')
 80021ac:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <BasicUSART2_Callback+0x4c>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b24      	cmp	r3, #36	; 0x24
 80021b2:	d10b      	bne.n	80021cc <BasicUSART2_Callback+0x30>
	{
		if(status_A_Star  == 0)
 80021b4:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <BasicUSART2_Callback+0x50>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d103      	bne.n	80021c4 <BasicUSART2_Callback+0x28>
		{
			status_A_Star = 1;
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <BasicUSART2_Callback+0x50>)
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
 80021c2:	e004      	b.n	80021ce <BasicUSART2_Callback+0x32>
		}
		else
		{
			status_A_Star  = 2;
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <BasicUSART2_Callback+0x50>)
 80021c6:	2202      	movs	r2, #2
 80021c8:	701a      	strb	r2, [r3, #0]
 80021ca:	e000      	b.n	80021ce <BasicUSART2_Callback+0x32>
		}
	}
	else{ __NOP(); }
 80021cc:	bf00      	nop
	//Si se inicia un nuevo String GM se procede a guardar los caracteres
	if(status_A_Star == 1)
 80021ce:	4b07      	ldr	r3, [pc, #28]	; (80021ec <BasicUSART2_Callback+0x50>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d105      	bne.n	80021e2 <BasicUSART2_Callback+0x46>
	{
		save_char_Parameter_Grid_Map(charRead);
 80021d6:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <BasicUSART2_Callback+0x4c>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f808 	bl	80021f0 <save_char_Parameter_Grid_Map>
	}
	else{ __NOP(); }
}
 80021e0:	e000      	b.n	80021e4 <BasicUSART2_Callback+0x48>
	else{ __NOP(); }
 80021e2:	bf00      	nop
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000010 	.word	0x20000010
 80021ec:	20000244 	.word	0x20000244

080021f0 <save_char_Parameter_Grid_Map>:

//----------------------------Fin de la definicion de las funciones ISR----------------------------------------

//----------------------------Inicio de la definicion de las funciones-----------------------------------------
void save_char_Parameter_Grid_Map(char newchar)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
	bufferParameterStringGM[index_String_GM] = newchar;
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <save_char_Parameter_Grid_Map+0x30>)
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	4619      	mov	r1, r3
 8002200:	4a08      	ldr	r2, [pc, #32]	; (8002224 <save_char_Parameter_Grid_Map+0x34>)
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	5453      	strb	r3, [r2, r1]
	index_String_GM++;
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <save_char_Parameter_Grid_Map+0x30>)
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	3301      	adds	r3, #1
 800220c:	b29a      	uxth	r2, r3
 800220e:	4b04      	ldr	r3, [pc, #16]	; (8002220 <save_char_Parameter_Grid_Map+0x30>)
 8002210:	801a      	strh	r2, [r3, #0]
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	2000040a 	.word	0x2000040a
 8002224:	20000248 	.word	0x20000248

08002228 <separate_Parameters>:



char** separate_Parameters(char *parameter_string)
{
 8002228:	b590      	push	{r4, r7, lr}
 800222a:	b08d      	sub	sp, #52	; 0x34
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  //Definicion de variables
  char buffercharSeparate[10];
  uint8_t index_charSeparate = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t flag_Separate = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t status_parameter = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t index_init_Grid_map = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

  //---------------Definicion de los parametros iniciales---------------
  for (uint16_t i = 0; parameter_string[i] != '\0'; i++)
 8002248:	2300      	movs	r3, #0
 800224a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800224c:	e068      	b.n	8002320 <separate_Parameters+0xf8>
  {
    //Verificacion del estado
    if(status_parameter<3)
 800224e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002252:	2b02      	cmp	r3, #2
 8002254:	d85d      	bhi.n	8002312 <separate_Parameters+0xea>
    {
      //Busqueda de la separacion dentro del string
      if (parameter_string[i] == ':')
 8002256:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	4413      	add	r3, r2
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b3a      	cmp	r3, #58	; 0x3a
 8002260:	d10d      	bne.n	800227e <separate_Parameters+0x56>
      {
        buffercharSeparate[index_charSeparate] = '\0';
 8002262:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002266:	3330      	adds	r3, #48	; 0x30
 8002268:	443b      	add	r3, r7
 800226a:	2200      	movs	r2, #0
 800226c:	f803 2c28 	strb.w	r2, [r3, #-40]
        index_charSeparate = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        flag_Separate = 1;
 8002276:	2301      	movs	r3, #1
 8002278:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800227c:	e00e      	b.n	800229c <separate_Parameters+0x74>
      }
      else
      {
        buffercharSeparate[index_charSeparate] = parameter_string[i];
 800227e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	441a      	add	r2, r3
 8002284:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002288:	7812      	ldrb	r2, [r2, #0]
 800228a:	3330      	adds	r3, #48	; 0x30
 800228c:	443b      	add	r3, r7
 800228e:	f803 2c28 	strb.w	r2, [r3, #-40]
        index_charSeparate++;
 8002292:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002296:	3301      	adds	r3, #1
 8002298:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
      //Si la bandera se levanta se asigna el valor correspondiente al parametro
      if(flag_Separate == 1)
 800229c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d13a      	bne.n	800231a <separate_Parameters+0xf2>
      {
        switch(status_parameter)
 80022a4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d01a      	beq.n	80022e2 <separate_Parameters+0xba>
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	dc27      	bgt.n	8002300 <separate_Parameters+0xd8>
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <separate_Parameters+0x92>
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d00a      	beq.n	80022ce <separate_Parameters+0xa6>
 80022b8:	e022      	b.n	8002300 <separate_Parameters+0xd8>
        {
          case 0:
          {
            grid_map_row = atoi(buffercharSeparate);
 80022ba:	f107 0308 	add.w	r3, r7, #8
 80022be:	4618      	mov	r0, r3
 80022c0:	f001 f95b 	bl	800357a <atoi>
 80022c4:	4603      	mov	r3, r0
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	4b7c      	ldr	r3, [pc, #496]	; (80024bc <separate_Parameters+0x294>)
 80022ca:	701a      	strb	r2, [r3, #0]
            break;
 80022cc:	e018      	b.n	8002300 <separate_Parameters+0xd8>
          }
          case 1:
          {
            grid_map_colum = atoi(buffercharSeparate);
 80022ce:	f107 0308 	add.w	r3, r7, #8
 80022d2:	4618      	mov	r0, r3
 80022d4:	f001 f951 	bl	800357a <atoi>
 80022d8:	4603      	mov	r3, r0
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	4b78      	ldr	r3, [pc, #480]	; (80024c0 <separate_Parameters+0x298>)
 80022de:	701a      	strb	r2, [r3, #0]
            break;
 80022e0:	e00e      	b.n	8002300 <separate_Parameters+0xd8>
          }
          case 2:
          {
            cell_separation = atof(buffercharSeparate);
 80022e2:	f107 0308 	add.w	r3, r7, #8
 80022e6:	4618      	mov	r0, r3
 80022e8:	f001 f944 	bl	8003574 <atof>
 80022ec:	ec53 2b10 	vmov	r2, r3, d0
 80022f0:	4610      	mov	r0, r2
 80022f2:	4619      	mov	r1, r3
 80022f4:	f7fe fc80 	bl	8000bf8 <__aeabi_d2f>
 80022f8:	4603      	mov	r3, r0
 80022fa:	4a72      	ldr	r2, [pc, #456]	; (80024c4 <separate_Parameters+0x29c>)
 80022fc:	6013      	str	r3, [r2, #0]
            break;
 80022fe:	bf00      	nop
          }
        }
        status_parameter++;
 8002300:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002304:	3301      	adds	r3, #1
 8002306:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        flag_Separate = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002310:	e003      	b.n	800231a <separate_Parameters+0xf2>
      }
    }
    else
    {
      index_init_Grid_map = i;
 8002312:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002314:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      break;
 8002318:	e008      	b.n	800232c <separate_Parameters+0x104>
  for (uint16_t i = 0; parameter_string[i] != '\0'; i++)
 800231a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800231c:	3301      	adds	r3, #1
 800231e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002320:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d190      	bne.n	800224e <separate_Parameters+0x26>
    }
  }
  //---------------transformacion del string grid map en un array---------------
  //Creacion del array que va a contener cada uno de los caracteres
  char **array_string = (char **)malloc(grid_map_row * sizeof(char *));
 800232c:	4b63      	ldr	r3, [pc, #396]	; (80024bc <separate_Parameters+0x294>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4618      	mov	r0, r3
 8002334:	f001 f964 	bl	8003600 <malloc>
 8002338:	4603      	mov	r3, r0
 800233a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < grid_map_row; i++)
 800233c:	2300      	movs	r3, #0
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
 8002340:	e00f      	b.n	8002362 <separate_Parameters+0x13a>
  {
    array_string[i] = (char *)malloc((grid_map_colum + 1) * sizeof(char));
 8002342:	4b5f      	ldr	r3, [pc, #380]	; (80024c0 <separate_Parameters+0x298>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	3301      	adds	r3, #1
 8002348:	4619      	mov	r1, r3
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	18d4      	adds	r4, r2, r3
 8002352:	4608      	mov	r0, r1
 8002354:	f001 f954 	bl	8003600 <malloc>
 8002358:	4603      	mov	r3, r0
 800235a:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < grid_map_row; i++)
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	3301      	adds	r3, #1
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
 8002362:	4b56      	ldr	r3, [pc, #344]	; (80024bc <separate_Parameters+0x294>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	4293      	cmp	r3, r2
 800236c:	dbe9      	blt.n	8002342 <separate_Parameters+0x11a>
  }
  //Variables para los indices
  uint8_t index_row = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t index_col = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  //Separacion de cada caracter
  for (uint16_t i = index_init_Grid_map; parameter_string[i] != '\0'; i++)
 800237a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800237e:	843b      	strh	r3, [r7, #32]
 8002380:	e02f      	b.n	80023e2 <separate_Parameters+0x1ba>
  {
    if (parameter_string[i] == '\n')
 8002382:	8c3b      	ldrh	r3, [r7, #32]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b0a      	cmp	r3, #10
 800238c:	d113      	bne.n	80023b6 <separate_Parameters+0x18e>
    {
      //Se agrega un elemento nulo para indicar el fin de la fila
      array_string[index_row][index_col] = '\0';
 800238e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	4413      	add	r3, r2
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800239e:	4413      	add	r3, r2
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
      //Se aumenta el indice de la fila y se reinicia el indice de la columna
      index_row++;
 80023a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023a8:	3301      	adds	r3, #1
 80023aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      index_col = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80023b4:	e012      	b.n	80023dc <separate_Parameters+0x1b4>
    }
    else
    {
      //Se guarda el caracter
      array_string[index_row][index_col] = parameter_string[i];
 80023b6:	8c3b      	ldrh	r3, [r7, #32]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	441a      	add	r2, r3
 80023bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	6979      	ldr	r1, [r7, #20]
 80023c4:	440b      	add	r3, r1
 80023c6:	6819      	ldr	r1, [r3, #0]
 80023c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80023cc:	440b      	add	r3, r1
 80023ce:	7812      	ldrb	r2, [r2, #0]
 80023d0:	701a      	strb	r2, [r3, #0]
      //se aumenta el indice de la columna
      index_col++;
 80023d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80023d6:	3301      	adds	r3, #1
 80023d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  for (uint16_t i = index_init_Grid_map; parameter_string[i] != '\0'; i++)
 80023dc:	8c3b      	ldrh	r3, [r7, #32]
 80023de:	3301      	adds	r3, #1
 80023e0:	843b      	strh	r3, [r7, #32]
 80023e2:	8c3b      	ldrh	r3, [r7, #32]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	4413      	add	r3, r2
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1c9      	bne.n	8002382 <separate_Parameters+0x15a>
    }
  }
  //---------------Definicion del start y del goal---------------
  //Recorremo el array creado para encontrar la posicion de los objetivos
  for(int i = 0; i < grid_map_row; i++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	e057      	b.n	80024a4 <separate_Parameters+0x27c>
  {
    for(int j = 0; j < grid_map_colum; j++)
 80023f4:	2300      	movs	r3, #0
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	e04b      	b.n	8002492 <separate_Parameters+0x26a>
    {
      if(array_string[i][j] == 'S')
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	4413      	add	r3, r2
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	4413      	add	r3, r2
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b53      	cmp	r3, #83	; 0x53
 800240c:	d11a      	bne.n	8002444 <separate_Parameters+0x21c>
      {
        //Definimos su posicion
        start_x = j*cell_separation;
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	ee07 3a90 	vmov	s15, r3
 8002414:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002418:	4b2a      	ldr	r3, [pc, #168]	; (80024c4 <separate_Parameters+0x29c>)
 800241a:	edd3 7a00 	vldr	s15, [r3]
 800241e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002422:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <separate_Parameters+0x2a0>)
 8002424:	edc3 7a00 	vstr	s15, [r3]
        start_y = i*cell_separation;
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	ee07 3a90 	vmov	s15, r3
 800242e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002432:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <separate_Parameters+0x29c>)
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243c:	4b23      	ldr	r3, [pc, #140]	; (80024cc <separate_Parameters+0x2a4>)
 800243e:	edc3 7a00 	vstr	s15, [r3]
 8002442:	e023      	b.n	800248c <separate_Parameters+0x264>
      }
      else if (array_string[i][j] == 'G')
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	4413      	add	r3, r2
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	4413      	add	r3, r2
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b47      	cmp	r3, #71	; 0x47
 8002456:	d119      	bne.n	800248c <separate_Parameters+0x264>
      {
      //Definimos su posicion
        goal_x= j*cell_separation;
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002462:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <separate_Parameters+0x29c>)
 8002464:	edd3 7a00 	vldr	s15, [r3]
 8002468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246c:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <separate_Parameters+0x2a8>)
 800246e:	edc3 7a00 	vstr	s15, [r3]
        goal_y= i*cell_separation;
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	ee07 3a90 	vmov	s15, r3
 8002478:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800247c:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <separate_Parameters+0x29c>)
 800247e:	edd3 7a00 	vldr	s15, [r3]
 8002482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002486:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <separate_Parameters+0x2ac>)
 8002488:	edc3 7a00 	vstr	s15, [r3]
    for(int j = 0; j < grid_map_colum; j++)
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	3301      	adds	r3, #1
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <separate_Parameters+0x298>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	4293      	cmp	r3, r2
 800249c:	dbad      	blt.n	80023fa <separate_Parameters+0x1d2>
  for(int i = 0; i < grid_map_row; i++)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3301      	adds	r3, #1
 80024a2:	61fb      	str	r3, [r7, #28]
 80024a4:	4b05      	ldr	r3, [pc, #20]	; (80024bc <separate_Parameters+0x294>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	4293      	cmp	r3, r2
 80024ae:	dba1      	blt.n	80023f4 <separate_Parameters+0x1cc>
      }
    }
  }

  return array_string;
 80024b0:	697b      	ldr	r3, [r7, #20]

}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3734      	adds	r7, #52	; 0x34
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd90      	pop	{r4, r7, pc}
 80024ba:	bf00      	nop
 80024bc:	2000040c 	.word	0x2000040c
 80024c0:	2000040d 	.word	0x2000040d
 80024c4:	20000410 	.word	0x20000410
 80024c8:	20000414 	.word	0x20000414
 80024cc:	20000418 	.word	0x20000418
 80024d0:	2000041c 	.word	0x2000041c
 80024d4:	20000420 	.word	0x20000420

080024d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024d8:	480d      	ldr	r0, [pc, #52]	; (8002510 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80024dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024e0:	480c      	ldr	r0, [pc, #48]	; (8002514 <LoopForever+0x6>)
  ldr r1, =_edata
 80024e2:	490d      	ldr	r1, [pc, #52]	; (8002518 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024e4:	4a0d      	ldr	r2, [pc, #52]	; (800251c <LoopForever+0xe>)
  movs r3, #0
 80024e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024e8:	e002      	b.n	80024f0 <LoopCopyDataInit>

080024ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ee:	3304      	adds	r3, #4

080024f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f4:	d3f9      	bcc.n	80024ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024f6:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024f8:	4c0a      	ldr	r4, [pc, #40]	; (8002524 <LoopForever+0x16>)
  movs r3, #0
 80024fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024fc:	e001      	b.n	8002502 <LoopFillZerobss>

080024fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002500:	3204      	adds	r2, #4

08002502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002504:	d3fb      	bcc.n	80024fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002506:	f001 f857 	bl	80035b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800250a:	f7ff fd61 	bl	8001fd0 <main>

0800250e <LoopForever>:

LoopForever:
    b LoopForever
 800250e:	e7fe      	b.n	800250e <LoopForever>
  ldr   r0, =_estack
 8002510:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002518:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800251c:	08008d14 	.word	0x08008d14
  ldr r2, =_sbss
 8002520:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002524:	20000c94 	.word	0x20000c94

08002528 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002528:	e7fe      	b.n	8002528 <ADC_IRQHandler>

0800252a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0
	return 1;
 800252e:	2301      	movs	r3, #1
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <_kill>:

int _kill(int pid, int sig)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002544:	f001 f81e 	bl	8003584 <__errno>
 8002548:	4603      	mov	r3, r0
 800254a:	2216      	movs	r2, #22
 800254c:	601a      	str	r2, [r3, #0]
	return -1;
 800254e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <_exit>:

void _exit (int status)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002562:	f04f 31ff 	mov.w	r1, #4294967295
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff ffe7 	bl	800253a <_kill>
	while (1) {}		/* Make sure we hang here */
 800256c:	e7fe      	b.n	800256c <_exit+0x12>

0800256e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b086      	sub	sp, #24
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	e00a      	b.n	8002596 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002580:	f3af 8000 	nop.w
 8002584:	4601      	mov	r1, r0
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	60ba      	str	r2, [r7, #8]
 800258c:	b2ca      	uxtb	r2, r1
 800258e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	3301      	adds	r3, #1
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	429a      	cmp	r2, r3
 800259c:	dbf0      	blt.n	8002580 <_read+0x12>
	}

return len;
 800259e:	687b      	ldr	r3, [r7, #4]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	e009      	b.n	80025ce <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	60ba      	str	r2, [r7, #8]
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	3301      	adds	r3, #1
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	dbf1      	blt.n	80025ba <_write+0x12>
	}
	return len;
 80025d6:	687b      	ldr	r3, [r7, #4]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <_close>:

int _close(int file)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	return -1;
 80025e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002608:	605a      	str	r2, [r3, #4]
	return 0;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <_isatty>:

int _isatty(int file)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	return 1;
 8002620:	2301      	movs	r3, #1
}
 8002622:	4618      	mov	r0, r3
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800262e:	b480      	push	{r7}
 8002630:	b085      	sub	sp, #20
 8002632:	af00      	add	r7, sp, #0
 8002634:	60f8      	str	r0, [r7, #12]
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
	return 0;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002650:	4a14      	ldr	r2, [pc, #80]	; (80026a4 <_sbrk+0x5c>)
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <_sbrk+0x60>)
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800265c:	4b13      	ldr	r3, [pc, #76]	; (80026ac <_sbrk+0x64>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d102      	bne.n	800266a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002664:	4b11      	ldr	r3, [pc, #68]	; (80026ac <_sbrk+0x64>)
 8002666:	4a12      	ldr	r2, [pc, #72]	; (80026b0 <_sbrk+0x68>)
 8002668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800266a:	4b10      	ldr	r3, [pc, #64]	; (80026ac <_sbrk+0x64>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	429a      	cmp	r2, r3
 8002676:	d207      	bcs.n	8002688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002678:	f000 ff84 	bl	8003584 <__errno>
 800267c:	4603      	mov	r3, r0
 800267e:	220c      	movs	r2, #12
 8002680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002682:	f04f 33ff 	mov.w	r3, #4294967295
 8002686:	e009      	b.n	800269c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002688:	4b08      	ldr	r3, [pc, #32]	; (80026ac <_sbrk+0x64>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800268e:	4b07      	ldr	r3, [pc, #28]	; (80026ac <_sbrk+0x64>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	4a05      	ldr	r2, [pc, #20]	; (80026ac <_sbrk+0x64>)
 8002698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800269a:	68fb      	ldr	r3, [r7, #12]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20020000 	.word	0x20020000
 80026a8:	00000400 	.word	0x00000400
 80026ac:	20000424 	.word	0x20000424
 80026b0:	20000c98 	.word	0x20000c98

080026b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	db0b      	blt.n	80026de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	f003 021f 	and.w	r2, r3, #31
 80026cc:	4907      	ldr	r1, [pc, #28]	; (80026ec <__NVIC_EnableIRQ+0x38>)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	2001      	movs	r0, #1
 80026d6:	fa00 f202 	lsl.w	r2, r0, r2
 80026da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	e000e100 	.word	0xe000e100

080026f0 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002700:	d10a      	bne.n	8002718 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002702:	4b62      	ldr	r3, [pc, #392]	; (800288c <BasicTimer_Config+0x19c>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	4a61      	ldr	r2, [pc, #388]	; (800288c <BasicTimer_Config+0x19c>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	4a5f      	ldr	r2, [pc, #380]	; (8002890 <BasicTimer_Config+0x1a0>)
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	e02e      	b.n	8002776 <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4a5d      	ldr	r2, [pc, #372]	; (8002894 <BasicTimer_Config+0x1a4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d10a      	bne.n	8002738 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002722:	4b5a      	ldr	r3, [pc, #360]	; (800288c <BasicTimer_Config+0x19c>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a59      	ldr	r2, [pc, #356]	; (800288c <BasicTimer_Config+0x19c>)
 8002728:	f043 0302 	orr.w	r3, r3, #2
 800272c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	4a59      	ldr	r2, [pc, #356]	; (8002898 <BasicTimer_Config+0x1a8>)
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e01e      	b.n	8002776 <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4a57      	ldr	r2, [pc, #348]	; (800289c <BasicTimer_Config+0x1ac>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d10a      	bne.n	8002758 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002742:	4b52      	ldr	r3, [pc, #328]	; (800288c <BasicTimer_Config+0x19c>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	4a51      	ldr	r2, [pc, #324]	; (800288c <BasicTimer_Config+0x19c>)
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	4a53      	ldr	r2, [pc, #332]	; (80028a0 <BasicTimer_Config+0x1b0>)
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	e00e      	b.n	8002776 <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	4a51      	ldr	r2, [pc, #324]	; (80028a4 <BasicTimer_Config+0x1b4>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d109      	bne.n	8002776 <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8002762:	4b4a      	ldr	r3, [pc, #296]	; (800288c <BasicTimer_Config+0x19c>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	4a49      	ldr	r2, [pc, #292]	; (800288c <BasicTimer_Config+0x19c>)
 8002768:	f043 0308 	orr.w	r3, r3, #8
 800276c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	4a4d      	ldr	r2, [pc, #308]	; (80028a8 <BasicTimer_Config+0x1b8>)
 8002774:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 8002776:	f000 fa75 	bl	8002c64 <getConfigPLL>
 800277a:	4603      	mov	r3, r0
 800277c:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 800277e:	f000 fa8d 	bl	8002c9c <getClockAPB1>
 8002782:	4603      	mov	r3, r0
 8002784:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 8002786:	7bbb      	ldrb	r3, [r7, #14]
 8002788:	2b31      	cmp	r3, #49	; 0x31
 800278a:	d903      	bls.n	8002794 <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	73fb      	strb	r3, [r7, #15]
 8002792:	e000      	b.n	8002796 <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 8002794:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	8852      	ldrh	r2, [r2, #2]
 800279c:	fb02 f303 	mul.w	r3, r2, r3
 80027a0:	1e5a      	subs	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d112      	bne.n	80027d6 <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f022 0210 	bic.w	r2, r2, #16
 80027be:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	3201      	adds	r2, #1
 80027ca:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	625a      	str	r2, [r3, #36]	; 0x24
 80027d4:	e018      	b.n	8002808 <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f022 0210 	bic.w	r2, r2, #16
 80027e4:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f042 0210 	orr.w	r2, r2, #16
 80027f4:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6852      	ldr	r2, [r2, #4]
 8002806:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002808:	b672      	cpsid	i
}
 800280a:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002814:	d103      	bne.n	800281e <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8002816:	201c      	movs	r0, #28
 8002818:	f7ff ff4c 	bl	80026b4 <__NVIC_EnableIRQ>
 800281c:	e019      	b.n	8002852 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	4a1c      	ldr	r2, [pc, #112]	; (8002894 <BasicTimer_Config+0x1a4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d103      	bne.n	8002830 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8002828:	201d      	movs	r0, #29
 800282a:	f7ff ff43 	bl	80026b4 <__NVIC_EnableIRQ>
 800282e:	e010      	b.n	8002852 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4a19      	ldr	r2, [pc, #100]	; (800289c <BasicTimer_Config+0x1ac>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d103      	bne.n	8002842 <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 800283a:	201e      	movs	r0, #30
 800283c:	f7ff ff3a 	bl	80026b4 <__NVIC_EnableIRQ>
 8002840:	e007      	b.n	8002852 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	4a17      	ldr	r2, [pc, #92]	; (80028a4 <BasicTimer_Config+0x1b4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d102      	bne.n	8002852 <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 800284c:	2032      	movs	r0, #50	; 0x32
 800284e:	f7ff ff31 	bl	80026b4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8002852:	b662      	cpsie	i
}
 8002854:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	7a1b      	ldrb	r3, [r3, #8]
 800285a:	4619      	mov	r1, r3
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f87d 	bl	800295c <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f022 0201 	bic.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f042 0201 	orr.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]
}
 8002882:	bf00      	nop
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800
 8002890:	20000428 	.word	0x20000428
 8002894:	40000400 	.word	0x40000400
 8002898:	2000042c 	.word	0x2000042c
 800289c:	40000800 	.word	0x40000800
 80028a0:	20000430 	.word	0x20000430
 80028a4:	40000c00 	.word	0x40000c00
 80028a8:	20000434 	.word	0x20000434

080028ac <BasicTimer3_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer3_Callback(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
	__NOP();
 80028b0:	bf00      	nop
}
 80028b2:	bf00      	nop
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <BasicTimer4_Callback>:

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
	__NOP();
 80028c0:	bf00      	nop
}
 80028c2:	bf00      	nop
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
	__NOP();
 80028d0:	bf00      	nop
}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <TIM2_IRQHandler+0x1c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <TIM2_IRQHandler+0x1c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 80028f0:	f7ff fc4a 	bl	8002188 <BasicTimer2_Callback>

}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000428 	.word	0x20000428

080028fc <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <TIM3_IRQHandler+0x1c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	4b04      	ldr	r3, [pc, #16]	; (8002918 <TIM3_IRQHandler+0x1c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0201 	bic.w	r2, r2, #1
 800290e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 8002910:	f7ff ffcc 	bl	80028ac <BasicTimer3_Callback>

}
 8002914:	bf00      	nop
 8002916:	bd80      	pop	{r7, pc}
 8002918:	2000042c 	.word	0x2000042c

0800291c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <TIM4_IRQHandler+0x1c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691a      	ldr	r2, [r3, #16]
 8002926:	4b04      	ldr	r3, [pc, #16]	; (8002938 <TIM4_IRQHandler+0x1c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0201 	bic.w	r2, r2, #1
 800292e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 8002930:	f7ff ffc4 	bl	80028bc <BasicTimer4_Callback>

}
 8002934:	bf00      	nop
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000430 	.word	0x20000430

0800293c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <TIM5_IRQHandler+0x1c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	4b04      	ldr	r3, [pc, #16]	; (8002958 <TIM5_IRQHandler+0x1c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0201 	bic.w	r2, r2, #1
 800294e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 8002950:	f7ff ffbc 	bl	80028cc <BasicTimer5_Callback>

}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000434 	.word	0x20000434

0800295c <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d108      	bne.n	8002980 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f042 0201 	orr.w	r2, r2, #1
 800297c:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 800297e:	e007      	b.n	8002990 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f022 0201 	bic.w	r2, r2, #1
 800298e:	60da      	str	r2, [r3, #12]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	4608      	mov	r0, r1
 80029a6:	4611      	mov	r1, r2
 80029a8:	461a      	mov	r2, r3
 80029aa:	4603      	mov	r3, r0
 80029ac:	70fb      	strb	r3, [r7, #3]
 80029ae:	460b      	mov	r3, r1
 80029b0:	70bb      	strb	r3, [r7, #2]
 80029b2:	4613      	mov	r3, r2
 80029b4:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	78ba      	ldrb	r2, [r7, #2]
 80029c0:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	787a      	ldrb	r2, [r7, #1]
 80029c6:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	7c3a      	ldrb	r2, [r7, #16]
 80029cc:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	7d3a      	ldrb	r2, [r7, #20]
 80029d2:	715a      	strb	r2, [r3, #5]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4a88      	ldr	r2, [pc, #544]	; (8002c18 <GPIO_Config+0x238>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d106      	bne.n	8002a08 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 80029fa:	4b88      	ldr	r3, [pc, #544]	; (8002c1c <GPIO_Config+0x23c>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4a87      	ldr	r2, [pc, #540]	; (8002c1c <GPIO_Config+0x23c>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6313      	str	r3, [r2, #48]	; 0x30
 8002a06:	e03a      	b.n	8002a7e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	4a84      	ldr	r2, [pc, #528]	; (8002c20 <GPIO_Config+0x240>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d106      	bne.n	8002a20 <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 8002a12:	4b82      	ldr	r3, [pc, #520]	; (8002c1c <GPIO_Config+0x23c>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a81      	ldr	r2, [pc, #516]	; (8002c1c <GPIO_Config+0x23c>)
 8002a18:	f043 0302 	orr.w	r3, r3, #2
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	e02e      	b.n	8002a7e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	4a7f      	ldr	r2, [pc, #508]	; (8002c24 <GPIO_Config+0x244>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d106      	bne.n	8002a38 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 8002a2a:	4b7c      	ldr	r3, [pc, #496]	; (8002c1c <GPIO_Config+0x23c>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	4a7b      	ldr	r2, [pc, #492]	; (8002c1c <GPIO_Config+0x23c>)
 8002a30:	f043 0304 	orr.w	r3, r3, #4
 8002a34:	6313      	str	r3, [r2, #48]	; 0x30
 8002a36:	e022      	b.n	8002a7e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	4a7a      	ldr	r2, [pc, #488]	; (8002c28 <GPIO_Config+0x248>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d106      	bne.n	8002a50 <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 8002a42:	4b76      	ldr	r3, [pc, #472]	; (8002c1c <GPIO_Config+0x23c>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	4a75      	ldr	r2, [pc, #468]	; (8002c1c <GPIO_Config+0x23c>)
 8002a48:	f043 0308 	orr.w	r3, r3, #8
 8002a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4e:	e016      	b.n	8002a7e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	4a75      	ldr	r2, [pc, #468]	; (8002c2c <GPIO_Config+0x24c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d106      	bne.n	8002a68 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 8002a5a:	4b70      	ldr	r3, [pc, #448]	; (8002c1c <GPIO_Config+0x23c>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	4a6f      	ldr	r2, [pc, #444]	; (8002c1c <GPIO_Config+0x23c>)
 8002a60:	f043 0310 	orr.w	r3, r3, #16
 8002a64:	6313      	str	r3, [r2, #48]	; 0x30
 8002a66:	e00a      	b.n	8002a7e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4a70      	ldr	r2, [pc, #448]	; (8002c30 <GPIO_Config+0x250>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d105      	bne.n	8002a7e <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 8002a72:	4b6a      	ldr	r3, [pc, #424]	; (8002c1c <GPIO_Config+0x23c>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	4a69      	ldr	r2, [pc, #420]	; (8002c1c <GPIO_Config+0x23c>)
 8002a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a7c:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	785b      	ldrb	r3, [r3, #1]
 8002a82:	461a      	mov	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	2103      	movs	r1, #3
 8002a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	400a      	ands	r2, r1
 8002aac:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	6819      	ldr	r1, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	789b      	ldrb	r3, [r3, #2]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	2301      	movs	r3, #1
 8002adc:	408b      	lsls	r3, r1
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	400a      	ands	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	6859      	ldr	r1, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	78db      	ldrb	r3, [r3, #3]
 8002afe:	461a      	mov	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	2103      	movs	r1, #3
 8002b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	4619      	mov	r1, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	400a      	ands	r2, r1
 8002b28:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	6899      	ldr	r1, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	791b      	ldrb	r3, [r3, #4]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	2103      	movs	r1, #3
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	4619      	mov	r1, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	400a      	ands	r2, r1
 8002b68:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	68d9      	ldr	r1, [r3, #12]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	785b      	ldrb	r3, [r3, #1]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d143      	bne.n	8002c0a <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b07      	cmp	r3, #7
 8002b88:	d81f      	bhi.n	8002bca <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	6a1a      	ldr	r2, [r3, #32]
 8002b98:	210f      	movs	r1, #15
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	400a      	ands	r2, r1
 8002baa:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	6a1a      	ldr	r2, [r3, #32]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	795b      	ldrb	r3, [r3, #5]
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8002bc8:	e01f      	b.n	8002c0a <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	3b08      	subs	r3, #8
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bda:	210f      	movs	r1, #15
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	fa01 f303 	lsl.w	r3, r1, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	4619      	mov	r1, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	400a      	ands	r2, r1
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	795b      	ldrb	r3, [r3, #5]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002c00:	4619      	mov	r1, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002c0a:	bf00      	nop
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40020000 	.word	0x40020000
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40020400 	.word	0x40020400
 8002c24:	40020800 	.word	0x40020800
 8002c28:	40020c00 	.word	0x40020c00
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	40021c00 	.word	0x40021c00

08002c34 <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	695a      	ldr	r2, [r3, #20]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	4619      	mov	r1, r3
 8002c48:	2301      	movs	r3, #1
 8002c4a:	408b      	lsls	r3, r1
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	404a      	eors	r2, r1
 8002c54:	615a      	str	r2, [r3, #20]
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <getConfigPLL+0x30>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d103      	bne.n	8002c82 <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 8002c7a:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <getConfigPLL+0x34>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	71fb      	strb	r3, [r7, #7]
 8002c80:	e001      	b.n	8002c86 <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 8002c82:	2310      	movs	r3, #16
 8002c84:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 8002c86:	79fb      	ldrb	r3, [r7, #7]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	40023800 	.word	0x40023800
 8002c98:	20000438 	.word	0x20000438

08002c9c <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 8002ca2:	f7ff ffdf 	bl	8002c64 <getConfigPLL>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 8002caa:	2300      	movs	r3, #0
 8002cac:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 8002cae:	79bb      	ldrb	r3, [r7, #6]
 8002cb0:	2b31      	cmp	r3, #49	; 0x31
 8002cb2:	d802      	bhi.n	8002cba <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 8002cb4:	79bb      	ldrb	r3, [r7, #6]
 8002cb6:	71fb      	strb	r3, [r7, #7]
 8002cb8:	e002      	b.n	8002cc0 <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 8002cba:	79bb      	ldrb	r3, [r7, #6]
 8002cbc:	089b      	lsrs	r3, r3, #2
 8002cbe:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <__NVIC_EnableIRQ>:
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	db0b      	blt.n	8002cf6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	f003 021f 	and.w	r2, r3, #31
 8002ce4:	4907      	ldr	r1, [pc, #28]	; (8002d04 <__NVIC_EnableIRQ+0x38>)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	2001      	movs	r0, #1
 8002cee:	fa00 f202 	lsl.w	r2, r0, r2
 8002cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000e100 	.word	0xe000e100

08002d08 <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	4a8f      	ldr	r2, [pc, #572]	; (8002f54 <USART_Config+0x24c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d107      	bne.n	8002d2a <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 8002d1a:	4b8f      	ldr	r3, [pc, #572]	; (8002f58 <USART_Config+0x250>)
 8002d1c:	2210      	movs	r2, #16
 8002d1e:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4a8d      	ldr	r2, [pc, #564]	; (8002f5c <USART_Config+0x254>)
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	e019      	b.n	8002d5e <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	4a8c      	ldr	r2, [pc, #560]	; (8002f60 <USART_Config+0x258>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d108      	bne.n	8002d46 <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 8002d34:	4b88      	ldr	r3, [pc, #544]	; (8002f58 <USART_Config+0x250>)
 8002d36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	4a88      	ldr	r2, [pc, #544]	; (8002f64 <USART_Config+0x25c>)
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	e00b      	b.n	8002d5e <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	4a87      	ldr	r2, [pc, #540]	; (8002f68 <USART_Config+0x260>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d106      	bne.n	8002d5e <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 8002d50:	4b81      	ldr	r3, [pc, #516]	; (8002f58 <USART_Config+0x250>)
 8002d52:	2220      	movs	r2, #32
 8002d54:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	4a84      	ldr	r2, [pc, #528]	; (8002f6c <USART_Config+0x264>)
 8002d5c:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2200      	movs	r2, #0
 8002d64:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	789b      	ldrb	r3, [r3, #2]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d03d      	beq.n	8002df2 <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d84:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d94:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002da4:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002db4:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	789b      	ldrb	r3, [r3, #2]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d110      	bne.n	8002de0 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dcc:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	e018      	b.n	8002e12 <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dee:	60da      	str	r2, [r3, #12]
 8002df0:	e00f      	b.n	8002e12 <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e00:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e10:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	78db      	ldrb	r3, [r3, #3]
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d84c      	bhi.n	8002eb4 <USART_Config+0x1ac>
 8002e1a:	a201      	add	r2, pc, #4	; (adr r2, 8002e20 <USART_Config+0x118>)
 8002e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e20:	08002e31 	.word	0x08002e31
 8002e24:	08002e4f 	.word	0x08002e4f
 8002e28:	08002e71 	.word	0x08002e71
 8002e2c:	08002e93 	.word	0x08002e93
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	691a      	ldr	r2, [r3, #16]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002e3e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	6912      	ldr	r2, [r2, #16]
 8002e4a:	611a      	str	r2, [r3, #16]
		break;
 8002e4c:	e041      	b.n	8002ed2 <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002e5c:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e6c:	611a      	str	r2, [r3, #16]
		break;
 8002e6e:	e030      	b.n	8002ed2 <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002e7e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	691a      	ldr	r2, [r3, #16]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e8e:	611a      	str	r2, [r3, #16]
		break;
 8002e90:	e01f      	b.n	8002ed2 <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002ea0:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	691a      	ldr	r2, [r3, #16]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8002eb0:	611a      	str	r2, [r3, #16]
		break;
 8002eb2:	e00e      	b.n	8002ed2 <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002ec2:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	6912      	ldr	r2, [r2, #16]
 8002ece:	611a      	str	r2, [r3, #16]
		break;
 8002ed0:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	4a21      	ldr	r2, [pc, #132]	; (8002f60 <USART_Config+0x258>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d104      	bne.n	8002eea <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8002ee0:	f7ff fedc 	bl	8002c9c <getClockAPB1>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	73fb      	strb	r3, [r7, #15]
 8002ee8:	e003      	b.n	8002ef2 <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 8002eea:	f7ff febb 	bl	8002c64 <getConfigPLL>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	785b      	ldrb	r3, [r3, #1]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10b      	bne.n	8002f12 <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 f91f 	bl	8003144 <getValueBaudRate>
 8002f06:	4603      	mov	r3, r0
 8002f08:	461a      	mov	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	e02f      	b.n	8002f72 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	785b      	ldrb	r3, [r3, #1]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d10b      	bne.n	8002f32 <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 f90f 	bl	8003144 <getValueBaudRate>
 8002f26:	4603      	mov	r3, r0
 8002f28:	461a      	mov	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	e01f      	b.n	8002f72 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	785b      	ldrb	r3, [r3, #1]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d11a      	bne.n	8002f70 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 f8ff 	bl	8003144 <getValueBaudRate>
 8002f46:	4603      	mov	r3, r0
 8002f48:	461a      	mov	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	e00f      	b.n	8002f72 <USART_Config+0x26a>
 8002f52:	bf00      	nop
 8002f54:	40011000 	.word	0x40011000
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	2000043c 	.word	0x2000043c
 8002f60:	40004400 	.word	0x40004400
 8002f64:	20000440 	.word	0x20000440
 8002f68:	40011400 	.word	0x40011400
 8002f6c:	20000444 	.word	0x20000444
	}
	else
	{
		__NOP();
 8002f70:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d866      	bhi.n	8003048 <USART_Config+0x340>
 8002f7a:	a201      	add	r2, pc, #4	; (adr r2, 8002f80 <USART_Config+0x278>)
 8002f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f80:	08002f91 	.word	0x08002f91
 8002f84:	08002fb3 	.word	0x08002fb3
 8002f88:	08002fd5 	.word	0x08002fd5
 8002f8c:	08003017 	.word	0x08003017
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f022 0208 	bic.w	r2, r2, #8
 8002f9e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f042 0208 	orr.w	r2, r2, #8
 8002fae:	60da      	str	r2, [r3, #12]

		break;
 8002fb0:	e063      	b.n	800307a <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f022 0204 	bic.w	r2, r2, #4
 8002fc0:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f042 0204 	orr.w	r2, r2, #4
 8002fd0:	60da      	str	r2, [r3, #12]

		break;
 8002fd2:	e052      	b.n	800307a <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f022 0208 	bic.w	r2, r2, #8
 8002fe2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f042 0208 	orr.w	r2, r2, #8
 8002ff2:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f022 0204 	bic.w	r2, r2, #4
 8003002:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f042 0204 	orr.w	r2, r2, #4
 8003012:	60da      	str	r2, [r3, #12]


		break;
 8003014:	e031      	b.n	800307a <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003024:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f022 0208 	bic.w	r2, r2, #8
 8003034:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f022 0204 	bic.w	r2, r2, #4
 8003044:	60da      	str	r2, [r3, #12]
		break;
 8003046:	e018      	b.n	800307a <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003056:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f022 0208 	bic.w	r2, r2, #8
 8003066:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f022 0204 	bic.w	r2, r2, #4
 8003076:	60da      	str	r2, [r3, #12]
		break;
 8003078:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 800307a:	b672      	cpsid	i
}
 800307c:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	791b      	ldrb	r3, [r3, #4]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d110      	bne.n	80030a8 <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f022 0220 	bic.w	r2, r2, #32
 8003094:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f042 0220 	orr.w	r2, r2, #32
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	e007      	b.n	80030b8 <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f022 0220 	bic.w	r2, r2, #32
 80030b6:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	791b      	ldrb	r3, [r3, #4]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d003      	beq.n	80030c8 <USART_Config+0x3c0>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	795b      	ldrb	r3, [r3, #5]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d11a      	bne.n	80030fe <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	4a1a      	ldr	r2, [pc, #104]	; (8003138 <USART_Config+0x430>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d103      	bne.n	80030da <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 80030d2:	2025      	movs	r0, #37	; 0x25
 80030d4:	f7ff fdfa 	bl	8002ccc <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80030d8:	e013      	b.n	8003102 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	4a17      	ldr	r2, [pc, #92]	; (800313c <USART_Config+0x434>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d103      	bne.n	80030ec <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 80030e4:	2026      	movs	r0, #38	; 0x26
 80030e6:	f7ff fdf1 	bl	8002ccc <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80030ea:	e00a      	b.n	8003102 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	4a13      	ldr	r2, [pc, #76]	; (8003140 <USART_Config+0x438>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d105      	bne.n	8003102 <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 80030f6:	2047      	movs	r0, #71	; 0x47
 80030f8:	f7ff fde8 	bl	8002ccc <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80030fc:	e001      	b.n	8003102 <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 80030fe:	bf00      	nop
 8003100:	e000      	b.n	8003104 <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8003102:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8003104:	b662      	cpsie	i
}
 8003106:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b03      	cmp	r3, #3
 800310e:	d00f      	beq.n	8003130 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800311e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800312e:	60da      	str	r2, [r3, #12]
	}
}
 8003130:	bf00      	nop
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40011000 	.word	0x40011000
 800313c:	40004400 	.word	0x40004400
 8003140:	40011400 	.word	0x40011400

08003144 <getValueBaudRate>:

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 8003144:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003148:	b086      	sub	sp, #24
 800314a:	af00      	add	r7, sp, #0
 800314c:	6039      	str	r1, [r7, #0]
 800314e:	4601      	mov	r1, r0
 8003150:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 8003152:	79f9      	ldrb	r1, [r7, #7]
 8003154:	2000      	movs	r0, #0
 8003156:	460a      	mov	r2, r1
 8003158:	4603      	mov	r3, r0
 800315a:	491f      	ldr	r1, [pc, #124]	; (80031d8 <getValueBaudRate+0x94>)
 800315c:	fb01 f003 	mul.w	r0, r1, r3
 8003160:	2102      	movs	r1, #2
 8003162:	fb02 f101 	mul.w	r1, r2, r1
 8003166:	4401      	add	r1, r0
 8003168:	481b      	ldr	r0, [pc, #108]	; (80031d8 <getValueBaudRate+0x94>)
 800316a:	fba2 4500 	umull	r4, r5, r2, r0
 800316e:	194b      	adds	r3, r1, r5
 8003170:	461d      	mov	r5, r3
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	2200      	movs	r2, #0
 8003178:	4698      	mov	r8, r3
 800317a:	4691      	mov	r9, r2
 800317c:	4642      	mov	r2, r8
 800317e:	464b      	mov	r3, r9
 8003180:	4620      	mov	r0, r4
 8003182:	4629      	mov	r1, r5
 8003184:	f7fd fd88 	bl	8000c98 <__aeabi_ldivmod>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4613      	mov	r3, r2
 800318e:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	4a12      	ldr	r2, [pc, #72]	; (80031dc <getValueBaudRate+0x98>)
 8003194:	fba2 2303 	umull	r2, r3, r2, r3
 8003198:	0b5b      	lsrs	r3, r3, #13
 800319a:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f242 7210 	movw	r2, #10000	; 0x2710
 80031a2:	fb02 f303 	mul.w	r3, r2, r3
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80031b2:	4a0a      	ldr	r2, [pc, #40]	; (80031dc <getValueBaudRate+0x98>)
 80031b4:	fba2 2303 	umull	r2, r3, r2, r3
 80031b8:	0a5b      	lsrs	r3, r3, #9
 80031ba:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	7afb      	ldrb	r3, [r7, #11]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	4313      	orrs	r3, r2
 80031ca:	813b      	strh	r3, [r7, #8]

    return value;
 80031cc:	893b      	ldrh	r3, [r7, #8]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031d8:	540be400 	.word	0x540be400
 80031dc:	d1b71759 	.word	0xd1b71759

080031e0 <getRxData>:
	}
}

//Funcion para leer un char
uint8_t getRxData(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
	return auxRxData;
 80031e4:	4b03      	ldr	r3, [pc, #12]	; (80031f4 <getRxData+0x14>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000448 	.word	0x20000448

080031f8 <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d10c      	bne.n	8003224 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 8003222:	e005      	b.n	8003230 <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	60da      	str	r2, [r3, #12]
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <BasicUSART1_Callback>:


//Definimos las funciones para cuando se genera una interrupcion del USART1-2 y 6
__attribute__((weak)) void BasicUSART1_Callback()
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
	__NOP();
 8003240:	bf00      	nop
}
 8003242:	bf00      	nop
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <BasicUSART6_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART6_Callback()
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
	__NOP();
 8003250:	bf00      	nop
}
 8003252:	bf00      	nop
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 8003260:	4b37      	ldr	r3, [pc, #220]	; (8003340 <USART1_IRQHandler+0xe4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d008      	beq.n	8003280 <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 800326e:	4b34      	ldr	r3, [pc, #208]	; (8003340 <USART1_IRQHandler+0xe4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	b2da      	uxtb	r2, r3
 8003276:	4b33      	ldr	r3, [pc, #204]	; (8003344 <USART1_IRQHandler+0xe8>)
 8003278:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 800327a:	f7ff ffdf 	bl	800323c <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 800327e:	e05d      	b.n	800333c <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 8003280:	4b2f      	ldr	r3, [pc, #188]	; (8003340 <USART1_IRQHandler+0xe4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328a:	2b00      	cmp	r3, #0
 800328c:	d055      	beq.n	800333a <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800328e:	4b2e      	ldr	r3, [pc, #184]	; (8003348 <USART1_IRQHandler+0xec>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10b      	bne.n	80032ae <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 8003296:	4b2d      	ldr	r3, [pc, #180]	; (800334c <USART1_IRQHandler+0xf0>)
 8003298:	781a      	ldrb	r2, [r3, #0]
 800329a:	4b29      	ldr	r3, [pc, #164]	; (8003340 <USART1_IRQHandler+0xe4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 80032a0:	4b27      	ldr	r3, [pc, #156]	; (8003340 <USART1_IRQHandler+0xe4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2100      	movs	r1, #0
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff ffa6 	bl	80031f8 <interruptionTX>
}
 80032ac:	e046      	b.n	800333c <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 80032ae:	4b26      	ldr	r3, [pc, #152]	; (8003348 <USART1_IRQHandler+0xec>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d142      	bne.n	800333c <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 80032b6:	4b26      	ldr	r3, [pc, #152]	; (8003350 <USART1_IRQHandler+0xf4>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	461a      	mov	r2, r3
 80032bc:	4b25      	ldr	r3, [pc, #148]	; (8003354 <USART1_IRQHandler+0xf8>)
 80032be:	5c9b      	ldrb	r3, [r3, r2]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00e      	beq.n	80032e2 <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 80032c4:	4b22      	ldr	r3, [pc, #136]	; (8003350 <USART1_IRQHandler+0xf4>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	461a      	mov	r2, r3
 80032ca:	4b22      	ldr	r3, [pc, #136]	; (8003354 <USART1_IRQHandler+0xf8>)
 80032cc:	5c9a      	ldrb	r2, [r3, r2]
 80032ce:	4b1c      	ldr	r3, [pc, #112]	; (8003340 <USART1_IRQHandler+0xe4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	605a      	str	r2, [r3, #4]
				posChar++;
 80032d4:	4b1e      	ldr	r3, [pc, #120]	; (8003350 <USART1_IRQHandler+0xf4>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	3301      	adds	r3, #1
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	4b1c      	ldr	r3, [pc, #112]	; (8003350 <USART1_IRQHandler+0xf4>)
 80032de:	701a      	strb	r2, [r3, #0]
}
 80032e0:	e02c      	b.n	800333c <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 80032e2:	4b1d      	ldr	r3, [pc, #116]	; (8003358 <USART1_IRQHandler+0xfc>)
 80032e4:	781a      	ldrb	r2, [r3, #0]
 80032e6:	4b1d      	ldr	r3, [pc, #116]	; (800335c <USART1_IRQHandler+0x100>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d215      	bcs.n	800331a <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80032ee:	4b1a      	ldr	r3, [pc, #104]	; (8003358 <USART1_IRQHandler+0xfc>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	461a      	mov	r2, r3
 80032f4:	2364      	movs	r3, #100	; 0x64
 80032f6:	fb02 f303 	mul.w	r3, r2, r3
 80032fa:	4a19      	ldr	r2, [pc, #100]	; (8003360 <USART1_IRQHandler+0x104>)
 80032fc:	4413      	add	r3, r2
 80032fe:	4619      	mov	r1, r3
 8003300:	4814      	ldr	r0, [pc, #80]	; (8003354 <USART1_IRQHandler+0xf8>)
 8003302:	f001 f993 	bl	800462c <siprintf>
					posChar = 0;
 8003306:	4b12      	ldr	r3, [pc, #72]	; (8003350 <USART1_IRQHandler+0xf4>)
 8003308:	2200      	movs	r2, #0
 800330a:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 800330c:	4b12      	ldr	r3, [pc, #72]	; (8003358 <USART1_IRQHandler+0xfc>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	3301      	adds	r3, #1
 8003312:	b2da      	uxtb	r2, r3
 8003314:	4b10      	ldr	r3, [pc, #64]	; (8003358 <USART1_IRQHandler+0xfc>)
 8003316:	701a      	strb	r2, [r3, #0]
}
 8003318:	e010      	b.n	800333c <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 800331a:	4b09      	ldr	r3, [pc, #36]	; (8003340 <USART1_IRQHandler+0xe4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2100      	movs	r1, #0
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff ff69 	bl	80031f8 <interruptionTX>
					posChar = 0;
 8003326:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <USART1_IRQHandler+0xf4>)
 8003328:	2200      	movs	r2, #0
 800332a:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 800332c:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <USART1_IRQHandler+0xfc>)
 800332e:	2200      	movs	r2, #0
 8003330:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8003332:	4b0a      	ldr	r3, [pc, #40]	; (800335c <USART1_IRQHandler+0x100>)
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
}
 8003338:	e000      	b.n	800333c <USART1_IRQHandler+0xe0>
		__NOP();
 800333a:	bf00      	nop
}
 800333c:	bf00      	nop
 800333e:	bd80      	pop	{r7, pc}
 8003340:	2000043c 	.word	0x2000043c
 8003344:	20000448 	.word	0x20000448
 8003348:	20000c83 	.word	0x20000c83
 800334c:	20000449 	.word	0x20000449
 8003350:	20000c82 	.word	0x20000c82
 8003354:	2000044c 	.word	0x2000044c
 8003358:	20000c81 	.word	0x20000c81
 800335c:	20000c80 	.word	0x20000c80
 8003360:	200004b0 	.word	0x200004b0

08003364 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 8003368:	4b37      	ldr	r3, [pc, #220]	; (8003448 <USART2_IRQHandler+0xe4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0320 	and.w	r3, r3, #32
 8003372:	2b00      	cmp	r3, #0
 8003374:	d008      	beq.n	8003388 <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 8003376:	4b34      	ldr	r3, [pc, #208]	; (8003448 <USART2_IRQHandler+0xe4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	b2da      	uxtb	r2, r3
 800337e:	4b33      	ldr	r3, [pc, #204]	; (800344c <USART2_IRQHandler+0xe8>)
 8003380:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 8003382:	f7fe ff0b 	bl	800219c <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 8003386:	e05d      	b.n	8003444 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 8003388:	4b2f      	ldr	r3, [pc, #188]	; (8003448 <USART2_IRQHandler+0xe4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003392:	2b00      	cmp	r3, #0
 8003394:	d055      	beq.n	8003442 <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8003396:	4b2e      	ldr	r3, [pc, #184]	; (8003450 <USART2_IRQHandler+0xec>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10b      	bne.n	80033b6 <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 800339e:	4b2d      	ldr	r3, [pc, #180]	; (8003454 <USART2_IRQHandler+0xf0>)
 80033a0:	781a      	ldrb	r2, [r3, #0]
 80033a2:	4b29      	ldr	r3, [pc, #164]	; (8003448 <USART2_IRQHandler+0xe4>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 80033a8:	4b27      	ldr	r3, [pc, #156]	; (8003448 <USART2_IRQHandler+0xe4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2100      	movs	r1, #0
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff ff22 	bl	80031f8 <interruptionTX>
}
 80033b4:	e046      	b.n	8003444 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 80033b6:	4b26      	ldr	r3, [pc, #152]	; (8003450 <USART2_IRQHandler+0xec>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d142      	bne.n	8003444 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 80033be:	4b26      	ldr	r3, [pc, #152]	; (8003458 <USART2_IRQHandler+0xf4>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	4b25      	ldr	r3, [pc, #148]	; (800345c <USART2_IRQHandler+0xf8>)
 80033c6:	5c9b      	ldrb	r3, [r3, r2]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00e      	beq.n	80033ea <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 80033cc:	4b22      	ldr	r3, [pc, #136]	; (8003458 <USART2_IRQHandler+0xf4>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	461a      	mov	r2, r3
 80033d2:	4b22      	ldr	r3, [pc, #136]	; (800345c <USART2_IRQHandler+0xf8>)
 80033d4:	5c9a      	ldrb	r2, [r3, r2]
 80033d6:	4b1c      	ldr	r3, [pc, #112]	; (8003448 <USART2_IRQHandler+0xe4>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	605a      	str	r2, [r3, #4]
				posChar++;
 80033dc:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <USART2_IRQHandler+0xf4>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	3301      	adds	r3, #1
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <USART2_IRQHandler+0xf4>)
 80033e6:	701a      	strb	r2, [r3, #0]
}
 80033e8:	e02c      	b.n	8003444 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 80033ea:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <USART2_IRQHandler+0xfc>)
 80033ec:	781a      	ldrb	r2, [r3, #0]
 80033ee:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <USART2_IRQHandler+0x100>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d215      	bcs.n	8003422 <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80033f6:	4b1a      	ldr	r3, [pc, #104]	; (8003460 <USART2_IRQHandler+0xfc>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	2364      	movs	r3, #100	; 0x64
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	4a19      	ldr	r2, [pc, #100]	; (8003468 <USART2_IRQHandler+0x104>)
 8003404:	4413      	add	r3, r2
 8003406:	4619      	mov	r1, r3
 8003408:	4814      	ldr	r0, [pc, #80]	; (800345c <USART2_IRQHandler+0xf8>)
 800340a:	f001 f90f 	bl	800462c <siprintf>
					posChar = 0;
 800340e:	4b12      	ldr	r3, [pc, #72]	; (8003458 <USART2_IRQHandler+0xf4>)
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8003414:	4b12      	ldr	r3, [pc, #72]	; (8003460 <USART2_IRQHandler+0xfc>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	3301      	adds	r3, #1
 800341a:	b2da      	uxtb	r2, r3
 800341c:	4b10      	ldr	r3, [pc, #64]	; (8003460 <USART2_IRQHandler+0xfc>)
 800341e:	701a      	strb	r2, [r3, #0]
}
 8003420:	e010      	b.n	8003444 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8003422:	4b09      	ldr	r3, [pc, #36]	; (8003448 <USART2_IRQHandler+0xe4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2100      	movs	r1, #0
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff fee5 	bl	80031f8 <interruptionTX>
					posChar = 0;
 800342e:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <USART2_IRQHandler+0xf4>)
 8003430:	2200      	movs	r2, #0
 8003432:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8003434:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <USART2_IRQHandler+0xfc>)
 8003436:	2200      	movs	r2, #0
 8003438:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800343a:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <USART2_IRQHandler+0x100>)
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
}
 8003440:	e000      	b.n	8003444 <USART2_IRQHandler+0xe0>
		__NOP();
 8003442:	bf00      	nop
}
 8003444:	bf00      	nop
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20000440 	.word	0x20000440
 800344c:	20000448 	.word	0x20000448
 8003450:	20000c83 	.word	0x20000c83
 8003454:	20000449 	.word	0x20000449
 8003458:	20000c82 	.word	0x20000c82
 800345c:	2000044c 	.word	0x2000044c
 8003460:	20000c81 	.word	0x20000c81
 8003464:	20000c80 	.word	0x20000c80
 8003468:	200004b0 	.word	0x200004b0

0800346c <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 8003470:	4b37      	ldr	r3, [pc, #220]	; (8003550 <USART6_IRQHandler+0xe4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d008      	beq.n	8003490 <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 800347e:	4b34      	ldr	r3, [pc, #208]	; (8003550 <USART6_IRQHandler+0xe4>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	b2da      	uxtb	r2, r3
 8003486:	4b33      	ldr	r3, [pc, #204]	; (8003554 <USART6_IRQHandler+0xe8>)
 8003488:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 800348a:	f7ff fedf 	bl	800324c <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 800348e:	e05d      	b.n	800354c <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 8003490:	4b2f      	ldr	r3, [pc, #188]	; (8003550 <USART6_IRQHandler+0xe4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349a:	2b00      	cmp	r3, #0
 800349c:	d055      	beq.n	800354a <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800349e:	4b2e      	ldr	r3, [pc, #184]	; (8003558 <USART6_IRQHandler+0xec>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10b      	bne.n	80034be <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 80034a6:	4b2d      	ldr	r3, [pc, #180]	; (800355c <USART6_IRQHandler+0xf0>)
 80034a8:	781a      	ldrb	r2, [r3, #0]
 80034aa:	4b29      	ldr	r3, [pc, #164]	; (8003550 <USART6_IRQHandler+0xe4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 80034b0:	4b27      	ldr	r3, [pc, #156]	; (8003550 <USART6_IRQHandler+0xe4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2100      	movs	r1, #0
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff fe9e 	bl	80031f8 <interruptionTX>
}
 80034bc:	e046      	b.n	800354c <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 80034be:	4b26      	ldr	r3, [pc, #152]	; (8003558 <USART6_IRQHandler+0xec>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d142      	bne.n	800354c <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 80034c6:	4b26      	ldr	r3, [pc, #152]	; (8003560 <USART6_IRQHandler+0xf4>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	4b25      	ldr	r3, [pc, #148]	; (8003564 <USART6_IRQHandler+0xf8>)
 80034ce:	5c9b      	ldrb	r3, [r3, r2]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00e      	beq.n	80034f2 <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 80034d4:	4b22      	ldr	r3, [pc, #136]	; (8003560 <USART6_IRQHandler+0xf4>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	4b22      	ldr	r3, [pc, #136]	; (8003564 <USART6_IRQHandler+0xf8>)
 80034dc:	5c9a      	ldrb	r2, [r3, r2]
 80034de:	4b1c      	ldr	r3, [pc, #112]	; (8003550 <USART6_IRQHandler+0xe4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	605a      	str	r2, [r3, #4]
				posChar++;
 80034e4:	4b1e      	ldr	r3, [pc, #120]	; (8003560 <USART6_IRQHandler+0xf4>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	3301      	adds	r3, #1
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	4b1c      	ldr	r3, [pc, #112]	; (8003560 <USART6_IRQHandler+0xf4>)
 80034ee:	701a      	strb	r2, [r3, #0]
}
 80034f0:	e02c      	b.n	800354c <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 80034f2:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <USART6_IRQHandler+0xfc>)
 80034f4:	781a      	ldrb	r2, [r3, #0]
 80034f6:	4b1d      	ldr	r3, [pc, #116]	; (800356c <USART6_IRQHandler+0x100>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d215      	bcs.n	800352a <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80034fe:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <USART6_IRQHandler+0xfc>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	2364      	movs	r3, #100	; 0x64
 8003506:	fb02 f303 	mul.w	r3, r2, r3
 800350a:	4a19      	ldr	r2, [pc, #100]	; (8003570 <USART6_IRQHandler+0x104>)
 800350c:	4413      	add	r3, r2
 800350e:	4619      	mov	r1, r3
 8003510:	4814      	ldr	r0, [pc, #80]	; (8003564 <USART6_IRQHandler+0xf8>)
 8003512:	f001 f88b 	bl	800462c <siprintf>
					posChar = 0;
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <USART6_IRQHandler+0xf4>)
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 800351c:	4b12      	ldr	r3, [pc, #72]	; (8003568 <USART6_IRQHandler+0xfc>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	3301      	adds	r3, #1
 8003522:	b2da      	uxtb	r2, r3
 8003524:	4b10      	ldr	r3, [pc, #64]	; (8003568 <USART6_IRQHandler+0xfc>)
 8003526:	701a      	strb	r2, [r3, #0]
}
 8003528:	e010      	b.n	800354c <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 800352a:	4b09      	ldr	r3, [pc, #36]	; (8003550 <USART6_IRQHandler+0xe4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2100      	movs	r1, #0
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff fe61 	bl	80031f8 <interruptionTX>
					posChar = 0;
 8003536:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <USART6_IRQHandler+0xf4>)
 8003538:	2200      	movs	r2, #0
 800353a:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 800353c:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <USART6_IRQHandler+0xfc>)
 800353e:	2200      	movs	r2, #0
 8003540:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8003542:	4b0a      	ldr	r3, [pc, #40]	; (800356c <USART6_IRQHandler+0x100>)
 8003544:	2200      	movs	r2, #0
 8003546:	701a      	strb	r2, [r3, #0]
}
 8003548:	e000      	b.n	800354c <USART6_IRQHandler+0xe0>
		__NOP();
 800354a:	bf00      	nop
}
 800354c:	bf00      	nop
 800354e:	bd80      	pop	{r7, pc}
 8003550:	20000444 	.word	0x20000444
 8003554:	20000448 	.word	0x20000448
 8003558:	20000c83 	.word	0x20000c83
 800355c:	20000449 	.word	0x20000449
 8003560:	20000c82 	.word	0x20000c82
 8003564:	2000044c 	.word	0x2000044c
 8003568:	20000c81 	.word	0x20000c81
 800356c:	20000c80 	.word	0x20000c80
 8003570:	200004b0 	.word	0x200004b0

08003574 <atof>:
 8003574:	2100      	movs	r1, #0
 8003576:	f001 bea3 	b.w	80052c0 <strtod>

0800357a <atoi>:
 800357a:	220a      	movs	r2, #10
 800357c:	2100      	movs	r1, #0
 800357e:	f001 bf2f 	b.w	80053e0 <strtol>
	...

08003584 <__errno>:
 8003584:	4b01      	ldr	r3, [pc, #4]	; (800358c <__errno+0x8>)
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	20000014 	.word	0x20000014

08003590 <exit>:
 8003590:	b508      	push	{r3, lr}
 8003592:	4b07      	ldr	r3, [pc, #28]	; (80035b0 <exit+0x20>)
 8003594:	4604      	mov	r4, r0
 8003596:	b113      	cbz	r3, 800359e <exit+0xe>
 8003598:	2100      	movs	r1, #0
 800359a:	f3af 8000 	nop.w
 800359e:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <exit+0x24>)
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80035a4:	b103      	cbz	r3, 80035a8 <exit+0x18>
 80035a6:	4798      	blx	r3
 80035a8:	4620      	mov	r0, r4
 80035aa:	f7fe ffd6 	bl	800255a <_exit>
 80035ae:	bf00      	nop
 80035b0:	00000000 	.word	0x00000000
 80035b4:	08008858 	.word	0x08008858

080035b8 <__libc_init_array>:
 80035b8:	b570      	push	{r4, r5, r6, lr}
 80035ba:	4d0d      	ldr	r5, [pc, #52]	; (80035f0 <__libc_init_array+0x38>)
 80035bc:	4c0d      	ldr	r4, [pc, #52]	; (80035f4 <__libc_init_array+0x3c>)
 80035be:	1b64      	subs	r4, r4, r5
 80035c0:	10a4      	asrs	r4, r4, #2
 80035c2:	2600      	movs	r6, #0
 80035c4:	42a6      	cmp	r6, r4
 80035c6:	d109      	bne.n	80035dc <__libc_init_array+0x24>
 80035c8:	4d0b      	ldr	r5, [pc, #44]	; (80035f8 <__libc_init_array+0x40>)
 80035ca:	4c0c      	ldr	r4, [pc, #48]	; (80035fc <__libc_init_array+0x44>)
 80035cc:	f005 f8f2 	bl	80087b4 <_init>
 80035d0:	1b64      	subs	r4, r4, r5
 80035d2:	10a4      	asrs	r4, r4, #2
 80035d4:	2600      	movs	r6, #0
 80035d6:	42a6      	cmp	r6, r4
 80035d8:	d105      	bne.n	80035e6 <__libc_init_array+0x2e>
 80035da:	bd70      	pop	{r4, r5, r6, pc}
 80035dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80035e0:	4798      	blx	r3
 80035e2:	3601      	adds	r6, #1
 80035e4:	e7ee      	b.n	80035c4 <__libc_init_array+0xc>
 80035e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80035ea:	4798      	blx	r3
 80035ec:	3601      	adds	r6, #1
 80035ee:	e7f2      	b.n	80035d6 <__libc_init_array+0x1e>
 80035f0:	08008d0c 	.word	0x08008d0c
 80035f4:	08008d0c 	.word	0x08008d0c
 80035f8:	08008d0c 	.word	0x08008d0c
 80035fc:	08008d10 	.word	0x08008d10

08003600 <malloc>:
 8003600:	4b02      	ldr	r3, [pc, #8]	; (800360c <malloc+0xc>)
 8003602:	4601      	mov	r1, r0
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	f000 b87f 	b.w	8003708 <_malloc_r>
 800360a:	bf00      	nop
 800360c:	20000014 	.word	0x20000014

08003610 <free>:
 8003610:	4b02      	ldr	r3, [pc, #8]	; (800361c <free+0xc>)
 8003612:	4601      	mov	r1, r0
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	f000 b80b 	b.w	8003630 <_free_r>
 800361a:	bf00      	nop
 800361c:	20000014 	.word	0x20000014

08003620 <memset>:
 8003620:	4402      	add	r2, r0
 8003622:	4603      	mov	r3, r0
 8003624:	4293      	cmp	r3, r2
 8003626:	d100      	bne.n	800362a <memset+0xa>
 8003628:	4770      	bx	lr
 800362a:	f803 1b01 	strb.w	r1, [r3], #1
 800362e:	e7f9      	b.n	8003624 <memset+0x4>

08003630 <_free_r>:
 8003630:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003632:	2900      	cmp	r1, #0
 8003634:	d044      	beq.n	80036c0 <_free_r+0x90>
 8003636:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800363a:	9001      	str	r0, [sp, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	f1a1 0404 	sub.w	r4, r1, #4
 8003642:	bfb8      	it	lt
 8003644:	18e4      	addlt	r4, r4, r3
 8003646:	f003 fbc3 	bl	8006dd0 <__malloc_lock>
 800364a:	4a1e      	ldr	r2, [pc, #120]	; (80036c4 <_free_r+0x94>)
 800364c:	9801      	ldr	r0, [sp, #4]
 800364e:	6813      	ldr	r3, [r2, #0]
 8003650:	b933      	cbnz	r3, 8003660 <_free_r+0x30>
 8003652:	6063      	str	r3, [r4, #4]
 8003654:	6014      	str	r4, [r2, #0]
 8003656:	b003      	add	sp, #12
 8003658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800365c:	f003 bbbe 	b.w	8006ddc <__malloc_unlock>
 8003660:	42a3      	cmp	r3, r4
 8003662:	d908      	bls.n	8003676 <_free_r+0x46>
 8003664:	6825      	ldr	r5, [r4, #0]
 8003666:	1961      	adds	r1, r4, r5
 8003668:	428b      	cmp	r3, r1
 800366a:	bf01      	itttt	eq
 800366c:	6819      	ldreq	r1, [r3, #0]
 800366e:	685b      	ldreq	r3, [r3, #4]
 8003670:	1949      	addeq	r1, r1, r5
 8003672:	6021      	streq	r1, [r4, #0]
 8003674:	e7ed      	b.n	8003652 <_free_r+0x22>
 8003676:	461a      	mov	r2, r3
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	b10b      	cbz	r3, 8003680 <_free_r+0x50>
 800367c:	42a3      	cmp	r3, r4
 800367e:	d9fa      	bls.n	8003676 <_free_r+0x46>
 8003680:	6811      	ldr	r1, [r2, #0]
 8003682:	1855      	adds	r5, r2, r1
 8003684:	42a5      	cmp	r5, r4
 8003686:	d10b      	bne.n	80036a0 <_free_r+0x70>
 8003688:	6824      	ldr	r4, [r4, #0]
 800368a:	4421      	add	r1, r4
 800368c:	1854      	adds	r4, r2, r1
 800368e:	42a3      	cmp	r3, r4
 8003690:	6011      	str	r1, [r2, #0]
 8003692:	d1e0      	bne.n	8003656 <_free_r+0x26>
 8003694:	681c      	ldr	r4, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	6053      	str	r3, [r2, #4]
 800369a:	4421      	add	r1, r4
 800369c:	6011      	str	r1, [r2, #0]
 800369e:	e7da      	b.n	8003656 <_free_r+0x26>
 80036a0:	d902      	bls.n	80036a8 <_free_r+0x78>
 80036a2:	230c      	movs	r3, #12
 80036a4:	6003      	str	r3, [r0, #0]
 80036a6:	e7d6      	b.n	8003656 <_free_r+0x26>
 80036a8:	6825      	ldr	r5, [r4, #0]
 80036aa:	1961      	adds	r1, r4, r5
 80036ac:	428b      	cmp	r3, r1
 80036ae:	bf04      	itt	eq
 80036b0:	6819      	ldreq	r1, [r3, #0]
 80036b2:	685b      	ldreq	r3, [r3, #4]
 80036b4:	6063      	str	r3, [r4, #4]
 80036b6:	bf04      	itt	eq
 80036b8:	1949      	addeq	r1, r1, r5
 80036ba:	6021      	streq	r1, [r4, #0]
 80036bc:	6054      	str	r4, [r2, #4]
 80036be:	e7ca      	b.n	8003656 <_free_r+0x26>
 80036c0:	b003      	add	sp, #12
 80036c2:	bd30      	pop	{r4, r5, pc}
 80036c4:	20000c84 	.word	0x20000c84

080036c8 <sbrk_aligned>:
 80036c8:	b570      	push	{r4, r5, r6, lr}
 80036ca:	4e0e      	ldr	r6, [pc, #56]	; (8003704 <sbrk_aligned+0x3c>)
 80036cc:	460c      	mov	r4, r1
 80036ce:	6831      	ldr	r1, [r6, #0]
 80036d0:	4605      	mov	r5, r0
 80036d2:	b911      	cbnz	r1, 80036da <sbrk_aligned+0x12>
 80036d4:	f000 ff94 	bl	8004600 <_sbrk_r>
 80036d8:	6030      	str	r0, [r6, #0]
 80036da:	4621      	mov	r1, r4
 80036dc:	4628      	mov	r0, r5
 80036de:	f000 ff8f 	bl	8004600 <_sbrk_r>
 80036e2:	1c43      	adds	r3, r0, #1
 80036e4:	d00a      	beq.n	80036fc <sbrk_aligned+0x34>
 80036e6:	1cc4      	adds	r4, r0, #3
 80036e8:	f024 0403 	bic.w	r4, r4, #3
 80036ec:	42a0      	cmp	r0, r4
 80036ee:	d007      	beq.n	8003700 <sbrk_aligned+0x38>
 80036f0:	1a21      	subs	r1, r4, r0
 80036f2:	4628      	mov	r0, r5
 80036f4:	f000 ff84 	bl	8004600 <_sbrk_r>
 80036f8:	3001      	adds	r0, #1
 80036fa:	d101      	bne.n	8003700 <sbrk_aligned+0x38>
 80036fc:	f04f 34ff 	mov.w	r4, #4294967295
 8003700:	4620      	mov	r0, r4
 8003702:	bd70      	pop	{r4, r5, r6, pc}
 8003704:	20000c88 	.word	0x20000c88

08003708 <_malloc_r>:
 8003708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800370c:	1ccd      	adds	r5, r1, #3
 800370e:	f025 0503 	bic.w	r5, r5, #3
 8003712:	3508      	adds	r5, #8
 8003714:	2d0c      	cmp	r5, #12
 8003716:	bf38      	it	cc
 8003718:	250c      	movcc	r5, #12
 800371a:	2d00      	cmp	r5, #0
 800371c:	4607      	mov	r7, r0
 800371e:	db01      	blt.n	8003724 <_malloc_r+0x1c>
 8003720:	42a9      	cmp	r1, r5
 8003722:	d905      	bls.n	8003730 <_malloc_r+0x28>
 8003724:	230c      	movs	r3, #12
 8003726:	603b      	str	r3, [r7, #0]
 8003728:	2600      	movs	r6, #0
 800372a:	4630      	mov	r0, r6
 800372c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003730:	4e2e      	ldr	r6, [pc, #184]	; (80037ec <_malloc_r+0xe4>)
 8003732:	f003 fb4d 	bl	8006dd0 <__malloc_lock>
 8003736:	6833      	ldr	r3, [r6, #0]
 8003738:	461c      	mov	r4, r3
 800373a:	bb34      	cbnz	r4, 800378a <_malloc_r+0x82>
 800373c:	4629      	mov	r1, r5
 800373e:	4638      	mov	r0, r7
 8003740:	f7ff ffc2 	bl	80036c8 <sbrk_aligned>
 8003744:	1c43      	adds	r3, r0, #1
 8003746:	4604      	mov	r4, r0
 8003748:	d14d      	bne.n	80037e6 <_malloc_r+0xde>
 800374a:	6834      	ldr	r4, [r6, #0]
 800374c:	4626      	mov	r6, r4
 800374e:	2e00      	cmp	r6, #0
 8003750:	d140      	bne.n	80037d4 <_malloc_r+0xcc>
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	4631      	mov	r1, r6
 8003756:	4638      	mov	r0, r7
 8003758:	eb04 0803 	add.w	r8, r4, r3
 800375c:	f000 ff50 	bl	8004600 <_sbrk_r>
 8003760:	4580      	cmp	r8, r0
 8003762:	d13a      	bne.n	80037da <_malloc_r+0xd2>
 8003764:	6821      	ldr	r1, [r4, #0]
 8003766:	3503      	adds	r5, #3
 8003768:	1a6d      	subs	r5, r5, r1
 800376a:	f025 0503 	bic.w	r5, r5, #3
 800376e:	3508      	adds	r5, #8
 8003770:	2d0c      	cmp	r5, #12
 8003772:	bf38      	it	cc
 8003774:	250c      	movcc	r5, #12
 8003776:	4629      	mov	r1, r5
 8003778:	4638      	mov	r0, r7
 800377a:	f7ff ffa5 	bl	80036c8 <sbrk_aligned>
 800377e:	3001      	adds	r0, #1
 8003780:	d02b      	beq.n	80037da <_malloc_r+0xd2>
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	442b      	add	r3, r5
 8003786:	6023      	str	r3, [r4, #0]
 8003788:	e00e      	b.n	80037a8 <_malloc_r+0xa0>
 800378a:	6822      	ldr	r2, [r4, #0]
 800378c:	1b52      	subs	r2, r2, r5
 800378e:	d41e      	bmi.n	80037ce <_malloc_r+0xc6>
 8003790:	2a0b      	cmp	r2, #11
 8003792:	d916      	bls.n	80037c2 <_malloc_r+0xba>
 8003794:	1961      	adds	r1, r4, r5
 8003796:	42a3      	cmp	r3, r4
 8003798:	6025      	str	r5, [r4, #0]
 800379a:	bf18      	it	ne
 800379c:	6059      	strne	r1, [r3, #4]
 800379e:	6863      	ldr	r3, [r4, #4]
 80037a0:	bf08      	it	eq
 80037a2:	6031      	streq	r1, [r6, #0]
 80037a4:	5162      	str	r2, [r4, r5]
 80037a6:	604b      	str	r3, [r1, #4]
 80037a8:	4638      	mov	r0, r7
 80037aa:	f104 060b 	add.w	r6, r4, #11
 80037ae:	f003 fb15 	bl	8006ddc <__malloc_unlock>
 80037b2:	f026 0607 	bic.w	r6, r6, #7
 80037b6:	1d23      	adds	r3, r4, #4
 80037b8:	1af2      	subs	r2, r6, r3
 80037ba:	d0b6      	beq.n	800372a <_malloc_r+0x22>
 80037bc:	1b9b      	subs	r3, r3, r6
 80037be:	50a3      	str	r3, [r4, r2]
 80037c0:	e7b3      	b.n	800372a <_malloc_r+0x22>
 80037c2:	6862      	ldr	r2, [r4, #4]
 80037c4:	42a3      	cmp	r3, r4
 80037c6:	bf0c      	ite	eq
 80037c8:	6032      	streq	r2, [r6, #0]
 80037ca:	605a      	strne	r2, [r3, #4]
 80037cc:	e7ec      	b.n	80037a8 <_malloc_r+0xa0>
 80037ce:	4623      	mov	r3, r4
 80037d0:	6864      	ldr	r4, [r4, #4]
 80037d2:	e7b2      	b.n	800373a <_malloc_r+0x32>
 80037d4:	4634      	mov	r4, r6
 80037d6:	6876      	ldr	r6, [r6, #4]
 80037d8:	e7b9      	b.n	800374e <_malloc_r+0x46>
 80037da:	230c      	movs	r3, #12
 80037dc:	603b      	str	r3, [r7, #0]
 80037de:	4638      	mov	r0, r7
 80037e0:	f003 fafc 	bl	8006ddc <__malloc_unlock>
 80037e4:	e7a1      	b.n	800372a <_malloc_r+0x22>
 80037e6:	6025      	str	r5, [r4, #0]
 80037e8:	e7de      	b.n	80037a8 <_malloc_r+0xa0>
 80037ea:	bf00      	nop
 80037ec:	20000c84 	.word	0x20000c84

080037f0 <__cvt>:
 80037f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037f4:	ec55 4b10 	vmov	r4, r5, d0
 80037f8:	2d00      	cmp	r5, #0
 80037fa:	460e      	mov	r6, r1
 80037fc:	4619      	mov	r1, r3
 80037fe:	462b      	mov	r3, r5
 8003800:	bfbb      	ittet	lt
 8003802:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003806:	461d      	movlt	r5, r3
 8003808:	2300      	movge	r3, #0
 800380a:	232d      	movlt	r3, #45	; 0x2d
 800380c:	700b      	strb	r3, [r1, #0]
 800380e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003810:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003814:	4691      	mov	r9, r2
 8003816:	f023 0820 	bic.w	r8, r3, #32
 800381a:	bfbc      	itt	lt
 800381c:	4622      	movlt	r2, r4
 800381e:	4614      	movlt	r4, r2
 8003820:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003824:	d005      	beq.n	8003832 <__cvt+0x42>
 8003826:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800382a:	d100      	bne.n	800382e <__cvt+0x3e>
 800382c:	3601      	adds	r6, #1
 800382e:	2102      	movs	r1, #2
 8003830:	e000      	b.n	8003834 <__cvt+0x44>
 8003832:	2103      	movs	r1, #3
 8003834:	ab03      	add	r3, sp, #12
 8003836:	9301      	str	r3, [sp, #4]
 8003838:	ab02      	add	r3, sp, #8
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	ec45 4b10 	vmov	d0, r4, r5
 8003840:	4653      	mov	r3, sl
 8003842:	4632      	mov	r2, r6
 8003844:	f001 ff24 	bl	8005690 <_dtoa_r>
 8003848:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800384c:	4607      	mov	r7, r0
 800384e:	d102      	bne.n	8003856 <__cvt+0x66>
 8003850:	f019 0f01 	tst.w	r9, #1
 8003854:	d022      	beq.n	800389c <__cvt+0xac>
 8003856:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800385a:	eb07 0906 	add.w	r9, r7, r6
 800385e:	d110      	bne.n	8003882 <__cvt+0x92>
 8003860:	783b      	ldrb	r3, [r7, #0]
 8003862:	2b30      	cmp	r3, #48	; 0x30
 8003864:	d10a      	bne.n	800387c <__cvt+0x8c>
 8003866:	2200      	movs	r2, #0
 8003868:	2300      	movs	r3, #0
 800386a:	4620      	mov	r0, r4
 800386c:	4629      	mov	r1, r5
 800386e:	f7fd f933 	bl	8000ad8 <__aeabi_dcmpeq>
 8003872:	b918      	cbnz	r0, 800387c <__cvt+0x8c>
 8003874:	f1c6 0601 	rsb	r6, r6, #1
 8003878:	f8ca 6000 	str.w	r6, [sl]
 800387c:	f8da 3000 	ldr.w	r3, [sl]
 8003880:	4499      	add	r9, r3
 8003882:	2200      	movs	r2, #0
 8003884:	2300      	movs	r3, #0
 8003886:	4620      	mov	r0, r4
 8003888:	4629      	mov	r1, r5
 800388a:	f7fd f925 	bl	8000ad8 <__aeabi_dcmpeq>
 800388e:	b108      	cbz	r0, 8003894 <__cvt+0xa4>
 8003890:	f8cd 900c 	str.w	r9, [sp, #12]
 8003894:	2230      	movs	r2, #48	; 0x30
 8003896:	9b03      	ldr	r3, [sp, #12]
 8003898:	454b      	cmp	r3, r9
 800389a:	d307      	bcc.n	80038ac <__cvt+0xbc>
 800389c:	9b03      	ldr	r3, [sp, #12]
 800389e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80038a0:	1bdb      	subs	r3, r3, r7
 80038a2:	4638      	mov	r0, r7
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	b004      	add	sp, #16
 80038a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038ac:	1c59      	adds	r1, r3, #1
 80038ae:	9103      	str	r1, [sp, #12]
 80038b0:	701a      	strb	r2, [r3, #0]
 80038b2:	e7f0      	b.n	8003896 <__cvt+0xa6>

080038b4 <__exponent>:
 80038b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038b6:	4603      	mov	r3, r0
 80038b8:	2900      	cmp	r1, #0
 80038ba:	bfb8      	it	lt
 80038bc:	4249      	neglt	r1, r1
 80038be:	f803 2b02 	strb.w	r2, [r3], #2
 80038c2:	bfb4      	ite	lt
 80038c4:	222d      	movlt	r2, #45	; 0x2d
 80038c6:	222b      	movge	r2, #43	; 0x2b
 80038c8:	2909      	cmp	r1, #9
 80038ca:	7042      	strb	r2, [r0, #1]
 80038cc:	dd2a      	ble.n	8003924 <__exponent+0x70>
 80038ce:	f10d 0407 	add.w	r4, sp, #7
 80038d2:	46a4      	mov	ip, r4
 80038d4:	270a      	movs	r7, #10
 80038d6:	46a6      	mov	lr, r4
 80038d8:	460a      	mov	r2, r1
 80038da:	fb91 f6f7 	sdiv	r6, r1, r7
 80038de:	fb07 1516 	mls	r5, r7, r6, r1
 80038e2:	3530      	adds	r5, #48	; 0x30
 80038e4:	2a63      	cmp	r2, #99	; 0x63
 80038e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80038ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80038ee:	4631      	mov	r1, r6
 80038f0:	dcf1      	bgt.n	80038d6 <__exponent+0x22>
 80038f2:	3130      	adds	r1, #48	; 0x30
 80038f4:	f1ae 0502 	sub.w	r5, lr, #2
 80038f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80038fc:	1c44      	adds	r4, r0, #1
 80038fe:	4629      	mov	r1, r5
 8003900:	4561      	cmp	r1, ip
 8003902:	d30a      	bcc.n	800391a <__exponent+0x66>
 8003904:	f10d 0209 	add.w	r2, sp, #9
 8003908:	eba2 020e 	sub.w	r2, r2, lr
 800390c:	4565      	cmp	r5, ip
 800390e:	bf88      	it	hi
 8003910:	2200      	movhi	r2, #0
 8003912:	4413      	add	r3, r2
 8003914:	1a18      	subs	r0, r3, r0
 8003916:	b003      	add	sp, #12
 8003918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800391a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800391e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003922:	e7ed      	b.n	8003900 <__exponent+0x4c>
 8003924:	2330      	movs	r3, #48	; 0x30
 8003926:	3130      	adds	r1, #48	; 0x30
 8003928:	7083      	strb	r3, [r0, #2]
 800392a:	70c1      	strb	r1, [r0, #3]
 800392c:	1d03      	adds	r3, r0, #4
 800392e:	e7f1      	b.n	8003914 <__exponent+0x60>

08003930 <_printf_float>:
 8003930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003934:	ed2d 8b02 	vpush	{d8}
 8003938:	b08d      	sub	sp, #52	; 0x34
 800393a:	460c      	mov	r4, r1
 800393c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003940:	4616      	mov	r6, r2
 8003942:	461f      	mov	r7, r3
 8003944:	4605      	mov	r5, r0
 8003946:	f003 f9b7 	bl	8006cb8 <_localeconv_r>
 800394a:	f8d0 a000 	ldr.w	sl, [r0]
 800394e:	4650      	mov	r0, sl
 8003950:	f7fc fc46 	bl	80001e0 <strlen>
 8003954:	2300      	movs	r3, #0
 8003956:	930a      	str	r3, [sp, #40]	; 0x28
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	9305      	str	r3, [sp, #20]
 800395c:	f8d8 3000 	ldr.w	r3, [r8]
 8003960:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003964:	3307      	adds	r3, #7
 8003966:	f023 0307 	bic.w	r3, r3, #7
 800396a:	f103 0208 	add.w	r2, r3, #8
 800396e:	f8c8 2000 	str.w	r2, [r8]
 8003972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003976:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800397a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800397e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003982:	9307      	str	r3, [sp, #28]
 8003984:	f8cd 8018 	str.w	r8, [sp, #24]
 8003988:	ee08 0a10 	vmov	s16, r0
 800398c:	4b9f      	ldr	r3, [pc, #636]	; (8003c0c <_printf_float+0x2dc>)
 800398e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003992:	f04f 32ff 	mov.w	r2, #4294967295
 8003996:	f7fd f8d1 	bl	8000b3c <__aeabi_dcmpun>
 800399a:	bb88      	cbnz	r0, 8003a00 <_printf_float+0xd0>
 800399c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039a0:	4b9a      	ldr	r3, [pc, #616]	; (8003c0c <_printf_float+0x2dc>)
 80039a2:	f04f 32ff 	mov.w	r2, #4294967295
 80039a6:	f7fd f8ab 	bl	8000b00 <__aeabi_dcmple>
 80039aa:	bb48      	cbnz	r0, 8003a00 <_printf_float+0xd0>
 80039ac:	2200      	movs	r2, #0
 80039ae:	2300      	movs	r3, #0
 80039b0:	4640      	mov	r0, r8
 80039b2:	4649      	mov	r1, r9
 80039b4:	f7fd f89a 	bl	8000aec <__aeabi_dcmplt>
 80039b8:	b110      	cbz	r0, 80039c0 <_printf_float+0x90>
 80039ba:	232d      	movs	r3, #45	; 0x2d
 80039bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039c0:	4b93      	ldr	r3, [pc, #588]	; (8003c10 <_printf_float+0x2e0>)
 80039c2:	4894      	ldr	r0, [pc, #592]	; (8003c14 <_printf_float+0x2e4>)
 80039c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80039c8:	bf94      	ite	ls
 80039ca:	4698      	movls	r8, r3
 80039cc:	4680      	movhi	r8, r0
 80039ce:	2303      	movs	r3, #3
 80039d0:	6123      	str	r3, [r4, #16]
 80039d2:	9b05      	ldr	r3, [sp, #20]
 80039d4:	f023 0204 	bic.w	r2, r3, #4
 80039d8:	6022      	str	r2, [r4, #0]
 80039da:	f04f 0900 	mov.w	r9, #0
 80039de:	9700      	str	r7, [sp, #0]
 80039e0:	4633      	mov	r3, r6
 80039e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80039e4:	4621      	mov	r1, r4
 80039e6:	4628      	mov	r0, r5
 80039e8:	f000 f9d8 	bl	8003d9c <_printf_common>
 80039ec:	3001      	adds	r0, #1
 80039ee:	f040 8090 	bne.w	8003b12 <_printf_float+0x1e2>
 80039f2:	f04f 30ff 	mov.w	r0, #4294967295
 80039f6:	b00d      	add	sp, #52	; 0x34
 80039f8:	ecbd 8b02 	vpop	{d8}
 80039fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a00:	4642      	mov	r2, r8
 8003a02:	464b      	mov	r3, r9
 8003a04:	4640      	mov	r0, r8
 8003a06:	4649      	mov	r1, r9
 8003a08:	f7fd f898 	bl	8000b3c <__aeabi_dcmpun>
 8003a0c:	b140      	cbz	r0, 8003a20 <_printf_float+0xf0>
 8003a0e:	464b      	mov	r3, r9
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bfbc      	itt	lt
 8003a14:	232d      	movlt	r3, #45	; 0x2d
 8003a16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003a1a:	487f      	ldr	r0, [pc, #508]	; (8003c18 <_printf_float+0x2e8>)
 8003a1c:	4b7f      	ldr	r3, [pc, #508]	; (8003c1c <_printf_float+0x2ec>)
 8003a1e:	e7d1      	b.n	80039c4 <_printf_float+0x94>
 8003a20:	6863      	ldr	r3, [r4, #4]
 8003a22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003a26:	9206      	str	r2, [sp, #24]
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	d13f      	bne.n	8003aac <_printf_float+0x17c>
 8003a2c:	2306      	movs	r3, #6
 8003a2e:	6063      	str	r3, [r4, #4]
 8003a30:	9b05      	ldr	r3, [sp, #20]
 8003a32:	6861      	ldr	r1, [r4, #4]
 8003a34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003a38:	2300      	movs	r3, #0
 8003a3a:	9303      	str	r3, [sp, #12]
 8003a3c:	ab0a      	add	r3, sp, #40	; 0x28
 8003a3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003a42:	ab09      	add	r3, sp, #36	; 0x24
 8003a44:	ec49 8b10 	vmov	d0, r8, r9
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	6022      	str	r2, [r4, #0]
 8003a4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003a50:	4628      	mov	r0, r5
 8003a52:	f7ff fecd 	bl	80037f0 <__cvt>
 8003a56:	9b06      	ldr	r3, [sp, #24]
 8003a58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a5a:	2b47      	cmp	r3, #71	; 0x47
 8003a5c:	4680      	mov	r8, r0
 8003a5e:	d108      	bne.n	8003a72 <_printf_float+0x142>
 8003a60:	1cc8      	adds	r0, r1, #3
 8003a62:	db02      	blt.n	8003a6a <_printf_float+0x13a>
 8003a64:	6863      	ldr	r3, [r4, #4]
 8003a66:	4299      	cmp	r1, r3
 8003a68:	dd41      	ble.n	8003aee <_printf_float+0x1be>
 8003a6a:	f1ab 0b02 	sub.w	fp, fp, #2
 8003a6e:	fa5f fb8b 	uxtb.w	fp, fp
 8003a72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003a76:	d820      	bhi.n	8003aba <_printf_float+0x18a>
 8003a78:	3901      	subs	r1, #1
 8003a7a:	465a      	mov	r2, fp
 8003a7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a80:	9109      	str	r1, [sp, #36]	; 0x24
 8003a82:	f7ff ff17 	bl	80038b4 <__exponent>
 8003a86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a88:	1813      	adds	r3, r2, r0
 8003a8a:	2a01      	cmp	r2, #1
 8003a8c:	4681      	mov	r9, r0
 8003a8e:	6123      	str	r3, [r4, #16]
 8003a90:	dc02      	bgt.n	8003a98 <_printf_float+0x168>
 8003a92:	6822      	ldr	r2, [r4, #0]
 8003a94:	07d2      	lsls	r2, r2, #31
 8003a96:	d501      	bpl.n	8003a9c <_printf_float+0x16c>
 8003a98:	3301      	adds	r3, #1
 8003a9a:	6123      	str	r3, [r4, #16]
 8003a9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d09c      	beq.n	80039de <_printf_float+0xae>
 8003aa4:	232d      	movs	r3, #45	; 0x2d
 8003aa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aaa:	e798      	b.n	80039de <_printf_float+0xae>
 8003aac:	9a06      	ldr	r2, [sp, #24]
 8003aae:	2a47      	cmp	r2, #71	; 0x47
 8003ab0:	d1be      	bne.n	8003a30 <_printf_float+0x100>
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1bc      	bne.n	8003a30 <_printf_float+0x100>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e7b9      	b.n	8003a2e <_printf_float+0xfe>
 8003aba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003abe:	d118      	bne.n	8003af2 <_printf_float+0x1c2>
 8003ac0:	2900      	cmp	r1, #0
 8003ac2:	6863      	ldr	r3, [r4, #4]
 8003ac4:	dd0b      	ble.n	8003ade <_printf_float+0x1ae>
 8003ac6:	6121      	str	r1, [r4, #16]
 8003ac8:	b913      	cbnz	r3, 8003ad0 <_printf_float+0x1a0>
 8003aca:	6822      	ldr	r2, [r4, #0]
 8003acc:	07d0      	lsls	r0, r2, #31
 8003ace:	d502      	bpl.n	8003ad6 <_printf_float+0x1a6>
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	440b      	add	r3, r1
 8003ad4:	6123      	str	r3, [r4, #16]
 8003ad6:	65a1      	str	r1, [r4, #88]	; 0x58
 8003ad8:	f04f 0900 	mov.w	r9, #0
 8003adc:	e7de      	b.n	8003a9c <_printf_float+0x16c>
 8003ade:	b913      	cbnz	r3, 8003ae6 <_printf_float+0x1b6>
 8003ae0:	6822      	ldr	r2, [r4, #0]
 8003ae2:	07d2      	lsls	r2, r2, #31
 8003ae4:	d501      	bpl.n	8003aea <_printf_float+0x1ba>
 8003ae6:	3302      	adds	r3, #2
 8003ae8:	e7f4      	b.n	8003ad4 <_printf_float+0x1a4>
 8003aea:	2301      	movs	r3, #1
 8003aec:	e7f2      	b.n	8003ad4 <_printf_float+0x1a4>
 8003aee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003af4:	4299      	cmp	r1, r3
 8003af6:	db05      	blt.n	8003b04 <_printf_float+0x1d4>
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	6121      	str	r1, [r4, #16]
 8003afc:	07d8      	lsls	r0, r3, #31
 8003afe:	d5ea      	bpl.n	8003ad6 <_printf_float+0x1a6>
 8003b00:	1c4b      	adds	r3, r1, #1
 8003b02:	e7e7      	b.n	8003ad4 <_printf_float+0x1a4>
 8003b04:	2900      	cmp	r1, #0
 8003b06:	bfd4      	ite	le
 8003b08:	f1c1 0202 	rsble	r2, r1, #2
 8003b0c:	2201      	movgt	r2, #1
 8003b0e:	4413      	add	r3, r2
 8003b10:	e7e0      	b.n	8003ad4 <_printf_float+0x1a4>
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	055a      	lsls	r2, r3, #21
 8003b16:	d407      	bmi.n	8003b28 <_printf_float+0x1f8>
 8003b18:	6923      	ldr	r3, [r4, #16]
 8003b1a:	4642      	mov	r2, r8
 8003b1c:	4631      	mov	r1, r6
 8003b1e:	4628      	mov	r0, r5
 8003b20:	47b8      	blx	r7
 8003b22:	3001      	adds	r0, #1
 8003b24:	d12c      	bne.n	8003b80 <_printf_float+0x250>
 8003b26:	e764      	b.n	80039f2 <_printf_float+0xc2>
 8003b28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003b2c:	f240 80e0 	bls.w	8003cf0 <_printf_float+0x3c0>
 8003b30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b34:	2200      	movs	r2, #0
 8003b36:	2300      	movs	r3, #0
 8003b38:	f7fc ffce 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	d034      	beq.n	8003baa <_printf_float+0x27a>
 8003b40:	4a37      	ldr	r2, [pc, #220]	; (8003c20 <_printf_float+0x2f0>)
 8003b42:	2301      	movs	r3, #1
 8003b44:	4631      	mov	r1, r6
 8003b46:	4628      	mov	r0, r5
 8003b48:	47b8      	blx	r7
 8003b4a:	3001      	adds	r0, #1
 8003b4c:	f43f af51 	beq.w	80039f2 <_printf_float+0xc2>
 8003b50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b54:	429a      	cmp	r2, r3
 8003b56:	db02      	blt.n	8003b5e <_printf_float+0x22e>
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	07d8      	lsls	r0, r3, #31
 8003b5c:	d510      	bpl.n	8003b80 <_printf_float+0x250>
 8003b5e:	ee18 3a10 	vmov	r3, s16
 8003b62:	4652      	mov	r2, sl
 8003b64:	4631      	mov	r1, r6
 8003b66:	4628      	mov	r0, r5
 8003b68:	47b8      	blx	r7
 8003b6a:	3001      	adds	r0, #1
 8003b6c:	f43f af41 	beq.w	80039f2 <_printf_float+0xc2>
 8003b70:	f04f 0800 	mov.w	r8, #0
 8003b74:	f104 091a 	add.w	r9, r4, #26
 8003b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	4543      	cmp	r3, r8
 8003b7e:	dc09      	bgt.n	8003b94 <_printf_float+0x264>
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	079b      	lsls	r3, r3, #30
 8003b84:	f100 8105 	bmi.w	8003d92 <_printf_float+0x462>
 8003b88:	68e0      	ldr	r0, [r4, #12]
 8003b8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b8c:	4298      	cmp	r0, r3
 8003b8e:	bfb8      	it	lt
 8003b90:	4618      	movlt	r0, r3
 8003b92:	e730      	b.n	80039f6 <_printf_float+0xc6>
 8003b94:	2301      	movs	r3, #1
 8003b96:	464a      	mov	r2, r9
 8003b98:	4631      	mov	r1, r6
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	47b8      	blx	r7
 8003b9e:	3001      	adds	r0, #1
 8003ba0:	f43f af27 	beq.w	80039f2 <_printf_float+0xc2>
 8003ba4:	f108 0801 	add.w	r8, r8, #1
 8003ba8:	e7e6      	b.n	8003b78 <_printf_float+0x248>
 8003baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	dc39      	bgt.n	8003c24 <_printf_float+0x2f4>
 8003bb0:	4a1b      	ldr	r2, [pc, #108]	; (8003c20 <_printf_float+0x2f0>)
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	4631      	mov	r1, r6
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	47b8      	blx	r7
 8003bba:	3001      	adds	r0, #1
 8003bbc:	f43f af19 	beq.w	80039f2 <_printf_float+0xc2>
 8003bc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	d102      	bne.n	8003bce <_printf_float+0x29e>
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	07d9      	lsls	r1, r3, #31
 8003bcc:	d5d8      	bpl.n	8003b80 <_printf_float+0x250>
 8003bce:	ee18 3a10 	vmov	r3, s16
 8003bd2:	4652      	mov	r2, sl
 8003bd4:	4631      	mov	r1, r6
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	47b8      	blx	r7
 8003bda:	3001      	adds	r0, #1
 8003bdc:	f43f af09 	beq.w	80039f2 <_printf_float+0xc2>
 8003be0:	f04f 0900 	mov.w	r9, #0
 8003be4:	f104 0a1a 	add.w	sl, r4, #26
 8003be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bea:	425b      	negs	r3, r3
 8003bec:	454b      	cmp	r3, r9
 8003bee:	dc01      	bgt.n	8003bf4 <_printf_float+0x2c4>
 8003bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bf2:	e792      	b.n	8003b1a <_printf_float+0x1ea>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	4652      	mov	r2, sl
 8003bf8:	4631      	mov	r1, r6
 8003bfa:	4628      	mov	r0, r5
 8003bfc:	47b8      	blx	r7
 8003bfe:	3001      	adds	r0, #1
 8003c00:	f43f aef7 	beq.w	80039f2 <_printf_float+0xc2>
 8003c04:	f109 0901 	add.w	r9, r9, #1
 8003c08:	e7ee      	b.n	8003be8 <_printf_float+0x2b8>
 8003c0a:	bf00      	nop
 8003c0c:	7fefffff 	.word	0x7fefffff
 8003c10:	0800885c 	.word	0x0800885c
 8003c14:	08008860 	.word	0x08008860
 8003c18:	08008868 	.word	0x08008868
 8003c1c:	08008864 	.word	0x08008864
 8003c20:	0800886c 	.word	0x0800886c
 8003c24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	bfa8      	it	ge
 8003c2c:	461a      	movge	r2, r3
 8003c2e:	2a00      	cmp	r2, #0
 8003c30:	4691      	mov	r9, r2
 8003c32:	dc37      	bgt.n	8003ca4 <_printf_float+0x374>
 8003c34:	f04f 0b00 	mov.w	fp, #0
 8003c38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c3c:	f104 021a 	add.w	r2, r4, #26
 8003c40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c42:	9305      	str	r3, [sp, #20]
 8003c44:	eba3 0309 	sub.w	r3, r3, r9
 8003c48:	455b      	cmp	r3, fp
 8003c4a:	dc33      	bgt.n	8003cb4 <_printf_float+0x384>
 8003c4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c50:	429a      	cmp	r2, r3
 8003c52:	db3b      	blt.n	8003ccc <_printf_float+0x39c>
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	07da      	lsls	r2, r3, #31
 8003c58:	d438      	bmi.n	8003ccc <_printf_float+0x39c>
 8003c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c5c:	9a05      	ldr	r2, [sp, #20]
 8003c5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003c60:	1a9a      	subs	r2, r3, r2
 8003c62:	eba3 0901 	sub.w	r9, r3, r1
 8003c66:	4591      	cmp	r9, r2
 8003c68:	bfa8      	it	ge
 8003c6a:	4691      	movge	r9, r2
 8003c6c:	f1b9 0f00 	cmp.w	r9, #0
 8003c70:	dc35      	bgt.n	8003cde <_printf_float+0x3ae>
 8003c72:	f04f 0800 	mov.w	r8, #0
 8003c76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c7a:	f104 0a1a 	add.w	sl, r4, #26
 8003c7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	eba3 0309 	sub.w	r3, r3, r9
 8003c88:	4543      	cmp	r3, r8
 8003c8a:	f77f af79 	ble.w	8003b80 <_printf_float+0x250>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	4652      	mov	r2, sl
 8003c92:	4631      	mov	r1, r6
 8003c94:	4628      	mov	r0, r5
 8003c96:	47b8      	blx	r7
 8003c98:	3001      	adds	r0, #1
 8003c9a:	f43f aeaa 	beq.w	80039f2 <_printf_float+0xc2>
 8003c9e:	f108 0801 	add.w	r8, r8, #1
 8003ca2:	e7ec      	b.n	8003c7e <_printf_float+0x34e>
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	4631      	mov	r1, r6
 8003ca8:	4642      	mov	r2, r8
 8003caa:	4628      	mov	r0, r5
 8003cac:	47b8      	blx	r7
 8003cae:	3001      	adds	r0, #1
 8003cb0:	d1c0      	bne.n	8003c34 <_printf_float+0x304>
 8003cb2:	e69e      	b.n	80039f2 <_printf_float+0xc2>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	4631      	mov	r1, r6
 8003cb8:	4628      	mov	r0, r5
 8003cba:	9205      	str	r2, [sp, #20]
 8003cbc:	47b8      	blx	r7
 8003cbe:	3001      	adds	r0, #1
 8003cc0:	f43f ae97 	beq.w	80039f2 <_printf_float+0xc2>
 8003cc4:	9a05      	ldr	r2, [sp, #20]
 8003cc6:	f10b 0b01 	add.w	fp, fp, #1
 8003cca:	e7b9      	b.n	8003c40 <_printf_float+0x310>
 8003ccc:	ee18 3a10 	vmov	r3, s16
 8003cd0:	4652      	mov	r2, sl
 8003cd2:	4631      	mov	r1, r6
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	47b8      	blx	r7
 8003cd8:	3001      	adds	r0, #1
 8003cda:	d1be      	bne.n	8003c5a <_printf_float+0x32a>
 8003cdc:	e689      	b.n	80039f2 <_printf_float+0xc2>
 8003cde:	9a05      	ldr	r2, [sp, #20]
 8003ce0:	464b      	mov	r3, r9
 8003ce2:	4442      	add	r2, r8
 8003ce4:	4631      	mov	r1, r6
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	47b8      	blx	r7
 8003cea:	3001      	adds	r0, #1
 8003cec:	d1c1      	bne.n	8003c72 <_printf_float+0x342>
 8003cee:	e680      	b.n	80039f2 <_printf_float+0xc2>
 8003cf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cf2:	2a01      	cmp	r2, #1
 8003cf4:	dc01      	bgt.n	8003cfa <_printf_float+0x3ca>
 8003cf6:	07db      	lsls	r3, r3, #31
 8003cf8:	d538      	bpl.n	8003d6c <_printf_float+0x43c>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	4642      	mov	r2, r8
 8003cfe:	4631      	mov	r1, r6
 8003d00:	4628      	mov	r0, r5
 8003d02:	47b8      	blx	r7
 8003d04:	3001      	adds	r0, #1
 8003d06:	f43f ae74 	beq.w	80039f2 <_printf_float+0xc2>
 8003d0a:	ee18 3a10 	vmov	r3, s16
 8003d0e:	4652      	mov	r2, sl
 8003d10:	4631      	mov	r1, r6
 8003d12:	4628      	mov	r0, r5
 8003d14:	47b8      	blx	r7
 8003d16:	3001      	adds	r0, #1
 8003d18:	f43f ae6b 	beq.w	80039f2 <_printf_float+0xc2>
 8003d1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d20:	2200      	movs	r2, #0
 8003d22:	2300      	movs	r3, #0
 8003d24:	f7fc fed8 	bl	8000ad8 <__aeabi_dcmpeq>
 8003d28:	b9d8      	cbnz	r0, 8003d62 <_printf_float+0x432>
 8003d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d2c:	f108 0201 	add.w	r2, r8, #1
 8003d30:	3b01      	subs	r3, #1
 8003d32:	4631      	mov	r1, r6
 8003d34:	4628      	mov	r0, r5
 8003d36:	47b8      	blx	r7
 8003d38:	3001      	adds	r0, #1
 8003d3a:	d10e      	bne.n	8003d5a <_printf_float+0x42a>
 8003d3c:	e659      	b.n	80039f2 <_printf_float+0xc2>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	4652      	mov	r2, sl
 8003d42:	4631      	mov	r1, r6
 8003d44:	4628      	mov	r0, r5
 8003d46:	47b8      	blx	r7
 8003d48:	3001      	adds	r0, #1
 8003d4a:	f43f ae52 	beq.w	80039f2 <_printf_float+0xc2>
 8003d4e:	f108 0801 	add.w	r8, r8, #1
 8003d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d54:	3b01      	subs	r3, #1
 8003d56:	4543      	cmp	r3, r8
 8003d58:	dcf1      	bgt.n	8003d3e <_printf_float+0x40e>
 8003d5a:	464b      	mov	r3, r9
 8003d5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003d60:	e6dc      	b.n	8003b1c <_printf_float+0x1ec>
 8003d62:	f04f 0800 	mov.w	r8, #0
 8003d66:	f104 0a1a 	add.w	sl, r4, #26
 8003d6a:	e7f2      	b.n	8003d52 <_printf_float+0x422>
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	4642      	mov	r2, r8
 8003d70:	e7df      	b.n	8003d32 <_printf_float+0x402>
 8003d72:	2301      	movs	r3, #1
 8003d74:	464a      	mov	r2, r9
 8003d76:	4631      	mov	r1, r6
 8003d78:	4628      	mov	r0, r5
 8003d7a:	47b8      	blx	r7
 8003d7c:	3001      	adds	r0, #1
 8003d7e:	f43f ae38 	beq.w	80039f2 <_printf_float+0xc2>
 8003d82:	f108 0801 	add.w	r8, r8, #1
 8003d86:	68e3      	ldr	r3, [r4, #12]
 8003d88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d8a:	1a5b      	subs	r3, r3, r1
 8003d8c:	4543      	cmp	r3, r8
 8003d8e:	dcf0      	bgt.n	8003d72 <_printf_float+0x442>
 8003d90:	e6fa      	b.n	8003b88 <_printf_float+0x258>
 8003d92:	f04f 0800 	mov.w	r8, #0
 8003d96:	f104 0919 	add.w	r9, r4, #25
 8003d9a:	e7f4      	b.n	8003d86 <_printf_float+0x456>

08003d9c <_printf_common>:
 8003d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003da0:	4616      	mov	r6, r2
 8003da2:	4699      	mov	r9, r3
 8003da4:	688a      	ldr	r2, [r1, #8]
 8003da6:	690b      	ldr	r3, [r1, #16]
 8003da8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dac:	4293      	cmp	r3, r2
 8003dae:	bfb8      	it	lt
 8003db0:	4613      	movlt	r3, r2
 8003db2:	6033      	str	r3, [r6, #0]
 8003db4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003db8:	4607      	mov	r7, r0
 8003dba:	460c      	mov	r4, r1
 8003dbc:	b10a      	cbz	r2, 8003dc2 <_printf_common+0x26>
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	6033      	str	r3, [r6, #0]
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	0699      	lsls	r1, r3, #26
 8003dc6:	bf42      	ittt	mi
 8003dc8:	6833      	ldrmi	r3, [r6, #0]
 8003dca:	3302      	addmi	r3, #2
 8003dcc:	6033      	strmi	r3, [r6, #0]
 8003dce:	6825      	ldr	r5, [r4, #0]
 8003dd0:	f015 0506 	ands.w	r5, r5, #6
 8003dd4:	d106      	bne.n	8003de4 <_printf_common+0x48>
 8003dd6:	f104 0a19 	add.w	sl, r4, #25
 8003dda:	68e3      	ldr	r3, [r4, #12]
 8003ddc:	6832      	ldr	r2, [r6, #0]
 8003dde:	1a9b      	subs	r3, r3, r2
 8003de0:	42ab      	cmp	r3, r5
 8003de2:	dc26      	bgt.n	8003e32 <_printf_common+0x96>
 8003de4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003de8:	1e13      	subs	r3, r2, #0
 8003dea:	6822      	ldr	r2, [r4, #0]
 8003dec:	bf18      	it	ne
 8003dee:	2301      	movne	r3, #1
 8003df0:	0692      	lsls	r2, r2, #26
 8003df2:	d42b      	bmi.n	8003e4c <_printf_common+0xb0>
 8003df4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003df8:	4649      	mov	r1, r9
 8003dfa:	4638      	mov	r0, r7
 8003dfc:	47c0      	blx	r8
 8003dfe:	3001      	adds	r0, #1
 8003e00:	d01e      	beq.n	8003e40 <_printf_common+0xa4>
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	68e5      	ldr	r5, [r4, #12]
 8003e06:	6832      	ldr	r2, [r6, #0]
 8003e08:	f003 0306 	and.w	r3, r3, #6
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	bf08      	it	eq
 8003e10:	1aad      	subeq	r5, r5, r2
 8003e12:	68a3      	ldr	r3, [r4, #8]
 8003e14:	6922      	ldr	r2, [r4, #16]
 8003e16:	bf0c      	ite	eq
 8003e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e1c:	2500      	movne	r5, #0
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	bfc4      	itt	gt
 8003e22:	1a9b      	subgt	r3, r3, r2
 8003e24:	18ed      	addgt	r5, r5, r3
 8003e26:	2600      	movs	r6, #0
 8003e28:	341a      	adds	r4, #26
 8003e2a:	42b5      	cmp	r5, r6
 8003e2c:	d11a      	bne.n	8003e64 <_printf_common+0xc8>
 8003e2e:	2000      	movs	r0, #0
 8003e30:	e008      	b.n	8003e44 <_printf_common+0xa8>
 8003e32:	2301      	movs	r3, #1
 8003e34:	4652      	mov	r2, sl
 8003e36:	4649      	mov	r1, r9
 8003e38:	4638      	mov	r0, r7
 8003e3a:	47c0      	blx	r8
 8003e3c:	3001      	adds	r0, #1
 8003e3e:	d103      	bne.n	8003e48 <_printf_common+0xac>
 8003e40:	f04f 30ff 	mov.w	r0, #4294967295
 8003e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e48:	3501      	adds	r5, #1
 8003e4a:	e7c6      	b.n	8003dda <_printf_common+0x3e>
 8003e4c:	18e1      	adds	r1, r4, r3
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	2030      	movs	r0, #48	; 0x30
 8003e52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e56:	4422      	add	r2, r4
 8003e58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e60:	3302      	adds	r3, #2
 8003e62:	e7c7      	b.n	8003df4 <_printf_common+0x58>
 8003e64:	2301      	movs	r3, #1
 8003e66:	4622      	mov	r2, r4
 8003e68:	4649      	mov	r1, r9
 8003e6a:	4638      	mov	r0, r7
 8003e6c:	47c0      	blx	r8
 8003e6e:	3001      	adds	r0, #1
 8003e70:	d0e6      	beq.n	8003e40 <_printf_common+0xa4>
 8003e72:	3601      	adds	r6, #1
 8003e74:	e7d9      	b.n	8003e2a <_printf_common+0x8e>
	...

08003e78 <_printf_i>:
 8003e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e7c:	7e0f      	ldrb	r7, [r1, #24]
 8003e7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e80:	2f78      	cmp	r7, #120	; 0x78
 8003e82:	4691      	mov	r9, r2
 8003e84:	4680      	mov	r8, r0
 8003e86:	460c      	mov	r4, r1
 8003e88:	469a      	mov	sl, r3
 8003e8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e8e:	d807      	bhi.n	8003ea0 <_printf_i+0x28>
 8003e90:	2f62      	cmp	r7, #98	; 0x62
 8003e92:	d80a      	bhi.n	8003eaa <_printf_i+0x32>
 8003e94:	2f00      	cmp	r7, #0
 8003e96:	f000 80d8 	beq.w	800404a <_printf_i+0x1d2>
 8003e9a:	2f58      	cmp	r7, #88	; 0x58
 8003e9c:	f000 80a3 	beq.w	8003fe6 <_printf_i+0x16e>
 8003ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ea4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ea8:	e03a      	b.n	8003f20 <_printf_i+0xa8>
 8003eaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003eae:	2b15      	cmp	r3, #21
 8003eb0:	d8f6      	bhi.n	8003ea0 <_printf_i+0x28>
 8003eb2:	a101      	add	r1, pc, #4	; (adr r1, 8003eb8 <_printf_i+0x40>)
 8003eb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003eb8:	08003f11 	.word	0x08003f11
 8003ebc:	08003f25 	.word	0x08003f25
 8003ec0:	08003ea1 	.word	0x08003ea1
 8003ec4:	08003ea1 	.word	0x08003ea1
 8003ec8:	08003ea1 	.word	0x08003ea1
 8003ecc:	08003ea1 	.word	0x08003ea1
 8003ed0:	08003f25 	.word	0x08003f25
 8003ed4:	08003ea1 	.word	0x08003ea1
 8003ed8:	08003ea1 	.word	0x08003ea1
 8003edc:	08003ea1 	.word	0x08003ea1
 8003ee0:	08003ea1 	.word	0x08003ea1
 8003ee4:	08004031 	.word	0x08004031
 8003ee8:	08003f55 	.word	0x08003f55
 8003eec:	08004013 	.word	0x08004013
 8003ef0:	08003ea1 	.word	0x08003ea1
 8003ef4:	08003ea1 	.word	0x08003ea1
 8003ef8:	08004053 	.word	0x08004053
 8003efc:	08003ea1 	.word	0x08003ea1
 8003f00:	08003f55 	.word	0x08003f55
 8003f04:	08003ea1 	.word	0x08003ea1
 8003f08:	08003ea1 	.word	0x08003ea1
 8003f0c:	0800401b 	.word	0x0800401b
 8003f10:	682b      	ldr	r3, [r5, #0]
 8003f12:	1d1a      	adds	r2, r3, #4
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	602a      	str	r2, [r5, #0]
 8003f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0a3      	b.n	800406c <_printf_i+0x1f4>
 8003f24:	6820      	ldr	r0, [r4, #0]
 8003f26:	6829      	ldr	r1, [r5, #0]
 8003f28:	0606      	lsls	r6, r0, #24
 8003f2a:	f101 0304 	add.w	r3, r1, #4
 8003f2e:	d50a      	bpl.n	8003f46 <_printf_i+0xce>
 8003f30:	680e      	ldr	r6, [r1, #0]
 8003f32:	602b      	str	r3, [r5, #0]
 8003f34:	2e00      	cmp	r6, #0
 8003f36:	da03      	bge.n	8003f40 <_printf_i+0xc8>
 8003f38:	232d      	movs	r3, #45	; 0x2d
 8003f3a:	4276      	negs	r6, r6
 8003f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f40:	485e      	ldr	r0, [pc, #376]	; (80040bc <_printf_i+0x244>)
 8003f42:	230a      	movs	r3, #10
 8003f44:	e019      	b.n	8003f7a <_printf_i+0x102>
 8003f46:	680e      	ldr	r6, [r1, #0]
 8003f48:	602b      	str	r3, [r5, #0]
 8003f4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f4e:	bf18      	it	ne
 8003f50:	b236      	sxthne	r6, r6
 8003f52:	e7ef      	b.n	8003f34 <_printf_i+0xbc>
 8003f54:	682b      	ldr	r3, [r5, #0]
 8003f56:	6820      	ldr	r0, [r4, #0]
 8003f58:	1d19      	adds	r1, r3, #4
 8003f5a:	6029      	str	r1, [r5, #0]
 8003f5c:	0601      	lsls	r1, r0, #24
 8003f5e:	d501      	bpl.n	8003f64 <_printf_i+0xec>
 8003f60:	681e      	ldr	r6, [r3, #0]
 8003f62:	e002      	b.n	8003f6a <_printf_i+0xf2>
 8003f64:	0646      	lsls	r6, r0, #25
 8003f66:	d5fb      	bpl.n	8003f60 <_printf_i+0xe8>
 8003f68:	881e      	ldrh	r6, [r3, #0]
 8003f6a:	4854      	ldr	r0, [pc, #336]	; (80040bc <_printf_i+0x244>)
 8003f6c:	2f6f      	cmp	r7, #111	; 0x6f
 8003f6e:	bf0c      	ite	eq
 8003f70:	2308      	moveq	r3, #8
 8003f72:	230a      	movne	r3, #10
 8003f74:	2100      	movs	r1, #0
 8003f76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f7a:	6865      	ldr	r5, [r4, #4]
 8003f7c:	60a5      	str	r5, [r4, #8]
 8003f7e:	2d00      	cmp	r5, #0
 8003f80:	bfa2      	ittt	ge
 8003f82:	6821      	ldrge	r1, [r4, #0]
 8003f84:	f021 0104 	bicge.w	r1, r1, #4
 8003f88:	6021      	strge	r1, [r4, #0]
 8003f8a:	b90e      	cbnz	r6, 8003f90 <_printf_i+0x118>
 8003f8c:	2d00      	cmp	r5, #0
 8003f8e:	d04d      	beq.n	800402c <_printf_i+0x1b4>
 8003f90:	4615      	mov	r5, r2
 8003f92:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f96:	fb03 6711 	mls	r7, r3, r1, r6
 8003f9a:	5dc7      	ldrb	r7, [r0, r7]
 8003f9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003fa0:	4637      	mov	r7, r6
 8003fa2:	42bb      	cmp	r3, r7
 8003fa4:	460e      	mov	r6, r1
 8003fa6:	d9f4      	bls.n	8003f92 <_printf_i+0x11a>
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d10b      	bne.n	8003fc4 <_printf_i+0x14c>
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	07de      	lsls	r6, r3, #31
 8003fb0:	d508      	bpl.n	8003fc4 <_printf_i+0x14c>
 8003fb2:	6923      	ldr	r3, [r4, #16]
 8003fb4:	6861      	ldr	r1, [r4, #4]
 8003fb6:	4299      	cmp	r1, r3
 8003fb8:	bfde      	ittt	le
 8003fba:	2330      	movle	r3, #48	; 0x30
 8003fbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003fc4:	1b52      	subs	r2, r2, r5
 8003fc6:	6122      	str	r2, [r4, #16]
 8003fc8:	f8cd a000 	str.w	sl, [sp]
 8003fcc:	464b      	mov	r3, r9
 8003fce:	aa03      	add	r2, sp, #12
 8003fd0:	4621      	mov	r1, r4
 8003fd2:	4640      	mov	r0, r8
 8003fd4:	f7ff fee2 	bl	8003d9c <_printf_common>
 8003fd8:	3001      	adds	r0, #1
 8003fda:	d14c      	bne.n	8004076 <_printf_i+0x1fe>
 8003fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe0:	b004      	add	sp, #16
 8003fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe6:	4835      	ldr	r0, [pc, #212]	; (80040bc <_printf_i+0x244>)
 8003fe8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003fec:	6829      	ldr	r1, [r5, #0]
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ff4:	6029      	str	r1, [r5, #0]
 8003ff6:	061d      	lsls	r5, r3, #24
 8003ff8:	d514      	bpl.n	8004024 <_printf_i+0x1ac>
 8003ffa:	07df      	lsls	r7, r3, #31
 8003ffc:	bf44      	itt	mi
 8003ffe:	f043 0320 	orrmi.w	r3, r3, #32
 8004002:	6023      	strmi	r3, [r4, #0]
 8004004:	b91e      	cbnz	r6, 800400e <_printf_i+0x196>
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	f023 0320 	bic.w	r3, r3, #32
 800400c:	6023      	str	r3, [r4, #0]
 800400e:	2310      	movs	r3, #16
 8004010:	e7b0      	b.n	8003f74 <_printf_i+0xfc>
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	f043 0320 	orr.w	r3, r3, #32
 8004018:	6023      	str	r3, [r4, #0]
 800401a:	2378      	movs	r3, #120	; 0x78
 800401c:	4828      	ldr	r0, [pc, #160]	; (80040c0 <_printf_i+0x248>)
 800401e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004022:	e7e3      	b.n	8003fec <_printf_i+0x174>
 8004024:	0659      	lsls	r1, r3, #25
 8004026:	bf48      	it	mi
 8004028:	b2b6      	uxthmi	r6, r6
 800402a:	e7e6      	b.n	8003ffa <_printf_i+0x182>
 800402c:	4615      	mov	r5, r2
 800402e:	e7bb      	b.n	8003fa8 <_printf_i+0x130>
 8004030:	682b      	ldr	r3, [r5, #0]
 8004032:	6826      	ldr	r6, [r4, #0]
 8004034:	6961      	ldr	r1, [r4, #20]
 8004036:	1d18      	adds	r0, r3, #4
 8004038:	6028      	str	r0, [r5, #0]
 800403a:	0635      	lsls	r5, r6, #24
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	d501      	bpl.n	8004044 <_printf_i+0x1cc>
 8004040:	6019      	str	r1, [r3, #0]
 8004042:	e002      	b.n	800404a <_printf_i+0x1d2>
 8004044:	0670      	lsls	r0, r6, #25
 8004046:	d5fb      	bpl.n	8004040 <_printf_i+0x1c8>
 8004048:	8019      	strh	r1, [r3, #0]
 800404a:	2300      	movs	r3, #0
 800404c:	6123      	str	r3, [r4, #16]
 800404e:	4615      	mov	r5, r2
 8004050:	e7ba      	b.n	8003fc8 <_printf_i+0x150>
 8004052:	682b      	ldr	r3, [r5, #0]
 8004054:	1d1a      	adds	r2, r3, #4
 8004056:	602a      	str	r2, [r5, #0]
 8004058:	681d      	ldr	r5, [r3, #0]
 800405a:	6862      	ldr	r2, [r4, #4]
 800405c:	2100      	movs	r1, #0
 800405e:	4628      	mov	r0, r5
 8004060:	f7fc f8c6 	bl	80001f0 <memchr>
 8004064:	b108      	cbz	r0, 800406a <_printf_i+0x1f2>
 8004066:	1b40      	subs	r0, r0, r5
 8004068:	6060      	str	r0, [r4, #4]
 800406a:	6863      	ldr	r3, [r4, #4]
 800406c:	6123      	str	r3, [r4, #16]
 800406e:	2300      	movs	r3, #0
 8004070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004074:	e7a8      	b.n	8003fc8 <_printf_i+0x150>
 8004076:	6923      	ldr	r3, [r4, #16]
 8004078:	462a      	mov	r2, r5
 800407a:	4649      	mov	r1, r9
 800407c:	4640      	mov	r0, r8
 800407e:	47d0      	blx	sl
 8004080:	3001      	adds	r0, #1
 8004082:	d0ab      	beq.n	8003fdc <_printf_i+0x164>
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	079b      	lsls	r3, r3, #30
 8004088:	d413      	bmi.n	80040b2 <_printf_i+0x23a>
 800408a:	68e0      	ldr	r0, [r4, #12]
 800408c:	9b03      	ldr	r3, [sp, #12]
 800408e:	4298      	cmp	r0, r3
 8004090:	bfb8      	it	lt
 8004092:	4618      	movlt	r0, r3
 8004094:	e7a4      	b.n	8003fe0 <_printf_i+0x168>
 8004096:	2301      	movs	r3, #1
 8004098:	4632      	mov	r2, r6
 800409a:	4649      	mov	r1, r9
 800409c:	4640      	mov	r0, r8
 800409e:	47d0      	blx	sl
 80040a0:	3001      	adds	r0, #1
 80040a2:	d09b      	beq.n	8003fdc <_printf_i+0x164>
 80040a4:	3501      	adds	r5, #1
 80040a6:	68e3      	ldr	r3, [r4, #12]
 80040a8:	9903      	ldr	r1, [sp, #12]
 80040aa:	1a5b      	subs	r3, r3, r1
 80040ac:	42ab      	cmp	r3, r5
 80040ae:	dcf2      	bgt.n	8004096 <_printf_i+0x21e>
 80040b0:	e7eb      	b.n	800408a <_printf_i+0x212>
 80040b2:	2500      	movs	r5, #0
 80040b4:	f104 0619 	add.w	r6, r4, #25
 80040b8:	e7f5      	b.n	80040a6 <_printf_i+0x22e>
 80040ba:	bf00      	nop
 80040bc:	0800886e 	.word	0x0800886e
 80040c0:	0800887f 	.word	0x0800887f

080040c4 <_scanf_float>:
 80040c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c8:	b087      	sub	sp, #28
 80040ca:	4617      	mov	r7, r2
 80040cc:	9303      	str	r3, [sp, #12]
 80040ce:	688b      	ldr	r3, [r1, #8]
 80040d0:	1e5a      	subs	r2, r3, #1
 80040d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80040d6:	bf83      	ittte	hi
 80040d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80040dc:	195b      	addhi	r3, r3, r5
 80040de:	9302      	strhi	r3, [sp, #8]
 80040e0:	2300      	movls	r3, #0
 80040e2:	bf86      	itte	hi
 80040e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80040e8:	608b      	strhi	r3, [r1, #8]
 80040ea:	9302      	strls	r3, [sp, #8]
 80040ec:	680b      	ldr	r3, [r1, #0]
 80040ee:	468b      	mov	fp, r1
 80040f0:	2500      	movs	r5, #0
 80040f2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80040f6:	f84b 3b1c 	str.w	r3, [fp], #28
 80040fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80040fe:	4680      	mov	r8, r0
 8004100:	460c      	mov	r4, r1
 8004102:	465e      	mov	r6, fp
 8004104:	46aa      	mov	sl, r5
 8004106:	46a9      	mov	r9, r5
 8004108:	9501      	str	r5, [sp, #4]
 800410a:	68a2      	ldr	r2, [r4, #8]
 800410c:	b152      	cbz	r2, 8004124 <_scanf_float+0x60>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b4e      	cmp	r3, #78	; 0x4e
 8004114:	d864      	bhi.n	80041e0 <_scanf_float+0x11c>
 8004116:	2b40      	cmp	r3, #64	; 0x40
 8004118:	d83c      	bhi.n	8004194 <_scanf_float+0xd0>
 800411a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800411e:	b2c8      	uxtb	r0, r1
 8004120:	280e      	cmp	r0, #14
 8004122:	d93a      	bls.n	800419a <_scanf_float+0xd6>
 8004124:	f1b9 0f00 	cmp.w	r9, #0
 8004128:	d003      	beq.n	8004132 <_scanf_float+0x6e>
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004130:	6023      	str	r3, [r4, #0]
 8004132:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004136:	f1ba 0f01 	cmp.w	sl, #1
 800413a:	f200 8113 	bhi.w	8004364 <_scanf_float+0x2a0>
 800413e:	455e      	cmp	r6, fp
 8004140:	f200 8105 	bhi.w	800434e <_scanf_float+0x28a>
 8004144:	2501      	movs	r5, #1
 8004146:	4628      	mov	r0, r5
 8004148:	b007      	add	sp, #28
 800414a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800414e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004152:	2a0d      	cmp	r2, #13
 8004154:	d8e6      	bhi.n	8004124 <_scanf_float+0x60>
 8004156:	a101      	add	r1, pc, #4	; (adr r1, 800415c <_scanf_float+0x98>)
 8004158:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800415c:	0800429b 	.word	0x0800429b
 8004160:	08004125 	.word	0x08004125
 8004164:	08004125 	.word	0x08004125
 8004168:	08004125 	.word	0x08004125
 800416c:	080042fb 	.word	0x080042fb
 8004170:	080042d3 	.word	0x080042d3
 8004174:	08004125 	.word	0x08004125
 8004178:	08004125 	.word	0x08004125
 800417c:	080042a9 	.word	0x080042a9
 8004180:	08004125 	.word	0x08004125
 8004184:	08004125 	.word	0x08004125
 8004188:	08004125 	.word	0x08004125
 800418c:	08004125 	.word	0x08004125
 8004190:	08004261 	.word	0x08004261
 8004194:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004198:	e7db      	b.n	8004152 <_scanf_float+0x8e>
 800419a:	290e      	cmp	r1, #14
 800419c:	d8c2      	bhi.n	8004124 <_scanf_float+0x60>
 800419e:	a001      	add	r0, pc, #4	; (adr r0, 80041a4 <_scanf_float+0xe0>)
 80041a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80041a4:	08004253 	.word	0x08004253
 80041a8:	08004125 	.word	0x08004125
 80041ac:	08004253 	.word	0x08004253
 80041b0:	080042e7 	.word	0x080042e7
 80041b4:	08004125 	.word	0x08004125
 80041b8:	08004201 	.word	0x08004201
 80041bc:	0800423d 	.word	0x0800423d
 80041c0:	0800423d 	.word	0x0800423d
 80041c4:	0800423d 	.word	0x0800423d
 80041c8:	0800423d 	.word	0x0800423d
 80041cc:	0800423d 	.word	0x0800423d
 80041d0:	0800423d 	.word	0x0800423d
 80041d4:	0800423d 	.word	0x0800423d
 80041d8:	0800423d 	.word	0x0800423d
 80041dc:	0800423d 	.word	0x0800423d
 80041e0:	2b6e      	cmp	r3, #110	; 0x6e
 80041e2:	d809      	bhi.n	80041f8 <_scanf_float+0x134>
 80041e4:	2b60      	cmp	r3, #96	; 0x60
 80041e6:	d8b2      	bhi.n	800414e <_scanf_float+0x8a>
 80041e8:	2b54      	cmp	r3, #84	; 0x54
 80041ea:	d077      	beq.n	80042dc <_scanf_float+0x218>
 80041ec:	2b59      	cmp	r3, #89	; 0x59
 80041ee:	d199      	bne.n	8004124 <_scanf_float+0x60>
 80041f0:	2d07      	cmp	r5, #7
 80041f2:	d197      	bne.n	8004124 <_scanf_float+0x60>
 80041f4:	2508      	movs	r5, #8
 80041f6:	e029      	b.n	800424c <_scanf_float+0x188>
 80041f8:	2b74      	cmp	r3, #116	; 0x74
 80041fa:	d06f      	beq.n	80042dc <_scanf_float+0x218>
 80041fc:	2b79      	cmp	r3, #121	; 0x79
 80041fe:	e7f6      	b.n	80041ee <_scanf_float+0x12a>
 8004200:	6821      	ldr	r1, [r4, #0]
 8004202:	05c8      	lsls	r0, r1, #23
 8004204:	d51a      	bpl.n	800423c <_scanf_float+0x178>
 8004206:	9b02      	ldr	r3, [sp, #8]
 8004208:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800420c:	6021      	str	r1, [r4, #0]
 800420e:	f109 0901 	add.w	r9, r9, #1
 8004212:	b11b      	cbz	r3, 800421c <_scanf_float+0x158>
 8004214:	3b01      	subs	r3, #1
 8004216:	3201      	adds	r2, #1
 8004218:	9302      	str	r3, [sp, #8]
 800421a:	60a2      	str	r2, [r4, #8]
 800421c:	68a3      	ldr	r3, [r4, #8]
 800421e:	3b01      	subs	r3, #1
 8004220:	60a3      	str	r3, [r4, #8]
 8004222:	6923      	ldr	r3, [r4, #16]
 8004224:	3301      	adds	r3, #1
 8004226:	6123      	str	r3, [r4, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3b01      	subs	r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	607b      	str	r3, [r7, #4]
 8004230:	f340 8084 	ble.w	800433c <_scanf_float+0x278>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	3301      	adds	r3, #1
 8004238:	603b      	str	r3, [r7, #0]
 800423a:	e766      	b.n	800410a <_scanf_float+0x46>
 800423c:	eb1a 0f05 	cmn.w	sl, r5
 8004240:	f47f af70 	bne.w	8004124 <_scanf_float+0x60>
 8004244:	6822      	ldr	r2, [r4, #0]
 8004246:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800424a:	6022      	str	r2, [r4, #0]
 800424c:	f806 3b01 	strb.w	r3, [r6], #1
 8004250:	e7e4      	b.n	800421c <_scanf_float+0x158>
 8004252:	6822      	ldr	r2, [r4, #0]
 8004254:	0610      	lsls	r0, r2, #24
 8004256:	f57f af65 	bpl.w	8004124 <_scanf_float+0x60>
 800425a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800425e:	e7f4      	b.n	800424a <_scanf_float+0x186>
 8004260:	f1ba 0f00 	cmp.w	sl, #0
 8004264:	d10e      	bne.n	8004284 <_scanf_float+0x1c0>
 8004266:	f1b9 0f00 	cmp.w	r9, #0
 800426a:	d10e      	bne.n	800428a <_scanf_float+0x1c6>
 800426c:	6822      	ldr	r2, [r4, #0]
 800426e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004272:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004276:	d108      	bne.n	800428a <_scanf_float+0x1c6>
 8004278:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800427c:	6022      	str	r2, [r4, #0]
 800427e:	f04f 0a01 	mov.w	sl, #1
 8004282:	e7e3      	b.n	800424c <_scanf_float+0x188>
 8004284:	f1ba 0f02 	cmp.w	sl, #2
 8004288:	d055      	beq.n	8004336 <_scanf_float+0x272>
 800428a:	2d01      	cmp	r5, #1
 800428c:	d002      	beq.n	8004294 <_scanf_float+0x1d0>
 800428e:	2d04      	cmp	r5, #4
 8004290:	f47f af48 	bne.w	8004124 <_scanf_float+0x60>
 8004294:	3501      	adds	r5, #1
 8004296:	b2ed      	uxtb	r5, r5
 8004298:	e7d8      	b.n	800424c <_scanf_float+0x188>
 800429a:	f1ba 0f01 	cmp.w	sl, #1
 800429e:	f47f af41 	bne.w	8004124 <_scanf_float+0x60>
 80042a2:	f04f 0a02 	mov.w	sl, #2
 80042a6:	e7d1      	b.n	800424c <_scanf_float+0x188>
 80042a8:	b97d      	cbnz	r5, 80042ca <_scanf_float+0x206>
 80042aa:	f1b9 0f00 	cmp.w	r9, #0
 80042ae:	f47f af3c 	bne.w	800412a <_scanf_float+0x66>
 80042b2:	6822      	ldr	r2, [r4, #0]
 80042b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80042b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80042bc:	f47f af39 	bne.w	8004132 <_scanf_float+0x6e>
 80042c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80042c4:	6022      	str	r2, [r4, #0]
 80042c6:	2501      	movs	r5, #1
 80042c8:	e7c0      	b.n	800424c <_scanf_float+0x188>
 80042ca:	2d03      	cmp	r5, #3
 80042cc:	d0e2      	beq.n	8004294 <_scanf_float+0x1d0>
 80042ce:	2d05      	cmp	r5, #5
 80042d0:	e7de      	b.n	8004290 <_scanf_float+0x1cc>
 80042d2:	2d02      	cmp	r5, #2
 80042d4:	f47f af26 	bne.w	8004124 <_scanf_float+0x60>
 80042d8:	2503      	movs	r5, #3
 80042da:	e7b7      	b.n	800424c <_scanf_float+0x188>
 80042dc:	2d06      	cmp	r5, #6
 80042de:	f47f af21 	bne.w	8004124 <_scanf_float+0x60>
 80042e2:	2507      	movs	r5, #7
 80042e4:	e7b2      	b.n	800424c <_scanf_float+0x188>
 80042e6:	6822      	ldr	r2, [r4, #0]
 80042e8:	0591      	lsls	r1, r2, #22
 80042ea:	f57f af1b 	bpl.w	8004124 <_scanf_float+0x60>
 80042ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80042f2:	6022      	str	r2, [r4, #0]
 80042f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80042f8:	e7a8      	b.n	800424c <_scanf_float+0x188>
 80042fa:	6822      	ldr	r2, [r4, #0]
 80042fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004300:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004304:	d006      	beq.n	8004314 <_scanf_float+0x250>
 8004306:	0550      	lsls	r0, r2, #21
 8004308:	f57f af0c 	bpl.w	8004124 <_scanf_float+0x60>
 800430c:	f1b9 0f00 	cmp.w	r9, #0
 8004310:	f43f af0f 	beq.w	8004132 <_scanf_float+0x6e>
 8004314:	0591      	lsls	r1, r2, #22
 8004316:	bf58      	it	pl
 8004318:	9901      	ldrpl	r1, [sp, #4]
 800431a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800431e:	bf58      	it	pl
 8004320:	eba9 0101 	subpl.w	r1, r9, r1
 8004324:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004328:	bf58      	it	pl
 800432a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800432e:	6022      	str	r2, [r4, #0]
 8004330:	f04f 0900 	mov.w	r9, #0
 8004334:	e78a      	b.n	800424c <_scanf_float+0x188>
 8004336:	f04f 0a03 	mov.w	sl, #3
 800433a:	e787      	b.n	800424c <_scanf_float+0x188>
 800433c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004340:	4639      	mov	r1, r7
 8004342:	4640      	mov	r0, r8
 8004344:	4798      	blx	r3
 8004346:	2800      	cmp	r0, #0
 8004348:	f43f aedf 	beq.w	800410a <_scanf_float+0x46>
 800434c:	e6ea      	b.n	8004124 <_scanf_float+0x60>
 800434e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004352:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004356:	463a      	mov	r2, r7
 8004358:	4640      	mov	r0, r8
 800435a:	4798      	blx	r3
 800435c:	6923      	ldr	r3, [r4, #16]
 800435e:	3b01      	subs	r3, #1
 8004360:	6123      	str	r3, [r4, #16]
 8004362:	e6ec      	b.n	800413e <_scanf_float+0x7a>
 8004364:	1e6b      	subs	r3, r5, #1
 8004366:	2b06      	cmp	r3, #6
 8004368:	d825      	bhi.n	80043b6 <_scanf_float+0x2f2>
 800436a:	2d02      	cmp	r5, #2
 800436c:	d836      	bhi.n	80043dc <_scanf_float+0x318>
 800436e:	455e      	cmp	r6, fp
 8004370:	f67f aee8 	bls.w	8004144 <_scanf_float+0x80>
 8004374:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004378:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800437c:	463a      	mov	r2, r7
 800437e:	4640      	mov	r0, r8
 8004380:	4798      	blx	r3
 8004382:	6923      	ldr	r3, [r4, #16]
 8004384:	3b01      	subs	r3, #1
 8004386:	6123      	str	r3, [r4, #16]
 8004388:	e7f1      	b.n	800436e <_scanf_float+0x2aa>
 800438a:	9802      	ldr	r0, [sp, #8]
 800438c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004390:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004394:	9002      	str	r0, [sp, #8]
 8004396:	463a      	mov	r2, r7
 8004398:	4640      	mov	r0, r8
 800439a:	4798      	blx	r3
 800439c:	6923      	ldr	r3, [r4, #16]
 800439e:	3b01      	subs	r3, #1
 80043a0:	6123      	str	r3, [r4, #16]
 80043a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80043a6:	fa5f fa8a 	uxtb.w	sl, sl
 80043aa:	f1ba 0f02 	cmp.w	sl, #2
 80043ae:	d1ec      	bne.n	800438a <_scanf_float+0x2c6>
 80043b0:	3d03      	subs	r5, #3
 80043b2:	b2ed      	uxtb	r5, r5
 80043b4:	1b76      	subs	r6, r6, r5
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	05da      	lsls	r2, r3, #23
 80043ba:	d52f      	bpl.n	800441c <_scanf_float+0x358>
 80043bc:	055b      	lsls	r3, r3, #21
 80043be:	d510      	bpl.n	80043e2 <_scanf_float+0x31e>
 80043c0:	455e      	cmp	r6, fp
 80043c2:	f67f aebf 	bls.w	8004144 <_scanf_float+0x80>
 80043c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80043ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80043ce:	463a      	mov	r2, r7
 80043d0:	4640      	mov	r0, r8
 80043d2:	4798      	blx	r3
 80043d4:	6923      	ldr	r3, [r4, #16]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	6123      	str	r3, [r4, #16]
 80043da:	e7f1      	b.n	80043c0 <_scanf_float+0x2fc>
 80043dc:	46aa      	mov	sl, r5
 80043de:	9602      	str	r6, [sp, #8]
 80043e0:	e7df      	b.n	80043a2 <_scanf_float+0x2de>
 80043e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80043e6:	6923      	ldr	r3, [r4, #16]
 80043e8:	2965      	cmp	r1, #101	; 0x65
 80043ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80043ee:	f106 35ff 	add.w	r5, r6, #4294967295
 80043f2:	6123      	str	r3, [r4, #16]
 80043f4:	d00c      	beq.n	8004410 <_scanf_float+0x34c>
 80043f6:	2945      	cmp	r1, #69	; 0x45
 80043f8:	d00a      	beq.n	8004410 <_scanf_float+0x34c>
 80043fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80043fe:	463a      	mov	r2, r7
 8004400:	4640      	mov	r0, r8
 8004402:	4798      	blx	r3
 8004404:	6923      	ldr	r3, [r4, #16]
 8004406:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800440a:	3b01      	subs	r3, #1
 800440c:	1eb5      	subs	r5, r6, #2
 800440e:	6123      	str	r3, [r4, #16]
 8004410:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004414:	463a      	mov	r2, r7
 8004416:	4640      	mov	r0, r8
 8004418:	4798      	blx	r3
 800441a:	462e      	mov	r6, r5
 800441c:	6825      	ldr	r5, [r4, #0]
 800441e:	f015 0510 	ands.w	r5, r5, #16
 8004422:	d159      	bne.n	80044d8 <_scanf_float+0x414>
 8004424:	7035      	strb	r5, [r6, #0]
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800442c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004430:	d11b      	bne.n	800446a <_scanf_float+0x3a6>
 8004432:	9b01      	ldr	r3, [sp, #4]
 8004434:	454b      	cmp	r3, r9
 8004436:	eba3 0209 	sub.w	r2, r3, r9
 800443a:	d123      	bne.n	8004484 <_scanf_float+0x3c0>
 800443c:	2200      	movs	r2, #0
 800443e:	4659      	mov	r1, fp
 8004440:	4640      	mov	r0, r8
 8004442:	f000 ff37 	bl	80052b4 <_strtod_r>
 8004446:	6822      	ldr	r2, [r4, #0]
 8004448:	9b03      	ldr	r3, [sp, #12]
 800444a:	f012 0f02 	tst.w	r2, #2
 800444e:	ec57 6b10 	vmov	r6, r7, d0
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	d021      	beq.n	800449a <_scanf_float+0x3d6>
 8004456:	9903      	ldr	r1, [sp, #12]
 8004458:	1d1a      	adds	r2, r3, #4
 800445a:	600a      	str	r2, [r1, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	e9c3 6700 	strd	r6, r7, [r3]
 8004462:	68e3      	ldr	r3, [r4, #12]
 8004464:	3301      	adds	r3, #1
 8004466:	60e3      	str	r3, [r4, #12]
 8004468:	e66d      	b.n	8004146 <_scanf_float+0x82>
 800446a:	9b04      	ldr	r3, [sp, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0e5      	beq.n	800443c <_scanf_float+0x378>
 8004470:	9905      	ldr	r1, [sp, #20]
 8004472:	230a      	movs	r3, #10
 8004474:	462a      	mov	r2, r5
 8004476:	3101      	adds	r1, #1
 8004478:	4640      	mov	r0, r8
 800447a:	f000 ffaf 	bl	80053dc <_strtol_r>
 800447e:	9b04      	ldr	r3, [sp, #16]
 8004480:	9e05      	ldr	r6, [sp, #20]
 8004482:	1ac2      	subs	r2, r0, r3
 8004484:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004488:	429e      	cmp	r6, r3
 800448a:	bf28      	it	cs
 800448c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004490:	4912      	ldr	r1, [pc, #72]	; (80044dc <_scanf_float+0x418>)
 8004492:	4630      	mov	r0, r6
 8004494:	f000 f8ca 	bl	800462c <siprintf>
 8004498:	e7d0      	b.n	800443c <_scanf_float+0x378>
 800449a:	9903      	ldr	r1, [sp, #12]
 800449c:	f012 0f04 	tst.w	r2, #4
 80044a0:	f103 0204 	add.w	r2, r3, #4
 80044a4:	600a      	str	r2, [r1, #0]
 80044a6:	d1d9      	bne.n	800445c <_scanf_float+0x398>
 80044a8:	f8d3 8000 	ldr.w	r8, [r3]
 80044ac:	ee10 2a10 	vmov	r2, s0
 80044b0:	ee10 0a10 	vmov	r0, s0
 80044b4:	463b      	mov	r3, r7
 80044b6:	4639      	mov	r1, r7
 80044b8:	f7fc fb40 	bl	8000b3c <__aeabi_dcmpun>
 80044bc:	b128      	cbz	r0, 80044ca <_scanf_float+0x406>
 80044be:	4808      	ldr	r0, [pc, #32]	; (80044e0 <_scanf_float+0x41c>)
 80044c0:	f000 f8ae 	bl	8004620 <nanf>
 80044c4:	ed88 0a00 	vstr	s0, [r8]
 80044c8:	e7cb      	b.n	8004462 <_scanf_float+0x39e>
 80044ca:	4630      	mov	r0, r6
 80044cc:	4639      	mov	r1, r7
 80044ce:	f7fc fb93 	bl	8000bf8 <__aeabi_d2f>
 80044d2:	f8c8 0000 	str.w	r0, [r8]
 80044d6:	e7c4      	b.n	8004462 <_scanf_float+0x39e>
 80044d8:	2500      	movs	r5, #0
 80044da:	e634      	b.n	8004146 <_scanf_float+0x82>
 80044dc:	08008890 	.word	0x08008890
 80044e0:	08008d00 	.word	0x08008d00

080044e4 <iprintf>:
 80044e4:	b40f      	push	{r0, r1, r2, r3}
 80044e6:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <iprintf+0x2c>)
 80044e8:	b513      	push	{r0, r1, r4, lr}
 80044ea:	681c      	ldr	r4, [r3, #0]
 80044ec:	b124      	cbz	r4, 80044f8 <iprintf+0x14>
 80044ee:	69a3      	ldr	r3, [r4, #24]
 80044f0:	b913      	cbnz	r3, 80044f8 <iprintf+0x14>
 80044f2:	4620      	mov	r0, r4
 80044f4:	f001 ffd4 	bl	80064a0 <__sinit>
 80044f8:	ab05      	add	r3, sp, #20
 80044fa:	9a04      	ldr	r2, [sp, #16]
 80044fc:	68a1      	ldr	r1, [r4, #8]
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	4620      	mov	r0, r4
 8004502:	f003 facd 	bl	8007aa0 <_vfiprintf_r>
 8004506:	b002      	add	sp, #8
 8004508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800450c:	b004      	add	sp, #16
 800450e:	4770      	bx	lr
 8004510:	20000014 	.word	0x20000014

08004514 <_puts_r>:
 8004514:	b570      	push	{r4, r5, r6, lr}
 8004516:	460e      	mov	r6, r1
 8004518:	4605      	mov	r5, r0
 800451a:	b118      	cbz	r0, 8004524 <_puts_r+0x10>
 800451c:	6983      	ldr	r3, [r0, #24]
 800451e:	b90b      	cbnz	r3, 8004524 <_puts_r+0x10>
 8004520:	f001 ffbe 	bl	80064a0 <__sinit>
 8004524:	69ab      	ldr	r3, [r5, #24]
 8004526:	68ac      	ldr	r4, [r5, #8]
 8004528:	b913      	cbnz	r3, 8004530 <_puts_r+0x1c>
 800452a:	4628      	mov	r0, r5
 800452c:	f001 ffb8 	bl	80064a0 <__sinit>
 8004530:	4b2c      	ldr	r3, [pc, #176]	; (80045e4 <_puts_r+0xd0>)
 8004532:	429c      	cmp	r4, r3
 8004534:	d120      	bne.n	8004578 <_puts_r+0x64>
 8004536:	686c      	ldr	r4, [r5, #4]
 8004538:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800453a:	07db      	lsls	r3, r3, #31
 800453c:	d405      	bmi.n	800454a <_puts_r+0x36>
 800453e:	89a3      	ldrh	r3, [r4, #12]
 8004540:	0598      	lsls	r0, r3, #22
 8004542:	d402      	bmi.n	800454a <_puts_r+0x36>
 8004544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004546:	f002 fbbc 	bl	8006cc2 <__retarget_lock_acquire_recursive>
 800454a:	89a3      	ldrh	r3, [r4, #12]
 800454c:	0719      	lsls	r1, r3, #28
 800454e:	d51d      	bpl.n	800458c <_puts_r+0x78>
 8004550:	6923      	ldr	r3, [r4, #16]
 8004552:	b1db      	cbz	r3, 800458c <_puts_r+0x78>
 8004554:	3e01      	subs	r6, #1
 8004556:	68a3      	ldr	r3, [r4, #8]
 8004558:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800455c:	3b01      	subs	r3, #1
 800455e:	60a3      	str	r3, [r4, #8]
 8004560:	bb39      	cbnz	r1, 80045b2 <_puts_r+0x9e>
 8004562:	2b00      	cmp	r3, #0
 8004564:	da38      	bge.n	80045d8 <_puts_r+0xc4>
 8004566:	4622      	mov	r2, r4
 8004568:	210a      	movs	r1, #10
 800456a:	4628      	mov	r0, r5
 800456c:	f000 ff42 	bl	80053f4 <__swbuf_r>
 8004570:	3001      	adds	r0, #1
 8004572:	d011      	beq.n	8004598 <_puts_r+0x84>
 8004574:	250a      	movs	r5, #10
 8004576:	e011      	b.n	800459c <_puts_r+0x88>
 8004578:	4b1b      	ldr	r3, [pc, #108]	; (80045e8 <_puts_r+0xd4>)
 800457a:	429c      	cmp	r4, r3
 800457c:	d101      	bne.n	8004582 <_puts_r+0x6e>
 800457e:	68ac      	ldr	r4, [r5, #8]
 8004580:	e7da      	b.n	8004538 <_puts_r+0x24>
 8004582:	4b1a      	ldr	r3, [pc, #104]	; (80045ec <_puts_r+0xd8>)
 8004584:	429c      	cmp	r4, r3
 8004586:	bf08      	it	eq
 8004588:	68ec      	ldreq	r4, [r5, #12]
 800458a:	e7d5      	b.n	8004538 <_puts_r+0x24>
 800458c:	4621      	mov	r1, r4
 800458e:	4628      	mov	r0, r5
 8004590:	f000 ff82 	bl	8005498 <__swsetup_r>
 8004594:	2800      	cmp	r0, #0
 8004596:	d0dd      	beq.n	8004554 <_puts_r+0x40>
 8004598:	f04f 35ff 	mov.w	r5, #4294967295
 800459c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800459e:	07da      	lsls	r2, r3, #31
 80045a0:	d405      	bmi.n	80045ae <_puts_r+0x9a>
 80045a2:	89a3      	ldrh	r3, [r4, #12]
 80045a4:	059b      	lsls	r3, r3, #22
 80045a6:	d402      	bmi.n	80045ae <_puts_r+0x9a>
 80045a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045aa:	f002 fb8b 	bl	8006cc4 <__retarget_lock_release_recursive>
 80045ae:	4628      	mov	r0, r5
 80045b0:	bd70      	pop	{r4, r5, r6, pc}
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	da04      	bge.n	80045c0 <_puts_r+0xac>
 80045b6:	69a2      	ldr	r2, [r4, #24]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	dc06      	bgt.n	80045ca <_puts_r+0xb6>
 80045bc:	290a      	cmp	r1, #10
 80045be:	d004      	beq.n	80045ca <_puts_r+0xb6>
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	6022      	str	r2, [r4, #0]
 80045c6:	7019      	strb	r1, [r3, #0]
 80045c8:	e7c5      	b.n	8004556 <_puts_r+0x42>
 80045ca:	4622      	mov	r2, r4
 80045cc:	4628      	mov	r0, r5
 80045ce:	f000 ff11 	bl	80053f4 <__swbuf_r>
 80045d2:	3001      	adds	r0, #1
 80045d4:	d1bf      	bne.n	8004556 <_puts_r+0x42>
 80045d6:	e7df      	b.n	8004598 <_puts_r+0x84>
 80045d8:	6823      	ldr	r3, [r4, #0]
 80045da:	250a      	movs	r5, #10
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	6022      	str	r2, [r4, #0]
 80045e0:	701d      	strb	r5, [r3, #0]
 80045e2:	e7db      	b.n	800459c <_puts_r+0x88>
 80045e4:	08008a9c 	.word	0x08008a9c
 80045e8:	08008abc 	.word	0x08008abc
 80045ec:	08008a7c 	.word	0x08008a7c

080045f0 <puts>:
 80045f0:	4b02      	ldr	r3, [pc, #8]	; (80045fc <puts+0xc>)
 80045f2:	4601      	mov	r1, r0
 80045f4:	6818      	ldr	r0, [r3, #0]
 80045f6:	f7ff bf8d 	b.w	8004514 <_puts_r>
 80045fa:	bf00      	nop
 80045fc:	20000014 	.word	0x20000014

08004600 <_sbrk_r>:
 8004600:	b538      	push	{r3, r4, r5, lr}
 8004602:	4d06      	ldr	r5, [pc, #24]	; (800461c <_sbrk_r+0x1c>)
 8004604:	2300      	movs	r3, #0
 8004606:	4604      	mov	r4, r0
 8004608:	4608      	mov	r0, r1
 800460a:	602b      	str	r3, [r5, #0]
 800460c:	f7fe f81c 	bl	8002648 <_sbrk>
 8004610:	1c43      	adds	r3, r0, #1
 8004612:	d102      	bne.n	800461a <_sbrk_r+0x1a>
 8004614:	682b      	ldr	r3, [r5, #0]
 8004616:	b103      	cbz	r3, 800461a <_sbrk_r+0x1a>
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	bd38      	pop	{r3, r4, r5, pc}
 800461c:	20000c90 	.word	0x20000c90

08004620 <nanf>:
 8004620:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004628 <nanf+0x8>
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	7fc00000 	.word	0x7fc00000

0800462c <siprintf>:
 800462c:	b40e      	push	{r1, r2, r3}
 800462e:	b500      	push	{lr}
 8004630:	b09c      	sub	sp, #112	; 0x70
 8004632:	ab1d      	add	r3, sp, #116	; 0x74
 8004634:	9002      	str	r0, [sp, #8]
 8004636:	9006      	str	r0, [sp, #24]
 8004638:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800463c:	4809      	ldr	r0, [pc, #36]	; (8004664 <siprintf+0x38>)
 800463e:	9107      	str	r1, [sp, #28]
 8004640:	9104      	str	r1, [sp, #16]
 8004642:	4909      	ldr	r1, [pc, #36]	; (8004668 <siprintf+0x3c>)
 8004644:	f853 2b04 	ldr.w	r2, [r3], #4
 8004648:	9105      	str	r1, [sp, #20]
 800464a:	6800      	ldr	r0, [r0, #0]
 800464c:	9301      	str	r3, [sp, #4]
 800464e:	a902      	add	r1, sp, #8
 8004650:	f003 f8fc 	bl	800784c <_svfiprintf_r>
 8004654:	9b02      	ldr	r3, [sp, #8]
 8004656:	2200      	movs	r2, #0
 8004658:	701a      	strb	r2, [r3, #0]
 800465a:	b01c      	add	sp, #112	; 0x70
 800465c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004660:	b003      	add	sp, #12
 8004662:	4770      	bx	lr
 8004664:	20000014 	.word	0x20000014
 8004668:	ffff0208 	.word	0xffff0208

0800466c <sulp>:
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	4604      	mov	r4, r0
 8004670:	460d      	mov	r5, r1
 8004672:	ec45 4b10 	vmov	d0, r4, r5
 8004676:	4616      	mov	r6, r2
 8004678:	f002 ff28 	bl	80074cc <__ulp>
 800467c:	ec51 0b10 	vmov	r0, r1, d0
 8004680:	b17e      	cbz	r6, 80046a2 <sulp+0x36>
 8004682:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004686:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800468a:	2b00      	cmp	r3, #0
 800468c:	dd09      	ble.n	80046a2 <sulp+0x36>
 800468e:	051b      	lsls	r3, r3, #20
 8004690:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004694:	2400      	movs	r4, #0
 8004696:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800469a:	4622      	mov	r2, r4
 800469c:	462b      	mov	r3, r5
 800469e:	f7fb ffb3 	bl	8000608 <__aeabi_dmul>
 80046a2:	bd70      	pop	{r4, r5, r6, pc}
 80046a4:	0000      	movs	r0, r0
	...

080046a8 <_strtod_l>:
 80046a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ac:	ed2d 8b02 	vpush	{d8}
 80046b0:	b09d      	sub	sp, #116	; 0x74
 80046b2:	461f      	mov	r7, r3
 80046b4:	2300      	movs	r3, #0
 80046b6:	9318      	str	r3, [sp, #96]	; 0x60
 80046b8:	4ba2      	ldr	r3, [pc, #648]	; (8004944 <_strtod_l+0x29c>)
 80046ba:	9213      	str	r2, [sp, #76]	; 0x4c
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	9305      	str	r3, [sp, #20]
 80046c0:	4604      	mov	r4, r0
 80046c2:	4618      	mov	r0, r3
 80046c4:	4688      	mov	r8, r1
 80046c6:	f7fb fd8b 	bl	80001e0 <strlen>
 80046ca:	f04f 0a00 	mov.w	sl, #0
 80046ce:	4605      	mov	r5, r0
 80046d0:	f04f 0b00 	mov.w	fp, #0
 80046d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80046d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80046da:	781a      	ldrb	r2, [r3, #0]
 80046dc:	2a2b      	cmp	r2, #43	; 0x2b
 80046de:	d04e      	beq.n	800477e <_strtod_l+0xd6>
 80046e0:	d83b      	bhi.n	800475a <_strtod_l+0xb2>
 80046e2:	2a0d      	cmp	r2, #13
 80046e4:	d834      	bhi.n	8004750 <_strtod_l+0xa8>
 80046e6:	2a08      	cmp	r2, #8
 80046e8:	d834      	bhi.n	8004754 <_strtod_l+0xac>
 80046ea:	2a00      	cmp	r2, #0
 80046ec:	d03e      	beq.n	800476c <_strtod_l+0xc4>
 80046ee:	2300      	movs	r3, #0
 80046f0:	930a      	str	r3, [sp, #40]	; 0x28
 80046f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80046f4:	7833      	ldrb	r3, [r6, #0]
 80046f6:	2b30      	cmp	r3, #48	; 0x30
 80046f8:	f040 80b0 	bne.w	800485c <_strtod_l+0x1b4>
 80046fc:	7873      	ldrb	r3, [r6, #1]
 80046fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004702:	2b58      	cmp	r3, #88	; 0x58
 8004704:	d168      	bne.n	80047d8 <_strtod_l+0x130>
 8004706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004708:	9301      	str	r3, [sp, #4]
 800470a:	ab18      	add	r3, sp, #96	; 0x60
 800470c:	9702      	str	r7, [sp, #8]
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	4a8d      	ldr	r2, [pc, #564]	; (8004948 <_strtod_l+0x2a0>)
 8004712:	ab19      	add	r3, sp, #100	; 0x64
 8004714:	a917      	add	r1, sp, #92	; 0x5c
 8004716:	4620      	mov	r0, r4
 8004718:	f001 ffc6 	bl	80066a8 <__gethex>
 800471c:	f010 0707 	ands.w	r7, r0, #7
 8004720:	4605      	mov	r5, r0
 8004722:	d005      	beq.n	8004730 <_strtod_l+0x88>
 8004724:	2f06      	cmp	r7, #6
 8004726:	d12c      	bne.n	8004782 <_strtod_l+0xda>
 8004728:	3601      	adds	r6, #1
 800472a:	2300      	movs	r3, #0
 800472c:	9617      	str	r6, [sp, #92]	; 0x5c
 800472e:	930a      	str	r3, [sp, #40]	; 0x28
 8004730:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004732:	2b00      	cmp	r3, #0
 8004734:	f040 8590 	bne.w	8005258 <_strtod_l+0xbb0>
 8004738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800473a:	b1eb      	cbz	r3, 8004778 <_strtod_l+0xd0>
 800473c:	4652      	mov	r2, sl
 800473e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004742:	ec43 2b10 	vmov	d0, r2, r3
 8004746:	b01d      	add	sp, #116	; 0x74
 8004748:	ecbd 8b02 	vpop	{d8}
 800474c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004750:	2a20      	cmp	r2, #32
 8004752:	d1cc      	bne.n	80046ee <_strtod_l+0x46>
 8004754:	3301      	adds	r3, #1
 8004756:	9317      	str	r3, [sp, #92]	; 0x5c
 8004758:	e7be      	b.n	80046d8 <_strtod_l+0x30>
 800475a:	2a2d      	cmp	r2, #45	; 0x2d
 800475c:	d1c7      	bne.n	80046ee <_strtod_l+0x46>
 800475e:	2201      	movs	r2, #1
 8004760:	920a      	str	r2, [sp, #40]	; 0x28
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	9217      	str	r2, [sp, #92]	; 0x5c
 8004766:	785b      	ldrb	r3, [r3, #1]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1c2      	bne.n	80046f2 <_strtod_l+0x4a>
 800476c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800476e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004772:	2b00      	cmp	r3, #0
 8004774:	f040 856e 	bne.w	8005254 <_strtod_l+0xbac>
 8004778:	4652      	mov	r2, sl
 800477a:	465b      	mov	r3, fp
 800477c:	e7e1      	b.n	8004742 <_strtod_l+0x9a>
 800477e:	2200      	movs	r2, #0
 8004780:	e7ee      	b.n	8004760 <_strtod_l+0xb8>
 8004782:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004784:	b13a      	cbz	r2, 8004796 <_strtod_l+0xee>
 8004786:	2135      	movs	r1, #53	; 0x35
 8004788:	a81a      	add	r0, sp, #104	; 0x68
 800478a:	f002 ffaa 	bl	80076e2 <__copybits>
 800478e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004790:	4620      	mov	r0, r4
 8004792:	f002 fb69 	bl	8006e68 <_Bfree>
 8004796:	3f01      	subs	r7, #1
 8004798:	2f04      	cmp	r7, #4
 800479a:	d806      	bhi.n	80047aa <_strtod_l+0x102>
 800479c:	e8df f007 	tbb	[pc, r7]
 80047a0:	1714030a 	.word	0x1714030a
 80047a4:	0a          	.byte	0x0a
 80047a5:	00          	.byte	0x00
 80047a6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80047aa:	0728      	lsls	r0, r5, #28
 80047ac:	d5c0      	bpl.n	8004730 <_strtod_l+0x88>
 80047ae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80047b2:	e7bd      	b.n	8004730 <_strtod_l+0x88>
 80047b4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80047b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80047ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80047be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80047c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80047c6:	e7f0      	b.n	80047aa <_strtod_l+0x102>
 80047c8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800494c <_strtod_l+0x2a4>
 80047cc:	e7ed      	b.n	80047aa <_strtod_l+0x102>
 80047ce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80047d2:	f04f 3aff 	mov.w	sl, #4294967295
 80047d6:	e7e8      	b.n	80047aa <_strtod_l+0x102>
 80047d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80047de:	785b      	ldrb	r3, [r3, #1]
 80047e0:	2b30      	cmp	r3, #48	; 0x30
 80047e2:	d0f9      	beq.n	80047d8 <_strtod_l+0x130>
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0a3      	beq.n	8004730 <_strtod_l+0x88>
 80047e8:	2301      	movs	r3, #1
 80047ea:	f04f 0900 	mov.w	r9, #0
 80047ee:	9304      	str	r3, [sp, #16]
 80047f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80047f2:	9308      	str	r3, [sp, #32]
 80047f4:	f8cd 901c 	str.w	r9, [sp, #28]
 80047f8:	464f      	mov	r7, r9
 80047fa:	220a      	movs	r2, #10
 80047fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80047fe:	7806      	ldrb	r6, [r0, #0]
 8004800:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004804:	b2d9      	uxtb	r1, r3
 8004806:	2909      	cmp	r1, #9
 8004808:	d92a      	bls.n	8004860 <_strtod_l+0x1b8>
 800480a:	9905      	ldr	r1, [sp, #20]
 800480c:	462a      	mov	r2, r5
 800480e:	f003 fac2 	bl	8007d96 <strncmp>
 8004812:	b398      	cbz	r0, 800487c <_strtod_l+0x1d4>
 8004814:	2000      	movs	r0, #0
 8004816:	4632      	mov	r2, r6
 8004818:	463d      	mov	r5, r7
 800481a:	9005      	str	r0, [sp, #20]
 800481c:	4603      	mov	r3, r0
 800481e:	2a65      	cmp	r2, #101	; 0x65
 8004820:	d001      	beq.n	8004826 <_strtod_l+0x17e>
 8004822:	2a45      	cmp	r2, #69	; 0x45
 8004824:	d118      	bne.n	8004858 <_strtod_l+0x1b0>
 8004826:	b91d      	cbnz	r5, 8004830 <_strtod_l+0x188>
 8004828:	9a04      	ldr	r2, [sp, #16]
 800482a:	4302      	orrs	r2, r0
 800482c:	d09e      	beq.n	800476c <_strtod_l+0xc4>
 800482e:	2500      	movs	r5, #0
 8004830:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8004834:	f108 0201 	add.w	r2, r8, #1
 8004838:	9217      	str	r2, [sp, #92]	; 0x5c
 800483a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800483e:	2a2b      	cmp	r2, #43	; 0x2b
 8004840:	d075      	beq.n	800492e <_strtod_l+0x286>
 8004842:	2a2d      	cmp	r2, #45	; 0x2d
 8004844:	d07b      	beq.n	800493e <_strtod_l+0x296>
 8004846:	f04f 0c00 	mov.w	ip, #0
 800484a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800484e:	2909      	cmp	r1, #9
 8004850:	f240 8082 	bls.w	8004958 <_strtod_l+0x2b0>
 8004854:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004858:	2600      	movs	r6, #0
 800485a:	e09d      	b.n	8004998 <_strtod_l+0x2f0>
 800485c:	2300      	movs	r3, #0
 800485e:	e7c4      	b.n	80047ea <_strtod_l+0x142>
 8004860:	2f08      	cmp	r7, #8
 8004862:	bfd8      	it	le
 8004864:	9907      	ldrle	r1, [sp, #28]
 8004866:	f100 0001 	add.w	r0, r0, #1
 800486a:	bfda      	itte	le
 800486c:	fb02 3301 	mlale	r3, r2, r1, r3
 8004870:	9307      	strle	r3, [sp, #28]
 8004872:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004876:	3701      	adds	r7, #1
 8004878:	9017      	str	r0, [sp, #92]	; 0x5c
 800487a:	e7bf      	b.n	80047fc <_strtod_l+0x154>
 800487c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800487e:	195a      	adds	r2, r3, r5
 8004880:	9217      	str	r2, [sp, #92]	; 0x5c
 8004882:	5d5a      	ldrb	r2, [r3, r5]
 8004884:	2f00      	cmp	r7, #0
 8004886:	d037      	beq.n	80048f8 <_strtod_l+0x250>
 8004888:	9005      	str	r0, [sp, #20]
 800488a:	463d      	mov	r5, r7
 800488c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004890:	2b09      	cmp	r3, #9
 8004892:	d912      	bls.n	80048ba <_strtod_l+0x212>
 8004894:	2301      	movs	r3, #1
 8004896:	e7c2      	b.n	800481e <_strtod_l+0x176>
 8004898:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	9217      	str	r2, [sp, #92]	; 0x5c
 800489e:	785a      	ldrb	r2, [r3, #1]
 80048a0:	3001      	adds	r0, #1
 80048a2:	2a30      	cmp	r2, #48	; 0x30
 80048a4:	d0f8      	beq.n	8004898 <_strtod_l+0x1f0>
 80048a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	f200 84d9 	bhi.w	8005262 <_strtod_l+0xbba>
 80048b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80048b2:	9005      	str	r0, [sp, #20]
 80048b4:	2000      	movs	r0, #0
 80048b6:	9308      	str	r3, [sp, #32]
 80048b8:	4605      	mov	r5, r0
 80048ba:	3a30      	subs	r2, #48	; 0x30
 80048bc:	f100 0301 	add.w	r3, r0, #1
 80048c0:	d014      	beq.n	80048ec <_strtod_l+0x244>
 80048c2:	9905      	ldr	r1, [sp, #20]
 80048c4:	4419      	add	r1, r3
 80048c6:	9105      	str	r1, [sp, #20]
 80048c8:	462b      	mov	r3, r5
 80048ca:	eb00 0e05 	add.w	lr, r0, r5
 80048ce:	210a      	movs	r1, #10
 80048d0:	4573      	cmp	r3, lr
 80048d2:	d113      	bne.n	80048fc <_strtod_l+0x254>
 80048d4:	182b      	adds	r3, r5, r0
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	f105 0501 	add.w	r5, r5, #1
 80048dc:	4405      	add	r5, r0
 80048de:	dc1c      	bgt.n	800491a <_strtod_l+0x272>
 80048e0:	9907      	ldr	r1, [sp, #28]
 80048e2:	230a      	movs	r3, #10
 80048e4:	fb03 2301 	mla	r3, r3, r1, r2
 80048e8:	9307      	str	r3, [sp, #28]
 80048ea:	2300      	movs	r3, #0
 80048ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80048ee:	1c51      	adds	r1, r2, #1
 80048f0:	9117      	str	r1, [sp, #92]	; 0x5c
 80048f2:	7852      	ldrb	r2, [r2, #1]
 80048f4:	4618      	mov	r0, r3
 80048f6:	e7c9      	b.n	800488c <_strtod_l+0x1e4>
 80048f8:	4638      	mov	r0, r7
 80048fa:	e7d2      	b.n	80048a2 <_strtod_l+0x1fa>
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	dc04      	bgt.n	800490a <_strtod_l+0x262>
 8004900:	9e07      	ldr	r6, [sp, #28]
 8004902:	434e      	muls	r6, r1
 8004904:	9607      	str	r6, [sp, #28]
 8004906:	3301      	adds	r3, #1
 8004908:	e7e2      	b.n	80048d0 <_strtod_l+0x228>
 800490a:	f103 0c01 	add.w	ip, r3, #1
 800490e:	f1bc 0f10 	cmp.w	ip, #16
 8004912:	bfd8      	it	le
 8004914:	fb01 f909 	mulle.w	r9, r1, r9
 8004918:	e7f5      	b.n	8004906 <_strtod_l+0x25e>
 800491a:	2d10      	cmp	r5, #16
 800491c:	bfdc      	itt	le
 800491e:	230a      	movle	r3, #10
 8004920:	fb03 2909 	mlale	r9, r3, r9, r2
 8004924:	e7e1      	b.n	80048ea <_strtod_l+0x242>
 8004926:	2300      	movs	r3, #0
 8004928:	9305      	str	r3, [sp, #20]
 800492a:	2301      	movs	r3, #1
 800492c:	e77c      	b.n	8004828 <_strtod_l+0x180>
 800492e:	f04f 0c00 	mov.w	ip, #0
 8004932:	f108 0202 	add.w	r2, r8, #2
 8004936:	9217      	str	r2, [sp, #92]	; 0x5c
 8004938:	f898 2002 	ldrb.w	r2, [r8, #2]
 800493c:	e785      	b.n	800484a <_strtod_l+0x1a2>
 800493e:	f04f 0c01 	mov.w	ip, #1
 8004942:	e7f6      	b.n	8004932 <_strtod_l+0x28a>
 8004944:	08008b44 	.word	0x08008b44
 8004948:	08008898 	.word	0x08008898
 800494c:	7ff00000 	.word	0x7ff00000
 8004950:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004952:	1c51      	adds	r1, r2, #1
 8004954:	9117      	str	r1, [sp, #92]	; 0x5c
 8004956:	7852      	ldrb	r2, [r2, #1]
 8004958:	2a30      	cmp	r2, #48	; 0x30
 800495a:	d0f9      	beq.n	8004950 <_strtod_l+0x2a8>
 800495c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004960:	2908      	cmp	r1, #8
 8004962:	f63f af79 	bhi.w	8004858 <_strtod_l+0x1b0>
 8004966:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800496a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800496c:	9206      	str	r2, [sp, #24]
 800496e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004970:	1c51      	adds	r1, r2, #1
 8004972:	9117      	str	r1, [sp, #92]	; 0x5c
 8004974:	7852      	ldrb	r2, [r2, #1]
 8004976:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800497a:	2e09      	cmp	r6, #9
 800497c:	d937      	bls.n	80049ee <_strtod_l+0x346>
 800497e:	9e06      	ldr	r6, [sp, #24]
 8004980:	1b89      	subs	r1, r1, r6
 8004982:	2908      	cmp	r1, #8
 8004984:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004988:	dc02      	bgt.n	8004990 <_strtod_l+0x2e8>
 800498a:	4576      	cmp	r6, lr
 800498c:	bfa8      	it	ge
 800498e:	4676      	movge	r6, lr
 8004990:	f1bc 0f00 	cmp.w	ip, #0
 8004994:	d000      	beq.n	8004998 <_strtod_l+0x2f0>
 8004996:	4276      	negs	r6, r6
 8004998:	2d00      	cmp	r5, #0
 800499a:	d14d      	bne.n	8004a38 <_strtod_l+0x390>
 800499c:	9904      	ldr	r1, [sp, #16]
 800499e:	4301      	orrs	r1, r0
 80049a0:	f47f aec6 	bne.w	8004730 <_strtod_l+0x88>
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f47f aee1 	bne.w	800476c <_strtod_l+0xc4>
 80049aa:	2a69      	cmp	r2, #105	; 0x69
 80049ac:	d027      	beq.n	80049fe <_strtod_l+0x356>
 80049ae:	dc24      	bgt.n	80049fa <_strtod_l+0x352>
 80049b0:	2a49      	cmp	r2, #73	; 0x49
 80049b2:	d024      	beq.n	80049fe <_strtod_l+0x356>
 80049b4:	2a4e      	cmp	r2, #78	; 0x4e
 80049b6:	f47f aed9 	bne.w	800476c <_strtod_l+0xc4>
 80049ba:	499f      	ldr	r1, [pc, #636]	; (8004c38 <_strtod_l+0x590>)
 80049bc:	a817      	add	r0, sp, #92	; 0x5c
 80049be:	f002 f8cb 	bl	8006b58 <__match>
 80049c2:	2800      	cmp	r0, #0
 80049c4:	f43f aed2 	beq.w	800476c <_strtod_l+0xc4>
 80049c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	2b28      	cmp	r3, #40	; 0x28
 80049ce:	d12d      	bne.n	8004a2c <_strtod_l+0x384>
 80049d0:	499a      	ldr	r1, [pc, #616]	; (8004c3c <_strtod_l+0x594>)
 80049d2:	aa1a      	add	r2, sp, #104	; 0x68
 80049d4:	a817      	add	r0, sp, #92	; 0x5c
 80049d6:	f002 f8d3 	bl	8006b80 <__hexnan>
 80049da:	2805      	cmp	r0, #5
 80049dc:	d126      	bne.n	8004a2c <_strtod_l+0x384>
 80049de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80049e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80049e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80049e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80049ec:	e6a0      	b.n	8004730 <_strtod_l+0x88>
 80049ee:	210a      	movs	r1, #10
 80049f0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80049f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80049f8:	e7b9      	b.n	800496e <_strtod_l+0x2c6>
 80049fa:	2a6e      	cmp	r2, #110	; 0x6e
 80049fc:	e7db      	b.n	80049b6 <_strtod_l+0x30e>
 80049fe:	4990      	ldr	r1, [pc, #576]	; (8004c40 <_strtod_l+0x598>)
 8004a00:	a817      	add	r0, sp, #92	; 0x5c
 8004a02:	f002 f8a9 	bl	8006b58 <__match>
 8004a06:	2800      	cmp	r0, #0
 8004a08:	f43f aeb0 	beq.w	800476c <_strtod_l+0xc4>
 8004a0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a0e:	498d      	ldr	r1, [pc, #564]	; (8004c44 <_strtod_l+0x59c>)
 8004a10:	3b01      	subs	r3, #1
 8004a12:	a817      	add	r0, sp, #92	; 0x5c
 8004a14:	9317      	str	r3, [sp, #92]	; 0x5c
 8004a16:	f002 f89f 	bl	8006b58 <__match>
 8004a1a:	b910      	cbnz	r0, 8004a22 <_strtod_l+0x37a>
 8004a1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a1e:	3301      	adds	r3, #1
 8004a20:	9317      	str	r3, [sp, #92]	; 0x5c
 8004a22:	f8df b230 	ldr.w	fp, [pc, #560]	; 8004c54 <_strtod_l+0x5ac>
 8004a26:	f04f 0a00 	mov.w	sl, #0
 8004a2a:	e681      	b.n	8004730 <_strtod_l+0x88>
 8004a2c:	4886      	ldr	r0, [pc, #536]	; (8004c48 <_strtod_l+0x5a0>)
 8004a2e:	f003 f967 	bl	8007d00 <nan>
 8004a32:	ec5b ab10 	vmov	sl, fp, d0
 8004a36:	e67b      	b.n	8004730 <_strtod_l+0x88>
 8004a38:	9b05      	ldr	r3, [sp, #20]
 8004a3a:	9807      	ldr	r0, [sp, #28]
 8004a3c:	1af3      	subs	r3, r6, r3
 8004a3e:	2f00      	cmp	r7, #0
 8004a40:	bf08      	it	eq
 8004a42:	462f      	moveq	r7, r5
 8004a44:	2d10      	cmp	r5, #16
 8004a46:	9306      	str	r3, [sp, #24]
 8004a48:	46a8      	mov	r8, r5
 8004a4a:	bfa8      	it	ge
 8004a4c:	f04f 0810 	movge.w	r8, #16
 8004a50:	f7fb fd60 	bl	8000514 <__aeabi_ui2d>
 8004a54:	2d09      	cmp	r5, #9
 8004a56:	4682      	mov	sl, r0
 8004a58:	468b      	mov	fp, r1
 8004a5a:	dd13      	ble.n	8004a84 <_strtod_l+0x3dc>
 8004a5c:	4b7b      	ldr	r3, [pc, #492]	; (8004c4c <_strtod_l+0x5a4>)
 8004a5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004a62:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004a66:	f7fb fdcf 	bl	8000608 <__aeabi_dmul>
 8004a6a:	4682      	mov	sl, r0
 8004a6c:	4648      	mov	r0, r9
 8004a6e:	468b      	mov	fp, r1
 8004a70:	f7fb fd50 	bl	8000514 <__aeabi_ui2d>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4650      	mov	r0, sl
 8004a7a:	4659      	mov	r1, fp
 8004a7c:	f7fb fc0e 	bl	800029c <__adddf3>
 8004a80:	4682      	mov	sl, r0
 8004a82:	468b      	mov	fp, r1
 8004a84:	2d0f      	cmp	r5, #15
 8004a86:	dc38      	bgt.n	8004afa <_strtod_l+0x452>
 8004a88:	9b06      	ldr	r3, [sp, #24]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f43f ae50 	beq.w	8004730 <_strtod_l+0x88>
 8004a90:	dd24      	ble.n	8004adc <_strtod_l+0x434>
 8004a92:	2b16      	cmp	r3, #22
 8004a94:	dc0b      	bgt.n	8004aae <_strtod_l+0x406>
 8004a96:	496d      	ldr	r1, [pc, #436]	; (8004c4c <_strtod_l+0x5a4>)
 8004a98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004a9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004aa0:	4652      	mov	r2, sl
 8004aa2:	465b      	mov	r3, fp
 8004aa4:	f7fb fdb0 	bl	8000608 <__aeabi_dmul>
 8004aa8:	4682      	mov	sl, r0
 8004aaa:	468b      	mov	fp, r1
 8004aac:	e640      	b.n	8004730 <_strtod_l+0x88>
 8004aae:	9a06      	ldr	r2, [sp, #24]
 8004ab0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	db20      	blt.n	8004afa <_strtod_l+0x452>
 8004ab8:	4c64      	ldr	r4, [pc, #400]	; (8004c4c <_strtod_l+0x5a4>)
 8004aba:	f1c5 050f 	rsb	r5, r5, #15
 8004abe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004ac2:	4652      	mov	r2, sl
 8004ac4:	465b      	mov	r3, fp
 8004ac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004aca:	f7fb fd9d 	bl	8000608 <__aeabi_dmul>
 8004ace:	9b06      	ldr	r3, [sp, #24]
 8004ad0:	1b5d      	subs	r5, r3, r5
 8004ad2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004ad6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004ada:	e7e3      	b.n	8004aa4 <_strtod_l+0x3fc>
 8004adc:	9b06      	ldr	r3, [sp, #24]
 8004ade:	3316      	adds	r3, #22
 8004ae0:	db0b      	blt.n	8004afa <_strtod_l+0x452>
 8004ae2:	9b05      	ldr	r3, [sp, #20]
 8004ae4:	1b9e      	subs	r6, r3, r6
 8004ae6:	4b59      	ldr	r3, [pc, #356]	; (8004c4c <_strtod_l+0x5a4>)
 8004ae8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004aec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004af0:	4650      	mov	r0, sl
 8004af2:	4659      	mov	r1, fp
 8004af4:	f7fb feb2 	bl	800085c <__aeabi_ddiv>
 8004af8:	e7d6      	b.n	8004aa8 <_strtod_l+0x400>
 8004afa:	9b06      	ldr	r3, [sp, #24]
 8004afc:	eba5 0808 	sub.w	r8, r5, r8
 8004b00:	4498      	add	r8, r3
 8004b02:	f1b8 0f00 	cmp.w	r8, #0
 8004b06:	dd74      	ble.n	8004bf2 <_strtod_l+0x54a>
 8004b08:	f018 030f 	ands.w	r3, r8, #15
 8004b0c:	d00a      	beq.n	8004b24 <_strtod_l+0x47c>
 8004b0e:	494f      	ldr	r1, [pc, #316]	; (8004c4c <_strtod_l+0x5a4>)
 8004b10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004b14:	4652      	mov	r2, sl
 8004b16:	465b      	mov	r3, fp
 8004b18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b1c:	f7fb fd74 	bl	8000608 <__aeabi_dmul>
 8004b20:	4682      	mov	sl, r0
 8004b22:	468b      	mov	fp, r1
 8004b24:	f038 080f 	bics.w	r8, r8, #15
 8004b28:	d04f      	beq.n	8004bca <_strtod_l+0x522>
 8004b2a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004b2e:	dd22      	ble.n	8004b76 <_strtod_l+0x4ce>
 8004b30:	2500      	movs	r5, #0
 8004b32:	462e      	mov	r6, r5
 8004b34:	9507      	str	r5, [sp, #28]
 8004b36:	9505      	str	r5, [sp, #20]
 8004b38:	2322      	movs	r3, #34	; 0x22
 8004b3a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8004c54 <_strtod_l+0x5ac>
 8004b3e:	6023      	str	r3, [r4, #0]
 8004b40:	f04f 0a00 	mov.w	sl, #0
 8004b44:	9b07      	ldr	r3, [sp, #28]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f43f adf2 	beq.w	8004730 <_strtod_l+0x88>
 8004b4c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004b4e:	4620      	mov	r0, r4
 8004b50:	f002 f98a 	bl	8006e68 <_Bfree>
 8004b54:	9905      	ldr	r1, [sp, #20]
 8004b56:	4620      	mov	r0, r4
 8004b58:	f002 f986 	bl	8006e68 <_Bfree>
 8004b5c:	4631      	mov	r1, r6
 8004b5e:	4620      	mov	r0, r4
 8004b60:	f002 f982 	bl	8006e68 <_Bfree>
 8004b64:	9907      	ldr	r1, [sp, #28]
 8004b66:	4620      	mov	r0, r4
 8004b68:	f002 f97e 	bl	8006e68 <_Bfree>
 8004b6c:	4629      	mov	r1, r5
 8004b6e:	4620      	mov	r0, r4
 8004b70:	f002 f97a 	bl	8006e68 <_Bfree>
 8004b74:	e5dc      	b.n	8004730 <_strtod_l+0x88>
 8004b76:	4b36      	ldr	r3, [pc, #216]	; (8004c50 <_strtod_l+0x5a8>)
 8004b78:	9304      	str	r3, [sp, #16]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004b80:	4650      	mov	r0, sl
 8004b82:	4659      	mov	r1, fp
 8004b84:	4699      	mov	r9, r3
 8004b86:	f1b8 0f01 	cmp.w	r8, #1
 8004b8a:	dc21      	bgt.n	8004bd0 <_strtod_l+0x528>
 8004b8c:	b10b      	cbz	r3, 8004b92 <_strtod_l+0x4ea>
 8004b8e:	4682      	mov	sl, r0
 8004b90:	468b      	mov	fp, r1
 8004b92:	4b2f      	ldr	r3, [pc, #188]	; (8004c50 <_strtod_l+0x5a8>)
 8004b94:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004b98:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004b9c:	4652      	mov	r2, sl
 8004b9e:	465b      	mov	r3, fp
 8004ba0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004ba4:	f7fb fd30 	bl	8000608 <__aeabi_dmul>
 8004ba8:	4b2a      	ldr	r3, [pc, #168]	; (8004c54 <_strtod_l+0x5ac>)
 8004baa:	460a      	mov	r2, r1
 8004bac:	400b      	ands	r3, r1
 8004bae:	492a      	ldr	r1, [pc, #168]	; (8004c58 <_strtod_l+0x5b0>)
 8004bb0:	428b      	cmp	r3, r1
 8004bb2:	4682      	mov	sl, r0
 8004bb4:	d8bc      	bhi.n	8004b30 <_strtod_l+0x488>
 8004bb6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004bba:	428b      	cmp	r3, r1
 8004bbc:	bf86      	itte	hi
 8004bbe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8004c5c <_strtod_l+0x5b4>
 8004bc2:	f04f 3aff 	movhi.w	sl, #4294967295
 8004bc6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004bca:	2300      	movs	r3, #0
 8004bcc:	9304      	str	r3, [sp, #16]
 8004bce:	e084      	b.n	8004cda <_strtod_l+0x632>
 8004bd0:	f018 0f01 	tst.w	r8, #1
 8004bd4:	d005      	beq.n	8004be2 <_strtod_l+0x53a>
 8004bd6:	9b04      	ldr	r3, [sp, #16]
 8004bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bdc:	f7fb fd14 	bl	8000608 <__aeabi_dmul>
 8004be0:	2301      	movs	r3, #1
 8004be2:	9a04      	ldr	r2, [sp, #16]
 8004be4:	3208      	adds	r2, #8
 8004be6:	f109 0901 	add.w	r9, r9, #1
 8004bea:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004bee:	9204      	str	r2, [sp, #16]
 8004bf0:	e7c9      	b.n	8004b86 <_strtod_l+0x4de>
 8004bf2:	d0ea      	beq.n	8004bca <_strtod_l+0x522>
 8004bf4:	f1c8 0800 	rsb	r8, r8, #0
 8004bf8:	f018 020f 	ands.w	r2, r8, #15
 8004bfc:	d00a      	beq.n	8004c14 <_strtod_l+0x56c>
 8004bfe:	4b13      	ldr	r3, [pc, #76]	; (8004c4c <_strtod_l+0x5a4>)
 8004c00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c04:	4650      	mov	r0, sl
 8004c06:	4659      	mov	r1, fp
 8004c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0c:	f7fb fe26 	bl	800085c <__aeabi_ddiv>
 8004c10:	4682      	mov	sl, r0
 8004c12:	468b      	mov	fp, r1
 8004c14:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004c18:	d0d7      	beq.n	8004bca <_strtod_l+0x522>
 8004c1a:	f1b8 0f1f 	cmp.w	r8, #31
 8004c1e:	dd1f      	ble.n	8004c60 <_strtod_l+0x5b8>
 8004c20:	2500      	movs	r5, #0
 8004c22:	462e      	mov	r6, r5
 8004c24:	9507      	str	r5, [sp, #28]
 8004c26:	9505      	str	r5, [sp, #20]
 8004c28:	2322      	movs	r3, #34	; 0x22
 8004c2a:	f04f 0a00 	mov.w	sl, #0
 8004c2e:	f04f 0b00 	mov.w	fp, #0
 8004c32:	6023      	str	r3, [r4, #0]
 8004c34:	e786      	b.n	8004b44 <_strtod_l+0x49c>
 8004c36:	bf00      	nop
 8004c38:	08008869 	.word	0x08008869
 8004c3c:	080088ac 	.word	0x080088ac
 8004c40:	08008861 	.word	0x08008861
 8004c44:	080089ec 	.word	0x080089ec
 8004c48:	08008d00 	.word	0x08008d00
 8004c4c:	08008be0 	.word	0x08008be0
 8004c50:	08008bb8 	.word	0x08008bb8
 8004c54:	7ff00000 	.word	0x7ff00000
 8004c58:	7ca00000 	.word	0x7ca00000
 8004c5c:	7fefffff 	.word	0x7fefffff
 8004c60:	f018 0310 	ands.w	r3, r8, #16
 8004c64:	bf18      	it	ne
 8004c66:	236a      	movne	r3, #106	; 0x6a
 8004c68:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005018 <_strtod_l+0x970>
 8004c6c:	9304      	str	r3, [sp, #16]
 8004c6e:	4650      	mov	r0, sl
 8004c70:	4659      	mov	r1, fp
 8004c72:	2300      	movs	r3, #0
 8004c74:	f018 0f01 	tst.w	r8, #1
 8004c78:	d004      	beq.n	8004c84 <_strtod_l+0x5dc>
 8004c7a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004c7e:	f7fb fcc3 	bl	8000608 <__aeabi_dmul>
 8004c82:	2301      	movs	r3, #1
 8004c84:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004c88:	f109 0908 	add.w	r9, r9, #8
 8004c8c:	d1f2      	bne.n	8004c74 <_strtod_l+0x5cc>
 8004c8e:	b10b      	cbz	r3, 8004c94 <_strtod_l+0x5ec>
 8004c90:	4682      	mov	sl, r0
 8004c92:	468b      	mov	fp, r1
 8004c94:	9b04      	ldr	r3, [sp, #16]
 8004c96:	b1c3      	cbz	r3, 8004cca <_strtod_l+0x622>
 8004c98:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004c9c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	4659      	mov	r1, fp
 8004ca4:	dd11      	ble.n	8004cca <_strtod_l+0x622>
 8004ca6:	2b1f      	cmp	r3, #31
 8004ca8:	f340 8124 	ble.w	8004ef4 <_strtod_l+0x84c>
 8004cac:	2b34      	cmp	r3, #52	; 0x34
 8004cae:	bfde      	ittt	le
 8004cb0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004cb4:	f04f 33ff 	movle.w	r3, #4294967295
 8004cb8:	fa03 f202 	lslle.w	r2, r3, r2
 8004cbc:	f04f 0a00 	mov.w	sl, #0
 8004cc0:	bfcc      	ite	gt
 8004cc2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004cc6:	ea02 0b01 	andle.w	fp, r2, r1
 8004cca:	2200      	movs	r2, #0
 8004ccc:	2300      	movs	r3, #0
 8004cce:	4650      	mov	r0, sl
 8004cd0:	4659      	mov	r1, fp
 8004cd2:	f7fb ff01 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	d1a2      	bne.n	8004c20 <_strtod_l+0x578>
 8004cda:	9b07      	ldr	r3, [sp, #28]
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	9908      	ldr	r1, [sp, #32]
 8004ce0:	462b      	mov	r3, r5
 8004ce2:	463a      	mov	r2, r7
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	f002 f927 	bl	8006f38 <__s2b>
 8004cea:	9007      	str	r0, [sp, #28]
 8004cec:	2800      	cmp	r0, #0
 8004cee:	f43f af1f 	beq.w	8004b30 <_strtod_l+0x488>
 8004cf2:	9b05      	ldr	r3, [sp, #20]
 8004cf4:	1b9e      	subs	r6, r3, r6
 8004cf6:	9b06      	ldr	r3, [sp, #24]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bfb4      	ite	lt
 8004cfc:	4633      	movlt	r3, r6
 8004cfe:	2300      	movge	r3, #0
 8004d00:	930c      	str	r3, [sp, #48]	; 0x30
 8004d02:	9b06      	ldr	r3, [sp, #24]
 8004d04:	2500      	movs	r5, #0
 8004d06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004d0a:	9312      	str	r3, [sp, #72]	; 0x48
 8004d0c:	462e      	mov	r6, r5
 8004d0e:	9b07      	ldr	r3, [sp, #28]
 8004d10:	4620      	mov	r0, r4
 8004d12:	6859      	ldr	r1, [r3, #4]
 8004d14:	f002 f868 	bl	8006de8 <_Balloc>
 8004d18:	9005      	str	r0, [sp, #20]
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	f43f af0c 	beq.w	8004b38 <_strtod_l+0x490>
 8004d20:	9b07      	ldr	r3, [sp, #28]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	3202      	adds	r2, #2
 8004d26:	f103 010c 	add.w	r1, r3, #12
 8004d2a:	0092      	lsls	r2, r2, #2
 8004d2c:	300c      	adds	r0, #12
 8004d2e:	f002 f841 	bl	8006db4 <memcpy>
 8004d32:	ec4b ab10 	vmov	d0, sl, fp
 8004d36:	aa1a      	add	r2, sp, #104	; 0x68
 8004d38:	a919      	add	r1, sp, #100	; 0x64
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f002 fc42 	bl	80075c4 <__d2b>
 8004d40:	ec4b ab18 	vmov	d8, sl, fp
 8004d44:	9018      	str	r0, [sp, #96]	; 0x60
 8004d46:	2800      	cmp	r0, #0
 8004d48:	f43f aef6 	beq.w	8004b38 <_strtod_l+0x490>
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	4620      	mov	r0, r4
 8004d50:	f002 f98c 	bl	800706c <__i2b>
 8004d54:	4606      	mov	r6, r0
 8004d56:	2800      	cmp	r0, #0
 8004d58:	f43f aeee 	beq.w	8004b38 <_strtod_l+0x490>
 8004d5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d5e:	9904      	ldr	r1, [sp, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	bfab      	itete	ge
 8004d64:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8004d66:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8004d68:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8004d6a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8004d6e:	bfac      	ite	ge
 8004d70:	eb03 0902 	addge.w	r9, r3, r2
 8004d74:	1ad7      	sublt	r7, r2, r3
 8004d76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004d78:	eba3 0801 	sub.w	r8, r3, r1
 8004d7c:	4490      	add	r8, r2
 8004d7e:	4ba1      	ldr	r3, [pc, #644]	; (8005004 <_strtod_l+0x95c>)
 8004d80:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d84:	4598      	cmp	r8, r3
 8004d86:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004d8a:	f280 80c7 	bge.w	8004f1c <_strtod_l+0x874>
 8004d8e:	eba3 0308 	sub.w	r3, r3, r8
 8004d92:	2b1f      	cmp	r3, #31
 8004d94:	eba2 0203 	sub.w	r2, r2, r3
 8004d98:	f04f 0101 	mov.w	r1, #1
 8004d9c:	f300 80b1 	bgt.w	8004f02 <_strtod_l+0x85a>
 8004da0:	fa01 f303 	lsl.w	r3, r1, r3
 8004da4:	930d      	str	r3, [sp, #52]	; 0x34
 8004da6:	2300      	movs	r3, #0
 8004da8:	9308      	str	r3, [sp, #32]
 8004daa:	eb09 0802 	add.w	r8, r9, r2
 8004dae:	9b04      	ldr	r3, [sp, #16]
 8004db0:	45c1      	cmp	r9, r8
 8004db2:	4417      	add	r7, r2
 8004db4:	441f      	add	r7, r3
 8004db6:	464b      	mov	r3, r9
 8004db8:	bfa8      	it	ge
 8004dba:	4643      	movge	r3, r8
 8004dbc:	42bb      	cmp	r3, r7
 8004dbe:	bfa8      	it	ge
 8004dc0:	463b      	movge	r3, r7
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	bfc2      	ittt	gt
 8004dc6:	eba8 0803 	subgt.w	r8, r8, r3
 8004dca:	1aff      	subgt	r7, r7, r3
 8004dcc:	eba9 0903 	subgt.w	r9, r9, r3
 8004dd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	dd17      	ble.n	8004e06 <_strtod_l+0x75e>
 8004dd6:	4631      	mov	r1, r6
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4620      	mov	r0, r4
 8004ddc:	f002 fa06 	bl	80071ec <__pow5mult>
 8004de0:	4606      	mov	r6, r0
 8004de2:	2800      	cmp	r0, #0
 8004de4:	f43f aea8 	beq.w	8004b38 <_strtod_l+0x490>
 8004de8:	4601      	mov	r1, r0
 8004dea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004dec:	4620      	mov	r0, r4
 8004dee:	f002 f953 	bl	8007098 <__multiply>
 8004df2:	900b      	str	r0, [sp, #44]	; 0x2c
 8004df4:	2800      	cmp	r0, #0
 8004df6:	f43f ae9f 	beq.w	8004b38 <_strtod_l+0x490>
 8004dfa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f002 f833 	bl	8006e68 <_Bfree>
 8004e02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e04:	9318      	str	r3, [sp, #96]	; 0x60
 8004e06:	f1b8 0f00 	cmp.w	r8, #0
 8004e0a:	f300 808c 	bgt.w	8004f26 <_strtod_l+0x87e>
 8004e0e:	9b06      	ldr	r3, [sp, #24]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	dd08      	ble.n	8004e26 <_strtod_l+0x77e>
 8004e14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004e16:	9905      	ldr	r1, [sp, #20]
 8004e18:	4620      	mov	r0, r4
 8004e1a:	f002 f9e7 	bl	80071ec <__pow5mult>
 8004e1e:	9005      	str	r0, [sp, #20]
 8004e20:	2800      	cmp	r0, #0
 8004e22:	f43f ae89 	beq.w	8004b38 <_strtod_l+0x490>
 8004e26:	2f00      	cmp	r7, #0
 8004e28:	dd08      	ble.n	8004e3c <_strtod_l+0x794>
 8004e2a:	9905      	ldr	r1, [sp, #20]
 8004e2c:	463a      	mov	r2, r7
 8004e2e:	4620      	mov	r0, r4
 8004e30:	f002 fa36 	bl	80072a0 <__lshift>
 8004e34:	9005      	str	r0, [sp, #20]
 8004e36:	2800      	cmp	r0, #0
 8004e38:	f43f ae7e 	beq.w	8004b38 <_strtod_l+0x490>
 8004e3c:	f1b9 0f00 	cmp.w	r9, #0
 8004e40:	dd08      	ble.n	8004e54 <_strtod_l+0x7ac>
 8004e42:	4631      	mov	r1, r6
 8004e44:	464a      	mov	r2, r9
 8004e46:	4620      	mov	r0, r4
 8004e48:	f002 fa2a 	bl	80072a0 <__lshift>
 8004e4c:	4606      	mov	r6, r0
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	f43f ae72 	beq.w	8004b38 <_strtod_l+0x490>
 8004e54:	9a05      	ldr	r2, [sp, #20]
 8004e56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f002 faad 	bl	80073b8 <__mdiff>
 8004e5e:	4605      	mov	r5, r0
 8004e60:	2800      	cmp	r0, #0
 8004e62:	f43f ae69 	beq.w	8004b38 <_strtod_l+0x490>
 8004e66:	68c3      	ldr	r3, [r0, #12]
 8004e68:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60c3      	str	r3, [r0, #12]
 8004e6e:	4631      	mov	r1, r6
 8004e70:	f002 fa86 	bl	8007380 <__mcmp>
 8004e74:	2800      	cmp	r0, #0
 8004e76:	da60      	bge.n	8004f3a <_strtod_l+0x892>
 8004e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e7a:	ea53 030a 	orrs.w	r3, r3, sl
 8004e7e:	f040 8082 	bne.w	8004f86 <_strtod_l+0x8de>
 8004e82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d17d      	bne.n	8004f86 <_strtod_l+0x8de>
 8004e8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004e8e:	0d1b      	lsrs	r3, r3, #20
 8004e90:	051b      	lsls	r3, r3, #20
 8004e92:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004e96:	d976      	bls.n	8004f86 <_strtod_l+0x8de>
 8004e98:	696b      	ldr	r3, [r5, #20]
 8004e9a:	b913      	cbnz	r3, 8004ea2 <_strtod_l+0x7fa>
 8004e9c:	692b      	ldr	r3, [r5, #16]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	dd71      	ble.n	8004f86 <_strtod_l+0x8de>
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f002 f9fa 	bl	80072a0 <__lshift>
 8004eac:	4631      	mov	r1, r6
 8004eae:	4605      	mov	r5, r0
 8004eb0:	f002 fa66 	bl	8007380 <__mcmp>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	dd66      	ble.n	8004f86 <_strtod_l+0x8de>
 8004eb8:	9904      	ldr	r1, [sp, #16]
 8004eba:	4a53      	ldr	r2, [pc, #332]	; (8005008 <_strtod_l+0x960>)
 8004ebc:	465b      	mov	r3, fp
 8004ebe:	2900      	cmp	r1, #0
 8004ec0:	f000 8081 	beq.w	8004fc6 <_strtod_l+0x91e>
 8004ec4:	ea02 010b 	and.w	r1, r2, fp
 8004ec8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004ecc:	dc7b      	bgt.n	8004fc6 <_strtod_l+0x91e>
 8004ece:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004ed2:	f77f aea9 	ble.w	8004c28 <_strtod_l+0x580>
 8004ed6:	4b4d      	ldr	r3, [pc, #308]	; (800500c <_strtod_l+0x964>)
 8004ed8:	4650      	mov	r0, sl
 8004eda:	4659      	mov	r1, fp
 8004edc:	2200      	movs	r2, #0
 8004ede:	f7fb fb93 	bl	8000608 <__aeabi_dmul>
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4303      	orrs	r3, r0
 8004ee6:	bf08      	it	eq
 8004ee8:	2322      	moveq	r3, #34	; 0x22
 8004eea:	4682      	mov	sl, r0
 8004eec:	468b      	mov	fp, r1
 8004eee:	bf08      	it	eq
 8004ef0:	6023      	streq	r3, [r4, #0]
 8004ef2:	e62b      	b.n	8004b4c <_strtod_l+0x4a4>
 8004ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	ea03 0a0a 	and.w	sl, r3, sl
 8004f00:	e6e3      	b.n	8004cca <_strtod_l+0x622>
 8004f02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8004f06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8004f0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8004f0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8004f12:	fa01 f308 	lsl.w	r3, r1, r8
 8004f16:	9308      	str	r3, [sp, #32]
 8004f18:	910d      	str	r1, [sp, #52]	; 0x34
 8004f1a:	e746      	b.n	8004daa <_strtod_l+0x702>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	9308      	str	r3, [sp, #32]
 8004f20:	2301      	movs	r3, #1
 8004f22:	930d      	str	r3, [sp, #52]	; 0x34
 8004f24:	e741      	b.n	8004daa <_strtod_l+0x702>
 8004f26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004f28:	4642      	mov	r2, r8
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	f002 f9b8 	bl	80072a0 <__lshift>
 8004f30:	9018      	str	r0, [sp, #96]	; 0x60
 8004f32:	2800      	cmp	r0, #0
 8004f34:	f47f af6b 	bne.w	8004e0e <_strtod_l+0x766>
 8004f38:	e5fe      	b.n	8004b38 <_strtod_l+0x490>
 8004f3a:	465f      	mov	r7, fp
 8004f3c:	d16e      	bne.n	800501c <_strtod_l+0x974>
 8004f3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004f44:	b342      	cbz	r2, 8004f98 <_strtod_l+0x8f0>
 8004f46:	4a32      	ldr	r2, [pc, #200]	; (8005010 <_strtod_l+0x968>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d128      	bne.n	8004f9e <_strtod_l+0x8f6>
 8004f4c:	9b04      	ldr	r3, [sp, #16]
 8004f4e:	4651      	mov	r1, sl
 8004f50:	b1eb      	cbz	r3, 8004f8e <_strtod_l+0x8e6>
 8004f52:	4b2d      	ldr	r3, [pc, #180]	; (8005008 <_strtod_l+0x960>)
 8004f54:	403b      	ands	r3, r7
 8004f56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f5e:	d819      	bhi.n	8004f94 <_strtod_l+0x8ec>
 8004f60:	0d1b      	lsrs	r3, r3, #20
 8004f62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	4299      	cmp	r1, r3
 8004f6c:	d117      	bne.n	8004f9e <_strtod_l+0x8f6>
 8004f6e:	4b29      	ldr	r3, [pc, #164]	; (8005014 <_strtod_l+0x96c>)
 8004f70:	429f      	cmp	r7, r3
 8004f72:	d102      	bne.n	8004f7a <_strtod_l+0x8d2>
 8004f74:	3101      	adds	r1, #1
 8004f76:	f43f addf 	beq.w	8004b38 <_strtod_l+0x490>
 8004f7a:	4b23      	ldr	r3, [pc, #140]	; (8005008 <_strtod_l+0x960>)
 8004f7c:	403b      	ands	r3, r7
 8004f7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004f82:	f04f 0a00 	mov.w	sl, #0
 8004f86:	9b04      	ldr	r3, [sp, #16]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1a4      	bne.n	8004ed6 <_strtod_l+0x82e>
 8004f8c:	e5de      	b.n	8004b4c <_strtod_l+0x4a4>
 8004f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f92:	e7ea      	b.n	8004f6a <_strtod_l+0x8c2>
 8004f94:	4613      	mov	r3, r2
 8004f96:	e7e8      	b.n	8004f6a <_strtod_l+0x8c2>
 8004f98:	ea53 030a 	orrs.w	r3, r3, sl
 8004f9c:	d08c      	beq.n	8004eb8 <_strtod_l+0x810>
 8004f9e:	9b08      	ldr	r3, [sp, #32]
 8004fa0:	b1db      	cbz	r3, 8004fda <_strtod_l+0x932>
 8004fa2:	423b      	tst	r3, r7
 8004fa4:	d0ef      	beq.n	8004f86 <_strtod_l+0x8de>
 8004fa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fa8:	9a04      	ldr	r2, [sp, #16]
 8004faa:	4650      	mov	r0, sl
 8004fac:	4659      	mov	r1, fp
 8004fae:	b1c3      	cbz	r3, 8004fe2 <_strtod_l+0x93a>
 8004fb0:	f7ff fb5c 	bl	800466c <sulp>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	ec51 0b18 	vmov	r0, r1, d8
 8004fbc:	f7fb f96e 	bl	800029c <__adddf3>
 8004fc0:	4682      	mov	sl, r0
 8004fc2:	468b      	mov	fp, r1
 8004fc4:	e7df      	b.n	8004f86 <_strtod_l+0x8de>
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004fcc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004fd0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004fd4:	f04f 3aff 	mov.w	sl, #4294967295
 8004fd8:	e7d5      	b.n	8004f86 <_strtod_l+0x8de>
 8004fda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fdc:	ea13 0f0a 	tst.w	r3, sl
 8004fe0:	e7e0      	b.n	8004fa4 <_strtod_l+0x8fc>
 8004fe2:	f7ff fb43 	bl	800466c <sulp>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	ec51 0b18 	vmov	r0, r1, d8
 8004fee:	f7fb f953 	bl	8000298 <__aeabi_dsub>
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	4682      	mov	sl, r0
 8004ff8:	468b      	mov	fp, r1
 8004ffa:	f7fb fd6d 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ffe:	2800      	cmp	r0, #0
 8005000:	d0c1      	beq.n	8004f86 <_strtod_l+0x8de>
 8005002:	e611      	b.n	8004c28 <_strtod_l+0x580>
 8005004:	fffffc02 	.word	0xfffffc02
 8005008:	7ff00000 	.word	0x7ff00000
 800500c:	39500000 	.word	0x39500000
 8005010:	000fffff 	.word	0x000fffff
 8005014:	7fefffff 	.word	0x7fefffff
 8005018:	080088c0 	.word	0x080088c0
 800501c:	4631      	mov	r1, r6
 800501e:	4628      	mov	r0, r5
 8005020:	f002 fb2c 	bl	800767c <__ratio>
 8005024:	ec59 8b10 	vmov	r8, r9, d0
 8005028:	ee10 0a10 	vmov	r0, s0
 800502c:	2200      	movs	r2, #0
 800502e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005032:	4649      	mov	r1, r9
 8005034:	f7fb fd64 	bl	8000b00 <__aeabi_dcmple>
 8005038:	2800      	cmp	r0, #0
 800503a:	d07a      	beq.n	8005132 <_strtod_l+0xa8a>
 800503c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800503e:	2b00      	cmp	r3, #0
 8005040:	d04a      	beq.n	80050d8 <_strtod_l+0xa30>
 8005042:	4b95      	ldr	r3, [pc, #596]	; (8005298 <_strtod_l+0xbf0>)
 8005044:	2200      	movs	r2, #0
 8005046:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800504a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005298 <_strtod_l+0xbf0>
 800504e:	f04f 0800 	mov.w	r8, #0
 8005052:	4b92      	ldr	r3, [pc, #584]	; (800529c <_strtod_l+0xbf4>)
 8005054:	403b      	ands	r3, r7
 8005056:	930d      	str	r3, [sp, #52]	; 0x34
 8005058:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800505a:	4b91      	ldr	r3, [pc, #580]	; (80052a0 <_strtod_l+0xbf8>)
 800505c:	429a      	cmp	r2, r3
 800505e:	f040 80b0 	bne.w	80051c2 <_strtod_l+0xb1a>
 8005062:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005066:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800506a:	ec4b ab10 	vmov	d0, sl, fp
 800506e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005072:	f002 fa2b 	bl	80074cc <__ulp>
 8005076:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800507a:	ec53 2b10 	vmov	r2, r3, d0
 800507e:	f7fb fac3 	bl	8000608 <__aeabi_dmul>
 8005082:	4652      	mov	r2, sl
 8005084:	465b      	mov	r3, fp
 8005086:	f7fb f909 	bl	800029c <__adddf3>
 800508a:	460b      	mov	r3, r1
 800508c:	4983      	ldr	r1, [pc, #524]	; (800529c <_strtod_l+0xbf4>)
 800508e:	4a85      	ldr	r2, [pc, #532]	; (80052a4 <_strtod_l+0xbfc>)
 8005090:	4019      	ands	r1, r3
 8005092:	4291      	cmp	r1, r2
 8005094:	4682      	mov	sl, r0
 8005096:	d960      	bls.n	800515a <_strtod_l+0xab2>
 8005098:	ee18 3a90 	vmov	r3, s17
 800509c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d104      	bne.n	80050ae <_strtod_l+0xa06>
 80050a4:	ee18 3a10 	vmov	r3, s16
 80050a8:	3301      	adds	r3, #1
 80050aa:	f43f ad45 	beq.w	8004b38 <_strtod_l+0x490>
 80050ae:	f8df b200 	ldr.w	fp, [pc, #512]	; 80052b0 <_strtod_l+0xc08>
 80050b2:	f04f 3aff 	mov.w	sl, #4294967295
 80050b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80050b8:	4620      	mov	r0, r4
 80050ba:	f001 fed5 	bl	8006e68 <_Bfree>
 80050be:	9905      	ldr	r1, [sp, #20]
 80050c0:	4620      	mov	r0, r4
 80050c2:	f001 fed1 	bl	8006e68 <_Bfree>
 80050c6:	4631      	mov	r1, r6
 80050c8:	4620      	mov	r0, r4
 80050ca:	f001 fecd 	bl	8006e68 <_Bfree>
 80050ce:	4629      	mov	r1, r5
 80050d0:	4620      	mov	r0, r4
 80050d2:	f001 fec9 	bl	8006e68 <_Bfree>
 80050d6:	e61a      	b.n	8004d0e <_strtod_l+0x666>
 80050d8:	f1ba 0f00 	cmp.w	sl, #0
 80050dc:	d11b      	bne.n	8005116 <_strtod_l+0xa6e>
 80050de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80050e2:	b9f3      	cbnz	r3, 8005122 <_strtod_l+0xa7a>
 80050e4:	4b6c      	ldr	r3, [pc, #432]	; (8005298 <_strtod_l+0xbf0>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	4640      	mov	r0, r8
 80050ea:	4649      	mov	r1, r9
 80050ec:	f7fb fcfe 	bl	8000aec <__aeabi_dcmplt>
 80050f0:	b9d0      	cbnz	r0, 8005128 <_strtod_l+0xa80>
 80050f2:	4640      	mov	r0, r8
 80050f4:	4649      	mov	r1, r9
 80050f6:	4b6c      	ldr	r3, [pc, #432]	; (80052a8 <_strtod_l+0xc00>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	f7fb fa85 	bl	8000608 <__aeabi_dmul>
 80050fe:	4680      	mov	r8, r0
 8005100:	4689      	mov	r9, r1
 8005102:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005106:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800510a:	9315      	str	r3, [sp, #84]	; 0x54
 800510c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005110:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005114:	e79d      	b.n	8005052 <_strtod_l+0x9aa>
 8005116:	f1ba 0f01 	cmp.w	sl, #1
 800511a:	d102      	bne.n	8005122 <_strtod_l+0xa7a>
 800511c:	2f00      	cmp	r7, #0
 800511e:	f43f ad83 	beq.w	8004c28 <_strtod_l+0x580>
 8005122:	4b62      	ldr	r3, [pc, #392]	; (80052ac <_strtod_l+0xc04>)
 8005124:	2200      	movs	r2, #0
 8005126:	e78e      	b.n	8005046 <_strtod_l+0x99e>
 8005128:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80052a8 <_strtod_l+0xc00>
 800512c:	f04f 0800 	mov.w	r8, #0
 8005130:	e7e7      	b.n	8005102 <_strtod_l+0xa5a>
 8005132:	4b5d      	ldr	r3, [pc, #372]	; (80052a8 <_strtod_l+0xc00>)
 8005134:	4640      	mov	r0, r8
 8005136:	4649      	mov	r1, r9
 8005138:	2200      	movs	r2, #0
 800513a:	f7fb fa65 	bl	8000608 <__aeabi_dmul>
 800513e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005140:	4680      	mov	r8, r0
 8005142:	4689      	mov	r9, r1
 8005144:	b933      	cbnz	r3, 8005154 <_strtod_l+0xaac>
 8005146:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800514a:	900e      	str	r0, [sp, #56]	; 0x38
 800514c:	930f      	str	r3, [sp, #60]	; 0x3c
 800514e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005152:	e7dd      	b.n	8005110 <_strtod_l+0xa68>
 8005154:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8005158:	e7f9      	b.n	800514e <_strtod_l+0xaa6>
 800515a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800515e:	9b04      	ldr	r3, [sp, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1a8      	bne.n	80050b6 <_strtod_l+0xa0e>
 8005164:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005168:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800516a:	0d1b      	lsrs	r3, r3, #20
 800516c:	051b      	lsls	r3, r3, #20
 800516e:	429a      	cmp	r2, r3
 8005170:	d1a1      	bne.n	80050b6 <_strtod_l+0xa0e>
 8005172:	4640      	mov	r0, r8
 8005174:	4649      	mov	r1, r9
 8005176:	f7fb fddf 	bl	8000d38 <__aeabi_d2lz>
 800517a:	f7fb fa17 	bl	80005ac <__aeabi_l2d>
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
 8005182:	4640      	mov	r0, r8
 8005184:	4649      	mov	r1, r9
 8005186:	f7fb f887 	bl	8000298 <__aeabi_dsub>
 800518a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800518c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005190:	ea43 030a 	orr.w	r3, r3, sl
 8005194:	4313      	orrs	r3, r2
 8005196:	4680      	mov	r8, r0
 8005198:	4689      	mov	r9, r1
 800519a:	d055      	beq.n	8005248 <_strtod_l+0xba0>
 800519c:	a336      	add	r3, pc, #216	; (adr r3, 8005278 <_strtod_l+0xbd0>)
 800519e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a2:	f7fb fca3 	bl	8000aec <__aeabi_dcmplt>
 80051a6:	2800      	cmp	r0, #0
 80051a8:	f47f acd0 	bne.w	8004b4c <_strtod_l+0x4a4>
 80051ac:	a334      	add	r3, pc, #208	; (adr r3, 8005280 <_strtod_l+0xbd8>)
 80051ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b2:	4640      	mov	r0, r8
 80051b4:	4649      	mov	r1, r9
 80051b6:	f7fb fcb7 	bl	8000b28 <__aeabi_dcmpgt>
 80051ba:	2800      	cmp	r0, #0
 80051bc:	f43f af7b 	beq.w	80050b6 <_strtod_l+0xa0e>
 80051c0:	e4c4      	b.n	8004b4c <_strtod_l+0x4a4>
 80051c2:	9b04      	ldr	r3, [sp, #16]
 80051c4:	b333      	cbz	r3, 8005214 <_strtod_l+0xb6c>
 80051c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051c8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80051cc:	d822      	bhi.n	8005214 <_strtod_l+0xb6c>
 80051ce:	a32e      	add	r3, pc, #184	; (adr r3, 8005288 <_strtod_l+0xbe0>)
 80051d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d4:	4640      	mov	r0, r8
 80051d6:	4649      	mov	r1, r9
 80051d8:	f7fb fc92 	bl	8000b00 <__aeabi_dcmple>
 80051dc:	b1a0      	cbz	r0, 8005208 <_strtod_l+0xb60>
 80051de:	4649      	mov	r1, r9
 80051e0:	4640      	mov	r0, r8
 80051e2:	f7fb fce9 	bl	8000bb8 <__aeabi_d2uiz>
 80051e6:	2801      	cmp	r0, #1
 80051e8:	bf38      	it	cc
 80051ea:	2001      	movcc	r0, #1
 80051ec:	f7fb f992 	bl	8000514 <__aeabi_ui2d>
 80051f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051f2:	4680      	mov	r8, r0
 80051f4:	4689      	mov	r9, r1
 80051f6:	bb23      	cbnz	r3, 8005242 <_strtod_l+0xb9a>
 80051f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80051fc:	9010      	str	r0, [sp, #64]	; 0x40
 80051fe:	9311      	str	r3, [sp, #68]	; 0x44
 8005200:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005204:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800520a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800520c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005210:	1a9b      	subs	r3, r3, r2
 8005212:	9309      	str	r3, [sp, #36]	; 0x24
 8005214:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005218:	eeb0 0a48 	vmov.f32	s0, s16
 800521c:	eef0 0a68 	vmov.f32	s1, s17
 8005220:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005224:	f002 f952 	bl	80074cc <__ulp>
 8005228:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800522c:	ec53 2b10 	vmov	r2, r3, d0
 8005230:	f7fb f9ea 	bl	8000608 <__aeabi_dmul>
 8005234:	ec53 2b18 	vmov	r2, r3, d8
 8005238:	f7fb f830 	bl	800029c <__adddf3>
 800523c:	4682      	mov	sl, r0
 800523e:	468b      	mov	fp, r1
 8005240:	e78d      	b.n	800515e <_strtod_l+0xab6>
 8005242:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8005246:	e7db      	b.n	8005200 <_strtod_l+0xb58>
 8005248:	a311      	add	r3, pc, #68	; (adr r3, 8005290 <_strtod_l+0xbe8>)
 800524a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524e:	f7fb fc4d 	bl	8000aec <__aeabi_dcmplt>
 8005252:	e7b2      	b.n	80051ba <_strtod_l+0xb12>
 8005254:	2300      	movs	r3, #0
 8005256:	930a      	str	r3, [sp, #40]	; 0x28
 8005258:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800525a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	f7ff ba6b 	b.w	8004738 <_strtod_l+0x90>
 8005262:	2a65      	cmp	r2, #101	; 0x65
 8005264:	f43f ab5f 	beq.w	8004926 <_strtod_l+0x27e>
 8005268:	2a45      	cmp	r2, #69	; 0x45
 800526a:	f43f ab5c 	beq.w	8004926 <_strtod_l+0x27e>
 800526e:	2301      	movs	r3, #1
 8005270:	f7ff bb94 	b.w	800499c <_strtod_l+0x2f4>
 8005274:	f3af 8000 	nop.w
 8005278:	94a03595 	.word	0x94a03595
 800527c:	3fdfffff 	.word	0x3fdfffff
 8005280:	35afe535 	.word	0x35afe535
 8005284:	3fe00000 	.word	0x3fe00000
 8005288:	ffc00000 	.word	0xffc00000
 800528c:	41dfffff 	.word	0x41dfffff
 8005290:	94a03595 	.word	0x94a03595
 8005294:	3fcfffff 	.word	0x3fcfffff
 8005298:	3ff00000 	.word	0x3ff00000
 800529c:	7ff00000 	.word	0x7ff00000
 80052a0:	7fe00000 	.word	0x7fe00000
 80052a4:	7c9fffff 	.word	0x7c9fffff
 80052a8:	3fe00000 	.word	0x3fe00000
 80052ac:	bff00000 	.word	0xbff00000
 80052b0:	7fefffff 	.word	0x7fefffff

080052b4 <_strtod_r>:
 80052b4:	4b01      	ldr	r3, [pc, #4]	; (80052bc <_strtod_r+0x8>)
 80052b6:	f7ff b9f7 	b.w	80046a8 <_strtod_l>
 80052ba:	bf00      	nop
 80052bc:	2000007c 	.word	0x2000007c

080052c0 <strtod>:
 80052c0:	460a      	mov	r2, r1
 80052c2:	4601      	mov	r1, r0
 80052c4:	4802      	ldr	r0, [pc, #8]	; (80052d0 <strtod+0x10>)
 80052c6:	4b03      	ldr	r3, [pc, #12]	; (80052d4 <strtod+0x14>)
 80052c8:	6800      	ldr	r0, [r0, #0]
 80052ca:	f7ff b9ed 	b.w	80046a8 <_strtod_l>
 80052ce:	bf00      	nop
 80052d0:	20000014 	.word	0x20000014
 80052d4:	2000007c 	.word	0x2000007c

080052d8 <_strtol_l.constprop.0>:
 80052d8:	2b01      	cmp	r3, #1
 80052da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052de:	d001      	beq.n	80052e4 <_strtol_l.constprop.0+0xc>
 80052e0:	2b24      	cmp	r3, #36	; 0x24
 80052e2:	d906      	bls.n	80052f2 <_strtol_l.constprop.0+0x1a>
 80052e4:	f7fe f94e 	bl	8003584 <__errno>
 80052e8:	2316      	movs	r3, #22
 80052ea:	6003      	str	r3, [r0, #0]
 80052ec:	2000      	movs	r0, #0
 80052ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80053d8 <_strtol_l.constprop.0+0x100>
 80052f6:	460d      	mov	r5, r1
 80052f8:	462e      	mov	r6, r5
 80052fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80052fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005302:	f017 0708 	ands.w	r7, r7, #8
 8005306:	d1f7      	bne.n	80052f8 <_strtol_l.constprop.0+0x20>
 8005308:	2c2d      	cmp	r4, #45	; 0x2d
 800530a:	d132      	bne.n	8005372 <_strtol_l.constprop.0+0x9a>
 800530c:	782c      	ldrb	r4, [r5, #0]
 800530e:	2701      	movs	r7, #1
 8005310:	1cb5      	adds	r5, r6, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d05b      	beq.n	80053ce <_strtol_l.constprop.0+0xf6>
 8005316:	2b10      	cmp	r3, #16
 8005318:	d109      	bne.n	800532e <_strtol_l.constprop.0+0x56>
 800531a:	2c30      	cmp	r4, #48	; 0x30
 800531c:	d107      	bne.n	800532e <_strtol_l.constprop.0+0x56>
 800531e:	782c      	ldrb	r4, [r5, #0]
 8005320:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005324:	2c58      	cmp	r4, #88	; 0x58
 8005326:	d14d      	bne.n	80053c4 <_strtol_l.constprop.0+0xec>
 8005328:	786c      	ldrb	r4, [r5, #1]
 800532a:	2310      	movs	r3, #16
 800532c:	3502      	adds	r5, #2
 800532e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005332:	f108 38ff 	add.w	r8, r8, #4294967295
 8005336:	f04f 0c00 	mov.w	ip, #0
 800533a:	fbb8 f9f3 	udiv	r9, r8, r3
 800533e:	4666      	mov	r6, ip
 8005340:	fb03 8a19 	mls	sl, r3, r9, r8
 8005344:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005348:	f1be 0f09 	cmp.w	lr, #9
 800534c:	d816      	bhi.n	800537c <_strtol_l.constprop.0+0xa4>
 800534e:	4674      	mov	r4, lr
 8005350:	42a3      	cmp	r3, r4
 8005352:	dd24      	ble.n	800539e <_strtol_l.constprop.0+0xc6>
 8005354:	f1bc 0f00 	cmp.w	ip, #0
 8005358:	db1e      	blt.n	8005398 <_strtol_l.constprop.0+0xc0>
 800535a:	45b1      	cmp	r9, r6
 800535c:	d31c      	bcc.n	8005398 <_strtol_l.constprop.0+0xc0>
 800535e:	d101      	bne.n	8005364 <_strtol_l.constprop.0+0x8c>
 8005360:	45a2      	cmp	sl, r4
 8005362:	db19      	blt.n	8005398 <_strtol_l.constprop.0+0xc0>
 8005364:	fb06 4603 	mla	r6, r6, r3, r4
 8005368:	f04f 0c01 	mov.w	ip, #1
 800536c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005370:	e7e8      	b.n	8005344 <_strtol_l.constprop.0+0x6c>
 8005372:	2c2b      	cmp	r4, #43	; 0x2b
 8005374:	bf04      	itt	eq
 8005376:	782c      	ldrbeq	r4, [r5, #0]
 8005378:	1cb5      	addeq	r5, r6, #2
 800537a:	e7ca      	b.n	8005312 <_strtol_l.constprop.0+0x3a>
 800537c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005380:	f1be 0f19 	cmp.w	lr, #25
 8005384:	d801      	bhi.n	800538a <_strtol_l.constprop.0+0xb2>
 8005386:	3c37      	subs	r4, #55	; 0x37
 8005388:	e7e2      	b.n	8005350 <_strtol_l.constprop.0+0x78>
 800538a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800538e:	f1be 0f19 	cmp.w	lr, #25
 8005392:	d804      	bhi.n	800539e <_strtol_l.constprop.0+0xc6>
 8005394:	3c57      	subs	r4, #87	; 0x57
 8005396:	e7db      	b.n	8005350 <_strtol_l.constprop.0+0x78>
 8005398:	f04f 3cff 	mov.w	ip, #4294967295
 800539c:	e7e6      	b.n	800536c <_strtol_l.constprop.0+0x94>
 800539e:	f1bc 0f00 	cmp.w	ip, #0
 80053a2:	da05      	bge.n	80053b0 <_strtol_l.constprop.0+0xd8>
 80053a4:	2322      	movs	r3, #34	; 0x22
 80053a6:	6003      	str	r3, [r0, #0]
 80053a8:	4646      	mov	r6, r8
 80053aa:	b942      	cbnz	r2, 80053be <_strtol_l.constprop.0+0xe6>
 80053ac:	4630      	mov	r0, r6
 80053ae:	e79e      	b.n	80052ee <_strtol_l.constprop.0+0x16>
 80053b0:	b107      	cbz	r7, 80053b4 <_strtol_l.constprop.0+0xdc>
 80053b2:	4276      	negs	r6, r6
 80053b4:	2a00      	cmp	r2, #0
 80053b6:	d0f9      	beq.n	80053ac <_strtol_l.constprop.0+0xd4>
 80053b8:	f1bc 0f00 	cmp.w	ip, #0
 80053bc:	d000      	beq.n	80053c0 <_strtol_l.constprop.0+0xe8>
 80053be:	1e69      	subs	r1, r5, #1
 80053c0:	6011      	str	r1, [r2, #0]
 80053c2:	e7f3      	b.n	80053ac <_strtol_l.constprop.0+0xd4>
 80053c4:	2430      	movs	r4, #48	; 0x30
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1b1      	bne.n	800532e <_strtol_l.constprop.0+0x56>
 80053ca:	2308      	movs	r3, #8
 80053cc:	e7af      	b.n	800532e <_strtol_l.constprop.0+0x56>
 80053ce:	2c30      	cmp	r4, #48	; 0x30
 80053d0:	d0a5      	beq.n	800531e <_strtol_l.constprop.0+0x46>
 80053d2:	230a      	movs	r3, #10
 80053d4:	e7ab      	b.n	800532e <_strtol_l.constprop.0+0x56>
 80053d6:	bf00      	nop
 80053d8:	080088e9 	.word	0x080088e9

080053dc <_strtol_r>:
 80053dc:	f7ff bf7c 	b.w	80052d8 <_strtol_l.constprop.0>

080053e0 <strtol>:
 80053e0:	4613      	mov	r3, r2
 80053e2:	460a      	mov	r2, r1
 80053e4:	4601      	mov	r1, r0
 80053e6:	4802      	ldr	r0, [pc, #8]	; (80053f0 <strtol+0x10>)
 80053e8:	6800      	ldr	r0, [r0, #0]
 80053ea:	f7ff bf75 	b.w	80052d8 <_strtol_l.constprop.0>
 80053ee:	bf00      	nop
 80053f0:	20000014 	.word	0x20000014

080053f4 <__swbuf_r>:
 80053f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f6:	460e      	mov	r6, r1
 80053f8:	4614      	mov	r4, r2
 80053fa:	4605      	mov	r5, r0
 80053fc:	b118      	cbz	r0, 8005406 <__swbuf_r+0x12>
 80053fe:	6983      	ldr	r3, [r0, #24]
 8005400:	b90b      	cbnz	r3, 8005406 <__swbuf_r+0x12>
 8005402:	f001 f84d 	bl	80064a0 <__sinit>
 8005406:	4b21      	ldr	r3, [pc, #132]	; (800548c <__swbuf_r+0x98>)
 8005408:	429c      	cmp	r4, r3
 800540a:	d12b      	bne.n	8005464 <__swbuf_r+0x70>
 800540c:	686c      	ldr	r4, [r5, #4]
 800540e:	69a3      	ldr	r3, [r4, #24]
 8005410:	60a3      	str	r3, [r4, #8]
 8005412:	89a3      	ldrh	r3, [r4, #12]
 8005414:	071a      	lsls	r2, r3, #28
 8005416:	d52f      	bpl.n	8005478 <__swbuf_r+0x84>
 8005418:	6923      	ldr	r3, [r4, #16]
 800541a:	b36b      	cbz	r3, 8005478 <__swbuf_r+0x84>
 800541c:	6923      	ldr	r3, [r4, #16]
 800541e:	6820      	ldr	r0, [r4, #0]
 8005420:	1ac0      	subs	r0, r0, r3
 8005422:	6963      	ldr	r3, [r4, #20]
 8005424:	b2f6      	uxtb	r6, r6
 8005426:	4283      	cmp	r3, r0
 8005428:	4637      	mov	r7, r6
 800542a:	dc04      	bgt.n	8005436 <__swbuf_r+0x42>
 800542c:	4621      	mov	r1, r4
 800542e:	4628      	mov	r0, r5
 8005430:	f000 ffa2 	bl	8006378 <_fflush_r>
 8005434:	bb30      	cbnz	r0, 8005484 <__swbuf_r+0x90>
 8005436:	68a3      	ldr	r3, [r4, #8]
 8005438:	3b01      	subs	r3, #1
 800543a:	60a3      	str	r3, [r4, #8]
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	6022      	str	r2, [r4, #0]
 8005442:	701e      	strb	r6, [r3, #0]
 8005444:	6963      	ldr	r3, [r4, #20]
 8005446:	3001      	adds	r0, #1
 8005448:	4283      	cmp	r3, r0
 800544a:	d004      	beq.n	8005456 <__swbuf_r+0x62>
 800544c:	89a3      	ldrh	r3, [r4, #12]
 800544e:	07db      	lsls	r3, r3, #31
 8005450:	d506      	bpl.n	8005460 <__swbuf_r+0x6c>
 8005452:	2e0a      	cmp	r6, #10
 8005454:	d104      	bne.n	8005460 <__swbuf_r+0x6c>
 8005456:	4621      	mov	r1, r4
 8005458:	4628      	mov	r0, r5
 800545a:	f000 ff8d 	bl	8006378 <_fflush_r>
 800545e:	b988      	cbnz	r0, 8005484 <__swbuf_r+0x90>
 8005460:	4638      	mov	r0, r7
 8005462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005464:	4b0a      	ldr	r3, [pc, #40]	; (8005490 <__swbuf_r+0x9c>)
 8005466:	429c      	cmp	r4, r3
 8005468:	d101      	bne.n	800546e <__swbuf_r+0x7a>
 800546a:	68ac      	ldr	r4, [r5, #8]
 800546c:	e7cf      	b.n	800540e <__swbuf_r+0x1a>
 800546e:	4b09      	ldr	r3, [pc, #36]	; (8005494 <__swbuf_r+0xa0>)
 8005470:	429c      	cmp	r4, r3
 8005472:	bf08      	it	eq
 8005474:	68ec      	ldreq	r4, [r5, #12]
 8005476:	e7ca      	b.n	800540e <__swbuf_r+0x1a>
 8005478:	4621      	mov	r1, r4
 800547a:	4628      	mov	r0, r5
 800547c:	f000 f80c 	bl	8005498 <__swsetup_r>
 8005480:	2800      	cmp	r0, #0
 8005482:	d0cb      	beq.n	800541c <__swbuf_r+0x28>
 8005484:	f04f 37ff 	mov.w	r7, #4294967295
 8005488:	e7ea      	b.n	8005460 <__swbuf_r+0x6c>
 800548a:	bf00      	nop
 800548c:	08008a9c 	.word	0x08008a9c
 8005490:	08008abc 	.word	0x08008abc
 8005494:	08008a7c 	.word	0x08008a7c

08005498 <__swsetup_r>:
 8005498:	4b32      	ldr	r3, [pc, #200]	; (8005564 <__swsetup_r+0xcc>)
 800549a:	b570      	push	{r4, r5, r6, lr}
 800549c:	681d      	ldr	r5, [r3, #0]
 800549e:	4606      	mov	r6, r0
 80054a0:	460c      	mov	r4, r1
 80054a2:	b125      	cbz	r5, 80054ae <__swsetup_r+0x16>
 80054a4:	69ab      	ldr	r3, [r5, #24]
 80054a6:	b913      	cbnz	r3, 80054ae <__swsetup_r+0x16>
 80054a8:	4628      	mov	r0, r5
 80054aa:	f000 fff9 	bl	80064a0 <__sinit>
 80054ae:	4b2e      	ldr	r3, [pc, #184]	; (8005568 <__swsetup_r+0xd0>)
 80054b0:	429c      	cmp	r4, r3
 80054b2:	d10f      	bne.n	80054d4 <__swsetup_r+0x3c>
 80054b4:	686c      	ldr	r4, [r5, #4]
 80054b6:	89a3      	ldrh	r3, [r4, #12]
 80054b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054bc:	0719      	lsls	r1, r3, #28
 80054be:	d42c      	bmi.n	800551a <__swsetup_r+0x82>
 80054c0:	06dd      	lsls	r5, r3, #27
 80054c2:	d411      	bmi.n	80054e8 <__swsetup_r+0x50>
 80054c4:	2309      	movs	r3, #9
 80054c6:	6033      	str	r3, [r6, #0]
 80054c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80054cc:	81a3      	strh	r3, [r4, #12]
 80054ce:	f04f 30ff 	mov.w	r0, #4294967295
 80054d2:	e03e      	b.n	8005552 <__swsetup_r+0xba>
 80054d4:	4b25      	ldr	r3, [pc, #148]	; (800556c <__swsetup_r+0xd4>)
 80054d6:	429c      	cmp	r4, r3
 80054d8:	d101      	bne.n	80054de <__swsetup_r+0x46>
 80054da:	68ac      	ldr	r4, [r5, #8]
 80054dc:	e7eb      	b.n	80054b6 <__swsetup_r+0x1e>
 80054de:	4b24      	ldr	r3, [pc, #144]	; (8005570 <__swsetup_r+0xd8>)
 80054e0:	429c      	cmp	r4, r3
 80054e2:	bf08      	it	eq
 80054e4:	68ec      	ldreq	r4, [r5, #12]
 80054e6:	e7e6      	b.n	80054b6 <__swsetup_r+0x1e>
 80054e8:	0758      	lsls	r0, r3, #29
 80054ea:	d512      	bpl.n	8005512 <__swsetup_r+0x7a>
 80054ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054ee:	b141      	cbz	r1, 8005502 <__swsetup_r+0x6a>
 80054f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054f4:	4299      	cmp	r1, r3
 80054f6:	d002      	beq.n	80054fe <__swsetup_r+0x66>
 80054f8:	4630      	mov	r0, r6
 80054fa:	f7fe f899 	bl	8003630 <_free_r>
 80054fe:	2300      	movs	r3, #0
 8005500:	6363      	str	r3, [r4, #52]	; 0x34
 8005502:	89a3      	ldrh	r3, [r4, #12]
 8005504:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005508:	81a3      	strh	r3, [r4, #12]
 800550a:	2300      	movs	r3, #0
 800550c:	6063      	str	r3, [r4, #4]
 800550e:	6923      	ldr	r3, [r4, #16]
 8005510:	6023      	str	r3, [r4, #0]
 8005512:	89a3      	ldrh	r3, [r4, #12]
 8005514:	f043 0308 	orr.w	r3, r3, #8
 8005518:	81a3      	strh	r3, [r4, #12]
 800551a:	6923      	ldr	r3, [r4, #16]
 800551c:	b94b      	cbnz	r3, 8005532 <__swsetup_r+0x9a>
 800551e:	89a3      	ldrh	r3, [r4, #12]
 8005520:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005528:	d003      	beq.n	8005532 <__swsetup_r+0x9a>
 800552a:	4621      	mov	r1, r4
 800552c:	4630      	mov	r0, r6
 800552e:	f001 fbef 	bl	8006d10 <__smakebuf_r>
 8005532:	89a0      	ldrh	r0, [r4, #12]
 8005534:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005538:	f010 0301 	ands.w	r3, r0, #1
 800553c:	d00a      	beq.n	8005554 <__swsetup_r+0xbc>
 800553e:	2300      	movs	r3, #0
 8005540:	60a3      	str	r3, [r4, #8]
 8005542:	6963      	ldr	r3, [r4, #20]
 8005544:	425b      	negs	r3, r3
 8005546:	61a3      	str	r3, [r4, #24]
 8005548:	6923      	ldr	r3, [r4, #16]
 800554a:	b943      	cbnz	r3, 800555e <__swsetup_r+0xc6>
 800554c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005550:	d1ba      	bne.n	80054c8 <__swsetup_r+0x30>
 8005552:	bd70      	pop	{r4, r5, r6, pc}
 8005554:	0781      	lsls	r1, r0, #30
 8005556:	bf58      	it	pl
 8005558:	6963      	ldrpl	r3, [r4, #20]
 800555a:	60a3      	str	r3, [r4, #8]
 800555c:	e7f4      	b.n	8005548 <__swsetup_r+0xb0>
 800555e:	2000      	movs	r0, #0
 8005560:	e7f7      	b.n	8005552 <__swsetup_r+0xba>
 8005562:	bf00      	nop
 8005564:	20000014 	.word	0x20000014
 8005568:	08008a9c 	.word	0x08008a9c
 800556c:	08008abc 	.word	0x08008abc
 8005570:	08008a7c 	.word	0x08008a7c

08005574 <quorem>:
 8005574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005578:	6903      	ldr	r3, [r0, #16]
 800557a:	690c      	ldr	r4, [r1, #16]
 800557c:	42a3      	cmp	r3, r4
 800557e:	4607      	mov	r7, r0
 8005580:	f2c0 8081 	blt.w	8005686 <quorem+0x112>
 8005584:	3c01      	subs	r4, #1
 8005586:	f101 0814 	add.w	r8, r1, #20
 800558a:	f100 0514 	add.w	r5, r0, #20
 800558e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005592:	9301      	str	r3, [sp, #4]
 8005594:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005598:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800559c:	3301      	adds	r3, #1
 800559e:	429a      	cmp	r2, r3
 80055a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80055a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80055ac:	d331      	bcc.n	8005612 <quorem+0x9e>
 80055ae:	f04f 0e00 	mov.w	lr, #0
 80055b2:	4640      	mov	r0, r8
 80055b4:	46ac      	mov	ip, r5
 80055b6:	46f2      	mov	sl, lr
 80055b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80055bc:	b293      	uxth	r3, r2
 80055be:	fb06 e303 	mla	r3, r6, r3, lr
 80055c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	ebaa 0303 	sub.w	r3, sl, r3
 80055cc:	f8dc a000 	ldr.w	sl, [ip]
 80055d0:	0c12      	lsrs	r2, r2, #16
 80055d2:	fa13 f38a 	uxtah	r3, r3, sl
 80055d6:	fb06 e202 	mla	r2, r6, r2, lr
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	9b00      	ldr	r3, [sp, #0]
 80055de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055e2:	b292      	uxth	r2, r2
 80055e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80055e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055ec:	f8bd 3000 	ldrh.w	r3, [sp]
 80055f0:	4581      	cmp	r9, r0
 80055f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055f6:	f84c 3b04 	str.w	r3, [ip], #4
 80055fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80055fe:	d2db      	bcs.n	80055b8 <quorem+0x44>
 8005600:	f855 300b 	ldr.w	r3, [r5, fp]
 8005604:	b92b      	cbnz	r3, 8005612 <quorem+0x9e>
 8005606:	9b01      	ldr	r3, [sp, #4]
 8005608:	3b04      	subs	r3, #4
 800560a:	429d      	cmp	r5, r3
 800560c:	461a      	mov	r2, r3
 800560e:	d32e      	bcc.n	800566e <quorem+0xfa>
 8005610:	613c      	str	r4, [r7, #16]
 8005612:	4638      	mov	r0, r7
 8005614:	f001 feb4 	bl	8007380 <__mcmp>
 8005618:	2800      	cmp	r0, #0
 800561a:	db24      	blt.n	8005666 <quorem+0xf2>
 800561c:	3601      	adds	r6, #1
 800561e:	4628      	mov	r0, r5
 8005620:	f04f 0c00 	mov.w	ip, #0
 8005624:	f858 2b04 	ldr.w	r2, [r8], #4
 8005628:	f8d0 e000 	ldr.w	lr, [r0]
 800562c:	b293      	uxth	r3, r2
 800562e:	ebac 0303 	sub.w	r3, ip, r3
 8005632:	0c12      	lsrs	r2, r2, #16
 8005634:	fa13 f38e 	uxtah	r3, r3, lr
 8005638:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800563c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005640:	b29b      	uxth	r3, r3
 8005642:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005646:	45c1      	cmp	r9, r8
 8005648:	f840 3b04 	str.w	r3, [r0], #4
 800564c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005650:	d2e8      	bcs.n	8005624 <quorem+0xb0>
 8005652:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005656:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800565a:	b922      	cbnz	r2, 8005666 <quorem+0xf2>
 800565c:	3b04      	subs	r3, #4
 800565e:	429d      	cmp	r5, r3
 8005660:	461a      	mov	r2, r3
 8005662:	d30a      	bcc.n	800567a <quorem+0x106>
 8005664:	613c      	str	r4, [r7, #16]
 8005666:	4630      	mov	r0, r6
 8005668:	b003      	add	sp, #12
 800566a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800566e:	6812      	ldr	r2, [r2, #0]
 8005670:	3b04      	subs	r3, #4
 8005672:	2a00      	cmp	r2, #0
 8005674:	d1cc      	bne.n	8005610 <quorem+0x9c>
 8005676:	3c01      	subs	r4, #1
 8005678:	e7c7      	b.n	800560a <quorem+0x96>
 800567a:	6812      	ldr	r2, [r2, #0]
 800567c:	3b04      	subs	r3, #4
 800567e:	2a00      	cmp	r2, #0
 8005680:	d1f0      	bne.n	8005664 <quorem+0xf0>
 8005682:	3c01      	subs	r4, #1
 8005684:	e7eb      	b.n	800565e <quorem+0xea>
 8005686:	2000      	movs	r0, #0
 8005688:	e7ee      	b.n	8005668 <quorem+0xf4>
 800568a:	0000      	movs	r0, r0
 800568c:	0000      	movs	r0, r0
	...

08005690 <_dtoa_r>:
 8005690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005694:	ed2d 8b04 	vpush	{d8-d9}
 8005698:	ec57 6b10 	vmov	r6, r7, d0
 800569c:	b093      	sub	sp, #76	; 0x4c
 800569e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80056a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80056a4:	9106      	str	r1, [sp, #24]
 80056a6:	ee10 aa10 	vmov	sl, s0
 80056aa:	4604      	mov	r4, r0
 80056ac:	9209      	str	r2, [sp, #36]	; 0x24
 80056ae:	930c      	str	r3, [sp, #48]	; 0x30
 80056b0:	46bb      	mov	fp, r7
 80056b2:	b975      	cbnz	r5, 80056d2 <_dtoa_r+0x42>
 80056b4:	2010      	movs	r0, #16
 80056b6:	f7fd ffa3 	bl	8003600 <malloc>
 80056ba:	4602      	mov	r2, r0
 80056bc:	6260      	str	r0, [r4, #36]	; 0x24
 80056be:	b920      	cbnz	r0, 80056ca <_dtoa_r+0x3a>
 80056c0:	4ba7      	ldr	r3, [pc, #668]	; (8005960 <_dtoa_r+0x2d0>)
 80056c2:	21ea      	movs	r1, #234	; 0xea
 80056c4:	48a7      	ldr	r0, [pc, #668]	; (8005964 <_dtoa_r+0x2d4>)
 80056c6:	f002 fb99 	bl	8007dfc <__assert_func>
 80056ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80056ce:	6005      	str	r5, [r0, #0]
 80056d0:	60c5      	str	r5, [r0, #12]
 80056d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056d4:	6819      	ldr	r1, [r3, #0]
 80056d6:	b151      	cbz	r1, 80056ee <_dtoa_r+0x5e>
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	604a      	str	r2, [r1, #4]
 80056dc:	2301      	movs	r3, #1
 80056de:	4093      	lsls	r3, r2
 80056e0:	608b      	str	r3, [r1, #8]
 80056e2:	4620      	mov	r0, r4
 80056e4:	f001 fbc0 	bl	8006e68 <_Bfree>
 80056e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	1e3b      	subs	r3, r7, #0
 80056f0:	bfaa      	itet	ge
 80056f2:	2300      	movge	r3, #0
 80056f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80056f8:	f8c8 3000 	strge.w	r3, [r8]
 80056fc:	4b9a      	ldr	r3, [pc, #616]	; (8005968 <_dtoa_r+0x2d8>)
 80056fe:	bfbc      	itt	lt
 8005700:	2201      	movlt	r2, #1
 8005702:	f8c8 2000 	strlt.w	r2, [r8]
 8005706:	ea33 030b 	bics.w	r3, r3, fp
 800570a:	d11b      	bne.n	8005744 <_dtoa_r+0xb4>
 800570c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800570e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005718:	4333      	orrs	r3, r6
 800571a:	f000 8592 	beq.w	8006242 <_dtoa_r+0xbb2>
 800571e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005720:	b963      	cbnz	r3, 800573c <_dtoa_r+0xac>
 8005722:	4b92      	ldr	r3, [pc, #584]	; (800596c <_dtoa_r+0x2dc>)
 8005724:	e022      	b.n	800576c <_dtoa_r+0xdc>
 8005726:	4b92      	ldr	r3, [pc, #584]	; (8005970 <_dtoa_r+0x2e0>)
 8005728:	9301      	str	r3, [sp, #4]
 800572a:	3308      	adds	r3, #8
 800572c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	9801      	ldr	r0, [sp, #4]
 8005732:	b013      	add	sp, #76	; 0x4c
 8005734:	ecbd 8b04 	vpop	{d8-d9}
 8005738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573c:	4b8b      	ldr	r3, [pc, #556]	; (800596c <_dtoa_r+0x2dc>)
 800573e:	9301      	str	r3, [sp, #4]
 8005740:	3303      	adds	r3, #3
 8005742:	e7f3      	b.n	800572c <_dtoa_r+0x9c>
 8005744:	2200      	movs	r2, #0
 8005746:	2300      	movs	r3, #0
 8005748:	4650      	mov	r0, sl
 800574a:	4659      	mov	r1, fp
 800574c:	f7fb f9c4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005750:	ec4b ab19 	vmov	d9, sl, fp
 8005754:	4680      	mov	r8, r0
 8005756:	b158      	cbz	r0, 8005770 <_dtoa_r+0xe0>
 8005758:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800575a:	2301      	movs	r3, #1
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 856b 	beq.w	800623c <_dtoa_r+0xbac>
 8005766:	4883      	ldr	r0, [pc, #524]	; (8005974 <_dtoa_r+0x2e4>)
 8005768:	6018      	str	r0, [r3, #0]
 800576a:	1e43      	subs	r3, r0, #1
 800576c:	9301      	str	r3, [sp, #4]
 800576e:	e7df      	b.n	8005730 <_dtoa_r+0xa0>
 8005770:	ec4b ab10 	vmov	d0, sl, fp
 8005774:	aa10      	add	r2, sp, #64	; 0x40
 8005776:	a911      	add	r1, sp, #68	; 0x44
 8005778:	4620      	mov	r0, r4
 800577a:	f001 ff23 	bl	80075c4 <__d2b>
 800577e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005782:	ee08 0a10 	vmov	s16, r0
 8005786:	2d00      	cmp	r5, #0
 8005788:	f000 8084 	beq.w	8005894 <_dtoa_r+0x204>
 800578c:	ee19 3a90 	vmov	r3, s19
 8005790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005794:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005798:	4656      	mov	r6, sl
 800579a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800579e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80057a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80057a6:	4b74      	ldr	r3, [pc, #464]	; (8005978 <_dtoa_r+0x2e8>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	4630      	mov	r0, r6
 80057ac:	4639      	mov	r1, r7
 80057ae:	f7fa fd73 	bl	8000298 <__aeabi_dsub>
 80057b2:	a365      	add	r3, pc, #404	; (adr r3, 8005948 <_dtoa_r+0x2b8>)
 80057b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b8:	f7fa ff26 	bl	8000608 <__aeabi_dmul>
 80057bc:	a364      	add	r3, pc, #400	; (adr r3, 8005950 <_dtoa_r+0x2c0>)
 80057be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c2:	f7fa fd6b 	bl	800029c <__adddf3>
 80057c6:	4606      	mov	r6, r0
 80057c8:	4628      	mov	r0, r5
 80057ca:	460f      	mov	r7, r1
 80057cc:	f7fa feb2 	bl	8000534 <__aeabi_i2d>
 80057d0:	a361      	add	r3, pc, #388	; (adr r3, 8005958 <_dtoa_r+0x2c8>)
 80057d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d6:	f7fa ff17 	bl	8000608 <__aeabi_dmul>
 80057da:	4602      	mov	r2, r0
 80057dc:	460b      	mov	r3, r1
 80057de:	4630      	mov	r0, r6
 80057e0:	4639      	mov	r1, r7
 80057e2:	f7fa fd5b 	bl	800029c <__adddf3>
 80057e6:	4606      	mov	r6, r0
 80057e8:	460f      	mov	r7, r1
 80057ea:	f7fb f9bd 	bl	8000b68 <__aeabi_d2iz>
 80057ee:	2200      	movs	r2, #0
 80057f0:	9000      	str	r0, [sp, #0]
 80057f2:	2300      	movs	r3, #0
 80057f4:	4630      	mov	r0, r6
 80057f6:	4639      	mov	r1, r7
 80057f8:	f7fb f978 	bl	8000aec <__aeabi_dcmplt>
 80057fc:	b150      	cbz	r0, 8005814 <_dtoa_r+0x184>
 80057fe:	9800      	ldr	r0, [sp, #0]
 8005800:	f7fa fe98 	bl	8000534 <__aeabi_i2d>
 8005804:	4632      	mov	r2, r6
 8005806:	463b      	mov	r3, r7
 8005808:	f7fb f966 	bl	8000ad8 <__aeabi_dcmpeq>
 800580c:	b910      	cbnz	r0, 8005814 <_dtoa_r+0x184>
 800580e:	9b00      	ldr	r3, [sp, #0]
 8005810:	3b01      	subs	r3, #1
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	9b00      	ldr	r3, [sp, #0]
 8005816:	2b16      	cmp	r3, #22
 8005818:	d85a      	bhi.n	80058d0 <_dtoa_r+0x240>
 800581a:	9a00      	ldr	r2, [sp, #0]
 800581c:	4b57      	ldr	r3, [pc, #348]	; (800597c <_dtoa_r+0x2ec>)
 800581e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005826:	ec51 0b19 	vmov	r0, r1, d9
 800582a:	f7fb f95f 	bl	8000aec <__aeabi_dcmplt>
 800582e:	2800      	cmp	r0, #0
 8005830:	d050      	beq.n	80058d4 <_dtoa_r+0x244>
 8005832:	9b00      	ldr	r3, [sp, #0]
 8005834:	3b01      	subs	r3, #1
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	2300      	movs	r3, #0
 800583a:	930b      	str	r3, [sp, #44]	; 0x2c
 800583c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800583e:	1b5d      	subs	r5, r3, r5
 8005840:	1e6b      	subs	r3, r5, #1
 8005842:	9305      	str	r3, [sp, #20]
 8005844:	bf45      	ittet	mi
 8005846:	f1c5 0301 	rsbmi	r3, r5, #1
 800584a:	9304      	strmi	r3, [sp, #16]
 800584c:	2300      	movpl	r3, #0
 800584e:	2300      	movmi	r3, #0
 8005850:	bf4c      	ite	mi
 8005852:	9305      	strmi	r3, [sp, #20]
 8005854:	9304      	strpl	r3, [sp, #16]
 8005856:	9b00      	ldr	r3, [sp, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	db3d      	blt.n	80058d8 <_dtoa_r+0x248>
 800585c:	9b05      	ldr	r3, [sp, #20]
 800585e:	9a00      	ldr	r2, [sp, #0]
 8005860:	920a      	str	r2, [sp, #40]	; 0x28
 8005862:	4413      	add	r3, r2
 8005864:	9305      	str	r3, [sp, #20]
 8005866:	2300      	movs	r3, #0
 8005868:	9307      	str	r3, [sp, #28]
 800586a:	9b06      	ldr	r3, [sp, #24]
 800586c:	2b09      	cmp	r3, #9
 800586e:	f200 8089 	bhi.w	8005984 <_dtoa_r+0x2f4>
 8005872:	2b05      	cmp	r3, #5
 8005874:	bfc4      	itt	gt
 8005876:	3b04      	subgt	r3, #4
 8005878:	9306      	strgt	r3, [sp, #24]
 800587a:	9b06      	ldr	r3, [sp, #24]
 800587c:	f1a3 0302 	sub.w	r3, r3, #2
 8005880:	bfcc      	ite	gt
 8005882:	2500      	movgt	r5, #0
 8005884:	2501      	movle	r5, #1
 8005886:	2b03      	cmp	r3, #3
 8005888:	f200 8087 	bhi.w	800599a <_dtoa_r+0x30a>
 800588c:	e8df f003 	tbb	[pc, r3]
 8005890:	59383a2d 	.word	0x59383a2d
 8005894:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005898:	441d      	add	r5, r3
 800589a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800589e:	2b20      	cmp	r3, #32
 80058a0:	bfc1      	itttt	gt
 80058a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80058a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80058aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80058ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80058b2:	bfda      	itte	le
 80058b4:	f1c3 0320 	rsble	r3, r3, #32
 80058b8:	fa06 f003 	lslle.w	r0, r6, r3
 80058bc:	4318      	orrgt	r0, r3
 80058be:	f7fa fe29 	bl	8000514 <__aeabi_ui2d>
 80058c2:	2301      	movs	r3, #1
 80058c4:	4606      	mov	r6, r0
 80058c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80058ca:	3d01      	subs	r5, #1
 80058cc:	930e      	str	r3, [sp, #56]	; 0x38
 80058ce:	e76a      	b.n	80057a6 <_dtoa_r+0x116>
 80058d0:	2301      	movs	r3, #1
 80058d2:	e7b2      	b.n	800583a <_dtoa_r+0x1aa>
 80058d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80058d6:	e7b1      	b.n	800583c <_dtoa_r+0x1ac>
 80058d8:	9b04      	ldr	r3, [sp, #16]
 80058da:	9a00      	ldr	r2, [sp, #0]
 80058dc:	1a9b      	subs	r3, r3, r2
 80058de:	9304      	str	r3, [sp, #16]
 80058e0:	4253      	negs	r3, r2
 80058e2:	9307      	str	r3, [sp, #28]
 80058e4:	2300      	movs	r3, #0
 80058e6:	930a      	str	r3, [sp, #40]	; 0x28
 80058e8:	e7bf      	b.n	800586a <_dtoa_r+0x1da>
 80058ea:	2300      	movs	r3, #0
 80058ec:	9308      	str	r3, [sp, #32]
 80058ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	dc55      	bgt.n	80059a0 <_dtoa_r+0x310>
 80058f4:	2301      	movs	r3, #1
 80058f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80058fa:	461a      	mov	r2, r3
 80058fc:	9209      	str	r2, [sp, #36]	; 0x24
 80058fe:	e00c      	b.n	800591a <_dtoa_r+0x28a>
 8005900:	2301      	movs	r3, #1
 8005902:	e7f3      	b.n	80058ec <_dtoa_r+0x25c>
 8005904:	2300      	movs	r3, #0
 8005906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005908:	9308      	str	r3, [sp, #32]
 800590a:	9b00      	ldr	r3, [sp, #0]
 800590c:	4413      	add	r3, r2
 800590e:	9302      	str	r3, [sp, #8]
 8005910:	3301      	adds	r3, #1
 8005912:	2b01      	cmp	r3, #1
 8005914:	9303      	str	r3, [sp, #12]
 8005916:	bfb8      	it	lt
 8005918:	2301      	movlt	r3, #1
 800591a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800591c:	2200      	movs	r2, #0
 800591e:	6042      	str	r2, [r0, #4]
 8005920:	2204      	movs	r2, #4
 8005922:	f102 0614 	add.w	r6, r2, #20
 8005926:	429e      	cmp	r6, r3
 8005928:	6841      	ldr	r1, [r0, #4]
 800592a:	d93d      	bls.n	80059a8 <_dtoa_r+0x318>
 800592c:	4620      	mov	r0, r4
 800592e:	f001 fa5b 	bl	8006de8 <_Balloc>
 8005932:	9001      	str	r0, [sp, #4]
 8005934:	2800      	cmp	r0, #0
 8005936:	d13b      	bne.n	80059b0 <_dtoa_r+0x320>
 8005938:	4b11      	ldr	r3, [pc, #68]	; (8005980 <_dtoa_r+0x2f0>)
 800593a:	4602      	mov	r2, r0
 800593c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005940:	e6c0      	b.n	80056c4 <_dtoa_r+0x34>
 8005942:	2301      	movs	r3, #1
 8005944:	e7df      	b.n	8005906 <_dtoa_r+0x276>
 8005946:	bf00      	nop
 8005948:	636f4361 	.word	0x636f4361
 800594c:	3fd287a7 	.word	0x3fd287a7
 8005950:	8b60c8b3 	.word	0x8b60c8b3
 8005954:	3fc68a28 	.word	0x3fc68a28
 8005958:	509f79fb 	.word	0x509f79fb
 800595c:	3fd34413 	.word	0x3fd34413
 8005960:	080089f6 	.word	0x080089f6
 8005964:	08008a0d 	.word	0x08008a0d
 8005968:	7ff00000 	.word	0x7ff00000
 800596c:	080089f2 	.word	0x080089f2
 8005970:	080089e9 	.word	0x080089e9
 8005974:	0800886d 	.word	0x0800886d
 8005978:	3ff80000 	.word	0x3ff80000
 800597c:	08008be0 	.word	0x08008be0
 8005980:	08008a68 	.word	0x08008a68
 8005984:	2501      	movs	r5, #1
 8005986:	2300      	movs	r3, #0
 8005988:	9306      	str	r3, [sp, #24]
 800598a:	9508      	str	r5, [sp, #32]
 800598c:	f04f 33ff 	mov.w	r3, #4294967295
 8005990:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005994:	2200      	movs	r2, #0
 8005996:	2312      	movs	r3, #18
 8005998:	e7b0      	b.n	80058fc <_dtoa_r+0x26c>
 800599a:	2301      	movs	r3, #1
 800599c:	9308      	str	r3, [sp, #32]
 800599e:	e7f5      	b.n	800598c <_dtoa_r+0x2fc>
 80059a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80059a6:	e7b8      	b.n	800591a <_dtoa_r+0x28a>
 80059a8:	3101      	adds	r1, #1
 80059aa:	6041      	str	r1, [r0, #4]
 80059ac:	0052      	lsls	r2, r2, #1
 80059ae:	e7b8      	b.n	8005922 <_dtoa_r+0x292>
 80059b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059b2:	9a01      	ldr	r2, [sp, #4]
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	9b03      	ldr	r3, [sp, #12]
 80059b8:	2b0e      	cmp	r3, #14
 80059ba:	f200 809d 	bhi.w	8005af8 <_dtoa_r+0x468>
 80059be:	2d00      	cmp	r5, #0
 80059c0:	f000 809a 	beq.w	8005af8 <_dtoa_r+0x468>
 80059c4:	9b00      	ldr	r3, [sp, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	dd32      	ble.n	8005a30 <_dtoa_r+0x3a0>
 80059ca:	4ab7      	ldr	r2, [pc, #732]	; (8005ca8 <_dtoa_r+0x618>)
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80059d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059d8:	9b00      	ldr	r3, [sp, #0]
 80059da:	05d8      	lsls	r0, r3, #23
 80059dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80059e0:	d516      	bpl.n	8005a10 <_dtoa_r+0x380>
 80059e2:	4bb2      	ldr	r3, [pc, #712]	; (8005cac <_dtoa_r+0x61c>)
 80059e4:	ec51 0b19 	vmov	r0, r1, d9
 80059e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059ec:	f7fa ff36 	bl	800085c <__aeabi_ddiv>
 80059f0:	f007 070f 	and.w	r7, r7, #15
 80059f4:	4682      	mov	sl, r0
 80059f6:	468b      	mov	fp, r1
 80059f8:	2503      	movs	r5, #3
 80059fa:	4eac      	ldr	r6, [pc, #688]	; (8005cac <_dtoa_r+0x61c>)
 80059fc:	b957      	cbnz	r7, 8005a14 <_dtoa_r+0x384>
 80059fe:	4642      	mov	r2, r8
 8005a00:	464b      	mov	r3, r9
 8005a02:	4650      	mov	r0, sl
 8005a04:	4659      	mov	r1, fp
 8005a06:	f7fa ff29 	bl	800085c <__aeabi_ddiv>
 8005a0a:	4682      	mov	sl, r0
 8005a0c:	468b      	mov	fp, r1
 8005a0e:	e028      	b.n	8005a62 <_dtoa_r+0x3d2>
 8005a10:	2502      	movs	r5, #2
 8005a12:	e7f2      	b.n	80059fa <_dtoa_r+0x36a>
 8005a14:	07f9      	lsls	r1, r7, #31
 8005a16:	d508      	bpl.n	8005a2a <_dtoa_r+0x39a>
 8005a18:	4640      	mov	r0, r8
 8005a1a:	4649      	mov	r1, r9
 8005a1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a20:	f7fa fdf2 	bl	8000608 <__aeabi_dmul>
 8005a24:	3501      	adds	r5, #1
 8005a26:	4680      	mov	r8, r0
 8005a28:	4689      	mov	r9, r1
 8005a2a:	107f      	asrs	r7, r7, #1
 8005a2c:	3608      	adds	r6, #8
 8005a2e:	e7e5      	b.n	80059fc <_dtoa_r+0x36c>
 8005a30:	f000 809b 	beq.w	8005b6a <_dtoa_r+0x4da>
 8005a34:	9b00      	ldr	r3, [sp, #0]
 8005a36:	4f9d      	ldr	r7, [pc, #628]	; (8005cac <_dtoa_r+0x61c>)
 8005a38:	425e      	negs	r6, r3
 8005a3a:	4b9b      	ldr	r3, [pc, #620]	; (8005ca8 <_dtoa_r+0x618>)
 8005a3c:	f006 020f 	and.w	r2, r6, #15
 8005a40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a48:	ec51 0b19 	vmov	r0, r1, d9
 8005a4c:	f7fa fddc 	bl	8000608 <__aeabi_dmul>
 8005a50:	1136      	asrs	r6, r6, #4
 8005a52:	4682      	mov	sl, r0
 8005a54:	468b      	mov	fp, r1
 8005a56:	2300      	movs	r3, #0
 8005a58:	2502      	movs	r5, #2
 8005a5a:	2e00      	cmp	r6, #0
 8005a5c:	d17a      	bne.n	8005b54 <_dtoa_r+0x4c4>
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1d3      	bne.n	8005a0a <_dtoa_r+0x37a>
 8005a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 8082 	beq.w	8005b6e <_dtoa_r+0x4de>
 8005a6a:	4b91      	ldr	r3, [pc, #580]	; (8005cb0 <_dtoa_r+0x620>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	4650      	mov	r0, sl
 8005a70:	4659      	mov	r1, fp
 8005a72:	f7fb f83b 	bl	8000aec <__aeabi_dcmplt>
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d079      	beq.n	8005b6e <_dtoa_r+0x4de>
 8005a7a:	9b03      	ldr	r3, [sp, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d076      	beq.n	8005b6e <_dtoa_r+0x4de>
 8005a80:	9b02      	ldr	r3, [sp, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	dd36      	ble.n	8005af4 <_dtoa_r+0x464>
 8005a86:	9b00      	ldr	r3, [sp, #0]
 8005a88:	4650      	mov	r0, sl
 8005a8a:	4659      	mov	r1, fp
 8005a8c:	1e5f      	subs	r7, r3, #1
 8005a8e:	2200      	movs	r2, #0
 8005a90:	4b88      	ldr	r3, [pc, #544]	; (8005cb4 <_dtoa_r+0x624>)
 8005a92:	f7fa fdb9 	bl	8000608 <__aeabi_dmul>
 8005a96:	9e02      	ldr	r6, [sp, #8]
 8005a98:	4682      	mov	sl, r0
 8005a9a:	468b      	mov	fp, r1
 8005a9c:	3501      	adds	r5, #1
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f7fa fd48 	bl	8000534 <__aeabi_i2d>
 8005aa4:	4652      	mov	r2, sl
 8005aa6:	465b      	mov	r3, fp
 8005aa8:	f7fa fdae 	bl	8000608 <__aeabi_dmul>
 8005aac:	4b82      	ldr	r3, [pc, #520]	; (8005cb8 <_dtoa_r+0x628>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f7fa fbf4 	bl	800029c <__adddf3>
 8005ab4:	46d0      	mov	r8, sl
 8005ab6:	46d9      	mov	r9, fp
 8005ab8:	4682      	mov	sl, r0
 8005aba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005abe:	2e00      	cmp	r6, #0
 8005ac0:	d158      	bne.n	8005b74 <_dtoa_r+0x4e4>
 8005ac2:	4b7e      	ldr	r3, [pc, #504]	; (8005cbc <_dtoa_r+0x62c>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	4640      	mov	r0, r8
 8005ac8:	4649      	mov	r1, r9
 8005aca:	f7fa fbe5 	bl	8000298 <__aeabi_dsub>
 8005ace:	4652      	mov	r2, sl
 8005ad0:	465b      	mov	r3, fp
 8005ad2:	4680      	mov	r8, r0
 8005ad4:	4689      	mov	r9, r1
 8005ad6:	f7fb f827 	bl	8000b28 <__aeabi_dcmpgt>
 8005ada:	2800      	cmp	r0, #0
 8005adc:	f040 8295 	bne.w	800600a <_dtoa_r+0x97a>
 8005ae0:	4652      	mov	r2, sl
 8005ae2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005ae6:	4640      	mov	r0, r8
 8005ae8:	4649      	mov	r1, r9
 8005aea:	f7fa ffff 	bl	8000aec <__aeabi_dcmplt>
 8005aee:	2800      	cmp	r0, #0
 8005af0:	f040 8289 	bne.w	8006006 <_dtoa_r+0x976>
 8005af4:	ec5b ab19 	vmov	sl, fp, d9
 8005af8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f2c0 8148 	blt.w	8005d90 <_dtoa_r+0x700>
 8005b00:	9a00      	ldr	r2, [sp, #0]
 8005b02:	2a0e      	cmp	r2, #14
 8005b04:	f300 8144 	bgt.w	8005d90 <_dtoa_r+0x700>
 8005b08:	4b67      	ldr	r3, [pc, #412]	; (8005ca8 <_dtoa_r+0x618>)
 8005b0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f280 80d5 	bge.w	8005cc4 <_dtoa_r+0x634>
 8005b1a:	9b03      	ldr	r3, [sp, #12]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f300 80d1 	bgt.w	8005cc4 <_dtoa_r+0x634>
 8005b22:	f040 826f 	bne.w	8006004 <_dtoa_r+0x974>
 8005b26:	4b65      	ldr	r3, [pc, #404]	; (8005cbc <_dtoa_r+0x62c>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	4640      	mov	r0, r8
 8005b2c:	4649      	mov	r1, r9
 8005b2e:	f7fa fd6b 	bl	8000608 <__aeabi_dmul>
 8005b32:	4652      	mov	r2, sl
 8005b34:	465b      	mov	r3, fp
 8005b36:	f7fa ffed 	bl	8000b14 <__aeabi_dcmpge>
 8005b3a:	9e03      	ldr	r6, [sp, #12]
 8005b3c:	4637      	mov	r7, r6
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	f040 8245 	bne.w	8005fce <_dtoa_r+0x93e>
 8005b44:	9d01      	ldr	r5, [sp, #4]
 8005b46:	2331      	movs	r3, #49	; 0x31
 8005b48:	f805 3b01 	strb.w	r3, [r5], #1
 8005b4c:	9b00      	ldr	r3, [sp, #0]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	e240      	b.n	8005fd6 <_dtoa_r+0x946>
 8005b54:	07f2      	lsls	r2, r6, #31
 8005b56:	d505      	bpl.n	8005b64 <_dtoa_r+0x4d4>
 8005b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b5c:	f7fa fd54 	bl	8000608 <__aeabi_dmul>
 8005b60:	3501      	adds	r5, #1
 8005b62:	2301      	movs	r3, #1
 8005b64:	1076      	asrs	r6, r6, #1
 8005b66:	3708      	adds	r7, #8
 8005b68:	e777      	b.n	8005a5a <_dtoa_r+0x3ca>
 8005b6a:	2502      	movs	r5, #2
 8005b6c:	e779      	b.n	8005a62 <_dtoa_r+0x3d2>
 8005b6e:	9f00      	ldr	r7, [sp, #0]
 8005b70:	9e03      	ldr	r6, [sp, #12]
 8005b72:	e794      	b.n	8005a9e <_dtoa_r+0x40e>
 8005b74:	9901      	ldr	r1, [sp, #4]
 8005b76:	4b4c      	ldr	r3, [pc, #304]	; (8005ca8 <_dtoa_r+0x618>)
 8005b78:	4431      	add	r1, r6
 8005b7a:	910d      	str	r1, [sp, #52]	; 0x34
 8005b7c:	9908      	ldr	r1, [sp, #32]
 8005b7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005b82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b86:	2900      	cmp	r1, #0
 8005b88:	d043      	beq.n	8005c12 <_dtoa_r+0x582>
 8005b8a:	494d      	ldr	r1, [pc, #308]	; (8005cc0 <_dtoa_r+0x630>)
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	f7fa fe65 	bl	800085c <__aeabi_ddiv>
 8005b92:	4652      	mov	r2, sl
 8005b94:	465b      	mov	r3, fp
 8005b96:	f7fa fb7f 	bl	8000298 <__aeabi_dsub>
 8005b9a:	9d01      	ldr	r5, [sp, #4]
 8005b9c:	4682      	mov	sl, r0
 8005b9e:	468b      	mov	fp, r1
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	4640      	mov	r0, r8
 8005ba4:	f7fa ffe0 	bl	8000b68 <__aeabi_d2iz>
 8005ba8:	4606      	mov	r6, r0
 8005baa:	f7fa fcc3 	bl	8000534 <__aeabi_i2d>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4640      	mov	r0, r8
 8005bb4:	4649      	mov	r1, r9
 8005bb6:	f7fa fb6f 	bl	8000298 <__aeabi_dsub>
 8005bba:	3630      	adds	r6, #48	; 0x30
 8005bbc:	f805 6b01 	strb.w	r6, [r5], #1
 8005bc0:	4652      	mov	r2, sl
 8005bc2:	465b      	mov	r3, fp
 8005bc4:	4680      	mov	r8, r0
 8005bc6:	4689      	mov	r9, r1
 8005bc8:	f7fa ff90 	bl	8000aec <__aeabi_dcmplt>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d163      	bne.n	8005c98 <_dtoa_r+0x608>
 8005bd0:	4642      	mov	r2, r8
 8005bd2:	464b      	mov	r3, r9
 8005bd4:	4936      	ldr	r1, [pc, #216]	; (8005cb0 <_dtoa_r+0x620>)
 8005bd6:	2000      	movs	r0, #0
 8005bd8:	f7fa fb5e 	bl	8000298 <__aeabi_dsub>
 8005bdc:	4652      	mov	r2, sl
 8005bde:	465b      	mov	r3, fp
 8005be0:	f7fa ff84 	bl	8000aec <__aeabi_dcmplt>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	f040 80b5 	bne.w	8005d54 <_dtoa_r+0x6c4>
 8005bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bec:	429d      	cmp	r5, r3
 8005bee:	d081      	beq.n	8005af4 <_dtoa_r+0x464>
 8005bf0:	4b30      	ldr	r3, [pc, #192]	; (8005cb4 <_dtoa_r+0x624>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	4650      	mov	r0, sl
 8005bf6:	4659      	mov	r1, fp
 8005bf8:	f7fa fd06 	bl	8000608 <__aeabi_dmul>
 8005bfc:	4b2d      	ldr	r3, [pc, #180]	; (8005cb4 <_dtoa_r+0x624>)
 8005bfe:	4682      	mov	sl, r0
 8005c00:	468b      	mov	fp, r1
 8005c02:	4640      	mov	r0, r8
 8005c04:	4649      	mov	r1, r9
 8005c06:	2200      	movs	r2, #0
 8005c08:	f7fa fcfe 	bl	8000608 <__aeabi_dmul>
 8005c0c:	4680      	mov	r8, r0
 8005c0e:	4689      	mov	r9, r1
 8005c10:	e7c6      	b.n	8005ba0 <_dtoa_r+0x510>
 8005c12:	4650      	mov	r0, sl
 8005c14:	4659      	mov	r1, fp
 8005c16:	f7fa fcf7 	bl	8000608 <__aeabi_dmul>
 8005c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c1c:	9d01      	ldr	r5, [sp, #4]
 8005c1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c20:	4682      	mov	sl, r0
 8005c22:	468b      	mov	fp, r1
 8005c24:	4649      	mov	r1, r9
 8005c26:	4640      	mov	r0, r8
 8005c28:	f7fa ff9e 	bl	8000b68 <__aeabi_d2iz>
 8005c2c:	4606      	mov	r6, r0
 8005c2e:	f7fa fc81 	bl	8000534 <__aeabi_i2d>
 8005c32:	3630      	adds	r6, #48	; 0x30
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	4640      	mov	r0, r8
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	f7fa fb2c 	bl	8000298 <__aeabi_dsub>
 8005c40:	f805 6b01 	strb.w	r6, [r5], #1
 8005c44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c46:	429d      	cmp	r5, r3
 8005c48:	4680      	mov	r8, r0
 8005c4a:	4689      	mov	r9, r1
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	d124      	bne.n	8005c9c <_dtoa_r+0x60c>
 8005c52:	4b1b      	ldr	r3, [pc, #108]	; (8005cc0 <_dtoa_r+0x630>)
 8005c54:	4650      	mov	r0, sl
 8005c56:	4659      	mov	r1, fp
 8005c58:	f7fa fb20 	bl	800029c <__adddf3>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4640      	mov	r0, r8
 8005c62:	4649      	mov	r1, r9
 8005c64:	f7fa ff60 	bl	8000b28 <__aeabi_dcmpgt>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d173      	bne.n	8005d54 <_dtoa_r+0x6c4>
 8005c6c:	4652      	mov	r2, sl
 8005c6e:	465b      	mov	r3, fp
 8005c70:	4913      	ldr	r1, [pc, #76]	; (8005cc0 <_dtoa_r+0x630>)
 8005c72:	2000      	movs	r0, #0
 8005c74:	f7fa fb10 	bl	8000298 <__aeabi_dsub>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4640      	mov	r0, r8
 8005c7e:	4649      	mov	r1, r9
 8005c80:	f7fa ff34 	bl	8000aec <__aeabi_dcmplt>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	f43f af35 	beq.w	8005af4 <_dtoa_r+0x464>
 8005c8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005c8c:	1e6b      	subs	r3, r5, #1
 8005c8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c94:	2b30      	cmp	r3, #48	; 0x30
 8005c96:	d0f8      	beq.n	8005c8a <_dtoa_r+0x5fa>
 8005c98:	9700      	str	r7, [sp, #0]
 8005c9a:	e049      	b.n	8005d30 <_dtoa_r+0x6a0>
 8005c9c:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <_dtoa_r+0x624>)
 8005c9e:	f7fa fcb3 	bl	8000608 <__aeabi_dmul>
 8005ca2:	4680      	mov	r8, r0
 8005ca4:	4689      	mov	r9, r1
 8005ca6:	e7bd      	b.n	8005c24 <_dtoa_r+0x594>
 8005ca8:	08008be0 	.word	0x08008be0
 8005cac:	08008bb8 	.word	0x08008bb8
 8005cb0:	3ff00000 	.word	0x3ff00000
 8005cb4:	40240000 	.word	0x40240000
 8005cb8:	401c0000 	.word	0x401c0000
 8005cbc:	40140000 	.word	0x40140000
 8005cc0:	3fe00000 	.word	0x3fe00000
 8005cc4:	9d01      	ldr	r5, [sp, #4]
 8005cc6:	4656      	mov	r6, sl
 8005cc8:	465f      	mov	r7, fp
 8005cca:	4642      	mov	r2, r8
 8005ccc:	464b      	mov	r3, r9
 8005cce:	4630      	mov	r0, r6
 8005cd0:	4639      	mov	r1, r7
 8005cd2:	f7fa fdc3 	bl	800085c <__aeabi_ddiv>
 8005cd6:	f7fa ff47 	bl	8000b68 <__aeabi_d2iz>
 8005cda:	4682      	mov	sl, r0
 8005cdc:	f7fa fc2a 	bl	8000534 <__aeabi_i2d>
 8005ce0:	4642      	mov	r2, r8
 8005ce2:	464b      	mov	r3, r9
 8005ce4:	f7fa fc90 	bl	8000608 <__aeabi_dmul>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4630      	mov	r0, r6
 8005cee:	4639      	mov	r1, r7
 8005cf0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005cf4:	f7fa fad0 	bl	8000298 <__aeabi_dsub>
 8005cf8:	f805 6b01 	strb.w	r6, [r5], #1
 8005cfc:	9e01      	ldr	r6, [sp, #4]
 8005cfe:	9f03      	ldr	r7, [sp, #12]
 8005d00:	1bae      	subs	r6, r5, r6
 8005d02:	42b7      	cmp	r7, r6
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	d135      	bne.n	8005d76 <_dtoa_r+0x6e6>
 8005d0a:	f7fa fac7 	bl	800029c <__adddf3>
 8005d0e:	4642      	mov	r2, r8
 8005d10:	464b      	mov	r3, r9
 8005d12:	4606      	mov	r6, r0
 8005d14:	460f      	mov	r7, r1
 8005d16:	f7fa ff07 	bl	8000b28 <__aeabi_dcmpgt>
 8005d1a:	b9d0      	cbnz	r0, 8005d52 <_dtoa_r+0x6c2>
 8005d1c:	4642      	mov	r2, r8
 8005d1e:	464b      	mov	r3, r9
 8005d20:	4630      	mov	r0, r6
 8005d22:	4639      	mov	r1, r7
 8005d24:	f7fa fed8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d28:	b110      	cbz	r0, 8005d30 <_dtoa_r+0x6a0>
 8005d2a:	f01a 0f01 	tst.w	sl, #1
 8005d2e:	d110      	bne.n	8005d52 <_dtoa_r+0x6c2>
 8005d30:	4620      	mov	r0, r4
 8005d32:	ee18 1a10 	vmov	r1, s16
 8005d36:	f001 f897 	bl	8006e68 <_Bfree>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	9800      	ldr	r0, [sp, #0]
 8005d3e:	702b      	strb	r3, [r5, #0]
 8005d40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d42:	3001      	adds	r0, #1
 8005d44:	6018      	str	r0, [r3, #0]
 8005d46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f43f acf1 	beq.w	8005730 <_dtoa_r+0xa0>
 8005d4e:	601d      	str	r5, [r3, #0]
 8005d50:	e4ee      	b.n	8005730 <_dtoa_r+0xa0>
 8005d52:	9f00      	ldr	r7, [sp, #0]
 8005d54:	462b      	mov	r3, r5
 8005d56:	461d      	mov	r5, r3
 8005d58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d5c:	2a39      	cmp	r2, #57	; 0x39
 8005d5e:	d106      	bne.n	8005d6e <_dtoa_r+0x6de>
 8005d60:	9a01      	ldr	r2, [sp, #4]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d1f7      	bne.n	8005d56 <_dtoa_r+0x6c6>
 8005d66:	9901      	ldr	r1, [sp, #4]
 8005d68:	2230      	movs	r2, #48	; 0x30
 8005d6a:	3701      	adds	r7, #1
 8005d6c:	700a      	strb	r2, [r1, #0]
 8005d6e:	781a      	ldrb	r2, [r3, #0]
 8005d70:	3201      	adds	r2, #1
 8005d72:	701a      	strb	r2, [r3, #0]
 8005d74:	e790      	b.n	8005c98 <_dtoa_r+0x608>
 8005d76:	4ba6      	ldr	r3, [pc, #664]	; (8006010 <_dtoa_r+0x980>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f7fa fc45 	bl	8000608 <__aeabi_dmul>
 8005d7e:	2200      	movs	r2, #0
 8005d80:	2300      	movs	r3, #0
 8005d82:	4606      	mov	r6, r0
 8005d84:	460f      	mov	r7, r1
 8005d86:	f7fa fea7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	d09d      	beq.n	8005cca <_dtoa_r+0x63a>
 8005d8e:	e7cf      	b.n	8005d30 <_dtoa_r+0x6a0>
 8005d90:	9a08      	ldr	r2, [sp, #32]
 8005d92:	2a00      	cmp	r2, #0
 8005d94:	f000 80d7 	beq.w	8005f46 <_dtoa_r+0x8b6>
 8005d98:	9a06      	ldr	r2, [sp, #24]
 8005d9a:	2a01      	cmp	r2, #1
 8005d9c:	f300 80ba 	bgt.w	8005f14 <_dtoa_r+0x884>
 8005da0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005da2:	2a00      	cmp	r2, #0
 8005da4:	f000 80b2 	beq.w	8005f0c <_dtoa_r+0x87c>
 8005da8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005dac:	9e07      	ldr	r6, [sp, #28]
 8005dae:	9d04      	ldr	r5, [sp, #16]
 8005db0:	9a04      	ldr	r2, [sp, #16]
 8005db2:	441a      	add	r2, r3
 8005db4:	9204      	str	r2, [sp, #16]
 8005db6:	9a05      	ldr	r2, [sp, #20]
 8005db8:	2101      	movs	r1, #1
 8005dba:	441a      	add	r2, r3
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	9205      	str	r2, [sp, #20]
 8005dc0:	f001 f954 	bl	800706c <__i2b>
 8005dc4:	4607      	mov	r7, r0
 8005dc6:	2d00      	cmp	r5, #0
 8005dc8:	dd0c      	ble.n	8005de4 <_dtoa_r+0x754>
 8005dca:	9b05      	ldr	r3, [sp, #20]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	dd09      	ble.n	8005de4 <_dtoa_r+0x754>
 8005dd0:	42ab      	cmp	r3, r5
 8005dd2:	9a04      	ldr	r2, [sp, #16]
 8005dd4:	bfa8      	it	ge
 8005dd6:	462b      	movge	r3, r5
 8005dd8:	1ad2      	subs	r2, r2, r3
 8005dda:	9204      	str	r2, [sp, #16]
 8005ddc:	9a05      	ldr	r2, [sp, #20]
 8005dde:	1aed      	subs	r5, r5, r3
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	9305      	str	r3, [sp, #20]
 8005de4:	9b07      	ldr	r3, [sp, #28]
 8005de6:	b31b      	cbz	r3, 8005e30 <_dtoa_r+0x7a0>
 8005de8:	9b08      	ldr	r3, [sp, #32]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 80af 	beq.w	8005f4e <_dtoa_r+0x8be>
 8005df0:	2e00      	cmp	r6, #0
 8005df2:	dd13      	ble.n	8005e1c <_dtoa_r+0x78c>
 8005df4:	4639      	mov	r1, r7
 8005df6:	4632      	mov	r2, r6
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f001 f9f7 	bl	80071ec <__pow5mult>
 8005dfe:	ee18 2a10 	vmov	r2, s16
 8005e02:	4601      	mov	r1, r0
 8005e04:	4607      	mov	r7, r0
 8005e06:	4620      	mov	r0, r4
 8005e08:	f001 f946 	bl	8007098 <__multiply>
 8005e0c:	ee18 1a10 	vmov	r1, s16
 8005e10:	4680      	mov	r8, r0
 8005e12:	4620      	mov	r0, r4
 8005e14:	f001 f828 	bl	8006e68 <_Bfree>
 8005e18:	ee08 8a10 	vmov	s16, r8
 8005e1c:	9b07      	ldr	r3, [sp, #28]
 8005e1e:	1b9a      	subs	r2, r3, r6
 8005e20:	d006      	beq.n	8005e30 <_dtoa_r+0x7a0>
 8005e22:	ee18 1a10 	vmov	r1, s16
 8005e26:	4620      	mov	r0, r4
 8005e28:	f001 f9e0 	bl	80071ec <__pow5mult>
 8005e2c:	ee08 0a10 	vmov	s16, r0
 8005e30:	2101      	movs	r1, #1
 8005e32:	4620      	mov	r0, r4
 8005e34:	f001 f91a 	bl	800706c <__i2b>
 8005e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	4606      	mov	r6, r0
 8005e3e:	f340 8088 	ble.w	8005f52 <_dtoa_r+0x8c2>
 8005e42:	461a      	mov	r2, r3
 8005e44:	4601      	mov	r1, r0
 8005e46:	4620      	mov	r0, r4
 8005e48:	f001 f9d0 	bl	80071ec <__pow5mult>
 8005e4c:	9b06      	ldr	r3, [sp, #24]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	4606      	mov	r6, r0
 8005e52:	f340 8081 	ble.w	8005f58 <_dtoa_r+0x8c8>
 8005e56:	f04f 0800 	mov.w	r8, #0
 8005e5a:	6933      	ldr	r3, [r6, #16]
 8005e5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005e60:	6918      	ldr	r0, [r3, #16]
 8005e62:	f001 f8b3 	bl	8006fcc <__hi0bits>
 8005e66:	f1c0 0020 	rsb	r0, r0, #32
 8005e6a:	9b05      	ldr	r3, [sp, #20]
 8005e6c:	4418      	add	r0, r3
 8005e6e:	f010 001f 	ands.w	r0, r0, #31
 8005e72:	f000 8092 	beq.w	8005f9a <_dtoa_r+0x90a>
 8005e76:	f1c0 0320 	rsb	r3, r0, #32
 8005e7a:	2b04      	cmp	r3, #4
 8005e7c:	f340 808a 	ble.w	8005f94 <_dtoa_r+0x904>
 8005e80:	f1c0 001c 	rsb	r0, r0, #28
 8005e84:	9b04      	ldr	r3, [sp, #16]
 8005e86:	4403      	add	r3, r0
 8005e88:	9304      	str	r3, [sp, #16]
 8005e8a:	9b05      	ldr	r3, [sp, #20]
 8005e8c:	4403      	add	r3, r0
 8005e8e:	4405      	add	r5, r0
 8005e90:	9305      	str	r3, [sp, #20]
 8005e92:	9b04      	ldr	r3, [sp, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	dd07      	ble.n	8005ea8 <_dtoa_r+0x818>
 8005e98:	ee18 1a10 	vmov	r1, s16
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f001 f9fe 	bl	80072a0 <__lshift>
 8005ea4:	ee08 0a10 	vmov	s16, r0
 8005ea8:	9b05      	ldr	r3, [sp, #20]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	dd05      	ble.n	8005eba <_dtoa_r+0x82a>
 8005eae:	4631      	mov	r1, r6
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f001 f9f4 	bl	80072a0 <__lshift>
 8005eb8:	4606      	mov	r6, r0
 8005eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d06e      	beq.n	8005f9e <_dtoa_r+0x90e>
 8005ec0:	ee18 0a10 	vmov	r0, s16
 8005ec4:	4631      	mov	r1, r6
 8005ec6:	f001 fa5b 	bl	8007380 <__mcmp>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	da67      	bge.n	8005f9e <_dtoa_r+0x90e>
 8005ece:	9b00      	ldr	r3, [sp, #0]
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	ee18 1a10 	vmov	r1, s16
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	220a      	movs	r2, #10
 8005eda:	2300      	movs	r3, #0
 8005edc:	4620      	mov	r0, r4
 8005ede:	f000 ffe5 	bl	8006eac <__multadd>
 8005ee2:	9b08      	ldr	r3, [sp, #32]
 8005ee4:	ee08 0a10 	vmov	s16, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 81b1 	beq.w	8006250 <_dtoa_r+0xbc0>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	4639      	mov	r1, r7
 8005ef2:	220a      	movs	r2, #10
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	f000 ffd9 	bl	8006eac <__multadd>
 8005efa:	9b02      	ldr	r3, [sp, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	4607      	mov	r7, r0
 8005f00:	f300 808e 	bgt.w	8006020 <_dtoa_r+0x990>
 8005f04:	9b06      	ldr	r3, [sp, #24]
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	dc51      	bgt.n	8005fae <_dtoa_r+0x91e>
 8005f0a:	e089      	b.n	8006020 <_dtoa_r+0x990>
 8005f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f12:	e74b      	b.n	8005dac <_dtoa_r+0x71c>
 8005f14:	9b03      	ldr	r3, [sp, #12]
 8005f16:	1e5e      	subs	r6, r3, #1
 8005f18:	9b07      	ldr	r3, [sp, #28]
 8005f1a:	42b3      	cmp	r3, r6
 8005f1c:	bfbf      	itttt	lt
 8005f1e:	9b07      	ldrlt	r3, [sp, #28]
 8005f20:	9607      	strlt	r6, [sp, #28]
 8005f22:	1af2      	sublt	r2, r6, r3
 8005f24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005f26:	bfb6      	itet	lt
 8005f28:	189b      	addlt	r3, r3, r2
 8005f2a:	1b9e      	subge	r6, r3, r6
 8005f2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005f2e:	9b03      	ldr	r3, [sp, #12]
 8005f30:	bfb8      	it	lt
 8005f32:	2600      	movlt	r6, #0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	bfb7      	itett	lt
 8005f38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005f3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005f40:	1a9d      	sublt	r5, r3, r2
 8005f42:	2300      	movlt	r3, #0
 8005f44:	e734      	b.n	8005db0 <_dtoa_r+0x720>
 8005f46:	9e07      	ldr	r6, [sp, #28]
 8005f48:	9d04      	ldr	r5, [sp, #16]
 8005f4a:	9f08      	ldr	r7, [sp, #32]
 8005f4c:	e73b      	b.n	8005dc6 <_dtoa_r+0x736>
 8005f4e:	9a07      	ldr	r2, [sp, #28]
 8005f50:	e767      	b.n	8005e22 <_dtoa_r+0x792>
 8005f52:	9b06      	ldr	r3, [sp, #24]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	dc18      	bgt.n	8005f8a <_dtoa_r+0x8fa>
 8005f58:	f1ba 0f00 	cmp.w	sl, #0
 8005f5c:	d115      	bne.n	8005f8a <_dtoa_r+0x8fa>
 8005f5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f62:	b993      	cbnz	r3, 8005f8a <_dtoa_r+0x8fa>
 8005f64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005f68:	0d1b      	lsrs	r3, r3, #20
 8005f6a:	051b      	lsls	r3, r3, #20
 8005f6c:	b183      	cbz	r3, 8005f90 <_dtoa_r+0x900>
 8005f6e:	9b04      	ldr	r3, [sp, #16]
 8005f70:	3301      	adds	r3, #1
 8005f72:	9304      	str	r3, [sp, #16]
 8005f74:	9b05      	ldr	r3, [sp, #20]
 8005f76:	3301      	adds	r3, #1
 8005f78:	9305      	str	r3, [sp, #20]
 8005f7a:	f04f 0801 	mov.w	r8, #1
 8005f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f47f af6a 	bne.w	8005e5a <_dtoa_r+0x7ca>
 8005f86:	2001      	movs	r0, #1
 8005f88:	e76f      	b.n	8005e6a <_dtoa_r+0x7da>
 8005f8a:	f04f 0800 	mov.w	r8, #0
 8005f8e:	e7f6      	b.n	8005f7e <_dtoa_r+0x8ee>
 8005f90:	4698      	mov	r8, r3
 8005f92:	e7f4      	b.n	8005f7e <_dtoa_r+0x8ee>
 8005f94:	f43f af7d 	beq.w	8005e92 <_dtoa_r+0x802>
 8005f98:	4618      	mov	r0, r3
 8005f9a:	301c      	adds	r0, #28
 8005f9c:	e772      	b.n	8005e84 <_dtoa_r+0x7f4>
 8005f9e:	9b03      	ldr	r3, [sp, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	dc37      	bgt.n	8006014 <_dtoa_r+0x984>
 8005fa4:	9b06      	ldr	r3, [sp, #24]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	dd34      	ble.n	8006014 <_dtoa_r+0x984>
 8005faa:	9b03      	ldr	r3, [sp, #12]
 8005fac:	9302      	str	r3, [sp, #8]
 8005fae:	9b02      	ldr	r3, [sp, #8]
 8005fb0:	b96b      	cbnz	r3, 8005fce <_dtoa_r+0x93e>
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	2205      	movs	r2, #5
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f000 ff78 	bl	8006eac <__multadd>
 8005fbc:	4601      	mov	r1, r0
 8005fbe:	4606      	mov	r6, r0
 8005fc0:	ee18 0a10 	vmov	r0, s16
 8005fc4:	f001 f9dc 	bl	8007380 <__mcmp>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	f73f adbb 	bgt.w	8005b44 <_dtoa_r+0x4b4>
 8005fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fd0:	9d01      	ldr	r5, [sp, #4]
 8005fd2:	43db      	mvns	r3, r3
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	f04f 0800 	mov.w	r8, #0
 8005fda:	4631      	mov	r1, r6
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f000 ff43 	bl	8006e68 <_Bfree>
 8005fe2:	2f00      	cmp	r7, #0
 8005fe4:	f43f aea4 	beq.w	8005d30 <_dtoa_r+0x6a0>
 8005fe8:	f1b8 0f00 	cmp.w	r8, #0
 8005fec:	d005      	beq.n	8005ffa <_dtoa_r+0x96a>
 8005fee:	45b8      	cmp	r8, r7
 8005ff0:	d003      	beq.n	8005ffa <_dtoa_r+0x96a>
 8005ff2:	4641      	mov	r1, r8
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f000 ff37 	bl	8006e68 <_Bfree>
 8005ffa:	4639      	mov	r1, r7
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f000 ff33 	bl	8006e68 <_Bfree>
 8006002:	e695      	b.n	8005d30 <_dtoa_r+0x6a0>
 8006004:	2600      	movs	r6, #0
 8006006:	4637      	mov	r7, r6
 8006008:	e7e1      	b.n	8005fce <_dtoa_r+0x93e>
 800600a:	9700      	str	r7, [sp, #0]
 800600c:	4637      	mov	r7, r6
 800600e:	e599      	b.n	8005b44 <_dtoa_r+0x4b4>
 8006010:	40240000 	.word	0x40240000
 8006014:	9b08      	ldr	r3, [sp, #32]
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 80ca 	beq.w	80061b0 <_dtoa_r+0xb20>
 800601c:	9b03      	ldr	r3, [sp, #12]
 800601e:	9302      	str	r3, [sp, #8]
 8006020:	2d00      	cmp	r5, #0
 8006022:	dd05      	ble.n	8006030 <_dtoa_r+0x9a0>
 8006024:	4639      	mov	r1, r7
 8006026:	462a      	mov	r2, r5
 8006028:	4620      	mov	r0, r4
 800602a:	f001 f939 	bl	80072a0 <__lshift>
 800602e:	4607      	mov	r7, r0
 8006030:	f1b8 0f00 	cmp.w	r8, #0
 8006034:	d05b      	beq.n	80060ee <_dtoa_r+0xa5e>
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	4620      	mov	r0, r4
 800603a:	f000 fed5 	bl	8006de8 <_Balloc>
 800603e:	4605      	mov	r5, r0
 8006040:	b928      	cbnz	r0, 800604e <_dtoa_r+0x9be>
 8006042:	4b87      	ldr	r3, [pc, #540]	; (8006260 <_dtoa_r+0xbd0>)
 8006044:	4602      	mov	r2, r0
 8006046:	f240 21ea 	movw	r1, #746	; 0x2ea
 800604a:	f7ff bb3b 	b.w	80056c4 <_dtoa_r+0x34>
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	3202      	adds	r2, #2
 8006052:	0092      	lsls	r2, r2, #2
 8006054:	f107 010c 	add.w	r1, r7, #12
 8006058:	300c      	adds	r0, #12
 800605a:	f000 feab 	bl	8006db4 <memcpy>
 800605e:	2201      	movs	r2, #1
 8006060:	4629      	mov	r1, r5
 8006062:	4620      	mov	r0, r4
 8006064:	f001 f91c 	bl	80072a0 <__lshift>
 8006068:	9b01      	ldr	r3, [sp, #4]
 800606a:	f103 0901 	add.w	r9, r3, #1
 800606e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006072:	4413      	add	r3, r2
 8006074:	9305      	str	r3, [sp, #20]
 8006076:	f00a 0301 	and.w	r3, sl, #1
 800607a:	46b8      	mov	r8, r7
 800607c:	9304      	str	r3, [sp, #16]
 800607e:	4607      	mov	r7, r0
 8006080:	4631      	mov	r1, r6
 8006082:	ee18 0a10 	vmov	r0, s16
 8006086:	f7ff fa75 	bl	8005574 <quorem>
 800608a:	4641      	mov	r1, r8
 800608c:	9002      	str	r0, [sp, #8]
 800608e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006092:	ee18 0a10 	vmov	r0, s16
 8006096:	f001 f973 	bl	8007380 <__mcmp>
 800609a:	463a      	mov	r2, r7
 800609c:	9003      	str	r0, [sp, #12]
 800609e:	4631      	mov	r1, r6
 80060a0:	4620      	mov	r0, r4
 80060a2:	f001 f989 	bl	80073b8 <__mdiff>
 80060a6:	68c2      	ldr	r2, [r0, #12]
 80060a8:	f109 3bff 	add.w	fp, r9, #4294967295
 80060ac:	4605      	mov	r5, r0
 80060ae:	bb02      	cbnz	r2, 80060f2 <_dtoa_r+0xa62>
 80060b0:	4601      	mov	r1, r0
 80060b2:	ee18 0a10 	vmov	r0, s16
 80060b6:	f001 f963 	bl	8007380 <__mcmp>
 80060ba:	4602      	mov	r2, r0
 80060bc:	4629      	mov	r1, r5
 80060be:	4620      	mov	r0, r4
 80060c0:	9207      	str	r2, [sp, #28]
 80060c2:	f000 fed1 	bl	8006e68 <_Bfree>
 80060c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80060ca:	ea43 0102 	orr.w	r1, r3, r2
 80060ce:	9b04      	ldr	r3, [sp, #16]
 80060d0:	430b      	orrs	r3, r1
 80060d2:	464d      	mov	r5, r9
 80060d4:	d10f      	bne.n	80060f6 <_dtoa_r+0xa66>
 80060d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80060da:	d02a      	beq.n	8006132 <_dtoa_r+0xaa2>
 80060dc:	9b03      	ldr	r3, [sp, #12]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	dd02      	ble.n	80060e8 <_dtoa_r+0xa58>
 80060e2:	9b02      	ldr	r3, [sp, #8]
 80060e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80060e8:	f88b a000 	strb.w	sl, [fp]
 80060ec:	e775      	b.n	8005fda <_dtoa_r+0x94a>
 80060ee:	4638      	mov	r0, r7
 80060f0:	e7ba      	b.n	8006068 <_dtoa_r+0x9d8>
 80060f2:	2201      	movs	r2, #1
 80060f4:	e7e2      	b.n	80060bc <_dtoa_r+0xa2c>
 80060f6:	9b03      	ldr	r3, [sp, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	db04      	blt.n	8006106 <_dtoa_r+0xa76>
 80060fc:	9906      	ldr	r1, [sp, #24]
 80060fe:	430b      	orrs	r3, r1
 8006100:	9904      	ldr	r1, [sp, #16]
 8006102:	430b      	orrs	r3, r1
 8006104:	d122      	bne.n	800614c <_dtoa_r+0xabc>
 8006106:	2a00      	cmp	r2, #0
 8006108:	ddee      	ble.n	80060e8 <_dtoa_r+0xa58>
 800610a:	ee18 1a10 	vmov	r1, s16
 800610e:	2201      	movs	r2, #1
 8006110:	4620      	mov	r0, r4
 8006112:	f001 f8c5 	bl	80072a0 <__lshift>
 8006116:	4631      	mov	r1, r6
 8006118:	ee08 0a10 	vmov	s16, r0
 800611c:	f001 f930 	bl	8007380 <__mcmp>
 8006120:	2800      	cmp	r0, #0
 8006122:	dc03      	bgt.n	800612c <_dtoa_r+0xa9c>
 8006124:	d1e0      	bne.n	80060e8 <_dtoa_r+0xa58>
 8006126:	f01a 0f01 	tst.w	sl, #1
 800612a:	d0dd      	beq.n	80060e8 <_dtoa_r+0xa58>
 800612c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006130:	d1d7      	bne.n	80060e2 <_dtoa_r+0xa52>
 8006132:	2339      	movs	r3, #57	; 0x39
 8006134:	f88b 3000 	strb.w	r3, [fp]
 8006138:	462b      	mov	r3, r5
 800613a:	461d      	mov	r5, r3
 800613c:	3b01      	subs	r3, #1
 800613e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006142:	2a39      	cmp	r2, #57	; 0x39
 8006144:	d071      	beq.n	800622a <_dtoa_r+0xb9a>
 8006146:	3201      	adds	r2, #1
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	e746      	b.n	8005fda <_dtoa_r+0x94a>
 800614c:	2a00      	cmp	r2, #0
 800614e:	dd07      	ble.n	8006160 <_dtoa_r+0xad0>
 8006150:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006154:	d0ed      	beq.n	8006132 <_dtoa_r+0xaa2>
 8006156:	f10a 0301 	add.w	r3, sl, #1
 800615a:	f88b 3000 	strb.w	r3, [fp]
 800615e:	e73c      	b.n	8005fda <_dtoa_r+0x94a>
 8006160:	9b05      	ldr	r3, [sp, #20]
 8006162:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006166:	4599      	cmp	r9, r3
 8006168:	d047      	beq.n	80061fa <_dtoa_r+0xb6a>
 800616a:	ee18 1a10 	vmov	r1, s16
 800616e:	2300      	movs	r3, #0
 8006170:	220a      	movs	r2, #10
 8006172:	4620      	mov	r0, r4
 8006174:	f000 fe9a 	bl	8006eac <__multadd>
 8006178:	45b8      	cmp	r8, r7
 800617a:	ee08 0a10 	vmov	s16, r0
 800617e:	f04f 0300 	mov.w	r3, #0
 8006182:	f04f 020a 	mov.w	r2, #10
 8006186:	4641      	mov	r1, r8
 8006188:	4620      	mov	r0, r4
 800618a:	d106      	bne.n	800619a <_dtoa_r+0xb0a>
 800618c:	f000 fe8e 	bl	8006eac <__multadd>
 8006190:	4680      	mov	r8, r0
 8006192:	4607      	mov	r7, r0
 8006194:	f109 0901 	add.w	r9, r9, #1
 8006198:	e772      	b.n	8006080 <_dtoa_r+0x9f0>
 800619a:	f000 fe87 	bl	8006eac <__multadd>
 800619e:	4639      	mov	r1, r7
 80061a0:	4680      	mov	r8, r0
 80061a2:	2300      	movs	r3, #0
 80061a4:	220a      	movs	r2, #10
 80061a6:	4620      	mov	r0, r4
 80061a8:	f000 fe80 	bl	8006eac <__multadd>
 80061ac:	4607      	mov	r7, r0
 80061ae:	e7f1      	b.n	8006194 <_dtoa_r+0xb04>
 80061b0:	9b03      	ldr	r3, [sp, #12]
 80061b2:	9302      	str	r3, [sp, #8]
 80061b4:	9d01      	ldr	r5, [sp, #4]
 80061b6:	ee18 0a10 	vmov	r0, s16
 80061ba:	4631      	mov	r1, r6
 80061bc:	f7ff f9da 	bl	8005574 <quorem>
 80061c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80061c4:	9b01      	ldr	r3, [sp, #4]
 80061c6:	f805 ab01 	strb.w	sl, [r5], #1
 80061ca:	1aea      	subs	r2, r5, r3
 80061cc:	9b02      	ldr	r3, [sp, #8]
 80061ce:	4293      	cmp	r3, r2
 80061d0:	dd09      	ble.n	80061e6 <_dtoa_r+0xb56>
 80061d2:	ee18 1a10 	vmov	r1, s16
 80061d6:	2300      	movs	r3, #0
 80061d8:	220a      	movs	r2, #10
 80061da:	4620      	mov	r0, r4
 80061dc:	f000 fe66 	bl	8006eac <__multadd>
 80061e0:	ee08 0a10 	vmov	s16, r0
 80061e4:	e7e7      	b.n	80061b6 <_dtoa_r+0xb26>
 80061e6:	9b02      	ldr	r3, [sp, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	bfc8      	it	gt
 80061ec:	461d      	movgt	r5, r3
 80061ee:	9b01      	ldr	r3, [sp, #4]
 80061f0:	bfd8      	it	le
 80061f2:	2501      	movle	r5, #1
 80061f4:	441d      	add	r5, r3
 80061f6:	f04f 0800 	mov.w	r8, #0
 80061fa:	ee18 1a10 	vmov	r1, s16
 80061fe:	2201      	movs	r2, #1
 8006200:	4620      	mov	r0, r4
 8006202:	f001 f84d 	bl	80072a0 <__lshift>
 8006206:	4631      	mov	r1, r6
 8006208:	ee08 0a10 	vmov	s16, r0
 800620c:	f001 f8b8 	bl	8007380 <__mcmp>
 8006210:	2800      	cmp	r0, #0
 8006212:	dc91      	bgt.n	8006138 <_dtoa_r+0xaa8>
 8006214:	d102      	bne.n	800621c <_dtoa_r+0xb8c>
 8006216:	f01a 0f01 	tst.w	sl, #1
 800621a:	d18d      	bne.n	8006138 <_dtoa_r+0xaa8>
 800621c:	462b      	mov	r3, r5
 800621e:	461d      	mov	r5, r3
 8006220:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006224:	2a30      	cmp	r2, #48	; 0x30
 8006226:	d0fa      	beq.n	800621e <_dtoa_r+0xb8e>
 8006228:	e6d7      	b.n	8005fda <_dtoa_r+0x94a>
 800622a:	9a01      	ldr	r2, [sp, #4]
 800622c:	429a      	cmp	r2, r3
 800622e:	d184      	bne.n	800613a <_dtoa_r+0xaaa>
 8006230:	9b00      	ldr	r3, [sp, #0]
 8006232:	3301      	adds	r3, #1
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	2331      	movs	r3, #49	; 0x31
 8006238:	7013      	strb	r3, [r2, #0]
 800623a:	e6ce      	b.n	8005fda <_dtoa_r+0x94a>
 800623c:	4b09      	ldr	r3, [pc, #36]	; (8006264 <_dtoa_r+0xbd4>)
 800623e:	f7ff ba95 	b.w	800576c <_dtoa_r+0xdc>
 8006242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006244:	2b00      	cmp	r3, #0
 8006246:	f47f aa6e 	bne.w	8005726 <_dtoa_r+0x96>
 800624a:	4b07      	ldr	r3, [pc, #28]	; (8006268 <_dtoa_r+0xbd8>)
 800624c:	f7ff ba8e 	b.w	800576c <_dtoa_r+0xdc>
 8006250:	9b02      	ldr	r3, [sp, #8]
 8006252:	2b00      	cmp	r3, #0
 8006254:	dcae      	bgt.n	80061b4 <_dtoa_r+0xb24>
 8006256:	9b06      	ldr	r3, [sp, #24]
 8006258:	2b02      	cmp	r3, #2
 800625a:	f73f aea8 	bgt.w	8005fae <_dtoa_r+0x91e>
 800625e:	e7a9      	b.n	80061b4 <_dtoa_r+0xb24>
 8006260:	08008a68 	.word	0x08008a68
 8006264:	0800886c 	.word	0x0800886c
 8006268:	080089e9 	.word	0x080089e9

0800626c <__sflush_r>:
 800626c:	898a      	ldrh	r2, [r1, #12]
 800626e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006272:	4605      	mov	r5, r0
 8006274:	0710      	lsls	r0, r2, #28
 8006276:	460c      	mov	r4, r1
 8006278:	d458      	bmi.n	800632c <__sflush_r+0xc0>
 800627a:	684b      	ldr	r3, [r1, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	dc05      	bgt.n	800628c <__sflush_r+0x20>
 8006280:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006282:	2b00      	cmp	r3, #0
 8006284:	dc02      	bgt.n	800628c <__sflush_r+0x20>
 8006286:	2000      	movs	r0, #0
 8006288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800628c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800628e:	2e00      	cmp	r6, #0
 8006290:	d0f9      	beq.n	8006286 <__sflush_r+0x1a>
 8006292:	2300      	movs	r3, #0
 8006294:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006298:	682f      	ldr	r7, [r5, #0]
 800629a:	602b      	str	r3, [r5, #0]
 800629c:	d032      	beq.n	8006304 <__sflush_r+0x98>
 800629e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062a0:	89a3      	ldrh	r3, [r4, #12]
 80062a2:	075a      	lsls	r2, r3, #29
 80062a4:	d505      	bpl.n	80062b2 <__sflush_r+0x46>
 80062a6:	6863      	ldr	r3, [r4, #4]
 80062a8:	1ac0      	subs	r0, r0, r3
 80062aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062ac:	b10b      	cbz	r3, 80062b2 <__sflush_r+0x46>
 80062ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062b0:	1ac0      	subs	r0, r0, r3
 80062b2:	2300      	movs	r3, #0
 80062b4:	4602      	mov	r2, r0
 80062b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062b8:	6a21      	ldr	r1, [r4, #32]
 80062ba:	4628      	mov	r0, r5
 80062bc:	47b0      	blx	r6
 80062be:	1c43      	adds	r3, r0, #1
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	d106      	bne.n	80062d2 <__sflush_r+0x66>
 80062c4:	6829      	ldr	r1, [r5, #0]
 80062c6:	291d      	cmp	r1, #29
 80062c8:	d82c      	bhi.n	8006324 <__sflush_r+0xb8>
 80062ca:	4a2a      	ldr	r2, [pc, #168]	; (8006374 <__sflush_r+0x108>)
 80062cc:	40ca      	lsrs	r2, r1
 80062ce:	07d6      	lsls	r6, r2, #31
 80062d0:	d528      	bpl.n	8006324 <__sflush_r+0xb8>
 80062d2:	2200      	movs	r2, #0
 80062d4:	6062      	str	r2, [r4, #4]
 80062d6:	04d9      	lsls	r1, r3, #19
 80062d8:	6922      	ldr	r2, [r4, #16]
 80062da:	6022      	str	r2, [r4, #0]
 80062dc:	d504      	bpl.n	80062e8 <__sflush_r+0x7c>
 80062de:	1c42      	adds	r2, r0, #1
 80062e0:	d101      	bne.n	80062e6 <__sflush_r+0x7a>
 80062e2:	682b      	ldr	r3, [r5, #0]
 80062e4:	b903      	cbnz	r3, 80062e8 <__sflush_r+0x7c>
 80062e6:	6560      	str	r0, [r4, #84]	; 0x54
 80062e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062ea:	602f      	str	r7, [r5, #0]
 80062ec:	2900      	cmp	r1, #0
 80062ee:	d0ca      	beq.n	8006286 <__sflush_r+0x1a>
 80062f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062f4:	4299      	cmp	r1, r3
 80062f6:	d002      	beq.n	80062fe <__sflush_r+0x92>
 80062f8:	4628      	mov	r0, r5
 80062fa:	f7fd f999 	bl	8003630 <_free_r>
 80062fe:	2000      	movs	r0, #0
 8006300:	6360      	str	r0, [r4, #52]	; 0x34
 8006302:	e7c1      	b.n	8006288 <__sflush_r+0x1c>
 8006304:	6a21      	ldr	r1, [r4, #32]
 8006306:	2301      	movs	r3, #1
 8006308:	4628      	mov	r0, r5
 800630a:	47b0      	blx	r6
 800630c:	1c41      	adds	r1, r0, #1
 800630e:	d1c7      	bne.n	80062a0 <__sflush_r+0x34>
 8006310:	682b      	ldr	r3, [r5, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0c4      	beq.n	80062a0 <__sflush_r+0x34>
 8006316:	2b1d      	cmp	r3, #29
 8006318:	d001      	beq.n	800631e <__sflush_r+0xb2>
 800631a:	2b16      	cmp	r3, #22
 800631c:	d101      	bne.n	8006322 <__sflush_r+0xb6>
 800631e:	602f      	str	r7, [r5, #0]
 8006320:	e7b1      	b.n	8006286 <__sflush_r+0x1a>
 8006322:	89a3      	ldrh	r3, [r4, #12]
 8006324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006328:	81a3      	strh	r3, [r4, #12]
 800632a:	e7ad      	b.n	8006288 <__sflush_r+0x1c>
 800632c:	690f      	ldr	r7, [r1, #16]
 800632e:	2f00      	cmp	r7, #0
 8006330:	d0a9      	beq.n	8006286 <__sflush_r+0x1a>
 8006332:	0793      	lsls	r3, r2, #30
 8006334:	680e      	ldr	r6, [r1, #0]
 8006336:	bf08      	it	eq
 8006338:	694b      	ldreq	r3, [r1, #20]
 800633a:	600f      	str	r7, [r1, #0]
 800633c:	bf18      	it	ne
 800633e:	2300      	movne	r3, #0
 8006340:	eba6 0807 	sub.w	r8, r6, r7
 8006344:	608b      	str	r3, [r1, #8]
 8006346:	f1b8 0f00 	cmp.w	r8, #0
 800634a:	dd9c      	ble.n	8006286 <__sflush_r+0x1a>
 800634c:	6a21      	ldr	r1, [r4, #32]
 800634e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006350:	4643      	mov	r3, r8
 8006352:	463a      	mov	r2, r7
 8006354:	4628      	mov	r0, r5
 8006356:	47b0      	blx	r6
 8006358:	2800      	cmp	r0, #0
 800635a:	dc06      	bgt.n	800636a <__sflush_r+0xfe>
 800635c:	89a3      	ldrh	r3, [r4, #12]
 800635e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006362:	81a3      	strh	r3, [r4, #12]
 8006364:	f04f 30ff 	mov.w	r0, #4294967295
 8006368:	e78e      	b.n	8006288 <__sflush_r+0x1c>
 800636a:	4407      	add	r7, r0
 800636c:	eba8 0800 	sub.w	r8, r8, r0
 8006370:	e7e9      	b.n	8006346 <__sflush_r+0xda>
 8006372:	bf00      	nop
 8006374:	20400001 	.word	0x20400001

08006378 <_fflush_r>:
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	690b      	ldr	r3, [r1, #16]
 800637c:	4605      	mov	r5, r0
 800637e:	460c      	mov	r4, r1
 8006380:	b913      	cbnz	r3, 8006388 <_fflush_r+0x10>
 8006382:	2500      	movs	r5, #0
 8006384:	4628      	mov	r0, r5
 8006386:	bd38      	pop	{r3, r4, r5, pc}
 8006388:	b118      	cbz	r0, 8006392 <_fflush_r+0x1a>
 800638a:	6983      	ldr	r3, [r0, #24]
 800638c:	b90b      	cbnz	r3, 8006392 <_fflush_r+0x1a>
 800638e:	f000 f887 	bl	80064a0 <__sinit>
 8006392:	4b14      	ldr	r3, [pc, #80]	; (80063e4 <_fflush_r+0x6c>)
 8006394:	429c      	cmp	r4, r3
 8006396:	d11b      	bne.n	80063d0 <_fflush_r+0x58>
 8006398:	686c      	ldr	r4, [r5, #4]
 800639a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0ef      	beq.n	8006382 <_fflush_r+0xa>
 80063a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80063a4:	07d0      	lsls	r0, r2, #31
 80063a6:	d404      	bmi.n	80063b2 <_fflush_r+0x3a>
 80063a8:	0599      	lsls	r1, r3, #22
 80063aa:	d402      	bmi.n	80063b2 <_fflush_r+0x3a>
 80063ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063ae:	f000 fc88 	bl	8006cc2 <__retarget_lock_acquire_recursive>
 80063b2:	4628      	mov	r0, r5
 80063b4:	4621      	mov	r1, r4
 80063b6:	f7ff ff59 	bl	800626c <__sflush_r>
 80063ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063bc:	07da      	lsls	r2, r3, #31
 80063be:	4605      	mov	r5, r0
 80063c0:	d4e0      	bmi.n	8006384 <_fflush_r+0xc>
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	059b      	lsls	r3, r3, #22
 80063c6:	d4dd      	bmi.n	8006384 <_fflush_r+0xc>
 80063c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063ca:	f000 fc7b 	bl	8006cc4 <__retarget_lock_release_recursive>
 80063ce:	e7d9      	b.n	8006384 <_fflush_r+0xc>
 80063d0:	4b05      	ldr	r3, [pc, #20]	; (80063e8 <_fflush_r+0x70>)
 80063d2:	429c      	cmp	r4, r3
 80063d4:	d101      	bne.n	80063da <_fflush_r+0x62>
 80063d6:	68ac      	ldr	r4, [r5, #8]
 80063d8:	e7df      	b.n	800639a <_fflush_r+0x22>
 80063da:	4b04      	ldr	r3, [pc, #16]	; (80063ec <_fflush_r+0x74>)
 80063dc:	429c      	cmp	r4, r3
 80063de:	bf08      	it	eq
 80063e0:	68ec      	ldreq	r4, [r5, #12]
 80063e2:	e7da      	b.n	800639a <_fflush_r+0x22>
 80063e4:	08008a9c 	.word	0x08008a9c
 80063e8:	08008abc 	.word	0x08008abc
 80063ec:	08008a7c 	.word	0x08008a7c

080063f0 <std>:
 80063f0:	2300      	movs	r3, #0
 80063f2:	b510      	push	{r4, lr}
 80063f4:	4604      	mov	r4, r0
 80063f6:	e9c0 3300 	strd	r3, r3, [r0]
 80063fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063fe:	6083      	str	r3, [r0, #8]
 8006400:	8181      	strh	r1, [r0, #12]
 8006402:	6643      	str	r3, [r0, #100]	; 0x64
 8006404:	81c2      	strh	r2, [r0, #14]
 8006406:	6183      	str	r3, [r0, #24]
 8006408:	4619      	mov	r1, r3
 800640a:	2208      	movs	r2, #8
 800640c:	305c      	adds	r0, #92	; 0x5c
 800640e:	f7fd f907 	bl	8003620 <memset>
 8006412:	4b05      	ldr	r3, [pc, #20]	; (8006428 <std+0x38>)
 8006414:	6263      	str	r3, [r4, #36]	; 0x24
 8006416:	4b05      	ldr	r3, [pc, #20]	; (800642c <std+0x3c>)
 8006418:	62a3      	str	r3, [r4, #40]	; 0x28
 800641a:	4b05      	ldr	r3, [pc, #20]	; (8006430 <std+0x40>)
 800641c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800641e:	4b05      	ldr	r3, [pc, #20]	; (8006434 <std+0x44>)
 8006420:	6224      	str	r4, [r4, #32]
 8006422:	6323      	str	r3, [r4, #48]	; 0x30
 8006424:	bd10      	pop	{r4, pc}
 8006426:	bf00      	nop
 8006428:	08007d11 	.word	0x08007d11
 800642c:	08007d33 	.word	0x08007d33
 8006430:	08007d6b 	.word	0x08007d6b
 8006434:	08007d8f 	.word	0x08007d8f

08006438 <_cleanup_r>:
 8006438:	4901      	ldr	r1, [pc, #4]	; (8006440 <_cleanup_r+0x8>)
 800643a:	f000 b8af 	b.w	800659c <_fwalk_reent>
 800643e:	bf00      	nop
 8006440:	08006379 	.word	0x08006379

08006444 <__sfmoreglue>:
 8006444:	b570      	push	{r4, r5, r6, lr}
 8006446:	2268      	movs	r2, #104	; 0x68
 8006448:	1e4d      	subs	r5, r1, #1
 800644a:	4355      	muls	r5, r2
 800644c:	460e      	mov	r6, r1
 800644e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006452:	f7fd f959 	bl	8003708 <_malloc_r>
 8006456:	4604      	mov	r4, r0
 8006458:	b140      	cbz	r0, 800646c <__sfmoreglue+0x28>
 800645a:	2100      	movs	r1, #0
 800645c:	e9c0 1600 	strd	r1, r6, [r0]
 8006460:	300c      	adds	r0, #12
 8006462:	60a0      	str	r0, [r4, #8]
 8006464:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006468:	f7fd f8da 	bl	8003620 <memset>
 800646c:	4620      	mov	r0, r4
 800646e:	bd70      	pop	{r4, r5, r6, pc}

08006470 <__sfp_lock_acquire>:
 8006470:	4801      	ldr	r0, [pc, #4]	; (8006478 <__sfp_lock_acquire+0x8>)
 8006472:	f000 bc26 	b.w	8006cc2 <__retarget_lock_acquire_recursive>
 8006476:	bf00      	nop
 8006478:	20000c8d 	.word	0x20000c8d

0800647c <__sfp_lock_release>:
 800647c:	4801      	ldr	r0, [pc, #4]	; (8006484 <__sfp_lock_release+0x8>)
 800647e:	f000 bc21 	b.w	8006cc4 <__retarget_lock_release_recursive>
 8006482:	bf00      	nop
 8006484:	20000c8d 	.word	0x20000c8d

08006488 <__sinit_lock_acquire>:
 8006488:	4801      	ldr	r0, [pc, #4]	; (8006490 <__sinit_lock_acquire+0x8>)
 800648a:	f000 bc1a 	b.w	8006cc2 <__retarget_lock_acquire_recursive>
 800648e:	bf00      	nop
 8006490:	20000c8e 	.word	0x20000c8e

08006494 <__sinit_lock_release>:
 8006494:	4801      	ldr	r0, [pc, #4]	; (800649c <__sinit_lock_release+0x8>)
 8006496:	f000 bc15 	b.w	8006cc4 <__retarget_lock_release_recursive>
 800649a:	bf00      	nop
 800649c:	20000c8e 	.word	0x20000c8e

080064a0 <__sinit>:
 80064a0:	b510      	push	{r4, lr}
 80064a2:	4604      	mov	r4, r0
 80064a4:	f7ff fff0 	bl	8006488 <__sinit_lock_acquire>
 80064a8:	69a3      	ldr	r3, [r4, #24]
 80064aa:	b11b      	cbz	r3, 80064b4 <__sinit+0x14>
 80064ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064b0:	f7ff bff0 	b.w	8006494 <__sinit_lock_release>
 80064b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80064b8:	6523      	str	r3, [r4, #80]	; 0x50
 80064ba:	4b13      	ldr	r3, [pc, #76]	; (8006508 <__sinit+0x68>)
 80064bc:	4a13      	ldr	r2, [pc, #76]	; (800650c <__sinit+0x6c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80064c2:	42a3      	cmp	r3, r4
 80064c4:	bf04      	itt	eq
 80064c6:	2301      	moveq	r3, #1
 80064c8:	61a3      	streq	r3, [r4, #24]
 80064ca:	4620      	mov	r0, r4
 80064cc:	f000 f820 	bl	8006510 <__sfp>
 80064d0:	6060      	str	r0, [r4, #4]
 80064d2:	4620      	mov	r0, r4
 80064d4:	f000 f81c 	bl	8006510 <__sfp>
 80064d8:	60a0      	str	r0, [r4, #8]
 80064da:	4620      	mov	r0, r4
 80064dc:	f000 f818 	bl	8006510 <__sfp>
 80064e0:	2200      	movs	r2, #0
 80064e2:	60e0      	str	r0, [r4, #12]
 80064e4:	2104      	movs	r1, #4
 80064e6:	6860      	ldr	r0, [r4, #4]
 80064e8:	f7ff ff82 	bl	80063f0 <std>
 80064ec:	68a0      	ldr	r0, [r4, #8]
 80064ee:	2201      	movs	r2, #1
 80064f0:	2109      	movs	r1, #9
 80064f2:	f7ff ff7d 	bl	80063f0 <std>
 80064f6:	68e0      	ldr	r0, [r4, #12]
 80064f8:	2202      	movs	r2, #2
 80064fa:	2112      	movs	r1, #18
 80064fc:	f7ff ff78 	bl	80063f0 <std>
 8006500:	2301      	movs	r3, #1
 8006502:	61a3      	str	r3, [r4, #24]
 8006504:	e7d2      	b.n	80064ac <__sinit+0xc>
 8006506:	bf00      	nop
 8006508:	08008858 	.word	0x08008858
 800650c:	08006439 	.word	0x08006439

08006510 <__sfp>:
 8006510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006512:	4607      	mov	r7, r0
 8006514:	f7ff ffac 	bl	8006470 <__sfp_lock_acquire>
 8006518:	4b1e      	ldr	r3, [pc, #120]	; (8006594 <__sfp+0x84>)
 800651a:	681e      	ldr	r6, [r3, #0]
 800651c:	69b3      	ldr	r3, [r6, #24]
 800651e:	b913      	cbnz	r3, 8006526 <__sfp+0x16>
 8006520:	4630      	mov	r0, r6
 8006522:	f7ff ffbd 	bl	80064a0 <__sinit>
 8006526:	3648      	adds	r6, #72	; 0x48
 8006528:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800652c:	3b01      	subs	r3, #1
 800652e:	d503      	bpl.n	8006538 <__sfp+0x28>
 8006530:	6833      	ldr	r3, [r6, #0]
 8006532:	b30b      	cbz	r3, 8006578 <__sfp+0x68>
 8006534:	6836      	ldr	r6, [r6, #0]
 8006536:	e7f7      	b.n	8006528 <__sfp+0x18>
 8006538:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800653c:	b9d5      	cbnz	r5, 8006574 <__sfp+0x64>
 800653e:	4b16      	ldr	r3, [pc, #88]	; (8006598 <__sfp+0x88>)
 8006540:	60e3      	str	r3, [r4, #12]
 8006542:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006546:	6665      	str	r5, [r4, #100]	; 0x64
 8006548:	f000 fbba 	bl	8006cc0 <__retarget_lock_init_recursive>
 800654c:	f7ff ff96 	bl	800647c <__sfp_lock_release>
 8006550:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006554:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006558:	6025      	str	r5, [r4, #0]
 800655a:	61a5      	str	r5, [r4, #24]
 800655c:	2208      	movs	r2, #8
 800655e:	4629      	mov	r1, r5
 8006560:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006564:	f7fd f85c 	bl	8003620 <memset>
 8006568:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800656c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006570:	4620      	mov	r0, r4
 8006572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006574:	3468      	adds	r4, #104	; 0x68
 8006576:	e7d9      	b.n	800652c <__sfp+0x1c>
 8006578:	2104      	movs	r1, #4
 800657a:	4638      	mov	r0, r7
 800657c:	f7ff ff62 	bl	8006444 <__sfmoreglue>
 8006580:	4604      	mov	r4, r0
 8006582:	6030      	str	r0, [r6, #0]
 8006584:	2800      	cmp	r0, #0
 8006586:	d1d5      	bne.n	8006534 <__sfp+0x24>
 8006588:	f7ff ff78 	bl	800647c <__sfp_lock_release>
 800658c:	230c      	movs	r3, #12
 800658e:	603b      	str	r3, [r7, #0]
 8006590:	e7ee      	b.n	8006570 <__sfp+0x60>
 8006592:	bf00      	nop
 8006594:	08008858 	.word	0x08008858
 8006598:	ffff0001 	.word	0xffff0001

0800659c <_fwalk_reent>:
 800659c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065a0:	4606      	mov	r6, r0
 80065a2:	4688      	mov	r8, r1
 80065a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80065a8:	2700      	movs	r7, #0
 80065aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065ae:	f1b9 0901 	subs.w	r9, r9, #1
 80065b2:	d505      	bpl.n	80065c0 <_fwalk_reent+0x24>
 80065b4:	6824      	ldr	r4, [r4, #0]
 80065b6:	2c00      	cmp	r4, #0
 80065b8:	d1f7      	bne.n	80065aa <_fwalk_reent+0xe>
 80065ba:	4638      	mov	r0, r7
 80065bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065c0:	89ab      	ldrh	r3, [r5, #12]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d907      	bls.n	80065d6 <_fwalk_reent+0x3a>
 80065c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065ca:	3301      	adds	r3, #1
 80065cc:	d003      	beq.n	80065d6 <_fwalk_reent+0x3a>
 80065ce:	4629      	mov	r1, r5
 80065d0:	4630      	mov	r0, r6
 80065d2:	47c0      	blx	r8
 80065d4:	4307      	orrs	r7, r0
 80065d6:	3568      	adds	r5, #104	; 0x68
 80065d8:	e7e9      	b.n	80065ae <_fwalk_reent+0x12>

080065da <rshift>:
 80065da:	6903      	ldr	r3, [r0, #16]
 80065dc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80065e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80065e4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80065e8:	f100 0414 	add.w	r4, r0, #20
 80065ec:	dd45      	ble.n	800667a <rshift+0xa0>
 80065ee:	f011 011f 	ands.w	r1, r1, #31
 80065f2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80065f6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80065fa:	d10c      	bne.n	8006616 <rshift+0x3c>
 80065fc:	f100 0710 	add.w	r7, r0, #16
 8006600:	4629      	mov	r1, r5
 8006602:	42b1      	cmp	r1, r6
 8006604:	d334      	bcc.n	8006670 <rshift+0x96>
 8006606:	1a9b      	subs	r3, r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	1eea      	subs	r2, r5, #3
 800660c:	4296      	cmp	r6, r2
 800660e:	bf38      	it	cc
 8006610:	2300      	movcc	r3, #0
 8006612:	4423      	add	r3, r4
 8006614:	e015      	b.n	8006642 <rshift+0x68>
 8006616:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800661a:	f1c1 0820 	rsb	r8, r1, #32
 800661e:	40cf      	lsrs	r7, r1
 8006620:	f105 0e04 	add.w	lr, r5, #4
 8006624:	46a1      	mov	r9, r4
 8006626:	4576      	cmp	r6, lr
 8006628:	46f4      	mov	ip, lr
 800662a:	d815      	bhi.n	8006658 <rshift+0x7e>
 800662c:	1a9a      	subs	r2, r3, r2
 800662e:	0092      	lsls	r2, r2, #2
 8006630:	3a04      	subs	r2, #4
 8006632:	3501      	adds	r5, #1
 8006634:	42ae      	cmp	r6, r5
 8006636:	bf38      	it	cc
 8006638:	2200      	movcc	r2, #0
 800663a:	18a3      	adds	r3, r4, r2
 800663c:	50a7      	str	r7, [r4, r2]
 800663e:	b107      	cbz	r7, 8006642 <rshift+0x68>
 8006640:	3304      	adds	r3, #4
 8006642:	1b1a      	subs	r2, r3, r4
 8006644:	42a3      	cmp	r3, r4
 8006646:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800664a:	bf08      	it	eq
 800664c:	2300      	moveq	r3, #0
 800664e:	6102      	str	r2, [r0, #16]
 8006650:	bf08      	it	eq
 8006652:	6143      	streq	r3, [r0, #20]
 8006654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006658:	f8dc c000 	ldr.w	ip, [ip]
 800665c:	fa0c fc08 	lsl.w	ip, ip, r8
 8006660:	ea4c 0707 	orr.w	r7, ip, r7
 8006664:	f849 7b04 	str.w	r7, [r9], #4
 8006668:	f85e 7b04 	ldr.w	r7, [lr], #4
 800666c:	40cf      	lsrs	r7, r1
 800666e:	e7da      	b.n	8006626 <rshift+0x4c>
 8006670:	f851 cb04 	ldr.w	ip, [r1], #4
 8006674:	f847 cf04 	str.w	ip, [r7, #4]!
 8006678:	e7c3      	b.n	8006602 <rshift+0x28>
 800667a:	4623      	mov	r3, r4
 800667c:	e7e1      	b.n	8006642 <rshift+0x68>

0800667e <__hexdig_fun>:
 800667e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006682:	2b09      	cmp	r3, #9
 8006684:	d802      	bhi.n	800668c <__hexdig_fun+0xe>
 8006686:	3820      	subs	r0, #32
 8006688:	b2c0      	uxtb	r0, r0
 800668a:	4770      	bx	lr
 800668c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006690:	2b05      	cmp	r3, #5
 8006692:	d801      	bhi.n	8006698 <__hexdig_fun+0x1a>
 8006694:	3847      	subs	r0, #71	; 0x47
 8006696:	e7f7      	b.n	8006688 <__hexdig_fun+0xa>
 8006698:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800669c:	2b05      	cmp	r3, #5
 800669e:	d801      	bhi.n	80066a4 <__hexdig_fun+0x26>
 80066a0:	3827      	subs	r0, #39	; 0x27
 80066a2:	e7f1      	b.n	8006688 <__hexdig_fun+0xa>
 80066a4:	2000      	movs	r0, #0
 80066a6:	4770      	bx	lr

080066a8 <__gethex>:
 80066a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ac:	ed2d 8b02 	vpush	{d8}
 80066b0:	b089      	sub	sp, #36	; 0x24
 80066b2:	ee08 0a10 	vmov	s16, r0
 80066b6:	9304      	str	r3, [sp, #16]
 80066b8:	4bb4      	ldr	r3, [pc, #720]	; (800698c <__gethex+0x2e4>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	9301      	str	r3, [sp, #4]
 80066be:	4618      	mov	r0, r3
 80066c0:	468b      	mov	fp, r1
 80066c2:	4690      	mov	r8, r2
 80066c4:	f7f9 fd8c 	bl	80001e0 <strlen>
 80066c8:	9b01      	ldr	r3, [sp, #4]
 80066ca:	f8db 2000 	ldr.w	r2, [fp]
 80066ce:	4403      	add	r3, r0
 80066d0:	4682      	mov	sl, r0
 80066d2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80066d6:	9305      	str	r3, [sp, #20]
 80066d8:	1c93      	adds	r3, r2, #2
 80066da:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80066de:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80066e2:	32fe      	adds	r2, #254	; 0xfe
 80066e4:	18d1      	adds	r1, r2, r3
 80066e6:	461f      	mov	r7, r3
 80066e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80066ec:	9100      	str	r1, [sp, #0]
 80066ee:	2830      	cmp	r0, #48	; 0x30
 80066f0:	d0f8      	beq.n	80066e4 <__gethex+0x3c>
 80066f2:	f7ff ffc4 	bl	800667e <__hexdig_fun>
 80066f6:	4604      	mov	r4, r0
 80066f8:	2800      	cmp	r0, #0
 80066fa:	d13a      	bne.n	8006772 <__gethex+0xca>
 80066fc:	9901      	ldr	r1, [sp, #4]
 80066fe:	4652      	mov	r2, sl
 8006700:	4638      	mov	r0, r7
 8006702:	f001 fb48 	bl	8007d96 <strncmp>
 8006706:	4605      	mov	r5, r0
 8006708:	2800      	cmp	r0, #0
 800670a:	d168      	bne.n	80067de <__gethex+0x136>
 800670c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006710:	eb07 060a 	add.w	r6, r7, sl
 8006714:	f7ff ffb3 	bl	800667e <__hexdig_fun>
 8006718:	2800      	cmp	r0, #0
 800671a:	d062      	beq.n	80067e2 <__gethex+0x13a>
 800671c:	4633      	mov	r3, r6
 800671e:	7818      	ldrb	r0, [r3, #0]
 8006720:	2830      	cmp	r0, #48	; 0x30
 8006722:	461f      	mov	r7, r3
 8006724:	f103 0301 	add.w	r3, r3, #1
 8006728:	d0f9      	beq.n	800671e <__gethex+0x76>
 800672a:	f7ff ffa8 	bl	800667e <__hexdig_fun>
 800672e:	2301      	movs	r3, #1
 8006730:	fab0 f480 	clz	r4, r0
 8006734:	0964      	lsrs	r4, r4, #5
 8006736:	4635      	mov	r5, r6
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	463a      	mov	r2, r7
 800673c:	4616      	mov	r6, r2
 800673e:	3201      	adds	r2, #1
 8006740:	7830      	ldrb	r0, [r6, #0]
 8006742:	f7ff ff9c 	bl	800667e <__hexdig_fun>
 8006746:	2800      	cmp	r0, #0
 8006748:	d1f8      	bne.n	800673c <__gethex+0x94>
 800674a:	9901      	ldr	r1, [sp, #4]
 800674c:	4652      	mov	r2, sl
 800674e:	4630      	mov	r0, r6
 8006750:	f001 fb21 	bl	8007d96 <strncmp>
 8006754:	b980      	cbnz	r0, 8006778 <__gethex+0xd0>
 8006756:	b94d      	cbnz	r5, 800676c <__gethex+0xc4>
 8006758:	eb06 050a 	add.w	r5, r6, sl
 800675c:	462a      	mov	r2, r5
 800675e:	4616      	mov	r6, r2
 8006760:	3201      	adds	r2, #1
 8006762:	7830      	ldrb	r0, [r6, #0]
 8006764:	f7ff ff8b 	bl	800667e <__hexdig_fun>
 8006768:	2800      	cmp	r0, #0
 800676a:	d1f8      	bne.n	800675e <__gethex+0xb6>
 800676c:	1bad      	subs	r5, r5, r6
 800676e:	00ad      	lsls	r5, r5, #2
 8006770:	e004      	b.n	800677c <__gethex+0xd4>
 8006772:	2400      	movs	r4, #0
 8006774:	4625      	mov	r5, r4
 8006776:	e7e0      	b.n	800673a <__gethex+0x92>
 8006778:	2d00      	cmp	r5, #0
 800677a:	d1f7      	bne.n	800676c <__gethex+0xc4>
 800677c:	7833      	ldrb	r3, [r6, #0]
 800677e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006782:	2b50      	cmp	r3, #80	; 0x50
 8006784:	d13b      	bne.n	80067fe <__gethex+0x156>
 8006786:	7873      	ldrb	r3, [r6, #1]
 8006788:	2b2b      	cmp	r3, #43	; 0x2b
 800678a:	d02c      	beq.n	80067e6 <__gethex+0x13e>
 800678c:	2b2d      	cmp	r3, #45	; 0x2d
 800678e:	d02e      	beq.n	80067ee <__gethex+0x146>
 8006790:	1c71      	adds	r1, r6, #1
 8006792:	f04f 0900 	mov.w	r9, #0
 8006796:	7808      	ldrb	r0, [r1, #0]
 8006798:	f7ff ff71 	bl	800667e <__hexdig_fun>
 800679c:	1e43      	subs	r3, r0, #1
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b18      	cmp	r3, #24
 80067a2:	d82c      	bhi.n	80067fe <__gethex+0x156>
 80067a4:	f1a0 0210 	sub.w	r2, r0, #16
 80067a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80067ac:	f7ff ff67 	bl	800667e <__hexdig_fun>
 80067b0:	1e43      	subs	r3, r0, #1
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b18      	cmp	r3, #24
 80067b6:	d91d      	bls.n	80067f4 <__gethex+0x14c>
 80067b8:	f1b9 0f00 	cmp.w	r9, #0
 80067bc:	d000      	beq.n	80067c0 <__gethex+0x118>
 80067be:	4252      	negs	r2, r2
 80067c0:	4415      	add	r5, r2
 80067c2:	f8cb 1000 	str.w	r1, [fp]
 80067c6:	b1e4      	cbz	r4, 8006802 <__gethex+0x15a>
 80067c8:	9b00      	ldr	r3, [sp, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	bf14      	ite	ne
 80067ce:	2700      	movne	r7, #0
 80067d0:	2706      	moveq	r7, #6
 80067d2:	4638      	mov	r0, r7
 80067d4:	b009      	add	sp, #36	; 0x24
 80067d6:	ecbd 8b02 	vpop	{d8}
 80067da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067de:	463e      	mov	r6, r7
 80067e0:	4625      	mov	r5, r4
 80067e2:	2401      	movs	r4, #1
 80067e4:	e7ca      	b.n	800677c <__gethex+0xd4>
 80067e6:	f04f 0900 	mov.w	r9, #0
 80067ea:	1cb1      	adds	r1, r6, #2
 80067ec:	e7d3      	b.n	8006796 <__gethex+0xee>
 80067ee:	f04f 0901 	mov.w	r9, #1
 80067f2:	e7fa      	b.n	80067ea <__gethex+0x142>
 80067f4:	230a      	movs	r3, #10
 80067f6:	fb03 0202 	mla	r2, r3, r2, r0
 80067fa:	3a10      	subs	r2, #16
 80067fc:	e7d4      	b.n	80067a8 <__gethex+0x100>
 80067fe:	4631      	mov	r1, r6
 8006800:	e7df      	b.n	80067c2 <__gethex+0x11a>
 8006802:	1bf3      	subs	r3, r6, r7
 8006804:	3b01      	subs	r3, #1
 8006806:	4621      	mov	r1, r4
 8006808:	2b07      	cmp	r3, #7
 800680a:	dc0b      	bgt.n	8006824 <__gethex+0x17c>
 800680c:	ee18 0a10 	vmov	r0, s16
 8006810:	f000 faea 	bl	8006de8 <_Balloc>
 8006814:	4604      	mov	r4, r0
 8006816:	b940      	cbnz	r0, 800682a <__gethex+0x182>
 8006818:	4b5d      	ldr	r3, [pc, #372]	; (8006990 <__gethex+0x2e8>)
 800681a:	4602      	mov	r2, r0
 800681c:	21de      	movs	r1, #222	; 0xde
 800681e:	485d      	ldr	r0, [pc, #372]	; (8006994 <__gethex+0x2ec>)
 8006820:	f001 faec 	bl	8007dfc <__assert_func>
 8006824:	3101      	adds	r1, #1
 8006826:	105b      	asrs	r3, r3, #1
 8006828:	e7ee      	b.n	8006808 <__gethex+0x160>
 800682a:	f100 0914 	add.w	r9, r0, #20
 800682e:	f04f 0b00 	mov.w	fp, #0
 8006832:	f1ca 0301 	rsb	r3, sl, #1
 8006836:	f8cd 9008 	str.w	r9, [sp, #8]
 800683a:	f8cd b000 	str.w	fp, [sp]
 800683e:	9306      	str	r3, [sp, #24]
 8006840:	42b7      	cmp	r7, r6
 8006842:	d340      	bcc.n	80068c6 <__gethex+0x21e>
 8006844:	9802      	ldr	r0, [sp, #8]
 8006846:	9b00      	ldr	r3, [sp, #0]
 8006848:	f840 3b04 	str.w	r3, [r0], #4
 800684c:	eba0 0009 	sub.w	r0, r0, r9
 8006850:	1080      	asrs	r0, r0, #2
 8006852:	0146      	lsls	r6, r0, #5
 8006854:	6120      	str	r0, [r4, #16]
 8006856:	4618      	mov	r0, r3
 8006858:	f000 fbb8 	bl	8006fcc <__hi0bits>
 800685c:	1a30      	subs	r0, r6, r0
 800685e:	f8d8 6000 	ldr.w	r6, [r8]
 8006862:	42b0      	cmp	r0, r6
 8006864:	dd63      	ble.n	800692e <__gethex+0x286>
 8006866:	1b87      	subs	r7, r0, r6
 8006868:	4639      	mov	r1, r7
 800686a:	4620      	mov	r0, r4
 800686c:	f000 ff5c 	bl	8007728 <__any_on>
 8006870:	4682      	mov	sl, r0
 8006872:	b1a8      	cbz	r0, 80068a0 <__gethex+0x1f8>
 8006874:	1e7b      	subs	r3, r7, #1
 8006876:	1159      	asrs	r1, r3, #5
 8006878:	f003 021f 	and.w	r2, r3, #31
 800687c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006880:	f04f 0a01 	mov.w	sl, #1
 8006884:	fa0a f202 	lsl.w	r2, sl, r2
 8006888:	420a      	tst	r2, r1
 800688a:	d009      	beq.n	80068a0 <__gethex+0x1f8>
 800688c:	4553      	cmp	r3, sl
 800688e:	dd05      	ble.n	800689c <__gethex+0x1f4>
 8006890:	1eb9      	subs	r1, r7, #2
 8006892:	4620      	mov	r0, r4
 8006894:	f000 ff48 	bl	8007728 <__any_on>
 8006898:	2800      	cmp	r0, #0
 800689a:	d145      	bne.n	8006928 <__gethex+0x280>
 800689c:	f04f 0a02 	mov.w	sl, #2
 80068a0:	4639      	mov	r1, r7
 80068a2:	4620      	mov	r0, r4
 80068a4:	f7ff fe99 	bl	80065da <rshift>
 80068a8:	443d      	add	r5, r7
 80068aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80068ae:	42ab      	cmp	r3, r5
 80068b0:	da4c      	bge.n	800694c <__gethex+0x2a4>
 80068b2:	ee18 0a10 	vmov	r0, s16
 80068b6:	4621      	mov	r1, r4
 80068b8:	f000 fad6 	bl	8006e68 <_Bfree>
 80068bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80068be:	2300      	movs	r3, #0
 80068c0:	6013      	str	r3, [r2, #0]
 80068c2:	27a3      	movs	r7, #163	; 0xa3
 80068c4:	e785      	b.n	80067d2 <__gethex+0x12a>
 80068c6:	1e73      	subs	r3, r6, #1
 80068c8:	9a05      	ldr	r2, [sp, #20]
 80068ca:	9303      	str	r3, [sp, #12]
 80068cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d019      	beq.n	8006908 <__gethex+0x260>
 80068d4:	f1bb 0f20 	cmp.w	fp, #32
 80068d8:	d107      	bne.n	80068ea <__gethex+0x242>
 80068da:	9b02      	ldr	r3, [sp, #8]
 80068dc:	9a00      	ldr	r2, [sp, #0]
 80068de:	f843 2b04 	str.w	r2, [r3], #4
 80068e2:	9302      	str	r3, [sp, #8]
 80068e4:	2300      	movs	r3, #0
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	469b      	mov	fp, r3
 80068ea:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80068ee:	f7ff fec6 	bl	800667e <__hexdig_fun>
 80068f2:	9b00      	ldr	r3, [sp, #0]
 80068f4:	f000 000f 	and.w	r0, r0, #15
 80068f8:	fa00 f00b 	lsl.w	r0, r0, fp
 80068fc:	4303      	orrs	r3, r0
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	f10b 0b04 	add.w	fp, fp, #4
 8006904:	9b03      	ldr	r3, [sp, #12]
 8006906:	e00d      	b.n	8006924 <__gethex+0x27c>
 8006908:	9b03      	ldr	r3, [sp, #12]
 800690a:	9a06      	ldr	r2, [sp, #24]
 800690c:	4413      	add	r3, r2
 800690e:	42bb      	cmp	r3, r7
 8006910:	d3e0      	bcc.n	80068d4 <__gethex+0x22c>
 8006912:	4618      	mov	r0, r3
 8006914:	9901      	ldr	r1, [sp, #4]
 8006916:	9307      	str	r3, [sp, #28]
 8006918:	4652      	mov	r2, sl
 800691a:	f001 fa3c 	bl	8007d96 <strncmp>
 800691e:	9b07      	ldr	r3, [sp, #28]
 8006920:	2800      	cmp	r0, #0
 8006922:	d1d7      	bne.n	80068d4 <__gethex+0x22c>
 8006924:	461e      	mov	r6, r3
 8006926:	e78b      	b.n	8006840 <__gethex+0x198>
 8006928:	f04f 0a03 	mov.w	sl, #3
 800692c:	e7b8      	b.n	80068a0 <__gethex+0x1f8>
 800692e:	da0a      	bge.n	8006946 <__gethex+0x29e>
 8006930:	1a37      	subs	r7, r6, r0
 8006932:	4621      	mov	r1, r4
 8006934:	ee18 0a10 	vmov	r0, s16
 8006938:	463a      	mov	r2, r7
 800693a:	f000 fcb1 	bl	80072a0 <__lshift>
 800693e:	1bed      	subs	r5, r5, r7
 8006940:	4604      	mov	r4, r0
 8006942:	f100 0914 	add.w	r9, r0, #20
 8006946:	f04f 0a00 	mov.w	sl, #0
 800694a:	e7ae      	b.n	80068aa <__gethex+0x202>
 800694c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006950:	42a8      	cmp	r0, r5
 8006952:	dd72      	ble.n	8006a3a <__gethex+0x392>
 8006954:	1b45      	subs	r5, r0, r5
 8006956:	42ae      	cmp	r6, r5
 8006958:	dc36      	bgt.n	80069c8 <__gethex+0x320>
 800695a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800695e:	2b02      	cmp	r3, #2
 8006960:	d02a      	beq.n	80069b8 <__gethex+0x310>
 8006962:	2b03      	cmp	r3, #3
 8006964:	d02c      	beq.n	80069c0 <__gethex+0x318>
 8006966:	2b01      	cmp	r3, #1
 8006968:	d11c      	bne.n	80069a4 <__gethex+0x2fc>
 800696a:	42ae      	cmp	r6, r5
 800696c:	d11a      	bne.n	80069a4 <__gethex+0x2fc>
 800696e:	2e01      	cmp	r6, #1
 8006970:	d112      	bne.n	8006998 <__gethex+0x2f0>
 8006972:	9a04      	ldr	r2, [sp, #16]
 8006974:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006978:	6013      	str	r3, [r2, #0]
 800697a:	2301      	movs	r3, #1
 800697c:	6123      	str	r3, [r4, #16]
 800697e:	f8c9 3000 	str.w	r3, [r9]
 8006982:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006984:	2762      	movs	r7, #98	; 0x62
 8006986:	601c      	str	r4, [r3, #0]
 8006988:	e723      	b.n	80067d2 <__gethex+0x12a>
 800698a:	bf00      	nop
 800698c:	08008b44 	.word	0x08008b44
 8006990:	08008a68 	.word	0x08008a68
 8006994:	08008adc 	.word	0x08008adc
 8006998:	1e71      	subs	r1, r6, #1
 800699a:	4620      	mov	r0, r4
 800699c:	f000 fec4 	bl	8007728 <__any_on>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	d1e6      	bne.n	8006972 <__gethex+0x2ca>
 80069a4:	ee18 0a10 	vmov	r0, s16
 80069a8:	4621      	mov	r1, r4
 80069aa:	f000 fa5d 	bl	8006e68 <_Bfree>
 80069ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80069b0:	2300      	movs	r3, #0
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	2750      	movs	r7, #80	; 0x50
 80069b6:	e70c      	b.n	80067d2 <__gethex+0x12a>
 80069b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1f2      	bne.n	80069a4 <__gethex+0x2fc>
 80069be:	e7d8      	b.n	8006972 <__gethex+0x2ca>
 80069c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1d5      	bne.n	8006972 <__gethex+0x2ca>
 80069c6:	e7ed      	b.n	80069a4 <__gethex+0x2fc>
 80069c8:	1e6f      	subs	r7, r5, #1
 80069ca:	f1ba 0f00 	cmp.w	sl, #0
 80069ce:	d131      	bne.n	8006a34 <__gethex+0x38c>
 80069d0:	b127      	cbz	r7, 80069dc <__gethex+0x334>
 80069d2:	4639      	mov	r1, r7
 80069d4:	4620      	mov	r0, r4
 80069d6:	f000 fea7 	bl	8007728 <__any_on>
 80069da:	4682      	mov	sl, r0
 80069dc:	117b      	asrs	r3, r7, #5
 80069de:	2101      	movs	r1, #1
 80069e0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80069e4:	f007 071f 	and.w	r7, r7, #31
 80069e8:	fa01 f707 	lsl.w	r7, r1, r7
 80069ec:	421f      	tst	r7, r3
 80069ee:	4629      	mov	r1, r5
 80069f0:	4620      	mov	r0, r4
 80069f2:	bf18      	it	ne
 80069f4:	f04a 0a02 	orrne.w	sl, sl, #2
 80069f8:	1b76      	subs	r6, r6, r5
 80069fa:	f7ff fdee 	bl	80065da <rshift>
 80069fe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006a02:	2702      	movs	r7, #2
 8006a04:	f1ba 0f00 	cmp.w	sl, #0
 8006a08:	d048      	beq.n	8006a9c <__gethex+0x3f4>
 8006a0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d015      	beq.n	8006a3e <__gethex+0x396>
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	d017      	beq.n	8006a46 <__gethex+0x39e>
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d109      	bne.n	8006a2e <__gethex+0x386>
 8006a1a:	f01a 0f02 	tst.w	sl, #2
 8006a1e:	d006      	beq.n	8006a2e <__gethex+0x386>
 8006a20:	f8d9 0000 	ldr.w	r0, [r9]
 8006a24:	ea4a 0a00 	orr.w	sl, sl, r0
 8006a28:	f01a 0f01 	tst.w	sl, #1
 8006a2c:	d10e      	bne.n	8006a4c <__gethex+0x3a4>
 8006a2e:	f047 0710 	orr.w	r7, r7, #16
 8006a32:	e033      	b.n	8006a9c <__gethex+0x3f4>
 8006a34:	f04f 0a01 	mov.w	sl, #1
 8006a38:	e7d0      	b.n	80069dc <__gethex+0x334>
 8006a3a:	2701      	movs	r7, #1
 8006a3c:	e7e2      	b.n	8006a04 <__gethex+0x35c>
 8006a3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a40:	f1c3 0301 	rsb	r3, r3, #1
 8006a44:	9315      	str	r3, [sp, #84]	; 0x54
 8006a46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0f0      	beq.n	8006a2e <__gethex+0x386>
 8006a4c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006a50:	f104 0314 	add.w	r3, r4, #20
 8006a54:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006a58:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006a5c:	f04f 0c00 	mov.w	ip, #0
 8006a60:	4618      	mov	r0, r3
 8006a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a66:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006a6a:	d01c      	beq.n	8006aa6 <__gethex+0x3fe>
 8006a6c:	3201      	adds	r2, #1
 8006a6e:	6002      	str	r2, [r0, #0]
 8006a70:	2f02      	cmp	r7, #2
 8006a72:	f104 0314 	add.w	r3, r4, #20
 8006a76:	d13f      	bne.n	8006af8 <__gethex+0x450>
 8006a78:	f8d8 2000 	ldr.w	r2, [r8]
 8006a7c:	3a01      	subs	r2, #1
 8006a7e:	42b2      	cmp	r2, r6
 8006a80:	d10a      	bne.n	8006a98 <__gethex+0x3f0>
 8006a82:	1171      	asrs	r1, r6, #5
 8006a84:	2201      	movs	r2, #1
 8006a86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006a8a:	f006 061f 	and.w	r6, r6, #31
 8006a8e:	fa02 f606 	lsl.w	r6, r2, r6
 8006a92:	421e      	tst	r6, r3
 8006a94:	bf18      	it	ne
 8006a96:	4617      	movne	r7, r2
 8006a98:	f047 0720 	orr.w	r7, r7, #32
 8006a9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a9e:	601c      	str	r4, [r3, #0]
 8006aa0:	9b04      	ldr	r3, [sp, #16]
 8006aa2:	601d      	str	r5, [r3, #0]
 8006aa4:	e695      	b.n	80067d2 <__gethex+0x12a>
 8006aa6:	4299      	cmp	r1, r3
 8006aa8:	f843 cc04 	str.w	ip, [r3, #-4]
 8006aac:	d8d8      	bhi.n	8006a60 <__gethex+0x3b8>
 8006aae:	68a3      	ldr	r3, [r4, #8]
 8006ab0:	459b      	cmp	fp, r3
 8006ab2:	db19      	blt.n	8006ae8 <__gethex+0x440>
 8006ab4:	6861      	ldr	r1, [r4, #4]
 8006ab6:	ee18 0a10 	vmov	r0, s16
 8006aba:	3101      	adds	r1, #1
 8006abc:	f000 f994 	bl	8006de8 <_Balloc>
 8006ac0:	4681      	mov	r9, r0
 8006ac2:	b918      	cbnz	r0, 8006acc <__gethex+0x424>
 8006ac4:	4b1a      	ldr	r3, [pc, #104]	; (8006b30 <__gethex+0x488>)
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	2184      	movs	r1, #132	; 0x84
 8006aca:	e6a8      	b.n	800681e <__gethex+0x176>
 8006acc:	6922      	ldr	r2, [r4, #16]
 8006ace:	3202      	adds	r2, #2
 8006ad0:	f104 010c 	add.w	r1, r4, #12
 8006ad4:	0092      	lsls	r2, r2, #2
 8006ad6:	300c      	adds	r0, #12
 8006ad8:	f000 f96c 	bl	8006db4 <memcpy>
 8006adc:	4621      	mov	r1, r4
 8006ade:	ee18 0a10 	vmov	r0, s16
 8006ae2:	f000 f9c1 	bl	8006e68 <_Bfree>
 8006ae6:	464c      	mov	r4, r9
 8006ae8:	6923      	ldr	r3, [r4, #16]
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006af0:	6122      	str	r2, [r4, #16]
 8006af2:	2201      	movs	r2, #1
 8006af4:	615a      	str	r2, [r3, #20]
 8006af6:	e7bb      	b.n	8006a70 <__gethex+0x3c8>
 8006af8:	6922      	ldr	r2, [r4, #16]
 8006afa:	455a      	cmp	r2, fp
 8006afc:	dd0b      	ble.n	8006b16 <__gethex+0x46e>
 8006afe:	2101      	movs	r1, #1
 8006b00:	4620      	mov	r0, r4
 8006b02:	f7ff fd6a 	bl	80065da <rshift>
 8006b06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b0a:	3501      	adds	r5, #1
 8006b0c:	42ab      	cmp	r3, r5
 8006b0e:	f6ff aed0 	blt.w	80068b2 <__gethex+0x20a>
 8006b12:	2701      	movs	r7, #1
 8006b14:	e7c0      	b.n	8006a98 <__gethex+0x3f0>
 8006b16:	f016 061f 	ands.w	r6, r6, #31
 8006b1a:	d0fa      	beq.n	8006b12 <__gethex+0x46a>
 8006b1c:	4453      	add	r3, sl
 8006b1e:	f1c6 0620 	rsb	r6, r6, #32
 8006b22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006b26:	f000 fa51 	bl	8006fcc <__hi0bits>
 8006b2a:	42b0      	cmp	r0, r6
 8006b2c:	dbe7      	blt.n	8006afe <__gethex+0x456>
 8006b2e:	e7f0      	b.n	8006b12 <__gethex+0x46a>
 8006b30:	08008a68 	.word	0x08008a68

08006b34 <L_shift>:
 8006b34:	f1c2 0208 	rsb	r2, r2, #8
 8006b38:	0092      	lsls	r2, r2, #2
 8006b3a:	b570      	push	{r4, r5, r6, lr}
 8006b3c:	f1c2 0620 	rsb	r6, r2, #32
 8006b40:	6843      	ldr	r3, [r0, #4]
 8006b42:	6804      	ldr	r4, [r0, #0]
 8006b44:	fa03 f506 	lsl.w	r5, r3, r6
 8006b48:	432c      	orrs	r4, r5
 8006b4a:	40d3      	lsrs	r3, r2
 8006b4c:	6004      	str	r4, [r0, #0]
 8006b4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006b52:	4288      	cmp	r0, r1
 8006b54:	d3f4      	bcc.n	8006b40 <L_shift+0xc>
 8006b56:	bd70      	pop	{r4, r5, r6, pc}

08006b58 <__match>:
 8006b58:	b530      	push	{r4, r5, lr}
 8006b5a:	6803      	ldr	r3, [r0, #0]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b62:	b914      	cbnz	r4, 8006b6a <__match+0x12>
 8006b64:	6003      	str	r3, [r0, #0]
 8006b66:	2001      	movs	r0, #1
 8006b68:	bd30      	pop	{r4, r5, pc}
 8006b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b6e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006b72:	2d19      	cmp	r5, #25
 8006b74:	bf98      	it	ls
 8006b76:	3220      	addls	r2, #32
 8006b78:	42a2      	cmp	r2, r4
 8006b7a:	d0f0      	beq.n	8006b5e <__match+0x6>
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	e7f3      	b.n	8006b68 <__match+0x10>

08006b80 <__hexnan>:
 8006b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	680b      	ldr	r3, [r1, #0]
 8006b86:	115e      	asrs	r6, r3, #5
 8006b88:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006b8c:	f013 031f 	ands.w	r3, r3, #31
 8006b90:	b087      	sub	sp, #28
 8006b92:	bf18      	it	ne
 8006b94:	3604      	addne	r6, #4
 8006b96:	2500      	movs	r5, #0
 8006b98:	1f37      	subs	r7, r6, #4
 8006b9a:	4690      	mov	r8, r2
 8006b9c:	6802      	ldr	r2, [r0, #0]
 8006b9e:	9301      	str	r3, [sp, #4]
 8006ba0:	4682      	mov	sl, r0
 8006ba2:	f846 5c04 	str.w	r5, [r6, #-4]
 8006ba6:	46b9      	mov	r9, r7
 8006ba8:	463c      	mov	r4, r7
 8006baa:	9502      	str	r5, [sp, #8]
 8006bac:	46ab      	mov	fp, r5
 8006bae:	7851      	ldrb	r1, [r2, #1]
 8006bb0:	1c53      	adds	r3, r2, #1
 8006bb2:	9303      	str	r3, [sp, #12]
 8006bb4:	b341      	cbz	r1, 8006c08 <__hexnan+0x88>
 8006bb6:	4608      	mov	r0, r1
 8006bb8:	9205      	str	r2, [sp, #20]
 8006bba:	9104      	str	r1, [sp, #16]
 8006bbc:	f7ff fd5f 	bl	800667e <__hexdig_fun>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d14f      	bne.n	8006c64 <__hexnan+0xe4>
 8006bc4:	9904      	ldr	r1, [sp, #16]
 8006bc6:	9a05      	ldr	r2, [sp, #20]
 8006bc8:	2920      	cmp	r1, #32
 8006bca:	d818      	bhi.n	8006bfe <__hexnan+0x7e>
 8006bcc:	9b02      	ldr	r3, [sp, #8]
 8006bce:	459b      	cmp	fp, r3
 8006bd0:	dd13      	ble.n	8006bfa <__hexnan+0x7a>
 8006bd2:	454c      	cmp	r4, r9
 8006bd4:	d206      	bcs.n	8006be4 <__hexnan+0x64>
 8006bd6:	2d07      	cmp	r5, #7
 8006bd8:	dc04      	bgt.n	8006be4 <__hexnan+0x64>
 8006bda:	462a      	mov	r2, r5
 8006bdc:	4649      	mov	r1, r9
 8006bde:	4620      	mov	r0, r4
 8006be0:	f7ff ffa8 	bl	8006b34 <L_shift>
 8006be4:	4544      	cmp	r4, r8
 8006be6:	d950      	bls.n	8006c8a <__hexnan+0x10a>
 8006be8:	2300      	movs	r3, #0
 8006bea:	f1a4 0904 	sub.w	r9, r4, #4
 8006bee:	f844 3c04 	str.w	r3, [r4, #-4]
 8006bf2:	f8cd b008 	str.w	fp, [sp, #8]
 8006bf6:	464c      	mov	r4, r9
 8006bf8:	461d      	mov	r5, r3
 8006bfa:	9a03      	ldr	r2, [sp, #12]
 8006bfc:	e7d7      	b.n	8006bae <__hexnan+0x2e>
 8006bfe:	2929      	cmp	r1, #41	; 0x29
 8006c00:	d156      	bne.n	8006cb0 <__hexnan+0x130>
 8006c02:	3202      	adds	r2, #2
 8006c04:	f8ca 2000 	str.w	r2, [sl]
 8006c08:	f1bb 0f00 	cmp.w	fp, #0
 8006c0c:	d050      	beq.n	8006cb0 <__hexnan+0x130>
 8006c0e:	454c      	cmp	r4, r9
 8006c10:	d206      	bcs.n	8006c20 <__hexnan+0xa0>
 8006c12:	2d07      	cmp	r5, #7
 8006c14:	dc04      	bgt.n	8006c20 <__hexnan+0xa0>
 8006c16:	462a      	mov	r2, r5
 8006c18:	4649      	mov	r1, r9
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f7ff ff8a 	bl	8006b34 <L_shift>
 8006c20:	4544      	cmp	r4, r8
 8006c22:	d934      	bls.n	8006c8e <__hexnan+0x10e>
 8006c24:	f1a8 0204 	sub.w	r2, r8, #4
 8006c28:	4623      	mov	r3, r4
 8006c2a:	f853 1b04 	ldr.w	r1, [r3], #4
 8006c2e:	f842 1f04 	str.w	r1, [r2, #4]!
 8006c32:	429f      	cmp	r7, r3
 8006c34:	d2f9      	bcs.n	8006c2a <__hexnan+0xaa>
 8006c36:	1b3b      	subs	r3, r7, r4
 8006c38:	f023 0303 	bic.w	r3, r3, #3
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	3401      	adds	r4, #1
 8006c40:	3e03      	subs	r6, #3
 8006c42:	42b4      	cmp	r4, r6
 8006c44:	bf88      	it	hi
 8006c46:	2304      	movhi	r3, #4
 8006c48:	4443      	add	r3, r8
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f843 2b04 	str.w	r2, [r3], #4
 8006c50:	429f      	cmp	r7, r3
 8006c52:	d2fb      	bcs.n	8006c4c <__hexnan+0xcc>
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	b91b      	cbnz	r3, 8006c60 <__hexnan+0xe0>
 8006c58:	4547      	cmp	r7, r8
 8006c5a:	d127      	bne.n	8006cac <__hexnan+0x12c>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	603b      	str	r3, [r7, #0]
 8006c60:	2005      	movs	r0, #5
 8006c62:	e026      	b.n	8006cb2 <__hexnan+0x132>
 8006c64:	3501      	adds	r5, #1
 8006c66:	2d08      	cmp	r5, #8
 8006c68:	f10b 0b01 	add.w	fp, fp, #1
 8006c6c:	dd06      	ble.n	8006c7c <__hexnan+0xfc>
 8006c6e:	4544      	cmp	r4, r8
 8006c70:	d9c3      	bls.n	8006bfa <__hexnan+0x7a>
 8006c72:	2300      	movs	r3, #0
 8006c74:	f844 3c04 	str.w	r3, [r4, #-4]
 8006c78:	2501      	movs	r5, #1
 8006c7a:	3c04      	subs	r4, #4
 8006c7c:	6822      	ldr	r2, [r4, #0]
 8006c7e:	f000 000f 	and.w	r0, r0, #15
 8006c82:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006c86:	6022      	str	r2, [r4, #0]
 8006c88:	e7b7      	b.n	8006bfa <__hexnan+0x7a>
 8006c8a:	2508      	movs	r5, #8
 8006c8c:	e7b5      	b.n	8006bfa <__hexnan+0x7a>
 8006c8e:	9b01      	ldr	r3, [sp, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d0df      	beq.n	8006c54 <__hexnan+0xd4>
 8006c94:	f04f 32ff 	mov.w	r2, #4294967295
 8006c98:	f1c3 0320 	rsb	r3, r3, #32
 8006c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006ca4:	401a      	ands	r2, r3
 8006ca6:	f846 2c04 	str.w	r2, [r6, #-4]
 8006caa:	e7d3      	b.n	8006c54 <__hexnan+0xd4>
 8006cac:	3f04      	subs	r7, #4
 8006cae:	e7d1      	b.n	8006c54 <__hexnan+0xd4>
 8006cb0:	2004      	movs	r0, #4
 8006cb2:	b007      	add	sp, #28
 8006cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006cb8 <_localeconv_r>:
 8006cb8:	4800      	ldr	r0, [pc, #0]	; (8006cbc <_localeconv_r+0x4>)
 8006cba:	4770      	bx	lr
 8006cbc:	2000016c 	.word	0x2000016c

08006cc0 <__retarget_lock_init_recursive>:
 8006cc0:	4770      	bx	lr

08006cc2 <__retarget_lock_acquire_recursive>:
 8006cc2:	4770      	bx	lr

08006cc4 <__retarget_lock_release_recursive>:
 8006cc4:	4770      	bx	lr

08006cc6 <__swhatbuf_r>:
 8006cc6:	b570      	push	{r4, r5, r6, lr}
 8006cc8:	460e      	mov	r6, r1
 8006cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cce:	2900      	cmp	r1, #0
 8006cd0:	b096      	sub	sp, #88	; 0x58
 8006cd2:	4614      	mov	r4, r2
 8006cd4:	461d      	mov	r5, r3
 8006cd6:	da08      	bge.n	8006cea <__swhatbuf_r+0x24>
 8006cd8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	602a      	str	r2, [r5, #0]
 8006ce0:	061a      	lsls	r2, r3, #24
 8006ce2:	d410      	bmi.n	8006d06 <__swhatbuf_r+0x40>
 8006ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ce8:	e00e      	b.n	8006d08 <__swhatbuf_r+0x42>
 8006cea:	466a      	mov	r2, sp
 8006cec:	f001 f8c6 	bl	8007e7c <_fstat_r>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	dbf1      	blt.n	8006cd8 <__swhatbuf_r+0x12>
 8006cf4:	9a01      	ldr	r2, [sp, #4]
 8006cf6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006cfa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006cfe:	425a      	negs	r2, r3
 8006d00:	415a      	adcs	r2, r3
 8006d02:	602a      	str	r2, [r5, #0]
 8006d04:	e7ee      	b.n	8006ce4 <__swhatbuf_r+0x1e>
 8006d06:	2340      	movs	r3, #64	; 0x40
 8006d08:	2000      	movs	r0, #0
 8006d0a:	6023      	str	r3, [r4, #0]
 8006d0c:	b016      	add	sp, #88	; 0x58
 8006d0e:	bd70      	pop	{r4, r5, r6, pc}

08006d10 <__smakebuf_r>:
 8006d10:	898b      	ldrh	r3, [r1, #12]
 8006d12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d14:	079d      	lsls	r5, r3, #30
 8006d16:	4606      	mov	r6, r0
 8006d18:	460c      	mov	r4, r1
 8006d1a:	d507      	bpl.n	8006d2c <__smakebuf_r+0x1c>
 8006d1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	6123      	str	r3, [r4, #16]
 8006d24:	2301      	movs	r3, #1
 8006d26:	6163      	str	r3, [r4, #20]
 8006d28:	b002      	add	sp, #8
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}
 8006d2c:	ab01      	add	r3, sp, #4
 8006d2e:	466a      	mov	r2, sp
 8006d30:	f7ff ffc9 	bl	8006cc6 <__swhatbuf_r>
 8006d34:	9900      	ldr	r1, [sp, #0]
 8006d36:	4605      	mov	r5, r0
 8006d38:	4630      	mov	r0, r6
 8006d3a:	f7fc fce5 	bl	8003708 <_malloc_r>
 8006d3e:	b948      	cbnz	r0, 8006d54 <__smakebuf_r+0x44>
 8006d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d44:	059a      	lsls	r2, r3, #22
 8006d46:	d4ef      	bmi.n	8006d28 <__smakebuf_r+0x18>
 8006d48:	f023 0303 	bic.w	r3, r3, #3
 8006d4c:	f043 0302 	orr.w	r3, r3, #2
 8006d50:	81a3      	strh	r3, [r4, #12]
 8006d52:	e7e3      	b.n	8006d1c <__smakebuf_r+0xc>
 8006d54:	4b0d      	ldr	r3, [pc, #52]	; (8006d8c <__smakebuf_r+0x7c>)
 8006d56:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	6020      	str	r0, [r4, #0]
 8006d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d60:	81a3      	strh	r3, [r4, #12]
 8006d62:	9b00      	ldr	r3, [sp, #0]
 8006d64:	6163      	str	r3, [r4, #20]
 8006d66:	9b01      	ldr	r3, [sp, #4]
 8006d68:	6120      	str	r0, [r4, #16]
 8006d6a:	b15b      	cbz	r3, 8006d84 <__smakebuf_r+0x74>
 8006d6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d70:	4630      	mov	r0, r6
 8006d72:	f001 f895 	bl	8007ea0 <_isatty_r>
 8006d76:	b128      	cbz	r0, 8006d84 <__smakebuf_r+0x74>
 8006d78:	89a3      	ldrh	r3, [r4, #12]
 8006d7a:	f023 0303 	bic.w	r3, r3, #3
 8006d7e:	f043 0301 	orr.w	r3, r3, #1
 8006d82:	81a3      	strh	r3, [r4, #12]
 8006d84:	89a0      	ldrh	r0, [r4, #12]
 8006d86:	4305      	orrs	r5, r0
 8006d88:	81a5      	strh	r5, [r4, #12]
 8006d8a:	e7cd      	b.n	8006d28 <__smakebuf_r+0x18>
 8006d8c:	08006439 	.word	0x08006439

08006d90 <__ascii_mbtowc>:
 8006d90:	b082      	sub	sp, #8
 8006d92:	b901      	cbnz	r1, 8006d96 <__ascii_mbtowc+0x6>
 8006d94:	a901      	add	r1, sp, #4
 8006d96:	b142      	cbz	r2, 8006daa <__ascii_mbtowc+0x1a>
 8006d98:	b14b      	cbz	r3, 8006dae <__ascii_mbtowc+0x1e>
 8006d9a:	7813      	ldrb	r3, [r2, #0]
 8006d9c:	600b      	str	r3, [r1, #0]
 8006d9e:	7812      	ldrb	r2, [r2, #0]
 8006da0:	1e10      	subs	r0, r2, #0
 8006da2:	bf18      	it	ne
 8006da4:	2001      	movne	r0, #1
 8006da6:	b002      	add	sp, #8
 8006da8:	4770      	bx	lr
 8006daa:	4610      	mov	r0, r2
 8006dac:	e7fb      	b.n	8006da6 <__ascii_mbtowc+0x16>
 8006dae:	f06f 0001 	mvn.w	r0, #1
 8006db2:	e7f8      	b.n	8006da6 <__ascii_mbtowc+0x16>

08006db4 <memcpy>:
 8006db4:	440a      	add	r2, r1
 8006db6:	4291      	cmp	r1, r2
 8006db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dbc:	d100      	bne.n	8006dc0 <memcpy+0xc>
 8006dbe:	4770      	bx	lr
 8006dc0:	b510      	push	{r4, lr}
 8006dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dca:	4291      	cmp	r1, r2
 8006dcc:	d1f9      	bne.n	8006dc2 <memcpy+0xe>
 8006dce:	bd10      	pop	{r4, pc}

08006dd0 <__malloc_lock>:
 8006dd0:	4801      	ldr	r0, [pc, #4]	; (8006dd8 <__malloc_lock+0x8>)
 8006dd2:	f7ff bf76 	b.w	8006cc2 <__retarget_lock_acquire_recursive>
 8006dd6:	bf00      	nop
 8006dd8:	20000c8c 	.word	0x20000c8c

08006ddc <__malloc_unlock>:
 8006ddc:	4801      	ldr	r0, [pc, #4]	; (8006de4 <__malloc_unlock+0x8>)
 8006dde:	f7ff bf71 	b.w	8006cc4 <__retarget_lock_release_recursive>
 8006de2:	bf00      	nop
 8006de4:	20000c8c 	.word	0x20000c8c

08006de8 <_Balloc>:
 8006de8:	b570      	push	{r4, r5, r6, lr}
 8006dea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006dec:	4604      	mov	r4, r0
 8006dee:	460d      	mov	r5, r1
 8006df0:	b976      	cbnz	r6, 8006e10 <_Balloc+0x28>
 8006df2:	2010      	movs	r0, #16
 8006df4:	f7fc fc04 	bl	8003600 <malloc>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	6260      	str	r0, [r4, #36]	; 0x24
 8006dfc:	b920      	cbnz	r0, 8006e08 <_Balloc+0x20>
 8006dfe:	4b18      	ldr	r3, [pc, #96]	; (8006e60 <_Balloc+0x78>)
 8006e00:	4818      	ldr	r0, [pc, #96]	; (8006e64 <_Balloc+0x7c>)
 8006e02:	2166      	movs	r1, #102	; 0x66
 8006e04:	f000 fffa 	bl	8007dfc <__assert_func>
 8006e08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e0c:	6006      	str	r6, [r0, #0]
 8006e0e:	60c6      	str	r6, [r0, #12]
 8006e10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e12:	68f3      	ldr	r3, [r6, #12]
 8006e14:	b183      	cbz	r3, 8006e38 <_Balloc+0x50>
 8006e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e1e:	b9b8      	cbnz	r0, 8006e50 <_Balloc+0x68>
 8006e20:	2101      	movs	r1, #1
 8006e22:	fa01 f605 	lsl.w	r6, r1, r5
 8006e26:	1d72      	adds	r2, r6, #5
 8006e28:	0092      	lsls	r2, r2, #2
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f000 fc9d 	bl	800776a <_calloc_r>
 8006e30:	b160      	cbz	r0, 8006e4c <_Balloc+0x64>
 8006e32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e36:	e00e      	b.n	8006e56 <_Balloc+0x6e>
 8006e38:	2221      	movs	r2, #33	; 0x21
 8006e3a:	2104      	movs	r1, #4
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	f000 fc94 	bl	800776a <_calloc_r>
 8006e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e44:	60f0      	str	r0, [r6, #12]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1e4      	bne.n	8006e16 <_Balloc+0x2e>
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}
 8006e50:	6802      	ldr	r2, [r0, #0]
 8006e52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e56:	2300      	movs	r3, #0
 8006e58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e5c:	e7f7      	b.n	8006e4e <_Balloc+0x66>
 8006e5e:	bf00      	nop
 8006e60:	080089f6 	.word	0x080089f6
 8006e64:	08008b58 	.word	0x08008b58

08006e68 <_Bfree>:
 8006e68:	b570      	push	{r4, r5, r6, lr}
 8006e6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e6c:	4605      	mov	r5, r0
 8006e6e:	460c      	mov	r4, r1
 8006e70:	b976      	cbnz	r6, 8006e90 <_Bfree+0x28>
 8006e72:	2010      	movs	r0, #16
 8006e74:	f7fc fbc4 	bl	8003600 <malloc>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	6268      	str	r0, [r5, #36]	; 0x24
 8006e7c:	b920      	cbnz	r0, 8006e88 <_Bfree+0x20>
 8006e7e:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <_Bfree+0x3c>)
 8006e80:	4809      	ldr	r0, [pc, #36]	; (8006ea8 <_Bfree+0x40>)
 8006e82:	218a      	movs	r1, #138	; 0x8a
 8006e84:	f000 ffba 	bl	8007dfc <__assert_func>
 8006e88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e8c:	6006      	str	r6, [r0, #0]
 8006e8e:	60c6      	str	r6, [r0, #12]
 8006e90:	b13c      	cbz	r4, 8006ea2 <_Bfree+0x3a>
 8006e92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e94:	6862      	ldr	r2, [r4, #4]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e9c:	6021      	str	r1, [r4, #0]
 8006e9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
 8006ea4:	080089f6 	.word	0x080089f6
 8006ea8:	08008b58 	.word	0x08008b58

08006eac <__multadd>:
 8006eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb0:	690d      	ldr	r5, [r1, #16]
 8006eb2:	4607      	mov	r7, r0
 8006eb4:	460c      	mov	r4, r1
 8006eb6:	461e      	mov	r6, r3
 8006eb8:	f101 0c14 	add.w	ip, r1, #20
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	f8dc 3000 	ldr.w	r3, [ip]
 8006ec2:	b299      	uxth	r1, r3
 8006ec4:	fb02 6101 	mla	r1, r2, r1, r6
 8006ec8:	0c1e      	lsrs	r6, r3, #16
 8006eca:	0c0b      	lsrs	r3, r1, #16
 8006ecc:	fb02 3306 	mla	r3, r2, r6, r3
 8006ed0:	b289      	uxth	r1, r1
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ed8:	4285      	cmp	r5, r0
 8006eda:	f84c 1b04 	str.w	r1, [ip], #4
 8006ede:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ee2:	dcec      	bgt.n	8006ebe <__multadd+0x12>
 8006ee4:	b30e      	cbz	r6, 8006f2a <__multadd+0x7e>
 8006ee6:	68a3      	ldr	r3, [r4, #8]
 8006ee8:	42ab      	cmp	r3, r5
 8006eea:	dc19      	bgt.n	8006f20 <__multadd+0x74>
 8006eec:	6861      	ldr	r1, [r4, #4]
 8006eee:	4638      	mov	r0, r7
 8006ef0:	3101      	adds	r1, #1
 8006ef2:	f7ff ff79 	bl	8006de8 <_Balloc>
 8006ef6:	4680      	mov	r8, r0
 8006ef8:	b928      	cbnz	r0, 8006f06 <__multadd+0x5a>
 8006efa:	4602      	mov	r2, r0
 8006efc:	4b0c      	ldr	r3, [pc, #48]	; (8006f30 <__multadd+0x84>)
 8006efe:	480d      	ldr	r0, [pc, #52]	; (8006f34 <__multadd+0x88>)
 8006f00:	21b5      	movs	r1, #181	; 0xb5
 8006f02:	f000 ff7b 	bl	8007dfc <__assert_func>
 8006f06:	6922      	ldr	r2, [r4, #16]
 8006f08:	3202      	adds	r2, #2
 8006f0a:	f104 010c 	add.w	r1, r4, #12
 8006f0e:	0092      	lsls	r2, r2, #2
 8006f10:	300c      	adds	r0, #12
 8006f12:	f7ff ff4f 	bl	8006db4 <memcpy>
 8006f16:	4621      	mov	r1, r4
 8006f18:	4638      	mov	r0, r7
 8006f1a:	f7ff ffa5 	bl	8006e68 <_Bfree>
 8006f1e:	4644      	mov	r4, r8
 8006f20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f24:	3501      	adds	r5, #1
 8006f26:	615e      	str	r6, [r3, #20]
 8006f28:	6125      	str	r5, [r4, #16]
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f30:	08008a68 	.word	0x08008a68
 8006f34:	08008b58 	.word	0x08008b58

08006f38 <__s2b>:
 8006f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	4615      	mov	r5, r2
 8006f40:	461f      	mov	r7, r3
 8006f42:	2209      	movs	r2, #9
 8006f44:	3308      	adds	r3, #8
 8006f46:	4606      	mov	r6, r0
 8006f48:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	2201      	movs	r2, #1
 8006f50:	429a      	cmp	r2, r3
 8006f52:	db09      	blt.n	8006f68 <__s2b+0x30>
 8006f54:	4630      	mov	r0, r6
 8006f56:	f7ff ff47 	bl	8006de8 <_Balloc>
 8006f5a:	b940      	cbnz	r0, 8006f6e <__s2b+0x36>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	4b19      	ldr	r3, [pc, #100]	; (8006fc4 <__s2b+0x8c>)
 8006f60:	4819      	ldr	r0, [pc, #100]	; (8006fc8 <__s2b+0x90>)
 8006f62:	21ce      	movs	r1, #206	; 0xce
 8006f64:	f000 ff4a 	bl	8007dfc <__assert_func>
 8006f68:	0052      	lsls	r2, r2, #1
 8006f6a:	3101      	adds	r1, #1
 8006f6c:	e7f0      	b.n	8006f50 <__s2b+0x18>
 8006f6e:	9b08      	ldr	r3, [sp, #32]
 8006f70:	6143      	str	r3, [r0, #20]
 8006f72:	2d09      	cmp	r5, #9
 8006f74:	f04f 0301 	mov.w	r3, #1
 8006f78:	6103      	str	r3, [r0, #16]
 8006f7a:	dd16      	ble.n	8006faa <__s2b+0x72>
 8006f7c:	f104 0909 	add.w	r9, r4, #9
 8006f80:	46c8      	mov	r8, r9
 8006f82:	442c      	add	r4, r5
 8006f84:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006f88:	4601      	mov	r1, r0
 8006f8a:	3b30      	subs	r3, #48	; 0x30
 8006f8c:	220a      	movs	r2, #10
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f7ff ff8c 	bl	8006eac <__multadd>
 8006f94:	45a0      	cmp	r8, r4
 8006f96:	d1f5      	bne.n	8006f84 <__s2b+0x4c>
 8006f98:	f1a5 0408 	sub.w	r4, r5, #8
 8006f9c:	444c      	add	r4, r9
 8006f9e:	1b2d      	subs	r5, r5, r4
 8006fa0:	1963      	adds	r3, r4, r5
 8006fa2:	42bb      	cmp	r3, r7
 8006fa4:	db04      	blt.n	8006fb0 <__s2b+0x78>
 8006fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006faa:	340a      	adds	r4, #10
 8006fac:	2509      	movs	r5, #9
 8006fae:	e7f6      	b.n	8006f9e <__s2b+0x66>
 8006fb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006fb4:	4601      	mov	r1, r0
 8006fb6:	3b30      	subs	r3, #48	; 0x30
 8006fb8:	220a      	movs	r2, #10
 8006fba:	4630      	mov	r0, r6
 8006fbc:	f7ff ff76 	bl	8006eac <__multadd>
 8006fc0:	e7ee      	b.n	8006fa0 <__s2b+0x68>
 8006fc2:	bf00      	nop
 8006fc4:	08008a68 	.word	0x08008a68
 8006fc8:	08008b58 	.word	0x08008b58

08006fcc <__hi0bits>:
 8006fcc:	0c03      	lsrs	r3, r0, #16
 8006fce:	041b      	lsls	r3, r3, #16
 8006fd0:	b9d3      	cbnz	r3, 8007008 <__hi0bits+0x3c>
 8006fd2:	0400      	lsls	r0, r0, #16
 8006fd4:	2310      	movs	r3, #16
 8006fd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006fda:	bf04      	itt	eq
 8006fdc:	0200      	lsleq	r0, r0, #8
 8006fde:	3308      	addeq	r3, #8
 8006fe0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006fe4:	bf04      	itt	eq
 8006fe6:	0100      	lsleq	r0, r0, #4
 8006fe8:	3304      	addeq	r3, #4
 8006fea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006fee:	bf04      	itt	eq
 8006ff0:	0080      	lsleq	r0, r0, #2
 8006ff2:	3302      	addeq	r3, #2
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	db05      	blt.n	8007004 <__hi0bits+0x38>
 8006ff8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006ffc:	f103 0301 	add.w	r3, r3, #1
 8007000:	bf08      	it	eq
 8007002:	2320      	moveq	r3, #32
 8007004:	4618      	mov	r0, r3
 8007006:	4770      	bx	lr
 8007008:	2300      	movs	r3, #0
 800700a:	e7e4      	b.n	8006fd6 <__hi0bits+0xa>

0800700c <__lo0bits>:
 800700c:	6803      	ldr	r3, [r0, #0]
 800700e:	f013 0207 	ands.w	r2, r3, #7
 8007012:	4601      	mov	r1, r0
 8007014:	d00b      	beq.n	800702e <__lo0bits+0x22>
 8007016:	07da      	lsls	r2, r3, #31
 8007018:	d423      	bmi.n	8007062 <__lo0bits+0x56>
 800701a:	0798      	lsls	r0, r3, #30
 800701c:	bf49      	itett	mi
 800701e:	085b      	lsrmi	r3, r3, #1
 8007020:	089b      	lsrpl	r3, r3, #2
 8007022:	2001      	movmi	r0, #1
 8007024:	600b      	strmi	r3, [r1, #0]
 8007026:	bf5c      	itt	pl
 8007028:	600b      	strpl	r3, [r1, #0]
 800702a:	2002      	movpl	r0, #2
 800702c:	4770      	bx	lr
 800702e:	b298      	uxth	r0, r3
 8007030:	b9a8      	cbnz	r0, 800705e <__lo0bits+0x52>
 8007032:	0c1b      	lsrs	r3, r3, #16
 8007034:	2010      	movs	r0, #16
 8007036:	b2da      	uxtb	r2, r3
 8007038:	b90a      	cbnz	r2, 800703e <__lo0bits+0x32>
 800703a:	3008      	adds	r0, #8
 800703c:	0a1b      	lsrs	r3, r3, #8
 800703e:	071a      	lsls	r2, r3, #28
 8007040:	bf04      	itt	eq
 8007042:	091b      	lsreq	r3, r3, #4
 8007044:	3004      	addeq	r0, #4
 8007046:	079a      	lsls	r2, r3, #30
 8007048:	bf04      	itt	eq
 800704a:	089b      	lsreq	r3, r3, #2
 800704c:	3002      	addeq	r0, #2
 800704e:	07da      	lsls	r2, r3, #31
 8007050:	d403      	bmi.n	800705a <__lo0bits+0x4e>
 8007052:	085b      	lsrs	r3, r3, #1
 8007054:	f100 0001 	add.w	r0, r0, #1
 8007058:	d005      	beq.n	8007066 <__lo0bits+0x5a>
 800705a:	600b      	str	r3, [r1, #0]
 800705c:	4770      	bx	lr
 800705e:	4610      	mov	r0, r2
 8007060:	e7e9      	b.n	8007036 <__lo0bits+0x2a>
 8007062:	2000      	movs	r0, #0
 8007064:	4770      	bx	lr
 8007066:	2020      	movs	r0, #32
 8007068:	4770      	bx	lr
	...

0800706c <__i2b>:
 800706c:	b510      	push	{r4, lr}
 800706e:	460c      	mov	r4, r1
 8007070:	2101      	movs	r1, #1
 8007072:	f7ff feb9 	bl	8006de8 <_Balloc>
 8007076:	4602      	mov	r2, r0
 8007078:	b928      	cbnz	r0, 8007086 <__i2b+0x1a>
 800707a:	4b05      	ldr	r3, [pc, #20]	; (8007090 <__i2b+0x24>)
 800707c:	4805      	ldr	r0, [pc, #20]	; (8007094 <__i2b+0x28>)
 800707e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007082:	f000 febb 	bl	8007dfc <__assert_func>
 8007086:	2301      	movs	r3, #1
 8007088:	6144      	str	r4, [r0, #20]
 800708a:	6103      	str	r3, [r0, #16]
 800708c:	bd10      	pop	{r4, pc}
 800708e:	bf00      	nop
 8007090:	08008a68 	.word	0x08008a68
 8007094:	08008b58 	.word	0x08008b58

08007098 <__multiply>:
 8007098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709c:	4691      	mov	r9, r2
 800709e:	690a      	ldr	r2, [r1, #16]
 80070a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	bfb8      	it	lt
 80070a8:	460b      	movlt	r3, r1
 80070aa:	460c      	mov	r4, r1
 80070ac:	bfbc      	itt	lt
 80070ae:	464c      	movlt	r4, r9
 80070b0:	4699      	movlt	r9, r3
 80070b2:	6927      	ldr	r7, [r4, #16]
 80070b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80070b8:	68a3      	ldr	r3, [r4, #8]
 80070ba:	6861      	ldr	r1, [r4, #4]
 80070bc:	eb07 060a 	add.w	r6, r7, sl
 80070c0:	42b3      	cmp	r3, r6
 80070c2:	b085      	sub	sp, #20
 80070c4:	bfb8      	it	lt
 80070c6:	3101      	addlt	r1, #1
 80070c8:	f7ff fe8e 	bl	8006de8 <_Balloc>
 80070cc:	b930      	cbnz	r0, 80070dc <__multiply+0x44>
 80070ce:	4602      	mov	r2, r0
 80070d0:	4b44      	ldr	r3, [pc, #272]	; (80071e4 <__multiply+0x14c>)
 80070d2:	4845      	ldr	r0, [pc, #276]	; (80071e8 <__multiply+0x150>)
 80070d4:	f240 115d 	movw	r1, #349	; 0x15d
 80070d8:	f000 fe90 	bl	8007dfc <__assert_func>
 80070dc:	f100 0514 	add.w	r5, r0, #20
 80070e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80070e4:	462b      	mov	r3, r5
 80070e6:	2200      	movs	r2, #0
 80070e8:	4543      	cmp	r3, r8
 80070ea:	d321      	bcc.n	8007130 <__multiply+0x98>
 80070ec:	f104 0314 	add.w	r3, r4, #20
 80070f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80070f4:	f109 0314 	add.w	r3, r9, #20
 80070f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80070fc:	9202      	str	r2, [sp, #8]
 80070fe:	1b3a      	subs	r2, r7, r4
 8007100:	3a15      	subs	r2, #21
 8007102:	f022 0203 	bic.w	r2, r2, #3
 8007106:	3204      	adds	r2, #4
 8007108:	f104 0115 	add.w	r1, r4, #21
 800710c:	428f      	cmp	r7, r1
 800710e:	bf38      	it	cc
 8007110:	2204      	movcc	r2, #4
 8007112:	9201      	str	r2, [sp, #4]
 8007114:	9a02      	ldr	r2, [sp, #8]
 8007116:	9303      	str	r3, [sp, #12]
 8007118:	429a      	cmp	r2, r3
 800711a:	d80c      	bhi.n	8007136 <__multiply+0x9e>
 800711c:	2e00      	cmp	r6, #0
 800711e:	dd03      	ble.n	8007128 <__multiply+0x90>
 8007120:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007124:	2b00      	cmp	r3, #0
 8007126:	d05a      	beq.n	80071de <__multiply+0x146>
 8007128:	6106      	str	r6, [r0, #16]
 800712a:	b005      	add	sp, #20
 800712c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007130:	f843 2b04 	str.w	r2, [r3], #4
 8007134:	e7d8      	b.n	80070e8 <__multiply+0x50>
 8007136:	f8b3 a000 	ldrh.w	sl, [r3]
 800713a:	f1ba 0f00 	cmp.w	sl, #0
 800713e:	d024      	beq.n	800718a <__multiply+0xf2>
 8007140:	f104 0e14 	add.w	lr, r4, #20
 8007144:	46a9      	mov	r9, r5
 8007146:	f04f 0c00 	mov.w	ip, #0
 800714a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800714e:	f8d9 1000 	ldr.w	r1, [r9]
 8007152:	fa1f fb82 	uxth.w	fp, r2
 8007156:	b289      	uxth	r1, r1
 8007158:	fb0a 110b 	mla	r1, sl, fp, r1
 800715c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007160:	f8d9 2000 	ldr.w	r2, [r9]
 8007164:	4461      	add	r1, ip
 8007166:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800716a:	fb0a c20b 	mla	r2, sl, fp, ip
 800716e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007172:	b289      	uxth	r1, r1
 8007174:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007178:	4577      	cmp	r7, lr
 800717a:	f849 1b04 	str.w	r1, [r9], #4
 800717e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007182:	d8e2      	bhi.n	800714a <__multiply+0xb2>
 8007184:	9a01      	ldr	r2, [sp, #4]
 8007186:	f845 c002 	str.w	ip, [r5, r2]
 800718a:	9a03      	ldr	r2, [sp, #12]
 800718c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007190:	3304      	adds	r3, #4
 8007192:	f1b9 0f00 	cmp.w	r9, #0
 8007196:	d020      	beq.n	80071da <__multiply+0x142>
 8007198:	6829      	ldr	r1, [r5, #0]
 800719a:	f104 0c14 	add.w	ip, r4, #20
 800719e:	46ae      	mov	lr, r5
 80071a0:	f04f 0a00 	mov.w	sl, #0
 80071a4:	f8bc b000 	ldrh.w	fp, [ip]
 80071a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80071ac:	fb09 220b 	mla	r2, r9, fp, r2
 80071b0:	4492      	add	sl, r2
 80071b2:	b289      	uxth	r1, r1
 80071b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80071b8:	f84e 1b04 	str.w	r1, [lr], #4
 80071bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80071c0:	f8be 1000 	ldrh.w	r1, [lr]
 80071c4:	0c12      	lsrs	r2, r2, #16
 80071c6:	fb09 1102 	mla	r1, r9, r2, r1
 80071ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80071ce:	4567      	cmp	r7, ip
 80071d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80071d4:	d8e6      	bhi.n	80071a4 <__multiply+0x10c>
 80071d6:	9a01      	ldr	r2, [sp, #4]
 80071d8:	50a9      	str	r1, [r5, r2]
 80071da:	3504      	adds	r5, #4
 80071dc:	e79a      	b.n	8007114 <__multiply+0x7c>
 80071de:	3e01      	subs	r6, #1
 80071e0:	e79c      	b.n	800711c <__multiply+0x84>
 80071e2:	bf00      	nop
 80071e4:	08008a68 	.word	0x08008a68
 80071e8:	08008b58 	.word	0x08008b58

080071ec <__pow5mult>:
 80071ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071f0:	4615      	mov	r5, r2
 80071f2:	f012 0203 	ands.w	r2, r2, #3
 80071f6:	4606      	mov	r6, r0
 80071f8:	460f      	mov	r7, r1
 80071fa:	d007      	beq.n	800720c <__pow5mult+0x20>
 80071fc:	4c25      	ldr	r4, [pc, #148]	; (8007294 <__pow5mult+0xa8>)
 80071fe:	3a01      	subs	r2, #1
 8007200:	2300      	movs	r3, #0
 8007202:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007206:	f7ff fe51 	bl	8006eac <__multadd>
 800720a:	4607      	mov	r7, r0
 800720c:	10ad      	asrs	r5, r5, #2
 800720e:	d03d      	beq.n	800728c <__pow5mult+0xa0>
 8007210:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007212:	b97c      	cbnz	r4, 8007234 <__pow5mult+0x48>
 8007214:	2010      	movs	r0, #16
 8007216:	f7fc f9f3 	bl	8003600 <malloc>
 800721a:	4602      	mov	r2, r0
 800721c:	6270      	str	r0, [r6, #36]	; 0x24
 800721e:	b928      	cbnz	r0, 800722c <__pow5mult+0x40>
 8007220:	4b1d      	ldr	r3, [pc, #116]	; (8007298 <__pow5mult+0xac>)
 8007222:	481e      	ldr	r0, [pc, #120]	; (800729c <__pow5mult+0xb0>)
 8007224:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007228:	f000 fde8 	bl	8007dfc <__assert_func>
 800722c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007230:	6004      	str	r4, [r0, #0]
 8007232:	60c4      	str	r4, [r0, #12]
 8007234:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007238:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800723c:	b94c      	cbnz	r4, 8007252 <__pow5mult+0x66>
 800723e:	f240 2171 	movw	r1, #625	; 0x271
 8007242:	4630      	mov	r0, r6
 8007244:	f7ff ff12 	bl	800706c <__i2b>
 8007248:	2300      	movs	r3, #0
 800724a:	f8c8 0008 	str.w	r0, [r8, #8]
 800724e:	4604      	mov	r4, r0
 8007250:	6003      	str	r3, [r0, #0]
 8007252:	f04f 0900 	mov.w	r9, #0
 8007256:	07eb      	lsls	r3, r5, #31
 8007258:	d50a      	bpl.n	8007270 <__pow5mult+0x84>
 800725a:	4639      	mov	r1, r7
 800725c:	4622      	mov	r2, r4
 800725e:	4630      	mov	r0, r6
 8007260:	f7ff ff1a 	bl	8007098 <__multiply>
 8007264:	4639      	mov	r1, r7
 8007266:	4680      	mov	r8, r0
 8007268:	4630      	mov	r0, r6
 800726a:	f7ff fdfd 	bl	8006e68 <_Bfree>
 800726e:	4647      	mov	r7, r8
 8007270:	106d      	asrs	r5, r5, #1
 8007272:	d00b      	beq.n	800728c <__pow5mult+0xa0>
 8007274:	6820      	ldr	r0, [r4, #0]
 8007276:	b938      	cbnz	r0, 8007288 <__pow5mult+0x9c>
 8007278:	4622      	mov	r2, r4
 800727a:	4621      	mov	r1, r4
 800727c:	4630      	mov	r0, r6
 800727e:	f7ff ff0b 	bl	8007098 <__multiply>
 8007282:	6020      	str	r0, [r4, #0]
 8007284:	f8c0 9000 	str.w	r9, [r0]
 8007288:	4604      	mov	r4, r0
 800728a:	e7e4      	b.n	8007256 <__pow5mult+0x6a>
 800728c:	4638      	mov	r0, r7
 800728e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007292:	bf00      	nop
 8007294:	08008ca8 	.word	0x08008ca8
 8007298:	080089f6 	.word	0x080089f6
 800729c:	08008b58 	.word	0x08008b58

080072a0 <__lshift>:
 80072a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a4:	460c      	mov	r4, r1
 80072a6:	6849      	ldr	r1, [r1, #4]
 80072a8:	6923      	ldr	r3, [r4, #16]
 80072aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80072ae:	68a3      	ldr	r3, [r4, #8]
 80072b0:	4607      	mov	r7, r0
 80072b2:	4691      	mov	r9, r2
 80072b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80072b8:	f108 0601 	add.w	r6, r8, #1
 80072bc:	42b3      	cmp	r3, r6
 80072be:	db0b      	blt.n	80072d8 <__lshift+0x38>
 80072c0:	4638      	mov	r0, r7
 80072c2:	f7ff fd91 	bl	8006de8 <_Balloc>
 80072c6:	4605      	mov	r5, r0
 80072c8:	b948      	cbnz	r0, 80072de <__lshift+0x3e>
 80072ca:	4602      	mov	r2, r0
 80072cc:	4b2a      	ldr	r3, [pc, #168]	; (8007378 <__lshift+0xd8>)
 80072ce:	482b      	ldr	r0, [pc, #172]	; (800737c <__lshift+0xdc>)
 80072d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80072d4:	f000 fd92 	bl	8007dfc <__assert_func>
 80072d8:	3101      	adds	r1, #1
 80072da:	005b      	lsls	r3, r3, #1
 80072dc:	e7ee      	b.n	80072bc <__lshift+0x1c>
 80072de:	2300      	movs	r3, #0
 80072e0:	f100 0114 	add.w	r1, r0, #20
 80072e4:	f100 0210 	add.w	r2, r0, #16
 80072e8:	4618      	mov	r0, r3
 80072ea:	4553      	cmp	r3, sl
 80072ec:	db37      	blt.n	800735e <__lshift+0xbe>
 80072ee:	6920      	ldr	r0, [r4, #16]
 80072f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072f4:	f104 0314 	add.w	r3, r4, #20
 80072f8:	f019 091f 	ands.w	r9, r9, #31
 80072fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007300:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007304:	d02f      	beq.n	8007366 <__lshift+0xc6>
 8007306:	f1c9 0e20 	rsb	lr, r9, #32
 800730a:	468a      	mov	sl, r1
 800730c:	f04f 0c00 	mov.w	ip, #0
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	fa02 f209 	lsl.w	r2, r2, r9
 8007316:	ea42 020c 	orr.w	r2, r2, ip
 800731a:	f84a 2b04 	str.w	r2, [sl], #4
 800731e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007322:	4298      	cmp	r0, r3
 8007324:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007328:	d8f2      	bhi.n	8007310 <__lshift+0x70>
 800732a:	1b03      	subs	r3, r0, r4
 800732c:	3b15      	subs	r3, #21
 800732e:	f023 0303 	bic.w	r3, r3, #3
 8007332:	3304      	adds	r3, #4
 8007334:	f104 0215 	add.w	r2, r4, #21
 8007338:	4290      	cmp	r0, r2
 800733a:	bf38      	it	cc
 800733c:	2304      	movcc	r3, #4
 800733e:	f841 c003 	str.w	ip, [r1, r3]
 8007342:	f1bc 0f00 	cmp.w	ip, #0
 8007346:	d001      	beq.n	800734c <__lshift+0xac>
 8007348:	f108 0602 	add.w	r6, r8, #2
 800734c:	3e01      	subs	r6, #1
 800734e:	4638      	mov	r0, r7
 8007350:	612e      	str	r6, [r5, #16]
 8007352:	4621      	mov	r1, r4
 8007354:	f7ff fd88 	bl	8006e68 <_Bfree>
 8007358:	4628      	mov	r0, r5
 800735a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800735e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007362:	3301      	adds	r3, #1
 8007364:	e7c1      	b.n	80072ea <__lshift+0x4a>
 8007366:	3904      	subs	r1, #4
 8007368:	f853 2b04 	ldr.w	r2, [r3], #4
 800736c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007370:	4298      	cmp	r0, r3
 8007372:	d8f9      	bhi.n	8007368 <__lshift+0xc8>
 8007374:	e7ea      	b.n	800734c <__lshift+0xac>
 8007376:	bf00      	nop
 8007378:	08008a68 	.word	0x08008a68
 800737c:	08008b58 	.word	0x08008b58

08007380 <__mcmp>:
 8007380:	b530      	push	{r4, r5, lr}
 8007382:	6902      	ldr	r2, [r0, #16]
 8007384:	690c      	ldr	r4, [r1, #16]
 8007386:	1b12      	subs	r2, r2, r4
 8007388:	d10e      	bne.n	80073a8 <__mcmp+0x28>
 800738a:	f100 0314 	add.w	r3, r0, #20
 800738e:	3114      	adds	r1, #20
 8007390:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007394:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007398:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800739c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80073a0:	42a5      	cmp	r5, r4
 80073a2:	d003      	beq.n	80073ac <__mcmp+0x2c>
 80073a4:	d305      	bcc.n	80073b2 <__mcmp+0x32>
 80073a6:	2201      	movs	r2, #1
 80073a8:	4610      	mov	r0, r2
 80073aa:	bd30      	pop	{r4, r5, pc}
 80073ac:	4283      	cmp	r3, r0
 80073ae:	d3f3      	bcc.n	8007398 <__mcmp+0x18>
 80073b0:	e7fa      	b.n	80073a8 <__mcmp+0x28>
 80073b2:	f04f 32ff 	mov.w	r2, #4294967295
 80073b6:	e7f7      	b.n	80073a8 <__mcmp+0x28>

080073b8 <__mdiff>:
 80073b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073bc:	460c      	mov	r4, r1
 80073be:	4606      	mov	r6, r0
 80073c0:	4611      	mov	r1, r2
 80073c2:	4620      	mov	r0, r4
 80073c4:	4690      	mov	r8, r2
 80073c6:	f7ff ffdb 	bl	8007380 <__mcmp>
 80073ca:	1e05      	subs	r5, r0, #0
 80073cc:	d110      	bne.n	80073f0 <__mdiff+0x38>
 80073ce:	4629      	mov	r1, r5
 80073d0:	4630      	mov	r0, r6
 80073d2:	f7ff fd09 	bl	8006de8 <_Balloc>
 80073d6:	b930      	cbnz	r0, 80073e6 <__mdiff+0x2e>
 80073d8:	4b3a      	ldr	r3, [pc, #232]	; (80074c4 <__mdiff+0x10c>)
 80073da:	4602      	mov	r2, r0
 80073dc:	f240 2132 	movw	r1, #562	; 0x232
 80073e0:	4839      	ldr	r0, [pc, #228]	; (80074c8 <__mdiff+0x110>)
 80073e2:	f000 fd0b 	bl	8007dfc <__assert_func>
 80073e6:	2301      	movs	r3, #1
 80073e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80073ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f0:	bfa4      	itt	ge
 80073f2:	4643      	movge	r3, r8
 80073f4:	46a0      	movge	r8, r4
 80073f6:	4630      	mov	r0, r6
 80073f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80073fc:	bfa6      	itte	ge
 80073fe:	461c      	movge	r4, r3
 8007400:	2500      	movge	r5, #0
 8007402:	2501      	movlt	r5, #1
 8007404:	f7ff fcf0 	bl	8006de8 <_Balloc>
 8007408:	b920      	cbnz	r0, 8007414 <__mdiff+0x5c>
 800740a:	4b2e      	ldr	r3, [pc, #184]	; (80074c4 <__mdiff+0x10c>)
 800740c:	4602      	mov	r2, r0
 800740e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007412:	e7e5      	b.n	80073e0 <__mdiff+0x28>
 8007414:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007418:	6926      	ldr	r6, [r4, #16]
 800741a:	60c5      	str	r5, [r0, #12]
 800741c:	f104 0914 	add.w	r9, r4, #20
 8007420:	f108 0514 	add.w	r5, r8, #20
 8007424:	f100 0e14 	add.w	lr, r0, #20
 8007428:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800742c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007430:	f108 0210 	add.w	r2, r8, #16
 8007434:	46f2      	mov	sl, lr
 8007436:	2100      	movs	r1, #0
 8007438:	f859 3b04 	ldr.w	r3, [r9], #4
 800743c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007440:	fa1f f883 	uxth.w	r8, r3
 8007444:	fa11 f18b 	uxtah	r1, r1, fp
 8007448:	0c1b      	lsrs	r3, r3, #16
 800744a:	eba1 0808 	sub.w	r8, r1, r8
 800744e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007452:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007456:	fa1f f888 	uxth.w	r8, r8
 800745a:	1419      	asrs	r1, r3, #16
 800745c:	454e      	cmp	r6, r9
 800745e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007462:	f84a 3b04 	str.w	r3, [sl], #4
 8007466:	d8e7      	bhi.n	8007438 <__mdiff+0x80>
 8007468:	1b33      	subs	r3, r6, r4
 800746a:	3b15      	subs	r3, #21
 800746c:	f023 0303 	bic.w	r3, r3, #3
 8007470:	3304      	adds	r3, #4
 8007472:	3415      	adds	r4, #21
 8007474:	42a6      	cmp	r6, r4
 8007476:	bf38      	it	cc
 8007478:	2304      	movcc	r3, #4
 800747a:	441d      	add	r5, r3
 800747c:	4473      	add	r3, lr
 800747e:	469e      	mov	lr, r3
 8007480:	462e      	mov	r6, r5
 8007482:	4566      	cmp	r6, ip
 8007484:	d30e      	bcc.n	80074a4 <__mdiff+0xec>
 8007486:	f10c 0203 	add.w	r2, ip, #3
 800748a:	1b52      	subs	r2, r2, r5
 800748c:	f022 0203 	bic.w	r2, r2, #3
 8007490:	3d03      	subs	r5, #3
 8007492:	45ac      	cmp	ip, r5
 8007494:	bf38      	it	cc
 8007496:	2200      	movcc	r2, #0
 8007498:	441a      	add	r2, r3
 800749a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800749e:	b17b      	cbz	r3, 80074c0 <__mdiff+0x108>
 80074a0:	6107      	str	r7, [r0, #16]
 80074a2:	e7a3      	b.n	80073ec <__mdiff+0x34>
 80074a4:	f856 8b04 	ldr.w	r8, [r6], #4
 80074a8:	fa11 f288 	uxtah	r2, r1, r8
 80074ac:	1414      	asrs	r4, r2, #16
 80074ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80074b2:	b292      	uxth	r2, r2
 80074b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80074b8:	f84e 2b04 	str.w	r2, [lr], #4
 80074bc:	1421      	asrs	r1, r4, #16
 80074be:	e7e0      	b.n	8007482 <__mdiff+0xca>
 80074c0:	3f01      	subs	r7, #1
 80074c2:	e7ea      	b.n	800749a <__mdiff+0xe2>
 80074c4:	08008a68 	.word	0x08008a68
 80074c8:	08008b58 	.word	0x08008b58

080074cc <__ulp>:
 80074cc:	b082      	sub	sp, #8
 80074ce:	ed8d 0b00 	vstr	d0, [sp]
 80074d2:	9b01      	ldr	r3, [sp, #4]
 80074d4:	4912      	ldr	r1, [pc, #72]	; (8007520 <__ulp+0x54>)
 80074d6:	4019      	ands	r1, r3
 80074d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80074dc:	2900      	cmp	r1, #0
 80074de:	dd05      	ble.n	80074ec <__ulp+0x20>
 80074e0:	2200      	movs	r2, #0
 80074e2:	460b      	mov	r3, r1
 80074e4:	ec43 2b10 	vmov	d0, r2, r3
 80074e8:	b002      	add	sp, #8
 80074ea:	4770      	bx	lr
 80074ec:	4249      	negs	r1, r1
 80074ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80074f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80074f6:	f04f 0200 	mov.w	r2, #0
 80074fa:	f04f 0300 	mov.w	r3, #0
 80074fe:	da04      	bge.n	800750a <__ulp+0x3e>
 8007500:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007504:	fa41 f300 	asr.w	r3, r1, r0
 8007508:	e7ec      	b.n	80074e4 <__ulp+0x18>
 800750a:	f1a0 0114 	sub.w	r1, r0, #20
 800750e:	291e      	cmp	r1, #30
 8007510:	bfda      	itte	le
 8007512:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007516:	fa20 f101 	lsrle.w	r1, r0, r1
 800751a:	2101      	movgt	r1, #1
 800751c:	460a      	mov	r2, r1
 800751e:	e7e1      	b.n	80074e4 <__ulp+0x18>
 8007520:	7ff00000 	.word	0x7ff00000

08007524 <__b2d>:
 8007524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007526:	6905      	ldr	r5, [r0, #16]
 8007528:	f100 0714 	add.w	r7, r0, #20
 800752c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007530:	1f2e      	subs	r6, r5, #4
 8007532:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007536:	4620      	mov	r0, r4
 8007538:	f7ff fd48 	bl	8006fcc <__hi0bits>
 800753c:	f1c0 0320 	rsb	r3, r0, #32
 8007540:	280a      	cmp	r0, #10
 8007542:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80075c0 <__b2d+0x9c>
 8007546:	600b      	str	r3, [r1, #0]
 8007548:	dc14      	bgt.n	8007574 <__b2d+0x50>
 800754a:	f1c0 0e0b 	rsb	lr, r0, #11
 800754e:	fa24 f10e 	lsr.w	r1, r4, lr
 8007552:	42b7      	cmp	r7, r6
 8007554:	ea41 030c 	orr.w	r3, r1, ip
 8007558:	bf34      	ite	cc
 800755a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800755e:	2100      	movcs	r1, #0
 8007560:	3015      	adds	r0, #21
 8007562:	fa04 f000 	lsl.w	r0, r4, r0
 8007566:	fa21 f10e 	lsr.w	r1, r1, lr
 800756a:	ea40 0201 	orr.w	r2, r0, r1
 800756e:	ec43 2b10 	vmov	d0, r2, r3
 8007572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007574:	42b7      	cmp	r7, r6
 8007576:	bf3a      	itte	cc
 8007578:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800757c:	f1a5 0608 	subcc.w	r6, r5, #8
 8007580:	2100      	movcs	r1, #0
 8007582:	380b      	subs	r0, #11
 8007584:	d017      	beq.n	80075b6 <__b2d+0x92>
 8007586:	f1c0 0c20 	rsb	ip, r0, #32
 800758a:	fa04 f500 	lsl.w	r5, r4, r0
 800758e:	42be      	cmp	r6, r7
 8007590:	fa21 f40c 	lsr.w	r4, r1, ip
 8007594:	ea45 0504 	orr.w	r5, r5, r4
 8007598:	bf8c      	ite	hi
 800759a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800759e:	2400      	movls	r4, #0
 80075a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80075a4:	fa01 f000 	lsl.w	r0, r1, r0
 80075a8:	fa24 f40c 	lsr.w	r4, r4, ip
 80075ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80075b0:	ea40 0204 	orr.w	r2, r0, r4
 80075b4:	e7db      	b.n	800756e <__b2d+0x4a>
 80075b6:	ea44 030c 	orr.w	r3, r4, ip
 80075ba:	460a      	mov	r2, r1
 80075bc:	e7d7      	b.n	800756e <__b2d+0x4a>
 80075be:	bf00      	nop
 80075c0:	3ff00000 	.word	0x3ff00000

080075c4 <__d2b>:
 80075c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80075c8:	4689      	mov	r9, r1
 80075ca:	2101      	movs	r1, #1
 80075cc:	ec57 6b10 	vmov	r6, r7, d0
 80075d0:	4690      	mov	r8, r2
 80075d2:	f7ff fc09 	bl	8006de8 <_Balloc>
 80075d6:	4604      	mov	r4, r0
 80075d8:	b930      	cbnz	r0, 80075e8 <__d2b+0x24>
 80075da:	4602      	mov	r2, r0
 80075dc:	4b25      	ldr	r3, [pc, #148]	; (8007674 <__d2b+0xb0>)
 80075de:	4826      	ldr	r0, [pc, #152]	; (8007678 <__d2b+0xb4>)
 80075e0:	f240 310a 	movw	r1, #778	; 0x30a
 80075e4:	f000 fc0a 	bl	8007dfc <__assert_func>
 80075e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80075ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075f0:	bb35      	cbnz	r5, 8007640 <__d2b+0x7c>
 80075f2:	2e00      	cmp	r6, #0
 80075f4:	9301      	str	r3, [sp, #4]
 80075f6:	d028      	beq.n	800764a <__d2b+0x86>
 80075f8:	4668      	mov	r0, sp
 80075fa:	9600      	str	r6, [sp, #0]
 80075fc:	f7ff fd06 	bl	800700c <__lo0bits>
 8007600:	9900      	ldr	r1, [sp, #0]
 8007602:	b300      	cbz	r0, 8007646 <__d2b+0x82>
 8007604:	9a01      	ldr	r2, [sp, #4]
 8007606:	f1c0 0320 	rsb	r3, r0, #32
 800760a:	fa02 f303 	lsl.w	r3, r2, r3
 800760e:	430b      	orrs	r3, r1
 8007610:	40c2      	lsrs	r2, r0
 8007612:	6163      	str	r3, [r4, #20]
 8007614:	9201      	str	r2, [sp, #4]
 8007616:	9b01      	ldr	r3, [sp, #4]
 8007618:	61a3      	str	r3, [r4, #24]
 800761a:	2b00      	cmp	r3, #0
 800761c:	bf14      	ite	ne
 800761e:	2202      	movne	r2, #2
 8007620:	2201      	moveq	r2, #1
 8007622:	6122      	str	r2, [r4, #16]
 8007624:	b1d5      	cbz	r5, 800765c <__d2b+0x98>
 8007626:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800762a:	4405      	add	r5, r0
 800762c:	f8c9 5000 	str.w	r5, [r9]
 8007630:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007634:	f8c8 0000 	str.w	r0, [r8]
 8007638:	4620      	mov	r0, r4
 800763a:	b003      	add	sp, #12
 800763c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007640:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007644:	e7d5      	b.n	80075f2 <__d2b+0x2e>
 8007646:	6161      	str	r1, [r4, #20]
 8007648:	e7e5      	b.n	8007616 <__d2b+0x52>
 800764a:	a801      	add	r0, sp, #4
 800764c:	f7ff fcde 	bl	800700c <__lo0bits>
 8007650:	9b01      	ldr	r3, [sp, #4]
 8007652:	6163      	str	r3, [r4, #20]
 8007654:	2201      	movs	r2, #1
 8007656:	6122      	str	r2, [r4, #16]
 8007658:	3020      	adds	r0, #32
 800765a:	e7e3      	b.n	8007624 <__d2b+0x60>
 800765c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007660:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007664:	f8c9 0000 	str.w	r0, [r9]
 8007668:	6918      	ldr	r0, [r3, #16]
 800766a:	f7ff fcaf 	bl	8006fcc <__hi0bits>
 800766e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007672:	e7df      	b.n	8007634 <__d2b+0x70>
 8007674:	08008a68 	.word	0x08008a68
 8007678:	08008b58 	.word	0x08008b58

0800767c <__ratio>:
 800767c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007680:	4688      	mov	r8, r1
 8007682:	4669      	mov	r1, sp
 8007684:	4681      	mov	r9, r0
 8007686:	f7ff ff4d 	bl	8007524 <__b2d>
 800768a:	a901      	add	r1, sp, #4
 800768c:	4640      	mov	r0, r8
 800768e:	ec55 4b10 	vmov	r4, r5, d0
 8007692:	f7ff ff47 	bl	8007524 <__b2d>
 8007696:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800769a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800769e:	eba3 0c02 	sub.w	ip, r3, r2
 80076a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80076a6:	1a9b      	subs	r3, r3, r2
 80076a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80076ac:	ec51 0b10 	vmov	r0, r1, d0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	bfd6      	itet	le
 80076b4:	460a      	movle	r2, r1
 80076b6:	462a      	movgt	r2, r5
 80076b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80076bc:	468b      	mov	fp, r1
 80076be:	462f      	mov	r7, r5
 80076c0:	bfd4      	ite	le
 80076c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80076c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80076ca:	4620      	mov	r0, r4
 80076cc:	ee10 2a10 	vmov	r2, s0
 80076d0:	465b      	mov	r3, fp
 80076d2:	4639      	mov	r1, r7
 80076d4:	f7f9 f8c2 	bl	800085c <__aeabi_ddiv>
 80076d8:	ec41 0b10 	vmov	d0, r0, r1
 80076dc:	b003      	add	sp, #12
 80076de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080076e2 <__copybits>:
 80076e2:	3901      	subs	r1, #1
 80076e4:	b570      	push	{r4, r5, r6, lr}
 80076e6:	1149      	asrs	r1, r1, #5
 80076e8:	6914      	ldr	r4, [r2, #16]
 80076ea:	3101      	adds	r1, #1
 80076ec:	f102 0314 	add.w	r3, r2, #20
 80076f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80076f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80076f8:	1f05      	subs	r5, r0, #4
 80076fa:	42a3      	cmp	r3, r4
 80076fc:	d30c      	bcc.n	8007718 <__copybits+0x36>
 80076fe:	1aa3      	subs	r3, r4, r2
 8007700:	3b11      	subs	r3, #17
 8007702:	f023 0303 	bic.w	r3, r3, #3
 8007706:	3211      	adds	r2, #17
 8007708:	42a2      	cmp	r2, r4
 800770a:	bf88      	it	hi
 800770c:	2300      	movhi	r3, #0
 800770e:	4418      	add	r0, r3
 8007710:	2300      	movs	r3, #0
 8007712:	4288      	cmp	r0, r1
 8007714:	d305      	bcc.n	8007722 <__copybits+0x40>
 8007716:	bd70      	pop	{r4, r5, r6, pc}
 8007718:	f853 6b04 	ldr.w	r6, [r3], #4
 800771c:	f845 6f04 	str.w	r6, [r5, #4]!
 8007720:	e7eb      	b.n	80076fa <__copybits+0x18>
 8007722:	f840 3b04 	str.w	r3, [r0], #4
 8007726:	e7f4      	b.n	8007712 <__copybits+0x30>

08007728 <__any_on>:
 8007728:	f100 0214 	add.w	r2, r0, #20
 800772c:	6900      	ldr	r0, [r0, #16]
 800772e:	114b      	asrs	r3, r1, #5
 8007730:	4298      	cmp	r0, r3
 8007732:	b510      	push	{r4, lr}
 8007734:	db11      	blt.n	800775a <__any_on+0x32>
 8007736:	dd0a      	ble.n	800774e <__any_on+0x26>
 8007738:	f011 011f 	ands.w	r1, r1, #31
 800773c:	d007      	beq.n	800774e <__any_on+0x26>
 800773e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007742:	fa24 f001 	lsr.w	r0, r4, r1
 8007746:	fa00 f101 	lsl.w	r1, r0, r1
 800774a:	428c      	cmp	r4, r1
 800774c:	d10b      	bne.n	8007766 <__any_on+0x3e>
 800774e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007752:	4293      	cmp	r3, r2
 8007754:	d803      	bhi.n	800775e <__any_on+0x36>
 8007756:	2000      	movs	r0, #0
 8007758:	bd10      	pop	{r4, pc}
 800775a:	4603      	mov	r3, r0
 800775c:	e7f7      	b.n	800774e <__any_on+0x26>
 800775e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007762:	2900      	cmp	r1, #0
 8007764:	d0f5      	beq.n	8007752 <__any_on+0x2a>
 8007766:	2001      	movs	r0, #1
 8007768:	e7f6      	b.n	8007758 <__any_on+0x30>

0800776a <_calloc_r>:
 800776a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800776c:	fba1 2402 	umull	r2, r4, r1, r2
 8007770:	b94c      	cbnz	r4, 8007786 <_calloc_r+0x1c>
 8007772:	4611      	mov	r1, r2
 8007774:	9201      	str	r2, [sp, #4]
 8007776:	f7fb ffc7 	bl	8003708 <_malloc_r>
 800777a:	9a01      	ldr	r2, [sp, #4]
 800777c:	4605      	mov	r5, r0
 800777e:	b930      	cbnz	r0, 800778e <_calloc_r+0x24>
 8007780:	4628      	mov	r0, r5
 8007782:	b003      	add	sp, #12
 8007784:	bd30      	pop	{r4, r5, pc}
 8007786:	220c      	movs	r2, #12
 8007788:	6002      	str	r2, [r0, #0]
 800778a:	2500      	movs	r5, #0
 800778c:	e7f8      	b.n	8007780 <_calloc_r+0x16>
 800778e:	4621      	mov	r1, r4
 8007790:	f7fb ff46 	bl	8003620 <memset>
 8007794:	e7f4      	b.n	8007780 <_calloc_r+0x16>

08007796 <__ssputs_r>:
 8007796:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800779a:	688e      	ldr	r6, [r1, #8]
 800779c:	429e      	cmp	r6, r3
 800779e:	4682      	mov	sl, r0
 80077a0:	460c      	mov	r4, r1
 80077a2:	4690      	mov	r8, r2
 80077a4:	461f      	mov	r7, r3
 80077a6:	d838      	bhi.n	800781a <__ssputs_r+0x84>
 80077a8:	898a      	ldrh	r2, [r1, #12]
 80077aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077ae:	d032      	beq.n	8007816 <__ssputs_r+0x80>
 80077b0:	6825      	ldr	r5, [r4, #0]
 80077b2:	6909      	ldr	r1, [r1, #16]
 80077b4:	eba5 0901 	sub.w	r9, r5, r1
 80077b8:	6965      	ldr	r5, [r4, #20]
 80077ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077c2:	3301      	adds	r3, #1
 80077c4:	444b      	add	r3, r9
 80077c6:	106d      	asrs	r5, r5, #1
 80077c8:	429d      	cmp	r5, r3
 80077ca:	bf38      	it	cc
 80077cc:	461d      	movcc	r5, r3
 80077ce:	0553      	lsls	r3, r2, #21
 80077d0:	d531      	bpl.n	8007836 <__ssputs_r+0xa0>
 80077d2:	4629      	mov	r1, r5
 80077d4:	f7fb ff98 	bl	8003708 <_malloc_r>
 80077d8:	4606      	mov	r6, r0
 80077da:	b950      	cbnz	r0, 80077f2 <__ssputs_r+0x5c>
 80077dc:	230c      	movs	r3, #12
 80077de:	f8ca 3000 	str.w	r3, [sl]
 80077e2:	89a3      	ldrh	r3, [r4, #12]
 80077e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077e8:	81a3      	strh	r3, [r4, #12]
 80077ea:	f04f 30ff 	mov.w	r0, #4294967295
 80077ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f2:	6921      	ldr	r1, [r4, #16]
 80077f4:	464a      	mov	r2, r9
 80077f6:	f7ff fadd 	bl	8006db4 <memcpy>
 80077fa:	89a3      	ldrh	r3, [r4, #12]
 80077fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007804:	81a3      	strh	r3, [r4, #12]
 8007806:	6126      	str	r6, [r4, #16]
 8007808:	6165      	str	r5, [r4, #20]
 800780a:	444e      	add	r6, r9
 800780c:	eba5 0509 	sub.w	r5, r5, r9
 8007810:	6026      	str	r6, [r4, #0]
 8007812:	60a5      	str	r5, [r4, #8]
 8007814:	463e      	mov	r6, r7
 8007816:	42be      	cmp	r6, r7
 8007818:	d900      	bls.n	800781c <__ssputs_r+0x86>
 800781a:	463e      	mov	r6, r7
 800781c:	6820      	ldr	r0, [r4, #0]
 800781e:	4632      	mov	r2, r6
 8007820:	4641      	mov	r1, r8
 8007822:	f000 fb5f 	bl	8007ee4 <memmove>
 8007826:	68a3      	ldr	r3, [r4, #8]
 8007828:	1b9b      	subs	r3, r3, r6
 800782a:	60a3      	str	r3, [r4, #8]
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	4433      	add	r3, r6
 8007830:	6023      	str	r3, [r4, #0]
 8007832:	2000      	movs	r0, #0
 8007834:	e7db      	b.n	80077ee <__ssputs_r+0x58>
 8007836:	462a      	mov	r2, r5
 8007838:	f000 fb6e 	bl	8007f18 <_realloc_r>
 800783c:	4606      	mov	r6, r0
 800783e:	2800      	cmp	r0, #0
 8007840:	d1e1      	bne.n	8007806 <__ssputs_r+0x70>
 8007842:	6921      	ldr	r1, [r4, #16]
 8007844:	4650      	mov	r0, sl
 8007846:	f7fb fef3 	bl	8003630 <_free_r>
 800784a:	e7c7      	b.n	80077dc <__ssputs_r+0x46>

0800784c <_svfiprintf_r>:
 800784c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007850:	4698      	mov	r8, r3
 8007852:	898b      	ldrh	r3, [r1, #12]
 8007854:	061b      	lsls	r3, r3, #24
 8007856:	b09d      	sub	sp, #116	; 0x74
 8007858:	4607      	mov	r7, r0
 800785a:	460d      	mov	r5, r1
 800785c:	4614      	mov	r4, r2
 800785e:	d50e      	bpl.n	800787e <_svfiprintf_r+0x32>
 8007860:	690b      	ldr	r3, [r1, #16]
 8007862:	b963      	cbnz	r3, 800787e <_svfiprintf_r+0x32>
 8007864:	2140      	movs	r1, #64	; 0x40
 8007866:	f7fb ff4f 	bl	8003708 <_malloc_r>
 800786a:	6028      	str	r0, [r5, #0]
 800786c:	6128      	str	r0, [r5, #16]
 800786e:	b920      	cbnz	r0, 800787a <_svfiprintf_r+0x2e>
 8007870:	230c      	movs	r3, #12
 8007872:	603b      	str	r3, [r7, #0]
 8007874:	f04f 30ff 	mov.w	r0, #4294967295
 8007878:	e0d1      	b.n	8007a1e <_svfiprintf_r+0x1d2>
 800787a:	2340      	movs	r3, #64	; 0x40
 800787c:	616b      	str	r3, [r5, #20]
 800787e:	2300      	movs	r3, #0
 8007880:	9309      	str	r3, [sp, #36]	; 0x24
 8007882:	2320      	movs	r3, #32
 8007884:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007888:	f8cd 800c 	str.w	r8, [sp, #12]
 800788c:	2330      	movs	r3, #48	; 0x30
 800788e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a38 <_svfiprintf_r+0x1ec>
 8007892:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007896:	f04f 0901 	mov.w	r9, #1
 800789a:	4623      	mov	r3, r4
 800789c:	469a      	mov	sl, r3
 800789e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078a2:	b10a      	cbz	r2, 80078a8 <_svfiprintf_r+0x5c>
 80078a4:	2a25      	cmp	r2, #37	; 0x25
 80078a6:	d1f9      	bne.n	800789c <_svfiprintf_r+0x50>
 80078a8:	ebba 0b04 	subs.w	fp, sl, r4
 80078ac:	d00b      	beq.n	80078c6 <_svfiprintf_r+0x7a>
 80078ae:	465b      	mov	r3, fp
 80078b0:	4622      	mov	r2, r4
 80078b2:	4629      	mov	r1, r5
 80078b4:	4638      	mov	r0, r7
 80078b6:	f7ff ff6e 	bl	8007796 <__ssputs_r>
 80078ba:	3001      	adds	r0, #1
 80078bc:	f000 80aa 	beq.w	8007a14 <_svfiprintf_r+0x1c8>
 80078c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078c2:	445a      	add	r2, fp
 80078c4:	9209      	str	r2, [sp, #36]	; 0x24
 80078c6:	f89a 3000 	ldrb.w	r3, [sl]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f000 80a2 	beq.w	8007a14 <_svfiprintf_r+0x1c8>
 80078d0:	2300      	movs	r3, #0
 80078d2:	f04f 32ff 	mov.w	r2, #4294967295
 80078d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078da:	f10a 0a01 	add.w	sl, sl, #1
 80078de:	9304      	str	r3, [sp, #16]
 80078e0:	9307      	str	r3, [sp, #28]
 80078e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078e6:	931a      	str	r3, [sp, #104]	; 0x68
 80078e8:	4654      	mov	r4, sl
 80078ea:	2205      	movs	r2, #5
 80078ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078f0:	4851      	ldr	r0, [pc, #324]	; (8007a38 <_svfiprintf_r+0x1ec>)
 80078f2:	f7f8 fc7d 	bl	80001f0 <memchr>
 80078f6:	9a04      	ldr	r2, [sp, #16]
 80078f8:	b9d8      	cbnz	r0, 8007932 <_svfiprintf_r+0xe6>
 80078fa:	06d0      	lsls	r0, r2, #27
 80078fc:	bf44      	itt	mi
 80078fe:	2320      	movmi	r3, #32
 8007900:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007904:	0711      	lsls	r1, r2, #28
 8007906:	bf44      	itt	mi
 8007908:	232b      	movmi	r3, #43	; 0x2b
 800790a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800790e:	f89a 3000 	ldrb.w	r3, [sl]
 8007912:	2b2a      	cmp	r3, #42	; 0x2a
 8007914:	d015      	beq.n	8007942 <_svfiprintf_r+0xf6>
 8007916:	9a07      	ldr	r2, [sp, #28]
 8007918:	4654      	mov	r4, sl
 800791a:	2000      	movs	r0, #0
 800791c:	f04f 0c0a 	mov.w	ip, #10
 8007920:	4621      	mov	r1, r4
 8007922:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007926:	3b30      	subs	r3, #48	; 0x30
 8007928:	2b09      	cmp	r3, #9
 800792a:	d94e      	bls.n	80079ca <_svfiprintf_r+0x17e>
 800792c:	b1b0      	cbz	r0, 800795c <_svfiprintf_r+0x110>
 800792e:	9207      	str	r2, [sp, #28]
 8007930:	e014      	b.n	800795c <_svfiprintf_r+0x110>
 8007932:	eba0 0308 	sub.w	r3, r0, r8
 8007936:	fa09 f303 	lsl.w	r3, r9, r3
 800793a:	4313      	orrs	r3, r2
 800793c:	9304      	str	r3, [sp, #16]
 800793e:	46a2      	mov	sl, r4
 8007940:	e7d2      	b.n	80078e8 <_svfiprintf_r+0x9c>
 8007942:	9b03      	ldr	r3, [sp, #12]
 8007944:	1d19      	adds	r1, r3, #4
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	9103      	str	r1, [sp, #12]
 800794a:	2b00      	cmp	r3, #0
 800794c:	bfbb      	ittet	lt
 800794e:	425b      	neglt	r3, r3
 8007950:	f042 0202 	orrlt.w	r2, r2, #2
 8007954:	9307      	strge	r3, [sp, #28]
 8007956:	9307      	strlt	r3, [sp, #28]
 8007958:	bfb8      	it	lt
 800795a:	9204      	strlt	r2, [sp, #16]
 800795c:	7823      	ldrb	r3, [r4, #0]
 800795e:	2b2e      	cmp	r3, #46	; 0x2e
 8007960:	d10c      	bne.n	800797c <_svfiprintf_r+0x130>
 8007962:	7863      	ldrb	r3, [r4, #1]
 8007964:	2b2a      	cmp	r3, #42	; 0x2a
 8007966:	d135      	bne.n	80079d4 <_svfiprintf_r+0x188>
 8007968:	9b03      	ldr	r3, [sp, #12]
 800796a:	1d1a      	adds	r2, r3, #4
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	9203      	str	r2, [sp, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	bfb8      	it	lt
 8007974:	f04f 33ff 	movlt.w	r3, #4294967295
 8007978:	3402      	adds	r4, #2
 800797a:	9305      	str	r3, [sp, #20]
 800797c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a48 <_svfiprintf_r+0x1fc>
 8007980:	7821      	ldrb	r1, [r4, #0]
 8007982:	2203      	movs	r2, #3
 8007984:	4650      	mov	r0, sl
 8007986:	f7f8 fc33 	bl	80001f0 <memchr>
 800798a:	b140      	cbz	r0, 800799e <_svfiprintf_r+0x152>
 800798c:	2340      	movs	r3, #64	; 0x40
 800798e:	eba0 000a 	sub.w	r0, r0, sl
 8007992:	fa03 f000 	lsl.w	r0, r3, r0
 8007996:	9b04      	ldr	r3, [sp, #16]
 8007998:	4303      	orrs	r3, r0
 800799a:	3401      	adds	r4, #1
 800799c:	9304      	str	r3, [sp, #16]
 800799e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079a2:	4826      	ldr	r0, [pc, #152]	; (8007a3c <_svfiprintf_r+0x1f0>)
 80079a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079a8:	2206      	movs	r2, #6
 80079aa:	f7f8 fc21 	bl	80001f0 <memchr>
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d038      	beq.n	8007a24 <_svfiprintf_r+0x1d8>
 80079b2:	4b23      	ldr	r3, [pc, #140]	; (8007a40 <_svfiprintf_r+0x1f4>)
 80079b4:	bb1b      	cbnz	r3, 80079fe <_svfiprintf_r+0x1b2>
 80079b6:	9b03      	ldr	r3, [sp, #12]
 80079b8:	3307      	adds	r3, #7
 80079ba:	f023 0307 	bic.w	r3, r3, #7
 80079be:	3308      	adds	r3, #8
 80079c0:	9303      	str	r3, [sp, #12]
 80079c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c4:	4433      	add	r3, r6
 80079c6:	9309      	str	r3, [sp, #36]	; 0x24
 80079c8:	e767      	b.n	800789a <_svfiprintf_r+0x4e>
 80079ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80079ce:	460c      	mov	r4, r1
 80079d0:	2001      	movs	r0, #1
 80079d2:	e7a5      	b.n	8007920 <_svfiprintf_r+0xd4>
 80079d4:	2300      	movs	r3, #0
 80079d6:	3401      	adds	r4, #1
 80079d8:	9305      	str	r3, [sp, #20]
 80079da:	4619      	mov	r1, r3
 80079dc:	f04f 0c0a 	mov.w	ip, #10
 80079e0:	4620      	mov	r0, r4
 80079e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079e6:	3a30      	subs	r2, #48	; 0x30
 80079e8:	2a09      	cmp	r2, #9
 80079ea:	d903      	bls.n	80079f4 <_svfiprintf_r+0x1a8>
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d0c5      	beq.n	800797c <_svfiprintf_r+0x130>
 80079f0:	9105      	str	r1, [sp, #20]
 80079f2:	e7c3      	b.n	800797c <_svfiprintf_r+0x130>
 80079f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80079f8:	4604      	mov	r4, r0
 80079fa:	2301      	movs	r3, #1
 80079fc:	e7f0      	b.n	80079e0 <_svfiprintf_r+0x194>
 80079fe:	ab03      	add	r3, sp, #12
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	462a      	mov	r2, r5
 8007a04:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <_svfiprintf_r+0x1f8>)
 8007a06:	a904      	add	r1, sp, #16
 8007a08:	4638      	mov	r0, r7
 8007a0a:	f7fb ff91 	bl	8003930 <_printf_float>
 8007a0e:	1c42      	adds	r2, r0, #1
 8007a10:	4606      	mov	r6, r0
 8007a12:	d1d6      	bne.n	80079c2 <_svfiprintf_r+0x176>
 8007a14:	89ab      	ldrh	r3, [r5, #12]
 8007a16:	065b      	lsls	r3, r3, #25
 8007a18:	f53f af2c 	bmi.w	8007874 <_svfiprintf_r+0x28>
 8007a1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a1e:	b01d      	add	sp, #116	; 0x74
 8007a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a24:	ab03      	add	r3, sp, #12
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	462a      	mov	r2, r5
 8007a2a:	4b06      	ldr	r3, [pc, #24]	; (8007a44 <_svfiprintf_r+0x1f8>)
 8007a2c:	a904      	add	r1, sp, #16
 8007a2e:	4638      	mov	r0, r7
 8007a30:	f7fc fa22 	bl	8003e78 <_printf_i>
 8007a34:	e7eb      	b.n	8007a0e <_svfiprintf_r+0x1c2>
 8007a36:	bf00      	nop
 8007a38:	08008cb4 	.word	0x08008cb4
 8007a3c:	08008cbe 	.word	0x08008cbe
 8007a40:	08003931 	.word	0x08003931
 8007a44:	08007797 	.word	0x08007797
 8007a48:	08008cba 	.word	0x08008cba

08007a4c <__sfputc_r>:
 8007a4c:	6893      	ldr	r3, [r2, #8]
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	b410      	push	{r4}
 8007a54:	6093      	str	r3, [r2, #8]
 8007a56:	da08      	bge.n	8007a6a <__sfputc_r+0x1e>
 8007a58:	6994      	ldr	r4, [r2, #24]
 8007a5a:	42a3      	cmp	r3, r4
 8007a5c:	db01      	blt.n	8007a62 <__sfputc_r+0x16>
 8007a5e:	290a      	cmp	r1, #10
 8007a60:	d103      	bne.n	8007a6a <__sfputc_r+0x1e>
 8007a62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a66:	f7fd bcc5 	b.w	80053f4 <__swbuf_r>
 8007a6a:	6813      	ldr	r3, [r2, #0]
 8007a6c:	1c58      	adds	r0, r3, #1
 8007a6e:	6010      	str	r0, [r2, #0]
 8007a70:	7019      	strb	r1, [r3, #0]
 8007a72:	4608      	mov	r0, r1
 8007a74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <__sfputs_r>:
 8007a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7c:	4606      	mov	r6, r0
 8007a7e:	460f      	mov	r7, r1
 8007a80:	4614      	mov	r4, r2
 8007a82:	18d5      	adds	r5, r2, r3
 8007a84:	42ac      	cmp	r4, r5
 8007a86:	d101      	bne.n	8007a8c <__sfputs_r+0x12>
 8007a88:	2000      	movs	r0, #0
 8007a8a:	e007      	b.n	8007a9c <__sfputs_r+0x22>
 8007a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a90:	463a      	mov	r2, r7
 8007a92:	4630      	mov	r0, r6
 8007a94:	f7ff ffda 	bl	8007a4c <__sfputc_r>
 8007a98:	1c43      	adds	r3, r0, #1
 8007a9a:	d1f3      	bne.n	8007a84 <__sfputs_r+0xa>
 8007a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007aa0 <_vfiprintf_r>:
 8007aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa4:	460d      	mov	r5, r1
 8007aa6:	b09d      	sub	sp, #116	; 0x74
 8007aa8:	4614      	mov	r4, r2
 8007aaa:	4698      	mov	r8, r3
 8007aac:	4606      	mov	r6, r0
 8007aae:	b118      	cbz	r0, 8007ab8 <_vfiprintf_r+0x18>
 8007ab0:	6983      	ldr	r3, [r0, #24]
 8007ab2:	b90b      	cbnz	r3, 8007ab8 <_vfiprintf_r+0x18>
 8007ab4:	f7fe fcf4 	bl	80064a0 <__sinit>
 8007ab8:	4b89      	ldr	r3, [pc, #548]	; (8007ce0 <_vfiprintf_r+0x240>)
 8007aba:	429d      	cmp	r5, r3
 8007abc:	d11b      	bne.n	8007af6 <_vfiprintf_r+0x56>
 8007abe:	6875      	ldr	r5, [r6, #4]
 8007ac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ac2:	07d9      	lsls	r1, r3, #31
 8007ac4:	d405      	bmi.n	8007ad2 <_vfiprintf_r+0x32>
 8007ac6:	89ab      	ldrh	r3, [r5, #12]
 8007ac8:	059a      	lsls	r2, r3, #22
 8007aca:	d402      	bmi.n	8007ad2 <_vfiprintf_r+0x32>
 8007acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ace:	f7ff f8f8 	bl	8006cc2 <__retarget_lock_acquire_recursive>
 8007ad2:	89ab      	ldrh	r3, [r5, #12]
 8007ad4:	071b      	lsls	r3, r3, #28
 8007ad6:	d501      	bpl.n	8007adc <_vfiprintf_r+0x3c>
 8007ad8:	692b      	ldr	r3, [r5, #16]
 8007ada:	b9eb      	cbnz	r3, 8007b18 <_vfiprintf_r+0x78>
 8007adc:	4629      	mov	r1, r5
 8007ade:	4630      	mov	r0, r6
 8007ae0:	f7fd fcda 	bl	8005498 <__swsetup_r>
 8007ae4:	b1c0      	cbz	r0, 8007b18 <_vfiprintf_r+0x78>
 8007ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ae8:	07dc      	lsls	r4, r3, #31
 8007aea:	d50e      	bpl.n	8007b0a <_vfiprintf_r+0x6a>
 8007aec:	f04f 30ff 	mov.w	r0, #4294967295
 8007af0:	b01d      	add	sp, #116	; 0x74
 8007af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af6:	4b7b      	ldr	r3, [pc, #492]	; (8007ce4 <_vfiprintf_r+0x244>)
 8007af8:	429d      	cmp	r5, r3
 8007afa:	d101      	bne.n	8007b00 <_vfiprintf_r+0x60>
 8007afc:	68b5      	ldr	r5, [r6, #8]
 8007afe:	e7df      	b.n	8007ac0 <_vfiprintf_r+0x20>
 8007b00:	4b79      	ldr	r3, [pc, #484]	; (8007ce8 <_vfiprintf_r+0x248>)
 8007b02:	429d      	cmp	r5, r3
 8007b04:	bf08      	it	eq
 8007b06:	68f5      	ldreq	r5, [r6, #12]
 8007b08:	e7da      	b.n	8007ac0 <_vfiprintf_r+0x20>
 8007b0a:	89ab      	ldrh	r3, [r5, #12]
 8007b0c:	0598      	lsls	r0, r3, #22
 8007b0e:	d4ed      	bmi.n	8007aec <_vfiprintf_r+0x4c>
 8007b10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b12:	f7ff f8d7 	bl	8006cc4 <__retarget_lock_release_recursive>
 8007b16:	e7e9      	b.n	8007aec <_vfiprintf_r+0x4c>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b1c:	2320      	movs	r3, #32
 8007b1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b22:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b26:	2330      	movs	r3, #48	; 0x30
 8007b28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007cec <_vfiprintf_r+0x24c>
 8007b2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b30:	f04f 0901 	mov.w	r9, #1
 8007b34:	4623      	mov	r3, r4
 8007b36:	469a      	mov	sl, r3
 8007b38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b3c:	b10a      	cbz	r2, 8007b42 <_vfiprintf_r+0xa2>
 8007b3e:	2a25      	cmp	r2, #37	; 0x25
 8007b40:	d1f9      	bne.n	8007b36 <_vfiprintf_r+0x96>
 8007b42:	ebba 0b04 	subs.w	fp, sl, r4
 8007b46:	d00b      	beq.n	8007b60 <_vfiprintf_r+0xc0>
 8007b48:	465b      	mov	r3, fp
 8007b4a:	4622      	mov	r2, r4
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	4630      	mov	r0, r6
 8007b50:	f7ff ff93 	bl	8007a7a <__sfputs_r>
 8007b54:	3001      	adds	r0, #1
 8007b56:	f000 80aa 	beq.w	8007cae <_vfiprintf_r+0x20e>
 8007b5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b5c:	445a      	add	r2, fp
 8007b5e:	9209      	str	r2, [sp, #36]	; 0x24
 8007b60:	f89a 3000 	ldrb.w	r3, [sl]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 80a2 	beq.w	8007cae <_vfiprintf_r+0x20e>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b74:	f10a 0a01 	add.w	sl, sl, #1
 8007b78:	9304      	str	r3, [sp, #16]
 8007b7a:	9307      	str	r3, [sp, #28]
 8007b7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b80:	931a      	str	r3, [sp, #104]	; 0x68
 8007b82:	4654      	mov	r4, sl
 8007b84:	2205      	movs	r2, #5
 8007b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b8a:	4858      	ldr	r0, [pc, #352]	; (8007cec <_vfiprintf_r+0x24c>)
 8007b8c:	f7f8 fb30 	bl	80001f0 <memchr>
 8007b90:	9a04      	ldr	r2, [sp, #16]
 8007b92:	b9d8      	cbnz	r0, 8007bcc <_vfiprintf_r+0x12c>
 8007b94:	06d1      	lsls	r1, r2, #27
 8007b96:	bf44      	itt	mi
 8007b98:	2320      	movmi	r3, #32
 8007b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b9e:	0713      	lsls	r3, r2, #28
 8007ba0:	bf44      	itt	mi
 8007ba2:	232b      	movmi	r3, #43	; 0x2b
 8007ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8007bac:	2b2a      	cmp	r3, #42	; 0x2a
 8007bae:	d015      	beq.n	8007bdc <_vfiprintf_r+0x13c>
 8007bb0:	9a07      	ldr	r2, [sp, #28]
 8007bb2:	4654      	mov	r4, sl
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	f04f 0c0a 	mov.w	ip, #10
 8007bba:	4621      	mov	r1, r4
 8007bbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bc0:	3b30      	subs	r3, #48	; 0x30
 8007bc2:	2b09      	cmp	r3, #9
 8007bc4:	d94e      	bls.n	8007c64 <_vfiprintf_r+0x1c4>
 8007bc6:	b1b0      	cbz	r0, 8007bf6 <_vfiprintf_r+0x156>
 8007bc8:	9207      	str	r2, [sp, #28]
 8007bca:	e014      	b.n	8007bf6 <_vfiprintf_r+0x156>
 8007bcc:	eba0 0308 	sub.w	r3, r0, r8
 8007bd0:	fa09 f303 	lsl.w	r3, r9, r3
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	9304      	str	r3, [sp, #16]
 8007bd8:	46a2      	mov	sl, r4
 8007bda:	e7d2      	b.n	8007b82 <_vfiprintf_r+0xe2>
 8007bdc:	9b03      	ldr	r3, [sp, #12]
 8007bde:	1d19      	adds	r1, r3, #4
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	9103      	str	r1, [sp, #12]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	bfbb      	ittet	lt
 8007be8:	425b      	neglt	r3, r3
 8007bea:	f042 0202 	orrlt.w	r2, r2, #2
 8007bee:	9307      	strge	r3, [sp, #28]
 8007bf0:	9307      	strlt	r3, [sp, #28]
 8007bf2:	bfb8      	it	lt
 8007bf4:	9204      	strlt	r2, [sp, #16]
 8007bf6:	7823      	ldrb	r3, [r4, #0]
 8007bf8:	2b2e      	cmp	r3, #46	; 0x2e
 8007bfa:	d10c      	bne.n	8007c16 <_vfiprintf_r+0x176>
 8007bfc:	7863      	ldrb	r3, [r4, #1]
 8007bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8007c00:	d135      	bne.n	8007c6e <_vfiprintf_r+0x1ce>
 8007c02:	9b03      	ldr	r3, [sp, #12]
 8007c04:	1d1a      	adds	r2, r3, #4
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	9203      	str	r2, [sp, #12]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	bfb8      	it	lt
 8007c0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c12:	3402      	adds	r4, #2
 8007c14:	9305      	str	r3, [sp, #20]
 8007c16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007cfc <_vfiprintf_r+0x25c>
 8007c1a:	7821      	ldrb	r1, [r4, #0]
 8007c1c:	2203      	movs	r2, #3
 8007c1e:	4650      	mov	r0, sl
 8007c20:	f7f8 fae6 	bl	80001f0 <memchr>
 8007c24:	b140      	cbz	r0, 8007c38 <_vfiprintf_r+0x198>
 8007c26:	2340      	movs	r3, #64	; 0x40
 8007c28:	eba0 000a 	sub.w	r0, r0, sl
 8007c2c:	fa03 f000 	lsl.w	r0, r3, r0
 8007c30:	9b04      	ldr	r3, [sp, #16]
 8007c32:	4303      	orrs	r3, r0
 8007c34:	3401      	adds	r4, #1
 8007c36:	9304      	str	r3, [sp, #16]
 8007c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c3c:	482c      	ldr	r0, [pc, #176]	; (8007cf0 <_vfiprintf_r+0x250>)
 8007c3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c42:	2206      	movs	r2, #6
 8007c44:	f7f8 fad4 	bl	80001f0 <memchr>
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	d03f      	beq.n	8007ccc <_vfiprintf_r+0x22c>
 8007c4c:	4b29      	ldr	r3, [pc, #164]	; (8007cf4 <_vfiprintf_r+0x254>)
 8007c4e:	bb1b      	cbnz	r3, 8007c98 <_vfiprintf_r+0x1f8>
 8007c50:	9b03      	ldr	r3, [sp, #12]
 8007c52:	3307      	adds	r3, #7
 8007c54:	f023 0307 	bic.w	r3, r3, #7
 8007c58:	3308      	adds	r3, #8
 8007c5a:	9303      	str	r3, [sp, #12]
 8007c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c5e:	443b      	add	r3, r7
 8007c60:	9309      	str	r3, [sp, #36]	; 0x24
 8007c62:	e767      	b.n	8007b34 <_vfiprintf_r+0x94>
 8007c64:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c68:	460c      	mov	r4, r1
 8007c6a:	2001      	movs	r0, #1
 8007c6c:	e7a5      	b.n	8007bba <_vfiprintf_r+0x11a>
 8007c6e:	2300      	movs	r3, #0
 8007c70:	3401      	adds	r4, #1
 8007c72:	9305      	str	r3, [sp, #20]
 8007c74:	4619      	mov	r1, r3
 8007c76:	f04f 0c0a 	mov.w	ip, #10
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c80:	3a30      	subs	r2, #48	; 0x30
 8007c82:	2a09      	cmp	r2, #9
 8007c84:	d903      	bls.n	8007c8e <_vfiprintf_r+0x1ee>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d0c5      	beq.n	8007c16 <_vfiprintf_r+0x176>
 8007c8a:	9105      	str	r1, [sp, #20]
 8007c8c:	e7c3      	b.n	8007c16 <_vfiprintf_r+0x176>
 8007c8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c92:	4604      	mov	r4, r0
 8007c94:	2301      	movs	r3, #1
 8007c96:	e7f0      	b.n	8007c7a <_vfiprintf_r+0x1da>
 8007c98:	ab03      	add	r3, sp, #12
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	462a      	mov	r2, r5
 8007c9e:	4b16      	ldr	r3, [pc, #88]	; (8007cf8 <_vfiprintf_r+0x258>)
 8007ca0:	a904      	add	r1, sp, #16
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	f7fb fe44 	bl	8003930 <_printf_float>
 8007ca8:	4607      	mov	r7, r0
 8007caa:	1c78      	adds	r0, r7, #1
 8007cac:	d1d6      	bne.n	8007c5c <_vfiprintf_r+0x1bc>
 8007cae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cb0:	07d9      	lsls	r1, r3, #31
 8007cb2:	d405      	bmi.n	8007cc0 <_vfiprintf_r+0x220>
 8007cb4:	89ab      	ldrh	r3, [r5, #12]
 8007cb6:	059a      	lsls	r2, r3, #22
 8007cb8:	d402      	bmi.n	8007cc0 <_vfiprintf_r+0x220>
 8007cba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cbc:	f7ff f802 	bl	8006cc4 <__retarget_lock_release_recursive>
 8007cc0:	89ab      	ldrh	r3, [r5, #12]
 8007cc2:	065b      	lsls	r3, r3, #25
 8007cc4:	f53f af12 	bmi.w	8007aec <_vfiprintf_r+0x4c>
 8007cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cca:	e711      	b.n	8007af0 <_vfiprintf_r+0x50>
 8007ccc:	ab03      	add	r3, sp, #12
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	462a      	mov	r2, r5
 8007cd2:	4b09      	ldr	r3, [pc, #36]	; (8007cf8 <_vfiprintf_r+0x258>)
 8007cd4:	a904      	add	r1, sp, #16
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	f7fc f8ce 	bl	8003e78 <_printf_i>
 8007cdc:	e7e4      	b.n	8007ca8 <_vfiprintf_r+0x208>
 8007cde:	bf00      	nop
 8007ce0:	08008a9c 	.word	0x08008a9c
 8007ce4:	08008abc 	.word	0x08008abc
 8007ce8:	08008a7c 	.word	0x08008a7c
 8007cec:	08008cb4 	.word	0x08008cb4
 8007cf0:	08008cbe 	.word	0x08008cbe
 8007cf4:	08003931 	.word	0x08003931
 8007cf8:	08007a7b 	.word	0x08007a7b
 8007cfc:	08008cba 	.word	0x08008cba

08007d00 <nan>:
 8007d00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007d08 <nan+0x8>
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	00000000 	.word	0x00000000
 8007d0c:	7ff80000 	.word	0x7ff80000

08007d10 <__sread>:
 8007d10:	b510      	push	{r4, lr}
 8007d12:	460c      	mov	r4, r1
 8007d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d18:	f000 f92e 	bl	8007f78 <_read_r>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	bfab      	itete	ge
 8007d20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d22:	89a3      	ldrhlt	r3, [r4, #12]
 8007d24:	181b      	addge	r3, r3, r0
 8007d26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d2a:	bfac      	ite	ge
 8007d2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d2e:	81a3      	strhlt	r3, [r4, #12]
 8007d30:	bd10      	pop	{r4, pc}

08007d32 <__swrite>:
 8007d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d36:	461f      	mov	r7, r3
 8007d38:	898b      	ldrh	r3, [r1, #12]
 8007d3a:	05db      	lsls	r3, r3, #23
 8007d3c:	4605      	mov	r5, r0
 8007d3e:	460c      	mov	r4, r1
 8007d40:	4616      	mov	r6, r2
 8007d42:	d505      	bpl.n	8007d50 <__swrite+0x1e>
 8007d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d48:	2302      	movs	r3, #2
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f000 f8b8 	bl	8007ec0 <_lseek_r>
 8007d50:	89a3      	ldrh	r3, [r4, #12]
 8007d52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d5a:	81a3      	strh	r3, [r4, #12]
 8007d5c:	4632      	mov	r2, r6
 8007d5e:	463b      	mov	r3, r7
 8007d60:	4628      	mov	r0, r5
 8007d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d66:	f000 b837 	b.w	8007dd8 <_write_r>

08007d6a <__sseek>:
 8007d6a:	b510      	push	{r4, lr}
 8007d6c:	460c      	mov	r4, r1
 8007d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d72:	f000 f8a5 	bl	8007ec0 <_lseek_r>
 8007d76:	1c43      	adds	r3, r0, #1
 8007d78:	89a3      	ldrh	r3, [r4, #12]
 8007d7a:	bf15      	itete	ne
 8007d7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d86:	81a3      	strheq	r3, [r4, #12]
 8007d88:	bf18      	it	ne
 8007d8a:	81a3      	strhne	r3, [r4, #12]
 8007d8c:	bd10      	pop	{r4, pc}

08007d8e <__sclose>:
 8007d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d92:	f000 b851 	b.w	8007e38 <_close_r>

08007d96 <strncmp>:
 8007d96:	b510      	push	{r4, lr}
 8007d98:	b17a      	cbz	r2, 8007dba <strncmp+0x24>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	3901      	subs	r1, #1
 8007d9e:	1884      	adds	r4, r0, r2
 8007da0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007da4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007da8:	4290      	cmp	r0, r2
 8007daa:	d101      	bne.n	8007db0 <strncmp+0x1a>
 8007dac:	42a3      	cmp	r3, r4
 8007dae:	d101      	bne.n	8007db4 <strncmp+0x1e>
 8007db0:	1a80      	subs	r0, r0, r2
 8007db2:	bd10      	pop	{r4, pc}
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d1f3      	bne.n	8007da0 <strncmp+0xa>
 8007db8:	e7fa      	b.n	8007db0 <strncmp+0x1a>
 8007dba:	4610      	mov	r0, r2
 8007dbc:	e7f9      	b.n	8007db2 <strncmp+0x1c>

08007dbe <__ascii_wctomb>:
 8007dbe:	b149      	cbz	r1, 8007dd4 <__ascii_wctomb+0x16>
 8007dc0:	2aff      	cmp	r2, #255	; 0xff
 8007dc2:	bf85      	ittet	hi
 8007dc4:	238a      	movhi	r3, #138	; 0x8a
 8007dc6:	6003      	strhi	r3, [r0, #0]
 8007dc8:	700a      	strbls	r2, [r1, #0]
 8007dca:	f04f 30ff 	movhi.w	r0, #4294967295
 8007dce:	bf98      	it	ls
 8007dd0:	2001      	movls	r0, #1
 8007dd2:	4770      	bx	lr
 8007dd4:	4608      	mov	r0, r1
 8007dd6:	4770      	bx	lr

08007dd8 <_write_r>:
 8007dd8:	b538      	push	{r3, r4, r5, lr}
 8007dda:	4d07      	ldr	r5, [pc, #28]	; (8007df8 <_write_r+0x20>)
 8007ddc:	4604      	mov	r4, r0
 8007dde:	4608      	mov	r0, r1
 8007de0:	4611      	mov	r1, r2
 8007de2:	2200      	movs	r2, #0
 8007de4:	602a      	str	r2, [r5, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	f7fa fbde 	bl	80025a8 <_write>
 8007dec:	1c43      	adds	r3, r0, #1
 8007dee:	d102      	bne.n	8007df6 <_write_r+0x1e>
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	b103      	cbz	r3, 8007df6 <_write_r+0x1e>
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	bd38      	pop	{r3, r4, r5, pc}
 8007df8:	20000c90 	.word	0x20000c90

08007dfc <__assert_func>:
 8007dfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007dfe:	4614      	mov	r4, r2
 8007e00:	461a      	mov	r2, r3
 8007e02:	4b09      	ldr	r3, [pc, #36]	; (8007e28 <__assert_func+0x2c>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4605      	mov	r5, r0
 8007e08:	68d8      	ldr	r0, [r3, #12]
 8007e0a:	b14c      	cbz	r4, 8007e20 <__assert_func+0x24>
 8007e0c:	4b07      	ldr	r3, [pc, #28]	; (8007e2c <__assert_func+0x30>)
 8007e0e:	9100      	str	r1, [sp, #0]
 8007e10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e14:	4906      	ldr	r1, [pc, #24]	; (8007e30 <__assert_func+0x34>)
 8007e16:	462b      	mov	r3, r5
 8007e18:	f000 f81e 	bl	8007e58 <fiprintf>
 8007e1c:	f000 f8be 	bl	8007f9c <abort>
 8007e20:	4b04      	ldr	r3, [pc, #16]	; (8007e34 <__assert_func+0x38>)
 8007e22:	461c      	mov	r4, r3
 8007e24:	e7f3      	b.n	8007e0e <__assert_func+0x12>
 8007e26:	bf00      	nop
 8007e28:	20000014 	.word	0x20000014
 8007e2c:	08008cc5 	.word	0x08008cc5
 8007e30:	08008cd2 	.word	0x08008cd2
 8007e34:	08008d00 	.word	0x08008d00

08007e38 <_close_r>:
 8007e38:	b538      	push	{r3, r4, r5, lr}
 8007e3a:	4d06      	ldr	r5, [pc, #24]	; (8007e54 <_close_r+0x1c>)
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	4604      	mov	r4, r0
 8007e40:	4608      	mov	r0, r1
 8007e42:	602b      	str	r3, [r5, #0]
 8007e44:	f7fa fbcc 	bl	80025e0 <_close>
 8007e48:	1c43      	adds	r3, r0, #1
 8007e4a:	d102      	bne.n	8007e52 <_close_r+0x1a>
 8007e4c:	682b      	ldr	r3, [r5, #0]
 8007e4e:	b103      	cbz	r3, 8007e52 <_close_r+0x1a>
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	bd38      	pop	{r3, r4, r5, pc}
 8007e54:	20000c90 	.word	0x20000c90

08007e58 <fiprintf>:
 8007e58:	b40e      	push	{r1, r2, r3}
 8007e5a:	b503      	push	{r0, r1, lr}
 8007e5c:	4601      	mov	r1, r0
 8007e5e:	ab03      	add	r3, sp, #12
 8007e60:	4805      	ldr	r0, [pc, #20]	; (8007e78 <fiprintf+0x20>)
 8007e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e66:	6800      	ldr	r0, [r0, #0]
 8007e68:	9301      	str	r3, [sp, #4]
 8007e6a:	f7ff fe19 	bl	8007aa0 <_vfiprintf_r>
 8007e6e:	b002      	add	sp, #8
 8007e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e74:	b003      	add	sp, #12
 8007e76:	4770      	bx	lr
 8007e78:	20000014 	.word	0x20000014

08007e7c <_fstat_r>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	4d07      	ldr	r5, [pc, #28]	; (8007e9c <_fstat_r+0x20>)
 8007e80:	2300      	movs	r3, #0
 8007e82:	4604      	mov	r4, r0
 8007e84:	4608      	mov	r0, r1
 8007e86:	4611      	mov	r1, r2
 8007e88:	602b      	str	r3, [r5, #0]
 8007e8a:	f7fa fbb5 	bl	80025f8 <_fstat>
 8007e8e:	1c43      	adds	r3, r0, #1
 8007e90:	d102      	bne.n	8007e98 <_fstat_r+0x1c>
 8007e92:	682b      	ldr	r3, [r5, #0]
 8007e94:	b103      	cbz	r3, 8007e98 <_fstat_r+0x1c>
 8007e96:	6023      	str	r3, [r4, #0]
 8007e98:	bd38      	pop	{r3, r4, r5, pc}
 8007e9a:	bf00      	nop
 8007e9c:	20000c90 	.word	0x20000c90

08007ea0 <_isatty_r>:
 8007ea0:	b538      	push	{r3, r4, r5, lr}
 8007ea2:	4d06      	ldr	r5, [pc, #24]	; (8007ebc <_isatty_r+0x1c>)
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	4608      	mov	r0, r1
 8007eaa:	602b      	str	r3, [r5, #0]
 8007eac:	f7fa fbb4 	bl	8002618 <_isatty>
 8007eb0:	1c43      	adds	r3, r0, #1
 8007eb2:	d102      	bne.n	8007eba <_isatty_r+0x1a>
 8007eb4:	682b      	ldr	r3, [r5, #0]
 8007eb6:	b103      	cbz	r3, 8007eba <_isatty_r+0x1a>
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	bd38      	pop	{r3, r4, r5, pc}
 8007ebc:	20000c90 	.word	0x20000c90

08007ec0 <_lseek_r>:
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	4d07      	ldr	r5, [pc, #28]	; (8007ee0 <_lseek_r+0x20>)
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	4608      	mov	r0, r1
 8007ec8:	4611      	mov	r1, r2
 8007eca:	2200      	movs	r2, #0
 8007ecc:	602a      	str	r2, [r5, #0]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	f7fa fbad 	bl	800262e <_lseek>
 8007ed4:	1c43      	adds	r3, r0, #1
 8007ed6:	d102      	bne.n	8007ede <_lseek_r+0x1e>
 8007ed8:	682b      	ldr	r3, [r5, #0]
 8007eda:	b103      	cbz	r3, 8007ede <_lseek_r+0x1e>
 8007edc:	6023      	str	r3, [r4, #0]
 8007ede:	bd38      	pop	{r3, r4, r5, pc}
 8007ee0:	20000c90 	.word	0x20000c90

08007ee4 <memmove>:
 8007ee4:	4288      	cmp	r0, r1
 8007ee6:	b510      	push	{r4, lr}
 8007ee8:	eb01 0402 	add.w	r4, r1, r2
 8007eec:	d902      	bls.n	8007ef4 <memmove+0x10>
 8007eee:	4284      	cmp	r4, r0
 8007ef0:	4623      	mov	r3, r4
 8007ef2:	d807      	bhi.n	8007f04 <memmove+0x20>
 8007ef4:	1e43      	subs	r3, r0, #1
 8007ef6:	42a1      	cmp	r1, r4
 8007ef8:	d008      	beq.n	8007f0c <memmove+0x28>
 8007efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007efe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f02:	e7f8      	b.n	8007ef6 <memmove+0x12>
 8007f04:	4402      	add	r2, r0
 8007f06:	4601      	mov	r1, r0
 8007f08:	428a      	cmp	r2, r1
 8007f0a:	d100      	bne.n	8007f0e <memmove+0x2a>
 8007f0c:	bd10      	pop	{r4, pc}
 8007f0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f16:	e7f7      	b.n	8007f08 <memmove+0x24>

08007f18 <_realloc_r>:
 8007f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f1c:	4680      	mov	r8, r0
 8007f1e:	4614      	mov	r4, r2
 8007f20:	460e      	mov	r6, r1
 8007f22:	b921      	cbnz	r1, 8007f2e <_realloc_r+0x16>
 8007f24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f28:	4611      	mov	r1, r2
 8007f2a:	f7fb bbed 	b.w	8003708 <_malloc_r>
 8007f2e:	b92a      	cbnz	r2, 8007f3c <_realloc_r+0x24>
 8007f30:	f7fb fb7e 	bl	8003630 <_free_r>
 8007f34:	4625      	mov	r5, r4
 8007f36:	4628      	mov	r0, r5
 8007f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f3c:	f000 f835 	bl	8007faa <_malloc_usable_size_r>
 8007f40:	4284      	cmp	r4, r0
 8007f42:	4607      	mov	r7, r0
 8007f44:	d802      	bhi.n	8007f4c <_realloc_r+0x34>
 8007f46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f4a:	d812      	bhi.n	8007f72 <_realloc_r+0x5a>
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	4640      	mov	r0, r8
 8007f50:	f7fb fbda 	bl	8003708 <_malloc_r>
 8007f54:	4605      	mov	r5, r0
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d0ed      	beq.n	8007f36 <_realloc_r+0x1e>
 8007f5a:	42bc      	cmp	r4, r7
 8007f5c:	4622      	mov	r2, r4
 8007f5e:	4631      	mov	r1, r6
 8007f60:	bf28      	it	cs
 8007f62:	463a      	movcs	r2, r7
 8007f64:	f7fe ff26 	bl	8006db4 <memcpy>
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4640      	mov	r0, r8
 8007f6c:	f7fb fb60 	bl	8003630 <_free_r>
 8007f70:	e7e1      	b.n	8007f36 <_realloc_r+0x1e>
 8007f72:	4635      	mov	r5, r6
 8007f74:	e7df      	b.n	8007f36 <_realloc_r+0x1e>
	...

08007f78 <_read_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	4d07      	ldr	r5, [pc, #28]	; (8007f98 <_read_r+0x20>)
 8007f7c:	4604      	mov	r4, r0
 8007f7e:	4608      	mov	r0, r1
 8007f80:	4611      	mov	r1, r2
 8007f82:	2200      	movs	r2, #0
 8007f84:	602a      	str	r2, [r5, #0]
 8007f86:	461a      	mov	r2, r3
 8007f88:	f7fa faf1 	bl	800256e <_read>
 8007f8c:	1c43      	adds	r3, r0, #1
 8007f8e:	d102      	bne.n	8007f96 <_read_r+0x1e>
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	b103      	cbz	r3, 8007f96 <_read_r+0x1e>
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	bd38      	pop	{r3, r4, r5, pc}
 8007f98:	20000c90 	.word	0x20000c90

08007f9c <abort>:
 8007f9c:	b508      	push	{r3, lr}
 8007f9e:	2006      	movs	r0, #6
 8007fa0:	f000 f834 	bl	800800c <raise>
 8007fa4:	2001      	movs	r0, #1
 8007fa6:	f7fa fad8 	bl	800255a <_exit>

08007faa <_malloc_usable_size_r>:
 8007faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fae:	1f18      	subs	r0, r3, #4
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	bfbc      	itt	lt
 8007fb4:	580b      	ldrlt	r3, [r1, r0]
 8007fb6:	18c0      	addlt	r0, r0, r3
 8007fb8:	4770      	bx	lr

08007fba <_raise_r>:
 8007fba:	291f      	cmp	r1, #31
 8007fbc:	b538      	push	{r3, r4, r5, lr}
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	460d      	mov	r5, r1
 8007fc2:	d904      	bls.n	8007fce <_raise_r+0x14>
 8007fc4:	2316      	movs	r3, #22
 8007fc6:	6003      	str	r3, [r0, #0]
 8007fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fcc:	bd38      	pop	{r3, r4, r5, pc}
 8007fce:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007fd0:	b112      	cbz	r2, 8007fd8 <_raise_r+0x1e>
 8007fd2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007fd6:	b94b      	cbnz	r3, 8007fec <_raise_r+0x32>
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f000 f831 	bl	8008040 <_getpid_r>
 8007fde:	462a      	mov	r2, r5
 8007fe0:	4601      	mov	r1, r0
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fe8:	f000 b818 	b.w	800801c <_kill_r>
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d00a      	beq.n	8008006 <_raise_r+0x4c>
 8007ff0:	1c59      	adds	r1, r3, #1
 8007ff2:	d103      	bne.n	8007ffc <_raise_r+0x42>
 8007ff4:	2316      	movs	r3, #22
 8007ff6:	6003      	str	r3, [r0, #0]
 8007ff8:	2001      	movs	r0, #1
 8007ffa:	e7e7      	b.n	8007fcc <_raise_r+0x12>
 8007ffc:	2400      	movs	r4, #0
 8007ffe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008002:	4628      	mov	r0, r5
 8008004:	4798      	blx	r3
 8008006:	2000      	movs	r0, #0
 8008008:	e7e0      	b.n	8007fcc <_raise_r+0x12>
	...

0800800c <raise>:
 800800c:	4b02      	ldr	r3, [pc, #8]	; (8008018 <raise+0xc>)
 800800e:	4601      	mov	r1, r0
 8008010:	6818      	ldr	r0, [r3, #0]
 8008012:	f7ff bfd2 	b.w	8007fba <_raise_r>
 8008016:	bf00      	nop
 8008018:	20000014 	.word	0x20000014

0800801c <_kill_r>:
 800801c:	b538      	push	{r3, r4, r5, lr}
 800801e:	4d07      	ldr	r5, [pc, #28]	; (800803c <_kill_r+0x20>)
 8008020:	2300      	movs	r3, #0
 8008022:	4604      	mov	r4, r0
 8008024:	4608      	mov	r0, r1
 8008026:	4611      	mov	r1, r2
 8008028:	602b      	str	r3, [r5, #0]
 800802a:	f7fa fa86 	bl	800253a <_kill>
 800802e:	1c43      	adds	r3, r0, #1
 8008030:	d102      	bne.n	8008038 <_kill_r+0x1c>
 8008032:	682b      	ldr	r3, [r5, #0]
 8008034:	b103      	cbz	r3, 8008038 <_kill_r+0x1c>
 8008036:	6023      	str	r3, [r4, #0]
 8008038:	bd38      	pop	{r3, r4, r5, pc}
 800803a:	bf00      	nop
 800803c:	20000c90 	.word	0x20000c90

08008040 <_getpid_r>:
 8008040:	f7fa ba73 	b.w	800252a <_getpid>

08008044 <round>:
 8008044:	ec51 0b10 	vmov	r0, r1, d0
 8008048:	b570      	push	{r4, r5, r6, lr}
 800804a:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800804e:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8008052:	2c13      	cmp	r4, #19
 8008054:	ee10 2a10 	vmov	r2, s0
 8008058:	460b      	mov	r3, r1
 800805a:	dc19      	bgt.n	8008090 <round+0x4c>
 800805c:	2c00      	cmp	r4, #0
 800805e:	da09      	bge.n	8008074 <round+0x30>
 8008060:	3401      	adds	r4, #1
 8008062:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8008066:	d103      	bne.n	8008070 <round+0x2c>
 8008068:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800806c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008070:	2200      	movs	r2, #0
 8008072:	e028      	b.n	80080c6 <round+0x82>
 8008074:	4d15      	ldr	r5, [pc, #84]	; (80080cc <round+0x88>)
 8008076:	4125      	asrs	r5, r4
 8008078:	ea01 0605 	and.w	r6, r1, r5
 800807c:	4332      	orrs	r2, r6
 800807e:	d00e      	beq.n	800809e <round+0x5a>
 8008080:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008084:	fa42 f404 	asr.w	r4, r2, r4
 8008088:	4423      	add	r3, r4
 800808a:	ea23 0305 	bic.w	r3, r3, r5
 800808e:	e7ef      	b.n	8008070 <round+0x2c>
 8008090:	2c33      	cmp	r4, #51	; 0x33
 8008092:	dd07      	ble.n	80080a4 <round+0x60>
 8008094:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8008098:	d101      	bne.n	800809e <round+0x5a>
 800809a:	f7f8 f8ff 	bl	800029c <__adddf3>
 800809e:	ec41 0b10 	vmov	d0, r0, r1
 80080a2:	bd70      	pop	{r4, r5, r6, pc}
 80080a4:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80080a8:	f04f 35ff 	mov.w	r5, #4294967295
 80080ac:	40f5      	lsrs	r5, r6
 80080ae:	4228      	tst	r0, r5
 80080b0:	d0f5      	beq.n	800809e <round+0x5a>
 80080b2:	2101      	movs	r1, #1
 80080b4:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80080b8:	fa01 f404 	lsl.w	r4, r1, r4
 80080bc:	1912      	adds	r2, r2, r4
 80080be:	bf28      	it	cs
 80080c0:	185b      	addcs	r3, r3, r1
 80080c2:	ea22 0205 	bic.w	r2, r2, r5
 80080c6:	4619      	mov	r1, r3
 80080c8:	4610      	mov	r0, r2
 80080ca:	e7e8      	b.n	800809e <round+0x5a>
 80080cc:	000fffff 	.word	0x000fffff

080080d0 <acos>:
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	ed2d 8b02 	vpush	{d8}
 80080d6:	ec55 4b10 	vmov	r4, r5, d0
 80080da:	f000 f84d 	bl	8008178 <__ieee754_acos>
 80080de:	4622      	mov	r2, r4
 80080e0:	462b      	mov	r3, r5
 80080e2:	4620      	mov	r0, r4
 80080e4:	4629      	mov	r1, r5
 80080e6:	eeb0 8a40 	vmov.f32	s16, s0
 80080ea:	eef0 8a60 	vmov.f32	s17, s1
 80080ee:	f7f8 fd25 	bl	8000b3c <__aeabi_dcmpun>
 80080f2:	b9a8      	cbnz	r0, 8008120 <acos+0x50>
 80080f4:	ec45 4b10 	vmov	d0, r4, r5
 80080f8:	f000 fb53 	bl	80087a2 <fabs>
 80080fc:	4b0c      	ldr	r3, [pc, #48]	; (8008130 <acos+0x60>)
 80080fe:	ec51 0b10 	vmov	r0, r1, d0
 8008102:	2200      	movs	r2, #0
 8008104:	f7f8 fd10 	bl	8000b28 <__aeabi_dcmpgt>
 8008108:	b150      	cbz	r0, 8008120 <acos+0x50>
 800810a:	f7fb fa3b 	bl	8003584 <__errno>
 800810e:	ecbd 8b02 	vpop	{d8}
 8008112:	2321      	movs	r3, #33	; 0x21
 8008114:	6003      	str	r3, [r0, #0]
 8008116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800811a:	4806      	ldr	r0, [pc, #24]	; (8008134 <acos+0x64>)
 800811c:	f7ff bdf0 	b.w	8007d00 <nan>
 8008120:	eeb0 0a48 	vmov.f32	s0, s16
 8008124:	eef0 0a68 	vmov.f32	s1, s17
 8008128:	ecbd 8b02 	vpop	{d8}
 800812c:	bd38      	pop	{r3, r4, r5, pc}
 800812e:	bf00      	nop
 8008130:	3ff00000 	.word	0x3ff00000
 8008134:	08008d00 	.word	0x08008d00

08008138 <sqrtf>:
 8008138:	b508      	push	{r3, lr}
 800813a:	ed2d 8b02 	vpush	{d8}
 800813e:	eeb0 8a40 	vmov.f32	s16, s0
 8008142:	f000 fb2b 	bl	800879c <__ieee754_sqrtf>
 8008146:	eeb4 8a48 	vcmp.f32	s16, s16
 800814a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800814e:	d60c      	bvs.n	800816a <sqrtf+0x32>
 8008150:	eddf 8a07 	vldr	s17, [pc, #28]	; 8008170 <sqrtf+0x38>
 8008154:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800815c:	d505      	bpl.n	800816a <sqrtf+0x32>
 800815e:	f7fb fa11 	bl	8003584 <__errno>
 8008162:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008166:	2321      	movs	r3, #33	; 0x21
 8008168:	6003      	str	r3, [r0, #0]
 800816a:	ecbd 8b02 	vpop	{d8}
 800816e:	bd08      	pop	{r3, pc}
	...

08008178 <__ieee754_acos>:
 8008178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800817c:	ec55 4b10 	vmov	r4, r5, d0
 8008180:	49b7      	ldr	r1, [pc, #732]	; (8008460 <__ieee754_acos+0x2e8>)
 8008182:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008186:	428b      	cmp	r3, r1
 8008188:	dd1b      	ble.n	80081c2 <__ieee754_acos+0x4a>
 800818a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800818e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008192:	4323      	orrs	r3, r4
 8008194:	d106      	bne.n	80081a4 <__ieee754_acos+0x2c>
 8008196:	2d00      	cmp	r5, #0
 8008198:	f300 8211 	bgt.w	80085be <__ieee754_acos+0x446>
 800819c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 80083f8 <__ieee754_acos+0x280>
 80081a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a4:	ee10 2a10 	vmov	r2, s0
 80081a8:	462b      	mov	r3, r5
 80081aa:	ee10 0a10 	vmov	r0, s0
 80081ae:	4629      	mov	r1, r5
 80081b0:	f7f8 f872 	bl	8000298 <__aeabi_dsub>
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	f7f8 fb50 	bl	800085c <__aeabi_ddiv>
 80081bc:	ec41 0b10 	vmov	d0, r0, r1
 80081c0:	e7ee      	b.n	80081a0 <__ieee754_acos+0x28>
 80081c2:	49a8      	ldr	r1, [pc, #672]	; (8008464 <__ieee754_acos+0x2ec>)
 80081c4:	428b      	cmp	r3, r1
 80081c6:	f300 8087 	bgt.w	80082d8 <__ieee754_acos+0x160>
 80081ca:	4aa7      	ldr	r2, [pc, #668]	; (8008468 <__ieee754_acos+0x2f0>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	f340 81f9 	ble.w	80085c4 <__ieee754_acos+0x44c>
 80081d2:	ee10 2a10 	vmov	r2, s0
 80081d6:	ee10 0a10 	vmov	r0, s0
 80081da:	462b      	mov	r3, r5
 80081dc:	4629      	mov	r1, r5
 80081de:	f7f8 fa13 	bl	8000608 <__aeabi_dmul>
 80081e2:	a387      	add	r3, pc, #540	; (adr r3, 8008400 <__ieee754_acos+0x288>)
 80081e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e8:	4606      	mov	r6, r0
 80081ea:	460f      	mov	r7, r1
 80081ec:	f7f8 fa0c 	bl	8000608 <__aeabi_dmul>
 80081f0:	a385      	add	r3, pc, #532	; (adr r3, 8008408 <__ieee754_acos+0x290>)
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	f7f8 f851 	bl	800029c <__adddf3>
 80081fa:	4632      	mov	r2, r6
 80081fc:	463b      	mov	r3, r7
 80081fe:	f7f8 fa03 	bl	8000608 <__aeabi_dmul>
 8008202:	a383      	add	r3, pc, #524	; (adr r3, 8008410 <__ieee754_acos+0x298>)
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	f7f8 f846 	bl	8000298 <__aeabi_dsub>
 800820c:	4632      	mov	r2, r6
 800820e:	463b      	mov	r3, r7
 8008210:	f7f8 f9fa 	bl	8000608 <__aeabi_dmul>
 8008214:	a380      	add	r3, pc, #512	; (adr r3, 8008418 <__ieee754_acos+0x2a0>)
 8008216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821a:	f7f8 f83f 	bl	800029c <__adddf3>
 800821e:	4632      	mov	r2, r6
 8008220:	463b      	mov	r3, r7
 8008222:	f7f8 f9f1 	bl	8000608 <__aeabi_dmul>
 8008226:	a37e      	add	r3, pc, #504	; (adr r3, 8008420 <__ieee754_acos+0x2a8>)
 8008228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822c:	f7f8 f834 	bl	8000298 <__aeabi_dsub>
 8008230:	4632      	mov	r2, r6
 8008232:	463b      	mov	r3, r7
 8008234:	f7f8 f9e8 	bl	8000608 <__aeabi_dmul>
 8008238:	a37b      	add	r3, pc, #492	; (adr r3, 8008428 <__ieee754_acos+0x2b0>)
 800823a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823e:	f7f8 f82d 	bl	800029c <__adddf3>
 8008242:	4632      	mov	r2, r6
 8008244:	463b      	mov	r3, r7
 8008246:	f7f8 f9df 	bl	8000608 <__aeabi_dmul>
 800824a:	a379      	add	r3, pc, #484	; (adr r3, 8008430 <__ieee754_acos+0x2b8>)
 800824c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008250:	4680      	mov	r8, r0
 8008252:	4689      	mov	r9, r1
 8008254:	4630      	mov	r0, r6
 8008256:	4639      	mov	r1, r7
 8008258:	f7f8 f9d6 	bl	8000608 <__aeabi_dmul>
 800825c:	a376      	add	r3, pc, #472	; (adr r3, 8008438 <__ieee754_acos+0x2c0>)
 800825e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008262:	f7f8 f819 	bl	8000298 <__aeabi_dsub>
 8008266:	4632      	mov	r2, r6
 8008268:	463b      	mov	r3, r7
 800826a:	f7f8 f9cd 	bl	8000608 <__aeabi_dmul>
 800826e:	a374      	add	r3, pc, #464	; (adr r3, 8008440 <__ieee754_acos+0x2c8>)
 8008270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008274:	f7f8 f812 	bl	800029c <__adddf3>
 8008278:	4632      	mov	r2, r6
 800827a:	463b      	mov	r3, r7
 800827c:	f7f8 f9c4 	bl	8000608 <__aeabi_dmul>
 8008280:	a371      	add	r3, pc, #452	; (adr r3, 8008448 <__ieee754_acos+0x2d0>)
 8008282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008286:	f7f8 f807 	bl	8000298 <__aeabi_dsub>
 800828a:	4632      	mov	r2, r6
 800828c:	463b      	mov	r3, r7
 800828e:	f7f8 f9bb 	bl	8000608 <__aeabi_dmul>
 8008292:	4b76      	ldr	r3, [pc, #472]	; (800846c <__ieee754_acos+0x2f4>)
 8008294:	2200      	movs	r2, #0
 8008296:	f7f8 f801 	bl	800029c <__adddf3>
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	4640      	mov	r0, r8
 80082a0:	4649      	mov	r1, r9
 80082a2:	f7f8 fadb 	bl	800085c <__aeabi_ddiv>
 80082a6:	4622      	mov	r2, r4
 80082a8:	462b      	mov	r3, r5
 80082aa:	f7f8 f9ad 	bl	8000608 <__aeabi_dmul>
 80082ae:	4602      	mov	r2, r0
 80082b0:	460b      	mov	r3, r1
 80082b2:	a167      	add	r1, pc, #412	; (adr r1, 8008450 <__ieee754_acos+0x2d8>)
 80082b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082b8:	f7f7 ffee 	bl	8000298 <__aeabi_dsub>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	4620      	mov	r0, r4
 80082c2:	4629      	mov	r1, r5
 80082c4:	f7f7 ffe8 	bl	8000298 <__aeabi_dsub>
 80082c8:	4602      	mov	r2, r0
 80082ca:	460b      	mov	r3, r1
 80082cc:	a162      	add	r1, pc, #392	; (adr r1, 8008458 <__ieee754_acos+0x2e0>)
 80082ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082d2:	f7f7 ffe1 	bl	8000298 <__aeabi_dsub>
 80082d6:	e771      	b.n	80081bc <__ieee754_acos+0x44>
 80082d8:	2d00      	cmp	r5, #0
 80082da:	f280 80cb 	bge.w	8008474 <__ieee754_acos+0x2fc>
 80082de:	ee10 0a10 	vmov	r0, s0
 80082e2:	4b62      	ldr	r3, [pc, #392]	; (800846c <__ieee754_acos+0x2f4>)
 80082e4:	2200      	movs	r2, #0
 80082e6:	4629      	mov	r1, r5
 80082e8:	f7f7 ffd8 	bl	800029c <__adddf3>
 80082ec:	4b60      	ldr	r3, [pc, #384]	; (8008470 <__ieee754_acos+0x2f8>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	f7f8 f98a 	bl	8000608 <__aeabi_dmul>
 80082f4:	a342      	add	r3, pc, #264	; (adr r3, 8008400 <__ieee754_acos+0x288>)
 80082f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fa:	4604      	mov	r4, r0
 80082fc:	460d      	mov	r5, r1
 80082fe:	f7f8 f983 	bl	8000608 <__aeabi_dmul>
 8008302:	a341      	add	r3, pc, #260	; (adr r3, 8008408 <__ieee754_acos+0x290>)
 8008304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008308:	f7f7 ffc8 	bl	800029c <__adddf3>
 800830c:	4622      	mov	r2, r4
 800830e:	462b      	mov	r3, r5
 8008310:	f7f8 f97a 	bl	8000608 <__aeabi_dmul>
 8008314:	a33e      	add	r3, pc, #248	; (adr r3, 8008410 <__ieee754_acos+0x298>)
 8008316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831a:	f7f7 ffbd 	bl	8000298 <__aeabi_dsub>
 800831e:	4622      	mov	r2, r4
 8008320:	462b      	mov	r3, r5
 8008322:	f7f8 f971 	bl	8000608 <__aeabi_dmul>
 8008326:	a33c      	add	r3, pc, #240	; (adr r3, 8008418 <__ieee754_acos+0x2a0>)
 8008328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832c:	f7f7 ffb6 	bl	800029c <__adddf3>
 8008330:	4622      	mov	r2, r4
 8008332:	462b      	mov	r3, r5
 8008334:	f7f8 f968 	bl	8000608 <__aeabi_dmul>
 8008338:	a339      	add	r3, pc, #228	; (adr r3, 8008420 <__ieee754_acos+0x2a8>)
 800833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833e:	f7f7 ffab 	bl	8000298 <__aeabi_dsub>
 8008342:	4622      	mov	r2, r4
 8008344:	462b      	mov	r3, r5
 8008346:	f7f8 f95f 	bl	8000608 <__aeabi_dmul>
 800834a:	a337      	add	r3, pc, #220	; (adr r3, 8008428 <__ieee754_acos+0x2b0>)
 800834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008350:	f7f7 ffa4 	bl	800029c <__adddf3>
 8008354:	4622      	mov	r2, r4
 8008356:	462b      	mov	r3, r5
 8008358:	f7f8 f956 	bl	8000608 <__aeabi_dmul>
 800835c:	ec45 4b10 	vmov	d0, r4, r5
 8008360:	4680      	mov	r8, r0
 8008362:	4689      	mov	r9, r1
 8008364:	f000 f968 	bl	8008638 <__ieee754_sqrt>
 8008368:	a331      	add	r3, pc, #196	; (adr r3, 8008430 <__ieee754_acos+0x2b8>)
 800836a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836e:	4620      	mov	r0, r4
 8008370:	4629      	mov	r1, r5
 8008372:	ec57 6b10 	vmov	r6, r7, d0
 8008376:	f7f8 f947 	bl	8000608 <__aeabi_dmul>
 800837a:	a32f      	add	r3, pc, #188	; (adr r3, 8008438 <__ieee754_acos+0x2c0>)
 800837c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008380:	f7f7 ff8a 	bl	8000298 <__aeabi_dsub>
 8008384:	4622      	mov	r2, r4
 8008386:	462b      	mov	r3, r5
 8008388:	f7f8 f93e 	bl	8000608 <__aeabi_dmul>
 800838c:	a32c      	add	r3, pc, #176	; (adr r3, 8008440 <__ieee754_acos+0x2c8>)
 800838e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008392:	f7f7 ff83 	bl	800029c <__adddf3>
 8008396:	4622      	mov	r2, r4
 8008398:	462b      	mov	r3, r5
 800839a:	f7f8 f935 	bl	8000608 <__aeabi_dmul>
 800839e:	a32a      	add	r3, pc, #168	; (adr r3, 8008448 <__ieee754_acos+0x2d0>)
 80083a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a4:	f7f7 ff78 	bl	8000298 <__aeabi_dsub>
 80083a8:	4622      	mov	r2, r4
 80083aa:	462b      	mov	r3, r5
 80083ac:	f7f8 f92c 	bl	8000608 <__aeabi_dmul>
 80083b0:	4b2e      	ldr	r3, [pc, #184]	; (800846c <__ieee754_acos+0x2f4>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	f7f7 ff72 	bl	800029c <__adddf3>
 80083b8:	4602      	mov	r2, r0
 80083ba:	460b      	mov	r3, r1
 80083bc:	4640      	mov	r0, r8
 80083be:	4649      	mov	r1, r9
 80083c0:	f7f8 fa4c 	bl	800085c <__aeabi_ddiv>
 80083c4:	4632      	mov	r2, r6
 80083c6:	463b      	mov	r3, r7
 80083c8:	f7f8 f91e 	bl	8000608 <__aeabi_dmul>
 80083cc:	a320      	add	r3, pc, #128	; (adr r3, 8008450 <__ieee754_acos+0x2d8>)
 80083ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d2:	f7f7 ff61 	bl	8000298 <__aeabi_dsub>
 80083d6:	4632      	mov	r2, r6
 80083d8:	463b      	mov	r3, r7
 80083da:	f7f7 ff5f 	bl	800029c <__adddf3>
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	f7f7 ff5b 	bl	800029c <__adddf3>
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	a103      	add	r1, pc, #12	; (adr r1, 80083f8 <__ieee754_acos+0x280>)
 80083ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083f0:	e76f      	b.n	80082d2 <__ieee754_acos+0x15a>
 80083f2:	bf00      	nop
 80083f4:	f3af 8000 	nop.w
 80083f8:	54442d18 	.word	0x54442d18
 80083fc:	400921fb 	.word	0x400921fb
 8008400:	0dfdf709 	.word	0x0dfdf709
 8008404:	3f023de1 	.word	0x3f023de1
 8008408:	7501b288 	.word	0x7501b288
 800840c:	3f49efe0 	.word	0x3f49efe0
 8008410:	b5688f3b 	.word	0xb5688f3b
 8008414:	3fa48228 	.word	0x3fa48228
 8008418:	0e884455 	.word	0x0e884455
 800841c:	3fc9c155 	.word	0x3fc9c155
 8008420:	03eb6f7d 	.word	0x03eb6f7d
 8008424:	3fd4d612 	.word	0x3fd4d612
 8008428:	55555555 	.word	0x55555555
 800842c:	3fc55555 	.word	0x3fc55555
 8008430:	b12e9282 	.word	0xb12e9282
 8008434:	3fb3b8c5 	.word	0x3fb3b8c5
 8008438:	1b8d0159 	.word	0x1b8d0159
 800843c:	3fe6066c 	.word	0x3fe6066c
 8008440:	9c598ac8 	.word	0x9c598ac8
 8008444:	40002ae5 	.word	0x40002ae5
 8008448:	1c8a2d4b 	.word	0x1c8a2d4b
 800844c:	40033a27 	.word	0x40033a27
 8008450:	33145c07 	.word	0x33145c07
 8008454:	3c91a626 	.word	0x3c91a626
 8008458:	54442d18 	.word	0x54442d18
 800845c:	3ff921fb 	.word	0x3ff921fb
 8008460:	3fefffff 	.word	0x3fefffff
 8008464:	3fdfffff 	.word	0x3fdfffff
 8008468:	3c600000 	.word	0x3c600000
 800846c:	3ff00000 	.word	0x3ff00000
 8008470:	3fe00000 	.word	0x3fe00000
 8008474:	ee10 2a10 	vmov	r2, s0
 8008478:	462b      	mov	r3, r5
 800847a:	496d      	ldr	r1, [pc, #436]	; (8008630 <__ieee754_acos+0x4b8>)
 800847c:	2000      	movs	r0, #0
 800847e:	f7f7 ff0b 	bl	8000298 <__aeabi_dsub>
 8008482:	4b6c      	ldr	r3, [pc, #432]	; (8008634 <__ieee754_acos+0x4bc>)
 8008484:	2200      	movs	r2, #0
 8008486:	f7f8 f8bf 	bl	8000608 <__aeabi_dmul>
 800848a:	4604      	mov	r4, r0
 800848c:	460d      	mov	r5, r1
 800848e:	ec45 4b10 	vmov	d0, r4, r5
 8008492:	f000 f8d1 	bl	8008638 <__ieee754_sqrt>
 8008496:	a34e      	add	r3, pc, #312	; (adr r3, 80085d0 <__ieee754_acos+0x458>)
 8008498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849c:	4620      	mov	r0, r4
 800849e:	4629      	mov	r1, r5
 80084a0:	ec59 8b10 	vmov	r8, r9, d0
 80084a4:	f7f8 f8b0 	bl	8000608 <__aeabi_dmul>
 80084a8:	a34b      	add	r3, pc, #300	; (adr r3, 80085d8 <__ieee754_acos+0x460>)
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	f7f7 fef5 	bl	800029c <__adddf3>
 80084b2:	4622      	mov	r2, r4
 80084b4:	462b      	mov	r3, r5
 80084b6:	f7f8 f8a7 	bl	8000608 <__aeabi_dmul>
 80084ba:	a349      	add	r3, pc, #292	; (adr r3, 80085e0 <__ieee754_acos+0x468>)
 80084bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c0:	f7f7 feea 	bl	8000298 <__aeabi_dsub>
 80084c4:	4622      	mov	r2, r4
 80084c6:	462b      	mov	r3, r5
 80084c8:	f7f8 f89e 	bl	8000608 <__aeabi_dmul>
 80084cc:	a346      	add	r3, pc, #280	; (adr r3, 80085e8 <__ieee754_acos+0x470>)
 80084ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d2:	f7f7 fee3 	bl	800029c <__adddf3>
 80084d6:	4622      	mov	r2, r4
 80084d8:	462b      	mov	r3, r5
 80084da:	f7f8 f895 	bl	8000608 <__aeabi_dmul>
 80084de:	a344      	add	r3, pc, #272	; (adr r3, 80085f0 <__ieee754_acos+0x478>)
 80084e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e4:	f7f7 fed8 	bl	8000298 <__aeabi_dsub>
 80084e8:	4622      	mov	r2, r4
 80084ea:	462b      	mov	r3, r5
 80084ec:	f7f8 f88c 	bl	8000608 <__aeabi_dmul>
 80084f0:	a341      	add	r3, pc, #260	; (adr r3, 80085f8 <__ieee754_acos+0x480>)
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	f7f7 fed1 	bl	800029c <__adddf3>
 80084fa:	4622      	mov	r2, r4
 80084fc:	462b      	mov	r3, r5
 80084fe:	f7f8 f883 	bl	8000608 <__aeabi_dmul>
 8008502:	a33f      	add	r3, pc, #252	; (adr r3, 8008600 <__ieee754_acos+0x488>)
 8008504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008508:	4682      	mov	sl, r0
 800850a:	468b      	mov	fp, r1
 800850c:	4620      	mov	r0, r4
 800850e:	4629      	mov	r1, r5
 8008510:	f7f8 f87a 	bl	8000608 <__aeabi_dmul>
 8008514:	a33c      	add	r3, pc, #240	; (adr r3, 8008608 <__ieee754_acos+0x490>)
 8008516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851a:	f7f7 febd 	bl	8000298 <__aeabi_dsub>
 800851e:	4622      	mov	r2, r4
 8008520:	462b      	mov	r3, r5
 8008522:	f7f8 f871 	bl	8000608 <__aeabi_dmul>
 8008526:	a33a      	add	r3, pc, #232	; (adr r3, 8008610 <__ieee754_acos+0x498>)
 8008528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852c:	f7f7 feb6 	bl	800029c <__adddf3>
 8008530:	4622      	mov	r2, r4
 8008532:	462b      	mov	r3, r5
 8008534:	f7f8 f868 	bl	8000608 <__aeabi_dmul>
 8008538:	a337      	add	r3, pc, #220	; (adr r3, 8008618 <__ieee754_acos+0x4a0>)
 800853a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853e:	f7f7 feab 	bl	8000298 <__aeabi_dsub>
 8008542:	4622      	mov	r2, r4
 8008544:	462b      	mov	r3, r5
 8008546:	f7f8 f85f 	bl	8000608 <__aeabi_dmul>
 800854a:	4b39      	ldr	r3, [pc, #228]	; (8008630 <__ieee754_acos+0x4b8>)
 800854c:	2200      	movs	r2, #0
 800854e:	f7f7 fea5 	bl	800029c <__adddf3>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	4650      	mov	r0, sl
 8008558:	4659      	mov	r1, fp
 800855a:	f7f8 f97f 	bl	800085c <__aeabi_ddiv>
 800855e:	4642      	mov	r2, r8
 8008560:	464b      	mov	r3, r9
 8008562:	f7f8 f851 	bl	8000608 <__aeabi_dmul>
 8008566:	2600      	movs	r6, #0
 8008568:	4682      	mov	sl, r0
 800856a:	468b      	mov	fp, r1
 800856c:	4632      	mov	r2, r6
 800856e:	464b      	mov	r3, r9
 8008570:	4630      	mov	r0, r6
 8008572:	4649      	mov	r1, r9
 8008574:	f7f8 f848 	bl	8000608 <__aeabi_dmul>
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	4620      	mov	r0, r4
 800857e:	4629      	mov	r1, r5
 8008580:	f7f7 fe8a 	bl	8000298 <__aeabi_dsub>
 8008584:	4632      	mov	r2, r6
 8008586:	4604      	mov	r4, r0
 8008588:	460d      	mov	r5, r1
 800858a:	464b      	mov	r3, r9
 800858c:	4640      	mov	r0, r8
 800858e:	4649      	mov	r1, r9
 8008590:	f7f7 fe84 	bl	800029c <__adddf3>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4620      	mov	r0, r4
 800859a:	4629      	mov	r1, r5
 800859c:	f7f8 f95e 	bl	800085c <__aeabi_ddiv>
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	4650      	mov	r0, sl
 80085a6:	4659      	mov	r1, fp
 80085a8:	f7f7 fe78 	bl	800029c <__adddf3>
 80085ac:	4632      	mov	r2, r6
 80085ae:	464b      	mov	r3, r9
 80085b0:	f7f7 fe74 	bl	800029c <__adddf3>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	f7f7 fe70 	bl	800029c <__adddf3>
 80085bc:	e5fe      	b.n	80081bc <__ieee754_acos+0x44>
 80085be:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8008620 <__ieee754_acos+0x4a8>
 80085c2:	e5ed      	b.n	80081a0 <__ieee754_acos+0x28>
 80085c4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8008628 <__ieee754_acos+0x4b0>
 80085c8:	e5ea      	b.n	80081a0 <__ieee754_acos+0x28>
 80085ca:	bf00      	nop
 80085cc:	f3af 8000 	nop.w
 80085d0:	0dfdf709 	.word	0x0dfdf709
 80085d4:	3f023de1 	.word	0x3f023de1
 80085d8:	7501b288 	.word	0x7501b288
 80085dc:	3f49efe0 	.word	0x3f49efe0
 80085e0:	b5688f3b 	.word	0xb5688f3b
 80085e4:	3fa48228 	.word	0x3fa48228
 80085e8:	0e884455 	.word	0x0e884455
 80085ec:	3fc9c155 	.word	0x3fc9c155
 80085f0:	03eb6f7d 	.word	0x03eb6f7d
 80085f4:	3fd4d612 	.word	0x3fd4d612
 80085f8:	55555555 	.word	0x55555555
 80085fc:	3fc55555 	.word	0x3fc55555
 8008600:	b12e9282 	.word	0xb12e9282
 8008604:	3fb3b8c5 	.word	0x3fb3b8c5
 8008608:	1b8d0159 	.word	0x1b8d0159
 800860c:	3fe6066c 	.word	0x3fe6066c
 8008610:	9c598ac8 	.word	0x9c598ac8
 8008614:	40002ae5 	.word	0x40002ae5
 8008618:	1c8a2d4b 	.word	0x1c8a2d4b
 800861c:	40033a27 	.word	0x40033a27
	...
 8008628:	54442d18 	.word	0x54442d18
 800862c:	3ff921fb 	.word	0x3ff921fb
 8008630:	3ff00000 	.word	0x3ff00000
 8008634:	3fe00000 	.word	0x3fe00000

08008638 <__ieee754_sqrt>:
 8008638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800863c:	ec55 4b10 	vmov	r4, r5, d0
 8008640:	4e55      	ldr	r6, [pc, #340]	; (8008798 <__ieee754_sqrt+0x160>)
 8008642:	43ae      	bics	r6, r5
 8008644:	ee10 0a10 	vmov	r0, s0
 8008648:	ee10 3a10 	vmov	r3, s0
 800864c:	462a      	mov	r2, r5
 800864e:	4629      	mov	r1, r5
 8008650:	d110      	bne.n	8008674 <__ieee754_sqrt+0x3c>
 8008652:	ee10 2a10 	vmov	r2, s0
 8008656:	462b      	mov	r3, r5
 8008658:	f7f7 ffd6 	bl	8000608 <__aeabi_dmul>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	4620      	mov	r0, r4
 8008662:	4629      	mov	r1, r5
 8008664:	f7f7 fe1a 	bl	800029c <__adddf3>
 8008668:	4604      	mov	r4, r0
 800866a:	460d      	mov	r5, r1
 800866c:	ec45 4b10 	vmov	d0, r4, r5
 8008670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008674:	2d00      	cmp	r5, #0
 8008676:	dc10      	bgt.n	800869a <__ieee754_sqrt+0x62>
 8008678:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800867c:	4330      	orrs	r0, r6
 800867e:	d0f5      	beq.n	800866c <__ieee754_sqrt+0x34>
 8008680:	b15d      	cbz	r5, 800869a <__ieee754_sqrt+0x62>
 8008682:	ee10 2a10 	vmov	r2, s0
 8008686:	462b      	mov	r3, r5
 8008688:	ee10 0a10 	vmov	r0, s0
 800868c:	f7f7 fe04 	bl	8000298 <__aeabi_dsub>
 8008690:	4602      	mov	r2, r0
 8008692:	460b      	mov	r3, r1
 8008694:	f7f8 f8e2 	bl	800085c <__aeabi_ddiv>
 8008698:	e7e6      	b.n	8008668 <__ieee754_sqrt+0x30>
 800869a:	1512      	asrs	r2, r2, #20
 800869c:	d074      	beq.n	8008788 <__ieee754_sqrt+0x150>
 800869e:	07d4      	lsls	r4, r2, #31
 80086a0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80086a4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80086a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80086ac:	bf5e      	ittt	pl
 80086ae:	0fda      	lsrpl	r2, r3, #31
 80086b0:	005b      	lslpl	r3, r3, #1
 80086b2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80086b6:	2400      	movs	r4, #0
 80086b8:	0fda      	lsrs	r2, r3, #31
 80086ba:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80086be:	107f      	asrs	r7, r7, #1
 80086c0:	005b      	lsls	r3, r3, #1
 80086c2:	2516      	movs	r5, #22
 80086c4:	4620      	mov	r0, r4
 80086c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80086ca:	1886      	adds	r6, r0, r2
 80086cc:	428e      	cmp	r6, r1
 80086ce:	bfde      	ittt	le
 80086d0:	1b89      	suble	r1, r1, r6
 80086d2:	18b0      	addle	r0, r6, r2
 80086d4:	18a4      	addle	r4, r4, r2
 80086d6:	0049      	lsls	r1, r1, #1
 80086d8:	3d01      	subs	r5, #1
 80086da:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80086de:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80086e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80086e6:	d1f0      	bne.n	80086ca <__ieee754_sqrt+0x92>
 80086e8:	462a      	mov	r2, r5
 80086ea:	f04f 0e20 	mov.w	lr, #32
 80086ee:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80086f2:	4281      	cmp	r1, r0
 80086f4:	eb06 0c05 	add.w	ip, r6, r5
 80086f8:	dc02      	bgt.n	8008700 <__ieee754_sqrt+0xc8>
 80086fa:	d113      	bne.n	8008724 <__ieee754_sqrt+0xec>
 80086fc:	459c      	cmp	ip, r3
 80086fe:	d811      	bhi.n	8008724 <__ieee754_sqrt+0xec>
 8008700:	f1bc 0f00 	cmp.w	ip, #0
 8008704:	eb0c 0506 	add.w	r5, ip, r6
 8008708:	da43      	bge.n	8008792 <__ieee754_sqrt+0x15a>
 800870a:	2d00      	cmp	r5, #0
 800870c:	db41      	blt.n	8008792 <__ieee754_sqrt+0x15a>
 800870e:	f100 0801 	add.w	r8, r0, #1
 8008712:	1a09      	subs	r1, r1, r0
 8008714:	459c      	cmp	ip, r3
 8008716:	bf88      	it	hi
 8008718:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800871c:	eba3 030c 	sub.w	r3, r3, ip
 8008720:	4432      	add	r2, r6
 8008722:	4640      	mov	r0, r8
 8008724:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008728:	f1be 0e01 	subs.w	lr, lr, #1
 800872c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008730:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008734:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008738:	d1db      	bne.n	80086f2 <__ieee754_sqrt+0xba>
 800873a:	430b      	orrs	r3, r1
 800873c:	d006      	beq.n	800874c <__ieee754_sqrt+0x114>
 800873e:	1c50      	adds	r0, r2, #1
 8008740:	bf13      	iteet	ne
 8008742:	3201      	addne	r2, #1
 8008744:	3401      	addeq	r4, #1
 8008746:	4672      	moveq	r2, lr
 8008748:	f022 0201 	bicne.w	r2, r2, #1
 800874c:	1063      	asrs	r3, r4, #1
 800874e:	0852      	lsrs	r2, r2, #1
 8008750:	07e1      	lsls	r1, r4, #31
 8008752:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008756:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800875a:	bf48      	it	mi
 800875c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008760:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008764:	4614      	mov	r4, r2
 8008766:	e781      	b.n	800866c <__ieee754_sqrt+0x34>
 8008768:	0ad9      	lsrs	r1, r3, #11
 800876a:	3815      	subs	r0, #21
 800876c:	055b      	lsls	r3, r3, #21
 800876e:	2900      	cmp	r1, #0
 8008770:	d0fa      	beq.n	8008768 <__ieee754_sqrt+0x130>
 8008772:	02cd      	lsls	r5, r1, #11
 8008774:	d50a      	bpl.n	800878c <__ieee754_sqrt+0x154>
 8008776:	f1c2 0420 	rsb	r4, r2, #32
 800877a:	fa23 f404 	lsr.w	r4, r3, r4
 800877e:	1e55      	subs	r5, r2, #1
 8008780:	4093      	lsls	r3, r2
 8008782:	4321      	orrs	r1, r4
 8008784:	1b42      	subs	r2, r0, r5
 8008786:	e78a      	b.n	800869e <__ieee754_sqrt+0x66>
 8008788:	4610      	mov	r0, r2
 800878a:	e7f0      	b.n	800876e <__ieee754_sqrt+0x136>
 800878c:	0049      	lsls	r1, r1, #1
 800878e:	3201      	adds	r2, #1
 8008790:	e7ef      	b.n	8008772 <__ieee754_sqrt+0x13a>
 8008792:	4680      	mov	r8, r0
 8008794:	e7bd      	b.n	8008712 <__ieee754_sqrt+0xda>
 8008796:	bf00      	nop
 8008798:	7ff00000 	.word	0x7ff00000

0800879c <__ieee754_sqrtf>:
 800879c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80087a0:	4770      	bx	lr

080087a2 <fabs>:
 80087a2:	ec51 0b10 	vmov	r0, r1, d0
 80087a6:	ee10 2a10 	vmov	r2, s0
 80087aa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80087ae:	ec43 2b10 	vmov	d0, r2, r3
 80087b2:	4770      	bx	lr

080087b4 <_init>:
 80087b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b6:	bf00      	nop
 80087b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ba:	bc08      	pop	{r3}
 80087bc:	469e      	mov	lr, r3
 80087be:	4770      	bx	lr

080087c0 <_fini>:
 80087c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c2:	bf00      	nop
 80087c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087c6:	bc08      	pop	{r3}
 80087c8:	469e      	mov	lr, r3
 80087ca:	4770      	bx	lr
