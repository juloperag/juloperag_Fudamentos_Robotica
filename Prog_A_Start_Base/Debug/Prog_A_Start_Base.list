
Prog_A_Start_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08008a70  08008a70  00018a70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fac  08008fac  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008fac  08008fac  00018fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fb4  08008fb4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fb4  08008fb4  00018fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fb8  08008fb8  00018fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aec  200001e8  080091a4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cd4  080091a4  00020cd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003dcd  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000100e  00000000  00000000  00023fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000328  00000000  00000000  00024ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000290  00000000  00000000  00025320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001083d  00000000  00000000  000255b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005000  00000000  00000000  00035ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000574e2  00000000  00000000  0003aded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000922cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002390  00000000  00000000  00092320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008a54 	.word	0x08008a54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08008a54 	.word	0x08008a54

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9dd 	b.w	8001074 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f86b 	bl	8000da4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f85e 	bl	8000da4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f84d 	bl	8000da4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f83f 	bl	8000da4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_d2lz>:
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	4604      	mov	r4, r0
 8000d40:	460d      	mov	r5, r1
 8000d42:	f7ff fed3 	bl	8000aec <__aeabi_dcmplt>
 8000d46:	b928      	cbnz	r0, 8000d54 <__aeabi_d2lz+0x1c>
 8000d48:	4620      	mov	r0, r4
 8000d4a:	4629      	mov	r1, r5
 8000d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d50:	f000 b80a 	b.w	8000d68 <__aeabi_d2ulz>
 8000d54:	4620      	mov	r0, r4
 8000d56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d5a:	f000 f805 	bl	8000d68 <__aeabi_d2ulz>
 8000d5e:	4240      	negs	r0, r0
 8000d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d64:	bd38      	pop	{r3, r4, r5, pc}
 8000d66:	bf00      	nop

08000d68 <__aeabi_d2ulz>:
 8000d68:	b5d0      	push	{r4, r6, r7, lr}
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__aeabi_d2ulz+0x34>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4606      	mov	r6, r0
 8000d70:	460f      	mov	r7, r1
 8000d72:	f7ff fc49 	bl	8000608 <__aeabi_dmul>
 8000d76:	f7ff ff1f 	bl	8000bb8 <__aeabi_d2uiz>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	f7ff fbca 	bl	8000514 <__aeabi_ui2d>
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <__aeabi_d2ulz+0x38>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	f7ff fc40 	bl	8000608 <__aeabi_dmul>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	4639      	mov	r1, r7
 8000d90:	f7ff fa82 	bl	8000298 <__aeabi_dsub>
 8000d94:	f7ff ff10 	bl	8000bb8 <__aeabi_d2uiz>
 8000d98:	4621      	mov	r1, r4
 8000d9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d9c:	3df00000 	.word	0x3df00000
 8000da0:	41f00000 	.word	0x41f00000

08000da4 <__udivmoddi4>:
 8000da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da8:	9d08      	ldr	r5, [sp, #32]
 8000daa:	4604      	mov	r4, r0
 8000dac:	468e      	mov	lr, r1
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d14d      	bne.n	8000e4e <__udivmoddi4+0xaa>
 8000db2:	428a      	cmp	r2, r1
 8000db4:	4694      	mov	ip, r2
 8000db6:	d969      	bls.n	8000e8c <__udivmoddi4+0xe8>
 8000db8:	fab2 f282 	clz	r2, r2
 8000dbc:	b152      	cbz	r2, 8000dd4 <__udivmoddi4+0x30>
 8000dbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000dc2:	f1c2 0120 	rsb	r1, r2, #32
 8000dc6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dce:	ea41 0e03 	orr.w	lr, r1, r3
 8000dd2:	4094      	lsls	r4, r2
 8000dd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd8:	0c21      	lsrs	r1, r4, #16
 8000dda:	fbbe f6f8 	udiv	r6, lr, r8
 8000dde:	fa1f f78c 	uxth.w	r7, ip
 8000de2:	fb08 e316 	mls	r3, r8, r6, lr
 8000de6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dea:	fb06 f107 	mul.w	r1, r6, r7
 8000dee:	4299      	cmp	r1, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x64>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dfa:	f080 811f 	bcs.w	800103c <__udivmoddi4+0x298>
 8000dfe:	4299      	cmp	r1, r3
 8000e00:	f240 811c 	bls.w	800103c <__udivmoddi4+0x298>
 8000e04:	3e02      	subs	r6, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	1a5b      	subs	r3, r3, r1
 8000e0a:	b2a4      	uxth	r4, r4
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e18:	fb00 f707 	mul.w	r7, r0, r7
 8000e1c:	42a7      	cmp	r7, r4
 8000e1e:	d90a      	bls.n	8000e36 <__udivmoddi4+0x92>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e28:	f080 810a 	bcs.w	8001040 <__udivmoddi4+0x29c>
 8000e2c:	42a7      	cmp	r7, r4
 8000e2e:	f240 8107 	bls.w	8001040 <__udivmoddi4+0x29c>
 8000e32:	4464      	add	r4, ip
 8000e34:	3802      	subs	r0, #2
 8000e36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e3a:	1be4      	subs	r4, r4, r7
 8000e3c:	2600      	movs	r6, #0
 8000e3e:	b11d      	cbz	r5, 8000e48 <__udivmoddi4+0xa4>
 8000e40:	40d4      	lsrs	r4, r2
 8000e42:	2300      	movs	r3, #0
 8000e44:	e9c5 4300 	strd	r4, r3, [r5]
 8000e48:	4631      	mov	r1, r6
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d909      	bls.n	8000e66 <__udivmoddi4+0xc2>
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	f000 80ef 	beq.w	8001036 <__udivmoddi4+0x292>
 8000e58:	2600      	movs	r6, #0
 8000e5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5e:	4630      	mov	r0, r6
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	fab3 f683 	clz	r6, r3
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	d14a      	bne.n	8000f04 <__udivmoddi4+0x160>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d302      	bcc.n	8000e78 <__udivmoddi4+0xd4>
 8000e72:	4282      	cmp	r2, r0
 8000e74:	f200 80f9 	bhi.w	800106a <__udivmoddi4+0x2c6>
 8000e78:	1a84      	subs	r4, r0, r2
 8000e7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e7e:	2001      	movs	r0, #1
 8000e80:	469e      	mov	lr, r3
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	d0e0      	beq.n	8000e48 <__udivmoddi4+0xa4>
 8000e86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e8a:	e7dd      	b.n	8000e48 <__udivmoddi4+0xa4>
 8000e8c:	b902      	cbnz	r2, 8000e90 <__udivmoddi4+0xec>
 8000e8e:	deff      	udf	#255	; 0xff
 8000e90:	fab2 f282 	clz	r2, r2
 8000e94:	2a00      	cmp	r2, #0
 8000e96:	f040 8092 	bne.w	8000fbe <__udivmoddi4+0x21a>
 8000e9a:	eba1 010c 	sub.w	r1, r1, ip
 8000e9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea2:	fa1f fe8c 	uxth.w	lr, ip
 8000ea6:	2601      	movs	r6, #1
 8000ea8:	0c20      	lsrs	r0, r4, #16
 8000eaa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000eae:	fb07 1113 	mls	r1, r7, r3, r1
 8000eb2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb6:	fb0e f003 	mul.w	r0, lr, r3
 8000eba:	4288      	cmp	r0, r1
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x12c>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ec6:	d202      	bcs.n	8000ece <__udivmoddi4+0x12a>
 8000ec8:	4288      	cmp	r0, r1
 8000eca:	f200 80cb 	bhi.w	8001064 <__udivmoddi4+0x2c0>
 8000ece:	4643      	mov	r3, r8
 8000ed0:	1a09      	subs	r1, r1, r0
 8000ed2:	b2a4      	uxth	r4, r4
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1110 	mls	r1, r7, r0, r1
 8000edc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ee0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ee4:	45a6      	cmp	lr, r4
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x156>
 8000ee8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef0:	d202      	bcs.n	8000ef8 <__udivmoddi4+0x154>
 8000ef2:	45a6      	cmp	lr, r4
 8000ef4:	f200 80bb 	bhi.w	800106e <__udivmoddi4+0x2ca>
 8000ef8:	4608      	mov	r0, r1
 8000efa:	eba4 040e 	sub.w	r4, r4, lr
 8000efe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f02:	e79c      	b.n	8000e3e <__udivmoddi4+0x9a>
 8000f04:	f1c6 0720 	rsb	r7, r6, #32
 8000f08:	40b3      	lsls	r3, r6
 8000f0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f12:	fa20 f407 	lsr.w	r4, r0, r7
 8000f16:	fa01 f306 	lsl.w	r3, r1, r6
 8000f1a:	431c      	orrs	r4, r3
 8000f1c:	40f9      	lsrs	r1, r7
 8000f1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f22:	fa00 f306 	lsl.w	r3, r0, r6
 8000f26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f2a:	0c20      	lsrs	r0, r4, #16
 8000f2c:	fa1f fe8c 	uxth.w	lr, ip
 8000f30:	fb09 1118 	mls	r1, r9, r8, r1
 8000f34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f38:	fb08 f00e 	mul.w	r0, r8, lr
 8000f3c:	4288      	cmp	r0, r1
 8000f3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f42:	d90b      	bls.n	8000f5c <__udivmoddi4+0x1b8>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f4c:	f080 8088 	bcs.w	8001060 <__udivmoddi4+0x2bc>
 8000f50:	4288      	cmp	r0, r1
 8000f52:	f240 8085 	bls.w	8001060 <__udivmoddi4+0x2bc>
 8000f56:	f1a8 0802 	sub.w	r8, r8, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	1a09      	subs	r1, r1, r0
 8000f5e:	b2a4      	uxth	r4, r4
 8000f60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f64:	fb09 1110 	mls	r1, r9, r0, r1
 8000f68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f70:	458e      	cmp	lr, r1
 8000f72:	d908      	bls.n	8000f86 <__udivmoddi4+0x1e2>
 8000f74:	eb1c 0101 	adds.w	r1, ip, r1
 8000f78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f7c:	d26c      	bcs.n	8001058 <__udivmoddi4+0x2b4>
 8000f7e:	458e      	cmp	lr, r1
 8000f80:	d96a      	bls.n	8001058 <__udivmoddi4+0x2b4>
 8000f82:	3802      	subs	r0, #2
 8000f84:	4461      	add	r1, ip
 8000f86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f8e:	eba1 010e 	sub.w	r1, r1, lr
 8000f92:	42a1      	cmp	r1, r4
 8000f94:	46c8      	mov	r8, r9
 8000f96:	46a6      	mov	lr, r4
 8000f98:	d356      	bcc.n	8001048 <__udivmoddi4+0x2a4>
 8000f9a:	d053      	beq.n	8001044 <__udivmoddi4+0x2a0>
 8000f9c:	b15d      	cbz	r5, 8000fb6 <__udivmoddi4+0x212>
 8000f9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000fa2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fa6:	fa01 f707 	lsl.w	r7, r1, r7
 8000faa:	fa22 f306 	lsr.w	r3, r2, r6
 8000fae:	40f1      	lsrs	r1, r6
 8000fb0:	431f      	orrs	r7, r3
 8000fb2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fb6:	2600      	movs	r6, #0
 8000fb8:	4631      	mov	r1, r6
 8000fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fbe:	f1c2 0320 	rsb	r3, r2, #32
 8000fc2:	40d8      	lsrs	r0, r3
 8000fc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fcc:	4091      	lsls	r1, r2
 8000fce:	4301      	orrs	r1, r0
 8000fd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fd4:	fa1f fe8c 	uxth.w	lr, ip
 8000fd8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fdc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fe0:	0c0b      	lsrs	r3, r1, #16
 8000fe2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fe6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fea:	429e      	cmp	r6, r3
 8000fec:	fa04 f402 	lsl.w	r4, r4, r2
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x260>
 8000ff2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ffa:	d22f      	bcs.n	800105c <__udivmoddi4+0x2b8>
 8000ffc:	429e      	cmp	r6, r3
 8000ffe:	d92d      	bls.n	800105c <__udivmoddi4+0x2b8>
 8001000:	3802      	subs	r0, #2
 8001002:	4463      	add	r3, ip
 8001004:	1b9b      	subs	r3, r3, r6
 8001006:	b289      	uxth	r1, r1
 8001008:	fbb3 f6f7 	udiv	r6, r3, r7
 800100c:	fb07 3316 	mls	r3, r7, r6, r3
 8001010:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001014:	fb06 f30e 	mul.w	r3, r6, lr
 8001018:	428b      	cmp	r3, r1
 800101a:	d908      	bls.n	800102e <__udivmoddi4+0x28a>
 800101c:	eb1c 0101 	adds.w	r1, ip, r1
 8001020:	f106 38ff 	add.w	r8, r6, #4294967295
 8001024:	d216      	bcs.n	8001054 <__udivmoddi4+0x2b0>
 8001026:	428b      	cmp	r3, r1
 8001028:	d914      	bls.n	8001054 <__udivmoddi4+0x2b0>
 800102a:	3e02      	subs	r6, #2
 800102c:	4461      	add	r1, ip
 800102e:	1ac9      	subs	r1, r1, r3
 8001030:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001034:	e738      	b.n	8000ea8 <__udivmoddi4+0x104>
 8001036:	462e      	mov	r6, r5
 8001038:	4628      	mov	r0, r5
 800103a:	e705      	b.n	8000e48 <__udivmoddi4+0xa4>
 800103c:	4606      	mov	r6, r0
 800103e:	e6e3      	b.n	8000e08 <__udivmoddi4+0x64>
 8001040:	4618      	mov	r0, r3
 8001042:	e6f8      	b.n	8000e36 <__udivmoddi4+0x92>
 8001044:	454b      	cmp	r3, r9
 8001046:	d2a9      	bcs.n	8000f9c <__udivmoddi4+0x1f8>
 8001048:	ebb9 0802 	subs.w	r8, r9, r2
 800104c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001050:	3801      	subs	r0, #1
 8001052:	e7a3      	b.n	8000f9c <__udivmoddi4+0x1f8>
 8001054:	4646      	mov	r6, r8
 8001056:	e7ea      	b.n	800102e <__udivmoddi4+0x28a>
 8001058:	4620      	mov	r0, r4
 800105a:	e794      	b.n	8000f86 <__udivmoddi4+0x1e2>
 800105c:	4640      	mov	r0, r8
 800105e:	e7d1      	b.n	8001004 <__udivmoddi4+0x260>
 8001060:	46d0      	mov	r8, sl
 8001062:	e77b      	b.n	8000f5c <__udivmoddi4+0x1b8>
 8001064:	3b02      	subs	r3, #2
 8001066:	4461      	add	r1, ip
 8001068:	e732      	b.n	8000ed0 <__udivmoddi4+0x12c>
 800106a:	4630      	mov	r0, r6
 800106c:	e709      	b.n	8000e82 <__udivmoddi4+0xde>
 800106e:	4464      	add	r4, ip
 8001070:	3802      	subs	r0, #2
 8001072:	e742      	b.n	8000efa <__udivmoddi4+0x156>

08001074 <__aeabi_idiv0>:
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <aplicattion_A_Star>:
#include "A_Star.h"
#include <float.h>
#include <math.h>

//-----------------------------------------------Funciones para la implementacion de A Star------------------------------------------------------------------
file_cell_t* aplicattion_A_Star(Cell_map_t **grid, uint8_t row, uint8_t colum, float start_x, float start_y, float goal_x, float goal_y) {
 8001078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800107c:	b0d7      	sub	sp, #348	; 0x15c
 800107e:	af00      	add	r7, sp, #0
 8001080:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001084:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001088:	6018      	str	r0, [r3, #0]
 800108a:	4608      	mov	r0, r1
 800108c:	4611      	mov	r1, r2
 800108e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001092:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001096:	ed83 0a00 	vstr	s0, [r3]
 800109a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800109e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80010a2:	edc3 0a00 	vstr	s1, [r3]
 80010a6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80010aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80010ae:	ed83 1a00 	vstr	s2, [r3]
 80010b2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80010b6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80010ba:	edc3 1a00 	vstr	s3, [r3]
 80010be:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80010c2:	f2a3 1335 	subw	r3, r3, #309	; 0x135
 80010c6:	4602      	mov	r2, r0
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80010ce:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80010d2:	460a      	mov	r2, r1
 80010d4:	701a      	strb	r2, [r3, #0]
  //Variables
  file_cell_t *ptrFile;                           //Puntero a la ficha de la secuencia actual de A Star
  file_cell_t *file_Open[64] = {0};               //Arreglo de fichas abiertas
 80010d6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80010da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80010de:	4618      	mov	r0, r3
 80010e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e4:	461a      	mov	r2, r3
 80010e6:	2100      	movs	r1, #0
 80010e8:	f002 fbec 	bl	80038c4 <memset>
  uint64_t file_Open_Availability = 0b1;          //Conjunto de bits que indica que fichas abiertas estan disponibles para la comparacion
 80010ec:	f04f 0201 	mov.w	r2, #1
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  uint8_t bit_file_cell = 0;                      //bit de una ficha que indica su disponibilidad
 80010f8:	2300      	movs	r3, #0
 80010fa:	f887 3130 	strb.w	r3, [r7, #304]	; 0x130
  uint8_t index_ptr = 0;                          //Indice de la ficha de la secuencia actual de A Star
 80010fe:	2300      	movs	r3, #0
 8001100:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
  float min_h;                                    //Valor minimo de la heuristica H
  uint8_t index_file_Open;                        //Indice de la ficha de la ficha abierta a crear

  //----------------Se crea la ficha inicial----------------
  //Se crea la ficha inicial
  file_Open[0] = (file_cell_t *)malloc(sizeof(file_cell_t));
 8001104:	f44f 7088 	mov.w	r0, #272	; 0x110
 8001108:	f002 fbcc 	bl	80038a4 <malloc>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001114:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001118:	601a      	str	r2, [r3, #0]
  file_Open[0]->num_parent = 0;
 800111a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800111e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
  file_Open[0]->cost_g = 0.0f; 
 800112a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800112e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  //Por medio de un puntero se asigna la ficha inicial
  ptrFile = file_Open[0];
 800113c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001140:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  
  // ------------- Se identifica la celda inicial -----------
  for (int i = 0; i < row; i++) 
 800114a:	2300      	movs	r3, #0
 800114c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001150:	e06a      	b.n	8001228 <aplicattion_A_Star+0x1b0>
  {
    for (int j = 0; j < colum; j++) 
 8001152:	2300      	movs	r3, #0
 8001154:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001158:	e058      	b.n	800120c <aplicattion_A_Star+0x194>
    {
      if (grid[i][j].coor_x == start_x && grid[i][j].coor_y == start_y) 
 800115a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8001164:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8001168:	6812      	ldr	r2, [r2, #0]
 800116a:	4413      	add	r3, r2
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001172:	2154      	movs	r1, #84	; 0x54
 8001174:	fb01 f303 	mul.w	r3, r1, r3
 8001178:	4413      	add	r3, r2
 800117a:	edd3 7a01 	vldr	s15, [r3, #4]
 800117e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001182:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001186:	ed93 7a00 	vldr	s14, [r3]
 800118a:	eeb4 7a67 	vcmp.f32	s14, s15
 800118e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001192:	d136      	bne.n	8001202 <aplicattion_A_Star+0x18a>
 8001194:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800119e:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80011ac:	2154      	movs	r1, #84	; 0x54
 80011ae:	fb01 f303 	mul.w	r3, r1, r3
 80011b2:	4413      	add	r3, r2
 80011b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80011b8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80011bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80011c0:	ed93 7a00 	vldr	s14, [r3]
 80011c4:	eeb4 7a67 	vcmp.f32	s14, s15
 80011c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011cc:	d119      	bne.n	8001202 <aplicattion_A_Star+0x18a>
      {
        ptrFile->ptrCell_file = &grid[i][j];  
 80011ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80011d8:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80011dc:	6812      	ldr	r2, [r2, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80011e6:	2154      	movs	r1, #84	; 0x54
 80011e8:	fb01 f303 	mul.w	r3, r1, r3
 80011ec:	441a      	add	r2, r3
 80011ee:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80011f2:	601a      	str	r2, [r3, #0]
        ptrFile->ptrCell_file->status  = OPEN;
 80011f4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        break;
 8001200:	e00d      	b.n	800121e <aplicattion_A_Star+0x1a6>
    for (int j = 0; j < colum; j++) 
 8001202:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001206:	3301      	adds	r3, #1
 8001208:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800120c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001210:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800121a:	429a      	cmp	r2, r3
 800121c:	db9d      	blt.n	800115a <aplicattion_A_Star+0xe2>
  for (int i = 0; i < row; i++) 
 800121e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001222:	3301      	adds	r3, #1
 8001224:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001228:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800122c:	f2a3 1335 	subw	r3, r3, #309	; 0x135
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001236:	429a      	cmp	r2, r3
 8001238:	db8b      	blt.n	8001152 <aplicattion_A_Star+0xda>
    }
  }

  while (1) {
    // Inicializamos variables
    min_f = DBL_MAX;
 800123a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800123e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    min_h = DBL_MAX;
 8001242:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8001246:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    //---------------------Creacion de las diferentes fichas de las celdas vecinas-----------------
    for(uint8_t k = 0; k < 8; k++) 
 800124a:	2300      	movs	r3, #0
 800124c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
 8001250:	e110      	b.n	8001474 <aplicattion_A_Star+0x3fc>
    {
      if(ptrFile->ptrCell_file->neighbors.ptrCellMap[k] != NULL) 
 8001252:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800125c:	3302      	adds	r3, #2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 8100 	beq.w	800146a <aplicattion_A_Star+0x3f2>
      {
        if(ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->h != -1.0f && ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->status < OPEN)
 800126a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8001274:	3302      	adds	r3, #2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001280:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001284:	eef4 7a47 	vcmp.f32	s15, s14
 8001288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128c:	f000 80ed 	beq.w	800146a <aplicattion_A_Star+0x3f2>
 8001290:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800129a:	3302      	adds	r3, #2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f040 80df 	bne.w	800146a <aplicattion_A_Star+0x3f2>
        {
          //Se busca la posicion que ocupada la nueva ficha en la lista de fichas abiertas
          index_file_Open = search_position_file_Open(file_Open, file_Open_Availability);
 80012ac:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80012b0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80012b4:	4608      	mov	r0, r1
 80012b6:	f000 f9ce 	bl	8001656 <search_position_file_Open>
 80012ba:	4603      	mov	r3, r0
 80012bc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
          //Se abre la celda
          ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->status = OPEN;
 80012c0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80012ca:	3302      	adds	r3, #2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          //Se crea la ficha
          file_Open[index_file_Open] = (file_cell_t *)malloc(sizeof(file_cell_t));
 80012d8:	f897 412f 	ldrb.w	r4, [r7, #303]	; 0x12f
 80012dc:	f44f 7088 	mov.w	r0, #272	; 0x110
 80012e0:	f002 fae0 	bl	80038a4 <malloc>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80012f0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
          file_Open[index_file_Open]->ptrCell_file = ptrFile->ptrCell_file->neighbors.ptrCellMap[k];
 80012f4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80012f8:	6819      	ldr	r1, [r3, #0]
 80012fa:	f897 0133 	ldrb.w	r0, [r7, #307]	; 0x133
 80012fe:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8001302:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001306:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800130a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800130e:	1c83      	adds	r3, r0, #2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	440b      	add	r3, r1
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	6013      	str	r3, [r2, #0]
          for(uint8_t u = 0; u < ptrFile->num_parent; u++)
 8001318:	2300      	movs	r3, #0
 800131a:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
 800131e:	e018      	b.n	8001352 <aplicattion_A_Star+0x2da>
          {
            file_Open[index_file_Open]->ptrCell_parent[u] = ptrFile->ptrCell_parent[u];
 8001320:	f897 1132 	ldrb.w	r1, [r7, #306]	; 0x132
 8001324:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8001328:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800132c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001330:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001334:	f897 4132 	ldrb.w	r4, [r7, #306]	; 0x132
 8001338:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800133c:	008b      	lsls	r3, r1, #2
 800133e:	4413      	add	r3, r2
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	00a3      	lsls	r3, r4, #2
 8001344:	4403      	add	r3, r0
 8001346:	605a      	str	r2, [r3, #4]
          for(uint8_t u = 0; u < ptrFile->num_parent; u++)
 8001348:	f897 3132 	ldrb.w	r3, [r7, #306]	; 0x132
 800134c:	3301      	adds	r3, #1
 800134e:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
 8001352:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001356:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800135a:	f897 2132 	ldrb.w	r2, [r7, #306]	; 0x132
 800135e:	429a      	cmp	r2, r3
 8001360:	d3de      	bcc.n	8001320 <aplicattion_A_Star+0x2a8>
          }
          file_Open[index_file_Open]->ptrCell_parent[ptrFile->num_parent] = ptrFile->ptrCell_file;
 8001362:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8001366:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800136a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800136e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001372:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001376:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800137a:	4618      	mov	r0, r3
 800137c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	0083      	lsls	r3, r0, #2
 8001384:	440b      	add	r3, r1
 8001386:	605a      	str	r2, [r3, #4]
          file_Open[index_file_Open]->ptrCell_parent[(ptrFile->num_parent+1)] = NULL;
 8001388:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 800138c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001390:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001394:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001398:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800139c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80013a0:	3301      	adds	r3, #1
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	2200      	movs	r2, #0
 80013a8:	605a      	str	r2, [r3, #4]
          file_Open[index_file_Open]->num_parent = ptrFile->num_parent+1;
 80013aa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80013ae:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 80013b2:	f897 112f 	ldrb.w	r1, [r7, #303]	; 0x12f
 80013b6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80013ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013c2:	3201      	adds	r2, #1
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
          file_Open[index_file_Open]->cost_g = ptrFile->ptrCell_file->neighbors.distance_neigh[k]+ptrFile->cost_g;
 80013ca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80013d4:	330a      	adds	r3, #10
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	3304      	adds	r3, #4
 80013dc:	ed93 7a00 	vldr	s14, [r3]
 80013e0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80013e4:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 80013e8:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 80013ec:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80013f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fc:	edc3 7a42 	vstr	s15, [r3, #264]	; 0x108
          file_Open[index_file_Open]->function_F = file_Open[index_file_Open]->cost_g + ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->h;
 8001400:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8001404:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001408:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800140c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001410:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
 8001414:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800141e:	3302      	adds	r3, #2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800142a:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 800142e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001432:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800143a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143e:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
          //Indicacion de la disponibilidad de la ficha
          file_Open_Availability |= (0b1 << index_file_Open);
 8001442:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001446:	2201      	movs	r2, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	17da      	asrs	r2, r3, #31
 800144e:	469a      	mov	sl, r3
 8001450:	4693      	mov	fp, r2
 8001452:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001456:	ea42 010a 	orr.w	r1, r2, sl
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	ea43 030b 	orr.w	r3, r3, fp
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001466:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    for(uint8_t k = 0; k < 8; k++) 
 800146a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800146e:	3301      	adds	r3, #1
 8001470:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
 8001474:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8001478:	2b07      	cmp	r3, #7
 800147a:	f67f aeea 	bls.w	8001252 <aplicattion_A_Star+0x1da>
      }
    }
    
    //-----------------Cerramos la ficha actual del puntero----------------------
    //indicamos el nuevo estado de la celda
    ptrFile->ptrCell_file->status = CLOSED;
 800147e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2202      	movs	r2, #2
 8001486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    //Liberamos la memoria del arreglo de fichas
    free(ptrFile);
 800148a:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800148e:	f002 fa11 	bl	80038b4 <free>
    //Indicacion de la no disponibilidad de la ficha
    file_Open_Availability &=  ~(0b1 << index_ptr);
 8001492:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8001496:	2201      	movs	r2, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	17da      	asrs	r2, r3, #31
 80014a0:	461d      	mov	r5, r3
 80014a2:	4616      	mov	r6, r2
 80014a4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80014a8:	ea02 0105 	and.w	r1, r2, r5
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	4033      	ands	r3, r6
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80014b6:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
     
    //---------------- Comparación función F ---------------------
    for (uint8_t k = 0; k < 64; k++) {
 80014ba:	2300      	movs	r3, #0
 80014bc:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
 80014c0:	e08f      	b.n	80015e2 <aplicattion_A_Star+0x56a>
      //Recorrido
      bit_file_cell = (file_Open_Availability >> k) & 0b1;
 80014c2:	f897 0131 	ldrb.w	r0, [r7, #305]	; 0x131
 80014c6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80014ca:	f1c0 0420 	rsb	r4, r0, #32
 80014ce:	f1a0 0120 	sub.w	r1, r0, #32
 80014d2:	fa22 f800 	lsr.w	r8, r2, r0
 80014d6:	fa03 f404 	lsl.w	r4, r3, r4
 80014da:	ea48 0804 	orr.w	r8, r8, r4
 80014de:	fa23 f101 	lsr.w	r1, r3, r1
 80014e2:	ea48 0801 	orr.w	r8, r8, r1
 80014e6:	fa23 f900 	lsr.w	r9, r3, r0
 80014ea:	fa5f f388 	uxtb.w	r3, r8
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	f887 3130 	strb.w	r3, [r7, #304]	; 0x130
      //Se el bit es un valor logico de 1 entonces la ficha esta disponible para su comparacion con las demas
      if(bit_file_cell==1)
 80014f6:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d16c      	bne.n	80015d8 <aplicattion_A_Star+0x560>
      {
        // Verificar que la función F sea menor al valor anterior
        if (file_Open[k]->function_F < min_f) {
 80014fe:	f897 2131 	ldrb.w	r2, [r7, #305]	; 0x131
 8001502:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001506:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800150a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800150e:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 8001512:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 8001516:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800151a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151e:	dd1c      	ble.n	800155a <aplicattion_A_Star+0x4e2>
          // Reemplazamos valores
          min_f = file_Open[k]->function_F;
 8001520:	f897 2131 	ldrb.w	r2, [r7, #305]	; 0x131
 8001524:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001528:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800152c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001530:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001534:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
          min_h = file_Open[k]->ptrCell_file->h;
 8001538:	f897 2131 	ldrb.w	r2, [r7, #305]	; 0x131
 800153c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001540:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
          index_ptr = k;
 8001550:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 8001554:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 8001558:	e03e      	b.n	80015d8 <aplicattion_A_Star+0x560>
        }
        // Verificar que la función F sea igual al valor anterior, si es así se desempata con el valor h
        else if (file_Open[k]->function_F == min_f) {
 800155a:	f897 2131 	ldrb.w	r2, [r7, #305]	; 0x131
 800155e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001562:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156a:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 800156e:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 8001572:	eeb4 7a67 	vcmp.f32	s14, s15
 8001576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157a:	d12d      	bne.n	80015d8 <aplicattion_A_Star+0x560>
          if (file_Open[k]->ptrCell_file->h < min_h) {
 800157c:	f897 2131 	ldrb.w	r2, [r7, #305]	; 0x131
 8001580:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001584:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001592:	ed97 7a4f 	vldr	s14, [r7, #316]	; 0x13c
 8001596:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800159a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159e:	dd1b      	ble.n	80015d8 <aplicattion_A_Star+0x560>
              // Reemplazamos valores
              min_f = file_Open[k]->function_F;
 80015a0:	f897 2131 	ldrb.w	r2, [r7, #305]	; 0x131
 80015a4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80015a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80015b4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
              min_h = file_Open[k]->ptrCell_file->h;
 80015b8:	f897 2131 	ldrb.w	r2, [r7, #305]	; 0x131
 80015bc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80015c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015cc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
              index_ptr = k;         
 80015d0:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 80015d4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
    for (uint8_t k = 0; k < 64; k++) {
 80015d8:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 80015dc:	3301      	adds	r3, #1
 80015de:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
 80015e2:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 80015e6:	2b3f      	cmp	r3, #63	; 0x3f
 80015e8:	f67f af6b 	bls.w	80014c2 <aplicattion_A_Star+0x44a>
        }
      }
    }
    
    //--------------- Seleccionamos nueva ficha para el puntero--------------------
    ptrFile = file_Open[index_ptr];
 80015ec:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 80015f0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80015f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015fc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    
    //-----------------Verificacion si se llego al gol----------------------
    if (ptrFile->ptrCell_file->coor_x == goal_x && ptrFile->ptrCell_file->coor_y == goal_y) {
 8001600:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	edd3 7a01 	vldr	s15, [r3, #4]
 800160a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800160e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001612:	ed93 7a00 	vldr	s14, [r3]
 8001616:	eeb4 7a67 	vcmp.f32	s14, s15
 800161a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161e:	f47f ae0c 	bne.w	800123a <aplicattion_A_Star+0x1c2>
 8001622:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	edd3 7a02 	vldr	s15, [r3, #8]
 800162c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001630:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001634:	ed93 7a00 	vldr	s14, [r3]
 8001638:	eeb4 7a67 	vcmp.f32	s14, s15
 800163c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001640:	d000      	beq.n	8001644 <aplicattion_A_Star+0x5cc>
    min_f = DBL_MAX;
 8001642:	e5fa      	b.n	800123a <aplicattion_A_Star+0x1c2>
        break;
 8001644:	bf00      	nop
    }
  }
  return ptrFile;
 8001646:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
}
 800164a:	4618      	mov	r0, r3
 800164c:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8001650:	46bd      	mov	sp, r7
 8001652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001656 <search_position_file_Open>:



uint8_t search_position_file_Open(file_cell_t **list_file, uint64_t avan_file)
{
 8001656:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001658:	b08b      	sub	sp, #44	; 0x2c
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	e9c7 2300 	strd	r2, r3, [r7]
  //Variables
  uint8_t bit_list = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 100;
 8001666:	2364      	movs	r3, #100	; 0x64
 8001668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  float value_f = 0;
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
  //bucle para recorrer la lista de bits
  for(int i = 0; i<64; i++)
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	e01e      	b.n	80016b6 <search_position_file_Open+0x60>
  {
    //Recorrido
    bit_list = (avan_file >> i) & 0b1;
 8001678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800167c:	69f9      	ldr	r1, [r7, #28]
 800167e:	f1c1 0620 	rsb	r6, r1, #32
 8001682:	f1a1 0020 	sub.w	r0, r1, #32
 8001686:	fa22 f401 	lsr.w	r4, r2, r1
 800168a:	fa03 f606 	lsl.w	r6, r3, r6
 800168e:	4334      	orrs	r4, r6
 8001690:	fa23 f000 	lsr.w	r0, r3, r0
 8001694:	4304      	orrs	r4, r0
 8001696:	fa23 f501 	lsr.w	r5, r3, r1
 800169a:	b2e3      	uxtb	r3, r4
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	75fb      	strb	r3, [r7, #23]
    //Se comprueba el el bit de correspondiente a la disponibilidad de la ficha
    if(bit_list  == 0)
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d103      	bne.n	80016b0 <search_position_file_Open+0x5a>
    {
      index = i;
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80016ae:	e005      	b.n	80016bc <search_position_file_Open+0x66>
  for(int i = 0; i<64; i++)
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	3301      	adds	r3, #1
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	2b3f      	cmp	r3, #63	; 0x3f
 80016ba:	dddd      	ble.n	8001678 <search_position_file_Open+0x22>
    }
  }
  /*En caso que no se indico un valor diferente a 100 para el indice, se busca una ubicacion dentro 
  de la lista de fichas abiertas, seleccionando aquella ubicacion donde el valor de la funcion f
  sea la mayor*/
  if (index == 100)
 80016bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016c0:	2b64      	cmp	r3, #100	; 0x64
 80016c2:	d131      	bne.n	8001728 <search_position_file_Open+0xd2>
  {  
    //Recorrido del arreglo de fichas abiertas
    for(int k = 0; k<64; k++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	61bb      	str	r3, [r7, #24]
 80016c8:	e022      	b.n	8001710 <search_position_file_Open+0xba>
    {  
      //Se busca el mayor valor de la funcion f
      if(list_file[k] != NULL && list_file[k]->function_F > value_f)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4413      	add	r3, r2
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d018      	beq.n	800170a <search_position_file_Open+0xb4>
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	4413      	add	r3, r2
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 80016e6:	ed97 7a08 	vldr	s14, [r7, #32]
 80016ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f2:	d50a      	bpl.n	800170a <search_position_file_Open+0xb4>
      {
        value_f = list_file[k]->function_F;
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	4413      	add	r3, r2
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001702:	623b      	str	r3, [r7, #32]
        index = k;
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(int k = 0; k<64; k++)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	3301      	adds	r3, #1
 800170e:	61bb      	str	r3, [r7, #24]
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2b3f      	cmp	r3, #63	; 0x3f
 8001714:	ddd9      	ble.n	80016ca <search_position_file_Open+0x74>
      }
    }
    //liberamos la memoria de la ficha
    free(list_file[index]);
 8001716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f002 f8c6 	bl	80038b4 <free>
  }
  
  return index;
 8001728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800172c:	4618      	mov	r0, r3
 800172e:	372c      	adds	r7, #44	; 0x2c
 8001730:	46bd      	mov	sp, r7
 8001732:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001734 <heuristic_cell_map>:



//-----------------------------------------------Funciones calculo heuristica----------------------------------------------------------------
void heuristic_cell_map(Cell_map_t **grid, char **map_String, uint8_t row, uint8_t colum, float goal_x, float goal_y)
{
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6178      	str	r0, [r7, #20]
 800173c:	6139      	str	r1, [r7, #16]
 800173e:	4611      	mov	r1, r2
 8001740:	461a      	mov	r2, r3
 8001742:	ed87 0a02 	vstr	s0, [r7, #8]
 8001746:	edc7 0a01 	vstr	s1, [r7, #4]
 800174a:	460b      	mov	r3, r1
 800174c:	73fb      	strb	r3, [r7, #15]
 800174e:	4613      	mov	r3, r2
 8001750:	73bb      	strb	r3, [r7, #14]
  //Recorrido por cada una de las celdas
  for (int i = 0; i < row; i++)
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
 8001756:	e076      	b.n	8001846 <heuristic_cell_map+0x112>
  {
    for (int j = 0; j < colum; j++) 
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
 800175c:	e06c      	b.n	8001838 <heuristic_cell_map+0x104>
    {
      //Calculo heuristica
      if(grid[i][j].coor_x == goal_x && grid[i][j].coor_y == goal_y)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	4413      	add	r3, r2
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2154      	movs	r1, #84	; 0x54
 800176c:	fb01 f303 	mul.w	r3, r1, r3
 8001770:	4413      	add	r3, r2
 8001772:	edd3 7a01 	vldr	s15, [r3, #4]
 8001776:	ed97 7a02 	vldr	s14, [r7, #8]
 800177a:	eeb4 7a67 	vcmp.f32	s14, s15
 800177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001782:	d120      	bne.n	80017c6 <heuristic_cell_map+0x92>
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	4413      	add	r3, r2
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	2154      	movs	r1, #84	; 0x54
 8001792:	fb01 f303 	mul.w	r3, r1, r3
 8001796:	4413      	add	r3, r2
 8001798:	edd3 7a02 	vldr	s15, [r3, #8]
 800179c:	ed97 7a01 	vldr	s14, [r7, #4]
 80017a0:	eeb4 7a67 	vcmp.f32	s14, s15
 80017a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a8:	d10d      	bne.n	80017c6 <heuristic_cell_map+0x92>
      {
        grid[i][j].h = 0.0f;
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	4413      	add	r3, r2
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2154      	movs	r1, #84	; 0x54
 80017b8:	fb01 f303 	mul.w	r3, r1, r3
 80017bc:	4413      	add	r3, r2
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	64da      	str	r2, [r3, #76]	; 0x4c
 80017c4:	e035      	b.n	8001832 <heuristic_cell_map+0xfe>
      }
      else if(map_String[i][j]=='#')
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4413      	add	r3, r2
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	4413      	add	r3, r2
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b23      	cmp	r3, #35	; 0x23
 80017d8:	d10c      	bne.n	80017f4 <heuristic_cell_map+0xc0>
      {
        grid[i][j].h = -1.0f;
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	4413      	add	r3, r2
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2154      	movs	r1, #84	; 0x54
 80017e8:	fb01 f303 	mul.w	r3, r1, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	4a1a      	ldr	r2, [pc, #104]	; (8001858 <heuristic_cell_map+0x124>)
 80017f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80017f2:	e01e      	b.n	8001832 <heuristic_cell_map+0xfe>
      }
      else
      {
        grid[i][j].h = heuristic_single_cell(&grid[i][j], goal_x, goal_y); 
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	4413      	add	r3, r2
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	2154      	movs	r1, #84	; 0x54
 8001802:	fb01 f303 	mul.w	r3, r1, r3
 8001806:	18d1      	adds	r1, r2, r3
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	4413      	add	r3, r2
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	2054      	movs	r0, #84	; 0x54
 8001816:	fb00 f303 	mul.w	r3, r0, r3
 800181a:	18d4      	adds	r4, r2, r3
 800181c:	edd7 0a01 	vldr	s1, [r7, #4]
 8001820:	ed97 0a02 	vldr	s0, [r7, #8]
 8001824:	4608      	mov	r0, r1
 8001826:	f000 f81b 	bl	8001860 <heuristic_single_cell>
 800182a:	eef0 7a40 	vmov.f32	s15, s0
 800182e:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c
    for (int j = 0; j < colum; j++) 
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	3301      	adds	r3, #1
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	7bbb      	ldrb	r3, [r7, #14]
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	429a      	cmp	r2, r3
 800183e:	db8e      	blt.n	800175e <heuristic_cell_map+0x2a>
  for (int i = 0; i < row; i++)
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	3301      	adds	r3, #1
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	69fa      	ldr	r2, [r7, #28]
 800184a:	429a      	cmp	r2, r3
 800184c:	db84      	blt.n	8001758 <heuristic_cell_map+0x24>
      }   
    }
  }  
}
 800184e:	bf00      	nop
 8001850:	bf00      	nop
 8001852:	3724      	adds	r7, #36	; 0x24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd90      	pop	{r4, r7, pc}
 8001858:	bf800000 	.word	0xbf800000
 800185c:	00000000 	.word	0x00000000

08001860 <heuristic_single_cell>:


float heuristic_single_cell(Cell_map_t *cell, float  goal_x, float goal_y)
{
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	ed2d 8b02 	vpush	{d8}
 8001866:	b0a3      	sub	sp, #140	; 0x8c
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001870:	edc7 0a01 	vstr	s1, [r7, #4]
  //---------Definicion de variables--------
  //Variables del calculo heuristica
  Cell_map_t *ptrCell = cell;                 //Puntero a la celda actual
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  float total_distante = 0;                   //Distancia total entre la celda actual y la celda del gol
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  float dis[8];                               //Distancia entre la celda vecina y la recta
  uint8_t best_index;                         //Mejor indice de las celdas vecinas
  float min_distance;                         //Distancia minima entre la celda vecina y la recta
  //Variables Recta
  float A_recta;                              //Parametros de la recta
  float B_recta = -1.0f;
 8001882:	4be3      	ldr	r3, [pc, #908]	; (8001c10 <heuristic_single_cell+0x3b0>)
 8001884:	673b      	str	r3, [r7, #112]	; 0x70
  float delta_x;                              //Diferencia la coordenada x entre la celda inicial y la final
  float mag_delta;                            //Magnitud del vector resultante de la diferencia de las coordenadas

  
   //---------------Calculos parametros de la recta-----------------
  delta_y = goal_y - cell->coor_y;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	edd3 7a02 	vldr	s15, [r3, #8]
 800188c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001890:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001894:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
  delta_x = goal_x - cell->coor_x;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	edd3 7a01 	vldr	s15, [r3, #4]
 800189e:	ed97 7a02 	vldr	s14, [r7, #8]
 80018a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
  mag_delta = sqrtf(delta_x * delta_x + delta_y * delta_y);
 80018aa:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80018ae:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80018b2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80018b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018be:	eeb0 0a67 	vmov.f32	s0, s15
 80018c2:	f006 fd89 	bl	80083d8 <sqrtf>
 80018c6:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
  A_recta =  delta_y / delta_x;
 80018ca:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80018ce:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80018d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018d6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
  C_recta = cell->coor_y - A_recta * cell->coor_x;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	ed93 7a02 	vldr	s14, [r3, #8]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	edd3 6a01 	vldr	s13, [r3, #4]
 80018e6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80018ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

  while (1)
  { 
    //Inicializamos variables
    best_index = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    min_distance = DBL_MAX;
 80018fc:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8001900:	67bb      	str	r3, [r7, #120]	; 0x78

    //------------------Calculo parametros de cada una de las celdas vecinas--------------------
    for (uint8_t k = 0; k < 8; k++)
 8001902:	2300      	movs	r3, #0
 8001904:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001908:	e0fc      	b.n	8001b04 <heuristic_single_cell+0x2a4>
    {
      //Verificamos que el puntero al vecino no es nulo
      if (ptrCell->neighbors.ptrCellMap[k] == NULL)
 800190a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800190e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001912:	3302      	adds	r3, #2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d110      	bne.n	8001940 <heuristic_single_cell+0xe0>
      {
        ang_between_vector[k] = -1.0f;
 800191e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	3388      	adds	r3, #136	; 0x88
 8001926:	443b      	add	r3, r7
 8001928:	3b58      	subs	r3, #88	; 0x58
 800192a:	4ab9      	ldr	r2, [pc, #740]	; (8001c10 <heuristic_single_cell+0x3b0>)
 800192c:	601a      	str	r2, [r3, #0]
        dis[k] = -1.0f;          
 800192e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	3388      	adds	r3, #136	; 0x88
 8001936:	443b      	add	r3, r7
 8001938:	3b78      	subs	r3, #120	; 0x78
 800193a:	4ab5      	ldr	r2, [pc, #724]	; (8001c10 <heuristic_single_cell+0x3b0>)
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	e0dc      	b.n	8001afa <heuristic_single_cell+0x29a>
      }
      else
      {
        //Calculo vector relativo
        rel_x = ptrCell->neighbors.ptrCellMap[k]->coor_x - ptrCell->coor_x;
 8001940:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001944:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001948:	3302      	adds	r3, #2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	ed93 7a01 	vldr	s14, [r3, #4]
 8001954:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001958:	edd3 7a01 	vldr	s15, [r3, #4]
 800195c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001960:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        rel_y = ptrCell->neighbors.ptrCellMap[k]->coor_y - ptrCell->coor_y;
 8001964:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001968:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800196c:	3302      	adds	r3, #2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	ed93 7a02 	vldr	s14, [r3, #8]
 8001978:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800197c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001980:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001984:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        //Calculo parametros
        res = round(((rel_x*delta_x + rel_y*delta_y) / (ptrCell->neighbors.distance_neigh[k] * mag_delta)) * 10000) / 10000;
 8001988:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800198c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001990:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001994:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001998:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800199c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80019a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80019a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80019ac:	330a      	adds	r3, #10
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	3304      	adds	r3, #4
 80019b4:	ed93 7a00 	vldr	s14, [r3]
 80019b8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80019bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019c4:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001c14 <heuristic_single_cell+0x3b4>
 80019c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019cc:	ee17 0a90 	vmov	r0, s15
 80019d0:	f7fe fdc2 	bl	8000558 <__aeabi_f2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	ec43 2b10 	vmov	d0, r2, r3
 80019dc:	f006 fc82 	bl	80082e4 <round>
 80019e0:	ec51 0b10 	vmov	r0, r1, d0
 80019e4:	a388      	add	r3, pc, #544	; (adr r3, 8001c08 <heuristic_single_cell+0x3a8>)
 80019e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ea:	f7fe ff37 	bl	800085c <__aeabi_ddiv>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	f7ff f8ff 	bl	8000bf8 <__aeabi_d2f>
 80019fa:	4603      	mov	r3, r0
 80019fc:	653b      	str	r3, [r7, #80]	; 0x50
        ang_between_vector[k] = acos(res);
 80019fe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001a00:	f7fe fdaa 	bl	8000558 <__aeabi_f2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	ec43 2b10 	vmov	d0, r2, r3
 8001a0c:	f006 fcb0 	bl	8008370 <acos>
 8001a10:	ec53 2b10 	vmov	r2, r3, d0
 8001a14:	f897 4077 	ldrb.w	r4, [r7, #119]	; 0x77
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f7ff f8ec 	bl	8000bf8 <__aeabi_d2f>
 8001a20:	4602      	mov	r2, r0
 8001a22:	00a3      	lsls	r3, r4, #2
 8001a24:	3388      	adds	r3, #136	; 0x88
 8001a26:	443b      	add	r3, r7
 8001a28:	3b58      	subs	r3, #88	; 0x58
 8001a2a:	601a      	str	r2, [r3, #0]
        if(A_recta != INFINITY && A_recta != -INFINITY)
 8001a2c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a30:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001c18 <heuristic_single_cell+0x3b8>
 8001a34:	eef4 7a47 	vcmp.f32	s15, s14
 8001a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3c:	dc45      	bgt.n	8001aca <heuristic_single_cell+0x26a>
 8001a3e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a42:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001c1c <heuristic_single_cell+0x3bc>
 8001a46:	eef4 7a47 	vcmp.f32	s15, s14
 8001a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4e:	d43c      	bmi.n	8001aca <heuristic_single_cell+0x26a>
        {
          dis[k] = fabsf(A_recta * ptrCell->neighbors.ptrCellMap[k]->coor_x + B_recta * ptrCell->neighbors.ptrCellMap[k]->coor_y + C_recta) / sqrtf(A_recta * A_recta + 1);  
 8001a50:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001a54:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001a58:	3302      	adds	r3, #2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a64:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a6c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001a70:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001a74:	3302      	adds	r3, #2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a80:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001a84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a8c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a94:	eeb0 8ae7 	vabs.f32	s16, s15
 8001a98:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a9c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001aa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001aa4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aac:	f006 fc94 	bl	80083d8 <sqrtf>
 8001ab0:	eeb0 7a40 	vmov.f32	s14, s0
 8001ab4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001ab8:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	3388      	adds	r3, #136	; 0x88
 8001ac0:	443b      	add	r3, r7
 8001ac2:	3b78      	subs	r3, #120	; 0x78
 8001ac4:	edc3 7a00 	vstr	s15, [r3]
 8001ac8:	e017      	b.n	8001afa <heuristic_single_cell+0x29a>
        }
        else
        {
          dis[k] = fabsf(ptrCell->neighbors.ptrCellMap[k]->coor_x-goal_x);
 8001aca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001ace:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ade:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001aea:	eef0 7ae7 	vabs.f32	s15, s15
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	3388      	adds	r3, #136	; 0x88
 8001af2:	443b      	add	r3, r7
 8001af4:	3b78      	subs	r3, #120	; 0x78
 8001af6:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t k = 0; k < 8; k++)
 8001afa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001afe:	3301      	adds	r3, #1
 8001b00:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001b04:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001b08:	2b07      	cmp	r3, #7
 8001b0a:	f67f aefe 	bls.w	800190a <heuristic_single_cell+0xaa>
      }            
    }

    //----------------Buscamos la celda vecina mas cercana a la recta y que este en la misma direccion que la recta---------------------
    //Recorremos los parametros para encontrar la mejor celda
    for (uint8_t k = 0; k < 8; k++)
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001b14:	e03f      	b.n	8001b96 <heuristic_single_cell+0x336>
    {
      //Verificamos que no sea -1
      if (ptrCell->neighbors.distance_neigh[k] != -1.0f)
 8001b16:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001b1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001b1e:	330a      	adds	r3, #10
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	3304      	adds	r3, #4
 8001b26:	edd3 7a00 	vldr	s15, [r3]
 8001b2a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001b2e:	eef4 7a47 	vcmp.f32	s15, s14
 8001b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b36:	d029      	beq.n	8001b8c <heuristic_single_cell+0x32c>
      {
        //Verificamos que la diferencia entre los angulos no sea superior a 45°
        if (ang_between_vector[k] <= 1.5f)
 8001b38:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	3388      	adds	r3, #136	; 0x88
 8001b40:	443b      	add	r3, r7
 8001b42:	3b58      	subs	r3, #88	; 0x58
 8001b44:	edd3 7a00 	vldr	s15, [r3]
 8001b48:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001b4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b54:	d81a      	bhi.n	8001b8c <heuristic_single_cell+0x32c>
        {
          //Verificar que la distancia sea menor a la anterior menor distancia
          if (dis[k] < min_distance)
 8001b56:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	3388      	adds	r3, #136	; 0x88
 8001b5e:	443b      	add	r3, r7
 8001b60:	3b78      	subs	r3, #120	; 0x78
 8001b62:	edd3 7a00 	vldr	s15, [r3]
 8001b66:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001b6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b72:	dd0b      	ble.n	8001b8c <heuristic_single_cell+0x32c>
          {
            min_distance = dis[k];
 8001b74:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	3388      	adds	r3, #136	; 0x88
 8001b7c:	443b      	add	r3, r7
 8001b7e:	3b78      	subs	r3, #120	; 0x78
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	67bb      	str	r3, [r7, #120]	; 0x78
            best_index = k;
 8001b84:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001b88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    for (uint8_t k = 0; k < 8; k++)
 8001b8c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001b90:	3301      	adds	r3, #1
 8001b92:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001b96:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001b9a:	2b07      	cmp	r3, #7
 8001b9c:	d9bb      	bls.n	8001b16 <heuristic_single_cell+0x2b6>
      }        
    }

    
    //--------------Seleccionamos la celda vecina y sumamos su distancia--------------------
    total_distante = total_distante + ptrCell->neighbors.distance_neigh[best_index];
 8001b9e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001ba2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001ba6:	330a      	adds	r3, #10
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	3304      	adds	r3, #4
 8001bae:	edd3 7a00 	vldr	s15, [r3]
 8001bb2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bba:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    ptrCell = ptrCell->neighbors.ptrCellMap[best_index];    
 8001bbe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001bc2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    
    //-----------------Verificacion si se llego al gol----------------------
    if (ptrCell->coor_x == goal_x && ptrCell->coor_y == goal_y)
 8001bd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bd6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bda:	ed97 7a02 	vldr	s14, [r7, #8]
 8001bde:	eeb4 7a67 	vcmp.f32	s14, s15
 8001be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be6:	f47f ae86 	bne.w	80018f6 <heuristic_single_cell+0x96>
 8001bea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bee:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bf2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bf6:	eeb4 7a67 	vcmp.f32	s14, s15
 8001bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfe:	d00f      	beq.n	8001c20 <heuristic_single_cell+0x3c0>
    best_index = 0;
 8001c00:	e679      	b.n	80018f6 <heuristic_single_cell+0x96>
 8001c02:	bf00      	nop
 8001c04:	f3af 8000 	nop.w
 8001c08:	00000000 	.word	0x00000000
 8001c0c:	40c38800 	.word	0x40c38800
 8001c10:	bf800000 	.word	0xbf800000
 8001c14:	461c4000 	.word	0x461c4000
 8001c18:	7f7fffff 	.word	0x7f7fffff
 8001c1c:	ff7fffff 	.word	0xff7fffff
    {
      break;
 8001c20:	bf00      	nop
    }
  }

  return total_distante;
 8001c22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c26:	ee07 3a90 	vmov	s15, r3
}
 8001c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2e:	378c      	adds	r7, #140	; 0x8c
 8001c30:	46bd      	mov	sp, r7
 8001c32:	ecbd 8b02 	vpop	{d8}
 8001c36:	bd90      	pop	{r4, r7, pc}

08001c38 <creat_grid_map>:
int8_t ne_pos_x[8] = {-1, 0, 1, 1, 1, 0, -1, -1};
int8_t ne_pos_y[8] = {1, 1, 1, 0, -1, -1, -1, 0};

// Función para crear la malla de celdas
Cell_map_t** creat_grid_map(uint8_t row, uint8_t colum, float separation) 
{  
 8001c38:	b5b0      	push	{r4, r5, r7, lr}
 8001c3a:	b08e      	sub	sp, #56	; 0x38
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	460a      	mov	r2, r1
 8001c42:	ed87 0a00 	vstr	s0, [r7]
 8001c46:	71fb      	strb	r3, [r7, #7]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	71bb      	strb	r3, [r7, #6]
    //Se definen variables
    float rel_x;
    float rel_y;
    
    //-----------------------Creacion malla---------------------------
    Cell_map_t **grid = (Cell_map_t **)malloc(row * sizeof(Cell_map_t *));
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f001 fe27 	bl	80038a4 <malloc>
 8001c56:	4603      	mov	r3, r0
 8001c58:	61bb      	str	r3, [r7, #24]
    if (grid == NULL) {
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d105      	bne.n	8001c6c <creat_grid_map+0x34>
        printf("Error: No se pudo asignar memoria para la malla de celdas\n");
 8001c60:	488c      	ldr	r0, [pc, #560]	; (8001e94 <creat_grid_map+0x25c>)
 8001c62:	f002 fe17 	bl	8004894 <puts>
        exit(1);
 8001c66:	2001      	movs	r0, #1
 8001c68:	f001 fde4 	bl	8003834 <exit>
    }
    for (int i = 0; i < row; i++) {
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c70:	e01d      	b.n	8001cae <creat_grid_map+0x76>
        grid[i] = (Cell_map_t *)malloc(colum * sizeof(Cell_map_t));
 8001c72:	79bb      	ldrb	r3, [r7, #6]
 8001c74:	2254      	movs	r2, #84	; 0x54
 8001c76:	fb02 f103 	mul.w	r1, r2, r3
 8001c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	18d4      	adds	r4, r2, r3
 8001c82:	4608      	mov	r0, r1
 8001c84:	f001 fe0e 	bl	80038a4 <malloc>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	6023      	str	r3, [r4, #0]
        if (grid[i] == NULL) {
 8001c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4413      	add	r3, r2
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d106      	bne.n	8001ca8 <creat_grid_map+0x70>
            printf("Error: No se pudo asignar memoria para la fila %d de la malla de celdas\n", i);
 8001c9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001c9c:	487e      	ldr	r0, [pc, #504]	; (8001e98 <creat_grid_map+0x260>)
 8001c9e:	f002 fd73 	bl	8004788 <iprintf>
            exit(1);
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f001 fdc6 	bl	8003834 <exit>
    for (int i = 0; i < row; i++) {
 8001ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001caa:	3301      	adds	r3, #1
 8001cac:	637b      	str	r3, [r7, #52]	; 0x34
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	dbdd      	blt.n	8001c72 <creat_grid_map+0x3a>
        }
    }
    
    //---------------------Asignacion de informacion------------------------
    // Llenar la matriz de celdas con valores predeterminados
    for (int i = 0; i < row; i++) {
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	633b      	str	r3, [r7, #48]	; 0x30
 8001cba:	e0dd      	b.n	8001e78 <creat_grid_map+0x240>
        for (int j = 0; j < colum; j++) {
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cc0:	e0d2      	b.n	8001e68 <creat_grid_map+0x230>
            // Asignar valores a la celda
            grid[i][j].id[0] = 'A' + j;             // Asignar un identificador simple, 'A', 'B', ...
 8001cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	69b9      	ldr	r1, [r7, #24]
 8001ccc:	440b      	add	r3, r1
 8001cce:	6819      	ldr	r1, [r3, #0]
 8001cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd2:	2054      	movs	r0, #84	; 0x54
 8001cd4:	fb00 f303 	mul.w	r3, r0, r3
 8001cd8:	440b      	add	r3, r1
 8001cda:	3241      	adds	r2, #65	; 0x41
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	701a      	strb	r2, [r3, #0]
            grid[i][j].id[1] = '0' + i;             // Asignar una cifra simple, '0', '1', '2', ...
 8001ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	69b9      	ldr	r1, [r7, #24]
 8001cea:	440b      	add	r3, r1
 8001cec:	6819      	ldr	r1, [r3, #0]
 8001cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf0:	2054      	movs	r0, #84	; 0x54
 8001cf2:	fb00 f303 	mul.w	r3, r0, r3
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3230      	adds	r2, #48	; 0x30
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	705a      	strb	r2, [r3, #1]
            grid[i][j].index_row = i;               // Asignar el indice de la fila
 8001cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4413      	add	r3, r2
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0a:	2154      	movs	r1, #84	; 0x54
 8001d0c:	fb01 f303 	mul.w	r3, r1, r3
 8001d10:	4413      	add	r3, r2
 8001d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	709a      	strb	r2, [r3, #2]
            grid[i][j].index_col = j;               // Asignar el indice de la columna
 8001d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4413      	add	r3, r2
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d24:	2154      	movs	r1, #84	; 0x54
 8001d26:	fb01 f303 	mul.w	r3, r1, r3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	70da      	strb	r2, [r3, #3]
            grid[i][j].coor_x = separation * j;     // Asignar la posición x de la celda
 8001d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d34:	ee07 3a90 	vmov	s15, r3
 8001d38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4413      	add	r3, r2
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d48:	2154      	movs	r1, #84	; 0x54
 8001d4a:	fb01 f303 	mul.w	r3, r1, r3
 8001d4e:	4413      	add	r3, r2
 8001d50:	edd7 7a00 	vldr	s15, [r7]
 8001d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d58:	edc3 7a01 	vstr	s15, [r3, #4]
            grid[i][j].coor_y = separation * i;     // Asignar la posición y de la celda
 8001d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5e:	ee07 3a90 	vmov	s15, r3
 8001d62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d72:	2154      	movs	r1, #84	; 0x54
 8001d74:	fb01 f303 	mul.w	r3, r1, r3
 8001d78:	4413      	add	r3, r2
 8001d7a:	edd7 7a00 	vldr	s15, [r7]
 8001d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d82:	edc3 7a02 	vstr	s15, [r3, #8]
            grid[i][j].status = 0;                  // Inicializar el estado de la celda;             
 8001d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d92:	2154      	movs	r1, #84	; 0x54
 8001d94:	fb01 f303 	mul.w	r3, r1, r3
 8001d98:	4413      	add	r3, r2
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            // Asignacion de vecinos a la celda actual
            for (uint8_t k = 0; k < 8; k++) {
 8001da0:	2300      	movs	r3, #0
 8001da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001da6:	e058      	b.n	8001e5a <creat_grid_map+0x222>
                int8_t index_row_ne = i + ne_pos_x[k]; 
 8001da8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001dac:	4a3b      	ldr	r2, [pc, #236]	; (8001e9c <creat_grid_map+0x264>)
 8001dae:	56d3      	ldrsb	r3, [r2, r3]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	4413      	add	r3, r2
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	73fb      	strb	r3, [r7, #15]
                int8_t index_colum_ne = j + ne_pos_y[k]; 
 8001dbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001dc0:	4a37      	ldr	r2, [pc, #220]	; (8001ea0 <creat_grid_map+0x268>)
 8001dc2:	56d3      	ldrsb	r3, [r2, r3]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	4413      	add	r3, r2
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	73bb      	strb	r3, [r7, #14]
                // Se evalua si el indice esta dentro de la malla
                if (index_row_ne >= 0 && index_row_ne < row && index_colum_ne >= 0 && index_colum_ne < colum) 
 8001dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	db2a      	blt.n	8001e2e <creat_grid_map+0x1f6>
 8001dd8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	da25      	bge.n	8001e2e <creat_grid_map+0x1f6>
 8001de2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	db21      	blt.n	8001e2e <creat_grid_map+0x1f6>
 8001dea:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001dee:	79bb      	ldrb	r3, [r7, #6]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	da1c      	bge.n	8001e2e <creat_grid_map+0x1f6>
                {
                    grid[i][j].neighbors.ptrCellMap[k] = &grid[index_row_ne][index_colum_ne];
 8001df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e04:	2254      	movs	r2, #84	; 0x54
 8001e06:	fb03 f202 	mul.w	r2, r3, r2
 8001e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	69b9      	ldr	r1, [r7, #24]
 8001e10:	440b      	add	r3, r1
 8001e12:	6819      	ldr	r1, [r3, #0]
 8001e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e16:	2454      	movs	r4, #84	; 0x54
 8001e18:	fb04 f303 	mul.w	r3, r4, r3
 8001e1c:	4419      	add	r1, r3
 8001e1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001e22:	4402      	add	r2, r0
 8001e24:	3302      	adds	r3, #2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	e010      	b.n	8001e50 <creat_grid_map+0x218>
                } 
                else 
                {
                    grid[i][j].neighbors.ptrCellMap[k] = NULL;                    
 8001e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4413      	add	r3, r2
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3a:	2154      	movs	r1, #84	; 0x54
 8001e3c:	fb01 f303 	mul.w	r3, r1, r3
 8001e40:	441a      	add	r2, r3
 8001e42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001e46:	3302      	adds	r3, #2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	605a      	str	r2, [r3, #4]
            for (uint8_t k = 0; k < 8; k++) {
 8001e50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001e54:	3301      	adds	r3, #1
 8001e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001e5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001e5e:	2b07      	cmp	r3, #7
 8001e60:	d9a2      	bls.n	8001da8 <creat_grid_map+0x170>
        for (int j = 0; j < colum; j++) {
 8001e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e64:	3301      	adds	r3, #1
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e68:	79bb      	ldrb	r3, [r7, #6]
 8001e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	f6ff af28 	blt.w	8001cc2 <creat_grid_map+0x8a>
    for (int i = 0; i < row; i++) {
 8001e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e74:	3301      	adds	r3, #1
 8001e76:	633b      	str	r3, [r7, #48]	; 0x30
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	f6ff af1d 	blt.w	8001cbc <creat_grid_map+0x84>
        }
    }
    
    //------------------Distancias entre celdas------------------------
    //Se calcula la distancia de cada celda vecina
    for (int i = 0; i < row; i++) {
 8001e82:	2300      	movs	r3, #0
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
 8001e86:	e0a6      	b.n	8001fd6 <creat_grid_map+0x39e>
        for (int j = 0; j < colum; j++) {
 8001e88:	2300      	movs	r3, #0
 8001e8a:	623b      	str	r3, [r7, #32]
 8001e8c:	e09b      	b.n	8001fc6 <creat_grid_map+0x38e>
            for (uint8_t k = 0; k < 8; k++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	77fb      	strb	r3, [r7, #31]
 8001e92:	e091      	b.n	8001fb8 <creat_grid_map+0x380>
 8001e94:	08008a70 	.word	0x08008a70
 8001e98:	08008aac 	.word	0x08008aac
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	20000008 	.word	0x20000008
            {    
                if(grid[i][j].neighbors.ptrCellMap[k] != NULL)
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4413      	add	r3, r2
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	2154      	movs	r1, #84	; 0x54
 8001eb2:	fb01 f303 	mul.w	r3, r1, r3
 8001eb6:	441a      	add	r2, r3
 8001eb8:	7ffb      	ldrb	r3, [r7, #31]
 8001eba:	3302      	adds	r3, #2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d064      	beq.n	8001f90 <creat_grid_map+0x358>
                {
                    //Calculo vector relativo
                    rel_x = grid[i][j].neighbors.ptrCellMap[k]->coor_x - grid[i][j].coor_x;
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4413      	add	r3, r2
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	2154      	movs	r1, #84	; 0x54
 8001ed4:	fb01 f303 	mul.w	r3, r1, r3
 8001ed8:	441a      	add	r2, r3
 8001eda:	7ffb      	ldrb	r3, [r7, #31]
 8001edc:	3302      	adds	r3, #2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4413      	add	r3, r2
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
 8001ef4:	2154      	movs	r1, #84	; 0x54
 8001ef6:	fb01 f303 	mul.w	r3, r1, r3
 8001efa:	4413      	add	r3, r2
 8001efc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f04:	edc7 7a05 	vstr	s15, [r7, #20]
                    rel_y = grid[i][j].neighbors.ptrCellMap[k]->coor_y - grid[i][j].coor_y;
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4413      	add	r3, r2
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	2154      	movs	r1, #84	; 0x54
 8001f16:	fb01 f303 	mul.w	r3, r1, r3
 8001f1a:	441a      	add	r2, r3
 8001f1c:	7ffb      	ldrb	r3, [r7, #31]
 8001f1e:	3302      	adds	r3, #2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4413      	add	r3, r2
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	2154      	movs	r1, #84	; 0x54
 8001f38:	fb01 f303 	mul.w	r3, r1, r3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f46:	edc7 7a04 	vstr	s15, [r7, #16]
                    //Ingresamos la distancia
                    grid[i][j].neighbors.distance_neigh[k] = sqrtf(rel_x * rel_x + rel_y * rel_y);
 8001f4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f4e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001f52:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f56:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4413      	add	r3, r2
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	2154      	movs	r1, #84	; 0x54
 8001f6c:	fb01 f303 	mul.w	r3, r1, r3
 8001f70:	18d4      	adds	r4, r2, r3
 8001f72:	7ffd      	ldrb	r5, [r7, #31]
 8001f74:	eeb0 0a67 	vmov.f32	s0, s15
 8001f78:	f006 fa2e 	bl	80083d8 <sqrtf>
 8001f7c:	eef0 7a40 	vmov.f32	s15, s0
 8001f80:	f105 030a 	add.w	r3, r5, #10
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4423      	add	r3, r4
 8001f88:	3304      	adds	r3, #4
 8001f8a:	edc3 7a00 	vstr	s15, [r3]
 8001f8e:	e010      	b.n	8001fb2 <creat_grid_map+0x37a>
                }
                else
                {
                    //Ingreamos la distancia
                    grid[i][j].neighbors.distance_neigh[k] = -1.0f;
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4413      	add	r3, r2
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	2154      	movs	r1, #84	; 0x54
 8001f9e:	fb01 f303 	mul.w	r3, r1, r3
 8001fa2:	441a      	add	r2, r3
 8001fa4:	7ffb      	ldrb	r3, [r7, #31]
 8001fa6:	330a      	adds	r3, #10
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	3304      	adds	r3, #4
 8001fae:	4a0f      	ldr	r2, [pc, #60]	; (8001fec <creat_grid_map+0x3b4>)
 8001fb0:	601a      	str	r2, [r3, #0]
            for (uint8_t k = 0; k < 8; k++)
 8001fb2:	7ffb      	ldrb	r3, [r7, #31]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	77fb      	strb	r3, [r7, #31]
 8001fb8:	7ffb      	ldrb	r3, [r7, #31]
 8001fba:	2b07      	cmp	r3, #7
 8001fbc:	f67f af72 	bls.w	8001ea4 <creat_grid_map+0x26c>
        for (int j = 0; j < colum; j++) {
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	623b      	str	r3, [r7, #32]
 8001fc6:	79bb      	ldrb	r3, [r7, #6]
 8001fc8:	6a3a      	ldr	r2, [r7, #32]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	f6ff af5f 	blt.w	8001e8e <creat_grid_map+0x256>
    for (int i = 0; i < row; i++) {
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	f6ff af54 	blt.w	8001e88 <creat_grid_map+0x250>
                }                
            }
        }
    }

    return grid;
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3738      	adds	r7, #56	; 0x38
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fea:	bf00      	nop
 8001fec:	bf800000 	.word	0xbf800000

08001ff0 <main>:
float goal_y = 0;                                             //posicion final en y

void acelerometro_I2C(void);                       //Cabecera para la comunicacion I2C

int main(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
	//-----------------------Configuracion inicial del sistema---------------------------------
	//Incrementamos la velocidad de reloj del sistema
	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 8001ff6:	2364      	movs	r3, #100	; 0x64
 8001ff8:	73fb      	strb	r3, [r7, #15]
	configPLL(clock);
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 fecd 	bl	8002d9c <configPLL>
	//Realizamos la configuracuion inicial
	int_Hardware();
 8002002:	f000 f873 	bl	80020ec <int_Hardware>
	//Activamos el punto flotante por medio del registro especifico
	SCB->CPACR |= 0xF <<20;
 8002006:	4b2e      	ldr	r3, [pc, #184]	; (80020c0 <main+0xd0>)
 8002008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200c:	4a2c      	ldr	r2, [pc, #176]	; (80020c0 <main+0xd0>)
 800200e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002012:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	while(1)
	{
		if(status_A_Star==2)
 8002016:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <main+0xd4>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d14e      	bne.n	80020bc <main+0xcc>
		{
		  //-------------Separar el String en los parametros del grid m-------------
		  char **array_grid_map_string =  separate_Parameters(bufferParameterStringGM);
 800201e:	482a      	ldr	r0, [pc, #168]	; (80020c8 <main+0xd8>)
 8002020:	f000 f93c 	bl	800229c <separate_Parameters>
 8002024:	60b8      	str	r0, [r7, #8]
		  //---------Creacion de la malla con cada una de sus celdas-----------
		  Cell_map_t **grid_map = creat_grid_map(grid_map_row, grid_map_colum, cell_separation);
 8002026:	4b29      	ldr	r3, [pc, #164]	; (80020cc <main+0xdc>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	4a29      	ldr	r2, [pc, #164]	; (80020d0 <main+0xe0>)
 800202c:	7812      	ldrb	r2, [r2, #0]
 800202e:	4929      	ldr	r1, [pc, #164]	; (80020d4 <main+0xe4>)
 8002030:	edd1 7a00 	vldr	s15, [r1]
 8002034:	eeb0 0a67 	vmov.f32	s0, s15
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fdfc 	bl	8001c38 <creat_grid_map>
 8002040:	6078      	str	r0, [r7, #4]
		  //-------Calculo de la heuristica de la celda de acuerdo a la posicion objetivo-------
		  heuristic_cell_map(grid_map, array_grid_map_string, grid_map_row, grid_map_colum, goal_x, goal_y);
 8002042:	4b22      	ldr	r3, [pc, #136]	; (80020cc <main+0xdc>)
 8002044:	781a      	ldrb	r2, [r3, #0]
 8002046:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <main+0xe0>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	4923      	ldr	r1, [pc, #140]	; (80020d8 <main+0xe8>)
 800204c:	edd1 7a00 	vldr	s15, [r1]
 8002050:	4922      	ldr	r1, [pc, #136]	; (80020dc <main+0xec>)
 8002052:	ed91 7a00 	vldr	s14, [r1]
 8002056:	eef0 0a47 	vmov.f32	s1, s14
 800205a:	eeb0 0a67 	vmov.f32	s0, s15
 800205e:	68b9      	ldr	r1, [r7, #8]
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff fb67 	bl	8001734 <heuristic_cell_map>
		  //------------------Aplicacion del algoritmo A star------------------
		  file_cell_t *file_path = aplicattion_A_Star(grid_map, grid_map_row, grid_map_colum, start_x, start_y, goal_x, goal_y);
 8002066:	4b19      	ldr	r3, [pc, #100]	; (80020cc <main+0xdc>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	4a19      	ldr	r2, [pc, #100]	; (80020d0 <main+0xe0>)
 800206c:	7812      	ldrb	r2, [r2, #0]
 800206e:	491c      	ldr	r1, [pc, #112]	; (80020e0 <main+0xf0>)
 8002070:	edd1 7a00 	vldr	s15, [r1]
 8002074:	491b      	ldr	r1, [pc, #108]	; (80020e4 <main+0xf4>)
 8002076:	ed91 7a00 	vldr	s14, [r1]
 800207a:	4917      	ldr	r1, [pc, #92]	; (80020d8 <main+0xe8>)
 800207c:	edd1 6a00 	vldr	s13, [r1]
 8002080:	4916      	ldr	r1, [pc, #88]	; (80020dc <main+0xec>)
 8002082:	ed91 6a00 	vldr	s12, [r1]
 8002086:	eef0 1a46 	vmov.f32	s3, s12
 800208a:	eeb0 1a66 	vmov.f32	s2, s13
 800208e:	eef0 0a47 	vmov.f32	s1, s14
 8002092:	eeb0 0a67 	vmov.f32	s0, s15
 8002096:	4619      	mov	r1, r3
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7fe ffed 	bl	8001078 <aplicattion_A_Star>
 800209e:	6038      	str	r0, [r7, #0]
		  //-----------------Impresion de la ruta encontrada--------------------
		  send_path(file_path, array_grid_map_string, grid_map_row);
 80020a0:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <main+0xdc>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	68b9      	ldr	r1, [r7, #8]
 80020a8:	6838      	ldr	r0, [r7, #0]
 80020aa:	f000 fa59 	bl	8002560 <send_path>

		  //Reinicamos bandera
		  status_A_Star = 0;
 80020ae:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <main+0xd4>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
		  //Reiniciamos index
		  index_String_GM = 0;
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <main+0xf8>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	801a      	strh	r2, [r3, #0]
 80020ba:	e7ac      	b.n	8002016 <main+0x26>
		}
		else{  __NOP(); }
 80020bc:	bf00      	nop
		if(status_A_Star==2)
 80020be:	e7aa      	b.n	8002016 <main+0x26>
 80020c0:	e000ed00 	.word	0xe000ed00
 80020c4:	20000284 	.word	0x20000284
 80020c8:	20000288 	.word	0x20000288
 80020cc:	2000044c 	.word	0x2000044c
 80020d0:	2000044d 	.word	0x2000044d
 80020d4:	20000450 	.word	0x20000450
 80020d8:	2000045c 	.word	0x2000045c
 80020dc:	20000460 	.word	0x20000460
 80020e0:	20000454 	.word	0x20000454
 80020e4:	20000458 	.word	0x20000458
 80020e8:	2000044a 	.word	0x2000044a

080020ec <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af02      	add	r7, sp, #8
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 80020f2:	4b34      	ldr	r3, [pc, #208]	; (80021c4 <int_Hardware+0xd8>)
 80020f4:	4a34      	ldr	r2, [pc, #208]	; (80021c8 <int_Hardware+0xdc>)
 80020f6:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 80020f8:	4b32      	ldr	r3, [pc, #200]	; (80021c4 <int_Hardware+0xd8>)
 80020fa:	2205      	movs	r2, #5
 80020fc:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80020fe:	2300      	movs	r3, #0
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	2300      	movs	r3, #0
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	2301      	movs	r3, #1
 8002108:	2200      	movs	r2, #0
 800210a:	2101      	movs	r1, #1
 800210c:	482d      	ldr	r0, [pc, #180]	; (80021c4 <int_Hardware+0xd8>)
 800210e:	f000 fce1 	bl	8002ad4 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 8002112:	482c      	ldr	r0, [pc, #176]	; (80021c4 <int_Hardware+0xd8>)
 8002114:	f000 fd00 	bl	8002b18 <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA2----------------
	//------------AF7: USART2_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 8002118:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <int_Hardware+0xe0>)
 800211a:	4a2b      	ldr	r2, [pc, #172]	; (80021c8 <int_Hardware+0xdc>)
 800211c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 800211e:	4b2b      	ldr	r3, [pc, #172]	; (80021cc <int_Hardware+0xe0>)
 8002120:	2202      	movs	r2, #2
 8002122:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8002124:	2307      	movs	r3, #7
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	2300      	movs	r3, #0
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	2301      	movs	r3, #1
 800212e:	2200      	movs	r2, #0
 8002130:	2102      	movs	r1, #2
 8002132:	4826      	ldr	r0, [pc, #152]	; (80021cc <int_Hardware+0xe0>)
 8002134:	f000 fcce 	bl	8002ad4 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 8002138:	4824      	ldr	r0, [pc, #144]	; (80021cc <int_Hardware+0xe0>)
 800213a:	f000 fced 	bl	8002b18 <GPIO_Config>

	//---------------PIN: PA3----------------
	//------------AF7: USART2_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 800213e:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <int_Hardware+0xe4>)
 8002140:	4a21      	ldr	r2, [pc, #132]	; (80021c8 <int_Hardware+0xdc>)
 8002142:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3; 						//PIN_x, 0-15
 8002144:	4b22      	ldr	r3, [pc, #136]	; (80021d0 <int_Hardware+0xe4>)
 8002146:	2203      	movs	r2, #3
 8002148:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 800214a:	2307      	movs	r3, #7
 800214c:	9301      	str	r3, [sp, #4]
 800214e:	2300      	movs	r3, #0
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2301      	movs	r3, #1
 8002154:	2200      	movs	r2, #0
 8002156:	2102      	movs	r1, #2
 8002158:	481d      	ldr	r0, [pc, #116]	; (80021d0 <int_Hardware+0xe4>)
 800215a:	f000 fcbb 	bl	8002ad4 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 800215e:	481c      	ldr	r0, [pc, #112]	; (80021d0 <int_Hardware+0xe4>)
 8002160:	f000 fcda 	bl	8002b18 <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART2----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART2;
 8002164:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <int_Hardware+0xe8>)
 8002166:	4a1c      	ldr	r2, [pc, #112]	; (80021d8 <int_Hardware+0xec>)
 8002168:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX ;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 800216a:	4b1a      	ldr	r3, [pc, #104]	; (80021d4 <int_Hardware+0xe8>)
 800216c:	2202      	movs	r2, #2
 800216e:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_19200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 8002170:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <int_Hardware+0xe8>)
 8002172:	2201      	movs	r2, #1
 8002174:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 8002176:	4b17      	ldr	r3, [pc, #92]	; (80021d4 <int_Hardware+0xe8>)
 8002178:	2200      	movs	r2, #0
 800217a:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 800217c:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <int_Hardware+0xe8>)
 800217e:	2200      	movs	r2, #0
 8002180:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 8002182:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <int_Hardware+0xe8>)
 8002184:	2201      	movs	r2, #1
 8002186:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_DISABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 8002188:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <int_Hardware+0xe8>)
 800218a:	2200      	movs	r2, #0
 800218c:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 800218e:	4811      	ldr	r0, [pc, #68]	; (80021d4 <int_Hardware+0xe8>)
 8002190:	f000 fed4 	bl	8002f3c <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <int_Hardware+0xf0>)
 8002196:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800219a:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 800219c:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <int_Hardware+0xf0>)
 800219e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021a2:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80021a4:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <int_Hardware+0xf0>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80021aa:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <int_Hardware+0xf0>)
 80021ac:	22fa      	movs	r2, #250	; 0xfa
 80021ae:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <int_Hardware+0xf0>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 80021b6:	4809      	ldr	r0, [pc, #36]	; (80021dc <int_Hardware+0xf0>)
 80021b8:	f000 fb36 	bl	8002828 <BasicTimer_Config>

	//-------------------Fin de Configuracion TIMx-----------------------



}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000204 	.word	0x20000204
 80021c8:	40020000 	.word	0x40020000
 80021cc:	20000220 	.word	0x20000220
 80021d0:	2000022c 	.word	0x2000022c
 80021d4:	20000238 	.word	0x20000238
 80021d8:	40004400 	.word	0x40004400
 80021dc:	20000210 	.word	0x20000210

080021e0 <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <BasicTimer2_Callback+0x10>)
 80021e6:	f000 fdc1 	bl	8002d6c <GPIOxTooglePin>
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000204 	.word	0x20000204

080021f4 <BasicUSART2_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART2_Callback(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
	//Se recibe caracter
	charRead = getRxData();
 80021f8:	f001 f944 	bl	8003484 <getRxData>
 80021fc:	4603      	mov	r3, r0
 80021fe:	461a      	mov	r2, r3
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <BasicUSART2_Callback+0x58>)
 8002202:	701a      	strb	r2, [r3, #0]
	//Se verifica el inicio o final de un string de informacion del Grip Map
	if(charRead=='$')
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <BasicUSART2_Callback+0x58>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b24      	cmp	r3, #36	; 0x24
 800220a:	d111      	bne.n	8002230 <BasicUSART2_Callback+0x3c>
	{
		if(status_A_Star  == 0)
 800220c:	4b10      	ldr	r3, [pc, #64]	; (8002250 <BasicUSART2_Callback+0x5c>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d103      	bne.n	800221c <BasicUSART2_Callback+0x28>
		{
			status_A_Star = 1;
 8002214:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <BasicUSART2_Callback+0x5c>)
 8002216:	2201      	movs	r2, #1
 8002218:	701a      	strb	r2, [r3, #0]
 800221a:	e00a      	b.n	8002232 <BasicUSART2_Callback+0x3e>
		}
		else
		{
			bufferParameterStringGM[index_String_GM]= '\0';
 800221c:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <BasicUSART2_Callback+0x60>)
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <BasicUSART2_Callback+0x64>)
 8002224:	2100      	movs	r1, #0
 8002226:	5499      	strb	r1, [r3, r2]
			status_A_Star  = 2;
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <BasicUSART2_Callback+0x5c>)
 800222a:	2202      	movs	r2, #2
 800222c:	701a      	strb	r2, [r3, #0]
 800222e:	e000      	b.n	8002232 <BasicUSART2_Callback+0x3e>
		}
	}
	else{ __NOP(); }
 8002230:	bf00      	nop
	//Si se inicia un nuevo String GM se procede a guardar los caracteres
	if(status_A_Star == 1)
 8002232:	4b07      	ldr	r3, [pc, #28]	; (8002250 <BasicUSART2_Callback+0x5c>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d105      	bne.n	8002246 <BasicUSART2_Callback+0x52>
	{
		save_char_Parameter_Grid_Map(charRead);
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <BasicUSART2_Callback+0x58>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f80c 	bl	800225c <save_char_Parameter_Grid_Map>
	}
	else{ __NOP(); }
}
 8002244:	e000      	b.n	8002248 <BasicUSART2_Callback+0x54>
	else{ __NOP(); }
 8002246:	bf00      	nop
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000010 	.word	0x20000010
 8002250:	20000284 	.word	0x20000284
 8002254:	2000044a 	.word	0x2000044a
 8002258:	20000288 	.word	0x20000288

0800225c <save_char_Parameter_Grid_Map>:

//----------------------------Fin de la definicion de las funciones ISR----------------------------------------

//----------------------------Inicio de la definicion de las funciones-----------------------------------------
void save_char_Parameter_Grid_Map(char newchar)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
	if(newchar!='$')
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	2b24      	cmp	r3, #36	; 0x24
 800226a:	d00c      	beq.n	8002286 <save_char_Parameter_Grid_Map+0x2a>
	{
		bufferParameterStringGM[index_String_GM] = newchar;
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <save_char_Parameter_Grid_Map+0x38>)
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	4619      	mov	r1, r3
 8002272:	4a09      	ldr	r2, [pc, #36]	; (8002298 <save_char_Parameter_Grid_Map+0x3c>)
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	5453      	strb	r3, [r2, r1]
		index_String_GM++;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <save_char_Parameter_Grid_Map+0x38>)
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	3301      	adds	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <save_char_Parameter_Grid_Map+0x38>)
 8002282:	801a      	strh	r2, [r3, #0]
	}
	else{ __NOP(); }
}
 8002284:	e000      	b.n	8002288 <save_char_Parameter_Grid_Map+0x2c>
	else{ __NOP(); }
 8002286:	bf00      	nop
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	2000044a 	.word	0x2000044a
 8002298:	20000288 	.word	0x20000288

0800229c <separate_Parameters>:



char** separate_Parameters(char *parameter_string)
{
 800229c:	b590      	push	{r4, r7, lr}
 800229e:	b08d      	sub	sp, #52	; 0x34
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  //Definicion de variables
  char buffercharSeparate[10];
  uint8_t index_charSeparate = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t flag_Separate = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t status_parameter = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t index_init_Grid_map = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

  //---------------Definicion de los parametros iniciales---------------
  for (uint16_t i = 0; parameter_string[i] != '\0'; i++)
 80022bc:	2300      	movs	r3, #0
 80022be:	857b      	strh	r3, [r7, #42]	; 0x2a
 80022c0:	e068      	b.n	8002394 <separate_Parameters+0xf8>
  {
    //Verificacion del estado
    if(status_parameter<3)
 80022c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d85d      	bhi.n	8002386 <separate_Parameters+0xea>
    {
      //Busqueda de la separacion dentro del string
      if (parameter_string[i] == ':')
 80022ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	4413      	add	r3, r2
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b3a      	cmp	r3, #58	; 0x3a
 80022d4:	d10d      	bne.n	80022f2 <separate_Parameters+0x56>
      {
        buffercharSeparate[index_charSeparate] = '\0';
 80022d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022da:	3330      	adds	r3, #48	; 0x30
 80022dc:	443b      	add	r3, r7
 80022de:	2200      	movs	r2, #0
 80022e0:	f803 2c28 	strb.w	r2, [r3, #-40]
        index_charSeparate = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        flag_Separate = 1;
 80022ea:	2301      	movs	r3, #1
 80022ec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80022f0:	e00e      	b.n	8002310 <separate_Parameters+0x74>
      }
      else
      {
        buffercharSeparate[index_charSeparate] = parameter_string[i];
 80022f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	441a      	add	r2, r3
 80022f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022fc:	7812      	ldrb	r2, [r2, #0]
 80022fe:	3330      	adds	r3, #48	; 0x30
 8002300:	443b      	add	r3, r7
 8002302:	f803 2c28 	strb.w	r2, [r3, #-40]
        index_charSeparate++;
 8002306:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800230a:	3301      	adds	r3, #1
 800230c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
      //Si la bandera se levanta se asigna el valor correspondiente al parametro
      if(flag_Separate == 1)
 8002310:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002314:	2b01      	cmp	r3, #1
 8002316:	d13a      	bne.n	800238e <separate_Parameters+0xf2>
      {
        switch(status_parameter)
 8002318:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800231c:	2b02      	cmp	r3, #2
 800231e:	d01a      	beq.n	8002356 <separate_Parameters+0xba>
 8002320:	2b02      	cmp	r3, #2
 8002322:	dc27      	bgt.n	8002374 <separate_Parameters+0xd8>
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <separate_Parameters+0x92>
 8002328:	2b01      	cmp	r3, #1
 800232a:	d00a      	beq.n	8002342 <separate_Parameters+0xa6>
 800232c:	e022      	b.n	8002374 <separate_Parameters+0xd8>
        {
          case 0:
          {
            grid_map_row = atoi(buffercharSeparate);
 800232e:	f107 0308 	add.w	r3, r7, #8
 8002332:	4618      	mov	r0, r3
 8002334:	f001 fa73 	bl	800381e <atoi>
 8002338:	4603      	mov	r3, r0
 800233a:	b2da      	uxtb	r2, r3
 800233c:	4b81      	ldr	r3, [pc, #516]	; (8002544 <separate_Parameters+0x2a8>)
 800233e:	701a      	strb	r2, [r3, #0]
            break;
 8002340:	e018      	b.n	8002374 <separate_Parameters+0xd8>
          }
          case 1:
          {
            grid_map_colum = atoi(buffercharSeparate);
 8002342:	f107 0308 	add.w	r3, r7, #8
 8002346:	4618      	mov	r0, r3
 8002348:	f001 fa69 	bl	800381e <atoi>
 800234c:	4603      	mov	r3, r0
 800234e:	b2da      	uxtb	r2, r3
 8002350:	4b7d      	ldr	r3, [pc, #500]	; (8002548 <separate_Parameters+0x2ac>)
 8002352:	701a      	strb	r2, [r3, #0]
            break;
 8002354:	e00e      	b.n	8002374 <separate_Parameters+0xd8>
          }
          case 2:
          {
            cell_separation = atof(buffercharSeparate);
 8002356:	f107 0308 	add.w	r3, r7, #8
 800235a:	4618      	mov	r0, r3
 800235c:	f001 fa5c 	bl	8003818 <atof>
 8002360:	ec53 2b10 	vmov	r2, r3, d0
 8002364:	4610      	mov	r0, r2
 8002366:	4619      	mov	r1, r3
 8002368:	f7fe fc46 	bl	8000bf8 <__aeabi_d2f>
 800236c:	4603      	mov	r3, r0
 800236e:	4a77      	ldr	r2, [pc, #476]	; (800254c <separate_Parameters+0x2b0>)
 8002370:	6013      	str	r3, [r2, #0]
            break;
 8002372:	bf00      	nop
          }
        }
        status_parameter++;
 8002374:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002378:	3301      	adds	r3, #1
 800237a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        flag_Separate = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002384:	e003      	b.n	800238e <separate_Parameters+0xf2>
      }
    }
    else
    {
      index_init_Grid_map = i;
 8002386:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002388:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      break;
 800238c:	e008      	b.n	80023a0 <separate_Parameters+0x104>
  for (uint16_t i = 0; parameter_string[i] != '\0'; i++)
 800238e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002390:	3301      	adds	r3, #1
 8002392:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002394:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d190      	bne.n	80022c2 <separate_Parameters+0x26>
    }
  }
  //---------------transformacion del string grid map en un array---------------
  //Creacion del array que va a contener cada uno de los caracteres
  char **array_string = (char **)malloc(grid_map_row * sizeof(char *));
 80023a0:	4b68      	ldr	r3, [pc, #416]	; (8002544 <separate_Parameters+0x2a8>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f001 fa7c 	bl	80038a4 <malloc>
 80023ac:	4603      	mov	r3, r0
 80023ae:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < grid_map_row; i++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
 80023b4:	e00f      	b.n	80023d6 <separate_Parameters+0x13a>
  {
    array_string[i] = (char *)malloc((grid_map_colum + 1) * sizeof(char));
 80023b6:	4b64      	ldr	r3, [pc, #400]	; (8002548 <separate_Parameters+0x2ac>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	3301      	adds	r3, #1
 80023bc:	4619      	mov	r1, r3
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	18d4      	adds	r4, r2, r3
 80023c6:	4608      	mov	r0, r1
 80023c8:	f001 fa6c 	bl	80038a4 <malloc>
 80023cc:	4603      	mov	r3, r0
 80023ce:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < grid_map_row; i++)
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	3301      	adds	r3, #1
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
 80023d6:	4b5b      	ldr	r3, [pc, #364]	; (8002544 <separate_Parameters+0x2a8>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	4293      	cmp	r3, r2
 80023e0:	dbe9      	blt.n	80023b6 <separate_Parameters+0x11a>
  }
  //Variables para los indices
  uint8_t index_row = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t index_col = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  //Separacion de cada caracter
  for (uint16_t i = index_init_Grid_map; parameter_string[i] != '\0'; i++)
 80023ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80023f2:	843b      	strh	r3, [r7, #32]
 80023f4:	e02f      	b.n	8002456 <separate_Parameters+0x1ba>
  {
    if (parameter_string[i] == ';')
 80023f6:	8c3b      	ldrh	r3, [r7, #32]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	4413      	add	r3, r2
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b3b      	cmp	r3, #59	; 0x3b
 8002400:	d113      	bne.n	800242a <separate_Parameters+0x18e>
    {
      //Se agrega un elemento nulo para indicar el fin de la fila
      array_string[index_row][index_col] = '\0';
 8002402:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	4413      	add	r3, r2
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002412:	4413      	add	r3, r2
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
      //Se aumenta el indice de la fila y se reinicia el indice de la columna
      index_row++;
 8002418:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800241c:	3301      	adds	r3, #1
 800241e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      index_col = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002428:	e012      	b.n	8002450 <separate_Parameters+0x1b4>
    }
    else
    {
      //Se guarda el caracter
      array_string[index_row][index_col] = parameter_string[i];
 800242a:	8c3b      	ldrh	r3, [r7, #32]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	441a      	add	r2, r3
 8002430:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	6979      	ldr	r1, [r7, #20]
 8002438:	440b      	add	r3, r1
 800243a:	6819      	ldr	r1, [r3, #0]
 800243c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002440:	440b      	add	r3, r1
 8002442:	7812      	ldrb	r2, [r2, #0]
 8002444:	701a      	strb	r2, [r3, #0]
      //se aumenta el indice de la columna
      index_col++;
 8002446:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800244a:	3301      	adds	r3, #1
 800244c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  for (uint16_t i = index_init_Grid_map; parameter_string[i] != '\0'; i++)
 8002450:	8c3b      	ldrh	r3, [r7, #32]
 8002452:	3301      	adds	r3, #1
 8002454:	843b      	strh	r3, [r7, #32]
 8002456:	8c3b      	ldrh	r3, [r7, #32]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	4413      	add	r3, r2
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1c9      	bne.n	80023f6 <separate_Parameters+0x15a>
    }
  }
  //Se arregla un elemento nulo en la ultima fila y columna
  array_string[index_row][index_col] = '\0';
 8002462:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	4413      	add	r3, r2
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002472:	4413      	add	r3, r2
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
  //---------------Definicion del start y del goal---------------
  //Recorremo el array creado para encontrar la posicion de los objetivos
  for(int i = 0; i < grid_map_row; i++)
 8002478:	2300      	movs	r3, #0
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	e057      	b.n	800252e <separate_Parameters+0x292>
  {
    for(int j = 0; j < grid_map_colum; j++)
 800247e:	2300      	movs	r3, #0
 8002480:	61bb      	str	r3, [r7, #24]
 8002482:	e04b      	b.n	800251c <separate_Parameters+0x280>
    {
      if(array_string[i][j] == 'S')
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	4413      	add	r3, r2
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4413      	add	r3, r2
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b53      	cmp	r3, #83	; 0x53
 8002496:	d11a      	bne.n	80024ce <separate_Parameters+0x232>
      {
        //Definimos su posicion
        start_x = j*cell_separation;
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	ee07 3a90 	vmov	s15, r3
 800249e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024a2:	4b2a      	ldr	r3, [pc, #168]	; (800254c <separate_Parameters+0x2b0>)
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ac:	4b28      	ldr	r3, [pc, #160]	; (8002550 <separate_Parameters+0x2b4>)
 80024ae:	edc3 7a00 	vstr	s15, [r3]
        start_y = i*cell_separation;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	ee07 3a90 	vmov	s15, r3
 80024b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024bc:	4b23      	ldr	r3, [pc, #140]	; (800254c <separate_Parameters+0x2b0>)
 80024be:	edd3 7a00 	vldr	s15, [r3]
 80024c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c6:	4b23      	ldr	r3, [pc, #140]	; (8002554 <separate_Parameters+0x2b8>)
 80024c8:	edc3 7a00 	vstr	s15, [r3]
 80024cc:	e023      	b.n	8002516 <separate_Parameters+0x27a>
      }
      else if (array_string[i][j] == 'G')
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	4413      	add	r3, r2
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	4413      	add	r3, r2
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b47      	cmp	r3, #71	; 0x47
 80024e0:	d119      	bne.n	8002516 <separate_Parameters+0x27a>
      {
      //Definimos su posicion
        goal_x= j*cell_separation;
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024ec:	4b17      	ldr	r3, [pc, #92]	; (800254c <separate_Parameters+0x2b0>)
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <separate_Parameters+0x2bc>)
 80024f8:	edc3 7a00 	vstr	s15, [r3]
        goal_y= i*cell_separation;
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	ee07 3a90 	vmov	s15, r3
 8002502:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002506:	4b11      	ldr	r3, [pc, #68]	; (800254c <separate_Parameters+0x2b0>)
 8002508:	edd3 7a00 	vldr	s15, [r3]
 800250c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002510:	4b12      	ldr	r3, [pc, #72]	; (800255c <separate_Parameters+0x2c0>)
 8002512:	edc3 7a00 	vstr	s15, [r3]
    for(int j = 0; j < grid_map_colum; j++)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	3301      	adds	r3, #1
 800251a:	61bb      	str	r3, [r7, #24]
 800251c:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <separate_Parameters+0x2ac>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	4293      	cmp	r3, r2
 8002526:	dbad      	blt.n	8002484 <separate_Parameters+0x1e8>
  for(int i = 0; i < grid_map_row; i++)
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	3301      	adds	r3, #1
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	4b05      	ldr	r3, [pc, #20]	; (8002544 <separate_Parameters+0x2a8>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	4293      	cmp	r3, r2
 8002538:	dba1      	blt.n	800247e <separate_Parameters+0x1e2>
      }
    }
  }

  return array_string;
 800253a:	697b      	ldr	r3, [r7, #20]

}
 800253c:	4618      	mov	r0, r3
 800253e:	3734      	adds	r7, #52	; 0x34
 8002540:	46bd      	mov	sp, r7
 8002542:	bd90      	pop	{r4, r7, pc}
 8002544:	2000044c 	.word	0x2000044c
 8002548:	2000044d 	.word	0x2000044d
 800254c:	20000450 	.word	0x20000450
 8002550:	20000454 	.word	0x20000454
 8002554:	20000458 	.word	0x20000458
 8002558:	2000045c 	.word	0x2000045c
 800255c:	20000460 	.word	0x20000460

08002560 <send_path>:


void send_path(file_cell_t *file_cell, char **map_String, uint8_t row)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	4613      	mov	r3, r2
 800256c:	71fb      	strb	r3, [r7, #7]
  //Variables
  uint8_t index = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	75fb      	strb	r3, [r7, #23]

  //Cambiamos los caracteres de la malla de strings por caracteres que indican la ruta establecida con A Star
  while(1)
  {
    if(file_cell->ptrCell_parent[index] != NULL)
 8002572:	7dfb      	ldrb	r3, [r7, #23]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d016      	beq.n	80025ae <send_path+0x4e>
    {
      map_String[file_cell->ptrCell_parent[index]->index_row][file_cell->ptrCell_parent[index]->index_col] = '+';
 8002580:	7dfb      	ldrb	r3, [r7, #23]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	789b      	ldrb	r3, [r3, #2]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	4413      	add	r3, r2
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	7dfb      	ldrb	r3, [r7, #23]
 8002596:	68f9      	ldr	r1, [r7, #12]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	78db      	ldrb	r3, [r3, #3]
 80025a0:	4413      	add	r3, r2
 80025a2:	222b      	movs	r2, #43	; 0x2b
 80025a4:	701a      	strb	r2, [r3, #0]
      index++;
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
 80025a8:	3301      	adds	r3, #1
 80025aa:	75fb      	strb	r3, [r7, #23]
    if(file_cell->ptrCell_parent[index] != NULL)
 80025ac:	e7e1      	b.n	8002572 <send_path+0x12>
    }
    else
    {
      break;
 80025ae:	bf00      	nop
    }
  }
  //Cambiamos los caracteres de la malla de strings para indicar el inicio de la trayectoria
  map_String[file_cell->ptrCell_parent[0]->index_row][file_cell->ptrCell_parent[0]->index_col] = 'S';
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	789b      	ldrb	r3, [r3, #2]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	4413      	add	r3, r2
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	6852      	ldr	r2, [r2, #4]
 80025c2:	78d2      	ldrb	r2, [r2, #3]
 80025c4:	4413      	add	r3, r2
 80025c6:	2253      	movs	r2, #83	; 0x53
 80025c8:	701a      	strb	r2, [r3, #0]

  //Imprimir la malla modificada
  for(int i=0;i<row;i++)
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	e010      	b.n	80025f2 <send_path+0x92>
  {
	sprintf(bufferMsg, "%s;", map_String[i]);
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	4413      	add	r3, r2
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	4909      	ldr	r1, [pc, #36]	; (8002604 <send_path+0xa4>)
 80025de:	480a      	ldr	r0, [pc, #40]	; (8002608 <send_path+0xa8>)
 80025e0:	f002 f976 	bl	80048d0 <siprintf>
	writeMsg(&handler_USART_USB, bufferMsg);
 80025e4:	4908      	ldr	r1, [pc, #32]	; (8002608 <send_path+0xa8>)
 80025e6:	4809      	ldr	r0, [pc, #36]	; (800260c <send_path+0xac>)
 80025e8:	f000 ff2d 	bl	8003446 <writeMsg>
  for(int i=0;i<row;i++)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	3301      	adds	r3, #1
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	dbea      	blt.n	80025d0 <send_path+0x70>
  }
}
 80025fa:	bf00      	nop
 80025fc:	bf00      	nop
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	08008af8 	.word	0x08008af8
 8002608:	20000244 	.word	0x20000244
 800260c:	20000238 	.word	0x20000238

08002610 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002610:	480d      	ldr	r0, [pc, #52]	; (8002648 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002612:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002614:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002618:	480c      	ldr	r0, [pc, #48]	; (800264c <LoopForever+0x6>)
  ldr r1, =_edata
 800261a:	490d      	ldr	r1, [pc, #52]	; (8002650 <LoopForever+0xa>)
  ldr r2, =_sidata
 800261c:	4a0d      	ldr	r2, [pc, #52]	; (8002654 <LoopForever+0xe>)
  movs r3, #0
 800261e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002620:	e002      	b.n	8002628 <LoopCopyDataInit>

08002622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002626:	3304      	adds	r3, #4

08002628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800262a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800262c:	d3f9      	bcc.n	8002622 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800262e:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002630:	4c0a      	ldr	r4, [pc, #40]	; (800265c <LoopForever+0x16>)
  movs r3, #0
 8002632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002634:	e001      	b.n	800263a <LoopFillZerobss>

08002636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002638:	3204      	adds	r2, #4

0800263a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800263a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800263c:	d3fb      	bcc.n	8002636 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800263e:	f001 f90d 	bl	800385c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002642:	f7ff fcd5 	bl	8001ff0 <main>

08002646 <LoopForever>:

LoopForever:
    b LoopForever
 8002646:	e7fe      	b.n	8002646 <LoopForever>
  ldr   r0, =_estack
 8002648:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800264c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002650:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002654:	08008fbc 	.word	0x08008fbc
  ldr r2, =_sbss
 8002658:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800265c:	20000cd4 	.word	0x20000cd4

08002660 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002660:	e7fe      	b.n	8002660 <ADC_IRQHandler>

08002662 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002662:	b480      	push	{r7}
 8002664:	af00      	add	r7, sp, #0
	return 1;
 8002666:	2301      	movs	r3, #1
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <_kill>:

int _kill(int pid, int sig)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800267c:	f001 f8d4 	bl	8003828 <__errno>
 8002680:	4603      	mov	r3, r0
 8002682:	2216      	movs	r2, #22
 8002684:	601a      	str	r2, [r3, #0]
	return -1;
 8002686:	f04f 33ff 	mov.w	r3, #4294967295
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <_exit>:

void _exit (int status)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800269a:	f04f 31ff 	mov.w	r1, #4294967295
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff ffe7 	bl	8002672 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026a4:	e7fe      	b.n	80026a4 <_exit+0x12>

080026a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b086      	sub	sp, #24
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	e00a      	b.n	80026ce <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026b8:	f3af 8000 	nop.w
 80026bc:	4601      	mov	r1, r0
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	60ba      	str	r2, [r7, #8]
 80026c4:	b2ca      	uxtb	r2, r1
 80026c6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	3301      	adds	r3, #1
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	dbf0      	blt.n	80026b8 <_read+0x12>
	}

return len;
 80026d6:	687b      	ldr	r3, [r7, #4]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	e009      	b.n	8002706 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	60ba      	str	r2, [r7, #8]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	3301      	adds	r3, #1
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	429a      	cmp	r2, r3
 800270c:	dbf1      	blt.n	80026f2 <_write+0x12>
	}
	return len;
 800270e:	687b      	ldr	r3, [r7, #4]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <_close>:

int _close(int file)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
	return -1;
 8002720:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002740:	605a      	str	r2, [r3, #4]
	return 0;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <_isatty>:

int _isatty(int file)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
	return 1;
 8002758:	2301      	movs	r3, #1
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002766:	b480      	push	{r7}
 8002768:	b085      	sub	sp, #20
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
	return 0;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002788:	4a14      	ldr	r2, [pc, #80]	; (80027dc <_sbrk+0x5c>)
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <_sbrk+0x60>)
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002794:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <_sbrk+0x64>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d102      	bne.n	80027a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800279c:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <_sbrk+0x64>)
 800279e:	4a12      	ldr	r2, [pc, #72]	; (80027e8 <_sbrk+0x68>)
 80027a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <_sbrk+0x64>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d207      	bcs.n	80027c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027b0:	f001 f83a 	bl	8003828 <__errno>
 80027b4:	4603      	mov	r3, r0
 80027b6:	220c      	movs	r2, #12
 80027b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ba:	f04f 33ff 	mov.w	r3, #4294967295
 80027be:	e009      	b.n	80027d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <_sbrk+0x64>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027c6:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <_sbrk+0x64>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4413      	add	r3, r2
 80027ce:	4a05      	ldr	r2, [pc, #20]	; (80027e4 <_sbrk+0x64>)
 80027d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027d2:	68fb      	ldr	r3, [r7, #12]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20020000 	.word	0x20020000
 80027e0:	00000400 	.word	0x00000400
 80027e4:	20000464 	.word	0x20000464
 80027e8:	20000cd8 	.word	0x20000cd8

080027ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	db0b      	blt.n	8002816 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	f003 021f 	and.w	r2, r3, #31
 8002804:	4907      	ldr	r1, [pc, #28]	; (8002824 <__NVIC_EnableIRQ+0x38>)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	2001      	movs	r0, #1
 800280e:	fa00 f202 	lsl.w	r2, r0, r2
 8002812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	e000e100 	.word	0xe000e100

08002828 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002838:	d10a      	bne.n	8002850 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800283a:	4b62      	ldr	r3, [pc, #392]	; (80029c4 <BasicTimer_Config+0x19c>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	4a61      	ldr	r2, [pc, #388]	; (80029c4 <BasicTimer_Config+0x19c>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	4a5f      	ldr	r2, [pc, #380]	; (80029c8 <BasicTimer_Config+0x1a0>)
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e02e      	b.n	80028ae <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4a5d      	ldr	r2, [pc, #372]	; (80029cc <BasicTimer_Config+0x1a4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d10a      	bne.n	8002870 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800285a:	4b5a      	ldr	r3, [pc, #360]	; (80029c4 <BasicTimer_Config+0x19c>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a59      	ldr	r2, [pc, #356]	; (80029c4 <BasicTimer_Config+0x19c>)
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	4a59      	ldr	r2, [pc, #356]	; (80029d0 <BasicTimer_Config+0x1a8>)
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	e01e      	b.n	80028ae <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4a57      	ldr	r2, [pc, #348]	; (80029d4 <BasicTimer_Config+0x1ac>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d10a      	bne.n	8002890 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800287a:	4b52      	ldr	r3, [pc, #328]	; (80029c4 <BasicTimer_Config+0x19c>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a51      	ldr	r2, [pc, #324]	; (80029c4 <BasicTimer_Config+0x19c>)
 8002880:	f043 0304 	orr.w	r3, r3, #4
 8002884:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	4a53      	ldr	r2, [pc, #332]	; (80029d8 <BasicTimer_Config+0x1b0>)
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e00e      	b.n	80028ae <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4a51      	ldr	r2, [pc, #324]	; (80029dc <BasicTimer_Config+0x1b4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d109      	bne.n	80028ae <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800289a:	4b4a      	ldr	r3, [pc, #296]	; (80029c4 <BasicTimer_Config+0x19c>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	4a49      	ldr	r2, [pc, #292]	; (80029c4 <BasicTimer_Config+0x19c>)
 80028a0:	f043 0308 	orr.w	r3, r3, #8
 80028a4:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	4a4d      	ldr	r2, [pc, #308]	; (80029e0 <BasicTimer_Config+0x1b8>)
 80028ac:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 80028ae:	f000 faf3 	bl	8002e98 <getConfigPLL>
 80028b2:	4603      	mov	r3, r0
 80028b4:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 80028b6:	f000 fb0b 	bl	8002ed0 <getClockAPB1>
 80028ba:	4603      	mov	r3, r0
 80028bc:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 80028be:	7bbb      	ldrb	r3, [r7, #14]
 80028c0:	2b31      	cmp	r3, #49	; 0x31
 80028c2:	d903      	bls.n	80028cc <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
 80028ca:	e000      	b.n	80028ce <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 80028cc:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	8852      	ldrh	r2, [r2, #2]
 80028d4:	fb02 f303 	mul.w	r3, r2, r3
 80028d8:	1e5a      	subs	r2, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d112      	bne.n	800290e <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f022 0210 	bic.w	r2, r2, #16
 80028f6:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	3201      	adds	r2, #1
 8002902:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	625a      	str	r2, [r3, #36]	; 0x24
 800290c:	e018      	b.n	8002940 <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f022 0210 	bic.w	r2, r2, #16
 800291c:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f042 0210 	orr.w	r2, r2, #16
 800292c:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6852      	ldr	r2, [r2, #4]
 800293e:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002940:	b672      	cpsid	i
}
 8002942:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294c:	d103      	bne.n	8002956 <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 800294e:	201c      	movs	r0, #28
 8002950:	f7ff ff4c 	bl	80027ec <__NVIC_EnableIRQ>
 8002954:	e019      	b.n	800298a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	4a1c      	ldr	r2, [pc, #112]	; (80029cc <BasicTimer_Config+0x1a4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d103      	bne.n	8002968 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8002960:	201d      	movs	r0, #29
 8002962:	f7ff ff43 	bl	80027ec <__NVIC_EnableIRQ>
 8002966:	e010      	b.n	800298a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4a19      	ldr	r2, [pc, #100]	; (80029d4 <BasicTimer_Config+0x1ac>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d103      	bne.n	800297a <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8002972:	201e      	movs	r0, #30
 8002974:	f7ff ff3a 	bl	80027ec <__NVIC_EnableIRQ>
 8002978:	e007      	b.n	800298a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	4a17      	ldr	r2, [pc, #92]	; (80029dc <BasicTimer_Config+0x1b4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d102      	bne.n	800298a <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8002984:	2032      	movs	r0, #50	; 0x32
 8002986:	f7ff ff31 	bl	80027ec <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800298a:	b662      	cpsie	i
}
 800298c:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	7a1b      	ldrb	r3, [r3, #8]
 8002992:	4619      	mov	r1, r3
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f87d 	bl	8002a94 <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f022 0201 	bic.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f042 0201 	orr.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
}
 80029ba:	bf00      	nop
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800
 80029c8:	20000468 	.word	0x20000468
 80029cc:	40000400 	.word	0x40000400
 80029d0:	2000046c 	.word	0x2000046c
 80029d4:	40000800 	.word	0x40000800
 80029d8:	20000470 	.word	0x20000470
 80029dc:	40000c00 	.word	0x40000c00
 80029e0:	20000474 	.word	0x20000474

080029e4 <BasicTimer3_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer3_Callback(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
	__NOP();
 80029e8:	bf00      	nop
}
 80029ea:	bf00      	nop
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <BasicTimer4_Callback>:

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
	__NOP();
 80029f8:	bf00      	nop
}
 80029fa:	bf00      	nop
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
	__NOP();
 8002a08:	bf00      	nop
}
 8002a0a:	bf00      	nop
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 8002a18:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <TIM2_IRQHandler+0x1c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <TIM2_IRQHandler+0x1c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 8002a28:	f7ff fbda 	bl	80021e0 <BasicTimer2_Callback>

}
 8002a2c:	bf00      	nop
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000468 	.word	0x20000468

08002a34 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <TIM3_IRQHandler+0x1c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691a      	ldr	r2, [r3, #16]
 8002a3e:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <TIM3_IRQHandler+0x1c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 8002a48:	f7ff ffcc 	bl	80029e4 <BasicTimer3_Callback>

}
 8002a4c:	bf00      	nop
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	2000046c 	.word	0x2000046c

08002a54 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <TIM4_IRQHandler+0x1c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691a      	ldr	r2, [r3, #16]
 8002a5e:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <TIM4_IRQHandler+0x1c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 8002a68:	f7ff ffc4 	bl	80029f4 <BasicTimer4_Callback>

}
 8002a6c:	bf00      	nop
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000470 	.word	0x20000470

08002a74 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 8002a78:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <TIM5_IRQHandler+0x1c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <TIM5_IRQHandler+0x1c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 8002a88:	f7ff ffbc 	bl	8002a04 <BasicTimer5_Callback>

}
 8002a8c:	bf00      	nop
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20000474 	.word	0x20000474

08002a94 <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d108      	bne.n	8002ab8 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f042 0201 	orr.w	r2, r2, #1
 8002ab4:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 8002ab6:	e007      	b.n	8002ac8 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f022 0201 	bic.w	r2, r2, #1
 8002ac6:	60da      	str	r2, [r3, #12]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	4608      	mov	r0, r1
 8002ade:	4611      	mov	r1, r2
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	70fb      	strb	r3, [r7, #3]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	70bb      	strb	r3, [r7, #2]
 8002aea:	4613      	mov	r3, r2
 8002aec:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	78ba      	ldrb	r2, [r7, #2]
 8002af8:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	787a      	ldrb	r2, [r7, #1]
 8002afe:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	7c3a      	ldrb	r2, [r7, #16]
 8002b04:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	7d3a      	ldrb	r2, [r7, #20]
 8002b0a:	715a      	strb	r2, [r3, #5]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	4a88      	ldr	r2, [pc, #544]	; (8002d50 <GPIO_Config+0x238>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d106      	bne.n	8002b40 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 8002b32:	4b88      	ldr	r3, [pc, #544]	; (8002d54 <GPIO_Config+0x23c>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	4a87      	ldr	r2, [pc, #540]	; (8002d54 <GPIO_Config+0x23c>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3e:	e03a      	b.n	8002bb6 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	4a84      	ldr	r2, [pc, #528]	; (8002d58 <GPIO_Config+0x240>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d106      	bne.n	8002b58 <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 8002b4a:	4b82      	ldr	r3, [pc, #520]	; (8002d54 <GPIO_Config+0x23c>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	4a81      	ldr	r2, [pc, #516]	; (8002d54 <GPIO_Config+0x23c>)
 8002b50:	f043 0302 	orr.w	r3, r3, #2
 8002b54:	6313      	str	r3, [r2, #48]	; 0x30
 8002b56:	e02e      	b.n	8002bb6 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4a7f      	ldr	r2, [pc, #508]	; (8002d5c <GPIO_Config+0x244>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d106      	bne.n	8002b70 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 8002b62:	4b7c      	ldr	r3, [pc, #496]	; (8002d54 <GPIO_Config+0x23c>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	4a7b      	ldr	r2, [pc, #492]	; (8002d54 <GPIO_Config+0x23c>)
 8002b68:	f043 0304 	orr.w	r3, r3, #4
 8002b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6e:	e022      	b.n	8002bb6 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4a7a      	ldr	r2, [pc, #488]	; (8002d60 <GPIO_Config+0x248>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d106      	bne.n	8002b88 <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 8002b7a:	4b76      	ldr	r3, [pc, #472]	; (8002d54 <GPIO_Config+0x23c>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	4a75      	ldr	r2, [pc, #468]	; (8002d54 <GPIO_Config+0x23c>)
 8002b80:	f043 0308 	orr.w	r3, r3, #8
 8002b84:	6313      	str	r3, [r2, #48]	; 0x30
 8002b86:	e016      	b.n	8002bb6 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	4a75      	ldr	r2, [pc, #468]	; (8002d64 <GPIO_Config+0x24c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d106      	bne.n	8002ba0 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 8002b92:	4b70      	ldr	r3, [pc, #448]	; (8002d54 <GPIO_Config+0x23c>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a6f      	ldr	r2, [pc, #444]	; (8002d54 <GPIO_Config+0x23c>)
 8002b98:	f043 0310 	orr.w	r3, r3, #16
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	e00a      	b.n	8002bb6 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4a70      	ldr	r2, [pc, #448]	; (8002d68 <GPIO_Config+0x250>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d105      	bne.n	8002bb6 <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 8002baa:	4b6a      	ldr	r3, [pc, #424]	; (8002d54 <GPIO_Config+0x23c>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	4a69      	ldr	r2, [pc, #420]	; (8002d54 <GPIO_Config+0x23c>)
 8002bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb4:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	785b      	ldrb	r3, [r3, #1]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	2103      	movs	r1, #3
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	4619      	mov	r1, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	400a      	ands	r2, r1
 8002be4:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	6819      	ldr	r1, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	789b      	ldrb	r3, [r3, #2]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	4619      	mov	r1, r3
 8002c12:	2301      	movs	r3, #1
 8002c14:	408b      	lsls	r3, r1
 8002c16:	43db      	mvns	r3, r3
 8002c18:	4619      	mov	r1, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	400a      	ands	r2, r1
 8002c20:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	6859      	ldr	r1, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	78db      	ldrb	r3, [r3, #3]
 8002c36:	461a      	mov	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	2103      	movs	r1, #3
 8002c52:	fa01 f303 	lsl.w	r3, r1, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	4619      	mov	r1, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	400a      	ands	r2, r1
 8002c60:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	6899      	ldr	r1, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	791b      	ldrb	r3, [r3, #4]
 8002c76:	461a      	mov	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	2103      	movs	r1, #3
 8002c92:	fa01 f303 	lsl.w	r3, r1, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	4619      	mov	r1, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	400a      	ands	r2, r1
 8002ca0:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	68d9      	ldr	r1, [r3, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	785b      	ldrb	r3, [r3, #1]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d143      	bne.n	8002d42 <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b07      	cmp	r3, #7
 8002cc0:	d81f      	bhi.n	8002d02 <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	6a1a      	ldr	r2, [r3, #32]
 8002cd0:	210f      	movs	r1, #15
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	4619      	mov	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	400a      	ands	r2, r1
 8002ce2:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	6a1a      	ldr	r2, [r3, #32]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	795b      	ldrb	r3, [r3, #5]
 8002cee:	4619      	mov	r1, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8002d00:	e01f      	b.n	8002d42 <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	3b08      	subs	r3, #8
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d12:	210f      	movs	r1, #15
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	400a      	ands	r2, r1
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	795b      	ldrb	r3, [r3, #5]
 8002d30:	4619      	mov	r1, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	4619      	mov	r1, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002d42:	bf00      	nop
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40020000 	.word	0x40020000
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40020400 	.word	0x40020400
 8002d5c:	40020800 	.word	0x40020800
 8002d60:	40020c00 	.word	0x40020c00
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40021c00 	.word	0x40021c00

08002d6c <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	2301      	movs	r3, #1
 8002d82:	408b      	lsls	r3, r1
 8002d84:	4619      	mov	r1, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	404a      	eors	r2, r1
 8002d8c:	615a      	str	r2, [r3, #20]
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 8002da6:	4a39      	ldr	r2, [pc, #228]	; (8002e8c <configPLL+0xf0>)
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	2b31      	cmp	r3, #49	; 0x31
 8002db0:	d804      	bhi.n	8002dbc <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 8002db2:	4b37      	ldr	r3, [pc, #220]	; (8002e90 <configPLL+0xf4>)
 8002db4:	4a36      	ldr	r2, [pc, #216]	; (8002e90 <configPLL+0xf4>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	6093      	str	r3, [r2, #8]
 8002dba:	e005      	b.n	8002dc8 <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002dbc:	4b34      	ldr	r3, [pc, #208]	; (8002e90 <configPLL+0xf4>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4a33      	ldr	r2, [pc, #204]	; (8002e90 <configPLL+0xf4>)
 8002dc2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002dc6:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 8002dc8:	4b31      	ldr	r3, [pc, #196]	; (8002e90 <configPLL+0xf4>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	4a30      	ldr	r2, [pc, #192]	; (8002e90 <configPLL+0xf4>)
 8002dce:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002dd2:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 8002dd4:	4b2e      	ldr	r3, [pc, #184]	; (8002e90 <configPLL+0xf4>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	4a2d      	ldr	r2, [pc, #180]	; (8002e90 <configPLL+0xf4>)
 8002dda:	f043 0312 	orr.w	r3, r3, #18
 8002dde:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 8002de0:	4b2b      	ldr	r3, [pc, #172]	; (8002e90 <configPLL+0xf4>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	79fa      	ldrb	r2, [r7, #7]
 8002de6:	0092      	lsls	r2, r2, #2
 8002de8:	3a0e      	subs	r2, #14
 8002dea:	0192      	lsls	r2, r2, #6
 8002dec:	4611      	mov	r1, r2
 8002dee:	4a28      	ldr	r2, [pc, #160]	; (8002e90 <configPLL+0xf4>)
 8002df0:	430b      	orrs	r3, r1
 8002df2:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 8002df4:	4b26      	ldr	r3, [pc, #152]	; (8002e90 <configPLL+0xf4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4a25      	ldr	r2, [pc, #148]	; (8002e90 <configPLL+0xf4>)
 8002dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfe:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 8002e00:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <configPLL+0xf4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a22      	ldr	r2, [pc, #136]	; (8002e90 <configPLL+0xf4>)
 8002e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e0a:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8002e0c:	e000      	b.n	8002e10 <configPLL+0x74>
	{
		__NOP();
 8002e0e:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8002e10:	4b1f      	ldr	r3, [pc, #124]	; (8002e90 <configPLL+0xf4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f8      	beq.n	8002e0e <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	2b5a      	cmp	r3, #90	; 0x5a
 8002e20:	d909      	bls.n	8002e36 <configPLL+0x9a>
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	2b64      	cmp	r3, #100	; 0x64
 8002e26:	d806      	bhi.n	8002e36 <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8002e28:	4b1a      	ldr	r3, [pc, #104]	; (8002e94 <configPLL+0xf8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a19      	ldr	r2, [pc, #100]	; (8002e94 <configPLL+0xf8>)
 8002e2e:	f043 0303 	orr.w	r3, r3, #3
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	e01d      	b.n	8002e72 <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	2b40      	cmp	r3, #64	; 0x40
 8002e3a:	d909      	bls.n	8002e50 <configPLL+0xb4>
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	2b5a      	cmp	r3, #90	; 0x5a
 8002e40:	d806      	bhi.n	8002e50 <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 8002e42:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <configPLL+0xf8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a13      	ldr	r2, [pc, #76]	; (8002e94 <configPLL+0xf8>)
 8002e48:	f043 0302 	orr.w	r3, r3, #2
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e010      	b.n	8002e72 <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	2b1e      	cmp	r3, #30
 8002e54:	d909      	bls.n	8002e6a <configPLL+0xce>
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	2b40      	cmp	r3, #64	; 0x40
 8002e5a:	d806      	bhi.n	8002e6a <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 8002e5c:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <configPLL+0xf8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a0c      	ldr	r2, [pc, #48]	; (8002e94 <configPLL+0xf8>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	e003      	b.n	8002e72 <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <configPLL+0xf8>)
 8002e6c:	4a09      	ldr	r2, [pc, #36]	; (8002e94 <configPLL+0xf8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 8002e72:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <configPLL+0xf4>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	4a06      	ldr	r2, [pc, #24]	; (8002e90 <configPLL+0xf4>)
 8002e78:	f043 0302 	orr.w	r3, r3, #2
 8002e7c:	6093      	str	r3, [r2, #8]

}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000478 	.word	0x20000478
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40023c00 	.word	0x40023c00

08002e98 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <getConfigPLL+0x30>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d103      	bne.n	8002eb6 <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 8002eae:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <getConfigPLL+0x34>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	71fb      	strb	r3, [r7, #7]
 8002eb4:	e001      	b.n	8002eba <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 8002eb6:	2310      	movs	r3, #16
 8002eb8:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 8002eba:	79fb      	ldrb	r3, [r7, #7]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	20000478 	.word	0x20000478

08002ed0 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 8002ed6:	f7ff ffdf 	bl	8002e98 <getConfigPLL>
 8002eda:	4603      	mov	r3, r0
 8002edc:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 8002ede:	2300      	movs	r3, #0
 8002ee0:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 8002ee2:	79bb      	ldrb	r3, [r7, #6]
 8002ee4:	2b31      	cmp	r3, #49	; 0x31
 8002ee6:	d802      	bhi.n	8002eee <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 8002ee8:	79bb      	ldrb	r3, [r7, #6]
 8002eea:	71fb      	strb	r3, [r7, #7]
 8002eec:	e002      	b.n	8002ef4 <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 8002eee:	79bb      	ldrb	r3, [r7, #6]
 8002ef0:	089b      	lsrs	r3, r3, #2
 8002ef2:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <__NVIC_EnableIRQ>:
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	db0b      	blt.n	8002f2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	f003 021f 	and.w	r2, r3, #31
 8002f18:	4907      	ldr	r1, [pc, #28]	; (8002f38 <__NVIC_EnableIRQ+0x38>)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	2001      	movs	r0, #1
 8002f22:	fa00 f202 	lsl.w	r2, r0, r2
 8002f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	e000e100 	.word	0xe000e100

08002f3c <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4a8f      	ldr	r2, [pc, #572]	; (8003188 <USART_Config+0x24c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d107      	bne.n	8002f5e <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 8002f4e:	4b8f      	ldr	r3, [pc, #572]	; (800318c <USART_Config+0x250>)
 8002f50:	2210      	movs	r2, #16
 8002f52:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	4a8d      	ldr	r2, [pc, #564]	; (8003190 <USART_Config+0x254>)
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	e019      	b.n	8002f92 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	4a8c      	ldr	r2, [pc, #560]	; (8003194 <USART_Config+0x258>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d108      	bne.n	8002f7a <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 8002f68:	4b88      	ldr	r3, [pc, #544]	; (800318c <USART_Config+0x250>)
 8002f6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4a88      	ldr	r2, [pc, #544]	; (8003198 <USART_Config+0x25c>)
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	e00b      	b.n	8002f92 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	4a87      	ldr	r2, [pc, #540]	; (800319c <USART_Config+0x260>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d106      	bne.n	8002f92 <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 8002f84:	4b81      	ldr	r3, [pc, #516]	; (800318c <USART_Config+0x250>)
 8002f86:	2220      	movs	r2, #32
 8002f88:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	4a84      	ldr	r2, [pc, #528]	; (80031a0 <USART_Config+0x264>)
 8002f90:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2200      	movs	r2, #0
 8002f98:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	789b      	ldrb	r3, [r3, #2]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d03d      	beq.n	8003026 <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fc8:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fd8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fe8:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	789b      	ldrb	r3, [r3, #2]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d110      	bne.n	8003014 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003000:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	e018      	b.n	8003046 <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003022:	60da      	str	r2, [r3, #12]
 8003024:	e00f      	b.n	8003046 <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003034:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003044:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	78db      	ldrb	r3, [r3, #3]
 800304a:	2b03      	cmp	r3, #3
 800304c:	d84c      	bhi.n	80030e8 <USART_Config+0x1ac>
 800304e:	a201      	add	r2, pc, #4	; (adr r2, 8003054 <USART_Config+0x118>)
 8003050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003054:	08003065 	.word	0x08003065
 8003058:	08003083 	.word	0x08003083
 800305c:	080030a5 	.word	0x080030a5
 8003060:	080030c7 	.word	0x080030c7
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	691a      	ldr	r2, [r3, #16]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003072:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	6912      	ldr	r2, [r2, #16]
 800307e:	611a      	str	r2, [r3, #16]
		break;
 8003080:	e041      	b.n	8003106 <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003090:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030a0:	611a      	str	r2, [r3, #16]
		break;
 80030a2:	e030      	b.n	8003106 <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	691a      	ldr	r2, [r3, #16]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80030b2:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030c2:	611a      	str	r2, [r3, #16]
		break;
 80030c4:	e01f      	b.n	8003106 <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80030d4:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80030e4:	611a      	str	r2, [r3, #16]
		break;
 80030e6:	e00e      	b.n	8003106 <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80030f6:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	6912      	ldr	r2, [r2, #16]
 8003102:	611a      	str	r2, [r3, #16]
		break;
 8003104:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 8003106:	2300      	movs	r3, #0
 8003108:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	4a21      	ldr	r2, [pc, #132]	; (8003194 <USART_Config+0x258>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d104      	bne.n	800311e <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8003114:	f7ff fedc 	bl	8002ed0 <getClockAPB1>
 8003118:	4603      	mov	r3, r0
 800311a:	73fb      	strb	r3, [r7, #15]
 800311c:	e003      	b.n	8003126 <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 800311e:	f7ff febb 	bl	8002e98 <getConfigPLL>
 8003122:	4603      	mov	r3, r0
 8003124:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	785b      	ldrb	r3, [r3, #1]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10b      	bne.n	8003146 <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8003134:	4618      	mov	r0, r3
 8003136:	f000 f91f 	bl	8003378 <getValueBaudRate>
 800313a:	4603      	mov	r3, r0
 800313c:	461a      	mov	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	e02f      	b.n	80031a6 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	785b      	ldrb	r3, [r3, #1]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d10b      	bne.n	8003166 <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8003154:	4618      	mov	r0, r3
 8003156:	f000 f90f 	bl	8003378 <getValueBaudRate>
 800315a:	4603      	mov	r3, r0
 800315c:	461a      	mov	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	e01f      	b.n	80031a6 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	785b      	ldrb	r3, [r3, #1]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d11a      	bne.n	80031a4 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8003174:	4618      	mov	r0, r3
 8003176:	f000 f8ff 	bl	8003378 <getValueBaudRate>
 800317a:	4603      	mov	r3, r0
 800317c:	461a      	mov	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	e00f      	b.n	80031a6 <USART_Config+0x26a>
 8003186:	bf00      	nop
 8003188:	40011000 	.word	0x40011000
 800318c:	40023800 	.word	0x40023800
 8003190:	2000047c 	.word	0x2000047c
 8003194:	40004400 	.word	0x40004400
 8003198:	20000480 	.word	0x20000480
 800319c:	40011400 	.word	0x40011400
 80031a0:	20000484 	.word	0x20000484
	}
	else
	{
		__NOP();
 80031a4:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d866      	bhi.n	800327c <USART_Config+0x340>
 80031ae:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <USART_Config+0x278>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	080031c5 	.word	0x080031c5
 80031b8:	080031e7 	.word	0x080031e7
 80031bc:	08003209 	.word	0x08003209
 80031c0:	0800324b 	.word	0x0800324b
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f022 0208 	bic.w	r2, r2, #8
 80031d2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f042 0208 	orr.w	r2, r2, #8
 80031e2:	60da      	str	r2, [r3, #12]

		break;
 80031e4:	e063      	b.n	80032ae <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f022 0204 	bic.w	r2, r2, #4
 80031f4:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f042 0204 	orr.w	r2, r2, #4
 8003204:	60da      	str	r2, [r3, #12]

		break;
 8003206:	e052      	b.n	80032ae <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f022 0208 	bic.w	r2, r2, #8
 8003216:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f042 0208 	orr.w	r2, r2, #8
 8003226:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f022 0204 	bic.w	r2, r2, #4
 8003236:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f042 0204 	orr.w	r2, r2, #4
 8003246:	60da      	str	r2, [r3, #12]


		break;
 8003248:	e031      	b.n	80032ae <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003258:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f022 0208 	bic.w	r2, r2, #8
 8003268:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f022 0204 	bic.w	r2, r2, #4
 8003278:	60da      	str	r2, [r3, #12]
		break;
 800327a:	e018      	b.n	80032ae <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800328a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f022 0208 	bic.w	r2, r2, #8
 800329a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f022 0204 	bic.w	r2, r2, #4
 80032aa:	60da      	str	r2, [r3, #12]
		break;
 80032ac:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80032ae:	b672      	cpsid	i
}
 80032b0:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	791b      	ldrb	r3, [r3, #4]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d110      	bne.n	80032dc <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f022 0220 	bic.w	r2, r2, #32
 80032c8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f042 0220 	orr.w	r2, r2, #32
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	e007      	b.n	80032ec <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f022 0220 	bic.w	r2, r2, #32
 80032ea:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	791b      	ldrb	r3, [r3, #4]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d003      	beq.n	80032fc <USART_Config+0x3c0>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	795b      	ldrb	r3, [r3, #5]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d11a      	bne.n	8003332 <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	4a1a      	ldr	r2, [pc, #104]	; (800336c <USART_Config+0x430>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d103      	bne.n	800330e <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 8003306:	2025      	movs	r0, #37	; 0x25
 8003308:	f7ff fdfa 	bl	8002f00 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800330c:	e013      	b.n	8003336 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	4a17      	ldr	r2, [pc, #92]	; (8003370 <USART_Config+0x434>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d103      	bne.n	8003320 <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 8003318:	2026      	movs	r0, #38	; 0x26
 800331a:	f7ff fdf1 	bl	8002f00 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800331e:	e00a      	b.n	8003336 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	4a13      	ldr	r2, [pc, #76]	; (8003374 <USART_Config+0x438>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d105      	bne.n	8003336 <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 800332a:	2047      	movs	r0, #71	; 0x47
 800332c:	f7ff fde8 	bl	8002f00 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8003330:	e001      	b.n	8003336 <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 8003332:	bf00      	nop
 8003334:	e000      	b.n	8003338 <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8003336:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8003338:	b662      	cpsie	i
}
 800333a:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d00f      	beq.n	8003364 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003352:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003362:	60da      	str	r2, [r3, #12]
	}
}
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40011000 	.word	0x40011000
 8003370:	40004400 	.word	0x40004400
 8003374:	40011400 	.word	0x40011400

08003378 <getValueBaudRate>:

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 8003378:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800337c:	b086      	sub	sp, #24
 800337e:	af00      	add	r7, sp, #0
 8003380:	6039      	str	r1, [r7, #0]
 8003382:	4601      	mov	r1, r0
 8003384:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 8003386:	79f9      	ldrb	r1, [r7, #7]
 8003388:	2000      	movs	r0, #0
 800338a:	460a      	mov	r2, r1
 800338c:	4603      	mov	r3, r0
 800338e:	491f      	ldr	r1, [pc, #124]	; (800340c <getValueBaudRate+0x94>)
 8003390:	fb01 f003 	mul.w	r0, r1, r3
 8003394:	2102      	movs	r1, #2
 8003396:	fb02 f101 	mul.w	r1, r2, r1
 800339a:	4401      	add	r1, r0
 800339c:	481b      	ldr	r0, [pc, #108]	; (800340c <getValueBaudRate+0x94>)
 800339e:	fba2 4500 	umull	r4, r5, r2, r0
 80033a2:	194b      	adds	r3, r1, r5
 80033a4:	461d      	mov	r5, r3
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	2200      	movs	r2, #0
 80033ac:	4698      	mov	r8, r3
 80033ae:	4691      	mov	r9, r2
 80033b0:	4642      	mov	r2, r8
 80033b2:	464b      	mov	r3, r9
 80033b4:	4620      	mov	r0, r4
 80033b6:	4629      	mov	r1, r5
 80033b8:	f7fd fc6e 	bl	8000c98 <__aeabi_ldivmod>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4613      	mov	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	4a12      	ldr	r2, [pc, #72]	; (8003410 <getValueBaudRate+0x98>)
 80033c8:	fba2 2303 	umull	r2, r3, r2, r3
 80033cc:	0b5b      	lsrs	r3, r3, #13
 80033ce:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80033d6:	fb02 f303 	mul.w	r3, r2, r3
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80033e6:	4a0a      	ldr	r2, [pc, #40]	; (8003410 <getValueBaudRate+0x98>)
 80033e8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ec:	0a5b      	lsrs	r3, r3, #9
 80033ee:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	7afb      	ldrb	r3, [r7, #11]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	4313      	orrs	r3, r2
 80033fe:	813b      	strh	r3, [r7, #8]

    return value;
 8003400:	893b      	ldrh	r3, [r7, #8]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800340c:	540be400 	.word	0x540be400
 8003410:	d1b71759 	.word	0xd1b71759

08003414 <writeChar>:

//---------------Funciones para la transmision de datos------------------------------
//Funcion para escribir un solo char
void writeChar(USART_Handler_t *ptrUsartHandler, uint8_t datatoSend)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	70fb      	strb	r3, [r7, #3]
	//Verificamos que no se este enviando un mensaje
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8003420:	e000      	b.n	8003424 <writeChar+0x10>
	{
		__NOP();
 8003422:	bf00      	nop
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f7      	beq.n	8003422 <writeChar+0xe>
	}
	//Almacenamos un elemento char en el registro USART_DR
	ptrUsartHandler->ptrUSARTx->DR = datatoSend;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	605a      	str	r2, [r3, #4]

}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <writeMsg>:

//Funcion para escribir un string
void writeMsg(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	73fb      	strb	r3, [r7, #15]

	while(MsgtoSend[i] != '\0')
 8003454:	e00a      	b.n	800346c <writeMsg+0x26>
	{
		writeChar(ptrUsartHandlerString, MsgtoSend[i]);
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	4413      	add	r3, r2
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	4619      	mov	r1, r3
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff ffd7 	bl	8003414 <writeChar>
		i++;
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	3301      	adds	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
	while(MsgtoSend[i] != '\0')
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	4413      	add	r3, r2
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1ee      	bne.n	8003456 <writeMsg+0x10>
	}
}
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <getRxData>:
	}
}

//Funcion para leer un char
uint8_t getRxData(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
	return auxRxData;
 8003488:	4b03      	ldr	r3, [pc, #12]	; (8003498 <getRxData+0x14>)
 800348a:	781b      	ldrb	r3, [r3, #0]
}
 800348c:	4618      	mov	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	20000488 	.word	0x20000488

0800349c <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d10c      	bne.n	80034c8 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 80034c6:	e005      	b.n	80034d4 <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	60da      	str	r2, [r3, #12]
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <BasicUSART1_Callback>:


//Definimos las funciones para cuando se genera una interrupcion del USART1-2 y 6
__attribute__((weak)) void BasicUSART1_Callback()
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
	__NOP();
 80034e4:	bf00      	nop
}
 80034e6:	bf00      	nop
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <BasicUSART6_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART6_Callback()
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
	__NOP();
 80034f4:	bf00      	nop
}
 80034f6:	bf00      	nop
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 8003504:	4b37      	ldr	r3, [pc, #220]	; (80035e4 <USART1_IRQHandler+0xe4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 8003512:	4b34      	ldr	r3, [pc, #208]	; (80035e4 <USART1_IRQHandler+0xe4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	b2da      	uxtb	r2, r3
 800351a:	4b33      	ldr	r3, [pc, #204]	; (80035e8 <USART1_IRQHandler+0xe8>)
 800351c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 800351e:	f7ff ffdf 	bl	80034e0 <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 8003522:	e05d      	b.n	80035e0 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 8003524:	4b2f      	ldr	r3, [pc, #188]	; (80035e4 <USART1_IRQHandler+0xe4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352e:	2b00      	cmp	r3, #0
 8003530:	d055      	beq.n	80035de <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8003532:	4b2e      	ldr	r3, [pc, #184]	; (80035ec <USART1_IRQHandler+0xec>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10b      	bne.n	8003552 <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 800353a:	4b2d      	ldr	r3, [pc, #180]	; (80035f0 <USART1_IRQHandler+0xf0>)
 800353c:	781a      	ldrb	r2, [r3, #0]
 800353e:	4b29      	ldr	r3, [pc, #164]	; (80035e4 <USART1_IRQHandler+0xe4>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8003544:	4b27      	ldr	r3, [pc, #156]	; (80035e4 <USART1_IRQHandler+0xe4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2100      	movs	r1, #0
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff ffa6 	bl	800349c <interruptionTX>
}
 8003550:	e046      	b.n	80035e0 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8003552:	4b26      	ldr	r3, [pc, #152]	; (80035ec <USART1_IRQHandler+0xec>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d142      	bne.n	80035e0 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 800355a:	4b26      	ldr	r3, [pc, #152]	; (80035f4 <USART1_IRQHandler+0xf4>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	4b25      	ldr	r3, [pc, #148]	; (80035f8 <USART1_IRQHandler+0xf8>)
 8003562:	5c9b      	ldrb	r3, [r3, r2]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00e      	beq.n	8003586 <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 8003568:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <USART1_IRQHandler+0xf4>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <USART1_IRQHandler+0xf8>)
 8003570:	5c9a      	ldrb	r2, [r3, r2]
 8003572:	4b1c      	ldr	r3, [pc, #112]	; (80035e4 <USART1_IRQHandler+0xe4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	605a      	str	r2, [r3, #4]
				posChar++;
 8003578:	4b1e      	ldr	r3, [pc, #120]	; (80035f4 <USART1_IRQHandler+0xf4>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	3301      	adds	r3, #1
 800357e:	b2da      	uxtb	r2, r3
 8003580:	4b1c      	ldr	r3, [pc, #112]	; (80035f4 <USART1_IRQHandler+0xf4>)
 8003582:	701a      	strb	r2, [r3, #0]
}
 8003584:	e02c      	b.n	80035e0 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8003586:	4b1d      	ldr	r3, [pc, #116]	; (80035fc <USART1_IRQHandler+0xfc>)
 8003588:	781a      	ldrb	r2, [r3, #0]
 800358a:	4b1d      	ldr	r3, [pc, #116]	; (8003600 <USART1_IRQHandler+0x100>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d215      	bcs.n	80035be <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8003592:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <USART1_IRQHandler+0xfc>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	2364      	movs	r3, #100	; 0x64
 800359a:	fb02 f303 	mul.w	r3, r2, r3
 800359e:	4a19      	ldr	r2, [pc, #100]	; (8003604 <USART1_IRQHandler+0x104>)
 80035a0:	4413      	add	r3, r2
 80035a2:	4619      	mov	r1, r3
 80035a4:	4814      	ldr	r0, [pc, #80]	; (80035f8 <USART1_IRQHandler+0xf8>)
 80035a6:	f001 f993 	bl	80048d0 <siprintf>
					posChar = 0;
 80035aa:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <USART1_IRQHandler+0xf4>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 80035b0:	4b12      	ldr	r3, [pc, #72]	; (80035fc <USART1_IRQHandler+0xfc>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	3301      	adds	r3, #1
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	4b10      	ldr	r3, [pc, #64]	; (80035fc <USART1_IRQHandler+0xfc>)
 80035ba:	701a      	strb	r2, [r3, #0]
}
 80035bc:	e010      	b.n	80035e0 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 80035be:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <USART1_IRQHandler+0xe4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2100      	movs	r1, #0
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff ff69 	bl	800349c <interruptionTX>
					posChar = 0;
 80035ca:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <USART1_IRQHandler+0xf4>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 80035d0:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <USART1_IRQHandler+0xfc>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 80035d6:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <USART1_IRQHandler+0x100>)
 80035d8:	2200      	movs	r2, #0
 80035da:	701a      	strb	r2, [r3, #0]
}
 80035dc:	e000      	b.n	80035e0 <USART1_IRQHandler+0xe0>
		__NOP();
 80035de:	bf00      	nop
}
 80035e0:	bf00      	nop
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	2000047c 	.word	0x2000047c
 80035e8:	20000488 	.word	0x20000488
 80035ec:	20000cc3 	.word	0x20000cc3
 80035f0:	20000489 	.word	0x20000489
 80035f4:	20000cc2 	.word	0x20000cc2
 80035f8:	2000048c 	.word	0x2000048c
 80035fc:	20000cc1 	.word	0x20000cc1
 8003600:	20000cc0 	.word	0x20000cc0
 8003604:	200004f0 	.word	0x200004f0

08003608 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 800360c:	4b37      	ldr	r3, [pc, #220]	; (80036ec <USART2_IRQHandler+0xe4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0320 	and.w	r3, r3, #32
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 800361a:	4b34      	ldr	r3, [pc, #208]	; (80036ec <USART2_IRQHandler+0xe4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	b2da      	uxtb	r2, r3
 8003622:	4b33      	ldr	r3, [pc, #204]	; (80036f0 <USART2_IRQHandler+0xe8>)
 8003624:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 8003626:	f7fe fde5 	bl	80021f4 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 800362a:	e05d      	b.n	80036e8 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 800362c:	4b2f      	ldr	r3, [pc, #188]	; (80036ec <USART2_IRQHandler+0xe4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003636:	2b00      	cmp	r3, #0
 8003638:	d055      	beq.n	80036e6 <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800363a:	4b2e      	ldr	r3, [pc, #184]	; (80036f4 <USART2_IRQHandler+0xec>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10b      	bne.n	800365a <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 8003642:	4b2d      	ldr	r3, [pc, #180]	; (80036f8 <USART2_IRQHandler+0xf0>)
 8003644:	781a      	ldrb	r2, [r3, #0]
 8003646:	4b29      	ldr	r3, [pc, #164]	; (80036ec <USART2_IRQHandler+0xe4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 800364c:	4b27      	ldr	r3, [pc, #156]	; (80036ec <USART2_IRQHandler+0xe4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2100      	movs	r1, #0
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff ff22 	bl	800349c <interruptionTX>
}
 8003658:	e046      	b.n	80036e8 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800365a:	4b26      	ldr	r3, [pc, #152]	; (80036f4 <USART2_IRQHandler+0xec>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d142      	bne.n	80036e8 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8003662:	4b26      	ldr	r3, [pc, #152]	; (80036fc <USART2_IRQHandler+0xf4>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	4b25      	ldr	r3, [pc, #148]	; (8003700 <USART2_IRQHandler+0xf8>)
 800366a:	5c9b      	ldrb	r3, [r3, r2]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00e      	beq.n	800368e <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 8003670:	4b22      	ldr	r3, [pc, #136]	; (80036fc <USART2_IRQHandler+0xf4>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	4b22      	ldr	r3, [pc, #136]	; (8003700 <USART2_IRQHandler+0xf8>)
 8003678:	5c9a      	ldrb	r2, [r3, r2]
 800367a:	4b1c      	ldr	r3, [pc, #112]	; (80036ec <USART2_IRQHandler+0xe4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	605a      	str	r2, [r3, #4]
				posChar++;
 8003680:	4b1e      	ldr	r3, [pc, #120]	; (80036fc <USART2_IRQHandler+0xf4>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	3301      	adds	r3, #1
 8003686:	b2da      	uxtb	r2, r3
 8003688:	4b1c      	ldr	r3, [pc, #112]	; (80036fc <USART2_IRQHandler+0xf4>)
 800368a:	701a      	strb	r2, [r3, #0]
}
 800368c:	e02c      	b.n	80036e8 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 800368e:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <USART2_IRQHandler+0xfc>)
 8003690:	781a      	ldrb	r2, [r3, #0]
 8003692:	4b1d      	ldr	r3, [pc, #116]	; (8003708 <USART2_IRQHandler+0x100>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d215      	bcs.n	80036c6 <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800369a:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <USART2_IRQHandler+0xfc>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	2364      	movs	r3, #100	; 0x64
 80036a2:	fb02 f303 	mul.w	r3, r2, r3
 80036a6:	4a19      	ldr	r2, [pc, #100]	; (800370c <USART2_IRQHandler+0x104>)
 80036a8:	4413      	add	r3, r2
 80036aa:	4619      	mov	r1, r3
 80036ac:	4814      	ldr	r0, [pc, #80]	; (8003700 <USART2_IRQHandler+0xf8>)
 80036ae:	f001 f90f 	bl	80048d0 <siprintf>
					posChar = 0;
 80036b2:	4b12      	ldr	r3, [pc, #72]	; (80036fc <USART2_IRQHandler+0xf4>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 80036b8:	4b12      	ldr	r3, [pc, #72]	; (8003704 <USART2_IRQHandler+0xfc>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	3301      	adds	r3, #1
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	4b10      	ldr	r3, [pc, #64]	; (8003704 <USART2_IRQHandler+0xfc>)
 80036c2:	701a      	strb	r2, [r3, #0]
}
 80036c4:	e010      	b.n	80036e8 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 80036c6:	4b09      	ldr	r3, [pc, #36]	; (80036ec <USART2_IRQHandler+0xe4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff fee5 	bl	800349c <interruptionTX>
					posChar = 0;
 80036d2:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <USART2_IRQHandler+0xf4>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 80036d8:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <USART2_IRQHandler+0xfc>)
 80036da:	2200      	movs	r2, #0
 80036dc:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 80036de:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <USART2_IRQHandler+0x100>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]
}
 80036e4:	e000      	b.n	80036e8 <USART2_IRQHandler+0xe0>
		__NOP();
 80036e6:	bf00      	nop
}
 80036e8:	bf00      	nop
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20000480 	.word	0x20000480
 80036f0:	20000488 	.word	0x20000488
 80036f4:	20000cc3 	.word	0x20000cc3
 80036f8:	20000489 	.word	0x20000489
 80036fc:	20000cc2 	.word	0x20000cc2
 8003700:	2000048c 	.word	0x2000048c
 8003704:	20000cc1 	.word	0x20000cc1
 8003708:	20000cc0 	.word	0x20000cc0
 800370c:	200004f0 	.word	0x200004f0

08003710 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 8003714:	4b37      	ldr	r3, [pc, #220]	; (80037f4 <USART6_IRQHandler+0xe4>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 8003722:	4b34      	ldr	r3, [pc, #208]	; (80037f4 <USART6_IRQHandler+0xe4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	b2da      	uxtb	r2, r3
 800372a:	4b33      	ldr	r3, [pc, #204]	; (80037f8 <USART6_IRQHandler+0xe8>)
 800372c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 800372e:	f7ff fedf 	bl	80034f0 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 8003732:	e05d      	b.n	80037f0 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 8003734:	4b2f      	ldr	r3, [pc, #188]	; (80037f4 <USART6_IRQHandler+0xe4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373e:	2b00      	cmp	r3, #0
 8003740:	d055      	beq.n	80037ee <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8003742:	4b2e      	ldr	r3, [pc, #184]	; (80037fc <USART6_IRQHandler+0xec>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10b      	bne.n	8003762 <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 800374a:	4b2d      	ldr	r3, [pc, #180]	; (8003800 <USART6_IRQHandler+0xf0>)
 800374c:	781a      	ldrb	r2, [r3, #0]
 800374e:	4b29      	ldr	r3, [pc, #164]	; (80037f4 <USART6_IRQHandler+0xe4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8003754:	4b27      	ldr	r3, [pc, #156]	; (80037f4 <USART6_IRQHandler+0xe4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff fe9e 	bl	800349c <interruptionTX>
}
 8003760:	e046      	b.n	80037f0 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8003762:	4b26      	ldr	r3, [pc, #152]	; (80037fc <USART6_IRQHandler+0xec>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d142      	bne.n	80037f0 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 800376a:	4b26      	ldr	r3, [pc, #152]	; (8003804 <USART6_IRQHandler+0xf4>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	4b25      	ldr	r3, [pc, #148]	; (8003808 <USART6_IRQHandler+0xf8>)
 8003772:	5c9b      	ldrb	r3, [r3, r2]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00e      	beq.n	8003796 <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 8003778:	4b22      	ldr	r3, [pc, #136]	; (8003804 <USART6_IRQHandler+0xf4>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	4b22      	ldr	r3, [pc, #136]	; (8003808 <USART6_IRQHandler+0xf8>)
 8003780:	5c9a      	ldrb	r2, [r3, r2]
 8003782:	4b1c      	ldr	r3, [pc, #112]	; (80037f4 <USART6_IRQHandler+0xe4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	605a      	str	r2, [r3, #4]
				posChar++;
 8003788:	4b1e      	ldr	r3, [pc, #120]	; (8003804 <USART6_IRQHandler+0xf4>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	3301      	adds	r3, #1
 800378e:	b2da      	uxtb	r2, r3
 8003790:	4b1c      	ldr	r3, [pc, #112]	; (8003804 <USART6_IRQHandler+0xf4>)
 8003792:	701a      	strb	r2, [r3, #0]
}
 8003794:	e02c      	b.n	80037f0 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8003796:	4b1d      	ldr	r3, [pc, #116]	; (800380c <USART6_IRQHandler+0xfc>)
 8003798:	781a      	ldrb	r2, [r3, #0]
 800379a:	4b1d      	ldr	r3, [pc, #116]	; (8003810 <USART6_IRQHandler+0x100>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d215      	bcs.n	80037ce <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80037a2:	4b1a      	ldr	r3, [pc, #104]	; (800380c <USART6_IRQHandler+0xfc>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	461a      	mov	r2, r3
 80037a8:	2364      	movs	r3, #100	; 0x64
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	4a19      	ldr	r2, [pc, #100]	; (8003814 <USART6_IRQHandler+0x104>)
 80037b0:	4413      	add	r3, r2
 80037b2:	4619      	mov	r1, r3
 80037b4:	4814      	ldr	r0, [pc, #80]	; (8003808 <USART6_IRQHandler+0xf8>)
 80037b6:	f001 f88b 	bl	80048d0 <siprintf>
					posChar = 0;
 80037ba:	4b12      	ldr	r3, [pc, #72]	; (8003804 <USART6_IRQHandler+0xf4>)
 80037bc:	2200      	movs	r2, #0
 80037be:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 80037c0:	4b12      	ldr	r3, [pc, #72]	; (800380c <USART6_IRQHandler+0xfc>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	3301      	adds	r3, #1
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	4b10      	ldr	r3, [pc, #64]	; (800380c <USART6_IRQHandler+0xfc>)
 80037ca:	701a      	strb	r2, [r3, #0]
}
 80037cc:	e010      	b.n	80037f0 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 80037ce:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <USART6_IRQHandler+0xe4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2100      	movs	r1, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff fe61 	bl	800349c <interruptionTX>
					posChar = 0;
 80037da:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <USART6_IRQHandler+0xf4>)
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 80037e0:	4b0a      	ldr	r3, [pc, #40]	; (800380c <USART6_IRQHandler+0xfc>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 80037e6:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <USART6_IRQHandler+0x100>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	701a      	strb	r2, [r3, #0]
}
 80037ec:	e000      	b.n	80037f0 <USART6_IRQHandler+0xe0>
		__NOP();
 80037ee:	bf00      	nop
}
 80037f0:	bf00      	nop
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20000484 	.word	0x20000484
 80037f8:	20000488 	.word	0x20000488
 80037fc:	20000cc3 	.word	0x20000cc3
 8003800:	20000489 	.word	0x20000489
 8003804:	20000cc2 	.word	0x20000cc2
 8003808:	2000048c 	.word	0x2000048c
 800380c:	20000cc1 	.word	0x20000cc1
 8003810:	20000cc0 	.word	0x20000cc0
 8003814:	200004f0 	.word	0x200004f0

08003818 <atof>:
 8003818:	2100      	movs	r1, #0
 800381a:	f001 bea1 	b.w	8005560 <strtod>

0800381e <atoi>:
 800381e:	220a      	movs	r2, #10
 8003820:	2100      	movs	r1, #0
 8003822:	f001 bf2d 	b.w	8005680 <strtol>
	...

08003828 <__errno>:
 8003828:	4b01      	ldr	r3, [pc, #4]	; (8003830 <__errno+0x8>)
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	20000014 	.word	0x20000014

08003834 <exit>:
 8003834:	b508      	push	{r3, lr}
 8003836:	4b07      	ldr	r3, [pc, #28]	; (8003854 <exit+0x20>)
 8003838:	4604      	mov	r4, r0
 800383a:	b113      	cbz	r3, 8003842 <exit+0xe>
 800383c:	2100      	movs	r1, #0
 800383e:	f3af 8000 	nop.w
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <exit+0x24>)
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003848:	b103      	cbz	r3, 800384c <exit+0x18>
 800384a:	4798      	blx	r3
 800384c:	4620      	mov	r0, r4
 800384e:	f7fe ff20 	bl	8002692 <_exit>
 8003852:	bf00      	nop
 8003854:	00000000 	.word	0x00000000
 8003858:	08008afc 	.word	0x08008afc

0800385c <__libc_init_array>:
 800385c:	b570      	push	{r4, r5, r6, lr}
 800385e:	4d0d      	ldr	r5, [pc, #52]	; (8003894 <__libc_init_array+0x38>)
 8003860:	4c0d      	ldr	r4, [pc, #52]	; (8003898 <__libc_init_array+0x3c>)
 8003862:	1b64      	subs	r4, r4, r5
 8003864:	10a4      	asrs	r4, r4, #2
 8003866:	2600      	movs	r6, #0
 8003868:	42a6      	cmp	r6, r4
 800386a:	d109      	bne.n	8003880 <__libc_init_array+0x24>
 800386c:	4d0b      	ldr	r5, [pc, #44]	; (800389c <__libc_init_array+0x40>)
 800386e:	4c0c      	ldr	r4, [pc, #48]	; (80038a0 <__libc_init_array+0x44>)
 8003870:	f005 f8f0 	bl	8008a54 <_init>
 8003874:	1b64      	subs	r4, r4, r5
 8003876:	10a4      	asrs	r4, r4, #2
 8003878:	2600      	movs	r6, #0
 800387a:	42a6      	cmp	r6, r4
 800387c:	d105      	bne.n	800388a <__libc_init_array+0x2e>
 800387e:	bd70      	pop	{r4, r5, r6, pc}
 8003880:	f855 3b04 	ldr.w	r3, [r5], #4
 8003884:	4798      	blx	r3
 8003886:	3601      	adds	r6, #1
 8003888:	e7ee      	b.n	8003868 <__libc_init_array+0xc>
 800388a:	f855 3b04 	ldr.w	r3, [r5], #4
 800388e:	4798      	blx	r3
 8003890:	3601      	adds	r6, #1
 8003892:	e7f2      	b.n	800387a <__libc_init_array+0x1e>
 8003894:	08008fb4 	.word	0x08008fb4
 8003898:	08008fb4 	.word	0x08008fb4
 800389c:	08008fb4 	.word	0x08008fb4
 80038a0:	08008fb8 	.word	0x08008fb8

080038a4 <malloc>:
 80038a4:	4b02      	ldr	r3, [pc, #8]	; (80038b0 <malloc+0xc>)
 80038a6:	4601      	mov	r1, r0
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	f000 b87f 	b.w	80039ac <_malloc_r>
 80038ae:	bf00      	nop
 80038b0:	20000014 	.word	0x20000014

080038b4 <free>:
 80038b4:	4b02      	ldr	r3, [pc, #8]	; (80038c0 <free+0xc>)
 80038b6:	4601      	mov	r1, r0
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	f000 b80b 	b.w	80038d4 <_free_r>
 80038be:	bf00      	nop
 80038c0:	20000014 	.word	0x20000014

080038c4 <memset>:
 80038c4:	4402      	add	r2, r0
 80038c6:	4603      	mov	r3, r0
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d100      	bne.n	80038ce <memset+0xa>
 80038cc:	4770      	bx	lr
 80038ce:	f803 1b01 	strb.w	r1, [r3], #1
 80038d2:	e7f9      	b.n	80038c8 <memset+0x4>

080038d4 <_free_r>:
 80038d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038d6:	2900      	cmp	r1, #0
 80038d8:	d044      	beq.n	8003964 <_free_r+0x90>
 80038da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038de:	9001      	str	r0, [sp, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f1a1 0404 	sub.w	r4, r1, #4
 80038e6:	bfb8      	it	lt
 80038e8:	18e4      	addlt	r4, r4, r3
 80038ea:	f003 fbc1 	bl	8007070 <__malloc_lock>
 80038ee:	4a1e      	ldr	r2, [pc, #120]	; (8003968 <_free_r+0x94>)
 80038f0:	9801      	ldr	r0, [sp, #4]
 80038f2:	6813      	ldr	r3, [r2, #0]
 80038f4:	b933      	cbnz	r3, 8003904 <_free_r+0x30>
 80038f6:	6063      	str	r3, [r4, #4]
 80038f8:	6014      	str	r4, [r2, #0]
 80038fa:	b003      	add	sp, #12
 80038fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003900:	f003 bbbc 	b.w	800707c <__malloc_unlock>
 8003904:	42a3      	cmp	r3, r4
 8003906:	d908      	bls.n	800391a <_free_r+0x46>
 8003908:	6825      	ldr	r5, [r4, #0]
 800390a:	1961      	adds	r1, r4, r5
 800390c:	428b      	cmp	r3, r1
 800390e:	bf01      	itttt	eq
 8003910:	6819      	ldreq	r1, [r3, #0]
 8003912:	685b      	ldreq	r3, [r3, #4]
 8003914:	1949      	addeq	r1, r1, r5
 8003916:	6021      	streq	r1, [r4, #0]
 8003918:	e7ed      	b.n	80038f6 <_free_r+0x22>
 800391a:	461a      	mov	r2, r3
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	b10b      	cbz	r3, 8003924 <_free_r+0x50>
 8003920:	42a3      	cmp	r3, r4
 8003922:	d9fa      	bls.n	800391a <_free_r+0x46>
 8003924:	6811      	ldr	r1, [r2, #0]
 8003926:	1855      	adds	r5, r2, r1
 8003928:	42a5      	cmp	r5, r4
 800392a:	d10b      	bne.n	8003944 <_free_r+0x70>
 800392c:	6824      	ldr	r4, [r4, #0]
 800392e:	4421      	add	r1, r4
 8003930:	1854      	adds	r4, r2, r1
 8003932:	42a3      	cmp	r3, r4
 8003934:	6011      	str	r1, [r2, #0]
 8003936:	d1e0      	bne.n	80038fa <_free_r+0x26>
 8003938:	681c      	ldr	r4, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	6053      	str	r3, [r2, #4]
 800393e:	4421      	add	r1, r4
 8003940:	6011      	str	r1, [r2, #0]
 8003942:	e7da      	b.n	80038fa <_free_r+0x26>
 8003944:	d902      	bls.n	800394c <_free_r+0x78>
 8003946:	230c      	movs	r3, #12
 8003948:	6003      	str	r3, [r0, #0]
 800394a:	e7d6      	b.n	80038fa <_free_r+0x26>
 800394c:	6825      	ldr	r5, [r4, #0]
 800394e:	1961      	adds	r1, r4, r5
 8003950:	428b      	cmp	r3, r1
 8003952:	bf04      	itt	eq
 8003954:	6819      	ldreq	r1, [r3, #0]
 8003956:	685b      	ldreq	r3, [r3, #4]
 8003958:	6063      	str	r3, [r4, #4]
 800395a:	bf04      	itt	eq
 800395c:	1949      	addeq	r1, r1, r5
 800395e:	6021      	streq	r1, [r4, #0]
 8003960:	6054      	str	r4, [r2, #4]
 8003962:	e7ca      	b.n	80038fa <_free_r+0x26>
 8003964:	b003      	add	sp, #12
 8003966:	bd30      	pop	{r4, r5, pc}
 8003968:	20000cc4 	.word	0x20000cc4

0800396c <sbrk_aligned>:
 800396c:	b570      	push	{r4, r5, r6, lr}
 800396e:	4e0e      	ldr	r6, [pc, #56]	; (80039a8 <sbrk_aligned+0x3c>)
 8003970:	460c      	mov	r4, r1
 8003972:	6831      	ldr	r1, [r6, #0]
 8003974:	4605      	mov	r5, r0
 8003976:	b911      	cbnz	r1, 800397e <sbrk_aligned+0x12>
 8003978:	f000 ff94 	bl	80048a4 <_sbrk_r>
 800397c:	6030      	str	r0, [r6, #0]
 800397e:	4621      	mov	r1, r4
 8003980:	4628      	mov	r0, r5
 8003982:	f000 ff8f 	bl	80048a4 <_sbrk_r>
 8003986:	1c43      	adds	r3, r0, #1
 8003988:	d00a      	beq.n	80039a0 <sbrk_aligned+0x34>
 800398a:	1cc4      	adds	r4, r0, #3
 800398c:	f024 0403 	bic.w	r4, r4, #3
 8003990:	42a0      	cmp	r0, r4
 8003992:	d007      	beq.n	80039a4 <sbrk_aligned+0x38>
 8003994:	1a21      	subs	r1, r4, r0
 8003996:	4628      	mov	r0, r5
 8003998:	f000 ff84 	bl	80048a4 <_sbrk_r>
 800399c:	3001      	adds	r0, #1
 800399e:	d101      	bne.n	80039a4 <sbrk_aligned+0x38>
 80039a0:	f04f 34ff 	mov.w	r4, #4294967295
 80039a4:	4620      	mov	r0, r4
 80039a6:	bd70      	pop	{r4, r5, r6, pc}
 80039a8:	20000cc8 	.word	0x20000cc8

080039ac <_malloc_r>:
 80039ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039b0:	1ccd      	adds	r5, r1, #3
 80039b2:	f025 0503 	bic.w	r5, r5, #3
 80039b6:	3508      	adds	r5, #8
 80039b8:	2d0c      	cmp	r5, #12
 80039ba:	bf38      	it	cc
 80039bc:	250c      	movcc	r5, #12
 80039be:	2d00      	cmp	r5, #0
 80039c0:	4607      	mov	r7, r0
 80039c2:	db01      	blt.n	80039c8 <_malloc_r+0x1c>
 80039c4:	42a9      	cmp	r1, r5
 80039c6:	d905      	bls.n	80039d4 <_malloc_r+0x28>
 80039c8:	230c      	movs	r3, #12
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	2600      	movs	r6, #0
 80039ce:	4630      	mov	r0, r6
 80039d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039d4:	4e2e      	ldr	r6, [pc, #184]	; (8003a90 <_malloc_r+0xe4>)
 80039d6:	f003 fb4b 	bl	8007070 <__malloc_lock>
 80039da:	6833      	ldr	r3, [r6, #0]
 80039dc:	461c      	mov	r4, r3
 80039de:	bb34      	cbnz	r4, 8003a2e <_malloc_r+0x82>
 80039e0:	4629      	mov	r1, r5
 80039e2:	4638      	mov	r0, r7
 80039e4:	f7ff ffc2 	bl	800396c <sbrk_aligned>
 80039e8:	1c43      	adds	r3, r0, #1
 80039ea:	4604      	mov	r4, r0
 80039ec:	d14d      	bne.n	8003a8a <_malloc_r+0xde>
 80039ee:	6834      	ldr	r4, [r6, #0]
 80039f0:	4626      	mov	r6, r4
 80039f2:	2e00      	cmp	r6, #0
 80039f4:	d140      	bne.n	8003a78 <_malloc_r+0xcc>
 80039f6:	6823      	ldr	r3, [r4, #0]
 80039f8:	4631      	mov	r1, r6
 80039fa:	4638      	mov	r0, r7
 80039fc:	eb04 0803 	add.w	r8, r4, r3
 8003a00:	f000 ff50 	bl	80048a4 <_sbrk_r>
 8003a04:	4580      	cmp	r8, r0
 8003a06:	d13a      	bne.n	8003a7e <_malloc_r+0xd2>
 8003a08:	6821      	ldr	r1, [r4, #0]
 8003a0a:	3503      	adds	r5, #3
 8003a0c:	1a6d      	subs	r5, r5, r1
 8003a0e:	f025 0503 	bic.w	r5, r5, #3
 8003a12:	3508      	adds	r5, #8
 8003a14:	2d0c      	cmp	r5, #12
 8003a16:	bf38      	it	cc
 8003a18:	250c      	movcc	r5, #12
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	4638      	mov	r0, r7
 8003a1e:	f7ff ffa5 	bl	800396c <sbrk_aligned>
 8003a22:	3001      	adds	r0, #1
 8003a24:	d02b      	beq.n	8003a7e <_malloc_r+0xd2>
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	442b      	add	r3, r5
 8003a2a:	6023      	str	r3, [r4, #0]
 8003a2c:	e00e      	b.n	8003a4c <_malloc_r+0xa0>
 8003a2e:	6822      	ldr	r2, [r4, #0]
 8003a30:	1b52      	subs	r2, r2, r5
 8003a32:	d41e      	bmi.n	8003a72 <_malloc_r+0xc6>
 8003a34:	2a0b      	cmp	r2, #11
 8003a36:	d916      	bls.n	8003a66 <_malloc_r+0xba>
 8003a38:	1961      	adds	r1, r4, r5
 8003a3a:	42a3      	cmp	r3, r4
 8003a3c:	6025      	str	r5, [r4, #0]
 8003a3e:	bf18      	it	ne
 8003a40:	6059      	strne	r1, [r3, #4]
 8003a42:	6863      	ldr	r3, [r4, #4]
 8003a44:	bf08      	it	eq
 8003a46:	6031      	streq	r1, [r6, #0]
 8003a48:	5162      	str	r2, [r4, r5]
 8003a4a:	604b      	str	r3, [r1, #4]
 8003a4c:	4638      	mov	r0, r7
 8003a4e:	f104 060b 	add.w	r6, r4, #11
 8003a52:	f003 fb13 	bl	800707c <__malloc_unlock>
 8003a56:	f026 0607 	bic.w	r6, r6, #7
 8003a5a:	1d23      	adds	r3, r4, #4
 8003a5c:	1af2      	subs	r2, r6, r3
 8003a5e:	d0b6      	beq.n	80039ce <_malloc_r+0x22>
 8003a60:	1b9b      	subs	r3, r3, r6
 8003a62:	50a3      	str	r3, [r4, r2]
 8003a64:	e7b3      	b.n	80039ce <_malloc_r+0x22>
 8003a66:	6862      	ldr	r2, [r4, #4]
 8003a68:	42a3      	cmp	r3, r4
 8003a6a:	bf0c      	ite	eq
 8003a6c:	6032      	streq	r2, [r6, #0]
 8003a6e:	605a      	strne	r2, [r3, #4]
 8003a70:	e7ec      	b.n	8003a4c <_malloc_r+0xa0>
 8003a72:	4623      	mov	r3, r4
 8003a74:	6864      	ldr	r4, [r4, #4]
 8003a76:	e7b2      	b.n	80039de <_malloc_r+0x32>
 8003a78:	4634      	mov	r4, r6
 8003a7a:	6876      	ldr	r6, [r6, #4]
 8003a7c:	e7b9      	b.n	80039f2 <_malloc_r+0x46>
 8003a7e:	230c      	movs	r3, #12
 8003a80:	603b      	str	r3, [r7, #0]
 8003a82:	4638      	mov	r0, r7
 8003a84:	f003 fafa 	bl	800707c <__malloc_unlock>
 8003a88:	e7a1      	b.n	80039ce <_malloc_r+0x22>
 8003a8a:	6025      	str	r5, [r4, #0]
 8003a8c:	e7de      	b.n	8003a4c <_malloc_r+0xa0>
 8003a8e:	bf00      	nop
 8003a90:	20000cc4 	.word	0x20000cc4

08003a94 <__cvt>:
 8003a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a98:	ec55 4b10 	vmov	r4, r5, d0
 8003a9c:	2d00      	cmp	r5, #0
 8003a9e:	460e      	mov	r6, r1
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	462b      	mov	r3, r5
 8003aa4:	bfbb      	ittet	lt
 8003aa6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003aaa:	461d      	movlt	r5, r3
 8003aac:	2300      	movge	r3, #0
 8003aae:	232d      	movlt	r3, #45	; 0x2d
 8003ab0:	700b      	strb	r3, [r1, #0]
 8003ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ab4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003ab8:	4691      	mov	r9, r2
 8003aba:	f023 0820 	bic.w	r8, r3, #32
 8003abe:	bfbc      	itt	lt
 8003ac0:	4622      	movlt	r2, r4
 8003ac2:	4614      	movlt	r4, r2
 8003ac4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ac8:	d005      	beq.n	8003ad6 <__cvt+0x42>
 8003aca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003ace:	d100      	bne.n	8003ad2 <__cvt+0x3e>
 8003ad0:	3601      	adds	r6, #1
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	e000      	b.n	8003ad8 <__cvt+0x44>
 8003ad6:	2103      	movs	r1, #3
 8003ad8:	ab03      	add	r3, sp, #12
 8003ada:	9301      	str	r3, [sp, #4]
 8003adc:	ab02      	add	r3, sp, #8
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	ec45 4b10 	vmov	d0, r4, r5
 8003ae4:	4653      	mov	r3, sl
 8003ae6:	4632      	mov	r2, r6
 8003ae8:	f001 ff22 	bl	8005930 <_dtoa_r>
 8003aec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003af0:	4607      	mov	r7, r0
 8003af2:	d102      	bne.n	8003afa <__cvt+0x66>
 8003af4:	f019 0f01 	tst.w	r9, #1
 8003af8:	d022      	beq.n	8003b40 <__cvt+0xac>
 8003afa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003afe:	eb07 0906 	add.w	r9, r7, r6
 8003b02:	d110      	bne.n	8003b26 <__cvt+0x92>
 8003b04:	783b      	ldrb	r3, [r7, #0]
 8003b06:	2b30      	cmp	r3, #48	; 0x30
 8003b08:	d10a      	bne.n	8003b20 <__cvt+0x8c>
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	4620      	mov	r0, r4
 8003b10:	4629      	mov	r1, r5
 8003b12:	f7fc ffe1 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b16:	b918      	cbnz	r0, 8003b20 <__cvt+0x8c>
 8003b18:	f1c6 0601 	rsb	r6, r6, #1
 8003b1c:	f8ca 6000 	str.w	r6, [sl]
 8003b20:	f8da 3000 	ldr.w	r3, [sl]
 8003b24:	4499      	add	r9, r3
 8003b26:	2200      	movs	r2, #0
 8003b28:	2300      	movs	r3, #0
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	4629      	mov	r1, r5
 8003b2e:	f7fc ffd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b32:	b108      	cbz	r0, 8003b38 <__cvt+0xa4>
 8003b34:	f8cd 900c 	str.w	r9, [sp, #12]
 8003b38:	2230      	movs	r2, #48	; 0x30
 8003b3a:	9b03      	ldr	r3, [sp, #12]
 8003b3c:	454b      	cmp	r3, r9
 8003b3e:	d307      	bcc.n	8003b50 <__cvt+0xbc>
 8003b40:	9b03      	ldr	r3, [sp, #12]
 8003b42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b44:	1bdb      	subs	r3, r3, r7
 8003b46:	4638      	mov	r0, r7
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	b004      	add	sp, #16
 8003b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b50:	1c59      	adds	r1, r3, #1
 8003b52:	9103      	str	r1, [sp, #12]
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	e7f0      	b.n	8003b3a <__cvt+0xa6>

08003b58 <__exponent>:
 8003b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2900      	cmp	r1, #0
 8003b5e:	bfb8      	it	lt
 8003b60:	4249      	neglt	r1, r1
 8003b62:	f803 2b02 	strb.w	r2, [r3], #2
 8003b66:	bfb4      	ite	lt
 8003b68:	222d      	movlt	r2, #45	; 0x2d
 8003b6a:	222b      	movge	r2, #43	; 0x2b
 8003b6c:	2909      	cmp	r1, #9
 8003b6e:	7042      	strb	r2, [r0, #1]
 8003b70:	dd2a      	ble.n	8003bc8 <__exponent+0x70>
 8003b72:	f10d 0407 	add.w	r4, sp, #7
 8003b76:	46a4      	mov	ip, r4
 8003b78:	270a      	movs	r7, #10
 8003b7a:	46a6      	mov	lr, r4
 8003b7c:	460a      	mov	r2, r1
 8003b7e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003b82:	fb07 1516 	mls	r5, r7, r6, r1
 8003b86:	3530      	adds	r5, #48	; 0x30
 8003b88:	2a63      	cmp	r2, #99	; 0x63
 8003b8a:	f104 34ff 	add.w	r4, r4, #4294967295
 8003b8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003b92:	4631      	mov	r1, r6
 8003b94:	dcf1      	bgt.n	8003b7a <__exponent+0x22>
 8003b96:	3130      	adds	r1, #48	; 0x30
 8003b98:	f1ae 0502 	sub.w	r5, lr, #2
 8003b9c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003ba0:	1c44      	adds	r4, r0, #1
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	4561      	cmp	r1, ip
 8003ba6:	d30a      	bcc.n	8003bbe <__exponent+0x66>
 8003ba8:	f10d 0209 	add.w	r2, sp, #9
 8003bac:	eba2 020e 	sub.w	r2, r2, lr
 8003bb0:	4565      	cmp	r5, ip
 8003bb2:	bf88      	it	hi
 8003bb4:	2200      	movhi	r2, #0
 8003bb6:	4413      	add	r3, r2
 8003bb8:	1a18      	subs	r0, r3, r0
 8003bba:	b003      	add	sp, #12
 8003bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bc2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003bc6:	e7ed      	b.n	8003ba4 <__exponent+0x4c>
 8003bc8:	2330      	movs	r3, #48	; 0x30
 8003bca:	3130      	adds	r1, #48	; 0x30
 8003bcc:	7083      	strb	r3, [r0, #2]
 8003bce:	70c1      	strb	r1, [r0, #3]
 8003bd0:	1d03      	adds	r3, r0, #4
 8003bd2:	e7f1      	b.n	8003bb8 <__exponent+0x60>

08003bd4 <_printf_float>:
 8003bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd8:	ed2d 8b02 	vpush	{d8}
 8003bdc:	b08d      	sub	sp, #52	; 0x34
 8003bde:	460c      	mov	r4, r1
 8003be0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003be4:	4616      	mov	r6, r2
 8003be6:	461f      	mov	r7, r3
 8003be8:	4605      	mov	r5, r0
 8003bea:	f003 f9b5 	bl	8006f58 <_localeconv_r>
 8003bee:	f8d0 a000 	ldr.w	sl, [r0]
 8003bf2:	4650      	mov	r0, sl
 8003bf4:	f7fc faf4 	bl	80001e0 <strlen>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	930a      	str	r3, [sp, #40]	; 0x28
 8003bfc:	6823      	ldr	r3, [r4, #0]
 8003bfe:	9305      	str	r3, [sp, #20]
 8003c00:	f8d8 3000 	ldr.w	r3, [r8]
 8003c04:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003c08:	3307      	adds	r3, #7
 8003c0a:	f023 0307 	bic.w	r3, r3, #7
 8003c0e:	f103 0208 	add.w	r2, r3, #8
 8003c12:	f8c8 2000 	str.w	r2, [r8]
 8003c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003c1e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003c22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003c26:	9307      	str	r3, [sp, #28]
 8003c28:	f8cd 8018 	str.w	r8, [sp, #24]
 8003c2c:	ee08 0a10 	vmov	s16, r0
 8003c30:	4b9f      	ldr	r3, [pc, #636]	; (8003eb0 <_printf_float+0x2dc>)
 8003c32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c36:	f04f 32ff 	mov.w	r2, #4294967295
 8003c3a:	f7fc ff7f 	bl	8000b3c <__aeabi_dcmpun>
 8003c3e:	bb88      	cbnz	r0, 8003ca4 <_printf_float+0xd0>
 8003c40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c44:	4b9a      	ldr	r3, [pc, #616]	; (8003eb0 <_printf_float+0x2dc>)
 8003c46:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4a:	f7fc ff59 	bl	8000b00 <__aeabi_dcmple>
 8003c4e:	bb48      	cbnz	r0, 8003ca4 <_printf_float+0xd0>
 8003c50:	2200      	movs	r2, #0
 8003c52:	2300      	movs	r3, #0
 8003c54:	4640      	mov	r0, r8
 8003c56:	4649      	mov	r1, r9
 8003c58:	f7fc ff48 	bl	8000aec <__aeabi_dcmplt>
 8003c5c:	b110      	cbz	r0, 8003c64 <_printf_float+0x90>
 8003c5e:	232d      	movs	r3, #45	; 0x2d
 8003c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c64:	4b93      	ldr	r3, [pc, #588]	; (8003eb4 <_printf_float+0x2e0>)
 8003c66:	4894      	ldr	r0, [pc, #592]	; (8003eb8 <_printf_float+0x2e4>)
 8003c68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003c6c:	bf94      	ite	ls
 8003c6e:	4698      	movls	r8, r3
 8003c70:	4680      	movhi	r8, r0
 8003c72:	2303      	movs	r3, #3
 8003c74:	6123      	str	r3, [r4, #16]
 8003c76:	9b05      	ldr	r3, [sp, #20]
 8003c78:	f023 0204 	bic.w	r2, r3, #4
 8003c7c:	6022      	str	r2, [r4, #0]
 8003c7e:	f04f 0900 	mov.w	r9, #0
 8003c82:	9700      	str	r7, [sp, #0]
 8003c84:	4633      	mov	r3, r6
 8003c86:	aa0b      	add	r2, sp, #44	; 0x2c
 8003c88:	4621      	mov	r1, r4
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	f000 f9d8 	bl	8004040 <_printf_common>
 8003c90:	3001      	adds	r0, #1
 8003c92:	f040 8090 	bne.w	8003db6 <_printf_float+0x1e2>
 8003c96:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9a:	b00d      	add	sp, #52	; 0x34
 8003c9c:	ecbd 8b02 	vpop	{d8}
 8003ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ca4:	4642      	mov	r2, r8
 8003ca6:	464b      	mov	r3, r9
 8003ca8:	4640      	mov	r0, r8
 8003caa:	4649      	mov	r1, r9
 8003cac:	f7fc ff46 	bl	8000b3c <__aeabi_dcmpun>
 8003cb0:	b140      	cbz	r0, 8003cc4 <_printf_float+0xf0>
 8003cb2:	464b      	mov	r3, r9
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	bfbc      	itt	lt
 8003cb8:	232d      	movlt	r3, #45	; 0x2d
 8003cba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003cbe:	487f      	ldr	r0, [pc, #508]	; (8003ebc <_printf_float+0x2e8>)
 8003cc0:	4b7f      	ldr	r3, [pc, #508]	; (8003ec0 <_printf_float+0x2ec>)
 8003cc2:	e7d1      	b.n	8003c68 <_printf_float+0x94>
 8003cc4:	6863      	ldr	r3, [r4, #4]
 8003cc6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003cca:	9206      	str	r2, [sp, #24]
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	d13f      	bne.n	8003d50 <_printf_float+0x17c>
 8003cd0:	2306      	movs	r3, #6
 8003cd2:	6063      	str	r3, [r4, #4]
 8003cd4:	9b05      	ldr	r3, [sp, #20]
 8003cd6:	6861      	ldr	r1, [r4, #4]
 8003cd8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003cdc:	2300      	movs	r3, #0
 8003cde:	9303      	str	r3, [sp, #12]
 8003ce0:	ab0a      	add	r3, sp, #40	; 0x28
 8003ce2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003ce6:	ab09      	add	r3, sp, #36	; 0x24
 8003ce8:	ec49 8b10 	vmov	d0, r8, r9
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	6022      	str	r2, [r4, #0]
 8003cf0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	f7ff fecd 	bl	8003a94 <__cvt>
 8003cfa:	9b06      	ldr	r3, [sp, #24]
 8003cfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003cfe:	2b47      	cmp	r3, #71	; 0x47
 8003d00:	4680      	mov	r8, r0
 8003d02:	d108      	bne.n	8003d16 <_printf_float+0x142>
 8003d04:	1cc8      	adds	r0, r1, #3
 8003d06:	db02      	blt.n	8003d0e <_printf_float+0x13a>
 8003d08:	6863      	ldr	r3, [r4, #4]
 8003d0a:	4299      	cmp	r1, r3
 8003d0c:	dd41      	ble.n	8003d92 <_printf_float+0x1be>
 8003d0e:	f1ab 0b02 	sub.w	fp, fp, #2
 8003d12:	fa5f fb8b 	uxtb.w	fp, fp
 8003d16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003d1a:	d820      	bhi.n	8003d5e <_printf_float+0x18a>
 8003d1c:	3901      	subs	r1, #1
 8003d1e:	465a      	mov	r2, fp
 8003d20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003d24:	9109      	str	r1, [sp, #36]	; 0x24
 8003d26:	f7ff ff17 	bl	8003b58 <__exponent>
 8003d2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d2c:	1813      	adds	r3, r2, r0
 8003d2e:	2a01      	cmp	r2, #1
 8003d30:	4681      	mov	r9, r0
 8003d32:	6123      	str	r3, [r4, #16]
 8003d34:	dc02      	bgt.n	8003d3c <_printf_float+0x168>
 8003d36:	6822      	ldr	r2, [r4, #0]
 8003d38:	07d2      	lsls	r2, r2, #31
 8003d3a:	d501      	bpl.n	8003d40 <_printf_float+0x16c>
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	6123      	str	r3, [r4, #16]
 8003d40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d09c      	beq.n	8003c82 <_printf_float+0xae>
 8003d48:	232d      	movs	r3, #45	; 0x2d
 8003d4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d4e:	e798      	b.n	8003c82 <_printf_float+0xae>
 8003d50:	9a06      	ldr	r2, [sp, #24]
 8003d52:	2a47      	cmp	r2, #71	; 0x47
 8003d54:	d1be      	bne.n	8003cd4 <_printf_float+0x100>
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1bc      	bne.n	8003cd4 <_printf_float+0x100>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e7b9      	b.n	8003cd2 <_printf_float+0xfe>
 8003d5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003d62:	d118      	bne.n	8003d96 <_printf_float+0x1c2>
 8003d64:	2900      	cmp	r1, #0
 8003d66:	6863      	ldr	r3, [r4, #4]
 8003d68:	dd0b      	ble.n	8003d82 <_printf_float+0x1ae>
 8003d6a:	6121      	str	r1, [r4, #16]
 8003d6c:	b913      	cbnz	r3, 8003d74 <_printf_float+0x1a0>
 8003d6e:	6822      	ldr	r2, [r4, #0]
 8003d70:	07d0      	lsls	r0, r2, #31
 8003d72:	d502      	bpl.n	8003d7a <_printf_float+0x1a6>
 8003d74:	3301      	adds	r3, #1
 8003d76:	440b      	add	r3, r1
 8003d78:	6123      	str	r3, [r4, #16]
 8003d7a:	65a1      	str	r1, [r4, #88]	; 0x58
 8003d7c:	f04f 0900 	mov.w	r9, #0
 8003d80:	e7de      	b.n	8003d40 <_printf_float+0x16c>
 8003d82:	b913      	cbnz	r3, 8003d8a <_printf_float+0x1b6>
 8003d84:	6822      	ldr	r2, [r4, #0]
 8003d86:	07d2      	lsls	r2, r2, #31
 8003d88:	d501      	bpl.n	8003d8e <_printf_float+0x1ba>
 8003d8a:	3302      	adds	r3, #2
 8003d8c:	e7f4      	b.n	8003d78 <_printf_float+0x1a4>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e7f2      	b.n	8003d78 <_printf_float+0x1a4>
 8003d92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d98:	4299      	cmp	r1, r3
 8003d9a:	db05      	blt.n	8003da8 <_printf_float+0x1d4>
 8003d9c:	6823      	ldr	r3, [r4, #0]
 8003d9e:	6121      	str	r1, [r4, #16]
 8003da0:	07d8      	lsls	r0, r3, #31
 8003da2:	d5ea      	bpl.n	8003d7a <_printf_float+0x1a6>
 8003da4:	1c4b      	adds	r3, r1, #1
 8003da6:	e7e7      	b.n	8003d78 <_printf_float+0x1a4>
 8003da8:	2900      	cmp	r1, #0
 8003daa:	bfd4      	ite	le
 8003dac:	f1c1 0202 	rsble	r2, r1, #2
 8003db0:	2201      	movgt	r2, #1
 8003db2:	4413      	add	r3, r2
 8003db4:	e7e0      	b.n	8003d78 <_printf_float+0x1a4>
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	055a      	lsls	r2, r3, #21
 8003dba:	d407      	bmi.n	8003dcc <_printf_float+0x1f8>
 8003dbc:	6923      	ldr	r3, [r4, #16]
 8003dbe:	4642      	mov	r2, r8
 8003dc0:	4631      	mov	r1, r6
 8003dc2:	4628      	mov	r0, r5
 8003dc4:	47b8      	blx	r7
 8003dc6:	3001      	adds	r0, #1
 8003dc8:	d12c      	bne.n	8003e24 <_printf_float+0x250>
 8003dca:	e764      	b.n	8003c96 <_printf_float+0xc2>
 8003dcc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003dd0:	f240 80e0 	bls.w	8003f94 <_printf_float+0x3c0>
 8003dd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f7fc fe7c 	bl	8000ad8 <__aeabi_dcmpeq>
 8003de0:	2800      	cmp	r0, #0
 8003de2:	d034      	beq.n	8003e4e <_printf_float+0x27a>
 8003de4:	4a37      	ldr	r2, [pc, #220]	; (8003ec4 <_printf_float+0x2f0>)
 8003de6:	2301      	movs	r3, #1
 8003de8:	4631      	mov	r1, r6
 8003dea:	4628      	mov	r0, r5
 8003dec:	47b8      	blx	r7
 8003dee:	3001      	adds	r0, #1
 8003df0:	f43f af51 	beq.w	8003c96 <_printf_float+0xc2>
 8003df4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	db02      	blt.n	8003e02 <_printf_float+0x22e>
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	07d8      	lsls	r0, r3, #31
 8003e00:	d510      	bpl.n	8003e24 <_printf_float+0x250>
 8003e02:	ee18 3a10 	vmov	r3, s16
 8003e06:	4652      	mov	r2, sl
 8003e08:	4631      	mov	r1, r6
 8003e0a:	4628      	mov	r0, r5
 8003e0c:	47b8      	blx	r7
 8003e0e:	3001      	adds	r0, #1
 8003e10:	f43f af41 	beq.w	8003c96 <_printf_float+0xc2>
 8003e14:	f04f 0800 	mov.w	r8, #0
 8003e18:	f104 091a 	add.w	r9, r4, #26
 8003e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	4543      	cmp	r3, r8
 8003e22:	dc09      	bgt.n	8003e38 <_printf_float+0x264>
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	079b      	lsls	r3, r3, #30
 8003e28:	f100 8105 	bmi.w	8004036 <_printf_float+0x462>
 8003e2c:	68e0      	ldr	r0, [r4, #12]
 8003e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e30:	4298      	cmp	r0, r3
 8003e32:	bfb8      	it	lt
 8003e34:	4618      	movlt	r0, r3
 8003e36:	e730      	b.n	8003c9a <_printf_float+0xc6>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	464a      	mov	r2, r9
 8003e3c:	4631      	mov	r1, r6
 8003e3e:	4628      	mov	r0, r5
 8003e40:	47b8      	blx	r7
 8003e42:	3001      	adds	r0, #1
 8003e44:	f43f af27 	beq.w	8003c96 <_printf_float+0xc2>
 8003e48:	f108 0801 	add.w	r8, r8, #1
 8003e4c:	e7e6      	b.n	8003e1c <_printf_float+0x248>
 8003e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	dc39      	bgt.n	8003ec8 <_printf_float+0x2f4>
 8003e54:	4a1b      	ldr	r2, [pc, #108]	; (8003ec4 <_printf_float+0x2f0>)
 8003e56:	2301      	movs	r3, #1
 8003e58:	4631      	mov	r1, r6
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	47b8      	blx	r7
 8003e5e:	3001      	adds	r0, #1
 8003e60:	f43f af19 	beq.w	8003c96 <_printf_float+0xc2>
 8003e64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	d102      	bne.n	8003e72 <_printf_float+0x29e>
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	07d9      	lsls	r1, r3, #31
 8003e70:	d5d8      	bpl.n	8003e24 <_printf_float+0x250>
 8003e72:	ee18 3a10 	vmov	r3, s16
 8003e76:	4652      	mov	r2, sl
 8003e78:	4631      	mov	r1, r6
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	47b8      	blx	r7
 8003e7e:	3001      	adds	r0, #1
 8003e80:	f43f af09 	beq.w	8003c96 <_printf_float+0xc2>
 8003e84:	f04f 0900 	mov.w	r9, #0
 8003e88:	f104 0a1a 	add.w	sl, r4, #26
 8003e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e8e:	425b      	negs	r3, r3
 8003e90:	454b      	cmp	r3, r9
 8003e92:	dc01      	bgt.n	8003e98 <_printf_float+0x2c4>
 8003e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e96:	e792      	b.n	8003dbe <_printf_float+0x1ea>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	4652      	mov	r2, sl
 8003e9c:	4631      	mov	r1, r6
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	47b8      	blx	r7
 8003ea2:	3001      	adds	r0, #1
 8003ea4:	f43f aef7 	beq.w	8003c96 <_printf_float+0xc2>
 8003ea8:	f109 0901 	add.w	r9, r9, #1
 8003eac:	e7ee      	b.n	8003e8c <_printf_float+0x2b8>
 8003eae:	bf00      	nop
 8003eb0:	7fefffff 	.word	0x7fefffff
 8003eb4:	08008b00 	.word	0x08008b00
 8003eb8:	08008b04 	.word	0x08008b04
 8003ebc:	08008b0c 	.word	0x08008b0c
 8003ec0:	08008b08 	.word	0x08008b08
 8003ec4:	08008b10 	.word	0x08008b10
 8003ec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003eca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	bfa8      	it	ge
 8003ed0:	461a      	movge	r2, r3
 8003ed2:	2a00      	cmp	r2, #0
 8003ed4:	4691      	mov	r9, r2
 8003ed6:	dc37      	bgt.n	8003f48 <_printf_float+0x374>
 8003ed8:	f04f 0b00 	mov.w	fp, #0
 8003edc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ee0:	f104 021a 	add.w	r2, r4, #26
 8003ee4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ee6:	9305      	str	r3, [sp, #20]
 8003ee8:	eba3 0309 	sub.w	r3, r3, r9
 8003eec:	455b      	cmp	r3, fp
 8003eee:	dc33      	bgt.n	8003f58 <_printf_float+0x384>
 8003ef0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	db3b      	blt.n	8003f70 <_printf_float+0x39c>
 8003ef8:	6823      	ldr	r3, [r4, #0]
 8003efa:	07da      	lsls	r2, r3, #31
 8003efc:	d438      	bmi.n	8003f70 <_printf_float+0x39c>
 8003efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f00:	9a05      	ldr	r2, [sp, #20]
 8003f02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003f04:	1a9a      	subs	r2, r3, r2
 8003f06:	eba3 0901 	sub.w	r9, r3, r1
 8003f0a:	4591      	cmp	r9, r2
 8003f0c:	bfa8      	it	ge
 8003f0e:	4691      	movge	r9, r2
 8003f10:	f1b9 0f00 	cmp.w	r9, #0
 8003f14:	dc35      	bgt.n	8003f82 <_printf_float+0x3ae>
 8003f16:	f04f 0800 	mov.w	r8, #0
 8003f1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f1e:	f104 0a1a 	add.w	sl, r4, #26
 8003f22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	eba3 0309 	sub.w	r3, r3, r9
 8003f2c:	4543      	cmp	r3, r8
 8003f2e:	f77f af79 	ble.w	8003e24 <_printf_float+0x250>
 8003f32:	2301      	movs	r3, #1
 8003f34:	4652      	mov	r2, sl
 8003f36:	4631      	mov	r1, r6
 8003f38:	4628      	mov	r0, r5
 8003f3a:	47b8      	blx	r7
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	f43f aeaa 	beq.w	8003c96 <_printf_float+0xc2>
 8003f42:	f108 0801 	add.w	r8, r8, #1
 8003f46:	e7ec      	b.n	8003f22 <_printf_float+0x34e>
 8003f48:	4613      	mov	r3, r2
 8003f4a:	4631      	mov	r1, r6
 8003f4c:	4642      	mov	r2, r8
 8003f4e:	4628      	mov	r0, r5
 8003f50:	47b8      	blx	r7
 8003f52:	3001      	adds	r0, #1
 8003f54:	d1c0      	bne.n	8003ed8 <_printf_float+0x304>
 8003f56:	e69e      	b.n	8003c96 <_printf_float+0xc2>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	4631      	mov	r1, r6
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	9205      	str	r2, [sp, #20]
 8003f60:	47b8      	blx	r7
 8003f62:	3001      	adds	r0, #1
 8003f64:	f43f ae97 	beq.w	8003c96 <_printf_float+0xc2>
 8003f68:	9a05      	ldr	r2, [sp, #20]
 8003f6a:	f10b 0b01 	add.w	fp, fp, #1
 8003f6e:	e7b9      	b.n	8003ee4 <_printf_float+0x310>
 8003f70:	ee18 3a10 	vmov	r3, s16
 8003f74:	4652      	mov	r2, sl
 8003f76:	4631      	mov	r1, r6
 8003f78:	4628      	mov	r0, r5
 8003f7a:	47b8      	blx	r7
 8003f7c:	3001      	adds	r0, #1
 8003f7e:	d1be      	bne.n	8003efe <_printf_float+0x32a>
 8003f80:	e689      	b.n	8003c96 <_printf_float+0xc2>
 8003f82:	9a05      	ldr	r2, [sp, #20]
 8003f84:	464b      	mov	r3, r9
 8003f86:	4442      	add	r2, r8
 8003f88:	4631      	mov	r1, r6
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	47b8      	blx	r7
 8003f8e:	3001      	adds	r0, #1
 8003f90:	d1c1      	bne.n	8003f16 <_printf_float+0x342>
 8003f92:	e680      	b.n	8003c96 <_printf_float+0xc2>
 8003f94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f96:	2a01      	cmp	r2, #1
 8003f98:	dc01      	bgt.n	8003f9e <_printf_float+0x3ca>
 8003f9a:	07db      	lsls	r3, r3, #31
 8003f9c:	d538      	bpl.n	8004010 <_printf_float+0x43c>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	4642      	mov	r2, r8
 8003fa2:	4631      	mov	r1, r6
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	47b8      	blx	r7
 8003fa8:	3001      	adds	r0, #1
 8003faa:	f43f ae74 	beq.w	8003c96 <_printf_float+0xc2>
 8003fae:	ee18 3a10 	vmov	r3, s16
 8003fb2:	4652      	mov	r2, sl
 8003fb4:	4631      	mov	r1, r6
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	47b8      	blx	r7
 8003fba:	3001      	adds	r0, #1
 8003fbc:	f43f ae6b 	beq.w	8003c96 <_printf_float+0xc2>
 8003fc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f7fc fd86 	bl	8000ad8 <__aeabi_dcmpeq>
 8003fcc:	b9d8      	cbnz	r0, 8004006 <_printf_float+0x432>
 8003fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fd0:	f108 0201 	add.w	r2, r8, #1
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	4631      	mov	r1, r6
 8003fd8:	4628      	mov	r0, r5
 8003fda:	47b8      	blx	r7
 8003fdc:	3001      	adds	r0, #1
 8003fde:	d10e      	bne.n	8003ffe <_printf_float+0x42a>
 8003fe0:	e659      	b.n	8003c96 <_printf_float+0xc2>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	4652      	mov	r2, sl
 8003fe6:	4631      	mov	r1, r6
 8003fe8:	4628      	mov	r0, r5
 8003fea:	47b8      	blx	r7
 8003fec:	3001      	adds	r0, #1
 8003fee:	f43f ae52 	beq.w	8003c96 <_printf_float+0xc2>
 8003ff2:	f108 0801 	add.w	r8, r8, #1
 8003ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	4543      	cmp	r3, r8
 8003ffc:	dcf1      	bgt.n	8003fe2 <_printf_float+0x40e>
 8003ffe:	464b      	mov	r3, r9
 8004000:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004004:	e6dc      	b.n	8003dc0 <_printf_float+0x1ec>
 8004006:	f04f 0800 	mov.w	r8, #0
 800400a:	f104 0a1a 	add.w	sl, r4, #26
 800400e:	e7f2      	b.n	8003ff6 <_printf_float+0x422>
 8004010:	2301      	movs	r3, #1
 8004012:	4642      	mov	r2, r8
 8004014:	e7df      	b.n	8003fd6 <_printf_float+0x402>
 8004016:	2301      	movs	r3, #1
 8004018:	464a      	mov	r2, r9
 800401a:	4631      	mov	r1, r6
 800401c:	4628      	mov	r0, r5
 800401e:	47b8      	blx	r7
 8004020:	3001      	adds	r0, #1
 8004022:	f43f ae38 	beq.w	8003c96 <_printf_float+0xc2>
 8004026:	f108 0801 	add.w	r8, r8, #1
 800402a:	68e3      	ldr	r3, [r4, #12]
 800402c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800402e:	1a5b      	subs	r3, r3, r1
 8004030:	4543      	cmp	r3, r8
 8004032:	dcf0      	bgt.n	8004016 <_printf_float+0x442>
 8004034:	e6fa      	b.n	8003e2c <_printf_float+0x258>
 8004036:	f04f 0800 	mov.w	r8, #0
 800403a:	f104 0919 	add.w	r9, r4, #25
 800403e:	e7f4      	b.n	800402a <_printf_float+0x456>

08004040 <_printf_common>:
 8004040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004044:	4616      	mov	r6, r2
 8004046:	4699      	mov	r9, r3
 8004048:	688a      	ldr	r2, [r1, #8]
 800404a:	690b      	ldr	r3, [r1, #16]
 800404c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004050:	4293      	cmp	r3, r2
 8004052:	bfb8      	it	lt
 8004054:	4613      	movlt	r3, r2
 8004056:	6033      	str	r3, [r6, #0]
 8004058:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800405c:	4607      	mov	r7, r0
 800405e:	460c      	mov	r4, r1
 8004060:	b10a      	cbz	r2, 8004066 <_printf_common+0x26>
 8004062:	3301      	adds	r3, #1
 8004064:	6033      	str	r3, [r6, #0]
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	0699      	lsls	r1, r3, #26
 800406a:	bf42      	ittt	mi
 800406c:	6833      	ldrmi	r3, [r6, #0]
 800406e:	3302      	addmi	r3, #2
 8004070:	6033      	strmi	r3, [r6, #0]
 8004072:	6825      	ldr	r5, [r4, #0]
 8004074:	f015 0506 	ands.w	r5, r5, #6
 8004078:	d106      	bne.n	8004088 <_printf_common+0x48>
 800407a:	f104 0a19 	add.w	sl, r4, #25
 800407e:	68e3      	ldr	r3, [r4, #12]
 8004080:	6832      	ldr	r2, [r6, #0]
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	42ab      	cmp	r3, r5
 8004086:	dc26      	bgt.n	80040d6 <_printf_common+0x96>
 8004088:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800408c:	1e13      	subs	r3, r2, #0
 800408e:	6822      	ldr	r2, [r4, #0]
 8004090:	bf18      	it	ne
 8004092:	2301      	movne	r3, #1
 8004094:	0692      	lsls	r2, r2, #26
 8004096:	d42b      	bmi.n	80040f0 <_printf_common+0xb0>
 8004098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800409c:	4649      	mov	r1, r9
 800409e:	4638      	mov	r0, r7
 80040a0:	47c0      	blx	r8
 80040a2:	3001      	adds	r0, #1
 80040a4:	d01e      	beq.n	80040e4 <_printf_common+0xa4>
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	68e5      	ldr	r5, [r4, #12]
 80040aa:	6832      	ldr	r2, [r6, #0]
 80040ac:	f003 0306 	and.w	r3, r3, #6
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	bf08      	it	eq
 80040b4:	1aad      	subeq	r5, r5, r2
 80040b6:	68a3      	ldr	r3, [r4, #8]
 80040b8:	6922      	ldr	r2, [r4, #16]
 80040ba:	bf0c      	ite	eq
 80040bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040c0:	2500      	movne	r5, #0
 80040c2:	4293      	cmp	r3, r2
 80040c4:	bfc4      	itt	gt
 80040c6:	1a9b      	subgt	r3, r3, r2
 80040c8:	18ed      	addgt	r5, r5, r3
 80040ca:	2600      	movs	r6, #0
 80040cc:	341a      	adds	r4, #26
 80040ce:	42b5      	cmp	r5, r6
 80040d0:	d11a      	bne.n	8004108 <_printf_common+0xc8>
 80040d2:	2000      	movs	r0, #0
 80040d4:	e008      	b.n	80040e8 <_printf_common+0xa8>
 80040d6:	2301      	movs	r3, #1
 80040d8:	4652      	mov	r2, sl
 80040da:	4649      	mov	r1, r9
 80040dc:	4638      	mov	r0, r7
 80040de:	47c0      	blx	r8
 80040e0:	3001      	adds	r0, #1
 80040e2:	d103      	bne.n	80040ec <_printf_common+0xac>
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295
 80040e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ec:	3501      	adds	r5, #1
 80040ee:	e7c6      	b.n	800407e <_printf_common+0x3e>
 80040f0:	18e1      	adds	r1, r4, r3
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	2030      	movs	r0, #48	; 0x30
 80040f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040fa:	4422      	add	r2, r4
 80040fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004100:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004104:	3302      	adds	r3, #2
 8004106:	e7c7      	b.n	8004098 <_printf_common+0x58>
 8004108:	2301      	movs	r3, #1
 800410a:	4622      	mov	r2, r4
 800410c:	4649      	mov	r1, r9
 800410e:	4638      	mov	r0, r7
 8004110:	47c0      	blx	r8
 8004112:	3001      	adds	r0, #1
 8004114:	d0e6      	beq.n	80040e4 <_printf_common+0xa4>
 8004116:	3601      	adds	r6, #1
 8004118:	e7d9      	b.n	80040ce <_printf_common+0x8e>
	...

0800411c <_printf_i>:
 800411c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004120:	7e0f      	ldrb	r7, [r1, #24]
 8004122:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004124:	2f78      	cmp	r7, #120	; 0x78
 8004126:	4691      	mov	r9, r2
 8004128:	4680      	mov	r8, r0
 800412a:	460c      	mov	r4, r1
 800412c:	469a      	mov	sl, r3
 800412e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004132:	d807      	bhi.n	8004144 <_printf_i+0x28>
 8004134:	2f62      	cmp	r7, #98	; 0x62
 8004136:	d80a      	bhi.n	800414e <_printf_i+0x32>
 8004138:	2f00      	cmp	r7, #0
 800413a:	f000 80d8 	beq.w	80042ee <_printf_i+0x1d2>
 800413e:	2f58      	cmp	r7, #88	; 0x58
 8004140:	f000 80a3 	beq.w	800428a <_printf_i+0x16e>
 8004144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800414c:	e03a      	b.n	80041c4 <_printf_i+0xa8>
 800414e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004152:	2b15      	cmp	r3, #21
 8004154:	d8f6      	bhi.n	8004144 <_printf_i+0x28>
 8004156:	a101      	add	r1, pc, #4	; (adr r1, 800415c <_printf_i+0x40>)
 8004158:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800415c:	080041b5 	.word	0x080041b5
 8004160:	080041c9 	.word	0x080041c9
 8004164:	08004145 	.word	0x08004145
 8004168:	08004145 	.word	0x08004145
 800416c:	08004145 	.word	0x08004145
 8004170:	08004145 	.word	0x08004145
 8004174:	080041c9 	.word	0x080041c9
 8004178:	08004145 	.word	0x08004145
 800417c:	08004145 	.word	0x08004145
 8004180:	08004145 	.word	0x08004145
 8004184:	08004145 	.word	0x08004145
 8004188:	080042d5 	.word	0x080042d5
 800418c:	080041f9 	.word	0x080041f9
 8004190:	080042b7 	.word	0x080042b7
 8004194:	08004145 	.word	0x08004145
 8004198:	08004145 	.word	0x08004145
 800419c:	080042f7 	.word	0x080042f7
 80041a0:	08004145 	.word	0x08004145
 80041a4:	080041f9 	.word	0x080041f9
 80041a8:	08004145 	.word	0x08004145
 80041ac:	08004145 	.word	0x08004145
 80041b0:	080042bf 	.word	0x080042bf
 80041b4:	682b      	ldr	r3, [r5, #0]
 80041b6:	1d1a      	adds	r2, r3, #4
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	602a      	str	r2, [r5, #0]
 80041bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0a3      	b.n	8004310 <_printf_i+0x1f4>
 80041c8:	6820      	ldr	r0, [r4, #0]
 80041ca:	6829      	ldr	r1, [r5, #0]
 80041cc:	0606      	lsls	r6, r0, #24
 80041ce:	f101 0304 	add.w	r3, r1, #4
 80041d2:	d50a      	bpl.n	80041ea <_printf_i+0xce>
 80041d4:	680e      	ldr	r6, [r1, #0]
 80041d6:	602b      	str	r3, [r5, #0]
 80041d8:	2e00      	cmp	r6, #0
 80041da:	da03      	bge.n	80041e4 <_printf_i+0xc8>
 80041dc:	232d      	movs	r3, #45	; 0x2d
 80041de:	4276      	negs	r6, r6
 80041e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e4:	485e      	ldr	r0, [pc, #376]	; (8004360 <_printf_i+0x244>)
 80041e6:	230a      	movs	r3, #10
 80041e8:	e019      	b.n	800421e <_printf_i+0x102>
 80041ea:	680e      	ldr	r6, [r1, #0]
 80041ec:	602b      	str	r3, [r5, #0]
 80041ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041f2:	bf18      	it	ne
 80041f4:	b236      	sxthne	r6, r6
 80041f6:	e7ef      	b.n	80041d8 <_printf_i+0xbc>
 80041f8:	682b      	ldr	r3, [r5, #0]
 80041fa:	6820      	ldr	r0, [r4, #0]
 80041fc:	1d19      	adds	r1, r3, #4
 80041fe:	6029      	str	r1, [r5, #0]
 8004200:	0601      	lsls	r1, r0, #24
 8004202:	d501      	bpl.n	8004208 <_printf_i+0xec>
 8004204:	681e      	ldr	r6, [r3, #0]
 8004206:	e002      	b.n	800420e <_printf_i+0xf2>
 8004208:	0646      	lsls	r6, r0, #25
 800420a:	d5fb      	bpl.n	8004204 <_printf_i+0xe8>
 800420c:	881e      	ldrh	r6, [r3, #0]
 800420e:	4854      	ldr	r0, [pc, #336]	; (8004360 <_printf_i+0x244>)
 8004210:	2f6f      	cmp	r7, #111	; 0x6f
 8004212:	bf0c      	ite	eq
 8004214:	2308      	moveq	r3, #8
 8004216:	230a      	movne	r3, #10
 8004218:	2100      	movs	r1, #0
 800421a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800421e:	6865      	ldr	r5, [r4, #4]
 8004220:	60a5      	str	r5, [r4, #8]
 8004222:	2d00      	cmp	r5, #0
 8004224:	bfa2      	ittt	ge
 8004226:	6821      	ldrge	r1, [r4, #0]
 8004228:	f021 0104 	bicge.w	r1, r1, #4
 800422c:	6021      	strge	r1, [r4, #0]
 800422e:	b90e      	cbnz	r6, 8004234 <_printf_i+0x118>
 8004230:	2d00      	cmp	r5, #0
 8004232:	d04d      	beq.n	80042d0 <_printf_i+0x1b4>
 8004234:	4615      	mov	r5, r2
 8004236:	fbb6 f1f3 	udiv	r1, r6, r3
 800423a:	fb03 6711 	mls	r7, r3, r1, r6
 800423e:	5dc7      	ldrb	r7, [r0, r7]
 8004240:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004244:	4637      	mov	r7, r6
 8004246:	42bb      	cmp	r3, r7
 8004248:	460e      	mov	r6, r1
 800424a:	d9f4      	bls.n	8004236 <_printf_i+0x11a>
 800424c:	2b08      	cmp	r3, #8
 800424e:	d10b      	bne.n	8004268 <_printf_i+0x14c>
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	07de      	lsls	r6, r3, #31
 8004254:	d508      	bpl.n	8004268 <_printf_i+0x14c>
 8004256:	6923      	ldr	r3, [r4, #16]
 8004258:	6861      	ldr	r1, [r4, #4]
 800425a:	4299      	cmp	r1, r3
 800425c:	bfde      	ittt	le
 800425e:	2330      	movle	r3, #48	; 0x30
 8004260:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004264:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004268:	1b52      	subs	r2, r2, r5
 800426a:	6122      	str	r2, [r4, #16]
 800426c:	f8cd a000 	str.w	sl, [sp]
 8004270:	464b      	mov	r3, r9
 8004272:	aa03      	add	r2, sp, #12
 8004274:	4621      	mov	r1, r4
 8004276:	4640      	mov	r0, r8
 8004278:	f7ff fee2 	bl	8004040 <_printf_common>
 800427c:	3001      	adds	r0, #1
 800427e:	d14c      	bne.n	800431a <_printf_i+0x1fe>
 8004280:	f04f 30ff 	mov.w	r0, #4294967295
 8004284:	b004      	add	sp, #16
 8004286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800428a:	4835      	ldr	r0, [pc, #212]	; (8004360 <_printf_i+0x244>)
 800428c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004290:	6829      	ldr	r1, [r5, #0]
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	f851 6b04 	ldr.w	r6, [r1], #4
 8004298:	6029      	str	r1, [r5, #0]
 800429a:	061d      	lsls	r5, r3, #24
 800429c:	d514      	bpl.n	80042c8 <_printf_i+0x1ac>
 800429e:	07df      	lsls	r7, r3, #31
 80042a0:	bf44      	itt	mi
 80042a2:	f043 0320 	orrmi.w	r3, r3, #32
 80042a6:	6023      	strmi	r3, [r4, #0]
 80042a8:	b91e      	cbnz	r6, 80042b2 <_printf_i+0x196>
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	f023 0320 	bic.w	r3, r3, #32
 80042b0:	6023      	str	r3, [r4, #0]
 80042b2:	2310      	movs	r3, #16
 80042b4:	e7b0      	b.n	8004218 <_printf_i+0xfc>
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	f043 0320 	orr.w	r3, r3, #32
 80042bc:	6023      	str	r3, [r4, #0]
 80042be:	2378      	movs	r3, #120	; 0x78
 80042c0:	4828      	ldr	r0, [pc, #160]	; (8004364 <_printf_i+0x248>)
 80042c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042c6:	e7e3      	b.n	8004290 <_printf_i+0x174>
 80042c8:	0659      	lsls	r1, r3, #25
 80042ca:	bf48      	it	mi
 80042cc:	b2b6      	uxthmi	r6, r6
 80042ce:	e7e6      	b.n	800429e <_printf_i+0x182>
 80042d0:	4615      	mov	r5, r2
 80042d2:	e7bb      	b.n	800424c <_printf_i+0x130>
 80042d4:	682b      	ldr	r3, [r5, #0]
 80042d6:	6826      	ldr	r6, [r4, #0]
 80042d8:	6961      	ldr	r1, [r4, #20]
 80042da:	1d18      	adds	r0, r3, #4
 80042dc:	6028      	str	r0, [r5, #0]
 80042de:	0635      	lsls	r5, r6, #24
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	d501      	bpl.n	80042e8 <_printf_i+0x1cc>
 80042e4:	6019      	str	r1, [r3, #0]
 80042e6:	e002      	b.n	80042ee <_printf_i+0x1d2>
 80042e8:	0670      	lsls	r0, r6, #25
 80042ea:	d5fb      	bpl.n	80042e4 <_printf_i+0x1c8>
 80042ec:	8019      	strh	r1, [r3, #0]
 80042ee:	2300      	movs	r3, #0
 80042f0:	6123      	str	r3, [r4, #16]
 80042f2:	4615      	mov	r5, r2
 80042f4:	e7ba      	b.n	800426c <_printf_i+0x150>
 80042f6:	682b      	ldr	r3, [r5, #0]
 80042f8:	1d1a      	adds	r2, r3, #4
 80042fa:	602a      	str	r2, [r5, #0]
 80042fc:	681d      	ldr	r5, [r3, #0]
 80042fe:	6862      	ldr	r2, [r4, #4]
 8004300:	2100      	movs	r1, #0
 8004302:	4628      	mov	r0, r5
 8004304:	f7fb ff74 	bl	80001f0 <memchr>
 8004308:	b108      	cbz	r0, 800430e <_printf_i+0x1f2>
 800430a:	1b40      	subs	r0, r0, r5
 800430c:	6060      	str	r0, [r4, #4]
 800430e:	6863      	ldr	r3, [r4, #4]
 8004310:	6123      	str	r3, [r4, #16]
 8004312:	2300      	movs	r3, #0
 8004314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004318:	e7a8      	b.n	800426c <_printf_i+0x150>
 800431a:	6923      	ldr	r3, [r4, #16]
 800431c:	462a      	mov	r2, r5
 800431e:	4649      	mov	r1, r9
 8004320:	4640      	mov	r0, r8
 8004322:	47d0      	blx	sl
 8004324:	3001      	adds	r0, #1
 8004326:	d0ab      	beq.n	8004280 <_printf_i+0x164>
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	079b      	lsls	r3, r3, #30
 800432c:	d413      	bmi.n	8004356 <_printf_i+0x23a>
 800432e:	68e0      	ldr	r0, [r4, #12]
 8004330:	9b03      	ldr	r3, [sp, #12]
 8004332:	4298      	cmp	r0, r3
 8004334:	bfb8      	it	lt
 8004336:	4618      	movlt	r0, r3
 8004338:	e7a4      	b.n	8004284 <_printf_i+0x168>
 800433a:	2301      	movs	r3, #1
 800433c:	4632      	mov	r2, r6
 800433e:	4649      	mov	r1, r9
 8004340:	4640      	mov	r0, r8
 8004342:	47d0      	blx	sl
 8004344:	3001      	adds	r0, #1
 8004346:	d09b      	beq.n	8004280 <_printf_i+0x164>
 8004348:	3501      	adds	r5, #1
 800434a:	68e3      	ldr	r3, [r4, #12]
 800434c:	9903      	ldr	r1, [sp, #12]
 800434e:	1a5b      	subs	r3, r3, r1
 8004350:	42ab      	cmp	r3, r5
 8004352:	dcf2      	bgt.n	800433a <_printf_i+0x21e>
 8004354:	e7eb      	b.n	800432e <_printf_i+0x212>
 8004356:	2500      	movs	r5, #0
 8004358:	f104 0619 	add.w	r6, r4, #25
 800435c:	e7f5      	b.n	800434a <_printf_i+0x22e>
 800435e:	bf00      	nop
 8004360:	08008b12 	.word	0x08008b12
 8004364:	08008b23 	.word	0x08008b23

08004368 <_scanf_float>:
 8004368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800436c:	b087      	sub	sp, #28
 800436e:	4617      	mov	r7, r2
 8004370:	9303      	str	r3, [sp, #12]
 8004372:	688b      	ldr	r3, [r1, #8]
 8004374:	1e5a      	subs	r2, r3, #1
 8004376:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800437a:	bf83      	ittte	hi
 800437c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004380:	195b      	addhi	r3, r3, r5
 8004382:	9302      	strhi	r3, [sp, #8]
 8004384:	2300      	movls	r3, #0
 8004386:	bf86      	itte	hi
 8004388:	f240 135d 	movwhi	r3, #349	; 0x15d
 800438c:	608b      	strhi	r3, [r1, #8]
 800438e:	9302      	strls	r3, [sp, #8]
 8004390:	680b      	ldr	r3, [r1, #0]
 8004392:	468b      	mov	fp, r1
 8004394:	2500      	movs	r5, #0
 8004396:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800439a:	f84b 3b1c 	str.w	r3, [fp], #28
 800439e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80043a2:	4680      	mov	r8, r0
 80043a4:	460c      	mov	r4, r1
 80043a6:	465e      	mov	r6, fp
 80043a8:	46aa      	mov	sl, r5
 80043aa:	46a9      	mov	r9, r5
 80043ac:	9501      	str	r5, [sp, #4]
 80043ae:	68a2      	ldr	r2, [r4, #8]
 80043b0:	b152      	cbz	r2, 80043c8 <_scanf_float+0x60>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2b4e      	cmp	r3, #78	; 0x4e
 80043b8:	d864      	bhi.n	8004484 <_scanf_float+0x11c>
 80043ba:	2b40      	cmp	r3, #64	; 0x40
 80043bc:	d83c      	bhi.n	8004438 <_scanf_float+0xd0>
 80043be:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80043c2:	b2c8      	uxtb	r0, r1
 80043c4:	280e      	cmp	r0, #14
 80043c6:	d93a      	bls.n	800443e <_scanf_float+0xd6>
 80043c8:	f1b9 0f00 	cmp.w	r9, #0
 80043cc:	d003      	beq.n	80043d6 <_scanf_float+0x6e>
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043d4:	6023      	str	r3, [r4, #0]
 80043d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80043da:	f1ba 0f01 	cmp.w	sl, #1
 80043de:	f200 8113 	bhi.w	8004608 <_scanf_float+0x2a0>
 80043e2:	455e      	cmp	r6, fp
 80043e4:	f200 8105 	bhi.w	80045f2 <_scanf_float+0x28a>
 80043e8:	2501      	movs	r5, #1
 80043ea:	4628      	mov	r0, r5
 80043ec:	b007      	add	sp, #28
 80043ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043f2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80043f6:	2a0d      	cmp	r2, #13
 80043f8:	d8e6      	bhi.n	80043c8 <_scanf_float+0x60>
 80043fa:	a101      	add	r1, pc, #4	; (adr r1, 8004400 <_scanf_float+0x98>)
 80043fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004400:	0800453f 	.word	0x0800453f
 8004404:	080043c9 	.word	0x080043c9
 8004408:	080043c9 	.word	0x080043c9
 800440c:	080043c9 	.word	0x080043c9
 8004410:	0800459f 	.word	0x0800459f
 8004414:	08004577 	.word	0x08004577
 8004418:	080043c9 	.word	0x080043c9
 800441c:	080043c9 	.word	0x080043c9
 8004420:	0800454d 	.word	0x0800454d
 8004424:	080043c9 	.word	0x080043c9
 8004428:	080043c9 	.word	0x080043c9
 800442c:	080043c9 	.word	0x080043c9
 8004430:	080043c9 	.word	0x080043c9
 8004434:	08004505 	.word	0x08004505
 8004438:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800443c:	e7db      	b.n	80043f6 <_scanf_float+0x8e>
 800443e:	290e      	cmp	r1, #14
 8004440:	d8c2      	bhi.n	80043c8 <_scanf_float+0x60>
 8004442:	a001      	add	r0, pc, #4	; (adr r0, 8004448 <_scanf_float+0xe0>)
 8004444:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004448:	080044f7 	.word	0x080044f7
 800444c:	080043c9 	.word	0x080043c9
 8004450:	080044f7 	.word	0x080044f7
 8004454:	0800458b 	.word	0x0800458b
 8004458:	080043c9 	.word	0x080043c9
 800445c:	080044a5 	.word	0x080044a5
 8004460:	080044e1 	.word	0x080044e1
 8004464:	080044e1 	.word	0x080044e1
 8004468:	080044e1 	.word	0x080044e1
 800446c:	080044e1 	.word	0x080044e1
 8004470:	080044e1 	.word	0x080044e1
 8004474:	080044e1 	.word	0x080044e1
 8004478:	080044e1 	.word	0x080044e1
 800447c:	080044e1 	.word	0x080044e1
 8004480:	080044e1 	.word	0x080044e1
 8004484:	2b6e      	cmp	r3, #110	; 0x6e
 8004486:	d809      	bhi.n	800449c <_scanf_float+0x134>
 8004488:	2b60      	cmp	r3, #96	; 0x60
 800448a:	d8b2      	bhi.n	80043f2 <_scanf_float+0x8a>
 800448c:	2b54      	cmp	r3, #84	; 0x54
 800448e:	d077      	beq.n	8004580 <_scanf_float+0x218>
 8004490:	2b59      	cmp	r3, #89	; 0x59
 8004492:	d199      	bne.n	80043c8 <_scanf_float+0x60>
 8004494:	2d07      	cmp	r5, #7
 8004496:	d197      	bne.n	80043c8 <_scanf_float+0x60>
 8004498:	2508      	movs	r5, #8
 800449a:	e029      	b.n	80044f0 <_scanf_float+0x188>
 800449c:	2b74      	cmp	r3, #116	; 0x74
 800449e:	d06f      	beq.n	8004580 <_scanf_float+0x218>
 80044a0:	2b79      	cmp	r3, #121	; 0x79
 80044a2:	e7f6      	b.n	8004492 <_scanf_float+0x12a>
 80044a4:	6821      	ldr	r1, [r4, #0]
 80044a6:	05c8      	lsls	r0, r1, #23
 80044a8:	d51a      	bpl.n	80044e0 <_scanf_float+0x178>
 80044aa:	9b02      	ldr	r3, [sp, #8]
 80044ac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80044b0:	6021      	str	r1, [r4, #0]
 80044b2:	f109 0901 	add.w	r9, r9, #1
 80044b6:	b11b      	cbz	r3, 80044c0 <_scanf_float+0x158>
 80044b8:	3b01      	subs	r3, #1
 80044ba:	3201      	adds	r2, #1
 80044bc:	9302      	str	r3, [sp, #8]
 80044be:	60a2      	str	r2, [r4, #8]
 80044c0:	68a3      	ldr	r3, [r4, #8]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	60a3      	str	r3, [r4, #8]
 80044c6:	6923      	ldr	r3, [r4, #16]
 80044c8:	3301      	adds	r3, #1
 80044ca:	6123      	str	r3, [r4, #16]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	607b      	str	r3, [r7, #4]
 80044d4:	f340 8084 	ble.w	80045e0 <_scanf_float+0x278>
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	3301      	adds	r3, #1
 80044dc:	603b      	str	r3, [r7, #0]
 80044de:	e766      	b.n	80043ae <_scanf_float+0x46>
 80044e0:	eb1a 0f05 	cmn.w	sl, r5
 80044e4:	f47f af70 	bne.w	80043c8 <_scanf_float+0x60>
 80044e8:	6822      	ldr	r2, [r4, #0]
 80044ea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80044ee:	6022      	str	r2, [r4, #0]
 80044f0:	f806 3b01 	strb.w	r3, [r6], #1
 80044f4:	e7e4      	b.n	80044c0 <_scanf_float+0x158>
 80044f6:	6822      	ldr	r2, [r4, #0]
 80044f8:	0610      	lsls	r0, r2, #24
 80044fa:	f57f af65 	bpl.w	80043c8 <_scanf_float+0x60>
 80044fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004502:	e7f4      	b.n	80044ee <_scanf_float+0x186>
 8004504:	f1ba 0f00 	cmp.w	sl, #0
 8004508:	d10e      	bne.n	8004528 <_scanf_float+0x1c0>
 800450a:	f1b9 0f00 	cmp.w	r9, #0
 800450e:	d10e      	bne.n	800452e <_scanf_float+0x1c6>
 8004510:	6822      	ldr	r2, [r4, #0]
 8004512:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004516:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800451a:	d108      	bne.n	800452e <_scanf_float+0x1c6>
 800451c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004520:	6022      	str	r2, [r4, #0]
 8004522:	f04f 0a01 	mov.w	sl, #1
 8004526:	e7e3      	b.n	80044f0 <_scanf_float+0x188>
 8004528:	f1ba 0f02 	cmp.w	sl, #2
 800452c:	d055      	beq.n	80045da <_scanf_float+0x272>
 800452e:	2d01      	cmp	r5, #1
 8004530:	d002      	beq.n	8004538 <_scanf_float+0x1d0>
 8004532:	2d04      	cmp	r5, #4
 8004534:	f47f af48 	bne.w	80043c8 <_scanf_float+0x60>
 8004538:	3501      	adds	r5, #1
 800453a:	b2ed      	uxtb	r5, r5
 800453c:	e7d8      	b.n	80044f0 <_scanf_float+0x188>
 800453e:	f1ba 0f01 	cmp.w	sl, #1
 8004542:	f47f af41 	bne.w	80043c8 <_scanf_float+0x60>
 8004546:	f04f 0a02 	mov.w	sl, #2
 800454a:	e7d1      	b.n	80044f0 <_scanf_float+0x188>
 800454c:	b97d      	cbnz	r5, 800456e <_scanf_float+0x206>
 800454e:	f1b9 0f00 	cmp.w	r9, #0
 8004552:	f47f af3c 	bne.w	80043ce <_scanf_float+0x66>
 8004556:	6822      	ldr	r2, [r4, #0]
 8004558:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800455c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004560:	f47f af39 	bne.w	80043d6 <_scanf_float+0x6e>
 8004564:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004568:	6022      	str	r2, [r4, #0]
 800456a:	2501      	movs	r5, #1
 800456c:	e7c0      	b.n	80044f0 <_scanf_float+0x188>
 800456e:	2d03      	cmp	r5, #3
 8004570:	d0e2      	beq.n	8004538 <_scanf_float+0x1d0>
 8004572:	2d05      	cmp	r5, #5
 8004574:	e7de      	b.n	8004534 <_scanf_float+0x1cc>
 8004576:	2d02      	cmp	r5, #2
 8004578:	f47f af26 	bne.w	80043c8 <_scanf_float+0x60>
 800457c:	2503      	movs	r5, #3
 800457e:	e7b7      	b.n	80044f0 <_scanf_float+0x188>
 8004580:	2d06      	cmp	r5, #6
 8004582:	f47f af21 	bne.w	80043c8 <_scanf_float+0x60>
 8004586:	2507      	movs	r5, #7
 8004588:	e7b2      	b.n	80044f0 <_scanf_float+0x188>
 800458a:	6822      	ldr	r2, [r4, #0]
 800458c:	0591      	lsls	r1, r2, #22
 800458e:	f57f af1b 	bpl.w	80043c8 <_scanf_float+0x60>
 8004592:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004596:	6022      	str	r2, [r4, #0]
 8004598:	f8cd 9004 	str.w	r9, [sp, #4]
 800459c:	e7a8      	b.n	80044f0 <_scanf_float+0x188>
 800459e:	6822      	ldr	r2, [r4, #0]
 80045a0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80045a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80045a8:	d006      	beq.n	80045b8 <_scanf_float+0x250>
 80045aa:	0550      	lsls	r0, r2, #21
 80045ac:	f57f af0c 	bpl.w	80043c8 <_scanf_float+0x60>
 80045b0:	f1b9 0f00 	cmp.w	r9, #0
 80045b4:	f43f af0f 	beq.w	80043d6 <_scanf_float+0x6e>
 80045b8:	0591      	lsls	r1, r2, #22
 80045ba:	bf58      	it	pl
 80045bc:	9901      	ldrpl	r1, [sp, #4]
 80045be:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80045c2:	bf58      	it	pl
 80045c4:	eba9 0101 	subpl.w	r1, r9, r1
 80045c8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80045cc:	bf58      	it	pl
 80045ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80045d2:	6022      	str	r2, [r4, #0]
 80045d4:	f04f 0900 	mov.w	r9, #0
 80045d8:	e78a      	b.n	80044f0 <_scanf_float+0x188>
 80045da:	f04f 0a03 	mov.w	sl, #3
 80045de:	e787      	b.n	80044f0 <_scanf_float+0x188>
 80045e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80045e4:	4639      	mov	r1, r7
 80045e6:	4640      	mov	r0, r8
 80045e8:	4798      	blx	r3
 80045ea:	2800      	cmp	r0, #0
 80045ec:	f43f aedf 	beq.w	80043ae <_scanf_float+0x46>
 80045f0:	e6ea      	b.n	80043c8 <_scanf_float+0x60>
 80045f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80045f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80045fa:	463a      	mov	r2, r7
 80045fc:	4640      	mov	r0, r8
 80045fe:	4798      	blx	r3
 8004600:	6923      	ldr	r3, [r4, #16]
 8004602:	3b01      	subs	r3, #1
 8004604:	6123      	str	r3, [r4, #16]
 8004606:	e6ec      	b.n	80043e2 <_scanf_float+0x7a>
 8004608:	1e6b      	subs	r3, r5, #1
 800460a:	2b06      	cmp	r3, #6
 800460c:	d825      	bhi.n	800465a <_scanf_float+0x2f2>
 800460e:	2d02      	cmp	r5, #2
 8004610:	d836      	bhi.n	8004680 <_scanf_float+0x318>
 8004612:	455e      	cmp	r6, fp
 8004614:	f67f aee8 	bls.w	80043e8 <_scanf_float+0x80>
 8004618:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800461c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004620:	463a      	mov	r2, r7
 8004622:	4640      	mov	r0, r8
 8004624:	4798      	blx	r3
 8004626:	6923      	ldr	r3, [r4, #16]
 8004628:	3b01      	subs	r3, #1
 800462a:	6123      	str	r3, [r4, #16]
 800462c:	e7f1      	b.n	8004612 <_scanf_float+0x2aa>
 800462e:	9802      	ldr	r0, [sp, #8]
 8004630:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004634:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004638:	9002      	str	r0, [sp, #8]
 800463a:	463a      	mov	r2, r7
 800463c:	4640      	mov	r0, r8
 800463e:	4798      	blx	r3
 8004640:	6923      	ldr	r3, [r4, #16]
 8004642:	3b01      	subs	r3, #1
 8004644:	6123      	str	r3, [r4, #16]
 8004646:	f10a 3aff 	add.w	sl, sl, #4294967295
 800464a:	fa5f fa8a 	uxtb.w	sl, sl
 800464e:	f1ba 0f02 	cmp.w	sl, #2
 8004652:	d1ec      	bne.n	800462e <_scanf_float+0x2c6>
 8004654:	3d03      	subs	r5, #3
 8004656:	b2ed      	uxtb	r5, r5
 8004658:	1b76      	subs	r6, r6, r5
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	05da      	lsls	r2, r3, #23
 800465e:	d52f      	bpl.n	80046c0 <_scanf_float+0x358>
 8004660:	055b      	lsls	r3, r3, #21
 8004662:	d510      	bpl.n	8004686 <_scanf_float+0x31e>
 8004664:	455e      	cmp	r6, fp
 8004666:	f67f aebf 	bls.w	80043e8 <_scanf_float+0x80>
 800466a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800466e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004672:	463a      	mov	r2, r7
 8004674:	4640      	mov	r0, r8
 8004676:	4798      	blx	r3
 8004678:	6923      	ldr	r3, [r4, #16]
 800467a:	3b01      	subs	r3, #1
 800467c:	6123      	str	r3, [r4, #16]
 800467e:	e7f1      	b.n	8004664 <_scanf_float+0x2fc>
 8004680:	46aa      	mov	sl, r5
 8004682:	9602      	str	r6, [sp, #8]
 8004684:	e7df      	b.n	8004646 <_scanf_float+0x2de>
 8004686:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800468a:	6923      	ldr	r3, [r4, #16]
 800468c:	2965      	cmp	r1, #101	; 0x65
 800468e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004692:	f106 35ff 	add.w	r5, r6, #4294967295
 8004696:	6123      	str	r3, [r4, #16]
 8004698:	d00c      	beq.n	80046b4 <_scanf_float+0x34c>
 800469a:	2945      	cmp	r1, #69	; 0x45
 800469c:	d00a      	beq.n	80046b4 <_scanf_float+0x34c>
 800469e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046a2:	463a      	mov	r2, r7
 80046a4:	4640      	mov	r0, r8
 80046a6:	4798      	blx	r3
 80046a8:	6923      	ldr	r3, [r4, #16]
 80046aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	1eb5      	subs	r5, r6, #2
 80046b2:	6123      	str	r3, [r4, #16]
 80046b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046b8:	463a      	mov	r2, r7
 80046ba:	4640      	mov	r0, r8
 80046bc:	4798      	blx	r3
 80046be:	462e      	mov	r6, r5
 80046c0:	6825      	ldr	r5, [r4, #0]
 80046c2:	f015 0510 	ands.w	r5, r5, #16
 80046c6:	d159      	bne.n	800477c <_scanf_float+0x414>
 80046c8:	7035      	strb	r5, [r6, #0]
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d4:	d11b      	bne.n	800470e <_scanf_float+0x3a6>
 80046d6:	9b01      	ldr	r3, [sp, #4]
 80046d8:	454b      	cmp	r3, r9
 80046da:	eba3 0209 	sub.w	r2, r3, r9
 80046de:	d123      	bne.n	8004728 <_scanf_float+0x3c0>
 80046e0:	2200      	movs	r2, #0
 80046e2:	4659      	mov	r1, fp
 80046e4:	4640      	mov	r0, r8
 80046e6:	f000 ff35 	bl	8005554 <_strtod_r>
 80046ea:	6822      	ldr	r2, [r4, #0]
 80046ec:	9b03      	ldr	r3, [sp, #12]
 80046ee:	f012 0f02 	tst.w	r2, #2
 80046f2:	ec57 6b10 	vmov	r6, r7, d0
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	d021      	beq.n	800473e <_scanf_float+0x3d6>
 80046fa:	9903      	ldr	r1, [sp, #12]
 80046fc:	1d1a      	adds	r2, r3, #4
 80046fe:	600a      	str	r2, [r1, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	e9c3 6700 	strd	r6, r7, [r3]
 8004706:	68e3      	ldr	r3, [r4, #12]
 8004708:	3301      	adds	r3, #1
 800470a:	60e3      	str	r3, [r4, #12]
 800470c:	e66d      	b.n	80043ea <_scanf_float+0x82>
 800470e:	9b04      	ldr	r3, [sp, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0e5      	beq.n	80046e0 <_scanf_float+0x378>
 8004714:	9905      	ldr	r1, [sp, #20]
 8004716:	230a      	movs	r3, #10
 8004718:	462a      	mov	r2, r5
 800471a:	3101      	adds	r1, #1
 800471c:	4640      	mov	r0, r8
 800471e:	f000 ffad 	bl	800567c <_strtol_r>
 8004722:	9b04      	ldr	r3, [sp, #16]
 8004724:	9e05      	ldr	r6, [sp, #20]
 8004726:	1ac2      	subs	r2, r0, r3
 8004728:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800472c:	429e      	cmp	r6, r3
 800472e:	bf28      	it	cs
 8004730:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004734:	4912      	ldr	r1, [pc, #72]	; (8004780 <_scanf_float+0x418>)
 8004736:	4630      	mov	r0, r6
 8004738:	f000 f8ca 	bl	80048d0 <siprintf>
 800473c:	e7d0      	b.n	80046e0 <_scanf_float+0x378>
 800473e:	9903      	ldr	r1, [sp, #12]
 8004740:	f012 0f04 	tst.w	r2, #4
 8004744:	f103 0204 	add.w	r2, r3, #4
 8004748:	600a      	str	r2, [r1, #0]
 800474a:	d1d9      	bne.n	8004700 <_scanf_float+0x398>
 800474c:	f8d3 8000 	ldr.w	r8, [r3]
 8004750:	ee10 2a10 	vmov	r2, s0
 8004754:	ee10 0a10 	vmov	r0, s0
 8004758:	463b      	mov	r3, r7
 800475a:	4639      	mov	r1, r7
 800475c:	f7fc f9ee 	bl	8000b3c <__aeabi_dcmpun>
 8004760:	b128      	cbz	r0, 800476e <_scanf_float+0x406>
 8004762:	4808      	ldr	r0, [pc, #32]	; (8004784 <_scanf_float+0x41c>)
 8004764:	f000 f8ae 	bl	80048c4 <nanf>
 8004768:	ed88 0a00 	vstr	s0, [r8]
 800476c:	e7cb      	b.n	8004706 <_scanf_float+0x39e>
 800476e:	4630      	mov	r0, r6
 8004770:	4639      	mov	r1, r7
 8004772:	f7fc fa41 	bl	8000bf8 <__aeabi_d2f>
 8004776:	f8c8 0000 	str.w	r0, [r8]
 800477a:	e7c4      	b.n	8004706 <_scanf_float+0x39e>
 800477c:	2500      	movs	r5, #0
 800477e:	e634      	b.n	80043ea <_scanf_float+0x82>
 8004780:	08008b34 	.word	0x08008b34
 8004784:	08008fa8 	.word	0x08008fa8

08004788 <iprintf>:
 8004788:	b40f      	push	{r0, r1, r2, r3}
 800478a:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <iprintf+0x2c>)
 800478c:	b513      	push	{r0, r1, r4, lr}
 800478e:	681c      	ldr	r4, [r3, #0]
 8004790:	b124      	cbz	r4, 800479c <iprintf+0x14>
 8004792:	69a3      	ldr	r3, [r4, #24]
 8004794:	b913      	cbnz	r3, 800479c <iprintf+0x14>
 8004796:	4620      	mov	r0, r4
 8004798:	f001 ffd2 	bl	8006740 <__sinit>
 800479c:	ab05      	add	r3, sp, #20
 800479e:	9a04      	ldr	r2, [sp, #16]
 80047a0:	68a1      	ldr	r1, [r4, #8]
 80047a2:	9301      	str	r3, [sp, #4]
 80047a4:	4620      	mov	r0, r4
 80047a6:	f003 facb 	bl	8007d40 <_vfiprintf_r>
 80047aa:	b002      	add	sp, #8
 80047ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047b0:	b004      	add	sp, #16
 80047b2:	4770      	bx	lr
 80047b4:	20000014 	.word	0x20000014

080047b8 <_puts_r>:
 80047b8:	b570      	push	{r4, r5, r6, lr}
 80047ba:	460e      	mov	r6, r1
 80047bc:	4605      	mov	r5, r0
 80047be:	b118      	cbz	r0, 80047c8 <_puts_r+0x10>
 80047c0:	6983      	ldr	r3, [r0, #24]
 80047c2:	b90b      	cbnz	r3, 80047c8 <_puts_r+0x10>
 80047c4:	f001 ffbc 	bl	8006740 <__sinit>
 80047c8:	69ab      	ldr	r3, [r5, #24]
 80047ca:	68ac      	ldr	r4, [r5, #8]
 80047cc:	b913      	cbnz	r3, 80047d4 <_puts_r+0x1c>
 80047ce:	4628      	mov	r0, r5
 80047d0:	f001 ffb6 	bl	8006740 <__sinit>
 80047d4:	4b2c      	ldr	r3, [pc, #176]	; (8004888 <_puts_r+0xd0>)
 80047d6:	429c      	cmp	r4, r3
 80047d8:	d120      	bne.n	800481c <_puts_r+0x64>
 80047da:	686c      	ldr	r4, [r5, #4]
 80047dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047de:	07db      	lsls	r3, r3, #31
 80047e0:	d405      	bmi.n	80047ee <_puts_r+0x36>
 80047e2:	89a3      	ldrh	r3, [r4, #12]
 80047e4:	0598      	lsls	r0, r3, #22
 80047e6:	d402      	bmi.n	80047ee <_puts_r+0x36>
 80047e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047ea:	f002 fbba 	bl	8006f62 <__retarget_lock_acquire_recursive>
 80047ee:	89a3      	ldrh	r3, [r4, #12]
 80047f0:	0719      	lsls	r1, r3, #28
 80047f2:	d51d      	bpl.n	8004830 <_puts_r+0x78>
 80047f4:	6923      	ldr	r3, [r4, #16]
 80047f6:	b1db      	cbz	r3, 8004830 <_puts_r+0x78>
 80047f8:	3e01      	subs	r6, #1
 80047fa:	68a3      	ldr	r3, [r4, #8]
 80047fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004800:	3b01      	subs	r3, #1
 8004802:	60a3      	str	r3, [r4, #8]
 8004804:	bb39      	cbnz	r1, 8004856 <_puts_r+0x9e>
 8004806:	2b00      	cmp	r3, #0
 8004808:	da38      	bge.n	800487c <_puts_r+0xc4>
 800480a:	4622      	mov	r2, r4
 800480c:	210a      	movs	r1, #10
 800480e:	4628      	mov	r0, r5
 8004810:	f000 ff40 	bl	8005694 <__swbuf_r>
 8004814:	3001      	adds	r0, #1
 8004816:	d011      	beq.n	800483c <_puts_r+0x84>
 8004818:	250a      	movs	r5, #10
 800481a:	e011      	b.n	8004840 <_puts_r+0x88>
 800481c:	4b1b      	ldr	r3, [pc, #108]	; (800488c <_puts_r+0xd4>)
 800481e:	429c      	cmp	r4, r3
 8004820:	d101      	bne.n	8004826 <_puts_r+0x6e>
 8004822:	68ac      	ldr	r4, [r5, #8]
 8004824:	e7da      	b.n	80047dc <_puts_r+0x24>
 8004826:	4b1a      	ldr	r3, [pc, #104]	; (8004890 <_puts_r+0xd8>)
 8004828:	429c      	cmp	r4, r3
 800482a:	bf08      	it	eq
 800482c:	68ec      	ldreq	r4, [r5, #12]
 800482e:	e7d5      	b.n	80047dc <_puts_r+0x24>
 8004830:	4621      	mov	r1, r4
 8004832:	4628      	mov	r0, r5
 8004834:	f000 ff80 	bl	8005738 <__swsetup_r>
 8004838:	2800      	cmp	r0, #0
 800483a:	d0dd      	beq.n	80047f8 <_puts_r+0x40>
 800483c:	f04f 35ff 	mov.w	r5, #4294967295
 8004840:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004842:	07da      	lsls	r2, r3, #31
 8004844:	d405      	bmi.n	8004852 <_puts_r+0x9a>
 8004846:	89a3      	ldrh	r3, [r4, #12]
 8004848:	059b      	lsls	r3, r3, #22
 800484a:	d402      	bmi.n	8004852 <_puts_r+0x9a>
 800484c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800484e:	f002 fb89 	bl	8006f64 <__retarget_lock_release_recursive>
 8004852:	4628      	mov	r0, r5
 8004854:	bd70      	pop	{r4, r5, r6, pc}
 8004856:	2b00      	cmp	r3, #0
 8004858:	da04      	bge.n	8004864 <_puts_r+0xac>
 800485a:	69a2      	ldr	r2, [r4, #24]
 800485c:	429a      	cmp	r2, r3
 800485e:	dc06      	bgt.n	800486e <_puts_r+0xb6>
 8004860:	290a      	cmp	r1, #10
 8004862:	d004      	beq.n	800486e <_puts_r+0xb6>
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	6022      	str	r2, [r4, #0]
 800486a:	7019      	strb	r1, [r3, #0]
 800486c:	e7c5      	b.n	80047fa <_puts_r+0x42>
 800486e:	4622      	mov	r2, r4
 8004870:	4628      	mov	r0, r5
 8004872:	f000 ff0f 	bl	8005694 <__swbuf_r>
 8004876:	3001      	adds	r0, #1
 8004878:	d1bf      	bne.n	80047fa <_puts_r+0x42>
 800487a:	e7df      	b.n	800483c <_puts_r+0x84>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	250a      	movs	r5, #10
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	6022      	str	r2, [r4, #0]
 8004884:	701d      	strb	r5, [r3, #0]
 8004886:	e7db      	b.n	8004840 <_puts_r+0x88>
 8004888:	08008d44 	.word	0x08008d44
 800488c:	08008d64 	.word	0x08008d64
 8004890:	08008d24 	.word	0x08008d24

08004894 <puts>:
 8004894:	4b02      	ldr	r3, [pc, #8]	; (80048a0 <puts+0xc>)
 8004896:	4601      	mov	r1, r0
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	f7ff bf8d 	b.w	80047b8 <_puts_r>
 800489e:	bf00      	nop
 80048a0:	20000014 	.word	0x20000014

080048a4 <_sbrk_r>:
 80048a4:	b538      	push	{r3, r4, r5, lr}
 80048a6:	4d06      	ldr	r5, [pc, #24]	; (80048c0 <_sbrk_r+0x1c>)
 80048a8:	2300      	movs	r3, #0
 80048aa:	4604      	mov	r4, r0
 80048ac:	4608      	mov	r0, r1
 80048ae:	602b      	str	r3, [r5, #0]
 80048b0:	f7fd ff66 	bl	8002780 <_sbrk>
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	d102      	bne.n	80048be <_sbrk_r+0x1a>
 80048b8:	682b      	ldr	r3, [r5, #0]
 80048ba:	b103      	cbz	r3, 80048be <_sbrk_r+0x1a>
 80048bc:	6023      	str	r3, [r4, #0]
 80048be:	bd38      	pop	{r3, r4, r5, pc}
 80048c0:	20000cd0 	.word	0x20000cd0

080048c4 <nanf>:
 80048c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80048cc <nanf+0x8>
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	7fc00000 	.word	0x7fc00000

080048d0 <siprintf>:
 80048d0:	b40e      	push	{r1, r2, r3}
 80048d2:	b500      	push	{lr}
 80048d4:	b09c      	sub	sp, #112	; 0x70
 80048d6:	ab1d      	add	r3, sp, #116	; 0x74
 80048d8:	9002      	str	r0, [sp, #8]
 80048da:	9006      	str	r0, [sp, #24]
 80048dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048e0:	4809      	ldr	r0, [pc, #36]	; (8004908 <siprintf+0x38>)
 80048e2:	9107      	str	r1, [sp, #28]
 80048e4:	9104      	str	r1, [sp, #16]
 80048e6:	4909      	ldr	r1, [pc, #36]	; (800490c <siprintf+0x3c>)
 80048e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80048ec:	9105      	str	r1, [sp, #20]
 80048ee:	6800      	ldr	r0, [r0, #0]
 80048f0:	9301      	str	r3, [sp, #4]
 80048f2:	a902      	add	r1, sp, #8
 80048f4:	f003 f8fa 	bl	8007aec <_svfiprintf_r>
 80048f8:	9b02      	ldr	r3, [sp, #8]
 80048fa:	2200      	movs	r2, #0
 80048fc:	701a      	strb	r2, [r3, #0]
 80048fe:	b01c      	add	sp, #112	; 0x70
 8004900:	f85d eb04 	ldr.w	lr, [sp], #4
 8004904:	b003      	add	sp, #12
 8004906:	4770      	bx	lr
 8004908:	20000014 	.word	0x20000014
 800490c:	ffff0208 	.word	0xffff0208

08004910 <sulp>:
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	4604      	mov	r4, r0
 8004914:	460d      	mov	r5, r1
 8004916:	ec45 4b10 	vmov	d0, r4, r5
 800491a:	4616      	mov	r6, r2
 800491c:	f002 ff26 	bl	800776c <__ulp>
 8004920:	ec51 0b10 	vmov	r0, r1, d0
 8004924:	b17e      	cbz	r6, 8004946 <sulp+0x36>
 8004926:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800492a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800492e:	2b00      	cmp	r3, #0
 8004930:	dd09      	ble.n	8004946 <sulp+0x36>
 8004932:	051b      	lsls	r3, r3, #20
 8004934:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004938:	2400      	movs	r4, #0
 800493a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800493e:	4622      	mov	r2, r4
 8004940:	462b      	mov	r3, r5
 8004942:	f7fb fe61 	bl	8000608 <__aeabi_dmul>
 8004946:	bd70      	pop	{r4, r5, r6, pc}

08004948 <_strtod_l>:
 8004948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800494c:	ed2d 8b02 	vpush	{d8}
 8004950:	b09d      	sub	sp, #116	; 0x74
 8004952:	461f      	mov	r7, r3
 8004954:	2300      	movs	r3, #0
 8004956:	9318      	str	r3, [sp, #96]	; 0x60
 8004958:	4ba2      	ldr	r3, [pc, #648]	; (8004be4 <_strtod_l+0x29c>)
 800495a:	9213      	str	r2, [sp, #76]	; 0x4c
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	9305      	str	r3, [sp, #20]
 8004960:	4604      	mov	r4, r0
 8004962:	4618      	mov	r0, r3
 8004964:	4688      	mov	r8, r1
 8004966:	f7fb fc3b 	bl	80001e0 <strlen>
 800496a:	f04f 0a00 	mov.w	sl, #0
 800496e:	4605      	mov	r5, r0
 8004970:	f04f 0b00 	mov.w	fp, #0
 8004974:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004978:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800497a:	781a      	ldrb	r2, [r3, #0]
 800497c:	2a2b      	cmp	r2, #43	; 0x2b
 800497e:	d04e      	beq.n	8004a1e <_strtod_l+0xd6>
 8004980:	d83b      	bhi.n	80049fa <_strtod_l+0xb2>
 8004982:	2a0d      	cmp	r2, #13
 8004984:	d834      	bhi.n	80049f0 <_strtod_l+0xa8>
 8004986:	2a08      	cmp	r2, #8
 8004988:	d834      	bhi.n	80049f4 <_strtod_l+0xac>
 800498a:	2a00      	cmp	r2, #0
 800498c:	d03e      	beq.n	8004a0c <_strtod_l+0xc4>
 800498e:	2300      	movs	r3, #0
 8004990:	930a      	str	r3, [sp, #40]	; 0x28
 8004992:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8004994:	7833      	ldrb	r3, [r6, #0]
 8004996:	2b30      	cmp	r3, #48	; 0x30
 8004998:	f040 80b0 	bne.w	8004afc <_strtod_l+0x1b4>
 800499c:	7873      	ldrb	r3, [r6, #1]
 800499e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80049a2:	2b58      	cmp	r3, #88	; 0x58
 80049a4:	d168      	bne.n	8004a78 <_strtod_l+0x130>
 80049a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049a8:	9301      	str	r3, [sp, #4]
 80049aa:	ab18      	add	r3, sp, #96	; 0x60
 80049ac:	9702      	str	r7, [sp, #8]
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	4a8d      	ldr	r2, [pc, #564]	; (8004be8 <_strtod_l+0x2a0>)
 80049b2:	ab19      	add	r3, sp, #100	; 0x64
 80049b4:	a917      	add	r1, sp, #92	; 0x5c
 80049b6:	4620      	mov	r0, r4
 80049b8:	f001 ffc6 	bl	8006948 <__gethex>
 80049bc:	f010 0707 	ands.w	r7, r0, #7
 80049c0:	4605      	mov	r5, r0
 80049c2:	d005      	beq.n	80049d0 <_strtod_l+0x88>
 80049c4:	2f06      	cmp	r7, #6
 80049c6:	d12c      	bne.n	8004a22 <_strtod_l+0xda>
 80049c8:	3601      	adds	r6, #1
 80049ca:	2300      	movs	r3, #0
 80049cc:	9617      	str	r6, [sp, #92]	; 0x5c
 80049ce:	930a      	str	r3, [sp, #40]	; 0x28
 80049d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f040 8590 	bne.w	80054f8 <_strtod_l+0xbb0>
 80049d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049da:	b1eb      	cbz	r3, 8004a18 <_strtod_l+0xd0>
 80049dc:	4652      	mov	r2, sl
 80049de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80049e2:	ec43 2b10 	vmov	d0, r2, r3
 80049e6:	b01d      	add	sp, #116	; 0x74
 80049e8:	ecbd 8b02 	vpop	{d8}
 80049ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f0:	2a20      	cmp	r2, #32
 80049f2:	d1cc      	bne.n	800498e <_strtod_l+0x46>
 80049f4:	3301      	adds	r3, #1
 80049f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80049f8:	e7be      	b.n	8004978 <_strtod_l+0x30>
 80049fa:	2a2d      	cmp	r2, #45	; 0x2d
 80049fc:	d1c7      	bne.n	800498e <_strtod_l+0x46>
 80049fe:	2201      	movs	r2, #1
 8004a00:	920a      	str	r2, [sp, #40]	; 0x28
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	9217      	str	r2, [sp, #92]	; 0x5c
 8004a06:	785b      	ldrb	r3, [r3, #1]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1c2      	bne.n	8004992 <_strtod_l+0x4a>
 8004a0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004a0e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f040 856e 	bne.w	80054f4 <_strtod_l+0xbac>
 8004a18:	4652      	mov	r2, sl
 8004a1a:	465b      	mov	r3, fp
 8004a1c:	e7e1      	b.n	80049e2 <_strtod_l+0x9a>
 8004a1e:	2200      	movs	r2, #0
 8004a20:	e7ee      	b.n	8004a00 <_strtod_l+0xb8>
 8004a22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004a24:	b13a      	cbz	r2, 8004a36 <_strtod_l+0xee>
 8004a26:	2135      	movs	r1, #53	; 0x35
 8004a28:	a81a      	add	r0, sp, #104	; 0x68
 8004a2a:	f002 ffaa 	bl	8007982 <__copybits>
 8004a2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004a30:	4620      	mov	r0, r4
 8004a32:	f002 fb69 	bl	8007108 <_Bfree>
 8004a36:	3f01      	subs	r7, #1
 8004a38:	2f04      	cmp	r7, #4
 8004a3a:	d806      	bhi.n	8004a4a <_strtod_l+0x102>
 8004a3c:	e8df f007 	tbb	[pc, r7]
 8004a40:	1714030a 	.word	0x1714030a
 8004a44:	0a          	.byte	0x0a
 8004a45:	00          	.byte	0x00
 8004a46:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8004a4a:	0728      	lsls	r0, r5, #28
 8004a4c:	d5c0      	bpl.n	80049d0 <_strtod_l+0x88>
 8004a4e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004a52:	e7bd      	b.n	80049d0 <_strtod_l+0x88>
 8004a54:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8004a58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004a5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004a5e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004a62:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004a66:	e7f0      	b.n	8004a4a <_strtod_l+0x102>
 8004a68:	f8df b180 	ldr.w	fp, [pc, #384]	; 8004bec <_strtod_l+0x2a4>
 8004a6c:	e7ed      	b.n	8004a4a <_strtod_l+0x102>
 8004a6e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004a72:	f04f 3aff 	mov.w	sl, #4294967295
 8004a76:	e7e8      	b.n	8004a4a <_strtod_l+0x102>
 8004a78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a7a:	1c5a      	adds	r2, r3, #1
 8004a7c:	9217      	str	r2, [sp, #92]	; 0x5c
 8004a7e:	785b      	ldrb	r3, [r3, #1]
 8004a80:	2b30      	cmp	r3, #48	; 0x30
 8004a82:	d0f9      	beq.n	8004a78 <_strtod_l+0x130>
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0a3      	beq.n	80049d0 <_strtod_l+0x88>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	f04f 0900 	mov.w	r9, #0
 8004a8e:	9304      	str	r3, [sp, #16]
 8004a90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a92:	9308      	str	r3, [sp, #32]
 8004a94:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a98:	464f      	mov	r7, r9
 8004a9a:	220a      	movs	r2, #10
 8004a9c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004a9e:	7806      	ldrb	r6, [r0, #0]
 8004aa0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004aa4:	b2d9      	uxtb	r1, r3
 8004aa6:	2909      	cmp	r1, #9
 8004aa8:	d92a      	bls.n	8004b00 <_strtod_l+0x1b8>
 8004aaa:	9905      	ldr	r1, [sp, #20]
 8004aac:	462a      	mov	r2, r5
 8004aae:	f003 fac2 	bl	8008036 <strncmp>
 8004ab2:	b398      	cbz	r0, 8004b1c <_strtod_l+0x1d4>
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	4632      	mov	r2, r6
 8004ab8:	463d      	mov	r5, r7
 8004aba:	9005      	str	r0, [sp, #20]
 8004abc:	4603      	mov	r3, r0
 8004abe:	2a65      	cmp	r2, #101	; 0x65
 8004ac0:	d001      	beq.n	8004ac6 <_strtod_l+0x17e>
 8004ac2:	2a45      	cmp	r2, #69	; 0x45
 8004ac4:	d118      	bne.n	8004af8 <_strtod_l+0x1b0>
 8004ac6:	b91d      	cbnz	r5, 8004ad0 <_strtod_l+0x188>
 8004ac8:	9a04      	ldr	r2, [sp, #16]
 8004aca:	4302      	orrs	r2, r0
 8004acc:	d09e      	beq.n	8004a0c <_strtod_l+0xc4>
 8004ace:	2500      	movs	r5, #0
 8004ad0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8004ad4:	f108 0201 	add.w	r2, r8, #1
 8004ad8:	9217      	str	r2, [sp, #92]	; 0x5c
 8004ada:	f898 2001 	ldrb.w	r2, [r8, #1]
 8004ade:	2a2b      	cmp	r2, #43	; 0x2b
 8004ae0:	d075      	beq.n	8004bce <_strtod_l+0x286>
 8004ae2:	2a2d      	cmp	r2, #45	; 0x2d
 8004ae4:	d07b      	beq.n	8004bde <_strtod_l+0x296>
 8004ae6:	f04f 0c00 	mov.w	ip, #0
 8004aea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004aee:	2909      	cmp	r1, #9
 8004af0:	f240 8082 	bls.w	8004bf8 <_strtod_l+0x2b0>
 8004af4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004af8:	2600      	movs	r6, #0
 8004afa:	e09d      	b.n	8004c38 <_strtod_l+0x2f0>
 8004afc:	2300      	movs	r3, #0
 8004afe:	e7c4      	b.n	8004a8a <_strtod_l+0x142>
 8004b00:	2f08      	cmp	r7, #8
 8004b02:	bfd8      	it	le
 8004b04:	9907      	ldrle	r1, [sp, #28]
 8004b06:	f100 0001 	add.w	r0, r0, #1
 8004b0a:	bfda      	itte	le
 8004b0c:	fb02 3301 	mlale	r3, r2, r1, r3
 8004b10:	9307      	strle	r3, [sp, #28]
 8004b12:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004b16:	3701      	adds	r7, #1
 8004b18:	9017      	str	r0, [sp, #92]	; 0x5c
 8004b1a:	e7bf      	b.n	8004a9c <_strtod_l+0x154>
 8004b1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b1e:	195a      	adds	r2, r3, r5
 8004b20:	9217      	str	r2, [sp, #92]	; 0x5c
 8004b22:	5d5a      	ldrb	r2, [r3, r5]
 8004b24:	2f00      	cmp	r7, #0
 8004b26:	d037      	beq.n	8004b98 <_strtod_l+0x250>
 8004b28:	9005      	str	r0, [sp, #20]
 8004b2a:	463d      	mov	r5, r7
 8004b2c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004b30:	2b09      	cmp	r3, #9
 8004b32:	d912      	bls.n	8004b5a <_strtod_l+0x212>
 8004b34:	2301      	movs	r3, #1
 8004b36:	e7c2      	b.n	8004abe <_strtod_l+0x176>
 8004b38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	9217      	str	r2, [sp, #92]	; 0x5c
 8004b3e:	785a      	ldrb	r2, [r3, #1]
 8004b40:	3001      	adds	r0, #1
 8004b42:	2a30      	cmp	r2, #48	; 0x30
 8004b44:	d0f8      	beq.n	8004b38 <_strtod_l+0x1f0>
 8004b46:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	f200 84d9 	bhi.w	8005502 <_strtod_l+0xbba>
 8004b50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b52:	9005      	str	r0, [sp, #20]
 8004b54:	2000      	movs	r0, #0
 8004b56:	9308      	str	r3, [sp, #32]
 8004b58:	4605      	mov	r5, r0
 8004b5a:	3a30      	subs	r2, #48	; 0x30
 8004b5c:	f100 0301 	add.w	r3, r0, #1
 8004b60:	d014      	beq.n	8004b8c <_strtod_l+0x244>
 8004b62:	9905      	ldr	r1, [sp, #20]
 8004b64:	4419      	add	r1, r3
 8004b66:	9105      	str	r1, [sp, #20]
 8004b68:	462b      	mov	r3, r5
 8004b6a:	eb00 0e05 	add.w	lr, r0, r5
 8004b6e:	210a      	movs	r1, #10
 8004b70:	4573      	cmp	r3, lr
 8004b72:	d113      	bne.n	8004b9c <_strtod_l+0x254>
 8004b74:	182b      	adds	r3, r5, r0
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	f105 0501 	add.w	r5, r5, #1
 8004b7c:	4405      	add	r5, r0
 8004b7e:	dc1c      	bgt.n	8004bba <_strtod_l+0x272>
 8004b80:	9907      	ldr	r1, [sp, #28]
 8004b82:	230a      	movs	r3, #10
 8004b84:	fb03 2301 	mla	r3, r3, r1, r2
 8004b88:	9307      	str	r3, [sp, #28]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004b8e:	1c51      	adds	r1, r2, #1
 8004b90:	9117      	str	r1, [sp, #92]	; 0x5c
 8004b92:	7852      	ldrb	r2, [r2, #1]
 8004b94:	4618      	mov	r0, r3
 8004b96:	e7c9      	b.n	8004b2c <_strtod_l+0x1e4>
 8004b98:	4638      	mov	r0, r7
 8004b9a:	e7d2      	b.n	8004b42 <_strtod_l+0x1fa>
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	dc04      	bgt.n	8004baa <_strtod_l+0x262>
 8004ba0:	9e07      	ldr	r6, [sp, #28]
 8004ba2:	434e      	muls	r6, r1
 8004ba4:	9607      	str	r6, [sp, #28]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	e7e2      	b.n	8004b70 <_strtod_l+0x228>
 8004baa:	f103 0c01 	add.w	ip, r3, #1
 8004bae:	f1bc 0f10 	cmp.w	ip, #16
 8004bb2:	bfd8      	it	le
 8004bb4:	fb01 f909 	mulle.w	r9, r1, r9
 8004bb8:	e7f5      	b.n	8004ba6 <_strtod_l+0x25e>
 8004bba:	2d10      	cmp	r5, #16
 8004bbc:	bfdc      	itt	le
 8004bbe:	230a      	movle	r3, #10
 8004bc0:	fb03 2909 	mlale	r9, r3, r9, r2
 8004bc4:	e7e1      	b.n	8004b8a <_strtod_l+0x242>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	9305      	str	r3, [sp, #20]
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e77c      	b.n	8004ac8 <_strtod_l+0x180>
 8004bce:	f04f 0c00 	mov.w	ip, #0
 8004bd2:	f108 0202 	add.w	r2, r8, #2
 8004bd6:	9217      	str	r2, [sp, #92]	; 0x5c
 8004bd8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8004bdc:	e785      	b.n	8004aea <_strtod_l+0x1a2>
 8004bde:	f04f 0c01 	mov.w	ip, #1
 8004be2:	e7f6      	b.n	8004bd2 <_strtod_l+0x28a>
 8004be4:	08008dec 	.word	0x08008dec
 8004be8:	08008b3c 	.word	0x08008b3c
 8004bec:	7ff00000 	.word	0x7ff00000
 8004bf0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004bf2:	1c51      	adds	r1, r2, #1
 8004bf4:	9117      	str	r1, [sp, #92]	; 0x5c
 8004bf6:	7852      	ldrb	r2, [r2, #1]
 8004bf8:	2a30      	cmp	r2, #48	; 0x30
 8004bfa:	d0f9      	beq.n	8004bf0 <_strtod_l+0x2a8>
 8004bfc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004c00:	2908      	cmp	r1, #8
 8004c02:	f63f af79 	bhi.w	8004af8 <_strtod_l+0x1b0>
 8004c06:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004c0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004c0c:	9206      	str	r2, [sp, #24]
 8004c0e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004c10:	1c51      	adds	r1, r2, #1
 8004c12:	9117      	str	r1, [sp, #92]	; 0x5c
 8004c14:	7852      	ldrb	r2, [r2, #1]
 8004c16:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8004c1a:	2e09      	cmp	r6, #9
 8004c1c:	d937      	bls.n	8004c8e <_strtod_l+0x346>
 8004c1e:	9e06      	ldr	r6, [sp, #24]
 8004c20:	1b89      	subs	r1, r1, r6
 8004c22:	2908      	cmp	r1, #8
 8004c24:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004c28:	dc02      	bgt.n	8004c30 <_strtod_l+0x2e8>
 8004c2a:	4576      	cmp	r6, lr
 8004c2c:	bfa8      	it	ge
 8004c2e:	4676      	movge	r6, lr
 8004c30:	f1bc 0f00 	cmp.w	ip, #0
 8004c34:	d000      	beq.n	8004c38 <_strtod_l+0x2f0>
 8004c36:	4276      	negs	r6, r6
 8004c38:	2d00      	cmp	r5, #0
 8004c3a:	d14d      	bne.n	8004cd8 <_strtod_l+0x390>
 8004c3c:	9904      	ldr	r1, [sp, #16]
 8004c3e:	4301      	orrs	r1, r0
 8004c40:	f47f aec6 	bne.w	80049d0 <_strtod_l+0x88>
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f47f aee1 	bne.w	8004a0c <_strtod_l+0xc4>
 8004c4a:	2a69      	cmp	r2, #105	; 0x69
 8004c4c:	d027      	beq.n	8004c9e <_strtod_l+0x356>
 8004c4e:	dc24      	bgt.n	8004c9a <_strtod_l+0x352>
 8004c50:	2a49      	cmp	r2, #73	; 0x49
 8004c52:	d024      	beq.n	8004c9e <_strtod_l+0x356>
 8004c54:	2a4e      	cmp	r2, #78	; 0x4e
 8004c56:	f47f aed9 	bne.w	8004a0c <_strtod_l+0xc4>
 8004c5a:	499f      	ldr	r1, [pc, #636]	; (8004ed8 <_strtod_l+0x590>)
 8004c5c:	a817      	add	r0, sp, #92	; 0x5c
 8004c5e:	f002 f8cb 	bl	8006df8 <__match>
 8004c62:	2800      	cmp	r0, #0
 8004c64:	f43f aed2 	beq.w	8004a0c <_strtod_l+0xc4>
 8004c68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b28      	cmp	r3, #40	; 0x28
 8004c6e:	d12d      	bne.n	8004ccc <_strtod_l+0x384>
 8004c70:	499a      	ldr	r1, [pc, #616]	; (8004edc <_strtod_l+0x594>)
 8004c72:	aa1a      	add	r2, sp, #104	; 0x68
 8004c74:	a817      	add	r0, sp, #92	; 0x5c
 8004c76:	f002 f8d3 	bl	8006e20 <__hexnan>
 8004c7a:	2805      	cmp	r0, #5
 8004c7c:	d126      	bne.n	8004ccc <_strtod_l+0x384>
 8004c7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c80:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8004c84:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004c88:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004c8c:	e6a0      	b.n	80049d0 <_strtod_l+0x88>
 8004c8e:	210a      	movs	r1, #10
 8004c90:	fb01 2e0e 	mla	lr, r1, lr, r2
 8004c94:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004c98:	e7b9      	b.n	8004c0e <_strtod_l+0x2c6>
 8004c9a:	2a6e      	cmp	r2, #110	; 0x6e
 8004c9c:	e7db      	b.n	8004c56 <_strtod_l+0x30e>
 8004c9e:	4990      	ldr	r1, [pc, #576]	; (8004ee0 <_strtod_l+0x598>)
 8004ca0:	a817      	add	r0, sp, #92	; 0x5c
 8004ca2:	f002 f8a9 	bl	8006df8 <__match>
 8004ca6:	2800      	cmp	r0, #0
 8004ca8:	f43f aeb0 	beq.w	8004a0c <_strtod_l+0xc4>
 8004cac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004cae:	498d      	ldr	r1, [pc, #564]	; (8004ee4 <_strtod_l+0x59c>)
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	a817      	add	r0, sp, #92	; 0x5c
 8004cb4:	9317      	str	r3, [sp, #92]	; 0x5c
 8004cb6:	f002 f89f 	bl	8006df8 <__match>
 8004cba:	b910      	cbnz	r0, 8004cc2 <_strtod_l+0x37a>
 8004cbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	9317      	str	r3, [sp, #92]	; 0x5c
 8004cc2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8004ef4 <_strtod_l+0x5ac>
 8004cc6:	f04f 0a00 	mov.w	sl, #0
 8004cca:	e681      	b.n	80049d0 <_strtod_l+0x88>
 8004ccc:	4886      	ldr	r0, [pc, #536]	; (8004ee8 <_strtod_l+0x5a0>)
 8004cce:	f003 f967 	bl	8007fa0 <nan>
 8004cd2:	ec5b ab10 	vmov	sl, fp, d0
 8004cd6:	e67b      	b.n	80049d0 <_strtod_l+0x88>
 8004cd8:	9b05      	ldr	r3, [sp, #20]
 8004cda:	9807      	ldr	r0, [sp, #28]
 8004cdc:	1af3      	subs	r3, r6, r3
 8004cde:	2f00      	cmp	r7, #0
 8004ce0:	bf08      	it	eq
 8004ce2:	462f      	moveq	r7, r5
 8004ce4:	2d10      	cmp	r5, #16
 8004ce6:	9306      	str	r3, [sp, #24]
 8004ce8:	46a8      	mov	r8, r5
 8004cea:	bfa8      	it	ge
 8004cec:	f04f 0810 	movge.w	r8, #16
 8004cf0:	f7fb fc10 	bl	8000514 <__aeabi_ui2d>
 8004cf4:	2d09      	cmp	r5, #9
 8004cf6:	4682      	mov	sl, r0
 8004cf8:	468b      	mov	fp, r1
 8004cfa:	dd13      	ble.n	8004d24 <_strtod_l+0x3dc>
 8004cfc:	4b7b      	ldr	r3, [pc, #492]	; (8004eec <_strtod_l+0x5a4>)
 8004cfe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004d02:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004d06:	f7fb fc7f 	bl	8000608 <__aeabi_dmul>
 8004d0a:	4682      	mov	sl, r0
 8004d0c:	4648      	mov	r0, r9
 8004d0e:	468b      	mov	fp, r1
 8004d10:	f7fb fc00 	bl	8000514 <__aeabi_ui2d>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4650      	mov	r0, sl
 8004d1a:	4659      	mov	r1, fp
 8004d1c:	f7fb fabe 	bl	800029c <__adddf3>
 8004d20:	4682      	mov	sl, r0
 8004d22:	468b      	mov	fp, r1
 8004d24:	2d0f      	cmp	r5, #15
 8004d26:	dc38      	bgt.n	8004d9a <_strtod_l+0x452>
 8004d28:	9b06      	ldr	r3, [sp, #24]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f43f ae50 	beq.w	80049d0 <_strtod_l+0x88>
 8004d30:	dd24      	ble.n	8004d7c <_strtod_l+0x434>
 8004d32:	2b16      	cmp	r3, #22
 8004d34:	dc0b      	bgt.n	8004d4e <_strtod_l+0x406>
 8004d36:	496d      	ldr	r1, [pc, #436]	; (8004eec <_strtod_l+0x5a4>)
 8004d38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d40:	4652      	mov	r2, sl
 8004d42:	465b      	mov	r3, fp
 8004d44:	f7fb fc60 	bl	8000608 <__aeabi_dmul>
 8004d48:	4682      	mov	sl, r0
 8004d4a:	468b      	mov	fp, r1
 8004d4c:	e640      	b.n	80049d0 <_strtod_l+0x88>
 8004d4e:	9a06      	ldr	r2, [sp, #24]
 8004d50:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004d54:	4293      	cmp	r3, r2
 8004d56:	db20      	blt.n	8004d9a <_strtod_l+0x452>
 8004d58:	4c64      	ldr	r4, [pc, #400]	; (8004eec <_strtod_l+0x5a4>)
 8004d5a:	f1c5 050f 	rsb	r5, r5, #15
 8004d5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004d62:	4652      	mov	r2, sl
 8004d64:	465b      	mov	r3, fp
 8004d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d6a:	f7fb fc4d 	bl	8000608 <__aeabi_dmul>
 8004d6e:	9b06      	ldr	r3, [sp, #24]
 8004d70:	1b5d      	subs	r5, r3, r5
 8004d72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004d76:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004d7a:	e7e3      	b.n	8004d44 <_strtod_l+0x3fc>
 8004d7c:	9b06      	ldr	r3, [sp, #24]
 8004d7e:	3316      	adds	r3, #22
 8004d80:	db0b      	blt.n	8004d9a <_strtod_l+0x452>
 8004d82:	9b05      	ldr	r3, [sp, #20]
 8004d84:	1b9e      	subs	r6, r3, r6
 8004d86:	4b59      	ldr	r3, [pc, #356]	; (8004eec <_strtod_l+0x5a4>)
 8004d88:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004d8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d90:	4650      	mov	r0, sl
 8004d92:	4659      	mov	r1, fp
 8004d94:	f7fb fd62 	bl	800085c <__aeabi_ddiv>
 8004d98:	e7d6      	b.n	8004d48 <_strtod_l+0x400>
 8004d9a:	9b06      	ldr	r3, [sp, #24]
 8004d9c:	eba5 0808 	sub.w	r8, r5, r8
 8004da0:	4498      	add	r8, r3
 8004da2:	f1b8 0f00 	cmp.w	r8, #0
 8004da6:	dd74      	ble.n	8004e92 <_strtod_l+0x54a>
 8004da8:	f018 030f 	ands.w	r3, r8, #15
 8004dac:	d00a      	beq.n	8004dc4 <_strtod_l+0x47c>
 8004dae:	494f      	ldr	r1, [pc, #316]	; (8004eec <_strtod_l+0x5a4>)
 8004db0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004db4:	4652      	mov	r2, sl
 8004db6:	465b      	mov	r3, fp
 8004db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dbc:	f7fb fc24 	bl	8000608 <__aeabi_dmul>
 8004dc0:	4682      	mov	sl, r0
 8004dc2:	468b      	mov	fp, r1
 8004dc4:	f038 080f 	bics.w	r8, r8, #15
 8004dc8:	d04f      	beq.n	8004e6a <_strtod_l+0x522>
 8004dca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004dce:	dd22      	ble.n	8004e16 <_strtod_l+0x4ce>
 8004dd0:	2500      	movs	r5, #0
 8004dd2:	462e      	mov	r6, r5
 8004dd4:	9507      	str	r5, [sp, #28]
 8004dd6:	9505      	str	r5, [sp, #20]
 8004dd8:	2322      	movs	r3, #34	; 0x22
 8004dda:	f8df b118 	ldr.w	fp, [pc, #280]	; 8004ef4 <_strtod_l+0x5ac>
 8004dde:	6023      	str	r3, [r4, #0]
 8004de0:	f04f 0a00 	mov.w	sl, #0
 8004de4:	9b07      	ldr	r3, [sp, #28]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f43f adf2 	beq.w	80049d0 <_strtod_l+0x88>
 8004dec:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004dee:	4620      	mov	r0, r4
 8004df0:	f002 f98a 	bl	8007108 <_Bfree>
 8004df4:	9905      	ldr	r1, [sp, #20]
 8004df6:	4620      	mov	r0, r4
 8004df8:	f002 f986 	bl	8007108 <_Bfree>
 8004dfc:	4631      	mov	r1, r6
 8004dfe:	4620      	mov	r0, r4
 8004e00:	f002 f982 	bl	8007108 <_Bfree>
 8004e04:	9907      	ldr	r1, [sp, #28]
 8004e06:	4620      	mov	r0, r4
 8004e08:	f002 f97e 	bl	8007108 <_Bfree>
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	4620      	mov	r0, r4
 8004e10:	f002 f97a 	bl	8007108 <_Bfree>
 8004e14:	e5dc      	b.n	80049d0 <_strtod_l+0x88>
 8004e16:	4b36      	ldr	r3, [pc, #216]	; (8004ef0 <_strtod_l+0x5a8>)
 8004e18:	9304      	str	r3, [sp, #16]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004e20:	4650      	mov	r0, sl
 8004e22:	4659      	mov	r1, fp
 8004e24:	4699      	mov	r9, r3
 8004e26:	f1b8 0f01 	cmp.w	r8, #1
 8004e2a:	dc21      	bgt.n	8004e70 <_strtod_l+0x528>
 8004e2c:	b10b      	cbz	r3, 8004e32 <_strtod_l+0x4ea>
 8004e2e:	4682      	mov	sl, r0
 8004e30:	468b      	mov	fp, r1
 8004e32:	4b2f      	ldr	r3, [pc, #188]	; (8004ef0 <_strtod_l+0x5a8>)
 8004e34:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004e38:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004e3c:	4652      	mov	r2, sl
 8004e3e:	465b      	mov	r3, fp
 8004e40:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004e44:	f7fb fbe0 	bl	8000608 <__aeabi_dmul>
 8004e48:	4b2a      	ldr	r3, [pc, #168]	; (8004ef4 <_strtod_l+0x5ac>)
 8004e4a:	460a      	mov	r2, r1
 8004e4c:	400b      	ands	r3, r1
 8004e4e:	492a      	ldr	r1, [pc, #168]	; (8004ef8 <_strtod_l+0x5b0>)
 8004e50:	428b      	cmp	r3, r1
 8004e52:	4682      	mov	sl, r0
 8004e54:	d8bc      	bhi.n	8004dd0 <_strtod_l+0x488>
 8004e56:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004e5a:	428b      	cmp	r3, r1
 8004e5c:	bf86      	itte	hi
 8004e5e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8004efc <_strtod_l+0x5b4>
 8004e62:	f04f 3aff 	movhi.w	sl, #4294967295
 8004e66:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	9304      	str	r3, [sp, #16]
 8004e6e:	e084      	b.n	8004f7a <_strtod_l+0x632>
 8004e70:	f018 0f01 	tst.w	r8, #1
 8004e74:	d005      	beq.n	8004e82 <_strtod_l+0x53a>
 8004e76:	9b04      	ldr	r3, [sp, #16]
 8004e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7c:	f7fb fbc4 	bl	8000608 <__aeabi_dmul>
 8004e80:	2301      	movs	r3, #1
 8004e82:	9a04      	ldr	r2, [sp, #16]
 8004e84:	3208      	adds	r2, #8
 8004e86:	f109 0901 	add.w	r9, r9, #1
 8004e8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004e8e:	9204      	str	r2, [sp, #16]
 8004e90:	e7c9      	b.n	8004e26 <_strtod_l+0x4de>
 8004e92:	d0ea      	beq.n	8004e6a <_strtod_l+0x522>
 8004e94:	f1c8 0800 	rsb	r8, r8, #0
 8004e98:	f018 020f 	ands.w	r2, r8, #15
 8004e9c:	d00a      	beq.n	8004eb4 <_strtod_l+0x56c>
 8004e9e:	4b13      	ldr	r3, [pc, #76]	; (8004eec <_strtod_l+0x5a4>)
 8004ea0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ea4:	4650      	mov	r0, sl
 8004ea6:	4659      	mov	r1, fp
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	f7fb fcd6 	bl	800085c <__aeabi_ddiv>
 8004eb0:	4682      	mov	sl, r0
 8004eb2:	468b      	mov	fp, r1
 8004eb4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004eb8:	d0d7      	beq.n	8004e6a <_strtod_l+0x522>
 8004eba:	f1b8 0f1f 	cmp.w	r8, #31
 8004ebe:	dd1f      	ble.n	8004f00 <_strtod_l+0x5b8>
 8004ec0:	2500      	movs	r5, #0
 8004ec2:	462e      	mov	r6, r5
 8004ec4:	9507      	str	r5, [sp, #28]
 8004ec6:	9505      	str	r5, [sp, #20]
 8004ec8:	2322      	movs	r3, #34	; 0x22
 8004eca:	f04f 0a00 	mov.w	sl, #0
 8004ece:	f04f 0b00 	mov.w	fp, #0
 8004ed2:	6023      	str	r3, [r4, #0]
 8004ed4:	e786      	b.n	8004de4 <_strtod_l+0x49c>
 8004ed6:	bf00      	nop
 8004ed8:	08008b0d 	.word	0x08008b0d
 8004edc:	08008b50 	.word	0x08008b50
 8004ee0:	08008b05 	.word	0x08008b05
 8004ee4:	08008c94 	.word	0x08008c94
 8004ee8:	08008fa8 	.word	0x08008fa8
 8004eec:	08008e88 	.word	0x08008e88
 8004ef0:	08008e60 	.word	0x08008e60
 8004ef4:	7ff00000 	.word	0x7ff00000
 8004ef8:	7ca00000 	.word	0x7ca00000
 8004efc:	7fefffff 	.word	0x7fefffff
 8004f00:	f018 0310 	ands.w	r3, r8, #16
 8004f04:	bf18      	it	ne
 8004f06:	236a      	movne	r3, #106	; 0x6a
 8004f08:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80052b8 <_strtod_l+0x970>
 8004f0c:	9304      	str	r3, [sp, #16]
 8004f0e:	4650      	mov	r0, sl
 8004f10:	4659      	mov	r1, fp
 8004f12:	2300      	movs	r3, #0
 8004f14:	f018 0f01 	tst.w	r8, #1
 8004f18:	d004      	beq.n	8004f24 <_strtod_l+0x5dc>
 8004f1a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004f1e:	f7fb fb73 	bl	8000608 <__aeabi_dmul>
 8004f22:	2301      	movs	r3, #1
 8004f24:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004f28:	f109 0908 	add.w	r9, r9, #8
 8004f2c:	d1f2      	bne.n	8004f14 <_strtod_l+0x5cc>
 8004f2e:	b10b      	cbz	r3, 8004f34 <_strtod_l+0x5ec>
 8004f30:	4682      	mov	sl, r0
 8004f32:	468b      	mov	fp, r1
 8004f34:	9b04      	ldr	r3, [sp, #16]
 8004f36:	b1c3      	cbz	r3, 8004f6a <_strtod_l+0x622>
 8004f38:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004f3c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	4659      	mov	r1, fp
 8004f44:	dd11      	ble.n	8004f6a <_strtod_l+0x622>
 8004f46:	2b1f      	cmp	r3, #31
 8004f48:	f340 8124 	ble.w	8005194 <_strtod_l+0x84c>
 8004f4c:	2b34      	cmp	r3, #52	; 0x34
 8004f4e:	bfde      	ittt	le
 8004f50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004f54:	f04f 33ff 	movle.w	r3, #4294967295
 8004f58:	fa03 f202 	lslle.w	r2, r3, r2
 8004f5c:	f04f 0a00 	mov.w	sl, #0
 8004f60:	bfcc      	ite	gt
 8004f62:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004f66:	ea02 0b01 	andle.w	fp, r2, r1
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	4650      	mov	r0, sl
 8004f70:	4659      	mov	r1, fp
 8004f72:	f7fb fdb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f76:	2800      	cmp	r0, #0
 8004f78:	d1a2      	bne.n	8004ec0 <_strtod_l+0x578>
 8004f7a:	9b07      	ldr	r3, [sp, #28]
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	9908      	ldr	r1, [sp, #32]
 8004f80:	462b      	mov	r3, r5
 8004f82:	463a      	mov	r2, r7
 8004f84:	4620      	mov	r0, r4
 8004f86:	f002 f927 	bl	80071d8 <__s2b>
 8004f8a:	9007      	str	r0, [sp, #28]
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	f43f af1f 	beq.w	8004dd0 <_strtod_l+0x488>
 8004f92:	9b05      	ldr	r3, [sp, #20]
 8004f94:	1b9e      	subs	r6, r3, r6
 8004f96:	9b06      	ldr	r3, [sp, #24]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	bfb4      	ite	lt
 8004f9c:	4633      	movlt	r3, r6
 8004f9e:	2300      	movge	r3, #0
 8004fa0:	930c      	str	r3, [sp, #48]	; 0x30
 8004fa2:	9b06      	ldr	r3, [sp, #24]
 8004fa4:	2500      	movs	r5, #0
 8004fa6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004faa:	9312      	str	r3, [sp, #72]	; 0x48
 8004fac:	462e      	mov	r6, r5
 8004fae:	9b07      	ldr	r3, [sp, #28]
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	6859      	ldr	r1, [r3, #4]
 8004fb4:	f002 f868 	bl	8007088 <_Balloc>
 8004fb8:	9005      	str	r0, [sp, #20]
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	f43f af0c 	beq.w	8004dd8 <_strtod_l+0x490>
 8004fc0:	9b07      	ldr	r3, [sp, #28]
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	3202      	adds	r2, #2
 8004fc6:	f103 010c 	add.w	r1, r3, #12
 8004fca:	0092      	lsls	r2, r2, #2
 8004fcc:	300c      	adds	r0, #12
 8004fce:	f002 f841 	bl	8007054 <memcpy>
 8004fd2:	ec4b ab10 	vmov	d0, sl, fp
 8004fd6:	aa1a      	add	r2, sp, #104	; 0x68
 8004fd8:	a919      	add	r1, sp, #100	; 0x64
 8004fda:	4620      	mov	r0, r4
 8004fdc:	f002 fc42 	bl	8007864 <__d2b>
 8004fe0:	ec4b ab18 	vmov	d8, sl, fp
 8004fe4:	9018      	str	r0, [sp, #96]	; 0x60
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	f43f aef6 	beq.w	8004dd8 <_strtod_l+0x490>
 8004fec:	2101      	movs	r1, #1
 8004fee:	4620      	mov	r0, r4
 8004ff0:	f002 f98c 	bl	800730c <__i2b>
 8004ff4:	4606      	mov	r6, r0
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	f43f aeee 	beq.w	8004dd8 <_strtod_l+0x490>
 8004ffc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ffe:	9904      	ldr	r1, [sp, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	bfab      	itete	ge
 8005004:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005006:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005008:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800500a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800500e:	bfac      	ite	ge
 8005010:	eb03 0902 	addge.w	r9, r3, r2
 8005014:	1ad7      	sublt	r7, r2, r3
 8005016:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005018:	eba3 0801 	sub.w	r8, r3, r1
 800501c:	4490      	add	r8, r2
 800501e:	4ba1      	ldr	r3, [pc, #644]	; (80052a4 <_strtod_l+0x95c>)
 8005020:	f108 38ff 	add.w	r8, r8, #4294967295
 8005024:	4598      	cmp	r8, r3
 8005026:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800502a:	f280 80c7 	bge.w	80051bc <_strtod_l+0x874>
 800502e:	eba3 0308 	sub.w	r3, r3, r8
 8005032:	2b1f      	cmp	r3, #31
 8005034:	eba2 0203 	sub.w	r2, r2, r3
 8005038:	f04f 0101 	mov.w	r1, #1
 800503c:	f300 80b1 	bgt.w	80051a2 <_strtod_l+0x85a>
 8005040:	fa01 f303 	lsl.w	r3, r1, r3
 8005044:	930d      	str	r3, [sp, #52]	; 0x34
 8005046:	2300      	movs	r3, #0
 8005048:	9308      	str	r3, [sp, #32]
 800504a:	eb09 0802 	add.w	r8, r9, r2
 800504e:	9b04      	ldr	r3, [sp, #16]
 8005050:	45c1      	cmp	r9, r8
 8005052:	4417      	add	r7, r2
 8005054:	441f      	add	r7, r3
 8005056:	464b      	mov	r3, r9
 8005058:	bfa8      	it	ge
 800505a:	4643      	movge	r3, r8
 800505c:	42bb      	cmp	r3, r7
 800505e:	bfa8      	it	ge
 8005060:	463b      	movge	r3, r7
 8005062:	2b00      	cmp	r3, #0
 8005064:	bfc2      	ittt	gt
 8005066:	eba8 0803 	subgt.w	r8, r8, r3
 800506a:	1aff      	subgt	r7, r7, r3
 800506c:	eba9 0903 	subgt.w	r9, r9, r3
 8005070:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005072:	2b00      	cmp	r3, #0
 8005074:	dd17      	ble.n	80050a6 <_strtod_l+0x75e>
 8005076:	4631      	mov	r1, r6
 8005078:	461a      	mov	r2, r3
 800507a:	4620      	mov	r0, r4
 800507c:	f002 fa06 	bl	800748c <__pow5mult>
 8005080:	4606      	mov	r6, r0
 8005082:	2800      	cmp	r0, #0
 8005084:	f43f aea8 	beq.w	8004dd8 <_strtod_l+0x490>
 8005088:	4601      	mov	r1, r0
 800508a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800508c:	4620      	mov	r0, r4
 800508e:	f002 f953 	bl	8007338 <__multiply>
 8005092:	900b      	str	r0, [sp, #44]	; 0x2c
 8005094:	2800      	cmp	r0, #0
 8005096:	f43f ae9f 	beq.w	8004dd8 <_strtod_l+0x490>
 800509a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800509c:	4620      	mov	r0, r4
 800509e:	f002 f833 	bl	8007108 <_Bfree>
 80050a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050a4:	9318      	str	r3, [sp, #96]	; 0x60
 80050a6:	f1b8 0f00 	cmp.w	r8, #0
 80050aa:	f300 808c 	bgt.w	80051c6 <_strtod_l+0x87e>
 80050ae:	9b06      	ldr	r3, [sp, #24]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	dd08      	ble.n	80050c6 <_strtod_l+0x77e>
 80050b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80050b6:	9905      	ldr	r1, [sp, #20]
 80050b8:	4620      	mov	r0, r4
 80050ba:	f002 f9e7 	bl	800748c <__pow5mult>
 80050be:	9005      	str	r0, [sp, #20]
 80050c0:	2800      	cmp	r0, #0
 80050c2:	f43f ae89 	beq.w	8004dd8 <_strtod_l+0x490>
 80050c6:	2f00      	cmp	r7, #0
 80050c8:	dd08      	ble.n	80050dc <_strtod_l+0x794>
 80050ca:	9905      	ldr	r1, [sp, #20]
 80050cc:	463a      	mov	r2, r7
 80050ce:	4620      	mov	r0, r4
 80050d0:	f002 fa36 	bl	8007540 <__lshift>
 80050d4:	9005      	str	r0, [sp, #20]
 80050d6:	2800      	cmp	r0, #0
 80050d8:	f43f ae7e 	beq.w	8004dd8 <_strtod_l+0x490>
 80050dc:	f1b9 0f00 	cmp.w	r9, #0
 80050e0:	dd08      	ble.n	80050f4 <_strtod_l+0x7ac>
 80050e2:	4631      	mov	r1, r6
 80050e4:	464a      	mov	r2, r9
 80050e6:	4620      	mov	r0, r4
 80050e8:	f002 fa2a 	bl	8007540 <__lshift>
 80050ec:	4606      	mov	r6, r0
 80050ee:	2800      	cmp	r0, #0
 80050f0:	f43f ae72 	beq.w	8004dd8 <_strtod_l+0x490>
 80050f4:	9a05      	ldr	r2, [sp, #20]
 80050f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80050f8:	4620      	mov	r0, r4
 80050fa:	f002 faad 	bl	8007658 <__mdiff>
 80050fe:	4605      	mov	r5, r0
 8005100:	2800      	cmp	r0, #0
 8005102:	f43f ae69 	beq.w	8004dd8 <_strtod_l+0x490>
 8005106:	68c3      	ldr	r3, [r0, #12]
 8005108:	930b      	str	r3, [sp, #44]	; 0x2c
 800510a:	2300      	movs	r3, #0
 800510c:	60c3      	str	r3, [r0, #12]
 800510e:	4631      	mov	r1, r6
 8005110:	f002 fa86 	bl	8007620 <__mcmp>
 8005114:	2800      	cmp	r0, #0
 8005116:	da60      	bge.n	80051da <_strtod_l+0x892>
 8005118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800511a:	ea53 030a 	orrs.w	r3, r3, sl
 800511e:	f040 8082 	bne.w	8005226 <_strtod_l+0x8de>
 8005122:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005126:	2b00      	cmp	r3, #0
 8005128:	d17d      	bne.n	8005226 <_strtod_l+0x8de>
 800512a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800512e:	0d1b      	lsrs	r3, r3, #20
 8005130:	051b      	lsls	r3, r3, #20
 8005132:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005136:	d976      	bls.n	8005226 <_strtod_l+0x8de>
 8005138:	696b      	ldr	r3, [r5, #20]
 800513a:	b913      	cbnz	r3, 8005142 <_strtod_l+0x7fa>
 800513c:	692b      	ldr	r3, [r5, #16]
 800513e:	2b01      	cmp	r3, #1
 8005140:	dd71      	ble.n	8005226 <_strtod_l+0x8de>
 8005142:	4629      	mov	r1, r5
 8005144:	2201      	movs	r2, #1
 8005146:	4620      	mov	r0, r4
 8005148:	f002 f9fa 	bl	8007540 <__lshift>
 800514c:	4631      	mov	r1, r6
 800514e:	4605      	mov	r5, r0
 8005150:	f002 fa66 	bl	8007620 <__mcmp>
 8005154:	2800      	cmp	r0, #0
 8005156:	dd66      	ble.n	8005226 <_strtod_l+0x8de>
 8005158:	9904      	ldr	r1, [sp, #16]
 800515a:	4a53      	ldr	r2, [pc, #332]	; (80052a8 <_strtod_l+0x960>)
 800515c:	465b      	mov	r3, fp
 800515e:	2900      	cmp	r1, #0
 8005160:	f000 8081 	beq.w	8005266 <_strtod_l+0x91e>
 8005164:	ea02 010b 	and.w	r1, r2, fp
 8005168:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800516c:	dc7b      	bgt.n	8005266 <_strtod_l+0x91e>
 800516e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005172:	f77f aea9 	ble.w	8004ec8 <_strtod_l+0x580>
 8005176:	4b4d      	ldr	r3, [pc, #308]	; (80052ac <_strtod_l+0x964>)
 8005178:	4650      	mov	r0, sl
 800517a:	4659      	mov	r1, fp
 800517c:	2200      	movs	r2, #0
 800517e:	f7fb fa43 	bl	8000608 <__aeabi_dmul>
 8005182:	460b      	mov	r3, r1
 8005184:	4303      	orrs	r3, r0
 8005186:	bf08      	it	eq
 8005188:	2322      	moveq	r3, #34	; 0x22
 800518a:	4682      	mov	sl, r0
 800518c:	468b      	mov	fp, r1
 800518e:	bf08      	it	eq
 8005190:	6023      	streq	r3, [r4, #0]
 8005192:	e62b      	b.n	8004dec <_strtod_l+0x4a4>
 8005194:	f04f 32ff 	mov.w	r2, #4294967295
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	ea03 0a0a 	and.w	sl, r3, sl
 80051a0:	e6e3      	b.n	8004f6a <_strtod_l+0x622>
 80051a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80051a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80051aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80051ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80051b2:	fa01 f308 	lsl.w	r3, r1, r8
 80051b6:	9308      	str	r3, [sp, #32]
 80051b8:	910d      	str	r1, [sp, #52]	; 0x34
 80051ba:	e746      	b.n	800504a <_strtod_l+0x702>
 80051bc:	2300      	movs	r3, #0
 80051be:	9308      	str	r3, [sp, #32]
 80051c0:	2301      	movs	r3, #1
 80051c2:	930d      	str	r3, [sp, #52]	; 0x34
 80051c4:	e741      	b.n	800504a <_strtod_l+0x702>
 80051c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80051c8:	4642      	mov	r2, r8
 80051ca:	4620      	mov	r0, r4
 80051cc:	f002 f9b8 	bl	8007540 <__lshift>
 80051d0:	9018      	str	r0, [sp, #96]	; 0x60
 80051d2:	2800      	cmp	r0, #0
 80051d4:	f47f af6b 	bne.w	80050ae <_strtod_l+0x766>
 80051d8:	e5fe      	b.n	8004dd8 <_strtod_l+0x490>
 80051da:	465f      	mov	r7, fp
 80051dc:	d16e      	bne.n	80052bc <_strtod_l+0x974>
 80051de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80051e4:	b342      	cbz	r2, 8005238 <_strtod_l+0x8f0>
 80051e6:	4a32      	ldr	r2, [pc, #200]	; (80052b0 <_strtod_l+0x968>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d128      	bne.n	800523e <_strtod_l+0x8f6>
 80051ec:	9b04      	ldr	r3, [sp, #16]
 80051ee:	4651      	mov	r1, sl
 80051f0:	b1eb      	cbz	r3, 800522e <_strtod_l+0x8e6>
 80051f2:	4b2d      	ldr	r3, [pc, #180]	; (80052a8 <_strtod_l+0x960>)
 80051f4:	403b      	ands	r3, r7
 80051f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80051fa:	f04f 32ff 	mov.w	r2, #4294967295
 80051fe:	d819      	bhi.n	8005234 <_strtod_l+0x8ec>
 8005200:	0d1b      	lsrs	r3, r3, #20
 8005202:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	4299      	cmp	r1, r3
 800520c:	d117      	bne.n	800523e <_strtod_l+0x8f6>
 800520e:	4b29      	ldr	r3, [pc, #164]	; (80052b4 <_strtod_l+0x96c>)
 8005210:	429f      	cmp	r7, r3
 8005212:	d102      	bne.n	800521a <_strtod_l+0x8d2>
 8005214:	3101      	adds	r1, #1
 8005216:	f43f addf 	beq.w	8004dd8 <_strtod_l+0x490>
 800521a:	4b23      	ldr	r3, [pc, #140]	; (80052a8 <_strtod_l+0x960>)
 800521c:	403b      	ands	r3, r7
 800521e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005222:	f04f 0a00 	mov.w	sl, #0
 8005226:	9b04      	ldr	r3, [sp, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1a4      	bne.n	8005176 <_strtod_l+0x82e>
 800522c:	e5de      	b.n	8004dec <_strtod_l+0x4a4>
 800522e:	f04f 33ff 	mov.w	r3, #4294967295
 8005232:	e7ea      	b.n	800520a <_strtod_l+0x8c2>
 8005234:	4613      	mov	r3, r2
 8005236:	e7e8      	b.n	800520a <_strtod_l+0x8c2>
 8005238:	ea53 030a 	orrs.w	r3, r3, sl
 800523c:	d08c      	beq.n	8005158 <_strtod_l+0x810>
 800523e:	9b08      	ldr	r3, [sp, #32]
 8005240:	b1db      	cbz	r3, 800527a <_strtod_l+0x932>
 8005242:	423b      	tst	r3, r7
 8005244:	d0ef      	beq.n	8005226 <_strtod_l+0x8de>
 8005246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005248:	9a04      	ldr	r2, [sp, #16]
 800524a:	4650      	mov	r0, sl
 800524c:	4659      	mov	r1, fp
 800524e:	b1c3      	cbz	r3, 8005282 <_strtod_l+0x93a>
 8005250:	f7ff fb5e 	bl	8004910 <sulp>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	ec51 0b18 	vmov	r0, r1, d8
 800525c:	f7fb f81e 	bl	800029c <__adddf3>
 8005260:	4682      	mov	sl, r0
 8005262:	468b      	mov	fp, r1
 8005264:	e7df      	b.n	8005226 <_strtod_l+0x8de>
 8005266:	4013      	ands	r3, r2
 8005268:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800526c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005270:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005274:	f04f 3aff 	mov.w	sl, #4294967295
 8005278:	e7d5      	b.n	8005226 <_strtod_l+0x8de>
 800527a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800527c:	ea13 0f0a 	tst.w	r3, sl
 8005280:	e7e0      	b.n	8005244 <_strtod_l+0x8fc>
 8005282:	f7ff fb45 	bl	8004910 <sulp>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	ec51 0b18 	vmov	r0, r1, d8
 800528e:	f7fb f803 	bl	8000298 <__aeabi_dsub>
 8005292:	2200      	movs	r2, #0
 8005294:	2300      	movs	r3, #0
 8005296:	4682      	mov	sl, r0
 8005298:	468b      	mov	fp, r1
 800529a:	f7fb fc1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800529e:	2800      	cmp	r0, #0
 80052a0:	d0c1      	beq.n	8005226 <_strtod_l+0x8de>
 80052a2:	e611      	b.n	8004ec8 <_strtod_l+0x580>
 80052a4:	fffffc02 	.word	0xfffffc02
 80052a8:	7ff00000 	.word	0x7ff00000
 80052ac:	39500000 	.word	0x39500000
 80052b0:	000fffff 	.word	0x000fffff
 80052b4:	7fefffff 	.word	0x7fefffff
 80052b8:	08008b68 	.word	0x08008b68
 80052bc:	4631      	mov	r1, r6
 80052be:	4628      	mov	r0, r5
 80052c0:	f002 fb2c 	bl	800791c <__ratio>
 80052c4:	ec59 8b10 	vmov	r8, r9, d0
 80052c8:	ee10 0a10 	vmov	r0, s0
 80052cc:	2200      	movs	r2, #0
 80052ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052d2:	4649      	mov	r1, r9
 80052d4:	f7fb fc14 	bl	8000b00 <__aeabi_dcmple>
 80052d8:	2800      	cmp	r0, #0
 80052da:	d07a      	beq.n	80053d2 <_strtod_l+0xa8a>
 80052dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d04a      	beq.n	8005378 <_strtod_l+0xa30>
 80052e2:	4b95      	ldr	r3, [pc, #596]	; (8005538 <_strtod_l+0xbf0>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80052ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005538 <_strtod_l+0xbf0>
 80052ee:	f04f 0800 	mov.w	r8, #0
 80052f2:	4b92      	ldr	r3, [pc, #584]	; (800553c <_strtod_l+0xbf4>)
 80052f4:	403b      	ands	r3, r7
 80052f6:	930d      	str	r3, [sp, #52]	; 0x34
 80052f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80052fa:	4b91      	ldr	r3, [pc, #580]	; (8005540 <_strtod_l+0xbf8>)
 80052fc:	429a      	cmp	r2, r3
 80052fe:	f040 80b0 	bne.w	8005462 <_strtod_l+0xb1a>
 8005302:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005306:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800530a:	ec4b ab10 	vmov	d0, sl, fp
 800530e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005312:	f002 fa2b 	bl	800776c <__ulp>
 8005316:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800531a:	ec53 2b10 	vmov	r2, r3, d0
 800531e:	f7fb f973 	bl	8000608 <__aeabi_dmul>
 8005322:	4652      	mov	r2, sl
 8005324:	465b      	mov	r3, fp
 8005326:	f7fa ffb9 	bl	800029c <__adddf3>
 800532a:	460b      	mov	r3, r1
 800532c:	4983      	ldr	r1, [pc, #524]	; (800553c <_strtod_l+0xbf4>)
 800532e:	4a85      	ldr	r2, [pc, #532]	; (8005544 <_strtod_l+0xbfc>)
 8005330:	4019      	ands	r1, r3
 8005332:	4291      	cmp	r1, r2
 8005334:	4682      	mov	sl, r0
 8005336:	d960      	bls.n	80053fa <_strtod_l+0xab2>
 8005338:	ee18 3a90 	vmov	r3, s17
 800533c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005340:	4293      	cmp	r3, r2
 8005342:	d104      	bne.n	800534e <_strtod_l+0xa06>
 8005344:	ee18 3a10 	vmov	r3, s16
 8005348:	3301      	adds	r3, #1
 800534a:	f43f ad45 	beq.w	8004dd8 <_strtod_l+0x490>
 800534e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005550 <_strtod_l+0xc08>
 8005352:	f04f 3aff 	mov.w	sl, #4294967295
 8005356:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005358:	4620      	mov	r0, r4
 800535a:	f001 fed5 	bl	8007108 <_Bfree>
 800535e:	9905      	ldr	r1, [sp, #20]
 8005360:	4620      	mov	r0, r4
 8005362:	f001 fed1 	bl	8007108 <_Bfree>
 8005366:	4631      	mov	r1, r6
 8005368:	4620      	mov	r0, r4
 800536a:	f001 fecd 	bl	8007108 <_Bfree>
 800536e:	4629      	mov	r1, r5
 8005370:	4620      	mov	r0, r4
 8005372:	f001 fec9 	bl	8007108 <_Bfree>
 8005376:	e61a      	b.n	8004fae <_strtod_l+0x666>
 8005378:	f1ba 0f00 	cmp.w	sl, #0
 800537c:	d11b      	bne.n	80053b6 <_strtod_l+0xa6e>
 800537e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005382:	b9f3      	cbnz	r3, 80053c2 <_strtod_l+0xa7a>
 8005384:	4b6c      	ldr	r3, [pc, #432]	; (8005538 <_strtod_l+0xbf0>)
 8005386:	2200      	movs	r2, #0
 8005388:	4640      	mov	r0, r8
 800538a:	4649      	mov	r1, r9
 800538c:	f7fb fbae 	bl	8000aec <__aeabi_dcmplt>
 8005390:	b9d0      	cbnz	r0, 80053c8 <_strtod_l+0xa80>
 8005392:	4640      	mov	r0, r8
 8005394:	4649      	mov	r1, r9
 8005396:	4b6c      	ldr	r3, [pc, #432]	; (8005548 <_strtod_l+0xc00>)
 8005398:	2200      	movs	r2, #0
 800539a:	f7fb f935 	bl	8000608 <__aeabi_dmul>
 800539e:	4680      	mov	r8, r0
 80053a0:	4689      	mov	r9, r1
 80053a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80053a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80053aa:	9315      	str	r3, [sp, #84]	; 0x54
 80053ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80053b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80053b4:	e79d      	b.n	80052f2 <_strtod_l+0x9aa>
 80053b6:	f1ba 0f01 	cmp.w	sl, #1
 80053ba:	d102      	bne.n	80053c2 <_strtod_l+0xa7a>
 80053bc:	2f00      	cmp	r7, #0
 80053be:	f43f ad83 	beq.w	8004ec8 <_strtod_l+0x580>
 80053c2:	4b62      	ldr	r3, [pc, #392]	; (800554c <_strtod_l+0xc04>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	e78e      	b.n	80052e6 <_strtod_l+0x99e>
 80053c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005548 <_strtod_l+0xc00>
 80053cc:	f04f 0800 	mov.w	r8, #0
 80053d0:	e7e7      	b.n	80053a2 <_strtod_l+0xa5a>
 80053d2:	4b5d      	ldr	r3, [pc, #372]	; (8005548 <_strtod_l+0xc00>)
 80053d4:	4640      	mov	r0, r8
 80053d6:	4649      	mov	r1, r9
 80053d8:	2200      	movs	r2, #0
 80053da:	f7fb f915 	bl	8000608 <__aeabi_dmul>
 80053de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053e0:	4680      	mov	r8, r0
 80053e2:	4689      	mov	r9, r1
 80053e4:	b933      	cbnz	r3, 80053f4 <_strtod_l+0xaac>
 80053e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053ea:	900e      	str	r0, [sp, #56]	; 0x38
 80053ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80053ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80053f2:	e7dd      	b.n	80053b0 <_strtod_l+0xa68>
 80053f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80053f8:	e7f9      	b.n	80053ee <_strtod_l+0xaa6>
 80053fa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80053fe:	9b04      	ldr	r3, [sp, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1a8      	bne.n	8005356 <_strtod_l+0xa0e>
 8005404:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005408:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800540a:	0d1b      	lsrs	r3, r3, #20
 800540c:	051b      	lsls	r3, r3, #20
 800540e:	429a      	cmp	r2, r3
 8005410:	d1a1      	bne.n	8005356 <_strtod_l+0xa0e>
 8005412:	4640      	mov	r0, r8
 8005414:	4649      	mov	r1, r9
 8005416:	f7fb fc8f 	bl	8000d38 <__aeabi_d2lz>
 800541a:	f7fb f8c7 	bl	80005ac <__aeabi_l2d>
 800541e:	4602      	mov	r2, r0
 8005420:	460b      	mov	r3, r1
 8005422:	4640      	mov	r0, r8
 8005424:	4649      	mov	r1, r9
 8005426:	f7fa ff37 	bl	8000298 <__aeabi_dsub>
 800542a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800542c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005430:	ea43 030a 	orr.w	r3, r3, sl
 8005434:	4313      	orrs	r3, r2
 8005436:	4680      	mov	r8, r0
 8005438:	4689      	mov	r9, r1
 800543a:	d055      	beq.n	80054e8 <_strtod_l+0xba0>
 800543c:	a336      	add	r3, pc, #216	; (adr r3, 8005518 <_strtod_l+0xbd0>)
 800543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005442:	f7fb fb53 	bl	8000aec <__aeabi_dcmplt>
 8005446:	2800      	cmp	r0, #0
 8005448:	f47f acd0 	bne.w	8004dec <_strtod_l+0x4a4>
 800544c:	a334      	add	r3, pc, #208	; (adr r3, 8005520 <_strtod_l+0xbd8>)
 800544e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005452:	4640      	mov	r0, r8
 8005454:	4649      	mov	r1, r9
 8005456:	f7fb fb67 	bl	8000b28 <__aeabi_dcmpgt>
 800545a:	2800      	cmp	r0, #0
 800545c:	f43f af7b 	beq.w	8005356 <_strtod_l+0xa0e>
 8005460:	e4c4      	b.n	8004dec <_strtod_l+0x4a4>
 8005462:	9b04      	ldr	r3, [sp, #16]
 8005464:	b333      	cbz	r3, 80054b4 <_strtod_l+0xb6c>
 8005466:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005468:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800546c:	d822      	bhi.n	80054b4 <_strtod_l+0xb6c>
 800546e:	a32e      	add	r3, pc, #184	; (adr r3, 8005528 <_strtod_l+0xbe0>)
 8005470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005474:	4640      	mov	r0, r8
 8005476:	4649      	mov	r1, r9
 8005478:	f7fb fb42 	bl	8000b00 <__aeabi_dcmple>
 800547c:	b1a0      	cbz	r0, 80054a8 <_strtod_l+0xb60>
 800547e:	4649      	mov	r1, r9
 8005480:	4640      	mov	r0, r8
 8005482:	f7fb fb99 	bl	8000bb8 <__aeabi_d2uiz>
 8005486:	2801      	cmp	r0, #1
 8005488:	bf38      	it	cc
 800548a:	2001      	movcc	r0, #1
 800548c:	f7fb f842 	bl	8000514 <__aeabi_ui2d>
 8005490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005492:	4680      	mov	r8, r0
 8005494:	4689      	mov	r9, r1
 8005496:	bb23      	cbnz	r3, 80054e2 <_strtod_l+0xb9a>
 8005498:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800549c:	9010      	str	r0, [sp, #64]	; 0x40
 800549e:	9311      	str	r3, [sp, #68]	; 0x44
 80054a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80054a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80054ac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80054b0:	1a9b      	subs	r3, r3, r2
 80054b2:	9309      	str	r3, [sp, #36]	; 0x24
 80054b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80054b8:	eeb0 0a48 	vmov.f32	s0, s16
 80054bc:	eef0 0a68 	vmov.f32	s1, s17
 80054c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80054c4:	f002 f952 	bl	800776c <__ulp>
 80054c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80054cc:	ec53 2b10 	vmov	r2, r3, d0
 80054d0:	f7fb f89a 	bl	8000608 <__aeabi_dmul>
 80054d4:	ec53 2b18 	vmov	r2, r3, d8
 80054d8:	f7fa fee0 	bl	800029c <__adddf3>
 80054dc:	4682      	mov	sl, r0
 80054de:	468b      	mov	fp, r1
 80054e0:	e78d      	b.n	80053fe <_strtod_l+0xab6>
 80054e2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80054e6:	e7db      	b.n	80054a0 <_strtod_l+0xb58>
 80054e8:	a311      	add	r3, pc, #68	; (adr r3, 8005530 <_strtod_l+0xbe8>)
 80054ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ee:	f7fb fafd 	bl	8000aec <__aeabi_dcmplt>
 80054f2:	e7b2      	b.n	800545a <_strtod_l+0xb12>
 80054f4:	2300      	movs	r3, #0
 80054f6:	930a      	str	r3, [sp, #40]	; 0x28
 80054f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80054fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	f7ff ba6b 	b.w	80049d8 <_strtod_l+0x90>
 8005502:	2a65      	cmp	r2, #101	; 0x65
 8005504:	f43f ab5f 	beq.w	8004bc6 <_strtod_l+0x27e>
 8005508:	2a45      	cmp	r2, #69	; 0x45
 800550a:	f43f ab5c 	beq.w	8004bc6 <_strtod_l+0x27e>
 800550e:	2301      	movs	r3, #1
 8005510:	f7ff bb94 	b.w	8004c3c <_strtod_l+0x2f4>
 8005514:	f3af 8000 	nop.w
 8005518:	94a03595 	.word	0x94a03595
 800551c:	3fdfffff 	.word	0x3fdfffff
 8005520:	35afe535 	.word	0x35afe535
 8005524:	3fe00000 	.word	0x3fe00000
 8005528:	ffc00000 	.word	0xffc00000
 800552c:	41dfffff 	.word	0x41dfffff
 8005530:	94a03595 	.word	0x94a03595
 8005534:	3fcfffff 	.word	0x3fcfffff
 8005538:	3ff00000 	.word	0x3ff00000
 800553c:	7ff00000 	.word	0x7ff00000
 8005540:	7fe00000 	.word	0x7fe00000
 8005544:	7c9fffff 	.word	0x7c9fffff
 8005548:	3fe00000 	.word	0x3fe00000
 800554c:	bff00000 	.word	0xbff00000
 8005550:	7fefffff 	.word	0x7fefffff

08005554 <_strtod_r>:
 8005554:	4b01      	ldr	r3, [pc, #4]	; (800555c <_strtod_r+0x8>)
 8005556:	f7ff b9f7 	b.w	8004948 <_strtod_l>
 800555a:	bf00      	nop
 800555c:	2000007c 	.word	0x2000007c

08005560 <strtod>:
 8005560:	460a      	mov	r2, r1
 8005562:	4601      	mov	r1, r0
 8005564:	4802      	ldr	r0, [pc, #8]	; (8005570 <strtod+0x10>)
 8005566:	4b03      	ldr	r3, [pc, #12]	; (8005574 <strtod+0x14>)
 8005568:	6800      	ldr	r0, [r0, #0]
 800556a:	f7ff b9ed 	b.w	8004948 <_strtod_l>
 800556e:	bf00      	nop
 8005570:	20000014 	.word	0x20000014
 8005574:	2000007c 	.word	0x2000007c

08005578 <_strtol_l.constprop.0>:
 8005578:	2b01      	cmp	r3, #1
 800557a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800557e:	d001      	beq.n	8005584 <_strtol_l.constprop.0+0xc>
 8005580:	2b24      	cmp	r3, #36	; 0x24
 8005582:	d906      	bls.n	8005592 <_strtol_l.constprop.0+0x1a>
 8005584:	f7fe f950 	bl	8003828 <__errno>
 8005588:	2316      	movs	r3, #22
 800558a:	6003      	str	r3, [r0, #0]
 800558c:	2000      	movs	r0, #0
 800558e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005592:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005678 <_strtol_l.constprop.0+0x100>
 8005596:	460d      	mov	r5, r1
 8005598:	462e      	mov	r6, r5
 800559a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800559e:	f814 700c 	ldrb.w	r7, [r4, ip]
 80055a2:	f017 0708 	ands.w	r7, r7, #8
 80055a6:	d1f7      	bne.n	8005598 <_strtol_l.constprop.0+0x20>
 80055a8:	2c2d      	cmp	r4, #45	; 0x2d
 80055aa:	d132      	bne.n	8005612 <_strtol_l.constprop.0+0x9a>
 80055ac:	782c      	ldrb	r4, [r5, #0]
 80055ae:	2701      	movs	r7, #1
 80055b0:	1cb5      	adds	r5, r6, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d05b      	beq.n	800566e <_strtol_l.constprop.0+0xf6>
 80055b6:	2b10      	cmp	r3, #16
 80055b8:	d109      	bne.n	80055ce <_strtol_l.constprop.0+0x56>
 80055ba:	2c30      	cmp	r4, #48	; 0x30
 80055bc:	d107      	bne.n	80055ce <_strtol_l.constprop.0+0x56>
 80055be:	782c      	ldrb	r4, [r5, #0]
 80055c0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80055c4:	2c58      	cmp	r4, #88	; 0x58
 80055c6:	d14d      	bne.n	8005664 <_strtol_l.constprop.0+0xec>
 80055c8:	786c      	ldrb	r4, [r5, #1]
 80055ca:	2310      	movs	r3, #16
 80055cc:	3502      	adds	r5, #2
 80055ce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80055d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80055d6:	f04f 0c00 	mov.w	ip, #0
 80055da:	fbb8 f9f3 	udiv	r9, r8, r3
 80055de:	4666      	mov	r6, ip
 80055e0:	fb03 8a19 	mls	sl, r3, r9, r8
 80055e4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80055e8:	f1be 0f09 	cmp.w	lr, #9
 80055ec:	d816      	bhi.n	800561c <_strtol_l.constprop.0+0xa4>
 80055ee:	4674      	mov	r4, lr
 80055f0:	42a3      	cmp	r3, r4
 80055f2:	dd24      	ble.n	800563e <_strtol_l.constprop.0+0xc6>
 80055f4:	f1bc 0f00 	cmp.w	ip, #0
 80055f8:	db1e      	blt.n	8005638 <_strtol_l.constprop.0+0xc0>
 80055fa:	45b1      	cmp	r9, r6
 80055fc:	d31c      	bcc.n	8005638 <_strtol_l.constprop.0+0xc0>
 80055fe:	d101      	bne.n	8005604 <_strtol_l.constprop.0+0x8c>
 8005600:	45a2      	cmp	sl, r4
 8005602:	db19      	blt.n	8005638 <_strtol_l.constprop.0+0xc0>
 8005604:	fb06 4603 	mla	r6, r6, r3, r4
 8005608:	f04f 0c01 	mov.w	ip, #1
 800560c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005610:	e7e8      	b.n	80055e4 <_strtol_l.constprop.0+0x6c>
 8005612:	2c2b      	cmp	r4, #43	; 0x2b
 8005614:	bf04      	itt	eq
 8005616:	782c      	ldrbeq	r4, [r5, #0]
 8005618:	1cb5      	addeq	r5, r6, #2
 800561a:	e7ca      	b.n	80055b2 <_strtol_l.constprop.0+0x3a>
 800561c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005620:	f1be 0f19 	cmp.w	lr, #25
 8005624:	d801      	bhi.n	800562a <_strtol_l.constprop.0+0xb2>
 8005626:	3c37      	subs	r4, #55	; 0x37
 8005628:	e7e2      	b.n	80055f0 <_strtol_l.constprop.0+0x78>
 800562a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800562e:	f1be 0f19 	cmp.w	lr, #25
 8005632:	d804      	bhi.n	800563e <_strtol_l.constprop.0+0xc6>
 8005634:	3c57      	subs	r4, #87	; 0x57
 8005636:	e7db      	b.n	80055f0 <_strtol_l.constprop.0+0x78>
 8005638:	f04f 3cff 	mov.w	ip, #4294967295
 800563c:	e7e6      	b.n	800560c <_strtol_l.constprop.0+0x94>
 800563e:	f1bc 0f00 	cmp.w	ip, #0
 8005642:	da05      	bge.n	8005650 <_strtol_l.constprop.0+0xd8>
 8005644:	2322      	movs	r3, #34	; 0x22
 8005646:	6003      	str	r3, [r0, #0]
 8005648:	4646      	mov	r6, r8
 800564a:	b942      	cbnz	r2, 800565e <_strtol_l.constprop.0+0xe6>
 800564c:	4630      	mov	r0, r6
 800564e:	e79e      	b.n	800558e <_strtol_l.constprop.0+0x16>
 8005650:	b107      	cbz	r7, 8005654 <_strtol_l.constprop.0+0xdc>
 8005652:	4276      	negs	r6, r6
 8005654:	2a00      	cmp	r2, #0
 8005656:	d0f9      	beq.n	800564c <_strtol_l.constprop.0+0xd4>
 8005658:	f1bc 0f00 	cmp.w	ip, #0
 800565c:	d000      	beq.n	8005660 <_strtol_l.constprop.0+0xe8>
 800565e:	1e69      	subs	r1, r5, #1
 8005660:	6011      	str	r1, [r2, #0]
 8005662:	e7f3      	b.n	800564c <_strtol_l.constprop.0+0xd4>
 8005664:	2430      	movs	r4, #48	; 0x30
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1b1      	bne.n	80055ce <_strtol_l.constprop.0+0x56>
 800566a:	2308      	movs	r3, #8
 800566c:	e7af      	b.n	80055ce <_strtol_l.constprop.0+0x56>
 800566e:	2c30      	cmp	r4, #48	; 0x30
 8005670:	d0a5      	beq.n	80055be <_strtol_l.constprop.0+0x46>
 8005672:	230a      	movs	r3, #10
 8005674:	e7ab      	b.n	80055ce <_strtol_l.constprop.0+0x56>
 8005676:	bf00      	nop
 8005678:	08008b91 	.word	0x08008b91

0800567c <_strtol_r>:
 800567c:	f7ff bf7c 	b.w	8005578 <_strtol_l.constprop.0>

08005680 <strtol>:
 8005680:	4613      	mov	r3, r2
 8005682:	460a      	mov	r2, r1
 8005684:	4601      	mov	r1, r0
 8005686:	4802      	ldr	r0, [pc, #8]	; (8005690 <strtol+0x10>)
 8005688:	6800      	ldr	r0, [r0, #0]
 800568a:	f7ff bf75 	b.w	8005578 <_strtol_l.constprop.0>
 800568e:	bf00      	nop
 8005690:	20000014 	.word	0x20000014

08005694 <__swbuf_r>:
 8005694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005696:	460e      	mov	r6, r1
 8005698:	4614      	mov	r4, r2
 800569a:	4605      	mov	r5, r0
 800569c:	b118      	cbz	r0, 80056a6 <__swbuf_r+0x12>
 800569e:	6983      	ldr	r3, [r0, #24]
 80056a0:	b90b      	cbnz	r3, 80056a6 <__swbuf_r+0x12>
 80056a2:	f001 f84d 	bl	8006740 <__sinit>
 80056a6:	4b21      	ldr	r3, [pc, #132]	; (800572c <__swbuf_r+0x98>)
 80056a8:	429c      	cmp	r4, r3
 80056aa:	d12b      	bne.n	8005704 <__swbuf_r+0x70>
 80056ac:	686c      	ldr	r4, [r5, #4]
 80056ae:	69a3      	ldr	r3, [r4, #24]
 80056b0:	60a3      	str	r3, [r4, #8]
 80056b2:	89a3      	ldrh	r3, [r4, #12]
 80056b4:	071a      	lsls	r2, r3, #28
 80056b6:	d52f      	bpl.n	8005718 <__swbuf_r+0x84>
 80056b8:	6923      	ldr	r3, [r4, #16]
 80056ba:	b36b      	cbz	r3, 8005718 <__swbuf_r+0x84>
 80056bc:	6923      	ldr	r3, [r4, #16]
 80056be:	6820      	ldr	r0, [r4, #0]
 80056c0:	1ac0      	subs	r0, r0, r3
 80056c2:	6963      	ldr	r3, [r4, #20]
 80056c4:	b2f6      	uxtb	r6, r6
 80056c6:	4283      	cmp	r3, r0
 80056c8:	4637      	mov	r7, r6
 80056ca:	dc04      	bgt.n	80056d6 <__swbuf_r+0x42>
 80056cc:	4621      	mov	r1, r4
 80056ce:	4628      	mov	r0, r5
 80056d0:	f000 ffa2 	bl	8006618 <_fflush_r>
 80056d4:	bb30      	cbnz	r0, 8005724 <__swbuf_r+0x90>
 80056d6:	68a3      	ldr	r3, [r4, #8]
 80056d8:	3b01      	subs	r3, #1
 80056da:	60a3      	str	r3, [r4, #8]
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	6022      	str	r2, [r4, #0]
 80056e2:	701e      	strb	r6, [r3, #0]
 80056e4:	6963      	ldr	r3, [r4, #20]
 80056e6:	3001      	adds	r0, #1
 80056e8:	4283      	cmp	r3, r0
 80056ea:	d004      	beq.n	80056f6 <__swbuf_r+0x62>
 80056ec:	89a3      	ldrh	r3, [r4, #12]
 80056ee:	07db      	lsls	r3, r3, #31
 80056f0:	d506      	bpl.n	8005700 <__swbuf_r+0x6c>
 80056f2:	2e0a      	cmp	r6, #10
 80056f4:	d104      	bne.n	8005700 <__swbuf_r+0x6c>
 80056f6:	4621      	mov	r1, r4
 80056f8:	4628      	mov	r0, r5
 80056fa:	f000 ff8d 	bl	8006618 <_fflush_r>
 80056fe:	b988      	cbnz	r0, 8005724 <__swbuf_r+0x90>
 8005700:	4638      	mov	r0, r7
 8005702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005704:	4b0a      	ldr	r3, [pc, #40]	; (8005730 <__swbuf_r+0x9c>)
 8005706:	429c      	cmp	r4, r3
 8005708:	d101      	bne.n	800570e <__swbuf_r+0x7a>
 800570a:	68ac      	ldr	r4, [r5, #8]
 800570c:	e7cf      	b.n	80056ae <__swbuf_r+0x1a>
 800570e:	4b09      	ldr	r3, [pc, #36]	; (8005734 <__swbuf_r+0xa0>)
 8005710:	429c      	cmp	r4, r3
 8005712:	bf08      	it	eq
 8005714:	68ec      	ldreq	r4, [r5, #12]
 8005716:	e7ca      	b.n	80056ae <__swbuf_r+0x1a>
 8005718:	4621      	mov	r1, r4
 800571a:	4628      	mov	r0, r5
 800571c:	f000 f80c 	bl	8005738 <__swsetup_r>
 8005720:	2800      	cmp	r0, #0
 8005722:	d0cb      	beq.n	80056bc <__swbuf_r+0x28>
 8005724:	f04f 37ff 	mov.w	r7, #4294967295
 8005728:	e7ea      	b.n	8005700 <__swbuf_r+0x6c>
 800572a:	bf00      	nop
 800572c:	08008d44 	.word	0x08008d44
 8005730:	08008d64 	.word	0x08008d64
 8005734:	08008d24 	.word	0x08008d24

08005738 <__swsetup_r>:
 8005738:	4b32      	ldr	r3, [pc, #200]	; (8005804 <__swsetup_r+0xcc>)
 800573a:	b570      	push	{r4, r5, r6, lr}
 800573c:	681d      	ldr	r5, [r3, #0]
 800573e:	4606      	mov	r6, r0
 8005740:	460c      	mov	r4, r1
 8005742:	b125      	cbz	r5, 800574e <__swsetup_r+0x16>
 8005744:	69ab      	ldr	r3, [r5, #24]
 8005746:	b913      	cbnz	r3, 800574e <__swsetup_r+0x16>
 8005748:	4628      	mov	r0, r5
 800574a:	f000 fff9 	bl	8006740 <__sinit>
 800574e:	4b2e      	ldr	r3, [pc, #184]	; (8005808 <__swsetup_r+0xd0>)
 8005750:	429c      	cmp	r4, r3
 8005752:	d10f      	bne.n	8005774 <__swsetup_r+0x3c>
 8005754:	686c      	ldr	r4, [r5, #4]
 8005756:	89a3      	ldrh	r3, [r4, #12]
 8005758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800575c:	0719      	lsls	r1, r3, #28
 800575e:	d42c      	bmi.n	80057ba <__swsetup_r+0x82>
 8005760:	06dd      	lsls	r5, r3, #27
 8005762:	d411      	bmi.n	8005788 <__swsetup_r+0x50>
 8005764:	2309      	movs	r3, #9
 8005766:	6033      	str	r3, [r6, #0]
 8005768:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800576c:	81a3      	strh	r3, [r4, #12]
 800576e:	f04f 30ff 	mov.w	r0, #4294967295
 8005772:	e03e      	b.n	80057f2 <__swsetup_r+0xba>
 8005774:	4b25      	ldr	r3, [pc, #148]	; (800580c <__swsetup_r+0xd4>)
 8005776:	429c      	cmp	r4, r3
 8005778:	d101      	bne.n	800577e <__swsetup_r+0x46>
 800577a:	68ac      	ldr	r4, [r5, #8]
 800577c:	e7eb      	b.n	8005756 <__swsetup_r+0x1e>
 800577e:	4b24      	ldr	r3, [pc, #144]	; (8005810 <__swsetup_r+0xd8>)
 8005780:	429c      	cmp	r4, r3
 8005782:	bf08      	it	eq
 8005784:	68ec      	ldreq	r4, [r5, #12]
 8005786:	e7e6      	b.n	8005756 <__swsetup_r+0x1e>
 8005788:	0758      	lsls	r0, r3, #29
 800578a:	d512      	bpl.n	80057b2 <__swsetup_r+0x7a>
 800578c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800578e:	b141      	cbz	r1, 80057a2 <__swsetup_r+0x6a>
 8005790:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005794:	4299      	cmp	r1, r3
 8005796:	d002      	beq.n	800579e <__swsetup_r+0x66>
 8005798:	4630      	mov	r0, r6
 800579a:	f7fe f89b 	bl	80038d4 <_free_r>
 800579e:	2300      	movs	r3, #0
 80057a0:	6363      	str	r3, [r4, #52]	; 0x34
 80057a2:	89a3      	ldrh	r3, [r4, #12]
 80057a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057a8:	81a3      	strh	r3, [r4, #12]
 80057aa:	2300      	movs	r3, #0
 80057ac:	6063      	str	r3, [r4, #4]
 80057ae:	6923      	ldr	r3, [r4, #16]
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	89a3      	ldrh	r3, [r4, #12]
 80057b4:	f043 0308 	orr.w	r3, r3, #8
 80057b8:	81a3      	strh	r3, [r4, #12]
 80057ba:	6923      	ldr	r3, [r4, #16]
 80057bc:	b94b      	cbnz	r3, 80057d2 <__swsetup_r+0x9a>
 80057be:	89a3      	ldrh	r3, [r4, #12]
 80057c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057c8:	d003      	beq.n	80057d2 <__swsetup_r+0x9a>
 80057ca:	4621      	mov	r1, r4
 80057cc:	4630      	mov	r0, r6
 80057ce:	f001 fbef 	bl	8006fb0 <__smakebuf_r>
 80057d2:	89a0      	ldrh	r0, [r4, #12]
 80057d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057d8:	f010 0301 	ands.w	r3, r0, #1
 80057dc:	d00a      	beq.n	80057f4 <__swsetup_r+0xbc>
 80057de:	2300      	movs	r3, #0
 80057e0:	60a3      	str	r3, [r4, #8]
 80057e2:	6963      	ldr	r3, [r4, #20]
 80057e4:	425b      	negs	r3, r3
 80057e6:	61a3      	str	r3, [r4, #24]
 80057e8:	6923      	ldr	r3, [r4, #16]
 80057ea:	b943      	cbnz	r3, 80057fe <__swsetup_r+0xc6>
 80057ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057f0:	d1ba      	bne.n	8005768 <__swsetup_r+0x30>
 80057f2:	bd70      	pop	{r4, r5, r6, pc}
 80057f4:	0781      	lsls	r1, r0, #30
 80057f6:	bf58      	it	pl
 80057f8:	6963      	ldrpl	r3, [r4, #20]
 80057fa:	60a3      	str	r3, [r4, #8]
 80057fc:	e7f4      	b.n	80057e8 <__swsetup_r+0xb0>
 80057fe:	2000      	movs	r0, #0
 8005800:	e7f7      	b.n	80057f2 <__swsetup_r+0xba>
 8005802:	bf00      	nop
 8005804:	20000014 	.word	0x20000014
 8005808:	08008d44 	.word	0x08008d44
 800580c:	08008d64 	.word	0x08008d64
 8005810:	08008d24 	.word	0x08008d24

08005814 <quorem>:
 8005814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005818:	6903      	ldr	r3, [r0, #16]
 800581a:	690c      	ldr	r4, [r1, #16]
 800581c:	42a3      	cmp	r3, r4
 800581e:	4607      	mov	r7, r0
 8005820:	f2c0 8081 	blt.w	8005926 <quorem+0x112>
 8005824:	3c01      	subs	r4, #1
 8005826:	f101 0814 	add.w	r8, r1, #20
 800582a:	f100 0514 	add.w	r5, r0, #20
 800582e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005832:	9301      	str	r3, [sp, #4]
 8005834:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005838:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800583c:	3301      	adds	r3, #1
 800583e:	429a      	cmp	r2, r3
 8005840:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005844:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005848:	fbb2 f6f3 	udiv	r6, r2, r3
 800584c:	d331      	bcc.n	80058b2 <quorem+0x9e>
 800584e:	f04f 0e00 	mov.w	lr, #0
 8005852:	4640      	mov	r0, r8
 8005854:	46ac      	mov	ip, r5
 8005856:	46f2      	mov	sl, lr
 8005858:	f850 2b04 	ldr.w	r2, [r0], #4
 800585c:	b293      	uxth	r3, r2
 800585e:	fb06 e303 	mla	r3, r6, r3, lr
 8005862:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005866:	b29b      	uxth	r3, r3
 8005868:	ebaa 0303 	sub.w	r3, sl, r3
 800586c:	f8dc a000 	ldr.w	sl, [ip]
 8005870:	0c12      	lsrs	r2, r2, #16
 8005872:	fa13 f38a 	uxtah	r3, r3, sl
 8005876:	fb06 e202 	mla	r2, r6, r2, lr
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	9b00      	ldr	r3, [sp, #0]
 800587e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005882:	b292      	uxth	r2, r2
 8005884:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005888:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800588c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005890:	4581      	cmp	r9, r0
 8005892:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005896:	f84c 3b04 	str.w	r3, [ip], #4
 800589a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800589e:	d2db      	bcs.n	8005858 <quorem+0x44>
 80058a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80058a4:	b92b      	cbnz	r3, 80058b2 <quorem+0x9e>
 80058a6:	9b01      	ldr	r3, [sp, #4]
 80058a8:	3b04      	subs	r3, #4
 80058aa:	429d      	cmp	r5, r3
 80058ac:	461a      	mov	r2, r3
 80058ae:	d32e      	bcc.n	800590e <quorem+0xfa>
 80058b0:	613c      	str	r4, [r7, #16]
 80058b2:	4638      	mov	r0, r7
 80058b4:	f001 feb4 	bl	8007620 <__mcmp>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	db24      	blt.n	8005906 <quorem+0xf2>
 80058bc:	3601      	adds	r6, #1
 80058be:	4628      	mov	r0, r5
 80058c0:	f04f 0c00 	mov.w	ip, #0
 80058c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80058c8:	f8d0 e000 	ldr.w	lr, [r0]
 80058cc:	b293      	uxth	r3, r2
 80058ce:	ebac 0303 	sub.w	r3, ip, r3
 80058d2:	0c12      	lsrs	r2, r2, #16
 80058d4:	fa13 f38e 	uxtah	r3, r3, lr
 80058d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80058dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058e6:	45c1      	cmp	r9, r8
 80058e8:	f840 3b04 	str.w	r3, [r0], #4
 80058ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80058f0:	d2e8      	bcs.n	80058c4 <quorem+0xb0>
 80058f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058fa:	b922      	cbnz	r2, 8005906 <quorem+0xf2>
 80058fc:	3b04      	subs	r3, #4
 80058fe:	429d      	cmp	r5, r3
 8005900:	461a      	mov	r2, r3
 8005902:	d30a      	bcc.n	800591a <quorem+0x106>
 8005904:	613c      	str	r4, [r7, #16]
 8005906:	4630      	mov	r0, r6
 8005908:	b003      	add	sp, #12
 800590a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590e:	6812      	ldr	r2, [r2, #0]
 8005910:	3b04      	subs	r3, #4
 8005912:	2a00      	cmp	r2, #0
 8005914:	d1cc      	bne.n	80058b0 <quorem+0x9c>
 8005916:	3c01      	subs	r4, #1
 8005918:	e7c7      	b.n	80058aa <quorem+0x96>
 800591a:	6812      	ldr	r2, [r2, #0]
 800591c:	3b04      	subs	r3, #4
 800591e:	2a00      	cmp	r2, #0
 8005920:	d1f0      	bne.n	8005904 <quorem+0xf0>
 8005922:	3c01      	subs	r4, #1
 8005924:	e7eb      	b.n	80058fe <quorem+0xea>
 8005926:	2000      	movs	r0, #0
 8005928:	e7ee      	b.n	8005908 <quorem+0xf4>
 800592a:	0000      	movs	r0, r0
 800592c:	0000      	movs	r0, r0
	...

08005930 <_dtoa_r>:
 8005930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005934:	ed2d 8b04 	vpush	{d8-d9}
 8005938:	ec57 6b10 	vmov	r6, r7, d0
 800593c:	b093      	sub	sp, #76	; 0x4c
 800593e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005940:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005944:	9106      	str	r1, [sp, #24]
 8005946:	ee10 aa10 	vmov	sl, s0
 800594a:	4604      	mov	r4, r0
 800594c:	9209      	str	r2, [sp, #36]	; 0x24
 800594e:	930c      	str	r3, [sp, #48]	; 0x30
 8005950:	46bb      	mov	fp, r7
 8005952:	b975      	cbnz	r5, 8005972 <_dtoa_r+0x42>
 8005954:	2010      	movs	r0, #16
 8005956:	f7fd ffa5 	bl	80038a4 <malloc>
 800595a:	4602      	mov	r2, r0
 800595c:	6260      	str	r0, [r4, #36]	; 0x24
 800595e:	b920      	cbnz	r0, 800596a <_dtoa_r+0x3a>
 8005960:	4ba7      	ldr	r3, [pc, #668]	; (8005c00 <_dtoa_r+0x2d0>)
 8005962:	21ea      	movs	r1, #234	; 0xea
 8005964:	48a7      	ldr	r0, [pc, #668]	; (8005c04 <_dtoa_r+0x2d4>)
 8005966:	f002 fb99 	bl	800809c <__assert_func>
 800596a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800596e:	6005      	str	r5, [r0, #0]
 8005970:	60c5      	str	r5, [r0, #12]
 8005972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005974:	6819      	ldr	r1, [r3, #0]
 8005976:	b151      	cbz	r1, 800598e <_dtoa_r+0x5e>
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	604a      	str	r2, [r1, #4]
 800597c:	2301      	movs	r3, #1
 800597e:	4093      	lsls	r3, r2
 8005980:	608b      	str	r3, [r1, #8]
 8005982:	4620      	mov	r0, r4
 8005984:	f001 fbc0 	bl	8007108 <_Bfree>
 8005988:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800598a:	2200      	movs	r2, #0
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	1e3b      	subs	r3, r7, #0
 8005990:	bfaa      	itet	ge
 8005992:	2300      	movge	r3, #0
 8005994:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005998:	f8c8 3000 	strge.w	r3, [r8]
 800599c:	4b9a      	ldr	r3, [pc, #616]	; (8005c08 <_dtoa_r+0x2d8>)
 800599e:	bfbc      	itt	lt
 80059a0:	2201      	movlt	r2, #1
 80059a2:	f8c8 2000 	strlt.w	r2, [r8]
 80059a6:	ea33 030b 	bics.w	r3, r3, fp
 80059aa:	d11b      	bne.n	80059e4 <_dtoa_r+0xb4>
 80059ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80059b8:	4333      	orrs	r3, r6
 80059ba:	f000 8592 	beq.w	80064e2 <_dtoa_r+0xbb2>
 80059be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059c0:	b963      	cbnz	r3, 80059dc <_dtoa_r+0xac>
 80059c2:	4b92      	ldr	r3, [pc, #584]	; (8005c0c <_dtoa_r+0x2dc>)
 80059c4:	e022      	b.n	8005a0c <_dtoa_r+0xdc>
 80059c6:	4b92      	ldr	r3, [pc, #584]	; (8005c10 <_dtoa_r+0x2e0>)
 80059c8:	9301      	str	r3, [sp, #4]
 80059ca:	3308      	adds	r3, #8
 80059cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	9801      	ldr	r0, [sp, #4]
 80059d2:	b013      	add	sp, #76	; 0x4c
 80059d4:	ecbd 8b04 	vpop	{d8-d9}
 80059d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059dc:	4b8b      	ldr	r3, [pc, #556]	; (8005c0c <_dtoa_r+0x2dc>)
 80059de:	9301      	str	r3, [sp, #4]
 80059e0:	3303      	adds	r3, #3
 80059e2:	e7f3      	b.n	80059cc <_dtoa_r+0x9c>
 80059e4:	2200      	movs	r2, #0
 80059e6:	2300      	movs	r3, #0
 80059e8:	4650      	mov	r0, sl
 80059ea:	4659      	mov	r1, fp
 80059ec:	f7fb f874 	bl	8000ad8 <__aeabi_dcmpeq>
 80059f0:	ec4b ab19 	vmov	d9, sl, fp
 80059f4:	4680      	mov	r8, r0
 80059f6:	b158      	cbz	r0, 8005a10 <_dtoa_r+0xe0>
 80059f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059fa:	2301      	movs	r3, #1
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 856b 	beq.w	80064dc <_dtoa_r+0xbac>
 8005a06:	4883      	ldr	r0, [pc, #524]	; (8005c14 <_dtoa_r+0x2e4>)
 8005a08:	6018      	str	r0, [r3, #0]
 8005a0a:	1e43      	subs	r3, r0, #1
 8005a0c:	9301      	str	r3, [sp, #4]
 8005a0e:	e7df      	b.n	80059d0 <_dtoa_r+0xa0>
 8005a10:	ec4b ab10 	vmov	d0, sl, fp
 8005a14:	aa10      	add	r2, sp, #64	; 0x40
 8005a16:	a911      	add	r1, sp, #68	; 0x44
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f001 ff23 	bl	8007864 <__d2b>
 8005a1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005a22:	ee08 0a10 	vmov	s16, r0
 8005a26:	2d00      	cmp	r5, #0
 8005a28:	f000 8084 	beq.w	8005b34 <_dtoa_r+0x204>
 8005a2c:	ee19 3a90 	vmov	r3, s19
 8005a30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005a38:	4656      	mov	r6, sl
 8005a3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005a3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005a42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005a46:	4b74      	ldr	r3, [pc, #464]	; (8005c18 <_dtoa_r+0x2e8>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	4639      	mov	r1, r7
 8005a4e:	f7fa fc23 	bl	8000298 <__aeabi_dsub>
 8005a52:	a365      	add	r3, pc, #404	; (adr r3, 8005be8 <_dtoa_r+0x2b8>)
 8005a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a58:	f7fa fdd6 	bl	8000608 <__aeabi_dmul>
 8005a5c:	a364      	add	r3, pc, #400	; (adr r3, 8005bf0 <_dtoa_r+0x2c0>)
 8005a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a62:	f7fa fc1b 	bl	800029c <__adddf3>
 8005a66:	4606      	mov	r6, r0
 8005a68:	4628      	mov	r0, r5
 8005a6a:	460f      	mov	r7, r1
 8005a6c:	f7fa fd62 	bl	8000534 <__aeabi_i2d>
 8005a70:	a361      	add	r3, pc, #388	; (adr r3, 8005bf8 <_dtoa_r+0x2c8>)
 8005a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a76:	f7fa fdc7 	bl	8000608 <__aeabi_dmul>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	4630      	mov	r0, r6
 8005a80:	4639      	mov	r1, r7
 8005a82:	f7fa fc0b 	bl	800029c <__adddf3>
 8005a86:	4606      	mov	r6, r0
 8005a88:	460f      	mov	r7, r1
 8005a8a:	f7fb f86d 	bl	8000b68 <__aeabi_d2iz>
 8005a8e:	2200      	movs	r2, #0
 8005a90:	9000      	str	r0, [sp, #0]
 8005a92:	2300      	movs	r3, #0
 8005a94:	4630      	mov	r0, r6
 8005a96:	4639      	mov	r1, r7
 8005a98:	f7fb f828 	bl	8000aec <__aeabi_dcmplt>
 8005a9c:	b150      	cbz	r0, 8005ab4 <_dtoa_r+0x184>
 8005a9e:	9800      	ldr	r0, [sp, #0]
 8005aa0:	f7fa fd48 	bl	8000534 <__aeabi_i2d>
 8005aa4:	4632      	mov	r2, r6
 8005aa6:	463b      	mov	r3, r7
 8005aa8:	f7fb f816 	bl	8000ad8 <__aeabi_dcmpeq>
 8005aac:	b910      	cbnz	r0, 8005ab4 <_dtoa_r+0x184>
 8005aae:	9b00      	ldr	r3, [sp, #0]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	9b00      	ldr	r3, [sp, #0]
 8005ab6:	2b16      	cmp	r3, #22
 8005ab8:	d85a      	bhi.n	8005b70 <_dtoa_r+0x240>
 8005aba:	9a00      	ldr	r2, [sp, #0]
 8005abc:	4b57      	ldr	r3, [pc, #348]	; (8005c1c <_dtoa_r+0x2ec>)
 8005abe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac6:	ec51 0b19 	vmov	r0, r1, d9
 8005aca:	f7fb f80f 	bl	8000aec <__aeabi_dcmplt>
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	d050      	beq.n	8005b74 <_dtoa_r+0x244>
 8005ad2:	9b00      	ldr	r3, [sp, #0]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	2300      	movs	r3, #0
 8005ada:	930b      	str	r3, [sp, #44]	; 0x2c
 8005adc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ade:	1b5d      	subs	r5, r3, r5
 8005ae0:	1e6b      	subs	r3, r5, #1
 8005ae2:	9305      	str	r3, [sp, #20]
 8005ae4:	bf45      	ittet	mi
 8005ae6:	f1c5 0301 	rsbmi	r3, r5, #1
 8005aea:	9304      	strmi	r3, [sp, #16]
 8005aec:	2300      	movpl	r3, #0
 8005aee:	2300      	movmi	r3, #0
 8005af0:	bf4c      	ite	mi
 8005af2:	9305      	strmi	r3, [sp, #20]
 8005af4:	9304      	strpl	r3, [sp, #16]
 8005af6:	9b00      	ldr	r3, [sp, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	db3d      	blt.n	8005b78 <_dtoa_r+0x248>
 8005afc:	9b05      	ldr	r3, [sp, #20]
 8005afe:	9a00      	ldr	r2, [sp, #0]
 8005b00:	920a      	str	r2, [sp, #40]	; 0x28
 8005b02:	4413      	add	r3, r2
 8005b04:	9305      	str	r3, [sp, #20]
 8005b06:	2300      	movs	r3, #0
 8005b08:	9307      	str	r3, [sp, #28]
 8005b0a:	9b06      	ldr	r3, [sp, #24]
 8005b0c:	2b09      	cmp	r3, #9
 8005b0e:	f200 8089 	bhi.w	8005c24 <_dtoa_r+0x2f4>
 8005b12:	2b05      	cmp	r3, #5
 8005b14:	bfc4      	itt	gt
 8005b16:	3b04      	subgt	r3, #4
 8005b18:	9306      	strgt	r3, [sp, #24]
 8005b1a:	9b06      	ldr	r3, [sp, #24]
 8005b1c:	f1a3 0302 	sub.w	r3, r3, #2
 8005b20:	bfcc      	ite	gt
 8005b22:	2500      	movgt	r5, #0
 8005b24:	2501      	movle	r5, #1
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	f200 8087 	bhi.w	8005c3a <_dtoa_r+0x30a>
 8005b2c:	e8df f003 	tbb	[pc, r3]
 8005b30:	59383a2d 	.word	0x59383a2d
 8005b34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005b38:	441d      	add	r5, r3
 8005b3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005b3e:	2b20      	cmp	r3, #32
 8005b40:	bfc1      	itttt	gt
 8005b42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005b46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005b4a:	fa0b f303 	lslgt.w	r3, fp, r3
 8005b4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005b52:	bfda      	itte	le
 8005b54:	f1c3 0320 	rsble	r3, r3, #32
 8005b58:	fa06 f003 	lslle.w	r0, r6, r3
 8005b5c:	4318      	orrgt	r0, r3
 8005b5e:	f7fa fcd9 	bl	8000514 <__aeabi_ui2d>
 8005b62:	2301      	movs	r3, #1
 8005b64:	4606      	mov	r6, r0
 8005b66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005b6a:	3d01      	subs	r5, #1
 8005b6c:	930e      	str	r3, [sp, #56]	; 0x38
 8005b6e:	e76a      	b.n	8005a46 <_dtoa_r+0x116>
 8005b70:	2301      	movs	r3, #1
 8005b72:	e7b2      	b.n	8005ada <_dtoa_r+0x1aa>
 8005b74:	900b      	str	r0, [sp, #44]	; 0x2c
 8005b76:	e7b1      	b.n	8005adc <_dtoa_r+0x1ac>
 8005b78:	9b04      	ldr	r3, [sp, #16]
 8005b7a:	9a00      	ldr	r2, [sp, #0]
 8005b7c:	1a9b      	subs	r3, r3, r2
 8005b7e:	9304      	str	r3, [sp, #16]
 8005b80:	4253      	negs	r3, r2
 8005b82:	9307      	str	r3, [sp, #28]
 8005b84:	2300      	movs	r3, #0
 8005b86:	930a      	str	r3, [sp, #40]	; 0x28
 8005b88:	e7bf      	b.n	8005b0a <_dtoa_r+0x1da>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	9308      	str	r3, [sp, #32]
 8005b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	dc55      	bgt.n	8005c40 <_dtoa_r+0x310>
 8005b94:	2301      	movs	r3, #1
 8005b96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8005b9e:	e00c      	b.n	8005bba <_dtoa_r+0x28a>
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e7f3      	b.n	8005b8c <_dtoa_r+0x25c>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ba8:	9308      	str	r3, [sp, #32]
 8005baa:	9b00      	ldr	r3, [sp, #0]
 8005bac:	4413      	add	r3, r2
 8005bae:	9302      	str	r3, [sp, #8]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	9303      	str	r3, [sp, #12]
 8005bb6:	bfb8      	it	lt
 8005bb8:	2301      	movlt	r3, #1
 8005bba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	6042      	str	r2, [r0, #4]
 8005bc0:	2204      	movs	r2, #4
 8005bc2:	f102 0614 	add.w	r6, r2, #20
 8005bc6:	429e      	cmp	r6, r3
 8005bc8:	6841      	ldr	r1, [r0, #4]
 8005bca:	d93d      	bls.n	8005c48 <_dtoa_r+0x318>
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f001 fa5b 	bl	8007088 <_Balloc>
 8005bd2:	9001      	str	r0, [sp, #4]
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d13b      	bne.n	8005c50 <_dtoa_r+0x320>
 8005bd8:	4b11      	ldr	r3, [pc, #68]	; (8005c20 <_dtoa_r+0x2f0>)
 8005bda:	4602      	mov	r2, r0
 8005bdc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005be0:	e6c0      	b.n	8005964 <_dtoa_r+0x34>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e7df      	b.n	8005ba6 <_dtoa_r+0x276>
 8005be6:	bf00      	nop
 8005be8:	636f4361 	.word	0x636f4361
 8005bec:	3fd287a7 	.word	0x3fd287a7
 8005bf0:	8b60c8b3 	.word	0x8b60c8b3
 8005bf4:	3fc68a28 	.word	0x3fc68a28
 8005bf8:	509f79fb 	.word	0x509f79fb
 8005bfc:	3fd34413 	.word	0x3fd34413
 8005c00:	08008c9e 	.word	0x08008c9e
 8005c04:	08008cb5 	.word	0x08008cb5
 8005c08:	7ff00000 	.word	0x7ff00000
 8005c0c:	08008c9a 	.word	0x08008c9a
 8005c10:	08008c91 	.word	0x08008c91
 8005c14:	08008b11 	.word	0x08008b11
 8005c18:	3ff80000 	.word	0x3ff80000
 8005c1c:	08008e88 	.word	0x08008e88
 8005c20:	08008d10 	.word	0x08008d10
 8005c24:	2501      	movs	r5, #1
 8005c26:	2300      	movs	r3, #0
 8005c28:	9306      	str	r3, [sp, #24]
 8005c2a:	9508      	str	r5, [sp, #32]
 8005c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005c34:	2200      	movs	r2, #0
 8005c36:	2312      	movs	r3, #18
 8005c38:	e7b0      	b.n	8005b9c <_dtoa_r+0x26c>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	9308      	str	r3, [sp, #32]
 8005c3e:	e7f5      	b.n	8005c2c <_dtoa_r+0x2fc>
 8005c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005c46:	e7b8      	b.n	8005bba <_dtoa_r+0x28a>
 8005c48:	3101      	adds	r1, #1
 8005c4a:	6041      	str	r1, [r0, #4]
 8005c4c:	0052      	lsls	r2, r2, #1
 8005c4e:	e7b8      	b.n	8005bc2 <_dtoa_r+0x292>
 8005c50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c52:	9a01      	ldr	r2, [sp, #4]
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	9b03      	ldr	r3, [sp, #12]
 8005c58:	2b0e      	cmp	r3, #14
 8005c5a:	f200 809d 	bhi.w	8005d98 <_dtoa_r+0x468>
 8005c5e:	2d00      	cmp	r5, #0
 8005c60:	f000 809a 	beq.w	8005d98 <_dtoa_r+0x468>
 8005c64:	9b00      	ldr	r3, [sp, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	dd32      	ble.n	8005cd0 <_dtoa_r+0x3a0>
 8005c6a:	4ab7      	ldr	r2, [pc, #732]	; (8005f48 <_dtoa_r+0x618>)
 8005c6c:	f003 030f 	and.w	r3, r3, #15
 8005c70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c78:	9b00      	ldr	r3, [sp, #0]
 8005c7a:	05d8      	lsls	r0, r3, #23
 8005c7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005c80:	d516      	bpl.n	8005cb0 <_dtoa_r+0x380>
 8005c82:	4bb2      	ldr	r3, [pc, #712]	; (8005f4c <_dtoa_r+0x61c>)
 8005c84:	ec51 0b19 	vmov	r0, r1, d9
 8005c88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c8c:	f7fa fde6 	bl	800085c <__aeabi_ddiv>
 8005c90:	f007 070f 	and.w	r7, r7, #15
 8005c94:	4682      	mov	sl, r0
 8005c96:	468b      	mov	fp, r1
 8005c98:	2503      	movs	r5, #3
 8005c9a:	4eac      	ldr	r6, [pc, #688]	; (8005f4c <_dtoa_r+0x61c>)
 8005c9c:	b957      	cbnz	r7, 8005cb4 <_dtoa_r+0x384>
 8005c9e:	4642      	mov	r2, r8
 8005ca0:	464b      	mov	r3, r9
 8005ca2:	4650      	mov	r0, sl
 8005ca4:	4659      	mov	r1, fp
 8005ca6:	f7fa fdd9 	bl	800085c <__aeabi_ddiv>
 8005caa:	4682      	mov	sl, r0
 8005cac:	468b      	mov	fp, r1
 8005cae:	e028      	b.n	8005d02 <_dtoa_r+0x3d2>
 8005cb0:	2502      	movs	r5, #2
 8005cb2:	e7f2      	b.n	8005c9a <_dtoa_r+0x36a>
 8005cb4:	07f9      	lsls	r1, r7, #31
 8005cb6:	d508      	bpl.n	8005cca <_dtoa_r+0x39a>
 8005cb8:	4640      	mov	r0, r8
 8005cba:	4649      	mov	r1, r9
 8005cbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005cc0:	f7fa fca2 	bl	8000608 <__aeabi_dmul>
 8005cc4:	3501      	adds	r5, #1
 8005cc6:	4680      	mov	r8, r0
 8005cc8:	4689      	mov	r9, r1
 8005cca:	107f      	asrs	r7, r7, #1
 8005ccc:	3608      	adds	r6, #8
 8005cce:	e7e5      	b.n	8005c9c <_dtoa_r+0x36c>
 8005cd0:	f000 809b 	beq.w	8005e0a <_dtoa_r+0x4da>
 8005cd4:	9b00      	ldr	r3, [sp, #0]
 8005cd6:	4f9d      	ldr	r7, [pc, #628]	; (8005f4c <_dtoa_r+0x61c>)
 8005cd8:	425e      	negs	r6, r3
 8005cda:	4b9b      	ldr	r3, [pc, #620]	; (8005f48 <_dtoa_r+0x618>)
 8005cdc:	f006 020f 	and.w	r2, r6, #15
 8005ce0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce8:	ec51 0b19 	vmov	r0, r1, d9
 8005cec:	f7fa fc8c 	bl	8000608 <__aeabi_dmul>
 8005cf0:	1136      	asrs	r6, r6, #4
 8005cf2:	4682      	mov	sl, r0
 8005cf4:	468b      	mov	fp, r1
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	2502      	movs	r5, #2
 8005cfa:	2e00      	cmp	r6, #0
 8005cfc:	d17a      	bne.n	8005df4 <_dtoa_r+0x4c4>
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1d3      	bne.n	8005caa <_dtoa_r+0x37a>
 8005d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 8082 	beq.w	8005e0e <_dtoa_r+0x4de>
 8005d0a:	4b91      	ldr	r3, [pc, #580]	; (8005f50 <_dtoa_r+0x620>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	4650      	mov	r0, sl
 8005d10:	4659      	mov	r1, fp
 8005d12:	f7fa feeb 	bl	8000aec <__aeabi_dcmplt>
 8005d16:	2800      	cmp	r0, #0
 8005d18:	d079      	beq.n	8005e0e <_dtoa_r+0x4de>
 8005d1a:	9b03      	ldr	r3, [sp, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d076      	beq.n	8005e0e <_dtoa_r+0x4de>
 8005d20:	9b02      	ldr	r3, [sp, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	dd36      	ble.n	8005d94 <_dtoa_r+0x464>
 8005d26:	9b00      	ldr	r3, [sp, #0]
 8005d28:	4650      	mov	r0, sl
 8005d2a:	4659      	mov	r1, fp
 8005d2c:	1e5f      	subs	r7, r3, #1
 8005d2e:	2200      	movs	r2, #0
 8005d30:	4b88      	ldr	r3, [pc, #544]	; (8005f54 <_dtoa_r+0x624>)
 8005d32:	f7fa fc69 	bl	8000608 <__aeabi_dmul>
 8005d36:	9e02      	ldr	r6, [sp, #8]
 8005d38:	4682      	mov	sl, r0
 8005d3a:	468b      	mov	fp, r1
 8005d3c:	3501      	adds	r5, #1
 8005d3e:	4628      	mov	r0, r5
 8005d40:	f7fa fbf8 	bl	8000534 <__aeabi_i2d>
 8005d44:	4652      	mov	r2, sl
 8005d46:	465b      	mov	r3, fp
 8005d48:	f7fa fc5e 	bl	8000608 <__aeabi_dmul>
 8005d4c:	4b82      	ldr	r3, [pc, #520]	; (8005f58 <_dtoa_r+0x628>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f7fa faa4 	bl	800029c <__adddf3>
 8005d54:	46d0      	mov	r8, sl
 8005d56:	46d9      	mov	r9, fp
 8005d58:	4682      	mov	sl, r0
 8005d5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005d5e:	2e00      	cmp	r6, #0
 8005d60:	d158      	bne.n	8005e14 <_dtoa_r+0x4e4>
 8005d62:	4b7e      	ldr	r3, [pc, #504]	; (8005f5c <_dtoa_r+0x62c>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	4640      	mov	r0, r8
 8005d68:	4649      	mov	r1, r9
 8005d6a:	f7fa fa95 	bl	8000298 <__aeabi_dsub>
 8005d6e:	4652      	mov	r2, sl
 8005d70:	465b      	mov	r3, fp
 8005d72:	4680      	mov	r8, r0
 8005d74:	4689      	mov	r9, r1
 8005d76:	f7fa fed7 	bl	8000b28 <__aeabi_dcmpgt>
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	f040 8295 	bne.w	80062aa <_dtoa_r+0x97a>
 8005d80:	4652      	mov	r2, sl
 8005d82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005d86:	4640      	mov	r0, r8
 8005d88:	4649      	mov	r1, r9
 8005d8a:	f7fa feaf 	bl	8000aec <__aeabi_dcmplt>
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	f040 8289 	bne.w	80062a6 <_dtoa_r+0x976>
 8005d94:	ec5b ab19 	vmov	sl, fp, d9
 8005d98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f2c0 8148 	blt.w	8006030 <_dtoa_r+0x700>
 8005da0:	9a00      	ldr	r2, [sp, #0]
 8005da2:	2a0e      	cmp	r2, #14
 8005da4:	f300 8144 	bgt.w	8006030 <_dtoa_r+0x700>
 8005da8:	4b67      	ldr	r3, [pc, #412]	; (8005f48 <_dtoa_r+0x618>)
 8005daa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f280 80d5 	bge.w	8005f64 <_dtoa_r+0x634>
 8005dba:	9b03      	ldr	r3, [sp, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f300 80d1 	bgt.w	8005f64 <_dtoa_r+0x634>
 8005dc2:	f040 826f 	bne.w	80062a4 <_dtoa_r+0x974>
 8005dc6:	4b65      	ldr	r3, [pc, #404]	; (8005f5c <_dtoa_r+0x62c>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	4640      	mov	r0, r8
 8005dcc:	4649      	mov	r1, r9
 8005dce:	f7fa fc1b 	bl	8000608 <__aeabi_dmul>
 8005dd2:	4652      	mov	r2, sl
 8005dd4:	465b      	mov	r3, fp
 8005dd6:	f7fa fe9d 	bl	8000b14 <__aeabi_dcmpge>
 8005dda:	9e03      	ldr	r6, [sp, #12]
 8005ddc:	4637      	mov	r7, r6
 8005dde:	2800      	cmp	r0, #0
 8005de0:	f040 8245 	bne.w	800626e <_dtoa_r+0x93e>
 8005de4:	9d01      	ldr	r5, [sp, #4]
 8005de6:	2331      	movs	r3, #49	; 0x31
 8005de8:	f805 3b01 	strb.w	r3, [r5], #1
 8005dec:	9b00      	ldr	r3, [sp, #0]
 8005dee:	3301      	adds	r3, #1
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	e240      	b.n	8006276 <_dtoa_r+0x946>
 8005df4:	07f2      	lsls	r2, r6, #31
 8005df6:	d505      	bpl.n	8005e04 <_dtoa_r+0x4d4>
 8005df8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dfc:	f7fa fc04 	bl	8000608 <__aeabi_dmul>
 8005e00:	3501      	adds	r5, #1
 8005e02:	2301      	movs	r3, #1
 8005e04:	1076      	asrs	r6, r6, #1
 8005e06:	3708      	adds	r7, #8
 8005e08:	e777      	b.n	8005cfa <_dtoa_r+0x3ca>
 8005e0a:	2502      	movs	r5, #2
 8005e0c:	e779      	b.n	8005d02 <_dtoa_r+0x3d2>
 8005e0e:	9f00      	ldr	r7, [sp, #0]
 8005e10:	9e03      	ldr	r6, [sp, #12]
 8005e12:	e794      	b.n	8005d3e <_dtoa_r+0x40e>
 8005e14:	9901      	ldr	r1, [sp, #4]
 8005e16:	4b4c      	ldr	r3, [pc, #304]	; (8005f48 <_dtoa_r+0x618>)
 8005e18:	4431      	add	r1, r6
 8005e1a:	910d      	str	r1, [sp, #52]	; 0x34
 8005e1c:	9908      	ldr	r1, [sp, #32]
 8005e1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005e22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e26:	2900      	cmp	r1, #0
 8005e28:	d043      	beq.n	8005eb2 <_dtoa_r+0x582>
 8005e2a:	494d      	ldr	r1, [pc, #308]	; (8005f60 <_dtoa_r+0x630>)
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	f7fa fd15 	bl	800085c <__aeabi_ddiv>
 8005e32:	4652      	mov	r2, sl
 8005e34:	465b      	mov	r3, fp
 8005e36:	f7fa fa2f 	bl	8000298 <__aeabi_dsub>
 8005e3a:	9d01      	ldr	r5, [sp, #4]
 8005e3c:	4682      	mov	sl, r0
 8005e3e:	468b      	mov	fp, r1
 8005e40:	4649      	mov	r1, r9
 8005e42:	4640      	mov	r0, r8
 8005e44:	f7fa fe90 	bl	8000b68 <__aeabi_d2iz>
 8005e48:	4606      	mov	r6, r0
 8005e4a:	f7fa fb73 	bl	8000534 <__aeabi_i2d>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	460b      	mov	r3, r1
 8005e52:	4640      	mov	r0, r8
 8005e54:	4649      	mov	r1, r9
 8005e56:	f7fa fa1f 	bl	8000298 <__aeabi_dsub>
 8005e5a:	3630      	adds	r6, #48	; 0x30
 8005e5c:	f805 6b01 	strb.w	r6, [r5], #1
 8005e60:	4652      	mov	r2, sl
 8005e62:	465b      	mov	r3, fp
 8005e64:	4680      	mov	r8, r0
 8005e66:	4689      	mov	r9, r1
 8005e68:	f7fa fe40 	bl	8000aec <__aeabi_dcmplt>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d163      	bne.n	8005f38 <_dtoa_r+0x608>
 8005e70:	4642      	mov	r2, r8
 8005e72:	464b      	mov	r3, r9
 8005e74:	4936      	ldr	r1, [pc, #216]	; (8005f50 <_dtoa_r+0x620>)
 8005e76:	2000      	movs	r0, #0
 8005e78:	f7fa fa0e 	bl	8000298 <__aeabi_dsub>
 8005e7c:	4652      	mov	r2, sl
 8005e7e:	465b      	mov	r3, fp
 8005e80:	f7fa fe34 	bl	8000aec <__aeabi_dcmplt>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	f040 80b5 	bne.w	8005ff4 <_dtoa_r+0x6c4>
 8005e8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e8c:	429d      	cmp	r5, r3
 8005e8e:	d081      	beq.n	8005d94 <_dtoa_r+0x464>
 8005e90:	4b30      	ldr	r3, [pc, #192]	; (8005f54 <_dtoa_r+0x624>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	4650      	mov	r0, sl
 8005e96:	4659      	mov	r1, fp
 8005e98:	f7fa fbb6 	bl	8000608 <__aeabi_dmul>
 8005e9c:	4b2d      	ldr	r3, [pc, #180]	; (8005f54 <_dtoa_r+0x624>)
 8005e9e:	4682      	mov	sl, r0
 8005ea0:	468b      	mov	fp, r1
 8005ea2:	4640      	mov	r0, r8
 8005ea4:	4649      	mov	r1, r9
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f7fa fbae 	bl	8000608 <__aeabi_dmul>
 8005eac:	4680      	mov	r8, r0
 8005eae:	4689      	mov	r9, r1
 8005eb0:	e7c6      	b.n	8005e40 <_dtoa_r+0x510>
 8005eb2:	4650      	mov	r0, sl
 8005eb4:	4659      	mov	r1, fp
 8005eb6:	f7fa fba7 	bl	8000608 <__aeabi_dmul>
 8005eba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ebc:	9d01      	ldr	r5, [sp, #4]
 8005ebe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ec0:	4682      	mov	sl, r0
 8005ec2:	468b      	mov	fp, r1
 8005ec4:	4649      	mov	r1, r9
 8005ec6:	4640      	mov	r0, r8
 8005ec8:	f7fa fe4e 	bl	8000b68 <__aeabi_d2iz>
 8005ecc:	4606      	mov	r6, r0
 8005ece:	f7fa fb31 	bl	8000534 <__aeabi_i2d>
 8005ed2:	3630      	adds	r6, #48	; 0x30
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	4640      	mov	r0, r8
 8005eda:	4649      	mov	r1, r9
 8005edc:	f7fa f9dc 	bl	8000298 <__aeabi_dsub>
 8005ee0:	f805 6b01 	strb.w	r6, [r5], #1
 8005ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ee6:	429d      	cmp	r5, r3
 8005ee8:	4680      	mov	r8, r0
 8005eea:	4689      	mov	r9, r1
 8005eec:	f04f 0200 	mov.w	r2, #0
 8005ef0:	d124      	bne.n	8005f3c <_dtoa_r+0x60c>
 8005ef2:	4b1b      	ldr	r3, [pc, #108]	; (8005f60 <_dtoa_r+0x630>)
 8005ef4:	4650      	mov	r0, sl
 8005ef6:	4659      	mov	r1, fp
 8005ef8:	f7fa f9d0 	bl	800029c <__adddf3>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	4640      	mov	r0, r8
 8005f02:	4649      	mov	r1, r9
 8005f04:	f7fa fe10 	bl	8000b28 <__aeabi_dcmpgt>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d173      	bne.n	8005ff4 <_dtoa_r+0x6c4>
 8005f0c:	4652      	mov	r2, sl
 8005f0e:	465b      	mov	r3, fp
 8005f10:	4913      	ldr	r1, [pc, #76]	; (8005f60 <_dtoa_r+0x630>)
 8005f12:	2000      	movs	r0, #0
 8005f14:	f7fa f9c0 	bl	8000298 <__aeabi_dsub>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4640      	mov	r0, r8
 8005f1e:	4649      	mov	r1, r9
 8005f20:	f7fa fde4 	bl	8000aec <__aeabi_dcmplt>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	f43f af35 	beq.w	8005d94 <_dtoa_r+0x464>
 8005f2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005f2c:	1e6b      	subs	r3, r5, #1
 8005f2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f34:	2b30      	cmp	r3, #48	; 0x30
 8005f36:	d0f8      	beq.n	8005f2a <_dtoa_r+0x5fa>
 8005f38:	9700      	str	r7, [sp, #0]
 8005f3a:	e049      	b.n	8005fd0 <_dtoa_r+0x6a0>
 8005f3c:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <_dtoa_r+0x624>)
 8005f3e:	f7fa fb63 	bl	8000608 <__aeabi_dmul>
 8005f42:	4680      	mov	r8, r0
 8005f44:	4689      	mov	r9, r1
 8005f46:	e7bd      	b.n	8005ec4 <_dtoa_r+0x594>
 8005f48:	08008e88 	.word	0x08008e88
 8005f4c:	08008e60 	.word	0x08008e60
 8005f50:	3ff00000 	.word	0x3ff00000
 8005f54:	40240000 	.word	0x40240000
 8005f58:	401c0000 	.word	0x401c0000
 8005f5c:	40140000 	.word	0x40140000
 8005f60:	3fe00000 	.word	0x3fe00000
 8005f64:	9d01      	ldr	r5, [sp, #4]
 8005f66:	4656      	mov	r6, sl
 8005f68:	465f      	mov	r7, fp
 8005f6a:	4642      	mov	r2, r8
 8005f6c:	464b      	mov	r3, r9
 8005f6e:	4630      	mov	r0, r6
 8005f70:	4639      	mov	r1, r7
 8005f72:	f7fa fc73 	bl	800085c <__aeabi_ddiv>
 8005f76:	f7fa fdf7 	bl	8000b68 <__aeabi_d2iz>
 8005f7a:	4682      	mov	sl, r0
 8005f7c:	f7fa fada 	bl	8000534 <__aeabi_i2d>
 8005f80:	4642      	mov	r2, r8
 8005f82:	464b      	mov	r3, r9
 8005f84:	f7fa fb40 	bl	8000608 <__aeabi_dmul>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	4639      	mov	r1, r7
 8005f90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005f94:	f7fa f980 	bl	8000298 <__aeabi_dsub>
 8005f98:	f805 6b01 	strb.w	r6, [r5], #1
 8005f9c:	9e01      	ldr	r6, [sp, #4]
 8005f9e:	9f03      	ldr	r7, [sp, #12]
 8005fa0:	1bae      	subs	r6, r5, r6
 8005fa2:	42b7      	cmp	r7, r6
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	d135      	bne.n	8006016 <_dtoa_r+0x6e6>
 8005faa:	f7fa f977 	bl	800029c <__adddf3>
 8005fae:	4642      	mov	r2, r8
 8005fb0:	464b      	mov	r3, r9
 8005fb2:	4606      	mov	r6, r0
 8005fb4:	460f      	mov	r7, r1
 8005fb6:	f7fa fdb7 	bl	8000b28 <__aeabi_dcmpgt>
 8005fba:	b9d0      	cbnz	r0, 8005ff2 <_dtoa_r+0x6c2>
 8005fbc:	4642      	mov	r2, r8
 8005fbe:	464b      	mov	r3, r9
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	4639      	mov	r1, r7
 8005fc4:	f7fa fd88 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fc8:	b110      	cbz	r0, 8005fd0 <_dtoa_r+0x6a0>
 8005fca:	f01a 0f01 	tst.w	sl, #1
 8005fce:	d110      	bne.n	8005ff2 <_dtoa_r+0x6c2>
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	ee18 1a10 	vmov	r1, s16
 8005fd6:	f001 f897 	bl	8007108 <_Bfree>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	9800      	ldr	r0, [sp, #0]
 8005fde:	702b      	strb	r3, [r5, #0]
 8005fe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	6018      	str	r0, [r3, #0]
 8005fe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f43f acf1 	beq.w	80059d0 <_dtoa_r+0xa0>
 8005fee:	601d      	str	r5, [r3, #0]
 8005ff0:	e4ee      	b.n	80059d0 <_dtoa_r+0xa0>
 8005ff2:	9f00      	ldr	r7, [sp, #0]
 8005ff4:	462b      	mov	r3, r5
 8005ff6:	461d      	mov	r5, r3
 8005ff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ffc:	2a39      	cmp	r2, #57	; 0x39
 8005ffe:	d106      	bne.n	800600e <_dtoa_r+0x6de>
 8006000:	9a01      	ldr	r2, [sp, #4]
 8006002:	429a      	cmp	r2, r3
 8006004:	d1f7      	bne.n	8005ff6 <_dtoa_r+0x6c6>
 8006006:	9901      	ldr	r1, [sp, #4]
 8006008:	2230      	movs	r2, #48	; 0x30
 800600a:	3701      	adds	r7, #1
 800600c:	700a      	strb	r2, [r1, #0]
 800600e:	781a      	ldrb	r2, [r3, #0]
 8006010:	3201      	adds	r2, #1
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	e790      	b.n	8005f38 <_dtoa_r+0x608>
 8006016:	4ba6      	ldr	r3, [pc, #664]	; (80062b0 <_dtoa_r+0x980>)
 8006018:	2200      	movs	r2, #0
 800601a:	f7fa faf5 	bl	8000608 <__aeabi_dmul>
 800601e:	2200      	movs	r2, #0
 8006020:	2300      	movs	r3, #0
 8006022:	4606      	mov	r6, r0
 8006024:	460f      	mov	r7, r1
 8006026:	f7fa fd57 	bl	8000ad8 <__aeabi_dcmpeq>
 800602a:	2800      	cmp	r0, #0
 800602c:	d09d      	beq.n	8005f6a <_dtoa_r+0x63a>
 800602e:	e7cf      	b.n	8005fd0 <_dtoa_r+0x6a0>
 8006030:	9a08      	ldr	r2, [sp, #32]
 8006032:	2a00      	cmp	r2, #0
 8006034:	f000 80d7 	beq.w	80061e6 <_dtoa_r+0x8b6>
 8006038:	9a06      	ldr	r2, [sp, #24]
 800603a:	2a01      	cmp	r2, #1
 800603c:	f300 80ba 	bgt.w	80061b4 <_dtoa_r+0x884>
 8006040:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006042:	2a00      	cmp	r2, #0
 8006044:	f000 80b2 	beq.w	80061ac <_dtoa_r+0x87c>
 8006048:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800604c:	9e07      	ldr	r6, [sp, #28]
 800604e:	9d04      	ldr	r5, [sp, #16]
 8006050:	9a04      	ldr	r2, [sp, #16]
 8006052:	441a      	add	r2, r3
 8006054:	9204      	str	r2, [sp, #16]
 8006056:	9a05      	ldr	r2, [sp, #20]
 8006058:	2101      	movs	r1, #1
 800605a:	441a      	add	r2, r3
 800605c:	4620      	mov	r0, r4
 800605e:	9205      	str	r2, [sp, #20]
 8006060:	f001 f954 	bl	800730c <__i2b>
 8006064:	4607      	mov	r7, r0
 8006066:	2d00      	cmp	r5, #0
 8006068:	dd0c      	ble.n	8006084 <_dtoa_r+0x754>
 800606a:	9b05      	ldr	r3, [sp, #20]
 800606c:	2b00      	cmp	r3, #0
 800606e:	dd09      	ble.n	8006084 <_dtoa_r+0x754>
 8006070:	42ab      	cmp	r3, r5
 8006072:	9a04      	ldr	r2, [sp, #16]
 8006074:	bfa8      	it	ge
 8006076:	462b      	movge	r3, r5
 8006078:	1ad2      	subs	r2, r2, r3
 800607a:	9204      	str	r2, [sp, #16]
 800607c:	9a05      	ldr	r2, [sp, #20]
 800607e:	1aed      	subs	r5, r5, r3
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	9305      	str	r3, [sp, #20]
 8006084:	9b07      	ldr	r3, [sp, #28]
 8006086:	b31b      	cbz	r3, 80060d0 <_dtoa_r+0x7a0>
 8006088:	9b08      	ldr	r3, [sp, #32]
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 80af 	beq.w	80061ee <_dtoa_r+0x8be>
 8006090:	2e00      	cmp	r6, #0
 8006092:	dd13      	ble.n	80060bc <_dtoa_r+0x78c>
 8006094:	4639      	mov	r1, r7
 8006096:	4632      	mov	r2, r6
 8006098:	4620      	mov	r0, r4
 800609a:	f001 f9f7 	bl	800748c <__pow5mult>
 800609e:	ee18 2a10 	vmov	r2, s16
 80060a2:	4601      	mov	r1, r0
 80060a4:	4607      	mov	r7, r0
 80060a6:	4620      	mov	r0, r4
 80060a8:	f001 f946 	bl	8007338 <__multiply>
 80060ac:	ee18 1a10 	vmov	r1, s16
 80060b0:	4680      	mov	r8, r0
 80060b2:	4620      	mov	r0, r4
 80060b4:	f001 f828 	bl	8007108 <_Bfree>
 80060b8:	ee08 8a10 	vmov	s16, r8
 80060bc:	9b07      	ldr	r3, [sp, #28]
 80060be:	1b9a      	subs	r2, r3, r6
 80060c0:	d006      	beq.n	80060d0 <_dtoa_r+0x7a0>
 80060c2:	ee18 1a10 	vmov	r1, s16
 80060c6:	4620      	mov	r0, r4
 80060c8:	f001 f9e0 	bl	800748c <__pow5mult>
 80060cc:	ee08 0a10 	vmov	s16, r0
 80060d0:	2101      	movs	r1, #1
 80060d2:	4620      	mov	r0, r4
 80060d4:	f001 f91a 	bl	800730c <__i2b>
 80060d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060da:	2b00      	cmp	r3, #0
 80060dc:	4606      	mov	r6, r0
 80060de:	f340 8088 	ble.w	80061f2 <_dtoa_r+0x8c2>
 80060e2:	461a      	mov	r2, r3
 80060e4:	4601      	mov	r1, r0
 80060e6:	4620      	mov	r0, r4
 80060e8:	f001 f9d0 	bl	800748c <__pow5mult>
 80060ec:	9b06      	ldr	r3, [sp, #24]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	4606      	mov	r6, r0
 80060f2:	f340 8081 	ble.w	80061f8 <_dtoa_r+0x8c8>
 80060f6:	f04f 0800 	mov.w	r8, #0
 80060fa:	6933      	ldr	r3, [r6, #16]
 80060fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006100:	6918      	ldr	r0, [r3, #16]
 8006102:	f001 f8b3 	bl	800726c <__hi0bits>
 8006106:	f1c0 0020 	rsb	r0, r0, #32
 800610a:	9b05      	ldr	r3, [sp, #20]
 800610c:	4418      	add	r0, r3
 800610e:	f010 001f 	ands.w	r0, r0, #31
 8006112:	f000 8092 	beq.w	800623a <_dtoa_r+0x90a>
 8006116:	f1c0 0320 	rsb	r3, r0, #32
 800611a:	2b04      	cmp	r3, #4
 800611c:	f340 808a 	ble.w	8006234 <_dtoa_r+0x904>
 8006120:	f1c0 001c 	rsb	r0, r0, #28
 8006124:	9b04      	ldr	r3, [sp, #16]
 8006126:	4403      	add	r3, r0
 8006128:	9304      	str	r3, [sp, #16]
 800612a:	9b05      	ldr	r3, [sp, #20]
 800612c:	4403      	add	r3, r0
 800612e:	4405      	add	r5, r0
 8006130:	9305      	str	r3, [sp, #20]
 8006132:	9b04      	ldr	r3, [sp, #16]
 8006134:	2b00      	cmp	r3, #0
 8006136:	dd07      	ble.n	8006148 <_dtoa_r+0x818>
 8006138:	ee18 1a10 	vmov	r1, s16
 800613c:	461a      	mov	r2, r3
 800613e:	4620      	mov	r0, r4
 8006140:	f001 f9fe 	bl	8007540 <__lshift>
 8006144:	ee08 0a10 	vmov	s16, r0
 8006148:	9b05      	ldr	r3, [sp, #20]
 800614a:	2b00      	cmp	r3, #0
 800614c:	dd05      	ble.n	800615a <_dtoa_r+0x82a>
 800614e:	4631      	mov	r1, r6
 8006150:	461a      	mov	r2, r3
 8006152:	4620      	mov	r0, r4
 8006154:	f001 f9f4 	bl	8007540 <__lshift>
 8006158:	4606      	mov	r6, r0
 800615a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800615c:	2b00      	cmp	r3, #0
 800615e:	d06e      	beq.n	800623e <_dtoa_r+0x90e>
 8006160:	ee18 0a10 	vmov	r0, s16
 8006164:	4631      	mov	r1, r6
 8006166:	f001 fa5b 	bl	8007620 <__mcmp>
 800616a:	2800      	cmp	r0, #0
 800616c:	da67      	bge.n	800623e <_dtoa_r+0x90e>
 800616e:	9b00      	ldr	r3, [sp, #0]
 8006170:	3b01      	subs	r3, #1
 8006172:	ee18 1a10 	vmov	r1, s16
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	220a      	movs	r2, #10
 800617a:	2300      	movs	r3, #0
 800617c:	4620      	mov	r0, r4
 800617e:	f000 ffe5 	bl	800714c <__multadd>
 8006182:	9b08      	ldr	r3, [sp, #32]
 8006184:	ee08 0a10 	vmov	s16, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 81b1 	beq.w	80064f0 <_dtoa_r+0xbc0>
 800618e:	2300      	movs	r3, #0
 8006190:	4639      	mov	r1, r7
 8006192:	220a      	movs	r2, #10
 8006194:	4620      	mov	r0, r4
 8006196:	f000 ffd9 	bl	800714c <__multadd>
 800619a:	9b02      	ldr	r3, [sp, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	4607      	mov	r7, r0
 80061a0:	f300 808e 	bgt.w	80062c0 <_dtoa_r+0x990>
 80061a4:	9b06      	ldr	r3, [sp, #24]
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	dc51      	bgt.n	800624e <_dtoa_r+0x91e>
 80061aa:	e089      	b.n	80062c0 <_dtoa_r+0x990>
 80061ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80061b2:	e74b      	b.n	800604c <_dtoa_r+0x71c>
 80061b4:	9b03      	ldr	r3, [sp, #12]
 80061b6:	1e5e      	subs	r6, r3, #1
 80061b8:	9b07      	ldr	r3, [sp, #28]
 80061ba:	42b3      	cmp	r3, r6
 80061bc:	bfbf      	itttt	lt
 80061be:	9b07      	ldrlt	r3, [sp, #28]
 80061c0:	9607      	strlt	r6, [sp, #28]
 80061c2:	1af2      	sublt	r2, r6, r3
 80061c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80061c6:	bfb6      	itet	lt
 80061c8:	189b      	addlt	r3, r3, r2
 80061ca:	1b9e      	subge	r6, r3, r6
 80061cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80061ce:	9b03      	ldr	r3, [sp, #12]
 80061d0:	bfb8      	it	lt
 80061d2:	2600      	movlt	r6, #0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	bfb7      	itett	lt
 80061d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80061dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80061e0:	1a9d      	sublt	r5, r3, r2
 80061e2:	2300      	movlt	r3, #0
 80061e4:	e734      	b.n	8006050 <_dtoa_r+0x720>
 80061e6:	9e07      	ldr	r6, [sp, #28]
 80061e8:	9d04      	ldr	r5, [sp, #16]
 80061ea:	9f08      	ldr	r7, [sp, #32]
 80061ec:	e73b      	b.n	8006066 <_dtoa_r+0x736>
 80061ee:	9a07      	ldr	r2, [sp, #28]
 80061f0:	e767      	b.n	80060c2 <_dtoa_r+0x792>
 80061f2:	9b06      	ldr	r3, [sp, #24]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	dc18      	bgt.n	800622a <_dtoa_r+0x8fa>
 80061f8:	f1ba 0f00 	cmp.w	sl, #0
 80061fc:	d115      	bne.n	800622a <_dtoa_r+0x8fa>
 80061fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006202:	b993      	cbnz	r3, 800622a <_dtoa_r+0x8fa>
 8006204:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006208:	0d1b      	lsrs	r3, r3, #20
 800620a:	051b      	lsls	r3, r3, #20
 800620c:	b183      	cbz	r3, 8006230 <_dtoa_r+0x900>
 800620e:	9b04      	ldr	r3, [sp, #16]
 8006210:	3301      	adds	r3, #1
 8006212:	9304      	str	r3, [sp, #16]
 8006214:	9b05      	ldr	r3, [sp, #20]
 8006216:	3301      	adds	r3, #1
 8006218:	9305      	str	r3, [sp, #20]
 800621a:	f04f 0801 	mov.w	r8, #1
 800621e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006220:	2b00      	cmp	r3, #0
 8006222:	f47f af6a 	bne.w	80060fa <_dtoa_r+0x7ca>
 8006226:	2001      	movs	r0, #1
 8006228:	e76f      	b.n	800610a <_dtoa_r+0x7da>
 800622a:	f04f 0800 	mov.w	r8, #0
 800622e:	e7f6      	b.n	800621e <_dtoa_r+0x8ee>
 8006230:	4698      	mov	r8, r3
 8006232:	e7f4      	b.n	800621e <_dtoa_r+0x8ee>
 8006234:	f43f af7d 	beq.w	8006132 <_dtoa_r+0x802>
 8006238:	4618      	mov	r0, r3
 800623a:	301c      	adds	r0, #28
 800623c:	e772      	b.n	8006124 <_dtoa_r+0x7f4>
 800623e:	9b03      	ldr	r3, [sp, #12]
 8006240:	2b00      	cmp	r3, #0
 8006242:	dc37      	bgt.n	80062b4 <_dtoa_r+0x984>
 8006244:	9b06      	ldr	r3, [sp, #24]
 8006246:	2b02      	cmp	r3, #2
 8006248:	dd34      	ble.n	80062b4 <_dtoa_r+0x984>
 800624a:	9b03      	ldr	r3, [sp, #12]
 800624c:	9302      	str	r3, [sp, #8]
 800624e:	9b02      	ldr	r3, [sp, #8]
 8006250:	b96b      	cbnz	r3, 800626e <_dtoa_r+0x93e>
 8006252:	4631      	mov	r1, r6
 8006254:	2205      	movs	r2, #5
 8006256:	4620      	mov	r0, r4
 8006258:	f000 ff78 	bl	800714c <__multadd>
 800625c:	4601      	mov	r1, r0
 800625e:	4606      	mov	r6, r0
 8006260:	ee18 0a10 	vmov	r0, s16
 8006264:	f001 f9dc 	bl	8007620 <__mcmp>
 8006268:	2800      	cmp	r0, #0
 800626a:	f73f adbb 	bgt.w	8005de4 <_dtoa_r+0x4b4>
 800626e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006270:	9d01      	ldr	r5, [sp, #4]
 8006272:	43db      	mvns	r3, r3
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	f04f 0800 	mov.w	r8, #0
 800627a:	4631      	mov	r1, r6
 800627c:	4620      	mov	r0, r4
 800627e:	f000 ff43 	bl	8007108 <_Bfree>
 8006282:	2f00      	cmp	r7, #0
 8006284:	f43f aea4 	beq.w	8005fd0 <_dtoa_r+0x6a0>
 8006288:	f1b8 0f00 	cmp.w	r8, #0
 800628c:	d005      	beq.n	800629a <_dtoa_r+0x96a>
 800628e:	45b8      	cmp	r8, r7
 8006290:	d003      	beq.n	800629a <_dtoa_r+0x96a>
 8006292:	4641      	mov	r1, r8
 8006294:	4620      	mov	r0, r4
 8006296:	f000 ff37 	bl	8007108 <_Bfree>
 800629a:	4639      	mov	r1, r7
 800629c:	4620      	mov	r0, r4
 800629e:	f000 ff33 	bl	8007108 <_Bfree>
 80062a2:	e695      	b.n	8005fd0 <_dtoa_r+0x6a0>
 80062a4:	2600      	movs	r6, #0
 80062a6:	4637      	mov	r7, r6
 80062a8:	e7e1      	b.n	800626e <_dtoa_r+0x93e>
 80062aa:	9700      	str	r7, [sp, #0]
 80062ac:	4637      	mov	r7, r6
 80062ae:	e599      	b.n	8005de4 <_dtoa_r+0x4b4>
 80062b0:	40240000 	.word	0x40240000
 80062b4:	9b08      	ldr	r3, [sp, #32]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 80ca 	beq.w	8006450 <_dtoa_r+0xb20>
 80062bc:	9b03      	ldr	r3, [sp, #12]
 80062be:	9302      	str	r3, [sp, #8]
 80062c0:	2d00      	cmp	r5, #0
 80062c2:	dd05      	ble.n	80062d0 <_dtoa_r+0x9a0>
 80062c4:	4639      	mov	r1, r7
 80062c6:	462a      	mov	r2, r5
 80062c8:	4620      	mov	r0, r4
 80062ca:	f001 f939 	bl	8007540 <__lshift>
 80062ce:	4607      	mov	r7, r0
 80062d0:	f1b8 0f00 	cmp.w	r8, #0
 80062d4:	d05b      	beq.n	800638e <_dtoa_r+0xa5e>
 80062d6:	6879      	ldr	r1, [r7, #4]
 80062d8:	4620      	mov	r0, r4
 80062da:	f000 fed5 	bl	8007088 <_Balloc>
 80062de:	4605      	mov	r5, r0
 80062e0:	b928      	cbnz	r0, 80062ee <_dtoa_r+0x9be>
 80062e2:	4b87      	ldr	r3, [pc, #540]	; (8006500 <_dtoa_r+0xbd0>)
 80062e4:	4602      	mov	r2, r0
 80062e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80062ea:	f7ff bb3b 	b.w	8005964 <_dtoa_r+0x34>
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	3202      	adds	r2, #2
 80062f2:	0092      	lsls	r2, r2, #2
 80062f4:	f107 010c 	add.w	r1, r7, #12
 80062f8:	300c      	adds	r0, #12
 80062fa:	f000 feab 	bl	8007054 <memcpy>
 80062fe:	2201      	movs	r2, #1
 8006300:	4629      	mov	r1, r5
 8006302:	4620      	mov	r0, r4
 8006304:	f001 f91c 	bl	8007540 <__lshift>
 8006308:	9b01      	ldr	r3, [sp, #4]
 800630a:	f103 0901 	add.w	r9, r3, #1
 800630e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006312:	4413      	add	r3, r2
 8006314:	9305      	str	r3, [sp, #20]
 8006316:	f00a 0301 	and.w	r3, sl, #1
 800631a:	46b8      	mov	r8, r7
 800631c:	9304      	str	r3, [sp, #16]
 800631e:	4607      	mov	r7, r0
 8006320:	4631      	mov	r1, r6
 8006322:	ee18 0a10 	vmov	r0, s16
 8006326:	f7ff fa75 	bl	8005814 <quorem>
 800632a:	4641      	mov	r1, r8
 800632c:	9002      	str	r0, [sp, #8]
 800632e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006332:	ee18 0a10 	vmov	r0, s16
 8006336:	f001 f973 	bl	8007620 <__mcmp>
 800633a:	463a      	mov	r2, r7
 800633c:	9003      	str	r0, [sp, #12]
 800633e:	4631      	mov	r1, r6
 8006340:	4620      	mov	r0, r4
 8006342:	f001 f989 	bl	8007658 <__mdiff>
 8006346:	68c2      	ldr	r2, [r0, #12]
 8006348:	f109 3bff 	add.w	fp, r9, #4294967295
 800634c:	4605      	mov	r5, r0
 800634e:	bb02      	cbnz	r2, 8006392 <_dtoa_r+0xa62>
 8006350:	4601      	mov	r1, r0
 8006352:	ee18 0a10 	vmov	r0, s16
 8006356:	f001 f963 	bl	8007620 <__mcmp>
 800635a:	4602      	mov	r2, r0
 800635c:	4629      	mov	r1, r5
 800635e:	4620      	mov	r0, r4
 8006360:	9207      	str	r2, [sp, #28]
 8006362:	f000 fed1 	bl	8007108 <_Bfree>
 8006366:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800636a:	ea43 0102 	orr.w	r1, r3, r2
 800636e:	9b04      	ldr	r3, [sp, #16]
 8006370:	430b      	orrs	r3, r1
 8006372:	464d      	mov	r5, r9
 8006374:	d10f      	bne.n	8006396 <_dtoa_r+0xa66>
 8006376:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800637a:	d02a      	beq.n	80063d2 <_dtoa_r+0xaa2>
 800637c:	9b03      	ldr	r3, [sp, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	dd02      	ble.n	8006388 <_dtoa_r+0xa58>
 8006382:	9b02      	ldr	r3, [sp, #8]
 8006384:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006388:	f88b a000 	strb.w	sl, [fp]
 800638c:	e775      	b.n	800627a <_dtoa_r+0x94a>
 800638e:	4638      	mov	r0, r7
 8006390:	e7ba      	b.n	8006308 <_dtoa_r+0x9d8>
 8006392:	2201      	movs	r2, #1
 8006394:	e7e2      	b.n	800635c <_dtoa_r+0xa2c>
 8006396:	9b03      	ldr	r3, [sp, #12]
 8006398:	2b00      	cmp	r3, #0
 800639a:	db04      	blt.n	80063a6 <_dtoa_r+0xa76>
 800639c:	9906      	ldr	r1, [sp, #24]
 800639e:	430b      	orrs	r3, r1
 80063a0:	9904      	ldr	r1, [sp, #16]
 80063a2:	430b      	orrs	r3, r1
 80063a4:	d122      	bne.n	80063ec <_dtoa_r+0xabc>
 80063a6:	2a00      	cmp	r2, #0
 80063a8:	ddee      	ble.n	8006388 <_dtoa_r+0xa58>
 80063aa:	ee18 1a10 	vmov	r1, s16
 80063ae:	2201      	movs	r2, #1
 80063b0:	4620      	mov	r0, r4
 80063b2:	f001 f8c5 	bl	8007540 <__lshift>
 80063b6:	4631      	mov	r1, r6
 80063b8:	ee08 0a10 	vmov	s16, r0
 80063bc:	f001 f930 	bl	8007620 <__mcmp>
 80063c0:	2800      	cmp	r0, #0
 80063c2:	dc03      	bgt.n	80063cc <_dtoa_r+0xa9c>
 80063c4:	d1e0      	bne.n	8006388 <_dtoa_r+0xa58>
 80063c6:	f01a 0f01 	tst.w	sl, #1
 80063ca:	d0dd      	beq.n	8006388 <_dtoa_r+0xa58>
 80063cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80063d0:	d1d7      	bne.n	8006382 <_dtoa_r+0xa52>
 80063d2:	2339      	movs	r3, #57	; 0x39
 80063d4:	f88b 3000 	strb.w	r3, [fp]
 80063d8:	462b      	mov	r3, r5
 80063da:	461d      	mov	r5, r3
 80063dc:	3b01      	subs	r3, #1
 80063de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80063e2:	2a39      	cmp	r2, #57	; 0x39
 80063e4:	d071      	beq.n	80064ca <_dtoa_r+0xb9a>
 80063e6:	3201      	adds	r2, #1
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	e746      	b.n	800627a <_dtoa_r+0x94a>
 80063ec:	2a00      	cmp	r2, #0
 80063ee:	dd07      	ble.n	8006400 <_dtoa_r+0xad0>
 80063f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80063f4:	d0ed      	beq.n	80063d2 <_dtoa_r+0xaa2>
 80063f6:	f10a 0301 	add.w	r3, sl, #1
 80063fa:	f88b 3000 	strb.w	r3, [fp]
 80063fe:	e73c      	b.n	800627a <_dtoa_r+0x94a>
 8006400:	9b05      	ldr	r3, [sp, #20]
 8006402:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006406:	4599      	cmp	r9, r3
 8006408:	d047      	beq.n	800649a <_dtoa_r+0xb6a>
 800640a:	ee18 1a10 	vmov	r1, s16
 800640e:	2300      	movs	r3, #0
 8006410:	220a      	movs	r2, #10
 8006412:	4620      	mov	r0, r4
 8006414:	f000 fe9a 	bl	800714c <__multadd>
 8006418:	45b8      	cmp	r8, r7
 800641a:	ee08 0a10 	vmov	s16, r0
 800641e:	f04f 0300 	mov.w	r3, #0
 8006422:	f04f 020a 	mov.w	r2, #10
 8006426:	4641      	mov	r1, r8
 8006428:	4620      	mov	r0, r4
 800642a:	d106      	bne.n	800643a <_dtoa_r+0xb0a>
 800642c:	f000 fe8e 	bl	800714c <__multadd>
 8006430:	4680      	mov	r8, r0
 8006432:	4607      	mov	r7, r0
 8006434:	f109 0901 	add.w	r9, r9, #1
 8006438:	e772      	b.n	8006320 <_dtoa_r+0x9f0>
 800643a:	f000 fe87 	bl	800714c <__multadd>
 800643e:	4639      	mov	r1, r7
 8006440:	4680      	mov	r8, r0
 8006442:	2300      	movs	r3, #0
 8006444:	220a      	movs	r2, #10
 8006446:	4620      	mov	r0, r4
 8006448:	f000 fe80 	bl	800714c <__multadd>
 800644c:	4607      	mov	r7, r0
 800644e:	e7f1      	b.n	8006434 <_dtoa_r+0xb04>
 8006450:	9b03      	ldr	r3, [sp, #12]
 8006452:	9302      	str	r3, [sp, #8]
 8006454:	9d01      	ldr	r5, [sp, #4]
 8006456:	ee18 0a10 	vmov	r0, s16
 800645a:	4631      	mov	r1, r6
 800645c:	f7ff f9da 	bl	8005814 <quorem>
 8006460:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006464:	9b01      	ldr	r3, [sp, #4]
 8006466:	f805 ab01 	strb.w	sl, [r5], #1
 800646a:	1aea      	subs	r2, r5, r3
 800646c:	9b02      	ldr	r3, [sp, #8]
 800646e:	4293      	cmp	r3, r2
 8006470:	dd09      	ble.n	8006486 <_dtoa_r+0xb56>
 8006472:	ee18 1a10 	vmov	r1, s16
 8006476:	2300      	movs	r3, #0
 8006478:	220a      	movs	r2, #10
 800647a:	4620      	mov	r0, r4
 800647c:	f000 fe66 	bl	800714c <__multadd>
 8006480:	ee08 0a10 	vmov	s16, r0
 8006484:	e7e7      	b.n	8006456 <_dtoa_r+0xb26>
 8006486:	9b02      	ldr	r3, [sp, #8]
 8006488:	2b00      	cmp	r3, #0
 800648a:	bfc8      	it	gt
 800648c:	461d      	movgt	r5, r3
 800648e:	9b01      	ldr	r3, [sp, #4]
 8006490:	bfd8      	it	le
 8006492:	2501      	movle	r5, #1
 8006494:	441d      	add	r5, r3
 8006496:	f04f 0800 	mov.w	r8, #0
 800649a:	ee18 1a10 	vmov	r1, s16
 800649e:	2201      	movs	r2, #1
 80064a0:	4620      	mov	r0, r4
 80064a2:	f001 f84d 	bl	8007540 <__lshift>
 80064a6:	4631      	mov	r1, r6
 80064a8:	ee08 0a10 	vmov	s16, r0
 80064ac:	f001 f8b8 	bl	8007620 <__mcmp>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	dc91      	bgt.n	80063d8 <_dtoa_r+0xaa8>
 80064b4:	d102      	bne.n	80064bc <_dtoa_r+0xb8c>
 80064b6:	f01a 0f01 	tst.w	sl, #1
 80064ba:	d18d      	bne.n	80063d8 <_dtoa_r+0xaa8>
 80064bc:	462b      	mov	r3, r5
 80064be:	461d      	mov	r5, r3
 80064c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064c4:	2a30      	cmp	r2, #48	; 0x30
 80064c6:	d0fa      	beq.n	80064be <_dtoa_r+0xb8e>
 80064c8:	e6d7      	b.n	800627a <_dtoa_r+0x94a>
 80064ca:	9a01      	ldr	r2, [sp, #4]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d184      	bne.n	80063da <_dtoa_r+0xaaa>
 80064d0:	9b00      	ldr	r3, [sp, #0]
 80064d2:	3301      	adds	r3, #1
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	2331      	movs	r3, #49	; 0x31
 80064d8:	7013      	strb	r3, [r2, #0]
 80064da:	e6ce      	b.n	800627a <_dtoa_r+0x94a>
 80064dc:	4b09      	ldr	r3, [pc, #36]	; (8006504 <_dtoa_r+0xbd4>)
 80064de:	f7ff ba95 	b.w	8005a0c <_dtoa_r+0xdc>
 80064e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f47f aa6e 	bne.w	80059c6 <_dtoa_r+0x96>
 80064ea:	4b07      	ldr	r3, [pc, #28]	; (8006508 <_dtoa_r+0xbd8>)
 80064ec:	f7ff ba8e 	b.w	8005a0c <_dtoa_r+0xdc>
 80064f0:	9b02      	ldr	r3, [sp, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	dcae      	bgt.n	8006454 <_dtoa_r+0xb24>
 80064f6:	9b06      	ldr	r3, [sp, #24]
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	f73f aea8 	bgt.w	800624e <_dtoa_r+0x91e>
 80064fe:	e7a9      	b.n	8006454 <_dtoa_r+0xb24>
 8006500:	08008d10 	.word	0x08008d10
 8006504:	08008b10 	.word	0x08008b10
 8006508:	08008c91 	.word	0x08008c91

0800650c <__sflush_r>:
 800650c:	898a      	ldrh	r2, [r1, #12]
 800650e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006512:	4605      	mov	r5, r0
 8006514:	0710      	lsls	r0, r2, #28
 8006516:	460c      	mov	r4, r1
 8006518:	d458      	bmi.n	80065cc <__sflush_r+0xc0>
 800651a:	684b      	ldr	r3, [r1, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	dc05      	bgt.n	800652c <__sflush_r+0x20>
 8006520:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006522:	2b00      	cmp	r3, #0
 8006524:	dc02      	bgt.n	800652c <__sflush_r+0x20>
 8006526:	2000      	movs	r0, #0
 8006528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800652c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800652e:	2e00      	cmp	r6, #0
 8006530:	d0f9      	beq.n	8006526 <__sflush_r+0x1a>
 8006532:	2300      	movs	r3, #0
 8006534:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006538:	682f      	ldr	r7, [r5, #0]
 800653a:	602b      	str	r3, [r5, #0]
 800653c:	d032      	beq.n	80065a4 <__sflush_r+0x98>
 800653e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	075a      	lsls	r2, r3, #29
 8006544:	d505      	bpl.n	8006552 <__sflush_r+0x46>
 8006546:	6863      	ldr	r3, [r4, #4]
 8006548:	1ac0      	subs	r0, r0, r3
 800654a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800654c:	b10b      	cbz	r3, 8006552 <__sflush_r+0x46>
 800654e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006550:	1ac0      	subs	r0, r0, r3
 8006552:	2300      	movs	r3, #0
 8006554:	4602      	mov	r2, r0
 8006556:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006558:	6a21      	ldr	r1, [r4, #32]
 800655a:	4628      	mov	r0, r5
 800655c:	47b0      	blx	r6
 800655e:	1c43      	adds	r3, r0, #1
 8006560:	89a3      	ldrh	r3, [r4, #12]
 8006562:	d106      	bne.n	8006572 <__sflush_r+0x66>
 8006564:	6829      	ldr	r1, [r5, #0]
 8006566:	291d      	cmp	r1, #29
 8006568:	d82c      	bhi.n	80065c4 <__sflush_r+0xb8>
 800656a:	4a2a      	ldr	r2, [pc, #168]	; (8006614 <__sflush_r+0x108>)
 800656c:	40ca      	lsrs	r2, r1
 800656e:	07d6      	lsls	r6, r2, #31
 8006570:	d528      	bpl.n	80065c4 <__sflush_r+0xb8>
 8006572:	2200      	movs	r2, #0
 8006574:	6062      	str	r2, [r4, #4]
 8006576:	04d9      	lsls	r1, r3, #19
 8006578:	6922      	ldr	r2, [r4, #16]
 800657a:	6022      	str	r2, [r4, #0]
 800657c:	d504      	bpl.n	8006588 <__sflush_r+0x7c>
 800657e:	1c42      	adds	r2, r0, #1
 8006580:	d101      	bne.n	8006586 <__sflush_r+0x7a>
 8006582:	682b      	ldr	r3, [r5, #0]
 8006584:	b903      	cbnz	r3, 8006588 <__sflush_r+0x7c>
 8006586:	6560      	str	r0, [r4, #84]	; 0x54
 8006588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800658a:	602f      	str	r7, [r5, #0]
 800658c:	2900      	cmp	r1, #0
 800658e:	d0ca      	beq.n	8006526 <__sflush_r+0x1a>
 8006590:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006594:	4299      	cmp	r1, r3
 8006596:	d002      	beq.n	800659e <__sflush_r+0x92>
 8006598:	4628      	mov	r0, r5
 800659a:	f7fd f99b 	bl	80038d4 <_free_r>
 800659e:	2000      	movs	r0, #0
 80065a0:	6360      	str	r0, [r4, #52]	; 0x34
 80065a2:	e7c1      	b.n	8006528 <__sflush_r+0x1c>
 80065a4:	6a21      	ldr	r1, [r4, #32]
 80065a6:	2301      	movs	r3, #1
 80065a8:	4628      	mov	r0, r5
 80065aa:	47b0      	blx	r6
 80065ac:	1c41      	adds	r1, r0, #1
 80065ae:	d1c7      	bne.n	8006540 <__sflush_r+0x34>
 80065b0:	682b      	ldr	r3, [r5, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0c4      	beq.n	8006540 <__sflush_r+0x34>
 80065b6:	2b1d      	cmp	r3, #29
 80065b8:	d001      	beq.n	80065be <__sflush_r+0xb2>
 80065ba:	2b16      	cmp	r3, #22
 80065bc:	d101      	bne.n	80065c2 <__sflush_r+0xb6>
 80065be:	602f      	str	r7, [r5, #0]
 80065c0:	e7b1      	b.n	8006526 <__sflush_r+0x1a>
 80065c2:	89a3      	ldrh	r3, [r4, #12]
 80065c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065c8:	81a3      	strh	r3, [r4, #12]
 80065ca:	e7ad      	b.n	8006528 <__sflush_r+0x1c>
 80065cc:	690f      	ldr	r7, [r1, #16]
 80065ce:	2f00      	cmp	r7, #0
 80065d0:	d0a9      	beq.n	8006526 <__sflush_r+0x1a>
 80065d2:	0793      	lsls	r3, r2, #30
 80065d4:	680e      	ldr	r6, [r1, #0]
 80065d6:	bf08      	it	eq
 80065d8:	694b      	ldreq	r3, [r1, #20]
 80065da:	600f      	str	r7, [r1, #0]
 80065dc:	bf18      	it	ne
 80065de:	2300      	movne	r3, #0
 80065e0:	eba6 0807 	sub.w	r8, r6, r7
 80065e4:	608b      	str	r3, [r1, #8]
 80065e6:	f1b8 0f00 	cmp.w	r8, #0
 80065ea:	dd9c      	ble.n	8006526 <__sflush_r+0x1a>
 80065ec:	6a21      	ldr	r1, [r4, #32]
 80065ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80065f0:	4643      	mov	r3, r8
 80065f2:	463a      	mov	r2, r7
 80065f4:	4628      	mov	r0, r5
 80065f6:	47b0      	blx	r6
 80065f8:	2800      	cmp	r0, #0
 80065fa:	dc06      	bgt.n	800660a <__sflush_r+0xfe>
 80065fc:	89a3      	ldrh	r3, [r4, #12]
 80065fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006602:	81a3      	strh	r3, [r4, #12]
 8006604:	f04f 30ff 	mov.w	r0, #4294967295
 8006608:	e78e      	b.n	8006528 <__sflush_r+0x1c>
 800660a:	4407      	add	r7, r0
 800660c:	eba8 0800 	sub.w	r8, r8, r0
 8006610:	e7e9      	b.n	80065e6 <__sflush_r+0xda>
 8006612:	bf00      	nop
 8006614:	20400001 	.word	0x20400001

08006618 <_fflush_r>:
 8006618:	b538      	push	{r3, r4, r5, lr}
 800661a:	690b      	ldr	r3, [r1, #16]
 800661c:	4605      	mov	r5, r0
 800661e:	460c      	mov	r4, r1
 8006620:	b913      	cbnz	r3, 8006628 <_fflush_r+0x10>
 8006622:	2500      	movs	r5, #0
 8006624:	4628      	mov	r0, r5
 8006626:	bd38      	pop	{r3, r4, r5, pc}
 8006628:	b118      	cbz	r0, 8006632 <_fflush_r+0x1a>
 800662a:	6983      	ldr	r3, [r0, #24]
 800662c:	b90b      	cbnz	r3, 8006632 <_fflush_r+0x1a>
 800662e:	f000 f887 	bl	8006740 <__sinit>
 8006632:	4b14      	ldr	r3, [pc, #80]	; (8006684 <_fflush_r+0x6c>)
 8006634:	429c      	cmp	r4, r3
 8006636:	d11b      	bne.n	8006670 <_fflush_r+0x58>
 8006638:	686c      	ldr	r4, [r5, #4]
 800663a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d0ef      	beq.n	8006622 <_fflush_r+0xa>
 8006642:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006644:	07d0      	lsls	r0, r2, #31
 8006646:	d404      	bmi.n	8006652 <_fflush_r+0x3a>
 8006648:	0599      	lsls	r1, r3, #22
 800664a:	d402      	bmi.n	8006652 <_fflush_r+0x3a>
 800664c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800664e:	f000 fc88 	bl	8006f62 <__retarget_lock_acquire_recursive>
 8006652:	4628      	mov	r0, r5
 8006654:	4621      	mov	r1, r4
 8006656:	f7ff ff59 	bl	800650c <__sflush_r>
 800665a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800665c:	07da      	lsls	r2, r3, #31
 800665e:	4605      	mov	r5, r0
 8006660:	d4e0      	bmi.n	8006624 <_fflush_r+0xc>
 8006662:	89a3      	ldrh	r3, [r4, #12]
 8006664:	059b      	lsls	r3, r3, #22
 8006666:	d4dd      	bmi.n	8006624 <_fflush_r+0xc>
 8006668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800666a:	f000 fc7b 	bl	8006f64 <__retarget_lock_release_recursive>
 800666e:	e7d9      	b.n	8006624 <_fflush_r+0xc>
 8006670:	4b05      	ldr	r3, [pc, #20]	; (8006688 <_fflush_r+0x70>)
 8006672:	429c      	cmp	r4, r3
 8006674:	d101      	bne.n	800667a <_fflush_r+0x62>
 8006676:	68ac      	ldr	r4, [r5, #8]
 8006678:	e7df      	b.n	800663a <_fflush_r+0x22>
 800667a:	4b04      	ldr	r3, [pc, #16]	; (800668c <_fflush_r+0x74>)
 800667c:	429c      	cmp	r4, r3
 800667e:	bf08      	it	eq
 8006680:	68ec      	ldreq	r4, [r5, #12]
 8006682:	e7da      	b.n	800663a <_fflush_r+0x22>
 8006684:	08008d44 	.word	0x08008d44
 8006688:	08008d64 	.word	0x08008d64
 800668c:	08008d24 	.word	0x08008d24

08006690 <std>:
 8006690:	2300      	movs	r3, #0
 8006692:	b510      	push	{r4, lr}
 8006694:	4604      	mov	r4, r0
 8006696:	e9c0 3300 	strd	r3, r3, [r0]
 800669a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800669e:	6083      	str	r3, [r0, #8]
 80066a0:	8181      	strh	r1, [r0, #12]
 80066a2:	6643      	str	r3, [r0, #100]	; 0x64
 80066a4:	81c2      	strh	r2, [r0, #14]
 80066a6:	6183      	str	r3, [r0, #24]
 80066a8:	4619      	mov	r1, r3
 80066aa:	2208      	movs	r2, #8
 80066ac:	305c      	adds	r0, #92	; 0x5c
 80066ae:	f7fd f909 	bl	80038c4 <memset>
 80066b2:	4b05      	ldr	r3, [pc, #20]	; (80066c8 <std+0x38>)
 80066b4:	6263      	str	r3, [r4, #36]	; 0x24
 80066b6:	4b05      	ldr	r3, [pc, #20]	; (80066cc <std+0x3c>)
 80066b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80066ba:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <std+0x40>)
 80066bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066be:	4b05      	ldr	r3, [pc, #20]	; (80066d4 <std+0x44>)
 80066c0:	6224      	str	r4, [r4, #32]
 80066c2:	6323      	str	r3, [r4, #48]	; 0x30
 80066c4:	bd10      	pop	{r4, pc}
 80066c6:	bf00      	nop
 80066c8:	08007fb1 	.word	0x08007fb1
 80066cc:	08007fd3 	.word	0x08007fd3
 80066d0:	0800800b 	.word	0x0800800b
 80066d4:	0800802f 	.word	0x0800802f

080066d8 <_cleanup_r>:
 80066d8:	4901      	ldr	r1, [pc, #4]	; (80066e0 <_cleanup_r+0x8>)
 80066da:	f000 b8af 	b.w	800683c <_fwalk_reent>
 80066de:	bf00      	nop
 80066e0:	08006619 	.word	0x08006619

080066e4 <__sfmoreglue>:
 80066e4:	b570      	push	{r4, r5, r6, lr}
 80066e6:	2268      	movs	r2, #104	; 0x68
 80066e8:	1e4d      	subs	r5, r1, #1
 80066ea:	4355      	muls	r5, r2
 80066ec:	460e      	mov	r6, r1
 80066ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80066f2:	f7fd f95b 	bl	80039ac <_malloc_r>
 80066f6:	4604      	mov	r4, r0
 80066f8:	b140      	cbz	r0, 800670c <__sfmoreglue+0x28>
 80066fa:	2100      	movs	r1, #0
 80066fc:	e9c0 1600 	strd	r1, r6, [r0]
 8006700:	300c      	adds	r0, #12
 8006702:	60a0      	str	r0, [r4, #8]
 8006704:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006708:	f7fd f8dc 	bl	80038c4 <memset>
 800670c:	4620      	mov	r0, r4
 800670e:	bd70      	pop	{r4, r5, r6, pc}

08006710 <__sfp_lock_acquire>:
 8006710:	4801      	ldr	r0, [pc, #4]	; (8006718 <__sfp_lock_acquire+0x8>)
 8006712:	f000 bc26 	b.w	8006f62 <__retarget_lock_acquire_recursive>
 8006716:	bf00      	nop
 8006718:	20000ccd 	.word	0x20000ccd

0800671c <__sfp_lock_release>:
 800671c:	4801      	ldr	r0, [pc, #4]	; (8006724 <__sfp_lock_release+0x8>)
 800671e:	f000 bc21 	b.w	8006f64 <__retarget_lock_release_recursive>
 8006722:	bf00      	nop
 8006724:	20000ccd 	.word	0x20000ccd

08006728 <__sinit_lock_acquire>:
 8006728:	4801      	ldr	r0, [pc, #4]	; (8006730 <__sinit_lock_acquire+0x8>)
 800672a:	f000 bc1a 	b.w	8006f62 <__retarget_lock_acquire_recursive>
 800672e:	bf00      	nop
 8006730:	20000cce 	.word	0x20000cce

08006734 <__sinit_lock_release>:
 8006734:	4801      	ldr	r0, [pc, #4]	; (800673c <__sinit_lock_release+0x8>)
 8006736:	f000 bc15 	b.w	8006f64 <__retarget_lock_release_recursive>
 800673a:	bf00      	nop
 800673c:	20000cce 	.word	0x20000cce

08006740 <__sinit>:
 8006740:	b510      	push	{r4, lr}
 8006742:	4604      	mov	r4, r0
 8006744:	f7ff fff0 	bl	8006728 <__sinit_lock_acquire>
 8006748:	69a3      	ldr	r3, [r4, #24]
 800674a:	b11b      	cbz	r3, 8006754 <__sinit+0x14>
 800674c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006750:	f7ff bff0 	b.w	8006734 <__sinit_lock_release>
 8006754:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006758:	6523      	str	r3, [r4, #80]	; 0x50
 800675a:	4b13      	ldr	r3, [pc, #76]	; (80067a8 <__sinit+0x68>)
 800675c:	4a13      	ldr	r2, [pc, #76]	; (80067ac <__sinit+0x6c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	62a2      	str	r2, [r4, #40]	; 0x28
 8006762:	42a3      	cmp	r3, r4
 8006764:	bf04      	itt	eq
 8006766:	2301      	moveq	r3, #1
 8006768:	61a3      	streq	r3, [r4, #24]
 800676a:	4620      	mov	r0, r4
 800676c:	f000 f820 	bl	80067b0 <__sfp>
 8006770:	6060      	str	r0, [r4, #4]
 8006772:	4620      	mov	r0, r4
 8006774:	f000 f81c 	bl	80067b0 <__sfp>
 8006778:	60a0      	str	r0, [r4, #8]
 800677a:	4620      	mov	r0, r4
 800677c:	f000 f818 	bl	80067b0 <__sfp>
 8006780:	2200      	movs	r2, #0
 8006782:	60e0      	str	r0, [r4, #12]
 8006784:	2104      	movs	r1, #4
 8006786:	6860      	ldr	r0, [r4, #4]
 8006788:	f7ff ff82 	bl	8006690 <std>
 800678c:	68a0      	ldr	r0, [r4, #8]
 800678e:	2201      	movs	r2, #1
 8006790:	2109      	movs	r1, #9
 8006792:	f7ff ff7d 	bl	8006690 <std>
 8006796:	68e0      	ldr	r0, [r4, #12]
 8006798:	2202      	movs	r2, #2
 800679a:	2112      	movs	r1, #18
 800679c:	f7ff ff78 	bl	8006690 <std>
 80067a0:	2301      	movs	r3, #1
 80067a2:	61a3      	str	r3, [r4, #24]
 80067a4:	e7d2      	b.n	800674c <__sinit+0xc>
 80067a6:	bf00      	nop
 80067a8:	08008afc 	.word	0x08008afc
 80067ac:	080066d9 	.word	0x080066d9

080067b0 <__sfp>:
 80067b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b2:	4607      	mov	r7, r0
 80067b4:	f7ff ffac 	bl	8006710 <__sfp_lock_acquire>
 80067b8:	4b1e      	ldr	r3, [pc, #120]	; (8006834 <__sfp+0x84>)
 80067ba:	681e      	ldr	r6, [r3, #0]
 80067bc:	69b3      	ldr	r3, [r6, #24]
 80067be:	b913      	cbnz	r3, 80067c6 <__sfp+0x16>
 80067c0:	4630      	mov	r0, r6
 80067c2:	f7ff ffbd 	bl	8006740 <__sinit>
 80067c6:	3648      	adds	r6, #72	; 0x48
 80067c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80067cc:	3b01      	subs	r3, #1
 80067ce:	d503      	bpl.n	80067d8 <__sfp+0x28>
 80067d0:	6833      	ldr	r3, [r6, #0]
 80067d2:	b30b      	cbz	r3, 8006818 <__sfp+0x68>
 80067d4:	6836      	ldr	r6, [r6, #0]
 80067d6:	e7f7      	b.n	80067c8 <__sfp+0x18>
 80067d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80067dc:	b9d5      	cbnz	r5, 8006814 <__sfp+0x64>
 80067de:	4b16      	ldr	r3, [pc, #88]	; (8006838 <__sfp+0x88>)
 80067e0:	60e3      	str	r3, [r4, #12]
 80067e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067e6:	6665      	str	r5, [r4, #100]	; 0x64
 80067e8:	f000 fbba 	bl	8006f60 <__retarget_lock_init_recursive>
 80067ec:	f7ff ff96 	bl	800671c <__sfp_lock_release>
 80067f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80067f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80067f8:	6025      	str	r5, [r4, #0]
 80067fa:	61a5      	str	r5, [r4, #24]
 80067fc:	2208      	movs	r2, #8
 80067fe:	4629      	mov	r1, r5
 8006800:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006804:	f7fd f85e 	bl	80038c4 <memset>
 8006808:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800680c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006810:	4620      	mov	r0, r4
 8006812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006814:	3468      	adds	r4, #104	; 0x68
 8006816:	e7d9      	b.n	80067cc <__sfp+0x1c>
 8006818:	2104      	movs	r1, #4
 800681a:	4638      	mov	r0, r7
 800681c:	f7ff ff62 	bl	80066e4 <__sfmoreglue>
 8006820:	4604      	mov	r4, r0
 8006822:	6030      	str	r0, [r6, #0]
 8006824:	2800      	cmp	r0, #0
 8006826:	d1d5      	bne.n	80067d4 <__sfp+0x24>
 8006828:	f7ff ff78 	bl	800671c <__sfp_lock_release>
 800682c:	230c      	movs	r3, #12
 800682e:	603b      	str	r3, [r7, #0]
 8006830:	e7ee      	b.n	8006810 <__sfp+0x60>
 8006832:	bf00      	nop
 8006834:	08008afc 	.word	0x08008afc
 8006838:	ffff0001 	.word	0xffff0001

0800683c <_fwalk_reent>:
 800683c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006840:	4606      	mov	r6, r0
 8006842:	4688      	mov	r8, r1
 8006844:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006848:	2700      	movs	r7, #0
 800684a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800684e:	f1b9 0901 	subs.w	r9, r9, #1
 8006852:	d505      	bpl.n	8006860 <_fwalk_reent+0x24>
 8006854:	6824      	ldr	r4, [r4, #0]
 8006856:	2c00      	cmp	r4, #0
 8006858:	d1f7      	bne.n	800684a <_fwalk_reent+0xe>
 800685a:	4638      	mov	r0, r7
 800685c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006860:	89ab      	ldrh	r3, [r5, #12]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d907      	bls.n	8006876 <_fwalk_reent+0x3a>
 8006866:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800686a:	3301      	adds	r3, #1
 800686c:	d003      	beq.n	8006876 <_fwalk_reent+0x3a>
 800686e:	4629      	mov	r1, r5
 8006870:	4630      	mov	r0, r6
 8006872:	47c0      	blx	r8
 8006874:	4307      	orrs	r7, r0
 8006876:	3568      	adds	r5, #104	; 0x68
 8006878:	e7e9      	b.n	800684e <_fwalk_reent+0x12>

0800687a <rshift>:
 800687a:	6903      	ldr	r3, [r0, #16]
 800687c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006884:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006888:	f100 0414 	add.w	r4, r0, #20
 800688c:	dd45      	ble.n	800691a <rshift+0xa0>
 800688e:	f011 011f 	ands.w	r1, r1, #31
 8006892:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006896:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800689a:	d10c      	bne.n	80068b6 <rshift+0x3c>
 800689c:	f100 0710 	add.w	r7, r0, #16
 80068a0:	4629      	mov	r1, r5
 80068a2:	42b1      	cmp	r1, r6
 80068a4:	d334      	bcc.n	8006910 <rshift+0x96>
 80068a6:	1a9b      	subs	r3, r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	1eea      	subs	r2, r5, #3
 80068ac:	4296      	cmp	r6, r2
 80068ae:	bf38      	it	cc
 80068b0:	2300      	movcc	r3, #0
 80068b2:	4423      	add	r3, r4
 80068b4:	e015      	b.n	80068e2 <rshift+0x68>
 80068b6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80068ba:	f1c1 0820 	rsb	r8, r1, #32
 80068be:	40cf      	lsrs	r7, r1
 80068c0:	f105 0e04 	add.w	lr, r5, #4
 80068c4:	46a1      	mov	r9, r4
 80068c6:	4576      	cmp	r6, lr
 80068c8:	46f4      	mov	ip, lr
 80068ca:	d815      	bhi.n	80068f8 <rshift+0x7e>
 80068cc:	1a9a      	subs	r2, r3, r2
 80068ce:	0092      	lsls	r2, r2, #2
 80068d0:	3a04      	subs	r2, #4
 80068d2:	3501      	adds	r5, #1
 80068d4:	42ae      	cmp	r6, r5
 80068d6:	bf38      	it	cc
 80068d8:	2200      	movcc	r2, #0
 80068da:	18a3      	adds	r3, r4, r2
 80068dc:	50a7      	str	r7, [r4, r2]
 80068de:	b107      	cbz	r7, 80068e2 <rshift+0x68>
 80068e0:	3304      	adds	r3, #4
 80068e2:	1b1a      	subs	r2, r3, r4
 80068e4:	42a3      	cmp	r3, r4
 80068e6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80068ea:	bf08      	it	eq
 80068ec:	2300      	moveq	r3, #0
 80068ee:	6102      	str	r2, [r0, #16]
 80068f0:	bf08      	it	eq
 80068f2:	6143      	streq	r3, [r0, #20]
 80068f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068f8:	f8dc c000 	ldr.w	ip, [ip]
 80068fc:	fa0c fc08 	lsl.w	ip, ip, r8
 8006900:	ea4c 0707 	orr.w	r7, ip, r7
 8006904:	f849 7b04 	str.w	r7, [r9], #4
 8006908:	f85e 7b04 	ldr.w	r7, [lr], #4
 800690c:	40cf      	lsrs	r7, r1
 800690e:	e7da      	b.n	80068c6 <rshift+0x4c>
 8006910:	f851 cb04 	ldr.w	ip, [r1], #4
 8006914:	f847 cf04 	str.w	ip, [r7, #4]!
 8006918:	e7c3      	b.n	80068a2 <rshift+0x28>
 800691a:	4623      	mov	r3, r4
 800691c:	e7e1      	b.n	80068e2 <rshift+0x68>

0800691e <__hexdig_fun>:
 800691e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006922:	2b09      	cmp	r3, #9
 8006924:	d802      	bhi.n	800692c <__hexdig_fun+0xe>
 8006926:	3820      	subs	r0, #32
 8006928:	b2c0      	uxtb	r0, r0
 800692a:	4770      	bx	lr
 800692c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006930:	2b05      	cmp	r3, #5
 8006932:	d801      	bhi.n	8006938 <__hexdig_fun+0x1a>
 8006934:	3847      	subs	r0, #71	; 0x47
 8006936:	e7f7      	b.n	8006928 <__hexdig_fun+0xa>
 8006938:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800693c:	2b05      	cmp	r3, #5
 800693e:	d801      	bhi.n	8006944 <__hexdig_fun+0x26>
 8006940:	3827      	subs	r0, #39	; 0x27
 8006942:	e7f1      	b.n	8006928 <__hexdig_fun+0xa>
 8006944:	2000      	movs	r0, #0
 8006946:	4770      	bx	lr

08006948 <__gethex>:
 8006948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800694c:	ed2d 8b02 	vpush	{d8}
 8006950:	b089      	sub	sp, #36	; 0x24
 8006952:	ee08 0a10 	vmov	s16, r0
 8006956:	9304      	str	r3, [sp, #16]
 8006958:	4bb4      	ldr	r3, [pc, #720]	; (8006c2c <__gethex+0x2e4>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	9301      	str	r3, [sp, #4]
 800695e:	4618      	mov	r0, r3
 8006960:	468b      	mov	fp, r1
 8006962:	4690      	mov	r8, r2
 8006964:	f7f9 fc3c 	bl	80001e0 <strlen>
 8006968:	9b01      	ldr	r3, [sp, #4]
 800696a:	f8db 2000 	ldr.w	r2, [fp]
 800696e:	4403      	add	r3, r0
 8006970:	4682      	mov	sl, r0
 8006972:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006976:	9305      	str	r3, [sp, #20]
 8006978:	1c93      	adds	r3, r2, #2
 800697a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800697e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006982:	32fe      	adds	r2, #254	; 0xfe
 8006984:	18d1      	adds	r1, r2, r3
 8006986:	461f      	mov	r7, r3
 8006988:	f813 0b01 	ldrb.w	r0, [r3], #1
 800698c:	9100      	str	r1, [sp, #0]
 800698e:	2830      	cmp	r0, #48	; 0x30
 8006990:	d0f8      	beq.n	8006984 <__gethex+0x3c>
 8006992:	f7ff ffc4 	bl	800691e <__hexdig_fun>
 8006996:	4604      	mov	r4, r0
 8006998:	2800      	cmp	r0, #0
 800699a:	d13a      	bne.n	8006a12 <__gethex+0xca>
 800699c:	9901      	ldr	r1, [sp, #4]
 800699e:	4652      	mov	r2, sl
 80069a0:	4638      	mov	r0, r7
 80069a2:	f001 fb48 	bl	8008036 <strncmp>
 80069a6:	4605      	mov	r5, r0
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d168      	bne.n	8006a7e <__gethex+0x136>
 80069ac:	f817 000a 	ldrb.w	r0, [r7, sl]
 80069b0:	eb07 060a 	add.w	r6, r7, sl
 80069b4:	f7ff ffb3 	bl	800691e <__hexdig_fun>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	d062      	beq.n	8006a82 <__gethex+0x13a>
 80069bc:	4633      	mov	r3, r6
 80069be:	7818      	ldrb	r0, [r3, #0]
 80069c0:	2830      	cmp	r0, #48	; 0x30
 80069c2:	461f      	mov	r7, r3
 80069c4:	f103 0301 	add.w	r3, r3, #1
 80069c8:	d0f9      	beq.n	80069be <__gethex+0x76>
 80069ca:	f7ff ffa8 	bl	800691e <__hexdig_fun>
 80069ce:	2301      	movs	r3, #1
 80069d0:	fab0 f480 	clz	r4, r0
 80069d4:	0964      	lsrs	r4, r4, #5
 80069d6:	4635      	mov	r5, r6
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	463a      	mov	r2, r7
 80069dc:	4616      	mov	r6, r2
 80069de:	3201      	adds	r2, #1
 80069e0:	7830      	ldrb	r0, [r6, #0]
 80069e2:	f7ff ff9c 	bl	800691e <__hexdig_fun>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	d1f8      	bne.n	80069dc <__gethex+0x94>
 80069ea:	9901      	ldr	r1, [sp, #4]
 80069ec:	4652      	mov	r2, sl
 80069ee:	4630      	mov	r0, r6
 80069f0:	f001 fb21 	bl	8008036 <strncmp>
 80069f4:	b980      	cbnz	r0, 8006a18 <__gethex+0xd0>
 80069f6:	b94d      	cbnz	r5, 8006a0c <__gethex+0xc4>
 80069f8:	eb06 050a 	add.w	r5, r6, sl
 80069fc:	462a      	mov	r2, r5
 80069fe:	4616      	mov	r6, r2
 8006a00:	3201      	adds	r2, #1
 8006a02:	7830      	ldrb	r0, [r6, #0]
 8006a04:	f7ff ff8b 	bl	800691e <__hexdig_fun>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	d1f8      	bne.n	80069fe <__gethex+0xb6>
 8006a0c:	1bad      	subs	r5, r5, r6
 8006a0e:	00ad      	lsls	r5, r5, #2
 8006a10:	e004      	b.n	8006a1c <__gethex+0xd4>
 8006a12:	2400      	movs	r4, #0
 8006a14:	4625      	mov	r5, r4
 8006a16:	e7e0      	b.n	80069da <__gethex+0x92>
 8006a18:	2d00      	cmp	r5, #0
 8006a1a:	d1f7      	bne.n	8006a0c <__gethex+0xc4>
 8006a1c:	7833      	ldrb	r3, [r6, #0]
 8006a1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006a22:	2b50      	cmp	r3, #80	; 0x50
 8006a24:	d13b      	bne.n	8006a9e <__gethex+0x156>
 8006a26:	7873      	ldrb	r3, [r6, #1]
 8006a28:	2b2b      	cmp	r3, #43	; 0x2b
 8006a2a:	d02c      	beq.n	8006a86 <__gethex+0x13e>
 8006a2c:	2b2d      	cmp	r3, #45	; 0x2d
 8006a2e:	d02e      	beq.n	8006a8e <__gethex+0x146>
 8006a30:	1c71      	adds	r1, r6, #1
 8006a32:	f04f 0900 	mov.w	r9, #0
 8006a36:	7808      	ldrb	r0, [r1, #0]
 8006a38:	f7ff ff71 	bl	800691e <__hexdig_fun>
 8006a3c:	1e43      	subs	r3, r0, #1
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b18      	cmp	r3, #24
 8006a42:	d82c      	bhi.n	8006a9e <__gethex+0x156>
 8006a44:	f1a0 0210 	sub.w	r2, r0, #16
 8006a48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006a4c:	f7ff ff67 	bl	800691e <__hexdig_fun>
 8006a50:	1e43      	subs	r3, r0, #1
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b18      	cmp	r3, #24
 8006a56:	d91d      	bls.n	8006a94 <__gethex+0x14c>
 8006a58:	f1b9 0f00 	cmp.w	r9, #0
 8006a5c:	d000      	beq.n	8006a60 <__gethex+0x118>
 8006a5e:	4252      	negs	r2, r2
 8006a60:	4415      	add	r5, r2
 8006a62:	f8cb 1000 	str.w	r1, [fp]
 8006a66:	b1e4      	cbz	r4, 8006aa2 <__gethex+0x15a>
 8006a68:	9b00      	ldr	r3, [sp, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	bf14      	ite	ne
 8006a6e:	2700      	movne	r7, #0
 8006a70:	2706      	moveq	r7, #6
 8006a72:	4638      	mov	r0, r7
 8006a74:	b009      	add	sp, #36	; 0x24
 8006a76:	ecbd 8b02 	vpop	{d8}
 8006a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a7e:	463e      	mov	r6, r7
 8006a80:	4625      	mov	r5, r4
 8006a82:	2401      	movs	r4, #1
 8006a84:	e7ca      	b.n	8006a1c <__gethex+0xd4>
 8006a86:	f04f 0900 	mov.w	r9, #0
 8006a8a:	1cb1      	adds	r1, r6, #2
 8006a8c:	e7d3      	b.n	8006a36 <__gethex+0xee>
 8006a8e:	f04f 0901 	mov.w	r9, #1
 8006a92:	e7fa      	b.n	8006a8a <__gethex+0x142>
 8006a94:	230a      	movs	r3, #10
 8006a96:	fb03 0202 	mla	r2, r3, r2, r0
 8006a9a:	3a10      	subs	r2, #16
 8006a9c:	e7d4      	b.n	8006a48 <__gethex+0x100>
 8006a9e:	4631      	mov	r1, r6
 8006aa0:	e7df      	b.n	8006a62 <__gethex+0x11a>
 8006aa2:	1bf3      	subs	r3, r6, r7
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	2b07      	cmp	r3, #7
 8006aaa:	dc0b      	bgt.n	8006ac4 <__gethex+0x17c>
 8006aac:	ee18 0a10 	vmov	r0, s16
 8006ab0:	f000 faea 	bl	8007088 <_Balloc>
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	b940      	cbnz	r0, 8006aca <__gethex+0x182>
 8006ab8:	4b5d      	ldr	r3, [pc, #372]	; (8006c30 <__gethex+0x2e8>)
 8006aba:	4602      	mov	r2, r0
 8006abc:	21de      	movs	r1, #222	; 0xde
 8006abe:	485d      	ldr	r0, [pc, #372]	; (8006c34 <__gethex+0x2ec>)
 8006ac0:	f001 faec 	bl	800809c <__assert_func>
 8006ac4:	3101      	adds	r1, #1
 8006ac6:	105b      	asrs	r3, r3, #1
 8006ac8:	e7ee      	b.n	8006aa8 <__gethex+0x160>
 8006aca:	f100 0914 	add.w	r9, r0, #20
 8006ace:	f04f 0b00 	mov.w	fp, #0
 8006ad2:	f1ca 0301 	rsb	r3, sl, #1
 8006ad6:	f8cd 9008 	str.w	r9, [sp, #8]
 8006ada:	f8cd b000 	str.w	fp, [sp]
 8006ade:	9306      	str	r3, [sp, #24]
 8006ae0:	42b7      	cmp	r7, r6
 8006ae2:	d340      	bcc.n	8006b66 <__gethex+0x21e>
 8006ae4:	9802      	ldr	r0, [sp, #8]
 8006ae6:	9b00      	ldr	r3, [sp, #0]
 8006ae8:	f840 3b04 	str.w	r3, [r0], #4
 8006aec:	eba0 0009 	sub.w	r0, r0, r9
 8006af0:	1080      	asrs	r0, r0, #2
 8006af2:	0146      	lsls	r6, r0, #5
 8006af4:	6120      	str	r0, [r4, #16]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 fbb8 	bl	800726c <__hi0bits>
 8006afc:	1a30      	subs	r0, r6, r0
 8006afe:	f8d8 6000 	ldr.w	r6, [r8]
 8006b02:	42b0      	cmp	r0, r6
 8006b04:	dd63      	ble.n	8006bce <__gethex+0x286>
 8006b06:	1b87      	subs	r7, r0, r6
 8006b08:	4639      	mov	r1, r7
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f000 ff5c 	bl	80079c8 <__any_on>
 8006b10:	4682      	mov	sl, r0
 8006b12:	b1a8      	cbz	r0, 8006b40 <__gethex+0x1f8>
 8006b14:	1e7b      	subs	r3, r7, #1
 8006b16:	1159      	asrs	r1, r3, #5
 8006b18:	f003 021f 	and.w	r2, r3, #31
 8006b1c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006b20:	f04f 0a01 	mov.w	sl, #1
 8006b24:	fa0a f202 	lsl.w	r2, sl, r2
 8006b28:	420a      	tst	r2, r1
 8006b2a:	d009      	beq.n	8006b40 <__gethex+0x1f8>
 8006b2c:	4553      	cmp	r3, sl
 8006b2e:	dd05      	ble.n	8006b3c <__gethex+0x1f4>
 8006b30:	1eb9      	subs	r1, r7, #2
 8006b32:	4620      	mov	r0, r4
 8006b34:	f000 ff48 	bl	80079c8 <__any_on>
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	d145      	bne.n	8006bc8 <__gethex+0x280>
 8006b3c:	f04f 0a02 	mov.w	sl, #2
 8006b40:	4639      	mov	r1, r7
 8006b42:	4620      	mov	r0, r4
 8006b44:	f7ff fe99 	bl	800687a <rshift>
 8006b48:	443d      	add	r5, r7
 8006b4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b4e:	42ab      	cmp	r3, r5
 8006b50:	da4c      	bge.n	8006bec <__gethex+0x2a4>
 8006b52:	ee18 0a10 	vmov	r0, s16
 8006b56:	4621      	mov	r1, r4
 8006b58:	f000 fad6 	bl	8007108 <_Bfree>
 8006b5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006b5e:	2300      	movs	r3, #0
 8006b60:	6013      	str	r3, [r2, #0]
 8006b62:	27a3      	movs	r7, #163	; 0xa3
 8006b64:	e785      	b.n	8006a72 <__gethex+0x12a>
 8006b66:	1e73      	subs	r3, r6, #1
 8006b68:	9a05      	ldr	r2, [sp, #20]
 8006b6a:	9303      	str	r3, [sp, #12]
 8006b6c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d019      	beq.n	8006ba8 <__gethex+0x260>
 8006b74:	f1bb 0f20 	cmp.w	fp, #32
 8006b78:	d107      	bne.n	8006b8a <__gethex+0x242>
 8006b7a:	9b02      	ldr	r3, [sp, #8]
 8006b7c:	9a00      	ldr	r2, [sp, #0]
 8006b7e:	f843 2b04 	str.w	r2, [r3], #4
 8006b82:	9302      	str	r3, [sp, #8]
 8006b84:	2300      	movs	r3, #0
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	469b      	mov	fp, r3
 8006b8a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006b8e:	f7ff fec6 	bl	800691e <__hexdig_fun>
 8006b92:	9b00      	ldr	r3, [sp, #0]
 8006b94:	f000 000f 	and.w	r0, r0, #15
 8006b98:	fa00 f00b 	lsl.w	r0, r0, fp
 8006b9c:	4303      	orrs	r3, r0
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	f10b 0b04 	add.w	fp, fp, #4
 8006ba4:	9b03      	ldr	r3, [sp, #12]
 8006ba6:	e00d      	b.n	8006bc4 <__gethex+0x27c>
 8006ba8:	9b03      	ldr	r3, [sp, #12]
 8006baa:	9a06      	ldr	r2, [sp, #24]
 8006bac:	4413      	add	r3, r2
 8006bae:	42bb      	cmp	r3, r7
 8006bb0:	d3e0      	bcc.n	8006b74 <__gethex+0x22c>
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	9901      	ldr	r1, [sp, #4]
 8006bb6:	9307      	str	r3, [sp, #28]
 8006bb8:	4652      	mov	r2, sl
 8006bba:	f001 fa3c 	bl	8008036 <strncmp>
 8006bbe:	9b07      	ldr	r3, [sp, #28]
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d1d7      	bne.n	8006b74 <__gethex+0x22c>
 8006bc4:	461e      	mov	r6, r3
 8006bc6:	e78b      	b.n	8006ae0 <__gethex+0x198>
 8006bc8:	f04f 0a03 	mov.w	sl, #3
 8006bcc:	e7b8      	b.n	8006b40 <__gethex+0x1f8>
 8006bce:	da0a      	bge.n	8006be6 <__gethex+0x29e>
 8006bd0:	1a37      	subs	r7, r6, r0
 8006bd2:	4621      	mov	r1, r4
 8006bd4:	ee18 0a10 	vmov	r0, s16
 8006bd8:	463a      	mov	r2, r7
 8006bda:	f000 fcb1 	bl	8007540 <__lshift>
 8006bde:	1bed      	subs	r5, r5, r7
 8006be0:	4604      	mov	r4, r0
 8006be2:	f100 0914 	add.w	r9, r0, #20
 8006be6:	f04f 0a00 	mov.w	sl, #0
 8006bea:	e7ae      	b.n	8006b4a <__gethex+0x202>
 8006bec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006bf0:	42a8      	cmp	r0, r5
 8006bf2:	dd72      	ble.n	8006cda <__gethex+0x392>
 8006bf4:	1b45      	subs	r5, r0, r5
 8006bf6:	42ae      	cmp	r6, r5
 8006bf8:	dc36      	bgt.n	8006c68 <__gethex+0x320>
 8006bfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d02a      	beq.n	8006c58 <__gethex+0x310>
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d02c      	beq.n	8006c60 <__gethex+0x318>
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d11c      	bne.n	8006c44 <__gethex+0x2fc>
 8006c0a:	42ae      	cmp	r6, r5
 8006c0c:	d11a      	bne.n	8006c44 <__gethex+0x2fc>
 8006c0e:	2e01      	cmp	r6, #1
 8006c10:	d112      	bne.n	8006c38 <__gethex+0x2f0>
 8006c12:	9a04      	ldr	r2, [sp, #16]
 8006c14:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006c18:	6013      	str	r3, [r2, #0]
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	6123      	str	r3, [r4, #16]
 8006c1e:	f8c9 3000 	str.w	r3, [r9]
 8006c22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c24:	2762      	movs	r7, #98	; 0x62
 8006c26:	601c      	str	r4, [r3, #0]
 8006c28:	e723      	b.n	8006a72 <__gethex+0x12a>
 8006c2a:	bf00      	nop
 8006c2c:	08008dec 	.word	0x08008dec
 8006c30:	08008d10 	.word	0x08008d10
 8006c34:	08008d84 	.word	0x08008d84
 8006c38:	1e71      	subs	r1, r6, #1
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f000 fec4 	bl	80079c8 <__any_on>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d1e6      	bne.n	8006c12 <__gethex+0x2ca>
 8006c44:	ee18 0a10 	vmov	r0, s16
 8006c48:	4621      	mov	r1, r4
 8006c4a:	f000 fa5d 	bl	8007108 <_Bfree>
 8006c4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c50:	2300      	movs	r3, #0
 8006c52:	6013      	str	r3, [r2, #0]
 8006c54:	2750      	movs	r7, #80	; 0x50
 8006c56:	e70c      	b.n	8006a72 <__gethex+0x12a>
 8006c58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1f2      	bne.n	8006c44 <__gethex+0x2fc>
 8006c5e:	e7d8      	b.n	8006c12 <__gethex+0x2ca>
 8006c60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1d5      	bne.n	8006c12 <__gethex+0x2ca>
 8006c66:	e7ed      	b.n	8006c44 <__gethex+0x2fc>
 8006c68:	1e6f      	subs	r7, r5, #1
 8006c6a:	f1ba 0f00 	cmp.w	sl, #0
 8006c6e:	d131      	bne.n	8006cd4 <__gethex+0x38c>
 8006c70:	b127      	cbz	r7, 8006c7c <__gethex+0x334>
 8006c72:	4639      	mov	r1, r7
 8006c74:	4620      	mov	r0, r4
 8006c76:	f000 fea7 	bl	80079c8 <__any_on>
 8006c7a:	4682      	mov	sl, r0
 8006c7c:	117b      	asrs	r3, r7, #5
 8006c7e:	2101      	movs	r1, #1
 8006c80:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006c84:	f007 071f 	and.w	r7, r7, #31
 8006c88:	fa01 f707 	lsl.w	r7, r1, r7
 8006c8c:	421f      	tst	r7, r3
 8006c8e:	4629      	mov	r1, r5
 8006c90:	4620      	mov	r0, r4
 8006c92:	bf18      	it	ne
 8006c94:	f04a 0a02 	orrne.w	sl, sl, #2
 8006c98:	1b76      	subs	r6, r6, r5
 8006c9a:	f7ff fdee 	bl	800687a <rshift>
 8006c9e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006ca2:	2702      	movs	r7, #2
 8006ca4:	f1ba 0f00 	cmp.w	sl, #0
 8006ca8:	d048      	beq.n	8006d3c <__gethex+0x3f4>
 8006caa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d015      	beq.n	8006cde <__gethex+0x396>
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d017      	beq.n	8006ce6 <__gethex+0x39e>
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d109      	bne.n	8006cce <__gethex+0x386>
 8006cba:	f01a 0f02 	tst.w	sl, #2
 8006cbe:	d006      	beq.n	8006cce <__gethex+0x386>
 8006cc0:	f8d9 0000 	ldr.w	r0, [r9]
 8006cc4:	ea4a 0a00 	orr.w	sl, sl, r0
 8006cc8:	f01a 0f01 	tst.w	sl, #1
 8006ccc:	d10e      	bne.n	8006cec <__gethex+0x3a4>
 8006cce:	f047 0710 	orr.w	r7, r7, #16
 8006cd2:	e033      	b.n	8006d3c <__gethex+0x3f4>
 8006cd4:	f04f 0a01 	mov.w	sl, #1
 8006cd8:	e7d0      	b.n	8006c7c <__gethex+0x334>
 8006cda:	2701      	movs	r7, #1
 8006cdc:	e7e2      	b.n	8006ca4 <__gethex+0x35c>
 8006cde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ce0:	f1c3 0301 	rsb	r3, r3, #1
 8006ce4:	9315      	str	r3, [sp, #84]	; 0x54
 8006ce6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d0f0      	beq.n	8006cce <__gethex+0x386>
 8006cec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006cf0:	f104 0314 	add.w	r3, r4, #20
 8006cf4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006cf8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006cfc:	f04f 0c00 	mov.w	ip, #0
 8006d00:	4618      	mov	r0, r3
 8006d02:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d06:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006d0a:	d01c      	beq.n	8006d46 <__gethex+0x3fe>
 8006d0c:	3201      	adds	r2, #1
 8006d0e:	6002      	str	r2, [r0, #0]
 8006d10:	2f02      	cmp	r7, #2
 8006d12:	f104 0314 	add.w	r3, r4, #20
 8006d16:	d13f      	bne.n	8006d98 <__gethex+0x450>
 8006d18:	f8d8 2000 	ldr.w	r2, [r8]
 8006d1c:	3a01      	subs	r2, #1
 8006d1e:	42b2      	cmp	r2, r6
 8006d20:	d10a      	bne.n	8006d38 <__gethex+0x3f0>
 8006d22:	1171      	asrs	r1, r6, #5
 8006d24:	2201      	movs	r2, #1
 8006d26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d2a:	f006 061f 	and.w	r6, r6, #31
 8006d2e:	fa02 f606 	lsl.w	r6, r2, r6
 8006d32:	421e      	tst	r6, r3
 8006d34:	bf18      	it	ne
 8006d36:	4617      	movne	r7, r2
 8006d38:	f047 0720 	orr.w	r7, r7, #32
 8006d3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d3e:	601c      	str	r4, [r3, #0]
 8006d40:	9b04      	ldr	r3, [sp, #16]
 8006d42:	601d      	str	r5, [r3, #0]
 8006d44:	e695      	b.n	8006a72 <__gethex+0x12a>
 8006d46:	4299      	cmp	r1, r3
 8006d48:	f843 cc04 	str.w	ip, [r3, #-4]
 8006d4c:	d8d8      	bhi.n	8006d00 <__gethex+0x3b8>
 8006d4e:	68a3      	ldr	r3, [r4, #8]
 8006d50:	459b      	cmp	fp, r3
 8006d52:	db19      	blt.n	8006d88 <__gethex+0x440>
 8006d54:	6861      	ldr	r1, [r4, #4]
 8006d56:	ee18 0a10 	vmov	r0, s16
 8006d5a:	3101      	adds	r1, #1
 8006d5c:	f000 f994 	bl	8007088 <_Balloc>
 8006d60:	4681      	mov	r9, r0
 8006d62:	b918      	cbnz	r0, 8006d6c <__gethex+0x424>
 8006d64:	4b1a      	ldr	r3, [pc, #104]	; (8006dd0 <__gethex+0x488>)
 8006d66:	4602      	mov	r2, r0
 8006d68:	2184      	movs	r1, #132	; 0x84
 8006d6a:	e6a8      	b.n	8006abe <__gethex+0x176>
 8006d6c:	6922      	ldr	r2, [r4, #16]
 8006d6e:	3202      	adds	r2, #2
 8006d70:	f104 010c 	add.w	r1, r4, #12
 8006d74:	0092      	lsls	r2, r2, #2
 8006d76:	300c      	adds	r0, #12
 8006d78:	f000 f96c 	bl	8007054 <memcpy>
 8006d7c:	4621      	mov	r1, r4
 8006d7e:	ee18 0a10 	vmov	r0, s16
 8006d82:	f000 f9c1 	bl	8007108 <_Bfree>
 8006d86:	464c      	mov	r4, r9
 8006d88:	6923      	ldr	r3, [r4, #16]
 8006d8a:	1c5a      	adds	r2, r3, #1
 8006d8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d90:	6122      	str	r2, [r4, #16]
 8006d92:	2201      	movs	r2, #1
 8006d94:	615a      	str	r2, [r3, #20]
 8006d96:	e7bb      	b.n	8006d10 <__gethex+0x3c8>
 8006d98:	6922      	ldr	r2, [r4, #16]
 8006d9a:	455a      	cmp	r2, fp
 8006d9c:	dd0b      	ble.n	8006db6 <__gethex+0x46e>
 8006d9e:	2101      	movs	r1, #1
 8006da0:	4620      	mov	r0, r4
 8006da2:	f7ff fd6a 	bl	800687a <rshift>
 8006da6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006daa:	3501      	adds	r5, #1
 8006dac:	42ab      	cmp	r3, r5
 8006dae:	f6ff aed0 	blt.w	8006b52 <__gethex+0x20a>
 8006db2:	2701      	movs	r7, #1
 8006db4:	e7c0      	b.n	8006d38 <__gethex+0x3f0>
 8006db6:	f016 061f 	ands.w	r6, r6, #31
 8006dba:	d0fa      	beq.n	8006db2 <__gethex+0x46a>
 8006dbc:	4453      	add	r3, sl
 8006dbe:	f1c6 0620 	rsb	r6, r6, #32
 8006dc2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006dc6:	f000 fa51 	bl	800726c <__hi0bits>
 8006dca:	42b0      	cmp	r0, r6
 8006dcc:	dbe7      	blt.n	8006d9e <__gethex+0x456>
 8006dce:	e7f0      	b.n	8006db2 <__gethex+0x46a>
 8006dd0:	08008d10 	.word	0x08008d10

08006dd4 <L_shift>:
 8006dd4:	f1c2 0208 	rsb	r2, r2, #8
 8006dd8:	0092      	lsls	r2, r2, #2
 8006dda:	b570      	push	{r4, r5, r6, lr}
 8006ddc:	f1c2 0620 	rsb	r6, r2, #32
 8006de0:	6843      	ldr	r3, [r0, #4]
 8006de2:	6804      	ldr	r4, [r0, #0]
 8006de4:	fa03 f506 	lsl.w	r5, r3, r6
 8006de8:	432c      	orrs	r4, r5
 8006dea:	40d3      	lsrs	r3, r2
 8006dec:	6004      	str	r4, [r0, #0]
 8006dee:	f840 3f04 	str.w	r3, [r0, #4]!
 8006df2:	4288      	cmp	r0, r1
 8006df4:	d3f4      	bcc.n	8006de0 <L_shift+0xc>
 8006df6:	bd70      	pop	{r4, r5, r6, pc}

08006df8 <__match>:
 8006df8:	b530      	push	{r4, r5, lr}
 8006dfa:	6803      	ldr	r3, [r0, #0]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e02:	b914      	cbnz	r4, 8006e0a <__match+0x12>
 8006e04:	6003      	str	r3, [r0, #0]
 8006e06:	2001      	movs	r0, #1
 8006e08:	bd30      	pop	{r4, r5, pc}
 8006e0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006e12:	2d19      	cmp	r5, #25
 8006e14:	bf98      	it	ls
 8006e16:	3220      	addls	r2, #32
 8006e18:	42a2      	cmp	r2, r4
 8006e1a:	d0f0      	beq.n	8006dfe <__match+0x6>
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	e7f3      	b.n	8006e08 <__match+0x10>

08006e20 <__hexnan>:
 8006e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e24:	680b      	ldr	r3, [r1, #0]
 8006e26:	115e      	asrs	r6, r3, #5
 8006e28:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006e2c:	f013 031f 	ands.w	r3, r3, #31
 8006e30:	b087      	sub	sp, #28
 8006e32:	bf18      	it	ne
 8006e34:	3604      	addne	r6, #4
 8006e36:	2500      	movs	r5, #0
 8006e38:	1f37      	subs	r7, r6, #4
 8006e3a:	4690      	mov	r8, r2
 8006e3c:	6802      	ldr	r2, [r0, #0]
 8006e3e:	9301      	str	r3, [sp, #4]
 8006e40:	4682      	mov	sl, r0
 8006e42:	f846 5c04 	str.w	r5, [r6, #-4]
 8006e46:	46b9      	mov	r9, r7
 8006e48:	463c      	mov	r4, r7
 8006e4a:	9502      	str	r5, [sp, #8]
 8006e4c:	46ab      	mov	fp, r5
 8006e4e:	7851      	ldrb	r1, [r2, #1]
 8006e50:	1c53      	adds	r3, r2, #1
 8006e52:	9303      	str	r3, [sp, #12]
 8006e54:	b341      	cbz	r1, 8006ea8 <__hexnan+0x88>
 8006e56:	4608      	mov	r0, r1
 8006e58:	9205      	str	r2, [sp, #20]
 8006e5a:	9104      	str	r1, [sp, #16]
 8006e5c:	f7ff fd5f 	bl	800691e <__hexdig_fun>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d14f      	bne.n	8006f04 <__hexnan+0xe4>
 8006e64:	9904      	ldr	r1, [sp, #16]
 8006e66:	9a05      	ldr	r2, [sp, #20]
 8006e68:	2920      	cmp	r1, #32
 8006e6a:	d818      	bhi.n	8006e9e <__hexnan+0x7e>
 8006e6c:	9b02      	ldr	r3, [sp, #8]
 8006e6e:	459b      	cmp	fp, r3
 8006e70:	dd13      	ble.n	8006e9a <__hexnan+0x7a>
 8006e72:	454c      	cmp	r4, r9
 8006e74:	d206      	bcs.n	8006e84 <__hexnan+0x64>
 8006e76:	2d07      	cmp	r5, #7
 8006e78:	dc04      	bgt.n	8006e84 <__hexnan+0x64>
 8006e7a:	462a      	mov	r2, r5
 8006e7c:	4649      	mov	r1, r9
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f7ff ffa8 	bl	8006dd4 <L_shift>
 8006e84:	4544      	cmp	r4, r8
 8006e86:	d950      	bls.n	8006f2a <__hexnan+0x10a>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f1a4 0904 	sub.w	r9, r4, #4
 8006e8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006e92:	f8cd b008 	str.w	fp, [sp, #8]
 8006e96:	464c      	mov	r4, r9
 8006e98:	461d      	mov	r5, r3
 8006e9a:	9a03      	ldr	r2, [sp, #12]
 8006e9c:	e7d7      	b.n	8006e4e <__hexnan+0x2e>
 8006e9e:	2929      	cmp	r1, #41	; 0x29
 8006ea0:	d156      	bne.n	8006f50 <__hexnan+0x130>
 8006ea2:	3202      	adds	r2, #2
 8006ea4:	f8ca 2000 	str.w	r2, [sl]
 8006ea8:	f1bb 0f00 	cmp.w	fp, #0
 8006eac:	d050      	beq.n	8006f50 <__hexnan+0x130>
 8006eae:	454c      	cmp	r4, r9
 8006eb0:	d206      	bcs.n	8006ec0 <__hexnan+0xa0>
 8006eb2:	2d07      	cmp	r5, #7
 8006eb4:	dc04      	bgt.n	8006ec0 <__hexnan+0xa0>
 8006eb6:	462a      	mov	r2, r5
 8006eb8:	4649      	mov	r1, r9
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f7ff ff8a 	bl	8006dd4 <L_shift>
 8006ec0:	4544      	cmp	r4, r8
 8006ec2:	d934      	bls.n	8006f2e <__hexnan+0x10e>
 8006ec4:	f1a8 0204 	sub.w	r2, r8, #4
 8006ec8:	4623      	mov	r3, r4
 8006eca:	f853 1b04 	ldr.w	r1, [r3], #4
 8006ece:	f842 1f04 	str.w	r1, [r2, #4]!
 8006ed2:	429f      	cmp	r7, r3
 8006ed4:	d2f9      	bcs.n	8006eca <__hexnan+0xaa>
 8006ed6:	1b3b      	subs	r3, r7, r4
 8006ed8:	f023 0303 	bic.w	r3, r3, #3
 8006edc:	3304      	adds	r3, #4
 8006ede:	3401      	adds	r4, #1
 8006ee0:	3e03      	subs	r6, #3
 8006ee2:	42b4      	cmp	r4, r6
 8006ee4:	bf88      	it	hi
 8006ee6:	2304      	movhi	r3, #4
 8006ee8:	4443      	add	r3, r8
 8006eea:	2200      	movs	r2, #0
 8006eec:	f843 2b04 	str.w	r2, [r3], #4
 8006ef0:	429f      	cmp	r7, r3
 8006ef2:	d2fb      	bcs.n	8006eec <__hexnan+0xcc>
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	b91b      	cbnz	r3, 8006f00 <__hexnan+0xe0>
 8006ef8:	4547      	cmp	r7, r8
 8006efa:	d127      	bne.n	8006f4c <__hexnan+0x12c>
 8006efc:	2301      	movs	r3, #1
 8006efe:	603b      	str	r3, [r7, #0]
 8006f00:	2005      	movs	r0, #5
 8006f02:	e026      	b.n	8006f52 <__hexnan+0x132>
 8006f04:	3501      	adds	r5, #1
 8006f06:	2d08      	cmp	r5, #8
 8006f08:	f10b 0b01 	add.w	fp, fp, #1
 8006f0c:	dd06      	ble.n	8006f1c <__hexnan+0xfc>
 8006f0e:	4544      	cmp	r4, r8
 8006f10:	d9c3      	bls.n	8006e9a <__hexnan+0x7a>
 8006f12:	2300      	movs	r3, #0
 8006f14:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f18:	2501      	movs	r5, #1
 8006f1a:	3c04      	subs	r4, #4
 8006f1c:	6822      	ldr	r2, [r4, #0]
 8006f1e:	f000 000f 	and.w	r0, r0, #15
 8006f22:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006f26:	6022      	str	r2, [r4, #0]
 8006f28:	e7b7      	b.n	8006e9a <__hexnan+0x7a>
 8006f2a:	2508      	movs	r5, #8
 8006f2c:	e7b5      	b.n	8006e9a <__hexnan+0x7a>
 8006f2e:	9b01      	ldr	r3, [sp, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d0df      	beq.n	8006ef4 <__hexnan+0xd4>
 8006f34:	f04f 32ff 	mov.w	r2, #4294967295
 8006f38:	f1c3 0320 	rsb	r3, r3, #32
 8006f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006f44:	401a      	ands	r2, r3
 8006f46:	f846 2c04 	str.w	r2, [r6, #-4]
 8006f4a:	e7d3      	b.n	8006ef4 <__hexnan+0xd4>
 8006f4c:	3f04      	subs	r7, #4
 8006f4e:	e7d1      	b.n	8006ef4 <__hexnan+0xd4>
 8006f50:	2004      	movs	r0, #4
 8006f52:	b007      	add	sp, #28
 8006f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f58 <_localeconv_r>:
 8006f58:	4800      	ldr	r0, [pc, #0]	; (8006f5c <_localeconv_r+0x4>)
 8006f5a:	4770      	bx	lr
 8006f5c:	2000016c 	.word	0x2000016c

08006f60 <__retarget_lock_init_recursive>:
 8006f60:	4770      	bx	lr

08006f62 <__retarget_lock_acquire_recursive>:
 8006f62:	4770      	bx	lr

08006f64 <__retarget_lock_release_recursive>:
 8006f64:	4770      	bx	lr

08006f66 <__swhatbuf_r>:
 8006f66:	b570      	push	{r4, r5, r6, lr}
 8006f68:	460e      	mov	r6, r1
 8006f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f6e:	2900      	cmp	r1, #0
 8006f70:	b096      	sub	sp, #88	; 0x58
 8006f72:	4614      	mov	r4, r2
 8006f74:	461d      	mov	r5, r3
 8006f76:	da08      	bge.n	8006f8a <__swhatbuf_r+0x24>
 8006f78:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	602a      	str	r2, [r5, #0]
 8006f80:	061a      	lsls	r2, r3, #24
 8006f82:	d410      	bmi.n	8006fa6 <__swhatbuf_r+0x40>
 8006f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f88:	e00e      	b.n	8006fa8 <__swhatbuf_r+0x42>
 8006f8a:	466a      	mov	r2, sp
 8006f8c:	f001 f8c6 	bl	800811c <_fstat_r>
 8006f90:	2800      	cmp	r0, #0
 8006f92:	dbf1      	blt.n	8006f78 <__swhatbuf_r+0x12>
 8006f94:	9a01      	ldr	r2, [sp, #4]
 8006f96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f9e:	425a      	negs	r2, r3
 8006fa0:	415a      	adcs	r2, r3
 8006fa2:	602a      	str	r2, [r5, #0]
 8006fa4:	e7ee      	b.n	8006f84 <__swhatbuf_r+0x1e>
 8006fa6:	2340      	movs	r3, #64	; 0x40
 8006fa8:	2000      	movs	r0, #0
 8006faa:	6023      	str	r3, [r4, #0]
 8006fac:	b016      	add	sp, #88	; 0x58
 8006fae:	bd70      	pop	{r4, r5, r6, pc}

08006fb0 <__smakebuf_r>:
 8006fb0:	898b      	ldrh	r3, [r1, #12]
 8006fb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fb4:	079d      	lsls	r5, r3, #30
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	460c      	mov	r4, r1
 8006fba:	d507      	bpl.n	8006fcc <__smakebuf_r+0x1c>
 8006fbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006fc0:	6023      	str	r3, [r4, #0]
 8006fc2:	6123      	str	r3, [r4, #16]
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	6163      	str	r3, [r4, #20]
 8006fc8:	b002      	add	sp, #8
 8006fca:	bd70      	pop	{r4, r5, r6, pc}
 8006fcc:	ab01      	add	r3, sp, #4
 8006fce:	466a      	mov	r2, sp
 8006fd0:	f7ff ffc9 	bl	8006f66 <__swhatbuf_r>
 8006fd4:	9900      	ldr	r1, [sp, #0]
 8006fd6:	4605      	mov	r5, r0
 8006fd8:	4630      	mov	r0, r6
 8006fda:	f7fc fce7 	bl	80039ac <_malloc_r>
 8006fde:	b948      	cbnz	r0, 8006ff4 <__smakebuf_r+0x44>
 8006fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fe4:	059a      	lsls	r2, r3, #22
 8006fe6:	d4ef      	bmi.n	8006fc8 <__smakebuf_r+0x18>
 8006fe8:	f023 0303 	bic.w	r3, r3, #3
 8006fec:	f043 0302 	orr.w	r3, r3, #2
 8006ff0:	81a3      	strh	r3, [r4, #12]
 8006ff2:	e7e3      	b.n	8006fbc <__smakebuf_r+0xc>
 8006ff4:	4b0d      	ldr	r3, [pc, #52]	; (800702c <__smakebuf_r+0x7c>)
 8006ff6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ff8:	89a3      	ldrh	r3, [r4, #12]
 8006ffa:	6020      	str	r0, [r4, #0]
 8006ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007000:	81a3      	strh	r3, [r4, #12]
 8007002:	9b00      	ldr	r3, [sp, #0]
 8007004:	6163      	str	r3, [r4, #20]
 8007006:	9b01      	ldr	r3, [sp, #4]
 8007008:	6120      	str	r0, [r4, #16]
 800700a:	b15b      	cbz	r3, 8007024 <__smakebuf_r+0x74>
 800700c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007010:	4630      	mov	r0, r6
 8007012:	f001 f895 	bl	8008140 <_isatty_r>
 8007016:	b128      	cbz	r0, 8007024 <__smakebuf_r+0x74>
 8007018:	89a3      	ldrh	r3, [r4, #12]
 800701a:	f023 0303 	bic.w	r3, r3, #3
 800701e:	f043 0301 	orr.w	r3, r3, #1
 8007022:	81a3      	strh	r3, [r4, #12]
 8007024:	89a0      	ldrh	r0, [r4, #12]
 8007026:	4305      	orrs	r5, r0
 8007028:	81a5      	strh	r5, [r4, #12]
 800702a:	e7cd      	b.n	8006fc8 <__smakebuf_r+0x18>
 800702c:	080066d9 	.word	0x080066d9

08007030 <__ascii_mbtowc>:
 8007030:	b082      	sub	sp, #8
 8007032:	b901      	cbnz	r1, 8007036 <__ascii_mbtowc+0x6>
 8007034:	a901      	add	r1, sp, #4
 8007036:	b142      	cbz	r2, 800704a <__ascii_mbtowc+0x1a>
 8007038:	b14b      	cbz	r3, 800704e <__ascii_mbtowc+0x1e>
 800703a:	7813      	ldrb	r3, [r2, #0]
 800703c:	600b      	str	r3, [r1, #0]
 800703e:	7812      	ldrb	r2, [r2, #0]
 8007040:	1e10      	subs	r0, r2, #0
 8007042:	bf18      	it	ne
 8007044:	2001      	movne	r0, #1
 8007046:	b002      	add	sp, #8
 8007048:	4770      	bx	lr
 800704a:	4610      	mov	r0, r2
 800704c:	e7fb      	b.n	8007046 <__ascii_mbtowc+0x16>
 800704e:	f06f 0001 	mvn.w	r0, #1
 8007052:	e7f8      	b.n	8007046 <__ascii_mbtowc+0x16>

08007054 <memcpy>:
 8007054:	440a      	add	r2, r1
 8007056:	4291      	cmp	r1, r2
 8007058:	f100 33ff 	add.w	r3, r0, #4294967295
 800705c:	d100      	bne.n	8007060 <memcpy+0xc>
 800705e:	4770      	bx	lr
 8007060:	b510      	push	{r4, lr}
 8007062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007066:	f803 4f01 	strb.w	r4, [r3, #1]!
 800706a:	4291      	cmp	r1, r2
 800706c:	d1f9      	bne.n	8007062 <memcpy+0xe>
 800706e:	bd10      	pop	{r4, pc}

08007070 <__malloc_lock>:
 8007070:	4801      	ldr	r0, [pc, #4]	; (8007078 <__malloc_lock+0x8>)
 8007072:	f7ff bf76 	b.w	8006f62 <__retarget_lock_acquire_recursive>
 8007076:	bf00      	nop
 8007078:	20000ccc 	.word	0x20000ccc

0800707c <__malloc_unlock>:
 800707c:	4801      	ldr	r0, [pc, #4]	; (8007084 <__malloc_unlock+0x8>)
 800707e:	f7ff bf71 	b.w	8006f64 <__retarget_lock_release_recursive>
 8007082:	bf00      	nop
 8007084:	20000ccc 	.word	0x20000ccc

08007088 <_Balloc>:
 8007088:	b570      	push	{r4, r5, r6, lr}
 800708a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800708c:	4604      	mov	r4, r0
 800708e:	460d      	mov	r5, r1
 8007090:	b976      	cbnz	r6, 80070b0 <_Balloc+0x28>
 8007092:	2010      	movs	r0, #16
 8007094:	f7fc fc06 	bl	80038a4 <malloc>
 8007098:	4602      	mov	r2, r0
 800709a:	6260      	str	r0, [r4, #36]	; 0x24
 800709c:	b920      	cbnz	r0, 80070a8 <_Balloc+0x20>
 800709e:	4b18      	ldr	r3, [pc, #96]	; (8007100 <_Balloc+0x78>)
 80070a0:	4818      	ldr	r0, [pc, #96]	; (8007104 <_Balloc+0x7c>)
 80070a2:	2166      	movs	r1, #102	; 0x66
 80070a4:	f000 fffa 	bl	800809c <__assert_func>
 80070a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070ac:	6006      	str	r6, [r0, #0]
 80070ae:	60c6      	str	r6, [r0, #12]
 80070b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80070b2:	68f3      	ldr	r3, [r6, #12]
 80070b4:	b183      	cbz	r3, 80070d8 <_Balloc+0x50>
 80070b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070be:	b9b8      	cbnz	r0, 80070f0 <_Balloc+0x68>
 80070c0:	2101      	movs	r1, #1
 80070c2:	fa01 f605 	lsl.w	r6, r1, r5
 80070c6:	1d72      	adds	r2, r6, #5
 80070c8:	0092      	lsls	r2, r2, #2
 80070ca:	4620      	mov	r0, r4
 80070cc:	f000 fc9d 	bl	8007a0a <_calloc_r>
 80070d0:	b160      	cbz	r0, 80070ec <_Balloc+0x64>
 80070d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070d6:	e00e      	b.n	80070f6 <_Balloc+0x6e>
 80070d8:	2221      	movs	r2, #33	; 0x21
 80070da:	2104      	movs	r1, #4
 80070dc:	4620      	mov	r0, r4
 80070de:	f000 fc94 	bl	8007a0a <_calloc_r>
 80070e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070e4:	60f0      	str	r0, [r6, #12]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e4      	bne.n	80070b6 <_Balloc+0x2e>
 80070ec:	2000      	movs	r0, #0
 80070ee:	bd70      	pop	{r4, r5, r6, pc}
 80070f0:	6802      	ldr	r2, [r0, #0]
 80070f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80070f6:	2300      	movs	r3, #0
 80070f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070fc:	e7f7      	b.n	80070ee <_Balloc+0x66>
 80070fe:	bf00      	nop
 8007100:	08008c9e 	.word	0x08008c9e
 8007104:	08008e00 	.word	0x08008e00

08007108 <_Bfree>:
 8007108:	b570      	push	{r4, r5, r6, lr}
 800710a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800710c:	4605      	mov	r5, r0
 800710e:	460c      	mov	r4, r1
 8007110:	b976      	cbnz	r6, 8007130 <_Bfree+0x28>
 8007112:	2010      	movs	r0, #16
 8007114:	f7fc fbc6 	bl	80038a4 <malloc>
 8007118:	4602      	mov	r2, r0
 800711a:	6268      	str	r0, [r5, #36]	; 0x24
 800711c:	b920      	cbnz	r0, 8007128 <_Bfree+0x20>
 800711e:	4b09      	ldr	r3, [pc, #36]	; (8007144 <_Bfree+0x3c>)
 8007120:	4809      	ldr	r0, [pc, #36]	; (8007148 <_Bfree+0x40>)
 8007122:	218a      	movs	r1, #138	; 0x8a
 8007124:	f000 ffba 	bl	800809c <__assert_func>
 8007128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800712c:	6006      	str	r6, [r0, #0]
 800712e:	60c6      	str	r6, [r0, #12]
 8007130:	b13c      	cbz	r4, 8007142 <_Bfree+0x3a>
 8007132:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007134:	6862      	ldr	r2, [r4, #4]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800713c:	6021      	str	r1, [r4, #0]
 800713e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007142:	bd70      	pop	{r4, r5, r6, pc}
 8007144:	08008c9e 	.word	0x08008c9e
 8007148:	08008e00 	.word	0x08008e00

0800714c <__multadd>:
 800714c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007150:	690d      	ldr	r5, [r1, #16]
 8007152:	4607      	mov	r7, r0
 8007154:	460c      	mov	r4, r1
 8007156:	461e      	mov	r6, r3
 8007158:	f101 0c14 	add.w	ip, r1, #20
 800715c:	2000      	movs	r0, #0
 800715e:	f8dc 3000 	ldr.w	r3, [ip]
 8007162:	b299      	uxth	r1, r3
 8007164:	fb02 6101 	mla	r1, r2, r1, r6
 8007168:	0c1e      	lsrs	r6, r3, #16
 800716a:	0c0b      	lsrs	r3, r1, #16
 800716c:	fb02 3306 	mla	r3, r2, r6, r3
 8007170:	b289      	uxth	r1, r1
 8007172:	3001      	adds	r0, #1
 8007174:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007178:	4285      	cmp	r5, r0
 800717a:	f84c 1b04 	str.w	r1, [ip], #4
 800717e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007182:	dcec      	bgt.n	800715e <__multadd+0x12>
 8007184:	b30e      	cbz	r6, 80071ca <__multadd+0x7e>
 8007186:	68a3      	ldr	r3, [r4, #8]
 8007188:	42ab      	cmp	r3, r5
 800718a:	dc19      	bgt.n	80071c0 <__multadd+0x74>
 800718c:	6861      	ldr	r1, [r4, #4]
 800718e:	4638      	mov	r0, r7
 8007190:	3101      	adds	r1, #1
 8007192:	f7ff ff79 	bl	8007088 <_Balloc>
 8007196:	4680      	mov	r8, r0
 8007198:	b928      	cbnz	r0, 80071a6 <__multadd+0x5a>
 800719a:	4602      	mov	r2, r0
 800719c:	4b0c      	ldr	r3, [pc, #48]	; (80071d0 <__multadd+0x84>)
 800719e:	480d      	ldr	r0, [pc, #52]	; (80071d4 <__multadd+0x88>)
 80071a0:	21b5      	movs	r1, #181	; 0xb5
 80071a2:	f000 ff7b 	bl	800809c <__assert_func>
 80071a6:	6922      	ldr	r2, [r4, #16]
 80071a8:	3202      	adds	r2, #2
 80071aa:	f104 010c 	add.w	r1, r4, #12
 80071ae:	0092      	lsls	r2, r2, #2
 80071b0:	300c      	adds	r0, #12
 80071b2:	f7ff ff4f 	bl	8007054 <memcpy>
 80071b6:	4621      	mov	r1, r4
 80071b8:	4638      	mov	r0, r7
 80071ba:	f7ff ffa5 	bl	8007108 <_Bfree>
 80071be:	4644      	mov	r4, r8
 80071c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071c4:	3501      	adds	r5, #1
 80071c6:	615e      	str	r6, [r3, #20]
 80071c8:	6125      	str	r5, [r4, #16]
 80071ca:	4620      	mov	r0, r4
 80071cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071d0:	08008d10 	.word	0x08008d10
 80071d4:	08008e00 	.word	0x08008e00

080071d8 <__s2b>:
 80071d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071dc:	460c      	mov	r4, r1
 80071de:	4615      	mov	r5, r2
 80071e0:	461f      	mov	r7, r3
 80071e2:	2209      	movs	r2, #9
 80071e4:	3308      	adds	r3, #8
 80071e6:	4606      	mov	r6, r0
 80071e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80071ec:	2100      	movs	r1, #0
 80071ee:	2201      	movs	r2, #1
 80071f0:	429a      	cmp	r2, r3
 80071f2:	db09      	blt.n	8007208 <__s2b+0x30>
 80071f4:	4630      	mov	r0, r6
 80071f6:	f7ff ff47 	bl	8007088 <_Balloc>
 80071fa:	b940      	cbnz	r0, 800720e <__s2b+0x36>
 80071fc:	4602      	mov	r2, r0
 80071fe:	4b19      	ldr	r3, [pc, #100]	; (8007264 <__s2b+0x8c>)
 8007200:	4819      	ldr	r0, [pc, #100]	; (8007268 <__s2b+0x90>)
 8007202:	21ce      	movs	r1, #206	; 0xce
 8007204:	f000 ff4a 	bl	800809c <__assert_func>
 8007208:	0052      	lsls	r2, r2, #1
 800720a:	3101      	adds	r1, #1
 800720c:	e7f0      	b.n	80071f0 <__s2b+0x18>
 800720e:	9b08      	ldr	r3, [sp, #32]
 8007210:	6143      	str	r3, [r0, #20]
 8007212:	2d09      	cmp	r5, #9
 8007214:	f04f 0301 	mov.w	r3, #1
 8007218:	6103      	str	r3, [r0, #16]
 800721a:	dd16      	ble.n	800724a <__s2b+0x72>
 800721c:	f104 0909 	add.w	r9, r4, #9
 8007220:	46c8      	mov	r8, r9
 8007222:	442c      	add	r4, r5
 8007224:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007228:	4601      	mov	r1, r0
 800722a:	3b30      	subs	r3, #48	; 0x30
 800722c:	220a      	movs	r2, #10
 800722e:	4630      	mov	r0, r6
 8007230:	f7ff ff8c 	bl	800714c <__multadd>
 8007234:	45a0      	cmp	r8, r4
 8007236:	d1f5      	bne.n	8007224 <__s2b+0x4c>
 8007238:	f1a5 0408 	sub.w	r4, r5, #8
 800723c:	444c      	add	r4, r9
 800723e:	1b2d      	subs	r5, r5, r4
 8007240:	1963      	adds	r3, r4, r5
 8007242:	42bb      	cmp	r3, r7
 8007244:	db04      	blt.n	8007250 <__s2b+0x78>
 8007246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800724a:	340a      	adds	r4, #10
 800724c:	2509      	movs	r5, #9
 800724e:	e7f6      	b.n	800723e <__s2b+0x66>
 8007250:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007254:	4601      	mov	r1, r0
 8007256:	3b30      	subs	r3, #48	; 0x30
 8007258:	220a      	movs	r2, #10
 800725a:	4630      	mov	r0, r6
 800725c:	f7ff ff76 	bl	800714c <__multadd>
 8007260:	e7ee      	b.n	8007240 <__s2b+0x68>
 8007262:	bf00      	nop
 8007264:	08008d10 	.word	0x08008d10
 8007268:	08008e00 	.word	0x08008e00

0800726c <__hi0bits>:
 800726c:	0c03      	lsrs	r3, r0, #16
 800726e:	041b      	lsls	r3, r3, #16
 8007270:	b9d3      	cbnz	r3, 80072a8 <__hi0bits+0x3c>
 8007272:	0400      	lsls	r0, r0, #16
 8007274:	2310      	movs	r3, #16
 8007276:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800727a:	bf04      	itt	eq
 800727c:	0200      	lsleq	r0, r0, #8
 800727e:	3308      	addeq	r3, #8
 8007280:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007284:	bf04      	itt	eq
 8007286:	0100      	lsleq	r0, r0, #4
 8007288:	3304      	addeq	r3, #4
 800728a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800728e:	bf04      	itt	eq
 8007290:	0080      	lsleq	r0, r0, #2
 8007292:	3302      	addeq	r3, #2
 8007294:	2800      	cmp	r0, #0
 8007296:	db05      	blt.n	80072a4 <__hi0bits+0x38>
 8007298:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800729c:	f103 0301 	add.w	r3, r3, #1
 80072a0:	bf08      	it	eq
 80072a2:	2320      	moveq	r3, #32
 80072a4:	4618      	mov	r0, r3
 80072a6:	4770      	bx	lr
 80072a8:	2300      	movs	r3, #0
 80072aa:	e7e4      	b.n	8007276 <__hi0bits+0xa>

080072ac <__lo0bits>:
 80072ac:	6803      	ldr	r3, [r0, #0]
 80072ae:	f013 0207 	ands.w	r2, r3, #7
 80072b2:	4601      	mov	r1, r0
 80072b4:	d00b      	beq.n	80072ce <__lo0bits+0x22>
 80072b6:	07da      	lsls	r2, r3, #31
 80072b8:	d423      	bmi.n	8007302 <__lo0bits+0x56>
 80072ba:	0798      	lsls	r0, r3, #30
 80072bc:	bf49      	itett	mi
 80072be:	085b      	lsrmi	r3, r3, #1
 80072c0:	089b      	lsrpl	r3, r3, #2
 80072c2:	2001      	movmi	r0, #1
 80072c4:	600b      	strmi	r3, [r1, #0]
 80072c6:	bf5c      	itt	pl
 80072c8:	600b      	strpl	r3, [r1, #0]
 80072ca:	2002      	movpl	r0, #2
 80072cc:	4770      	bx	lr
 80072ce:	b298      	uxth	r0, r3
 80072d0:	b9a8      	cbnz	r0, 80072fe <__lo0bits+0x52>
 80072d2:	0c1b      	lsrs	r3, r3, #16
 80072d4:	2010      	movs	r0, #16
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	b90a      	cbnz	r2, 80072de <__lo0bits+0x32>
 80072da:	3008      	adds	r0, #8
 80072dc:	0a1b      	lsrs	r3, r3, #8
 80072de:	071a      	lsls	r2, r3, #28
 80072e0:	bf04      	itt	eq
 80072e2:	091b      	lsreq	r3, r3, #4
 80072e4:	3004      	addeq	r0, #4
 80072e6:	079a      	lsls	r2, r3, #30
 80072e8:	bf04      	itt	eq
 80072ea:	089b      	lsreq	r3, r3, #2
 80072ec:	3002      	addeq	r0, #2
 80072ee:	07da      	lsls	r2, r3, #31
 80072f0:	d403      	bmi.n	80072fa <__lo0bits+0x4e>
 80072f2:	085b      	lsrs	r3, r3, #1
 80072f4:	f100 0001 	add.w	r0, r0, #1
 80072f8:	d005      	beq.n	8007306 <__lo0bits+0x5a>
 80072fa:	600b      	str	r3, [r1, #0]
 80072fc:	4770      	bx	lr
 80072fe:	4610      	mov	r0, r2
 8007300:	e7e9      	b.n	80072d6 <__lo0bits+0x2a>
 8007302:	2000      	movs	r0, #0
 8007304:	4770      	bx	lr
 8007306:	2020      	movs	r0, #32
 8007308:	4770      	bx	lr
	...

0800730c <__i2b>:
 800730c:	b510      	push	{r4, lr}
 800730e:	460c      	mov	r4, r1
 8007310:	2101      	movs	r1, #1
 8007312:	f7ff feb9 	bl	8007088 <_Balloc>
 8007316:	4602      	mov	r2, r0
 8007318:	b928      	cbnz	r0, 8007326 <__i2b+0x1a>
 800731a:	4b05      	ldr	r3, [pc, #20]	; (8007330 <__i2b+0x24>)
 800731c:	4805      	ldr	r0, [pc, #20]	; (8007334 <__i2b+0x28>)
 800731e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007322:	f000 febb 	bl	800809c <__assert_func>
 8007326:	2301      	movs	r3, #1
 8007328:	6144      	str	r4, [r0, #20]
 800732a:	6103      	str	r3, [r0, #16]
 800732c:	bd10      	pop	{r4, pc}
 800732e:	bf00      	nop
 8007330:	08008d10 	.word	0x08008d10
 8007334:	08008e00 	.word	0x08008e00

08007338 <__multiply>:
 8007338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800733c:	4691      	mov	r9, r2
 800733e:	690a      	ldr	r2, [r1, #16]
 8007340:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007344:	429a      	cmp	r2, r3
 8007346:	bfb8      	it	lt
 8007348:	460b      	movlt	r3, r1
 800734a:	460c      	mov	r4, r1
 800734c:	bfbc      	itt	lt
 800734e:	464c      	movlt	r4, r9
 8007350:	4699      	movlt	r9, r3
 8007352:	6927      	ldr	r7, [r4, #16]
 8007354:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007358:	68a3      	ldr	r3, [r4, #8]
 800735a:	6861      	ldr	r1, [r4, #4]
 800735c:	eb07 060a 	add.w	r6, r7, sl
 8007360:	42b3      	cmp	r3, r6
 8007362:	b085      	sub	sp, #20
 8007364:	bfb8      	it	lt
 8007366:	3101      	addlt	r1, #1
 8007368:	f7ff fe8e 	bl	8007088 <_Balloc>
 800736c:	b930      	cbnz	r0, 800737c <__multiply+0x44>
 800736e:	4602      	mov	r2, r0
 8007370:	4b44      	ldr	r3, [pc, #272]	; (8007484 <__multiply+0x14c>)
 8007372:	4845      	ldr	r0, [pc, #276]	; (8007488 <__multiply+0x150>)
 8007374:	f240 115d 	movw	r1, #349	; 0x15d
 8007378:	f000 fe90 	bl	800809c <__assert_func>
 800737c:	f100 0514 	add.w	r5, r0, #20
 8007380:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007384:	462b      	mov	r3, r5
 8007386:	2200      	movs	r2, #0
 8007388:	4543      	cmp	r3, r8
 800738a:	d321      	bcc.n	80073d0 <__multiply+0x98>
 800738c:	f104 0314 	add.w	r3, r4, #20
 8007390:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007394:	f109 0314 	add.w	r3, r9, #20
 8007398:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800739c:	9202      	str	r2, [sp, #8]
 800739e:	1b3a      	subs	r2, r7, r4
 80073a0:	3a15      	subs	r2, #21
 80073a2:	f022 0203 	bic.w	r2, r2, #3
 80073a6:	3204      	adds	r2, #4
 80073a8:	f104 0115 	add.w	r1, r4, #21
 80073ac:	428f      	cmp	r7, r1
 80073ae:	bf38      	it	cc
 80073b0:	2204      	movcc	r2, #4
 80073b2:	9201      	str	r2, [sp, #4]
 80073b4:	9a02      	ldr	r2, [sp, #8]
 80073b6:	9303      	str	r3, [sp, #12]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d80c      	bhi.n	80073d6 <__multiply+0x9e>
 80073bc:	2e00      	cmp	r6, #0
 80073be:	dd03      	ble.n	80073c8 <__multiply+0x90>
 80073c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d05a      	beq.n	800747e <__multiply+0x146>
 80073c8:	6106      	str	r6, [r0, #16]
 80073ca:	b005      	add	sp, #20
 80073cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d0:	f843 2b04 	str.w	r2, [r3], #4
 80073d4:	e7d8      	b.n	8007388 <__multiply+0x50>
 80073d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80073da:	f1ba 0f00 	cmp.w	sl, #0
 80073de:	d024      	beq.n	800742a <__multiply+0xf2>
 80073e0:	f104 0e14 	add.w	lr, r4, #20
 80073e4:	46a9      	mov	r9, r5
 80073e6:	f04f 0c00 	mov.w	ip, #0
 80073ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80073ee:	f8d9 1000 	ldr.w	r1, [r9]
 80073f2:	fa1f fb82 	uxth.w	fp, r2
 80073f6:	b289      	uxth	r1, r1
 80073f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80073fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007400:	f8d9 2000 	ldr.w	r2, [r9]
 8007404:	4461      	add	r1, ip
 8007406:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800740a:	fb0a c20b 	mla	r2, sl, fp, ip
 800740e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007412:	b289      	uxth	r1, r1
 8007414:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007418:	4577      	cmp	r7, lr
 800741a:	f849 1b04 	str.w	r1, [r9], #4
 800741e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007422:	d8e2      	bhi.n	80073ea <__multiply+0xb2>
 8007424:	9a01      	ldr	r2, [sp, #4]
 8007426:	f845 c002 	str.w	ip, [r5, r2]
 800742a:	9a03      	ldr	r2, [sp, #12]
 800742c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007430:	3304      	adds	r3, #4
 8007432:	f1b9 0f00 	cmp.w	r9, #0
 8007436:	d020      	beq.n	800747a <__multiply+0x142>
 8007438:	6829      	ldr	r1, [r5, #0]
 800743a:	f104 0c14 	add.w	ip, r4, #20
 800743e:	46ae      	mov	lr, r5
 8007440:	f04f 0a00 	mov.w	sl, #0
 8007444:	f8bc b000 	ldrh.w	fp, [ip]
 8007448:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800744c:	fb09 220b 	mla	r2, r9, fp, r2
 8007450:	4492      	add	sl, r2
 8007452:	b289      	uxth	r1, r1
 8007454:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007458:	f84e 1b04 	str.w	r1, [lr], #4
 800745c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007460:	f8be 1000 	ldrh.w	r1, [lr]
 8007464:	0c12      	lsrs	r2, r2, #16
 8007466:	fb09 1102 	mla	r1, r9, r2, r1
 800746a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800746e:	4567      	cmp	r7, ip
 8007470:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007474:	d8e6      	bhi.n	8007444 <__multiply+0x10c>
 8007476:	9a01      	ldr	r2, [sp, #4]
 8007478:	50a9      	str	r1, [r5, r2]
 800747a:	3504      	adds	r5, #4
 800747c:	e79a      	b.n	80073b4 <__multiply+0x7c>
 800747e:	3e01      	subs	r6, #1
 8007480:	e79c      	b.n	80073bc <__multiply+0x84>
 8007482:	bf00      	nop
 8007484:	08008d10 	.word	0x08008d10
 8007488:	08008e00 	.word	0x08008e00

0800748c <__pow5mult>:
 800748c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007490:	4615      	mov	r5, r2
 8007492:	f012 0203 	ands.w	r2, r2, #3
 8007496:	4606      	mov	r6, r0
 8007498:	460f      	mov	r7, r1
 800749a:	d007      	beq.n	80074ac <__pow5mult+0x20>
 800749c:	4c25      	ldr	r4, [pc, #148]	; (8007534 <__pow5mult+0xa8>)
 800749e:	3a01      	subs	r2, #1
 80074a0:	2300      	movs	r3, #0
 80074a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074a6:	f7ff fe51 	bl	800714c <__multadd>
 80074aa:	4607      	mov	r7, r0
 80074ac:	10ad      	asrs	r5, r5, #2
 80074ae:	d03d      	beq.n	800752c <__pow5mult+0xa0>
 80074b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80074b2:	b97c      	cbnz	r4, 80074d4 <__pow5mult+0x48>
 80074b4:	2010      	movs	r0, #16
 80074b6:	f7fc f9f5 	bl	80038a4 <malloc>
 80074ba:	4602      	mov	r2, r0
 80074bc:	6270      	str	r0, [r6, #36]	; 0x24
 80074be:	b928      	cbnz	r0, 80074cc <__pow5mult+0x40>
 80074c0:	4b1d      	ldr	r3, [pc, #116]	; (8007538 <__pow5mult+0xac>)
 80074c2:	481e      	ldr	r0, [pc, #120]	; (800753c <__pow5mult+0xb0>)
 80074c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80074c8:	f000 fde8 	bl	800809c <__assert_func>
 80074cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074d0:	6004      	str	r4, [r0, #0]
 80074d2:	60c4      	str	r4, [r0, #12]
 80074d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80074d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074dc:	b94c      	cbnz	r4, 80074f2 <__pow5mult+0x66>
 80074de:	f240 2171 	movw	r1, #625	; 0x271
 80074e2:	4630      	mov	r0, r6
 80074e4:	f7ff ff12 	bl	800730c <__i2b>
 80074e8:	2300      	movs	r3, #0
 80074ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80074ee:	4604      	mov	r4, r0
 80074f0:	6003      	str	r3, [r0, #0]
 80074f2:	f04f 0900 	mov.w	r9, #0
 80074f6:	07eb      	lsls	r3, r5, #31
 80074f8:	d50a      	bpl.n	8007510 <__pow5mult+0x84>
 80074fa:	4639      	mov	r1, r7
 80074fc:	4622      	mov	r2, r4
 80074fe:	4630      	mov	r0, r6
 8007500:	f7ff ff1a 	bl	8007338 <__multiply>
 8007504:	4639      	mov	r1, r7
 8007506:	4680      	mov	r8, r0
 8007508:	4630      	mov	r0, r6
 800750a:	f7ff fdfd 	bl	8007108 <_Bfree>
 800750e:	4647      	mov	r7, r8
 8007510:	106d      	asrs	r5, r5, #1
 8007512:	d00b      	beq.n	800752c <__pow5mult+0xa0>
 8007514:	6820      	ldr	r0, [r4, #0]
 8007516:	b938      	cbnz	r0, 8007528 <__pow5mult+0x9c>
 8007518:	4622      	mov	r2, r4
 800751a:	4621      	mov	r1, r4
 800751c:	4630      	mov	r0, r6
 800751e:	f7ff ff0b 	bl	8007338 <__multiply>
 8007522:	6020      	str	r0, [r4, #0]
 8007524:	f8c0 9000 	str.w	r9, [r0]
 8007528:	4604      	mov	r4, r0
 800752a:	e7e4      	b.n	80074f6 <__pow5mult+0x6a>
 800752c:	4638      	mov	r0, r7
 800752e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007532:	bf00      	nop
 8007534:	08008f50 	.word	0x08008f50
 8007538:	08008c9e 	.word	0x08008c9e
 800753c:	08008e00 	.word	0x08008e00

08007540 <__lshift>:
 8007540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007544:	460c      	mov	r4, r1
 8007546:	6849      	ldr	r1, [r1, #4]
 8007548:	6923      	ldr	r3, [r4, #16]
 800754a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800754e:	68a3      	ldr	r3, [r4, #8]
 8007550:	4607      	mov	r7, r0
 8007552:	4691      	mov	r9, r2
 8007554:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007558:	f108 0601 	add.w	r6, r8, #1
 800755c:	42b3      	cmp	r3, r6
 800755e:	db0b      	blt.n	8007578 <__lshift+0x38>
 8007560:	4638      	mov	r0, r7
 8007562:	f7ff fd91 	bl	8007088 <_Balloc>
 8007566:	4605      	mov	r5, r0
 8007568:	b948      	cbnz	r0, 800757e <__lshift+0x3e>
 800756a:	4602      	mov	r2, r0
 800756c:	4b2a      	ldr	r3, [pc, #168]	; (8007618 <__lshift+0xd8>)
 800756e:	482b      	ldr	r0, [pc, #172]	; (800761c <__lshift+0xdc>)
 8007570:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007574:	f000 fd92 	bl	800809c <__assert_func>
 8007578:	3101      	adds	r1, #1
 800757a:	005b      	lsls	r3, r3, #1
 800757c:	e7ee      	b.n	800755c <__lshift+0x1c>
 800757e:	2300      	movs	r3, #0
 8007580:	f100 0114 	add.w	r1, r0, #20
 8007584:	f100 0210 	add.w	r2, r0, #16
 8007588:	4618      	mov	r0, r3
 800758a:	4553      	cmp	r3, sl
 800758c:	db37      	blt.n	80075fe <__lshift+0xbe>
 800758e:	6920      	ldr	r0, [r4, #16]
 8007590:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007594:	f104 0314 	add.w	r3, r4, #20
 8007598:	f019 091f 	ands.w	r9, r9, #31
 800759c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80075a4:	d02f      	beq.n	8007606 <__lshift+0xc6>
 80075a6:	f1c9 0e20 	rsb	lr, r9, #32
 80075aa:	468a      	mov	sl, r1
 80075ac:	f04f 0c00 	mov.w	ip, #0
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	fa02 f209 	lsl.w	r2, r2, r9
 80075b6:	ea42 020c 	orr.w	r2, r2, ip
 80075ba:	f84a 2b04 	str.w	r2, [sl], #4
 80075be:	f853 2b04 	ldr.w	r2, [r3], #4
 80075c2:	4298      	cmp	r0, r3
 80075c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80075c8:	d8f2      	bhi.n	80075b0 <__lshift+0x70>
 80075ca:	1b03      	subs	r3, r0, r4
 80075cc:	3b15      	subs	r3, #21
 80075ce:	f023 0303 	bic.w	r3, r3, #3
 80075d2:	3304      	adds	r3, #4
 80075d4:	f104 0215 	add.w	r2, r4, #21
 80075d8:	4290      	cmp	r0, r2
 80075da:	bf38      	it	cc
 80075dc:	2304      	movcc	r3, #4
 80075de:	f841 c003 	str.w	ip, [r1, r3]
 80075e2:	f1bc 0f00 	cmp.w	ip, #0
 80075e6:	d001      	beq.n	80075ec <__lshift+0xac>
 80075e8:	f108 0602 	add.w	r6, r8, #2
 80075ec:	3e01      	subs	r6, #1
 80075ee:	4638      	mov	r0, r7
 80075f0:	612e      	str	r6, [r5, #16]
 80075f2:	4621      	mov	r1, r4
 80075f4:	f7ff fd88 	bl	8007108 <_Bfree>
 80075f8:	4628      	mov	r0, r5
 80075fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007602:	3301      	adds	r3, #1
 8007604:	e7c1      	b.n	800758a <__lshift+0x4a>
 8007606:	3904      	subs	r1, #4
 8007608:	f853 2b04 	ldr.w	r2, [r3], #4
 800760c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007610:	4298      	cmp	r0, r3
 8007612:	d8f9      	bhi.n	8007608 <__lshift+0xc8>
 8007614:	e7ea      	b.n	80075ec <__lshift+0xac>
 8007616:	bf00      	nop
 8007618:	08008d10 	.word	0x08008d10
 800761c:	08008e00 	.word	0x08008e00

08007620 <__mcmp>:
 8007620:	b530      	push	{r4, r5, lr}
 8007622:	6902      	ldr	r2, [r0, #16]
 8007624:	690c      	ldr	r4, [r1, #16]
 8007626:	1b12      	subs	r2, r2, r4
 8007628:	d10e      	bne.n	8007648 <__mcmp+0x28>
 800762a:	f100 0314 	add.w	r3, r0, #20
 800762e:	3114      	adds	r1, #20
 8007630:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007634:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007638:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800763c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007640:	42a5      	cmp	r5, r4
 8007642:	d003      	beq.n	800764c <__mcmp+0x2c>
 8007644:	d305      	bcc.n	8007652 <__mcmp+0x32>
 8007646:	2201      	movs	r2, #1
 8007648:	4610      	mov	r0, r2
 800764a:	bd30      	pop	{r4, r5, pc}
 800764c:	4283      	cmp	r3, r0
 800764e:	d3f3      	bcc.n	8007638 <__mcmp+0x18>
 8007650:	e7fa      	b.n	8007648 <__mcmp+0x28>
 8007652:	f04f 32ff 	mov.w	r2, #4294967295
 8007656:	e7f7      	b.n	8007648 <__mcmp+0x28>

08007658 <__mdiff>:
 8007658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765c:	460c      	mov	r4, r1
 800765e:	4606      	mov	r6, r0
 8007660:	4611      	mov	r1, r2
 8007662:	4620      	mov	r0, r4
 8007664:	4690      	mov	r8, r2
 8007666:	f7ff ffdb 	bl	8007620 <__mcmp>
 800766a:	1e05      	subs	r5, r0, #0
 800766c:	d110      	bne.n	8007690 <__mdiff+0x38>
 800766e:	4629      	mov	r1, r5
 8007670:	4630      	mov	r0, r6
 8007672:	f7ff fd09 	bl	8007088 <_Balloc>
 8007676:	b930      	cbnz	r0, 8007686 <__mdiff+0x2e>
 8007678:	4b3a      	ldr	r3, [pc, #232]	; (8007764 <__mdiff+0x10c>)
 800767a:	4602      	mov	r2, r0
 800767c:	f240 2132 	movw	r1, #562	; 0x232
 8007680:	4839      	ldr	r0, [pc, #228]	; (8007768 <__mdiff+0x110>)
 8007682:	f000 fd0b 	bl	800809c <__assert_func>
 8007686:	2301      	movs	r3, #1
 8007688:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800768c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007690:	bfa4      	itt	ge
 8007692:	4643      	movge	r3, r8
 8007694:	46a0      	movge	r8, r4
 8007696:	4630      	mov	r0, r6
 8007698:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800769c:	bfa6      	itte	ge
 800769e:	461c      	movge	r4, r3
 80076a0:	2500      	movge	r5, #0
 80076a2:	2501      	movlt	r5, #1
 80076a4:	f7ff fcf0 	bl	8007088 <_Balloc>
 80076a8:	b920      	cbnz	r0, 80076b4 <__mdiff+0x5c>
 80076aa:	4b2e      	ldr	r3, [pc, #184]	; (8007764 <__mdiff+0x10c>)
 80076ac:	4602      	mov	r2, r0
 80076ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 80076b2:	e7e5      	b.n	8007680 <__mdiff+0x28>
 80076b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80076b8:	6926      	ldr	r6, [r4, #16]
 80076ba:	60c5      	str	r5, [r0, #12]
 80076bc:	f104 0914 	add.w	r9, r4, #20
 80076c0:	f108 0514 	add.w	r5, r8, #20
 80076c4:	f100 0e14 	add.w	lr, r0, #20
 80076c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80076cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80076d0:	f108 0210 	add.w	r2, r8, #16
 80076d4:	46f2      	mov	sl, lr
 80076d6:	2100      	movs	r1, #0
 80076d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80076dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80076e0:	fa1f f883 	uxth.w	r8, r3
 80076e4:	fa11 f18b 	uxtah	r1, r1, fp
 80076e8:	0c1b      	lsrs	r3, r3, #16
 80076ea:	eba1 0808 	sub.w	r8, r1, r8
 80076ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80076f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80076f6:	fa1f f888 	uxth.w	r8, r8
 80076fa:	1419      	asrs	r1, r3, #16
 80076fc:	454e      	cmp	r6, r9
 80076fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007702:	f84a 3b04 	str.w	r3, [sl], #4
 8007706:	d8e7      	bhi.n	80076d8 <__mdiff+0x80>
 8007708:	1b33      	subs	r3, r6, r4
 800770a:	3b15      	subs	r3, #21
 800770c:	f023 0303 	bic.w	r3, r3, #3
 8007710:	3304      	adds	r3, #4
 8007712:	3415      	adds	r4, #21
 8007714:	42a6      	cmp	r6, r4
 8007716:	bf38      	it	cc
 8007718:	2304      	movcc	r3, #4
 800771a:	441d      	add	r5, r3
 800771c:	4473      	add	r3, lr
 800771e:	469e      	mov	lr, r3
 8007720:	462e      	mov	r6, r5
 8007722:	4566      	cmp	r6, ip
 8007724:	d30e      	bcc.n	8007744 <__mdiff+0xec>
 8007726:	f10c 0203 	add.w	r2, ip, #3
 800772a:	1b52      	subs	r2, r2, r5
 800772c:	f022 0203 	bic.w	r2, r2, #3
 8007730:	3d03      	subs	r5, #3
 8007732:	45ac      	cmp	ip, r5
 8007734:	bf38      	it	cc
 8007736:	2200      	movcc	r2, #0
 8007738:	441a      	add	r2, r3
 800773a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800773e:	b17b      	cbz	r3, 8007760 <__mdiff+0x108>
 8007740:	6107      	str	r7, [r0, #16]
 8007742:	e7a3      	b.n	800768c <__mdiff+0x34>
 8007744:	f856 8b04 	ldr.w	r8, [r6], #4
 8007748:	fa11 f288 	uxtah	r2, r1, r8
 800774c:	1414      	asrs	r4, r2, #16
 800774e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007752:	b292      	uxth	r2, r2
 8007754:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007758:	f84e 2b04 	str.w	r2, [lr], #4
 800775c:	1421      	asrs	r1, r4, #16
 800775e:	e7e0      	b.n	8007722 <__mdiff+0xca>
 8007760:	3f01      	subs	r7, #1
 8007762:	e7ea      	b.n	800773a <__mdiff+0xe2>
 8007764:	08008d10 	.word	0x08008d10
 8007768:	08008e00 	.word	0x08008e00

0800776c <__ulp>:
 800776c:	b082      	sub	sp, #8
 800776e:	ed8d 0b00 	vstr	d0, [sp]
 8007772:	9b01      	ldr	r3, [sp, #4]
 8007774:	4912      	ldr	r1, [pc, #72]	; (80077c0 <__ulp+0x54>)
 8007776:	4019      	ands	r1, r3
 8007778:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800777c:	2900      	cmp	r1, #0
 800777e:	dd05      	ble.n	800778c <__ulp+0x20>
 8007780:	2200      	movs	r2, #0
 8007782:	460b      	mov	r3, r1
 8007784:	ec43 2b10 	vmov	d0, r2, r3
 8007788:	b002      	add	sp, #8
 800778a:	4770      	bx	lr
 800778c:	4249      	negs	r1, r1
 800778e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007792:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007796:	f04f 0200 	mov.w	r2, #0
 800779a:	f04f 0300 	mov.w	r3, #0
 800779e:	da04      	bge.n	80077aa <__ulp+0x3e>
 80077a0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80077a4:	fa41 f300 	asr.w	r3, r1, r0
 80077a8:	e7ec      	b.n	8007784 <__ulp+0x18>
 80077aa:	f1a0 0114 	sub.w	r1, r0, #20
 80077ae:	291e      	cmp	r1, #30
 80077b0:	bfda      	itte	le
 80077b2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80077b6:	fa20 f101 	lsrle.w	r1, r0, r1
 80077ba:	2101      	movgt	r1, #1
 80077bc:	460a      	mov	r2, r1
 80077be:	e7e1      	b.n	8007784 <__ulp+0x18>
 80077c0:	7ff00000 	.word	0x7ff00000

080077c4 <__b2d>:
 80077c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c6:	6905      	ldr	r5, [r0, #16]
 80077c8:	f100 0714 	add.w	r7, r0, #20
 80077cc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80077d0:	1f2e      	subs	r6, r5, #4
 80077d2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80077d6:	4620      	mov	r0, r4
 80077d8:	f7ff fd48 	bl	800726c <__hi0bits>
 80077dc:	f1c0 0320 	rsb	r3, r0, #32
 80077e0:	280a      	cmp	r0, #10
 80077e2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007860 <__b2d+0x9c>
 80077e6:	600b      	str	r3, [r1, #0]
 80077e8:	dc14      	bgt.n	8007814 <__b2d+0x50>
 80077ea:	f1c0 0e0b 	rsb	lr, r0, #11
 80077ee:	fa24 f10e 	lsr.w	r1, r4, lr
 80077f2:	42b7      	cmp	r7, r6
 80077f4:	ea41 030c 	orr.w	r3, r1, ip
 80077f8:	bf34      	ite	cc
 80077fa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80077fe:	2100      	movcs	r1, #0
 8007800:	3015      	adds	r0, #21
 8007802:	fa04 f000 	lsl.w	r0, r4, r0
 8007806:	fa21 f10e 	lsr.w	r1, r1, lr
 800780a:	ea40 0201 	orr.w	r2, r0, r1
 800780e:	ec43 2b10 	vmov	d0, r2, r3
 8007812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007814:	42b7      	cmp	r7, r6
 8007816:	bf3a      	itte	cc
 8007818:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800781c:	f1a5 0608 	subcc.w	r6, r5, #8
 8007820:	2100      	movcs	r1, #0
 8007822:	380b      	subs	r0, #11
 8007824:	d017      	beq.n	8007856 <__b2d+0x92>
 8007826:	f1c0 0c20 	rsb	ip, r0, #32
 800782a:	fa04 f500 	lsl.w	r5, r4, r0
 800782e:	42be      	cmp	r6, r7
 8007830:	fa21 f40c 	lsr.w	r4, r1, ip
 8007834:	ea45 0504 	orr.w	r5, r5, r4
 8007838:	bf8c      	ite	hi
 800783a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800783e:	2400      	movls	r4, #0
 8007840:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007844:	fa01 f000 	lsl.w	r0, r1, r0
 8007848:	fa24 f40c 	lsr.w	r4, r4, ip
 800784c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007850:	ea40 0204 	orr.w	r2, r0, r4
 8007854:	e7db      	b.n	800780e <__b2d+0x4a>
 8007856:	ea44 030c 	orr.w	r3, r4, ip
 800785a:	460a      	mov	r2, r1
 800785c:	e7d7      	b.n	800780e <__b2d+0x4a>
 800785e:	bf00      	nop
 8007860:	3ff00000 	.word	0x3ff00000

08007864 <__d2b>:
 8007864:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007868:	4689      	mov	r9, r1
 800786a:	2101      	movs	r1, #1
 800786c:	ec57 6b10 	vmov	r6, r7, d0
 8007870:	4690      	mov	r8, r2
 8007872:	f7ff fc09 	bl	8007088 <_Balloc>
 8007876:	4604      	mov	r4, r0
 8007878:	b930      	cbnz	r0, 8007888 <__d2b+0x24>
 800787a:	4602      	mov	r2, r0
 800787c:	4b25      	ldr	r3, [pc, #148]	; (8007914 <__d2b+0xb0>)
 800787e:	4826      	ldr	r0, [pc, #152]	; (8007918 <__d2b+0xb4>)
 8007880:	f240 310a 	movw	r1, #778	; 0x30a
 8007884:	f000 fc0a 	bl	800809c <__assert_func>
 8007888:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800788c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007890:	bb35      	cbnz	r5, 80078e0 <__d2b+0x7c>
 8007892:	2e00      	cmp	r6, #0
 8007894:	9301      	str	r3, [sp, #4]
 8007896:	d028      	beq.n	80078ea <__d2b+0x86>
 8007898:	4668      	mov	r0, sp
 800789a:	9600      	str	r6, [sp, #0]
 800789c:	f7ff fd06 	bl	80072ac <__lo0bits>
 80078a0:	9900      	ldr	r1, [sp, #0]
 80078a2:	b300      	cbz	r0, 80078e6 <__d2b+0x82>
 80078a4:	9a01      	ldr	r2, [sp, #4]
 80078a6:	f1c0 0320 	rsb	r3, r0, #32
 80078aa:	fa02 f303 	lsl.w	r3, r2, r3
 80078ae:	430b      	orrs	r3, r1
 80078b0:	40c2      	lsrs	r2, r0
 80078b2:	6163      	str	r3, [r4, #20]
 80078b4:	9201      	str	r2, [sp, #4]
 80078b6:	9b01      	ldr	r3, [sp, #4]
 80078b8:	61a3      	str	r3, [r4, #24]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	bf14      	ite	ne
 80078be:	2202      	movne	r2, #2
 80078c0:	2201      	moveq	r2, #1
 80078c2:	6122      	str	r2, [r4, #16]
 80078c4:	b1d5      	cbz	r5, 80078fc <__d2b+0x98>
 80078c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80078ca:	4405      	add	r5, r0
 80078cc:	f8c9 5000 	str.w	r5, [r9]
 80078d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80078d4:	f8c8 0000 	str.w	r0, [r8]
 80078d8:	4620      	mov	r0, r4
 80078da:	b003      	add	sp, #12
 80078dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078e4:	e7d5      	b.n	8007892 <__d2b+0x2e>
 80078e6:	6161      	str	r1, [r4, #20]
 80078e8:	e7e5      	b.n	80078b6 <__d2b+0x52>
 80078ea:	a801      	add	r0, sp, #4
 80078ec:	f7ff fcde 	bl	80072ac <__lo0bits>
 80078f0:	9b01      	ldr	r3, [sp, #4]
 80078f2:	6163      	str	r3, [r4, #20]
 80078f4:	2201      	movs	r2, #1
 80078f6:	6122      	str	r2, [r4, #16]
 80078f8:	3020      	adds	r0, #32
 80078fa:	e7e3      	b.n	80078c4 <__d2b+0x60>
 80078fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007900:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007904:	f8c9 0000 	str.w	r0, [r9]
 8007908:	6918      	ldr	r0, [r3, #16]
 800790a:	f7ff fcaf 	bl	800726c <__hi0bits>
 800790e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007912:	e7df      	b.n	80078d4 <__d2b+0x70>
 8007914:	08008d10 	.word	0x08008d10
 8007918:	08008e00 	.word	0x08008e00

0800791c <__ratio>:
 800791c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007920:	4688      	mov	r8, r1
 8007922:	4669      	mov	r1, sp
 8007924:	4681      	mov	r9, r0
 8007926:	f7ff ff4d 	bl	80077c4 <__b2d>
 800792a:	a901      	add	r1, sp, #4
 800792c:	4640      	mov	r0, r8
 800792e:	ec55 4b10 	vmov	r4, r5, d0
 8007932:	f7ff ff47 	bl	80077c4 <__b2d>
 8007936:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800793a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800793e:	eba3 0c02 	sub.w	ip, r3, r2
 8007942:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007946:	1a9b      	subs	r3, r3, r2
 8007948:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800794c:	ec51 0b10 	vmov	r0, r1, d0
 8007950:	2b00      	cmp	r3, #0
 8007952:	bfd6      	itet	le
 8007954:	460a      	movle	r2, r1
 8007956:	462a      	movgt	r2, r5
 8007958:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800795c:	468b      	mov	fp, r1
 800795e:	462f      	mov	r7, r5
 8007960:	bfd4      	ite	le
 8007962:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007966:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800796a:	4620      	mov	r0, r4
 800796c:	ee10 2a10 	vmov	r2, s0
 8007970:	465b      	mov	r3, fp
 8007972:	4639      	mov	r1, r7
 8007974:	f7f8 ff72 	bl	800085c <__aeabi_ddiv>
 8007978:	ec41 0b10 	vmov	d0, r0, r1
 800797c:	b003      	add	sp, #12
 800797e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007982 <__copybits>:
 8007982:	3901      	subs	r1, #1
 8007984:	b570      	push	{r4, r5, r6, lr}
 8007986:	1149      	asrs	r1, r1, #5
 8007988:	6914      	ldr	r4, [r2, #16]
 800798a:	3101      	adds	r1, #1
 800798c:	f102 0314 	add.w	r3, r2, #20
 8007990:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007994:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007998:	1f05      	subs	r5, r0, #4
 800799a:	42a3      	cmp	r3, r4
 800799c:	d30c      	bcc.n	80079b8 <__copybits+0x36>
 800799e:	1aa3      	subs	r3, r4, r2
 80079a0:	3b11      	subs	r3, #17
 80079a2:	f023 0303 	bic.w	r3, r3, #3
 80079a6:	3211      	adds	r2, #17
 80079a8:	42a2      	cmp	r2, r4
 80079aa:	bf88      	it	hi
 80079ac:	2300      	movhi	r3, #0
 80079ae:	4418      	add	r0, r3
 80079b0:	2300      	movs	r3, #0
 80079b2:	4288      	cmp	r0, r1
 80079b4:	d305      	bcc.n	80079c2 <__copybits+0x40>
 80079b6:	bd70      	pop	{r4, r5, r6, pc}
 80079b8:	f853 6b04 	ldr.w	r6, [r3], #4
 80079bc:	f845 6f04 	str.w	r6, [r5, #4]!
 80079c0:	e7eb      	b.n	800799a <__copybits+0x18>
 80079c2:	f840 3b04 	str.w	r3, [r0], #4
 80079c6:	e7f4      	b.n	80079b2 <__copybits+0x30>

080079c8 <__any_on>:
 80079c8:	f100 0214 	add.w	r2, r0, #20
 80079cc:	6900      	ldr	r0, [r0, #16]
 80079ce:	114b      	asrs	r3, r1, #5
 80079d0:	4298      	cmp	r0, r3
 80079d2:	b510      	push	{r4, lr}
 80079d4:	db11      	blt.n	80079fa <__any_on+0x32>
 80079d6:	dd0a      	ble.n	80079ee <__any_on+0x26>
 80079d8:	f011 011f 	ands.w	r1, r1, #31
 80079dc:	d007      	beq.n	80079ee <__any_on+0x26>
 80079de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80079e2:	fa24 f001 	lsr.w	r0, r4, r1
 80079e6:	fa00 f101 	lsl.w	r1, r0, r1
 80079ea:	428c      	cmp	r4, r1
 80079ec:	d10b      	bne.n	8007a06 <__any_on+0x3e>
 80079ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d803      	bhi.n	80079fe <__any_on+0x36>
 80079f6:	2000      	movs	r0, #0
 80079f8:	bd10      	pop	{r4, pc}
 80079fa:	4603      	mov	r3, r0
 80079fc:	e7f7      	b.n	80079ee <__any_on+0x26>
 80079fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a02:	2900      	cmp	r1, #0
 8007a04:	d0f5      	beq.n	80079f2 <__any_on+0x2a>
 8007a06:	2001      	movs	r0, #1
 8007a08:	e7f6      	b.n	80079f8 <__any_on+0x30>

08007a0a <_calloc_r>:
 8007a0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a0c:	fba1 2402 	umull	r2, r4, r1, r2
 8007a10:	b94c      	cbnz	r4, 8007a26 <_calloc_r+0x1c>
 8007a12:	4611      	mov	r1, r2
 8007a14:	9201      	str	r2, [sp, #4]
 8007a16:	f7fb ffc9 	bl	80039ac <_malloc_r>
 8007a1a:	9a01      	ldr	r2, [sp, #4]
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	b930      	cbnz	r0, 8007a2e <_calloc_r+0x24>
 8007a20:	4628      	mov	r0, r5
 8007a22:	b003      	add	sp, #12
 8007a24:	bd30      	pop	{r4, r5, pc}
 8007a26:	220c      	movs	r2, #12
 8007a28:	6002      	str	r2, [r0, #0]
 8007a2a:	2500      	movs	r5, #0
 8007a2c:	e7f8      	b.n	8007a20 <_calloc_r+0x16>
 8007a2e:	4621      	mov	r1, r4
 8007a30:	f7fb ff48 	bl	80038c4 <memset>
 8007a34:	e7f4      	b.n	8007a20 <_calloc_r+0x16>

08007a36 <__ssputs_r>:
 8007a36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a3a:	688e      	ldr	r6, [r1, #8]
 8007a3c:	429e      	cmp	r6, r3
 8007a3e:	4682      	mov	sl, r0
 8007a40:	460c      	mov	r4, r1
 8007a42:	4690      	mov	r8, r2
 8007a44:	461f      	mov	r7, r3
 8007a46:	d838      	bhi.n	8007aba <__ssputs_r+0x84>
 8007a48:	898a      	ldrh	r2, [r1, #12]
 8007a4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a4e:	d032      	beq.n	8007ab6 <__ssputs_r+0x80>
 8007a50:	6825      	ldr	r5, [r4, #0]
 8007a52:	6909      	ldr	r1, [r1, #16]
 8007a54:	eba5 0901 	sub.w	r9, r5, r1
 8007a58:	6965      	ldr	r5, [r4, #20]
 8007a5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a62:	3301      	adds	r3, #1
 8007a64:	444b      	add	r3, r9
 8007a66:	106d      	asrs	r5, r5, #1
 8007a68:	429d      	cmp	r5, r3
 8007a6a:	bf38      	it	cc
 8007a6c:	461d      	movcc	r5, r3
 8007a6e:	0553      	lsls	r3, r2, #21
 8007a70:	d531      	bpl.n	8007ad6 <__ssputs_r+0xa0>
 8007a72:	4629      	mov	r1, r5
 8007a74:	f7fb ff9a 	bl	80039ac <_malloc_r>
 8007a78:	4606      	mov	r6, r0
 8007a7a:	b950      	cbnz	r0, 8007a92 <__ssputs_r+0x5c>
 8007a7c:	230c      	movs	r3, #12
 8007a7e:	f8ca 3000 	str.w	r3, [sl]
 8007a82:	89a3      	ldrh	r3, [r4, #12]
 8007a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a88:	81a3      	strh	r3, [r4, #12]
 8007a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a92:	6921      	ldr	r1, [r4, #16]
 8007a94:	464a      	mov	r2, r9
 8007a96:	f7ff fadd 	bl	8007054 <memcpy>
 8007a9a:	89a3      	ldrh	r3, [r4, #12]
 8007a9c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa4:	81a3      	strh	r3, [r4, #12]
 8007aa6:	6126      	str	r6, [r4, #16]
 8007aa8:	6165      	str	r5, [r4, #20]
 8007aaa:	444e      	add	r6, r9
 8007aac:	eba5 0509 	sub.w	r5, r5, r9
 8007ab0:	6026      	str	r6, [r4, #0]
 8007ab2:	60a5      	str	r5, [r4, #8]
 8007ab4:	463e      	mov	r6, r7
 8007ab6:	42be      	cmp	r6, r7
 8007ab8:	d900      	bls.n	8007abc <__ssputs_r+0x86>
 8007aba:	463e      	mov	r6, r7
 8007abc:	6820      	ldr	r0, [r4, #0]
 8007abe:	4632      	mov	r2, r6
 8007ac0:	4641      	mov	r1, r8
 8007ac2:	f000 fb5f 	bl	8008184 <memmove>
 8007ac6:	68a3      	ldr	r3, [r4, #8]
 8007ac8:	1b9b      	subs	r3, r3, r6
 8007aca:	60a3      	str	r3, [r4, #8]
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	4433      	add	r3, r6
 8007ad0:	6023      	str	r3, [r4, #0]
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	e7db      	b.n	8007a8e <__ssputs_r+0x58>
 8007ad6:	462a      	mov	r2, r5
 8007ad8:	f000 fb6e 	bl	80081b8 <_realloc_r>
 8007adc:	4606      	mov	r6, r0
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d1e1      	bne.n	8007aa6 <__ssputs_r+0x70>
 8007ae2:	6921      	ldr	r1, [r4, #16]
 8007ae4:	4650      	mov	r0, sl
 8007ae6:	f7fb fef5 	bl	80038d4 <_free_r>
 8007aea:	e7c7      	b.n	8007a7c <__ssputs_r+0x46>

08007aec <_svfiprintf_r>:
 8007aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af0:	4698      	mov	r8, r3
 8007af2:	898b      	ldrh	r3, [r1, #12]
 8007af4:	061b      	lsls	r3, r3, #24
 8007af6:	b09d      	sub	sp, #116	; 0x74
 8007af8:	4607      	mov	r7, r0
 8007afa:	460d      	mov	r5, r1
 8007afc:	4614      	mov	r4, r2
 8007afe:	d50e      	bpl.n	8007b1e <_svfiprintf_r+0x32>
 8007b00:	690b      	ldr	r3, [r1, #16]
 8007b02:	b963      	cbnz	r3, 8007b1e <_svfiprintf_r+0x32>
 8007b04:	2140      	movs	r1, #64	; 0x40
 8007b06:	f7fb ff51 	bl	80039ac <_malloc_r>
 8007b0a:	6028      	str	r0, [r5, #0]
 8007b0c:	6128      	str	r0, [r5, #16]
 8007b0e:	b920      	cbnz	r0, 8007b1a <_svfiprintf_r+0x2e>
 8007b10:	230c      	movs	r3, #12
 8007b12:	603b      	str	r3, [r7, #0]
 8007b14:	f04f 30ff 	mov.w	r0, #4294967295
 8007b18:	e0d1      	b.n	8007cbe <_svfiprintf_r+0x1d2>
 8007b1a:	2340      	movs	r3, #64	; 0x40
 8007b1c:	616b      	str	r3, [r5, #20]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	9309      	str	r3, [sp, #36]	; 0x24
 8007b22:	2320      	movs	r3, #32
 8007b24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b28:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b2c:	2330      	movs	r3, #48	; 0x30
 8007b2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007cd8 <_svfiprintf_r+0x1ec>
 8007b32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b36:	f04f 0901 	mov.w	r9, #1
 8007b3a:	4623      	mov	r3, r4
 8007b3c:	469a      	mov	sl, r3
 8007b3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b42:	b10a      	cbz	r2, 8007b48 <_svfiprintf_r+0x5c>
 8007b44:	2a25      	cmp	r2, #37	; 0x25
 8007b46:	d1f9      	bne.n	8007b3c <_svfiprintf_r+0x50>
 8007b48:	ebba 0b04 	subs.w	fp, sl, r4
 8007b4c:	d00b      	beq.n	8007b66 <_svfiprintf_r+0x7a>
 8007b4e:	465b      	mov	r3, fp
 8007b50:	4622      	mov	r2, r4
 8007b52:	4629      	mov	r1, r5
 8007b54:	4638      	mov	r0, r7
 8007b56:	f7ff ff6e 	bl	8007a36 <__ssputs_r>
 8007b5a:	3001      	adds	r0, #1
 8007b5c:	f000 80aa 	beq.w	8007cb4 <_svfiprintf_r+0x1c8>
 8007b60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b62:	445a      	add	r2, fp
 8007b64:	9209      	str	r2, [sp, #36]	; 0x24
 8007b66:	f89a 3000 	ldrb.w	r3, [sl]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 80a2 	beq.w	8007cb4 <_svfiprintf_r+0x1c8>
 8007b70:	2300      	movs	r3, #0
 8007b72:	f04f 32ff 	mov.w	r2, #4294967295
 8007b76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b7a:	f10a 0a01 	add.w	sl, sl, #1
 8007b7e:	9304      	str	r3, [sp, #16]
 8007b80:	9307      	str	r3, [sp, #28]
 8007b82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b86:	931a      	str	r3, [sp, #104]	; 0x68
 8007b88:	4654      	mov	r4, sl
 8007b8a:	2205      	movs	r2, #5
 8007b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b90:	4851      	ldr	r0, [pc, #324]	; (8007cd8 <_svfiprintf_r+0x1ec>)
 8007b92:	f7f8 fb2d 	bl	80001f0 <memchr>
 8007b96:	9a04      	ldr	r2, [sp, #16]
 8007b98:	b9d8      	cbnz	r0, 8007bd2 <_svfiprintf_r+0xe6>
 8007b9a:	06d0      	lsls	r0, r2, #27
 8007b9c:	bf44      	itt	mi
 8007b9e:	2320      	movmi	r3, #32
 8007ba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ba4:	0711      	lsls	r1, r2, #28
 8007ba6:	bf44      	itt	mi
 8007ba8:	232b      	movmi	r3, #43	; 0x2b
 8007baa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bae:	f89a 3000 	ldrb.w	r3, [sl]
 8007bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8007bb4:	d015      	beq.n	8007be2 <_svfiprintf_r+0xf6>
 8007bb6:	9a07      	ldr	r2, [sp, #28]
 8007bb8:	4654      	mov	r4, sl
 8007bba:	2000      	movs	r0, #0
 8007bbc:	f04f 0c0a 	mov.w	ip, #10
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bc6:	3b30      	subs	r3, #48	; 0x30
 8007bc8:	2b09      	cmp	r3, #9
 8007bca:	d94e      	bls.n	8007c6a <_svfiprintf_r+0x17e>
 8007bcc:	b1b0      	cbz	r0, 8007bfc <_svfiprintf_r+0x110>
 8007bce:	9207      	str	r2, [sp, #28]
 8007bd0:	e014      	b.n	8007bfc <_svfiprintf_r+0x110>
 8007bd2:	eba0 0308 	sub.w	r3, r0, r8
 8007bd6:	fa09 f303 	lsl.w	r3, r9, r3
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	9304      	str	r3, [sp, #16]
 8007bde:	46a2      	mov	sl, r4
 8007be0:	e7d2      	b.n	8007b88 <_svfiprintf_r+0x9c>
 8007be2:	9b03      	ldr	r3, [sp, #12]
 8007be4:	1d19      	adds	r1, r3, #4
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	9103      	str	r1, [sp, #12]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	bfbb      	ittet	lt
 8007bee:	425b      	neglt	r3, r3
 8007bf0:	f042 0202 	orrlt.w	r2, r2, #2
 8007bf4:	9307      	strge	r3, [sp, #28]
 8007bf6:	9307      	strlt	r3, [sp, #28]
 8007bf8:	bfb8      	it	lt
 8007bfa:	9204      	strlt	r2, [sp, #16]
 8007bfc:	7823      	ldrb	r3, [r4, #0]
 8007bfe:	2b2e      	cmp	r3, #46	; 0x2e
 8007c00:	d10c      	bne.n	8007c1c <_svfiprintf_r+0x130>
 8007c02:	7863      	ldrb	r3, [r4, #1]
 8007c04:	2b2a      	cmp	r3, #42	; 0x2a
 8007c06:	d135      	bne.n	8007c74 <_svfiprintf_r+0x188>
 8007c08:	9b03      	ldr	r3, [sp, #12]
 8007c0a:	1d1a      	adds	r2, r3, #4
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	9203      	str	r2, [sp, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	bfb8      	it	lt
 8007c14:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c18:	3402      	adds	r4, #2
 8007c1a:	9305      	str	r3, [sp, #20]
 8007c1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ce8 <_svfiprintf_r+0x1fc>
 8007c20:	7821      	ldrb	r1, [r4, #0]
 8007c22:	2203      	movs	r2, #3
 8007c24:	4650      	mov	r0, sl
 8007c26:	f7f8 fae3 	bl	80001f0 <memchr>
 8007c2a:	b140      	cbz	r0, 8007c3e <_svfiprintf_r+0x152>
 8007c2c:	2340      	movs	r3, #64	; 0x40
 8007c2e:	eba0 000a 	sub.w	r0, r0, sl
 8007c32:	fa03 f000 	lsl.w	r0, r3, r0
 8007c36:	9b04      	ldr	r3, [sp, #16]
 8007c38:	4303      	orrs	r3, r0
 8007c3a:	3401      	adds	r4, #1
 8007c3c:	9304      	str	r3, [sp, #16]
 8007c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c42:	4826      	ldr	r0, [pc, #152]	; (8007cdc <_svfiprintf_r+0x1f0>)
 8007c44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c48:	2206      	movs	r2, #6
 8007c4a:	f7f8 fad1 	bl	80001f0 <memchr>
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	d038      	beq.n	8007cc4 <_svfiprintf_r+0x1d8>
 8007c52:	4b23      	ldr	r3, [pc, #140]	; (8007ce0 <_svfiprintf_r+0x1f4>)
 8007c54:	bb1b      	cbnz	r3, 8007c9e <_svfiprintf_r+0x1b2>
 8007c56:	9b03      	ldr	r3, [sp, #12]
 8007c58:	3307      	adds	r3, #7
 8007c5a:	f023 0307 	bic.w	r3, r3, #7
 8007c5e:	3308      	adds	r3, #8
 8007c60:	9303      	str	r3, [sp, #12]
 8007c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c64:	4433      	add	r3, r6
 8007c66:	9309      	str	r3, [sp, #36]	; 0x24
 8007c68:	e767      	b.n	8007b3a <_svfiprintf_r+0x4e>
 8007c6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c6e:	460c      	mov	r4, r1
 8007c70:	2001      	movs	r0, #1
 8007c72:	e7a5      	b.n	8007bc0 <_svfiprintf_r+0xd4>
 8007c74:	2300      	movs	r3, #0
 8007c76:	3401      	adds	r4, #1
 8007c78:	9305      	str	r3, [sp, #20]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	f04f 0c0a 	mov.w	ip, #10
 8007c80:	4620      	mov	r0, r4
 8007c82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c86:	3a30      	subs	r2, #48	; 0x30
 8007c88:	2a09      	cmp	r2, #9
 8007c8a:	d903      	bls.n	8007c94 <_svfiprintf_r+0x1a8>
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d0c5      	beq.n	8007c1c <_svfiprintf_r+0x130>
 8007c90:	9105      	str	r1, [sp, #20]
 8007c92:	e7c3      	b.n	8007c1c <_svfiprintf_r+0x130>
 8007c94:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c98:	4604      	mov	r4, r0
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e7f0      	b.n	8007c80 <_svfiprintf_r+0x194>
 8007c9e:	ab03      	add	r3, sp, #12
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	462a      	mov	r2, r5
 8007ca4:	4b0f      	ldr	r3, [pc, #60]	; (8007ce4 <_svfiprintf_r+0x1f8>)
 8007ca6:	a904      	add	r1, sp, #16
 8007ca8:	4638      	mov	r0, r7
 8007caa:	f7fb ff93 	bl	8003bd4 <_printf_float>
 8007cae:	1c42      	adds	r2, r0, #1
 8007cb0:	4606      	mov	r6, r0
 8007cb2:	d1d6      	bne.n	8007c62 <_svfiprintf_r+0x176>
 8007cb4:	89ab      	ldrh	r3, [r5, #12]
 8007cb6:	065b      	lsls	r3, r3, #25
 8007cb8:	f53f af2c 	bmi.w	8007b14 <_svfiprintf_r+0x28>
 8007cbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cbe:	b01d      	add	sp, #116	; 0x74
 8007cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc4:	ab03      	add	r3, sp, #12
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	462a      	mov	r2, r5
 8007cca:	4b06      	ldr	r3, [pc, #24]	; (8007ce4 <_svfiprintf_r+0x1f8>)
 8007ccc:	a904      	add	r1, sp, #16
 8007cce:	4638      	mov	r0, r7
 8007cd0:	f7fc fa24 	bl	800411c <_printf_i>
 8007cd4:	e7eb      	b.n	8007cae <_svfiprintf_r+0x1c2>
 8007cd6:	bf00      	nop
 8007cd8:	08008f5c 	.word	0x08008f5c
 8007cdc:	08008f66 	.word	0x08008f66
 8007ce0:	08003bd5 	.word	0x08003bd5
 8007ce4:	08007a37 	.word	0x08007a37
 8007ce8:	08008f62 	.word	0x08008f62

08007cec <__sfputc_r>:
 8007cec:	6893      	ldr	r3, [r2, #8]
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	b410      	push	{r4}
 8007cf4:	6093      	str	r3, [r2, #8]
 8007cf6:	da08      	bge.n	8007d0a <__sfputc_r+0x1e>
 8007cf8:	6994      	ldr	r4, [r2, #24]
 8007cfa:	42a3      	cmp	r3, r4
 8007cfc:	db01      	blt.n	8007d02 <__sfputc_r+0x16>
 8007cfe:	290a      	cmp	r1, #10
 8007d00:	d103      	bne.n	8007d0a <__sfputc_r+0x1e>
 8007d02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d06:	f7fd bcc5 	b.w	8005694 <__swbuf_r>
 8007d0a:	6813      	ldr	r3, [r2, #0]
 8007d0c:	1c58      	adds	r0, r3, #1
 8007d0e:	6010      	str	r0, [r2, #0]
 8007d10:	7019      	strb	r1, [r3, #0]
 8007d12:	4608      	mov	r0, r1
 8007d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <__sfputs_r>:
 8007d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1c:	4606      	mov	r6, r0
 8007d1e:	460f      	mov	r7, r1
 8007d20:	4614      	mov	r4, r2
 8007d22:	18d5      	adds	r5, r2, r3
 8007d24:	42ac      	cmp	r4, r5
 8007d26:	d101      	bne.n	8007d2c <__sfputs_r+0x12>
 8007d28:	2000      	movs	r0, #0
 8007d2a:	e007      	b.n	8007d3c <__sfputs_r+0x22>
 8007d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d30:	463a      	mov	r2, r7
 8007d32:	4630      	mov	r0, r6
 8007d34:	f7ff ffda 	bl	8007cec <__sfputc_r>
 8007d38:	1c43      	adds	r3, r0, #1
 8007d3a:	d1f3      	bne.n	8007d24 <__sfputs_r+0xa>
 8007d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d40 <_vfiprintf_r>:
 8007d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d44:	460d      	mov	r5, r1
 8007d46:	b09d      	sub	sp, #116	; 0x74
 8007d48:	4614      	mov	r4, r2
 8007d4a:	4698      	mov	r8, r3
 8007d4c:	4606      	mov	r6, r0
 8007d4e:	b118      	cbz	r0, 8007d58 <_vfiprintf_r+0x18>
 8007d50:	6983      	ldr	r3, [r0, #24]
 8007d52:	b90b      	cbnz	r3, 8007d58 <_vfiprintf_r+0x18>
 8007d54:	f7fe fcf4 	bl	8006740 <__sinit>
 8007d58:	4b89      	ldr	r3, [pc, #548]	; (8007f80 <_vfiprintf_r+0x240>)
 8007d5a:	429d      	cmp	r5, r3
 8007d5c:	d11b      	bne.n	8007d96 <_vfiprintf_r+0x56>
 8007d5e:	6875      	ldr	r5, [r6, #4]
 8007d60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d62:	07d9      	lsls	r1, r3, #31
 8007d64:	d405      	bmi.n	8007d72 <_vfiprintf_r+0x32>
 8007d66:	89ab      	ldrh	r3, [r5, #12]
 8007d68:	059a      	lsls	r2, r3, #22
 8007d6a:	d402      	bmi.n	8007d72 <_vfiprintf_r+0x32>
 8007d6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d6e:	f7ff f8f8 	bl	8006f62 <__retarget_lock_acquire_recursive>
 8007d72:	89ab      	ldrh	r3, [r5, #12]
 8007d74:	071b      	lsls	r3, r3, #28
 8007d76:	d501      	bpl.n	8007d7c <_vfiprintf_r+0x3c>
 8007d78:	692b      	ldr	r3, [r5, #16]
 8007d7a:	b9eb      	cbnz	r3, 8007db8 <_vfiprintf_r+0x78>
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	4630      	mov	r0, r6
 8007d80:	f7fd fcda 	bl	8005738 <__swsetup_r>
 8007d84:	b1c0      	cbz	r0, 8007db8 <_vfiprintf_r+0x78>
 8007d86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d88:	07dc      	lsls	r4, r3, #31
 8007d8a:	d50e      	bpl.n	8007daa <_vfiprintf_r+0x6a>
 8007d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d90:	b01d      	add	sp, #116	; 0x74
 8007d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d96:	4b7b      	ldr	r3, [pc, #492]	; (8007f84 <_vfiprintf_r+0x244>)
 8007d98:	429d      	cmp	r5, r3
 8007d9a:	d101      	bne.n	8007da0 <_vfiprintf_r+0x60>
 8007d9c:	68b5      	ldr	r5, [r6, #8]
 8007d9e:	e7df      	b.n	8007d60 <_vfiprintf_r+0x20>
 8007da0:	4b79      	ldr	r3, [pc, #484]	; (8007f88 <_vfiprintf_r+0x248>)
 8007da2:	429d      	cmp	r5, r3
 8007da4:	bf08      	it	eq
 8007da6:	68f5      	ldreq	r5, [r6, #12]
 8007da8:	e7da      	b.n	8007d60 <_vfiprintf_r+0x20>
 8007daa:	89ab      	ldrh	r3, [r5, #12]
 8007dac:	0598      	lsls	r0, r3, #22
 8007dae:	d4ed      	bmi.n	8007d8c <_vfiprintf_r+0x4c>
 8007db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007db2:	f7ff f8d7 	bl	8006f64 <__retarget_lock_release_recursive>
 8007db6:	e7e9      	b.n	8007d8c <_vfiprintf_r+0x4c>
 8007db8:	2300      	movs	r3, #0
 8007dba:	9309      	str	r3, [sp, #36]	; 0x24
 8007dbc:	2320      	movs	r3, #32
 8007dbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dc6:	2330      	movs	r3, #48	; 0x30
 8007dc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f8c <_vfiprintf_r+0x24c>
 8007dcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dd0:	f04f 0901 	mov.w	r9, #1
 8007dd4:	4623      	mov	r3, r4
 8007dd6:	469a      	mov	sl, r3
 8007dd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ddc:	b10a      	cbz	r2, 8007de2 <_vfiprintf_r+0xa2>
 8007dde:	2a25      	cmp	r2, #37	; 0x25
 8007de0:	d1f9      	bne.n	8007dd6 <_vfiprintf_r+0x96>
 8007de2:	ebba 0b04 	subs.w	fp, sl, r4
 8007de6:	d00b      	beq.n	8007e00 <_vfiprintf_r+0xc0>
 8007de8:	465b      	mov	r3, fp
 8007dea:	4622      	mov	r2, r4
 8007dec:	4629      	mov	r1, r5
 8007dee:	4630      	mov	r0, r6
 8007df0:	f7ff ff93 	bl	8007d1a <__sfputs_r>
 8007df4:	3001      	adds	r0, #1
 8007df6:	f000 80aa 	beq.w	8007f4e <_vfiprintf_r+0x20e>
 8007dfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dfc:	445a      	add	r2, fp
 8007dfe:	9209      	str	r2, [sp, #36]	; 0x24
 8007e00:	f89a 3000 	ldrb.w	r3, [sl]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f000 80a2 	beq.w	8007f4e <_vfiprintf_r+0x20e>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e14:	f10a 0a01 	add.w	sl, sl, #1
 8007e18:	9304      	str	r3, [sp, #16]
 8007e1a:	9307      	str	r3, [sp, #28]
 8007e1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e20:	931a      	str	r3, [sp, #104]	; 0x68
 8007e22:	4654      	mov	r4, sl
 8007e24:	2205      	movs	r2, #5
 8007e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e2a:	4858      	ldr	r0, [pc, #352]	; (8007f8c <_vfiprintf_r+0x24c>)
 8007e2c:	f7f8 f9e0 	bl	80001f0 <memchr>
 8007e30:	9a04      	ldr	r2, [sp, #16]
 8007e32:	b9d8      	cbnz	r0, 8007e6c <_vfiprintf_r+0x12c>
 8007e34:	06d1      	lsls	r1, r2, #27
 8007e36:	bf44      	itt	mi
 8007e38:	2320      	movmi	r3, #32
 8007e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e3e:	0713      	lsls	r3, r2, #28
 8007e40:	bf44      	itt	mi
 8007e42:	232b      	movmi	r3, #43	; 0x2b
 8007e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e48:	f89a 3000 	ldrb.w	r3, [sl]
 8007e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8007e4e:	d015      	beq.n	8007e7c <_vfiprintf_r+0x13c>
 8007e50:	9a07      	ldr	r2, [sp, #28]
 8007e52:	4654      	mov	r4, sl
 8007e54:	2000      	movs	r0, #0
 8007e56:	f04f 0c0a 	mov.w	ip, #10
 8007e5a:	4621      	mov	r1, r4
 8007e5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e60:	3b30      	subs	r3, #48	; 0x30
 8007e62:	2b09      	cmp	r3, #9
 8007e64:	d94e      	bls.n	8007f04 <_vfiprintf_r+0x1c4>
 8007e66:	b1b0      	cbz	r0, 8007e96 <_vfiprintf_r+0x156>
 8007e68:	9207      	str	r2, [sp, #28]
 8007e6a:	e014      	b.n	8007e96 <_vfiprintf_r+0x156>
 8007e6c:	eba0 0308 	sub.w	r3, r0, r8
 8007e70:	fa09 f303 	lsl.w	r3, r9, r3
 8007e74:	4313      	orrs	r3, r2
 8007e76:	9304      	str	r3, [sp, #16]
 8007e78:	46a2      	mov	sl, r4
 8007e7a:	e7d2      	b.n	8007e22 <_vfiprintf_r+0xe2>
 8007e7c:	9b03      	ldr	r3, [sp, #12]
 8007e7e:	1d19      	adds	r1, r3, #4
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	9103      	str	r1, [sp, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	bfbb      	ittet	lt
 8007e88:	425b      	neglt	r3, r3
 8007e8a:	f042 0202 	orrlt.w	r2, r2, #2
 8007e8e:	9307      	strge	r3, [sp, #28]
 8007e90:	9307      	strlt	r3, [sp, #28]
 8007e92:	bfb8      	it	lt
 8007e94:	9204      	strlt	r2, [sp, #16]
 8007e96:	7823      	ldrb	r3, [r4, #0]
 8007e98:	2b2e      	cmp	r3, #46	; 0x2e
 8007e9a:	d10c      	bne.n	8007eb6 <_vfiprintf_r+0x176>
 8007e9c:	7863      	ldrb	r3, [r4, #1]
 8007e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8007ea0:	d135      	bne.n	8007f0e <_vfiprintf_r+0x1ce>
 8007ea2:	9b03      	ldr	r3, [sp, #12]
 8007ea4:	1d1a      	adds	r2, r3, #4
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	9203      	str	r2, [sp, #12]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	bfb8      	it	lt
 8007eae:	f04f 33ff 	movlt.w	r3, #4294967295
 8007eb2:	3402      	adds	r4, #2
 8007eb4:	9305      	str	r3, [sp, #20]
 8007eb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f9c <_vfiprintf_r+0x25c>
 8007eba:	7821      	ldrb	r1, [r4, #0]
 8007ebc:	2203      	movs	r2, #3
 8007ebe:	4650      	mov	r0, sl
 8007ec0:	f7f8 f996 	bl	80001f0 <memchr>
 8007ec4:	b140      	cbz	r0, 8007ed8 <_vfiprintf_r+0x198>
 8007ec6:	2340      	movs	r3, #64	; 0x40
 8007ec8:	eba0 000a 	sub.w	r0, r0, sl
 8007ecc:	fa03 f000 	lsl.w	r0, r3, r0
 8007ed0:	9b04      	ldr	r3, [sp, #16]
 8007ed2:	4303      	orrs	r3, r0
 8007ed4:	3401      	adds	r4, #1
 8007ed6:	9304      	str	r3, [sp, #16]
 8007ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007edc:	482c      	ldr	r0, [pc, #176]	; (8007f90 <_vfiprintf_r+0x250>)
 8007ede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ee2:	2206      	movs	r2, #6
 8007ee4:	f7f8 f984 	bl	80001f0 <memchr>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d03f      	beq.n	8007f6c <_vfiprintf_r+0x22c>
 8007eec:	4b29      	ldr	r3, [pc, #164]	; (8007f94 <_vfiprintf_r+0x254>)
 8007eee:	bb1b      	cbnz	r3, 8007f38 <_vfiprintf_r+0x1f8>
 8007ef0:	9b03      	ldr	r3, [sp, #12]
 8007ef2:	3307      	adds	r3, #7
 8007ef4:	f023 0307 	bic.w	r3, r3, #7
 8007ef8:	3308      	adds	r3, #8
 8007efa:	9303      	str	r3, [sp, #12]
 8007efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007efe:	443b      	add	r3, r7
 8007f00:	9309      	str	r3, [sp, #36]	; 0x24
 8007f02:	e767      	b.n	8007dd4 <_vfiprintf_r+0x94>
 8007f04:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f08:	460c      	mov	r4, r1
 8007f0a:	2001      	movs	r0, #1
 8007f0c:	e7a5      	b.n	8007e5a <_vfiprintf_r+0x11a>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	3401      	adds	r4, #1
 8007f12:	9305      	str	r3, [sp, #20]
 8007f14:	4619      	mov	r1, r3
 8007f16:	f04f 0c0a 	mov.w	ip, #10
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f20:	3a30      	subs	r2, #48	; 0x30
 8007f22:	2a09      	cmp	r2, #9
 8007f24:	d903      	bls.n	8007f2e <_vfiprintf_r+0x1ee>
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0c5      	beq.n	8007eb6 <_vfiprintf_r+0x176>
 8007f2a:	9105      	str	r1, [sp, #20]
 8007f2c:	e7c3      	b.n	8007eb6 <_vfiprintf_r+0x176>
 8007f2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f32:	4604      	mov	r4, r0
 8007f34:	2301      	movs	r3, #1
 8007f36:	e7f0      	b.n	8007f1a <_vfiprintf_r+0x1da>
 8007f38:	ab03      	add	r3, sp, #12
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	462a      	mov	r2, r5
 8007f3e:	4b16      	ldr	r3, [pc, #88]	; (8007f98 <_vfiprintf_r+0x258>)
 8007f40:	a904      	add	r1, sp, #16
 8007f42:	4630      	mov	r0, r6
 8007f44:	f7fb fe46 	bl	8003bd4 <_printf_float>
 8007f48:	4607      	mov	r7, r0
 8007f4a:	1c78      	adds	r0, r7, #1
 8007f4c:	d1d6      	bne.n	8007efc <_vfiprintf_r+0x1bc>
 8007f4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f50:	07d9      	lsls	r1, r3, #31
 8007f52:	d405      	bmi.n	8007f60 <_vfiprintf_r+0x220>
 8007f54:	89ab      	ldrh	r3, [r5, #12]
 8007f56:	059a      	lsls	r2, r3, #22
 8007f58:	d402      	bmi.n	8007f60 <_vfiprintf_r+0x220>
 8007f5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f5c:	f7ff f802 	bl	8006f64 <__retarget_lock_release_recursive>
 8007f60:	89ab      	ldrh	r3, [r5, #12]
 8007f62:	065b      	lsls	r3, r3, #25
 8007f64:	f53f af12 	bmi.w	8007d8c <_vfiprintf_r+0x4c>
 8007f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f6a:	e711      	b.n	8007d90 <_vfiprintf_r+0x50>
 8007f6c:	ab03      	add	r3, sp, #12
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	462a      	mov	r2, r5
 8007f72:	4b09      	ldr	r3, [pc, #36]	; (8007f98 <_vfiprintf_r+0x258>)
 8007f74:	a904      	add	r1, sp, #16
 8007f76:	4630      	mov	r0, r6
 8007f78:	f7fc f8d0 	bl	800411c <_printf_i>
 8007f7c:	e7e4      	b.n	8007f48 <_vfiprintf_r+0x208>
 8007f7e:	bf00      	nop
 8007f80:	08008d44 	.word	0x08008d44
 8007f84:	08008d64 	.word	0x08008d64
 8007f88:	08008d24 	.word	0x08008d24
 8007f8c:	08008f5c 	.word	0x08008f5c
 8007f90:	08008f66 	.word	0x08008f66
 8007f94:	08003bd5 	.word	0x08003bd5
 8007f98:	08007d1b 	.word	0x08007d1b
 8007f9c:	08008f62 	.word	0x08008f62

08007fa0 <nan>:
 8007fa0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007fa8 <nan+0x8>
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	00000000 	.word	0x00000000
 8007fac:	7ff80000 	.word	0x7ff80000

08007fb0 <__sread>:
 8007fb0:	b510      	push	{r4, lr}
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb8:	f000 f92e 	bl	8008218 <_read_r>
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	bfab      	itete	ge
 8007fc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fc2:	89a3      	ldrhlt	r3, [r4, #12]
 8007fc4:	181b      	addge	r3, r3, r0
 8007fc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007fca:	bfac      	ite	ge
 8007fcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007fce:	81a3      	strhlt	r3, [r4, #12]
 8007fd0:	bd10      	pop	{r4, pc}

08007fd2 <__swrite>:
 8007fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd6:	461f      	mov	r7, r3
 8007fd8:	898b      	ldrh	r3, [r1, #12]
 8007fda:	05db      	lsls	r3, r3, #23
 8007fdc:	4605      	mov	r5, r0
 8007fde:	460c      	mov	r4, r1
 8007fe0:	4616      	mov	r6, r2
 8007fe2:	d505      	bpl.n	8007ff0 <__swrite+0x1e>
 8007fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe8:	2302      	movs	r3, #2
 8007fea:	2200      	movs	r2, #0
 8007fec:	f000 f8b8 	bl	8008160 <_lseek_r>
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ff6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ffa:	81a3      	strh	r3, [r4, #12]
 8007ffc:	4632      	mov	r2, r6
 8007ffe:	463b      	mov	r3, r7
 8008000:	4628      	mov	r0, r5
 8008002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008006:	f000 b837 	b.w	8008078 <_write_r>

0800800a <__sseek>:
 800800a:	b510      	push	{r4, lr}
 800800c:	460c      	mov	r4, r1
 800800e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008012:	f000 f8a5 	bl	8008160 <_lseek_r>
 8008016:	1c43      	adds	r3, r0, #1
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	bf15      	itete	ne
 800801c:	6560      	strne	r0, [r4, #84]	; 0x54
 800801e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008022:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008026:	81a3      	strheq	r3, [r4, #12]
 8008028:	bf18      	it	ne
 800802a:	81a3      	strhne	r3, [r4, #12]
 800802c:	bd10      	pop	{r4, pc}

0800802e <__sclose>:
 800802e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008032:	f000 b851 	b.w	80080d8 <_close_r>

08008036 <strncmp>:
 8008036:	b510      	push	{r4, lr}
 8008038:	b17a      	cbz	r2, 800805a <strncmp+0x24>
 800803a:	4603      	mov	r3, r0
 800803c:	3901      	subs	r1, #1
 800803e:	1884      	adds	r4, r0, r2
 8008040:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008044:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008048:	4290      	cmp	r0, r2
 800804a:	d101      	bne.n	8008050 <strncmp+0x1a>
 800804c:	42a3      	cmp	r3, r4
 800804e:	d101      	bne.n	8008054 <strncmp+0x1e>
 8008050:	1a80      	subs	r0, r0, r2
 8008052:	bd10      	pop	{r4, pc}
 8008054:	2800      	cmp	r0, #0
 8008056:	d1f3      	bne.n	8008040 <strncmp+0xa>
 8008058:	e7fa      	b.n	8008050 <strncmp+0x1a>
 800805a:	4610      	mov	r0, r2
 800805c:	e7f9      	b.n	8008052 <strncmp+0x1c>

0800805e <__ascii_wctomb>:
 800805e:	b149      	cbz	r1, 8008074 <__ascii_wctomb+0x16>
 8008060:	2aff      	cmp	r2, #255	; 0xff
 8008062:	bf85      	ittet	hi
 8008064:	238a      	movhi	r3, #138	; 0x8a
 8008066:	6003      	strhi	r3, [r0, #0]
 8008068:	700a      	strbls	r2, [r1, #0]
 800806a:	f04f 30ff 	movhi.w	r0, #4294967295
 800806e:	bf98      	it	ls
 8008070:	2001      	movls	r0, #1
 8008072:	4770      	bx	lr
 8008074:	4608      	mov	r0, r1
 8008076:	4770      	bx	lr

08008078 <_write_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	4d07      	ldr	r5, [pc, #28]	; (8008098 <_write_r+0x20>)
 800807c:	4604      	mov	r4, r0
 800807e:	4608      	mov	r0, r1
 8008080:	4611      	mov	r1, r2
 8008082:	2200      	movs	r2, #0
 8008084:	602a      	str	r2, [r5, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	f7fa fb2a 	bl	80026e0 <_write>
 800808c:	1c43      	adds	r3, r0, #1
 800808e:	d102      	bne.n	8008096 <_write_r+0x1e>
 8008090:	682b      	ldr	r3, [r5, #0]
 8008092:	b103      	cbz	r3, 8008096 <_write_r+0x1e>
 8008094:	6023      	str	r3, [r4, #0]
 8008096:	bd38      	pop	{r3, r4, r5, pc}
 8008098:	20000cd0 	.word	0x20000cd0

0800809c <__assert_func>:
 800809c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800809e:	4614      	mov	r4, r2
 80080a0:	461a      	mov	r2, r3
 80080a2:	4b09      	ldr	r3, [pc, #36]	; (80080c8 <__assert_func+0x2c>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4605      	mov	r5, r0
 80080a8:	68d8      	ldr	r0, [r3, #12]
 80080aa:	b14c      	cbz	r4, 80080c0 <__assert_func+0x24>
 80080ac:	4b07      	ldr	r3, [pc, #28]	; (80080cc <__assert_func+0x30>)
 80080ae:	9100      	str	r1, [sp, #0]
 80080b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080b4:	4906      	ldr	r1, [pc, #24]	; (80080d0 <__assert_func+0x34>)
 80080b6:	462b      	mov	r3, r5
 80080b8:	f000 f81e 	bl	80080f8 <fiprintf>
 80080bc:	f000 f8be 	bl	800823c <abort>
 80080c0:	4b04      	ldr	r3, [pc, #16]	; (80080d4 <__assert_func+0x38>)
 80080c2:	461c      	mov	r4, r3
 80080c4:	e7f3      	b.n	80080ae <__assert_func+0x12>
 80080c6:	bf00      	nop
 80080c8:	20000014 	.word	0x20000014
 80080cc:	08008f6d 	.word	0x08008f6d
 80080d0:	08008f7a 	.word	0x08008f7a
 80080d4:	08008fa8 	.word	0x08008fa8

080080d8 <_close_r>:
 80080d8:	b538      	push	{r3, r4, r5, lr}
 80080da:	4d06      	ldr	r5, [pc, #24]	; (80080f4 <_close_r+0x1c>)
 80080dc:	2300      	movs	r3, #0
 80080de:	4604      	mov	r4, r0
 80080e0:	4608      	mov	r0, r1
 80080e2:	602b      	str	r3, [r5, #0]
 80080e4:	f7fa fb18 	bl	8002718 <_close>
 80080e8:	1c43      	adds	r3, r0, #1
 80080ea:	d102      	bne.n	80080f2 <_close_r+0x1a>
 80080ec:	682b      	ldr	r3, [r5, #0]
 80080ee:	b103      	cbz	r3, 80080f2 <_close_r+0x1a>
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	bd38      	pop	{r3, r4, r5, pc}
 80080f4:	20000cd0 	.word	0x20000cd0

080080f8 <fiprintf>:
 80080f8:	b40e      	push	{r1, r2, r3}
 80080fa:	b503      	push	{r0, r1, lr}
 80080fc:	4601      	mov	r1, r0
 80080fe:	ab03      	add	r3, sp, #12
 8008100:	4805      	ldr	r0, [pc, #20]	; (8008118 <fiprintf+0x20>)
 8008102:	f853 2b04 	ldr.w	r2, [r3], #4
 8008106:	6800      	ldr	r0, [r0, #0]
 8008108:	9301      	str	r3, [sp, #4]
 800810a:	f7ff fe19 	bl	8007d40 <_vfiprintf_r>
 800810e:	b002      	add	sp, #8
 8008110:	f85d eb04 	ldr.w	lr, [sp], #4
 8008114:	b003      	add	sp, #12
 8008116:	4770      	bx	lr
 8008118:	20000014 	.word	0x20000014

0800811c <_fstat_r>:
 800811c:	b538      	push	{r3, r4, r5, lr}
 800811e:	4d07      	ldr	r5, [pc, #28]	; (800813c <_fstat_r+0x20>)
 8008120:	2300      	movs	r3, #0
 8008122:	4604      	mov	r4, r0
 8008124:	4608      	mov	r0, r1
 8008126:	4611      	mov	r1, r2
 8008128:	602b      	str	r3, [r5, #0]
 800812a:	f7fa fb01 	bl	8002730 <_fstat>
 800812e:	1c43      	adds	r3, r0, #1
 8008130:	d102      	bne.n	8008138 <_fstat_r+0x1c>
 8008132:	682b      	ldr	r3, [r5, #0]
 8008134:	b103      	cbz	r3, 8008138 <_fstat_r+0x1c>
 8008136:	6023      	str	r3, [r4, #0]
 8008138:	bd38      	pop	{r3, r4, r5, pc}
 800813a:	bf00      	nop
 800813c:	20000cd0 	.word	0x20000cd0

08008140 <_isatty_r>:
 8008140:	b538      	push	{r3, r4, r5, lr}
 8008142:	4d06      	ldr	r5, [pc, #24]	; (800815c <_isatty_r+0x1c>)
 8008144:	2300      	movs	r3, #0
 8008146:	4604      	mov	r4, r0
 8008148:	4608      	mov	r0, r1
 800814a:	602b      	str	r3, [r5, #0]
 800814c:	f7fa fb00 	bl	8002750 <_isatty>
 8008150:	1c43      	adds	r3, r0, #1
 8008152:	d102      	bne.n	800815a <_isatty_r+0x1a>
 8008154:	682b      	ldr	r3, [r5, #0]
 8008156:	b103      	cbz	r3, 800815a <_isatty_r+0x1a>
 8008158:	6023      	str	r3, [r4, #0]
 800815a:	bd38      	pop	{r3, r4, r5, pc}
 800815c:	20000cd0 	.word	0x20000cd0

08008160 <_lseek_r>:
 8008160:	b538      	push	{r3, r4, r5, lr}
 8008162:	4d07      	ldr	r5, [pc, #28]	; (8008180 <_lseek_r+0x20>)
 8008164:	4604      	mov	r4, r0
 8008166:	4608      	mov	r0, r1
 8008168:	4611      	mov	r1, r2
 800816a:	2200      	movs	r2, #0
 800816c:	602a      	str	r2, [r5, #0]
 800816e:	461a      	mov	r2, r3
 8008170:	f7fa faf9 	bl	8002766 <_lseek>
 8008174:	1c43      	adds	r3, r0, #1
 8008176:	d102      	bne.n	800817e <_lseek_r+0x1e>
 8008178:	682b      	ldr	r3, [r5, #0]
 800817a:	b103      	cbz	r3, 800817e <_lseek_r+0x1e>
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	bd38      	pop	{r3, r4, r5, pc}
 8008180:	20000cd0 	.word	0x20000cd0

08008184 <memmove>:
 8008184:	4288      	cmp	r0, r1
 8008186:	b510      	push	{r4, lr}
 8008188:	eb01 0402 	add.w	r4, r1, r2
 800818c:	d902      	bls.n	8008194 <memmove+0x10>
 800818e:	4284      	cmp	r4, r0
 8008190:	4623      	mov	r3, r4
 8008192:	d807      	bhi.n	80081a4 <memmove+0x20>
 8008194:	1e43      	subs	r3, r0, #1
 8008196:	42a1      	cmp	r1, r4
 8008198:	d008      	beq.n	80081ac <memmove+0x28>
 800819a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800819e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081a2:	e7f8      	b.n	8008196 <memmove+0x12>
 80081a4:	4402      	add	r2, r0
 80081a6:	4601      	mov	r1, r0
 80081a8:	428a      	cmp	r2, r1
 80081aa:	d100      	bne.n	80081ae <memmove+0x2a>
 80081ac:	bd10      	pop	{r4, pc}
 80081ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081b6:	e7f7      	b.n	80081a8 <memmove+0x24>

080081b8 <_realloc_r>:
 80081b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081bc:	4680      	mov	r8, r0
 80081be:	4614      	mov	r4, r2
 80081c0:	460e      	mov	r6, r1
 80081c2:	b921      	cbnz	r1, 80081ce <_realloc_r+0x16>
 80081c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081c8:	4611      	mov	r1, r2
 80081ca:	f7fb bbef 	b.w	80039ac <_malloc_r>
 80081ce:	b92a      	cbnz	r2, 80081dc <_realloc_r+0x24>
 80081d0:	f7fb fb80 	bl	80038d4 <_free_r>
 80081d4:	4625      	mov	r5, r4
 80081d6:	4628      	mov	r0, r5
 80081d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081dc:	f000 f835 	bl	800824a <_malloc_usable_size_r>
 80081e0:	4284      	cmp	r4, r0
 80081e2:	4607      	mov	r7, r0
 80081e4:	d802      	bhi.n	80081ec <_realloc_r+0x34>
 80081e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80081ea:	d812      	bhi.n	8008212 <_realloc_r+0x5a>
 80081ec:	4621      	mov	r1, r4
 80081ee:	4640      	mov	r0, r8
 80081f0:	f7fb fbdc 	bl	80039ac <_malloc_r>
 80081f4:	4605      	mov	r5, r0
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d0ed      	beq.n	80081d6 <_realloc_r+0x1e>
 80081fa:	42bc      	cmp	r4, r7
 80081fc:	4622      	mov	r2, r4
 80081fe:	4631      	mov	r1, r6
 8008200:	bf28      	it	cs
 8008202:	463a      	movcs	r2, r7
 8008204:	f7fe ff26 	bl	8007054 <memcpy>
 8008208:	4631      	mov	r1, r6
 800820a:	4640      	mov	r0, r8
 800820c:	f7fb fb62 	bl	80038d4 <_free_r>
 8008210:	e7e1      	b.n	80081d6 <_realloc_r+0x1e>
 8008212:	4635      	mov	r5, r6
 8008214:	e7df      	b.n	80081d6 <_realloc_r+0x1e>
	...

08008218 <_read_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	4d07      	ldr	r5, [pc, #28]	; (8008238 <_read_r+0x20>)
 800821c:	4604      	mov	r4, r0
 800821e:	4608      	mov	r0, r1
 8008220:	4611      	mov	r1, r2
 8008222:	2200      	movs	r2, #0
 8008224:	602a      	str	r2, [r5, #0]
 8008226:	461a      	mov	r2, r3
 8008228:	f7fa fa3d 	bl	80026a6 <_read>
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	d102      	bne.n	8008236 <_read_r+0x1e>
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	b103      	cbz	r3, 8008236 <_read_r+0x1e>
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	20000cd0 	.word	0x20000cd0

0800823c <abort>:
 800823c:	b508      	push	{r3, lr}
 800823e:	2006      	movs	r0, #6
 8008240:	f000 f834 	bl	80082ac <raise>
 8008244:	2001      	movs	r0, #1
 8008246:	f7fa fa24 	bl	8002692 <_exit>

0800824a <_malloc_usable_size_r>:
 800824a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800824e:	1f18      	subs	r0, r3, #4
 8008250:	2b00      	cmp	r3, #0
 8008252:	bfbc      	itt	lt
 8008254:	580b      	ldrlt	r3, [r1, r0]
 8008256:	18c0      	addlt	r0, r0, r3
 8008258:	4770      	bx	lr

0800825a <_raise_r>:
 800825a:	291f      	cmp	r1, #31
 800825c:	b538      	push	{r3, r4, r5, lr}
 800825e:	4604      	mov	r4, r0
 8008260:	460d      	mov	r5, r1
 8008262:	d904      	bls.n	800826e <_raise_r+0x14>
 8008264:	2316      	movs	r3, #22
 8008266:	6003      	str	r3, [r0, #0]
 8008268:	f04f 30ff 	mov.w	r0, #4294967295
 800826c:	bd38      	pop	{r3, r4, r5, pc}
 800826e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008270:	b112      	cbz	r2, 8008278 <_raise_r+0x1e>
 8008272:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008276:	b94b      	cbnz	r3, 800828c <_raise_r+0x32>
 8008278:	4620      	mov	r0, r4
 800827a:	f000 f831 	bl	80082e0 <_getpid_r>
 800827e:	462a      	mov	r2, r5
 8008280:	4601      	mov	r1, r0
 8008282:	4620      	mov	r0, r4
 8008284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008288:	f000 b818 	b.w	80082bc <_kill_r>
 800828c:	2b01      	cmp	r3, #1
 800828e:	d00a      	beq.n	80082a6 <_raise_r+0x4c>
 8008290:	1c59      	adds	r1, r3, #1
 8008292:	d103      	bne.n	800829c <_raise_r+0x42>
 8008294:	2316      	movs	r3, #22
 8008296:	6003      	str	r3, [r0, #0]
 8008298:	2001      	movs	r0, #1
 800829a:	e7e7      	b.n	800826c <_raise_r+0x12>
 800829c:	2400      	movs	r4, #0
 800829e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80082a2:	4628      	mov	r0, r5
 80082a4:	4798      	blx	r3
 80082a6:	2000      	movs	r0, #0
 80082a8:	e7e0      	b.n	800826c <_raise_r+0x12>
	...

080082ac <raise>:
 80082ac:	4b02      	ldr	r3, [pc, #8]	; (80082b8 <raise+0xc>)
 80082ae:	4601      	mov	r1, r0
 80082b0:	6818      	ldr	r0, [r3, #0]
 80082b2:	f7ff bfd2 	b.w	800825a <_raise_r>
 80082b6:	bf00      	nop
 80082b8:	20000014 	.word	0x20000014

080082bc <_kill_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4d07      	ldr	r5, [pc, #28]	; (80082dc <_kill_r+0x20>)
 80082c0:	2300      	movs	r3, #0
 80082c2:	4604      	mov	r4, r0
 80082c4:	4608      	mov	r0, r1
 80082c6:	4611      	mov	r1, r2
 80082c8:	602b      	str	r3, [r5, #0]
 80082ca:	f7fa f9d2 	bl	8002672 <_kill>
 80082ce:	1c43      	adds	r3, r0, #1
 80082d0:	d102      	bne.n	80082d8 <_kill_r+0x1c>
 80082d2:	682b      	ldr	r3, [r5, #0]
 80082d4:	b103      	cbz	r3, 80082d8 <_kill_r+0x1c>
 80082d6:	6023      	str	r3, [r4, #0]
 80082d8:	bd38      	pop	{r3, r4, r5, pc}
 80082da:	bf00      	nop
 80082dc:	20000cd0 	.word	0x20000cd0

080082e0 <_getpid_r>:
 80082e0:	f7fa b9bf 	b.w	8002662 <_getpid>

080082e4 <round>:
 80082e4:	ec51 0b10 	vmov	r0, r1, d0
 80082e8:	b570      	push	{r4, r5, r6, lr}
 80082ea:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80082ee:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80082f2:	2c13      	cmp	r4, #19
 80082f4:	ee10 2a10 	vmov	r2, s0
 80082f8:	460b      	mov	r3, r1
 80082fa:	dc19      	bgt.n	8008330 <round+0x4c>
 80082fc:	2c00      	cmp	r4, #0
 80082fe:	da09      	bge.n	8008314 <round+0x30>
 8008300:	3401      	adds	r4, #1
 8008302:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8008306:	d103      	bne.n	8008310 <round+0x2c>
 8008308:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800830c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008310:	2200      	movs	r2, #0
 8008312:	e028      	b.n	8008366 <round+0x82>
 8008314:	4d15      	ldr	r5, [pc, #84]	; (800836c <round+0x88>)
 8008316:	4125      	asrs	r5, r4
 8008318:	ea01 0605 	and.w	r6, r1, r5
 800831c:	4332      	orrs	r2, r6
 800831e:	d00e      	beq.n	800833e <round+0x5a>
 8008320:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008324:	fa42 f404 	asr.w	r4, r2, r4
 8008328:	4423      	add	r3, r4
 800832a:	ea23 0305 	bic.w	r3, r3, r5
 800832e:	e7ef      	b.n	8008310 <round+0x2c>
 8008330:	2c33      	cmp	r4, #51	; 0x33
 8008332:	dd07      	ble.n	8008344 <round+0x60>
 8008334:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8008338:	d101      	bne.n	800833e <round+0x5a>
 800833a:	f7f7 ffaf 	bl	800029c <__adddf3>
 800833e:	ec41 0b10 	vmov	d0, r0, r1
 8008342:	bd70      	pop	{r4, r5, r6, pc}
 8008344:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8008348:	f04f 35ff 	mov.w	r5, #4294967295
 800834c:	40f5      	lsrs	r5, r6
 800834e:	4228      	tst	r0, r5
 8008350:	d0f5      	beq.n	800833e <round+0x5a>
 8008352:	2101      	movs	r1, #1
 8008354:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8008358:	fa01 f404 	lsl.w	r4, r1, r4
 800835c:	1912      	adds	r2, r2, r4
 800835e:	bf28      	it	cs
 8008360:	185b      	addcs	r3, r3, r1
 8008362:	ea22 0205 	bic.w	r2, r2, r5
 8008366:	4619      	mov	r1, r3
 8008368:	4610      	mov	r0, r2
 800836a:	e7e8      	b.n	800833e <round+0x5a>
 800836c:	000fffff 	.word	0x000fffff

08008370 <acos>:
 8008370:	b538      	push	{r3, r4, r5, lr}
 8008372:	ed2d 8b02 	vpush	{d8}
 8008376:	ec55 4b10 	vmov	r4, r5, d0
 800837a:	f000 f84d 	bl	8008418 <__ieee754_acos>
 800837e:	4622      	mov	r2, r4
 8008380:	462b      	mov	r3, r5
 8008382:	4620      	mov	r0, r4
 8008384:	4629      	mov	r1, r5
 8008386:	eeb0 8a40 	vmov.f32	s16, s0
 800838a:	eef0 8a60 	vmov.f32	s17, s1
 800838e:	f7f8 fbd5 	bl	8000b3c <__aeabi_dcmpun>
 8008392:	b9a8      	cbnz	r0, 80083c0 <acos+0x50>
 8008394:	ec45 4b10 	vmov	d0, r4, r5
 8008398:	f000 fb53 	bl	8008a42 <fabs>
 800839c:	4b0c      	ldr	r3, [pc, #48]	; (80083d0 <acos+0x60>)
 800839e:	ec51 0b10 	vmov	r0, r1, d0
 80083a2:	2200      	movs	r2, #0
 80083a4:	f7f8 fbc0 	bl	8000b28 <__aeabi_dcmpgt>
 80083a8:	b150      	cbz	r0, 80083c0 <acos+0x50>
 80083aa:	f7fb fa3d 	bl	8003828 <__errno>
 80083ae:	ecbd 8b02 	vpop	{d8}
 80083b2:	2321      	movs	r3, #33	; 0x21
 80083b4:	6003      	str	r3, [r0, #0]
 80083b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083ba:	4806      	ldr	r0, [pc, #24]	; (80083d4 <acos+0x64>)
 80083bc:	f7ff bdf0 	b.w	8007fa0 <nan>
 80083c0:	eeb0 0a48 	vmov.f32	s0, s16
 80083c4:	eef0 0a68 	vmov.f32	s1, s17
 80083c8:	ecbd 8b02 	vpop	{d8}
 80083cc:	bd38      	pop	{r3, r4, r5, pc}
 80083ce:	bf00      	nop
 80083d0:	3ff00000 	.word	0x3ff00000
 80083d4:	08008fa8 	.word	0x08008fa8

080083d8 <sqrtf>:
 80083d8:	b508      	push	{r3, lr}
 80083da:	ed2d 8b02 	vpush	{d8}
 80083de:	eeb0 8a40 	vmov.f32	s16, s0
 80083e2:	f000 fb2b 	bl	8008a3c <__ieee754_sqrtf>
 80083e6:	eeb4 8a48 	vcmp.f32	s16, s16
 80083ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ee:	d60c      	bvs.n	800840a <sqrtf+0x32>
 80083f0:	eddf 8a07 	vldr	s17, [pc, #28]	; 8008410 <sqrtf+0x38>
 80083f4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80083f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083fc:	d505      	bpl.n	800840a <sqrtf+0x32>
 80083fe:	f7fb fa13 	bl	8003828 <__errno>
 8008402:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008406:	2321      	movs	r3, #33	; 0x21
 8008408:	6003      	str	r3, [r0, #0]
 800840a:	ecbd 8b02 	vpop	{d8}
 800840e:	bd08      	pop	{r3, pc}
	...

08008418 <__ieee754_acos>:
 8008418:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841c:	ec55 4b10 	vmov	r4, r5, d0
 8008420:	49b7      	ldr	r1, [pc, #732]	; (8008700 <__ieee754_acos+0x2e8>)
 8008422:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008426:	428b      	cmp	r3, r1
 8008428:	dd1b      	ble.n	8008462 <__ieee754_acos+0x4a>
 800842a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800842e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008432:	4323      	orrs	r3, r4
 8008434:	d106      	bne.n	8008444 <__ieee754_acos+0x2c>
 8008436:	2d00      	cmp	r5, #0
 8008438:	f300 8211 	bgt.w	800885e <__ieee754_acos+0x446>
 800843c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8008698 <__ieee754_acos+0x280>
 8008440:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008444:	ee10 2a10 	vmov	r2, s0
 8008448:	462b      	mov	r3, r5
 800844a:	ee10 0a10 	vmov	r0, s0
 800844e:	4629      	mov	r1, r5
 8008450:	f7f7 ff22 	bl	8000298 <__aeabi_dsub>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	f7f8 fa00 	bl	800085c <__aeabi_ddiv>
 800845c:	ec41 0b10 	vmov	d0, r0, r1
 8008460:	e7ee      	b.n	8008440 <__ieee754_acos+0x28>
 8008462:	49a8      	ldr	r1, [pc, #672]	; (8008704 <__ieee754_acos+0x2ec>)
 8008464:	428b      	cmp	r3, r1
 8008466:	f300 8087 	bgt.w	8008578 <__ieee754_acos+0x160>
 800846a:	4aa7      	ldr	r2, [pc, #668]	; (8008708 <__ieee754_acos+0x2f0>)
 800846c:	4293      	cmp	r3, r2
 800846e:	f340 81f9 	ble.w	8008864 <__ieee754_acos+0x44c>
 8008472:	ee10 2a10 	vmov	r2, s0
 8008476:	ee10 0a10 	vmov	r0, s0
 800847a:	462b      	mov	r3, r5
 800847c:	4629      	mov	r1, r5
 800847e:	f7f8 f8c3 	bl	8000608 <__aeabi_dmul>
 8008482:	a387      	add	r3, pc, #540	; (adr r3, 80086a0 <__ieee754_acos+0x288>)
 8008484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008488:	4606      	mov	r6, r0
 800848a:	460f      	mov	r7, r1
 800848c:	f7f8 f8bc 	bl	8000608 <__aeabi_dmul>
 8008490:	a385      	add	r3, pc, #532	; (adr r3, 80086a8 <__ieee754_acos+0x290>)
 8008492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008496:	f7f7 ff01 	bl	800029c <__adddf3>
 800849a:	4632      	mov	r2, r6
 800849c:	463b      	mov	r3, r7
 800849e:	f7f8 f8b3 	bl	8000608 <__aeabi_dmul>
 80084a2:	a383      	add	r3, pc, #524	; (adr r3, 80086b0 <__ieee754_acos+0x298>)
 80084a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a8:	f7f7 fef6 	bl	8000298 <__aeabi_dsub>
 80084ac:	4632      	mov	r2, r6
 80084ae:	463b      	mov	r3, r7
 80084b0:	f7f8 f8aa 	bl	8000608 <__aeabi_dmul>
 80084b4:	a380      	add	r3, pc, #512	; (adr r3, 80086b8 <__ieee754_acos+0x2a0>)
 80084b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ba:	f7f7 feef 	bl	800029c <__adddf3>
 80084be:	4632      	mov	r2, r6
 80084c0:	463b      	mov	r3, r7
 80084c2:	f7f8 f8a1 	bl	8000608 <__aeabi_dmul>
 80084c6:	a37e      	add	r3, pc, #504	; (adr r3, 80086c0 <__ieee754_acos+0x2a8>)
 80084c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084cc:	f7f7 fee4 	bl	8000298 <__aeabi_dsub>
 80084d0:	4632      	mov	r2, r6
 80084d2:	463b      	mov	r3, r7
 80084d4:	f7f8 f898 	bl	8000608 <__aeabi_dmul>
 80084d8:	a37b      	add	r3, pc, #492	; (adr r3, 80086c8 <__ieee754_acos+0x2b0>)
 80084da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084de:	f7f7 fedd 	bl	800029c <__adddf3>
 80084e2:	4632      	mov	r2, r6
 80084e4:	463b      	mov	r3, r7
 80084e6:	f7f8 f88f 	bl	8000608 <__aeabi_dmul>
 80084ea:	a379      	add	r3, pc, #484	; (adr r3, 80086d0 <__ieee754_acos+0x2b8>)
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	4680      	mov	r8, r0
 80084f2:	4689      	mov	r9, r1
 80084f4:	4630      	mov	r0, r6
 80084f6:	4639      	mov	r1, r7
 80084f8:	f7f8 f886 	bl	8000608 <__aeabi_dmul>
 80084fc:	a376      	add	r3, pc, #472	; (adr r3, 80086d8 <__ieee754_acos+0x2c0>)
 80084fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008502:	f7f7 fec9 	bl	8000298 <__aeabi_dsub>
 8008506:	4632      	mov	r2, r6
 8008508:	463b      	mov	r3, r7
 800850a:	f7f8 f87d 	bl	8000608 <__aeabi_dmul>
 800850e:	a374      	add	r3, pc, #464	; (adr r3, 80086e0 <__ieee754_acos+0x2c8>)
 8008510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008514:	f7f7 fec2 	bl	800029c <__adddf3>
 8008518:	4632      	mov	r2, r6
 800851a:	463b      	mov	r3, r7
 800851c:	f7f8 f874 	bl	8000608 <__aeabi_dmul>
 8008520:	a371      	add	r3, pc, #452	; (adr r3, 80086e8 <__ieee754_acos+0x2d0>)
 8008522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008526:	f7f7 feb7 	bl	8000298 <__aeabi_dsub>
 800852a:	4632      	mov	r2, r6
 800852c:	463b      	mov	r3, r7
 800852e:	f7f8 f86b 	bl	8000608 <__aeabi_dmul>
 8008532:	4b76      	ldr	r3, [pc, #472]	; (800870c <__ieee754_acos+0x2f4>)
 8008534:	2200      	movs	r2, #0
 8008536:	f7f7 feb1 	bl	800029c <__adddf3>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	4640      	mov	r0, r8
 8008540:	4649      	mov	r1, r9
 8008542:	f7f8 f98b 	bl	800085c <__aeabi_ddiv>
 8008546:	4622      	mov	r2, r4
 8008548:	462b      	mov	r3, r5
 800854a:	f7f8 f85d 	bl	8000608 <__aeabi_dmul>
 800854e:	4602      	mov	r2, r0
 8008550:	460b      	mov	r3, r1
 8008552:	a167      	add	r1, pc, #412	; (adr r1, 80086f0 <__ieee754_acos+0x2d8>)
 8008554:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008558:	f7f7 fe9e 	bl	8000298 <__aeabi_dsub>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	4620      	mov	r0, r4
 8008562:	4629      	mov	r1, r5
 8008564:	f7f7 fe98 	bl	8000298 <__aeabi_dsub>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	a162      	add	r1, pc, #392	; (adr r1, 80086f8 <__ieee754_acos+0x2e0>)
 800856e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008572:	f7f7 fe91 	bl	8000298 <__aeabi_dsub>
 8008576:	e771      	b.n	800845c <__ieee754_acos+0x44>
 8008578:	2d00      	cmp	r5, #0
 800857a:	f280 80cb 	bge.w	8008714 <__ieee754_acos+0x2fc>
 800857e:	ee10 0a10 	vmov	r0, s0
 8008582:	4b62      	ldr	r3, [pc, #392]	; (800870c <__ieee754_acos+0x2f4>)
 8008584:	2200      	movs	r2, #0
 8008586:	4629      	mov	r1, r5
 8008588:	f7f7 fe88 	bl	800029c <__adddf3>
 800858c:	4b60      	ldr	r3, [pc, #384]	; (8008710 <__ieee754_acos+0x2f8>)
 800858e:	2200      	movs	r2, #0
 8008590:	f7f8 f83a 	bl	8000608 <__aeabi_dmul>
 8008594:	a342      	add	r3, pc, #264	; (adr r3, 80086a0 <__ieee754_acos+0x288>)
 8008596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859a:	4604      	mov	r4, r0
 800859c:	460d      	mov	r5, r1
 800859e:	f7f8 f833 	bl	8000608 <__aeabi_dmul>
 80085a2:	a341      	add	r3, pc, #260	; (adr r3, 80086a8 <__ieee754_acos+0x290>)
 80085a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a8:	f7f7 fe78 	bl	800029c <__adddf3>
 80085ac:	4622      	mov	r2, r4
 80085ae:	462b      	mov	r3, r5
 80085b0:	f7f8 f82a 	bl	8000608 <__aeabi_dmul>
 80085b4:	a33e      	add	r3, pc, #248	; (adr r3, 80086b0 <__ieee754_acos+0x298>)
 80085b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ba:	f7f7 fe6d 	bl	8000298 <__aeabi_dsub>
 80085be:	4622      	mov	r2, r4
 80085c0:	462b      	mov	r3, r5
 80085c2:	f7f8 f821 	bl	8000608 <__aeabi_dmul>
 80085c6:	a33c      	add	r3, pc, #240	; (adr r3, 80086b8 <__ieee754_acos+0x2a0>)
 80085c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085cc:	f7f7 fe66 	bl	800029c <__adddf3>
 80085d0:	4622      	mov	r2, r4
 80085d2:	462b      	mov	r3, r5
 80085d4:	f7f8 f818 	bl	8000608 <__aeabi_dmul>
 80085d8:	a339      	add	r3, pc, #228	; (adr r3, 80086c0 <__ieee754_acos+0x2a8>)
 80085da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085de:	f7f7 fe5b 	bl	8000298 <__aeabi_dsub>
 80085e2:	4622      	mov	r2, r4
 80085e4:	462b      	mov	r3, r5
 80085e6:	f7f8 f80f 	bl	8000608 <__aeabi_dmul>
 80085ea:	a337      	add	r3, pc, #220	; (adr r3, 80086c8 <__ieee754_acos+0x2b0>)
 80085ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f0:	f7f7 fe54 	bl	800029c <__adddf3>
 80085f4:	4622      	mov	r2, r4
 80085f6:	462b      	mov	r3, r5
 80085f8:	f7f8 f806 	bl	8000608 <__aeabi_dmul>
 80085fc:	ec45 4b10 	vmov	d0, r4, r5
 8008600:	4680      	mov	r8, r0
 8008602:	4689      	mov	r9, r1
 8008604:	f000 f968 	bl	80088d8 <__ieee754_sqrt>
 8008608:	a331      	add	r3, pc, #196	; (adr r3, 80086d0 <__ieee754_acos+0x2b8>)
 800860a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860e:	4620      	mov	r0, r4
 8008610:	4629      	mov	r1, r5
 8008612:	ec57 6b10 	vmov	r6, r7, d0
 8008616:	f7f7 fff7 	bl	8000608 <__aeabi_dmul>
 800861a:	a32f      	add	r3, pc, #188	; (adr r3, 80086d8 <__ieee754_acos+0x2c0>)
 800861c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008620:	f7f7 fe3a 	bl	8000298 <__aeabi_dsub>
 8008624:	4622      	mov	r2, r4
 8008626:	462b      	mov	r3, r5
 8008628:	f7f7 ffee 	bl	8000608 <__aeabi_dmul>
 800862c:	a32c      	add	r3, pc, #176	; (adr r3, 80086e0 <__ieee754_acos+0x2c8>)
 800862e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008632:	f7f7 fe33 	bl	800029c <__adddf3>
 8008636:	4622      	mov	r2, r4
 8008638:	462b      	mov	r3, r5
 800863a:	f7f7 ffe5 	bl	8000608 <__aeabi_dmul>
 800863e:	a32a      	add	r3, pc, #168	; (adr r3, 80086e8 <__ieee754_acos+0x2d0>)
 8008640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008644:	f7f7 fe28 	bl	8000298 <__aeabi_dsub>
 8008648:	4622      	mov	r2, r4
 800864a:	462b      	mov	r3, r5
 800864c:	f7f7 ffdc 	bl	8000608 <__aeabi_dmul>
 8008650:	4b2e      	ldr	r3, [pc, #184]	; (800870c <__ieee754_acos+0x2f4>)
 8008652:	2200      	movs	r2, #0
 8008654:	f7f7 fe22 	bl	800029c <__adddf3>
 8008658:	4602      	mov	r2, r0
 800865a:	460b      	mov	r3, r1
 800865c:	4640      	mov	r0, r8
 800865e:	4649      	mov	r1, r9
 8008660:	f7f8 f8fc 	bl	800085c <__aeabi_ddiv>
 8008664:	4632      	mov	r2, r6
 8008666:	463b      	mov	r3, r7
 8008668:	f7f7 ffce 	bl	8000608 <__aeabi_dmul>
 800866c:	a320      	add	r3, pc, #128	; (adr r3, 80086f0 <__ieee754_acos+0x2d8>)
 800866e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008672:	f7f7 fe11 	bl	8000298 <__aeabi_dsub>
 8008676:	4632      	mov	r2, r6
 8008678:	463b      	mov	r3, r7
 800867a:	f7f7 fe0f 	bl	800029c <__adddf3>
 800867e:	4602      	mov	r2, r0
 8008680:	460b      	mov	r3, r1
 8008682:	f7f7 fe0b 	bl	800029c <__adddf3>
 8008686:	4602      	mov	r2, r0
 8008688:	460b      	mov	r3, r1
 800868a:	a103      	add	r1, pc, #12	; (adr r1, 8008698 <__ieee754_acos+0x280>)
 800868c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008690:	e76f      	b.n	8008572 <__ieee754_acos+0x15a>
 8008692:	bf00      	nop
 8008694:	f3af 8000 	nop.w
 8008698:	54442d18 	.word	0x54442d18
 800869c:	400921fb 	.word	0x400921fb
 80086a0:	0dfdf709 	.word	0x0dfdf709
 80086a4:	3f023de1 	.word	0x3f023de1
 80086a8:	7501b288 	.word	0x7501b288
 80086ac:	3f49efe0 	.word	0x3f49efe0
 80086b0:	b5688f3b 	.word	0xb5688f3b
 80086b4:	3fa48228 	.word	0x3fa48228
 80086b8:	0e884455 	.word	0x0e884455
 80086bc:	3fc9c155 	.word	0x3fc9c155
 80086c0:	03eb6f7d 	.word	0x03eb6f7d
 80086c4:	3fd4d612 	.word	0x3fd4d612
 80086c8:	55555555 	.word	0x55555555
 80086cc:	3fc55555 	.word	0x3fc55555
 80086d0:	b12e9282 	.word	0xb12e9282
 80086d4:	3fb3b8c5 	.word	0x3fb3b8c5
 80086d8:	1b8d0159 	.word	0x1b8d0159
 80086dc:	3fe6066c 	.word	0x3fe6066c
 80086e0:	9c598ac8 	.word	0x9c598ac8
 80086e4:	40002ae5 	.word	0x40002ae5
 80086e8:	1c8a2d4b 	.word	0x1c8a2d4b
 80086ec:	40033a27 	.word	0x40033a27
 80086f0:	33145c07 	.word	0x33145c07
 80086f4:	3c91a626 	.word	0x3c91a626
 80086f8:	54442d18 	.word	0x54442d18
 80086fc:	3ff921fb 	.word	0x3ff921fb
 8008700:	3fefffff 	.word	0x3fefffff
 8008704:	3fdfffff 	.word	0x3fdfffff
 8008708:	3c600000 	.word	0x3c600000
 800870c:	3ff00000 	.word	0x3ff00000
 8008710:	3fe00000 	.word	0x3fe00000
 8008714:	ee10 2a10 	vmov	r2, s0
 8008718:	462b      	mov	r3, r5
 800871a:	496d      	ldr	r1, [pc, #436]	; (80088d0 <__ieee754_acos+0x4b8>)
 800871c:	2000      	movs	r0, #0
 800871e:	f7f7 fdbb 	bl	8000298 <__aeabi_dsub>
 8008722:	4b6c      	ldr	r3, [pc, #432]	; (80088d4 <__ieee754_acos+0x4bc>)
 8008724:	2200      	movs	r2, #0
 8008726:	f7f7 ff6f 	bl	8000608 <__aeabi_dmul>
 800872a:	4604      	mov	r4, r0
 800872c:	460d      	mov	r5, r1
 800872e:	ec45 4b10 	vmov	d0, r4, r5
 8008732:	f000 f8d1 	bl	80088d8 <__ieee754_sqrt>
 8008736:	a34e      	add	r3, pc, #312	; (adr r3, 8008870 <__ieee754_acos+0x458>)
 8008738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873c:	4620      	mov	r0, r4
 800873e:	4629      	mov	r1, r5
 8008740:	ec59 8b10 	vmov	r8, r9, d0
 8008744:	f7f7 ff60 	bl	8000608 <__aeabi_dmul>
 8008748:	a34b      	add	r3, pc, #300	; (adr r3, 8008878 <__ieee754_acos+0x460>)
 800874a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874e:	f7f7 fda5 	bl	800029c <__adddf3>
 8008752:	4622      	mov	r2, r4
 8008754:	462b      	mov	r3, r5
 8008756:	f7f7 ff57 	bl	8000608 <__aeabi_dmul>
 800875a:	a349      	add	r3, pc, #292	; (adr r3, 8008880 <__ieee754_acos+0x468>)
 800875c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008760:	f7f7 fd9a 	bl	8000298 <__aeabi_dsub>
 8008764:	4622      	mov	r2, r4
 8008766:	462b      	mov	r3, r5
 8008768:	f7f7 ff4e 	bl	8000608 <__aeabi_dmul>
 800876c:	a346      	add	r3, pc, #280	; (adr r3, 8008888 <__ieee754_acos+0x470>)
 800876e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008772:	f7f7 fd93 	bl	800029c <__adddf3>
 8008776:	4622      	mov	r2, r4
 8008778:	462b      	mov	r3, r5
 800877a:	f7f7 ff45 	bl	8000608 <__aeabi_dmul>
 800877e:	a344      	add	r3, pc, #272	; (adr r3, 8008890 <__ieee754_acos+0x478>)
 8008780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008784:	f7f7 fd88 	bl	8000298 <__aeabi_dsub>
 8008788:	4622      	mov	r2, r4
 800878a:	462b      	mov	r3, r5
 800878c:	f7f7 ff3c 	bl	8000608 <__aeabi_dmul>
 8008790:	a341      	add	r3, pc, #260	; (adr r3, 8008898 <__ieee754_acos+0x480>)
 8008792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008796:	f7f7 fd81 	bl	800029c <__adddf3>
 800879a:	4622      	mov	r2, r4
 800879c:	462b      	mov	r3, r5
 800879e:	f7f7 ff33 	bl	8000608 <__aeabi_dmul>
 80087a2:	a33f      	add	r3, pc, #252	; (adr r3, 80088a0 <__ieee754_acos+0x488>)
 80087a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a8:	4682      	mov	sl, r0
 80087aa:	468b      	mov	fp, r1
 80087ac:	4620      	mov	r0, r4
 80087ae:	4629      	mov	r1, r5
 80087b0:	f7f7 ff2a 	bl	8000608 <__aeabi_dmul>
 80087b4:	a33c      	add	r3, pc, #240	; (adr r3, 80088a8 <__ieee754_acos+0x490>)
 80087b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ba:	f7f7 fd6d 	bl	8000298 <__aeabi_dsub>
 80087be:	4622      	mov	r2, r4
 80087c0:	462b      	mov	r3, r5
 80087c2:	f7f7 ff21 	bl	8000608 <__aeabi_dmul>
 80087c6:	a33a      	add	r3, pc, #232	; (adr r3, 80088b0 <__ieee754_acos+0x498>)
 80087c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087cc:	f7f7 fd66 	bl	800029c <__adddf3>
 80087d0:	4622      	mov	r2, r4
 80087d2:	462b      	mov	r3, r5
 80087d4:	f7f7 ff18 	bl	8000608 <__aeabi_dmul>
 80087d8:	a337      	add	r3, pc, #220	; (adr r3, 80088b8 <__ieee754_acos+0x4a0>)
 80087da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087de:	f7f7 fd5b 	bl	8000298 <__aeabi_dsub>
 80087e2:	4622      	mov	r2, r4
 80087e4:	462b      	mov	r3, r5
 80087e6:	f7f7 ff0f 	bl	8000608 <__aeabi_dmul>
 80087ea:	4b39      	ldr	r3, [pc, #228]	; (80088d0 <__ieee754_acos+0x4b8>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	f7f7 fd55 	bl	800029c <__adddf3>
 80087f2:	4602      	mov	r2, r0
 80087f4:	460b      	mov	r3, r1
 80087f6:	4650      	mov	r0, sl
 80087f8:	4659      	mov	r1, fp
 80087fa:	f7f8 f82f 	bl	800085c <__aeabi_ddiv>
 80087fe:	4642      	mov	r2, r8
 8008800:	464b      	mov	r3, r9
 8008802:	f7f7 ff01 	bl	8000608 <__aeabi_dmul>
 8008806:	2600      	movs	r6, #0
 8008808:	4682      	mov	sl, r0
 800880a:	468b      	mov	fp, r1
 800880c:	4632      	mov	r2, r6
 800880e:	464b      	mov	r3, r9
 8008810:	4630      	mov	r0, r6
 8008812:	4649      	mov	r1, r9
 8008814:	f7f7 fef8 	bl	8000608 <__aeabi_dmul>
 8008818:	4602      	mov	r2, r0
 800881a:	460b      	mov	r3, r1
 800881c:	4620      	mov	r0, r4
 800881e:	4629      	mov	r1, r5
 8008820:	f7f7 fd3a 	bl	8000298 <__aeabi_dsub>
 8008824:	4632      	mov	r2, r6
 8008826:	4604      	mov	r4, r0
 8008828:	460d      	mov	r5, r1
 800882a:	464b      	mov	r3, r9
 800882c:	4640      	mov	r0, r8
 800882e:	4649      	mov	r1, r9
 8008830:	f7f7 fd34 	bl	800029c <__adddf3>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	4620      	mov	r0, r4
 800883a:	4629      	mov	r1, r5
 800883c:	f7f8 f80e 	bl	800085c <__aeabi_ddiv>
 8008840:	4602      	mov	r2, r0
 8008842:	460b      	mov	r3, r1
 8008844:	4650      	mov	r0, sl
 8008846:	4659      	mov	r1, fp
 8008848:	f7f7 fd28 	bl	800029c <__adddf3>
 800884c:	4632      	mov	r2, r6
 800884e:	464b      	mov	r3, r9
 8008850:	f7f7 fd24 	bl	800029c <__adddf3>
 8008854:	4602      	mov	r2, r0
 8008856:	460b      	mov	r3, r1
 8008858:	f7f7 fd20 	bl	800029c <__adddf3>
 800885c:	e5fe      	b.n	800845c <__ieee754_acos+0x44>
 800885e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80088c0 <__ieee754_acos+0x4a8>
 8008862:	e5ed      	b.n	8008440 <__ieee754_acos+0x28>
 8008864:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80088c8 <__ieee754_acos+0x4b0>
 8008868:	e5ea      	b.n	8008440 <__ieee754_acos+0x28>
 800886a:	bf00      	nop
 800886c:	f3af 8000 	nop.w
 8008870:	0dfdf709 	.word	0x0dfdf709
 8008874:	3f023de1 	.word	0x3f023de1
 8008878:	7501b288 	.word	0x7501b288
 800887c:	3f49efe0 	.word	0x3f49efe0
 8008880:	b5688f3b 	.word	0xb5688f3b
 8008884:	3fa48228 	.word	0x3fa48228
 8008888:	0e884455 	.word	0x0e884455
 800888c:	3fc9c155 	.word	0x3fc9c155
 8008890:	03eb6f7d 	.word	0x03eb6f7d
 8008894:	3fd4d612 	.word	0x3fd4d612
 8008898:	55555555 	.word	0x55555555
 800889c:	3fc55555 	.word	0x3fc55555
 80088a0:	b12e9282 	.word	0xb12e9282
 80088a4:	3fb3b8c5 	.word	0x3fb3b8c5
 80088a8:	1b8d0159 	.word	0x1b8d0159
 80088ac:	3fe6066c 	.word	0x3fe6066c
 80088b0:	9c598ac8 	.word	0x9c598ac8
 80088b4:	40002ae5 	.word	0x40002ae5
 80088b8:	1c8a2d4b 	.word	0x1c8a2d4b
 80088bc:	40033a27 	.word	0x40033a27
	...
 80088c8:	54442d18 	.word	0x54442d18
 80088cc:	3ff921fb 	.word	0x3ff921fb
 80088d0:	3ff00000 	.word	0x3ff00000
 80088d4:	3fe00000 	.word	0x3fe00000

080088d8 <__ieee754_sqrt>:
 80088d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088dc:	ec55 4b10 	vmov	r4, r5, d0
 80088e0:	4e55      	ldr	r6, [pc, #340]	; (8008a38 <__ieee754_sqrt+0x160>)
 80088e2:	43ae      	bics	r6, r5
 80088e4:	ee10 0a10 	vmov	r0, s0
 80088e8:	ee10 3a10 	vmov	r3, s0
 80088ec:	462a      	mov	r2, r5
 80088ee:	4629      	mov	r1, r5
 80088f0:	d110      	bne.n	8008914 <__ieee754_sqrt+0x3c>
 80088f2:	ee10 2a10 	vmov	r2, s0
 80088f6:	462b      	mov	r3, r5
 80088f8:	f7f7 fe86 	bl	8000608 <__aeabi_dmul>
 80088fc:	4602      	mov	r2, r0
 80088fe:	460b      	mov	r3, r1
 8008900:	4620      	mov	r0, r4
 8008902:	4629      	mov	r1, r5
 8008904:	f7f7 fcca 	bl	800029c <__adddf3>
 8008908:	4604      	mov	r4, r0
 800890a:	460d      	mov	r5, r1
 800890c:	ec45 4b10 	vmov	d0, r4, r5
 8008910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008914:	2d00      	cmp	r5, #0
 8008916:	dc10      	bgt.n	800893a <__ieee754_sqrt+0x62>
 8008918:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800891c:	4330      	orrs	r0, r6
 800891e:	d0f5      	beq.n	800890c <__ieee754_sqrt+0x34>
 8008920:	b15d      	cbz	r5, 800893a <__ieee754_sqrt+0x62>
 8008922:	ee10 2a10 	vmov	r2, s0
 8008926:	462b      	mov	r3, r5
 8008928:	ee10 0a10 	vmov	r0, s0
 800892c:	f7f7 fcb4 	bl	8000298 <__aeabi_dsub>
 8008930:	4602      	mov	r2, r0
 8008932:	460b      	mov	r3, r1
 8008934:	f7f7 ff92 	bl	800085c <__aeabi_ddiv>
 8008938:	e7e6      	b.n	8008908 <__ieee754_sqrt+0x30>
 800893a:	1512      	asrs	r2, r2, #20
 800893c:	d074      	beq.n	8008a28 <__ieee754_sqrt+0x150>
 800893e:	07d4      	lsls	r4, r2, #31
 8008940:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008944:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800894c:	bf5e      	ittt	pl
 800894e:	0fda      	lsrpl	r2, r3, #31
 8008950:	005b      	lslpl	r3, r3, #1
 8008952:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008956:	2400      	movs	r4, #0
 8008958:	0fda      	lsrs	r2, r3, #31
 800895a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800895e:	107f      	asrs	r7, r7, #1
 8008960:	005b      	lsls	r3, r3, #1
 8008962:	2516      	movs	r5, #22
 8008964:	4620      	mov	r0, r4
 8008966:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800896a:	1886      	adds	r6, r0, r2
 800896c:	428e      	cmp	r6, r1
 800896e:	bfde      	ittt	le
 8008970:	1b89      	suble	r1, r1, r6
 8008972:	18b0      	addle	r0, r6, r2
 8008974:	18a4      	addle	r4, r4, r2
 8008976:	0049      	lsls	r1, r1, #1
 8008978:	3d01      	subs	r5, #1
 800897a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800897e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008982:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008986:	d1f0      	bne.n	800896a <__ieee754_sqrt+0x92>
 8008988:	462a      	mov	r2, r5
 800898a:	f04f 0e20 	mov.w	lr, #32
 800898e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008992:	4281      	cmp	r1, r0
 8008994:	eb06 0c05 	add.w	ip, r6, r5
 8008998:	dc02      	bgt.n	80089a0 <__ieee754_sqrt+0xc8>
 800899a:	d113      	bne.n	80089c4 <__ieee754_sqrt+0xec>
 800899c:	459c      	cmp	ip, r3
 800899e:	d811      	bhi.n	80089c4 <__ieee754_sqrt+0xec>
 80089a0:	f1bc 0f00 	cmp.w	ip, #0
 80089a4:	eb0c 0506 	add.w	r5, ip, r6
 80089a8:	da43      	bge.n	8008a32 <__ieee754_sqrt+0x15a>
 80089aa:	2d00      	cmp	r5, #0
 80089ac:	db41      	blt.n	8008a32 <__ieee754_sqrt+0x15a>
 80089ae:	f100 0801 	add.w	r8, r0, #1
 80089b2:	1a09      	subs	r1, r1, r0
 80089b4:	459c      	cmp	ip, r3
 80089b6:	bf88      	it	hi
 80089b8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80089bc:	eba3 030c 	sub.w	r3, r3, ip
 80089c0:	4432      	add	r2, r6
 80089c2:	4640      	mov	r0, r8
 80089c4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80089c8:	f1be 0e01 	subs.w	lr, lr, #1
 80089cc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80089d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80089d4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80089d8:	d1db      	bne.n	8008992 <__ieee754_sqrt+0xba>
 80089da:	430b      	orrs	r3, r1
 80089dc:	d006      	beq.n	80089ec <__ieee754_sqrt+0x114>
 80089de:	1c50      	adds	r0, r2, #1
 80089e0:	bf13      	iteet	ne
 80089e2:	3201      	addne	r2, #1
 80089e4:	3401      	addeq	r4, #1
 80089e6:	4672      	moveq	r2, lr
 80089e8:	f022 0201 	bicne.w	r2, r2, #1
 80089ec:	1063      	asrs	r3, r4, #1
 80089ee:	0852      	lsrs	r2, r2, #1
 80089f0:	07e1      	lsls	r1, r4, #31
 80089f2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80089f6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80089fa:	bf48      	it	mi
 80089fc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008a00:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008a04:	4614      	mov	r4, r2
 8008a06:	e781      	b.n	800890c <__ieee754_sqrt+0x34>
 8008a08:	0ad9      	lsrs	r1, r3, #11
 8008a0a:	3815      	subs	r0, #21
 8008a0c:	055b      	lsls	r3, r3, #21
 8008a0e:	2900      	cmp	r1, #0
 8008a10:	d0fa      	beq.n	8008a08 <__ieee754_sqrt+0x130>
 8008a12:	02cd      	lsls	r5, r1, #11
 8008a14:	d50a      	bpl.n	8008a2c <__ieee754_sqrt+0x154>
 8008a16:	f1c2 0420 	rsb	r4, r2, #32
 8008a1a:	fa23 f404 	lsr.w	r4, r3, r4
 8008a1e:	1e55      	subs	r5, r2, #1
 8008a20:	4093      	lsls	r3, r2
 8008a22:	4321      	orrs	r1, r4
 8008a24:	1b42      	subs	r2, r0, r5
 8008a26:	e78a      	b.n	800893e <__ieee754_sqrt+0x66>
 8008a28:	4610      	mov	r0, r2
 8008a2a:	e7f0      	b.n	8008a0e <__ieee754_sqrt+0x136>
 8008a2c:	0049      	lsls	r1, r1, #1
 8008a2e:	3201      	adds	r2, #1
 8008a30:	e7ef      	b.n	8008a12 <__ieee754_sqrt+0x13a>
 8008a32:	4680      	mov	r8, r0
 8008a34:	e7bd      	b.n	80089b2 <__ieee754_sqrt+0xda>
 8008a36:	bf00      	nop
 8008a38:	7ff00000 	.word	0x7ff00000

08008a3c <__ieee754_sqrtf>:
 8008a3c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008a40:	4770      	bx	lr

08008a42 <fabs>:
 8008a42:	ec51 0b10 	vmov	r0, r1, d0
 8008a46:	ee10 2a10 	vmov	r2, s0
 8008a4a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a4e:	ec43 2b10 	vmov	d0, r2, r3
 8008a52:	4770      	bx	lr

08008a54 <_init>:
 8008a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a56:	bf00      	nop
 8008a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a5a:	bc08      	pop	{r3}
 8008a5c:	469e      	mov	lr, r3
 8008a5e:	4770      	bx	lr

08008a60 <_fini>:
 8008a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a62:	bf00      	nop
 8008a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a66:	bc08      	pop	{r3}
 8008a68:	469e      	mov	lr, r3
 8008a6a:	4770      	bx	lr
