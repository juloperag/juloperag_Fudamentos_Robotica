
Control_Robot_FreeRTOS_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011974  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d8  08011b18  08011b18  00021b18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080123f0  080123f0  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  080123f0  080123f0  000223f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080123f8  080123f8  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080123f8  080123f8  000223f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080123fc  080123fc  000223fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08012400  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013d08  200001f8  080125f4  000301f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20013f00  080125f4  00033f00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3bd  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000283a  00000000  00000000  0003e5e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  00040e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  000419b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011539  00000000  00000000  00042408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f72c  00000000  00000000  00053941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00062ca8  00000000  00000000  0006306d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c5d15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bc8  00000000  00000000  000c5d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011afc 	.word	0x08011afc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	08011afc 	.word	0x08011afc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_frsub>:
 8000cb8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	e002      	b.n	8000cc4 <__addsf3>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_fsub>:
 8000cc0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cc4 <__addsf3>:
 8000cc4:	0042      	lsls	r2, r0, #1
 8000cc6:	bf1f      	itttt	ne
 8000cc8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ccc:	ea92 0f03 	teqne	r2, r3
 8000cd0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cd4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd8:	d06a      	beq.n	8000db0 <__addsf3+0xec>
 8000cda:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cde:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ce2:	bfc1      	itttt	gt
 8000ce4:	18d2      	addgt	r2, r2, r3
 8000ce6:	4041      	eorgt	r1, r0
 8000ce8:	4048      	eorgt	r0, r1
 8000cea:	4041      	eorgt	r1, r0
 8000cec:	bfb8      	it	lt
 8000cee:	425b      	neglt	r3, r3
 8000cf0:	2b19      	cmp	r3, #25
 8000cf2:	bf88      	it	hi
 8000cf4:	4770      	bxhi	lr
 8000cf6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cfa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4240      	negne	r0, r0
 8000d06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4249      	negne	r1, r1
 8000d16:	ea92 0f03 	teq	r2, r3
 8000d1a:	d03f      	beq.n	8000d9c <__addsf3+0xd8>
 8000d1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d20:	fa41 fc03 	asr.w	ip, r1, r3
 8000d24:	eb10 000c 	adds.w	r0, r0, ip
 8000d28:	f1c3 0320 	rsb	r3, r3, #32
 8000d2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__addsf3+0x78>
 8000d36:	4249      	negs	r1, r1
 8000d38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d40:	d313      	bcc.n	8000d6a <__addsf3+0xa6>
 8000d42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d46:	d306      	bcc.n	8000d56 <__addsf3+0x92>
 8000d48:	0840      	lsrs	r0, r0, #1
 8000d4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d4e:	f102 0201 	add.w	r2, r2, #1
 8000d52:	2afe      	cmp	r2, #254	; 0xfe
 8000d54:	d251      	bcs.n	8000dfa <__addsf3+0x136>
 8000d56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d5e:	bf08      	it	eq
 8000d60:	f020 0001 	biceq.w	r0, r0, #1
 8000d64:	ea40 0003 	orr.w	r0, r0, r3
 8000d68:	4770      	bx	lr
 8000d6a:	0049      	lsls	r1, r1, #1
 8000d6c:	eb40 0000 	adc.w	r0, r0, r0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	bf28      	it	cs
 8000d74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d78:	d2ed      	bcs.n	8000d56 <__addsf3+0x92>
 8000d7a:	fab0 fc80 	clz	ip, r0
 8000d7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d82:	ebb2 020c 	subs.w	r2, r2, ip
 8000d86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d8a:	bfaa      	itet	ge
 8000d8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d90:	4252      	neglt	r2, r2
 8000d92:	4318      	orrge	r0, r3
 8000d94:	bfbc      	itt	lt
 8000d96:	40d0      	lsrlt	r0, r2
 8000d98:	4318      	orrlt	r0, r3
 8000d9a:	4770      	bx	lr
 8000d9c:	f092 0f00 	teq	r2, #0
 8000da0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000da4:	bf06      	itte	eq
 8000da6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000daa:	3201      	addeq	r2, #1
 8000dac:	3b01      	subne	r3, #1
 8000dae:	e7b5      	b.n	8000d1c <__addsf3+0x58>
 8000db0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000db4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000db8:	bf18      	it	ne
 8000dba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dbe:	d021      	beq.n	8000e04 <__addsf3+0x140>
 8000dc0:	ea92 0f03 	teq	r2, r3
 8000dc4:	d004      	beq.n	8000dd0 <__addsf3+0x10c>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	bf08      	it	eq
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	4770      	bx	lr
 8000dd0:	ea90 0f01 	teq	r0, r1
 8000dd4:	bf1c      	itt	ne
 8000dd6:	2000      	movne	r0, #0
 8000dd8:	4770      	bxne	lr
 8000dda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dde:	d104      	bne.n	8000dea <__addsf3+0x126>
 8000de0:	0040      	lsls	r0, r0, #1
 8000de2:	bf28      	it	cs
 8000de4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000de8:	4770      	bx	lr
 8000dea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dee:	bf3c      	itt	cc
 8000df0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000df4:	4770      	bxcc	lr
 8000df6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	4770      	bx	lr
 8000e04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e08:	bf16      	itet	ne
 8000e0a:	4608      	movne	r0, r1
 8000e0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e10:	4601      	movne	r1, r0
 8000e12:	0242      	lsls	r2, r0, #9
 8000e14:	bf06      	itte	eq
 8000e16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e1a:	ea90 0f01 	teqeq	r0, r1
 8000e1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e22:	4770      	bx	lr

08000e24 <__aeabi_ui2f>:
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	e004      	b.n	8000e34 <__aeabi_i2f+0x8>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_i2f>:
 8000e2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e30:	bf48      	it	mi
 8000e32:	4240      	negmi	r0, r0
 8000e34:	ea5f 0c00 	movs.w	ip, r0
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e40:	4601      	mov	r1, r0
 8000e42:	f04f 0000 	mov.w	r0, #0
 8000e46:	e01c      	b.n	8000e82 <__aeabi_l2f+0x2a>

08000e48 <__aeabi_ul2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	e00a      	b.n	8000e6c <__aeabi_l2f+0x14>
 8000e56:	bf00      	nop

08000e58 <__aeabi_l2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e64:	d502      	bpl.n	8000e6c <__aeabi_l2f+0x14>
 8000e66:	4240      	negs	r0, r0
 8000e68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e6c:	ea5f 0c01 	movs.w	ip, r1
 8000e70:	bf02      	ittt	eq
 8000e72:	4684      	moveq	ip, r0
 8000e74:	4601      	moveq	r1, r0
 8000e76:	2000      	moveq	r0, #0
 8000e78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e7c:	bf08      	it	eq
 8000e7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e86:	fabc f28c 	clz	r2, ip
 8000e8a:	3a08      	subs	r2, #8
 8000e8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e90:	db10      	blt.n	8000eb4 <__aeabi_l2f+0x5c>
 8000e92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e96:	4463      	add	r3, ip
 8000e98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ea4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	f020 0001 	biceq.w	r0, r0, #1
 8000eb2:	4770      	bx	lr
 8000eb4:	f102 0220 	add.w	r2, r2, #32
 8000eb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ebc:	f1c2 0220 	rsb	r2, r2, #32
 8000ec0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ec4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ec8:	eb43 0002 	adc.w	r0, r3, r2
 8000ecc:	bf08      	it	eq
 8000ece:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_ldivmod>:
 8000ed4:	b97b      	cbnz	r3, 8000ef6 <__aeabi_ldivmod+0x22>
 8000ed6:	b972      	cbnz	r2, 8000ef6 <__aeabi_ldivmod+0x22>
 8000ed8:	2900      	cmp	r1, #0
 8000eda:	bfbe      	ittt	lt
 8000edc:	2000      	movlt	r0, #0
 8000ede:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ee2:	e006      	blt.n	8000ef2 <__aeabi_ldivmod+0x1e>
 8000ee4:	bf08      	it	eq
 8000ee6:	2800      	cmpeq	r0, #0
 8000ee8:	bf1c      	itt	ne
 8000eea:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000eee:	f04f 30ff 	movne.w	r0, #4294967295
 8000ef2:	f000 b9dd 	b.w	80012b0 <__aeabi_idiv0>
 8000ef6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000efa:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000efe:	2900      	cmp	r1, #0
 8000f00:	db09      	blt.n	8000f16 <__aeabi_ldivmod+0x42>
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db1a      	blt.n	8000f3c <__aeabi_ldivmod+0x68>
 8000f06:	f000 f86b 	bl	8000fe0 <__udivmoddi4>
 8000f0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f12:	b004      	add	sp, #16
 8000f14:	4770      	bx	lr
 8000f16:	4240      	negs	r0, r0
 8000f18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db1b      	blt.n	8000f58 <__aeabi_ldivmod+0x84>
 8000f20:	f000 f85e 	bl	8000fe0 <__udivmoddi4>
 8000f24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f2c:	b004      	add	sp, #16
 8000f2e:	4240      	negs	r0, r0
 8000f30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f34:	4252      	negs	r2, r2
 8000f36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f3a:	4770      	bx	lr
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f42:	f000 f84d 	bl	8000fe0 <__udivmoddi4>
 8000f46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f4e:	b004      	add	sp, #16
 8000f50:	4240      	negs	r0, r0
 8000f52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f56:	4770      	bx	lr
 8000f58:	4252      	negs	r2, r2
 8000f5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f5e:	f000 f83f 	bl	8000fe0 <__udivmoddi4>
 8000f62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f6a:	b004      	add	sp, #16
 8000f6c:	4252      	negs	r2, r2
 8000f6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f72:	4770      	bx	lr

08000f74 <__aeabi_d2lz>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	2200      	movs	r2, #0
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	460d      	mov	r5, r1
 8000f7e:	f7ff fdc5 	bl	8000b0c <__aeabi_dcmplt>
 8000f82:	b928      	cbnz	r0, 8000f90 <__aeabi_d2lz+0x1c>
 8000f84:	4620      	mov	r0, r4
 8000f86:	4629      	mov	r1, r5
 8000f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f8c:	f000 b80a 	b.w	8000fa4 <__aeabi_d2ulz>
 8000f90:	4620      	mov	r0, r4
 8000f92:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000f96:	f000 f805 	bl	8000fa4 <__aeabi_d2ulz>
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fa0:	bd38      	pop	{r3, r4, r5, pc}
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_d2ulz>:
 8000fa4:	b5d0      	push	{r4, r6, r7, lr}
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <__aeabi_d2ulz+0x34>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4606      	mov	r6, r0
 8000fac:	460f      	mov	r7, r1
 8000fae:	f7ff fb3b 	bl	8000628 <__aeabi_dmul>
 8000fb2:	f7ff fe11 	bl	8000bd8 <__aeabi_d2uiz>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	f7ff fabc 	bl	8000534 <__aeabi_ui2d>
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <__aeabi_d2ulz+0x38>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f7ff fb32 	bl	8000628 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4630      	mov	r0, r6
 8000fca:	4639      	mov	r1, r7
 8000fcc:	f7ff f974 	bl	80002b8 <__aeabi_dsub>
 8000fd0:	f7ff fe02 	bl	8000bd8 <__aeabi_d2uiz>
 8000fd4:	4621      	mov	r1, r4
 8000fd6:	bdd0      	pop	{r4, r6, r7, pc}
 8000fd8:	3df00000 	.word	0x3df00000
 8000fdc:	41f00000 	.word	0x41f00000

08000fe0 <__udivmoddi4>:
 8000fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fe4:	9d08      	ldr	r5, [sp, #32]
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	468e      	mov	lr, r1
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d14d      	bne.n	800108a <__udivmoddi4+0xaa>
 8000fee:	428a      	cmp	r2, r1
 8000ff0:	4694      	mov	ip, r2
 8000ff2:	d969      	bls.n	80010c8 <__udivmoddi4+0xe8>
 8000ff4:	fab2 f282 	clz	r2, r2
 8000ff8:	b152      	cbz	r2, 8001010 <__udivmoddi4+0x30>
 8000ffa:	fa01 f302 	lsl.w	r3, r1, r2
 8000ffe:	f1c2 0120 	rsb	r1, r2, #32
 8001002:	fa20 f101 	lsr.w	r1, r0, r1
 8001006:	fa0c fc02 	lsl.w	ip, ip, r2
 800100a:	ea41 0e03 	orr.w	lr, r1, r3
 800100e:	4094      	lsls	r4, r2
 8001010:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001014:	0c21      	lsrs	r1, r4, #16
 8001016:	fbbe f6f8 	udiv	r6, lr, r8
 800101a:	fa1f f78c 	uxth.w	r7, ip
 800101e:	fb08 e316 	mls	r3, r8, r6, lr
 8001022:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001026:	fb06 f107 	mul.w	r1, r6, r7
 800102a:	4299      	cmp	r1, r3
 800102c:	d90a      	bls.n	8001044 <__udivmoddi4+0x64>
 800102e:	eb1c 0303 	adds.w	r3, ip, r3
 8001032:	f106 30ff 	add.w	r0, r6, #4294967295
 8001036:	f080 811f 	bcs.w	8001278 <__udivmoddi4+0x298>
 800103a:	4299      	cmp	r1, r3
 800103c:	f240 811c 	bls.w	8001278 <__udivmoddi4+0x298>
 8001040:	3e02      	subs	r6, #2
 8001042:	4463      	add	r3, ip
 8001044:	1a5b      	subs	r3, r3, r1
 8001046:	b2a4      	uxth	r4, r4
 8001048:	fbb3 f0f8 	udiv	r0, r3, r8
 800104c:	fb08 3310 	mls	r3, r8, r0, r3
 8001050:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001054:	fb00 f707 	mul.w	r7, r0, r7
 8001058:	42a7      	cmp	r7, r4
 800105a:	d90a      	bls.n	8001072 <__udivmoddi4+0x92>
 800105c:	eb1c 0404 	adds.w	r4, ip, r4
 8001060:	f100 33ff 	add.w	r3, r0, #4294967295
 8001064:	f080 810a 	bcs.w	800127c <__udivmoddi4+0x29c>
 8001068:	42a7      	cmp	r7, r4
 800106a:	f240 8107 	bls.w	800127c <__udivmoddi4+0x29c>
 800106e:	4464      	add	r4, ip
 8001070:	3802      	subs	r0, #2
 8001072:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001076:	1be4      	subs	r4, r4, r7
 8001078:	2600      	movs	r6, #0
 800107a:	b11d      	cbz	r5, 8001084 <__udivmoddi4+0xa4>
 800107c:	40d4      	lsrs	r4, r2
 800107e:	2300      	movs	r3, #0
 8001080:	e9c5 4300 	strd	r4, r3, [r5]
 8001084:	4631      	mov	r1, r6
 8001086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800108a:	428b      	cmp	r3, r1
 800108c:	d909      	bls.n	80010a2 <__udivmoddi4+0xc2>
 800108e:	2d00      	cmp	r5, #0
 8001090:	f000 80ef 	beq.w	8001272 <__udivmoddi4+0x292>
 8001094:	2600      	movs	r6, #0
 8001096:	e9c5 0100 	strd	r0, r1, [r5]
 800109a:	4630      	mov	r0, r6
 800109c:	4631      	mov	r1, r6
 800109e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a2:	fab3 f683 	clz	r6, r3
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	d14a      	bne.n	8001140 <__udivmoddi4+0x160>
 80010aa:	428b      	cmp	r3, r1
 80010ac:	d302      	bcc.n	80010b4 <__udivmoddi4+0xd4>
 80010ae:	4282      	cmp	r2, r0
 80010b0:	f200 80f9 	bhi.w	80012a6 <__udivmoddi4+0x2c6>
 80010b4:	1a84      	subs	r4, r0, r2
 80010b6:	eb61 0303 	sbc.w	r3, r1, r3
 80010ba:	2001      	movs	r0, #1
 80010bc:	469e      	mov	lr, r3
 80010be:	2d00      	cmp	r5, #0
 80010c0:	d0e0      	beq.n	8001084 <__udivmoddi4+0xa4>
 80010c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80010c6:	e7dd      	b.n	8001084 <__udivmoddi4+0xa4>
 80010c8:	b902      	cbnz	r2, 80010cc <__udivmoddi4+0xec>
 80010ca:	deff      	udf	#255	; 0xff
 80010cc:	fab2 f282 	clz	r2, r2
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	f040 8092 	bne.w	80011fa <__udivmoddi4+0x21a>
 80010d6:	eba1 010c 	sub.w	r1, r1, ip
 80010da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010de:	fa1f fe8c 	uxth.w	lr, ip
 80010e2:	2601      	movs	r6, #1
 80010e4:	0c20      	lsrs	r0, r4, #16
 80010e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80010ea:	fb07 1113 	mls	r1, r7, r3, r1
 80010ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010f2:	fb0e f003 	mul.w	r0, lr, r3
 80010f6:	4288      	cmp	r0, r1
 80010f8:	d908      	bls.n	800110c <__udivmoddi4+0x12c>
 80010fa:	eb1c 0101 	adds.w	r1, ip, r1
 80010fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8001102:	d202      	bcs.n	800110a <__udivmoddi4+0x12a>
 8001104:	4288      	cmp	r0, r1
 8001106:	f200 80cb 	bhi.w	80012a0 <__udivmoddi4+0x2c0>
 800110a:	4643      	mov	r3, r8
 800110c:	1a09      	subs	r1, r1, r0
 800110e:	b2a4      	uxth	r4, r4
 8001110:	fbb1 f0f7 	udiv	r0, r1, r7
 8001114:	fb07 1110 	mls	r1, r7, r0, r1
 8001118:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800111c:	fb0e fe00 	mul.w	lr, lr, r0
 8001120:	45a6      	cmp	lr, r4
 8001122:	d908      	bls.n	8001136 <__udivmoddi4+0x156>
 8001124:	eb1c 0404 	adds.w	r4, ip, r4
 8001128:	f100 31ff 	add.w	r1, r0, #4294967295
 800112c:	d202      	bcs.n	8001134 <__udivmoddi4+0x154>
 800112e:	45a6      	cmp	lr, r4
 8001130:	f200 80bb 	bhi.w	80012aa <__udivmoddi4+0x2ca>
 8001134:	4608      	mov	r0, r1
 8001136:	eba4 040e 	sub.w	r4, r4, lr
 800113a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800113e:	e79c      	b.n	800107a <__udivmoddi4+0x9a>
 8001140:	f1c6 0720 	rsb	r7, r6, #32
 8001144:	40b3      	lsls	r3, r6
 8001146:	fa22 fc07 	lsr.w	ip, r2, r7
 800114a:	ea4c 0c03 	orr.w	ip, ip, r3
 800114e:	fa20 f407 	lsr.w	r4, r0, r7
 8001152:	fa01 f306 	lsl.w	r3, r1, r6
 8001156:	431c      	orrs	r4, r3
 8001158:	40f9      	lsrs	r1, r7
 800115a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800115e:	fa00 f306 	lsl.w	r3, r0, r6
 8001162:	fbb1 f8f9 	udiv	r8, r1, r9
 8001166:	0c20      	lsrs	r0, r4, #16
 8001168:	fa1f fe8c 	uxth.w	lr, ip
 800116c:	fb09 1118 	mls	r1, r9, r8, r1
 8001170:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001174:	fb08 f00e 	mul.w	r0, r8, lr
 8001178:	4288      	cmp	r0, r1
 800117a:	fa02 f206 	lsl.w	r2, r2, r6
 800117e:	d90b      	bls.n	8001198 <__udivmoddi4+0x1b8>
 8001180:	eb1c 0101 	adds.w	r1, ip, r1
 8001184:	f108 3aff 	add.w	sl, r8, #4294967295
 8001188:	f080 8088 	bcs.w	800129c <__udivmoddi4+0x2bc>
 800118c:	4288      	cmp	r0, r1
 800118e:	f240 8085 	bls.w	800129c <__udivmoddi4+0x2bc>
 8001192:	f1a8 0802 	sub.w	r8, r8, #2
 8001196:	4461      	add	r1, ip
 8001198:	1a09      	subs	r1, r1, r0
 800119a:	b2a4      	uxth	r4, r4
 800119c:	fbb1 f0f9 	udiv	r0, r1, r9
 80011a0:	fb09 1110 	mls	r1, r9, r0, r1
 80011a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80011a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80011ac:	458e      	cmp	lr, r1
 80011ae:	d908      	bls.n	80011c2 <__udivmoddi4+0x1e2>
 80011b0:	eb1c 0101 	adds.w	r1, ip, r1
 80011b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80011b8:	d26c      	bcs.n	8001294 <__udivmoddi4+0x2b4>
 80011ba:	458e      	cmp	lr, r1
 80011bc:	d96a      	bls.n	8001294 <__udivmoddi4+0x2b4>
 80011be:	3802      	subs	r0, #2
 80011c0:	4461      	add	r1, ip
 80011c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80011c6:	fba0 9402 	umull	r9, r4, r0, r2
 80011ca:	eba1 010e 	sub.w	r1, r1, lr
 80011ce:	42a1      	cmp	r1, r4
 80011d0:	46c8      	mov	r8, r9
 80011d2:	46a6      	mov	lr, r4
 80011d4:	d356      	bcc.n	8001284 <__udivmoddi4+0x2a4>
 80011d6:	d053      	beq.n	8001280 <__udivmoddi4+0x2a0>
 80011d8:	b15d      	cbz	r5, 80011f2 <__udivmoddi4+0x212>
 80011da:	ebb3 0208 	subs.w	r2, r3, r8
 80011de:	eb61 010e 	sbc.w	r1, r1, lr
 80011e2:	fa01 f707 	lsl.w	r7, r1, r7
 80011e6:	fa22 f306 	lsr.w	r3, r2, r6
 80011ea:	40f1      	lsrs	r1, r6
 80011ec:	431f      	orrs	r7, r3
 80011ee:	e9c5 7100 	strd	r7, r1, [r5]
 80011f2:	2600      	movs	r6, #0
 80011f4:	4631      	mov	r1, r6
 80011f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011fa:	f1c2 0320 	rsb	r3, r2, #32
 80011fe:	40d8      	lsrs	r0, r3
 8001200:	fa0c fc02 	lsl.w	ip, ip, r2
 8001204:	fa21 f303 	lsr.w	r3, r1, r3
 8001208:	4091      	lsls	r1, r2
 800120a:	4301      	orrs	r1, r0
 800120c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001210:	fa1f fe8c 	uxth.w	lr, ip
 8001214:	fbb3 f0f7 	udiv	r0, r3, r7
 8001218:	fb07 3610 	mls	r6, r7, r0, r3
 800121c:	0c0b      	lsrs	r3, r1, #16
 800121e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001222:	fb00 f60e 	mul.w	r6, r0, lr
 8001226:	429e      	cmp	r6, r3
 8001228:	fa04 f402 	lsl.w	r4, r4, r2
 800122c:	d908      	bls.n	8001240 <__udivmoddi4+0x260>
 800122e:	eb1c 0303 	adds.w	r3, ip, r3
 8001232:	f100 38ff 	add.w	r8, r0, #4294967295
 8001236:	d22f      	bcs.n	8001298 <__udivmoddi4+0x2b8>
 8001238:	429e      	cmp	r6, r3
 800123a:	d92d      	bls.n	8001298 <__udivmoddi4+0x2b8>
 800123c:	3802      	subs	r0, #2
 800123e:	4463      	add	r3, ip
 8001240:	1b9b      	subs	r3, r3, r6
 8001242:	b289      	uxth	r1, r1
 8001244:	fbb3 f6f7 	udiv	r6, r3, r7
 8001248:	fb07 3316 	mls	r3, r7, r6, r3
 800124c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001250:	fb06 f30e 	mul.w	r3, r6, lr
 8001254:	428b      	cmp	r3, r1
 8001256:	d908      	bls.n	800126a <__udivmoddi4+0x28a>
 8001258:	eb1c 0101 	adds.w	r1, ip, r1
 800125c:	f106 38ff 	add.w	r8, r6, #4294967295
 8001260:	d216      	bcs.n	8001290 <__udivmoddi4+0x2b0>
 8001262:	428b      	cmp	r3, r1
 8001264:	d914      	bls.n	8001290 <__udivmoddi4+0x2b0>
 8001266:	3e02      	subs	r6, #2
 8001268:	4461      	add	r1, ip
 800126a:	1ac9      	subs	r1, r1, r3
 800126c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001270:	e738      	b.n	80010e4 <__udivmoddi4+0x104>
 8001272:	462e      	mov	r6, r5
 8001274:	4628      	mov	r0, r5
 8001276:	e705      	b.n	8001084 <__udivmoddi4+0xa4>
 8001278:	4606      	mov	r6, r0
 800127a:	e6e3      	b.n	8001044 <__udivmoddi4+0x64>
 800127c:	4618      	mov	r0, r3
 800127e:	e6f8      	b.n	8001072 <__udivmoddi4+0x92>
 8001280:	454b      	cmp	r3, r9
 8001282:	d2a9      	bcs.n	80011d8 <__udivmoddi4+0x1f8>
 8001284:	ebb9 0802 	subs.w	r8, r9, r2
 8001288:	eb64 0e0c 	sbc.w	lr, r4, ip
 800128c:	3801      	subs	r0, #1
 800128e:	e7a3      	b.n	80011d8 <__udivmoddi4+0x1f8>
 8001290:	4646      	mov	r6, r8
 8001292:	e7ea      	b.n	800126a <__udivmoddi4+0x28a>
 8001294:	4620      	mov	r0, r4
 8001296:	e794      	b.n	80011c2 <__udivmoddi4+0x1e2>
 8001298:	4640      	mov	r0, r8
 800129a:	e7d1      	b.n	8001240 <__udivmoddi4+0x260>
 800129c:	46d0      	mov	r8, sl
 800129e:	e77b      	b.n	8001198 <__udivmoddi4+0x1b8>
 80012a0:	3b02      	subs	r3, #2
 80012a2:	4461      	add	r1, ip
 80012a4:	e732      	b.n	800110c <__udivmoddi4+0x12c>
 80012a6:	4630      	mov	r0, r6
 80012a8:	e709      	b.n	80010be <__udivmoddi4+0xde>
 80012aa:	4464      	add	r4, ip
 80012ac:	3802      	subs	r0, #2
 80012ae:	e742      	b.n	8001136 <__udivmoddi4+0x156>

080012b0 <__aeabi_idiv0>:
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop

080012b4 <configMPUAccel>:
//Importacio de librerias
#include "MPUAccel.h"
//#include <SysTickDriver.h>

void configMPUAccel(MPUAccel_Handler_t *ptrMPUAccel, BasicTimer_Handler_t *ptrBTimerHandler, uint16_t *ptrcountingTimer){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]

	uint8_t rdy  = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	75fb      	strb	r3, [r7, #23]
	uint8_t byte = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	75bb      	strb	r3, [r7, #22]

	//------------Verificamos comunicacion con el MPU----------------
	while(!rdy){
 80012c8:	e004      	b.n	80012d4 <configMPUAccel+0x20>

		rdy = WHOIAM(ptrMPUAccel);
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f000 f855 	bl	800137a <WHOIAM>
 80012d0:	4603      	mov	r3, r0
 80012d2:	75fb      	strb	r3, [r7, #23]
	while(!rdy){
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f7      	beq.n	80012ca <configMPUAccel+0x16>
	}

	//------------------Reiniciamos el MPU--------------------------
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, PWR_MGMT_l, 0x00);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	216b      	movs	r1, #107	; 0x6b
 80012e2:	4618      	mov	r0, r3
 80012e4:	f007 fe29 	bl	8008f3a <i2c_WriteSingleRegister>
	//Pausa
	timer_delay(ptrBTimerHandler, ptrcountingTimer, 1);
 80012e8:	2201      	movs	r2, #1
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	68b8      	ldr	r0, [r7, #8]
 80012ee:	f006 f939 	bl	8007564 <timer_delay>

	//---------------Configuracion Accel----------------------------
	byte =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_CONFIG);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	211c      	movs	r1, #28
 80012f8:	4618      	mov	r0, r3
 80012fa:	f007 fded 	bl	8008ed8 <i2c_ReadSingleRegister>
 80012fe:	4603      	mov	r3, r0
 8001300:	75bb      	strb	r3, [r7, #22]
	byte &= ~(0b00011000);
 8001302:	7dbb      	ldrb	r3, [r7, #22]
 8001304:	f023 0318 	bic.w	r3, r3, #24
 8001308:	75bb      	strb	r3, [r7, #22]
	//Pausa
	timer_delay(ptrBTimerHandler, ptrcountingTimer, 1);
 800130a:	2201      	movs	r2, #1
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	68b8      	ldr	r0, [r7, #8]
 8001310:	f006 f928 	bl	8007564 <timer_delay>
	//Deacuerdo al valor predeterminado se carga una configuracion
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_CONFIG, (byte) | (ptrMPUAccel->fullScaleACCEL<<3));
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6858      	ldr	r0, [r3, #4]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	b25a      	sxtb	r2, r3
 8001320:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001324:	4313      	orrs	r3, r2
 8001326:	b25b      	sxtb	r3, r3
 8001328:	b2db      	uxtb	r3, r3
 800132a:	461a      	mov	r2, r3
 800132c:	211c      	movs	r1, #28
 800132e:	f007 fe04 	bl	8008f3a <i2c_WriteSingleRegister>

	//---------------Configuracion Giro----------------------------
	byte =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_CONFIG);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	211b      	movs	r1, #27
 8001338:	4618      	mov	r0, r3
 800133a:	f007 fdcd 	bl	8008ed8 <i2c_ReadSingleRegister>
 800133e:	4603      	mov	r3, r0
 8001340:	75bb      	strb	r3, [r7, #22]
	byte &= ~(0b00011000);
 8001342:	7dbb      	ldrb	r3, [r7, #22]
 8001344:	f023 0318 	bic.w	r3, r3, #24
 8001348:	75bb      	strb	r3, [r7, #22]
	//Pausa
	timer_delay(ptrBTimerHandler, ptrcountingTimer, 1);
 800134a:	2201      	movs	r2, #1
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	68b8      	ldr	r0, [r7, #8]
 8001350:	f006 f908 	bl	8007564 <timer_delay>
	//Deacuerdo al valor predeterminado se carga una configuracion
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_CONFIG, (byte) | (ptrMPUAccel->fullScaleACCEL <<3));
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6858      	ldr	r0, [r3, #4]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	b25a      	sxtb	r2, r3
 8001360:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001364:	4313      	orrs	r3, r2
 8001366:	b25b      	sxtb	r3, r3
 8001368:	b2db      	uxtb	r3, r3
 800136a:	461a      	mov	r2, r3
 800136c:	211b      	movs	r1, #27
 800136e:	f007 fde4 	bl	8008f3a <i2c_WriteSingleRegister>
}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <WHOIAM>:



//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Handler_t *ptrMPUAccel){
 800137a:	b580      	push	{r7, lr}
 800137c:	b084      	sub	sp, #16
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
	//Variables auxiliares
	uint8_t whoami = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	73bb      	strb	r3, [r7, #14]
	//leemos el registro WHO_AM_I correspondiente
	whoami =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, WHO_AM_I);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2175      	movs	r1, #117	; 0x75
 8001390:	4618      	mov	r0, r3
 8001392:	f007 fda1 	bl	8008ed8 <i2c_ReadSingleRegister>
 8001396:	4603      	mov	r3, r0
 8001398:	73fb      	strb	r3, [r7, #15]
	//verificamos la transacción
	whoami &= ~(0b10000001);
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80013a0:	73fb      	strb	r3, [r7, #15]
	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	085b      	lsrs	r3, r3, #1
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	bf14      	ite	ne
 80013ac:	2301      	movne	r3, #1
 80013ae:	2300      	moveq	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	73bb      	strb	r3, [r7, #14]

	return rdy;
 80013b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <readMPU>:


//Funcion para la lectura de dos registros que compone uno de los ejes de acelerometro o del giroscopio
float readMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementRead, int16_t offset)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	70fb      	strb	r3, [r7, #3]
 80013cc:	4613      	mov	r3, r2
 80013ce:	803b      	strh	r3, [r7, #0]
	//Variable para guardar la  direccion de los dos registros a leer
	uint8_t address_H = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	75fb      	strb	r3, [r7, #23]
	uint8_t address_L = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	75bb      	strb	r3, [r7, #22]
	//Creamos las variables donde almacenamos todos los datos
	uint16_t aux_H = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	81fb      	strh	r3, [r7, #14]
	uint16_t aux_L = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	81bb      	strh	r3, [r7, #12]
	int16_t   aux  = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	817b      	strh	r3, [r7, #10]
	float res  = 0;
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
	//Seleccionamos la direccion de los registros a Leer
	switch(elementRead)
 80013ea:	78fb      	ldrb	r3, [r7, #3]
 80013ec:	2b05      	cmp	r3, #5
 80013ee:	d82d      	bhi.n	800144c <readMPU+0x8c>
 80013f0:	a201      	add	r2, pc, #4	; (adr r2, 80013f8 <readMPU+0x38>)
 80013f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f6:	bf00      	nop
 80013f8:	08001411 	.word	0x08001411
 80013fc:	0800141b 	.word	0x0800141b
 8001400:	08001425 	.word	0x08001425
 8001404:	0800142f 	.word	0x0800142f
 8001408:	08001439 	.word	0x08001439
 800140c:	08001443 	.word	0x08001443
	{
		case READ_ACCEL_X:{address_H = ACCEL_XOUT_H, address_L = ACCEL_XOUT_L; break;}
 8001410:	233b      	movs	r3, #59	; 0x3b
 8001412:	75fb      	strb	r3, [r7, #23]
 8001414:	233c      	movs	r3, #60	; 0x3c
 8001416:	75bb      	strb	r3, [r7, #22]
 8001418:	e019      	b.n	800144e <readMPU+0x8e>
		case READ_ACCEL_Y:{address_H = ACCEL_YOUT_H, address_L = ACCEL_YOUT_L; break;}
 800141a:	233d      	movs	r3, #61	; 0x3d
 800141c:	75fb      	strb	r3, [r7, #23]
 800141e:	233e      	movs	r3, #62	; 0x3e
 8001420:	75bb      	strb	r3, [r7, #22]
 8001422:	e014      	b.n	800144e <readMPU+0x8e>
		case READ_ACCEL_Z:{address_H = ACCEL_ZOUT_H, address_L = ACCEL_ZOUT_L; break;}
 8001424:	233f      	movs	r3, #63	; 0x3f
 8001426:	75fb      	strb	r3, [r7, #23]
 8001428:	2340      	movs	r3, #64	; 0x40
 800142a:	75bb      	strb	r3, [r7, #22]
 800142c:	e00f      	b.n	800144e <readMPU+0x8e>
		case READ_GYRO_X:{address_H = GIRO_XOUT_H, address_L = GIRO_XOUT_L; break;}
 800142e:	2343      	movs	r3, #67	; 0x43
 8001430:	75fb      	strb	r3, [r7, #23]
 8001432:	2344      	movs	r3, #68	; 0x44
 8001434:	75bb      	strb	r3, [r7, #22]
 8001436:	e00a      	b.n	800144e <readMPU+0x8e>
		case READ_GYRO_Y:{address_H = GIRO_YOUT_H, address_L = GIRO_YOUT_L; break;}
 8001438:	2345      	movs	r3, #69	; 0x45
 800143a:	75fb      	strb	r3, [r7, #23]
 800143c:	2346      	movs	r3, #70	; 0x46
 800143e:	75bb      	strb	r3, [r7, #22]
 8001440:	e005      	b.n	800144e <readMPU+0x8e>
		case READ_GYRO_Z:{address_H = GIRO_ZOUT_H, address_L = GIRO_ZOUT_L; break;}
 8001442:	2347      	movs	r3, #71	; 0x47
 8001444:	75fb      	strb	r3, [r7, #23]
 8001446:	2348      	movs	r3, #72	; 0x48
 8001448:	75bb      	strb	r3, [r7, #22]
 800144a:	e000      	b.n	800144e <readMPU+0x8e>
		default:{ break; }
 800144c:	bf00      	nop
	}
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	aux_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_H);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	7dfa      	ldrb	r2, [r7, #23]
 8001454:	4611      	mov	r1, r2
 8001456:	4618      	mov	r0, r3
 8001458:	f007 fd3e 	bl	8008ed8 <i2c_ReadSingleRegister>
 800145c:	4603      	mov	r3, r0
 800145e:	81fb      	strh	r3, [r7, #14]
	aux_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_L);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	7dba      	ldrb	r2, [r7, #22]
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f007 fd35 	bl	8008ed8 <i2c_ReadSingleRegister>
 800146e:	4603      	mov	r3, r0
 8001470:	81bb      	strh	r3, [r7, #12]
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	aux = ((int16_t) ((aux_H << 8) | (aux_L))) - offset;
 8001472:	89fb      	ldrh	r3, [r7, #14]
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	b21a      	sxth	r2, r3
 8001478:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800147c:	4313      	orrs	r3, r2
 800147e:	b21b      	sxth	r3, r3
 8001480:	b29a      	uxth	r2, r3
 8001482:	883b      	ldrh	r3, [r7, #0]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	b29b      	uxth	r3, r3
 8001488:	817b      	strh	r3, [r7, #10]
	//Realizamos la conversion de los bytes al valor de magnitud fisica en el respectivo eje
	switch(elementRead)
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	2b02      	cmp	r3, #2
 800148e:	dc02      	bgt.n	8001496 <readMPU+0xd6>
 8001490:	2b00      	cmp	r3, #0
 8001492:	da05      	bge.n	80014a0 <readMPU+0xe0>
				case GYRO_2000 :{ res = aux/GYRO_2000_SENS; break;}
				default:{ break; }
			}
			break;
		}
		default:{ break; }
 8001494:	e0d6      	b.n	8001644 <readMPU+0x284>
 8001496:	3b03      	subs	r3, #3
	switch(elementRead)
 8001498:	2b02      	cmp	r3, #2
 800149a:	f200 80d3 	bhi.w	8001644 <readMPU+0x284>
 800149e:	e081      	b.n	80015a4 <readMPU+0x1e4>
			switch (ptrMPUAccel->fullScaleACCEL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	d87b      	bhi.n	80015a0 <readMPU+0x1e0>
 80014a8:	a201      	add	r2, pc, #4	; (adr r2, 80014b0 <readMPU+0xf0>)
 80014aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ae:	bf00      	nop
 80014b0:	080014c1 	.word	0x080014c1
 80014b4:	080014f9 	.word	0x080014f9
 80014b8:	08001531 	.word	0x08001531
 80014bc:	08001569 	.word	0x08001569
				case ACCEL_2G :{res = (aux*9.77)/ACCEL_2G_SENS; break;}
 80014c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff f845 	bl	8000554 <__aeabi_i2d>
 80014ca:	a363      	add	r3, pc, #396	; (adr r3, 8001658 <readMPU+0x298>)
 80014cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d0:	f7ff f8aa 	bl	8000628 <__aeabi_dmul>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4610      	mov	r0, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	4b5f      	ldr	r3, [pc, #380]	; (8001660 <readMPU+0x2a0>)
 80014e2:	f7ff f9cb 	bl	800087c <__aeabi_ddiv>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f7ff fb93 	bl	8000c18 <__aeabi_d2f>
 80014f2:	4603      	mov	r3, r0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	e054      	b.n	80015a2 <readMPU+0x1e2>
				case ACCEL_4G :{res = (aux*9.77)/ACCEL_4G_SENS; break;}
 80014f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f829 	bl	8000554 <__aeabi_i2d>
 8001502:	a355      	add	r3, pc, #340	; (adr r3, 8001658 <readMPU+0x298>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f88e 	bl	8000628 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	4b52      	ldr	r3, [pc, #328]	; (8001664 <readMPU+0x2a4>)
 800151a:	f7ff f9af 	bl	800087c <__aeabi_ddiv>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fb77 	bl	8000c18 <__aeabi_d2f>
 800152a:	4603      	mov	r3, r0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	e038      	b.n	80015a2 <readMPU+0x1e2>
				case ACCEL_8G :{res = (aux*9.77)/ACCEL_8G_SENS; break;}
 8001530:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff f80d 	bl	8000554 <__aeabi_i2d>
 800153a:	a347      	add	r3, pc, #284	; (adr r3, 8001658 <readMPU+0x298>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	f7ff f872 	bl	8000628 <__aeabi_dmul>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	4b45      	ldr	r3, [pc, #276]	; (8001668 <readMPU+0x2a8>)
 8001552:	f7ff f993 	bl	800087c <__aeabi_ddiv>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff fb5b 	bl	8000c18 <__aeabi_d2f>
 8001562:	4603      	mov	r3, r0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	e01c      	b.n	80015a2 <readMPU+0x1e2>
				case ACCEL_16G :{res = (aux*9.77)/ACCEL_16G_SENS; break;}
 8001568:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe fff1 	bl	8000554 <__aeabi_i2d>
 8001572:	a339      	add	r3, pc, #228	; (adr r3, 8001658 <readMPU+0x298>)
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	f7ff f856 	bl	8000628 <__aeabi_dmul>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	4b38      	ldr	r3, [pc, #224]	; (800166c <readMPU+0x2ac>)
 800158a:	f7ff f977 	bl	800087c <__aeabi_ddiv>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fb3f 	bl	8000c18 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	e000      	b.n	80015a2 <readMPU+0x1e2>
				default:{ break; }
 80015a0:	bf00      	nop
			break;
 80015a2:	e050      	b.n	8001646 <readMPU+0x286>
			switch (ptrMPUAccel->fullScaleGYRO)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	785b      	ldrb	r3, [r3, #1]
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d849      	bhi.n	8001640 <readMPU+0x280>
 80015ac:	a201      	add	r2, pc, #4	; (adr r2, 80015b4 <readMPU+0x1f4>)
 80015ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b2:	bf00      	nop
 80015b4:	080015c5 	.word	0x080015c5
 80015b8:	080015e5 	.word	0x080015e5
 80015bc:	08001605 	.word	0x08001605
 80015c0:	08001625 	.word	0x08001625
				case GYRO_250 :{ res = aux/GYRO_250_SENS; break;}
 80015c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015c8:	4a29      	ldr	r2, [pc, #164]	; (8001670 <readMPU+0x2b0>)
 80015ca:	fb82 1203 	smull	r1, r2, r2, r3
 80015ce:	1152      	asrs	r2, r2, #5
 80015d0:	17db      	asrs	r3, r3, #31
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	ee07 3a90 	vmov	s15, r3
 80015da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015de:	edc7 7a04 	vstr	s15, [r7, #16]
 80015e2:	e02e      	b.n	8001642 <readMPU+0x282>
				case GYRO_500 :{ res = aux/GYRO_500_SENS; break;}
 80015e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015e8:	4a22      	ldr	r2, [pc, #136]	; (8001674 <readMPU+0x2b4>)
 80015ea:	fb82 1203 	smull	r1, r2, r2, r3
 80015ee:	1112      	asrs	r2, r2, #4
 80015f0:	17db      	asrs	r3, r3, #31
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015fe:	edc7 7a04 	vstr	s15, [r7, #16]
 8001602:	e01e      	b.n	8001642 <readMPU+0x282>
				case GYRO_1000 :{ res = aux/GYRO_1000_SENS; break;}
 8001604:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001608:	4a1a      	ldr	r2, [pc, #104]	; (8001674 <readMPU+0x2b4>)
 800160a:	fb82 1203 	smull	r1, r2, r2, r3
 800160e:	10d2      	asrs	r2, r2, #3
 8001610:	17db      	asrs	r3, r3, #31
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	b21b      	sxth	r3, r3
 8001616:	ee07 3a90 	vmov	s15, r3
 800161a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161e:	edc7 7a04 	vstr	s15, [r7, #16]
 8001622:	e00e      	b.n	8001642 <readMPU+0x282>
				case GYRO_2000 :{ res = aux/GYRO_2000_SENS; break;}
 8001624:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001628:	2b00      	cmp	r3, #0
 800162a:	da00      	bge.n	800162e <readMPU+0x26e>
 800162c:	330f      	adds	r3, #15
 800162e:	111b      	asrs	r3, r3, #4
 8001630:	b21b      	sxth	r3, r3
 8001632:	ee07 3a90 	vmov	s15, r3
 8001636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800163a:	edc7 7a04 	vstr	s15, [r7, #16]
 800163e:	e000      	b.n	8001642 <readMPU+0x282>
				default:{ break; }
 8001640:	bf00      	nop
			break;
 8001642:	e000      	b.n	8001646 <readMPU+0x286>
		default:{ break; }
 8001644:	bf00      	nop
	}
	//Retornamos valor
	return res;
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	ee07 3a90 	vmov	s15, r3
}
 800164c:	eeb0 0a67 	vmov.f32	s0, s15
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	70a3d70a 	.word	0x70a3d70a
 800165c:	40238a3d 	.word	0x40238a3d
 8001660:	40d00000 	.word	0x40d00000
 8001664:	40c00000 	.word	0x40c00000
 8001668:	40b00000 	.word	0x40b00000
 800166c:	40a00000 	.word	0x40a00000
 8001670:	3e88cb3d 	.word	0x3e88cb3d
 8001674:	3e0f83e1 	.word	0x3e0f83e1

08001678 <readCalibrationMPU>:

//Funcion para en el modo de calibracion para la lectura de dos registros que compone uno de los ejes de acelerometro o del giroscopio
int16_t readCalibrationMPU(MPUAccel_Handler_t *ptrMPUAccel,  uint8_t elementRead)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	70fb      	strb	r3, [r7, #3]
	//Variable para guardar la  direccion de los dos registros a leer
	uint8_t address_H = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	73fb      	strb	r3, [r7, #15]
	uint8_t address_L = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	73bb      	strb	r3, [r7, #14]
	//Creamos las variables donde almacenamos todos los datos
	uint16_t aux_H = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	81bb      	strh	r3, [r7, #12]
	uint16_t aux_L = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	817b      	strh	r3, [r7, #10]
	int16_t   aux  = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	813b      	strh	r3, [r7, #8]
	//Seleccionamos la direccion de los registros a Leer
	switch(elementRead)
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	2b05      	cmp	r3, #5
 800169c:	d82c      	bhi.n	80016f8 <readCalibrationMPU+0x80>
 800169e:	a201      	add	r2, pc, #4	; (adr r2, 80016a4 <readCalibrationMPU+0x2c>)
 80016a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a4:	080016bd 	.word	0x080016bd
 80016a8:	080016c7 	.word	0x080016c7
 80016ac:	080016d1 	.word	0x080016d1
 80016b0:	080016db 	.word	0x080016db
 80016b4:	080016e5 	.word	0x080016e5
 80016b8:	080016ef 	.word	0x080016ef
	{
		case READ_ACCEL_X:{address_H = ACCEL_XOUT_H, address_L = ACCEL_XOUT_L; break;}
 80016bc:	233b      	movs	r3, #59	; 0x3b
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	233c      	movs	r3, #60	; 0x3c
 80016c2:	73bb      	strb	r3, [r7, #14]
 80016c4:	e019      	b.n	80016fa <readCalibrationMPU+0x82>
		case READ_ACCEL_Y:{address_H = ACCEL_YOUT_H, address_L = ACCEL_YOUT_L; break;}
 80016c6:	233d      	movs	r3, #61	; 0x3d
 80016c8:	73fb      	strb	r3, [r7, #15]
 80016ca:	233e      	movs	r3, #62	; 0x3e
 80016cc:	73bb      	strb	r3, [r7, #14]
 80016ce:	e014      	b.n	80016fa <readCalibrationMPU+0x82>
		case READ_ACCEL_Z:{address_H = ACCEL_ZOUT_H, address_L = ACCEL_ZOUT_L; break;}
 80016d0:	233f      	movs	r3, #63	; 0x3f
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	2340      	movs	r3, #64	; 0x40
 80016d6:	73bb      	strb	r3, [r7, #14]
 80016d8:	e00f      	b.n	80016fa <readCalibrationMPU+0x82>
		case READ_GYRO_X:{address_H = GIRO_XOUT_H, address_L = GIRO_XOUT_L; break;}
 80016da:	2343      	movs	r3, #67	; 0x43
 80016dc:	73fb      	strb	r3, [r7, #15]
 80016de:	2344      	movs	r3, #68	; 0x44
 80016e0:	73bb      	strb	r3, [r7, #14]
 80016e2:	e00a      	b.n	80016fa <readCalibrationMPU+0x82>
		case READ_GYRO_Y:{address_H = GIRO_YOUT_H, address_L = GIRO_YOUT_L; break;}
 80016e4:	2345      	movs	r3, #69	; 0x45
 80016e6:	73fb      	strb	r3, [r7, #15]
 80016e8:	2346      	movs	r3, #70	; 0x46
 80016ea:	73bb      	strb	r3, [r7, #14]
 80016ec:	e005      	b.n	80016fa <readCalibrationMPU+0x82>
		case READ_GYRO_Z:{address_H = GIRO_ZOUT_H, address_L = GIRO_ZOUT_L; break;}
 80016ee:	2347      	movs	r3, #71	; 0x47
 80016f0:	73fb      	strb	r3, [r7, #15]
 80016f2:	2348      	movs	r3, #72	; 0x48
 80016f4:	73bb      	strb	r3, [r7, #14]
 80016f6:	e000      	b.n	80016fa <readCalibrationMPU+0x82>
		default:{ break; }
 80016f8:	bf00      	nop
	}
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	aux_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_H);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	7bfa      	ldrb	r2, [r7, #15]
 8001700:	4611      	mov	r1, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f007 fbe8 	bl	8008ed8 <i2c_ReadSingleRegister>
 8001708:	4603      	mov	r3, r0
 800170a:	81bb      	strh	r3, [r7, #12]
	aux_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_L);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	7bba      	ldrb	r2, [r7, #14]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f007 fbdf 	bl	8008ed8 <i2c_ReadSingleRegister>
 800171a:	4603      	mov	r3, r0
 800171c:	817b      	strh	r3, [r7, #10]
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	aux = (int16_t) ((aux_H << 8) | (aux_L));
 800171e:	89bb      	ldrh	r3, [r7, #12]
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	b21a      	sxth	r2, r3
 8001724:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001728:	4313      	orrs	r3, r2
 800172a:	813b      	strh	r3, [r7, #8]
	//Realizamos la conversion de los bytes al valor de magnitud fisica en el respectivo eje

	//Retornamos valor
	return aux;
 800172c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <calibrationMPU>:


//Funcion para la calibracion de las mediciones realizadas
float calibrationMPU(MPUAccel_Handler_t *ptrMPUAccel, BasicTimer_Handler_t *ptrBTimerHandler, uint16_t *ptrcountingTimer, uint8_t elementCalibration)
{
 8001738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800173c:	b08a      	sub	sp, #40	; 0x28
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	70fb      	strb	r3, [r7, #3]
	//Variables la ejecucion de la calibracion
	int64_t aux_sum = 0;
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint16_t num_samples = 200;
 8001754:	23c8      	movs	r3, #200	; 0xc8
 8001756:	837b      	strh	r3, [r7, #26]
	float offset = 0;
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
	//Realizacion acumulacion de valores
	for (int i = 0; i < num_samples; i++)
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	e019      	b.n	8001798 <calibrationMPU+0x60>
	{
		//Lectura del registro respectivo y acumulacion
		aux_sum += readCalibrationMPU(ptrMPUAccel, elementCalibration);
 8001764:	78fb      	ldrb	r3, [r7, #3]
 8001766:	4619      	mov	r1, r3
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f7ff ff85 	bl	8001678 <readCalibrationMPU>
 800176e:	4603      	mov	r3, r0
 8001770:	b21b      	sxth	r3, r3
 8001772:	17da      	asrs	r2, r3, #31
 8001774:	461c      	mov	r4, r3
 8001776:	4615      	mov	r5, r2
 8001778:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800177c:	eb12 0804 	adds.w	r8, r2, r4
 8001780:	eb43 0905 	adc.w	r9, r3, r5
 8001784:	e9c7 8908 	strd	r8, r9, [r7, #32]
		//Pausa
		timer_delay(ptrBTimerHandler, ptrcountingTimer, 1);
 8001788:	2201      	movs	r2, #1
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	68b8      	ldr	r0, [r7, #8]
 800178e:	f005 fee9 	bl	8007564 <timer_delay>
	for (int i = 0; i < num_samples; i++)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3301      	adds	r3, #1
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	8b7b      	ldrh	r3, [r7, #26]
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	429a      	cmp	r2, r3
 800179e:	dbe1      	blt.n	8001764 <calibrationMPU+0x2c>
	}
	//Promedio del eje medido
	 offset = aux_sum/num_samples;
 80017a0:	8b7b      	ldrh	r3, [r7, #26]
 80017a2:	2200      	movs	r2, #0
 80017a4:	469a      	mov	sl, r3
 80017a6:	4693      	mov	fp, r2
 80017a8:	4652      	mov	r2, sl
 80017aa:	465b      	mov	r3, fp
 80017ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017b0:	f7ff fb90 	bl	8000ed4 <__aeabi_ldivmod>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	f7ff fb4c 	bl	8000e58 <__aeabi_l2f>
 80017c0:	4603      	mov	r3, r0
 80017c2:	617b      	str	r3, [r7, #20]
	//Retornar valor
	return offset;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	ee07 3a90 	vmov	s15, r3
}
 80017ca:	eeb0 0a67 	vmov.f32	s0, s15
 80017ce:	3728      	adds	r7, #40	; 0x28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080017d8 <getAngle>:


//Funcion para calcular el nuevo angulo de uno de los ejes del girsocopio
float getAngle(MPUAccel_Handler_t *ptrMPUAccel, uint8_t timer, float ang_init, uint8_t axis, int16_t offset_Axis)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	4608      	mov	r0, r1
 80017e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80017e6:	4611      	mov	r1, r2
 80017e8:	461a      	mov	r2, r3
 80017ea:	4603      	mov	r3, r0
 80017ec:	72fb      	strb	r3, [r7, #11]
 80017ee:	460b      	mov	r3, r1
 80017f0:	72bb      	strb	r3, [r7, #10]
 80017f2:	4613      	mov	r3, r2
 80017f4:	813b      	strh	r3, [r7, #8]
	//Lectura velocidad angular
	float w_Angular= readMPU(ptrMPUAccel, axis, offset_Axis);
 80017f6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80017fa:	7abb      	ldrb	r3, [r7, #10]
 80017fc:	4619      	mov	r1, r3
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f7ff fdde 	bl	80013c0 <readMPU>
 8001804:	ed87 0a05 	vstr	s0, [r7, #20]
	//Calculo angulo
	float ang = ang_init + (w_Angular*timer)/1000;
 8001808:	7afb      	ldrb	r3, [r7, #11]
 800180a:	ee07 3a90 	vmov	s15, r3
 800180e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001812:	edd7 7a05 	vldr	s15, [r7, #20]
 8001816:	ee27 7a27 	vmul.f32	s14, s14, s15
 800181a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001840 <getAngle+0x68>
 800181e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001822:	ed97 7a01 	vldr	s14, [r7, #4]
 8001826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182a:	edc7 7a04 	vstr	s15, [r7, #16]

	return ang;
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	ee07 3a90 	vmov	s15, r3
}
 8001834:	eeb0 0a67 	vmov.f32	s0, s15
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	447a0000 	.word	0x447a0000

08001844 <updateDuttyMotor>:
#include <MotorDriver.h>


//Funcion para actualizar el dutty del pwm
void updateDuttyMotor(Motor_Handler_t *ptrMotorHandler,  float newValue)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	ed87 0a00 	vstr	s0, [r7]
		//Guardar valor del dutty
		ptrMotorHandler->configMotor.dutty = newValue;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	631a      	str	r2, [r3, #48]	; 0x30
		//Actualizamos el valor del dutty
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001860:	eeb0 0a67 	vmov.f32	s0, s15
 8001864:	4610      	mov	r0, r2
 8001866:	f007 fef5 	bl	8009654 <updateDuttyCyclePercentageFloat>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <updateDirMotor>:
		updateFrequencyTimer(ptrBTimerHandler, *(ptrMotorHandler->configMotor.frecuency));
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
}

void updateDirMotor(Motor_Handler_t *ptrMotorHandler)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
		//Cambiar el valor de la direccion
		ptrMotorHandler->configMotor.dir = (~ptrMotorHandler->configMotor.dir)&(0x01);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	bf0c      	ite	eq
 8001888:	2301      	moveq	r3, #1
 800188a:	2300      	movne	r3, #0
 800188c:	b2db      	uxtb	r3, r3
 800188e:	461a      	mov	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		//Cambiamos la direccion del motor
		GPIO_writePin(ptrMotorHandler->phandlerGPIOIN, ptrMotorHandler->configMotor.dir&SET);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	4619      	mov	r1, r3
 80018a8:	4610      	mov	r0, r2
 80018aa:	f007 f91f 	bl	8008aec <GPIO_writePin>
		statusPolarityPWM(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dir&SET);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	4619      	mov	r1, r3
 80018c0:	4610      	mov	r0, r2
 80018c2:	f007 fe01 	bl	80094c8 <statusPolarityPWM>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <build_Operation>:
#include <math.h>


//-------------------------Funcion para la definicion de operaciones--------------------------
void build_Operation(Parameters_Operation_t *prtList, Parameter_build_t *prtbuild, double finishline_x, double finishline_y)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08c      	sub	sp, #48	; 0x30
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6178      	str	r0, [r7, #20]
 80018d8:	6139      	str	r1, [r7, #16]
 80018da:	ed87 0b02 	vstr	d0, [r7, #8]
 80018de:	ed87 1b00 	vstr	d1, [r7]
	//Definicion el vector director
	double delta[2] = {finishline_x - prtbuild->initline_x, finishline_y - prtbuild->initline_y};
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018ec:	f7fe fce4 	bl	80002b8 <__aeabi_dsub>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001902:	f7fe fcd9 	bl	80002b8 <__aeabi_dsub>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	//Calculo angululo entre vectores directores
	double grad_turn_res = calculed_ang_turn(prtbuild->delta_before, delta);
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	3310      	adds	r3, #16
 8001912:	f107 0218 	add.w	r2, r7, #24
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f000 fa65 	bl	8001de8 <calculed_ang_turn>
 800191e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	//condicional de cambio de angulo
	if(grad_turn_res == 0)
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800192e:	f7ff f8e3 	bl	8000af8 <__aeabi_dcmpeq>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00e      	beq.n	8001956 <build_Operation+0x86>
	{
		//agregar operacion de linea recta
		 add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0);
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800193e:	ed9f 2b2a 	vldr	d2, [pc, #168]	; 80019e8 <build_Operation+0x118>
 8001942:	ed97 1b00 	vldr	d1, [r7]
 8001946:	ed97 0b02 	vldr	d0, [r7, #8]
 800194a:	2201      	movs	r2, #1
 800194c:	4619      	mov	r1, r3
 800194e:	6978      	ldr	r0, [r7, #20]
 8001950:	f000 f84e 	bl	80019f0 <add_Operation>
 8001954:	e030      	b.n	80019b8 <build_Operation+0xe8>
	}
	else
	{
		//Agregar operacion de rotacion
		if(prtbuild->routelist>0){ prtbuild->number_operation++; }
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800195c:	2b00      	cmp	r3, #0
 800195e:	d007      	beq.n	8001970 <build_Operation+0xa0>
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001966:	3301      	adds	r3, #1
 8001968:	b2da      	uxtb	r2, r3
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		add_Operation(prtList, prtbuild->number_operation, TURN, 0, 0, grad_turn_res);
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001976:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800197a:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80019e8 <build_Operation+0x118>
 800197e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80019e8 <build_Operation+0x118>
 8001982:	2202      	movs	r2, #2
 8001984:	4619      	mov	r1, r3
 8001986:	6978      	ldr	r0, [r7, #20]
 8001988:	f000 f832 	bl	80019f0 <add_Operation>
		//agregar operacion de linea recta
		prtbuild->number_operation++;
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001992:	3301      	adds	r3, #1
 8001994:	b2da      	uxtb	r2, r3
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0);
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80019a2:	ed9f 2b11 	vldr	d2, [pc, #68]	; 80019e8 <build_Operation+0x118>
 80019a6:	ed97 1b00 	vldr	d1, [r7]
 80019aa:	ed97 0b02 	vldr	d0, [r7, #8]
 80019ae:	2201      	movs	r2, #1
 80019b0:	4619      	mov	r1, r3
 80019b2:	6978      	ldr	r0, [r7, #20]
 80019b4:	f000 f81c 	bl	80019f0 <add_Operation>
	}
	//Se redefine los valores iniciales
	prtbuild->delta_before[0] = delta[0];
 80019b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019bc:	6939      	ldr	r1, [r7, #16]
 80019be:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtbuild->delta_before[1] = delta[1];
 80019c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019c6:	6939      	ldr	r1, [r7, #16]
 80019c8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	prtbuild->initline_x = finishline_x;
 80019cc:	6939      	ldr	r1, [r7, #16]
 80019ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019d2:	e9c1 2300 	strd	r2, r3, [r1]
	prtbuild->initline_y = finishline_y;
 80019d6:	6939      	ldr	r1, [r7, #16]
 80019d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019dc:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80019e0:	bf00      	nop
 80019e2:	3730      	adds	r7, #48	; 0x30
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
	...

080019f0 <add_Operation>:

void add_Operation(Parameters_Operation_t *prtList, uint8_t num_operation, uint8_t type_operation, double coor_x, double coor_y, double grad_turn)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	61f8      	str	r0, [r7, #28]
 80019f8:	460b      	mov	r3, r1
 80019fa:	ed87 0b04 	vstr	d0, [r7, #16]
 80019fe:	ed87 1b02 	vstr	d1, [r7, #8]
 8001a02:	ed87 2b00 	vstr	d2, [r7]
 8001a06:	76fb      	strb	r3, [r7, #27]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	76bb      	strb	r3, [r7, #26]
	prtList[num_operation].operacion = type_operation;
 8001a0c:	7efb      	ldrb	r3, [r7, #27]
 8001a0e:	015b      	lsls	r3, r3, #5
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	4413      	add	r3, r2
 8001a14:	7eba      	ldrb	r2, [r7, #26]
 8001a16:	701a      	strb	r2, [r3, #0]
	prtList[num_operation].x_destination = coor_x;
 8001a18:	7efb      	ldrb	r3, [r7, #27]
 8001a1a:	015b      	lsls	r3, r3, #5
 8001a1c:	69fa      	ldr	r2, [r7, #28]
 8001a1e:	18d1      	adds	r1, r2, r3
 8001a20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a24:	e9c1 2302 	strd	r2, r3, [r1, #8]
	prtList[num_operation].y_destination = coor_y;
 8001a28:	7efb      	ldrb	r3, [r7, #27]
 8001a2a:	015b      	lsls	r3, r3, #5
 8001a2c:	69fa      	ldr	r2, [r7, #28]
 8001a2e:	18d1      	adds	r1, r2, r3
 8001a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a34:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtList[num_operation].grad_Rotative = grad_turn;
 8001a38:	7efb      	ldrb	r3, [r7, #27]
 8001a3a:	015b      	lsls	r3, r3, #5
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	18d1      	adds	r1, r2, r3
 8001a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a44:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001a48:	bf00      	nop
 8001a4a:	3724      	adds	r7, #36	; 0x24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	0000      	movs	r0, r0
	...

08001a58 <change_position>:


//-----------------Funciones para definir los parametros de la poscion teorica--------------
void change_position(Parameters_Path_t *ptrParameterPath, int distance, double starcoor_x, double starcoor_y)
{
 8001a58:	b5b0      	push	{r4, r5, r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6178      	str	r0, [r7, #20]
 8001a60:	6139      	str	r1, [r7, #16]
 8001a62:	ed87 0b02 	vstr	d0, [r7, #8]
 8001a66:	ed87 1b00 	vstr	d1, [r7]
	//Definimos la distancia
	 ptrParameterPath->line_Distance = distance;                  //[mm]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	641a      	str	r2, [r3, #64]	; 0x40
	//Calculamos la posicicion
	double pot_x = ptrParameterPath->line_Distance*cos((ptrParameterPath->rotative_Grad*M_PI)/180);
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe fd6d 	bl	8000554 <__aeabi_i2d>
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	460d      	mov	r5, r1
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fd66 	bl	8000554 <__aeabi_i2d>
 8001a88:	a33b      	add	r3, pc, #236	; (adr r3, 8001b78 <change_position+0x120>)
 8001a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8e:	f7fe fdcb 	bl	8000628 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	4b38      	ldr	r3, [pc, #224]	; (8001b80 <change_position+0x128>)
 8001aa0:	f7fe feec 	bl	800087c <__aeabi_ddiv>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	ec43 2b17 	vmov	d7, r2, r3
 8001aac:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab0:	eef0 0a67 	vmov.f32	s1, s15
 8001ab4:	f00d fbc4 	bl	800f240 <cos>
 8001ab8:	ec53 2b10 	vmov	r2, r3, d0
 8001abc:	4620      	mov	r0, r4
 8001abe:	4629      	mov	r1, r5
 8001ac0:	f7fe fdb2 	bl	8000628 <__aeabi_dmul>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double pot_y = ptrParameterPath->line_Distance*sin((ptrParameterPath->rotative_Grad*M_PI)/180);
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fd3f 	bl	8000554 <__aeabi_i2d>
 8001ad6:	4604      	mov	r4, r0
 8001ad8:	460d      	mov	r5, r1
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fd38 	bl	8000554 <__aeabi_i2d>
 8001ae4:	a324      	add	r3, pc, #144	; (adr r3, 8001b78 <change_position+0x120>)
 8001ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aea:	f7fe fd9d 	bl	8000628 <__aeabi_dmul>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <change_position+0x128>)
 8001afc:	f7fe febe 	bl	800087c <__aeabi_ddiv>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	ec43 2b17 	vmov	d7, r2, r3
 8001b08:	eeb0 0a47 	vmov.f32	s0, s14
 8001b0c:	eef0 0a67 	vmov.f32	s1, s15
 8001b10:	f00d fbea 	bl	800f2e8 <sin>
 8001b14:	ec53 2b10 	vmov	r2, r3, d0
 8001b18:	4620      	mov	r0, r4
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f7fe fd84 	bl	8000628 <__aeabi_dmul>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Guardamos Coordenadas iniciales
	ptrParameterPath->start_position_x = starcoor_x;
 8001b28:	6979      	ldr	r1, [r7, #20]
 8001b2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b2e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	ptrParameterPath->start_position_y = starcoor_y;
 8001b32:	6979      	ldr	r1, [r7, #20]
 8001b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b38:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	//Definimos la nueva posicion de llegada
	ptrParameterPath->goal_Position_x += pot_x;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001b42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b46:	f7fe fbb9 	bl	80002bc <__adddf3>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	6979      	ldr	r1, [r7, #20]
 8001b50:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrParameterPath->goal_Position_y += pot_y;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001b5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5e:	f7fe fbad 	bl	80002bc <__adddf3>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	6979      	ldr	r1, [r7, #20]
 8001b68:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
}
 8001b6c:	bf00      	nop
 8001b6e:	3728      	adds	r7, #40	; 0x28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bdb0      	pop	{r4, r5, r7, pc}
 8001b74:	f3af 8000 	nop.w
 8001b78:	54442d18 	.word	0x54442d18
 8001b7c:	400921fb 	.word	0x400921fb
 8001b80:	40668000 	.word	0x40668000
 8001b84:	00000000 	.word	0x00000000

08001b88 <calculation_parameter_distance>:

}

//-------------Funcion para calcular los parametros del calculo de la distancia---------------
void calculation_parameter_distance(Parameters_Path_t  *ptrParameterPath)
{
 8001b88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b8c:	b08a      	sub	sp, #40	; 0x28
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6178      	str	r0, [r7, #20]
	//Calculo del vector director de la recta
	double a = ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001b9e:	f7fe fb8b 	bl	80002b8 <__aeabi_dsub>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double b = ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001bb6:	f7fe fb7f 	bl	80002b8 <__aeabi_dsub>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//definicion de la magnitud de director
	ptrParameterPath->parametersStraight.magnitude_d = sqrt(pow(a,2)+pow(b,2));
 8001bc2:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8001cd0 <calculation_parameter_distance+0x148>
 8001bc6:	ed97 0b08 	vldr	d0, [r7, #32]
 8001bca:	f00d fc1b 	bl	800f404 <pow>
 8001bce:	ec59 8b10 	vmov	r8, r9, d0
 8001bd2:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8001cd0 <calculation_parameter_distance+0x148>
 8001bd6:	ed97 0b06 	vldr	d0, [r7, #24]
 8001bda:	f00d fc13 	bl	800f404 <pow>
 8001bde:	ec53 2b10 	vmov	r2, r3, d0
 8001be2:	4640      	mov	r0, r8
 8001be4:	4649      	mov	r1, r9
 8001be6:	f7fe fb69 	bl	80002bc <__adddf3>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	ec43 2b17 	vmov	d7, r2, r3
 8001bf2:	eeb0 0a47 	vmov.f32	s0, s14
 8001bf6:	eef0 0a67 	vmov.f32	s1, s15
 8001bfa:	f00d fc73 	bl	800f4e4 <sqrt>
 8001bfe:	eeb0 7a40 	vmov.f32	s14, s0
 8001c02:	eef0 7a60 	vmov.f32	s15, s1
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	ed83 7b00 	vstr	d7, [r3]
	//definicion de los parametros para el calculo de la magnitud de la proyeccion sobre la recta
	ptrParameterPath->parametersStraight.proy_A = a;
 8001c0c:	6979      	ldr	r1, [r7, #20]
 8001c0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c12:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrParameterPath->parametersStraight.proy_B = b;
 8001c16:	6979      	ldr	r1, [r7, #20]
 8001c18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c1c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrParameterPath->parametersStraight.proy_C = -1*a*ptrParameterPath->start_position_x - b*ptrParameterPath->start_position_y;
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001c32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c36:	f7fe fcf7 	bl	8000628 <__aeabi_dmul>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4690      	mov	r8, r2
 8001c40:	4699      	mov	r9, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c4c:	f7fe fcec 	bl	8000628 <__aeabi_dmul>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4640      	mov	r0, r8
 8001c56:	4649      	mov	r1, r9
 8001c58:	f7fe fb2e 	bl	80002b8 <__aeabi_dsub>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	6979      	ldr	r1, [r7, #20]
 8001c62:	e9c1 2306 	strd	r2, r3, [r1, #24]
	//definicion de los parametros para el calculo de la distancia del punto a la recta
	ptrParameterPath->parametersStraight.dis_point_A = b;
 8001c66:	6979      	ldr	r1, [r7, #20]
 8001c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c6c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrParameterPath->parametersStraight.dis_point_B = -1*a;
 8001c70:	6a3c      	ldr	r4, [r7, #32]
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	ptrParameterPath->parametersStraight.dis_point_C = -1*b*ptrParameterPath->start_position_x + a*ptrParameterPath->start_position_y;
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001c90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c94:	f7fe fcc8 	bl	8000628 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4614      	mov	r4, r2
 8001c9e:	461d      	mov	r5, r3
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001ca6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001caa:	f7fe fcbd 	bl	8000628 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	f7fe fb01 	bl	80002bc <__adddf3>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	6979      	ldr	r1, [r7, #20]
 8001cc0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8001cc4:	bf00      	nop
 8001cc6:	3728      	adds	r7, #40	; 0x28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cce:	bf00      	nop
 8001cd0:	00000000 	.word	0x00000000
 8001cd4:	40000000 	.word	0x40000000

08001cd8 <distance_to_straight_line>:

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double position_x, double position_y)
{
 8001cd8:	b5b0      	push	{r4, r5, r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6178      	str	r0, [r7, #20]
 8001ce0:	ed87 0b02 	vstr	d0, [r7, #8]
 8001ce4:	ed87 1b00 	vstr	d1, [r7]
	//Calculo
	double distance = -1*((ptrParameterPath->parametersStraight.dis_point_A*position_x + ptrParameterPath->parametersStraight.dis_point_B*position_y
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001cee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cf2:	f7fe fc99 	bl	8000628 <__aeabi_dmul>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4614      	mov	r4, r2
 8001cfc:	461d      	mov	r5, r3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d08:	f7fe fc8e 	bl	8000628 <__aeabi_dmul>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4620      	mov	r0, r4
 8001d12:	4629      	mov	r1, r5
 8001d14:	f7fe fad2 	bl	80002bc <__adddf3>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
			+ ptrParameterPath->parametersStraight.dis_point_C)/ptrParameterPath->parametersStraight.magnitude_d);
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001d26:	f7fe fac9 	bl	80002bc <__adddf3>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d38:	f7fe fda0 	bl	800087c <__aeabi_ddiv>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->parametersStraight.dis_point_A*position_x + ptrParameterPath->parametersStraight.dis_point_B*position_y
 8001d40:	4611      	mov	r1, r2
 8001d42:	61b9      	str	r1, [r7, #24]
 8001d44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d48:	61fb      	str	r3, [r7, #28]
	//Retornar
	return distance;
 8001d4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d4e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d52:	eeb0 0a47 	vmov.f32	s0, s14
 8001d56:	eef0 0a67 	vmov.f32	s1, s15
 8001d5a:	3720      	adds	r7, #32
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bdb0      	pop	{r4, r5, r7, pc}

08001d60 <distance_traveled>:

double distance_traveled(Parameters_Path_t  *ptrParameterPath, double position_x, double position_y)
{
 8001d60:	b5b0      	push	{r4, r5, r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6178      	str	r0, [r7, #20]
 8001d68:	ed87 0b02 	vstr	d0, [r7, #8]
 8001d6c:	ed87 1b00 	vstr	d1, [r7]
	//Calculo
	double distance_Tra = (ptrParameterPath->parametersStraight.proy_A*position_x + ptrParameterPath->parametersStraight.proy_B*position_y
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d7a:	f7fe fc55 	bl	8000628 <__aeabi_dmul>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4614      	mov	r4, r2
 8001d84:	461d      	mov	r5, r3
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001d8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d90:	f7fe fc4a 	bl	8000628 <__aeabi_dmul>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4620      	mov	r0, r4
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	f7fe fa8e 	bl	80002bc <__adddf3>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
			+ ptrParameterPath->parametersStraight.proy_C)/ptrParameterPath->parametersStraight.magnitude_d;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001dae:	f7fe fa85 	bl	80002bc <__adddf3>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4610      	mov	r0, r2
 8001db8:	4619      	mov	r1, r3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
	double distance_Tra = (ptrParameterPath->parametersStraight.proy_A*position_x + ptrParameterPath->parametersStraight.proy_B*position_y
 8001dc0:	f7fe fd5c 	bl	800087c <__aeabi_ddiv>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Retornar
	return distance_Tra;
 8001dcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dd0:	ec43 2b17 	vmov	d7, r2, r3
}
 8001dd4:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd8:	eef0 0a67 	vmov.f32	s1, s15
 8001ddc:	3720      	adds	r7, #32
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bdb0      	pop	{r4, r5, r7, pc}
 8001de2:	0000      	movs	r0, r0
 8001de4:	0000      	movs	r0, r0
	...

08001de8 <calculed_ang_turn>:


//------------------------------Funciones auxiliares-----------------------------

double calculed_ang_turn(double vector_a[2], double vector_b[2])
{
 8001de8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dec:	b08a      	sub	sp, #40	; 0x28
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
    //Calculo de los diferentes elementos
    double dot = vector_a[0]*vector_b[1]-vector_b[0]*vector_b[1];
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	3308      	adds	r3, #8
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	f7fe fc11 	bl	8000628 <__aeabi_dmul>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4690      	mov	r8, r2
 8001e0c:	4699      	mov	r9, r3
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	3308      	adds	r3, #8
 8001e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1c:	f7fe fc04 	bl	8000628 <__aeabi_dmul>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4640      	mov	r0, r8
 8001e26:	4649      	mov	r1, r9
 8001e28:	f7fe fa46 	bl	80002b8 <__aeabi_dsub>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double magvector_a = sqrt(pow(vector_a[0],2)+pow(vector_a[1],2));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	ed93 7b00 	vldr	d7, [r3]
 8001e3a:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 8001fb8 <calculed_ang_turn+0x1d0>
 8001e3e:	eeb0 0a47 	vmov.f32	s0, s14
 8001e42:	eef0 0a67 	vmov.f32	s1, s15
 8001e46:	f00d fadd 	bl	800f404 <pow>
 8001e4a:	ec59 8b10 	vmov	r8, r9, d0
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3308      	adds	r3, #8
 8001e52:	ed93 7b00 	vldr	d7, [r3]
 8001e56:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8001fb8 <calculed_ang_turn+0x1d0>
 8001e5a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e5e:	eef0 0a67 	vmov.f32	s1, s15
 8001e62:	f00d facf 	bl	800f404 <pow>
 8001e66:	ec53 2b10 	vmov	r2, r3, d0
 8001e6a:	4640      	mov	r0, r8
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	f7fe fa25 	bl	80002bc <__adddf3>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	ec43 2b17 	vmov	d7, r2, r3
 8001e7a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e7e:	eef0 0a67 	vmov.f32	s1, s15
 8001e82:	f00d fb2f 	bl	800f4e4 <sqrt>
 8001e86:	ed87 0b04 	vstr	d0, [r7, #16]
    double magvector_b = sqrt(pow(vector_b[0],2)+pow(vector_b[1],2));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	ed93 7b00 	vldr	d7, [r3]
 8001e90:	ed9f 1b49 	vldr	d1, [pc, #292]	; 8001fb8 <calculed_ang_turn+0x1d0>
 8001e94:	eeb0 0a47 	vmov.f32	s0, s14
 8001e98:	eef0 0a67 	vmov.f32	s1, s15
 8001e9c:	f00d fab2 	bl	800f404 <pow>
 8001ea0:	ec59 8b10 	vmov	r8, r9, d0
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	3308      	adds	r3, #8
 8001ea8:	ed93 7b00 	vldr	d7, [r3]
 8001eac:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8001fb8 <calculed_ang_turn+0x1d0>
 8001eb0:	eeb0 0a47 	vmov.f32	s0, s14
 8001eb4:	eef0 0a67 	vmov.f32	s1, s15
 8001eb8:	f00d faa4 	bl	800f404 <pow>
 8001ebc:	ec53 2b10 	vmov	r2, r3, d0
 8001ec0:	4640      	mov	r0, r8
 8001ec2:	4649      	mov	r1, r9
 8001ec4:	f7fe f9fa 	bl	80002bc <__adddf3>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	ec43 2b17 	vmov	d7, r2, r3
 8001ed0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ed4:	eef0 0a67 	vmov.f32	s1, s15
 8001ed8:	f00d fb04 	bl	800f4e4 <sqrt>
 8001edc:	ed87 0b02 	vstr	d0, [r7, #8]
    double ang_between_vector = acos((vector_a[0]*vector_b[0]+vector_a[1]*vector_b[1])/(magvector_b*magvector_a));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eec:	f7fe fb9c 	bl	8000628 <__aeabi_dmul>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4690      	mov	r8, r2
 8001ef6:	4699      	mov	r9, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3308      	adds	r3, #8
 8001efc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	3308      	adds	r3, #8
 8001f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f08:	f7fe fb8e 	bl	8000628 <__aeabi_dmul>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4640      	mov	r0, r8
 8001f12:	4649      	mov	r1, r9
 8001f14:	f7fe f9d2 	bl	80002bc <__adddf3>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4690      	mov	r8, r2
 8001f1e:	4699      	mov	r9, r3
 8001f20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f28:	f7fe fb7e 	bl	8000628 <__aeabi_dmul>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4640      	mov	r0, r8
 8001f32:	4649      	mov	r1, r9
 8001f34:	f7fe fca2 	bl	800087c <__aeabi_ddiv>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	ec43 2b17 	vmov	d7, r2, r3
 8001f40:	eeb0 0a47 	vmov.f32	s0, s14
 8001f44:	eef0 0a67 	vmov.f32	s1, s15
 8001f48:	f00d fa26 	bl	800f398 <acos>
 8001f4c:	ed87 0b08 	vstr	d0, [r7, #32]
    //conversion a grados
    ang_between_vector = (ang_between_vector*180)/M_PI;
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	4b1c      	ldr	r3, [pc, #112]	; (8001fc8 <calculed_ang_turn+0x1e0>)
 8001f56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f5a:	f7fe fb65 	bl	8000628 <__aeabi_dmul>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	a316      	add	r3, pc, #88	; (adr r3, 8001fc0 <calculed_ang_turn+0x1d8>)
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	f7fe fc86 	bl	800087c <__aeabi_ddiv>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	e9c7 2308 	strd	r2, r3, [r7, #32]
    //agregamos la direccion de giro
    if(dot<0){ ang_between_vector = -ang_between_vector;}
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	f04f 0300 	mov.w	r3, #0
 8001f80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f84:	f7fe fdc2 	bl	8000b0c <__aeabi_dcmplt>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <calculed_ang_turn+0x1b2>
 8001f8e:	6a3c      	ldr	r4, [r7, #32]
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f96:	e9c7 4508 	strd	r4, r5, [r7, #32]
    //Retornar valor
    return ang_between_vector;
 8001f9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f9e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001fa2:	eeb0 0a47 	vmov.f32	s0, s14
 8001fa6:	eef0 0a67 	vmov.f32	s1, s15
 8001faa:	3728      	adds	r7, #40	; 0x28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fb2:	bf00      	nop
 8001fb4:	f3af 8000 	nop.w
 8001fb8:	00000000 	.word	0x00000000
 8001fbc:	40000000 	.word	0x40000000
 8001fc0:	54442d18 	.word	0x54442d18
 8001fc4:	400921fb 	.word	0x400921fb
 8001fc8:	40668000 	.word	0x40668000
 8001fcc:	00000000 	.word	0x00000000

08001fd0 <main>:
//Variables adicionales aplicacion
state_t next_state = sMenuOperation;


int main(void)
{
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b093      	sub	sp, #76	; 0x4c
 8001fd4:	af02      	add	r7, sp, #8
	//Incrementamos la velocidad de reloj del sistema
	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 8001fd6:	2364      	movs	r3, #100	; 0x64
 8001fd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	configPLL(clock);
 8001fdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f006 ffcd 	bl	8008f80 <configPLL>
	//Configuracion inicial del sistema
	initSystem();
 8001fe6:	f000 fa8f 	bl	8002508 <initSystem>
	//Activamos la unidad de punto flotante (FPU)
	SCB->CPACR    |= (0xF << 20);
 8001fea:	4ba3      	ldr	r3, [pc, #652]	; (8002278 <main+0x2a8>)
 8001fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff0:	4aa1      	ldr	r2, [pc, #644]	; (8002278 <main+0x2a8>)
 8001ff2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ff6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Activamos del contador de Ticks
	DWT->CTRL    |= (1 << 0);
 8001ffa:	4ba0      	ldr	r3, [pc, #640]	; (800227c <main+0x2ac>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a9f      	ldr	r2, [pc, #636]	; (800227c <main+0x2ac>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6013      	str	r3, [r2, #0]
	//-----------------------Configuracion inicial de los Motores---------------------------------
	//Cargar configuracion de los motores
	GPIO_writePin (&handler_GPIO_MotorR_IN, SET);
 8002006:	2101      	movs	r1, #1
 8002008:	489d      	ldr	r0, [pc, #628]	; (8002280 <main+0x2b0>)
 800200a:	f006 fd6f 	bl	8008aec <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_IN, SET);
 800200e:	2101      	movs	r1, #1
 8002010:	489c      	ldr	r0, [pc, #624]	; (8002284 <main+0x2b4>)
 8002012:	f006 fd6b 	bl	8008aec <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorR_EN, SET);
 8002016:	2101      	movs	r1, #1
 8002018:	489b      	ldr	r0, [pc, #620]	; (8002288 <main+0x2b8>)
 800201a:	f006 fd67 	bl	8008aec <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_EN, SET);
 800201e:	2101      	movs	r1, #1
 8002020:	489a      	ldr	r0, [pc, #616]	; (800228c <main+0x2bc>)
 8002022:	f006 fd63 	bl	8008aec <GPIO_writePin>
	int_Config_Motor();
 8002026:	f000 fc5b 	bl	80028e0 <int_Config_Motor>
	//Calculo inicial de parametro
	cm_L = ((M_PI*DL)/(100*Ce));  //[mm/cuentas]
 800202a:	4b99      	ldr	r3, [pc, #612]	; (8002290 <main+0x2c0>)
 800202c:	4a99      	ldr	r2, [pc, #612]	; (8002294 <main+0x2c4>)
 800202e:	601a      	str	r2, [r3, #0]
	cm_R =	((M_PI*DR)/(100*Ce));  //[mm/cuentas]
 8002030:	4b99      	ldr	r3, [pc, #612]	; (8002298 <main+0x2c8>)
 8002032:	4a9a      	ldr	r2, [pc, #616]	; (800229c <main+0x2cc>)
 8002034:	601a      	str	r2, [r3, #0]
	//Calculamos el setpoint
	velSetPoint = (0.00169*duttySetPoint + 0.0619);
 8002036:	4b9a      	ldr	r3, [pc, #616]	; (80022a0 <main+0x2d0>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fa8a 	bl	8000554 <__aeabi_i2d>
 8002040:	a389      	add	r3, pc, #548	; (adr r3, 8002268 <main+0x298>)
 8002042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002046:	f7fe faef 	bl	8000628 <__aeabi_dmul>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	a387      	add	r3, pc, #540	; (adr r3, 8002270 <main+0x2a0>)
 8002054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002058:	f7fe f930 	bl	80002bc <__adddf3>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4610      	mov	r0, r2
 8002062:	4619      	mov	r1, r3
 8002064:	f7fe fdd8 	bl	8000c18 <__aeabi_d2f>
 8002068:	4603      	mov	r3, r0
 800206a:	4a8e      	ldr	r2, [pc, #568]	; (80022a4 <main+0x2d4>)
 800206c:	6013      	str	r3, [r2, #0]
	//Calculo periodo de accion
	time_accion = period_sampling*timeAction_TIMER_Sampling;
 800206e:	4b8e      	ldr	r3, [pc, #568]	; (80022a8 <main+0x2d8>)
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	b2da      	uxtb	r2, r3
 8002074:	4b8d      	ldr	r3, [pc, #564]	; (80022ac <main+0x2dc>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	fb12 f303 	smulbb	r3, r2, r3
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4b8c      	ldr	r3, [pc, #560]	; (80022b0 <main+0x2e0>)
 8002080:	701a      	strb	r2, [r3, #0]
	//--------------------------Configuramos inicia el MPU----------------------
	//Configuracion MPU
	int_MPU();
 8002082:	f000 fc13 	bl	80028ac <int_MPU>
	//Calibracion del eje Z del giroscopio
	gyro_offset = calibrationMPU(&handler_MPUAccel_MPU6050, &handler_TIMER_Delay, &countingTimer, CAL_GYRO_Z);
 8002086:	2305      	movs	r3, #5
 8002088:	4a8a      	ldr	r2, [pc, #552]	; (80022b4 <main+0x2e4>)
 800208a:	498b      	ldr	r1, [pc, #556]	; (80022b8 <main+0x2e8>)
 800208c:	488b      	ldr	r0, [pc, #556]	; (80022bc <main+0x2ec>)
 800208e:	f7ff fb53 	bl	8001738 <calibrationMPU>
 8002092:	eef0 7a40 	vmov.f32	s15, s0
 8002096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800209a:	ee17 3a90 	vmov	r3, s15
 800209e:	b21a      	sxth	r2, r3
 80020a0:	4b87      	ldr	r3, [pc, #540]	; (80022c0 <main+0x2f0>)
 80020a2:	801a      	strh	r2, [r3, #0]

	//-----------------------Inicio cofiguracion de los elemntos del kernel de FreeRTOS----------------------

	//-------------------Configuracion Task--------------
	//Tarea de mediciones de la linea recta
	xReturned = xTaskCreate(
 80020a4:	4b87      	ldr	r3, [pc, #540]	; (80022c4 <main+0x2f4>)
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	2303      	movs	r3, #3
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	2300      	movs	r3, #0
 80020ae:	22c8      	movs	r2, #200	; 0xc8
 80020b0:	4985      	ldr	r1, [pc, #532]	; (80022c8 <main+0x2f8>)
 80020b2:	4886      	ldr	r0, [pc, #536]	; (80022cc <main+0x2fc>)
 80020b4:	f002 fffc 	bl	80050b0 <xTaskCreate>
 80020b8:	4603      	mov	r3, r0
 80020ba:	4a85      	ldr	r2, [pc, #532]	; (80022d0 <main+0x300>)
 80020bc:	6013      	str	r3, [r2, #0]
	                    "Task_Measure",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    3,/* Priority at which the task is created. */
	                    &xHandleTask_Measure);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 80020be:	4b84      	ldr	r3, [pc, #528]	; (80022d0 <main+0x300>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d00a      	beq.n	80020dc <main+0x10c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80020c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ca:	f383 8811 	msr	BASEPRI, r3
 80020ce:	f3bf 8f6f 	isb	sy
 80020d2:	f3bf 8f4f 	dsb	sy
 80020d6:	63bb      	str	r3, [r7, #56]	; 0x38
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80020d8:	bf00      	nop
 80020da:	e7fe      	b.n	80020da <main+0x10a>
	//Tarea de la aplicaciones de las medicciones PID de la linea recta
	xReturned = xTaskCreate(
 80020dc:	4b7d      	ldr	r3, [pc, #500]	; (80022d4 <main+0x304>)
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	2303      	movs	r3, #3
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	2300      	movs	r3, #0
 80020e6:	22c8      	movs	r2, #200	; 0xc8
 80020e8:	497b      	ldr	r1, [pc, #492]	; (80022d8 <main+0x308>)
 80020ea:	487c      	ldr	r0, [pc, #496]	; (80022dc <main+0x30c>)
 80020ec:	f002 ffe0 	bl	80050b0 <xTaskCreate>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4a77      	ldr	r2, [pc, #476]	; (80022d0 <main+0x300>)
 80020f4:	6013      	str	r3, [r2, #0]
	                    "Task_Line_PID",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    3,/* Priority at which the task is created. */
	                    &xHandleTask_Line_PID);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 80020f6:	4b76      	ldr	r3, [pc, #472]	; (80022d0 <main+0x300>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d00a      	beq.n	8002114 <main+0x144>
        __asm volatile
 80020fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002102:	f383 8811 	msr	BASEPRI, r3
 8002106:	f3bf 8f6f 	isb	sy
 800210a:	f3bf 8f4f 	dsb	sy
 800210e:	637b      	str	r3, [r7, #52]	; 0x34
    }
 8002110:	bf00      	nop
 8002112:	e7fe      	b.n	8002112 <main+0x142>
	//Tarea que verifica si se llego a la condiccion de parada
	xReturned = xTaskCreate(
 8002114:	4b72      	ldr	r3, [pc, #456]	; (80022e0 <main+0x310>)
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	2303      	movs	r3, #3
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2300      	movs	r3, #0
 800211e:	22c8      	movs	r2, #200	; 0xc8
 8002120:	4970      	ldr	r1, [pc, #448]	; (80022e4 <main+0x314>)
 8002122:	4871      	ldr	r0, [pc, #452]	; (80022e8 <main+0x318>)
 8002124:	f002 ffc4 	bl	80050b0 <xTaskCreate>
 8002128:	4603      	mov	r3, r0
 800212a:	4a69      	ldr	r2, [pc, #420]	; (80022d0 <main+0x300>)
 800212c:	6013      	str	r3, [r2, #0]
	                    "Task_Stop_Execute",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    3,/* Priority at which the task is created. */
	                    &xHandleTask_Stop_Execute);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 800212e:	4b68      	ldr	r3, [pc, #416]	; (80022d0 <main+0x300>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d00a      	beq.n	800214c <main+0x17c>
        __asm volatile
 8002136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213a:	f383 8811 	msr	BASEPRI, r3
 800213e:	f3bf 8f6f 	isb	sy
 8002142:	f3bf 8f4f 	dsb	sy
 8002146:	633b      	str	r3, [r7, #48]	; 0x30
    }
 8002148:	bf00      	nop
 800214a:	e7fe      	b.n	800214a <main+0x17a>

	//Tarea comandos
	xReturned = xTaskCreate(
 800214c:	4b67      	ldr	r3, [pc, #412]	; (80022ec <main+0x31c>)
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	2304      	movs	r3, #4
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	2300      	movs	r3, #0
 8002156:	22c8      	movs	r2, #200	; 0xc8
 8002158:	4965      	ldr	r1, [pc, #404]	; (80022f0 <main+0x320>)
 800215a:	4866      	ldr	r0, [pc, #408]	; (80022f4 <main+0x324>)
 800215c:	f002 ffa8 	bl	80050b0 <xTaskCreate>
 8002160:	4603      	mov	r3, r0
 8002162:	4a5b      	ldr	r2, [pc, #364]	; (80022d0 <main+0x300>)
 8002164:	6013      	str	r3, [r2, #0]
	                    "Task_Commands",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    4,/* Priority at which the task is created. */
	                    &xHandleTask_Commands);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 8002166:	4b5a      	ldr	r3, [pc, #360]	; (80022d0 <main+0x300>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d00a      	beq.n	8002184 <main+0x1b4>
        __asm volatile
 800216e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002172:	f383 8811 	msr	BASEPRI, r3
 8002176:	f3bf 8f6f 	isb	sy
 800217a:	f3bf 8f4f 	dsb	sy
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8002180:	bf00      	nop
 8002182:	e7fe      	b.n	8002182 <main+0x1b2>
	//Tarea Print
	xReturned = xTaskCreate(
 8002184:	4b5c      	ldr	r3, [pc, #368]	; (80022f8 <main+0x328>)
 8002186:	9301      	str	r3, [sp, #4]
 8002188:	2304      	movs	r3, #4
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	2300      	movs	r3, #0
 800218e:	22c8      	movs	r2, #200	; 0xc8
 8002190:	495a      	ldr	r1, [pc, #360]	; (80022fc <main+0x32c>)
 8002192:	485b      	ldr	r0, [pc, #364]	; (8002300 <main+0x330>)
 8002194:	f002 ff8c 	bl	80050b0 <xTaskCreate>
 8002198:	4603      	mov	r3, r0
 800219a:	4a4d      	ldr	r2, [pc, #308]	; (80022d0 <main+0x300>)
 800219c:	6013      	str	r3, [r2, #0]
	                    "Task_Print",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    4,/* Priority at which the task is created. */
	                    &xHandleTask_Print);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 800219e:	4b4c      	ldr	r3, [pc, #304]	; (80022d0 <main+0x300>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d00a      	beq.n	80021bc <main+0x1ec>
        __asm volatile
 80021a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021aa:	f383 8811 	msr	BASEPRI, r3
 80021ae:	f3bf 8f6f 	isb	sy
 80021b2:	f3bf 8f4f 	dsb	sy
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80021b8:	bf00      	nop
 80021ba:	e7fe      	b.n	80021ba <main+0x1ea>

	//Tarea Menu
	xReturned = xTaskCreate(
 80021bc:	4b51      	ldr	r3, [pc, #324]	; (8002304 <main+0x334>)
 80021be:	9301      	str	r3, [sp, #4]
 80021c0:	2302      	movs	r3, #2
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2300      	movs	r3, #0
 80021c6:	22c8      	movs	r2, #200	; 0xc8
 80021c8:	494f      	ldr	r1, [pc, #316]	; (8002308 <main+0x338>)
 80021ca:	4850      	ldr	r0, [pc, #320]	; (800230c <main+0x33c>)
 80021cc:	f002 ff70 	bl	80050b0 <xTaskCreate>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4a3f      	ldr	r2, [pc, #252]	; (80022d0 <main+0x300>)
 80021d4:	6013      	str	r3, [r2, #0]
	                    "Task_Menu",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Menu);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 80021d6:	4b3e      	ldr	r3, [pc, #248]	; (80022d0 <main+0x300>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d00a      	beq.n	80021f4 <main+0x224>
        __asm volatile
 80021de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e2:	f383 8811 	msr	BASEPRI, r3
 80021e6:	f3bf 8f6f 	isb	sy
 80021ea:	f3bf 8f4f 	dsb	sy
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80021f0:	bf00      	nop
 80021f2:	e7fe      	b.n	80021f2 <main+0x222>
	//Tarea Line
	xReturned = xTaskCreate(
 80021f4:	4b46      	ldr	r3, [pc, #280]	; (8002310 <main+0x340>)
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	2302      	movs	r3, #2
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	2300      	movs	r3, #0
 80021fe:	22c8      	movs	r2, #200	; 0xc8
 8002200:	4944      	ldr	r1, [pc, #272]	; (8002314 <main+0x344>)
 8002202:	4845      	ldr	r0, [pc, #276]	; (8002318 <main+0x348>)
 8002204:	f002 ff54 	bl	80050b0 <xTaskCreate>
 8002208:	4603      	mov	r3, r0
 800220a:	4a31      	ldr	r2, [pc, #196]	; (80022d0 <main+0x300>)
 800220c:	6013      	str	r3, [r2, #0]
	                    "Task_Line",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Line);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 800220e:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <main+0x300>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d00a      	beq.n	800222c <main+0x25c>
        __asm volatile
 8002216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221a:	f383 8811 	msr	BASEPRI, r3
 800221e:	f3bf 8f6f 	isb	sy
 8002222:	f3bf 8f4f 	dsb	sy
 8002226:	623b      	str	r3, [r7, #32]
    }
 8002228:	bf00      	nop
 800222a:	e7fe      	b.n	800222a <main+0x25a>
	//Tarea turn itself
	xReturned = xTaskCreate(
 800222c:	4b3b      	ldr	r3, [pc, #236]	; (800231c <main+0x34c>)
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	2302      	movs	r3, #2
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2300      	movs	r3, #0
 8002236:	22c8      	movs	r2, #200	; 0xc8
 8002238:	4939      	ldr	r1, [pc, #228]	; (8002320 <main+0x350>)
 800223a:	483a      	ldr	r0, [pc, #232]	; (8002324 <main+0x354>)
 800223c:	f002 ff38 	bl	80050b0 <xTaskCreate>
 8002240:	4603      	mov	r3, r0
 8002242:	4a23      	ldr	r2, [pc, #140]	; (80022d0 <main+0x300>)
 8002244:	6013      	str	r3, [r2, #0]
	                    "Task_Turn",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Turn_itself);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 8002246:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <main+0x300>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d06c      	beq.n	8002328 <main+0x358>
        __asm volatile
 800224e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002252:	f383 8811 	msr	BASEPRI, r3
 8002256:	f3bf 8f6f 	isb	sy
 800225a:	f3bf 8f4f 	dsb	sy
 800225e:	61fb      	str	r3, [r7, #28]
    }
 8002260:	bf00      	nop
 8002262:	e7fe      	b.n	8002262 <main+0x292>
 8002264:	f3af 8000 	nop.w
 8002268:	aebc408e 	.word	0xaebc408e
 800226c:	3f5bb05f 	.word	0x3f5bb05f
 8002270:	573eab36 	.word	0x573eab36
 8002274:	3fafb15b 	.word	0x3fafb15b
 8002278:	e000ed00 	.word	0xe000ed00
 800227c:	e0001000 	.word	0xe0001000
 8002280:	200002a0 	.word	0x200002a0
 8002284:	20000314 	.word	0x20000314
 8002288:	200002ac 	.word	0x200002ac
 800228c:	20000320 	.word	0x20000320
 8002290:	200003b4 	.word	0x200003b4
 8002294:	40105fa7 	.word	0x40105fa7
 8002298:	200003b8 	.word	0x200003b8
 800229c:	400facee 	.word	0x400facee
 80022a0:	20000008 	.word	0x20000008
 80022a4:	200003b0 	.word	0x200003b0
 80022a8:	20000002 	.word	0x20000002
 80022ac:	20000001 	.word	0x20000001
 80022b0:	200003d8 	.word	0x200003d8
 80022b4:	200003ac 	.word	0x200003ac
 80022b8:	2000039c 	.word	0x2000039c
 80022bc:	2000028c 	.word	0x2000028c
 80022c0:	200003ae 	.word	0x200003ae
 80022c4:	200003f4 	.word	0x200003f4
 80022c8:	08011b18 	.word	0x08011b18
 80022cc:	08002ff1 	.word	0x08002ff1
 80022d0:	200003dc 	.word	0x200003dc
 80022d4:	200003f8 	.word	0x200003f8
 80022d8:	08011b28 	.word	0x08011b28
 80022dc:	0800334d 	.word	0x0800334d
 80022e0:	20000408 	.word	0x20000408
 80022e4:	08011b38 	.word	0x08011b38
 80022e8:	08002ee9 	.word	0x08002ee9
 80022ec:	200003e8 	.word	0x200003e8
 80022f0:	08011b4c 	.word	0x08011b4c
 80022f4:	08002b55 	.word	0x08002b55
 80022f8:	200003e4 	.word	0x200003e4
 80022fc:	08011b5c 	.word	0x08011b5c
 8002300:	08002b25 	.word	0x08002b25
 8002304:	200003e0 	.word	0x200003e0
 8002308:	08011b68 	.word	0x08011b68
 800230c:	08002b99 	.word	0x08002b99
 8002310:	200003ec 	.word	0x200003ec
 8002314:	08011b74 	.word	0x08011b74
 8002318:	08002d09 	.word	0x08002d09
 800231c:	200003fc 	.word	0x200003fc
 8002320:	08011b80 	.word	0x08011b80
 8002324:	08002d6d 	.word	0x08002d6d
	//Tarea turn itself
	xReturned = xTaskCreate(
 8002328:	4b66      	ldr	r3, [pc, #408]	; (80024c4 <main+0x4f4>)
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	2302      	movs	r3, #2
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2300      	movs	r3, #0
 8002332:	22c8      	movs	r2, #200	; 0xc8
 8002334:	4964      	ldr	r1, [pc, #400]	; (80024c8 <main+0x4f8>)
 8002336:	4865      	ldr	r0, [pc, #404]	; (80024cc <main+0x4fc>)
 8002338:	f002 feba 	bl	80050b0 <xTaskCreate>
 800233c:	4603      	mov	r3, r0
 800233e:	4a64      	ldr	r2, [pc, #400]	; (80024d0 <main+0x500>)
 8002340:	6013      	str	r3, [r2, #0]
	                    "Task_Square",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Square);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 8002342:	4b63      	ldr	r3, [pc, #396]	; (80024d0 <main+0x500>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d00a      	beq.n	8002360 <main+0x390>
        __asm volatile
 800234a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234e:	f383 8811 	msr	BASEPRI, r3
 8002352:	f3bf 8f6f 	isb	sy
 8002356:	f3bf 8f4f 	dsb	sy
 800235a:	61bb      	str	r3, [r7, #24]
    }
 800235c:	bf00      	nop
 800235e:	e7fe      	b.n	800235e <main+0x38e>
	//Tarea turn itself
	xReturned = xTaskCreate(
 8002360:	4b5c      	ldr	r3, [pc, #368]	; (80024d4 <main+0x504>)
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	2302      	movs	r3, #2
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	2300      	movs	r3, #0
 800236a:	22c8      	movs	r2, #200	; 0xc8
 800236c:	495a      	ldr	r1, [pc, #360]	; (80024d8 <main+0x508>)
 800236e:	485b      	ldr	r0, [pc, #364]	; (80024dc <main+0x50c>)
 8002370:	f002 fe9e 	bl	80050b0 <xTaskCreate>
 8002374:	4603      	mov	r3, r0
 8002376:	4a56      	ldr	r2, [pc, #344]	; (80024d0 <main+0x500>)
 8002378:	6013      	str	r3, [r2, #0]
	                    "Task_Execute_AStar",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Execute_Astar);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 800237a:	4b55      	ldr	r3, [pc, #340]	; (80024d0 <main+0x500>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d00a      	beq.n	8002398 <main+0x3c8>
        __asm volatile
 8002382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002386:	f383 8811 	msr	BASEPRI, r3
 800238a:	f3bf 8f6f 	isb	sy
 800238e:	f3bf 8f4f 	dsb	sy
 8002392:	617b      	str	r3, [r7, #20]
    }
 8002394:	bf00      	nop
 8002396:	e7fe      	b.n	8002396 <main+0x3c6>
	//Tarea stop
	xReturned = xTaskCreate(
 8002398:	4b51      	ldr	r3, [pc, #324]	; (80024e0 <main+0x510>)
 800239a:	9301      	str	r3, [sp, #4]
 800239c:	2302      	movs	r3, #2
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	2300      	movs	r3, #0
 80023a2:	22c8      	movs	r2, #200	; 0xc8
 80023a4:	494f      	ldr	r1, [pc, #316]	; (80024e4 <main+0x514>)
 80023a6:	4850      	ldr	r0, [pc, #320]	; (80024e8 <main+0x518>)
 80023a8:	f002 fe82 	bl	80050b0 <xTaskCreate>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4a48      	ldr	r2, [pc, #288]	; (80024d0 <main+0x500>)
 80023b0:	6013      	str	r3, [r2, #0]
	                    "Task_Stop",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Stop);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 80023b2:	4b47      	ldr	r3, [pc, #284]	; (80024d0 <main+0x500>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d00a      	beq.n	80023d0 <main+0x400>
        __asm volatile
 80023ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023be:	f383 8811 	msr	BASEPRI, r3
 80023c2:	f3bf 8f6f 	isb	sy
 80023c6:	f3bf 8f4f 	dsb	sy
 80023ca:	613b      	str	r3, [r7, #16]
    }
 80023cc:	bf00      	nop
 80023ce:	e7fe      	b.n	80023ce <main+0x3fe>

	//-------------------Configuracion Queue--------------
	//Cola para recibir datos por consola
	xQueue_InputData = xQueueCreate(500, sizeof(char ) );
 80023d0:	2200      	movs	r2, #0
 80023d2:	2101      	movs	r1, #1
 80023d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023d8:	f002 f83c 	bl	8004454 <xQueueGenericCreate>
 80023dc:	4603      	mov	r3, r0
 80023de:	4a43      	ldr	r2, [pc, #268]	; (80024ec <main+0x51c>)
 80023e0:	6013      	str	r3, [r2, #0]
	configASSERT(xQueue_InputData != NULL);
 80023e2:	4b42      	ldr	r3, [pc, #264]	; (80024ec <main+0x51c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10a      	bne.n	8002400 <main+0x430>
        __asm volatile
 80023ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ee:	f383 8811 	msr	BASEPRI, r3
 80023f2:	f3bf 8f6f 	isb	sy
 80023f6:	f3bf 8f4f 	dsb	sy
 80023fa:	60fb      	str	r3, [r7, #12]
    }
 80023fc:	bf00      	nop
 80023fe:	e7fe      	b.n	80023fe <main+0x42e>
	//Cola para recibir datos por consola
	xQueue_StructCommand = xQueueCreate(10, sizeof(command_t));
 8002400:	2200      	movs	r2, #0
 8002402:	2114      	movs	r1, #20
 8002404:	200a      	movs	r0, #10
 8002406:	f002 f825 	bl	8004454 <xQueueGenericCreate>
 800240a:	4603      	mov	r3, r0
 800240c:	4a38      	ldr	r2, [pc, #224]	; (80024f0 <main+0x520>)
 800240e:	6013      	str	r3, [r2, #0]
	configASSERT(xQueue_StructCommand != NULL);
 8002410:	4b37      	ldr	r3, [pc, #220]	; (80024f0 <main+0x520>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10a      	bne.n	800242e <main+0x45e>
        __asm volatile
 8002418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241c:	f383 8811 	msr	BASEPRI, r3
 8002420:	f3bf 8f6f 	isb	sy
 8002424:	f3bf 8f4f 	dsb	sy
 8002428:	60bb      	str	r3, [r7, #8]
    }
 800242a:	bf00      	nop
 800242c:	e7fe      	b.n	800242c <main+0x45c>
	//cola para enviar datos por consola
	xQueue_Print = xQueueCreate(10, sizeof(char *) );
 800242e:	2200      	movs	r2, #0
 8002430:	2104      	movs	r1, #4
 8002432:	200a      	movs	r0, #10
 8002434:	f002 f80e 	bl	8004454 <xQueueGenericCreate>
 8002438:	4603      	mov	r3, r0
 800243a:	4a2e      	ldr	r2, [pc, #184]	; (80024f4 <main+0x524>)
 800243c:	6013      	str	r3, [r2, #0]
	configASSERT(xQueue_Print != NULL);
 800243e:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <main+0x524>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10a      	bne.n	800245c <main+0x48c>
        __asm volatile
 8002446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244a:	f383 8811 	msr	BASEPRI, r3
 800244e:	f3bf 8f6f 	isb	sy
 8002452:	f3bf 8f4f 	dsb	sy
 8002456:	607b      	str	r3, [r7, #4]
    }
 8002458:	bf00      	nop
 800245a:	e7fe      	b.n	800245a <main+0x48a>
	//Cola para definir el modo de operacion
	xMailbox_Mode = xQueueCreate(1, sizeof( uint8_t ));
 800245c:	2200      	movs	r2, #0
 800245e:	2101      	movs	r1, #1
 8002460:	2001      	movs	r0, #1
 8002462:	f001 fff7 	bl	8004454 <xQueueGenericCreate>
 8002466:	4603      	mov	r3, r0
 8002468:	4a23      	ldr	r2, [pc, #140]	; (80024f8 <main+0x528>)
 800246a:	6013      	str	r3, [r2, #0]
	configASSERT(xMailbox_Mode != NULL);
 800246c:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <main+0x528>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10a      	bne.n	800248a <main+0x4ba>
        __asm volatile
 8002474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002478:	f383 8811 	msr	BASEPRI, r3
 800247c:	f3bf 8f6f 	isb	sy
 8002480:	f3bf 8f4f 	dsb	sy
 8002484:	603b      	str	r3, [r7, #0]
    }
 8002486:	bf00      	nop
 8002488:	e7fe      	b.n	8002488 <main+0x4b8>

	//-------------------Configuracion Timer--------------
	//Software Timer para el blink
	handler_led_timer = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, 0, led_state_callback);
 800248a:	4b1c      	ldr	r3, [pc, #112]	; (80024fc <main+0x52c>)
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	2300      	movs	r3, #0
 8002490:	2201      	movs	r2, #1
 8002492:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002496:	481a      	ldr	r0, [pc, #104]	; (8002500 <main+0x530>)
 8002498:	f003 feee 	bl	8006278 <xTimerCreate>
 800249c:	4603      	mov	r3, r0
 800249e:	4a19      	ldr	r2, [pc, #100]	; (8002504 <main+0x534>)
 80024a0:	6013      	str	r3, [r2, #0]
	xTimerStart(handler_led_timer, portMAX_DELAY);
 80024a2:	4b18      	ldr	r3, [pc, #96]	; (8002504 <main+0x534>)
 80024a4:	681c      	ldr	r4, [r3, #0]
 80024a6:	f003 f845 	bl	8005534 <xTaskGetTickCount>
 80024aa:	4602      	mov	r2, r0
 80024ac:	f04f 33ff 	mov.w	r3, #4294967295
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	2300      	movs	r3, #0
 80024b4:	2101      	movs	r1, #1
 80024b6:	4620      	mov	r0, r4
 80024b8:	f003 ff3a 	bl	8006330 <xTimerGenericCommand>

	//-------------------Inicializacion Scheduler--------------
	//Inicia le Scheduler a funcionar
	vTaskStartScheduler();
 80024bc:	f002 ff3e 	bl	800533c <vTaskStartScheduler>
	//-----------------------Fin cofiguracion de los elemntos del kernel de FreeRTOS----------------------

	//Si el scheduler se inicia correctamente no se ejecutada este while
	while(1)
	{
		__NOP();
 80024c0:	bf00      	nop
 80024c2:	e7fd      	b.n	80024c0 <main+0x4f0>
 80024c4:	20000400 	.word	0x20000400
 80024c8:	08011b8c 	.word	0x08011b8c
 80024cc:	08002db9 	.word	0x08002db9
 80024d0:	200003dc 	.word	0x200003dc
 80024d4:	20000404 	.word	0x20000404
 80024d8:	08011b98 	.word	0x08011b98
 80024dc:	08002e19 	.word	0x08002e19
 80024e0:	200003f0 	.word	0x200003f0
 80024e4:	08011bac 	.word	0x08011bac
 80024e8:	08002e49 	.word	0x08002e49
 80024ec:	20000414 	.word	0x20000414
 80024f0:	20000410 	.word	0x20000410
 80024f4:	2000040c 	.word	0x2000040c
 80024f8:	20000418 	.word	0x20000418
 80024fc:	080036cd 	.word	0x080036cd
 8002500:	08011bb8 	.word	0x08011bb8
 8002504:	2000041c 	.word	0x2000041c

08002508 <initSystem>:
}


//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void initSystem(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af02      	add	r7, sp, #8
	//---------------------------------Inicio de Configuracion GPIOx---------------------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_BlinkyPin.pGPIOx = GPIOA;
 800250e:	4baf      	ldr	r3, [pc, #700]	; (80027cc <initSystem+0x2c4>)
 8002510:	4aaf      	ldr	r2, [pc, #700]	; (80027d0 <initSystem+0x2c8>)
 8002512:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 8002514:	4bad      	ldr	r3, [pc, #692]	; (80027cc <initSystem+0x2c4>)
 8002516:	2205      	movs	r2, #5
 8002518:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800251a:	2300      	movs	r3, #0
 800251c:	9301      	str	r3, [sp, #4]
 800251e:	2300      	movs	r3, #0
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	2301      	movs	r3, #1
 8002524:	2200      	movs	r2, #0
 8002526:	2101      	movs	r1, #1
 8002528:	48a8      	ldr	r0, [pc, #672]	; (80027cc <initSystem+0x2c4>)
 800252a:	f006 f993 	bl	8008854 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_BlinkyPin);
 800252e:	48a7      	ldr	r0, [pc, #668]	; (80027cc <initSystem+0x2c4>)
 8002530:	f006 f9b2 	bl	8008898 <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA2----------------
	//------------AF7: USART2_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_CommTerm_TX.pGPIOx = GPIOA;
 8002534:	4ba7      	ldr	r3, [pc, #668]	; (80027d4 <initSystem+0x2cc>)
 8002536:	4aa6      	ldr	r2, [pc, #664]	; (80027d0 <initSystem+0x2c8>)
 8002538:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_CommTerm_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 800253a:	4ba6      	ldr	r3, [pc, #664]	; (80027d4 <initSystem+0x2cc>)
 800253c:	2209      	movs	r2, #9
 800253e:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_CommTerm_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8002540:	2307      	movs	r3, #7
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	2300      	movs	r3, #0
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	2301      	movs	r3, #1
 800254a:	2200      	movs	r2, #0
 800254c:	2102      	movs	r1, #2
 800254e:	48a1      	ldr	r0, [pc, #644]	; (80027d4 <initSystem+0x2cc>)
 8002550:	f006 f980 	bl	8008854 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_CommTerm_TX);
 8002554:	489f      	ldr	r0, [pc, #636]	; (80027d4 <initSystem+0x2cc>)
 8002556:	f006 f99f 	bl	8008898 <GPIO_Config>

	//---------------PIN: PA3----------------
	//------------AF7: USART2_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_CommTerm_RX.pGPIOx = GPIOA;
 800255a:	4b9f      	ldr	r3, [pc, #636]	; (80027d8 <initSystem+0x2d0>)
 800255c:	4a9c      	ldr	r2, [pc, #624]	; (80027d0 <initSystem+0x2c8>)
 800255e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_CommTerm_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 8002560:	4b9d      	ldr	r3, [pc, #628]	; (80027d8 <initSystem+0x2d0>)
 8002562:	220a      	movs	r2, #10
 8002564:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_CommTerm_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8002566:	2307      	movs	r3, #7
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	2300      	movs	r3, #0
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	2301      	movs	r3, #1
 8002570:	2200      	movs	r2, #0
 8002572:	2102      	movs	r1, #2
 8002574:	4898      	ldr	r0, [pc, #608]	; (80027d8 <initSystem+0x2d0>)
 8002576:	f006 f96d 	bl	8008854 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_CommTerm_RX);
 800257a:	4897      	ldr	r0, [pc, #604]	; (80027d8 <initSystem+0x2d0>)
 800257c:	f006 f98c 	bl	8008898 <GPIO_Config>
	//---------------------------Motor Derecho--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA0----------------
	//------------AF2: TIM5_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR.pGPIOx = GPIOA;
 8002580:	4b96      	ldr	r3, [pc, #600]	; (80027dc <initSystem+0x2d4>)
 8002582:	4a93      	ldr	r2, [pc, #588]	; (80027d0 <initSystem+0x2c8>)
 8002584:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR.GPIO_PinConfig.GPIO_PinNumber = PIN_0; 						//PIN_x, 0-15
 8002586:	4b95      	ldr	r3, [pc, #596]	; (80027dc <initSystem+0x2d4>)
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 800258c:	2302      	movs	r3, #2
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	2300      	movs	r3, #0
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	2301      	movs	r3, #1
 8002596:	2200      	movs	r2, #0
 8002598:	2102      	movs	r1, #2
 800259a:	4890      	ldr	r0, [pc, #576]	; (80027dc <initSystem+0x2d4>)
 800259c:	f006 f95a 	bl	8008854 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR);
 80025a0:	488e      	ldr	r0, [pc, #568]	; (80027dc <initSystem+0x2d4>)
 80025a2:	f006 f979 	bl	8008898 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PC12----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_IN.pGPIOx = GPIOC;
 80025a6:	4b8e      	ldr	r3, [pc, #568]	; (80027e0 <initSystem+0x2d8>)
 80025a8:	4a8e      	ldr	r2, [pc, #568]	; (80027e4 <initSystem+0x2dc>)
 80025aa:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_12; 						//PIN_x, 0-15
 80025ac:	4b8c      	ldr	r3, [pc, #560]	; (80027e0 <initSystem+0x2d8>)
 80025ae:	220c      	movs	r2, #12
 80025b0:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80025b2:	2300      	movs	r3, #0
 80025b4:	9301      	str	r3, [sp, #4]
 80025b6:	2300      	movs	r3, #0
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	2301      	movs	r3, #1
 80025bc:	2200      	movs	r2, #0
 80025be:	2101      	movs	r1, #1
 80025c0:	4887      	ldr	r0, [pc, #540]	; (80027e0 <initSystem+0x2d8>)
 80025c2:	f006 f947 	bl	8008854 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_IN);
 80025c6:	4886      	ldr	r0, [pc, #536]	; (80027e0 <initSystem+0x2d8>)
 80025c8:	f006 f966 	bl	8008898 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC10----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_EN.pGPIOx = GPIOC;
 80025cc:	4b86      	ldr	r3, [pc, #536]	; (80027e8 <initSystem+0x2e0>)
 80025ce:	4a85      	ldr	r2, [pc, #532]	; (80027e4 <initSystem+0x2dc>)
 80025d0:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 80025d2:	4b85      	ldr	r3, [pc, #532]	; (80027e8 <initSystem+0x2e0>)
 80025d4:	220a      	movs	r2, #10
 80025d6:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80025d8:	2300      	movs	r3, #0
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	2300      	movs	r3, #0
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	2301      	movs	r3, #1
 80025e2:	2200      	movs	r2, #0
 80025e4:	2101      	movs	r1, #1
 80025e6:	4880      	ldr	r0, [pc, #512]	; (80027e8 <initSystem+0x2e0>)
 80025e8:	f006 f934 	bl	8008854 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_EN);
 80025ec:	487e      	ldr	r0, [pc, #504]	; (80027e8 <initSystem+0x2e0>)
 80025ee:	f006 f953 	bl	8008898 <GPIO_Config>
	//---------------------------Motor Izquierdo--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA1----------------
	//------------AF2: TIM5_CH2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL.pGPIOx = GPIOA;
 80025f2:	4b7e      	ldr	r3, [pc, #504]	; (80027ec <initSystem+0x2e4>)
 80025f4:	4a76      	ldr	r2, [pc, #472]	; (80027d0 <initSystem+0x2c8>)
 80025f6:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL.GPIO_PinConfig.GPIO_PinNumber = PIN_1; 						//PIN_x, 0-15
 80025f8:	4b7c      	ldr	r3, [pc, #496]	; (80027ec <initSystem+0x2e4>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 80025fe:	2302      	movs	r3, #2
 8002600:	9301      	str	r3, [sp, #4]
 8002602:	2300      	movs	r3, #0
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	2301      	movs	r3, #1
 8002608:	2200      	movs	r2, #0
 800260a:	2102      	movs	r1, #2
 800260c:	4877      	ldr	r0, [pc, #476]	; (80027ec <initSystem+0x2e4>)
 800260e:	f006 f921 	bl	8008854 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL);
 8002612:	4876      	ldr	r0, [pc, #472]	; (80027ec <initSystem+0x2e4>)
 8002614:	f006 f940 	bl	8008898 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PD2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_IN.pGPIOx = GPIOD;
 8002618:	4b75      	ldr	r3, [pc, #468]	; (80027f0 <initSystem+0x2e8>)
 800261a:	4a76      	ldr	r2, [pc, #472]	; (80027f4 <initSystem+0x2ec>)
 800261c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 800261e:	4b74      	ldr	r3, [pc, #464]	; (80027f0 <initSystem+0x2e8>)
 8002620:	2202      	movs	r2, #2
 8002622:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8002624:	2300      	movs	r3, #0
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	2300      	movs	r3, #0
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2301      	movs	r3, #1
 800262e:	2200      	movs	r2, #0
 8002630:	2101      	movs	r1, #1
 8002632:	486f      	ldr	r0, [pc, #444]	; (80027f0 <initSystem+0x2e8>)
 8002634:	f006 f90e 	bl	8008854 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_IN);
 8002638:	486d      	ldr	r0, [pc, #436]	; (80027f0 <initSystem+0x2e8>)
 800263a:	f006 f92d 	bl	8008898 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC11----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_EN.pGPIOx = GPIOC;
 800263e:	4b6e      	ldr	r3, [pc, #440]	; (80027f8 <initSystem+0x2f0>)
 8002640:	4a68      	ldr	r2, [pc, #416]	; (80027e4 <initSystem+0x2dc>)
 8002642:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_11; 						//PIN_x, 0-15
 8002644:	4b6c      	ldr	r3, [pc, #432]	; (80027f8 <initSystem+0x2f0>)
 8002646:	220b      	movs	r2, #11
 8002648:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800264a:	2300      	movs	r3, #0
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	2300      	movs	r3, #0
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	2301      	movs	r3, #1
 8002654:	2200      	movs	r2, #0
 8002656:	2101      	movs	r1, #1
 8002658:	4867      	ldr	r0, [pc, #412]	; (80027f8 <initSystem+0x2f0>)
 800265a:	f006 f8fb 	bl	8008854 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_EN);
 800265e:	4866      	ldr	r0, [pc, #408]	; (80027f8 <initSystem+0x2f0>)
 8002660:	f006 f91a 	bl	8008898 <GPIO_Config>

	//---------------------------I2C--------------------------------
	//---------------PIN: PB8----------------
	//------------AF4: I2C1_SCL----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SCL_MPU6050.pGPIOx = GPIOB;
 8002664:	4b65      	ldr	r3, [pc, #404]	; (80027fc <initSystem+0x2f4>)
 8002666:	4a66      	ldr	r2, [pc, #408]	; (8002800 <initSystem+0x2f8>)
 8002668:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SCL_MPU6050.GPIO_PinConfig.GPIO_PinNumber = PIN_8; 						//PIN_x, 0-15
 800266a:	4b64      	ldr	r3, [pc, #400]	; (80027fc <initSystem+0x2f4>)
 800266c:	2208      	movs	r2, #8
 800266e:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SCL_MPU6050, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 8002670:	2304      	movs	r3, #4
 8002672:	9301      	str	r3, [sp, #4]
 8002674:	2300      	movs	r3, #0
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	2302      	movs	r3, #2
 800267a:	2201      	movs	r2, #1
 800267c:	2102      	movs	r1, #2
 800267e:	485f      	ldr	r0, [pc, #380]	; (80027fc <initSystem+0x2f4>)
 8002680:	f006 f8e8 	bl	8008854 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SCL_MPU6050);
 8002684:	485d      	ldr	r0, [pc, #372]	; (80027fc <initSystem+0x2f4>)
 8002686:	f006 f907 	bl	8008898 <GPIO_Config>

	//---------------PIN: PB9----------------
	//------------AF4: I2C1_SDA----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SDA_MPU6050.pGPIOx = GPIOB;
 800268a:	4b5e      	ldr	r3, [pc, #376]	; (8002804 <initSystem+0x2fc>)
 800268c:	4a5c      	ldr	r2, [pc, #368]	; (8002800 <initSystem+0x2f8>)
 800268e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SDA_MPU6050.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 8002690:	4b5c      	ldr	r3, [pc, #368]	; (8002804 <initSystem+0x2fc>)
 8002692:	2209      	movs	r2, #9
 8002694:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SDA_MPU6050, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 8002696:	2304      	movs	r3, #4
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	2300      	movs	r3, #0
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	2302      	movs	r3, #2
 80026a0:	2201      	movs	r2, #1
 80026a2:	2102      	movs	r1, #2
 80026a4:	4857      	ldr	r0, [pc, #348]	; (8002804 <initSystem+0x2fc>)
 80026a6:	f006 f8d5 	bl	8008854 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SDA_MPU6050);
 80026aa:	4856      	ldr	r0, [pc, #344]	; (8002804 <initSystem+0x2fc>)
 80026ac:	f006 f8f4 	bl	8008898 <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART2----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_CommTerm.ptrUSARTx = USART1;
 80026b0:	4b55      	ldr	r3, [pc, #340]	; (8002808 <initSystem+0x300>)
 80026b2:	4a56      	ldr	r2, [pc, #344]	; (800280c <initSystem+0x304>)
 80026b4:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_CommTerm.USART_Config.USART_mode = USART_MODE_RXTX ;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 80026b6:	4b54      	ldr	r3, [pc, #336]	; (8002808 <initSystem+0x300>)
 80026b8:	2202      	movs	r2, #2
 80026ba:	701a      	strb	r2, [r3, #0]
	handler_USART_CommTerm.USART_Config.USART_baudrate = USART_BAUDRATE_19200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 80026bc:	4b52      	ldr	r3, [pc, #328]	; (8002808 <initSystem+0x300>)
 80026be:	2201      	movs	r2, #1
 80026c0:	705a      	strb	r2, [r3, #1]
	handler_USART_CommTerm.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 80026c2:	4b51      	ldr	r3, [pc, #324]	; (8002808 <initSystem+0x300>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	709a      	strb	r2, [r3, #2]
	handler_USART_CommTerm.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 80026c8:	4b4f      	ldr	r3, [pc, #316]	; (8002808 <initSystem+0x300>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	70da      	strb	r2, [r3, #3]
	handler_USART_CommTerm.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 80026ce:	4b4e      	ldr	r3, [pc, #312]	; (8002808 <initSystem+0x300>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	711a      	strb	r2, [r3, #4]
	handler_USART_CommTerm.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_DISABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 80026d4:	4b4c      	ldr	r3, [pc, #304]	; (8002808 <initSystem+0x300>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	usart_Config_Init_Priority(&handler_USART_CommTerm, e_USART_PRIOPITY_6);
 80026da:	2106      	movs	r1, #6
 80026dc:	484a      	ldr	r0, [pc, #296]	; (8002808 <initSystem+0x300>)
 80026de:	f007 fa45 	bl	8009b6c <usart_Config_Init_Priority>
	USART_Config(&handler_USART_CommTerm);
 80026e2:	4849      	ldr	r0, [pc, #292]	; (8002808 <initSystem+0x300>)
 80026e4:	f007 f824 	bl	8009730 <USART_Config>

	//-------------------Fin de Configuracion USARTx-----------------------

	//---------------TIM3----------------
	//Definimos el TIMx a usar
	handler_TIMER_Sampling.ptrTIMx = TIM3;
 80026e8:	4b49      	ldr	r3, [pc, #292]	; (8002810 <initSystem+0x308>)
 80026ea:	4a4a      	ldr	r2, [pc, #296]	; (8002814 <initSystem+0x30c>)
 80026ec:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Sampling.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80026ee:	4b48      	ldr	r3, [pc, #288]	; (8002810 <initSystem+0x308>)
 80026f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026f4:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Sampling.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80026f6:	4b46      	ldr	r3, [pc, #280]	; (8002810 <initSystem+0x308>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Sampling.TIMx_Config.TIMX_period = period_sampling;   //Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80026fc:	4b46      	ldr	r3, [pc, #280]	; (8002818 <initSystem+0x310>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	4b43      	ldr	r3, [pc, #268]	; (8002810 <initSystem+0x308>)
 8002704:	605a      	str	r2, [r3, #4]
	handler_TIMER_Sampling.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 8002706:	4b42      	ldr	r3, [pc, #264]	; (8002810 <initSystem+0x308>)
 8002708:	2200      	movs	r2, #0
 800270a:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	timer_Config_Init_Priority(&handler_TIMER_Sampling, e_TIMER_PRIOPITY_6);
 800270c:	2106      	movs	r1, #6
 800270e:	4840      	ldr	r0, [pc, #256]	; (8002810 <initSystem+0x308>)
 8002710:	f004 fe60 	bl	80073d4 <timer_Config_Init_Priority>
	BasicTimer_Config(&handler_TIMER_Sampling);
 8002714:	483e      	ldr	r0, [pc, #248]	; (8002810 <initSystem+0x308>)
 8002716:	f004 fd7f 	bl	8007218 <BasicTimer_Config>

	//---------------TIM3----------------
	//Definimos el TIMx a usar
	handler_TIMER_Delay.ptrTIMx = TIM4;
 800271a:	4b40      	ldr	r3, [pc, #256]	; (800281c <initSystem+0x314>)
 800271c:	4a40      	ldr	r2, [pc, #256]	; (8002820 <initSystem+0x318>)
 800271e:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Delay.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_100us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 8002720:	4b3e      	ldr	r3, [pc, #248]	; (800281c <initSystem+0x314>)
 8002722:	2264      	movs	r2, #100	; 0x64
 8002724:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Delay.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8002726:	4b3d      	ldr	r3, [pc, #244]	; (800281c <initSystem+0x314>)
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Delay.TIMx_Config.TIMX_period = 10;   //Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 800272c:	4b3b      	ldr	r3, [pc, #236]	; (800281c <initSystem+0x314>)
 800272e:	220a      	movs	r2, #10
 8002730:	605a      	str	r2, [r3, #4]
	handler_TIMER_Delay.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 8002732:	4b3a      	ldr	r3, [pc, #232]	; (800281c <initSystem+0x314>)
 8002734:	2200      	movs	r2, #0
 8002736:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	timer_Config_Init_Priority(&handler_TIMER_Delay, e_TIMER_PRIOPITY_6);
 8002738:	2106      	movs	r1, #6
 800273a:	4838      	ldr	r0, [pc, #224]	; (800281c <initSystem+0x314>)
 800273c:	f004 fe4a 	bl	80073d4 <timer_Config_Init_Priority>
	BasicTimer_Config(&handler_TIMER_Delay);
 8002740:	4836      	ldr	r0, [pc, #216]	; (800281c <initSystem+0x314>)
 8002742:	f004 fd69 	bl	8007218 <BasicTimer_Config>

	//---------------TIM5----------------
	//Definimos el TIMx a usar
	handler_TIMER_Motor.ptrTIMx = TIM5;
 8002746:	4b37      	ldr	r3, [pc, #220]	; (8002824 <initSystem+0x31c>)
 8002748:	4a37      	ldr	r2, [pc, #220]	; (8002828 <initSystem+0x320>)
 800274a:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Motor.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_10us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 800274c:	4b35      	ldr	r3, [pc, #212]	; (8002824 <initSystem+0x31c>)
 800274e:	220a      	movs	r2, #10
 8002750:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Motor.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8002752:	4b34      	ldr	r3, [pc, #208]	; (8002824 <initSystem+0x31c>)
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Motor.TIMx_Config.TIMX_period = 100;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 8002758:	4b32      	ldr	r3, [pc, #200]	; (8002824 <initSystem+0x31c>)
 800275a:	2264      	movs	r2, #100	; 0x64
 800275c:	605a      	str	r2, [r3, #4]
	handler_TIMER_Motor.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 800275e:	4b31      	ldr	r3, [pc, #196]	; (8002824 <initSystem+0x31c>)
 8002760:	2200      	movs	r2, #0
 8002762:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Motor);
 8002764:	482f      	ldr	r0, [pc, #188]	; (8002824 <initSystem+0x31c>)
 8002766:	f004 fd57 	bl	8007218 <BasicTimer_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoR.pGPIOx = GPIOC;
 800276a:	4b30      	ldr	r3, [pc, #192]	; (800282c <initSystem+0x324>)
 800276c:	4a1d      	ldr	r2, [pc, #116]	; (80027e4 <initSystem+0x2dc>)
 800276e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoR.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8002770:	4b2e      	ldr	r3, [pc, #184]	; (800282c <initSystem+0x324>)
 8002772:	2201      	movs	r2, #1
 8002774:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoR.pGPIOHandler = &handler_GPIO_FotoR;
 8002776:	4b2e      	ldr	r3, [pc, #184]	; (8002830 <initSystem+0x328>)
 8002778:	4a2c      	ldr	r2, [pc, #176]	; (800282c <initSystem+0x324>)
 800277a:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoR.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 800277c:	4b2c      	ldr	r3, [pc, #176]	; (8002830 <initSystem+0x328>)
 800277e:	2202      	movs	r2, #2
 8002780:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	exti_Config_Int_Priority(&handler_EXTI_FotoR, e_EXTI_PRIOPITY_7);
 8002782:	2107      	movs	r1, #7
 8002784:	482a      	ldr	r0, [pc, #168]	; (8002830 <initSystem+0x328>)
 8002786:	f005 fe61 	bl	800844c <exti_Config_Int_Priority>
	extInt_Config(&handler_EXTI_FotoR);
 800278a:	4829      	ldr	r0, [pc, #164]	; (8002830 <initSystem+0x328>)
 800278c:	f004 ff50 	bl	8007630 <extInt_Config>

	//---------------PIN: PC3----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoL.pGPIOx = GPIOC;
 8002790:	4b28      	ldr	r3, [pc, #160]	; (8002834 <initSystem+0x32c>)
 8002792:	4a14      	ldr	r2, [pc, #80]	; (80027e4 <initSystem+0x2dc>)
 8002794:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoL.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8002796:	4b27      	ldr	r3, [pc, #156]	; (8002834 <initSystem+0x32c>)
 8002798:	2203      	movs	r2, #3
 800279a:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoL.pGPIOHandler = &handler_GPIO_FotoL;
 800279c:	4b26      	ldr	r3, [pc, #152]	; (8002838 <initSystem+0x330>)
 800279e:	4a25      	ldr	r2, [pc, #148]	; (8002834 <initSystem+0x32c>)
 80027a0:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoL.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 80027a2:	4b25      	ldr	r3, [pc, #148]	; (8002838 <initSystem+0x330>)
 80027a4:	2202      	movs	r2, #2
 80027a6:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	exti_Config_Int_Priority(&handler_EXTI_FotoL, e_EXTI_PRIOPITY_7);
 80027a8:	2107      	movs	r1, #7
 80027aa:	4823      	ldr	r0, [pc, #140]	; (8002838 <initSystem+0x330>)
 80027ac:	f005 fe4e 	bl	800844c <exti_Config_Int_Priority>
	extInt_Config(& handler_EXTI_FotoL);
 80027b0:	4821      	ldr	r0, [pc, #132]	; (8002838 <initSystem+0x330>)
 80027b2:	f004 ff3d 	bl	8007630 <extInt_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM5_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorR.ptrTIMx = TIM5;
 80027b6:	4b21      	ldr	r3, [pc, #132]	; (800283c <initSystem+0x334>)
 80027b8:	4a1b      	ldr	r2, [pc, #108]	; (8002828 <initSystem+0x320>)
 80027ba:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorR.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 80027bc:	4b1f      	ldr	r3, [pc, #124]	; (800283c <initSystem+0x334>)
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorR.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 80027c2:	4b1e      	ldr	r3, [pc, #120]	; (800283c <initSystem+0x334>)
 80027c4:	220a      	movs	r2, #10
 80027c6:	805a      	strh	r2, [r3, #2]
 80027c8:	e03a      	b.n	8002840 <initSystem+0x338>
 80027ca:	bf00      	nop
 80027cc:	20000214 	.word	0x20000214
 80027d0:	40020000 	.word	0x40020000
 80027d4:	20000220 	.word	0x20000220
 80027d8:	2000022c 	.word	0x2000022c
 80027dc:	20000294 	.word	0x20000294
 80027e0:	200002a0 	.word	0x200002a0
 80027e4:	40020800 	.word	0x40020800
 80027e8:	200002ac 	.word	0x200002ac
 80027ec:	20000308 	.word	0x20000308
 80027f0:	20000314 	.word	0x20000314
 80027f4:	40020c00 	.word	0x40020c00
 80027f8:	20000320 	.word	0x20000320
 80027fc:	2000026c 	.word	0x2000026c
 8002800:	40020400 	.word	0x40020400
 8002804:	20000278 	.word	0x20000278
 8002808:	20000238 	.word	0x20000238
 800280c:	40011000 	.word	0x40011000
 8002810:	2000038c 	.word	0x2000038c
 8002814:	40000400 	.word	0x40000400
 8002818:	20000001 	.word	0x20000001
 800281c:	2000039c 	.word	0x2000039c
 8002820:	40000800 	.word	0x40000800
 8002824:	2000037c 	.word	0x2000037c
 8002828:	40000c00 	.word	0x40000c00
 800282c:	20000244 	.word	0x20000244
 8002830:	20000250 	.word	0x20000250
 8002834:	20000258 	.word	0x20000258
 8002838:	20000264 	.word	0x20000264
 800283c:	200002b8 	.word	0x200002b8
	handler_PWM_MotorR.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 8002840:	4b15      	ldr	r3, [pc, #84]	; (8002898 <initSystem+0x390>)
 8002842:	2201      	movs	r2, #1
 8002844:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorR);
 8002846:	4814      	ldr	r0, [pc, #80]	; (8002898 <initSystem+0x390>)
 8002848:	f006 fc4c 	bl	80090e4 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorR, CHANNEL_ENABLE);
 800284c:	2101      	movs	r1, #1
 800284e:	4812      	ldr	r0, [pc, #72]	; (8002898 <initSystem+0x390>)
 8002850:	f006 fda8 	bl	80093a4 <statusInOutPWM>

	//---------------TIM5_Channel_2----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorL.ptrTIMx = TIM5;
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <initSystem+0x394>)
 8002856:	4a12      	ldr	r2, [pc, #72]	; (80028a0 <initSystem+0x398>)
 8002858:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorL.config.channel = PWM_CHANNEL_2;     //PWM_CHANNEL_x x->1,2,3,4
 800285a:	4b10      	ldr	r3, [pc, #64]	; (800289c <initSystem+0x394>)
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorL.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8002860:	4b0e      	ldr	r3, [pc, #56]	; (800289c <initSystem+0x394>)
 8002862:	220a      	movs	r2, #10
 8002864:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorL.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 8002866:	4b0d      	ldr	r3, [pc, #52]	; (800289c <initSystem+0x394>)
 8002868:	2201      	movs	r2, #1
 800286a:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorL);
 800286c:	480b      	ldr	r0, [pc, #44]	; (800289c <initSystem+0x394>)
 800286e:	f006 fc39 	bl	80090e4 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorL, CHANNEL_ENABLE);
 8002872:	2101      	movs	r1, #1
 8002874:	4809      	ldr	r0, [pc, #36]	; (800289c <initSystem+0x394>)
 8002876:	f006 fd95 	bl	80093a4 <statusInOutPWM>

	//-------------------Inicio de Configuracion I2Cx----------------------

	//---------------I2C1----------------
	//Definimos el I2Cx a usar
	handler_I2C_MPU6050.prtI2Cx = I2C1;
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <initSystem+0x39c>)
 800287c:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <initSystem+0x3a0>)
 800287e:	601a      	str	r2, [r3, #0]
	//Definimos la configuracion para el I2C
	handler_I2C_MPU6050.modeI2C = I2C_MODE_FM;               //I2C_MODE_x  x->SM,FM
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <initSystem+0x39c>)
 8002882:	2201      	movs	r2, #1
 8002884:	715a      	strb	r2, [r3, #5]
	handler_I2C_MPU6050.slaveAddress = ADDRESS_DOWN;         //Direccion del Sclave
 8002886:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <initSystem+0x39c>)
 8002888:	2268      	movs	r2, #104	; 0x68
 800288a:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	i2c_Config(&handler_I2C_MPU6050);
 800288c:	4805      	ldr	r0, [pc, #20]	; (80028a4 <initSystem+0x39c>)
 800288e:	f006 f96f 	bl	8008b70 <i2c_Config>

	//---------------------Fin de Configuracion I2Cx----------------------

}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	200002b8 	.word	0x200002b8
 800289c:	2000032c 	.word	0x2000032c
 80028a0:	40000c00 	.word	0x40000c00
 80028a4:	20000284 	.word	0x20000284
 80028a8:	40005400 	.word	0x40005400

080028ac <int_MPU>:



//------------------------------Inicio configuracion del MPU------------------------------------------
void int_MPU(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
	//Definimos la escala de las diferentes magnitudes fisicas
	handler_MPUAccel_MPU6050.fullScaleACCEL = ACCEL_2G;
 80028b0:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <int_MPU+0x24>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_MPU6050.fullScaleGYRO = GYRO_250;
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <int_MPU+0x24>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	705a      	strb	r2, [r3, #1]
	//Definimos el handler correspondiente al I2C
	handler_MPUAccel_MPU6050.ptrI2Chandler = &handler_I2C_MPU6050;
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <int_MPU+0x24>)
 80028be:	4a05      	ldr	r2, [pc, #20]	; (80028d4 <int_MPU+0x28>)
 80028c0:	605a      	str	r2, [r3, #4]
	//Cargamos configuracion
	configMPUAccel(&handler_MPUAccel_MPU6050, &handler_TIMER_Delay, &countingTimer);
 80028c2:	4a05      	ldr	r2, [pc, #20]	; (80028d8 <int_MPU+0x2c>)
 80028c4:	4905      	ldr	r1, [pc, #20]	; (80028dc <int_MPU+0x30>)
 80028c6:	4802      	ldr	r0, [pc, #8]	; (80028d0 <int_MPU+0x24>)
 80028c8:	f7fe fcf4 	bl	80012b4 <configMPUAccel>

}
 80028cc:	bf00      	nop
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	2000028c 	.word	0x2000028c
 80028d4:	20000284 	.word	0x20000284
 80028d8:	200003ac 	.word	0x200003ac
 80028dc:	2000039c 	.word	0x2000039c

080028e0 <int_Config_Motor>:

//------------------------------Fin configuracion del MPU------------------------------------------

//------------------------------Inicio configuracion de lso motores------------------------------------------
void int_Config_Motor(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	handler_Motor_R.configMotor.dutty =  28;
 80028e4:	4b3c      	ldr	r3, [pc, #240]	; (80029d8 <int_Config_Motor+0xf8>)
 80028e6:	4a3d      	ldr	r2, [pc, #244]	; (80029dc <int_Config_Motor+0xfc>)
 80028e8:	631a      	str	r2, [r3, #48]	; 0x30
	handler_Motor_R.configMotor.frecuency = &value_period;
 80028ea:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <int_Config_Motor+0xf8>)
 80028ec:	4a3c      	ldr	r2, [pc, #240]	; (80029e0 <int_Config_Motor+0x100>)
 80028ee:	629a      	str	r2, [r3, #40]	; 0x28
	handler_Motor_R.configMotor.dir = SET;
 80028f0:	4b39      	ldr	r3, [pc, #228]	; (80029d8 <int_Config_Motor+0xf8>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	//handler de los perifericos
	handler_Motor_R.phandlerGPIOEN = &handler_GPIO_MotorR_EN;
 80028f8:	4b37      	ldr	r3, [pc, #220]	; (80029d8 <int_Config_Motor+0xf8>)
 80028fa:	4a3a      	ldr	r2, [pc, #232]	; (80029e4 <int_Config_Motor+0x104>)
 80028fc:	63da      	str	r2, [r3, #60]	; 0x3c
	handler_Motor_R.phandlerGPIOIN = &handler_GPIO_MotorR_IN;
 80028fe:	4b36      	ldr	r3, [pc, #216]	; (80029d8 <int_Config_Motor+0xf8>)
 8002900:	4a39      	ldr	r2, [pc, #228]	; (80029e8 <int_Config_Motor+0x108>)
 8002902:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_R.phandlerPWM = &handler_PWM_MotorR;
 8002904:	4b34      	ldr	r3, [pc, #208]	; (80029d8 <int_Config_Motor+0xf8>)
 8002906:	4a39      	ldr	r2, [pc, #228]	; (80029ec <int_Config_Motor+0x10c>)
 8002908:	641a      	str	r2, [r3, #64]	; 0x40
	//definicion de parametros
	handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_prev = 0;
 800290a:	4b33      	ldr	r3, [pc, #204]	; (80029d8 <int_Config_Motor+0xf8>)
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	4b31      	ldr	r3, [pc, #196]	; (80029d8 <int_Config_Motor+0xf8>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	4a30      	ldr	r2, [pc, #192]	; (80029d8 <int_Config_Motor+0xf8>)
 8002918:	6053      	str	r3, [r2, #4]
	handler_Motor_R.parametersMotor.parametersPID.u =  handler_Motor_R.parametersMotor.parametersPID.e_intel = 0;
 800291a:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <int_Config_Motor+0xf8>)
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
 8002922:	4b2d      	ldr	r3, [pc, #180]	; (80029d8 <int_Config_Motor+0xf8>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	4a2c      	ldr	r2, [pc, #176]	; (80029d8 <int_Config_Motor+0xf8>)
 8002928:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	handler_Motor_R.parametersMotor.parametersPID.kp = 250;
 800292a:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <int_Config_Motor+0xf8>)
 800292c:	4a30      	ldr	r2, [pc, #192]	; (80029f0 <int_Config_Motor+0x110>)
 800292e:	611a      	str	r2, [r3, #16]
	handler_Motor_R.parametersMotor.parametersPID.ki = 0;
 8002930:	4b29      	ldr	r3, [pc, #164]	; (80029d8 <int_Config_Motor+0xf8>)
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	615a      	str	r2, [r3, #20]
	handler_Motor_R.parametersMotor.parametersPID.kd = 100;
 8002938:	4b27      	ldr	r3, [pc, #156]	; (80029d8 <int_Config_Motor+0xf8>)
 800293a:	4a2e      	ldr	r2, [pc, #184]	; (80029f4 <int_Config_Motor+0x114>)
 800293c:	619a      	str	r2, [r3, #24]

	//---------------Motor Izquierdo----------------
	//Parametro de la señal del dutty
	handler_Motor_L.configMotor.dutty =  28;
 800293e:	4b2e      	ldr	r3, [pc, #184]	; (80029f8 <int_Config_Motor+0x118>)
 8002940:	4a26      	ldr	r2, [pc, #152]	; (80029dc <int_Config_Motor+0xfc>)
 8002942:	631a      	str	r2, [r3, #48]	; 0x30
	handler_Motor_L.configMotor.frecuency = &value_period;
 8002944:	4b2c      	ldr	r3, [pc, #176]	; (80029f8 <int_Config_Motor+0x118>)
 8002946:	4a26      	ldr	r2, [pc, #152]	; (80029e0 <int_Config_Motor+0x100>)
 8002948:	629a      	str	r2, [r3, #40]	; 0x28
	handler_Motor_L.configMotor.dir = SET;
 800294a:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <int_Config_Motor+0x118>)
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	//handler de los perifericos
	handler_Motor_L.phandlerGPIOEN = &handler_GPIO_MotorL_EN;
 8002952:	4b29      	ldr	r3, [pc, #164]	; (80029f8 <int_Config_Motor+0x118>)
 8002954:	4a29      	ldr	r2, [pc, #164]	; (80029fc <int_Config_Motor+0x11c>)
 8002956:	63da      	str	r2, [r3, #60]	; 0x3c
	handler_Motor_L.phandlerGPIOIN = &handler_GPIO_MotorL_IN;
 8002958:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <int_Config_Motor+0x118>)
 800295a:	4a29      	ldr	r2, [pc, #164]	; (8002a00 <int_Config_Motor+0x120>)
 800295c:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_L.phandlerPWM = &handler_PWM_MotorL;
 800295e:	4b26      	ldr	r3, [pc, #152]	; (80029f8 <int_Config_Motor+0x118>)
 8002960:	4a28      	ldr	r2, [pc, #160]	; (8002a04 <int_Config_Motor+0x124>)
 8002962:	641a      	str	r2, [r3, #64]	; 0x40
	//definicion de parametros
	handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_prev = 0;
 8002964:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <int_Config_Motor+0x118>)
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	60da      	str	r2, [r3, #12]
 800296c:	4b22      	ldr	r3, [pc, #136]	; (80029f8 <int_Config_Motor+0x118>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4a21      	ldr	r2, [pc, #132]	; (80029f8 <int_Config_Motor+0x118>)
 8002972:	6053      	str	r3, [r2, #4]
	handler_Motor_L.parametersMotor.parametersPID.u =  handler_Motor_L.parametersMotor.parametersPID.e_intel = 0;
 8002974:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <int_Config_Motor+0x118>)
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	4b1e      	ldr	r3, [pc, #120]	; (80029f8 <int_Config_Motor+0x118>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	4a1d      	ldr	r2, [pc, #116]	; (80029f8 <int_Config_Motor+0x118>)
 8002982:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	handler_Motor_L.parametersMotor.parametersPID.kp = 250;
 8002984:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <int_Config_Motor+0x118>)
 8002986:	4a1a      	ldr	r2, [pc, #104]	; (80029f0 <int_Config_Motor+0x110>)
 8002988:	611a      	str	r2, [r3, #16]
	handler_Motor_L.parametersMotor.parametersPID.ki = 0;
 800298a:	4b1b      	ldr	r3, [pc, #108]	; (80029f8 <int_Config_Motor+0x118>)
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	615a      	str	r2, [r3, #20]
	handler_Motor_L.parametersMotor.parametersPID.kd = 100;
 8002992:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <int_Config_Motor+0x118>)
 8002994:	4a17      	ldr	r2, [pc, #92]	; (80029f4 <int_Config_Motor+0x114>)
 8002996:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	parameter_PID_distace.e = parameter_PID_distace.e_prev = 0;
 8002998:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <int_Config_Motor+0x128>)
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	60da      	str	r2, [r3, #12]
 80029a0:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <int_Config_Motor+0x128>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a18      	ldr	r2, [pc, #96]	; (8002a08 <int_Config_Motor+0x128>)
 80029a6:	6053      	str	r3, [r2, #4]
	parameter_PID_distace.u =  parameter_PID_distace.e_intel = 0;
 80029a8:	4b17      	ldr	r3, [pc, #92]	; (8002a08 <int_Config_Motor+0x128>)
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <int_Config_Motor+0x128>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4a14      	ldr	r2, [pc, #80]	; (8002a08 <int_Config_Motor+0x128>)
 80029b6:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	parameter_PID_distace.kp = 1.0;
 80029b8:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <int_Config_Motor+0x128>)
 80029ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80029be:	611a      	str	r2, [r3, #16]
	parameter_PID_distace.ki = 0.1;
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <int_Config_Motor+0x128>)
 80029c2:	4a12      	ldr	r2, [pc, #72]	; (8002a0c <int_Config_Motor+0x12c>)
 80029c4:	615a      	str	r2, [r3, #20]
	parameter_PID_distace.kd = 0.8;
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <int_Config_Motor+0x128>)
 80029c8:	4a11      	ldr	r2, [pc, #68]	; (8002a10 <int_Config_Motor+0x130>)
 80029ca:	619a      	str	r2, [r3, #24]
};
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	200002c4 	.word	0x200002c4
 80029dc:	41e00000 	.word	0x41e00000
 80029e0:	20000004 	.word	0x20000004
 80029e4:	200002ac 	.word	0x200002ac
 80029e8:	200002a0 	.word	0x200002a0
 80029ec:	200002b8 	.word	0x200002b8
 80029f0:	437a0000 	.word	0x437a0000
 80029f4:	42c80000 	.word	0x42c80000
 80029f8:	20000338 	.word	0x20000338
 80029fc:	20000320 	.word	0x20000320
 8002a00:	20000314 	.word	0x20000314
 8002a04:	2000032c 	.word	0x2000032c
 8002a08:	200003bc 	.word	0x200003bc
 8002a0c:	3dcccccd 	.word	0x3dcccccd
 8002a10:	3f4ccccd 	.word	0x3f4ccccd

08002a14 <BasicUSART1_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART1_Callback(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af02      	add	r7, sp, #8
	usartData = getRxData();
 8002a1a:	f007 f96d 	bl	8009cf8 <getRxData>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	461a      	mov	r2, r3
 8002a22:	4b22      	ldr	r3, [pc, #136]	; (8002aac <BasicUSART1_Callback+0x98>)
 8002a24:	701a      	strb	r2, [r3, #0]

	//Se define variable para verificar si una tarea de mayor proridad esta lista para Running
	BaseType_t pxHigherPriorityTaskWoken;
	(void) pxHigherPriorityTaskWoken;
	pxHigherPriorityTaskWoken = pdFALSE;
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]

	//Verificamos que la cola aun no se encuentra llena
	xReturned = xQueueIsQueueFullFromISR(xQueue_InputData);
 8002a2a:	4b21      	ldr	r3, [pc, #132]	; (8002ab0 <BasicUSART1_Callback+0x9c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f002 fab9 	bl	8004fa6 <xQueueIsQueueFullFromISR>
 8002a34:	4603      	mov	r3, r0
 8002a36:	4a1f      	ldr	r2, [pc, #124]	; (8002ab4 <BasicUSART1_Callback+0xa0>)
 8002a38:	6013      	str	r3, [r2, #0]

	//Por tanto si es True entonces aun no hay espacio
	if(xReturned != pdTRUE)
 8002a3a:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <BasicUSART1_Callback+0xa0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d00f      	beq.n	8002a62 <BasicUSART1_Callback+0x4e>
	{
		if(usartData != '\r' && usartData != '\n')
 8002a42:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <BasicUSART1_Callback+0x98>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b0d      	cmp	r3, #13
 8002a48:	d01d      	beq.n	8002a86 <BasicUSART1_Callback+0x72>
 8002a4a:	4b18      	ldr	r3, [pc, #96]	; (8002aac <BasicUSART1_Callback+0x98>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b0a      	cmp	r3, #10
 8002a50:	d019      	beq.n	8002a86 <BasicUSART1_Callback+0x72>
		{
			//Se envia caracter a la cola
			xQueueSendToBackFromISR(xQueue_InputData, (void *)&usartData, NULL);
 8002a52:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <BasicUSART1_Callback+0x9c>)
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	2300      	movs	r3, #0
 8002a58:	2200      	movs	r2, #0
 8002a5a:	4914      	ldr	r1, [pc, #80]	; (8002aac <BasicUSART1_Callback+0x98>)
 8002a5c:	f001 fe7a 	bl	8004754 <xQueueGenericSendFromISR>
 8002a60:	e011      	b.n	8002a86 <BasicUSART1_Callback+0x72>
		}
	}
	else
	{
		if(usartData == '@')
 8002a62:	4b12      	ldr	r3, [pc, #72]	; (8002aac <BasicUSART1_Callback+0x98>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b40      	cmp	r3, #64	; 0x40
 8002a68:	d10d      	bne.n	8002a86 <BasicUSART1_Callback+0x72>
		{
			//Se recibe mensaje de la cola
			xQueueReceiveFromISR(xQueue_InputData, (void *)&usartData, NULL);
 8002a6a:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <BasicUSART1_Callback+0x9c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	490e      	ldr	r1, [pc, #56]	; (8002aac <BasicUSART1_Callback+0x98>)
 8002a72:	4618      	mov	r0, r3
 8002a74:	f002 f8da 	bl	8004c2c <xQueueReceiveFromISR>
			//Se envia mensaje a la cola
			xQueueSendToBackFromISR(xQueue_InputData, (void *)&usartData, NULL);
 8002a78:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <BasicUSART1_Callback+0x9c>)
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	2200      	movs	r2, #0
 8002a80:	490a      	ldr	r1, [pc, #40]	; (8002aac <BasicUSART1_Callback+0x98>)
 8002a82:	f001 fe67 	bl	8004754 <xQueueGenericSendFromISR>
		}
	}
	//Se envia notificacion al command Task
	if(usartData == '@')
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <BasicUSART1_Callback+0x98>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b40      	cmp	r3, #64	; 0x40
 8002a8c:	d10a      	bne.n	8002aa4 <BasicUSART1_Callback+0x90>
	{
		xTaskNotifyFromISR(xHandleTask_Commands, 0, eNoAction, NULL);
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <BasicUSART1_Callback+0xa4>)
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	2300      	movs	r3, #0
 8002a94:	9301      	str	r3, [sp, #4]
 8002a96:	2300      	movs	r3, #0
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	f003 fa50 	bl	8005f44 <xTaskGenericNotifyFromISR>
	}
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	20000414 	.word	0x20000414
 8002ab4:	200003dc 	.word	0x200003dc
 8002ab8:	200003e8 	.word	0x200003e8

08002abc <BasicTimer3_Callback>:

//-------------------------Muestreo--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer3_Callback(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af02      	add	r7, sp, #8
	//Se define variable para verificar si una tarea de mayor proridad esta lista para Running
	BaseType_t pxHigherPriorityTaskWoken;
	pxHigherPriorityTaskWoken = pdFALSE;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	607b      	str	r3, [r7, #4]
	//Notificamos a la tarea respectiva
	xTaskNotifyFromISR(xHandleTask_Measure, 0, eNoAction, &pxHigherPriorityTaskWoken);
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <BasicTimer3_Callback+0x40>)
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	9301      	str	r3, [sp, #4]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	f003 fa34 	bl	8005f44 <xTaskGenericNotifyFromISR>
   	//Realizamos cambio de contexto
   	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d007      	beq.n	8002af2 <BasicTimer3_Callback+0x36>
 8002ae2:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <BasicTimer3_Callback+0x44>)
 8002ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	f3bf 8f6f 	isb	sy
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	200003f4 	.word	0x200003f4
 8002b00:	e000ed04 	.word	0xe000ed04

08002b04 <BasicTimer4_Callback>:

//-------------------------Muestreo--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer4_Callback(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
	countingTimer++;
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <BasicTimer4_Callback+0x1c>)
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <BasicTimer4_Callback+0x1c>)
 8002b12:	801a      	strh	r2, [r3, #0]
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	200003ac 	.word	0x200003ac

08002b24 <vTask_Print>:
//-----------------------Inicio definicion funciones de las Task---------------------------

//------------Tareas de para recepcion y envio de informacion------------------
//-------Tarea de Imprimir-------
void vTask_Print(void * pvParameters)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
	char *msg;

	while(1)
	{
		//Se espera por el puntero del mensaje
		xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8002b2c:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <vTask_Print+0x28>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f107 010c 	add.w	r1, r7, #12
 8002b34:	f04f 32ff 	mov.w	r2, #4294967295
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f001 feb5 	bl	80048a8 <xQueueReceive>
		//Enviamos por puerto serial dicho mensaje
		writeMsg(&handler_USART_CommTerm, msg);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4619      	mov	r1, r3
 8002b42:	4803      	ldr	r0, [pc, #12]	; (8002b50 <vTask_Print+0x2c>)
 8002b44:	f007 f8b9 	bl	8009cba <writeMsg>
		xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8002b48:	e7f0      	b.n	8002b2c <vTask_Print+0x8>
 8002b4a:	bf00      	nop
 8002b4c:	2000040c 	.word	0x2000040c
 8002b50:	20000238 	.word	0x20000238

08002b54 <vTask_Commands>:
	}
}
//-------Tarea de los comando-------
void vTask_Commands(void * pvParameters)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002b5a:	af02      	add	r7, sp, #8
 8002b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b64:	6018      	str	r0, [r3, #0]
	BaseType_t notify_status = {0};
 8002b66:	2300      	movs	r3, #0
 8002b68:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
	char stringsend[500];

	while(1)
	{
		//Se espera por la notificacion de la interrupcion
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8002b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	2300      	movs	r3, #0
 8002b74:	2200      	movs	r2, #0
 8002b76:	2100      	movs	r1, #0
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f003 f883 	bl	8005c84 <xTaskGenericNotifyWait>
 8002b7e:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 8002b82:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d1f0      	bne.n	8002b6c <vTask_Commands+0x18>
		{
			//Se procesa el comando recibido
			process_stringsend(stringsend);
 8002b8a:	f107 0308 	add.w	r3, r7, #8
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fdaa 	bl	80036e8 <process_stringsend>
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8002b94:	e7ea      	b.n	8002b6c <vTask_Commands+0x18>
	...

08002b98 <vTask_Menu>:
		}
	}
}
//------Tarea Menu-------
void vTask_Menu(void * pvParameters)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08c      	sub	sp, #48	; 0x30
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	6078      	str	r0, [r7, #4]
	//Variables para la recepcion
	command_t xReceivedStructure;
	BaseType_t notify_status;
	//Mensaje inicial del menu
	const char* msg_menu = "=======================\n"
 8002ba0:	4b4c      	ldr	r3, [pc, #304]	; (8002cd4 <vTask_Menu+0x13c>)
 8002ba2:	60fb      	str	r3, [r7, #12]
						   "line ---> inicia \n";

	while(1)
	{
		//Se envia el mensaje del menu de opciones
		if(next_state == sMenuOperation){ xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY); }
 8002ba4:	4b4c      	ldr	r3, [pc, #304]	; (8002cd8 <vTask_Menu+0x140>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d108      	bne.n	8002bbe <vTask_Menu+0x26>
 8002bac:	4b4b      	ldr	r3, [pc, #300]	; (8002cdc <vTask_Menu+0x144>)
 8002bae:	6818      	ldr	r0, [r3, #0]
 8002bb0:	f107 010c 	add.w	r1, r7, #12
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bba:	f001 fccd 	bl	8004558 <xQueueGenericSend>
		//Se espera por la recepcion de un comando
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8002bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2100      	movs	r1, #0
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f003 f85a 	bl	8005c84 <xTaskGenericNotifyWait>
		//Se verificamos recibe el comando
		notify_status = xQueueReceive(xQueue_StructCommand, &xReceivedStructure, 0 );
 8002bd0:	4b43      	ldr	r3, [pc, #268]	; (8002ce0 <vTask_Menu+0x148>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f107 0110 	add.w	r1, r7, #16
 8002bd8:	2200      	movs	r2, #0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f001 fe64 	bl	80048a8 <xQueueReceive>
 8002be0:	6278      	str	r0, [r7, #36]	; 0x24
		//Se verificamos el tipo de comando
		if(notify_status == pdTRUE)
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d1dd      	bne.n	8002ba4 <vTask_Menu+0xc>
		{
			if(strcmp(xReceivedStructure.send_cmd, "line") == 0)
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	493d      	ldr	r1, [pc, #244]	; (8002ce4 <vTask_Menu+0x14c>)
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fd faf6 	bl	80001e0 <strcmp>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10d      	bne.n	8002c16 <vTask_Menu+0x7e>
			{
				//Notificamos a la tarea respectiva
				xTaskNotify(xHandleTask_Line, (uint32_t) xReceivedStructure.firtparameter, eSetValueWithoutOverwrite);
 8002bfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ce8 <vTask_Menu+0x150>)
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	461a      	mov	r2, r3
 8002c02:	2300      	movs	r3, #0
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	2304      	movs	r3, #4
 8002c08:	2100      	movs	r1, #0
 8002c0a:	f003 f8bb 	bl	8005d84 <xTaskGenericNotify>
				//Cambio de state
				next_state = sExecution;
 8002c0e:	4b32      	ldr	r3, [pc, #200]	; (8002cd8 <vTask_Menu+0x140>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	e7c6      	b.n	8002ba4 <vTask_Menu+0xc>
			}
			else if(strcmp(xReceivedStructure.send_cmd, "turn") == 0)
 8002c16:	f107 0310 	add.w	r3, r7, #16
 8002c1a:	4934      	ldr	r1, [pc, #208]	; (8002cec <vTask_Menu+0x154>)
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fd fadf 	bl	80001e0 <strcmp>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10d      	bne.n	8002c44 <vTask_Menu+0xac>
			{
				//Notificamos a la tarea respectiva
				xTaskNotify(xHandleTask_Turn_itself, (uint32_t) &xReceivedStructure, eSetValueWithoutOverwrite);
 8002c28:	4b31      	ldr	r3, [pc, #196]	; (8002cf0 <vTask_Menu+0x158>)
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	f107 0210 	add.w	r2, r7, #16
 8002c30:	2300      	movs	r3, #0
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	2304      	movs	r3, #4
 8002c36:	2100      	movs	r1, #0
 8002c38:	f003 f8a4 	bl	8005d84 <xTaskGenericNotify>
				//Cambio de state
				next_state = sExecution;
 8002c3c:	4b26      	ldr	r3, [pc, #152]	; (8002cd8 <vTask_Menu+0x140>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	e7af      	b.n	8002ba4 <vTask_Menu+0xc>
			}
			else if(strcmp(xReceivedStructure.send_cmd, "square") == 0)
 8002c44:	f107 0310 	add.w	r3, r7, #16
 8002c48:	492a      	ldr	r1, [pc, #168]	; (8002cf4 <vTask_Menu+0x15c>)
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fd fac8 	bl	80001e0 <strcmp>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10d      	bne.n	8002c72 <vTask_Menu+0xda>
			{
				//Notificamos a la tarea respectiva
				xTaskNotify(xHandleTask_Turn_itself, (uint32_t) &xReceivedStructure, eSetValueWithoutOverwrite);
 8002c56:	4b26      	ldr	r3, [pc, #152]	; (8002cf0 <vTask_Menu+0x158>)
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	f107 0210 	add.w	r2, r7, #16
 8002c5e:	2300      	movs	r3, #0
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	2304      	movs	r3, #4
 8002c64:	2100      	movs	r1, #0
 8002c66:	f003 f88d 	bl	8005d84 <xTaskGenericNotify>
				//Cambio de state
				next_state = sExecution;
 8002c6a:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <vTask_Menu+0x140>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]
 8002c70:	e798      	b.n	8002ba4 <vTask_Menu+0xc>

			}
			else if(strcmp(xReceivedStructure.send_cmd, "exepathastar") == 0)
 8002c72:	f107 0310 	add.w	r3, r7, #16
 8002c76:	4920      	ldr	r1, [pc, #128]	; (8002cf8 <vTask_Menu+0x160>)
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fd fab1 	bl	80001e0 <strcmp>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10c      	bne.n	8002c9e <vTask_Menu+0x106>
			{
				//Notificamos a la tarea respectiva
				xTaskNotify(xHandleTask_Execute_Astar, 0, eNoAction);
 8002c84:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <vTask_Menu+0x164>)
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	2300      	movs	r3, #0
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2100      	movs	r1, #0
 8002c92:	f003 f877 	bl	8005d84 <xTaskGenericNotify>
				//Cambio de state
				next_state = sExecution;
 8002c96:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <vTask_Menu+0x140>)
 8002c98:	2201      	movs	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
 8002c9c:	e782      	b.n	8002ba4 <vTask_Menu+0xc>
			}
			else
			{
				//Se envia la opcion especificada
				xQueueSend(xQueue_Print, &msg_com_invalid, portMAX_DELAY);
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <vTask_Menu+0x144>)
 8002ca0:	6818      	ldr	r0, [r3, #0]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca8:	4915      	ldr	r1, [pc, #84]	; (8002d00 <vTask_Menu+0x168>)
 8002caa:	f001 fc55 	bl	8004558 <xQueueGenericSend>
				/*Se envia una notificacion previa con la finalidad de desbloquear
				 la tarea, la cual se bloquea para que se envie el mensaje por USART*/
				xTaskNotify(xHandleTask_Menu, 0, eNoAction);
 8002cae:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <vTask_Menu+0x16c>)
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2100      	movs	r1, #0
 8002cbc:	f003 f862 	bl	8005d84 <xTaskGenericNotify>
				xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 8002cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2100      	movs	r1, #0
 8002ccc:	2000      	movs	r0, #0
 8002cce:	f002 ffd9 	bl	8005c84 <xTaskGenericNotifyWait>
		if(next_state == sMenuOperation){ xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY); }
 8002cd2:	e767      	b.n	8002ba4 <vTask_Menu+0xc>
 8002cd4:	08011bec 	.word	0x08011bec
 8002cd8:	20000420 	.word	0x20000420
 8002cdc:	2000040c 	.word	0x2000040c
 8002ce0:	20000410 	.word	0x20000410
 8002ce4:	08011c48 	.word	0x08011c48
 8002ce8:	200003ec 	.word	0x200003ec
 8002cec:	08011c50 	.word	0x08011c50
 8002cf0:	200003fc 	.word	0x200003fc
 8002cf4:	08011c58 	.word	0x08011c58
 8002cf8:	08011c60 	.word	0x08011c60
 8002cfc:	20000404 	.word	0x20000404
 8002d00:	20000010 	.word	0x20000010
 8002d04:	200003e0 	.word	0x200003e0

08002d08 <vTask_Line>:


//-----------------------Tareas de Operaciones-----------------
//------------Tarea linea---------------
void vTask_Line(void * pvParameters)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	6078      	str	r0, [r7, #4]
	//Definicion de variable de notificacion
	BaseType_t notify_status = {0};
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]
	uint32_t parameter;

	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,&parameter, portMAX_DELAY);
 8002d14:	f107 0308 	add.w	r3, r7, #8
 8002d18:	f04f 32ff 	mov.w	r2, #4294967295
 8002d1c:	9200      	str	r2, [sp, #0]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2100      	movs	r1, #0
 8002d22:	2000      	movs	r0, #0
 8002d24:	f002 ffae 	bl	8005c84 <xTaskGenericNotifyWait>
 8002d28:	60f8      	str	r0, [r7, #12]
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d1f1      	bne.n	8002d14 <vTask_Line+0xc>
		{
			//Definicion de parametros
			change_position(&parameter_Path_Robot, parameter, parameter_Path_Robot.goal_Position_x, parameter_Path_Robot.goal_Position_y);
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	461a      	mov	r2, r3
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <vTask_Line+0x5c>)
 8002d36:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8002d3a:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <vTask_Line+0x5c>)
 8002d3c:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8002d40:	eeb0 1a46 	vmov.f32	s2, s12
 8002d44:	eef0 1a66 	vmov.f32	s3, s13
 8002d48:	eeb0 0a47 	vmov.f32	s0, s14
 8002d4c:	eef0 0a67 	vmov.f32	s1, s15
 8002d50:	4611      	mov	r1, r2
 8002d52:	4804      	ldr	r0, [pc, #16]	; (8002d64 <vTask_Line+0x5c>)
 8002d54:	f7fe fe80 	bl	8001a58 <change_position>
			//Configuracion inicial linea recta
			straight_line(duttySetPoint);
 8002d58:	4b03      	ldr	r3, [pc, #12]	; (8002d68 <vTask_Line+0x60>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fe1b 	bl	8003998 <straight_line>
		notify_status = xTaskNotifyWait(0,0,&parameter, portMAX_DELAY);
 8002d62:	e7d7      	b.n	8002d14 <vTask_Line+0xc>
 8002d64:	200007e8 	.word	0x200007e8
 8002d68:	20000008 	.word	0x20000008

08002d6c <vTask_Turn>:
		}
	}
}
//------Tarea de Turn------------
void vTask_Turn(void *pvParameters)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	6078      	str	r0, [r7, #4]
	//Definicion de variable
	BaseType_t notify_status = {0};
 8002d74:	2300      	movs	r3, #0
 8002d76:	613b      	str	r3, [r7, #16]
	uint32_t data;
	//Ciclo de la tarea
	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,&data,portMAX_DELAY);
 8002d78:	f107 0308 	add.w	r3, r7, #8
 8002d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d80:	9200      	str	r2, [sp, #0]
 8002d82:	2200      	movs	r2, #0
 8002d84:	2100      	movs	r1, #0
 8002d86:	2000      	movs	r0, #0
 8002d88:	f002 ff7c 	bl	8005c84 <xTaskGenericNotifyWait>
 8002d8c:	6138      	str	r0, [r7, #16]
		xReceivedStructure = (command_t*)  data;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	60fb      	str	r3, [r7, #12]
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d1ef      	bne.n	8002d78 <vTask_Turn+0xc>
		{
			//Cambio de signo si e giro es hacia la derecha
			if(xReceivedStructure->secondparameter==1){ degrees = -1*xReceivedStructure->firtparameter;}
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d105      	bne.n	8002dac <vTask_Turn+0x40>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	425b      	negs	r3, r3
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	82fb      	strh	r3, [r7, #22]
			//Configuracion inicial del giro
			turn_itself(degrees);
 8002dac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fee9 	bl	8003b88 <turn_itself>
		notify_status = xTaskNotifyWait(0,0,&data,portMAX_DELAY);
 8002db6:	e7df      	b.n	8002d78 <vTask_Turn+0xc>

08002db8 <vTask_Square>:
		}
	}
}
//--------Tarea de Square------------
void vTask_Square(void *pvParameters)
{
 8002db8:	b5b0      	push	{r4, r5, r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	6078      	str	r0, [r7, #4]
	//Definicion de variable
	BaseType_t notify_status = {0};
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
	uint32_t data;
	//Ciclo de la tarea
	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,&data,portMAX_DELAY);
 8002dc4:	f107 030c 	add.w	r3, r7, #12
 8002dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dcc:	9200      	str	r2, [sp, #0]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f002 ff56 	bl	8005c84 <xTaskGenericNotifyWait>
 8002dd8:	6178      	str	r0, [r7, #20]
		xReceivedStructure = (command_t*)  data;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	613b      	str	r3, [r7, #16]
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d1ef      	bne.n	8002dc4 <vTask_Square+0xc>
		{
			//Restablecimiento de coordenadas
			init_coordinates();
 8002de4:	f000 ff3a 	bl	8003c5c <init_coordinates>
			//Configuracion de operaciones
			set_operation_square(list_operation, xReceivedStructure->firtparameter, xReceivedStructure->secondparameter);
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fd fbb1 	bl	8000554 <__aeabi_i2d>
 8002df2:	4604      	mov	r4, r0
 8002df4:	460d      	mov	r5, r1
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fd fbaa 	bl	8000554 <__aeabi_i2d>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	ec43 2b11 	vmov	d1, r2, r3
 8002e08:	ec45 4b10 	vmov	d0, r4, r5
 8002e0c:	4801      	ldr	r0, [pc, #4]	; (8002e14 <vTask_Square+0x5c>)
 8002e0e:	f000 fd03 	bl	8003818 <set_operation_square>
		notify_status = xTaskNotifyWait(0,0,&data,portMAX_DELAY);
 8002e12:	e7d7      	b.n	8002dc4 <vTask_Square+0xc>
 8002e14:	20000428 	.word	0x20000428

08002e18 <vTask_Execute_AStar>:
		}
	}
}
//------------Tarea execute Astar--------------
void vTask_Execute_AStar(void * pvParameters)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	6078      	str	r0, [r7, #4]
	//Definicion de variable de notificacion
	BaseType_t notify_status = {0};
 8002e20:	2300      	movs	r3, #0
 8002e22:	60fb      	str	r3, [r7, #12]
	uint32_t parameter;

	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,&parameter, portMAX_DELAY);
 8002e24:	f107 0308 	add.w	r3, r7, #8
 8002e28:	f04f 32ff 	mov.w	r2, #4294967295
 8002e2c:	9200      	str	r2, [sp, #0]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2100      	movs	r1, #0
 8002e32:	2000      	movs	r0, #0
 8002e34:	f002 ff26 	bl	8005c84 <xTaskGenericNotifyWait>
 8002e38:	60f8      	str	r0, [r7, #12]
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d1f1      	bne.n	8002e24 <vTask_Execute_AStar+0xc>
		{
			//Restablecimiento de coordenadas
			init_coordinates();
 8002e40:	f000 ff0c 	bl	8003c5c <init_coordinates>
		notify_status = xTaskNotifyWait(0,0,&parameter, portMAX_DELAY);
 8002e44:	e7ee      	b.n	8002e24 <vTask_Execute_AStar+0xc>
	...

08002e48 <vTask_Stop>:


//--------------Tareas de parada de operacion---------------
//------------Tarea de Stop---------------
void vTask_Stop(void * pvParameters)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08a      	sub	sp, #40	; 0x28
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	6078      	str	r0, [r7, #4]
	BaseType_t notify_status;
	//Ciclo de la tarea
	while(1)
	{
		//Se espera por la recepcion de un comando
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8002e50:	f04f 33ff 	mov.w	r3, #4294967295
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	2300      	movs	r3, #0
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f002 ff11 	bl	8005c84 <xTaskGenericNotifyWait>
		//Se verificamos recibe el comando
		notify_status = xQueueReceive(xQueue_StructCommand, &xReceivedStructure, 0 );
 8002e62:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <vTask_Stop+0x88>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f107 0108 	add.w	r1, r7, #8
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f001 fd1b 	bl	80048a8 <xQueueReceive>
 8002e72:	61f8      	str	r0, [r7, #28]
		//Se verificamos el tipo de comando
		if(notify_status == pdTRUE)
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d1ea      	bne.n	8002e50 <vTask_Stop+0x8>
		{
			if(strcmp(xReceivedStructure.send_cmd, "stop") == 0)
 8002e7a:	f107 0308 	add.w	r3, r7, #8
 8002e7e:	4915      	ldr	r1, [pc, #84]	; (8002ed4 <vTask_Stop+0x8c>)
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fd f9ad 	bl	80001e0 <strcmp>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1e1      	bne.n	8002e50 <vTask_Stop+0x8>
			{
				//Paramos los motores
				status_motor(RESET);
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f000 ff67 	bl	8003d60 <status_motor>
				//cambio de status
				next_state = sMenuOperation;
 8002e92:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <vTask_Stop+0x90>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	701a      	strb	r2, [r3, #0]
				//Se envia la opcion especificada
				xQueueSend(xQueue_Print, &msg_stop, portMAX_DELAY);
 8002e98:	4b10      	ldr	r3, [pc, #64]	; (8002edc <vTask_Stop+0x94>)
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea2:	490f      	ldr	r1, [pc, #60]	; (8002ee0 <vTask_Stop+0x98>)
 8002ea4:	f001 fb58 	bl	8004558 <xQueueGenericSend>
				/*Se envia una notificacion previa con la finalidad de desbloquear
				 la tarea, la cual se bloquea para que se envie el mensaje por USART*/
				xTaskNotify(xHandleTask_Menu, 0, eNoAction);
 8002ea8:	4b0e      	ldr	r3, [pc, #56]	; (8002ee4 <vTask_Stop+0x9c>)
 8002eaa:	6818      	ldr	r0, [r3, #0]
 8002eac:	2300      	movs	r3, #0
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	f002 ff65 	bl	8005d84 <xTaskGenericNotify>
				xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 8002eba:	f04f 33ff 	mov.w	r3, #4294967295
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	f002 fedc 	bl	8005c84 <xTaskGenericNotifyWait>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8002ecc:	e7c0      	b.n	8002e50 <vTask_Stop+0x8>
 8002ece:	bf00      	nop
 8002ed0:	20000410 	.word	0x20000410
 8002ed4:	08011c70 	.word	0x08011c70
 8002ed8:	20000420 	.word	0x20000420
 8002edc:	2000040c 	.word	0x2000040c
 8002ee0:	20000014 	.word	0x20000014
 8002ee4:	200003e0 	.word	0x200003e0

08002ee8 <vTask_Stop_Execute>:
		}
	}
}
//------------Tarea de parada en ejecucccion---------------
void vTask_Stop_Execute(void * pvParameters)
{
 8002ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eec:	b086      	sub	sp, #24
 8002eee:	af02      	add	r7, sp, #8
 8002ef0:	6078      	str	r0, [r7, #4]
	//Definicion de variable
	BaseType_t notify_status = {0};
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
	uint8_t mode = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	72fb      	strb	r3, [r7, #11]

	//Ciclo de la tarea
	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8002efa:	f04f 33ff 	mov.w	r3, #4294967295
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	2300      	movs	r3, #0
 8002f02:	2200      	movs	r2, #0
 8002f04:	2100      	movs	r1, #0
 8002f06:	2000      	movs	r0, #0
 8002f08:	f002 febc 	bl	8005c84 <xTaskGenericNotifyWait>
 8002f0c:	60f8      	str	r0, [r7, #12]
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d1f2      	bne.n	8002efa <vTask_Stop_Execute+0x12>
		{
			//verificamos el modo
			xQueuePeek(xMailbox_Mode, &mode, portMAX_DELAY);
 8002f14:	4b31      	ldr	r3, [pc, #196]	; (8002fdc <vTask_Stop_Execute+0xf4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f107 010b 	add.w	r1, r7, #11
 8002f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f20:	4618      	mov	r0, r3
 8002f22:	f001 fda1 	bl	8004a68 <xQueuePeek>
			//Verificamos las condiciones de parada
			if(mode==1)
 8002f26:	7afb      	ldrb	r3, [r7, #11]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d130      	bne.n	8002f8e <vTask_Stop_Execute+0xa6>
			{
				if(distance_traveled(&parameter_Path_Robot, parameter_Posicion_Robot.xg_position, parameter_Posicion_Robot.yg_position)>parameter_Path_Robot.line_Distance){
 8002f2c:	4b2c      	ldr	r3, [pc, #176]	; (8002fe0 <vTask_Stop_Execute+0xf8>)
 8002f2e:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8002f32:	4b2b      	ldr	r3, [pc, #172]	; (8002fe0 <vTask_Stop_Execute+0xf8>)
 8002f34:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8002f38:	eeb0 1a46 	vmov.f32	s2, s12
 8002f3c:	eef0 1a66 	vmov.f32	s3, s13
 8002f40:	eeb0 0a47 	vmov.f32	s0, s14
 8002f44:	eef0 0a67 	vmov.f32	s1, s15
 8002f48:	4826      	ldr	r0, [pc, #152]	; (8002fe4 <vTask_Stop_Execute+0xfc>)
 8002f4a:	f7fe ff09 	bl	8001d60 <distance_traveled>
 8002f4e:	ec5b ab10 	vmov	sl, fp, d0
 8002f52:	4b24      	ldr	r3, [pc, #144]	; (8002fe4 <vTask_Stop_Execute+0xfc>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fd fafc 	bl	8000554 <__aeabi_i2d>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4650      	mov	r0, sl
 8002f62:	4659      	mov	r1, fp
 8002f64:	f7fd fdf0 	bl	8000b48 <__aeabi_dcmpgt>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d035      	beq.n	8002fda <vTask_Stop_Execute+0xf2>
					//desactivamos los motores
					status_motor(RESET);
 8002f6e:	2000      	movs	r0, #0
 8002f70:	f000 fef6 	bl	8003d60 <status_motor>
					//Guardamos la posicion final
					parameter_Posicion_Robot.xg_position_inicial = parameter_Posicion_Robot.xg_position;
 8002f74:	4b1a      	ldr	r3, [pc, #104]	; (8002fe0 <vTask_Stop_Execute+0xf8>)
 8002f76:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002f7a:	4919      	ldr	r1, [pc, #100]	; (8002fe0 <vTask_Stop_Execute+0xf8>)
 8002f7c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
					parameter_Posicion_Robot.yg_position_inicial = parameter_Posicion_Robot.yg_position;
 8002f80:	4b17      	ldr	r3, [pc, #92]	; (8002fe0 <vTask_Stop_Execute+0xf8>)
 8002f82:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002f86:	4916      	ldr	r1, [pc, #88]	; (8002fe0 <vTask_Stop_Execute+0xf8>)
 8002f88:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8002f8c:	e7b5      	b.n	8002efa <vTask_Stop_Execute+0x12>
				}
			}
			else if(mode==2)
 8002f8e:	7afb      	ldrb	r3, [r7, #11]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d121      	bne.n	8002fd8 <vTask_Stop_Execute+0xf0>
			{
				if(fabs(ang_complementary) > fabs(parameter_Path_Robot.rotative_Grad_Relative)){
 8002f94:	4b14      	ldr	r3, [pc, #80]	; (8002fe8 <vTask_Stop_Execute+0x100>)
 8002f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9a:	4614      	mov	r4, r2
 8002f9c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002fa0:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <vTask_Stop_Execute+0xfc>)
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fd fad5 	bl	8000554 <__aeabi_i2d>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4690      	mov	r8, r2
 8002fb0:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002fb4:	4642      	mov	r2, r8
 8002fb6:	464b      	mov	r3, r9
 8002fb8:	4620      	mov	r0, r4
 8002fba:	4629      	mov	r1, r5
 8002fbc:	f7fd fdc4 	bl	8000b48 <__aeabi_dcmpgt>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d009      	beq.n	8002fda <vTask_Stop_Execute+0xf2>
					//Paramos los motores
					status_motor(RESET);
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f000 feca 	bl	8003d60 <status_motor>
					updateDirMotor(handler_Motor_Execute);
 8002fcc:	4b07      	ldr	r3, [pc, #28]	; (8002fec <vTask_Stop_Execute+0x104>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fe fc4e 	bl	8001872 <updateDirMotor>
 8002fd6:	e790      	b.n	8002efa <vTask_Stop_Execute+0x12>
				}
			}
			else{ __NOP(); }
 8002fd8:	bf00      	nop
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8002fda:	e78e      	b.n	8002efa <vTask_Stop_Execute+0x12>
 8002fdc:	20000418 	.word	0x20000418
 8002fe0:	20000868 	.word	0x20000868
 8002fe4:	200007e8 	.word	0x200007e8
 8002fe8:	20000860 	.word	0x20000860
 8002fec:	20000424 	.word	0x20000424

08002ff0 <vTask_Measure>:


//-----------Tareas correspondientes durante la ejecucion de operaciones--------
//------------Tarea de mediciones---------------
void vTask_Measure(void * pvParameters)
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	ed2d 8b02 	vpush	{d8}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	6078      	str	r0, [r7, #4]
	//Definicion de variable
	BaseType_t notify_status = {0};
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
	uint8_t mode = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	72fb      	strb	r3, [r7, #11]
	//Ciclo de la tarea
	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8003004:	f04f 33ff 	mov.w	r3, #4294967295
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	2300      	movs	r3, #0
 800300c:	2200      	movs	r2, #0
 800300e:	2100      	movs	r1, #0
 8003010:	2000      	movs	r0, #0
 8003012:	f002 fe37 	bl	8005c84 <xTaskGenericNotifyWait>
 8003016:	60f8      	str	r0, [r7, #12]
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d1f2      	bne.n	8003004 <vTask_Measure+0x14>
		{
			//----------------Accion a Realizar con el tiempo del TIMER--------------------
			//Leemos el angulo
			parameter_Posicion_Robot.grad_relativo = getAngle(&handler_MPUAccel_MPU6050, period_sampling, parameter_Posicion_Robot.grad_relativo, READ_GYRO_Z, gyro_offset);
 800301e:	4bb6      	ldr	r3, [pc, #728]	; (80032f8 <vTask_Measure+0x308>)
 8003020:	781c      	ldrb	r4, [r3, #0]
 8003022:	4bb6      	ldr	r3, [pc, #728]	; (80032fc <vTask_Measure+0x30c>)
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	4610      	mov	r0, r2
 800302a:	4619      	mov	r1, r3
 800302c:	f7fd fdf4 	bl	8000c18 <__aeabi_d2f>
 8003030:	4601      	mov	r1, r0
 8003032:	4bb3      	ldr	r3, [pc, #716]	; (8003300 <vTask_Measure+0x310>)
 8003034:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003038:	2205      	movs	r2, #5
 800303a:	ee00 1a10 	vmov	s0, r1
 800303e:	4621      	mov	r1, r4
 8003040:	48b0      	ldr	r0, [pc, #704]	; (8003304 <vTask_Measure+0x314>)
 8003042:	f7fe fbc9 	bl	80017d8 <getAngle>
 8003046:	ee10 3a10 	vmov	r3, s0
 800304a:	4618      	mov	r0, r3
 800304c:	f7fd fa94 	bl	8000578 <__aeabi_f2d>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	49a9      	ldr	r1, [pc, #676]	; (80032fc <vTask_Measure+0x30c>)
 8003056:	e9c1 2300 	strd	r2, r3, [r1]
			//verificamos el modo
			xQueuePeek(xMailbox_Mode, &mode, portMAX_DELAY);
 800305a:	4bab      	ldr	r3, [pc, #684]	; (8003308 <vTask_Measure+0x318>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f107 010b 	add.w	r1, r7, #11
 8003062:	f04f 32ff 	mov.w	r2, #4294967295
 8003066:	4618      	mov	r0, r3
 8003068:	f001 fcfe 	bl	8004a68 <xQueuePeek>
			if(mode == 1 )
 800306c:	7afb      	ldrb	r3, [r7, #11]
 800306e:	2b01      	cmp	r3, #1
 8003070:	f040 80c2 	bne.w	80031f8 <vTask_Measure+0x208>
			{
				//Acumulamos los angulos
				sum_ang += parameter_Posicion_Robot.grad_relativo;
 8003074:	4ba5      	ldr	r3, [pc, #660]	; (800330c <vTask_Measure+0x31c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7fd fa7d 	bl	8000578 <__aeabi_f2d>
 800307e:	4b9f      	ldr	r3, [pc, #636]	; (80032fc <vTask_Measure+0x30c>)
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	f7fd f91a 	bl	80002bc <__adddf3>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4610      	mov	r0, r2
 800308e:	4619      	mov	r1, r3
 8003090:	f7fd fdc2 	bl	8000c18 <__aeabi_d2f>
 8003094:	4603      	mov	r3, r0
 8003096:	4a9d      	ldr	r2, [pc, #628]	; (800330c <vTask_Measure+0x31c>)
 8003098:	6013      	str	r3, [r2, #0]
				//----------------Accion a realizar con un tiempo especifico--------------------
				if(counting_action>=timeAction_TIMER_Sampling)
 800309a:	4b9d      	ldr	r3, [pc, #628]	; (8003310 <vTask_Measure+0x320>)
 800309c:	881a      	ldrh	r2, [r3, #0]
 800309e:	4b9d      	ldr	r3, [pc, #628]	; (8003314 <vTask_Measure+0x324>)
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	f0c0 80a1 	bcc.w	80031ea <vTask_Measure+0x1fa>
				{
					//Calculamos el angulo promedio y la establecemis como el angulo relativo
					prom_ang = sum_ang/counting_action;
 80030a8:	4b98      	ldr	r3, [pc, #608]	; (800330c <vTask_Measure+0x31c>)
 80030aa:	edd3 6a00 	vldr	s13, [r3]
 80030ae:	4b98      	ldr	r3, [pc, #608]	; (8003310 <vTask_Measure+0x320>)
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030be:	4b96      	ldr	r3, [pc, #600]	; (8003318 <vTask_Measure+0x328>)
 80030c0:	edc3 7a00 	vstr	s15, [r3]
					parameter_Posicion_Robot.phi_relativo = (prom_ang*M_PI)/180;          //[rad]
 80030c4:	4b94      	ldr	r3, [pc, #592]	; (8003318 <vTask_Measure+0x328>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd fa55 	bl	8000578 <__aeabi_f2d>
 80030ce:	a386      	add	r3, pc, #536	; (adr r3, 80032e8 <vTask_Measure+0x2f8>)
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	f7fd faa8 	bl	8000628 <__aeabi_dmul>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4610      	mov	r0, r2
 80030de:	4619      	mov	r1, r3
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	4b8d      	ldr	r3, [pc, #564]	; (800331c <vTask_Measure+0x32c>)
 80030e6:	f7fd fbc9 	bl	800087c <__aeabi_ddiv>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4983      	ldr	r1, [pc, #524]	; (80032fc <vTask_Measure+0x30c>)
 80030f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
					parameter_Posicion_Robot.phi_relativo = atan2(sin(parameter_Posicion_Robot.phi_relativo),cos(parameter_Posicion_Robot.phi_relativo));
 80030f4:	4b81      	ldr	r3, [pc, #516]	; (80032fc <vTask_Measure+0x30c>)
 80030f6:	ed93 7b02 	vldr	d7, [r3, #8]
 80030fa:	eeb0 0a47 	vmov.f32	s0, s14
 80030fe:	eef0 0a67 	vmov.f32	s1, s15
 8003102:	f00c f8f1 	bl	800f2e8 <sin>
 8003106:	eeb0 8a40 	vmov.f32	s16, s0
 800310a:	eef0 8a60 	vmov.f32	s17, s1
 800310e:	4b7b      	ldr	r3, [pc, #492]	; (80032fc <vTask_Measure+0x30c>)
 8003110:	ed93 7b02 	vldr	d7, [r3, #8]
 8003114:	eeb0 0a47 	vmov.f32	s0, s14
 8003118:	eef0 0a67 	vmov.f32	s1, s15
 800311c:	f00c f890 	bl	800f240 <cos>
 8003120:	eeb0 7a40 	vmov.f32	s14, s0
 8003124:	eef0 7a60 	vmov.f32	s15, s1
 8003128:	eeb0 1a47 	vmov.f32	s2, s14
 800312c:	eef0 1a67 	vmov.f32	s3, s15
 8003130:	eeb0 0a48 	vmov.f32	s0, s16
 8003134:	eef0 0a68 	vmov.f32	s1, s17
 8003138:	f00c f962 	bl	800f400 <atan2>
 800313c:	eeb0 7a40 	vmov.f32	s14, s0
 8003140:	eef0 7a60 	vmov.f32	s15, s1
 8003144:	4b6d      	ldr	r3, [pc, #436]	; (80032fc <vTask_Measure+0x30c>)
 8003146:	ed83 7b02 	vstr	d7, [r3, #8]
					//Calculamos la velocidad
					handler_Motor_L.parametersMotor.distance = (cm_L*handler_Motor_L.parametersMotor.count);                   //[mm]
 800314a:	4b75      	ldr	r3, [pc, #468]	; (8003320 <vTask_Measure+0x330>)
 800314c:	8b9b      	ldrh	r3, [r3, #28]
 800314e:	ee07 3a90 	vmov	s15, r3
 8003152:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003156:	4b73      	ldr	r3, [pc, #460]	; (8003324 <vTask_Measure+0x334>)
 8003158:	edd3 7a00 	vldr	s15, [r3]
 800315c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003160:	4b6f      	ldr	r3, [pc, #444]	; (8003320 <vTask_Measure+0x330>)
 8003162:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					handler_Motor_R.parametersMotor.distance = (cm_R*handler_Motor_R.parametersMotor.count);				   //[mm]
 8003166:	4b70      	ldr	r3, [pc, #448]	; (8003328 <vTask_Measure+0x338>)
 8003168:	8b9b      	ldrh	r3, [r3, #28]
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003172:	4b6e      	ldr	r3, [pc, #440]	; (800332c <vTask_Measure+0x33c>)
 8003174:	edd3 7a00 	vldr	s15, [r3]
 8003178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800317c:	4b6a      	ldr	r3, [pc, #424]	; (8003328 <vTask_Measure+0x338>)
 800317e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/time_accion;      //[m/s]
 8003182:	4b67      	ldr	r3, [pc, #412]	; (8003320 <vTask_Measure+0x330>)
 8003184:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003188:	4b69      	ldr	r3, [pc, #420]	; (8003330 <vTask_Measure+0x340>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	ee07 3a90 	vmov	s15, r3
 8003190:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003194:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003198:	4b61      	ldr	r3, [pc, #388]	; (8003320 <vTask_Measure+0x330>)
 800319a:	edc3 7a08 	vstr	s15, [r3, #32]
					handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/time_accion;      //[m/s]
 800319e:	4b62      	ldr	r3, [pc, #392]	; (8003328 <vTask_Measure+0x338>)
 80031a0:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80031a4:	4b62      	ldr	r3, [pc, #392]	; (8003330 <vTask_Measure+0x340>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	ee07 3a90 	vmov	s15, r3
 80031ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031b4:	4b5c      	ldr	r3, [pc, #368]	; (8003328 <vTask_Measure+0x338>)
 80031b6:	edc3 7a08 	vstr	s15, [r3, #32]
					//Reiniciamos el numero de conteos
					handler_Motor_R.parametersMotor.count = handler_Motor_L.parametersMotor.count = 0;
 80031ba:	4b59      	ldr	r3, [pc, #356]	; (8003320 <vTask_Measure+0x330>)
 80031bc:	2200      	movs	r2, #0
 80031be:	839a      	strh	r2, [r3, #28]
 80031c0:	4b57      	ldr	r3, [pc, #348]	; (8003320 <vTask_Measure+0x330>)
 80031c2:	8b9a      	ldrh	r2, [r3, #28]
 80031c4:	4b58      	ldr	r3, [pc, #352]	; (8003328 <vTask_Measure+0x338>)
 80031c6:	839a      	strh	r2, [r3, #28]
					//Reiniciamos variable
					sum_ang = counting_action = 0;
 80031c8:	4b51      	ldr	r3, [pc, #324]	; (8003310 <vTask_Measure+0x320>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	801a      	strh	r2, [r3, #0]
 80031ce:	4b4f      	ldr	r3, [pc, #316]	; (800330c <vTask_Measure+0x31c>)
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
					//Notificamos a la tarea respectiva
					xTaskNotify(xHandleTask_Line_PID, 0, eNoAction);
 80031d6:	4b57      	ldr	r3, [pc, #348]	; (8003334 <vTask_Measure+0x344>)
 80031d8:	6818      	ldr	r0, [r3, #0]
 80031da:	2300      	movs	r3, #0
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	2300      	movs	r3, #0
 80031e0:	2200      	movs	r2, #0
 80031e2:	2100      	movs	r1, #0
 80031e4:	f002 fdce 	bl	8005d84 <xTaskGenericNotify>
 80031e8:	e70c      	b.n	8003004 <vTask_Measure+0x14>
				}
				else{ counting_action++;}
 80031ea:	4b49      	ldr	r3, [pc, #292]	; (8003310 <vTask_Measure+0x320>)
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	3301      	adds	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	4b47      	ldr	r3, [pc, #284]	; (8003310 <vTask_Measure+0x320>)
 80031f4:	801a      	strh	r2, [r3, #0]
 80031f6:	e705      	b.n	8003004 <vTask_Measure+0x14>
			}
			else if(mode == 2)
 80031f8:	7afb      	ldrb	r3, [r7, #11]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d16f      	bne.n	80032de <vTask_Measure+0x2ee>
			{
				//----------------Accion a realizar con un tiempo especifico--------------------
				if(counting_action>=timeAction_TIMER_Sampling)
 80031fe:	4b44      	ldr	r3, [pc, #272]	; (8003310 <vTask_Measure+0x320>)
 8003200:	881a      	ldrh	r2, [r3, #0]
 8003202:	4b44      	ldr	r3, [pc, #272]	; (8003314 <vTask_Measure+0x324>)
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d34c      	bcc.n	80032a4 <vTask_Measure+0x2b4>
				{
					//Calculo de la distancia recorrida por cada rueda
					handler_Motor_L.parametersMotor.distance = (cm_L*handler_Motor_L.parametersMotor.count);                   //[mm]
 800320a:	4b45      	ldr	r3, [pc, #276]	; (8003320 <vTask_Measure+0x330>)
 800320c:	8b9b      	ldrh	r3, [r3, #28]
 800320e:	ee07 3a90 	vmov	s15, r3
 8003212:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003216:	4b43      	ldr	r3, [pc, #268]	; (8003324 <vTask_Measure+0x334>)
 8003218:	edd3 7a00 	vldr	s15, [r3]
 800321c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003220:	4b3f      	ldr	r3, [pc, #252]	; (8003320 <vTask_Measure+0x330>)
 8003222:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					handler_Motor_R.parametersMotor.distance = (cm_R*handler_Motor_R.parametersMotor.count);				   //[mm]
 8003226:	4b40      	ldr	r3, [pc, #256]	; (8003328 <vTask_Measure+0x338>)
 8003228:	8b9b      	ldrh	r3, [r3, #28]
 800322a:	ee07 3a90 	vmov	s15, r3
 800322e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003232:	4b3e      	ldr	r3, [pc, #248]	; (800332c <vTask_Measure+0x33c>)
 8003234:	edd3 7a00 	vldr	s15, [r3]
 8003238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323c:	4b3a      	ldr	r3, [pc, #232]	; (8003328 <vTask_Measure+0x338>)
 800323e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					//Reiniciamos el numero de conteos
					handler_Motor_R.parametersMotor.count = 0;
 8003242:	4b39      	ldr	r3, [pc, #228]	; (8003328 <vTask_Measure+0x338>)
 8003244:	2200      	movs	r2, #0
 8003246:	839a      	strh	r2, [r3, #28]
					handler_Motor_L.parametersMotor.count = 0;
 8003248:	4b35      	ldr	r3, [pc, #212]	; (8003320 <vTask_Measure+0x330>)
 800324a:	2200      	movs	r2, #0
 800324c:	839a      	strh	r2, [r3, #28]
					//Calculo angulo debido al desplazamiento del ICR
					ang_for_Displament_ICR += (((handler_Motor_R.parametersMotor.distance - handler_Motor_L.parametersMotor.distance)*100)
 800324e:	4b36      	ldr	r3, [pc, #216]	; (8003328 <vTask_Measure+0x338>)
 8003250:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003254:	4b32      	ldr	r3, [pc, #200]	; (8003320 <vTask_Measure+0x330>)
 8003256:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800325a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800325e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003338 <vTask_Measure+0x348>
 8003262:	ee67 7a87 	vmul.f32	s15, s15, s14
							/distanceBetweenWheels)*(180/M_PI); //[rad]
 8003266:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800333c <vTask_Measure+0x34c>
 800326a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800326e:	ee16 0a90 	vmov	r0, s13
 8003272:	f7fd f981 	bl	8000578 <__aeabi_f2d>
 8003276:	a31e      	add	r3, pc, #120	; (adr r3, 80032f0 <vTask_Measure+0x300>)
 8003278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327c:	f7fd f9d4 	bl	8000628 <__aeabi_dmul>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4610      	mov	r0, r2
 8003286:	4619      	mov	r1, r3
					ang_for_Displament_ICR += (((handler_Motor_R.parametersMotor.distance - handler_Motor_L.parametersMotor.distance)*100)
 8003288:	4b2d      	ldr	r3, [pc, #180]	; (8003340 <vTask_Measure+0x350>)
 800328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328e:	f7fd f815 	bl	80002bc <__adddf3>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	492a      	ldr	r1, [pc, #168]	; (8003340 <vTask_Measure+0x350>)
 8003298:	e9c1 2300 	strd	r2, r3, [r1]
					//Reiniciamos el contador de accion
					counting_action = 0;
 800329c:	4b1c      	ldr	r3, [pc, #112]	; (8003310 <vTask_Measure+0x320>)
 800329e:	2200      	movs	r2, #0
 80032a0:	801a      	strh	r2, [r3, #0]
 80032a2:	e005      	b.n	80032b0 <vTask_Measure+0x2c0>
				}
				else{counting_action++;}
 80032a4:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <vTask_Measure+0x320>)
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	3301      	adds	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	4b18      	ldr	r3, [pc, #96]	; (8003310 <vTask_Measure+0x320>)
 80032ae:	801a      	strh	r2, [r3, #0]
				//Combinar ambos ángulos
				ang_complementary = parameter_Posicion_Robot.grad_relativo + ang_for_Displament_ICR;
 80032b0:	4b12      	ldr	r3, [pc, #72]	; (80032fc <vTask_Measure+0x30c>)
 80032b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032b6:	4b22      	ldr	r3, [pc, #136]	; (8003340 <vTask_Measure+0x350>)
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	f7fc fffe 	bl	80002bc <__adddf3>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	491f      	ldr	r1, [pc, #124]	; (8003344 <vTask_Measure+0x354>)
 80032c6:	e9c1 2300 	strd	r2, r3, [r1]
				//Notificamos a la tarea respectiva
				xTaskNotify(xHandleTask_Stop_Execute, 0, eNoAction);
 80032ca:	4b1f      	ldr	r3, [pc, #124]	; (8003348 <vTask_Measure+0x358>)
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	2300      	movs	r3, #0
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	2300      	movs	r3, #0
 80032d4:	2200      	movs	r2, #0
 80032d6:	2100      	movs	r1, #0
 80032d8:	f002 fd54 	bl	8005d84 <xTaskGenericNotify>
 80032dc:	e692      	b.n	8003004 <vTask_Measure+0x14>
			}
			else{ __NOP(); }
 80032de:	bf00      	nop
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80032e0:	e690      	b.n	8003004 <vTask_Measure+0x14>
 80032e2:	bf00      	nop
 80032e4:	f3af 8000 	nop.w
 80032e8:	54442d18 	.word	0x54442d18
 80032ec:	400921fb 	.word	0x400921fb
 80032f0:	1a63c1f8 	.word	0x1a63c1f8
 80032f4:	404ca5dc 	.word	0x404ca5dc
 80032f8:	20000001 	.word	0x20000001
 80032fc:	20000868 	.word	0x20000868
 8003300:	200003ae 	.word	0x200003ae
 8003304:	2000028c 	.word	0x2000028c
 8003308:	20000418 	.word	0x20000418
 800330c:	200008b0 	.word	0x200008b0
 8003310:	200003da 	.word	0x200003da
 8003314:	20000002 	.word	0x20000002
 8003318:	200008b4 	.word	0x200008b4
 800331c:	40668000 	.word	0x40668000
 8003320:	20000338 	.word	0x20000338
 8003324:	200003b4 	.word	0x200003b4
 8003328:	200002c4 	.word	0x200002c4
 800332c:	200003b8 	.word	0x200003b8
 8003330:	200003d8 	.word	0x200003d8
 8003334:	200003f8 	.word	0x200003f8
 8003338:	42c80000 	.word	0x42c80000
 800333c:	4625a000 	.word	0x4625a000
 8003340:	20000858 	.word	0x20000858
 8003344:	20000860 	.word	0x20000860
 8003348:	20000408 	.word	0x20000408

0800334c <vTask_Line_PID>:
		}
	}
}
//------------Tarea Line PID---------------
void vTask_Line_PID(void * pvParameters)
{
 800334c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003350:	b08e      	sub	sp, #56	; 0x38
 8003352:	af02      	add	r7, sp, #8
 8003354:	6078      	str	r0, [r7, #4]
	//Definicion de variable
	BaseType_t notify_status = {0};
 8003356:	2300      	movs	r3, #0
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
	float sampling_timer = ((float) time_accion/1000);
 800335a:	4bc6      	ldr	r3, [pc, #792]	; (8003674 <vTask_Line_PID+0x328>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003366:	eddf 6ac4 	vldr	s13, [pc, #784]	; 8003678 <vTask_Line_PID+0x32c>
 800336a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800336e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float distance_c = 0;
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
	char bufferMsg[20] = {0};
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	f107 0310 	add.w	r3, r7, #16
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	60da      	str	r2, [r3, #12]
	char *prtbuffer = bufferMsg;
 800338a:	f107 030c 	add.w	r3, r7, #12
 800338e:	60bb      	str	r3, [r7, #8]
	float distance_recta = 0;
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	623b      	str	r3, [r7, #32]

	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8003396:	f04f 33ff 	mov.w	r3, #4294967295
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	2300      	movs	r3, #0
 800339e:	2200      	movs	r2, #0
 80033a0:	2100      	movs	r1, #0
 80033a2:	2000      	movs	r0, #0
 80033a4:	f002 fc6e 	bl	8005c84 <xTaskGenericNotifyWait>
 80033a8:	62f8      	str	r0, [r7, #44]	; 0x2c
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 80033aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d1f2      	bne.n	8003396 <vTask_Line_PID+0x4a>
		{
			//Calculo odometria
			distance_c = (handler_Motor_R.parametersMotor.distance+handler_Motor_L.parametersMotor.distance)/2;  	//[mm]
 80033b0:	4bb2      	ldr	r3, [pc, #712]	; (800367c <vTask_Line_PID+0x330>)
 80033b2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80033b6:	4bb2      	ldr	r3, [pc, #712]	; (8003680 <vTask_Line_PID+0x334>)
 80033b8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80033bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033c0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80033c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033c8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			parameter_Posicion_Robot.xr_position += distance_c*(cos(parameter_Posicion_Robot.phi_relativo));        //[mm]
 80033cc:	4bad      	ldr	r3, [pc, #692]	; (8003684 <vTask_Line_PID+0x338>)
 80033ce:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80033d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033d4:	f7fd f8d0 	bl	8000578 <__aeabi_f2d>
 80033d8:	4680      	mov	r8, r0
 80033da:	4689      	mov	r9, r1
 80033dc:	4ba9      	ldr	r3, [pc, #676]	; (8003684 <vTask_Line_PID+0x338>)
 80033de:	ed93 7b02 	vldr	d7, [r3, #8]
 80033e2:	eeb0 0a47 	vmov.f32	s0, s14
 80033e6:	eef0 0a67 	vmov.f32	s1, s15
 80033ea:	f00b ff29 	bl	800f240 <cos>
 80033ee:	ec53 2b10 	vmov	r2, r3, d0
 80033f2:	4640      	mov	r0, r8
 80033f4:	4649      	mov	r1, r9
 80033f6:	f7fd f917 	bl	8000628 <__aeabi_dmul>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4620      	mov	r0, r4
 8003400:	4629      	mov	r1, r5
 8003402:	f7fc ff5b 	bl	80002bc <__adddf3>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	499e      	ldr	r1, [pc, #632]	; (8003684 <vTask_Line_PID+0x338>)
 800340c:	e9c1 2306 	strd	r2, r3, [r1, #24]
			parameter_Posicion_Robot.yr_position += distance_c*(sin(parameter_Posicion_Robot.phi_relativo));       //[mm]
 8003410:	4b9c      	ldr	r3, [pc, #624]	; (8003684 <vTask_Line_PID+0x338>)
 8003412:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003416:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003418:	f7fd f8ae 	bl	8000578 <__aeabi_f2d>
 800341c:	4680      	mov	r8, r0
 800341e:	4689      	mov	r9, r1
 8003420:	4b98      	ldr	r3, [pc, #608]	; (8003684 <vTask_Line_PID+0x338>)
 8003422:	ed93 7b02 	vldr	d7, [r3, #8]
 8003426:	eeb0 0a47 	vmov.f32	s0, s14
 800342a:	eef0 0a67 	vmov.f32	s1, s15
 800342e:	f00b ff5b 	bl	800f2e8 <sin>
 8003432:	ec53 2b10 	vmov	r2, r3, d0
 8003436:	4640      	mov	r0, r8
 8003438:	4649      	mov	r1, r9
 800343a:	f7fd f8f5 	bl	8000628 <__aeabi_dmul>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4620      	mov	r0, r4
 8003444:	4629      	mov	r1, r5
 8003446:	f7fc ff39 	bl	80002bc <__adddf3>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	498d      	ldr	r1, [pc, #564]	; (8003684 <vTask_Line_PID+0x338>)
 8003450:	e9c1 2308 	strd	r2, r3, [r1, #32]
			//Paso de c.relativa a c.globales
			parameter_Posicion_Robot.xg_position = parameter_Posicion_Robot.xg_position_inicial + parameter_Posicion_Robot.xr_position*cos_cal - parameter_Posicion_Robot.yr_position*sin_cal;
 8003454:	4b8b      	ldr	r3, [pc, #556]	; (8003684 <vTask_Line_PID+0x338>)
 8003456:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800345a:	4b8a      	ldr	r3, [pc, #552]	; (8003684 <vTask_Line_PID+0x338>)
 800345c:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8003460:	4b89      	ldr	r3, [pc, #548]	; (8003688 <vTask_Line_PID+0x33c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd f887 	bl	8000578 <__aeabi_f2d>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4640      	mov	r0, r8
 8003470:	4649      	mov	r1, r9
 8003472:	f7fd f8d9 	bl	8000628 <__aeabi_dmul>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4620      	mov	r0, r4
 800347c:	4629      	mov	r1, r5
 800347e:	f7fc ff1d 	bl	80002bc <__adddf3>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4690      	mov	r8, r2
 8003488:	4699      	mov	r9, r3
 800348a:	4b7e      	ldr	r3, [pc, #504]	; (8003684 <vTask_Line_PID+0x338>)
 800348c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003490:	4b7e      	ldr	r3, [pc, #504]	; (800368c <vTask_Line_PID+0x340>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7fd f86f 	bl	8000578 <__aeabi_f2d>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4620      	mov	r0, r4
 80034a0:	4629      	mov	r1, r5
 80034a2:	f7fd f8c1 	bl	8000628 <__aeabi_dmul>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4640      	mov	r0, r8
 80034ac:	4649      	mov	r1, r9
 80034ae:	f7fc ff03 	bl	80002b8 <__aeabi_dsub>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4973      	ldr	r1, [pc, #460]	; (8003684 <vTask_Line_PID+0x338>)
 80034b8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			parameter_Posicion_Robot.yg_position = parameter_Posicion_Robot.yg_position_inicial + parameter_Posicion_Robot.xr_position*sin_cal + parameter_Posicion_Robot.yr_position*cos_cal;
 80034bc:	4b71      	ldr	r3, [pc, #452]	; (8003684 <vTask_Line_PID+0x338>)
 80034be:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80034c2:	4b70      	ldr	r3, [pc, #448]	; (8003684 <vTask_Line_PID+0x338>)
 80034c4:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 80034c8:	4b70      	ldr	r3, [pc, #448]	; (800368c <vTask_Line_PID+0x340>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fd f853 	bl	8000578 <__aeabi_f2d>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4640      	mov	r0, r8
 80034d8:	4649      	mov	r1, r9
 80034da:	f7fd f8a5 	bl	8000628 <__aeabi_dmul>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	4620      	mov	r0, r4
 80034e4:	4629      	mov	r1, r5
 80034e6:	f7fc fee9 	bl	80002bc <__adddf3>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4690      	mov	r8, r2
 80034f0:	4699      	mov	r9, r3
 80034f2:	4b64      	ldr	r3, [pc, #400]	; (8003684 <vTask_Line_PID+0x338>)
 80034f4:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80034f8:	4b63      	ldr	r3, [pc, #396]	; (8003688 <vTask_Line_PID+0x33c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fd f83b 	bl	8000578 <__aeabi_f2d>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4620      	mov	r0, r4
 8003508:	4629      	mov	r1, r5
 800350a:	f7fd f88d 	bl	8000628 <__aeabi_dmul>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4640      	mov	r0, r8
 8003514:	4649      	mov	r1, r9
 8003516:	f7fc fed1 	bl	80002bc <__adddf3>
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	4959      	ldr	r1, [pc, #356]	; (8003684 <vTask_Line_PID+0x338>)
 8003520:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			//Convertimos el valor y imprimemos
			sprintf(bufferMsg,"&%#.4f\t%#.4f\n", parameter_Posicion_Robot.xg_position , parameter_Posicion_Robot.yg_position);
 8003524:	4b57      	ldr	r3, [pc, #348]	; (8003684 <vTask_Line_PID+0x338>)
 8003526:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800352a:	4b56      	ldr	r3, [pc, #344]	; (8003684 <vTask_Line_PID+0x338>)
 800352c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003530:	f107 040c 	add.w	r4, r7, #12
 8003534:	e9cd 2300 	strd	r2, r3, [sp]
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4954      	ldr	r1, [pc, #336]	; (8003690 <vTask_Line_PID+0x344>)
 800353e:	4620      	mov	r0, r4
 8003540:	f007 fc64 	bl	800ae0c <siprintf>
			xQueueSend(xQueue_Print, &prtbuffer, portMAX_DELAY);
 8003544:	4b53      	ldr	r3, [pc, #332]	; (8003694 <vTask_Line_PID+0x348>)
 8003546:	6818      	ldr	r0, [r3, #0]
 8003548:	f107 0108 	add.w	r1, r7, #8
 800354c:	2300      	movs	r3, #0
 800354e:	f04f 32ff 	mov.w	r2, #4294967295
 8003552:	f001 f801 	bl	8004558 <xQueueGenericSend>
			/*Se envia una notificacion previa con la finalidad de desbloquear
			 la tarea, la cual se bloquea para que se envie el mensaje por USART*/
			xTaskNotify(xHandleTask_Line_PID, 0, eNoAction);
 8003556:	4b50      	ldr	r3, [pc, #320]	; (8003698 <vTask_Line_PID+0x34c>)
 8003558:	6818      	ldr	r0, [r3, #0]
 800355a:	2300      	movs	r3, #0
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	2300      	movs	r3, #0
 8003560:	2200      	movs	r2, #0
 8003562:	2100      	movs	r1, #0
 8003564:	f002 fc0e 	bl	8005d84 <xTaskGenericNotify>
			xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 8003568:	f04f 33ff 	mov.w	r3, #4294967295
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	2300      	movs	r3, #0
 8003570:	2200      	movs	r2, #0
 8003572:	2100      	movs	r1, #0
 8003574:	2000      	movs	r0, #0
 8003576:	f002 fb85 	bl	8005c84 <xTaskGenericNotifyWait>
			//Control PID para la distancia
			distance_recta = (distance_to_straight_line(&parameter_Path_Robot, parameter_Posicion_Robot.xg_position, parameter_Posicion_Robot.yg_position))/1000;
 800357a:	4b42      	ldr	r3, [pc, #264]	; (8003684 <vTask_Line_PID+0x338>)
 800357c:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8003580:	4b40      	ldr	r3, [pc, #256]	; (8003684 <vTask_Line_PID+0x338>)
 8003582:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8003586:	eeb0 1a46 	vmov.f32	s2, s12
 800358a:	eef0 1a66 	vmov.f32	s3, s13
 800358e:	eeb0 0a47 	vmov.f32	s0, s14
 8003592:	eef0 0a67 	vmov.f32	s1, s15
 8003596:	4841      	ldr	r0, [pc, #260]	; (800369c <vTask_Line_PID+0x350>)
 8003598:	f7fe fb9e 	bl	8001cd8 <distance_to_straight_line>
 800359c:	ec51 0b10 	vmov	r0, r1, d0
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	4b3e      	ldr	r3, [pc, #248]	; (80036a0 <vTask_Line_PID+0x354>)
 80035a6:	f7fd f969 	bl	800087c <__aeabi_ddiv>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	4610      	mov	r0, r2
 80035b0:	4619      	mov	r1, r3
 80035b2:	f7fd fb31 	bl	8000c18 <__aeabi_d2f>
 80035b6:	4603      	mov	r3, r0
 80035b8:	623b      	str	r3, [r7, #32]
			PID_simple(&parameter_PID_distace, sampling_timer, 0,  distance_recta);
 80035ba:	ed97 1a08 	vldr	s2, [r7, #32]
 80035be:	eddf 0a39 	vldr	s1, [pc, #228]	; 80036a4 <vTask_Line_PID+0x358>
 80035c2:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80035c6:	4838      	ldr	r0, [pc, #224]	; (80036a8 <vTask_Line_PID+0x35c>)
 80035c8:	f000 fc76 	bl	8003eb8 <PID_simple>
			//Aplicacndo correcion
			vel_Setpoint_L = velSetPoint - parameter_PID_distace.u;
 80035cc:	4b37      	ldr	r3, [pc, #220]	; (80036ac <vTask_Line_PID+0x360>)
 80035ce:	ed93 7a00 	vldr	s14, [r3]
 80035d2:	4b35      	ldr	r3, [pc, #212]	; (80036a8 <vTask_Line_PID+0x35c>)
 80035d4:	edd3 7a00 	vldr	s15, [r3]
 80035d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035dc:	4b34      	ldr	r3, [pc, #208]	; (80036b0 <vTask_Line_PID+0x364>)
 80035de:	edc3 7a00 	vstr	s15, [r3]
			vel_Setpoint_R = velSetPoint + parameter_PID_distace.u;
 80035e2:	4b31      	ldr	r3, [pc, #196]	; (80036a8 <vTask_Line_PID+0x35c>)
 80035e4:	ed93 7a00 	vldr	s14, [r3]
 80035e8:	4b30      	ldr	r3, [pc, #192]	; (80036ac <vTask_Line_PID+0x360>)
 80035ea:	edd3 7a00 	vldr	s15, [r3]
 80035ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035f2:	4b30      	ldr	r3, [pc, #192]	; (80036b4 <vTask_Line_PID+0x368>)
 80035f4:	edc3 7a00 	vstr	s15, [r3]
			//Aplicacion del PID
			PID_simple(&handler_Motor_L.parametersMotor.parametersPID, sampling_timer, vel_Setpoint_L,  handler_Motor_L.parametersMotor.velocity);
 80035f8:	4b2d      	ldr	r3, [pc, #180]	; (80036b0 <vTask_Line_PID+0x364>)
 80035fa:	edd3 7a00 	vldr	s15, [r3]
 80035fe:	4b20      	ldr	r3, [pc, #128]	; (8003680 <vTask_Line_PID+0x334>)
 8003600:	ed93 7a08 	vldr	s14, [r3, #32]
 8003604:	eeb0 1a47 	vmov.f32	s2, s14
 8003608:	eef0 0a67 	vmov.f32	s1, s15
 800360c:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8003610:	481b      	ldr	r0, [pc, #108]	; (8003680 <vTask_Line_PID+0x334>)
 8003612:	f000 fc51 	bl	8003eb8 <PID_simple>
			PID_simple(&handler_Motor_R.parametersMotor.parametersPID, sampling_timer, vel_Setpoint_R,  handler_Motor_R.parametersMotor.velocity);
 8003616:	4b27      	ldr	r3, [pc, #156]	; (80036b4 <vTask_Line_PID+0x368>)
 8003618:	edd3 7a00 	vldr	s15, [r3]
 800361c:	4b17      	ldr	r3, [pc, #92]	; (800367c <vTask_Line_PID+0x330>)
 800361e:	ed93 7a08 	vldr	s14, [r3, #32]
 8003622:	eeb0 1a47 	vmov.f32	s2, s14
 8003626:	eef0 0a67 	vmov.f32	s1, s15
 800362a:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800362e:	4813      	ldr	r0, [pc, #76]	; (800367c <vTask_Line_PID+0x330>)
 8003630:	f000 fc42 	bl	8003eb8 <PID_simple>
			//Cambiamos valores
			handler_Motor_L.configMotor.new_dutty += handler_Motor_L.parametersMotor.parametersPID.u;
 8003634:	4b12      	ldr	r3, [pc, #72]	; (8003680 <vTask_Line_PID+0x334>)
 8003636:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800363a:	4b11      	ldr	r3, [pc, #68]	; (8003680 <vTask_Line_PID+0x334>)
 800363c:	edd3 7a00 	vldr	s15, [r3]
 8003640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003644:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <vTask_Line_PID+0x334>)
 8003646:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			handler_Motor_R.configMotor.new_dutty += handler_Motor_R.parametersMotor.parametersPID.u;
 800364a:	4b0c      	ldr	r3, [pc, #48]	; (800367c <vTask_Line_PID+0x330>)
 800364c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003650:	4b0a      	ldr	r3, [pc, #40]	; (800367c <vTask_Line_PID+0x330>)
 8003652:	edd3 7a00 	vldr	s15, [r3]
 8003656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800365a:	4b08      	ldr	r3, [pc, #32]	; (800367c <vTask_Line_PID+0x330>)
 800365c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			//Correccion del dutty
			correction(&handler_Motor_L);
 8003660:	4807      	ldr	r0, [pc, #28]	; (8003680 <vTask_Line_PID+0x334>)
 8003662:	f000 fc85 	bl	8003f70 <correction>
			correction(&handler_Motor_R);
 8003666:	4805      	ldr	r0, [pc, #20]	; (800367c <vTask_Line_PID+0x330>)
 8003668:	f000 fc82 	bl	8003f70 <correction>
			//Notificamos a la tarea respectiva
			xTaskNotify(xHandleTask_Stop_Execute, 0, eNoAction);
 800366c:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <vTask_Line_PID+0x36c>)
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	e024      	b.n	80036bc <vTask_Line_PID+0x370>
 8003672:	bf00      	nop
 8003674:	200003d8 	.word	0x200003d8
 8003678:	447a0000 	.word	0x447a0000
 800367c:	200002c4 	.word	0x200002c4
 8003680:	20000338 	.word	0x20000338
 8003684:	20000868 	.word	0x20000868
 8003688:	20000850 	.word	0x20000850
 800368c:	20000854 	.word	0x20000854
 8003690:	08011c78 	.word	0x08011c78
 8003694:	2000040c 	.word	0x2000040c
 8003698:	200003f8 	.word	0x200003f8
 800369c:	200007e8 	.word	0x200007e8
 80036a0:	408f4000 	.word	0x408f4000
 80036a4:	00000000 	.word	0x00000000
 80036a8:	200003bc 	.word	0x200003bc
 80036ac:	200003b0 	.word	0x200003b0
 80036b0:	200008bc 	.word	0x200008bc
 80036b4:	200008b8 	.word	0x200008b8
 80036b8:	20000408 	.word	0x20000408
 80036bc:	2300      	movs	r3, #0
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	2300      	movs	r3, #0
 80036c2:	2200      	movs	r2, #0
 80036c4:	2100      	movs	r1, #0
 80036c6:	f002 fb5d 	bl	8005d84 <xTaskGenericNotify>
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80036ca:	e664      	b.n	8003396 <vTask_Line_PID+0x4a>

080036cc <led_state_callback>:


//-----------------------Inicio definicion funciones del Software Timer---------------------------

void led_state_callback(TimerHandle_t xTimer)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
	//Cambio estado opuesto Led
	GPIOxTooglePin(&handler_GPIO_BlinkyPin);
 80036d4:	4803      	ldr	r0, [pc, #12]	; (80036e4 <led_state_callback+0x18>)
 80036d6:	f005 fa34 	bl	8008b42 <GPIOxTooglePin>
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000214 	.word	0x20000214

080036e8 <process_stringsend>:


//-----------------------Inicio definicion funciones para recepcion de mensaje---------------------------
//Funcion que ayuda en el procesamiento del comando
void process_stringsend(char stringsend[500])
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08a      	sub	sp, #40	; 0x28
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	6078      	str	r0, [r7, #4]
	//Definicion de structura del comando
	command_t structcmd = {0};
 80036f0:	f107 030c 	add.w	r3, r7, #12
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	609a      	str	r2, [r3, #8]
 80036fc:	60da      	str	r2, [r3, #12]
 80036fe:	611a      	str	r2, [r3, #16]
	//Extraemos el string enviado
	extract_stringsend(stringsend);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f851 	bl	80037a8 <extract_stringsend>
	//De acuerdo al state se procesa el mensaje
	if(next_state==sMenuOperation || next_state==sExecution)
 8003706:	4b23      	ldr	r3, [pc, #140]	; (8003794 <process_stringsend+0xac>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <process_stringsend+0x2e>
 800370e:	4b21      	ldr	r3, [pc, #132]	; (8003794 <process_stringsend+0xac>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d135      	bne.n	8003782 <process_stringsend+0x9a>
	{
		//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
		sscanf(stringsend, "%s %u %u", structcmd.send_cmd, &structcmd.firtparameter, &structcmd.secondparameter);
 8003716:	f107 030c 	add.w	r3, r7, #12
 800371a:	f103 010c 	add.w	r1, r3, #12
 800371e:	f107 020c 	add.w	r2, r7, #12
 8003722:	f107 030c 	add.w	r3, r7, #12
 8003726:	3310      	adds	r3, #16
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	460b      	mov	r3, r1
 800372c:	491a      	ldr	r1, [pc, #104]	; (8003798 <process_stringsend+0xb0>)
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f007 fb8c 	bl	800ae4c <siscanf>
		//Envio de struct a la cola
		xQueueSend(xQueue_StructCommand, &structcmd, 0);
 8003734:	4b19      	ldr	r3, [pc, #100]	; (800379c <process_stringsend+0xb4>)
 8003736:	6818      	ldr	r0, [r3, #0]
 8003738:	f107 010c 	add.w	r1, r7, #12
 800373c:	2300      	movs	r3, #0
 800373e:	2200      	movs	r2, #0
 8003740:	f000 ff0a 	bl	8004558 <xQueueGenericSend>
		//De al state se ejecuta una respectiva tarea
		switch(next_state)
 8003744:	4b13      	ldr	r3, [pc, #76]	; (8003794 <process_stringsend+0xac>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <process_stringsend+0x6a>
 800374c:	2b01      	cmp	r3, #1
 800374e:	d00a      	beq.n	8003766 <process_stringsend+0x7e>
 8003750:	e013      	b.n	800377a <process_stringsend+0x92>
		{
		case sMenuOperation:
			//Notificamos a la tarea respectiva
			xTaskNotify(xHandleTask_Menu, 0, eNoAction);
 8003752:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <process_stringsend+0xb8>)
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	2300      	movs	r3, #0
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	2300      	movs	r3, #0
 800375c:	2200      	movs	r2, #0
 800375e:	2100      	movs	r1, #0
 8003760:	f002 fb10 	bl	8005d84 <xTaskGenericNotify>
			break;
 8003764:	e00b      	b.n	800377e <process_stringsend+0x96>
		case sExecution:
			//Notificamos a la tarea respectiva
			xTaskNotify(xHandleTask_Stop, 0, eNoAction);
 8003766:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <process_stringsend+0xbc>)
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	2300      	movs	r3, #0
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	2300      	movs	r3, #0
 8003770:	2200      	movs	r2, #0
 8003772:	2100      	movs	r1, #0
 8003774:	f002 fb06 	bl	8005d84 <xTaskGenericNotify>
			break;
 8003778:	e001      	b.n	800377e <process_stringsend+0x96>
		default:
			__NOP();
 800377a:	bf00      	nop
			break;
 800377c:	bf00      	nop
		switch(next_state)
 800377e:	bf00      	nop
	{
		//Notificamos a la tarea respectiva
		//xTaskNotify(xHandleTask_Received_AStar, 0, eNoAction);
	}
	else{ __NOP(); }
}
 8003780:	e004      	b.n	800378c <process_stringsend+0xa4>
	else if(next_state==sAStar)
 8003782:	4b04      	ldr	r3, [pc, #16]	; (8003794 <process_stringsend+0xac>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d000      	beq.n	800378c <process_stringsend+0xa4>
	else{ __NOP(); }
 800378a:	bf00      	nop
}
 800378c:	bf00      	nop
 800378e:	3720      	adds	r7, #32
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20000420 	.word	0x20000420
 8003798:	08011c88 	.word	0x08011c88
 800379c:	20000410 	.word	0x20000410
 80037a0:	200003e0 	.word	0x200003e0
 80037a4:	200003f0 	.word	0x200003f0

080037a8 <extract_stringsend>:
//Funcion para obtener el comando
int extract_stringsend(char cmd[500])
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
	//Definicion de variables
	uint8_t item;
	uint8_t counter_j = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	75fb      	strb	r3, [r7, #23]
	BaseType_t status;
	//Se verifica si hay un nuevo mensaje
	status = uxQueueMessagesWaiting(xQueue_InputData);
 80037b4:	4b17      	ldr	r3, [pc, #92]	; (8003814 <extract_stringsend+0x6c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f001 fac6 	bl	8004d4a <uxQueueMessagesWaiting>
 80037be:	4603      	mov	r3, r0
 80037c0:	613b      	str	r3, [r7, #16]
	if(status == 0)
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d102      	bne.n	80037ce <extract_stringsend+0x26>
	{
		return -1;
 80037c8:	f04f 33ff 	mov.w	r3, #4294967295
 80037cc:	e01d      	b.n	800380a <extract_stringsend+0x62>
	}
	do{
		//Recibimos un elemento y lo montamos en item
		status = xQueueReceive(xQueue_InputData, &item, 0);
 80037ce:	4b11      	ldr	r3, [pc, #68]	; (8003814 <extract_stringsend+0x6c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f107 010f 	add.w	r1, r7, #15
 80037d6:	2200      	movs	r2, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f001 f865 	bl	80048a8 <xQueueReceive>
 80037de:	6138      	str	r0, [r7, #16]
		if(status ==pdTRUE){
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d107      	bne.n	80037f6 <extract_stringsend+0x4e>
			//Vamos llenando el arreglo del comando
			cmd[counter_j++] = item;
 80037e6:	7dfb      	ldrb	r3, [r7, #23]
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	75fa      	strb	r2, [r7, #23]
 80037ec:	461a      	mov	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4413      	add	r3, r2
 80037f2:	7bfa      	ldrb	r2, [r7, #15]
 80037f4:	701a      	strb	r2, [r3, #0]
		}
	}while(item != '@');
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
 80037f8:	2b40      	cmp	r3, #64	; 0x40
 80037fa:	d1e8      	bne.n	80037ce <extract_stringsend+0x26>

	//Agregamos el elemento nulo y ademas definimos el largo del mensaje
	cmd[counter_j - 1] = '\0';
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
 80037fe:	3b01      	subs	r3, #1
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	4413      	add	r3, r2
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]

	return 0;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	20000414 	.word	0x20000414

08003818 <set_operation_square>:


//-------------Inicio de la definicion de las funciones para la contruccion de la lista de operaciones ----------------------------------
//Operaciones del Cuadrado
void set_operation_square(Parameters_Operation_t *prtList, double dis_side, double direction_square)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b0a8      	sub	sp, #160	; 0xa0
 800381c:	af00      	add	r7, sp, #0
 800381e:	6178      	str	r0, [r7, #20]
 8003820:	ed87 0b02 	vstr	d0, [r7, #8]
 8003824:	ed87 1b00 	vstr	d1, [r7]
	//Definicion de variables
	Parameter_build_t parameter_build = {0};
 8003828:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800382c:	2230      	movs	r2, #48	; 0x30
 800382e:	2100      	movs	r1, #0
 8003830:	4618      	mov	r0, r3
 8003832:	f006 fc63 	bl	800a0fc <memset>
	int8_t value_side = 0;
 8003836:	2300      	movs	r3, #0
 8003838:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	//Definicion de las coordenadas del cuadrado
	if(direction_square == 0){value_side = 1;}
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003848:	f7fd f956 	bl	8000af8 <__aeabi_dcmpeq>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <set_operation_square+0x42>
 8003852:	2301      	movs	r3, #1
 8003854:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8003858:	e002      	b.n	8003860 <set_operation_square+0x48>
	else{ value_side = -1;}
 800385a:	23ff      	movs	r3, #255	; 0xff
 800385c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	double coordination_position_square[2][5] = {{0, dis_side, dis_side, 0, 0},{0, 0, value_side*dis_side,value_side*dis_side,0}};
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800386c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003870:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8003874:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003878:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80038ac:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fc fe4f 	bl	8000554 <__aeabi_i2d>
 80038b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038ba:	f7fc feb5 	bl	8000628 <__aeabi_dmul>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 80038c6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fc fe42 	bl	8000554 <__aeabi_i2d>
 80038d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038d4:	f7fc fea8 	bl	8000628 <__aeabi_dmul>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	//Definimos la posicion inicial del cuadrado
	parameter_build.initline_x = coordination_position_square[0][0]; parameter_build.initline_y = coordination_position_square[0][0];
 80038ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038f0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 80038f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038f8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	parameter_build.grad_vector_init = 0; parameter_build.number_operation = 0;
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8003908:	2300      	movs	r3, #0
 800390a:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
	parameter_build.delta_before[0] = dis_side; parameter_build.delta_before[1] = 0;
 800390e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003912:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	//Construccion de las operaciones
	for(uint8_t i=1; i<5; i++)
 8003922:	2301      	movs	r3, #1
 8003924:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8003928:	e023      	b.n	8003972 <set_operation_square+0x15a>
	{
		build_Operation(prtList, &parameter_build, coordination_position_square[0][i], coordination_position_square[1][i]);
 800392a:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	33a0      	adds	r3, #160	; 0xa0
 8003932:	443b      	add	r3, r7
 8003934:	3b88      	subs	r3, #136	; 0x88
 8003936:	ed93 7b00 	vldr	d7, [r3]
 800393a:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800393e:	3305      	adds	r3, #5
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	33a0      	adds	r3, #160	; 0xa0
 8003944:	443b      	add	r3, r7
 8003946:	3b88      	subs	r3, #136	; 0x88
 8003948:	ed93 6b00 	vldr	d6, [r3]
 800394c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003950:	eeb0 1a46 	vmov.f32	s2, s12
 8003954:	eef0 1a66 	vmov.f32	s3, s13
 8003958:	eeb0 0a47 	vmov.f32	s0, s14
 800395c:	eef0 0a67 	vmov.f32	s1, s15
 8003960:	4619      	mov	r1, r3
 8003962:	6978      	ldr	r0, [r7, #20]
 8003964:	f7fd ffb4 	bl	80018d0 <build_Operation>
	for(uint8_t i=1; i<5; i++)
 8003968:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800396c:	3301      	adds	r3, #1
 800396e:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8003972:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003976:	2b04      	cmp	r3, #4
 8003978:	d9d7      	bls.n	800392a <set_operation_square+0x112>
	}
	//Agregamos indicador de la operacion final
	prtList[parameter_build.number_operation+1].operacion = NULL_OPERATION;
 800397a:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800397e:	3301      	adds	r3, #1
 8003980:	015b      	lsls	r3, r3, #5
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4413      	add	r3, r2
 8003986:	2200      	movs	r2, #0
 8003988:	701a      	strb	r2, [r3, #0]
}
 800398a:	bf00      	nop
 800398c:	37a0      	adds	r7, #160	; 0xa0
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	0000      	movs	r0, r0
 8003994:	0000      	movs	r0, r0
	...

08003998 <straight_line>:


//------------------------------Inicio de la definicion de funciones del modo----------------------------------------
//------linea recta------
void straight_line(uint8_t dutty)   //a = [mm]
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	71fb      	strb	r3, [r7, #7]
	//---------Calculo parametros de la linea recta---------
	calculation_parameter_distance(&parameter_Path_Robot);
 80039a2:	486d      	ldr	r0, [pc, #436]	; (8003b58 <straight_line+0x1c0>)
 80039a4:	f7fe f8f0 	bl	8001b88 <calculation_parameter_distance>
	//---------Configuracion coordenadas medidas---------
	//Coordenadas Globales
	parameter_Posicion_Robot.grad_grobal += ang_complementary;
 80039a8:	4b6c      	ldr	r3, [pc, #432]	; (8003b5c <straight_line+0x1c4>)
 80039aa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80039ae:	4b6c      	ldr	r3, [pc, #432]	; (8003b60 <straight_line+0x1c8>)
 80039b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b4:	f7fc fc82 	bl	80002bc <__adddf3>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4967      	ldr	r1, [pc, #412]	; (8003b5c <straight_line+0x1c4>)
 80039be:	e9c1 2304 	strd	r2, r3, [r1, #16]
	//Reiniciaos Coordenadas relativas
	parameter_Posicion_Robot.xr_position = parameter_Posicion_Robot.yr_position = 0;
 80039c2:	4966      	ldr	r1, [pc, #408]	; (8003b5c <straight_line+0x1c4>)
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80039d0:	4b62      	ldr	r3, [pc, #392]	; (8003b5c <straight_line+0x1c4>)
 80039d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80039d6:	4961      	ldr	r1, [pc, #388]	; (8003b5c <straight_line+0x1c4>)
 80039d8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	parameter_Posicion_Robot.phi_relativo = 0;
 80039dc:	495f      	ldr	r1, [pc, #380]	; (8003b5c <straight_line+0x1c4>)
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	parameter_Posicion_Robot.grad_relativo = 0;
 80039ea:	495c      	ldr	r1, [pc, #368]	; (8003b5c <straight_line+0x1c4>)
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	e9c1 2300 	strd	r2, r3, [r1]
	ang_for_Displament_ICR = 0;
 80039f8:	495a      	ldr	r1, [pc, #360]	; (8003b64 <straight_line+0x1cc>)
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	e9c1 2300 	strd	r2, r3, [r1]
	//---------Configuracion coordenadas teoricas---------
	parameter_Path_Robot.rotative_Grad_Relative = 0;
 8003a06:	4b54      	ldr	r3, [pc, #336]	; (8003b58 <straight_line+0x1c0>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	639a      	str	r2, [r3, #56]	; 0x38
	//Calculos extra
	cos_cal = cos(((parameter_Posicion_Robot.grad_grobal*M_PI)/180));
 8003a0c:	4b53      	ldr	r3, [pc, #332]	; (8003b5c <straight_line+0x1c4>)
 8003a0e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003a12:	a34f      	add	r3, pc, #316	; (adr r3, 8003b50 <straight_line+0x1b8>)
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	f7fc fe06 	bl	8000628 <__aeabi_dmul>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4610      	mov	r0, r2
 8003a22:	4619      	mov	r1, r3
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	4b4f      	ldr	r3, [pc, #316]	; (8003b68 <straight_line+0x1d0>)
 8003a2a:	f7fc ff27 	bl	800087c <__aeabi_ddiv>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	ec43 2b17 	vmov	d7, r2, r3
 8003a36:	eeb0 0a47 	vmov.f32	s0, s14
 8003a3a:	eef0 0a67 	vmov.f32	s1, s15
 8003a3e:	f00b fbff 	bl	800f240 <cos>
 8003a42:	ec53 2b10 	vmov	r2, r3, d0
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f7fd f8e5 	bl	8000c18 <__aeabi_d2f>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	4a46      	ldr	r2, [pc, #280]	; (8003b6c <straight_line+0x1d4>)
 8003a52:	6013      	str	r3, [r2, #0]
	sin_cal = sin(((parameter_Posicion_Robot.grad_grobal*M_PI)/180));
 8003a54:	4b41      	ldr	r3, [pc, #260]	; (8003b5c <straight_line+0x1c4>)
 8003a56:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003a5a:	a33d      	add	r3, pc, #244	; (adr r3, 8003b50 <straight_line+0x1b8>)
 8003a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a60:	f7fc fde2 	bl	8000628 <__aeabi_dmul>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4610      	mov	r0, r2
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	4b3d      	ldr	r3, [pc, #244]	; (8003b68 <straight_line+0x1d0>)
 8003a72:	f7fc ff03 	bl	800087c <__aeabi_ddiv>
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	ec43 2b17 	vmov	d7, r2, r3
 8003a7e:	eeb0 0a47 	vmov.f32	s0, s14
 8003a82:	eef0 0a67 	vmov.f32	s1, s15
 8003a86:	f00b fc2f 	bl	800f2e8 <sin>
 8003a8a:	ec53 2b10 	vmov	r2, r3, d0
 8003a8e:	4610      	mov	r0, r2
 8003a90:	4619      	mov	r1, r3
 8003a92:	f7fd f8c1 	bl	8000c18 <__aeabi_d2f>
 8003a96:	4603      	mov	r3, r0
 8003a98:	4a35      	ldr	r2, [pc, #212]	; (8003b70 <straight_line+0x1d8>)
 8003a9a:	6013      	str	r3, [r2, #0]
	//-----------------PID-------------------------
	//Establecemos valores iniciales
	handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_prev = 0;
 8003a9c:	4b35      	ldr	r3, [pc, #212]	; (8003b74 <straight_line+0x1dc>)
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	60da      	str	r2, [r3, #12]
 8003aa4:	4b33      	ldr	r3, [pc, #204]	; (8003b74 <straight_line+0x1dc>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	4a32      	ldr	r2, [pc, #200]	; (8003b74 <straight_line+0x1dc>)
 8003aaa:	6053      	str	r3, [r2, #4]
	handler_Motor_L.parametersMotor.parametersPID.u =  handler_Motor_L.parametersMotor.parametersPID.e_intel = 0;
 8003aac:	4b31      	ldr	r3, [pc, #196]	; (8003b74 <straight_line+0x1dc>)
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	4b2f      	ldr	r3, [pc, #188]	; (8003b74 <straight_line+0x1dc>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	4a2e      	ldr	r2, [pc, #184]	; (8003b74 <straight_line+0x1dc>)
 8003aba:	6013      	str	r3, [r2, #0]
	handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_prev = 0;
 8003abc:	4b2e      	ldr	r3, [pc, #184]	; (8003b78 <straight_line+0x1e0>)
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	60da      	str	r2, [r3, #12]
 8003ac4:	4b2c      	ldr	r3, [pc, #176]	; (8003b78 <straight_line+0x1e0>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4a2b      	ldr	r2, [pc, #172]	; (8003b78 <straight_line+0x1e0>)
 8003aca:	6053      	str	r3, [r2, #4]
	handler_Motor_R.parametersMotor.parametersPID.u =  handler_Motor_R.parametersMotor.parametersPID.e_intel = 0;
 8003acc:	4b2a      	ldr	r3, [pc, #168]	; (8003b78 <straight_line+0x1e0>)
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	4b28      	ldr	r3, [pc, #160]	; (8003b78 <straight_line+0x1e0>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	4a27      	ldr	r2, [pc, #156]	; (8003b78 <straight_line+0x1e0>)
 8003ada:	6013      	str	r3, [r2, #0]
	parameter_PID_distace.e = parameter_PID_distace.e_prev = parameter_PID_distace.u =  parameter_PID_distace.e_intel = 0;
 8003adc:	4b27      	ldr	r3, [pc, #156]	; (8003b7c <straight_line+0x1e4>)
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	609a      	str	r2, [r3, #8]
 8003ae4:	4b25      	ldr	r3, [pc, #148]	; (8003b7c <straight_line+0x1e4>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	4a24      	ldr	r2, [pc, #144]	; (8003b7c <straight_line+0x1e4>)
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	4b23      	ldr	r3, [pc, #140]	; (8003b7c <straight_line+0x1e4>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a22      	ldr	r2, [pc, #136]	; (8003b7c <straight_line+0x1e4>)
 8003af2:	60d3      	str	r3, [r2, #12]
 8003af4:	4b21      	ldr	r3, [pc, #132]	; (8003b7c <straight_line+0x1e4>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4a20      	ldr	r2, [pc, #128]	; (8003b7c <straight_line+0x1e4>)
 8003afa:	6053      	str	r3, [r2, #4]
	//-------------Configruacion Modo--------------
	//Definimos el dutty inicial
	handler_Motor_L.configMotor.new_dutty = duttySetPoint;
 8003afc:	4b20      	ldr	r3, [pc, #128]	; (8003b80 <straight_line+0x1e8>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	ee07 3a90 	vmov	s15, r3
 8003b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b08:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <straight_line+0x1dc>)
 8003b0a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	handler_Motor_R.configMotor.new_dutty = duttySetPoint;
 8003b0e:	4b1c      	ldr	r3, [pc, #112]	; (8003b80 <straight_line+0x1e8>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1a:	4b17      	ldr	r3, [pc, #92]	; (8003b78 <straight_line+0x1e0>)
 8003b1c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	//Reiniciamos variables
	counting_action = 0;
 8003b20:	4b18      	ldr	r3, [pc, #96]	; (8003b84 <straight_line+0x1ec>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	801a      	strh	r2, [r3, #0]
	//Cargamos la configuracion del modo e iniciamos el modo
	config_mode(1, dutty, dutty);
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	ee07 3a90 	vmov	s15, r3
 8003b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b30:	79fb      	ldrb	r3, [r7, #7]
 8003b32:	ee07 3a10 	vmov	s14, r3
 8003b36:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003b3a:	eef0 0a47 	vmov.f32	s1, s14
 8003b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b42:	2001      	movs	r0, #1
 8003b44:	f000 f85c 	bl	8003c00 <config_mode>
}
 8003b48:	bf00      	nop
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	54442d18 	.word	0x54442d18
 8003b54:	400921fb 	.word	0x400921fb
 8003b58:	200007e8 	.word	0x200007e8
 8003b5c:	20000868 	.word	0x20000868
 8003b60:	20000860 	.word	0x20000860
 8003b64:	20000858 	.word	0x20000858
 8003b68:	40668000 	.word	0x40668000
 8003b6c:	20000850 	.word	0x20000850
 8003b70:	20000854 	.word	0x20000854
 8003b74:	20000338 	.word	0x20000338
 8003b78:	200002c4 	.word	0x200002c4
 8003b7c:	200003bc 	.word	0x200003bc
 8003b80:	20000008 	.word	0x20000008
 8003b84:	200003da 	.word	0x200003da

08003b88 <turn_itself>:
//---------Giro sobre si mismo---------
void turn_itself(int16_t turn_grad)     //a = [grados], b = direccion giro
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	80fb      	strh	r3, [r7, #6]
	//-------------Configruacion Modo--------------
	//Definicion del angulo de giro
	parameter_Path_Robot.rotative_Grad += parameter_Path_Robot.rotative_Grad_Relative += turn_grad;
 8003b92:	4b17      	ldr	r3, [pc, #92]	; (8003bf0 <turn_itself+0x68>)
 8003b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	4a14      	ldr	r2, [pc, #80]	; (8003bf0 <turn_itself+0x68>)
 8003b9e:	6393      	str	r3, [r2, #56]	; 0x38
 8003ba0:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <turn_itself+0x68>)
 8003ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ba4:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <turn_itself+0x68>)
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba8:	4413      	add	r3, r2
 8003baa:	4a11      	ldr	r2, [pc, #68]	; (8003bf0 <turn_itself+0x68>)
 8003bac:	63d3      	str	r3, [r2, #60]	; 0x3c
	//Cambiamso la direccion del motor
	if(turn_grad<0)
 8003bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	da08      	bge.n	8003bc8 <turn_itself+0x40>
	{
		//Seleccionamos el motor derecho
		handler_Motor_Execute = &handler_Motor_R;
 8003bb6:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <turn_itself+0x6c>)
 8003bb8:	4a0f      	ldr	r2, [pc, #60]	; (8003bf8 <turn_itself+0x70>)
 8003bba:	601a      	str	r2, [r3, #0]
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8003bbc:	4b0d      	ldr	r3, [pc, #52]	; (8003bf4 <turn_itself+0x6c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fd fe56 	bl	8001872 <updateDirMotor>
 8003bc6:	e007      	b.n	8003bd8 <turn_itself+0x50>
	}
	else
	{
		//Seleccionamos el motor izquierdo
		handler_Motor_Execute = &handler_Motor_L;
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <turn_itself+0x6c>)
 8003bca:	4a0c      	ldr	r2, [pc, #48]	; (8003bfc <turn_itself+0x74>)
 8003bcc:	601a      	str	r2, [r3, #0]
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8003bce:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <turn_itself+0x6c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fd fe4d 	bl	8001872 <updateDirMotor>
	}

	//Cargamos la configuracion del modo e iniciamos el modo
	config_mode(2,20,21);
 8003bd8:	eef3 0a05 	vmov.f32	s1, #53	; 0x41a80000  21.0
 8003bdc:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003be0:	2002      	movs	r0, #2
 8003be2:	f000 f80d 	bl	8003c00 <config_mode>
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	200007e8 	.word	0x200007e8
 8003bf4:	20000424 	.word	0x20000424
 8003bf8:	200002c4 	.word	0x200002c4
 8003bfc:	20000338 	.word	0x20000338

08003c00 <config_mode>:
//Configuracion del modo
void config_mode(uint8_t status, float dutty_L, float dutty_R)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c0c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003c10:	73fb      	strb	r3, [r7, #15]
	//Especificar el modo de operacion por medio de una Mailbox
	xQueueOverwrite(xMailbox_Mode, &status);
 8003c12:	4b10      	ldr	r3, [pc, #64]	; (8003c54 <config_mode+0x54>)
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	f107 010f 	add.w	r1, r7, #15
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f000 fc9b 	bl	8004558 <xQueueGenericSend>
	//Cargamos la configuracion
	config_motor(dutty_L, dutty_R, frequency_PWM_Motor); //Tipo de Estudio, por dutty L, por dutty R, fre pwm [hz]
 8003c22:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c26:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003c2a:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <config_mode+0x58>)
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	ee07 3a90 	vmov	s15, r3
 8003c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c36:	eef0 0a67 	vmov.f32	s1, s15
 8003c3a:	ed97 0a01 	vldr	s0, [r7, #4]
 8003c3e:	ee17 0a10 	vmov	r0, s14
 8003c42:	f000 f8fd 	bl	8003e40 <config_motor>
	//Iniciamos los motores
	status_motor(SET);
 8003c46:	2001      	movs	r0, #1
 8003c48:	f000 f88a 	bl	8003d60 <status_motor>
}
 8003c4c:	bf00      	nop
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	20000418 	.word	0x20000418
 8003c58:	20000006 	.word	0x20000006

08003c5c <init_coordinates>:
//Reinicio de coordenadas
void init_coordinates(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
	//Reinicio de varibable
	ang_for_Displament_ICR = 0;
 8003c60:	493b      	ldr	r1, [pc, #236]	; (8003d50 <init_coordinates+0xf4>)
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	f04f 0300 	mov.w	r3, #0
 8003c6a:	e9c1 2300 	strd	r2, r3, [r1]
	ang_complementary = 0;
 8003c6e:	4939      	ldr	r1, [pc, #228]	; (8003d54 <init_coordinates+0xf8>)
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	e9c1 2300 	strd	r2, r3, [r1]
	//Reinicio de parametros de la structura de la posicion del robot
	parameter_Posicion_Robot.grad_grobal = 0; parameter_Posicion_Robot.grad_relativo = 0; parameter_Posicion_Robot.phi_relativo = 0;
 8003c7c:	4936      	ldr	r1, [pc, #216]	; (8003d58 <init_coordinates+0xfc>)
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003c8a:	4933      	ldr	r1, [pc, #204]	; (8003d58 <init_coordinates+0xfc>)
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	e9c1 2300 	strd	r2, r3, [r1]
 8003c98:	492f      	ldr	r1, [pc, #188]	; (8003d58 <init_coordinates+0xfc>)
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	parameter_Posicion_Robot.xg_position = 0; parameter_Posicion_Robot.xg_position_inicial = 0; parameter_Posicion_Robot.xr_position = 0;
 8003ca6:	492c      	ldr	r1, [pc, #176]	; (8003d58 <init_coordinates+0xfc>)
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8003cb4:	4928      	ldr	r1, [pc, #160]	; (8003d58 <init_coordinates+0xfc>)
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8003cc2:	4925      	ldr	r1, [pc, #148]	; (8003d58 <init_coordinates+0xfc>)
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	parameter_Posicion_Robot.yg_position = 0; parameter_Posicion_Robot.yg_position_inicial = 0; parameter_Posicion_Robot.yr_position = 0;
 8003cd0:	4921      	ldr	r1, [pc, #132]	; (8003d58 <init_coordinates+0xfc>)
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8003cde:	491e      	ldr	r1, [pc, #120]	; (8003d58 <init_coordinates+0xfc>)
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8003cec:	491a      	ldr	r1, [pc, #104]	; (8003d58 <init_coordinates+0xfc>)
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//Reinicio de parametros de la structura de path
	parameter_Path_Robot.goal_Position_x = 0; parameter_Path_Robot.goal_Position_y = 0;
 8003cfa:	4918      	ldr	r1, [pc, #96]	; (8003d5c <init_coordinates+0x100>)
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8003d08:	4914      	ldr	r1, [pc, #80]	; (8003d5c <init_coordinates+0x100>)
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	parameter_Path_Robot.line_Distance = 0;
 8003d16:	4b11      	ldr	r3, [pc, #68]	; (8003d5c <init_coordinates+0x100>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	641a      	str	r2, [r3, #64]	; 0x40
	parameter_Path_Robot.rotative_Grad = 0; parameter_Path_Robot.rotative_Grad_Relative = 0;
 8003d1c:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <init_coordinates+0x100>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d22:	4b0e      	ldr	r3, [pc, #56]	; (8003d5c <init_coordinates+0x100>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	639a      	str	r2, [r3, #56]	; 0x38
	parameter_Path_Robot.start_position_x = 0; parameter_Path_Robot.start_position_y = 0;
 8003d28:	490c      	ldr	r1, [pc, #48]	; (8003d5c <init_coordinates+0x100>)
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8003d36:	4909      	ldr	r1, [pc, #36]	; (8003d5c <init_coordinates+0x100>)
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	20000858 	.word	0x20000858
 8003d54:	20000860 	.word	0x20000860
 8003d58:	20000868 	.word	0x20000868
 8003d5c:	200007e8 	.word	0x200007e8

08003d60 <status_motor>:
//-----------------------------Fin de la definicio de funciones del modo--------------------------------------------


//----------------------Iinicio definicion de las funciones de la Operacion Motor---------------------------------
void status_motor(uint8_t status)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	71fb      	strb	r3, [r7, #7]
	if(status == 1)
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d134      	bne.n	8003dda <status_motor+0x7a>
	{
		//Activamos el motor
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_ENABLE);
 8003d70:	4b30      	ldr	r3, [pc, #192]	; (8003e34 <status_motor+0xd4>)
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	2101      	movs	r1, #1
 8003d76:	4618      	mov	r0, r3
 8003d78:	f005 fb14 	bl	80093a4 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_ENABLE);
 8003d7c:	4b2e      	ldr	r3, [pc, #184]	; (8003e38 <status_motor+0xd8>)
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	2101      	movs	r1, #1
 8003d82:	4618      	mov	r0, r3
 8003d84:	f005 fb0e 	bl	80093a4 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&SET);
 8003d88:	4b2a      	ldr	r3, [pc, #168]	; (8003e34 <status_motor+0xd4>)
 8003d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d8c:	4b29      	ldr	r3, [pc, #164]	; (8003e34 <status_motor+0xd4>)
 8003d8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4610      	mov	r0, r2
 8003d9c:	f004 fea6 	bl	8008aec <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&SET);
 8003da0:	4b25      	ldr	r3, [pc, #148]	; (8003e38 <status_motor+0xd8>)
 8003da2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003da4:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <status_motor+0xd8>)
 8003da6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	4619      	mov	r1, r3
 8003db2:	4610      	mov	r0, r2
 8003db4:	f004 fe9a 	bl	8008aec <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, RESET);
 8003db8:	4b1e      	ldr	r3, [pc, #120]	; (8003e34 <status_motor+0xd4>)
 8003dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f004 fe94 	bl	8008aec <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, RESET);
 8003dc4:	4b1c      	ldr	r3, [pc, #112]	; (8003e38 <status_motor+0xd8>)
 8003dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc8:	2100      	movs	r1, #0
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f004 fe8e 	bl	8008aec <GPIO_writePin>
		//Activamos la interrupcion
		statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_ENABLE);
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	481a      	ldr	r0, [pc, #104]	; (8003e3c <status_motor+0xdc>)
 8003dd4:	f003 fb8e 	bl	80074f4 <statusiInterruptionTimer>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
		//Desactivamos interrupcion
		statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_DISABLE);
	}
}
 8003dd8:	e027      	b.n	8003e2a <status_motor+0xca>
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_DISABLE);
 8003dda:	4b16      	ldr	r3, [pc, #88]	; (8003e34 <status_motor+0xd4>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	2100      	movs	r1, #0
 8003de0:	4618      	mov	r0, r3
 8003de2:	f005 fadf 	bl	80093a4 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_DISABLE);
 8003de6:	4b14      	ldr	r3, [pc, #80]	; (8003e38 <status_motor+0xd8>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	2100      	movs	r1, #0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f005 fad9 	bl	80093a4 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&RESET);
 8003df2:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <status_motor+0xd4>)
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	2100      	movs	r1, #0
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f004 fe77 	bl	8008aec <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&RESET);
 8003dfe:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <status_motor+0xd8>)
 8003e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e02:	2100      	movs	r1, #0
 8003e04:	4618      	mov	r0, r3
 8003e06:	f004 fe71 	bl	8008aec <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <status_motor+0xd4>)
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0e:	2101      	movs	r1, #1
 8003e10:	4618      	mov	r0, r3
 8003e12:	f004 fe6b 	bl	8008aec <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
 8003e16:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <status_motor+0xd8>)
 8003e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f004 fe65 	bl	8008aec <GPIO_writePin>
		statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_DISABLE);
 8003e22:	2100      	movs	r1, #0
 8003e24:	4805      	ldr	r0, [pc, #20]	; (8003e3c <status_motor+0xdc>)
 8003e26:	f003 fb65 	bl	80074f4 <statusiInterruptionTimer>
}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20000338 	.word	0x20000338
 8003e38:	200002c4 	.word	0x200002c4
 8003e3c:	2000038c 	.word	0x2000038c

08003e40 <config_motor>:

//Funcion para al configuracion de los motores
void config_motor(int firth, float second, float third)  //Tipo de Estudio, por dutty L, por dutty R, fre pwm [hz]
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e4c:	edc7 0a01 	vstr	s1, [r7, #4]
	//Establecer valores
	handler_Motor_R.parametersMotor.count = 0;
 8003e50:	4b15      	ldr	r3, [pc, #84]	; (8003ea8 <config_motor+0x68>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	839a      	strh	r2, [r3, #28]
	handler_Motor_L.parametersMotor.count = 0;
 8003e56:	4b15      	ldr	r3, [pc, #84]	; (8003eac <config_motor+0x6c>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	839a      	strh	r2, [r3, #28]
	//Actualizamos el valor del dutty y frecuencia
	float value_period = 100000/third;
 8003e5c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003eb0 <config_motor+0x70>
 8003e60:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e68:	edc7 7a05 	vstr	s15, [r7, #20]
	updateFrequencyTimer(&handler_TIMER_Motor, value_period);
 8003e6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e74:	ee17 3a90 	vmov	r3, s15
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	480d      	ldr	r0, [pc, #52]	; (8003eb4 <config_motor+0x74>)
 8003e7e:	f003 fb59 	bl	8007534 <updateFrequencyTimer>
	updateDuttyMotor(&handler_Motor_R, second);
 8003e82:	ed97 0a02 	vldr	s0, [r7, #8]
 8003e86:	4808      	ldr	r0, [pc, #32]	; (8003ea8 <config_motor+0x68>)
 8003e88:	f7fd fcdc 	bl	8001844 <updateDuttyMotor>
	updateDuttyMotor(&handler_Motor_L, firth);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e96:	eeb0 0a67 	vmov.f32	s0, s15
 8003e9a:	4804      	ldr	r0, [pc, #16]	; (8003eac <config_motor+0x6c>)
 8003e9c:	f7fd fcd2 	bl	8001844 <updateDuttyMotor>
}
 8003ea0:	bf00      	nop
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	200002c4 	.word	0x200002c4
 8003eac:	20000338 	.word	0x20000338
 8003eb0:	47c35000 	.word	0x47c35000
 8003eb4:	2000037c 	.word	0x2000037c

08003eb8 <PID_simple>:



//----------------------------Inicio de la definicion de las funciones para el PID-----------------------------------------
void PID_simple(Parameters_PID_t *ptrPIDHandler, float timer, float setpoint, float measure)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ec4:	edc7 0a01 	vstr	s1, [r7, #4]
 8003ec8:	ed87 1a00 	vstr	s2, [r7]
	//Calculo del error
	ptrPIDHandler->e = setpoint-measure;
 8003ecc:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ed0:	edd7 7a00 	vldr	s15, [r7]
 8003ed4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float pro =  ptrPIDHandler->kp*ptrPIDHandler->e;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	ed93 7a04 	vldr	s14, [r3, #16]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eee:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->e_intel +=  ptrPIDHandler->e*timer;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	ed93 7a02 	vldr	s14, [r3, #8]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	edd3 6a01 	vldr	s13, [r3, #4]
 8003efe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	edc3 7a02 	vstr	s15, [r3, #8]
	float deriv =  ptrPIDHandler->kd*(ptrPIDHandler->e - ptrPIDHandler->e_prev)/timer;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	ed93 7a06 	vldr	s14, [r3, #24]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	edd3 6a01 	vldr	s13, [r3, #4]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f22:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f26:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003f2a:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f32:	edc7 7a04 	vstr	s15, [r7, #16]
	ptrPIDHandler->u =  pro + ptrPIDHandler->ki*ptrPIDHandler->e_intel + deriv;        //Ley del controlador PID discreto
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	ed93 7a05 	vldr	s14, [r3, #20]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f46:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	edc3 7a00 	vstr	s15, [r3]
     //Retorno a los valores reales
	ptrPIDHandler->e_prev = ptrPIDHandler->e;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	60da      	str	r2, [r3, #12]
}
 8003f64:	bf00      	nop
 8003f66:	371c      	adds	r7, #28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <correction>:

void correction(Motor_Handler_t *ptrMotorHandler)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
	//Definimos variables auxiliares
	float port_dutty = 0;
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
	//Guardamos valor
	port_dutty = ptrMotorHandler->configMotor.new_dutty;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	60fb      	str	r3, [r7, #12]
    //Saturo el porcentaje de dutty en un tope maximo y minimo
    if (port_dutty >= 60) { port_dutty = 60; }
 8003f84:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f88:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003fe0 <correction+0x70>
 8003f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f94:	db02      	blt.n	8003f9c <correction+0x2c>
 8003f96:	4b13      	ldr	r3, [pc, #76]	; (8003fe4 <correction+0x74>)
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	e018      	b.n	8003fce <correction+0x5e>
    else if(port_dutty <= duttySetPoint-5) { port_dutty = duttySetPoint-5; }
 8003f9c:	4b12      	ldr	r3, [pc, #72]	; (8003fe8 <correction+0x78>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	3b05      	subs	r3, #5
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003faa:	ed97 7a03 	vldr	s14, [r7, #12]
 8003fae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb6:	d809      	bhi.n	8003fcc <correction+0x5c>
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <correction+0x78>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	3b05      	subs	r3, #5
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fc6:	edc7 7a03 	vstr	s15, [r7, #12]
 8003fca:	e000      	b.n	8003fce <correction+0x5e>
    else{ __NOP();}
 8003fcc:	bf00      	nop

    //Actualizamoe el valor del dutty
    updateDuttyMotor(ptrMotorHandler, port_dutty);
 8003fce:	ed97 0a03 	vldr	s0, [r7, #12]
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fd fc36 	bl	8001844 <updateDuttyMotor>
}
 8003fd8:	bf00      	nop
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	42700000 	.word	0x42700000
 8003fe4:	42700000 	.word	0x42700000
 8003fe8:	20000008 	.word	0x20000008

08003fec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003fec:	480d      	ldr	r0, [pc, #52]	; (8004024 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003fee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ff0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ff4:	480c      	ldr	r0, [pc, #48]	; (8004028 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ff6:	490d      	ldr	r1, [pc, #52]	; (800402c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ff8:	4a0d      	ldr	r2, [pc, #52]	; (8004030 <LoopForever+0xe>)
  movs r3, #0
 8003ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ffc:	e002      	b.n	8004004 <LoopCopyDataInit>

08003ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004002:	3304      	adds	r3, #4

08004004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004008:	d3f9      	bcc.n	8003ffe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800400a:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <LoopForever+0x12>)
  ldr r4, =_ebss
 800400c:	4c0a      	ldr	r4, [pc, #40]	; (8004038 <LoopForever+0x16>)
  movs r3, #0
 800400e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004010:	e001      	b.n	8004016 <LoopFillZerobss>

08004012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004014:	3204      	adds	r2, #4

08004016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004018:	d3fb      	bcc.n	8004012 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800401a:	f006 f83d 	bl	800a098 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800401e:	f7fd ffd7 	bl	8001fd0 <main>

08004022 <LoopForever>:

LoopForever:
    b LoopForever
 8004022:	e7fe      	b.n	8004022 <LoopForever>
  ldr   r0, =_estack
 8004024:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800402c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8004030:	08012400 	.word	0x08012400
  ldr r2, =_sbss
 8004034:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8004038:	20013f00 	.word	0x20013f00

0800403c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800403c:	e7fe      	b.n	800403c <ADC_IRQHandler>
	...

08004040 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800404a:	4b0f      	ldr	r3, [pc, #60]	; (8004088 <ITM_SendChar+0x48>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a0e      	ldr	r2, [pc, #56]	; (8004088 <ITM_SendChar+0x48>)
 8004050:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004054:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8004056:	4b0d      	ldr	r3, [pc, #52]	; (800408c <ITM_SendChar+0x4c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a0c      	ldr	r2, [pc, #48]	; (800408c <ITM_SendChar+0x4c>)
 800405c:	f043 0301 	orr.w	r3, r3, #1
 8004060:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8004062:	bf00      	nop
 8004064:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f8      	beq.n	8004064 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8004072:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004076:	79fb      	ldrb	r3, [r7, #7]
 8004078:	6013      	str	r3, [r2, #0]
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	e000edfc 	.word	0xe000edfc
 800408c:	e0000e00 	.word	0xe0000e00

08004090 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
	return 1;
 8004094:	2301      	movs	r3, #1
}
 8004096:	4618      	mov	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <_kill>:

int _kill(int pid, int sig)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80040aa:	f005 ffef 	bl	800a08c <__errno>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2216      	movs	r2, #22
 80040b2:	601a      	str	r2, [r3, #0]
	return -1;
 80040b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <_exit>:

void _exit (int status)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80040c8:	f04f 31ff 	mov.w	r1, #4294967295
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff ffe7 	bl	80040a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80040d2:	e7fe      	b.n	80040d2 <_exit+0x12>

080040d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	e00a      	b.n	80040fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80040e6:	f3af 8000 	nop.w
 80040ea:	4601      	mov	r1, r0
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	60ba      	str	r2, [r7, #8]
 80040f2:	b2ca      	uxtb	r2, r1
 80040f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	3301      	adds	r3, #1
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	429a      	cmp	r2, r3
 8004102:	dbf0      	blt.n	80040e6 <_read+0x12>
	}

return len;
 8004104:	687b      	ldr	r3, [r7, #4]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b086      	sub	sp, #24
 8004112:	af00      	add	r7, sp, #0
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	e009      	b.n	8004134 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	60ba      	str	r2, [r7, #8]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff ff89 	bl	8004040 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	3301      	adds	r3, #1
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	429a      	cmp	r2, r3
 800413a:	dbf1      	blt.n	8004120 <_write+0x12>
	}
	return len;
 800413c:	687b      	ldr	r3, [r7, #4]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <_close>:

int _close(int file)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
	return -1;
 800414e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004152:	4618      	mov	r0, r3
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800416e:	605a      	str	r2, [r3, #4]
	return 0;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <_isatty>:

int _isatty(int file)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
	return 1;
 8004186:	2301      	movs	r3, #1
}
 8004188:	4618      	mov	r0, r3
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
	return 0;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
	...

080041b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041b8:	4a14      	ldr	r2, [pc, #80]	; (800420c <_sbrk+0x5c>)
 80041ba:	4b15      	ldr	r3, [pc, #84]	; (8004210 <_sbrk+0x60>)
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041c4:	4b13      	ldr	r3, [pc, #76]	; (8004214 <_sbrk+0x64>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d102      	bne.n	80041d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041cc:	4b11      	ldr	r3, [pc, #68]	; (8004214 <_sbrk+0x64>)
 80041ce:	4a12      	ldr	r2, [pc, #72]	; (8004218 <_sbrk+0x68>)
 80041d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041d2:	4b10      	ldr	r3, [pc, #64]	; (8004214 <_sbrk+0x64>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4413      	add	r3, r2
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d207      	bcs.n	80041f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041e0:	f005 ff54 	bl	800a08c <__errno>
 80041e4:	4603      	mov	r3, r0
 80041e6:	220c      	movs	r2, #12
 80041e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041ea:	f04f 33ff 	mov.w	r3, #4294967295
 80041ee:	e009      	b.n	8004204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041f0:	4b08      	ldr	r3, [pc, #32]	; (8004214 <_sbrk+0x64>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041f6:	4b07      	ldr	r3, [pc, #28]	; (8004214 <_sbrk+0x64>)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4413      	add	r3, r2
 80041fe:	4a05      	ldr	r2, [pc, #20]	; (8004214 <_sbrk+0x64>)
 8004200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004202:	68fb      	ldr	r3, [r7, #12]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	20020000 	.word	0x20020000
 8004210:	00000400 	.word	0x00000400
 8004214:	200008c0 	.word	0x200008c0
 8004218:	20013f00 	.word	0x20013f00

0800421c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f103 0208 	add.w	r2, r3, #8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f04f 32ff 	mov.w	r2, #4294967295
 8004234:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f103 0208 	add.w	r2, r3, #8
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f103 0208 	add.w	r2, r3, #8
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004276:	b480      	push	{r7}
 8004278:	b085      	sub	sp, #20
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	601a      	str	r2, [r3, #0]
}
 80042b2:	bf00      	nop
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80042be:	b480      	push	{r7}
 80042c0:	b085      	sub	sp, #20
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d4:	d103      	bne.n	80042de <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	e00c      	b.n	80042f8 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3308      	adds	r3, #8
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	e002      	b.n	80042ec <vListInsert+0x2e>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d2f6      	bcs.n	80042e6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	601a      	str	r2, [r3, #0]
}
 8004324:	bf00      	nop
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6892      	ldr	r2, [r2, #8]
 8004346:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6852      	ldr	r2, [r2, #4]
 8004350:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	429a      	cmp	r2, r3
 800435a:	d103      	bne.n	8004364 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	1e5a      	subs	r2, r3, #1
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10a      	bne.n	80043ae <xQueueGenericReset+0x2a>
        __asm volatile
 8004398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	60bb      	str	r3, [r7, #8]
    }
 80043aa:	bf00      	nop
 80043ac:	e7fe      	b.n	80043ac <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80043ae:	f002 fbcb 	bl	8006b48 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ba:	68f9      	ldr	r1, [r7, #12]
 80043bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043be:	fb01 f303 	mul.w	r3, r1, r3
 80043c2:	441a      	add	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043de:	3b01      	subs	r3, #1
 80043e0:	68f9      	ldr	r1, [r7, #12]
 80043e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043e4:	fb01 f303 	mul.w	r3, r1, r3
 80043e8:	441a      	add	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	22ff      	movs	r2, #255	; 0xff
 80043f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	22ff      	movs	r2, #255	; 0xff
 80043fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d114      	bne.n	800442e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d01a      	beq.n	8004442 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	3310      	adds	r3, #16
 8004410:	4618      	mov	r0, r3
 8004412:	f001 fa03 	bl	800581c <xTaskRemoveFromEventList>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d012      	beq.n	8004442 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800441c:	4b0c      	ldr	r3, [pc, #48]	; (8004450 <xQueueGenericReset+0xcc>)
 800441e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	e009      	b.n	8004442 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3310      	adds	r3, #16
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff fef2 	bl	800421c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3324      	adds	r3, #36	; 0x24
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff feed 	bl	800421c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004442:	f002 fbb1 	bl	8006ba8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004446:	2301      	movs	r3, #1
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	e000ed04 	.word	0xe000ed04

08004454 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004454:	b580      	push	{r7, lr}
 8004456:	b08c      	sub	sp, #48	; 0x30
 8004458:	af02      	add	r7, sp, #8
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	4613      	mov	r3, r2
 8004460:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10a      	bne.n	800447e <xQueueGenericCreate+0x2a>
        __asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	61bb      	str	r3, [r7, #24]
    }
 800447a:	bf00      	nop
 800447c:	e7fe      	b.n	800447c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	fb02 f303 	mul.w	r3, r2, r3
 8004486:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d006      	beq.n	800449c <xQueueGenericCreate+0x48>
 800448e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	fbb2 f3f3 	udiv	r3, r2, r3
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	429a      	cmp	r2, r3
 800449a:	d101      	bne.n	80044a0 <xQueueGenericCreate+0x4c>
 800449c:	2301      	movs	r3, #1
 800449e:	e000      	b.n	80044a2 <xQueueGenericCreate+0x4e>
 80044a0:	2300      	movs	r3, #0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10a      	bne.n	80044bc <xQueueGenericCreate+0x68>
        __asm volatile
 80044a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044aa:	f383 8811 	msr	BASEPRI, r3
 80044ae:	f3bf 8f6f 	isb	sy
 80044b2:	f3bf 8f4f 	dsb	sy
 80044b6:	617b      	str	r3, [r7, #20]
    }
 80044b8:	bf00      	nop
 80044ba:	e7fe      	b.n	80044ba <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80044c2:	d90a      	bls.n	80044da <xQueueGenericCreate+0x86>
        __asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	613b      	str	r3, [r7, #16]
    }
 80044d6:	bf00      	nop
 80044d8:	e7fe      	b.n	80044d8 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	3350      	adds	r3, #80	; 0x50
 80044de:	4618      	mov	r0, r3
 80044e0:	f002 fc54 	bl	8006d8c <pvPortMalloc>
 80044e4:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00d      	beq.n	8004508 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	3350      	adds	r3, #80	; 0x50
 80044f4:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044f6:	79fa      	ldrb	r2, [r7, #7]
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	4613      	mov	r3, r2
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	68b9      	ldr	r1, [r7, #8]
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f805 	bl	8004512 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004508:	6a3b      	ldr	r3, [r7, #32]
    }
 800450a:	4618      	mov	r0, r3
 800450c:	3728      	adds	r7, #40	; 0x28
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b084      	sub	sp, #16
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	607a      	str	r2, [r7, #4]
 800451e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d103      	bne.n	800452e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	e002      	b.n	8004534 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004540:	2101      	movs	r1, #1
 8004542:	69b8      	ldr	r0, [r7, #24]
 8004544:	f7ff ff1e 	bl	8004384 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	78fa      	ldrb	r2, [r7, #3]
 800454c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004550:	bf00      	nop
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08e      	sub	sp, #56	; 0x38
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004566:	2300      	movs	r3, #0
 8004568:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10a      	bne.n	800458a <xQueueGenericSend+0x32>
        __asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004586:	bf00      	nop
 8004588:	e7fe      	b.n	8004588 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d103      	bne.n	8004598 <xQueueGenericSend+0x40>
 8004590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <xQueueGenericSend+0x44>
 8004598:	2301      	movs	r3, #1
 800459a:	e000      	b.n	800459e <xQueueGenericSend+0x46>
 800459c:	2300      	movs	r3, #0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10a      	bne.n	80045b8 <xQueueGenericSend+0x60>
        __asm volatile
 80045a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80045b4:	bf00      	nop
 80045b6:	e7fe      	b.n	80045b6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d103      	bne.n	80045c6 <xQueueGenericSend+0x6e>
 80045be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d101      	bne.n	80045ca <xQueueGenericSend+0x72>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <xQueueGenericSend+0x74>
 80045ca:	2300      	movs	r3, #0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10a      	bne.n	80045e6 <xQueueGenericSend+0x8e>
        __asm volatile
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	623b      	str	r3, [r7, #32]
    }
 80045e2:	bf00      	nop
 80045e4:	e7fe      	b.n	80045e4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045e6:	f001 fab5 	bl	8005b54 <xTaskGetSchedulerState>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d102      	bne.n	80045f6 <xQueueGenericSend+0x9e>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <xQueueGenericSend+0xa2>
 80045f6:	2301      	movs	r3, #1
 80045f8:	e000      	b.n	80045fc <xQueueGenericSend+0xa4>
 80045fa:	2300      	movs	r3, #0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10a      	bne.n	8004616 <xQueueGenericSend+0xbe>
        __asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	61fb      	str	r3, [r7, #28]
    }
 8004612:	bf00      	nop
 8004614:	e7fe      	b.n	8004614 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004616:	f002 fa97 	bl	8006b48 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004622:	429a      	cmp	r2, r3
 8004624:	d302      	bcc.n	800462c <xQueueGenericSend+0xd4>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b02      	cmp	r3, #2
 800462a:	d129      	bne.n	8004680 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	68b9      	ldr	r1, [r7, #8]
 8004630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004632:	f000 fba8 	bl	8004d86 <prvCopyDataToQueue>
 8004636:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	2b00      	cmp	r3, #0
 800463e:	d010      	beq.n	8004662 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004642:	3324      	adds	r3, #36	; 0x24
 8004644:	4618      	mov	r0, r3
 8004646:	f001 f8e9 	bl	800581c <xTaskRemoveFromEventList>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d013      	beq.n	8004678 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004650:	4b3f      	ldr	r3, [pc, #252]	; (8004750 <xQueueGenericSend+0x1f8>)
 8004652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	e00a      	b.n	8004678 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004668:	4b39      	ldr	r3, [pc, #228]	; (8004750 <xQueueGenericSend+0x1f8>)
 800466a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004678:	f002 fa96 	bl	8006ba8 <vPortExitCritical>
                return pdPASS;
 800467c:	2301      	movs	r3, #1
 800467e:	e063      	b.n	8004748 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d103      	bne.n	800468e <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004686:	f002 fa8f 	bl	8006ba8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800468a:	2300      	movs	r3, #0
 800468c:	e05c      	b.n	8004748 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800468e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004690:	2b00      	cmp	r3, #0
 8004692:	d106      	bne.n	80046a2 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004694:	f107 0314 	add.w	r3, r7, #20
 8004698:	4618      	mov	r0, r3
 800469a:	f001 f921 	bl	80058e0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800469e:	2301      	movs	r3, #1
 80046a0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80046a2:	f002 fa81 	bl	8006ba8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80046a6:	f000 fe9b 	bl	80053e0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80046aa:	f002 fa4d 	bl	8006b48 <vPortEnterCritical>
 80046ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046b4:	b25b      	sxtb	r3, r3
 80046b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ba:	d103      	bne.n	80046c4 <xQueueGenericSend+0x16c>
 80046bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046ca:	b25b      	sxtb	r3, r3
 80046cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d0:	d103      	bne.n	80046da <xQueueGenericSend+0x182>
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046da:	f002 fa65 	bl	8006ba8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046de:	1d3a      	adds	r2, r7, #4
 80046e0:	f107 0314 	add.w	r3, r7, #20
 80046e4:	4611      	mov	r1, r2
 80046e6:	4618      	mov	r0, r3
 80046e8:	f001 f910 	bl	800590c <xTaskCheckForTimeOut>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d124      	bne.n	800473c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046f4:	f000 fc3f 	bl	8004f76 <prvIsQueueFull>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d018      	beq.n	8004730 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	3310      	adds	r3, #16
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	4611      	mov	r1, r2
 8004706:	4618      	mov	r0, r3
 8004708:	f001 f838 	bl	800577c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800470c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800470e:	f000 fbca 	bl	8004ea6 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004712:	f000 fe73 	bl	80053fc <xTaskResumeAll>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	f47f af7c 	bne.w	8004616 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800471e:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <xQueueGenericSend+0x1f8>)
 8004720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	e772      	b.n	8004616 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004732:	f000 fbb8 	bl	8004ea6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004736:	f000 fe61 	bl	80053fc <xTaskResumeAll>
 800473a:	e76c      	b.n	8004616 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800473c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800473e:	f000 fbb2 	bl	8004ea6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004742:	f000 fe5b 	bl	80053fc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004746:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004748:	4618      	mov	r0, r3
 800474a:	3738      	adds	r7, #56	; 0x38
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	e000ed04 	.word	0xe000ed04

08004754 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b090      	sub	sp, #64	; 0x40
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
 8004760:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800477e:	bf00      	nop
 8004780:	e7fe      	b.n	8004780 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d103      	bne.n	8004790 <xQueueGenericSendFromISR+0x3c>
 8004788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <xQueueGenericSendFromISR+0x40>
 8004790:	2301      	movs	r3, #1
 8004792:	e000      	b.n	8004796 <xQueueGenericSendFromISR+0x42>
 8004794:	2300      	movs	r3, #0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10a      	bne.n	80047b0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80047ac:	bf00      	nop
 80047ae:	e7fe      	b.n	80047ae <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d103      	bne.n	80047be <xQueueGenericSendFromISR+0x6a>
 80047b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <xQueueGenericSendFromISR+0x6e>
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <xQueueGenericSendFromISR+0x70>
 80047c2:	2300      	movs	r3, #0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10a      	bne.n	80047de <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	623b      	str	r3, [r7, #32]
    }
 80047da:	bf00      	nop
 80047dc:	e7fe      	b.n	80047dc <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047de:	f002 fa95 	bl	8006d0c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80047e2:	f3ef 8211 	mrs	r2, BASEPRI
 80047e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ea:	f383 8811 	msr	BASEPRI, r3
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	61fa      	str	r2, [r7, #28]
 80047f8:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80047fa:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047fc:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004806:	429a      	cmp	r2, r3
 8004808:	d302      	bcc.n	8004810 <xQueueGenericSendFromISR+0xbc>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b02      	cmp	r3, #2
 800480e:	d13e      	bne.n	800488e <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004812:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800481a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	68b9      	ldr	r1, [r7, #8]
 8004824:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004826:	f000 faae 	bl	8004d86 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800482a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800482e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004832:	d112      	bne.n	800485a <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	2b00      	cmp	r3, #0
 800483a:	d025      	beq.n	8004888 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800483c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483e:	3324      	adds	r3, #36	; 0x24
 8004840:	4618      	mov	r0, r3
 8004842:	f000 ffeb 	bl	800581c <xTaskRemoveFromEventList>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01d      	beq.n	8004888 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d01a      	beq.n	8004888 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	e016      	b.n	8004888 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800485a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800485e:	2b7f      	cmp	r3, #127	; 0x7f
 8004860:	d10a      	bne.n	8004878 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	617b      	str	r3, [r7, #20]
    }
 8004874:	bf00      	nop
 8004876:	e7fe      	b.n	8004876 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004878:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800487c:	3301      	adds	r3, #1
 800487e:	b2db      	uxtb	r3, r3
 8004880:	b25a      	sxtb	r2, r3
 8004882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004888:	2301      	movs	r3, #1
 800488a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800488c:	e001      	b.n	8004892 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800488e:	2300      	movs	r3, #0
 8004890:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004894:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800489c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800489e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3740      	adds	r7, #64	; 0x40
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08c      	sub	sp, #48	; 0x30
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80048b4:	2300      	movs	r3, #0
 80048b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80048bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10a      	bne.n	80048d8 <xQueueReceive+0x30>
        __asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	623b      	str	r3, [r7, #32]
    }
 80048d4:	bf00      	nop
 80048d6:	e7fe      	b.n	80048d6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d103      	bne.n	80048e6 <xQueueReceive+0x3e>
 80048de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <xQueueReceive+0x42>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <xQueueReceive+0x44>
 80048ea:	2300      	movs	r3, #0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <xQueueReceive+0x5e>
        __asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	61fb      	str	r3, [r7, #28]
    }
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004906:	f001 f925 	bl	8005b54 <xTaskGetSchedulerState>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d102      	bne.n	8004916 <xQueueReceive+0x6e>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <xQueueReceive+0x72>
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <xQueueReceive+0x74>
 800491a:	2300      	movs	r3, #0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10a      	bne.n	8004936 <xQueueReceive+0x8e>
        __asm volatile
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	61bb      	str	r3, [r7, #24]
    }
 8004932:	bf00      	nop
 8004934:	e7fe      	b.n	8004934 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004936:	f002 f907 	bl	8006b48 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800493a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	2b00      	cmp	r3, #0
 8004944:	d01f      	beq.n	8004986 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004946:	68b9      	ldr	r1, [r7, #8]
 8004948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800494a:	f000 fa86 	bl	8004e5a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	1e5a      	subs	r2, r3, #1
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00f      	beq.n	800497e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	3310      	adds	r3, #16
 8004962:	4618      	mov	r0, r3
 8004964:	f000 ff5a 	bl	800581c <xTaskRemoveFromEventList>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d007      	beq.n	800497e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800496e:	4b3d      	ldr	r3, [pc, #244]	; (8004a64 <xQueueReceive+0x1bc>)
 8004970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800497e:	f002 f913 	bl	8006ba8 <vPortExitCritical>
                return pdPASS;
 8004982:	2301      	movs	r3, #1
 8004984:	e069      	b.n	8004a5a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d103      	bne.n	8004994 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800498c:	f002 f90c 	bl	8006ba8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004990:	2300      	movs	r3, #0
 8004992:	e062      	b.n	8004a5a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800499a:	f107 0310 	add.w	r3, r7, #16
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 ff9e 	bl	80058e0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80049a4:	2301      	movs	r3, #1
 80049a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80049a8:	f002 f8fe 	bl	8006ba8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80049ac:	f000 fd18 	bl	80053e0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80049b0:	f002 f8ca 	bl	8006b48 <vPortEnterCritical>
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049ba:	b25b      	sxtb	r3, r3
 80049bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c0:	d103      	bne.n	80049ca <xQueueReceive+0x122>
 80049c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049d0:	b25b      	sxtb	r3, r3
 80049d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d6:	d103      	bne.n	80049e0 <xQueueReceive+0x138>
 80049d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049e0:	f002 f8e2 	bl	8006ba8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049e4:	1d3a      	adds	r2, r7, #4
 80049e6:	f107 0310 	add.w	r3, r7, #16
 80049ea:	4611      	mov	r1, r2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 ff8d 	bl	800590c <xTaskCheckForTimeOut>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d123      	bne.n	8004a40 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049fa:	f000 faa6 	bl	8004f4a <prvIsQueueEmpty>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d017      	beq.n	8004a34 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a06:	3324      	adds	r3, #36	; 0x24
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 feb5 	bl	800577c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004a12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a14:	f000 fa47 	bl	8004ea6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004a18:	f000 fcf0 	bl	80053fc <xTaskResumeAll>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d189      	bne.n	8004936 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004a22:	4b10      	ldr	r3, [pc, #64]	; (8004a64 <xQueueReceive+0x1bc>)
 8004a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	e780      	b.n	8004936 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a36:	f000 fa36 	bl	8004ea6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004a3a:	f000 fcdf 	bl	80053fc <xTaskResumeAll>
 8004a3e:	e77a      	b.n	8004936 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a42:	f000 fa30 	bl	8004ea6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004a46:	f000 fcd9 	bl	80053fc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a4c:	f000 fa7d 	bl	8004f4a <prvIsQueueEmpty>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f43f af6f 	beq.w	8004936 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004a58:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3730      	adds	r7, #48	; 0x30
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	e000ed04 	.word	0xe000ed04

08004a68 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08e      	sub	sp, #56	; 0x38
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004a74:	2300      	movs	r3, #0
 8004a76:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10a      	bne.n	8004a98 <xQueuePeek+0x30>
        __asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004a94:	bf00      	nop
 8004a96:	e7fe      	b.n	8004a96 <xQueuePeek+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer. */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d103      	bne.n	8004aa6 <xQueuePeek+0x3e>
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <xQueuePeek+0x42>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <xQueuePeek+0x44>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <xQueuePeek+0x5e>
        __asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	623b      	str	r3, [r7, #32]
    }
 8004ac2:	bf00      	nop
 8004ac4:	e7fe      	b.n	8004ac4 <xQueuePeek+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ac6:	f001 f845 	bl	8005b54 <xTaskGetSchedulerState>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d102      	bne.n	8004ad6 <xQueuePeek+0x6e>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <xQueuePeek+0x72>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <xQueuePeek+0x74>
 8004ada:	2300      	movs	r3, #0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10a      	bne.n	8004af6 <xQueuePeek+0x8e>
        __asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	61fb      	str	r3, [r7, #28]
    }
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <xQueuePeek+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004af6:	f002 f827 	bl	8006b48 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d021      	beq.n	8004b4a <xQueuePeek+0xe2>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8004b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	62bb      	str	r3, [r7, #40]	; 0x28

                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b10:	f000 f9a3 	bl	8004e5a <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8004b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b18:	60da      	str	r2, [r3, #12]

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00f      	beq.n	8004b42 <xQueuePeek+0xda>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	3324      	adds	r3, #36	; 0x24
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fe78 	bl	800581c <xTaskRemoveFromEventList>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d007      	beq.n	8004b42 <xQueuePeek+0xda>
                    {
                        /* The task waiting has a higher priority than this task. */
                        queueYIELD_IF_USING_PREEMPTION();
 8004b32:	4b3d      	ldr	r3, [pc, #244]	; (8004c28 <xQueuePeek+0x1c0>)
 8004b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004b42:	f002 f831 	bl	8006ba8 <vPortExitCritical>
                return pdPASS;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e069      	b.n	8004c1e <xQueuePeek+0x1b6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d103      	bne.n	8004b58 <xQueuePeek+0xf0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004b50:	f002 f82a 	bl	8006ba8 <vPortExitCritical>
                    traceQUEUE_PEEK_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004b54:	2300      	movs	r3, #0
 8004b56:	e062      	b.n	8004c1e <xQueuePeek+0x1b6>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <xQueuePeek+0x104>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004b5e:	f107 0314 	add.w	r3, r7, #20
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 febc 	bl	80058e0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004b6c:	f002 f81c 	bl	8006ba8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004b70:	f000 fc36 	bl	80053e0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004b74:	f001 ffe8 	bl	8006b48 <vPortEnterCritical>
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b7e:	b25b      	sxtb	r3, r3
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d103      	bne.n	8004b8e <xQueuePeek+0x126>
 8004b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b94:	b25b      	sxtb	r3, r3
 8004b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9a:	d103      	bne.n	8004ba4 <xQueuePeek+0x13c>
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ba4:	f002 f800 	bl	8006ba8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ba8:	1d3a      	adds	r2, r7, #4
 8004baa:	f107 0314 	add.w	r3, r7, #20
 8004bae:	4611      	mov	r1, r2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 feab 	bl	800590c <xTaskCheckForTimeOut>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d123      	bne.n	8004c04 <xQueuePeek+0x19c>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bbe:	f000 f9c4 	bl	8004f4a <prvIsQueueEmpty>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d017      	beq.n	8004bf8 <xQueuePeek+0x190>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bca:	3324      	adds	r3, #36	; 0x24
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	4611      	mov	r1, r2
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fdd3 	bl	800577c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004bd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bd8:	f000 f965 	bl	8004ea6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004bdc:	f000 fc0e 	bl	80053fc <xTaskResumeAll>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d187      	bne.n	8004af6 <xQueuePeek+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004be6:	4b10      	ldr	r3, [pc, #64]	; (8004c28 <xQueuePeek+0x1c0>)
 8004be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	e77e      	b.n	8004af6 <xQueuePeek+0x8e>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
 8004bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bfa:	f000 f954 	bl	8004ea6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004bfe:	f000 fbfd 	bl	80053fc <xTaskResumeAll>
 8004c02:	e778      	b.n	8004af6 <xQueuePeek+0x8e>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
 8004c04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c06:	f000 f94e 	bl	8004ea6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004c0a:	f000 fbf7 	bl	80053fc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c10:	f000 f99b 	bl	8004f4a <prvIsQueueEmpty>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f43f af6d 	beq.w	8004af6 <xQueuePeek+0x8e>
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004c1c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3738      	adds	r7, #56	; 0x38
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	e000ed04 	.word	0xe000ed04

08004c2c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b090      	sub	sp, #64	; 0x40
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10a      	bne.n	8004c58 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004c54:	bf00      	nop
 8004c56:	e7fe      	b.n	8004c56 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d103      	bne.n	8004c66 <xQueueReceiveFromISR+0x3a>
 8004c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <xQueueReceiveFromISR+0x3e>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <xQueueReceiveFromISR+0x40>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10a      	bne.n	8004c86 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004c82:	bf00      	nop
 8004c84:	e7fe      	b.n	8004c84 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c86:	f002 f841 	bl	8006d0c <vPortValidateInterruptPriority>
        __asm volatile
 8004c8a:	f3ef 8211 	mrs	r2, BASEPRI
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	623a      	str	r2, [r7, #32]
 8004ca0:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8004ca2:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ca4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004caa:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d03e      	beq.n	8004d30 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004cbc:	68b9      	ldr	r1, [r7, #8]
 8004cbe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004cc0:	f000 f8cb 	bl	8004e5a <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	1e5a      	subs	r2, r3, #1
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cca:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8004ccc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd4:	d112      	bne.n	8004cfc <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d025      	beq.n	8004d2a <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce0:	3310      	adds	r3, #16
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fd9a 	bl	800581c <xTaskRemoveFromEventList>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d01d      	beq.n	8004d2a <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01a      	beq.n	8004d2a <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	e016      	b.n	8004d2a <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8004cfc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004d00:	2b7f      	cmp	r3, #127	; 0x7f
 8004d02:	d10a      	bne.n	8004d1a <xQueueReceiveFromISR+0xee>
        __asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	61bb      	str	r3, [r7, #24]
    }
 8004d16:	bf00      	nop
 8004d18:	e7fe      	b.n	8004d18 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d1e:	3301      	adds	r3, #1
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	b25a      	sxtb	r2, r3
 8004d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d2e:	e001      	b.n	8004d34 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 8004d30:	2300      	movs	r3, #0
 8004d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d36:	617b      	str	r3, [r7, #20]
        __asm volatile
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f383 8811 	msr	BASEPRI, r3
    }
 8004d3e:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3740      	adds	r7, #64	; 0x40
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b084      	sub	sp, #16
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10a      	bne.n	8004d6e <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8004d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	60bb      	str	r3, [r7, #8]
    }
 8004d6a:	bf00      	nop
 8004d6c:	e7fe      	b.n	8004d6c <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8004d6e:	f001 feeb 	bl	8006b48 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8004d78:	f001 ff16 	bl	8006ba8 <vPortExitCritical>

    return uxReturn;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b086      	sub	sp, #24
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004d92:	2300      	movs	r3, #0
 8004d94:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10d      	bne.n	8004dc0 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d14d      	bne.n	8004e48 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 feed 	bl	8005b90 <xTaskPriorityDisinherit>
 8004db6:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	609a      	str	r2, [r3, #8]
 8004dbe:	e043      	b.n	8004e48 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d119      	bne.n	8004dfa <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6858      	ldr	r0, [r3, #4]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	461a      	mov	r2, r3
 8004dd0:	68b9      	ldr	r1, [r7, #8]
 8004dd2:	f005 f985 	bl	800a0e0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	441a      	add	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d32b      	bcc.n	8004e48 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	605a      	str	r2, [r3, #4]
 8004df8:	e026      	b.n	8004e48 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	68d8      	ldr	r0, [r3, #12]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	461a      	mov	r2, r3
 8004e04:	68b9      	ldr	r1, [r7, #8]
 8004e06:	f005 f96b 	bl	800a0e0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	425b      	negs	r3, r3
 8004e14:	441a      	add	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d207      	bcs.n	8004e36 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	689a      	ldr	r2, [r3, #8]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	425b      	negs	r3, r3
 8004e30:	441a      	add	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d105      	bne.n	8004e48 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8004e50:	697b      	ldr	r3, [r7, #20]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b082      	sub	sp, #8
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d018      	beq.n	8004e9e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e74:	441a      	add	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d303      	bcc.n	8004e8e <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68d9      	ldr	r1, [r3, #12]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	461a      	mov	r2, r3
 8004e98:	6838      	ldr	r0, [r7, #0]
 8004e9a:	f005 f921 	bl	800a0e0 <memcpy>
    }
}
 8004e9e:	bf00      	nop
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004eae:	f001 fe4b 	bl	8006b48 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eb8:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004eba:	e011      	b.n	8004ee0 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d012      	beq.n	8004eea <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3324      	adds	r3, #36	; 0x24
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 fca7 	bl	800581c <xTaskRemoveFromEventList>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8004ed4:	f000 fd80 	bl	80059d8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	dce9      	bgt.n	8004ebc <prvUnlockQueue+0x16>
 8004ee8:	e000      	b.n	8004eec <prvUnlockQueue+0x46>
                        break;
 8004eea:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	22ff      	movs	r2, #255	; 0xff
 8004ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004ef4:	f001 fe58 	bl	8006ba8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004ef8:	f001 fe26 	bl	8006b48 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f02:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f04:	e011      	b.n	8004f2a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d012      	beq.n	8004f34 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3310      	adds	r3, #16
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fc82 	bl	800581c <xTaskRemoveFromEventList>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004f1e:	f000 fd5b 	bl	80059d8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004f22:	7bbb      	ldrb	r3, [r7, #14]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	dce9      	bgt.n	8004f06 <prvUnlockQueue+0x60>
 8004f32:	e000      	b.n	8004f36 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004f34:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	22ff      	movs	r2, #255	; 0xff
 8004f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004f3e:	f001 fe33 	bl	8006ba8 <vPortExitCritical>
}
 8004f42:	bf00      	nop
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b084      	sub	sp, #16
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004f52:	f001 fdf9 	bl	8006b48 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d102      	bne.n	8004f64 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	e001      	b.n	8004f68 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004f64:	2300      	movs	r3, #0
 8004f66:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004f68:	f001 fe1e 	bl	8006ba8 <vPortExitCritical>

    return xReturn;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b084      	sub	sp, #16
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004f7e:	f001 fde3 	bl	8006b48 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d102      	bne.n	8004f94 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	e001      	b.n	8004f98 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004f94:	2300      	movs	r3, #0
 8004f96:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004f98:	f001 fe06 	bl	8006ba8 <vPortExitCritical>

    return xReturn;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b087      	sub	sp, #28
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10a      	bne.n	8004fce <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8004fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	60fb      	str	r3, [r7, #12]
    }
 8004fca:	bf00      	nop
 8004fcc:	e7fe      	b.n	8004fcc <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d102      	bne.n	8004fe0 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	e001      	b.n	8004fe4 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004fe4:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
	...

08004ff4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ffe:	2300      	movs	r3, #0
 8005000:	60fb      	str	r3, [r7, #12]
 8005002:	e014      	b.n	800502e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005004:	4a0f      	ldr	r2, [pc, #60]	; (8005044 <vQueueAddToRegistry+0x50>)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10b      	bne.n	8005028 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005010:	490c      	ldr	r1, [pc, #48]	; (8005044 <vQueueAddToRegistry+0x50>)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800501a:	4a0a      	ldr	r2, [pc, #40]	; (8005044 <vQueueAddToRegistry+0x50>)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	4413      	add	r3, r2
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8005026:	e006      	b.n	8005036 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	3301      	adds	r3, #1
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2b07      	cmp	r3, #7
 8005032:	d9e7      	bls.n	8005004 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005034:	bf00      	nop
 8005036:	bf00      	nop
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	200008c4 	.word	0x200008c4

08005048 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005058:	f001 fd76 	bl	8006b48 <vPortEnterCritical>
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005062:	b25b      	sxtb	r3, r3
 8005064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005068:	d103      	bne.n	8005072 <vQueueWaitForMessageRestricted+0x2a>
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005078:	b25b      	sxtb	r3, r3
 800507a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507e:	d103      	bne.n	8005088 <vQueueWaitForMessageRestricted+0x40>
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005088:	f001 fd8e 	bl	8006ba8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	2b00      	cmp	r3, #0
 8005092:	d106      	bne.n	80050a2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	3324      	adds	r3, #36	; 0x24
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	68b9      	ldr	r1, [r7, #8]
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fb91 	bl	80057c4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80050a2:	6978      	ldr	r0, [r7, #20]
 80050a4:	f7ff feff 	bl	8004ea6 <prvUnlockQueue>
    }
 80050a8:	bf00      	nop
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08c      	sub	sp, #48	; 0x30
 80050b4:	af04      	add	r7, sp, #16
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	4613      	mov	r3, r2
 80050be:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80050c0:	88fb      	ldrh	r3, [r7, #6]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4618      	mov	r0, r3
 80050c6:	f001 fe61 	bl	8006d8c <pvPortMalloc>
 80050ca:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00e      	beq.n	80050f0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050d2:	2058      	movs	r0, #88	; 0x58
 80050d4:	f001 fe5a 	bl	8006d8c <pvPortMalloc>
 80050d8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	631a      	str	r2, [r3, #48]	; 0x30
 80050e6:	e005      	b.n	80050f4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80050e8:	6978      	ldr	r0, [r7, #20]
 80050ea:	f001 ff2f 	bl	8006f4c <vPortFree>
 80050ee:	e001      	b.n	80050f4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80050f0:	2300      	movs	r3, #0
 80050f2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d013      	beq.n	8005122 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050fa:	88fa      	ldrh	r2, [r7, #6]
 80050fc:	2300      	movs	r3, #0
 80050fe:	9303      	str	r3, [sp, #12]
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	9302      	str	r3, [sp, #8]
 8005104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005106:	9301      	str	r3, [sp, #4]
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	68b9      	ldr	r1, [r7, #8]
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 f80e 	bl	8005132 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005116:	69f8      	ldr	r0, [r7, #28]
 8005118:	f000 f8a2 	bl	8005260 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800511c:	2301      	movs	r3, #1
 800511e:	61bb      	str	r3, [r7, #24]
 8005120:	e002      	b.n	8005128 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005122:	f04f 33ff 	mov.w	r3, #4294967295
 8005126:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005128:	69bb      	ldr	r3, [r7, #24]
    }
 800512a:	4618      	mov	r0, r3
 800512c:	3720      	adds	r7, #32
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b088      	sub	sp, #32
 8005136:	af00      	add	r7, sp, #0
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	607a      	str	r2, [r7, #4]
 800513e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005142:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	461a      	mov	r2, r3
 800514a:	21a5      	movs	r1, #165	; 0xa5
 800514c:	f004 ffd6 	bl	800a0fc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800515a:	3b01      	subs	r3, #1
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	f023 0307 	bic.w	r3, r3, #7
 8005168:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <prvInitialiseNewTask+0x58>
        __asm volatile
 8005174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	617b      	str	r3, [r7, #20]
    }
 8005186:	bf00      	nop
 8005188:	e7fe      	b.n	8005188 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01f      	beq.n	80051d0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005190:	2300      	movs	r3, #0
 8005192:	61fb      	str	r3, [r7, #28]
 8005194:	e012      	b.n	80051bc <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	4413      	add	r3, r2
 800519c:	7819      	ldrb	r1, [r3, #0]
 800519e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	4413      	add	r3, r2
 80051a4:	3334      	adds	r3, #52	; 0x34
 80051a6:	460a      	mov	r2, r1
 80051a8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	4413      	add	r3, r2
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d006      	beq.n	80051c4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	3301      	adds	r3, #1
 80051ba:	61fb      	str	r3, [r7, #28]
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	2b09      	cmp	r3, #9
 80051c0:	d9e9      	bls.n	8005196 <prvInitialiseNewTask+0x64>
 80051c2:	e000      	b.n	80051c6 <prvInitialiseNewTask+0x94>
            {
                break;
 80051c4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80051ce:	e003      	b.n	80051d8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80051d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051da:	2b06      	cmp	r3, #6
 80051dc:	d901      	bls.n	80051e2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051de:	2306      	movs	r3, #6
 80051e0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051e6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ec:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80051ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f0:	2200      	movs	r2, #0
 80051f2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f6:	3304      	adds	r3, #4
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff f82f 	bl	800425c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	3318      	adds	r3, #24
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff f82a 	bl	800425c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800520c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	f1c3 0207 	rsb	r2, r3, #7
 8005214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005216:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800521c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005220:	3350      	adds	r3, #80	; 0x50
 8005222:	2204      	movs	r2, #4
 8005224:	2100      	movs	r1, #0
 8005226:	4618      	mov	r0, r3
 8005228:	f004 ff68 	bl	800a0fc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800522c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522e:	3354      	adds	r3, #84	; 0x54
 8005230:	2201      	movs	r2, #1
 8005232:	2100      	movs	r1, #0
 8005234:	4618      	mov	r0, r3
 8005236:	f004 ff61 	bl	800a0fc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	68f9      	ldr	r1, [r7, #12]
 800523e:	69b8      	ldr	r0, [r7, #24]
 8005240:	f001 fb56 	bl	80068f0 <pxPortInitialiseStack>
 8005244:	4602      	mov	r2, r0
 8005246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005248:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005254:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005256:	bf00      	nop
 8005258:	3720      	adds	r7, #32
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005268:	f001 fc6e 	bl	8006b48 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800526c:	4b2c      	ldr	r3, [pc, #176]	; (8005320 <prvAddNewTaskToReadyList+0xc0>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3301      	adds	r3, #1
 8005272:	4a2b      	ldr	r2, [pc, #172]	; (8005320 <prvAddNewTaskToReadyList+0xc0>)
 8005274:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005276:	4b2b      	ldr	r3, [pc, #172]	; (8005324 <prvAddNewTaskToReadyList+0xc4>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d109      	bne.n	8005292 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800527e:	4a29      	ldr	r2, [pc, #164]	; (8005324 <prvAddNewTaskToReadyList+0xc4>)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005284:	4b26      	ldr	r3, [pc, #152]	; (8005320 <prvAddNewTaskToReadyList+0xc0>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d110      	bne.n	80052ae <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800528c:	f000 fbc8 	bl	8005a20 <prvInitialiseTaskLists>
 8005290:	e00d      	b.n	80052ae <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005292:	4b25      	ldr	r3, [pc, #148]	; (8005328 <prvAddNewTaskToReadyList+0xc8>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d109      	bne.n	80052ae <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800529a:	4b22      	ldr	r3, [pc, #136]	; (8005324 <prvAddNewTaskToReadyList+0xc4>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d802      	bhi.n	80052ae <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80052a8:	4a1e      	ldr	r2, [pc, #120]	; (8005324 <prvAddNewTaskToReadyList+0xc4>)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80052ae:	4b1f      	ldr	r3, [pc, #124]	; (800532c <prvAddNewTaskToReadyList+0xcc>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3301      	adds	r3, #1
 80052b4:	4a1d      	ldr	r2, [pc, #116]	; (800532c <prvAddNewTaskToReadyList+0xcc>)
 80052b6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80052b8:	4b1c      	ldr	r3, [pc, #112]	; (800532c <prvAddNewTaskToReadyList+0xcc>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	2201      	movs	r2, #1
 80052c6:	409a      	lsls	r2, r3
 80052c8:	4b19      	ldr	r3, [pc, #100]	; (8005330 <prvAddNewTaskToReadyList+0xd0>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	4a18      	ldr	r2, [pc, #96]	; (8005330 <prvAddNewTaskToReadyList+0xd0>)
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d6:	4613      	mov	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4a15      	ldr	r2, [pc, #84]	; (8005334 <prvAddNewTaskToReadyList+0xd4>)
 80052e0:	441a      	add	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3304      	adds	r3, #4
 80052e6:	4619      	mov	r1, r3
 80052e8:	4610      	mov	r0, r2
 80052ea:	f7fe ffc4 	bl	8004276 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80052ee:	f001 fc5b 	bl	8006ba8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80052f2:	4b0d      	ldr	r3, [pc, #52]	; (8005328 <prvAddNewTaskToReadyList+0xc8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00e      	beq.n	8005318 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80052fa:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <prvAddNewTaskToReadyList+0xc4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005304:	429a      	cmp	r2, r3
 8005306:	d207      	bcs.n	8005318 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005308:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <prvAddNewTaskToReadyList+0xd8>)
 800530a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005318:	bf00      	nop
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	20000a04 	.word	0x20000a04
 8005324:	20000904 	.word	0x20000904
 8005328:	20000a10 	.word	0x20000a10
 800532c:	20000a20 	.word	0x20000a20
 8005330:	20000a0c 	.word	0x20000a0c
 8005334:	20000908 	.word	0x20000908
 8005338:	e000ed04 	.word	0xe000ed04

0800533c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005342:	4b20      	ldr	r3, [pc, #128]	; (80053c4 <vTaskStartScheduler+0x88>)
 8005344:	9301      	str	r3, [sp, #4]
 8005346:	2300      	movs	r3, #0
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	2300      	movs	r3, #0
 800534c:	2282      	movs	r2, #130	; 0x82
 800534e:	491e      	ldr	r1, [pc, #120]	; (80053c8 <vTaskStartScheduler+0x8c>)
 8005350:	481e      	ldr	r0, [pc, #120]	; (80053cc <vTaskStartScheduler+0x90>)
 8005352:	f7ff fead 	bl	80050b0 <xTaskCreate>
 8005356:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d102      	bne.n	8005364 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800535e:	f000 ff59 	bl	8006214 <xTimerCreateTimerTask>
 8005362:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d116      	bne.n	8005398 <vTaskStartScheduler+0x5c>
        __asm volatile
 800536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	60bb      	str	r3, [r7, #8]
    }
 800537c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800537e:	4b14      	ldr	r3, [pc, #80]	; (80053d0 <vTaskStartScheduler+0x94>)
 8005380:	f04f 32ff 	mov.w	r2, #4294967295
 8005384:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005386:	4b13      	ldr	r3, [pc, #76]	; (80053d4 <vTaskStartScheduler+0x98>)
 8005388:	2201      	movs	r2, #1
 800538a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800538c:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <vTaskStartScheduler+0x9c>)
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005392:	f001 fb37 	bl	8006a04 <xPortStartScheduler>
 8005396:	e00e      	b.n	80053b6 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539e:	d10a      	bne.n	80053b6 <vTaskStartScheduler+0x7a>
        __asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	607b      	str	r3, [r7, #4]
    }
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80053b6:	4b09      	ldr	r3, [pc, #36]	; (80053dc <vTaskStartScheduler+0xa0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
}
 80053ba:	bf00      	nop
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000a28 	.word	0x20000a28
 80053c8:	08011c94 	.word	0x08011c94
 80053cc:	080059f1 	.word	0x080059f1
 80053d0:	20000a24 	.word	0x20000a24
 80053d4:	20000a10 	.word	0x20000a10
 80053d8:	20000a08 	.word	0x20000a08
 80053dc:	20000018 	.word	0x20000018

080053e0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80053e4:	4b04      	ldr	r3, [pc, #16]	; (80053f8 <vTaskSuspendAll+0x18>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3301      	adds	r3, #1
 80053ea:	4a03      	ldr	r2, [pc, #12]	; (80053f8 <vTaskSuspendAll+0x18>)
 80053ec:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80053ee:	bf00      	nop
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	20000a2c 	.word	0x20000a2c

080053fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005406:	2300      	movs	r3, #0
 8005408:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800540a:	4b41      	ldr	r3, [pc, #260]	; (8005510 <xTaskResumeAll+0x114>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10a      	bne.n	8005428 <xTaskResumeAll+0x2c>
        __asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	603b      	str	r3, [r7, #0]
    }
 8005424:	bf00      	nop
 8005426:	e7fe      	b.n	8005426 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005428:	f001 fb8e 	bl	8006b48 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800542c:	4b38      	ldr	r3, [pc, #224]	; (8005510 <xTaskResumeAll+0x114>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3b01      	subs	r3, #1
 8005432:	4a37      	ldr	r2, [pc, #220]	; (8005510 <xTaskResumeAll+0x114>)
 8005434:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005436:	4b36      	ldr	r3, [pc, #216]	; (8005510 <xTaskResumeAll+0x114>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d161      	bne.n	8005502 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800543e:	4b35      	ldr	r3, [pc, #212]	; (8005514 <xTaskResumeAll+0x118>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d05d      	beq.n	8005502 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005446:	e02e      	b.n	80054a6 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005448:	4b33      	ldr	r3, [pc, #204]	; (8005518 <xTaskResumeAll+0x11c>)
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3318      	adds	r3, #24
 8005454:	4618      	mov	r0, r3
 8005456:	f7fe ff6b 	bl	8004330 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3304      	adds	r3, #4
 800545e:	4618      	mov	r0, r3
 8005460:	f7fe ff66 	bl	8004330 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005468:	2201      	movs	r2, #1
 800546a:	409a      	lsls	r2, r3
 800546c:	4b2b      	ldr	r3, [pc, #172]	; (800551c <xTaskResumeAll+0x120>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4313      	orrs	r3, r2
 8005472:	4a2a      	ldr	r2, [pc, #168]	; (800551c <xTaskResumeAll+0x120>)
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547a:	4613      	mov	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4a27      	ldr	r2, [pc, #156]	; (8005520 <xTaskResumeAll+0x124>)
 8005484:	441a      	add	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	3304      	adds	r3, #4
 800548a:	4619      	mov	r1, r3
 800548c:	4610      	mov	r0, r2
 800548e:	f7fe fef2 	bl	8004276 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005496:	4b23      	ldr	r3, [pc, #140]	; (8005524 <xTaskResumeAll+0x128>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	429a      	cmp	r2, r3
 800549e:	d302      	bcc.n	80054a6 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80054a0:	4b21      	ldr	r3, [pc, #132]	; (8005528 <xTaskResumeAll+0x12c>)
 80054a2:	2201      	movs	r2, #1
 80054a4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054a6:	4b1c      	ldr	r3, [pc, #112]	; (8005518 <xTaskResumeAll+0x11c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1cc      	bne.n	8005448 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80054b4:	f000 fb32 	bl	8005b1c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80054b8:	4b1c      	ldr	r3, [pc, #112]	; (800552c <xTaskResumeAll+0x130>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d010      	beq.n	80054e6 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80054c4:	f000 f846 	bl	8005554 <xTaskIncrementTick>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 80054ce:	4b16      	ldr	r3, [pc, #88]	; (8005528 <xTaskResumeAll+0x12c>)
 80054d0:	2201      	movs	r2, #1
 80054d2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1f1      	bne.n	80054c4 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80054e0:	4b12      	ldr	r3, [pc, #72]	; (800552c <xTaskResumeAll+0x130>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80054e6:	4b10      	ldr	r3, [pc, #64]	; (8005528 <xTaskResumeAll+0x12c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d009      	beq.n	8005502 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80054ee:	2301      	movs	r3, #1
 80054f0:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80054f2:	4b0f      	ldr	r3, [pc, #60]	; (8005530 <xTaskResumeAll+0x134>)
 80054f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005502:	f001 fb51 	bl	8006ba8 <vPortExitCritical>

    return xAlreadyYielded;
 8005506:	68bb      	ldr	r3, [r7, #8]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	20000a2c 	.word	0x20000a2c
 8005514:	20000a04 	.word	0x20000a04
 8005518:	200009c4 	.word	0x200009c4
 800551c:	20000a0c 	.word	0x20000a0c
 8005520:	20000908 	.word	0x20000908
 8005524:	20000904 	.word	0x20000904
 8005528:	20000a18 	.word	0x20000a18
 800552c:	20000a14 	.word	0x20000a14
 8005530:	e000ed04 	.word	0xe000ed04

08005534 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800553a:	4b05      	ldr	r3, [pc, #20]	; (8005550 <xTaskGetTickCount+0x1c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005540:	687b      	ldr	r3, [r7, #4]
}
 8005542:	4618      	mov	r0, r3
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	20000a08 	.word	0x20000a08

08005554 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800555a:	2300      	movs	r3, #0
 800555c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800555e:	4b4e      	ldr	r3, [pc, #312]	; (8005698 <xTaskIncrementTick+0x144>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	f040 808e 	bne.w	8005684 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005568:	4b4c      	ldr	r3, [pc, #304]	; (800569c <xTaskIncrementTick+0x148>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3301      	adds	r3, #1
 800556e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005570:	4a4a      	ldr	r2, [pc, #296]	; (800569c <xTaskIncrementTick+0x148>)
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d120      	bne.n	80055be <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800557c:	4b48      	ldr	r3, [pc, #288]	; (80056a0 <xTaskIncrementTick+0x14c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <xTaskIncrementTick+0x48>
        __asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	603b      	str	r3, [r7, #0]
    }
 8005598:	bf00      	nop
 800559a:	e7fe      	b.n	800559a <xTaskIncrementTick+0x46>
 800559c:	4b40      	ldr	r3, [pc, #256]	; (80056a0 <xTaskIncrementTick+0x14c>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	4b40      	ldr	r3, [pc, #256]	; (80056a4 <xTaskIncrementTick+0x150>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a3e      	ldr	r2, [pc, #248]	; (80056a0 <xTaskIncrementTick+0x14c>)
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	4a3e      	ldr	r2, [pc, #248]	; (80056a4 <xTaskIncrementTick+0x150>)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6013      	str	r3, [r2, #0]
 80055b0:	4b3d      	ldr	r3, [pc, #244]	; (80056a8 <xTaskIncrementTick+0x154>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3301      	adds	r3, #1
 80055b6:	4a3c      	ldr	r2, [pc, #240]	; (80056a8 <xTaskIncrementTick+0x154>)
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	f000 faaf 	bl	8005b1c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80055be:	4b3b      	ldr	r3, [pc, #236]	; (80056ac <xTaskIncrementTick+0x158>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d348      	bcc.n	800565a <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055c8:	4b35      	ldr	r3, [pc, #212]	; (80056a0 <xTaskIncrementTick+0x14c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d104      	bne.n	80055dc <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055d2:	4b36      	ldr	r3, [pc, #216]	; (80056ac <xTaskIncrementTick+0x158>)
 80055d4:	f04f 32ff 	mov.w	r2, #4294967295
 80055d8:	601a      	str	r2, [r3, #0]
                    break;
 80055da:	e03e      	b.n	800565a <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055dc:	4b30      	ldr	r3, [pc, #192]	; (80056a0 <xTaskIncrementTick+0x14c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d203      	bcs.n	80055fc <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80055f4:	4a2d      	ldr	r2, [pc, #180]	; (80056ac <xTaskIncrementTick+0x158>)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80055fa:	e02e      	b.n	800565a <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	3304      	adds	r3, #4
 8005600:	4618      	mov	r0, r3
 8005602:	f7fe fe95 	bl	8004330 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560a:	2b00      	cmp	r3, #0
 800560c:	d004      	beq.n	8005618 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	3318      	adds	r3, #24
 8005612:	4618      	mov	r0, r3
 8005614:	f7fe fe8c 	bl	8004330 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561c:	2201      	movs	r2, #1
 800561e:	409a      	lsls	r2, r3
 8005620:	4b23      	ldr	r3, [pc, #140]	; (80056b0 <xTaskIncrementTick+0x15c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4313      	orrs	r3, r2
 8005626:	4a22      	ldr	r2, [pc, #136]	; (80056b0 <xTaskIncrementTick+0x15c>)
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4a1f      	ldr	r2, [pc, #124]	; (80056b4 <xTaskIncrementTick+0x160>)
 8005638:	441a      	add	r2, r3
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	3304      	adds	r3, #4
 800563e:	4619      	mov	r1, r3
 8005640:	4610      	mov	r0, r2
 8005642:	f7fe fe18 	bl	8004276 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564a:	4b1b      	ldr	r3, [pc, #108]	; (80056b8 <xTaskIncrementTick+0x164>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	429a      	cmp	r2, r3
 8005652:	d3b9      	bcc.n	80055c8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8005654:	2301      	movs	r3, #1
 8005656:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005658:	e7b6      	b.n	80055c8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800565a:	4b17      	ldr	r3, [pc, #92]	; (80056b8 <xTaskIncrementTick+0x164>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005660:	4914      	ldr	r1, [pc, #80]	; (80056b4 <xTaskIncrementTick+0x160>)
 8005662:	4613      	mov	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	440b      	add	r3, r1
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d901      	bls.n	8005676 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8005672:	2301      	movs	r3, #1
 8005674:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005676:	4b11      	ldr	r3, [pc, #68]	; (80056bc <xTaskIncrementTick+0x168>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d007      	beq.n	800568e <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 800567e:	2301      	movs	r3, #1
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	e004      	b.n	800568e <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005684:	4b0e      	ldr	r3, [pc, #56]	; (80056c0 <xTaskIncrementTick+0x16c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3301      	adds	r3, #1
 800568a:	4a0d      	ldr	r2, [pc, #52]	; (80056c0 <xTaskIncrementTick+0x16c>)
 800568c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800568e:	697b      	ldr	r3, [r7, #20]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3718      	adds	r7, #24
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	20000a2c 	.word	0x20000a2c
 800569c:	20000a08 	.word	0x20000a08
 80056a0:	200009bc 	.word	0x200009bc
 80056a4:	200009c0 	.word	0x200009c0
 80056a8:	20000a1c 	.word	0x20000a1c
 80056ac:	20000a24 	.word	0x20000a24
 80056b0:	20000a0c 	.word	0x20000a0c
 80056b4:	20000908 	.word	0x20000908
 80056b8:	20000904 	.word	0x20000904
 80056bc:	20000a18 	.word	0x20000a18
 80056c0:	20000a14 	.word	0x20000a14

080056c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056ca:	4b27      	ldr	r3, [pc, #156]	; (8005768 <vTaskSwitchContext+0xa4>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80056d2:	4b26      	ldr	r3, [pc, #152]	; (800576c <vTaskSwitchContext+0xa8>)
 80056d4:	2201      	movs	r2, #1
 80056d6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80056d8:	e03f      	b.n	800575a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80056da:	4b24      	ldr	r3, [pc, #144]	; (800576c <vTaskSwitchContext+0xa8>)
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056e0:	4b23      	ldr	r3, [pc, #140]	; (8005770 <vTaskSwitchContext+0xac>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	fab3 f383 	clz	r3, r3
 80056ec:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80056ee:	7afb      	ldrb	r3, [r7, #11]
 80056f0:	f1c3 031f 	rsb	r3, r3, #31
 80056f4:	617b      	str	r3, [r7, #20]
 80056f6:	491f      	ldr	r1, [pc, #124]	; (8005774 <vTaskSwitchContext+0xb0>)
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	440b      	add	r3, r1
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10a      	bne.n	8005720 <vTaskSwitchContext+0x5c>
        __asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	607b      	str	r3, [r7, #4]
    }
 800571c:	bf00      	nop
 800571e:	e7fe      	b.n	800571e <vTaskSwitchContext+0x5a>
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4613      	mov	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4a12      	ldr	r2, [pc, #72]	; (8005774 <vTaskSwitchContext+0xb0>)
 800572c:	4413      	add	r3, r2
 800572e:	613b      	str	r3, [r7, #16]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	605a      	str	r2, [r3, #4]
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	3308      	adds	r3, #8
 8005742:	429a      	cmp	r2, r3
 8005744:	d104      	bne.n	8005750 <vTaskSwitchContext+0x8c>
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	605a      	str	r2, [r3, #4]
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	4a08      	ldr	r2, [pc, #32]	; (8005778 <vTaskSwitchContext+0xb4>)
 8005758:	6013      	str	r3, [r2, #0]
}
 800575a:	bf00      	nop
 800575c:	371c      	adds	r7, #28
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	20000a2c 	.word	0x20000a2c
 800576c:	20000a18 	.word	0x20000a18
 8005770:	20000a0c 	.word	0x20000a0c
 8005774:	20000908 	.word	0x20000908
 8005778:	20000904 	.word	0x20000904

0800577c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10a      	bne.n	80057a2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800578c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	60fb      	str	r3, [r7, #12]
    }
 800579e:	bf00      	nop
 80057a0:	e7fe      	b.n	80057a0 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057a2:	4b07      	ldr	r3, [pc, #28]	; (80057c0 <vTaskPlaceOnEventList+0x44>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	3318      	adds	r3, #24
 80057a8:	4619      	mov	r1, r3
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7fe fd87 	bl	80042be <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057b0:	2101      	movs	r1, #1
 80057b2:	6838      	ldr	r0, [r7, #0]
 80057b4:	f000 fcc8 	bl	8006148 <prvAddCurrentTaskToDelayedList>
}
 80057b8:	bf00      	nop
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	20000904 	.word	0x20000904

080057c4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	617b      	str	r3, [r7, #20]
    }
 80057e8:	bf00      	nop
 80057ea:	e7fe      	b.n	80057ea <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057ec:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <vTaskPlaceOnEventListRestricted+0x54>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3318      	adds	r3, #24
 80057f2:	4619      	mov	r1, r3
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f7fe fd3e 	bl	8004276 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8005800:	f04f 33ff 	mov.w	r3, #4294967295
 8005804:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	68b8      	ldr	r0, [r7, #8]
 800580a:	f000 fc9d 	bl	8006148 <prvAddCurrentTaskToDelayedList>
    }
 800580e:	bf00      	nop
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20000904 	.word	0x20000904

0800581c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10a      	bne.n	8005848 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	60fb      	str	r3, [r7, #12]
    }
 8005844:	bf00      	nop
 8005846:	e7fe      	b.n	8005846 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	3318      	adds	r3, #24
 800584c:	4618      	mov	r0, r3
 800584e:	f7fe fd6f 	bl	8004330 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005852:	4b1d      	ldr	r3, [pc, #116]	; (80058c8 <xTaskRemoveFromEventList+0xac>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d11c      	bne.n	8005894 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	3304      	adds	r3, #4
 800585e:	4618      	mov	r0, r3
 8005860:	f7fe fd66 	bl	8004330 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005868:	2201      	movs	r2, #1
 800586a:	409a      	lsls	r2, r3
 800586c:	4b17      	ldr	r3, [pc, #92]	; (80058cc <xTaskRemoveFromEventList+0xb0>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4313      	orrs	r3, r2
 8005872:	4a16      	ldr	r2, [pc, #88]	; (80058cc <xTaskRemoveFromEventList+0xb0>)
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587a:	4613      	mov	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4a13      	ldr	r2, [pc, #76]	; (80058d0 <xTaskRemoveFromEventList+0xb4>)
 8005884:	441a      	add	r2, r3
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	3304      	adds	r3, #4
 800588a:	4619      	mov	r1, r3
 800588c:	4610      	mov	r0, r2
 800588e:	f7fe fcf2 	bl	8004276 <vListInsertEnd>
 8005892:	e005      	b.n	80058a0 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	3318      	adds	r3, #24
 8005898:	4619      	mov	r1, r3
 800589a:	480e      	ldr	r0, [pc, #56]	; (80058d4 <xTaskRemoveFromEventList+0xb8>)
 800589c:	f7fe fceb 	bl	8004276 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a4:	4b0c      	ldr	r3, [pc, #48]	; (80058d8 <xTaskRemoveFromEventList+0xbc>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d905      	bls.n	80058ba <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80058ae:	2301      	movs	r3, #1
 80058b0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80058b2:	4b0a      	ldr	r3, [pc, #40]	; (80058dc <xTaskRemoveFromEventList+0xc0>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	e001      	b.n	80058be <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80058be:	697b      	ldr	r3, [r7, #20]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	20000a2c 	.word	0x20000a2c
 80058cc:	20000a0c 	.word	0x20000a0c
 80058d0:	20000908 	.word	0x20000908
 80058d4:	200009c4 	.word	0x200009c4
 80058d8:	20000904 	.word	0x20000904
 80058dc:	20000a18 	.word	0x20000a18

080058e0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058e8:	4b06      	ldr	r3, [pc, #24]	; (8005904 <vTaskInternalSetTimeOutState+0x24>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80058f0:	4b05      	ldr	r3, [pc, #20]	; (8005908 <vTaskInternalSetTimeOutState+0x28>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	605a      	str	r2, [r3, #4]
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	20000a1c 	.word	0x20000a1c
 8005908:	20000a08 	.word	0x20000a08

0800590c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b088      	sub	sp, #32
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10a      	bne.n	8005932 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800591c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	613b      	str	r3, [r7, #16]
    }
 800592e:	bf00      	nop
 8005930:	e7fe      	b.n	8005930 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10a      	bne.n	800594e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	60fb      	str	r3, [r7, #12]
    }
 800594a:	bf00      	nop
 800594c:	e7fe      	b.n	800594c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800594e:	f001 f8fb 	bl	8006b48 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005952:	4b1f      	ldr	r3, [pc, #124]	; (80059d0 <xTaskCheckForTimeOut+0xc4>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596a:	d102      	bne.n	8005972 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800596c:	2300      	movs	r3, #0
 800596e:	61fb      	str	r3, [r7, #28]
 8005970:	e026      	b.n	80059c0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	4b17      	ldr	r3, [pc, #92]	; (80059d4 <xTaskCheckForTimeOut+0xc8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d00a      	beq.n	8005994 <xTaskCheckForTimeOut+0x88>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	429a      	cmp	r2, r3
 8005986:	d305      	bcc.n	8005994 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005988:	2301      	movs	r3, #1
 800598a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	e015      	b.n	80059c0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	429a      	cmp	r2, r3
 800599c:	d20b      	bcs.n	80059b6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	1ad2      	subs	r2, r2, r3
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff ff98 	bl	80058e0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80059b0:	2300      	movs	r3, #0
 80059b2:	61fb      	str	r3, [r7, #28]
 80059b4:	e004      	b.n	80059c0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2200      	movs	r2, #0
 80059ba:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80059bc:	2301      	movs	r3, #1
 80059be:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80059c0:	f001 f8f2 	bl	8006ba8 <vPortExitCritical>

    return xReturn;
 80059c4:	69fb      	ldr	r3, [r7, #28]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3720      	adds	r7, #32
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20000a08 	.word	0x20000a08
 80059d4:	20000a1c 	.word	0x20000a1c

080059d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80059dc:	4b03      	ldr	r3, [pc, #12]	; (80059ec <vTaskMissedYield+0x14>)
 80059de:	2201      	movs	r2, #1
 80059e0:	601a      	str	r2, [r3, #0]
}
 80059e2:	bf00      	nop
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	20000a18 	.word	0x20000a18

080059f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80059f8:	f000 f852 	bl	8005aa0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059fc:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <prvIdleTask+0x28>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d9f9      	bls.n	80059f8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005a04:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <prvIdleTask+0x2c>)
 8005a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005a14:	e7f0      	b.n	80059f8 <prvIdleTask+0x8>
 8005a16:	bf00      	nop
 8005a18:	20000908 	.word	0x20000908
 8005a1c:	e000ed04 	.word	0xe000ed04

08005a20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a26:	2300      	movs	r3, #0
 8005a28:	607b      	str	r3, [r7, #4]
 8005a2a:	e00c      	b.n	8005a46 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4a12      	ldr	r2, [pc, #72]	; (8005a80 <prvInitialiseTaskLists+0x60>)
 8005a38:	4413      	add	r3, r2
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fe fbee 	bl	800421c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3301      	adds	r3, #1
 8005a44:	607b      	str	r3, [r7, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b06      	cmp	r3, #6
 8005a4a:	d9ef      	bls.n	8005a2c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005a4c:	480d      	ldr	r0, [pc, #52]	; (8005a84 <prvInitialiseTaskLists+0x64>)
 8005a4e:	f7fe fbe5 	bl	800421c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005a52:	480d      	ldr	r0, [pc, #52]	; (8005a88 <prvInitialiseTaskLists+0x68>)
 8005a54:	f7fe fbe2 	bl	800421c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005a58:	480c      	ldr	r0, [pc, #48]	; (8005a8c <prvInitialiseTaskLists+0x6c>)
 8005a5a:	f7fe fbdf 	bl	800421c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005a5e:	480c      	ldr	r0, [pc, #48]	; (8005a90 <prvInitialiseTaskLists+0x70>)
 8005a60:	f7fe fbdc 	bl	800421c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005a64:	480b      	ldr	r0, [pc, #44]	; (8005a94 <prvInitialiseTaskLists+0x74>)
 8005a66:	f7fe fbd9 	bl	800421c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005a6a:	4b0b      	ldr	r3, [pc, #44]	; (8005a98 <prvInitialiseTaskLists+0x78>)
 8005a6c:	4a05      	ldr	r2, [pc, #20]	; (8005a84 <prvInitialiseTaskLists+0x64>)
 8005a6e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a70:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <prvInitialiseTaskLists+0x7c>)
 8005a72:	4a05      	ldr	r2, [pc, #20]	; (8005a88 <prvInitialiseTaskLists+0x68>)
 8005a74:	601a      	str	r2, [r3, #0]
}
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20000908 	.word	0x20000908
 8005a84:	20000994 	.word	0x20000994
 8005a88:	200009a8 	.word	0x200009a8
 8005a8c:	200009c4 	.word	0x200009c4
 8005a90:	200009d8 	.word	0x200009d8
 8005a94:	200009f0 	.word	0x200009f0
 8005a98:	200009bc 	.word	0x200009bc
 8005a9c:	200009c0 	.word	0x200009c0

08005aa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005aa6:	e019      	b.n	8005adc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005aa8:	f001 f84e 	bl	8006b48 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aac:	4b10      	ldr	r3, [pc, #64]	; (8005af0 <prvCheckTasksWaitingTermination+0x50>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fe fc39 	bl	8004330 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005abe:	4b0d      	ldr	r3, [pc, #52]	; (8005af4 <prvCheckTasksWaitingTermination+0x54>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	4a0b      	ldr	r2, [pc, #44]	; (8005af4 <prvCheckTasksWaitingTermination+0x54>)
 8005ac6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005ac8:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <prvCheckTasksWaitingTermination+0x58>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3b01      	subs	r3, #1
 8005ace:	4a0a      	ldr	r2, [pc, #40]	; (8005af8 <prvCheckTasksWaitingTermination+0x58>)
 8005ad0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005ad2:	f001 f869 	bl	8006ba8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f810 	bl	8005afc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005adc:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <prvCheckTasksWaitingTermination+0x58>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e1      	bne.n	8005aa8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005ae4:	bf00      	nop
 8005ae6:	bf00      	nop
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	200009d8 	.word	0x200009d8
 8005af4:	20000a04 	.word	0x20000a04
 8005af8:	200009ec 	.word	0x200009ec

08005afc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f001 fa1f 	bl	8006f4c <vPortFree>
                vPortFree( pxTCB );
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f001 fa1c 	bl	8006f4c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005b14:	bf00      	nop
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b20:	4b0a      	ldr	r3, [pc, #40]	; (8005b4c <prvResetNextTaskUnblockTime+0x30>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d104      	bne.n	8005b34 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005b2a:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <prvResetNextTaskUnblockTime+0x34>)
 8005b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b30:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005b32:	e005      	b.n	8005b40 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b34:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <prvResetNextTaskUnblockTime+0x30>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a04      	ldr	r2, [pc, #16]	; (8005b50 <prvResetNextTaskUnblockTime+0x34>)
 8005b3e:	6013      	str	r3, [r2, #0]
}
 8005b40:	bf00      	nop
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	200009bc 	.word	0x200009bc
 8005b50:	20000a24 	.word	0x20000a24

08005b54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005b5a:	4b0b      	ldr	r3, [pc, #44]	; (8005b88 <xTaskGetSchedulerState+0x34>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d102      	bne.n	8005b68 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005b62:	2301      	movs	r3, #1
 8005b64:	607b      	str	r3, [r7, #4]
 8005b66:	e008      	b.n	8005b7a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b68:	4b08      	ldr	r3, [pc, #32]	; (8005b8c <xTaskGetSchedulerState+0x38>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d102      	bne.n	8005b76 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005b70:	2302      	movs	r3, #2
 8005b72:	607b      	str	r3, [r7, #4]
 8005b74:	e001      	b.n	8005b7a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005b76:	2300      	movs	r3, #0
 8005b78:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005b7a:	687b      	ldr	r3, [r7, #4]
    }
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr
 8005b88:	20000a10 	.word	0x20000a10
 8005b8c:	20000a2c 	.word	0x20000a2c

08005b90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d063      	beq.n	8005c6e <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005ba6:	4b34      	ldr	r3, [pc, #208]	; (8005c78 <xTaskPriorityDisinherit+0xe8>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d00a      	beq.n	8005bc6 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8005bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb4:	f383 8811 	msr	BASEPRI, r3
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	60fb      	str	r3, [r7, #12]
    }
 8005bc2:	bf00      	nop
 8005bc4:	e7fe      	b.n	8005bc4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10a      	bne.n	8005be4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	60bb      	str	r3, [r7, #8]
    }
 8005be0:	bf00      	nop
 8005be2:	e7fe      	b.n	8005be2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be8:	1e5a      	subs	r2, r3, #1
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d039      	beq.n	8005c6e <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d135      	bne.n	8005c6e <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	3304      	adds	r3, #4
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fe fb92 	bl	8004330 <uxListRemove>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10a      	bne.n	8005c28 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	2201      	movs	r2, #1
 8005c18:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1c:	43da      	mvns	r2, r3
 8005c1e:	4b17      	ldr	r3, [pc, #92]	; (8005c7c <xTaskPriorityDisinherit+0xec>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4013      	ands	r3, r2
 8005c24:	4a15      	ldr	r2, [pc, #84]	; (8005c7c <xTaskPriorityDisinherit+0xec>)
 8005c26:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c34:	f1c3 0207 	rsb	r2, r3, #7
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	2201      	movs	r2, #1
 8005c42:	409a      	lsls	r2, r3
 8005c44:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <xTaskPriorityDisinherit+0xec>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	4a0c      	ldr	r2, [pc, #48]	; (8005c7c <xTaskPriorityDisinherit+0xec>)
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c52:	4613      	mov	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4a09      	ldr	r2, [pc, #36]	; (8005c80 <xTaskPriorityDisinherit+0xf0>)
 8005c5c:	441a      	add	r2, r3
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	3304      	adds	r3, #4
 8005c62:	4619      	mov	r1, r3
 8005c64:	4610      	mov	r0, r2
 8005c66:	f7fe fb06 	bl	8004276 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005c6e:	697b      	ldr	r3, [r7, #20]
    }
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	20000904 	.word	0x20000904
 8005c7c:	20000a0c 	.word	0x20000a0c
 8005c80:	20000908 	.word	0x20000908

08005c84 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00a      	beq.n	8005cae <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	613b      	str	r3, [r7, #16]
    }
 8005caa:	bf00      	nop
 8005cac:	e7fe      	b.n	8005cac <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8005cae:	f000 ff4b 	bl	8006b48 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005cb2:	4b32      	ldr	r3, [pc, #200]	; (8005d7c <xTaskGenericNotifyWait+0xf8>)
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	4413      	add	r3, r2
 8005cba:	3354      	adds	r3, #84	; 0x54
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d022      	beq.n	8005d0a <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8005cc4:	4b2d      	ldr	r3, [pc, #180]	; (8005d7c <xTaskGenericNotifyWait+0xf8>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	3214      	adds	r2, #20
 8005ccc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	43d2      	mvns	r2, r2
 8005cd4:	4011      	ands	r1, r2
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	3214      	adds	r2, #20
 8005cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8005cde:	4b27      	ldr	r3, [pc, #156]	; (8005d7c <xTaskGenericNotifyWait+0xf8>)
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	3354      	adds	r3, #84	; 0x54
 8005ce8:	2201      	movs	r2, #1
 8005cea:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00b      	beq.n	8005d0a <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005cf2:	2101      	movs	r1, #1
 8005cf4:	6a38      	ldr	r0, [r7, #32]
 8005cf6:	f000 fa27 	bl	8006148 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8005cfa:	4b21      	ldr	r3, [pc, #132]	; (8005d80 <xTaskGenericNotifyWait+0xfc>)
 8005cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005d0a:	f000 ff4d 	bl	8006ba8 <vPortExitCritical>

        taskENTER_CRITICAL();
 8005d0e:	f000 ff1b 	bl	8006b48 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d007      	beq.n	8005d28 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8005d18:	4b18      	ldr	r3, [pc, #96]	; (8005d7c <xTaskGenericNotifyWait+0xf8>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	3214      	adds	r2, #20
 8005d20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005d28:	4b14      	ldr	r3, [pc, #80]	; (8005d7c <xTaskGenericNotifyWait+0xf8>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4413      	add	r3, r2
 8005d30:	3354      	adds	r3, #84	; 0x54
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d002      	beq.n	8005d40 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	617b      	str	r3, [r7, #20]
 8005d3e:	e00e      	b.n	8005d5e <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8005d40:	4b0e      	ldr	r3, [pc, #56]	; (8005d7c <xTaskGenericNotifyWait+0xf8>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	3214      	adds	r2, #20
 8005d48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	43d2      	mvns	r2, r2
 8005d50:	4011      	ands	r1, r2
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	3214      	adds	r2, #20
 8005d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8005d5e:	4b07      	ldr	r3, [pc, #28]	; (8005d7c <xTaskGenericNotifyWait+0xf8>)
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4413      	add	r3, r2
 8005d66:	3354      	adds	r3, #84	; 0x54
 8005d68:	2200      	movs	r2, #0
 8005d6a:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005d6c:	f000 ff1c 	bl	8006ba8 <vPortExitCritical>

        return xReturn;
 8005d70:	697b      	ldr	r3, [r7, #20]
    }
 8005d72:	4618      	mov	r0, r3
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20000904 	.word	0x20000904
 8005d80:	e000ed04 	.word	0xe000ed04

08005d84 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08c      	sub	sp, #48	; 0x30
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8005d92:	2301      	movs	r3, #1
 8005d94:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <xTaskGenericNotify+0x2e>
        __asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	623b      	str	r3, [r7, #32]
    }
 8005dae:	bf00      	nop
 8005db0:	e7fe      	b.n	8005db0 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10a      	bne.n	8005dce <xTaskGenericNotify+0x4a>
        __asm volatile
 8005db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	61fb      	str	r3, [r7, #28]
    }
 8005dca:	bf00      	nop
 8005dcc:	e7fe      	b.n	8005dcc <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8005dd2:	f000 feb9 	bl	8006b48 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d006      	beq.n	8005dea <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	3214      	adds	r2, #20
 8005de2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	4413      	add	r3, r2
 8005df0:	3354      	adds	r3, #84	; 0x54
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005df8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	3354      	adds	r3, #84	; 0x54
 8005e00:	2202      	movs	r2, #2
 8005e02:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d83b      	bhi.n	8005e82 <xTaskGenericNotify+0xfe>
 8005e0a:	a201      	add	r2, pc, #4	; (adr r2, 8005e10 <xTaskGenericNotify+0x8c>)
 8005e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e10:	08005ea1 	.word	0x08005ea1
 8005e14:	08005e25 	.word	0x08005e25
 8005e18:	08005e41 	.word	0x08005e41
 8005e1c:	08005e59 	.word	0x08005e59
 8005e20:	08005e67 	.word	0x08005e67
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	3214      	adds	r2, #20
 8005e2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	ea42 0103 	orr.w	r1, r2, r3
 8005e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	3214      	adds	r2, #20
 8005e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005e3e:	e032      	b.n	8005ea6 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	3214      	adds	r2, #20
 8005e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e4a:	1c59      	adds	r1, r3, #1
 8005e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	3214      	adds	r2, #20
 8005e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005e56:	e026      	b.n	8005ea6 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	3214      	adds	r2, #20
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005e64:	e01f      	b.n	8005ea6 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d006      	beq.n	8005e7c <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	3214      	adds	r2, #20
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005e7a:	e014      	b.n	8005ea6 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8005e80:	e011      	b.n	8005ea6 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005e82:	4b2b      	ldr	r3, [pc, #172]	; (8005f30 <xTaskGenericNotify+0x1ac>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00c      	beq.n	8005ea4 <xTaskGenericNotify+0x120>
        __asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	61bb      	str	r3, [r7, #24]
    }
 8005e9c:	bf00      	nop
 8005e9e:	e7fe      	b.n	8005e9e <xTaskGenericNotify+0x11a>
                    break;
 8005ea0:	bf00      	nop
 8005ea2:	e000      	b.n	8005ea6 <xTaskGenericNotify+0x122>

                    break;
 8005ea4:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005ea6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d139      	bne.n	8005f22 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fe fa3c 	bl	8004330 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8005eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	409a      	lsls	r2, r3
 8005ec0:	4b1c      	ldr	r3, [pc, #112]	; (8005f34 <xTaskGenericNotify+0x1b0>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	4a1b      	ldr	r2, [pc, #108]	; (8005f34 <xTaskGenericNotify+0x1b0>)
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ece:	4613      	mov	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4a18      	ldr	r2, [pc, #96]	; (8005f38 <xTaskGenericNotify+0x1b4>)
 8005ed8:	441a      	add	r2, r3
 8005eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005edc:	3304      	adds	r3, #4
 8005ede:	4619      	mov	r1, r3
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	f7fe f9c8 	bl	8004276 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00a      	beq.n	8005f04 <xTaskGenericNotify+0x180>
        __asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	617b      	str	r3, [r7, #20]
    }
 8005f00:	bf00      	nop
 8005f02:	e7fe      	b.n	8005f02 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f08:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <xTaskGenericNotify+0x1b8>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d907      	bls.n	8005f22 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8005f12:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <xTaskGenericNotify+0x1bc>)
 8005f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005f22:	f000 fe41 	bl	8006ba8 <vPortExitCritical>

        return xReturn;
 8005f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3730      	adds	r7, #48	; 0x30
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	20000a08 	.word	0x20000a08
 8005f34:	20000a0c 	.word	0x20000a0c
 8005f38:	20000908 	.word	0x20000908
 8005f3c:	20000904 	.word	0x20000904
 8005f40:	e000ed04 	.word	0xe000ed04

08005f44 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b090      	sub	sp, #64	; 0x40
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
 8005f50:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8005f52:	2301      	movs	r3, #1
 8005f54:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10a      	bne.n	8005f72 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8005f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8005f6e:	bf00      	nop
 8005f70:	e7fe      	b.n	8005f70 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00a      	beq.n	8005f8e <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005f8a:	bf00      	nop
 8005f8c:	e7fe      	b.n	8005f8c <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f8e:	f000 febd 	bl	8006d0c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8005f96:	f3ef 8211 	mrs	r2, BASEPRI
 8005f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	627a      	str	r2, [r7, #36]	; 0x24
 8005fac:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fb0:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8005fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d006      	beq.n	8005fc6 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	3214      	adds	r2, #20
 8005fbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc4:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005fc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	4413      	add	r3, r2
 8005fcc:	3354      	adds	r3, #84	; 0x54
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005fd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	4413      	add	r3, r2
 8005fda:	3354      	adds	r3, #84	; 0x54
 8005fdc:	2202      	movs	r2, #2
 8005fde:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005fe0:	78fb      	ldrb	r3, [r7, #3]
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	d83b      	bhi.n	800605e <xTaskGenericNotifyFromISR+0x11a>
 8005fe6:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <xTaskGenericNotifyFromISR+0xa8>)
 8005fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fec:	0800607d 	.word	0x0800607d
 8005ff0:	08006001 	.word	0x08006001
 8005ff4:	0800601d 	.word	0x0800601d
 8005ff8:	08006035 	.word	0x08006035
 8005ffc:	08006043 	.word	0x08006043
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	3214      	adds	r2, #20
 8006006:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	ea42 0103 	orr.w	r1, r2, r3
 8006010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	3214      	adds	r2, #20
 8006016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800601a:	e032      	b.n	8006082 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800601c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	3214      	adds	r2, #20
 8006022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006026:	1c59      	adds	r1, r3, #1
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	3214      	adds	r2, #20
 800602e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006032:	e026      	b.n	8006082 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	3214      	adds	r2, #20
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006040:	e01f      	b.n	8006082 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006042:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006046:	2b02      	cmp	r3, #2
 8006048:	d006      	beq.n	8006058 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800604a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	3214      	adds	r2, #20
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006056:	e014      	b.n	8006082 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8006058:	2300      	movs	r3, #0
 800605a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 800605c:	e011      	b.n	8006082 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800605e:	4b33      	ldr	r3, [pc, #204]	; (800612c <xTaskGenericNotifyFromISR+0x1e8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00c      	beq.n	8006080 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8006066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	61fb      	str	r3, [r7, #28]
    }
 8006078:	bf00      	nop
 800607a:	e7fe      	b.n	800607a <xTaskGenericNotifyFromISR+0x136>
                    break;
 800607c:	bf00      	nop
 800607e:	e000      	b.n	8006082 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8006080:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006082:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006086:	2b01      	cmp	r3, #1
 8006088:	d145      	bne.n	8006116 <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8006092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	61bb      	str	r3, [r7, #24]
    }
 80060a4:	bf00      	nop
 80060a6:	e7fe      	b.n	80060a6 <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060a8:	4b21      	ldr	r3, [pc, #132]	; (8006130 <xTaskGenericNotifyFromISR+0x1ec>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d11c      	bne.n	80060ea <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b2:	3304      	adds	r3, #4
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fe f93b 	bl	8004330 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80060ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060be:	2201      	movs	r2, #1
 80060c0:	409a      	lsls	r2, r3
 80060c2:	4b1c      	ldr	r3, [pc, #112]	; (8006134 <xTaskGenericNotifyFromISR+0x1f0>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	4a1a      	ldr	r2, [pc, #104]	; (8006134 <xTaskGenericNotifyFromISR+0x1f0>)
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d0:	4613      	mov	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4a17      	ldr	r2, [pc, #92]	; (8006138 <xTaskGenericNotifyFromISR+0x1f4>)
 80060da:	441a      	add	r2, r3
 80060dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060de:	3304      	adds	r3, #4
 80060e0:	4619      	mov	r1, r3
 80060e2:	4610      	mov	r0, r2
 80060e4:	f7fe f8c7 	bl	8004276 <vListInsertEnd>
 80060e8:	e005      	b.n	80060f6 <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80060ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ec:	3318      	adds	r3, #24
 80060ee:	4619      	mov	r1, r3
 80060f0:	4812      	ldr	r0, [pc, #72]	; (800613c <xTaskGenericNotifyFromISR+0x1f8>)
 80060f2:	f7fe f8c0 	bl	8004276 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060fa:	4b11      	ldr	r3, [pc, #68]	; (8006140 <xTaskGenericNotifyFromISR+0x1fc>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	429a      	cmp	r2, r3
 8006102:	d908      	bls.n	8006116 <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800610a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800610c:	2201      	movs	r2, #1
 800610e:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006110:	4b0c      	ldr	r3, [pc, #48]	; (8006144 <xTaskGenericNotifyFromISR+0x200>)
 8006112:	2201      	movs	r2, #1
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006118:	617b      	str	r3, [r7, #20]
        __asm volatile
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f383 8811 	msr	BASEPRI, r3
    }
 8006120:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8006122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8006124:	4618      	mov	r0, r3
 8006126:	3740      	adds	r7, #64	; 0x40
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	20000a08 	.word	0x20000a08
 8006130:	20000a2c 	.word	0x20000a2c
 8006134:	20000a0c 	.word	0x20000a0c
 8006138:	20000908 	.word	0x20000908
 800613c:	200009c4 	.word	0x200009c4
 8006140:	20000904 	.word	0x20000904
 8006144:	20000a18 	.word	0x20000a18

08006148 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006152:	4b29      	ldr	r3, [pc, #164]	; (80061f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006158:	4b28      	ldr	r3, [pc, #160]	; (80061fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3304      	adds	r3, #4
 800615e:	4618      	mov	r0, r3
 8006160:	f7fe f8e6 	bl	8004330 <uxListRemove>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10b      	bne.n	8006182 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800616a:	4b24      	ldr	r3, [pc, #144]	; (80061fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006170:	2201      	movs	r2, #1
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
 8006176:	43da      	mvns	r2, r3
 8006178:	4b21      	ldr	r3, [pc, #132]	; (8006200 <prvAddCurrentTaskToDelayedList+0xb8>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4013      	ands	r3, r2
 800617e:	4a20      	ldr	r2, [pc, #128]	; (8006200 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006180:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006188:	d10a      	bne.n	80061a0 <prvAddCurrentTaskToDelayedList+0x58>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d007      	beq.n	80061a0 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006190:	4b1a      	ldr	r3, [pc, #104]	; (80061fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3304      	adds	r3, #4
 8006196:	4619      	mov	r1, r3
 8006198:	481a      	ldr	r0, [pc, #104]	; (8006204 <prvAddCurrentTaskToDelayedList+0xbc>)
 800619a:	f7fe f86c 	bl	8004276 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800619e:	e026      	b.n	80061ee <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4413      	add	r3, r2
 80061a6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061a8:	4b14      	ldr	r3, [pc, #80]	; (80061fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d209      	bcs.n	80061cc <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061b8:	4b13      	ldr	r3, [pc, #76]	; (8006208 <prvAddCurrentTaskToDelayedList+0xc0>)
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	4b0f      	ldr	r3, [pc, #60]	; (80061fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	3304      	adds	r3, #4
 80061c2:	4619      	mov	r1, r3
 80061c4:	4610      	mov	r0, r2
 80061c6:	f7fe f87a 	bl	80042be <vListInsert>
}
 80061ca:	e010      	b.n	80061ee <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061cc:	4b0f      	ldr	r3, [pc, #60]	; (800620c <prvAddCurrentTaskToDelayedList+0xc4>)
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3304      	adds	r3, #4
 80061d6:	4619      	mov	r1, r3
 80061d8:	4610      	mov	r0, r2
 80061da:	f7fe f870 	bl	80042be <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80061de:	4b0c      	ldr	r3, [pc, #48]	; (8006210 <prvAddCurrentTaskToDelayedList+0xc8>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d202      	bcs.n	80061ee <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80061e8:	4a09      	ldr	r2, [pc, #36]	; (8006210 <prvAddCurrentTaskToDelayedList+0xc8>)
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	6013      	str	r3, [r2, #0]
}
 80061ee:	bf00      	nop
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	20000a08 	.word	0x20000a08
 80061fc:	20000904 	.word	0x20000904
 8006200:	20000a0c 	.word	0x20000a0c
 8006204:	200009f0 	.word	0x200009f0
 8006208:	200009c0 	.word	0x200009c0
 800620c:	200009bc 	.word	0x200009bc
 8006210:	20000a24 	.word	0x20000a24

08006214 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800621a:	2300      	movs	r3, #0
 800621c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800621e:	f000 fb31 	bl	8006884 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006222:	4b11      	ldr	r3, [pc, #68]	; (8006268 <xTimerCreateTimerTask+0x54>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00b      	beq.n	8006242 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800622a:	4b10      	ldr	r3, [pc, #64]	; (800626c <xTimerCreateTimerTask+0x58>)
 800622c:	9301      	str	r3, [sp, #4]
 800622e:	2302      	movs	r3, #2
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	2300      	movs	r3, #0
 8006234:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006238:	490d      	ldr	r1, [pc, #52]	; (8006270 <xTimerCreateTimerTask+0x5c>)
 800623a:	480e      	ldr	r0, [pc, #56]	; (8006274 <xTimerCreateTimerTask+0x60>)
 800623c:	f7fe ff38 	bl	80050b0 <xTaskCreate>
 8006240:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10a      	bne.n	800625e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	603b      	str	r3, [r7, #0]
    }
 800625a:	bf00      	nop
 800625c:	e7fe      	b.n	800625c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800625e:	687b      	ldr	r3, [r7, #4]
    }
 8006260:	4618      	mov	r0, r3
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	20000a60 	.word	0x20000a60
 800626c:	20000a64 	.word	0x20000a64
 8006270:	08011c9c 	.word	0x08011c9c
 8006274:	08006465 	.word	0x08006465

08006278 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006278:	b580      	push	{r7, lr}
 800627a:	b088      	sub	sp, #32
 800627c:	af02      	add	r7, sp, #8
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006286:	202c      	movs	r0, #44	; 0x2c
 8006288:	f000 fd80 	bl	8006d8c <pvPortMalloc>
 800628c:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00d      	beq.n	80062b0 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	9301      	str	r3, [sp, #4]
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	68b9      	ldr	r1, [r7, #8]
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f000 f805 	bl	80062ba <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80062b0:	697b      	ldr	r3, [r7, #20]
        }
 80062b2:	4618      	mov	r0, r3
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b086      	sub	sp, #24
 80062be:	af00      	add	r7, sp, #0
 80062c0:	60f8      	str	r0, [r7, #12]
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	607a      	str	r2, [r7, #4]
 80062c6:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10a      	bne.n	80062e4 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	617b      	str	r3, [r7, #20]
    }
 80062e0:	bf00      	nop
 80062e2:	e7fe      	b.n	80062e2 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d01e      	beq.n	8006328 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 80062ea:	f000 facb 	bl	8006884 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	6a3a      	ldr	r2, [r7, #32]
 8006304:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	3304      	adds	r3, #4
 800630a:	4618      	mov	r0, r3
 800630c:	f7fd ffa6 	bl	800425c <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d008      	beq.n	8006328 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800631c:	f043 0304 	orr.w	r3, r3, #4
 8006320:	b2da      	uxtb	r2, r3
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8006328:	bf00      	nop
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006330:	b580      	push	{r7, lr}
 8006332:	b08a      	sub	sp, #40	; 0x28
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
 800633c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800633e:	2300      	movs	r3, #0
 8006340:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10a      	bne.n	800635e <xTimerGenericCommand+0x2e>
        __asm volatile
 8006348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	623b      	str	r3, [r7, #32]
    }
 800635a:	bf00      	nop
 800635c:	e7fe      	b.n	800635c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800635e:	4b1a      	ldr	r3, [pc, #104]	; (80063c8 <xTimerGenericCommand+0x98>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d02a      	beq.n	80063bc <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2b05      	cmp	r3, #5
 8006376:	dc18      	bgt.n	80063aa <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006378:	f7ff fbec 	bl	8005b54 <xTaskGetSchedulerState>
 800637c:	4603      	mov	r3, r0
 800637e:	2b02      	cmp	r3, #2
 8006380:	d109      	bne.n	8006396 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006382:	4b11      	ldr	r3, [pc, #68]	; (80063c8 <xTimerGenericCommand+0x98>)
 8006384:	6818      	ldr	r0, [r3, #0]
 8006386:	f107 0114 	add.w	r1, r7, #20
 800638a:	2300      	movs	r3, #0
 800638c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800638e:	f7fe f8e3 	bl	8004558 <xQueueGenericSend>
 8006392:	6278      	str	r0, [r7, #36]	; 0x24
 8006394:	e012      	b.n	80063bc <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006396:	4b0c      	ldr	r3, [pc, #48]	; (80063c8 <xTimerGenericCommand+0x98>)
 8006398:	6818      	ldr	r0, [r3, #0]
 800639a:	f107 0114 	add.w	r1, r7, #20
 800639e:	2300      	movs	r3, #0
 80063a0:	2200      	movs	r2, #0
 80063a2:	f7fe f8d9 	bl	8004558 <xQueueGenericSend>
 80063a6:	6278      	str	r0, [r7, #36]	; 0x24
 80063a8:	e008      	b.n	80063bc <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80063aa:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <xTimerGenericCommand+0x98>)
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	f107 0114 	add.w	r1, r7, #20
 80063b2:	2300      	movs	r3, #0
 80063b4:	683a      	ldr	r2, [r7, #0]
 80063b6:	f7fe f9cd 	bl	8004754 <xQueueGenericSendFromISR>
 80063ba:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80063be:	4618      	mov	r0, r3
 80063c0:	3728      	adds	r7, #40	; 0x28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	20000a60 	.word	0x20000a60

080063cc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b088      	sub	sp, #32
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063d6:	4b22      	ldr	r3, [pc, #136]	; (8006460 <prvProcessExpiredTimer+0x94>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	3304      	adds	r3, #4
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fd ffa3 	bl	8004330 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063f0:	f003 0304 	and.w	r3, r3, #4
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d022      	beq.n	800643e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	699a      	ldr	r2, [r3, #24]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	18d1      	adds	r1, r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	6978      	ldr	r0, [r7, #20]
 8006406:	f000 f8d1 	bl	80065ac <prvInsertTimerInActiveList>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d01f      	beq.n	8006450 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006410:	2300      	movs	r3, #0
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	2300      	movs	r3, #0
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	2100      	movs	r1, #0
 800641a:	6978      	ldr	r0, [r7, #20]
 800641c:	f7ff ff88 	bl	8006330 <xTimerGenericCommand>
 8006420:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d113      	bne.n	8006450 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	60fb      	str	r3, [r7, #12]
    }
 800643a:	bf00      	nop
 800643c:	e7fe      	b.n	800643c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006444:	f023 0301 	bic.w	r3, r3, #1
 8006448:	b2da      	uxtb	r2, r3
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	6978      	ldr	r0, [r7, #20]
 8006456:	4798      	blx	r3
    }
 8006458:	bf00      	nop
 800645a:	3718      	adds	r7, #24
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20000a58 	.word	0x20000a58

08006464 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800646c:	f107 0308 	add.w	r3, r7, #8
 8006470:	4618      	mov	r0, r3
 8006472:	f000 f857 	bl	8006524 <prvGetNextExpireTime>
 8006476:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	4619      	mov	r1, r3
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 f803 	bl	8006488 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006482:	f000 f8d5 	bl	8006630 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006486:	e7f1      	b.n	800646c <prvTimerTask+0x8>

08006488 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006492:	f7fe ffa5 	bl	80053e0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006496:	f107 0308 	add.w	r3, r7, #8
 800649a:	4618      	mov	r0, r3
 800649c:	f000 f866 	bl	800656c <prvSampleTimeNow>
 80064a0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d130      	bne.n	800650a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10a      	bne.n	80064c4 <prvProcessTimerOrBlockTask+0x3c>
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d806      	bhi.n	80064c4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80064b6:	f7fe ffa1 	bl	80053fc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80064ba:	68f9      	ldr	r1, [r7, #12]
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7ff ff85 	bl	80063cc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80064c2:	e024      	b.n	800650e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d008      	beq.n	80064dc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064ca:	4b13      	ldr	r3, [pc, #76]	; (8006518 <prvProcessTimerOrBlockTask+0x90>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <prvProcessTimerOrBlockTask+0x50>
 80064d4:	2301      	movs	r3, #1
 80064d6:	e000      	b.n	80064da <prvProcessTimerOrBlockTask+0x52>
 80064d8:	2300      	movs	r3, #0
 80064da:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80064dc:	4b0f      	ldr	r3, [pc, #60]	; (800651c <prvProcessTimerOrBlockTask+0x94>)
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	4619      	mov	r1, r3
 80064ea:	f7fe fdad 	bl	8005048 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80064ee:	f7fe ff85 	bl	80053fc <xTaskResumeAll>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10a      	bne.n	800650e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80064f8:	4b09      	ldr	r3, [pc, #36]	; (8006520 <prvProcessTimerOrBlockTask+0x98>)
 80064fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	f3bf 8f6f 	isb	sy
    }
 8006508:	e001      	b.n	800650e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800650a:	f7fe ff77 	bl	80053fc <xTaskResumeAll>
    }
 800650e:	bf00      	nop
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20000a5c 	.word	0x20000a5c
 800651c:	20000a60 	.word	0x20000a60
 8006520:	e000ed04 	.word	0xe000ed04

08006524 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800652c:	4b0e      	ldr	r3, [pc, #56]	; (8006568 <prvGetNextExpireTime+0x44>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <prvGetNextExpireTime+0x16>
 8006536:	2201      	movs	r2, #1
 8006538:	e000      	b.n	800653c <prvGetNextExpireTime+0x18>
 800653a:	2200      	movs	r2, #0
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d105      	bne.n	8006554 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006548:	4b07      	ldr	r3, [pc, #28]	; (8006568 <prvGetNextExpireTime+0x44>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	60fb      	str	r3, [r7, #12]
 8006552:	e001      	b.n	8006558 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006554:	2300      	movs	r3, #0
 8006556:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006558:	68fb      	ldr	r3, [r7, #12]
    }
 800655a:	4618      	mov	r0, r3
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	20000a58 	.word	0x20000a58

0800656c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006574:	f7fe ffde 	bl	8005534 <xTaskGetTickCount>
 8006578:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800657a:	4b0b      	ldr	r3, [pc, #44]	; (80065a8 <prvSampleTimeNow+0x3c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	429a      	cmp	r2, r3
 8006582:	d205      	bcs.n	8006590 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006584:	f000 f91a 	bl	80067bc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	e002      	b.n	8006596 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006596:	4a04      	ldr	r2, [pc, #16]	; (80065a8 <prvSampleTimeNow+0x3c>)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800659c:	68fb      	ldr	r3, [r7, #12]
    }
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	20000a68 	.word	0x20000a68

080065ac <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
 80065b8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80065ba:	2300      	movs	r3, #0
 80065bc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d812      	bhi.n	80065f8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	1ad2      	subs	r2, r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d302      	bcc.n	80065e6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80065e0:	2301      	movs	r3, #1
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	e01b      	b.n	800661e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80065e6:	4b10      	ldr	r3, [pc, #64]	; (8006628 <prvInsertTimerInActiveList+0x7c>)
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3304      	adds	r3, #4
 80065ee:	4619      	mov	r1, r3
 80065f0:	4610      	mov	r0, r2
 80065f2:	f7fd fe64 	bl	80042be <vListInsert>
 80065f6:	e012      	b.n	800661e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d206      	bcs.n	800660e <prvInsertTimerInActiveList+0x62>
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	429a      	cmp	r2, r3
 8006606:	d302      	bcc.n	800660e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006608:	2301      	movs	r3, #1
 800660a:	617b      	str	r3, [r7, #20]
 800660c:	e007      	b.n	800661e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800660e:	4b07      	ldr	r3, [pc, #28]	; (800662c <prvInsertTimerInActiveList+0x80>)
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3304      	adds	r3, #4
 8006616:	4619      	mov	r1, r3
 8006618:	4610      	mov	r0, r2
 800661a:	f7fd fe50 	bl	80042be <vListInsert>
            }
        }

        return xProcessTimerNow;
 800661e:	697b      	ldr	r3, [r7, #20]
    }
 8006620:	4618      	mov	r0, r3
 8006622:	3718      	adds	r7, #24
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	20000a5c 	.word	0x20000a5c
 800662c:	20000a58 	.word	0x20000a58

08006630 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006630:	b580      	push	{r7, lr}
 8006632:	b08c      	sub	sp, #48	; 0x30
 8006634:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006636:	e0ae      	b.n	8006796 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2b00      	cmp	r3, #0
 800663c:	f2c0 80aa 	blt.w	8006794 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d004      	beq.n	8006656 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	3304      	adds	r3, #4
 8006650:	4618      	mov	r0, r3
 8006652:	f7fd fe6d 	bl	8004330 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006656:	1d3b      	adds	r3, r7, #4
 8006658:	4618      	mov	r0, r3
 800665a:	f7ff ff87 	bl	800656c <prvSampleTimeNow>
 800665e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b09      	cmp	r3, #9
 8006664:	f200 8097 	bhi.w	8006796 <prvProcessReceivedCommands+0x166>
 8006668:	a201      	add	r2, pc, #4	; (adr r2, 8006670 <prvProcessReceivedCommands+0x40>)
 800666a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666e:	bf00      	nop
 8006670:	08006699 	.word	0x08006699
 8006674:	08006699 	.word	0x08006699
 8006678:	08006699 	.word	0x08006699
 800667c:	0800670d 	.word	0x0800670d
 8006680:	08006721 	.word	0x08006721
 8006684:	0800676b 	.word	0x0800676b
 8006688:	08006699 	.word	0x08006699
 800668c:	08006699 	.word	0x08006699
 8006690:	0800670d 	.word	0x0800670d
 8006694:	08006721 	.word	0x08006721
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800669e:	f043 0301 	orr.w	r3, r3, #1
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	18d1      	adds	r1, r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6a3a      	ldr	r2, [r7, #32]
 80066b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066b8:	f7ff ff78 	bl	80065ac <prvInsertTimerInActiveList>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d069      	beq.n	8006796 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066c8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066d0:	f003 0304 	and.w	r3, r3, #4
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d05e      	beq.n	8006796 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	441a      	add	r2, r3
 80066e0:	2300      	movs	r3, #0
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	2300      	movs	r3, #0
 80066e6:	2100      	movs	r1, #0
 80066e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066ea:	f7ff fe21 	bl	8006330 <xTimerGenericCommand>
 80066ee:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d14f      	bne.n	8006796 <prvProcessReceivedCommands+0x166>
        __asm volatile
 80066f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	61bb      	str	r3, [r7, #24]
    }
 8006708:	bf00      	nop
 800670a:	e7fe      	b.n	800670a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006712:	f023 0301 	bic.w	r3, r3, #1
 8006716:	b2da      	uxtb	r2, r3
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800671e:	e03a      	b.n	8006796 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006726:	f043 0301 	orr.w	r3, r3, #1
 800672a:	b2da      	uxtb	r2, r3
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10a      	bne.n	8006756 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	617b      	str	r3, [r7, #20]
    }
 8006752:	bf00      	nop
 8006754:	e7fe      	b.n	8006754 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	699a      	ldr	r2, [r3, #24]
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	18d1      	adds	r1, r2, r3
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	6a3a      	ldr	r2, [r7, #32]
 8006762:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006764:	f7ff ff22 	bl	80065ac <prvInsertTimerInActiveList>
                        break;
 8006768:	e015      	b.n	8006796 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006770:	f003 0302 	and.w	r3, r3, #2
 8006774:	2b00      	cmp	r3, #0
 8006776:	d103      	bne.n	8006780 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8006778:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800677a:	f000 fbe7 	bl	8006f4c <vPortFree>
 800677e:	e00a      	b.n	8006796 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006786:	f023 0301 	bic.w	r3, r3, #1
 800678a:	b2da      	uxtb	r2, r3
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006792:	e000      	b.n	8006796 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006794:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006796:	4b08      	ldr	r3, [pc, #32]	; (80067b8 <prvProcessReceivedCommands+0x188>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f107 0108 	add.w	r1, r7, #8
 800679e:	2200      	movs	r2, #0
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7fe f881 	bl	80048a8 <xQueueReceive>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f47f af45 	bne.w	8006638 <prvProcessReceivedCommands+0x8>
        }
    }
 80067ae:	bf00      	nop
 80067b0:	bf00      	nop
 80067b2:	3728      	adds	r7, #40	; 0x28
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	20000a60 	.word	0x20000a60

080067bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80067bc:	b580      	push	{r7, lr}
 80067be:	b088      	sub	sp, #32
 80067c0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067c2:	e048      	b.n	8006856 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067c4:	4b2d      	ldr	r3, [pc, #180]	; (800687c <prvSwitchTimerLists+0xc0>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067ce:	4b2b      	ldr	r3, [pc, #172]	; (800687c <prvSwitchTimerLists+0xc0>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	3304      	adds	r3, #4
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fd fda7 	bl	8004330 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067f0:	f003 0304 	and.w	r3, r3, #4
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d02e      	beq.n	8006856 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4413      	add	r3, r2
 8006800:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	429a      	cmp	r2, r3
 8006808:	d90e      	bls.n	8006828 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006816:	4b19      	ldr	r3, [pc, #100]	; (800687c <prvSwitchTimerLists+0xc0>)
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	3304      	adds	r3, #4
 800681e:	4619      	mov	r1, r3
 8006820:	4610      	mov	r0, r2
 8006822:	f7fd fd4c 	bl	80042be <vListInsert>
 8006826:	e016      	b.n	8006856 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006828:	2300      	movs	r3, #0
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	2300      	movs	r3, #0
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	2100      	movs	r1, #0
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f7ff fd7c 	bl	8006330 <xTimerGenericCommand>
 8006838:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10a      	bne.n	8006856 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	603b      	str	r3, [r7, #0]
    }
 8006852:	bf00      	nop
 8006854:	e7fe      	b.n	8006854 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006856:	4b09      	ldr	r3, [pc, #36]	; (800687c <prvSwitchTimerLists+0xc0>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1b1      	bne.n	80067c4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006860:	4b06      	ldr	r3, [pc, #24]	; (800687c <prvSwitchTimerLists+0xc0>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006866:	4b06      	ldr	r3, [pc, #24]	; (8006880 <prvSwitchTimerLists+0xc4>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a04      	ldr	r2, [pc, #16]	; (800687c <prvSwitchTimerLists+0xc0>)
 800686c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800686e:	4a04      	ldr	r2, [pc, #16]	; (8006880 <prvSwitchTimerLists+0xc4>)
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	6013      	str	r3, [r2, #0]
    }
 8006874:	bf00      	nop
 8006876:	3718      	adds	r7, #24
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	20000a58 	.word	0x20000a58
 8006880:	20000a5c 	.word	0x20000a5c

08006884 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006884:	b580      	push	{r7, lr}
 8006886:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006888:	f000 f95e 	bl	8006b48 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800688c:	4b12      	ldr	r3, [pc, #72]	; (80068d8 <prvCheckForValidListAndQueue+0x54>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d11d      	bne.n	80068d0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006894:	4811      	ldr	r0, [pc, #68]	; (80068dc <prvCheckForValidListAndQueue+0x58>)
 8006896:	f7fd fcc1 	bl	800421c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800689a:	4811      	ldr	r0, [pc, #68]	; (80068e0 <prvCheckForValidListAndQueue+0x5c>)
 800689c:	f7fd fcbe 	bl	800421c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80068a0:	4b10      	ldr	r3, [pc, #64]	; (80068e4 <prvCheckForValidListAndQueue+0x60>)
 80068a2:	4a0e      	ldr	r2, [pc, #56]	; (80068dc <prvCheckForValidListAndQueue+0x58>)
 80068a4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80068a6:	4b10      	ldr	r3, [pc, #64]	; (80068e8 <prvCheckForValidListAndQueue+0x64>)
 80068a8:	4a0d      	ldr	r2, [pc, #52]	; (80068e0 <prvCheckForValidListAndQueue+0x5c>)
 80068aa:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80068ac:	2200      	movs	r2, #0
 80068ae:	210c      	movs	r1, #12
 80068b0:	200a      	movs	r0, #10
 80068b2:	f7fd fdcf 	bl	8004454 <xQueueGenericCreate>
 80068b6:	4603      	mov	r3, r0
 80068b8:	4a07      	ldr	r2, [pc, #28]	; (80068d8 <prvCheckForValidListAndQueue+0x54>)
 80068ba:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80068bc:	4b06      	ldr	r3, [pc, #24]	; (80068d8 <prvCheckForValidListAndQueue+0x54>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d005      	beq.n	80068d0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068c4:	4b04      	ldr	r3, [pc, #16]	; (80068d8 <prvCheckForValidListAndQueue+0x54>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4908      	ldr	r1, [pc, #32]	; (80068ec <prvCheckForValidListAndQueue+0x68>)
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fe fb92 	bl	8004ff4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80068d0:	f000 f96a 	bl	8006ba8 <vPortExitCritical>
    }
 80068d4:	bf00      	nop
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	20000a60 	.word	0x20000a60
 80068dc:	20000a30 	.word	0x20000a30
 80068e0:	20000a44 	.word	0x20000a44
 80068e4:	20000a58 	.word	0x20000a58
 80068e8:	20000a5c 	.word	0x20000a5c
 80068ec:	08011ca4 	.word	0x08011ca4

080068f0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	3b04      	subs	r3, #4
 8006900:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006908:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	3b04      	subs	r3, #4
 800690e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f023 0201 	bic.w	r2, r3, #1
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	3b04      	subs	r3, #4
 800691e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006920:	4a0c      	ldr	r2, [pc, #48]	; (8006954 <pxPortInitialiseStack+0x64>)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	3b14      	subs	r3, #20
 800692a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3b04      	subs	r3, #4
 8006936:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f06f 0202 	mvn.w	r2, #2
 800693e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3b20      	subs	r3, #32
 8006944:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006946:	68fb      	ldr	r3, [r7, #12]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3714      	adds	r7, #20
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr
 8006954:	08006959 	.word	0x08006959

08006958 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800695e:	2300      	movs	r3, #0
 8006960:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006962:	4b12      	ldr	r3, [pc, #72]	; (80069ac <prvTaskExitError+0x54>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696a:	d00a      	beq.n	8006982 <prvTaskExitError+0x2a>
        __asm volatile
 800696c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	60fb      	str	r3, [r7, #12]
    }
 800697e:	bf00      	nop
 8006980:	e7fe      	b.n	8006980 <prvTaskExitError+0x28>
        __asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	60bb      	str	r3, [r7, #8]
    }
 8006994:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006996:	bf00      	nop
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d0fc      	beq.n	8006998 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800699e:	bf00      	nop
 80069a0:	bf00      	nop
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	2000001c 	.word	0x2000001c

080069b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80069b0:	4b07      	ldr	r3, [pc, #28]	; (80069d0 <pxCurrentTCBConst2>)
 80069b2:	6819      	ldr	r1, [r3, #0]
 80069b4:	6808      	ldr	r0, [r1, #0]
 80069b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ba:	f380 8809 	msr	PSP, r0
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f04f 0000 	mov.w	r0, #0
 80069c6:	f380 8811 	msr	BASEPRI, r0
 80069ca:	4770      	bx	lr
 80069cc:	f3af 8000 	nop.w

080069d0 <pxCurrentTCBConst2>:
 80069d0:	20000904 	.word	0x20000904
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop

080069d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80069d8:	4808      	ldr	r0, [pc, #32]	; (80069fc <prvPortStartFirstTask+0x24>)
 80069da:	6800      	ldr	r0, [r0, #0]
 80069dc:	6800      	ldr	r0, [r0, #0]
 80069de:	f380 8808 	msr	MSP, r0
 80069e2:	f04f 0000 	mov.w	r0, #0
 80069e6:	f380 8814 	msr	CONTROL, r0
 80069ea:	b662      	cpsie	i
 80069ec:	b661      	cpsie	f
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	df00      	svc	0
 80069f8:	bf00      	nop
 80069fa:	0000      	.short	0x0000
 80069fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006a00:	bf00      	nop
 8006a02:	bf00      	nop

08006a04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a0a:	4b46      	ldr	r3, [pc, #280]	; (8006b24 <xPortStartScheduler+0x120>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a46      	ldr	r2, [pc, #280]	; (8006b28 <xPortStartScheduler+0x124>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d10a      	bne.n	8006a2a <xPortStartScheduler+0x26>
        __asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	613b      	str	r3, [r7, #16]
    }
 8006a26:	bf00      	nop
 8006a28:	e7fe      	b.n	8006a28 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a2a:	4b3e      	ldr	r3, [pc, #248]	; (8006b24 <xPortStartScheduler+0x120>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a3f      	ldr	r2, [pc, #252]	; (8006b2c <xPortStartScheduler+0x128>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d10a      	bne.n	8006a4a <xPortStartScheduler+0x46>
        __asm volatile
 8006a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	60fb      	str	r3, [r7, #12]
    }
 8006a46:	bf00      	nop
 8006a48:	e7fe      	b.n	8006a48 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a4a:	4b39      	ldr	r3, [pc, #228]	; (8006b30 <xPortStartScheduler+0x12c>)
 8006a4c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	22ff      	movs	r2, #255	; 0xff
 8006a5a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a64:	78fb      	ldrb	r3, [r7, #3]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	4b31      	ldr	r3, [pc, #196]	; (8006b34 <xPortStartScheduler+0x130>)
 8006a70:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a72:	4b31      	ldr	r3, [pc, #196]	; (8006b38 <xPortStartScheduler+0x134>)
 8006a74:	2207      	movs	r2, #7
 8006a76:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a78:	e009      	b.n	8006a8e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8006a7a:	4b2f      	ldr	r3, [pc, #188]	; (8006b38 <xPortStartScheduler+0x134>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	4a2d      	ldr	r2, [pc, #180]	; (8006b38 <xPortStartScheduler+0x134>)
 8006a82:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a84:	78fb      	ldrb	r3, [r7, #3]
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a8e:	78fb      	ldrb	r3, [r7, #3]
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a96:	2b80      	cmp	r3, #128	; 0x80
 8006a98:	d0ef      	beq.n	8006a7a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a9a:	4b27      	ldr	r3, [pc, #156]	; (8006b38 <xPortStartScheduler+0x134>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f1c3 0307 	rsb	r3, r3, #7
 8006aa2:	2b04      	cmp	r3, #4
 8006aa4:	d00a      	beq.n	8006abc <xPortStartScheduler+0xb8>
        __asm volatile
 8006aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aaa:	f383 8811 	msr	BASEPRI, r3
 8006aae:	f3bf 8f6f 	isb	sy
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	60bb      	str	r3, [r7, #8]
    }
 8006ab8:	bf00      	nop
 8006aba:	e7fe      	b.n	8006aba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006abc:	4b1e      	ldr	r3, [pc, #120]	; (8006b38 <xPortStartScheduler+0x134>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	021b      	lsls	r3, r3, #8
 8006ac2:	4a1d      	ldr	r2, [pc, #116]	; (8006b38 <xPortStartScheduler+0x134>)
 8006ac4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ac6:	4b1c      	ldr	r3, [pc, #112]	; (8006b38 <xPortStartScheduler+0x134>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ace:	4a1a      	ldr	r2, [pc, #104]	; (8006b38 <xPortStartScheduler+0x134>)
 8006ad0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006ada:	4b18      	ldr	r3, [pc, #96]	; (8006b3c <xPortStartScheduler+0x138>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a17      	ldr	r2, [pc, #92]	; (8006b3c <xPortStartScheduler+0x138>)
 8006ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ae4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006ae6:	4b15      	ldr	r3, [pc, #84]	; (8006b3c <xPortStartScheduler+0x138>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a14      	ldr	r2, [pc, #80]	; (8006b3c <xPortStartScheduler+0x138>)
 8006aec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006af0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006af2:	f000 f8db 	bl	8006cac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006af6:	4b12      	ldr	r3, [pc, #72]	; (8006b40 <xPortStartScheduler+0x13c>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006afc:	f000 f8fa 	bl	8006cf4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b00:	4b10      	ldr	r3, [pc, #64]	; (8006b44 <xPortStartScheduler+0x140>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a0f      	ldr	r2, [pc, #60]	; (8006b44 <xPortStartScheduler+0x140>)
 8006b06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b0a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006b0c:	f7ff ff64 	bl	80069d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006b10:	f7fe fdd8 	bl	80056c4 <vTaskSwitchContext>
    prvTaskExitError();
 8006b14:	f7ff ff20 	bl	8006958 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	e000ed00 	.word	0xe000ed00
 8006b28:	410fc271 	.word	0x410fc271
 8006b2c:	410fc270 	.word	0x410fc270
 8006b30:	e000e400 	.word	0xe000e400
 8006b34:	20000a6c 	.word	0x20000a6c
 8006b38:	20000a70 	.word	0x20000a70
 8006b3c:	e000ed20 	.word	0xe000ed20
 8006b40:	2000001c 	.word	0x2000001c
 8006b44:	e000ef34 	.word	0xe000ef34

08006b48 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
        __asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	607b      	str	r3, [r7, #4]
    }
 8006b60:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006b62:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <vPortEnterCritical+0x58>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	3301      	adds	r3, #1
 8006b68:	4a0d      	ldr	r2, [pc, #52]	; (8006ba0 <vPortEnterCritical+0x58>)
 8006b6a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006b6c:	4b0c      	ldr	r3, [pc, #48]	; (8006ba0 <vPortEnterCritical+0x58>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d10f      	bne.n	8006b94 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b74:	4b0b      	ldr	r3, [pc, #44]	; (8006ba4 <vPortEnterCritical+0x5c>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <vPortEnterCritical+0x4c>
        __asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	603b      	str	r3, [r7, #0]
    }
 8006b90:	bf00      	nop
 8006b92:	e7fe      	b.n	8006b92 <vPortEnterCritical+0x4a>
    }
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	2000001c 	.word	0x2000001c
 8006ba4:	e000ed04 	.word	0xe000ed04

08006ba8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006bae:	4b12      	ldr	r3, [pc, #72]	; (8006bf8 <vPortExitCritical+0x50>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10a      	bne.n	8006bcc <vPortExitCritical+0x24>
        __asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	607b      	str	r3, [r7, #4]
    }
 8006bc8:	bf00      	nop
 8006bca:	e7fe      	b.n	8006bca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006bcc:	4b0a      	ldr	r3, [pc, #40]	; (8006bf8 <vPortExitCritical+0x50>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	4a09      	ldr	r2, [pc, #36]	; (8006bf8 <vPortExitCritical+0x50>)
 8006bd4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006bd6:	4b08      	ldr	r3, [pc, #32]	; (8006bf8 <vPortExitCritical+0x50>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d105      	bne.n	8006bea <vPortExitCritical+0x42>
 8006bde:	2300      	movs	r3, #0
 8006be0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	f383 8811 	msr	BASEPRI, r3
    }
 8006be8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006bea:	bf00      	nop
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	2000001c 	.word	0x2000001c
 8006bfc:	00000000 	.word	0x00000000

08006c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006c00:	f3ef 8009 	mrs	r0, PSP
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	4b15      	ldr	r3, [pc, #84]	; (8006c60 <pxCurrentTCBConst>)
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	f01e 0f10 	tst.w	lr, #16
 8006c10:	bf08      	it	eq
 8006c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1a:	6010      	str	r0, [r2, #0]
 8006c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c24:	f380 8811 	msr	BASEPRI, r0
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f7fe fd48 	bl	80056c4 <vTaskSwitchContext>
 8006c34:	f04f 0000 	mov.w	r0, #0
 8006c38:	f380 8811 	msr	BASEPRI, r0
 8006c3c:	bc09      	pop	{r0, r3}
 8006c3e:	6819      	ldr	r1, [r3, #0]
 8006c40:	6808      	ldr	r0, [r1, #0]
 8006c42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c46:	f01e 0f10 	tst.w	lr, #16
 8006c4a:	bf08      	it	eq
 8006c4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c50:	f380 8809 	msr	PSP, r0
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	f3af 8000 	nop.w

08006c60 <pxCurrentTCBConst>:
 8006c60:	20000904 	.word	0x20000904
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006c64:	bf00      	nop
 8006c66:	bf00      	nop

08006c68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
        __asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	607b      	str	r3, [r7, #4]
    }
 8006c80:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006c82:	f7fe fc67 	bl	8005554 <xTaskIncrementTick>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c8c:	4b06      	ldr	r3, [pc, #24]	; (8006ca8 <SysTick_Handler+0x40>)
 8006c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c92:	601a      	str	r2, [r3, #0]
 8006c94:	2300      	movs	r3, #0
 8006c96:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	f383 8811 	msr	BASEPRI, r3
    }
 8006c9e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8006ca0:	bf00      	nop
 8006ca2:	3708      	adds	r7, #8
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	e000ed04 	.word	0xe000ed04

08006cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006cac:	b480      	push	{r7}
 8006cae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006cb0:	4b0b      	ldr	r3, [pc, #44]	; (8006ce0 <vPortSetupTimerInterrupt+0x34>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006cb6:	4b0b      	ldr	r3, [pc, #44]	; (8006ce4 <vPortSetupTimerInterrupt+0x38>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006cbc:	4b0a      	ldr	r3, [pc, #40]	; (8006ce8 <vPortSetupTimerInterrupt+0x3c>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a0a      	ldr	r2, [pc, #40]	; (8006cec <vPortSetupTimerInterrupt+0x40>)
 8006cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc6:	099b      	lsrs	r3, r3, #6
 8006cc8:	4a09      	ldr	r2, [pc, #36]	; (8006cf0 <vPortSetupTimerInterrupt+0x44>)
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006cce:	4b04      	ldr	r3, [pc, #16]	; (8006ce0 <vPortSetupTimerInterrupt+0x34>)
 8006cd0:	2207      	movs	r2, #7
 8006cd2:	601a      	str	r2, [r3, #0]
}
 8006cd4:	bf00      	nop
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	e000e010 	.word	0xe000e010
 8006ce4:	e000e018 	.word	0xe000e018
 8006ce8:	2000000c 	.word	0x2000000c
 8006cec:	10624dd3 	.word	0x10624dd3
 8006cf0:	e000e014 	.word	0xe000e014

08006cf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006cf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d04 <vPortEnableVFP+0x10>
 8006cf8:	6801      	ldr	r1, [r0, #0]
 8006cfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006cfe:	6001      	str	r1, [r0, #0]
 8006d00:	4770      	bx	lr
 8006d02:	0000      	.short	0x0000
 8006d04:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop

08006d0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006d12:	f3ef 8305 	mrs	r3, IPSR
 8006d16:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2b0f      	cmp	r3, #15
 8006d1c:	d914      	bls.n	8006d48 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d1e:	4a17      	ldr	r2, [pc, #92]	; (8006d7c <vPortValidateInterruptPriority+0x70>)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4413      	add	r3, r2
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d28:	4b15      	ldr	r3, [pc, #84]	; (8006d80 <vPortValidateInterruptPriority+0x74>)
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	7afa      	ldrb	r2, [r7, #11]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d20a      	bcs.n	8006d48 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8006d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	607b      	str	r3, [r7, #4]
    }
 8006d44:	bf00      	nop
 8006d46:	e7fe      	b.n	8006d46 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d48:	4b0e      	ldr	r3, [pc, #56]	; (8006d84 <vPortValidateInterruptPriority+0x78>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d50:	4b0d      	ldr	r3, [pc, #52]	; (8006d88 <vPortValidateInterruptPriority+0x7c>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d90a      	bls.n	8006d6e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5c:	f383 8811 	msr	BASEPRI, r3
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	603b      	str	r3, [r7, #0]
    }
 8006d6a:	bf00      	nop
 8006d6c:	e7fe      	b.n	8006d6c <vPortValidateInterruptPriority+0x60>
    }
 8006d6e:	bf00      	nop
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	e000e3f0 	.word	0xe000e3f0
 8006d80:	20000a6c 	.word	0x20000a6c
 8006d84:	e000ed0c 	.word	0xe000ed0c
 8006d88:	20000a70 	.word	0x20000a70

08006d8c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08a      	sub	sp, #40	; 0x28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006d94:	2300      	movs	r3, #0
 8006d96:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006d98:	f7fe fb22 	bl	80053e0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006d9c:	4b65      	ldr	r3, [pc, #404]	; (8006f34 <pvPortMalloc+0x1a8>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006da4:	f000 f934 	bl	8007010 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006da8:	4b63      	ldr	r3, [pc, #396]	; (8006f38 <pvPortMalloc+0x1ac>)
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4013      	ands	r3, r2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f040 80a7 	bne.w	8006f04 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d02d      	beq.n	8006e18 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8006dbc:	2208      	movs	r2, #8
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d227      	bcs.n	8006e18 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8006dc8:	2208      	movs	r2, #8
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4413      	add	r3, r2
 8006dce:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f003 0307 	and.w	r3, r3, #7
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d021      	beq.n	8006e1e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f023 0307 	bic.w	r3, r3, #7
 8006de0:	3308      	adds	r3, #8
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d214      	bcs.n	8006e12 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f023 0307 	bic.w	r3, r3, #7
 8006dee:	3308      	adds	r3, #8
 8006df0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f003 0307 	and.w	r3, r3, #7
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d010      	beq.n	8006e1e <pvPortMalloc+0x92>
        __asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	617b      	str	r3, [r7, #20]
    }
 8006e0e:	bf00      	nop
 8006e10:	e7fe      	b.n	8006e10 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8006e12:	2300      	movs	r3, #0
 8006e14:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e16:	e002      	b.n	8006e1e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	607b      	str	r3, [r7, #4]
 8006e1c:	e000      	b.n	8006e20 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e1e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d06e      	beq.n	8006f04 <pvPortMalloc+0x178>
 8006e26:	4b45      	ldr	r3, [pc, #276]	; (8006f3c <pvPortMalloc+0x1b0>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d869      	bhi.n	8006f04 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006e30:	4b43      	ldr	r3, [pc, #268]	; (8006f40 <pvPortMalloc+0x1b4>)
 8006e32:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006e34:	4b42      	ldr	r3, [pc, #264]	; (8006f40 <pvPortMalloc+0x1b4>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e3a:	e004      	b.n	8006e46 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d903      	bls.n	8006e58 <pvPortMalloc+0xcc>
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1f1      	bne.n	8006e3c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006e58:	4b36      	ldr	r3, [pc, #216]	; (8006f34 <pvPortMalloc+0x1a8>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d050      	beq.n	8006f04 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2208      	movs	r2, #8
 8006e68:	4413      	add	r3, r2
 8006e6a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	1ad2      	subs	r2, r2, r3
 8006e7c:	2308      	movs	r3, #8
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d91f      	bls.n	8006ec4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4413      	add	r3, r2
 8006e8a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	f003 0307 	and.w	r3, r3, #7
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <pvPortMalloc+0x120>
        __asm volatile
 8006e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	613b      	str	r3, [r7, #16]
    }
 8006ea8:	bf00      	nop
 8006eaa:	e7fe      	b.n	8006eaa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	1ad2      	subs	r2, r2, r3
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ebe:	69b8      	ldr	r0, [r7, #24]
 8006ec0:	f000 f908 	bl	80070d4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ec4:	4b1d      	ldr	r3, [pc, #116]	; (8006f3c <pvPortMalloc+0x1b0>)
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	4a1b      	ldr	r2, [pc, #108]	; (8006f3c <pvPortMalloc+0x1b0>)
 8006ed0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ed2:	4b1a      	ldr	r3, [pc, #104]	; (8006f3c <pvPortMalloc+0x1b0>)
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	4b1b      	ldr	r3, [pc, #108]	; (8006f44 <pvPortMalloc+0x1b8>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d203      	bcs.n	8006ee6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ede:	4b17      	ldr	r3, [pc, #92]	; (8006f3c <pvPortMalloc+0x1b0>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a18      	ldr	r2, [pc, #96]	; (8006f44 <pvPortMalloc+0x1b8>)
 8006ee4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	4b13      	ldr	r3, [pc, #76]	; (8006f38 <pvPortMalloc+0x1ac>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006efa:	4b13      	ldr	r3, [pc, #76]	; (8006f48 <pvPortMalloc+0x1bc>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	3301      	adds	r3, #1
 8006f00:	4a11      	ldr	r2, [pc, #68]	; (8006f48 <pvPortMalloc+0x1bc>)
 8006f02:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006f04:	f7fe fa7a 	bl	80053fc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	f003 0307 	and.w	r3, r3, #7
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00a      	beq.n	8006f28 <pvPortMalloc+0x19c>
        __asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	60fb      	str	r3, [r7, #12]
    }
 8006f24:	bf00      	nop
 8006f26:	e7fe      	b.n	8006f26 <pvPortMalloc+0x19a>
    return pvReturn;
 8006f28:	69fb      	ldr	r3, [r7, #28]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3728      	adds	r7, #40	; 0x28
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	2001367c 	.word	0x2001367c
 8006f38:	20013690 	.word	0x20013690
 8006f3c:	20013680 	.word	0x20013680
 8006f40:	20013674 	.word	0x20013674
 8006f44:	20013684 	.word	0x20013684
 8006f48:	20013688 	.word	0x20013688

08006f4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b086      	sub	sp, #24
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d04d      	beq.n	8006ffa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006f5e:	2308      	movs	r3, #8
 8006f60:	425b      	negs	r3, r3
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	4413      	add	r3, r2
 8006f66:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	4b24      	ldr	r3, [pc, #144]	; (8007004 <vPortFree+0xb8>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4013      	ands	r3, r2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10a      	bne.n	8006f90 <vPortFree+0x44>
        __asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	60fb      	str	r3, [r7, #12]
    }
 8006f8c:	bf00      	nop
 8006f8e:	e7fe      	b.n	8006f8e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00a      	beq.n	8006fae <vPortFree+0x62>
        __asm volatile
 8006f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9c:	f383 8811 	msr	BASEPRI, r3
 8006fa0:	f3bf 8f6f 	isb	sy
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	60bb      	str	r3, [r7, #8]
    }
 8006faa:	bf00      	nop
 8006fac:	e7fe      	b.n	8006fac <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	4b14      	ldr	r3, [pc, #80]	; (8007004 <vPortFree+0xb8>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d01e      	beq.n	8006ffa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d11a      	bne.n	8006ffa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	685a      	ldr	r2, [r3, #4]
 8006fc8:	4b0e      	ldr	r3, [pc, #56]	; (8007004 <vPortFree+0xb8>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	43db      	mvns	r3, r3
 8006fce:	401a      	ands	r2, r3
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8006fd4:	f7fe fa04 	bl	80053e0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	4b0a      	ldr	r3, [pc, #40]	; (8007008 <vPortFree+0xbc>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	4a09      	ldr	r2, [pc, #36]	; (8007008 <vPortFree+0xbc>)
 8006fe4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fe6:	6938      	ldr	r0, [r7, #16]
 8006fe8:	f000 f874 	bl	80070d4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006fec:	4b07      	ldr	r3, [pc, #28]	; (800700c <vPortFree+0xc0>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	4a06      	ldr	r2, [pc, #24]	; (800700c <vPortFree+0xc0>)
 8006ff4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006ff6:	f7fe fa01 	bl	80053fc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006ffa:	bf00      	nop
 8006ffc:	3718      	adds	r7, #24
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	20013690 	.word	0x20013690
 8007008:	20013680 	.word	0x20013680
 800700c:	2001368c 	.word	0x2001368c

08007010 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007016:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800701a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800701c:	4b27      	ldr	r3, [pc, #156]	; (80070bc <prvHeapInit+0xac>)
 800701e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00c      	beq.n	8007044 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	3307      	adds	r3, #7
 800702e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 0307 	bic.w	r3, r3, #7
 8007036:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	4a1f      	ldr	r2, [pc, #124]	; (80070bc <prvHeapInit+0xac>)
 8007040:	4413      	add	r3, r2
 8007042:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007048:	4a1d      	ldr	r2, [pc, #116]	; (80070c0 <prvHeapInit+0xb0>)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800704e:	4b1c      	ldr	r3, [pc, #112]	; (80070c0 <prvHeapInit+0xb0>)
 8007050:	2200      	movs	r2, #0
 8007052:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	4413      	add	r3, r2
 800705a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800705c:	2208      	movs	r2, #8
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	1a9b      	subs	r3, r3, r2
 8007062:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f023 0307 	bic.w	r3, r3, #7
 800706a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	4a15      	ldr	r2, [pc, #84]	; (80070c4 <prvHeapInit+0xb4>)
 8007070:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007072:	4b14      	ldr	r3, [pc, #80]	; (80070c4 <prvHeapInit+0xb4>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2200      	movs	r2, #0
 8007078:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800707a:	4b12      	ldr	r3, [pc, #72]	; (80070c4 <prvHeapInit+0xb4>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2200      	movs	r2, #0
 8007080:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	1ad2      	subs	r2, r2, r3
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007090:	4b0c      	ldr	r3, [pc, #48]	; (80070c4 <prvHeapInit+0xb4>)
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	4a0a      	ldr	r2, [pc, #40]	; (80070c8 <prvHeapInit+0xb8>)
 800709e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	4a09      	ldr	r2, [pc, #36]	; (80070cc <prvHeapInit+0xbc>)
 80070a6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070a8:	4b09      	ldr	r3, [pc, #36]	; (80070d0 <prvHeapInit+0xc0>)
 80070aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80070ae:	601a      	str	r2, [r3, #0]
}
 80070b0:	bf00      	nop
 80070b2:	3714      	adds	r7, #20
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	20000a74 	.word	0x20000a74
 80070c0:	20013674 	.word	0x20013674
 80070c4:	2001367c 	.word	0x2001367c
 80070c8:	20013684 	.word	0x20013684
 80070cc:	20013680 	.word	0x20013680
 80070d0:	20013690 	.word	0x20013690

080070d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070dc:	4b28      	ldr	r3, [pc, #160]	; (8007180 <prvInsertBlockIntoFreeList+0xac>)
 80070de:	60fb      	str	r3, [r7, #12]
 80070e0:	e002      	b.n	80070e8 <prvInsertBlockIntoFreeList+0x14>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	60fb      	str	r3, [r7, #12]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d8f7      	bhi.n	80070e2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	4413      	add	r3, r2
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	429a      	cmp	r2, r3
 8007102:	d108      	bne.n	8007116 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	441a      	add	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	441a      	add	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	429a      	cmp	r2, r3
 8007128:	d118      	bne.n	800715c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	4b15      	ldr	r3, [pc, #84]	; (8007184 <prvInsertBlockIntoFreeList+0xb0>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d00d      	beq.n	8007152 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685a      	ldr	r2, [r3, #4]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	441a      	add	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	e008      	b.n	8007164 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007152:	4b0c      	ldr	r3, [pc, #48]	; (8007184 <prvInsertBlockIntoFreeList+0xb0>)
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	601a      	str	r2, [r3, #0]
 800715a:	e003      	b.n	8007164 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	429a      	cmp	r2, r3
 800716a:	d002      	beq.n	8007172 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007172:	bf00      	nop
 8007174:	3714      	adds	r7, #20
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	20013674 	.word	0x20013674
 8007184:	2001367c 	.word	0x2001367c

08007188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	4603      	mov	r3, r0
 8007190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007196:	2b00      	cmp	r3, #0
 8007198:	db0b      	blt.n	80071b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800719a:	79fb      	ldrb	r3, [r7, #7]
 800719c:	f003 021f 	and.w	r2, r3, #31
 80071a0:	4907      	ldr	r1, [pc, #28]	; (80071c0 <__NVIC_EnableIRQ+0x38>)
 80071a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071a6:	095b      	lsrs	r3, r3, #5
 80071a8:	2001      	movs	r0, #1
 80071aa:	fa00 f202 	lsl.w	r2, r0, r2
 80071ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80071b2:	bf00      	nop
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	e000e100 	.word	0xe000e100

080071c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	4603      	mov	r3, r0
 80071cc:	6039      	str	r1, [r7, #0]
 80071ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	db0a      	blt.n	80071ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	490c      	ldr	r1, [pc, #48]	; (8007210 <__NVIC_SetPriority+0x4c>)
 80071de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071e2:	0112      	lsls	r2, r2, #4
 80071e4:	b2d2      	uxtb	r2, r2
 80071e6:	440b      	add	r3, r1
 80071e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80071ec:	e00a      	b.n	8007204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	4908      	ldr	r1, [pc, #32]	; (8007214 <__NVIC_SetPriority+0x50>)
 80071f4:	79fb      	ldrb	r3, [r7, #7]
 80071f6:	f003 030f 	and.w	r3, r3, #15
 80071fa:	3b04      	subs	r3, #4
 80071fc:	0112      	lsls	r2, r2, #4
 80071fe:	b2d2      	uxtb	r2, r2
 8007200:	440b      	add	r3, r1
 8007202:	761a      	strb	r2, [r3, #24]
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	e000e100 	.word	0xe000e100
 8007214:	e000ed00 	.word	0xe000ed00

08007218 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007228:	d10a      	bne.n	8007240 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800722a:	4b62      	ldr	r3, [pc, #392]	; (80073b4 <BasicTimer_Config+0x19c>)
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	4a61      	ldr	r2, [pc, #388]	; (80073b4 <BasicTimer_Config+0x19c>)
 8007230:	f043 0301 	orr.w	r3, r3, #1
 8007234:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	4a5f      	ldr	r2, [pc, #380]	; (80073b8 <BasicTimer_Config+0x1a0>)
 800723c:	6013      	str	r3, [r2, #0]
 800723e:	e02e      	b.n	800729e <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	4a5d      	ldr	r2, [pc, #372]	; (80073bc <BasicTimer_Config+0x1a4>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d10a      	bne.n	8007260 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800724a:	4b5a      	ldr	r3, [pc, #360]	; (80073b4 <BasicTimer_Config+0x19c>)
 800724c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724e:	4a59      	ldr	r2, [pc, #356]	; (80073b4 <BasicTimer_Config+0x19c>)
 8007250:	f043 0302 	orr.w	r3, r3, #2
 8007254:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	4a59      	ldr	r2, [pc, #356]	; (80073c0 <BasicTimer_Config+0x1a8>)
 800725c:	6013      	str	r3, [r2, #0]
 800725e:	e01e      	b.n	800729e <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	4a57      	ldr	r2, [pc, #348]	; (80073c4 <BasicTimer_Config+0x1ac>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d10a      	bne.n	8007280 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800726a:	4b52      	ldr	r3, [pc, #328]	; (80073b4 <BasicTimer_Config+0x19c>)
 800726c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726e:	4a51      	ldr	r2, [pc, #324]	; (80073b4 <BasicTimer_Config+0x19c>)
 8007270:	f043 0304 	orr.w	r3, r3, #4
 8007274:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	4a53      	ldr	r2, [pc, #332]	; (80073c8 <BasicTimer_Config+0x1b0>)
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	e00e      	b.n	800729e <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	4a51      	ldr	r2, [pc, #324]	; (80073cc <BasicTimer_Config+0x1b4>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d109      	bne.n	800729e <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800728a:	4b4a      	ldr	r3, [pc, #296]	; (80073b4 <BasicTimer_Config+0x19c>)
 800728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728e:	4a49      	ldr	r2, [pc, #292]	; (80073b4 <BasicTimer_Config+0x19c>)
 8007290:	f043 0308 	orr.w	r3, r3, #8
 8007294:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	4a4d      	ldr	r2, [pc, #308]	; (80073d0 <BasicTimer_Config+0x1b8>)
 800729c:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 800729e:	f001 feed 	bl	800907c <getConfigPLL>
 80072a2:	4603      	mov	r3, r0
 80072a4:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 80072a6:	f001 ff05 	bl	80090b4 <getClockAPB1>
 80072aa:	4603      	mov	r3, r0
 80072ac:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 80072ae:	7bbb      	ldrb	r3, [r7, #14]
 80072b0:	2b31      	cmp	r3, #49	; 0x31
 80072b2:	d903      	bls.n	80072bc <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	73fb      	strb	r3, [r7, #15]
 80072ba:	e000      	b.n	80072be <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 80072bc:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 80072be:	7bfb      	ldrb	r3, [r7, #15]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	8852      	ldrh	r2, [r2, #2]
 80072c4:	fb02 f303 	mul.w	r3, r2, r3
 80072c8:	1e5a      	subs	r2, r3, #1
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d112      	bne.n	80072fe <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	f022 0210 	bic.w	r2, r2, #16
 80072e6:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	3201      	adds	r2, #1
 80072f2:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	625a      	str	r2, [r3, #36]	; 0x24
 80072fc:	e018      	b.n	8007330 <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	f022 0210 	bic.w	r2, r2, #16
 800730c:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	f042 0210 	orr.w	r2, r2, #16
 800731c:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	6852      	ldr	r2, [r2, #4]
 800732e:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007330:	b672      	cpsid	i
}
 8007332:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800733c:	d103      	bne.n	8007346 <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 800733e:	201c      	movs	r0, #28
 8007340:	f7ff ff22 	bl	8007188 <__NVIC_EnableIRQ>
 8007344:	e019      	b.n	800737a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	4a1c      	ldr	r2, [pc, #112]	; (80073bc <BasicTimer_Config+0x1a4>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d103      	bne.n	8007358 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8007350:	201d      	movs	r0, #29
 8007352:	f7ff ff19 	bl	8007188 <__NVIC_EnableIRQ>
 8007356:	e010      	b.n	800737a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	4a19      	ldr	r2, [pc, #100]	; (80073c4 <BasicTimer_Config+0x1ac>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d103      	bne.n	800736a <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8007362:	201e      	movs	r0, #30
 8007364:	f7ff ff10 	bl	8007188 <__NVIC_EnableIRQ>
 8007368:	e007      	b.n	800737a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	4a17      	ldr	r2, [pc, #92]	; (80073cc <BasicTimer_Config+0x1b4>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d102      	bne.n	800737a <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8007374:	2032      	movs	r0, #50	; 0x32
 8007376:	f7ff ff07 	bl	8007188 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800737a:	b662      	cpsie	i
}
 800737c:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	7a1b      	ldrb	r3, [r3, #8]
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f8b5 	bl	80074f4 <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	f022 0201 	bic.w	r2, r2, #1
 8007398:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	f042 0201 	orr.w	r2, r2, #1
 80073a8:	601a      	str	r2, [r3, #0]
}
 80073aa:	bf00      	nop
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	40023800 	.word	0x40023800
 80073b8:	20013694 	.word	0x20013694
 80073bc:	40000400 	.word	0x40000400
 80073c0:	20013698 	.word	0x20013698
 80073c4:	40000800 	.word	0x40000800
 80073c8:	2001369c 	.word	0x2001369c
 80073cc:	40000c00 	.word	0x40000c00
 80073d0:	200136a0 	.word	0x200136a0

080073d4 <timer_Config_Init_Priority>:

//------------Funcion para configurar las interrupciones------------------
void timer_Config_Init_Priority(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t newPriority)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 80073e0:	b672      	cpsid	i
}
 80073e2:	bf00      	nop
	//Desactivamos las interupciones globales
	__disable_irq();
	//Matriculamos la interrupcion en el NVIC
	if(ptrBTimerHandler->ptrTIMx == TIM2)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ec:	d105      	bne.n	80073fa <timer_Config_Init_Priority+0x26>
	{
		NVIC_SetPriority(TIM2_IRQn, newPriority);
 80073ee:	78fb      	ldrb	r3, [r7, #3]
 80073f0:	4619      	mov	r1, r3
 80073f2:	201c      	movs	r0, #28
 80073f4:	f7ff fee6 	bl	80071c4 <__NVIC_SetPriority>
 80073f8:	e01f      	b.n	800743a <timer_Config_Init_Priority+0x66>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	4a12      	ldr	r2, [pc, #72]	; (8007448 <timer_Config_Init_Priority+0x74>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d105      	bne.n	8007410 <timer_Config_Init_Priority+0x3c>
	{
		NVIC_SetPriority(TIM3_IRQn, newPriority);
 8007404:	78fb      	ldrb	r3, [r7, #3]
 8007406:	4619      	mov	r1, r3
 8007408:	201d      	movs	r0, #29
 800740a:	f7ff fedb 	bl	80071c4 <__NVIC_SetPriority>
 800740e:	e014      	b.n	800743a <timer_Config_Init_Priority+0x66>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	4a0d      	ldr	r2, [pc, #52]	; (800744c <timer_Config_Init_Priority+0x78>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d105      	bne.n	8007426 <timer_Config_Init_Priority+0x52>
	{
		NVIC_SetPriority(TIM4_IRQn, newPriority);
 800741a:	78fb      	ldrb	r3, [r7, #3]
 800741c:	4619      	mov	r1, r3
 800741e:	201e      	movs	r0, #30
 8007420:	f7ff fed0 	bl	80071c4 <__NVIC_SetPriority>
 8007424:	e009      	b.n	800743a <timer_Config_Init_Priority+0x66>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	4a09      	ldr	r2, [pc, #36]	; (8007450 <timer_Config_Init_Priority+0x7c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d104      	bne.n	800743a <timer_Config_Init_Priority+0x66>
	{
		NVIC_SetPriority(TIM5_IRQn, newPriority);
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	4619      	mov	r1, r3
 8007434:	2032      	movs	r0, #50	; 0x32
 8007436:	f7ff fec5 	bl	80071c4 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 800743a:	b662      	cpsie	i
}
 800743c:	bf00      	nop
	}
	//Activamos las interupciones globales
	__enable_irq();
}
 800743e:	bf00      	nop
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	40000400 	.word	0x40000400
 800744c:	40000800 	.word	0x40000800
 8007450:	40000c00 	.word	0x40000c00

08007454 <BasicTimer2_Callback>:

//Definimos las funciones para cuando se genera una interrupcion del TIM2-3
__attribute__((weak)) void BasicTimer2_Callback(void)
{
 8007454:	b480      	push	{r7}
 8007456:	af00      	add	r7, sp, #0
	__NOP();
 8007458:	bf00      	nop
}
 800745a:	bf00      	nop
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <BasicTimer5_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 8007464:	b480      	push	{r7}
 8007466:	af00      	add	r7, sp, #0
	__NOP();
 8007468:	bf00      	nop
}
 800746a:	bf00      	nop
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 8007478:	4b05      	ldr	r3, [pc, #20]	; (8007490 <TIM2_IRQHandler+0x1c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	691a      	ldr	r2, [r3, #16]
 800747e:	4b04      	ldr	r3, [pc, #16]	; (8007490 <TIM2_IRQHandler+0x1c>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f022 0201 	bic.w	r2, r2, #1
 8007486:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 8007488:	f7ff ffe4 	bl	8007454 <BasicTimer2_Callback>

}
 800748c:	bf00      	nop
 800748e:	bd80      	pop	{r7, pc}
 8007490:	20013694 	.word	0x20013694

08007494 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 8007498:	4b05      	ldr	r3, [pc, #20]	; (80074b0 <TIM3_IRQHandler+0x1c>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	691a      	ldr	r2, [r3, #16]
 800749e:	4b04      	ldr	r3, [pc, #16]	; (80074b0 <TIM3_IRQHandler+0x1c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f022 0201 	bic.w	r2, r2, #1
 80074a6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 80074a8:	f7fb fb08 	bl	8002abc <BasicTimer3_Callback>

}
 80074ac:	bf00      	nop
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	20013698 	.word	0x20013698

080074b4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 80074b8:	4b05      	ldr	r3, [pc, #20]	; (80074d0 <TIM4_IRQHandler+0x1c>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	691a      	ldr	r2, [r3, #16]
 80074be:	4b04      	ldr	r3, [pc, #16]	; (80074d0 <TIM4_IRQHandler+0x1c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f022 0201 	bic.w	r2, r2, #1
 80074c6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 80074c8:	f7fb fb1c 	bl	8002b04 <BasicTimer4_Callback>

}
 80074cc:	bf00      	nop
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	2001369c 	.word	0x2001369c

080074d4 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 80074d8:	4b05      	ldr	r3, [pc, #20]	; (80074f0 <TIM5_IRQHandler+0x1c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	691a      	ldr	r2, [r3, #16]
 80074de:	4b04      	ldr	r3, [pc, #16]	; (80074f0 <TIM5_IRQHandler+0x1c>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 0201 	bic.w	r2, r2, #1
 80074e6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 80074e8:	f7ff ffbc 	bl	8007464 <BasicTimer5_Callback>

}
 80074ec:	bf00      	nop
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	200136a0 	.word	0x200136a0

080074f4 <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 8007500:	78fb      	ldrb	r3, [r7, #3]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d108      	bne.n	8007518 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	68da      	ldr	r2, [r3, #12]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f042 0201 	orr.w	r2, r2, #1
 8007514:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 8007516:	e007      	b.n	8007528 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	68da      	ldr	r2, [r3, #12]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f022 0201 	bic.w	r2, r2, #1
 8007526:	60da      	str	r2, [r3, #12]
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <updateFrequencyTimer>:


//Actualizamos la frecuencia del TIMER
void updateFrequencyTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint16_t newPer)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	807b      	strh	r3, [r7, #2]
	//Establecemos el nuevo valor del periodo en la configuracion del PWM
	ptrBTimerHandler->TIMx_Config.TIMX_period = newPer;
 8007540:	887a      	ldrh	r2, [r7, #2]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	605a      	str	r2, [r3, #4]
	//Reiniamos el contador
	ptrBTimerHandler->ptrTIMx->CNT = 0;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	625a      	str	r2, [r3, #36]	; 0x24
	/*Cargamos el valor del ARR el cual es e limite de incrementos del TIMER
	 */
	ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	6852      	ldr	r2, [r2, #4]
 8007556:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <timer_delay>:

//Funcion para realizar un delay con un timer
void timer_delay(BasicTimer_Handler_t *ptrBTimerHandler,uint16_t *countingTimer, uint16_t maxCountinegTimer)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	4613      	mov	r3, r2
 8007570:	80fb      	strh	r3, [r7, #6]
	//Aseguramos que el valor de las cuestas se reinicio
	*countingTimer = 0;
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2200      	movs	r2, #0
 8007576:	801a      	strh	r2, [r3, #0]
	//Activamos la interrupcion del Timer
	statusiInterruptionTimer(ptrBTimerHandler, SET);
 8007578:	2101      	movs	r1, #1
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f7ff ffba 	bl	80074f4 <statusiInterruptionTimer>
	//El programa se queda aqui hasta que se cumple la condiccion
	while(*countingTimer<maxCountinegTimer)
 8007580:	e000      	b.n	8007584 <timer_delay+0x20>
	{
		__NOP();
 8007582:	bf00      	nop
	while(*countingTimer<maxCountinegTimer)
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	881b      	ldrh	r3, [r3, #0]
 8007588:	88fa      	ldrh	r2, [r7, #6]
 800758a:	429a      	cmp	r2, r3
 800758c:	d8f9      	bhi.n	8007582 <timer_delay+0x1e>
	}
	//Desactivamos la interrupcion del Timer
	statusiInterruptionTimer(ptrBTimerHandler, RESET);
 800758e:	2100      	movs	r1, #0
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f7ff ffaf 	bl	80074f4 <statusiInterruptionTimer>
}
 8007596:	bf00      	nop
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
	...

080075a0 <__NVIC_EnableIRQ>:
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	4603      	mov	r3, r0
 80075a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	db0b      	blt.n	80075ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	f003 021f 	and.w	r2, r3, #31
 80075b8:	4907      	ldr	r1, [pc, #28]	; (80075d8 <__NVIC_EnableIRQ+0x38>)
 80075ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075be:	095b      	lsrs	r3, r3, #5
 80075c0:	2001      	movs	r0, #1
 80075c2:	fa00 f202 	lsl.w	r2, r0, r2
 80075c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80075ca:	bf00      	nop
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	e000e100 	.word	0xe000e100

080075dc <__NVIC_SetPriority>:
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	4603      	mov	r3, r0
 80075e4:	6039      	str	r1, [r7, #0]
 80075e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	db0a      	blt.n	8007606 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	490c      	ldr	r1, [pc, #48]	; (8007628 <__NVIC_SetPriority+0x4c>)
 80075f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075fa:	0112      	lsls	r2, r2, #4
 80075fc:	b2d2      	uxtb	r2, r2
 80075fe:	440b      	add	r3, r1
 8007600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007604:	e00a      	b.n	800761c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	b2da      	uxtb	r2, r3
 800760a:	4908      	ldr	r1, [pc, #32]	; (800762c <__NVIC_SetPriority+0x50>)
 800760c:	79fb      	ldrb	r3, [r7, #7]
 800760e:	f003 030f 	and.w	r3, r3, #15
 8007612:	3b04      	subs	r3, #4
 8007614:	0112      	lsls	r2, r2, #4
 8007616:	b2d2      	uxtb	r2, r2
 8007618:	440b      	add	r3, r1
 800761a:	761a      	strb	r2, [r3, #24]
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	e000e100 	.word	0xe000e100
 800762c:	e000ed00 	.word	0xe000ed00

08007630 <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af02      	add	r7, sp, #8
 8007636:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6818      	ldr	r0, [r3, #0]
 800763c:	2300      	movs	r3, #0
 800763e:	9301      	str	r3, [sp, #4]
 8007640:	2300      	movs	r3, #0
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	2301      	movs	r3, #1
 8007646:	2200      	movs	r2, #0
 8007648:	2100      	movs	r1, #0
 800764a:	f001 f903 	bl	8008854 <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4618      	mov	r0, r3
 8007654:	f001 f920 	bl	8008898 <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8007658:	4b97      	ldr	r3, [pc, #604]	; (80078b8 <extInt_Config+0x288>)
 800765a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800765c:	4a96      	ldr	r2, [pc, #600]	; (80078b8 <extInt_Config+0x288>)
 800765e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007662:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	2b0f      	cmp	r3, #15
 800766c:	f200 85cf 	bhi.w	800820e <extInt_Config+0xbde>
 8007670:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <extInt_Config+0x48>)
 8007672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007676:	bf00      	nop
 8007678:	080076b9 	.word	0x080076b9
 800767c:	0800776f 	.word	0x0800776f
 8007680:	08007825 	.word	0x08007825
 8007684:	080078fb 	.word	0x080078fb
 8007688:	080079b1 	.word	0x080079b1
 800768c:	08007a5f 	.word	0x08007a5f
 8007690:	08007b25 	.word	0x08007b25
 8007694:	08007bcd 	.word	0x08007bcd
 8007698:	08007c75 	.word	0x08007c75
 800769c:	08007d1d 	.word	0x08007d1d
 80076a0:	08007de3 	.word	0x08007de3
 80076a4:	08007e8b 	.word	0x08007e8b
 80076a8:	08007f33 	.word	0x08007f33
 80076ac:	08007ff9 	.word	0x08007ff9
 80076b0:	080080a1 	.word	0x080080a1
 80076b4:	08008149 	.word	0x08008149
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 80076b8:	4b80      	ldr	r3, [pc, #512]	; (80078bc <extInt_Config+0x28c>)
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	4a7f      	ldr	r2, [pc, #508]	; (80078bc <extInt_Config+0x28c>)
 80076be:	f023 030f 	bic.w	r3, r3, #15
 80076c2:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	4a7d      	ldr	r2, [pc, #500]	; (80078c0 <extInt_Config+0x290>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d105      	bne.n	80076dc <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 80076d0:	4b7a      	ldr	r3, [pc, #488]	; (80078bc <extInt_Config+0x28c>)
 80076d2:	4a7a      	ldr	r2, [pc, #488]	; (80078bc <extInt_Config+0x28c>)
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 80076d8:	f000 bd9b 	b.w	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	4a78      	ldr	r2, [pc, #480]	; (80078c4 <extInt_Config+0x294>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d107      	bne.n	80076f8 <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 80076e8:	4b74      	ldr	r3, [pc, #464]	; (80078bc <extInt_Config+0x28c>)
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	4a73      	ldr	r2, [pc, #460]	; (80078bc <extInt_Config+0x28c>)
 80076ee:	f043 0301 	orr.w	r3, r3, #1
 80076f2:	6093      	str	r3, [r2, #8]
		break;
 80076f4:	f000 bd8d 	b.w	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	4a72      	ldr	r2, [pc, #456]	; (80078c8 <extInt_Config+0x298>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d107      	bne.n	8007714 <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8007704:	4b6d      	ldr	r3, [pc, #436]	; (80078bc <extInt_Config+0x28c>)
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	4a6c      	ldr	r2, [pc, #432]	; (80078bc <extInt_Config+0x28c>)
 800770a:	f043 0302 	orr.w	r3, r3, #2
 800770e:	6093      	str	r3, [r2, #8]
		break;
 8007710:	f000 bd7f 	b.w	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	4a6c      	ldr	r2, [pc, #432]	; (80078cc <extInt_Config+0x29c>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d107      	bne.n	8007730 <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8007720:	4b66      	ldr	r3, [pc, #408]	; (80078bc <extInt_Config+0x28c>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	4a65      	ldr	r2, [pc, #404]	; (80078bc <extInt_Config+0x28c>)
 8007726:	f043 0303 	orr.w	r3, r3, #3
 800772a:	6093      	str	r3, [r2, #8]
		break;
 800772c:	f000 bd71 	b.w	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	4a66      	ldr	r2, [pc, #408]	; (80078d0 <extInt_Config+0x2a0>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d107      	bne.n	800774c <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 800773c:	4b5f      	ldr	r3, [pc, #380]	; (80078bc <extInt_Config+0x28c>)
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	4a5e      	ldr	r2, [pc, #376]	; (80078bc <extInt_Config+0x28c>)
 8007742:	f043 0304 	orr.w	r3, r3, #4
 8007746:	6093      	str	r3, [r2, #8]
		break;
 8007748:	f000 bd63 	b.w	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	4a60      	ldr	r2, [pc, #384]	; (80078d4 <extInt_Config+0x2a4>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d107      	bne.n	8007768 <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8007758:	4b58      	ldr	r3, [pc, #352]	; (80078bc <extInt_Config+0x28c>)
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	4a57      	ldr	r2, [pc, #348]	; (80078bc <extInt_Config+0x28c>)
 800775e:	f043 0307 	orr.w	r3, r3, #7
 8007762:	6093      	str	r3, [r2, #8]
		break;
 8007764:	f000 bd55 	b.w	8008212 <extInt_Config+0xbe2>
			__NOP();
 8007768:	bf00      	nop
		break;
 800776a:	f000 bd52 	b.w	8008212 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 800776e:	4b53      	ldr	r3, [pc, #332]	; (80078bc <extInt_Config+0x28c>)
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	4a52      	ldr	r2, [pc, #328]	; (80078bc <extInt_Config+0x28c>)
 8007774:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007778:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	4a4f      	ldr	r2, [pc, #316]	; (80078c0 <extInt_Config+0x290>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d105      	bne.n	8007792 <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8007786:	4b4d      	ldr	r3, [pc, #308]	; (80078bc <extInt_Config+0x28c>)
 8007788:	4a4c      	ldr	r2, [pc, #304]	; (80078bc <extInt_Config+0x28c>)
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 800778e:	f000 bd40 	b.w	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	4a4a      	ldr	r2, [pc, #296]	; (80078c4 <extInt_Config+0x294>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d107      	bne.n	80077ae <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 800779e:	4b47      	ldr	r3, [pc, #284]	; (80078bc <extInt_Config+0x28c>)
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	4a46      	ldr	r2, [pc, #280]	; (80078bc <extInt_Config+0x28c>)
 80077a4:	f043 0310 	orr.w	r3, r3, #16
 80077a8:	6093      	str	r3, [r2, #8]
		break;
 80077aa:	f000 bd32 	b.w	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	4a44      	ldr	r2, [pc, #272]	; (80078c8 <extInt_Config+0x298>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d107      	bne.n	80077ca <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 80077ba:	4b40      	ldr	r3, [pc, #256]	; (80078bc <extInt_Config+0x28c>)
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	4a3f      	ldr	r2, [pc, #252]	; (80078bc <extInt_Config+0x28c>)
 80077c0:	f043 0320 	orr.w	r3, r3, #32
 80077c4:	6093      	str	r3, [r2, #8]
		break;
 80077c6:	f000 bd24 	b.w	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	4a3e      	ldr	r2, [pc, #248]	; (80078cc <extInt_Config+0x29c>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d107      	bne.n	80077e6 <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 80077d6:	4b39      	ldr	r3, [pc, #228]	; (80078bc <extInt_Config+0x28c>)
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	4a38      	ldr	r2, [pc, #224]	; (80078bc <extInt_Config+0x28c>)
 80077dc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80077e0:	6093      	str	r3, [r2, #8]
		break;
 80077e2:	f000 bd16 	b.w	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	4a38      	ldr	r2, [pc, #224]	; (80078d0 <extInt_Config+0x2a0>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d107      	bne.n	8007802 <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 80077f2:	4b32      	ldr	r3, [pc, #200]	; (80078bc <extInt_Config+0x28c>)
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	4a31      	ldr	r2, [pc, #196]	; (80078bc <extInt_Config+0x28c>)
 80077f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077fc:	6093      	str	r3, [r2, #8]
		break;
 80077fe:	f000 bd08 	b.w	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	4a32      	ldr	r2, [pc, #200]	; (80078d4 <extInt_Config+0x2a4>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d107      	bne.n	800781e <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 800780e:	4b2b      	ldr	r3, [pc, #172]	; (80078bc <extInt_Config+0x28c>)
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	4a2a      	ldr	r2, [pc, #168]	; (80078bc <extInt_Config+0x28c>)
 8007814:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8007818:	6093      	str	r3, [r2, #8]
		break;
 800781a:	f000 bcfa 	b.w	8008212 <extInt_Config+0xbe2>
			__NOP();
 800781e:	bf00      	nop
		break;
 8007820:	f000 bcf7 	b.w	8008212 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 8007824:	4b25      	ldr	r3, [pc, #148]	; (80078bc <extInt_Config+0x28c>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	4a24      	ldr	r2, [pc, #144]	; (80078bc <extInt_Config+0x28c>)
 800782a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800782e:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	4a22      	ldr	r2, [pc, #136]	; (80078c0 <extInt_Config+0x290>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d105      	bne.n	8007848 <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 800783c:	4b1f      	ldr	r3, [pc, #124]	; (80078bc <extInt_Config+0x28c>)
 800783e:	4a1f      	ldr	r2, [pc, #124]	; (80078bc <extInt_Config+0x28c>)
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8007844:	f000 bce5 	b.w	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	4a1d      	ldr	r2, [pc, #116]	; (80078c4 <extInt_Config+0x294>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d107      	bne.n	8007864 <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8007854:	4b19      	ldr	r3, [pc, #100]	; (80078bc <extInt_Config+0x28c>)
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	4a18      	ldr	r2, [pc, #96]	; (80078bc <extInt_Config+0x28c>)
 800785a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800785e:	6093      	str	r3, [r2, #8]
		break;
 8007860:	f000 bcd7 	b.w	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	4a17      	ldr	r2, [pc, #92]	; (80078c8 <extInt_Config+0x298>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d107      	bne.n	8007880 <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8007870:	4b12      	ldr	r3, [pc, #72]	; (80078bc <extInt_Config+0x28c>)
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	4a11      	ldr	r2, [pc, #68]	; (80078bc <extInt_Config+0x28c>)
 8007876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800787a:	6093      	str	r3, [r2, #8]
		break;
 800787c:	f000 bcc9 	b.w	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	4a11      	ldr	r2, [pc, #68]	; (80078cc <extInt_Config+0x29c>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d107      	bne.n	800789c <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 800788c:	4b0b      	ldr	r3, [pc, #44]	; (80078bc <extInt_Config+0x28c>)
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	4a0a      	ldr	r2, [pc, #40]	; (80078bc <extInt_Config+0x28c>)
 8007892:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007896:	6093      	str	r3, [r2, #8]
		break;
 8007898:	f000 bcbb 	b.w	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	4a0b      	ldr	r2, [pc, #44]	; (80078d0 <extInt_Config+0x2a0>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d117      	bne.n	80078d8 <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 80078a8:	4b04      	ldr	r3, [pc, #16]	; (80078bc <extInt_Config+0x28c>)
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	4a03      	ldr	r2, [pc, #12]	; (80078bc <extInt_Config+0x28c>)
 80078ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80078b2:	6093      	str	r3, [r2, #8]
		break;
 80078b4:	f000 bcad 	b.w	8008212 <extInt_Config+0xbe2>
 80078b8:	40023800 	.word	0x40023800
 80078bc:	40013800 	.word	0x40013800
 80078c0:	40020000 	.word	0x40020000
 80078c4:	40020400 	.word	0x40020400
 80078c8:	40020800 	.word	0x40020800
 80078cc:	40020c00 	.word	0x40020c00
 80078d0:	40021000 	.word	0x40021000
 80078d4:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	4a8a      	ldr	r2, [pc, #552]	; (8007b08 <extInt_Config+0x4d8>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d107      	bne.n	80078f4 <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 80078e4:	4b89      	ldr	r3, [pc, #548]	; (8007b0c <extInt_Config+0x4dc>)
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	4a88      	ldr	r2, [pc, #544]	; (8007b0c <extInt_Config+0x4dc>)
 80078ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80078ee:	6093      	str	r3, [r2, #8]
		break;
 80078f0:	f000 bc8f 	b.w	8008212 <extInt_Config+0xbe2>
			__NOP();
 80078f4:	bf00      	nop
		break;
 80078f6:	f000 bc8c 	b.w	8008212 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 80078fa:	4b84      	ldr	r3, [pc, #528]	; (8007b0c <extInt_Config+0x4dc>)
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	4a83      	ldr	r2, [pc, #524]	; (8007b0c <extInt_Config+0x4dc>)
 8007900:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007904:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	4a80      	ldr	r2, [pc, #512]	; (8007b10 <extInt_Config+0x4e0>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d105      	bne.n	800791e <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8007912:	4b7e      	ldr	r3, [pc, #504]	; (8007b0c <extInt_Config+0x4dc>)
 8007914:	4a7d      	ldr	r2, [pc, #500]	; (8007b0c <extInt_Config+0x4dc>)
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 800791a:	f000 bc7a 	b.w	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	4a7b      	ldr	r2, [pc, #492]	; (8007b14 <extInt_Config+0x4e4>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d107      	bne.n	800793a <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 800792a:	4b78      	ldr	r3, [pc, #480]	; (8007b0c <extInt_Config+0x4dc>)
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	4a77      	ldr	r2, [pc, #476]	; (8007b0c <extInt_Config+0x4dc>)
 8007930:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007934:	6093      	str	r3, [r2, #8]
		break;
 8007936:	f000 bc6c 	b.w	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	4a75      	ldr	r2, [pc, #468]	; (8007b18 <extInt_Config+0x4e8>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d107      	bne.n	8007956 <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8007946:	4b71      	ldr	r3, [pc, #452]	; (8007b0c <extInt_Config+0x4dc>)
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	4a70      	ldr	r2, [pc, #448]	; (8007b0c <extInt_Config+0x4dc>)
 800794c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007950:	6093      	str	r3, [r2, #8]
		break;
 8007952:	f000 bc5e 	b.w	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	4a6f      	ldr	r2, [pc, #444]	; (8007b1c <extInt_Config+0x4ec>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d107      	bne.n	8007972 <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8007962:	4b6a      	ldr	r3, [pc, #424]	; (8007b0c <extInt_Config+0x4dc>)
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	4a69      	ldr	r2, [pc, #420]	; (8007b0c <extInt_Config+0x4dc>)
 8007968:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800796c:	6093      	str	r3, [r2, #8]
		break;
 800796e:	f000 bc50 	b.w	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	4a69      	ldr	r2, [pc, #420]	; (8007b20 <extInt_Config+0x4f0>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d107      	bne.n	800798e <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 800797e:	4b63      	ldr	r3, [pc, #396]	; (8007b0c <extInt_Config+0x4dc>)
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	4a62      	ldr	r2, [pc, #392]	; (8007b0c <extInt_Config+0x4dc>)
 8007984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007988:	6093      	str	r3, [r2, #8]
		break;
 800798a:	f000 bc42 	b.w	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	4a5c      	ldr	r2, [pc, #368]	; (8007b08 <extInt_Config+0x4d8>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d107      	bne.n	80079aa <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 800799a:	4b5c      	ldr	r3, [pc, #368]	; (8007b0c <extInt_Config+0x4dc>)
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	4a5b      	ldr	r2, [pc, #364]	; (8007b0c <extInt_Config+0x4dc>)
 80079a0:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80079a4:	6093      	str	r3, [r2, #8]
		break;
 80079a6:	f000 bc34 	b.w	8008212 <extInt_Config+0xbe2>
			__NOP();
 80079aa:	bf00      	nop
		break;
 80079ac:	f000 bc31 	b.w	8008212 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 80079b0:	4b56      	ldr	r3, [pc, #344]	; (8007b0c <extInt_Config+0x4dc>)
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	4a55      	ldr	r2, [pc, #340]	; (8007b0c <extInt_Config+0x4dc>)
 80079b6:	f023 030f 	bic.w	r3, r3, #15
 80079ba:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	4a53      	ldr	r2, [pc, #332]	; (8007b10 <extInt_Config+0x4e0>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d105      	bne.n	80079d4 <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 80079c8:	4b50      	ldr	r3, [pc, #320]	; (8007b0c <extInt_Config+0x4dc>)
 80079ca:	4a50      	ldr	r2, [pc, #320]	; (8007b0c <extInt_Config+0x4dc>)
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80079d0:	f000 bc1f 	b.w	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	4a4e      	ldr	r2, [pc, #312]	; (8007b14 <extInt_Config+0x4e4>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d107      	bne.n	80079f0 <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 80079e0:	4b4a      	ldr	r3, [pc, #296]	; (8007b0c <extInt_Config+0x4dc>)
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	4a49      	ldr	r2, [pc, #292]	; (8007b0c <extInt_Config+0x4dc>)
 80079e6:	f043 0301 	orr.w	r3, r3, #1
 80079ea:	60d3      	str	r3, [r2, #12]
		break;
 80079ec:	f000 bc11 	b.w	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	4a48      	ldr	r2, [pc, #288]	; (8007b18 <extInt_Config+0x4e8>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d107      	bne.n	8007a0c <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 80079fc:	4b43      	ldr	r3, [pc, #268]	; (8007b0c <extInt_Config+0x4dc>)
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	4a42      	ldr	r2, [pc, #264]	; (8007b0c <extInt_Config+0x4dc>)
 8007a02:	f043 0302 	orr.w	r3, r3, #2
 8007a06:	60d3      	str	r3, [r2, #12]
		break;
 8007a08:	f000 bc03 	b.w	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	4a42      	ldr	r2, [pc, #264]	; (8007b1c <extInt_Config+0x4ec>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d106      	bne.n	8007a26 <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8007a18:	4b3c      	ldr	r3, [pc, #240]	; (8007b0c <extInt_Config+0x4dc>)
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	4a3b      	ldr	r2, [pc, #236]	; (8007b0c <extInt_Config+0x4dc>)
 8007a1e:	f043 0303 	orr.w	r3, r3, #3
 8007a22:	60d3      	str	r3, [r2, #12]
		break;
 8007a24:	e3f5      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	4a3c      	ldr	r2, [pc, #240]	; (8007b20 <extInt_Config+0x4f0>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d106      	bne.n	8007a40 <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8007a32:	4b36      	ldr	r3, [pc, #216]	; (8007b0c <extInt_Config+0x4dc>)
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	4a35      	ldr	r2, [pc, #212]	; (8007b0c <extInt_Config+0x4dc>)
 8007a38:	f043 0304 	orr.w	r3, r3, #4
 8007a3c:	60d3      	str	r3, [r2, #12]
		break;
 8007a3e:	e3e8      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	4a30      	ldr	r2, [pc, #192]	; (8007b08 <extInt_Config+0x4d8>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d106      	bne.n	8007a5a <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8007a4c:	4b2f      	ldr	r3, [pc, #188]	; (8007b0c <extInt_Config+0x4dc>)
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	4a2e      	ldr	r2, [pc, #184]	; (8007b0c <extInt_Config+0x4dc>)
 8007a52:	f043 0307 	orr.w	r3, r3, #7
 8007a56:	60d3      	str	r3, [r2, #12]
		break;
 8007a58:	e3db      	b.n	8008212 <extInt_Config+0xbe2>
			__NOP();
 8007a5a:	bf00      	nop
		break;
 8007a5c:	e3d9      	b.n	8008212 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 8007a5e:	4b2b      	ldr	r3, [pc, #172]	; (8007b0c <extInt_Config+0x4dc>)
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	4a2a      	ldr	r2, [pc, #168]	; (8007b0c <extInt_Config+0x4dc>)
 8007a64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a68:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	4a27      	ldr	r2, [pc, #156]	; (8007b10 <extInt_Config+0x4e0>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d104      	bne.n	8007a80 <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8007a76:	4b25      	ldr	r3, [pc, #148]	; (8007b0c <extInt_Config+0x4dc>)
 8007a78:	4a24      	ldr	r2, [pc, #144]	; (8007b0c <extInt_Config+0x4dc>)
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8007a7e:	e3c8      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	4a23      	ldr	r2, [pc, #140]	; (8007b14 <extInt_Config+0x4e4>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d106      	bne.n	8007a9a <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8007a8c:	4b1f      	ldr	r3, [pc, #124]	; (8007b0c <extInt_Config+0x4dc>)
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	4a1e      	ldr	r2, [pc, #120]	; (8007b0c <extInt_Config+0x4dc>)
 8007a92:	f043 0310 	orr.w	r3, r3, #16
 8007a96:	60d3      	str	r3, [r2, #12]
		break;
 8007a98:	e3bb      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	4a1d      	ldr	r2, [pc, #116]	; (8007b18 <extInt_Config+0x4e8>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d106      	bne.n	8007ab4 <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8007aa6:	4b19      	ldr	r3, [pc, #100]	; (8007b0c <extInt_Config+0x4dc>)
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	4a18      	ldr	r2, [pc, #96]	; (8007b0c <extInt_Config+0x4dc>)
 8007aac:	f043 0320 	orr.w	r3, r3, #32
 8007ab0:	60d3      	str	r3, [r2, #12]
		break;
 8007ab2:	e3ae      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	4a18      	ldr	r2, [pc, #96]	; (8007b1c <extInt_Config+0x4ec>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d106      	bne.n	8007ace <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8007ac0:	4b12      	ldr	r3, [pc, #72]	; (8007b0c <extInt_Config+0x4dc>)
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	4a11      	ldr	r2, [pc, #68]	; (8007b0c <extInt_Config+0x4dc>)
 8007ac6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8007aca:	60d3      	str	r3, [r2, #12]
		break;
 8007acc:	e3a1      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	4a12      	ldr	r2, [pc, #72]	; (8007b20 <extInt_Config+0x4f0>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d106      	bne.n	8007ae8 <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8007ada:	4b0c      	ldr	r3, [pc, #48]	; (8007b0c <extInt_Config+0x4dc>)
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	4a0b      	ldr	r2, [pc, #44]	; (8007b0c <extInt_Config+0x4dc>)
 8007ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ae4:	60d3      	str	r3, [r2, #12]
		break;
 8007ae6:	e394      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	4a06      	ldr	r2, [pc, #24]	; (8007b08 <extInt_Config+0x4d8>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d106      	bne.n	8007b02 <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8007af4:	4b05      	ldr	r3, [pc, #20]	; (8007b0c <extInt_Config+0x4dc>)
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	4a04      	ldr	r2, [pc, #16]	; (8007b0c <extInt_Config+0x4dc>)
 8007afa:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8007afe:	60d3      	str	r3, [r2, #12]
		break;
 8007b00:	e387      	b.n	8008212 <extInt_Config+0xbe2>
			__NOP();
 8007b02:	bf00      	nop
		break;
 8007b04:	e385      	b.n	8008212 <extInt_Config+0xbe2>
 8007b06:	bf00      	nop
 8007b08:	40021c00 	.word	0x40021c00
 8007b0c:	40013800 	.word	0x40013800
 8007b10:	40020000 	.word	0x40020000
 8007b14:	40020400 	.word	0x40020400
 8007b18:	40020800 	.word	0x40020800
 8007b1c:	40020c00 	.word	0x40020c00
 8007b20:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 8007b24:	4b86      	ldr	r3, [pc, #536]	; (8007d40 <extInt_Config+0x710>)
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	4a85      	ldr	r2, [pc, #532]	; (8007d40 <extInt_Config+0x710>)
 8007b2a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007b2e:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	4a83      	ldr	r2, [pc, #524]	; (8007d44 <extInt_Config+0x714>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d104      	bne.n	8007b46 <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8007b3c:	4b80      	ldr	r3, [pc, #512]	; (8007d40 <extInt_Config+0x710>)
 8007b3e:	4a80      	ldr	r2, [pc, #512]	; (8007d40 <extInt_Config+0x710>)
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8007b44:	e365      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	4a7e      	ldr	r2, [pc, #504]	; (8007d48 <extInt_Config+0x718>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d106      	bne.n	8007b60 <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8007b52:	4b7b      	ldr	r3, [pc, #492]	; (8007d40 <extInt_Config+0x710>)
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	4a7a      	ldr	r2, [pc, #488]	; (8007d40 <extInt_Config+0x710>)
 8007b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b5c:	60d3      	str	r3, [r2, #12]
		break;
 8007b5e:	e358      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	4a79      	ldr	r2, [pc, #484]	; (8007d4c <extInt_Config+0x71c>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d106      	bne.n	8007b7a <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8007b6c:	4b74      	ldr	r3, [pc, #464]	; (8007d40 <extInt_Config+0x710>)
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	4a73      	ldr	r2, [pc, #460]	; (8007d40 <extInt_Config+0x710>)
 8007b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b76:	60d3      	str	r3, [r2, #12]
		break;
 8007b78:	e34b      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	4a73      	ldr	r2, [pc, #460]	; (8007d50 <extInt_Config+0x720>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d106      	bne.n	8007b94 <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8007b86:	4b6e      	ldr	r3, [pc, #440]	; (8007d40 <extInt_Config+0x710>)
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	4a6d      	ldr	r2, [pc, #436]	; (8007d40 <extInt_Config+0x710>)
 8007b8c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b90:	60d3      	str	r3, [r2, #12]
		break;
 8007b92:	e33e      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	4a6e      	ldr	r2, [pc, #440]	; (8007d54 <extInt_Config+0x724>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d106      	bne.n	8007bae <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8007ba0:	4b67      	ldr	r3, [pc, #412]	; (8007d40 <extInt_Config+0x710>)
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	4a66      	ldr	r2, [pc, #408]	; (8007d40 <extInt_Config+0x710>)
 8007ba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007baa:	60d3      	str	r3, [r2, #12]
		break;
 8007bac:	e331      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	4a68      	ldr	r2, [pc, #416]	; (8007d58 <extInt_Config+0x728>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d106      	bne.n	8007bc8 <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8007bba:	4b61      	ldr	r3, [pc, #388]	; (8007d40 <extInt_Config+0x710>)
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	4a60      	ldr	r2, [pc, #384]	; (8007d40 <extInt_Config+0x710>)
 8007bc0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007bc4:	60d3      	str	r3, [r2, #12]
		break;
 8007bc6:	e324      	b.n	8008212 <extInt_Config+0xbe2>
			__NOP();
 8007bc8:	bf00      	nop
		break;
 8007bca:	e322      	b.n	8008212 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 8007bcc:	4b5c      	ldr	r3, [pc, #368]	; (8007d40 <extInt_Config+0x710>)
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	4a5b      	ldr	r2, [pc, #364]	; (8007d40 <extInt_Config+0x710>)
 8007bd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bd6:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	4a59      	ldr	r2, [pc, #356]	; (8007d44 <extInt_Config+0x714>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d104      	bne.n	8007bee <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8007be4:	4b56      	ldr	r3, [pc, #344]	; (8007d40 <extInt_Config+0x710>)
 8007be6:	4a56      	ldr	r2, [pc, #344]	; (8007d40 <extInt_Config+0x710>)
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8007bec:	e311      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	4a54      	ldr	r2, [pc, #336]	; (8007d48 <extInt_Config+0x718>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d106      	bne.n	8007c08 <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8007bfa:	4b51      	ldr	r3, [pc, #324]	; (8007d40 <extInt_Config+0x710>)
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	4a50      	ldr	r2, [pc, #320]	; (8007d40 <extInt_Config+0x710>)
 8007c00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c04:	60d3      	str	r3, [r2, #12]
		break;
 8007c06:	e304      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	4a4f      	ldr	r2, [pc, #316]	; (8007d4c <extInt_Config+0x71c>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d106      	bne.n	8007c22 <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8007c14:	4b4a      	ldr	r3, [pc, #296]	; (8007d40 <extInt_Config+0x710>)
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	4a49      	ldr	r2, [pc, #292]	; (8007d40 <extInt_Config+0x710>)
 8007c1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007c1e:	60d3      	str	r3, [r2, #12]
		break;
 8007c20:	e2f7      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	4a49      	ldr	r2, [pc, #292]	; (8007d50 <extInt_Config+0x720>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d106      	bne.n	8007c3c <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8007c2e:	4b44      	ldr	r3, [pc, #272]	; (8007d40 <extInt_Config+0x710>)
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	4a43      	ldr	r2, [pc, #268]	; (8007d40 <extInt_Config+0x710>)
 8007c34:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8007c38:	60d3      	str	r3, [r2, #12]
		break;
 8007c3a:	e2ea      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	4a44      	ldr	r2, [pc, #272]	; (8007d54 <extInt_Config+0x724>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d106      	bne.n	8007c56 <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8007c48:	4b3d      	ldr	r3, [pc, #244]	; (8007d40 <extInt_Config+0x710>)
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	4a3c      	ldr	r2, [pc, #240]	; (8007d40 <extInt_Config+0x710>)
 8007c4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c52:	60d3      	str	r3, [r2, #12]
		break;
 8007c54:	e2dd      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	4a3e      	ldr	r2, [pc, #248]	; (8007d58 <extInt_Config+0x728>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d106      	bne.n	8007c70 <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8007c62:	4b37      	ldr	r3, [pc, #220]	; (8007d40 <extInt_Config+0x710>)
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	4a36      	ldr	r2, [pc, #216]	; (8007d40 <extInt_Config+0x710>)
 8007c68:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8007c6c:	60d3      	str	r3, [r2, #12]
		break;
 8007c6e:	e2d0      	b.n	8008212 <extInt_Config+0xbe2>
			__NOP();
 8007c70:	bf00      	nop
		break;
 8007c72:	e2ce      	b.n	8008212 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 8007c74:	4b32      	ldr	r3, [pc, #200]	; (8007d40 <extInt_Config+0x710>)
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	4a31      	ldr	r2, [pc, #196]	; (8007d40 <extInt_Config+0x710>)
 8007c7a:	f023 030f 	bic.w	r3, r3, #15
 8007c7e:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	4a2f      	ldr	r2, [pc, #188]	; (8007d44 <extInt_Config+0x714>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d104      	bne.n	8007c96 <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8007c8c:	4b2c      	ldr	r3, [pc, #176]	; (8007d40 <extInt_Config+0x710>)
 8007c8e:	4a2c      	ldr	r2, [pc, #176]	; (8007d40 <extInt_Config+0x710>)
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8007c94:	e2bd      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	4a2a      	ldr	r2, [pc, #168]	; (8007d48 <extInt_Config+0x718>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d106      	bne.n	8007cb0 <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8007ca2:	4b27      	ldr	r3, [pc, #156]	; (8007d40 <extInt_Config+0x710>)
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	4a26      	ldr	r2, [pc, #152]	; (8007d40 <extInt_Config+0x710>)
 8007ca8:	f043 0301 	orr.w	r3, r3, #1
 8007cac:	6113      	str	r3, [r2, #16]
		break;
 8007cae:	e2b0      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	4a25      	ldr	r2, [pc, #148]	; (8007d4c <extInt_Config+0x71c>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d106      	bne.n	8007cca <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8007cbc:	4b20      	ldr	r3, [pc, #128]	; (8007d40 <extInt_Config+0x710>)
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	4a1f      	ldr	r2, [pc, #124]	; (8007d40 <extInt_Config+0x710>)
 8007cc2:	f043 0302 	orr.w	r3, r3, #2
 8007cc6:	6113      	str	r3, [r2, #16]
		break;
 8007cc8:	e2a3      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	4a1f      	ldr	r2, [pc, #124]	; (8007d50 <extInt_Config+0x720>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d106      	bne.n	8007ce4 <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8007cd6:	4b1a      	ldr	r3, [pc, #104]	; (8007d40 <extInt_Config+0x710>)
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	4a19      	ldr	r2, [pc, #100]	; (8007d40 <extInt_Config+0x710>)
 8007cdc:	f043 0303 	orr.w	r3, r3, #3
 8007ce0:	6113      	str	r3, [r2, #16]
		break;
 8007ce2:	e296      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	4a1a      	ldr	r2, [pc, #104]	; (8007d54 <extInt_Config+0x724>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d106      	bne.n	8007cfe <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8007cf0:	4b13      	ldr	r3, [pc, #76]	; (8007d40 <extInt_Config+0x710>)
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	4a12      	ldr	r2, [pc, #72]	; (8007d40 <extInt_Config+0x710>)
 8007cf6:	f043 0304 	orr.w	r3, r3, #4
 8007cfa:	6113      	str	r3, [r2, #16]
		break;
 8007cfc:	e289      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	4a14      	ldr	r2, [pc, #80]	; (8007d58 <extInt_Config+0x728>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d106      	bne.n	8007d18 <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8007d0a:	4b0d      	ldr	r3, [pc, #52]	; (8007d40 <extInt_Config+0x710>)
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	4a0c      	ldr	r2, [pc, #48]	; (8007d40 <extInt_Config+0x710>)
 8007d10:	f043 0307 	orr.w	r3, r3, #7
 8007d14:	6113      	str	r3, [r2, #16]
		break;
 8007d16:	e27c      	b.n	8008212 <extInt_Config+0xbe2>
			__NOP();
 8007d18:	bf00      	nop
		break;
 8007d1a:	e27a      	b.n	8008212 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 8007d1c:	4b08      	ldr	r3, [pc, #32]	; (8007d40 <extInt_Config+0x710>)
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	4a07      	ldr	r2, [pc, #28]	; (8007d40 <extInt_Config+0x710>)
 8007d22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d26:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	4a05      	ldr	r2, [pc, #20]	; (8007d44 <extInt_Config+0x714>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d113      	bne.n	8007d5c <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8007d34:	4b02      	ldr	r3, [pc, #8]	; (8007d40 <extInt_Config+0x710>)
 8007d36:	4a02      	ldr	r2, [pc, #8]	; (8007d40 <extInt_Config+0x710>)
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8007d3c:	e269      	b.n	8008212 <extInt_Config+0xbe2>
 8007d3e:	bf00      	nop
 8007d40:	40013800 	.word	0x40013800
 8007d44:	40020000 	.word	0x40020000
 8007d48:	40020400 	.word	0x40020400
 8007d4c:	40020800 	.word	0x40020800
 8007d50:	40020c00 	.word	0x40020c00
 8007d54:	40021000 	.word	0x40021000
 8007d58:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	4a83      	ldr	r2, [pc, #524]	; (8007f70 <extInt_Config+0x940>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d106      	bne.n	8007d76 <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8007d68:	4b82      	ldr	r3, [pc, #520]	; (8007f74 <extInt_Config+0x944>)
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	4a81      	ldr	r2, [pc, #516]	; (8007f74 <extInt_Config+0x944>)
 8007d6e:	f043 0310 	orr.w	r3, r3, #16
 8007d72:	6113      	str	r3, [r2, #16]
		break;
 8007d74:	e24d      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	4a7e      	ldr	r2, [pc, #504]	; (8007f78 <extInt_Config+0x948>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d106      	bne.n	8007d90 <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8007d82:	4b7c      	ldr	r3, [pc, #496]	; (8007f74 <extInt_Config+0x944>)
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	4a7b      	ldr	r2, [pc, #492]	; (8007f74 <extInt_Config+0x944>)
 8007d88:	f043 0320 	orr.w	r3, r3, #32
 8007d8c:	6113      	str	r3, [r2, #16]
		break;
 8007d8e:	e240      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	4a79      	ldr	r2, [pc, #484]	; (8007f7c <extInt_Config+0x94c>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d106      	bne.n	8007daa <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8007d9c:	4b75      	ldr	r3, [pc, #468]	; (8007f74 <extInt_Config+0x944>)
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	4a74      	ldr	r2, [pc, #464]	; (8007f74 <extInt_Config+0x944>)
 8007da2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8007da6:	6113      	str	r3, [r2, #16]
		break;
 8007da8:	e233      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	4a73      	ldr	r2, [pc, #460]	; (8007f80 <extInt_Config+0x950>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d106      	bne.n	8007dc4 <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8007db6:	4b6f      	ldr	r3, [pc, #444]	; (8007f74 <extInt_Config+0x944>)
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	4a6e      	ldr	r2, [pc, #440]	; (8007f74 <extInt_Config+0x944>)
 8007dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dc0:	6113      	str	r3, [r2, #16]
		break;
 8007dc2:	e226      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	4a6e      	ldr	r2, [pc, #440]	; (8007f84 <extInt_Config+0x954>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d106      	bne.n	8007dde <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8007dd0:	4b68      	ldr	r3, [pc, #416]	; (8007f74 <extInt_Config+0x944>)
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	4a67      	ldr	r2, [pc, #412]	; (8007f74 <extInt_Config+0x944>)
 8007dd6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8007dda:	6113      	str	r3, [r2, #16]
		break;
 8007ddc:	e219      	b.n	8008212 <extInt_Config+0xbe2>
			__NOP();
 8007dde:	bf00      	nop
		break;
 8007de0:	e217      	b.n	8008212 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 8007de2:	4b64      	ldr	r3, [pc, #400]	; (8007f74 <extInt_Config+0x944>)
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	4a63      	ldr	r2, [pc, #396]	; (8007f74 <extInt_Config+0x944>)
 8007de8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007dec:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	4a64      	ldr	r2, [pc, #400]	; (8007f88 <extInt_Config+0x958>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d104      	bne.n	8007e04 <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8007dfa:	4b5e      	ldr	r3, [pc, #376]	; (8007f74 <extInt_Config+0x944>)
 8007dfc:	4a5d      	ldr	r2, [pc, #372]	; (8007f74 <extInt_Config+0x944>)
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8007e02:	e206      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	4a59      	ldr	r2, [pc, #356]	; (8007f70 <extInt_Config+0x940>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d106      	bne.n	8007e1e <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8007e10:	4b58      	ldr	r3, [pc, #352]	; (8007f74 <extInt_Config+0x944>)
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	4a57      	ldr	r2, [pc, #348]	; (8007f74 <extInt_Config+0x944>)
 8007e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e1a:	6113      	str	r3, [r2, #16]
		break;
 8007e1c:	e1f9      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	4a54      	ldr	r2, [pc, #336]	; (8007f78 <extInt_Config+0x948>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d106      	bne.n	8007e38 <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8007e2a:	4b52      	ldr	r3, [pc, #328]	; (8007f74 <extInt_Config+0x944>)
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	4a51      	ldr	r2, [pc, #324]	; (8007f74 <extInt_Config+0x944>)
 8007e30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e34:	6113      	str	r3, [r2, #16]
		break;
 8007e36:	e1ec      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	4a4f      	ldr	r2, [pc, #316]	; (8007f7c <extInt_Config+0x94c>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d106      	bne.n	8007e52 <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8007e44:	4b4b      	ldr	r3, [pc, #300]	; (8007f74 <extInt_Config+0x944>)
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	4a4a      	ldr	r2, [pc, #296]	; (8007f74 <extInt_Config+0x944>)
 8007e4a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007e4e:	6113      	str	r3, [r2, #16]
		break;
 8007e50:	e1df      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	4a49      	ldr	r2, [pc, #292]	; (8007f80 <extInt_Config+0x950>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d106      	bne.n	8007e6c <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8007e5e:	4b45      	ldr	r3, [pc, #276]	; (8007f74 <extInt_Config+0x944>)
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	4a44      	ldr	r2, [pc, #272]	; (8007f74 <extInt_Config+0x944>)
 8007e64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e68:	6113      	str	r3, [r2, #16]
		break;
 8007e6a:	e1d2      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	4a44      	ldr	r2, [pc, #272]	; (8007f84 <extInt_Config+0x954>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d106      	bne.n	8007e86 <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8007e78:	4b3e      	ldr	r3, [pc, #248]	; (8007f74 <extInt_Config+0x944>)
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	4a3d      	ldr	r2, [pc, #244]	; (8007f74 <extInt_Config+0x944>)
 8007e7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007e82:	6113      	str	r3, [r2, #16]
		break;
 8007e84:	e1c5      	b.n	8008212 <extInt_Config+0xbe2>
			__NOP();
 8007e86:	bf00      	nop
		break;
 8007e88:	e1c3      	b.n	8008212 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 8007e8a:	4b3a      	ldr	r3, [pc, #232]	; (8007f74 <extInt_Config+0x944>)
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	4a39      	ldr	r2, [pc, #228]	; (8007f74 <extInt_Config+0x944>)
 8007e90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e94:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	4a3a      	ldr	r2, [pc, #232]	; (8007f88 <extInt_Config+0x958>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d104      	bne.n	8007eac <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8007ea2:	4b34      	ldr	r3, [pc, #208]	; (8007f74 <extInt_Config+0x944>)
 8007ea4:	4a33      	ldr	r2, [pc, #204]	; (8007f74 <extInt_Config+0x944>)
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8007eaa:	e1b2      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	4a2f      	ldr	r2, [pc, #188]	; (8007f70 <extInt_Config+0x940>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d106      	bne.n	8007ec6 <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8007eb8:	4b2e      	ldr	r3, [pc, #184]	; (8007f74 <extInt_Config+0x944>)
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	4a2d      	ldr	r2, [pc, #180]	; (8007f74 <extInt_Config+0x944>)
 8007ebe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007ec2:	6113      	str	r3, [r2, #16]
		break;
 8007ec4:	e1a5      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	4a2a      	ldr	r2, [pc, #168]	; (8007f78 <extInt_Config+0x948>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d106      	bne.n	8007ee0 <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8007ed2:	4b28      	ldr	r3, [pc, #160]	; (8007f74 <extInt_Config+0x944>)
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	4a27      	ldr	r2, [pc, #156]	; (8007f74 <extInt_Config+0x944>)
 8007ed8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007edc:	6113      	str	r3, [r2, #16]
		break;
 8007ede:	e198      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	4a25      	ldr	r2, [pc, #148]	; (8007f7c <extInt_Config+0x94c>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d106      	bne.n	8007efa <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8007eec:	4b21      	ldr	r3, [pc, #132]	; (8007f74 <extInt_Config+0x944>)
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	4a20      	ldr	r2, [pc, #128]	; (8007f74 <extInt_Config+0x944>)
 8007ef2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8007ef6:	6113      	str	r3, [r2, #16]
		break;
 8007ef8:	e18b      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	4a1f      	ldr	r2, [pc, #124]	; (8007f80 <extInt_Config+0x950>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d106      	bne.n	8007f14 <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8007f06:	4b1b      	ldr	r3, [pc, #108]	; (8007f74 <extInt_Config+0x944>)
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	4a1a      	ldr	r2, [pc, #104]	; (8007f74 <extInt_Config+0x944>)
 8007f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f10:	6113      	str	r3, [r2, #16]
		break;
 8007f12:	e17e      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	4a1a      	ldr	r2, [pc, #104]	; (8007f84 <extInt_Config+0x954>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d106      	bne.n	8007f2e <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8007f20:	4b14      	ldr	r3, [pc, #80]	; (8007f74 <extInt_Config+0x944>)
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	4a13      	ldr	r2, [pc, #76]	; (8007f74 <extInt_Config+0x944>)
 8007f26:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8007f2a:	6113      	str	r3, [r2, #16]
		break;
 8007f2c:	e171      	b.n	8008212 <extInt_Config+0xbe2>
			__NOP();
 8007f2e:	bf00      	nop
		break;
 8007f30:	e16f      	b.n	8008212 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 8007f32:	4b10      	ldr	r3, [pc, #64]	; (8007f74 <extInt_Config+0x944>)
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	4a0f      	ldr	r2, [pc, #60]	; (8007f74 <extInt_Config+0x944>)
 8007f38:	f023 030f 	bic.w	r3, r3, #15
 8007f3c:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	4a10      	ldr	r2, [pc, #64]	; (8007f88 <extInt_Config+0x958>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d104      	bne.n	8007f54 <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8007f4a:	4b0a      	ldr	r3, [pc, #40]	; (8007f74 <extInt_Config+0x944>)
 8007f4c:	4a09      	ldr	r2, [pc, #36]	; (8007f74 <extInt_Config+0x944>)
 8007f4e:	695b      	ldr	r3, [r3, #20]
 8007f50:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8007f52:	e15e      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	4a05      	ldr	r2, [pc, #20]	; (8007f70 <extInt_Config+0x940>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d115      	bne.n	8007f8c <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8007f60:	4b04      	ldr	r3, [pc, #16]	; (8007f74 <extInt_Config+0x944>)
 8007f62:	695b      	ldr	r3, [r3, #20]
 8007f64:	4a03      	ldr	r2, [pc, #12]	; (8007f74 <extInt_Config+0x944>)
 8007f66:	f043 0301 	orr.w	r3, r3, #1
 8007f6a:	6153      	str	r3, [r2, #20]
		break;
 8007f6c:	e151      	b.n	8008212 <extInt_Config+0xbe2>
 8007f6e:	bf00      	nop
 8007f70:	40020400 	.word	0x40020400
 8007f74:	40013800 	.word	0x40013800
 8007f78:	40020800 	.word	0x40020800
 8007f7c:	40020c00 	.word	0x40020c00
 8007f80:	40021000 	.word	0x40021000
 8007f84:	40021c00 	.word	0x40021c00
 8007f88:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	4a83      	ldr	r2, [pc, #524]	; (80081a0 <extInt_Config+0xb70>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d106      	bne.n	8007fa6 <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8007f98:	4b82      	ldr	r3, [pc, #520]	; (80081a4 <extInt_Config+0xb74>)
 8007f9a:	695b      	ldr	r3, [r3, #20]
 8007f9c:	4a81      	ldr	r2, [pc, #516]	; (80081a4 <extInt_Config+0xb74>)
 8007f9e:	f043 0302 	orr.w	r3, r3, #2
 8007fa2:	6153      	str	r3, [r2, #20]
		break;
 8007fa4:	e135      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	4a7e      	ldr	r2, [pc, #504]	; (80081a8 <extInt_Config+0xb78>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d106      	bne.n	8007fc0 <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8007fb2:	4b7c      	ldr	r3, [pc, #496]	; (80081a4 <extInt_Config+0xb74>)
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	4a7b      	ldr	r2, [pc, #492]	; (80081a4 <extInt_Config+0xb74>)
 8007fb8:	f043 0303 	orr.w	r3, r3, #3
 8007fbc:	6153      	str	r3, [r2, #20]
		break;
 8007fbe:	e128      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	4a79      	ldr	r2, [pc, #484]	; (80081ac <extInt_Config+0xb7c>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d106      	bne.n	8007fda <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8007fcc:	4b75      	ldr	r3, [pc, #468]	; (80081a4 <extInt_Config+0xb74>)
 8007fce:	695b      	ldr	r3, [r3, #20]
 8007fd0:	4a74      	ldr	r2, [pc, #464]	; (80081a4 <extInt_Config+0xb74>)
 8007fd2:	f043 0304 	orr.w	r3, r3, #4
 8007fd6:	6153      	str	r3, [r2, #20]
		break;
 8007fd8:	e11b      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	4a73      	ldr	r2, [pc, #460]	; (80081b0 <extInt_Config+0xb80>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d106      	bne.n	8007ff4 <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8007fe6:	4b6f      	ldr	r3, [pc, #444]	; (80081a4 <extInt_Config+0xb74>)
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	4a6e      	ldr	r2, [pc, #440]	; (80081a4 <extInt_Config+0xb74>)
 8007fec:	f043 0307 	orr.w	r3, r3, #7
 8007ff0:	6153      	str	r3, [r2, #20]
		break;
 8007ff2:	e10e      	b.n	8008212 <extInt_Config+0xbe2>
			__NOP();
 8007ff4:	bf00      	nop
		break;
 8007ff6:	e10c      	b.n	8008212 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 8007ff8:	4b6a      	ldr	r3, [pc, #424]	; (80081a4 <extInt_Config+0xb74>)
 8007ffa:	695b      	ldr	r3, [r3, #20]
 8007ffc:	4a69      	ldr	r2, [pc, #420]	; (80081a4 <extInt_Config+0xb74>)
 8007ffe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008002:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	4a6a      	ldr	r2, [pc, #424]	; (80081b4 <extInt_Config+0xb84>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d104      	bne.n	800801a <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8008010:	4b64      	ldr	r3, [pc, #400]	; (80081a4 <extInt_Config+0xb74>)
 8008012:	4a64      	ldr	r2, [pc, #400]	; (80081a4 <extInt_Config+0xb74>)
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8008018:	e0fb      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	4a65      	ldr	r2, [pc, #404]	; (80081b8 <extInt_Config+0xb88>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d106      	bne.n	8008034 <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8008026:	4b5f      	ldr	r3, [pc, #380]	; (80081a4 <extInt_Config+0xb74>)
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	4a5e      	ldr	r2, [pc, #376]	; (80081a4 <extInt_Config+0xb74>)
 800802c:	f043 0310 	orr.w	r3, r3, #16
 8008030:	6153      	str	r3, [r2, #20]
		break;
 8008032:	e0ee      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	4a59      	ldr	r2, [pc, #356]	; (80081a0 <extInt_Config+0xb70>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d106      	bne.n	800804e <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8008040:	4b58      	ldr	r3, [pc, #352]	; (80081a4 <extInt_Config+0xb74>)
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	4a57      	ldr	r2, [pc, #348]	; (80081a4 <extInt_Config+0xb74>)
 8008046:	f043 0320 	orr.w	r3, r3, #32
 800804a:	6153      	str	r3, [r2, #20]
		break;
 800804c:	e0e1      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	4a54      	ldr	r2, [pc, #336]	; (80081a8 <extInt_Config+0xb78>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d106      	bne.n	8008068 <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 800805a:	4b52      	ldr	r3, [pc, #328]	; (80081a4 <extInt_Config+0xb74>)
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	4a51      	ldr	r2, [pc, #324]	; (80081a4 <extInt_Config+0xb74>)
 8008060:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008064:	6153      	str	r3, [r2, #20]
		break;
 8008066:	e0d4      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	4a4f      	ldr	r2, [pc, #316]	; (80081ac <extInt_Config+0xb7c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d106      	bne.n	8008082 <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8008074:	4b4b      	ldr	r3, [pc, #300]	; (80081a4 <extInt_Config+0xb74>)
 8008076:	695b      	ldr	r3, [r3, #20]
 8008078:	4a4a      	ldr	r2, [pc, #296]	; (80081a4 <extInt_Config+0xb74>)
 800807a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800807e:	6153      	str	r3, [r2, #20]
		break;
 8008080:	e0c7      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	4a49      	ldr	r2, [pc, #292]	; (80081b0 <extInt_Config+0xb80>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d106      	bne.n	800809c <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 800808e:	4b45      	ldr	r3, [pc, #276]	; (80081a4 <extInt_Config+0xb74>)
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	4a44      	ldr	r2, [pc, #272]	; (80081a4 <extInt_Config+0xb74>)
 8008094:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8008098:	6153      	str	r3, [r2, #20]
		break;
 800809a:	e0ba      	b.n	8008212 <extInt_Config+0xbe2>
			__NOP();
 800809c:	bf00      	nop
		break;
 800809e:	e0b8      	b.n	8008212 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 80080a0:	4b40      	ldr	r3, [pc, #256]	; (80081a4 <extInt_Config+0xb74>)
 80080a2:	695b      	ldr	r3, [r3, #20]
 80080a4:	4a3f      	ldr	r2, [pc, #252]	; (80081a4 <extInt_Config+0xb74>)
 80080a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80080aa:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	4a40      	ldr	r2, [pc, #256]	; (80081b4 <extInt_Config+0xb84>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d104      	bne.n	80080c2 <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 80080b8:	4b3a      	ldr	r3, [pc, #232]	; (80081a4 <extInt_Config+0xb74>)
 80080ba:	4a3a      	ldr	r2, [pc, #232]	; (80081a4 <extInt_Config+0xb74>)
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 80080c0:	e0a7      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	4a3b      	ldr	r2, [pc, #236]	; (80081b8 <extInt_Config+0xb88>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d106      	bne.n	80080dc <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 80080ce:	4b35      	ldr	r3, [pc, #212]	; (80081a4 <extInt_Config+0xb74>)
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	4a34      	ldr	r2, [pc, #208]	; (80081a4 <extInt_Config+0xb74>)
 80080d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080d8:	6153      	str	r3, [r2, #20]
		break;
 80080da:	e09a      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	4a2f      	ldr	r2, [pc, #188]	; (80081a0 <extInt_Config+0xb70>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d106      	bne.n	80080f6 <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 80080e8:	4b2e      	ldr	r3, [pc, #184]	; (80081a4 <extInt_Config+0xb74>)
 80080ea:	695b      	ldr	r3, [r3, #20]
 80080ec:	4a2d      	ldr	r2, [pc, #180]	; (80081a4 <extInt_Config+0xb74>)
 80080ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80080f2:	6153      	str	r3, [r2, #20]
		break;
 80080f4:	e08d      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	4a2a      	ldr	r2, [pc, #168]	; (80081a8 <extInt_Config+0xb78>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d106      	bne.n	8008110 <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8008102:	4b28      	ldr	r3, [pc, #160]	; (80081a4 <extInt_Config+0xb74>)
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	4a27      	ldr	r2, [pc, #156]	; (80081a4 <extInt_Config+0xb74>)
 8008108:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800810c:	6153      	str	r3, [r2, #20]
		break;
 800810e:	e080      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	4a25      	ldr	r2, [pc, #148]	; (80081ac <extInt_Config+0xb7c>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d106      	bne.n	800812a <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 800811c:	4b21      	ldr	r3, [pc, #132]	; (80081a4 <extInt_Config+0xb74>)
 800811e:	695b      	ldr	r3, [r3, #20]
 8008120:	4a20      	ldr	r2, [pc, #128]	; (80081a4 <extInt_Config+0xb74>)
 8008122:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008126:	6153      	str	r3, [r2, #20]
		break;
 8008128:	e073      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	4a1f      	ldr	r2, [pc, #124]	; (80081b0 <extInt_Config+0xb80>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d106      	bne.n	8008144 <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8008136:	4b1b      	ldr	r3, [pc, #108]	; (80081a4 <extInt_Config+0xb74>)
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	4a1a      	ldr	r2, [pc, #104]	; (80081a4 <extInt_Config+0xb74>)
 800813c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008140:	6153      	str	r3, [r2, #20]
		break;
 8008142:	e066      	b.n	8008212 <extInt_Config+0xbe2>
			__NOP();
 8008144:	bf00      	nop
		break;
 8008146:	e064      	b.n	8008212 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 8008148:	4b16      	ldr	r3, [pc, #88]	; (80081a4 <extInt_Config+0xb74>)
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	4a15      	ldr	r2, [pc, #84]	; (80081a4 <extInt_Config+0xb74>)
 800814e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008152:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	4a16      	ldr	r2, [pc, #88]	; (80081b4 <extInt_Config+0xb84>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d104      	bne.n	800816a <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8008160:	4b10      	ldr	r3, [pc, #64]	; (80081a4 <extInt_Config+0xb74>)
 8008162:	4a10      	ldr	r2, [pc, #64]	; (80081a4 <extInt_Config+0xb74>)
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8008168:	e053      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	4a11      	ldr	r2, [pc, #68]	; (80081b8 <extInt_Config+0xb88>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d106      	bne.n	8008184 <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8008176:	4b0b      	ldr	r3, [pc, #44]	; (80081a4 <extInt_Config+0xb74>)
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	4a0a      	ldr	r2, [pc, #40]	; (80081a4 <extInt_Config+0xb74>)
 800817c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008180:	6153      	str	r3, [r2, #20]
		break;
 8008182:	e046      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	4a05      	ldr	r2, [pc, #20]	; (80081a0 <extInt_Config+0xb70>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d115      	bne.n	80081bc <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8008190:	4b04      	ldr	r3, [pc, #16]	; (80081a4 <extInt_Config+0xb74>)
 8008192:	695b      	ldr	r3, [r3, #20]
 8008194:	4a03      	ldr	r2, [pc, #12]	; (80081a4 <extInt_Config+0xb74>)
 8008196:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800819a:	6153      	str	r3, [r2, #20]
		break;
 800819c:	e039      	b.n	8008212 <extInt_Config+0xbe2>
 800819e:	bf00      	nop
 80081a0:	40020800 	.word	0x40020800
 80081a4:	40013800 	.word	0x40013800
 80081a8:	40020c00 	.word	0x40020c00
 80081ac:	40021000 	.word	0x40021000
 80081b0:	40021c00 	.word	0x40021c00
 80081b4:	40020000 	.word	0x40020000
 80081b8:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	4a9d      	ldr	r2, [pc, #628]	; (8008438 <extInt_Config+0xe08>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d106      	bne.n	80081d6 <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 80081c8:	4b9c      	ldr	r3, [pc, #624]	; (800843c <extInt_Config+0xe0c>)
 80081ca:	695b      	ldr	r3, [r3, #20]
 80081cc:	4a9b      	ldr	r2, [pc, #620]	; (800843c <extInt_Config+0xe0c>)
 80081ce:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80081d2:	6153      	str	r3, [r2, #20]
		break;
 80081d4:	e01d      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	4a98      	ldr	r2, [pc, #608]	; (8008440 <extInt_Config+0xe10>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d106      	bne.n	80081f0 <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 80081e2:	4b96      	ldr	r3, [pc, #600]	; (800843c <extInt_Config+0xe0c>)
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	4a95      	ldr	r2, [pc, #596]	; (800843c <extInt_Config+0xe0c>)
 80081e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80081ec:	6153      	str	r3, [r2, #20]
		break;
 80081ee:	e010      	b.n	8008212 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	4a93      	ldr	r2, [pc, #588]	; (8008444 <extInt_Config+0xe14>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d106      	bne.n	800820a <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 80081fc:	4b8f      	ldr	r3, [pc, #572]	; (800843c <extInt_Config+0xe0c>)
 80081fe:	695b      	ldr	r3, [r3, #20]
 8008200:	4a8e      	ldr	r2, [pc, #568]	; (800843c <extInt_Config+0xe0c>)
 8008202:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8008206:	6153      	str	r3, [r2, #20]
		break;
 8008208:	e003      	b.n	8008212 <extInt_Config+0xbe2>
			__NOP();
 800820a:	bf00      	nop
		break;
 800820c:	e001      	b.n	8008212 <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 800820e:	bf00      	nop
		break;
 8008210:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	791b      	ldrb	r3, [r3, #4]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d126      	bne.n	8008268 <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800821a:	4b8b      	ldr	r3, [pc, #556]	; (8008448 <extInt_Config+0xe18>)
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	6812      	ldr	r2, [r2, #0]
 8008222:	7812      	ldrb	r2, [r2, #0]
 8008224:	4611      	mov	r1, r2
 8008226:	2201      	movs	r2, #1
 8008228:	408a      	lsls	r2, r1
 800822a:	43d2      	mvns	r2, r2
 800822c:	4611      	mov	r1, r2
 800822e:	4a86      	ldr	r2, [pc, #536]	; (8008448 <extInt_Config+0xe18>)
 8008230:	400b      	ands	r3, r1
 8008232:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8008234:	4b84      	ldr	r3, [pc, #528]	; (8008448 <extInt_Config+0xe18>)
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	6812      	ldr	r2, [r2, #0]
 800823c:	7812      	ldrb	r2, [r2, #0]
 800823e:	4611      	mov	r1, r2
 8008240:	2201      	movs	r2, #1
 8008242:	408a      	lsls	r2, r1
 8008244:	43d2      	mvns	r2, r2
 8008246:	4611      	mov	r1, r2
 8008248:	4a7f      	ldr	r2, [pc, #508]	; (8008448 <extInt_Config+0xe18>)
 800824a:	400b      	ands	r3, r1
 800824c:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800824e:	4b7e      	ldr	r3, [pc, #504]	; (8008448 <extInt_Config+0xe18>)
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	6812      	ldr	r2, [r2, #0]
 8008256:	7812      	ldrb	r2, [r2, #0]
 8008258:	4611      	mov	r1, r2
 800825a:	2201      	movs	r2, #1
 800825c:	408a      	lsls	r2, r1
 800825e:	4611      	mov	r1, r2
 8008260:	4a79      	ldr	r2, [pc, #484]	; (8008448 <extInt_Config+0xe18>)
 8008262:	430b      	orrs	r3, r1
 8008264:	6093      	str	r3, [r2, #8]
 8008266:	e05c      	b.n	8008322 <extInt_Config+0xcf2>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	791b      	ldrb	r3, [r3, #4]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d126      	bne.n	80082be <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8008270:	4b75      	ldr	r3, [pc, #468]	; (8008448 <extInt_Config+0xe18>)
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	6812      	ldr	r2, [r2, #0]
 8008278:	7812      	ldrb	r2, [r2, #0]
 800827a:	4611      	mov	r1, r2
 800827c:	2201      	movs	r2, #1
 800827e:	408a      	lsls	r2, r1
 8008280:	43d2      	mvns	r2, r2
 8008282:	4611      	mov	r1, r2
 8008284:	4a70      	ldr	r2, [pc, #448]	; (8008448 <extInt_Config+0xe18>)
 8008286:	400b      	ands	r3, r1
 8008288:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800828a:	4b6f      	ldr	r3, [pc, #444]	; (8008448 <extInt_Config+0xe18>)
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	6812      	ldr	r2, [r2, #0]
 8008292:	7812      	ldrb	r2, [r2, #0]
 8008294:	4611      	mov	r1, r2
 8008296:	2201      	movs	r2, #1
 8008298:	408a      	lsls	r2, r1
 800829a:	43d2      	mvns	r2, r2
 800829c:	4611      	mov	r1, r2
 800829e:	4a6a      	ldr	r2, [pc, #424]	; (8008448 <extInt_Config+0xe18>)
 80082a0:	400b      	ands	r3, r1
 80082a2:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80082a4:	4b68      	ldr	r3, [pc, #416]	; (8008448 <extInt_Config+0xe18>)
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	6812      	ldr	r2, [r2, #0]
 80082ac:	7812      	ldrb	r2, [r2, #0]
 80082ae:	4611      	mov	r1, r2
 80082b0:	2201      	movs	r2, #1
 80082b2:	408a      	lsls	r2, r1
 80082b4:	4611      	mov	r1, r2
 80082b6:	4a64      	ldr	r2, [pc, #400]	; (8008448 <extInt_Config+0xe18>)
 80082b8:	430b      	orrs	r3, r1
 80082ba:	60d3      	str	r3, [r2, #12]
 80082bc:	e031      	b.n	8008322 <extInt_Config+0xcf2>

	}
	else
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80082be:	4b62      	ldr	r3, [pc, #392]	; (8008448 <extInt_Config+0xe18>)
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	6812      	ldr	r2, [r2, #0]
 80082c6:	7812      	ldrb	r2, [r2, #0]
 80082c8:	4611      	mov	r1, r2
 80082ca:	2201      	movs	r2, #1
 80082cc:	408a      	lsls	r2, r1
 80082ce:	43d2      	mvns	r2, r2
 80082d0:	4611      	mov	r1, r2
 80082d2:	4a5d      	ldr	r2, [pc, #372]	; (8008448 <extInt_Config+0xe18>)
 80082d4:	400b      	ands	r3, r1
 80082d6:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80082d8:	4b5b      	ldr	r3, [pc, #364]	; (8008448 <extInt_Config+0xe18>)
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	6812      	ldr	r2, [r2, #0]
 80082e0:	7812      	ldrb	r2, [r2, #0]
 80082e2:	4611      	mov	r1, r2
 80082e4:	2201      	movs	r2, #1
 80082e6:	408a      	lsls	r2, r1
 80082e8:	43d2      	mvns	r2, r2
 80082ea:	4611      	mov	r1, r2
 80082ec:	4a56      	ldr	r2, [pc, #344]	; (8008448 <extInt_Config+0xe18>)
 80082ee:	400b      	ands	r3, r1
 80082f0:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80082f2:	4b55      	ldr	r3, [pc, #340]	; (8008448 <extInt_Config+0xe18>)
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	6812      	ldr	r2, [r2, #0]
 80082fa:	7812      	ldrb	r2, [r2, #0]
 80082fc:	4611      	mov	r1, r2
 80082fe:	2201      	movs	r2, #1
 8008300:	408a      	lsls	r2, r1
 8008302:	4611      	mov	r1, r2
 8008304:	4a50      	ldr	r2, [pc, #320]	; (8008448 <extInt_Config+0xe18>)
 8008306:	430b      	orrs	r3, r1
 8008308:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800830a:	4b4f      	ldr	r3, [pc, #316]	; (8008448 <extInt_Config+0xe18>)
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	6812      	ldr	r2, [r2, #0]
 8008312:	7812      	ldrb	r2, [r2, #0]
 8008314:	4611      	mov	r1, r2
 8008316:	2201      	movs	r2, #1
 8008318:	408a      	lsls	r2, r1
 800831a:	4611      	mov	r1, r2
 800831c:	4a4a      	ldr	r2, [pc, #296]	; (8008448 <extInt_Config+0xe18>)
 800831e:	430b      	orrs	r3, r1
 8008320:	6093      	str	r3, [r2, #8]
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8008322:	4b49      	ldr	r3, [pc, #292]	; (8008448 <extInt_Config+0xe18>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	6812      	ldr	r2, [r2, #0]
 800832a:	7812      	ldrb	r2, [r2, #0]
 800832c:	4611      	mov	r1, r2
 800832e:	2201      	movs	r2, #1
 8008330:	408a      	lsls	r2, r1
 8008332:	43d2      	mvns	r2, r2
 8008334:	4611      	mov	r1, r2
 8008336:	4a44      	ldr	r2, [pc, #272]	; (8008448 <extInt_Config+0xe18>)
 8008338:	400b      	ands	r3, r1
 800833a:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800833c:	4b42      	ldr	r3, [pc, #264]	; (8008448 <extInt_Config+0xe18>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	6812      	ldr	r2, [r2, #0]
 8008344:	7812      	ldrb	r2, [r2, #0]
 8008346:	4611      	mov	r1, r2
 8008348:	2201      	movs	r2, #1
 800834a:	408a      	lsls	r2, r1
 800834c:	4611      	mov	r1, r2
 800834e:	4a3e      	ldr	r2, [pc, #248]	; (8008448 <extInt_Config+0xe18>)
 8008350:	430b      	orrs	r3, r1
 8008352:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008354:	b672      	cpsid	i
}
 8008356:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	2b0f      	cmp	r3, #15
 8008360:	d862      	bhi.n	8008428 <extInt_Config+0xdf8>
 8008362:	a201      	add	r2, pc, #4	; (adr r2, 8008368 <extInt_Config+0xd38>)
 8008364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008368:	080083a9 	.word	0x080083a9
 800836c:	080083b1 	.word	0x080083b1
 8008370:	080083b9 	.word	0x080083b9
 8008374:	080083c1 	.word	0x080083c1
 8008378:	080083c9 	.word	0x080083c9
 800837c:	080083d1 	.word	0x080083d1
 8008380:	080083d9 	.word	0x080083d9
 8008384:	080083e1 	.word	0x080083e1
 8008388:	080083e9 	.word	0x080083e9
 800838c:	080083f1 	.word	0x080083f1
 8008390:	080083f9 	.word	0x080083f9
 8008394:	08008401 	.word	0x08008401
 8008398:	08008409 	.word	0x08008409
 800839c:	08008411 	.word	0x08008411
 80083a0:	08008419 	.word	0x08008419
 80083a4:	08008421 	.word	0x08008421
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 80083a8:	2006      	movs	r0, #6
 80083aa:	f7ff f8f9 	bl	80075a0 <__NVIC_EnableIRQ>
		break;
 80083ae:	e03c      	b.n	800842a <extInt_Config+0xdfa>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 80083b0:	2007      	movs	r0, #7
 80083b2:	f7ff f8f5 	bl	80075a0 <__NVIC_EnableIRQ>
		break;
 80083b6:	e038      	b.n	800842a <extInt_Config+0xdfa>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 80083b8:	2008      	movs	r0, #8
 80083ba:	f7ff f8f1 	bl	80075a0 <__NVIC_EnableIRQ>
		break;
 80083be:	e034      	b.n	800842a <extInt_Config+0xdfa>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 80083c0:	2009      	movs	r0, #9
 80083c2:	f7ff f8ed 	bl	80075a0 <__NVIC_EnableIRQ>
		break;
 80083c6:	e030      	b.n	800842a <extInt_Config+0xdfa>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 80083c8:	200a      	movs	r0, #10
 80083ca:	f7ff f8e9 	bl	80075a0 <__NVIC_EnableIRQ>
		break;
 80083ce:	e02c      	b.n	800842a <extInt_Config+0xdfa>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80083d0:	2017      	movs	r0, #23
 80083d2:	f7ff f8e5 	bl	80075a0 <__NVIC_EnableIRQ>
		break;
 80083d6:	e028      	b.n	800842a <extInt_Config+0xdfa>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80083d8:	2017      	movs	r0, #23
 80083da:	f7ff f8e1 	bl	80075a0 <__NVIC_EnableIRQ>
		break;
 80083de:	e024      	b.n	800842a <extInt_Config+0xdfa>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80083e0:	2017      	movs	r0, #23
 80083e2:	f7ff f8dd 	bl	80075a0 <__NVIC_EnableIRQ>
		break;
 80083e6:	e020      	b.n	800842a <extInt_Config+0xdfa>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80083e8:	2017      	movs	r0, #23
 80083ea:	f7ff f8d9 	bl	80075a0 <__NVIC_EnableIRQ>
		break;
 80083ee:	e01c      	b.n	800842a <extInt_Config+0xdfa>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80083f0:	2017      	movs	r0, #23
 80083f2:	f7ff f8d5 	bl	80075a0 <__NVIC_EnableIRQ>
		break;
 80083f6:	e018      	b.n	800842a <extInt_Config+0xdfa>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80083f8:	2028      	movs	r0, #40	; 0x28
 80083fa:	f7ff f8d1 	bl	80075a0 <__NVIC_EnableIRQ>
		break;
 80083fe:	e014      	b.n	800842a <extInt_Config+0xdfa>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008400:	2028      	movs	r0, #40	; 0x28
 8008402:	f7ff f8cd 	bl	80075a0 <__NVIC_EnableIRQ>
		break;
 8008406:	e010      	b.n	800842a <extInt_Config+0xdfa>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008408:	2028      	movs	r0, #40	; 0x28
 800840a:	f7ff f8c9 	bl	80075a0 <__NVIC_EnableIRQ>
		break;
 800840e:	e00c      	b.n	800842a <extInt_Config+0xdfa>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008410:	2028      	movs	r0, #40	; 0x28
 8008412:	f7ff f8c5 	bl	80075a0 <__NVIC_EnableIRQ>
		break;
 8008416:	e008      	b.n	800842a <extInt_Config+0xdfa>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008418:	2028      	movs	r0, #40	; 0x28
 800841a:	f7ff f8c1 	bl	80075a0 <__NVIC_EnableIRQ>
		break;
 800841e:	e004      	b.n	800842a <extInt_Config+0xdfa>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008420:	2028      	movs	r0, #40	; 0x28
 8008422:	f7ff f8bd 	bl	80075a0 <__NVIC_EnableIRQ>
		break;
 8008426:	e000      	b.n	800842a <extInt_Config+0xdfa>
	}

	default: {
		break;
 8008428:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800842a:	b662      	cpsie	i
}
 800842c:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 800842e:	bf00      	nop
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	40020c00 	.word	0x40020c00
 800843c:	40013800 	.word	0x40013800
 8008440:	40021000 	.word	0x40021000
 8008444:	40021c00 	.word	0x40021c00
 8008448:	40013c00 	.word	0x40013c00

0800844c <exti_Config_Int_Priority>:


void exti_Config_Int_Priority(EXTI_Config_t *extiConfig, uint8_t newPriority)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8008458:	b672      	cpsid	i
}
 800845a:	bf00      	nop
	//Desabilitamos las interrupciones globales
	__disable_irq();
	//Configuramos la nueva prioridad
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	2b0f      	cmp	r3, #15
 8008464:	d84c      	bhi.n	8008500 <exti_Config_Int_Priority+0xb4>
 8008466:	a201      	add	r2, pc, #4	; (adr r2, 800846c <exti_Config_Int_Priority+0x20>)
 8008468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846c:	080084ad 	.word	0x080084ad
 8008470:	080084b9 	.word	0x080084b9
 8008474:	080084c5 	.word	0x080084c5
 8008478:	080084d1 	.word	0x080084d1
 800847c:	080084dd 	.word	0x080084dd
 8008480:	080084e9 	.word	0x080084e9
 8008484:	080084e9 	.word	0x080084e9
 8008488:	080084e9 	.word	0x080084e9
 800848c:	080084e9 	.word	0x080084e9
 8008490:	080084e9 	.word	0x080084e9
 8008494:	080084f5 	.word	0x080084f5
 8008498:	080084f5 	.word	0x080084f5
 800849c:	080084f5 	.word	0x080084f5
 80084a0:	080084f5 	.word	0x080084f5
 80084a4:	080084f5 	.word	0x080084f5
 80084a8:	080084f5 	.word	0x080084f5
	{
	case 0:
	{
		NVIC_SetPriority(EXTI0_IRQn, newPriority);
 80084ac:	78fb      	ldrb	r3, [r7, #3]
 80084ae:	4619      	mov	r1, r3
 80084b0:	2006      	movs	r0, #6
 80084b2:	f7ff f893 	bl	80075dc <__NVIC_SetPriority>
		break;
 80084b6:	e024      	b.n	8008502 <exti_Config_Int_Priority+0xb6>
	}
	case 1:
	{
		NVIC_SetPriority(EXTI1_IRQn, newPriority);
 80084b8:	78fb      	ldrb	r3, [r7, #3]
 80084ba:	4619      	mov	r1, r3
 80084bc:	2007      	movs	r0, #7
 80084be:	f7ff f88d 	bl	80075dc <__NVIC_SetPriority>
		break;
 80084c2:	e01e      	b.n	8008502 <exti_Config_Int_Priority+0xb6>
	}
	case 2:
	{
		NVIC_SetPriority(EXTI2_IRQn, newPriority);
 80084c4:	78fb      	ldrb	r3, [r7, #3]
 80084c6:	4619      	mov	r1, r3
 80084c8:	2008      	movs	r0, #8
 80084ca:	f7ff f887 	bl	80075dc <__NVIC_SetPriority>
		break;
 80084ce:	e018      	b.n	8008502 <exti_Config_Int_Priority+0xb6>
	}
	case 3:
	{
		NVIC_SetPriority(EXTI3_IRQn, newPriority);
 80084d0:	78fb      	ldrb	r3, [r7, #3]
 80084d2:	4619      	mov	r1, r3
 80084d4:	2009      	movs	r0, #9
 80084d6:	f7ff f881 	bl	80075dc <__NVIC_SetPriority>
		break;
 80084da:	e012      	b.n	8008502 <exti_Config_Int_Priority+0xb6>
	}
	case 4:
	{
		NVIC_SetPriority(EXTI4_IRQn, newPriority);
 80084dc:	78fb      	ldrb	r3, [r7, #3]
 80084de:	4619      	mov	r1, r3
 80084e0:	200a      	movs	r0, #10
 80084e2:	f7ff f87b 	bl	80075dc <__NVIC_SetPriority>
		break;
 80084e6:	e00c      	b.n	8008502 <exti_Config_Int_Priority+0xb6>
	case 6:
	case 7:
	case 8:
	case 9:
	{
		NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 80084e8:	78fb      	ldrb	r3, [r7, #3]
 80084ea:	4619      	mov	r1, r3
 80084ec:	2017      	movs	r0, #23
 80084ee:	f7ff f875 	bl	80075dc <__NVIC_SetPriority>
		break;
 80084f2:	e006      	b.n	8008502 <exti_Config_Int_Priority+0xb6>
	case 12:
	case 13:
	case 14:
	case 15:
	{
		NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 80084f4:	78fb      	ldrb	r3, [r7, #3]
 80084f6:	4619      	mov	r1, r3
 80084f8:	2028      	movs	r0, #40	; 0x28
 80084fa:	f7ff f86f 	bl	80075dc <__NVIC_SetPriority>
		break;
 80084fe:	e000      	b.n	8008502 <exti_Config_Int_Priority+0xb6>
	}
	default:{  break;  }
 8008500:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8008502:	b662      	cpsie	i
}
 8008504:	bf00      	nop
	}
	//Activamos las interrupciones globales
	__enable_irq();
}
 8008506:	bf00      	nop
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop

08008510 <callback_extInt0>:


//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 8008510:	b480      	push	{r7}
 8008512:	af00      	add	r7, sp, #0
	__NOP();
 8008514:	bf00      	nop
}
 8008516:	bf00      	nop
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <callback_extInt1>:

__attribute__ ((weak)) void callback_extInt1(void){
 8008520:	b480      	push	{r7}
 8008522:	af00      	add	r7, sp, #0
	__NOP();
 8008524:	bf00      	nop
}
 8008526:	bf00      	nop
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt2(void){
 8008530:	b480      	push	{r7}
 8008532:	af00      	add	r7, sp, #0
	__NOP();
 8008534:	bf00      	nop
}
 8008536:	bf00      	nop
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <callback_extInt3>:

__attribute__ ((weak)) void callback_extInt3(void){
 8008540:	b480      	push	{r7}
 8008542:	af00      	add	r7, sp, #0
	__NOP();
 8008544:	bf00      	nop
}
 8008546:	bf00      	nop
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt4(void){
 8008550:	b480      	push	{r7}
 8008552:	af00      	add	r7, sp, #0
	__NOP();
 8008554:	bf00      	nop
}
 8008556:	bf00      	nop
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 8008560:	b480      	push	{r7}
 8008562:	af00      	add	r7, sp, #0
	__NOP();
 8008564:	bf00      	nop
}
 8008566:	bf00      	nop
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 8008570:	b480      	push	{r7}
 8008572:	af00      	add	r7, sp, #0
	__NOP();
 8008574:	bf00      	nop
}
 8008576:	bf00      	nop
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 8008580:	b480      	push	{r7}
 8008582:	af00      	add	r7, sp, #0
	__NOP();
 8008584:	bf00      	nop
}
 8008586:	bf00      	nop
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 8008590:	b480      	push	{r7}
 8008592:	af00      	add	r7, sp, #0
	__NOP();
 8008594:	bf00      	nop
}
 8008596:	bf00      	nop
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 80085a0:	b480      	push	{r7}
 80085a2:	af00      	add	r7, sp, #0
	__NOP();
 80085a4:	bf00      	nop
}
 80085a6:	bf00      	nop
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 80085b0:	b480      	push	{r7}
 80085b2:	af00      	add	r7, sp, #0
	__NOP();
 80085b4:	bf00      	nop
}
 80085b6:	bf00      	nop
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 80085c0:	b480      	push	{r7}
 80085c2:	af00      	add	r7, sp, #0
	__NOP();
 80085c4:	bf00      	nop
}
 80085c6:	bf00      	nop
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 80085d0:	b480      	push	{r7}
 80085d2:	af00      	add	r7, sp, #0
	__NOP();
 80085d4:	bf00      	nop
}
 80085d6:	bf00      	nop
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <callback_extInt13>:

__attribute__ ((weak)) void callback_extInt13(void){
 80085e0:	b480      	push	{r7}
 80085e2:	af00      	add	r7, sp, #0
	__NOP();
 80085e4:	bf00      	nop
}
 80085e6:	bf00      	nop
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt14(void){
 80085f0:	b480      	push	{r7}
 80085f2:	af00      	add	r7, sp, #0
	__NOP();
 80085f4:	bf00      	nop
}
 80085f6:	bf00      	nop
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 8008600:	b480      	push	{r7}
 8008602:	af00      	add	r7, sp, #0
	__NOP();
 8008604:	bf00      	nop
}
 8008606:	bf00      	nop
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 8008614:	4b08      	ldr	r3, [pc, #32]	; (8008638 <EXTI0_IRQHandler+0x28>)
 8008616:	695b      	ldr	r3, [r3, #20]
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	d008      	beq.n	8008632 <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 8008620:	4b05      	ldr	r3, [pc, #20]	; (8008638 <EXTI0_IRQHandler+0x28>)
 8008622:	695b      	ldr	r3, [r3, #20]
 8008624:	4a04      	ldr	r2, [pc, #16]	; (8008638 <EXTI0_IRQHandler+0x28>)
 8008626:	f043 0301 	orr.w	r3, r3, #1
 800862a:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 800862c:	f7ff ff70 	bl	8008510 <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 8008630:	e000      	b.n	8008634 <EXTI0_IRQHandler+0x24>
		__NOP();
 8008632:	bf00      	nop
}
 8008634:	bf00      	nop
 8008636:	bd80      	pop	{r7, pc}
 8008638:	40013c00 	.word	0x40013c00

0800863c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 8008640:	4b08      	ldr	r3, [pc, #32]	; (8008664 <EXTI1_IRQHandler+0x28>)
 8008642:	695b      	ldr	r3, [r3, #20]
 8008644:	f003 0302 	and.w	r3, r3, #2
 8008648:	2b00      	cmp	r3, #0
 800864a:	d008      	beq.n	800865e <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 800864c:	4b05      	ldr	r3, [pc, #20]	; (8008664 <EXTI1_IRQHandler+0x28>)
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	4a04      	ldr	r2, [pc, #16]	; (8008664 <EXTI1_IRQHandler+0x28>)
 8008652:	f043 0302 	orr.w	r3, r3, #2
 8008656:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 8008658:	f7ff ff62 	bl	8008520 <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 800865c:	e000      	b.n	8008660 <EXTI1_IRQHandler+0x24>
		__NOP();
 800865e:	bf00      	nop
}
 8008660:	bf00      	nop
 8008662:	bd80      	pop	{r7, pc}
 8008664:	40013c00 	.word	0x40013c00

08008668 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 800866c:	4b08      	ldr	r3, [pc, #32]	; (8008690 <EXTI2_IRQHandler+0x28>)
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	f003 0304 	and.w	r3, r3, #4
 8008674:	2b00      	cmp	r3, #0
 8008676:	d008      	beq.n	800868a <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 8008678:	4b05      	ldr	r3, [pc, #20]	; (8008690 <EXTI2_IRQHandler+0x28>)
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	4a04      	ldr	r2, [pc, #16]	; (8008690 <EXTI2_IRQHandler+0x28>)
 800867e:	f043 0304 	orr.w	r3, r3, #4
 8008682:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 8008684:	f7ff ff54 	bl	8008530 <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 8008688:	e000      	b.n	800868c <EXTI2_IRQHandler+0x24>
		__NOP();
 800868a:	bf00      	nop
}
 800868c:	bf00      	nop
 800868e:	bd80      	pop	{r7, pc}
 8008690:	40013c00 	.word	0x40013c00

08008694 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 8008698:	4b08      	ldr	r3, [pc, #32]	; (80086bc <EXTI3_IRQHandler+0x28>)
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	f003 0308 	and.w	r3, r3, #8
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d008      	beq.n	80086b6 <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 80086a4:	4b05      	ldr	r3, [pc, #20]	; (80086bc <EXTI3_IRQHandler+0x28>)
 80086a6:	695b      	ldr	r3, [r3, #20]
 80086a8:	4a04      	ldr	r2, [pc, #16]	; (80086bc <EXTI3_IRQHandler+0x28>)
 80086aa:	f043 0308 	orr.w	r3, r3, #8
 80086ae:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 80086b0:	f7ff ff46 	bl	8008540 <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 80086b4:	e000      	b.n	80086b8 <EXTI3_IRQHandler+0x24>
		__NOP();
 80086b6:	bf00      	nop
}
 80086b8:	bf00      	nop
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	40013c00 	.word	0x40013c00

080086c0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 80086c4:	4b08      	ldr	r3, [pc, #32]	; (80086e8 <EXTI4_IRQHandler+0x28>)
 80086c6:	695b      	ldr	r3, [r3, #20]
 80086c8:	f003 0310 	and.w	r3, r3, #16
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d008      	beq.n	80086e2 <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 80086d0:	4b05      	ldr	r3, [pc, #20]	; (80086e8 <EXTI4_IRQHandler+0x28>)
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	4a04      	ldr	r2, [pc, #16]	; (80086e8 <EXTI4_IRQHandler+0x28>)
 80086d6:	f043 0310 	orr.w	r3, r3, #16
 80086da:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 80086dc:	f7ff ff38 	bl	8008550 <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 80086e0:	e000      	b.n	80086e4 <EXTI4_IRQHandler+0x24>
		__NOP();
 80086e2:	bf00      	nop
}
 80086e4:	bf00      	nop
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	40013c00 	.word	0x40013c00

080086ec <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 80086f0:	4b26      	ldr	r3, [pc, #152]	; (800878c <EXTI9_5_IRQHandler+0xa0>)
 80086f2:	695b      	ldr	r3, [r3, #20]
 80086f4:	f003 0320 	and.w	r3, r3, #32
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d008      	beq.n	800870e <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 80086fc:	4b23      	ldr	r3, [pc, #140]	; (800878c <EXTI9_5_IRQHandler+0xa0>)
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	4a22      	ldr	r2, [pc, #136]	; (800878c <EXTI9_5_IRQHandler+0xa0>)
 8008702:	f043 0320 	orr.w	r3, r3, #32
 8008706:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 8008708:	f7ff ff2a 	bl	8008560 <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 800870c:	e03c      	b.n	8008788 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 800870e:	4b1f      	ldr	r3, [pc, #124]	; (800878c <EXTI9_5_IRQHandler+0xa0>)
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008716:	2b00      	cmp	r3, #0
 8008718:	d008      	beq.n	800872c <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 800871a:	4b1c      	ldr	r3, [pc, #112]	; (800878c <EXTI9_5_IRQHandler+0xa0>)
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	4a1b      	ldr	r2, [pc, #108]	; (800878c <EXTI9_5_IRQHandler+0xa0>)
 8008720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008724:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 8008726:	f7ff ff23 	bl	8008570 <callback_extInt6>
}
 800872a:	e02d      	b.n	8008788 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 800872c:	4b17      	ldr	r3, [pc, #92]	; (800878c <EXTI9_5_IRQHandler+0xa0>)
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008734:	2b00      	cmp	r3, #0
 8008736:	d008      	beq.n	800874a <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 8008738:	4b14      	ldr	r3, [pc, #80]	; (800878c <EXTI9_5_IRQHandler+0xa0>)
 800873a:	695b      	ldr	r3, [r3, #20]
 800873c:	4a13      	ldr	r2, [pc, #76]	; (800878c <EXTI9_5_IRQHandler+0xa0>)
 800873e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008742:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 8008744:	f7ff ff1c 	bl	8008580 <callback_extInt7>
}
 8008748:	e01e      	b.n	8008788 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 800874a:	4b10      	ldr	r3, [pc, #64]	; (800878c <EXTI9_5_IRQHandler+0xa0>)
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008752:	2b00      	cmp	r3, #0
 8008754:	d008      	beq.n	8008768 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 8008756:	4b0d      	ldr	r3, [pc, #52]	; (800878c <EXTI9_5_IRQHandler+0xa0>)
 8008758:	695b      	ldr	r3, [r3, #20]
 800875a:	4a0c      	ldr	r2, [pc, #48]	; (800878c <EXTI9_5_IRQHandler+0xa0>)
 800875c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008760:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 8008762:	f7ff ff15 	bl	8008590 <callback_extInt8>
}
 8008766:	e00f      	b.n	8008788 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 8008768:	4b08      	ldr	r3, [pc, #32]	; (800878c <EXTI9_5_IRQHandler+0xa0>)
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008770:	2b00      	cmp	r3, #0
 8008772:	d008      	beq.n	8008786 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 8008774:	4b05      	ldr	r3, [pc, #20]	; (800878c <EXTI9_5_IRQHandler+0xa0>)
 8008776:	695b      	ldr	r3, [r3, #20]
 8008778:	4a04      	ldr	r2, [pc, #16]	; (800878c <EXTI9_5_IRQHandler+0xa0>)
 800877a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800877e:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 8008780:	f7ff ff0e 	bl	80085a0 <callback_extInt9>
}
 8008784:	e000      	b.n	8008788 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 8008786:	bf00      	nop
}
 8008788:	bf00      	nop
 800878a:	bd80      	pop	{r7, pc}
 800878c:	40013c00 	.word	0x40013c00

08008790 <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 8008794:	4b2e      	ldr	r3, [pc, #184]	; (8008850 <EXTI15_10_IRQHandler+0xc0>)
 8008796:	695b      	ldr	r3, [r3, #20]
 8008798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800879c:	2b00      	cmp	r3, #0
 800879e:	d008      	beq.n	80087b2 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 80087a0:	4b2b      	ldr	r3, [pc, #172]	; (8008850 <EXTI15_10_IRQHandler+0xc0>)
 80087a2:	695b      	ldr	r3, [r3, #20]
 80087a4:	4a2a      	ldr	r2, [pc, #168]	; (8008850 <EXTI15_10_IRQHandler+0xc0>)
 80087a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80087aa:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 80087ac:	f7ff ff00 	bl	80085b0 <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 80087b0:	e04b      	b.n	800884a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 80087b2:	4b27      	ldr	r3, [pc, #156]	; (8008850 <EXTI15_10_IRQHandler+0xc0>)
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d008      	beq.n	80087d0 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 80087be:	4b24      	ldr	r3, [pc, #144]	; (8008850 <EXTI15_10_IRQHandler+0xc0>)
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	4a23      	ldr	r2, [pc, #140]	; (8008850 <EXTI15_10_IRQHandler+0xc0>)
 80087c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80087c8:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 80087ca:	f7ff fef9 	bl	80085c0 <callback_extInt11>
}
 80087ce:	e03c      	b.n	800884a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 80087d0:	4b1f      	ldr	r3, [pc, #124]	; (8008850 <EXTI15_10_IRQHandler+0xc0>)
 80087d2:	695b      	ldr	r3, [r3, #20]
 80087d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d008      	beq.n	80087ee <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 80087dc:	4b1c      	ldr	r3, [pc, #112]	; (8008850 <EXTI15_10_IRQHandler+0xc0>)
 80087de:	695b      	ldr	r3, [r3, #20]
 80087e0:	4a1b      	ldr	r2, [pc, #108]	; (8008850 <EXTI15_10_IRQHandler+0xc0>)
 80087e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80087e6:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 80087e8:	f7ff fef2 	bl	80085d0 <callback_extInt12>
}
 80087ec:	e02d      	b.n	800884a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 80087ee:	4b18      	ldr	r3, [pc, #96]	; (8008850 <EXTI15_10_IRQHandler+0xc0>)
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d008      	beq.n	800880c <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 80087fa:	4b15      	ldr	r3, [pc, #84]	; (8008850 <EXTI15_10_IRQHandler+0xc0>)
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	4a14      	ldr	r2, [pc, #80]	; (8008850 <EXTI15_10_IRQHandler+0xc0>)
 8008800:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008804:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 8008806:	f7ff feeb 	bl	80085e0 <callback_extInt13>
}
 800880a:	e01e      	b.n	800884a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 800880c:	4b10      	ldr	r3, [pc, #64]	; (8008850 <EXTI15_10_IRQHandler+0xc0>)
 800880e:	695b      	ldr	r3, [r3, #20]
 8008810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008814:	2b00      	cmp	r3, #0
 8008816:	d008      	beq.n	800882a <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 8008818:	4b0d      	ldr	r3, [pc, #52]	; (8008850 <EXTI15_10_IRQHandler+0xc0>)
 800881a:	695b      	ldr	r3, [r3, #20]
 800881c:	4a0c      	ldr	r2, [pc, #48]	; (8008850 <EXTI15_10_IRQHandler+0xc0>)
 800881e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008822:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 8008824:	f7ff fee4 	bl	80085f0 <callback_extInt14>
}
 8008828:	e00f      	b.n	800884a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 800882a:	4b09      	ldr	r3, [pc, #36]	; (8008850 <EXTI15_10_IRQHandler+0xc0>)
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008832:	2b00      	cmp	r3, #0
 8008834:	d008      	beq.n	8008848 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 8008836:	4b06      	ldr	r3, [pc, #24]	; (8008850 <EXTI15_10_IRQHandler+0xc0>)
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	4a05      	ldr	r2, [pc, #20]	; (8008850 <EXTI15_10_IRQHandler+0xc0>)
 800883c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008840:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 8008842:	f7ff fedd 	bl	8008600 <callback_extInt15>
}
 8008846:	e000      	b.n	800884a <EXTI15_10_IRQHandler+0xba>
		__NOP();
 8008848:	bf00      	nop
}
 800884a:	bf00      	nop
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	40013c00 	.word	0x40013c00

08008854 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	4608      	mov	r0, r1
 800885e:	4611      	mov	r1, r2
 8008860:	461a      	mov	r2, r3
 8008862:	4603      	mov	r3, r0
 8008864:	70fb      	strb	r3, [r7, #3]
 8008866:	460b      	mov	r3, r1
 8008868:	70bb      	strb	r3, [r7, #2]
 800886a:	4613      	mov	r3, r2
 800886c:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	78fa      	ldrb	r2, [r7, #3]
 8008872:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	78ba      	ldrb	r2, [r7, #2]
 8008878:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	787a      	ldrb	r2, [r7, #1]
 800887e:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	7c3a      	ldrb	r2, [r7, #16]
 8008884:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	7d3a      	ldrb	r2, [r7, #20]
 800888a:	715a      	strb	r2, [r3, #5]
}
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 80088a0:	2300      	movs	r3, #0
 80088a2:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80088a4:	2300      	movs	r3, #0
 80088a6:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	4a88      	ldr	r2, [pc, #544]	; (8008ad0 <GPIO_Config+0x238>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d106      	bne.n	80088c0 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 80088b2:	4b88      	ldr	r3, [pc, #544]	; (8008ad4 <GPIO_Config+0x23c>)
 80088b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b6:	4a87      	ldr	r2, [pc, #540]	; (8008ad4 <GPIO_Config+0x23c>)
 80088b8:	f043 0301 	orr.w	r3, r3, #1
 80088bc:	6313      	str	r3, [r2, #48]	; 0x30
 80088be:	e03a      	b.n	8008936 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	4a84      	ldr	r2, [pc, #528]	; (8008ad8 <GPIO_Config+0x240>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d106      	bne.n	80088d8 <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 80088ca:	4b82      	ldr	r3, [pc, #520]	; (8008ad4 <GPIO_Config+0x23c>)
 80088cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ce:	4a81      	ldr	r2, [pc, #516]	; (8008ad4 <GPIO_Config+0x23c>)
 80088d0:	f043 0302 	orr.w	r3, r3, #2
 80088d4:	6313      	str	r3, [r2, #48]	; 0x30
 80088d6:	e02e      	b.n	8008936 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	4a7f      	ldr	r2, [pc, #508]	; (8008adc <GPIO_Config+0x244>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d106      	bne.n	80088f0 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 80088e2:	4b7c      	ldr	r3, [pc, #496]	; (8008ad4 <GPIO_Config+0x23c>)
 80088e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e6:	4a7b      	ldr	r2, [pc, #492]	; (8008ad4 <GPIO_Config+0x23c>)
 80088e8:	f043 0304 	orr.w	r3, r3, #4
 80088ec:	6313      	str	r3, [r2, #48]	; 0x30
 80088ee:	e022      	b.n	8008936 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	4a7a      	ldr	r2, [pc, #488]	; (8008ae0 <GPIO_Config+0x248>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d106      	bne.n	8008908 <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 80088fa:	4b76      	ldr	r3, [pc, #472]	; (8008ad4 <GPIO_Config+0x23c>)
 80088fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fe:	4a75      	ldr	r2, [pc, #468]	; (8008ad4 <GPIO_Config+0x23c>)
 8008900:	f043 0308 	orr.w	r3, r3, #8
 8008904:	6313      	str	r3, [r2, #48]	; 0x30
 8008906:	e016      	b.n	8008936 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	4a75      	ldr	r2, [pc, #468]	; (8008ae4 <GPIO_Config+0x24c>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d106      	bne.n	8008920 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 8008912:	4b70      	ldr	r3, [pc, #448]	; (8008ad4 <GPIO_Config+0x23c>)
 8008914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008916:	4a6f      	ldr	r2, [pc, #444]	; (8008ad4 <GPIO_Config+0x23c>)
 8008918:	f043 0310 	orr.w	r3, r3, #16
 800891c:	6313      	str	r3, [r2, #48]	; 0x30
 800891e:	e00a      	b.n	8008936 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	4a70      	ldr	r2, [pc, #448]	; (8008ae8 <GPIO_Config+0x250>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d105      	bne.n	8008936 <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 800892a:	4b6a      	ldr	r3, [pc, #424]	; (8008ad4 <GPIO_Config+0x23c>)
 800892c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892e:	4a69      	ldr	r2, [pc, #420]	; (8008ad4 <GPIO_Config+0x23c>)
 8008930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008934:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	785b      	ldrb	r3, [r3, #1]
 800893a:	461a      	mov	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	005b      	lsls	r3, r3, #1
 8008942:	fa02 f303 	lsl.w	r3, r2, r3
 8008946:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	005b      	lsls	r3, r3, #1
 8008954:	2103      	movs	r1, #3
 8008956:	fa01 f303 	lsl.w	r3, r1, r3
 800895a:	43db      	mvns	r3, r3
 800895c:	4619      	mov	r1, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	400a      	ands	r2, r1
 8008964:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	6819      	ldr	r1, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	430a      	orrs	r2, r1
 8008974:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	789b      	ldrb	r3, [r3, #2]
 800897a:	461a      	mov	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	fa02 f303 	lsl.w	r3, r2, r3
 8008984:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	685a      	ldr	r2, [r3, #4]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	4619      	mov	r1, r3
 8008992:	2301      	movs	r3, #1
 8008994:	408b      	lsls	r3, r1
 8008996:	43db      	mvns	r3, r3
 8008998:	4619      	mov	r1, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	400a      	ands	r2, r1
 80089a0:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	6859      	ldr	r1, [r3, #4]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	430a      	orrs	r2, r1
 80089b0:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	78db      	ldrb	r3, [r3, #3]
 80089b6:	461a      	mov	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	005b      	lsls	r3, r3, #1
 80089be:	fa02 f303 	lsl.w	r3, r2, r3
 80089c2:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	689a      	ldr	r2, [r3, #8]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	005b      	lsls	r3, r3, #1
 80089d0:	2103      	movs	r1, #3
 80089d2:	fa01 f303 	lsl.w	r3, r1, r3
 80089d6:	43db      	mvns	r3, r3
 80089d8:	4619      	mov	r1, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	400a      	ands	r2, r1
 80089e0:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	6899      	ldr	r1, [r3, #8]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	430a      	orrs	r2, r1
 80089f0:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	791b      	ldrb	r3, [r3, #4]
 80089f6:	461a      	mov	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	005b      	lsls	r3, r3, #1
 80089fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008a02:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	68da      	ldr	r2, [r3, #12]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	005b      	lsls	r3, r3, #1
 8008a10:	2103      	movs	r1, #3
 8008a12:	fa01 f303 	lsl.w	r3, r1, r3
 8008a16:	43db      	mvns	r3, r3
 8008a18:	4619      	mov	r1, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	400a      	ands	r2, r1
 8008a20:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	68d9      	ldr	r1, [r3, #12]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	430a      	orrs	r2, r1
 8008a30:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	785b      	ldrb	r3, [r3, #1]
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d143      	bne.n	8008ac2 <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	2b07      	cmp	r3, #7
 8008a40:	d81f      	bhi.n	8008a82 <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	6a1a      	ldr	r2, [r3, #32]
 8008a50:	210f      	movs	r1, #15
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	fa01 f303 	lsl.w	r3, r1, r3
 8008a58:	43db      	mvns	r3, r3
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	400a      	ands	r2, r1
 8008a62:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	6a1a      	ldr	r2, [r3, #32]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	795b      	ldrb	r3, [r3, #5]
 8008a6e:	4619      	mov	r1, r3
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	fa01 f303 	lsl.w	r3, r1, r3
 8008a76:	4619      	mov	r1, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8008a80:	e01f      	b.n	8008ac2 <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	3b08      	subs	r3, #8
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a92:	210f      	movs	r1, #15
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	fa01 f303 	lsl.w	r3, r1, r3
 8008a9a:	43db      	mvns	r3, r3
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	400a      	ands	r2, r1
 8008aa4:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	795b      	ldrb	r3, [r3, #5]
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ab8:	4619      	mov	r1, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	430a      	orrs	r2, r1
 8008ac0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008ac2:	bf00      	nop
 8008ac4:	3714      	adds	r7, #20
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	40020000 	.word	0x40020000
 8008ad4:	40023800 	.word	0x40023800
 8008ad8:	40020400 	.word	0x40020400
 8008adc:	40020800 	.word	0x40020800
 8008ae0:	40020c00 	.word	0x40020c00
 8008ae4:	40021000 	.word	0x40021000
 8008ae8:	40021c00 	.word	0x40021c00

08008aec <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	460b      	mov	r3, r1
 8008af6:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 8008af8:	78fb      	ldrb	r3, [r7, #3]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d10d      	bne.n	8008b1a <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	699a      	ldr	r2, [r3, #24]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	4619      	mov	r1, r3
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	408b      	lsls	r3, r1
 8008b0e:	4619      	mov	r1, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	430a      	orrs	r2, r1
 8008b16:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 8008b18:	e00d      	b.n	8008b36 <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	699a      	ldr	r2, [r3, #24]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	3310      	adds	r3, #16
 8008b26:	2101      	movs	r1, #1
 8008b28:	fa01 f303 	lsl.w	r3, r1, r3
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	430a      	orrs	r2, r1
 8008b34:	619a      	str	r2, [r3, #24]
}
 8008b36:	bf00      	nop
 8008b38:	370c      	adds	r7, #12
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr

08008b42 <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b083      	sub	sp, #12
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	695a      	ldr	r2, [r3, #20]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	4619      	mov	r1, r3
 8008b56:	2301      	movs	r3, #1
 8008b58:	408b      	lsls	r3, r1
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	404a      	eors	r2, r1
 8008b62:	615a      	str	r2, [r3, #20]
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <i2c_Config>:
 * Recordar de configurar los pines GPIOx por medio de las funciones alternativas,
 * Ademas de configurar dichos pines como open_drain
 */

void i2c_Config(I2C_Handler_t *ptrHandlerI2C)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
	uint8_t clockAPB1 = getClockAPB1();     //Variable que guarda la velocidad de reloj entregada al bus APB1
 8008b78:	f000 fa9c 	bl	80090b4 <getClockAPB1>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	73fb      	strb	r3, [r7, #15]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	if(ptrHandlerI2C->prtI2Cx == I2C1)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a60      	ldr	r2, [pc, #384]	; (8008d08 <i2c_Config+0x198>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d106      	bne.n	8008b98 <i2c_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8008b8a:	4b60      	ldr	r3, [pc, #384]	; (8008d0c <i2c_Config+0x19c>)
 8008b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8e:	4a5f      	ldr	r2, [pc, #380]	; (8008d0c <i2c_Config+0x19c>)
 8008b90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b94:	6413      	str	r3, [r2, #64]	; 0x40
 8008b96:	e016      	b.n	8008bc6 <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C2)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a5c      	ldr	r2, [pc, #368]	; (8008d10 <i2c_Config+0x1a0>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d106      	bne.n	8008bb0 <i2c_Config+0x40>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8008ba2:	4b5a      	ldr	r3, [pc, #360]	; (8008d0c <i2c_Config+0x19c>)
 8008ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba6:	4a59      	ldr	r2, [pc, #356]	; (8008d0c <i2c_Config+0x19c>)
 8008ba8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008bac:	6413      	str	r3, [r2, #64]	; 0x40
 8008bae:	e00a      	b.n	8008bc6 <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C3)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a57      	ldr	r2, [pc, #348]	; (8008d14 <i2c_Config+0x1a4>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d105      	bne.n	8008bc6 <i2c_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8008bba:	4b54      	ldr	r3, [pc, #336]	; (8008d0c <i2c_Config+0x19c>)
 8008bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bbe:	4a53      	ldr	r2, [pc, #332]	; (8008d0c <i2c_Config+0x19c>)
 8008bc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008bc4:	6413      	str	r3, [r2, #64]	; 0x40
	}

	//---------------------------------2) Reiniciamos el periferico------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_SWRST;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008bd4:	601a      	str	r2, [r3, #0]
	__NOP();
 8008bd6:	bf00      	nop
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_SWRST;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008be6:	601a      	str	r2, [r3, #0]

	//-----------------------------------3) Valor del reloj principal------------------------------------------
	//Registro: CR2

	ptrHandlerI2C->prtI2Cx->CR2 &= ~(0b111111<<I2C_CR2_FREQ_Pos);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	685a      	ldr	r2, [r3, #4]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8008bf6:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->prtI2Cx->CR2 |= (clockAPB1<<I2C_CR2_FREQ_Pos);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6859      	ldr	r1, [r3, #4]
 8008bfe:	7bfa      	ldrb	r2, [r7, #15]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	430a      	orrs	r2, r1
 8008c06:	605a      	str	r2, [r3, #4]
	//-------------------------------------4) Configuracion del I2C------------------------------------------
	//Registro: CCR
	//Registro: TRISE

	//Variables que almacenan el respectivo valor a cargar en los registros CRR y Trise
	uint16_t valueCRR = 0;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	81bb      	strh	r3, [r7, #12]
	uint8_t valueTrise = 0;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	72fb      	strb	r3, [r7, #11]

	//definimos inicialmente los registro en 0
	ptrHandlerI2C->prtI2Cx->CCR = 0;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2200      	movs	r2, #0
 8008c16:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->prtI2Cx->TRISE = 0;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	621a      	str	r2, [r3, #32]

	//Configuramos el I2C deacuerdo al modo selsecionado
	if(ptrHandlerI2C->modeI2C == I2C_MODE_SM)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	795b      	ldrb	r3, [r3, #5]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d121      	bne.n	8008c6c <i2c_Config+0xfc>
	{
		//Seleccionamos el modo estandar
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	69da      	ldr	r2, [r3, #28]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c36:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (5000*clockAPB1)/1000;
 8008c38:	7bfb      	ldrb	r3, [r7, #15]
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	0092      	lsls	r2, r2, #2
 8008c40:	4413      	add	r3, r2
 8008c42:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	69d9      	ldr	r1, [r3, #28]
 8008c4a:	89ba      	ldrh	r2, [r7, #12]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	430a      	orrs	r2, r1
 8008c52:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((1000*clockAPB1)/1000)+1;
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
 8008c56:	3301      	adds	r3, #1
 8008c58:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	6a19      	ldr	r1, [r3, #32]
 8008c60:	7afa      	ldrb	r2, [r7, #11]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	430a      	orrs	r2, r1
 8008c68:	621a      	str	r2, [r3, #32]
 8008c6a:	e039      	b.n	8008ce0 <i2c_Config+0x170>
	}
	else
	{
		//Seleccionamos el modo Fast
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	69da      	ldr	r2, [r3, #28]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c7a:	61da      	str	r2, [r3, #28]
		ptrHandlerI2C->prtI2Cx->CCR |= I2C_CCR_FS;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	69da      	ldr	r2, [r3, #28]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c8a:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (2500*clockAPB1)/3000;
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
 8008c8e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008c92:	fb02 f303 	mul.w	r3, r2, r3
 8008c96:	4a20      	ldr	r2, [pc, #128]	; (8008d18 <i2c_Config+0x1a8>)
 8008c98:	fb82 1203 	smull	r1, r2, r2, r3
 8008c9c:	1192      	asrs	r2, r2, #6
 8008c9e:	17db      	asrs	r3, r3, #31
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	69d9      	ldr	r1, [r3, #28]
 8008caa:	89ba      	ldrh	r2, [r7, #12]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	430a      	orrs	r2, r1
 8008cb2:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((300*clockAPB1)/1000)+1;
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
 8008cb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008cba:	fb02 f303 	mul.w	r3, r2, r3
 8008cbe:	4a17      	ldr	r2, [pc, #92]	; (8008d1c <i2c_Config+0x1ac>)
 8008cc0:	fb82 1203 	smull	r1, r2, r2, r3
 8008cc4:	1192      	asrs	r2, r2, #6
 8008cc6:	17db      	asrs	r3, r3, #31
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	3301      	adds	r3, #1
 8008cce:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	6a19      	ldr	r1, [r3, #32]
 8008cd6:	7afa      	ldrb	r2, [r7, #11]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	430a      	orrs	r2, r1
 8008cde:	621a      	str	r2, [r3, #32]
	}

	//-----------------------------------5) Activamos el modulo I2C------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_PE;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f022 0201 	bic.w	r2, r2, #1
 8008cee:	601a      	str	r2, [r3, #0]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_PE;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f042 0201 	orr.w	r2, r2, #1
 8008cfe:	601a      	str	r2, [r3, #0]
}
 8008d00:	bf00      	nop
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	40005400 	.word	0x40005400
 8008d0c:	40023800 	.word	0x40023800
 8008d10:	40005800 	.word	0x40005800
 8008d14:	40005c00 	.word	0x40005c00
 8008d18:	057619f1 	.word	0x057619f1
 8008d1c:	10624dd3 	.word	0x10624dd3

08008d20 <i2c_StartTrasaction>:

//----------------------------------------Funciones para la Transaccion----------------------------------------
//Funcion para empezar la Transaccion
void i2c_StartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
	/*verificamos que la linea no esta ocupada
	 * bit "busy" en I2C
	 */
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 8008d28:	e000      	b.n	8008d2c <i2c_StartTrasaction+0xc>
	{
		__NOP();
 8008d2a:	bf00      	nop
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	699b      	ldr	r3, [r3, #24]
 8008d32:	f003 0302 	and.w	r3, r3, #2
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1f7      	bne.n	8008d2a <i2c_StartTrasaction+0xa>
	}
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d48:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8008d4a:	e000      	b.n	8008d4e <i2c_StartTrasaction+0x2e>
	{
		__NOP();
 8008d4c:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	695b      	ldr	r3, [r3, #20]
 8008d54:	f003 0301 	and.w	r3, r3, #1
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d0f7      	beq.n	8008d4c <i2c_StartTrasaction+0x2c>
	}
}
 8008d5c:	bf00      	nop
 8008d5e:	bf00      	nop
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <i2c_ReStartTrasaction>:

//Generar de nuevo una señal para empazar la Transaccion
void i2c_ReStartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b083      	sub	sp, #12
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d80:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8008d82:	e000      	b.n	8008d86 <i2c_ReStartTrasaction+0x1c>
	{
		__NOP();
 8008d84:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	695b      	ldr	r3, [r3, #20]
 8008d8c:	f003 0301 	and.w	r3, r3, #1
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d0f7      	beq.n	8008d84 <i2c_ReStartTrasaction+0x1a>
	}
}
 8008d94:	bf00      	nop
 8008d96:	bf00      	nop
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <i2c_SendSlaveAddressRW>:

//Funcion para enviar la direcion de Slave ademas de definir la lectura o escritura del Sclave
void i2c_SendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite)
{
 8008da2:	b480      	push	{r7}
 8008da4:	b085      	sub	sp, #20
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	460b      	mov	r3, r1
 8008dac:	70fb      	strb	r3, [r7, #3]
 8008dae:	4613      	mov	r3, r2
 8008db0:	70bb      	strb	r3, [r7, #2]
	//Definimos una variable auxiliar
	uint8_t auxByte = 0;
 8008db2:	2300      	movs	r3, #0
 8008db4:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	//Cargamos la direccion del Sclave, ademas cargamos el bit de lectura o escritura
	ptrHandlerI2C->prtI2Cx->DR = (slaveAddress<<1) | readOrWrite;
 8008db6:	78fb      	ldrb	r3, [r7, #3]
 8008db8:	005a      	lsls	r2, r3, #1
 8008dba:	78bb      	ldrb	r3, [r7, #2]
 8008dbc:	431a      	orrs	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "ADDR" del evento "Address" se levante
	//Se limpia la bandera "ADDR" leyendo SR1->leyendo en SR2
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 8008dc4:	e000      	b.n	8008dc8 <i2c_SendSlaveAddressRW+0x26>
	{
		__NOP();
 8008dc6:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	f003 0302 	and.w	r3, r3, #2
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d0f7      	beq.n	8008dc6 <i2c_SendSlaveAddressRW+0x24>
	}
	//Se limpia la bandera "ADDR"
	auxByte = ptrHandlerI2C->prtI2Cx->SR1;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	695b      	ldr	r3, [r3, #20]
 8008ddc:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->prtI2Cx->SR2;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	73fb      	strb	r3, [r7, #15]
}
 8008de6:	bf00      	nop
 8008de8:	3714      	adds	r7, #20
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <i2c_SendMemoryAddress>:

//Enviamos la direccion de memoria que deseamos leer o escribir
void i2c_SendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr)
{
 8008df2:	b480      	push	{r7}
 8008df4:	b083      	sub	sp, #12
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	70fb      	strb	r3, [r7, #3]
	//Enviamos la direccion de memoria que desamos leer
	ptrHandlerI2C->prtI2Cx->DR = memAddr;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	78fa      	ldrb	r2, [r7, #3]
 8008e04:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "TXE" del evento "Data1" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 8008e06:	e000      	b.n	8008e0a <i2c_SendMemoryAddress+0x18>
	{
		__NOP();
 8008e08:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	695b      	ldr	r3, [r3, #20]
 8008e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d0f7      	beq.n	8008e08 <i2c_SendMemoryAddress+0x16>
	}
}
 8008e18:	bf00      	nop
 8008e1a:	bf00      	nop
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr

08008e26 <i2c_SendDataByte>:

//Escritura de datos
void i2c_SendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite)
{
 8008e26:	b480      	push	{r7}
 8008e28:	b083      	sub	sp, #12
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	460b      	mov	r3, r1
 8008e30:	70fb      	strb	r3, [r7, #3]
	//Cargamos el valor que desasmos escribir
	ptrHandlerI2C->prtI2Cx->DR = dataToWrite;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	78fa      	ldrb	r2, [r7, #3]
 8008e38:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "BTF" del evento "Transmision" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_BTF))
 8008e3a:	e000      	b.n	8008e3e <i2c_SendDataByte+0x18>
	{
		__NOP();
 8008e3c:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_BTF))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	695b      	ldr	r3, [r3, #20]
 8008e44:	f003 0304 	and.w	r3, r3, #4
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d0f7      	beq.n	8008e3c <i2c_SendDataByte+0x16>
	}
}
 8008e4c:	bf00      	nop
 8008e4e:	bf00      	nop
 8008e50:	370c      	adds	r7, #12
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr

08008e5a <i2c_ReadDataByte>:

//Lectura de datos
uint8_t i2c_ReadDataByte(I2C_Handler_t *ptrHandlerI2C)
{
 8008e5a:	b480      	push	{r7}
 8008e5c:	b083      	sub	sp, #12
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
	//Esperamos a que la bandera "RxNE" del evento "Recepcion" se levante
	//Se limpia la bandera "RxNE" leyendo el registro DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 8008e62:	e000      	b.n	8008e66 <i2c_ReadDataByte+0xc>
	{
		__NOP();
 8008e64:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	695b      	ldr	r3, [r3, #20]
 8008e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d0f7      	beq.n	8008e64 <i2c_ReadDataByte+0xa>
	}
	//guardamos los datos recibimos
	ptrHandlerI2C->dataI2C = ptrHandlerI2C->prtI2Cx->DR;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C ;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	799b      	ldrb	r3, [r3, #6]
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <i2c_SendNoAck>:

//Funcion para activar la indicaicon de NoACK(indicacion para el Sclave de terminar la transmision de datos)
void i2c_SendNoAck(I2C_Handler_t *ptrHandlerI2C)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
	//Esribimos cero en el bit Ack del registro CR1
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_ACK;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ea6:	601a      	str	r2, [r3, #0]

}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <i2c_StopTrasaction>:
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_ACK;
}

//Funcion para generar el Stop bit
void i2c_StopTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_STOP;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008eca:	601a      	str	r2, [r3, #0]
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <i2c_ReadSingleRegister>:

//------------------------------------Funciones para la comunicacion por I2C----------------------------------------

uint8_t i2c_ReadSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	70fb      	strb	r3, [r7, #3]
	//0. Creacion de una variable auxiliara para recibir el dato leido
	uint8_t auxRead = 0;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	73fb      	strb	r3, [r7, #15]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7ff ff19 	bl	8008d20 <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	791b      	ldrb	r3, [r3, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f7ff ff53 	bl	8008da2 <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos leer
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 8008efc:	78fb      	ldrb	r3, [r7, #3]
 8008efe:	4619      	mov	r1, r3
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7ff ff76 	bl	8008df2 <i2c_SendMemoryAddress>
	//4. Creamos una condicion de re start
	i2c_ReStartTrasaction(ptrHandlerI2C);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7ff ff2f 	bl	8008d6a <i2c_ReStartTrasaction>
	//5. Enviamos la direccion del Sclavo e indicamos que se desea leer el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_READ_DATA);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	791b      	ldrb	r3, [r3, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	4619      	mov	r1, r3
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f7ff ff44 	bl	8008da2 <i2c_SendSlaveAddressRW>
	//6. Leemos el dato que envia el Sclavo
	auxRead = i2c_ReadDataByte(ptrHandlerI2C);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7ff ff9d 	bl	8008e5a <i2c_ReadDataByte>
 8008f20:	4603      	mov	r3, r0
 8008f22:	73fb      	strb	r3, [r7, #15]
	//7. Generamso la condicio de NoAck
	i2c_SendNoAck(ptrHandlerI2C);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f7ff ffb3 	bl	8008e90 <i2c_SendNoAck>
	//8. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7ff ffc2 	bl	8008eb4 <i2c_StopTrasaction>

	return auxRead;
 8008f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <i2c_WriteSingleRegister>:

void i2c_WriteSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead, uint8_t newValue)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b082      	sub	sp, #8
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	460b      	mov	r3, r1
 8008f44:	70fb      	strb	r3, [r7, #3]
 8008f46:	4613      	mov	r3, r2
 8008f48:	70bb      	strb	r3, [r7, #2]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f7ff fee8 	bl	8008d20 <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	791b      	ldrb	r3, [r3, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7ff ff22 	bl	8008da2 <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos escribir
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 8008f5e:	78fb      	ldrb	r3, [r7, #3]
 8008f60:	4619      	mov	r1, r3
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7ff ff45 	bl	8008df2 <i2c_SendMemoryAddress>
	//4. Enviamos el dato que se desea escribir en el Sclave
	i2c_SendDataByte(ptrHandlerI2C, newValue);
 8008f68:	78bb      	ldrb	r3, [r7, #2]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f7ff ff5a 	bl	8008e26 <i2c_SendDataByte>
	//5. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7ff ff9e 	bl	8008eb4 <i2c_StopTrasaction>
}
 8008f78:	bf00      	nop
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	4603      	mov	r3, r0
 8008f88:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 8008f8a:	4a39      	ldr	r2, [pc, #228]	; (8009070 <configPLL+0xf0>)
 8008f8c:	79fb      	ldrb	r3, [r7, #7]
 8008f8e:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 8008f90:	79fb      	ldrb	r3, [r7, #7]
 8008f92:	2b31      	cmp	r3, #49	; 0x31
 8008f94:	d804      	bhi.n	8008fa0 <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 8008f96:	4b37      	ldr	r3, [pc, #220]	; (8009074 <configPLL+0xf4>)
 8008f98:	4a36      	ldr	r2, [pc, #216]	; (8009074 <configPLL+0xf4>)
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	6093      	str	r3, [r2, #8]
 8008f9e:	e005      	b.n	8008fac <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8008fa0:	4b34      	ldr	r3, [pc, #208]	; (8009074 <configPLL+0xf4>)
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	4a33      	ldr	r2, [pc, #204]	; (8009074 <configPLL+0xf4>)
 8008fa6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8008faa:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 8008fac:	4b31      	ldr	r3, [pc, #196]	; (8009074 <configPLL+0xf4>)
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	4a30      	ldr	r2, [pc, #192]	; (8009074 <configPLL+0xf4>)
 8008fb2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008fb6:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 8008fb8:	4b2e      	ldr	r3, [pc, #184]	; (8009074 <configPLL+0xf4>)
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	4a2d      	ldr	r2, [pc, #180]	; (8009074 <configPLL+0xf4>)
 8008fbe:	f043 0312 	orr.w	r3, r3, #18
 8008fc2:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 8008fc4:	4b2b      	ldr	r3, [pc, #172]	; (8009074 <configPLL+0xf4>)
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	79fa      	ldrb	r2, [r7, #7]
 8008fca:	0092      	lsls	r2, r2, #2
 8008fcc:	3a0e      	subs	r2, #14
 8008fce:	0192      	lsls	r2, r2, #6
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	4a28      	ldr	r2, [pc, #160]	; (8009074 <configPLL+0xf4>)
 8008fd4:	430b      	orrs	r3, r1
 8008fd6:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 8008fd8:	4b26      	ldr	r3, [pc, #152]	; (8009074 <configPLL+0xf4>)
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	4a25      	ldr	r2, [pc, #148]	; (8009074 <configPLL+0xf4>)
 8008fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fe2:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 8008fe4:	4b23      	ldr	r3, [pc, #140]	; (8009074 <configPLL+0xf4>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a22      	ldr	r2, [pc, #136]	; (8009074 <configPLL+0xf4>)
 8008fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fee:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8008ff0:	e000      	b.n	8008ff4 <configPLL+0x74>
	{
		__NOP();
 8008ff2:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8008ff4:	4b1f      	ldr	r3, [pc, #124]	; (8009074 <configPLL+0xf4>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d0f8      	beq.n	8008ff2 <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 8009000:	79fb      	ldrb	r3, [r7, #7]
 8009002:	2b5a      	cmp	r3, #90	; 0x5a
 8009004:	d909      	bls.n	800901a <configPLL+0x9a>
 8009006:	79fb      	ldrb	r3, [r7, #7]
 8009008:	2b64      	cmp	r3, #100	; 0x64
 800900a:	d806      	bhi.n	800901a <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 800900c:	4b1a      	ldr	r3, [pc, #104]	; (8009078 <configPLL+0xf8>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a19      	ldr	r2, [pc, #100]	; (8009078 <configPLL+0xf8>)
 8009012:	f043 0303 	orr.w	r3, r3, #3
 8009016:	6013      	str	r3, [r2, #0]
 8009018:	e01d      	b.n	8009056 <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 800901a:	79fb      	ldrb	r3, [r7, #7]
 800901c:	2b40      	cmp	r3, #64	; 0x40
 800901e:	d909      	bls.n	8009034 <configPLL+0xb4>
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	2b5a      	cmp	r3, #90	; 0x5a
 8009024:	d806      	bhi.n	8009034 <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 8009026:	4b14      	ldr	r3, [pc, #80]	; (8009078 <configPLL+0xf8>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a13      	ldr	r2, [pc, #76]	; (8009078 <configPLL+0xf8>)
 800902c:	f043 0302 	orr.w	r3, r3, #2
 8009030:	6013      	str	r3, [r2, #0]
 8009032:	e010      	b.n	8009056 <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 8009034:	79fb      	ldrb	r3, [r7, #7]
 8009036:	2b1e      	cmp	r3, #30
 8009038:	d909      	bls.n	800904e <configPLL+0xce>
 800903a:	79fb      	ldrb	r3, [r7, #7]
 800903c:	2b40      	cmp	r3, #64	; 0x40
 800903e:	d806      	bhi.n	800904e <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 8009040:	4b0d      	ldr	r3, [pc, #52]	; (8009078 <configPLL+0xf8>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a0c      	ldr	r2, [pc, #48]	; (8009078 <configPLL+0xf8>)
 8009046:	f043 0301 	orr.w	r3, r3, #1
 800904a:	6013      	str	r3, [r2, #0]
 800904c:	e003      	b.n	8009056 <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 800904e:	4b0a      	ldr	r3, [pc, #40]	; (8009078 <configPLL+0xf8>)
 8009050:	4a09      	ldr	r2, [pc, #36]	; (8009078 <configPLL+0xf8>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 8009056:	4b07      	ldr	r3, [pc, #28]	; (8009074 <configPLL+0xf4>)
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	4a06      	ldr	r2, [pc, #24]	; (8009074 <configPLL+0xf4>)
 800905c:	f043 0302 	orr.w	r3, r3, #2
 8009060:	6093      	str	r3, [r2, #8]

}
 8009062:	bf00      	nop
 8009064:	370c      	adds	r7, #12
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop
 8009070:	200136a4 	.word	0x200136a4
 8009074:	40023800 	.word	0x40023800
 8009078:	40023c00 	.word	0x40023c00

0800907c <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 8009082:	2300      	movs	r3, #0
 8009084:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 8009086:	4b09      	ldr	r3, [pc, #36]	; (80090ac <getConfigPLL+0x30>)
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	f003 0303 	and.w	r3, r3, #3
 800908e:	2b02      	cmp	r3, #2
 8009090:	d103      	bne.n	800909a <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 8009092:	4b07      	ldr	r3, [pc, #28]	; (80090b0 <getConfigPLL+0x34>)
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	71fb      	strb	r3, [r7, #7]
 8009098:	e001      	b.n	800909e <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 800909a:	2310      	movs	r3, #16
 800909c:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 800909e:	79fb      	ldrb	r3, [r7, #7]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	40023800 	.word	0x40023800
 80090b0:	200136a4 	.word	0x200136a4

080090b4 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 80090ba:	f7ff ffdf 	bl	800907c <getConfigPLL>
 80090be:	4603      	mov	r3, r0
 80090c0:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 80090c2:	2300      	movs	r3, #0
 80090c4:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 80090c6:	79bb      	ldrb	r3, [r7, #6]
 80090c8:	2b31      	cmp	r3, #49	; 0x31
 80090ca:	d802      	bhi.n	80090d2 <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 80090cc:	79bb      	ldrb	r3, [r7, #6]
 80090ce:	71fb      	strb	r3, [r7, #7]
 80090d0:	e002      	b.n	80090d8 <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 80090d2:	79bb      	ldrb	r3, [r7, #6]
 80090d4:	089b      	lsrs	r3, r3, #2
 80090d6:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 80090d8:	79fb      	ldrb	r3, [r7, #7]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090f4:	d106      	bne.n	8009104 <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80090f6:	4b81      	ldr	r3, [pc, #516]	; (80092fc <pwm_Config+0x218>)
 80090f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fa:	4a80      	ldr	r2, [pc, #512]	; (80092fc <pwm_Config+0x218>)
 80090fc:	f043 0301 	orr.w	r3, r3, #1
 8009100:	6413      	str	r3, [r2, #64]	; 0x40
 8009102:	e024      	b.n	800914e <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	4a7d      	ldr	r2, [pc, #500]	; (8009300 <pwm_Config+0x21c>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d106      	bne.n	800911c <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800910e:	4b7b      	ldr	r3, [pc, #492]	; (80092fc <pwm_Config+0x218>)
 8009110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009112:	4a7a      	ldr	r2, [pc, #488]	; (80092fc <pwm_Config+0x218>)
 8009114:	f043 0302 	orr.w	r3, r3, #2
 8009118:	6413      	str	r3, [r2, #64]	; 0x40
 800911a:	e018      	b.n	800914e <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	4a78      	ldr	r2, [pc, #480]	; (8009304 <pwm_Config+0x220>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d106      	bne.n	8009134 <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8009126:	4b75      	ldr	r3, [pc, #468]	; (80092fc <pwm_Config+0x218>)
 8009128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912a:	4a74      	ldr	r2, [pc, #464]	; (80092fc <pwm_Config+0x218>)
 800912c:	f043 0304 	orr.w	r3, r3, #4
 8009130:	6413      	str	r3, [r2, #64]	; 0x40
 8009132:	e00c      	b.n	800914e <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	4a73      	ldr	r2, [pc, #460]	; (8009308 <pwm_Config+0x224>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d106      	bne.n	800914c <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800913e:	4b6f      	ldr	r3, [pc, #444]	; (80092fc <pwm_Config+0x218>)
 8009140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009142:	4a6e      	ldr	r2, [pc, #440]	; (80092fc <pwm_Config+0x218>)
 8009144:	f043 0308 	orr.w	r3, r3, #8
 8009148:	6413      	str	r3, [r2, #64]	; 0x40
 800914a:	e000      	b.n	800914e <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 800914c:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fa4c 	bl	80095ec <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	2b03      	cmp	r3, #3
 800915a:	f200 8118 	bhi.w	800938e <pwm_Config+0x2aa>
 800915e:	a201      	add	r2, pc, #4	; (adr r2, 8009164 <pwm_Config+0x80>)
 8009160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009164:	08009175 	.word	0x08009175
 8009168:	080091f7 	.word	0x080091f7
 800916c:	08009279 	.word	0x08009279
 8009170:	0800930d 	.word	0x0800930d
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	699a      	ldr	r2, [r3, #24]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	f022 0203 	bic.w	r2, r2, #3
 8009182:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	699a      	ldr	r2, [r3, #24]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009192:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	699a      	ldr	r2, [r3, #24]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80091a2:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	699a      	ldr	r2, [r3, #24]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	f022 0208 	bic.w	r2, r2, #8
 80091b2:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	699a      	ldr	r2, [r3, #24]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	f042 0208 	orr.w	r2, r2, #8
 80091c2:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	699a      	ldr	r2, [r3, #24]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	f022 0204 	bic.w	r2, r2, #4
 80091d2:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	699a      	ldr	r2, [r3, #24]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	f042 0204 	orr.w	r2, r2, #4
 80091e2:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	699a      	ldr	r2, [r3, #24]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091f2:	619a      	str	r2, [r3, #24]

		break;
 80091f4:	e0cc      	b.n	8009390 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	699a      	ldr	r2, [r3, #24]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	f022 0203 	bic.w	r2, r2, #3
 8009204:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	699a      	ldr	r2, [r3, #24]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009214:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	699a      	ldr	r2, [r3, #24]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8009224:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	699a      	ldr	r2, [r3, #24]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009234:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	699a      	ldr	r2, [r3, #24]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009244:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	699a      	ldr	r2, [r3, #24]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009254:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	699a      	ldr	r2, [r3, #24]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009264:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	699a      	ldr	r2, [r3, #24]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009274:	619a      	str	r2, [r3, #24]

		break;
 8009276:	e08b      	b.n	8009390 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	69da      	ldr	r2, [r3, #28]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	f022 0203 	bic.w	r2, r2, #3
 8009286:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	69da      	ldr	r2, [r3, #28]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009296:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	69da      	ldr	r2, [r3, #28]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80092a6:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	69da      	ldr	r2, [r3, #28]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	f022 0208 	bic.w	r2, r2, #8
 80092b6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	69da      	ldr	r2, [r3, #28]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	f042 0208 	orr.w	r2, r2, #8
 80092c6:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	69da      	ldr	r2, [r3, #28]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	f022 0204 	bic.w	r2, r2, #4
 80092d6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	69da      	ldr	r2, [r3, #28]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	f042 0204 	orr.w	r2, r2, #4
 80092e6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	69da      	ldr	r2, [r3, #28]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092f6:	61da      	str	r2, [r3, #28]

		break;
 80092f8:	e04a      	b.n	8009390 <pwm_Config+0x2ac>
 80092fa:	bf00      	nop
 80092fc:	40023800 	.word	0x40023800
 8009300:	40000400 	.word	0x40000400
 8009304:	40000800 	.word	0x40000800
 8009308:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	69da      	ldr	r2, [r3, #28]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800931a:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	69da      	ldr	r2, [r3, #28]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800932a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	69da      	ldr	r2, [r3, #28]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800933a:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	69da      	ldr	r2, [r3, #28]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	689b      	ldr	r3, [r3, #8]
 8009346:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800934a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	69da      	ldr	r2, [r3, #28]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800935a:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	69da      	ldr	r2, [r3, #28]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800936a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	69da      	ldr	r2, [r3, #28]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800937a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	69da      	ldr	r2, [r3, #28]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800938a:	61da      	str	r2, [r3, #28]

		break;
 800938c:	e000      	b.n	8009390 <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 800938e:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	791b      	ldrb	r3, [r3, #4]
 8009394:	4619      	mov	r1, r3
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f896 	bl	80094c8 <statusPolarityPWM>

}
 800939c:	bf00      	nop
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	460b      	mov	r3, r1
 80093ae:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	2b03      	cmp	r3, #3
 80093b6:	d87f      	bhi.n	80094b8 <statusInOutPWM+0x114>
 80093b8:	a201      	add	r2, pc, #4	; (adr r2, 80093c0 <statusInOutPWM+0x1c>)
 80093ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093be:	bf00      	nop
 80093c0:	080093d1 	.word	0x080093d1
 80093c4:	0800940b 	.word	0x0800940b
 80093c8:	08009445 	.word	0x08009445
 80093cc:	0800947f 	.word	0x0800947f
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 80093d0:	78fb      	ldrb	r3, [r7, #3]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d110      	bne.n	80093f8 <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	6a1a      	ldr	r2, [r3, #32]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	f022 0201 	bic.w	r2, r2, #1
 80093e4:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	6a1a      	ldr	r2, [r3, #32]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	f042 0201 	orr.w	r2, r2, #1
 80093f4:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 80093f6:	e060      	b.n	80094ba <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	6a1a      	ldr	r2, [r3, #32]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	f022 0201 	bic.w	r2, r2, #1
 8009406:	621a      	str	r2, [r3, #32]
		break;
 8009408:	e057      	b.n	80094ba <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 800940a:	78fb      	ldrb	r3, [r7, #3]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d110      	bne.n	8009432 <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	6a1a      	ldr	r2, [r3, #32]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	f022 0210 	bic.w	r2, r2, #16
 800941e:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	6a1a      	ldr	r2, [r3, #32]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	f042 0210 	orr.w	r2, r2, #16
 800942e:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 8009430:	e043      	b.n	80094ba <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	6a1a      	ldr	r2, [r3, #32]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	f022 0210 	bic.w	r2, r2, #16
 8009440:	621a      	str	r2, [r3, #32]
		break;
 8009442:	e03a      	b.n	80094ba <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 8009444:	78fb      	ldrb	r3, [r7, #3]
 8009446:	2b01      	cmp	r3, #1
 8009448:	d110      	bne.n	800946c <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	6a1a      	ldr	r2, [r3, #32]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009458:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	6a1a      	ldr	r2, [r3, #32]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009468:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 800946a:	e026      	b.n	80094ba <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	6a1a      	ldr	r2, [r3, #32]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800947a:	621a      	str	r2, [r3, #32]
		break;
 800947c:	e01d      	b.n	80094ba <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 800947e:	78fb      	ldrb	r3, [r7, #3]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d110      	bne.n	80094a6 <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	6a1a      	ldr	r2, [r3, #32]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009492:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	6a1a      	ldr	r2, [r3, #32]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80094a2:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 80094a4:	e009      	b.n	80094ba <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	6a1a      	ldr	r2, [r3, #32]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80094b4:	621a      	str	r2, [r3, #32]
		break;
 80094b6:	e000      	b.n	80094ba <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 80094b8:	bf00      	nop
	}
	}
}
 80094ba:	bf00      	nop
 80094bc:	370c      	adds	r7, #12
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop

080094c8 <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	460b      	mov	r3, r1
 80094d2:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	2b03      	cmp	r3, #3
 80094da:	d87f      	bhi.n	80095dc <statusPolarityPWM+0x114>
 80094dc:	a201      	add	r2, pc, #4	; (adr r2, 80094e4 <statusPolarityPWM+0x1c>)
 80094de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e2:	bf00      	nop
 80094e4:	080094f5 	.word	0x080094f5
 80094e8:	0800952f 	.word	0x0800952f
 80094ec:	08009569 	.word	0x08009569
 80094f0:	080095a3 	.word	0x080095a3
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 80094f4:	78fb      	ldrb	r3, [r7, #3]
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d110      	bne.n	800951c <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	6a1a      	ldr	r2, [r3, #32]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	f022 0202 	bic.w	r2, r2, #2
 8009508:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	6a1a      	ldr	r2, [r3, #32]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	f042 0202 	orr.w	r2, r2, #2
 8009518:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 800951a:	e060      	b.n	80095de <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	6a1a      	ldr	r2, [r3, #32]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	f022 0202 	bic.w	r2, r2, #2
 800952a:	621a      	str	r2, [r3, #32]
		break;
 800952c:	e057      	b.n	80095de <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 800952e:	78fb      	ldrb	r3, [r7, #3]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d110      	bne.n	8009556 <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	6a1a      	ldr	r2, [r3, #32]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	f022 0220 	bic.w	r2, r2, #32
 8009542:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	6a1a      	ldr	r2, [r3, #32]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	f042 0220 	orr.w	r2, r2, #32
 8009552:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 8009554:	e043      	b.n	80095de <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	6a1a      	ldr	r2, [r3, #32]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	f022 0220 	bic.w	r2, r2, #32
 8009564:	621a      	str	r2, [r3, #32]
		break;
 8009566:	e03a      	b.n	80095de <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 8009568:	78fb      	ldrb	r3, [r7, #3]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d110      	bne.n	8009590 <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	6a1a      	ldr	r2, [r3, #32]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800957c:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	6a1a      	ldr	r2, [r3, #32]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800958c:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 800958e:	e026      	b.n	80095de <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	6a1a      	ldr	r2, [r3, #32]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800959e:	621a      	str	r2, [r3, #32]
		break;
 80095a0:	e01d      	b.n	80095de <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 80095a2:	78fb      	ldrb	r3, [r7, #3]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d110      	bne.n	80095ca <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	6a1a      	ldr	r2, [r3, #32]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095b6:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	6a1a      	ldr	r2, [r3, #32]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095c6:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 80095c8:	e009      	b.n	80095de <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	6a1a      	ldr	r2, [r3, #32]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095d8:	621a      	str	r2, [r3, #32]
		break;
 80095da:	e000      	b.n	80095de <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 80095dc:	bf00      	nop
	}
	}

}
 80095de:	bf00      	nop
 80095e0:	370c      	adds	r7, #12
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop

080095ec <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	2b03      	cmp	r3, #3
 80095fa:	d823      	bhi.n	8009644 <setDuttyCycle+0x58>
 80095fc:	a201      	add	r2, pc, #4	; (adr r2, 8009604 <setDuttyCycle+0x18>)
 80095fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009602:	bf00      	nop
 8009604:	08009615 	.word	0x08009615
 8009608:	08009621 	.word	0x08009621
 800960c:	0800962d 	.word	0x0800962d
 8009610:	08009639 	.word	0x08009639
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	885a      	ldrh	r2, [r3, #2]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800961e:	e012      	b.n	8009646 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	885a      	ldrh	r2, [r3, #2]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800962a:	e00c      	b.n	8009646 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	885a      	ldrh	r2, [r3, #2]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8009636:	e006      	b.n	8009646 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	885a      	ldrh	r2, [r3, #2]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8009642:	e000      	b.n	8009646 <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 8009644:	bf00      	nop
	}
	}

}
 8009646:	bf00      	nop
 8009648:	370c      	adds	r7, #12
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop

08009654 <updateDuttyCyclePercentageFloat>:
	setDuttyCycle(prtPwmHandler);
}

//Actualizacion del Dutty con porcentaje decimal
void updateDuttyCyclePercentageFloat(PWM_Handler_t *prtPwmHandler, float newDuttyPercentage)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	ed87 0a00 	vstr	s0, [r7]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = (uint16_t) ((prtPwmHandler->ptrTIMx->ARR)/100)*(newDuttyPercentage);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009666:	4a0d      	ldr	r2, [pc, #52]	; (800969c <updateDuttyCyclePercentageFloat+0x48>)
 8009668:	fba2 2303 	umull	r2, r3, r2, r3
 800966c:	095b      	lsrs	r3, r3, #5
 800966e:	b29b      	uxth	r3, r3
 8009670:	ee07 3a90 	vmov	s15, r3
 8009674:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009678:	edd7 7a00 	vldr	s15, [r7]
 800967c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009684:	ee17 3a90 	vmov	r3, s15
 8009688:	b29a      	uxth	r2, r3
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f7ff ffac 	bl	80095ec <setDuttyCycle>
}
 8009694:	bf00      	nop
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	51eb851f 	.word	0x51eb851f

080096a0 <__NVIC_EnableIRQ>:
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	4603      	mov	r3, r0
 80096a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80096aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	db0b      	blt.n	80096ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80096b2:	79fb      	ldrb	r3, [r7, #7]
 80096b4:	f003 021f 	and.w	r2, r3, #31
 80096b8:	4907      	ldr	r1, [pc, #28]	; (80096d8 <__NVIC_EnableIRQ+0x38>)
 80096ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096be:	095b      	lsrs	r3, r3, #5
 80096c0:	2001      	movs	r0, #1
 80096c2:	fa00 f202 	lsl.w	r2, r0, r2
 80096c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80096ca:	bf00      	nop
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	e000e100 	.word	0xe000e100

080096dc <__NVIC_SetPriority>:
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	4603      	mov	r3, r0
 80096e4:	6039      	str	r1, [r7, #0]
 80096e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80096e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	db0a      	blt.n	8009706 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	b2da      	uxtb	r2, r3
 80096f4:	490c      	ldr	r1, [pc, #48]	; (8009728 <__NVIC_SetPriority+0x4c>)
 80096f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096fa:	0112      	lsls	r2, r2, #4
 80096fc:	b2d2      	uxtb	r2, r2
 80096fe:	440b      	add	r3, r1
 8009700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009704:	e00a      	b.n	800971c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	b2da      	uxtb	r2, r3
 800970a:	4908      	ldr	r1, [pc, #32]	; (800972c <__NVIC_SetPriority+0x50>)
 800970c:	79fb      	ldrb	r3, [r7, #7]
 800970e:	f003 030f 	and.w	r3, r3, #15
 8009712:	3b04      	subs	r3, #4
 8009714:	0112      	lsls	r2, r2, #4
 8009716:	b2d2      	uxtb	r2, r2
 8009718:	440b      	add	r3, r1
 800971a:	761a      	strb	r2, [r3, #24]
}
 800971c:	bf00      	nop
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr
 8009728:	e000e100 	.word	0xe000e100
 800972c:	e000ed00 	.word	0xe000ed00

08009730 <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	4a8f      	ldr	r2, [pc, #572]	; (800997c <USART_Config+0x24c>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d107      	bne.n	8009752 <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 8009742:	4b8f      	ldr	r3, [pc, #572]	; (8009980 <USART_Config+0x250>)
 8009744:	2210      	movs	r2, #16
 8009746:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	4a8d      	ldr	r2, [pc, #564]	; (8009984 <USART_Config+0x254>)
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	e019      	b.n	8009786 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	4a8c      	ldr	r2, [pc, #560]	; (8009988 <USART_Config+0x258>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d108      	bne.n	800976e <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 800975c:	4b88      	ldr	r3, [pc, #544]	; (8009980 <USART_Config+0x250>)
 800975e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009762:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	4a88      	ldr	r2, [pc, #544]	; (800998c <USART_Config+0x25c>)
 800976a:	6013      	str	r3, [r2, #0]
 800976c:	e00b      	b.n	8009786 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	4a87      	ldr	r2, [pc, #540]	; (8009990 <USART_Config+0x260>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d106      	bne.n	8009786 <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 8009778:	4b81      	ldr	r3, [pc, #516]	; (8009980 <USART_Config+0x250>)
 800977a:	2220      	movs	r2, #32
 800977c:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	4a84      	ldr	r2, [pc, #528]	; (8009994 <USART_Config+0x264>)
 8009784:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	2200      	movs	r2, #0
 800978c:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	2200      	movs	r2, #0
 8009794:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	789b      	ldrb	r3, [r3, #2]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d03d      	beq.n	800981a <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	68da      	ldr	r2, [r3, #12]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097ac:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	68da      	ldr	r2, [r3, #12]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80097bc:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	68da      	ldr	r2, [r3, #12]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80097cc:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	68da      	ldr	r2, [r3, #12]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80097dc:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	789b      	ldrb	r3, [r3, #2]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d110      	bne.n	8009808 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	68da      	ldr	r2, [r3, #12]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80097f4:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	68da      	ldr	r2, [r3, #12]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009804:	60da      	str	r2, [r3, #12]
 8009806:	e018      	b.n	800983a <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	68da      	ldr	r2, [r3, #12]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009816:	60da      	str	r2, [r3, #12]
 8009818:	e00f      	b.n	800983a <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	68da      	ldr	r2, [r3, #12]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009828:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	68da      	ldr	r2, [r3, #12]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009838:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	78db      	ldrb	r3, [r3, #3]
 800983e:	2b03      	cmp	r3, #3
 8009840:	d84c      	bhi.n	80098dc <USART_Config+0x1ac>
 8009842:	a201      	add	r2, pc, #4	; (adr r2, 8009848 <USART_Config+0x118>)
 8009844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009848:	08009859 	.word	0x08009859
 800984c:	08009877 	.word	0x08009877
 8009850:	08009899 	.word	0x08009899
 8009854:	080098bb 	.word	0x080098bb
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	691a      	ldr	r2, [r3, #16]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009866:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	689a      	ldr	r2, [r3, #8]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	6912      	ldr	r2, [r2, #16]
 8009872:	611a      	str	r2, [r3, #16]
		break;
 8009874:	e041      	b.n	80098fa <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	691a      	ldr	r2, [r3, #16]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009884:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	691a      	ldr	r2, [r3, #16]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009894:	611a      	str	r2, [r3, #16]
		break;
 8009896:	e030      	b.n	80098fa <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	691a      	ldr	r2, [r3, #16]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80098a6:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	691a      	ldr	r2, [r3, #16]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098b6:	611a      	str	r2, [r3, #16]
		break;
 80098b8:	e01f      	b.n	80098fa <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	691a      	ldr	r2, [r3, #16]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80098c8:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	691a      	ldr	r2, [r3, #16]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80098d8:	611a      	str	r2, [r3, #16]
		break;
 80098da:	e00e      	b.n	80098fa <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	691a      	ldr	r2, [r3, #16]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80098ea:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	689a      	ldr	r2, [r3, #8]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	6912      	ldr	r2, [r2, #16]
 80098f6:	611a      	str	r2, [r3, #16]
		break;
 80098f8:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 80098fa:	2300      	movs	r3, #0
 80098fc:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	4a21      	ldr	r2, [pc, #132]	; (8009988 <USART_Config+0x258>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d104      	bne.n	8009912 <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8009908:	f7ff fbd4 	bl	80090b4 <getClockAPB1>
 800990c:	4603      	mov	r3, r0
 800990e:	73fb      	strb	r3, [r7, #15]
 8009910:	e003      	b.n	800991a <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 8009912:	f7ff fbb3 	bl	800907c <getConfigPLL>
 8009916:	4603      	mov	r3, r0
 8009918:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	785b      	ldrb	r3, [r3, #1]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10b      	bne.n	800993a <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 8009922:	7bfb      	ldrb	r3, [r7, #15]
 8009924:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8009928:	4618      	mov	r0, r3
 800992a:	f000 f95f 	bl	8009bec <getValueBaudRate>
 800992e:	4603      	mov	r3, r0
 8009930:	461a      	mov	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	609a      	str	r2, [r3, #8]
 8009938:	e02f      	b.n	800999a <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	785b      	ldrb	r3, [r3, #1]
 800993e:	2b01      	cmp	r3, #1
 8009940:	d10b      	bne.n	800995a <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 8009942:	7bfb      	ldrb	r3, [r7, #15]
 8009944:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8009948:	4618      	mov	r0, r3
 800994a:	f000 f94f 	bl	8009bec <getValueBaudRate>
 800994e:	4603      	mov	r3, r0
 8009950:	461a      	mov	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	609a      	str	r2, [r3, #8]
 8009958:	e01f      	b.n	800999a <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	785b      	ldrb	r3, [r3, #1]
 800995e:	2b02      	cmp	r3, #2
 8009960:	d11a      	bne.n	8009998 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 8009962:	7bfb      	ldrb	r3, [r7, #15]
 8009964:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8009968:	4618      	mov	r0, r3
 800996a:	f000 f93f 	bl	8009bec <getValueBaudRate>
 800996e:	4603      	mov	r3, r0
 8009970:	461a      	mov	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	609a      	str	r2, [r3, #8]
 8009978:	e00f      	b.n	800999a <USART_Config+0x26a>
 800997a:	bf00      	nop
 800997c:	40011000 	.word	0x40011000
 8009980:	40023800 	.word	0x40023800
 8009984:	200136a8 	.word	0x200136a8
 8009988:	40004400 	.word	0x40004400
 800998c:	200136ac 	.word	0x200136ac
 8009990:	40011400 	.word	0x40011400
 8009994:	200136b0 	.word	0x200136b0
	}
	else
	{
		__NOP();
 8009998:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	2b03      	cmp	r3, #3
 80099a0:	d866      	bhi.n	8009a70 <USART_Config+0x340>
 80099a2:	a201      	add	r2, pc, #4	; (adr r2, 80099a8 <USART_Config+0x278>)
 80099a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a8:	080099b9 	.word	0x080099b9
 80099ac:	080099db 	.word	0x080099db
 80099b0:	080099fd 	.word	0x080099fd
 80099b4:	08009a3f 	.word	0x08009a3f
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	68da      	ldr	r2, [r3, #12]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	f022 0208 	bic.w	r2, r2, #8
 80099c6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	68da      	ldr	r2, [r3, #12]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	f042 0208 	orr.w	r2, r2, #8
 80099d6:	60da      	str	r2, [r3, #12]

		break;
 80099d8:	e063      	b.n	8009aa2 <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	68da      	ldr	r2, [r3, #12]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	f022 0204 	bic.w	r2, r2, #4
 80099e8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	68da      	ldr	r2, [r3, #12]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	f042 0204 	orr.w	r2, r2, #4
 80099f8:	60da      	str	r2, [r3, #12]

		break;
 80099fa:	e052      	b.n	8009aa2 <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	68da      	ldr	r2, [r3, #12]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	f022 0208 	bic.w	r2, r2, #8
 8009a0a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	68da      	ldr	r2, [r3, #12]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	f042 0208 	orr.w	r2, r2, #8
 8009a1a:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	68da      	ldr	r2, [r3, #12]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	f022 0204 	bic.w	r2, r2, #4
 8009a2a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	68da      	ldr	r2, [r3, #12]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	f042 0204 	orr.w	r2, r2, #4
 8009a3a:	60da      	str	r2, [r3, #12]


		break;
 8009a3c:	e031      	b.n	8009aa2 <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	68da      	ldr	r2, [r3, #12]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a4c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	68da      	ldr	r2, [r3, #12]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	f022 0208 	bic.w	r2, r2, #8
 8009a5c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	68da      	ldr	r2, [r3, #12]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	f022 0204 	bic.w	r2, r2, #4
 8009a6c:	60da      	str	r2, [r3, #12]
		break;
 8009a6e:	e018      	b.n	8009aa2 <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	68da      	ldr	r2, [r3, #12]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a7e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	68da      	ldr	r2, [r3, #12]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	f022 0208 	bic.w	r2, r2, #8
 8009a8e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	68da      	ldr	r2, [r3, #12]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	f022 0204 	bic.w	r2, r2, #4
 8009a9e:	60da      	str	r2, [r3, #12]
		break;
 8009aa0:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8009aa2:	b672      	cpsid	i
}
 8009aa4:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	791b      	ldrb	r3, [r3, #4]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d110      	bne.n	8009ad0 <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	68da      	ldr	r2, [r3, #12]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	f022 0220 	bic.w	r2, r2, #32
 8009abc:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	68da      	ldr	r2, [r3, #12]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	f042 0220 	orr.w	r2, r2, #32
 8009acc:	60da      	str	r2, [r3, #12]
 8009ace:	e007      	b.n	8009ae0 <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	68da      	ldr	r2, [r3, #12]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	f022 0220 	bic.w	r2, r2, #32
 8009ade:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	791b      	ldrb	r3, [r3, #4]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d003      	beq.n	8009af0 <USART_Config+0x3c0>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	795b      	ldrb	r3, [r3, #5]
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d11a      	bne.n	8009b26 <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	4a1a      	ldr	r2, [pc, #104]	; (8009b60 <USART_Config+0x430>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d103      	bne.n	8009b02 <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 8009afa:	2025      	movs	r0, #37	; 0x25
 8009afc:	f7ff fdd0 	bl	80096a0 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8009b00:	e013      	b.n	8009b2a <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	4a17      	ldr	r2, [pc, #92]	; (8009b64 <USART_Config+0x434>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d103      	bne.n	8009b14 <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 8009b0c:	2026      	movs	r0, #38	; 0x26
 8009b0e:	f7ff fdc7 	bl	80096a0 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8009b12:	e00a      	b.n	8009b2a <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	4a13      	ldr	r2, [pc, #76]	; (8009b68 <USART_Config+0x438>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d105      	bne.n	8009b2a <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 8009b1e:	2047      	movs	r0, #71	; 0x47
 8009b20:	f7ff fdbe 	bl	80096a0 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8009b24:	e001      	b.n	8009b2a <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 8009b26:	bf00      	nop
 8009b28:	e000      	b.n	8009b2c <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8009b2a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8009b2c:	b662      	cpsie	i
}
 8009b2e:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	2b03      	cmp	r3, #3
 8009b36:	d00f      	beq.n	8009b58 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	68da      	ldr	r2, [r3, #12]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b46:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	68da      	ldr	r2, [r3, #12]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b56:	60da      	str	r2, [r3, #12]
	}
}
 8009b58:	bf00      	nop
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	40011000 	.word	0x40011000
 8009b64:	40004400 	.word	0x40004400
 8009b68:	40011400 	.word	0x40011400

08009b6c <usart_Config_Init_Priority>:

//------------Funcion para configurar las interrupciones------------------
void usart_Config_Init_Priority(USART_Handler_t *ptrUsartHandler, uint8_t newPriority)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	460b      	mov	r3, r1
 8009b76:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b78:	b672      	cpsid	i
}
 8009b7a:	bf00      	nop
	//Desactivamos las interupciones globales
	__disable_irq();
	//Verificamos si se selecciono alguna interrupcion
		if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	791b      	ldrb	r3, [r3, #4]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d003      	beq.n	8009b8c <usart_Config_Init_Priority+0x20>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	795b      	ldrb	r3, [r3, #5]
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d120      	bne.n	8009bce <usart_Config_Init_Priority+0x62>
		{
			//Matriculamos la interrupcion en el NVIC
			if(ptrUsartHandler->ptrUSARTx == USART1)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	4a13      	ldr	r2, [pc, #76]	; (8009be0 <usart_Config_Init_Priority+0x74>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d105      	bne.n	8009ba2 <usart_Config_Init_Priority+0x36>
			{
				NVIC_SetPriority(USART1_IRQn, newPriority);
 8009b96:	78fb      	ldrb	r3, [r7, #3]
 8009b98:	4619      	mov	r1, r3
 8009b9a:	2025      	movs	r0, #37	; 0x25
 8009b9c:	f7ff fd9e 	bl	80096dc <__NVIC_SetPriority>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 8009ba0:	e017      	b.n	8009bd2 <usart_Config_Init_Priority+0x66>
			}
			else if(ptrUsartHandler->ptrUSARTx == USART2)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	4a0f      	ldr	r2, [pc, #60]	; (8009be4 <usart_Config_Init_Priority+0x78>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d105      	bne.n	8009bb8 <usart_Config_Init_Priority+0x4c>
			{
				NVIC_SetPriority(USART2_IRQn, newPriority);
 8009bac:	78fb      	ldrb	r3, [r7, #3]
 8009bae:	4619      	mov	r1, r3
 8009bb0:	2026      	movs	r0, #38	; 0x26
 8009bb2:	f7ff fd93 	bl	80096dc <__NVIC_SetPriority>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 8009bb6:	e00c      	b.n	8009bd2 <usart_Config_Init_Priority+0x66>
			}
			else if(ptrUsartHandler->ptrUSARTx == USART6)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	4a0a      	ldr	r2, [pc, #40]	; (8009be8 <usart_Config_Init_Priority+0x7c>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d107      	bne.n	8009bd2 <usart_Config_Init_Priority+0x66>
			{
				NVIC_SetPriority(USART6_IRQn, newPriority);
 8009bc2:	78fb      	ldrb	r3, [r7, #3]
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	2047      	movs	r0, #71	; 0x47
 8009bc8:	f7ff fd88 	bl	80096dc <__NVIC_SetPriority>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 8009bcc:	e001      	b.n	8009bd2 <usart_Config_Init_Priority+0x66>
			}
		}
		else
		{
			__NOP();
 8009bce:	bf00      	nop
 8009bd0:	e000      	b.n	8009bd4 <usart_Config_Init_Priority+0x68>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 8009bd2:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8009bd4:	b662      	cpsie	i
}
 8009bd6:	bf00      	nop
		}
		//Activamos las interupciones globales
		__enable_irq();
}
 8009bd8:	bf00      	nop
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	40011000 	.word	0x40011000
 8009be4:	40004400 	.word	0x40004400
 8009be8:	40011400 	.word	0x40011400

08009bec <getValueBaudRate>:

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 8009bec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009bf0:	b086      	sub	sp, #24
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6039      	str	r1, [r7, #0]
 8009bf6:	4601      	mov	r1, r0
 8009bf8:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 8009bfa:	79f9      	ldrb	r1, [r7, #7]
 8009bfc:	2000      	movs	r0, #0
 8009bfe:	460a      	mov	r2, r1
 8009c00:	4603      	mov	r3, r0
 8009c02:	491f      	ldr	r1, [pc, #124]	; (8009c80 <getValueBaudRate+0x94>)
 8009c04:	fb01 f003 	mul.w	r0, r1, r3
 8009c08:	2102      	movs	r1, #2
 8009c0a:	fb02 f101 	mul.w	r1, r2, r1
 8009c0e:	4401      	add	r1, r0
 8009c10:	481b      	ldr	r0, [pc, #108]	; (8009c80 <getValueBaudRate+0x94>)
 8009c12:	fba2 4500 	umull	r4, r5, r2, r0
 8009c16:	194b      	adds	r3, r1, r5
 8009c18:	461d      	mov	r5, r3
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	011b      	lsls	r3, r3, #4
 8009c1e:	2200      	movs	r2, #0
 8009c20:	4698      	mov	r8, r3
 8009c22:	4691      	mov	r9, r2
 8009c24:	4642      	mov	r2, r8
 8009c26:	464b      	mov	r3, r9
 8009c28:	4620      	mov	r0, r4
 8009c2a:	4629      	mov	r1, r5
 8009c2c:	f7f7 f952 	bl	8000ed4 <__aeabi_ldivmod>
 8009c30:	4602      	mov	r2, r0
 8009c32:	460b      	mov	r3, r1
 8009c34:	4613      	mov	r3, r2
 8009c36:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	4a12      	ldr	r2, [pc, #72]	; (8009c84 <getValueBaudRate+0x98>)
 8009c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c40:	0b5b      	lsrs	r3, r3, #13
 8009c42:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	f242 7210 	movw	r2, #10000	; 0x2710
 8009c4a:	fb02 f303 	mul.w	r3, r2, r3
 8009c4e:	697a      	ldr	r2, [r7, #20]
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8009c5a:	4a0a      	ldr	r2, [pc, #40]	; (8009c84 <getValueBaudRate+0x98>)
 8009c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c60:	0a5b      	lsrs	r3, r3, #9
 8009c62:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	011b      	lsls	r3, r3, #4
 8009c6a:	b29a      	uxth	r2, r3
 8009c6c:	7afb      	ldrb	r3, [r7, #11]
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	4313      	orrs	r3, r2
 8009c72:	813b      	strh	r3, [r7, #8]

    return value;
 8009c74:	893b      	ldrh	r3, [r7, #8]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3718      	adds	r7, #24
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009c80:	540be400 	.word	0x540be400
 8009c84:	d1b71759 	.word	0xd1b71759

08009c88 <writeChar>:

//---------------Funciones para la transmision de datos------------------------------
//Funcion para escribir un solo char
void writeChar(USART_Handler_t *ptrUsartHandler, uint8_t datatoSend)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	460b      	mov	r3, r1
 8009c92:	70fb      	strb	r3, [r7, #3]
	//Verificamos que no se este enviando un mensaje
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8009c94:	e000      	b.n	8009c98 <writeChar+0x10>
	{
		__NOP();
 8009c96:	bf00      	nop
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d0f7      	beq.n	8009c96 <writeChar+0xe>
	}
	//Almacenamos un elemento char en el registro USART_DR
	ptrUsartHandler->ptrUSARTx->DR = datatoSend;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	78fa      	ldrb	r2, [r7, #3]
 8009cac:	605a      	str	r2, [r3, #4]

}
 8009cae:	bf00      	nop
 8009cb0:	370c      	adds	r7, #12
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <writeMsg>:

//Funcion para escribir un string
void writeMsg(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b084      	sub	sp, #16
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	73fb      	strb	r3, [r7, #15]

	while(MsgtoSend[i] != '\0')
 8009cc8:	e00a      	b.n	8009ce0 <writeMsg+0x26>
	{
		writeChar(ptrUsartHandlerString, MsgtoSend[i]);
 8009cca:	7bfb      	ldrb	r3, [r7, #15]
 8009ccc:	683a      	ldr	r2, [r7, #0]
 8009cce:	4413      	add	r3, r2
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f7ff ffd7 	bl	8009c88 <writeChar>
		i++;
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	73fb      	strb	r3, [r7, #15]
	while(MsgtoSend[i] != '\0')
 8009ce0:	7bfb      	ldrb	r3, [r7, #15]
 8009ce2:	683a      	ldr	r2, [r7, #0]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1ee      	bne.n	8009cca <writeMsg+0x10>
	}
}
 8009cec:	bf00      	nop
 8009cee:	bf00      	nop
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
	...

08009cf8 <getRxData>:
	}
}

//Funcion para leer un char
uint8_t getRxData(void)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	af00      	add	r7, sp, #0
	return auxRxData;
 8009cfc:	4b03      	ldr	r3, [pc, #12]	; (8009d0c <getRxData+0x14>)
 8009cfe:	781b      	ldrb	r3, [r3, #0]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	200136b4 	.word	0x200136b4

08009d10 <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	460b      	mov	r3, r1
 8009d1a:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 8009d1c:	78fb      	ldrb	r3, [r7, #3]
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d10c      	bne.n	8009d3c <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 8009d3a:	e005      	b.n	8009d48 <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	60da      	str	r2, [r3, #12]
}
 8009d48:	bf00      	nop
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <BasicUSART2_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART2_Callback()
{
 8009d54:	b480      	push	{r7}
 8009d56:	af00      	add	r7, sp, #0
	__NOP();
 8009d58:	bf00      	nop
}
 8009d5a:	bf00      	nop
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <BasicUSART6_Callback>:


__attribute__((weak)) void BasicUSART6_Callback()
{
 8009d64:	b480      	push	{r7}
 8009d66:	af00      	add	r7, sp, #0
	__NOP();
 8009d68:	bf00      	nop
}
 8009d6a:	bf00      	nop
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 8009d78:	4b37      	ldr	r3, [pc, #220]	; (8009e58 <USART1_IRQHandler+0xe4>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f003 0320 	and.w	r3, r3, #32
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d008      	beq.n	8009d98 <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 8009d86:	4b34      	ldr	r3, [pc, #208]	; (8009e58 <USART1_IRQHandler+0xe4>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	b2da      	uxtb	r2, r3
 8009d8e:	4b33      	ldr	r3, [pc, #204]	; (8009e5c <USART1_IRQHandler+0xe8>)
 8009d90:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 8009d92:	f7f8 fe3f 	bl	8002a14 <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 8009d96:	e05d      	b.n	8009e54 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 8009d98:	4b2f      	ldr	r3, [pc, #188]	; (8009e58 <USART1_IRQHandler+0xe4>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d055      	beq.n	8009e52 <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8009da6:	4b2e      	ldr	r3, [pc, #184]	; (8009e60 <USART1_IRQHandler+0xec>)
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d10b      	bne.n	8009dc6 <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 8009dae:	4b2d      	ldr	r3, [pc, #180]	; (8009e64 <USART1_IRQHandler+0xf0>)
 8009db0:	781a      	ldrb	r2, [r3, #0]
 8009db2:	4b29      	ldr	r3, [pc, #164]	; (8009e58 <USART1_IRQHandler+0xe4>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8009db8:	4b27      	ldr	r3, [pc, #156]	; (8009e58 <USART1_IRQHandler+0xe4>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7ff ffa6 	bl	8009d10 <interruptionTX>
}
 8009dc4:	e046      	b.n	8009e54 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8009dc6:	4b26      	ldr	r3, [pc, #152]	; (8009e60 <USART1_IRQHandler+0xec>)
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d142      	bne.n	8009e54 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8009dce:	4b26      	ldr	r3, [pc, #152]	; (8009e68 <USART1_IRQHandler+0xf4>)
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	4b25      	ldr	r3, [pc, #148]	; (8009e6c <USART1_IRQHandler+0xf8>)
 8009dd6:	5c9b      	ldrb	r3, [r3, r2]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d00e      	beq.n	8009dfa <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 8009ddc:	4b22      	ldr	r3, [pc, #136]	; (8009e68 <USART1_IRQHandler+0xf4>)
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	461a      	mov	r2, r3
 8009de2:	4b22      	ldr	r3, [pc, #136]	; (8009e6c <USART1_IRQHandler+0xf8>)
 8009de4:	5c9a      	ldrb	r2, [r3, r2]
 8009de6:	4b1c      	ldr	r3, [pc, #112]	; (8009e58 <USART1_IRQHandler+0xe4>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	605a      	str	r2, [r3, #4]
				posChar++;
 8009dec:	4b1e      	ldr	r3, [pc, #120]	; (8009e68 <USART1_IRQHandler+0xf4>)
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	3301      	adds	r3, #1
 8009df2:	b2da      	uxtb	r2, r3
 8009df4:	4b1c      	ldr	r3, [pc, #112]	; (8009e68 <USART1_IRQHandler+0xf4>)
 8009df6:	701a      	strb	r2, [r3, #0]
}
 8009df8:	e02c      	b.n	8009e54 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8009dfa:	4b1d      	ldr	r3, [pc, #116]	; (8009e70 <USART1_IRQHandler+0xfc>)
 8009dfc:	781a      	ldrb	r2, [r3, #0]
 8009dfe:	4b1d      	ldr	r3, [pc, #116]	; (8009e74 <USART1_IRQHandler+0x100>)
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d215      	bcs.n	8009e32 <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8009e06:	4b1a      	ldr	r3, [pc, #104]	; (8009e70 <USART1_IRQHandler+0xfc>)
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	2364      	movs	r3, #100	; 0x64
 8009e0e:	fb02 f303 	mul.w	r3, r2, r3
 8009e12:	4a19      	ldr	r2, [pc, #100]	; (8009e78 <USART1_IRQHandler+0x104>)
 8009e14:	4413      	add	r3, r2
 8009e16:	4619      	mov	r1, r3
 8009e18:	4814      	ldr	r0, [pc, #80]	; (8009e6c <USART1_IRQHandler+0xf8>)
 8009e1a:	f000 fff7 	bl	800ae0c <siprintf>
					posChar = 0;
 8009e1e:	4b12      	ldr	r3, [pc, #72]	; (8009e68 <USART1_IRQHandler+0xf4>)
 8009e20:	2200      	movs	r2, #0
 8009e22:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8009e24:	4b12      	ldr	r3, [pc, #72]	; (8009e70 <USART1_IRQHandler+0xfc>)
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	b2da      	uxtb	r2, r3
 8009e2c:	4b10      	ldr	r3, [pc, #64]	; (8009e70 <USART1_IRQHandler+0xfc>)
 8009e2e:	701a      	strb	r2, [r3, #0]
}
 8009e30:	e010      	b.n	8009e54 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8009e32:	4b09      	ldr	r3, [pc, #36]	; (8009e58 <USART1_IRQHandler+0xe4>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2100      	movs	r1, #0
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7ff ff69 	bl	8009d10 <interruptionTX>
					posChar = 0;
 8009e3e:	4b0a      	ldr	r3, [pc, #40]	; (8009e68 <USART1_IRQHandler+0xf4>)
 8009e40:	2200      	movs	r2, #0
 8009e42:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8009e44:	4b0a      	ldr	r3, [pc, #40]	; (8009e70 <USART1_IRQHandler+0xfc>)
 8009e46:	2200      	movs	r2, #0
 8009e48:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8009e4a:	4b0a      	ldr	r3, [pc, #40]	; (8009e74 <USART1_IRQHandler+0x100>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	701a      	strb	r2, [r3, #0]
}
 8009e50:	e000      	b.n	8009e54 <USART1_IRQHandler+0xe0>
		__NOP();
 8009e52:	bf00      	nop
}
 8009e54:	bf00      	nop
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	200136a8 	.word	0x200136a8
 8009e5c:	200136b4 	.word	0x200136b4
 8009e60:	20013eef 	.word	0x20013eef
 8009e64:	200136b5 	.word	0x200136b5
 8009e68:	20013eee 	.word	0x20013eee
 8009e6c:	200136b8 	.word	0x200136b8
 8009e70:	20013eed 	.word	0x20013eed
 8009e74:	20013eec 	.word	0x20013eec
 8009e78:	2001371c 	.word	0x2001371c

08009e7c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 8009e80:	4b37      	ldr	r3, [pc, #220]	; (8009f60 <USART2_IRQHandler+0xe4>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f003 0320 	and.w	r3, r3, #32
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d008      	beq.n	8009ea0 <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 8009e8e:	4b34      	ldr	r3, [pc, #208]	; (8009f60 <USART2_IRQHandler+0xe4>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	b2da      	uxtb	r2, r3
 8009e96:	4b33      	ldr	r3, [pc, #204]	; (8009f64 <USART2_IRQHandler+0xe8>)
 8009e98:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 8009e9a:	f7ff ff5b 	bl	8009d54 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 8009e9e:	e05d      	b.n	8009f5c <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 8009ea0:	4b2f      	ldr	r3, [pc, #188]	; (8009f60 <USART2_IRQHandler+0xe4>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d055      	beq.n	8009f5a <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8009eae:	4b2e      	ldr	r3, [pc, #184]	; (8009f68 <USART2_IRQHandler+0xec>)
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d10b      	bne.n	8009ece <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 8009eb6:	4b2d      	ldr	r3, [pc, #180]	; (8009f6c <USART2_IRQHandler+0xf0>)
 8009eb8:	781a      	ldrb	r2, [r3, #0]
 8009eba:	4b29      	ldr	r3, [pc, #164]	; (8009f60 <USART2_IRQHandler+0xe4>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8009ec0:	4b27      	ldr	r3, [pc, #156]	; (8009f60 <USART2_IRQHandler+0xe4>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7ff ff22 	bl	8009d10 <interruptionTX>
}
 8009ecc:	e046      	b.n	8009f5c <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8009ece:	4b26      	ldr	r3, [pc, #152]	; (8009f68 <USART2_IRQHandler+0xec>)
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d142      	bne.n	8009f5c <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8009ed6:	4b26      	ldr	r3, [pc, #152]	; (8009f70 <USART2_IRQHandler+0xf4>)
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	461a      	mov	r2, r3
 8009edc:	4b25      	ldr	r3, [pc, #148]	; (8009f74 <USART2_IRQHandler+0xf8>)
 8009ede:	5c9b      	ldrb	r3, [r3, r2]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00e      	beq.n	8009f02 <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 8009ee4:	4b22      	ldr	r3, [pc, #136]	; (8009f70 <USART2_IRQHandler+0xf4>)
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	461a      	mov	r2, r3
 8009eea:	4b22      	ldr	r3, [pc, #136]	; (8009f74 <USART2_IRQHandler+0xf8>)
 8009eec:	5c9a      	ldrb	r2, [r3, r2]
 8009eee:	4b1c      	ldr	r3, [pc, #112]	; (8009f60 <USART2_IRQHandler+0xe4>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	605a      	str	r2, [r3, #4]
				posChar++;
 8009ef4:	4b1e      	ldr	r3, [pc, #120]	; (8009f70 <USART2_IRQHandler+0xf4>)
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	b2da      	uxtb	r2, r3
 8009efc:	4b1c      	ldr	r3, [pc, #112]	; (8009f70 <USART2_IRQHandler+0xf4>)
 8009efe:	701a      	strb	r2, [r3, #0]
}
 8009f00:	e02c      	b.n	8009f5c <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8009f02:	4b1d      	ldr	r3, [pc, #116]	; (8009f78 <USART2_IRQHandler+0xfc>)
 8009f04:	781a      	ldrb	r2, [r3, #0]
 8009f06:	4b1d      	ldr	r3, [pc, #116]	; (8009f7c <USART2_IRQHandler+0x100>)
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d215      	bcs.n	8009f3a <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8009f0e:	4b1a      	ldr	r3, [pc, #104]	; (8009f78 <USART2_IRQHandler+0xfc>)
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	461a      	mov	r2, r3
 8009f14:	2364      	movs	r3, #100	; 0x64
 8009f16:	fb02 f303 	mul.w	r3, r2, r3
 8009f1a:	4a19      	ldr	r2, [pc, #100]	; (8009f80 <USART2_IRQHandler+0x104>)
 8009f1c:	4413      	add	r3, r2
 8009f1e:	4619      	mov	r1, r3
 8009f20:	4814      	ldr	r0, [pc, #80]	; (8009f74 <USART2_IRQHandler+0xf8>)
 8009f22:	f000 ff73 	bl	800ae0c <siprintf>
					posChar = 0;
 8009f26:	4b12      	ldr	r3, [pc, #72]	; (8009f70 <USART2_IRQHandler+0xf4>)
 8009f28:	2200      	movs	r2, #0
 8009f2a:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8009f2c:	4b12      	ldr	r3, [pc, #72]	; (8009f78 <USART2_IRQHandler+0xfc>)
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	3301      	adds	r3, #1
 8009f32:	b2da      	uxtb	r2, r3
 8009f34:	4b10      	ldr	r3, [pc, #64]	; (8009f78 <USART2_IRQHandler+0xfc>)
 8009f36:	701a      	strb	r2, [r3, #0]
}
 8009f38:	e010      	b.n	8009f5c <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8009f3a:	4b09      	ldr	r3, [pc, #36]	; (8009f60 <USART2_IRQHandler+0xe4>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2100      	movs	r1, #0
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7ff fee5 	bl	8009d10 <interruptionTX>
					posChar = 0;
 8009f46:	4b0a      	ldr	r3, [pc, #40]	; (8009f70 <USART2_IRQHandler+0xf4>)
 8009f48:	2200      	movs	r2, #0
 8009f4a:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8009f4c:	4b0a      	ldr	r3, [pc, #40]	; (8009f78 <USART2_IRQHandler+0xfc>)
 8009f4e:	2200      	movs	r2, #0
 8009f50:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8009f52:	4b0a      	ldr	r3, [pc, #40]	; (8009f7c <USART2_IRQHandler+0x100>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	701a      	strb	r2, [r3, #0]
}
 8009f58:	e000      	b.n	8009f5c <USART2_IRQHandler+0xe0>
		__NOP();
 8009f5a:	bf00      	nop
}
 8009f5c:	bf00      	nop
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	200136ac 	.word	0x200136ac
 8009f64:	200136b4 	.word	0x200136b4
 8009f68:	20013eef 	.word	0x20013eef
 8009f6c:	200136b5 	.word	0x200136b5
 8009f70:	20013eee 	.word	0x20013eee
 8009f74:	200136b8 	.word	0x200136b8
 8009f78:	20013eed 	.word	0x20013eed
 8009f7c:	20013eec 	.word	0x20013eec
 8009f80:	2001371c 	.word	0x2001371c

08009f84 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 8009f88:	4b37      	ldr	r3, [pc, #220]	; (800a068 <USART6_IRQHandler+0xe4>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 0320 	and.w	r3, r3, #32
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d008      	beq.n	8009fa8 <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 8009f96:	4b34      	ldr	r3, [pc, #208]	; (800a068 <USART6_IRQHandler+0xe4>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	b2da      	uxtb	r2, r3
 8009f9e:	4b33      	ldr	r3, [pc, #204]	; (800a06c <USART6_IRQHandler+0xe8>)
 8009fa0:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 8009fa2:	f7ff fedf 	bl	8009d64 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 8009fa6:	e05d      	b.n	800a064 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 8009fa8:	4b2f      	ldr	r3, [pc, #188]	; (800a068 <USART6_IRQHandler+0xe4>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d055      	beq.n	800a062 <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8009fb6:	4b2e      	ldr	r3, [pc, #184]	; (800a070 <USART6_IRQHandler+0xec>)
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d10b      	bne.n	8009fd6 <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 8009fbe:	4b2d      	ldr	r3, [pc, #180]	; (800a074 <USART6_IRQHandler+0xf0>)
 8009fc0:	781a      	ldrb	r2, [r3, #0]
 8009fc2:	4b29      	ldr	r3, [pc, #164]	; (800a068 <USART6_IRQHandler+0xe4>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8009fc8:	4b27      	ldr	r3, [pc, #156]	; (800a068 <USART6_IRQHandler+0xe4>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2100      	movs	r1, #0
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7ff fe9e 	bl	8009d10 <interruptionTX>
}
 8009fd4:	e046      	b.n	800a064 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8009fd6:	4b26      	ldr	r3, [pc, #152]	; (800a070 <USART6_IRQHandler+0xec>)
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d142      	bne.n	800a064 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8009fde:	4b26      	ldr	r3, [pc, #152]	; (800a078 <USART6_IRQHandler+0xf4>)
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	4b25      	ldr	r3, [pc, #148]	; (800a07c <USART6_IRQHandler+0xf8>)
 8009fe6:	5c9b      	ldrb	r3, [r3, r2]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d00e      	beq.n	800a00a <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 8009fec:	4b22      	ldr	r3, [pc, #136]	; (800a078 <USART6_IRQHandler+0xf4>)
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	4b22      	ldr	r3, [pc, #136]	; (800a07c <USART6_IRQHandler+0xf8>)
 8009ff4:	5c9a      	ldrb	r2, [r3, r2]
 8009ff6:	4b1c      	ldr	r3, [pc, #112]	; (800a068 <USART6_IRQHandler+0xe4>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	605a      	str	r2, [r3, #4]
				posChar++;
 8009ffc:	4b1e      	ldr	r3, [pc, #120]	; (800a078 <USART6_IRQHandler+0xf4>)
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	3301      	adds	r3, #1
 800a002:	b2da      	uxtb	r2, r3
 800a004:	4b1c      	ldr	r3, [pc, #112]	; (800a078 <USART6_IRQHandler+0xf4>)
 800a006:	701a      	strb	r2, [r3, #0]
}
 800a008:	e02c      	b.n	800a064 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 800a00a:	4b1d      	ldr	r3, [pc, #116]	; (800a080 <USART6_IRQHandler+0xfc>)
 800a00c:	781a      	ldrb	r2, [r3, #0]
 800a00e:	4b1d      	ldr	r3, [pc, #116]	; (800a084 <USART6_IRQHandler+0x100>)
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	429a      	cmp	r2, r3
 800a014:	d215      	bcs.n	800a042 <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800a016:	4b1a      	ldr	r3, [pc, #104]	; (800a080 <USART6_IRQHandler+0xfc>)
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	461a      	mov	r2, r3
 800a01c:	2364      	movs	r3, #100	; 0x64
 800a01e:	fb02 f303 	mul.w	r3, r2, r3
 800a022:	4a19      	ldr	r2, [pc, #100]	; (800a088 <USART6_IRQHandler+0x104>)
 800a024:	4413      	add	r3, r2
 800a026:	4619      	mov	r1, r3
 800a028:	4814      	ldr	r0, [pc, #80]	; (800a07c <USART6_IRQHandler+0xf8>)
 800a02a:	f000 feef 	bl	800ae0c <siprintf>
					posChar = 0;
 800a02e:	4b12      	ldr	r3, [pc, #72]	; (800a078 <USART6_IRQHandler+0xf4>)
 800a030:	2200      	movs	r2, #0
 800a032:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 800a034:	4b12      	ldr	r3, [pc, #72]	; (800a080 <USART6_IRQHandler+0xfc>)
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	3301      	adds	r3, #1
 800a03a:	b2da      	uxtb	r2, r3
 800a03c:	4b10      	ldr	r3, [pc, #64]	; (800a080 <USART6_IRQHandler+0xfc>)
 800a03e:	701a      	strb	r2, [r3, #0]
}
 800a040:	e010      	b.n	800a064 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 800a042:	4b09      	ldr	r3, [pc, #36]	; (800a068 <USART6_IRQHandler+0xe4>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2100      	movs	r1, #0
 800a048:	4618      	mov	r0, r3
 800a04a:	f7ff fe61 	bl	8009d10 <interruptionTX>
					posChar = 0;
 800a04e:	4b0a      	ldr	r3, [pc, #40]	; (800a078 <USART6_IRQHandler+0xf4>)
 800a050:	2200      	movs	r2, #0
 800a052:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 800a054:	4b0a      	ldr	r3, [pc, #40]	; (800a080 <USART6_IRQHandler+0xfc>)
 800a056:	2200      	movs	r2, #0
 800a058:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800a05a:	4b0a      	ldr	r3, [pc, #40]	; (800a084 <USART6_IRQHandler+0x100>)
 800a05c:	2200      	movs	r2, #0
 800a05e:	701a      	strb	r2, [r3, #0]
}
 800a060:	e000      	b.n	800a064 <USART6_IRQHandler+0xe0>
		__NOP();
 800a062:	bf00      	nop
}
 800a064:	bf00      	nop
 800a066:	bd80      	pop	{r7, pc}
 800a068:	200136b0 	.word	0x200136b0
 800a06c:	200136b4 	.word	0x200136b4
 800a070:	20013eef 	.word	0x20013eef
 800a074:	200136b5 	.word	0x200136b5
 800a078:	20013eee 	.word	0x20013eee
 800a07c:	200136b8 	.word	0x200136b8
 800a080:	20013eed 	.word	0x20013eed
 800a084:	20013eec 	.word	0x20013eec
 800a088:	2001371c 	.word	0x2001371c

0800a08c <__errno>:
 800a08c:	4b01      	ldr	r3, [pc, #4]	; (800a094 <__errno+0x8>)
 800a08e:	6818      	ldr	r0, [r3, #0]
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	20000020 	.word	0x20000020

0800a098 <__libc_init_array>:
 800a098:	b570      	push	{r4, r5, r6, lr}
 800a09a:	4d0d      	ldr	r5, [pc, #52]	; (800a0d0 <__libc_init_array+0x38>)
 800a09c:	4c0d      	ldr	r4, [pc, #52]	; (800a0d4 <__libc_init_array+0x3c>)
 800a09e:	1b64      	subs	r4, r4, r5
 800a0a0:	10a4      	asrs	r4, r4, #2
 800a0a2:	2600      	movs	r6, #0
 800a0a4:	42a6      	cmp	r6, r4
 800a0a6:	d109      	bne.n	800a0bc <__libc_init_array+0x24>
 800a0a8:	4d0b      	ldr	r5, [pc, #44]	; (800a0d8 <__libc_init_array+0x40>)
 800a0aa:	4c0c      	ldr	r4, [pc, #48]	; (800a0dc <__libc_init_array+0x44>)
 800a0ac:	f007 fd26 	bl	8011afc <_init>
 800a0b0:	1b64      	subs	r4, r4, r5
 800a0b2:	10a4      	asrs	r4, r4, #2
 800a0b4:	2600      	movs	r6, #0
 800a0b6:	42a6      	cmp	r6, r4
 800a0b8:	d105      	bne.n	800a0c6 <__libc_init_array+0x2e>
 800a0ba:	bd70      	pop	{r4, r5, r6, pc}
 800a0bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0c0:	4798      	blx	r3
 800a0c2:	3601      	adds	r6, #1
 800a0c4:	e7ee      	b.n	800a0a4 <__libc_init_array+0xc>
 800a0c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0ca:	4798      	blx	r3
 800a0cc:	3601      	adds	r6, #1
 800a0ce:	e7f2      	b.n	800a0b6 <__libc_init_array+0x1e>
 800a0d0:	080123f8 	.word	0x080123f8
 800a0d4:	080123f8 	.word	0x080123f8
 800a0d8:	080123f8 	.word	0x080123f8
 800a0dc:	080123fc 	.word	0x080123fc

0800a0e0 <memcpy>:
 800a0e0:	440a      	add	r2, r1
 800a0e2:	4291      	cmp	r1, r2
 800a0e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0e8:	d100      	bne.n	800a0ec <memcpy+0xc>
 800a0ea:	4770      	bx	lr
 800a0ec:	b510      	push	{r4, lr}
 800a0ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0f6:	4291      	cmp	r1, r2
 800a0f8:	d1f9      	bne.n	800a0ee <memcpy+0xe>
 800a0fa:	bd10      	pop	{r4, pc}

0800a0fc <memset>:
 800a0fc:	4402      	add	r2, r0
 800a0fe:	4603      	mov	r3, r0
 800a100:	4293      	cmp	r3, r2
 800a102:	d100      	bne.n	800a106 <memset+0xa>
 800a104:	4770      	bx	lr
 800a106:	f803 1b01 	strb.w	r1, [r3], #1
 800a10a:	e7f9      	b.n	800a100 <memset+0x4>

0800a10c <__cvt>:
 800a10c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a110:	ec55 4b10 	vmov	r4, r5, d0
 800a114:	2d00      	cmp	r5, #0
 800a116:	460e      	mov	r6, r1
 800a118:	4619      	mov	r1, r3
 800a11a:	462b      	mov	r3, r5
 800a11c:	bfbb      	ittet	lt
 800a11e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a122:	461d      	movlt	r5, r3
 800a124:	2300      	movge	r3, #0
 800a126:	232d      	movlt	r3, #45	; 0x2d
 800a128:	700b      	strb	r3, [r1, #0]
 800a12a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a12c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a130:	4691      	mov	r9, r2
 800a132:	f023 0820 	bic.w	r8, r3, #32
 800a136:	bfbc      	itt	lt
 800a138:	4622      	movlt	r2, r4
 800a13a:	4614      	movlt	r4, r2
 800a13c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a140:	d005      	beq.n	800a14e <__cvt+0x42>
 800a142:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a146:	d100      	bne.n	800a14a <__cvt+0x3e>
 800a148:	3601      	adds	r6, #1
 800a14a:	2102      	movs	r1, #2
 800a14c:	e000      	b.n	800a150 <__cvt+0x44>
 800a14e:	2103      	movs	r1, #3
 800a150:	ab03      	add	r3, sp, #12
 800a152:	9301      	str	r3, [sp, #4]
 800a154:	ab02      	add	r3, sp, #8
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	ec45 4b10 	vmov	d0, r4, r5
 800a15c:	4653      	mov	r3, sl
 800a15e:	4632      	mov	r2, r6
 800a160:	f001 fe42 	bl	800bde8 <_dtoa_r>
 800a164:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a168:	4607      	mov	r7, r0
 800a16a:	d102      	bne.n	800a172 <__cvt+0x66>
 800a16c:	f019 0f01 	tst.w	r9, #1
 800a170:	d022      	beq.n	800a1b8 <__cvt+0xac>
 800a172:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a176:	eb07 0906 	add.w	r9, r7, r6
 800a17a:	d110      	bne.n	800a19e <__cvt+0x92>
 800a17c:	783b      	ldrb	r3, [r7, #0]
 800a17e:	2b30      	cmp	r3, #48	; 0x30
 800a180:	d10a      	bne.n	800a198 <__cvt+0x8c>
 800a182:	2200      	movs	r2, #0
 800a184:	2300      	movs	r3, #0
 800a186:	4620      	mov	r0, r4
 800a188:	4629      	mov	r1, r5
 800a18a:	f7f6 fcb5 	bl	8000af8 <__aeabi_dcmpeq>
 800a18e:	b918      	cbnz	r0, 800a198 <__cvt+0x8c>
 800a190:	f1c6 0601 	rsb	r6, r6, #1
 800a194:	f8ca 6000 	str.w	r6, [sl]
 800a198:	f8da 3000 	ldr.w	r3, [sl]
 800a19c:	4499      	add	r9, r3
 800a19e:	2200      	movs	r2, #0
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	4629      	mov	r1, r5
 800a1a6:	f7f6 fca7 	bl	8000af8 <__aeabi_dcmpeq>
 800a1aa:	b108      	cbz	r0, 800a1b0 <__cvt+0xa4>
 800a1ac:	f8cd 900c 	str.w	r9, [sp, #12]
 800a1b0:	2230      	movs	r2, #48	; 0x30
 800a1b2:	9b03      	ldr	r3, [sp, #12]
 800a1b4:	454b      	cmp	r3, r9
 800a1b6:	d307      	bcc.n	800a1c8 <__cvt+0xbc>
 800a1b8:	9b03      	ldr	r3, [sp, #12]
 800a1ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1bc:	1bdb      	subs	r3, r3, r7
 800a1be:	4638      	mov	r0, r7
 800a1c0:	6013      	str	r3, [r2, #0]
 800a1c2:	b004      	add	sp, #16
 800a1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1c8:	1c59      	adds	r1, r3, #1
 800a1ca:	9103      	str	r1, [sp, #12]
 800a1cc:	701a      	strb	r2, [r3, #0]
 800a1ce:	e7f0      	b.n	800a1b2 <__cvt+0xa6>

0800a1d0 <__exponent>:
 800a1d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2900      	cmp	r1, #0
 800a1d6:	bfb8      	it	lt
 800a1d8:	4249      	neglt	r1, r1
 800a1da:	f803 2b02 	strb.w	r2, [r3], #2
 800a1de:	bfb4      	ite	lt
 800a1e0:	222d      	movlt	r2, #45	; 0x2d
 800a1e2:	222b      	movge	r2, #43	; 0x2b
 800a1e4:	2909      	cmp	r1, #9
 800a1e6:	7042      	strb	r2, [r0, #1]
 800a1e8:	dd2a      	ble.n	800a240 <__exponent+0x70>
 800a1ea:	f10d 0407 	add.w	r4, sp, #7
 800a1ee:	46a4      	mov	ip, r4
 800a1f0:	270a      	movs	r7, #10
 800a1f2:	46a6      	mov	lr, r4
 800a1f4:	460a      	mov	r2, r1
 800a1f6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a1fa:	fb07 1516 	mls	r5, r7, r6, r1
 800a1fe:	3530      	adds	r5, #48	; 0x30
 800a200:	2a63      	cmp	r2, #99	; 0x63
 800a202:	f104 34ff 	add.w	r4, r4, #4294967295
 800a206:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a20a:	4631      	mov	r1, r6
 800a20c:	dcf1      	bgt.n	800a1f2 <__exponent+0x22>
 800a20e:	3130      	adds	r1, #48	; 0x30
 800a210:	f1ae 0502 	sub.w	r5, lr, #2
 800a214:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a218:	1c44      	adds	r4, r0, #1
 800a21a:	4629      	mov	r1, r5
 800a21c:	4561      	cmp	r1, ip
 800a21e:	d30a      	bcc.n	800a236 <__exponent+0x66>
 800a220:	f10d 0209 	add.w	r2, sp, #9
 800a224:	eba2 020e 	sub.w	r2, r2, lr
 800a228:	4565      	cmp	r5, ip
 800a22a:	bf88      	it	hi
 800a22c:	2200      	movhi	r2, #0
 800a22e:	4413      	add	r3, r2
 800a230:	1a18      	subs	r0, r3, r0
 800a232:	b003      	add	sp, #12
 800a234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a23a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a23e:	e7ed      	b.n	800a21c <__exponent+0x4c>
 800a240:	2330      	movs	r3, #48	; 0x30
 800a242:	3130      	adds	r1, #48	; 0x30
 800a244:	7083      	strb	r3, [r0, #2]
 800a246:	70c1      	strb	r1, [r0, #3]
 800a248:	1d03      	adds	r3, r0, #4
 800a24a:	e7f1      	b.n	800a230 <__exponent+0x60>

0800a24c <_printf_float>:
 800a24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a250:	ed2d 8b02 	vpush	{d8}
 800a254:	b08d      	sub	sp, #52	; 0x34
 800a256:	460c      	mov	r4, r1
 800a258:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a25c:	4616      	mov	r6, r2
 800a25e:	461f      	mov	r7, r3
 800a260:	4605      	mov	r5, r0
 800a262:	f002 ff1f 	bl	800d0a4 <_localeconv_r>
 800a266:	f8d0 a000 	ldr.w	sl, [r0]
 800a26a:	4650      	mov	r0, sl
 800a26c:	f7f5 ffc2 	bl	80001f4 <strlen>
 800a270:	2300      	movs	r3, #0
 800a272:	930a      	str	r3, [sp, #40]	; 0x28
 800a274:	6823      	ldr	r3, [r4, #0]
 800a276:	9305      	str	r3, [sp, #20]
 800a278:	f8d8 3000 	ldr.w	r3, [r8]
 800a27c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a280:	3307      	adds	r3, #7
 800a282:	f023 0307 	bic.w	r3, r3, #7
 800a286:	f103 0208 	add.w	r2, r3, #8
 800a28a:	f8c8 2000 	str.w	r2, [r8]
 800a28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a292:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a296:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a29a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a29e:	9307      	str	r3, [sp, #28]
 800a2a0:	f8cd 8018 	str.w	r8, [sp, #24]
 800a2a4:	ee08 0a10 	vmov	s16, r0
 800a2a8:	4b9f      	ldr	r3, [pc, #636]	; (800a528 <_printf_float+0x2dc>)
 800a2aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a2b2:	f7f6 fc53 	bl	8000b5c <__aeabi_dcmpun>
 800a2b6:	bb88      	cbnz	r0, 800a31c <_printf_float+0xd0>
 800a2b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2bc:	4b9a      	ldr	r3, [pc, #616]	; (800a528 <_printf_float+0x2dc>)
 800a2be:	f04f 32ff 	mov.w	r2, #4294967295
 800a2c2:	f7f6 fc2d 	bl	8000b20 <__aeabi_dcmple>
 800a2c6:	bb48      	cbnz	r0, 800a31c <_printf_float+0xd0>
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	4640      	mov	r0, r8
 800a2ce:	4649      	mov	r1, r9
 800a2d0:	f7f6 fc1c 	bl	8000b0c <__aeabi_dcmplt>
 800a2d4:	b110      	cbz	r0, 800a2dc <_printf_float+0x90>
 800a2d6:	232d      	movs	r3, #45	; 0x2d
 800a2d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2dc:	4b93      	ldr	r3, [pc, #588]	; (800a52c <_printf_float+0x2e0>)
 800a2de:	4894      	ldr	r0, [pc, #592]	; (800a530 <_printf_float+0x2e4>)
 800a2e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a2e4:	bf94      	ite	ls
 800a2e6:	4698      	movls	r8, r3
 800a2e8:	4680      	movhi	r8, r0
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	6123      	str	r3, [r4, #16]
 800a2ee:	9b05      	ldr	r3, [sp, #20]
 800a2f0:	f023 0204 	bic.w	r2, r3, #4
 800a2f4:	6022      	str	r2, [r4, #0]
 800a2f6:	f04f 0900 	mov.w	r9, #0
 800a2fa:	9700      	str	r7, [sp, #0]
 800a2fc:	4633      	mov	r3, r6
 800a2fe:	aa0b      	add	r2, sp, #44	; 0x2c
 800a300:	4621      	mov	r1, r4
 800a302:	4628      	mov	r0, r5
 800a304:	f000 f9d8 	bl	800a6b8 <_printf_common>
 800a308:	3001      	adds	r0, #1
 800a30a:	f040 8090 	bne.w	800a42e <_printf_float+0x1e2>
 800a30e:	f04f 30ff 	mov.w	r0, #4294967295
 800a312:	b00d      	add	sp, #52	; 0x34
 800a314:	ecbd 8b02 	vpop	{d8}
 800a318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a31c:	4642      	mov	r2, r8
 800a31e:	464b      	mov	r3, r9
 800a320:	4640      	mov	r0, r8
 800a322:	4649      	mov	r1, r9
 800a324:	f7f6 fc1a 	bl	8000b5c <__aeabi_dcmpun>
 800a328:	b140      	cbz	r0, 800a33c <_printf_float+0xf0>
 800a32a:	464b      	mov	r3, r9
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	bfbc      	itt	lt
 800a330:	232d      	movlt	r3, #45	; 0x2d
 800a332:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a336:	487f      	ldr	r0, [pc, #508]	; (800a534 <_printf_float+0x2e8>)
 800a338:	4b7f      	ldr	r3, [pc, #508]	; (800a538 <_printf_float+0x2ec>)
 800a33a:	e7d1      	b.n	800a2e0 <_printf_float+0x94>
 800a33c:	6863      	ldr	r3, [r4, #4]
 800a33e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a342:	9206      	str	r2, [sp, #24]
 800a344:	1c5a      	adds	r2, r3, #1
 800a346:	d13f      	bne.n	800a3c8 <_printf_float+0x17c>
 800a348:	2306      	movs	r3, #6
 800a34a:	6063      	str	r3, [r4, #4]
 800a34c:	9b05      	ldr	r3, [sp, #20]
 800a34e:	6861      	ldr	r1, [r4, #4]
 800a350:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a354:	2300      	movs	r3, #0
 800a356:	9303      	str	r3, [sp, #12]
 800a358:	ab0a      	add	r3, sp, #40	; 0x28
 800a35a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a35e:	ab09      	add	r3, sp, #36	; 0x24
 800a360:	ec49 8b10 	vmov	d0, r8, r9
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	6022      	str	r2, [r4, #0]
 800a368:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a36c:	4628      	mov	r0, r5
 800a36e:	f7ff fecd 	bl	800a10c <__cvt>
 800a372:	9b06      	ldr	r3, [sp, #24]
 800a374:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a376:	2b47      	cmp	r3, #71	; 0x47
 800a378:	4680      	mov	r8, r0
 800a37a:	d108      	bne.n	800a38e <_printf_float+0x142>
 800a37c:	1cc8      	adds	r0, r1, #3
 800a37e:	db02      	blt.n	800a386 <_printf_float+0x13a>
 800a380:	6863      	ldr	r3, [r4, #4]
 800a382:	4299      	cmp	r1, r3
 800a384:	dd41      	ble.n	800a40a <_printf_float+0x1be>
 800a386:	f1ab 0b02 	sub.w	fp, fp, #2
 800a38a:	fa5f fb8b 	uxtb.w	fp, fp
 800a38e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a392:	d820      	bhi.n	800a3d6 <_printf_float+0x18a>
 800a394:	3901      	subs	r1, #1
 800a396:	465a      	mov	r2, fp
 800a398:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a39c:	9109      	str	r1, [sp, #36]	; 0x24
 800a39e:	f7ff ff17 	bl	800a1d0 <__exponent>
 800a3a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3a4:	1813      	adds	r3, r2, r0
 800a3a6:	2a01      	cmp	r2, #1
 800a3a8:	4681      	mov	r9, r0
 800a3aa:	6123      	str	r3, [r4, #16]
 800a3ac:	dc02      	bgt.n	800a3b4 <_printf_float+0x168>
 800a3ae:	6822      	ldr	r2, [r4, #0]
 800a3b0:	07d2      	lsls	r2, r2, #31
 800a3b2:	d501      	bpl.n	800a3b8 <_printf_float+0x16c>
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	6123      	str	r3, [r4, #16]
 800a3b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d09c      	beq.n	800a2fa <_printf_float+0xae>
 800a3c0:	232d      	movs	r3, #45	; 0x2d
 800a3c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3c6:	e798      	b.n	800a2fa <_printf_float+0xae>
 800a3c8:	9a06      	ldr	r2, [sp, #24]
 800a3ca:	2a47      	cmp	r2, #71	; 0x47
 800a3cc:	d1be      	bne.n	800a34c <_printf_float+0x100>
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1bc      	bne.n	800a34c <_printf_float+0x100>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e7b9      	b.n	800a34a <_printf_float+0xfe>
 800a3d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a3da:	d118      	bne.n	800a40e <_printf_float+0x1c2>
 800a3dc:	2900      	cmp	r1, #0
 800a3de:	6863      	ldr	r3, [r4, #4]
 800a3e0:	dd0b      	ble.n	800a3fa <_printf_float+0x1ae>
 800a3e2:	6121      	str	r1, [r4, #16]
 800a3e4:	b913      	cbnz	r3, 800a3ec <_printf_float+0x1a0>
 800a3e6:	6822      	ldr	r2, [r4, #0]
 800a3e8:	07d0      	lsls	r0, r2, #31
 800a3ea:	d502      	bpl.n	800a3f2 <_printf_float+0x1a6>
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	440b      	add	r3, r1
 800a3f0:	6123      	str	r3, [r4, #16]
 800a3f2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a3f4:	f04f 0900 	mov.w	r9, #0
 800a3f8:	e7de      	b.n	800a3b8 <_printf_float+0x16c>
 800a3fa:	b913      	cbnz	r3, 800a402 <_printf_float+0x1b6>
 800a3fc:	6822      	ldr	r2, [r4, #0]
 800a3fe:	07d2      	lsls	r2, r2, #31
 800a400:	d501      	bpl.n	800a406 <_printf_float+0x1ba>
 800a402:	3302      	adds	r3, #2
 800a404:	e7f4      	b.n	800a3f0 <_printf_float+0x1a4>
 800a406:	2301      	movs	r3, #1
 800a408:	e7f2      	b.n	800a3f0 <_printf_float+0x1a4>
 800a40a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a40e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a410:	4299      	cmp	r1, r3
 800a412:	db05      	blt.n	800a420 <_printf_float+0x1d4>
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	6121      	str	r1, [r4, #16]
 800a418:	07d8      	lsls	r0, r3, #31
 800a41a:	d5ea      	bpl.n	800a3f2 <_printf_float+0x1a6>
 800a41c:	1c4b      	adds	r3, r1, #1
 800a41e:	e7e7      	b.n	800a3f0 <_printf_float+0x1a4>
 800a420:	2900      	cmp	r1, #0
 800a422:	bfd4      	ite	le
 800a424:	f1c1 0202 	rsble	r2, r1, #2
 800a428:	2201      	movgt	r2, #1
 800a42a:	4413      	add	r3, r2
 800a42c:	e7e0      	b.n	800a3f0 <_printf_float+0x1a4>
 800a42e:	6823      	ldr	r3, [r4, #0]
 800a430:	055a      	lsls	r2, r3, #21
 800a432:	d407      	bmi.n	800a444 <_printf_float+0x1f8>
 800a434:	6923      	ldr	r3, [r4, #16]
 800a436:	4642      	mov	r2, r8
 800a438:	4631      	mov	r1, r6
 800a43a:	4628      	mov	r0, r5
 800a43c:	47b8      	blx	r7
 800a43e:	3001      	adds	r0, #1
 800a440:	d12c      	bne.n	800a49c <_printf_float+0x250>
 800a442:	e764      	b.n	800a30e <_printf_float+0xc2>
 800a444:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a448:	f240 80e0 	bls.w	800a60c <_printf_float+0x3c0>
 800a44c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a450:	2200      	movs	r2, #0
 800a452:	2300      	movs	r3, #0
 800a454:	f7f6 fb50 	bl	8000af8 <__aeabi_dcmpeq>
 800a458:	2800      	cmp	r0, #0
 800a45a:	d034      	beq.n	800a4c6 <_printf_float+0x27a>
 800a45c:	4a37      	ldr	r2, [pc, #220]	; (800a53c <_printf_float+0x2f0>)
 800a45e:	2301      	movs	r3, #1
 800a460:	4631      	mov	r1, r6
 800a462:	4628      	mov	r0, r5
 800a464:	47b8      	blx	r7
 800a466:	3001      	adds	r0, #1
 800a468:	f43f af51 	beq.w	800a30e <_printf_float+0xc2>
 800a46c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a470:	429a      	cmp	r2, r3
 800a472:	db02      	blt.n	800a47a <_printf_float+0x22e>
 800a474:	6823      	ldr	r3, [r4, #0]
 800a476:	07d8      	lsls	r0, r3, #31
 800a478:	d510      	bpl.n	800a49c <_printf_float+0x250>
 800a47a:	ee18 3a10 	vmov	r3, s16
 800a47e:	4652      	mov	r2, sl
 800a480:	4631      	mov	r1, r6
 800a482:	4628      	mov	r0, r5
 800a484:	47b8      	blx	r7
 800a486:	3001      	adds	r0, #1
 800a488:	f43f af41 	beq.w	800a30e <_printf_float+0xc2>
 800a48c:	f04f 0800 	mov.w	r8, #0
 800a490:	f104 091a 	add.w	r9, r4, #26
 800a494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a496:	3b01      	subs	r3, #1
 800a498:	4543      	cmp	r3, r8
 800a49a:	dc09      	bgt.n	800a4b0 <_printf_float+0x264>
 800a49c:	6823      	ldr	r3, [r4, #0]
 800a49e:	079b      	lsls	r3, r3, #30
 800a4a0:	f100 8105 	bmi.w	800a6ae <_printf_float+0x462>
 800a4a4:	68e0      	ldr	r0, [r4, #12]
 800a4a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4a8:	4298      	cmp	r0, r3
 800a4aa:	bfb8      	it	lt
 800a4ac:	4618      	movlt	r0, r3
 800a4ae:	e730      	b.n	800a312 <_printf_float+0xc6>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	464a      	mov	r2, r9
 800a4b4:	4631      	mov	r1, r6
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	47b8      	blx	r7
 800a4ba:	3001      	adds	r0, #1
 800a4bc:	f43f af27 	beq.w	800a30e <_printf_float+0xc2>
 800a4c0:	f108 0801 	add.w	r8, r8, #1
 800a4c4:	e7e6      	b.n	800a494 <_printf_float+0x248>
 800a4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	dc39      	bgt.n	800a540 <_printf_float+0x2f4>
 800a4cc:	4a1b      	ldr	r2, [pc, #108]	; (800a53c <_printf_float+0x2f0>)
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	4631      	mov	r1, r6
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	47b8      	blx	r7
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	f43f af19 	beq.w	800a30e <_printf_float+0xc2>
 800a4dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	d102      	bne.n	800a4ea <_printf_float+0x29e>
 800a4e4:	6823      	ldr	r3, [r4, #0]
 800a4e6:	07d9      	lsls	r1, r3, #31
 800a4e8:	d5d8      	bpl.n	800a49c <_printf_float+0x250>
 800a4ea:	ee18 3a10 	vmov	r3, s16
 800a4ee:	4652      	mov	r2, sl
 800a4f0:	4631      	mov	r1, r6
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	47b8      	blx	r7
 800a4f6:	3001      	adds	r0, #1
 800a4f8:	f43f af09 	beq.w	800a30e <_printf_float+0xc2>
 800a4fc:	f04f 0900 	mov.w	r9, #0
 800a500:	f104 0a1a 	add.w	sl, r4, #26
 800a504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a506:	425b      	negs	r3, r3
 800a508:	454b      	cmp	r3, r9
 800a50a:	dc01      	bgt.n	800a510 <_printf_float+0x2c4>
 800a50c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a50e:	e792      	b.n	800a436 <_printf_float+0x1ea>
 800a510:	2301      	movs	r3, #1
 800a512:	4652      	mov	r2, sl
 800a514:	4631      	mov	r1, r6
 800a516:	4628      	mov	r0, r5
 800a518:	47b8      	blx	r7
 800a51a:	3001      	adds	r0, #1
 800a51c:	f43f aef7 	beq.w	800a30e <_printf_float+0xc2>
 800a520:	f109 0901 	add.w	r9, r9, #1
 800a524:	e7ee      	b.n	800a504 <_printf_float+0x2b8>
 800a526:	bf00      	nop
 800a528:	7fefffff 	.word	0x7fefffff
 800a52c:	08011cbc 	.word	0x08011cbc
 800a530:	08011cc0 	.word	0x08011cc0
 800a534:	08011cc8 	.word	0x08011cc8
 800a538:	08011cc4 	.word	0x08011cc4
 800a53c:	080120c1 	.word	0x080120c1
 800a540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a542:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a544:	429a      	cmp	r2, r3
 800a546:	bfa8      	it	ge
 800a548:	461a      	movge	r2, r3
 800a54a:	2a00      	cmp	r2, #0
 800a54c:	4691      	mov	r9, r2
 800a54e:	dc37      	bgt.n	800a5c0 <_printf_float+0x374>
 800a550:	f04f 0b00 	mov.w	fp, #0
 800a554:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a558:	f104 021a 	add.w	r2, r4, #26
 800a55c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a55e:	9305      	str	r3, [sp, #20]
 800a560:	eba3 0309 	sub.w	r3, r3, r9
 800a564:	455b      	cmp	r3, fp
 800a566:	dc33      	bgt.n	800a5d0 <_printf_float+0x384>
 800a568:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a56c:	429a      	cmp	r2, r3
 800a56e:	db3b      	blt.n	800a5e8 <_printf_float+0x39c>
 800a570:	6823      	ldr	r3, [r4, #0]
 800a572:	07da      	lsls	r2, r3, #31
 800a574:	d438      	bmi.n	800a5e8 <_printf_float+0x39c>
 800a576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a578:	9a05      	ldr	r2, [sp, #20]
 800a57a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a57c:	1a9a      	subs	r2, r3, r2
 800a57e:	eba3 0901 	sub.w	r9, r3, r1
 800a582:	4591      	cmp	r9, r2
 800a584:	bfa8      	it	ge
 800a586:	4691      	movge	r9, r2
 800a588:	f1b9 0f00 	cmp.w	r9, #0
 800a58c:	dc35      	bgt.n	800a5fa <_printf_float+0x3ae>
 800a58e:	f04f 0800 	mov.w	r8, #0
 800a592:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a596:	f104 0a1a 	add.w	sl, r4, #26
 800a59a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a59e:	1a9b      	subs	r3, r3, r2
 800a5a0:	eba3 0309 	sub.w	r3, r3, r9
 800a5a4:	4543      	cmp	r3, r8
 800a5a6:	f77f af79 	ble.w	800a49c <_printf_float+0x250>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	4652      	mov	r2, sl
 800a5ae:	4631      	mov	r1, r6
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	47b8      	blx	r7
 800a5b4:	3001      	adds	r0, #1
 800a5b6:	f43f aeaa 	beq.w	800a30e <_printf_float+0xc2>
 800a5ba:	f108 0801 	add.w	r8, r8, #1
 800a5be:	e7ec      	b.n	800a59a <_printf_float+0x34e>
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	4631      	mov	r1, r6
 800a5c4:	4642      	mov	r2, r8
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	47b8      	blx	r7
 800a5ca:	3001      	adds	r0, #1
 800a5cc:	d1c0      	bne.n	800a550 <_printf_float+0x304>
 800a5ce:	e69e      	b.n	800a30e <_printf_float+0xc2>
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	4631      	mov	r1, r6
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	9205      	str	r2, [sp, #20]
 800a5d8:	47b8      	blx	r7
 800a5da:	3001      	adds	r0, #1
 800a5dc:	f43f ae97 	beq.w	800a30e <_printf_float+0xc2>
 800a5e0:	9a05      	ldr	r2, [sp, #20]
 800a5e2:	f10b 0b01 	add.w	fp, fp, #1
 800a5e6:	e7b9      	b.n	800a55c <_printf_float+0x310>
 800a5e8:	ee18 3a10 	vmov	r3, s16
 800a5ec:	4652      	mov	r2, sl
 800a5ee:	4631      	mov	r1, r6
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	47b8      	blx	r7
 800a5f4:	3001      	adds	r0, #1
 800a5f6:	d1be      	bne.n	800a576 <_printf_float+0x32a>
 800a5f8:	e689      	b.n	800a30e <_printf_float+0xc2>
 800a5fa:	9a05      	ldr	r2, [sp, #20]
 800a5fc:	464b      	mov	r3, r9
 800a5fe:	4442      	add	r2, r8
 800a600:	4631      	mov	r1, r6
 800a602:	4628      	mov	r0, r5
 800a604:	47b8      	blx	r7
 800a606:	3001      	adds	r0, #1
 800a608:	d1c1      	bne.n	800a58e <_printf_float+0x342>
 800a60a:	e680      	b.n	800a30e <_printf_float+0xc2>
 800a60c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a60e:	2a01      	cmp	r2, #1
 800a610:	dc01      	bgt.n	800a616 <_printf_float+0x3ca>
 800a612:	07db      	lsls	r3, r3, #31
 800a614:	d538      	bpl.n	800a688 <_printf_float+0x43c>
 800a616:	2301      	movs	r3, #1
 800a618:	4642      	mov	r2, r8
 800a61a:	4631      	mov	r1, r6
 800a61c:	4628      	mov	r0, r5
 800a61e:	47b8      	blx	r7
 800a620:	3001      	adds	r0, #1
 800a622:	f43f ae74 	beq.w	800a30e <_printf_float+0xc2>
 800a626:	ee18 3a10 	vmov	r3, s16
 800a62a:	4652      	mov	r2, sl
 800a62c:	4631      	mov	r1, r6
 800a62e:	4628      	mov	r0, r5
 800a630:	47b8      	blx	r7
 800a632:	3001      	adds	r0, #1
 800a634:	f43f ae6b 	beq.w	800a30e <_printf_float+0xc2>
 800a638:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a63c:	2200      	movs	r2, #0
 800a63e:	2300      	movs	r3, #0
 800a640:	f7f6 fa5a 	bl	8000af8 <__aeabi_dcmpeq>
 800a644:	b9d8      	cbnz	r0, 800a67e <_printf_float+0x432>
 800a646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a648:	f108 0201 	add.w	r2, r8, #1
 800a64c:	3b01      	subs	r3, #1
 800a64e:	4631      	mov	r1, r6
 800a650:	4628      	mov	r0, r5
 800a652:	47b8      	blx	r7
 800a654:	3001      	adds	r0, #1
 800a656:	d10e      	bne.n	800a676 <_printf_float+0x42a>
 800a658:	e659      	b.n	800a30e <_printf_float+0xc2>
 800a65a:	2301      	movs	r3, #1
 800a65c:	4652      	mov	r2, sl
 800a65e:	4631      	mov	r1, r6
 800a660:	4628      	mov	r0, r5
 800a662:	47b8      	blx	r7
 800a664:	3001      	adds	r0, #1
 800a666:	f43f ae52 	beq.w	800a30e <_printf_float+0xc2>
 800a66a:	f108 0801 	add.w	r8, r8, #1
 800a66e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a670:	3b01      	subs	r3, #1
 800a672:	4543      	cmp	r3, r8
 800a674:	dcf1      	bgt.n	800a65a <_printf_float+0x40e>
 800a676:	464b      	mov	r3, r9
 800a678:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a67c:	e6dc      	b.n	800a438 <_printf_float+0x1ec>
 800a67e:	f04f 0800 	mov.w	r8, #0
 800a682:	f104 0a1a 	add.w	sl, r4, #26
 800a686:	e7f2      	b.n	800a66e <_printf_float+0x422>
 800a688:	2301      	movs	r3, #1
 800a68a:	4642      	mov	r2, r8
 800a68c:	e7df      	b.n	800a64e <_printf_float+0x402>
 800a68e:	2301      	movs	r3, #1
 800a690:	464a      	mov	r2, r9
 800a692:	4631      	mov	r1, r6
 800a694:	4628      	mov	r0, r5
 800a696:	47b8      	blx	r7
 800a698:	3001      	adds	r0, #1
 800a69a:	f43f ae38 	beq.w	800a30e <_printf_float+0xc2>
 800a69e:	f108 0801 	add.w	r8, r8, #1
 800a6a2:	68e3      	ldr	r3, [r4, #12]
 800a6a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a6a6:	1a5b      	subs	r3, r3, r1
 800a6a8:	4543      	cmp	r3, r8
 800a6aa:	dcf0      	bgt.n	800a68e <_printf_float+0x442>
 800a6ac:	e6fa      	b.n	800a4a4 <_printf_float+0x258>
 800a6ae:	f04f 0800 	mov.w	r8, #0
 800a6b2:	f104 0919 	add.w	r9, r4, #25
 800a6b6:	e7f4      	b.n	800a6a2 <_printf_float+0x456>

0800a6b8 <_printf_common>:
 800a6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6bc:	4616      	mov	r6, r2
 800a6be:	4699      	mov	r9, r3
 800a6c0:	688a      	ldr	r2, [r1, #8]
 800a6c2:	690b      	ldr	r3, [r1, #16]
 800a6c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	bfb8      	it	lt
 800a6cc:	4613      	movlt	r3, r2
 800a6ce:	6033      	str	r3, [r6, #0]
 800a6d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6d4:	4607      	mov	r7, r0
 800a6d6:	460c      	mov	r4, r1
 800a6d8:	b10a      	cbz	r2, 800a6de <_printf_common+0x26>
 800a6da:	3301      	adds	r3, #1
 800a6dc:	6033      	str	r3, [r6, #0]
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	0699      	lsls	r1, r3, #26
 800a6e2:	bf42      	ittt	mi
 800a6e4:	6833      	ldrmi	r3, [r6, #0]
 800a6e6:	3302      	addmi	r3, #2
 800a6e8:	6033      	strmi	r3, [r6, #0]
 800a6ea:	6825      	ldr	r5, [r4, #0]
 800a6ec:	f015 0506 	ands.w	r5, r5, #6
 800a6f0:	d106      	bne.n	800a700 <_printf_common+0x48>
 800a6f2:	f104 0a19 	add.w	sl, r4, #25
 800a6f6:	68e3      	ldr	r3, [r4, #12]
 800a6f8:	6832      	ldr	r2, [r6, #0]
 800a6fa:	1a9b      	subs	r3, r3, r2
 800a6fc:	42ab      	cmp	r3, r5
 800a6fe:	dc26      	bgt.n	800a74e <_printf_common+0x96>
 800a700:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a704:	1e13      	subs	r3, r2, #0
 800a706:	6822      	ldr	r2, [r4, #0]
 800a708:	bf18      	it	ne
 800a70a:	2301      	movne	r3, #1
 800a70c:	0692      	lsls	r2, r2, #26
 800a70e:	d42b      	bmi.n	800a768 <_printf_common+0xb0>
 800a710:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a714:	4649      	mov	r1, r9
 800a716:	4638      	mov	r0, r7
 800a718:	47c0      	blx	r8
 800a71a:	3001      	adds	r0, #1
 800a71c:	d01e      	beq.n	800a75c <_printf_common+0xa4>
 800a71e:	6823      	ldr	r3, [r4, #0]
 800a720:	68e5      	ldr	r5, [r4, #12]
 800a722:	6832      	ldr	r2, [r6, #0]
 800a724:	f003 0306 	and.w	r3, r3, #6
 800a728:	2b04      	cmp	r3, #4
 800a72a:	bf08      	it	eq
 800a72c:	1aad      	subeq	r5, r5, r2
 800a72e:	68a3      	ldr	r3, [r4, #8]
 800a730:	6922      	ldr	r2, [r4, #16]
 800a732:	bf0c      	ite	eq
 800a734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a738:	2500      	movne	r5, #0
 800a73a:	4293      	cmp	r3, r2
 800a73c:	bfc4      	itt	gt
 800a73e:	1a9b      	subgt	r3, r3, r2
 800a740:	18ed      	addgt	r5, r5, r3
 800a742:	2600      	movs	r6, #0
 800a744:	341a      	adds	r4, #26
 800a746:	42b5      	cmp	r5, r6
 800a748:	d11a      	bne.n	800a780 <_printf_common+0xc8>
 800a74a:	2000      	movs	r0, #0
 800a74c:	e008      	b.n	800a760 <_printf_common+0xa8>
 800a74e:	2301      	movs	r3, #1
 800a750:	4652      	mov	r2, sl
 800a752:	4649      	mov	r1, r9
 800a754:	4638      	mov	r0, r7
 800a756:	47c0      	blx	r8
 800a758:	3001      	adds	r0, #1
 800a75a:	d103      	bne.n	800a764 <_printf_common+0xac>
 800a75c:	f04f 30ff 	mov.w	r0, #4294967295
 800a760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a764:	3501      	adds	r5, #1
 800a766:	e7c6      	b.n	800a6f6 <_printf_common+0x3e>
 800a768:	18e1      	adds	r1, r4, r3
 800a76a:	1c5a      	adds	r2, r3, #1
 800a76c:	2030      	movs	r0, #48	; 0x30
 800a76e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a772:	4422      	add	r2, r4
 800a774:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a778:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a77c:	3302      	adds	r3, #2
 800a77e:	e7c7      	b.n	800a710 <_printf_common+0x58>
 800a780:	2301      	movs	r3, #1
 800a782:	4622      	mov	r2, r4
 800a784:	4649      	mov	r1, r9
 800a786:	4638      	mov	r0, r7
 800a788:	47c0      	blx	r8
 800a78a:	3001      	adds	r0, #1
 800a78c:	d0e6      	beq.n	800a75c <_printf_common+0xa4>
 800a78e:	3601      	adds	r6, #1
 800a790:	e7d9      	b.n	800a746 <_printf_common+0x8e>
	...

0800a794 <_printf_i>:
 800a794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a798:	7e0f      	ldrb	r7, [r1, #24]
 800a79a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a79c:	2f78      	cmp	r7, #120	; 0x78
 800a79e:	4691      	mov	r9, r2
 800a7a0:	4680      	mov	r8, r0
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	469a      	mov	sl, r3
 800a7a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a7aa:	d807      	bhi.n	800a7bc <_printf_i+0x28>
 800a7ac:	2f62      	cmp	r7, #98	; 0x62
 800a7ae:	d80a      	bhi.n	800a7c6 <_printf_i+0x32>
 800a7b0:	2f00      	cmp	r7, #0
 800a7b2:	f000 80d8 	beq.w	800a966 <_printf_i+0x1d2>
 800a7b6:	2f58      	cmp	r7, #88	; 0x58
 800a7b8:	f000 80a3 	beq.w	800a902 <_printf_i+0x16e>
 800a7bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a7c4:	e03a      	b.n	800a83c <_printf_i+0xa8>
 800a7c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a7ca:	2b15      	cmp	r3, #21
 800a7cc:	d8f6      	bhi.n	800a7bc <_printf_i+0x28>
 800a7ce:	a101      	add	r1, pc, #4	; (adr r1, 800a7d4 <_printf_i+0x40>)
 800a7d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7d4:	0800a82d 	.word	0x0800a82d
 800a7d8:	0800a841 	.word	0x0800a841
 800a7dc:	0800a7bd 	.word	0x0800a7bd
 800a7e0:	0800a7bd 	.word	0x0800a7bd
 800a7e4:	0800a7bd 	.word	0x0800a7bd
 800a7e8:	0800a7bd 	.word	0x0800a7bd
 800a7ec:	0800a841 	.word	0x0800a841
 800a7f0:	0800a7bd 	.word	0x0800a7bd
 800a7f4:	0800a7bd 	.word	0x0800a7bd
 800a7f8:	0800a7bd 	.word	0x0800a7bd
 800a7fc:	0800a7bd 	.word	0x0800a7bd
 800a800:	0800a94d 	.word	0x0800a94d
 800a804:	0800a871 	.word	0x0800a871
 800a808:	0800a92f 	.word	0x0800a92f
 800a80c:	0800a7bd 	.word	0x0800a7bd
 800a810:	0800a7bd 	.word	0x0800a7bd
 800a814:	0800a96f 	.word	0x0800a96f
 800a818:	0800a7bd 	.word	0x0800a7bd
 800a81c:	0800a871 	.word	0x0800a871
 800a820:	0800a7bd 	.word	0x0800a7bd
 800a824:	0800a7bd 	.word	0x0800a7bd
 800a828:	0800a937 	.word	0x0800a937
 800a82c:	682b      	ldr	r3, [r5, #0]
 800a82e:	1d1a      	adds	r2, r3, #4
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	602a      	str	r2, [r5, #0]
 800a834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a83c:	2301      	movs	r3, #1
 800a83e:	e0a3      	b.n	800a988 <_printf_i+0x1f4>
 800a840:	6820      	ldr	r0, [r4, #0]
 800a842:	6829      	ldr	r1, [r5, #0]
 800a844:	0606      	lsls	r6, r0, #24
 800a846:	f101 0304 	add.w	r3, r1, #4
 800a84a:	d50a      	bpl.n	800a862 <_printf_i+0xce>
 800a84c:	680e      	ldr	r6, [r1, #0]
 800a84e:	602b      	str	r3, [r5, #0]
 800a850:	2e00      	cmp	r6, #0
 800a852:	da03      	bge.n	800a85c <_printf_i+0xc8>
 800a854:	232d      	movs	r3, #45	; 0x2d
 800a856:	4276      	negs	r6, r6
 800a858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a85c:	485e      	ldr	r0, [pc, #376]	; (800a9d8 <_printf_i+0x244>)
 800a85e:	230a      	movs	r3, #10
 800a860:	e019      	b.n	800a896 <_printf_i+0x102>
 800a862:	680e      	ldr	r6, [r1, #0]
 800a864:	602b      	str	r3, [r5, #0]
 800a866:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a86a:	bf18      	it	ne
 800a86c:	b236      	sxthne	r6, r6
 800a86e:	e7ef      	b.n	800a850 <_printf_i+0xbc>
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	6820      	ldr	r0, [r4, #0]
 800a874:	1d19      	adds	r1, r3, #4
 800a876:	6029      	str	r1, [r5, #0]
 800a878:	0601      	lsls	r1, r0, #24
 800a87a:	d501      	bpl.n	800a880 <_printf_i+0xec>
 800a87c:	681e      	ldr	r6, [r3, #0]
 800a87e:	e002      	b.n	800a886 <_printf_i+0xf2>
 800a880:	0646      	lsls	r6, r0, #25
 800a882:	d5fb      	bpl.n	800a87c <_printf_i+0xe8>
 800a884:	881e      	ldrh	r6, [r3, #0]
 800a886:	4854      	ldr	r0, [pc, #336]	; (800a9d8 <_printf_i+0x244>)
 800a888:	2f6f      	cmp	r7, #111	; 0x6f
 800a88a:	bf0c      	ite	eq
 800a88c:	2308      	moveq	r3, #8
 800a88e:	230a      	movne	r3, #10
 800a890:	2100      	movs	r1, #0
 800a892:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a896:	6865      	ldr	r5, [r4, #4]
 800a898:	60a5      	str	r5, [r4, #8]
 800a89a:	2d00      	cmp	r5, #0
 800a89c:	bfa2      	ittt	ge
 800a89e:	6821      	ldrge	r1, [r4, #0]
 800a8a0:	f021 0104 	bicge.w	r1, r1, #4
 800a8a4:	6021      	strge	r1, [r4, #0]
 800a8a6:	b90e      	cbnz	r6, 800a8ac <_printf_i+0x118>
 800a8a8:	2d00      	cmp	r5, #0
 800a8aa:	d04d      	beq.n	800a948 <_printf_i+0x1b4>
 800a8ac:	4615      	mov	r5, r2
 800a8ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800a8b2:	fb03 6711 	mls	r7, r3, r1, r6
 800a8b6:	5dc7      	ldrb	r7, [r0, r7]
 800a8b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a8bc:	4637      	mov	r7, r6
 800a8be:	42bb      	cmp	r3, r7
 800a8c0:	460e      	mov	r6, r1
 800a8c2:	d9f4      	bls.n	800a8ae <_printf_i+0x11a>
 800a8c4:	2b08      	cmp	r3, #8
 800a8c6:	d10b      	bne.n	800a8e0 <_printf_i+0x14c>
 800a8c8:	6823      	ldr	r3, [r4, #0]
 800a8ca:	07de      	lsls	r6, r3, #31
 800a8cc:	d508      	bpl.n	800a8e0 <_printf_i+0x14c>
 800a8ce:	6923      	ldr	r3, [r4, #16]
 800a8d0:	6861      	ldr	r1, [r4, #4]
 800a8d2:	4299      	cmp	r1, r3
 800a8d4:	bfde      	ittt	le
 800a8d6:	2330      	movle	r3, #48	; 0x30
 800a8d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a8e0:	1b52      	subs	r2, r2, r5
 800a8e2:	6122      	str	r2, [r4, #16]
 800a8e4:	f8cd a000 	str.w	sl, [sp]
 800a8e8:	464b      	mov	r3, r9
 800a8ea:	aa03      	add	r2, sp, #12
 800a8ec:	4621      	mov	r1, r4
 800a8ee:	4640      	mov	r0, r8
 800a8f0:	f7ff fee2 	bl	800a6b8 <_printf_common>
 800a8f4:	3001      	adds	r0, #1
 800a8f6:	d14c      	bne.n	800a992 <_printf_i+0x1fe>
 800a8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8fc:	b004      	add	sp, #16
 800a8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a902:	4835      	ldr	r0, [pc, #212]	; (800a9d8 <_printf_i+0x244>)
 800a904:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a908:	6829      	ldr	r1, [r5, #0]
 800a90a:	6823      	ldr	r3, [r4, #0]
 800a90c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a910:	6029      	str	r1, [r5, #0]
 800a912:	061d      	lsls	r5, r3, #24
 800a914:	d514      	bpl.n	800a940 <_printf_i+0x1ac>
 800a916:	07df      	lsls	r7, r3, #31
 800a918:	bf44      	itt	mi
 800a91a:	f043 0320 	orrmi.w	r3, r3, #32
 800a91e:	6023      	strmi	r3, [r4, #0]
 800a920:	b91e      	cbnz	r6, 800a92a <_printf_i+0x196>
 800a922:	6823      	ldr	r3, [r4, #0]
 800a924:	f023 0320 	bic.w	r3, r3, #32
 800a928:	6023      	str	r3, [r4, #0]
 800a92a:	2310      	movs	r3, #16
 800a92c:	e7b0      	b.n	800a890 <_printf_i+0xfc>
 800a92e:	6823      	ldr	r3, [r4, #0]
 800a930:	f043 0320 	orr.w	r3, r3, #32
 800a934:	6023      	str	r3, [r4, #0]
 800a936:	2378      	movs	r3, #120	; 0x78
 800a938:	4828      	ldr	r0, [pc, #160]	; (800a9dc <_printf_i+0x248>)
 800a93a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a93e:	e7e3      	b.n	800a908 <_printf_i+0x174>
 800a940:	0659      	lsls	r1, r3, #25
 800a942:	bf48      	it	mi
 800a944:	b2b6      	uxthmi	r6, r6
 800a946:	e7e6      	b.n	800a916 <_printf_i+0x182>
 800a948:	4615      	mov	r5, r2
 800a94a:	e7bb      	b.n	800a8c4 <_printf_i+0x130>
 800a94c:	682b      	ldr	r3, [r5, #0]
 800a94e:	6826      	ldr	r6, [r4, #0]
 800a950:	6961      	ldr	r1, [r4, #20]
 800a952:	1d18      	adds	r0, r3, #4
 800a954:	6028      	str	r0, [r5, #0]
 800a956:	0635      	lsls	r5, r6, #24
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	d501      	bpl.n	800a960 <_printf_i+0x1cc>
 800a95c:	6019      	str	r1, [r3, #0]
 800a95e:	e002      	b.n	800a966 <_printf_i+0x1d2>
 800a960:	0670      	lsls	r0, r6, #25
 800a962:	d5fb      	bpl.n	800a95c <_printf_i+0x1c8>
 800a964:	8019      	strh	r1, [r3, #0]
 800a966:	2300      	movs	r3, #0
 800a968:	6123      	str	r3, [r4, #16]
 800a96a:	4615      	mov	r5, r2
 800a96c:	e7ba      	b.n	800a8e4 <_printf_i+0x150>
 800a96e:	682b      	ldr	r3, [r5, #0]
 800a970:	1d1a      	adds	r2, r3, #4
 800a972:	602a      	str	r2, [r5, #0]
 800a974:	681d      	ldr	r5, [r3, #0]
 800a976:	6862      	ldr	r2, [r4, #4]
 800a978:	2100      	movs	r1, #0
 800a97a:	4628      	mov	r0, r5
 800a97c:	f7f5 fc48 	bl	8000210 <memchr>
 800a980:	b108      	cbz	r0, 800a986 <_printf_i+0x1f2>
 800a982:	1b40      	subs	r0, r0, r5
 800a984:	6060      	str	r0, [r4, #4]
 800a986:	6863      	ldr	r3, [r4, #4]
 800a988:	6123      	str	r3, [r4, #16]
 800a98a:	2300      	movs	r3, #0
 800a98c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a990:	e7a8      	b.n	800a8e4 <_printf_i+0x150>
 800a992:	6923      	ldr	r3, [r4, #16]
 800a994:	462a      	mov	r2, r5
 800a996:	4649      	mov	r1, r9
 800a998:	4640      	mov	r0, r8
 800a99a:	47d0      	blx	sl
 800a99c:	3001      	adds	r0, #1
 800a99e:	d0ab      	beq.n	800a8f8 <_printf_i+0x164>
 800a9a0:	6823      	ldr	r3, [r4, #0]
 800a9a2:	079b      	lsls	r3, r3, #30
 800a9a4:	d413      	bmi.n	800a9ce <_printf_i+0x23a>
 800a9a6:	68e0      	ldr	r0, [r4, #12]
 800a9a8:	9b03      	ldr	r3, [sp, #12]
 800a9aa:	4298      	cmp	r0, r3
 800a9ac:	bfb8      	it	lt
 800a9ae:	4618      	movlt	r0, r3
 800a9b0:	e7a4      	b.n	800a8fc <_printf_i+0x168>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	4632      	mov	r2, r6
 800a9b6:	4649      	mov	r1, r9
 800a9b8:	4640      	mov	r0, r8
 800a9ba:	47d0      	blx	sl
 800a9bc:	3001      	adds	r0, #1
 800a9be:	d09b      	beq.n	800a8f8 <_printf_i+0x164>
 800a9c0:	3501      	adds	r5, #1
 800a9c2:	68e3      	ldr	r3, [r4, #12]
 800a9c4:	9903      	ldr	r1, [sp, #12]
 800a9c6:	1a5b      	subs	r3, r3, r1
 800a9c8:	42ab      	cmp	r3, r5
 800a9ca:	dcf2      	bgt.n	800a9b2 <_printf_i+0x21e>
 800a9cc:	e7eb      	b.n	800a9a6 <_printf_i+0x212>
 800a9ce:	2500      	movs	r5, #0
 800a9d0:	f104 0619 	add.w	r6, r4, #25
 800a9d4:	e7f5      	b.n	800a9c2 <_printf_i+0x22e>
 800a9d6:	bf00      	nop
 800a9d8:	08011ccc 	.word	0x08011ccc
 800a9dc:	08011cdd 	.word	0x08011cdd

0800a9e0 <_scanf_float>:
 800a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	b087      	sub	sp, #28
 800a9e6:	4617      	mov	r7, r2
 800a9e8:	9303      	str	r3, [sp, #12]
 800a9ea:	688b      	ldr	r3, [r1, #8]
 800a9ec:	1e5a      	subs	r2, r3, #1
 800a9ee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a9f2:	bf83      	ittte	hi
 800a9f4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a9f8:	195b      	addhi	r3, r3, r5
 800a9fa:	9302      	strhi	r3, [sp, #8]
 800a9fc:	2300      	movls	r3, #0
 800a9fe:	bf86      	itte	hi
 800aa00:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aa04:	608b      	strhi	r3, [r1, #8]
 800aa06:	9302      	strls	r3, [sp, #8]
 800aa08:	680b      	ldr	r3, [r1, #0]
 800aa0a:	468b      	mov	fp, r1
 800aa0c:	2500      	movs	r5, #0
 800aa0e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800aa12:	f84b 3b1c 	str.w	r3, [fp], #28
 800aa16:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aa1a:	4680      	mov	r8, r0
 800aa1c:	460c      	mov	r4, r1
 800aa1e:	465e      	mov	r6, fp
 800aa20:	46aa      	mov	sl, r5
 800aa22:	46a9      	mov	r9, r5
 800aa24:	9501      	str	r5, [sp, #4]
 800aa26:	68a2      	ldr	r2, [r4, #8]
 800aa28:	b152      	cbz	r2, 800aa40 <_scanf_float+0x60>
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	2b4e      	cmp	r3, #78	; 0x4e
 800aa30:	d864      	bhi.n	800aafc <_scanf_float+0x11c>
 800aa32:	2b40      	cmp	r3, #64	; 0x40
 800aa34:	d83c      	bhi.n	800aab0 <_scanf_float+0xd0>
 800aa36:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800aa3a:	b2c8      	uxtb	r0, r1
 800aa3c:	280e      	cmp	r0, #14
 800aa3e:	d93a      	bls.n	800aab6 <_scanf_float+0xd6>
 800aa40:	f1b9 0f00 	cmp.w	r9, #0
 800aa44:	d003      	beq.n	800aa4e <_scanf_float+0x6e>
 800aa46:	6823      	ldr	r3, [r4, #0]
 800aa48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa4c:	6023      	str	r3, [r4, #0]
 800aa4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa52:	f1ba 0f01 	cmp.w	sl, #1
 800aa56:	f200 8113 	bhi.w	800ac80 <_scanf_float+0x2a0>
 800aa5a:	455e      	cmp	r6, fp
 800aa5c:	f200 8105 	bhi.w	800ac6a <_scanf_float+0x28a>
 800aa60:	2501      	movs	r5, #1
 800aa62:	4628      	mov	r0, r5
 800aa64:	b007      	add	sp, #28
 800aa66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa6a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800aa6e:	2a0d      	cmp	r2, #13
 800aa70:	d8e6      	bhi.n	800aa40 <_scanf_float+0x60>
 800aa72:	a101      	add	r1, pc, #4	; (adr r1, 800aa78 <_scanf_float+0x98>)
 800aa74:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aa78:	0800abb7 	.word	0x0800abb7
 800aa7c:	0800aa41 	.word	0x0800aa41
 800aa80:	0800aa41 	.word	0x0800aa41
 800aa84:	0800aa41 	.word	0x0800aa41
 800aa88:	0800ac17 	.word	0x0800ac17
 800aa8c:	0800abef 	.word	0x0800abef
 800aa90:	0800aa41 	.word	0x0800aa41
 800aa94:	0800aa41 	.word	0x0800aa41
 800aa98:	0800abc5 	.word	0x0800abc5
 800aa9c:	0800aa41 	.word	0x0800aa41
 800aaa0:	0800aa41 	.word	0x0800aa41
 800aaa4:	0800aa41 	.word	0x0800aa41
 800aaa8:	0800aa41 	.word	0x0800aa41
 800aaac:	0800ab7d 	.word	0x0800ab7d
 800aab0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800aab4:	e7db      	b.n	800aa6e <_scanf_float+0x8e>
 800aab6:	290e      	cmp	r1, #14
 800aab8:	d8c2      	bhi.n	800aa40 <_scanf_float+0x60>
 800aaba:	a001      	add	r0, pc, #4	; (adr r0, 800aac0 <_scanf_float+0xe0>)
 800aabc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800aac0:	0800ab6f 	.word	0x0800ab6f
 800aac4:	0800aa41 	.word	0x0800aa41
 800aac8:	0800ab6f 	.word	0x0800ab6f
 800aacc:	0800ac03 	.word	0x0800ac03
 800aad0:	0800aa41 	.word	0x0800aa41
 800aad4:	0800ab1d 	.word	0x0800ab1d
 800aad8:	0800ab59 	.word	0x0800ab59
 800aadc:	0800ab59 	.word	0x0800ab59
 800aae0:	0800ab59 	.word	0x0800ab59
 800aae4:	0800ab59 	.word	0x0800ab59
 800aae8:	0800ab59 	.word	0x0800ab59
 800aaec:	0800ab59 	.word	0x0800ab59
 800aaf0:	0800ab59 	.word	0x0800ab59
 800aaf4:	0800ab59 	.word	0x0800ab59
 800aaf8:	0800ab59 	.word	0x0800ab59
 800aafc:	2b6e      	cmp	r3, #110	; 0x6e
 800aafe:	d809      	bhi.n	800ab14 <_scanf_float+0x134>
 800ab00:	2b60      	cmp	r3, #96	; 0x60
 800ab02:	d8b2      	bhi.n	800aa6a <_scanf_float+0x8a>
 800ab04:	2b54      	cmp	r3, #84	; 0x54
 800ab06:	d077      	beq.n	800abf8 <_scanf_float+0x218>
 800ab08:	2b59      	cmp	r3, #89	; 0x59
 800ab0a:	d199      	bne.n	800aa40 <_scanf_float+0x60>
 800ab0c:	2d07      	cmp	r5, #7
 800ab0e:	d197      	bne.n	800aa40 <_scanf_float+0x60>
 800ab10:	2508      	movs	r5, #8
 800ab12:	e029      	b.n	800ab68 <_scanf_float+0x188>
 800ab14:	2b74      	cmp	r3, #116	; 0x74
 800ab16:	d06f      	beq.n	800abf8 <_scanf_float+0x218>
 800ab18:	2b79      	cmp	r3, #121	; 0x79
 800ab1a:	e7f6      	b.n	800ab0a <_scanf_float+0x12a>
 800ab1c:	6821      	ldr	r1, [r4, #0]
 800ab1e:	05c8      	lsls	r0, r1, #23
 800ab20:	d51a      	bpl.n	800ab58 <_scanf_float+0x178>
 800ab22:	9b02      	ldr	r3, [sp, #8]
 800ab24:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ab28:	6021      	str	r1, [r4, #0]
 800ab2a:	f109 0901 	add.w	r9, r9, #1
 800ab2e:	b11b      	cbz	r3, 800ab38 <_scanf_float+0x158>
 800ab30:	3b01      	subs	r3, #1
 800ab32:	3201      	adds	r2, #1
 800ab34:	9302      	str	r3, [sp, #8]
 800ab36:	60a2      	str	r2, [r4, #8]
 800ab38:	68a3      	ldr	r3, [r4, #8]
 800ab3a:	3b01      	subs	r3, #1
 800ab3c:	60a3      	str	r3, [r4, #8]
 800ab3e:	6923      	ldr	r3, [r4, #16]
 800ab40:	3301      	adds	r3, #1
 800ab42:	6123      	str	r3, [r4, #16]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	3b01      	subs	r3, #1
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	607b      	str	r3, [r7, #4]
 800ab4c:	f340 8084 	ble.w	800ac58 <_scanf_float+0x278>
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	3301      	adds	r3, #1
 800ab54:	603b      	str	r3, [r7, #0]
 800ab56:	e766      	b.n	800aa26 <_scanf_float+0x46>
 800ab58:	eb1a 0f05 	cmn.w	sl, r5
 800ab5c:	f47f af70 	bne.w	800aa40 <_scanf_float+0x60>
 800ab60:	6822      	ldr	r2, [r4, #0]
 800ab62:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ab66:	6022      	str	r2, [r4, #0]
 800ab68:	f806 3b01 	strb.w	r3, [r6], #1
 800ab6c:	e7e4      	b.n	800ab38 <_scanf_float+0x158>
 800ab6e:	6822      	ldr	r2, [r4, #0]
 800ab70:	0610      	lsls	r0, r2, #24
 800ab72:	f57f af65 	bpl.w	800aa40 <_scanf_float+0x60>
 800ab76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab7a:	e7f4      	b.n	800ab66 <_scanf_float+0x186>
 800ab7c:	f1ba 0f00 	cmp.w	sl, #0
 800ab80:	d10e      	bne.n	800aba0 <_scanf_float+0x1c0>
 800ab82:	f1b9 0f00 	cmp.w	r9, #0
 800ab86:	d10e      	bne.n	800aba6 <_scanf_float+0x1c6>
 800ab88:	6822      	ldr	r2, [r4, #0]
 800ab8a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ab8e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ab92:	d108      	bne.n	800aba6 <_scanf_float+0x1c6>
 800ab94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ab98:	6022      	str	r2, [r4, #0]
 800ab9a:	f04f 0a01 	mov.w	sl, #1
 800ab9e:	e7e3      	b.n	800ab68 <_scanf_float+0x188>
 800aba0:	f1ba 0f02 	cmp.w	sl, #2
 800aba4:	d055      	beq.n	800ac52 <_scanf_float+0x272>
 800aba6:	2d01      	cmp	r5, #1
 800aba8:	d002      	beq.n	800abb0 <_scanf_float+0x1d0>
 800abaa:	2d04      	cmp	r5, #4
 800abac:	f47f af48 	bne.w	800aa40 <_scanf_float+0x60>
 800abb0:	3501      	adds	r5, #1
 800abb2:	b2ed      	uxtb	r5, r5
 800abb4:	e7d8      	b.n	800ab68 <_scanf_float+0x188>
 800abb6:	f1ba 0f01 	cmp.w	sl, #1
 800abba:	f47f af41 	bne.w	800aa40 <_scanf_float+0x60>
 800abbe:	f04f 0a02 	mov.w	sl, #2
 800abc2:	e7d1      	b.n	800ab68 <_scanf_float+0x188>
 800abc4:	b97d      	cbnz	r5, 800abe6 <_scanf_float+0x206>
 800abc6:	f1b9 0f00 	cmp.w	r9, #0
 800abca:	f47f af3c 	bne.w	800aa46 <_scanf_float+0x66>
 800abce:	6822      	ldr	r2, [r4, #0]
 800abd0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800abd4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800abd8:	f47f af39 	bne.w	800aa4e <_scanf_float+0x6e>
 800abdc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800abe0:	6022      	str	r2, [r4, #0]
 800abe2:	2501      	movs	r5, #1
 800abe4:	e7c0      	b.n	800ab68 <_scanf_float+0x188>
 800abe6:	2d03      	cmp	r5, #3
 800abe8:	d0e2      	beq.n	800abb0 <_scanf_float+0x1d0>
 800abea:	2d05      	cmp	r5, #5
 800abec:	e7de      	b.n	800abac <_scanf_float+0x1cc>
 800abee:	2d02      	cmp	r5, #2
 800abf0:	f47f af26 	bne.w	800aa40 <_scanf_float+0x60>
 800abf4:	2503      	movs	r5, #3
 800abf6:	e7b7      	b.n	800ab68 <_scanf_float+0x188>
 800abf8:	2d06      	cmp	r5, #6
 800abfa:	f47f af21 	bne.w	800aa40 <_scanf_float+0x60>
 800abfe:	2507      	movs	r5, #7
 800ac00:	e7b2      	b.n	800ab68 <_scanf_float+0x188>
 800ac02:	6822      	ldr	r2, [r4, #0]
 800ac04:	0591      	lsls	r1, r2, #22
 800ac06:	f57f af1b 	bpl.w	800aa40 <_scanf_float+0x60>
 800ac0a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ac0e:	6022      	str	r2, [r4, #0]
 800ac10:	f8cd 9004 	str.w	r9, [sp, #4]
 800ac14:	e7a8      	b.n	800ab68 <_scanf_float+0x188>
 800ac16:	6822      	ldr	r2, [r4, #0]
 800ac18:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ac1c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ac20:	d006      	beq.n	800ac30 <_scanf_float+0x250>
 800ac22:	0550      	lsls	r0, r2, #21
 800ac24:	f57f af0c 	bpl.w	800aa40 <_scanf_float+0x60>
 800ac28:	f1b9 0f00 	cmp.w	r9, #0
 800ac2c:	f43f af0f 	beq.w	800aa4e <_scanf_float+0x6e>
 800ac30:	0591      	lsls	r1, r2, #22
 800ac32:	bf58      	it	pl
 800ac34:	9901      	ldrpl	r1, [sp, #4]
 800ac36:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ac3a:	bf58      	it	pl
 800ac3c:	eba9 0101 	subpl.w	r1, r9, r1
 800ac40:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ac44:	bf58      	it	pl
 800ac46:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ac4a:	6022      	str	r2, [r4, #0]
 800ac4c:	f04f 0900 	mov.w	r9, #0
 800ac50:	e78a      	b.n	800ab68 <_scanf_float+0x188>
 800ac52:	f04f 0a03 	mov.w	sl, #3
 800ac56:	e787      	b.n	800ab68 <_scanf_float+0x188>
 800ac58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ac5c:	4639      	mov	r1, r7
 800ac5e:	4640      	mov	r0, r8
 800ac60:	4798      	blx	r3
 800ac62:	2800      	cmp	r0, #0
 800ac64:	f43f aedf 	beq.w	800aa26 <_scanf_float+0x46>
 800ac68:	e6ea      	b.n	800aa40 <_scanf_float+0x60>
 800ac6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac72:	463a      	mov	r2, r7
 800ac74:	4640      	mov	r0, r8
 800ac76:	4798      	blx	r3
 800ac78:	6923      	ldr	r3, [r4, #16]
 800ac7a:	3b01      	subs	r3, #1
 800ac7c:	6123      	str	r3, [r4, #16]
 800ac7e:	e6ec      	b.n	800aa5a <_scanf_float+0x7a>
 800ac80:	1e6b      	subs	r3, r5, #1
 800ac82:	2b06      	cmp	r3, #6
 800ac84:	d825      	bhi.n	800acd2 <_scanf_float+0x2f2>
 800ac86:	2d02      	cmp	r5, #2
 800ac88:	d836      	bhi.n	800acf8 <_scanf_float+0x318>
 800ac8a:	455e      	cmp	r6, fp
 800ac8c:	f67f aee8 	bls.w	800aa60 <_scanf_float+0x80>
 800ac90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac94:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac98:	463a      	mov	r2, r7
 800ac9a:	4640      	mov	r0, r8
 800ac9c:	4798      	blx	r3
 800ac9e:	6923      	ldr	r3, [r4, #16]
 800aca0:	3b01      	subs	r3, #1
 800aca2:	6123      	str	r3, [r4, #16]
 800aca4:	e7f1      	b.n	800ac8a <_scanf_float+0x2aa>
 800aca6:	9802      	ldr	r0, [sp, #8]
 800aca8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800acac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800acb0:	9002      	str	r0, [sp, #8]
 800acb2:	463a      	mov	r2, r7
 800acb4:	4640      	mov	r0, r8
 800acb6:	4798      	blx	r3
 800acb8:	6923      	ldr	r3, [r4, #16]
 800acba:	3b01      	subs	r3, #1
 800acbc:	6123      	str	r3, [r4, #16]
 800acbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800acc2:	fa5f fa8a 	uxtb.w	sl, sl
 800acc6:	f1ba 0f02 	cmp.w	sl, #2
 800acca:	d1ec      	bne.n	800aca6 <_scanf_float+0x2c6>
 800accc:	3d03      	subs	r5, #3
 800acce:	b2ed      	uxtb	r5, r5
 800acd0:	1b76      	subs	r6, r6, r5
 800acd2:	6823      	ldr	r3, [r4, #0]
 800acd4:	05da      	lsls	r2, r3, #23
 800acd6:	d52f      	bpl.n	800ad38 <_scanf_float+0x358>
 800acd8:	055b      	lsls	r3, r3, #21
 800acda:	d510      	bpl.n	800acfe <_scanf_float+0x31e>
 800acdc:	455e      	cmp	r6, fp
 800acde:	f67f aebf 	bls.w	800aa60 <_scanf_float+0x80>
 800ace2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ace6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800acea:	463a      	mov	r2, r7
 800acec:	4640      	mov	r0, r8
 800acee:	4798      	blx	r3
 800acf0:	6923      	ldr	r3, [r4, #16]
 800acf2:	3b01      	subs	r3, #1
 800acf4:	6123      	str	r3, [r4, #16]
 800acf6:	e7f1      	b.n	800acdc <_scanf_float+0x2fc>
 800acf8:	46aa      	mov	sl, r5
 800acfa:	9602      	str	r6, [sp, #8]
 800acfc:	e7df      	b.n	800acbe <_scanf_float+0x2de>
 800acfe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ad02:	6923      	ldr	r3, [r4, #16]
 800ad04:	2965      	cmp	r1, #101	; 0x65
 800ad06:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad0a:	f106 35ff 	add.w	r5, r6, #4294967295
 800ad0e:	6123      	str	r3, [r4, #16]
 800ad10:	d00c      	beq.n	800ad2c <_scanf_float+0x34c>
 800ad12:	2945      	cmp	r1, #69	; 0x45
 800ad14:	d00a      	beq.n	800ad2c <_scanf_float+0x34c>
 800ad16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad1a:	463a      	mov	r2, r7
 800ad1c:	4640      	mov	r0, r8
 800ad1e:	4798      	blx	r3
 800ad20:	6923      	ldr	r3, [r4, #16]
 800ad22:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ad26:	3b01      	subs	r3, #1
 800ad28:	1eb5      	subs	r5, r6, #2
 800ad2a:	6123      	str	r3, [r4, #16]
 800ad2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad30:	463a      	mov	r2, r7
 800ad32:	4640      	mov	r0, r8
 800ad34:	4798      	blx	r3
 800ad36:	462e      	mov	r6, r5
 800ad38:	6825      	ldr	r5, [r4, #0]
 800ad3a:	f015 0510 	ands.w	r5, r5, #16
 800ad3e:	d159      	bne.n	800adf4 <_scanf_float+0x414>
 800ad40:	7035      	strb	r5, [r6, #0]
 800ad42:	6823      	ldr	r3, [r4, #0]
 800ad44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ad48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad4c:	d11b      	bne.n	800ad86 <_scanf_float+0x3a6>
 800ad4e:	9b01      	ldr	r3, [sp, #4]
 800ad50:	454b      	cmp	r3, r9
 800ad52:	eba3 0209 	sub.w	r2, r3, r9
 800ad56:	d123      	bne.n	800ada0 <_scanf_float+0x3c0>
 800ad58:	2200      	movs	r2, #0
 800ad5a:	4659      	mov	r1, fp
 800ad5c:	4640      	mov	r0, r8
 800ad5e:	f000 ff09 	bl	800bb74 <_strtod_r>
 800ad62:	6822      	ldr	r2, [r4, #0]
 800ad64:	9b03      	ldr	r3, [sp, #12]
 800ad66:	f012 0f02 	tst.w	r2, #2
 800ad6a:	ec57 6b10 	vmov	r6, r7, d0
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	d021      	beq.n	800adb6 <_scanf_float+0x3d6>
 800ad72:	9903      	ldr	r1, [sp, #12]
 800ad74:	1d1a      	adds	r2, r3, #4
 800ad76:	600a      	str	r2, [r1, #0]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	e9c3 6700 	strd	r6, r7, [r3]
 800ad7e:	68e3      	ldr	r3, [r4, #12]
 800ad80:	3301      	adds	r3, #1
 800ad82:	60e3      	str	r3, [r4, #12]
 800ad84:	e66d      	b.n	800aa62 <_scanf_float+0x82>
 800ad86:	9b04      	ldr	r3, [sp, #16]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d0e5      	beq.n	800ad58 <_scanf_float+0x378>
 800ad8c:	9905      	ldr	r1, [sp, #20]
 800ad8e:	230a      	movs	r3, #10
 800ad90:	462a      	mov	r2, r5
 800ad92:	3101      	adds	r1, #1
 800ad94:	4640      	mov	r0, r8
 800ad96:	f000 ff75 	bl	800bc84 <_strtol_r>
 800ad9a:	9b04      	ldr	r3, [sp, #16]
 800ad9c:	9e05      	ldr	r6, [sp, #20]
 800ad9e:	1ac2      	subs	r2, r0, r3
 800ada0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ada4:	429e      	cmp	r6, r3
 800ada6:	bf28      	it	cs
 800ada8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800adac:	4912      	ldr	r1, [pc, #72]	; (800adf8 <_scanf_float+0x418>)
 800adae:	4630      	mov	r0, r6
 800adb0:	f000 f82c 	bl	800ae0c <siprintf>
 800adb4:	e7d0      	b.n	800ad58 <_scanf_float+0x378>
 800adb6:	9903      	ldr	r1, [sp, #12]
 800adb8:	f012 0f04 	tst.w	r2, #4
 800adbc:	f103 0204 	add.w	r2, r3, #4
 800adc0:	600a      	str	r2, [r1, #0]
 800adc2:	d1d9      	bne.n	800ad78 <_scanf_float+0x398>
 800adc4:	f8d3 8000 	ldr.w	r8, [r3]
 800adc8:	ee10 2a10 	vmov	r2, s0
 800adcc:	ee10 0a10 	vmov	r0, s0
 800add0:	463b      	mov	r3, r7
 800add2:	4639      	mov	r1, r7
 800add4:	f7f5 fec2 	bl	8000b5c <__aeabi_dcmpun>
 800add8:	b128      	cbz	r0, 800ade6 <_scanf_float+0x406>
 800adda:	4808      	ldr	r0, [pc, #32]	; (800adfc <_scanf_float+0x41c>)
 800addc:	f000 f810 	bl	800ae00 <nanf>
 800ade0:	ed88 0a00 	vstr	s0, [r8]
 800ade4:	e7cb      	b.n	800ad7e <_scanf_float+0x39e>
 800ade6:	4630      	mov	r0, r6
 800ade8:	4639      	mov	r1, r7
 800adea:	f7f5 ff15 	bl	8000c18 <__aeabi_d2f>
 800adee:	f8c8 0000 	str.w	r0, [r8]
 800adf2:	e7c4      	b.n	800ad7e <_scanf_float+0x39e>
 800adf4:	2500      	movs	r5, #0
 800adf6:	e634      	b.n	800aa62 <_scanf_float+0x82>
 800adf8:	08011cee 	.word	0x08011cee
 800adfc:	08012113 	.word	0x08012113

0800ae00 <nanf>:
 800ae00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ae08 <nanf+0x8>
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	7fc00000 	.word	0x7fc00000

0800ae0c <siprintf>:
 800ae0c:	b40e      	push	{r1, r2, r3}
 800ae0e:	b500      	push	{lr}
 800ae10:	b09c      	sub	sp, #112	; 0x70
 800ae12:	ab1d      	add	r3, sp, #116	; 0x74
 800ae14:	9002      	str	r0, [sp, #8]
 800ae16:	9006      	str	r0, [sp, #24]
 800ae18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae1c:	4809      	ldr	r0, [pc, #36]	; (800ae44 <siprintf+0x38>)
 800ae1e:	9107      	str	r1, [sp, #28]
 800ae20:	9104      	str	r1, [sp, #16]
 800ae22:	4909      	ldr	r1, [pc, #36]	; (800ae48 <siprintf+0x3c>)
 800ae24:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae28:	9105      	str	r1, [sp, #20]
 800ae2a:	6800      	ldr	r0, [r0, #0]
 800ae2c:	9301      	str	r3, [sp, #4]
 800ae2e:	a902      	add	r1, sp, #8
 800ae30:	f002 ff7c 	bl	800dd2c <_svfiprintf_r>
 800ae34:	9b02      	ldr	r3, [sp, #8]
 800ae36:	2200      	movs	r2, #0
 800ae38:	701a      	strb	r2, [r3, #0]
 800ae3a:	b01c      	add	sp, #112	; 0x70
 800ae3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae40:	b003      	add	sp, #12
 800ae42:	4770      	bx	lr
 800ae44:	20000020 	.word	0x20000020
 800ae48:	ffff0208 	.word	0xffff0208

0800ae4c <siscanf>:
 800ae4c:	b40e      	push	{r1, r2, r3}
 800ae4e:	b510      	push	{r4, lr}
 800ae50:	b09f      	sub	sp, #124	; 0x7c
 800ae52:	ac21      	add	r4, sp, #132	; 0x84
 800ae54:	f44f 7101 	mov.w	r1, #516	; 0x204
 800ae58:	f854 2b04 	ldr.w	r2, [r4], #4
 800ae5c:	9201      	str	r2, [sp, #4]
 800ae5e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ae62:	9004      	str	r0, [sp, #16]
 800ae64:	9008      	str	r0, [sp, #32]
 800ae66:	f7f5 f9c5 	bl	80001f4 <strlen>
 800ae6a:	4b0c      	ldr	r3, [pc, #48]	; (800ae9c <siscanf+0x50>)
 800ae6c:	9005      	str	r0, [sp, #20]
 800ae6e:	9009      	str	r0, [sp, #36]	; 0x24
 800ae70:	930d      	str	r3, [sp, #52]	; 0x34
 800ae72:	480b      	ldr	r0, [pc, #44]	; (800aea0 <siscanf+0x54>)
 800ae74:	9a01      	ldr	r2, [sp, #4]
 800ae76:	6800      	ldr	r0, [r0, #0]
 800ae78:	9403      	str	r4, [sp, #12]
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	9311      	str	r3, [sp, #68]	; 0x44
 800ae7e:	9316      	str	r3, [sp, #88]	; 0x58
 800ae80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae84:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ae88:	a904      	add	r1, sp, #16
 800ae8a:	4623      	mov	r3, r4
 800ae8c:	f003 f8a8 	bl	800dfe0 <__ssvfiscanf_r>
 800ae90:	b01f      	add	sp, #124	; 0x7c
 800ae92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae96:	b003      	add	sp, #12
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	0800aec7 	.word	0x0800aec7
 800aea0:	20000020 	.word	0x20000020

0800aea4 <__sread>:
 800aea4:	b510      	push	{r4, lr}
 800aea6:	460c      	mov	r4, r1
 800aea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeac:	f003 fb62 	bl	800e574 <_read_r>
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	bfab      	itete	ge
 800aeb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aeb6:	89a3      	ldrhlt	r3, [r4, #12]
 800aeb8:	181b      	addge	r3, r3, r0
 800aeba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aebe:	bfac      	ite	ge
 800aec0:	6563      	strge	r3, [r4, #84]	; 0x54
 800aec2:	81a3      	strhlt	r3, [r4, #12]
 800aec4:	bd10      	pop	{r4, pc}

0800aec6 <__seofread>:
 800aec6:	2000      	movs	r0, #0
 800aec8:	4770      	bx	lr

0800aeca <__swrite>:
 800aeca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aece:	461f      	mov	r7, r3
 800aed0:	898b      	ldrh	r3, [r1, #12]
 800aed2:	05db      	lsls	r3, r3, #23
 800aed4:	4605      	mov	r5, r0
 800aed6:	460c      	mov	r4, r1
 800aed8:	4616      	mov	r6, r2
 800aeda:	d505      	bpl.n	800aee8 <__swrite+0x1e>
 800aedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aee0:	2302      	movs	r3, #2
 800aee2:	2200      	movs	r2, #0
 800aee4:	f002 f8e2 	bl	800d0ac <_lseek_r>
 800aee8:	89a3      	ldrh	r3, [r4, #12]
 800aeea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aeee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aef2:	81a3      	strh	r3, [r4, #12]
 800aef4:	4632      	mov	r2, r6
 800aef6:	463b      	mov	r3, r7
 800aef8:	4628      	mov	r0, r5
 800aefa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aefe:	f000 bec3 	b.w	800bc88 <_write_r>

0800af02 <__sseek>:
 800af02:	b510      	push	{r4, lr}
 800af04:	460c      	mov	r4, r1
 800af06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af0a:	f002 f8cf 	bl	800d0ac <_lseek_r>
 800af0e:	1c43      	adds	r3, r0, #1
 800af10:	89a3      	ldrh	r3, [r4, #12]
 800af12:	bf15      	itete	ne
 800af14:	6560      	strne	r0, [r4, #84]	; 0x54
 800af16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af1e:	81a3      	strheq	r3, [r4, #12]
 800af20:	bf18      	it	ne
 800af22:	81a3      	strhne	r3, [r4, #12]
 800af24:	bd10      	pop	{r4, pc}

0800af26 <__sclose>:
 800af26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af2a:	f000 bebf 	b.w	800bcac <_close_r>

0800af2e <sulp>:
 800af2e:	b570      	push	{r4, r5, r6, lr}
 800af30:	4604      	mov	r4, r0
 800af32:	460d      	mov	r5, r1
 800af34:	ec45 4b10 	vmov	d0, r4, r5
 800af38:	4616      	mov	r6, r2
 800af3a:	f002 fc55 	bl	800d7e8 <__ulp>
 800af3e:	ec51 0b10 	vmov	r0, r1, d0
 800af42:	b17e      	cbz	r6, 800af64 <sulp+0x36>
 800af44:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800af48:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	dd09      	ble.n	800af64 <sulp+0x36>
 800af50:	051b      	lsls	r3, r3, #20
 800af52:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800af56:	2400      	movs	r4, #0
 800af58:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800af5c:	4622      	mov	r2, r4
 800af5e:	462b      	mov	r3, r5
 800af60:	f7f5 fb62 	bl	8000628 <__aeabi_dmul>
 800af64:	bd70      	pop	{r4, r5, r6, pc}
	...

0800af68 <_strtod_l>:
 800af68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6c:	ed2d 8b02 	vpush	{d8}
 800af70:	b09d      	sub	sp, #116	; 0x74
 800af72:	461f      	mov	r7, r3
 800af74:	2300      	movs	r3, #0
 800af76:	9318      	str	r3, [sp, #96]	; 0x60
 800af78:	4ba2      	ldr	r3, [pc, #648]	; (800b204 <_strtod_l+0x29c>)
 800af7a:	9213      	str	r2, [sp, #76]	; 0x4c
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	9305      	str	r3, [sp, #20]
 800af80:	4604      	mov	r4, r0
 800af82:	4618      	mov	r0, r3
 800af84:	4688      	mov	r8, r1
 800af86:	f7f5 f935 	bl	80001f4 <strlen>
 800af8a:	f04f 0a00 	mov.w	sl, #0
 800af8e:	4605      	mov	r5, r0
 800af90:	f04f 0b00 	mov.w	fp, #0
 800af94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800af98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af9a:	781a      	ldrb	r2, [r3, #0]
 800af9c:	2a2b      	cmp	r2, #43	; 0x2b
 800af9e:	d04e      	beq.n	800b03e <_strtod_l+0xd6>
 800afa0:	d83b      	bhi.n	800b01a <_strtod_l+0xb2>
 800afa2:	2a0d      	cmp	r2, #13
 800afa4:	d834      	bhi.n	800b010 <_strtod_l+0xa8>
 800afa6:	2a08      	cmp	r2, #8
 800afa8:	d834      	bhi.n	800b014 <_strtod_l+0xac>
 800afaa:	2a00      	cmp	r2, #0
 800afac:	d03e      	beq.n	800b02c <_strtod_l+0xc4>
 800afae:	2300      	movs	r3, #0
 800afb0:	930a      	str	r3, [sp, #40]	; 0x28
 800afb2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800afb4:	7833      	ldrb	r3, [r6, #0]
 800afb6:	2b30      	cmp	r3, #48	; 0x30
 800afb8:	f040 80b0 	bne.w	800b11c <_strtod_l+0x1b4>
 800afbc:	7873      	ldrb	r3, [r6, #1]
 800afbe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800afc2:	2b58      	cmp	r3, #88	; 0x58
 800afc4:	d168      	bne.n	800b098 <_strtod_l+0x130>
 800afc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afc8:	9301      	str	r3, [sp, #4]
 800afca:	ab18      	add	r3, sp, #96	; 0x60
 800afcc:	9702      	str	r7, [sp, #8]
 800afce:	9300      	str	r3, [sp, #0]
 800afd0:	4a8d      	ldr	r2, [pc, #564]	; (800b208 <_strtod_l+0x2a0>)
 800afd2:	ab19      	add	r3, sp, #100	; 0x64
 800afd4:	a917      	add	r1, sp, #92	; 0x5c
 800afd6:	4620      	mov	r0, r4
 800afd8:	f001 fd5c 	bl	800ca94 <__gethex>
 800afdc:	f010 0707 	ands.w	r7, r0, #7
 800afe0:	4605      	mov	r5, r0
 800afe2:	d005      	beq.n	800aff0 <_strtod_l+0x88>
 800afe4:	2f06      	cmp	r7, #6
 800afe6:	d12c      	bne.n	800b042 <_strtod_l+0xda>
 800afe8:	3601      	adds	r6, #1
 800afea:	2300      	movs	r3, #0
 800afec:	9617      	str	r6, [sp, #92]	; 0x5c
 800afee:	930a      	str	r3, [sp, #40]	; 0x28
 800aff0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	f040 8590 	bne.w	800bb18 <_strtod_l+0xbb0>
 800aff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800affa:	b1eb      	cbz	r3, 800b038 <_strtod_l+0xd0>
 800affc:	4652      	mov	r2, sl
 800affe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b002:	ec43 2b10 	vmov	d0, r2, r3
 800b006:	b01d      	add	sp, #116	; 0x74
 800b008:	ecbd 8b02 	vpop	{d8}
 800b00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b010:	2a20      	cmp	r2, #32
 800b012:	d1cc      	bne.n	800afae <_strtod_l+0x46>
 800b014:	3301      	adds	r3, #1
 800b016:	9317      	str	r3, [sp, #92]	; 0x5c
 800b018:	e7be      	b.n	800af98 <_strtod_l+0x30>
 800b01a:	2a2d      	cmp	r2, #45	; 0x2d
 800b01c:	d1c7      	bne.n	800afae <_strtod_l+0x46>
 800b01e:	2201      	movs	r2, #1
 800b020:	920a      	str	r2, [sp, #40]	; 0x28
 800b022:	1c5a      	adds	r2, r3, #1
 800b024:	9217      	str	r2, [sp, #92]	; 0x5c
 800b026:	785b      	ldrb	r3, [r3, #1]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d1c2      	bne.n	800afb2 <_strtod_l+0x4a>
 800b02c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b02e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b032:	2b00      	cmp	r3, #0
 800b034:	f040 856e 	bne.w	800bb14 <_strtod_l+0xbac>
 800b038:	4652      	mov	r2, sl
 800b03a:	465b      	mov	r3, fp
 800b03c:	e7e1      	b.n	800b002 <_strtod_l+0x9a>
 800b03e:	2200      	movs	r2, #0
 800b040:	e7ee      	b.n	800b020 <_strtod_l+0xb8>
 800b042:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b044:	b13a      	cbz	r2, 800b056 <_strtod_l+0xee>
 800b046:	2135      	movs	r1, #53	; 0x35
 800b048:	a81a      	add	r0, sp, #104	; 0x68
 800b04a:	f002 fcd8 	bl	800d9fe <__copybits>
 800b04e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b050:	4620      	mov	r0, r4
 800b052:	f002 f897 	bl	800d184 <_Bfree>
 800b056:	3f01      	subs	r7, #1
 800b058:	2f04      	cmp	r7, #4
 800b05a:	d806      	bhi.n	800b06a <_strtod_l+0x102>
 800b05c:	e8df f007 	tbb	[pc, r7]
 800b060:	1714030a 	.word	0x1714030a
 800b064:	0a          	.byte	0x0a
 800b065:	00          	.byte	0x00
 800b066:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b06a:	0728      	lsls	r0, r5, #28
 800b06c:	d5c0      	bpl.n	800aff0 <_strtod_l+0x88>
 800b06e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b072:	e7bd      	b.n	800aff0 <_strtod_l+0x88>
 800b074:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b078:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b07a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b07e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b082:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b086:	e7f0      	b.n	800b06a <_strtod_l+0x102>
 800b088:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b20c <_strtod_l+0x2a4>
 800b08c:	e7ed      	b.n	800b06a <_strtod_l+0x102>
 800b08e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b092:	f04f 3aff 	mov.w	sl, #4294967295
 800b096:	e7e8      	b.n	800b06a <_strtod_l+0x102>
 800b098:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b09a:	1c5a      	adds	r2, r3, #1
 800b09c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b09e:	785b      	ldrb	r3, [r3, #1]
 800b0a0:	2b30      	cmp	r3, #48	; 0x30
 800b0a2:	d0f9      	beq.n	800b098 <_strtod_l+0x130>
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d0a3      	beq.n	800aff0 <_strtod_l+0x88>
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	f04f 0900 	mov.w	r9, #0
 800b0ae:	9304      	str	r3, [sp, #16]
 800b0b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0b2:	9308      	str	r3, [sp, #32]
 800b0b4:	f8cd 901c 	str.w	r9, [sp, #28]
 800b0b8:	464f      	mov	r7, r9
 800b0ba:	220a      	movs	r2, #10
 800b0bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b0be:	7806      	ldrb	r6, [r0, #0]
 800b0c0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b0c4:	b2d9      	uxtb	r1, r3
 800b0c6:	2909      	cmp	r1, #9
 800b0c8:	d92a      	bls.n	800b120 <_strtod_l+0x1b8>
 800b0ca:	9905      	ldr	r1, [sp, #20]
 800b0cc:	462a      	mov	r2, r5
 800b0ce:	f003 fab3 	bl	800e638 <strncmp>
 800b0d2:	b398      	cbz	r0, 800b13c <_strtod_l+0x1d4>
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	4632      	mov	r2, r6
 800b0d8:	463d      	mov	r5, r7
 800b0da:	9005      	str	r0, [sp, #20]
 800b0dc:	4603      	mov	r3, r0
 800b0de:	2a65      	cmp	r2, #101	; 0x65
 800b0e0:	d001      	beq.n	800b0e6 <_strtod_l+0x17e>
 800b0e2:	2a45      	cmp	r2, #69	; 0x45
 800b0e4:	d118      	bne.n	800b118 <_strtod_l+0x1b0>
 800b0e6:	b91d      	cbnz	r5, 800b0f0 <_strtod_l+0x188>
 800b0e8:	9a04      	ldr	r2, [sp, #16]
 800b0ea:	4302      	orrs	r2, r0
 800b0ec:	d09e      	beq.n	800b02c <_strtod_l+0xc4>
 800b0ee:	2500      	movs	r5, #0
 800b0f0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b0f4:	f108 0201 	add.w	r2, r8, #1
 800b0f8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b0fa:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b0fe:	2a2b      	cmp	r2, #43	; 0x2b
 800b100:	d075      	beq.n	800b1ee <_strtod_l+0x286>
 800b102:	2a2d      	cmp	r2, #45	; 0x2d
 800b104:	d07b      	beq.n	800b1fe <_strtod_l+0x296>
 800b106:	f04f 0c00 	mov.w	ip, #0
 800b10a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b10e:	2909      	cmp	r1, #9
 800b110:	f240 8082 	bls.w	800b218 <_strtod_l+0x2b0>
 800b114:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b118:	2600      	movs	r6, #0
 800b11a:	e09d      	b.n	800b258 <_strtod_l+0x2f0>
 800b11c:	2300      	movs	r3, #0
 800b11e:	e7c4      	b.n	800b0aa <_strtod_l+0x142>
 800b120:	2f08      	cmp	r7, #8
 800b122:	bfd8      	it	le
 800b124:	9907      	ldrle	r1, [sp, #28]
 800b126:	f100 0001 	add.w	r0, r0, #1
 800b12a:	bfda      	itte	le
 800b12c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b130:	9307      	strle	r3, [sp, #28]
 800b132:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b136:	3701      	adds	r7, #1
 800b138:	9017      	str	r0, [sp, #92]	; 0x5c
 800b13a:	e7bf      	b.n	800b0bc <_strtod_l+0x154>
 800b13c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b13e:	195a      	adds	r2, r3, r5
 800b140:	9217      	str	r2, [sp, #92]	; 0x5c
 800b142:	5d5a      	ldrb	r2, [r3, r5]
 800b144:	2f00      	cmp	r7, #0
 800b146:	d037      	beq.n	800b1b8 <_strtod_l+0x250>
 800b148:	9005      	str	r0, [sp, #20]
 800b14a:	463d      	mov	r5, r7
 800b14c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b150:	2b09      	cmp	r3, #9
 800b152:	d912      	bls.n	800b17a <_strtod_l+0x212>
 800b154:	2301      	movs	r3, #1
 800b156:	e7c2      	b.n	800b0de <_strtod_l+0x176>
 800b158:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b15a:	1c5a      	adds	r2, r3, #1
 800b15c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b15e:	785a      	ldrb	r2, [r3, #1]
 800b160:	3001      	adds	r0, #1
 800b162:	2a30      	cmp	r2, #48	; 0x30
 800b164:	d0f8      	beq.n	800b158 <_strtod_l+0x1f0>
 800b166:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b16a:	2b08      	cmp	r3, #8
 800b16c:	f200 84d9 	bhi.w	800bb22 <_strtod_l+0xbba>
 800b170:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b172:	9005      	str	r0, [sp, #20]
 800b174:	2000      	movs	r0, #0
 800b176:	9308      	str	r3, [sp, #32]
 800b178:	4605      	mov	r5, r0
 800b17a:	3a30      	subs	r2, #48	; 0x30
 800b17c:	f100 0301 	add.w	r3, r0, #1
 800b180:	d014      	beq.n	800b1ac <_strtod_l+0x244>
 800b182:	9905      	ldr	r1, [sp, #20]
 800b184:	4419      	add	r1, r3
 800b186:	9105      	str	r1, [sp, #20]
 800b188:	462b      	mov	r3, r5
 800b18a:	eb00 0e05 	add.w	lr, r0, r5
 800b18e:	210a      	movs	r1, #10
 800b190:	4573      	cmp	r3, lr
 800b192:	d113      	bne.n	800b1bc <_strtod_l+0x254>
 800b194:	182b      	adds	r3, r5, r0
 800b196:	2b08      	cmp	r3, #8
 800b198:	f105 0501 	add.w	r5, r5, #1
 800b19c:	4405      	add	r5, r0
 800b19e:	dc1c      	bgt.n	800b1da <_strtod_l+0x272>
 800b1a0:	9907      	ldr	r1, [sp, #28]
 800b1a2:	230a      	movs	r3, #10
 800b1a4:	fb03 2301 	mla	r3, r3, r1, r2
 800b1a8:	9307      	str	r3, [sp, #28]
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b1ae:	1c51      	adds	r1, r2, #1
 800b1b0:	9117      	str	r1, [sp, #92]	; 0x5c
 800b1b2:	7852      	ldrb	r2, [r2, #1]
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	e7c9      	b.n	800b14c <_strtod_l+0x1e4>
 800b1b8:	4638      	mov	r0, r7
 800b1ba:	e7d2      	b.n	800b162 <_strtod_l+0x1fa>
 800b1bc:	2b08      	cmp	r3, #8
 800b1be:	dc04      	bgt.n	800b1ca <_strtod_l+0x262>
 800b1c0:	9e07      	ldr	r6, [sp, #28]
 800b1c2:	434e      	muls	r6, r1
 800b1c4:	9607      	str	r6, [sp, #28]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	e7e2      	b.n	800b190 <_strtod_l+0x228>
 800b1ca:	f103 0c01 	add.w	ip, r3, #1
 800b1ce:	f1bc 0f10 	cmp.w	ip, #16
 800b1d2:	bfd8      	it	le
 800b1d4:	fb01 f909 	mulle.w	r9, r1, r9
 800b1d8:	e7f5      	b.n	800b1c6 <_strtod_l+0x25e>
 800b1da:	2d10      	cmp	r5, #16
 800b1dc:	bfdc      	itt	le
 800b1de:	230a      	movle	r3, #10
 800b1e0:	fb03 2909 	mlale	r9, r3, r9, r2
 800b1e4:	e7e1      	b.n	800b1aa <_strtod_l+0x242>
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	9305      	str	r3, [sp, #20]
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e77c      	b.n	800b0e8 <_strtod_l+0x180>
 800b1ee:	f04f 0c00 	mov.w	ip, #0
 800b1f2:	f108 0202 	add.w	r2, r8, #2
 800b1f6:	9217      	str	r2, [sp, #92]	; 0x5c
 800b1f8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b1fc:	e785      	b.n	800b10a <_strtod_l+0x1a2>
 800b1fe:	f04f 0c01 	mov.w	ip, #1
 800b202:	e7f6      	b.n	800b1f2 <_strtod_l+0x28a>
 800b204:	08011f40 	.word	0x08011f40
 800b208:	08011cf4 	.word	0x08011cf4
 800b20c:	7ff00000 	.word	0x7ff00000
 800b210:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b212:	1c51      	adds	r1, r2, #1
 800b214:	9117      	str	r1, [sp, #92]	; 0x5c
 800b216:	7852      	ldrb	r2, [r2, #1]
 800b218:	2a30      	cmp	r2, #48	; 0x30
 800b21a:	d0f9      	beq.n	800b210 <_strtod_l+0x2a8>
 800b21c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b220:	2908      	cmp	r1, #8
 800b222:	f63f af79 	bhi.w	800b118 <_strtod_l+0x1b0>
 800b226:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b22a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b22c:	9206      	str	r2, [sp, #24]
 800b22e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b230:	1c51      	adds	r1, r2, #1
 800b232:	9117      	str	r1, [sp, #92]	; 0x5c
 800b234:	7852      	ldrb	r2, [r2, #1]
 800b236:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b23a:	2e09      	cmp	r6, #9
 800b23c:	d937      	bls.n	800b2ae <_strtod_l+0x346>
 800b23e:	9e06      	ldr	r6, [sp, #24]
 800b240:	1b89      	subs	r1, r1, r6
 800b242:	2908      	cmp	r1, #8
 800b244:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b248:	dc02      	bgt.n	800b250 <_strtod_l+0x2e8>
 800b24a:	4576      	cmp	r6, lr
 800b24c:	bfa8      	it	ge
 800b24e:	4676      	movge	r6, lr
 800b250:	f1bc 0f00 	cmp.w	ip, #0
 800b254:	d000      	beq.n	800b258 <_strtod_l+0x2f0>
 800b256:	4276      	negs	r6, r6
 800b258:	2d00      	cmp	r5, #0
 800b25a:	d14d      	bne.n	800b2f8 <_strtod_l+0x390>
 800b25c:	9904      	ldr	r1, [sp, #16]
 800b25e:	4301      	orrs	r1, r0
 800b260:	f47f aec6 	bne.w	800aff0 <_strtod_l+0x88>
 800b264:	2b00      	cmp	r3, #0
 800b266:	f47f aee1 	bne.w	800b02c <_strtod_l+0xc4>
 800b26a:	2a69      	cmp	r2, #105	; 0x69
 800b26c:	d027      	beq.n	800b2be <_strtod_l+0x356>
 800b26e:	dc24      	bgt.n	800b2ba <_strtod_l+0x352>
 800b270:	2a49      	cmp	r2, #73	; 0x49
 800b272:	d024      	beq.n	800b2be <_strtod_l+0x356>
 800b274:	2a4e      	cmp	r2, #78	; 0x4e
 800b276:	f47f aed9 	bne.w	800b02c <_strtod_l+0xc4>
 800b27a:	499f      	ldr	r1, [pc, #636]	; (800b4f8 <_strtod_l+0x590>)
 800b27c:	a817      	add	r0, sp, #92	; 0x5c
 800b27e:	f001 fe61 	bl	800cf44 <__match>
 800b282:	2800      	cmp	r0, #0
 800b284:	f43f aed2 	beq.w	800b02c <_strtod_l+0xc4>
 800b288:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	2b28      	cmp	r3, #40	; 0x28
 800b28e:	d12d      	bne.n	800b2ec <_strtod_l+0x384>
 800b290:	499a      	ldr	r1, [pc, #616]	; (800b4fc <_strtod_l+0x594>)
 800b292:	aa1a      	add	r2, sp, #104	; 0x68
 800b294:	a817      	add	r0, sp, #92	; 0x5c
 800b296:	f001 fe69 	bl	800cf6c <__hexnan>
 800b29a:	2805      	cmp	r0, #5
 800b29c:	d126      	bne.n	800b2ec <_strtod_l+0x384>
 800b29e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2a0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b2a4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b2a8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b2ac:	e6a0      	b.n	800aff0 <_strtod_l+0x88>
 800b2ae:	210a      	movs	r1, #10
 800b2b0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b2b4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b2b8:	e7b9      	b.n	800b22e <_strtod_l+0x2c6>
 800b2ba:	2a6e      	cmp	r2, #110	; 0x6e
 800b2bc:	e7db      	b.n	800b276 <_strtod_l+0x30e>
 800b2be:	4990      	ldr	r1, [pc, #576]	; (800b500 <_strtod_l+0x598>)
 800b2c0:	a817      	add	r0, sp, #92	; 0x5c
 800b2c2:	f001 fe3f 	bl	800cf44 <__match>
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	f43f aeb0 	beq.w	800b02c <_strtod_l+0xc4>
 800b2cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b2ce:	498d      	ldr	r1, [pc, #564]	; (800b504 <_strtod_l+0x59c>)
 800b2d0:	3b01      	subs	r3, #1
 800b2d2:	a817      	add	r0, sp, #92	; 0x5c
 800b2d4:	9317      	str	r3, [sp, #92]	; 0x5c
 800b2d6:	f001 fe35 	bl	800cf44 <__match>
 800b2da:	b910      	cbnz	r0, 800b2e2 <_strtod_l+0x37a>
 800b2dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b2de:	3301      	adds	r3, #1
 800b2e0:	9317      	str	r3, [sp, #92]	; 0x5c
 800b2e2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b514 <_strtod_l+0x5ac>
 800b2e6:	f04f 0a00 	mov.w	sl, #0
 800b2ea:	e681      	b.n	800aff0 <_strtod_l+0x88>
 800b2ec:	4886      	ldr	r0, [pc, #536]	; (800b508 <_strtod_l+0x5a0>)
 800b2ee:	f003 f953 	bl	800e598 <nan>
 800b2f2:	ec5b ab10 	vmov	sl, fp, d0
 800b2f6:	e67b      	b.n	800aff0 <_strtod_l+0x88>
 800b2f8:	9b05      	ldr	r3, [sp, #20]
 800b2fa:	9807      	ldr	r0, [sp, #28]
 800b2fc:	1af3      	subs	r3, r6, r3
 800b2fe:	2f00      	cmp	r7, #0
 800b300:	bf08      	it	eq
 800b302:	462f      	moveq	r7, r5
 800b304:	2d10      	cmp	r5, #16
 800b306:	9306      	str	r3, [sp, #24]
 800b308:	46a8      	mov	r8, r5
 800b30a:	bfa8      	it	ge
 800b30c:	f04f 0810 	movge.w	r8, #16
 800b310:	f7f5 f910 	bl	8000534 <__aeabi_ui2d>
 800b314:	2d09      	cmp	r5, #9
 800b316:	4682      	mov	sl, r0
 800b318:	468b      	mov	fp, r1
 800b31a:	dd13      	ble.n	800b344 <_strtod_l+0x3dc>
 800b31c:	4b7b      	ldr	r3, [pc, #492]	; (800b50c <_strtod_l+0x5a4>)
 800b31e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b322:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b326:	f7f5 f97f 	bl	8000628 <__aeabi_dmul>
 800b32a:	4682      	mov	sl, r0
 800b32c:	4648      	mov	r0, r9
 800b32e:	468b      	mov	fp, r1
 800b330:	f7f5 f900 	bl	8000534 <__aeabi_ui2d>
 800b334:	4602      	mov	r2, r0
 800b336:	460b      	mov	r3, r1
 800b338:	4650      	mov	r0, sl
 800b33a:	4659      	mov	r1, fp
 800b33c:	f7f4 ffbe 	bl	80002bc <__adddf3>
 800b340:	4682      	mov	sl, r0
 800b342:	468b      	mov	fp, r1
 800b344:	2d0f      	cmp	r5, #15
 800b346:	dc38      	bgt.n	800b3ba <_strtod_l+0x452>
 800b348:	9b06      	ldr	r3, [sp, #24]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f43f ae50 	beq.w	800aff0 <_strtod_l+0x88>
 800b350:	dd24      	ble.n	800b39c <_strtod_l+0x434>
 800b352:	2b16      	cmp	r3, #22
 800b354:	dc0b      	bgt.n	800b36e <_strtod_l+0x406>
 800b356:	496d      	ldr	r1, [pc, #436]	; (800b50c <_strtod_l+0x5a4>)
 800b358:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b35c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b360:	4652      	mov	r2, sl
 800b362:	465b      	mov	r3, fp
 800b364:	f7f5 f960 	bl	8000628 <__aeabi_dmul>
 800b368:	4682      	mov	sl, r0
 800b36a:	468b      	mov	fp, r1
 800b36c:	e640      	b.n	800aff0 <_strtod_l+0x88>
 800b36e:	9a06      	ldr	r2, [sp, #24]
 800b370:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b374:	4293      	cmp	r3, r2
 800b376:	db20      	blt.n	800b3ba <_strtod_l+0x452>
 800b378:	4c64      	ldr	r4, [pc, #400]	; (800b50c <_strtod_l+0x5a4>)
 800b37a:	f1c5 050f 	rsb	r5, r5, #15
 800b37e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b382:	4652      	mov	r2, sl
 800b384:	465b      	mov	r3, fp
 800b386:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b38a:	f7f5 f94d 	bl	8000628 <__aeabi_dmul>
 800b38e:	9b06      	ldr	r3, [sp, #24]
 800b390:	1b5d      	subs	r5, r3, r5
 800b392:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b396:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b39a:	e7e3      	b.n	800b364 <_strtod_l+0x3fc>
 800b39c:	9b06      	ldr	r3, [sp, #24]
 800b39e:	3316      	adds	r3, #22
 800b3a0:	db0b      	blt.n	800b3ba <_strtod_l+0x452>
 800b3a2:	9b05      	ldr	r3, [sp, #20]
 800b3a4:	1b9e      	subs	r6, r3, r6
 800b3a6:	4b59      	ldr	r3, [pc, #356]	; (800b50c <_strtod_l+0x5a4>)
 800b3a8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b3ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b3b0:	4650      	mov	r0, sl
 800b3b2:	4659      	mov	r1, fp
 800b3b4:	f7f5 fa62 	bl	800087c <__aeabi_ddiv>
 800b3b8:	e7d6      	b.n	800b368 <_strtod_l+0x400>
 800b3ba:	9b06      	ldr	r3, [sp, #24]
 800b3bc:	eba5 0808 	sub.w	r8, r5, r8
 800b3c0:	4498      	add	r8, r3
 800b3c2:	f1b8 0f00 	cmp.w	r8, #0
 800b3c6:	dd74      	ble.n	800b4b2 <_strtod_l+0x54a>
 800b3c8:	f018 030f 	ands.w	r3, r8, #15
 800b3cc:	d00a      	beq.n	800b3e4 <_strtod_l+0x47c>
 800b3ce:	494f      	ldr	r1, [pc, #316]	; (800b50c <_strtod_l+0x5a4>)
 800b3d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b3d4:	4652      	mov	r2, sl
 800b3d6:	465b      	mov	r3, fp
 800b3d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3dc:	f7f5 f924 	bl	8000628 <__aeabi_dmul>
 800b3e0:	4682      	mov	sl, r0
 800b3e2:	468b      	mov	fp, r1
 800b3e4:	f038 080f 	bics.w	r8, r8, #15
 800b3e8:	d04f      	beq.n	800b48a <_strtod_l+0x522>
 800b3ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b3ee:	dd22      	ble.n	800b436 <_strtod_l+0x4ce>
 800b3f0:	2500      	movs	r5, #0
 800b3f2:	462e      	mov	r6, r5
 800b3f4:	9507      	str	r5, [sp, #28]
 800b3f6:	9505      	str	r5, [sp, #20]
 800b3f8:	2322      	movs	r3, #34	; 0x22
 800b3fa:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b514 <_strtod_l+0x5ac>
 800b3fe:	6023      	str	r3, [r4, #0]
 800b400:	f04f 0a00 	mov.w	sl, #0
 800b404:	9b07      	ldr	r3, [sp, #28]
 800b406:	2b00      	cmp	r3, #0
 800b408:	f43f adf2 	beq.w	800aff0 <_strtod_l+0x88>
 800b40c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b40e:	4620      	mov	r0, r4
 800b410:	f001 feb8 	bl	800d184 <_Bfree>
 800b414:	9905      	ldr	r1, [sp, #20]
 800b416:	4620      	mov	r0, r4
 800b418:	f001 feb4 	bl	800d184 <_Bfree>
 800b41c:	4631      	mov	r1, r6
 800b41e:	4620      	mov	r0, r4
 800b420:	f001 feb0 	bl	800d184 <_Bfree>
 800b424:	9907      	ldr	r1, [sp, #28]
 800b426:	4620      	mov	r0, r4
 800b428:	f001 feac 	bl	800d184 <_Bfree>
 800b42c:	4629      	mov	r1, r5
 800b42e:	4620      	mov	r0, r4
 800b430:	f001 fea8 	bl	800d184 <_Bfree>
 800b434:	e5dc      	b.n	800aff0 <_strtod_l+0x88>
 800b436:	4b36      	ldr	r3, [pc, #216]	; (800b510 <_strtod_l+0x5a8>)
 800b438:	9304      	str	r3, [sp, #16]
 800b43a:	2300      	movs	r3, #0
 800b43c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b440:	4650      	mov	r0, sl
 800b442:	4659      	mov	r1, fp
 800b444:	4699      	mov	r9, r3
 800b446:	f1b8 0f01 	cmp.w	r8, #1
 800b44a:	dc21      	bgt.n	800b490 <_strtod_l+0x528>
 800b44c:	b10b      	cbz	r3, 800b452 <_strtod_l+0x4ea>
 800b44e:	4682      	mov	sl, r0
 800b450:	468b      	mov	fp, r1
 800b452:	4b2f      	ldr	r3, [pc, #188]	; (800b510 <_strtod_l+0x5a8>)
 800b454:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b458:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b45c:	4652      	mov	r2, sl
 800b45e:	465b      	mov	r3, fp
 800b460:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b464:	f7f5 f8e0 	bl	8000628 <__aeabi_dmul>
 800b468:	4b2a      	ldr	r3, [pc, #168]	; (800b514 <_strtod_l+0x5ac>)
 800b46a:	460a      	mov	r2, r1
 800b46c:	400b      	ands	r3, r1
 800b46e:	492a      	ldr	r1, [pc, #168]	; (800b518 <_strtod_l+0x5b0>)
 800b470:	428b      	cmp	r3, r1
 800b472:	4682      	mov	sl, r0
 800b474:	d8bc      	bhi.n	800b3f0 <_strtod_l+0x488>
 800b476:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b47a:	428b      	cmp	r3, r1
 800b47c:	bf86      	itte	hi
 800b47e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b51c <_strtod_l+0x5b4>
 800b482:	f04f 3aff 	movhi.w	sl, #4294967295
 800b486:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b48a:	2300      	movs	r3, #0
 800b48c:	9304      	str	r3, [sp, #16]
 800b48e:	e084      	b.n	800b59a <_strtod_l+0x632>
 800b490:	f018 0f01 	tst.w	r8, #1
 800b494:	d005      	beq.n	800b4a2 <_strtod_l+0x53a>
 800b496:	9b04      	ldr	r3, [sp, #16]
 800b498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49c:	f7f5 f8c4 	bl	8000628 <__aeabi_dmul>
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	9a04      	ldr	r2, [sp, #16]
 800b4a4:	3208      	adds	r2, #8
 800b4a6:	f109 0901 	add.w	r9, r9, #1
 800b4aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b4ae:	9204      	str	r2, [sp, #16]
 800b4b0:	e7c9      	b.n	800b446 <_strtod_l+0x4de>
 800b4b2:	d0ea      	beq.n	800b48a <_strtod_l+0x522>
 800b4b4:	f1c8 0800 	rsb	r8, r8, #0
 800b4b8:	f018 020f 	ands.w	r2, r8, #15
 800b4bc:	d00a      	beq.n	800b4d4 <_strtod_l+0x56c>
 800b4be:	4b13      	ldr	r3, [pc, #76]	; (800b50c <_strtod_l+0x5a4>)
 800b4c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4c4:	4650      	mov	r0, sl
 800b4c6:	4659      	mov	r1, fp
 800b4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4cc:	f7f5 f9d6 	bl	800087c <__aeabi_ddiv>
 800b4d0:	4682      	mov	sl, r0
 800b4d2:	468b      	mov	fp, r1
 800b4d4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b4d8:	d0d7      	beq.n	800b48a <_strtod_l+0x522>
 800b4da:	f1b8 0f1f 	cmp.w	r8, #31
 800b4de:	dd1f      	ble.n	800b520 <_strtod_l+0x5b8>
 800b4e0:	2500      	movs	r5, #0
 800b4e2:	462e      	mov	r6, r5
 800b4e4:	9507      	str	r5, [sp, #28]
 800b4e6:	9505      	str	r5, [sp, #20]
 800b4e8:	2322      	movs	r3, #34	; 0x22
 800b4ea:	f04f 0a00 	mov.w	sl, #0
 800b4ee:	f04f 0b00 	mov.w	fp, #0
 800b4f2:	6023      	str	r3, [r4, #0]
 800b4f4:	e786      	b.n	800b404 <_strtod_l+0x49c>
 800b4f6:	bf00      	nop
 800b4f8:	08011cc9 	.word	0x08011cc9
 800b4fc:	08011d08 	.word	0x08011d08
 800b500:	08011cc1 	.word	0x08011cc1
 800b504:	08011e4c 	.word	0x08011e4c
 800b508:	08012113 	.word	0x08012113
 800b50c:	08011fd8 	.word	0x08011fd8
 800b510:	08011fb0 	.word	0x08011fb0
 800b514:	7ff00000 	.word	0x7ff00000
 800b518:	7ca00000 	.word	0x7ca00000
 800b51c:	7fefffff 	.word	0x7fefffff
 800b520:	f018 0310 	ands.w	r3, r8, #16
 800b524:	bf18      	it	ne
 800b526:	236a      	movne	r3, #106	; 0x6a
 800b528:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b8d8 <_strtod_l+0x970>
 800b52c:	9304      	str	r3, [sp, #16]
 800b52e:	4650      	mov	r0, sl
 800b530:	4659      	mov	r1, fp
 800b532:	2300      	movs	r3, #0
 800b534:	f018 0f01 	tst.w	r8, #1
 800b538:	d004      	beq.n	800b544 <_strtod_l+0x5dc>
 800b53a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b53e:	f7f5 f873 	bl	8000628 <__aeabi_dmul>
 800b542:	2301      	movs	r3, #1
 800b544:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b548:	f109 0908 	add.w	r9, r9, #8
 800b54c:	d1f2      	bne.n	800b534 <_strtod_l+0x5cc>
 800b54e:	b10b      	cbz	r3, 800b554 <_strtod_l+0x5ec>
 800b550:	4682      	mov	sl, r0
 800b552:	468b      	mov	fp, r1
 800b554:	9b04      	ldr	r3, [sp, #16]
 800b556:	b1c3      	cbz	r3, 800b58a <_strtod_l+0x622>
 800b558:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b55c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b560:	2b00      	cmp	r3, #0
 800b562:	4659      	mov	r1, fp
 800b564:	dd11      	ble.n	800b58a <_strtod_l+0x622>
 800b566:	2b1f      	cmp	r3, #31
 800b568:	f340 8124 	ble.w	800b7b4 <_strtod_l+0x84c>
 800b56c:	2b34      	cmp	r3, #52	; 0x34
 800b56e:	bfde      	ittt	le
 800b570:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b574:	f04f 33ff 	movle.w	r3, #4294967295
 800b578:	fa03 f202 	lslle.w	r2, r3, r2
 800b57c:	f04f 0a00 	mov.w	sl, #0
 800b580:	bfcc      	ite	gt
 800b582:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b586:	ea02 0b01 	andle.w	fp, r2, r1
 800b58a:	2200      	movs	r2, #0
 800b58c:	2300      	movs	r3, #0
 800b58e:	4650      	mov	r0, sl
 800b590:	4659      	mov	r1, fp
 800b592:	f7f5 fab1 	bl	8000af8 <__aeabi_dcmpeq>
 800b596:	2800      	cmp	r0, #0
 800b598:	d1a2      	bne.n	800b4e0 <_strtod_l+0x578>
 800b59a:	9b07      	ldr	r3, [sp, #28]
 800b59c:	9300      	str	r3, [sp, #0]
 800b59e:	9908      	ldr	r1, [sp, #32]
 800b5a0:	462b      	mov	r3, r5
 800b5a2:	463a      	mov	r2, r7
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	f001 fe55 	bl	800d254 <__s2b>
 800b5aa:	9007      	str	r0, [sp, #28]
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	f43f af1f 	beq.w	800b3f0 <_strtod_l+0x488>
 800b5b2:	9b05      	ldr	r3, [sp, #20]
 800b5b4:	1b9e      	subs	r6, r3, r6
 800b5b6:	9b06      	ldr	r3, [sp, #24]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	bfb4      	ite	lt
 800b5bc:	4633      	movlt	r3, r6
 800b5be:	2300      	movge	r3, #0
 800b5c0:	930c      	str	r3, [sp, #48]	; 0x30
 800b5c2:	9b06      	ldr	r3, [sp, #24]
 800b5c4:	2500      	movs	r5, #0
 800b5c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b5ca:	9312      	str	r3, [sp, #72]	; 0x48
 800b5cc:	462e      	mov	r6, r5
 800b5ce:	9b07      	ldr	r3, [sp, #28]
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	6859      	ldr	r1, [r3, #4]
 800b5d4:	f001 fd96 	bl	800d104 <_Balloc>
 800b5d8:	9005      	str	r0, [sp, #20]
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	f43f af0c 	beq.w	800b3f8 <_strtod_l+0x490>
 800b5e0:	9b07      	ldr	r3, [sp, #28]
 800b5e2:	691a      	ldr	r2, [r3, #16]
 800b5e4:	3202      	adds	r2, #2
 800b5e6:	f103 010c 	add.w	r1, r3, #12
 800b5ea:	0092      	lsls	r2, r2, #2
 800b5ec:	300c      	adds	r0, #12
 800b5ee:	f7fe fd77 	bl	800a0e0 <memcpy>
 800b5f2:	ec4b ab10 	vmov	d0, sl, fp
 800b5f6:	aa1a      	add	r2, sp, #104	; 0x68
 800b5f8:	a919      	add	r1, sp, #100	; 0x64
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f002 f970 	bl	800d8e0 <__d2b>
 800b600:	ec4b ab18 	vmov	d8, sl, fp
 800b604:	9018      	str	r0, [sp, #96]	; 0x60
 800b606:	2800      	cmp	r0, #0
 800b608:	f43f aef6 	beq.w	800b3f8 <_strtod_l+0x490>
 800b60c:	2101      	movs	r1, #1
 800b60e:	4620      	mov	r0, r4
 800b610:	f001 feba 	bl	800d388 <__i2b>
 800b614:	4606      	mov	r6, r0
 800b616:	2800      	cmp	r0, #0
 800b618:	f43f aeee 	beq.w	800b3f8 <_strtod_l+0x490>
 800b61c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b61e:	9904      	ldr	r1, [sp, #16]
 800b620:	2b00      	cmp	r3, #0
 800b622:	bfab      	itete	ge
 800b624:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b626:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b628:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b62a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b62e:	bfac      	ite	ge
 800b630:	eb03 0902 	addge.w	r9, r3, r2
 800b634:	1ad7      	sublt	r7, r2, r3
 800b636:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b638:	eba3 0801 	sub.w	r8, r3, r1
 800b63c:	4490      	add	r8, r2
 800b63e:	4ba1      	ldr	r3, [pc, #644]	; (800b8c4 <_strtod_l+0x95c>)
 800b640:	f108 38ff 	add.w	r8, r8, #4294967295
 800b644:	4598      	cmp	r8, r3
 800b646:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b64a:	f280 80c7 	bge.w	800b7dc <_strtod_l+0x874>
 800b64e:	eba3 0308 	sub.w	r3, r3, r8
 800b652:	2b1f      	cmp	r3, #31
 800b654:	eba2 0203 	sub.w	r2, r2, r3
 800b658:	f04f 0101 	mov.w	r1, #1
 800b65c:	f300 80b1 	bgt.w	800b7c2 <_strtod_l+0x85a>
 800b660:	fa01 f303 	lsl.w	r3, r1, r3
 800b664:	930d      	str	r3, [sp, #52]	; 0x34
 800b666:	2300      	movs	r3, #0
 800b668:	9308      	str	r3, [sp, #32]
 800b66a:	eb09 0802 	add.w	r8, r9, r2
 800b66e:	9b04      	ldr	r3, [sp, #16]
 800b670:	45c1      	cmp	r9, r8
 800b672:	4417      	add	r7, r2
 800b674:	441f      	add	r7, r3
 800b676:	464b      	mov	r3, r9
 800b678:	bfa8      	it	ge
 800b67a:	4643      	movge	r3, r8
 800b67c:	42bb      	cmp	r3, r7
 800b67e:	bfa8      	it	ge
 800b680:	463b      	movge	r3, r7
 800b682:	2b00      	cmp	r3, #0
 800b684:	bfc2      	ittt	gt
 800b686:	eba8 0803 	subgt.w	r8, r8, r3
 800b68a:	1aff      	subgt	r7, r7, r3
 800b68c:	eba9 0903 	subgt.w	r9, r9, r3
 800b690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b692:	2b00      	cmp	r3, #0
 800b694:	dd17      	ble.n	800b6c6 <_strtod_l+0x75e>
 800b696:	4631      	mov	r1, r6
 800b698:	461a      	mov	r2, r3
 800b69a:	4620      	mov	r0, r4
 800b69c:	f001 ff34 	bl	800d508 <__pow5mult>
 800b6a0:	4606      	mov	r6, r0
 800b6a2:	2800      	cmp	r0, #0
 800b6a4:	f43f aea8 	beq.w	800b3f8 <_strtod_l+0x490>
 800b6a8:	4601      	mov	r1, r0
 800b6aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	f001 fe81 	bl	800d3b4 <__multiply>
 800b6b2:	900b      	str	r0, [sp, #44]	; 0x2c
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	f43f ae9f 	beq.w	800b3f8 <_strtod_l+0x490>
 800b6ba:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b6bc:	4620      	mov	r0, r4
 800b6be:	f001 fd61 	bl	800d184 <_Bfree>
 800b6c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6c4:	9318      	str	r3, [sp, #96]	; 0x60
 800b6c6:	f1b8 0f00 	cmp.w	r8, #0
 800b6ca:	f300 808c 	bgt.w	800b7e6 <_strtod_l+0x87e>
 800b6ce:	9b06      	ldr	r3, [sp, #24]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	dd08      	ble.n	800b6e6 <_strtod_l+0x77e>
 800b6d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6d6:	9905      	ldr	r1, [sp, #20]
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f001 ff15 	bl	800d508 <__pow5mult>
 800b6de:	9005      	str	r0, [sp, #20]
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	f43f ae89 	beq.w	800b3f8 <_strtod_l+0x490>
 800b6e6:	2f00      	cmp	r7, #0
 800b6e8:	dd08      	ble.n	800b6fc <_strtod_l+0x794>
 800b6ea:	9905      	ldr	r1, [sp, #20]
 800b6ec:	463a      	mov	r2, r7
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	f001 ff64 	bl	800d5bc <__lshift>
 800b6f4:	9005      	str	r0, [sp, #20]
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	f43f ae7e 	beq.w	800b3f8 <_strtod_l+0x490>
 800b6fc:	f1b9 0f00 	cmp.w	r9, #0
 800b700:	dd08      	ble.n	800b714 <_strtod_l+0x7ac>
 800b702:	4631      	mov	r1, r6
 800b704:	464a      	mov	r2, r9
 800b706:	4620      	mov	r0, r4
 800b708:	f001 ff58 	bl	800d5bc <__lshift>
 800b70c:	4606      	mov	r6, r0
 800b70e:	2800      	cmp	r0, #0
 800b710:	f43f ae72 	beq.w	800b3f8 <_strtod_l+0x490>
 800b714:	9a05      	ldr	r2, [sp, #20]
 800b716:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b718:	4620      	mov	r0, r4
 800b71a:	f001 ffdb 	bl	800d6d4 <__mdiff>
 800b71e:	4605      	mov	r5, r0
 800b720:	2800      	cmp	r0, #0
 800b722:	f43f ae69 	beq.w	800b3f8 <_strtod_l+0x490>
 800b726:	68c3      	ldr	r3, [r0, #12]
 800b728:	930b      	str	r3, [sp, #44]	; 0x2c
 800b72a:	2300      	movs	r3, #0
 800b72c:	60c3      	str	r3, [r0, #12]
 800b72e:	4631      	mov	r1, r6
 800b730:	f001 ffb4 	bl	800d69c <__mcmp>
 800b734:	2800      	cmp	r0, #0
 800b736:	da60      	bge.n	800b7fa <_strtod_l+0x892>
 800b738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b73a:	ea53 030a 	orrs.w	r3, r3, sl
 800b73e:	f040 8082 	bne.w	800b846 <_strtod_l+0x8de>
 800b742:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b746:	2b00      	cmp	r3, #0
 800b748:	d17d      	bne.n	800b846 <_strtod_l+0x8de>
 800b74a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b74e:	0d1b      	lsrs	r3, r3, #20
 800b750:	051b      	lsls	r3, r3, #20
 800b752:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b756:	d976      	bls.n	800b846 <_strtod_l+0x8de>
 800b758:	696b      	ldr	r3, [r5, #20]
 800b75a:	b913      	cbnz	r3, 800b762 <_strtod_l+0x7fa>
 800b75c:	692b      	ldr	r3, [r5, #16]
 800b75e:	2b01      	cmp	r3, #1
 800b760:	dd71      	ble.n	800b846 <_strtod_l+0x8de>
 800b762:	4629      	mov	r1, r5
 800b764:	2201      	movs	r2, #1
 800b766:	4620      	mov	r0, r4
 800b768:	f001 ff28 	bl	800d5bc <__lshift>
 800b76c:	4631      	mov	r1, r6
 800b76e:	4605      	mov	r5, r0
 800b770:	f001 ff94 	bl	800d69c <__mcmp>
 800b774:	2800      	cmp	r0, #0
 800b776:	dd66      	ble.n	800b846 <_strtod_l+0x8de>
 800b778:	9904      	ldr	r1, [sp, #16]
 800b77a:	4a53      	ldr	r2, [pc, #332]	; (800b8c8 <_strtod_l+0x960>)
 800b77c:	465b      	mov	r3, fp
 800b77e:	2900      	cmp	r1, #0
 800b780:	f000 8081 	beq.w	800b886 <_strtod_l+0x91e>
 800b784:	ea02 010b 	and.w	r1, r2, fp
 800b788:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b78c:	dc7b      	bgt.n	800b886 <_strtod_l+0x91e>
 800b78e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b792:	f77f aea9 	ble.w	800b4e8 <_strtod_l+0x580>
 800b796:	4b4d      	ldr	r3, [pc, #308]	; (800b8cc <_strtod_l+0x964>)
 800b798:	4650      	mov	r0, sl
 800b79a:	4659      	mov	r1, fp
 800b79c:	2200      	movs	r2, #0
 800b79e:	f7f4 ff43 	bl	8000628 <__aeabi_dmul>
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	4303      	orrs	r3, r0
 800b7a6:	bf08      	it	eq
 800b7a8:	2322      	moveq	r3, #34	; 0x22
 800b7aa:	4682      	mov	sl, r0
 800b7ac:	468b      	mov	fp, r1
 800b7ae:	bf08      	it	eq
 800b7b0:	6023      	streq	r3, [r4, #0]
 800b7b2:	e62b      	b.n	800b40c <_strtod_l+0x4a4>
 800b7b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b7b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b7bc:	ea03 0a0a 	and.w	sl, r3, sl
 800b7c0:	e6e3      	b.n	800b58a <_strtod_l+0x622>
 800b7c2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b7c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b7ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b7ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b7d2:	fa01 f308 	lsl.w	r3, r1, r8
 800b7d6:	9308      	str	r3, [sp, #32]
 800b7d8:	910d      	str	r1, [sp, #52]	; 0x34
 800b7da:	e746      	b.n	800b66a <_strtod_l+0x702>
 800b7dc:	2300      	movs	r3, #0
 800b7de:	9308      	str	r3, [sp, #32]
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	930d      	str	r3, [sp, #52]	; 0x34
 800b7e4:	e741      	b.n	800b66a <_strtod_l+0x702>
 800b7e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b7e8:	4642      	mov	r2, r8
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f001 fee6 	bl	800d5bc <__lshift>
 800b7f0:	9018      	str	r0, [sp, #96]	; 0x60
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	f47f af6b 	bne.w	800b6ce <_strtod_l+0x766>
 800b7f8:	e5fe      	b.n	800b3f8 <_strtod_l+0x490>
 800b7fa:	465f      	mov	r7, fp
 800b7fc:	d16e      	bne.n	800b8dc <_strtod_l+0x974>
 800b7fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b800:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b804:	b342      	cbz	r2, 800b858 <_strtod_l+0x8f0>
 800b806:	4a32      	ldr	r2, [pc, #200]	; (800b8d0 <_strtod_l+0x968>)
 800b808:	4293      	cmp	r3, r2
 800b80a:	d128      	bne.n	800b85e <_strtod_l+0x8f6>
 800b80c:	9b04      	ldr	r3, [sp, #16]
 800b80e:	4651      	mov	r1, sl
 800b810:	b1eb      	cbz	r3, 800b84e <_strtod_l+0x8e6>
 800b812:	4b2d      	ldr	r3, [pc, #180]	; (800b8c8 <_strtod_l+0x960>)
 800b814:	403b      	ands	r3, r7
 800b816:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b81a:	f04f 32ff 	mov.w	r2, #4294967295
 800b81e:	d819      	bhi.n	800b854 <_strtod_l+0x8ec>
 800b820:	0d1b      	lsrs	r3, r3, #20
 800b822:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b826:	fa02 f303 	lsl.w	r3, r2, r3
 800b82a:	4299      	cmp	r1, r3
 800b82c:	d117      	bne.n	800b85e <_strtod_l+0x8f6>
 800b82e:	4b29      	ldr	r3, [pc, #164]	; (800b8d4 <_strtod_l+0x96c>)
 800b830:	429f      	cmp	r7, r3
 800b832:	d102      	bne.n	800b83a <_strtod_l+0x8d2>
 800b834:	3101      	adds	r1, #1
 800b836:	f43f addf 	beq.w	800b3f8 <_strtod_l+0x490>
 800b83a:	4b23      	ldr	r3, [pc, #140]	; (800b8c8 <_strtod_l+0x960>)
 800b83c:	403b      	ands	r3, r7
 800b83e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b842:	f04f 0a00 	mov.w	sl, #0
 800b846:	9b04      	ldr	r3, [sp, #16]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d1a4      	bne.n	800b796 <_strtod_l+0x82e>
 800b84c:	e5de      	b.n	800b40c <_strtod_l+0x4a4>
 800b84e:	f04f 33ff 	mov.w	r3, #4294967295
 800b852:	e7ea      	b.n	800b82a <_strtod_l+0x8c2>
 800b854:	4613      	mov	r3, r2
 800b856:	e7e8      	b.n	800b82a <_strtod_l+0x8c2>
 800b858:	ea53 030a 	orrs.w	r3, r3, sl
 800b85c:	d08c      	beq.n	800b778 <_strtod_l+0x810>
 800b85e:	9b08      	ldr	r3, [sp, #32]
 800b860:	b1db      	cbz	r3, 800b89a <_strtod_l+0x932>
 800b862:	423b      	tst	r3, r7
 800b864:	d0ef      	beq.n	800b846 <_strtod_l+0x8de>
 800b866:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b868:	9a04      	ldr	r2, [sp, #16]
 800b86a:	4650      	mov	r0, sl
 800b86c:	4659      	mov	r1, fp
 800b86e:	b1c3      	cbz	r3, 800b8a2 <_strtod_l+0x93a>
 800b870:	f7ff fb5d 	bl	800af2e <sulp>
 800b874:	4602      	mov	r2, r0
 800b876:	460b      	mov	r3, r1
 800b878:	ec51 0b18 	vmov	r0, r1, d8
 800b87c:	f7f4 fd1e 	bl	80002bc <__adddf3>
 800b880:	4682      	mov	sl, r0
 800b882:	468b      	mov	fp, r1
 800b884:	e7df      	b.n	800b846 <_strtod_l+0x8de>
 800b886:	4013      	ands	r3, r2
 800b888:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b88c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b890:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b894:	f04f 3aff 	mov.w	sl, #4294967295
 800b898:	e7d5      	b.n	800b846 <_strtod_l+0x8de>
 800b89a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b89c:	ea13 0f0a 	tst.w	r3, sl
 800b8a0:	e7e0      	b.n	800b864 <_strtod_l+0x8fc>
 800b8a2:	f7ff fb44 	bl	800af2e <sulp>
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	ec51 0b18 	vmov	r0, r1, d8
 800b8ae:	f7f4 fd03 	bl	80002b8 <__aeabi_dsub>
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	4682      	mov	sl, r0
 800b8b8:	468b      	mov	fp, r1
 800b8ba:	f7f5 f91d 	bl	8000af8 <__aeabi_dcmpeq>
 800b8be:	2800      	cmp	r0, #0
 800b8c0:	d0c1      	beq.n	800b846 <_strtod_l+0x8de>
 800b8c2:	e611      	b.n	800b4e8 <_strtod_l+0x580>
 800b8c4:	fffffc02 	.word	0xfffffc02
 800b8c8:	7ff00000 	.word	0x7ff00000
 800b8cc:	39500000 	.word	0x39500000
 800b8d0:	000fffff 	.word	0x000fffff
 800b8d4:	7fefffff 	.word	0x7fefffff
 800b8d8:	08011d20 	.word	0x08011d20
 800b8dc:	4631      	mov	r1, r6
 800b8de:	4628      	mov	r0, r5
 800b8e0:	f002 f85a 	bl	800d998 <__ratio>
 800b8e4:	ec59 8b10 	vmov	r8, r9, d0
 800b8e8:	ee10 0a10 	vmov	r0, s0
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b8f2:	4649      	mov	r1, r9
 800b8f4:	f7f5 f914 	bl	8000b20 <__aeabi_dcmple>
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	d07a      	beq.n	800b9f2 <_strtod_l+0xa8a>
 800b8fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d04a      	beq.n	800b998 <_strtod_l+0xa30>
 800b902:	4b95      	ldr	r3, [pc, #596]	; (800bb58 <_strtod_l+0xbf0>)
 800b904:	2200      	movs	r2, #0
 800b906:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b90a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800bb58 <_strtod_l+0xbf0>
 800b90e:	f04f 0800 	mov.w	r8, #0
 800b912:	4b92      	ldr	r3, [pc, #584]	; (800bb5c <_strtod_l+0xbf4>)
 800b914:	403b      	ands	r3, r7
 800b916:	930d      	str	r3, [sp, #52]	; 0x34
 800b918:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b91a:	4b91      	ldr	r3, [pc, #580]	; (800bb60 <_strtod_l+0xbf8>)
 800b91c:	429a      	cmp	r2, r3
 800b91e:	f040 80b0 	bne.w	800ba82 <_strtod_l+0xb1a>
 800b922:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b926:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b92a:	ec4b ab10 	vmov	d0, sl, fp
 800b92e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b932:	f001 ff59 	bl	800d7e8 <__ulp>
 800b936:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b93a:	ec53 2b10 	vmov	r2, r3, d0
 800b93e:	f7f4 fe73 	bl	8000628 <__aeabi_dmul>
 800b942:	4652      	mov	r2, sl
 800b944:	465b      	mov	r3, fp
 800b946:	f7f4 fcb9 	bl	80002bc <__adddf3>
 800b94a:	460b      	mov	r3, r1
 800b94c:	4983      	ldr	r1, [pc, #524]	; (800bb5c <_strtod_l+0xbf4>)
 800b94e:	4a85      	ldr	r2, [pc, #532]	; (800bb64 <_strtod_l+0xbfc>)
 800b950:	4019      	ands	r1, r3
 800b952:	4291      	cmp	r1, r2
 800b954:	4682      	mov	sl, r0
 800b956:	d960      	bls.n	800ba1a <_strtod_l+0xab2>
 800b958:	ee18 3a90 	vmov	r3, s17
 800b95c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b960:	4293      	cmp	r3, r2
 800b962:	d104      	bne.n	800b96e <_strtod_l+0xa06>
 800b964:	ee18 3a10 	vmov	r3, s16
 800b968:	3301      	adds	r3, #1
 800b96a:	f43f ad45 	beq.w	800b3f8 <_strtod_l+0x490>
 800b96e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800bb70 <_strtod_l+0xc08>
 800b972:	f04f 3aff 	mov.w	sl, #4294967295
 800b976:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b978:	4620      	mov	r0, r4
 800b97a:	f001 fc03 	bl	800d184 <_Bfree>
 800b97e:	9905      	ldr	r1, [sp, #20]
 800b980:	4620      	mov	r0, r4
 800b982:	f001 fbff 	bl	800d184 <_Bfree>
 800b986:	4631      	mov	r1, r6
 800b988:	4620      	mov	r0, r4
 800b98a:	f001 fbfb 	bl	800d184 <_Bfree>
 800b98e:	4629      	mov	r1, r5
 800b990:	4620      	mov	r0, r4
 800b992:	f001 fbf7 	bl	800d184 <_Bfree>
 800b996:	e61a      	b.n	800b5ce <_strtod_l+0x666>
 800b998:	f1ba 0f00 	cmp.w	sl, #0
 800b99c:	d11b      	bne.n	800b9d6 <_strtod_l+0xa6e>
 800b99e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9a2:	b9f3      	cbnz	r3, 800b9e2 <_strtod_l+0xa7a>
 800b9a4:	4b6c      	ldr	r3, [pc, #432]	; (800bb58 <_strtod_l+0xbf0>)
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	4640      	mov	r0, r8
 800b9aa:	4649      	mov	r1, r9
 800b9ac:	f7f5 f8ae 	bl	8000b0c <__aeabi_dcmplt>
 800b9b0:	b9d0      	cbnz	r0, 800b9e8 <_strtod_l+0xa80>
 800b9b2:	4640      	mov	r0, r8
 800b9b4:	4649      	mov	r1, r9
 800b9b6:	4b6c      	ldr	r3, [pc, #432]	; (800bb68 <_strtod_l+0xc00>)
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	f7f4 fe35 	bl	8000628 <__aeabi_dmul>
 800b9be:	4680      	mov	r8, r0
 800b9c0:	4689      	mov	r9, r1
 800b9c2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b9c6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b9ca:	9315      	str	r3, [sp, #84]	; 0x54
 800b9cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b9d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b9d4:	e79d      	b.n	800b912 <_strtod_l+0x9aa>
 800b9d6:	f1ba 0f01 	cmp.w	sl, #1
 800b9da:	d102      	bne.n	800b9e2 <_strtod_l+0xa7a>
 800b9dc:	2f00      	cmp	r7, #0
 800b9de:	f43f ad83 	beq.w	800b4e8 <_strtod_l+0x580>
 800b9e2:	4b62      	ldr	r3, [pc, #392]	; (800bb6c <_strtod_l+0xc04>)
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	e78e      	b.n	800b906 <_strtod_l+0x99e>
 800b9e8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800bb68 <_strtod_l+0xc00>
 800b9ec:	f04f 0800 	mov.w	r8, #0
 800b9f0:	e7e7      	b.n	800b9c2 <_strtod_l+0xa5a>
 800b9f2:	4b5d      	ldr	r3, [pc, #372]	; (800bb68 <_strtod_l+0xc00>)
 800b9f4:	4640      	mov	r0, r8
 800b9f6:	4649      	mov	r1, r9
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f7f4 fe15 	bl	8000628 <__aeabi_dmul>
 800b9fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba00:	4680      	mov	r8, r0
 800ba02:	4689      	mov	r9, r1
 800ba04:	b933      	cbnz	r3, 800ba14 <_strtod_l+0xaac>
 800ba06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba0a:	900e      	str	r0, [sp, #56]	; 0x38
 800ba0c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ba12:	e7dd      	b.n	800b9d0 <_strtod_l+0xa68>
 800ba14:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ba18:	e7f9      	b.n	800ba0e <_strtod_l+0xaa6>
 800ba1a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ba1e:	9b04      	ldr	r3, [sp, #16]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d1a8      	bne.n	800b976 <_strtod_l+0xa0e>
 800ba24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ba28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba2a:	0d1b      	lsrs	r3, r3, #20
 800ba2c:	051b      	lsls	r3, r3, #20
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d1a1      	bne.n	800b976 <_strtod_l+0xa0e>
 800ba32:	4640      	mov	r0, r8
 800ba34:	4649      	mov	r1, r9
 800ba36:	f7f5 fa9d 	bl	8000f74 <__aeabi_d2lz>
 800ba3a:	f7f4 fdc7 	bl	80005cc <__aeabi_l2d>
 800ba3e:	4602      	mov	r2, r0
 800ba40:	460b      	mov	r3, r1
 800ba42:	4640      	mov	r0, r8
 800ba44:	4649      	mov	r1, r9
 800ba46:	f7f4 fc37 	bl	80002b8 <__aeabi_dsub>
 800ba4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba50:	ea43 030a 	orr.w	r3, r3, sl
 800ba54:	4313      	orrs	r3, r2
 800ba56:	4680      	mov	r8, r0
 800ba58:	4689      	mov	r9, r1
 800ba5a:	d055      	beq.n	800bb08 <_strtod_l+0xba0>
 800ba5c:	a336      	add	r3, pc, #216	; (adr r3, 800bb38 <_strtod_l+0xbd0>)
 800ba5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba62:	f7f5 f853 	bl	8000b0c <__aeabi_dcmplt>
 800ba66:	2800      	cmp	r0, #0
 800ba68:	f47f acd0 	bne.w	800b40c <_strtod_l+0x4a4>
 800ba6c:	a334      	add	r3, pc, #208	; (adr r3, 800bb40 <_strtod_l+0xbd8>)
 800ba6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba72:	4640      	mov	r0, r8
 800ba74:	4649      	mov	r1, r9
 800ba76:	f7f5 f867 	bl	8000b48 <__aeabi_dcmpgt>
 800ba7a:	2800      	cmp	r0, #0
 800ba7c:	f43f af7b 	beq.w	800b976 <_strtod_l+0xa0e>
 800ba80:	e4c4      	b.n	800b40c <_strtod_l+0x4a4>
 800ba82:	9b04      	ldr	r3, [sp, #16]
 800ba84:	b333      	cbz	r3, 800bad4 <_strtod_l+0xb6c>
 800ba86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba88:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ba8c:	d822      	bhi.n	800bad4 <_strtod_l+0xb6c>
 800ba8e:	a32e      	add	r3, pc, #184	; (adr r3, 800bb48 <_strtod_l+0xbe0>)
 800ba90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba94:	4640      	mov	r0, r8
 800ba96:	4649      	mov	r1, r9
 800ba98:	f7f5 f842 	bl	8000b20 <__aeabi_dcmple>
 800ba9c:	b1a0      	cbz	r0, 800bac8 <_strtod_l+0xb60>
 800ba9e:	4649      	mov	r1, r9
 800baa0:	4640      	mov	r0, r8
 800baa2:	f7f5 f899 	bl	8000bd8 <__aeabi_d2uiz>
 800baa6:	2801      	cmp	r0, #1
 800baa8:	bf38      	it	cc
 800baaa:	2001      	movcc	r0, #1
 800baac:	f7f4 fd42 	bl	8000534 <__aeabi_ui2d>
 800bab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bab2:	4680      	mov	r8, r0
 800bab4:	4689      	mov	r9, r1
 800bab6:	bb23      	cbnz	r3, 800bb02 <_strtod_l+0xb9a>
 800bab8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800babc:	9010      	str	r0, [sp, #64]	; 0x40
 800babe:	9311      	str	r3, [sp, #68]	; 0x44
 800bac0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bac4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bacc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bad0:	1a9b      	subs	r3, r3, r2
 800bad2:	9309      	str	r3, [sp, #36]	; 0x24
 800bad4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bad8:	eeb0 0a48 	vmov.f32	s0, s16
 800badc:	eef0 0a68 	vmov.f32	s1, s17
 800bae0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bae4:	f001 fe80 	bl	800d7e8 <__ulp>
 800bae8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800baec:	ec53 2b10 	vmov	r2, r3, d0
 800baf0:	f7f4 fd9a 	bl	8000628 <__aeabi_dmul>
 800baf4:	ec53 2b18 	vmov	r2, r3, d8
 800baf8:	f7f4 fbe0 	bl	80002bc <__adddf3>
 800bafc:	4682      	mov	sl, r0
 800bafe:	468b      	mov	fp, r1
 800bb00:	e78d      	b.n	800ba1e <_strtod_l+0xab6>
 800bb02:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800bb06:	e7db      	b.n	800bac0 <_strtod_l+0xb58>
 800bb08:	a311      	add	r3, pc, #68	; (adr r3, 800bb50 <_strtod_l+0xbe8>)
 800bb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0e:	f7f4 fffd 	bl	8000b0c <__aeabi_dcmplt>
 800bb12:	e7b2      	b.n	800ba7a <_strtod_l+0xb12>
 800bb14:	2300      	movs	r3, #0
 800bb16:	930a      	str	r3, [sp, #40]	; 0x28
 800bb18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bb1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb1c:	6013      	str	r3, [r2, #0]
 800bb1e:	f7ff ba6b 	b.w	800aff8 <_strtod_l+0x90>
 800bb22:	2a65      	cmp	r2, #101	; 0x65
 800bb24:	f43f ab5f 	beq.w	800b1e6 <_strtod_l+0x27e>
 800bb28:	2a45      	cmp	r2, #69	; 0x45
 800bb2a:	f43f ab5c 	beq.w	800b1e6 <_strtod_l+0x27e>
 800bb2e:	2301      	movs	r3, #1
 800bb30:	f7ff bb94 	b.w	800b25c <_strtod_l+0x2f4>
 800bb34:	f3af 8000 	nop.w
 800bb38:	94a03595 	.word	0x94a03595
 800bb3c:	3fdfffff 	.word	0x3fdfffff
 800bb40:	35afe535 	.word	0x35afe535
 800bb44:	3fe00000 	.word	0x3fe00000
 800bb48:	ffc00000 	.word	0xffc00000
 800bb4c:	41dfffff 	.word	0x41dfffff
 800bb50:	94a03595 	.word	0x94a03595
 800bb54:	3fcfffff 	.word	0x3fcfffff
 800bb58:	3ff00000 	.word	0x3ff00000
 800bb5c:	7ff00000 	.word	0x7ff00000
 800bb60:	7fe00000 	.word	0x7fe00000
 800bb64:	7c9fffff 	.word	0x7c9fffff
 800bb68:	3fe00000 	.word	0x3fe00000
 800bb6c:	bff00000 	.word	0xbff00000
 800bb70:	7fefffff 	.word	0x7fefffff

0800bb74 <_strtod_r>:
 800bb74:	4b01      	ldr	r3, [pc, #4]	; (800bb7c <_strtod_r+0x8>)
 800bb76:	f7ff b9f7 	b.w	800af68 <_strtod_l>
 800bb7a:	bf00      	nop
 800bb7c:	20000088 	.word	0x20000088

0800bb80 <_strtol_l.constprop.0>:
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb86:	d001      	beq.n	800bb8c <_strtol_l.constprop.0+0xc>
 800bb88:	2b24      	cmp	r3, #36	; 0x24
 800bb8a:	d906      	bls.n	800bb9a <_strtol_l.constprop.0+0x1a>
 800bb8c:	f7fe fa7e 	bl	800a08c <__errno>
 800bb90:	2316      	movs	r3, #22
 800bb92:	6003      	str	r3, [r0, #0]
 800bb94:	2000      	movs	r0, #0
 800bb96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb9a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bc80 <_strtol_l.constprop.0+0x100>
 800bb9e:	460d      	mov	r5, r1
 800bba0:	462e      	mov	r6, r5
 800bba2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bba6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bbaa:	f017 0708 	ands.w	r7, r7, #8
 800bbae:	d1f7      	bne.n	800bba0 <_strtol_l.constprop.0+0x20>
 800bbb0:	2c2d      	cmp	r4, #45	; 0x2d
 800bbb2:	d132      	bne.n	800bc1a <_strtol_l.constprop.0+0x9a>
 800bbb4:	782c      	ldrb	r4, [r5, #0]
 800bbb6:	2701      	movs	r7, #1
 800bbb8:	1cb5      	adds	r5, r6, #2
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d05b      	beq.n	800bc76 <_strtol_l.constprop.0+0xf6>
 800bbbe:	2b10      	cmp	r3, #16
 800bbc0:	d109      	bne.n	800bbd6 <_strtol_l.constprop.0+0x56>
 800bbc2:	2c30      	cmp	r4, #48	; 0x30
 800bbc4:	d107      	bne.n	800bbd6 <_strtol_l.constprop.0+0x56>
 800bbc6:	782c      	ldrb	r4, [r5, #0]
 800bbc8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bbcc:	2c58      	cmp	r4, #88	; 0x58
 800bbce:	d14d      	bne.n	800bc6c <_strtol_l.constprop.0+0xec>
 800bbd0:	786c      	ldrb	r4, [r5, #1]
 800bbd2:	2310      	movs	r3, #16
 800bbd4:	3502      	adds	r5, #2
 800bbd6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bbda:	f108 38ff 	add.w	r8, r8, #4294967295
 800bbde:	f04f 0c00 	mov.w	ip, #0
 800bbe2:	fbb8 f9f3 	udiv	r9, r8, r3
 800bbe6:	4666      	mov	r6, ip
 800bbe8:	fb03 8a19 	mls	sl, r3, r9, r8
 800bbec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bbf0:	f1be 0f09 	cmp.w	lr, #9
 800bbf4:	d816      	bhi.n	800bc24 <_strtol_l.constprop.0+0xa4>
 800bbf6:	4674      	mov	r4, lr
 800bbf8:	42a3      	cmp	r3, r4
 800bbfa:	dd24      	ble.n	800bc46 <_strtol_l.constprop.0+0xc6>
 800bbfc:	f1bc 0f00 	cmp.w	ip, #0
 800bc00:	db1e      	blt.n	800bc40 <_strtol_l.constprop.0+0xc0>
 800bc02:	45b1      	cmp	r9, r6
 800bc04:	d31c      	bcc.n	800bc40 <_strtol_l.constprop.0+0xc0>
 800bc06:	d101      	bne.n	800bc0c <_strtol_l.constprop.0+0x8c>
 800bc08:	45a2      	cmp	sl, r4
 800bc0a:	db19      	blt.n	800bc40 <_strtol_l.constprop.0+0xc0>
 800bc0c:	fb06 4603 	mla	r6, r6, r3, r4
 800bc10:	f04f 0c01 	mov.w	ip, #1
 800bc14:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc18:	e7e8      	b.n	800bbec <_strtol_l.constprop.0+0x6c>
 800bc1a:	2c2b      	cmp	r4, #43	; 0x2b
 800bc1c:	bf04      	itt	eq
 800bc1e:	782c      	ldrbeq	r4, [r5, #0]
 800bc20:	1cb5      	addeq	r5, r6, #2
 800bc22:	e7ca      	b.n	800bbba <_strtol_l.constprop.0+0x3a>
 800bc24:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bc28:	f1be 0f19 	cmp.w	lr, #25
 800bc2c:	d801      	bhi.n	800bc32 <_strtol_l.constprop.0+0xb2>
 800bc2e:	3c37      	subs	r4, #55	; 0x37
 800bc30:	e7e2      	b.n	800bbf8 <_strtol_l.constprop.0+0x78>
 800bc32:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bc36:	f1be 0f19 	cmp.w	lr, #25
 800bc3a:	d804      	bhi.n	800bc46 <_strtol_l.constprop.0+0xc6>
 800bc3c:	3c57      	subs	r4, #87	; 0x57
 800bc3e:	e7db      	b.n	800bbf8 <_strtol_l.constprop.0+0x78>
 800bc40:	f04f 3cff 	mov.w	ip, #4294967295
 800bc44:	e7e6      	b.n	800bc14 <_strtol_l.constprop.0+0x94>
 800bc46:	f1bc 0f00 	cmp.w	ip, #0
 800bc4a:	da05      	bge.n	800bc58 <_strtol_l.constprop.0+0xd8>
 800bc4c:	2322      	movs	r3, #34	; 0x22
 800bc4e:	6003      	str	r3, [r0, #0]
 800bc50:	4646      	mov	r6, r8
 800bc52:	b942      	cbnz	r2, 800bc66 <_strtol_l.constprop.0+0xe6>
 800bc54:	4630      	mov	r0, r6
 800bc56:	e79e      	b.n	800bb96 <_strtol_l.constprop.0+0x16>
 800bc58:	b107      	cbz	r7, 800bc5c <_strtol_l.constprop.0+0xdc>
 800bc5a:	4276      	negs	r6, r6
 800bc5c:	2a00      	cmp	r2, #0
 800bc5e:	d0f9      	beq.n	800bc54 <_strtol_l.constprop.0+0xd4>
 800bc60:	f1bc 0f00 	cmp.w	ip, #0
 800bc64:	d000      	beq.n	800bc68 <_strtol_l.constprop.0+0xe8>
 800bc66:	1e69      	subs	r1, r5, #1
 800bc68:	6011      	str	r1, [r2, #0]
 800bc6a:	e7f3      	b.n	800bc54 <_strtol_l.constprop.0+0xd4>
 800bc6c:	2430      	movs	r4, #48	; 0x30
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d1b1      	bne.n	800bbd6 <_strtol_l.constprop.0+0x56>
 800bc72:	2308      	movs	r3, #8
 800bc74:	e7af      	b.n	800bbd6 <_strtol_l.constprop.0+0x56>
 800bc76:	2c30      	cmp	r4, #48	; 0x30
 800bc78:	d0a5      	beq.n	800bbc6 <_strtol_l.constprop.0+0x46>
 800bc7a:	230a      	movs	r3, #10
 800bc7c:	e7ab      	b.n	800bbd6 <_strtol_l.constprop.0+0x56>
 800bc7e:	bf00      	nop
 800bc80:	08011d49 	.word	0x08011d49

0800bc84 <_strtol_r>:
 800bc84:	f7ff bf7c 	b.w	800bb80 <_strtol_l.constprop.0>

0800bc88 <_write_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	4d07      	ldr	r5, [pc, #28]	; (800bca8 <_write_r+0x20>)
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	4608      	mov	r0, r1
 800bc90:	4611      	mov	r1, r2
 800bc92:	2200      	movs	r2, #0
 800bc94:	602a      	str	r2, [r5, #0]
 800bc96:	461a      	mov	r2, r3
 800bc98:	f7f8 fa39 	bl	800410e <_write>
 800bc9c:	1c43      	adds	r3, r0, #1
 800bc9e:	d102      	bne.n	800bca6 <_write_r+0x1e>
 800bca0:	682b      	ldr	r3, [r5, #0]
 800bca2:	b103      	cbz	r3, 800bca6 <_write_r+0x1e>
 800bca4:	6023      	str	r3, [r4, #0]
 800bca6:	bd38      	pop	{r3, r4, r5, pc}
 800bca8:	20013ef8 	.word	0x20013ef8

0800bcac <_close_r>:
 800bcac:	b538      	push	{r3, r4, r5, lr}
 800bcae:	4d06      	ldr	r5, [pc, #24]	; (800bcc8 <_close_r+0x1c>)
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	4608      	mov	r0, r1
 800bcb6:	602b      	str	r3, [r5, #0]
 800bcb8:	f7f8 fa45 	bl	8004146 <_close>
 800bcbc:	1c43      	adds	r3, r0, #1
 800bcbe:	d102      	bne.n	800bcc6 <_close_r+0x1a>
 800bcc0:	682b      	ldr	r3, [r5, #0]
 800bcc2:	b103      	cbz	r3, 800bcc6 <_close_r+0x1a>
 800bcc4:	6023      	str	r3, [r4, #0]
 800bcc6:	bd38      	pop	{r3, r4, r5, pc}
 800bcc8:	20013ef8 	.word	0x20013ef8

0800bccc <quorem>:
 800bccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd0:	6903      	ldr	r3, [r0, #16]
 800bcd2:	690c      	ldr	r4, [r1, #16]
 800bcd4:	42a3      	cmp	r3, r4
 800bcd6:	4607      	mov	r7, r0
 800bcd8:	f2c0 8081 	blt.w	800bdde <quorem+0x112>
 800bcdc:	3c01      	subs	r4, #1
 800bcde:	f101 0814 	add.w	r8, r1, #20
 800bce2:	f100 0514 	add.w	r5, r0, #20
 800bce6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcea:	9301      	str	r3, [sp, #4]
 800bcec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bcf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bcfc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bd00:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd04:	d331      	bcc.n	800bd6a <quorem+0x9e>
 800bd06:	f04f 0e00 	mov.w	lr, #0
 800bd0a:	4640      	mov	r0, r8
 800bd0c:	46ac      	mov	ip, r5
 800bd0e:	46f2      	mov	sl, lr
 800bd10:	f850 2b04 	ldr.w	r2, [r0], #4
 800bd14:	b293      	uxth	r3, r2
 800bd16:	fb06 e303 	mla	r3, r6, r3, lr
 800bd1a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	ebaa 0303 	sub.w	r3, sl, r3
 800bd24:	f8dc a000 	ldr.w	sl, [ip]
 800bd28:	0c12      	lsrs	r2, r2, #16
 800bd2a:	fa13 f38a 	uxtah	r3, r3, sl
 800bd2e:	fb06 e202 	mla	r2, r6, r2, lr
 800bd32:	9300      	str	r3, [sp, #0]
 800bd34:	9b00      	ldr	r3, [sp, #0]
 800bd36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bd3a:	b292      	uxth	r2, r2
 800bd3c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bd40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd44:	f8bd 3000 	ldrh.w	r3, [sp]
 800bd48:	4581      	cmp	r9, r0
 800bd4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd4e:	f84c 3b04 	str.w	r3, [ip], #4
 800bd52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bd56:	d2db      	bcs.n	800bd10 <quorem+0x44>
 800bd58:	f855 300b 	ldr.w	r3, [r5, fp]
 800bd5c:	b92b      	cbnz	r3, 800bd6a <quorem+0x9e>
 800bd5e:	9b01      	ldr	r3, [sp, #4]
 800bd60:	3b04      	subs	r3, #4
 800bd62:	429d      	cmp	r5, r3
 800bd64:	461a      	mov	r2, r3
 800bd66:	d32e      	bcc.n	800bdc6 <quorem+0xfa>
 800bd68:	613c      	str	r4, [r7, #16]
 800bd6a:	4638      	mov	r0, r7
 800bd6c:	f001 fc96 	bl	800d69c <__mcmp>
 800bd70:	2800      	cmp	r0, #0
 800bd72:	db24      	blt.n	800bdbe <quorem+0xf2>
 800bd74:	3601      	adds	r6, #1
 800bd76:	4628      	mov	r0, r5
 800bd78:	f04f 0c00 	mov.w	ip, #0
 800bd7c:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd80:	f8d0 e000 	ldr.w	lr, [r0]
 800bd84:	b293      	uxth	r3, r2
 800bd86:	ebac 0303 	sub.w	r3, ip, r3
 800bd8a:	0c12      	lsrs	r2, r2, #16
 800bd8c:	fa13 f38e 	uxtah	r3, r3, lr
 800bd90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bd94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd98:	b29b      	uxth	r3, r3
 800bd9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd9e:	45c1      	cmp	r9, r8
 800bda0:	f840 3b04 	str.w	r3, [r0], #4
 800bda4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bda8:	d2e8      	bcs.n	800bd7c <quorem+0xb0>
 800bdaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bdae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdb2:	b922      	cbnz	r2, 800bdbe <quorem+0xf2>
 800bdb4:	3b04      	subs	r3, #4
 800bdb6:	429d      	cmp	r5, r3
 800bdb8:	461a      	mov	r2, r3
 800bdba:	d30a      	bcc.n	800bdd2 <quorem+0x106>
 800bdbc:	613c      	str	r4, [r7, #16]
 800bdbe:	4630      	mov	r0, r6
 800bdc0:	b003      	add	sp, #12
 800bdc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc6:	6812      	ldr	r2, [r2, #0]
 800bdc8:	3b04      	subs	r3, #4
 800bdca:	2a00      	cmp	r2, #0
 800bdcc:	d1cc      	bne.n	800bd68 <quorem+0x9c>
 800bdce:	3c01      	subs	r4, #1
 800bdd0:	e7c7      	b.n	800bd62 <quorem+0x96>
 800bdd2:	6812      	ldr	r2, [r2, #0]
 800bdd4:	3b04      	subs	r3, #4
 800bdd6:	2a00      	cmp	r2, #0
 800bdd8:	d1f0      	bne.n	800bdbc <quorem+0xf0>
 800bdda:	3c01      	subs	r4, #1
 800bddc:	e7eb      	b.n	800bdb6 <quorem+0xea>
 800bdde:	2000      	movs	r0, #0
 800bde0:	e7ee      	b.n	800bdc0 <quorem+0xf4>
 800bde2:	0000      	movs	r0, r0
 800bde4:	0000      	movs	r0, r0
	...

0800bde8 <_dtoa_r>:
 800bde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdec:	ed2d 8b04 	vpush	{d8-d9}
 800bdf0:	ec57 6b10 	vmov	r6, r7, d0
 800bdf4:	b093      	sub	sp, #76	; 0x4c
 800bdf6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bdf8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bdfc:	9106      	str	r1, [sp, #24]
 800bdfe:	ee10 aa10 	vmov	sl, s0
 800be02:	4604      	mov	r4, r0
 800be04:	9209      	str	r2, [sp, #36]	; 0x24
 800be06:	930c      	str	r3, [sp, #48]	; 0x30
 800be08:	46bb      	mov	fp, r7
 800be0a:	b975      	cbnz	r5, 800be2a <_dtoa_r+0x42>
 800be0c:	2010      	movs	r0, #16
 800be0e:	f001 f95f 	bl	800d0d0 <malloc>
 800be12:	4602      	mov	r2, r0
 800be14:	6260      	str	r0, [r4, #36]	; 0x24
 800be16:	b920      	cbnz	r0, 800be22 <_dtoa_r+0x3a>
 800be18:	4ba7      	ldr	r3, [pc, #668]	; (800c0b8 <_dtoa_r+0x2d0>)
 800be1a:	21ea      	movs	r1, #234	; 0xea
 800be1c:	48a7      	ldr	r0, [pc, #668]	; (800c0bc <_dtoa_r+0x2d4>)
 800be1e:	f002 fcdb 	bl	800e7d8 <__assert_func>
 800be22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800be26:	6005      	str	r5, [r0, #0]
 800be28:	60c5      	str	r5, [r0, #12]
 800be2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be2c:	6819      	ldr	r1, [r3, #0]
 800be2e:	b151      	cbz	r1, 800be46 <_dtoa_r+0x5e>
 800be30:	685a      	ldr	r2, [r3, #4]
 800be32:	604a      	str	r2, [r1, #4]
 800be34:	2301      	movs	r3, #1
 800be36:	4093      	lsls	r3, r2
 800be38:	608b      	str	r3, [r1, #8]
 800be3a:	4620      	mov	r0, r4
 800be3c:	f001 f9a2 	bl	800d184 <_Bfree>
 800be40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be42:	2200      	movs	r2, #0
 800be44:	601a      	str	r2, [r3, #0]
 800be46:	1e3b      	subs	r3, r7, #0
 800be48:	bfaa      	itet	ge
 800be4a:	2300      	movge	r3, #0
 800be4c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800be50:	f8c8 3000 	strge.w	r3, [r8]
 800be54:	4b9a      	ldr	r3, [pc, #616]	; (800c0c0 <_dtoa_r+0x2d8>)
 800be56:	bfbc      	itt	lt
 800be58:	2201      	movlt	r2, #1
 800be5a:	f8c8 2000 	strlt.w	r2, [r8]
 800be5e:	ea33 030b 	bics.w	r3, r3, fp
 800be62:	d11b      	bne.n	800be9c <_dtoa_r+0xb4>
 800be64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be66:	f242 730f 	movw	r3, #9999	; 0x270f
 800be6a:	6013      	str	r3, [r2, #0]
 800be6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be70:	4333      	orrs	r3, r6
 800be72:	f000 8592 	beq.w	800c99a <_dtoa_r+0xbb2>
 800be76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be78:	b963      	cbnz	r3, 800be94 <_dtoa_r+0xac>
 800be7a:	4b92      	ldr	r3, [pc, #584]	; (800c0c4 <_dtoa_r+0x2dc>)
 800be7c:	e022      	b.n	800bec4 <_dtoa_r+0xdc>
 800be7e:	4b92      	ldr	r3, [pc, #584]	; (800c0c8 <_dtoa_r+0x2e0>)
 800be80:	9301      	str	r3, [sp, #4]
 800be82:	3308      	adds	r3, #8
 800be84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be86:	6013      	str	r3, [r2, #0]
 800be88:	9801      	ldr	r0, [sp, #4]
 800be8a:	b013      	add	sp, #76	; 0x4c
 800be8c:	ecbd 8b04 	vpop	{d8-d9}
 800be90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be94:	4b8b      	ldr	r3, [pc, #556]	; (800c0c4 <_dtoa_r+0x2dc>)
 800be96:	9301      	str	r3, [sp, #4]
 800be98:	3303      	adds	r3, #3
 800be9a:	e7f3      	b.n	800be84 <_dtoa_r+0x9c>
 800be9c:	2200      	movs	r2, #0
 800be9e:	2300      	movs	r3, #0
 800bea0:	4650      	mov	r0, sl
 800bea2:	4659      	mov	r1, fp
 800bea4:	f7f4 fe28 	bl	8000af8 <__aeabi_dcmpeq>
 800bea8:	ec4b ab19 	vmov	d9, sl, fp
 800beac:	4680      	mov	r8, r0
 800beae:	b158      	cbz	r0, 800bec8 <_dtoa_r+0xe0>
 800beb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800beb2:	2301      	movs	r3, #1
 800beb4:	6013      	str	r3, [r2, #0]
 800beb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800beb8:	2b00      	cmp	r3, #0
 800beba:	f000 856b 	beq.w	800c994 <_dtoa_r+0xbac>
 800bebe:	4883      	ldr	r0, [pc, #524]	; (800c0cc <_dtoa_r+0x2e4>)
 800bec0:	6018      	str	r0, [r3, #0]
 800bec2:	1e43      	subs	r3, r0, #1
 800bec4:	9301      	str	r3, [sp, #4]
 800bec6:	e7df      	b.n	800be88 <_dtoa_r+0xa0>
 800bec8:	ec4b ab10 	vmov	d0, sl, fp
 800becc:	aa10      	add	r2, sp, #64	; 0x40
 800bece:	a911      	add	r1, sp, #68	; 0x44
 800bed0:	4620      	mov	r0, r4
 800bed2:	f001 fd05 	bl	800d8e0 <__d2b>
 800bed6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800beda:	ee08 0a10 	vmov	s16, r0
 800bede:	2d00      	cmp	r5, #0
 800bee0:	f000 8084 	beq.w	800bfec <_dtoa_r+0x204>
 800bee4:	ee19 3a90 	vmov	r3, s19
 800bee8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800beec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bef0:	4656      	mov	r6, sl
 800bef2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bef6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800befa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800befe:	4b74      	ldr	r3, [pc, #464]	; (800c0d0 <_dtoa_r+0x2e8>)
 800bf00:	2200      	movs	r2, #0
 800bf02:	4630      	mov	r0, r6
 800bf04:	4639      	mov	r1, r7
 800bf06:	f7f4 f9d7 	bl	80002b8 <__aeabi_dsub>
 800bf0a:	a365      	add	r3, pc, #404	; (adr r3, 800c0a0 <_dtoa_r+0x2b8>)
 800bf0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf10:	f7f4 fb8a 	bl	8000628 <__aeabi_dmul>
 800bf14:	a364      	add	r3, pc, #400	; (adr r3, 800c0a8 <_dtoa_r+0x2c0>)
 800bf16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1a:	f7f4 f9cf 	bl	80002bc <__adddf3>
 800bf1e:	4606      	mov	r6, r0
 800bf20:	4628      	mov	r0, r5
 800bf22:	460f      	mov	r7, r1
 800bf24:	f7f4 fb16 	bl	8000554 <__aeabi_i2d>
 800bf28:	a361      	add	r3, pc, #388	; (adr r3, 800c0b0 <_dtoa_r+0x2c8>)
 800bf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2e:	f7f4 fb7b 	bl	8000628 <__aeabi_dmul>
 800bf32:	4602      	mov	r2, r0
 800bf34:	460b      	mov	r3, r1
 800bf36:	4630      	mov	r0, r6
 800bf38:	4639      	mov	r1, r7
 800bf3a:	f7f4 f9bf 	bl	80002bc <__adddf3>
 800bf3e:	4606      	mov	r6, r0
 800bf40:	460f      	mov	r7, r1
 800bf42:	f7f4 fe21 	bl	8000b88 <__aeabi_d2iz>
 800bf46:	2200      	movs	r2, #0
 800bf48:	9000      	str	r0, [sp, #0]
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	4639      	mov	r1, r7
 800bf50:	f7f4 fddc 	bl	8000b0c <__aeabi_dcmplt>
 800bf54:	b150      	cbz	r0, 800bf6c <_dtoa_r+0x184>
 800bf56:	9800      	ldr	r0, [sp, #0]
 800bf58:	f7f4 fafc 	bl	8000554 <__aeabi_i2d>
 800bf5c:	4632      	mov	r2, r6
 800bf5e:	463b      	mov	r3, r7
 800bf60:	f7f4 fdca 	bl	8000af8 <__aeabi_dcmpeq>
 800bf64:	b910      	cbnz	r0, 800bf6c <_dtoa_r+0x184>
 800bf66:	9b00      	ldr	r3, [sp, #0]
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	9300      	str	r3, [sp, #0]
 800bf6c:	9b00      	ldr	r3, [sp, #0]
 800bf6e:	2b16      	cmp	r3, #22
 800bf70:	d85a      	bhi.n	800c028 <_dtoa_r+0x240>
 800bf72:	9a00      	ldr	r2, [sp, #0]
 800bf74:	4b57      	ldr	r3, [pc, #348]	; (800c0d4 <_dtoa_r+0x2ec>)
 800bf76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7e:	ec51 0b19 	vmov	r0, r1, d9
 800bf82:	f7f4 fdc3 	bl	8000b0c <__aeabi_dcmplt>
 800bf86:	2800      	cmp	r0, #0
 800bf88:	d050      	beq.n	800c02c <_dtoa_r+0x244>
 800bf8a:	9b00      	ldr	r3, [sp, #0]
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	9300      	str	r3, [sp, #0]
 800bf90:	2300      	movs	r3, #0
 800bf92:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf96:	1b5d      	subs	r5, r3, r5
 800bf98:	1e6b      	subs	r3, r5, #1
 800bf9a:	9305      	str	r3, [sp, #20]
 800bf9c:	bf45      	ittet	mi
 800bf9e:	f1c5 0301 	rsbmi	r3, r5, #1
 800bfa2:	9304      	strmi	r3, [sp, #16]
 800bfa4:	2300      	movpl	r3, #0
 800bfa6:	2300      	movmi	r3, #0
 800bfa8:	bf4c      	ite	mi
 800bfaa:	9305      	strmi	r3, [sp, #20]
 800bfac:	9304      	strpl	r3, [sp, #16]
 800bfae:	9b00      	ldr	r3, [sp, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	db3d      	blt.n	800c030 <_dtoa_r+0x248>
 800bfb4:	9b05      	ldr	r3, [sp, #20]
 800bfb6:	9a00      	ldr	r2, [sp, #0]
 800bfb8:	920a      	str	r2, [sp, #40]	; 0x28
 800bfba:	4413      	add	r3, r2
 800bfbc:	9305      	str	r3, [sp, #20]
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	9307      	str	r3, [sp, #28]
 800bfc2:	9b06      	ldr	r3, [sp, #24]
 800bfc4:	2b09      	cmp	r3, #9
 800bfc6:	f200 8089 	bhi.w	800c0dc <_dtoa_r+0x2f4>
 800bfca:	2b05      	cmp	r3, #5
 800bfcc:	bfc4      	itt	gt
 800bfce:	3b04      	subgt	r3, #4
 800bfd0:	9306      	strgt	r3, [sp, #24]
 800bfd2:	9b06      	ldr	r3, [sp, #24]
 800bfd4:	f1a3 0302 	sub.w	r3, r3, #2
 800bfd8:	bfcc      	ite	gt
 800bfda:	2500      	movgt	r5, #0
 800bfdc:	2501      	movle	r5, #1
 800bfde:	2b03      	cmp	r3, #3
 800bfe0:	f200 8087 	bhi.w	800c0f2 <_dtoa_r+0x30a>
 800bfe4:	e8df f003 	tbb	[pc, r3]
 800bfe8:	59383a2d 	.word	0x59383a2d
 800bfec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bff0:	441d      	add	r5, r3
 800bff2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bff6:	2b20      	cmp	r3, #32
 800bff8:	bfc1      	itttt	gt
 800bffa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bffe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c002:	fa0b f303 	lslgt.w	r3, fp, r3
 800c006:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c00a:	bfda      	itte	le
 800c00c:	f1c3 0320 	rsble	r3, r3, #32
 800c010:	fa06 f003 	lslle.w	r0, r6, r3
 800c014:	4318      	orrgt	r0, r3
 800c016:	f7f4 fa8d 	bl	8000534 <__aeabi_ui2d>
 800c01a:	2301      	movs	r3, #1
 800c01c:	4606      	mov	r6, r0
 800c01e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c022:	3d01      	subs	r5, #1
 800c024:	930e      	str	r3, [sp, #56]	; 0x38
 800c026:	e76a      	b.n	800befe <_dtoa_r+0x116>
 800c028:	2301      	movs	r3, #1
 800c02a:	e7b2      	b.n	800bf92 <_dtoa_r+0x1aa>
 800c02c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c02e:	e7b1      	b.n	800bf94 <_dtoa_r+0x1ac>
 800c030:	9b04      	ldr	r3, [sp, #16]
 800c032:	9a00      	ldr	r2, [sp, #0]
 800c034:	1a9b      	subs	r3, r3, r2
 800c036:	9304      	str	r3, [sp, #16]
 800c038:	4253      	negs	r3, r2
 800c03a:	9307      	str	r3, [sp, #28]
 800c03c:	2300      	movs	r3, #0
 800c03e:	930a      	str	r3, [sp, #40]	; 0x28
 800c040:	e7bf      	b.n	800bfc2 <_dtoa_r+0x1da>
 800c042:	2300      	movs	r3, #0
 800c044:	9308      	str	r3, [sp, #32]
 800c046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c048:	2b00      	cmp	r3, #0
 800c04a:	dc55      	bgt.n	800c0f8 <_dtoa_r+0x310>
 800c04c:	2301      	movs	r3, #1
 800c04e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c052:	461a      	mov	r2, r3
 800c054:	9209      	str	r2, [sp, #36]	; 0x24
 800c056:	e00c      	b.n	800c072 <_dtoa_r+0x28a>
 800c058:	2301      	movs	r3, #1
 800c05a:	e7f3      	b.n	800c044 <_dtoa_r+0x25c>
 800c05c:	2300      	movs	r3, #0
 800c05e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c060:	9308      	str	r3, [sp, #32]
 800c062:	9b00      	ldr	r3, [sp, #0]
 800c064:	4413      	add	r3, r2
 800c066:	9302      	str	r3, [sp, #8]
 800c068:	3301      	adds	r3, #1
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	9303      	str	r3, [sp, #12]
 800c06e:	bfb8      	it	lt
 800c070:	2301      	movlt	r3, #1
 800c072:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c074:	2200      	movs	r2, #0
 800c076:	6042      	str	r2, [r0, #4]
 800c078:	2204      	movs	r2, #4
 800c07a:	f102 0614 	add.w	r6, r2, #20
 800c07e:	429e      	cmp	r6, r3
 800c080:	6841      	ldr	r1, [r0, #4]
 800c082:	d93d      	bls.n	800c100 <_dtoa_r+0x318>
 800c084:	4620      	mov	r0, r4
 800c086:	f001 f83d 	bl	800d104 <_Balloc>
 800c08a:	9001      	str	r0, [sp, #4]
 800c08c:	2800      	cmp	r0, #0
 800c08e:	d13b      	bne.n	800c108 <_dtoa_r+0x320>
 800c090:	4b11      	ldr	r3, [pc, #68]	; (800c0d8 <_dtoa_r+0x2f0>)
 800c092:	4602      	mov	r2, r0
 800c094:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c098:	e6c0      	b.n	800be1c <_dtoa_r+0x34>
 800c09a:	2301      	movs	r3, #1
 800c09c:	e7df      	b.n	800c05e <_dtoa_r+0x276>
 800c09e:	bf00      	nop
 800c0a0:	636f4361 	.word	0x636f4361
 800c0a4:	3fd287a7 	.word	0x3fd287a7
 800c0a8:	8b60c8b3 	.word	0x8b60c8b3
 800c0ac:	3fc68a28 	.word	0x3fc68a28
 800c0b0:	509f79fb 	.word	0x509f79fb
 800c0b4:	3fd34413 	.word	0x3fd34413
 800c0b8:	08011e56 	.word	0x08011e56
 800c0bc:	08011e6d 	.word	0x08011e6d
 800c0c0:	7ff00000 	.word	0x7ff00000
 800c0c4:	08011e52 	.word	0x08011e52
 800c0c8:	08011e49 	.word	0x08011e49
 800c0cc:	080120c2 	.word	0x080120c2
 800c0d0:	3ff80000 	.word	0x3ff80000
 800c0d4:	08011fd8 	.word	0x08011fd8
 800c0d8:	08011ec8 	.word	0x08011ec8
 800c0dc:	2501      	movs	r5, #1
 800c0de:	2300      	movs	r3, #0
 800c0e0:	9306      	str	r3, [sp, #24]
 800c0e2:	9508      	str	r5, [sp, #32]
 800c0e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c0e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	2312      	movs	r3, #18
 800c0f0:	e7b0      	b.n	800c054 <_dtoa_r+0x26c>
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	9308      	str	r3, [sp, #32]
 800c0f6:	e7f5      	b.n	800c0e4 <_dtoa_r+0x2fc>
 800c0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c0fe:	e7b8      	b.n	800c072 <_dtoa_r+0x28a>
 800c100:	3101      	adds	r1, #1
 800c102:	6041      	str	r1, [r0, #4]
 800c104:	0052      	lsls	r2, r2, #1
 800c106:	e7b8      	b.n	800c07a <_dtoa_r+0x292>
 800c108:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c10a:	9a01      	ldr	r2, [sp, #4]
 800c10c:	601a      	str	r2, [r3, #0]
 800c10e:	9b03      	ldr	r3, [sp, #12]
 800c110:	2b0e      	cmp	r3, #14
 800c112:	f200 809d 	bhi.w	800c250 <_dtoa_r+0x468>
 800c116:	2d00      	cmp	r5, #0
 800c118:	f000 809a 	beq.w	800c250 <_dtoa_r+0x468>
 800c11c:	9b00      	ldr	r3, [sp, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	dd32      	ble.n	800c188 <_dtoa_r+0x3a0>
 800c122:	4ab7      	ldr	r2, [pc, #732]	; (800c400 <_dtoa_r+0x618>)
 800c124:	f003 030f 	and.w	r3, r3, #15
 800c128:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c12c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c130:	9b00      	ldr	r3, [sp, #0]
 800c132:	05d8      	lsls	r0, r3, #23
 800c134:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c138:	d516      	bpl.n	800c168 <_dtoa_r+0x380>
 800c13a:	4bb2      	ldr	r3, [pc, #712]	; (800c404 <_dtoa_r+0x61c>)
 800c13c:	ec51 0b19 	vmov	r0, r1, d9
 800c140:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c144:	f7f4 fb9a 	bl	800087c <__aeabi_ddiv>
 800c148:	f007 070f 	and.w	r7, r7, #15
 800c14c:	4682      	mov	sl, r0
 800c14e:	468b      	mov	fp, r1
 800c150:	2503      	movs	r5, #3
 800c152:	4eac      	ldr	r6, [pc, #688]	; (800c404 <_dtoa_r+0x61c>)
 800c154:	b957      	cbnz	r7, 800c16c <_dtoa_r+0x384>
 800c156:	4642      	mov	r2, r8
 800c158:	464b      	mov	r3, r9
 800c15a:	4650      	mov	r0, sl
 800c15c:	4659      	mov	r1, fp
 800c15e:	f7f4 fb8d 	bl	800087c <__aeabi_ddiv>
 800c162:	4682      	mov	sl, r0
 800c164:	468b      	mov	fp, r1
 800c166:	e028      	b.n	800c1ba <_dtoa_r+0x3d2>
 800c168:	2502      	movs	r5, #2
 800c16a:	e7f2      	b.n	800c152 <_dtoa_r+0x36a>
 800c16c:	07f9      	lsls	r1, r7, #31
 800c16e:	d508      	bpl.n	800c182 <_dtoa_r+0x39a>
 800c170:	4640      	mov	r0, r8
 800c172:	4649      	mov	r1, r9
 800c174:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c178:	f7f4 fa56 	bl	8000628 <__aeabi_dmul>
 800c17c:	3501      	adds	r5, #1
 800c17e:	4680      	mov	r8, r0
 800c180:	4689      	mov	r9, r1
 800c182:	107f      	asrs	r7, r7, #1
 800c184:	3608      	adds	r6, #8
 800c186:	e7e5      	b.n	800c154 <_dtoa_r+0x36c>
 800c188:	f000 809b 	beq.w	800c2c2 <_dtoa_r+0x4da>
 800c18c:	9b00      	ldr	r3, [sp, #0]
 800c18e:	4f9d      	ldr	r7, [pc, #628]	; (800c404 <_dtoa_r+0x61c>)
 800c190:	425e      	negs	r6, r3
 800c192:	4b9b      	ldr	r3, [pc, #620]	; (800c400 <_dtoa_r+0x618>)
 800c194:	f006 020f 	and.w	r2, r6, #15
 800c198:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a0:	ec51 0b19 	vmov	r0, r1, d9
 800c1a4:	f7f4 fa40 	bl	8000628 <__aeabi_dmul>
 800c1a8:	1136      	asrs	r6, r6, #4
 800c1aa:	4682      	mov	sl, r0
 800c1ac:	468b      	mov	fp, r1
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	2502      	movs	r5, #2
 800c1b2:	2e00      	cmp	r6, #0
 800c1b4:	d17a      	bne.n	800c2ac <_dtoa_r+0x4c4>
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d1d3      	bne.n	800c162 <_dtoa_r+0x37a>
 800c1ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	f000 8082 	beq.w	800c2c6 <_dtoa_r+0x4de>
 800c1c2:	4b91      	ldr	r3, [pc, #580]	; (800c408 <_dtoa_r+0x620>)
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	4650      	mov	r0, sl
 800c1c8:	4659      	mov	r1, fp
 800c1ca:	f7f4 fc9f 	bl	8000b0c <__aeabi_dcmplt>
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	d079      	beq.n	800c2c6 <_dtoa_r+0x4de>
 800c1d2:	9b03      	ldr	r3, [sp, #12]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d076      	beq.n	800c2c6 <_dtoa_r+0x4de>
 800c1d8:	9b02      	ldr	r3, [sp, #8]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	dd36      	ble.n	800c24c <_dtoa_r+0x464>
 800c1de:	9b00      	ldr	r3, [sp, #0]
 800c1e0:	4650      	mov	r0, sl
 800c1e2:	4659      	mov	r1, fp
 800c1e4:	1e5f      	subs	r7, r3, #1
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	4b88      	ldr	r3, [pc, #544]	; (800c40c <_dtoa_r+0x624>)
 800c1ea:	f7f4 fa1d 	bl	8000628 <__aeabi_dmul>
 800c1ee:	9e02      	ldr	r6, [sp, #8]
 800c1f0:	4682      	mov	sl, r0
 800c1f2:	468b      	mov	fp, r1
 800c1f4:	3501      	adds	r5, #1
 800c1f6:	4628      	mov	r0, r5
 800c1f8:	f7f4 f9ac 	bl	8000554 <__aeabi_i2d>
 800c1fc:	4652      	mov	r2, sl
 800c1fe:	465b      	mov	r3, fp
 800c200:	f7f4 fa12 	bl	8000628 <__aeabi_dmul>
 800c204:	4b82      	ldr	r3, [pc, #520]	; (800c410 <_dtoa_r+0x628>)
 800c206:	2200      	movs	r2, #0
 800c208:	f7f4 f858 	bl	80002bc <__adddf3>
 800c20c:	46d0      	mov	r8, sl
 800c20e:	46d9      	mov	r9, fp
 800c210:	4682      	mov	sl, r0
 800c212:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c216:	2e00      	cmp	r6, #0
 800c218:	d158      	bne.n	800c2cc <_dtoa_r+0x4e4>
 800c21a:	4b7e      	ldr	r3, [pc, #504]	; (800c414 <_dtoa_r+0x62c>)
 800c21c:	2200      	movs	r2, #0
 800c21e:	4640      	mov	r0, r8
 800c220:	4649      	mov	r1, r9
 800c222:	f7f4 f849 	bl	80002b8 <__aeabi_dsub>
 800c226:	4652      	mov	r2, sl
 800c228:	465b      	mov	r3, fp
 800c22a:	4680      	mov	r8, r0
 800c22c:	4689      	mov	r9, r1
 800c22e:	f7f4 fc8b 	bl	8000b48 <__aeabi_dcmpgt>
 800c232:	2800      	cmp	r0, #0
 800c234:	f040 8295 	bne.w	800c762 <_dtoa_r+0x97a>
 800c238:	4652      	mov	r2, sl
 800c23a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c23e:	4640      	mov	r0, r8
 800c240:	4649      	mov	r1, r9
 800c242:	f7f4 fc63 	bl	8000b0c <__aeabi_dcmplt>
 800c246:	2800      	cmp	r0, #0
 800c248:	f040 8289 	bne.w	800c75e <_dtoa_r+0x976>
 800c24c:	ec5b ab19 	vmov	sl, fp, d9
 800c250:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c252:	2b00      	cmp	r3, #0
 800c254:	f2c0 8148 	blt.w	800c4e8 <_dtoa_r+0x700>
 800c258:	9a00      	ldr	r2, [sp, #0]
 800c25a:	2a0e      	cmp	r2, #14
 800c25c:	f300 8144 	bgt.w	800c4e8 <_dtoa_r+0x700>
 800c260:	4b67      	ldr	r3, [pc, #412]	; (800c400 <_dtoa_r+0x618>)
 800c262:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c266:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c26a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	f280 80d5 	bge.w	800c41c <_dtoa_r+0x634>
 800c272:	9b03      	ldr	r3, [sp, #12]
 800c274:	2b00      	cmp	r3, #0
 800c276:	f300 80d1 	bgt.w	800c41c <_dtoa_r+0x634>
 800c27a:	f040 826f 	bne.w	800c75c <_dtoa_r+0x974>
 800c27e:	4b65      	ldr	r3, [pc, #404]	; (800c414 <_dtoa_r+0x62c>)
 800c280:	2200      	movs	r2, #0
 800c282:	4640      	mov	r0, r8
 800c284:	4649      	mov	r1, r9
 800c286:	f7f4 f9cf 	bl	8000628 <__aeabi_dmul>
 800c28a:	4652      	mov	r2, sl
 800c28c:	465b      	mov	r3, fp
 800c28e:	f7f4 fc51 	bl	8000b34 <__aeabi_dcmpge>
 800c292:	9e03      	ldr	r6, [sp, #12]
 800c294:	4637      	mov	r7, r6
 800c296:	2800      	cmp	r0, #0
 800c298:	f040 8245 	bne.w	800c726 <_dtoa_r+0x93e>
 800c29c:	9d01      	ldr	r5, [sp, #4]
 800c29e:	2331      	movs	r3, #49	; 0x31
 800c2a0:	f805 3b01 	strb.w	r3, [r5], #1
 800c2a4:	9b00      	ldr	r3, [sp, #0]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	9300      	str	r3, [sp, #0]
 800c2aa:	e240      	b.n	800c72e <_dtoa_r+0x946>
 800c2ac:	07f2      	lsls	r2, r6, #31
 800c2ae:	d505      	bpl.n	800c2bc <_dtoa_r+0x4d4>
 800c2b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2b4:	f7f4 f9b8 	bl	8000628 <__aeabi_dmul>
 800c2b8:	3501      	adds	r5, #1
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	1076      	asrs	r6, r6, #1
 800c2be:	3708      	adds	r7, #8
 800c2c0:	e777      	b.n	800c1b2 <_dtoa_r+0x3ca>
 800c2c2:	2502      	movs	r5, #2
 800c2c4:	e779      	b.n	800c1ba <_dtoa_r+0x3d2>
 800c2c6:	9f00      	ldr	r7, [sp, #0]
 800c2c8:	9e03      	ldr	r6, [sp, #12]
 800c2ca:	e794      	b.n	800c1f6 <_dtoa_r+0x40e>
 800c2cc:	9901      	ldr	r1, [sp, #4]
 800c2ce:	4b4c      	ldr	r3, [pc, #304]	; (800c400 <_dtoa_r+0x618>)
 800c2d0:	4431      	add	r1, r6
 800c2d2:	910d      	str	r1, [sp, #52]	; 0x34
 800c2d4:	9908      	ldr	r1, [sp, #32]
 800c2d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c2da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c2de:	2900      	cmp	r1, #0
 800c2e0:	d043      	beq.n	800c36a <_dtoa_r+0x582>
 800c2e2:	494d      	ldr	r1, [pc, #308]	; (800c418 <_dtoa_r+0x630>)
 800c2e4:	2000      	movs	r0, #0
 800c2e6:	f7f4 fac9 	bl	800087c <__aeabi_ddiv>
 800c2ea:	4652      	mov	r2, sl
 800c2ec:	465b      	mov	r3, fp
 800c2ee:	f7f3 ffe3 	bl	80002b8 <__aeabi_dsub>
 800c2f2:	9d01      	ldr	r5, [sp, #4]
 800c2f4:	4682      	mov	sl, r0
 800c2f6:	468b      	mov	fp, r1
 800c2f8:	4649      	mov	r1, r9
 800c2fa:	4640      	mov	r0, r8
 800c2fc:	f7f4 fc44 	bl	8000b88 <__aeabi_d2iz>
 800c300:	4606      	mov	r6, r0
 800c302:	f7f4 f927 	bl	8000554 <__aeabi_i2d>
 800c306:	4602      	mov	r2, r0
 800c308:	460b      	mov	r3, r1
 800c30a:	4640      	mov	r0, r8
 800c30c:	4649      	mov	r1, r9
 800c30e:	f7f3 ffd3 	bl	80002b8 <__aeabi_dsub>
 800c312:	3630      	adds	r6, #48	; 0x30
 800c314:	f805 6b01 	strb.w	r6, [r5], #1
 800c318:	4652      	mov	r2, sl
 800c31a:	465b      	mov	r3, fp
 800c31c:	4680      	mov	r8, r0
 800c31e:	4689      	mov	r9, r1
 800c320:	f7f4 fbf4 	bl	8000b0c <__aeabi_dcmplt>
 800c324:	2800      	cmp	r0, #0
 800c326:	d163      	bne.n	800c3f0 <_dtoa_r+0x608>
 800c328:	4642      	mov	r2, r8
 800c32a:	464b      	mov	r3, r9
 800c32c:	4936      	ldr	r1, [pc, #216]	; (800c408 <_dtoa_r+0x620>)
 800c32e:	2000      	movs	r0, #0
 800c330:	f7f3 ffc2 	bl	80002b8 <__aeabi_dsub>
 800c334:	4652      	mov	r2, sl
 800c336:	465b      	mov	r3, fp
 800c338:	f7f4 fbe8 	bl	8000b0c <__aeabi_dcmplt>
 800c33c:	2800      	cmp	r0, #0
 800c33e:	f040 80b5 	bne.w	800c4ac <_dtoa_r+0x6c4>
 800c342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c344:	429d      	cmp	r5, r3
 800c346:	d081      	beq.n	800c24c <_dtoa_r+0x464>
 800c348:	4b30      	ldr	r3, [pc, #192]	; (800c40c <_dtoa_r+0x624>)
 800c34a:	2200      	movs	r2, #0
 800c34c:	4650      	mov	r0, sl
 800c34e:	4659      	mov	r1, fp
 800c350:	f7f4 f96a 	bl	8000628 <__aeabi_dmul>
 800c354:	4b2d      	ldr	r3, [pc, #180]	; (800c40c <_dtoa_r+0x624>)
 800c356:	4682      	mov	sl, r0
 800c358:	468b      	mov	fp, r1
 800c35a:	4640      	mov	r0, r8
 800c35c:	4649      	mov	r1, r9
 800c35e:	2200      	movs	r2, #0
 800c360:	f7f4 f962 	bl	8000628 <__aeabi_dmul>
 800c364:	4680      	mov	r8, r0
 800c366:	4689      	mov	r9, r1
 800c368:	e7c6      	b.n	800c2f8 <_dtoa_r+0x510>
 800c36a:	4650      	mov	r0, sl
 800c36c:	4659      	mov	r1, fp
 800c36e:	f7f4 f95b 	bl	8000628 <__aeabi_dmul>
 800c372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c374:	9d01      	ldr	r5, [sp, #4]
 800c376:	930f      	str	r3, [sp, #60]	; 0x3c
 800c378:	4682      	mov	sl, r0
 800c37a:	468b      	mov	fp, r1
 800c37c:	4649      	mov	r1, r9
 800c37e:	4640      	mov	r0, r8
 800c380:	f7f4 fc02 	bl	8000b88 <__aeabi_d2iz>
 800c384:	4606      	mov	r6, r0
 800c386:	f7f4 f8e5 	bl	8000554 <__aeabi_i2d>
 800c38a:	3630      	adds	r6, #48	; 0x30
 800c38c:	4602      	mov	r2, r0
 800c38e:	460b      	mov	r3, r1
 800c390:	4640      	mov	r0, r8
 800c392:	4649      	mov	r1, r9
 800c394:	f7f3 ff90 	bl	80002b8 <__aeabi_dsub>
 800c398:	f805 6b01 	strb.w	r6, [r5], #1
 800c39c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c39e:	429d      	cmp	r5, r3
 800c3a0:	4680      	mov	r8, r0
 800c3a2:	4689      	mov	r9, r1
 800c3a4:	f04f 0200 	mov.w	r2, #0
 800c3a8:	d124      	bne.n	800c3f4 <_dtoa_r+0x60c>
 800c3aa:	4b1b      	ldr	r3, [pc, #108]	; (800c418 <_dtoa_r+0x630>)
 800c3ac:	4650      	mov	r0, sl
 800c3ae:	4659      	mov	r1, fp
 800c3b0:	f7f3 ff84 	bl	80002bc <__adddf3>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	4640      	mov	r0, r8
 800c3ba:	4649      	mov	r1, r9
 800c3bc:	f7f4 fbc4 	bl	8000b48 <__aeabi_dcmpgt>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	d173      	bne.n	800c4ac <_dtoa_r+0x6c4>
 800c3c4:	4652      	mov	r2, sl
 800c3c6:	465b      	mov	r3, fp
 800c3c8:	4913      	ldr	r1, [pc, #76]	; (800c418 <_dtoa_r+0x630>)
 800c3ca:	2000      	movs	r0, #0
 800c3cc:	f7f3 ff74 	bl	80002b8 <__aeabi_dsub>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	4640      	mov	r0, r8
 800c3d6:	4649      	mov	r1, r9
 800c3d8:	f7f4 fb98 	bl	8000b0c <__aeabi_dcmplt>
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	f43f af35 	beq.w	800c24c <_dtoa_r+0x464>
 800c3e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c3e4:	1e6b      	subs	r3, r5, #1
 800c3e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c3ec:	2b30      	cmp	r3, #48	; 0x30
 800c3ee:	d0f8      	beq.n	800c3e2 <_dtoa_r+0x5fa>
 800c3f0:	9700      	str	r7, [sp, #0]
 800c3f2:	e049      	b.n	800c488 <_dtoa_r+0x6a0>
 800c3f4:	4b05      	ldr	r3, [pc, #20]	; (800c40c <_dtoa_r+0x624>)
 800c3f6:	f7f4 f917 	bl	8000628 <__aeabi_dmul>
 800c3fa:	4680      	mov	r8, r0
 800c3fc:	4689      	mov	r9, r1
 800c3fe:	e7bd      	b.n	800c37c <_dtoa_r+0x594>
 800c400:	08011fd8 	.word	0x08011fd8
 800c404:	08011fb0 	.word	0x08011fb0
 800c408:	3ff00000 	.word	0x3ff00000
 800c40c:	40240000 	.word	0x40240000
 800c410:	401c0000 	.word	0x401c0000
 800c414:	40140000 	.word	0x40140000
 800c418:	3fe00000 	.word	0x3fe00000
 800c41c:	9d01      	ldr	r5, [sp, #4]
 800c41e:	4656      	mov	r6, sl
 800c420:	465f      	mov	r7, fp
 800c422:	4642      	mov	r2, r8
 800c424:	464b      	mov	r3, r9
 800c426:	4630      	mov	r0, r6
 800c428:	4639      	mov	r1, r7
 800c42a:	f7f4 fa27 	bl	800087c <__aeabi_ddiv>
 800c42e:	f7f4 fbab 	bl	8000b88 <__aeabi_d2iz>
 800c432:	4682      	mov	sl, r0
 800c434:	f7f4 f88e 	bl	8000554 <__aeabi_i2d>
 800c438:	4642      	mov	r2, r8
 800c43a:	464b      	mov	r3, r9
 800c43c:	f7f4 f8f4 	bl	8000628 <__aeabi_dmul>
 800c440:	4602      	mov	r2, r0
 800c442:	460b      	mov	r3, r1
 800c444:	4630      	mov	r0, r6
 800c446:	4639      	mov	r1, r7
 800c448:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c44c:	f7f3 ff34 	bl	80002b8 <__aeabi_dsub>
 800c450:	f805 6b01 	strb.w	r6, [r5], #1
 800c454:	9e01      	ldr	r6, [sp, #4]
 800c456:	9f03      	ldr	r7, [sp, #12]
 800c458:	1bae      	subs	r6, r5, r6
 800c45a:	42b7      	cmp	r7, r6
 800c45c:	4602      	mov	r2, r0
 800c45e:	460b      	mov	r3, r1
 800c460:	d135      	bne.n	800c4ce <_dtoa_r+0x6e6>
 800c462:	f7f3 ff2b 	bl	80002bc <__adddf3>
 800c466:	4642      	mov	r2, r8
 800c468:	464b      	mov	r3, r9
 800c46a:	4606      	mov	r6, r0
 800c46c:	460f      	mov	r7, r1
 800c46e:	f7f4 fb6b 	bl	8000b48 <__aeabi_dcmpgt>
 800c472:	b9d0      	cbnz	r0, 800c4aa <_dtoa_r+0x6c2>
 800c474:	4642      	mov	r2, r8
 800c476:	464b      	mov	r3, r9
 800c478:	4630      	mov	r0, r6
 800c47a:	4639      	mov	r1, r7
 800c47c:	f7f4 fb3c 	bl	8000af8 <__aeabi_dcmpeq>
 800c480:	b110      	cbz	r0, 800c488 <_dtoa_r+0x6a0>
 800c482:	f01a 0f01 	tst.w	sl, #1
 800c486:	d110      	bne.n	800c4aa <_dtoa_r+0x6c2>
 800c488:	4620      	mov	r0, r4
 800c48a:	ee18 1a10 	vmov	r1, s16
 800c48e:	f000 fe79 	bl	800d184 <_Bfree>
 800c492:	2300      	movs	r3, #0
 800c494:	9800      	ldr	r0, [sp, #0]
 800c496:	702b      	strb	r3, [r5, #0]
 800c498:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c49a:	3001      	adds	r0, #1
 800c49c:	6018      	str	r0, [r3, #0]
 800c49e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	f43f acf1 	beq.w	800be88 <_dtoa_r+0xa0>
 800c4a6:	601d      	str	r5, [r3, #0]
 800c4a8:	e4ee      	b.n	800be88 <_dtoa_r+0xa0>
 800c4aa:	9f00      	ldr	r7, [sp, #0]
 800c4ac:	462b      	mov	r3, r5
 800c4ae:	461d      	mov	r5, r3
 800c4b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4b4:	2a39      	cmp	r2, #57	; 0x39
 800c4b6:	d106      	bne.n	800c4c6 <_dtoa_r+0x6de>
 800c4b8:	9a01      	ldr	r2, [sp, #4]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d1f7      	bne.n	800c4ae <_dtoa_r+0x6c6>
 800c4be:	9901      	ldr	r1, [sp, #4]
 800c4c0:	2230      	movs	r2, #48	; 0x30
 800c4c2:	3701      	adds	r7, #1
 800c4c4:	700a      	strb	r2, [r1, #0]
 800c4c6:	781a      	ldrb	r2, [r3, #0]
 800c4c8:	3201      	adds	r2, #1
 800c4ca:	701a      	strb	r2, [r3, #0]
 800c4cc:	e790      	b.n	800c3f0 <_dtoa_r+0x608>
 800c4ce:	4ba6      	ldr	r3, [pc, #664]	; (800c768 <_dtoa_r+0x980>)
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f7f4 f8a9 	bl	8000628 <__aeabi_dmul>
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	2300      	movs	r3, #0
 800c4da:	4606      	mov	r6, r0
 800c4dc:	460f      	mov	r7, r1
 800c4de:	f7f4 fb0b 	bl	8000af8 <__aeabi_dcmpeq>
 800c4e2:	2800      	cmp	r0, #0
 800c4e4:	d09d      	beq.n	800c422 <_dtoa_r+0x63a>
 800c4e6:	e7cf      	b.n	800c488 <_dtoa_r+0x6a0>
 800c4e8:	9a08      	ldr	r2, [sp, #32]
 800c4ea:	2a00      	cmp	r2, #0
 800c4ec:	f000 80d7 	beq.w	800c69e <_dtoa_r+0x8b6>
 800c4f0:	9a06      	ldr	r2, [sp, #24]
 800c4f2:	2a01      	cmp	r2, #1
 800c4f4:	f300 80ba 	bgt.w	800c66c <_dtoa_r+0x884>
 800c4f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4fa:	2a00      	cmp	r2, #0
 800c4fc:	f000 80b2 	beq.w	800c664 <_dtoa_r+0x87c>
 800c500:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c504:	9e07      	ldr	r6, [sp, #28]
 800c506:	9d04      	ldr	r5, [sp, #16]
 800c508:	9a04      	ldr	r2, [sp, #16]
 800c50a:	441a      	add	r2, r3
 800c50c:	9204      	str	r2, [sp, #16]
 800c50e:	9a05      	ldr	r2, [sp, #20]
 800c510:	2101      	movs	r1, #1
 800c512:	441a      	add	r2, r3
 800c514:	4620      	mov	r0, r4
 800c516:	9205      	str	r2, [sp, #20]
 800c518:	f000 ff36 	bl	800d388 <__i2b>
 800c51c:	4607      	mov	r7, r0
 800c51e:	2d00      	cmp	r5, #0
 800c520:	dd0c      	ble.n	800c53c <_dtoa_r+0x754>
 800c522:	9b05      	ldr	r3, [sp, #20]
 800c524:	2b00      	cmp	r3, #0
 800c526:	dd09      	ble.n	800c53c <_dtoa_r+0x754>
 800c528:	42ab      	cmp	r3, r5
 800c52a:	9a04      	ldr	r2, [sp, #16]
 800c52c:	bfa8      	it	ge
 800c52e:	462b      	movge	r3, r5
 800c530:	1ad2      	subs	r2, r2, r3
 800c532:	9204      	str	r2, [sp, #16]
 800c534:	9a05      	ldr	r2, [sp, #20]
 800c536:	1aed      	subs	r5, r5, r3
 800c538:	1ad3      	subs	r3, r2, r3
 800c53a:	9305      	str	r3, [sp, #20]
 800c53c:	9b07      	ldr	r3, [sp, #28]
 800c53e:	b31b      	cbz	r3, 800c588 <_dtoa_r+0x7a0>
 800c540:	9b08      	ldr	r3, [sp, #32]
 800c542:	2b00      	cmp	r3, #0
 800c544:	f000 80af 	beq.w	800c6a6 <_dtoa_r+0x8be>
 800c548:	2e00      	cmp	r6, #0
 800c54a:	dd13      	ble.n	800c574 <_dtoa_r+0x78c>
 800c54c:	4639      	mov	r1, r7
 800c54e:	4632      	mov	r2, r6
 800c550:	4620      	mov	r0, r4
 800c552:	f000 ffd9 	bl	800d508 <__pow5mult>
 800c556:	ee18 2a10 	vmov	r2, s16
 800c55a:	4601      	mov	r1, r0
 800c55c:	4607      	mov	r7, r0
 800c55e:	4620      	mov	r0, r4
 800c560:	f000 ff28 	bl	800d3b4 <__multiply>
 800c564:	ee18 1a10 	vmov	r1, s16
 800c568:	4680      	mov	r8, r0
 800c56a:	4620      	mov	r0, r4
 800c56c:	f000 fe0a 	bl	800d184 <_Bfree>
 800c570:	ee08 8a10 	vmov	s16, r8
 800c574:	9b07      	ldr	r3, [sp, #28]
 800c576:	1b9a      	subs	r2, r3, r6
 800c578:	d006      	beq.n	800c588 <_dtoa_r+0x7a0>
 800c57a:	ee18 1a10 	vmov	r1, s16
 800c57e:	4620      	mov	r0, r4
 800c580:	f000 ffc2 	bl	800d508 <__pow5mult>
 800c584:	ee08 0a10 	vmov	s16, r0
 800c588:	2101      	movs	r1, #1
 800c58a:	4620      	mov	r0, r4
 800c58c:	f000 fefc 	bl	800d388 <__i2b>
 800c590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c592:	2b00      	cmp	r3, #0
 800c594:	4606      	mov	r6, r0
 800c596:	f340 8088 	ble.w	800c6aa <_dtoa_r+0x8c2>
 800c59a:	461a      	mov	r2, r3
 800c59c:	4601      	mov	r1, r0
 800c59e:	4620      	mov	r0, r4
 800c5a0:	f000 ffb2 	bl	800d508 <__pow5mult>
 800c5a4:	9b06      	ldr	r3, [sp, #24]
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	4606      	mov	r6, r0
 800c5aa:	f340 8081 	ble.w	800c6b0 <_dtoa_r+0x8c8>
 800c5ae:	f04f 0800 	mov.w	r8, #0
 800c5b2:	6933      	ldr	r3, [r6, #16]
 800c5b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c5b8:	6918      	ldr	r0, [r3, #16]
 800c5ba:	f000 fe95 	bl	800d2e8 <__hi0bits>
 800c5be:	f1c0 0020 	rsb	r0, r0, #32
 800c5c2:	9b05      	ldr	r3, [sp, #20]
 800c5c4:	4418      	add	r0, r3
 800c5c6:	f010 001f 	ands.w	r0, r0, #31
 800c5ca:	f000 8092 	beq.w	800c6f2 <_dtoa_r+0x90a>
 800c5ce:	f1c0 0320 	rsb	r3, r0, #32
 800c5d2:	2b04      	cmp	r3, #4
 800c5d4:	f340 808a 	ble.w	800c6ec <_dtoa_r+0x904>
 800c5d8:	f1c0 001c 	rsb	r0, r0, #28
 800c5dc:	9b04      	ldr	r3, [sp, #16]
 800c5de:	4403      	add	r3, r0
 800c5e0:	9304      	str	r3, [sp, #16]
 800c5e2:	9b05      	ldr	r3, [sp, #20]
 800c5e4:	4403      	add	r3, r0
 800c5e6:	4405      	add	r5, r0
 800c5e8:	9305      	str	r3, [sp, #20]
 800c5ea:	9b04      	ldr	r3, [sp, #16]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	dd07      	ble.n	800c600 <_dtoa_r+0x818>
 800c5f0:	ee18 1a10 	vmov	r1, s16
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	f000 ffe0 	bl	800d5bc <__lshift>
 800c5fc:	ee08 0a10 	vmov	s16, r0
 800c600:	9b05      	ldr	r3, [sp, #20]
 800c602:	2b00      	cmp	r3, #0
 800c604:	dd05      	ble.n	800c612 <_dtoa_r+0x82a>
 800c606:	4631      	mov	r1, r6
 800c608:	461a      	mov	r2, r3
 800c60a:	4620      	mov	r0, r4
 800c60c:	f000 ffd6 	bl	800d5bc <__lshift>
 800c610:	4606      	mov	r6, r0
 800c612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c614:	2b00      	cmp	r3, #0
 800c616:	d06e      	beq.n	800c6f6 <_dtoa_r+0x90e>
 800c618:	ee18 0a10 	vmov	r0, s16
 800c61c:	4631      	mov	r1, r6
 800c61e:	f001 f83d 	bl	800d69c <__mcmp>
 800c622:	2800      	cmp	r0, #0
 800c624:	da67      	bge.n	800c6f6 <_dtoa_r+0x90e>
 800c626:	9b00      	ldr	r3, [sp, #0]
 800c628:	3b01      	subs	r3, #1
 800c62a:	ee18 1a10 	vmov	r1, s16
 800c62e:	9300      	str	r3, [sp, #0]
 800c630:	220a      	movs	r2, #10
 800c632:	2300      	movs	r3, #0
 800c634:	4620      	mov	r0, r4
 800c636:	f000 fdc7 	bl	800d1c8 <__multadd>
 800c63a:	9b08      	ldr	r3, [sp, #32]
 800c63c:	ee08 0a10 	vmov	s16, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	f000 81b1 	beq.w	800c9a8 <_dtoa_r+0xbc0>
 800c646:	2300      	movs	r3, #0
 800c648:	4639      	mov	r1, r7
 800c64a:	220a      	movs	r2, #10
 800c64c:	4620      	mov	r0, r4
 800c64e:	f000 fdbb 	bl	800d1c8 <__multadd>
 800c652:	9b02      	ldr	r3, [sp, #8]
 800c654:	2b00      	cmp	r3, #0
 800c656:	4607      	mov	r7, r0
 800c658:	f300 808e 	bgt.w	800c778 <_dtoa_r+0x990>
 800c65c:	9b06      	ldr	r3, [sp, #24]
 800c65e:	2b02      	cmp	r3, #2
 800c660:	dc51      	bgt.n	800c706 <_dtoa_r+0x91e>
 800c662:	e089      	b.n	800c778 <_dtoa_r+0x990>
 800c664:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c666:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c66a:	e74b      	b.n	800c504 <_dtoa_r+0x71c>
 800c66c:	9b03      	ldr	r3, [sp, #12]
 800c66e:	1e5e      	subs	r6, r3, #1
 800c670:	9b07      	ldr	r3, [sp, #28]
 800c672:	42b3      	cmp	r3, r6
 800c674:	bfbf      	itttt	lt
 800c676:	9b07      	ldrlt	r3, [sp, #28]
 800c678:	9607      	strlt	r6, [sp, #28]
 800c67a:	1af2      	sublt	r2, r6, r3
 800c67c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c67e:	bfb6      	itet	lt
 800c680:	189b      	addlt	r3, r3, r2
 800c682:	1b9e      	subge	r6, r3, r6
 800c684:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c686:	9b03      	ldr	r3, [sp, #12]
 800c688:	bfb8      	it	lt
 800c68a:	2600      	movlt	r6, #0
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	bfb7      	itett	lt
 800c690:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c694:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c698:	1a9d      	sublt	r5, r3, r2
 800c69a:	2300      	movlt	r3, #0
 800c69c:	e734      	b.n	800c508 <_dtoa_r+0x720>
 800c69e:	9e07      	ldr	r6, [sp, #28]
 800c6a0:	9d04      	ldr	r5, [sp, #16]
 800c6a2:	9f08      	ldr	r7, [sp, #32]
 800c6a4:	e73b      	b.n	800c51e <_dtoa_r+0x736>
 800c6a6:	9a07      	ldr	r2, [sp, #28]
 800c6a8:	e767      	b.n	800c57a <_dtoa_r+0x792>
 800c6aa:	9b06      	ldr	r3, [sp, #24]
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	dc18      	bgt.n	800c6e2 <_dtoa_r+0x8fa>
 800c6b0:	f1ba 0f00 	cmp.w	sl, #0
 800c6b4:	d115      	bne.n	800c6e2 <_dtoa_r+0x8fa>
 800c6b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c6ba:	b993      	cbnz	r3, 800c6e2 <_dtoa_r+0x8fa>
 800c6bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c6c0:	0d1b      	lsrs	r3, r3, #20
 800c6c2:	051b      	lsls	r3, r3, #20
 800c6c4:	b183      	cbz	r3, 800c6e8 <_dtoa_r+0x900>
 800c6c6:	9b04      	ldr	r3, [sp, #16]
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	9304      	str	r3, [sp, #16]
 800c6cc:	9b05      	ldr	r3, [sp, #20]
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	9305      	str	r3, [sp, #20]
 800c6d2:	f04f 0801 	mov.w	r8, #1
 800c6d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	f47f af6a 	bne.w	800c5b2 <_dtoa_r+0x7ca>
 800c6de:	2001      	movs	r0, #1
 800c6e0:	e76f      	b.n	800c5c2 <_dtoa_r+0x7da>
 800c6e2:	f04f 0800 	mov.w	r8, #0
 800c6e6:	e7f6      	b.n	800c6d6 <_dtoa_r+0x8ee>
 800c6e8:	4698      	mov	r8, r3
 800c6ea:	e7f4      	b.n	800c6d6 <_dtoa_r+0x8ee>
 800c6ec:	f43f af7d 	beq.w	800c5ea <_dtoa_r+0x802>
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	301c      	adds	r0, #28
 800c6f4:	e772      	b.n	800c5dc <_dtoa_r+0x7f4>
 800c6f6:	9b03      	ldr	r3, [sp, #12]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	dc37      	bgt.n	800c76c <_dtoa_r+0x984>
 800c6fc:	9b06      	ldr	r3, [sp, #24]
 800c6fe:	2b02      	cmp	r3, #2
 800c700:	dd34      	ble.n	800c76c <_dtoa_r+0x984>
 800c702:	9b03      	ldr	r3, [sp, #12]
 800c704:	9302      	str	r3, [sp, #8]
 800c706:	9b02      	ldr	r3, [sp, #8]
 800c708:	b96b      	cbnz	r3, 800c726 <_dtoa_r+0x93e>
 800c70a:	4631      	mov	r1, r6
 800c70c:	2205      	movs	r2, #5
 800c70e:	4620      	mov	r0, r4
 800c710:	f000 fd5a 	bl	800d1c8 <__multadd>
 800c714:	4601      	mov	r1, r0
 800c716:	4606      	mov	r6, r0
 800c718:	ee18 0a10 	vmov	r0, s16
 800c71c:	f000 ffbe 	bl	800d69c <__mcmp>
 800c720:	2800      	cmp	r0, #0
 800c722:	f73f adbb 	bgt.w	800c29c <_dtoa_r+0x4b4>
 800c726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c728:	9d01      	ldr	r5, [sp, #4]
 800c72a:	43db      	mvns	r3, r3
 800c72c:	9300      	str	r3, [sp, #0]
 800c72e:	f04f 0800 	mov.w	r8, #0
 800c732:	4631      	mov	r1, r6
 800c734:	4620      	mov	r0, r4
 800c736:	f000 fd25 	bl	800d184 <_Bfree>
 800c73a:	2f00      	cmp	r7, #0
 800c73c:	f43f aea4 	beq.w	800c488 <_dtoa_r+0x6a0>
 800c740:	f1b8 0f00 	cmp.w	r8, #0
 800c744:	d005      	beq.n	800c752 <_dtoa_r+0x96a>
 800c746:	45b8      	cmp	r8, r7
 800c748:	d003      	beq.n	800c752 <_dtoa_r+0x96a>
 800c74a:	4641      	mov	r1, r8
 800c74c:	4620      	mov	r0, r4
 800c74e:	f000 fd19 	bl	800d184 <_Bfree>
 800c752:	4639      	mov	r1, r7
 800c754:	4620      	mov	r0, r4
 800c756:	f000 fd15 	bl	800d184 <_Bfree>
 800c75a:	e695      	b.n	800c488 <_dtoa_r+0x6a0>
 800c75c:	2600      	movs	r6, #0
 800c75e:	4637      	mov	r7, r6
 800c760:	e7e1      	b.n	800c726 <_dtoa_r+0x93e>
 800c762:	9700      	str	r7, [sp, #0]
 800c764:	4637      	mov	r7, r6
 800c766:	e599      	b.n	800c29c <_dtoa_r+0x4b4>
 800c768:	40240000 	.word	0x40240000
 800c76c:	9b08      	ldr	r3, [sp, #32]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	f000 80ca 	beq.w	800c908 <_dtoa_r+0xb20>
 800c774:	9b03      	ldr	r3, [sp, #12]
 800c776:	9302      	str	r3, [sp, #8]
 800c778:	2d00      	cmp	r5, #0
 800c77a:	dd05      	ble.n	800c788 <_dtoa_r+0x9a0>
 800c77c:	4639      	mov	r1, r7
 800c77e:	462a      	mov	r2, r5
 800c780:	4620      	mov	r0, r4
 800c782:	f000 ff1b 	bl	800d5bc <__lshift>
 800c786:	4607      	mov	r7, r0
 800c788:	f1b8 0f00 	cmp.w	r8, #0
 800c78c:	d05b      	beq.n	800c846 <_dtoa_r+0xa5e>
 800c78e:	6879      	ldr	r1, [r7, #4]
 800c790:	4620      	mov	r0, r4
 800c792:	f000 fcb7 	bl	800d104 <_Balloc>
 800c796:	4605      	mov	r5, r0
 800c798:	b928      	cbnz	r0, 800c7a6 <_dtoa_r+0x9be>
 800c79a:	4b87      	ldr	r3, [pc, #540]	; (800c9b8 <_dtoa_r+0xbd0>)
 800c79c:	4602      	mov	r2, r0
 800c79e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c7a2:	f7ff bb3b 	b.w	800be1c <_dtoa_r+0x34>
 800c7a6:	693a      	ldr	r2, [r7, #16]
 800c7a8:	3202      	adds	r2, #2
 800c7aa:	0092      	lsls	r2, r2, #2
 800c7ac:	f107 010c 	add.w	r1, r7, #12
 800c7b0:	300c      	adds	r0, #12
 800c7b2:	f7fd fc95 	bl	800a0e0 <memcpy>
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	4629      	mov	r1, r5
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	f000 fefe 	bl	800d5bc <__lshift>
 800c7c0:	9b01      	ldr	r3, [sp, #4]
 800c7c2:	f103 0901 	add.w	r9, r3, #1
 800c7c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	9305      	str	r3, [sp, #20]
 800c7ce:	f00a 0301 	and.w	r3, sl, #1
 800c7d2:	46b8      	mov	r8, r7
 800c7d4:	9304      	str	r3, [sp, #16]
 800c7d6:	4607      	mov	r7, r0
 800c7d8:	4631      	mov	r1, r6
 800c7da:	ee18 0a10 	vmov	r0, s16
 800c7de:	f7ff fa75 	bl	800bccc <quorem>
 800c7e2:	4641      	mov	r1, r8
 800c7e4:	9002      	str	r0, [sp, #8]
 800c7e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c7ea:	ee18 0a10 	vmov	r0, s16
 800c7ee:	f000 ff55 	bl	800d69c <__mcmp>
 800c7f2:	463a      	mov	r2, r7
 800c7f4:	9003      	str	r0, [sp, #12]
 800c7f6:	4631      	mov	r1, r6
 800c7f8:	4620      	mov	r0, r4
 800c7fa:	f000 ff6b 	bl	800d6d4 <__mdiff>
 800c7fe:	68c2      	ldr	r2, [r0, #12]
 800c800:	f109 3bff 	add.w	fp, r9, #4294967295
 800c804:	4605      	mov	r5, r0
 800c806:	bb02      	cbnz	r2, 800c84a <_dtoa_r+0xa62>
 800c808:	4601      	mov	r1, r0
 800c80a:	ee18 0a10 	vmov	r0, s16
 800c80e:	f000 ff45 	bl	800d69c <__mcmp>
 800c812:	4602      	mov	r2, r0
 800c814:	4629      	mov	r1, r5
 800c816:	4620      	mov	r0, r4
 800c818:	9207      	str	r2, [sp, #28]
 800c81a:	f000 fcb3 	bl	800d184 <_Bfree>
 800c81e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c822:	ea43 0102 	orr.w	r1, r3, r2
 800c826:	9b04      	ldr	r3, [sp, #16]
 800c828:	430b      	orrs	r3, r1
 800c82a:	464d      	mov	r5, r9
 800c82c:	d10f      	bne.n	800c84e <_dtoa_r+0xa66>
 800c82e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c832:	d02a      	beq.n	800c88a <_dtoa_r+0xaa2>
 800c834:	9b03      	ldr	r3, [sp, #12]
 800c836:	2b00      	cmp	r3, #0
 800c838:	dd02      	ble.n	800c840 <_dtoa_r+0xa58>
 800c83a:	9b02      	ldr	r3, [sp, #8]
 800c83c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c840:	f88b a000 	strb.w	sl, [fp]
 800c844:	e775      	b.n	800c732 <_dtoa_r+0x94a>
 800c846:	4638      	mov	r0, r7
 800c848:	e7ba      	b.n	800c7c0 <_dtoa_r+0x9d8>
 800c84a:	2201      	movs	r2, #1
 800c84c:	e7e2      	b.n	800c814 <_dtoa_r+0xa2c>
 800c84e:	9b03      	ldr	r3, [sp, #12]
 800c850:	2b00      	cmp	r3, #0
 800c852:	db04      	blt.n	800c85e <_dtoa_r+0xa76>
 800c854:	9906      	ldr	r1, [sp, #24]
 800c856:	430b      	orrs	r3, r1
 800c858:	9904      	ldr	r1, [sp, #16]
 800c85a:	430b      	orrs	r3, r1
 800c85c:	d122      	bne.n	800c8a4 <_dtoa_r+0xabc>
 800c85e:	2a00      	cmp	r2, #0
 800c860:	ddee      	ble.n	800c840 <_dtoa_r+0xa58>
 800c862:	ee18 1a10 	vmov	r1, s16
 800c866:	2201      	movs	r2, #1
 800c868:	4620      	mov	r0, r4
 800c86a:	f000 fea7 	bl	800d5bc <__lshift>
 800c86e:	4631      	mov	r1, r6
 800c870:	ee08 0a10 	vmov	s16, r0
 800c874:	f000 ff12 	bl	800d69c <__mcmp>
 800c878:	2800      	cmp	r0, #0
 800c87a:	dc03      	bgt.n	800c884 <_dtoa_r+0xa9c>
 800c87c:	d1e0      	bne.n	800c840 <_dtoa_r+0xa58>
 800c87e:	f01a 0f01 	tst.w	sl, #1
 800c882:	d0dd      	beq.n	800c840 <_dtoa_r+0xa58>
 800c884:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c888:	d1d7      	bne.n	800c83a <_dtoa_r+0xa52>
 800c88a:	2339      	movs	r3, #57	; 0x39
 800c88c:	f88b 3000 	strb.w	r3, [fp]
 800c890:	462b      	mov	r3, r5
 800c892:	461d      	mov	r5, r3
 800c894:	3b01      	subs	r3, #1
 800c896:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c89a:	2a39      	cmp	r2, #57	; 0x39
 800c89c:	d071      	beq.n	800c982 <_dtoa_r+0xb9a>
 800c89e:	3201      	adds	r2, #1
 800c8a0:	701a      	strb	r2, [r3, #0]
 800c8a2:	e746      	b.n	800c732 <_dtoa_r+0x94a>
 800c8a4:	2a00      	cmp	r2, #0
 800c8a6:	dd07      	ble.n	800c8b8 <_dtoa_r+0xad0>
 800c8a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c8ac:	d0ed      	beq.n	800c88a <_dtoa_r+0xaa2>
 800c8ae:	f10a 0301 	add.w	r3, sl, #1
 800c8b2:	f88b 3000 	strb.w	r3, [fp]
 800c8b6:	e73c      	b.n	800c732 <_dtoa_r+0x94a>
 800c8b8:	9b05      	ldr	r3, [sp, #20]
 800c8ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c8be:	4599      	cmp	r9, r3
 800c8c0:	d047      	beq.n	800c952 <_dtoa_r+0xb6a>
 800c8c2:	ee18 1a10 	vmov	r1, s16
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	220a      	movs	r2, #10
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	f000 fc7c 	bl	800d1c8 <__multadd>
 800c8d0:	45b8      	cmp	r8, r7
 800c8d2:	ee08 0a10 	vmov	s16, r0
 800c8d6:	f04f 0300 	mov.w	r3, #0
 800c8da:	f04f 020a 	mov.w	r2, #10
 800c8de:	4641      	mov	r1, r8
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	d106      	bne.n	800c8f2 <_dtoa_r+0xb0a>
 800c8e4:	f000 fc70 	bl	800d1c8 <__multadd>
 800c8e8:	4680      	mov	r8, r0
 800c8ea:	4607      	mov	r7, r0
 800c8ec:	f109 0901 	add.w	r9, r9, #1
 800c8f0:	e772      	b.n	800c7d8 <_dtoa_r+0x9f0>
 800c8f2:	f000 fc69 	bl	800d1c8 <__multadd>
 800c8f6:	4639      	mov	r1, r7
 800c8f8:	4680      	mov	r8, r0
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	220a      	movs	r2, #10
 800c8fe:	4620      	mov	r0, r4
 800c900:	f000 fc62 	bl	800d1c8 <__multadd>
 800c904:	4607      	mov	r7, r0
 800c906:	e7f1      	b.n	800c8ec <_dtoa_r+0xb04>
 800c908:	9b03      	ldr	r3, [sp, #12]
 800c90a:	9302      	str	r3, [sp, #8]
 800c90c:	9d01      	ldr	r5, [sp, #4]
 800c90e:	ee18 0a10 	vmov	r0, s16
 800c912:	4631      	mov	r1, r6
 800c914:	f7ff f9da 	bl	800bccc <quorem>
 800c918:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c91c:	9b01      	ldr	r3, [sp, #4]
 800c91e:	f805 ab01 	strb.w	sl, [r5], #1
 800c922:	1aea      	subs	r2, r5, r3
 800c924:	9b02      	ldr	r3, [sp, #8]
 800c926:	4293      	cmp	r3, r2
 800c928:	dd09      	ble.n	800c93e <_dtoa_r+0xb56>
 800c92a:	ee18 1a10 	vmov	r1, s16
 800c92e:	2300      	movs	r3, #0
 800c930:	220a      	movs	r2, #10
 800c932:	4620      	mov	r0, r4
 800c934:	f000 fc48 	bl	800d1c8 <__multadd>
 800c938:	ee08 0a10 	vmov	s16, r0
 800c93c:	e7e7      	b.n	800c90e <_dtoa_r+0xb26>
 800c93e:	9b02      	ldr	r3, [sp, #8]
 800c940:	2b00      	cmp	r3, #0
 800c942:	bfc8      	it	gt
 800c944:	461d      	movgt	r5, r3
 800c946:	9b01      	ldr	r3, [sp, #4]
 800c948:	bfd8      	it	le
 800c94a:	2501      	movle	r5, #1
 800c94c:	441d      	add	r5, r3
 800c94e:	f04f 0800 	mov.w	r8, #0
 800c952:	ee18 1a10 	vmov	r1, s16
 800c956:	2201      	movs	r2, #1
 800c958:	4620      	mov	r0, r4
 800c95a:	f000 fe2f 	bl	800d5bc <__lshift>
 800c95e:	4631      	mov	r1, r6
 800c960:	ee08 0a10 	vmov	s16, r0
 800c964:	f000 fe9a 	bl	800d69c <__mcmp>
 800c968:	2800      	cmp	r0, #0
 800c96a:	dc91      	bgt.n	800c890 <_dtoa_r+0xaa8>
 800c96c:	d102      	bne.n	800c974 <_dtoa_r+0xb8c>
 800c96e:	f01a 0f01 	tst.w	sl, #1
 800c972:	d18d      	bne.n	800c890 <_dtoa_r+0xaa8>
 800c974:	462b      	mov	r3, r5
 800c976:	461d      	mov	r5, r3
 800c978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c97c:	2a30      	cmp	r2, #48	; 0x30
 800c97e:	d0fa      	beq.n	800c976 <_dtoa_r+0xb8e>
 800c980:	e6d7      	b.n	800c732 <_dtoa_r+0x94a>
 800c982:	9a01      	ldr	r2, [sp, #4]
 800c984:	429a      	cmp	r2, r3
 800c986:	d184      	bne.n	800c892 <_dtoa_r+0xaaa>
 800c988:	9b00      	ldr	r3, [sp, #0]
 800c98a:	3301      	adds	r3, #1
 800c98c:	9300      	str	r3, [sp, #0]
 800c98e:	2331      	movs	r3, #49	; 0x31
 800c990:	7013      	strb	r3, [r2, #0]
 800c992:	e6ce      	b.n	800c732 <_dtoa_r+0x94a>
 800c994:	4b09      	ldr	r3, [pc, #36]	; (800c9bc <_dtoa_r+0xbd4>)
 800c996:	f7ff ba95 	b.w	800bec4 <_dtoa_r+0xdc>
 800c99a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	f47f aa6e 	bne.w	800be7e <_dtoa_r+0x96>
 800c9a2:	4b07      	ldr	r3, [pc, #28]	; (800c9c0 <_dtoa_r+0xbd8>)
 800c9a4:	f7ff ba8e 	b.w	800bec4 <_dtoa_r+0xdc>
 800c9a8:	9b02      	ldr	r3, [sp, #8]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	dcae      	bgt.n	800c90c <_dtoa_r+0xb24>
 800c9ae:	9b06      	ldr	r3, [sp, #24]
 800c9b0:	2b02      	cmp	r3, #2
 800c9b2:	f73f aea8 	bgt.w	800c706 <_dtoa_r+0x91e>
 800c9b6:	e7a9      	b.n	800c90c <_dtoa_r+0xb24>
 800c9b8:	08011ec8 	.word	0x08011ec8
 800c9bc:	080120c1 	.word	0x080120c1
 800c9c0:	08011e49 	.word	0x08011e49

0800c9c4 <rshift>:
 800c9c4:	6903      	ldr	r3, [r0, #16]
 800c9c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c9ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c9d2:	f100 0414 	add.w	r4, r0, #20
 800c9d6:	dd45      	ble.n	800ca64 <rshift+0xa0>
 800c9d8:	f011 011f 	ands.w	r1, r1, #31
 800c9dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c9e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c9e4:	d10c      	bne.n	800ca00 <rshift+0x3c>
 800c9e6:	f100 0710 	add.w	r7, r0, #16
 800c9ea:	4629      	mov	r1, r5
 800c9ec:	42b1      	cmp	r1, r6
 800c9ee:	d334      	bcc.n	800ca5a <rshift+0x96>
 800c9f0:	1a9b      	subs	r3, r3, r2
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	1eea      	subs	r2, r5, #3
 800c9f6:	4296      	cmp	r6, r2
 800c9f8:	bf38      	it	cc
 800c9fa:	2300      	movcc	r3, #0
 800c9fc:	4423      	add	r3, r4
 800c9fe:	e015      	b.n	800ca2c <rshift+0x68>
 800ca00:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ca04:	f1c1 0820 	rsb	r8, r1, #32
 800ca08:	40cf      	lsrs	r7, r1
 800ca0a:	f105 0e04 	add.w	lr, r5, #4
 800ca0e:	46a1      	mov	r9, r4
 800ca10:	4576      	cmp	r6, lr
 800ca12:	46f4      	mov	ip, lr
 800ca14:	d815      	bhi.n	800ca42 <rshift+0x7e>
 800ca16:	1a9a      	subs	r2, r3, r2
 800ca18:	0092      	lsls	r2, r2, #2
 800ca1a:	3a04      	subs	r2, #4
 800ca1c:	3501      	adds	r5, #1
 800ca1e:	42ae      	cmp	r6, r5
 800ca20:	bf38      	it	cc
 800ca22:	2200      	movcc	r2, #0
 800ca24:	18a3      	adds	r3, r4, r2
 800ca26:	50a7      	str	r7, [r4, r2]
 800ca28:	b107      	cbz	r7, 800ca2c <rshift+0x68>
 800ca2a:	3304      	adds	r3, #4
 800ca2c:	1b1a      	subs	r2, r3, r4
 800ca2e:	42a3      	cmp	r3, r4
 800ca30:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ca34:	bf08      	it	eq
 800ca36:	2300      	moveq	r3, #0
 800ca38:	6102      	str	r2, [r0, #16]
 800ca3a:	bf08      	it	eq
 800ca3c:	6143      	streq	r3, [r0, #20]
 800ca3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca42:	f8dc c000 	ldr.w	ip, [ip]
 800ca46:	fa0c fc08 	lsl.w	ip, ip, r8
 800ca4a:	ea4c 0707 	orr.w	r7, ip, r7
 800ca4e:	f849 7b04 	str.w	r7, [r9], #4
 800ca52:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ca56:	40cf      	lsrs	r7, r1
 800ca58:	e7da      	b.n	800ca10 <rshift+0x4c>
 800ca5a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ca5e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ca62:	e7c3      	b.n	800c9ec <rshift+0x28>
 800ca64:	4623      	mov	r3, r4
 800ca66:	e7e1      	b.n	800ca2c <rshift+0x68>

0800ca68 <__hexdig_fun>:
 800ca68:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ca6c:	2b09      	cmp	r3, #9
 800ca6e:	d802      	bhi.n	800ca76 <__hexdig_fun+0xe>
 800ca70:	3820      	subs	r0, #32
 800ca72:	b2c0      	uxtb	r0, r0
 800ca74:	4770      	bx	lr
 800ca76:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ca7a:	2b05      	cmp	r3, #5
 800ca7c:	d801      	bhi.n	800ca82 <__hexdig_fun+0x1a>
 800ca7e:	3847      	subs	r0, #71	; 0x47
 800ca80:	e7f7      	b.n	800ca72 <__hexdig_fun+0xa>
 800ca82:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ca86:	2b05      	cmp	r3, #5
 800ca88:	d801      	bhi.n	800ca8e <__hexdig_fun+0x26>
 800ca8a:	3827      	subs	r0, #39	; 0x27
 800ca8c:	e7f1      	b.n	800ca72 <__hexdig_fun+0xa>
 800ca8e:	2000      	movs	r0, #0
 800ca90:	4770      	bx	lr
	...

0800ca94 <__gethex>:
 800ca94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca98:	ed2d 8b02 	vpush	{d8}
 800ca9c:	b089      	sub	sp, #36	; 0x24
 800ca9e:	ee08 0a10 	vmov	s16, r0
 800caa2:	9304      	str	r3, [sp, #16]
 800caa4:	4bb4      	ldr	r3, [pc, #720]	; (800cd78 <__gethex+0x2e4>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	9301      	str	r3, [sp, #4]
 800caaa:	4618      	mov	r0, r3
 800caac:	468b      	mov	fp, r1
 800caae:	4690      	mov	r8, r2
 800cab0:	f7f3 fba0 	bl	80001f4 <strlen>
 800cab4:	9b01      	ldr	r3, [sp, #4]
 800cab6:	f8db 2000 	ldr.w	r2, [fp]
 800caba:	4403      	add	r3, r0
 800cabc:	4682      	mov	sl, r0
 800cabe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cac2:	9305      	str	r3, [sp, #20]
 800cac4:	1c93      	adds	r3, r2, #2
 800cac6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800caca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cace:	32fe      	adds	r2, #254	; 0xfe
 800cad0:	18d1      	adds	r1, r2, r3
 800cad2:	461f      	mov	r7, r3
 800cad4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cad8:	9100      	str	r1, [sp, #0]
 800cada:	2830      	cmp	r0, #48	; 0x30
 800cadc:	d0f8      	beq.n	800cad0 <__gethex+0x3c>
 800cade:	f7ff ffc3 	bl	800ca68 <__hexdig_fun>
 800cae2:	4604      	mov	r4, r0
 800cae4:	2800      	cmp	r0, #0
 800cae6:	d13a      	bne.n	800cb5e <__gethex+0xca>
 800cae8:	9901      	ldr	r1, [sp, #4]
 800caea:	4652      	mov	r2, sl
 800caec:	4638      	mov	r0, r7
 800caee:	f001 fda3 	bl	800e638 <strncmp>
 800caf2:	4605      	mov	r5, r0
 800caf4:	2800      	cmp	r0, #0
 800caf6:	d168      	bne.n	800cbca <__gethex+0x136>
 800caf8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cafc:	eb07 060a 	add.w	r6, r7, sl
 800cb00:	f7ff ffb2 	bl	800ca68 <__hexdig_fun>
 800cb04:	2800      	cmp	r0, #0
 800cb06:	d062      	beq.n	800cbce <__gethex+0x13a>
 800cb08:	4633      	mov	r3, r6
 800cb0a:	7818      	ldrb	r0, [r3, #0]
 800cb0c:	2830      	cmp	r0, #48	; 0x30
 800cb0e:	461f      	mov	r7, r3
 800cb10:	f103 0301 	add.w	r3, r3, #1
 800cb14:	d0f9      	beq.n	800cb0a <__gethex+0x76>
 800cb16:	f7ff ffa7 	bl	800ca68 <__hexdig_fun>
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	fab0 f480 	clz	r4, r0
 800cb20:	0964      	lsrs	r4, r4, #5
 800cb22:	4635      	mov	r5, r6
 800cb24:	9300      	str	r3, [sp, #0]
 800cb26:	463a      	mov	r2, r7
 800cb28:	4616      	mov	r6, r2
 800cb2a:	3201      	adds	r2, #1
 800cb2c:	7830      	ldrb	r0, [r6, #0]
 800cb2e:	f7ff ff9b 	bl	800ca68 <__hexdig_fun>
 800cb32:	2800      	cmp	r0, #0
 800cb34:	d1f8      	bne.n	800cb28 <__gethex+0x94>
 800cb36:	9901      	ldr	r1, [sp, #4]
 800cb38:	4652      	mov	r2, sl
 800cb3a:	4630      	mov	r0, r6
 800cb3c:	f001 fd7c 	bl	800e638 <strncmp>
 800cb40:	b980      	cbnz	r0, 800cb64 <__gethex+0xd0>
 800cb42:	b94d      	cbnz	r5, 800cb58 <__gethex+0xc4>
 800cb44:	eb06 050a 	add.w	r5, r6, sl
 800cb48:	462a      	mov	r2, r5
 800cb4a:	4616      	mov	r6, r2
 800cb4c:	3201      	adds	r2, #1
 800cb4e:	7830      	ldrb	r0, [r6, #0]
 800cb50:	f7ff ff8a 	bl	800ca68 <__hexdig_fun>
 800cb54:	2800      	cmp	r0, #0
 800cb56:	d1f8      	bne.n	800cb4a <__gethex+0xb6>
 800cb58:	1bad      	subs	r5, r5, r6
 800cb5a:	00ad      	lsls	r5, r5, #2
 800cb5c:	e004      	b.n	800cb68 <__gethex+0xd4>
 800cb5e:	2400      	movs	r4, #0
 800cb60:	4625      	mov	r5, r4
 800cb62:	e7e0      	b.n	800cb26 <__gethex+0x92>
 800cb64:	2d00      	cmp	r5, #0
 800cb66:	d1f7      	bne.n	800cb58 <__gethex+0xc4>
 800cb68:	7833      	ldrb	r3, [r6, #0]
 800cb6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cb6e:	2b50      	cmp	r3, #80	; 0x50
 800cb70:	d13b      	bne.n	800cbea <__gethex+0x156>
 800cb72:	7873      	ldrb	r3, [r6, #1]
 800cb74:	2b2b      	cmp	r3, #43	; 0x2b
 800cb76:	d02c      	beq.n	800cbd2 <__gethex+0x13e>
 800cb78:	2b2d      	cmp	r3, #45	; 0x2d
 800cb7a:	d02e      	beq.n	800cbda <__gethex+0x146>
 800cb7c:	1c71      	adds	r1, r6, #1
 800cb7e:	f04f 0900 	mov.w	r9, #0
 800cb82:	7808      	ldrb	r0, [r1, #0]
 800cb84:	f7ff ff70 	bl	800ca68 <__hexdig_fun>
 800cb88:	1e43      	subs	r3, r0, #1
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	2b18      	cmp	r3, #24
 800cb8e:	d82c      	bhi.n	800cbea <__gethex+0x156>
 800cb90:	f1a0 0210 	sub.w	r2, r0, #16
 800cb94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cb98:	f7ff ff66 	bl	800ca68 <__hexdig_fun>
 800cb9c:	1e43      	subs	r3, r0, #1
 800cb9e:	b2db      	uxtb	r3, r3
 800cba0:	2b18      	cmp	r3, #24
 800cba2:	d91d      	bls.n	800cbe0 <__gethex+0x14c>
 800cba4:	f1b9 0f00 	cmp.w	r9, #0
 800cba8:	d000      	beq.n	800cbac <__gethex+0x118>
 800cbaa:	4252      	negs	r2, r2
 800cbac:	4415      	add	r5, r2
 800cbae:	f8cb 1000 	str.w	r1, [fp]
 800cbb2:	b1e4      	cbz	r4, 800cbee <__gethex+0x15a>
 800cbb4:	9b00      	ldr	r3, [sp, #0]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	bf14      	ite	ne
 800cbba:	2700      	movne	r7, #0
 800cbbc:	2706      	moveq	r7, #6
 800cbbe:	4638      	mov	r0, r7
 800cbc0:	b009      	add	sp, #36	; 0x24
 800cbc2:	ecbd 8b02 	vpop	{d8}
 800cbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbca:	463e      	mov	r6, r7
 800cbcc:	4625      	mov	r5, r4
 800cbce:	2401      	movs	r4, #1
 800cbd0:	e7ca      	b.n	800cb68 <__gethex+0xd4>
 800cbd2:	f04f 0900 	mov.w	r9, #0
 800cbd6:	1cb1      	adds	r1, r6, #2
 800cbd8:	e7d3      	b.n	800cb82 <__gethex+0xee>
 800cbda:	f04f 0901 	mov.w	r9, #1
 800cbde:	e7fa      	b.n	800cbd6 <__gethex+0x142>
 800cbe0:	230a      	movs	r3, #10
 800cbe2:	fb03 0202 	mla	r2, r3, r2, r0
 800cbe6:	3a10      	subs	r2, #16
 800cbe8:	e7d4      	b.n	800cb94 <__gethex+0x100>
 800cbea:	4631      	mov	r1, r6
 800cbec:	e7df      	b.n	800cbae <__gethex+0x11a>
 800cbee:	1bf3      	subs	r3, r6, r7
 800cbf0:	3b01      	subs	r3, #1
 800cbf2:	4621      	mov	r1, r4
 800cbf4:	2b07      	cmp	r3, #7
 800cbf6:	dc0b      	bgt.n	800cc10 <__gethex+0x17c>
 800cbf8:	ee18 0a10 	vmov	r0, s16
 800cbfc:	f000 fa82 	bl	800d104 <_Balloc>
 800cc00:	4604      	mov	r4, r0
 800cc02:	b940      	cbnz	r0, 800cc16 <__gethex+0x182>
 800cc04:	4b5d      	ldr	r3, [pc, #372]	; (800cd7c <__gethex+0x2e8>)
 800cc06:	4602      	mov	r2, r0
 800cc08:	21de      	movs	r1, #222	; 0xde
 800cc0a:	485d      	ldr	r0, [pc, #372]	; (800cd80 <__gethex+0x2ec>)
 800cc0c:	f001 fde4 	bl	800e7d8 <__assert_func>
 800cc10:	3101      	adds	r1, #1
 800cc12:	105b      	asrs	r3, r3, #1
 800cc14:	e7ee      	b.n	800cbf4 <__gethex+0x160>
 800cc16:	f100 0914 	add.w	r9, r0, #20
 800cc1a:	f04f 0b00 	mov.w	fp, #0
 800cc1e:	f1ca 0301 	rsb	r3, sl, #1
 800cc22:	f8cd 9008 	str.w	r9, [sp, #8]
 800cc26:	f8cd b000 	str.w	fp, [sp]
 800cc2a:	9306      	str	r3, [sp, #24]
 800cc2c:	42b7      	cmp	r7, r6
 800cc2e:	d340      	bcc.n	800ccb2 <__gethex+0x21e>
 800cc30:	9802      	ldr	r0, [sp, #8]
 800cc32:	9b00      	ldr	r3, [sp, #0]
 800cc34:	f840 3b04 	str.w	r3, [r0], #4
 800cc38:	eba0 0009 	sub.w	r0, r0, r9
 800cc3c:	1080      	asrs	r0, r0, #2
 800cc3e:	0146      	lsls	r6, r0, #5
 800cc40:	6120      	str	r0, [r4, #16]
 800cc42:	4618      	mov	r0, r3
 800cc44:	f000 fb50 	bl	800d2e8 <__hi0bits>
 800cc48:	1a30      	subs	r0, r6, r0
 800cc4a:	f8d8 6000 	ldr.w	r6, [r8]
 800cc4e:	42b0      	cmp	r0, r6
 800cc50:	dd63      	ble.n	800cd1a <__gethex+0x286>
 800cc52:	1b87      	subs	r7, r0, r6
 800cc54:	4639      	mov	r1, r7
 800cc56:	4620      	mov	r0, r4
 800cc58:	f000 fef4 	bl	800da44 <__any_on>
 800cc5c:	4682      	mov	sl, r0
 800cc5e:	b1a8      	cbz	r0, 800cc8c <__gethex+0x1f8>
 800cc60:	1e7b      	subs	r3, r7, #1
 800cc62:	1159      	asrs	r1, r3, #5
 800cc64:	f003 021f 	and.w	r2, r3, #31
 800cc68:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cc6c:	f04f 0a01 	mov.w	sl, #1
 800cc70:	fa0a f202 	lsl.w	r2, sl, r2
 800cc74:	420a      	tst	r2, r1
 800cc76:	d009      	beq.n	800cc8c <__gethex+0x1f8>
 800cc78:	4553      	cmp	r3, sl
 800cc7a:	dd05      	ble.n	800cc88 <__gethex+0x1f4>
 800cc7c:	1eb9      	subs	r1, r7, #2
 800cc7e:	4620      	mov	r0, r4
 800cc80:	f000 fee0 	bl	800da44 <__any_on>
 800cc84:	2800      	cmp	r0, #0
 800cc86:	d145      	bne.n	800cd14 <__gethex+0x280>
 800cc88:	f04f 0a02 	mov.w	sl, #2
 800cc8c:	4639      	mov	r1, r7
 800cc8e:	4620      	mov	r0, r4
 800cc90:	f7ff fe98 	bl	800c9c4 <rshift>
 800cc94:	443d      	add	r5, r7
 800cc96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cc9a:	42ab      	cmp	r3, r5
 800cc9c:	da4c      	bge.n	800cd38 <__gethex+0x2a4>
 800cc9e:	ee18 0a10 	vmov	r0, s16
 800cca2:	4621      	mov	r1, r4
 800cca4:	f000 fa6e 	bl	800d184 <_Bfree>
 800cca8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ccaa:	2300      	movs	r3, #0
 800ccac:	6013      	str	r3, [r2, #0]
 800ccae:	27a3      	movs	r7, #163	; 0xa3
 800ccb0:	e785      	b.n	800cbbe <__gethex+0x12a>
 800ccb2:	1e73      	subs	r3, r6, #1
 800ccb4:	9a05      	ldr	r2, [sp, #20]
 800ccb6:	9303      	str	r3, [sp, #12]
 800ccb8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d019      	beq.n	800ccf4 <__gethex+0x260>
 800ccc0:	f1bb 0f20 	cmp.w	fp, #32
 800ccc4:	d107      	bne.n	800ccd6 <__gethex+0x242>
 800ccc6:	9b02      	ldr	r3, [sp, #8]
 800ccc8:	9a00      	ldr	r2, [sp, #0]
 800ccca:	f843 2b04 	str.w	r2, [r3], #4
 800ccce:	9302      	str	r3, [sp, #8]
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	9300      	str	r3, [sp, #0]
 800ccd4:	469b      	mov	fp, r3
 800ccd6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ccda:	f7ff fec5 	bl	800ca68 <__hexdig_fun>
 800ccde:	9b00      	ldr	r3, [sp, #0]
 800cce0:	f000 000f 	and.w	r0, r0, #15
 800cce4:	fa00 f00b 	lsl.w	r0, r0, fp
 800cce8:	4303      	orrs	r3, r0
 800ccea:	9300      	str	r3, [sp, #0]
 800ccec:	f10b 0b04 	add.w	fp, fp, #4
 800ccf0:	9b03      	ldr	r3, [sp, #12]
 800ccf2:	e00d      	b.n	800cd10 <__gethex+0x27c>
 800ccf4:	9b03      	ldr	r3, [sp, #12]
 800ccf6:	9a06      	ldr	r2, [sp, #24]
 800ccf8:	4413      	add	r3, r2
 800ccfa:	42bb      	cmp	r3, r7
 800ccfc:	d3e0      	bcc.n	800ccc0 <__gethex+0x22c>
 800ccfe:	4618      	mov	r0, r3
 800cd00:	9901      	ldr	r1, [sp, #4]
 800cd02:	9307      	str	r3, [sp, #28]
 800cd04:	4652      	mov	r2, sl
 800cd06:	f001 fc97 	bl	800e638 <strncmp>
 800cd0a:	9b07      	ldr	r3, [sp, #28]
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	d1d7      	bne.n	800ccc0 <__gethex+0x22c>
 800cd10:	461e      	mov	r6, r3
 800cd12:	e78b      	b.n	800cc2c <__gethex+0x198>
 800cd14:	f04f 0a03 	mov.w	sl, #3
 800cd18:	e7b8      	b.n	800cc8c <__gethex+0x1f8>
 800cd1a:	da0a      	bge.n	800cd32 <__gethex+0x29e>
 800cd1c:	1a37      	subs	r7, r6, r0
 800cd1e:	4621      	mov	r1, r4
 800cd20:	ee18 0a10 	vmov	r0, s16
 800cd24:	463a      	mov	r2, r7
 800cd26:	f000 fc49 	bl	800d5bc <__lshift>
 800cd2a:	1bed      	subs	r5, r5, r7
 800cd2c:	4604      	mov	r4, r0
 800cd2e:	f100 0914 	add.w	r9, r0, #20
 800cd32:	f04f 0a00 	mov.w	sl, #0
 800cd36:	e7ae      	b.n	800cc96 <__gethex+0x202>
 800cd38:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cd3c:	42a8      	cmp	r0, r5
 800cd3e:	dd72      	ble.n	800ce26 <__gethex+0x392>
 800cd40:	1b45      	subs	r5, r0, r5
 800cd42:	42ae      	cmp	r6, r5
 800cd44:	dc36      	bgt.n	800cdb4 <__gethex+0x320>
 800cd46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd4a:	2b02      	cmp	r3, #2
 800cd4c:	d02a      	beq.n	800cda4 <__gethex+0x310>
 800cd4e:	2b03      	cmp	r3, #3
 800cd50:	d02c      	beq.n	800cdac <__gethex+0x318>
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d11c      	bne.n	800cd90 <__gethex+0x2fc>
 800cd56:	42ae      	cmp	r6, r5
 800cd58:	d11a      	bne.n	800cd90 <__gethex+0x2fc>
 800cd5a:	2e01      	cmp	r6, #1
 800cd5c:	d112      	bne.n	800cd84 <__gethex+0x2f0>
 800cd5e:	9a04      	ldr	r2, [sp, #16]
 800cd60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cd64:	6013      	str	r3, [r2, #0]
 800cd66:	2301      	movs	r3, #1
 800cd68:	6123      	str	r3, [r4, #16]
 800cd6a:	f8c9 3000 	str.w	r3, [r9]
 800cd6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cd70:	2762      	movs	r7, #98	; 0x62
 800cd72:	601c      	str	r4, [r3, #0]
 800cd74:	e723      	b.n	800cbbe <__gethex+0x12a>
 800cd76:	bf00      	nop
 800cd78:	08011f40 	.word	0x08011f40
 800cd7c:	08011ec8 	.word	0x08011ec8
 800cd80:	08011ed9 	.word	0x08011ed9
 800cd84:	1e71      	subs	r1, r6, #1
 800cd86:	4620      	mov	r0, r4
 800cd88:	f000 fe5c 	bl	800da44 <__any_on>
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	d1e6      	bne.n	800cd5e <__gethex+0x2ca>
 800cd90:	ee18 0a10 	vmov	r0, s16
 800cd94:	4621      	mov	r1, r4
 800cd96:	f000 f9f5 	bl	800d184 <_Bfree>
 800cd9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	6013      	str	r3, [r2, #0]
 800cda0:	2750      	movs	r7, #80	; 0x50
 800cda2:	e70c      	b.n	800cbbe <__gethex+0x12a>
 800cda4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d1f2      	bne.n	800cd90 <__gethex+0x2fc>
 800cdaa:	e7d8      	b.n	800cd5e <__gethex+0x2ca>
 800cdac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d1d5      	bne.n	800cd5e <__gethex+0x2ca>
 800cdb2:	e7ed      	b.n	800cd90 <__gethex+0x2fc>
 800cdb4:	1e6f      	subs	r7, r5, #1
 800cdb6:	f1ba 0f00 	cmp.w	sl, #0
 800cdba:	d131      	bne.n	800ce20 <__gethex+0x38c>
 800cdbc:	b127      	cbz	r7, 800cdc8 <__gethex+0x334>
 800cdbe:	4639      	mov	r1, r7
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	f000 fe3f 	bl	800da44 <__any_on>
 800cdc6:	4682      	mov	sl, r0
 800cdc8:	117b      	asrs	r3, r7, #5
 800cdca:	2101      	movs	r1, #1
 800cdcc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cdd0:	f007 071f 	and.w	r7, r7, #31
 800cdd4:	fa01 f707 	lsl.w	r7, r1, r7
 800cdd8:	421f      	tst	r7, r3
 800cdda:	4629      	mov	r1, r5
 800cddc:	4620      	mov	r0, r4
 800cdde:	bf18      	it	ne
 800cde0:	f04a 0a02 	orrne.w	sl, sl, #2
 800cde4:	1b76      	subs	r6, r6, r5
 800cde6:	f7ff fded 	bl	800c9c4 <rshift>
 800cdea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cdee:	2702      	movs	r7, #2
 800cdf0:	f1ba 0f00 	cmp.w	sl, #0
 800cdf4:	d048      	beq.n	800ce88 <__gethex+0x3f4>
 800cdf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	d015      	beq.n	800ce2a <__gethex+0x396>
 800cdfe:	2b03      	cmp	r3, #3
 800ce00:	d017      	beq.n	800ce32 <__gethex+0x39e>
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d109      	bne.n	800ce1a <__gethex+0x386>
 800ce06:	f01a 0f02 	tst.w	sl, #2
 800ce0a:	d006      	beq.n	800ce1a <__gethex+0x386>
 800ce0c:	f8d9 0000 	ldr.w	r0, [r9]
 800ce10:	ea4a 0a00 	orr.w	sl, sl, r0
 800ce14:	f01a 0f01 	tst.w	sl, #1
 800ce18:	d10e      	bne.n	800ce38 <__gethex+0x3a4>
 800ce1a:	f047 0710 	orr.w	r7, r7, #16
 800ce1e:	e033      	b.n	800ce88 <__gethex+0x3f4>
 800ce20:	f04f 0a01 	mov.w	sl, #1
 800ce24:	e7d0      	b.n	800cdc8 <__gethex+0x334>
 800ce26:	2701      	movs	r7, #1
 800ce28:	e7e2      	b.n	800cdf0 <__gethex+0x35c>
 800ce2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce2c:	f1c3 0301 	rsb	r3, r3, #1
 800ce30:	9315      	str	r3, [sp, #84]	; 0x54
 800ce32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d0f0      	beq.n	800ce1a <__gethex+0x386>
 800ce38:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ce3c:	f104 0314 	add.w	r3, r4, #20
 800ce40:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ce44:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ce48:	f04f 0c00 	mov.w	ip, #0
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce52:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ce56:	d01c      	beq.n	800ce92 <__gethex+0x3fe>
 800ce58:	3201      	adds	r2, #1
 800ce5a:	6002      	str	r2, [r0, #0]
 800ce5c:	2f02      	cmp	r7, #2
 800ce5e:	f104 0314 	add.w	r3, r4, #20
 800ce62:	d13f      	bne.n	800cee4 <__gethex+0x450>
 800ce64:	f8d8 2000 	ldr.w	r2, [r8]
 800ce68:	3a01      	subs	r2, #1
 800ce6a:	42b2      	cmp	r2, r6
 800ce6c:	d10a      	bne.n	800ce84 <__gethex+0x3f0>
 800ce6e:	1171      	asrs	r1, r6, #5
 800ce70:	2201      	movs	r2, #1
 800ce72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ce76:	f006 061f 	and.w	r6, r6, #31
 800ce7a:	fa02 f606 	lsl.w	r6, r2, r6
 800ce7e:	421e      	tst	r6, r3
 800ce80:	bf18      	it	ne
 800ce82:	4617      	movne	r7, r2
 800ce84:	f047 0720 	orr.w	r7, r7, #32
 800ce88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce8a:	601c      	str	r4, [r3, #0]
 800ce8c:	9b04      	ldr	r3, [sp, #16]
 800ce8e:	601d      	str	r5, [r3, #0]
 800ce90:	e695      	b.n	800cbbe <__gethex+0x12a>
 800ce92:	4299      	cmp	r1, r3
 800ce94:	f843 cc04 	str.w	ip, [r3, #-4]
 800ce98:	d8d8      	bhi.n	800ce4c <__gethex+0x3b8>
 800ce9a:	68a3      	ldr	r3, [r4, #8]
 800ce9c:	459b      	cmp	fp, r3
 800ce9e:	db19      	blt.n	800ced4 <__gethex+0x440>
 800cea0:	6861      	ldr	r1, [r4, #4]
 800cea2:	ee18 0a10 	vmov	r0, s16
 800cea6:	3101      	adds	r1, #1
 800cea8:	f000 f92c 	bl	800d104 <_Balloc>
 800ceac:	4681      	mov	r9, r0
 800ceae:	b918      	cbnz	r0, 800ceb8 <__gethex+0x424>
 800ceb0:	4b1a      	ldr	r3, [pc, #104]	; (800cf1c <__gethex+0x488>)
 800ceb2:	4602      	mov	r2, r0
 800ceb4:	2184      	movs	r1, #132	; 0x84
 800ceb6:	e6a8      	b.n	800cc0a <__gethex+0x176>
 800ceb8:	6922      	ldr	r2, [r4, #16]
 800ceba:	3202      	adds	r2, #2
 800cebc:	f104 010c 	add.w	r1, r4, #12
 800cec0:	0092      	lsls	r2, r2, #2
 800cec2:	300c      	adds	r0, #12
 800cec4:	f7fd f90c 	bl	800a0e0 <memcpy>
 800cec8:	4621      	mov	r1, r4
 800ceca:	ee18 0a10 	vmov	r0, s16
 800cece:	f000 f959 	bl	800d184 <_Bfree>
 800ced2:	464c      	mov	r4, r9
 800ced4:	6923      	ldr	r3, [r4, #16]
 800ced6:	1c5a      	adds	r2, r3, #1
 800ced8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cedc:	6122      	str	r2, [r4, #16]
 800cede:	2201      	movs	r2, #1
 800cee0:	615a      	str	r2, [r3, #20]
 800cee2:	e7bb      	b.n	800ce5c <__gethex+0x3c8>
 800cee4:	6922      	ldr	r2, [r4, #16]
 800cee6:	455a      	cmp	r2, fp
 800cee8:	dd0b      	ble.n	800cf02 <__gethex+0x46e>
 800ceea:	2101      	movs	r1, #1
 800ceec:	4620      	mov	r0, r4
 800ceee:	f7ff fd69 	bl	800c9c4 <rshift>
 800cef2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cef6:	3501      	adds	r5, #1
 800cef8:	42ab      	cmp	r3, r5
 800cefa:	f6ff aed0 	blt.w	800cc9e <__gethex+0x20a>
 800cefe:	2701      	movs	r7, #1
 800cf00:	e7c0      	b.n	800ce84 <__gethex+0x3f0>
 800cf02:	f016 061f 	ands.w	r6, r6, #31
 800cf06:	d0fa      	beq.n	800cefe <__gethex+0x46a>
 800cf08:	4453      	add	r3, sl
 800cf0a:	f1c6 0620 	rsb	r6, r6, #32
 800cf0e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cf12:	f000 f9e9 	bl	800d2e8 <__hi0bits>
 800cf16:	42b0      	cmp	r0, r6
 800cf18:	dbe7      	blt.n	800ceea <__gethex+0x456>
 800cf1a:	e7f0      	b.n	800cefe <__gethex+0x46a>
 800cf1c:	08011ec8 	.word	0x08011ec8

0800cf20 <L_shift>:
 800cf20:	f1c2 0208 	rsb	r2, r2, #8
 800cf24:	0092      	lsls	r2, r2, #2
 800cf26:	b570      	push	{r4, r5, r6, lr}
 800cf28:	f1c2 0620 	rsb	r6, r2, #32
 800cf2c:	6843      	ldr	r3, [r0, #4]
 800cf2e:	6804      	ldr	r4, [r0, #0]
 800cf30:	fa03 f506 	lsl.w	r5, r3, r6
 800cf34:	432c      	orrs	r4, r5
 800cf36:	40d3      	lsrs	r3, r2
 800cf38:	6004      	str	r4, [r0, #0]
 800cf3a:	f840 3f04 	str.w	r3, [r0, #4]!
 800cf3e:	4288      	cmp	r0, r1
 800cf40:	d3f4      	bcc.n	800cf2c <L_shift+0xc>
 800cf42:	bd70      	pop	{r4, r5, r6, pc}

0800cf44 <__match>:
 800cf44:	b530      	push	{r4, r5, lr}
 800cf46:	6803      	ldr	r3, [r0, #0]
 800cf48:	3301      	adds	r3, #1
 800cf4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf4e:	b914      	cbnz	r4, 800cf56 <__match+0x12>
 800cf50:	6003      	str	r3, [r0, #0]
 800cf52:	2001      	movs	r0, #1
 800cf54:	bd30      	pop	{r4, r5, pc}
 800cf56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf5a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cf5e:	2d19      	cmp	r5, #25
 800cf60:	bf98      	it	ls
 800cf62:	3220      	addls	r2, #32
 800cf64:	42a2      	cmp	r2, r4
 800cf66:	d0f0      	beq.n	800cf4a <__match+0x6>
 800cf68:	2000      	movs	r0, #0
 800cf6a:	e7f3      	b.n	800cf54 <__match+0x10>

0800cf6c <__hexnan>:
 800cf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf70:	680b      	ldr	r3, [r1, #0]
 800cf72:	115e      	asrs	r6, r3, #5
 800cf74:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cf78:	f013 031f 	ands.w	r3, r3, #31
 800cf7c:	b087      	sub	sp, #28
 800cf7e:	bf18      	it	ne
 800cf80:	3604      	addne	r6, #4
 800cf82:	2500      	movs	r5, #0
 800cf84:	1f37      	subs	r7, r6, #4
 800cf86:	4690      	mov	r8, r2
 800cf88:	6802      	ldr	r2, [r0, #0]
 800cf8a:	9301      	str	r3, [sp, #4]
 800cf8c:	4682      	mov	sl, r0
 800cf8e:	f846 5c04 	str.w	r5, [r6, #-4]
 800cf92:	46b9      	mov	r9, r7
 800cf94:	463c      	mov	r4, r7
 800cf96:	9502      	str	r5, [sp, #8]
 800cf98:	46ab      	mov	fp, r5
 800cf9a:	7851      	ldrb	r1, [r2, #1]
 800cf9c:	1c53      	adds	r3, r2, #1
 800cf9e:	9303      	str	r3, [sp, #12]
 800cfa0:	b341      	cbz	r1, 800cff4 <__hexnan+0x88>
 800cfa2:	4608      	mov	r0, r1
 800cfa4:	9205      	str	r2, [sp, #20]
 800cfa6:	9104      	str	r1, [sp, #16]
 800cfa8:	f7ff fd5e 	bl	800ca68 <__hexdig_fun>
 800cfac:	2800      	cmp	r0, #0
 800cfae:	d14f      	bne.n	800d050 <__hexnan+0xe4>
 800cfb0:	9904      	ldr	r1, [sp, #16]
 800cfb2:	9a05      	ldr	r2, [sp, #20]
 800cfb4:	2920      	cmp	r1, #32
 800cfb6:	d818      	bhi.n	800cfea <__hexnan+0x7e>
 800cfb8:	9b02      	ldr	r3, [sp, #8]
 800cfba:	459b      	cmp	fp, r3
 800cfbc:	dd13      	ble.n	800cfe6 <__hexnan+0x7a>
 800cfbe:	454c      	cmp	r4, r9
 800cfc0:	d206      	bcs.n	800cfd0 <__hexnan+0x64>
 800cfc2:	2d07      	cmp	r5, #7
 800cfc4:	dc04      	bgt.n	800cfd0 <__hexnan+0x64>
 800cfc6:	462a      	mov	r2, r5
 800cfc8:	4649      	mov	r1, r9
 800cfca:	4620      	mov	r0, r4
 800cfcc:	f7ff ffa8 	bl	800cf20 <L_shift>
 800cfd0:	4544      	cmp	r4, r8
 800cfd2:	d950      	bls.n	800d076 <__hexnan+0x10a>
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	f1a4 0904 	sub.w	r9, r4, #4
 800cfda:	f844 3c04 	str.w	r3, [r4, #-4]
 800cfde:	f8cd b008 	str.w	fp, [sp, #8]
 800cfe2:	464c      	mov	r4, r9
 800cfe4:	461d      	mov	r5, r3
 800cfe6:	9a03      	ldr	r2, [sp, #12]
 800cfe8:	e7d7      	b.n	800cf9a <__hexnan+0x2e>
 800cfea:	2929      	cmp	r1, #41	; 0x29
 800cfec:	d156      	bne.n	800d09c <__hexnan+0x130>
 800cfee:	3202      	adds	r2, #2
 800cff0:	f8ca 2000 	str.w	r2, [sl]
 800cff4:	f1bb 0f00 	cmp.w	fp, #0
 800cff8:	d050      	beq.n	800d09c <__hexnan+0x130>
 800cffa:	454c      	cmp	r4, r9
 800cffc:	d206      	bcs.n	800d00c <__hexnan+0xa0>
 800cffe:	2d07      	cmp	r5, #7
 800d000:	dc04      	bgt.n	800d00c <__hexnan+0xa0>
 800d002:	462a      	mov	r2, r5
 800d004:	4649      	mov	r1, r9
 800d006:	4620      	mov	r0, r4
 800d008:	f7ff ff8a 	bl	800cf20 <L_shift>
 800d00c:	4544      	cmp	r4, r8
 800d00e:	d934      	bls.n	800d07a <__hexnan+0x10e>
 800d010:	f1a8 0204 	sub.w	r2, r8, #4
 800d014:	4623      	mov	r3, r4
 800d016:	f853 1b04 	ldr.w	r1, [r3], #4
 800d01a:	f842 1f04 	str.w	r1, [r2, #4]!
 800d01e:	429f      	cmp	r7, r3
 800d020:	d2f9      	bcs.n	800d016 <__hexnan+0xaa>
 800d022:	1b3b      	subs	r3, r7, r4
 800d024:	f023 0303 	bic.w	r3, r3, #3
 800d028:	3304      	adds	r3, #4
 800d02a:	3401      	adds	r4, #1
 800d02c:	3e03      	subs	r6, #3
 800d02e:	42b4      	cmp	r4, r6
 800d030:	bf88      	it	hi
 800d032:	2304      	movhi	r3, #4
 800d034:	4443      	add	r3, r8
 800d036:	2200      	movs	r2, #0
 800d038:	f843 2b04 	str.w	r2, [r3], #4
 800d03c:	429f      	cmp	r7, r3
 800d03e:	d2fb      	bcs.n	800d038 <__hexnan+0xcc>
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	b91b      	cbnz	r3, 800d04c <__hexnan+0xe0>
 800d044:	4547      	cmp	r7, r8
 800d046:	d127      	bne.n	800d098 <__hexnan+0x12c>
 800d048:	2301      	movs	r3, #1
 800d04a:	603b      	str	r3, [r7, #0]
 800d04c:	2005      	movs	r0, #5
 800d04e:	e026      	b.n	800d09e <__hexnan+0x132>
 800d050:	3501      	adds	r5, #1
 800d052:	2d08      	cmp	r5, #8
 800d054:	f10b 0b01 	add.w	fp, fp, #1
 800d058:	dd06      	ble.n	800d068 <__hexnan+0xfc>
 800d05a:	4544      	cmp	r4, r8
 800d05c:	d9c3      	bls.n	800cfe6 <__hexnan+0x7a>
 800d05e:	2300      	movs	r3, #0
 800d060:	f844 3c04 	str.w	r3, [r4, #-4]
 800d064:	2501      	movs	r5, #1
 800d066:	3c04      	subs	r4, #4
 800d068:	6822      	ldr	r2, [r4, #0]
 800d06a:	f000 000f 	and.w	r0, r0, #15
 800d06e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d072:	6022      	str	r2, [r4, #0]
 800d074:	e7b7      	b.n	800cfe6 <__hexnan+0x7a>
 800d076:	2508      	movs	r5, #8
 800d078:	e7b5      	b.n	800cfe6 <__hexnan+0x7a>
 800d07a:	9b01      	ldr	r3, [sp, #4]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d0df      	beq.n	800d040 <__hexnan+0xd4>
 800d080:	f04f 32ff 	mov.w	r2, #4294967295
 800d084:	f1c3 0320 	rsb	r3, r3, #32
 800d088:	fa22 f303 	lsr.w	r3, r2, r3
 800d08c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d090:	401a      	ands	r2, r3
 800d092:	f846 2c04 	str.w	r2, [r6, #-4]
 800d096:	e7d3      	b.n	800d040 <__hexnan+0xd4>
 800d098:	3f04      	subs	r7, #4
 800d09a:	e7d1      	b.n	800d040 <__hexnan+0xd4>
 800d09c:	2004      	movs	r0, #4
 800d09e:	b007      	add	sp, #28
 800d0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d0a4 <_localeconv_r>:
 800d0a4:	4800      	ldr	r0, [pc, #0]	; (800d0a8 <_localeconv_r+0x4>)
 800d0a6:	4770      	bx	lr
 800d0a8:	20000178 	.word	0x20000178

0800d0ac <_lseek_r>:
 800d0ac:	b538      	push	{r3, r4, r5, lr}
 800d0ae:	4d07      	ldr	r5, [pc, #28]	; (800d0cc <_lseek_r+0x20>)
 800d0b0:	4604      	mov	r4, r0
 800d0b2:	4608      	mov	r0, r1
 800d0b4:	4611      	mov	r1, r2
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	602a      	str	r2, [r5, #0]
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	f7f7 f86a 	bl	8004194 <_lseek>
 800d0c0:	1c43      	adds	r3, r0, #1
 800d0c2:	d102      	bne.n	800d0ca <_lseek_r+0x1e>
 800d0c4:	682b      	ldr	r3, [r5, #0]
 800d0c6:	b103      	cbz	r3, 800d0ca <_lseek_r+0x1e>
 800d0c8:	6023      	str	r3, [r4, #0]
 800d0ca:	bd38      	pop	{r3, r4, r5, pc}
 800d0cc:	20013ef8 	.word	0x20013ef8

0800d0d0 <malloc>:
 800d0d0:	4b02      	ldr	r3, [pc, #8]	; (800d0dc <malloc+0xc>)
 800d0d2:	4601      	mov	r1, r0
 800d0d4:	6818      	ldr	r0, [r3, #0]
 800d0d6:	f000 bd59 	b.w	800db8c <_malloc_r>
 800d0da:	bf00      	nop
 800d0dc:	20000020 	.word	0x20000020

0800d0e0 <__ascii_mbtowc>:
 800d0e0:	b082      	sub	sp, #8
 800d0e2:	b901      	cbnz	r1, 800d0e6 <__ascii_mbtowc+0x6>
 800d0e4:	a901      	add	r1, sp, #4
 800d0e6:	b142      	cbz	r2, 800d0fa <__ascii_mbtowc+0x1a>
 800d0e8:	b14b      	cbz	r3, 800d0fe <__ascii_mbtowc+0x1e>
 800d0ea:	7813      	ldrb	r3, [r2, #0]
 800d0ec:	600b      	str	r3, [r1, #0]
 800d0ee:	7812      	ldrb	r2, [r2, #0]
 800d0f0:	1e10      	subs	r0, r2, #0
 800d0f2:	bf18      	it	ne
 800d0f4:	2001      	movne	r0, #1
 800d0f6:	b002      	add	sp, #8
 800d0f8:	4770      	bx	lr
 800d0fa:	4610      	mov	r0, r2
 800d0fc:	e7fb      	b.n	800d0f6 <__ascii_mbtowc+0x16>
 800d0fe:	f06f 0001 	mvn.w	r0, #1
 800d102:	e7f8      	b.n	800d0f6 <__ascii_mbtowc+0x16>

0800d104 <_Balloc>:
 800d104:	b570      	push	{r4, r5, r6, lr}
 800d106:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d108:	4604      	mov	r4, r0
 800d10a:	460d      	mov	r5, r1
 800d10c:	b976      	cbnz	r6, 800d12c <_Balloc+0x28>
 800d10e:	2010      	movs	r0, #16
 800d110:	f7ff ffde 	bl	800d0d0 <malloc>
 800d114:	4602      	mov	r2, r0
 800d116:	6260      	str	r0, [r4, #36]	; 0x24
 800d118:	b920      	cbnz	r0, 800d124 <_Balloc+0x20>
 800d11a:	4b18      	ldr	r3, [pc, #96]	; (800d17c <_Balloc+0x78>)
 800d11c:	4818      	ldr	r0, [pc, #96]	; (800d180 <_Balloc+0x7c>)
 800d11e:	2166      	movs	r1, #102	; 0x66
 800d120:	f001 fb5a 	bl	800e7d8 <__assert_func>
 800d124:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d128:	6006      	str	r6, [r0, #0]
 800d12a:	60c6      	str	r6, [r0, #12]
 800d12c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d12e:	68f3      	ldr	r3, [r6, #12]
 800d130:	b183      	cbz	r3, 800d154 <_Balloc+0x50>
 800d132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d134:	68db      	ldr	r3, [r3, #12]
 800d136:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d13a:	b9b8      	cbnz	r0, 800d16c <_Balloc+0x68>
 800d13c:	2101      	movs	r1, #1
 800d13e:	fa01 f605 	lsl.w	r6, r1, r5
 800d142:	1d72      	adds	r2, r6, #5
 800d144:	0092      	lsls	r2, r2, #2
 800d146:	4620      	mov	r0, r4
 800d148:	f000 fc9d 	bl	800da86 <_calloc_r>
 800d14c:	b160      	cbz	r0, 800d168 <_Balloc+0x64>
 800d14e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d152:	e00e      	b.n	800d172 <_Balloc+0x6e>
 800d154:	2221      	movs	r2, #33	; 0x21
 800d156:	2104      	movs	r1, #4
 800d158:	4620      	mov	r0, r4
 800d15a:	f000 fc94 	bl	800da86 <_calloc_r>
 800d15e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d160:	60f0      	str	r0, [r6, #12]
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d1e4      	bne.n	800d132 <_Balloc+0x2e>
 800d168:	2000      	movs	r0, #0
 800d16a:	bd70      	pop	{r4, r5, r6, pc}
 800d16c:	6802      	ldr	r2, [r0, #0]
 800d16e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d172:	2300      	movs	r3, #0
 800d174:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d178:	e7f7      	b.n	800d16a <_Balloc+0x66>
 800d17a:	bf00      	nop
 800d17c:	08011e56 	.word	0x08011e56
 800d180:	08011f54 	.word	0x08011f54

0800d184 <_Bfree>:
 800d184:	b570      	push	{r4, r5, r6, lr}
 800d186:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d188:	4605      	mov	r5, r0
 800d18a:	460c      	mov	r4, r1
 800d18c:	b976      	cbnz	r6, 800d1ac <_Bfree+0x28>
 800d18e:	2010      	movs	r0, #16
 800d190:	f7ff ff9e 	bl	800d0d0 <malloc>
 800d194:	4602      	mov	r2, r0
 800d196:	6268      	str	r0, [r5, #36]	; 0x24
 800d198:	b920      	cbnz	r0, 800d1a4 <_Bfree+0x20>
 800d19a:	4b09      	ldr	r3, [pc, #36]	; (800d1c0 <_Bfree+0x3c>)
 800d19c:	4809      	ldr	r0, [pc, #36]	; (800d1c4 <_Bfree+0x40>)
 800d19e:	218a      	movs	r1, #138	; 0x8a
 800d1a0:	f001 fb1a 	bl	800e7d8 <__assert_func>
 800d1a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1a8:	6006      	str	r6, [r0, #0]
 800d1aa:	60c6      	str	r6, [r0, #12]
 800d1ac:	b13c      	cbz	r4, 800d1be <_Bfree+0x3a>
 800d1ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d1b0:	6862      	ldr	r2, [r4, #4]
 800d1b2:	68db      	ldr	r3, [r3, #12]
 800d1b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d1b8:	6021      	str	r1, [r4, #0]
 800d1ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d1be:	bd70      	pop	{r4, r5, r6, pc}
 800d1c0:	08011e56 	.word	0x08011e56
 800d1c4:	08011f54 	.word	0x08011f54

0800d1c8 <__multadd>:
 800d1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1cc:	690d      	ldr	r5, [r1, #16]
 800d1ce:	4607      	mov	r7, r0
 800d1d0:	460c      	mov	r4, r1
 800d1d2:	461e      	mov	r6, r3
 800d1d4:	f101 0c14 	add.w	ip, r1, #20
 800d1d8:	2000      	movs	r0, #0
 800d1da:	f8dc 3000 	ldr.w	r3, [ip]
 800d1de:	b299      	uxth	r1, r3
 800d1e0:	fb02 6101 	mla	r1, r2, r1, r6
 800d1e4:	0c1e      	lsrs	r6, r3, #16
 800d1e6:	0c0b      	lsrs	r3, r1, #16
 800d1e8:	fb02 3306 	mla	r3, r2, r6, r3
 800d1ec:	b289      	uxth	r1, r1
 800d1ee:	3001      	adds	r0, #1
 800d1f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d1f4:	4285      	cmp	r5, r0
 800d1f6:	f84c 1b04 	str.w	r1, [ip], #4
 800d1fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d1fe:	dcec      	bgt.n	800d1da <__multadd+0x12>
 800d200:	b30e      	cbz	r6, 800d246 <__multadd+0x7e>
 800d202:	68a3      	ldr	r3, [r4, #8]
 800d204:	42ab      	cmp	r3, r5
 800d206:	dc19      	bgt.n	800d23c <__multadd+0x74>
 800d208:	6861      	ldr	r1, [r4, #4]
 800d20a:	4638      	mov	r0, r7
 800d20c:	3101      	adds	r1, #1
 800d20e:	f7ff ff79 	bl	800d104 <_Balloc>
 800d212:	4680      	mov	r8, r0
 800d214:	b928      	cbnz	r0, 800d222 <__multadd+0x5a>
 800d216:	4602      	mov	r2, r0
 800d218:	4b0c      	ldr	r3, [pc, #48]	; (800d24c <__multadd+0x84>)
 800d21a:	480d      	ldr	r0, [pc, #52]	; (800d250 <__multadd+0x88>)
 800d21c:	21b5      	movs	r1, #181	; 0xb5
 800d21e:	f001 fadb 	bl	800e7d8 <__assert_func>
 800d222:	6922      	ldr	r2, [r4, #16]
 800d224:	3202      	adds	r2, #2
 800d226:	f104 010c 	add.w	r1, r4, #12
 800d22a:	0092      	lsls	r2, r2, #2
 800d22c:	300c      	adds	r0, #12
 800d22e:	f7fc ff57 	bl	800a0e0 <memcpy>
 800d232:	4621      	mov	r1, r4
 800d234:	4638      	mov	r0, r7
 800d236:	f7ff ffa5 	bl	800d184 <_Bfree>
 800d23a:	4644      	mov	r4, r8
 800d23c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d240:	3501      	adds	r5, #1
 800d242:	615e      	str	r6, [r3, #20]
 800d244:	6125      	str	r5, [r4, #16]
 800d246:	4620      	mov	r0, r4
 800d248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d24c:	08011ec8 	.word	0x08011ec8
 800d250:	08011f54 	.word	0x08011f54

0800d254 <__s2b>:
 800d254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d258:	460c      	mov	r4, r1
 800d25a:	4615      	mov	r5, r2
 800d25c:	461f      	mov	r7, r3
 800d25e:	2209      	movs	r2, #9
 800d260:	3308      	adds	r3, #8
 800d262:	4606      	mov	r6, r0
 800d264:	fb93 f3f2 	sdiv	r3, r3, r2
 800d268:	2100      	movs	r1, #0
 800d26a:	2201      	movs	r2, #1
 800d26c:	429a      	cmp	r2, r3
 800d26e:	db09      	blt.n	800d284 <__s2b+0x30>
 800d270:	4630      	mov	r0, r6
 800d272:	f7ff ff47 	bl	800d104 <_Balloc>
 800d276:	b940      	cbnz	r0, 800d28a <__s2b+0x36>
 800d278:	4602      	mov	r2, r0
 800d27a:	4b19      	ldr	r3, [pc, #100]	; (800d2e0 <__s2b+0x8c>)
 800d27c:	4819      	ldr	r0, [pc, #100]	; (800d2e4 <__s2b+0x90>)
 800d27e:	21ce      	movs	r1, #206	; 0xce
 800d280:	f001 faaa 	bl	800e7d8 <__assert_func>
 800d284:	0052      	lsls	r2, r2, #1
 800d286:	3101      	adds	r1, #1
 800d288:	e7f0      	b.n	800d26c <__s2b+0x18>
 800d28a:	9b08      	ldr	r3, [sp, #32]
 800d28c:	6143      	str	r3, [r0, #20]
 800d28e:	2d09      	cmp	r5, #9
 800d290:	f04f 0301 	mov.w	r3, #1
 800d294:	6103      	str	r3, [r0, #16]
 800d296:	dd16      	ble.n	800d2c6 <__s2b+0x72>
 800d298:	f104 0909 	add.w	r9, r4, #9
 800d29c:	46c8      	mov	r8, r9
 800d29e:	442c      	add	r4, r5
 800d2a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d2a4:	4601      	mov	r1, r0
 800d2a6:	3b30      	subs	r3, #48	; 0x30
 800d2a8:	220a      	movs	r2, #10
 800d2aa:	4630      	mov	r0, r6
 800d2ac:	f7ff ff8c 	bl	800d1c8 <__multadd>
 800d2b0:	45a0      	cmp	r8, r4
 800d2b2:	d1f5      	bne.n	800d2a0 <__s2b+0x4c>
 800d2b4:	f1a5 0408 	sub.w	r4, r5, #8
 800d2b8:	444c      	add	r4, r9
 800d2ba:	1b2d      	subs	r5, r5, r4
 800d2bc:	1963      	adds	r3, r4, r5
 800d2be:	42bb      	cmp	r3, r7
 800d2c0:	db04      	blt.n	800d2cc <__s2b+0x78>
 800d2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2c6:	340a      	adds	r4, #10
 800d2c8:	2509      	movs	r5, #9
 800d2ca:	e7f6      	b.n	800d2ba <__s2b+0x66>
 800d2cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d2d0:	4601      	mov	r1, r0
 800d2d2:	3b30      	subs	r3, #48	; 0x30
 800d2d4:	220a      	movs	r2, #10
 800d2d6:	4630      	mov	r0, r6
 800d2d8:	f7ff ff76 	bl	800d1c8 <__multadd>
 800d2dc:	e7ee      	b.n	800d2bc <__s2b+0x68>
 800d2de:	bf00      	nop
 800d2e0:	08011ec8 	.word	0x08011ec8
 800d2e4:	08011f54 	.word	0x08011f54

0800d2e8 <__hi0bits>:
 800d2e8:	0c03      	lsrs	r3, r0, #16
 800d2ea:	041b      	lsls	r3, r3, #16
 800d2ec:	b9d3      	cbnz	r3, 800d324 <__hi0bits+0x3c>
 800d2ee:	0400      	lsls	r0, r0, #16
 800d2f0:	2310      	movs	r3, #16
 800d2f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d2f6:	bf04      	itt	eq
 800d2f8:	0200      	lsleq	r0, r0, #8
 800d2fa:	3308      	addeq	r3, #8
 800d2fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d300:	bf04      	itt	eq
 800d302:	0100      	lsleq	r0, r0, #4
 800d304:	3304      	addeq	r3, #4
 800d306:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d30a:	bf04      	itt	eq
 800d30c:	0080      	lsleq	r0, r0, #2
 800d30e:	3302      	addeq	r3, #2
 800d310:	2800      	cmp	r0, #0
 800d312:	db05      	blt.n	800d320 <__hi0bits+0x38>
 800d314:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d318:	f103 0301 	add.w	r3, r3, #1
 800d31c:	bf08      	it	eq
 800d31e:	2320      	moveq	r3, #32
 800d320:	4618      	mov	r0, r3
 800d322:	4770      	bx	lr
 800d324:	2300      	movs	r3, #0
 800d326:	e7e4      	b.n	800d2f2 <__hi0bits+0xa>

0800d328 <__lo0bits>:
 800d328:	6803      	ldr	r3, [r0, #0]
 800d32a:	f013 0207 	ands.w	r2, r3, #7
 800d32e:	4601      	mov	r1, r0
 800d330:	d00b      	beq.n	800d34a <__lo0bits+0x22>
 800d332:	07da      	lsls	r2, r3, #31
 800d334:	d423      	bmi.n	800d37e <__lo0bits+0x56>
 800d336:	0798      	lsls	r0, r3, #30
 800d338:	bf49      	itett	mi
 800d33a:	085b      	lsrmi	r3, r3, #1
 800d33c:	089b      	lsrpl	r3, r3, #2
 800d33e:	2001      	movmi	r0, #1
 800d340:	600b      	strmi	r3, [r1, #0]
 800d342:	bf5c      	itt	pl
 800d344:	600b      	strpl	r3, [r1, #0]
 800d346:	2002      	movpl	r0, #2
 800d348:	4770      	bx	lr
 800d34a:	b298      	uxth	r0, r3
 800d34c:	b9a8      	cbnz	r0, 800d37a <__lo0bits+0x52>
 800d34e:	0c1b      	lsrs	r3, r3, #16
 800d350:	2010      	movs	r0, #16
 800d352:	b2da      	uxtb	r2, r3
 800d354:	b90a      	cbnz	r2, 800d35a <__lo0bits+0x32>
 800d356:	3008      	adds	r0, #8
 800d358:	0a1b      	lsrs	r3, r3, #8
 800d35a:	071a      	lsls	r2, r3, #28
 800d35c:	bf04      	itt	eq
 800d35e:	091b      	lsreq	r3, r3, #4
 800d360:	3004      	addeq	r0, #4
 800d362:	079a      	lsls	r2, r3, #30
 800d364:	bf04      	itt	eq
 800d366:	089b      	lsreq	r3, r3, #2
 800d368:	3002      	addeq	r0, #2
 800d36a:	07da      	lsls	r2, r3, #31
 800d36c:	d403      	bmi.n	800d376 <__lo0bits+0x4e>
 800d36e:	085b      	lsrs	r3, r3, #1
 800d370:	f100 0001 	add.w	r0, r0, #1
 800d374:	d005      	beq.n	800d382 <__lo0bits+0x5a>
 800d376:	600b      	str	r3, [r1, #0]
 800d378:	4770      	bx	lr
 800d37a:	4610      	mov	r0, r2
 800d37c:	e7e9      	b.n	800d352 <__lo0bits+0x2a>
 800d37e:	2000      	movs	r0, #0
 800d380:	4770      	bx	lr
 800d382:	2020      	movs	r0, #32
 800d384:	4770      	bx	lr
	...

0800d388 <__i2b>:
 800d388:	b510      	push	{r4, lr}
 800d38a:	460c      	mov	r4, r1
 800d38c:	2101      	movs	r1, #1
 800d38e:	f7ff feb9 	bl	800d104 <_Balloc>
 800d392:	4602      	mov	r2, r0
 800d394:	b928      	cbnz	r0, 800d3a2 <__i2b+0x1a>
 800d396:	4b05      	ldr	r3, [pc, #20]	; (800d3ac <__i2b+0x24>)
 800d398:	4805      	ldr	r0, [pc, #20]	; (800d3b0 <__i2b+0x28>)
 800d39a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d39e:	f001 fa1b 	bl	800e7d8 <__assert_func>
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	6144      	str	r4, [r0, #20]
 800d3a6:	6103      	str	r3, [r0, #16]
 800d3a8:	bd10      	pop	{r4, pc}
 800d3aa:	bf00      	nop
 800d3ac:	08011ec8 	.word	0x08011ec8
 800d3b0:	08011f54 	.word	0x08011f54

0800d3b4 <__multiply>:
 800d3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b8:	4691      	mov	r9, r2
 800d3ba:	690a      	ldr	r2, [r1, #16]
 800d3bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	bfb8      	it	lt
 800d3c4:	460b      	movlt	r3, r1
 800d3c6:	460c      	mov	r4, r1
 800d3c8:	bfbc      	itt	lt
 800d3ca:	464c      	movlt	r4, r9
 800d3cc:	4699      	movlt	r9, r3
 800d3ce:	6927      	ldr	r7, [r4, #16]
 800d3d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d3d4:	68a3      	ldr	r3, [r4, #8]
 800d3d6:	6861      	ldr	r1, [r4, #4]
 800d3d8:	eb07 060a 	add.w	r6, r7, sl
 800d3dc:	42b3      	cmp	r3, r6
 800d3de:	b085      	sub	sp, #20
 800d3e0:	bfb8      	it	lt
 800d3e2:	3101      	addlt	r1, #1
 800d3e4:	f7ff fe8e 	bl	800d104 <_Balloc>
 800d3e8:	b930      	cbnz	r0, 800d3f8 <__multiply+0x44>
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	4b44      	ldr	r3, [pc, #272]	; (800d500 <__multiply+0x14c>)
 800d3ee:	4845      	ldr	r0, [pc, #276]	; (800d504 <__multiply+0x150>)
 800d3f0:	f240 115d 	movw	r1, #349	; 0x15d
 800d3f4:	f001 f9f0 	bl	800e7d8 <__assert_func>
 800d3f8:	f100 0514 	add.w	r5, r0, #20
 800d3fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d400:	462b      	mov	r3, r5
 800d402:	2200      	movs	r2, #0
 800d404:	4543      	cmp	r3, r8
 800d406:	d321      	bcc.n	800d44c <__multiply+0x98>
 800d408:	f104 0314 	add.w	r3, r4, #20
 800d40c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d410:	f109 0314 	add.w	r3, r9, #20
 800d414:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d418:	9202      	str	r2, [sp, #8]
 800d41a:	1b3a      	subs	r2, r7, r4
 800d41c:	3a15      	subs	r2, #21
 800d41e:	f022 0203 	bic.w	r2, r2, #3
 800d422:	3204      	adds	r2, #4
 800d424:	f104 0115 	add.w	r1, r4, #21
 800d428:	428f      	cmp	r7, r1
 800d42a:	bf38      	it	cc
 800d42c:	2204      	movcc	r2, #4
 800d42e:	9201      	str	r2, [sp, #4]
 800d430:	9a02      	ldr	r2, [sp, #8]
 800d432:	9303      	str	r3, [sp, #12]
 800d434:	429a      	cmp	r2, r3
 800d436:	d80c      	bhi.n	800d452 <__multiply+0x9e>
 800d438:	2e00      	cmp	r6, #0
 800d43a:	dd03      	ble.n	800d444 <__multiply+0x90>
 800d43c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d440:	2b00      	cmp	r3, #0
 800d442:	d05a      	beq.n	800d4fa <__multiply+0x146>
 800d444:	6106      	str	r6, [r0, #16]
 800d446:	b005      	add	sp, #20
 800d448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d44c:	f843 2b04 	str.w	r2, [r3], #4
 800d450:	e7d8      	b.n	800d404 <__multiply+0x50>
 800d452:	f8b3 a000 	ldrh.w	sl, [r3]
 800d456:	f1ba 0f00 	cmp.w	sl, #0
 800d45a:	d024      	beq.n	800d4a6 <__multiply+0xf2>
 800d45c:	f104 0e14 	add.w	lr, r4, #20
 800d460:	46a9      	mov	r9, r5
 800d462:	f04f 0c00 	mov.w	ip, #0
 800d466:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d46a:	f8d9 1000 	ldr.w	r1, [r9]
 800d46e:	fa1f fb82 	uxth.w	fp, r2
 800d472:	b289      	uxth	r1, r1
 800d474:	fb0a 110b 	mla	r1, sl, fp, r1
 800d478:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d47c:	f8d9 2000 	ldr.w	r2, [r9]
 800d480:	4461      	add	r1, ip
 800d482:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d486:	fb0a c20b 	mla	r2, sl, fp, ip
 800d48a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d48e:	b289      	uxth	r1, r1
 800d490:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d494:	4577      	cmp	r7, lr
 800d496:	f849 1b04 	str.w	r1, [r9], #4
 800d49a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d49e:	d8e2      	bhi.n	800d466 <__multiply+0xb2>
 800d4a0:	9a01      	ldr	r2, [sp, #4]
 800d4a2:	f845 c002 	str.w	ip, [r5, r2]
 800d4a6:	9a03      	ldr	r2, [sp, #12]
 800d4a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d4ac:	3304      	adds	r3, #4
 800d4ae:	f1b9 0f00 	cmp.w	r9, #0
 800d4b2:	d020      	beq.n	800d4f6 <__multiply+0x142>
 800d4b4:	6829      	ldr	r1, [r5, #0]
 800d4b6:	f104 0c14 	add.w	ip, r4, #20
 800d4ba:	46ae      	mov	lr, r5
 800d4bc:	f04f 0a00 	mov.w	sl, #0
 800d4c0:	f8bc b000 	ldrh.w	fp, [ip]
 800d4c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d4c8:	fb09 220b 	mla	r2, r9, fp, r2
 800d4cc:	4492      	add	sl, r2
 800d4ce:	b289      	uxth	r1, r1
 800d4d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d4d4:	f84e 1b04 	str.w	r1, [lr], #4
 800d4d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d4dc:	f8be 1000 	ldrh.w	r1, [lr]
 800d4e0:	0c12      	lsrs	r2, r2, #16
 800d4e2:	fb09 1102 	mla	r1, r9, r2, r1
 800d4e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d4ea:	4567      	cmp	r7, ip
 800d4ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d4f0:	d8e6      	bhi.n	800d4c0 <__multiply+0x10c>
 800d4f2:	9a01      	ldr	r2, [sp, #4]
 800d4f4:	50a9      	str	r1, [r5, r2]
 800d4f6:	3504      	adds	r5, #4
 800d4f8:	e79a      	b.n	800d430 <__multiply+0x7c>
 800d4fa:	3e01      	subs	r6, #1
 800d4fc:	e79c      	b.n	800d438 <__multiply+0x84>
 800d4fe:	bf00      	nop
 800d500:	08011ec8 	.word	0x08011ec8
 800d504:	08011f54 	.word	0x08011f54

0800d508 <__pow5mult>:
 800d508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d50c:	4615      	mov	r5, r2
 800d50e:	f012 0203 	ands.w	r2, r2, #3
 800d512:	4606      	mov	r6, r0
 800d514:	460f      	mov	r7, r1
 800d516:	d007      	beq.n	800d528 <__pow5mult+0x20>
 800d518:	4c25      	ldr	r4, [pc, #148]	; (800d5b0 <__pow5mult+0xa8>)
 800d51a:	3a01      	subs	r2, #1
 800d51c:	2300      	movs	r3, #0
 800d51e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d522:	f7ff fe51 	bl	800d1c8 <__multadd>
 800d526:	4607      	mov	r7, r0
 800d528:	10ad      	asrs	r5, r5, #2
 800d52a:	d03d      	beq.n	800d5a8 <__pow5mult+0xa0>
 800d52c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d52e:	b97c      	cbnz	r4, 800d550 <__pow5mult+0x48>
 800d530:	2010      	movs	r0, #16
 800d532:	f7ff fdcd 	bl	800d0d0 <malloc>
 800d536:	4602      	mov	r2, r0
 800d538:	6270      	str	r0, [r6, #36]	; 0x24
 800d53a:	b928      	cbnz	r0, 800d548 <__pow5mult+0x40>
 800d53c:	4b1d      	ldr	r3, [pc, #116]	; (800d5b4 <__pow5mult+0xac>)
 800d53e:	481e      	ldr	r0, [pc, #120]	; (800d5b8 <__pow5mult+0xb0>)
 800d540:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d544:	f001 f948 	bl	800e7d8 <__assert_func>
 800d548:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d54c:	6004      	str	r4, [r0, #0]
 800d54e:	60c4      	str	r4, [r0, #12]
 800d550:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d554:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d558:	b94c      	cbnz	r4, 800d56e <__pow5mult+0x66>
 800d55a:	f240 2171 	movw	r1, #625	; 0x271
 800d55e:	4630      	mov	r0, r6
 800d560:	f7ff ff12 	bl	800d388 <__i2b>
 800d564:	2300      	movs	r3, #0
 800d566:	f8c8 0008 	str.w	r0, [r8, #8]
 800d56a:	4604      	mov	r4, r0
 800d56c:	6003      	str	r3, [r0, #0]
 800d56e:	f04f 0900 	mov.w	r9, #0
 800d572:	07eb      	lsls	r3, r5, #31
 800d574:	d50a      	bpl.n	800d58c <__pow5mult+0x84>
 800d576:	4639      	mov	r1, r7
 800d578:	4622      	mov	r2, r4
 800d57a:	4630      	mov	r0, r6
 800d57c:	f7ff ff1a 	bl	800d3b4 <__multiply>
 800d580:	4639      	mov	r1, r7
 800d582:	4680      	mov	r8, r0
 800d584:	4630      	mov	r0, r6
 800d586:	f7ff fdfd 	bl	800d184 <_Bfree>
 800d58a:	4647      	mov	r7, r8
 800d58c:	106d      	asrs	r5, r5, #1
 800d58e:	d00b      	beq.n	800d5a8 <__pow5mult+0xa0>
 800d590:	6820      	ldr	r0, [r4, #0]
 800d592:	b938      	cbnz	r0, 800d5a4 <__pow5mult+0x9c>
 800d594:	4622      	mov	r2, r4
 800d596:	4621      	mov	r1, r4
 800d598:	4630      	mov	r0, r6
 800d59a:	f7ff ff0b 	bl	800d3b4 <__multiply>
 800d59e:	6020      	str	r0, [r4, #0]
 800d5a0:	f8c0 9000 	str.w	r9, [r0]
 800d5a4:	4604      	mov	r4, r0
 800d5a6:	e7e4      	b.n	800d572 <__pow5mult+0x6a>
 800d5a8:	4638      	mov	r0, r7
 800d5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5ae:	bf00      	nop
 800d5b0:	080120a0 	.word	0x080120a0
 800d5b4:	08011e56 	.word	0x08011e56
 800d5b8:	08011f54 	.word	0x08011f54

0800d5bc <__lshift>:
 800d5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5c0:	460c      	mov	r4, r1
 800d5c2:	6849      	ldr	r1, [r1, #4]
 800d5c4:	6923      	ldr	r3, [r4, #16]
 800d5c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d5ca:	68a3      	ldr	r3, [r4, #8]
 800d5cc:	4607      	mov	r7, r0
 800d5ce:	4691      	mov	r9, r2
 800d5d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d5d4:	f108 0601 	add.w	r6, r8, #1
 800d5d8:	42b3      	cmp	r3, r6
 800d5da:	db0b      	blt.n	800d5f4 <__lshift+0x38>
 800d5dc:	4638      	mov	r0, r7
 800d5de:	f7ff fd91 	bl	800d104 <_Balloc>
 800d5e2:	4605      	mov	r5, r0
 800d5e4:	b948      	cbnz	r0, 800d5fa <__lshift+0x3e>
 800d5e6:	4602      	mov	r2, r0
 800d5e8:	4b2a      	ldr	r3, [pc, #168]	; (800d694 <__lshift+0xd8>)
 800d5ea:	482b      	ldr	r0, [pc, #172]	; (800d698 <__lshift+0xdc>)
 800d5ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d5f0:	f001 f8f2 	bl	800e7d8 <__assert_func>
 800d5f4:	3101      	adds	r1, #1
 800d5f6:	005b      	lsls	r3, r3, #1
 800d5f8:	e7ee      	b.n	800d5d8 <__lshift+0x1c>
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	f100 0114 	add.w	r1, r0, #20
 800d600:	f100 0210 	add.w	r2, r0, #16
 800d604:	4618      	mov	r0, r3
 800d606:	4553      	cmp	r3, sl
 800d608:	db37      	blt.n	800d67a <__lshift+0xbe>
 800d60a:	6920      	ldr	r0, [r4, #16]
 800d60c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d610:	f104 0314 	add.w	r3, r4, #20
 800d614:	f019 091f 	ands.w	r9, r9, #31
 800d618:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d61c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d620:	d02f      	beq.n	800d682 <__lshift+0xc6>
 800d622:	f1c9 0e20 	rsb	lr, r9, #32
 800d626:	468a      	mov	sl, r1
 800d628:	f04f 0c00 	mov.w	ip, #0
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	fa02 f209 	lsl.w	r2, r2, r9
 800d632:	ea42 020c 	orr.w	r2, r2, ip
 800d636:	f84a 2b04 	str.w	r2, [sl], #4
 800d63a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d63e:	4298      	cmp	r0, r3
 800d640:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d644:	d8f2      	bhi.n	800d62c <__lshift+0x70>
 800d646:	1b03      	subs	r3, r0, r4
 800d648:	3b15      	subs	r3, #21
 800d64a:	f023 0303 	bic.w	r3, r3, #3
 800d64e:	3304      	adds	r3, #4
 800d650:	f104 0215 	add.w	r2, r4, #21
 800d654:	4290      	cmp	r0, r2
 800d656:	bf38      	it	cc
 800d658:	2304      	movcc	r3, #4
 800d65a:	f841 c003 	str.w	ip, [r1, r3]
 800d65e:	f1bc 0f00 	cmp.w	ip, #0
 800d662:	d001      	beq.n	800d668 <__lshift+0xac>
 800d664:	f108 0602 	add.w	r6, r8, #2
 800d668:	3e01      	subs	r6, #1
 800d66a:	4638      	mov	r0, r7
 800d66c:	612e      	str	r6, [r5, #16]
 800d66e:	4621      	mov	r1, r4
 800d670:	f7ff fd88 	bl	800d184 <_Bfree>
 800d674:	4628      	mov	r0, r5
 800d676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d67a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d67e:	3301      	adds	r3, #1
 800d680:	e7c1      	b.n	800d606 <__lshift+0x4a>
 800d682:	3904      	subs	r1, #4
 800d684:	f853 2b04 	ldr.w	r2, [r3], #4
 800d688:	f841 2f04 	str.w	r2, [r1, #4]!
 800d68c:	4298      	cmp	r0, r3
 800d68e:	d8f9      	bhi.n	800d684 <__lshift+0xc8>
 800d690:	e7ea      	b.n	800d668 <__lshift+0xac>
 800d692:	bf00      	nop
 800d694:	08011ec8 	.word	0x08011ec8
 800d698:	08011f54 	.word	0x08011f54

0800d69c <__mcmp>:
 800d69c:	b530      	push	{r4, r5, lr}
 800d69e:	6902      	ldr	r2, [r0, #16]
 800d6a0:	690c      	ldr	r4, [r1, #16]
 800d6a2:	1b12      	subs	r2, r2, r4
 800d6a4:	d10e      	bne.n	800d6c4 <__mcmp+0x28>
 800d6a6:	f100 0314 	add.w	r3, r0, #20
 800d6aa:	3114      	adds	r1, #20
 800d6ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d6b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d6b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d6b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d6bc:	42a5      	cmp	r5, r4
 800d6be:	d003      	beq.n	800d6c8 <__mcmp+0x2c>
 800d6c0:	d305      	bcc.n	800d6ce <__mcmp+0x32>
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	4610      	mov	r0, r2
 800d6c6:	bd30      	pop	{r4, r5, pc}
 800d6c8:	4283      	cmp	r3, r0
 800d6ca:	d3f3      	bcc.n	800d6b4 <__mcmp+0x18>
 800d6cc:	e7fa      	b.n	800d6c4 <__mcmp+0x28>
 800d6ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d6d2:	e7f7      	b.n	800d6c4 <__mcmp+0x28>

0800d6d4 <__mdiff>:
 800d6d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d8:	460c      	mov	r4, r1
 800d6da:	4606      	mov	r6, r0
 800d6dc:	4611      	mov	r1, r2
 800d6de:	4620      	mov	r0, r4
 800d6e0:	4690      	mov	r8, r2
 800d6e2:	f7ff ffdb 	bl	800d69c <__mcmp>
 800d6e6:	1e05      	subs	r5, r0, #0
 800d6e8:	d110      	bne.n	800d70c <__mdiff+0x38>
 800d6ea:	4629      	mov	r1, r5
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	f7ff fd09 	bl	800d104 <_Balloc>
 800d6f2:	b930      	cbnz	r0, 800d702 <__mdiff+0x2e>
 800d6f4:	4b3a      	ldr	r3, [pc, #232]	; (800d7e0 <__mdiff+0x10c>)
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	f240 2132 	movw	r1, #562	; 0x232
 800d6fc:	4839      	ldr	r0, [pc, #228]	; (800d7e4 <__mdiff+0x110>)
 800d6fe:	f001 f86b 	bl	800e7d8 <__assert_func>
 800d702:	2301      	movs	r3, #1
 800d704:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d70c:	bfa4      	itt	ge
 800d70e:	4643      	movge	r3, r8
 800d710:	46a0      	movge	r8, r4
 800d712:	4630      	mov	r0, r6
 800d714:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d718:	bfa6      	itte	ge
 800d71a:	461c      	movge	r4, r3
 800d71c:	2500      	movge	r5, #0
 800d71e:	2501      	movlt	r5, #1
 800d720:	f7ff fcf0 	bl	800d104 <_Balloc>
 800d724:	b920      	cbnz	r0, 800d730 <__mdiff+0x5c>
 800d726:	4b2e      	ldr	r3, [pc, #184]	; (800d7e0 <__mdiff+0x10c>)
 800d728:	4602      	mov	r2, r0
 800d72a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d72e:	e7e5      	b.n	800d6fc <__mdiff+0x28>
 800d730:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d734:	6926      	ldr	r6, [r4, #16]
 800d736:	60c5      	str	r5, [r0, #12]
 800d738:	f104 0914 	add.w	r9, r4, #20
 800d73c:	f108 0514 	add.w	r5, r8, #20
 800d740:	f100 0e14 	add.w	lr, r0, #20
 800d744:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d748:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d74c:	f108 0210 	add.w	r2, r8, #16
 800d750:	46f2      	mov	sl, lr
 800d752:	2100      	movs	r1, #0
 800d754:	f859 3b04 	ldr.w	r3, [r9], #4
 800d758:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d75c:	fa1f f883 	uxth.w	r8, r3
 800d760:	fa11 f18b 	uxtah	r1, r1, fp
 800d764:	0c1b      	lsrs	r3, r3, #16
 800d766:	eba1 0808 	sub.w	r8, r1, r8
 800d76a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d76e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d772:	fa1f f888 	uxth.w	r8, r8
 800d776:	1419      	asrs	r1, r3, #16
 800d778:	454e      	cmp	r6, r9
 800d77a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d77e:	f84a 3b04 	str.w	r3, [sl], #4
 800d782:	d8e7      	bhi.n	800d754 <__mdiff+0x80>
 800d784:	1b33      	subs	r3, r6, r4
 800d786:	3b15      	subs	r3, #21
 800d788:	f023 0303 	bic.w	r3, r3, #3
 800d78c:	3304      	adds	r3, #4
 800d78e:	3415      	adds	r4, #21
 800d790:	42a6      	cmp	r6, r4
 800d792:	bf38      	it	cc
 800d794:	2304      	movcc	r3, #4
 800d796:	441d      	add	r5, r3
 800d798:	4473      	add	r3, lr
 800d79a:	469e      	mov	lr, r3
 800d79c:	462e      	mov	r6, r5
 800d79e:	4566      	cmp	r6, ip
 800d7a0:	d30e      	bcc.n	800d7c0 <__mdiff+0xec>
 800d7a2:	f10c 0203 	add.w	r2, ip, #3
 800d7a6:	1b52      	subs	r2, r2, r5
 800d7a8:	f022 0203 	bic.w	r2, r2, #3
 800d7ac:	3d03      	subs	r5, #3
 800d7ae:	45ac      	cmp	ip, r5
 800d7b0:	bf38      	it	cc
 800d7b2:	2200      	movcc	r2, #0
 800d7b4:	441a      	add	r2, r3
 800d7b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d7ba:	b17b      	cbz	r3, 800d7dc <__mdiff+0x108>
 800d7bc:	6107      	str	r7, [r0, #16]
 800d7be:	e7a3      	b.n	800d708 <__mdiff+0x34>
 800d7c0:	f856 8b04 	ldr.w	r8, [r6], #4
 800d7c4:	fa11 f288 	uxtah	r2, r1, r8
 800d7c8:	1414      	asrs	r4, r2, #16
 800d7ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d7ce:	b292      	uxth	r2, r2
 800d7d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d7d4:	f84e 2b04 	str.w	r2, [lr], #4
 800d7d8:	1421      	asrs	r1, r4, #16
 800d7da:	e7e0      	b.n	800d79e <__mdiff+0xca>
 800d7dc:	3f01      	subs	r7, #1
 800d7de:	e7ea      	b.n	800d7b6 <__mdiff+0xe2>
 800d7e0:	08011ec8 	.word	0x08011ec8
 800d7e4:	08011f54 	.word	0x08011f54

0800d7e8 <__ulp>:
 800d7e8:	b082      	sub	sp, #8
 800d7ea:	ed8d 0b00 	vstr	d0, [sp]
 800d7ee:	9b01      	ldr	r3, [sp, #4]
 800d7f0:	4912      	ldr	r1, [pc, #72]	; (800d83c <__ulp+0x54>)
 800d7f2:	4019      	ands	r1, r3
 800d7f4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d7f8:	2900      	cmp	r1, #0
 800d7fa:	dd05      	ble.n	800d808 <__ulp+0x20>
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	460b      	mov	r3, r1
 800d800:	ec43 2b10 	vmov	d0, r2, r3
 800d804:	b002      	add	sp, #8
 800d806:	4770      	bx	lr
 800d808:	4249      	negs	r1, r1
 800d80a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d80e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d812:	f04f 0200 	mov.w	r2, #0
 800d816:	f04f 0300 	mov.w	r3, #0
 800d81a:	da04      	bge.n	800d826 <__ulp+0x3e>
 800d81c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d820:	fa41 f300 	asr.w	r3, r1, r0
 800d824:	e7ec      	b.n	800d800 <__ulp+0x18>
 800d826:	f1a0 0114 	sub.w	r1, r0, #20
 800d82a:	291e      	cmp	r1, #30
 800d82c:	bfda      	itte	le
 800d82e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d832:	fa20 f101 	lsrle.w	r1, r0, r1
 800d836:	2101      	movgt	r1, #1
 800d838:	460a      	mov	r2, r1
 800d83a:	e7e1      	b.n	800d800 <__ulp+0x18>
 800d83c:	7ff00000 	.word	0x7ff00000

0800d840 <__b2d>:
 800d840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d842:	6905      	ldr	r5, [r0, #16]
 800d844:	f100 0714 	add.w	r7, r0, #20
 800d848:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d84c:	1f2e      	subs	r6, r5, #4
 800d84e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d852:	4620      	mov	r0, r4
 800d854:	f7ff fd48 	bl	800d2e8 <__hi0bits>
 800d858:	f1c0 0320 	rsb	r3, r0, #32
 800d85c:	280a      	cmp	r0, #10
 800d85e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d8dc <__b2d+0x9c>
 800d862:	600b      	str	r3, [r1, #0]
 800d864:	dc14      	bgt.n	800d890 <__b2d+0x50>
 800d866:	f1c0 0e0b 	rsb	lr, r0, #11
 800d86a:	fa24 f10e 	lsr.w	r1, r4, lr
 800d86e:	42b7      	cmp	r7, r6
 800d870:	ea41 030c 	orr.w	r3, r1, ip
 800d874:	bf34      	ite	cc
 800d876:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d87a:	2100      	movcs	r1, #0
 800d87c:	3015      	adds	r0, #21
 800d87e:	fa04 f000 	lsl.w	r0, r4, r0
 800d882:	fa21 f10e 	lsr.w	r1, r1, lr
 800d886:	ea40 0201 	orr.w	r2, r0, r1
 800d88a:	ec43 2b10 	vmov	d0, r2, r3
 800d88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d890:	42b7      	cmp	r7, r6
 800d892:	bf3a      	itte	cc
 800d894:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d898:	f1a5 0608 	subcc.w	r6, r5, #8
 800d89c:	2100      	movcs	r1, #0
 800d89e:	380b      	subs	r0, #11
 800d8a0:	d017      	beq.n	800d8d2 <__b2d+0x92>
 800d8a2:	f1c0 0c20 	rsb	ip, r0, #32
 800d8a6:	fa04 f500 	lsl.w	r5, r4, r0
 800d8aa:	42be      	cmp	r6, r7
 800d8ac:	fa21 f40c 	lsr.w	r4, r1, ip
 800d8b0:	ea45 0504 	orr.w	r5, r5, r4
 800d8b4:	bf8c      	ite	hi
 800d8b6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d8ba:	2400      	movls	r4, #0
 800d8bc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d8c0:	fa01 f000 	lsl.w	r0, r1, r0
 800d8c4:	fa24 f40c 	lsr.w	r4, r4, ip
 800d8c8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d8cc:	ea40 0204 	orr.w	r2, r0, r4
 800d8d0:	e7db      	b.n	800d88a <__b2d+0x4a>
 800d8d2:	ea44 030c 	orr.w	r3, r4, ip
 800d8d6:	460a      	mov	r2, r1
 800d8d8:	e7d7      	b.n	800d88a <__b2d+0x4a>
 800d8da:	bf00      	nop
 800d8dc:	3ff00000 	.word	0x3ff00000

0800d8e0 <__d2b>:
 800d8e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d8e4:	4689      	mov	r9, r1
 800d8e6:	2101      	movs	r1, #1
 800d8e8:	ec57 6b10 	vmov	r6, r7, d0
 800d8ec:	4690      	mov	r8, r2
 800d8ee:	f7ff fc09 	bl	800d104 <_Balloc>
 800d8f2:	4604      	mov	r4, r0
 800d8f4:	b930      	cbnz	r0, 800d904 <__d2b+0x24>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	4b25      	ldr	r3, [pc, #148]	; (800d990 <__d2b+0xb0>)
 800d8fa:	4826      	ldr	r0, [pc, #152]	; (800d994 <__d2b+0xb4>)
 800d8fc:	f240 310a 	movw	r1, #778	; 0x30a
 800d900:	f000 ff6a 	bl	800e7d8 <__assert_func>
 800d904:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d908:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d90c:	bb35      	cbnz	r5, 800d95c <__d2b+0x7c>
 800d90e:	2e00      	cmp	r6, #0
 800d910:	9301      	str	r3, [sp, #4]
 800d912:	d028      	beq.n	800d966 <__d2b+0x86>
 800d914:	4668      	mov	r0, sp
 800d916:	9600      	str	r6, [sp, #0]
 800d918:	f7ff fd06 	bl	800d328 <__lo0bits>
 800d91c:	9900      	ldr	r1, [sp, #0]
 800d91e:	b300      	cbz	r0, 800d962 <__d2b+0x82>
 800d920:	9a01      	ldr	r2, [sp, #4]
 800d922:	f1c0 0320 	rsb	r3, r0, #32
 800d926:	fa02 f303 	lsl.w	r3, r2, r3
 800d92a:	430b      	orrs	r3, r1
 800d92c:	40c2      	lsrs	r2, r0
 800d92e:	6163      	str	r3, [r4, #20]
 800d930:	9201      	str	r2, [sp, #4]
 800d932:	9b01      	ldr	r3, [sp, #4]
 800d934:	61a3      	str	r3, [r4, #24]
 800d936:	2b00      	cmp	r3, #0
 800d938:	bf14      	ite	ne
 800d93a:	2202      	movne	r2, #2
 800d93c:	2201      	moveq	r2, #1
 800d93e:	6122      	str	r2, [r4, #16]
 800d940:	b1d5      	cbz	r5, 800d978 <__d2b+0x98>
 800d942:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d946:	4405      	add	r5, r0
 800d948:	f8c9 5000 	str.w	r5, [r9]
 800d94c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d950:	f8c8 0000 	str.w	r0, [r8]
 800d954:	4620      	mov	r0, r4
 800d956:	b003      	add	sp, #12
 800d958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d95c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d960:	e7d5      	b.n	800d90e <__d2b+0x2e>
 800d962:	6161      	str	r1, [r4, #20]
 800d964:	e7e5      	b.n	800d932 <__d2b+0x52>
 800d966:	a801      	add	r0, sp, #4
 800d968:	f7ff fcde 	bl	800d328 <__lo0bits>
 800d96c:	9b01      	ldr	r3, [sp, #4]
 800d96e:	6163      	str	r3, [r4, #20]
 800d970:	2201      	movs	r2, #1
 800d972:	6122      	str	r2, [r4, #16]
 800d974:	3020      	adds	r0, #32
 800d976:	e7e3      	b.n	800d940 <__d2b+0x60>
 800d978:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d97c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d980:	f8c9 0000 	str.w	r0, [r9]
 800d984:	6918      	ldr	r0, [r3, #16]
 800d986:	f7ff fcaf 	bl	800d2e8 <__hi0bits>
 800d98a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d98e:	e7df      	b.n	800d950 <__d2b+0x70>
 800d990:	08011ec8 	.word	0x08011ec8
 800d994:	08011f54 	.word	0x08011f54

0800d998 <__ratio>:
 800d998:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d99c:	4688      	mov	r8, r1
 800d99e:	4669      	mov	r1, sp
 800d9a0:	4681      	mov	r9, r0
 800d9a2:	f7ff ff4d 	bl	800d840 <__b2d>
 800d9a6:	a901      	add	r1, sp, #4
 800d9a8:	4640      	mov	r0, r8
 800d9aa:	ec55 4b10 	vmov	r4, r5, d0
 800d9ae:	f7ff ff47 	bl	800d840 <__b2d>
 800d9b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d9b6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d9ba:	eba3 0c02 	sub.w	ip, r3, r2
 800d9be:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d9c2:	1a9b      	subs	r3, r3, r2
 800d9c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d9c8:	ec51 0b10 	vmov	r0, r1, d0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	bfd6      	itet	le
 800d9d0:	460a      	movle	r2, r1
 800d9d2:	462a      	movgt	r2, r5
 800d9d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d9d8:	468b      	mov	fp, r1
 800d9da:	462f      	mov	r7, r5
 800d9dc:	bfd4      	ite	le
 800d9de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d9e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d9e6:	4620      	mov	r0, r4
 800d9e8:	ee10 2a10 	vmov	r2, s0
 800d9ec:	465b      	mov	r3, fp
 800d9ee:	4639      	mov	r1, r7
 800d9f0:	f7f2 ff44 	bl	800087c <__aeabi_ddiv>
 800d9f4:	ec41 0b10 	vmov	d0, r0, r1
 800d9f8:	b003      	add	sp, #12
 800d9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d9fe <__copybits>:
 800d9fe:	3901      	subs	r1, #1
 800da00:	b570      	push	{r4, r5, r6, lr}
 800da02:	1149      	asrs	r1, r1, #5
 800da04:	6914      	ldr	r4, [r2, #16]
 800da06:	3101      	adds	r1, #1
 800da08:	f102 0314 	add.w	r3, r2, #20
 800da0c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800da10:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800da14:	1f05      	subs	r5, r0, #4
 800da16:	42a3      	cmp	r3, r4
 800da18:	d30c      	bcc.n	800da34 <__copybits+0x36>
 800da1a:	1aa3      	subs	r3, r4, r2
 800da1c:	3b11      	subs	r3, #17
 800da1e:	f023 0303 	bic.w	r3, r3, #3
 800da22:	3211      	adds	r2, #17
 800da24:	42a2      	cmp	r2, r4
 800da26:	bf88      	it	hi
 800da28:	2300      	movhi	r3, #0
 800da2a:	4418      	add	r0, r3
 800da2c:	2300      	movs	r3, #0
 800da2e:	4288      	cmp	r0, r1
 800da30:	d305      	bcc.n	800da3e <__copybits+0x40>
 800da32:	bd70      	pop	{r4, r5, r6, pc}
 800da34:	f853 6b04 	ldr.w	r6, [r3], #4
 800da38:	f845 6f04 	str.w	r6, [r5, #4]!
 800da3c:	e7eb      	b.n	800da16 <__copybits+0x18>
 800da3e:	f840 3b04 	str.w	r3, [r0], #4
 800da42:	e7f4      	b.n	800da2e <__copybits+0x30>

0800da44 <__any_on>:
 800da44:	f100 0214 	add.w	r2, r0, #20
 800da48:	6900      	ldr	r0, [r0, #16]
 800da4a:	114b      	asrs	r3, r1, #5
 800da4c:	4298      	cmp	r0, r3
 800da4e:	b510      	push	{r4, lr}
 800da50:	db11      	blt.n	800da76 <__any_on+0x32>
 800da52:	dd0a      	ble.n	800da6a <__any_on+0x26>
 800da54:	f011 011f 	ands.w	r1, r1, #31
 800da58:	d007      	beq.n	800da6a <__any_on+0x26>
 800da5a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800da5e:	fa24 f001 	lsr.w	r0, r4, r1
 800da62:	fa00 f101 	lsl.w	r1, r0, r1
 800da66:	428c      	cmp	r4, r1
 800da68:	d10b      	bne.n	800da82 <__any_on+0x3e>
 800da6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800da6e:	4293      	cmp	r3, r2
 800da70:	d803      	bhi.n	800da7a <__any_on+0x36>
 800da72:	2000      	movs	r0, #0
 800da74:	bd10      	pop	{r4, pc}
 800da76:	4603      	mov	r3, r0
 800da78:	e7f7      	b.n	800da6a <__any_on+0x26>
 800da7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da7e:	2900      	cmp	r1, #0
 800da80:	d0f5      	beq.n	800da6e <__any_on+0x2a>
 800da82:	2001      	movs	r0, #1
 800da84:	e7f6      	b.n	800da74 <__any_on+0x30>

0800da86 <_calloc_r>:
 800da86:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da88:	fba1 2402 	umull	r2, r4, r1, r2
 800da8c:	b94c      	cbnz	r4, 800daa2 <_calloc_r+0x1c>
 800da8e:	4611      	mov	r1, r2
 800da90:	9201      	str	r2, [sp, #4]
 800da92:	f000 f87b 	bl	800db8c <_malloc_r>
 800da96:	9a01      	ldr	r2, [sp, #4]
 800da98:	4605      	mov	r5, r0
 800da9a:	b930      	cbnz	r0, 800daaa <_calloc_r+0x24>
 800da9c:	4628      	mov	r0, r5
 800da9e:	b003      	add	sp, #12
 800daa0:	bd30      	pop	{r4, r5, pc}
 800daa2:	220c      	movs	r2, #12
 800daa4:	6002      	str	r2, [r0, #0]
 800daa6:	2500      	movs	r5, #0
 800daa8:	e7f8      	b.n	800da9c <_calloc_r+0x16>
 800daaa:	4621      	mov	r1, r4
 800daac:	f7fc fb26 	bl	800a0fc <memset>
 800dab0:	e7f4      	b.n	800da9c <_calloc_r+0x16>
	...

0800dab4 <_free_r>:
 800dab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dab6:	2900      	cmp	r1, #0
 800dab8:	d044      	beq.n	800db44 <_free_r+0x90>
 800daba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dabe:	9001      	str	r0, [sp, #4]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	f1a1 0404 	sub.w	r4, r1, #4
 800dac6:	bfb8      	it	lt
 800dac8:	18e4      	addlt	r4, r4, r3
 800daca:	f001 f889 	bl	800ebe0 <__malloc_lock>
 800dace:	4a1e      	ldr	r2, [pc, #120]	; (800db48 <_free_r+0x94>)
 800dad0:	9801      	ldr	r0, [sp, #4]
 800dad2:	6813      	ldr	r3, [r2, #0]
 800dad4:	b933      	cbnz	r3, 800dae4 <_free_r+0x30>
 800dad6:	6063      	str	r3, [r4, #4]
 800dad8:	6014      	str	r4, [r2, #0]
 800dada:	b003      	add	sp, #12
 800dadc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dae0:	f001 b884 	b.w	800ebec <__malloc_unlock>
 800dae4:	42a3      	cmp	r3, r4
 800dae6:	d908      	bls.n	800dafa <_free_r+0x46>
 800dae8:	6825      	ldr	r5, [r4, #0]
 800daea:	1961      	adds	r1, r4, r5
 800daec:	428b      	cmp	r3, r1
 800daee:	bf01      	itttt	eq
 800daf0:	6819      	ldreq	r1, [r3, #0]
 800daf2:	685b      	ldreq	r3, [r3, #4]
 800daf4:	1949      	addeq	r1, r1, r5
 800daf6:	6021      	streq	r1, [r4, #0]
 800daf8:	e7ed      	b.n	800dad6 <_free_r+0x22>
 800dafa:	461a      	mov	r2, r3
 800dafc:	685b      	ldr	r3, [r3, #4]
 800dafe:	b10b      	cbz	r3, 800db04 <_free_r+0x50>
 800db00:	42a3      	cmp	r3, r4
 800db02:	d9fa      	bls.n	800dafa <_free_r+0x46>
 800db04:	6811      	ldr	r1, [r2, #0]
 800db06:	1855      	adds	r5, r2, r1
 800db08:	42a5      	cmp	r5, r4
 800db0a:	d10b      	bne.n	800db24 <_free_r+0x70>
 800db0c:	6824      	ldr	r4, [r4, #0]
 800db0e:	4421      	add	r1, r4
 800db10:	1854      	adds	r4, r2, r1
 800db12:	42a3      	cmp	r3, r4
 800db14:	6011      	str	r1, [r2, #0]
 800db16:	d1e0      	bne.n	800dada <_free_r+0x26>
 800db18:	681c      	ldr	r4, [r3, #0]
 800db1a:	685b      	ldr	r3, [r3, #4]
 800db1c:	6053      	str	r3, [r2, #4]
 800db1e:	4421      	add	r1, r4
 800db20:	6011      	str	r1, [r2, #0]
 800db22:	e7da      	b.n	800dada <_free_r+0x26>
 800db24:	d902      	bls.n	800db2c <_free_r+0x78>
 800db26:	230c      	movs	r3, #12
 800db28:	6003      	str	r3, [r0, #0]
 800db2a:	e7d6      	b.n	800dada <_free_r+0x26>
 800db2c:	6825      	ldr	r5, [r4, #0]
 800db2e:	1961      	adds	r1, r4, r5
 800db30:	428b      	cmp	r3, r1
 800db32:	bf04      	itt	eq
 800db34:	6819      	ldreq	r1, [r3, #0]
 800db36:	685b      	ldreq	r3, [r3, #4]
 800db38:	6063      	str	r3, [r4, #4]
 800db3a:	bf04      	itt	eq
 800db3c:	1949      	addeq	r1, r1, r5
 800db3e:	6021      	streq	r1, [r4, #0]
 800db40:	6054      	str	r4, [r2, #4]
 800db42:	e7ca      	b.n	800dada <_free_r+0x26>
 800db44:	b003      	add	sp, #12
 800db46:	bd30      	pop	{r4, r5, pc}
 800db48:	20013ef0 	.word	0x20013ef0

0800db4c <sbrk_aligned>:
 800db4c:	b570      	push	{r4, r5, r6, lr}
 800db4e:	4e0e      	ldr	r6, [pc, #56]	; (800db88 <sbrk_aligned+0x3c>)
 800db50:	460c      	mov	r4, r1
 800db52:	6831      	ldr	r1, [r6, #0]
 800db54:	4605      	mov	r5, r0
 800db56:	b911      	cbnz	r1, 800db5e <sbrk_aligned+0x12>
 800db58:	f000 fd26 	bl	800e5a8 <_sbrk_r>
 800db5c:	6030      	str	r0, [r6, #0]
 800db5e:	4621      	mov	r1, r4
 800db60:	4628      	mov	r0, r5
 800db62:	f000 fd21 	bl	800e5a8 <_sbrk_r>
 800db66:	1c43      	adds	r3, r0, #1
 800db68:	d00a      	beq.n	800db80 <sbrk_aligned+0x34>
 800db6a:	1cc4      	adds	r4, r0, #3
 800db6c:	f024 0403 	bic.w	r4, r4, #3
 800db70:	42a0      	cmp	r0, r4
 800db72:	d007      	beq.n	800db84 <sbrk_aligned+0x38>
 800db74:	1a21      	subs	r1, r4, r0
 800db76:	4628      	mov	r0, r5
 800db78:	f000 fd16 	bl	800e5a8 <_sbrk_r>
 800db7c:	3001      	adds	r0, #1
 800db7e:	d101      	bne.n	800db84 <sbrk_aligned+0x38>
 800db80:	f04f 34ff 	mov.w	r4, #4294967295
 800db84:	4620      	mov	r0, r4
 800db86:	bd70      	pop	{r4, r5, r6, pc}
 800db88:	20013ef4 	.word	0x20013ef4

0800db8c <_malloc_r>:
 800db8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db90:	1ccd      	adds	r5, r1, #3
 800db92:	f025 0503 	bic.w	r5, r5, #3
 800db96:	3508      	adds	r5, #8
 800db98:	2d0c      	cmp	r5, #12
 800db9a:	bf38      	it	cc
 800db9c:	250c      	movcc	r5, #12
 800db9e:	2d00      	cmp	r5, #0
 800dba0:	4607      	mov	r7, r0
 800dba2:	db01      	blt.n	800dba8 <_malloc_r+0x1c>
 800dba4:	42a9      	cmp	r1, r5
 800dba6:	d905      	bls.n	800dbb4 <_malloc_r+0x28>
 800dba8:	230c      	movs	r3, #12
 800dbaa:	603b      	str	r3, [r7, #0]
 800dbac:	2600      	movs	r6, #0
 800dbae:	4630      	mov	r0, r6
 800dbb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbb4:	4e2e      	ldr	r6, [pc, #184]	; (800dc70 <_malloc_r+0xe4>)
 800dbb6:	f001 f813 	bl	800ebe0 <__malloc_lock>
 800dbba:	6833      	ldr	r3, [r6, #0]
 800dbbc:	461c      	mov	r4, r3
 800dbbe:	bb34      	cbnz	r4, 800dc0e <_malloc_r+0x82>
 800dbc0:	4629      	mov	r1, r5
 800dbc2:	4638      	mov	r0, r7
 800dbc4:	f7ff ffc2 	bl	800db4c <sbrk_aligned>
 800dbc8:	1c43      	adds	r3, r0, #1
 800dbca:	4604      	mov	r4, r0
 800dbcc:	d14d      	bne.n	800dc6a <_malloc_r+0xde>
 800dbce:	6834      	ldr	r4, [r6, #0]
 800dbd0:	4626      	mov	r6, r4
 800dbd2:	2e00      	cmp	r6, #0
 800dbd4:	d140      	bne.n	800dc58 <_malloc_r+0xcc>
 800dbd6:	6823      	ldr	r3, [r4, #0]
 800dbd8:	4631      	mov	r1, r6
 800dbda:	4638      	mov	r0, r7
 800dbdc:	eb04 0803 	add.w	r8, r4, r3
 800dbe0:	f000 fce2 	bl	800e5a8 <_sbrk_r>
 800dbe4:	4580      	cmp	r8, r0
 800dbe6:	d13a      	bne.n	800dc5e <_malloc_r+0xd2>
 800dbe8:	6821      	ldr	r1, [r4, #0]
 800dbea:	3503      	adds	r5, #3
 800dbec:	1a6d      	subs	r5, r5, r1
 800dbee:	f025 0503 	bic.w	r5, r5, #3
 800dbf2:	3508      	adds	r5, #8
 800dbf4:	2d0c      	cmp	r5, #12
 800dbf6:	bf38      	it	cc
 800dbf8:	250c      	movcc	r5, #12
 800dbfa:	4629      	mov	r1, r5
 800dbfc:	4638      	mov	r0, r7
 800dbfe:	f7ff ffa5 	bl	800db4c <sbrk_aligned>
 800dc02:	3001      	adds	r0, #1
 800dc04:	d02b      	beq.n	800dc5e <_malloc_r+0xd2>
 800dc06:	6823      	ldr	r3, [r4, #0]
 800dc08:	442b      	add	r3, r5
 800dc0a:	6023      	str	r3, [r4, #0]
 800dc0c:	e00e      	b.n	800dc2c <_malloc_r+0xa0>
 800dc0e:	6822      	ldr	r2, [r4, #0]
 800dc10:	1b52      	subs	r2, r2, r5
 800dc12:	d41e      	bmi.n	800dc52 <_malloc_r+0xc6>
 800dc14:	2a0b      	cmp	r2, #11
 800dc16:	d916      	bls.n	800dc46 <_malloc_r+0xba>
 800dc18:	1961      	adds	r1, r4, r5
 800dc1a:	42a3      	cmp	r3, r4
 800dc1c:	6025      	str	r5, [r4, #0]
 800dc1e:	bf18      	it	ne
 800dc20:	6059      	strne	r1, [r3, #4]
 800dc22:	6863      	ldr	r3, [r4, #4]
 800dc24:	bf08      	it	eq
 800dc26:	6031      	streq	r1, [r6, #0]
 800dc28:	5162      	str	r2, [r4, r5]
 800dc2a:	604b      	str	r3, [r1, #4]
 800dc2c:	4638      	mov	r0, r7
 800dc2e:	f104 060b 	add.w	r6, r4, #11
 800dc32:	f000 ffdb 	bl	800ebec <__malloc_unlock>
 800dc36:	f026 0607 	bic.w	r6, r6, #7
 800dc3a:	1d23      	adds	r3, r4, #4
 800dc3c:	1af2      	subs	r2, r6, r3
 800dc3e:	d0b6      	beq.n	800dbae <_malloc_r+0x22>
 800dc40:	1b9b      	subs	r3, r3, r6
 800dc42:	50a3      	str	r3, [r4, r2]
 800dc44:	e7b3      	b.n	800dbae <_malloc_r+0x22>
 800dc46:	6862      	ldr	r2, [r4, #4]
 800dc48:	42a3      	cmp	r3, r4
 800dc4a:	bf0c      	ite	eq
 800dc4c:	6032      	streq	r2, [r6, #0]
 800dc4e:	605a      	strne	r2, [r3, #4]
 800dc50:	e7ec      	b.n	800dc2c <_malloc_r+0xa0>
 800dc52:	4623      	mov	r3, r4
 800dc54:	6864      	ldr	r4, [r4, #4]
 800dc56:	e7b2      	b.n	800dbbe <_malloc_r+0x32>
 800dc58:	4634      	mov	r4, r6
 800dc5a:	6876      	ldr	r6, [r6, #4]
 800dc5c:	e7b9      	b.n	800dbd2 <_malloc_r+0x46>
 800dc5e:	230c      	movs	r3, #12
 800dc60:	603b      	str	r3, [r7, #0]
 800dc62:	4638      	mov	r0, r7
 800dc64:	f000 ffc2 	bl	800ebec <__malloc_unlock>
 800dc68:	e7a1      	b.n	800dbae <_malloc_r+0x22>
 800dc6a:	6025      	str	r5, [r4, #0]
 800dc6c:	e7de      	b.n	800dc2c <_malloc_r+0xa0>
 800dc6e:	bf00      	nop
 800dc70:	20013ef0 	.word	0x20013ef0

0800dc74 <__ssputs_r>:
 800dc74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc78:	688e      	ldr	r6, [r1, #8]
 800dc7a:	429e      	cmp	r6, r3
 800dc7c:	4682      	mov	sl, r0
 800dc7e:	460c      	mov	r4, r1
 800dc80:	4690      	mov	r8, r2
 800dc82:	461f      	mov	r7, r3
 800dc84:	d838      	bhi.n	800dcf8 <__ssputs_r+0x84>
 800dc86:	898a      	ldrh	r2, [r1, #12]
 800dc88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dc8c:	d032      	beq.n	800dcf4 <__ssputs_r+0x80>
 800dc8e:	6825      	ldr	r5, [r4, #0]
 800dc90:	6909      	ldr	r1, [r1, #16]
 800dc92:	eba5 0901 	sub.w	r9, r5, r1
 800dc96:	6965      	ldr	r5, [r4, #20]
 800dc98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dca0:	3301      	adds	r3, #1
 800dca2:	444b      	add	r3, r9
 800dca4:	106d      	asrs	r5, r5, #1
 800dca6:	429d      	cmp	r5, r3
 800dca8:	bf38      	it	cc
 800dcaa:	461d      	movcc	r5, r3
 800dcac:	0553      	lsls	r3, r2, #21
 800dcae:	d531      	bpl.n	800dd14 <__ssputs_r+0xa0>
 800dcb0:	4629      	mov	r1, r5
 800dcb2:	f7ff ff6b 	bl	800db8c <_malloc_r>
 800dcb6:	4606      	mov	r6, r0
 800dcb8:	b950      	cbnz	r0, 800dcd0 <__ssputs_r+0x5c>
 800dcba:	230c      	movs	r3, #12
 800dcbc:	f8ca 3000 	str.w	r3, [sl]
 800dcc0:	89a3      	ldrh	r3, [r4, #12]
 800dcc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcc6:	81a3      	strh	r3, [r4, #12]
 800dcc8:	f04f 30ff 	mov.w	r0, #4294967295
 800dccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcd0:	6921      	ldr	r1, [r4, #16]
 800dcd2:	464a      	mov	r2, r9
 800dcd4:	f7fc fa04 	bl	800a0e0 <memcpy>
 800dcd8:	89a3      	ldrh	r3, [r4, #12]
 800dcda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dcde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dce2:	81a3      	strh	r3, [r4, #12]
 800dce4:	6126      	str	r6, [r4, #16]
 800dce6:	6165      	str	r5, [r4, #20]
 800dce8:	444e      	add	r6, r9
 800dcea:	eba5 0509 	sub.w	r5, r5, r9
 800dcee:	6026      	str	r6, [r4, #0]
 800dcf0:	60a5      	str	r5, [r4, #8]
 800dcf2:	463e      	mov	r6, r7
 800dcf4:	42be      	cmp	r6, r7
 800dcf6:	d900      	bls.n	800dcfa <__ssputs_r+0x86>
 800dcf8:	463e      	mov	r6, r7
 800dcfa:	6820      	ldr	r0, [r4, #0]
 800dcfc:	4632      	mov	r2, r6
 800dcfe:	4641      	mov	r1, r8
 800dd00:	f000 ff54 	bl	800ebac <memmove>
 800dd04:	68a3      	ldr	r3, [r4, #8]
 800dd06:	1b9b      	subs	r3, r3, r6
 800dd08:	60a3      	str	r3, [r4, #8]
 800dd0a:	6823      	ldr	r3, [r4, #0]
 800dd0c:	4433      	add	r3, r6
 800dd0e:	6023      	str	r3, [r4, #0]
 800dd10:	2000      	movs	r0, #0
 800dd12:	e7db      	b.n	800dccc <__ssputs_r+0x58>
 800dd14:	462a      	mov	r2, r5
 800dd16:	f000 ff6f 	bl	800ebf8 <_realloc_r>
 800dd1a:	4606      	mov	r6, r0
 800dd1c:	2800      	cmp	r0, #0
 800dd1e:	d1e1      	bne.n	800dce4 <__ssputs_r+0x70>
 800dd20:	6921      	ldr	r1, [r4, #16]
 800dd22:	4650      	mov	r0, sl
 800dd24:	f7ff fec6 	bl	800dab4 <_free_r>
 800dd28:	e7c7      	b.n	800dcba <__ssputs_r+0x46>
	...

0800dd2c <_svfiprintf_r>:
 800dd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd30:	4698      	mov	r8, r3
 800dd32:	898b      	ldrh	r3, [r1, #12]
 800dd34:	061b      	lsls	r3, r3, #24
 800dd36:	b09d      	sub	sp, #116	; 0x74
 800dd38:	4607      	mov	r7, r0
 800dd3a:	460d      	mov	r5, r1
 800dd3c:	4614      	mov	r4, r2
 800dd3e:	d50e      	bpl.n	800dd5e <_svfiprintf_r+0x32>
 800dd40:	690b      	ldr	r3, [r1, #16]
 800dd42:	b963      	cbnz	r3, 800dd5e <_svfiprintf_r+0x32>
 800dd44:	2140      	movs	r1, #64	; 0x40
 800dd46:	f7ff ff21 	bl	800db8c <_malloc_r>
 800dd4a:	6028      	str	r0, [r5, #0]
 800dd4c:	6128      	str	r0, [r5, #16]
 800dd4e:	b920      	cbnz	r0, 800dd5a <_svfiprintf_r+0x2e>
 800dd50:	230c      	movs	r3, #12
 800dd52:	603b      	str	r3, [r7, #0]
 800dd54:	f04f 30ff 	mov.w	r0, #4294967295
 800dd58:	e0d1      	b.n	800defe <_svfiprintf_r+0x1d2>
 800dd5a:	2340      	movs	r3, #64	; 0x40
 800dd5c:	616b      	str	r3, [r5, #20]
 800dd5e:	2300      	movs	r3, #0
 800dd60:	9309      	str	r3, [sp, #36]	; 0x24
 800dd62:	2320      	movs	r3, #32
 800dd64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd68:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd6c:	2330      	movs	r3, #48	; 0x30
 800dd6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800df18 <_svfiprintf_r+0x1ec>
 800dd72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd76:	f04f 0901 	mov.w	r9, #1
 800dd7a:	4623      	mov	r3, r4
 800dd7c:	469a      	mov	sl, r3
 800dd7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd82:	b10a      	cbz	r2, 800dd88 <_svfiprintf_r+0x5c>
 800dd84:	2a25      	cmp	r2, #37	; 0x25
 800dd86:	d1f9      	bne.n	800dd7c <_svfiprintf_r+0x50>
 800dd88:	ebba 0b04 	subs.w	fp, sl, r4
 800dd8c:	d00b      	beq.n	800dda6 <_svfiprintf_r+0x7a>
 800dd8e:	465b      	mov	r3, fp
 800dd90:	4622      	mov	r2, r4
 800dd92:	4629      	mov	r1, r5
 800dd94:	4638      	mov	r0, r7
 800dd96:	f7ff ff6d 	bl	800dc74 <__ssputs_r>
 800dd9a:	3001      	adds	r0, #1
 800dd9c:	f000 80aa 	beq.w	800def4 <_svfiprintf_r+0x1c8>
 800dda0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dda2:	445a      	add	r2, fp
 800dda4:	9209      	str	r2, [sp, #36]	; 0x24
 800dda6:	f89a 3000 	ldrb.w	r3, [sl]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	f000 80a2 	beq.w	800def4 <_svfiprintf_r+0x1c8>
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	f04f 32ff 	mov.w	r2, #4294967295
 800ddb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddba:	f10a 0a01 	add.w	sl, sl, #1
 800ddbe:	9304      	str	r3, [sp, #16]
 800ddc0:	9307      	str	r3, [sp, #28]
 800ddc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ddc6:	931a      	str	r3, [sp, #104]	; 0x68
 800ddc8:	4654      	mov	r4, sl
 800ddca:	2205      	movs	r2, #5
 800ddcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddd0:	4851      	ldr	r0, [pc, #324]	; (800df18 <_svfiprintf_r+0x1ec>)
 800ddd2:	f7f2 fa1d 	bl	8000210 <memchr>
 800ddd6:	9a04      	ldr	r2, [sp, #16]
 800ddd8:	b9d8      	cbnz	r0, 800de12 <_svfiprintf_r+0xe6>
 800ddda:	06d0      	lsls	r0, r2, #27
 800dddc:	bf44      	itt	mi
 800ddde:	2320      	movmi	r3, #32
 800dde0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dde4:	0711      	lsls	r1, r2, #28
 800dde6:	bf44      	itt	mi
 800dde8:	232b      	movmi	r3, #43	; 0x2b
 800ddea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddee:	f89a 3000 	ldrb.w	r3, [sl]
 800ddf2:	2b2a      	cmp	r3, #42	; 0x2a
 800ddf4:	d015      	beq.n	800de22 <_svfiprintf_r+0xf6>
 800ddf6:	9a07      	ldr	r2, [sp, #28]
 800ddf8:	4654      	mov	r4, sl
 800ddfa:	2000      	movs	r0, #0
 800ddfc:	f04f 0c0a 	mov.w	ip, #10
 800de00:	4621      	mov	r1, r4
 800de02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de06:	3b30      	subs	r3, #48	; 0x30
 800de08:	2b09      	cmp	r3, #9
 800de0a:	d94e      	bls.n	800deaa <_svfiprintf_r+0x17e>
 800de0c:	b1b0      	cbz	r0, 800de3c <_svfiprintf_r+0x110>
 800de0e:	9207      	str	r2, [sp, #28]
 800de10:	e014      	b.n	800de3c <_svfiprintf_r+0x110>
 800de12:	eba0 0308 	sub.w	r3, r0, r8
 800de16:	fa09 f303 	lsl.w	r3, r9, r3
 800de1a:	4313      	orrs	r3, r2
 800de1c:	9304      	str	r3, [sp, #16]
 800de1e:	46a2      	mov	sl, r4
 800de20:	e7d2      	b.n	800ddc8 <_svfiprintf_r+0x9c>
 800de22:	9b03      	ldr	r3, [sp, #12]
 800de24:	1d19      	adds	r1, r3, #4
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	9103      	str	r1, [sp, #12]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	bfbb      	ittet	lt
 800de2e:	425b      	neglt	r3, r3
 800de30:	f042 0202 	orrlt.w	r2, r2, #2
 800de34:	9307      	strge	r3, [sp, #28]
 800de36:	9307      	strlt	r3, [sp, #28]
 800de38:	bfb8      	it	lt
 800de3a:	9204      	strlt	r2, [sp, #16]
 800de3c:	7823      	ldrb	r3, [r4, #0]
 800de3e:	2b2e      	cmp	r3, #46	; 0x2e
 800de40:	d10c      	bne.n	800de5c <_svfiprintf_r+0x130>
 800de42:	7863      	ldrb	r3, [r4, #1]
 800de44:	2b2a      	cmp	r3, #42	; 0x2a
 800de46:	d135      	bne.n	800deb4 <_svfiprintf_r+0x188>
 800de48:	9b03      	ldr	r3, [sp, #12]
 800de4a:	1d1a      	adds	r2, r3, #4
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	9203      	str	r2, [sp, #12]
 800de50:	2b00      	cmp	r3, #0
 800de52:	bfb8      	it	lt
 800de54:	f04f 33ff 	movlt.w	r3, #4294967295
 800de58:	3402      	adds	r4, #2
 800de5a:	9305      	str	r3, [sp, #20]
 800de5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800df28 <_svfiprintf_r+0x1fc>
 800de60:	7821      	ldrb	r1, [r4, #0]
 800de62:	2203      	movs	r2, #3
 800de64:	4650      	mov	r0, sl
 800de66:	f7f2 f9d3 	bl	8000210 <memchr>
 800de6a:	b140      	cbz	r0, 800de7e <_svfiprintf_r+0x152>
 800de6c:	2340      	movs	r3, #64	; 0x40
 800de6e:	eba0 000a 	sub.w	r0, r0, sl
 800de72:	fa03 f000 	lsl.w	r0, r3, r0
 800de76:	9b04      	ldr	r3, [sp, #16]
 800de78:	4303      	orrs	r3, r0
 800de7a:	3401      	adds	r4, #1
 800de7c:	9304      	str	r3, [sp, #16]
 800de7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de82:	4826      	ldr	r0, [pc, #152]	; (800df1c <_svfiprintf_r+0x1f0>)
 800de84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de88:	2206      	movs	r2, #6
 800de8a:	f7f2 f9c1 	bl	8000210 <memchr>
 800de8e:	2800      	cmp	r0, #0
 800de90:	d038      	beq.n	800df04 <_svfiprintf_r+0x1d8>
 800de92:	4b23      	ldr	r3, [pc, #140]	; (800df20 <_svfiprintf_r+0x1f4>)
 800de94:	bb1b      	cbnz	r3, 800dede <_svfiprintf_r+0x1b2>
 800de96:	9b03      	ldr	r3, [sp, #12]
 800de98:	3307      	adds	r3, #7
 800de9a:	f023 0307 	bic.w	r3, r3, #7
 800de9e:	3308      	adds	r3, #8
 800dea0:	9303      	str	r3, [sp, #12]
 800dea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dea4:	4433      	add	r3, r6
 800dea6:	9309      	str	r3, [sp, #36]	; 0x24
 800dea8:	e767      	b.n	800dd7a <_svfiprintf_r+0x4e>
 800deaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800deae:	460c      	mov	r4, r1
 800deb0:	2001      	movs	r0, #1
 800deb2:	e7a5      	b.n	800de00 <_svfiprintf_r+0xd4>
 800deb4:	2300      	movs	r3, #0
 800deb6:	3401      	adds	r4, #1
 800deb8:	9305      	str	r3, [sp, #20]
 800deba:	4619      	mov	r1, r3
 800debc:	f04f 0c0a 	mov.w	ip, #10
 800dec0:	4620      	mov	r0, r4
 800dec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dec6:	3a30      	subs	r2, #48	; 0x30
 800dec8:	2a09      	cmp	r2, #9
 800deca:	d903      	bls.n	800ded4 <_svfiprintf_r+0x1a8>
 800decc:	2b00      	cmp	r3, #0
 800dece:	d0c5      	beq.n	800de5c <_svfiprintf_r+0x130>
 800ded0:	9105      	str	r1, [sp, #20]
 800ded2:	e7c3      	b.n	800de5c <_svfiprintf_r+0x130>
 800ded4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ded8:	4604      	mov	r4, r0
 800deda:	2301      	movs	r3, #1
 800dedc:	e7f0      	b.n	800dec0 <_svfiprintf_r+0x194>
 800dede:	ab03      	add	r3, sp, #12
 800dee0:	9300      	str	r3, [sp, #0]
 800dee2:	462a      	mov	r2, r5
 800dee4:	4b0f      	ldr	r3, [pc, #60]	; (800df24 <_svfiprintf_r+0x1f8>)
 800dee6:	a904      	add	r1, sp, #16
 800dee8:	4638      	mov	r0, r7
 800deea:	f7fc f9af 	bl	800a24c <_printf_float>
 800deee:	1c42      	adds	r2, r0, #1
 800def0:	4606      	mov	r6, r0
 800def2:	d1d6      	bne.n	800dea2 <_svfiprintf_r+0x176>
 800def4:	89ab      	ldrh	r3, [r5, #12]
 800def6:	065b      	lsls	r3, r3, #25
 800def8:	f53f af2c 	bmi.w	800dd54 <_svfiprintf_r+0x28>
 800defc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800defe:	b01d      	add	sp, #116	; 0x74
 800df00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df04:	ab03      	add	r3, sp, #12
 800df06:	9300      	str	r3, [sp, #0]
 800df08:	462a      	mov	r2, r5
 800df0a:	4b06      	ldr	r3, [pc, #24]	; (800df24 <_svfiprintf_r+0x1f8>)
 800df0c:	a904      	add	r1, sp, #16
 800df0e:	4638      	mov	r0, r7
 800df10:	f7fc fc40 	bl	800a794 <_printf_i>
 800df14:	e7eb      	b.n	800deee <_svfiprintf_r+0x1c2>
 800df16:	bf00      	nop
 800df18:	080120ac 	.word	0x080120ac
 800df1c:	080120b6 	.word	0x080120b6
 800df20:	0800a24d 	.word	0x0800a24d
 800df24:	0800dc75 	.word	0x0800dc75
 800df28:	080120b2 	.word	0x080120b2

0800df2c <_sungetc_r>:
 800df2c:	b538      	push	{r3, r4, r5, lr}
 800df2e:	1c4b      	adds	r3, r1, #1
 800df30:	4614      	mov	r4, r2
 800df32:	d103      	bne.n	800df3c <_sungetc_r+0x10>
 800df34:	f04f 35ff 	mov.w	r5, #4294967295
 800df38:	4628      	mov	r0, r5
 800df3a:	bd38      	pop	{r3, r4, r5, pc}
 800df3c:	8993      	ldrh	r3, [r2, #12]
 800df3e:	f023 0320 	bic.w	r3, r3, #32
 800df42:	8193      	strh	r3, [r2, #12]
 800df44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df46:	6852      	ldr	r2, [r2, #4]
 800df48:	b2cd      	uxtb	r5, r1
 800df4a:	b18b      	cbz	r3, 800df70 <_sungetc_r+0x44>
 800df4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df4e:	4293      	cmp	r3, r2
 800df50:	dd08      	ble.n	800df64 <_sungetc_r+0x38>
 800df52:	6823      	ldr	r3, [r4, #0]
 800df54:	1e5a      	subs	r2, r3, #1
 800df56:	6022      	str	r2, [r4, #0]
 800df58:	f803 5c01 	strb.w	r5, [r3, #-1]
 800df5c:	6863      	ldr	r3, [r4, #4]
 800df5e:	3301      	adds	r3, #1
 800df60:	6063      	str	r3, [r4, #4]
 800df62:	e7e9      	b.n	800df38 <_sungetc_r+0xc>
 800df64:	4621      	mov	r1, r4
 800df66:	f000 fbef 	bl	800e748 <__submore>
 800df6a:	2800      	cmp	r0, #0
 800df6c:	d0f1      	beq.n	800df52 <_sungetc_r+0x26>
 800df6e:	e7e1      	b.n	800df34 <_sungetc_r+0x8>
 800df70:	6921      	ldr	r1, [r4, #16]
 800df72:	6823      	ldr	r3, [r4, #0]
 800df74:	b151      	cbz	r1, 800df8c <_sungetc_r+0x60>
 800df76:	4299      	cmp	r1, r3
 800df78:	d208      	bcs.n	800df8c <_sungetc_r+0x60>
 800df7a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800df7e:	42a9      	cmp	r1, r5
 800df80:	d104      	bne.n	800df8c <_sungetc_r+0x60>
 800df82:	3b01      	subs	r3, #1
 800df84:	3201      	adds	r2, #1
 800df86:	6023      	str	r3, [r4, #0]
 800df88:	6062      	str	r2, [r4, #4]
 800df8a:	e7d5      	b.n	800df38 <_sungetc_r+0xc>
 800df8c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800df90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df94:	6363      	str	r3, [r4, #52]	; 0x34
 800df96:	2303      	movs	r3, #3
 800df98:	63a3      	str	r3, [r4, #56]	; 0x38
 800df9a:	4623      	mov	r3, r4
 800df9c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800dfa0:	6023      	str	r3, [r4, #0]
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	e7dc      	b.n	800df60 <_sungetc_r+0x34>

0800dfa6 <__ssrefill_r>:
 800dfa6:	b510      	push	{r4, lr}
 800dfa8:	460c      	mov	r4, r1
 800dfaa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800dfac:	b169      	cbz	r1, 800dfca <__ssrefill_r+0x24>
 800dfae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfb2:	4299      	cmp	r1, r3
 800dfb4:	d001      	beq.n	800dfba <__ssrefill_r+0x14>
 800dfb6:	f7ff fd7d 	bl	800dab4 <_free_r>
 800dfba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dfbc:	6063      	str	r3, [r4, #4]
 800dfbe:	2000      	movs	r0, #0
 800dfc0:	6360      	str	r0, [r4, #52]	; 0x34
 800dfc2:	b113      	cbz	r3, 800dfca <__ssrefill_r+0x24>
 800dfc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dfc6:	6023      	str	r3, [r4, #0]
 800dfc8:	bd10      	pop	{r4, pc}
 800dfca:	6923      	ldr	r3, [r4, #16]
 800dfcc:	6023      	str	r3, [r4, #0]
 800dfce:	2300      	movs	r3, #0
 800dfd0:	6063      	str	r3, [r4, #4]
 800dfd2:	89a3      	ldrh	r3, [r4, #12]
 800dfd4:	f043 0320 	orr.w	r3, r3, #32
 800dfd8:	81a3      	strh	r3, [r4, #12]
 800dfda:	f04f 30ff 	mov.w	r0, #4294967295
 800dfde:	e7f3      	b.n	800dfc8 <__ssrefill_r+0x22>

0800dfe0 <__ssvfiscanf_r>:
 800dfe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfe4:	460c      	mov	r4, r1
 800dfe6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800dfea:	2100      	movs	r1, #0
 800dfec:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800dff0:	49a6      	ldr	r1, [pc, #664]	; (800e28c <__ssvfiscanf_r+0x2ac>)
 800dff2:	91a0      	str	r1, [sp, #640]	; 0x280
 800dff4:	f10d 0804 	add.w	r8, sp, #4
 800dff8:	49a5      	ldr	r1, [pc, #660]	; (800e290 <__ssvfiscanf_r+0x2b0>)
 800dffa:	4fa6      	ldr	r7, [pc, #664]	; (800e294 <__ssvfiscanf_r+0x2b4>)
 800dffc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e298 <__ssvfiscanf_r+0x2b8>
 800e000:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e004:	4606      	mov	r6, r0
 800e006:	91a1      	str	r1, [sp, #644]	; 0x284
 800e008:	9300      	str	r3, [sp, #0]
 800e00a:	7813      	ldrb	r3, [r2, #0]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	f000 815a 	beq.w	800e2c6 <__ssvfiscanf_r+0x2e6>
 800e012:	5dd9      	ldrb	r1, [r3, r7]
 800e014:	f011 0108 	ands.w	r1, r1, #8
 800e018:	f102 0501 	add.w	r5, r2, #1
 800e01c:	d019      	beq.n	800e052 <__ssvfiscanf_r+0x72>
 800e01e:	6863      	ldr	r3, [r4, #4]
 800e020:	2b00      	cmp	r3, #0
 800e022:	dd0f      	ble.n	800e044 <__ssvfiscanf_r+0x64>
 800e024:	6823      	ldr	r3, [r4, #0]
 800e026:	781a      	ldrb	r2, [r3, #0]
 800e028:	5cba      	ldrb	r2, [r7, r2]
 800e02a:	0712      	lsls	r2, r2, #28
 800e02c:	d401      	bmi.n	800e032 <__ssvfiscanf_r+0x52>
 800e02e:	462a      	mov	r2, r5
 800e030:	e7eb      	b.n	800e00a <__ssvfiscanf_r+0x2a>
 800e032:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e034:	3201      	adds	r2, #1
 800e036:	9245      	str	r2, [sp, #276]	; 0x114
 800e038:	6862      	ldr	r2, [r4, #4]
 800e03a:	3301      	adds	r3, #1
 800e03c:	3a01      	subs	r2, #1
 800e03e:	6062      	str	r2, [r4, #4]
 800e040:	6023      	str	r3, [r4, #0]
 800e042:	e7ec      	b.n	800e01e <__ssvfiscanf_r+0x3e>
 800e044:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e046:	4621      	mov	r1, r4
 800e048:	4630      	mov	r0, r6
 800e04a:	4798      	blx	r3
 800e04c:	2800      	cmp	r0, #0
 800e04e:	d0e9      	beq.n	800e024 <__ssvfiscanf_r+0x44>
 800e050:	e7ed      	b.n	800e02e <__ssvfiscanf_r+0x4e>
 800e052:	2b25      	cmp	r3, #37	; 0x25
 800e054:	d012      	beq.n	800e07c <__ssvfiscanf_r+0x9c>
 800e056:	469a      	mov	sl, r3
 800e058:	6863      	ldr	r3, [r4, #4]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	f340 8091 	ble.w	800e182 <__ssvfiscanf_r+0x1a2>
 800e060:	6822      	ldr	r2, [r4, #0]
 800e062:	7813      	ldrb	r3, [r2, #0]
 800e064:	4553      	cmp	r3, sl
 800e066:	f040 812e 	bne.w	800e2c6 <__ssvfiscanf_r+0x2e6>
 800e06a:	6863      	ldr	r3, [r4, #4]
 800e06c:	3b01      	subs	r3, #1
 800e06e:	6063      	str	r3, [r4, #4]
 800e070:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e072:	3201      	adds	r2, #1
 800e074:	3301      	adds	r3, #1
 800e076:	6022      	str	r2, [r4, #0]
 800e078:	9345      	str	r3, [sp, #276]	; 0x114
 800e07a:	e7d8      	b.n	800e02e <__ssvfiscanf_r+0x4e>
 800e07c:	9141      	str	r1, [sp, #260]	; 0x104
 800e07e:	9143      	str	r1, [sp, #268]	; 0x10c
 800e080:	7853      	ldrb	r3, [r2, #1]
 800e082:	2b2a      	cmp	r3, #42	; 0x2a
 800e084:	bf02      	ittt	eq
 800e086:	2310      	moveq	r3, #16
 800e088:	1c95      	addeq	r5, r2, #2
 800e08a:	9341      	streq	r3, [sp, #260]	; 0x104
 800e08c:	220a      	movs	r2, #10
 800e08e:	46aa      	mov	sl, r5
 800e090:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e094:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e098:	2b09      	cmp	r3, #9
 800e09a:	d91d      	bls.n	800e0d8 <__ssvfiscanf_r+0xf8>
 800e09c:	487e      	ldr	r0, [pc, #504]	; (800e298 <__ssvfiscanf_r+0x2b8>)
 800e09e:	2203      	movs	r2, #3
 800e0a0:	f7f2 f8b6 	bl	8000210 <memchr>
 800e0a4:	b140      	cbz	r0, 800e0b8 <__ssvfiscanf_r+0xd8>
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	eba0 0009 	sub.w	r0, r0, r9
 800e0ac:	fa03 f000 	lsl.w	r0, r3, r0
 800e0b0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e0b2:	4318      	orrs	r0, r3
 800e0b4:	9041      	str	r0, [sp, #260]	; 0x104
 800e0b6:	4655      	mov	r5, sl
 800e0b8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e0bc:	2b78      	cmp	r3, #120	; 0x78
 800e0be:	d806      	bhi.n	800e0ce <__ssvfiscanf_r+0xee>
 800e0c0:	2b57      	cmp	r3, #87	; 0x57
 800e0c2:	d810      	bhi.n	800e0e6 <__ssvfiscanf_r+0x106>
 800e0c4:	2b25      	cmp	r3, #37	; 0x25
 800e0c6:	d0c6      	beq.n	800e056 <__ssvfiscanf_r+0x76>
 800e0c8:	d856      	bhi.n	800e178 <__ssvfiscanf_r+0x198>
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d064      	beq.n	800e198 <__ssvfiscanf_r+0x1b8>
 800e0ce:	2303      	movs	r3, #3
 800e0d0:	9347      	str	r3, [sp, #284]	; 0x11c
 800e0d2:	230a      	movs	r3, #10
 800e0d4:	9342      	str	r3, [sp, #264]	; 0x108
 800e0d6:	e071      	b.n	800e1bc <__ssvfiscanf_r+0x1dc>
 800e0d8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e0da:	fb02 1103 	mla	r1, r2, r3, r1
 800e0de:	3930      	subs	r1, #48	; 0x30
 800e0e0:	9143      	str	r1, [sp, #268]	; 0x10c
 800e0e2:	4655      	mov	r5, sl
 800e0e4:	e7d3      	b.n	800e08e <__ssvfiscanf_r+0xae>
 800e0e6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e0ea:	2a20      	cmp	r2, #32
 800e0ec:	d8ef      	bhi.n	800e0ce <__ssvfiscanf_r+0xee>
 800e0ee:	a101      	add	r1, pc, #4	; (adr r1, 800e0f4 <__ssvfiscanf_r+0x114>)
 800e0f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e0f4:	0800e1a7 	.word	0x0800e1a7
 800e0f8:	0800e0cf 	.word	0x0800e0cf
 800e0fc:	0800e0cf 	.word	0x0800e0cf
 800e100:	0800e205 	.word	0x0800e205
 800e104:	0800e0cf 	.word	0x0800e0cf
 800e108:	0800e0cf 	.word	0x0800e0cf
 800e10c:	0800e0cf 	.word	0x0800e0cf
 800e110:	0800e0cf 	.word	0x0800e0cf
 800e114:	0800e0cf 	.word	0x0800e0cf
 800e118:	0800e0cf 	.word	0x0800e0cf
 800e11c:	0800e0cf 	.word	0x0800e0cf
 800e120:	0800e21b 	.word	0x0800e21b
 800e124:	0800e1f1 	.word	0x0800e1f1
 800e128:	0800e17f 	.word	0x0800e17f
 800e12c:	0800e17f 	.word	0x0800e17f
 800e130:	0800e17f 	.word	0x0800e17f
 800e134:	0800e0cf 	.word	0x0800e0cf
 800e138:	0800e1f5 	.word	0x0800e1f5
 800e13c:	0800e0cf 	.word	0x0800e0cf
 800e140:	0800e0cf 	.word	0x0800e0cf
 800e144:	0800e0cf 	.word	0x0800e0cf
 800e148:	0800e0cf 	.word	0x0800e0cf
 800e14c:	0800e22b 	.word	0x0800e22b
 800e150:	0800e1fd 	.word	0x0800e1fd
 800e154:	0800e19f 	.word	0x0800e19f
 800e158:	0800e0cf 	.word	0x0800e0cf
 800e15c:	0800e0cf 	.word	0x0800e0cf
 800e160:	0800e227 	.word	0x0800e227
 800e164:	0800e0cf 	.word	0x0800e0cf
 800e168:	0800e1f1 	.word	0x0800e1f1
 800e16c:	0800e0cf 	.word	0x0800e0cf
 800e170:	0800e0cf 	.word	0x0800e0cf
 800e174:	0800e1a7 	.word	0x0800e1a7
 800e178:	3b45      	subs	r3, #69	; 0x45
 800e17a:	2b02      	cmp	r3, #2
 800e17c:	d8a7      	bhi.n	800e0ce <__ssvfiscanf_r+0xee>
 800e17e:	2305      	movs	r3, #5
 800e180:	e01b      	b.n	800e1ba <__ssvfiscanf_r+0x1da>
 800e182:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e184:	4621      	mov	r1, r4
 800e186:	4630      	mov	r0, r6
 800e188:	4798      	blx	r3
 800e18a:	2800      	cmp	r0, #0
 800e18c:	f43f af68 	beq.w	800e060 <__ssvfiscanf_r+0x80>
 800e190:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e192:	2800      	cmp	r0, #0
 800e194:	f040 808d 	bne.w	800e2b2 <__ssvfiscanf_r+0x2d2>
 800e198:	f04f 30ff 	mov.w	r0, #4294967295
 800e19c:	e08f      	b.n	800e2be <__ssvfiscanf_r+0x2de>
 800e19e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e1a0:	f042 0220 	orr.w	r2, r2, #32
 800e1a4:	9241      	str	r2, [sp, #260]	; 0x104
 800e1a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e1a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e1ac:	9241      	str	r2, [sp, #260]	; 0x104
 800e1ae:	2210      	movs	r2, #16
 800e1b0:	2b6f      	cmp	r3, #111	; 0x6f
 800e1b2:	9242      	str	r2, [sp, #264]	; 0x108
 800e1b4:	bf34      	ite	cc
 800e1b6:	2303      	movcc	r3, #3
 800e1b8:	2304      	movcs	r3, #4
 800e1ba:	9347      	str	r3, [sp, #284]	; 0x11c
 800e1bc:	6863      	ldr	r3, [r4, #4]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	dd42      	ble.n	800e248 <__ssvfiscanf_r+0x268>
 800e1c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e1c4:	0659      	lsls	r1, r3, #25
 800e1c6:	d404      	bmi.n	800e1d2 <__ssvfiscanf_r+0x1f2>
 800e1c8:	6823      	ldr	r3, [r4, #0]
 800e1ca:	781a      	ldrb	r2, [r3, #0]
 800e1cc:	5cba      	ldrb	r2, [r7, r2]
 800e1ce:	0712      	lsls	r2, r2, #28
 800e1d0:	d441      	bmi.n	800e256 <__ssvfiscanf_r+0x276>
 800e1d2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e1d4:	2b02      	cmp	r3, #2
 800e1d6:	dc50      	bgt.n	800e27a <__ssvfiscanf_r+0x29a>
 800e1d8:	466b      	mov	r3, sp
 800e1da:	4622      	mov	r2, r4
 800e1dc:	a941      	add	r1, sp, #260	; 0x104
 800e1de:	4630      	mov	r0, r6
 800e1e0:	f000 f876 	bl	800e2d0 <_scanf_chars>
 800e1e4:	2801      	cmp	r0, #1
 800e1e6:	d06e      	beq.n	800e2c6 <__ssvfiscanf_r+0x2e6>
 800e1e8:	2802      	cmp	r0, #2
 800e1ea:	f47f af20 	bne.w	800e02e <__ssvfiscanf_r+0x4e>
 800e1ee:	e7cf      	b.n	800e190 <__ssvfiscanf_r+0x1b0>
 800e1f0:	220a      	movs	r2, #10
 800e1f2:	e7dd      	b.n	800e1b0 <__ssvfiscanf_r+0x1d0>
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	9342      	str	r3, [sp, #264]	; 0x108
 800e1f8:	2303      	movs	r3, #3
 800e1fa:	e7de      	b.n	800e1ba <__ssvfiscanf_r+0x1da>
 800e1fc:	2308      	movs	r3, #8
 800e1fe:	9342      	str	r3, [sp, #264]	; 0x108
 800e200:	2304      	movs	r3, #4
 800e202:	e7da      	b.n	800e1ba <__ssvfiscanf_r+0x1da>
 800e204:	4629      	mov	r1, r5
 800e206:	4640      	mov	r0, r8
 800e208:	f000 f9de 	bl	800e5c8 <__sccl>
 800e20c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e20e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e212:	9341      	str	r3, [sp, #260]	; 0x104
 800e214:	4605      	mov	r5, r0
 800e216:	2301      	movs	r3, #1
 800e218:	e7cf      	b.n	800e1ba <__ssvfiscanf_r+0x1da>
 800e21a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e21c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e220:	9341      	str	r3, [sp, #260]	; 0x104
 800e222:	2300      	movs	r3, #0
 800e224:	e7c9      	b.n	800e1ba <__ssvfiscanf_r+0x1da>
 800e226:	2302      	movs	r3, #2
 800e228:	e7c7      	b.n	800e1ba <__ssvfiscanf_r+0x1da>
 800e22a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e22c:	06c3      	lsls	r3, r0, #27
 800e22e:	f53f aefe 	bmi.w	800e02e <__ssvfiscanf_r+0x4e>
 800e232:	9b00      	ldr	r3, [sp, #0]
 800e234:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e236:	1d19      	adds	r1, r3, #4
 800e238:	9100      	str	r1, [sp, #0]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	f010 0f01 	tst.w	r0, #1
 800e240:	bf14      	ite	ne
 800e242:	801a      	strhne	r2, [r3, #0]
 800e244:	601a      	streq	r2, [r3, #0]
 800e246:	e6f2      	b.n	800e02e <__ssvfiscanf_r+0x4e>
 800e248:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e24a:	4621      	mov	r1, r4
 800e24c:	4630      	mov	r0, r6
 800e24e:	4798      	blx	r3
 800e250:	2800      	cmp	r0, #0
 800e252:	d0b6      	beq.n	800e1c2 <__ssvfiscanf_r+0x1e2>
 800e254:	e79c      	b.n	800e190 <__ssvfiscanf_r+0x1b0>
 800e256:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e258:	3201      	adds	r2, #1
 800e25a:	9245      	str	r2, [sp, #276]	; 0x114
 800e25c:	6862      	ldr	r2, [r4, #4]
 800e25e:	3a01      	subs	r2, #1
 800e260:	2a00      	cmp	r2, #0
 800e262:	6062      	str	r2, [r4, #4]
 800e264:	dd02      	ble.n	800e26c <__ssvfiscanf_r+0x28c>
 800e266:	3301      	adds	r3, #1
 800e268:	6023      	str	r3, [r4, #0]
 800e26a:	e7ad      	b.n	800e1c8 <__ssvfiscanf_r+0x1e8>
 800e26c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e26e:	4621      	mov	r1, r4
 800e270:	4630      	mov	r0, r6
 800e272:	4798      	blx	r3
 800e274:	2800      	cmp	r0, #0
 800e276:	d0a7      	beq.n	800e1c8 <__ssvfiscanf_r+0x1e8>
 800e278:	e78a      	b.n	800e190 <__ssvfiscanf_r+0x1b0>
 800e27a:	2b04      	cmp	r3, #4
 800e27c:	dc0e      	bgt.n	800e29c <__ssvfiscanf_r+0x2bc>
 800e27e:	466b      	mov	r3, sp
 800e280:	4622      	mov	r2, r4
 800e282:	a941      	add	r1, sp, #260	; 0x104
 800e284:	4630      	mov	r0, r6
 800e286:	f000 f87d 	bl	800e384 <_scanf_i>
 800e28a:	e7ab      	b.n	800e1e4 <__ssvfiscanf_r+0x204>
 800e28c:	0800df2d 	.word	0x0800df2d
 800e290:	0800dfa7 	.word	0x0800dfa7
 800e294:	08011d49 	.word	0x08011d49
 800e298:	080120b2 	.word	0x080120b2
 800e29c:	4b0b      	ldr	r3, [pc, #44]	; (800e2cc <__ssvfiscanf_r+0x2ec>)
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	f43f aec5 	beq.w	800e02e <__ssvfiscanf_r+0x4e>
 800e2a4:	466b      	mov	r3, sp
 800e2a6:	4622      	mov	r2, r4
 800e2a8:	a941      	add	r1, sp, #260	; 0x104
 800e2aa:	4630      	mov	r0, r6
 800e2ac:	f7fc fb98 	bl	800a9e0 <_scanf_float>
 800e2b0:	e798      	b.n	800e1e4 <__ssvfiscanf_r+0x204>
 800e2b2:	89a3      	ldrh	r3, [r4, #12]
 800e2b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e2b8:	bf18      	it	ne
 800e2ba:	f04f 30ff 	movne.w	r0, #4294967295
 800e2be:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2c6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e2c8:	e7f9      	b.n	800e2be <__ssvfiscanf_r+0x2de>
 800e2ca:	bf00      	nop
 800e2cc:	0800a9e1 	.word	0x0800a9e1

0800e2d0 <_scanf_chars>:
 800e2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2d4:	4615      	mov	r5, r2
 800e2d6:	688a      	ldr	r2, [r1, #8]
 800e2d8:	4680      	mov	r8, r0
 800e2da:	460c      	mov	r4, r1
 800e2dc:	b932      	cbnz	r2, 800e2ec <_scanf_chars+0x1c>
 800e2de:	698a      	ldr	r2, [r1, #24]
 800e2e0:	2a00      	cmp	r2, #0
 800e2e2:	bf0c      	ite	eq
 800e2e4:	2201      	moveq	r2, #1
 800e2e6:	f04f 32ff 	movne.w	r2, #4294967295
 800e2ea:	608a      	str	r2, [r1, #8]
 800e2ec:	6822      	ldr	r2, [r4, #0]
 800e2ee:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e380 <_scanf_chars+0xb0>
 800e2f2:	06d1      	lsls	r1, r2, #27
 800e2f4:	bf5f      	itttt	pl
 800e2f6:	681a      	ldrpl	r2, [r3, #0]
 800e2f8:	1d11      	addpl	r1, r2, #4
 800e2fa:	6019      	strpl	r1, [r3, #0]
 800e2fc:	6816      	ldrpl	r6, [r2, #0]
 800e2fe:	2700      	movs	r7, #0
 800e300:	69a0      	ldr	r0, [r4, #24]
 800e302:	b188      	cbz	r0, 800e328 <_scanf_chars+0x58>
 800e304:	2801      	cmp	r0, #1
 800e306:	d107      	bne.n	800e318 <_scanf_chars+0x48>
 800e308:	682a      	ldr	r2, [r5, #0]
 800e30a:	7811      	ldrb	r1, [r2, #0]
 800e30c:	6962      	ldr	r2, [r4, #20]
 800e30e:	5c52      	ldrb	r2, [r2, r1]
 800e310:	b952      	cbnz	r2, 800e328 <_scanf_chars+0x58>
 800e312:	2f00      	cmp	r7, #0
 800e314:	d031      	beq.n	800e37a <_scanf_chars+0xaa>
 800e316:	e022      	b.n	800e35e <_scanf_chars+0x8e>
 800e318:	2802      	cmp	r0, #2
 800e31a:	d120      	bne.n	800e35e <_scanf_chars+0x8e>
 800e31c:	682b      	ldr	r3, [r5, #0]
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e324:	071b      	lsls	r3, r3, #28
 800e326:	d41a      	bmi.n	800e35e <_scanf_chars+0x8e>
 800e328:	6823      	ldr	r3, [r4, #0]
 800e32a:	06da      	lsls	r2, r3, #27
 800e32c:	bf5e      	ittt	pl
 800e32e:	682b      	ldrpl	r3, [r5, #0]
 800e330:	781b      	ldrbpl	r3, [r3, #0]
 800e332:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e336:	682a      	ldr	r2, [r5, #0]
 800e338:	686b      	ldr	r3, [r5, #4]
 800e33a:	3201      	adds	r2, #1
 800e33c:	602a      	str	r2, [r5, #0]
 800e33e:	68a2      	ldr	r2, [r4, #8]
 800e340:	3b01      	subs	r3, #1
 800e342:	3a01      	subs	r2, #1
 800e344:	606b      	str	r3, [r5, #4]
 800e346:	3701      	adds	r7, #1
 800e348:	60a2      	str	r2, [r4, #8]
 800e34a:	b142      	cbz	r2, 800e35e <_scanf_chars+0x8e>
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	dcd7      	bgt.n	800e300 <_scanf_chars+0x30>
 800e350:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e354:	4629      	mov	r1, r5
 800e356:	4640      	mov	r0, r8
 800e358:	4798      	blx	r3
 800e35a:	2800      	cmp	r0, #0
 800e35c:	d0d0      	beq.n	800e300 <_scanf_chars+0x30>
 800e35e:	6823      	ldr	r3, [r4, #0]
 800e360:	f013 0310 	ands.w	r3, r3, #16
 800e364:	d105      	bne.n	800e372 <_scanf_chars+0xa2>
 800e366:	68e2      	ldr	r2, [r4, #12]
 800e368:	3201      	adds	r2, #1
 800e36a:	60e2      	str	r2, [r4, #12]
 800e36c:	69a2      	ldr	r2, [r4, #24]
 800e36e:	b102      	cbz	r2, 800e372 <_scanf_chars+0xa2>
 800e370:	7033      	strb	r3, [r6, #0]
 800e372:	6923      	ldr	r3, [r4, #16]
 800e374:	443b      	add	r3, r7
 800e376:	6123      	str	r3, [r4, #16]
 800e378:	2000      	movs	r0, #0
 800e37a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e37e:	bf00      	nop
 800e380:	08011d49 	.word	0x08011d49

0800e384 <_scanf_i>:
 800e384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e388:	4698      	mov	r8, r3
 800e38a:	4b76      	ldr	r3, [pc, #472]	; (800e564 <_scanf_i+0x1e0>)
 800e38c:	460c      	mov	r4, r1
 800e38e:	4682      	mov	sl, r0
 800e390:	4616      	mov	r6, r2
 800e392:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e396:	b087      	sub	sp, #28
 800e398:	ab03      	add	r3, sp, #12
 800e39a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e39e:	4b72      	ldr	r3, [pc, #456]	; (800e568 <_scanf_i+0x1e4>)
 800e3a0:	69a1      	ldr	r1, [r4, #24]
 800e3a2:	4a72      	ldr	r2, [pc, #456]	; (800e56c <_scanf_i+0x1e8>)
 800e3a4:	2903      	cmp	r1, #3
 800e3a6:	bf18      	it	ne
 800e3a8:	461a      	movne	r2, r3
 800e3aa:	68a3      	ldr	r3, [r4, #8]
 800e3ac:	9201      	str	r2, [sp, #4]
 800e3ae:	1e5a      	subs	r2, r3, #1
 800e3b0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e3b4:	bf88      	it	hi
 800e3b6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e3ba:	4627      	mov	r7, r4
 800e3bc:	bf82      	ittt	hi
 800e3be:	eb03 0905 	addhi.w	r9, r3, r5
 800e3c2:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e3c6:	60a3      	strhi	r3, [r4, #8]
 800e3c8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e3cc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e3d0:	bf98      	it	ls
 800e3d2:	f04f 0900 	movls.w	r9, #0
 800e3d6:	6023      	str	r3, [r4, #0]
 800e3d8:	463d      	mov	r5, r7
 800e3da:	f04f 0b00 	mov.w	fp, #0
 800e3de:	6831      	ldr	r1, [r6, #0]
 800e3e0:	ab03      	add	r3, sp, #12
 800e3e2:	7809      	ldrb	r1, [r1, #0]
 800e3e4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e3e8:	2202      	movs	r2, #2
 800e3ea:	f7f1 ff11 	bl	8000210 <memchr>
 800e3ee:	b328      	cbz	r0, 800e43c <_scanf_i+0xb8>
 800e3f0:	f1bb 0f01 	cmp.w	fp, #1
 800e3f4:	d159      	bne.n	800e4aa <_scanf_i+0x126>
 800e3f6:	6862      	ldr	r2, [r4, #4]
 800e3f8:	b92a      	cbnz	r2, 800e406 <_scanf_i+0x82>
 800e3fa:	6822      	ldr	r2, [r4, #0]
 800e3fc:	2308      	movs	r3, #8
 800e3fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e402:	6063      	str	r3, [r4, #4]
 800e404:	6022      	str	r2, [r4, #0]
 800e406:	6822      	ldr	r2, [r4, #0]
 800e408:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e40c:	6022      	str	r2, [r4, #0]
 800e40e:	68a2      	ldr	r2, [r4, #8]
 800e410:	1e51      	subs	r1, r2, #1
 800e412:	60a1      	str	r1, [r4, #8]
 800e414:	b192      	cbz	r2, 800e43c <_scanf_i+0xb8>
 800e416:	6832      	ldr	r2, [r6, #0]
 800e418:	1c51      	adds	r1, r2, #1
 800e41a:	6031      	str	r1, [r6, #0]
 800e41c:	7812      	ldrb	r2, [r2, #0]
 800e41e:	f805 2b01 	strb.w	r2, [r5], #1
 800e422:	6872      	ldr	r2, [r6, #4]
 800e424:	3a01      	subs	r2, #1
 800e426:	2a00      	cmp	r2, #0
 800e428:	6072      	str	r2, [r6, #4]
 800e42a:	dc07      	bgt.n	800e43c <_scanf_i+0xb8>
 800e42c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e430:	4631      	mov	r1, r6
 800e432:	4650      	mov	r0, sl
 800e434:	4790      	blx	r2
 800e436:	2800      	cmp	r0, #0
 800e438:	f040 8085 	bne.w	800e546 <_scanf_i+0x1c2>
 800e43c:	f10b 0b01 	add.w	fp, fp, #1
 800e440:	f1bb 0f03 	cmp.w	fp, #3
 800e444:	d1cb      	bne.n	800e3de <_scanf_i+0x5a>
 800e446:	6863      	ldr	r3, [r4, #4]
 800e448:	b90b      	cbnz	r3, 800e44e <_scanf_i+0xca>
 800e44a:	230a      	movs	r3, #10
 800e44c:	6063      	str	r3, [r4, #4]
 800e44e:	6863      	ldr	r3, [r4, #4]
 800e450:	4947      	ldr	r1, [pc, #284]	; (800e570 <_scanf_i+0x1ec>)
 800e452:	6960      	ldr	r0, [r4, #20]
 800e454:	1ac9      	subs	r1, r1, r3
 800e456:	f000 f8b7 	bl	800e5c8 <__sccl>
 800e45a:	f04f 0b00 	mov.w	fp, #0
 800e45e:	68a3      	ldr	r3, [r4, #8]
 800e460:	6822      	ldr	r2, [r4, #0]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d03d      	beq.n	800e4e2 <_scanf_i+0x15e>
 800e466:	6831      	ldr	r1, [r6, #0]
 800e468:	6960      	ldr	r0, [r4, #20]
 800e46a:	f891 c000 	ldrb.w	ip, [r1]
 800e46e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e472:	2800      	cmp	r0, #0
 800e474:	d035      	beq.n	800e4e2 <_scanf_i+0x15e>
 800e476:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e47a:	d124      	bne.n	800e4c6 <_scanf_i+0x142>
 800e47c:	0510      	lsls	r0, r2, #20
 800e47e:	d522      	bpl.n	800e4c6 <_scanf_i+0x142>
 800e480:	f10b 0b01 	add.w	fp, fp, #1
 800e484:	f1b9 0f00 	cmp.w	r9, #0
 800e488:	d003      	beq.n	800e492 <_scanf_i+0x10e>
 800e48a:	3301      	adds	r3, #1
 800e48c:	f109 39ff 	add.w	r9, r9, #4294967295
 800e490:	60a3      	str	r3, [r4, #8]
 800e492:	6873      	ldr	r3, [r6, #4]
 800e494:	3b01      	subs	r3, #1
 800e496:	2b00      	cmp	r3, #0
 800e498:	6073      	str	r3, [r6, #4]
 800e49a:	dd1b      	ble.n	800e4d4 <_scanf_i+0x150>
 800e49c:	6833      	ldr	r3, [r6, #0]
 800e49e:	3301      	adds	r3, #1
 800e4a0:	6033      	str	r3, [r6, #0]
 800e4a2:	68a3      	ldr	r3, [r4, #8]
 800e4a4:	3b01      	subs	r3, #1
 800e4a6:	60a3      	str	r3, [r4, #8]
 800e4a8:	e7d9      	b.n	800e45e <_scanf_i+0xda>
 800e4aa:	f1bb 0f02 	cmp.w	fp, #2
 800e4ae:	d1ae      	bne.n	800e40e <_scanf_i+0x8a>
 800e4b0:	6822      	ldr	r2, [r4, #0]
 800e4b2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e4b6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e4ba:	d1bf      	bne.n	800e43c <_scanf_i+0xb8>
 800e4bc:	2310      	movs	r3, #16
 800e4be:	6063      	str	r3, [r4, #4]
 800e4c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e4c4:	e7a2      	b.n	800e40c <_scanf_i+0x88>
 800e4c6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e4ca:	6022      	str	r2, [r4, #0]
 800e4cc:	780b      	ldrb	r3, [r1, #0]
 800e4ce:	f805 3b01 	strb.w	r3, [r5], #1
 800e4d2:	e7de      	b.n	800e492 <_scanf_i+0x10e>
 800e4d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e4d8:	4631      	mov	r1, r6
 800e4da:	4650      	mov	r0, sl
 800e4dc:	4798      	blx	r3
 800e4de:	2800      	cmp	r0, #0
 800e4e0:	d0df      	beq.n	800e4a2 <_scanf_i+0x11e>
 800e4e2:	6823      	ldr	r3, [r4, #0]
 800e4e4:	05db      	lsls	r3, r3, #23
 800e4e6:	d50d      	bpl.n	800e504 <_scanf_i+0x180>
 800e4e8:	42bd      	cmp	r5, r7
 800e4ea:	d909      	bls.n	800e500 <_scanf_i+0x17c>
 800e4ec:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e4f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e4f4:	4632      	mov	r2, r6
 800e4f6:	4650      	mov	r0, sl
 800e4f8:	4798      	blx	r3
 800e4fa:	f105 39ff 	add.w	r9, r5, #4294967295
 800e4fe:	464d      	mov	r5, r9
 800e500:	42bd      	cmp	r5, r7
 800e502:	d02d      	beq.n	800e560 <_scanf_i+0x1dc>
 800e504:	6822      	ldr	r2, [r4, #0]
 800e506:	f012 0210 	ands.w	r2, r2, #16
 800e50a:	d113      	bne.n	800e534 <_scanf_i+0x1b0>
 800e50c:	702a      	strb	r2, [r5, #0]
 800e50e:	6863      	ldr	r3, [r4, #4]
 800e510:	9e01      	ldr	r6, [sp, #4]
 800e512:	4639      	mov	r1, r7
 800e514:	4650      	mov	r0, sl
 800e516:	47b0      	blx	r6
 800e518:	6821      	ldr	r1, [r4, #0]
 800e51a:	f8d8 3000 	ldr.w	r3, [r8]
 800e51e:	f011 0f20 	tst.w	r1, #32
 800e522:	d013      	beq.n	800e54c <_scanf_i+0x1c8>
 800e524:	1d1a      	adds	r2, r3, #4
 800e526:	f8c8 2000 	str.w	r2, [r8]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	6018      	str	r0, [r3, #0]
 800e52e:	68e3      	ldr	r3, [r4, #12]
 800e530:	3301      	adds	r3, #1
 800e532:	60e3      	str	r3, [r4, #12]
 800e534:	1bed      	subs	r5, r5, r7
 800e536:	44ab      	add	fp, r5
 800e538:	6925      	ldr	r5, [r4, #16]
 800e53a:	445d      	add	r5, fp
 800e53c:	6125      	str	r5, [r4, #16]
 800e53e:	2000      	movs	r0, #0
 800e540:	b007      	add	sp, #28
 800e542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e546:	f04f 0b00 	mov.w	fp, #0
 800e54a:	e7ca      	b.n	800e4e2 <_scanf_i+0x15e>
 800e54c:	1d1a      	adds	r2, r3, #4
 800e54e:	f8c8 2000 	str.w	r2, [r8]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	f011 0f01 	tst.w	r1, #1
 800e558:	bf14      	ite	ne
 800e55a:	8018      	strhne	r0, [r3, #0]
 800e55c:	6018      	streq	r0, [r3, #0]
 800e55e:	e7e6      	b.n	800e52e <_scanf_i+0x1aa>
 800e560:	2001      	movs	r0, #1
 800e562:	e7ed      	b.n	800e540 <_scanf_i+0x1bc>
 800e564:	08011cac 	.word	0x08011cac
 800e568:	0800e745 	.word	0x0800e745
 800e56c:	0800bc85 	.word	0x0800bc85
 800e570:	080120d6 	.word	0x080120d6

0800e574 <_read_r>:
 800e574:	b538      	push	{r3, r4, r5, lr}
 800e576:	4d07      	ldr	r5, [pc, #28]	; (800e594 <_read_r+0x20>)
 800e578:	4604      	mov	r4, r0
 800e57a:	4608      	mov	r0, r1
 800e57c:	4611      	mov	r1, r2
 800e57e:	2200      	movs	r2, #0
 800e580:	602a      	str	r2, [r5, #0]
 800e582:	461a      	mov	r2, r3
 800e584:	f7f5 fda6 	bl	80040d4 <_read>
 800e588:	1c43      	adds	r3, r0, #1
 800e58a:	d102      	bne.n	800e592 <_read_r+0x1e>
 800e58c:	682b      	ldr	r3, [r5, #0]
 800e58e:	b103      	cbz	r3, 800e592 <_read_r+0x1e>
 800e590:	6023      	str	r3, [r4, #0]
 800e592:	bd38      	pop	{r3, r4, r5, pc}
 800e594:	20013ef8 	.word	0x20013ef8

0800e598 <nan>:
 800e598:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e5a0 <nan+0x8>
 800e59c:	4770      	bx	lr
 800e59e:	bf00      	nop
 800e5a0:	00000000 	.word	0x00000000
 800e5a4:	7ff80000 	.word	0x7ff80000

0800e5a8 <_sbrk_r>:
 800e5a8:	b538      	push	{r3, r4, r5, lr}
 800e5aa:	4d06      	ldr	r5, [pc, #24]	; (800e5c4 <_sbrk_r+0x1c>)
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	4604      	mov	r4, r0
 800e5b0:	4608      	mov	r0, r1
 800e5b2:	602b      	str	r3, [r5, #0]
 800e5b4:	f7f5 fdfc 	bl	80041b0 <_sbrk>
 800e5b8:	1c43      	adds	r3, r0, #1
 800e5ba:	d102      	bne.n	800e5c2 <_sbrk_r+0x1a>
 800e5bc:	682b      	ldr	r3, [r5, #0]
 800e5be:	b103      	cbz	r3, 800e5c2 <_sbrk_r+0x1a>
 800e5c0:	6023      	str	r3, [r4, #0]
 800e5c2:	bd38      	pop	{r3, r4, r5, pc}
 800e5c4:	20013ef8 	.word	0x20013ef8

0800e5c8 <__sccl>:
 800e5c8:	b570      	push	{r4, r5, r6, lr}
 800e5ca:	780b      	ldrb	r3, [r1, #0]
 800e5cc:	4604      	mov	r4, r0
 800e5ce:	2b5e      	cmp	r3, #94	; 0x5e
 800e5d0:	bf0b      	itete	eq
 800e5d2:	784b      	ldrbeq	r3, [r1, #1]
 800e5d4:	1c48      	addne	r0, r1, #1
 800e5d6:	1c88      	addeq	r0, r1, #2
 800e5d8:	2200      	movne	r2, #0
 800e5da:	bf08      	it	eq
 800e5dc:	2201      	moveq	r2, #1
 800e5de:	1e61      	subs	r1, r4, #1
 800e5e0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e5e4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800e5e8:	42a9      	cmp	r1, r5
 800e5ea:	d1fb      	bne.n	800e5e4 <__sccl+0x1c>
 800e5ec:	b90b      	cbnz	r3, 800e5f2 <__sccl+0x2a>
 800e5ee:	3801      	subs	r0, #1
 800e5f0:	bd70      	pop	{r4, r5, r6, pc}
 800e5f2:	f082 0201 	eor.w	r2, r2, #1
 800e5f6:	54e2      	strb	r2, [r4, r3]
 800e5f8:	4605      	mov	r5, r0
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	f810 1b01 	ldrb.w	r1, [r0], #1
 800e600:	292d      	cmp	r1, #45	; 0x2d
 800e602:	d006      	beq.n	800e612 <__sccl+0x4a>
 800e604:	295d      	cmp	r1, #93	; 0x5d
 800e606:	d0f3      	beq.n	800e5f0 <__sccl+0x28>
 800e608:	b909      	cbnz	r1, 800e60e <__sccl+0x46>
 800e60a:	4628      	mov	r0, r5
 800e60c:	e7f0      	b.n	800e5f0 <__sccl+0x28>
 800e60e:	460b      	mov	r3, r1
 800e610:	e7f1      	b.n	800e5f6 <__sccl+0x2e>
 800e612:	786e      	ldrb	r6, [r5, #1]
 800e614:	2e5d      	cmp	r6, #93	; 0x5d
 800e616:	d0fa      	beq.n	800e60e <__sccl+0x46>
 800e618:	42b3      	cmp	r3, r6
 800e61a:	dcf8      	bgt.n	800e60e <__sccl+0x46>
 800e61c:	3502      	adds	r5, #2
 800e61e:	4619      	mov	r1, r3
 800e620:	3101      	adds	r1, #1
 800e622:	428e      	cmp	r6, r1
 800e624:	5462      	strb	r2, [r4, r1]
 800e626:	dcfb      	bgt.n	800e620 <__sccl+0x58>
 800e628:	1af1      	subs	r1, r6, r3
 800e62a:	3901      	subs	r1, #1
 800e62c:	1c58      	adds	r0, r3, #1
 800e62e:	42b3      	cmp	r3, r6
 800e630:	bfa8      	it	ge
 800e632:	2100      	movge	r1, #0
 800e634:	1843      	adds	r3, r0, r1
 800e636:	e7e0      	b.n	800e5fa <__sccl+0x32>

0800e638 <strncmp>:
 800e638:	b510      	push	{r4, lr}
 800e63a:	b17a      	cbz	r2, 800e65c <strncmp+0x24>
 800e63c:	4603      	mov	r3, r0
 800e63e:	3901      	subs	r1, #1
 800e640:	1884      	adds	r4, r0, r2
 800e642:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e646:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e64a:	4290      	cmp	r0, r2
 800e64c:	d101      	bne.n	800e652 <strncmp+0x1a>
 800e64e:	42a3      	cmp	r3, r4
 800e650:	d101      	bne.n	800e656 <strncmp+0x1e>
 800e652:	1a80      	subs	r0, r0, r2
 800e654:	bd10      	pop	{r4, pc}
 800e656:	2800      	cmp	r0, #0
 800e658:	d1f3      	bne.n	800e642 <strncmp+0xa>
 800e65a:	e7fa      	b.n	800e652 <strncmp+0x1a>
 800e65c:	4610      	mov	r0, r2
 800e65e:	e7f9      	b.n	800e654 <strncmp+0x1c>

0800e660 <_strtoul_l.constprop.0>:
 800e660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e664:	4f36      	ldr	r7, [pc, #216]	; (800e740 <_strtoul_l.constprop.0+0xe0>)
 800e666:	4686      	mov	lr, r0
 800e668:	460d      	mov	r5, r1
 800e66a:	4628      	mov	r0, r5
 800e66c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e670:	5de6      	ldrb	r6, [r4, r7]
 800e672:	f016 0608 	ands.w	r6, r6, #8
 800e676:	d1f8      	bne.n	800e66a <_strtoul_l.constprop.0+0xa>
 800e678:	2c2d      	cmp	r4, #45	; 0x2d
 800e67a:	d12f      	bne.n	800e6dc <_strtoul_l.constprop.0+0x7c>
 800e67c:	782c      	ldrb	r4, [r5, #0]
 800e67e:	2601      	movs	r6, #1
 800e680:	1c85      	adds	r5, r0, #2
 800e682:	2b00      	cmp	r3, #0
 800e684:	d057      	beq.n	800e736 <_strtoul_l.constprop.0+0xd6>
 800e686:	2b10      	cmp	r3, #16
 800e688:	d109      	bne.n	800e69e <_strtoul_l.constprop.0+0x3e>
 800e68a:	2c30      	cmp	r4, #48	; 0x30
 800e68c:	d107      	bne.n	800e69e <_strtoul_l.constprop.0+0x3e>
 800e68e:	7828      	ldrb	r0, [r5, #0]
 800e690:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e694:	2858      	cmp	r0, #88	; 0x58
 800e696:	d149      	bne.n	800e72c <_strtoul_l.constprop.0+0xcc>
 800e698:	786c      	ldrb	r4, [r5, #1]
 800e69a:	2310      	movs	r3, #16
 800e69c:	3502      	adds	r5, #2
 800e69e:	f04f 38ff 	mov.w	r8, #4294967295
 800e6a2:	2700      	movs	r7, #0
 800e6a4:	fbb8 f8f3 	udiv	r8, r8, r3
 800e6a8:	fb03 f908 	mul.w	r9, r3, r8
 800e6ac:	ea6f 0909 	mvn.w	r9, r9
 800e6b0:	4638      	mov	r0, r7
 800e6b2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e6b6:	f1bc 0f09 	cmp.w	ip, #9
 800e6ba:	d814      	bhi.n	800e6e6 <_strtoul_l.constprop.0+0x86>
 800e6bc:	4664      	mov	r4, ip
 800e6be:	42a3      	cmp	r3, r4
 800e6c0:	dd22      	ble.n	800e708 <_strtoul_l.constprop.0+0xa8>
 800e6c2:	2f00      	cmp	r7, #0
 800e6c4:	db1d      	blt.n	800e702 <_strtoul_l.constprop.0+0xa2>
 800e6c6:	4580      	cmp	r8, r0
 800e6c8:	d31b      	bcc.n	800e702 <_strtoul_l.constprop.0+0xa2>
 800e6ca:	d101      	bne.n	800e6d0 <_strtoul_l.constprop.0+0x70>
 800e6cc:	45a1      	cmp	r9, r4
 800e6ce:	db18      	blt.n	800e702 <_strtoul_l.constprop.0+0xa2>
 800e6d0:	fb00 4003 	mla	r0, r0, r3, r4
 800e6d4:	2701      	movs	r7, #1
 800e6d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e6da:	e7ea      	b.n	800e6b2 <_strtoul_l.constprop.0+0x52>
 800e6dc:	2c2b      	cmp	r4, #43	; 0x2b
 800e6de:	bf04      	itt	eq
 800e6e0:	782c      	ldrbeq	r4, [r5, #0]
 800e6e2:	1c85      	addeq	r5, r0, #2
 800e6e4:	e7cd      	b.n	800e682 <_strtoul_l.constprop.0+0x22>
 800e6e6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e6ea:	f1bc 0f19 	cmp.w	ip, #25
 800e6ee:	d801      	bhi.n	800e6f4 <_strtoul_l.constprop.0+0x94>
 800e6f0:	3c37      	subs	r4, #55	; 0x37
 800e6f2:	e7e4      	b.n	800e6be <_strtoul_l.constprop.0+0x5e>
 800e6f4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e6f8:	f1bc 0f19 	cmp.w	ip, #25
 800e6fc:	d804      	bhi.n	800e708 <_strtoul_l.constprop.0+0xa8>
 800e6fe:	3c57      	subs	r4, #87	; 0x57
 800e700:	e7dd      	b.n	800e6be <_strtoul_l.constprop.0+0x5e>
 800e702:	f04f 37ff 	mov.w	r7, #4294967295
 800e706:	e7e6      	b.n	800e6d6 <_strtoul_l.constprop.0+0x76>
 800e708:	2f00      	cmp	r7, #0
 800e70a:	da07      	bge.n	800e71c <_strtoul_l.constprop.0+0xbc>
 800e70c:	2322      	movs	r3, #34	; 0x22
 800e70e:	f8ce 3000 	str.w	r3, [lr]
 800e712:	f04f 30ff 	mov.w	r0, #4294967295
 800e716:	b932      	cbnz	r2, 800e726 <_strtoul_l.constprop.0+0xc6>
 800e718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e71c:	b106      	cbz	r6, 800e720 <_strtoul_l.constprop.0+0xc0>
 800e71e:	4240      	negs	r0, r0
 800e720:	2a00      	cmp	r2, #0
 800e722:	d0f9      	beq.n	800e718 <_strtoul_l.constprop.0+0xb8>
 800e724:	b107      	cbz	r7, 800e728 <_strtoul_l.constprop.0+0xc8>
 800e726:	1e69      	subs	r1, r5, #1
 800e728:	6011      	str	r1, [r2, #0]
 800e72a:	e7f5      	b.n	800e718 <_strtoul_l.constprop.0+0xb8>
 800e72c:	2430      	movs	r4, #48	; 0x30
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d1b5      	bne.n	800e69e <_strtoul_l.constprop.0+0x3e>
 800e732:	2308      	movs	r3, #8
 800e734:	e7b3      	b.n	800e69e <_strtoul_l.constprop.0+0x3e>
 800e736:	2c30      	cmp	r4, #48	; 0x30
 800e738:	d0a9      	beq.n	800e68e <_strtoul_l.constprop.0+0x2e>
 800e73a:	230a      	movs	r3, #10
 800e73c:	e7af      	b.n	800e69e <_strtoul_l.constprop.0+0x3e>
 800e73e:	bf00      	nop
 800e740:	08011d49 	.word	0x08011d49

0800e744 <_strtoul_r>:
 800e744:	f7ff bf8c 	b.w	800e660 <_strtoul_l.constprop.0>

0800e748 <__submore>:
 800e748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e74c:	460c      	mov	r4, r1
 800e74e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e750:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e754:	4299      	cmp	r1, r3
 800e756:	d11d      	bne.n	800e794 <__submore+0x4c>
 800e758:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e75c:	f7ff fa16 	bl	800db8c <_malloc_r>
 800e760:	b918      	cbnz	r0, 800e76a <__submore+0x22>
 800e762:	f04f 30ff 	mov.w	r0, #4294967295
 800e766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e76a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e76e:	63a3      	str	r3, [r4, #56]	; 0x38
 800e770:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e774:	6360      	str	r0, [r4, #52]	; 0x34
 800e776:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e77a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e77e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800e782:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e786:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800e78a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e78e:	6020      	str	r0, [r4, #0]
 800e790:	2000      	movs	r0, #0
 800e792:	e7e8      	b.n	800e766 <__submore+0x1e>
 800e794:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e796:	0077      	lsls	r7, r6, #1
 800e798:	463a      	mov	r2, r7
 800e79a:	f000 fa2d 	bl	800ebf8 <_realloc_r>
 800e79e:	4605      	mov	r5, r0
 800e7a0:	2800      	cmp	r0, #0
 800e7a2:	d0de      	beq.n	800e762 <__submore+0x1a>
 800e7a4:	eb00 0806 	add.w	r8, r0, r6
 800e7a8:	4601      	mov	r1, r0
 800e7aa:	4632      	mov	r2, r6
 800e7ac:	4640      	mov	r0, r8
 800e7ae:	f7fb fc97 	bl	800a0e0 <memcpy>
 800e7b2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e7b6:	f8c4 8000 	str.w	r8, [r4]
 800e7ba:	e7e9      	b.n	800e790 <__submore+0x48>

0800e7bc <__ascii_wctomb>:
 800e7bc:	b149      	cbz	r1, 800e7d2 <__ascii_wctomb+0x16>
 800e7be:	2aff      	cmp	r2, #255	; 0xff
 800e7c0:	bf85      	ittet	hi
 800e7c2:	238a      	movhi	r3, #138	; 0x8a
 800e7c4:	6003      	strhi	r3, [r0, #0]
 800e7c6:	700a      	strbls	r2, [r1, #0]
 800e7c8:	f04f 30ff 	movhi.w	r0, #4294967295
 800e7cc:	bf98      	it	ls
 800e7ce:	2001      	movls	r0, #1
 800e7d0:	4770      	bx	lr
 800e7d2:	4608      	mov	r0, r1
 800e7d4:	4770      	bx	lr
	...

0800e7d8 <__assert_func>:
 800e7d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7da:	4614      	mov	r4, r2
 800e7dc:	461a      	mov	r2, r3
 800e7de:	4b09      	ldr	r3, [pc, #36]	; (800e804 <__assert_func+0x2c>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	4605      	mov	r5, r0
 800e7e4:	68d8      	ldr	r0, [r3, #12]
 800e7e6:	b14c      	cbz	r4, 800e7fc <__assert_func+0x24>
 800e7e8:	4b07      	ldr	r3, [pc, #28]	; (800e808 <__assert_func+0x30>)
 800e7ea:	9100      	str	r1, [sp, #0]
 800e7ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e7f0:	4906      	ldr	r1, [pc, #24]	; (800e80c <__assert_func+0x34>)
 800e7f2:	462b      	mov	r3, r5
 800e7f4:	f000 f9a6 	bl	800eb44 <fiprintf>
 800e7f8:	f000 fc46 	bl	800f088 <abort>
 800e7fc:	4b04      	ldr	r3, [pc, #16]	; (800e810 <__assert_func+0x38>)
 800e7fe:	461c      	mov	r4, r3
 800e800:	e7f3      	b.n	800e7ea <__assert_func+0x12>
 800e802:	bf00      	nop
 800e804:	20000020 	.word	0x20000020
 800e808:	080120d8 	.word	0x080120d8
 800e80c:	080120e5 	.word	0x080120e5
 800e810:	08012113 	.word	0x08012113

0800e814 <__sflush_r>:
 800e814:	898a      	ldrh	r2, [r1, #12]
 800e816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e81a:	4605      	mov	r5, r0
 800e81c:	0710      	lsls	r0, r2, #28
 800e81e:	460c      	mov	r4, r1
 800e820:	d458      	bmi.n	800e8d4 <__sflush_r+0xc0>
 800e822:	684b      	ldr	r3, [r1, #4]
 800e824:	2b00      	cmp	r3, #0
 800e826:	dc05      	bgt.n	800e834 <__sflush_r+0x20>
 800e828:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	dc02      	bgt.n	800e834 <__sflush_r+0x20>
 800e82e:	2000      	movs	r0, #0
 800e830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e834:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e836:	2e00      	cmp	r6, #0
 800e838:	d0f9      	beq.n	800e82e <__sflush_r+0x1a>
 800e83a:	2300      	movs	r3, #0
 800e83c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e840:	682f      	ldr	r7, [r5, #0]
 800e842:	602b      	str	r3, [r5, #0]
 800e844:	d032      	beq.n	800e8ac <__sflush_r+0x98>
 800e846:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e848:	89a3      	ldrh	r3, [r4, #12]
 800e84a:	075a      	lsls	r2, r3, #29
 800e84c:	d505      	bpl.n	800e85a <__sflush_r+0x46>
 800e84e:	6863      	ldr	r3, [r4, #4]
 800e850:	1ac0      	subs	r0, r0, r3
 800e852:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e854:	b10b      	cbz	r3, 800e85a <__sflush_r+0x46>
 800e856:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e858:	1ac0      	subs	r0, r0, r3
 800e85a:	2300      	movs	r3, #0
 800e85c:	4602      	mov	r2, r0
 800e85e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e860:	6a21      	ldr	r1, [r4, #32]
 800e862:	4628      	mov	r0, r5
 800e864:	47b0      	blx	r6
 800e866:	1c43      	adds	r3, r0, #1
 800e868:	89a3      	ldrh	r3, [r4, #12]
 800e86a:	d106      	bne.n	800e87a <__sflush_r+0x66>
 800e86c:	6829      	ldr	r1, [r5, #0]
 800e86e:	291d      	cmp	r1, #29
 800e870:	d82c      	bhi.n	800e8cc <__sflush_r+0xb8>
 800e872:	4a2a      	ldr	r2, [pc, #168]	; (800e91c <__sflush_r+0x108>)
 800e874:	40ca      	lsrs	r2, r1
 800e876:	07d6      	lsls	r6, r2, #31
 800e878:	d528      	bpl.n	800e8cc <__sflush_r+0xb8>
 800e87a:	2200      	movs	r2, #0
 800e87c:	6062      	str	r2, [r4, #4]
 800e87e:	04d9      	lsls	r1, r3, #19
 800e880:	6922      	ldr	r2, [r4, #16]
 800e882:	6022      	str	r2, [r4, #0]
 800e884:	d504      	bpl.n	800e890 <__sflush_r+0x7c>
 800e886:	1c42      	adds	r2, r0, #1
 800e888:	d101      	bne.n	800e88e <__sflush_r+0x7a>
 800e88a:	682b      	ldr	r3, [r5, #0]
 800e88c:	b903      	cbnz	r3, 800e890 <__sflush_r+0x7c>
 800e88e:	6560      	str	r0, [r4, #84]	; 0x54
 800e890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e892:	602f      	str	r7, [r5, #0]
 800e894:	2900      	cmp	r1, #0
 800e896:	d0ca      	beq.n	800e82e <__sflush_r+0x1a>
 800e898:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e89c:	4299      	cmp	r1, r3
 800e89e:	d002      	beq.n	800e8a6 <__sflush_r+0x92>
 800e8a0:	4628      	mov	r0, r5
 800e8a2:	f7ff f907 	bl	800dab4 <_free_r>
 800e8a6:	2000      	movs	r0, #0
 800e8a8:	6360      	str	r0, [r4, #52]	; 0x34
 800e8aa:	e7c1      	b.n	800e830 <__sflush_r+0x1c>
 800e8ac:	6a21      	ldr	r1, [r4, #32]
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	4628      	mov	r0, r5
 800e8b2:	47b0      	blx	r6
 800e8b4:	1c41      	adds	r1, r0, #1
 800e8b6:	d1c7      	bne.n	800e848 <__sflush_r+0x34>
 800e8b8:	682b      	ldr	r3, [r5, #0]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d0c4      	beq.n	800e848 <__sflush_r+0x34>
 800e8be:	2b1d      	cmp	r3, #29
 800e8c0:	d001      	beq.n	800e8c6 <__sflush_r+0xb2>
 800e8c2:	2b16      	cmp	r3, #22
 800e8c4:	d101      	bne.n	800e8ca <__sflush_r+0xb6>
 800e8c6:	602f      	str	r7, [r5, #0]
 800e8c8:	e7b1      	b.n	800e82e <__sflush_r+0x1a>
 800e8ca:	89a3      	ldrh	r3, [r4, #12]
 800e8cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8d0:	81a3      	strh	r3, [r4, #12]
 800e8d2:	e7ad      	b.n	800e830 <__sflush_r+0x1c>
 800e8d4:	690f      	ldr	r7, [r1, #16]
 800e8d6:	2f00      	cmp	r7, #0
 800e8d8:	d0a9      	beq.n	800e82e <__sflush_r+0x1a>
 800e8da:	0793      	lsls	r3, r2, #30
 800e8dc:	680e      	ldr	r6, [r1, #0]
 800e8de:	bf08      	it	eq
 800e8e0:	694b      	ldreq	r3, [r1, #20]
 800e8e2:	600f      	str	r7, [r1, #0]
 800e8e4:	bf18      	it	ne
 800e8e6:	2300      	movne	r3, #0
 800e8e8:	eba6 0807 	sub.w	r8, r6, r7
 800e8ec:	608b      	str	r3, [r1, #8]
 800e8ee:	f1b8 0f00 	cmp.w	r8, #0
 800e8f2:	dd9c      	ble.n	800e82e <__sflush_r+0x1a>
 800e8f4:	6a21      	ldr	r1, [r4, #32]
 800e8f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e8f8:	4643      	mov	r3, r8
 800e8fa:	463a      	mov	r2, r7
 800e8fc:	4628      	mov	r0, r5
 800e8fe:	47b0      	blx	r6
 800e900:	2800      	cmp	r0, #0
 800e902:	dc06      	bgt.n	800e912 <__sflush_r+0xfe>
 800e904:	89a3      	ldrh	r3, [r4, #12]
 800e906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e90a:	81a3      	strh	r3, [r4, #12]
 800e90c:	f04f 30ff 	mov.w	r0, #4294967295
 800e910:	e78e      	b.n	800e830 <__sflush_r+0x1c>
 800e912:	4407      	add	r7, r0
 800e914:	eba8 0800 	sub.w	r8, r8, r0
 800e918:	e7e9      	b.n	800e8ee <__sflush_r+0xda>
 800e91a:	bf00      	nop
 800e91c:	20400001 	.word	0x20400001

0800e920 <_fflush_r>:
 800e920:	b538      	push	{r3, r4, r5, lr}
 800e922:	690b      	ldr	r3, [r1, #16]
 800e924:	4605      	mov	r5, r0
 800e926:	460c      	mov	r4, r1
 800e928:	b913      	cbnz	r3, 800e930 <_fflush_r+0x10>
 800e92a:	2500      	movs	r5, #0
 800e92c:	4628      	mov	r0, r5
 800e92e:	bd38      	pop	{r3, r4, r5, pc}
 800e930:	b118      	cbz	r0, 800e93a <_fflush_r+0x1a>
 800e932:	6983      	ldr	r3, [r0, #24]
 800e934:	b90b      	cbnz	r3, 800e93a <_fflush_r+0x1a>
 800e936:	f000 f887 	bl	800ea48 <__sinit>
 800e93a:	4b14      	ldr	r3, [pc, #80]	; (800e98c <_fflush_r+0x6c>)
 800e93c:	429c      	cmp	r4, r3
 800e93e:	d11b      	bne.n	800e978 <_fflush_r+0x58>
 800e940:	686c      	ldr	r4, [r5, #4]
 800e942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d0ef      	beq.n	800e92a <_fflush_r+0xa>
 800e94a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e94c:	07d0      	lsls	r0, r2, #31
 800e94e:	d404      	bmi.n	800e95a <_fflush_r+0x3a>
 800e950:	0599      	lsls	r1, r3, #22
 800e952:	d402      	bmi.n	800e95a <_fflush_r+0x3a>
 800e954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e956:	f000 f927 	bl	800eba8 <__retarget_lock_acquire_recursive>
 800e95a:	4628      	mov	r0, r5
 800e95c:	4621      	mov	r1, r4
 800e95e:	f7ff ff59 	bl	800e814 <__sflush_r>
 800e962:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e964:	07da      	lsls	r2, r3, #31
 800e966:	4605      	mov	r5, r0
 800e968:	d4e0      	bmi.n	800e92c <_fflush_r+0xc>
 800e96a:	89a3      	ldrh	r3, [r4, #12]
 800e96c:	059b      	lsls	r3, r3, #22
 800e96e:	d4dd      	bmi.n	800e92c <_fflush_r+0xc>
 800e970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e972:	f000 f91a 	bl	800ebaa <__retarget_lock_release_recursive>
 800e976:	e7d9      	b.n	800e92c <_fflush_r+0xc>
 800e978:	4b05      	ldr	r3, [pc, #20]	; (800e990 <_fflush_r+0x70>)
 800e97a:	429c      	cmp	r4, r3
 800e97c:	d101      	bne.n	800e982 <_fflush_r+0x62>
 800e97e:	68ac      	ldr	r4, [r5, #8]
 800e980:	e7df      	b.n	800e942 <_fflush_r+0x22>
 800e982:	4b04      	ldr	r3, [pc, #16]	; (800e994 <_fflush_r+0x74>)
 800e984:	429c      	cmp	r4, r3
 800e986:	bf08      	it	eq
 800e988:	68ec      	ldreq	r4, [r5, #12]
 800e98a:	e7da      	b.n	800e942 <_fflush_r+0x22>
 800e98c:	08012134 	.word	0x08012134
 800e990:	08012154 	.word	0x08012154
 800e994:	08012114 	.word	0x08012114

0800e998 <std>:
 800e998:	2300      	movs	r3, #0
 800e99a:	b510      	push	{r4, lr}
 800e99c:	4604      	mov	r4, r0
 800e99e:	e9c0 3300 	strd	r3, r3, [r0]
 800e9a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e9a6:	6083      	str	r3, [r0, #8]
 800e9a8:	8181      	strh	r1, [r0, #12]
 800e9aa:	6643      	str	r3, [r0, #100]	; 0x64
 800e9ac:	81c2      	strh	r2, [r0, #14]
 800e9ae:	6183      	str	r3, [r0, #24]
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	2208      	movs	r2, #8
 800e9b4:	305c      	adds	r0, #92	; 0x5c
 800e9b6:	f7fb fba1 	bl	800a0fc <memset>
 800e9ba:	4b05      	ldr	r3, [pc, #20]	; (800e9d0 <std+0x38>)
 800e9bc:	6263      	str	r3, [r4, #36]	; 0x24
 800e9be:	4b05      	ldr	r3, [pc, #20]	; (800e9d4 <std+0x3c>)
 800e9c0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e9c2:	4b05      	ldr	r3, [pc, #20]	; (800e9d8 <std+0x40>)
 800e9c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e9c6:	4b05      	ldr	r3, [pc, #20]	; (800e9dc <std+0x44>)
 800e9c8:	6224      	str	r4, [r4, #32]
 800e9ca:	6323      	str	r3, [r4, #48]	; 0x30
 800e9cc:	bd10      	pop	{r4, pc}
 800e9ce:	bf00      	nop
 800e9d0:	0800aea5 	.word	0x0800aea5
 800e9d4:	0800aecb 	.word	0x0800aecb
 800e9d8:	0800af03 	.word	0x0800af03
 800e9dc:	0800af27 	.word	0x0800af27

0800e9e0 <_cleanup_r>:
 800e9e0:	4901      	ldr	r1, [pc, #4]	; (800e9e8 <_cleanup_r+0x8>)
 800e9e2:	f000 b8c1 	b.w	800eb68 <_fwalk_reent>
 800e9e6:	bf00      	nop
 800e9e8:	0800e921 	.word	0x0800e921

0800e9ec <__sfmoreglue>:
 800e9ec:	b570      	push	{r4, r5, r6, lr}
 800e9ee:	2268      	movs	r2, #104	; 0x68
 800e9f0:	1e4d      	subs	r5, r1, #1
 800e9f2:	4355      	muls	r5, r2
 800e9f4:	460e      	mov	r6, r1
 800e9f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e9fa:	f7ff f8c7 	bl	800db8c <_malloc_r>
 800e9fe:	4604      	mov	r4, r0
 800ea00:	b140      	cbz	r0, 800ea14 <__sfmoreglue+0x28>
 800ea02:	2100      	movs	r1, #0
 800ea04:	e9c0 1600 	strd	r1, r6, [r0]
 800ea08:	300c      	adds	r0, #12
 800ea0a:	60a0      	str	r0, [r4, #8]
 800ea0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ea10:	f7fb fb74 	bl	800a0fc <memset>
 800ea14:	4620      	mov	r0, r4
 800ea16:	bd70      	pop	{r4, r5, r6, pc}

0800ea18 <__sfp_lock_acquire>:
 800ea18:	4801      	ldr	r0, [pc, #4]	; (800ea20 <__sfp_lock_acquire+0x8>)
 800ea1a:	f000 b8c5 	b.w	800eba8 <__retarget_lock_acquire_recursive>
 800ea1e:	bf00      	nop
 800ea20:	20013efd 	.word	0x20013efd

0800ea24 <__sfp_lock_release>:
 800ea24:	4801      	ldr	r0, [pc, #4]	; (800ea2c <__sfp_lock_release+0x8>)
 800ea26:	f000 b8c0 	b.w	800ebaa <__retarget_lock_release_recursive>
 800ea2a:	bf00      	nop
 800ea2c:	20013efd 	.word	0x20013efd

0800ea30 <__sinit_lock_acquire>:
 800ea30:	4801      	ldr	r0, [pc, #4]	; (800ea38 <__sinit_lock_acquire+0x8>)
 800ea32:	f000 b8b9 	b.w	800eba8 <__retarget_lock_acquire_recursive>
 800ea36:	bf00      	nop
 800ea38:	20013efe 	.word	0x20013efe

0800ea3c <__sinit_lock_release>:
 800ea3c:	4801      	ldr	r0, [pc, #4]	; (800ea44 <__sinit_lock_release+0x8>)
 800ea3e:	f000 b8b4 	b.w	800ebaa <__retarget_lock_release_recursive>
 800ea42:	bf00      	nop
 800ea44:	20013efe 	.word	0x20013efe

0800ea48 <__sinit>:
 800ea48:	b510      	push	{r4, lr}
 800ea4a:	4604      	mov	r4, r0
 800ea4c:	f7ff fff0 	bl	800ea30 <__sinit_lock_acquire>
 800ea50:	69a3      	ldr	r3, [r4, #24]
 800ea52:	b11b      	cbz	r3, 800ea5c <__sinit+0x14>
 800ea54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea58:	f7ff bff0 	b.w	800ea3c <__sinit_lock_release>
 800ea5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ea60:	6523      	str	r3, [r4, #80]	; 0x50
 800ea62:	4b13      	ldr	r3, [pc, #76]	; (800eab0 <__sinit+0x68>)
 800ea64:	4a13      	ldr	r2, [pc, #76]	; (800eab4 <__sinit+0x6c>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	62a2      	str	r2, [r4, #40]	; 0x28
 800ea6a:	42a3      	cmp	r3, r4
 800ea6c:	bf04      	itt	eq
 800ea6e:	2301      	moveq	r3, #1
 800ea70:	61a3      	streq	r3, [r4, #24]
 800ea72:	4620      	mov	r0, r4
 800ea74:	f000 f820 	bl	800eab8 <__sfp>
 800ea78:	6060      	str	r0, [r4, #4]
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	f000 f81c 	bl	800eab8 <__sfp>
 800ea80:	60a0      	str	r0, [r4, #8]
 800ea82:	4620      	mov	r0, r4
 800ea84:	f000 f818 	bl	800eab8 <__sfp>
 800ea88:	2200      	movs	r2, #0
 800ea8a:	60e0      	str	r0, [r4, #12]
 800ea8c:	2104      	movs	r1, #4
 800ea8e:	6860      	ldr	r0, [r4, #4]
 800ea90:	f7ff ff82 	bl	800e998 <std>
 800ea94:	68a0      	ldr	r0, [r4, #8]
 800ea96:	2201      	movs	r2, #1
 800ea98:	2109      	movs	r1, #9
 800ea9a:	f7ff ff7d 	bl	800e998 <std>
 800ea9e:	68e0      	ldr	r0, [r4, #12]
 800eaa0:	2202      	movs	r2, #2
 800eaa2:	2112      	movs	r1, #18
 800eaa4:	f7ff ff78 	bl	800e998 <std>
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	61a3      	str	r3, [r4, #24]
 800eaac:	e7d2      	b.n	800ea54 <__sinit+0xc>
 800eaae:	bf00      	nop
 800eab0:	08011cb8 	.word	0x08011cb8
 800eab4:	0800e9e1 	.word	0x0800e9e1

0800eab8 <__sfp>:
 800eab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaba:	4607      	mov	r7, r0
 800eabc:	f7ff ffac 	bl	800ea18 <__sfp_lock_acquire>
 800eac0:	4b1e      	ldr	r3, [pc, #120]	; (800eb3c <__sfp+0x84>)
 800eac2:	681e      	ldr	r6, [r3, #0]
 800eac4:	69b3      	ldr	r3, [r6, #24]
 800eac6:	b913      	cbnz	r3, 800eace <__sfp+0x16>
 800eac8:	4630      	mov	r0, r6
 800eaca:	f7ff ffbd 	bl	800ea48 <__sinit>
 800eace:	3648      	adds	r6, #72	; 0x48
 800ead0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ead4:	3b01      	subs	r3, #1
 800ead6:	d503      	bpl.n	800eae0 <__sfp+0x28>
 800ead8:	6833      	ldr	r3, [r6, #0]
 800eada:	b30b      	cbz	r3, 800eb20 <__sfp+0x68>
 800eadc:	6836      	ldr	r6, [r6, #0]
 800eade:	e7f7      	b.n	800ead0 <__sfp+0x18>
 800eae0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eae4:	b9d5      	cbnz	r5, 800eb1c <__sfp+0x64>
 800eae6:	4b16      	ldr	r3, [pc, #88]	; (800eb40 <__sfp+0x88>)
 800eae8:	60e3      	str	r3, [r4, #12]
 800eaea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eaee:	6665      	str	r5, [r4, #100]	; 0x64
 800eaf0:	f000 f859 	bl	800eba6 <__retarget_lock_init_recursive>
 800eaf4:	f7ff ff96 	bl	800ea24 <__sfp_lock_release>
 800eaf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eafc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eb00:	6025      	str	r5, [r4, #0]
 800eb02:	61a5      	str	r5, [r4, #24]
 800eb04:	2208      	movs	r2, #8
 800eb06:	4629      	mov	r1, r5
 800eb08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eb0c:	f7fb faf6 	bl	800a0fc <memset>
 800eb10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eb14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eb18:	4620      	mov	r0, r4
 800eb1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb1c:	3468      	adds	r4, #104	; 0x68
 800eb1e:	e7d9      	b.n	800ead4 <__sfp+0x1c>
 800eb20:	2104      	movs	r1, #4
 800eb22:	4638      	mov	r0, r7
 800eb24:	f7ff ff62 	bl	800e9ec <__sfmoreglue>
 800eb28:	4604      	mov	r4, r0
 800eb2a:	6030      	str	r0, [r6, #0]
 800eb2c:	2800      	cmp	r0, #0
 800eb2e:	d1d5      	bne.n	800eadc <__sfp+0x24>
 800eb30:	f7ff ff78 	bl	800ea24 <__sfp_lock_release>
 800eb34:	230c      	movs	r3, #12
 800eb36:	603b      	str	r3, [r7, #0]
 800eb38:	e7ee      	b.n	800eb18 <__sfp+0x60>
 800eb3a:	bf00      	nop
 800eb3c:	08011cb8 	.word	0x08011cb8
 800eb40:	ffff0001 	.word	0xffff0001

0800eb44 <fiprintf>:
 800eb44:	b40e      	push	{r1, r2, r3}
 800eb46:	b503      	push	{r0, r1, lr}
 800eb48:	4601      	mov	r1, r0
 800eb4a:	ab03      	add	r3, sp, #12
 800eb4c:	4805      	ldr	r0, [pc, #20]	; (800eb64 <fiprintf+0x20>)
 800eb4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb52:	6800      	ldr	r0, [r0, #0]
 800eb54:	9301      	str	r3, [sp, #4]
 800eb56:	f000 f8a7 	bl	800eca8 <_vfiprintf_r>
 800eb5a:	b002      	add	sp, #8
 800eb5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb60:	b003      	add	sp, #12
 800eb62:	4770      	bx	lr
 800eb64:	20000020 	.word	0x20000020

0800eb68 <_fwalk_reent>:
 800eb68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb6c:	4606      	mov	r6, r0
 800eb6e:	4688      	mov	r8, r1
 800eb70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eb74:	2700      	movs	r7, #0
 800eb76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb7a:	f1b9 0901 	subs.w	r9, r9, #1
 800eb7e:	d505      	bpl.n	800eb8c <_fwalk_reent+0x24>
 800eb80:	6824      	ldr	r4, [r4, #0]
 800eb82:	2c00      	cmp	r4, #0
 800eb84:	d1f7      	bne.n	800eb76 <_fwalk_reent+0xe>
 800eb86:	4638      	mov	r0, r7
 800eb88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb8c:	89ab      	ldrh	r3, [r5, #12]
 800eb8e:	2b01      	cmp	r3, #1
 800eb90:	d907      	bls.n	800eba2 <_fwalk_reent+0x3a>
 800eb92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eb96:	3301      	adds	r3, #1
 800eb98:	d003      	beq.n	800eba2 <_fwalk_reent+0x3a>
 800eb9a:	4629      	mov	r1, r5
 800eb9c:	4630      	mov	r0, r6
 800eb9e:	47c0      	blx	r8
 800eba0:	4307      	orrs	r7, r0
 800eba2:	3568      	adds	r5, #104	; 0x68
 800eba4:	e7e9      	b.n	800eb7a <_fwalk_reent+0x12>

0800eba6 <__retarget_lock_init_recursive>:
 800eba6:	4770      	bx	lr

0800eba8 <__retarget_lock_acquire_recursive>:
 800eba8:	4770      	bx	lr

0800ebaa <__retarget_lock_release_recursive>:
 800ebaa:	4770      	bx	lr

0800ebac <memmove>:
 800ebac:	4288      	cmp	r0, r1
 800ebae:	b510      	push	{r4, lr}
 800ebb0:	eb01 0402 	add.w	r4, r1, r2
 800ebb4:	d902      	bls.n	800ebbc <memmove+0x10>
 800ebb6:	4284      	cmp	r4, r0
 800ebb8:	4623      	mov	r3, r4
 800ebba:	d807      	bhi.n	800ebcc <memmove+0x20>
 800ebbc:	1e43      	subs	r3, r0, #1
 800ebbe:	42a1      	cmp	r1, r4
 800ebc0:	d008      	beq.n	800ebd4 <memmove+0x28>
 800ebc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ebca:	e7f8      	b.n	800ebbe <memmove+0x12>
 800ebcc:	4402      	add	r2, r0
 800ebce:	4601      	mov	r1, r0
 800ebd0:	428a      	cmp	r2, r1
 800ebd2:	d100      	bne.n	800ebd6 <memmove+0x2a>
 800ebd4:	bd10      	pop	{r4, pc}
 800ebd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ebda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ebde:	e7f7      	b.n	800ebd0 <memmove+0x24>

0800ebe0 <__malloc_lock>:
 800ebe0:	4801      	ldr	r0, [pc, #4]	; (800ebe8 <__malloc_lock+0x8>)
 800ebe2:	f7ff bfe1 	b.w	800eba8 <__retarget_lock_acquire_recursive>
 800ebe6:	bf00      	nop
 800ebe8:	20013efc 	.word	0x20013efc

0800ebec <__malloc_unlock>:
 800ebec:	4801      	ldr	r0, [pc, #4]	; (800ebf4 <__malloc_unlock+0x8>)
 800ebee:	f7ff bfdc 	b.w	800ebaa <__retarget_lock_release_recursive>
 800ebf2:	bf00      	nop
 800ebf4:	20013efc 	.word	0x20013efc

0800ebf8 <_realloc_r>:
 800ebf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebfc:	4680      	mov	r8, r0
 800ebfe:	4614      	mov	r4, r2
 800ec00:	460e      	mov	r6, r1
 800ec02:	b921      	cbnz	r1, 800ec0e <_realloc_r+0x16>
 800ec04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec08:	4611      	mov	r1, r2
 800ec0a:	f7fe bfbf 	b.w	800db8c <_malloc_r>
 800ec0e:	b92a      	cbnz	r2, 800ec1c <_realloc_r+0x24>
 800ec10:	f7fe ff50 	bl	800dab4 <_free_r>
 800ec14:	4625      	mov	r5, r4
 800ec16:	4628      	mov	r0, r5
 800ec18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec1c:	f000 faa0 	bl	800f160 <_malloc_usable_size_r>
 800ec20:	4284      	cmp	r4, r0
 800ec22:	4607      	mov	r7, r0
 800ec24:	d802      	bhi.n	800ec2c <_realloc_r+0x34>
 800ec26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ec2a:	d812      	bhi.n	800ec52 <_realloc_r+0x5a>
 800ec2c:	4621      	mov	r1, r4
 800ec2e:	4640      	mov	r0, r8
 800ec30:	f7fe ffac 	bl	800db8c <_malloc_r>
 800ec34:	4605      	mov	r5, r0
 800ec36:	2800      	cmp	r0, #0
 800ec38:	d0ed      	beq.n	800ec16 <_realloc_r+0x1e>
 800ec3a:	42bc      	cmp	r4, r7
 800ec3c:	4622      	mov	r2, r4
 800ec3e:	4631      	mov	r1, r6
 800ec40:	bf28      	it	cs
 800ec42:	463a      	movcs	r2, r7
 800ec44:	f7fb fa4c 	bl	800a0e0 <memcpy>
 800ec48:	4631      	mov	r1, r6
 800ec4a:	4640      	mov	r0, r8
 800ec4c:	f7fe ff32 	bl	800dab4 <_free_r>
 800ec50:	e7e1      	b.n	800ec16 <_realloc_r+0x1e>
 800ec52:	4635      	mov	r5, r6
 800ec54:	e7df      	b.n	800ec16 <_realloc_r+0x1e>

0800ec56 <__sfputc_r>:
 800ec56:	6893      	ldr	r3, [r2, #8]
 800ec58:	3b01      	subs	r3, #1
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	b410      	push	{r4}
 800ec5e:	6093      	str	r3, [r2, #8]
 800ec60:	da08      	bge.n	800ec74 <__sfputc_r+0x1e>
 800ec62:	6994      	ldr	r4, [r2, #24]
 800ec64:	42a3      	cmp	r3, r4
 800ec66:	db01      	blt.n	800ec6c <__sfputc_r+0x16>
 800ec68:	290a      	cmp	r1, #10
 800ec6a:	d103      	bne.n	800ec74 <__sfputc_r+0x1e>
 800ec6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec70:	f000 b94a 	b.w	800ef08 <__swbuf_r>
 800ec74:	6813      	ldr	r3, [r2, #0]
 800ec76:	1c58      	adds	r0, r3, #1
 800ec78:	6010      	str	r0, [r2, #0]
 800ec7a:	7019      	strb	r1, [r3, #0]
 800ec7c:	4608      	mov	r0, r1
 800ec7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec82:	4770      	bx	lr

0800ec84 <__sfputs_r>:
 800ec84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec86:	4606      	mov	r6, r0
 800ec88:	460f      	mov	r7, r1
 800ec8a:	4614      	mov	r4, r2
 800ec8c:	18d5      	adds	r5, r2, r3
 800ec8e:	42ac      	cmp	r4, r5
 800ec90:	d101      	bne.n	800ec96 <__sfputs_r+0x12>
 800ec92:	2000      	movs	r0, #0
 800ec94:	e007      	b.n	800eca6 <__sfputs_r+0x22>
 800ec96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec9a:	463a      	mov	r2, r7
 800ec9c:	4630      	mov	r0, r6
 800ec9e:	f7ff ffda 	bl	800ec56 <__sfputc_r>
 800eca2:	1c43      	adds	r3, r0, #1
 800eca4:	d1f3      	bne.n	800ec8e <__sfputs_r+0xa>
 800eca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eca8 <_vfiprintf_r>:
 800eca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecac:	460d      	mov	r5, r1
 800ecae:	b09d      	sub	sp, #116	; 0x74
 800ecb0:	4614      	mov	r4, r2
 800ecb2:	4698      	mov	r8, r3
 800ecb4:	4606      	mov	r6, r0
 800ecb6:	b118      	cbz	r0, 800ecc0 <_vfiprintf_r+0x18>
 800ecb8:	6983      	ldr	r3, [r0, #24]
 800ecba:	b90b      	cbnz	r3, 800ecc0 <_vfiprintf_r+0x18>
 800ecbc:	f7ff fec4 	bl	800ea48 <__sinit>
 800ecc0:	4b89      	ldr	r3, [pc, #548]	; (800eee8 <_vfiprintf_r+0x240>)
 800ecc2:	429d      	cmp	r5, r3
 800ecc4:	d11b      	bne.n	800ecfe <_vfiprintf_r+0x56>
 800ecc6:	6875      	ldr	r5, [r6, #4]
 800ecc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ecca:	07d9      	lsls	r1, r3, #31
 800eccc:	d405      	bmi.n	800ecda <_vfiprintf_r+0x32>
 800ecce:	89ab      	ldrh	r3, [r5, #12]
 800ecd0:	059a      	lsls	r2, r3, #22
 800ecd2:	d402      	bmi.n	800ecda <_vfiprintf_r+0x32>
 800ecd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecd6:	f7ff ff67 	bl	800eba8 <__retarget_lock_acquire_recursive>
 800ecda:	89ab      	ldrh	r3, [r5, #12]
 800ecdc:	071b      	lsls	r3, r3, #28
 800ecde:	d501      	bpl.n	800ece4 <_vfiprintf_r+0x3c>
 800ece0:	692b      	ldr	r3, [r5, #16]
 800ece2:	b9eb      	cbnz	r3, 800ed20 <_vfiprintf_r+0x78>
 800ece4:	4629      	mov	r1, r5
 800ece6:	4630      	mov	r0, r6
 800ece8:	f000 f960 	bl	800efac <__swsetup_r>
 800ecec:	b1c0      	cbz	r0, 800ed20 <_vfiprintf_r+0x78>
 800ecee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ecf0:	07dc      	lsls	r4, r3, #31
 800ecf2:	d50e      	bpl.n	800ed12 <_vfiprintf_r+0x6a>
 800ecf4:	f04f 30ff 	mov.w	r0, #4294967295
 800ecf8:	b01d      	add	sp, #116	; 0x74
 800ecfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecfe:	4b7b      	ldr	r3, [pc, #492]	; (800eeec <_vfiprintf_r+0x244>)
 800ed00:	429d      	cmp	r5, r3
 800ed02:	d101      	bne.n	800ed08 <_vfiprintf_r+0x60>
 800ed04:	68b5      	ldr	r5, [r6, #8]
 800ed06:	e7df      	b.n	800ecc8 <_vfiprintf_r+0x20>
 800ed08:	4b79      	ldr	r3, [pc, #484]	; (800eef0 <_vfiprintf_r+0x248>)
 800ed0a:	429d      	cmp	r5, r3
 800ed0c:	bf08      	it	eq
 800ed0e:	68f5      	ldreq	r5, [r6, #12]
 800ed10:	e7da      	b.n	800ecc8 <_vfiprintf_r+0x20>
 800ed12:	89ab      	ldrh	r3, [r5, #12]
 800ed14:	0598      	lsls	r0, r3, #22
 800ed16:	d4ed      	bmi.n	800ecf4 <_vfiprintf_r+0x4c>
 800ed18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed1a:	f7ff ff46 	bl	800ebaa <__retarget_lock_release_recursive>
 800ed1e:	e7e9      	b.n	800ecf4 <_vfiprintf_r+0x4c>
 800ed20:	2300      	movs	r3, #0
 800ed22:	9309      	str	r3, [sp, #36]	; 0x24
 800ed24:	2320      	movs	r3, #32
 800ed26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed2e:	2330      	movs	r3, #48	; 0x30
 800ed30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eef4 <_vfiprintf_r+0x24c>
 800ed34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed38:	f04f 0901 	mov.w	r9, #1
 800ed3c:	4623      	mov	r3, r4
 800ed3e:	469a      	mov	sl, r3
 800ed40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed44:	b10a      	cbz	r2, 800ed4a <_vfiprintf_r+0xa2>
 800ed46:	2a25      	cmp	r2, #37	; 0x25
 800ed48:	d1f9      	bne.n	800ed3e <_vfiprintf_r+0x96>
 800ed4a:	ebba 0b04 	subs.w	fp, sl, r4
 800ed4e:	d00b      	beq.n	800ed68 <_vfiprintf_r+0xc0>
 800ed50:	465b      	mov	r3, fp
 800ed52:	4622      	mov	r2, r4
 800ed54:	4629      	mov	r1, r5
 800ed56:	4630      	mov	r0, r6
 800ed58:	f7ff ff94 	bl	800ec84 <__sfputs_r>
 800ed5c:	3001      	adds	r0, #1
 800ed5e:	f000 80aa 	beq.w	800eeb6 <_vfiprintf_r+0x20e>
 800ed62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed64:	445a      	add	r2, fp
 800ed66:	9209      	str	r2, [sp, #36]	; 0x24
 800ed68:	f89a 3000 	ldrb.w	r3, [sl]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	f000 80a2 	beq.w	800eeb6 <_vfiprintf_r+0x20e>
 800ed72:	2300      	movs	r3, #0
 800ed74:	f04f 32ff 	mov.w	r2, #4294967295
 800ed78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed7c:	f10a 0a01 	add.w	sl, sl, #1
 800ed80:	9304      	str	r3, [sp, #16]
 800ed82:	9307      	str	r3, [sp, #28]
 800ed84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed88:	931a      	str	r3, [sp, #104]	; 0x68
 800ed8a:	4654      	mov	r4, sl
 800ed8c:	2205      	movs	r2, #5
 800ed8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed92:	4858      	ldr	r0, [pc, #352]	; (800eef4 <_vfiprintf_r+0x24c>)
 800ed94:	f7f1 fa3c 	bl	8000210 <memchr>
 800ed98:	9a04      	ldr	r2, [sp, #16]
 800ed9a:	b9d8      	cbnz	r0, 800edd4 <_vfiprintf_r+0x12c>
 800ed9c:	06d1      	lsls	r1, r2, #27
 800ed9e:	bf44      	itt	mi
 800eda0:	2320      	movmi	r3, #32
 800eda2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eda6:	0713      	lsls	r3, r2, #28
 800eda8:	bf44      	itt	mi
 800edaa:	232b      	movmi	r3, #43	; 0x2b
 800edac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edb0:	f89a 3000 	ldrb.w	r3, [sl]
 800edb4:	2b2a      	cmp	r3, #42	; 0x2a
 800edb6:	d015      	beq.n	800ede4 <_vfiprintf_r+0x13c>
 800edb8:	9a07      	ldr	r2, [sp, #28]
 800edba:	4654      	mov	r4, sl
 800edbc:	2000      	movs	r0, #0
 800edbe:	f04f 0c0a 	mov.w	ip, #10
 800edc2:	4621      	mov	r1, r4
 800edc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edc8:	3b30      	subs	r3, #48	; 0x30
 800edca:	2b09      	cmp	r3, #9
 800edcc:	d94e      	bls.n	800ee6c <_vfiprintf_r+0x1c4>
 800edce:	b1b0      	cbz	r0, 800edfe <_vfiprintf_r+0x156>
 800edd0:	9207      	str	r2, [sp, #28]
 800edd2:	e014      	b.n	800edfe <_vfiprintf_r+0x156>
 800edd4:	eba0 0308 	sub.w	r3, r0, r8
 800edd8:	fa09 f303 	lsl.w	r3, r9, r3
 800eddc:	4313      	orrs	r3, r2
 800edde:	9304      	str	r3, [sp, #16]
 800ede0:	46a2      	mov	sl, r4
 800ede2:	e7d2      	b.n	800ed8a <_vfiprintf_r+0xe2>
 800ede4:	9b03      	ldr	r3, [sp, #12]
 800ede6:	1d19      	adds	r1, r3, #4
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	9103      	str	r1, [sp, #12]
 800edec:	2b00      	cmp	r3, #0
 800edee:	bfbb      	ittet	lt
 800edf0:	425b      	neglt	r3, r3
 800edf2:	f042 0202 	orrlt.w	r2, r2, #2
 800edf6:	9307      	strge	r3, [sp, #28]
 800edf8:	9307      	strlt	r3, [sp, #28]
 800edfa:	bfb8      	it	lt
 800edfc:	9204      	strlt	r2, [sp, #16]
 800edfe:	7823      	ldrb	r3, [r4, #0]
 800ee00:	2b2e      	cmp	r3, #46	; 0x2e
 800ee02:	d10c      	bne.n	800ee1e <_vfiprintf_r+0x176>
 800ee04:	7863      	ldrb	r3, [r4, #1]
 800ee06:	2b2a      	cmp	r3, #42	; 0x2a
 800ee08:	d135      	bne.n	800ee76 <_vfiprintf_r+0x1ce>
 800ee0a:	9b03      	ldr	r3, [sp, #12]
 800ee0c:	1d1a      	adds	r2, r3, #4
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	9203      	str	r2, [sp, #12]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	bfb8      	it	lt
 800ee16:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee1a:	3402      	adds	r4, #2
 800ee1c:	9305      	str	r3, [sp, #20]
 800ee1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ef04 <_vfiprintf_r+0x25c>
 800ee22:	7821      	ldrb	r1, [r4, #0]
 800ee24:	2203      	movs	r2, #3
 800ee26:	4650      	mov	r0, sl
 800ee28:	f7f1 f9f2 	bl	8000210 <memchr>
 800ee2c:	b140      	cbz	r0, 800ee40 <_vfiprintf_r+0x198>
 800ee2e:	2340      	movs	r3, #64	; 0x40
 800ee30:	eba0 000a 	sub.w	r0, r0, sl
 800ee34:	fa03 f000 	lsl.w	r0, r3, r0
 800ee38:	9b04      	ldr	r3, [sp, #16]
 800ee3a:	4303      	orrs	r3, r0
 800ee3c:	3401      	adds	r4, #1
 800ee3e:	9304      	str	r3, [sp, #16]
 800ee40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee44:	482c      	ldr	r0, [pc, #176]	; (800eef8 <_vfiprintf_r+0x250>)
 800ee46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee4a:	2206      	movs	r2, #6
 800ee4c:	f7f1 f9e0 	bl	8000210 <memchr>
 800ee50:	2800      	cmp	r0, #0
 800ee52:	d03f      	beq.n	800eed4 <_vfiprintf_r+0x22c>
 800ee54:	4b29      	ldr	r3, [pc, #164]	; (800eefc <_vfiprintf_r+0x254>)
 800ee56:	bb1b      	cbnz	r3, 800eea0 <_vfiprintf_r+0x1f8>
 800ee58:	9b03      	ldr	r3, [sp, #12]
 800ee5a:	3307      	adds	r3, #7
 800ee5c:	f023 0307 	bic.w	r3, r3, #7
 800ee60:	3308      	adds	r3, #8
 800ee62:	9303      	str	r3, [sp, #12]
 800ee64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee66:	443b      	add	r3, r7
 800ee68:	9309      	str	r3, [sp, #36]	; 0x24
 800ee6a:	e767      	b.n	800ed3c <_vfiprintf_r+0x94>
 800ee6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee70:	460c      	mov	r4, r1
 800ee72:	2001      	movs	r0, #1
 800ee74:	e7a5      	b.n	800edc2 <_vfiprintf_r+0x11a>
 800ee76:	2300      	movs	r3, #0
 800ee78:	3401      	adds	r4, #1
 800ee7a:	9305      	str	r3, [sp, #20]
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	f04f 0c0a 	mov.w	ip, #10
 800ee82:	4620      	mov	r0, r4
 800ee84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee88:	3a30      	subs	r2, #48	; 0x30
 800ee8a:	2a09      	cmp	r2, #9
 800ee8c:	d903      	bls.n	800ee96 <_vfiprintf_r+0x1ee>
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d0c5      	beq.n	800ee1e <_vfiprintf_r+0x176>
 800ee92:	9105      	str	r1, [sp, #20]
 800ee94:	e7c3      	b.n	800ee1e <_vfiprintf_r+0x176>
 800ee96:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee9a:	4604      	mov	r4, r0
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	e7f0      	b.n	800ee82 <_vfiprintf_r+0x1da>
 800eea0:	ab03      	add	r3, sp, #12
 800eea2:	9300      	str	r3, [sp, #0]
 800eea4:	462a      	mov	r2, r5
 800eea6:	4b16      	ldr	r3, [pc, #88]	; (800ef00 <_vfiprintf_r+0x258>)
 800eea8:	a904      	add	r1, sp, #16
 800eeaa:	4630      	mov	r0, r6
 800eeac:	f7fb f9ce 	bl	800a24c <_printf_float>
 800eeb0:	4607      	mov	r7, r0
 800eeb2:	1c78      	adds	r0, r7, #1
 800eeb4:	d1d6      	bne.n	800ee64 <_vfiprintf_r+0x1bc>
 800eeb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eeb8:	07d9      	lsls	r1, r3, #31
 800eeba:	d405      	bmi.n	800eec8 <_vfiprintf_r+0x220>
 800eebc:	89ab      	ldrh	r3, [r5, #12]
 800eebe:	059a      	lsls	r2, r3, #22
 800eec0:	d402      	bmi.n	800eec8 <_vfiprintf_r+0x220>
 800eec2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eec4:	f7ff fe71 	bl	800ebaa <__retarget_lock_release_recursive>
 800eec8:	89ab      	ldrh	r3, [r5, #12]
 800eeca:	065b      	lsls	r3, r3, #25
 800eecc:	f53f af12 	bmi.w	800ecf4 <_vfiprintf_r+0x4c>
 800eed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eed2:	e711      	b.n	800ecf8 <_vfiprintf_r+0x50>
 800eed4:	ab03      	add	r3, sp, #12
 800eed6:	9300      	str	r3, [sp, #0]
 800eed8:	462a      	mov	r2, r5
 800eeda:	4b09      	ldr	r3, [pc, #36]	; (800ef00 <_vfiprintf_r+0x258>)
 800eedc:	a904      	add	r1, sp, #16
 800eede:	4630      	mov	r0, r6
 800eee0:	f7fb fc58 	bl	800a794 <_printf_i>
 800eee4:	e7e4      	b.n	800eeb0 <_vfiprintf_r+0x208>
 800eee6:	bf00      	nop
 800eee8:	08012134 	.word	0x08012134
 800eeec:	08012154 	.word	0x08012154
 800eef0:	08012114 	.word	0x08012114
 800eef4:	080120ac 	.word	0x080120ac
 800eef8:	080120b6 	.word	0x080120b6
 800eefc:	0800a24d 	.word	0x0800a24d
 800ef00:	0800ec85 	.word	0x0800ec85
 800ef04:	080120b2 	.word	0x080120b2

0800ef08 <__swbuf_r>:
 800ef08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef0a:	460e      	mov	r6, r1
 800ef0c:	4614      	mov	r4, r2
 800ef0e:	4605      	mov	r5, r0
 800ef10:	b118      	cbz	r0, 800ef1a <__swbuf_r+0x12>
 800ef12:	6983      	ldr	r3, [r0, #24]
 800ef14:	b90b      	cbnz	r3, 800ef1a <__swbuf_r+0x12>
 800ef16:	f7ff fd97 	bl	800ea48 <__sinit>
 800ef1a:	4b21      	ldr	r3, [pc, #132]	; (800efa0 <__swbuf_r+0x98>)
 800ef1c:	429c      	cmp	r4, r3
 800ef1e:	d12b      	bne.n	800ef78 <__swbuf_r+0x70>
 800ef20:	686c      	ldr	r4, [r5, #4]
 800ef22:	69a3      	ldr	r3, [r4, #24]
 800ef24:	60a3      	str	r3, [r4, #8]
 800ef26:	89a3      	ldrh	r3, [r4, #12]
 800ef28:	071a      	lsls	r2, r3, #28
 800ef2a:	d52f      	bpl.n	800ef8c <__swbuf_r+0x84>
 800ef2c:	6923      	ldr	r3, [r4, #16]
 800ef2e:	b36b      	cbz	r3, 800ef8c <__swbuf_r+0x84>
 800ef30:	6923      	ldr	r3, [r4, #16]
 800ef32:	6820      	ldr	r0, [r4, #0]
 800ef34:	1ac0      	subs	r0, r0, r3
 800ef36:	6963      	ldr	r3, [r4, #20]
 800ef38:	b2f6      	uxtb	r6, r6
 800ef3a:	4283      	cmp	r3, r0
 800ef3c:	4637      	mov	r7, r6
 800ef3e:	dc04      	bgt.n	800ef4a <__swbuf_r+0x42>
 800ef40:	4621      	mov	r1, r4
 800ef42:	4628      	mov	r0, r5
 800ef44:	f7ff fcec 	bl	800e920 <_fflush_r>
 800ef48:	bb30      	cbnz	r0, 800ef98 <__swbuf_r+0x90>
 800ef4a:	68a3      	ldr	r3, [r4, #8]
 800ef4c:	3b01      	subs	r3, #1
 800ef4e:	60a3      	str	r3, [r4, #8]
 800ef50:	6823      	ldr	r3, [r4, #0]
 800ef52:	1c5a      	adds	r2, r3, #1
 800ef54:	6022      	str	r2, [r4, #0]
 800ef56:	701e      	strb	r6, [r3, #0]
 800ef58:	6963      	ldr	r3, [r4, #20]
 800ef5a:	3001      	adds	r0, #1
 800ef5c:	4283      	cmp	r3, r0
 800ef5e:	d004      	beq.n	800ef6a <__swbuf_r+0x62>
 800ef60:	89a3      	ldrh	r3, [r4, #12]
 800ef62:	07db      	lsls	r3, r3, #31
 800ef64:	d506      	bpl.n	800ef74 <__swbuf_r+0x6c>
 800ef66:	2e0a      	cmp	r6, #10
 800ef68:	d104      	bne.n	800ef74 <__swbuf_r+0x6c>
 800ef6a:	4621      	mov	r1, r4
 800ef6c:	4628      	mov	r0, r5
 800ef6e:	f7ff fcd7 	bl	800e920 <_fflush_r>
 800ef72:	b988      	cbnz	r0, 800ef98 <__swbuf_r+0x90>
 800ef74:	4638      	mov	r0, r7
 800ef76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef78:	4b0a      	ldr	r3, [pc, #40]	; (800efa4 <__swbuf_r+0x9c>)
 800ef7a:	429c      	cmp	r4, r3
 800ef7c:	d101      	bne.n	800ef82 <__swbuf_r+0x7a>
 800ef7e:	68ac      	ldr	r4, [r5, #8]
 800ef80:	e7cf      	b.n	800ef22 <__swbuf_r+0x1a>
 800ef82:	4b09      	ldr	r3, [pc, #36]	; (800efa8 <__swbuf_r+0xa0>)
 800ef84:	429c      	cmp	r4, r3
 800ef86:	bf08      	it	eq
 800ef88:	68ec      	ldreq	r4, [r5, #12]
 800ef8a:	e7ca      	b.n	800ef22 <__swbuf_r+0x1a>
 800ef8c:	4621      	mov	r1, r4
 800ef8e:	4628      	mov	r0, r5
 800ef90:	f000 f80c 	bl	800efac <__swsetup_r>
 800ef94:	2800      	cmp	r0, #0
 800ef96:	d0cb      	beq.n	800ef30 <__swbuf_r+0x28>
 800ef98:	f04f 37ff 	mov.w	r7, #4294967295
 800ef9c:	e7ea      	b.n	800ef74 <__swbuf_r+0x6c>
 800ef9e:	bf00      	nop
 800efa0:	08012134 	.word	0x08012134
 800efa4:	08012154 	.word	0x08012154
 800efa8:	08012114 	.word	0x08012114

0800efac <__swsetup_r>:
 800efac:	4b32      	ldr	r3, [pc, #200]	; (800f078 <__swsetup_r+0xcc>)
 800efae:	b570      	push	{r4, r5, r6, lr}
 800efb0:	681d      	ldr	r5, [r3, #0]
 800efb2:	4606      	mov	r6, r0
 800efb4:	460c      	mov	r4, r1
 800efb6:	b125      	cbz	r5, 800efc2 <__swsetup_r+0x16>
 800efb8:	69ab      	ldr	r3, [r5, #24]
 800efba:	b913      	cbnz	r3, 800efc2 <__swsetup_r+0x16>
 800efbc:	4628      	mov	r0, r5
 800efbe:	f7ff fd43 	bl	800ea48 <__sinit>
 800efc2:	4b2e      	ldr	r3, [pc, #184]	; (800f07c <__swsetup_r+0xd0>)
 800efc4:	429c      	cmp	r4, r3
 800efc6:	d10f      	bne.n	800efe8 <__swsetup_r+0x3c>
 800efc8:	686c      	ldr	r4, [r5, #4]
 800efca:	89a3      	ldrh	r3, [r4, #12]
 800efcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800efd0:	0719      	lsls	r1, r3, #28
 800efd2:	d42c      	bmi.n	800f02e <__swsetup_r+0x82>
 800efd4:	06dd      	lsls	r5, r3, #27
 800efd6:	d411      	bmi.n	800effc <__swsetup_r+0x50>
 800efd8:	2309      	movs	r3, #9
 800efda:	6033      	str	r3, [r6, #0]
 800efdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800efe0:	81a3      	strh	r3, [r4, #12]
 800efe2:	f04f 30ff 	mov.w	r0, #4294967295
 800efe6:	e03e      	b.n	800f066 <__swsetup_r+0xba>
 800efe8:	4b25      	ldr	r3, [pc, #148]	; (800f080 <__swsetup_r+0xd4>)
 800efea:	429c      	cmp	r4, r3
 800efec:	d101      	bne.n	800eff2 <__swsetup_r+0x46>
 800efee:	68ac      	ldr	r4, [r5, #8]
 800eff0:	e7eb      	b.n	800efca <__swsetup_r+0x1e>
 800eff2:	4b24      	ldr	r3, [pc, #144]	; (800f084 <__swsetup_r+0xd8>)
 800eff4:	429c      	cmp	r4, r3
 800eff6:	bf08      	it	eq
 800eff8:	68ec      	ldreq	r4, [r5, #12]
 800effa:	e7e6      	b.n	800efca <__swsetup_r+0x1e>
 800effc:	0758      	lsls	r0, r3, #29
 800effe:	d512      	bpl.n	800f026 <__swsetup_r+0x7a>
 800f000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f002:	b141      	cbz	r1, 800f016 <__swsetup_r+0x6a>
 800f004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f008:	4299      	cmp	r1, r3
 800f00a:	d002      	beq.n	800f012 <__swsetup_r+0x66>
 800f00c:	4630      	mov	r0, r6
 800f00e:	f7fe fd51 	bl	800dab4 <_free_r>
 800f012:	2300      	movs	r3, #0
 800f014:	6363      	str	r3, [r4, #52]	; 0x34
 800f016:	89a3      	ldrh	r3, [r4, #12]
 800f018:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f01c:	81a3      	strh	r3, [r4, #12]
 800f01e:	2300      	movs	r3, #0
 800f020:	6063      	str	r3, [r4, #4]
 800f022:	6923      	ldr	r3, [r4, #16]
 800f024:	6023      	str	r3, [r4, #0]
 800f026:	89a3      	ldrh	r3, [r4, #12]
 800f028:	f043 0308 	orr.w	r3, r3, #8
 800f02c:	81a3      	strh	r3, [r4, #12]
 800f02e:	6923      	ldr	r3, [r4, #16]
 800f030:	b94b      	cbnz	r3, 800f046 <__swsetup_r+0x9a>
 800f032:	89a3      	ldrh	r3, [r4, #12]
 800f034:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f03c:	d003      	beq.n	800f046 <__swsetup_r+0x9a>
 800f03e:	4621      	mov	r1, r4
 800f040:	4630      	mov	r0, r6
 800f042:	f000 f84d 	bl	800f0e0 <__smakebuf_r>
 800f046:	89a0      	ldrh	r0, [r4, #12]
 800f048:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f04c:	f010 0301 	ands.w	r3, r0, #1
 800f050:	d00a      	beq.n	800f068 <__swsetup_r+0xbc>
 800f052:	2300      	movs	r3, #0
 800f054:	60a3      	str	r3, [r4, #8]
 800f056:	6963      	ldr	r3, [r4, #20]
 800f058:	425b      	negs	r3, r3
 800f05a:	61a3      	str	r3, [r4, #24]
 800f05c:	6923      	ldr	r3, [r4, #16]
 800f05e:	b943      	cbnz	r3, 800f072 <__swsetup_r+0xc6>
 800f060:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f064:	d1ba      	bne.n	800efdc <__swsetup_r+0x30>
 800f066:	bd70      	pop	{r4, r5, r6, pc}
 800f068:	0781      	lsls	r1, r0, #30
 800f06a:	bf58      	it	pl
 800f06c:	6963      	ldrpl	r3, [r4, #20]
 800f06e:	60a3      	str	r3, [r4, #8]
 800f070:	e7f4      	b.n	800f05c <__swsetup_r+0xb0>
 800f072:	2000      	movs	r0, #0
 800f074:	e7f7      	b.n	800f066 <__swsetup_r+0xba>
 800f076:	bf00      	nop
 800f078:	20000020 	.word	0x20000020
 800f07c:	08012134 	.word	0x08012134
 800f080:	08012154 	.word	0x08012154
 800f084:	08012114 	.word	0x08012114

0800f088 <abort>:
 800f088:	b508      	push	{r3, lr}
 800f08a:	2006      	movs	r0, #6
 800f08c:	f000 f898 	bl	800f1c0 <raise>
 800f090:	2001      	movs	r0, #1
 800f092:	f7f5 f815 	bl	80040c0 <_exit>

0800f096 <__swhatbuf_r>:
 800f096:	b570      	push	{r4, r5, r6, lr}
 800f098:	460e      	mov	r6, r1
 800f09a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f09e:	2900      	cmp	r1, #0
 800f0a0:	b096      	sub	sp, #88	; 0x58
 800f0a2:	4614      	mov	r4, r2
 800f0a4:	461d      	mov	r5, r3
 800f0a6:	da08      	bge.n	800f0ba <__swhatbuf_r+0x24>
 800f0a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	602a      	str	r2, [r5, #0]
 800f0b0:	061a      	lsls	r2, r3, #24
 800f0b2:	d410      	bmi.n	800f0d6 <__swhatbuf_r+0x40>
 800f0b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f0b8:	e00e      	b.n	800f0d8 <__swhatbuf_r+0x42>
 800f0ba:	466a      	mov	r2, sp
 800f0bc:	f000 f89c 	bl	800f1f8 <_fstat_r>
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	dbf1      	blt.n	800f0a8 <__swhatbuf_r+0x12>
 800f0c4:	9a01      	ldr	r2, [sp, #4]
 800f0c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f0ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f0ce:	425a      	negs	r2, r3
 800f0d0:	415a      	adcs	r2, r3
 800f0d2:	602a      	str	r2, [r5, #0]
 800f0d4:	e7ee      	b.n	800f0b4 <__swhatbuf_r+0x1e>
 800f0d6:	2340      	movs	r3, #64	; 0x40
 800f0d8:	2000      	movs	r0, #0
 800f0da:	6023      	str	r3, [r4, #0]
 800f0dc:	b016      	add	sp, #88	; 0x58
 800f0de:	bd70      	pop	{r4, r5, r6, pc}

0800f0e0 <__smakebuf_r>:
 800f0e0:	898b      	ldrh	r3, [r1, #12]
 800f0e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f0e4:	079d      	lsls	r5, r3, #30
 800f0e6:	4606      	mov	r6, r0
 800f0e8:	460c      	mov	r4, r1
 800f0ea:	d507      	bpl.n	800f0fc <__smakebuf_r+0x1c>
 800f0ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f0f0:	6023      	str	r3, [r4, #0]
 800f0f2:	6123      	str	r3, [r4, #16]
 800f0f4:	2301      	movs	r3, #1
 800f0f6:	6163      	str	r3, [r4, #20]
 800f0f8:	b002      	add	sp, #8
 800f0fa:	bd70      	pop	{r4, r5, r6, pc}
 800f0fc:	ab01      	add	r3, sp, #4
 800f0fe:	466a      	mov	r2, sp
 800f100:	f7ff ffc9 	bl	800f096 <__swhatbuf_r>
 800f104:	9900      	ldr	r1, [sp, #0]
 800f106:	4605      	mov	r5, r0
 800f108:	4630      	mov	r0, r6
 800f10a:	f7fe fd3f 	bl	800db8c <_malloc_r>
 800f10e:	b948      	cbnz	r0, 800f124 <__smakebuf_r+0x44>
 800f110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f114:	059a      	lsls	r2, r3, #22
 800f116:	d4ef      	bmi.n	800f0f8 <__smakebuf_r+0x18>
 800f118:	f023 0303 	bic.w	r3, r3, #3
 800f11c:	f043 0302 	orr.w	r3, r3, #2
 800f120:	81a3      	strh	r3, [r4, #12]
 800f122:	e7e3      	b.n	800f0ec <__smakebuf_r+0xc>
 800f124:	4b0d      	ldr	r3, [pc, #52]	; (800f15c <__smakebuf_r+0x7c>)
 800f126:	62b3      	str	r3, [r6, #40]	; 0x28
 800f128:	89a3      	ldrh	r3, [r4, #12]
 800f12a:	6020      	str	r0, [r4, #0]
 800f12c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f130:	81a3      	strh	r3, [r4, #12]
 800f132:	9b00      	ldr	r3, [sp, #0]
 800f134:	6163      	str	r3, [r4, #20]
 800f136:	9b01      	ldr	r3, [sp, #4]
 800f138:	6120      	str	r0, [r4, #16]
 800f13a:	b15b      	cbz	r3, 800f154 <__smakebuf_r+0x74>
 800f13c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f140:	4630      	mov	r0, r6
 800f142:	f000 f86b 	bl	800f21c <_isatty_r>
 800f146:	b128      	cbz	r0, 800f154 <__smakebuf_r+0x74>
 800f148:	89a3      	ldrh	r3, [r4, #12]
 800f14a:	f023 0303 	bic.w	r3, r3, #3
 800f14e:	f043 0301 	orr.w	r3, r3, #1
 800f152:	81a3      	strh	r3, [r4, #12]
 800f154:	89a0      	ldrh	r0, [r4, #12]
 800f156:	4305      	orrs	r5, r0
 800f158:	81a5      	strh	r5, [r4, #12]
 800f15a:	e7cd      	b.n	800f0f8 <__smakebuf_r+0x18>
 800f15c:	0800e9e1 	.word	0x0800e9e1

0800f160 <_malloc_usable_size_r>:
 800f160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f164:	1f18      	subs	r0, r3, #4
 800f166:	2b00      	cmp	r3, #0
 800f168:	bfbc      	itt	lt
 800f16a:	580b      	ldrlt	r3, [r1, r0]
 800f16c:	18c0      	addlt	r0, r0, r3
 800f16e:	4770      	bx	lr

0800f170 <_raise_r>:
 800f170:	291f      	cmp	r1, #31
 800f172:	b538      	push	{r3, r4, r5, lr}
 800f174:	4604      	mov	r4, r0
 800f176:	460d      	mov	r5, r1
 800f178:	d904      	bls.n	800f184 <_raise_r+0x14>
 800f17a:	2316      	movs	r3, #22
 800f17c:	6003      	str	r3, [r0, #0]
 800f17e:	f04f 30ff 	mov.w	r0, #4294967295
 800f182:	bd38      	pop	{r3, r4, r5, pc}
 800f184:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f186:	b112      	cbz	r2, 800f18e <_raise_r+0x1e>
 800f188:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f18c:	b94b      	cbnz	r3, 800f1a2 <_raise_r+0x32>
 800f18e:	4620      	mov	r0, r4
 800f190:	f000 f830 	bl	800f1f4 <_getpid_r>
 800f194:	462a      	mov	r2, r5
 800f196:	4601      	mov	r1, r0
 800f198:	4620      	mov	r0, r4
 800f19a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f19e:	f000 b817 	b.w	800f1d0 <_kill_r>
 800f1a2:	2b01      	cmp	r3, #1
 800f1a4:	d00a      	beq.n	800f1bc <_raise_r+0x4c>
 800f1a6:	1c59      	adds	r1, r3, #1
 800f1a8:	d103      	bne.n	800f1b2 <_raise_r+0x42>
 800f1aa:	2316      	movs	r3, #22
 800f1ac:	6003      	str	r3, [r0, #0]
 800f1ae:	2001      	movs	r0, #1
 800f1b0:	e7e7      	b.n	800f182 <_raise_r+0x12>
 800f1b2:	2400      	movs	r4, #0
 800f1b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f1b8:	4628      	mov	r0, r5
 800f1ba:	4798      	blx	r3
 800f1bc:	2000      	movs	r0, #0
 800f1be:	e7e0      	b.n	800f182 <_raise_r+0x12>

0800f1c0 <raise>:
 800f1c0:	4b02      	ldr	r3, [pc, #8]	; (800f1cc <raise+0xc>)
 800f1c2:	4601      	mov	r1, r0
 800f1c4:	6818      	ldr	r0, [r3, #0]
 800f1c6:	f7ff bfd3 	b.w	800f170 <_raise_r>
 800f1ca:	bf00      	nop
 800f1cc:	20000020 	.word	0x20000020

0800f1d0 <_kill_r>:
 800f1d0:	b538      	push	{r3, r4, r5, lr}
 800f1d2:	4d07      	ldr	r5, [pc, #28]	; (800f1f0 <_kill_r+0x20>)
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	4604      	mov	r4, r0
 800f1d8:	4608      	mov	r0, r1
 800f1da:	4611      	mov	r1, r2
 800f1dc:	602b      	str	r3, [r5, #0]
 800f1de:	f7f4 ff5f 	bl	80040a0 <_kill>
 800f1e2:	1c43      	adds	r3, r0, #1
 800f1e4:	d102      	bne.n	800f1ec <_kill_r+0x1c>
 800f1e6:	682b      	ldr	r3, [r5, #0]
 800f1e8:	b103      	cbz	r3, 800f1ec <_kill_r+0x1c>
 800f1ea:	6023      	str	r3, [r4, #0]
 800f1ec:	bd38      	pop	{r3, r4, r5, pc}
 800f1ee:	bf00      	nop
 800f1f0:	20013ef8 	.word	0x20013ef8

0800f1f4 <_getpid_r>:
 800f1f4:	f7f4 bf4c 	b.w	8004090 <_getpid>

0800f1f8 <_fstat_r>:
 800f1f8:	b538      	push	{r3, r4, r5, lr}
 800f1fa:	4d07      	ldr	r5, [pc, #28]	; (800f218 <_fstat_r+0x20>)
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	4604      	mov	r4, r0
 800f200:	4608      	mov	r0, r1
 800f202:	4611      	mov	r1, r2
 800f204:	602b      	str	r3, [r5, #0]
 800f206:	f7f4 ffaa 	bl	800415e <_fstat>
 800f20a:	1c43      	adds	r3, r0, #1
 800f20c:	d102      	bne.n	800f214 <_fstat_r+0x1c>
 800f20e:	682b      	ldr	r3, [r5, #0]
 800f210:	b103      	cbz	r3, 800f214 <_fstat_r+0x1c>
 800f212:	6023      	str	r3, [r4, #0]
 800f214:	bd38      	pop	{r3, r4, r5, pc}
 800f216:	bf00      	nop
 800f218:	20013ef8 	.word	0x20013ef8

0800f21c <_isatty_r>:
 800f21c:	b538      	push	{r3, r4, r5, lr}
 800f21e:	4d06      	ldr	r5, [pc, #24]	; (800f238 <_isatty_r+0x1c>)
 800f220:	2300      	movs	r3, #0
 800f222:	4604      	mov	r4, r0
 800f224:	4608      	mov	r0, r1
 800f226:	602b      	str	r3, [r5, #0]
 800f228:	f7f4 ffa9 	bl	800417e <_isatty>
 800f22c:	1c43      	adds	r3, r0, #1
 800f22e:	d102      	bne.n	800f236 <_isatty_r+0x1a>
 800f230:	682b      	ldr	r3, [r5, #0]
 800f232:	b103      	cbz	r3, 800f236 <_isatty_r+0x1a>
 800f234:	6023      	str	r3, [r4, #0]
 800f236:	bd38      	pop	{r3, r4, r5, pc}
 800f238:	20013ef8 	.word	0x20013ef8
 800f23c:	00000000 	.word	0x00000000

0800f240 <cos>:
 800f240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f242:	ec53 2b10 	vmov	r2, r3, d0
 800f246:	4826      	ldr	r0, [pc, #152]	; (800f2e0 <cos+0xa0>)
 800f248:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f24c:	4281      	cmp	r1, r0
 800f24e:	dc06      	bgt.n	800f25e <cos+0x1e>
 800f250:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800f2d8 <cos+0x98>
 800f254:	b005      	add	sp, #20
 800f256:	f85d eb04 	ldr.w	lr, [sp], #4
 800f25a:	f001 bc8d 	b.w	8010b78 <__kernel_cos>
 800f25e:	4821      	ldr	r0, [pc, #132]	; (800f2e4 <cos+0xa4>)
 800f260:	4281      	cmp	r1, r0
 800f262:	dd09      	ble.n	800f278 <cos+0x38>
 800f264:	ee10 0a10 	vmov	r0, s0
 800f268:	4619      	mov	r1, r3
 800f26a:	f7f1 f825 	bl	80002b8 <__aeabi_dsub>
 800f26e:	ec41 0b10 	vmov	d0, r0, r1
 800f272:	b005      	add	sp, #20
 800f274:	f85d fb04 	ldr.w	pc, [sp], #4
 800f278:	4668      	mov	r0, sp
 800f27a:	f001 f9bd 	bl	80105f8 <__ieee754_rem_pio2>
 800f27e:	f000 0003 	and.w	r0, r0, #3
 800f282:	2801      	cmp	r0, #1
 800f284:	d00b      	beq.n	800f29e <cos+0x5e>
 800f286:	2802      	cmp	r0, #2
 800f288:	d016      	beq.n	800f2b8 <cos+0x78>
 800f28a:	b9e0      	cbnz	r0, 800f2c6 <cos+0x86>
 800f28c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f290:	ed9d 0b00 	vldr	d0, [sp]
 800f294:	f001 fc70 	bl	8010b78 <__kernel_cos>
 800f298:	ec51 0b10 	vmov	r0, r1, d0
 800f29c:	e7e7      	b.n	800f26e <cos+0x2e>
 800f29e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f2a2:	ed9d 0b00 	vldr	d0, [sp]
 800f2a6:	f002 f87f 	bl	80113a8 <__kernel_sin>
 800f2aa:	ec53 2b10 	vmov	r2, r3, d0
 800f2ae:	ee10 0a10 	vmov	r0, s0
 800f2b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f2b6:	e7da      	b.n	800f26e <cos+0x2e>
 800f2b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f2bc:	ed9d 0b00 	vldr	d0, [sp]
 800f2c0:	f001 fc5a 	bl	8010b78 <__kernel_cos>
 800f2c4:	e7f1      	b.n	800f2aa <cos+0x6a>
 800f2c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f2ca:	ed9d 0b00 	vldr	d0, [sp]
 800f2ce:	2001      	movs	r0, #1
 800f2d0:	f002 f86a 	bl	80113a8 <__kernel_sin>
 800f2d4:	e7e0      	b.n	800f298 <cos+0x58>
 800f2d6:	bf00      	nop
	...
 800f2e0:	3fe921fb 	.word	0x3fe921fb
 800f2e4:	7fefffff 	.word	0x7fefffff

0800f2e8 <sin>:
 800f2e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f2ea:	ec53 2b10 	vmov	r2, r3, d0
 800f2ee:	4828      	ldr	r0, [pc, #160]	; (800f390 <sin+0xa8>)
 800f2f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f2f4:	4281      	cmp	r1, r0
 800f2f6:	dc07      	bgt.n	800f308 <sin+0x20>
 800f2f8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800f388 <sin+0xa0>
 800f2fc:	2000      	movs	r0, #0
 800f2fe:	b005      	add	sp, #20
 800f300:	f85d eb04 	ldr.w	lr, [sp], #4
 800f304:	f002 b850 	b.w	80113a8 <__kernel_sin>
 800f308:	4822      	ldr	r0, [pc, #136]	; (800f394 <sin+0xac>)
 800f30a:	4281      	cmp	r1, r0
 800f30c:	dd09      	ble.n	800f322 <sin+0x3a>
 800f30e:	ee10 0a10 	vmov	r0, s0
 800f312:	4619      	mov	r1, r3
 800f314:	f7f0 ffd0 	bl	80002b8 <__aeabi_dsub>
 800f318:	ec41 0b10 	vmov	d0, r0, r1
 800f31c:	b005      	add	sp, #20
 800f31e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f322:	4668      	mov	r0, sp
 800f324:	f001 f968 	bl	80105f8 <__ieee754_rem_pio2>
 800f328:	f000 0003 	and.w	r0, r0, #3
 800f32c:	2801      	cmp	r0, #1
 800f32e:	d00c      	beq.n	800f34a <sin+0x62>
 800f330:	2802      	cmp	r0, #2
 800f332:	d011      	beq.n	800f358 <sin+0x70>
 800f334:	b9f0      	cbnz	r0, 800f374 <sin+0x8c>
 800f336:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f33a:	ed9d 0b00 	vldr	d0, [sp]
 800f33e:	2001      	movs	r0, #1
 800f340:	f002 f832 	bl	80113a8 <__kernel_sin>
 800f344:	ec51 0b10 	vmov	r0, r1, d0
 800f348:	e7e6      	b.n	800f318 <sin+0x30>
 800f34a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f34e:	ed9d 0b00 	vldr	d0, [sp]
 800f352:	f001 fc11 	bl	8010b78 <__kernel_cos>
 800f356:	e7f5      	b.n	800f344 <sin+0x5c>
 800f358:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f35c:	ed9d 0b00 	vldr	d0, [sp]
 800f360:	2001      	movs	r0, #1
 800f362:	f002 f821 	bl	80113a8 <__kernel_sin>
 800f366:	ec53 2b10 	vmov	r2, r3, d0
 800f36a:	ee10 0a10 	vmov	r0, s0
 800f36e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f372:	e7d1      	b.n	800f318 <sin+0x30>
 800f374:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f378:	ed9d 0b00 	vldr	d0, [sp]
 800f37c:	f001 fbfc 	bl	8010b78 <__kernel_cos>
 800f380:	e7f1      	b.n	800f366 <sin+0x7e>
 800f382:	bf00      	nop
 800f384:	f3af 8000 	nop.w
	...
 800f390:	3fe921fb 	.word	0x3fe921fb
 800f394:	7fefffff 	.word	0x7fefffff

0800f398 <acos>:
 800f398:	b538      	push	{r3, r4, r5, lr}
 800f39a:	ed2d 8b02 	vpush	{d8}
 800f39e:	ec55 4b10 	vmov	r4, r5, d0
 800f3a2:	f000 f8cd 	bl	800f540 <__ieee754_acos>
 800f3a6:	4622      	mov	r2, r4
 800f3a8:	462b      	mov	r3, r5
 800f3aa:	4620      	mov	r0, r4
 800f3ac:	4629      	mov	r1, r5
 800f3ae:	eeb0 8a40 	vmov.f32	s16, s0
 800f3b2:	eef0 8a60 	vmov.f32	s17, s1
 800f3b6:	f7f1 fbd1 	bl	8000b5c <__aeabi_dcmpun>
 800f3ba:	b9a8      	cbnz	r0, 800f3e8 <acos+0x50>
 800f3bc:	ec45 4b10 	vmov	d0, r4, r5
 800f3c0:	f002 fa82 	bl	80118c8 <fabs>
 800f3c4:	4b0c      	ldr	r3, [pc, #48]	; (800f3f8 <acos+0x60>)
 800f3c6:	ec51 0b10 	vmov	r0, r1, d0
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	f7f1 fbbc 	bl	8000b48 <__aeabi_dcmpgt>
 800f3d0:	b150      	cbz	r0, 800f3e8 <acos+0x50>
 800f3d2:	f7fa fe5b 	bl	800a08c <__errno>
 800f3d6:	ecbd 8b02 	vpop	{d8}
 800f3da:	2321      	movs	r3, #33	; 0x21
 800f3dc:	6003      	str	r3, [r0, #0]
 800f3de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3e2:	4806      	ldr	r0, [pc, #24]	; (800f3fc <acos+0x64>)
 800f3e4:	f7ff b8d8 	b.w	800e598 <nan>
 800f3e8:	eeb0 0a48 	vmov.f32	s0, s16
 800f3ec:	eef0 0a68 	vmov.f32	s1, s17
 800f3f0:	ecbd 8b02 	vpop	{d8}
 800f3f4:	bd38      	pop	{r3, r4, r5, pc}
 800f3f6:	bf00      	nop
 800f3f8:	3ff00000 	.word	0x3ff00000
 800f3fc:	08012113 	.word	0x08012113

0800f400 <atan2>:
 800f400:	f000 bafe 	b.w	800fa00 <__ieee754_atan2>

0800f404 <pow>:
 800f404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f406:	ed2d 8b02 	vpush	{d8}
 800f40a:	eeb0 8a40 	vmov.f32	s16, s0
 800f40e:	eef0 8a60 	vmov.f32	s17, s1
 800f412:	ec55 4b11 	vmov	r4, r5, d1
 800f416:	f000 fbbf 	bl	800fb98 <__ieee754_pow>
 800f41a:	4622      	mov	r2, r4
 800f41c:	462b      	mov	r3, r5
 800f41e:	4620      	mov	r0, r4
 800f420:	4629      	mov	r1, r5
 800f422:	ec57 6b10 	vmov	r6, r7, d0
 800f426:	f7f1 fb99 	bl	8000b5c <__aeabi_dcmpun>
 800f42a:	2800      	cmp	r0, #0
 800f42c:	d13b      	bne.n	800f4a6 <pow+0xa2>
 800f42e:	ec51 0b18 	vmov	r0, r1, d8
 800f432:	2200      	movs	r2, #0
 800f434:	2300      	movs	r3, #0
 800f436:	f7f1 fb5f 	bl	8000af8 <__aeabi_dcmpeq>
 800f43a:	b1b8      	cbz	r0, 800f46c <pow+0x68>
 800f43c:	2200      	movs	r2, #0
 800f43e:	2300      	movs	r3, #0
 800f440:	4620      	mov	r0, r4
 800f442:	4629      	mov	r1, r5
 800f444:	f7f1 fb58 	bl	8000af8 <__aeabi_dcmpeq>
 800f448:	2800      	cmp	r0, #0
 800f44a:	d146      	bne.n	800f4da <pow+0xd6>
 800f44c:	ec45 4b10 	vmov	d0, r4, r5
 800f450:	f002 fa43 	bl	80118da <finite>
 800f454:	b338      	cbz	r0, 800f4a6 <pow+0xa2>
 800f456:	2200      	movs	r2, #0
 800f458:	2300      	movs	r3, #0
 800f45a:	4620      	mov	r0, r4
 800f45c:	4629      	mov	r1, r5
 800f45e:	f7f1 fb55 	bl	8000b0c <__aeabi_dcmplt>
 800f462:	b300      	cbz	r0, 800f4a6 <pow+0xa2>
 800f464:	f7fa fe12 	bl	800a08c <__errno>
 800f468:	2322      	movs	r3, #34	; 0x22
 800f46a:	e01b      	b.n	800f4a4 <pow+0xa0>
 800f46c:	ec47 6b10 	vmov	d0, r6, r7
 800f470:	f002 fa33 	bl	80118da <finite>
 800f474:	b9e0      	cbnz	r0, 800f4b0 <pow+0xac>
 800f476:	eeb0 0a48 	vmov.f32	s0, s16
 800f47a:	eef0 0a68 	vmov.f32	s1, s17
 800f47e:	f002 fa2c 	bl	80118da <finite>
 800f482:	b1a8      	cbz	r0, 800f4b0 <pow+0xac>
 800f484:	ec45 4b10 	vmov	d0, r4, r5
 800f488:	f002 fa27 	bl	80118da <finite>
 800f48c:	b180      	cbz	r0, 800f4b0 <pow+0xac>
 800f48e:	4632      	mov	r2, r6
 800f490:	463b      	mov	r3, r7
 800f492:	4630      	mov	r0, r6
 800f494:	4639      	mov	r1, r7
 800f496:	f7f1 fb61 	bl	8000b5c <__aeabi_dcmpun>
 800f49a:	2800      	cmp	r0, #0
 800f49c:	d0e2      	beq.n	800f464 <pow+0x60>
 800f49e:	f7fa fdf5 	bl	800a08c <__errno>
 800f4a2:	2321      	movs	r3, #33	; 0x21
 800f4a4:	6003      	str	r3, [r0, #0]
 800f4a6:	ecbd 8b02 	vpop	{d8}
 800f4aa:	ec47 6b10 	vmov	d0, r6, r7
 800f4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	4630      	mov	r0, r6
 800f4b6:	4639      	mov	r1, r7
 800f4b8:	f7f1 fb1e 	bl	8000af8 <__aeabi_dcmpeq>
 800f4bc:	2800      	cmp	r0, #0
 800f4be:	d0f2      	beq.n	800f4a6 <pow+0xa2>
 800f4c0:	eeb0 0a48 	vmov.f32	s0, s16
 800f4c4:	eef0 0a68 	vmov.f32	s1, s17
 800f4c8:	f002 fa07 	bl	80118da <finite>
 800f4cc:	2800      	cmp	r0, #0
 800f4ce:	d0ea      	beq.n	800f4a6 <pow+0xa2>
 800f4d0:	ec45 4b10 	vmov	d0, r4, r5
 800f4d4:	f002 fa01 	bl	80118da <finite>
 800f4d8:	e7c3      	b.n	800f462 <pow+0x5e>
 800f4da:	4f01      	ldr	r7, [pc, #4]	; (800f4e0 <pow+0xdc>)
 800f4dc:	2600      	movs	r6, #0
 800f4de:	e7e2      	b.n	800f4a6 <pow+0xa2>
 800f4e0:	3ff00000 	.word	0x3ff00000

0800f4e4 <sqrt>:
 800f4e4:	b538      	push	{r3, r4, r5, lr}
 800f4e6:	ed2d 8b02 	vpush	{d8}
 800f4ea:	ec55 4b10 	vmov	r4, r5, d0
 800f4ee:	f001 fa8f 	bl	8010a10 <__ieee754_sqrt>
 800f4f2:	4622      	mov	r2, r4
 800f4f4:	462b      	mov	r3, r5
 800f4f6:	4620      	mov	r0, r4
 800f4f8:	4629      	mov	r1, r5
 800f4fa:	eeb0 8a40 	vmov.f32	s16, s0
 800f4fe:	eef0 8a60 	vmov.f32	s17, s1
 800f502:	f7f1 fb2b 	bl	8000b5c <__aeabi_dcmpun>
 800f506:	b990      	cbnz	r0, 800f52e <sqrt+0x4a>
 800f508:	2200      	movs	r2, #0
 800f50a:	2300      	movs	r3, #0
 800f50c:	4620      	mov	r0, r4
 800f50e:	4629      	mov	r1, r5
 800f510:	f7f1 fafc 	bl	8000b0c <__aeabi_dcmplt>
 800f514:	b158      	cbz	r0, 800f52e <sqrt+0x4a>
 800f516:	f7fa fdb9 	bl	800a08c <__errno>
 800f51a:	2321      	movs	r3, #33	; 0x21
 800f51c:	6003      	str	r3, [r0, #0]
 800f51e:	2200      	movs	r2, #0
 800f520:	2300      	movs	r3, #0
 800f522:	4610      	mov	r0, r2
 800f524:	4619      	mov	r1, r3
 800f526:	f7f1 f9a9 	bl	800087c <__aeabi_ddiv>
 800f52a:	ec41 0b18 	vmov	d8, r0, r1
 800f52e:	eeb0 0a48 	vmov.f32	s0, s16
 800f532:	eef0 0a68 	vmov.f32	s1, s17
 800f536:	ecbd 8b02 	vpop	{d8}
 800f53a:	bd38      	pop	{r3, r4, r5, pc}
 800f53c:	0000      	movs	r0, r0
	...

0800f540 <__ieee754_acos>:
 800f540:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f544:	ec55 4b10 	vmov	r4, r5, d0
 800f548:	49b7      	ldr	r1, [pc, #732]	; (800f828 <__ieee754_acos+0x2e8>)
 800f54a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f54e:	428b      	cmp	r3, r1
 800f550:	dd1b      	ble.n	800f58a <__ieee754_acos+0x4a>
 800f552:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800f556:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f55a:	4323      	orrs	r3, r4
 800f55c:	d106      	bne.n	800f56c <__ieee754_acos+0x2c>
 800f55e:	2d00      	cmp	r5, #0
 800f560:	f300 8211 	bgt.w	800f986 <__ieee754_acos+0x446>
 800f564:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800f7c0 <__ieee754_acos+0x280>
 800f568:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f56c:	ee10 2a10 	vmov	r2, s0
 800f570:	462b      	mov	r3, r5
 800f572:	ee10 0a10 	vmov	r0, s0
 800f576:	4629      	mov	r1, r5
 800f578:	f7f0 fe9e 	bl	80002b8 <__aeabi_dsub>
 800f57c:	4602      	mov	r2, r0
 800f57e:	460b      	mov	r3, r1
 800f580:	f7f1 f97c 	bl	800087c <__aeabi_ddiv>
 800f584:	ec41 0b10 	vmov	d0, r0, r1
 800f588:	e7ee      	b.n	800f568 <__ieee754_acos+0x28>
 800f58a:	49a8      	ldr	r1, [pc, #672]	; (800f82c <__ieee754_acos+0x2ec>)
 800f58c:	428b      	cmp	r3, r1
 800f58e:	f300 8087 	bgt.w	800f6a0 <__ieee754_acos+0x160>
 800f592:	4aa7      	ldr	r2, [pc, #668]	; (800f830 <__ieee754_acos+0x2f0>)
 800f594:	4293      	cmp	r3, r2
 800f596:	f340 81f9 	ble.w	800f98c <__ieee754_acos+0x44c>
 800f59a:	ee10 2a10 	vmov	r2, s0
 800f59e:	ee10 0a10 	vmov	r0, s0
 800f5a2:	462b      	mov	r3, r5
 800f5a4:	4629      	mov	r1, r5
 800f5a6:	f7f1 f83f 	bl	8000628 <__aeabi_dmul>
 800f5aa:	a387      	add	r3, pc, #540	; (adr r3, 800f7c8 <__ieee754_acos+0x288>)
 800f5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b0:	4606      	mov	r6, r0
 800f5b2:	460f      	mov	r7, r1
 800f5b4:	f7f1 f838 	bl	8000628 <__aeabi_dmul>
 800f5b8:	a385      	add	r3, pc, #532	; (adr r3, 800f7d0 <__ieee754_acos+0x290>)
 800f5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5be:	f7f0 fe7d 	bl	80002bc <__adddf3>
 800f5c2:	4632      	mov	r2, r6
 800f5c4:	463b      	mov	r3, r7
 800f5c6:	f7f1 f82f 	bl	8000628 <__aeabi_dmul>
 800f5ca:	a383      	add	r3, pc, #524	; (adr r3, 800f7d8 <__ieee754_acos+0x298>)
 800f5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d0:	f7f0 fe72 	bl	80002b8 <__aeabi_dsub>
 800f5d4:	4632      	mov	r2, r6
 800f5d6:	463b      	mov	r3, r7
 800f5d8:	f7f1 f826 	bl	8000628 <__aeabi_dmul>
 800f5dc:	a380      	add	r3, pc, #512	; (adr r3, 800f7e0 <__ieee754_acos+0x2a0>)
 800f5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e2:	f7f0 fe6b 	bl	80002bc <__adddf3>
 800f5e6:	4632      	mov	r2, r6
 800f5e8:	463b      	mov	r3, r7
 800f5ea:	f7f1 f81d 	bl	8000628 <__aeabi_dmul>
 800f5ee:	a37e      	add	r3, pc, #504	; (adr r3, 800f7e8 <__ieee754_acos+0x2a8>)
 800f5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5f4:	f7f0 fe60 	bl	80002b8 <__aeabi_dsub>
 800f5f8:	4632      	mov	r2, r6
 800f5fa:	463b      	mov	r3, r7
 800f5fc:	f7f1 f814 	bl	8000628 <__aeabi_dmul>
 800f600:	a37b      	add	r3, pc, #492	; (adr r3, 800f7f0 <__ieee754_acos+0x2b0>)
 800f602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f606:	f7f0 fe59 	bl	80002bc <__adddf3>
 800f60a:	4632      	mov	r2, r6
 800f60c:	463b      	mov	r3, r7
 800f60e:	f7f1 f80b 	bl	8000628 <__aeabi_dmul>
 800f612:	a379      	add	r3, pc, #484	; (adr r3, 800f7f8 <__ieee754_acos+0x2b8>)
 800f614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f618:	4680      	mov	r8, r0
 800f61a:	4689      	mov	r9, r1
 800f61c:	4630      	mov	r0, r6
 800f61e:	4639      	mov	r1, r7
 800f620:	f7f1 f802 	bl	8000628 <__aeabi_dmul>
 800f624:	a376      	add	r3, pc, #472	; (adr r3, 800f800 <__ieee754_acos+0x2c0>)
 800f626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f62a:	f7f0 fe45 	bl	80002b8 <__aeabi_dsub>
 800f62e:	4632      	mov	r2, r6
 800f630:	463b      	mov	r3, r7
 800f632:	f7f0 fff9 	bl	8000628 <__aeabi_dmul>
 800f636:	a374      	add	r3, pc, #464	; (adr r3, 800f808 <__ieee754_acos+0x2c8>)
 800f638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f63c:	f7f0 fe3e 	bl	80002bc <__adddf3>
 800f640:	4632      	mov	r2, r6
 800f642:	463b      	mov	r3, r7
 800f644:	f7f0 fff0 	bl	8000628 <__aeabi_dmul>
 800f648:	a371      	add	r3, pc, #452	; (adr r3, 800f810 <__ieee754_acos+0x2d0>)
 800f64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f64e:	f7f0 fe33 	bl	80002b8 <__aeabi_dsub>
 800f652:	4632      	mov	r2, r6
 800f654:	463b      	mov	r3, r7
 800f656:	f7f0 ffe7 	bl	8000628 <__aeabi_dmul>
 800f65a:	4b76      	ldr	r3, [pc, #472]	; (800f834 <__ieee754_acos+0x2f4>)
 800f65c:	2200      	movs	r2, #0
 800f65e:	f7f0 fe2d 	bl	80002bc <__adddf3>
 800f662:	4602      	mov	r2, r0
 800f664:	460b      	mov	r3, r1
 800f666:	4640      	mov	r0, r8
 800f668:	4649      	mov	r1, r9
 800f66a:	f7f1 f907 	bl	800087c <__aeabi_ddiv>
 800f66e:	4622      	mov	r2, r4
 800f670:	462b      	mov	r3, r5
 800f672:	f7f0 ffd9 	bl	8000628 <__aeabi_dmul>
 800f676:	4602      	mov	r2, r0
 800f678:	460b      	mov	r3, r1
 800f67a:	a167      	add	r1, pc, #412	; (adr r1, 800f818 <__ieee754_acos+0x2d8>)
 800f67c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f680:	f7f0 fe1a 	bl	80002b8 <__aeabi_dsub>
 800f684:	4602      	mov	r2, r0
 800f686:	460b      	mov	r3, r1
 800f688:	4620      	mov	r0, r4
 800f68a:	4629      	mov	r1, r5
 800f68c:	f7f0 fe14 	bl	80002b8 <__aeabi_dsub>
 800f690:	4602      	mov	r2, r0
 800f692:	460b      	mov	r3, r1
 800f694:	a162      	add	r1, pc, #392	; (adr r1, 800f820 <__ieee754_acos+0x2e0>)
 800f696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f69a:	f7f0 fe0d 	bl	80002b8 <__aeabi_dsub>
 800f69e:	e771      	b.n	800f584 <__ieee754_acos+0x44>
 800f6a0:	2d00      	cmp	r5, #0
 800f6a2:	f280 80cb 	bge.w	800f83c <__ieee754_acos+0x2fc>
 800f6a6:	ee10 0a10 	vmov	r0, s0
 800f6aa:	4b62      	ldr	r3, [pc, #392]	; (800f834 <__ieee754_acos+0x2f4>)
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	4629      	mov	r1, r5
 800f6b0:	f7f0 fe04 	bl	80002bc <__adddf3>
 800f6b4:	4b60      	ldr	r3, [pc, #384]	; (800f838 <__ieee754_acos+0x2f8>)
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	f7f0 ffb6 	bl	8000628 <__aeabi_dmul>
 800f6bc:	a342      	add	r3, pc, #264	; (adr r3, 800f7c8 <__ieee754_acos+0x288>)
 800f6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c2:	4604      	mov	r4, r0
 800f6c4:	460d      	mov	r5, r1
 800f6c6:	f7f0 ffaf 	bl	8000628 <__aeabi_dmul>
 800f6ca:	a341      	add	r3, pc, #260	; (adr r3, 800f7d0 <__ieee754_acos+0x290>)
 800f6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d0:	f7f0 fdf4 	bl	80002bc <__adddf3>
 800f6d4:	4622      	mov	r2, r4
 800f6d6:	462b      	mov	r3, r5
 800f6d8:	f7f0 ffa6 	bl	8000628 <__aeabi_dmul>
 800f6dc:	a33e      	add	r3, pc, #248	; (adr r3, 800f7d8 <__ieee754_acos+0x298>)
 800f6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e2:	f7f0 fde9 	bl	80002b8 <__aeabi_dsub>
 800f6e6:	4622      	mov	r2, r4
 800f6e8:	462b      	mov	r3, r5
 800f6ea:	f7f0 ff9d 	bl	8000628 <__aeabi_dmul>
 800f6ee:	a33c      	add	r3, pc, #240	; (adr r3, 800f7e0 <__ieee754_acos+0x2a0>)
 800f6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f4:	f7f0 fde2 	bl	80002bc <__adddf3>
 800f6f8:	4622      	mov	r2, r4
 800f6fa:	462b      	mov	r3, r5
 800f6fc:	f7f0 ff94 	bl	8000628 <__aeabi_dmul>
 800f700:	a339      	add	r3, pc, #228	; (adr r3, 800f7e8 <__ieee754_acos+0x2a8>)
 800f702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f706:	f7f0 fdd7 	bl	80002b8 <__aeabi_dsub>
 800f70a:	4622      	mov	r2, r4
 800f70c:	462b      	mov	r3, r5
 800f70e:	f7f0 ff8b 	bl	8000628 <__aeabi_dmul>
 800f712:	a337      	add	r3, pc, #220	; (adr r3, 800f7f0 <__ieee754_acos+0x2b0>)
 800f714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f718:	f7f0 fdd0 	bl	80002bc <__adddf3>
 800f71c:	4622      	mov	r2, r4
 800f71e:	462b      	mov	r3, r5
 800f720:	f7f0 ff82 	bl	8000628 <__aeabi_dmul>
 800f724:	ec45 4b10 	vmov	d0, r4, r5
 800f728:	4680      	mov	r8, r0
 800f72a:	4689      	mov	r9, r1
 800f72c:	f001 f970 	bl	8010a10 <__ieee754_sqrt>
 800f730:	a331      	add	r3, pc, #196	; (adr r3, 800f7f8 <__ieee754_acos+0x2b8>)
 800f732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f736:	4620      	mov	r0, r4
 800f738:	4629      	mov	r1, r5
 800f73a:	ec57 6b10 	vmov	r6, r7, d0
 800f73e:	f7f0 ff73 	bl	8000628 <__aeabi_dmul>
 800f742:	a32f      	add	r3, pc, #188	; (adr r3, 800f800 <__ieee754_acos+0x2c0>)
 800f744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f748:	f7f0 fdb6 	bl	80002b8 <__aeabi_dsub>
 800f74c:	4622      	mov	r2, r4
 800f74e:	462b      	mov	r3, r5
 800f750:	f7f0 ff6a 	bl	8000628 <__aeabi_dmul>
 800f754:	a32c      	add	r3, pc, #176	; (adr r3, 800f808 <__ieee754_acos+0x2c8>)
 800f756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75a:	f7f0 fdaf 	bl	80002bc <__adddf3>
 800f75e:	4622      	mov	r2, r4
 800f760:	462b      	mov	r3, r5
 800f762:	f7f0 ff61 	bl	8000628 <__aeabi_dmul>
 800f766:	a32a      	add	r3, pc, #168	; (adr r3, 800f810 <__ieee754_acos+0x2d0>)
 800f768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f76c:	f7f0 fda4 	bl	80002b8 <__aeabi_dsub>
 800f770:	4622      	mov	r2, r4
 800f772:	462b      	mov	r3, r5
 800f774:	f7f0 ff58 	bl	8000628 <__aeabi_dmul>
 800f778:	4b2e      	ldr	r3, [pc, #184]	; (800f834 <__ieee754_acos+0x2f4>)
 800f77a:	2200      	movs	r2, #0
 800f77c:	f7f0 fd9e 	bl	80002bc <__adddf3>
 800f780:	4602      	mov	r2, r0
 800f782:	460b      	mov	r3, r1
 800f784:	4640      	mov	r0, r8
 800f786:	4649      	mov	r1, r9
 800f788:	f7f1 f878 	bl	800087c <__aeabi_ddiv>
 800f78c:	4632      	mov	r2, r6
 800f78e:	463b      	mov	r3, r7
 800f790:	f7f0 ff4a 	bl	8000628 <__aeabi_dmul>
 800f794:	a320      	add	r3, pc, #128	; (adr r3, 800f818 <__ieee754_acos+0x2d8>)
 800f796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f79a:	f7f0 fd8d 	bl	80002b8 <__aeabi_dsub>
 800f79e:	4632      	mov	r2, r6
 800f7a0:	463b      	mov	r3, r7
 800f7a2:	f7f0 fd8b 	bl	80002bc <__adddf3>
 800f7a6:	4602      	mov	r2, r0
 800f7a8:	460b      	mov	r3, r1
 800f7aa:	f7f0 fd87 	bl	80002bc <__adddf3>
 800f7ae:	4602      	mov	r2, r0
 800f7b0:	460b      	mov	r3, r1
 800f7b2:	a103      	add	r1, pc, #12	; (adr r1, 800f7c0 <__ieee754_acos+0x280>)
 800f7b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f7b8:	e76f      	b.n	800f69a <__ieee754_acos+0x15a>
 800f7ba:	bf00      	nop
 800f7bc:	f3af 8000 	nop.w
 800f7c0:	54442d18 	.word	0x54442d18
 800f7c4:	400921fb 	.word	0x400921fb
 800f7c8:	0dfdf709 	.word	0x0dfdf709
 800f7cc:	3f023de1 	.word	0x3f023de1
 800f7d0:	7501b288 	.word	0x7501b288
 800f7d4:	3f49efe0 	.word	0x3f49efe0
 800f7d8:	b5688f3b 	.word	0xb5688f3b
 800f7dc:	3fa48228 	.word	0x3fa48228
 800f7e0:	0e884455 	.word	0x0e884455
 800f7e4:	3fc9c155 	.word	0x3fc9c155
 800f7e8:	03eb6f7d 	.word	0x03eb6f7d
 800f7ec:	3fd4d612 	.word	0x3fd4d612
 800f7f0:	55555555 	.word	0x55555555
 800f7f4:	3fc55555 	.word	0x3fc55555
 800f7f8:	b12e9282 	.word	0xb12e9282
 800f7fc:	3fb3b8c5 	.word	0x3fb3b8c5
 800f800:	1b8d0159 	.word	0x1b8d0159
 800f804:	3fe6066c 	.word	0x3fe6066c
 800f808:	9c598ac8 	.word	0x9c598ac8
 800f80c:	40002ae5 	.word	0x40002ae5
 800f810:	1c8a2d4b 	.word	0x1c8a2d4b
 800f814:	40033a27 	.word	0x40033a27
 800f818:	33145c07 	.word	0x33145c07
 800f81c:	3c91a626 	.word	0x3c91a626
 800f820:	54442d18 	.word	0x54442d18
 800f824:	3ff921fb 	.word	0x3ff921fb
 800f828:	3fefffff 	.word	0x3fefffff
 800f82c:	3fdfffff 	.word	0x3fdfffff
 800f830:	3c600000 	.word	0x3c600000
 800f834:	3ff00000 	.word	0x3ff00000
 800f838:	3fe00000 	.word	0x3fe00000
 800f83c:	ee10 2a10 	vmov	r2, s0
 800f840:	462b      	mov	r3, r5
 800f842:	496d      	ldr	r1, [pc, #436]	; (800f9f8 <__ieee754_acos+0x4b8>)
 800f844:	2000      	movs	r0, #0
 800f846:	f7f0 fd37 	bl	80002b8 <__aeabi_dsub>
 800f84a:	4b6c      	ldr	r3, [pc, #432]	; (800f9fc <__ieee754_acos+0x4bc>)
 800f84c:	2200      	movs	r2, #0
 800f84e:	f7f0 feeb 	bl	8000628 <__aeabi_dmul>
 800f852:	4604      	mov	r4, r0
 800f854:	460d      	mov	r5, r1
 800f856:	ec45 4b10 	vmov	d0, r4, r5
 800f85a:	f001 f8d9 	bl	8010a10 <__ieee754_sqrt>
 800f85e:	a34e      	add	r3, pc, #312	; (adr r3, 800f998 <__ieee754_acos+0x458>)
 800f860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f864:	4620      	mov	r0, r4
 800f866:	4629      	mov	r1, r5
 800f868:	ec59 8b10 	vmov	r8, r9, d0
 800f86c:	f7f0 fedc 	bl	8000628 <__aeabi_dmul>
 800f870:	a34b      	add	r3, pc, #300	; (adr r3, 800f9a0 <__ieee754_acos+0x460>)
 800f872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f876:	f7f0 fd21 	bl	80002bc <__adddf3>
 800f87a:	4622      	mov	r2, r4
 800f87c:	462b      	mov	r3, r5
 800f87e:	f7f0 fed3 	bl	8000628 <__aeabi_dmul>
 800f882:	a349      	add	r3, pc, #292	; (adr r3, 800f9a8 <__ieee754_acos+0x468>)
 800f884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f888:	f7f0 fd16 	bl	80002b8 <__aeabi_dsub>
 800f88c:	4622      	mov	r2, r4
 800f88e:	462b      	mov	r3, r5
 800f890:	f7f0 feca 	bl	8000628 <__aeabi_dmul>
 800f894:	a346      	add	r3, pc, #280	; (adr r3, 800f9b0 <__ieee754_acos+0x470>)
 800f896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f89a:	f7f0 fd0f 	bl	80002bc <__adddf3>
 800f89e:	4622      	mov	r2, r4
 800f8a0:	462b      	mov	r3, r5
 800f8a2:	f7f0 fec1 	bl	8000628 <__aeabi_dmul>
 800f8a6:	a344      	add	r3, pc, #272	; (adr r3, 800f9b8 <__ieee754_acos+0x478>)
 800f8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ac:	f7f0 fd04 	bl	80002b8 <__aeabi_dsub>
 800f8b0:	4622      	mov	r2, r4
 800f8b2:	462b      	mov	r3, r5
 800f8b4:	f7f0 feb8 	bl	8000628 <__aeabi_dmul>
 800f8b8:	a341      	add	r3, pc, #260	; (adr r3, 800f9c0 <__ieee754_acos+0x480>)
 800f8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8be:	f7f0 fcfd 	bl	80002bc <__adddf3>
 800f8c2:	4622      	mov	r2, r4
 800f8c4:	462b      	mov	r3, r5
 800f8c6:	f7f0 feaf 	bl	8000628 <__aeabi_dmul>
 800f8ca:	a33f      	add	r3, pc, #252	; (adr r3, 800f9c8 <__ieee754_acos+0x488>)
 800f8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d0:	4682      	mov	sl, r0
 800f8d2:	468b      	mov	fp, r1
 800f8d4:	4620      	mov	r0, r4
 800f8d6:	4629      	mov	r1, r5
 800f8d8:	f7f0 fea6 	bl	8000628 <__aeabi_dmul>
 800f8dc:	a33c      	add	r3, pc, #240	; (adr r3, 800f9d0 <__ieee754_acos+0x490>)
 800f8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e2:	f7f0 fce9 	bl	80002b8 <__aeabi_dsub>
 800f8e6:	4622      	mov	r2, r4
 800f8e8:	462b      	mov	r3, r5
 800f8ea:	f7f0 fe9d 	bl	8000628 <__aeabi_dmul>
 800f8ee:	a33a      	add	r3, pc, #232	; (adr r3, 800f9d8 <__ieee754_acos+0x498>)
 800f8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f4:	f7f0 fce2 	bl	80002bc <__adddf3>
 800f8f8:	4622      	mov	r2, r4
 800f8fa:	462b      	mov	r3, r5
 800f8fc:	f7f0 fe94 	bl	8000628 <__aeabi_dmul>
 800f900:	a337      	add	r3, pc, #220	; (adr r3, 800f9e0 <__ieee754_acos+0x4a0>)
 800f902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f906:	f7f0 fcd7 	bl	80002b8 <__aeabi_dsub>
 800f90a:	4622      	mov	r2, r4
 800f90c:	462b      	mov	r3, r5
 800f90e:	f7f0 fe8b 	bl	8000628 <__aeabi_dmul>
 800f912:	4b39      	ldr	r3, [pc, #228]	; (800f9f8 <__ieee754_acos+0x4b8>)
 800f914:	2200      	movs	r2, #0
 800f916:	f7f0 fcd1 	bl	80002bc <__adddf3>
 800f91a:	4602      	mov	r2, r0
 800f91c:	460b      	mov	r3, r1
 800f91e:	4650      	mov	r0, sl
 800f920:	4659      	mov	r1, fp
 800f922:	f7f0 ffab 	bl	800087c <__aeabi_ddiv>
 800f926:	4642      	mov	r2, r8
 800f928:	464b      	mov	r3, r9
 800f92a:	f7f0 fe7d 	bl	8000628 <__aeabi_dmul>
 800f92e:	2600      	movs	r6, #0
 800f930:	4682      	mov	sl, r0
 800f932:	468b      	mov	fp, r1
 800f934:	4632      	mov	r2, r6
 800f936:	464b      	mov	r3, r9
 800f938:	4630      	mov	r0, r6
 800f93a:	4649      	mov	r1, r9
 800f93c:	f7f0 fe74 	bl	8000628 <__aeabi_dmul>
 800f940:	4602      	mov	r2, r0
 800f942:	460b      	mov	r3, r1
 800f944:	4620      	mov	r0, r4
 800f946:	4629      	mov	r1, r5
 800f948:	f7f0 fcb6 	bl	80002b8 <__aeabi_dsub>
 800f94c:	4632      	mov	r2, r6
 800f94e:	4604      	mov	r4, r0
 800f950:	460d      	mov	r5, r1
 800f952:	464b      	mov	r3, r9
 800f954:	4640      	mov	r0, r8
 800f956:	4649      	mov	r1, r9
 800f958:	f7f0 fcb0 	bl	80002bc <__adddf3>
 800f95c:	4602      	mov	r2, r0
 800f95e:	460b      	mov	r3, r1
 800f960:	4620      	mov	r0, r4
 800f962:	4629      	mov	r1, r5
 800f964:	f7f0 ff8a 	bl	800087c <__aeabi_ddiv>
 800f968:	4602      	mov	r2, r0
 800f96a:	460b      	mov	r3, r1
 800f96c:	4650      	mov	r0, sl
 800f96e:	4659      	mov	r1, fp
 800f970:	f7f0 fca4 	bl	80002bc <__adddf3>
 800f974:	4632      	mov	r2, r6
 800f976:	464b      	mov	r3, r9
 800f978:	f7f0 fca0 	bl	80002bc <__adddf3>
 800f97c:	4602      	mov	r2, r0
 800f97e:	460b      	mov	r3, r1
 800f980:	f7f0 fc9c 	bl	80002bc <__adddf3>
 800f984:	e5fe      	b.n	800f584 <__ieee754_acos+0x44>
 800f986:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800f9e8 <__ieee754_acos+0x4a8>
 800f98a:	e5ed      	b.n	800f568 <__ieee754_acos+0x28>
 800f98c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800f9f0 <__ieee754_acos+0x4b0>
 800f990:	e5ea      	b.n	800f568 <__ieee754_acos+0x28>
 800f992:	bf00      	nop
 800f994:	f3af 8000 	nop.w
 800f998:	0dfdf709 	.word	0x0dfdf709
 800f99c:	3f023de1 	.word	0x3f023de1
 800f9a0:	7501b288 	.word	0x7501b288
 800f9a4:	3f49efe0 	.word	0x3f49efe0
 800f9a8:	b5688f3b 	.word	0xb5688f3b
 800f9ac:	3fa48228 	.word	0x3fa48228
 800f9b0:	0e884455 	.word	0x0e884455
 800f9b4:	3fc9c155 	.word	0x3fc9c155
 800f9b8:	03eb6f7d 	.word	0x03eb6f7d
 800f9bc:	3fd4d612 	.word	0x3fd4d612
 800f9c0:	55555555 	.word	0x55555555
 800f9c4:	3fc55555 	.word	0x3fc55555
 800f9c8:	b12e9282 	.word	0xb12e9282
 800f9cc:	3fb3b8c5 	.word	0x3fb3b8c5
 800f9d0:	1b8d0159 	.word	0x1b8d0159
 800f9d4:	3fe6066c 	.word	0x3fe6066c
 800f9d8:	9c598ac8 	.word	0x9c598ac8
 800f9dc:	40002ae5 	.word	0x40002ae5
 800f9e0:	1c8a2d4b 	.word	0x1c8a2d4b
 800f9e4:	40033a27 	.word	0x40033a27
	...
 800f9f0:	54442d18 	.word	0x54442d18
 800f9f4:	3ff921fb 	.word	0x3ff921fb
 800f9f8:	3ff00000 	.word	0x3ff00000
 800f9fc:	3fe00000 	.word	0x3fe00000

0800fa00 <__ieee754_atan2>:
 800fa00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa04:	ec57 6b11 	vmov	r6, r7, d1
 800fa08:	4273      	negs	r3, r6
 800fa0a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800fb90 <__ieee754_atan2+0x190>
 800fa0e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800fa12:	4333      	orrs	r3, r6
 800fa14:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800fa18:	4573      	cmp	r3, lr
 800fa1a:	ec51 0b10 	vmov	r0, r1, d0
 800fa1e:	ee11 8a10 	vmov	r8, s2
 800fa22:	d80a      	bhi.n	800fa3a <__ieee754_atan2+0x3a>
 800fa24:	4244      	negs	r4, r0
 800fa26:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fa2a:	4304      	orrs	r4, r0
 800fa2c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800fa30:	4574      	cmp	r4, lr
 800fa32:	ee10 9a10 	vmov	r9, s0
 800fa36:	468c      	mov	ip, r1
 800fa38:	d907      	bls.n	800fa4a <__ieee754_atan2+0x4a>
 800fa3a:	4632      	mov	r2, r6
 800fa3c:	463b      	mov	r3, r7
 800fa3e:	f7f0 fc3d 	bl	80002bc <__adddf3>
 800fa42:	ec41 0b10 	vmov	d0, r0, r1
 800fa46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa4a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800fa4e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fa52:	4334      	orrs	r4, r6
 800fa54:	d103      	bne.n	800fa5e <__ieee754_atan2+0x5e>
 800fa56:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa5a:	f001 bd95 	b.w	8011588 <atan>
 800fa5e:	17bc      	asrs	r4, r7, #30
 800fa60:	f004 0402 	and.w	r4, r4, #2
 800fa64:	ea53 0909 	orrs.w	r9, r3, r9
 800fa68:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800fa6c:	d107      	bne.n	800fa7e <__ieee754_atan2+0x7e>
 800fa6e:	2c02      	cmp	r4, #2
 800fa70:	d060      	beq.n	800fb34 <__ieee754_atan2+0x134>
 800fa72:	2c03      	cmp	r4, #3
 800fa74:	d1e5      	bne.n	800fa42 <__ieee754_atan2+0x42>
 800fa76:	a142      	add	r1, pc, #264	; (adr r1, 800fb80 <__ieee754_atan2+0x180>)
 800fa78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa7c:	e7e1      	b.n	800fa42 <__ieee754_atan2+0x42>
 800fa7e:	ea52 0808 	orrs.w	r8, r2, r8
 800fa82:	d106      	bne.n	800fa92 <__ieee754_atan2+0x92>
 800fa84:	f1bc 0f00 	cmp.w	ip, #0
 800fa88:	da5f      	bge.n	800fb4a <__ieee754_atan2+0x14a>
 800fa8a:	a13f      	add	r1, pc, #252	; (adr r1, 800fb88 <__ieee754_atan2+0x188>)
 800fa8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa90:	e7d7      	b.n	800fa42 <__ieee754_atan2+0x42>
 800fa92:	4572      	cmp	r2, lr
 800fa94:	d10f      	bne.n	800fab6 <__ieee754_atan2+0xb6>
 800fa96:	4293      	cmp	r3, r2
 800fa98:	f104 34ff 	add.w	r4, r4, #4294967295
 800fa9c:	d107      	bne.n	800faae <__ieee754_atan2+0xae>
 800fa9e:	2c02      	cmp	r4, #2
 800faa0:	d84c      	bhi.n	800fb3c <__ieee754_atan2+0x13c>
 800faa2:	4b35      	ldr	r3, [pc, #212]	; (800fb78 <__ieee754_atan2+0x178>)
 800faa4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800faa8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800faac:	e7c9      	b.n	800fa42 <__ieee754_atan2+0x42>
 800faae:	2c02      	cmp	r4, #2
 800fab0:	d848      	bhi.n	800fb44 <__ieee754_atan2+0x144>
 800fab2:	4b32      	ldr	r3, [pc, #200]	; (800fb7c <__ieee754_atan2+0x17c>)
 800fab4:	e7f6      	b.n	800faa4 <__ieee754_atan2+0xa4>
 800fab6:	4573      	cmp	r3, lr
 800fab8:	d0e4      	beq.n	800fa84 <__ieee754_atan2+0x84>
 800faba:	1a9b      	subs	r3, r3, r2
 800fabc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800fac0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fac4:	da1e      	bge.n	800fb04 <__ieee754_atan2+0x104>
 800fac6:	2f00      	cmp	r7, #0
 800fac8:	da01      	bge.n	800face <__ieee754_atan2+0xce>
 800faca:	323c      	adds	r2, #60	; 0x3c
 800facc:	db1e      	blt.n	800fb0c <__ieee754_atan2+0x10c>
 800face:	4632      	mov	r2, r6
 800fad0:	463b      	mov	r3, r7
 800fad2:	f7f0 fed3 	bl	800087c <__aeabi_ddiv>
 800fad6:	ec41 0b10 	vmov	d0, r0, r1
 800fada:	f001 fef5 	bl	80118c8 <fabs>
 800fade:	f001 fd53 	bl	8011588 <atan>
 800fae2:	ec51 0b10 	vmov	r0, r1, d0
 800fae6:	2c01      	cmp	r4, #1
 800fae8:	d013      	beq.n	800fb12 <__ieee754_atan2+0x112>
 800faea:	2c02      	cmp	r4, #2
 800faec:	d015      	beq.n	800fb1a <__ieee754_atan2+0x11a>
 800faee:	2c00      	cmp	r4, #0
 800faf0:	d0a7      	beq.n	800fa42 <__ieee754_atan2+0x42>
 800faf2:	a319      	add	r3, pc, #100	; (adr r3, 800fb58 <__ieee754_atan2+0x158>)
 800faf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf8:	f7f0 fbde 	bl	80002b8 <__aeabi_dsub>
 800fafc:	a318      	add	r3, pc, #96	; (adr r3, 800fb60 <__ieee754_atan2+0x160>)
 800fafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb02:	e014      	b.n	800fb2e <__ieee754_atan2+0x12e>
 800fb04:	a118      	add	r1, pc, #96	; (adr r1, 800fb68 <__ieee754_atan2+0x168>)
 800fb06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb0a:	e7ec      	b.n	800fae6 <__ieee754_atan2+0xe6>
 800fb0c:	2000      	movs	r0, #0
 800fb0e:	2100      	movs	r1, #0
 800fb10:	e7e9      	b.n	800fae6 <__ieee754_atan2+0xe6>
 800fb12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fb16:	4619      	mov	r1, r3
 800fb18:	e793      	b.n	800fa42 <__ieee754_atan2+0x42>
 800fb1a:	a30f      	add	r3, pc, #60	; (adr r3, 800fb58 <__ieee754_atan2+0x158>)
 800fb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb20:	f7f0 fbca 	bl	80002b8 <__aeabi_dsub>
 800fb24:	4602      	mov	r2, r0
 800fb26:	460b      	mov	r3, r1
 800fb28:	a10d      	add	r1, pc, #52	; (adr r1, 800fb60 <__ieee754_atan2+0x160>)
 800fb2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb2e:	f7f0 fbc3 	bl	80002b8 <__aeabi_dsub>
 800fb32:	e786      	b.n	800fa42 <__ieee754_atan2+0x42>
 800fb34:	a10a      	add	r1, pc, #40	; (adr r1, 800fb60 <__ieee754_atan2+0x160>)
 800fb36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb3a:	e782      	b.n	800fa42 <__ieee754_atan2+0x42>
 800fb3c:	a10c      	add	r1, pc, #48	; (adr r1, 800fb70 <__ieee754_atan2+0x170>)
 800fb3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb42:	e77e      	b.n	800fa42 <__ieee754_atan2+0x42>
 800fb44:	2000      	movs	r0, #0
 800fb46:	2100      	movs	r1, #0
 800fb48:	e77b      	b.n	800fa42 <__ieee754_atan2+0x42>
 800fb4a:	a107      	add	r1, pc, #28	; (adr r1, 800fb68 <__ieee754_atan2+0x168>)
 800fb4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb50:	e777      	b.n	800fa42 <__ieee754_atan2+0x42>
 800fb52:	bf00      	nop
 800fb54:	f3af 8000 	nop.w
 800fb58:	33145c07 	.word	0x33145c07
 800fb5c:	3ca1a626 	.word	0x3ca1a626
 800fb60:	54442d18 	.word	0x54442d18
 800fb64:	400921fb 	.word	0x400921fb
 800fb68:	54442d18 	.word	0x54442d18
 800fb6c:	3ff921fb 	.word	0x3ff921fb
 800fb70:	54442d18 	.word	0x54442d18
 800fb74:	3fe921fb 	.word	0x3fe921fb
 800fb78:	08012178 	.word	0x08012178
 800fb7c:	08012190 	.word	0x08012190
 800fb80:	54442d18 	.word	0x54442d18
 800fb84:	c00921fb 	.word	0xc00921fb
 800fb88:	54442d18 	.word	0x54442d18
 800fb8c:	bff921fb 	.word	0xbff921fb
 800fb90:	7ff00000 	.word	0x7ff00000
 800fb94:	00000000 	.word	0x00000000

0800fb98 <__ieee754_pow>:
 800fb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb9c:	ed2d 8b06 	vpush	{d8-d10}
 800fba0:	b089      	sub	sp, #36	; 0x24
 800fba2:	ed8d 1b00 	vstr	d1, [sp]
 800fba6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800fbaa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800fbae:	ea58 0102 	orrs.w	r1, r8, r2
 800fbb2:	ec57 6b10 	vmov	r6, r7, d0
 800fbb6:	d115      	bne.n	800fbe4 <__ieee754_pow+0x4c>
 800fbb8:	19b3      	adds	r3, r6, r6
 800fbba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800fbbe:	4152      	adcs	r2, r2
 800fbc0:	4299      	cmp	r1, r3
 800fbc2:	4b89      	ldr	r3, [pc, #548]	; (800fde8 <__ieee754_pow+0x250>)
 800fbc4:	4193      	sbcs	r3, r2
 800fbc6:	f080 84d2 	bcs.w	801056e <__ieee754_pow+0x9d6>
 800fbca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbce:	4630      	mov	r0, r6
 800fbd0:	4639      	mov	r1, r7
 800fbd2:	f7f0 fb73 	bl	80002bc <__adddf3>
 800fbd6:	ec41 0b10 	vmov	d0, r0, r1
 800fbda:	b009      	add	sp, #36	; 0x24
 800fbdc:	ecbd 8b06 	vpop	{d8-d10}
 800fbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbe4:	4b81      	ldr	r3, [pc, #516]	; (800fdec <__ieee754_pow+0x254>)
 800fbe6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800fbea:	429c      	cmp	r4, r3
 800fbec:	ee10 aa10 	vmov	sl, s0
 800fbf0:	463d      	mov	r5, r7
 800fbf2:	dc06      	bgt.n	800fc02 <__ieee754_pow+0x6a>
 800fbf4:	d101      	bne.n	800fbfa <__ieee754_pow+0x62>
 800fbf6:	2e00      	cmp	r6, #0
 800fbf8:	d1e7      	bne.n	800fbca <__ieee754_pow+0x32>
 800fbfa:	4598      	cmp	r8, r3
 800fbfc:	dc01      	bgt.n	800fc02 <__ieee754_pow+0x6a>
 800fbfe:	d10f      	bne.n	800fc20 <__ieee754_pow+0x88>
 800fc00:	b172      	cbz	r2, 800fc20 <__ieee754_pow+0x88>
 800fc02:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800fc06:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800fc0a:	ea55 050a 	orrs.w	r5, r5, sl
 800fc0e:	d1dc      	bne.n	800fbca <__ieee754_pow+0x32>
 800fc10:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fc14:	18db      	adds	r3, r3, r3
 800fc16:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800fc1a:	4152      	adcs	r2, r2
 800fc1c:	429d      	cmp	r5, r3
 800fc1e:	e7d0      	b.n	800fbc2 <__ieee754_pow+0x2a>
 800fc20:	2d00      	cmp	r5, #0
 800fc22:	da3b      	bge.n	800fc9c <__ieee754_pow+0x104>
 800fc24:	4b72      	ldr	r3, [pc, #456]	; (800fdf0 <__ieee754_pow+0x258>)
 800fc26:	4598      	cmp	r8, r3
 800fc28:	dc51      	bgt.n	800fcce <__ieee754_pow+0x136>
 800fc2a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800fc2e:	4598      	cmp	r8, r3
 800fc30:	f340 84ac 	ble.w	801058c <__ieee754_pow+0x9f4>
 800fc34:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fc38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fc3c:	2b14      	cmp	r3, #20
 800fc3e:	dd0f      	ble.n	800fc60 <__ieee754_pow+0xc8>
 800fc40:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800fc44:	fa22 f103 	lsr.w	r1, r2, r3
 800fc48:	fa01 f303 	lsl.w	r3, r1, r3
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	f040 849d 	bne.w	801058c <__ieee754_pow+0x9f4>
 800fc52:	f001 0101 	and.w	r1, r1, #1
 800fc56:	f1c1 0302 	rsb	r3, r1, #2
 800fc5a:	9304      	str	r3, [sp, #16]
 800fc5c:	b182      	cbz	r2, 800fc80 <__ieee754_pow+0xe8>
 800fc5e:	e05f      	b.n	800fd20 <__ieee754_pow+0x188>
 800fc60:	2a00      	cmp	r2, #0
 800fc62:	d15b      	bne.n	800fd1c <__ieee754_pow+0x184>
 800fc64:	f1c3 0314 	rsb	r3, r3, #20
 800fc68:	fa48 f103 	asr.w	r1, r8, r3
 800fc6c:	fa01 f303 	lsl.w	r3, r1, r3
 800fc70:	4543      	cmp	r3, r8
 800fc72:	f040 8488 	bne.w	8010586 <__ieee754_pow+0x9ee>
 800fc76:	f001 0101 	and.w	r1, r1, #1
 800fc7a:	f1c1 0302 	rsb	r3, r1, #2
 800fc7e:	9304      	str	r3, [sp, #16]
 800fc80:	4b5c      	ldr	r3, [pc, #368]	; (800fdf4 <__ieee754_pow+0x25c>)
 800fc82:	4598      	cmp	r8, r3
 800fc84:	d132      	bne.n	800fcec <__ieee754_pow+0x154>
 800fc86:	f1b9 0f00 	cmp.w	r9, #0
 800fc8a:	f280 8478 	bge.w	801057e <__ieee754_pow+0x9e6>
 800fc8e:	4959      	ldr	r1, [pc, #356]	; (800fdf4 <__ieee754_pow+0x25c>)
 800fc90:	4632      	mov	r2, r6
 800fc92:	463b      	mov	r3, r7
 800fc94:	2000      	movs	r0, #0
 800fc96:	f7f0 fdf1 	bl	800087c <__aeabi_ddiv>
 800fc9a:	e79c      	b.n	800fbd6 <__ieee754_pow+0x3e>
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	9304      	str	r3, [sp, #16]
 800fca0:	2a00      	cmp	r2, #0
 800fca2:	d13d      	bne.n	800fd20 <__ieee754_pow+0x188>
 800fca4:	4b51      	ldr	r3, [pc, #324]	; (800fdec <__ieee754_pow+0x254>)
 800fca6:	4598      	cmp	r8, r3
 800fca8:	d1ea      	bne.n	800fc80 <__ieee754_pow+0xe8>
 800fcaa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800fcae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800fcb2:	ea53 030a 	orrs.w	r3, r3, sl
 800fcb6:	f000 845a 	beq.w	801056e <__ieee754_pow+0x9d6>
 800fcba:	4b4f      	ldr	r3, [pc, #316]	; (800fdf8 <__ieee754_pow+0x260>)
 800fcbc:	429c      	cmp	r4, r3
 800fcbe:	dd08      	ble.n	800fcd2 <__ieee754_pow+0x13a>
 800fcc0:	f1b9 0f00 	cmp.w	r9, #0
 800fcc4:	f2c0 8457 	blt.w	8010576 <__ieee754_pow+0x9de>
 800fcc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fccc:	e783      	b.n	800fbd6 <__ieee754_pow+0x3e>
 800fcce:	2302      	movs	r3, #2
 800fcd0:	e7e5      	b.n	800fc9e <__ieee754_pow+0x106>
 800fcd2:	f1b9 0f00 	cmp.w	r9, #0
 800fcd6:	f04f 0000 	mov.w	r0, #0
 800fcda:	f04f 0100 	mov.w	r1, #0
 800fcde:	f6bf af7a 	bge.w	800fbd6 <__ieee754_pow+0x3e>
 800fce2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800fce6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fcea:	e774      	b.n	800fbd6 <__ieee754_pow+0x3e>
 800fcec:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800fcf0:	d106      	bne.n	800fd00 <__ieee754_pow+0x168>
 800fcf2:	4632      	mov	r2, r6
 800fcf4:	463b      	mov	r3, r7
 800fcf6:	4630      	mov	r0, r6
 800fcf8:	4639      	mov	r1, r7
 800fcfa:	f7f0 fc95 	bl	8000628 <__aeabi_dmul>
 800fcfe:	e76a      	b.n	800fbd6 <__ieee754_pow+0x3e>
 800fd00:	4b3e      	ldr	r3, [pc, #248]	; (800fdfc <__ieee754_pow+0x264>)
 800fd02:	4599      	cmp	r9, r3
 800fd04:	d10c      	bne.n	800fd20 <__ieee754_pow+0x188>
 800fd06:	2d00      	cmp	r5, #0
 800fd08:	db0a      	blt.n	800fd20 <__ieee754_pow+0x188>
 800fd0a:	ec47 6b10 	vmov	d0, r6, r7
 800fd0e:	b009      	add	sp, #36	; 0x24
 800fd10:	ecbd 8b06 	vpop	{d8-d10}
 800fd14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd18:	f000 be7a 	b.w	8010a10 <__ieee754_sqrt>
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	9304      	str	r3, [sp, #16]
 800fd20:	ec47 6b10 	vmov	d0, r6, r7
 800fd24:	f001 fdd0 	bl	80118c8 <fabs>
 800fd28:	ec51 0b10 	vmov	r0, r1, d0
 800fd2c:	f1ba 0f00 	cmp.w	sl, #0
 800fd30:	d129      	bne.n	800fd86 <__ieee754_pow+0x1ee>
 800fd32:	b124      	cbz	r4, 800fd3e <__ieee754_pow+0x1a6>
 800fd34:	4b2f      	ldr	r3, [pc, #188]	; (800fdf4 <__ieee754_pow+0x25c>)
 800fd36:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d123      	bne.n	800fd86 <__ieee754_pow+0x1ee>
 800fd3e:	f1b9 0f00 	cmp.w	r9, #0
 800fd42:	da05      	bge.n	800fd50 <__ieee754_pow+0x1b8>
 800fd44:	4602      	mov	r2, r0
 800fd46:	460b      	mov	r3, r1
 800fd48:	2000      	movs	r0, #0
 800fd4a:	492a      	ldr	r1, [pc, #168]	; (800fdf4 <__ieee754_pow+0x25c>)
 800fd4c:	f7f0 fd96 	bl	800087c <__aeabi_ddiv>
 800fd50:	2d00      	cmp	r5, #0
 800fd52:	f6bf af40 	bge.w	800fbd6 <__ieee754_pow+0x3e>
 800fd56:	9b04      	ldr	r3, [sp, #16]
 800fd58:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800fd5c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fd60:	4323      	orrs	r3, r4
 800fd62:	d108      	bne.n	800fd76 <__ieee754_pow+0x1de>
 800fd64:	4602      	mov	r2, r0
 800fd66:	460b      	mov	r3, r1
 800fd68:	4610      	mov	r0, r2
 800fd6a:	4619      	mov	r1, r3
 800fd6c:	f7f0 faa4 	bl	80002b8 <__aeabi_dsub>
 800fd70:	4602      	mov	r2, r0
 800fd72:	460b      	mov	r3, r1
 800fd74:	e78f      	b.n	800fc96 <__ieee754_pow+0xfe>
 800fd76:	9b04      	ldr	r3, [sp, #16]
 800fd78:	2b01      	cmp	r3, #1
 800fd7a:	f47f af2c 	bne.w	800fbd6 <__ieee754_pow+0x3e>
 800fd7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fd82:	4619      	mov	r1, r3
 800fd84:	e727      	b.n	800fbd6 <__ieee754_pow+0x3e>
 800fd86:	0feb      	lsrs	r3, r5, #31
 800fd88:	3b01      	subs	r3, #1
 800fd8a:	9306      	str	r3, [sp, #24]
 800fd8c:	9a06      	ldr	r2, [sp, #24]
 800fd8e:	9b04      	ldr	r3, [sp, #16]
 800fd90:	4313      	orrs	r3, r2
 800fd92:	d102      	bne.n	800fd9a <__ieee754_pow+0x202>
 800fd94:	4632      	mov	r2, r6
 800fd96:	463b      	mov	r3, r7
 800fd98:	e7e6      	b.n	800fd68 <__ieee754_pow+0x1d0>
 800fd9a:	4b19      	ldr	r3, [pc, #100]	; (800fe00 <__ieee754_pow+0x268>)
 800fd9c:	4598      	cmp	r8, r3
 800fd9e:	f340 80fb 	ble.w	800ff98 <__ieee754_pow+0x400>
 800fda2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800fda6:	4598      	cmp	r8, r3
 800fda8:	4b13      	ldr	r3, [pc, #76]	; (800fdf8 <__ieee754_pow+0x260>)
 800fdaa:	dd0c      	ble.n	800fdc6 <__ieee754_pow+0x22e>
 800fdac:	429c      	cmp	r4, r3
 800fdae:	dc0f      	bgt.n	800fdd0 <__ieee754_pow+0x238>
 800fdb0:	f1b9 0f00 	cmp.w	r9, #0
 800fdb4:	da0f      	bge.n	800fdd6 <__ieee754_pow+0x23e>
 800fdb6:	2000      	movs	r0, #0
 800fdb8:	b009      	add	sp, #36	; 0x24
 800fdba:	ecbd 8b06 	vpop	{d8-d10}
 800fdbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc2:	f001 bbd6 	b.w	8011572 <__math_oflow>
 800fdc6:	429c      	cmp	r4, r3
 800fdc8:	dbf2      	blt.n	800fdb0 <__ieee754_pow+0x218>
 800fdca:	4b0a      	ldr	r3, [pc, #40]	; (800fdf4 <__ieee754_pow+0x25c>)
 800fdcc:	429c      	cmp	r4, r3
 800fdce:	dd19      	ble.n	800fe04 <__ieee754_pow+0x26c>
 800fdd0:	f1b9 0f00 	cmp.w	r9, #0
 800fdd4:	dcef      	bgt.n	800fdb6 <__ieee754_pow+0x21e>
 800fdd6:	2000      	movs	r0, #0
 800fdd8:	b009      	add	sp, #36	; 0x24
 800fdda:	ecbd 8b06 	vpop	{d8-d10}
 800fdde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fde2:	f001 bbbd 	b.w	8011560 <__math_uflow>
 800fde6:	bf00      	nop
 800fde8:	fff00000 	.word	0xfff00000
 800fdec:	7ff00000 	.word	0x7ff00000
 800fdf0:	433fffff 	.word	0x433fffff
 800fdf4:	3ff00000 	.word	0x3ff00000
 800fdf8:	3fefffff 	.word	0x3fefffff
 800fdfc:	3fe00000 	.word	0x3fe00000
 800fe00:	41e00000 	.word	0x41e00000
 800fe04:	4b60      	ldr	r3, [pc, #384]	; (800ff88 <__ieee754_pow+0x3f0>)
 800fe06:	2200      	movs	r2, #0
 800fe08:	f7f0 fa56 	bl	80002b8 <__aeabi_dsub>
 800fe0c:	a354      	add	r3, pc, #336	; (adr r3, 800ff60 <__ieee754_pow+0x3c8>)
 800fe0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe12:	4604      	mov	r4, r0
 800fe14:	460d      	mov	r5, r1
 800fe16:	f7f0 fc07 	bl	8000628 <__aeabi_dmul>
 800fe1a:	a353      	add	r3, pc, #332	; (adr r3, 800ff68 <__ieee754_pow+0x3d0>)
 800fe1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe20:	4606      	mov	r6, r0
 800fe22:	460f      	mov	r7, r1
 800fe24:	4620      	mov	r0, r4
 800fe26:	4629      	mov	r1, r5
 800fe28:	f7f0 fbfe 	bl	8000628 <__aeabi_dmul>
 800fe2c:	4b57      	ldr	r3, [pc, #348]	; (800ff8c <__ieee754_pow+0x3f4>)
 800fe2e:	4682      	mov	sl, r0
 800fe30:	468b      	mov	fp, r1
 800fe32:	2200      	movs	r2, #0
 800fe34:	4620      	mov	r0, r4
 800fe36:	4629      	mov	r1, r5
 800fe38:	f7f0 fbf6 	bl	8000628 <__aeabi_dmul>
 800fe3c:	4602      	mov	r2, r0
 800fe3e:	460b      	mov	r3, r1
 800fe40:	a14b      	add	r1, pc, #300	; (adr r1, 800ff70 <__ieee754_pow+0x3d8>)
 800fe42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe46:	f7f0 fa37 	bl	80002b8 <__aeabi_dsub>
 800fe4a:	4622      	mov	r2, r4
 800fe4c:	462b      	mov	r3, r5
 800fe4e:	f7f0 fbeb 	bl	8000628 <__aeabi_dmul>
 800fe52:	4602      	mov	r2, r0
 800fe54:	460b      	mov	r3, r1
 800fe56:	2000      	movs	r0, #0
 800fe58:	494d      	ldr	r1, [pc, #308]	; (800ff90 <__ieee754_pow+0x3f8>)
 800fe5a:	f7f0 fa2d 	bl	80002b8 <__aeabi_dsub>
 800fe5e:	4622      	mov	r2, r4
 800fe60:	4680      	mov	r8, r0
 800fe62:	4689      	mov	r9, r1
 800fe64:	462b      	mov	r3, r5
 800fe66:	4620      	mov	r0, r4
 800fe68:	4629      	mov	r1, r5
 800fe6a:	f7f0 fbdd 	bl	8000628 <__aeabi_dmul>
 800fe6e:	4602      	mov	r2, r0
 800fe70:	460b      	mov	r3, r1
 800fe72:	4640      	mov	r0, r8
 800fe74:	4649      	mov	r1, r9
 800fe76:	f7f0 fbd7 	bl	8000628 <__aeabi_dmul>
 800fe7a:	a33f      	add	r3, pc, #252	; (adr r3, 800ff78 <__ieee754_pow+0x3e0>)
 800fe7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe80:	f7f0 fbd2 	bl	8000628 <__aeabi_dmul>
 800fe84:	4602      	mov	r2, r0
 800fe86:	460b      	mov	r3, r1
 800fe88:	4650      	mov	r0, sl
 800fe8a:	4659      	mov	r1, fp
 800fe8c:	f7f0 fa14 	bl	80002b8 <__aeabi_dsub>
 800fe90:	4602      	mov	r2, r0
 800fe92:	460b      	mov	r3, r1
 800fe94:	4680      	mov	r8, r0
 800fe96:	4689      	mov	r9, r1
 800fe98:	4630      	mov	r0, r6
 800fe9a:	4639      	mov	r1, r7
 800fe9c:	f7f0 fa0e 	bl	80002bc <__adddf3>
 800fea0:	2000      	movs	r0, #0
 800fea2:	4632      	mov	r2, r6
 800fea4:	463b      	mov	r3, r7
 800fea6:	4604      	mov	r4, r0
 800fea8:	460d      	mov	r5, r1
 800feaa:	f7f0 fa05 	bl	80002b8 <__aeabi_dsub>
 800feae:	4602      	mov	r2, r0
 800feb0:	460b      	mov	r3, r1
 800feb2:	4640      	mov	r0, r8
 800feb4:	4649      	mov	r1, r9
 800feb6:	f7f0 f9ff 	bl	80002b8 <__aeabi_dsub>
 800feba:	9b04      	ldr	r3, [sp, #16]
 800febc:	9a06      	ldr	r2, [sp, #24]
 800febe:	3b01      	subs	r3, #1
 800fec0:	4313      	orrs	r3, r2
 800fec2:	4682      	mov	sl, r0
 800fec4:	468b      	mov	fp, r1
 800fec6:	f040 81e7 	bne.w	8010298 <__ieee754_pow+0x700>
 800feca:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ff80 <__ieee754_pow+0x3e8>
 800fece:	eeb0 8a47 	vmov.f32	s16, s14
 800fed2:	eef0 8a67 	vmov.f32	s17, s15
 800fed6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800feda:	2600      	movs	r6, #0
 800fedc:	4632      	mov	r2, r6
 800fede:	463b      	mov	r3, r7
 800fee0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fee4:	f7f0 f9e8 	bl	80002b8 <__aeabi_dsub>
 800fee8:	4622      	mov	r2, r4
 800feea:	462b      	mov	r3, r5
 800feec:	f7f0 fb9c 	bl	8000628 <__aeabi_dmul>
 800fef0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fef4:	4680      	mov	r8, r0
 800fef6:	4689      	mov	r9, r1
 800fef8:	4650      	mov	r0, sl
 800fefa:	4659      	mov	r1, fp
 800fefc:	f7f0 fb94 	bl	8000628 <__aeabi_dmul>
 800ff00:	4602      	mov	r2, r0
 800ff02:	460b      	mov	r3, r1
 800ff04:	4640      	mov	r0, r8
 800ff06:	4649      	mov	r1, r9
 800ff08:	f7f0 f9d8 	bl	80002bc <__adddf3>
 800ff0c:	4632      	mov	r2, r6
 800ff0e:	463b      	mov	r3, r7
 800ff10:	4680      	mov	r8, r0
 800ff12:	4689      	mov	r9, r1
 800ff14:	4620      	mov	r0, r4
 800ff16:	4629      	mov	r1, r5
 800ff18:	f7f0 fb86 	bl	8000628 <__aeabi_dmul>
 800ff1c:	460b      	mov	r3, r1
 800ff1e:	4604      	mov	r4, r0
 800ff20:	460d      	mov	r5, r1
 800ff22:	4602      	mov	r2, r0
 800ff24:	4649      	mov	r1, r9
 800ff26:	4640      	mov	r0, r8
 800ff28:	f7f0 f9c8 	bl	80002bc <__adddf3>
 800ff2c:	4b19      	ldr	r3, [pc, #100]	; (800ff94 <__ieee754_pow+0x3fc>)
 800ff2e:	4299      	cmp	r1, r3
 800ff30:	ec45 4b19 	vmov	d9, r4, r5
 800ff34:	4606      	mov	r6, r0
 800ff36:	460f      	mov	r7, r1
 800ff38:	468b      	mov	fp, r1
 800ff3a:	f340 82f1 	ble.w	8010520 <__ieee754_pow+0x988>
 800ff3e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ff42:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ff46:	4303      	orrs	r3, r0
 800ff48:	f000 81e4 	beq.w	8010314 <__ieee754_pow+0x77c>
 800ff4c:	ec51 0b18 	vmov	r0, r1, d8
 800ff50:	2200      	movs	r2, #0
 800ff52:	2300      	movs	r3, #0
 800ff54:	f7f0 fdda 	bl	8000b0c <__aeabi_dcmplt>
 800ff58:	3800      	subs	r0, #0
 800ff5a:	bf18      	it	ne
 800ff5c:	2001      	movne	r0, #1
 800ff5e:	e72b      	b.n	800fdb8 <__ieee754_pow+0x220>
 800ff60:	60000000 	.word	0x60000000
 800ff64:	3ff71547 	.word	0x3ff71547
 800ff68:	f85ddf44 	.word	0xf85ddf44
 800ff6c:	3e54ae0b 	.word	0x3e54ae0b
 800ff70:	55555555 	.word	0x55555555
 800ff74:	3fd55555 	.word	0x3fd55555
 800ff78:	652b82fe 	.word	0x652b82fe
 800ff7c:	3ff71547 	.word	0x3ff71547
 800ff80:	00000000 	.word	0x00000000
 800ff84:	bff00000 	.word	0xbff00000
 800ff88:	3ff00000 	.word	0x3ff00000
 800ff8c:	3fd00000 	.word	0x3fd00000
 800ff90:	3fe00000 	.word	0x3fe00000
 800ff94:	408fffff 	.word	0x408fffff
 800ff98:	4bd5      	ldr	r3, [pc, #852]	; (80102f0 <__ieee754_pow+0x758>)
 800ff9a:	402b      	ands	r3, r5
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	b92b      	cbnz	r3, 800ffac <__ieee754_pow+0x414>
 800ffa0:	4bd4      	ldr	r3, [pc, #848]	; (80102f4 <__ieee754_pow+0x75c>)
 800ffa2:	f7f0 fb41 	bl	8000628 <__aeabi_dmul>
 800ffa6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ffaa:	460c      	mov	r4, r1
 800ffac:	1523      	asrs	r3, r4, #20
 800ffae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ffb2:	4413      	add	r3, r2
 800ffb4:	9305      	str	r3, [sp, #20]
 800ffb6:	4bd0      	ldr	r3, [pc, #832]	; (80102f8 <__ieee754_pow+0x760>)
 800ffb8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ffbc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ffc0:	429c      	cmp	r4, r3
 800ffc2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ffc6:	dd08      	ble.n	800ffda <__ieee754_pow+0x442>
 800ffc8:	4bcc      	ldr	r3, [pc, #816]	; (80102fc <__ieee754_pow+0x764>)
 800ffca:	429c      	cmp	r4, r3
 800ffcc:	f340 8162 	ble.w	8010294 <__ieee754_pow+0x6fc>
 800ffd0:	9b05      	ldr	r3, [sp, #20]
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	9305      	str	r3, [sp, #20]
 800ffd6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ffda:	2400      	movs	r4, #0
 800ffdc:	00e3      	lsls	r3, r4, #3
 800ffde:	9307      	str	r3, [sp, #28]
 800ffe0:	4bc7      	ldr	r3, [pc, #796]	; (8010300 <__ieee754_pow+0x768>)
 800ffe2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ffe6:	ed93 7b00 	vldr	d7, [r3]
 800ffea:	4629      	mov	r1, r5
 800ffec:	ec53 2b17 	vmov	r2, r3, d7
 800fff0:	eeb0 9a47 	vmov.f32	s18, s14
 800fff4:	eef0 9a67 	vmov.f32	s19, s15
 800fff8:	4682      	mov	sl, r0
 800fffa:	f7f0 f95d 	bl	80002b8 <__aeabi_dsub>
 800fffe:	4652      	mov	r2, sl
 8010000:	4606      	mov	r6, r0
 8010002:	460f      	mov	r7, r1
 8010004:	462b      	mov	r3, r5
 8010006:	ec51 0b19 	vmov	r0, r1, d9
 801000a:	f7f0 f957 	bl	80002bc <__adddf3>
 801000e:	4602      	mov	r2, r0
 8010010:	460b      	mov	r3, r1
 8010012:	2000      	movs	r0, #0
 8010014:	49bb      	ldr	r1, [pc, #748]	; (8010304 <__ieee754_pow+0x76c>)
 8010016:	f7f0 fc31 	bl	800087c <__aeabi_ddiv>
 801001a:	ec41 0b1a 	vmov	d10, r0, r1
 801001e:	4602      	mov	r2, r0
 8010020:	460b      	mov	r3, r1
 8010022:	4630      	mov	r0, r6
 8010024:	4639      	mov	r1, r7
 8010026:	f7f0 faff 	bl	8000628 <__aeabi_dmul>
 801002a:	2300      	movs	r3, #0
 801002c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010030:	9302      	str	r3, [sp, #8]
 8010032:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010036:	46ab      	mov	fp, r5
 8010038:	106d      	asrs	r5, r5, #1
 801003a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801003e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010042:	ec41 0b18 	vmov	d8, r0, r1
 8010046:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801004a:	2200      	movs	r2, #0
 801004c:	4640      	mov	r0, r8
 801004e:	4649      	mov	r1, r9
 8010050:	4614      	mov	r4, r2
 8010052:	461d      	mov	r5, r3
 8010054:	f7f0 fae8 	bl	8000628 <__aeabi_dmul>
 8010058:	4602      	mov	r2, r0
 801005a:	460b      	mov	r3, r1
 801005c:	4630      	mov	r0, r6
 801005e:	4639      	mov	r1, r7
 8010060:	f7f0 f92a 	bl	80002b8 <__aeabi_dsub>
 8010064:	ec53 2b19 	vmov	r2, r3, d9
 8010068:	4606      	mov	r6, r0
 801006a:	460f      	mov	r7, r1
 801006c:	4620      	mov	r0, r4
 801006e:	4629      	mov	r1, r5
 8010070:	f7f0 f922 	bl	80002b8 <__aeabi_dsub>
 8010074:	4602      	mov	r2, r0
 8010076:	460b      	mov	r3, r1
 8010078:	4650      	mov	r0, sl
 801007a:	4659      	mov	r1, fp
 801007c:	f7f0 f91c 	bl	80002b8 <__aeabi_dsub>
 8010080:	4642      	mov	r2, r8
 8010082:	464b      	mov	r3, r9
 8010084:	f7f0 fad0 	bl	8000628 <__aeabi_dmul>
 8010088:	4602      	mov	r2, r0
 801008a:	460b      	mov	r3, r1
 801008c:	4630      	mov	r0, r6
 801008e:	4639      	mov	r1, r7
 8010090:	f7f0 f912 	bl	80002b8 <__aeabi_dsub>
 8010094:	ec53 2b1a 	vmov	r2, r3, d10
 8010098:	f7f0 fac6 	bl	8000628 <__aeabi_dmul>
 801009c:	ec53 2b18 	vmov	r2, r3, d8
 80100a0:	ec41 0b19 	vmov	d9, r0, r1
 80100a4:	ec51 0b18 	vmov	r0, r1, d8
 80100a8:	f7f0 fabe 	bl	8000628 <__aeabi_dmul>
 80100ac:	a37c      	add	r3, pc, #496	; (adr r3, 80102a0 <__ieee754_pow+0x708>)
 80100ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b2:	4604      	mov	r4, r0
 80100b4:	460d      	mov	r5, r1
 80100b6:	f7f0 fab7 	bl	8000628 <__aeabi_dmul>
 80100ba:	a37b      	add	r3, pc, #492	; (adr r3, 80102a8 <__ieee754_pow+0x710>)
 80100bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c0:	f7f0 f8fc 	bl	80002bc <__adddf3>
 80100c4:	4622      	mov	r2, r4
 80100c6:	462b      	mov	r3, r5
 80100c8:	f7f0 faae 	bl	8000628 <__aeabi_dmul>
 80100cc:	a378      	add	r3, pc, #480	; (adr r3, 80102b0 <__ieee754_pow+0x718>)
 80100ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d2:	f7f0 f8f3 	bl	80002bc <__adddf3>
 80100d6:	4622      	mov	r2, r4
 80100d8:	462b      	mov	r3, r5
 80100da:	f7f0 faa5 	bl	8000628 <__aeabi_dmul>
 80100de:	a376      	add	r3, pc, #472	; (adr r3, 80102b8 <__ieee754_pow+0x720>)
 80100e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e4:	f7f0 f8ea 	bl	80002bc <__adddf3>
 80100e8:	4622      	mov	r2, r4
 80100ea:	462b      	mov	r3, r5
 80100ec:	f7f0 fa9c 	bl	8000628 <__aeabi_dmul>
 80100f0:	a373      	add	r3, pc, #460	; (adr r3, 80102c0 <__ieee754_pow+0x728>)
 80100f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f6:	f7f0 f8e1 	bl	80002bc <__adddf3>
 80100fa:	4622      	mov	r2, r4
 80100fc:	462b      	mov	r3, r5
 80100fe:	f7f0 fa93 	bl	8000628 <__aeabi_dmul>
 8010102:	a371      	add	r3, pc, #452	; (adr r3, 80102c8 <__ieee754_pow+0x730>)
 8010104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010108:	f7f0 f8d8 	bl	80002bc <__adddf3>
 801010c:	4622      	mov	r2, r4
 801010e:	4606      	mov	r6, r0
 8010110:	460f      	mov	r7, r1
 8010112:	462b      	mov	r3, r5
 8010114:	4620      	mov	r0, r4
 8010116:	4629      	mov	r1, r5
 8010118:	f7f0 fa86 	bl	8000628 <__aeabi_dmul>
 801011c:	4602      	mov	r2, r0
 801011e:	460b      	mov	r3, r1
 8010120:	4630      	mov	r0, r6
 8010122:	4639      	mov	r1, r7
 8010124:	f7f0 fa80 	bl	8000628 <__aeabi_dmul>
 8010128:	4642      	mov	r2, r8
 801012a:	4604      	mov	r4, r0
 801012c:	460d      	mov	r5, r1
 801012e:	464b      	mov	r3, r9
 8010130:	ec51 0b18 	vmov	r0, r1, d8
 8010134:	f7f0 f8c2 	bl	80002bc <__adddf3>
 8010138:	ec53 2b19 	vmov	r2, r3, d9
 801013c:	f7f0 fa74 	bl	8000628 <__aeabi_dmul>
 8010140:	4622      	mov	r2, r4
 8010142:	462b      	mov	r3, r5
 8010144:	f7f0 f8ba 	bl	80002bc <__adddf3>
 8010148:	4642      	mov	r2, r8
 801014a:	4682      	mov	sl, r0
 801014c:	468b      	mov	fp, r1
 801014e:	464b      	mov	r3, r9
 8010150:	4640      	mov	r0, r8
 8010152:	4649      	mov	r1, r9
 8010154:	f7f0 fa68 	bl	8000628 <__aeabi_dmul>
 8010158:	4b6b      	ldr	r3, [pc, #428]	; (8010308 <__ieee754_pow+0x770>)
 801015a:	2200      	movs	r2, #0
 801015c:	4606      	mov	r6, r0
 801015e:	460f      	mov	r7, r1
 8010160:	f7f0 f8ac 	bl	80002bc <__adddf3>
 8010164:	4652      	mov	r2, sl
 8010166:	465b      	mov	r3, fp
 8010168:	f7f0 f8a8 	bl	80002bc <__adddf3>
 801016c:	2000      	movs	r0, #0
 801016e:	4604      	mov	r4, r0
 8010170:	460d      	mov	r5, r1
 8010172:	4602      	mov	r2, r0
 8010174:	460b      	mov	r3, r1
 8010176:	4640      	mov	r0, r8
 8010178:	4649      	mov	r1, r9
 801017a:	f7f0 fa55 	bl	8000628 <__aeabi_dmul>
 801017e:	4b62      	ldr	r3, [pc, #392]	; (8010308 <__ieee754_pow+0x770>)
 8010180:	4680      	mov	r8, r0
 8010182:	4689      	mov	r9, r1
 8010184:	2200      	movs	r2, #0
 8010186:	4620      	mov	r0, r4
 8010188:	4629      	mov	r1, r5
 801018a:	f7f0 f895 	bl	80002b8 <__aeabi_dsub>
 801018e:	4632      	mov	r2, r6
 8010190:	463b      	mov	r3, r7
 8010192:	f7f0 f891 	bl	80002b8 <__aeabi_dsub>
 8010196:	4602      	mov	r2, r0
 8010198:	460b      	mov	r3, r1
 801019a:	4650      	mov	r0, sl
 801019c:	4659      	mov	r1, fp
 801019e:	f7f0 f88b 	bl	80002b8 <__aeabi_dsub>
 80101a2:	ec53 2b18 	vmov	r2, r3, d8
 80101a6:	f7f0 fa3f 	bl	8000628 <__aeabi_dmul>
 80101aa:	4622      	mov	r2, r4
 80101ac:	4606      	mov	r6, r0
 80101ae:	460f      	mov	r7, r1
 80101b0:	462b      	mov	r3, r5
 80101b2:	ec51 0b19 	vmov	r0, r1, d9
 80101b6:	f7f0 fa37 	bl	8000628 <__aeabi_dmul>
 80101ba:	4602      	mov	r2, r0
 80101bc:	460b      	mov	r3, r1
 80101be:	4630      	mov	r0, r6
 80101c0:	4639      	mov	r1, r7
 80101c2:	f7f0 f87b 	bl	80002bc <__adddf3>
 80101c6:	4606      	mov	r6, r0
 80101c8:	460f      	mov	r7, r1
 80101ca:	4602      	mov	r2, r0
 80101cc:	460b      	mov	r3, r1
 80101ce:	4640      	mov	r0, r8
 80101d0:	4649      	mov	r1, r9
 80101d2:	f7f0 f873 	bl	80002bc <__adddf3>
 80101d6:	a33e      	add	r3, pc, #248	; (adr r3, 80102d0 <__ieee754_pow+0x738>)
 80101d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101dc:	2000      	movs	r0, #0
 80101de:	4604      	mov	r4, r0
 80101e0:	460d      	mov	r5, r1
 80101e2:	f7f0 fa21 	bl	8000628 <__aeabi_dmul>
 80101e6:	4642      	mov	r2, r8
 80101e8:	ec41 0b18 	vmov	d8, r0, r1
 80101ec:	464b      	mov	r3, r9
 80101ee:	4620      	mov	r0, r4
 80101f0:	4629      	mov	r1, r5
 80101f2:	f7f0 f861 	bl	80002b8 <__aeabi_dsub>
 80101f6:	4602      	mov	r2, r0
 80101f8:	460b      	mov	r3, r1
 80101fa:	4630      	mov	r0, r6
 80101fc:	4639      	mov	r1, r7
 80101fe:	f7f0 f85b 	bl	80002b8 <__aeabi_dsub>
 8010202:	a335      	add	r3, pc, #212	; (adr r3, 80102d8 <__ieee754_pow+0x740>)
 8010204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010208:	f7f0 fa0e 	bl	8000628 <__aeabi_dmul>
 801020c:	a334      	add	r3, pc, #208	; (adr r3, 80102e0 <__ieee754_pow+0x748>)
 801020e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010212:	4606      	mov	r6, r0
 8010214:	460f      	mov	r7, r1
 8010216:	4620      	mov	r0, r4
 8010218:	4629      	mov	r1, r5
 801021a:	f7f0 fa05 	bl	8000628 <__aeabi_dmul>
 801021e:	4602      	mov	r2, r0
 8010220:	460b      	mov	r3, r1
 8010222:	4630      	mov	r0, r6
 8010224:	4639      	mov	r1, r7
 8010226:	f7f0 f849 	bl	80002bc <__adddf3>
 801022a:	9a07      	ldr	r2, [sp, #28]
 801022c:	4b37      	ldr	r3, [pc, #220]	; (801030c <__ieee754_pow+0x774>)
 801022e:	4413      	add	r3, r2
 8010230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010234:	f7f0 f842 	bl	80002bc <__adddf3>
 8010238:	4682      	mov	sl, r0
 801023a:	9805      	ldr	r0, [sp, #20]
 801023c:	468b      	mov	fp, r1
 801023e:	f7f0 f989 	bl	8000554 <__aeabi_i2d>
 8010242:	9a07      	ldr	r2, [sp, #28]
 8010244:	4b32      	ldr	r3, [pc, #200]	; (8010310 <__ieee754_pow+0x778>)
 8010246:	4413      	add	r3, r2
 8010248:	e9d3 8900 	ldrd	r8, r9, [r3]
 801024c:	4606      	mov	r6, r0
 801024e:	460f      	mov	r7, r1
 8010250:	4652      	mov	r2, sl
 8010252:	465b      	mov	r3, fp
 8010254:	ec51 0b18 	vmov	r0, r1, d8
 8010258:	f7f0 f830 	bl	80002bc <__adddf3>
 801025c:	4642      	mov	r2, r8
 801025e:	464b      	mov	r3, r9
 8010260:	f7f0 f82c 	bl	80002bc <__adddf3>
 8010264:	4632      	mov	r2, r6
 8010266:	463b      	mov	r3, r7
 8010268:	f7f0 f828 	bl	80002bc <__adddf3>
 801026c:	2000      	movs	r0, #0
 801026e:	4632      	mov	r2, r6
 8010270:	463b      	mov	r3, r7
 8010272:	4604      	mov	r4, r0
 8010274:	460d      	mov	r5, r1
 8010276:	f7f0 f81f 	bl	80002b8 <__aeabi_dsub>
 801027a:	4642      	mov	r2, r8
 801027c:	464b      	mov	r3, r9
 801027e:	f7f0 f81b 	bl	80002b8 <__aeabi_dsub>
 8010282:	ec53 2b18 	vmov	r2, r3, d8
 8010286:	f7f0 f817 	bl	80002b8 <__aeabi_dsub>
 801028a:	4602      	mov	r2, r0
 801028c:	460b      	mov	r3, r1
 801028e:	4650      	mov	r0, sl
 8010290:	4659      	mov	r1, fp
 8010292:	e610      	b.n	800feb6 <__ieee754_pow+0x31e>
 8010294:	2401      	movs	r4, #1
 8010296:	e6a1      	b.n	800ffdc <__ieee754_pow+0x444>
 8010298:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80102e8 <__ieee754_pow+0x750>
 801029c:	e617      	b.n	800fece <__ieee754_pow+0x336>
 801029e:	bf00      	nop
 80102a0:	4a454eef 	.word	0x4a454eef
 80102a4:	3fca7e28 	.word	0x3fca7e28
 80102a8:	93c9db65 	.word	0x93c9db65
 80102ac:	3fcd864a 	.word	0x3fcd864a
 80102b0:	a91d4101 	.word	0xa91d4101
 80102b4:	3fd17460 	.word	0x3fd17460
 80102b8:	518f264d 	.word	0x518f264d
 80102bc:	3fd55555 	.word	0x3fd55555
 80102c0:	db6fabff 	.word	0xdb6fabff
 80102c4:	3fdb6db6 	.word	0x3fdb6db6
 80102c8:	33333303 	.word	0x33333303
 80102cc:	3fe33333 	.word	0x3fe33333
 80102d0:	e0000000 	.word	0xe0000000
 80102d4:	3feec709 	.word	0x3feec709
 80102d8:	dc3a03fd 	.word	0xdc3a03fd
 80102dc:	3feec709 	.word	0x3feec709
 80102e0:	145b01f5 	.word	0x145b01f5
 80102e4:	be3e2fe0 	.word	0xbe3e2fe0
 80102e8:	00000000 	.word	0x00000000
 80102ec:	3ff00000 	.word	0x3ff00000
 80102f0:	7ff00000 	.word	0x7ff00000
 80102f4:	43400000 	.word	0x43400000
 80102f8:	0003988e 	.word	0x0003988e
 80102fc:	000bb679 	.word	0x000bb679
 8010300:	080121a8 	.word	0x080121a8
 8010304:	3ff00000 	.word	0x3ff00000
 8010308:	40080000 	.word	0x40080000
 801030c:	080121c8 	.word	0x080121c8
 8010310:	080121b8 	.word	0x080121b8
 8010314:	a3b5      	add	r3, pc, #724	; (adr r3, 80105ec <__ieee754_pow+0xa54>)
 8010316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801031a:	4640      	mov	r0, r8
 801031c:	4649      	mov	r1, r9
 801031e:	f7ef ffcd 	bl	80002bc <__adddf3>
 8010322:	4622      	mov	r2, r4
 8010324:	ec41 0b1a 	vmov	d10, r0, r1
 8010328:	462b      	mov	r3, r5
 801032a:	4630      	mov	r0, r6
 801032c:	4639      	mov	r1, r7
 801032e:	f7ef ffc3 	bl	80002b8 <__aeabi_dsub>
 8010332:	4602      	mov	r2, r0
 8010334:	460b      	mov	r3, r1
 8010336:	ec51 0b1a 	vmov	r0, r1, d10
 801033a:	f7f0 fc05 	bl	8000b48 <__aeabi_dcmpgt>
 801033e:	2800      	cmp	r0, #0
 8010340:	f47f ae04 	bne.w	800ff4c <__ieee754_pow+0x3b4>
 8010344:	4aa4      	ldr	r2, [pc, #656]	; (80105d8 <__ieee754_pow+0xa40>)
 8010346:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801034a:	4293      	cmp	r3, r2
 801034c:	f340 8108 	ble.w	8010560 <__ieee754_pow+0x9c8>
 8010350:	151b      	asrs	r3, r3, #20
 8010352:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010356:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801035a:	fa4a f303 	asr.w	r3, sl, r3
 801035e:	445b      	add	r3, fp
 8010360:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010364:	4e9d      	ldr	r6, [pc, #628]	; (80105dc <__ieee754_pow+0xa44>)
 8010366:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801036a:	4116      	asrs	r6, r2
 801036c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010370:	2000      	movs	r0, #0
 8010372:	ea23 0106 	bic.w	r1, r3, r6
 8010376:	f1c2 0214 	rsb	r2, r2, #20
 801037a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801037e:	fa4a fa02 	asr.w	sl, sl, r2
 8010382:	f1bb 0f00 	cmp.w	fp, #0
 8010386:	4602      	mov	r2, r0
 8010388:	460b      	mov	r3, r1
 801038a:	4620      	mov	r0, r4
 801038c:	4629      	mov	r1, r5
 801038e:	bfb8      	it	lt
 8010390:	f1ca 0a00 	rsblt	sl, sl, #0
 8010394:	f7ef ff90 	bl	80002b8 <__aeabi_dsub>
 8010398:	ec41 0b19 	vmov	d9, r0, r1
 801039c:	4642      	mov	r2, r8
 801039e:	464b      	mov	r3, r9
 80103a0:	ec51 0b19 	vmov	r0, r1, d9
 80103a4:	f7ef ff8a 	bl	80002bc <__adddf3>
 80103a8:	a37b      	add	r3, pc, #492	; (adr r3, 8010598 <__ieee754_pow+0xa00>)
 80103aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ae:	2000      	movs	r0, #0
 80103b0:	4604      	mov	r4, r0
 80103b2:	460d      	mov	r5, r1
 80103b4:	f7f0 f938 	bl	8000628 <__aeabi_dmul>
 80103b8:	ec53 2b19 	vmov	r2, r3, d9
 80103bc:	4606      	mov	r6, r0
 80103be:	460f      	mov	r7, r1
 80103c0:	4620      	mov	r0, r4
 80103c2:	4629      	mov	r1, r5
 80103c4:	f7ef ff78 	bl	80002b8 <__aeabi_dsub>
 80103c8:	4602      	mov	r2, r0
 80103ca:	460b      	mov	r3, r1
 80103cc:	4640      	mov	r0, r8
 80103ce:	4649      	mov	r1, r9
 80103d0:	f7ef ff72 	bl	80002b8 <__aeabi_dsub>
 80103d4:	a372      	add	r3, pc, #456	; (adr r3, 80105a0 <__ieee754_pow+0xa08>)
 80103d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103da:	f7f0 f925 	bl	8000628 <__aeabi_dmul>
 80103de:	a372      	add	r3, pc, #456	; (adr r3, 80105a8 <__ieee754_pow+0xa10>)
 80103e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e4:	4680      	mov	r8, r0
 80103e6:	4689      	mov	r9, r1
 80103e8:	4620      	mov	r0, r4
 80103ea:	4629      	mov	r1, r5
 80103ec:	f7f0 f91c 	bl	8000628 <__aeabi_dmul>
 80103f0:	4602      	mov	r2, r0
 80103f2:	460b      	mov	r3, r1
 80103f4:	4640      	mov	r0, r8
 80103f6:	4649      	mov	r1, r9
 80103f8:	f7ef ff60 	bl	80002bc <__adddf3>
 80103fc:	4604      	mov	r4, r0
 80103fe:	460d      	mov	r5, r1
 8010400:	4602      	mov	r2, r0
 8010402:	460b      	mov	r3, r1
 8010404:	4630      	mov	r0, r6
 8010406:	4639      	mov	r1, r7
 8010408:	f7ef ff58 	bl	80002bc <__adddf3>
 801040c:	4632      	mov	r2, r6
 801040e:	463b      	mov	r3, r7
 8010410:	4680      	mov	r8, r0
 8010412:	4689      	mov	r9, r1
 8010414:	f7ef ff50 	bl	80002b8 <__aeabi_dsub>
 8010418:	4602      	mov	r2, r0
 801041a:	460b      	mov	r3, r1
 801041c:	4620      	mov	r0, r4
 801041e:	4629      	mov	r1, r5
 8010420:	f7ef ff4a 	bl	80002b8 <__aeabi_dsub>
 8010424:	4642      	mov	r2, r8
 8010426:	4606      	mov	r6, r0
 8010428:	460f      	mov	r7, r1
 801042a:	464b      	mov	r3, r9
 801042c:	4640      	mov	r0, r8
 801042e:	4649      	mov	r1, r9
 8010430:	f7f0 f8fa 	bl	8000628 <__aeabi_dmul>
 8010434:	a35e      	add	r3, pc, #376	; (adr r3, 80105b0 <__ieee754_pow+0xa18>)
 8010436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801043a:	4604      	mov	r4, r0
 801043c:	460d      	mov	r5, r1
 801043e:	f7f0 f8f3 	bl	8000628 <__aeabi_dmul>
 8010442:	a35d      	add	r3, pc, #372	; (adr r3, 80105b8 <__ieee754_pow+0xa20>)
 8010444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010448:	f7ef ff36 	bl	80002b8 <__aeabi_dsub>
 801044c:	4622      	mov	r2, r4
 801044e:	462b      	mov	r3, r5
 8010450:	f7f0 f8ea 	bl	8000628 <__aeabi_dmul>
 8010454:	a35a      	add	r3, pc, #360	; (adr r3, 80105c0 <__ieee754_pow+0xa28>)
 8010456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801045a:	f7ef ff2f 	bl	80002bc <__adddf3>
 801045e:	4622      	mov	r2, r4
 8010460:	462b      	mov	r3, r5
 8010462:	f7f0 f8e1 	bl	8000628 <__aeabi_dmul>
 8010466:	a358      	add	r3, pc, #352	; (adr r3, 80105c8 <__ieee754_pow+0xa30>)
 8010468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801046c:	f7ef ff24 	bl	80002b8 <__aeabi_dsub>
 8010470:	4622      	mov	r2, r4
 8010472:	462b      	mov	r3, r5
 8010474:	f7f0 f8d8 	bl	8000628 <__aeabi_dmul>
 8010478:	a355      	add	r3, pc, #340	; (adr r3, 80105d0 <__ieee754_pow+0xa38>)
 801047a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801047e:	f7ef ff1d 	bl	80002bc <__adddf3>
 8010482:	4622      	mov	r2, r4
 8010484:	462b      	mov	r3, r5
 8010486:	f7f0 f8cf 	bl	8000628 <__aeabi_dmul>
 801048a:	4602      	mov	r2, r0
 801048c:	460b      	mov	r3, r1
 801048e:	4640      	mov	r0, r8
 8010490:	4649      	mov	r1, r9
 8010492:	f7ef ff11 	bl	80002b8 <__aeabi_dsub>
 8010496:	4604      	mov	r4, r0
 8010498:	460d      	mov	r5, r1
 801049a:	4602      	mov	r2, r0
 801049c:	460b      	mov	r3, r1
 801049e:	4640      	mov	r0, r8
 80104a0:	4649      	mov	r1, r9
 80104a2:	f7f0 f8c1 	bl	8000628 <__aeabi_dmul>
 80104a6:	2200      	movs	r2, #0
 80104a8:	ec41 0b19 	vmov	d9, r0, r1
 80104ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80104b0:	4620      	mov	r0, r4
 80104b2:	4629      	mov	r1, r5
 80104b4:	f7ef ff00 	bl	80002b8 <__aeabi_dsub>
 80104b8:	4602      	mov	r2, r0
 80104ba:	460b      	mov	r3, r1
 80104bc:	ec51 0b19 	vmov	r0, r1, d9
 80104c0:	f7f0 f9dc 	bl	800087c <__aeabi_ddiv>
 80104c4:	4632      	mov	r2, r6
 80104c6:	4604      	mov	r4, r0
 80104c8:	460d      	mov	r5, r1
 80104ca:	463b      	mov	r3, r7
 80104cc:	4640      	mov	r0, r8
 80104ce:	4649      	mov	r1, r9
 80104d0:	f7f0 f8aa 	bl	8000628 <__aeabi_dmul>
 80104d4:	4632      	mov	r2, r6
 80104d6:	463b      	mov	r3, r7
 80104d8:	f7ef fef0 	bl	80002bc <__adddf3>
 80104dc:	4602      	mov	r2, r0
 80104de:	460b      	mov	r3, r1
 80104e0:	4620      	mov	r0, r4
 80104e2:	4629      	mov	r1, r5
 80104e4:	f7ef fee8 	bl	80002b8 <__aeabi_dsub>
 80104e8:	4642      	mov	r2, r8
 80104ea:	464b      	mov	r3, r9
 80104ec:	f7ef fee4 	bl	80002b8 <__aeabi_dsub>
 80104f0:	460b      	mov	r3, r1
 80104f2:	4602      	mov	r2, r0
 80104f4:	493a      	ldr	r1, [pc, #232]	; (80105e0 <__ieee754_pow+0xa48>)
 80104f6:	2000      	movs	r0, #0
 80104f8:	f7ef fede 	bl	80002b8 <__aeabi_dsub>
 80104fc:	ec41 0b10 	vmov	d0, r0, r1
 8010500:	ee10 3a90 	vmov	r3, s1
 8010504:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010508:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801050c:	da2b      	bge.n	8010566 <__ieee754_pow+0x9ce>
 801050e:	4650      	mov	r0, sl
 8010510:	f001 fa6e 	bl	80119f0 <scalbn>
 8010514:	ec51 0b10 	vmov	r0, r1, d0
 8010518:	ec53 2b18 	vmov	r2, r3, d8
 801051c:	f7ff bbed 	b.w	800fcfa <__ieee754_pow+0x162>
 8010520:	4b30      	ldr	r3, [pc, #192]	; (80105e4 <__ieee754_pow+0xa4c>)
 8010522:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010526:	429e      	cmp	r6, r3
 8010528:	f77f af0c 	ble.w	8010344 <__ieee754_pow+0x7ac>
 801052c:	4b2e      	ldr	r3, [pc, #184]	; (80105e8 <__ieee754_pow+0xa50>)
 801052e:	440b      	add	r3, r1
 8010530:	4303      	orrs	r3, r0
 8010532:	d009      	beq.n	8010548 <__ieee754_pow+0x9b0>
 8010534:	ec51 0b18 	vmov	r0, r1, d8
 8010538:	2200      	movs	r2, #0
 801053a:	2300      	movs	r3, #0
 801053c:	f7f0 fae6 	bl	8000b0c <__aeabi_dcmplt>
 8010540:	3800      	subs	r0, #0
 8010542:	bf18      	it	ne
 8010544:	2001      	movne	r0, #1
 8010546:	e447      	b.n	800fdd8 <__ieee754_pow+0x240>
 8010548:	4622      	mov	r2, r4
 801054a:	462b      	mov	r3, r5
 801054c:	f7ef feb4 	bl	80002b8 <__aeabi_dsub>
 8010550:	4642      	mov	r2, r8
 8010552:	464b      	mov	r3, r9
 8010554:	f7f0 faee 	bl	8000b34 <__aeabi_dcmpge>
 8010558:	2800      	cmp	r0, #0
 801055a:	f43f aef3 	beq.w	8010344 <__ieee754_pow+0x7ac>
 801055e:	e7e9      	b.n	8010534 <__ieee754_pow+0x99c>
 8010560:	f04f 0a00 	mov.w	sl, #0
 8010564:	e71a      	b.n	801039c <__ieee754_pow+0x804>
 8010566:	ec51 0b10 	vmov	r0, r1, d0
 801056a:	4619      	mov	r1, r3
 801056c:	e7d4      	b.n	8010518 <__ieee754_pow+0x980>
 801056e:	491c      	ldr	r1, [pc, #112]	; (80105e0 <__ieee754_pow+0xa48>)
 8010570:	2000      	movs	r0, #0
 8010572:	f7ff bb30 	b.w	800fbd6 <__ieee754_pow+0x3e>
 8010576:	2000      	movs	r0, #0
 8010578:	2100      	movs	r1, #0
 801057a:	f7ff bb2c 	b.w	800fbd6 <__ieee754_pow+0x3e>
 801057e:	4630      	mov	r0, r6
 8010580:	4639      	mov	r1, r7
 8010582:	f7ff bb28 	b.w	800fbd6 <__ieee754_pow+0x3e>
 8010586:	9204      	str	r2, [sp, #16]
 8010588:	f7ff bb7a 	b.w	800fc80 <__ieee754_pow+0xe8>
 801058c:	2300      	movs	r3, #0
 801058e:	f7ff bb64 	b.w	800fc5a <__ieee754_pow+0xc2>
 8010592:	bf00      	nop
 8010594:	f3af 8000 	nop.w
 8010598:	00000000 	.word	0x00000000
 801059c:	3fe62e43 	.word	0x3fe62e43
 80105a0:	fefa39ef 	.word	0xfefa39ef
 80105a4:	3fe62e42 	.word	0x3fe62e42
 80105a8:	0ca86c39 	.word	0x0ca86c39
 80105ac:	be205c61 	.word	0xbe205c61
 80105b0:	72bea4d0 	.word	0x72bea4d0
 80105b4:	3e663769 	.word	0x3e663769
 80105b8:	c5d26bf1 	.word	0xc5d26bf1
 80105bc:	3ebbbd41 	.word	0x3ebbbd41
 80105c0:	af25de2c 	.word	0xaf25de2c
 80105c4:	3f11566a 	.word	0x3f11566a
 80105c8:	16bebd93 	.word	0x16bebd93
 80105cc:	3f66c16c 	.word	0x3f66c16c
 80105d0:	5555553e 	.word	0x5555553e
 80105d4:	3fc55555 	.word	0x3fc55555
 80105d8:	3fe00000 	.word	0x3fe00000
 80105dc:	000fffff 	.word	0x000fffff
 80105e0:	3ff00000 	.word	0x3ff00000
 80105e4:	4090cbff 	.word	0x4090cbff
 80105e8:	3f6f3400 	.word	0x3f6f3400
 80105ec:	652b82fe 	.word	0x652b82fe
 80105f0:	3c971547 	.word	0x3c971547
 80105f4:	00000000 	.word	0x00000000

080105f8 <__ieee754_rem_pio2>:
 80105f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105fc:	ed2d 8b02 	vpush	{d8}
 8010600:	ec55 4b10 	vmov	r4, r5, d0
 8010604:	4bca      	ldr	r3, [pc, #808]	; (8010930 <__ieee754_rem_pio2+0x338>)
 8010606:	b08b      	sub	sp, #44	; 0x2c
 8010608:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801060c:	4598      	cmp	r8, r3
 801060e:	4682      	mov	sl, r0
 8010610:	9502      	str	r5, [sp, #8]
 8010612:	dc08      	bgt.n	8010626 <__ieee754_rem_pio2+0x2e>
 8010614:	2200      	movs	r2, #0
 8010616:	2300      	movs	r3, #0
 8010618:	ed80 0b00 	vstr	d0, [r0]
 801061c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010620:	f04f 0b00 	mov.w	fp, #0
 8010624:	e028      	b.n	8010678 <__ieee754_rem_pio2+0x80>
 8010626:	4bc3      	ldr	r3, [pc, #780]	; (8010934 <__ieee754_rem_pio2+0x33c>)
 8010628:	4598      	cmp	r8, r3
 801062a:	dc78      	bgt.n	801071e <__ieee754_rem_pio2+0x126>
 801062c:	9b02      	ldr	r3, [sp, #8]
 801062e:	4ec2      	ldr	r6, [pc, #776]	; (8010938 <__ieee754_rem_pio2+0x340>)
 8010630:	2b00      	cmp	r3, #0
 8010632:	ee10 0a10 	vmov	r0, s0
 8010636:	a3b0      	add	r3, pc, #704	; (adr r3, 80108f8 <__ieee754_rem_pio2+0x300>)
 8010638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063c:	4629      	mov	r1, r5
 801063e:	dd39      	ble.n	80106b4 <__ieee754_rem_pio2+0xbc>
 8010640:	f7ef fe3a 	bl	80002b8 <__aeabi_dsub>
 8010644:	45b0      	cmp	r8, r6
 8010646:	4604      	mov	r4, r0
 8010648:	460d      	mov	r5, r1
 801064a:	d01b      	beq.n	8010684 <__ieee754_rem_pio2+0x8c>
 801064c:	a3ac      	add	r3, pc, #688	; (adr r3, 8010900 <__ieee754_rem_pio2+0x308>)
 801064e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010652:	f7ef fe31 	bl	80002b8 <__aeabi_dsub>
 8010656:	4602      	mov	r2, r0
 8010658:	460b      	mov	r3, r1
 801065a:	e9ca 2300 	strd	r2, r3, [sl]
 801065e:	4620      	mov	r0, r4
 8010660:	4629      	mov	r1, r5
 8010662:	f7ef fe29 	bl	80002b8 <__aeabi_dsub>
 8010666:	a3a6      	add	r3, pc, #664	; (adr r3, 8010900 <__ieee754_rem_pio2+0x308>)
 8010668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801066c:	f7ef fe24 	bl	80002b8 <__aeabi_dsub>
 8010670:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010674:	f04f 0b01 	mov.w	fp, #1
 8010678:	4658      	mov	r0, fp
 801067a:	b00b      	add	sp, #44	; 0x2c
 801067c:	ecbd 8b02 	vpop	{d8}
 8010680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010684:	a3a0      	add	r3, pc, #640	; (adr r3, 8010908 <__ieee754_rem_pio2+0x310>)
 8010686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801068a:	f7ef fe15 	bl	80002b8 <__aeabi_dsub>
 801068e:	a3a0      	add	r3, pc, #640	; (adr r3, 8010910 <__ieee754_rem_pio2+0x318>)
 8010690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010694:	4604      	mov	r4, r0
 8010696:	460d      	mov	r5, r1
 8010698:	f7ef fe0e 	bl	80002b8 <__aeabi_dsub>
 801069c:	4602      	mov	r2, r0
 801069e:	460b      	mov	r3, r1
 80106a0:	e9ca 2300 	strd	r2, r3, [sl]
 80106a4:	4620      	mov	r0, r4
 80106a6:	4629      	mov	r1, r5
 80106a8:	f7ef fe06 	bl	80002b8 <__aeabi_dsub>
 80106ac:	a398      	add	r3, pc, #608	; (adr r3, 8010910 <__ieee754_rem_pio2+0x318>)
 80106ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106b2:	e7db      	b.n	801066c <__ieee754_rem_pio2+0x74>
 80106b4:	f7ef fe02 	bl	80002bc <__adddf3>
 80106b8:	45b0      	cmp	r8, r6
 80106ba:	4604      	mov	r4, r0
 80106bc:	460d      	mov	r5, r1
 80106be:	d016      	beq.n	80106ee <__ieee754_rem_pio2+0xf6>
 80106c0:	a38f      	add	r3, pc, #572	; (adr r3, 8010900 <__ieee754_rem_pio2+0x308>)
 80106c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106c6:	f7ef fdf9 	bl	80002bc <__adddf3>
 80106ca:	4602      	mov	r2, r0
 80106cc:	460b      	mov	r3, r1
 80106ce:	e9ca 2300 	strd	r2, r3, [sl]
 80106d2:	4620      	mov	r0, r4
 80106d4:	4629      	mov	r1, r5
 80106d6:	f7ef fdef 	bl	80002b8 <__aeabi_dsub>
 80106da:	a389      	add	r3, pc, #548	; (adr r3, 8010900 <__ieee754_rem_pio2+0x308>)
 80106dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e0:	f7ef fdec 	bl	80002bc <__adddf3>
 80106e4:	f04f 3bff 	mov.w	fp, #4294967295
 80106e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80106ec:	e7c4      	b.n	8010678 <__ieee754_rem_pio2+0x80>
 80106ee:	a386      	add	r3, pc, #536	; (adr r3, 8010908 <__ieee754_rem_pio2+0x310>)
 80106f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f4:	f7ef fde2 	bl	80002bc <__adddf3>
 80106f8:	a385      	add	r3, pc, #532	; (adr r3, 8010910 <__ieee754_rem_pio2+0x318>)
 80106fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106fe:	4604      	mov	r4, r0
 8010700:	460d      	mov	r5, r1
 8010702:	f7ef fddb 	bl	80002bc <__adddf3>
 8010706:	4602      	mov	r2, r0
 8010708:	460b      	mov	r3, r1
 801070a:	e9ca 2300 	strd	r2, r3, [sl]
 801070e:	4620      	mov	r0, r4
 8010710:	4629      	mov	r1, r5
 8010712:	f7ef fdd1 	bl	80002b8 <__aeabi_dsub>
 8010716:	a37e      	add	r3, pc, #504	; (adr r3, 8010910 <__ieee754_rem_pio2+0x318>)
 8010718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801071c:	e7e0      	b.n	80106e0 <__ieee754_rem_pio2+0xe8>
 801071e:	4b87      	ldr	r3, [pc, #540]	; (801093c <__ieee754_rem_pio2+0x344>)
 8010720:	4598      	cmp	r8, r3
 8010722:	f300 80d9 	bgt.w	80108d8 <__ieee754_rem_pio2+0x2e0>
 8010726:	f001 f8cf 	bl	80118c8 <fabs>
 801072a:	ec55 4b10 	vmov	r4, r5, d0
 801072e:	ee10 0a10 	vmov	r0, s0
 8010732:	a379      	add	r3, pc, #484	; (adr r3, 8010918 <__ieee754_rem_pio2+0x320>)
 8010734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010738:	4629      	mov	r1, r5
 801073a:	f7ef ff75 	bl	8000628 <__aeabi_dmul>
 801073e:	4b80      	ldr	r3, [pc, #512]	; (8010940 <__ieee754_rem_pio2+0x348>)
 8010740:	2200      	movs	r2, #0
 8010742:	f7ef fdbb 	bl	80002bc <__adddf3>
 8010746:	f7f0 fa1f 	bl	8000b88 <__aeabi_d2iz>
 801074a:	4683      	mov	fp, r0
 801074c:	f7ef ff02 	bl	8000554 <__aeabi_i2d>
 8010750:	4602      	mov	r2, r0
 8010752:	460b      	mov	r3, r1
 8010754:	ec43 2b18 	vmov	d8, r2, r3
 8010758:	a367      	add	r3, pc, #412	; (adr r3, 80108f8 <__ieee754_rem_pio2+0x300>)
 801075a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801075e:	f7ef ff63 	bl	8000628 <__aeabi_dmul>
 8010762:	4602      	mov	r2, r0
 8010764:	460b      	mov	r3, r1
 8010766:	4620      	mov	r0, r4
 8010768:	4629      	mov	r1, r5
 801076a:	f7ef fda5 	bl	80002b8 <__aeabi_dsub>
 801076e:	a364      	add	r3, pc, #400	; (adr r3, 8010900 <__ieee754_rem_pio2+0x308>)
 8010770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010774:	4606      	mov	r6, r0
 8010776:	460f      	mov	r7, r1
 8010778:	ec51 0b18 	vmov	r0, r1, d8
 801077c:	f7ef ff54 	bl	8000628 <__aeabi_dmul>
 8010780:	f1bb 0f1f 	cmp.w	fp, #31
 8010784:	4604      	mov	r4, r0
 8010786:	460d      	mov	r5, r1
 8010788:	dc0d      	bgt.n	80107a6 <__ieee754_rem_pio2+0x1ae>
 801078a:	4b6e      	ldr	r3, [pc, #440]	; (8010944 <__ieee754_rem_pio2+0x34c>)
 801078c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010794:	4543      	cmp	r3, r8
 8010796:	d006      	beq.n	80107a6 <__ieee754_rem_pio2+0x1ae>
 8010798:	4622      	mov	r2, r4
 801079a:	462b      	mov	r3, r5
 801079c:	4630      	mov	r0, r6
 801079e:	4639      	mov	r1, r7
 80107a0:	f7ef fd8a 	bl	80002b8 <__aeabi_dsub>
 80107a4:	e00f      	b.n	80107c6 <__ieee754_rem_pio2+0x1ce>
 80107a6:	462b      	mov	r3, r5
 80107a8:	4622      	mov	r2, r4
 80107aa:	4630      	mov	r0, r6
 80107ac:	4639      	mov	r1, r7
 80107ae:	f7ef fd83 	bl	80002b8 <__aeabi_dsub>
 80107b2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80107b6:	9303      	str	r3, [sp, #12]
 80107b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80107bc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80107c0:	f1b8 0f10 	cmp.w	r8, #16
 80107c4:	dc02      	bgt.n	80107cc <__ieee754_rem_pio2+0x1d4>
 80107c6:	e9ca 0100 	strd	r0, r1, [sl]
 80107ca:	e039      	b.n	8010840 <__ieee754_rem_pio2+0x248>
 80107cc:	a34e      	add	r3, pc, #312	; (adr r3, 8010908 <__ieee754_rem_pio2+0x310>)
 80107ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d2:	ec51 0b18 	vmov	r0, r1, d8
 80107d6:	f7ef ff27 	bl	8000628 <__aeabi_dmul>
 80107da:	4604      	mov	r4, r0
 80107dc:	460d      	mov	r5, r1
 80107de:	4602      	mov	r2, r0
 80107e0:	460b      	mov	r3, r1
 80107e2:	4630      	mov	r0, r6
 80107e4:	4639      	mov	r1, r7
 80107e6:	f7ef fd67 	bl	80002b8 <__aeabi_dsub>
 80107ea:	4602      	mov	r2, r0
 80107ec:	460b      	mov	r3, r1
 80107ee:	4680      	mov	r8, r0
 80107f0:	4689      	mov	r9, r1
 80107f2:	4630      	mov	r0, r6
 80107f4:	4639      	mov	r1, r7
 80107f6:	f7ef fd5f 	bl	80002b8 <__aeabi_dsub>
 80107fa:	4622      	mov	r2, r4
 80107fc:	462b      	mov	r3, r5
 80107fe:	f7ef fd5b 	bl	80002b8 <__aeabi_dsub>
 8010802:	a343      	add	r3, pc, #268	; (adr r3, 8010910 <__ieee754_rem_pio2+0x318>)
 8010804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010808:	4604      	mov	r4, r0
 801080a:	460d      	mov	r5, r1
 801080c:	ec51 0b18 	vmov	r0, r1, d8
 8010810:	f7ef ff0a 	bl	8000628 <__aeabi_dmul>
 8010814:	4622      	mov	r2, r4
 8010816:	462b      	mov	r3, r5
 8010818:	f7ef fd4e 	bl	80002b8 <__aeabi_dsub>
 801081c:	4602      	mov	r2, r0
 801081e:	460b      	mov	r3, r1
 8010820:	4604      	mov	r4, r0
 8010822:	460d      	mov	r5, r1
 8010824:	4640      	mov	r0, r8
 8010826:	4649      	mov	r1, r9
 8010828:	f7ef fd46 	bl	80002b8 <__aeabi_dsub>
 801082c:	9a03      	ldr	r2, [sp, #12]
 801082e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010832:	1ad3      	subs	r3, r2, r3
 8010834:	2b31      	cmp	r3, #49	; 0x31
 8010836:	dc24      	bgt.n	8010882 <__ieee754_rem_pio2+0x28a>
 8010838:	e9ca 0100 	strd	r0, r1, [sl]
 801083c:	4646      	mov	r6, r8
 801083e:	464f      	mov	r7, r9
 8010840:	e9da 8900 	ldrd	r8, r9, [sl]
 8010844:	4630      	mov	r0, r6
 8010846:	4642      	mov	r2, r8
 8010848:	464b      	mov	r3, r9
 801084a:	4639      	mov	r1, r7
 801084c:	f7ef fd34 	bl	80002b8 <__aeabi_dsub>
 8010850:	462b      	mov	r3, r5
 8010852:	4622      	mov	r2, r4
 8010854:	f7ef fd30 	bl	80002b8 <__aeabi_dsub>
 8010858:	9b02      	ldr	r3, [sp, #8]
 801085a:	2b00      	cmp	r3, #0
 801085c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010860:	f6bf af0a 	bge.w	8010678 <__ieee754_rem_pio2+0x80>
 8010864:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010868:	f8ca 3004 	str.w	r3, [sl, #4]
 801086c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010870:	f8ca 8000 	str.w	r8, [sl]
 8010874:	f8ca 0008 	str.w	r0, [sl, #8]
 8010878:	f8ca 300c 	str.w	r3, [sl, #12]
 801087c:	f1cb 0b00 	rsb	fp, fp, #0
 8010880:	e6fa      	b.n	8010678 <__ieee754_rem_pio2+0x80>
 8010882:	a327      	add	r3, pc, #156	; (adr r3, 8010920 <__ieee754_rem_pio2+0x328>)
 8010884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010888:	ec51 0b18 	vmov	r0, r1, d8
 801088c:	f7ef fecc 	bl	8000628 <__aeabi_dmul>
 8010890:	4604      	mov	r4, r0
 8010892:	460d      	mov	r5, r1
 8010894:	4602      	mov	r2, r0
 8010896:	460b      	mov	r3, r1
 8010898:	4640      	mov	r0, r8
 801089a:	4649      	mov	r1, r9
 801089c:	f7ef fd0c 	bl	80002b8 <__aeabi_dsub>
 80108a0:	4602      	mov	r2, r0
 80108a2:	460b      	mov	r3, r1
 80108a4:	4606      	mov	r6, r0
 80108a6:	460f      	mov	r7, r1
 80108a8:	4640      	mov	r0, r8
 80108aa:	4649      	mov	r1, r9
 80108ac:	f7ef fd04 	bl	80002b8 <__aeabi_dsub>
 80108b0:	4622      	mov	r2, r4
 80108b2:	462b      	mov	r3, r5
 80108b4:	f7ef fd00 	bl	80002b8 <__aeabi_dsub>
 80108b8:	a31b      	add	r3, pc, #108	; (adr r3, 8010928 <__ieee754_rem_pio2+0x330>)
 80108ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108be:	4604      	mov	r4, r0
 80108c0:	460d      	mov	r5, r1
 80108c2:	ec51 0b18 	vmov	r0, r1, d8
 80108c6:	f7ef feaf 	bl	8000628 <__aeabi_dmul>
 80108ca:	4622      	mov	r2, r4
 80108cc:	462b      	mov	r3, r5
 80108ce:	f7ef fcf3 	bl	80002b8 <__aeabi_dsub>
 80108d2:	4604      	mov	r4, r0
 80108d4:	460d      	mov	r5, r1
 80108d6:	e75f      	b.n	8010798 <__ieee754_rem_pio2+0x1a0>
 80108d8:	4b1b      	ldr	r3, [pc, #108]	; (8010948 <__ieee754_rem_pio2+0x350>)
 80108da:	4598      	cmp	r8, r3
 80108dc:	dd36      	ble.n	801094c <__ieee754_rem_pio2+0x354>
 80108de:	ee10 2a10 	vmov	r2, s0
 80108e2:	462b      	mov	r3, r5
 80108e4:	4620      	mov	r0, r4
 80108e6:	4629      	mov	r1, r5
 80108e8:	f7ef fce6 	bl	80002b8 <__aeabi_dsub>
 80108ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80108f0:	e9ca 0100 	strd	r0, r1, [sl]
 80108f4:	e694      	b.n	8010620 <__ieee754_rem_pio2+0x28>
 80108f6:	bf00      	nop
 80108f8:	54400000 	.word	0x54400000
 80108fc:	3ff921fb 	.word	0x3ff921fb
 8010900:	1a626331 	.word	0x1a626331
 8010904:	3dd0b461 	.word	0x3dd0b461
 8010908:	1a600000 	.word	0x1a600000
 801090c:	3dd0b461 	.word	0x3dd0b461
 8010910:	2e037073 	.word	0x2e037073
 8010914:	3ba3198a 	.word	0x3ba3198a
 8010918:	6dc9c883 	.word	0x6dc9c883
 801091c:	3fe45f30 	.word	0x3fe45f30
 8010920:	2e000000 	.word	0x2e000000
 8010924:	3ba3198a 	.word	0x3ba3198a
 8010928:	252049c1 	.word	0x252049c1
 801092c:	397b839a 	.word	0x397b839a
 8010930:	3fe921fb 	.word	0x3fe921fb
 8010934:	4002d97b 	.word	0x4002d97b
 8010938:	3ff921fb 	.word	0x3ff921fb
 801093c:	413921fb 	.word	0x413921fb
 8010940:	3fe00000 	.word	0x3fe00000
 8010944:	080121d8 	.word	0x080121d8
 8010948:	7fefffff 	.word	0x7fefffff
 801094c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8010950:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8010954:	ee10 0a10 	vmov	r0, s0
 8010958:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801095c:	ee10 6a10 	vmov	r6, s0
 8010960:	460f      	mov	r7, r1
 8010962:	f7f0 f911 	bl	8000b88 <__aeabi_d2iz>
 8010966:	f7ef fdf5 	bl	8000554 <__aeabi_i2d>
 801096a:	4602      	mov	r2, r0
 801096c:	460b      	mov	r3, r1
 801096e:	4630      	mov	r0, r6
 8010970:	4639      	mov	r1, r7
 8010972:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010976:	f7ef fc9f 	bl	80002b8 <__aeabi_dsub>
 801097a:	4b23      	ldr	r3, [pc, #140]	; (8010a08 <__ieee754_rem_pio2+0x410>)
 801097c:	2200      	movs	r2, #0
 801097e:	f7ef fe53 	bl	8000628 <__aeabi_dmul>
 8010982:	460f      	mov	r7, r1
 8010984:	4606      	mov	r6, r0
 8010986:	f7f0 f8ff 	bl	8000b88 <__aeabi_d2iz>
 801098a:	f7ef fde3 	bl	8000554 <__aeabi_i2d>
 801098e:	4602      	mov	r2, r0
 8010990:	460b      	mov	r3, r1
 8010992:	4630      	mov	r0, r6
 8010994:	4639      	mov	r1, r7
 8010996:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801099a:	f7ef fc8d 	bl	80002b8 <__aeabi_dsub>
 801099e:	4b1a      	ldr	r3, [pc, #104]	; (8010a08 <__ieee754_rem_pio2+0x410>)
 80109a0:	2200      	movs	r2, #0
 80109a2:	f7ef fe41 	bl	8000628 <__aeabi_dmul>
 80109a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80109aa:	ad04      	add	r5, sp, #16
 80109ac:	f04f 0803 	mov.w	r8, #3
 80109b0:	46a9      	mov	r9, r5
 80109b2:	2600      	movs	r6, #0
 80109b4:	2700      	movs	r7, #0
 80109b6:	4632      	mov	r2, r6
 80109b8:	463b      	mov	r3, r7
 80109ba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80109be:	46c3      	mov	fp, r8
 80109c0:	3d08      	subs	r5, #8
 80109c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80109c6:	f7f0 f897 	bl	8000af8 <__aeabi_dcmpeq>
 80109ca:	2800      	cmp	r0, #0
 80109cc:	d1f3      	bne.n	80109b6 <__ieee754_rem_pio2+0x3be>
 80109ce:	4b0f      	ldr	r3, [pc, #60]	; (8010a0c <__ieee754_rem_pio2+0x414>)
 80109d0:	9301      	str	r3, [sp, #4]
 80109d2:	2302      	movs	r3, #2
 80109d4:	9300      	str	r3, [sp, #0]
 80109d6:	4622      	mov	r2, r4
 80109d8:	465b      	mov	r3, fp
 80109da:	4651      	mov	r1, sl
 80109dc:	4648      	mov	r0, r9
 80109de:	f000 f993 	bl	8010d08 <__kernel_rem_pio2>
 80109e2:	9b02      	ldr	r3, [sp, #8]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	4683      	mov	fp, r0
 80109e8:	f6bf ae46 	bge.w	8010678 <__ieee754_rem_pio2+0x80>
 80109ec:	e9da 2100 	ldrd	r2, r1, [sl]
 80109f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80109f4:	e9ca 2300 	strd	r2, r3, [sl]
 80109f8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80109fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010a00:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8010a04:	e73a      	b.n	801087c <__ieee754_rem_pio2+0x284>
 8010a06:	bf00      	nop
 8010a08:	41700000 	.word	0x41700000
 8010a0c:	08012258 	.word	0x08012258

08010a10 <__ieee754_sqrt>:
 8010a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a14:	ec55 4b10 	vmov	r4, r5, d0
 8010a18:	4e55      	ldr	r6, [pc, #340]	; (8010b70 <__ieee754_sqrt+0x160>)
 8010a1a:	43ae      	bics	r6, r5
 8010a1c:	ee10 0a10 	vmov	r0, s0
 8010a20:	ee10 3a10 	vmov	r3, s0
 8010a24:	462a      	mov	r2, r5
 8010a26:	4629      	mov	r1, r5
 8010a28:	d110      	bne.n	8010a4c <__ieee754_sqrt+0x3c>
 8010a2a:	ee10 2a10 	vmov	r2, s0
 8010a2e:	462b      	mov	r3, r5
 8010a30:	f7ef fdfa 	bl	8000628 <__aeabi_dmul>
 8010a34:	4602      	mov	r2, r0
 8010a36:	460b      	mov	r3, r1
 8010a38:	4620      	mov	r0, r4
 8010a3a:	4629      	mov	r1, r5
 8010a3c:	f7ef fc3e 	bl	80002bc <__adddf3>
 8010a40:	4604      	mov	r4, r0
 8010a42:	460d      	mov	r5, r1
 8010a44:	ec45 4b10 	vmov	d0, r4, r5
 8010a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a4c:	2d00      	cmp	r5, #0
 8010a4e:	dc10      	bgt.n	8010a72 <__ieee754_sqrt+0x62>
 8010a50:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010a54:	4330      	orrs	r0, r6
 8010a56:	d0f5      	beq.n	8010a44 <__ieee754_sqrt+0x34>
 8010a58:	b15d      	cbz	r5, 8010a72 <__ieee754_sqrt+0x62>
 8010a5a:	ee10 2a10 	vmov	r2, s0
 8010a5e:	462b      	mov	r3, r5
 8010a60:	ee10 0a10 	vmov	r0, s0
 8010a64:	f7ef fc28 	bl	80002b8 <__aeabi_dsub>
 8010a68:	4602      	mov	r2, r0
 8010a6a:	460b      	mov	r3, r1
 8010a6c:	f7ef ff06 	bl	800087c <__aeabi_ddiv>
 8010a70:	e7e6      	b.n	8010a40 <__ieee754_sqrt+0x30>
 8010a72:	1512      	asrs	r2, r2, #20
 8010a74:	d074      	beq.n	8010b60 <__ieee754_sqrt+0x150>
 8010a76:	07d4      	lsls	r4, r2, #31
 8010a78:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010a7c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8010a80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010a84:	bf5e      	ittt	pl
 8010a86:	0fda      	lsrpl	r2, r3, #31
 8010a88:	005b      	lslpl	r3, r3, #1
 8010a8a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8010a8e:	2400      	movs	r4, #0
 8010a90:	0fda      	lsrs	r2, r3, #31
 8010a92:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010a96:	107f      	asrs	r7, r7, #1
 8010a98:	005b      	lsls	r3, r3, #1
 8010a9a:	2516      	movs	r5, #22
 8010a9c:	4620      	mov	r0, r4
 8010a9e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010aa2:	1886      	adds	r6, r0, r2
 8010aa4:	428e      	cmp	r6, r1
 8010aa6:	bfde      	ittt	le
 8010aa8:	1b89      	suble	r1, r1, r6
 8010aaa:	18b0      	addle	r0, r6, r2
 8010aac:	18a4      	addle	r4, r4, r2
 8010aae:	0049      	lsls	r1, r1, #1
 8010ab0:	3d01      	subs	r5, #1
 8010ab2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8010ab6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010aba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010abe:	d1f0      	bne.n	8010aa2 <__ieee754_sqrt+0x92>
 8010ac0:	462a      	mov	r2, r5
 8010ac2:	f04f 0e20 	mov.w	lr, #32
 8010ac6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010aca:	4281      	cmp	r1, r0
 8010acc:	eb06 0c05 	add.w	ip, r6, r5
 8010ad0:	dc02      	bgt.n	8010ad8 <__ieee754_sqrt+0xc8>
 8010ad2:	d113      	bne.n	8010afc <__ieee754_sqrt+0xec>
 8010ad4:	459c      	cmp	ip, r3
 8010ad6:	d811      	bhi.n	8010afc <__ieee754_sqrt+0xec>
 8010ad8:	f1bc 0f00 	cmp.w	ip, #0
 8010adc:	eb0c 0506 	add.w	r5, ip, r6
 8010ae0:	da43      	bge.n	8010b6a <__ieee754_sqrt+0x15a>
 8010ae2:	2d00      	cmp	r5, #0
 8010ae4:	db41      	blt.n	8010b6a <__ieee754_sqrt+0x15a>
 8010ae6:	f100 0801 	add.w	r8, r0, #1
 8010aea:	1a09      	subs	r1, r1, r0
 8010aec:	459c      	cmp	ip, r3
 8010aee:	bf88      	it	hi
 8010af0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010af4:	eba3 030c 	sub.w	r3, r3, ip
 8010af8:	4432      	add	r2, r6
 8010afa:	4640      	mov	r0, r8
 8010afc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8010b00:	f1be 0e01 	subs.w	lr, lr, #1
 8010b04:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8010b08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010b0c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010b10:	d1db      	bne.n	8010aca <__ieee754_sqrt+0xba>
 8010b12:	430b      	orrs	r3, r1
 8010b14:	d006      	beq.n	8010b24 <__ieee754_sqrt+0x114>
 8010b16:	1c50      	adds	r0, r2, #1
 8010b18:	bf13      	iteet	ne
 8010b1a:	3201      	addne	r2, #1
 8010b1c:	3401      	addeq	r4, #1
 8010b1e:	4672      	moveq	r2, lr
 8010b20:	f022 0201 	bicne.w	r2, r2, #1
 8010b24:	1063      	asrs	r3, r4, #1
 8010b26:	0852      	lsrs	r2, r2, #1
 8010b28:	07e1      	lsls	r1, r4, #31
 8010b2a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010b2e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010b32:	bf48      	it	mi
 8010b34:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8010b38:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8010b3c:	4614      	mov	r4, r2
 8010b3e:	e781      	b.n	8010a44 <__ieee754_sqrt+0x34>
 8010b40:	0ad9      	lsrs	r1, r3, #11
 8010b42:	3815      	subs	r0, #21
 8010b44:	055b      	lsls	r3, r3, #21
 8010b46:	2900      	cmp	r1, #0
 8010b48:	d0fa      	beq.n	8010b40 <__ieee754_sqrt+0x130>
 8010b4a:	02cd      	lsls	r5, r1, #11
 8010b4c:	d50a      	bpl.n	8010b64 <__ieee754_sqrt+0x154>
 8010b4e:	f1c2 0420 	rsb	r4, r2, #32
 8010b52:	fa23 f404 	lsr.w	r4, r3, r4
 8010b56:	1e55      	subs	r5, r2, #1
 8010b58:	4093      	lsls	r3, r2
 8010b5a:	4321      	orrs	r1, r4
 8010b5c:	1b42      	subs	r2, r0, r5
 8010b5e:	e78a      	b.n	8010a76 <__ieee754_sqrt+0x66>
 8010b60:	4610      	mov	r0, r2
 8010b62:	e7f0      	b.n	8010b46 <__ieee754_sqrt+0x136>
 8010b64:	0049      	lsls	r1, r1, #1
 8010b66:	3201      	adds	r2, #1
 8010b68:	e7ef      	b.n	8010b4a <__ieee754_sqrt+0x13a>
 8010b6a:	4680      	mov	r8, r0
 8010b6c:	e7bd      	b.n	8010aea <__ieee754_sqrt+0xda>
 8010b6e:	bf00      	nop
 8010b70:	7ff00000 	.word	0x7ff00000
 8010b74:	00000000 	.word	0x00000000

08010b78 <__kernel_cos>:
 8010b78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b7c:	ec57 6b10 	vmov	r6, r7, d0
 8010b80:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8010b84:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010b88:	ed8d 1b00 	vstr	d1, [sp]
 8010b8c:	da07      	bge.n	8010b9e <__kernel_cos+0x26>
 8010b8e:	ee10 0a10 	vmov	r0, s0
 8010b92:	4639      	mov	r1, r7
 8010b94:	f7ef fff8 	bl	8000b88 <__aeabi_d2iz>
 8010b98:	2800      	cmp	r0, #0
 8010b9a:	f000 8088 	beq.w	8010cae <__kernel_cos+0x136>
 8010b9e:	4632      	mov	r2, r6
 8010ba0:	463b      	mov	r3, r7
 8010ba2:	4630      	mov	r0, r6
 8010ba4:	4639      	mov	r1, r7
 8010ba6:	f7ef fd3f 	bl	8000628 <__aeabi_dmul>
 8010baa:	4b51      	ldr	r3, [pc, #324]	; (8010cf0 <__kernel_cos+0x178>)
 8010bac:	2200      	movs	r2, #0
 8010bae:	4604      	mov	r4, r0
 8010bb0:	460d      	mov	r5, r1
 8010bb2:	f7ef fd39 	bl	8000628 <__aeabi_dmul>
 8010bb6:	a340      	add	r3, pc, #256	; (adr r3, 8010cb8 <__kernel_cos+0x140>)
 8010bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bbc:	4682      	mov	sl, r0
 8010bbe:	468b      	mov	fp, r1
 8010bc0:	4620      	mov	r0, r4
 8010bc2:	4629      	mov	r1, r5
 8010bc4:	f7ef fd30 	bl	8000628 <__aeabi_dmul>
 8010bc8:	a33d      	add	r3, pc, #244	; (adr r3, 8010cc0 <__kernel_cos+0x148>)
 8010bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bce:	f7ef fb75 	bl	80002bc <__adddf3>
 8010bd2:	4622      	mov	r2, r4
 8010bd4:	462b      	mov	r3, r5
 8010bd6:	f7ef fd27 	bl	8000628 <__aeabi_dmul>
 8010bda:	a33b      	add	r3, pc, #236	; (adr r3, 8010cc8 <__kernel_cos+0x150>)
 8010bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be0:	f7ef fb6a 	bl	80002b8 <__aeabi_dsub>
 8010be4:	4622      	mov	r2, r4
 8010be6:	462b      	mov	r3, r5
 8010be8:	f7ef fd1e 	bl	8000628 <__aeabi_dmul>
 8010bec:	a338      	add	r3, pc, #224	; (adr r3, 8010cd0 <__kernel_cos+0x158>)
 8010bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf2:	f7ef fb63 	bl	80002bc <__adddf3>
 8010bf6:	4622      	mov	r2, r4
 8010bf8:	462b      	mov	r3, r5
 8010bfa:	f7ef fd15 	bl	8000628 <__aeabi_dmul>
 8010bfe:	a336      	add	r3, pc, #216	; (adr r3, 8010cd8 <__kernel_cos+0x160>)
 8010c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c04:	f7ef fb58 	bl	80002b8 <__aeabi_dsub>
 8010c08:	4622      	mov	r2, r4
 8010c0a:	462b      	mov	r3, r5
 8010c0c:	f7ef fd0c 	bl	8000628 <__aeabi_dmul>
 8010c10:	a333      	add	r3, pc, #204	; (adr r3, 8010ce0 <__kernel_cos+0x168>)
 8010c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c16:	f7ef fb51 	bl	80002bc <__adddf3>
 8010c1a:	4622      	mov	r2, r4
 8010c1c:	462b      	mov	r3, r5
 8010c1e:	f7ef fd03 	bl	8000628 <__aeabi_dmul>
 8010c22:	4622      	mov	r2, r4
 8010c24:	462b      	mov	r3, r5
 8010c26:	f7ef fcff 	bl	8000628 <__aeabi_dmul>
 8010c2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c2e:	4604      	mov	r4, r0
 8010c30:	460d      	mov	r5, r1
 8010c32:	4630      	mov	r0, r6
 8010c34:	4639      	mov	r1, r7
 8010c36:	f7ef fcf7 	bl	8000628 <__aeabi_dmul>
 8010c3a:	460b      	mov	r3, r1
 8010c3c:	4602      	mov	r2, r0
 8010c3e:	4629      	mov	r1, r5
 8010c40:	4620      	mov	r0, r4
 8010c42:	f7ef fb39 	bl	80002b8 <__aeabi_dsub>
 8010c46:	4b2b      	ldr	r3, [pc, #172]	; (8010cf4 <__kernel_cos+0x17c>)
 8010c48:	4598      	cmp	r8, r3
 8010c4a:	4606      	mov	r6, r0
 8010c4c:	460f      	mov	r7, r1
 8010c4e:	dc10      	bgt.n	8010c72 <__kernel_cos+0xfa>
 8010c50:	4602      	mov	r2, r0
 8010c52:	460b      	mov	r3, r1
 8010c54:	4650      	mov	r0, sl
 8010c56:	4659      	mov	r1, fp
 8010c58:	f7ef fb2e 	bl	80002b8 <__aeabi_dsub>
 8010c5c:	460b      	mov	r3, r1
 8010c5e:	4926      	ldr	r1, [pc, #152]	; (8010cf8 <__kernel_cos+0x180>)
 8010c60:	4602      	mov	r2, r0
 8010c62:	2000      	movs	r0, #0
 8010c64:	f7ef fb28 	bl	80002b8 <__aeabi_dsub>
 8010c68:	ec41 0b10 	vmov	d0, r0, r1
 8010c6c:	b003      	add	sp, #12
 8010c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c72:	4b22      	ldr	r3, [pc, #136]	; (8010cfc <__kernel_cos+0x184>)
 8010c74:	4920      	ldr	r1, [pc, #128]	; (8010cf8 <__kernel_cos+0x180>)
 8010c76:	4598      	cmp	r8, r3
 8010c78:	bfcc      	ite	gt
 8010c7a:	4d21      	ldrgt	r5, [pc, #132]	; (8010d00 <__kernel_cos+0x188>)
 8010c7c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8010c80:	2400      	movs	r4, #0
 8010c82:	4622      	mov	r2, r4
 8010c84:	462b      	mov	r3, r5
 8010c86:	2000      	movs	r0, #0
 8010c88:	f7ef fb16 	bl	80002b8 <__aeabi_dsub>
 8010c8c:	4622      	mov	r2, r4
 8010c8e:	4680      	mov	r8, r0
 8010c90:	4689      	mov	r9, r1
 8010c92:	462b      	mov	r3, r5
 8010c94:	4650      	mov	r0, sl
 8010c96:	4659      	mov	r1, fp
 8010c98:	f7ef fb0e 	bl	80002b8 <__aeabi_dsub>
 8010c9c:	4632      	mov	r2, r6
 8010c9e:	463b      	mov	r3, r7
 8010ca0:	f7ef fb0a 	bl	80002b8 <__aeabi_dsub>
 8010ca4:	4602      	mov	r2, r0
 8010ca6:	460b      	mov	r3, r1
 8010ca8:	4640      	mov	r0, r8
 8010caa:	4649      	mov	r1, r9
 8010cac:	e7da      	b.n	8010c64 <__kernel_cos+0xec>
 8010cae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010ce8 <__kernel_cos+0x170>
 8010cb2:	e7db      	b.n	8010c6c <__kernel_cos+0xf4>
 8010cb4:	f3af 8000 	nop.w
 8010cb8:	be8838d4 	.word	0xbe8838d4
 8010cbc:	bda8fae9 	.word	0xbda8fae9
 8010cc0:	bdb4b1c4 	.word	0xbdb4b1c4
 8010cc4:	3e21ee9e 	.word	0x3e21ee9e
 8010cc8:	809c52ad 	.word	0x809c52ad
 8010ccc:	3e927e4f 	.word	0x3e927e4f
 8010cd0:	19cb1590 	.word	0x19cb1590
 8010cd4:	3efa01a0 	.word	0x3efa01a0
 8010cd8:	16c15177 	.word	0x16c15177
 8010cdc:	3f56c16c 	.word	0x3f56c16c
 8010ce0:	5555554c 	.word	0x5555554c
 8010ce4:	3fa55555 	.word	0x3fa55555
 8010ce8:	00000000 	.word	0x00000000
 8010cec:	3ff00000 	.word	0x3ff00000
 8010cf0:	3fe00000 	.word	0x3fe00000
 8010cf4:	3fd33332 	.word	0x3fd33332
 8010cf8:	3ff00000 	.word	0x3ff00000
 8010cfc:	3fe90000 	.word	0x3fe90000
 8010d00:	3fd20000 	.word	0x3fd20000
 8010d04:	00000000 	.word	0x00000000

08010d08 <__kernel_rem_pio2>:
 8010d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d0c:	ed2d 8b02 	vpush	{d8}
 8010d10:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8010d14:	f112 0f14 	cmn.w	r2, #20
 8010d18:	9308      	str	r3, [sp, #32]
 8010d1a:	9101      	str	r1, [sp, #4]
 8010d1c:	4bc4      	ldr	r3, [pc, #784]	; (8011030 <__kernel_rem_pio2+0x328>)
 8010d1e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8010d20:	900b      	str	r0, [sp, #44]	; 0x2c
 8010d22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010d26:	9302      	str	r3, [sp, #8]
 8010d28:	9b08      	ldr	r3, [sp, #32]
 8010d2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8010d2e:	bfa8      	it	ge
 8010d30:	1ed4      	subge	r4, r2, #3
 8010d32:	9306      	str	r3, [sp, #24]
 8010d34:	bfb2      	itee	lt
 8010d36:	2400      	movlt	r4, #0
 8010d38:	2318      	movge	r3, #24
 8010d3a:	fb94 f4f3 	sdivge	r4, r4, r3
 8010d3e:	f06f 0317 	mvn.w	r3, #23
 8010d42:	fb04 3303 	mla	r3, r4, r3, r3
 8010d46:	eb03 0a02 	add.w	sl, r3, r2
 8010d4a:	9b02      	ldr	r3, [sp, #8]
 8010d4c:	9a06      	ldr	r2, [sp, #24]
 8010d4e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8011020 <__kernel_rem_pio2+0x318>
 8010d52:	eb03 0802 	add.w	r8, r3, r2
 8010d56:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8010d58:	1aa7      	subs	r7, r4, r2
 8010d5a:	ae22      	add	r6, sp, #136	; 0x88
 8010d5c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010d60:	2500      	movs	r5, #0
 8010d62:	4545      	cmp	r5, r8
 8010d64:	dd13      	ble.n	8010d8e <__kernel_rem_pio2+0x86>
 8010d66:	9b08      	ldr	r3, [sp, #32]
 8010d68:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8011020 <__kernel_rem_pio2+0x318>
 8010d6c:	aa22      	add	r2, sp, #136	; 0x88
 8010d6e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010d72:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8010d76:	f04f 0800 	mov.w	r8, #0
 8010d7a:	9b02      	ldr	r3, [sp, #8]
 8010d7c:	4598      	cmp	r8, r3
 8010d7e:	dc2f      	bgt.n	8010de0 <__kernel_rem_pio2+0xd8>
 8010d80:	ed8d 8b04 	vstr	d8, [sp, #16]
 8010d84:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8010d88:	462f      	mov	r7, r5
 8010d8a:	2600      	movs	r6, #0
 8010d8c:	e01b      	b.n	8010dc6 <__kernel_rem_pio2+0xbe>
 8010d8e:	42ef      	cmn	r7, r5
 8010d90:	d407      	bmi.n	8010da2 <__kernel_rem_pio2+0x9a>
 8010d92:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010d96:	f7ef fbdd 	bl	8000554 <__aeabi_i2d>
 8010d9a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010d9e:	3501      	adds	r5, #1
 8010da0:	e7df      	b.n	8010d62 <__kernel_rem_pio2+0x5a>
 8010da2:	ec51 0b18 	vmov	r0, r1, d8
 8010da6:	e7f8      	b.n	8010d9a <__kernel_rem_pio2+0x92>
 8010da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010dac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010db0:	f7ef fc3a 	bl	8000628 <__aeabi_dmul>
 8010db4:	4602      	mov	r2, r0
 8010db6:	460b      	mov	r3, r1
 8010db8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010dbc:	f7ef fa7e 	bl	80002bc <__adddf3>
 8010dc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010dc4:	3601      	adds	r6, #1
 8010dc6:	9b06      	ldr	r3, [sp, #24]
 8010dc8:	429e      	cmp	r6, r3
 8010dca:	f1a7 0708 	sub.w	r7, r7, #8
 8010dce:	ddeb      	ble.n	8010da8 <__kernel_rem_pio2+0xa0>
 8010dd0:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010dd4:	f108 0801 	add.w	r8, r8, #1
 8010dd8:	ecab 7b02 	vstmia	fp!, {d7}
 8010ddc:	3508      	adds	r5, #8
 8010dde:	e7cc      	b.n	8010d7a <__kernel_rem_pio2+0x72>
 8010de0:	9b02      	ldr	r3, [sp, #8]
 8010de2:	aa0e      	add	r2, sp, #56	; 0x38
 8010de4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010de8:	930d      	str	r3, [sp, #52]	; 0x34
 8010dea:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8010dec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010df0:	9c02      	ldr	r4, [sp, #8]
 8010df2:	930c      	str	r3, [sp, #48]	; 0x30
 8010df4:	00e3      	lsls	r3, r4, #3
 8010df6:	930a      	str	r3, [sp, #40]	; 0x28
 8010df8:	ab9a      	add	r3, sp, #616	; 0x268
 8010dfa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010dfe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8010e02:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8010e06:	ab72      	add	r3, sp, #456	; 0x1c8
 8010e08:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8010e0c:	46c3      	mov	fp, r8
 8010e0e:	46a1      	mov	r9, r4
 8010e10:	f1b9 0f00 	cmp.w	r9, #0
 8010e14:	f1a5 0508 	sub.w	r5, r5, #8
 8010e18:	dc77      	bgt.n	8010f0a <__kernel_rem_pio2+0x202>
 8010e1a:	ec47 6b10 	vmov	d0, r6, r7
 8010e1e:	4650      	mov	r0, sl
 8010e20:	f000 fde6 	bl	80119f0 <scalbn>
 8010e24:	ec57 6b10 	vmov	r6, r7, d0
 8010e28:	2200      	movs	r2, #0
 8010e2a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010e2e:	ee10 0a10 	vmov	r0, s0
 8010e32:	4639      	mov	r1, r7
 8010e34:	f7ef fbf8 	bl	8000628 <__aeabi_dmul>
 8010e38:	ec41 0b10 	vmov	d0, r0, r1
 8010e3c:	f000 fd58 	bl	80118f0 <floor>
 8010e40:	4b7c      	ldr	r3, [pc, #496]	; (8011034 <__kernel_rem_pio2+0x32c>)
 8010e42:	ec51 0b10 	vmov	r0, r1, d0
 8010e46:	2200      	movs	r2, #0
 8010e48:	f7ef fbee 	bl	8000628 <__aeabi_dmul>
 8010e4c:	4602      	mov	r2, r0
 8010e4e:	460b      	mov	r3, r1
 8010e50:	4630      	mov	r0, r6
 8010e52:	4639      	mov	r1, r7
 8010e54:	f7ef fa30 	bl	80002b8 <__aeabi_dsub>
 8010e58:	460f      	mov	r7, r1
 8010e5a:	4606      	mov	r6, r0
 8010e5c:	f7ef fe94 	bl	8000b88 <__aeabi_d2iz>
 8010e60:	9004      	str	r0, [sp, #16]
 8010e62:	f7ef fb77 	bl	8000554 <__aeabi_i2d>
 8010e66:	4602      	mov	r2, r0
 8010e68:	460b      	mov	r3, r1
 8010e6a:	4630      	mov	r0, r6
 8010e6c:	4639      	mov	r1, r7
 8010e6e:	f7ef fa23 	bl	80002b8 <__aeabi_dsub>
 8010e72:	f1ba 0f00 	cmp.w	sl, #0
 8010e76:	4606      	mov	r6, r0
 8010e78:	460f      	mov	r7, r1
 8010e7a:	dd6d      	ble.n	8010f58 <__kernel_rem_pio2+0x250>
 8010e7c:	1e62      	subs	r2, r4, #1
 8010e7e:	ab0e      	add	r3, sp, #56	; 0x38
 8010e80:	9d04      	ldr	r5, [sp, #16]
 8010e82:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010e86:	f1ca 0118 	rsb	r1, sl, #24
 8010e8a:	fa40 f301 	asr.w	r3, r0, r1
 8010e8e:	441d      	add	r5, r3
 8010e90:	408b      	lsls	r3, r1
 8010e92:	1ac0      	subs	r0, r0, r3
 8010e94:	ab0e      	add	r3, sp, #56	; 0x38
 8010e96:	9504      	str	r5, [sp, #16]
 8010e98:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8010e9c:	f1ca 0317 	rsb	r3, sl, #23
 8010ea0:	fa40 fb03 	asr.w	fp, r0, r3
 8010ea4:	f1bb 0f00 	cmp.w	fp, #0
 8010ea8:	dd65      	ble.n	8010f76 <__kernel_rem_pio2+0x26e>
 8010eaa:	9b04      	ldr	r3, [sp, #16]
 8010eac:	2200      	movs	r2, #0
 8010eae:	3301      	adds	r3, #1
 8010eb0:	9304      	str	r3, [sp, #16]
 8010eb2:	4615      	mov	r5, r2
 8010eb4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010eb8:	4294      	cmp	r4, r2
 8010eba:	f300 809c 	bgt.w	8010ff6 <__kernel_rem_pio2+0x2ee>
 8010ebe:	f1ba 0f00 	cmp.w	sl, #0
 8010ec2:	dd07      	ble.n	8010ed4 <__kernel_rem_pio2+0x1cc>
 8010ec4:	f1ba 0f01 	cmp.w	sl, #1
 8010ec8:	f000 80c0 	beq.w	801104c <__kernel_rem_pio2+0x344>
 8010ecc:	f1ba 0f02 	cmp.w	sl, #2
 8010ed0:	f000 80c6 	beq.w	8011060 <__kernel_rem_pio2+0x358>
 8010ed4:	f1bb 0f02 	cmp.w	fp, #2
 8010ed8:	d14d      	bne.n	8010f76 <__kernel_rem_pio2+0x26e>
 8010eda:	4632      	mov	r2, r6
 8010edc:	463b      	mov	r3, r7
 8010ede:	4956      	ldr	r1, [pc, #344]	; (8011038 <__kernel_rem_pio2+0x330>)
 8010ee0:	2000      	movs	r0, #0
 8010ee2:	f7ef f9e9 	bl	80002b8 <__aeabi_dsub>
 8010ee6:	4606      	mov	r6, r0
 8010ee8:	460f      	mov	r7, r1
 8010eea:	2d00      	cmp	r5, #0
 8010eec:	d043      	beq.n	8010f76 <__kernel_rem_pio2+0x26e>
 8010eee:	4650      	mov	r0, sl
 8010ef0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8011028 <__kernel_rem_pio2+0x320>
 8010ef4:	f000 fd7c 	bl	80119f0 <scalbn>
 8010ef8:	4630      	mov	r0, r6
 8010efa:	4639      	mov	r1, r7
 8010efc:	ec53 2b10 	vmov	r2, r3, d0
 8010f00:	f7ef f9da 	bl	80002b8 <__aeabi_dsub>
 8010f04:	4606      	mov	r6, r0
 8010f06:	460f      	mov	r7, r1
 8010f08:	e035      	b.n	8010f76 <__kernel_rem_pio2+0x26e>
 8010f0a:	4b4c      	ldr	r3, [pc, #304]	; (801103c <__kernel_rem_pio2+0x334>)
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	4630      	mov	r0, r6
 8010f10:	4639      	mov	r1, r7
 8010f12:	f7ef fb89 	bl	8000628 <__aeabi_dmul>
 8010f16:	f7ef fe37 	bl	8000b88 <__aeabi_d2iz>
 8010f1a:	f7ef fb1b 	bl	8000554 <__aeabi_i2d>
 8010f1e:	4602      	mov	r2, r0
 8010f20:	460b      	mov	r3, r1
 8010f22:	ec43 2b18 	vmov	d8, r2, r3
 8010f26:	4b46      	ldr	r3, [pc, #280]	; (8011040 <__kernel_rem_pio2+0x338>)
 8010f28:	2200      	movs	r2, #0
 8010f2a:	f7ef fb7d 	bl	8000628 <__aeabi_dmul>
 8010f2e:	4602      	mov	r2, r0
 8010f30:	460b      	mov	r3, r1
 8010f32:	4630      	mov	r0, r6
 8010f34:	4639      	mov	r1, r7
 8010f36:	f7ef f9bf 	bl	80002b8 <__aeabi_dsub>
 8010f3a:	f7ef fe25 	bl	8000b88 <__aeabi_d2iz>
 8010f3e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010f42:	f84b 0b04 	str.w	r0, [fp], #4
 8010f46:	ec51 0b18 	vmov	r0, r1, d8
 8010f4a:	f7ef f9b7 	bl	80002bc <__adddf3>
 8010f4e:	f109 39ff 	add.w	r9, r9, #4294967295
 8010f52:	4606      	mov	r6, r0
 8010f54:	460f      	mov	r7, r1
 8010f56:	e75b      	b.n	8010e10 <__kernel_rem_pio2+0x108>
 8010f58:	d106      	bne.n	8010f68 <__kernel_rem_pio2+0x260>
 8010f5a:	1e63      	subs	r3, r4, #1
 8010f5c:	aa0e      	add	r2, sp, #56	; 0x38
 8010f5e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010f62:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8010f66:	e79d      	b.n	8010ea4 <__kernel_rem_pio2+0x19c>
 8010f68:	4b36      	ldr	r3, [pc, #216]	; (8011044 <__kernel_rem_pio2+0x33c>)
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	f7ef fde2 	bl	8000b34 <__aeabi_dcmpge>
 8010f70:	2800      	cmp	r0, #0
 8010f72:	d13d      	bne.n	8010ff0 <__kernel_rem_pio2+0x2e8>
 8010f74:	4683      	mov	fp, r0
 8010f76:	2200      	movs	r2, #0
 8010f78:	2300      	movs	r3, #0
 8010f7a:	4630      	mov	r0, r6
 8010f7c:	4639      	mov	r1, r7
 8010f7e:	f7ef fdbb 	bl	8000af8 <__aeabi_dcmpeq>
 8010f82:	2800      	cmp	r0, #0
 8010f84:	f000 80c0 	beq.w	8011108 <__kernel_rem_pio2+0x400>
 8010f88:	1e65      	subs	r5, r4, #1
 8010f8a:	462b      	mov	r3, r5
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	9902      	ldr	r1, [sp, #8]
 8010f90:	428b      	cmp	r3, r1
 8010f92:	da6c      	bge.n	801106e <__kernel_rem_pio2+0x366>
 8010f94:	2a00      	cmp	r2, #0
 8010f96:	f000 8089 	beq.w	80110ac <__kernel_rem_pio2+0x3a4>
 8010f9a:	ab0e      	add	r3, sp, #56	; 0x38
 8010f9c:	f1aa 0a18 	sub.w	sl, sl, #24
 8010fa0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	f000 80ad 	beq.w	8011104 <__kernel_rem_pio2+0x3fc>
 8010faa:	4650      	mov	r0, sl
 8010fac:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8011028 <__kernel_rem_pio2+0x320>
 8010fb0:	f000 fd1e 	bl	80119f0 <scalbn>
 8010fb4:	ab9a      	add	r3, sp, #616	; 0x268
 8010fb6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010fba:	ec57 6b10 	vmov	r6, r7, d0
 8010fbe:	00ec      	lsls	r4, r5, #3
 8010fc0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8010fc4:	46aa      	mov	sl, r5
 8010fc6:	f1ba 0f00 	cmp.w	sl, #0
 8010fca:	f280 80d6 	bge.w	801117a <__kernel_rem_pio2+0x472>
 8010fce:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8011020 <__kernel_rem_pio2+0x318>
 8010fd2:	462e      	mov	r6, r5
 8010fd4:	2e00      	cmp	r6, #0
 8010fd6:	f2c0 8104 	blt.w	80111e2 <__kernel_rem_pio2+0x4da>
 8010fda:	ab72      	add	r3, sp, #456	; 0x1c8
 8010fdc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8010fe0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8011048 <__kernel_rem_pio2+0x340>
 8010fe4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8010fe8:	f04f 0800 	mov.w	r8, #0
 8010fec:	1baf      	subs	r7, r5, r6
 8010fee:	e0ea      	b.n	80111c6 <__kernel_rem_pio2+0x4be>
 8010ff0:	f04f 0b02 	mov.w	fp, #2
 8010ff4:	e759      	b.n	8010eaa <__kernel_rem_pio2+0x1a2>
 8010ff6:	f8d8 3000 	ldr.w	r3, [r8]
 8010ffa:	b955      	cbnz	r5, 8011012 <__kernel_rem_pio2+0x30a>
 8010ffc:	b123      	cbz	r3, 8011008 <__kernel_rem_pio2+0x300>
 8010ffe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011002:	f8c8 3000 	str.w	r3, [r8]
 8011006:	2301      	movs	r3, #1
 8011008:	3201      	adds	r2, #1
 801100a:	f108 0804 	add.w	r8, r8, #4
 801100e:	461d      	mov	r5, r3
 8011010:	e752      	b.n	8010eb8 <__kernel_rem_pio2+0x1b0>
 8011012:	1acb      	subs	r3, r1, r3
 8011014:	f8c8 3000 	str.w	r3, [r8]
 8011018:	462b      	mov	r3, r5
 801101a:	e7f5      	b.n	8011008 <__kernel_rem_pio2+0x300>
 801101c:	f3af 8000 	nop.w
	...
 801102c:	3ff00000 	.word	0x3ff00000
 8011030:	080123a0 	.word	0x080123a0
 8011034:	40200000 	.word	0x40200000
 8011038:	3ff00000 	.word	0x3ff00000
 801103c:	3e700000 	.word	0x3e700000
 8011040:	41700000 	.word	0x41700000
 8011044:	3fe00000 	.word	0x3fe00000
 8011048:	08012360 	.word	0x08012360
 801104c:	1e62      	subs	r2, r4, #1
 801104e:	ab0e      	add	r3, sp, #56	; 0x38
 8011050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011054:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011058:	a90e      	add	r1, sp, #56	; 0x38
 801105a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801105e:	e739      	b.n	8010ed4 <__kernel_rem_pio2+0x1cc>
 8011060:	1e62      	subs	r2, r4, #1
 8011062:	ab0e      	add	r3, sp, #56	; 0x38
 8011064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011068:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801106c:	e7f4      	b.n	8011058 <__kernel_rem_pio2+0x350>
 801106e:	a90e      	add	r1, sp, #56	; 0x38
 8011070:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011074:	3b01      	subs	r3, #1
 8011076:	430a      	orrs	r2, r1
 8011078:	e789      	b.n	8010f8e <__kernel_rem_pio2+0x286>
 801107a:	3301      	adds	r3, #1
 801107c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011080:	2900      	cmp	r1, #0
 8011082:	d0fa      	beq.n	801107a <__kernel_rem_pio2+0x372>
 8011084:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011086:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801108a:	446a      	add	r2, sp
 801108c:	3a98      	subs	r2, #152	; 0x98
 801108e:	920a      	str	r2, [sp, #40]	; 0x28
 8011090:	9a08      	ldr	r2, [sp, #32]
 8011092:	18e3      	adds	r3, r4, r3
 8011094:	18a5      	adds	r5, r4, r2
 8011096:	aa22      	add	r2, sp, #136	; 0x88
 8011098:	f104 0801 	add.w	r8, r4, #1
 801109c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80110a0:	9304      	str	r3, [sp, #16]
 80110a2:	9b04      	ldr	r3, [sp, #16]
 80110a4:	4543      	cmp	r3, r8
 80110a6:	da04      	bge.n	80110b2 <__kernel_rem_pio2+0x3aa>
 80110a8:	461c      	mov	r4, r3
 80110aa:	e6a3      	b.n	8010df4 <__kernel_rem_pio2+0xec>
 80110ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80110ae:	2301      	movs	r3, #1
 80110b0:	e7e4      	b.n	801107c <__kernel_rem_pio2+0x374>
 80110b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80110b4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80110b8:	f7ef fa4c 	bl	8000554 <__aeabi_i2d>
 80110bc:	e8e5 0102 	strd	r0, r1, [r5], #8
 80110c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80110c2:	46ab      	mov	fp, r5
 80110c4:	461c      	mov	r4, r3
 80110c6:	f04f 0900 	mov.w	r9, #0
 80110ca:	2600      	movs	r6, #0
 80110cc:	2700      	movs	r7, #0
 80110ce:	9b06      	ldr	r3, [sp, #24]
 80110d0:	4599      	cmp	r9, r3
 80110d2:	dd06      	ble.n	80110e2 <__kernel_rem_pio2+0x3da>
 80110d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110d6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80110da:	f108 0801 	add.w	r8, r8, #1
 80110de:	930a      	str	r3, [sp, #40]	; 0x28
 80110e0:	e7df      	b.n	80110a2 <__kernel_rem_pio2+0x39a>
 80110e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80110e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80110ea:	f7ef fa9d 	bl	8000628 <__aeabi_dmul>
 80110ee:	4602      	mov	r2, r0
 80110f0:	460b      	mov	r3, r1
 80110f2:	4630      	mov	r0, r6
 80110f4:	4639      	mov	r1, r7
 80110f6:	f7ef f8e1 	bl	80002bc <__adddf3>
 80110fa:	f109 0901 	add.w	r9, r9, #1
 80110fe:	4606      	mov	r6, r0
 8011100:	460f      	mov	r7, r1
 8011102:	e7e4      	b.n	80110ce <__kernel_rem_pio2+0x3c6>
 8011104:	3d01      	subs	r5, #1
 8011106:	e748      	b.n	8010f9a <__kernel_rem_pio2+0x292>
 8011108:	ec47 6b10 	vmov	d0, r6, r7
 801110c:	f1ca 0000 	rsb	r0, sl, #0
 8011110:	f000 fc6e 	bl	80119f0 <scalbn>
 8011114:	ec57 6b10 	vmov	r6, r7, d0
 8011118:	4ba0      	ldr	r3, [pc, #640]	; (801139c <__kernel_rem_pio2+0x694>)
 801111a:	ee10 0a10 	vmov	r0, s0
 801111e:	2200      	movs	r2, #0
 8011120:	4639      	mov	r1, r7
 8011122:	f7ef fd07 	bl	8000b34 <__aeabi_dcmpge>
 8011126:	b1f8      	cbz	r0, 8011168 <__kernel_rem_pio2+0x460>
 8011128:	4b9d      	ldr	r3, [pc, #628]	; (80113a0 <__kernel_rem_pio2+0x698>)
 801112a:	2200      	movs	r2, #0
 801112c:	4630      	mov	r0, r6
 801112e:	4639      	mov	r1, r7
 8011130:	f7ef fa7a 	bl	8000628 <__aeabi_dmul>
 8011134:	f7ef fd28 	bl	8000b88 <__aeabi_d2iz>
 8011138:	4680      	mov	r8, r0
 801113a:	f7ef fa0b 	bl	8000554 <__aeabi_i2d>
 801113e:	4b97      	ldr	r3, [pc, #604]	; (801139c <__kernel_rem_pio2+0x694>)
 8011140:	2200      	movs	r2, #0
 8011142:	f7ef fa71 	bl	8000628 <__aeabi_dmul>
 8011146:	460b      	mov	r3, r1
 8011148:	4602      	mov	r2, r0
 801114a:	4639      	mov	r1, r7
 801114c:	4630      	mov	r0, r6
 801114e:	f7ef f8b3 	bl	80002b8 <__aeabi_dsub>
 8011152:	f7ef fd19 	bl	8000b88 <__aeabi_d2iz>
 8011156:	1c65      	adds	r5, r4, #1
 8011158:	ab0e      	add	r3, sp, #56	; 0x38
 801115a:	f10a 0a18 	add.w	sl, sl, #24
 801115e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011162:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011166:	e720      	b.n	8010faa <__kernel_rem_pio2+0x2a2>
 8011168:	4630      	mov	r0, r6
 801116a:	4639      	mov	r1, r7
 801116c:	f7ef fd0c 	bl	8000b88 <__aeabi_d2iz>
 8011170:	ab0e      	add	r3, sp, #56	; 0x38
 8011172:	4625      	mov	r5, r4
 8011174:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011178:	e717      	b.n	8010faa <__kernel_rem_pio2+0x2a2>
 801117a:	ab0e      	add	r3, sp, #56	; 0x38
 801117c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8011180:	f7ef f9e8 	bl	8000554 <__aeabi_i2d>
 8011184:	4632      	mov	r2, r6
 8011186:	463b      	mov	r3, r7
 8011188:	f7ef fa4e 	bl	8000628 <__aeabi_dmul>
 801118c:	4b84      	ldr	r3, [pc, #528]	; (80113a0 <__kernel_rem_pio2+0x698>)
 801118e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8011192:	2200      	movs	r2, #0
 8011194:	4630      	mov	r0, r6
 8011196:	4639      	mov	r1, r7
 8011198:	f7ef fa46 	bl	8000628 <__aeabi_dmul>
 801119c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80111a0:	4606      	mov	r6, r0
 80111a2:	460f      	mov	r7, r1
 80111a4:	e70f      	b.n	8010fc6 <__kernel_rem_pio2+0x2be>
 80111a6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80111aa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80111ae:	f7ef fa3b 	bl	8000628 <__aeabi_dmul>
 80111b2:	4602      	mov	r2, r0
 80111b4:	460b      	mov	r3, r1
 80111b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80111ba:	f7ef f87f 	bl	80002bc <__adddf3>
 80111be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80111c2:	f108 0801 	add.w	r8, r8, #1
 80111c6:	9b02      	ldr	r3, [sp, #8]
 80111c8:	4598      	cmp	r8, r3
 80111ca:	dc01      	bgt.n	80111d0 <__kernel_rem_pio2+0x4c8>
 80111cc:	45b8      	cmp	r8, r7
 80111ce:	ddea      	ble.n	80111a6 <__kernel_rem_pio2+0x49e>
 80111d0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80111d4:	ab4a      	add	r3, sp, #296	; 0x128
 80111d6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80111da:	ed87 7b00 	vstr	d7, [r7]
 80111de:	3e01      	subs	r6, #1
 80111e0:	e6f8      	b.n	8010fd4 <__kernel_rem_pio2+0x2cc>
 80111e2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80111e4:	2b02      	cmp	r3, #2
 80111e6:	dc0b      	bgt.n	8011200 <__kernel_rem_pio2+0x4f8>
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	dc35      	bgt.n	8011258 <__kernel_rem_pio2+0x550>
 80111ec:	d059      	beq.n	80112a2 <__kernel_rem_pio2+0x59a>
 80111ee:	9b04      	ldr	r3, [sp, #16]
 80111f0:	f003 0007 	and.w	r0, r3, #7
 80111f4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80111f8:	ecbd 8b02 	vpop	{d8}
 80111fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011200:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011202:	2b03      	cmp	r3, #3
 8011204:	d1f3      	bne.n	80111ee <__kernel_rem_pio2+0x4e6>
 8011206:	ab4a      	add	r3, sp, #296	; 0x128
 8011208:	4423      	add	r3, r4
 801120a:	9306      	str	r3, [sp, #24]
 801120c:	461c      	mov	r4, r3
 801120e:	469a      	mov	sl, r3
 8011210:	9502      	str	r5, [sp, #8]
 8011212:	9b02      	ldr	r3, [sp, #8]
 8011214:	2b00      	cmp	r3, #0
 8011216:	f1aa 0a08 	sub.w	sl, sl, #8
 801121a:	dc6b      	bgt.n	80112f4 <__kernel_rem_pio2+0x5ec>
 801121c:	46aa      	mov	sl, r5
 801121e:	f1ba 0f01 	cmp.w	sl, #1
 8011222:	f1a4 0408 	sub.w	r4, r4, #8
 8011226:	f300 8085 	bgt.w	8011334 <__kernel_rem_pio2+0x62c>
 801122a:	9c06      	ldr	r4, [sp, #24]
 801122c:	2000      	movs	r0, #0
 801122e:	3408      	adds	r4, #8
 8011230:	2100      	movs	r1, #0
 8011232:	2d01      	cmp	r5, #1
 8011234:	f300 809d 	bgt.w	8011372 <__kernel_rem_pio2+0x66a>
 8011238:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801123c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8011240:	f1bb 0f00 	cmp.w	fp, #0
 8011244:	f040 809b 	bne.w	801137e <__kernel_rem_pio2+0x676>
 8011248:	9b01      	ldr	r3, [sp, #4]
 801124a:	e9c3 5600 	strd	r5, r6, [r3]
 801124e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8011252:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011256:	e7ca      	b.n	80111ee <__kernel_rem_pio2+0x4e6>
 8011258:	3408      	adds	r4, #8
 801125a:	ab4a      	add	r3, sp, #296	; 0x128
 801125c:	441c      	add	r4, r3
 801125e:	462e      	mov	r6, r5
 8011260:	2000      	movs	r0, #0
 8011262:	2100      	movs	r1, #0
 8011264:	2e00      	cmp	r6, #0
 8011266:	da36      	bge.n	80112d6 <__kernel_rem_pio2+0x5ce>
 8011268:	f1bb 0f00 	cmp.w	fp, #0
 801126c:	d039      	beq.n	80112e2 <__kernel_rem_pio2+0x5da>
 801126e:	4602      	mov	r2, r0
 8011270:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011274:	9c01      	ldr	r4, [sp, #4]
 8011276:	e9c4 2300 	strd	r2, r3, [r4]
 801127a:	4602      	mov	r2, r0
 801127c:	460b      	mov	r3, r1
 801127e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8011282:	f7ef f819 	bl	80002b8 <__aeabi_dsub>
 8011286:	ae4c      	add	r6, sp, #304	; 0x130
 8011288:	2401      	movs	r4, #1
 801128a:	42a5      	cmp	r5, r4
 801128c:	da2c      	bge.n	80112e8 <__kernel_rem_pio2+0x5e0>
 801128e:	f1bb 0f00 	cmp.w	fp, #0
 8011292:	d002      	beq.n	801129a <__kernel_rem_pio2+0x592>
 8011294:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011298:	4619      	mov	r1, r3
 801129a:	9b01      	ldr	r3, [sp, #4]
 801129c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80112a0:	e7a5      	b.n	80111ee <__kernel_rem_pio2+0x4e6>
 80112a2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80112a6:	eb0d 0403 	add.w	r4, sp, r3
 80112aa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80112ae:	2000      	movs	r0, #0
 80112b0:	2100      	movs	r1, #0
 80112b2:	2d00      	cmp	r5, #0
 80112b4:	da09      	bge.n	80112ca <__kernel_rem_pio2+0x5c2>
 80112b6:	f1bb 0f00 	cmp.w	fp, #0
 80112ba:	d002      	beq.n	80112c2 <__kernel_rem_pio2+0x5ba>
 80112bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80112c0:	4619      	mov	r1, r3
 80112c2:	9b01      	ldr	r3, [sp, #4]
 80112c4:	e9c3 0100 	strd	r0, r1, [r3]
 80112c8:	e791      	b.n	80111ee <__kernel_rem_pio2+0x4e6>
 80112ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80112ce:	f7ee fff5 	bl	80002bc <__adddf3>
 80112d2:	3d01      	subs	r5, #1
 80112d4:	e7ed      	b.n	80112b2 <__kernel_rem_pio2+0x5aa>
 80112d6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80112da:	f7ee ffef 	bl	80002bc <__adddf3>
 80112de:	3e01      	subs	r6, #1
 80112e0:	e7c0      	b.n	8011264 <__kernel_rem_pio2+0x55c>
 80112e2:	4602      	mov	r2, r0
 80112e4:	460b      	mov	r3, r1
 80112e6:	e7c5      	b.n	8011274 <__kernel_rem_pio2+0x56c>
 80112e8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80112ec:	f7ee ffe6 	bl	80002bc <__adddf3>
 80112f0:	3401      	adds	r4, #1
 80112f2:	e7ca      	b.n	801128a <__kernel_rem_pio2+0x582>
 80112f4:	e9da 8900 	ldrd	r8, r9, [sl]
 80112f8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80112fc:	9b02      	ldr	r3, [sp, #8]
 80112fe:	3b01      	subs	r3, #1
 8011300:	9302      	str	r3, [sp, #8]
 8011302:	4632      	mov	r2, r6
 8011304:	463b      	mov	r3, r7
 8011306:	4640      	mov	r0, r8
 8011308:	4649      	mov	r1, r9
 801130a:	f7ee ffd7 	bl	80002bc <__adddf3>
 801130e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011312:	4602      	mov	r2, r0
 8011314:	460b      	mov	r3, r1
 8011316:	4640      	mov	r0, r8
 8011318:	4649      	mov	r1, r9
 801131a:	f7ee ffcd 	bl	80002b8 <__aeabi_dsub>
 801131e:	4632      	mov	r2, r6
 8011320:	463b      	mov	r3, r7
 8011322:	f7ee ffcb 	bl	80002bc <__adddf3>
 8011326:	ed9d 7b08 	vldr	d7, [sp, #32]
 801132a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801132e:	ed8a 7b00 	vstr	d7, [sl]
 8011332:	e76e      	b.n	8011212 <__kernel_rem_pio2+0x50a>
 8011334:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011338:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801133c:	4640      	mov	r0, r8
 801133e:	4632      	mov	r2, r6
 8011340:	463b      	mov	r3, r7
 8011342:	4649      	mov	r1, r9
 8011344:	f7ee ffba 	bl	80002bc <__adddf3>
 8011348:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801134c:	4602      	mov	r2, r0
 801134e:	460b      	mov	r3, r1
 8011350:	4640      	mov	r0, r8
 8011352:	4649      	mov	r1, r9
 8011354:	f7ee ffb0 	bl	80002b8 <__aeabi_dsub>
 8011358:	4632      	mov	r2, r6
 801135a:	463b      	mov	r3, r7
 801135c:	f7ee ffae 	bl	80002bc <__adddf3>
 8011360:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011364:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011368:	ed84 7b00 	vstr	d7, [r4]
 801136c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011370:	e755      	b.n	801121e <__kernel_rem_pio2+0x516>
 8011372:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011376:	f7ee ffa1 	bl	80002bc <__adddf3>
 801137a:	3d01      	subs	r5, #1
 801137c:	e759      	b.n	8011232 <__kernel_rem_pio2+0x52a>
 801137e:	9b01      	ldr	r3, [sp, #4]
 8011380:	9a01      	ldr	r2, [sp, #4]
 8011382:	601d      	str	r5, [r3, #0]
 8011384:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8011388:	605c      	str	r4, [r3, #4]
 801138a:	609f      	str	r7, [r3, #8]
 801138c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8011390:	60d3      	str	r3, [r2, #12]
 8011392:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011396:	6110      	str	r0, [r2, #16]
 8011398:	6153      	str	r3, [r2, #20]
 801139a:	e728      	b.n	80111ee <__kernel_rem_pio2+0x4e6>
 801139c:	41700000 	.word	0x41700000
 80113a0:	3e700000 	.word	0x3e700000
 80113a4:	00000000 	.word	0x00000000

080113a8 <__kernel_sin>:
 80113a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113ac:	ed2d 8b04 	vpush	{d8-d9}
 80113b0:	eeb0 8a41 	vmov.f32	s16, s2
 80113b4:	eef0 8a61 	vmov.f32	s17, s3
 80113b8:	ec55 4b10 	vmov	r4, r5, d0
 80113bc:	b083      	sub	sp, #12
 80113be:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80113c2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80113c6:	9001      	str	r0, [sp, #4]
 80113c8:	da06      	bge.n	80113d8 <__kernel_sin+0x30>
 80113ca:	ee10 0a10 	vmov	r0, s0
 80113ce:	4629      	mov	r1, r5
 80113d0:	f7ef fbda 	bl	8000b88 <__aeabi_d2iz>
 80113d4:	2800      	cmp	r0, #0
 80113d6:	d051      	beq.n	801147c <__kernel_sin+0xd4>
 80113d8:	4622      	mov	r2, r4
 80113da:	462b      	mov	r3, r5
 80113dc:	4620      	mov	r0, r4
 80113de:	4629      	mov	r1, r5
 80113e0:	f7ef f922 	bl	8000628 <__aeabi_dmul>
 80113e4:	4682      	mov	sl, r0
 80113e6:	468b      	mov	fp, r1
 80113e8:	4602      	mov	r2, r0
 80113ea:	460b      	mov	r3, r1
 80113ec:	4620      	mov	r0, r4
 80113ee:	4629      	mov	r1, r5
 80113f0:	f7ef f91a 	bl	8000628 <__aeabi_dmul>
 80113f4:	a341      	add	r3, pc, #260	; (adr r3, 80114fc <__kernel_sin+0x154>)
 80113f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113fa:	4680      	mov	r8, r0
 80113fc:	4689      	mov	r9, r1
 80113fe:	4650      	mov	r0, sl
 8011400:	4659      	mov	r1, fp
 8011402:	f7ef f911 	bl	8000628 <__aeabi_dmul>
 8011406:	a33f      	add	r3, pc, #252	; (adr r3, 8011504 <__kernel_sin+0x15c>)
 8011408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801140c:	f7ee ff54 	bl	80002b8 <__aeabi_dsub>
 8011410:	4652      	mov	r2, sl
 8011412:	465b      	mov	r3, fp
 8011414:	f7ef f908 	bl	8000628 <__aeabi_dmul>
 8011418:	a33c      	add	r3, pc, #240	; (adr r3, 801150c <__kernel_sin+0x164>)
 801141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801141e:	f7ee ff4d 	bl	80002bc <__adddf3>
 8011422:	4652      	mov	r2, sl
 8011424:	465b      	mov	r3, fp
 8011426:	f7ef f8ff 	bl	8000628 <__aeabi_dmul>
 801142a:	a33a      	add	r3, pc, #232	; (adr r3, 8011514 <__kernel_sin+0x16c>)
 801142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011430:	f7ee ff42 	bl	80002b8 <__aeabi_dsub>
 8011434:	4652      	mov	r2, sl
 8011436:	465b      	mov	r3, fp
 8011438:	f7ef f8f6 	bl	8000628 <__aeabi_dmul>
 801143c:	a337      	add	r3, pc, #220	; (adr r3, 801151c <__kernel_sin+0x174>)
 801143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011442:	f7ee ff3b 	bl	80002bc <__adddf3>
 8011446:	9b01      	ldr	r3, [sp, #4]
 8011448:	4606      	mov	r6, r0
 801144a:	460f      	mov	r7, r1
 801144c:	b9eb      	cbnz	r3, 801148a <__kernel_sin+0xe2>
 801144e:	4602      	mov	r2, r0
 8011450:	460b      	mov	r3, r1
 8011452:	4650      	mov	r0, sl
 8011454:	4659      	mov	r1, fp
 8011456:	f7ef f8e7 	bl	8000628 <__aeabi_dmul>
 801145a:	a325      	add	r3, pc, #148	; (adr r3, 80114f0 <__kernel_sin+0x148>)
 801145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011460:	f7ee ff2a 	bl	80002b8 <__aeabi_dsub>
 8011464:	4642      	mov	r2, r8
 8011466:	464b      	mov	r3, r9
 8011468:	f7ef f8de 	bl	8000628 <__aeabi_dmul>
 801146c:	4602      	mov	r2, r0
 801146e:	460b      	mov	r3, r1
 8011470:	4620      	mov	r0, r4
 8011472:	4629      	mov	r1, r5
 8011474:	f7ee ff22 	bl	80002bc <__adddf3>
 8011478:	4604      	mov	r4, r0
 801147a:	460d      	mov	r5, r1
 801147c:	ec45 4b10 	vmov	d0, r4, r5
 8011480:	b003      	add	sp, #12
 8011482:	ecbd 8b04 	vpop	{d8-d9}
 8011486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801148a:	4b1b      	ldr	r3, [pc, #108]	; (80114f8 <__kernel_sin+0x150>)
 801148c:	ec51 0b18 	vmov	r0, r1, d8
 8011490:	2200      	movs	r2, #0
 8011492:	f7ef f8c9 	bl	8000628 <__aeabi_dmul>
 8011496:	4632      	mov	r2, r6
 8011498:	ec41 0b19 	vmov	d9, r0, r1
 801149c:	463b      	mov	r3, r7
 801149e:	4640      	mov	r0, r8
 80114a0:	4649      	mov	r1, r9
 80114a2:	f7ef f8c1 	bl	8000628 <__aeabi_dmul>
 80114a6:	4602      	mov	r2, r0
 80114a8:	460b      	mov	r3, r1
 80114aa:	ec51 0b19 	vmov	r0, r1, d9
 80114ae:	f7ee ff03 	bl	80002b8 <__aeabi_dsub>
 80114b2:	4652      	mov	r2, sl
 80114b4:	465b      	mov	r3, fp
 80114b6:	f7ef f8b7 	bl	8000628 <__aeabi_dmul>
 80114ba:	ec53 2b18 	vmov	r2, r3, d8
 80114be:	f7ee fefb 	bl	80002b8 <__aeabi_dsub>
 80114c2:	a30b      	add	r3, pc, #44	; (adr r3, 80114f0 <__kernel_sin+0x148>)
 80114c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c8:	4606      	mov	r6, r0
 80114ca:	460f      	mov	r7, r1
 80114cc:	4640      	mov	r0, r8
 80114ce:	4649      	mov	r1, r9
 80114d0:	f7ef f8aa 	bl	8000628 <__aeabi_dmul>
 80114d4:	4602      	mov	r2, r0
 80114d6:	460b      	mov	r3, r1
 80114d8:	4630      	mov	r0, r6
 80114da:	4639      	mov	r1, r7
 80114dc:	f7ee feee 	bl	80002bc <__adddf3>
 80114e0:	4602      	mov	r2, r0
 80114e2:	460b      	mov	r3, r1
 80114e4:	4620      	mov	r0, r4
 80114e6:	4629      	mov	r1, r5
 80114e8:	f7ee fee6 	bl	80002b8 <__aeabi_dsub>
 80114ec:	e7c4      	b.n	8011478 <__kernel_sin+0xd0>
 80114ee:	bf00      	nop
 80114f0:	55555549 	.word	0x55555549
 80114f4:	3fc55555 	.word	0x3fc55555
 80114f8:	3fe00000 	.word	0x3fe00000
 80114fc:	5acfd57c 	.word	0x5acfd57c
 8011500:	3de5d93a 	.word	0x3de5d93a
 8011504:	8a2b9ceb 	.word	0x8a2b9ceb
 8011508:	3e5ae5e6 	.word	0x3e5ae5e6
 801150c:	57b1fe7d 	.word	0x57b1fe7d
 8011510:	3ec71de3 	.word	0x3ec71de3
 8011514:	19c161d5 	.word	0x19c161d5
 8011518:	3f2a01a0 	.word	0x3f2a01a0
 801151c:	1110f8a6 	.word	0x1110f8a6
 8011520:	3f811111 	.word	0x3f811111

08011524 <with_errno>:
 8011524:	b570      	push	{r4, r5, r6, lr}
 8011526:	4604      	mov	r4, r0
 8011528:	460d      	mov	r5, r1
 801152a:	4616      	mov	r6, r2
 801152c:	f7f8 fdae 	bl	800a08c <__errno>
 8011530:	4629      	mov	r1, r5
 8011532:	6006      	str	r6, [r0, #0]
 8011534:	4620      	mov	r0, r4
 8011536:	bd70      	pop	{r4, r5, r6, pc}

08011538 <xflow>:
 8011538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801153a:	4614      	mov	r4, r2
 801153c:	461d      	mov	r5, r3
 801153e:	b108      	cbz	r0, 8011544 <xflow+0xc>
 8011540:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011544:	e9cd 2300 	strd	r2, r3, [sp]
 8011548:	e9dd 2300 	ldrd	r2, r3, [sp]
 801154c:	4620      	mov	r0, r4
 801154e:	4629      	mov	r1, r5
 8011550:	f7ef f86a 	bl	8000628 <__aeabi_dmul>
 8011554:	2222      	movs	r2, #34	; 0x22
 8011556:	b003      	add	sp, #12
 8011558:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801155c:	f7ff bfe2 	b.w	8011524 <with_errno>

08011560 <__math_uflow>:
 8011560:	b508      	push	{r3, lr}
 8011562:	2200      	movs	r2, #0
 8011564:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011568:	f7ff ffe6 	bl	8011538 <xflow>
 801156c:	ec41 0b10 	vmov	d0, r0, r1
 8011570:	bd08      	pop	{r3, pc}

08011572 <__math_oflow>:
 8011572:	b508      	push	{r3, lr}
 8011574:	2200      	movs	r2, #0
 8011576:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801157a:	f7ff ffdd 	bl	8011538 <xflow>
 801157e:	ec41 0b10 	vmov	d0, r0, r1
 8011582:	bd08      	pop	{r3, pc}
 8011584:	0000      	movs	r0, r0
	...

08011588 <atan>:
 8011588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801158c:	ec55 4b10 	vmov	r4, r5, d0
 8011590:	4bc3      	ldr	r3, [pc, #780]	; (80118a0 <atan+0x318>)
 8011592:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011596:	429e      	cmp	r6, r3
 8011598:	46ab      	mov	fp, r5
 801159a:	dd18      	ble.n	80115ce <atan+0x46>
 801159c:	4bc1      	ldr	r3, [pc, #772]	; (80118a4 <atan+0x31c>)
 801159e:	429e      	cmp	r6, r3
 80115a0:	dc01      	bgt.n	80115a6 <atan+0x1e>
 80115a2:	d109      	bne.n	80115b8 <atan+0x30>
 80115a4:	b144      	cbz	r4, 80115b8 <atan+0x30>
 80115a6:	4622      	mov	r2, r4
 80115a8:	462b      	mov	r3, r5
 80115aa:	4620      	mov	r0, r4
 80115ac:	4629      	mov	r1, r5
 80115ae:	f7ee fe85 	bl	80002bc <__adddf3>
 80115b2:	4604      	mov	r4, r0
 80115b4:	460d      	mov	r5, r1
 80115b6:	e006      	b.n	80115c6 <atan+0x3e>
 80115b8:	f1bb 0f00 	cmp.w	fp, #0
 80115bc:	f300 8131 	bgt.w	8011822 <atan+0x29a>
 80115c0:	a59b      	add	r5, pc, #620	; (adr r5, 8011830 <atan+0x2a8>)
 80115c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80115c6:	ec45 4b10 	vmov	d0, r4, r5
 80115ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115ce:	4bb6      	ldr	r3, [pc, #728]	; (80118a8 <atan+0x320>)
 80115d0:	429e      	cmp	r6, r3
 80115d2:	dc14      	bgt.n	80115fe <atan+0x76>
 80115d4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80115d8:	429e      	cmp	r6, r3
 80115da:	dc0d      	bgt.n	80115f8 <atan+0x70>
 80115dc:	a396      	add	r3, pc, #600	; (adr r3, 8011838 <atan+0x2b0>)
 80115de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115e2:	ee10 0a10 	vmov	r0, s0
 80115e6:	4629      	mov	r1, r5
 80115e8:	f7ee fe68 	bl	80002bc <__adddf3>
 80115ec:	4baf      	ldr	r3, [pc, #700]	; (80118ac <atan+0x324>)
 80115ee:	2200      	movs	r2, #0
 80115f0:	f7ef faaa 	bl	8000b48 <__aeabi_dcmpgt>
 80115f4:	2800      	cmp	r0, #0
 80115f6:	d1e6      	bne.n	80115c6 <atan+0x3e>
 80115f8:	f04f 3aff 	mov.w	sl, #4294967295
 80115fc:	e02b      	b.n	8011656 <atan+0xce>
 80115fe:	f000 f963 	bl	80118c8 <fabs>
 8011602:	4bab      	ldr	r3, [pc, #684]	; (80118b0 <atan+0x328>)
 8011604:	429e      	cmp	r6, r3
 8011606:	ec55 4b10 	vmov	r4, r5, d0
 801160a:	f300 80bf 	bgt.w	801178c <atan+0x204>
 801160e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8011612:	429e      	cmp	r6, r3
 8011614:	f300 80a0 	bgt.w	8011758 <atan+0x1d0>
 8011618:	ee10 2a10 	vmov	r2, s0
 801161c:	ee10 0a10 	vmov	r0, s0
 8011620:	462b      	mov	r3, r5
 8011622:	4629      	mov	r1, r5
 8011624:	f7ee fe4a 	bl	80002bc <__adddf3>
 8011628:	4ba0      	ldr	r3, [pc, #640]	; (80118ac <atan+0x324>)
 801162a:	2200      	movs	r2, #0
 801162c:	f7ee fe44 	bl	80002b8 <__aeabi_dsub>
 8011630:	2200      	movs	r2, #0
 8011632:	4606      	mov	r6, r0
 8011634:	460f      	mov	r7, r1
 8011636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801163a:	4620      	mov	r0, r4
 801163c:	4629      	mov	r1, r5
 801163e:	f7ee fe3d 	bl	80002bc <__adddf3>
 8011642:	4602      	mov	r2, r0
 8011644:	460b      	mov	r3, r1
 8011646:	4630      	mov	r0, r6
 8011648:	4639      	mov	r1, r7
 801164a:	f7ef f917 	bl	800087c <__aeabi_ddiv>
 801164e:	f04f 0a00 	mov.w	sl, #0
 8011652:	4604      	mov	r4, r0
 8011654:	460d      	mov	r5, r1
 8011656:	4622      	mov	r2, r4
 8011658:	462b      	mov	r3, r5
 801165a:	4620      	mov	r0, r4
 801165c:	4629      	mov	r1, r5
 801165e:	f7ee ffe3 	bl	8000628 <__aeabi_dmul>
 8011662:	4602      	mov	r2, r0
 8011664:	460b      	mov	r3, r1
 8011666:	4680      	mov	r8, r0
 8011668:	4689      	mov	r9, r1
 801166a:	f7ee ffdd 	bl	8000628 <__aeabi_dmul>
 801166e:	a374      	add	r3, pc, #464	; (adr r3, 8011840 <atan+0x2b8>)
 8011670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011674:	4606      	mov	r6, r0
 8011676:	460f      	mov	r7, r1
 8011678:	f7ee ffd6 	bl	8000628 <__aeabi_dmul>
 801167c:	a372      	add	r3, pc, #456	; (adr r3, 8011848 <atan+0x2c0>)
 801167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011682:	f7ee fe1b 	bl	80002bc <__adddf3>
 8011686:	4632      	mov	r2, r6
 8011688:	463b      	mov	r3, r7
 801168a:	f7ee ffcd 	bl	8000628 <__aeabi_dmul>
 801168e:	a370      	add	r3, pc, #448	; (adr r3, 8011850 <atan+0x2c8>)
 8011690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011694:	f7ee fe12 	bl	80002bc <__adddf3>
 8011698:	4632      	mov	r2, r6
 801169a:	463b      	mov	r3, r7
 801169c:	f7ee ffc4 	bl	8000628 <__aeabi_dmul>
 80116a0:	a36d      	add	r3, pc, #436	; (adr r3, 8011858 <atan+0x2d0>)
 80116a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a6:	f7ee fe09 	bl	80002bc <__adddf3>
 80116aa:	4632      	mov	r2, r6
 80116ac:	463b      	mov	r3, r7
 80116ae:	f7ee ffbb 	bl	8000628 <__aeabi_dmul>
 80116b2:	a36b      	add	r3, pc, #428	; (adr r3, 8011860 <atan+0x2d8>)
 80116b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116b8:	f7ee fe00 	bl	80002bc <__adddf3>
 80116bc:	4632      	mov	r2, r6
 80116be:	463b      	mov	r3, r7
 80116c0:	f7ee ffb2 	bl	8000628 <__aeabi_dmul>
 80116c4:	a368      	add	r3, pc, #416	; (adr r3, 8011868 <atan+0x2e0>)
 80116c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ca:	f7ee fdf7 	bl	80002bc <__adddf3>
 80116ce:	4642      	mov	r2, r8
 80116d0:	464b      	mov	r3, r9
 80116d2:	f7ee ffa9 	bl	8000628 <__aeabi_dmul>
 80116d6:	a366      	add	r3, pc, #408	; (adr r3, 8011870 <atan+0x2e8>)
 80116d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116dc:	4680      	mov	r8, r0
 80116de:	4689      	mov	r9, r1
 80116e0:	4630      	mov	r0, r6
 80116e2:	4639      	mov	r1, r7
 80116e4:	f7ee ffa0 	bl	8000628 <__aeabi_dmul>
 80116e8:	a363      	add	r3, pc, #396	; (adr r3, 8011878 <atan+0x2f0>)
 80116ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ee:	f7ee fde3 	bl	80002b8 <__aeabi_dsub>
 80116f2:	4632      	mov	r2, r6
 80116f4:	463b      	mov	r3, r7
 80116f6:	f7ee ff97 	bl	8000628 <__aeabi_dmul>
 80116fa:	a361      	add	r3, pc, #388	; (adr r3, 8011880 <atan+0x2f8>)
 80116fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011700:	f7ee fdda 	bl	80002b8 <__aeabi_dsub>
 8011704:	4632      	mov	r2, r6
 8011706:	463b      	mov	r3, r7
 8011708:	f7ee ff8e 	bl	8000628 <__aeabi_dmul>
 801170c:	a35e      	add	r3, pc, #376	; (adr r3, 8011888 <atan+0x300>)
 801170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011712:	f7ee fdd1 	bl	80002b8 <__aeabi_dsub>
 8011716:	4632      	mov	r2, r6
 8011718:	463b      	mov	r3, r7
 801171a:	f7ee ff85 	bl	8000628 <__aeabi_dmul>
 801171e:	a35c      	add	r3, pc, #368	; (adr r3, 8011890 <atan+0x308>)
 8011720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011724:	f7ee fdc8 	bl	80002b8 <__aeabi_dsub>
 8011728:	4632      	mov	r2, r6
 801172a:	463b      	mov	r3, r7
 801172c:	f7ee ff7c 	bl	8000628 <__aeabi_dmul>
 8011730:	4602      	mov	r2, r0
 8011732:	460b      	mov	r3, r1
 8011734:	4640      	mov	r0, r8
 8011736:	4649      	mov	r1, r9
 8011738:	f7ee fdc0 	bl	80002bc <__adddf3>
 801173c:	4622      	mov	r2, r4
 801173e:	462b      	mov	r3, r5
 8011740:	f7ee ff72 	bl	8000628 <__aeabi_dmul>
 8011744:	f1ba 3fff 	cmp.w	sl, #4294967295
 8011748:	4602      	mov	r2, r0
 801174a:	460b      	mov	r3, r1
 801174c:	d14b      	bne.n	80117e6 <atan+0x25e>
 801174e:	4620      	mov	r0, r4
 8011750:	4629      	mov	r1, r5
 8011752:	f7ee fdb1 	bl	80002b8 <__aeabi_dsub>
 8011756:	e72c      	b.n	80115b2 <atan+0x2a>
 8011758:	ee10 0a10 	vmov	r0, s0
 801175c:	4b53      	ldr	r3, [pc, #332]	; (80118ac <atan+0x324>)
 801175e:	2200      	movs	r2, #0
 8011760:	4629      	mov	r1, r5
 8011762:	f7ee fda9 	bl	80002b8 <__aeabi_dsub>
 8011766:	4b51      	ldr	r3, [pc, #324]	; (80118ac <atan+0x324>)
 8011768:	4606      	mov	r6, r0
 801176a:	460f      	mov	r7, r1
 801176c:	2200      	movs	r2, #0
 801176e:	4620      	mov	r0, r4
 8011770:	4629      	mov	r1, r5
 8011772:	f7ee fda3 	bl	80002bc <__adddf3>
 8011776:	4602      	mov	r2, r0
 8011778:	460b      	mov	r3, r1
 801177a:	4630      	mov	r0, r6
 801177c:	4639      	mov	r1, r7
 801177e:	f7ef f87d 	bl	800087c <__aeabi_ddiv>
 8011782:	f04f 0a01 	mov.w	sl, #1
 8011786:	4604      	mov	r4, r0
 8011788:	460d      	mov	r5, r1
 801178a:	e764      	b.n	8011656 <atan+0xce>
 801178c:	4b49      	ldr	r3, [pc, #292]	; (80118b4 <atan+0x32c>)
 801178e:	429e      	cmp	r6, r3
 8011790:	da1d      	bge.n	80117ce <atan+0x246>
 8011792:	ee10 0a10 	vmov	r0, s0
 8011796:	4b48      	ldr	r3, [pc, #288]	; (80118b8 <atan+0x330>)
 8011798:	2200      	movs	r2, #0
 801179a:	4629      	mov	r1, r5
 801179c:	f7ee fd8c 	bl	80002b8 <__aeabi_dsub>
 80117a0:	4b45      	ldr	r3, [pc, #276]	; (80118b8 <atan+0x330>)
 80117a2:	4606      	mov	r6, r0
 80117a4:	460f      	mov	r7, r1
 80117a6:	2200      	movs	r2, #0
 80117a8:	4620      	mov	r0, r4
 80117aa:	4629      	mov	r1, r5
 80117ac:	f7ee ff3c 	bl	8000628 <__aeabi_dmul>
 80117b0:	4b3e      	ldr	r3, [pc, #248]	; (80118ac <atan+0x324>)
 80117b2:	2200      	movs	r2, #0
 80117b4:	f7ee fd82 	bl	80002bc <__adddf3>
 80117b8:	4602      	mov	r2, r0
 80117ba:	460b      	mov	r3, r1
 80117bc:	4630      	mov	r0, r6
 80117be:	4639      	mov	r1, r7
 80117c0:	f7ef f85c 	bl	800087c <__aeabi_ddiv>
 80117c4:	f04f 0a02 	mov.w	sl, #2
 80117c8:	4604      	mov	r4, r0
 80117ca:	460d      	mov	r5, r1
 80117cc:	e743      	b.n	8011656 <atan+0xce>
 80117ce:	462b      	mov	r3, r5
 80117d0:	ee10 2a10 	vmov	r2, s0
 80117d4:	4939      	ldr	r1, [pc, #228]	; (80118bc <atan+0x334>)
 80117d6:	2000      	movs	r0, #0
 80117d8:	f7ef f850 	bl	800087c <__aeabi_ddiv>
 80117dc:	f04f 0a03 	mov.w	sl, #3
 80117e0:	4604      	mov	r4, r0
 80117e2:	460d      	mov	r5, r1
 80117e4:	e737      	b.n	8011656 <atan+0xce>
 80117e6:	4b36      	ldr	r3, [pc, #216]	; (80118c0 <atan+0x338>)
 80117e8:	4e36      	ldr	r6, [pc, #216]	; (80118c4 <atan+0x33c>)
 80117ea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80117ee:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80117f2:	e9da 2300 	ldrd	r2, r3, [sl]
 80117f6:	f7ee fd5f 	bl	80002b8 <__aeabi_dsub>
 80117fa:	4622      	mov	r2, r4
 80117fc:	462b      	mov	r3, r5
 80117fe:	f7ee fd5b 	bl	80002b8 <__aeabi_dsub>
 8011802:	4602      	mov	r2, r0
 8011804:	460b      	mov	r3, r1
 8011806:	e9d6 0100 	ldrd	r0, r1, [r6]
 801180a:	f7ee fd55 	bl	80002b8 <__aeabi_dsub>
 801180e:	f1bb 0f00 	cmp.w	fp, #0
 8011812:	4604      	mov	r4, r0
 8011814:	460d      	mov	r5, r1
 8011816:	f6bf aed6 	bge.w	80115c6 <atan+0x3e>
 801181a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801181e:	461d      	mov	r5, r3
 8011820:	e6d1      	b.n	80115c6 <atan+0x3e>
 8011822:	a51d      	add	r5, pc, #116	; (adr r5, 8011898 <atan+0x310>)
 8011824:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011828:	e6cd      	b.n	80115c6 <atan+0x3e>
 801182a:	bf00      	nop
 801182c:	f3af 8000 	nop.w
 8011830:	54442d18 	.word	0x54442d18
 8011834:	bff921fb 	.word	0xbff921fb
 8011838:	8800759c 	.word	0x8800759c
 801183c:	7e37e43c 	.word	0x7e37e43c
 8011840:	e322da11 	.word	0xe322da11
 8011844:	3f90ad3a 	.word	0x3f90ad3a
 8011848:	24760deb 	.word	0x24760deb
 801184c:	3fa97b4b 	.word	0x3fa97b4b
 8011850:	a0d03d51 	.word	0xa0d03d51
 8011854:	3fb10d66 	.word	0x3fb10d66
 8011858:	c54c206e 	.word	0xc54c206e
 801185c:	3fb745cd 	.word	0x3fb745cd
 8011860:	920083ff 	.word	0x920083ff
 8011864:	3fc24924 	.word	0x3fc24924
 8011868:	5555550d 	.word	0x5555550d
 801186c:	3fd55555 	.word	0x3fd55555
 8011870:	2c6a6c2f 	.word	0x2c6a6c2f
 8011874:	bfa2b444 	.word	0xbfa2b444
 8011878:	52defd9a 	.word	0x52defd9a
 801187c:	3fadde2d 	.word	0x3fadde2d
 8011880:	af749a6d 	.word	0xaf749a6d
 8011884:	3fb3b0f2 	.word	0x3fb3b0f2
 8011888:	fe231671 	.word	0xfe231671
 801188c:	3fbc71c6 	.word	0x3fbc71c6
 8011890:	9998ebc4 	.word	0x9998ebc4
 8011894:	3fc99999 	.word	0x3fc99999
 8011898:	54442d18 	.word	0x54442d18
 801189c:	3ff921fb 	.word	0x3ff921fb
 80118a0:	440fffff 	.word	0x440fffff
 80118a4:	7ff00000 	.word	0x7ff00000
 80118a8:	3fdbffff 	.word	0x3fdbffff
 80118ac:	3ff00000 	.word	0x3ff00000
 80118b0:	3ff2ffff 	.word	0x3ff2ffff
 80118b4:	40038000 	.word	0x40038000
 80118b8:	3ff80000 	.word	0x3ff80000
 80118bc:	bff00000 	.word	0xbff00000
 80118c0:	080123d0 	.word	0x080123d0
 80118c4:	080123b0 	.word	0x080123b0

080118c8 <fabs>:
 80118c8:	ec51 0b10 	vmov	r0, r1, d0
 80118cc:	ee10 2a10 	vmov	r2, s0
 80118d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80118d4:	ec43 2b10 	vmov	d0, r2, r3
 80118d8:	4770      	bx	lr

080118da <finite>:
 80118da:	b082      	sub	sp, #8
 80118dc:	ed8d 0b00 	vstr	d0, [sp]
 80118e0:	9801      	ldr	r0, [sp, #4]
 80118e2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80118e6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80118ea:	0fc0      	lsrs	r0, r0, #31
 80118ec:	b002      	add	sp, #8
 80118ee:	4770      	bx	lr

080118f0 <floor>:
 80118f0:	ec51 0b10 	vmov	r0, r1, d0
 80118f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80118fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8011900:	2e13      	cmp	r6, #19
 8011902:	ee10 5a10 	vmov	r5, s0
 8011906:	ee10 8a10 	vmov	r8, s0
 801190a:	460c      	mov	r4, r1
 801190c:	dc32      	bgt.n	8011974 <floor+0x84>
 801190e:	2e00      	cmp	r6, #0
 8011910:	da14      	bge.n	801193c <floor+0x4c>
 8011912:	a333      	add	r3, pc, #204	; (adr r3, 80119e0 <floor+0xf0>)
 8011914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011918:	f7ee fcd0 	bl	80002bc <__adddf3>
 801191c:	2200      	movs	r2, #0
 801191e:	2300      	movs	r3, #0
 8011920:	f7ef f912 	bl	8000b48 <__aeabi_dcmpgt>
 8011924:	b138      	cbz	r0, 8011936 <floor+0x46>
 8011926:	2c00      	cmp	r4, #0
 8011928:	da57      	bge.n	80119da <floor+0xea>
 801192a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801192e:	431d      	orrs	r5, r3
 8011930:	d001      	beq.n	8011936 <floor+0x46>
 8011932:	4c2d      	ldr	r4, [pc, #180]	; (80119e8 <floor+0xf8>)
 8011934:	2500      	movs	r5, #0
 8011936:	4621      	mov	r1, r4
 8011938:	4628      	mov	r0, r5
 801193a:	e025      	b.n	8011988 <floor+0x98>
 801193c:	4f2b      	ldr	r7, [pc, #172]	; (80119ec <floor+0xfc>)
 801193e:	4137      	asrs	r7, r6
 8011940:	ea01 0307 	and.w	r3, r1, r7
 8011944:	4303      	orrs	r3, r0
 8011946:	d01f      	beq.n	8011988 <floor+0x98>
 8011948:	a325      	add	r3, pc, #148	; (adr r3, 80119e0 <floor+0xf0>)
 801194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801194e:	f7ee fcb5 	bl	80002bc <__adddf3>
 8011952:	2200      	movs	r2, #0
 8011954:	2300      	movs	r3, #0
 8011956:	f7ef f8f7 	bl	8000b48 <__aeabi_dcmpgt>
 801195a:	2800      	cmp	r0, #0
 801195c:	d0eb      	beq.n	8011936 <floor+0x46>
 801195e:	2c00      	cmp	r4, #0
 8011960:	bfbe      	ittt	lt
 8011962:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011966:	fa43 f606 	asrlt.w	r6, r3, r6
 801196a:	19a4      	addlt	r4, r4, r6
 801196c:	ea24 0407 	bic.w	r4, r4, r7
 8011970:	2500      	movs	r5, #0
 8011972:	e7e0      	b.n	8011936 <floor+0x46>
 8011974:	2e33      	cmp	r6, #51	; 0x33
 8011976:	dd0b      	ble.n	8011990 <floor+0xa0>
 8011978:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801197c:	d104      	bne.n	8011988 <floor+0x98>
 801197e:	ee10 2a10 	vmov	r2, s0
 8011982:	460b      	mov	r3, r1
 8011984:	f7ee fc9a 	bl	80002bc <__adddf3>
 8011988:	ec41 0b10 	vmov	d0, r0, r1
 801198c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011990:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8011994:	f04f 33ff 	mov.w	r3, #4294967295
 8011998:	fa23 f707 	lsr.w	r7, r3, r7
 801199c:	4207      	tst	r7, r0
 801199e:	d0f3      	beq.n	8011988 <floor+0x98>
 80119a0:	a30f      	add	r3, pc, #60	; (adr r3, 80119e0 <floor+0xf0>)
 80119a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119a6:	f7ee fc89 	bl	80002bc <__adddf3>
 80119aa:	2200      	movs	r2, #0
 80119ac:	2300      	movs	r3, #0
 80119ae:	f7ef f8cb 	bl	8000b48 <__aeabi_dcmpgt>
 80119b2:	2800      	cmp	r0, #0
 80119b4:	d0bf      	beq.n	8011936 <floor+0x46>
 80119b6:	2c00      	cmp	r4, #0
 80119b8:	da02      	bge.n	80119c0 <floor+0xd0>
 80119ba:	2e14      	cmp	r6, #20
 80119bc:	d103      	bne.n	80119c6 <floor+0xd6>
 80119be:	3401      	adds	r4, #1
 80119c0:	ea25 0507 	bic.w	r5, r5, r7
 80119c4:	e7b7      	b.n	8011936 <floor+0x46>
 80119c6:	2301      	movs	r3, #1
 80119c8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80119cc:	fa03 f606 	lsl.w	r6, r3, r6
 80119d0:	4435      	add	r5, r6
 80119d2:	4545      	cmp	r5, r8
 80119d4:	bf38      	it	cc
 80119d6:	18e4      	addcc	r4, r4, r3
 80119d8:	e7f2      	b.n	80119c0 <floor+0xd0>
 80119da:	2500      	movs	r5, #0
 80119dc:	462c      	mov	r4, r5
 80119de:	e7aa      	b.n	8011936 <floor+0x46>
 80119e0:	8800759c 	.word	0x8800759c
 80119e4:	7e37e43c 	.word	0x7e37e43c
 80119e8:	bff00000 	.word	0xbff00000
 80119ec:	000fffff 	.word	0x000fffff

080119f0 <scalbn>:
 80119f0:	b570      	push	{r4, r5, r6, lr}
 80119f2:	ec55 4b10 	vmov	r4, r5, d0
 80119f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80119fa:	4606      	mov	r6, r0
 80119fc:	462b      	mov	r3, r5
 80119fe:	b99a      	cbnz	r2, 8011a28 <scalbn+0x38>
 8011a00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011a04:	4323      	orrs	r3, r4
 8011a06:	d036      	beq.n	8011a76 <scalbn+0x86>
 8011a08:	4b39      	ldr	r3, [pc, #228]	; (8011af0 <scalbn+0x100>)
 8011a0a:	4629      	mov	r1, r5
 8011a0c:	ee10 0a10 	vmov	r0, s0
 8011a10:	2200      	movs	r2, #0
 8011a12:	f7ee fe09 	bl	8000628 <__aeabi_dmul>
 8011a16:	4b37      	ldr	r3, [pc, #220]	; (8011af4 <scalbn+0x104>)
 8011a18:	429e      	cmp	r6, r3
 8011a1a:	4604      	mov	r4, r0
 8011a1c:	460d      	mov	r5, r1
 8011a1e:	da10      	bge.n	8011a42 <scalbn+0x52>
 8011a20:	a32b      	add	r3, pc, #172	; (adr r3, 8011ad0 <scalbn+0xe0>)
 8011a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a26:	e03a      	b.n	8011a9e <scalbn+0xae>
 8011a28:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011a2c:	428a      	cmp	r2, r1
 8011a2e:	d10c      	bne.n	8011a4a <scalbn+0x5a>
 8011a30:	ee10 2a10 	vmov	r2, s0
 8011a34:	4620      	mov	r0, r4
 8011a36:	4629      	mov	r1, r5
 8011a38:	f7ee fc40 	bl	80002bc <__adddf3>
 8011a3c:	4604      	mov	r4, r0
 8011a3e:	460d      	mov	r5, r1
 8011a40:	e019      	b.n	8011a76 <scalbn+0x86>
 8011a42:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011a46:	460b      	mov	r3, r1
 8011a48:	3a36      	subs	r2, #54	; 0x36
 8011a4a:	4432      	add	r2, r6
 8011a4c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011a50:	428a      	cmp	r2, r1
 8011a52:	dd08      	ble.n	8011a66 <scalbn+0x76>
 8011a54:	2d00      	cmp	r5, #0
 8011a56:	a120      	add	r1, pc, #128	; (adr r1, 8011ad8 <scalbn+0xe8>)
 8011a58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a5c:	da1c      	bge.n	8011a98 <scalbn+0xa8>
 8011a5e:	a120      	add	r1, pc, #128	; (adr r1, 8011ae0 <scalbn+0xf0>)
 8011a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a64:	e018      	b.n	8011a98 <scalbn+0xa8>
 8011a66:	2a00      	cmp	r2, #0
 8011a68:	dd08      	ble.n	8011a7c <scalbn+0x8c>
 8011a6a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011a6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011a72:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011a76:	ec45 4b10 	vmov	d0, r4, r5
 8011a7a:	bd70      	pop	{r4, r5, r6, pc}
 8011a7c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011a80:	da19      	bge.n	8011ab6 <scalbn+0xc6>
 8011a82:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011a86:	429e      	cmp	r6, r3
 8011a88:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8011a8c:	dd0a      	ble.n	8011aa4 <scalbn+0xb4>
 8011a8e:	a112      	add	r1, pc, #72	; (adr r1, 8011ad8 <scalbn+0xe8>)
 8011a90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d1e2      	bne.n	8011a5e <scalbn+0x6e>
 8011a98:	a30f      	add	r3, pc, #60	; (adr r3, 8011ad8 <scalbn+0xe8>)
 8011a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a9e:	f7ee fdc3 	bl	8000628 <__aeabi_dmul>
 8011aa2:	e7cb      	b.n	8011a3c <scalbn+0x4c>
 8011aa4:	a10a      	add	r1, pc, #40	; (adr r1, 8011ad0 <scalbn+0xe0>)
 8011aa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d0b8      	beq.n	8011a20 <scalbn+0x30>
 8011aae:	a10e      	add	r1, pc, #56	; (adr r1, 8011ae8 <scalbn+0xf8>)
 8011ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ab4:	e7b4      	b.n	8011a20 <scalbn+0x30>
 8011ab6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011aba:	3236      	adds	r2, #54	; 0x36
 8011abc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011ac0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011ac4:	4620      	mov	r0, r4
 8011ac6:	4b0c      	ldr	r3, [pc, #48]	; (8011af8 <scalbn+0x108>)
 8011ac8:	2200      	movs	r2, #0
 8011aca:	e7e8      	b.n	8011a9e <scalbn+0xae>
 8011acc:	f3af 8000 	nop.w
 8011ad0:	c2f8f359 	.word	0xc2f8f359
 8011ad4:	01a56e1f 	.word	0x01a56e1f
 8011ad8:	8800759c 	.word	0x8800759c
 8011adc:	7e37e43c 	.word	0x7e37e43c
 8011ae0:	8800759c 	.word	0x8800759c
 8011ae4:	fe37e43c 	.word	0xfe37e43c
 8011ae8:	c2f8f359 	.word	0xc2f8f359
 8011aec:	81a56e1f 	.word	0x81a56e1f
 8011af0:	43500000 	.word	0x43500000
 8011af4:	ffff3cb0 	.word	0xffff3cb0
 8011af8:	3c900000 	.word	0x3c900000

08011afc <_init>:
 8011afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011afe:	bf00      	nop
 8011b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b02:	bc08      	pop	{r3}
 8011b04:	469e      	mov	lr, r3
 8011b06:	4770      	bx	lr

08011b08 <_fini>:
 8011b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b0a:	bf00      	nop
 8011b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b0e:	bc08      	pop	{r3}
 8011b10:	469e      	mov	lr, r3
 8011b12:	4770      	bx	lr
